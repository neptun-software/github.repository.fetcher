{
  "metadata": {
    "timestamp": 1736568114046,
    "page": 4,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rclone/rclone",
      "stars": 48105,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3076171875,
          "content": "# Go writes go.mod and go.sum with lf even on windows\ngo.mod text eol=lf\ngo.sum text eol=lf\n\n# Ignore generated files in GitHub language statistics and diffs\n/MANUAL.* linguist-generated=true\n/rclone.1 linguist-generated=true\n\n# Don't fiddle with the line endings of test data\n**/testdata/** -text\n**/test/** -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.234375,
          "content": "*~\n_junk/\nrclone\nrclone.exe\nbuild\n/docs/public/\n/docs/.hugo_build.lock\n/docs/static/img/logos/\nrclone.iml\n.idea\n.history\n.vscode\n*.test\n*.iml\nfuzz-build.zip\n*.orig\n*.rej\nThumbs.db\n__pycache__\n.DS_Store\nresource_windows_*.syso\n.devcontainer\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 3.568359375,
          "content": "# golangci-lint configuration options\n\nlinters:\n  enable:\n    - errcheck\n    - goimports\n    - revive\n    - ineffassign\n    - govet\n    - unconvert\n    - staticcheck\n    - gosimple\n    - stylecheck\n    - unused\n    - misspell\n    - gocritic\n    #- prealloc\n    #- maligned\n  disable-all: true\n\nissues:\n  # Enable some lints excluded by default\n  exclude-use-default: false\n\n  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.\n  max-issues-per-linter: 0\n\n  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.\n  max-same-issues: 0\n\n  exclude-rules:\n\n    - linters:\n      - staticcheck\n      text: 'SA1019: \"github.com/rclone/rclone/cmd/serve/httplib\" is deprecated'\n\n  # don't disable the revive messages about comments on exported functions\n  include:\n    - EXC0012\n    - EXC0013\n    - EXC0014\n    - EXC0015\n\nrun:\n  # timeout for analysis, e.g. 30s, 5m, default is 1m\n  timeout: 10m\n\nlinters-settings:\n  revive:\n    # setting rules seems to disable all the rules, so re-enable them here\n    rules:\n      - name: blank-imports\n        disabled: false\n      - name: context-as-argument\n        disabled: false\n      - name: context-keys-type\n        disabled: false\n      - name: dot-imports\n        disabled: false\n      - name: empty-block\n        disabled: true\n      - name: error-naming\n        disabled: false\n      - name: error-return\n        disabled: false\n      - name: error-strings\n        disabled: false\n      - name: errorf\n        disabled: false\n      - name: exported\n        disabled: false\n      - name: increment-decrement\n        disabled: true\n      - name: indent-error-flow\n        disabled: false\n      - name: package-comments\n        disabled: false\n      - name: range\n        disabled: false\n      - name: receiver-naming\n        disabled: false\n      - name: redefines-builtin-id\n        disabled: true\n      - name: superfluous-else\n        disabled: true\n      - name: time-naming\n        disabled: false\n      - name: unexported-return\n        disabled: false\n      - name: unreachable-code\n        disabled: true\n      - name: unused-parameter\n        disabled: true\n      - name: var-declaration\n        disabled: false\n      - name: var-naming\n        disabled: false\n  stylecheck:\n    # Only enable the checks performed by the staticcheck stand-alone tool,\n    # as documented here: https://staticcheck.io/docs/configuration/options/#checks\n    checks: [\"all\", \"-ST1000\", \"-ST1003\", \"-ST1016\", \"-ST1020\", \"-ST1021\", \"-ST1022\", \"-ST1023\"]\n  gocritic:\n    # Enable all default checks with some exceptions and some additions (commented).\n    # Cannot use both enabled-checks and disabled-checks, so must specify all to be used.\n    disable-all: true\n    enabled-checks:\n      #- appendAssign # Enabled by default\n      - argOrder\n      - assignOp\n      - badCall\n      - badCond\n      #- captLocal # Enabled by default\n      - caseOrder\n      - codegenComment\n      #- commentFormatting # Enabled by default\n      - defaultCaseOrder\n      - deprecatedComment\n      - dupArg\n      - dupBranchBody\n      - dupCase\n      - dupSubExpr\n      - elseif\n      #- exitAfterDefer # Enabled by default\n      - flagDeref\n      - flagName\n      #- ifElseChain # Enabled by default\n      - mapKey\n      - newDeref\n      - offBy1\n      - regexpMust\n      - ruleguard # Not enabled by default\n      #- singleCaseSwitch # Enabled by default\n      - sloppyLen\n      - sloppyTypeAssert\n      - switchTrue\n      - typeSwitchVar\n      - underef\n      - unlambda\n      - unslice\n      - valSwap\n      - wrapperFunc\n    settings:\n      ruleguard:\n        rules: \"${configDir}/bin/rules.go\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 24.390625,
          "content": "# Contributing to rclone\n\nThis is a short guide on how to contribute things to rclone.\n\n## Reporting a bug\n\nIf you've just got a question or aren't sure if you've found a bug\nthen please use the [rclone forum](https://forum.rclone.org/) instead\nof filing an issue.\n\nWhen filing an issue, please include the following information if\npossible as well as a description of the problem.  Make sure you test\nwith the [latest beta of rclone](https://beta.rclone.org/):\n\n- Rclone version (e.g. output from `rclone version`)\n- Which OS you are using and how many bits (e.g. Windows 10, 64 bit)\n- The command you were trying to run (e.g. `rclone copy /tmp remote:tmp`)\n- A log of the command with the `-vv` flag (e.g. output from `rclone -vv copy /tmp remote:tmp`)\n    - if the log contains secrets then edit the file with a text editor first to obscure them\n\n## Submitting a new feature or bug fix\n\nIf you find a bug that you'd like to fix, or a new feature that you'd\nlike to implement then please submit a pull request via GitHub.\n\nIf it is a big feature, then [make an issue](https://github.com/rclone/rclone/issues) first so it can be discussed.\n\nTo prepare your pull request first press the fork button on [rclone's GitHub\npage](https://github.com/rclone/rclone).\n\nThen [install Git](https://git-scm.com/downloads) and set your public contribution [name](https://docs.github.com/en/github/getting-started-with-github/setting-your-username-in-git) and [email](https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address#setting-your-commit-email-address-in-git).\n\nNext open your terminal, change directory to your preferred folder and initialise your local rclone project:\n\n    git clone https://github.com/rclone/rclone.git\n    cd rclone\n    git remote rename origin upstream\n      # if you have SSH keys setup in your GitHub account:\n    git remote add origin git@github.com:YOURUSER/rclone.git\n      # otherwise:\n    git remote add origin https://github.com/YOURUSER/rclone.git\n\nNote that most of the terminal commands in the rest of this guide must be executed from the rclone folder created above.\n\nNow [install Go](https://golang.org/doc/install) and verify your installation:\n\n    go version\n\nGreat, you can now compile and execute your own version of rclone:\n\n    go build\n    ./rclone version\n\n(Note that you can also replace `go build` with `make`, which will include a\nmore accurate version number in the executable as well as enable you to specify\nmore build options.) Finally make a branch to add your new feature\n\n    git checkout -b my-new-feature\n\nAnd get hacking.\n\nYou may like one of the [popular editors/IDE's for Go](https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins) and a quick view on the rclone [code organisation](#code-organisation).\n\nWhen ready - test the affected functionality and run the unit tests for the code you changed\n\n    cd folder/with/changed/files\n    go test -v\n\nNote that you may need to make a test remote, e.g. `TestSwift` for some\nof the unit tests.\n\nThis is typically enough if you made a simple bug fix, otherwise please read the rclone [testing](#testing) section too.\n\nMake sure you\n\n- Add [unit tests](#testing) for a new feature.\n- Add [documentation](#writing-documentation) for a new feature.\n- [Commit your changes](#committing-your-changes) using the [commit message guidelines](#commit-messages).\n\nWhen you are done with that push your changes to GitHub:\n\n    git push -u origin my-new-feature\n\nand open the GitHub website to [create your pull\nrequest](https://help.github.com/articles/creating-a-pull-request/).\n\nYour changes will then get reviewed and you might get asked to fix some stuff. If so, then make the changes in the same branch, commit and push your updates to GitHub.\n\nYou may sometimes be asked to [base your changes on the latest master](#basing-your-changes-on-the-latest-master) or [squash your commits](#squashing-your-commits).\n\n## Using Git and GitHub\n\n### Committing your changes\n\nFollow the guideline for [commit messages](#commit-messages) and then:\n\n    git checkout my-new-feature      # To switch to your branch\n    git status                       # To see the new and changed files\n    git add FILENAME                 # To select FILENAME for the commit\n    git status                       # To verify the changes to be committed\n    git commit                       # To do the commit\n    git log                          # To verify the commit. Use q to quit the log\n\nYou can modify the message or changes in the latest commit using:\n\n    git commit --amend\n\nIf you amend to commits that have been pushed to GitHub, then you will have to [replace your previously pushed commits](#replacing-your-previously-pushed-commits).\n\n### Replacing your previously pushed commits\n\nNote that you are about to rewrite the GitHub history of your branch. It is good practice to involve your collaborators before modifying commits that have been pushed to GitHub.\n\nYour previously pushed commits are replaced by:\n\n    git push --force origin my-new-feature \n\n### Basing your changes on the latest master\n\nTo base your changes on the latest version of the [rclone master](https://github.com/rclone/rclone/tree/master) (upstream):\n\n    git checkout master\n    git fetch upstream\n    git merge --ff-only\n    git push origin --follow-tags    # optional update of your fork in GitHub\n    git checkout my-new-feature\n    git rebase master\n\nIf you rebase commits that have been pushed to GitHub, then you will have to [replace your previously pushed commits](#replacing-your-previously-pushed-commits).\n\n### Squashing your commits ###\n\nTo combine your commits into one commit:\n\n    git log                          # To count the commits to squash, e.g. the last 2\n    git reset --soft HEAD~2          # To undo the 2 latest commits\n    git status                       # To check everything is as expected\n\nIf everything is fine, then make the new combined commit:\n\n    git commit                       # To commit the undone commits as one\n\notherwise, you may roll back using:\n\n    git reflog                       # To check that HEAD{1} is your previous state\n    git reset --soft 'HEAD@{1}'      # To roll back to your previous state\n\nIf you squash commits that have been pushed to GitHub, then you will have to [replace your previously pushed commits](#replacing-your-previously-pushed-commits).\n\nTip: You may like to use `git rebase -i master` if you are experienced or have a more complex situation.\n\n### GitHub Continuous Integration\n\nrclone currently uses [GitHub Actions](https://github.com/rclone/rclone/actions) to build and test the project, which should be automatically available for your fork too from the `Actions` tab in your repository.\n\n## Testing\n\n### Code quality tests\n\nIf you install [golangci-lint](https://github.com/golangci/golangci-lint) then you can run the same tests as get run in the CI which can be very helpful.\n\nYou can run them with `make check` or with `golangci-lint run ./...`.\n\nUsing these tests ensures that the rclone codebase all uses the same coding standards. These tests also check for easy mistakes to make (like forgetting to check an error return).\n\n### Quick testing\n\nrclone's tests are run from the go testing framework, so at the top\nlevel you can run this to run all the tests.\n\n    go test -v ./...\n\nYou can also use `make`, if supported by your platform\n\n    make quicktest\n\nThe quicktest is [automatically run by GitHub](#github-continuous-integration) when you push your branch to GitHub.\n\n### Backend testing\n\nrclone contains a mixture of unit tests and integration tests.\nBecause it is difficult (and in some respects pointless) to test cloud\nstorage systems by mocking all their interfaces, rclone unit tests can\nrun against any of the backends.  This is done by making specially\nnamed remotes in the default config file.\n\nIf you wanted to test changes in the `drive` backend, then you would\nneed to make a remote called `TestDrive`.\n\nYou can then run the unit tests in the drive directory.  These tests\nare skipped if `TestDrive:` isn't defined.\n\n    cd backend/drive\n    go test -v\n\nYou can then run the integration tests which test all of rclone's\noperations.  Normally these get run against the local file system,\nbut they can be run against any of the remotes.\n\n    cd fs/sync\n    go test -v -remote TestDrive:\n    go test -v -remote TestDrive: -fast-list\n\n    cd fs/operations\n    go test -v -remote TestDrive:\n\nIf you want to use the integration test framework to run these tests\naltogether with an HTML report and test retries then from the\nproject root:\n\n    go install github.com/rclone/rclone/fstest/test_all\n    test_all -backends drive\n\n### Full integration testing\n\nIf you want to run all the integration tests against all the remotes,\nthen change into the project root and run\n\n    make check\n    make test\n\nThe commands may require some extra go packages which you can install with\n\n    make build_dep\n\nThe full integration tests are run daily on the integration test server. You can\nfind the results at https://pub.rclone.org/integration-tests/\n\n## Code Organisation\n\nRclone code is organised into a small number of top level directories\nwith modules beneath.\n\n- backend - the rclone backends for interfacing to cloud providers -\n    - all - import this to load all the cloud providers\n    - ...providers\n- bin - scripts for use while building or maintaining rclone\n- cmd - the rclone commands\n    - all - import this to load all the commands\n    - ...commands\n- cmdtest - end-to-end tests of commands, flags, environment variables,...\n- docs - the documentation and website\n    - content - adjust these docs only - everything else is autogenerated\n    - command - these are auto-generated - edit the corresponding .go file\n- fs - main rclone definitions - minimal amount of code\n    - accounting - bandwidth limiting and statistics\n    - asyncreader - an io.Reader which reads ahead\n    - config - manage the config file and flags\n    - driveletter - detect if a name is a drive letter\n    - filter - implements include/exclude filtering\n    - fserrors - rclone specific error handling\n    - fshttp - http handling for rclone\n    - fspath - path handling for rclone\n    - hash - defines rclone's hash types and functions\n    - list - list a remote\n    - log - logging facilities\n    - march - iterates directories in lock step\n    - object - in memory Fs objects\n    - operations - primitives for sync, e.g. Copy, Move\n    - sync - sync directories\n    - walk - walk a directory\n- fstest - provides integration test framework\n    - fstests - integration tests for the backends\n    - mockdir - mocks an fs.Directory\n    - mockobject - mocks an fs.Object\n    - test_all - Runs integration tests for everything\n- graphics - the images used in the website, etc.\n- lib - libraries used by the backend\n    - atexit - register functions to run when rclone exits\n    - dircache - directory ID to name caching\n    - oauthutil - helpers for using oauth\n    - pacer - retries with backoff and paces operations\n    - readers - a selection of useful io.Readers\n    - rest - a thin abstraction over net/http for REST\n- librclone - in memory interface to rclone's API for embedding rclone\n- vfs - Virtual FileSystem layer for implementing rclone mount and similar\n\n## Writing Documentation\n\nIf you are adding a new feature then please update the documentation.\n\nIf you add a new general flag (not for a backend), then document it in\n`docs/content/docs.md` - the flags there are supposed to be in\nalphabetical order.\n\nIf you add a new backend option/flag, then it should be documented in\nthe source file in the `Help:` field.\n\n- Start with the most important information about the option,\n    as a single sentence on a single line.\n    - This text will be used for the command-line flag help.\n    - It will be combined with other information, such as any default value,\n      and the result will look odd if not written as a single sentence.\n    - It should end with a period/full stop character, which will be shown\n      in docs but automatically removed when producing the flag help.\n    - Try to keep it below 80 characters, to reduce text wrapping in the terminal.\n- More details can be added in a new paragraph, after an empty line (`\"\\n\\n\"`).\n    - Like with docs generated from Markdown, a single line break is ignored\n      and two line breaks creates a new paragraph.\n    - This text will be shown to the user in `rclone config`\n      and in the docs (where it will be added by `make backenddocs`,\n      normally run some time before next release).\n- To create options of enumeration type use the `Examples:` field.\n    - Each example value have their own `Help:` field, but they are treated\n      a bit different than the main option help text. They will be shown\n      as an unordered list, therefore a single line break is enough to\n      create a new list item. Also, for enumeration texts like name of\n      countries, it looks better without an ending period/full stop character.\n\nThe only documentation you need to edit are the `docs/content/*.md`\nfiles.  The `MANUAL.*`, `rclone.1`, website, etc. are all auto-generated\nfrom those during the release process.  See the `make doc` and `make\nwebsite` targets in the Makefile if you are interested in how.  You\ndon't need to run these when adding a feature.\n\nDocumentation for rclone sub commands is with their code, e.g.\n`cmd/ls/ls.go`. Write flag help strings as a single sentence on a single\nline, without a period/full stop character at the end, as it will be\ncombined unmodified with other information (such as any default value).\n\nNote that you can use [GitHub's online editor](https://help.github.com/en/github/managing-files-in-a-repository/editing-files-in-another-users-repository)\nfor small changes in the docs which makes it very easy.\n\n## Making a release\n\nThere are separate instructions for making a release in the RELEASE.md\nfile.\n\n## Commit messages\n\nPlease make the first line of your commit message a summary of the\nchange that a user (not a developer) of rclone would like to read, and\nprefix it with the directory of the change followed by a colon.  The\nchangelog gets made by looking at just these first lines so make it\ngood!\n\nIf you have more to say about the commit, then enter a blank line and\ncarry on the description.  Remember to say why the change was needed -\nthe commit itself shows what was changed.\n\nWriting more is better than less.  Comparing the behaviour before the\nchange to that after the change is very useful.  Imagine you are\nwriting to yourself in 12 months time when you've forgotten everything\nabout what you just did and you need to get up to speed quickly.\n\nIf the change fixes an issue then write `Fixes #1234` in the commit\nmessage.  This can be on the subject line if it will fit.  If you\ndon't want to close the associated issue just put `#1234` and the\nchange will get linked into the issue.\n\nHere is an example of a short commit message:\n\n```\ndrive: add team drive support - fixes #885\n```\n\nAnd here is an example of a longer one:\n\n```\nmount: fix hang on errored upload\n\nIn certain circumstances, if an upload failed then the mount could hang\nindefinitely. This was fixed by closing the read pipe after the Put\ncompleted.  This will cause the write side to return a pipe closed\nerror fixing the hang.\n\nFixes #1498\n```\n\n## Adding a dependency\n\nrclone uses the [go\nmodules](https://tip.golang.org/cmd/go/#hdr-Modules__module_versions__and_more)\nsupport in go1.11 and later to manage its dependencies.\n\nrclone can be built with modules outside of the `GOPATH`.\n\nTo add a dependency `github.com/ncw/new_dependency` see the\ninstructions below.  These will fetch the dependency and add it to\n`go.mod` and `go.sum`.\n\n    go get github.com/ncw/new_dependency\n\nYou can add constraints on that package when doing `go get` (see the\ngo docs linked above), but don't unless you really need to.\n\nPlease check in the changes generated by `go mod` including `go.mod`\nand `go.sum` in the same commit as your other changes.\n\n## Updating a dependency\n\nIf you need to update a dependency then run\n\n    go get golang.org/x/crypto\n\nCheck in a single commit as above.\n\n## Updating all the dependencies\n\nIn order to update all the dependencies then run `make update`.  This\njust uses the go modules to update all the modules to their latest\nstable release. Check in the changes in a single commit as above.\n\nThis should be done early in the release cycle to pick up new versions\nof packages in time for them to get some testing.\n\n## Updating a backend\n\nIf you update a backend then please run the unit tests and the\nintegration tests for that backend.\n\nAssuming the backend is called `remote`, make create a config entry\ncalled `TestRemote` for the tests to use.\n\nNow `cd remote` and run `go test -v` to run the unit tests.\n\nThen `cd fs` and run `go test -v -remote TestRemote:` to run the\nintegration tests.\n\nThe next section goes into more detail about the tests.\n\n## Writing a new backend\n\nChoose a name.  The docs here will use `remote` as an example.\n\nNote that in rclone terminology a file system backend is called a\nremote or an fs.\n\n### Research\n\n- Look at the interfaces defined in `fs/types.go`\n- Study one or more of the existing remotes\n\n### Getting going\n\n- Create `backend/remote/remote.go` (copy this from a similar remote)\n    - box is a good one to start from if you have a directory-based remote (and shows how to use the directory cache)\n    - b2 is a good one to start from if you have a bucket-based remote\n- Add your remote to the imports in `backend/all/all.go`\n- HTTP based remotes are easiest to maintain if they use rclone's [lib/rest](https://pkg.go.dev/github.com/rclone/rclone/lib/rest) module, but if there is a really good Go SDK from the provider then use that instead.\n- Try to implement as many optional methods as possible as it makes the remote more usable.\n- Use [lib/encoder](https://pkg.go.dev/github.com/rclone/rclone/lib/encoder) to make sure we can encode any path name and `rclone info` to help determine the encodings needed\n    - `rclone purge -v TestRemote:rclone-info`\n    - `rclone test info --all --remote-encoding None -vv --write-json remote.json TestRemote:rclone-info`\n    - `go run cmd/test/info/internal/build_csv/main.go -o remote.csv remote.json`\n    - open `remote.csv` in a spreadsheet and examine\n\n### Guidelines for a speedy merge\n\n- **Do** use [lib/rest](https://pkg.go.dev/github.com/rclone/rclone/lib/rest) if you are implementing a REST like backend and parsing XML/JSON in the backend.\n- **Do** use rclone's Client or Transport from [fs/fshttp](https://pkg.go.dev/github.com/rclone/rclone/fs/fshttp) if your backend is HTTP based - this adds features like `--dump bodies`, `--tpslimit`, `--user-agent` without you having to code anything!\n- **Do** follow your example backend exactly - use the same code order, function names, layout, structure. **Don't** move stuff around and **Don't** delete the comments.\n- **Do not** split your backend up into `fs.go` and `object.go` (there are a few backends like that - don't follow them!)\n- **Do** put your API type definitions in a separate file - by preference `api/types.go`\n- **Remember** we have >50 backends to maintain so keeping them as similar as possible to each other is a high priority!\n\n### Unit tests\n\n- Create a config entry called `TestRemote` for the unit tests to use\n- Create a `backend/remote/remote_test.go` - copy and adjust your example remote\n- Make sure all tests pass with `go test -v`\n\n### Integration tests\n\n- Add your backend to `fstest/test_all/config.yaml`\n    - Once you've done that then you can use the integration test framework from the project root:\n    - go install ./...\n    - test_all -backends remote\n\nOr if you want to run the integration tests manually:\n\n- Make sure integration tests pass with\n    - `cd fs/operations`\n    - `go test -v -remote TestRemote:`\n    - `cd fs/sync`\n    - `go test -v -remote TestRemote:`\n- If your remote defines `ListR` check with this also\n    - `go test -v -remote TestRemote: -fast-list`\n\nSee the [testing](#testing) section for more information on integration tests.\n\n### Backend documentation\n\nAdd your backend to the docs - you'll need to pick an icon for it from\n[fontawesome](http://fontawesome.io/icons/).  Keep lists of remotes in\nalphabetical order of full name of remote (e.g. `drive` is ordered as\n`Google Drive`) but with the local file system last.\n\n- `README.md` - main GitHub page\n- `docs/content/remote.md` - main docs page (note the backend options are automatically added to this file with `make backenddocs`)\n    - make sure this has the `autogenerated options` comments in (see your reference backend docs)\n    - update them in your backend with `bin/make_backend_docs.py remote`\n- `docs/content/overview.md` - overview docs - add an entry into the Features table and the Optional Features table.\n- `docs/content/docs.md` - list of remotes in config section\n- `docs/content/_index.md` - front page of rclone.org\n- `docs/layouts/chrome/navbar.html` - add it to the website navigation\n- `bin/make_manual.py` - add the page to the `docs` constant\n\nOnce you've written the docs, run `make serve` and check they look OK\nin the web browser and the links (internal and external) all work.\n\n## Adding a new s3 provider\n\nIt is quite easy to add a new S3 provider to rclone.\n\nYou'll need to modify the following files\n\n- `backend/s3/s3.go`\n    - Add the provider to `providerOption` at the top of the file\n    - Add endpoints and other config for your provider gated on the provider in `fs.RegInfo`.\n    - Exclude your provider from generic config questions (eg `region` and `endpoint).\n    - Add the provider to the `setQuirks` function - see the documentation there.\n- `docs/content/s3.md`\n    - Add the provider at the top of the page.\n    - Add a section about the provider linked from there.\n    - Add a transcript of a trial `rclone config` session\n        - Edit the transcript to remove things which might change in subsequent versions\n    - **Do not** alter or add to the autogenerated parts of `s3.md`\n    - **Do not** run `make backenddocs` or `bin/make_backend_docs.py s3`\n- `README.md` - this is the home page in github\n    - Add the provider and a link to the section you wrote in `docs/contents/s3.md`\n- `docs/content/_index.md` - this is the home page of rclone.org\n    - Add the provider and a link to the section you wrote in `docs/contents/s3.md`\n\nWhen adding the provider, endpoints, quirks, docs etc keep them in\nalphabetical order by `Provider` name, but with `AWS` first and\n`Other` last.\n\nOnce you've written the docs, run `make serve` and check they look OK\nin the web browser and the links (internal and external) all work.\n\nOnce you've written the code, test `rclone config` works to your\nsatisfaction, and check the integration tests work `go test -v -remote\nNewS3Provider:`. You may need to adjust the quirks to get them to\npass. Some providers just can't pass the tests with control characters\nin the names so if these fail and the provider doesn't support\n`urlEncodeListings` in the quirks then ignore them. Note that the\n`SetTier` test may also fail on non AWS providers.\n\nFor an example of adding an s3 provider see [eb3082a1](https://github.com/rclone/rclone/commit/eb3082a1ebdb76d5625f14cedec3f5154a5e7b10).\n\n## Writing a plugin\n\nNew features (backends, commands) can also be added \"out-of-tree\", through Go plugins.\nChanges will be kept in a dynamically loaded file instead of being compiled into the main binary.\nThis is useful if you can't merge your changes upstream or don't want to maintain a fork of rclone.\n\n### Usage\n\n - Naming\n   - Plugins names must have the pattern `librcloneplugin_KIND_NAME.so`.\n   - `KIND` should be one of `backend`, `command` or `bundle`.\n   - Example: A plugin with backend support for PiFS would be called\n     `librcloneplugin_backend_pifs.so`.\n - Loading\n   - Supported on macOS & Linux as of now. ([Go issue for Windows support](https://github.com/golang/go/issues/19282))\n   - Supported on rclone v1.50 or greater.\n   - All plugins in the folder specified by variable `$RCLONE_PLUGIN_PATH` are loaded.\n   - If this variable doesn't exist, plugin support is disabled.\n   - Plugins must be compiled against the exact version of rclone to work.\n     (The rclone used during building the plugin must be the same as the source of rclone)\n\n### Building\n\nTo turn your existing additions into a Go plugin, move them to an external repository\nand change the top-level package name to `main`.\n\nCheck `rclone --version` and make sure that the plugin's rclone dependency and host Go version match.\n\nThen, run `go build -buildmode=plugin -o PLUGIN_NAME.so .` to build the plugin.\n\n[Go reference](https://godoc.org/github.com/rclone/rclone/lib/plugin)\n\n[Minimal example](https://gist.github.com/terorie/21b517ee347828e899e1913efc1d684f)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.0693359375,
          "content": "Copyright (C) 2012 by Nick Craig-Wood http://www.craig-wood.com/nick/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5595703125,
          "content": "FROM golang:alpine AS builder\n\nCOPY . /go/src/github.com/rclone/rclone/\nWORKDIR /go/src/github.com/rclone/rclone/\n\nRUN apk add --no-cache make bash gawk git\nRUN \\\n  CGO_ENABLED=0 \\\n  make\nRUN ./rclone version\n\n# Begin final image\nFROM alpine:latest\n\nRUN apk --no-cache add ca-certificates fuse3 tzdata && \\\n  echo \"user_allow_other\" >> /etc/fuse.conf\n\nCOPY --from=builder /go/src/github.com/rclone/rclone/rclone /usr/local/bin/\n\nRUN addgroup -g 1009 rclone && adduser -u 1009 -Ds /bin/sh -G rclone rclone\n\nENTRYPOINT [ \"rclone\" ]\n\nWORKDIR /data\nENV XDG_CONFIG_HOME=/config\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 5.923828125,
          "content": "# Maintainers guide for rclone #\n\nCurrent active maintainers of rclone are:\n\n| Name             | GitHub ID         | Specific Responsibilities    |\n| :--------------- | :---------------- | :--------------------------  |\n| Nick Craig-Wood  | @ncw              | overall project health       |\n| Stefan Breunig   | @breunigs         |                              |\n| Ishuah Kariuki   | @ishuah           |                              |\n| Remus Bunduc     | @remusb           | cache backend                |\n| Fabian Möller    | @B4dM4n           |                              |\n| Alex Chen        | @Cnly             | onedrive backend             |\n| Sandeep Ummadi   | @sandeepkru       | azureblob backend            |\n| Sebastian Bünger | @buengese         | jottacloud, yandex & compress backends |\n| Ivan Andreev     | @ivandeex         | chunker & mailru backends    |\n| Max Sum          | @Max-Sum          | union backend                |\n| Fred             | @creativeprojects | seafile backend              |\n| Caleb Case       | @calebcase        | storj backend                |\n| wiserain         | @wiserain         | pikpak backend               |\n| albertony        | @albertony        |                              |\n| Chun-Hung Tseng  | @henrybear327     | Proton Drive Backend         |\n| Hideo Aoyama     | @boukendesho      | snap packaging               |\n| nielash          | @nielash          | bisync                       |\n| Dan McArdle      | @dmcardle         | gitannex                     |\n| Sam Harrison     | @childish-sambino | filescom                     |\n\n**This is a work in progress Draft**\n\nThis is a guide for how to be an rclone maintainer.  This is mostly a write-up of what I (@ncw) attempt to do.\n\n## Triaging Tickets ##\n\nWhen a ticket comes in it should be triaged.  This means it should be classified by adding labels and placed into a milestone. Quite a lot of tickets need a bit of back and forth to determine whether it is a valid ticket so tickets may remain without labels or milestone for a while.\n\nRclone uses the labels like this:\n\n* `bug` - a definitely verified bug\n* `can't reproduce` - a problem which we can't reproduce\n* `doc fix` - a bug in the documentation - if users need help understanding the docs add this label\n* `duplicate` - normally close these and ask the user to subscribe to the original\n* `enhancement: new remote` - a new rclone backend\n* `enhancement` - a new feature\n* `FUSE` - to do with `rclone mount` command\n* `good first issue` - mark these if you find a small self-contained issue - these get shown to new visitors to the project\n* `help` wanted - mark these if you find a self-contained issue - these get shown to new visitors to the project\n* `IMPORTANT` - note to maintainers not to forget to fix this for the release\n* `maintenance` - internal enhancement, code re-organisation, etc.\n* `Needs Go 1.XX` - waiting for that version of Go to be released\n* `question` - not a `bug` or `enhancement` - direct to the forum for next time\n* `Remote: XXX` - which rclone backend this affects\n* `thinking` - not decided on the course of action yet\n\nIf it turns out to be a bug or an enhancement it should be tagged as such, with the appropriate other tags.  Don't forget the \"good first issue\" tag to give new contributors something easy to do to get going.\n\nWhen a ticket is tagged it should be added to a milestone, either the next release, the one after, Soon or Help Wanted.  Bugs can be added to the \"Known Bugs\" milestone if they aren't planned to be fixed or need to wait for something (e.g. the next go release).\n\nThe milestones have these meanings:\n\n* v1.XX - stuff we would like to fit into this release\n* v1.XX+1 - stuff we are leaving until the next release\n* Soon - stuff we think is a good idea - waiting to be scheduled for a release\n* Help wanted - blue sky stuff that might get moved up, or someone could help with\n* Known bugs - bugs waiting on external factors or we aren't going to fix for the moment\n\nTickets [with no milestone](https://github.com/rclone/rclone/issues?utf8=✓&q=is%3Aissue%20is%3Aopen%20no%3Amile) are good candidates for ones that have slipped between the gaps and need following up.\n\n## Closing Tickets ##\n\nClose tickets as soon as you can - make sure they are tagged with a release.  Post a link to a beta in the ticket with the fix in, asking for feedback.\n\n## Pull requests ##\n\nTry to process pull requests promptly!\n\nMerging pull requests on GitHub itself works quite well nowadays so you can squash and rebase or rebase pull requests.  rclone doesn't use merge commits.  Use the squash and rebase option if you need to edit the commit message.\n\nAfter merging the commit, in your local master branch, do `git pull` then run `bin/update-authors.py` to update the authors file then `git push`.\n\nSometimes pull requests need to be left open for a while - this especially true of contributions of new backends which take a long time to get right.\n\n## Merges ##\n\nIf you are merging a branch locally then do `git merge --ff-only branch-name` to avoid a merge commit.  You'll need to rebase the branch if it doesn't merge cleanly.\n\n## Release cycle ##\n\nRclone aims for a 6-8 week release cycle.  Sometimes release cycles take longer if there is something big to merge that didn't stabilize properly or for personal reasons.\n\nHigh impact regressions should be fixed before the next release.\n\nNear the start of the release cycle, the dependencies should be updated with `make update` to give time for bugs to surface.\n\nTowards the end of the release cycle try not to merge anything too big so let things settle down.\n\nFollow the instructions in RELEASE.md for making the release. Note that the testing part is the most time-consuming often needing several rounds of test and fix depending on exactly how many new features rclone has gained.\n\n## Mailing list ##\n\nThere is now an invite-only mailing list for rclone developers `rclone-dev` on google groups.\n\n## TODO ##\n\nI should probably make a dev@rclone.org to register with cloud providers.\n"
        },
        {
          "name": "MANUAL.html",
          "type": "blob",
          "size": 2782.529296875,
          "content": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <meta name=\"author\" content=\"Nick Craig-Wood\" />\n  <title>rclone(1) User Manual</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<header id=\"title-block-header\">\n<h1 class=\"title\">rclone(1) User Manual</h1>\n<p class=\"author\">Nick Craig-Wood</p>\n<p class=\"date\">Sep 08, 2024</p>\n</header>\n<h1 id=\"rclone-syncs-your-files-to-cloud-storage\">Rclone syncs your files to cloud storage</h1>\n<p><img width=\"50%\" src=\"https://rclone.org/img/logo_on_light__horizontal_color.svg\" alt=\"rclone logo\" style=\"float:right; padding: 5px;\" ></p>\n<ul>\n<li><a href=\"#about\">About rclone</a></li>\n<li><a href=\"#what\">What can rclone do for you?</a></li>\n<li><a href=\"#features\">What features does rclone have?</a></li>\n<li><a href=\"#providers\">What providers does rclone support?</a></li>\n<li><a href=\"https://rclone.org/downloads/\">Download</a></li>\n<li><a href=\"https://rclone.org/install/\">Install</a></li>\n<li><a href=\"https://rclone.org/donate/\">Donate.</a></li>\n</ul>\n<h2 id=\"about\">About rclone</h2>\n<p>Rclone is a command-line program to manage files on cloud storage. It is a feature-rich alternative to cloud vendors' web storage interfaces. <a href=\"#providers\">Over 70 cloud storage products</a> support rclone including S3 object stores, business &amp; consumer file storage services, as well as standard transfer protocols.</p>\n<p>Rclone has powerful cloud equivalents to the unix commands rsync, cp, mv, mount, ls, ncdu, tree, rm, and cat. Rclone's familiar syntax includes shell pipeline support, and <code>--dry-run</code> protection. It is used at the command line, in scripts or via its <a href=\"/rc\">API</a>.</p>\n<p>Users call rclone <em>\"The Swiss army knife of cloud storage\"</em>, and <em>\"Technology indistinguishable from magic\"</em>.</p>\n<p>Rclone really looks after your data. It preserves timestamps and verifies checksums at all times. Transfers over limited bandwidth; intermittent connections, or subject to quota can be restarted, from the last good file transferred. You can <a href=\"https://rclone.org/commands/rclone_check/\">check</a> the integrity of your files. Where possible, rclone employs server-side transfers to minimise local bandwidth use and transfers from one provider to another without using local disk.</p>\n<p>Virtual backends wrap local and cloud file systems to apply <a href=\"https://rclone.org/crypt/\">encryption</a>, <a href=\"https://rclone.org/compress/\">compression</a>, <a href=\"https://rclone.org/chunker/\">chunking</a>, <a href=\"https://rclone.org/hasher/\">hashing</a> and <a href=\"https://rclone.org/union/\">joining</a>.</p>\n<p>Rclone <a href=\"https://rclone.org/commands/rclone_mount/\">mounts</a> any local, cloud or virtual filesystem as a disk on Windows, macOS, linux and FreeBSD, and also serves these over <a href=\"https://rclone.org/commands/rclone_serve_sftp/\">SFTP</a>, <a href=\"https://rclone.org/commands/rclone_serve_http/\">HTTP</a>, <a href=\"https://rclone.org/commands/rclone_serve_webdav/\">WebDAV</a>, <a href=\"https://rclone.org/commands/rclone_serve_ftp/\">FTP</a> and <a href=\"https://rclone.org/commands/rclone_serve_dlna/\">DLNA</a>.</p>\n<p>Rclone is mature, open-source software originally inspired by rsync and written in <a href=\"https://golang.org\">Go</a>. The friendly support community is familiar with varied use cases. Official Ubuntu, Debian, Fedora, Brew and Chocolatey repos. include rclone. For the latest version <a href=\"https://rclone.org/downloads/\">downloading from rclone.org</a> is recommended.</p>\n<p>Rclone is widely used on Linux, Windows and Mac. Third-party developers create innovative backup, restore, GUI and business process solutions using the rclone command line or API.</p>\n<p>Rclone does the heavy lifting of communicating with cloud storage.</p>\n<h2 id=\"what\">What can rclone do for you?</h2>\n<p>Rclone helps you:</p>\n<ul>\n<li>Backup (and encrypt) files to cloud storage</li>\n<li>Restore (and decrypt) files from cloud storage</li>\n<li>Mirror cloud data to other cloud services or locally</li>\n<li>Migrate data to the cloud, or between cloud storage vendors</li>\n<li>Mount multiple, encrypted, cached or diverse cloud storage as a disk</li>\n<li>Analyse and account for data held on cloud storage using <a href=\"https://rclone.org/commands/rclone_lsf/\">lsf</a>, <a href=\"https://rclone.org/commands/rclone_lsjson/\">ljson</a>, <a href=\"https://rclone.org/commands/rclone_size/\">size</a>, <a href=\"https://rclone.org/commands/rclone_ncdu/\">ncdu</a></li>\n<li><a href=\"https://rclone.org/union/\">Union</a> file systems together to present multiple local and/or cloud file systems as one</li>\n</ul>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>Transfers\n<ul>\n<li>MD5, SHA1 hashes are checked at all times for file integrity</li>\n<li>Timestamps are preserved on files</li>\n<li>Operations can be restarted at any time</li>\n<li>Can be to and from network, e.g. two different cloud providers</li>\n<li>Can use multi-threaded downloads to local disk</li>\n</ul></li>\n<li><a href=\"https://rclone.org/commands/rclone_copy/\">Copy</a> new or changed files to cloud storage</li>\n<li><a href=\"https://rclone.org/commands/rclone_sync/\">Sync</a> (one way) to make a directory identical</li>\n<li><a href=\"https://rclone.org/bisync/\">Bisync</a> (two way) to keep two directories in sync bidirectionally</li>\n<li><a href=\"https://rclone.org/commands/rclone_move/\">Move</a> files to cloud storage deleting the local after verification</li>\n<li><a href=\"https://rclone.org/commands/rclone_check/\">Check</a> hashes and for missing/extra files</li>\n<li><a href=\"https://rclone.org/commands/rclone_mount/\">Mount</a> your cloud storage as a network disk</li>\n<li><a href=\"https://rclone.org/commands/rclone_serve/\">Serve</a> local or remote files over <a href=\"https://rclone.org/commands/rclone_serve_http/\">HTTP</a>/<a href=\"https://rclone.org/commands/rclone_serve_webdav/\">WebDav</a>/<a href=\"https://rclone.org/commands/rclone_serve_ftp/\">FTP</a>/<a href=\"https://rclone.org/commands/rclone_serve_sftp/\">SFTP</a>/<a href=\"https://rclone.org/commands/rclone_serve_dlna/\">DLNA</a></li>\n<li>Experimental <a href=\"https://rclone.org/gui/\">Web based GUI</a></li>\n</ul>\n<h2 id=\"providers\">Supported providers</h2>\n<p>(There are many others, built on standard protocols such as WebDAV or S3, that work out of the box.)</p>\n<ul>\n<li>1Fichier</li>\n<li>Akamai Netstorage</li>\n<li>Alibaba Cloud (Aliyun) Object Storage System (OSS)</li>\n<li>Amazon S3</li>\n<li>Backblaze B2</li>\n<li>Box</li>\n<li>Ceph</li>\n<li>China Mobile Ecloud Elastic Object Storage (EOS)</li>\n<li>Arvan Cloud Object Storage (AOS)</li>\n<li>Citrix ShareFile</li>\n<li>Cloudflare R2</li>\n<li>DigitalOcean Spaces</li>\n<li>Digi Storage</li>\n<li>Dreamhost</li>\n<li>Dropbox</li>\n<li>Enterprise File Fabric</li>\n<li>Fastmail Files</li>\n<li>Files.com</li>\n<li>FTP</li>\n<li>Gofile</li>\n<li>Google Cloud Storage</li>\n<li>Google Drive</li>\n<li>Google Photos</li>\n<li>HDFS</li>\n<li>Hetzner Storage Box</li>\n<li>HiDrive</li>\n<li>HTTP</li>\n<li>ImageKit</li>\n<li>Internet Archive</li>\n<li>Jottacloud</li>\n<li>IBM COS S3</li>\n<li>IDrive e2</li>\n<li>IONOS Cloud</li>\n<li>Koofr</li>\n<li>Leviia Object Storage</li>\n<li>Liara Object Storage</li>\n<li>Linkbox</li>\n<li>Linode Object Storage</li>\n<li>Magalu</li>\n<li>Mail.ru Cloud</li>\n<li>Memset Memstore</li>\n<li>Mega</li>\n<li>Memory</li>\n<li>Microsoft Azure Blob Storage</li>\n<li>Microsoft Azure Files Storage</li>\n<li>Microsoft OneDrive</li>\n<li>Minio</li>\n<li>Nextcloud</li>\n<li>OVH</li>\n<li>Blomp Cloud Storage</li>\n<li>OpenDrive</li>\n<li>OpenStack Swift</li>\n<li>Oracle Cloud Storage Swift</li>\n<li>Oracle Object Storage</li>\n<li>ownCloud</li>\n<li>pCloud</li>\n<li>Petabox</li>\n<li>PikPak</li>\n<li>Pixeldrain</li>\n<li>premiumize.me</li>\n<li>put.io</li>\n<li>Proton Drive</li>\n<li>QingStor</li>\n<li>Qiniu Cloud Object Storage (Kodo)</li>\n<li>Quatrix by Maytech</li>\n<li>Rackspace Cloud Files</li>\n<li>rsync.net</li>\n<li>Scaleway</li>\n<li>Seafile</li>\n<li>Seagate Lyve Cloud</li>\n<li>SeaweedFS</li>\n<li>SFTP</li>\n<li>Sia</li>\n<li>SMB / CIFS</li>\n<li>StackPath</li>\n<li>Storj</li>\n<li>Synology</li>\n<li>SugarSync</li>\n<li>Tencent Cloud Object Storage (COS)</li>\n<li>Uloz.to</li>\n<li>Uptobox</li>\n<li>Wasabi</li>\n<li>WebDAV</li>\n<li>Yandex Disk</li>\n<li>Zoho WorkDrive</li>\n<li>The local filesystem</li>\n</ul>\n<h2 id=\"virtual-providers\">Virtual providers</h2>\n<p>These backends adapt or modify other storage providers:</p>\n<ul>\n<li>Alias: Rename existing remotes</li>\n<li>Cache: Cache remotes (DEPRECATED)</li>\n<li>Chunker: Split large files</li>\n<li>Combine: Combine multiple remotes into a directory tree</li>\n<li>Compress: Compress files</li>\n<li>Crypt: Encrypt files</li>\n<li>Hasher: Hash files</li>\n<li>Union: Join multiple remotes to work together</li>\n</ul>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://rclone.org/\">Home page</a></li>\n<li><a href=\"https://github.com/rclone/rclone\">GitHub project page for source and bug tracker</a></li>\n<li><a href=\"https://forum.rclone.org\">Rclone Forum</a></li>\n<li><a href=\"https://rclone.org/downloads/\">Downloads</a></li>\n</ul>\n<h1 id=\"install\">Install</h1>\n<p>Rclone is a Go program and comes as a single binary file.</p>\n<h2 id=\"quickstart\">Quickstart</h2>\n<ul>\n<li><a href=\"https://rclone.org/downloads/\">Download</a> the relevant binary.</li>\n<li>Extract the <code>rclone</code> executable, <code>rclone.exe</code> on Windows, from the archive.</li>\n<li>Run <code>rclone config</code> to setup. See <a href=\"https://rclone.org/docs/\">rclone config docs</a> for more details.</li>\n<li>Optionally configure <a href=\"#autostart\">automatic execution</a>.</li>\n</ul>\n<p>See below for some expanded Linux / macOS / Windows instructions.</p>\n<p>See the <a href=\"https://rclone.org/docs/\">usage</a> docs for how to use rclone, or run <code>rclone -h</code>.</p>\n<p>Already installed rclone can be easily updated to the latest version using the <a href=\"https://rclone.org/commands/rclone_selfupdate/\">rclone selfupdate</a> command.</p>\n<p>See <a href=\"https://rclone.org/release_signing/\">the release signing docs</a> for how to verify signatures on the release.</p>\n<h2 id=\"script-installation\">Script installation</h2>\n<p>To install rclone on Linux/macOS/BSD systems, run:</p>\n<pre><code>sudo -v ; curl https://rclone.org/install.sh | sudo bash</code></pre>\n<p>For beta installation, run:</p>\n<pre><code>sudo -v ; curl https://rclone.org/install.sh | sudo bash -s beta</code></pre>\n<p>Note that this script checks the version of rclone installed first and won't re-download if not needed.</p>\n<h2 id=\"linux\">Linux installation</h2>\n<h3 id=\"linux-precompiled\">Precompiled binary</h3>\n<p>Fetch and unpack</p>\n<pre><code>curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip\nunzip rclone-current-linux-amd64.zip\ncd rclone-*-linux-amd64</code></pre>\n<p>Copy binary file</p>\n<pre><code>sudo cp rclone /usr/bin/\nsudo chown root:root /usr/bin/rclone\nsudo chmod 755 /usr/bin/rclone</code></pre>\n<p>Install manpage</p>\n<pre><code>sudo mkdir -p /usr/local/share/man/man1\nsudo cp rclone.1 /usr/local/share/man/man1/\nsudo mandb</code></pre>\n<p>Run <code>rclone config</code> to setup. See <a href=\"https://rclone.org/docs/\">rclone config docs</a> for more details.</p>\n<pre><code>rclone config</code></pre>\n<h2 id=\"macos\">macOS installation</h2>\n<h3 id=\"macos-brew\">Installation with brew</h3>\n<pre><code>brew install rclone</code></pre>\n<p>NOTE: This version of rclone will not support <code>mount</code> any more (see <a href=\"https://github.com/rclone/rclone/issues/5373\">#5373</a>). If mounting is wanted on macOS, either install a precompiled binary or enable the relevant option when <a href=\"#source\">installing from source</a>.</p>\n<p>Note that this is a third party installer not controlled by the rclone developers so it may be out of date. Its current version is as below.</p>\n<p><a href=\"https://repology.org/project/rclone/versions\"><img src=\"https://repology.org/badge/version-for-repo/homebrew/rclone.svg\" alt=\"Homebrew package\" /></a></p>\n<h3 id=\"macos-macports\">Installation with MacPorts</h3>\n<p>On macOS, rclone can also be installed via <a href=\"https://www.macports.org\">MacPorts</a>:</p>\n<pre><code>sudo port install rclone</code></pre>\n<p>Note that this is a third party installer not controlled by the rclone developers so it may be out of date. Its current version is as below.</p>\n<p><a href=\"https://repology.org/project/rclone/versions\"><img src=\"https://repology.org/badge/version-for-repo/macports/rclone.svg\" alt=\"MacPorts port\" /></a></p>\n<p>More information <a href=\"https://ports.macports.org/port/rclone/\">here</a>.</p>\n<h3 id=\"macos-precompiled\">Precompiled binary, using curl</h3>\n<p>To avoid problems with macOS gatekeeper enforcing the binary to be signed and notarized it is enough to download with <code>curl</code>.</p>\n<p>Download the latest version of rclone.</p>\n<pre><code>cd &amp;&amp; curl -O https://downloads.rclone.org/rclone-current-osx-amd64.zip</code></pre>\n<p>Unzip the download and cd to the extracted folder.</p>\n<pre><code>unzip -a rclone-current-osx-amd64.zip &amp;&amp; cd rclone-*-osx-amd64</code></pre>\n<p>Move rclone to your $PATH. You will be prompted for your password.</p>\n<pre><code>sudo mkdir -p /usr/local/bin\nsudo mv rclone /usr/local/bin/</code></pre>\n<p>(the <code>mkdir</code> command is safe to run, even if the directory already exists).</p>\n<p>Remove the leftover files.</p>\n<pre><code>cd .. &amp;&amp; rm -rf rclone-*-osx-amd64 rclone-current-osx-amd64.zip</code></pre>\n<p>Run <code>rclone config</code> to setup. See <a href=\"https://rclone.org/docs/\">rclone config docs</a> for more details.</p>\n<pre><code>rclone config</code></pre>\n<h3 id=\"macos-precompiled-web\">Precompiled binary, using a web browser</h3>\n<p>When downloading a binary with a web browser, the browser will set the macOS gatekeeper quarantine attribute. Starting from Catalina, when attempting to run <code>rclone</code>, a pop-up will appear saying:</p>\n<pre><code>&quot;rclone&quot; cannot be opened because the developer cannot be verified.\nmacOS cannot verify that this app is free from malware.</code></pre>\n<p>The simplest fix is to run</p>\n<pre><code>xattr -d com.apple.quarantine rclone</code></pre>\n<h2 id=\"windows\">Windows installation</h2>\n<h3 id=\"windows-precompiled\">Precompiled binary</h3>\n<p>Fetch the correct binary for your processor type by clicking on these links. If not sure, use the first link.</p>\n<ul>\n<li><a href=\"https://downloads.rclone.org/rclone-current-windows-amd64.zip\">Intel/AMD - 64 Bit</a></li>\n<li><a href=\"https://downloads.rclone.org/rclone-current-windows-386.zip\">Intel/AMD - 32 Bit</a></li>\n<li><a href=\"https://downloads.rclone.org/rclone-current-windows-arm64.zip\">ARM - 64 Bit</a></li>\n</ul>\n<p>Open this file in the Explorer and extract <code>rclone.exe</code>. Rclone is a portable executable so you can place it wherever is convenient.</p>\n<p>Open a CMD window (or powershell) and run the binary. Note that rclone does not launch a GUI by default, it runs in the CMD Window.</p>\n<ul>\n<li>Run <code>rclone.exe config</code> to setup. See <a href=\"https://rclone.org/docs/\">rclone config docs</a> for more details.</li>\n<li>Optionally configure <a href=\"#autostart\">automatic execution</a>.</li>\n</ul>\n<p>If you are planning to use the <a href=\"https://rclone.org/commands/rclone_mount/\">rclone mount</a> feature then you will need to install the third party utility <a href=\"https://winfsp.dev/\">WinFsp</a> also.</p>\n<h3 id=\"windows-chocolatey\">Windows package manager (Winget)</h3>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/package-manager/\">Winget</a> comes pre-installed with the latest versions of Windows. If not, update the <a href=\"https://www.microsoft.com/p/app-installer/9nblggh4nns1\">App Installer</a> package from the Microsoft store.</p>\n<p>To install rclone</p>\n<pre><code>winget install Rclone.Rclone</code></pre>\n<p>To uninstall rclone</p>\n<pre><code>winget uninstall Rclone.Rclone --force</code></pre>\n<h3 id=\"windows-chocolatey\">Chocolatey package manager</h3>\n<p>Make sure you have <a href=\"https://chocolatey.org/\">Choco</a> installed</p>\n<pre><code>choco search rclone\nchoco install rclone</code></pre>\n<p>This will install rclone on your Windows machine. If you are planning to use <a href=\"https://rclone.org/commands/rclone_mount/\">rclone mount</a> then</p>\n<pre><code>choco install winfsp</code></pre>\n<p>will install that too.</p>\n<p>Note that this is a third party installer not controlled by the rclone developers so it may be out of date. Its current version is as below.</p>\n<p><a href=\"https://repology.org/project/rclone/versions\"><img src=\"https://repology.org/badge/version-for-repo/chocolatey/rclone.svg\" alt=\"Chocolatey package\" /></a></p>\n<h3 id=\"windows-scoop\">Scoop package manager</h3>\n<p>Make sure you have <a href=\"https://scoop.sh/\">Scoop</a> installed</p>\n<pre><code>scoop install rclone</code></pre>\n<p>Note that this is a third party installer not controlled by the rclone developers so it may be out of date. Its current version is as below.</p>\n<p><a href=\"https://repology.org/project/rclone/versions\"><img src=\"https://repology.org/badge/version-for-repo/scoop/rclone.svg\" alt=\"Scoop package\" /></a></p>\n<h2 id=\"package-manager\">Package manager installation</h2>\n<p>Many Linux, Windows, macOS and other OS distributions package and distribute rclone.</p>\n<p>The distributed versions of rclone are often quite out of date and for this reason we recommend one of the other installation methods if possible.</p>\n<p>You can get an idea of how up to date or not your OS distribution's package is here.</p>\n<p><a href=\"https://repology.org/project/rclone/versions\"><img src=\"https://repology.org/badge/vertical-allrepos/rclone.svg?columns=3\" alt=\"Packaging status\" /></a></p>\n<h2 id=\"docker\">Docker installation</h2>\n<p>The rclone developers maintain a <a href=\"https://hub.docker.com/r/rclone/rclone\">docker image for rclone</a>.</p>\n<p>These images are built as part of the release process based on a minimal Alpine Linux.</p>\n<p>The <code>:latest</code> tag will always point to the latest stable release. You can use the <code>:beta</code> tag to get the latest build from master. You can also use version tags, e.g. <code>:1.49.1</code>, <code>:1.49</code> or <code>:1</code>.</p>\n<pre><code>$ docker pull rclone/rclone:latest\nlatest: Pulling from rclone/rclone\nDigest: sha256:0e0ced72671989bb837fea8e88578b3fc48371aa45d209663683e24cfdaa0e11\n...\n$ docker run --rm rclone/rclone:latest version\nrclone v1.49.1\n- os/arch: linux/amd64\n- go version: go1.12.9</code></pre>\n<p>There are a few command line options to consider when starting an rclone Docker container from the rclone image.</p>\n<ul>\n<li><p>You need to mount the host rclone config dir at <code>/config/rclone</code> into the Docker container. Due to the fact that rclone updates tokens inside its config file, and that the update process involves a file rename, you need to mount the whole host rclone config dir, not just the single host rclone config file.</p></li>\n<li><p>You need to mount a host data dir at <code>/data</code> into the Docker container.</p></li>\n<li><p>By default, the rclone binary inside a Docker container runs with UID=0 (root). As a result, all files created in a run will have UID=0. If your config and data files reside on the host with a non-root UID:GID, you need to pass these on the container start command line.</p></li>\n<li><p>If you want to access the RC interface (either via the API or the Web UI), it is required to set the <code>--rc-addr</code> to <code>:5572</code> in order to connect to it from outside the container. An explanation about why this is necessary is present <a href=\"https://web.archive.org/web/20200808071950/https://pythonspeed.com/articles/docker-connection-refused/\">here</a>.</p>\n<ul>\n<li>NOTE: Users running this container with the docker network set to <code>host</code> should probably set it to listen to localhost only, with <code>127.0.0.1:5572</code> as the value for <code>--rc-addr</code></li>\n</ul></li>\n<li><p>It is possible to use <code>rclone mount</code> inside a userspace Docker container, and expose the resulting fuse mount to the host. The exact <code>docker run</code> options to do that might vary slightly between hosts. See, e.g. the discussion in this <a href=\"https://github.com/moby/moby/issues/9448\">thread</a>.</p>\n<p>You also need to mount the host <code>/etc/passwd</code> and <code>/etc/group</code> for fuse to work inside the container.</p></li>\n</ul>\n<p>Here are some commands tested on an Ubuntu 18.04.3 host:</p>\n<pre><code># config on host at ~/.config/rclone/rclone.conf\n# data on host at ~/data\n\n# add a remote interactively\ndocker run --rm -it \\\n    --volume ~/.config/rclone:/config/rclone \\\n    --user $(id -u):$(id -g) \\\n    rclone/rclone \\\n    config\n\n# make sure the config is ok by listing the remotes\ndocker run --rm \\\n    --volume ~/.config/rclone:/config/rclone \\\n    --user $(id -u):$(id -g) \\\n    rclone/rclone \\\n    listremotes\n\n# perform mount inside Docker container, expose result to host\nmkdir -p ~/data/mount\ndocker run --rm \\\n    --volume ~/.config/rclone:/config/rclone \\\n    --volume ~/data:/data:shared \\\n    --user $(id -u):$(id -g) \\\n    --volume /etc/passwd:/etc/passwd:ro --volume /etc/group:/etc/group:ro \\\n    --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined \\\n    rclone/rclone \\\n    mount dropbox:Photos /data/mount &amp;\nls ~/data/mount\nkill %1</code></pre>\n<h2 id=\"snap\">Snap installation</h2>\n<p><a href=\"https://snapcraft.io/rclone\"><img src=\"https://snapcraft.io/static/images/badges/en/snap-store-black.svg\" alt=\"Get it from the Snap Store\" /></a></p>\n<p>Make sure you have <a href=\"https://snapcraft.io/docs/installing-snapd\">Snapd installed</a></p>\n<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb23-1\"><a href=\"#cb23-1\" aria-hidden=\"true\"></a>$ <span class=\"fu\">sudo</span> snap install rclone</span></code></pre></div>\n<p>Due to the strict confinement of Snap, rclone snap cannot access real /home/$USER/.config/rclone directory, default config path is as below.</p>\n<ul>\n<li>Default config directory:\n<ul>\n<li>/home/$USER/snap/rclone/current/.config/rclone</li>\n</ul></li>\n</ul>\n<p>Note: Due to the strict confinement of Snap, <code>rclone mount</code> feature is <code>not</code> supported.</p>\n<p>If mounting is wanted, either install a precompiled binary or enable the relevant option when <a href=\"#source\">installing from source</a>.</p>\n<p>Note that this is controlled by <a href=\"https://github.com/boukendesho/rclone-snap\">community maintainer</a> not the rclone developers so it may be out of date. Its current version is as below.</p>\n<p><a href=\"https://snapcraft.io/rclone\"><img src=\"https://snapcraft.io/rclone/badge.svg\" alt=\"rclone\" /></a></p>\n<h2 id=\"source\">Source installation</h2>\n<p>Make sure you have git and <a href=\"https://golang.org/\">Go</a> installed. Go version 1.18 or newer is required, the latest release is recommended. You can get it from your package manager, or download it from <a href=\"https://golang.org/dl/\">golang.org/dl</a>. Then you can run the following:</p>\n<pre><code>git clone https://github.com/rclone/rclone.git\ncd rclone\ngo build</code></pre>\n<p>This will check out the rclone source in subfolder rclone, which you can later modify and send pull requests with. Then it will build the rclone executable in the same folder. As an initial check you can now run <code>./rclone version</code> (<code>.\\rclone version</code> on Windows).</p>\n<p>Note that on macOS and Windows the <a href=\"https://rclone.org/commands/rclone_mount/\">mount</a> command will not be available unless you specify an additional build tag <code>cmount</code>.</p>\n<pre><code>go build -tags cmount</code></pre>\n<p>This assumes you have a GCC compatible C compiler (GCC or Clang) in your PATH, as it uses <a href=\"https://pkg.go.dev/cmd/cgo\">cgo</a>. But on Windows, the <a href=\"https://github.com/winfsp/cgofuse\">cgofuse</a> library that the cmount implementation is based on, also supports building <a href=\"https://github.com/golang/go/wiki/WindowsDLLs\">without cgo</a>, i.e. by setting environment variable CGO_ENABLED to value 0 (static linking). This is how the official Windows release of rclone is being built, starting with version 1.59. It is still possible to build with cgo on Windows as well, by using the MinGW port of GCC, e.g. by installing it in a <a href=\"https://www.msys2.org\">MSYS2</a> distribution (make sure you install it in the classic mingw64 subsystem, the ucrt64 version is not compatible).</p>\n<p>Additionally, to build with mount on Windows, you must install the third party utility <a href=\"https://winfsp.dev/\">WinFsp</a>, with the \"Developer\" feature selected. If building with cgo, you must also set environment variable CPATH pointing to the fuse include directory within the WinFsp installation (normally <code>C:\\Program Files (x86)\\WinFsp\\inc\\fuse</code>).</p>\n<p>You may add arguments <code>-ldflags -s</code> to omit symbol table and debug information, making the executable file smaller, and <code>-trimpath</code> to remove references to local file system paths. The official rclone releases are built with both of these.</p>\n<pre><code>go build -trimpath -ldflags -s -tags cmount</code></pre>\n<p>If you want to customize the version string, as reported by the <code>rclone version</code> command, you can set one of the variables <code>fs.Version</code>, <code>fs.VersionTag</code> (to keep default suffix but customize the number), or <code>fs.VersionSuffix</code> (to keep default number but customize the suffix). This can be done from the build command, by adding to the <code>-ldflags</code> argument value as shown below.</p>\n<pre><code>go build -trimpath -ldflags &quot;-s -X github.com/rclone/rclone/fs.Version=v9.9.9-test&quot; -tags cmount</code></pre>\n<p>On Windows, the official executables also have the version information, as well as a file icon, embedded as binary resources. To get that with your own build you need to run the following command <strong>before</strong> the build command. It generates a Windows resource system object file, with extension .syso, e.g. <code>resource_windows_amd64.syso</code>, that will be automatically picked up by future build commands.</p>\n<pre><code>go run bin/resource_windows.go</code></pre>\n<p>The above command will generate a resource file containing version information based on the fs.Version variable in source at the time you run the command, which means if the value of this variable changes you need to re-run the command for it to be reflected in the version information. Also, if you override this version variable in the build command as described above, you need to do that also when generating the resource file, or else it will still use the value from the source.</p>\n<pre><code>go run bin/resource_windows.go -version v9.9.9-test</code></pre>\n<p>Instead of executing the <code>go build</code> command directly, you can run it via the Makefile. The default target changes the version suffix from \"-DEV\" to \"-beta\" followed by additional commit details, embeds version information binary resources on Windows, and copies the resulting rclone executable into your GOPATH bin folder (<code>$(go env GOPATH)/bin</code>, which corresponds to <code>~/go/bin/rclone</code> by default).</p>\n<pre><code>make</code></pre>\n<p>To include mount command on macOS and Windows with Makefile build:</p>\n<pre><code>make GOTAGS=cmount</code></pre>\n<p>There are other make targets that can be used for more advanced builds, such as cross-compiling for all supported os/architectures, and packaging results into release artifacts. See <a href=\"https://github.com/rclone/rclone/blob/master/Makefile\">Makefile</a> and <a href=\"https://github.com/rclone/rclone/blob/master/bin/cross-compile.go\">cross-compile.go</a> for details.</p>\n<p>Another alternative method for source installation is to download the source, build and install rclone - all in one operation, as a regular Go package. The source will be stored it in the Go module cache, and the resulting executable will be in your GOPATH bin folder (<code>$(go env GOPATH)/bin</code>, which corresponds to <code>~/go/bin/rclone</code> by default).</p>\n<pre><code>go install github.com/rclone/rclone@latest</code></pre>\n<p>In some situations, rclone executable size might be too big for deployment in very restricted environments when all backends with large SDKs are included. To limit binary size unused backends can be commented out in <code>backends/all/all.go</code> and unused commands in <code>cmd/all/all.go</code> before building with <code>go build</code> or <code>make</code></p>\n<h2 id=\"ansible\">Ansible installation</h2>\n<p>This can be done with <a href=\"https://github.com/stefangweichinger/ansible-rclone\">Stefan Weichinger's ansible role</a>.</p>\n<p>Instructions</p>\n<ol type=\"1\">\n<li><code>git clone https://github.com/stefangweichinger/ansible-rclone.git</code> into your local roles-directory</li>\n<li>add the role to the hosts you want rclone installed to:</li>\n</ol>\n<pre><code>    - hosts: rclone-hosts\n      roles:\n          - rclone</code></pre>\n<h2 id=\"portable\">Portable installation</h2>\n<p>As mentioned <a href=\"https://rclone.org/install/#quickstart\">above</a>, rclone is single executable (<code>rclone</code>, or <code>rclone.exe</code> on Windows) that you can download as a zip archive and extract into a location of your choosing. When executing different commands, it may create files in different locations, such as a configuration file and various temporary files. By default the locations for these are according to your operating system, e.g. configuration file in your user profile directory and temporary files in the standard temporary directory, but you can customize all of them, e.g. to make a completely self-contained, portable installation.</p>\n<p>Run the <a href=\"https://rclone.org/commands/rclone_config_paths/\">config paths</a> command to see the locations that rclone will use.</p>\n<p>To override them set the corresponding options (as command-line arguments, or as <a href=\"https://rclone.org/docs/#environment-variables\">environment variables</a>): - <a href=\"https://rclone.org/docs/#config-config-file\">--config</a> - <a href=\"https://rclone.org/docs/#cache-dir-dir\">--cache-dir</a> - <a href=\"https://rclone.org/docs/#temp-dir-dir\">--temp-dir</a></p>\n<h2 id=\"autostart\">Autostart</h2>\n<p>After installing and configuring rclone, as described above, you are ready to use rclone as an interactive command line utility. If your goal is to perform <em>periodic</em> operations, such as a regular <a href=\"https://rclone.org/commands/rclone_sync/\">sync</a>, you will probably want to configure your rclone command in your operating system's scheduler. If you need to expose <em>service</em>-like features, such as <a href=\"https://rclone.org/rc/\">remote control</a>, <a href=\"https://rclone.org/gui/\">GUI</a>, <a href=\"https://rclone.org/commands/rclone_serve/\">serve</a> or <a href=\"https://rclone.org/commands/rclone_mount/\">mount</a>, you will often want an rclone command always running in the background, and configuring it to run in a service infrastructure may be a better option. Below are some alternatives on how to achieve this on different operating systems.</p>\n<p>NOTE: Before setting up autorun it is highly recommended that you have tested your command manually from a Command Prompt first.</p>\n<h3 id=\"autostart-on-windows\">Autostart on Windows</h3>\n<p>The most relevant alternatives for autostart on Windows are: - Run at user log on using the Startup folder - Run at user log on, at system startup or at schedule using Task Scheduler - Run at system startup using Windows service</p>\n<h4 id=\"running-in-background\">Running in background</h4>\n<p>Rclone is a console application, so if not starting from an existing Command Prompt, e.g. when starting rclone.exe from a shortcut, it will open a Command Prompt window. When configuring rclone to run from task scheduler and windows service you are able to set it to run hidden in background. From rclone version 1.54 you can also make it run hidden from anywhere by adding option <code>--no-console</code> (it may still flash briefly when the program starts). Since rclone normally writes information and any error messages to the console, you must redirect this to a file to be able to see it. Rclone has a built-in option <code>--log-file</code> for that.</p>\n<p>Example command to run a sync in background:</p>\n<pre><code>c:\\rclone\\rclone.exe sync c:\\files remote:/files --no-console --log-file c:\\rclone\\logs\\sync_files.txt</code></pre>\n<h4 id=\"user-account\">User account</h4>\n<p>As mentioned in the <a href=\"https://rclone.org/commands/rclone_mount/\">mount</a> documentation, mounted drives created as Administrator are not visible to other accounts, not even the account that was elevated as Administrator. By running the mount command as the built-in <code>SYSTEM</code> user account, it will create drives accessible for everyone on the system. Both scheduled task and Windows service can be used to achieve this.</p>\n<p>NOTE: Remember that when rclone runs as the <code>SYSTEM</code> user, the user profile that it sees will not be yours. This means that if you normally run rclone with configuration file in the default location, to be able to use the same configuration when running as the system user you must explicitly tell rclone where to find it with the <a href=\"https://rclone.org/docs/#config-config-file\"><code>--config</code></a> option, or else it will look in the system users profile path (<code>C:\\Windows\\System32\\config\\systemprofile</code>). To test your command manually from a Command Prompt, you can run it with the <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/psexec\">PsExec</a> utility from Microsoft's Sysinternals suite, which takes option <code>-s</code> to execute commands as the <code>SYSTEM</code> user.</p>\n<h4 id=\"start-from-startup-folder\">Start from Startup folder</h4>\n<p>To quickly execute an rclone command you can simply create a standard Windows Explorer shortcut for the complete rclone command you want to run. If you store this shortcut in the special \"Startup\" start-menu folder, Windows will automatically run it at login. To open this folder in Windows Explorer, enter path <code>%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>, or <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code> if you want the command to start for <em>every</em> user that logs in.</p>\n<p>This is the easiest approach to autostarting of rclone, but it offers no functionality to set it to run as different user, or to set conditions or actions on certain events. Setting up a scheduled task as described below will often give you better results.</p>\n<h4 id=\"start-from-task-scheduler\">Start from Task Scheduler</h4>\n<p>Task Scheduler is an administrative tool built into Windows, and it can be used to configure rclone to be started automatically in a highly configurable way, e.g. periodically on a schedule, on user log on, or at system startup. It can run be configured to run as the current user, or for a mount command that needs to be available to all users it can run as the <code>SYSTEM</code> user. For technical information, see https://docs.microsoft.com/windows/win32/taskschd/task-scheduler-start-page.</p>\n<h4 id=\"run-as-service\">Run as service</h4>\n<p>For running rclone at system startup, you can create a Windows service that executes your rclone command, as an alternative to scheduled task configured to run at startup.</p>\n<h5 id=\"mount-command-built-in-service-integration\">Mount command built-in service integration</h5>\n<p>For mount commands, rclone has a built-in Windows service integration via the third-party WinFsp library it uses. Registering as a regular Windows service easy, as you just have to execute the built-in PowerShell command <code>New-Service</code> (requires administrative privileges).</p>\n<p>Example of a PowerShell command that creates a Windows service for mounting some <code>remote:/files</code> as drive letter <code>X:</code>, for <em>all</em> users (service will be running as the local system account):</p>\n<pre><code>New-Service -Name Rclone -BinaryPathName &#39;c:\\rclone\\rclone.exe mount remote:/files X: --config c:\\rclone\\config\\rclone.conf --log-file c:\\rclone\\logs\\mount.txt&#39;</code></pre>\n<p>The <a href=\"https://github.com/billziss-gh/winfsp/wiki/WinFsp-Service-Architecture\">WinFsp service infrastructure</a> supports incorporating services for file system implementations, such as rclone, into its own launcher service, as kind of \"child services\". This has the additional advantage that it also implements a network provider that integrates into Windows standard methods for managing network drives. This is currently not officially supported by Rclone, but with WinFsp version 2019.3 B2 / v1.5B2 or later it should be possible through path rewriting as described <a href=\"https://github.com/rclone/rclone/issues/3340\">here</a>.</p>\n<h5 id=\"third-party-service-integration\">Third-party service integration</h5>\n<p>To Windows service running any rclone command, the excellent third-party utility <a href=\"http://nssm.cc\">NSSM</a>, the \"Non-Sucking Service Manager\", can be used. It includes some advanced features such as adjusting process priority, defining process environment variables, redirect to file anything written to stdout, and customized response to different exit codes, with a GUI to configure everything from (although it can also be used from command line ).</p>\n<p>There are also several other alternatives. To mention one more, <a href=\"https://github.com/winsw/winsw\">WinSW</a>, \"Windows Service Wrapper\", is worth checking out. It requires .NET Framework, but it is preinstalled on newer versions of Windows, and it also provides alternative standalone distributions which includes necessary runtime (.NET 5). WinSW is a command-line only utility, where you have to manually create an XML file with service configuration. This may be a drawback for some, but it can also be an advantage as it is easy to back up and reuse the configuration settings, without having go through manual steps in a GUI. One thing to note is that by default it does not restart the service on error, one have to explicit enable this in the configuration file (via the \"onfailure\" parameter).</p>\n<h3 id=\"autostart-on-linux\">Autostart on Linux</h3>\n<h4 id=\"start-as-a-service\">Start as a service</h4>\n<p>To always run rclone in background, relevant for mount commands etc, you can use systemd to set up rclone as a system or user service. Running as a system service ensures that it is run at startup even if the user it is running as has no active session. Running rclone as a user service ensures that it only starts after the configured user has logged into the system.</p>\n<h4 id=\"run-periodically-from-cron\">Run periodically from cron</h4>\n<p>To run a periodic command, such as a copy/sync, you can set up a cron job.</p>\n<h1 id=\"usage\">Usage</h1>\n<p>Rclone is a command line program to manage files on cloud storage. After <a href=\"https://rclone.org/downloads/\">download</a> and <a href=\"/install\">install</a>, continue here to learn how to use it: Initial <a href=\"#configure\">configuration</a>, what the <a href=\"#basic-syntax\">basic syntax</a> looks like, describes the various <a href=\"#subcommands\">subcommands</a>, the various <a href=\"#options\">options</a>, and more.</p>\n<h2 id=\"configure\">Configure</h2>\n<p>First, you'll need to configure rclone. As the object storage systems have quite complicated authentication these are kept in a config file. (See the <a href=\"#config-config-file\"><code>--config</code></a> entry for how to find the config file and choose its location.)</p>\n<p>The easiest way to make the config is to run rclone with the config option:</p>\n<pre><code>rclone config</code></pre>\n<p>See the following for detailed instructions for</p>\n<ul>\n<li><a href=\"https://rclone.org/fichier/\">1Fichier</a></li>\n<li><a href=\"https://rclone.org/netstorage/\">Akamai Netstorage</a></li>\n<li><a href=\"https://rclone.org/alias/\">Alias</a></li>\n<li><a href=\"https://rclone.org/s3/\">Amazon S3</a></li>\n<li><a href=\"https://rclone.org/b2/\">Backblaze B2</a></li>\n<li><a href=\"https://rclone.org/box/\">Box</a></li>\n<li><a href=\"https://rclone.org/chunker/\">Chunker</a> - transparently splits large files for other remotes</li>\n<li><a href=\"https://rclone.org/sharefile/\">Citrix ShareFile</a></li>\n<li><a href=\"https://rclone.org/compress/\">Compress</a></li>\n<li><a href=\"https://rclone.org/combine/\">Combine</a></li>\n<li><a href=\"https://rclone.org/crypt/\">Crypt</a> - to encrypt other remotes</li>\n<li><a href=\"https://rclone.org/s3/#digitalocean-spaces\">DigitalOcean Spaces</a></li>\n<li><a href=\"https://rclone.org/koofr/#digi-storage\">Digi Storage</a></li>\n<li><a href=\"https://rclone.org/dropbox/\">Dropbox</a></li>\n<li><a href=\"https://rclone.org/filefabric/\">Enterprise File Fabric</a></li>\n<li><a href=\"https://rclone.org/filescom/\">Files.com</a></li>\n<li><a href=\"https://rclone.org/ftp/\">FTP</a></li>\n<li><a href=\"https://rclone.org/gofile/\">Gofile</a></li>\n<li><a href=\"https://rclone.org/googlecloudstorage/\">Google Cloud Storage</a></li>\n<li><a href=\"https://rclone.org/drive/\">Google Drive</a></li>\n<li><a href=\"https://rclone.org/googlephotos/\">Google Photos</a></li>\n<li><a href=\"https://rclone.org/hasher/\">Hasher</a> - to handle checksums for other remotes</li>\n<li><a href=\"https://rclone.org/hdfs/\">HDFS</a></li>\n<li><a href=\"https://rclone.org/sftp/#hetzner-storage-box\">Hetzner Storage Box</a></li>\n<li><a href=\"https://rclone.org/hidrive/\">HiDrive</a></li>\n<li><a href=\"https://rclone.org/http/\">HTTP</a></li>\n<li><a href=\"https://rclone.org/internetarchive/\">Internet Archive</a></li>\n<li><a href=\"https://rclone.org/jottacloud/\">Jottacloud</a></li>\n<li><a href=\"https://rclone.org/koofr/\">Koofr</a></li>\n<li><a href=\"https://rclone.org/linkbox/\">Linkbox</a></li>\n<li><a href=\"https://rclone.org/mailru/\">Mail.ru Cloud</a></li>\n<li><a href=\"https://rclone.org/mega/\">Mega</a></li>\n<li><a href=\"https://rclone.org/memory/\">Memory</a></li>\n<li><a href=\"https://rclone.org/azureblob/\">Microsoft Azure Blob Storage</a></li>\n<li><a href=\"https://rclone.org/azurefiles/\">Microsoft Azure Files Storage</a></li>\n<li><a href=\"https://rclone.org/onedrive/\">Microsoft OneDrive</a></li>\n<li><a href=\"https://rclone.org/swift/\">OpenStack Swift / Rackspace Cloudfiles / Blomp Cloud Storage / Memset Memstore</a></li>\n<li><a href=\"https://rclone.org/opendrive/\">OpenDrive</a></li>\n<li><a href=\"https://rclone.org/oracleobjectstorage/\">Oracle Object Storage</a></li>\n<li><a href=\"https://rclone.org/pcloud/\">Pcloud</a></li>\n<li><a href=\"https://rclone.org/pikpak/\">PikPak</a></li>\n<li><a href=\"https://rclone.org/pixeldrain/\">Pixeldrain</a></li>\n<li><a href=\"https://rclone.org/premiumizeme/\">premiumize.me</a></li>\n<li><a href=\"https://rclone.org/putio/\">put.io</a></li>\n<li><a href=\"https://rclone.org/protondrive/\">Proton Drive</a></li>\n<li><a href=\"https://rclone.org/qingstor/\">QingStor</a></li>\n<li><a href=\"https://rclone.org/quatrix/\">Quatrix by Maytech</a></li>\n<li><a href=\"https://rclone.org/sftp/#rsync-net\">rsync.net</a></li>\n<li><a href=\"https://rclone.org/seafile/\">Seafile</a></li>\n<li><a href=\"https://rclone.org/sftp/\">SFTP</a></li>\n<li><a href=\"https://rclone.org/sia/\">Sia</a></li>\n<li><a href=\"https://rclone.org/smb/\">SMB</a></li>\n<li><a href=\"https://rclone.org/storj/\">Storj</a></li>\n<li><a href=\"https://rclone.org/sugarsync/\">SugarSync</a></li>\n<li><a href=\"https://rclone.org/union/\">Union</a></li>\n<li><a href=\"https://rclone.org/ulozto/\">Uloz.to</a></li>\n<li><a href=\"https://rclone.org/uptobox/\">Uptobox</a></li>\n<li><a href=\"https://rclone.org/webdav/\">WebDAV</a></li>\n<li><a href=\"https://rclone.org/yandex/\">Yandex Disk</a></li>\n<li><a href=\"https://rclone.org/zoho/\">Zoho WorkDrive</a></li>\n<li><a href=\"https://rclone.org/local/\">The local filesystem</a></li>\n</ul>\n<h2 id=\"basic-syntax\">Basic syntax</h2>\n<p>Rclone syncs a directory tree from one storage system to another.</p>\n<p>Its syntax is like this</p>\n<pre><code>rclone subcommand [options] &lt;parameters&gt; &lt;parameters...&gt;</code></pre>\n<p>A <code>subcommand</code> is a the rclone operation required, (e.g. <code>sync</code>, <code>copy</code>, <code>ls</code>).</p>\n<p>An <code>option</code> is a single letter flag (e.g. <code>-v</code>) or a group of single letter flags (e.g. <code>-Pv</code>) or a long flag (e.g. <code>--progress</code>). No options are required. Options can come after the <code>subcommand</code> or in between parameters too or on the end, but only global options can be used before the <code>subcommand</code>. Anything after a <code>--</code> option will not be interpreted as an option so if you need to add a parameter which starts with a <code>-</code> then put a <code>--</code> on its own first, eg</p>\n<pre><code>rclone lsf -- -directory-starting-with-dash</code></pre>\n<p>A <code>parameter</code> is usually a file path or <a href=\"#syntax-of-remote-paths\">rclone remote</a>, eg <code>/path/to/file</code> or <code>remote:path/to/file</code> but it can be other things - the <code>subcommand</code> help will tell you what.</p>\n<p>Source and destination paths are specified by the name you gave the storage system in the config file then the sub path, e.g. \"drive:myfolder\" to look at \"myfolder\" in Google drive.</p>\n<p>You can define as many storage paths as you like in the config file.</p>\n<p>Please use the <a href=\"#interactive\"><code>--interactive</code>/<code>-i</code></a> flag while learning rclone to avoid accidental data loss.</p>\n<h2 id=\"subcommands\">Subcommands</h2>\n<p>rclone uses a system of subcommands. For example</p>\n<pre><code>rclone ls remote:path # lists a remote\nrclone copy /local/path remote:path # copies /local/path to the remote\nrclone sync --interactive /local/path remote:path # syncs /local/path to the remote</code></pre>\n<h1 id=\"rclone-config\">rclone config</h1>\n<p>Enter an interactive configuration session.</p>\n<h2 id=\"synopsis\">Synopsis</h2>\n<p>Enter an interactive configuration session where you can setup new remotes and manage existing ones. You may also set or remove a password to protect your configuration.</p>\n<pre><code>rclone config [flags]</code></pre>\n<h2 id=\"options\">Options</h2>\n<pre><code>  -h, --help   help for config</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_create/\">rclone config create</a> - Create a new remote with name, type and options.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_delete/\">rclone config delete</a> - Delete an existing remote.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_disconnect/\">rclone config disconnect</a> - Disconnects user from remote</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_dump/\">rclone config dump</a> - Dump the config file as JSON.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_edit/\">rclone config edit</a> - Enter an interactive configuration session.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_encryption/\">rclone config encryption</a> - set, remove and check the encryption for the config file</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_file/\">rclone config file</a> - Show path of configuration file in use.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_password/\">rclone config password</a> - Update password in an existing remote.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_paths/\">rclone config paths</a> - Show paths used for configuration, cache, temp etc.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_providers/\">rclone config providers</a> - List in JSON format all the providers and options.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_reconnect/\">rclone config reconnect</a> - Re-authenticates user with remote.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_redacted/\">rclone config redacted</a> - Print redacted (decrypted) config file, or the redacted config for a single remote.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_show/\">rclone config show</a> - Print (decrypted) config file, or the config for a single remote.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_touch/\">rclone config touch</a> - Ensure configuration file exists.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_update/\">rclone config update</a> - Update options in an existing remote.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_userinfo/\">rclone config userinfo</a> - Prints info about logged in user of remote.</li>\n</ul>\n<h1 id=\"rclone-copy\">rclone copy</h1>\n<p>Copy files from source to dest, skipping identical files.</p>\n<h2 id=\"synopsis-1\">Synopsis</h2>\n<p>Copy the source to the destination. Does not transfer files that are identical on source and destination, testing by size and modification time or MD5SUM. Doesn't delete files from the destination. If you want to also delete files from destination, to make it match source, use the <a href=\"https://rclone.org/commands/rclone_sync/\">sync</a> command instead.</p>\n<p>Note that it is always the contents of the directory that is synced, not the directory itself. So when source:path is a directory, it's the contents of source:path that are copied, not the directory name and contents.</p>\n<p>To copy single files, use the <a href=\"https://rclone.org/commands/rclone_copyto/\">copyto</a> command instead.</p>\n<p>If dest:path doesn't exist, it is created and the source:path contents go there.</p>\n<p>For example</p>\n<pre><code>rclone copy source:sourcepath dest:destpath</code></pre>\n<p>Let's say there are two files in sourcepath</p>\n<pre><code>sourcepath/one.txt\nsourcepath/two.txt</code></pre>\n<p>This copies them to</p>\n<pre><code>destpath/one.txt\ndestpath/two.txt</code></pre>\n<p>Not to</p>\n<pre><code>destpath/sourcepath/one.txt\ndestpath/sourcepath/two.txt</code></pre>\n<p>If you are familiar with <code>rsync</code>, rclone always works as if you had written a trailing <code>/</code> - meaning \"copy the contents of this directory\". This applies to all commands and whether you are talking about the source or destination.</p>\n<p>See the <a href=\"https://rclone.org/docs/#no-traverse\">--no-traverse</a> option for controlling whether rclone lists the destination directory or not. Supplying this option when copying a small number of files into a large destination can speed transfers up greatly.</p>\n<p>For example, if you have many files in /path/to/src but only a few of them change every day, you can copy all the files which have changed recently very efficiently like this:</p>\n<pre><code>rclone copy --max-age 24h --no-traverse /path/to/src remote:</code></pre>\n<p>Rclone will sync the modification times of files and directories if the backend supports it. If metadata syncing is required then use the <code>--metadata</code> flag.</p>\n<p>Note that the modification time and metadata for the root directory will <strong>not</strong> be synced. See https://github.com/rclone/rclone/issues/7652 for more info.</p>\n<p><strong>Note</strong>: Use the <code>-P</code>/<code>--progress</code> flag to view real-time transfer statistics.</p>\n<p><strong>Note</strong>: Use the <code>--dry-run</code> or the <code>--interactive</code>/<code>-i</code> flag to test without copying anything.</p>\n<pre><code>rclone copy source:path dest:path [flags]</code></pre>\n<h2 id=\"options-1\">Options</h2>\n<pre><code>      --create-empty-src-dirs   Create empty source dirs on destination after copy\n  -h, --help                    help for copy</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"copy-options\">Copy Options</h3>\n<p>Flags for anything which can copy a file</p>\n<pre><code>      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size &amp; checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don&#39;t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don&#39;t check the destination, copy regardless\n      --no-traverse                                 Don&#39;t traverse destination file system on copy\n      --no-update-dir-modtime                       Don&#39;t update directory modification times\n      --no-update-modtime                           Don&#39;t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. &#39;size,descending&#39;\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default &quot;.partial&quot;)\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination</code></pre>\n<h3 id=\"important-options\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h3 id=\"filter-options\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-1\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-sync\">rclone sync</h1>\n<p>Make source and dest identical, modifying destination only.</p>\n<h2 id=\"synopsis-2\">Synopsis</h2>\n<p>Sync the source to the destination, changing the destination only. Doesn't transfer files that are identical on source and destination, testing by size and modification time or MD5SUM. Destination is updated to match source, including deleting files if necessary (except duplicate objects, see below). If you don't want to delete files from destination, use the <a href=\"https://rclone.org/commands/rclone_copy/\">copy</a> command instead.</p>\n<p><strong>Important</strong>: Since this can cause data loss, test first with the <code>--dry-run</code> or the <code>--interactive</code>/<code>-i</code> flag.</p>\n<pre><code>rclone sync --interactive SOURCE remote:DESTINATION</code></pre>\n<p>Note that files in the destination won't be deleted if there were any errors at any point. Duplicate objects (files with the same name, on those providers that support it) are also not yet handled.</p>\n<p>It is always the contents of the directory that is synced, not the directory itself. So when source:path is a directory, it's the contents of source:path that are copied, not the directory name and contents. See extended explanation in the <a href=\"https://rclone.org/commands/rclone_copy/\">copy</a> command if unsure.</p>\n<p>If dest:path doesn't exist, it is created and the source:path contents go there.</p>\n<p>It is not possible to sync overlapping remotes. However, you may exclude the destination from the sync with a filter rule or by putting an exclude-if-present file inside the destination directory and sync to a destination that is inside the source directory.</p>\n<p>Rclone will sync the modification times of files and directories if the backend supports it. If metadata syncing is required then use the <code>--metadata</code> flag.</p>\n<p>Note that the modification time and metadata for the root directory will <strong>not</strong> be synced. See https://github.com/rclone/rclone/issues/7652 for more info.</p>\n<p><strong>Note</strong>: Use the <code>-P</code>/<code>--progress</code> flag to view real-time transfer statistics</p>\n<p><strong>Note</strong>: Use the <code>rclone dedupe</code> command to deal with \"Duplicate object/directory found in source/destination - ignoring\" errors. See <a href=\"https://forum.rclone.org/t/sync-not-clearing-duplicates/14372\">this forum post</a> for more info.</p>\n<h1 id=\"logger-flags\">Logger Flags</h1>\n<p>The <code>--differ</code>, <code>--missing-on-dst</code>, <code>--missing-on-src</code>, <code>--match</code> and <code>--error</code> flags write paths, one per line, to the file name (or stdout if it is <code>-</code>) supplied. What they write is described in the help below. For example <code>--differ</code> will write all paths which are present on both the source and destination but different.</p>\n<p>The <code>--combined</code> flag will write a file (or stdout) which contains all file paths with a symbol and then a space and then the path to tell you what happened to it. These are reminiscent of diff files.</p>\n<ul>\n<li><code>= path</code> means path was found in source and destination and was identical</li>\n<li>`- path` means path was missing on the source, so only in the destination</li>\n<li>`+ path` means path was missing on the destination, so only in the source</li>\n<li>`* path` means path was present in source and destination but different.</li>\n<li><code>! path</code> means there was an error reading or hashing the source or dest.</li>\n</ul>\n<p>The <code>--dest-after</code> flag writes a list file using the same format flags as <a href=\"https://rclone.org/commands/rclone_lsf/#synopsis\"><code>lsf</code></a> (including <a href=\"https://rclone.org/commands/rclone_lsf/#synopsis\">customizable options for hash, modtime, etc.</a>) Conceptually it is similar to rsync's <code>--itemize-changes</code>, but not identical -- it should output an accurate list of what will be on the destination after the sync.</p>\n<p>Note that these logger flags have a few limitations, and certain scenarios are not currently supported:</p>\n<ul>\n<li><code>--max-duration</code> / <code>CutoffModeHard</code></li>\n<li><code>--compare-dest</code> / <code>--copy-dest</code></li>\n<li>server-side moves of an entire dir at once</li>\n<li>High-level retries, because there would be duplicates (use <code>--retries 1</code> to disable)</li>\n<li>Possibly some unusual error scenarios</li>\n</ul>\n<p>Note also that each file is logged during the sync, as opposed to after, so it is most useful as a predictor of what SHOULD happen to each file (which may or may not match what actually DID.)</p>\n<pre><code>rclone sync source:path dest:path [flags]</code></pre>\n<h2 id=\"options-2\">Options</h2>\n<pre><code>      --absolute                Put a leading / in front of path names\n      --combined string         Make a combined report of changes to this file\n      --create-empty-src-dirs   Create empty source dirs on destination after sync\n      --csv                     Output in CSV format\n      --dest-after string       Report all files that exist on the dest post-sync\n      --differ string           Report all non-matching files to this file\n  -d, --dir-slash               Append a slash to directory names (default true)\n      --dirs-only               Only list directories\n      --error string            Report all files with errors (hashing or reading) to this file\n      --files-only              Only list files (default true)\n  -F, --format string           Output format - see lsf help for details (default &quot;p&quot;)\n      --hash h                  Use this hash when h is used in the format MD5|SHA-1|DropboxHash (default &quot;md5&quot;)\n  -h, --help                    help for sync\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n  -s, --separator string        Separator for the items in the format (default &quot;;&quot;)\n  -t, --timeformat string       Specify a custom time format, or &#39;max&#39; for max precision supported by remote (default: 2006-01-02 15:04:05)</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"copy-options-1\">Copy Options</h3>\n<p>Flags for anything which can copy a file</p>\n<pre><code>      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size &amp; checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don&#39;t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don&#39;t check the destination, copy regardless\n      --no-traverse                                 Don&#39;t traverse destination file system on copy\n      --no-update-dir-modtime                       Don&#39;t update directory modification times\n      --no-update-modtime                           Don&#39;t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. &#39;size,descending&#39;\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default &quot;.partial&quot;)\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination</code></pre>\n<h3 id=\"sync-options\">Sync Options</h3>\n<p>Flags used for sync commands</p>\n<pre><code>      --backup-dir string               Make backups into hierarchy based in DIR\n      --delete-after                    When synchronizing, delete files on destination after transferring (default)\n      --delete-before                   When synchronizing, delete files on destination before transferring\n      --delete-during                   When synchronizing, delete files during transfer\n      --fix-case                        Force rename of case insensitive dest to match source\n      --ignore-errors                   Delete even if there are I/O errors\n      --max-delete int                  When synchronizing, limit the number of deletes (default -1)\n      --max-delete-size SizeSuffix      When synchronizing, limit the total size of deletes (default off)\n      --suffix string                   Suffix to add to changed files\n      --suffix-keep-extension           Preserve the extension when using --suffix\n      --track-renames                   When synchronizing, track file renames and do a server-side move if possible\n      --track-renames-strategy string   Strategies to use when synchronizing using track-renames hash|modtime|leaf (default &quot;hash&quot;)</code></pre>\n<h3 id=\"important-options-1\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h3 id=\"filter-options-1\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-1\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-2\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-move\">rclone move</h1>\n<p>Move files from source to dest.</p>\n<h2 id=\"synopsis-3\">Synopsis</h2>\n<p>Moves the contents of the source directory to the destination directory. Rclone will error if the source and destination overlap and the remote does not support a server-side directory move operation.</p>\n<p>To move single files, use the <a href=\"https://rclone.org/commands/rclone_moveto/\">moveto</a> command instead.</p>\n<p>If no filters are in use and if possible this will server-side move <code>source:path</code> into <code>dest:path</code>. After this <code>source:path</code> will no longer exist.</p>\n<p>Otherwise for each file in <code>source:path</code> selected by the filters (if any) this will move it into <code>dest:path</code>. If possible a server-side move will be used, otherwise it will copy it (server-side if possible) into <code>dest:path</code> then delete the original (if no errors on copy) in <code>source:path</code>.</p>\n<p>If you want to delete empty source directories after move, use the <code>--delete-empty-src-dirs</code> flag.</p>\n<p>See the <a href=\"https://rclone.org/docs/#no-traverse\">--no-traverse</a> option for controlling whether rclone lists the destination directory or not. Supplying this option when moving a small number of files into a large destination can speed transfers up greatly.</p>\n<p>Rclone will sync the modification times of files and directories if the backend supports it. If metadata syncing is required then use the <code>--metadata</code> flag.</p>\n<p>Note that the modification time and metadata for the root directory will <strong>not</strong> be synced. See https://github.com/rclone/rclone/issues/7652 for more info.</p>\n<p><strong>Important</strong>: Since this can cause data loss, test first with the <code>--dry-run</code> or the <code>--interactive</code>/<code>-i</code> flag.</p>\n<p><strong>Note</strong>: Use the <code>-P</code>/<code>--progress</code> flag to view real-time transfer statistics.</p>\n<pre><code>rclone move source:path dest:path [flags]</code></pre>\n<h2 id=\"options-3\">Options</h2>\n<pre><code>      --create-empty-src-dirs   Create empty source dirs on destination after move\n      --delete-empty-src-dirs   Delete empty source dirs after move\n  -h, --help                    help for move</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"copy-options-2\">Copy Options</h3>\n<p>Flags for anything which can copy a file</p>\n<pre><code>      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size &amp; checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don&#39;t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don&#39;t check the destination, copy regardless\n      --no-traverse                                 Don&#39;t traverse destination file system on copy\n      --no-update-dir-modtime                       Don&#39;t update directory modification times\n      --no-update-modtime                           Don&#39;t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. &#39;size,descending&#39;\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default &quot;.partial&quot;)\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination</code></pre>\n<h3 id=\"important-options-2\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h3 id=\"filter-options-2\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-2\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-3\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-delete\">rclone delete</h1>\n<p>Remove the files in path.</p>\n<h2 id=\"synopsis-4\">Synopsis</h2>\n<p>Remove the files in path. Unlike <a href=\"https://rclone.org/commands/rclone_purge/\">purge</a> it obeys include/exclude filters so can be used to selectively delete files.</p>\n<p><code>rclone delete</code> only deletes files but leaves the directory structure alone. If you want to delete a directory and all of its contents use the <a href=\"https://rclone.org/commands/rclone_purge/\">purge</a> command.</p>\n<p>If you supply the <code>--rmdirs</code> flag, it will remove all empty directories along with it. You can also use the separate command <a href=\"https://rclone.org/commands/rclone_rmdir/\">rmdir</a> or <a href=\"https://rclone.org/commands/rclone_rmdirs/\">rmdirs</a> to delete empty directories only.</p>\n<p>For example, to delete all files bigger than 100 MiB, you may first want to check what would be deleted (use either):</p>\n<pre><code>rclone --min-size 100M lsl remote:path\nrclone --dry-run --min-size 100M delete remote:path</code></pre>\n<p>Then proceed with the actual delete:</p>\n<pre><code>rclone --min-size 100M delete remote:path</code></pre>\n<p>That reads \"delete everything with a minimum size of 100 MiB\", hence delete all files bigger than 100 MiB.</p>\n<p><strong>Important</strong>: Since this can cause data loss, test first with the <code>--dry-run</code> or the <code>--interactive</code>/<code>-i</code> flag.</p>\n<pre><code>rclone delete remote:path [flags]</code></pre>\n<h2 id=\"options-4\">Options</h2>\n<pre><code>  -h, --help     help for delete\n      --rmdirs   rmdirs removes empty directories but leaves root intact</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-3\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h3 id=\"filter-options-3\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-3\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-4\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-purge\">rclone purge</h1>\n<p>Remove the path and all of its contents.</p>\n<h2 id=\"synopsis-5\">Synopsis</h2>\n<p>Remove the path and all of its contents. Note that this does not obey include/exclude filters - everything will be removed. Use the <a href=\"https://rclone.org/commands/rclone_delete/\">delete</a> command if you want to selectively delete files. To delete empty directories only, use command <a href=\"https://rclone.org/commands/rclone_rmdir/\">rmdir</a> or <a href=\"https://rclone.org/commands/rclone_rmdirs/\">rmdirs</a>.</p>\n<p><strong>Important</strong>: Since this can cause data loss, test first with the <code>--dry-run</code> or the <code>--interactive</code>/<code>-i</code> flag.</p>\n<pre><code>rclone purge remote:path [flags]</code></pre>\n<h2 id=\"options-5\">Options</h2>\n<pre><code>  -h, --help   help for purge</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-4\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h2 id=\"see-also-5\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-mkdir\">rclone mkdir</h1>\n<p>Make the path if it doesn't already exist.</p>\n<pre><code>rclone mkdir remote:path [flags]</code></pre>\n<h2 id=\"options-6\">Options</h2>\n<pre><code>  -h, --help   help for mkdir</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-5\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h2 id=\"see-also-6\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-rmdir\">rclone rmdir</h1>\n<p>Remove the empty directory at path.</p>\n<h2 id=\"synopsis-6\">Synopsis</h2>\n<p>This removes empty directory given by path. Will not remove the path if it has any objects in it, not even empty subdirectories. Use command <a href=\"https://rclone.org/commands/rclone_rmdirs/\">rmdirs</a> (or <a href=\"https://rclone.org/commands/rclone_delete/\">delete</a> with option <code>--rmdirs</code>) to do that.</p>\n<p>To delete a path and any objects in it, use <a href=\"https://rclone.org/commands/rclone_purge/\">purge</a> command.</p>\n<pre><code>rclone rmdir remote:path [flags]</code></pre>\n<h2 id=\"options-7\">Options</h2>\n<pre><code>  -h, --help   help for rmdir</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-6\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h2 id=\"see-also-7\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-check\">rclone check</h1>\n<p>Checks the files in the source and destination match.</p>\n<h2 id=\"synopsis-7\">Synopsis</h2>\n<p>Checks the files in the source and destination match. It compares sizes and hashes (MD5 or SHA1) and logs a report of files that don't match. It doesn't alter the source or destination.</p>\n<p>For the <a href=\"https://rclone.org/crypt/\">crypt</a> remote there is a dedicated command, <a href=\"https://rclone.org/commands/rclone_cryptcheck/\">cryptcheck</a>, that are able to check the checksums of the encrypted files.</p>\n<p>If you supply the <code>--size-only</code> flag, it will only compare the sizes not the hashes as well. Use this for a quick check.</p>\n<p>If you supply the <code>--download</code> flag, it will download the data from both remotes and check them against each other on the fly. This can be useful for remotes that don't support hashes or if you really want to check all the data.</p>\n<p>If you supply the <code>--checkfile HASH</code> flag with a valid hash name, the <code>source:path</code> must point to a text file in the SUM format.</p>\n<p>If you supply the <code>--one-way</code> flag, it will only check that files in the source match the files in the destination, not the other way around. This means that extra files in the destination that are not in the source will not be detected.</p>\n<p>The <code>--differ</code>, <code>--missing-on-dst</code>, <code>--missing-on-src</code>, <code>--match</code> and <code>--error</code> flags write paths, one per line, to the file name (or stdout if it is <code>-</code>) supplied. What they write is described in the help below. For example <code>--differ</code> will write all paths which are present on both the source and destination but different.</p>\n<p>The <code>--combined</code> flag will write a file (or stdout) which contains all file paths with a symbol and then a space and then the path to tell you what happened to it. These are reminiscent of diff files.</p>\n<ul>\n<li><code>= path</code> means path was found in source and destination and was identical</li>\n<li>`- path` means path was missing on the source, so only in the destination</li>\n<li>`+ path` means path was missing on the destination, so only in the source</li>\n<li>`* path` means path was present in source and destination but different.</li>\n<li><code>! path</code> means there was an error reading or hashing the source or dest.</li>\n</ul>\n<p>The default number of parallel checks is 8. See the <a href=\"https://rclone.org/docs/#checkers-n\">--checkers=N</a> option for more information.</p>\n<pre><code>rclone check source:path dest:path [flags]</code></pre>\n<h2 id=\"options-8\">Options</h2>\n<pre><code>  -C, --checkfile string        Treat source:path as a SUM file with hashes of given type\n      --combined string         Make a combined report of changes to this file\n      --differ string           Report all non-matching files to this file\n      --download                Check by downloading rather than with hash\n      --error string            Report all files with errors (hashing or reading) to this file\n  -h, --help                    help for check\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n      --one-way                 Check one way only, source files must exist on remote</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"check-options\">Check Options</h3>\n<p>Flags used for check commands</p>\n<pre><code>      --max-backlog int   Maximum number of objects in sync or check backlog (default 10000)</code></pre>\n<h3 id=\"filter-options-4\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-4\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-8\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-ls\">rclone ls</h1>\n<p>List the objects in the path with size and path.</p>\n<h2 id=\"synopsis-8\">Synopsis</h2>\n<p>Lists the objects in the source path to standard output in a human readable format with size and path. Recurses by default.</p>\n<p>Eg</p>\n<pre><code>$ rclone ls swift:bucket\n    60295 bevajer5jef\n    90613 canole\n    94467 diwogej7\n    37600 fubuwic</code></pre>\n<p>Any of the filtering options can be applied to this command.</p>\n<p>There are several related list commands</p>\n<ul>\n<li><code>ls</code> to list size and path of objects only</li>\n<li><code>lsl</code> to list modification time, size and path of objects only</li>\n<li><code>lsd</code> to list directories only</li>\n<li><code>lsf</code> to list objects and directories in easy to parse format</li>\n<li><code>lsjson</code> to list objects and directories in JSON format</li>\n</ul>\n<p><code>ls</code>,<code>lsl</code>,<code>lsd</code> are designed to be human-readable. <code>lsf</code> is designed to be human and machine-readable. <code>lsjson</code> is designed to be machine-readable.</p>\n<p>Note that <code>ls</code> and <code>lsl</code> recurse by default - use <code>--max-depth 1</code> to stop the recursion.</p>\n<p>The other list commands <code>lsd</code>,<code>lsf</code>,<code>lsjson</code> do not recurse by default - use <code>-R</code> to make them recurse.</p>\n<p>Listing a nonexistent directory will produce an error except for remotes which can't have empty directories (e.g. s3, swift, or gcs - the bucket-based remotes).</p>\n<pre><code>rclone ls remote:path [flags]</code></pre>\n<h2 id=\"options-9\">Options</h2>\n<pre><code>  -h, --help   help for ls</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-5\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-5\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-9\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-lsd\">rclone lsd</h1>\n<p>List all directories/containers/buckets in the path.</p>\n<h2 id=\"synopsis-9\">Synopsis</h2>\n<p>Lists the directories in the source path to standard output. Does not recurse by default. Use the <code>-R</code> flag to recurse.</p>\n<p>This command lists the total size of the directory (if known, -1 if not), the modification time (if known, the current time if not), the number of objects in the directory (if known, -1 if not) and the name of the directory, Eg</p>\n<pre><code>$ rclone lsd swift:\n      494000 2018-04-26 08:43:20     10000 10000files\n          65 2018-04-26 08:43:20         1 1File</code></pre>\n<p>Or</p>\n<pre><code>$ rclone lsd drive:test\n          -1 2016-10-17 17:41:53        -1 1000files\n          -1 2017-01-03 14:40:54        -1 2500files\n          -1 2017-07-08 14:39:28        -1 4000files</code></pre>\n<p>If you just want the directory names use <code>rclone lsf --dirs-only</code>.</p>\n<p>Any of the filtering options can be applied to this command.</p>\n<p>There are several related list commands</p>\n<ul>\n<li><code>ls</code> to list size and path of objects only</li>\n<li><code>lsl</code> to list modification time, size and path of objects only</li>\n<li><code>lsd</code> to list directories only</li>\n<li><code>lsf</code> to list objects and directories in easy to parse format</li>\n<li><code>lsjson</code> to list objects and directories in JSON format</li>\n</ul>\n<p><code>ls</code>,<code>lsl</code>,<code>lsd</code> are designed to be human-readable. <code>lsf</code> is designed to be human and machine-readable. <code>lsjson</code> is designed to be machine-readable.</p>\n<p>Note that <code>ls</code> and <code>lsl</code> recurse by default - use <code>--max-depth 1</code> to stop the recursion.</p>\n<p>The other list commands <code>lsd</code>,<code>lsf</code>,<code>lsjson</code> do not recurse by default - use <code>-R</code> to make them recurse.</p>\n<p>Listing a nonexistent directory will produce an error except for remotes which can't have empty directories (e.g. s3, swift, or gcs - the bucket-based remotes).</p>\n<pre><code>rclone lsd remote:path [flags]</code></pre>\n<h2 id=\"options-10\">Options</h2>\n<pre><code>  -h, --help        help for lsd\n  -R, --recursive   Recurse into the listing</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-6\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-6\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-10\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-lsl\">rclone lsl</h1>\n<p>List the objects in path with modification time, size and path.</p>\n<h2 id=\"synopsis-10\">Synopsis</h2>\n<p>Lists the objects in the source path to standard output in a human readable format with modification time, size and path. Recurses by default.</p>\n<p>Eg</p>\n<pre><code>$ rclone lsl swift:bucket\n    60295 2016-06-25 18:55:41.062626927 bevajer5jef\n    90613 2016-06-25 18:55:43.302607074 canole\n    94467 2016-06-25 18:55:43.046609333 diwogej7\n    37600 2016-06-25 18:55:40.814629136 fubuwic</code></pre>\n<p>Any of the filtering options can be applied to this command.</p>\n<p>There are several related list commands</p>\n<ul>\n<li><code>ls</code> to list size and path of objects only</li>\n<li><code>lsl</code> to list modification time, size and path of objects only</li>\n<li><code>lsd</code> to list directories only</li>\n<li><code>lsf</code> to list objects and directories in easy to parse format</li>\n<li><code>lsjson</code> to list objects and directories in JSON format</li>\n</ul>\n<p><code>ls</code>,<code>lsl</code>,<code>lsd</code> are designed to be human-readable. <code>lsf</code> is designed to be human and machine-readable. <code>lsjson</code> is designed to be machine-readable.</p>\n<p>Note that <code>ls</code> and <code>lsl</code> recurse by default - use <code>--max-depth 1</code> to stop the recursion.</p>\n<p>The other list commands <code>lsd</code>,<code>lsf</code>,<code>lsjson</code> do not recurse by default - use <code>-R</code> to make them recurse.</p>\n<p>Listing a nonexistent directory will produce an error except for remotes which can't have empty directories (e.g. s3, swift, or gcs - the bucket-based remotes).</p>\n<pre><code>rclone lsl remote:path [flags]</code></pre>\n<h2 id=\"options-11\">Options</h2>\n<pre><code>  -h, --help   help for lsl</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-7\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-7\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-11\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-md5sum\">rclone md5sum</h1>\n<p>Produces an md5sum file for all the objects in the path.</p>\n<h2 id=\"synopsis-11\">Synopsis</h2>\n<p>Produces an md5sum file for all the objects in the path. This is in the same format as the standard md5sum tool produces.</p>\n<p>By default, the hash is requested from the remote. If MD5 is not supported by the remote, no hash will be returned. With the download flag, the file will be downloaded from the remote and hashed locally enabling MD5 for any remote.</p>\n<p>For other algorithms, see the <a href=\"https://rclone.org/commands/rclone_hashsum/\">hashsum</a> command. Running <code>rclone md5sum remote:path</code> is equivalent to running <code>rclone hashsum MD5 remote:path</code>.</p>\n<p>This command can also hash data received on standard input (stdin), by not passing a remote:path, or by passing a hyphen as remote:path when there is data to read (if not, the hyphen will be treated literally, as a relative path).</p>\n<pre><code>rclone md5sum remote:path [flags]</code></pre>\n<h2 id=\"options-12\">Options</h2>\n<pre><code>      --base64               Output base64 encoded hashsum\n  -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n      --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n  -h, --help                 help for md5sum\n      --output-file string   Output hashsums to a file rather than the terminal</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-8\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-8\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-12\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-sha1sum\">rclone sha1sum</h1>\n<p>Produces an sha1sum file for all the objects in the path.</p>\n<h2 id=\"synopsis-12\">Synopsis</h2>\n<p>Produces an sha1sum file for all the objects in the path. This is in the same format as the standard sha1sum tool produces.</p>\n<p>By default, the hash is requested from the remote. If SHA-1 is not supported by the remote, no hash will be returned. With the download flag, the file will be downloaded from the remote and hashed locally enabling SHA-1 for any remote.</p>\n<p>For other algorithms, see the <a href=\"https://rclone.org/commands/rclone_hashsum/\">hashsum</a> command. Running <code>rclone sha1sum remote:path</code> is equivalent to running <code>rclone hashsum SHA1 remote:path</code>.</p>\n<p>This command can also hash data received on standard input (stdin), by not passing a remote:path, or by passing a hyphen as remote:path when there is data to read (if not, the hyphen will be treated literally, as a relative path).</p>\n<p>This command can also hash data received on STDIN, if not passing a remote:path.</p>\n<pre><code>rclone sha1sum remote:path [flags]</code></pre>\n<h2 id=\"options-13\">Options</h2>\n<pre><code>      --base64               Output base64 encoded hashsum\n  -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n      --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n  -h, --help                 help for sha1sum\n      --output-file string   Output hashsums to a file rather than the terminal</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-9\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-9\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-13\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-size\">rclone size</h1>\n<p>Prints the total size and number of objects in remote:path.</p>\n<h2 id=\"synopsis-13\">Synopsis</h2>\n<p>Counts objects in the path and calculates the total size. Prints the result to standard output.</p>\n<p>By default the output is in human-readable format, but shows values in both human-readable format as well as the raw numbers (global option <code>--human-readable</code> is not considered). Use option <code>--json</code> to format output as JSON instead.</p>\n<p>Recurses by default, use <code>--max-depth 1</code> to stop the recursion.</p>\n<p>Some backends do not always provide file sizes, see for example <a href=\"https://rclone.org/googlephotos/#size\">Google Photos</a> and <a href=\"https://rclone.org/drive/#limitations-of-google-docs\">Google Docs</a>. Rclone will then show a notice in the log indicating how many such files were encountered, and count them in as empty files in the output of the size command.</p>\n<pre><code>rclone size remote:path [flags]</code></pre>\n<h2 id=\"options-14\">Options</h2>\n<pre><code>  -h, --help   help for size\n      --json   Format output as JSON</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-10\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-10\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-14\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-version\">rclone version</h1>\n<p>Show the version number.</p>\n<h2 id=\"synopsis-14\">Synopsis</h2>\n<p>Show the rclone version number, the go version, the build target OS and architecture, the runtime OS and kernel version and bitness, build tags and the type of executable (static or dynamic).</p>\n<p>For example:</p>\n<pre><code>$ rclone version\nrclone v1.55.0\n- os/version: ubuntu 18.04 (64 bit)\n- os/kernel: 4.15.0-136-generic (x86_64)\n- os/type: linux\n- os/arch: amd64\n- go/version: go1.16\n- go/linking: static\n- go/tags: none</code></pre>\n<p>Note: before rclone version 1.55 the os/type and os/arch lines were merged, and the \"go/version\" line was tagged as \"go version\".</p>\n<p>If you supply the --check flag, then it will do an online check to compare your version with the latest release and the latest beta.</p>\n<pre><code>$ rclone version --check\nyours:  1.42.0.6\nlatest: 1.42          (released 2018-06-16)\nbeta:   1.42.0.5      (released 2018-06-17)</code></pre>\n<p>Or</p>\n<pre><code>$ rclone version --check\nyours:  1.41\nlatest: 1.42          (released 2018-06-16)\n  upgrade: https://downloads.rclone.org/v1.42\nbeta:   1.42.0.5      (released 2018-06-17)\n  upgrade: https://beta.rclone.org/v1.42-005-g56e1e820</code></pre>\n<pre><code>rclone version [flags]</code></pre>\n<h2 id=\"options-15\">Options</h2>\n<pre><code>      --check   Check for new version\n  -h, --help    help for version</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-15\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-cleanup\">rclone cleanup</h1>\n<p>Clean up the remote if possible.</p>\n<h2 id=\"synopsis-15\">Synopsis</h2>\n<p>Clean up the remote if possible. Empty the trash or delete old file versions. Not supported by all remotes.</p>\n<pre><code>rclone cleanup remote:path [flags]</code></pre>\n<h2 id=\"options-16\">Options</h2>\n<pre><code>  -h, --help   help for cleanup</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-7\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h2 id=\"see-also-16\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-dedupe\">rclone dedupe</h1>\n<p>Interactively find duplicate filenames and delete/rename them.</p>\n<h2 id=\"synopsis-16\">Synopsis</h2>\n<p>By default <code>dedupe</code> interactively finds files with duplicate names and offers to delete all but one or rename them to be different. This is known as deduping by name.</p>\n<p>Deduping by name is only useful with a small group of backends (e.g. Google Drive, Opendrive) that can have duplicate file names. It can be run on wrapping backends (e.g. crypt) if they wrap a backend which supports duplicate file names.</p>\n<p>However if <code>--by-hash</code> is passed in then dedupe will find files with duplicate hashes instead which will work on any backend which supports at least one hash. This can be used to find files with duplicate content. This is known as deduping by hash.</p>\n<p>If deduping by name, first rclone will merge directories with the same name. It will do this iteratively until all the identically named directories have been merged.</p>\n<p>Next, if deduping by name, for every group of duplicate file names / hashes, it will delete all but one identical file it finds without confirmation. This means that for most duplicated files the <code>dedupe</code> command will not be interactive.</p>\n<p><code>dedupe</code> considers files to be identical if they have the same file path and the same hash. If the backend does not support hashes (e.g. crypt wrapping Google Drive) then they will never be found to be identical. If you use the <code>--size-only</code> flag then files will be considered identical if they have the same size (any hash will be ignored). This can be useful on crypt backends which do not support hashes.</p>\n<p>Next rclone will resolve the remaining duplicates. Exactly which action is taken depends on the dedupe mode. By default, rclone will interactively query the user for each one.</p>\n<p><strong>Important</strong>: Since this can cause data loss, test first with the <code>--dry-run</code> or the <code>--interactive</code>/<code>-i</code> flag.</p>\n<p>Here is an example run.</p>\n<p>Before - with duplicates</p>\n<pre><code>$ rclone lsl drive:dupes\n  6048320 2016-03-05 16:23:16.798000000 one.txt\n  6048320 2016-03-05 16:23:11.775000000 one.txt\n   564374 2016-03-05 16:23:06.731000000 one.txt\n  6048320 2016-03-05 16:18:26.092000000 one.txt\n  6048320 2016-03-05 16:22:46.185000000 two.txt\n  1744073 2016-03-05 16:22:38.104000000 two.txt\n   564374 2016-03-05 16:22:52.118000000 two.txt</code></pre>\n<p>Now the <code>dedupe</code> session</p>\n<pre><code>$ rclone dedupe drive:dupes\n2016/03/05 16:24:37 Google drive root &#39;dupes&#39;: Looking for duplicates using interactive mode.\none.txt: Found 4 files with duplicate names\none.txt: Deleting 2/3 identical duplicates (MD5 &quot;1eedaa9fe86fd4b8632e2ac549403b36&quot;)\none.txt: 2 duplicates remain\n  1:      6048320 bytes, 2016-03-05 16:23:16.798000000, MD5 1eedaa9fe86fd4b8632e2ac549403b36\n  2:       564374 bytes, 2016-03-05 16:23:06.731000000, MD5 7594e7dc9fc28f727c42ee3e0749de81\ns) Skip and do nothing\nk) Keep just one (choose which in next step)\nr) Rename all to be different (by changing file.jpg to file-1.jpg)\ns/k/r&gt; k\nEnter the number of the file to keep&gt; 1\none.txt: Deleted 1 extra copies\ntwo.txt: Found 3 files with duplicate names\ntwo.txt: 3 duplicates remain\n  1:       564374 bytes, 2016-03-05 16:22:52.118000000, MD5 7594e7dc9fc28f727c42ee3e0749de81\n  2:      6048320 bytes, 2016-03-05 16:22:46.185000000, MD5 1eedaa9fe86fd4b8632e2ac549403b36\n  3:      1744073 bytes, 2016-03-05 16:22:38.104000000, MD5 851957f7fb6f0bc4ce76be966d336802\ns) Skip and do nothing\nk) Keep just one (choose which in next step)\nr) Rename all to be different (by changing file.jpg to file-1.jpg)\ns/k/r&gt; r\ntwo-1.txt: renamed from: two.txt\ntwo-2.txt: renamed from: two.txt\ntwo-3.txt: renamed from: two.txt</code></pre>\n<p>The result being</p>\n<pre><code>$ rclone lsl drive:dupes\n  6048320 2016-03-05 16:23:16.798000000 one.txt\n   564374 2016-03-05 16:22:52.118000000 two-1.txt\n  6048320 2016-03-05 16:22:46.185000000 two-2.txt\n  1744073 2016-03-05 16:22:38.104000000 two-3.txt</code></pre>\n<p>Dedupe can be run non interactively using the <code>--dedupe-mode</code> flag or by using an extra parameter with the same value</p>\n<ul>\n<li><code>--dedupe-mode interactive</code> - interactive as above.</li>\n<li><code>--dedupe-mode skip</code> - removes identical files then skips anything left.</li>\n<li><code>--dedupe-mode first</code> - removes identical files then keeps the first one.</li>\n<li><code>--dedupe-mode newest</code> - removes identical files then keeps the newest one.</li>\n<li><code>--dedupe-mode oldest</code> - removes identical files then keeps the oldest one.</li>\n<li><code>--dedupe-mode largest</code> - removes identical files then keeps the largest one.</li>\n<li><code>--dedupe-mode smallest</code> - removes identical files then keeps the smallest one.</li>\n<li><code>--dedupe-mode rename</code> - removes identical files then renames the rest to be different.</li>\n<li><code>--dedupe-mode list</code> - lists duplicate dirs and files only and changes nothing.</li>\n</ul>\n<p>For example, to rename all the identically named photos in your Google Photos directory, do</p>\n<pre><code>rclone dedupe --dedupe-mode rename &quot;drive:Google Photos&quot;</code></pre>\n<p>Or</p>\n<pre><code>rclone dedupe rename &quot;drive:Google Photos&quot;</code></pre>\n<pre><code>rclone dedupe [mode] remote:path [flags]</code></pre>\n<h2 id=\"options-17\">Options</h2>\n<pre><code>      --by-hash              Find identical hashes rather than names\n      --dedupe-mode string   Dedupe mode interactive|skip|first|newest|oldest|largest|smallest|rename (default &quot;interactive&quot;)\n  -h, --help                 help for dedupe</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-8\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h2 id=\"see-also-17\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-about\">rclone about</h1>\n<p>Get quota information from the remote.</p>\n<h2 id=\"synopsis-17\">Synopsis</h2>\n<p>Prints quota information about a remote to standard output. The output is typically used, free, quota and trash contents.</p>\n<p>E.g. Typical output from <code>rclone about remote:</code> is:</p>\n<pre><code>Total:   17 GiB\nUsed:    7.444 GiB\nFree:    1.315 GiB\nTrashed: 100.000 MiB\nOther:   8.241 GiB</code></pre>\n<p>Where the fields are:</p>\n<ul>\n<li>Total: Total size available.</li>\n<li>Used: Total size used.</li>\n<li>Free: Total space available to this user.</li>\n<li>Trashed: Total space used by trash.</li>\n<li>Other: Total amount in other storage (e.g. Gmail, Google Photos).</li>\n<li>Objects: Total number of objects in the storage.</li>\n</ul>\n<p>All sizes are in number of bytes.</p>\n<p>Applying a <code>--full</code> flag to the command prints the bytes in full, e.g.</p>\n<pre><code>Total:   18253611008\nUsed:    7993453766\nFree:    1411001220\nTrashed: 104857602\nOther:   8849156022</code></pre>\n<p>A <code>--json</code> flag generates conveniently machine-readable output, e.g.</p>\n<pre><code>{\n    &quot;total&quot;: 18253611008,\n    &quot;used&quot;: 7993453766,\n    &quot;trashed&quot;: 104857602,\n    &quot;other&quot;: 8849156022,\n    &quot;free&quot;: 1411001220\n}</code></pre>\n<p>Not all backends print all fields. Information is not included if it is not provided by a backend. Where the value is unlimited it is omitted.</p>\n<p>Some backends does not support the <code>rclone about</code> command at all, see complete list in <a href=\"https://rclone.org/overview/#optional-features\">documentation</a>.</p>\n<pre><code>rclone about remote: [flags]</code></pre>\n<h2 id=\"options-18\">Options</h2>\n<pre><code>      --full   Full numbers instead of human-readable\n  -h, --help   help for about\n      --json   Format output as JSON</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-18\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-authorize\">rclone authorize</h1>\n<p>Remote authorization.</p>\n<h2 id=\"synopsis-18\">Synopsis</h2>\n<p>Remote authorization. Used to authorize a remote or headless rclone from a machine with a browser - use as instructed by rclone config.</p>\n<p>Use --auth-no-open-browser to prevent rclone to open auth link in default browser automatically.</p>\n<p>Use --template to generate HTML output via a custom Go template. If a blank string is provided as an argument to this flag, the default template is used.</p>\n<pre><code>rclone authorize [flags]</code></pre>\n<h2 id=\"options-19\">Options</h2>\n<pre><code>      --auth-no-open-browser   Do not automatically open auth link in default browser\n  -h, --help                   help for authorize\n      --template string        The path to a custom Go template for generating HTML responses</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-19\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-backend\">rclone backend</h1>\n<p>Run a backend-specific command.</p>\n<h2 id=\"synopsis-19\">Synopsis</h2>\n<p>This runs a backend-specific command. The commands themselves (except for \"help\" and \"features\") are defined by the backends and you should see the backend docs for definitions.</p>\n<p>You can discover what commands a backend implements by using</p>\n<pre><code>rclone backend help remote:\nrclone backend help &lt;backendname&gt;</code></pre>\n<p>You can also discover information about the backend using (see <a href=\"https://rclone.org/rc/#operations-fsinfo\">operations/fsinfo</a> in the remote control docs for more info).</p>\n<pre><code>rclone backend features remote:</code></pre>\n<p>Pass options to the backend command with -o. This should be key=value or key, e.g.:</p>\n<pre><code>rclone backend stats remote:path stats -o format=json -o long</code></pre>\n<p>Pass arguments to the backend by placing them on the end of the line</p>\n<pre><code>rclone backend cleanup remote:path file1 file2 file3</code></pre>\n<p>Note to run these commands on a running backend then see <a href=\"https://rclone.org/rc/#backend-command\">backend/command</a> in the rc docs.</p>\n<pre><code>rclone backend &lt;command&gt; remote:path [opts] &lt;args&gt; [flags]</code></pre>\n<h2 id=\"options-20\">Options</h2>\n<pre><code>  -h, --help                 help for backend\n      --json                 Always output in JSON format\n  -o, --option stringArray   Option in the form name=value or name</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-9\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h2 id=\"see-also-20\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-bisync\">rclone bisync</h1>\n<p>Perform bidirectional synchronization between two paths.</p>\n<h2 id=\"synopsis-20\">Synopsis</h2>\n<p>Perform bidirectional synchronization between two paths.</p>\n<p><a href=\"https://rclone.org/bisync/\">Bisync</a> provides a bidirectional cloud sync solution in rclone. It retains the Path1 and Path2 filesystem listings from the prior run. On each successive run it will: - list files on Path1 and Path2, and check for changes on each side. Changes include <code>New</code>, <code>Newer</code>, <code>Older</code>, and <code>Deleted</code> files. - Propagate changes on Path1 to Path2, and vice-versa.</p>\n<p>Bisync is <strong>in beta</strong> and is considered an <strong>advanced command</strong>, so use with care. Make sure you have read and understood the entire <a href=\"https://rclone.org/bisync\">manual</a> (especially the <a href=\"https://rclone.org/bisync/#limitations\">Limitations</a> section) before using, or data loss can result. Questions can be asked in the <a href=\"https://forum.rclone.org/\">Rclone Forum</a>.</p>\n<p>See <a href=\"https://rclone.org/bisync/\">full bisync description</a> for details.</p>\n<pre><code>rclone bisync remote1:path1 remote2:path2 [flags]</code></pre>\n<h2 id=\"options-21\">Options</h2>\n<pre><code>      --backup-dir1 string                   --backup-dir for Path1. Must be a non-overlapping path on the same remote.\n      --backup-dir2 string                   --backup-dir for Path2. Must be a non-overlapping path on the same remote.\n      --check-access                         Ensure expected RCLONE_TEST files are found on both Path1 and Path2 filesystems, else abort.\n      --check-filename string                Filename for --check-access (default: RCLONE_TEST)\n      --check-sync string                    Controls comparison of final listings: true|false|only (default: true) (default &quot;true&quot;)\n      --compare string                       Comma-separated list of bisync-specific compare options ex. &#39;size,modtime,checksum&#39; (default: &#39;size,modtime&#39;)\n      --conflict-loser ConflictLoserAction   Action to take on the loser of a sync conflict (when there is a winner) or on both files (when there is no winner): , num, pathname, delete (default: num)\n      --conflict-resolve string              Automatically resolve conflicts by preferring the version that is: none, path1, path2, newer, older, larger, smaller (default: none) (default &quot;none&quot;)\n      --conflict-suffix string               Suffix to use when renaming a --conflict-loser. Can be either one string or two comma-separated strings to assign different suffixes to Path1/Path2. (default: &#39;conflict&#39;)\n      --create-empty-src-dirs                Sync creation and deletion of empty directories. (Not compatible with --remove-empty-dirs)\n      --download-hash                        Compute hash by downloading when otherwise unavailable. (warning: may be slow and use lots of data!)\n      --filters-file string                  Read filtering patterns from a file\n      --force                                Bypass --max-delete safety check and run the sync. Consider using with --verbose\n  -h, --help                                 help for bisync\n      --ignore-listing-checksum              Do not use checksums for listings (add --ignore-checksum to additionally skip post-copy checksum checks)\n      --max-lock Duration                    Consider lock files older than this to be expired (default: 0 (never expire)) (minimum: 2m) (default 0s)\n      --no-cleanup                           Retain working files (useful for troubleshooting and testing).\n      --no-slow-hash                         Ignore listing checksums only on backends where they are slow\n      --recover                              Automatically recover from interruptions without requiring --resync.\n      --remove-empty-dirs                    Remove ALL empty directories at the final cleanup step.\n      --resilient                            Allow future runs to retry after certain less-serious errors, instead of requiring --resync. Use at your own risk!\n  -1, --resync                               Performs the resync run. Equivalent to --resync-mode path1. Consider using --verbose or --dry-run first.\n      --resync-mode string                   During resync, prefer the version that is: path1, path2, newer, older, larger, smaller (default: path1 if --resync, otherwise none for no resync.) (default &quot;none&quot;)\n      --slow-hash-sync-only                  Ignore slow checksums for listings and deltas, but still consider them during sync calls.\n      --workdir string                       Use custom working dir - useful for testing. (default: {WORKDIR})</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"copy-options-3\">Copy Options</h3>\n<p>Flags for anything which can copy a file</p>\n<pre><code>      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size &amp; checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don&#39;t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don&#39;t check the destination, copy regardless\n      --no-traverse                                 Don&#39;t traverse destination file system on copy\n      --no-update-dir-modtime                       Don&#39;t update directory modification times\n      --no-update-modtime                           Don&#39;t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. &#39;size,descending&#39;\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default &quot;.partial&quot;)\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination</code></pre>\n<h3 id=\"important-options-10\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h3 id=\"filter-options-11\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h2 id=\"see-also-21\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-cat\">rclone cat</h1>\n<p>Concatenates any files and sends them to stdout.</p>\n<h2 id=\"synopsis-21\">Synopsis</h2>\n<p>Sends any files to standard output.</p>\n<p>You can use it like this to output a single file</p>\n<pre><code>rclone cat remote:path/to/file</code></pre>\n<p>Or like this to output any file in dir or its subdirectories.</p>\n<pre><code>rclone cat remote:path/to/dir</code></pre>\n<p>Or like this to output any .txt files in dir or its subdirectories.</p>\n<pre><code>rclone --include &quot;*.txt&quot; cat remote:path/to/dir</code></pre>\n<p>Use the <code>--head</code> flag to print characters only at the start, <code>--tail</code> for the end and <code>--offset</code> and <code>--count</code> to print a section in the middle. Note that if offset is negative it will count from the end, so <code>--offset -1 --count 1</code> is equivalent to <code>--tail 1</code>.</p>\n<p>Use the <code>--separator</code> flag to print a separator value between files. Be sure to shell-escape special characters. For example, to print a newline between files, use:</p>\n<ul>\n<li><p>bash:</p>\n<pre><code>rclone --include &quot;*.txt&quot; --separator $&#39;\\n&#39; cat remote:path/to/dir</code></pre></li>\n<li><p>powershell:</p>\n<pre><code>rclone --include &quot;*.txt&quot; --separator &quot;`n&quot; cat remote:path/to/dir</code></pre></li>\n</ul>\n<pre><code>rclone cat remote:path [flags]</code></pre>\n<h2 id=\"options-22\">Options</h2>\n<pre><code>      --count int          Only print N characters (default -1)\n      --discard            Discard the output instead of printing\n      --head int           Only print the first N characters\n  -h, --help               help for cat\n      --offset int         Start printing at offset N (or from end if -ve)\n      --separator string   Separator to use between objects when printing multiple files\n      --tail int           Only print the last N characters</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-12\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-11\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-22\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-checksum\">rclone checksum</h1>\n<p>Checks the files in the destination against a SUM file.</p>\n<h2 id=\"synopsis-22\">Synopsis</h2>\n<p>Checks that hashsums of destination files match the SUM file. It compares hashes (MD5, SHA1, etc) and logs a report of files which don't match. It doesn't alter the file system.</p>\n<p>The sumfile is treated as the source and the dst:path is treated as the destination for the purposes of the output.</p>\n<p>If you supply the <code>--download</code> flag, it will download the data from the remote and calculate the content hash on the fly. This can be useful for remotes that don't support hashes or if you really want to check all the data.</p>\n<p>Note that hash values in the SUM file are treated as case insensitive.</p>\n<p>If you supply the <code>--one-way</code> flag, it will only check that files in the source match the files in the destination, not the other way around. This means that extra files in the destination that are not in the source will not be detected.</p>\n<p>The <code>--differ</code>, <code>--missing-on-dst</code>, <code>--missing-on-src</code>, <code>--match</code> and <code>--error</code> flags write paths, one per line, to the file name (or stdout if it is <code>-</code>) supplied. What they write is described in the help below. For example <code>--differ</code> will write all paths which are present on both the source and destination but different.</p>\n<p>The <code>--combined</code> flag will write a file (or stdout) which contains all file paths with a symbol and then a space and then the path to tell you what happened to it. These are reminiscent of diff files.</p>\n<ul>\n<li><code>= path</code> means path was found in source and destination and was identical</li>\n<li>`- path` means path was missing on the source, so only in the destination</li>\n<li>`+ path` means path was missing on the destination, so only in the source</li>\n<li>`* path` means path was present in source and destination but different.</li>\n<li><code>! path</code> means there was an error reading or hashing the source or dest.</li>\n</ul>\n<p>The default number of parallel checks is 8. See the <a href=\"https://rclone.org/docs/#checkers-n\">--checkers=N</a> option for more information.</p>\n<pre><code>rclone checksum &lt;hash&gt; sumfile dst:path [flags]</code></pre>\n<h2 id=\"options-23\">Options</h2>\n<pre><code>      --combined string         Make a combined report of changes to this file\n      --differ string           Report all non-matching files to this file\n      --download                Check by hashing the contents\n      --error string            Report all files with errors (hashing or reading) to this file\n  -h, --help                    help for checksum\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n      --one-way                 Check one way only, source files must exist on remote</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-13\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-12\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-23\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-completion\">rclone completion</h1>\n<p>Output completion script for a given shell.</p>\n<h2 id=\"synopsis-23\">Synopsis</h2>\n<p>Generates a shell completion script for rclone. Run with <code>--help</code> to list the supported shells.</p>\n<h2 id=\"options-24\">Options</h2>\n<pre><code>  -h, --help   help for completion</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-24\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n<li><a href=\"https://rclone.org/commands/rclone_completion_bash/\">rclone completion bash</a> - Output bash completion script for rclone.</li>\n<li><a href=\"https://rclone.org/commands/rclone_completion_fish/\">rclone completion fish</a> - Output fish completion script for rclone.</li>\n<li><a href=\"https://rclone.org/commands/rclone_completion_powershell/\">rclone completion powershell</a> - Output powershell completion script for rclone.</li>\n<li><a href=\"https://rclone.org/commands/rclone_completion_zsh/\">rclone completion zsh</a> - Output zsh completion script for rclone.</li>\n</ul>\n<h1 id=\"rclone-completion-bash\">rclone completion bash</h1>\n<p>Output bash completion script for rclone.</p>\n<h2 id=\"synopsis-24\">Synopsis</h2>\n<p>Generates a bash shell autocompletion script for rclone.</p>\n<p>By default, when run without any arguments,</p>\n<pre><code>rclone completion bash</code></pre>\n<p>the generated script will be written to</p>\n<pre><code>/etc/bash_completion.d/rclone</code></pre>\n<p>and so rclone will probably need to be run as root, or with sudo.</p>\n<p>If you supply a path to a file as the command line argument, then the generated script will be written to that file, in which case you should not need root privileges.</p>\n<p>If output_file is \"-\", then the output will be written to stdout.</p>\n<p>If you have installed the script into the default location, you can logout and login again to use the autocompletion script.</p>\n<p>Alternatively, you can source the script directly</p>\n<pre><code>. /path/to/my_bash_completion_scripts/rclone</code></pre>\n<p>and the autocompletion functionality will be added to your current shell.</p>\n<pre><code>rclone completion bash [output_file] [flags]</code></pre>\n<h2 id=\"options-25\">Options</h2>\n<pre><code>  -h, --help   help for bash</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-25\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_completion/\">rclone completion</a> - Output completion script for a given shell.</li>\n</ul>\n<h1 id=\"rclone-completion-fish\">rclone completion fish</h1>\n<p>Output fish completion script for rclone.</p>\n<h2 id=\"synopsis-25\">Synopsis</h2>\n<p>Generates a fish autocompletion script for rclone.</p>\n<p>This writes to /etc/fish/completions/rclone.fish by default so will probably need to be run with sudo or as root, e.g.</p>\n<pre><code>sudo rclone completion fish</code></pre>\n<p>Logout and login again to use the autocompletion scripts, or source them directly</p>\n<pre><code>. /etc/fish/completions/rclone.fish</code></pre>\n<p>If you supply a command line argument the script will be written there.</p>\n<p>If output_file is \"-\", then the output will be written to stdout.</p>\n<pre><code>rclone completion fish [output_file] [flags]</code></pre>\n<h2 id=\"options-26\">Options</h2>\n<pre><code>  -h, --help   help for fish</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-26\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_completion/\">rclone completion</a> - Output completion script for a given shell.</li>\n</ul>\n<h1 id=\"rclone-completion-powershell\">rclone completion powershell</h1>\n<p>Output powershell completion script for rclone.</p>\n<h2 id=\"synopsis-26\">Synopsis</h2>\n<p>Generate the autocompletion script for powershell.</p>\n<p>To load completions in your current shell session:</p>\n<pre><code>rclone completion powershell | Out-String | Invoke-Expression</code></pre>\n<p>To load completions for every new session, add the output of the above command to your powershell profile.</p>\n<p>If output_file is \"-\" or missing, then the output will be written to stdout.</p>\n<pre><code>rclone completion powershell [output_file] [flags]</code></pre>\n<h2 id=\"options-27\">Options</h2>\n<pre><code>  -h, --help   help for powershell</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-27\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_completion/\">rclone completion</a> - Output completion script for a given shell.</li>\n</ul>\n<h1 id=\"rclone-completion-zsh\">rclone completion zsh</h1>\n<p>Output zsh completion script for rclone.</p>\n<h2 id=\"synopsis-27\">Synopsis</h2>\n<p>Generates a zsh autocompletion script for rclone.</p>\n<p>This writes to /usr/share/zsh/vendor-completions/_rclone by default so will probably need to be run with sudo or as root, e.g.</p>\n<pre><code>sudo rclone completion zsh</code></pre>\n<p>Logout and login again to use the autocompletion scripts, or source them directly</p>\n<pre><code>autoload -U compinit &amp;&amp; compinit</code></pre>\n<p>If you supply a command line argument the script will be written there.</p>\n<p>If output_file is \"-\", then the output will be written to stdout.</p>\n<pre><code>rclone completion zsh [output_file] [flags]</code></pre>\n<h2 id=\"options-28\">Options</h2>\n<pre><code>  -h, --help   help for zsh</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-28\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_completion/\">rclone completion</a> - Output completion script for a given shell.</li>\n</ul>\n<h1 id=\"rclone-config-create\">rclone config create</h1>\n<p>Create a new remote with name, type and options.</p>\n<h2 id=\"synopsis-28\">Synopsis</h2>\n<p>Create a new remote of <code>name</code> with <code>type</code> and options. The options should be passed in pairs of <code>key</code> <code>value</code> or as <code>key=value</code>.</p>\n<p>For example, to make a swift remote of name myremote using auto config you would do:</p>\n<pre><code>rclone config create myremote swift env_auth true\nrclone config create myremote swift env_auth=true</code></pre>\n<p>So for example if you wanted to configure a Google Drive remote but using remote authorization you would do this:</p>\n<pre><code>rclone config create mydrive drive config_is_local=false</code></pre>\n<p>Note that if the config process would normally ask a question the default is taken (unless <code>--non-interactive</code> is used). Each time that happens rclone will print or DEBUG a message saying how to affect the value taken.</p>\n<p>If any of the parameters passed is a password field, then rclone will automatically obscure them if they aren't already obscured before putting them in the config file.</p>\n<p><strong>NB</strong> If the password parameter is 22 characters or longer and consists only of base64 characters then rclone can get confused about whether the password is already obscured or not and put unobscured passwords into the config file. If you want to be 100% certain that the passwords get obscured then use the <code>--obscure</code> flag, or if you are 100% certain you are already passing obscured passwords then use <code>--no-obscure</code>. You can also set obscured passwords using the <code>rclone config password</code> command.</p>\n<p>The flag <code>--non-interactive</code> is for use by applications that wish to configure rclone themselves, rather than using rclone's text based configuration questions. If this flag is set, and rclone needs to ask the user a question, a JSON blob will be returned with the question in it.</p>\n<p>This will look something like (some irrelevant detail removed):</p>\n<pre><code>{\n    &quot;State&quot;: &quot;*oauth-islocal,teamdrive,,&quot;,\n    &quot;Option&quot;: {\n        &quot;Name&quot;: &quot;config_is_local&quot;,\n        &quot;Help&quot;: &quot;Use web browser to automatically authenticate rclone with remote?\\n * Say Y if the machine running rclone has a web browser you can use\\n * Say N if running rclone on a (remote) machine without web browser access\\nIf not sure try Y. If Y failed, try N.\\n&quot;,\n        &quot;Default&quot;: true,\n        &quot;Examples&quot;: [\n            {\n                &quot;Value&quot;: &quot;true&quot;,\n                &quot;Help&quot;: &quot;Yes&quot;\n            },\n            {\n                &quot;Value&quot;: &quot;false&quot;,\n                &quot;Help&quot;: &quot;No&quot;\n            }\n        ],\n        &quot;Required&quot;: false,\n        &quot;IsPassword&quot;: false,\n        &quot;Type&quot;: &quot;bool&quot;,\n        &quot;Exclusive&quot;: true,\n    },\n    &quot;Error&quot;: &quot;&quot;,\n}</code></pre>\n<p>The format of <code>Option</code> is the same as returned by <code>rclone config providers</code>. The question should be asked to the user and returned to rclone as the <code>--result</code> option along with the <code>--state</code> parameter.</p>\n<p>The keys of <code>Option</code> are used as follows:</p>\n<ul>\n<li><code>Name</code> - name of variable - show to user</li>\n<li><code>Help</code> - help text. Hard wrapped at 80 chars. Any URLs should be clicky.</li>\n<li><code>Default</code> - default value - return this if the user just wants the default.</li>\n<li><code>Examples</code> - the user should be able to choose one of these</li>\n<li><code>Required</code> - the value should be non-empty</li>\n<li><code>IsPassword</code> - the value is a password and should be edited as such</li>\n<li><code>Type</code> - type of value, eg <code>bool</code>, <code>string</code>, <code>int</code> and others</li>\n<li><code>Exclusive</code> - if set no free-form entry allowed only the <code>Examples</code></li>\n<li>Irrelevant keys <code>Provider</code>, <code>ShortOpt</code>, <code>Hide</code>, <code>NoPrefix</code>, <code>Advanced</code></li>\n</ul>\n<p>If <code>Error</code> is set then it should be shown to the user at the same time as the question.</p>\n<pre><code>rclone config update name --continue --state &quot;*oauth-islocal,teamdrive,,&quot; --result &quot;true&quot;</code></pre>\n<p>Note that when using <code>--continue</code> all passwords should be passed in the clear (not obscured). Any default config values should be passed in with each invocation of <code>--continue</code>.</p>\n<p>At the end of the non interactive process, rclone will return a result with <code>State</code> as empty string.</p>\n<p>If <code>--all</code> is passed then rclone will ask all the config questions, not just the post config questions. Any parameters are used as defaults for questions as usual.</p>\n<p>Note that <code>bin/config.py</code> in the rclone source implements this protocol as a readable demonstration.</p>\n<pre><code>rclone config create name type [key value]* [flags]</code></pre>\n<h2 id=\"options-29\">Options</h2>\n<pre><code>      --all               Ask the full set of config questions\n      --continue          Continue the configuration process with an answer\n  -h, --help              help for create\n      --no-obscure        Force any passwords not to be obscured\n      --non-interactive   Don&#39;t interact with user and return questions\n      --obscure           Force any passwords to be obscured\n      --result string     Result - use with --continue\n      --state string      State - use with --continue</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-29\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-delete\">rclone config delete</h1>\n<p>Delete an existing remote.</p>\n<pre><code>rclone config delete name [flags]</code></pre>\n<h2 id=\"options-30\">Options</h2>\n<pre><code>  -h, --help   help for delete</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-30\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-disconnect\">rclone config disconnect</h1>\n<p>Disconnects user from remote</p>\n<h2 id=\"synopsis-29\">Synopsis</h2>\n<p>This disconnects the remote: passed in to the cloud storage system.</p>\n<p>This normally means revoking the oauth token.</p>\n<p>To reconnect use \"rclone config reconnect\".</p>\n<pre><code>rclone config disconnect remote: [flags]</code></pre>\n<h2 id=\"options-31\">Options</h2>\n<pre><code>  -h, --help   help for disconnect</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-31\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-dump\">rclone config dump</h1>\n<p>Dump the config file as JSON.</p>\n<pre><code>rclone config dump [flags]</code></pre>\n<h2 id=\"options-32\">Options</h2>\n<pre><code>  -h, --help   help for dump</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-32\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-edit\">rclone config edit</h1>\n<p>Enter an interactive configuration session.</p>\n<h2 id=\"synopsis-30\">Synopsis</h2>\n<p>Enter an interactive configuration session where you can setup new remotes and manage existing ones. You may also set or remove a password to protect your configuration.</p>\n<pre><code>rclone config edit [flags]</code></pre>\n<h2 id=\"options-33\">Options</h2>\n<pre><code>  -h, --help   help for edit</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-33\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-encryption\">rclone config encryption</h1>\n<p>set, remove and check the encryption for the config file</p>\n<h2 id=\"synopsis-31\">Synopsis</h2>\n<p>This command sets, clears and checks the encryption for the config file using the subcommands below.</p>\n<h2 id=\"options-34\">Options</h2>\n<pre><code>  -h, --help   help for encryption</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-34\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_encryption_check/\">rclone config encryption check</a> - Check that the config file is encrypted</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_encryption_remove/\">rclone config encryption remove</a> - Remove the config file encryption password</li>\n<li><a href=\"https://rclone.org/commands/rclone_config_encryption_set/\">rclone config encryption set</a> - Set or change the config file encryption password</li>\n</ul>\n<h1 id=\"rclone-config-encryption-check\">rclone config encryption check</h1>\n<p>Check that the config file is encrypted</p>\n<h2 id=\"synopsis-32\">Synopsis</h2>\n<p>This checks the config file is encrypted and that you can decrypt it.</p>\n<p>It will attempt to decrypt the config using the password you supply.</p>\n<p>If decryption fails it will return a non-zero exit code if using <code>--password-command</code>, otherwise it will prompt again for the password.</p>\n<p>If the config file is not encrypted it will return a non zero exit code.</p>\n<pre><code>rclone config encryption check [flags]</code></pre>\n<h2 id=\"options-35\">Options</h2>\n<pre><code>  -h, --help   help for check</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-35\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config_encryption/\">rclone config encryption</a> - set, remove and check the encryption for the config file</li>\n</ul>\n<h1 id=\"rclone-config-encryption-remove\">rclone config encryption remove</h1>\n<p>Remove the config file encryption password</p>\n<h2 id=\"synopsis-33\">Synopsis</h2>\n<p>Remove the config file encryption password</p>\n<p>This removes the config file encryption, returning it to un-encrypted.</p>\n<p>If <code>--password-command</code> is in use, this will be called to supply the old config password.</p>\n<p>If the config was not encrypted then no error will be returned and this command will do nothing.</p>\n<pre><code>rclone config encryption remove [flags]</code></pre>\n<h2 id=\"options-36\">Options</h2>\n<pre><code>  -h, --help   help for remove</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-36\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config_encryption/\">rclone config encryption</a> - set, remove and check the encryption for the config file</li>\n</ul>\n<h1 id=\"rclone-config-encryption-set\">rclone config encryption set</h1>\n<p>Set or change the config file encryption password</p>\n<h2 id=\"synopsis-34\">Synopsis</h2>\n<p>This command sets or changes the config file encryption password.</p>\n<p>If there was no config password set then it sets a new one, otherwise it changes the existing config password.</p>\n<p>Note that if you are changing an encryption password using <code>--password-command</code> then this will be called once to decrypt the config using the old password and then again to read the new password to re-encrypt the config.</p>\n<p>When <code>--password-command</code> is called to change the password then the environment variable <code>RCLONE_PASSWORD_CHANGE=1</code> will be set. So if changing passwords programatically you can use the environment variable to distinguish which password you must supply.</p>\n<p>Alternatively you can remove the password first (with <code>rclone config encryption remove</code>), then set it again with this command which may be easier if you don't mind the unecrypted config file being on the disk briefly.</p>\n<pre><code>rclone config encryption set [flags]</code></pre>\n<h2 id=\"options-37\">Options</h2>\n<pre><code>  -h, --help   help for set</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-37\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config_encryption/\">rclone config encryption</a> - set, remove and check the encryption for the config file</li>\n</ul>\n<h1 id=\"rclone-config-file\">rclone config file</h1>\n<p>Show path of configuration file in use.</p>\n<pre><code>rclone config file [flags]</code></pre>\n<h2 id=\"options-38\">Options</h2>\n<pre><code>  -h, --help   help for file</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-38\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-password\">rclone config password</h1>\n<p>Update password in an existing remote.</p>\n<h2 id=\"synopsis-35\">Synopsis</h2>\n<p>Update an existing remote's password. The password should be passed in pairs of <code>key</code> <code>password</code> or as <code>key=password</code>. The <code>password</code> should be passed in in clear (unobscured).</p>\n<p>For example, to set password of a remote of name myremote you would do:</p>\n<pre><code>rclone config password myremote fieldname mypassword\nrclone config password myremote fieldname=mypassword</code></pre>\n<p>This command is obsolete now that \"config update\" and \"config create\" both support obscuring passwords directly.</p>\n<pre><code>rclone config password name [key value]+ [flags]</code></pre>\n<h2 id=\"options-39\">Options</h2>\n<pre><code>  -h, --help   help for password</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-39\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-paths\">rclone config paths</h1>\n<p>Show paths used for configuration, cache, temp etc.</p>\n<pre><code>rclone config paths [flags]</code></pre>\n<h2 id=\"options-40\">Options</h2>\n<pre><code>  -h, --help   help for paths</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-40\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-providers\">rclone config providers</h1>\n<p>List in JSON format all the providers and options.</p>\n<pre><code>rclone config providers [flags]</code></pre>\n<h2 id=\"options-41\">Options</h2>\n<pre><code>  -h, --help   help for providers</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-41\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-reconnect\">rclone config reconnect</h1>\n<p>Re-authenticates user with remote.</p>\n<h2 id=\"synopsis-36\">Synopsis</h2>\n<p>This reconnects remote: passed in to the cloud storage system.</p>\n<p>To disconnect the remote use \"rclone config disconnect\".</p>\n<p>This normally means going through the interactive oauth flow again.</p>\n<pre><code>rclone config reconnect remote: [flags]</code></pre>\n<h2 id=\"options-42\">Options</h2>\n<pre><code>  -h, --help   help for reconnect</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-42\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-redacted\">rclone config redacted</h1>\n<p>Print redacted (decrypted) config file, or the redacted config for a single remote.</p>\n<h2 id=\"synopsis-37\">Synopsis</h2>\n<p>This prints a redacted copy of the config file, either the whole config file or for a given remote.</p>\n<p>The config file will be redacted by replacing all passwords and other sensitive info with XXX.</p>\n<p>This makes the config file suitable for posting online for support.</p>\n<p>It should be double checked before posting as the redaction may not be perfect.</p>\n<pre><code>rclone config redacted [&lt;remote&gt;] [flags]</code></pre>\n<h2 id=\"options-43\">Options</h2>\n<pre><code>  -h, --help   help for redacted</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-43\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-show\">rclone config show</h1>\n<p>Print (decrypted) config file, or the config for a single remote.</p>\n<pre><code>rclone config show [&lt;remote&gt;] [flags]</code></pre>\n<h2 id=\"options-44\">Options</h2>\n<pre><code>  -h, --help   help for show</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-44\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-touch\">rclone config touch</h1>\n<p>Ensure configuration file exists.</p>\n<pre><code>rclone config touch [flags]</code></pre>\n<h2 id=\"options-45\">Options</h2>\n<pre><code>  -h, --help   help for touch</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-45\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-update\">rclone config update</h1>\n<p>Update options in an existing remote.</p>\n<h2 id=\"synopsis-38\">Synopsis</h2>\n<p>Update an existing remote's options. The options should be passed in pairs of <code>key</code> <code>value</code> or as <code>key=value</code>.</p>\n<p>For example, to update the env_auth field of a remote of name myremote you would do:</p>\n<pre><code>rclone config update myremote env_auth true\nrclone config update myremote env_auth=true</code></pre>\n<p>If the remote uses OAuth the token will be updated, if you don't require this add an extra parameter thus:</p>\n<pre><code>rclone config update myremote env_auth=true config_refresh_token=false</code></pre>\n<p>Note that if the config process would normally ask a question the default is taken (unless <code>--non-interactive</code> is used). Each time that happens rclone will print or DEBUG a message saying how to affect the value taken.</p>\n<p>If any of the parameters passed is a password field, then rclone will automatically obscure them if they aren't already obscured before putting them in the config file.</p>\n<p><strong>NB</strong> If the password parameter is 22 characters or longer and consists only of base64 characters then rclone can get confused about whether the password is already obscured or not and put unobscured passwords into the config file. If you want to be 100% certain that the passwords get obscured then use the <code>--obscure</code> flag, or if you are 100% certain you are already passing obscured passwords then use <code>--no-obscure</code>. You can also set obscured passwords using the <code>rclone config password</code> command.</p>\n<p>The flag <code>--non-interactive</code> is for use by applications that wish to configure rclone themselves, rather than using rclone's text based configuration questions. If this flag is set, and rclone needs to ask the user a question, a JSON blob will be returned with the question in it.</p>\n<p>This will look something like (some irrelevant detail removed):</p>\n<pre><code>{\n    &quot;State&quot;: &quot;*oauth-islocal,teamdrive,,&quot;,\n    &quot;Option&quot;: {\n        &quot;Name&quot;: &quot;config_is_local&quot;,\n        &quot;Help&quot;: &quot;Use web browser to automatically authenticate rclone with remote?\\n * Say Y if the machine running rclone has a web browser you can use\\n * Say N if running rclone on a (remote) machine without web browser access\\nIf not sure try Y. If Y failed, try N.\\n&quot;,\n        &quot;Default&quot;: true,\n        &quot;Examples&quot;: [\n            {\n                &quot;Value&quot;: &quot;true&quot;,\n                &quot;Help&quot;: &quot;Yes&quot;\n            },\n            {\n                &quot;Value&quot;: &quot;false&quot;,\n                &quot;Help&quot;: &quot;No&quot;\n            }\n        ],\n        &quot;Required&quot;: false,\n        &quot;IsPassword&quot;: false,\n        &quot;Type&quot;: &quot;bool&quot;,\n        &quot;Exclusive&quot;: true,\n    },\n    &quot;Error&quot;: &quot;&quot;,\n}</code></pre>\n<p>The format of <code>Option</code> is the same as returned by <code>rclone config providers</code>. The question should be asked to the user and returned to rclone as the <code>--result</code> option along with the <code>--state</code> parameter.</p>\n<p>The keys of <code>Option</code> are used as follows:</p>\n<ul>\n<li><code>Name</code> - name of variable - show to user</li>\n<li><code>Help</code> - help text. Hard wrapped at 80 chars. Any URLs should be clicky.</li>\n<li><code>Default</code> - default value - return this if the user just wants the default.</li>\n<li><code>Examples</code> - the user should be able to choose one of these</li>\n<li><code>Required</code> - the value should be non-empty</li>\n<li><code>IsPassword</code> - the value is a password and should be edited as such</li>\n<li><code>Type</code> - type of value, eg <code>bool</code>, <code>string</code>, <code>int</code> and others</li>\n<li><code>Exclusive</code> - if set no free-form entry allowed only the <code>Examples</code></li>\n<li>Irrelevant keys <code>Provider</code>, <code>ShortOpt</code>, <code>Hide</code>, <code>NoPrefix</code>, <code>Advanced</code></li>\n</ul>\n<p>If <code>Error</code> is set then it should be shown to the user at the same time as the question.</p>\n<pre><code>rclone config update name --continue --state &quot;*oauth-islocal,teamdrive,,&quot; --result &quot;true&quot;</code></pre>\n<p>Note that when using <code>--continue</code> all passwords should be passed in the clear (not obscured). Any default config values should be passed in with each invocation of <code>--continue</code>.</p>\n<p>At the end of the non interactive process, rclone will return a result with <code>State</code> as empty string.</p>\n<p>If <code>--all</code> is passed then rclone will ask all the config questions, not just the post config questions. Any parameters are used as defaults for questions as usual.</p>\n<p>Note that <code>bin/config.py</code> in the rclone source implements this protocol as a readable demonstration.</p>\n<pre><code>rclone config update name [key value]+ [flags]</code></pre>\n<h2 id=\"options-46\">Options</h2>\n<pre><code>      --all               Ask the full set of config questions\n      --continue          Continue the configuration process with an answer\n  -h, --help              help for update\n      --no-obscure        Force any passwords not to be obscured\n      --non-interactive   Don&#39;t interact with user and return questions\n      --obscure           Force any passwords to be obscured\n      --result string     Result - use with --continue\n      --state string      State - use with --continue</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-46\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-config-userinfo\">rclone config userinfo</h1>\n<p>Prints info about logged in user of remote.</p>\n<h2 id=\"synopsis-39\">Synopsis</h2>\n<p>This prints the details of the person logged in to the cloud storage system.</p>\n<pre><code>rclone config userinfo remote: [flags]</code></pre>\n<h2 id=\"options-47\">Options</h2>\n<pre><code>  -h, --help   help for userinfo\n      --json   Format output as JSON</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-47\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> - Enter an interactive configuration session.</li>\n</ul>\n<h1 id=\"rclone-copyto\">rclone copyto</h1>\n<p>Copy files from source to dest, skipping identical files.</p>\n<h2 id=\"synopsis-40\">Synopsis</h2>\n<p>If source:path is a file or directory then it copies it to a file or directory named dest:path.</p>\n<p>This can be used to upload single files to other than their current name. If the source is a directory then it acts exactly like the <a href=\"https://rclone.org/commands/rclone_copy/\">copy</a> command.</p>\n<p>So</p>\n<pre><code>rclone copyto src dst</code></pre>\n<p>where src and dst are rclone paths, either remote:path or /path/to/local or C:.</p>\n<p>This will:</p>\n<pre><code>if src is file\n    copy it to dst, overwriting an existing file if it exists\nif src is directory\n    copy it to dst, overwriting existing files if they exist\n    see copy command for full details</code></pre>\n<p>This doesn't transfer files that are identical on src and dst, testing by size and modification time or MD5SUM. It doesn't delete files from the destination.</p>\n<p><strong>Note</strong>: Use the <code>-P</code>/<code>--progress</code> flag to view real-time transfer statistics</p>\n<pre><code>rclone copyto source:path dest:path [flags]</code></pre>\n<h2 id=\"options-48\">Options</h2>\n<pre><code>  -h, --help   help for copyto</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"copy-options-4\">Copy Options</h3>\n<p>Flags for anything which can copy a file</p>\n<pre><code>      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size &amp; checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don&#39;t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don&#39;t check the destination, copy regardless\n      --no-traverse                                 Don&#39;t traverse destination file system on copy\n      --no-update-dir-modtime                       Don&#39;t update directory modification times\n      --no-update-modtime                           Don&#39;t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. &#39;size,descending&#39;\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default &quot;.partial&quot;)\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination</code></pre>\n<h3 id=\"important-options-11\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h3 id=\"filter-options-14\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-13\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-48\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-copyurl\">rclone copyurl</h1>\n<p>Copy the contents of the URL supplied content to dest:path.</p>\n<h2 id=\"synopsis-41\">Synopsis</h2>\n<p>Download a URL's content and copy it to the destination without saving it in temporary storage.</p>\n<p>Setting <code>--auto-filename</code> will attempt to automatically determine the filename from the URL (after any redirections) and used in the destination path.</p>\n<p>With <code>--auto-filename-header</code> in addition, if a specific filename is set in HTTP headers, it will be used instead of the name from the URL. With <code>--print-filename</code> in addition, the resulting file name will be printed.</p>\n<p>Setting <code>--no-clobber</code> will prevent overwriting file on the destination if there is one with the same name.</p>\n<p>Setting <code>--stdout</code> or making the output file name <code>-</code> will cause the output to be written to standard output.</p>\n<h2 id=\"troublshooting\">Troublshooting</h2>\n<p>If you can't get <code>rclone copyurl</code> to work then here are some things you can try:</p>\n<ul>\n<li><code>--disable-http2</code> rclone will use HTTP2 if available - try disabling it</li>\n<li><code>--bind 0.0.0.0</code> rclone will use IPv6 if available - try disabling it</li>\n<li><code>--bind ::0</code> to disable IPv4</li>\n<li><code>--user agent curl</code> - some sites have whitelists for curl's user-agent - try that</li>\n<li>Make sure the site works with <code>curl</code> directly</li>\n</ul>\n<pre><code>rclone copyurl https://example.com dest:path [flags]</code></pre>\n<h2 id=\"options-49\">Options</h2>\n<pre><code>  -a, --auto-filename     Get the file name from the URL and use it for destination file path\n      --header-filename   Get the file name from the Content-Disposition header\n  -h, --help              help for copyurl\n      --no-clobber        Prevent overwriting file with same name\n  -p, --print-filename    Print the resulting name from --auto-filename\n      --stdout            Write the output to stdout rather than a file</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-12\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h2 id=\"see-also-49\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-cryptcheck\">rclone cryptcheck</h1>\n<p>Cryptcheck checks the integrity of an encrypted remote.</p>\n<h2 id=\"synopsis-42\">Synopsis</h2>\n<p>Checks a remote against a <a href=\"https://rclone.org/crypt/\">crypted</a> remote. This is the equivalent of running rclone <a href=\"https://rclone.org/commands/rclone_check/\">check</a>, but able to check the checksums of the encrypted remote.</p>\n<p>For it to work the underlying remote of the cryptedremote must support some kind of checksum.</p>\n<p>It works by reading the nonce from each file on the cryptedremote: and using that to encrypt each file on the remote:. It then checks the checksum of the underlying file on the cryptedremote: against the checksum of the file it has just encrypted.</p>\n<p>Use it like this</p>\n<pre><code>rclone cryptcheck /path/to/files encryptedremote:path</code></pre>\n<p>You can use it like this also, but that will involve downloading all the files in remote:path.</p>\n<pre><code>rclone cryptcheck remote:path encryptedremote:path</code></pre>\n<p>After it has run it will log the status of the encryptedremote:.</p>\n<p>If you supply the <code>--one-way</code> flag, it will only check that files in the source match the files in the destination, not the other way around. This means that extra files in the destination that are not in the source will not be detected.</p>\n<p>The <code>--differ</code>, <code>--missing-on-dst</code>, <code>--missing-on-src</code>, <code>--match</code> and <code>--error</code> flags write paths, one per line, to the file name (or stdout if it is <code>-</code>) supplied. What they write is described in the help below. For example <code>--differ</code> will write all paths which are present on both the source and destination but different.</p>\n<p>The <code>--combined</code> flag will write a file (or stdout) which contains all file paths with a symbol and then a space and then the path to tell you what happened to it. These are reminiscent of diff files.</p>\n<ul>\n<li><code>= path</code> means path was found in source and destination and was identical</li>\n<li>`- path` means path was missing on the source, so only in the destination</li>\n<li>`+ path` means path was missing on the destination, so only in the source</li>\n<li>`* path` means path was present in source and destination but different.</li>\n<li><code>! path</code> means there was an error reading or hashing the source or dest.</li>\n</ul>\n<p>The default number of parallel checks is 8. See the <a href=\"https://rclone.org/docs/#checkers-n\">--checkers=N</a> option for more information.</p>\n<pre><code>rclone cryptcheck remote:path cryptedremote:path [flags]</code></pre>\n<h2 id=\"options-50\">Options</h2>\n<pre><code>      --combined string         Make a combined report of changes to this file\n      --differ string           Report all non-matching files to this file\n      --error string            Report all files with errors (hashing or reading) to this file\n  -h, --help                    help for cryptcheck\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n      --one-way                 Check one way only, source files must exist on remote</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"check-options-1\">Check Options</h3>\n<p>Flags used for check commands</p>\n<pre><code>      --max-backlog int   Maximum number of objects in sync or check backlog (default 10000)</code></pre>\n<h3 id=\"filter-options-15\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-14\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-50\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-cryptdecode\">rclone cryptdecode</h1>\n<p>Cryptdecode returns unencrypted file names.</p>\n<h2 id=\"synopsis-43\">Synopsis</h2>\n<p>Returns unencrypted file names when provided with a list of encrypted file names. List limit is 10 items.</p>\n<p>If you supply the <code>--reverse</code> flag, it will return encrypted file names.</p>\n<p>use it like this</p>\n<pre><code>rclone cryptdecode encryptedremote: encryptedfilename1 encryptedfilename2\n\nrclone cryptdecode --reverse encryptedremote: filename1 filename2</code></pre>\n<p>Another way to accomplish this is by using the <code>rclone backend encode</code> (or <code>decode</code>) command. See the documentation on the <a href=\"https://rclone.org/crypt/\">crypt</a> overlay for more info.</p>\n<pre><code>rclone cryptdecode encryptedremote: encryptedfilename [flags]</code></pre>\n<h2 id=\"options-51\">Options</h2>\n<pre><code>  -h, --help      help for cryptdecode\n      --reverse   Reverse cryptdecode, encrypts filenames</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-51\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-deletefile\">rclone deletefile</h1>\n<p>Remove a single file from remote.</p>\n<h2 id=\"synopsis-44\">Synopsis</h2>\n<p>Remove a single file from remote. Unlike <code>delete</code> it cannot be used to remove a directory and it doesn't obey include/exclude filters - if the specified file exists, it will always be removed.</p>\n<pre><code>rclone deletefile remote:path [flags]</code></pre>\n<h2 id=\"options-52\">Options</h2>\n<pre><code>  -h, --help   help for deletefile</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-13\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h2 id=\"see-also-52\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-gendocs\">rclone gendocs</h1>\n<p>Output markdown docs for rclone to the directory supplied.</p>\n<h2 id=\"synopsis-45\">Synopsis</h2>\n<p>This produces markdown docs for the rclone commands to the directory supplied. These are in a format suitable for hugo to render into the rclone.org website.</p>\n<pre><code>rclone gendocs output_directory [flags]</code></pre>\n<h2 id=\"options-53\">Options</h2>\n<pre><code>  -h, --help   help for gendocs</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-53\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-gitannex\">rclone gitannex</h1>\n<p>Speaks with git-annex over stdin/stdout.</p>\n<h2 id=\"synopsis-46\">Synopsis</h2>\n<p>Rclone's <code>gitannex</code> subcommand enables <a href=\"https://git-annex.branchable.com/\">git-annex</a> to store and retrieve content from an rclone remote. It is meant to be run by git-annex, not directly by users.</p>\n<h2 id=\"installation-on-linux\">Installation on Linux</h2>\n<ol type=\"1\">\n<li><p>Skip this step if your version of git-annex is <a href=\"https://git-annex.branchable.com/news/version_10.20240430/\">10.20240430</a> or newer. Otherwise, you must create a symlink somewhere on your PATH with a particular name. This symlink helps git-annex tell rclone it wants to run the \"gitannex\" subcommand.</p>\n<div class=\"sourceCode\" id=\"cb253\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb253-1\"><a href=\"#cb253-1\" aria-hidden=\"true\"></a><span class=\"co\"># Create the helper symlink in &quot;$HOME/bin&quot;.</span></span>\n<span id=\"cb253-2\"><a href=\"#cb253-2\" aria-hidden=\"true\"></a><span class=\"fu\">ln</span> -s <span class=\"st\">&quot;</span><span class=\"va\">$(</span><span class=\"ex\">realpath</span> rclone<span class=\"va\">)</span><span class=\"st\">&quot;</span> <span class=\"st\">&quot;</span><span class=\"va\">$HOME</span><span class=\"st\">/bin/git-annex-remote-rclone-builtin&quot;</span></span>\n<span id=\"cb253-3\"><a href=\"#cb253-3\" aria-hidden=\"true\"></a></span>\n<span id=\"cb253-4\"><a href=\"#cb253-4\" aria-hidden=\"true\"></a><span class=\"co\"># Verify the new symlink is on your PATH.</span></span>\n<span id=\"cb253-5\"><a href=\"#cb253-5\" aria-hidden=\"true\"></a><span class=\"fu\">which</span> git-annex-remote-rclone-builtin</span></code></pre></div></li>\n<li><p>Add a new remote to your git-annex repo. This new remote will connect git-annex with the <code>rclone gitannex</code> subcommand.</p>\n<p>Start by asking git-annex to describe the remote's available configuration parameters.</p>\n<div class=\"sourceCode\" id=\"cb254\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb254-1\"><a href=\"#cb254-1\" aria-hidden=\"true\"></a><span class=\"co\"># If you skipped step 1:</span></span>\n<span id=\"cb254-2\"><a href=\"#cb254-2\" aria-hidden=\"true\"></a><span class=\"fu\">git</span> annex initremote MyRemote type=rclone --whatelse</span>\n<span id=\"cb254-3\"><a href=\"#cb254-3\" aria-hidden=\"true\"></a></span>\n<span id=\"cb254-4\"><a href=\"#cb254-4\" aria-hidden=\"true\"></a><span class=\"co\"># If you created a symlink in step 1:</span></span>\n<span id=\"cb254-5\"><a href=\"#cb254-5\" aria-hidden=\"true\"></a><span class=\"fu\">git</span> annex initremote MyRemote type=external externaltype=rclone-builtin --whatelse</span></code></pre></div>\n<blockquote>\n<p><strong>NOTE</strong>: If you're porting an existing <a href=\"https://github.com/git-annex-remote-rclone/git-annex-remote-rclone\">git-annex-remote-rclone</a> remote to use <code>rclone gitannex</code>, you can probably reuse the configuration parameters verbatim without renaming them. Check parameter synonyms with <code>--whatelse</code> as shown above.</p>\n</blockquote>\n<p>The following example creates a new git-annex remote named \"MyRemote\" that will use the rclone remote named \"SomeRcloneRemote\". That rclone remote must be one configured in your rclone.conf file, which can be located with <code>rclone config file</code>.</p>\n<div class=\"sourceCode\" id=\"cb255\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb255-1\"><a href=\"#cb255-1\" aria-hidden=\"true\"></a><span class=\"fu\">git</span> annex initremote MyRemote         <span class=\"kw\">\\</span></span>\n<span id=\"cb255-2\"><a href=\"#cb255-2\" aria-hidden=\"true\"></a>    <span class=\"va\">type=</span>external                     <span class=\"kw\">\\</span></span>\n<span id=\"cb255-3\"><a href=\"#cb255-3\" aria-hidden=\"true\"></a>    <span class=\"va\">externaltype=</span>rclone-builtin       <span class=\"kw\">\\</span></span>\n<span id=\"cb255-4\"><a href=\"#cb255-4\" aria-hidden=\"true\"></a>    <span class=\"va\">encryption=</span>none                   <span class=\"kw\">\\</span></span>\n<span id=\"cb255-5\"><a href=\"#cb255-5\" aria-hidden=\"true\"></a>    <span class=\"va\">rcloneremotename=</span>SomeRcloneRemote <span class=\"kw\">\\</span></span>\n<span id=\"cb255-6\"><a href=\"#cb255-6\" aria-hidden=\"true\"></a>    <span class=\"va\">rcloneprefix=</span>git-annex-content    <span class=\"kw\">\\</span></span>\n<span id=\"cb255-7\"><a href=\"#cb255-7\" aria-hidden=\"true\"></a>    <span class=\"va\">rclonelayout=</span>nodir</span></code></pre></div></li>\n<li><p>Before you trust this command with your precious data, be sure to <strong>test the remote</strong>. This command is very new and has not been tested on many rclone backends. Caveat emptor!</p>\n<div class=\"sourceCode\" id=\"cb256\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb256-1\"><a href=\"#cb256-1\" aria-hidden=\"true\"></a><span class=\"fu\">git</span> annex testremote MyRemote</span></code></pre></div></li>\n</ol>\n<p>Happy annexing!</p>\n<pre><code>rclone gitannex [flags]</code></pre>\n<h2 id=\"options-54\">Options</h2>\n<pre><code>  -h, --help   help for gitannex</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-54\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-hashsum\">rclone hashsum</h1>\n<p>Produces a hashsum file for all the objects in the path.</p>\n<h2 id=\"synopsis-47\">Synopsis</h2>\n<p>Produces a hash file for all the objects in the path using the hash named. The output is in the same format as the standard md5sum/sha1sum tool.</p>\n<p>By default, the hash is requested from the remote. If the hash is not supported by the remote, no hash will be returned. With the download flag, the file will be downloaded from the remote and hashed locally enabling any hash for any remote.</p>\n<p>For the MD5 and SHA1 algorithms there are also dedicated commands, <a href=\"https://rclone.org/commands/rclone_md5sum/\">md5sum</a> and <a href=\"https://rclone.org/commands/rclone_sha1sum/\">sha1sum</a>.</p>\n<p>This command can also hash data received on standard input (stdin), by not passing a remote:path, or by passing a hyphen as remote:path when there is data to read (if not, the hyphen will be treated literally, as a relative path).</p>\n<p>Run without a hash to see the list of all supported hashes, e.g.</p>\n<pre><code>$ rclone hashsum\nSupported hashes are:\n  * md5\n  * sha1\n  * whirlpool\n  * crc32\n  * sha256</code></pre>\n<p>Then</p>\n<pre><code>$ rclone hashsum MD5 remote:path</code></pre>\n<p>Note that hash names are case insensitive and values are output in lower case.</p>\n<pre><code>rclone hashsum [&lt;hash&gt; remote:path] [flags]</code></pre>\n<h2 id=\"options-55\">Options</h2>\n<pre><code>      --base64               Output base64 encoded hashsum\n  -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n      --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n  -h, --help                 help for hashsum\n      --output-file string   Output hashsums to a file rather than the terminal</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-16\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-15\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-55\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-link\">rclone link</h1>\n<p>Generate public link to file/folder.</p>\n<h2 id=\"synopsis-48\">Synopsis</h2>\n<p>Create, retrieve or remove a public link to the given file or folder.</p>\n<pre><code>rclone link remote:path/to/file\nrclone link remote:path/to/folder/\nrclone link --unlink remote:path/to/folder/\nrclone link --expire 1d remote:path/to/file</code></pre>\n<p>If you supply the --expire flag, it will set the expiration time otherwise it will use the default (100 years). <strong>Note</strong> not all backends support the --expire flag - if the backend doesn't support it then the link returned won't expire.</p>\n<p>Use the --unlink flag to remove existing public links to the file or folder. <strong>Note</strong> not all backends support \"--unlink\" flag - those that don't will just ignore it.</p>\n<p>If successful, the last line of the output will contain the link. Exact capabilities depend on the remote, but the link will always by default be created with the least constraints – e.g. no expiry, no password protection, accessible without account.</p>\n<pre><code>rclone link remote:path [flags]</code></pre>\n<h2 id=\"options-56\">Options</h2>\n<pre><code>      --expire Duration   The amount of time that the link will be valid (default off)\n  -h, --help              help for link\n      --unlink            Remove existing public link to file/folder</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-56\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-listremotes\">rclone listremotes</h1>\n<p>List all the remotes in the config file and defined in environment variables.</p>\n<h2 id=\"synopsis-49\">Synopsis</h2>\n<p>Lists all the available remotes from the config file, or the remotes matching an optional filter.</p>\n<p>Prints the result in human-readable format by default, and as a simple list of remote names, or if used with flag <code>--long</code> a tabular format including the remote names, types and descriptions. Using flag <code>--json</code> produces machine-readable output instead, which always includes all attributes - including the source (file or environment).</p>\n<p>Result can be filtered by a filter argument which applies to all attributes, and/or filter flags specific for each attribute. The values must be specified according to regular rclone filtering pattern syntax.</p>\n<pre><code>rclone listremotes [&lt;filter&gt;] [flags]</code></pre>\n<h2 id=\"options-57\">Options</h2>\n<pre><code>      --description string   Filter remotes by description\n  -h, --help                 help for listremotes\n      --json                 Format output as JSON\n      --long                 Show type and description in addition to name\n      --name string          Filter remotes by name\n      --order-by string      Instructions on how to order the result, e.g. &#39;type,name=descending&#39;\n      --source string        Filter remotes by source, e.g. &#39;file&#39; or &#39;environment&#39;\n      --type string          Filter remotes by type</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-57\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-lsf\">rclone lsf</h1>\n<p>List directories and objects in remote:path formatted for parsing.</p>\n<h2 id=\"synopsis-50\">Synopsis</h2>\n<p>List the contents of the source path (directories and objects) to standard output in a form which is easy to parse by scripts. By default this will just be the names of the objects and directories, one per line. The directories will have a / suffix.</p>\n<p>Eg</p>\n<pre><code>$ rclone lsf swift:bucket\nbevajer5jef\ncanole\ndiwogej7\nferejej3gux/\nfubuwic</code></pre>\n<p>Use the <code>--format</code> option to control what gets listed. By default this is just the path, but you can use these parameters to control the output:</p>\n<pre><code>p - path\ns - size\nt - modification time\nh - hash\ni - ID of object\no - Original ID of underlying object\nm - MimeType of object if known\ne - encrypted name\nT - tier of storage if known, e.g. &quot;Hot&quot; or &quot;Cool&quot;\nM - Metadata of object in JSON blob format, eg {&quot;key&quot;:&quot;value&quot;}</code></pre>\n<p>So if you wanted the path, size and modification time, you would use <code>--format \"pst\"</code>, or maybe <code>--format \"tsp\"</code> to put the path last.</p>\n<p>Eg</p>\n<pre><code>$ rclone lsf  --format &quot;tsp&quot; swift:bucket\n2016-06-25 18:55:41;60295;bevajer5jef\n2016-06-25 18:55:43;90613;canole\n2016-06-25 18:55:43;94467;diwogej7\n2018-04-26 08:50:45;0;ferejej3gux/\n2016-06-25 18:55:40;37600;fubuwic</code></pre>\n<p>If you specify \"h\" in the format you will get the MD5 hash by default, use the <code>--hash</code> flag to change which hash you want. Note that this can be returned as an empty string if it isn't available on the object (and for directories), \"ERROR\" if there was an error reading it from the object and \"UNSUPPORTED\" if that object does not support that hash type.</p>\n<p>For example, to emulate the md5sum command you can use</p>\n<pre><code>rclone lsf -R --hash MD5 --format hp --separator &quot;  &quot; --files-only .</code></pre>\n<p>Eg</p>\n<pre><code>$ rclone lsf -R --hash MD5 --format hp --separator &quot;  &quot; --files-only swift:bucket\n7908e352297f0f530b84a756f188baa3  bevajer5jef\ncd65ac234e6fea5925974a51cdd865cc  canole\n03b5341b4f234b9d984d03ad076bae91  diwogej7\n8fd37c3810dd660778137ac3a66cc06d  fubuwic\n99713e14a4c4ff553acaf1930fad985b  gixacuh7ku</code></pre>\n<p>(Though \"rclone md5sum .\" is an easier way of typing this.)</p>\n<p>By default the separator is \";\" this can be changed with the <code>--separator</code> flag. Note that separators aren't escaped in the path so putting it last is a good strategy.</p>\n<p>Eg</p>\n<pre><code>$ rclone lsf  --separator &quot;,&quot; --format &quot;tshp&quot; swift:bucket\n2016-06-25 18:55:41,60295,7908e352297f0f530b84a756f188baa3,bevajer5jef\n2016-06-25 18:55:43,90613,cd65ac234e6fea5925974a51cdd865cc,canole\n2016-06-25 18:55:43,94467,03b5341b4f234b9d984d03ad076bae91,diwogej7\n2018-04-26 08:52:53,0,,ferejej3gux/\n2016-06-25 18:55:40,37600,8fd37c3810dd660778137ac3a66cc06d,fubuwic</code></pre>\n<p>You can output in CSV standard format. This will escape things in \" if they contain ,</p>\n<p>Eg</p>\n<pre><code>$ rclone lsf --csv --files-only --format ps remote:path\ntest.log,22355\ntest.sh,449\n&quot;this file contains a comma, in the file name.txt&quot;,6</code></pre>\n<p>Note that the <code>--absolute</code> parameter is useful for making lists of files to pass to an rclone copy with the <code>--files-from-raw</code> flag.</p>\n<p>For example, to find all the files modified within one day and copy those only (without traversing the whole directory structure):</p>\n<pre><code>rclone lsf --absolute --files-only --max-age 1d /path/to/local &gt; new_files\nrclone copy --files-from-raw new_files /path/to/local remote:path</code></pre>\n<p>The default time format is <code>'2006-01-02 15:04:05'</code>. <a href=\"https://pkg.go.dev/time#pkg-constants\">Other formats</a> can be specified with the <code>--time-format</code> flag. Examples:</p>\n<pre><code>rclone lsf remote:path --format pt --time-format &#39;Jan 2, 2006 at 3:04pm (MST)&#39;\nrclone lsf remote:path --format pt --time-format &#39;2006-01-02 15:04:05.000000000&#39;\nrclone lsf remote:path --format pt --time-format &#39;2006-01-02T15:04:05.999999999Z07:00&#39;\nrclone lsf remote:path --format pt --time-format RFC3339\nrclone lsf remote:path --format pt --time-format DateOnly\nrclone lsf remote:path --format pt --time-format max</code></pre>\n<p><code>--time-format max</code> will automatically truncate '<code>2006-01-02 15:04:05.000000000</code>' to the maximum precision supported by the remote.</p>\n<p>Any of the filtering options can be applied to this command.</p>\n<p>There are several related list commands</p>\n<ul>\n<li><code>ls</code> to list size and path of objects only</li>\n<li><code>lsl</code> to list modification time, size and path of objects only</li>\n<li><code>lsd</code> to list directories only</li>\n<li><code>lsf</code> to list objects and directories in easy to parse format</li>\n<li><code>lsjson</code> to list objects and directories in JSON format</li>\n</ul>\n<p><code>ls</code>,<code>lsl</code>,<code>lsd</code> are designed to be human-readable. <code>lsf</code> is designed to be human and machine-readable. <code>lsjson</code> is designed to be machine-readable.</p>\n<p>Note that <code>ls</code> and <code>lsl</code> recurse by default - use <code>--max-depth 1</code> to stop the recursion.</p>\n<p>The other list commands <code>lsd</code>,<code>lsf</code>,<code>lsjson</code> do not recurse by default - use <code>-R</code> to make them recurse.</p>\n<p>Listing a nonexistent directory will produce an error except for remotes which can't have empty directories (e.g. s3, swift, or gcs - the bucket-based remotes).</p>\n<pre><code>rclone lsf remote:path [flags]</code></pre>\n<h2 id=\"options-58\">Options</h2>\n<pre><code>      --absolute             Put a leading / in front of path names\n      --csv                  Output in CSV format\n  -d, --dir-slash            Append a slash to directory names (default true)\n      --dirs-only            Only list directories\n      --files-only           Only list files\n  -F, --format string        Output format - see  help for details (default &quot;p&quot;)\n      --hash h               Use this hash when h is used in the format MD5|SHA-1|DropboxHash (default &quot;md5&quot;)\n  -h, --help                 help for lsf\n  -R, --recursive            Recurse into the listing\n  -s, --separator string     Separator for the items in the format (default &quot;;&quot;)\n  -t, --time-format string   Specify a custom time format, or &#39;max&#39; for max precision supported by remote (default: 2006-01-02 15:04:05)</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-17\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-16\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-58\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-lsjson\">rclone lsjson</h1>\n<p>List directories and objects in the path in JSON format.</p>\n<h2 id=\"synopsis-51\">Synopsis</h2>\n<p>List directories and objects in the path in JSON format.</p>\n<p>The output is an array of Items, where each Item looks like this:</p>\n<pre><code>{\n  &quot;Hashes&quot; : {\n     &quot;SHA-1&quot; : &quot;f572d396fae9206628714fb2ce00f72e94f2258f&quot;,\n     &quot;MD5&quot; : &quot;b1946ac92492d2347c6235b4d2611184&quot;,\n     &quot;DropboxHash&quot; : &quot;ecb65bb98f9d905b70458986c39fcbad7715e5f2fcc3b1f07767d7c83e2438cc&quot;\n  },\n  &quot;ID&quot;: &quot;y2djkhiujf83u33&quot;,\n  &quot;OrigID&quot;: &quot;UYOJVTUW00Q1RzTDA&quot;,\n  &quot;IsBucket&quot; : false,\n  &quot;IsDir&quot; : false,\n  &quot;MimeType&quot; : &quot;application/octet-stream&quot;,\n  &quot;ModTime&quot; : &quot;2017-05-31T16:15:57.034468261+01:00&quot;,\n  &quot;Name&quot; : &quot;file.txt&quot;,\n  &quot;Encrypted&quot; : &quot;v0qpsdq8anpci8n929v3uu9338&quot;,\n  &quot;EncryptedPath&quot; : &quot;kja9098349023498/v0qpsdq8anpci8n929v3uu9338&quot;,\n  &quot;Path&quot; : &quot;full/path/goes/here/file.txt&quot;,\n  &quot;Size&quot; : 6,\n  &quot;Tier&quot; : &quot;hot&quot;,\n}</code></pre>\n<p>The exact set of properties included depends on the backend:</p>\n<ul>\n<li>The property IsBucket will only be included for bucket-based remotes, and only for directories that are buckets. It will always be omitted when value is not true.</li>\n<li>Properties Encrypted and EncryptedPath will only be included for encrypted remotes, and (as mentioned below) only if the <code>--encrypted</code> option is set.</li>\n</ul>\n<p>Different options may also affect which properties are included:</p>\n<ul>\n<li>If <code>--hash</code> is not specified, the Hashes property will be omitted. The types of hash can be specified with the <code>--hash-type</code> parameter (which may be repeated). If <code>--hash-type</code> is set then it implies <code>--hash</code>.</li>\n<li>If <code>--no-modtime</code> is specified then ModTime will be blank. This can speed things up on remotes where reading the ModTime takes an extra request (e.g. s3, swift).</li>\n<li>If <code>--no-mimetype</code> is specified then MimeType will be blank. This can speed things up on remotes where reading the MimeType takes an extra request (e.g. s3, swift).</li>\n<li>If <code>--encrypted</code> is not specified the Encrypted and EncryptedPath properties will be omitted - even for encrypted remotes.</li>\n<li>If <code>--metadata</code> is set then an additional Metadata property will be returned. This will have <a href=\"https://rclone.org/docs/#metadata\">metadata</a> in rclone standard format as a JSON object.</li>\n</ul>\n<p>The default is to list directories and files/objects, but this can be changed with the following options:</p>\n<ul>\n<li>If <code>--dirs-only</code> is specified then directories will be returned only, no files/objects.</li>\n<li>If <code>--files-only</code> is specified then files will be returned only, no directories.</li>\n</ul>\n<p>If <code>--stat</code> is set then the the output is not an array of items, but instead a single JSON blob will be returned about the item pointed to. This will return an error if the item isn't found, however on bucket based backends (like s3, gcs, b2, azureblob etc) if the item isn't found it will return an empty directory, as it isn't possible to tell empty directories from missing directories there.</p>\n<p>The Path field will only show folders below the remote path being listed. If \"remote:path\" contains the file \"subfolder/file.txt\", the Path for \"file.txt\" will be \"subfolder/file.txt\", not \"remote:path/subfolder/file.txt\". When used without <code>--recursive</code> the Path will always be the same as Name.</p>\n<p>The time is in RFC3339 format with up to nanosecond precision. The number of decimal digits in the seconds will depend on the precision that the remote can hold the times, so if times are accurate to the nearest millisecond (e.g. Google Drive) then 3 digits will always be shown (\"2017-05-31T16:15:57.034+01:00\") whereas if the times are accurate to the nearest second (Dropbox, Box, WebDav, etc.) no digits will be shown (\"2017-05-31T16:15:57+01:00\").</p>\n<p>The whole output can be processed as a JSON blob, or alternatively it can be processed line by line as each item is written on individual lines (except with <code>--stat</code>).</p>\n<p>Any of the filtering options can be applied to this command.</p>\n<p>There are several related list commands</p>\n<ul>\n<li><code>ls</code> to list size and path of objects only</li>\n<li><code>lsl</code> to list modification time, size and path of objects only</li>\n<li><code>lsd</code> to list directories only</li>\n<li><code>lsf</code> to list objects and directories in easy to parse format</li>\n<li><code>lsjson</code> to list objects and directories in JSON format</li>\n</ul>\n<p><code>ls</code>,<code>lsl</code>,<code>lsd</code> are designed to be human-readable. <code>lsf</code> is designed to be human and machine-readable. <code>lsjson</code> is designed to be machine-readable.</p>\n<p>Note that <code>ls</code> and <code>lsl</code> recurse by default - use <code>--max-depth 1</code> to stop the recursion.</p>\n<p>The other list commands <code>lsd</code>,<code>lsf</code>,<code>lsjson</code> do not recurse by default - use <code>-R</code> to make them recurse.</p>\n<p>Listing a nonexistent directory will produce an error except for remotes which can't have empty directories (e.g. s3, swift, or gcs - the bucket-based remotes).</p>\n<pre><code>rclone lsjson remote:path [flags]</code></pre>\n<h2 id=\"options-59\">Options</h2>\n<pre><code>      --dirs-only               Show only directories in the listing\n      --encrypted               Show the encrypted names\n      --files-only              Show only files in the listing\n      --hash                    Include hashes in the output (may take longer)\n      --hash-type stringArray   Show only this hash type (may be repeated)\n  -h, --help                    help for lsjson\n  -M, --metadata                Add metadata to the listing\n      --no-mimetype             Don&#39;t read the mime type (can speed things up)\n      --no-modtime              Don&#39;t read the modification time (can speed things up)\n      --original                Show the ID of the underlying Object\n  -R, --recursive               Recurse into the listing\n      --stat                    Just return the info for the pointed to file</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-18\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-17\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-59\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-mount\">rclone mount</h1>\n<p>Mount the remote as file system on a mountpoint.</p>\n<h2 id=\"synopsis-52\">Synopsis</h2>\n<p>Rclone mount allows Linux, FreeBSD, macOS and Windows to mount any of Rclone's cloud storage systems as a file system with FUSE.</p>\n<p>First set up your remote using <code>rclone config</code>. Check it works with <code>rclone ls</code> etc.</p>\n<p>On Linux and macOS, you can run mount in either foreground or background (aka daemon) mode. Mount runs in foreground mode by default. Use the <code>--daemon</code> flag to force background mode. On Windows you can run mount in foreground only, the flag is ignored.</p>\n<p>In background mode rclone acts as a generic Unix mount program: the main program starts, spawns background rclone process to setup and maintain the mount, waits until success or timeout and exits with appropriate code (killing the child process if it fails).</p>\n<p>On Linux/macOS/FreeBSD start the mount like this, where <code>/path/to/local/mount</code> is an <strong>empty</strong> <strong>existing</strong> directory:</p>\n<pre><code>rclone mount remote:path/to/files /path/to/local/mount</code></pre>\n<p>On Windows you can start a mount in different ways. See <a href=\"#mounting-modes-on-windows\">below</a> for details. If foreground mount is used interactively from a console window, rclone will serve the mount and occupy the console so another window should be used to work with the mount until rclone is interrupted e.g. by pressing Ctrl-C.</p>\n<p>The following examples will mount to an automatically assigned drive, to specific drive letter <code>X:</code>, to path <code>C:\\path\\parent\\mount</code> (where parent directory or drive must exist, and mount must <strong>not</strong> exist, and is not supported when <a href=\"#mounting-modes-on-windows\">mounting as a network drive</a>), and the last example will mount as network share <code>\\\\cloud\\remote</code> and map it to an automatically assigned drive:</p>\n<pre><code>rclone mount remote:path/to/files *\nrclone mount remote:path/to/files X:\nrclone mount remote:path/to/files C:\\path\\parent\\mount\nrclone mount remote:path/to/files \\\\cloud\\remote</code></pre>\n<p>When the program ends while in foreground mode, either via Ctrl+C or receiving a SIGINT or SIGTERM signal, the mount should be automatically stopped.</p>\n<p>When running in background mode the user will have to stop the mount manually:</p>\n<pre><code># Linux\nfusermount -u /path/to/local/mount\n# OS X\numount /path/to/local/mount</code></pre>\n<p>The umount operation can fail, for example when the mountpoint is busy. When that happens, it is the user's responsibility to stop the mount manually.</p>\n<p>The size of the mounted file system will be set according to information retrieved from the remote, the same as returned by the <a href=\"https://rclone.org/commands/rclone_about/\">rclone about</a> command. Remotes with unlimited storage may report the used size only, then an additional 1 PiB of free space is assumed. If the remote does not <a href=\"https://rclone.org/overview/#optional-features\">support</a> the about feature at all, then 1 PiB is set as both the total and the free size.</p>\n<h2 id=\"installing-on-windows\">Installing on Windows</h2>\n<p>To run rclone mount on Windows, you will need to download and install <a href=\"http://www.secfs.net/winfsp/\">WinFsp</a>.</p>\n<p><a href=\"https://github.com/winfsp/winfsp\">WinFsp</a> is an open-source Windows File System Proxy which makes it easy to write user space file systems for Windows. It provides a FUSE emulation layer which rclone uses combination with <a href=\"https://github.com/winfsp/cgofuse\">cgofuse</a>. Both of these packages are by Bill Zissimopoulos who was very helpful during the implementation of rclone mount for Windows.</p>\n<h3 id=\"mounting-modes-on-windows\">Mounting modes on windows</h3>\n<p>Unlike other operating systems, Microsoft Windows provides a different filesystem type for network and fixed drives. It optimises access on the assumption fixed disk drives are fast and reliable, while network drives have relatively high latency and less reliability. Some settings can also be differentiated between the two types, for example that Windows Explorer should just display icons and not create preview thumbnails for image and video files on network drives.</p>\n<p>In most cases, rclone will mount the remote as a normal, fixed disk drive by default. However, you can also choose to mount it as a remote network drive, often described as a network share. If you mount an rclone remote using the default, fixed drive mode and experience unexpected program errors, freezes or other issues, consider mounting as a network drive instead.</p>\n<p>When mounting as a fixed disk drive you can either mount to an unused drive letter, or to a path representing a <strong>nonexistent</strong> subdirectory of an <strong>existing</strong> parent directory or drive. Using the special value <code>*</code> will tell rclone to automatically assign the next available drive letter, starting with Z: and moving backward. Examples:</p>\n<pre><code>rclone mount remote:path/to/files *\nrclone mount remote:path/to/files X:\nrclone mount remote:path/to/files C:\\path\\parent\\mount\nrclone mount remote:path/to/files X:</code></pre>\n<p>Option <code>--volname</code> can be used to set a custom volume name for the mounted file system. The default is to use the remote name and path.</p>\n<p>To mount as network drive, you can add option <code>--network-mode</code> to your mount command. Mounting to a directory path is not supported in this mode, it is a limitation Windows imposes on junctions, so the remote must always be mounted to a drive letter.</p>\n<pre><code>rclone mount remote:path/to/files X: --network-mode</code></pre>\n<p>A volume name specified with <code>--volname</code> will be used to create the network share path. A complete UNC path, such as <code>\\\\cloud\\remote</code>, optionally with path <code>\\\\cloud\\remote\\madeup\\path</code>, will be used as is. Any other string will be used as the share part, after a default prefix <code>\\\\server\\</code>. If no volume name is specified then <code>\\\\server\\share</code> will be used. You must make sure the volume name is unique when you are mounting more than one drive, or else the mount command will fail. The share name will treated as the volume label for the mapped drive, shown in Windows Explorer etc, while the complete <code>\\\\server\\share</code> will be reported as the remote UNC path by <code>net use</code> etc, just like a normal network drive mapping.</p>\n<p>If you specify a full network share UNC path with <code>--volname</code>, this will implicitly set the <code>--network-mode</code> option, so the following two examples have same result:</p>\n<pre><code>rclone mount remote:path/to/files X: --network-mode\nrclone mount remote:path/to/files X: --volname \\\\server\\share</code></pre>\n<p>You may also specify the network share UNC path as the mountpoint itself. Then rclone will automatically assign a drive letter, same as with <code>*</code> and use that as mountpoint, and instead use the UNC path specified as the volume name, as if it were specified with the <code>--volname</code> option. This will also implicitly set the <code>--network-mode</code> option. This means the following two examples have same result:</p>\n<pre><code>rclone mount remote:path/to/files \\\\cloud\\remote\nrclone mount remote:path/to/files * --volname \\\\cloud\\remote</code></pre>\n<p>There is yet another way to enable network mode, and to set the share path, and that is to pass the \"native\" libfuse/WinFsp option directly: <code>--fuse-flag --VolumePrefix=\\server\\share</code>. Note that the path must be with just a single backslash prefix in this case.</p>\n<p><em>Note:</em> In previous versions of rclone this was the only supported method.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Drive_mapping\">Read more about drive mapping</a></p>\n<p>See also <a href=\"#limitations\">Limitations</a> section below.</p>\n<h3 id=\"windows-filesystem-permissions\">Windows filesystem permissions</h3>\n<p>The FUSE emulation layer on Windows must convert between the POSIX-based permission model used in FUSE, and the permission model used in Windows, based on access-control lists (ACL).</p>\n<p>The mounted filesystem will normally get three entries in its access-control list (ACL), representing permissions for the POSIX permission scopes: Owner, group and others. By default, the owner and group will be taken from the current user, and the built-in group \"Everyone\" will be used to represent others. The user/group can be customized with FUSE options \"UserName\" and \"GroupName\", e.g. <code>-o UserName=user123 -o GroupName=\"Authenticated Users\"</code>. The permissions on each entry will be set according to <a href=\"#options\">options</a> <code>--dir-perms</code> and <code>--file-perms</code>, which takes a value in traditional Unix <a href=\"https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation\">numeric notation</a>.</p>\n<p>The default permissions corresponds to <code>--file-perms 0666 --dir-perms 0777</code>, i.e. read and write permissions to everyone. This means you will not be able to start any programs from the mount. To be able to do that you must add execute permissions, e.g. <code>--file-perms 0777 --dir-perms 0777</code> to add it to everyone. If the program needs to write files, chances are you will have to enable <a href=\"#vfs-file-caching\">VFS File Caching</a> as well (see also <a href=\"#limitations\">limitations</a>). Note that the default write permission have some restrictions for accounts other than the owner, specifically it lacks the \"write extended attributes\", as explained next.</p>\n<p>The mapping of permissions is not always trivial, and the result you see in Windows Explorer may not be exactly like you expected. For example, when setting a value that includes write access for the group or others scope, this will be mapped to individual permissions \"write attributes\", \"write data\" and \"append data\", but not \"write extended attributes\". Windows will then show this as basic permission \"Special\" instead of \"Write\", because \"Write\" also covers the \"write extended attributes\" permission. When setting digit 0 for group or others, to indicate no permissions, they will still get individual permissions \"read attributes\", \"read extended attributes\" and \"read permissions\". This is done for compatibility reasons, e.g. to allow users without additional permissions to be able to read basic metadata about files like in Unix.</p>\n<p>WinFsp 2021 (version 1.9) introduced a new FUSE option \"FileSecurity\", that allows the complete specification of file security descriptors using <a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format\">SDDL</a>. With this you get detailed control of the resulting permissions, compared to use of the POSIX permissions described above, and no additional permissions will be added automatically for compatibility with Unix. Some example use cases will following.</p>\n<p>If you set POSIX permissions for only allowing access to the owner, using <code>--file-perms 0600 --dir-perms 0700</code>, the user group and the built-in \"Everyone\" group will still be given some special permissions, as described above. Some programs may then (incorrectly) interpret this as the file being accessible by everyone, for example an SSH client may warn about \"unprotected private key file\". You can work around this by specifying <code>-o FileSecurity=\"D:P(A;;FA;;;OW)\"</code>, which sets file all access (FA) to the owner (OW), and nothing else.</p>\n<p>When setting write permissions then, except for the owner, this does not include the \"write extended attributes\" permission, as mentioned above. This may prevent applications from writing to files, giving permission denied error instead. To set working write permissions for the built-in \"Everyone\" group, similar to what it gets by default but with the addition of the \"write extended attributes\", you can specify <code>-o FileSecurity=\"D:P(A;;FRFW;;;WD)\"</code>, which sets file read (FR) and file write (FW) to everyone (WD). If file execute (FX) is also needed, then change to <code>-o FileSecurity=\"D:P(A;;FRFWFX;;;WD)\"</code>, or set file all access (FA) to get full access permissions, including delete, with <code>-o FileSecurity=\"D:P(A;;FA;;;WD)\"</code>.</p>\n<h3 id=\"windows-caveats\">Windows caveats</h3>\n<p>Drives created as Administrator are not visible to other accounts, not even an account that was elevated to Administrator with the User Account Control (UAC) feature. A result of this is that if you mount to a drive letter from a Command Prompt run as Administrator, and then try to access the same drive from Windows Explorer (which does not run as Administrator), you will not be able to see the mounted drive.</p>\n<p>If you don't need to access the drive from applications running with administrative privileges, the easiest way around this is to always create the mount from a non-elevated command prompt.</p>\n<p>To make mapped drives available to the user account that created them regardless if elevated or not, there is a special Windows setting called <a href=\"https://docs.microsoft.com/en-us/troubleshoot/windows-client/networking/mapped-drives-not-available-from-elevated-command#detail-to-configure-the-enablelinkedconnections-registry-entry\">linked connections</a> that can be enabled.</p>\n<p>It is also possible to make a drive mount available to everyone on the system, by running the process creating it as the built-in SYSTEM account. There are several ways to do this: One is to use the command-line utility <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/psexec\">PsExec</a>, from Microsoft's Sysinternals suite, which has option <code>-s</code> to start processes as the SYSTEM account. Another alternative is to run the mount command from a Windows Scheduled Task, or a Windows Service, configured to run as the SYSTEM account. A third alternative is to use the <a href=\"https://github.com/winfsp/winfsp/wiki/WinFsp-Service-Architecture\">WinFsp.Launcher infrastructure</a>). Read more in the <a href=\"https://rclone.org/install/\">install documentation</a>. Note that when running rclone as another user, it will not use the configuration file from your profile unless you tell it to with the <a href=\"https://rclone.org/docs/#config-config-file\"><code>--config</code></a> option. Note also that it is now the SYSTEM account that will have the owner permissions, and other accounts will have permissions according to the group or others scopes. As mentioned above, these will then not get the \"write extended attributes\" permission, and this may prevent writing to files. You can work around this with the FileSecurity option, see example above.</p>\n<p>Note that mapping to a directory path, instead of a drive letter, does not suffer from the same limitations.</p>\n<h2 id=\"mounting-on-macos\">Mounting on macOS</h2>\n<p>Mounting on macOS can be done either via <a href=\"https://rclone.org/commands/rclone_serve_nfs/\">built-in NFS server</a>, <a href=\"https://osxfuse.github.io/\">macFUSE</a> (also known as osxfuse) or <a href=\"https://www.fuse-t.org/\">FUSE-T</a>. macFUSE is a traditional FUSE driver utilizing a macOS kernel extension (kext). FUSE-T is an alternative FUSE system which \"mounts\" via an NFSv4 local server.</p>\n<h4 id=\"unicode-normalization\">Unicode Normalization</h4>\n<p>It is highly recommended to keep the default of <code>--no-unicode-normalization=false</code> for all <code>mount</code> and <code>serve</code> commands on macOS. For details, see <a href=\"https://rclone.org/commands/rclone_mount/#vfs-case-sensitivity\">vfs-case-sensitivity</a>.</p>\n<h3 id=\"nfs-mount\">NFS mount</h3>\n<p>This method spins up an NFS server using <a href=\"https://rclone.org/commands/rclone_serve_nfs/\">serve nfs</a> command and mounts it to the specified mountpoint. If you run this in background mode using |--daemon|, you will need to send SIGTERM signal to the rclone process using |kill| command to stop the mount.</p>\n<p>Note that <code>--nfs-cache-handle-limit</code> controls the maximum number of cached file handles stored by the <code>nfsmount</code> caching handler. This should not be set too low or you may experience errors when trying to access files. The default is 1000000, but consider lowering this limit if the server's system resource usage causes problems.</p>\n<h3 id=\"macfuse-notes\">macFUSE Notes</h3>\n<p>If installing macFUSE using <a href=\"https://github.com/osxfuse/osxfuse/releases\">dmg packages</a> from the website, rclone will locate the macFUSE libraries without any further intervention. If however, macFUSE is installed using the <a href=\"https://www.macports.org/\">macports</a> package manager, the following addition steps are required.</p>\n<pre><code>sudo mkdir /usr/local/lib\ncd /usr/local/lib\nsudo ln -s /opt/local/lib/libfuse.2.dylib</code></pre>\n<h3 id=\"fuse-t-limitations-caveats-and-notes\">FUSE-T Limitations, Caveats, and Notes</h3>\n<p>There are some limitations, caveats, and notes about how it works. These are current as of FUSE-T version 1.0.14.</p>\n<h4 id=\"modtime-update-on-read\">ModTime update on read</h4>\n<p>As per the <a href=\"https://github.com/macos-fuse-t/fuse-t/wiki#caveats\">FUSE-T wiki</a>:</p>\n<blockquote>\n<p>File access and modification times cannot be set separately as it seems to be an issue with the NFS client which always modifies both. Can be reproduced with 'touch -m' and 'touch -a' commands</p>\n</blockquote>\n<p>This means that viewing files with various tools, notably macOS Finder, will cause rlcone to update the modification time of the file. This may make rclone upload a full new copy of the file.</p>\n<h4 id=\"read-only-mounts\">Read Only mounts</h4>\n<p>When mounting with <code>--read-only</code>, attempts to write to files will fail <em>silently</em> as opposed to with a clear warning as in macFUSE.</p>\n<h2 id=\"limitations\">Limitations</h2>\n<p>Without the use of <code>--vfs-cache-mode</code> this can only write files sequentially, it can only seek when reading. This means that many applications won't work with their files on an rclone mount without <code>--vfs-cache-mode writes</code> or <code>--vfs-cache-mode full</code>. See the <a href=\"#vfs-file-caching\">VFS File Caching</a> section for more info. When using NFS mount on macOS, if you don't specify |--vfs-cache-mode| the mount point will be read-only.</p>\n<p>The bucket-based remotes (e.g. Swift, S3, Google Compute Storage, B2) do not support the concept of empty directories, so empty directories will have a tendency to disappear once they fall out of the directory cache.</p>\n<p>When <code>rclone mount</code> is invoked on Unix with <code>--daemon</code> flag, the main rclone program will wait for the background mount to become ready or until the timeout specified by the <code>--daemon-wait</code> flag. On Linux it can check mount status using ProcFS so the flag in fact sets <strong>maximum</strong> time to wait, while the real wait can be less. On macOS / BSD the time to wait is constant and the check is performed only at the end. We advise you to set wait time on macOS reasonably.</p>\n<p>Only supported on Linux, FreeBSD, OS X and Windows at the moment.</p>\n<h2 id=\"rclone-mount-vs-rclone-synccopy\">rclone mount vs rclone sync/copy</h2>\n<p>File systems expect things to be 100% reliable, whereas cloud storage systems are a long way from 100% reliable. The rclone sync/copy commands cope with this with lots of retries. However rclone mount can't use retries in the same way without making local copies of the uploads. Look at the <a href=\"#vfs-file-caching\">VFS File Caching</a> for solutions to make mount more reliable.</p>\n<h2 id=\"attribute-caching\">Attribute caching</h2>\n<p>You can use the flag <code>--attr-timeout</code> to set the time the kernel caches the attributes (size, modification time, etc.) for directory entries.</p>\n<p>The default is <code>1s</code> which caches files just long enough to avoid too many callbacks to rclone from the kernel.</p>\n<p>In theory 0s should be the correct value for filesystems which can change outside the control of the kernel. However this causes quite a few problems such as <a href=\"https://github.com/rclone/rclone/issues/2157\">rclone using too much memory</a>, <a href=\"https://forum.rclone.org/t/rclone-1-39-vs-1-40-mount-issue/5112\">rclone not serving files to samba</a> and <a href=\"https://github.com/rclone/rclone/issues/2095#issuecomment-371141147\">excessive time listing directories</a>.</p>\n<p>The kernel can cache the info about a file for the time given by <code>--attr-timeout</code>. You may see corruption if the remote file changes length during this window. It will show up as either a truncated file or a file with garbage on the end. With <code>--attr-timeout 1s</code> this is very unlikely but not impossible. The higher you set <code>--attr-timeout</code> the more likely it is. The default setting of \"1s\" is the lowest setting which mitigates the problems above.</p>\n<p>If you set it higher (<code>10s</code> or <code>1m</code> say) then the kernel will call back to rclone less often making it more efficient, however there is more chance of the corruption issue above.</p>\n<p>If files don't change on the remote outside of the control of rclone then there is no chance of corruption.</p>\n<p>This is the same as setting the attr_timeout option in mount.fuse.</p>\n<h2 id=\"filters\">Filters</h2>\n<p>Note that all the rclone filters can be used to select a subset of the files to be visible in the mount.</p>\n<h2 id=\"systemd\">systemd</h2>\n<p>When running rclone mount as a systemd service, it is possible to use Type=notify. In this case the service will enter the started state after the mountpoint has been successfully set up. Units having the rclone mount service specified as a requirement will see all files and folders immediately in this mode.</p>\n<p>Note that systemd runs mount units without any environment variables including <code>PATH</code> or <code>HOME</code>. This means that tilde (<code>~</code>) expansion will not work and you should provide <code>--config</code> and <code>--cache-dir</code> explicitly as absolute paths via rclone arguments. Since mounting requires the <code>fusermount</code> program, rclone will use the fallback PATH of <code>/bin:/usr/bin</code> in this scenario. Please ensure that <code>fusermount</code> is present on this PATH.</p>\n<h2 id=\"rclone-as-unix-mount-helper\">Rclone as Unix mount helper</h2>\n<p>The core Unix program <code>/bin/mount</code> normally takes the <code>-t FSTYPE</code> argument then runs the <code>/sbin/mount.FSTYPE</code> helper program passing it mount options as <code>-o key=val,...</code> or <code>--opt=...</code>. Automount (classic or systemd) behaves in a similar way.</p>\n<p>rclone by default expects GNU-style flags <code>--key val</code>. To run it as a mount helper you should symlink rclone binary to <code>/sbin/mount.rclone</code> and optionally <code>/usr/bin/rclonefs</code>, e.g. <code>ln -s /usr/bin/rclone /sbin/mount.rclone</code>. rclone will detect it and translate command-line arguments appropriately.</p>\n<p>Now you can run classic mounts like this:</p>\n<pre><code>mount sftp1:subdir /mnt/data -t rclone -o vfs_cache_mode=writes,sftp_key_file=/path/to/pem</code></pre>\n<p>or create systemd mount units:</p>\n<pre><code># /etc/systemd/system/mnt-data.mount\n[Unit]\nDescription=Mount for /mnt/data\n[Mount]\nType=rclone\nWhat=sftp1:subdir\nWhere=/mnt/data\nOptions=rw,_netdev,allow_other,args2env,vfs-cache-mode=writes,config=/etc/rclone.conf,cache-dir=/var/rclone</code></pre>\n<p>optionally accompanied by systemd automount unit</p>\n<pre><code># /etc/systemd/system/mnt-data.automount\n[Unit]\nDescription=AutoMount for /mnt/data\n[Automount]\nWhere=/mnt/data\nTimeoutIdleSec=600\n[Install]\nWantedBy=multi-user.target</code></pre>\n<p>or add in <code>/etc/fstab</code> a line like</p>\n<pre><code>sftp1:subdir /mnt/data rclone rw,noauto,nofail,_netdev,x-systemd.automount,args2env,vfs_cache_mode=writes,config=/etc/rclone.conf,cache_dir=/var/cache/rclone 0 0</code></pre>\n<p>or use classic Automountd. Remember to provide explicit <code>config=...,cache-dir=...</code> as a workaround for mount units being run without <code>HOME</code>.</p>\n<p>Rclone in the mount helper mode will split <code>-o</code> argument(s) by comma, replace <code>_</code> by <code>-</code> and prepend <code>--</code> to get the command-line flags. Options containing commas or spaces can be wrapped in single or double quotes. Any inner quotes inside outer quotes of the same type should be doubled.</p>\n<p>Mount option syntax includes a few extra options treated specially:</p>\n<ul>\n<li><code>env.NAME=VALUE</code> will set an environment variable for the mount process. This helps with Automountd and Systemd.mount which don't allow setting custom environment for mount helpers. Typically you will use <code>env.HTTPS_PROXY=proxy.host:3128</code> or <code>env.HOME=/root</code></li>\n<li><code>command=cmount</code> can be used to run <code>cmount</code> or any other rclone command rather than the default <code>mount</code>.</li>\n<li><code>args2env</code> will pass mount options to the mount helper running in background via environment variables instead of command line arguments. This allows to hide secrets from such commands as <code>ps</code> or <code>pgrep</code>.</li>\n<li><code>vv...</code> will be transformed into appropriate <code>--verbose=N</code></li>\n<li>standard mount options like <code>x-systemd.automount</code>, <code>_netdev</code>, <code>nosuid</code> and alike are intended only for Automountd and ignored by rclone.</li>\n</ul>\n<h2 id=\"vfs---virtual-file-system\">VFS - Virtual File System</h2>\n<p>This command uses the VFS layer. This adapts the cloud storage objects that rclone uses into something which looks much more like a disk filing system.</p>\n<p>Cloud storage objects have lots of properties which aren't like disk files - you can't extend them or write to the middle of them, so the VFS layer has to deal with that. Because there is no one right way of doing this there are various options explained below.</p>\n<p>The VFS layer also implements a directory cache - this caches info about files and directories (but not the data) in memory.</p>\n<h2 id=\"vfs-directory-cache\">VFS Directory Cache</h2>\n<p>Using the <code>--dir-cache-time</code> flag, you can control how long a directory should be considered up to date and not refreshed from the backend. Changes made through the VFS will appear immediately or invalidate the cache.</p>\n<pre><code>--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)</code></pre>\n<p>However, changes made directly on the cloud storage by the web interface or a different copy of rclone will only be picked up once the directory cache expires if the backend configured does not support polling for changes. If the backend supports polling, changes will be picked up within the polling interval.</p>\n<p>You can send a <code>SIGHUP</code> signal to rclone for it to flush all directory caches, regardless of how old they are. Assuming only one rclone instance is running, you can reset the cache like this:</p>\n<pre><code>kill -SIGHUP $(pidof rclone)</code></pre>\n<p>If you configure rclone with a <a href=\"/rc\">remote control</a> then you can use rclone rc to flush the whole directory cache:</p>\n<pre><code>rclone rc vfs/forget</code></pre>\n<p>Or individual files or directories:</p>\n<pre><code>rclone rc vfs/forget file=path/to/file dir=path/to/dir</code></pre>\n<h2 id=\"vfs-file-buffering\">VFS File Buffering</h2>\n<p>The <code>--buffer-size</code> flag determines the amount of memory, that will be used to buffer data in advance.</p>\n<p>Each open file will try to keep the specified amount of data in memory at all times. The buffered data is bound to one open file and won't be shared.</p>\n<p>This flag is a upper limit for the used memory per open file. The buffer will only use memory for data that is downloaded but not not yet read. If the buffer is empty, only a small amount of memory will be used.</p>\n<p>The maximum memory used by rclone for buffering can be up to <code>--buffer-size * open files</code>.</p>\n<h2 id=\"vfs-file-caching\">VFS File Caching</h2>\n<p>These flags control the VFS file caching options. File caching is necessary to make the VFS layer appear compatible with a normal file system. It can be disabled at the cost of some compatibility.</p>\n<p>For example you'll need to enable VFS caching if you want to read and write simultaneously to a file. See below for more details.</p>\n<p>Note that the VFS cache is separate from the cache backend and you may find that you need one or the other or both.</p>\n<pre><code>--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)</code></pre>\n<p>If run with <code>-vv</code> rclone will print the location of the file cache. The files are stored in the user cache file area which is OS dependent but can be controlled with <code>--cache-dir</code> or setting the appropriate environment variable.</p>\n<p>The cache has 4 different modes selected by <code>--vfs-cache-mode</code>. The higher the cache mode the more compatible rclone becomes at the cost of using disk space.</p>\n<p>Note that files are written back to the remote only when they are closed and if they haven't been accessed for <code>--vfs-write-back</code> seconds. If rclone is quit or dies with files that haven't been uploaded, these will be uploaded next time rclone is run with the same flags.</p>\n<p>If using <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> note that the cache may exceed these quotas for two reasons. Firstly because it is only checked every <code>--vfs-cache-poll-interval</code>. Secondly because open files cannot be evicted from the cache. When <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> is exceeded, rclone will attempt to evict the least accessed files from the cache first. rclone will start with files that haven't been accessed for the longest. This cache flushing strategy is efficient and more relevant files are likely to remain cached.</p>\n<p>The <code>--vfs-cache-max-age</code> will evict files from the cache after the set time since last access has passed. The default value of 1 hour will start evicting files from cache that haven't been accessed for 1 hour. When a cached file is accessed the 1 hour timer is reset to 0 and will wait for 1 more hour before evicting. Specify the time with standard notation, s, m, h, d, w .</p>\n<p>You <strong>should not</strong> run two copies of rclone using the same VFS cache with the same or overlapping remotes if using <code>--vfs-cache-mode &gt; off</code>. This can potentially cause data corruption if you do. You can work around this by giving each rclone its own cache hierarchy with <code>--cache-dir</code>. You don't need to worry about this if the remotes in use don't overlap.</p>\n<h3 id=\"vfs-cache-mode-off\">--vfs-cache-mode off</h3>\n<p>In this mode (the default) the cache will read directly from the remote and write directly to the remote without caching anything on disk.</p>\n<p>This will mean some operations are not possible</p>\n<ul>\n<li>Files can't be opened for both read AND write</li>\n<li>Files opened for write can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files open for read with O_TRUNC will be opened write only</li>\n<li>Files open for write only will behave as if O_TRUNC was supplied</li>\n<li>Open modes O_APPEND, O_TRUNC are ignored</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-minimal\">--vfs-cache-mode minimal</h3>\n<p>This is very similar to \"off\" except that files opened for read AND write will be buffered to disk. This means that files opened for write will be a lot more compatible, but uses the minimal disk space.</p>\n<p>These operations are not possible</p>\n<ul>\n<li>Files opened for write only can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files opened for write only will ignore O_APPEND, O_TRUNC</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-writes\">--vfs-cache-mode writes</h3>\n<p>In this mode files opened for read only are still read directly from the remote, write only and read/write files are buffered to disk first.</p>\n<p>This mode should support all normal file system operations.</p>\n<p>If an upload fails it will be retried at exponentially increasing intervals up to 1 minute.</p>\n<h3 id=\"vfs-cache-mode-full\">--vfs-cache-mode full</h3>\n<p>In this mode all reads and writes are buffered to and from disk. When data is read from the remote this is buffered to disk as well.</p>\n<p>In this mode the files in the cache will be sparse files and rclone will keep track of which bits of the files it has downloaded.</p>\n<p>So if an application only reads the starts of each file, then rclone will only buffer the start of the file. These files will appear to be their full size in the cache, but they will be sparse files with only the data that has been downloaded present in them.</p>\n<p>This mode should support all normal file system operations and is otherwise identical to <code>--vfs-cache-mode</code> writes.</p>\n<p>When reading a file rclone will read <code>--buffer-size</code> plus <code>--vfs-read-ahead</code> bytes ahead. The <code>--buffer-size</code> is buffered in memory whereas the <code>--vfs-read-ahead</code> is buffered on disk.</p>\n<p>When using this mode it is recommended that <code>--buffer-size</code> is not set too large and <code>--vfs-read-ahead</code> is set large if required.</p>\n<p><strong>IMPORTANT</strong> not all file systems support sparse files. In particular FAT/exFAT do not. Rclone will perform very badly if the cache directory is on a filesystem which doesn't support sparse files and it will log an ERROR message if one is detected.</p>\n<h3 id=\"fingerprinting\">Fingerprinting</h3>\n<p>Various parts of the VFS use fingerprinting to see if a local file copy has changed relative to a remote file. Fingerprints are made from:</p>\n<ul>\n<li>size</li>\n<li>modification time</li>\n<li>hash</li>\n</ul>\n<p>where available on an object.</p>\n<p>On some backends some of these attributes are slow to read (they take an extra API call per object, or extra work per object).</p>\n<p>For example <code>hash</code> is slow with the <code>local</code> and <code>sftp</code> backends as they have to read the entire file and hash it, and <code>modtime</code> is slow with the <code>s3</code>, <code>swift</code>, <code>ftp</code> and <code>qinqstor</code> backends because they need to do an extra API call to fetch it.</p>\n<p>If you use the <code>--vfs-fast-fingerprint</code> flag then rclone will not include the slow operations in the fingerprint. This makes the fingerprinting less accurate but much faster and will improve the opening time of cached files.</p>\n<p>If you are running a vfs cache over <code>local</code>, <code>s3</code> or <code>swift</code> backends then using this flag is recommended.</p>\n<p>Note that if you change the value of this flag, the fingerprints of the files in the cache may be invalidated and the files will need to be downloaded again.</p>\n<h2 id=\"vfs-chunked-reading\">VFS Chunked Reading</h2>\n<p>When rclone reads files from a remote it reads them in chunks. This means that rather than requesting the whole file rclone reads the chunk specified. This can reduce the used download quota for some remotes by requesting only chunks from the remote that are actually read, at the cost of an increased number of requests.</p>\n<p>These flags control the chunking:</p>\n<pre><code>--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once</code></pre>\n<p>The chunking behaves differently depending on the <code>--vfs-read-chunk-streams</code> parameter.</p>\n<h3 id=\"vfs-read-chunk-streams-0\"><code>--vfs-read-chunk-streams</code> == 0</h3>\n<p>Rclone will start reading a chunk of size <code>--vfs-read-chunk-size</code>, and then double the size for each read. When <code>--vfs-read-chunk-size-limit</code> is specified, and greater than <code>--vfs-read-chunk-size</code>, the chunk size for each open file will get doubled only until the specified value is reached. If the value is \"off\", which is the default, the limit is disabled and the chunk size will grow indefinitely.</p>\n<p>With <code>--vfs-read-chunk-size 100M</code> and <code>--vfs-read-chunk-size-limit 0</code> the following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on. When <code>--vfs-read-chunk-size-limit 500M</code> is specified, the result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.</p>\n<p>Setting <code>--vfs-read-chunk-size</code> to <code>0</code> or \"off\" disables chunked reading.</p>\n<p>The chunks will not be buffered in memory.</p>\n<h3 id=\"vfs-read-chunk-streams-0-1\"><code>--vfs-read-chunk-streams</code> &gt; 0</h3>\n<p>Rclone reads <code>--vfs-read-chunk-streams</code> chunks of size <code>--vfs-read-chunk-size</code> concurrently. The size for each read will stay constant.</p>\n<p>This improves performance performance massively on high latency links or very high bandwidth links to high performance object stores.</p>\n<p>Some experimentation will be needed to find the optimum values of <code>--vfs-read-chunk-size</code> and <code>--vfs-read-chunk-streams</code> as these will depend on the backend in use and the latency to the backend.</p>\n<p>For high performance object stores (eg AWS S3) a reasonable place to start might be <code>--vfs-read-chunk-streams 16</code> and <code>--vfs-read-chunk-size 4M</code>. In testing with AWS S3 the performance scaled roughly as the <code>--vfs-read-chunk-streams</code> setting.</p>\n<p>Similar settings should work for high latency links, but depending on the latency they may need more <code>--vfs-read-chunk-streams</code> in order to get the throughput.</p>\n<h2 id=\"vfs-performance\">VFS Performance</h2>\n<p>These flags may be used to enable/disable features of the VFS for performance or other reasons. See also the <a href=\"#vfs-chunked-reading\">chunked reading</a> feature.</p>\n<p>In particular S3 and Swift benefit hugely from the <code>--no-modtime</code> flag (or use <code>--use-server-modtime</code> for a slightly different effect) as each read of the modification time takes a transaction.</p>\n<pre><code>--no-checksum     Don&#39;t compare checksums on up/download.\n--no-modtime      Don&#39;t read/write the modification time (can speed things up).\n--no-seek         Don&#39;t allow seeking in files.\n--read-only       Only allow read-only access.</code></pre>\n<p>Sometimes rclone is delivered reads or writes out of order. Rather than seeking rclone will wait a short time for the in sequence read or write to come in. These flags only come into effect when not using an on disk cache file.</p>\n<pre><code>--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)</code></pre>\n<p>When using VFS write caching (<code>--vfs-cache-mode</code> with value writes or full), the global flag <code>--transfers</code> can be set to adjust the number of parallel uploads of modified files from the cache (the related global flag <code>--checkers</code> has no effect on the VFS).</p>\n<pre><code>--transfers int  Number of file transfers to run in parallel (default 4)</code></pre>\n<h2 id=\"vfs-case-sensitivity\">VFS Case Sensitivity</h2>\n<p>Linux file systems are case-sensitive: two files can differ only by case, and the exact case must be used when opening a file.</p>\n<p>File systems in modern Windows are case-insensitive but case-preserving: although existing files can be opened using any case, the exact case used to create the file is preserved and available for programs to query. It is not allowed for two files in the same directory to differ only by case.</p>\n<p>Usually file systems on macOS are case-insensitive. It is possible to make macOS file systems case-sensitive but that is not the default.</p>\n<p>The <code>--vfs-case-insensitive</code> VFS flag controls how rclone handles these two cases. If its value is \"false\", rclone passes file names to the remote as-is. If the flag is \"true\" (or appears without a value on the command line), rclone may perform a \"fixup\" as explained below.</p>\n<p>The user may specify a file name to open/delete/rename/etc with a case different than what is stored on the remote. If an argument refers to an existing file with exactly the same name, then the case of the existing file on the disk will be used. However, if a file name with exactly the same name is not found but a name differing only by case exists, rclone will transparently fixup the name. This fixup happens only when an existing file is requested. Case sensitivity of file names created anew by rclone is controlled by the underlying remote.</p>\n<p>Note that case sensitivity of the operating system running rclone (the target) may differ from case sensitivity of a file system presented by rclone (the source). The flag controls whether \"fixup\" is performed to satisfy the target.</p>\n<p>If the flag is not provided on the command line, then its default value depends on the operating system where rclone runs: \"true\" on Windows and macOS, \"false\" otherwise. If the flag is provided without a value, then it is \"true\".</p>\n<p>The <code>--no-unicode-normalization</code> flag controls whether a similar \"fixup\" is performed for filenames that differ but are <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">canonically equivalent</a> with respect to unicode. Unicode normalization can be particularly helpful for users of macOS, which prefers form NFD instead of the NFC used by most other platforms. It is therefore highly recommended to keep the default of <code>false</code> on macOS, to avoid encoding compatibility issues.</p>\n<p>In the (probably unlikely) event that a directory has multiple duplicate filenames after applying case and unicode normalization, the <code>--vfs-block-norm-dupes</code> flag allows hiding these duplicates. This comes with a performance tradeoff, as rclone will have to scan the entire directory for duplicates when listing a directory. For this reason, it is recommended to leave this disabled if not needed. However, macOS users may wish to consider using it, as otherwise, if a remote directory contains both NFC and NFD versions of the same filename, an odd situation will occur: both versions of the file will be visible in the mount, and both will appear to be editable, however, editing either version will actually result in only the NFD version getting edited under the hood. <code>--vfs-block- norm-dupes</code> prevents this confusion by detecting this scenario, hiding the duplicates, and logging an error, similar to how this is handled in <code>rclone sync</code>.</p>\n<h2 id=\"vfs-disk-options\">VFS Disk Options</h2>\n<p>This flag allows you to manually set the statistics about the filing system. It can be useful when those statistics cannot be read correctly automatically.</p>\n<pre><code>--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)</code></pre>\n<h2 id=\"alternate-report-of-used-bytes\">Alternate report of used bytes</h2>\n<p>Some backends, most notably S3, do not report the amount of bytes used. If you need this information to be available when running <code>df</code> on the filesystem, then pass the flag <code>--vfs-used-is-size</code> to rclone. With this flag set, instead of relying on the backend to report this information, rclone will scan the whole remote similar to <code>rclone size</code> and compute the total used space itself.</p>\n<p><em>WARNING.</em> Contrary to <code>rclone size</code>, this flag ignores filters so that the result is accurate. However, this is very inefficient and may cost lots of API calls resulting in extra charges. Use it as a last resort and only with caching.</p>\n<pre><code>rclone mount remote:path /path/to/mountpoint [flags]</code></pre>\n<h2 id=\"options-60\">Options</h2>\n<pre><code>      --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n      --allow-other                            Allow access to other users (not supported on Windows)\n      --allow-root                             Allow access to root user (not supported on Windows)\n      --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n      --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n      --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n      --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n      --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n      --debug-fuse                             Debug the FUSE internals - needs -v\n      --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n      --devname string                         Set the device name - default is remote:path\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --direct-io                              Use Direct IO, disables caching of data\n      --file-perms FileMode                    File permissions (default 666)\n      --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for mount\n      --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n      --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n      --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n      --no-checksum                            Don&#39;t compare checksums on up/download\n      --no-modtime                             Don&#39;t read/write the modification time (can speed things up)\n      --no-seek                                Don&#39;t allow seeking in files\n      --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n      --noapplexattr                           Ignore all &quot;com.apple.*&quot; extended attributes (supported on OSX only)\n  -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (&#39;off&#39; is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n      --volname string                         Set the volume name (supported on Windows and OSX only)\n      --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-19\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h2 id=\"see-also-60\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-moveto\">rclone moveto</h1>\n<p>Move file or directory from source to dest.</p>\n<h2 id=\"synopsis-53\">Synopsis</h2>\n<p>If source:path is a file or directory then it moves it to a file or directory named dest:path.</p>\n<p>This can be used to rename files or upload single files to other than their existing name. If the source is a directory then it acts exactly like the <a href=\"https://rclone.org/commands/rclone_move/\">move</a> command.</p>\n<p>So</p>\n<pre><code>rclone moveto src dst</code></pre>\n<p>where src and dst are rclone paths, either remote:path or /path/to/local or C:.</p>\n<p>This will:</p>\n<pre><code>if src is file\n    move it to dst, overwriting an existing file if it exists\nif src is directory\n    move it to dst, overwriting existing files if they exist\n    see move command for full details</code></pre>\n<p>This doesn't transfer files that are identical on src and dst, testing by size and modification time or MD5SUM. src will be deleted on successful transfer.</p>\n<p><strong>Important</strong>: Since this can cause data loss, test first with the <code>--dry-run</code> or the <code>--interactive</code>/<code>-i</code> flag.</p>\n<p><strong>Note</strong>: Use the <code>-P</code>/<code>--progress</code> flag to view real-time transfer statistics.</p>\n<pre><code>rclone moveto source:path dest:path [flags]</code></pre>\n<h2 id=\"options-61\">Options</h2>\n<pre><code>  -h, --help   help for moveto</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"copy-options-5\">Copy Options</h3>\n<p>Flags for anything which can copy a file</p>\n<pre><code>      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size &amp; checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don&#39;t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don&#39;t check the destination, copy regardless\n      --no-traverse                                 Don&#39;t traverse destination file system on copy\n      --no-update-dir-modtime                       Don&#39;t update directory modification times\n      --no-update-modtime                           Don&#39;t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. &#39;size,descending&#39;\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default &quot;.partial&quot;)\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination</code></pre>\n<h3 id=\"important-options-14\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h3 id=\"filter-options-20\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-18\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-61\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-ncdu\">rclone ncdu</h1>\n<p>Explore a remote with a text based user interface.</p>\n<h2 id=\"synopsis-54\">Synopsis</h2>\n<p>This displays a text based user interface allowing the navigation of a remote. It is most useful for answering the question - \"What is using all my disk space?\".</p>\n<p>To make the user interface it first scans the entire remote given and builds an in memory representation. rclone ncdu can be used during this scanning phase and you will see it building up the directory structure as it goes along.</p>\n<p>You can interact with the user interface using key presses, press '?' to toggle the help on and off. The supported keys are:</p>\n<pre><code> ↑,↓ or k,j to Move\n →,l to enter\n ←,h to return\n g toggle graph\n c toggle counts\n a toggle average size in directory\n m toggle modified time\n u toggle human-readable format\n n,s,C,A,M sort by name,size,count,asize,mtime\n d delete file/directory\n v select file/directory\n V enter visual select mode\n D delete selected files/directories\n y copy current path to clipboard\n Y display current path\n ^L refresh screen (fix screen corruption)\n r recalculate file sizes\n ? to toggle help on and off\n ESC to close the menu box\n q/^c to quit</code></pre>\n<p>Listed files/directories may be prefixed by a one-character flag, some of them combined with a description in brackets at end of line. These flags have the following meaning:</p>\n<pre><code>e means this is an empty directory, i.e. contains no files (but\n  may contain empty subdirectories)\n~ means this is a directory where some of the files (possibly in\n  subdirectories) have unknown size, and therefore the directory\n  size may be underestimated (and average size inaccurate, as it\n  is average of the files with known sizes).\n. means an error occurred while reading a subdirectory, and\n  therefore the directory size may be underestimated (and average\n  size inaccurate)\n! means an error occurred while reading this directory</code></pre>\n<p>This an homage to the <a href=\"https://dev.yorhel.nl/ncdu\">ncdu tool</a> but for rclone remotes. It is missing lots of features at the moment but is useful as it stands. Unlike ncdu it does not show excluded files.</p>\n<p>Note that it might take some time to delete big files/directories. The UI won't respond in the meantime since the deletion is done synchronously.</p>\n<p>For a non-interactive listing of the remote, see the <a href=\"https://rclone.org/commands/rclone_tree/\">tree</a> command. To just get the total size of the remote you can also use the <a href=\"https://rclone.org/commands/rclone_size/\">size</a> command.</p>\n<pre><code>rclone ncdu remote:path [flags]</code></pre>\n<h2 id=\"options-62\">Options</h2>\n<pre><code>  -h, --help   help for ncdu</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-21\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h3 id=\"listing-options-19\">Listing Options</h3>\n<p>Flags for listing directories</p>\n<pre><code>      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions</code></pre>\n<h2 id=\"see-also-62\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-nfsmount\">rclone nfsmount</h1>\n<p>Mount the remote as file system on a mountpoint.</p>\n<h2 id=\"synopsis-55\">Synopsis</h2>\n<p>Rclone nfsmount allows Linux, FreeBSD, macOS and Windows to mount any of Rclone's cloud storage systems as a file system with FUSE.</p>\n<p>First set up your remote using <code>rclone config</code>. Check it works with <code>rclone ls</code> etc.</p>\n<p>On Linux and macOS, you can run mount in either foreground or background (aka daemon) mode. Mount runs in foreground mode by default. Use the <code>--daemon</code> flag to force background mode. On Windows you can run mount in foreground only, the flag is ignored.</p>\n<p>In background mode rclone acts as a generic Unix mount program: the main program starts, spawns background rclone process to setup and maintain the mount, waits until success or timeout and exits with appropriate code (killing the child process if it fails).</p>\n<p>On Linux/macOS/FreeBSD start the mount like this, where <code>/path/to/local/mount</code> is an <strong>empty</strong> <strong>existing</strong> directory:</p>\n<pre><code>rclone nfsmount remote:path/to/files /path/to/local/mount</code></pre>\n<p>On Windows you can start a mount in different ways. See <a href=\"#mounting-modes-on-windows\">below</a> for details. If foreground mount is used interactively from a console window, rclone will serve the mount and occupy the console so another window should be used to work with the mount until rclone is interrupted e.g. by pressing Ctrl-C.</p>\n<p>The following examples will mount to an automatically assigned drive, to specific drive letter <code>X:</code>, to path <code>C:\\path\\parent\\mount</code> (where parent directory or drive must exist, and mount must <strong>not</strong> exist, and is not supported when <a href=\"#mounting-modes-on-windows\">mounting as a network drive</a>), and the last example will mount as network share <code>\\\\cloud\\remote</code> and map it to an automatically assigned drive:</p>\n<pre><code>rclone nfsmount remote:path/to/files *\nrclone nfsmount remote:path/to/files X:\nrclone nfsmount remote:path/to/files C:\\path\\parent\\mount\nrclone nfsmount remote:path/to/files \\\\cloud\\remote</code></pre>\n<p>When the program ends while in foreground mode, either via Ctrl+C or receiving a SIGINT or SIGTERM signal, the mount should be automatically stopped.</p>\n<p>When running in background mode the user will have to stop the mount manually:</p>\n<pre><code># Linux\nfusermount -u /path/to/local/mount\n# OS X\numount /path/to/local/mount</code></pre>\n<p>The umount operation can fail, for example when the mountpoint is busy. When that happens, it is the user's responsibility to stop the mount manually.</p>\n<p>The size of the mounted file system will be set according to information retrieved from the remote, the same as returned by the <a href=\"https://rclone.org/commands/rclone_about/\">rclone about</a> command. Remotes with unlimited storage may report the used size only, then an additional 1 PiB of free space is assumed. If the remote does not <a href=\"https://rclone.org/overview/#optional-features\">support</a> the about feature at all, then 1 PiB is set as both the total and the free size.</p>\n<h2 id=\"installing-on-windows-1\">Installing on Windows</h2>\n<p>To run rclone nfsmount on Windows, you will need to download and install <a href=\"http://www.secfs.net/winfsp/\">WinFsp</a>.</p>\n<p><a href=\"https://github.com/winfsp/winfsp\">WinFsp</a> is an open-source Windows File System Proxy which makes it easy to write user space file systems for Windows. It provides a FUSE emulation layer which rclone uses combination with <a href=\"https://github.com/winfsp/cgofuse\">cgofuse</a>. Both of these packages are by Bill Zissimopoulos who was very helpful during the implementation of rclone nfsmount for Windows.</p>\n<h3 id=\"mounting-modes-on-windows-1\">Mounting modes on windows</h3>\n<p>Unlike other operating systems, Microsoft Windows provides a different filesystem type for network and fixed drives. It optimises access on the assumption fixed disk drives are fast and reliable, while network drives have relatively high latency and less reliability. Some settings can also be differentiated between the two types, for example that Windows Explorer should just display icons and not create preview thumbnails for image and video files on network drives.</p>\n<p>In most cases, rclone will mount the remote as a normal, fixed disk drive by default. However, you can also choose to mount it as a remote network drive, often described as a network share. If you mount an rclone remote using the default, fixed drive mode and experience unexpected program errors, freezes or other issues, consider mounting as a network drive instead.</p>\n<p>When mounting as a fixed disk drive you can either mount to an unused drive letter, or to a path representing a <strong>nonexistent</strong> subdirectory of an <strong>existing</strong> parent directory or drive. Using the special value <code>*</code> will tell rclone to automatically assign the next available drive letter, starting with Z: and moving backward. Examples:</p>\n<pre><code>rclone nfsmount remote:path/to/files *\nrclone nfsmount remote:path/to/files X:\nrclone nfsmount remote:path/to/files C:\\path\\parent\\mount\nrclone nfsmount remote:path/to/files X:</code></pre>\n<p>Option <code>--volname</code> can be used to set a custom volume name for the mounted file system. The default is to use the remote name and path.</p>\n<p>To mount as network drive, you can add option <code>--network-mode</code> to your nfsmount command. Mounting to a directory path is not supported in this mode, it is a limitation Windows imposes on junctions, so the remote must always be mounted to a drive letter.</p>\n<pre><code>rclone nfsmount remote:path/to/files X: --network-mode</code></pre>\n<p>A volume name specified with <code>--volname</code> will be used to create the network share path. A complete UNC path, such as <code>\\\\cloud\\remote</code>, optionally with path <code>\\\\cloud\\remote\\madeup\\path</code>, will be used as is. Any other string will be used as the share part, after a default prefix <code>\\\\server\\</code>. If no volume name is specified then <code>\\\\server\\share</code> will be used. You must make sure the volume name is unique when you are mounting more than one drive, or else the mount command will fail. The share name will treated as the volume label for the mapped drive, shown in Windows Explorer etc, while the complete <code>\\\\server\\share</code> will be reported as the remote UNC path by <code>net use</code> etc, just like a normal network drive mapping.</p>\n<p>If you specify a full network share UNC path with <code>--volname</code>, this will implicitly set the <code>--network-mode</code> option, so the following two examples have same result:</p>\n<pre><code>rclone nfsmount remote:path/to/files X: --network-mode\nrclone nfsmount remote:path/to/files X: --volname \\\\server\\share</code></pre>\n<p>You may also specify the network share UNC path as the mountpoint itself. Then rclone will automatically assign a drive letter, same as with <code>*</code> and use that as mountpoint, and instead use the UNC path specified as the volume name, as if it were specified with the <code>--volname</code> option. This will also implicitly set the <code>--network-mode</code> option. This means the following two examples have same result:</p>\n<pre><code>rclone nfsmount remote:path/to/files \\\\cloud\\remote\nrclone nfsmount remote:path/to/files * --volname \\\\cloud\\remote</code></pre>\n<p>There is yet another way to enable network mode, and to set the share path, and that is to pass the \"native\" libfuse/WinFsp option directly: <code>--fuse-flag --VolumePrefix=\\server\\share</code>. Note that the path must be with just a single backslash prefix in this case.</p>\n<p><em>Note:</em> In previous versions of rclone this was the only supported method.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Drive_mapping\">Read more about drive mapping</a></p>\n<p>See also <a href=\"#limitations\">Limitations</a> section below.</p>\n<h3 id=\"windows-filesystem-permissions-1\">Windows filesystem permissions</h3>\n<p>The FUSE emulation layer on Windows must convert between the POSIX-based permission model used in FUSE, and the permission model used in Windows, based on access-control lists (ACL).</p>\n<p>The mounted filesystem will normally get three entries in its access-control list (ACL), representing permissions for the POSIX permission scopes: Owner, group and others. By default, the owner and group will be taken from the current user, and the built-in group \"Everyone\" will be used to represent others. The user/group can be customized with FUSE options \"UserName\" and \"GroupName\", e.g. <code>-o UserName=user123 -o GroupName=\"Authenticated Users\"</code>. The permissions on each entry will be set according to <a href=\"#options\">options</a> <code>--dir-perms</code> and <code>--file-perms</code>, which takes a value in traditional Unix <a href=\"https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation\">numeric notation</a>.</p>\n<p>The default permissions corresponds to <code>--file-perms 0666 --dir-perms 0777</code>, i.e. read and write permissions to everyone. This means you will not be able to start any programs from the mount. To be able to do that you must add execute permissions, e.g. <code>--file-perms 0777 --dir-perms 0777</code> to add it to everyone. If the program needs to write files, chances are you will have to enable <a href=\"#vfs-file-caching\">VFS File Caching</a> as well (see also <a href=\"#limitations\">limitations</a>). Note that the default write permission have some restrictions for accounts other than the owner, specifically it lacks the \"write extended attributes\", as explained next.</p>\n<p>The mapping of permissions is not always trivial, and the result you see in Windows Explorer may not be exactly like you expected. For example, when setting a value that includes write access for the group or others scope, this will be mapped to individual permissions \"write attributes\", \"write data\" and \"append data\", but not \"write extended attributes\". Windows will then show this as basic permission \"Special\" instead of \"Write\", because \"Write\" also covers the \"write extended attributes\" permission. When setting digit 0 for group or others, to indicate no permissions, they will still get individual permissions \"read attributes\", \"read extended attributes\" and \"read permissions\". This is done for compatibility reasons, e.g. to allow users without additional permissions to be able to read basic metadata about files like in Unix.</p>\n<p>WinFsp 2021 (version 1.9) introduced a new FUSE option \"FileSecurity\", that allows the complete specification of file security descriptors using <a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format\">SDDL</a>. With this you get detailed control of the resulting permissions, compared to use of the POSIX permissions described above, and no additional permissions will be added automatically for compatibility with Unix. Some example use cases will following.</p>\n<p>If you set POSIX permissions for only allowing access to the owner, using <code>--file-perms 0600 --dir-perms 0700</code>, the user group and the built-in \"Everyone\" group will still be given some special permissions, as described above. Some programs may then (incorrectly) interpret this as the file being accessible by everyone, for example an SSH client may warn about \"unprotected private key file\". You can work around this by specifying <code>-o FileSecurity=\"D:P(A;;FA;;;OW)\"</code>, which sets file all access (FA) to the owner (OW), and nothing else.</p>\n<p>When setting write permissions then, except for the owner, this does not include the \"write extended attributes\" permission, as mentioned above. This may prevent applications from writing to files, giving permission denied error instead. To set working write permissions for the built-in \"Everyone\" group, similar to what it gets by default but with the addition of the \"write extended attributes\", you can specify <code>-o FileSecurity=\"D:P(A;;FRFW;;;WD)\"</code>, which sets file read (FR) and file write (FW) to everyone (WD). If file execute (FX) is also needed, then change to <code>-o FileSecurity=\"D:P(A;;FRFWFX;;;WD)\"</code>, or set file all access (FA) to get full access permissions, including delete, with <code>-o FileSecurity=\"D:P(A;;FA;;;WD)\"</code>.</p>\n<h3 id=\"windows-caveats-1\">Windows caveats</h3>\n<p>Drives created as Administrator are not visible to other accounts, not even an account that was elevated to Administrator with the User Account Control (UAC) feature. A result of this is that if you mount to a drive letter from a Command Prompt run as Administrator, and then try to access the same drive from Windows Explorer (which does not run as Administrator), you will not be able to see the mounted drive.</p>\n<p>If you don't need to access the drive from applications running with administrative privileges, the easiest way around this is to always create the mount from a non-elevated command prompt.</p>\n<p>To make mapped drives available to the user account that created them regardless if elevated or not, there is a special Windows setting called <a href=\"https://docs.microsoft.com/en-us/troubleshoot/windows-client/networking/mapped-drives-not-available-from-elevated-command#detail-to-configure-the-enablelinkedconnections-registry-entry\">linked connections</a> that can be enabled.</p>\n<p>It is also possible to make a drive mount available to everyone on the system, by running the process creating it as the built-in SYSTEM account. There are several ways to do this: One is to use the command-line utility <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/psexec\">PsExec</a>, from Microsoft's Sysinternals suite, which has option <code>-s</code> to start processes as the SYSTEM account. Another alternative is to run the mount command from a Windows Scheduled Task, or a Windows Service, configured to run as the SYSTEM account. A third alternative is to use the <a href=\"https://github.com/winfsp/winfsp/wiki/WinFsp-Service-Architecture\">WinFsp.Launcher infrastructure</a>). Read more in the <a href=\"https://rclone.org/install/\">install documentation</a>. Note that when running rclone as another user, it will not use the configuration file from your profile unless you tell it to with the <a href=\"https://rclone.org/docs/#config-config-file\"><code>--config</code></a> option. Note also that it is now the SYSTEM account that will have the owner permissions, and other accounts will have permissions according to the group or others scopes. As mentioned above, these will then not get the \"write extended attributes\" permission, and this may prevent writing to files. You can work around this with the FileSecurity option, see example above.</p>\n<p>Note that mapping to a directory path, instead of a drive letter, does not suffer from the same limitations.</p>\n<h2 id=\"mounting-on-macos-1\">Mounting on macOS</h2>\n<p>Mounting on macOS can be done either via <a href=\"https://rclone.org/commands/rclone_serve_nfs/\">built-in NFS server</a>, <a href=\"https://osxfuse.github.io/\">macFUSE</a> (also known as osxfuse) or <a href=\"https://www.fuse-t.org/\">FUSE-T</a>. macFUSE is a traditional FUSE driver utilizing a macOS kernel extension (kext). FUSE-T is an alternative FUSE system which \"mounts\" via an NFSv4 local server.</p>\n<h4 id=\"unicode-normalization-1\">Unicode Normalization</h4>\n<p>It is highly recommended to keep the default of <code>--no-unicode-normalization=false</code> for all <code>mount</code> and <code>serve</code> commands on macOS. For details, see <a href=\"https://rclone.org/commands/rclone_mount/#vfs-case-sensitivity\">vfs-case-sensitivity</a>.</p>\n<h3 id=\"nfs-mount-1\">NFS mount</h3>\n<p>This method spins up an NFS server using <a href=\"https://rclone.org/commands/rclone_serve_nfs/\">serve nfs</a> command and mounts it to the specified mountpoint. If you run this in background mode using |--daemon|, you will need to send SIGTERM signal to the rclone process using |kill| command to stop the mount.</p>\n<p>Note that <code>--nfs-cache-handle-limit</code> controls the maximum number of cached file handles stored by the <code>nfsmount</code> caching handler. This should not be set too low or you may experience errors when trying to access files. The default is 1000000, but consider lowering this limit if the server's system resource usage causes problems.</p>\n<h3 id=\"macfuse-notes-1\">macFUSE Notes</h3>\n<p>If installing macFUSE using <a href=\"https://github.com/osxfuse/osxfuse/releases\">dmg packages</a> from the website, rclone will locate the macFUSE libraries without any further intervention. If however, macFUSE is installed using the <a href=\"https://www.macports.org/\">macports</a> package manager, the following addition steps are required.</p>\n<pre><code>sudo mkdir /usr/local/lib\ncd /usr/local/lib\nsudo ln -s /opt/local/lib/libfuse.2.dylib</code></pre>\n<h3 id=\"fuse-t-limitations-caveats-and-notes-1\">FUSE-T Limitations, Caveats, and Notes</h3>\n<p>There are some limitations, caveats, and notes about how it works. These are current as of FUSE-T version 1.0.14.</p>\n<h4 id=\"modtime-update-on-read-1\">ModTime update on read</h4>\n<p>As per the <a href=\"https://github.com/macos-fuse-t/fuse-t/wiki#caveats\">FUSE-T wiki</a>:</p>\n<blockquote>\n<p>File access and modification times cannot be set separately as it seems to be an issue with the NFS client which always modifies both. Can be reproduced with 'touch -m' and 'touch -a' commands</p>\n</blockquote>\n<p>This means that viewing files with various tools, notably macOS Finder, will cause rlcone to update the modification time of the file. This may make rclone upload a full new copy of the file.</p>\n<h4 id=\"read-only-mounts-1\">Read Only mounts</h4>\n<p>When mounting with <code>--read-only</code>, attempts to write to files will fail <em>silently</em> as opposed to with a clear warning as in macFUSE.</p>\n<h2 id=\"limitations-1\">Limitations</h2>\n<p>Without the use of <code>--vfs-cache-mode</code> this can only write files sequentially, it can only seek when reading. This means that many applications won't work with their files on an rclone mount without <code>--vfs-cache-mode writes</code> or <code>--vfs-cache-mode full</code>. See the <a href=\"#vfs-file-caching\">VFS File Caching</a> section for more info. When using NFS mount on macOS, if you don't specify |--vfs-cache-mode| the mount point will be read-only.</p>\n<p>The bucket-based remotes (e.g. Swift, S3, Google Compute Storage, B2) do not support the concept of empty directories, so empty directories will have a tendency to disappear once they fall out of the directory cache.</p>\n<p>When <code>rclone mount</code> is invoked on Unix with <code>--daemon</code> flag, the main rclone program will wait for the background mount to become ready or until the timeout specified by the <code>--daemon-wait</code> flag. On Linux it can check mount status using ProcFS so the flag in fact sets <strong>maximum</strong> time to wait, while the real wait can be less. On macOS / BSD the time to wait is constant and the check is performed only at the end. We advise you to set wait time on macOS reasonably.</p>\n<p>Only supported on Linux, FreeBSD, OS X and Windows at the moment.</p>\n<h2 id=\"rclone-nfsmount-vs-rclone-synccopy\">rclone nfsmount vs rclone sync/copy</h2>\n<p>File systems expect things to be 100% reliable, whereas cloud storage systems are a long way from 100% reliable. The rclone sync/copy commands cope with this with lots of retries. However rclone nfsmount can't use retries in the same way without making local copies of the uploads. Look at the <a href=\"#vfs-file-caching\">VFS File Caching</a> for solutions to make nfsmount more reliable.</p>\n<h2 id=\"attribute-caching-1\">Attribute caching</h2>\n<p>You can use the flag <code>--attr-timeout</code> to set the time the kernel caches the attributes (size, modification time, etc.) for directory entries.</p>\n<p>The default is <code>1s</code> which caches files just long enough to avoid too many callbacks to rclone from the kernel.</p>\n<p>In theory 0s should be the correct value for filesystems which can change outside the control of the kernel. However this causes quite a few problems such as <a href=\"https://github.com/rclone/rclone/issues/2157\">rclone using too much memory</a>, <a href=\"https://forum.rclone.org/t/rclone-1-39-vs-1-40-mount-issue/5112\">rclone not serving files to samba</a> and <a href=\"https://github.com/rclone/rclone/issues/2095#issuecomment-371141147\">excessive time listing directories</a>.</p>\n<p>The kernel can cache the info about a file for the time given by <code>--attr-timeout</code>. You may see corruption if the remote file changes length during this window. It will show up as either a truncated file or a file with garbage on the end. With <code>--attr-timeout 1s</code> this is very unlikely but not impossible. The higher you set <code>--attr-timeout</code> the more likely it is. The default setting of \"1s\" is the lowest setting which mitigates the problems above.</p>\n<p>If you set it higher (<code>10s</code> or <code>1m</code> say) then the kernel will call back to rclone less often making it more efficient, however there is more chance of the corruption issue above.</p>\n<p>If files don't change on the remote outside of the control of rclone then there is no chance of corruption.</p>\n<p>This is the same as setting the attr_timeout option in mount.fuse.</p>\n<h2 id=\"filters-1\">Filters</h2>\n<p>Note that all the rclone filters can be used to select a subset of the files to be visible in the mount.</p>\n<h2 id=\"systemd-1\">systemd</h2>\n<p>When running rclone nfsmount as a systemd service, it is possible to use Type=notify. In this case the service will enter the started state after the mountpoint has been successfully set up. Units having the rclone nfsmount service specified as a requirement will see all files and folders immediately in this mode.</p>\n<p>Note that systemd runs mount units without any environment variables including <code>PATH</code> or <code>HOME</code>. This means that tilde (<code>~</code>) expansion will not work and you should provide <code>--config</code> and <code>--cache-dir</code> explicitly as absolute paths via rclone arguments. Since mounting requires the <code>fusermount</code> program, rclone will use the fallback PATH of <code>/bin:/usr/bin</code> in this scenario. Please ensure that <code>fusermount</code> is present on this PATH.</p>\n<h2 id=\"rclone-as-unix-mount-helper-1\">Rclone as Unix mount helper</h2>\n<p>The core Unix program <code>/bin/mount</code> normally takes the <code>-t FSTYPE</code> argument then runs the <code>/sbin/mount.FSTYPE</code> helper program passing it mount options as <code>-o key=val,...</code> or <code>--opt=...</code>. Automount (classic or systemd) behaves in a similar way.</p>\n<p>rclone by default expects GNU-style flags <code>--key val</code>. To run it as a mount helper you should symlink rclone binary to <code>/sbin/mount.rclone</code> and optionally <code>/usr/bin/rclonefs</code>, e.g. <code>ln -s /usr/bin/rclone /sbin/mount.rclone</code>. rclone will detect it and translate command-line arguments appropriately.</p>\n<p>Now you can run classic mounts like this:</p>\n<pre><code>mount sftp1:subdir /mnt/data -t rclone -o vfs_cache_mode=writes,sftp_key_file=/path/to/pem</code></pre>\n<p>or create systemd mount units:</p>\n<pre><code># /etc/systemd/system/mnt-data.mount\n[Unit]\nDescription=Mount for /mnt/data\n[Mount]\nType=rclone\nWhat=sftp1:subdir\nWhere=/mnt/data\nOptions=rw,_netdev,allow_other,args2env,vfs-cache-mode=writes,config=/etc/rclone.conf,cache-dir=/var/rclone</code></pre>\n<p>optionally accompanied by systemd automount unit</p>\n<pre><code># /etc/systemd/system/mnt-data.automount\n[Unit]\nDescription=AutoMount for /mnt/data\n[Automount]\nWhere=/mnt/data\nTimeoutIdleSec=600\n[Install]\nWantedBy=multi-user.target</code></pre>\n<p>or add in <code>/etc/fstab</code> a line like</p>\n<pre><code>sftp1:subdir /mnt/data rclone rw,noauto,nofail,_netdev,x-systemd.automount,args2env,vfs_cache_mode=writes,config=/etc/rclone.conf,cache_dir=/var/cache/rclone 0 0</code></pre>\n<p>or use classic Automountd. Remember to provide explicit <code>config=...,cache-dir=...</code> as a workaround for mount units being run without <code>HOME</code>.</p>\n<p>Rclone in the mount helper mode will split <code>-o</code> argument(s) by comma, replace <code>_</code> by <code>-</code> and prepend <code>--</code> to get the command-line flags. Options containing commas or spaces can be wrapped in single or double quotes. Any inner quotes inside outer quotes of the same type should be doubled.</p>\n<p>Mount option syntax includes a few extra options treated specially:</p>\n<ul>\n<li><code>env.NAME=VALUE</code> will set an environment variable for the mount process. This helps with Automountd and Systemd.mount which don't allow setting custom environment for mount helpers. Typically you will use <code>env.HTTPS_PROXY=proxy.host:3128</code> or <code>env.HOME=/root</code></li>\n<li><code>command=cmount</code> can be used to run <code>cmount</code> or any other rclone command rather than the default <code>mount</code>.</li>\n<li><code>args2env</code> will pass mount options to the mount helper running in background via environment variables instead of command line arguments. This allows to hide secrets from such commands as <code>ps</code> or <code>pgrep</code>.</li>\n<li><code>vv...</code> will be transformed into appropriate <code>--verbose=N</code></li>\n<li>standard mount options like <code>x-systemd.automount</code>, <code>_netdev</code>, <code>nosuid</code> and alike are intended only for Automountd and ignored by rclone.</li>\n</ul>\n<h2 id=\"vfs---virtual-file-system-1\">VFS - Virtual File System</h2>\n<p>This command uses the VFS layer. This adapts the cloud storage objects that rclone uses into something which looks much more like a disk filing system.</p>\n<p>Cloud storage objects have lots of properties which aren't like disk files - you can't extend them or write to the middle of them, so the VFS layer has to deal with that. Because there is no one right way of doing this there are various options explained below.</p>\n<p>The VFS layer also implements a directory cache - this caches info about files and directories (but not the data) in memory.</p>\n<h2 id=\"vfs-directory-cache-1\">VFS Directory Cache</h2>\n<p>Using the <code>--dir-cache-time</code> flag, you can control how long a directory should be considered up to date and not refreshed from the backend. Changes made through the VFS will appear immediately or invalidate the cache.</p>\n<pre><code>--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)</code></pre>\n<p>However, changes made directly on the cloud storage by the web interface or a different copy of rclone will only be picked up once the directory cache expires if the backend configured does not support polling for changes. If the backend supports polling, changes will be picked up within the polling interval.</p>\n<p>You can send a <code>SIGHUP</code> signal to rclone for it to flush all directory caches, regardless of how old they are. Assuming only one rclone instance is running, you can reset the cache like this:</p>\n<pre><code>kill -SIGHUP $(pidof rclone)</code></pre>\n<p>If you configure rclone with a <a href=\"/rc\">remote control</a> then you can use rclone rc to flush the whole directory cache:</p>\n<pre><code>rclone rc vfs/forget</code></pre>\n<p>Or individual files or directories:</p>\n<pre><code>rclone rc vfs/forget file=path/to/file dir=path/to/dir</code></pre>\n<h2 id=\"vfs-file-buffering-1\">VFS File Buffering</h2>\n<p>The <code>--buffer-size</code> flag determines the amount of memory, that will be used to buffer data in advance.</p>\n<p>Each open file will try to keep the specified amount of data in memory at all times. The buffered data is bound to one open file and won't be shared.</p>\n<p>This flag is a upper limit for the used memory per open file. The buffer will only use memory for data that is downloaded but not not yet read. If the buffer is empty, only a small amount of memory will be used.</p>\n<p>The maximum memory used by rclone for buffering can be up to <code>--buffer-size * open files</code>.</p>\n<h2 id=\"vfs-file-caching-1\">VFS File Caching</h2>\n<p>These flags control the VFS file caching options. File caching is necessary to make the VFS layer appear compatible with a normal file system. It can be disabled at the cost of some compatibility.</p>\n<p>For example you'll need to enable VFS caching if you want to read and write simultaneously to a file. See below for more details.</p>\n<p>Note that the VFS cache is separate from the cache backend and you may find that you need one or the other or both.</p>\n<pre><code>--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)</code></pre>\n<p>If run with <code>-vv</code> rclone will print the location of the file cache. The files are stored in the user cache file area which is OS dependent but can be controlled with <code>--cache-dir</code> or setting the appropriate environment variable.</p>\n<p>The cache has 4 different modes selected by <code>--vfs-cache-mode</code>. The higher the cache mode the more compatible rclone becomes at the cost of using disk space.</p>\n<p>Note that files are written back to the remote only when they are closed and if they haven't been accessed for <code>--vfs-write-back</code> seconds. If rclone is quit or dies with files that haven't been uploaded, these will be uploaded next time rclone is run with the same flags.</p>\n<p>If using <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> note that the cache may exceed these quotas for two reasons. Firstly because it is only checked every <code>--vfs-cache-poll-interval</code>. Secondly because open files cannot be evicted from the cache. When <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> is exceeded, rclone will attempt to evict the least accessed files from the cache first. rclone will start with files that haven't been accessed for the longest. This cache flushing strategy is efficient and more relevant files are likely to remain cached.</p>\n<p>The <code>--vfs-cache-max-age</code> will evict files from the cache after the set time since last access has passed. The default value of 1 hour will start evicting files from cache that haven't been accessed for 1 hour. When a cached file is accessed the 1 hour timer is reset to 0 and will wait for 1 more hour before evicting. Specify the time with standard notation, s, m, h, d, w .</p>\n<p>You <strong>should not</strong> run two copies of rclone using the same VFS cache with the same or overlapping remotes if using <code>--vfs-cache-mode &gt; off</code>. This can potentially cause data corruption if you do. You can work around this by giving each rclone its own cache hierarchy with <code>--cache-dir</code>. You don't need to worry about this if the remotes in use don't overlap.</p>\n<h3 id=\"vfs-cache-mode-off-1\">--vfs-cache-mode off</h3>\n<p>In this mode (the default) the cache will read directly from the remote and write directly to the remote without caching anything on disk.</p>\n<p>This will mean some operations are not possible</p>\n<ul>\n<li>Files can't be opened for both read AND write</li>\n<li>Files opened for write can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files open for read with O_TRUNC will be opened write only</li>\n<li>Files open for write only will behave as if O_TRUNC was supplied</li>\n<li>Open modes O_APPEND, O_TRUNC are ignored</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-minimal-1\">--vfs-cache-mode minimal</h3>\n<p>This is very similar to \"off\" except that files opened for read AND write will be buffered to disk. This means that files opened for write will be a lot more compatible, but uses the minimal disk space.</p>\n<p>These operations are not possible</p>\n<ul>\n<li>Files opened for write only can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files opened for write only will ignore O_APPEND, O_TRUNC</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-writes-1\">--vfs-cache-mode writes</h3>\n<p>In this mode files opened for read only are still read directly from the remote, write only and read/write files are buffered to disk first.</p>\n<p>This mode should support all normal file system operations.</p>\n<p>If an upload fails it will be retried at exponentially increasing intervals up to 1 minute.</p>\n<h3 id=\"vfs-cache-mode-full-1\">--vfs-cache-mode full</h3>\n<p>In this mode all reads and writes are buffered to and from disk. When data is read from the remote this is buffered to disk as well.</p>\n<p>In this mode the files in the cache will be sparse files and rclone will keep track of which bits of the files it has downloaded.</p>\n<p>So if an application only reads the starts of each file, then rclone will only buffer the start of the file. These files will appear to be their full size in the cache, but they will be sparse files with only the data that has been downloaded present in them.</p>\n<p>This mode should support all normal file system operations and is otherwise identical to <code>--vfs-cache-mode</code> writes.</p>\n<p>When reading a file rclone will read <code>--buffer-size</code> plus <code>--vfs-read-ahead</code> bytes ahead. The <code>--buffer-size</code> is buffered in memory whereas the <code>--vfs-read-ahead</code> is buffered on disk.</p>\n<p>When using this mode it is recommended that <code>--buffer-size</code> is not set too large and <code>--vfs-read-ahead</code> is set large if required.</p>\n<p><strong>IMPORTANT</strong> not all file systems support sparse files. In particular FAT/exFAT do not. Rclone will perform very badly if the cache directory is on a filesystem which doesn't support sparse files and it will log an ERROR message if one is detected.</p>\n<h3 id=\"fingerprinting-1\">Fingerprinting</h3>\n<p>Various parts of the VFS use fingerprinting to see if a local file copy has changed relative to a remote file. Fingerprints are made from:</p>\n<ul>\n<li>size</li>\n<li>modification time</li>\n<li>hash</li>\n</ul>\n<p>where available on an object.</p>\n<p>On some backends some of these attributes are slow to read (they take an extra API call per object, or extra work per object).</p>\n<p>For example <code>hash</code> is slow with the <code>local</code> and <code>sftp</code> backends as they have to read the entire file and hash it, and <code>modtime</code> is slow with the <code>s3</code>, <code>swift</code>, <code>ftp</code> and <code>qinqstor</code> backends because they need to do an extra API call to fetch it.</p>\n<p>If you use the <code>--vfs-fast-fingerprint</code> flag then rclone will not include the slow operations in the fingerprint. This makes the fingerprinting less accurate but much faster and will improve the opening time of cached files.</p>\n<p>If you are running a vfs cache over <code>local</code>, <code>s3</code> or <code>swift</code> backends then using this flag is recommended.</p>\n<p>Note that if you change the value of this flag, the fingerprints of the files in the cache may be invalidated and the files will need to be downloaded again.</p>\n<h2 id=\"vfs-chunked-reading-1\">VFS Chunked Reading</h2>\n<p>When rclone reads files from a remote it reads them in chunks. This means that rather than requesting the whole file rclone reads the chunk specified. This can reduce the used download quota for some remotes by requesting only chunks from the remote that are actually read, at the cost of an increased number of requests.</p>\n<p>These flags control the chunking:</p>\n<pre><code>--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once</code></pre>\n<p>The chunking behaves differently depending on the <code>--vfs-read-chunk-streams</code> parameter.</p>\n<h3 id=\"vfs-read-chunk-streams-0-2\"><code>--vfs-read-chunk-streams</code> == 0</h3>\n<p>Rclone will start reading a chunk of size <code>--vfs-read-chunk-size</code>, and then double the size for each read. When <code>--vfs-read-chunk-size-limit</code> is specified, and greater than <code>--vfs-read-chunk-size</code>, the chunk size for each open file will get doubled only until the specified value is reached. If the value is \"off\", which is the default, the limit is disabled and the chunk size will grow indefinitely.</p>\n<p>With <code>--vfs-read-chunk-size 100M</code> and <code>--vfs-read-chunk-size-limit 0</code> the following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on. When <code>--vfs-read-chunk-size-limit 500M</code> is specified, the result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.</p>\n<p>Setting <code>--vfs-read-chunk-size</code> to <code>0</code> or \"off\" disables chunked reading.</p>\n<p>The chunks will not be buffered in memory.</p>\n<h3 id=\"vfs-read-chunk-streams-0-3\"><code>--vfs-read-chunk-streams</code> &gt; 0</h3>\n<p>Rclone reads <code>--vfs-read-chunk-streams</code> chunks of size <code>--vfs-read-chunk-size</code> concurrently. The size for each read will stay constant.</p>\n<p>This improves performance performance massively on high latency links or very high bandwidth links to high performance object stores.</p>\n<p>Some experimentation will be needed to find the optimum values of <code>--vfs-read-chunk-size</code> and <code>--vfs-read-chunk-streams</code> as these will depend on the backend in use and the latency to the backend.</p>\n<p>For high performance object stores (eg AWS S3) a reasonable place to start might be <code>--vfs-read-chunk-streams 16</code> and <code>--vfs-read-chunk-size 4M</code>. In testing with AWS S3 the performance scaled roughly as the <code>--vfs-read-chunk-streams</code> setting.</p>\n<p>Similar settings should work for high latency links, but depending on the latency they may need more <code>--vfs-read-chunk-streams</code> in order to get the throughput.</p>\n<h2 id=\"vfs-performance-1\">VFS Performance</h2>\n<p>These flags may be used to enable/disable features of the VFS for performance or other reasons. See also the <a href=\"#vfs-chunked-reading\">chunked reading</a> feature.</p>\n<p>In particular S3 and Swift benefit hugely from the <code>--no-modtime</code> flag (or use <code>--use-server-modtime</code> for a slightly different effect) as each read of the modification time takes a transaction.</p>\n<pre><code>--no-checksum     Don&#39;t compare checksums on up/download.\n--no-modtime      Don&#39;t read/write the modification time (can speed things up).\n--no-seek         Don&#39;t allow seeking in files.\n--read-only       Only allow read-only access.</code></pre>\n<p>Sometimes rclone is delivered reads or writes out of order. Rather than seeking rclone will wait a short time for the in sequence read or write to come in. These flags only come into effect when not using an on disk cache file.</p>\n<pre><code>--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)</code></pre>\n<p>When using VFS write caching (<code>--vfs-cache-mode</code> with value writes or full), the global flag <code>--transfers</code> can be set to adjust the number of parallel uploads of modified files from the cache (the related global flag <code>--checkers</code> has no effect on the VFS).</p>\n<pre><code>--transfers int  Number of file transfers to run in parallel (default 4)</code></pre>\n<h2 id=\"vfs-case-sensitivity-1\">VFS Case Sensitivity</h2>\n<p>Linux file systems are case-sensitive: two files can differ only by case, and the exact case must be used when opening a file.</p>\n<p>File systems in modern Windows are case-insensitive but case-preserving: although existing files can be opened using any case, the exact case used to create the file is preserved and available for programs to query. It is not allowed for two files in the same directory to differ only by case.</p>\n<p>Usually file systems on macOS are case-insensitive. It is possible to make macOS file systems case-sensitive but that is not the default.</p>\n<p>The <code>--vfs-case-insensitive</code> VFS flag controls how rclone handles these two cases. If its value is \"false\", rclone passes file names to the remote as-is. If the flag is \"true\" (or appears without a value on the command line), rclone may perform a \"fixup\" as explained below.</p>\n<p>The user may specify a file name to open/delete/rename/etc with a case different than what is stored on the remote. If an argument refers to an existing file with exactly the same name, then the case of the existing file on the disk will be used. However, if a file name with exactly the same name is not found but a name differing only by case exists, rclone will transparently fixup the name. This fixup happens only when an existing file is requested. Case sensitivity of file names created anew by rclone is controlled by the underlying remote.</p>\n<p>Note that case sensitivity of the operating system running rclone (the target) may differ from case sensitivity of a file system presented by rclone (the source). The flag controls whether \"fixup\" is performed to satisfy the target.</p>\n<p>If the flag is not provided on the command line, then its default value depends on the operating system where rclone runs: \"true\" on Windows and macOS, \"false\" otherwise. If the flag is provided without a value, then it is \"true\".</p>\n<p>The <code>--no-unicode-normalization</code> flag controls whether a similar \"fixup\" is performed for filenames that differ but are <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">canonically equivalent</a> with respect to unicode. Unicode normalization can be particularly helpful for users of macOS, which prefers form NFD instead of the NFC used by most other platforms. It is therefore highly recommended to keep the default of <code>false</code> on macOS, to avoid encoding compatibility issues.</p>\n<p>In the (probably unlikely) event that a directory has multiple duplicate filenames after applying case and unicode normalization, the <code>--vfs-block-norm-dupes</code> flag allows hiding these duplicates. This comes with a performance tradeoff, as rclone will have to scan the entire directory for duplicates when listing a directory. For this reason, it is recommended to leave this disabled if not needed. However, macOS users may wish to consider using it, as otherwise, if a remote directory contains both NFC and NFD versions of the same filename, an odd situation will occur: both versions of the file will be visible in the mount, and both will appear to be editable, however, editing either version will actually result in only the NFD version getting edited under the hood. <code>--vfs-block- norm-dupes</code> prevents this confusion by detecting this scenario, hiding the duplicates, and logging an error, similar to how this is handled in <code>rclone sync</code>.</p>\n<h2 id=\"vfs-disk-options-1\">VFS Disk Options</h2>\n<p>This flag allows you to manually set the statistics about the filing system. It can be useful when those statistics cannot be read correctly automatically.</p>\n<pre><code>--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)</code></pre>\n<h2 id=\"alternate-report-of-used-bytes-1\">Alternate report of used bytes</h2>\n<p>Some backends, most notably S3, do not report the amount of bytes used. If you need this information to be available when running <code>df</code> on the filesystem, then pass the flag <code>--vfs-used-is-size</code> to rclone. With this flag set, instead of relying on the backend to report this information, rclone will scan the whole remote similar to <code>rclone size</code> and compute the total used space itself.</p>\n<p><em>WARNING.</em> Contrary to <code>rclone size</code>, this flag ignores filters so that the result is accurate. However, this is very inefficient and may cost lots of API calls resulting in extra charges. Use it as a last resort and only with caching.</p>\n<pre><code>rclone nfsmount remote:path /path/to/mountpoint [flags]</code></pre>\n<h2 id=\"options-63\">Options</h2>\n<pre><code>      --addr string                            IPaddress:Port or :Port to bind server to\n      --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n      --allow-other                            Allow access to other users (not supported on Windows)\n      --allow-root                             Allow access to root user (not supported on Windows)\n      --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n      --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n      --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n      --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n      --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n      --debug-fuse                             Debug the FUSE internals - needs -v\n      --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n      --devname string                         Set the device name - default is remote:path\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --direct-io                              Use Direct IO, disables caching of data\n      --file-perms FileMode                    File permissions (default 666)\n      --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for nfsmount\n      --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n      --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n      --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n      --nfs-cache-dir string                   The directory the NFS handle cache will use if set\n      --nfs-cache-handle-limit int             max file handles cached simultaneously (min 5) (default 1000000)\n      --nfs-cache-type memory|disk|symlink     Type of NFS handle cache to use (default memory)\n      --no-checksum                            Don&#39;t compare checksums on up/download\n      --no-modtime                             Don&#39;t read/write the modification time (can speed things up)\n      --no-seek                                Don&#39;t allow seeking in files\n      --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n      --noapplexattr                           Ignore all &quot;com.apple.*&quot; extended attributes (supported on OSX only)\n  -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --sudo                                   Use sudo to run the mount/umount commands as root.\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (&#39;off&#39; is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n      --volname string                         Set the volume name (supported on Windows and OSX only)\n      --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-22\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h2 id=\"see-also-63\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-obscure\">rclone obscure</h1>\n<p>Obscure password for use in the rclone config file.</p>\n<h2 id=\"synopsis-56\">Synopsis</h2>\n<p>In the rclone config file, human-readable passwords are obscured. Obscuring them is done by encrypting them and writing them out in base64. This is <strong>not</strong> a secure way of encrypting these passwords as rclone can decrypt them - it is to prevent \"eyedropping\" - namely someone seeing a password in the rclone config file by accident.</p>\n<p>Many equally important things (like access tokens) are not obscured in the config file. However it is very hard to shoulder surf a 64 character hex token.</p>\n<p>This command can also accept a password through STDIN instead of an argument by passing a hyphen as an argument. This will use the first line of STDIN as the password not including the trailing newline.</p>\n<pre><code>echo &quot;secretpassword&quot; | rclone obscure -</code></pre>\n<p>If there is no data on STDIN to read, rclone obscure will default to obfuscating the hyphen itself.</p>\n<p>If you want to encrypt the config file then please use config file encryption - see <a href=\"https://rclone.org/commands/rclone_config/\">rclone config</a> for more info.</p>\n<pre><code>rclone obscure password [flags]</code></pre>\n<h2 id=\"options-64\">Options</h2>\n<pre><code>  -h, --help   help for obscure</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-64\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-rc\">rclone rc</h1>\n<p>Run a command against a running rclone.</p>\n<h2 id=\"synopsis-57\">Synopsis</h2>\n<p>This runs a command against a running rclone. Use the <code>--url</code> flag to specify an non default URL to connect on. This can be either a \":port\" which is taken to mean \"http://localhost:port\" or a \"host:port\" which is taken to mean \"http://host:port\"</p>\n<p>A username and password can be passed in with <code>--user</code> and <code>--pass</code>.</p>\n<p>Note that <code>--rc-addr</code>, <code>--rc-user</code>, <code>--rc-pass</code> will be read also for <code>--url</code>, <code>--user</code>, <code>--pass</code>.</p>\n<p>The <code>--unix-socket</code> flag can be used to connect over a unix socket like this</p>\n<pre><code># start server on /tmp/my.socket\nrclone rcd --rc-addr unix:///tmp/my.socket\n# Connect to it\nrclone rc --unix-socket /tmp/my.socket core/stats</code></pre>\n<p>Arguments should be passed in as parameter=value.</p>\n<p>The result will be returned as a JSON object by default.</p>\n<p>The <code>--json</code> parameter can be used to pass in a JSON blob as an input instead of key=value arguments. This is the only way of passing in more complicated values.</p>\n<p>The <code>-o</code>/<code>--opt</code> option can be used to set a key \"opt\" with key, value options in the form <code>-o key=value</code> or <code>-o key</code>. It can be repeated as many times as required. This is useful for rc commands which take the \"opt\" parameter which by convention is a dictionary of strings.</p>\n<pre><code>-o key=value -o key2</code></pre>\n<p>Will place this in the \"opt\" value</p>\n<pre><code>{&quot;key&quot;:&quot;value&quot;, &quot;key2&quot;,&quot;&quot;)</code></pre>\n<p>The <code>-a</code>/<code>--arg</code> option can be used to set strings in the \"arg\" value. It can be repeated as many times as required. This is useful for rc commands which take the \"arg\" parameter which by convention is a list of strings.</p>\n<pre><code>-a value -a value2</code></pre>\n<p>Will place this in the \"arg\" value</p>\n<pre><code>[&quot;value&quot;, &quot;value2&quot;]</code></pre>\n<p>Use <code>--loopback</code> to connect to the rclone instance running <code>rclone rc</code>. This is very useful for testing commands without having to run an rclone rc server, e.g.:</p>\n<pre><code>rclone rc --loopback operations/about fs=/</code></pre>\n<p>Use <code>rclone rc</code> to see a list of all possible commands.</p>\n<pre><code>rclone rc commands parameter [flags]</code></pre>\n<h2 id=\"options-65\">Options</h2>\n<pre><code>  -a, --arg stringArray      Argument placed in the &quot;arg&quot; array\n  -h, --help                 help for rc\n      --json string          Input JSON - use instead of key=value args\n      --loopback             If set connect to this rclone instance not via HTTP\n      --no-output            If set, don&#39;t output the JSON result\n  -o, --opt stringArray      Option in the form name=value or name placed in the &quot;opt&quot; array\n      --pass string          Password to use to connect to rclone remote control\n      --unix-socket string   Path to a unix domain socket to dial to, instead of opening a TCP connection directly\n      --url string           URL to connect to rclone remote control (default &quot;http://localhost:5572/&quot;)\n      --user string          Username to use to rclone remote control</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-65\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-rcat\">rclone rcat</h1>\n<p>Copies standard input to file on remote.</p>\n<h2 id=\"synopsis-58\">Synopsis</h2>\n<p>Reads from standard input (stdin) and copies it to a single remote file.</p>\n<pre><code>echo &quot;hello world&quot; | rclone rcat remote:path/to/file\nffmpeg - | rclone rcat remote:path/to/file</code></pre>\n<p>If the remote file already exists, it will be overwritten.</p>\n<p>rcat will try to upload small files in a single request, which is usually more efficient than the streaming/chunked upload endpoints, which use multiple requests. Exact behaviour depends on the remote. What is considered a small file may be set through <code>--streaming-upload-cutoff</code>. Uploading only starts after the cutoff is reached or if the file ends before that. The data must fit into RAM. The cutoff needs to be small enough to adhere the limits of your remote, please see there. Generally speaking, setting this cutoff too high will decrease your performance.</p>\n<p>Use the <code>--size</code> flag to preallocate the file in advance at the remote end and actually stream it, even if remote backend doesn't support streaming.</p>\n<p><code>--size</code> should be the exact size of the input stream in bytes. If the size of the stream is different in length to the <code>--size</code> passed in then the transfer will likely fail.</p>\n<p>Note that the upload cannot be retried because the data is not stored. If the backend supports multipart uploading then individual chunks can be retried. If you need to transfer a lot of data, you may be better off caching it locally and then <code>rclone move</code> it to the destination which can use retries.</p>\n<pre><code>rclone rcat remote:path [flags]</code></pre>\n<h2 id=\"options-66\">Options</h2>\n<pre><code>  -h, --help       help for rcat\n      --size int   File size hint to preallocate (default -1)</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-15\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h2 id=\"see-also-66\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-rcd\">rclone rcd</h1>\n<p>Run rclone listening to remote control commands only.</p>\n<h2 id=\"synopsis-59\">Synopsis</h2>\n<p>This runs rclone so that it only listens to remote control commands.</p>\n<p>This is useful if you are controlling rclone via the rc API.</p>\n<p>If you pass in a path to a directory, rclone will serve that directory for GET requests on the URL passed in. It will also open the URL in the browser when rclone is run.</p>\n<p>See the <a href=\"https://rclone.org/rc/\">rc documentation</a> for more info on the rc flags.</p>\n<h2 id=\"server-options\">Server options</h2>\n<p>Use <code>--rc-addr</code> to specify which IP address and port the server should listen on, eg <code>--rc-addr 1.2.3.4:8000</code> or <code>--rc-addr :8080</code> to listen to all IPs. By default it only listens on localhost. You can use port :0 to let the OS choose an available port.</p>\n<p>If you set <code>--rc-addr</code> to listen on a public or LAN accessible IP address then using Authentication is advised - see the next section for info.</p>\n<p>You can use a unix socket by setting the url to <code>unix:///path/to/socket</code> or just by using an absolute path name. Note that unix sockets bypass the authentication - this is expected to be done with file system permissions.</p>\n<p><code>--rc-addr</code> may be repeated to listen on multiple IPs/ports/sockets. Socket activation, described further below, can also be used to accomplish the same.</p>\n<p><code>--rc-server-read-timeout</code> and <code>--rc-server-write-timeout</code> can be used to control the timeouts on the server. Note that this is the total time for a transfer.</p>\n<p><code>--rc-max-header-bytes</code> controls the maximum number of bytes the server will accept in the HTTP header.</p>\n<p><code>--rc-baseurl</code> controls the URL prefix that rclone serves from. By default rclone will serve from the root. If you used <code>--rc-baseurl \"/rclone\"</code> then rclone would serve from a URL starting with \"/rclone/\". This is useful if you wish to proxy rclone serve. Rclone automatically inserts leading and trailing \"/\" on <code>--rc-baseurl</code>, so <code>--rc-baseurl \"rclone\"</code>, <code>--rc-baseurl \"/rclone\"</code> and <code>--rc-baseurl \"/rclone/\"</code> are all treated identically.</p>\n<h3 id=\"tls-ssl\">TLS (SSL)</h3>\n<p>By default this will serve over http. If you want you can serve over https. You will need to supply the <code>--rc-cert</code> and <code>--rc-key</code> flags. If you wish to do client side certificate validation then you will need to supply <code>--rc-client-ca</code> also.</p>\n<p><code>--rc-cert</code> should be a either a PEM encoded certificate or a concatenation of that with the CA certificate. <code>--krc-ey</code> should be the PEM encoded private key and <code>--rc-client-ca</code> should be the PEM encoded client certificate authority certificate.</p>\n<p><code>--rc-min-tls-version</code> is minimum TLS version that is acceptable. Valid values are \"tls1.0\", \"tls1.1\", \"tls1.2\" and \"tls1.3\" (default \"tls1.0\").</p>\n<h2 id=\"socket-activation\">Socket activation</h2>\n<p>Instead of the listening addresses specified above, rclone will listen to all FDs passed by the service manager, if any (and ignore any arguments passed by --rc-addr`).</p>\n<p>This allows rclone to be a socket-activated service. It can be configured with .socket and .service unit files as described in https://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html</p>\n<p>Socket activation can be tested ad-hoc with the <code>systemd-socket-activate</code>command</p>\n<pre><code>   systemd-socket-activate -l 8000 -- rclone serve</code></pre>\n<p>This will socket-activate rclone on the first connection to port 8000 over TCP. ### Template</p>\n<p><code>--rc-template</code> allows a user to specify a custom markup template for HTTP and WebDAV serve functions. The server exports the following markup to be used within the template to server pages:</p>\n<table>\n<colgroup>\n<col style=\"width: 50%\" />\n<col style=\"width: 50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Parameter</th>\n<th style=\"text-align: left;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">.Name</td>\n<td style=\"text-align: left;\">The full path of a file/directory.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">.Title</td>\n<td style=\"text-align: left;\">Directory listing of .Name</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">.Sort</td>\n<td style=\"text-align: left;\">The current sort used. This is changeable via ?sort= parameter</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: left;\">Sort Options: namedirfirst,name,size,time (default namedirfirst)</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">.Order</td>\n<td style=\"text-align: left;\">The current ordering used. This is changeable via ?order= parameter</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: left;\">Order Options: asc,desc (default asc)</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">.Query</td>\n<td style=\"text-align: left;\">Currently unused.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">.Breadcrumb</td>\n<td style=\"text-align: left;\">Allows for creating a relative navigation</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-- .Link</td>\n<td style=\"text-align: left;\">The relative to the root link of the Text.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-- .Text</td>\n<td style=\"text-align: left;\">The Name of the directory.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">.Entries</td>\n<td style=\"text-align: left;\">Information about a specific file/directory.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-- .URL</td>\n<td style=\"text-align: left;\">The 'url' of an entry.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-- .Leaf</td>\n<td style=\"text-align: left;\">Currently same as 'URL' but intended to be 'just' the name.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-- .IsDir</td>\n<td style=\"text-align: left;\">Boolean for if an entry is a directory or not.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-- .Size</td>\n<td style=\"text-align: left;\">Size in Bytes of the entry.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-- .ModTime</td>\n<td style=\"text-align: left;\">The UTC timestamp of an entry.</td>\n</tr>\n</tbody>\n</table>\n<p>The server also makes the following functions available so that they can be used within the template. These functions help extend the options for dynamic rendering of HTML. They can be used to render HTML based on specific conditions.</p>\n<table>\n<colgroup>\n<col style=\"width: 50%\" />\n<col style=\"width: 50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Function</th>\n<th style=\"text-align: left;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">afterEpoch</td>\n<td style=\"text-align: left;\">Returns the time since the epoch for the given time.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">contains</td>\n<td style=\"text-align: left;\">Checks whether a given substring is present or not in a given string.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">hasPrefix</td>\n<td style=\"text-align: left;\">Checks whether the given string begins with the specified prefix.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">hasSuffix</td>\n<td style=\"text-align: left;\">Checks whether the given string end with the specified suffix.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"authentication\">Authentication</h3>\n<p>By default this will serve files without needing a login.</p>\n<p>You can either use an htpasswd file which can take lots of users, or set a single username and password with the <code>--rc-user</code> and <code>--rc-pass</code> flags.</p>\n<p>If no static users are configured by either of the above methods, and client certificates are required by the <code>--client-ca</code> flag passed to the server, the client certificate common name will be considered as the username.</p>\n<p>Use <code>--rc-htpasswd /path/to/htpasswd</code> to provide an htpasswd file. This is in standard apache format and supports MD5, SHA1 and BCrypt for basic authentication. Bcrypt is recommended.</p>\n<p>To create an htpasswd file:</p>\n<pre><code>touch htpasswd\nhtpasswd -B htpasswd user\nhtpasswd -B htpasswd anotherUser</code></pre>\n<p>The password file can be updated while rclone is running.</p>\n<p>Use <code>--rc-realm</code> to set the authentication realm.</p>\n<p>Use <code>--rc-salt</code> to change the password hashing salt from the default.</p>\n<pre><code>rclone rcd &lt;path to files to serve&gt;* [flags]</code></pre>\n<h2 id=\"options-67\">Options</h2>\n<pre><code>  -h, --help   help for rcd</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"rc-options\">RC Options</h3>\n<p>Flags to control the Remote Control API</p>\n<pre><code>      --rc                                 Enable the remote control server\n      --rc-addr stringArray                IPaddress:Port or :Port to bind server to (default [&quot;localhost:5572&quot;])\n      --rc-allow-origin string             Origin which cross-domain request (CORS) can be executed from\n      --rc-baseurl string                  Prefix for URLs - leave blank for root\n      --rc-cert string                     TLS PEM key (concatenation of certificate and CA certificate)\n      --rc-client-ca string                Client certificate authority to verify clients with\n      --rc-enable-metrics                  Enable the Prometheus metrics path at the remote control server\n      --rc-files string                    Path to local files to serve on the HTTP server\n      --rc-htpasswd string                 A htpasswd file - if not provided no authentication is done\n      --rc-job-expire-duration Duration    Expire finished async jobs older than this value (default 1m0s)\n      --rc-job-expire-interval Duration    Interval to check for expired async jobs (default 10s)\n      --rc-key string                      TLS PEM Private key\n      --rc-max-header-bytes int            Maximum size of request header (default 4096)\n      --rc-min-tls-version string          Minimum TLS version that is acceptable (default &quot;tls1.0&quot;)\n      --rc-no-auth                         Don&#39;t require auth for certain methods\n      --rc-pass string                     Password for authentication\n      --rc-realm string                    Realm for authentication\n      --rc-salt string                     Password hashing salt (default &quot;dlPL2MqE&quot;)\n      --rc-serve                           Enable the serving of remote objects\n      --rc-serve-no-modtime                Don&#39;t read the modification time (can speed things up)\n      --rc-server-read-timeout Duration    Timeout for server reading data (default 1h0m0s)\n      --rc-server-write-timeout Duration   Timeout for server writing data (default 1h0m0s)\n      --rc-template string                 User-specified template\n      --rc-user string                     User name for authentication\n      --rc-web-fetch-url string            URL to fetch the releases for webgui (default &quot;https://api.github.com/repos/rclone/rclone-webui-react/releases/latest&quot;)\n      --rc-web-gui                         Launch WebGUI on localhost\n      --rc-web-gui-force-update            Force update to latest version of web gui\n      --rc-web-gui-no-open-browser         Don&#39;t open the browser automatically\n      --rc-web-gui-update                  Check and update to latest version of web gui</code></pre>\n<h2 id=\"see-also-67\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-rmdirs\">rclone rmdirs</h1>\n<p>Remove empty directories under the path.</p>\n<h2 id=\"synopsis-60\">Synopsis</h2>\n<p>This recursively removes any empty directories (including directories that only contain empty directories), that it finds under the path. The root path itself will also be removed if it is empty, unless you supply the <code>--leave-root</code> flag.</p>\n<p>Use command <a href=\"https://rclone.org/commands/rclone_rmdir/\">rmdir</a> to delete just the empty directory given by path, not recurse.</p>\n<p>This is useful for tidying up remotes that rclone has left a lot of empty directories in. For example the <a href=\"https://rclone.org/commands/rclone_delete/\">delete</a> command will delete files but leave the directory structure (unless used with option <code>--rmdirs</code>).</p>\n<p>This will delete <code>--checkers</code> directories concurrently so if you have thousands of empty directories consider increasing this number.</p>\n<p>To delete a path and any objects in it, use the <a href=\"https://rclone.org/commands/rclone_purge/\">purge</a> command.</p>\n<pre><code>rclone rmdirs remote:path [flags]</code></pre>\n<h2 id=\"options-68\">Options</h2>\n<pre><code>  -h, --help         help for rmdirs\n      --leave-root   Do not remove root directory if empty</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"important-options-16\">Important Options</h3>\n<p>Important flags useful for most commands</p>\n<pre><code>  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)</code></pre>\n<h2 id=\"see-also-68\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-selfupdate\">rclone selfupdate</h1>\n<p>Update the rclone binary.</p>\n<h2 id=\"synopsis-61\">Synopsis</h2>\n<p>This command downloads the latest release of rclone and replaces the currently running binary. The download is verified with a hashsum and cryptographically signed signature; see <a href=\"https://rclone.org/release_signing/\">the release signing docs</a> for details.</p>\n<p>If used without flags (or with implied <code>--stable</code> flag), this command will install the latest stable release. However, some issues may be fixed (or features added) only in the latest beta release. In such cases you should run the command with the <code>--beta</code> flag, i.e. <code>rclone selfupdate --beta</code>. You can check in advance what version would be installed by adding the <code>--check</code> flag, then repeat the command without it when you are satisfied.</p>\n<p>Sometimes the rclone team may recommend you a concrete beta or stable rclone release to troubleshoot your issue or add a bleeding edge feature. The <code>--version VER</code> flag, if given, will update to the concrete version instead of the latest one. If you omit micro version from <code>VER</code> (for example <code>1.53</code>), the latest matching micro version will be used.</p>\n<p>Upon successful update rclone will print a message that contains a previous version number. You will need it if you later decide to revert your update for some reason. Then you'll have to note the previous version and run the following command: <code>rclone selfupdate [--beta] OLDVER</code>. If the old version contains only dots and digits (for example <code>v1.54.0</code>) then it's a stable release so you won't need the <code>--beta</code> flag. Beta releases have an additional information similar to <code>v1.54.0-beta.5111.06f1c0c61</code>. (if you are a developer and use a locally built rclone, the version number will end with <code>-DEV</code>, you will have to rebuild it as it obviously can't be distributed).</p>\n<p>If you previously installed rclone via a package manager, the package may include local documentation or configure services. You may wish to update with the flag <code>--package deb</code> or <code>--package rpm</code> (whichever is correct for your OS) to update these too. This command with the default <code>--package zip</code> will update only the rclone executable so the local manual may become inaccurate after it.</p>\n<p>The <a href=\"https://rclone.org/commands/rclone_mount/\">rclone mount</a> command may or may not support extended FUSE options depending on the build and OS. <code>selfupdate</code> will refuse to update if the capability would be discarded.</p>\n<p>Note: Windows forbids deletion of a currently running executable so this command will rename the old executable to 'rclone.old.exe' upon success.</p>\n<p>Please note that this command was not available before rclone version 1.55. If it fails for you with the message <code>unknown command \"selfupdate\"</code> then you will need to update manually following the install instructions located at https://rclone.org/install/</p>\n<pre><code>rclone selfupdate [flags]</code></pre>\n<h2 id=\"options-69\">Options</h2>\n<pre><code>      --beta             Install beta release\n      --check            Check for latest release, do not download\n  -h, --help             help for selfupdate\n      --output string    Save the downloaded binary at a given path (default: replace running binary)\n      --package string   Package format: zip|deb|rpm (default: zip)\n      --stable           Install stable release (this is the default)\n      --version string   Install the given rclone version (default: latest)</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-69\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n</ul>\n<h1 id=\"rclone-serve\">rclone serve</h1>\n<p>Serve a remote over a protocol.</p>\n<h2 id=\"synopsis-62\">Synopsis</h2>\n<p>Serve a remote over a given protocol. Requires the use of a subcommand to specify the protocol, e.g.</p>\n<pre><code>rclone serve http remote:</code></pre>\n<p>Each subcommand has its own options which you can see in their help.</p>\n<pre><code>rclone serve &lt;protocol&gt; [opts] &lt;remote&gt; [flags]</code></pre>\n<h2 id=\"options-70\">Options</h2>\n<pre><code>  -h, --help   help for serve</code></pre>\n<p>See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h2 id=\"see-also-70\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone/\">rclone</a> - Show help for rclone commands, flags and backends.</li>\n<li><a href=\"https://rclone.org/commands/rclone_serve_dlna/\">rclone serve dlna</a> - Serve remote:path over DLNA</li>\n<li><a href=\"https://rclone.org/commands/rclone_serve_docker/\">rclone serve docker</a> - Serve any remote on docker's volume plugin API.</li>\n<li><a href=\"https://rclone.org/commands/rclone_serve_ftp/\">rclone serve ftp</a> - Serve remote:path over FTP.</li>\n<li><a href=\"https://rclone.org/commands/rclone_serve_http/\">rclone serve http</a> - Serve the remote over HTTP.</li>\n<li><a href=\"https://rclone.org/commands/rclone_serve_nfs/\">rclone serve nfs</a> - Serve the remote as an NFS mount</li>\n<li><a href=\"https://rclone.org/commands/rclone_serve_restic/\">rclone serve restic</a> - Serve the remote for restic's REST API.</li>\n<li><a href=\"https://rclone.org/commands/rclone_serve_s3/\">rclone serve s3</a> - Serve remote:path over s3.</li>\n<li><a href=\"https://rclone.org/commands/rclone_serve_sftp/\">rclone serve sftp</a> - Serve the remote over SFTP.</li>\n<li><a href=\"https://rclone.org/commands/rclone_serve_webdav/\">rclone serve webdav</a> - Serve remote:path over WebDAV.</li>\n</ul>\n<h1 id=\"rclone-serve-dlna\">rclone serve dlna</h1>\n<p>Serve remote:path over DLNA</p>\n<h2 id=\"synopsis-63\">Synopsis</h2>\n<p>Run a DLNA media server for media stored in an rclone remote. Many devices, such as the Xbox and PlayStation, can automatically discover this server in the LAN and play audio/video from it. VLC is also supported. Service discovery uses UDP multicast packets (SSDP) and will thus only work on LANs.</p>\n<p>Rclone will list all files present in the remote, without filtering based on media formats or file extensions. Additionally, there is no media transcoding support. This means that some players might show files that they are not able to play back correctly.</p>\n<p>Rclone will add external subtitle files (.srt) to videos if they have the same filename as the video file itself (except the extension), either in the same directory as the video, or in a \"Subs\" subdirectory.</p>\n<h2 id=\"server-options-1\">Server options</h2>\n<p>Use <code>--addr</code> to specify which IP address and port the server should listen on, e.g. <code>--addr 1.2.3.4:8000</code> or <code>--addr :8080</code> to listen to all IPs.</p>\n<p>Use <code>--name</code> to choose the friendly server name, which is by default \"rclone (hostname)\".</p>\n<p>Use <code>--log-trace</code> in conjunction with <code>-vv</code> to enable additional debug logging of all UPNP traffic.</p>\n<h2 id=\"vfs---virtual-file-system-2\">VFS - Virtual File System</h2>\n<p>This command uses the VFS layer. This adapts the cloud storage objects that rclone uses into something which looks much more like a disk filing system.</p>\n<p>Cloud storage objects have lots of properties which aren't like disk files - you can't extend them or write to the middle of them, so the VFS layer has to deal with that. Because there is no one right way of doing this there are various options explained below.</p>\n<p>The VFS layer also implements a directory cache - this caches info about files and directories (but not the data) in memory.</p>\n<h2 id=\"vfs-directory-cache-2\">VFS Directory Cache</h2>\n<p>Using the <code>--dir-cache-time</code> flag, you can control how long a directory should be considered up to date and not refreshed from the backend. Changes made through the VFS will appear immediately or invalidate the cache.</p>\n<pre><code>--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)</code></pre>\n<p>However, changes made directly on the cloud storage by the web interface or a different copy of rclone will only be picked up once the directory cache expires if the backend configured does not support polling for changes. If the backend supports polling, changes will be picked up within the polling interval.</p>\n<p>You can send a <code>SIGHUP</code> signal to rclone for it to flush all directory caches, regardless of how old they are. Assuming only one rclone instance is running, you can reset the cache like this:</p>\n<pre><code>kill -SIGHUP $(pidof rclone)</code></pre>\n<p>If you configure rclone with a <a href=\"/rc\">remote control</a> then you can use rclone rc to flush the whole directory cache:</p>\n<pre><code>rclone rc vfs/forget</code></pre>\n<p>Or individual files or directories:</p>\n<pre><code>rclone rc vfs/forget file=path/to/file dir=path/to/dir</code></pre>\n<h2 id=\"vfs-file-buffering-2\">VFS File Buffering</h2>\n<p>The <code>--buffer-size</code> flag determines the amount of memory, that will be used to buffer data in advance.</p>\n<p>Each open file will try to keep the specified amount of data in memory at all times. The buffered data is bound to one open file and won't be shared.</p>\n<p>This flag is a upper limit for the used memory per open file. The buffer will only use memory for data that is downloaded but not not yet read. If the buffer is empty, only a small amount of memory will be used.</p>\n<p>The maximum memory used by rclone for buffering can be up to <code>--buffer-size * open files</code>.</p>\n<h2 id=\"vfs-file-caching-2\">VFS File Caching</h2>\n<p>These flags control the VFS file caching options. File caching is necessary to make the VFS layer appear compatible with a normal file system. It can be disabled at the cost of some compatibility.</p>\n<p>For example you'll need to enable VFS caching if you want to read and write simultaneously to a file. See below for more details.</p>\n<p>Note that the VFS cache is separate from the cache backend and you may find that you need one or the other or both.</p>\n<pre><code>--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)</code></pre>\n<p>If run with <code>-vv</code> rclone will print the location of the file cache. The files are stored in the user cache file area which is OS dependent but can be controlled with <code>--cache-dir</code> or setting the appropriate environment variable.</p>\n<p>The cache has 4 different modes selected by <code>--vfs-cache-mode</code>. The higher the cache mode the more compatible rclone becomes at the cost of using disk space.</p>\n<p>Note that files are written back to the remote only when they are closed and if they haven't been accessed for <code>--vfs-write-back</code> seconds. If rclone is quit or dies with files that haven't been uploaded, these will be uploaded next time rclone is run with the same flags.</p>\n<p>If using <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> note that the cache may exceed these quotas for two reasons. Firstly because it is only checked every <code>--vfs-cache-poll-interval</code>. Secondly because open files cannot be evicted from the cache. When <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> is exceeded, rclone will attempt to evict the least accessed files from the cache first. rclone will start with files that haven't been accessed for the longest. This cache flushing strategy is efficient and more relevant files are likely to remain cached.</p>\n<p>The <code>--vfs-cache-max-age</code> will evict files from the cache after the set time since last access has passed. The default value of 1 hour will start evicting files from cache that haven't been accessed for 1 hour. When a cached file is accessed the 1 hour timer is reset to 0 and will wait for 1 more hour before evicting. Specify the time with standard notation, s, m, h, d, w .</p>\n<p>You <strong>should not</strong> run two copies of rclone using the same VFS cache with the same or overlapping remotes if using <code>--vfs-cache-mode &gt; off</code>. This can potentially cause data corruption if you do. You can work around this by giving each rclone its own cache hierarchy with <code>--cache-dir</code>. You don't need to worry about this if the remotes in use don't overlap.</p>\n<h3 id=\"vfs-cache-mode-off-2\">--vfs-cache-mode off</h3>\n<p>In this mode (the default) the cache will read directly from the remote and write directly to the remote without caching anything on disk.</p>\n<p>This will mean some operations are not possible</p>\n<ul>\n<li>Files can't be opened for both read AND write</li>\n<li>Files opened for write can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files open for read with O_TRUNC will be opened write only</li>\n<li>Files open for write only will behave as if O_TRUNC was supplied</li>\n<li>Open modes O_APPEND, O_TRUNC are ignored</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-minimal-2\">--vfs-cache-mode minimal</h3>\n<p>This is very similar to \"off\" except that files opened for read AND write will be buffered to disk. This means that files opened for write will be a lot more compatible, but uses the minimal disk space.</p>\n<p>These operations are not possible</p>\n<ul>\n<li>Files opened for write only can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files opened for write only will ignore O_APPEND, O_TRUNC</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-writes-2\">--vfs-cache-mode writes</h3>\n<p>In this mode files opened for read only are still read directly from the remote, write only and read/write files are buffered to disk first.</p>\n<p>This mode should support all normal file system operations.</p>\n<p>If an upload fails it will be retried at exponentially increasing intervals up to 1 minute.</p>\n<h3 id=\"vfs-cache-mode-full-2\">--vfs-cache-mode full</h3>\n<p>In this mode all reads and writes are buffered to and from disk. When data is read from the remote this is buffered to disk as well.</p>\n<p>In this mode the files in the cache will be sparse files and rclone will keep track of which bits of the files it has downloaded.</p>\n<p>So if an application only reads the starts of each file, then rclone will only buffer the start of the file. These files will appear to be their full size in the cache, but they will be sparse files with only the data that has been downloaded present in them.</p>\n<p>This mode should support all normal file system operations and is otherwise identical to <code>--vfs-cache-mode</code> writes.</p>\n<p>When reading a file rclone will read <code>--buffer-size</code> plus <code>--vfs-read-ahead</code> bytes ahead. The <code>--buffer-size</code> is buffered in memory whereas the <code>--vfs-read-ahead</code> is buffered on disk.</p>\n<p>When using this mode it is recommended that <code>--buffer-size</code> is not set too large and <code>--vfs-read-ahead</code> is set large if required.</p>\n<p><strong>IMPORTANT</strong> not all file systems support sparse files. In particular FAT/exFAT do not. Rclone will perform very badly if the cache directory is on a filesystem which doesn't support sparse files and it will log an ERROR message if one is detected.</p>\n<h3 id=\"fingerprinting-2\">Fingerprinting</h3>\n<p>Various parts of the VFS use fingerprinting to see if a local file copy has changed relative to a remote file. Fingerprints are made from:</p>\n<ul>\n<li>size</li>\n<li>modification time</li>\n<li>hash</li>\n</ul>\n<p>where available on an object.</p>\n<p>On some backends some of these attributes are slow to read (they take an extra API call per object, or extra work per object).</p>\n<p>For example <code>hash</code> is slow with the <code>local</code> and <code>sftp</code> backends as they have to read the entire file and hash it, and <code>modtime</code> is slow with the <code>s3</code>, <code>swift</code>, <code>ftp</code> and <code>qinqstor</code> backends because they need to do an extra API call to fetch it.</p>\n<p>If you use the <code>--vfs-fast-fingerprint</code> flag then rclone will not include the slow operations in the fingerprint. This makes the fingerprinting less accurate but much faster and will improve the opening time of cached files.</p>\n<p>If you are running a vfs cache over <code>local</code>, <code>s3</code> or <code>swift</code> backends then using this flag is recommended.</p>\n<p>Note that if you change the value of this flag, the fingerprints of the files in the cache may be invalidated and the files will need to be downloaded again.</p>\n<h2 id=\"vfs-chunked-reading-2\">VFS Chunked Reading</h2>\n<p>When rclone reads files from a remote it reads them in chunks. This means that rather than requesting the whole file rclone reads the chunk specified. This can reduce the used download quota for some remotes by requesting only chunks from the remote that are actually read, at the cost of an increased number of requests.</p>\n<p>These flags control the chunking:</p>\n<pre><code>--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once</code></pre>\n<p>The chunking behaves differently depending on the <code>--vfs-read-chunk-streams</code> parameter.</p>\n<h3 id=\"vfs-read-chunk-streams-0-4\"><code>--vfs-read-chunk-streams</code> == 0</h3>\n<p>Rclone will start reading a chunk of size <code>--vfs-read-chunk-size</code>, and then double the size for each read. When <code>--vfs-read-chunk-size-limit</code> is specified, and greater than <code>--vfs-read-chunk-size</code>, the chunk size for each open file will get doubled only until the specified value is reached. If the value is \"off\", which is the default, the limit is disabled and the chunk size will grow indefinitely.</p>\n<p>With <code>--vfs-read-chunk-size 100M</code> and <code>--vfs-read-chunk-size-limit 0</code> the following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on. When <code>--vfs-read-chunk-size-limit 500M</code> is specified, the result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.</p>\n<p>Setting <code>--vfs-read-chunk-size</code> to <code>0</code> or \"off\" disables chunked reading.</p>\n<p>The chunks will not be buffered in memory.</p>\n<h3 id=\"vfs-read-chunk-streams-0-5\"><code>--vfs-read-chunk-streams</code> &gt; 0</h3>\n<p>Rclone reads <code>--vfs-read-chunk-streams</code> chunks of size <code>--vfs-read-chunk-size</code> concurrently. The size for each read will stay constant.</p>\n<p>This improves performance performance massively on high latency links or very high bandwidth links to high performance object stores.</p>\n<p>Some experimentation will be needed to find the optimum values of <code>--vfs-read-chunk-size</code> and <code>--vfs-read-chunk-streams</code> as these will depend on the backend in use and the latency to the backend.</p>\n<p>For high performance object stores (eg AWS S3) a reasonable place to start might be <code>--vfs-read-chunk-streams 16</code> and <code>--vfs-read-chunk-size 4M</code>. In testing with AWS S3 the performance scaled roughly as the <code>--vfs-read-chunk-streams</code> setting.</p>\n<p>Similar settings should work for high latency links, but depending on the latency they may need more <code>--vfs-read-chunk-streams</code> in order to get the throughput.</p>\n<h2 id=\"vfs-performance-2\">VFS Performance</h2>\n<p>These flags may be used to enable/disable features of the VFS for performance or other reasons. See also the <a href=\"#vfs-chunked-reading\">chunked reading</a> feature.</p>\n<p>In particular S3 and Swift benefit hugely from the <code>--no-modtime</code> flag (or use <code>--use-server-modtime</code> for a slightly different effect) as each read of the modification time takes a transaction.</p>\n<pre><code>--no-checksum     Don&#39;t compare checksums on up/download.\n--no-modtime      Don&#39;t read/write the modification time (can speed things up).\n--no-seek         Don&#39;t allow seeking in files.\n--read-only       Only allow read-only access.</code></pre>\n<p>Sometimes rclone is delivered reads or writes out of order. Rather than seeking rclone will wait a short time for the in sequence read or write to come in. These flags only come into effect when not using an on disk cache file.</p>\n<pre><code>--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)</code></pre>\n<p>When using VFS write caching (<code>--vfs-cache-mode</code> with value writes or full), the global flag <code>--transfers</code> can be set to adjust the number of parallel uploads of modified files from the cache (the related global flag <code>--checkers</code> has no effect on the VFS).</p>\n<pre><code>--transfers int  Number of file transfers to run in parallel (default 4)</code></pre>\n<h2 id=\"vfs-case-sensitivity-2\">VFS Case Sensitivity</h2>\n<p>Linux file systems are case-sensitive: two files can differ only by case, and the exact case must be used when opening a file.</p>\n<p>File systems in modern Windows are case-insensitive but case-preserving: although existing files can be opened using any case, the exact case used to create the file is preserved and available for programs to query. It is not allowed for two files in the same directory to differ only by case.</p>\n<p>Usually file systems on macOS are case-insensitive. It is possible to make macOS file systems case-sensitive but that is not the default.</p>\n<p>The <code>--vfs-case-insensitive</code> VFS flag controls how rclone handles these two cases. If its value is \"false\", rclone passes file names to the remote as-is. If the flag is \"true\" (or appears without a value on the command line), rclone may perform a \"fixup\" as explained below.</p>\n<p>The user may specify a file name to open/delete/rename/etc with a case different than what is stored on the remote. If an argument refers to an existing file with exactly the same name, then the case of the existing file on the disk will be used. However, if a file name with exactly the same name is not found but a name differing only by case exists, rclone will transparently fixup the name. This fixup happens only when an existing file is requested. Case sensitivity of file names created anew by rclone is controlled by the underlying remote.</p>\n<p>Note that case sensitivity of the operating system running rclone (the target) may differ from case sensitivity of a file system presented by rclone (the source). The flag controls whether \"fixup\" is performed to satisfy the target.</p>\n<p>If the flag is not provided on the command line, then its default value depends on the operating system where rclone runs: \"true\" on Windows and macOS, \"false\" otherwise. If the flag is provided without a value, then it is \"true\".</p>\n<p>The <code>--no-unicode-normalization</code> flag controls whether a similar \"fixup\" is performed for filenames that differ but are <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">canonically equivalent</a> with respect to unicode. Unicode normalization can be particularly helpful for users of macOS, which prefers form NFD instead of the NFC used by most other platforms. It is therefore highly recommended to keep the default of <code>false</code> on macOS, to avoid encoding compatibility issues.</p>\n<p>In the (probably unlikely) event that a directory has multiple duplicate filenames after applying case and unicode normalization, the <code>--vfs-block-norm-dupes</code> flag allows hiding these duplicates. This comes with a performance tradeoff, as rclone will have to scan the entire directory for duplicates when listing a directory. For this reason, it is recommended to leave this disabled if not needed. However, macOS users may wish to consider using it, as otherwise, if a remote directory contains both NFC and NFD versions of the same filename, an odd situation will occur: both versions of the file will be visible in the mount, and both will appear to be editable, however, editing either version will actually result in only the NFD version getting edited under the hood. <code>--vfs-block- norm-dupes</code> prevents this confusion by detecting this scenario, hiding the duplicates, and logging an error, similar to how this is handled in <code>rclone sync</code>.</p>\n<h2 id=\"vfs-disk-options-2\">VFS Disk Options</h2>\n<p>This flag allows you to manually set the statistics about the filing system. It can be useful when those statistics cannot be read correctly automatically.</p>\n<pre><code>--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)</code></pre>\n<h2 id=\"alternate-report-of-used-bytes-2\">Alternate report of used bytes</h2>\n<p>Some backends, most notably S3, do not report the amount of bytes used. If you need this information to be available when running <code>df</code> on the filesystem, then pass the flag <code>--vfs-used-is-size</code> to rclone. With this flag set, instead of relying on the backend to report this information, rclone will scan the whole remote similar to <code>rclone size</code> and compute the total used space itself.</p>\n<p><em>WARNING.</em> Contrary to <code>rclone size</code>, this flag ignores filters so that the result is accurate. However, this is very inefficient and may cost lots of API calls resulting in extra charges. Use it as a last resort and only with caching.</p>\n<pre><code>rclone serve dlna remote:path [flags]</code></pre>\n<h2 id=\"options-71\">Options</h2>\n<pre><code>      --addr string                            The ip:port or :port to bind the DLNA http server to (default &quot;:7879&quot;)\n      --announce-interval Duration             The interval between SSDP announcements (default 12m0s)\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --file-perms FileMode                    File permissions (default 666)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for dlna\n      --interface stringArray                  The interface to use for SSDP (repeat as necessary)\n      --log-trace                              Enable trace logging of SOAP traffic\n      --name string                            Name of DLNA server\n      --no-checksum                            Don&#39;t compare checksums on up/download\n      --no-modtime                             Don&#39;t read/write the modification time (can speed things up)\n      --no-seek                                Don&#39;t allow seeking in files\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (&#39;off&#39; is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-23\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h2 id=\"see-also-71\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_serve/\">rclone serve</a> - Serve a remote over a protocol.</li>\n</ul>\n<h1 id=\"rclone-serve-docker\">rclone serve docker</h1>\n<p>Serve any remote on docker's volume plugin API.</p>\n<h2 id=\"synopsis-64\">Synopsis</h2>\n<p>This command implements the Docker volume plugin API allowing docker to use rclone as a data storage mechanism for various cloud providers. rclone provides <a href=\"/docker\">docker volume plugin</a> based on it.</p>\n<p>To create a docker plugin, one must create a Unix or TCP socket that Docker will look for when you use the plugin and then it listens for commands from docker daemon and runs the corresponding code when necessary. Docker plugins can run as a managed plugin under control of the docker daemon or as an independent native service. For testing, you can just run it directly from the command line, for example:</p>\n<pre><code>sudo rclone serve docker --base-dir /tmp/rclone-volumes --socket-addr localhost:8787 -vv</code></pre>\n<p>Running <code>rclone serve docker</code> will create the said socket, listening for commands from Docker to create the necessary Volumes. Normally you need not give the <code>--socket-addr</code> flag. The API will listen on the unix domain socket at <code>/run/docker/plugins/rclone.sock</code>. In the example above rclone will create a TCP socket and a small file <code>/etc/docker/plugins/rclone.spec</code> containing the socket address. We use <code>sudo</code> because both paths are writeable only by the root user.</p>\n<p>If you later decide to change listening socket, the docker daemon must be restarted to reconnect to <code>/run/docker/plugins/rclone.sock</code> or parse new <code>/etc/docker/plugins/rclone.spec</code>. Until you restart, any volume related docker commands will timeout trying to access the old socket. Running directly is supported on <strong>Linux only</strong>, not on Windows or MacOS. This is not a problem with managed plugin mode described in details in the <a href=\"https://rclone.org/docker\">full documentation</a>.</p>\n<p>The command will create volume mounts under the path given by <code>--base-dir</code> (by default <code>/var/lib/docker-volumes/rclone</code> available only to root) and maintain the JSON formatted file <code>docker-plugin.state</code> in the rclone cache directory with book-keeping records of created and mounted volumes.</p>\n<p>All mount and VFS options are submitted by the docker daemon via API, but you can also provide defaults on the command line as well as set path to the config file and cache directory or adjust logging verbosity.</p>\n<h2 id=\"vfs---virtual-file-system-3\">VFS - Virtual File System</h2>\n<p>This command uses the VFS layer. This adapts the cloud storage objects that rclone uses into something which looks much more like a disk filing system.</p>\n<p>Cloud storage objects have lots of properties which aren't like disk files - you can't extend them or write to the middle of them, so the VFS layer has to deal with that. Because there is no one right way of doing this there are various options explained below.</p>\n<p>The VFS layer also implements a directory cache - this caches info about files and directories (but not the data) in memory.</p>\n<h2 id=\"vfs-directory-cache-3\">VFS Directory Cache</h2>\n<p>Using the <code>--dir-cache-time</code> flag, you can control how long a directory should be considered up to date and not refreshed from the backend. Changes made through the VFS will appear immediately or invalidate the cache.</p>\n<pre><code>--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)</code></pre>\n<p>However, changes made directly on the cloud storage by the web interface or a different copy of rclone will only be picked up once the directory cache expires if the backend configured does not support polling for changes. If the backend supports polling, changes will be picked up within the polling interval.</p>\n<p>You can send a <code>SIGHUP</code> signal to rclone for it to flush all directory caches, regardless of how old they are. Assuming only one rclone instance is running, you can reset the cache like this:</p>\n<pre><code>kill -SIGHUP $(pidof rclone)</code></pre>\n<p>If you configure rclone with a <a href=\"/rc\">remote control</a> then you can use rclone rc to flush the whole directory cache:</p>\n<pre><code>rclone rc vfs/forget</code></pre>\n<p>Or individual files or directories:</p>\n<pre><code>rclone rc vfs/forget file=path/to/file dir=path/to/dir</code></pre>\n<h2 id=\"vfs-file-buffering-3\">VFS File Buffering</h2>\n<p>The <code>--buffer-size</code> flag determines the amount of memory, that will be used to buffer data in advance.</p>\n<p>Each open file will try to keep the specified amount of data in memory at all times. The buffered data is bound to one open file and won't be shared.</p>\n<p>This flag is a upper limit for the used memory per open file. The buffer will only use memory for data that is downloaded but not not yet read. If the buffer is empty, only a small amount of memory will be used.</p>\n<p>The maximum memory used by rclone for buffering can be up to <code>--buffer-size * open files</code>.</p>\n<h2 id=\"vfs-file-caching-3\">VFS File Caching</h2>\n<p>These flags control the VFS file caching options. File caching is necessary to make the VFS layer appear compatible with a normal file system. It can be disabled at the cost of some compatibility.</p>\n<p>For example you'll need to enable VFS caching if you want to read and write simultaneously to a file. See below for more details.</p>\n<p>Note that the VFS cache is separate from the cache backend and you may find that you need one or the other or both.</p>\n<pre><code>--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)</code></pre>\n<p>If run with <code>-vv</code> rclone will print the location of the file cache. The files are stored in the user cache file area which is OS dependent but can be controlled with <code>--cache-dir</code> or setting the appropriate environment variable.</p>\n<p>The cache has 4 different modes selected by <code>--vfs-cache-mode</code>. The higher the cache mode the more compatible rclone becomes at the cost of using disk space.</p>\n<p>Note that files are written back to the remote only when they are closed and if they haven't been accessed for <code>--vfs-write-back</code> seconds. If rclone is quit or dies with files that haven't been uploaded, these will be uploaded next time rclone is run with the same flags.</p>\n<p>If using <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> note that the cache may exceed these quotas for two reasons. Firstly because it is only checked every <code>--vfs-cache-poll-interval</code>. Secondly because open files cannot be evicted from the cache. When <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> is exceeded, rclone will attempt to evict the least accessed files from the cache first. rclone will start with files that haven't been accessed for the longest. This cache flushing strategy is efficient and more relevant files are likely to remain cached.</p>\n<p>The <code>--vfs-cache-max-age</code> will evict files from the cache after the set time since last access has passed. The default value of 1 hour will start evicting files from cache that haven't been accessed for 1 hour. When a cached file is accessed the 1 hour timer is reset to 0 and will wait for 1 more hour before evicting. Specify the time with standard notation, s, m, h, d, w .</p>\n<p>You <strong>should not</strong> run two copies of rclone using the same VFS cache with the same or overlapping remotes if using <code>--vfs-cache-mode &gt; off</code>. This can potentially cause data corruption if you do. You can work around this by giving each rclone its own cache hierarchy with <code>--cache-dir</code>. You don't need to worry about this if the remotes in use don't overlap.</p>\n<h3 id=\"vfs-cache-mode-off-3\">--vfs-cache-mode off</h3>\n<p>In this mode (the default) the cache will read directly from the remote and write directly to the remote without caching anything on disk.</p>\n<p>This will mean some operations are not possible</p>\n<ul>\n<li>Files can't be opened for both read AND write</li>\n<li>Files opened for write can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files open for read with O_TRUNC will be opened write only</li>\n<li>Files open for write only will behave as if O_TRUNC was supplied</li>\n<li>Open modes O_APPEND, O_TRUNC are ignored</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-minimal-3\">--vfs-cache-mode minimal</h3>\n<p>This is very similar to \"off\" except that files opened for read AND write will be buffered to disk. This means that files opened for write will be a lot more compatible, but uses the minimal disk space.</p>\n<p>These operations are not possible</p>\n<ul>\n<li>Files opened for write only can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files opened for write only will ignore O_APPEND, O_TRUNC</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-writes-3\">--vfs-cache-mode writes</h3>\n<p>In this mode files opened for read only are still read directly from the remote, write only and read/write files are buffered to disk first.</p>\n<p>This mode should support all normal file system operations.</p>\n<p>If an upload fails it will be retried at exponentially increasing intervals up to 1 minute.</p>\n<h3 id=\"vfs-cache-mode-full-3\">--vfs-cache-mode full</h3>\n<p>In this mode all reads and writes are buffered to and from disk. When data is read from the remote this is buffered to disk as well.</p>\n<p>In this mode the files in the cache will be sparse files and rclone will keep track of which bits of the files it has downloaded.</p>\n<p>So if an application only reads the starts of each file, then rclone will only buffer the start of the file. These files will appear to be their full size in the cache, but they will be sparse files with only the data that has been downloaded present in them.</p>\n<p>This mode should support all normal file system operations and is otherwise identical to <code>--vfs-cache-mode</code> writes.</p>\n<p>When reading a file rclone will read <code>--buffer-size</code> plus <code>--vfs-read-ahead</code> bytes ahead. The <code>--buffer-size</code> is buffered in memory whereas the <code>--vfs-read-ahead</code> is buffered on disk.</p>\n<p>When using this mode it is recommended that <code>--buffer-size</code> is not set too large and <code>--vfs-read-ahead</code> is set large if required.</p>\n<p><strong>IMPORTANT</strong> not all file systems support sparse files. In particular FAT/exFAT do not. Rclone will perform very badly if the cache directory is on a filesystem which doesn't support sparse files and it will log an ERROR message if one is detected.</p>\n<h3 id=\"fingerprinting-3\">Fingerprinting</h3>\n<p>Various parts of the VFS use fingerprinting to see if a local file copy has changed relative to a remote file. Fingerprints are made from:</p>\n<ul>\n<li>size</li>\n<li>modification time</li>\n<li>hash</li>\n</ul>\n<p>where available on an object.</p>\n<p>On some backends some of these attributes are slow to read (they take an extra API call per object, or extra work per object).</p>\n<p>For example <code>hash</code> is slow with the <code>local</code> and <code>sftp</code> backends as they have to read the entire file and hash it, and <code>modtime</code> is slow with the <code>s3</code>, <code>swift</code>, <code>ftp</code> and <code>qinqstor</code> backends because they need to do an extra API call to fetch it.</p>\n<p>If you use the <code>--vfs-fast-fingerprint</code> flag then rclone will not include the slow operations in the fingerprint. This makes the fingerprinting less accurate but much faster and will improve the opening time of cached files.</p>\n<p>If you are running a vfs cache over <code>local</code>, <code>s3</code> or <code>swift</code> backends then using this flag is recommended.</p>\n<p>Note that if you change the value of this flag, the fingerprints of the files in the cache may be invalidated and the files will need to be downloaded again.</p>\n<h2 id=\"vfs-chunked-reading-3\">VFS Chunked Reading</h2>\n<p>When rclone reads files from a remote it reads them in chunks. This means that rather than requesting the whole file rclone reads the chunk specified. This can reduce the used download quota for some remotes by requesting only chunks from the remote that are actually read, at the cost of an increased number of requests.</p>\n<p>These flags control the chunking:</p>\n<pre><code>--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once</code></pre>\n<p>The chunking behaves differently depending on the <code>--vfs-read-chunk-streams</code> parameter.</p>\n<h3 id=\"vfs-read-chunk-streams-0-6\"><code>--vfs-read-chunk-streams</code> == 0</h3>\n<p>Rclone will start reading a chunk of size <code>--vfs-read-chunk-size</code>, and then double the size for each read. When <code>--vfs-read-chunk-size-limit</code> is specified, and greater than <code>--vfs-read-chunk-size</code>, the chunk size for each open file will get doubled only until the specified value is reached. If the value is \"off\", which is the default, the limit is disabled and the chunk size will grow indefinitely.</p>\n<p>With <code>--vfs-read-chunk-size 100M</code> and <code>--vfs-read-chunk-size-limit 0</code> the following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on. When <code>--vfs-read-chunk-size-limit 500M</code> is specified, the result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.</p>\n<p>Setting <code>--vfs-read-chunk-size</code> to <code>0</code> or \"off\" disables chunked reading.</p>\n<p>The chunks will not be buffered in memory.</p>\n<h3 id=\"vfs-read-chunk-streams-0-7\"><code>--vfs-read-chunk-streams</code> &gt; 0</h3>\n<p>Rclone reads <code>--vfs-read-chunk-streams</code> chunks of size <code>--vfs-read-chunk-size</code> concurrently. The size for each read will stay constant.</p>\n<p>This improves performance performance massively on high latency links or very high bandwidth links to high performance object stores.</p>\n<p>Some experimentation will be needed to find the optimum values of <code>--vfs-read-chunk-size</code> and <code>--vfs-read-chunk-streams</code> as these will depend on the backend in use and the latency to the backend.</p>\n<p>For high performance object stores (eg AWS S3) a reasonable place to start might be <code>--vfs-read-chunk-streams 16</code> and <code>--vfs-read-chunk-size 4M</code>. In testing with AWS S3 the performance scaled roughly as the <code>--vfs-read-chunk-streams</code> setting.</p>\n<p>Similar settings should work for high latency links, but depending on the latency they may need more <code>--vfs-read-chunk-streams</code> in order to get the throughput.</p>\n<h2 id=\"vfs-performance-3\">VFS Performance</h2>\n<p>These flags may be used to enable/disable features of the VFS for performance or other reasons. See also the <a href=\"#vfs-chunked-reading\">chunked reading</a> feature.</p>\n<p>In particular S3 and Swift benefit hugely from the <code>--no-modtime</code> flag (or use <code>--use-server-modtime</code> for a slightly different effect) as each read of the modification time takes a transaction.</p>\n<pre><code>--no-checksum     Don&#39;t compare checksums on up/download.\n--no-modtime      Don&#39;t read/write the modification time (can speed things up).\n--no-seek         Don&#39;t allow seeking in files.\n--read-only       Only allow read-only access.</code></pre>\n<p>Sometimes rclone is delivered reads or writes out of order. Rather than seeking rclone will wait a short time for the in sequence read or write to come in. These flags only come into effect when not using an on disk cache file.</p>\n<pre><code>--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)</code></pre>\n<p>When using VFS write caching (<code>--vfs-cache-mode</code> with value writes or full), the global flag <code>--transfers</code> can be set to adjust the number of parallel uploads of modified files from the cache (the related global flag <code>--checkers</code> has no effect on the VFS).</p>\n<pre><code>--transfers int  Number of file transfers to run in parallel (default 4)</code></pre>\n<h2 id=\"vfs-case-sensitivity-3\">VFS Case Sensitivity</h2>\n<p>Linux file systems are case-sensitive: two files can differ only by case, and the exact case must be used when opening a file.</p>\n<p>File systems in modern Windows are case-insensitive but case-preserving: although existing files can be opened using any case, the exact case used to create the file is preserved and available for programs to query. It is not allowed for two files in the same directory to differ only by case.</p>\n<p>Usually file systems on macOS are case-insensitive. It is possible to make macOS file systems case-sensitive but that is not the default.</p>\n<p>The <code>--vfs-case-insensitive</code> VFS flag controls how rclone handles these two cases. If its value is \"false\", rclone passes file names to the remote as-is. If the flag is \"true\" (or appears without a value on the command line), rclone may perform a \"fixup\" as explained below.</p>\n<p>The user may specify a file name to open/delete/rename/etc with a case different than what is stored on the remote. If an argument refers to an existing file with exactly the same name, then the case of the existing file on the disk will be used. However, if a file name with exactly the same name is not found but a name differing only by case exists, rclone will transparently fixup the name. This fixup happens only when an existing file is requested. Case sensitivity of file names created anew by rclone is controlled by the underlying remote.</p>\n<p>Note that case sensitivity of the operating system running rclone (the target) may differ from case sensitivity of a file system presented by rclone (the source). The flag controls whether \"fixup\" is performed to satisfy the target.</p>\n<p>If the flag is not provided on the command line, then its default value depends on the operating system where rclone runs: \"true\" on Windows and macOS, \"false\" otherwise. If the flag is provided without a value, then it is \"true\".</p>\n<p>The <code>--no-unicode-normalization</code> flag controls whether a similar \"fixup\" is performed for filenames that differ but are <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">canonically equivalent</a> with respect to unicode. Unicode normalization can be particularly helpful for users of macOS, which prefers form NFD instead of the NFC used by most other platforms. It is therefore highly recommended to keep the default of <code>false</code> on macOS, to avoid encoding compatibility issues.</p>\n<p>In the (probably unlikely) event that a directory has multiple duplicate filenames after applying case and unicode normalization, the <code>--vfs-block-norm-dupes</code> flag allows hiding these duplicates. This comes with a performance tradeoff, as rclone will have to scan the entire directory for duplicates when listing a directory. For this reason, it is recommended to leave this disabled if not needed. However, macOS users may wish to consider using it, as otherwise, if a remote directory contains both NFC and NFD versions of the same filename, an odd situation will occur: both versions of the file will be visible in the mount, and both will appear to be editable, however, editing either version will actually result in only the NFD version getting edited under the hood. <code>--vfs-block- norm-dupes</code> prevents this confusion by detecting this scenario, hiding the duplicates, and logging an error, similar to how this is handled in <code>rclone sync</code>.</p>\n<h2 id=\"vfs-disk-options-3\">VFS Disk Options</h2>\n<p>This flag allows you to manually set the statistics about the filing system. It can be useful when those statistics cannot be read correctly automatically.</p>\n<pre><code>--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)</code></pre>\n<h2 id=\"alternate-report-of-used-bytes-3\">Alternate report of used bytes</h2>\n<p>Some backends, most notably S3, do not report the amount of bytes used. If you need this information to be available when running <code>df</code> on the filesystem, then pass the flag <code>--vfs-used-is-size</code> to rclone. With this flag set, instead of relying on the backend to report this information, rclone will scan the whole remote similar to <code>rclone size</code> and compute the total used space itself.</p>\n<p><em>WARNING.</em> Contrary to <code>rclone size</code>, this flag ignores filters so that the result is accurate. However, this is very inefficient and may cost lots of API calls resulting in extra charges. Use it as a last resort and only with caching.</p>\n<pre><code>rclone serve docker [flags]</code></pre>\n<h2 id=\"options-72\">Options</h2>\n<pre><code>      --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n      --allow-other                            Allow access to other users (not supported on Windows)\n      --allow-root                             Allow access to root user (not supported on Windows)\n      --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n      --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n      --base-dir string                        Base directory for volumes (default &quot;/var/lib/docker-volumes/rclone&quot;)\n      --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n      --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n      --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n      --debug-fuse                             Debug the FUSE internals - needs -v\n      --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n      --devname string                         Set the device name - default is remote:path\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --direct-io                              Use Direct IO, disables caching of data\n      --file-perms FileMode                    File permissions (default 666)\n      --forget-state                           Skip restoring previous state\n      --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for docker\n      --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n      --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n      --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n      --no-checksum                            Don&#39;t compare checksums on up/download\n      --no-modtime                             Don&#39;t read/write the modification time (can speed things up)\n      --no-seek                                Don&#39;t allow seeking in files\n      --no-spec                                Do not write spec file\n      --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n      --noapplexattr                           Ignore all &quot;com.apple.*&quot; extended attributes (supported on OSX only)\n  -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --socket-addr string                     Address &lt;host:port&gt; or absolute path (default: /run/docker/plugins/rclone.sock)\n      --socket-gid int                         GID for unix socket (default: current process GID) (default 1000)\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (&#39;off&#39; is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n      --volname string                         Set the volume name (supported on Windows and OSX only)\n      --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-24\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h2 id=\"see-also-72\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_serve/\">rclone serve</a> - Serve a remote over a protocol.</li>\n</ul>\n<h1 id=\"rclone-serve-ftp\">rclone serve ftp</h1>\n<p>Serve remote:path over FTP.</p>\n<h2 id=\"synopsis-65\">Synopsis</h2>\n<p>Run a basic FTP server to serve a remote over FTP protocol. This can be viewed with a FTP client or you can make a remote of type FTP to read and write it.</p>\n<h2 id=\"server-options-2\">Server options</h2>\n<p>Use --addr to specify which IP address and port the server should listen on, e.g. --addr 1.2.3.4:8000 or --addr :8080 to listen to all IPs. By default it only listens on localhost. You can use port :0 to let the OS choose an available port.</p>\n<p>If you set --addr to listen on a public or LAN accessible IP address then using Authentication is advised - see the next section for info.</p>\n<h3 id=\"authentication-1\">Authentication</h3>\n<p>By default this will serve files without needing a login.</p>\n<p>You can set a single username and password with the --user and --pass flags.</p>\n<h2 id=\"vfs---virtual-file-system-4\">VFS - Virtual File System</h2>\n<p>This command uses the VFS layer. This adapts the cloud storage objects that rclone uses into something which looks much more like a disk filing system.</p>\n<p>Cloud storage objects have lots of properties which aren't like disk files - you can't extend them or write to the middle of them, so the VFS layer has to deal with that. Because there is no one right way of doing this there are various options explained below.</p>\n<p>The VFS layer also implements a directory cache - this caches info about files and directories (but not the data) in memory.</p>\n<h2 id=\"vfs-directory-cache-4\">VFS Directory Cache</h2>\n<p>Using the <code>--dir-cache-time</code> flag, you can control how long a directory should be considered up to date and not refreshed from the backend. Changes made through the VFS will appear immediately or invalidate the cache.</p>\n<pre><code>--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)</code></pre>\n<p>However, changes made directly on the cloud storage by the web interface or a different copy of rclone will only be picked up once the directory cache expires if the backend configured does not support polling for changes. If the backend supports polling, changes will be picked up within the polling interval.</p>\n<p>You can send a <code>SIGHUP</code> signal to rclone for it to flush all directory caches, regardless of how old they are. Assuming only one rclone instance is running, you can reset the cache like this:</p>\n<pre><code>kill -SIGHUP $(pidof rclone)</code></pre>\n<p>If you configure rclone with a <a href=\"/rc\">remote control</a> then you can use rclone rc to flush the whole directory cache:</p>\n<pre><code>rclone rc vfs/forget</code></pre>\n<p>Or individual files or directories:</p>\n<pre><code>rclone rc vfs/forget file=path/to/file dir=path/to/dir</code></pre>\n<h2 id=\"vfs-file-buffering-4\">VFS File Buffering</h2>\n<p>The <code>--buffer-size</code> flag determines the amount of memory, that will be used to buffer data in advance.</p>\n<p>Each open file will try to keep the specified amount of data in memory at all times. The buffered data is bound to one open file and won't be shared.</p>\n<p>This flag is a upper limit for the used memory per open file. The buffer will only use memory for data that is downloaded but not not yet read. If the buffer is empty, only a small amount of memory will be used.</p>\n<p>The maximum memory used by rclone for buffering can be up to <code>--buffer-size * open files</code>.</p>\n<h2 id=\"vfs-file-caching-4\">VFS File Caching</h2>\n<p>These flags control the VFS file caching options. File caching is necessary to make the VFS layer appear compatible with a normal file system. It can be disabled at the cost of some compatibility.</p>\n<p>For example you'll need to enable VFS caching if you want to read and write simultaneously to a file. See below for more details.</p>\n<p>Note that the VFS cache is separate from the cache backend and you may find that you need one or the other or both.</p>\n<pre><code>--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)</code></pre>\n<p>If run with <code>-vv</code> rclone will print the location of the file cache. The files are stored in the user cache file area which is OS dependent but can be controlled with <code>--cache-dir</code> or setting the appropriate environment variable.</p>\n<p>The cache has 4 different modes selected by <code>--vfs-cache-mode</code>. The higher the cache mode the more compatible rclone becomes at the cost of using disk space.</p>\n<p>Note that files are written back to the remote only when they are closed and if they haven't been accessed for <code>--vfs-write-back</code> seconds. If rclone is quit or dies with files that haven't been uploaded, these will be uploaded next time rclone is run with the same flags.</p>\n<p>If using <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> note that the cache may exceed these quotas for two reasons. Firstly because it is only checked every <code>--vfs-cache-poll-interval</code>. Secondly because open files cannot be evicted from the cache. When <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> is exceeded, rclone will attempt to evict the least accessed files from the cache first. rclone will start with files that haven't been accessed for the longest. This cache flushing strategy is efficient and more relevant files are likely to remain cached.</p>\n<p>The <code>--vfs-cache-max-age</code> will evict files from the cache after the set time since last access has passed. The default value of 1 hour will start evicting files from cache that haven't been accessed for 1 hour. When a cached file is accessed the 1 hour timer is reset to 0 and will wait for 1 more hour before evicting. Specify the time with standard notation, s, m, h, d, w .</p>\n<p>You <strong>should not</strong> run two copies of rclone using the same VFS cache with the same or overlapping remotes if using <code>--vfs-cache-mode &gt; off</code>. This can potentially cause data corruption if you do. You can work around this by giving each rclone its own cache hierarchy with <code>--cache-dir</code>. You don't need to worry about this if the remotes in use don't overlap.</p>\n<h3 id=\"vfs-cache-mode-off-4\">--vfs-cache-mode off</h3>\n<p>In this mode (the default) the cache will read directly from the remote and write directly to the remote without caching anything on disk.</p>\n<p>This will mean some operations are not possible</p>\n<ul>\n<li>Files can't be opened for both read AND write</li>\n<li>Files opened for write can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files open for read with O_TRUNC will be opened write only</li>\n<li>Files open for write only will behave as if O_TRUNC was supplied</li>\n<li>Open modes O_APPEND, O_TRUNC are ignored</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-minimal-4\">--vfs-cache-mode minimal</h3>\n<p>This is very similar to \"off\" except that files opened for read AND write will be buffered to disk. This means that files opened for write will be a lot more compatible, but uses the minimal disk space.</p>\n<p>These operations are not possible</p>\n<ul>\n<li>Files opened for write only can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files opened for write only will ignore O_APPEND, O_TRUNC</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-writes-4\">--vfs-cache-mode writes</h3>\n<p>In this mode files opened for read only are still read directly from the remote, write only and read/write files are buffered to disk first.</p>\n<p>This mode should support all normal file system operations.</p>\n<p>If an upload fails it will be retried at exponentially increasing intervals up to 1 minute.</p>\n<h3 id=\"vfs-cache-mode-full-4\">--vfs-cache-mode full</h3>\n<p>In this mode all reads and writes are buffered to and from disk. When data is read from the remote this is buffered to disk as well.</p>\n<p>In this mode the files in the cache will be sparse files and rclone will keep track of which bits of the files it has downloaded.</p>\n<p>So if an application only reads the starts of each file, then rclone will only buffer the start of the file. These files will appear to be their full size in the cache, but they will be sparse files with only the data that has been downloaded present in them.</p>\n<p>This mode should support all normal file system operations and is otherwise identical to <code>--vfs-cache-mode</code> writes.</p>\n<p>When reading a file rclone will read <code>--buffer-size</code> plus <code>--vfs-read-ahead</code> bytes ahead. The <code>--buffer-size</code> is buffered in memory whereas the <code>--vfs-read-ahead</code> is buffered on disk.</p>\n<p>When using this mode it is recommended that <code>--buffer-size</code> is not set too large and <code>--vfs-read-ahead</code> is set large if required.</p>\n<p><strong>IMPORTANT</strong> not all file systems support sparse files. In particular FAT/exFAT do not. Rclone will perform very badly if the cache directory is on a filesystem which doesn't support sparse files and it will log an ERROR message if one is detected.</p>\n<h3 id=\"fingerprinting-4\">Fingerprinting</h3>\n<p>Various parts of the VFS use fingerprinting to see if a local file copy has changed relative to a remote file. Fingerprints are made from:</p>\n<ul>\n<li>size</li>\n<li>modification time</li>\n<li>hash</li>\n</ul>\n<p>where available on an object.</p>\n<p>On some backends some of these attributes are slow to read (they take an extra API call per object, or extra work per object).</p>\n<p>For example <code>hash</code> is slow with the <code>local</code> and <code>sftp</code> backends as they have to read the entire file and hash it, and <code>modtime</code> is slow with the <code>s3</code>, <code>swift</code>, <code>ftp</code> and <code>qinqstor</code> backends because they need to do an extra API call to fetch it.</p>\n<p>If you use the <code>--vfs-fast-fingerprint</code> flag then rclone will not include the slow operations in the fingerprint. This makes the fingerprinting less accurate but much faster and will improve the opening time of cached files.</p>\n<p>If you are running a vfs cache over <code>local</code>, <code>s3</code> or <code>swift</code> backends then using this flag is recommended.</p>\n<p>Note that if you change the value of this flag, the fingerprints of the files in the cache may be invalidated and the files will need to be downloaded again.</p>\n<h2 id=\"vfs-chunked-reading-4\">VFS Chunked Reading</h2>\n<p>When rclone reads files from a remote it reads them in chunks. This means that rather than requesting the whole file rclone reads the chunk specified. This can reduce the used download quota for some remotes by requesting only chunks from the remote that are actually read, at the cost of an increased number of requests.</p>\n<p>These flags control the chunking:</p>\n<pre><code>--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once</code></pre>\n<p>The chunking behaves differently depending on the <code>--vfs-read-chunk-streams</code> parameter.</p>\n<h3 id=\"vfs-read-chunk-streams-0-8\"><code>--vfs-read-chunk-streams</code> == 0</h3>\n<p>Rclone will start reading a chunk of size <code>--vfs-read-chunk-size</code>, and then double the size for each read. When <code>--vfs-read-chunk-size-limit</code> is specified, and greater than <code>--vfs-read-chunk-size</code>, the chunk size for each open file will get doubled only until the specified value is reached. If the value is \"off\", which is the default, the limit is disabled and the chunk size will grow indefinitely.</p>\n<p>With <code>--vfs-read-chunk-size 100M</code> and <code>--vfs-read-chunk-size-limit 0</code> the following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on. When <code>--vfs-read-chunk-size-limit 500M</code> is specified, the result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.</p>\n<p>Setting <code>--vfs-read-chunk-size</code> to <code>0</code> or \"off\" disables chunked reading.</p>\n<p>The chunks will not be buffered in memory.</p>\n<h3 id=\"vfs-read-chunk-streams-0-9\"><code>--vfs-read-chunk-streams</code> &gt; 0</h3>\n<p>Rclone reads <code>--vfs-read-chunk-streams</code> chunks of size <code>--vfs-read-chunk-size</code> concurrently. The size for each read will stay constant.</p>\n<p>This improves performance performance massively on high latency links or very high bandwidth links to high performance object stores.</p>\n<p>Some experimentation will be needed to find the optimum values of <code>--vfs-read-chunk-size</code> and <code>--vfs-read-chunk-streams</code> as these will depend on the backend in use and the latency to the backend.</p>\n<p>For high performance object stores (eg AWS S3) a reasonable place to start might be <code>--vfs-read-chunk-streams 16</code> and <code>--vfs-read-chunk-size 4M</code>. In testing with AWS S3 the performance scaled roughly as the <code>--vfs-read-chunk-streams</code> setting.</p>\n<p>Similar settings should work for high latency links, but depending on the latency they may need more <code>--vfs-read-chunk-streams</code> in order to get the throughput.</p>\n<h2 id=\"vfs-performance-4\">VFS Performance</h2>\n<p>These flags may be used to enable/disable features of the VFS for performance or other reasons. See also the <a href=\"#vfs-chunked-reading\">chunked reading</a> feature.</p>\n<p>In particular S3 and Swift benefit hugely from the <code>--no-modtime</code> flag (or use <code>--use-server-modtime</code> for a slightly different effect) as each read of the modification time takes a transaction.</p>\n<pre><code>--no-checksum     Don&#39;t compare checksums on up/download.\n--no-modtime      Don&#39;t read/write the modification time (can speed things up).\n--no-seek         Don&#39;t allow seeking in files.\n--read-only       Only allow read-only access.</code></pre>\n<p>Sometimes rclone is delivered reads or writes out of order. Rather than seeking rclone will wait a short time for the in sequence read or write to come in. These flags only come into effect when not using an on disk cache file.</p>\n<pre><code>--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)</code></pre>\n<p>When using VFS write caching (<code>--vfs-cache-mode</code> with value writes or full), the global flag <code>--transfers</code> can be set to adjust the number of parallel uploads of modified files from the cache (the related global flag <code>--checkers</code> has no effect on the VFS).</p>\n<pre><code>--transfers int  Number of file transfers to run in parallel (default 4)</code></pre>\n<h2 id=\"vfs-case-sensitivity-4\">VFS Case Sensitivity</h2>\n<p>Linux file systems are case-sensitive: two files can differ only by case, and the exact case must be used when opening a file.</p>\n<p>File systems in modern Windows are case-insensitive but case-preserving: although existing files can be opened using any case, the exact case used to create the file is preserved and available for programs to query. It is not allowed for two files in the same directory to differ only by case.</p>\n<p>Usually file systems on macOS are case-insensitive. It is possible to make macOS file systems case-sensitive but that is not the default.</p>\n<p>The <code>--vfs-case-insensitive</code> VFS flag controls how rclone handles these two cases. If its value is \"false\", rclone passes file names to the remote as-is. If the flag is \"true\" (or appears without a value on the command line), rclone may perform a \"fixup\" as explained below.</p>\n<p>The user may specify a file name to open/delete/rename/etc with a case different than what is stored on the remote. If an argument refers to an existing file with exactly the same name, then the case of the existing file on the disk will be used. However, if a file name with exactly the same name is not found but a name differing only by case exists, rclone will transparently fixup the name. This fixup happens only when an existing file is requested. Case sensitivity of file names created anew by rclone is controlled by the underlying remote.</p>\n<p>Note that case sensitivity of the operating system running rclone (the target) may differ from case sensitivity of a file system presented by rclone (the source). The flag controls whether \"fixup\" is performed to satisfy the target.</p>\n<p>If the flag is not provided on the command line, then its default value depends on the operating system where rclone runs: \"true\" on Windows and macOS, \"false\" otherwise. If the flag is provided without a value, then it is \"true\".</p>\n<p>The <code>--no-unicode-normalization</code> flag controls whether a similar \"fixup\" is performed for filenames that differ but are <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">canonically equivalent</a> with respect to unicode. Unicode normalization can be particularly helpful for users of macOS, which prefers form NFD instead of the NFC used by most other platforms. It is therefore highly recommended to keep the default of <code>false</code> on macOS, to avoid encoding compatibility issues.</p>\n<p>In the (probably unlikely) event that a directory has multiple duplicate filenames after applying case and unicode normalization, the <code>--vfs-block-norm-dupes</code> flag allows hiding these duplicates. This comes with a performance tradeoff, as rclone will have to scan the entire directory for duplicates when listing a directory. For this reason, it is recommended to leave this disabled if not needed. However, macOS users may wish to consider using it, as otherwise, if a remote directory contains both NFC and NFD versions of the same filename, an odd situation will occur: both versions of the file will be visible in the mount, and both will appear to be editable, however, editing either version will actually result in only the NFD version getting edited under the hood. <code>--vfs-block- norm-dupes</code> prevents this confusion by detecting this scenario, hiding the duplicates, and logging an error, similar to how this is handled in <code>rclone sync</code>.</p>\n<h2 id=\"vfs-disk-options-4\">VFS Disk Options</h2>\n<p>This flag allows you to manually set the statistics about the filing system. It can be useful when those statistics cannot be read correctly automatically.</p>\n<pre><code>--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)</code></pre>\n<h2 id=\"alternate-report-of-used-bytes-4\">Alternate report of used bytes</h2>\n<p>Some backends, most notably S3, do not report the amount of bytes used. If you need this information to be available when running <code>df</code> on the filesystem, then pass the flag <code>--vfs-used-is-size</code> to rclone. With this flag set, instead of relying on the backend to report this information, rclone will scan the whole remote similar to <code>rclone size</code> and compute the total used space itself.</p>\n<p><em>WARNING.</em> Contrary to <code>rclone size</code>, this flag ignores filters so that the result is accurate. However, this is very inefficient and may cost lots of API calls resulting in extra charges. Use it as a last resort and only with caching.</p>\n<h2 id=\"auth-proxy\">Auth Proxy</h2>\n<p>If you supply the parameter <code>--auth-proxy /path/to/program</code> then rclone will use that program to generate backends on the fly which then are used to authenticate incoming requests. This uses a simple JSON based protocol with input on STDIN and output on STDOUT.</p>\n<p><strong>PLEASE NOTE:</strong> <code>--auth-proxy</code> and <code>--authorized-keys</code> cannot be used together, if <code>--auth-proxy</code> is set the authorized keys option will be ignored.</p>\n<p>There is an example program <a href=\"https://github.com/rclone/rclone/blob/master/bin/test_proxy.py\">bin/test_proxy.py</a> in the rclone source code.</p>\n<p>The program's job is to take a <code>user</code> and <code>pass</code> on the input and turn those into the config for a backend on STDOUT in JSON format. This config will have any default parameters for the backend added, but it won't use configuration from environment variables or command line options - it is the job of the proxy program to make a complete config.</p>\n<p>This config generated must have this extra parameter - <code>_root</code> - root to use for the backend</p>\n<p>And it may have this parameter - <code>_obscure</code> - comma separated strings for parameters to obscure</p>\n<p>If password authentication was used by the client, input to the proxy process (on STDIN) would look similar to this:</p>\n<pre><code>{\n    &quot;user&quot;: &quot;me&quot;,\n    &quot;pass&quot;: &quot;mypassword&quot;\n}</code></pre>\n<p>If public-key authentication was used by the client, input to the proxy process (on STDIN) would look similar to this:</p>\n<pre><code>{\n    &quot;user&quot;: &quot;me&quot;,\n    &quot;public_key&quot;: &quot;AAAAB3NzaC1yc2EAAAADAQABAAABAQDuwESFdAe14hVS6omeyX7edc...JQdf&quot;\n}</code></pre>\n<p>And as an example return this on STDOUT</p>\n<pre><code>{\n    &quot;type&quot;: &quot;sftp&quot;,\n    &quot;_root&quot;: &quot;&quot;,\n    &quot;_obscure&quot;: &quot;pass&quot;,\n    &quot;user&quot;: &quot;me&quot;,\n    &quot;pass&quot;: &quot;mypassword&quot;,\n    &quot;host&quot;: &quot;sftp.example.com&quot;\n}</code></pre>\n<p>This would mean that an SFTP backend would be created on the fly for the <code>user</code> and <code>pass</code>/<code>public_key</code> returned in the output to the host given. Note that since <code>_obscure</code> is set to <code>pass</code>, rclone will obscure the <code>pass</code> parameter before creating the backend (which is required for sftp backends).</p>\n<p>The program can manipulate the supplied <code>user</code> in any way, for example to make proxy to many different sftp backends, you could make the <code>user</code> be <code>user@example.com</code> and then set the <code>host</code> to <code>example.com</code> in the output and the user to <code>user</code>. For security you'd probably want to restrict the <code>host</code> to a limited list.</p>\n<p>Note that an internal cache is keyed on <code>user</code> so only use that for configuration, don't use <code>pass</code> or <code>public_key</code>. This also means that if a user's password or public-key is changed the cache will need to expire (which takes 5 mins) before it takes effect.</p>\n<p>This can be used to build general purpose proxies to any kind of backend that rclone supports.</p>\n<pre><code>rclone serve ftp remote:path [flags]</code></pre>\n<h2 id=\"options-73\">Options</h2>\n<pre><code>      --addr string                            IPaddress:Port or :Port to bind server to (default &quot;localhost:2121&quot;)\n      --auth-proxy string                      A program to use to create the backend from the auth\n      --cert string                            TLS PEM key (concatenation of certificate and CA certificate)\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --file-perms FileMode                    File permissions (default 666)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for ftp\n      --key string                             TLS PEM Private key\n      --no-checksum                            Don&#39;t compare checksums on up/download\n      --no-modtime                             Don&#39;t read/write the modification time (can speed things up)\n      --no-seek                                Don&#39;t allow seeking in files\n      --pass string                            Password for authentication (empty value allow every password)\n      --passive-port string                    Passive port range to use (default &quot;30000-32000&quot;)\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --public-ip string                       Public IP address to advertise for passive connections\n      --read-only                              Only allow read-only access\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --user string                            User name for authentication (default &quot;anonymous&quot;)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (&#39;off&#39; is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)</code></pre>\n<p>Options shared with other commands are described next. See the <a href=\"https://rclone.org/flags/\">global flags page</a> for global options not listed here.</p>\n<h3 id=\"filter-options-25\">Filter Options</h3>\n<p>Flags for filtering directory listings</p>\n<pre><code>      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)</code></pre>\n<h2 id=\"see-also-73\">See Also</h2>\n<ul>\n<li><a href=\"https://rclone.org/commands/rclone_serve/\">rclone serve</a> - Serve a remote over a protocol.</li>\n</ul>\n<h1 id=\"rclone-serve-http\">rclone serve http</h1>\n<p>Serve the remote over HTTP.</p>\n<h2 id=\"synopsis-66\">Synopsis</h2>\n<p>Run a basic web server to serve a remote over HTTP. This can be viewed in a web browser or you can make a remote of type http read from it.</p>\n<p>You can use the filter flags (e.g. <code>--include</code>, <code>--exclude</code>) to control what is served.</p>\n<p>The server will log errors. Use <code>-v</code> to see access logs.</p>\n<p><code>--bwlimit</code> will be respected for file transfers. Use <code>--stats</code> to control the stats printing.</p>\n<h2 id=\"server-options-3\">Server options</h2>\n<p>Use <code>--addr</code> to specify which IP address and port the server should listen on, eg <code>--addr 1.2.3.4:8000</code> or <code>--addr :8080</code> to listen to all IPs. By default it only listens on localhost. You can use port :0 to let the OS choose an available port.</p>\n<p>If you set <code>--addr</code> to listen on a public or LAN accessible IP address then using Authentication is advised - see the next section for info.</p>\n<p>You can use a unix socket by setting the url to <code>unix:///path/to/socket</code> or just by using an absolute path name. Note that unix sockets bypass the authentication - this is expected to be done with file system permissions.</p>\n<p><code>--addr</code> may be repeated to listen on multiple IPs/ports/sockets. Socket activation, described further below, can also be used to accomplish the same.</p>\n<p><code>--server-read-timeout</code> and <code>--server-write-timeout</code> can be used to control the timeouts on the server. Note that this is the total time for a transfer.</p>\n<p><code>--max-header-bytes</code> controls the maximum number of bytes the server will accept in the HTTP header.</p>\n<p><code>--baseurl</code> controls the URL prefix that rclone serves from. By default rclone will serve from the root. If you used <code>--baseurl \"/rclone\"</code> then rclone would serve from a URL starting with \"/rclone/\". This is useful if you wish to proxy rclone serve. Rclone automatically inserts leading and trailing \"/\" on <code>--baseurl</code>, so <code>--baseurl \"rclone\"</code>, <code>--baseurl \"/rclone\"</code> and <code>--baseurl \"/rclone/\"</code> are all treated identically.</p>\n<h3 id=\"tls-ssl-1\">TLS (SSL)</h3>\n<p>By default this will serve over http. If you want you can serve over https. You will need to supply the <code>--cert</code> and <code>--key</code> flags. If you wish to do client side certificate validation then you will need to supply <code>--client-ca</code> also.</p>\n<p><code>--cert</code> should be a either a PEM encoded certificate or a concatenation of that with the CA certificate. <code>--key</code> should be the PEM encoded private key and <code>--client-ca</code> should be the PEM encoded client certificate authority certificate.</p>\n<p><code>--min-tls-version</code> is minimum TLS version that is acceptable. Valid values are \"tls1.0\", \"tls1.1\", \"tls1.2\" and \"tls1.3\" (default \"tls1.0\").</p>\n<h2 id=\"socket-activation-1\">Socket activation</h2>\n<p>Instead of the listening addresses specified above, rclone will listen to all FDs passed by the service manager, if any (and ignore any arguments passed by --addr`).</p>\n<p>This allows rclone to be a socket-activated service. It can be configured with .socket and .service unit files as described in https://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html</p>\n<p>Socket activation can be tested ad-hoc with the <code>systemd-socket-activate</code>command</p>\n<pre><code>   systemd-socket-activate -l 8000 -- rclone serve</code></pre>\n<p>This will socket-activate rclone on the first connection to port 8000 over TCP. ### Template</p>\n<p><code>--template</code> allows a user to specify a custom markup template for HTTP and WebDAV serve functions. The server exports the following markup to be used within the template to server pages:</p>\n<table>\n<colgroup>\n<col style=\"width: 50%\" />\n<col style=\"width: 50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Parameter</th>\n<th style=\"text-align: left;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">.Name</td>\n<td style=\"text-align: left;\">The full path of a file/directory.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">.Title</td>\n<td style=\"text-align: left;\">Directory listing of .Name</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">.Sort</td>\n<td style=\"text-align: left;\">The current sort used. This is changeable via ?sort= parameter</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: left;\">Sort Options: namedirfirst,name,size,time (default namedirfirst)</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">.Order</td>\n<td style=\"text-align: left;\">The current ordering used. This is changeable via ?order= parameter</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: left;\">Order Options: asc,desc (default asc)</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">.Query</td>\n<td style=\"text-align: left;\">Currently unused.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">.Breadcrumb</td>\n<td style=\"text-align: left;\">Allows for creating a relative navigation</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-- .Link</td>\n<td style=\"text-align: left;\">The relative to the root link of the Text.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-- .Text</td>\n<td style=\"text-align: left;\">The Name of the directory.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">.Entries</td>\n<td style=\"text-align: left;\">Information about a specific file/directory.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-- .URL</td>\n<td style=\"text-align: left;\">The 'url' of an entry.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-- .Leaf</td>\n<td style=\"text-align: left;\">Currently same as 'URL' but intended to be 'just' the name.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-- .IsDir</td>\n<td style=\"text-align: left;\">Boolean for if an entry is a directory or not.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">-- .Size</td>\n<td style=\"text-align: left;\">Size in Bytes of the entry.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">-- .ModTime</td>\n<td style=\"text-align: left;\">The UTC timestamp of an entry.</td>\n</tr>\n</tbody>\n</table>\n<p>The server also makes the following functions available so that they can be used within the template. These functions help extend the options for dynamic rendering of HTML. They can be used to render HTML based on specific conditions.</p>\n<table>\n<colgroup>\n<col style=\"width: 50%\" />\n<col style=\"width: 50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Function</th>\n<th style=\"text-align: left;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">afterEpoch</td>\n<td style=\"text-align: left;\">Returns the time since the epoch for the given time.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">contains</td>\n<td style=\"text-align: left;\">Checks whether a given substring is present or not in a given string.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">hasPrefix</td>\n<td style=\"text-align: left;\">Checks whether the given string begins with the specified prefix.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">hasSuffix</td>\n<td style=\"text-align: left;\">Checks whether the given string end with the specified suffix.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"authentication-2\">Authentication</h3>\n<p>By default this will serve files without needing a login.</p>\n<p>You can either use an htpasswd file which can take lots of users, or set a single username and password with the <code>--user</code> and <code>--pass</code> flags.</p>\n<p>If no static users are configured by either of the above methods, and client certificates are required by the <code>--client-ca</code> flag passed to the server, the client certificate common name will be considered as the username.</p>\n<p>Use <code>--htpasswd /path/to/htpasswd</code> to provide an htpasswd file. This is in standard apache format and supports MD5, SHA1 and BCrypt for basic authentication. Bcrypt is recommended.</p>\n<p>To create an htpasswd file:</p>\n<pre><code>touch htpasswd\nhtpasswd -B htpasswd user\nhtpasswd -B htpasswd anotherUser</code></pre>\n<p>The password file can be updated while rclone is running.</p>\n<p>Use <code>--realm</code> to set the authentication realm.</p>\n<p>Use <code>--salt</code> to change the password hashing salt from the default.</p>\n<h2 id=\"vfs---virtual-file-system-5\">VFS - Virtual File System</h2>\n<p>This command uses the VFS layer. This adapts the cloud storage objects that rclone uses into something which looks much more like a disk filing system.</p>\n<p>Cloud storage objects have lots of properties which aren't like disk files - you can't extend them or write to the middle of them, so the VFS layer has to deal with that. Because there is no one right way of doing this there are various options explained below.</p>\n<p>The VFS layer also implements a directory cache - this caches info about files and directories (but not the data) in memory.</p>\n<h2 id=\"vfs-directory-cache-5\">VFS Directory Cache</h2>\n<p>Using the <code>--dir-cache-time</code> flag, you can control how long a directory should be considered up to date and not refreshed from the backend. Changes made through the VFS will appear immediately or invalidate the cache.</p>\n<pre><code>--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)</code></pre>\n<p>However, changes made directly on the cloud storage by the web interface or a different copy of rclone will only be picked up once the directory cache expires if the backend configured does not support polling for changes. If the backend supports polling, changes will be picked up within the polling interval.</p>\n<p>You can send a <code>SIGHUP</code> signal to rclone for it to flush all directory caches, regardless of how old they are. Assuming only one rclone instance is running, you can reset the cache like this:</p>\n<pre><code>kill -SIGHUP $(pidof rclone)</code></pre>\n<p>If you configure rclone with a <a href=\"/rc\">remote control</a> then you can use rclone rc to flush the whole directory cache:</p>\n<pre><code>rclone rc vfs/forget</code></pre>\n<p>Or individual files or directories:</p>\n<pre><code>rclone rc vfs/forget file=path/to/file dir=path/to/dir</code></pre>\n<h2 id=\"vfs-file-buffering-5\">VFS File Buffering</h2>\n<p>The <code>--buffer-size</code> flag determines the amount of memory, that will be used to buffer data in advance.</p>\n<p>Each open file will try to keep the specified amount of data in memory at all times. The buffered data is bound to one open file and won't be shared.</p>\n<p>This flag is a upper limit for the used memory per open file. The buffer will only use memory for data that is downloaded but not not yet read. If the buffer is empty, only a small amount of memory will be used.</p>\n<p>The maximum memory used by rclone for buffering can be up to <code>--buffer-size * open files</code>.</p>\n<h2 id=\"vfs-file-caching-5\">VFS File Caching</h2>\n<p>These flags control the VFS file caching options. File caching is necessary to make the VFS layer appear compatible with a normal file system. It can be disabled at the cost of some compatibility.</p>\n<p>For example you'll need to enable VFS caching if you want to read and write simultaneously to a file. See below for more details.</p>\n<p>Note that the VFS cache is separate from the cache backend and you may find that you need one or the other or both.</p>\n<pre><code>--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)</code></pre>\n<p>If run with <code>-vv</code> rclone will print the location of the file cache. The files are stored in the user cache file area which is OS dependent but can be controlled with <code>--cache-dir</code> or setting the appropriate environment variable.</p>\n<p>The cache has 4 different modes selected by <code>--vfs-cache-mode</code>. The higher the cache mode the more compatible rclone becomes at the cost of using disk space.</p>\n<p>Note that files are written back to the remote only when they are closed and if they haven't been accessed for <code>--vfs-write-back</code> seconds. If rclone is quit or dies with files that haven't been uploaded, these will be uploaded next time rclone is run with the same flags.</p>\n<p>If using <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> note that the cache may exceed these quotas for two reasons. Firstly because it is only checked every <code>--vfs-cache-poll-interval</code>. Secondly because open files cannot be evicted from the cache. When <code>--vfs-cache-max-size</code> or <code>--vfs-cache-min-free-size</code> is exceeded, rclone will attempt to evict the least accessed files from the cache first. rclone will start with files that haven't been accessed for the longest. This cache flushing strategy is efficient and more relevant files are likely to remain cached.</p>\n<p>The <code>--vfs-cache-max-age</code> will evict files from the cache after the set time since last access has passed. The default value of 1 hour will start evicting files from cache that haven't been accessed for 1 hour. When a cached file is accessed the 1 hour timer is reset to 0 and will wait for 1 more hour before evicting. Specify the time with standard notation, s, m, h, d, w .</p>\n<p>You <strong>should not</strong> run two copies of rclone using the same VFS cache with the same or overlapping remotes if using <code>--vfs-cache-mode &gt; off</code>. This can potentially cause data corruption if you do. You can work around this by giving each rclone its own cache hierarchy with <code>--cache-dir</code>. You don't need to worry about this if the remotes in use don't overlap.</p>\n<h3 id=\"vfs-cache-mode-off-5\">--vfs-cache-mode off</h3>\n<p>In this mode (the default) the cache will read directly from the remote and write directly to the remote without caching anything on disk.</p>\n<p>This will mean some operations are not possible</p>\n<ul>\n<li>Files can't be opened for both read AND write</li>\n<li>Files opened for write can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files open for read with O_TRUNC will be opened write only</li>\n<li>Files open for write only will behave as if O_TRUNC was supplied</li>\n<li>Open modes O_APPEND, O_TRUNC are ignored</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-minimal-5\">--vfs-cache-mode minimal</h3>\n<p>This is very similar to \"off\" except that files opened for read AND write will be buffered to disk. This means that files opened for write will be a lot more compatible, but uses the minimal disk space.</p>\n<p>These operations are not possible</p>\n<ul>\n<li>Files opened for write only can't be seeked</li>\n<li>Existing files opened for write must have O_TRUNC set</li>\n<li>Files opened for write only will ignore O_APPEND, O_TRUNC</li>\n<li>If an upload fails it can't be retried</li>\n</ul>\n<h3 id=\"vfs-cache-mode-writes-5\">--vfs-cache-mode writes</h3>\n<p>In this mode files opened for read only are still read directly from the remote, write only and read/write files are buffered to disk first.</p>\n<p>This mode should support all normal file system operations.</p>\n<p>If an upload fails it will be retried at exponentially increasing intervals up to 1 minute.</p>\n<h3 id=\"vfs-cache-mode-full-5\">--vfs-cache-mode full</h3>\n<p>In this mode all reads and writes are buffered to and from disk. When data is read from the remote this is buffered to disk as well.</p>\n<p>In this mode the files in the cache will be sparse files and rclone will keep track of which bits of the files it has downloaded.</p>\n<p>So if an application only reads the starts of each file, then rclone will only buffer the start of the file. These files will appear to be their full size in the cache, but they will be sparse files with only the data that has been downloaded present in them.</p>\n<p>This mode should support all normal file system operations and is otherwise identical to <code>--vfs-cache-mode</code> writes.</p>\n<p>When reading a file rclone will read <code>--buffer-size</code> plus <code>--vfs-read-ahead</code> bytes ahead. The <code>--buffer-size</code> is buffered in memory whereas the <code>--vfs-read-ahead</code> is buffered on disk.</p>\n<p>When using this mode it is recommended that <code>--buffer-size</code> is not set too large and <code>--vfs-read-ahead</code> is set large if required.</p>\n<p><strong>IMPORTANT</strong> not all file systems support sparse files. In particular FAT/exFAT do not. Rclone will perform very badly if the cache directory is on a filesystem which doesn't support sparse files and it will log an ERROR message if one is detected.</p>\n<h3 id=\"fingerprinting-5\">Fingerprinting</h3>\n<p>Various parts of the VFS use fingerprinting to see if a local file copy has changed relative to a remote file. Fingerprints are made from:</p>\n<ul>\n<li>size</li>\n<li>modification time</li>\n<li>hash</li>\n</ul>\n<p>where available on an object.</p>\n<p>On some backends some of these attributes are slow to read (they take an extra API call per object, or extra work per object).</p>\n<p>For example <code>hash</code> is slow with the <code>local</code> and <code>sftp</code> backends as they have to read the entire file and hash it, and <code>modtime</code> is slow with the <code>s3</code>, <code>swift</code>, <code>ftp</code> and <code>qinqstor</code> backends because they need to do an extra API call to fetch it.</p>\n<p>If you use the <code>--vfs-fast-fingerprint</code> flag then rclone will not include the slow operations in the fingerprint. This makes the fingerprinting less accurate but much faster and will improve the opening time of cached files.</p>\n<p>If you are running a vfs cache over <code>local</code>, <code>s3</code> or <code>swift</code> backends then using this flag is recommended.</p>\n<p>Note that if you change the value of this flag, the fingerprints of the files in the cache m"
        },
        {
          "name": "MANUAL.md",
          "type": "blob",
          "size": 2303.8095703125,
          "content": "% rclone(1) User Manual\n% Nick Craig-Wood\n% Sep 08, 2024\n\n# Rclone syncs your files to cloud storage\n\n<img width=\"50%\" src=\"https://rclone.org/img/logo_on_light__horizontal_color.svg\" alt=\"rclone logo\" style=\"float:right; padding: 5px;\" >\n\n- [About rclone](#about)\n- [What can rclone do for you?](#what)\n- [What features does rclone have?](#features)\n- [What providers does rclone support?](#providers)\n- [Download](https://rclone.org/downloads/)\n- [Install](https://rclone.org/install/)\n- [Donate.](https://rclone.org/donate/)\n\n## About rclone {#about}\n\nRclone is a command-line program to manage files on cloud storage. It\nis a feature-rich alternative to cloud vendors' web storage\ninterfaces. [Over 70 cloud storage products](#providers) support\nrclone including S3 object stores, business & consumer file storage\nservices, as well as standard transfer protocols.\n\nRclone has powerful cloud equivalents to the unix commands rsync, cp,\nmv, mount, ls, ncdu, tree, rm, and cat. Rclone's familiar syntax\nincludes shell pipeline support, and `--dry-run` protection. It is\nused at the command line, in scripts or via its [API](/rc).\n\nUsers call rclone *\"The Swiss army knife of cloud storage\"*, and\n*\"Technology indistinguishable from magic\"*.\n\nRclone really looks after your data. It preserves timestamps and\nverifies checksums at all times. Transfers over limited bandwidth;\nintermittent connections, or subject to quota can be restarted, from\nthe last good file transferred. You can\n[check](https://rclone.org/commands/rclone_check/) the integrity of your files. Where\npossible, rclone employs server-side transfers to minimise local\nbandwidth use and transfers from one provider to another without\nusing local disk.\n\nVirtual backends wrap local and cloud file systems to apply\n[encryption](https://rclone.org/crypt/),\n[compression](https://rclone.org/compress/),\n[chunking](https://rclone.org/chunker/),\n[hashing](https://rclone.org/hasher/) and\n[joining](https://rclone.org/union/).\n\nRclone [mounts](https://rclone.org/commands/rclone_mount/) any local, cloud or\nvirtual filesystem as a disk on Windows,\nmacOS, linux and FreeBSD, and also serves these over\n[SFTP](https://rclone.org/commands/rclone_serve_sftp/),\n[HTTP](https://rclone.org/commands/rclone_serve_http/),\n[WebDAV](https://rclone.org/commands/rclone_serve_webdav/),\n[FTP](https://rclone.org/commands/rclone_serve_ftp/) and\n[DLNA](https://rclone.org/commands/rclone_serve_dlna/).\n\nRclone is mature, open-source software originally inspired by rsync\nand written in [Go](https://golang.org). The friendly support\ncommunity is familiar with varied use cases. Official Ubuntu, Debian,\nFedora, Brew and Chocolatey repos. include rclone. For the latest\nversion [downloading from rclone.org](https://rclone.org/downloads/) is recommended.\n\nRclone is widely used on Linux, Windows and Mac. Third-party\ndevelopers create innovative backup, restore, GUI and business\nprocess solutions using the rclone command line or API.\n\nRclone does the heavy lifting of communicating with cloud storage.\n\n## What can rclone do for you? {#what}\n\nRclone helps you:\n\n- Backup (and encrypt) files to cloud storage\n- Restore (and decrypt) files from cloud storage\n- Mirror cloud data to other cloud services or locally\n- Migrate data to the cloud, or between cloud storage vendors\n- Mount multiple, encrypted, cached or diverse cloud storage as a disk\n- Analyse and account for data held on cloud storage using [lsf](https://rclone.org/commands/rclone_lsf/), [ljson](https://rclone.org/commands/rclone_lsjson/), [size](https://rclone.org/commands/rclone_size/), [ncdu](https://rclone.org/commands/rclone_ncdu/)\n- [Union](https://rclone.org/union/) file systems together to present multiple local and/or cloud file systems as one\n\n## Features {#features}\n\n- Transfers\n    - MD5, SHA1 hashes are checked at all times for file integrity\n    - Timestamps are preserved on files\n    - Operations can be restarted at any time\n    - Can be to and from network, e.g. two different cloud providers\n    - Can use multi-threaded downloads to local disk\n- [Copy](https://rclone.org/commands/rclone_copy/) new or changed files to cloud storage\n- [Sync](https://rclone.org/commands/rclone_sync/) (one way) to make a directory identical\n- [Bisync](https://rclone.org/bisync/) (two way) to keep two directories in sync bidirectionally\n- [Move](https://rclone.org/commands/rclone_move/) files to cloud storage deleting the local after verification\n- [Check](https://rclone.org/commands/rclone_check/) hashes and for missing/extra files\n- [Mount](https://rclone.org/commands/rclone_mount/) your cloud storage as a network disk\n- [Serve](https://rclone.org/commands/rclone_serve/) local or remote files over [HTTP](https://rclone.org/commands/rclone_serve_http/)/[WebDav](https://rclone.org/commands/rclone_serve_webdav/)/[FTP](https://rclone.org/commands/rclone_serve_ftp/)/[SFTP](https://rclone.org/commands/rclone_serve_sftp/)/[DLNA](https://rclone.org/commands/rclone_serve_dlna/)\n- Experimental [Web based GUI](https://rclone.org/gui/)\n\n## Supported providers {#providers}\n\n(There are many others, built on standard protocols such as\nWebDAV or S3, that work out of the box.)\n\n\n- 1Fichier\n- Akamai Netstorage\n- Alibaba Cloud (Aliyun) Object Storage System (OSS)\n- Amazon S3\n- Backblaze B2\n- Box\n- Ceph\n- China Mobile Ecloud Elastic Object Storage (EOS)\n- Arvan Cloud Object Storage (AOS)\n- Citrix ShareFile\n- Cloudflare R2\n- DigitalOcean Spaces\n- Digi Storage\n- Dreamhost\n- Dropbox\n- Enterprise File Fabric\n- Fastmail Files\n- Files.com\n- FTP\n- Gofile\n- Google Cloud Storage\n- Google Drive\n- Google Photos\n- HDFS\n- Hetzner Storage Box\n- HiDrive\n- HTTP\n- ImageKit\n- Internet Archive\n- Jottacloud\n- IBM COS S3\n- IDrive e2\n- IONOS Cloud\n- Koofr\n- Leviia Object Storage\n- Liara Object Storage\n- Linkbox\n- Linode Object Storage\n- Magalu\n- Mail.ru Cloud\n- Memset Memstore\n- Mega\n- Memory\n- Microsoft Azure Blob Storage\n- Microsoft Azure Files Storage\n- Microsoft OneDrive\n- Minio\n- Nextcloud\n- OVH\n- Blomp Cloud Storage\n- OpenDrive\n- OpenStack Swift\n- Oracle Cloud Storage Swift\n- Oracle Object Storage\n- ownCloud\n- pCloud\n- Petabox\n- PikPak\n- Pixeldrain\n- premiumize.me\n- put.io\n- Proton Drive\n- QingStor\n- Qiniu Cloud Object Storage (Kodo)\n- Quatrix by Maytech\n- Rackspace Cloud Files\n- rsync.net\n- Scaleway\n- Seafile\n- Seagate Lyve Cloud\n- SeaweedFS\n- SFTP\n- Sia\n- SMB / CIFS\n- StackPath\n- Storj\n- Synology\n- SugarSync\n- Tencent Cloud Object Storage (COS)\n- Uloz.to\n- Uptobox\n- Wasabi\n- WebDAV\n- Yandex Disk\n- Zoho WorkDrive\n- The local filesystem\n\n\n## Virtual providers\n\nThese backends adapt or modify other storage providers:\n\n- Alias: Rename existing remotes\n- Cache: Cache remotes (DEPRECATED)\n- Chunker: Split large files\n- Combine: Combine multiple remotes into a directory tree\n- Compress: Compress files\n- Crypt: Encrypt files\n- Hasher: Hash files\n- Union: Join multiple remotes to work together\n\n\n## Links\n\n  *  [Home page](https://rclone.org/)\n  *  [GitHub project page for source and bug tracker](https://github.com/rclone/rclone)\n  *  [Rclone Forum](https://forum.rclone.org)\n  * [Downloads](https://rclone.org/downloads/)\n\n# Install\n\nRclone is a Go program and comes as a single binary file.\n\n## Quickstart\n\n  * [Download](https://rclone.org/downloads/) the relevant binary.\n  * Extract the `rclone` executable, `rclone.exe` on Windows, from the archive.\n  * Run `rclone config` to setup. See [rclone config docs](https://rclone.org/docs/) for more details.\n  * Optionally configure [automatic execution](#autostart).\n\nSee below for some expanded Linux / macOS / Windows instructions.\n\nSee the [usage](https://rclone.org/docs/) docs for how to use rclone, or\nrun `rclone -h`.\n\nAlready installed rclone can be easily updated to the latest version\nusing the [rclone selfupdate](https://rclone.org/commands/rclone_selfupdate/) command.\n\nSee [the release signing docs](https://rclone.org/release_signing/) for how to verify\nsignatures on the release.\n\n## Script installation\n\nTo install rclone on Linux/macOS/BSD systems, run:\n\n    sudo -v ; curl https://rclone.org/install.sh | sudo bash\n\nFor beta installation, run:\n\n    sudo -v ; curl https://rclone.org/install.sh | sudo bash -s beta\n\nNote that this script checks the version of rclone installed first and\nwon't re-download if not needed.\n\n## Linux installation {#linux}\n\n### Precompiled binary {#linux-precompiled}\n\nFetch and unpack\n\n    curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip\n    unzip rclone-current-linux-amd64.zip\n    cd rclone-*-linux-amd64\n\nCopy binary file\n\n    sudo cp rclone /usr/bin/\n    sudo chown root:root /usr/bin/rclone\n    sudo chmod 755 /usr/bin/rclone\n\nInstall manpage\n\n    sudo mkdir -p /usr/local/share/man/man1\n    sudo cp rclone.1 /usr/local/share/man/man1/\n    sudo mandb\n\nRun `rclone config` to setup. See [rclone config docs](https://rclone.org/docs/) for more details.\n\n    rclone config\n\n## macOS installation {#macos}\n\n### Installation with brew {#macos-brew}\n\n    brew install rclone\n\nNOTE: This version of rclone will not support `mount` any more (see\n[#5373](https://github.com/rclone/rclone/issues/5373)). If mounting is wanted\non macOS, either install a precompiled binary or enable the relevant option\nwhen [installing from source](#source).\n\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date. Its current version is as below.\n\n[![Homebrew package](https://repology.org/badge/version-for-repo/homebrew/rclone.svg)](https://repology.org/project/rclone/versions)\n\n### Installation with MacPorts {#macos-macports}\n\nOn macOS, rclone can also be installed via [MacPorts](https://www.macports.org):\n\n    sudo port install rclone\n\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date. Its current version is as below.\n\n[![MacPorts port](https://repology.org/badge/version-for-repo/macports/rclone.svg)](https://repology.org/project/rclone/versions)\n\nMore information [here](https://ports.macports.org/port/rclone/).\n\n### Precompiled binary, using curl {#macos-precompiled}\n\nTo avoid problems with macOS gatekeeper enforcing the binary to be signed and\nnotarized it is enough to download with `curl`.\n\nDownload the latest version of rclone.\n\n    cd && curl -O https://downloads.rclone.org/rclone-current-osx-amd64.zip\n\nUnzip the download and cd to the extracted folder.\n\n    unzip -a rclone-current-osx-amd64.zip && cd rclone-*-osx-amd64\n\nMove rclone to your $PATH. You will be prompted for your password.\n\n    sudo mkdir -p /usr/local/bin\n    sudo mv rclone /usr/local/bin/\n\n(the `mkdir` command is safe to run, even if the directory already exists).\n\nRemove the leftover files.\n\n    cd .. && rm -rf rclone-*-osx-amd64 rclone-current-osx-amd64.zip\n\nRun `rclone config` to setup. See [rclone config docs](https://rclone.org/docs/) for more details.\n\n    rclone config\n\n### Precompiled binary, using a web browser  {#macos-precompiled-web}\n\nWhen downloading a binary with a web browser, the browser will set the macOS\ngatekeeper quarantine attribute. Starting from Catalina, when attempting to run\n`rclone`, a pop-up will appear saying:\n\n    \"rclone\" cannot be opened because the developer cannot be verified.\n    macOS cannot verify that this app is free from malware.\n\nThe simplest fix is to run\n\n    xattr -d com.apple.quarantine rclone\n\n## Windows installation {#windows}\n\n### Precompiled binary {#windows-precompiled}\n\nFetch the correct binary for your processor type by clicking on these\nlinks. If not sure, use the first link.\n\n- [Intel/AMD - 64 Bit](https://downloads.rclone.org/rclone-current-windows-amd64.zip)\n- [Intel/AMD - 32 Bit](https://downloads.rclone.org/rclone-current-windows-386.zip)\n- [ARM - 64 Bit](https://downloads.rclone.org/rclone-current-windows-arm64.zip)\n\nOpen this file in the Explorer and extract `rclone.exe`. Rclone is a\nportable executable so you can place it wherever is convenient.\n\nOpen a CMD window (or powershell) and run the binary. Note that rclone\ndoes not launch a GUI by default, it runs in the CMD Window.\n\n- Run `rclone.exe config` to setup. See [rclone config docs](https://rclone.org/docs/) for more details.\n- Optionally configure [automatic execution](#autostart).\n\nIf you are planning to use the [rclone mount](https://rclone.org/commands/rclone_mount/)\nfeature then you will need to install the third party utility\n[WinFsp](https://winfsp.dev/) also.\n\n### Windows package manager (Winget) {#windows-chocolatey}\n\n[Winget](https://learn.microsoft.com/en-us/windows/package-manager/) comes pre-installed with the latest versions of Windows. If not, update the [App Installer](https://www.microsoft.com/p/app-installer/9nblggh4nns1) package from the Microsoft store.\n\nTo install rclone\n```\nwinget install Rclone.Rclone\n```\nTo uninstall rclone\n```\nwinget uninstall Rclone.Rclone --force\n```\n\n### Chocolatey package manager {#windows-chocolatey}\n\nMake sure you have [Choco](https://chocolatey.org/) installed\n\n```\nchoco search rclone\nchoco install rclone\n```\n\nThis will install rclone on your Windows machine. If you are planning\nto use [rclone mount](https://rclone.org/commands/rclone_mount/) then\n\n```\nchoco install winfsp\n```\n\nwill install that too.\n\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date. Its current version is as below.\n\n[![Chocolatey package](https://repology.org/badge/version-for-repo/chocolatey/rclone.svg)](https://repology.org/project/rclone/versions)\n\n### Scoop package manager {#windows-scoop}\n\nMake sure you have [Scoop](https://scoop.sh/) installed\n\n```\nscoop install rclone\n```\n\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date. Its current version is as below.\n\n[![Scoop package](https://repology.org/badge/version-for-repo/scoop/rclone.svg)](https://repology.org/project/rclone/versions)\n\n## Package manager installation {#package-manager}\n\nMany Linux, Windows, macOS and other OS distributions package and\ndistribute rclone.\n\nThe distributed versions of rclone are often quite out of date and for\nthis reason we recommend one of the other installation methods if\npossible.\n\nYou can get an idea of how up to date or not your OS distribution's\npackage is here.\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/rclone.svg?columns=3)](https://repology.org/project/rclone/versions)\n\n## Docker installation {#docker}\n\nThe rclone developers maintain a [docker image for rclone](https://hub.docker.com/r/rclone/rclone).\n\nThese images are built as part of the release process based on a\nminimal Alpine Linux.\n\nThe `:latest` tag will always point to the latest stable release.  You\ncan use the `:beta` tag to get the latest build from master.  You can\nalso use version tags, e.g. `:1.49.1`, `:1.49` or `:1`.\n\n```\n$ docker pull rclone/rclone:latest\nlatest: Pulling from rclone/rclone\nDigest: sha256:0e0ced72671989bb837fea8e88578b3fc48371aa45d209663683e24cfdaa0e11\n...\n$ docker run --rm rclone/rclone:latest version\nrclone v1.49.1\n- os/arch: linux/amd64\n- go version: go1.12.9\n```\n\nThere are a few command line options to consider when starting an rclone Docker container\nfrom the rclone image.\n\n- You need to mount the host rclone config dir at `/config/rclone` into the Docker\n  container. Due to the fact that rclone updates tokens inside its config file, and that\n  the update process involves a file rename, you need to mount the whole host rclone\n  config dir, not just the single host rclone config file.\n\n- You need to mount a host data dir at `/data` into the Docker container.\n\n- By default, the rclone binary inside a Docker container runs with UID=0 (root).\n  As a result, all files created in a run will have UID=0. If your config and data files\n  reside on the host with a non-root UID:GID, you need to pass these on the container\n  start command line.\n\n- If you want to access the RC interface (either via the API or the Web UI), it is\n  required to set the `--rc-addr` to `:5572` in order to connect to it from outside\n  the container. An explanation about why this is necessary is present [here](https://web.archive.org/web/20200808071950/https://pythonspeed.com/articles/docker-connection-refused/).\n    * NOTE: Users running this container with the docker network set to `host` should\n     probably set it to listen to localhost only, with `127.0.0.1:5572` as the value for\n      `--rc-addr`\n\n- It is possible to use `rclone mount` inside a userspace Docker container, and expose\n  the resulting fuse mount to the host. The exact `docker run` options to do that might\n  vary slightly between hosts. See, e.g. the discussion in this\n  [thread](https://github.com/moby/moby/issues/9448).\n\n  You also need to mount the host `/etc/passwd` and `/etc/group` for fuse to work inside\n  the container.\n\nHere are some commands tested on an Ubuntu 18.04.3 host:\n\n```\n# config on host at ~/.config/rclone/rclone.conf\n# data on host at ~/data\n\n# add a remote interactively\ndocker run --rm -it \\\n    --volume ~/.config/rclone:/config/rclone \\\n    --user $(id -u):$(id -g) \\\n    rclone/rclone \\\n    config\n\n# make sure the config is ok by listing the remotes\ndocker run --rm \\\n    --volume ~/.config/rclone:/config/rclone \\\n    --user $(id -u):$(id -g) \\\n    rclone/rclone \\\n    listremotes\n\n# perform mount inside Docker container, expose result to host\nmkdir -p ~/data/mount\ndocker run --rm \\\n    --volume ~/.config/rclone:/config/rclone \\\n    --volume ~/data:/data:shared \\\n    --user $(id -u):$(id -g) \\\n    --volume /etc/passwd:/etc/passwd:ro --volume /etc/group:/etc/group:ro \\\n    --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined \\\n    rclone/rclone \\\n    mount dropbox:Photos /data/mount &\nls ~/data/mount\nkill %1\n```\n\n## Snap installation {#snap}\n\n[![Get it from the Snap Store](https://snapcraft.io/static/images/badges/en/snap-store-black.svg)](https://snapcraft.io/rclone)\n\nMake sure you have [Snapd installed](https://snapcraft.io/docs/installing-snapd)\n\n```bash\n$ sudo snap install rclone\n```\nDue to the strict confinement of Snap, rclone snap cannot access real /home/$USER/.config/rclone directory, default config path is as below.\n\n- Default config directory:\n    - /home/$USER/snap/rclone/current/.config/rclone\n\nNote: Due to the strict confinement of Snap, `rclone mount` feature is `not` supported.\n\nIf mounting is wanted, either install a precompiled binary or enable the relevant option when [installing from source](#source).\n\nNote that this is controlled by [community maintainer](https://github.com/boukendesho/rclone-snap) not the rclone developers so it may be out of date. Its current version is as below.\n\n[![rclone](https://snapcraft.io/rclone/badge.svg)](https://snapcraft.io/rclone)\n\n\n## Source installation {#source}\n\nMake sure you have git and [Go](https://golang.org/) installed.\nGo version 1.18 or newer is required, the latest release is recommended.\nYou can get it from your package manager, or download it from\n[golang.org/dl](https://golang.org/dl/). Then you can run the following:\n\n```\ngit clone https://github.com/rclone/rclone.git\ncd rclone\ngo build\n```\n\nThis will check out the rclone source in subfolder rclone, which you can later\nmodify and send pull requests with. Then it will build the rclone executable\nin the same folder. As an initial check you can now run `./rclone version`\n(`.\\rclone version` on Windows).\n\nNote that on macOS and Windows the [mount](https://rclone.org/commands/rclone_mount/)\ncommand will not be available unless you specify an additional build tag `cmount`.\n\n```\ngo build -tags cmount\n```\n\nThis assumes you have a GCC compatible C compiler (GCC or Clang) in your PATH,\nas it uses [cgo](https://pkg.go.dev/cmd/cgo). But on Windows, the\n[cgofuse](https://github.com/winfsp/cgofuse) library that the cmount\nimplementation is based on, also supports building\n[without cgo](https://github.com/golang/go/wiki/WindowsDLLs), i.e. by setting\nenvironment variable CGO_ENABLED to value 0 (static linking). This is how the\nofficial Windows release of rclone is being built, starting with version 1.59.\nIt is still possible to build with cgo on Windows as well, by using the MinGW\nport of GCC, e.g. by installing it in a [MSYS2](https://www.msys2.org)\ndistribution (make sure you install it in the classic mingw64 subsystem, the\nucrt64 version is not compatible).\n\nAdditionally, to build with mount on Windows, you must install the third party\nutility [WinFsp](https://winfsp.dev/), with the \"Developer\" feature selected.\nIf building with cgo, you must also set environment variable CPATH pointing to\nthe fuse include directory within the WinFsp installation\n(normally `C:\\Program Files (x86)\\WinFsp\\inc\\fuse`).\n\nYou may add arguments `-ldflags -s` to omit symbol table and debug information,\nmaking the executable file smaller, and `-trimpath` to remove references to\nlocal file system paths. The official rclone releases are built with both of these.\n\n```\ngo build -trimpath -ldflags -s -tags cmount\n```\n\nIf you want to customize the version string, as reported by\nthe `rclone version` command, you can set one of the variables `fs.Version`,\n`fs.VersionTag` (to keep default suffix but customize the number),\nor `fs.VersionSuffix` (to keep default number but customize the suffix).\nThis can be done from the build command, by adding to the `-ldflags`\nargument value as shown below.\n\n```\ngo build -trimpath -ldflags \"-s -X github.com/rclone/rclone/fs.Version=v9.9.9-test\" -tags cmount\n```\n\nOn Windows, the official executables also have the version information,\nas well as a file icon, embedded as binary resources. To get that with your\nown build you need to run the following command **before** the build command.\nIt generates a Windows resource system object file, with extension .syso, e.g.\n`resource_windows_amd64.syso`, that will be automatically picked up by\nfuture build commands.\n\n```\ngo run bin/resource_windows.go\n```\n\nThe above command will generate a resource file containing version information\nbased on the fs.Version variable in source at the time you run the command,\nwhich means if the value of this variable changes you need to re-run the\ncommand for it to be reflected in the version information. Also, if you\noverride this version variable in the build command as described above, you\nneed to do that also when generating the resource file, or else it will still\nuse the value from the source.\n\n```\ngo run bin/resource_windows.go -version v9.9.9-test\n```\n\nInstead of executing the `go build` command directly, you can run it via the\nMakefile. The default target changes the version suffix from \"-DEV\" to \"-beta\"\nfollowed by additional commit details, embeds version information binary resources\non Windows, and copies the resulting rclone executable into your GOPATH bin folder\n(`$(go env GOPATH)/bin`, which corresponds to `~/go/bin/rclone` by default).\n\n```\nmake\n```\n\nTo include mount command on macOS and Windows with Makefile build:\n\n```\nmake GOTAGS=cmount\n```\n\nThere are other make targets that can be used for more advanced builds,\nsuch as cross-compiling for all supported os/architectures, and packaging\nresults into release artifacts.\nSee [Makefile](https://github.com/rclone/rclone/blob/master/Makefile)\nand [cross-compile.go](https://github.com/rclone/rclone/blob/master/bin/cross-compile.go)\nfor details.\n\nAnother alternative method for source installation is to download the source,\nbuild and install rclone - all in one operation, as a regular Go package.\nThe source will be stored it in the Go module cache, and the resulting\nexecutable will be in your GOPATH bin folder (`$(go env GOPATH)/bin`,\nwhich corresponds to `~/go/bin/rclone` by default).\n\n```\ngo install github.com/rclone/rclone@latest\n```\n\nIn some situations, rclone executable size might be too big for deployment\nin very restricted environments when all backends with large SDKs are included.\nTo limit binary size unused backends can be commented out in `backends/all/all.go`\nand unused commands in `cmd/all/all.go` before building with `go build` or `make`\n\n## Ansible installation {#ansible}\n\nThis can be done with [Stefan Weichinger's ansible\nrole](https://github.com/stefangweichinger/ansible-rclone).\n\nInstructions\n\n  1. `git clone https://github.com/stefangweichinger/ansible-rclone.git` into your local roles-directory\n  2. add the role to the hosts you want rclone installed to:\n\n```\n    - hosts: rclone-hosts\n      roles:\n          - rclone\n```\n\n## Portable installation {#portable}\n\nAs mentioned [above](https://rclone.org/install/#quickstart), rclone is single\nexecutable (`rclone`, or `rclone.exe` on Windows) that you can download as a\nzip archive and extract into a location of your choosing. When executing different\ncommands, it may create files in different locations, such as a configuration file\nand various temporary files. By default the locations for these are according to\nyour operating system, e.g. configuration file in your user profile directory and\ntemporary files in the standard temporary directory, but you can customize all of\nthem, e.g. to make a completely self-contained, portable installation.\n\nRun the [config paths](https://rclone.org/commands/rclone_config_paths/) command to see\nthe locations that rclone will use.\n\nTo override them set the corresponding options (as command-line arguments, or as\n[environment variables](https://rclone.org/docs/#environment-variables)):\n  - [--config](https://rclone.org/docs/#config-config-file)\n  - [--cache-dir](https://rclone.org/docs/#cache-dir-dir)\n  - [--temp-dir](https://rclone.org/docs/#temp-dir-dir)\n\n## Autostart\n\nAfter installing and configuring rclone, as described above, you are ready to use rclone\nas an interactive command line utility. If your goal is to perform *periodic* operations,\nsuch as a regular [sync](https://rclone.org/commands/rclone_sync/), you will probably want\nto configure your rclone command in your operating system's scheduler. If you need to\nexpose *service*-like features, such as [remote control](https://rclone.org/rc/),\n[GUI](https://rclone.org/gui/), [serve](https://rclone.org/commands/rclone_serve/)\nor [mount](https://rclone.org/commands/rclone_mount/), you will often want an rclone\ncommand always running in the background, and configuring it to run in a service infrastructure\nmay be a better option. Below are some alternatives on how to achieve this on\ndifferent operating systems.\n\nNOTE: Before setting up autorun it is highly recommended that you have tested your command\nmanually from a Command Prompt first.\n\n### Autostart on Windows\n\nThe most relevant alternatives for autostart on Windows are:\n- Run at user log on using the Startup folder\n- Run at user log on, at system startup or at schedule using Task Scheduler\n- Run at system startup using Windows service\n\n#### Running in background\n\nRclone is a console application, so if not starting from an existing Command Prompt,\ne.g. when starting rclone.exe from a shortcut, it will open a Command Prompt window.\nWhen configuring rclone to run from task scheduler and windows service you are able\nto set it to run hidden in background. From rclone version 1.54 you can also make it\nrun hidden from anywhere by adding option `--no-console` (it may still flash briefly\nwhen the program starts). Since rclone normally writes information and any error\nmessages to the console, you must redirect this to a file to be able to see it.\nRclone has a built-in option `--log-file` for that.\n\nExample command to run a sync in background:\n```\nc:\\rclone\\rclone.exe sync c:\\files remote:/files --no-console --log-file c:\\rclone\\logs\\sync_files.txt\n```\n\n#### User account\n\nAs mentioned in the [mount](https://rclone.org/commands/rclone_mount/) documentation,\nmounted drives created as Administrator are not visible to other accounts, not even the\naccount that was elevated as Administrator. By running the mount command as the\nbuilt-in `SYSTEM` user account, it will create drives accessible for everyone on\nthe system. Both scheduled task and Windows service can be used to achieve this.\n\nNOTE: Remember that when rclone runs as the `SYSTEM` user, the user profile\nthat it sees will not be yours. This means that if you normally run rclone with\nconfiguration file in the default location, to be able to use the same configuration\nwhen running as the system user you must explicitly tell rclone where to find\nit with the [`--config`](https://rclone.org/docs/#config-config-file) option,\nor else it will look in the system users profile path (`C:\\Windows\\System32\\config\\systemprofile`).\nTo test your command manually from a Command Prompt, you can run it with\nthe [PsExec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec)\nutility from Microsoft's Sysinternals suite, which takes option `-s` to\nexecute commands as the `SYSTEM` user.\n\n#### Start from Startup folder\n\nTo quickly execute an rclone command you can simply create a standard\nWindows Explorer shortcut for the complete rclone command you want to run. If you\nstore this shortcut in the special \"Startup\" start-menu folder, Windows will\nautomatically run it at login. To open this folder in Windows Explorer,\nenter path `%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`,\nor `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp` if you want\nthe command to start for *every* user that logs in.\n\nThis is the easiest approach to autostarting of rclone, but it offers no\nfunctionality to set it to run as different user, or to set conditions or\nactions on certain events. Setting up a scheduled task as described below\nwill often give you better results.\n\n#### Start from Task Scheduler\n\nTask Scheduler is an administrative tool built into Windows, and it can be used to\nconfigure rclone to be started automatically in a highly configurable way, e.g.\nperiodically on a schedule, on user log on, or at system startup. It can run\nbe configured to run as the current user, or for a mount command that needs to\nbe available to all users it can run as the `SYSTEM` user.\nFor technical information, see\nhttps://docs.microsoft.com/windows/win32/taskschd/task-scheduler-start-page.\n\n#### Run as service\n\nFor running rclone at system startup, you can create a Windows service that executes\nyour rclone command, as an alternative to scheduled task configured to run at startup.\n\n##### Mount command built-in service integration\n\nFor mount commands, rclone has a built-in Windows service integration via the third-party\nWinFsp library it uses. Registering as a regular Windows service easy, as you just have to\nexecute the built-in PowerShell command `New-Service` (requires administrative privileges).\n\nExample of a PowerShell command that creates a Windows service for mounting\nsome `remote:/files` as drive letter `X:`, for *all* users (service will be running as the\nlocal system account):\n\n```\nNew-Service -Name Rclone -BinaryPathName 'c:\\rclone\\rclone.exe mount remote:/files X: --config c:\\rclone\\config\\rclone.conf --log-file c:\\rclone\\logs\\mount.txt'\n```\n\nThe [WinFsp service infrastructure](https://github.com/billziss-gh/winfsp/wiki/WinFsp-Service-Architecture)\nsupports incorporating services for file system implementations, such as rclone,\ninto its own launcher service, as kind of \"child services\". This has the additional\nadvantage that it also implements a network provider that integrates into\nWindows standard methods for managing network drives. This is currently not\nofficially supported by Rclone, but with WinFsp version 2019.3 B2 / v1.5B2 or later\nit should be possible through path rewriting as described [here](https://github.com/rclone/rclone/issues/3340).\n\n##### Third-party service integration\n\nTo Windows service running any rclone command, the excellent third-party utility\n[NSSM](http://nssm.cc), the \"Non-Sucking Service Manager\", can be used.\nIt includes some advanced features such as adjusting process priority, defining\nprocess environment variables, redirect to file anything written to stdout, and\ncustomized response to different exit codes, with a GUI to configure everything from\n(although it can also be used from command line ).\n\nThere are also several other alternatives. To mention one more,\n[WinSW](https://github.com/winsw/winsw), \"Windows Service Wrapper\", is worth checking out.\nIt requires .NET Framework, but it is preinstalled on newer versions of Windows, and it\nalso provides alternative standalone distributions which includes necessary runtime (.NET 5).\nWinSW is a command-line only utility, where you have to manually create an XML file with\nservice configuration. This may be a drawback for some, but it can also be an advantage\nas it is easy to back up and reuse the configuration\nsettings, without having go through manual steps in a GUI. One thing to note is that\nby default it does not restart the service on error, one have to explicit enable this\nin the configuration file (via the \"onfailure\" parameter).\n\n### Autostart on Linux\n\n#### Start as a service\n\nTo always run rclone in background, relevant for mount commands etc,\nyou can use systemd to set up rclone as a system or user service. Running as a\nsystem service ensures that it is run at startup even if the user it is running as\nhas no active session. Running rclone as a user service ensures that it only\nstarts after the configured user has logged into the system.\n\n#### Run periodically from cron\n\nTo run a periodic command, such as a copy/sync, you can set up a cron job.\n\n# Usage\n\nRclone is a command line program to manage files on cloud storage.\nAfter [download](https://rclone.org/downloads/) and [install](/install), continue\nhere to learn how to use it: Initial [configuration](#configure),\nwhat the [basic syntax](#basic-syntax) looks like, describes the\nvarious [subcommands](#subcommands), the various [options](#options),\nand more.\n\nConfigure\n---------\n\nFirst, you'll need to configure rclone.  As the object storage systems\nhave quite complicated authentication these are kept in a config file.\n(See the [`--config`](#config-config-file) entry for how to find the config\nfile and choose its location.)\n\nThe easiest way to make the config is to run rclone with the config\noption:\n\n    rclone config\n\nSee the following for detailed instructions for\n\n  * [1Fichier](https://rclone.org/fichier/)\n  * [Akamai Netstorage](https://rclone.org/netstorage/)\n  * [Alias](https://rclone.org/alias/)\n  * [Amazon S3](https://rclone.org/s3/)\n  * [Backblaze B2](https://rclone.org/b2/)\n  * [Box](https://rclone.org/box/)\n  * [Chunker](https://rclone.org/chunker/) - transparently splits large files for other remotes\n  * [Citrix ShareFile](https://rclone.org/sharefile/)\n  * [Compress](https://rclone.org/compress/)\n  * [Combine](https://rclone.org/combine/)\n  * [Crypt](https://rclone.org/crypt/) - to encrypt other remotes\n  * [DigitalOcean Spaces](https://rclone.org/s3/#digitalocean-spaces)\n  * [Digi Storage](https://rclone.org/koofr/#digi-storage)\n  * [Dropbox](https://rclone.org/dropbox/)\n  * [Enterprise File Fabric](https://rclone.org/filefabric/)\n  * [Files.com](https://rclone.org/filescom/)\n  * [FTP](https://rclone.org/ftp/)\n  * [Gofile](https://rclone.org/gofile/)\n  * [Google Cloud Storage](https://rclone.org/googlecloudstorage/)\n  * [Google Drive](https://rclone.org/drive/)\n  * [Google Photos](https://rclone.org/googlephotos/)\n  * [Hasher](https://rclone.org/hasher/) - to handle checksums for other remotes\n  * [HDFS](https://rclone.org/hdfs/)\n  * [Hetzner Storage Box](https://rclone.org/sftp/#hetzner-storage-box)\n  * [HiDrive](https://rclone.org/hidrive/)\n  * [HTTP](https://rclone.org/http/)\n  * [Internet Archive](https://rclone.org/internetarchive/)\n  * [Jottacloud](https://rclone.org/jottacloud/)\n  * [Koofr](https://rclone.org/koofr/)\n  * [Linkbox](https://rclone.org/linkbox/)\n  * [Mail.ru Cloud](https://rclone.org/mailru/)\n  * [Mega](https://rclone.org/mega/)\n  * [Memory](https://rclone.org/memory/)\n  * [Microsoft Azure Blob Storage](https://rclone.org/azureblob/)\n  * [Microsoft Azure Files Storage](https://rclone.org/azurefiles/)\n  * [Microsoft OneDrive](https://rclone.org/onedrive/)\n  * [OpenStack Swift / Rackspace Cloudfiles / Blomp Cloud Storage / Memset Memstore](https://rclone.org/swift/)\n  * [OpenDrive](https://rclone.org/opendrive/)\n  * [Oracle Object Storage](https://rclone.org/oracleobjectstorage/)\n  * [Pcloud](https://rclone.org/pcloud/)\n  * [PikPak](https://rclone.org/pikpak/)\n  * [Pixeldrain](https://rclone.org/pixeldrain/)\n  * [premiumize.me](https://rclone.org/premiumizeme/)\n  * [put.io](https://rclone.org/putio/)\n  * [Proton Drive](https://rclone.org/protondrive/)\n  * [QingStor](https://rclone.org/qingstor/)\n  * [Quatrix by Maytech](https://rclone.org/quatrix/)\n  * [rsync.net](https://rclone.org/sftp/#rsync-net)\n  * [Seafile](https://rclone.org/seafile/)\n  * [SFTP](https://rclone.org/sftp/)\n  * [Sia](https://rclone.org/sia/)\n  * [SMB](https://rclone.org/smb/)\n  * [Storj](https://rclone.org/storj/)\n  * [SugarSync](https://rclone.org/sugarsync/)\n  * [Union](https://rclone.org/union/)\n  * [Uloz.to](https://rclone.org/ulozto/)\n  * [Uptobox](https://rclone.org/uptobox/)\n  * [WebDAV](https://rclone.org/webdav/)\n  * [Yandex Disk](https://rclone.org/yandex/)\n  * [Zoho WorkDrive](https://rclone.org/zoho/)\n  * [The local filesystem](https://rclone.org/local/)\n\nBasic syntax\n-----\n\nRclone syncs a directory tree from one storage system to another.\n\nIts syntax is like this\n\n    rclone subcommand [options] <parameters> <parameters...>\n\nA `subcommand` is a the rclone operation required, (e.g. `sync`,\n`copy`, `ls`).\n\nAn `option` is a single letter flag (e.g. `-v`) or a group of single\nletter flags (e.g. `-Pv`) or a long flag (e.g. `--progress`). No\noptions are required. Options can come after the `subcommand` or in\nbetween parameters too or on the end, but only global options can be\nused before the `subcommand`. Anything after a `--` option will not be\ninterpreted as an option so if you need to add a parameter which\nstarts with a `-` then put a `--` on its own first, eg\n\n    rclone lsf -- -directory-starting-with-dash\n\nA `parameter` is usually a file path or [rclone remote](#syntax-of-remote-paths), eg\n`/path/to/file` or `remote:path/to/file` but it can be other things -\nthe `subcommand` help will tell you what.\n\nSource and destination paths are specified by the name you gave the\nstorage system in the config file then the sub path, e.g.\n\"drive:myfolder\" to look at \"myfolder\" in Google drive.\n\nYou can define as many storage paths as you like in the config file.\n\nPlease use the [`--interactive`/`-i`](#interactive) flag while\nlearning rclone to avoid accidental data loss.\n\nSubcommands\n-----------\n\nrclone uses a system of subcommands.  For example\n\n    rclone ls remote:path # lists a remote\n    rclone copy /local/path remote:path # copies /local/path to the remote\n    rclone sync --interactive /local/path remote:path # syncs /local/path to the remote\n\n# rclone config\n\nEnter an interactive configuration session.\n\n## Synopsis\n\nEnter an interactive configuration session where you can setup new\nremotes and manage existing ones. You may also set or remove a\npassword to protect your configuration.\n\n\n```\nrclone config [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for config\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n* [rclone config create](https://rclone.org/commands/rclone_config_create/)\t - Create a new remote with name, type and options.\n* [rclone config delete](https://rclone.org/commands/rclone_config_delete/)\t - Delete an existing remote.\n* [rclone config disconnect](https://rclone.org/commands/rclone_config_disconnect/)\t - Disconnects user from remote\n* [rclone config dump](https://rclone.org/commands/rclone_config_dump/)\t - Dump the config file as JSON.\n* [rclone config edit](https://rclone.org/commands/rclone_config_edit/)\t - Enter an interactive configuration session.\n* [rclone config encryption](https://rclone.org/commands/rclone_config_encryption/)\t - set, remove and check the encryption for the config file\n* [rclone config file](https://rclone.org/commands/rclone_config_file/)\t - Show path of configuration file in use.\n* [rclone config password](https://rclone.org/commands/rclone_config_password/)\t - Update password in an existing remote.\n* [rclone config paths](https://rclone.org/commands/rclone_config_paths/)\t - Show paths used for configuration, cache, temp etc.\n* [rclone config providers](https://rclone.org/commands/rclone_config_providers/)\t - List in JSON format all the providers and options.\n* [rclone config reconnect](https://rclone.org/commands/rclone_config_reconnect/)\t - Re-authenticates user with remote.\n* [rclone config redacted](https://rclone.org/commands/rclone_config_redacted/)\t - Print redacted (decrypted) config file, or the redacted config for a single remote.\n* [rclone config show](https://rclone.org/commands/rclone_config_show/)\t - Print (decrypted) config file, or the config for a single remote.\n* [rclone config touch](https://rclone.org/commands/rclone_config_touch/)\t - Ensure configuration file exists.\n* [rclone config update](https://rclone.org/commands/rclone_config_update/)\t - Update options in an existing remote.\n* [rclone config userinfo](https://rclone.org/commands/rclone_config_userinfo/)\t - Prints info about logged in user of remote.\n\n# rclone copy\n\nCopy files from source to dest, skipping identical files.\n\n## Synopsis\n\nCopy the source to the destination.  Does not transfer files that are\nidentical on source and destination, testing by size and modification\ntime or MD5SUM.  Doesn't delete files from the destination. If you\nwant to also delete files from destination, to make it match source,\nuse the [sync](https://rclone.org/commands/rclone_sync/) command instead.\n\nNote that it is always the contents of the directory that is synced,\nnot the directory itself. So when source:path is a directory, it's the\ncontents of source:path that are copied, not the directory name and\ncontents.\n\nTo copy single files, use the [copyto](https://rclone.org/commands/rclone_copyto/)\ncommand instead.\n\nIf dest:path doesn't exist, it is created and the source:path contents\ngo there.\n\nFor example\n\n    rclone copy source:sourcepath dest:destpath\n\nLet's say there are two files in sourcepath\n\n    sourcepath/one.txt\n    sourcepath/two.txt\n\nThis copies them to\n\n    destpath/one.txt\n    destpath/two.txt\n\nNot to\n\n    destpath/sourcepath/one.txt\n    destpath/sourcepath/two.txt\n\nIf you are familiar with `rsync`, rclone always works as if you had\nwritten a trailing `/` - meaning \"copy the contents of this directory\".\nThis applies to all commands and whether you are talking about the\nsource or destination.\n\nSee the [--no-traverse](https://rclone.org/docs/#no-traverse) option for controlling\nwhether rclone lists the destination directory or not.  Supplying this\noption when copying a small number of files into a large destination\ncan speed transfers up greatly.\n\nFor example, if you have many files in /path/to/src but only a few of\nthem change every day, you can copy all the files which have changed\nrecently very efficiently like this:\n\n    rclone copy --max-age 24h --no-traverse /path/to/src remote:\n\n\nRclone will sync the modification times of files and directories if\nthe backend supports it. If metadata syncing is required then use the\n`--metadata` flag.\n\nNote that the modification time and metadata for the root directory\nwill **not** be synced. See https://github.com/rclone/rclone/issues/7652\nfor more info.\n\n**Note**: Use the `-P`/`--progress` flag to view real-time transfer statistics.\n\n**Note**: Use the `--dry-run` or the `--interactive`/`-i` flag to test without copying anything.\n\n\n```\nrclone copy source:path dest:path [flags]\n```\n\n## Options\n\n```\n      --create-empty-src-dirs   Create empty source dirs on destination after copy\n  -h, --help                    help for copy\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Copy Options\n\nFlags for anything which can copy a file\n\n```\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don't check the destination, copy regardless\n      --no-traverse                                 Don't traverse destination file system on copy\n      --no-update-dir-modtime                       Don't update directory modification times\n      --no-update-modtime                           Don't update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n```\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone sync\n\nMake source and dest identical, modifying destination only.\n\n## Synopsis\n\nSync the source to the destination, changing the destination\nonly.  Doesn't transfer files that are identical on source and\ndestination, testing by size and modification time or MD5SUM.\nDestination is updated to match source, including deleting files\nif necessary (except duplicate objects, see below). If you don't\nwant to delete files from destination, use the\n[copy](https://rclone.org/commands/rclone_copy/) command instead.\n\n**Important**: Since this can cause data loss, test first with the\n`--dry-run` or the `--interactive`/`-i` flag.\n\n    rclone sync --interactive SOURCE remote:DESTINATION\n\nNote that files in the destination won't be deleted if there were any\nerrors at any point.  Duplicate objects (files with the same name, on\nthose providers that support it) are also not yet handled.\n\nIt is always the contents of the directory that is synced, not the\ndirectory itself. So when source:path is a directory, it's the contents of\nsource:path that are copied, not the directory name and contents.  See\nextended explanation in the [copy](https://rclone.org/commands/rclone_copy/) command if unsure.\n\nIf dest:path doesn't exist, it is created and the source:path contents\ngo there.\n\nIt is not possible to sync overlapping remotes. However, you may exclude\nthe destination from the sync with a filter rule or by putting an \nexclude-if-present file inside the destination directory and sync to a\ndestination that is inside the source directory.\n\nRclone will sync the modification times of files and directories if\nthe backend supports it. If metadata syncing is required then use the\n`--metadata` flag.\n\nNote that the modification time and metadata for the root directory\nwill **not** be synced. See https://github.com/rclone/rclone/issues/7652\nfor more info.\n\n**Note**: Use the `-P`/`--progress` flag to view real-time transfer statistics\n\n**Note**: Use the `rclone dedupe` command to deal with \"Duplicate object/directory found in source/destination - ignoring\" errors.\nSee [this forum post](https://forum.rclone.org/t/sync-not-clearing-duplicates/14372) for more info.\n\n# Logger Flags\n\nThe `--differ`, `--missing-on-dst`, `--missing-on-src`, `--match` and `--error` flags write paths, one per line, to the file name (or\nstdout if it is `-`) supplied. What they write is described in the\nhelp below. For example `--differ` will write all paths which are\npresent on both the source and destination but different.\n\nThe `--combined` flag will write a file (or stdout) which contains all\nfile paths with a symbol and then a space and then the path to tell\nyou what happened to it. These are reminiscent of diff files.\n\n- `= path` means path was found in source and destination and was identical\n- `- path` means path was missing on the source, so only in the destination\n- `+ path` means path was missing on the destination, so only in the source\n- `* path` means path was present in source and destination but different.\n- `! path` means there was an error reading or hashing the source or dest.\n\nThe `--dest-after` flag writes a list file using the same format flags\nas [`lsf`](https://rclone.org/commands/rclone_lsf/#synopsis) (including [customizable options\nfor hash, modtime, etc.](https://rclone.org/commands/rclone_lsf/#synopsis))\nConceptually it is similar to rsync's `--itemize-changes`, but not identical\n-- it should output an accurate list of what will be on the destination\nafter the sync.\n\nNote that these logger flags have a few limitations, and certain scenarios\nare not currently supported:\n\n- `--max-duration` / `CutoffModeHard`\n- `--compare-dest` / `--copy-dest`\n- server-side moves of an entire dir at once\n- High-level retries, because there would be duplicates (use `--retries 1` to disable)\n- Possibly some unusual error scenarios\n\nNote also that each file is logged during the sync, as opposed to after, so it\nis most useful as a predictor of what SHOULD happen to each file\n(which may or may not match what actually DID.)\n\n\n```\nrclone sync source:path dest:path [flags]\n```\n\n## Options\n\n```\n      --absolute                Put a leading / in front of path names\n      --combined string         Make a combined report of changes to this file\n      --create-empty-src-dirs   Create empty source dirs on destination after sync\n      --csv                     Output in CSV format\n      --dest-after string       Report all files that exist on the dest post-sync\n      --differ string           Report all non-matching files to this file\n  -d, --dir-slash               Append a slash to directory names (default true)\n      --dirs-only               Only list directories\n      --error string            Report all files with errors (hashing or reading) to this file\n      --files-only              Only list files (default true)\n  -F, --format string           Output format - see lsf help for details (default \"p\")\n      --hash h                  Use this hash when h is used in the format MD5|SHA-1|DropboxHash (default \"md5\")\n  -h, --help                    help for sync\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n  -s, --separator string        Separator for the items in the format (default \";\")\n  -t, --timeformat string       Specify a custom time format, or 'max' for max precision supported by remote (default: 2006-01-02 15:04:05)\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Copy Options\n\nFlags for anything which can copy a file\n\n```\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don't check the destination, copy regardless\n      --no-traverse                                 Don't traverse destination file system on copy\n      --no-update-dir-modtime                       Don't update directory modification times\n      --no-update-modtime                           Don't update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n```\n\n### Sync Options\n\nFlags used for sync commands\n\n```\n      --backup-dir string               Make backups into hierarchy based in DIR\n      --delete-after                    When synchronizing, delete files on destination after transferring (default)\n      --delete-before                   When synchronizing, delete files on destination before transferring\n      --delete-during                   When synchronizing, delete files during transfer\n      --fix-case                        Force rename of case insensitive dest to match source\n      --ignore-errors                   Delete even if there are I/O errors\n      --max-delete int                  When synchronizing, limit the number of deletes (default -1)\n      --max-delete-size SizeSuffix      When synchronizing, limit the total size of deletes (default off)\n      --suffix string                   Suffix to add to changed files\n      --suffix-keep-extension           Preserve the extension when using --suffix\n      --track-renames                   When synchronizing, track file renames and do a server-side move if possible\n      --track-renames-strategy string   Strategies to use when synchronizing using track-renames hash|modtime|leaf (default \"hash\")\n```\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone move\n\nMove files from source to dest.\n\n## Synopsis\n\nMoves the contents of the source directory to the destination\ndirectory. Rclone will error if the source and destination overlap and\nthe remote does not support a server-side directory move operation.\n\nTo move single files, use the [moveto](https://rclone.org/commands/rclone_moveto/)\ncommand instead.\n\nIf no filters are in use and if possible this will server-side move\n`source:path` into `dest:path`. After this `source:path` will no\nlonger exist.\n\nOtherwise for each file in `source:path` selected by the filters (if\nany) this will move it into `dest:path`.  If possible a server-side\nmove will be used, otherwise it will copy it (server-side if possible)\ninto `dest:path` then delete the original (if no errors on copy) in\n`source:path`.\n\nIf you want to delete empty source directories after move, use the\n`--delete-empty-src-dirs` flag.\n\nSee the [--no-traverse](https://rclone.org/docs/#no-traverse) option for controlling\nwhether rclone lists the destination directory or not.  Supplying this\noption when moving a small number of files into a large destination\ncan speed transfers up greatly.\n\nRclone will sync the modification times of files and directories if\nthe backend supports it. If metadata syncing is required then use the\n`--metadata` flag.\n\nNote that the modification time and metadata for the root directory\nwill **not** be synced. See https://github.com/rclone/rclone/issues/7652\nfor more info.\n\n**Important**: Since this can cause data loss, test first with the\n`--dry-run` or the `--interactive`/`-i` flag.\n\n**Note**: Use the `-P`/`--progress` flag to view real-time transfer statistics.\n\n\n```\nrclone move source:path dest:path [flags]\n```\n\n## Options\n\n```\n      --create-empty-src-dirs   Create empty source dirs on destination after move\n      --delete-empty-src-dirs   Delete empty source dirs after move\n  -h, --help                    help for move\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Copy Options\n\nFlags for anything which can copy a file\n\n```\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don't check the destination, copy regardless\n      --no-traverse                                 Don't traverse destination file system on copy\n      --no-update-dir-modtime                       Don't update directory modification times\n      --no-update-modtime                           Don't update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n```\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone delete\n\nRemove the files in path.\n\n## Synopsis\n\nRemove the files in path.  Unlike [purge](https://rclone.org/commands/rclone_purge/) it\nobeys include/exclude filters so can be used to selectively delete files.\n\n`rclone delete` only deletes files but leaves the directory structure\nalone. If you want to delete a directory and all of its contents use\nthe [purge](https://rclone.org/commands/rclone_purge/) command.\n\nIf you supply the `--rmdirs` flag, it will remove all empty directories along with it.\nYou can also use the separate command [rmdir](https://rclone.org/commands/rclone_rmdir/) or\n[rmdirs](https://rclone.org/commands/rclone_rmdirs/) to delete empty directories only.\n\nFor example, to delete all files bigger than 100 MiB, you may first want to\ncheck what would be deleted (use either):\n\n    rclone --min-size 100M lsl remote:path\n    rclone --dry-run --min-size 100M delete remote:path\n\nThen proceed with the actual delete:\n\n    rclone --min-size 100M delete remote:path\n\nThat reads \"delete everything with a minimum size of 100 MiB\", hence\ndelete all files bigger than 100 MiB.\n\n**Important**: Since this can cause data loss, test first with the\n`--dry-run` or the `--interactive`/`-i` flag.\n\n\n```\nrclone delete remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help     help for delete\n      --rmdirs   rmdirs removes empty directories but leaves root intact\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone purge\n\nRemove the path and all of its contents.\n\n## Synopsis\n\nRemove the path and all of its contents.  Note that this does not obey\ninclude/exclude filters - everything will be removed.  Use the\n[delete](https://rclone.org/commands/rclone_delete/) command if you want to selectively\ndelete files. To delete empty directories only, use command\n[rmdir](https://rclone.org/commands/rclone_rmdir/) or [rmdirs](https://rclone.org/commands/rclone_rmdirs/).\n\n**Important**: Since this can cause data loss, test first with the\n`--dry-run` or the `--interactive`/`-i` flag.\n\n\n```\nrclone purge remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for purge\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone mkdir\n\nMake the path if it doesn't already exist.\n\n```\nrclone mkdir remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for mkdir\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone rmdir\n\nRemove the empty directory at path.\n\n## Synopsis\n\nThis removes empty directory given by path. Will not remove the path if it\nhas any objects in it, not even empty subdirectories. Use\ncommand [rmdirs](https://rclone.org/commands/rclone_rmdirs/) (or [delete](https://rclone.org/commands/rclone_delete/)\nwith option `--rmdirs`) to do that.\n\nTo delete a path and any objects in it, use [purge](https://rclone.org/commands/rclone_purge/) command.\n\n\n```\nrclone rmdir remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for rmdir\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone check\n\nChecks the files in the source and destination match.\n\n## Synopsis\n\nChecks the files in the source and destination match.  It compares\nsizes and hashes (MD5 or SHA1) and logs a report of files that don't\nmatch.  It doesn't alter the source or destination.\n\nFor the [crypt](https://rclone.org/crypt/) remote there is a dedicated command,\n[cryptcheck](https://rclone.org/commands/rclone_cryptcheck/), that are able to check\nthe checksums of the encrypted files.\n\nIf you supply the `--size-only` flag, it will only compare the sizes not\nthe hashes as well.  Use this for a quick check.\n\nIf you supply the `--download` flag, it will download the data from\nboth remotes and check them against each other on the fly.  This can\nbe useful for remotes that don't support hashes or if you really want\nto check all the data.\n\nIf you supply the `--checkfile HASH` flag with a valid hash name,\nthe `source:path` must point to a text file in the SUM format.\n\nIf you supply the `--one-way` flag, it will only check that files in\nthe source match the files in the destination, not the other way\naround. This means that extra files in the destination that are not in\nthe source will not be detected.\n\nThe `--differ`, `--missing-on-dst`, `--missing-on-src`, `--match`\nand `--error` flags write paths, one per line, to the file name (or\nstdout if it is `-`) supplied. What they write is described in the\nhelp below. For example `--differ` will write all paths which are\npresent on both the source and destination but different.\n\nThe `--combined` flag will write a file (or stdout) which contains all\nfile paths with a symbol and then a space and then the path to tell\nyou what happened to it. These are reminiscent of diff files.\n\n- `= path` means path was found in source and destination and was identical\n- `- path` means path was missing on the source, so only in the destination\n- `+ path` means path was missing on the destination, so only in the source\n- `* path` means path was present in source and destination but different.\n- `! path` means there was an error reading or hashing the source or dest.\n\nThe default number of parallel checks is 8. See the [--checkers=N](https://rclone.org/docs/#checkers-n)\noption for more information.\n\n\n```\nrclone check source:path dest:path [flags]\n```\n\n## Options\n\n```\n  -C, --checkfile string        Treat source:path as a SUM file with hashes of given type\n      --combined string         Make a combined report of changes to this file\n      --differ string           Report all non-matching files to this file\n      --download                Check by downloading rather than with hash\n      --error string            Report all files with errors (hashing or reading) to this file\n  -h, --help                    help for check\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n      --one-way                 Check one way only, source files must exist on remote\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Check Options\n\nFlags used for check commands\n\n```\n      --max-backlog int   Maximum number of objects in sync or check backlog (default 10000)\n```\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone ls\n\nList the objects in the path with size and path.\n\n## Synopsis\n\nLists the objects in the source path to standard output in a human\nreadable format with size and path. Recurses by default.\n\nEg\n\n    $ rclone ls swift:bucket\n        60295 bevajer5jef\n        90613 canole\n        94467 diwogej7\n        37600 fubuwic\n\n\nAny of the filtering options can be applied to this command.\n\nThere are several related list commands\n\n  * `ls` to list size and path of objects only\n  * `lsl` to list modification time, size and path of objects only\n  * `lsd` to list directories only\n  * `lsf` to list objects and directories in easy to parse format\n  * `lsjson` to list objects and directories in JSON format\n\n`ls`,`lsl`,`lsd` are designed to be human-readable.\n`lsf` is designed to be human and machine-readable.\n`lsjson` is designed to be machine-readable.\n\nNote that `ls` and `lsl` recurse by default - use `--max-depth 1` to stop the recursion.\n\nThe other list commands `lsd`,`lsf`,`lsjson` do not recurse by default - use `-R` to make them recurse.\n\nListing a nonexistent directory will produce an error except for\nremotes which can't have empty directories (e.g. s3, swift, or gcs -\nthe bucket-based remotes).\n\n\n```\nrclone ls remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for ls\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone lsd\n\nList all directories/containers/buckets in the path.\n\n## Synopsis\n\nLists the directories in the source path to standard output. Does not\nrecurse by default.  Use the `-R` flag to recurse.\n\nThis command lists the total size of the directory (if known, -1 if\nnot), the modification time (if known, the current time if not), the\nnumber of objects in the directory (if known, -1 if not) and the name\nof the directory, Eg\n\n    $ rclone lsd swift:\n          494000 2018-04-26 08:43:20     10000 10000files\n              65 2018-04-26 08:43:20         1 1File\n\nOr\n\n    $ rclone lsd drive:test\n              -1 2016-10-17 17:41:53        -1 1000files\n              -1 2017-01-03 14:40:54        -1 2500files\n              -1 2017-07-08 14:39:28        -1 4000files\n\nIf you just want the directory names use `rclone lsf --dirs-only`.\n\n\nAny of the filtering options can be applied to this command.\n\nThere are several related list commands\n\n  * `ls` to list size and path of objects only\n  * `lsl` to list modification time, size and path of objects only\n  * `lsd` to list directories only\n  * `lsf` to list objects and directories in easy to parse format\n  * `lsjson` to list objects and directories in JSON format\n\n`ls`,`lsl`,`lsd` are designed to be human-readable.\n`lsf` is designed to be human and machine-readable.\n`lsjson` is designed to be machine-readable.\n\nNote that `ls` and `lsl` recurse by default - use `--max-depth 1` to stop the recursion.\n\nThe other list commands `lsd`,`lsf`,`lsjson` do not recurse by default - use `-R` to make them recurse.\n\nListing a nonexistent directory will produce an error except for\nremotes which can't have empty directories (e.g. s3, swift, or gcs -\nthe bucket-based remotes).\n\n\n```\nrclone lsd remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help        help for lsd\n  -R, --recursive   Recurse into the listing\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone lsl\n\nList the objects in path with modification time, size and path.\n\n## Synopsis\n\nLists the objects in the source path to standard output in a human\nreadable format with modification time, size and path. Recurses by default.\n\nEg\n\n    $ rclone lsl swift:bucket\n        60295 2016-06-25 18:55:41.062626927 bevajer5jef\n        90613 2016-06-25 18:55:43.302607074 canole\n        94467 2016-06-25 18:55:43.046609333 diwogej7\n        37600 2016-06-25 18:55:40.814629136 fubuwic\n\n\nAny of the filtering options can be applied to this command.\n\nThere are several related list commands\n\n  * `ls` to list size and path of objects only\n  * `lsl` to list modification time, size and path of objects only\n  * `lsd` to list directories only\n  * `lsf` to list objects and directories in easy to parse format\n  * `lsjson` to list objects and directories in JSON format\n\n`ls`,`lsl`,`lsd` are designed to be human-readable.\n`lsf` is designed to be human and machine-readable.\n`lsjson` is designed to be machine-readable.\n\nNote that `ls` and `lsl` recurse by default - use `--max-depth 1` to stop the recursion.\n\nThe other list commands `lsd`,`lsf`,`lsjson` do not recurse by default - use `-R` to make them recurse.\n\nListing a nonexistent directory will produce an error except for\nremotes which can't have empty directories (e.g. s3, swift, or gcs -\nthe bucket-based remotes).\n\n\n```\nrclone lsl remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for lsl\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone md5sum\n\nProduces an md5sum file for all the objects in the path.\n\n## Synopsis\n\nProduces an md5sum file for all the objects in the path.  This\nis in the same format as the standard md5sum tool produces.\n\nBy default, the hash is requested from the remote.  If MD5 is\nnot supported by the remote, no hash will be returned.  With the\ndownload flag, the file will be downloaded from the remote and\nhashed locally enabling MD5 for any remote.\n\nFor other algorithms, see the [hashsum](https://rclone.org/commands/rclone_hashsum/)\ncommand. Running `rclone md5sum remote:path` is equivalent\nto running `rclone hashsum MD5 remote:path`.\n\nThis command can also hash data received on standard input (stdin),\nby not passing a remote:path, or by passing a hyphen as remote:path\nwhen there is data to read (if not, the hyphen will be treated literally,\nas a relative path).\n\n\n```\nrclone md5sum remote:path [flags]\n```\n\n## Options\n\n```\n      --base64               Output base64 encoded hashsum\n  -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n      --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n  -h, --help                 help for md5sum\n      --output-file string   Output hashsums to a file rather than the terminal\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone sha1sum\n\nProduces an sha1sum file for all the objects in the path.\n\n## Synopsis\n\nProduces an sha1sum file for all the objects in the path.  This\nis in the same format as the standard sha1sum tool produces.\n\nBy default, the hash is requested from the remote.  If SHA-1 is\nnot supported by the remote, no hash will be returned.  With the\ndownload flag, the file will be downloaded from the remote and\nhashed locally enabling SHA-1 for any remote.\n\nFor other algorithms, see the [hashsum](https://rclone.org/commands/rclone_hashsum/)\ncommand. Running `rclone sha1sum remote:path` is equivalent\nto running `rclone hashsum SHA1 remote:path`.\n\nThis command can also hash data received on standard input (stdin),\nby not passing a remote:path, or by passing a hyphen as remote:path\nwhen there is data to read (if not, the hyphen will be treated literally,\nas a relative path).\n\nThis command can also hash data received on STDIN, if not passing\na remote:path.\n\n\n```\nrclone sha1sum remote:path [flags]\n```\n\n## Options\n\n```\n      --base64               Output base64 encoded hashsum\n  -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n      --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n  -h, --help                 help for sha1sum\n      --output-file string   Output hashsums to a file rather than the terminal\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone size\n\nPrints the total size and number of objects in remote:path.\n\n## Synopsis\n\nCounts objects in the path and calculates the total size. Prints the\nresult to standard output.\n\nBy default the output is in human-readable format, but shows values in\nboth human-readable format as well as the raw numbers (global option\n`--human-readable` is not considered). Use option `--json`\nto format output as JSON instead.\n\nRecurses by default, use `--max-depth 1` to stop the\nrecursion.\n\nSome backends do not always provide file sizes, see for example\n[Google Photos](https://rclone.org/googlephotos/#size) and\n[Google Docs](https://rclone.org/drive/#limitations-of-google-docs).\nRclone will then show a notice in the log indicating how many such\nfiles were encountered, and count them in as empty files in the output\nof the size command.\n\n\n```\nrclone size remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for size\n      --json   Format output as JSON\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone version\n\nShow the version number.\n\n## Synopsis\n\nShow the rclone version number, the go version, the build target\nOS and architecture, the runtime OS and kernel version and bitness,\nbuild tags and the type of executable (static or dynamic).\n\nFor example:\n\n    $ rclone version\n    rclone v1.55.0\n    - os/version: ubuntu 18.04 (64 bit)\n    - os/kernel: 4.15.0-136-generic (x86_64)\n    - os/type: linux\n    - os/arch: amd64\n    - go/version: go1.16\n    - go/linking: static\n    - go/tags: none\n\nNote: before rclone version 1.55 the os/type and os/arch lines were merged,\n      and the \"go/version\" line was tagged as \"go version\".\n\nIf you supply the --check flag, then it will do an online check to\ncompare your version with the latest release and the latest beta.\n\n    $ rclone version --check\n    yours:  1.42.0.6\n    latest: 1.42          (released 2018-06-16)\n    beta:   1.42.0.5      (released 2018-06-17)\n\nOr\n\n    $ rclone version --check\n    yours:  1.41\n    latest: 1.42          (released 2018-06-16)\n      upgrade: https://downloads.rclone.org/v1.42\n    beta:   1.42.0.5      (released 2018-06-17)\n      upgrade: https://beta.rclone.org/v1.42-005-g56e1e820\n\n\n\n```\nrclone version [flags]\n```\n\n## Options\n\n```\n      --check   Check for new version\n  -h, --help    help for version\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone cleanup\n\nClean up the remote if possible.\n\n## Synopsis\n\nClean up the remote if possible.  Empty the trash or delete old file\nversions. Not supported by all remotes.\n\n\n```\nrclone cleanup remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for cleanup\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone dedupe\n\nInteractively find duplicate filenames and delete/rename them.\n\n## Synopsis\n\nBy default `dedupe` interactively finds files with duplicate\nnames and offers to delete all but one or rename them to be\ndifferent. This is known as deduping by name.\n\nDeduping by name is only useful with a small group of backends (e.g. Google Drive,\nOpendrive) that can have duplicate file names. It can be run on wrapping backends\n(e.g. crypt) if they wrap a backend which supports duplicate file\nnames.\n\nHowever if `--by-hash` is passed in then dedupe will find files with\nduplicate hashes instead which will work on any backend which supports\nat least one hash. This can be used to find files with duplicate\ncontent. This is known as deduping by hash.\n\nIf deduping by name, first rclone will merge directories with the same\nname.  It will do this iteratively until all the identically named\ndirectories have been merged.\n\nNext, if deduping by name, for every group of duplicate file names /\nhashes, it will delete all but one identical file it finds without\nconfirmation.  This means that for most duplicated files the `dedupe` command will not be interactive.\n\n`dedupe` considers files to be identical if they have the\nsame file path and the same hash. If the backend does not support hashes (e.g. crypt wrapping\nGoogle Drive) then they will never be found to be identical. If you\nuse the `--size-only` flag then files will be considered\nidentical if they have the same size (any hash will be ignored). This\ncan be useful on crypt backends which do not support hashes.\n\nNext rclone will resolve the remaining duplicates. Exactly which\naction is taken depends on the dedupe mode. By default, rclone will\ninteractively query the user for each one.\n\n**Important**: Since this can cause data loss, test first with the\n`--dry-run` or the `--interactive`/`-i` flag.\n\nHere is an example run.\n\nBefore - with duplicates\n\n    $ rclone lsl drive:dupes\n      6048320 2016-03-05 16:23:16.798000000 one.txt\n      6048320 2016-03-05 16:23:11.775000000 one.txt\n       564374 2016-03-05 16:23:06.731000000 one.txt\n      6048320 2016-03-05 16:18:26.092000000 one.txt\n      6048320 2016-03-05 16:22:46.185000000 two.txt\n      1744073 2016-03-05 16:22:38.104000000 two.txt\n       564374 2016-03-05 16:22:52.118000000 two.txt\n\nNow the `dedupe` session\n\n    $ rclone dedupe drive:dupes\n    2016/03/05 16:24:37 Google drive root 'dupes': Looking for duplicates using interactive mode.\n    one.txt: Found 4 files with duplicate names\n    one.txt: Deleting 2/3 identical duplicates (MD5 \"1eedaa9fe86fd4b8632e2ac549403b36\")\n    one.txt: 2 duplicates remain\n      1:      6048320 bytes, 2016-03-05 16:23:16.798000000, MD5 1eedaa9fe86fd4b8632e2ac549403b36\n      2:       564374 bytes, 2016-03-05 16:23:06.731000000, MD5 7594e7dc9fc28f727c42ee3e0749de81\n    s) Skip and do nothing\n    k) Keep just one (choose which in next step)\n    r) Rename all to be different (by changing file.jpg to file-1.jpg)\n    s/k/r> k\n    Enter the number of the file to keep> 1\n    one.txt: Deleted 1 extra copies\n    two.txt: Found 3 files with duplicate names\n    two.txt: 3 duplicates remain\n      1:       564374 bytes, 2016-03-05 16:22:52.118000000, MD5 7594e7dc9fc28f727c42ee3e0749de81\n      2:      6048320 bytes, 2016-03-05 16:22:46.185000000, MD5 1eedaa9fe86fd4b8632e2ac549403b36\n      3:      1744073 bytes, 2016-03-05 16:22:38.104000000, MD5 851957f7fb6f0bc4ce76be966d336802\n    s) Skip and do nothing\n    k) Keep just one (choose which in next step)\n    r) Rename all to be different (by changing file.jpg to file-1.jpg)\n    s/k/r> r\n    two-1.txt: renamed from: two.txt\n    two-2.txt: renamed from: two.txt\n    two-3.txt: renamed from: two.txt\n\nThe result being\n\n    $ rclone lsl drive:dupes\n      6048320 2016-03-05 16:23:16.798000000 one.txt\n       564374 2016-03-05 16:22:52.118000000 two-1.txt\n      6048320 2016-03-05 16:22:46.185000000 two-2.txt\n      1744073 2016-03-05 16:22:38.104000000 two-3.txt\n\nDedupe can be run non interactively using the `--dedupe-mode` flag or by using an extra parameter with the same value\n\n  * `--dedupe-mode interactive` - interactive as above.\n  * `--dedupe-mode skip` - removes identical files then skips anything left.\n  * `--dedupe-mode first` - removes identical files then keeps the first one.\n  * `--dedupe-mode newest` - removes identical files then keeps the newest one.\n  * `--dedupe-mode oldest` - removes identical files then keeps the oldest one.\n  * `--dedupe-mode largest` - removes identical files then keeps the largest one.\n  * `--dedupe-mode smallest` - removes identical files then keeps the smallest one.\n  * `--dedupe-mode rename` - removes identical files then renames the rest to be different.\n  * `--dedupe-mode list` - lists duplicate dirs and files only and changes nothing.\n\nFor example, to rename all the identically named photos in your Google Photos directory, do\n\n    rclone dedupe --dedupe-mode rename \"drive:Google Photos\"\n\nOr\n\n    rclone dedupe rename \"drive:Google Photos\"\n\n\n```\nrclone dedupe [mode] remote:path [flags]\n```\n\n## Options\n\n```\n      --by-hash              Find identical hashes rather than names\n      --dedupe-mode string   Dedupe mode interactive|skip|first|newest|oldest|largest|smallest|rename (default \"interactive\")\n  -h, --help                 help for dedupe\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone about\n\nGet quota information from the remote.\n\n## Synopsis\n\nPrints quota information about a remote to standard\noutput. The output is typically used, free, quota and trash contents.\n\nE.g. Typical output from `rclone about remote:` is:\n\n    Total:   17 GiB\n    Used:    7.444 GiB\n    Free:    1.315 GiB\n    Trashed: 100.000 MiB\n    Other:   8.241 GiB\n\nWhere the fields are:\n\n  * Total: Total size available.\n  * Used: Total size used.\n  * Free: Total space available to this user.\n  * Trashed: Total space used by trash.\n  * Other: Total amount in other storage (e.g. Gmail, Google Photos).\n  * Objects: Total number of objects in the storage.\n\nAll sizes are in number of bytes.\n\nApplying a `--full` flag to the command prints the bytes in full, e.g.\n\n    Total:   18253611008\n    Used:    7993453766\n    Free:    1411001220\n    Trashed: 104857602\n    Other:   8849156022\n\nA `--json` flag generates conveniently machine-readable output, e.g.\n\n    {\n        \"total\": 18253611008,\n        \"used\": 7993453766,\n        \"trashed\": 104857602,\n        \"other\": 8849156022,\n        \"free\": 1411001220\n    }\n\nNot all backends print all fields. Information is not included if it is not\nprovided by a backend. Where the value is unlimited it is omitted.\n\nSome backends does not support the `rclone about` command at all,\nsee complete list in [documentation](https://rclone.org/overview/#optional-features).\n\n\n```\nrclone about remote: [flags]\n```\n\n## Options\n\n```\n      --full   Full numbers instead of human-readable\n  -h, --help   help for about\n      --json   Format output as JSON\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone authorize\n\nRemote authorization.\n\n## Synopsis\n\nRemote authorization. Used to authorize a remote or headless\nrclone from a machine with a browser - use as instructed by\nrclone config.\n\nUse --auth-no-open-browser to prevent rclone to open auth\nlink in default browser automatically.\n\nUse --template to generate HTML output via a custom Go template. If a blank string is provided as an argument to this flag, the default template is used.\n\n```\nrclone authorize [flags]\n```\n\n## Options\n\n```\n      --auth-no-open-browser   Do not automatically open auth link in default browser\n  -h, --help                   help for authorize\n      --template string        The path to a custom Go template for generating HTML responses\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone backend\n\nRun a backend-specific command.\n\n## Synopsis\n\nThis runs a backend-specific command. The commands themselves (except\nfor \"help\" and \"features\") are defined by the backends and you should\nsee the backend docs for definitions.\n\nYou can discover what commands a backend implements by using\n\n    rclone backend help remote:\n    rclone backend help <backendname>\n\nYou can also discover information about the backend using (see\n[operations/fsinfo](https://rclone.org/rc/#operations-fsinfo) in the remote control docs\nfor more info).\n\n    rclone backend features remote:\n\nPass options to the backend command with -o. This should be key=value or key, e.g.:\n\n    rclone backend stats remote:path stats -o format=json -o long\n\nPass arguments to the backend by placing them on the end of the line\n\n    rclone backend cleanup remote:path file1 file2 file3\n\nNote to run these commands on a running backend then see\n[backend/command](https://rclone.org/rc/#backend-command) in the rc docs.\n\n\n```\nrclone backend <command> remote:path [opts] <args> [flags]\n```\n\n## Options\n\n```\n  -h, --help                 help for backend\n      --json                 Always output in JSON format\n  -o, --option stringArray   Option in the form name=value or name\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone bisync\n\nPerform bidirectional synchronization between two paths.\n\n## Synopsis\n\nPerform bidirectional synchronization between two paths.\n\n[Bisync](https://rclone.org/bisync/) provides a\nbidirectional cloud sync solution in rclone.\nIt retains the Path1 and Path2 filesystem listings from the prior run.\nOn each successive run it will:\n- list files on Path1 and Path2, and check for changes on each side.\n  Changes include `New`, `Newer`, `Older`, and `Deleted` files.\n- Propagate changes on Path1 to Path2, and vice-versa.\n\nBisync is **in beta** and is considered an **advanced command**, so use with care.\nMake sure you have read and understood the entire [manual](https://rclone.org/bisync)\n(especially the [Limitations](https://rclone.org/bisync/#limitations) section) before using,\nor data loss can result. Questions can be asked in the [Rclone Forum](https://forum.rclone.org/).\n\nSee [full bisync description](https://rclone.org/bisync/) for details.\n\n\n```\nrclone bisync remote1:path1 remote2:path2 [flags]\n```\n\n## Options\n\n```\n      --backup-dir1 string                   --backup-dir for Path1. Must be a non-overlapping path on the same remote.\n      --backup-dir2 string                   --backup-dir for Path2. Must be a non-overlapping path on the same remote.\n      --check-access                         Ensure expected RCLONE_TEST files are found on both Path1 and Path2 filesystems, else abort.\n      --check-filename string                Filename for --check-access (default: RCLONE_TEST)\n      --check-sync string                    Controls comparison of final listings: true|false|only (default: true) (default \"true\")\n      --compare string                       Comma-separated list of bisync-specific compare options ex. 'size,modtime,checksum' (default: 'size,modtime')\n      --conflict-loser ConflictLoserAction   Action to take on the loser of a sync conflict (when there is a winner) or on both files (when there is no winner): , num, pathname, delete (default: num)\n      --conflict-resolve string              Automatically resolve conflicts by preferring the version that is: none, path1, path2, newer, older, larger, smaller (default: none) (default \"none\")\n      --conflict-suffix string               Suffix to use when renaming a --conflict-loser. Can be either one string or two comma-separated strings to assign different suffixes to Path1/Path2. (default: 'conflict')\n      --create-empty-src-dirs                Sync creation and deletion of empty directories. (Not compatible with --remove-empty-dirs)\n      --download-hash                        Compute hash by downloading when otherwise unavailable. (warning: may be slow and use lots of data!)\n      --filters-file string                  Read filtering patterns from a file\n      --force                                Bypass --max-delete safety check and run the sync. Consider using with --verbose\n  -h, --help                                 help for bisync\n      --ignore-listing-checksum              Do not use checksums for listings (add --ignore-checksum to additionally skip post-copy checksum checks)\n      --max-lock Duration                    Consider lock files older than this to be expired (default: 0 (never expire)) (minimum: 2m) (default 0s)\n      --no-cleanup                           Retain working files (useful for troubleshooting and testing).\n      --no-slow-hash                         Ignore listing checksums only on backends where they are slow\n      --recover                              Automatically recover from interruptions without requiring --resync.\n      --remove-empty-dirs                    Remove ALL empty directories at the final cleanup step.\n      --resilient                            Allow future runs to retry after certain less-serious errors, instead of requiring --resync. Use at your own risk!\n  -1, --resync                               Performs the resync run. Equivalent to --resync-mode path1. Consider using --verbose or --dry-run first.\n      --resync-mode string                   During resync, prefer the version that is: path1, path2, newer, older, larger, smaller (default: path1 if --resync, otherwise none for no resync.) (default \"none\")\n      --slow-hash-sync-only                  Ignore slow checksums for listings and deltas, but still consider them during sync calls.\n      --workdir string                       Use custom working dir - useful for testing. (default: {WORKDIR})\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Copy Options\n\nFlags for anything which can copy a file\n\n```\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don't check the destination, copy regardless\n      --no-traverse                                 Don't traverse destination file system on copy\n      --no-update-dir-modtime                       Don't update directory modification times\n      --no-update-modtime                           Don't update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n```\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone cat\n\nConcatenates any files and sends them to stdout.\n\n## Synopsis\n\nSends any files to standard output.\n\nYou can use it like this to output a single file\n\n    rclone cat remote:path/to/file\n\nOr like this to output any file in dir or its subdirectories.\n\n    rclone cat remote:path/to/dir\n\nOr like this to output any .txt files in dir or its subdirectories.\n\n    rclone --include \"*.txt\" cat remote:path/to/dir\n\nUse the `--head` flag to print characters only at the start, `--tail` for\nthe end and `--offset` and `--count` to print a section in the middle.\nNote that if offset is negative it will count from the end, so\n`--offset -1 --count 1` is equivalent to `--tail 1`.\n\nUse the `--separator` flag to print a separator value between files. Be sure to\nshell-escape special characters. For example, to print a newline between\nfiles, use:\n\n* bash:\n\n      rclone --include \"*.txt\" --separator $'\\n' cat remote:path/to/dir\n\n* powershell:\n\n      rclone --include \"*.txt\" --separator \"`n\" cat remote:path/to/dir\n\n\n```\nrclone cat remote:path [flags]\n```\n\n## Options\n\n```\n      --count int          Only print N characters (default -1)\n      --discard            Discard the output instead of printing\n      --head int           Only print the first N characters\n  -h, --help               help for cat\n      --offset int         Start printing at offset N (or from end if -ve)\n      --separator string   Separator to use between objects when printing multiple files\n      --tail int           Only print the last N characters\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone checksum\n\nChecks the files in the destination against a SUM file.\n\n## Synopsis\n\nChecks that hashsums of destination files match the SUM file.\nIt compares hashes (MD5, SHA1, etc) and logs a report of files which\ndon't match.  It doesn't alter the file system.\n\nThe sumfile is treated as the source and the dst:path is treated as\nthe destination for the purposes of the output.\n\nIf you supply the `--download` flag, it will download the data from the remote\nand calculate the content hash on the fly.  This can be useful for remotes\nthat don't support hashes or if you really want to check all the data.\n\nNote that hash values in the SUM file are treated as case insensitive.\n\nIf you supply the `--one-way` flag, it will only check that files in\nthe source match the files in the destination, not the other way\naround. This means that extra files in the destination that are not in\nthe source will not be detected.\n\nThe `--differ`, `--missing-on-dst`, `--missing-on-src`, `--match`\nand `--error` flags write paths, one per line, to the file name (or\nstdout if it is `-`) supplied. What they write is described in the\nhelp below. For example `--differ` will write all paths which are\npresent on both the source and destination but different.\n\nThe `--combined` flag will write a file (or stdout) which contains all\nfile paths with a symbol and then a space and then the path to tell\nyou what happened to it. These are reminiscent of diff files.\n\n- `= path` means path was found in source and destination and was identical\n- `- path` means path was missing on the source, so only in the destination\n- `+ path` means path was missing on the destination, so only in the source\n- `* path` means path was present in source and destination but different.\n- `! path` means there was an error reading or hashing the source or dest.\n\nThe default number of parallel checks is 8. See the [--checkers=N](https://rclone.org/docs/#checkers-n)\noption for more information.\n\n\n```\nrclone checksum <hash> sumfile dst:path [flags]\n```\n\n## Options\n\n```\n      --combined string         Make a combined report of changes to this file\n      --differ string           Report all non-matching files to this file\n      --download                Check by hashing the contents\n      --error string            Report all files with errors (hashing or reading) to this file\n  -h, --help                    help for checksum\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n      --one-way                 Check one way only, source files must exist on remote\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone completion\n\nOutput completion script for a given shell.\n\n## Synopsis\n\nGenerates a shell completion script for rclone.\nRun with `--help` to list the supported shells.\n\n\n## Options\n\n```\n  -h, --help   help for completion\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n* [rclone completion bash](https://rclone.org/commands/rclone_completion_bash/)\t - Output bash completion script for rclone.\n* [rclone completion fish](https://rclone.org/commands/rclone_completion_fish/)\t - Output fish completion script for rclone.\n* [rclone completion powershell](https://rclone.org/commands/rclone_completion_powershell/)\t - Output powershell completion script for rclone.\n* [rclone completion zsh](https://rclone.org/commands/rclone_completion_zsh/)\t - Output zsh completion script for rclone.\n\n# rclone completion bash\n\nOutput bash completion script for rclone.\n\n## Synopsis\n\nGenerates a bash shell autocompletion script for rclone.\n\nBy default, when run without any arguments, \n\n    rclone completion bash\n\nthe generated script will be written to\n\n    /etc/bash_completion.d/rclone\n\nand so rclone will probably need to be run as root, or with sudo.\n\nIf you supply a path to a file as the command line argument, then \nthe generated script will be written to that file, in which case\nyou should not need root privileges.\n\nIf output_file is \"-\", then the output will be written to stdout.\n\nIf you have installed the script into the default location, you\ncan logout and login again to use the autocompletion script.\n\nAlternatively, you can source the script directly\n\n    . /path/to/my_bash_completion_scripts/rclone\n\nand the autocompletion functionality will be added to your\ncurrent shell.\n\n\n```\nrclone completion bash [output_file] [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for bash\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone completion](https://rclone.org/commands/rclone_completion/)\t - Output completion script for a given shell.\n\n# rclone completion fish\n\nOutput fish completion script for rclone.\n\n## Synopsis\n\nGenerates a fish autocompletion script for rclone.\n\nThis writes to /etc/fish/completions/rclone.fish by default so will\nprobably need to be run with sudo or as root, e.g.\n\n    sudo rclone completion fish\n\nLogout and login again to use the autocompletion scripts, or source\nthem directly\n\n    . /etc/fish/completions/rclone.fish\n\nIf you supply a command line argument the script will be written\nthere.\n\nIf output_file is \"-\", then the output will be written to stdout.\n\n\n```\nrclone completion fish [output_file] [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for fish\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone completion](https://rclone.org/commands/rclone_completion/)\t - Output completion script for a given shell.\n\n# rclone completion powershell\n\nOutput powershell completion script for rclone.\n\n## Synopsis\n\nGenerate the autocompletion script for powershell.\n\nTo load completions in your current shell session:\n\n    rclone completion powershell | Out-String | Invoke-Expression\n\nTo load completions for every new session, add the output of the above command\nto your powershell profile.\n\nIf output_file is \"-\" or missing, then the output will be written to stdout.\n\n\n```\nrclone completion powershell [output_file] [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for powershell\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone completion](https://rclone.org/commands/rclone_completion/)\t - Output completion script for a given shell.\n\n# rclone completion zsh\n\nOutput zsh completion script for rclone.\n\n## Synopsis\n\nGenerates a zsh autocompletion script for rclone.\n\nThis writes to /usr/share/zsh/vendor-completions/_rclone by default so will\nprobably need to be run with sudo or as root, e.g.\n\n    sudo rclone completion zsh\n\nLogout and login again to use the autocompletion scripts, or source\nthem directly\n\n    autoload -U compinit && compinit\n\nIf you supply a command line argument the script will be written\nthere.\n\nIf output_file is \"-\", then the output will be written to stdout.\n\n\n```\nrclone completion zsh [output_file] [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for zsh\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone completion](https://rclone.org/commands/rclone_completion/)\t - Output completion script for a given shell.\n\n# rclone config create\n\nCreate a new remote with name, type and options.\n\n## Synopsis\n\nCreate a new remote of `name` with `type` and options.  The options\nshould be passed in pairs of `key` `value` or as `key=value`.\n\nFor example, to make a swift remote of name myremote using auto config\nyou would do:\n\n    rclone config create myremote swift env_auth true\n    rclone config create myremote swift env_auth=true\n\nSo for example if you wanted to configure a Google Drive remote but\nusing remote authorization you would do this:\n\n    rclone config create mydrive drive config_is_local=false\n\nNote that if the config process would normally ask a question the\ndefault is taken (unless `--non-interactive` is used).  Each time\nthat happens rclone will print or DEBUG a message saying how to\naffect the value taken.\n\nIf any of the parameters passed is a password field, then rclone will\nautomatically obscure them if they aren't already obscured before\nputting them in the config file.\n\n**NB** If the password parameter is 22 characters or longer and\nconsists only of base64 characters then rclone can get confused about\nwhether the password is already obscured or not and put unobscured\npasswords into the config file. If you want to be 100% certain that\nthe passwords get obscured then use the `--obscure` flag, or if you\nare 100% certain you are already passing obscured passwords then use\n`--no-obscure`.  You can also set obscured passwords using the\n`rclone config password` command.\n\nThe flag `--non-interactive` is for use by applications that wish to\nconfigure rclone themselves, rather than using rclone's text based\nconfiguration questions. If this flag is set, and rclone needs to ask\nthe user a question, a JSON blob will be returned with the question in\nit.\n\nThis will look something like (some irrelevant detail removed):\n\n```\n{\n    \"State\": \"*oauth-islocal,teamdrive,,\",\n    \"Option\": {\n        \"Name\": \"config_is_local\",\n        \"Help\": \"Use web browser to automatically authenticate rclone with remote?\\n * Say Y if the machine running rclone has a web browser you can use\\n * Say N if running rclone on a (remote) machine without web browser access\\nIf not sure try Y. If Y failed, try N.\\n\",\n        \"Default\": true,\n        \"Examples\": [\n            {\n                \"Value\": \"true\",\n                \"Help\": \"Yes\"\n            },\n            {\n                \"Value\": \"false\",\n                \"Help\": \"No\"\n            }\n        ],\n        \"Required\": false,\n        \"IsPassword\": false,\n        \"Type\": \"bool\",\n        \"Exclusive\": true,\n    },\n    \"Error\": \"\",\n}\n```\n\nThe format of `Option` is the same as returned by `rclone config\nproviders`. The question should be asked to the user and returned to\nrclone as the `--result` option along with the `--state` parameter.\n\nThe keys of `Option` are used as follows:\n\n- `Name` - name of variable - show to user\n- `Help` - help text. Hard wrapped at 80 chars. Any URLs should be clicky.\n- `Default` - default value - return this if the user just wants the default.\n- `Examples` - the user should be able to choose one of these\n- `Required` - the value should be non-empty\n- `IsPassword` - the value is a password and should be edited as such\n- `Type` - type of value, eg `bool`, `string`, `int` and others\n- `Exclusive` - if set no free-form entry allowed only the `Examples`\n- Irrelevant keys `Provider`, `ShortOpt`, `Hide`, `NoPrefix`, `Advanced`\n\nIf `Error` is set then it should be shown to the user at the same\ntime as the question.\n\n    rclone config update name --continue --state \"*oauth-islocal,teamdrive,,\" --result \"true\"\n\nNote that when using `--continue` all passwords should be passed in\nthe clear (not obscured). Any default config values should be passed\nin with each invocation of `--continue`.\n\nAt the end of the non interactive process, rclone will return a result\nwith `State` as empty string.\n\nIf `--all` is passed then rclone will ask all the config questions,\nnot just the post config questions. Any parameters are used as\ndefaults for questions as usual.\n\nNote that `bin/config.py` in the rclone source implements this protocol\nas a readable demonstration.\n\n\n```\nrclone config create name type [key value]* [flags]\n```\n\n## Options\n\n```\n      --all               Ask the full set of config questions\n      --continue          Continue the configuration process with an answer\n  -h, --help              help for create\n      --no-obscure        Force any passwords not to be obscured\n      --non-interactive   Don't interact with user and return questions\n      --obscure           Force any passwords to be obscured\n      --result string     Result - use with --continue\n      --state string      State - use with --continue\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config delete\n\nDelete an existing remote.\n\n```\nrclone config delete name [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for delete\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config disconnect\n\nDisconnects user from remote\n\n## Synopsis\n\nThis disconnects the remote: passed in to the cloud storage system.\n\nThis normally means revoking the oauth token.\n\nTo reconnect use \"rclone config reconnect\".\n\n\n```\nrclone config disconnect remote: [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for disconnect\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config dump\n\nDump the config file as JSON.\n\n```\nrclone config dump [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for dump\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config edit\n\nEnter an interactive configuration session.\n\n## Synopsis\n\nEnter an interactive configuration session where you can setup new\nremotes and manage existing ones. You may also set or remove a\npassword to protect your configuration.\n\n\n```\nrclone config edit [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for edit\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config encryption\n\nset, remove and check the encryption for the config file\n\n## Synopsis\n\nThis command sets, clears and checks the encryption for the config file using\nthe subcommands below.\n\n\n## Options\n\n```\n  -h, --help   help for encryption\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n* [rclone config encryption check](https://rclone.org/commands/rclone_config_encryption_check/)\t - Check that the config file is encrypted\n* [rclone config encryption remove](https://rclone.org/commands/rclone_config_encryption_remove/)\t - Remove the config file encryption password\n* [rclone config encryption set](https://rclone.org/commands/rclone_config_encryption_set/)\t - Set or change the config file encryption password\n\n# rclone config encryption check\n\nCheck that the config file is encrypted\n\n## Synopsis\n\nThis checks the config file is encrypted and that you can decrypt it.\n\nIt will attempt to decrypt the config using the password you supply.\n\nIf decryption fails it will return a non-zero exit code if using\n`--password-command`, otherwise it will prompt again for the password.\n\nIf the config file is not encrypted it will return a non zero exit code.\n\n\n```\nrclone config encryption check [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for check\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config encryption](https://rclone.org/commands/rclone_config_encryption/)\t - set, remove and check the encryption for the config file\n\n# rclone config encryption remove\n\nRemove the config file encryption password\n\n## Synopsis\n\nRemove the config file encryption password\n\nThis removes the config file encryption, returning it to un-encrypted.\n\nIf `--password-command` is in use, this will be called to supply the old config\npassword.\n\nIf the config was not encrypted then no error will be returned and\nthis command will do nothing.\n\n\n```\nrclone config encryption remove [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for remove\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config encryption](https://rclone.org/commands/rclone_config_encryption/)\t - set, remove and check the encryption for the config file\n\n# rclone config encryption set\n\nSet or change the config file encryption password\n\n## Synopsis\n\nThis command sets or changes the config file encryption password.\n\nIf there was no config password set then it sets a new one, otherwise\nit changes the existing config password.\n\nNote that if you are changing an encryption password using\n`--password-command` then this will be called once to decrypt the\nconfig using the old password and then again to read the new\npassword to re-encrypt the config.\n\nWhen `--password-command` is called to change the password then the\nenvironment variable `RCLONE_PASSWORD_CHANGE=1` will be set. So if\nchanging passwords programatically you can use the environment\nvariable to distinguish which password you must supply.\n\nAlternatively you can remove the password first (with `rclone config\nencryption remove`), then set it again with this command which may be\neasier if you don't mind the unecrypted config file being on the disk\nbriefly.\n\n\n```\nrclone config encryption set [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for set\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config encryption](https://rclone.org/commands/rclone_config_encryption/)\t - set, remove and check the encryption for the config file\n\n# rclone config file\n\nShow path of configuration file in use.\n\n```\nrclone config file [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for file\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config password\n\nUpdate password in an existing remote.\n\n## Synopsis\n\nUpdate an existing remote's password. The password\nshould be passed in pairs of `key` `password` or as `key=password`.\nThe `password` should be passed in in clear (unobscured).\n\nFor example, to set password of a remote of name myremote you would do:\n\n    rclone config password myremote fieldname mypassword\n    rclone config password myremote fieldname=mypassword\n\nThis command is obsolete now that \"config update\" and \"config create\"\nboth support obscuring passwords directly.\n\n\n```\nrclone config password name [key value]+ [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for password\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config paths\n\nShow paths used for configuration, cache, temp etc.\n\n```\nrclone config paths [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for paths\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config providers\n\nList in JSON format all the providers and options.\n\n```\nrclone config providers [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for providers\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config reconnect\n\nRe-authenticates user with remote.\n\n## Synopsis\n\nThis reconnects remote: passed in to the cloud storage system.\n\nTo disconnect the remote use \"rclone config disconnect\".\n\nThis normally means going through the interactive oauth flow again.\n\n\n```\nrclone config reconnect remote: [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for reconnect\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config redacted\n\nPrint redacted (decrypted) config file, or the redacted config for a single remote.\n\n## Synopsis\n\nThis prints a redacted copy of the config file, either the\nwhole config file or for a given remote.\n\nThe config file will be redacted by replacing all passwords and other\nsensitive info with XXX.\n\nThis makes the config file suitable for posting online for support.\n\nIt should be double checked before posting as the redaction may not be perfect.\n\n\n\n```\nrclone config redacted [<remote>] [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for redacted\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config show\n\nPrint (decrypted) config file, or the config for a single remote.\n\n```\nrclone config show [<remote>] [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for show\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config touch\n\nEnsure configuration file exists.\n\n```\nrclone config touch [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for touch\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config update\n\nUpdate options in an existing remote.\n\n## Synopsis\n\nUpdate an existing remote's options. The options should be passed in\npairs of `key` `value` or as `key=value`.\n\nFor example, to update the env_auth field of a remote of name myremote\nyou would do:\n\n    rclone config update myremote env_auth true\n    rclone config update myremote env_auth=true\n\nIf the remote uses OAuth the token will be updated, if you don't\nrequire this add an extra parameter thus:\n\n    rclone config update myremote env_auth=true config_refresh_token=false\n\nNote that if the config process would normally ask a question the\ndefault is taken (unless `--non-interactive` is used).  Each time\nthat happens rclone will print or DEBUG a message saying how to\naffect the value taken.\n\nIf any of the parameters passed is a password field, then rclone will\nautomatically obscure them if they aren't already obscured before\nputting them in the config file.\n\n**NB** If the password parameter is 22 characters or longer and\nconsists only of base64 characters then rclone can get confused about\nwhether the password is already obscured or not and put unobscured\npasswords into the config file. If you want to be 100% certain that\nthe passwords get obscured then use the `--obscure` flag, or if you\nare 100% certain you are already passing obscured passwords then use\n`--no-obscure`.  You can also set obscured passwords using the\n`rclone config password` command.\n\nThe flag `--non-interactive` is for use by applications that wish to\nconfigure rclone themselves, rather than using rclone's text based\nconfiguration questions. If this flag is set, and rclone needs to ask\nthe user a question, a JSON blob will be returned with the question in\nit.\n\nThis will look something like (some irrelevant detail removed):\n\n```\n{\n    \"State\": \"*oauth-islocal,teamdrive,,\",\n    \"Option\": {\n        \"Name\": \"config_is_local\",\n        \"Help\": \"Use web browser to automatically authenticate rclone with remote?\\n * Say Y if the machine running rclone has a web browser you can use\\n * Say N if running rclone on a (remote) machine without web browser access\\nIf not sure try Y. If Y failed, try N.\\n\",\n        \"Default\": true,\n        \"Examples\": [\n            {\n                \"Value\": \"true\",\n                \"Help\": \"Yes\"\n            },\n            {\n                \"Value\": \"false\",\n                \"Help\": \"No\"\n            }\n        ],\n        \"Required\": false,\n        \"IsPassword\": false,\n        \"Type\": \"bool\",\n        \"Exclusive\": true,\n    },\n    \"Error\": \"\",\n}\n```\n\nThe format of `Option` is the same as returned by `rclone config\nproviders`. The question should be asked to the user and returned to\nrclone as the `--result` option along with the `--state` parameter.\n\nThe keys of `Option` are used as follows:\n\n- `Name` - name of variable - show to user\n- `Help` - help text. Hard wrapped at 80 chars. Any URLs should be clicky.\n- `Default` - default value - return this if the user just wants the default.\n- `Examples` - the user should be able to choose one of these\n- `Required` - the value should be non-empty\n- `IsPassword` - the value is a password and should be edited as such\n- `Type` - type of value, eg `bool`, `string`, `int` and others\n- `Exclusive` - if set no free-form entry allowed only the `Examples`\n- Irrelevant keys `Provider`, `ShortOpt`, `Hide`, `NoPrefix`, `Advanced`\n\nIf `Error` is set then it should be shown to the user at the same\ntime as the question.\n\n    rclone config update name --continue --state \"*oauth-islocal,teamdrive,,\" --result \"true\"\n\nNote that when using `--continue` all passwords should be passed in\nthe clear (not obscured). Any default config values should be passed\nin with each invocation of `--continue`.\n\nAt the end of the non interactive process, rclone will return a result\nwith `State` as empty string.\n\nIf `--all` is passed then rclone will ask all the config questions,\nnot just the post config questions. Any parameters are used as\ndefaults for questions as usual.\n\nNote that `bin/config.py` in the rclone source implements this protocol\nas a readable demonstration.\n\n\n```\nrclone config update name [key value]+ [flags]\n```\n\n## Options\n\n```\n      --all               Ask the full set of config questions\n      --continue          Continue the configuration process with an answer\n  -h, --help              help for update\n      --no-obscure        Force any passwords not to be obscured\n      --non-interactive   Don't interact with user and return questions\n      --obscure           Force any passwords to be obscured\n      --result string     Result - use with --continue\n      --state string      State - use with --continue\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone config userinfo\n\nPrints info about logged in user of remote.\n\n## Synopsis\n\nThis prints the details of the person logged in to the cloud storage\nsystem.\n\n\n```\nrclone config userinfo remote: [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for userinfo\n      --json   Format output as JSON\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone config](https://rclone.org/commands/rclone_config/)\t - Enter an interactive configuration session.\n\n# rclone copyto\n\nCopy files from source to dest, skipping identical files.\n\n## Synopsis\n\nIf source:path is a file or directory then it copies it to a file or\ndirectory named dest:path.\n\nThis can be used to upload single files to other than their current\nname.  If the source is a directory then it acts exactly like the\n[copy](https://rclone.org/commands/rclone_copy/) command.\n\nSo\n\n    rclone copyto src dst\n\nwhere src and dst are rclone paths, either remote:path or\n/path/to/local or C:\\windows\\path\\if\\on\\windows.\n\nThis will:\n\n    if src is file\n        copy it to dst, overwriting an existing file if it exists\n    if src is directory\n        copy it to dst, overwriting existing files if they exist\n        see copy command for full details\n\nThis doesn't transfer files that are identical on src and dst, testing\nby size and modification time or MD5SUM.  It doesn't delete files from\nthe destination.\n\n**Note**: Use the `-P`/`--progress` flag to view real-time transfer statistics\n\n\n```\nrclone copyto source:path dest:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for copyto\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Copy Options\n\nFlags for anything which can copy a file\n\n```\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don't check the destination, copy regardless\n      --no-traverse                                 Don't traverse destination file system on copy\n      --no-update-dir-modtime                       Don't update directory modification times\n      --no-update-modtime                           Don't update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n```\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone copyurl\n\nCopy the contents of the URL supplied content to dest:path.\n\n## Synopsis\n\nDownload a URL's content and copy it to the destination without saving\nit in temporary storage.\n\nSetting `--auto-filename` will attempt to automatically determine the\nfilename from the URL (after any redirections) and used in the\ndestination path.\n\nWith `--auto-filename-header` in addition, if a specific filename is\nset in HTTP headers, it will be used instead of the name from the URL.\nWith `--print-filename` in addition, the resulting file name will be\nprinted.\n\nSetting `--no-clobber` will prevent overwriting file on the \ndestination if there is one with the same name.\n\nSetting `--stdout` or making the output file name `-`\nwill cause the output to be written to standard output.\n\n## Troublshooting\n\nIf you can't get `rclone copyurl` to work then here are some things you can try:\n\n- `--disable-http2` rclone will use HTTP2 if available - try disabling it\n- `--bind 0.0.0.0` rclone will use IPv6 if available - try disabling it\n- `--bind ::0` to disable IPv4\n- `--user agent curl` - some sites have whitelists for curl's user-agent - try that\n- Make sure the site works with `curl` directly\n\n\n\n```\nrclone copyurl https://example.com dest:path [flags]\n```\n\n## Options\n\n```\n  -a, --auto-filename     Get the file name from the URL and use it for destination file path\n      --header-filename   Get the file name from the Content-Disposition header\n  -h, --help              help for copyurl\n      --no-clobber        Prevent overwriting file with same name\n  -p, --print-filename    Print the resulting name from --auto-filename\n      --stdout            Write the output to stdout rather than a file\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone cryptcheck\n\nCryptcheck checks the integrity of an encrypted remote.\n\n## Synopsis\n\nChecks a remote against a [crypted](https://rclone.org/crypt/) remote. This is the equivalent\nof running rclone [check](https://rclone.org/commands/rclone_check/), but able to check the\nchecksums of the encrypted remote.\n\nFor it to work the underlying remote of the cryptedremote must support\nsome kind of checksum.\n\nIt works by reading the nonce from each file on the cryptedremote: and\nusing that to encrypt each file on the remote:.  It then checks the\nchecksum of the underlying file on the cryptedremote: against the\nchecksum of the file it has just encrypted.\n\nUse it like this\n\n    rclone cryptcheck /path/to/files encryptedremote:path\n\nYou can use it like this also, but that will involve downloading all\nthe files in remote:path.\n\n    rclone cryptcheck remote:path encryptedremote:path\n\nAfter it has run it will log the status of the encryptedremote:.\n\nIf you supply the `--one-way` flag, it will only check that files in\nthe source match the files in the destination, not the other way\naround. This means that extra files in the destination that are not in\nthe source will not be detected.\n\nThe `--differ`, `--missing-on-dst`, `--missing-on-src`, `--match`\nand `--error` flags write paths, one per line, to the file name (or\nstdout if it is `-`) supplied. What they write is described in the\nhelp below. For example `--differ` will write all paths which are\npresent on both the source and destination but different.\n\nThe `--combined` flag will write a file (or stdout) which contains all\nfile paths with a symbol and then a space and then the path to tell\nyou what happened to it. These are reminiscent of diff files.\n\n- `= path` means path was found in source and destination and was identical\n- `- path` means path was missing on the source, so only in the destination\n- `+ path` means path was missing on the destination, so only in the source\n- `* path` means path was present in source and destination but different.\n- `! path` means there was an error reading or hashing the source or dest.\n\nThe default number of parallel checks is 8. See the [--checkers=N](https://rclone.org/docs/#checkers-n)\noption for more information.\n\n\n```\nrclone cryptcheck remote:path cryptedremote:path [flags]\n```\n\n## Options\n\n```\n      --combined string         Make a combined report of changes to this file\n      --differ string           Report all non-matching files to this file\n      --error string            Report all files with errors (hashing or reading) to this file\n  -h, --help                    help for cryptcheck\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n      --one-way                 Check one way only, source files must exist on remote\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Check Options\n\nFlags used for check commands\n\n```\n      --max-backlog int   Maximum number of objects in sync or check backlog (default 10000)\n```\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone cryptdecode\n\nCryptdecode returns unencrypted file names.\n\n## Synopsis\n\nReturns unencrypted file names when provided with a list of encrypted file\nnames. List limit is 10 items.\n\nIf you supply the `--reverse` flag, it will return encrypted file names.\n\nuse it like this\n\n\trclone cryptdecode encryptedremote: encryptedfilename1 encryptedfilename2\n\n\trclone cryptdecode --reverse encryptedremote: filename1 filename2\n\nAnother way to accomplish this is by using the `rclone backend encode` (or `decode`) command.\nSee the documentation on the [crypt](https://rclone.org/crypt/) overlay for more info.\n\n\n```\nrclone cryptdecode encryptedremote: encryptedfilename [flags]\n```\n\n## Options\n\n```\n  -h, --help      help for cryptdecode\n      --reverse   Reverse cryptdecode, encrypts filenames\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone deletefile\n\nRemove a single file from remote.\n\n## Synopsis\n\nRemove a single file from remote.  Unlike `delete` it cannot be used to\nremove a directory and it doesn't obey include/exclude filters - if the specified file exists,\nit will always be removed.\n\n\n```\nrclone deletefile remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for deletefile\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone gendocs\n\nOutput markdown docs for rclone to the directory supplied.\n\n## Synopsis\n\nThis produces markdown docs for the rclone commands to the directory\nsupplied.  These are in a format suitable for hugo to render into the\nrclone.org website.\n\n```\nrclone gendocs output_directory [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for gendocs\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone gitannex\n\nSpeaks with git-annex over stdin/stdout.\n\n## Synopsis\n\nRclone's `gitannex` subcommand enables [git-annex] to store and retrieve content\nfrom an rclone remote. It is meant to be run by git-annex, not directly by\nusers.\n\n[git-annex]: https://git-annex.branchable.com/\n\nInstallation on Linux\n---------------------\n\n1. Skip this step if your version of git-annex is [10.20240430] or newer.\n   Otherwise, you must create a symlink somewhere on your PATH with a particular\n   name. This symlink helps git-annex tell rclone it wants to run the \"gitannex\"\n   subcommand.\n\n   ```sh\n   # Create the helper symlink in \"$HOME/bin\".\n   ln -s \"$(realpath rclone)\" \"$HOME/bin/git-annex-remote-rclone-builtin\"\n\n   # Verify the new symlink is on your PATH.\n   which git-annex-remote-rclone-builtin\n   ```\n\n   [10.20240430]: https://git-annex.branchable.com/news/version_10.20240430/\n\n2. Add a new remote to your git-annex repo. This new remote will connect\n   git-annex with the `rclone gitannex` subcommand.\n\n   Start by asking git-annex to describe the remote's available configuration\n   parameters.\n\n   ```sh\n   # If you skipped step 1:\n   git annex initremote MyRemote type=rclone --whatelse\n\n   # If you created a symlink in step 1:\n   git annex initremote MyRemote type=external externaltype=rclone-builtin --whatelse\n    ```\n\n   > **NOTE**: If you're porting an existing [git-annex-remote-rclone] remote to\n   > use `rclone gitannex`, you can probably reuse the configuration parameters\n   > verbatim without renaming them. Check parameter synonyms with `--whatelse`\n   > as shown above.\n   >\n   > [git-annex-remote-rclone]: https://github.com/git-annex-remote-rclone/git-annex-remote-rclone\n\n   The following example creates a new git-annex remote named \"MyRemote\" that\n   will use the rclone remote named \"SomeRcloneRemote\". That rclone remote must\n   be one configured in your rclone.conf file, which can be located with `rclone\n   config file`.\n\n   ```sh\n   git annex initremote MyRemote         \\\n       type=external                     \\\n       externaltype=rclone-builtin       \\\n       encryption=none                   \\\n       rcloneremotename=SomeRcloneRemote \\\n       rcloneprefix=git-annex-content    \\\n       rclonelayout=nodir\n   ```\n\n3. Before you trust this command with your precious data, be sure to **test the\n   remote**. This command is very new and has not been tested on many rclone\n   backends. Caveat emptor!\n\n   ```sh\n   git annex testremote MyRemote\n   ```\n\nHappy annexing!\n\n\n```\nrclone gitannex [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for gitannex\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone hashsum\n\nProduces a hashsum file for all the objects in the path.\n\n## Synopsis\n\nProduces a hash file for all the objects in the path using the hash\nnamed.  The output is in the same format as the standard\nmd5sum/sha1sum tool.\n\nBy default, the hash is requested from the remote.  If the hash is\nnot supported by the remote, no hash will be returned.  With the\ndownload flag, the file will be downloaded from the remote and\nhashed locally enabling any hash for any remote.\n\nFor the MD5 and SHA1 algorithms there are also dedicated commands,\n[md5sum](https://rclone.org/commands/rclone_md5sum/) and [sha1sum](https://rclone.org/commands/rclone_sha1sum/).\n\nThis command can also hash data received on standard input (stdin),\nby not passing a remote:path, or by passing a hyphen as remote:path\nwhen there is data to read (if not, the hyphen will be treated literally,\nas a relative path).\n\nRun without a hash to see the list of all supported hashes, e.g.\n\n    $ rclone hashsum\n    Supported hashes are:\n      * md5\n      * sha1\n      * whirlpool\n      * crc32\n      * sha256\n\nThen\n\n    $ rclone hashsum MD5 remote:path\n\nNote that hash names are case insensitive and values are output in lower case.\n\n\n```\nrclone hashsum [<hash> remote:path] [flags]\n```\n\n## Options\n\n```\n      --base64               Output base64 encoded hashsum\n  -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n      --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n  -h, --help                 help for hashsum\n      --output-file string   Output hashsums to a file rather than the terminal\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone link\n\nGenerate public link to file/folder.\n\n## Synopsis\n\nCreate, retrieve or remove a public link to the given file or folder.\n\n    rclone link remote:path/to/file\n    rclone link remote:path/to/folder/\n    rclone link --unlink remote:path/to/folder/\n    rclone link --expire 1d remote:path/to/file\n\nIf you supply the --expire flag, it will set the expiration time\notherwise it will use the default (100 years). **Note** not all\nbackends support the --expire flag - if the backend doesn't support it\nthen the link returned won't expire.\n\nUse the --unlink flag to remove existing public links to the file or\nfolder. **Note** not all backends support \"--unlink\" flag - those that\ndon't will just ignore it.\n\nIf successful, the last line of the output will contain the\nlink. Exact capabilities depend on the remote, but the link will\nalways by default be created with the least constraints – e.g. no\nexpiry, no password protection, accessible without account.\n\n\n```\nrclone link remote:path [flags]\n```\n\n## Options\n\n```\n      --expire Duration   The amount of time that the link will be valid (default off)\n  -h, --help              help for link\n      --unlink            Remove existing public link to file/folder\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone listremotes\n\nList all the remotes in the config file and defined in environment variables.\n\n## Synopsis\n\n\nLists all the available remotes from the config file, or the remotes matching\nan optional filter.\n\nPrints the result in human-readable format by default, and as a simple list of\nremote names, or if used with flag `--long` a tabular format including\nthe remote names, types and descriptions. Using flag `--json` produces\nmachine-readable output instead, which always includes all attributes - including\nthe source (file or environment).\n\nResult can be filtered by a filter argument which applies to all attributes,\nand/or filter flags specific for each attribute. The values must be specified\naccording to regular rclone filtering pattern syntax.\n\n\n```\nrclone listremotes [<filter>] [flags]\n```\n\n## Options\n\n```\n      --description string   Filter remotes by description\n  -h, --help                 help for listremotes\n      --json                 Format output as JSON\n      --long                 Show type and description in addition to name\n      --name string          Filter remotes by name\n      --order-by string      Instructions on how to order the result, e.g. 'type,name=descending'\n      --source string        Filter remotes by source, e.g. 'file' or 'environment'\n      --type string          Filter remotes by type\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone lsf\n\nList directories and objects in remote:path formatted for parsing.\n\n## Synopsis\n\nList the contents of the source path (directories and objects) to\nstandard output in a form which is easy to parse by scripts.  By\ndefault this will just be the names of the objects and directories,\none per line.  The directories will have a / suffix.\n\nEg\n\n    $ rclone lsf swift:bucket\n    bevajer5jef\n    canole\n    diwogej7\n    ferejej3gux/\n    fubuwic\n\nUse the `--format` option to control what gets listed.  By default this\nis just the path, but you can use these parameters to control the\noutput:\n\n    p - path\n    s - size\n    t - modification time\n    h - hash\n    i - ID of object\n    o - Original ID of underlying object\n    m - MimeType of object if known\n    e - encrypted name\n    T - tier of storage if known, e.g. \"Hot\" or \"Cool\"\n    M - Metadata of object in JSON blob format, eg {\"key\":\"value\"}\n\nSo if you wanted the path, size and modification time, you would use\n`--format \"pst\"`, or maybe `--format \"tsp\"` to put the path last.\n\nEg\n\n    $ rclone lsf  --format \"tsp\" swift:bucket\n    2016-06-25 18:55:41;60295;bevajer5jef\n    2016-06-25 18:55:43;90613;canole\n    2016-06-25 18:55:43;94467;diwogej7\n    2018-04-26 08:50:45;0;ferejej3gux/\n    2016-06-25 18:55:40;37600;fubuwic\n\nIf you specify \"h\" in the format you will get the MD5 hash by default,\nuse the `--hash` flag to change which hash you want.  Note that this\ncan be returned as an empty string if it isn't available on the object\n(and for directories), \"ERROR\" if there was an error reading it from\nthe object and \"UNSUPPORTED\" if that object does not support that hash\ntype.\n\nFor example, to emulate the md5sum command you can use\n\n    rclone lsf -R --hash MD5 --format hp --separator \"  \" --files-only .\n\nEg\n\n    $ rclone lsf -R --hash MD5 --format hp --separator \"  \" --files-only swift:bucket\n    7908e352297f0f530b84a756f188baa3  bevajer5jef\n    cd65ac234e6fea5925974a51cdd865cc  canole\n    03b5341b4f234b9d984d03ad076bae91  diwogej7\n    8fd37c3810dd660778137ac3a66cc06d  fubuwic\n    99713e14a4c4ff553acaf1930fad985b  gixacuh7ku\n\n(Though \"rclone md5sum .\" is an easier way of typing this.)\n\nBy default the separator is \";\" this can be changed with the\n`--separator` flag.  Note that separators aren't escaped in the path so\nputting it last is a good strategy.\n\nEg\n\n    $ rclone lsf  --separator \",\" --format \"tshp\" swift:bucket\n    2016-06-25 18:55:41,60295,7908e352297f0f530b84a756f188baa3,bevajer5jef\n    2016-06-25 18:55:43,90613,cd65ac234e6fea5925974a51cdd865cc,canole\n    2016-06-25 18:55:43,94467,03b5341b4f234b9d984d03ad076bae91,diwogej7\n    2018-04-26 08:52:53,0,,ferejej3gux/\n    2016-06-25 18:55:40,37600,8fd37c3810dd660778137ac3a66cc06d,fubuwic\n\nYou can output in CSV standard format.  This will escape things in \"\nif they contain ,\n\nEg\n\n    $ rclone lsf --csv --files-only --format ps remote:path\n    test.log,22355\n    test.sh,449\n    \"this file contains a comma, in the file name.txt\",6\n\nNote that the `--absolute` parameter is useful for making lists of files\nto pass to an rclone copy with the `--files-from-raw` flag.\n\nFor example, to find all the files modified within one day and copy\nthose only (without traversing the whole directory structure):\n\n    rclone lsf --absolute --files-only --max-age 1d /path/to/local > new_files\n    rclone copy --files-from-raw new_files /path/to/local remote:path\n\nThe default time format is `'2006-01-02 15:04:05'`.\n[Other formats](https://pkg.go.dev/time#pkg-constants) can be specified with the `--time-format` flag.\nExamples:\n\n\trclone lsf remote:path --format pt --time-format 'Jan 2, 2006 at 3:04pm (MST)'\n\trclone lsf remote:path --format pt --time-format '2006-01-02 15:04:05.000000000'\n\trclone lsf remote:path --format pt --time-format '2006-01-02T15:04:05.999999999Z07:00'\n\trclone lsf remote:path --format pt --time-format RFC3339\n\trclone lsf remote:path --format pt --time-format DateOnly\n\trclone lsf remote:path --format pt --time-format max\n`--time-format max` will automatically truncate '`2006-01-02 15:04:05.000000000`'\nto the maximum precision supported by the remote.\n\n\nAny of the filtering options can be applied to this command.\n\nThere are several related list commands\n\n  * `ls` to list size and path of objects only\n  * `lsl` to list modification time, size and path of objects only\n  * `lsd` to list directories only\n  * `lsf` to list objects and directories in easy to parse format\n  * `lsjson` to list objects and directories in JSON format\n\n`ls`,`lsl`,`lsd` are designed to be human-readable.\n`lsf` is designed to be human and machine-readable.\n`lsjson` is designed to be machine-readable.\n\nNote that `ls` and `lsl` recurse by default - use `--max-depth 1` to stop the recursion.\n\nThe other list commands `lsd`,`lsf`,`lsjson` do not recurse by default - use `-R` to make them recurse.\n\nListing a nonexistent directory will produce an error except for\nremotes which can't have empty directories (e.g. s3, swift, or gcs -\nthe bucket-based remotes).\n\n\n```\nrclone lsf remote:path [flags]\n```\n\n## Options\n\n```\n      --absolute             Put a leading / in front of path names\n      --csv                  Output in CSV format\n  -d, --dir-slash            Append a slash to directory names (default true)\n      --dirs-only            Only list directories\n      --files-only           Only list files\n  -F, --format string        Output format - see  help for details (default \"p\")\n      --hash h               Use this hash when h is used in the format MD5|SHA-1|DropboxHash (default \"md5\")\n  -h, --help                 help for lsf\n  -R, --recursive            Recurse into the listing\n  -s, --separator string     Separator for the items in the format (default \";\")\n  -t, --time-format string   Specify a custom time format, or 'max' for max precision supported by remote (default: 2006-01-02 15:04:05)\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone lsjson\n\nList directories and objects in the path in JSON format.\n\n## Synopsis\n\nList directories and objects in the path in JSON format.\n\nThe output is an array of Items, where each Item looks like this:\n\n    {\n      \"Hashes\" : {\n         \"SHA-1\" : \"f572d396fae9206628714fb2ce00f72e94f2258f\",\n         \"MD5\" : \"b1946ac92492d2347c6235b4d2611184\",\n         \"DropboxHash\" : \"ecb65bb98f9d905b70458986c39fcbad7715e5f2fcc3b1f07767d7c83e2438cc\"\n      },\n      \"ID\": \"y2djkhiujf83u33\",\n      \"OrigID\": \"UYOJVTUW00Q1RzTDA\",\n      \"IsBucket\" : false,\n      \"IsDir\" : false,\n      \"MimeType\" : \"application/octet-stream\",\n      \"ModTime\" : \"2017-05-31T16:15:57.034468261+01:00\",\n      \"Name\" : \"file.txt\",\n      \"Encrypted\" : \"v0qpsdq8anpci8n929v3uu9338\",\n      \"EncryptedPath\" : \"kja9098349023498/v0qpsdq8anpci8n929v3uu9338\",\n      \"Path\" : \"full/path/goes/here/file.txt\",\n      \"Size\" : 6,\n      \"Tier\" : \"hot\",\n    }\n\nThe exact set of properties included depends on the backend:\n\n- The property IsBucket will only be included for bucket-based remotes, and only\n  for directories that are buckets. It will always be omitted when value is not true.\n- Properties Encrypted and EncryptedPath will only be included for encrypted\n  remotes, and (as mentioned below) only if the `--encrypted` option is set.\n\nDifferent options may also affect which properties are included:\n\n- If `--hash` is not specified, the Hashes property will be omitted. The\n  types of hash can be specified with the `--hash-type` parameter (which\n  may be repeated). If `--hash-type` is set then it implies `--hash`.\n- If `--no-modtime` is specified then ModTime will be blank. This can\n  speed things up on remotes where reading the ModTime takes an extra\n  request (e.g. s3, swift).\n- If `--no-mimetype` is specified then MimeType will be blank. This can\n  speed things up on remotes where reading the MimeType takes an extra\n  request (e.g. s3, swift).\n- If `--encrypted` is not specified the Encrypted and EncryptedPath\n  properties will be omitted - even for encrypted remotes.\n- If `--metadata` is set then an additional Metadata property will be\n  returned. This will have [metadata](https://rclone.org/docs/#metadata) in rclone standard format\n  as a JSON object.\n\nThe default is to list directories and files/objects, but this can be changed\nwith the following options:\n\n- If `--dirs-only` is specified then directories will be returned\n  only, no files/objects.\n- If `--files-only` is specified then files will be returned only,\n  no directories.\n\nIf `--stat` is set then the the output is not an array of items,\nbut instead a single JSON blob will be returned about the item pointed to.\nThis will return an error if the item isn't found, however on bucket based\nbackends (like s3, gcs, b2, azureblob etc) if the item isn't found it will\nreturn an empty directory, as it isn't possible to tell empty directories\nfrom missing directories there.\n\nThe Path field will only show folders below the remote path being listed.\nIf \"remote:path\" contains the file \"subfolder/file.txt\", the Path for \"file.txt\"\nwill be \"subfolder/file.txt\", not \"remote:path/subfolder/file.txt\".\nWhen used without `--recursive` the Path will always be the same as Name.\n\nThe time is in RFC3339 format with up to nanosecond precision.  The\nnumber of decimal digits in the seconds will depend on the precision\nthat the remote can hold the times, so if times are accurate to the\nnearest millisecond (e.g. Google Drive) then 3 digits will always be\nshown (\"2017-05-31T16:15:57.034+01:00\") whereas if the times are\naccurate to the nearest second (Dropbox, Box, WebDav, etc.) no digits\nwill be shown (\"2017-05-31T16:15:57+01:00\").\n\nThe whole output can be processed as a JSON blob, or alternatively it\ncan be processed line by line as each item is written on individual lines\n(except with `--stat`).\n\nAny of the filtering options can be applied to this command.\n\nThere are several related list commands\n\n  * `ls` to list size and path of objects only\n  * `lsl` to list modification time, size and path of objects only\n  * `lsd` to list directories only\n  * `lsf` to list objects and directories in easy to parse format\n  * `lsjson` to list objects and directories in JSON format\n\n`ls`,`lsl`,`lsd` are designed to be human-readable.\n`lsf` is designed to be human and machine-readable.\n`lsjson` is designed to be machine-readable.\n\nNote that `ls` and `lsl` recurse by default - use `--max-depth 1` to stop the recursion.\n\nThe other list commands `lsd`,`lsf`,`lsjson` do not recurse by default - use `-R` to make them recurse.\n\nListing a nonexistent directory will produce an error except for\nremotes which can't have empty directories (e.g. s3, swift, or gcs -\nthe bucket-based remotes).\n\n\n```\nrclone lsjson remote:path [flags]\n```\n\n## Options\n\n```\n      --dirs-only               Show only directories in the listing\n      --encrypted               Show the encrypted names\n      --files-only              Show only files in the listing\n      --hash                    Include hashes in the output (may take longer)\n      --hash-type stringArray   Show only this hash type (may be repeated)\n  -h, --help                    help for lsjson\n  -M, --metadata                Add metadata to the listing\n      --no-mimetype             Don't read the mime type (can speed things up)\n      --no-modtime              Don't read the modification time (can speed things up)\n      --original                Show the ID of the underlying Object\n  -R, --recursive               Recurse into the listing\n      --stat                    Just return the info for the pointed to file\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone mount\n\nMount the remote as file system on a mountpoint.\n\n## Synopsis\n\nRclone mount allows Linux, FreeBSD, macOS and Windows to\nmount any of Rclone's cloud storage systems as a file system with FUSE.\n\nFirst set up your remote using `rclone config`.  Check it works with `rclone ls` etc.\n\nOn Linux and macOS, you can run mount in either foreground or background (aka\ndaemon) mode. Mount runs in foreground mode by default. Use the `--daemon` flag\nto force background mode. On Windows you can run mount in foreground only,\nthe flag is ignored.\n\nIn background mode rclone acts as a generic Unix mount program: the main\nprogram starts, spawns background rclone process to setup and maintain the\nmount, waits until success or timeout and exits with appropriate code\n(killing the child process if it fails).\n\nOn Linux/macOS/FreeBSD start the mount like this, where `/path/to/local/mount`\nis an **empty** **existing** directory:\n\n    rclone mount remote:path/to/files /path/to/local/mount\n\nOn Windows you can start a mount in different ways. See [below](#mounting-modes-on-windows)\nfor details. If foreground mount is used interactively from a console window,\nrclone will serve the mount and occupy the console so another window should be\nused to work with the mount until rclone is interrupted e.g. by pressing Ctrl-C.\n\nThe following examples will mount to an automatically assigned drive,\nto specific drive letter `X:`, to path `C:\\path\\parent\\mount`\n(where parent directory or drive must exist, and mount must **not** exist,\nand is not supported when [mounting as a network drive](#mounting-modes-on-windows)), and\nthe last example will mount as network share `\\\\cloud\\remote` and map it to an\nautomatically assigned drive:\n\n    rclone mount remote:path/to/files *\n    rclone mount remote:path/to/files X:\n    rclone mount remote:path/to/files C:\\path\\parent\\mount\n    rclone mount remote:path/to/files \\\\cloud\\remote\n\nWhen the program ends while in foreground mode, either via Ctrl+C or receiving\na SIGINT or SIGTERM signal, the mount should be automatically stopped.\n\nWhen running in background mode the user will have to stop the mount manually:\n\n    # Linux\n    fusermount -u /path/to/local/mount\n    # OS X\n    umount /path/to/local/mount\n\nThe umount operation can fail, for example when the mountpoint is busy.\nWhen that happens, it is the user's responsibility to stop the mount manually.\n\nThe size of the mounted file system will be set according to information retrieved\nfrom the remote, the same as returned by the [rclone about](https://rclone.org/commands/rclone_about/)\ncommand. Remotes with unlimited storage may report the used size only,\nthen an additional 1 PiB of free space is assumed. If the remote does not\n[support](https://rclone.org/overview/#optional-features) the about feature\nat all, then 1 PiB is set as both the total and the free size.\n\n## Installing on Windows\n\nTo run rclone mount on Windows, you will need to\ndownload and install [WinFsp](http://www.secfs.net/winfsp/).\n\n[WinFsp](https://github.com/winfsp/winfsp) is an open-source\nWindows File System Proxy which makes it easy to write user space file\nsystems for Windows.  It provides a FUSE emulation layer which rclone\nuses combination with [cgofuse](https://github.com/winfsp/cgofuse).\nBoth of these packages are by Bill Zissimopoulos who was very helpful\nduring the implementation of rclone mount for Windows.\n\n### Mounting modes on windows\n\nUnlike other operating systems, Microsoft Windows provides a different filesystem\ntype for network and fixed drives. It optimises access on the assumption fixed\ndisk drives are fast and reliable, while network drives have relatively high latency\nand less reliability. Some settings can also be differentiated between the two types,\nfor example that Windows Explorer should just display icons and not create preview\nthumbnails for image and video files on network drives.\n\nIn most cases, rclone will mount the remote as a normal, fixed disk drive by default.\nHowever, you can also choose to mount it as a remote network drive, often described\nas a network share. If you mount an rclone remote using the default, fixed drive mode\nand experience unexpected program errors, freezes or other issues, consider mounting\nas a network drive instead.\n\nWhen mounting as a fixed disk drive you can either mount to an unused drive letter,\nor to a path representing a **nonexistent** subdirectory of an **existing** parent\ndirectory or drive. Using the special value `*` will tell rclone to\nautomatically assign the next available drive letter, starting with Z: and moving backward.\nExamples:\n\n    rclone mount remote:path/to/files *\n    rclone mount remote:path/to/files X:\n    rclone mount remote:path/to/files C:\\path\\parent\\mount\n    rclone mount remote:path/to/files X:\n\nOption `--volname` can be used to set a custom volume name for the mounted\nfile system. The default is to use the remote name and path.\n\nTo mount as network drive, you can add option `--network-mode`\nto your mount command. Mounting to a directory path is not supported in\nthis mode, it is a limitation Windows imposes on junctions, so the remote must always\nbe mounted to a drive letter.\n\n    rclone mount remote:path/to/files X: --network-mode\n\nA volume name specified with `--volname` will be used to create the network share path.\nA complete UNC path, such as `\\\\cloud\\remote`, optionally with path\n`\\\\cloud\\remote\\madeup\\path`, will be used as is. Any other\nstring will be used as the share part, after a default prefix `\\\\server\\`.\nIf no volume name is specified then `\\\\server\\share` will be used.\nYou must make sure the volume name is unique when you are mounting more than one drive,\nor else the mount command will fail. The share name will treated as the volume label for\nthe mapped drive, shown in Windows Explorer etc, while the complete\n`\\\\server\\share` will be reported as the remote UNC path by\n`net use` etc, just like a normal network drive mapping.\n\nIf you specify a full network share UNC path with `--volname`, this will implicitly\nset the `--network-mode` option, so the following two examples have same result:\n\n    rclone mount remote:path/to/files X: --network-mode\n    rclone mount remote:path/to/files X: --volname \\\\server\\share\n\nYou may also specify the network share UNC path as the mountpoint itself. Then rclone\nwill automatically assign a drive letter, same as with `*` and use that as\nmountpoint, and instead use the UNC path specified as the volume name, as if it were\nspecified with the `--volname` option. This will also implicitly set\nthe `--network-mode` option. This means the following two examples have same result:\n\n    rclone mount remote:path/to/files \\\\cloud\\remote\n    rclone mount remote:path/to/files * --volname \\\\cloud\\remote\n\nThere is yet another way to enable network mode, and to set the share path,\nand that is to pass the \"native\" libfuse/WinFsp option directly:\n`--fuse-flag --VolumePrefix=\\server\\share`. Note that the path\nmust be with just a single backslash prefix in this case.\n\n\n*Note:* In previous versions of rclone this was the only supported method.\n\n[Read more about drive mapping](https://en.wikipedia.org/wiki/Drive_mapping)\n\nSee also [Limitations](#limitations) section below.\n\n### Windows filesystem permissions\n\nThe FUSE emulation layer on Windows must convert between the POSIX-based\npermission model used in FUSE, and the permission model used in Windows,\nbased on access-control lists (ACL).\n\nThe mounted filesystem will normally get three entries in its access-control list (ACL),\nrepresenting permissions for the POSIX permission scopes: Owner, group and others.\nBy default, the owner and group will be taken from the current user, and the built-in\ngroup \"Everyone\" will be used to represent others. The user/group can be customized\nwith FUSE options \"UserName\" and \"GroupName\",\ne.g. `-o UserName=user123 -o GroupName=\"Authenticated Users\"`.\nThe permissions on each entry will be set according to [options](#options)\n`--dir-perms` and `--file-perms`, which takes a value in traditional Unix\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\n\nThe default permissions corresponds to `--file-perms 0666 --dir-perms 0777`,\ni.e. read and write permissions to everyone. This means you will not be able\nto start any programs from the mount. To be able to do that you must add\nexecute permissions, e.g. `--file-perms 0777 --dir-perms 0777` to add it\nto everyone. If the program needs to write files, chances are you will\nhave to enable [VFS File Caching](#vfs-file-caching) as well (see also\n[limitations](#limitations)). Note that the default write permission have\nsome restrictions for accounts other than the owner, specifically it lacks\nthe \"write extended attributes\", as explained next.\n\nThe mapping of permissions is not always trivial, and the result you see in\nWindows Explorer may not be exactly like you expected. For example, when setting\na value that includes write access for the group or others scope, this will be\nmapped to individual permissions \"write attributes\", \"write data\" and\n\"append data\", but not \"write extended attributes\". Windows will then show this\nas basic permission \"Special\" instead of \"Write\", because \"Write\" also covers\nthe \"write extended attributes\" permission. When setting digit 0 for group or\nothers, to indicate no permissions, they will still get individual permissions\n\"read attributes\", \"read extended attributes\" and \"read permissions\". This is\ndone for compatibility reasons, e.g. to allow users without additional\npermissions to be able to read basic metadata about files like in Unix.\n\nWinFsp 2021 (version 1.9) introduced a new FUSE option \"FileSecurity\",\nthat allows the complete specification of file security descriptors using\n[SDDL](https://docs.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format).\nWith this you get detailed control of the resulting permissions, compared\nto use of the POSIX permissions described above, and no additional permissions\nwill be added automatically for compatibility with Unix. Some example use\ncases will following.\n\nIf you set POSIX permissions for only allowing access to the owner,\nusing `--file-perms 0600 --dir-perms 0700`, the user group and the built-in\n\"Everyone\" group will still be given some special permissions, as described\nabove. Some programs may then (incorrectly) interpret this as the file being\naccessible by everyone, for example an SSH client may warn about \"unprotected\nprivate key file\". You can work around this by specifying\n`-o FileSecurity=\"D:P(A;;FA;;;OW)\"`, which sets file all access (FA) to the\nowner (OW), and nothing else.\n\nWhen setting write permissions then, except for the owner, this does not\ninclude the \"write extended attributes\" permission, as mentioned above.\nThis may prevent applications from writing to files, giving permission denied\nerror instead. To set working write permissions for the built-in \"Everyone\"\ngroup, similar to what it gets by default but with the addition of the\n\"write extended attributes\", you can specify\n`-o FileSecurity=\"D:P(A;;FRFW;;;WD)\"`, which sets file read (FR) and file\nwrite (FW) to everyone (WD). If file execute (FX) is also needed, then change\nto `-o FileSecurity=\"D:P(A;;FRFWFX;;;WD)\"`, or set file all access (FA) to\nget full access permissions, including delete, with\n`-o FileSecurity=\"D:P(A;;FA;;;WD)\"`.\n\n### Windows caveats\n\nDrives created as Administrator are not visible to other accounts,\nnot even an account that was elevated to Administrator with the\nUser Account Control (UAC) feature. A result of this is that if you mount\nto a drive letter from a Command Prompt run as Administrator, and then try\nto access the same drive from Windows Explorer (which does not run as\nAdministrator), you will not be able to see the mounted drive.\n\nIf you don't need to access the drive from applications running with\nadministrative privileges, the easiest way around this is to always\ncreate the mount from a non-elevated command prompt.\n\nTo make mapped drives available to the user account that created them\nregardless if elevated or not, there is a special Windows setting called\n[linked connections](https://docs.microsoft.com/en-us/troubleshoot/windows-client/networking/mapped-drives-not-available-from-elevated-command#detail-to-configure-the-enablelinkedconnections-registry-entry)\nthat can be enabled.\n\nIt is also possible to make a drive mount available to everyone on the system,\nby running the process creating it as the built-in SYSTEM account.\nThere are several ways to do this: One is to use the command-line\nutility [PsExec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec),\nfrom Microsoft's Sysinternals suite, which has option `-s` to start\nprocesses as the SYSTEM account. Another alternative is to run the mount\ncommand from a Windows Scheduled Task, or a Windows Service, configured\nto run as the SYSTEM account. A third alternative is to use the\n[WinFsp.Launcher infrastructure](https://github.com/winfsp/winfsp/wiki/WinFsp-Service-Architecture)).\nRead more in the [install documentation](https://rclone.org/install/).\nNote that when running rclone as another user, it will not use\nthe configuration file from your profile unless you tell it to\nwith the [`--config`](https://rclone.org/docs/#config-config-file) option.\nNote also that it is now the SYSTEM account that will have the owner\npermissions, and other accounts will have permissions according to the\ngroup or others scopes. As mentioned above, these will then not get the\n\"write extended attributes\" permission, and this may prevent writing to\nfiles. You can work around this with the FileSecurity option, see\nexample above.\n\nNote that mapping to a directory path, instead of a drive letter,\ndoes not suffer from the same limitations.\n\n## Mounting on macOS\n\nMounting on macOS can be done either via [built-in NFS server](https://rclone.org/commands/rclone_serve_nfs/), [macFUSE](https://osxfuse.github.io/) \n(also known as osxfuse) or [FUSE-T](https://www.fuse-t.org/). macFUSE is a traditional\nFUSE driver utilizing a macOS kernel extension (kext). FUSE-T is an alternative FUSE system\nwhich \"mounts\" via an NFSv4 local server.\n\n#### Unicode Normalization\n\nIt is highly recommended to keep the default of `--no-unicode-normalization=false`\nfor all `mount` and `serve` commands on macOS. For details, see [vfs-case-sensitivity](https://rclone.org/commands/rclone_mount/#vfs-case-sensitivity).\n\n### NFS mount\n\nThis method spins up an NFS server using [serve nfs](https://rclone.org/commands/rclone_serve_nfs/) command and mounts\nit to the specified mountpoint. If you run this in background mode using |--daemon|, you will need to\nsend SIGTERM signal to the rclone process using |kill| command to stop the mount.\n\nNote that `--nfs-cache-handle-limit` controls the maximum number of cached file handles stored by the `nfsmount` caching handler.\nThis should not be set too low or you may experience errors when trying to access files. The default is 1000000,\nbut consider lowering this limit if the server's system resource usage causes problems.\n\n### macFUSE Notes\n\nIf installing macFUSE using [dmg packages](https://github.com/osxfuse/osxfuse/releases) from\nthe website, rclone will locate the macFUSE libraries without any further intervention.\nIf however, macFUSE is installed using the [macports](https://www.macports.org/) package manager,\nthe following addition steps are required.\n\n    sudo mkdir /usr/local/lib\n    cd /usr/local/lib\n    sudo ln -s /opt/local/lib/libfuse.2.dylib\n\n### FUSE-T Limitations, Caveats, and Notes\n\nThere are some limitations, caveats, and notes about how it works. These are current as \nof FUSE-T version 1.0.14.\n\n#### ModTime update on read\n\nAs per the [FUSE-T wiki](https://github.com/macos-fuse-t/fuse-t/wiki#caveats):\n\n> File access and modification times cannot be set separately as it seems to be an \n> issue with the NFS client which always modifies both. Can be reproduced with \n> 'touch -m' and 'touch -a' commands\n\nThis means that viewing files with various tools, notably macOS Finder, will cause rlcone\nto update the modification time of the file. This may make rclone upload a full new copy\nof the file.\n    \n#### Read Only mounts\n\nWhen mounting with `--read-only`, attempts to write to files will fail *silently* as\nopposed to with a clear warning as in macFUSE.\n\n## Limitations\n\nWithout the use of `--vfs-cache-mode` this can only write files\nsequentially, it can only seek when reading.  This means that many\napplications won't work with their files on an rclone mount without\n`--vfs-cache-mode writes` or `--vfs-cache-mode full`.\nSee the [VFS File Caching](#vfs-file-caching) section for more info.\nWhen using NFS mount on macOS, if you don't specify |--vfs-cache-mode|\nthe mount point will be read-only.\n\nThe bucket-based remotes (e.g. Swift, S3, Google Compute Storage, B2)\ndo not support the concept of empty directories, so empty\ndirectories will have a tendency to disappear once they fall out of\nthe directory cache.\n\nWhen `rclone mount` is invoked on Unix with `--daemon` flag, the main rclone\nprogram will wait for the background mount to become ready or until the timeout\nspecified by the `--daemon-wait` flag. On Linux it can check mount status using\nProcFS so the flag in fact sets **maximum** time to wait, while the real wait\ncan be less. On macOS / BSD the time to wait is constant and the check is\nperformed only at the end. We advise you to set wait time on macOS reasonably.\n\nOnly supported on Linux, FreeBSD, OS X and Windows at the moment.\n\n## rclone mount vs rclone sync/copy\n\nFile systems expect things to be 100% reliable, whereas cloud storage\nsystems are a long way from 100% reliable. The rclone sync/copy\ncommands cope with this with lots of retries.  However rclone mount\ncan't use retries in the same way without making local copies of the\nuploads. Look at the [VFS File Caching](#vfs-file-caching)\nfor solutions to make mount more reliable.\n\n## Attribute caching\n\nYou can use the flag `--attr-timeout` to set the time the kernel caches\nthe attributes (size, modification time, etc.) for directory entries.\n\nThe default is `1s` which caches files just long enough to avoid\ntoo many callbacks to rclone from the kernel.\n\nIn theory 0s should be the correct value for filesystems which can\nchange outside the control of the kernel. However this causes quite a\nfew problems such as\n[rclone using too much memory](https://github.com/rclone/rclone/issues/2157),\n[rclone not serving files to samba](https://forum.rclone.org/t/rclone-1-39-vs-1-40-mount-issue/5112)\nand [excessive time listing directories](https://github.com/rclone/rclone/issues/2095#issuecomment-371141147).\n\nThe kernel can cache the info about a file for the time given by\n`--attr-timeout`. You may see corruption if the remote file changes\nlength during this window.  It will show up as either a truncated file\nor a file with garbage on the end.  With `--attr-timeout 1s` this is\nvery unlikely but not impossible.  The higher you set `--attr-timeout`\nthe more likely it is.  The default setting of \"1s\" is the lowest\nsetting which mitigates the problems above.\n\nIf you set it higher (`10s` or `1m` say) then the kernel will call\nback to rclone less often making it more efficient, however there is\nmore chance of the corruption issue above.\n\nIf files don't change on the remote outside of the control of rclone\nthen there is no chance of corruption.\n\nThis is the same as setting the attr_timeout option in mount.fuse.\n\n## Filters\n\nNote that all the rclone filters can be used to select a subset of the\nfiles to be visible in the mount.\n\n## systemd\n\nWhen running rclone mount as a systemd service, it is possible\nto use Type=notify. In this case the service will enter the started state\nafter the mountpoint has been successfully set up.\nUnits having the rclone mount service specified as a requirement\nwill see all files and folders immediately in this mode.\n\nNote that systemd runs mount units without any environment variables including\n`PATH` or `HOME`. This means that tilde (`~`) expansion will not work\nand you should provide `--config` and `--cache-dir` explicitly as absolute\npaths via rclone arguments.\nSince mounting requires the `fusermount` program, rclone will use the fallback\nPATH of `/bin:/usr/bin` in this scenario. Please ensure that `fusermount`\nis present on this PATH.\n\n## Rclone as Unix mount helper\n\nThe core Unix program `/bin/mount` normally takes the `-t FSTYPE` argument\nthen runs the `/sbin/mount.FSTYPE` helper program passing it mount options\nas `-o key=val,...` or `--opt=...`. Automount (classic or systemd) behaves\nin a similar way.\n\nrclone by default expects GNU-style flags `--key val`. To run it as a mount\nhelper you should symlink rclone binary to `/sbin/mount.rclone` and optionally\n`/usr/bin/rclonefs`, e.g. `ln -s /usr/bin/rclone /sbin/mount.rclone`.\nrclone will detect it and translate command-line arguments appropriately.\n\nNow you can run classic mounts like this:\n```\nmount sftp1:subdir /mnt/data -t rclone -o vfs_cache_mode=writes,sftp_key_file=/path/to/pem\n```\n\nor create systemd mount units:\n```\n# /etc/systemd/system/mnt-data.mount\n[Unit]\nDescription=Mount for /mnt/data\n[Mount]\nType=rclone\nWhat=sftp1:subdir\nWhere=/mnt/data\nOptions=rw,_netdev,allow_other,args2env,vfs-cache-mode=writes,config=/etc/rclone.conf,cache-dir=/var/rclone\n```\n\noptionally accompanied by systemd automount unit\n```\n# /etc/systemd/system/mnt-data.automount\n[Unit]\nDescription=AutoMount for /mnt/data\n[Automount]\nWhere=/mnt/data\nTimeoutIdleSec=600\n[Install]\nWantedBy=multi-user.target\n```\n\nor add in `/etc/fstab` a line like\n```\nsftp1:subdir /mnt/data rclone rw,noauto,nofail,_netdev,x-systemd.automount,args2env,vfs_cache_mode=writes,config=/etc/rclone.conf,cache_dir=/var/cache/rclone 0 0\n```\n\nor use classic Automountd.\nRemember to provide explicit `config=...,cache-dir=...` as a workaround for\nmount units being run without `HOME`.\n\nRclone in the mount helper mode will split `-o` argument(s) by comma, replace `_`\nby `-` and prepend `--` to get the command-line flags. Options containing commas\nor spaces can be wrapped in single or double quotes. Any inner quotes inside outer\nquotes of the same type should be doubled.\n\nMount option syntax includes a few extra options treated specially:\n\n- `env.NAME=VALUE` will set an environment variable for the mount process.\n  This helps with Automountd and Systemd.mount which don't allow setting\n  custom environment for mount helpers.\n  Typically you will use `env.HTTPS_PROXY=proxy.host:3128` or `env.HOME=/root`\n- `command=cmount` can be used to run `cmount` or any other rclone command\n  rather than the default `mount`.\n- `args2env` will pass mount options to the mount helper running in background\n  via environment variables instead of command line arguments. This allows to\n  hide secrets from such commands as `ps` or `pgrep`.\n- `vv...` will be transformed into appropriate `--verbose=N`\n- standard mount options like `x-systemd.automount`, `_netdev`, `nosuid` and alike\n  are intended only for Automountd and ignored by rclone.\n\n## VFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk\nfiling system.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the\nVFS layer has to deal with that. Because there is no one right way of\ndoing this there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info\nabout files and directories (but not the data) in memory.\n\n## VFS Directory Cache\n\nUsing the `--dir-cache-time` flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend. Changes made through the VFS will appear immediately or\ninvalidate the cache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web\ninterface or a different copy of rclone will only be picked up once\nthe directory cache expires if the backend configured does not support\npolling for changes. If the backend supports polling, changes will be\npicked up within the polling interval.\n\nYou can send a `SIGHUP` signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.  Assuming only one\nrclone instance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a [remote control](/rc) then you can use\nrclone rc to flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\n## VFS File Buffering\n\nThe `--buffer-size` flag determines the amount of memory,\nthat will be used to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file.  The\nbuffer will only use memory for data that is downloaded but not not\nyet read. If the buffer is empty, only a small amount of memory will\nbe used.\n\nThe maximum memory used by rclone for buffering can be up to\n`--buffer-size * open files`.\n\n## VFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file.  See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with `-vv` rclone will print the location of the file cache.  The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with `--cache-dir` or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by `--vfs-cache-mode`.\nThe higher the cache mode the more compatible rclone becomes at the\ncost of using disk space.\n\nNote that files are written back to the remote only when they are\nclosed and if they haven't been accessed for `--vfs-write-back`\nseconds. If rclone is quit or dies with files that haven't been\nuploaded, these will be uploaded next time rclone is run with the same\nflags.\n\nIf using `--vfs-cache-max-size` or `--vfs-cache-min-free-size` note\nthat the cache may exceed these quotas for two reasons. Firstly\nbecause it is only checked every `--vfs-cache-poll-interval`. Secondly\nbecause open files cannot be evicted from the cache. When\n`--vfs-cache-max-size` or `--vfs-cache-min-free-size` is exceeded,\nrclone will attempt to evict the least accessed files from the cache\nfirst. rclone will start with files that haven't been accessed for the\nlongest. This cache flushing strategy is efficient and more relevant\nfiles are likely to remain cached.\n\nThe `--vfs-cache-max-age` will evict files from the cache\nafter the set time since last access has passed. The default value of\n1 hour will start evicting files from cache that haven't been accessed\nfor 1 hour. When a cached file is accessed the 1 hour timer is reset to 0\nand will wait for 1 more hour before evicting. Specify the time with\nstandard notation, s, m, h, d, w .\n\nYou **should not** run two copies of rclone using the same VFS cache\nwith the same or overlapping remotes if using `--vfs-cache-mode > off`.\nThis can potentially cause data corruption if you do. You can work\naround this by giving each rclone its own cache hierarchy with\n`--cache-dir`. You don't need to worry about this if the remotes in\nuse don't overlap.\n\n### --vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote and write\ndirectly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n  * Files can't be opened for both read AND write\n  * Files opened for write can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files open for read with O_TRUNC will be opened write only\n  * Files open for write only will behave as if O_TRUNC was supplied\n  * Open modes O_APPEND, O_TRUNC are ignored\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk.  This means that files opened for\nwrite will be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n  * Files opened for write only can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files opened for write only will ignore O_APPEND, O_TRUNC\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from\nthe remote, write only and read/write files are buffered to disk\nfirst.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n### --vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone\nwill keep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to `--vfs-cache-mode` writes.\n\nWhen reading a file rclone will read `--buffer-size` plus\n`--vfs-read-ahead` bytes ahead.  The `--buffer-size` is buffered in memory\nwhereas the `--vfs-read-ahead` is buffered on disk.\n\nWhen using this mode it is recommended that `--buffer-size` is not set\ntoo large and `--vfs-read-ahead` is set large if required.\n\n**IMPORTANT** not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache\ndirectory is on a filesystem which doesn't support sparse files and it\nwill log an ERROR message if one is detected.\n\n### Fingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file\ncopy has changed relative to a remote file. Fingerprints are made\nfrom:\n\n- size\n- modification time\n- hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take\nan extra API call per object, or extra work per object).\n\nFor example `hash` is slow with the `local` and `sftp` backends as\nthey have to read the entire file and hash it, and `modtime` is slow\nwith the `s3`, `swift`, `ftp` and `qinqstor` backends because they\nneed to do an extra API call to fetch it.\n\nIf you use the `--vfs-fast-fingerprint` flag then rclone will not\ninclude the slow operations in the fingerprint. This makes the\nfingerprinting less accurate but much faster and will improve the\nopening time of cached files.\n\nIf you are running a vfs cache over `local`, `s3` or `swift` backends\nthen using this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of\nthe files in the cache may be invalidated and the files will need to\nbe downloaded again.\n\n## VFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the\nchunk specified.  This can reduce the used download quota for some\nremotes by requesting only chunks from the remote that are actually\nread, at the cost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the `--vfs-read-chunk-streams` parameter.\n\n### `--vfs-read-chunk-streams` == 0\n\nRclone will start reading a chunk of size `--vfs-read-chunk-size`,\nand then double the size for each read. When `--vfs-read-chunk-size-limit` is\nspecified, and greater than `--vfs-read-chunk-size`, the chunk size for each\nopen file will get doubled only until the specified value is reached. If the\nvalue is \"off\", which is the default, the limit is disabled and the chunk size\nwill grow indefinitely.\n\nWith `--vfs-read-chunk-size 100M` and `--vfs-read-chunk-size-limit 0`\nthe following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen `--vfs-read-chunk-size-limit 500M` is specified, the result would be\n0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.\n\nSetting `--vfs-read-chunk-size` to `0` or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n### `--vfs-read-chunk-streams` > 0\n\nRclone reads `--vfs-read-chunk-streams` chunks of size\n`--vfs-read-chunk-size` concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links\nor very high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n`--vfs-read-chunk-size` and `--vfs-read-chunk-streams` as these will\ndepend on the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be `--vfs-read-chunk-streams 16` and\n`--vfs-read-chunk-size 4M`. In testing with AWS S3 the performance\nscaled roughly as the `--vfs-read-chunk-streams` setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more `--vfs-read-chunk-streams` in order to\nget the throughput.\n\n## VFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the [chunked reading](#vfs-chunked-reading)\nfeature.\n\nIn particular S3 and Swift benefit hugely from the `--no-modtime` flag\n(or use `--use-server-modtime` for a slightly different effect) as each\nread of the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather\nthan seeking rclone will wait a short time for the in sequence read or\nwrite to come in. These flags only come into effect when not using an\non disk cache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (`--vfs-cache-mode` with value writes or full),\nthe global flag `--transfers` can be set to adjust the number of parallel uploads of\nmodified files from the cache (the related global flag `--checkers` has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\n## VFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only\nby case, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case used\nto create the file is preserved and available for programs to query.\nIt is not allowed for two files in the same directory to differ only by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to make macOS\nfile systems case-sensitive but that is not the default.\n\nThe `--vfs-case-insensitive` VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the remote\nas-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers\nto an existing file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the same\nname is not found but a name differing only by case exists, rclone will\ntransparently fixup the name. This fixup happens only when an existing file\nis requested. Case sensitivity of file names created anew by rclone is\ncontrolled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the target)\nmay differ from case sensitivity of a file system presented by rclone (the source).\nThe flag controls whether \"fixup\" is performed to satisfy the target.\n\nIf the flag is not provided on the command line, then its default value depends\non the operating system where rclone runs: \"true\" on Windows and macOS, \"false\"\notherwise. If the flag is provided without a value, then it is \"true\".\n\nThe `--no-unicode-normalization` flag controls whether a similar \"fixup\" is\nperformed for filenames that differ but are [canonically\nequivalent](https://en.wikipedia.org/wiki/Unicode_equivalence) with respect to\nunicode. Unicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms. It is\ntherefore highly recommended to keep the default of `false` on macOS, to avoid\nencoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the `--vfs-block-norm-dupes`\nflag allows hiding these duplicates. This comes with a performance tradeoff, as\nrclone will have to scan the entire directory for duplicates when listing a\ndirectory. For this reason, it is recommended to leave this disabled if not\nneeded. However, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the mount,\nand both will appear to be editable, however, editing either version will\nactually result in only the NFD version getting edited under the hood. `--vfs-block-\nnorm-dupes` prevents this confusion by detecting this scenario, hiding the\nduplicates, and logging an error, similar to how this is handled in `rclone\nsync`.\n\n## VFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing system.\nIt can be useful when those statistics cannot be read correctly automatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\n## Alternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running `df` on the\nfilesystem, then pass the flag `--vfs-used-is-size` to rclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to `rclone size`\nand compute the total used space itself.\n\n_WARNING._ Contrary to `rclone size`, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots of API\ncalls resulting in extra charges. Use it as a last resort and only with caching.\n\n\n\n```\nrclone mount remote:path /path/to/mountpoint [flags]\n```\n\n## Options\n\n```\n      --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n      --allow-other                            Allow access to other users (not supported on Windows)\n      --allow-root                             Allow access to root user (not supported on Windows)\n      --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n      --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n      --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n      --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n      --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n      --debug-fuse                             Debug the FUSE internals - needs -v\n      --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n      --devname string                         Set the device name - default is remote:path\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --direct-io                              Use Direct IO, disables caching of data\n      --file-perms FileMode                    File permissions (default 666)\n      --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for mount\n      --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n      --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n      --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n      --no-checksum                            Don't compare checksums on up/download\n      --no-modtime                             Don't read/write the modification time (can speed things up)\n      --no-seek                                Don't allow seeking in files\n      --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n      --noapplexattr                           Ignore all \"com.apple.*\" extended attributes (supported on OSX only)\n  -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n      --volname string                         Set the volume name (supported on Windows and OSX only)\n      --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone moveto\n\nMove file or directory from source to dest.\n\n## Synopsis\n\nIf source:path is a file or directory then it moves it to a file or\ndirectory named dest:path.\n\nThis can be used to rename files or upload single files to other than\ntheir existing name.  If the source is a directory then it acts exactly\nlike the [move](https://rclone.org/commands/rclone_move/) command.\n\nSo\n\n    rclone moveto src dst\n\nwhere src and dst are rclone paths, either remote:path or\n/path/to/local or C:\\windows\\path\\if\\on\\windows.\n\nThis will:\n\n    if src is file\n        move it to dst, overwriting an existing file if it exists\n    if src is directory\n        move it to dst, overwriting existing files if they exist\n        see move command for full details\n\nThis doesn't transfer files that are identical on src and dst, testing\nby size and modification time or MD5SUM.  src will be deleted on\nsuccessful transfer.\n\n**Important**: Since this can cause data loss, test first with the\n`--dry-run` or the `--interactive`/`-i` flag.\n\n**Note**: Use the `-P`/`--progress` flag to view real-time transfer statistics.\n\n\n```\nrclone moveto source:path dest:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for moveto\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Copy Options\n\nFlags for anything which can copy a file\n\n```\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don't check the destination, copy regardless\n      --no-traverse                                 Don't traverse destination file system on copy\n      --no-update-dir-modtime                       Don't update directory modification times\n      --no-update-modtime                           Don't update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n```\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone ncdu\n\nExplore a remote with a text based user interface.\n\n## Synopsis\n\nThis displays a text based user interface allowing the navigation of a\nremote. It is most useful for answering the question - \"What is using\nall my disk space?\".\n\n\n\nTo make the user interface it first scans the entire remote given and\nbuilds an in memory representation.  rclone ncdu can be used during\nthis scanning phase and you will see it building up the directory\nstructure as it goes along.\n\nYou can interact with the user interface using key presses,\npress '?' to toggle the help on and off. The supported keys are:\n\n     ↑,↓ or k,j to Move\n     →,l to enter\n     ←,h to return\n     g toggle graph\n     c toggle counts\n     a toggle average size in directory\n     m toggle modified time\n     u toggle human-readable format\n     n,s,C,A,M sort by name,size,count,asize,mtime\n     d delete file/directory\n     v select file/directory\n     V enter visual select mode\n     D delete selected files/directories\n     y copy current path to clipboard\n     Y display current path\n     ^L refresh screen (fix screen corruption)\n     r recalculate file sizes\n     ? to toggle help on and off\n     ESC to close the menu box\n     q/^c to quit\n\nListed files/directories may be prefixed by a one-character flag,\nsome of them combined with a description in brackets at end of line.\nThese flags have the following meaning:\n\n    e means this is an empty directory, i.e. contains no files (but\n      may contain empty subdirectories)\n    ~ means this is a directory where some of the files (possibly in\n      subdirectories) have unknown size, and therefore the directory\n      size may be underestimated (and average size inaccurate, as it\n      is average of the files with known sizes).\n    . means an error occurred while reading a subdirectory, and\n      therefore the directory size may be underestimated (and average\n      size inaccurate)\n    ! means an error occurred while reading this directory\n\nThis an homage to the [ncdu tool](https://dev.yorhel.nl/ncdu) but for\nrclone remotes.  It is missing lots of features at the moment\nbut is useful as it stands. Unlike ncdu it does not show excluded files.\n\nNote that it might take some time to delete big files/directories. The\nUI won't respond in the meantime since the deletion is done synchronously.\n\nFor a non-interactive listing of the remote, see the\n[tree](https://rclone.org/commands/rclone_tree/) command. To just get the total size of\nthe remote you can also use the [size](https://rclone.org/commands/rclone_size/) command.\n\n\n```\nrclone ncdu remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for ncdu\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n### Listing Options\n\nFlags for listing directories\n\n```\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone nfsmount\n\nMount the remote as file system on a mountpoint.\n\n## Synopsis\n\nRclone nfsmount allows Linux, FreeBSD, macOS and Windows to\nmount any of Rclone's cloud storage systems as a file system with FUSE.\n\nFirst set up your remote using `rclone config`.  Check it works with `rclone ls` etc.\n\nOn Linux and macOS, you can run mount in either foreground or background (aka\ndaemon) mode. Mount runs in foreground mode by default. Use the `--daemon` flag\nto force background mode. On Windows you can run mount in foreground only,\nthe flag is ignored.\n\nIn background mode rclone acts as a generic Unix mount program: the main\nprogram starts, spawns background rclone process to setup and maintain the\nmount, waits until success or timeout and exits with appropriate code\n(killing the child process if it fails).\n\nOn Linux/macOS/FreeBSD start the mount like this, where `/path/to/local/mount`\nis an **empty** **existing** directory:\n\n    rclone nfsmount remote:path/to/files /path/to/local/mount\n\nOn Windows you can start a mount in different ways. See [below](#mounting-modes-on-windows)\nfor details. If foreground mount is used interactively from a console window,\nrclone will serve the mount and occupy the console so another window should be\nused to work with the mount until rclone is interrupted e.g. by pressing Ctrl-C.\n\nThe following examples will mount to an automatically assigned drive,\nto specific drive letter `X:`, to path `C:\\path\\parent\\mount`\n(where parent directory or drive must exist, and mount must **not** exist,\nand is not supported when [mounting as a network drive](#mounting-modes-on-windows)), and\nthe last example will mount as network share `\\\\cloud\\remote` and map it to an\nautomatically assigned drive:\n\n    rclone nfsmount remote:path/to/files *\n    rclone nfsmount remote:path/to/files X:\n    rclone nfsmount remote:path/to/files C:\\path\\parent\\mount\n    rclone nfsmount remote:path/to/files \\\\cloud\\remote\n\nWhen the program ends while in foreground mode, either via Ctrl+C or receiving\na SIGINT or SIGTERM signal, the mount should be automatically stopped.\n\nWhen running in background mode the user will have to stop the mount manually:\n\n    # Linux\n    fusermount -u /path/to/local/mount\n    # OS X\n    umount /path/to/local/mount\n\nThe umount operation can fail, for example when the mountpoint is busy.\nWhen that happens, it is the user's responsibility to stop the mount manually.\n\nThe size of the mounted file system will be set according to information retrieved\nfrom the remote, the same as returned by the [rclone about](https://rclone.org/commands/rclone_about/)\ncommand. Remotes with unlimited storage may report the used size only,\nthen an additional 1 PiB of free space is assumed. If the remote does not\n[support](https://rclone.org/overview/#optional-features) the about feature\nat all, then 1 PiB is set as both the total and the free size.\n\n## Installing on Windows\n\nTo run rclone nfsmount on Windows, you will need to\ndownload and install [WinFsp](http://www.secfs.net/winfsp/).\n\n[WinFsp](https://github.com/winfsp/winfsp) is an open-source\nWindows File System Proxy which makes it easy to write user space file\nsystems for Windows.  It provides a FUSE emulation layer which rclone\nuses combination with [cgofuse](https://github.com/winfsp/cgofuse).\nBoth of these packages are by Bill Zissimopoulos who was very helpful\nduring the implementation of rclone nfsmount for Windows.\n\n### Mounting modes on windows\n\nUnlike other operating systems, Microsoft Windows provides a different filesystem\ntype for network and fixed drives. It optimises access on the assumption fixed\ndisk drives are fast and reliable, while network drives have relatively high latency\nand less reliability. Some settings can also be differentiated between the two types,\nfor example that Windows Explorer should just display icons and not create preview\nthumbnails for image and video files on network drives.\n\nIn most cases, rclone will mount the remote as a normal, fixed disk drive by default.\nHowever, you can also choose to mount it as a remote network drive, often described\nas a network share. If you mount an rclone remote using the default, fixed drive mode\nand experience unexpected program errors, freezes or other issues, consider mounting\nas a network drive instead.\n\nWhen mounting as a fixed disk drive you can either mount to an unused drive letter,\nor to a path representing a **nonexistent** subdirectory of an **existing** parent\ndirectory or drive. Using the special value `*` will tell rclone to\nautomatically assign the next available drive letter, starting with Z: and moving backward.\nExamples:\n\n    rclone nfsmount remote:path/to/files *\n    rclone nfsmount remote:path/to/files X:\n    rclone nfsmount remote:path/to/files C:\\path\\parent\\mount\n    rclone nfsmount remote:path/to/files X:\n\nOption `--volname` can be used to set a custom volume name for the mounted\nfile system. The default is to use the remote name and path.\n\nTo mount as network drive, you can add option `--network-mode`\nto your nfsmount command. Mounting to a directory path is not supported in\nthis mode, it is a limitation Windows imposes on junctions, so the remote must always\nbe mounted to a drive letter.\n\n    rclone nfsmount remote:path/to/files X: --network-mode\n\nA volume name specified with `--volname` will be used to create the network share path.\nA complete UNC path, such as `\\\\cloud\\remote`, optionally with path\n`\\\\cloud\\remote\\madeup\\path`, will be used as is. Any other\nstring will be used as the share part, after a default prefix `\\\\server\\`.\nIf no volume name is specified then `\\\\server\\share` will be used.\nYou must make sure the volume name is unique when you are mounting more than one drive,\nor else the mount command will fail. The share name will treated as the volume label for\nthe mapped drive, shown in Windows Explorer etc, while the complete\n`\\\\server\\share` will be reported as the remote UNC path by\n`net use` etc, just like a normal network drive mapping.\n\nIf you specify a full network share UNC path with `--volname`, this will implicitly\nset the `--network-mode` option, so the following two examples have same result:\n\n    rclone nfsmount remote:path/to/files X: --network-mode\n    rclone nfsmount remote:path/to/files X: --volname \\\\server\\share\n\nYou may also specify the network share UNC path as the mountpoint itself. Then rclone\nwill automatically assign a drive letter, same as with `*` and use that as\nmountpoint, and instead use the UNC path specified as the volume name, as if it were\nspecified with the `--volname` option. This will also implicitly set\nthe `--network-mode` option. This means the following two examples have same result:\n\n    rclone nfsmount remote:path/to/files \\\\cloud\\remote\n    rclone nfsmount remote:path/to/files * --volname \\\\cloud\\remote\n\nThere is yet another way to enable network mode, and to set the share path,\nand that is to pass the \"native\" libfuse/WinFsp option directly:\n`--fuse-flag --VolumePrefix=\\server\\share`. Note that the path\nmust be with just a single backslash prefix in this case.\n\n\n*Note:* In previous versions of rclone this was the only supported method.\n\n[Read more about drive mapping](https://en.wikipedia.org/wiki/Drive_mapping)\n\nSee also [Limitations](#limitations) section below.\n\n### Windows filesystem permissions\n\nThe FUSE emulation layer on Windows must convert between the POSIX-based\npermission model used in FUSE, and the permission model used in Windows,\nbased on access-control lists (ACL).\n\nThe mounted filesystem will normally get three entries in its access-control list (ACL),\nrepresenting permissions for the POSIX permission scopes: Owner, group and others.\nBy default, the owner and group will be taken from the current user, and the built-in\ngroup \"Everyone\" will be used to represent others. The user/group can be customized\nwith FUSE options \"UserName\" and \"GroupName\",\ne.g. `-o UserName=user123 -o GroupName=\"Authenticated Users\"`.\nThe permissions on each entry will be set according to [options](#options)\n`--dir-perms` and `--file-perms`, which takes a value in traditional Unix\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\n\nThe default permissions corresponds to `--file-perms 0666 --dir-perms 0777`,\ni.e. read and write permissions to everyone. This means you will not be able\nto start any programs from the mount. To be able to do that you must add\nexecute permissions, e.g. `--file-perms 0777 --dir-perms 0777` to add it\nto everyone. If the program needs to write files, chances are you will\nhave to enable [VFS File Caching](#vfs-file-caching) as well (see also\n[limitations](#limitations)). Note that the default write permission have\nsome restrictions for accounts other than the owner, specifically it lacks\nthe \"write extended attributes\", as explained next.\n\nThe mapping of permissions is not always trivial, and the result you see in\nWindows Explorer may not be exactly like you expected. For example, when setting\na value that includes write access for the group or others scope, this will be\nmapped to individual permissions \"write attributes\", \"write data\" and\n\"append data\", but not \"write extended attributes\". Windows will then show this\nas basic permission \"Special\" instead of \"Write\", because \"Write\" also covers\nthe \"write extended attributes\" permission. When setting digit 0 for group or\nothers, to indicate no permissions, they will still get individual permissions\n\"read attributes\", \"read extended attributes\" and \"read permissions\". This is\ndone for compatibility reasons, e.g. to allow users without additional\npermissions to be able to read basic metadata about files like in Unix.\n\nWinFsp 2021 (version 1.9) introduced a new FUSE option \"FileSecurity\",\nthat allows the complete specification of file security descriptors using\n[SDDL](https://docs.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format).\nWith this you get detailed control of the resulting permissions, compared\nto use of the POSIX permissions described above, and no additional permissions\nwill be added automatically for compatibility with Unix. Some example use\ncases will following.\n\nIf you set POSIX permissions for only allowing access to the owner,\nusing `--file-perms 0600 --dir-perms 0700`, the user group and the built-in\n\"Everyone\" group will still be given some special permissions, as described\nabove. Some programs may then (incorrectly) interpret this as the file being\naccessible by everyone, for example an SSH client may warn about \"unprotected\nprivate key file\". You can work around this by specifying\n`-o FileSecurity=\"D:P(A;;FA;;;OW)\"`, which sets file all access (FA) to the\nowner (OW), and nothing else.\n\nWhen setting write permissions then, except for the owner, this does not\ninclude the \"write extended attributes\" permission, as mentioned above.\nThis may prevent applications from writing to files, giving permission denied\nerror instead. To set working write permissions for the built-in \"Everyone\"\ngroup, similar to what it gets by default but with the addition of the\n\"write extended attributes\", you can specify\n`-o FileSecurity=\"D:P(A;;FRFW;;;WD)\"`, which sets file read (FR) and file\nwrite (FW) to everyone (WD). If file execute (FX) is also needed, then change\nto `-o FileSecurity=\"D:P(A;;FRFWFX;;;WD)\"`, or set file all access (FA) to\nget full access permissions, including delete, with\n`-o FileSecurity=\"D:P(A;;FA;;;WD)\"`.\n\n### Windows caveats\n\nDrives created as Administrator are not visible to other accounts,\nnot even an account that was elevated to Administrator with the\nUser Account Control (UAC) feature. A result of this is that if you mount\nto a drive letter from a Command Prompt run as Administrator, and then try\nto access the same drive from Windows Explorer (which does not run as\nAdministrator), you will not be able to see the mounted drive.\n\nIf you don't need to access the drive from applications running with\nadministrative privileges, the easiest way around this is to always\ncreate the mount from a non-elevated command prompt.\n\nTo make mapped drives available to the user account that created them\nregardless if elevated or not, there is a special Windows setting called\n[linked connections](https://docs.microsoft.com/en-us/troubleshoot/windows-client/networking/mapped-drives-not-available-from-elevated-command#detail-to-configure-the-enablelinkedconnections-registry-entry)\nthat can be enabled.\n\nIt is also possible to make a drive mount available to everyone on the system,\nby running the process creating it as the built-in SYSTEM account.\nThere are several ways to do this: One is to use the command-line\nutility [PsExec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec),\nfrom Microsoft's Sysinternals suite, which has option `-s` to start\nprocesses as the SYSTEM account. Another alternative is to run the mount\ncommand from a Windows Scheduled Task, or a Windows Service, configured\nto run as the SYSTEM account. A third alternative is to use the\n[WinFsp.Launcher infrastructure](https://github.com/winfsp/winfsp/wiki/WinFsp-Service-Architecture)).\nRead more in the [install documentation](https://rclone.org/install/).\nNote that when running rclone as another user, it will not use\nthe configuration file from your profile unless you tell it to\nwith the [`--config`](https://rclone.org/docs/#config-config-file) option.\nNote also that it is now the SYSTEM account that will have the owner\npermissions, and other accounts will have permissions according to the\ngroup or others scopes. As mentioned above, these will then not get the\n\"write extended attributes\" permission, and this may prevent writing to\nfiles. You can work around this with the FileSecurity option, see\nexample above.\n\nNote that mapping to a directory path, instead of a drive letter,\ndoes not suffer from the same limitations.\n\n## Mounting on macOS\n\nMounting on macOS can be done either via [built-in NFS server](https://rclone.org/commands/rclone_serve_nfs/), [macFUSE](https://osxfuse.github.io/) \n(also known as osxfuse) or [FUSE-T](https://www.fuse-t.org/). macFUSE is a traditional\nFUSE driver utilizing a macOS kernel extension (kext). FUSE-T is an alternative FUSE system\nwhich \"mounts\" via an NFSv4 local server.\n\n#### Unicode Normalization\n\nIt is highly recommended to keep the default of `--no-unicode-normalization=false`\nfor all `mount` and `serve` commands on macOS. For details, see [vfs-case-sensitivity](https://rclone.org/commands/rclone_mount/#vfs-case-sensitivity).\n\n### NFS mount\n\nThis method spins up an NFS server using [serve nfs](https://rclone.org/commands/rclone_serve_nfs/) command and mounts\nit to the specified mountpoint. If you run this in background mode using |--daemon|, you will need to\nsend SIGTERM signal to the rclone process using |kill| command to stop the mount.\n\nNote that `--nfs-cache-handle-limit` controls the maximum number of cached file handles stored by the `nfsmount` caching handler.\nThis should not be set too low or you may experience errors when trying to access files. The default is 1000000,\nbut consider lowering this limit if the server's system resource usage causes problems.\n\n### macFUSE Notes\n\nIf installing macFUSE using [dmg packages](https://github.com/osxfuse/osxfuse/releases) from\nthe website, rclone will locate the macFUSE libraries without any further intervention.\nIf however, macFUSE is installed using the [macports](https://www.macports.org/) package manager,\nthe following addition steps are required.\n\n    sudo mkdir /usr/local/lib\n    cd /usr/local/lib\n    sudo ln -s /opt/local/lib/libfuse.2.dylib\n\n### FUSE-T Limitations, Caveats, and Notes\n\nThere are some limitations, caveats, and notes about how it works. These are current as \nof FUSE-T version 1.0.14.\n\n#### ModTime update on read\n\nAs per the [FUSE-T wiki](https://github.com/macos-fuse-t/fuse-t/wiki#caveats):\n\n> File access and modification times cannot be set separately as it seems to be an \n> issue with the NFS client which always modifies both. Can be reproduced with \n> 'touch -m' and 'touch -a' commands\n\nThis means that viewing files with various tools, notably macOS Finder, will cause rlcone\nto update the modification time of the file. This may make rclone upload a full new copy\nof the file.\n    \n#### Read Only mounts\n\nWhen mounting with `--read-only`, attempts to write to files will fail *silently* as\nopposed to with a clear warning as in macFUSE.\n\n## Limitations\n\nWithout the use of `--vfs-cache-mode` this can only write files\nsequentially, it can only seek when reading.  This means that many\napplications won't work with their files on an rclone mount without\n`--vfs-cache-mode writes` or `--vfs-cache-mode full`.\nSee the [VFS File Caching](#vfs-file-caching) section for more info.\nWhen using NFS mount on macOS, if you don't specify |--vfs-cache-mode|\nthe mount point will be read-only.\n\nThe bucket-based remotes (e.g. Swift, S3, Google Compute Storage, B2)\ndo not support the concept of empty directories, so empty\ndirectories will have a tendency to disappear once they fall out of\nthe directory cache.\n\nWhen `rclone mount` is invoked on Unix with `--daemon` flag, the main rclone\nprogram will wait for the background mount to become ready or until the timeout\nspecified by the `--daemon-wait` flag. On Linux it can check mount status using\nProcFS so the flag in fact sets **maximum** time to wait, while the real wait\ncan be less. On macOS / BSD the time to wait is constant and the check is\nperformed only at the end. We advise you to set wait time on macOS reasonably.\n\nOnly supported on Linux, FreeBSD, OS X and Windows at the moment.\n\n## rclone nfsmount vs rclone sync/copy\n\nFile systems expect things to be 100% reliable, whereas cloud storage\nsystems are a long way from 100% reliable. The rclone sync/copy\ncommands cope with this with lots of retries.  However rclone nfsmount\ncan't use retries in the same way without making local copies of the\nuploads. Look at the [VFS File Caching](#vfs-file-caching)\nfor solutions to make nfsmount more reliable.\n\n## Attribute caching\n\nYou can use the flag `--attr-timeout` to set the time the kernel caches\nthe attributes (size, modification time, etc.) for directory entries.\n\nThe default is `1s` which caches files just long enough to avoid\ntoo many callbacks to rclone from the kernel.\n\nIn theory 0s should be the correct value for filesystems which can\nchange outside the control of the kernel. However this causes quite a\nfew problems such as\n[rclone using too much memory](https://github.com/rclone/rclone/issues/2157),\n[rclone not serving files to samba](https://forum.rclone.org/t/rclone-1-39-vs-1-40-mount-issue/5112)\nand [excessive time listing directories](https://github.com/rclone/rclone/issues/2095#issuecomment-371141147).\n\nThe kernel can cache the info about a file for the time given by\n`--attr-timeout`. You may see corruption if the remote file changes\nlength during this window.  It will show up as either a truncated file\nor a file with garbage on the end.  With `--attr-timeout 1s` this is\nvery unlikely but not impossible.  The higher you set `--attr-timeout`\nthe more likely it is.  The default setting of \"1s\" is the lowest\nsetting which mitigates the problems above.\n\nIf you set it higher (`10s` or `1m` say) then the kernel will call\nback to rclone less often making it more efficient, however there is\nmore chance of the corruption issue above.\n\nIf files don't change on the remote outside of the control of rclone\nthen there is no chance of corruption.\n\nThis is the same as setting the attr_timeout option in mount.fuse.\n\n## Filters\n\nNote that all the rclone filters can be used to select a subset of the\nfiles to be visible in the mount.\n\n## systemd\n\nWhen running rclone nfsmount as a systemd service, it is possible\nto use Type=notify. In this case the service will enter the started state\nafter the mountpoint has been successfully set up.\nUnits having the rclone nfsmount service specified as a requirement\nwill see all files and folders immediately in this mode.\n\nNote that systemd runs mount units without any environment variables including\n`PATH` or `HOME`. This means that tilde (`~`) expansion will not work\nand you should provide `--config` and `--cache-dir` explicitly as absolute\npaths via rclone arguments.\nSince mounting requires the `fusermount` program, rclone will use the fallback\nPATH of `/bin:/usr/bin` in this scenario. Please ensure that `fusermount`\nis present on this PATH.\n\n## Rclone as Unix mount helper\n\nThe core Unix program `/bin/mount` normally takes the `-t FSTYPE` argument\nthen runs the `/sbin/mount.FSTYPE` helper program passing it mount options\nas `-o key=val,...` or `--opt=...`. Automount (classic or systemd) behaves\nin a similar way.\n\nrclone by default expects GNU-style flags `--key val`. To run it as a mount\nhelper you should symlink rclone binary to `/sbin/mount.rclone` and optionally\n`/usr/bin/rclonefs`, e.g. `ln -s /usr/bin/rclone /sbin/mount.rclone`.\nrclone will detect it and translate command-line arguments appropriately.\n\nNow you can run classic mounts like this:\n```\nmount sftp1:subdir /mnt/data -t rclone -o vfs_cache_mode=writes,sftp_key_file=/path/to/pem\n```\n\nor create systemd mount units:\n```\n# /etc/systemd/system/mnt-data.mount\n[Unit]\nDescription=Mount for /mnt/data\n[Mount]\nType=rclone\nWhat=sftp1:subdir\nWhere=/mnt/data\nOptions=rw,_netdev,allow_other,args2env,vfs-cache-mode=writes,config=/etc/rclone.conf,cache-dir=/var/rclone\n```\n\noptionally accompanied by systemd automount unit\n```\n# /etc/systemd/system/mnt-data.automount\n[Unit]\nDescription=AutoMount for /mnt/data\n[Automount]\nWhere=/mnt/data\nTimeoutIdleSec=600\n[Install]\nWantedBy=multi-user.target\n```\n\nor add in `/etc/fstab` a line like\n```\nsftp1:subdir /mnt/data rclone rw,noauto,nofail,_netdev,x-systemd.automount,args2env,vfs_cache_mode=writes,config=/etc/rclone.conf,cache_dir=/var/cache/rclone 0 0\n```\n\nor use classic Automountd.\nRemember to provide explicit `config=...,cache-dir=...` as a workaround for\nmount units being run without `HOME`.\n\nRclone in the mount helper mode will split `-o` argument(s) by comma, replace `_`\nby `-` and prepend `--` to get the command-line flags. Options containing commas\nor spaces can be wrapped in single or double quotes. Any inner quotes inside outer\nquotes of the same type should be doubled.\n\nMount option syntax includes a few extra options treated specially:\n\n- `env.NAME=VALUE` will set an environment variable for the mount process.\n  This helps with Automountd and Systemd.mount which don't allow setting\n  custom environment for mount helpers.\n  Typically you will use `env.HTTPS_PROXY=proxy.host:3128` or `env.HOME=/root`\n- `command=cmount` can be used to run `cmount` or any other rclone command\n  rather than the default `mount`.\n- `args2env` will pass mount options to the mount helper running in background\n  via environment variables instead of command line arguments. This allows to\n  hide secrets from such commands as `ps` or `pgrep`.\n- `vv...` will be transformed into appropriate `--verbose=N`\n- standard mount options like `x-systemd.automount`, `_netdev`, `nosuid` and alike\n  are intended only for Automountd and ignored by rclone.\n\n## VFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk\nfiling system.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the\nVFS layer has to deal with that. Because there is no one right way of\ndoing this there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info\nabout files and directories (but not the data) in memory.\n\n## VFS Directory Cache\n\nUsing the `--dir-cache-time` flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend. Changes made through the VFS will appear immediately or\ninvalidate the cache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web\ninterface or a different copy of rclone will only be picked up once\nthe directory cache expires if the backend configured does not support\npolling for changes. If the backend supports polling, changes will be\npicked up within the polling interval.\n\nYou can send a `SIGHUP` signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.  Assuming only one\nrclone instance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a [remote control](/rc) then you can use\nrclone rc to flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\n## VFS File Buffering\n\nThe `--buffer-size` flag determines the amount of memory,\nthat will be used to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file.  The\nbuffer will only use memory for data that is downloaded but not not\nyet read. If the buffer is empty, only a small amount of memory will\nbe used.\n\nThe maximum memory used by rclone for buffering can be up to\n`--buffer-size * open files`.\n\n## VFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file.  See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with `-vv` rclone will print the location of the file cache.  The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with `--cache-dir` or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by `--vfs-cache-mode`.\nThe higher the cache mode the more compatible rclone becomes at the\ncost of using disk space.\n\nNote that files are written back to the remote only when they are\nclosed and if they haven't been accessed for `--vfs-write-back`\nseconds. If rclone is quit or dies with files that haven't been\nuploaded, these will be uploaded next time rclone is run with the same\nflags.\n\nIf using `--vfs-cache-max-size` or `--vfs-cache-min-free-size` note\nthat the cache may exceed these quotas for two reasons. Firstly\nbecause it is only checked every `--vfs-cache-poll-interval`. Secondly\nbecause open files cannot be evicted from the cache. When\n`--vfs-cache-max-size` or `--vfs-cache-min-free-size` is exceeded,\nrclone will attempt to evict the least accessed files from the cache\nfirst. rclone will start with files that haven't been accessed for the\nlongest. This cache flushing strategy is efficient and more relevant\nfiles are likely to remain cached.\n\nThe `--vfs-cache-max-age` will evict files from the cache\nafter the set time since last access has passed. The default value of\n1 hour will start evicting files from cache that haven't been accessed\nfor 1 hour. When a cached file is accessed the 1 hour timer is reset to 0\nand will wait for 1 more hour before evicting. Specify the time with\nstandard notation, s, m, h, d, w .\n\nYou **should not** run two copies of rclone using the same VFS cache\nwith the same or overlapping remotes if using `--vfs-cache-mode > off`.\nThis can potentially cause data corruption if you do. You can work\naround this by giving each rclone its own cache hierarchy with\n`--cache-dir`. You don't need to worry about this if the remotes in\nuse don't overlap.\n\n### --vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote and write\ndirectly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n  * Files can't be opened for both read AND write\n  * Files opened for write can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files open for read with O_TRUNC will be opened write only\n  * Files open for write only will behave as if O_TRUNC was supplied\n  * Open modes O_APPEND, O_TRUNC are ignored\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk.  This means that files opened for\nwrite will be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n  * Files opened for write only can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files opened for write only will ignore O_APPEND, O_TRUNC\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from\nthe remote, write only and read/write files are buffered to disk\nfirst.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n### --vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone\nwill keep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to `--vfs-cache-mode` writes.\n\nWhen reading a file rclone will read `--buffer-size` plus\n`--vfs-read-ahead` bytes ahead.  The `--buffer-size` is buffered in memory\nwhereas the `--vfs-read-ahead` is buffered on disk.\n\nWhen using this mode it is recommended that `--buffer-size` is not set\ntoo large and `--vfs-read-ahead` is set large if required.\n\n**IMPORTANT** not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache\ndirectory is on a filesystem which doesn't support sparse files and it\nwill log an ERROR message if one is detected.\n\n### Fingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file\ncopy has changed relative to a remote file. Fingerprints are made\nfrom:\n\n- size\n- modification time\n- hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take\nan extra API call per object, or extra work per object).\n\nFor example `hash` is slow with the `local` and `sftp` backends as\nthey have to read the entire file and hash it, and `modtime` is slow\nwith the `s3`, `swift`, `ftp` and `qinqstor` backends because they\nneed to do an extra API call to fetch it.\n\nIf you use the `--vfs-fast-fingerprint` flag then rclone will not\ninclude the slow operations in the fingerprint. This makes the\nfingerprinting less accurate but much faster and will improve the\nopening time of cached files.\n\nIf you are running a vfs cache over `local`, `s3` or `swift` backends\nthen using this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of\nthe files in the cache may be invalidated and the files will need to\nbe downloaded again.\n\n## VFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the\nchunk specified.  This can reduce the used download quota for some\nremotes by requesting only chunks from the remote that are actually\nread, at the cost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the `--vfs-read-chunk-streams` parameter.\n\n### `--vfs-read-chunk-streams` == 0\n\nRclone will start reading a chunk of size `--vfs-read-chunk-size`,\nand then double the size for each read. When `--vfs-read-chunk-size-limit` is\nspecified, and greater than `--vfs-read-chunk-size`, the chunk size for each\nopen file will get doubled only until the specified value is reached. If the\nvalue is \"off\", which is the default, the limit is disabled and the chunk size\nwill grow indefinitely.\n\nWith `--vfs-read-chunk-size 100M` and `--vfs-read-chunk-size-limit 0`\nthe following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen `--vfs-read-chunk-size-limit 500M` is specified, the result would be\n0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.\n\nSetting `--vfs-read-chunk-size` to `0` or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n### `--vfs-read-chunk-streams` > 0\n\nRclone reads `--vfs-read-chunk-streams` chunks of size\n`--vfs-read-chunk-size` concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links\nor very high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n`--vfs-read-chunk-size` and `--vfs-read-chunk-streams` as these will\ndepend on the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be `--vfs-read-chunk-streams 16` and\n`--vfs-read-chunk-size 4M`. In testing with AWS S3 the performance\nscaled roughly as the `--vfs-read-chunk-streams` setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more `--vfs-read-chunk-streams` in order to\nget the throughput.\n\n## VFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the [chunked reading](#vfs-chunked-reading)\nfeature.\n\nIn particular S3 and Swift benefit hugely from the `--no-modtime` flag\n(or use `--use-server-modtime` for a slightly different effect) as each\nread of the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather\nthan seeking rclone will wait a short time for the in sequence read or\nwrite to come in. These flags only come into effect when not using an\non disk cache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (`--vfs-cache-mode` with value writes or full),\nthe global flag `--transfers` can be set to adjust the number of parallel uploads of\nmodified files from the cache (the related global flag `--checkers` has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\n## VFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only\nby case, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case used\nto create the file is preserved and available for programs to query.\nIt is not allowed for two files in the same directory to differ only by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to make macOS\nfile systems case-sensitive but that is not the default.\n\nThe `--vfs-case-insensitive` VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the remote\nas-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers\nto an existing file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the same\nname is not found but a name differing only by case exists, rclone will\ntransparently fixup the name. This fixup happens only when an existing file\nis requested. Case sensitivity of file names created anew by rclone is\ncontrolled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the target)\nmay differ from case sensitivity of a file system presented by rclone (the source).\nThe flag controls whether \"fixup\" is performed to satisfy the target.\n\nIf the flag is not provided on the command line, then its default value depends\non the operating system where rclone runs: \"true\" on Windows and macOS, \"false\"\notherwise. If the flag is provided without a value, then it is \"true\".\n\nThe `--no-unicode-normalization` flag controls whether a similar \"fixup\" is\nperformed for filenames that differ but are [canonically\nequivalent](https://en.wikipedia.org/wiki/Unicode_equivalence) with respect to\nunicode. Unicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms. It is\ntherefore highly recommended to keep the default of `false` on macOS, to avoid\nencoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the `--vfs-block-norm-dupes`\nflag allows hiding these duplicates. This comes with a performance tradeoff, as\nrclone will have to scan the entire directory for duplicates when listing a\ndirectory. For this reason, it is recommended to leave this disabled if not\nneeded. However, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the mount,\nand both will appear to be editable, however, editing either version will\nactually result in only the NFD version getting edited under the hood. `--vfs-block-\nnorm-dupes` prevents this confusion by detecting this scenario, hiding the\nduplicates, and logging an error, similar to how this is handled in `rclone\nsync`.\n\n## VFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing system.\nIt can be useful when those statistics cannot be read correctly automatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\n## Alternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running `df` on the\nfilesystem, then pass the flag `--vfs-used-is-size` to rclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to `rclone size`\nand compute the total used space itself.\n\n_WARNING._ Contrary to `rclone size`, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots of API\ncalls resulting in extra charges. Use it as a last resort and only with caching.\n\n\n\n```\nrclone nfsmount remote:path /path/to/mountpoint [flags]\n```\n\n## Options\n\n```\n      --addr string                            IPaddress:Port or :Port to bind server to\n      --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n      --allow-other                            Allow access to other users (not supported on Windows)\n      --allow-root                             Allow access to root user (not supported on Windows)\n      --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n      --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n      --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n      --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n      --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n      --debug-fuse                             Debug the FUSE internals - needs -v\n      --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n      --devname string                         Set the device name - default is remote:path\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --direct-io                              Use Direct IO, disables caching of data\n      --file-perms FileMode                    File permissions (default 666)\n      --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for nfsmount\n      --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n      --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n      --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n      --nfs-cache-dir string                   The directory the NFS handle cache will use if set\n      --nfs-cache-handle-limit int             max file handles cached simultaneously (min 5) (default 1000000)\n      --nfs-cache-type memory|disk|symlink     Type of NFS handle cache to use (default memory)\n      --no-checksum                            Don't compare checksums on up/download\n      --no-modtime                             Don't read/write the modification time (can speed things up)\n      --no-seek                                Don't allow seeking in files\n      --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n      --noapplexattr                           Ignore all \"com.apple.*\" extended attributes (supported on OSX only)\n  -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --sudo                                   Use sudo to run the mount/umount commands as root.\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n      --volname string                         Set the volume name (supported on Windows and OSX only)\n      --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone obscure\n\nObscure password for use in the rclone config file.\n\n## Synopsis\n\nIn the rclone config file, human-readable passwords are\nobscured. Obscuring them is done by encrypting them and writing them\nout in base64. This is **not** a secure way of encrypting these\npasswords as rclone can decrypt them - it is to prevent \"eyedropping\"\n- namely someone seeing a password in the rclone config file by\naccident.\n\nMany equally important things (like access tokens) are not obscured in\nthe config file. However it is very hard to shoulder surf a 64\ncharacter hex token.\n\nThis command can also accept a password through STDIN instead of an\nargument by passing a hyphen as an argument. This will use the first\nline of STDIN as the password not including the trailing newline.\n\n    echo \"secretpassword\" | rclone obscure -\n\nIf there is no data on STDIN to read, rclone obscure will default to\nobfuscating the hyphen itself.\n\nIf you want to encrypt the config file then please use config file\nencryption - see [rclone config](https://rclone.org/commands/rclone_config/) for more\ninfo.\n\n```\nrclone obscure password [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for obscure\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone rc\n\nRun a command against a running rclone.\n\n## Synopsis\n\nThis runs a command against a running rclone.  Use the `--url` flag to\nspecify an non default URL to connect on.  This can be either a\n\":port\" which is taken to mean \"http://localhost:port\" or a\n\"host:port\" which is taken to mean \"http://host:port\"\n\nA username and password can be passed in with `--user` and `--pass`.\n\nNote that `--rc-addr`, `--rc-user`, `--rc-pass` will be read also for\n`--url`, `--user`, `--pass`.\n\nThe `--unix-socket` flag can be used to connect over a unix socket like this\n\n    # start server on /tmp/my.socket\n    rclone rcd --rc-addr unix:///tmp/my.socket\n    # Connect to it\n    rclone rc --unix-socket /tmp/my.socket core/stats\n\nArguments should be passed in as parameter=value.\n\nThe result will be returned as a JSON object by default.\n\nThe `--json` parameter can be used to pass in a JSON blob as an input\ninstead of key=value arguments.  This is the only way of passing in\nmore complicated values.\n\nThe `-o`/`--opt` option can be used to set a key \"opt\" with key, value\noptions in the form `-o key=value` or `-o key`. It can be repeated as\nmany times as required. This is useful for rc commands which take the\n\"opt\" parameter which by convention is a dictionary of strings.\n\n    -o key=value -o key2\n\nWill place this in the \"opt\" value\n\n    {\"key\":\"value\", \"key2\",\"\")\n\n\nThe `-a`/`--arg` option can be used to set strings in the \"arg\" value. It\ncan be repeated as many times as required. This is useful for rc\ncommands which take the \"arg\" parameter which by convention is a list\nof strings.\n\n    -a value -a value2\n\nWill place this in the \"arg\" value\n\n    [\"value\", \"value2\"]\n\nUse `--loopback` to connect to the rclone instance running `rclone rc`.\nThis is very useful for testing commands without having to run an\nrclone rc server, e.g.:\n\n    rclone rc --loopback operations/about fs=/\n\nUse `rclone rc` to see a list of all possible commands.\n\n```\nrclone rc commands parameter [flags]\n```\n\n## Options\n\n```\n  -a, --arg stringArray      Argument placed in the \"arg\" array\n  -h, --help                 help for rc\n      --json string          Input JSON - use instead of key=value args\n      --loopback             If set connect to this rclone instance not via HTTP\n      --no-output            If set, don't output the JSON result\n  -o, --opt stringArray      Option in the form name=value or name placed in the \"opt\" array\n      --pass string          Password to use to connect to rclone remote control\n      --unix-socket string   Path to a unix domain socket to dial to, instead of opening a TCP connection directly\n      --url string           URL to connect to rclone remote control (default \"http://localhost:5572/\")\n      --user string          Username to use to rclone remote control\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone rcat\n\nCopies standard input to file on remote.\n\n## Synopsis\n\nReads from standard input (stdin) and copies it to a single remote file.\n\n    echo \"hello world\" | rclone rcat remote:path/to/file\n    ffmpeg - | rclone rcat remote:path/to/file\n\nIf the remote file already exists, it will be overwritten.\n\nrcat will try to upload small files in a single request, which is\nusually more efficient than the streaming/chunked upload endpoints,\nwhich use multiple requests. Exact behaviour depends on the remote.\nWhat is considered a small file may be set through\n`--streaming-upload-cutoff`. Uploading only starts after\nthe cutoff is reached or if the file ends before that. The data\nmust fit into RAM. The cutoff needs to be small enough to adhere\nthe limits of your remote, please see there. Generally speaking,\nsetting this cutoff too high will decrease your performance.\n\nUse the `--size` flag to preallocate the file in advance at the remote end\nand actually stream it, even if remote backend doesn't support streaming.\n\n`--size` should be the exact size of the input stream in bytes. If the\nsize of the stream is different in length to the `--size` passed in\nthen the transfer will likely fail.\n\nNote that the upload cannot be retried because the data is not stored.\nIf the backend supports multipart uploading then individual chunks can\nbe retried. If you need to transfer a lot of data, you may be better\noff caching it locally and then `rclone move` it to the\ndestination which can use retries.\n\n```\nrclone rcat remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help       help for rcat\n      --size int   File size hint to preallocate (default -1)\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone rcd\n\nRun rclone listening to remote control commands only.\n\n## Synopsis\n\nThis runs rclone so that it only listens to remote control commands.\n\nThis is useful if you are controlling rclone via the rc API.\n\nIf you pass in a path to a directory, rclone will serve that directory\nfor GET requests on the URL passed in.  It will also open the URL in\nthe browser when rclone is run.\n\nSee the [rc documentation](https://rclone.org/rc/) for more info on the rc flags.\n\n## Server options\n\nUse `--rc-addr` to specify which IP address and port the server should\nlisten on, eg `--rc-addr 1.2.3.4:8000` or `--rc-addr :8080` to listen to all\nIPs.  By default it only listens on localhost.  You can use port\n:0 to let the OS choose an available port.\n\nIf you set `--rc-addr` to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n\nYou can use a unix socket by setting the url to `unix:///path/to/socket`\nor just by using an absolute path name. Note that unix sockets bypass the\nauthentication - this is expected to be done with file system permissions.\n\n`--rc-addr` may be repeated to listen on multiple IPs/ports/sockets.\nSocket activation, described further below, can also be used to accomplish the same.\n\n`--rc-server-read-timeout` and `--rc-server-write-timeout` can be used to\ncontrol the timeouts on the server.  Note that this is the total time\nfor a transfer.\n\n`--rc-max-header-bytes` controls the maximum number of bytes the server will\naccept in the HTTP header.\n\n`--rc-baseurl` controls the URL prefix that rclone serves from.  By default\nrclone will serve from the root.  If you used `--rc-baseurl \"/rclone\"` then\nrclone would serve from a URL starting with \"/rclone/\".  This is\nuseful if you wish to proxy rclone serve.  Rclone automatically\ninserts leading and trailing \"/\" on `--rc-baseurl`, so `--rc-baseurl \"rclone\"`,\n`--rc-baseurl \"/rclone\"` and `--rc-baseurl \"/rclone/\"` are all treated\nidentically.\n\n### TLS (SSL)\n\nBy default this will serve over http.  If you want you can serve over\nhttps.  You will need to supply the `--rc-cert` and `--rc-key` flags.\nIf you wish to do client side certificate validation then you will need to\nsupply `--rc-client-ca` also.\n\n`--rc-cert` should be a either a PEM encoded certificate or a concatenation\nof that with the CA certificate.  `--krc-ey` should be the PEM encoded\nprivate key and `--rc-client-ca` should be the PEM encoded client\ncertificate authority certificate.\n\n`--rc-min-tls-version` is minimum TLS version that is acceptable. Valid\n  values are \"tls1.0\", \"tls1.1\", \"tls1.2\" and \"tls1.3\" (default\n  \"tls1.0\").\n\n## Socket activation\n\nInstead of the listening addresses specified above, rclone will listen to all\nFDs passed by the service manager, if any (and ignore any arguments passed by --rc-addr`).\n\nThis allows rclone to be a socket-activated service.\nIt can be configured with .socket and .service unit files as described in\nhttps://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html\n\nSocket activation can be tested ad-hoc with the `systemd-socket-activate`command\n\n       systemd-socket-activate -l 8000 -- rclone serve\n\nThis will socket-activate rclone on the first connection to port 8000 over TCP.\n### Template\n\n`--rc-template` allows a user to specify a custom markup template for HTTP\nand WebDAV serve functions.  The server exports the following markup\nto be used within the template to server pages:\n\n| Parameter   | Description |\n| :---------- | :---------- |\n| .Name       | The full path of a file/directory. |\n| .Title      | Directory listing of .Name |\n| .Sort       | The current sort used.  This is changeable via ?sort= parameter |\n|             | Sort Options: namedirfirst,name,size,time (default namedirfirst) |\n| .Order      | The current ordering used.  This is changeable via ?order= parameter |\n|             | Order Options: asc,desc (default asc) |\n| .Query      | Currently unused. |\n| .Breadcrumb | Allows for creating a relative navigation |\n|-- .Link     | The relative to the root link of the Text. |\n|-- .Text     | The Name of the directory. |\n| .Entries    | Information about a specific file/directory. |\n|-- .URL      | The 'url' of an entry.  |\n|-- .Leaf     | Currently same as 'URL' but intended to be 'just' the name. |\n|-- .IsDir    | Boolean for if an entry is a directory or not. |\n|-- .Size     | Size in Bytes of the entry. |\n|-- .ModTime  | The UTC timestamp of an entry. |\n\nThe server also makes the following functions available so that they can be used within the\ntemplate. These functions help extend the options for dynamic rendering of HTML. They can\nbe used to render HTML based on specific conditions.\n\n| Function   | Description |\n| :---------- | :---------- |\n| afterEpoch  | Returns the time since the epoch for the given time. |\n| contains    | Checks whether a given substring is present or not in a given string. |\n| hasPrefix   | Checks whether the given string begins with the specified prefix. |\n| hasSuffix   | Checks whether the given string end with the specified suffix. |\n\n### Authentication\n\nBy default this will serve files without needing a login.\n\nYou can either use an htpasswd file which can take lots of users, or\nset a single username and password with the `--rc-user` and `--rc-pass` flags.\n\nIf no static users are configured by either of the above methods, and client\ncertificates are required by the `--client-ca` flag passed to the server, the\nclient certificate common name will be considered as the username.\n\nUse `--rc-htpasswd /path/to/htpasswd` to provide an htpasswd file.  This is\nin standard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication.  Bcrypt is recommended.\n\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.\n\nUse `--rc-realm` to set the authentication realm.\n\nUse `--rc-salt` to change the password hashing salt from the default.\n\n\n\n```\nrclone rcd <path to files to serve>* [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for rcd\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### RC Options\n\nFlags to control the Remote Control API\n\n```\n      --rc                                 Enable the remote control server\n      --rc-addr stringArray                IPaddress:Port or :Port to bind server to (default [\"localhost:5572\"])\n      --rc-allow-origin string             Origin which cross-domain request (CORS) can be executed from\n      --rc-baseurl string                  Prefix for URLs - leave blank for root\n      --rc-cert string                     TLS PEM key (concatenation of certificate and CA certificate)\n      --rc-client-ca string                Client certificate authority to verify clients with\n      --rc-enable-metrics                  Enable the Prometheus metrics path at the remote control server\n      --rc-files string                    Path to local files to serve on the HTTP server\n      --rc-htpasswd string                 A htpasswd file - if not provided no authentication is done\n      --rc-job-expire-duration Duration    Expire finished async jobs older than this value (default 1m0s)\n      --rc-job-expire-interval Duration    Interval to check for expired async jobs (default 10s)\n      --rc-key string                      TLS PEM Private key\n      --rc-max-header-bytes int            Maximum size of request header (default 4096)\n      --rc-min-tls-version string          Minimum TLS version that is acceptable (default \"tls1.0\")\n      --rc-no-auth                         Don't require auth for certain methods\n      --rc-pass string                     Password for authentication\n      --rc-realm string                    Realm for authentication\n      --rc-salt string                     Password hashing salt (default \"dlPL2MqE\")\n      --rc-serve                           Enable the serving of remote objects\n      --rc-serve-no-modtime                Don't read the modification time (can speed things up)\n      --rc-server-read-timeout Duration    Timeout for server reading data (default 1h0m0s)\n      --rc-server-write-timeout Duration   Timeout for server writing data (default 1h0m0s)\n      --rc-template string                 User-specified template\n      --rc-user string                     User name for authentication\n      --rc-web-fetch-url string            URL to fetch the releases for webgui (default \"https://api.github.com/repos/rclone/rclone-webui-react/releases/latest\")\n      --rc-web-gui                         Launch WebGUI on localhost\n      --rc-web-gui-force-update            Force update to latest version of web gui\n      --rc-web-gui-no-open-browser         Don't open the browser automatically\n      --rc-web-gui-update                  Check and update to latest version of web gui\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone rmdirs\n\nRemove empty directories under the path.\n\n## Synopsis\n\nThis recursively removes any empty directories (including directories\nthat only contain empty directories), that it finds under the path.\nThe root path itself will also be removed if it is empty, unless\nyou supply the `--leave-root` flag.\n\nUse command [rmdir](https://rclone.org/commands/rclone_rmdir/) to delete just the empty\ndirectory given by path, not recurse.\n\nThis is useful for tidying up remotes that rclone has left a lot of\nempty directories in. For example the [delete](https://rclone.org/commands/rclone_delete/)\ncommand will delete files but leave the directory structure (unless\nused with option `--rmdirs`).\n\nThis will delete `--checkers` directories concurrently so\nif you have thousands of empty directories consider increasing this number.\n\nTo delete a path and any objects in it, use the [purge](https://rclone.org/commands/rclone_purge/)\ncommand.\n\n\n```\nrclone rmdirs remote:path [flags]\n```\n\n## Options\n\n```\n  -h, --help         help for rmdirs\n      --leave-root   Do not remove root directory if empty\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Important Options\n\nImportant flags useful for most commands\n\n```\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n```\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone selfupdate\n\nUpdate the rclone binary.\n\n## Synopsis\n\nThis command downloads the latest release of rclone and replaces the\ncurrently running binary. The download is verified with a hashsum and\ncryptographically signed signature; see [the release signing\ndocs](https://rclone.org/release_signing/) for details.\n\nIf used without flags (or with implied `--stable` flag), this command\nwill install the latest stable release. However, some issues may be fixed\n(or features added) only in the latest beta release. In such cases you should\nrun the command with the `--beta` flag, i.e. `rclone selfupdate --beta`.\nYou can check in advance what version would be installed by adding the\n`--check` flag, then repeat the command without it when you are satisfied.\n\nSometimes the rclone team may recommend you a concrete beta or stable\nrclone release to troubleshoot your issue or add a bleeding edge feature.\nThe `--version VER` flag, if given, will update to the concrete version\ninstead of the latest one. If you omit micro version from `VER` (for\nexample `1.53`), the latest matching micro version will be used.\n\nUpon successful update rclone will print a message that contains a previous\nversion number. You will need it if you later decide to revert your update\nfor some reason. Then you'll have to note the previous version and run the\nfollowing command: `rclone selfupdate [--beta] OLDVER`.\nIf the old version contains only dots and digits (for example `v1.54.0`)\nthen it's a stable release so you won't need the `--beta` flag. Beta releases\nhave an additional information similar to `v1.54.0-beta.5111.06f1c0c61`.\n(if you are a developer and use a locally built rclone, the version number\nwill end with `-DEV`, you will have to rebuild it as it obviously can't\nbe distributed).\n\nIf you previously installed rclone via a package manager, the package may\ninclude local documentation or configure services. You may wish to update\nwith the flag `--package deb` or `--package rpm` (whichever is correct for\nyour OS) to update these too. This command with the default `--package zip`\nwill update only the rclone executable so the local manual may become\ninaccurate after it.\n\nThe [rclone mount](https://rclone.org/commands/rclone_mount/) command may\nor may not support extended FUSE options depending on the build and OS.\n`selfupdate` will refuse to update if the capability would be discarded.\n\nNote: Windows forbids deletion of a currently running executable so this\ncommand will rename the old executable to 'rclone.old.exe' upon success.\n\nPlease note that this command was not available before rclone version 1.55.\nIf it fails for you with the message `unknown command \"selfupdate\"` then\nyou will need to update manually following the install instructions located\nat https://rclone.org/install/\n\n\n```\nrclone selfupdate [flags]\n```\n\n## Options\n\n```\n      --beta             Install beta release\n      --check            Check for latest release, do not download\n  -h, --help             help for selfupdate\n      --output string    Save the downloaded binary at a given path (default: replace running binary)\n      --package string   Package format: zip|deb|rpm (default: zip)\n      --stable           Install stable release (this is the default)\n      --version string   Install the given rclone version (default: latest)\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n\n# rclone serve\n\nServe a remote over a protocol.\n\n## Synopsis\n\nServe a remote over a given protocol. Requires the use of a\nsubcommand to specify the protocol, e.g.\n\n    rclone serve http remote:\n\nEach subcommand has its own options which you can see in their help.\n\n\n```\nrclone serve <protocol> [opts] <remote> [flags]\n```\n\n## Options\n\n```\n  -h, --help   help for serve\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone](https://rclone.org/commands/rclone/)\t - Show help for rclone commands, flags and backends.\n* [rclone serve dlna](https://rclone.org/commands/rclone_serve_dlna/)\t - Serve remote:path over DLNA\n* [rclone serve docker](https://rclone.org/commands/rclone_serve_docker/)\t - Serve any remote on docker's volume plugin API.\n* [rclone serve ftp](https://rclone.org/commands/rclone_serve_ftp/)\t - Serve remote:path over FTP.\n* [rclone serve http](https://rclone.org/commands/rclone_serve_http/)\t - Serve the remote over HTTP.\n* [rclone serve nfs](https://rclone.org/commands/rclone_serve_nfs/)\t - Serve the remote as an NFS mount\n* [rclone serve restic](https://rclone.org/commands/rclone_serve_restic/)\t - Serve the remote for restic's REST API.\n* [rclone serve s3](https://rclone.org/commands/rclone_serve_s3/)\t - Serve remote:path over s3.\n* [rclone serve sftp](https://rclone.org/commands/rclone_serve_sftp/)\t - Serve the remote over SFTP.\n* [rclone serve webdav](https://rclone.org/commands/rclone_serve_webdav/)\t - Serve remote:path over WebDAV.\n\n# rclone serve dlna\n\nServe remote:path over DLNA\n\n## Synopsis\n\nRun a DLNA media server for media stored in an rclone remote. Many\ndevices, such as the Xbox and PlayStation, can automatically discover\nthis server in the LAN and play audio/video from it. VLC is also\nsupported. Service discovery uses UDP multicast packets (SSDP) and\nwill thus only work on LANs.\n\nRclone will list all files present in the remote, without filtering\nbased on media formats or file extensions. Additionally, there is no\nmedia transcoding support. This means that some players might show\nfiles that they are not able to play back correctly.\n\nRclone will add external subtitle files (.srt) to videos if they have the same\nfilename as the video file itself (except the extension), either in the same\ndirectory as the video, or in a \"Subs\" subdirectory.\n\n## Server options\n\nUse `--addr` to specify which IP address and port the server should\nlisten on, e.g. `--addr 1.2.3.4:8000` or `--addr :8080` to listen to all\nIPs.\n\nUse `--name` to choose the friendly server name, which is by\ndefault \"rclone (hostname)\".\n\nUse `--log-trace` in conjunction with `-vv` to enable additional debug\nlogging of all UPNP traffic.\n\n## VFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk\nfiling system.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the\nVFS layer has to deal with that. Because there is no one right way of\ndoing this there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info\nabout files and directories (but not the data) in memory.\n\n## VFS Directory Cache\n\nUsing the `--dir-cache-time` flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend. Changes made through the VFS will appear immediately or\ninvalidate the cache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web\ninterface or a different copy of rclone will only be picked up once\nthe directory cache expires if the backend configured does not support\npolling for changes. If the backend supports polling, changes will be\npicked up within the polling interval.\n\nYou can send a `SIGHUP` signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.  Assuming only one\nrclone instance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a [remote control](/rc) then you can use\nrclone rc to flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\n## VFS File Buffering\n\nThe `--buffer-size` flag determines the amount of memory,\nthat will be used to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file.  The\nbuffer will only use memory for data that is downloaded but not not\nyet read. If the buffer is empty, only a small amount of memory will\nbe used.\n\nThe maximum memory used by rclone for buffering can be up to\n`--buffer-size * open files`.\n\n## VFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file.  See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with `-vv` rclone will print the location of the file cache.  The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with `--cache-dir` or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by `--vfs-cache-mode`.\nThe higher the cache mode the more compatible rclone becomes at the\ncost of using disk space.\n\nNote that files are written back to the remote only when they are\nclosed and if they haven't been accessed for `--vfs-write-back`\nseconds. If rclone is quit or dies with files that haven't been\nuploaded, these will be uploaded next time rclone is run with the same\nflags.\n\nIf using `--vfs-cache-max-size` or `--vfs-cache-min-free-size` note\nthat the cache may exceed these quotas for two reasons. Firstly\nbecause it is only checked every `--vfs-cache-poll-interval`. Secondly\nbecause open files cannot be evicted from the cache. When\n`--vfs-cache-max-size` or `--vfs-cache-min-free-size` is exceeded,\nrclone will attempt to evict the least accessed files from the cache\nfirst. rclone will start with files that haven't been accessed for the\nlongest. This cache flushing strategy is efficient and more relevant\nfiles are likely to remain cached.\n\nThe `--vfs-cache-max-age` will evict files from the cache\nafter the set time since last access has passed. The default value of\n1 hour will start evicting files from cache that haven't been accessed\nfor 1 hour. When a cached file is accessed the 1 hour timer is reset to 0\nand will wait for 1 more hour before evicting. Specify the time with\nstandard notation, s, m, h, d, w .\n\nYou **should not** run two copies of rclone using the same VFS cache\nwith the same or overlapping remotes if using `--vfs-cache-mode > off`.\nThis can potentially cause data corruption if you do. You can work\naround this by giving each rclone its own cache hierarchy with\n`--cache-dir`. You don't need to worry about this if the remotes in\nuse don't overlap.\n\n### --vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote and write\ndirectly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n  * Files can't be opened for both read AND write\n  * Files opened for write can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files open for read with O_TRUNC will be opened write only\n  * Files open for write only will behave as if O_TRUNC was supplied\n  * Open modes O_APPEND, O_TRUNC are ignored\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk.  This means that files opened for\nwrite will be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n  * Files opened for write only can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files opened for write only will ignore O_APPEND, O_TRUNC\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from\nthe remote, write only and read/write files are buffered to disk\nfirst.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n### --vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone\nwill keep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to `--vfs-cache-mode` writes.\n\nWhen reading a file rclone will read `--buffer-size` plus\n`--vfs-read-ahead` bytes ahead.  The `--buffer-size` is buffered in memory\nwhereas the `--vfs-read-ahead` is buffered on disk.\n\nWhen using this mode it is recommended that `--buffer-size` is not set\ntoo large and `--vfs-read-ahead` is set large if required.\n\n**IMPORTANT** not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache\ndirectory is on a filesystem which doesn't support sparse files and it\nwill log an ERROR message if one is detected.\n\n### Fingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file\ncopy has changed relative to a remote file. Fingerprints are made\nfrom:\n\n- size\n- modification time\n- hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take\nan extra API call per object, or extra work per object).\n\nFor example `hash` is slow with the `local` and `sftp` backends as\nthey have to read the entire file and hash it, and `modtime` is slow\nwith the `s3`, `swift`, `ftp` and `qinqstor` backends because they\nneed to do an extra API call to fetch it.\n\nIf you use the `--vfs-fast-fingerprint` flag then rclone will not\ninclude the slow operations in the fingerprint. This makes the\nfingerprinting less accurate but much faster and will improve the\nopening time of cached files.\n\nIf you are running a vfs cache over `local`, `s3` or `swift` backends\nthen using this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of\nthe files in the cache may be invalidated and the files will need to\nbe downloaded again.\n\n## VFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the\nchunk specified.  This can reduce the used download quota for some\nremotes by requesting only chunks from the remote that are actually\nread, at the cost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the `--vfs-read-chunk-streams` parameter.\n\n### `--vfs-read-chunk-streams` == 0\n\nRclone will start reading a chunk of size `--vfs-read-chunk-size`,\nand then double the size for each read. When `--vfs-read-chunk-size-limit` is\nspecified, and greater than `--vfs-read-chunk-size`, the chunk size for each\nopen file will get doubled only until the specified value is reached. If the\nvalue is \"off\", which is the default, the limit is disabled and the chunk size\nwill grow indefinitely.\n\nWith `--vfs-read-chunk-size 100M` and `--vfs-read-chunk-size-limit 0`\nthe following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen `--vfs-read-chunk-size-limit 500M` is specified, the result would be\n0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.\n\nSetting `--vfs-read-chunk-size` to `0` or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n### `--vfs-read-chunk-streams` > 0\n\nRclone reads `--vfs-read-chunk-streams` chunks of size\n`--vfs-read-chunk-size` concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links\nor very high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n`--vfs-read-chunk-size` and `--vfs-read-chunk-streams` as these will\ndepend on the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be `--vfs-read-chunk-streams 16` and\n`--vfs-read-chunk-size 4M`. In testing with AWS S3 the performance\nscaled roughly as the `--vfs-read-chunk-streams` setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more `--vfs-read-chunk-streams` in order to\nget the throughput.\n\n## VFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the [chunked reading](#vfs-chunked-reading)\nfeature.\n\nIn particular S3 and Swift benefit hugely from the `--no-modtime` flag\n(or use `--use-server-modtime` for a slightly different effect) as each\nread of the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather\nthan seeking rclone will wait a short time for the in sequence read or\nwrite to come in. These flags only come into effect when not using an\non disk cache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (`--vfs-cache-mode` with value writes or full),\nthe global flag `--transfers` can be set to adjust the number of parallel uploads of\nmodified files from the cache (the related global flag `--checkers` has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\n## VFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only\nby case, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case used\nto create the file is preserved and available for programs to query.\nIt is not allowed for two files in the same directory to differ only by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to make macOS\nfile systems case-sensitive but that is not the default.\n\nThe `--vfs-case-insensitive` VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the remote\nas-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers\nto an existing file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the same\nname is not found but a name differing only by case exists, rclone will\ntransparently fixup the name. This fixup happens only when an existing file\nis requested. Case sensitivity of file names created anew by rclone is\ncontrolled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the target)\nmay differ from case sensitivity of a file system presented by rclone (the source).\nThe flag controls whether \"fixup\" is performed to satisfy the target.\n\nIf the flag is not provided on the command line, then its default value depends\non the operating system where rclone runs: \"true\" on Windows and macOS, \"false\"\notherwise. If the flag is provided without a value, then it is \"true\".\n\nThe `--no-unicode-normalization` flag controls whether a similar \"fixup\" is\nperformed for filenames that differ but are [canonically\nequivalent](https://en.wikipedia.org/wiki/Unicode_equivalence) with respect to\nunicode. Unicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms. It is\ntherefore highly recommended to keep the default of `false` on macOS, to avoid\nencoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the `--vfs-block-norm-dupes`\nflag allows hiding these duplicates. This comes with a performance tradeoff, as\nrclone will have to scan the entire directory for duplicates when listing a\ndirectory. For this reason, it is recommended to leave this disabled if not\nneeded. However, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the mount,\nand both will appear to be editable, however, editing either version will\nactually result in only the NFD version getting edited under the hood. `--vfs-block-\nnorm-dupes` prevents this confusion by detecting this scenario, hiding the\nduplicates, and logging an error, similar to how this is handled in `rclone\nsync`.\n\n## VFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing system.\nIt can be useful when those statistics cannot be read correctly automatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\n## Alternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running `df` on the\nfilesystem, then pass the flag `--vfs-used-is-size` to rclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to `rclone size`\nand compute the total used space itself.\n\n_WARNING._ Contrary to `rclone size`, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots of API\ncalls resulting in extra charges. Use it as a last resort and only with caching.\n\n\n\n```\nrclone serve dlna remote:path [flags]\n```\n\n## Options\n\n```\n      --addr string                            The ip:port or :port to bind the DLNA http server to (default \":7879\")\n      --announce-interval Duration             The interval between SSDP announcements (default 12m0s)\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --file-perms FileMode                    File permissions (default 666)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for dlna\n      --interface stringArray                  The interface to use for SSDP (repeat as necessary)\n      --log-trace                              Enable trace logging of SOAP traffic\n      --name string                            Name of DLNA server\n      --no-checksum                            Don't compare checksums on up/download\n      --no-modtime                             Don't read/write the modification time (can speed things up)\n      --no-seek                                Don't allow seeking in files\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n## See Also\n\n* [rclone serve](https://rclone.org/commands/rclone_serve/)\t - Serve a remote over a protocol.\n\n# rclone serve docker\n\nServe any remote on docker's volume plugin API.\n\n## Synopsis\n\nThis command implements the Docker volume plugin API allowing docker to use\nrclone as a data storage mechanism for various cloud providers.\nrclone provides [docker volume plugin](/docker) based on it.\n\nTo create a docker plugin, one must create a Unix or TCP socket that Docker\nwill look for when you use the plugin and then it listens for commands from\ndocker daemon and runs the corresponding code when necessary.\nDocker plugins can run as a managed plugin under control of the docker daemon\nor as an independent native service. For testing, you can just run it directly\nfrom the command line, for example:\n```\nsudo rclone serve docker --base-dir /tmp/rclone-volumes --socket-addr localhost:8787 -vv\n```\n\nRunning `rclone serve docker` will create the said socket, listening for\ncommands from Docker to create the necessary Volumes. Normally you need not\ngive the `--socket-addr` flag. The API will listen on the unix domain socket\nat `/run/docker/plugins/rclone.sock`. In the example above rclone will create\na TCP socket and a small file `/etc/docker/plugins/rclone.spec` containing\nthe socket address. We use `sudo` because both paths are writeable only by\nthe root user.\n\nIf you later decide to change listening socket, the docker daemon must be\nrestarted to reconnect to `/run/docker/plugins/rclone.sock`\nor parse new `/etc/docker/plugins/rclone.spec`. Until you restart, any\nvolume related docker commands will timeout trying to access the old socket.\nRunning directly is supported on **Linux only**, not on Windows or MacOS.\nThis is not a problem with managed plugin mode described in details\nin the [full documentation](https://rclone.org/docker).\n\nThe command will create volume mounts under the path given by `--base-dir`\n(by default `/var/lib/docker-volumes/rclone` available only to root)\nand maintain the JSON formatted file `docker-plugin.state` in the rclone cache\ndirectory with book-keeping records of created and mounted volumes.\n\nAll mount and VFS options are submitted by the docker daemon via API, but\nyou can also provide defaults on the command line as well as set path to the\nconfig file and cache directory or adjust logging verbosity.\n\n## VFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk\nfiling system.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the\nVFS layer has to deal with that. Because there is no one right way of\ndoing this there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info\nabout files and directories (but not the data) in memory.\n\n## VFS Directory Cache\n\nUsing the `--dir-cache-time` flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend. Changes made through the VFS will appear immediately or\ninvalidate the cache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web\ninterface or a different copy of rclone will only be picked up once\nthe directory cache expires if the backend configured does not support\npolling for changes. If the backend supports polling, changes will be\npicked up within the polling interval.\n\nYou can send a `SIGHUP` signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.  Assuming only one\nrclone instance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a [remote control](/rc) then you can use\nrclone rc to flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\n## VFS File Buffering\n\nThe `--buffer-size` flag determines the amount of memory,\nthat will be used to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file.  The\nbuffer will only use memory for data that is downloaded but not not\nyet read. If the buffer is empty, only a small amount of memory will\nbe used.\n\nThe maximum memory used by rclone for buffering can be up to\n`--buffer-size * open files`.\n\n## VFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file.  See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with `-vv` rclone will print the location of the file cache.  The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with `--cache-dir` or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by `--vfs-cache-mode`.\nThe higher the cache mode the more compatible rclone becomes at the\ncost of using disk space.\n\nNote that files are written back to the remote only when they are\nclosed and if they haven't been accessed for `--vfs-write-back`\nseconds. If rclone is quit or dies with files that haven't been\nuploaded, these will be uploaded next time rclone is run with the same\nflags.\n\nIf using `--vfs-cache-max-size` or `--vfs-cache-min-free-size` note\nthat the cache may exceed these quotas for two reasons. Firstly\nbecause it is only checked every `--vfs-cache-poll-interval`. Secondly\nbecause open files cannot be evicted from the cache. When\n`--vfs-cache-max-size` or `--vfs-cache-min-free-size` is exceeded,\nrclone will attempt to evict the least accessed files from the cache\nfirst. rclone will start with files that haven't been accessed for the\nlongest. This cache flushing strategy is efficient and more relevant\nfiles are likely to remain cached.\n\nThe `--vfs-cache-max-age` will evict files from the cache\nafter the set time since last access has passed. The default value of\n1 hour will start evicting files from cache that haven't been accessed\nfor 1 hour. When a cached file is accessed the 1 hour timer is reset to 0\nand will wait for 1 more hour before evicting. Specify the time with\nstandard notation, s, m, h, d, w .\n\nYou **should not** run two copies of rclone using the same VFS cache\nwith the same or overlapping remotes if using `--vfs-cache-mode > off`.\nThis can potentially cause data corruption if you do. You can work\naround this by giving each rclone its own cache hierarchy with\n`--cache-dir`. You don't need to worry about this if the remotes in\nuse don't overlap.\n\n### --vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote and write\ndirectly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n  * Files can't be opened for both read AND write\n  * Files opened for write can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files open for read with O_TRUNC will be opened write only\n  * Files open for write only will behave as if O_TRUNC was supplied\n  * Open modes O_APPEND, O_TRUNC are ignored\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk.  This means that files opened for\nwrite will be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n  * Files opened for write only can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files opened for write only will ignore O_APPEND, O_TRUNC\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from\nthe remote, write only and read/write files are buffered to disk\nfirst.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n### --vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone\nwill keep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to `--vfs-cache-mode` writes.\n\nWhen reading a file rclone will read `--buffer-size` plus\n`--vfs-read-ahead` bytes ahead.  The `--buffer-size` is buffered in memory\nwhereas the `--vfs-read-ahead` is buffered on disk.\n\nWhen using this mode it is recommended that `--buffer-size` is not set\ntoo large and `--vfs-read-ahead` is set large if required.\n\n**IMPORTANT** not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache\ndirectory is on a filesystem which doesn't support sparse files and it\nwill log an ERROR message if one is detected.\n\n### Fingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file\ncopy has changed relative to a remote file. Fingerprints are made\nfrom:\n\n- size\n- modification time\n- hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take\nan extra API call per object, or extra work per object).\n\nFor example `hash` is slow with the `local` and `sftp` backends as\nthey have to read the entire file and hash it, and `modtime` is slow\nwith the `s3`, `swift`, `ftp` and `qinqstor` backends because they\nneed to do an extra API call to fetch it.\n\nIf you use the `--vfs-fast-fingerprint` flag then rclone will not\ninclude the slow operations in the fingerprint. This makes the\nfingerprinting less accurate but much faster and will improve the\nopening time of cached files.\n\nIf you are running a vfs cache over `local`, `s3` or `swift` backends\nthen using this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of\nthe files in the cache may be invalidated and the files will need to\nbe downloaded again.\n\n## VFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the\nchunk specified.  This can reduce the used download quota for some\nremotes by requesting only chunks from the remote that are actually\nread, at the cost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the `--vfs-read-chunk-streams` parameter.\n\n### `--vfs-read-chunk-streams` == 0\n\nRclone will start reading a chunk of size `--vfs-read-chunk-size`,\nand then double the size for each read. When `--vfs-read-chunk-size-limit` is\nspecified, and greater than `--vfs-read-chunk-size`, the chunk size for each\nopen file will get doubled only until the specified value is reached. If the\nvalue is \"off\", which is the default, the limit is disabled and the chunk size\nwill grow indefinitely.\n\nWith `--vfs-read-chunk-size 100M` and `--vfs-read-chunk-size-limit 0`\nthe following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen `--vfs-read-chunk-size-limit 500M` is specified, the result would be\n0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.\n\nSetting `--vfs-read-chunk-size` to `0` or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n### `--vfs-read-chunk-streams` > 0\n\nRclone reads `--vfs-read-chunk-streams` chunks of size\n`--vfs-read-chunk-size` concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links\nor very high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n`--vfs-read-chunk-size` and `--vfs-read-chunk-streams` as these will\ndepend on the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be `--vfs-read-chunk-streams 16` and\n`--vfs-read-chunk-size 4M`. In testing with AWS S3 the performance\nscaled roughly as the `--vfs-read-chunk-streams` setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more `--vfs-read-chunk-streams` in order to\nget the throughput.\n\n## VFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the [chunked reading](#vfs-chunked-reading)\nfeature.\n\nIn particular S3 and Swift benefit hugely from the `--no-modtime` flag\n(or use `--use-server-modtime` for a slightly different effect) as each\nread of the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather\nthan seeking rclone will wait a short time for the in sequence read or\nwrite to come in. These flags only come into effect when not using an\non disk cache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (`--vfs-cache-mode` with value writes or full),\nthe global flag `--transfers` can be set to adjust the number of parallel uploads of\nmodified files from the cache (the related global flag `--checkers` has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\n## VFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only\nby case, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case used\nto create the file is preserved and available for programs to query.\nIt is not allowed for two files in the same directory to differ only by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to make macOS\nfile systems case-sensitive but that is not the default.\n\nThe `--vfs-case-insensitive` VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the remote\nas-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers\nto an existing file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the same\nname is not found but a name differing only by case exists, rclone will\ntransparently fixup the name. This fixup happens only when an existing file\nis requested. Case sensitivity of file names created anew by rclone is\ncontrolled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the target)\nmay differ from case sensitivity of a file system presented by rclone (the source).\nThe flag controls whether \"fixup\" is performed to satisfy the target.\n\nIf the flag is not provided on the command line, then its default value depends\non the operating system where rclone runs: \"true\" on Windows and macOS, \"false\"\notherwise. If the flag is provided without a value, then it is \"true\".\n\nThe `--no-unicode-normalization` flag controls whether a similar \"fixup\" is\nperformed for filenames that differ but are [canonically\nequivalent](https://en.wikipedia.org/wiki/Unicode_equivalence) with respect to\nunicode. Unicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms. It is\ntherefore highly recommended to keep the default of `false` on macOS, to avoid\nencoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the `--vfs-block-norm-dupes`\nflag allows hiding these duplicates. This comes with a performance tradeoff, as\nrclone will have to scan the entire directory for duplicates when listing a\ndirectory. For this reason, it is recommended to leave this disabled if not\nneeded. However, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the mount,\nand both will appear to be editable, however, editing either version will\nactually result in only the NFD version getting edited under the hood. `--vfs-block-\nnorm-dupes` prevents this confusion by detecting this scenario, hiding the\nduplicates, and logging an error, similar to how this is handled in `rclone\nsync`.\n\n## VFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing system.\nIt can be useful when those statistics cannot be read correctly automatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\n## Alternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running `df` on the\nfilesystem, then pass the flag `--vfs-used-is-size` to rclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to `rclone size`\nand compute the total used space itself.\n\n_WARNING._ Contrary to `rclone size`, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots of API\ncalls resulting in extra charges. Use it as a last resort and only with caching.\n\n\n\n```\nrclone serve docker [flags]\n```\n\n## Options\n\n```\n      --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n      --allow-other                            Allow access to other users (not supported on Windows)\n      --allow-root                             Allow access to root user (not supported on Windows)\n      --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n      --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n      --base-dir string                        Base directory for volumes (default \"/var/lib/docker-volumes/rclone\")\n      --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n      --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n      --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n      --debug-fuse                             Debug the FUSE internals - needs -v\n      --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n      --devname string                         Set the device name - default is remote:path\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --direct-io                              Use Direct IO, disables caching of data\n      --file-perms FileMode                    File permissions (default 666)\n      --forget-state                           Skip restoring previous state\n      --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for docker\n      --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n      --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n      --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n      --no-checksum                            Don't compare checksums on up/download\n      --no-modtime                             Don't read/write the modification time (can speed things up)\n      --no-seek                                Don't allow seeking in files\n      --no-spec                                Do not write spec file\n      --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n      --noapplexattr                           Ignore all \"com.apple.*\" extended attributes (supported on OSX only)\n  -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --socket-addr string                     Address <host:port> or absolute path (default: /run/docker/plugins/rclone.sock)\n      --socket-gid int                         GID for unix socket (default: current process GID) (default 1000)\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n      --volname string                         Set the volume name (supported on Windows and OSX only)\n      --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n## See Also\n\n* [rclone serve](https://rclone.org/commands/rclone_serve/)\t - Serve a remote over a protocol.\n\n# rclone serve ftp\n\nServe remote:path over FTP.\n\n## Synopsis\n\nRun a basic FTP server to serve a remote over FTP protocol.\nThis can be viewed with a FTP client or you can make a remote of\ntype FTP to read and write it.\n\n## Server options\n\nUse --addr to specify which IP address and port the server should\nlisten on, e.g. --addr 1.2.3.4:8000 or --addr :8080 to listen to all\nIPs.  By default it only listens on localhost.  You can use port\n:0 to let the OS choose an available port.\n\nIf you set --addr to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n\n### Authentication\n\nBy default this will serve files without needing a login.\n\nYou can set a single username and password with the --user and --pass flags.\n\n## VFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk\nfiling system.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the\nVFS layer has to deal with that. Because there is no one right way of\ndoing this there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info\nabout files and directories (but not the data) in memory.\n\n## VFS Directory Cache\n\nUsing the `--dir-cache-time` flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend. Changes made through the VFS will appear immediately or\ninvalidate the cache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web\ninterface or a different copy of rclone will only be picked up once\nthe directory cache expires if the backend configured does not support\npolling for changes. If the backend supports polling, changes will be\npicked up within the polling interval.\n\nYou can send a `SIGHUP` signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.  Assuming only one\nrclone instance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a [remote control](/rc) then you can use\nrclone rc to flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\n## VFS File Buffering\n\nThe `--buffer-size` flag determines the amount of memory,\nthat will be used to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file.  The\nbuffer will only use memory for data that is downloaded but not not\nyet read. If the buffer is empty, only a small amount of memory will\nbe used.\n\nThe maximum memory used by rclone for buffering can be up to\n`--buffer-size * open files`.\n\n## VFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file.  See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with `-vv` rclone will print the location of the file cache.  The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with `--cache-dir` or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by `--vfs-cache-mode`.\nThe higher the cache mode the more compatible rclone becomes at the\ncost of using disk space.\n\nNote that files are written back to the remote only when they are\nclosed and if they haven't been accessed for `--vfs-write-back`\nseconds. If rclone is quit or dies with files that haven't been\nuploaded, these will be uploaded next time rclone is run with the same\nflags.\n\nIf using `--vfs-cache-max-size` or `--vfs-cache-min-free-size` note\nthat the cache may exceed these quotas for two reasons. Firstly\nbecause it is only checked every `--vfs-cache-poll-interval`. Secondly\nbecause open files cannot be evicted from the cache. When\n`--vfs-cache-max-size` or `--vfs-cache-min-free-size` is exceeded,\nrclone will attempt to evict the least accessed files from the cache\nfirst. rclone will start with files that haven't been accessed for the\nlongest. This cache flushing strategy is efficient and more relevant\nfiles are likely to remain cached.\n\nThe `--vfs-cache-max-age` will evict files from the cache\nafter the set time since last access has passed. The default value of\n1 hour will start evicting files from cache that haven't been accessed\nfor 1 hour. When a cached file is accessed the 1 hour timer is reset to 0\nand will wait for 1 more hour before evicting. Specify the time with\nstandard notation, s, m, h, d, w .\n\nYou **should not** run two copies of rclone using the same VFS cache\nwith the same or overlapping remotes if using `--vfs-cache-mode > off`.\nThis can potentially cause data corruption if you do. You can work\naround this by giving each rclone its own cache hierarchy with\n`--cache-dir`. You don't need to worry about this if the remotes in\nuse don't overlap.\n\n### --vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote and write\ndirectly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n  * Files can't be opened for both read AND write\n  * Files opened for write can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files open for read with O_TRUNC will be opened write only\n  * Files open for write only will behave as if O_TRUNC was supplied\n  * Open modes O_APPEND, O_TRUNC are ignored\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk.  This means that files opened for\nwrite will be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n  * Files opened for write only can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files opened for write only will ignore O_APPEND, O_TRUNC\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from\nthe remote, write only and read/write files are buffered to disk\nfirst.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n### --vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone\nwill keep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to `--vfs-cache-mode` writes.\n\nWhen reading a file rclone will read `--buffer-size` plus\n`--vfs-read-ahead` bytes ahead.  The `--buffer-size` is buffered in memory\nwhereas the `--vfs-read-ahead` is buffered on disk.\n\nWhen using this mode it is recommended that `--buffer-size` is not set\ntoo large and `--vfs-read-ahead` is set large if required.\n\n**IMPORTANT** not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache\ndirectory is on a filesystem which doesn't support sparse files and it\nwill log an ERROR message if one is detected.\n\n### Fingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file\ncopy has changed relative to a remote file. Fingerprints are made\nfrom:\n\n- size\n- modification time\n- hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take\nan extra API call per object, or extra work per object).\n\nFor example `hash` is slow with the `local` and `sftp` backends as\nthey have to read the entire file and hash it, and `modtime` is slow\nwith the `s3`, `swift`, `ftp` and `qinqstor` backends because they\nneed to do an extra API call to fetch it.\n\nIf you use the `--vfs-fast-fingerprint` flag then rclone will not\ninclude the slow operations in the fingerprint. This makes the\nfingerprinting less accurate but much faster and will improve the\nopening time of cached files.\n\nIf you are running a vfs cache over `local`, `s3` or `swift` backends\nthen using this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of\nthe files in the cache may be invalidated and the files will need to\nbe downloaded again.\n\n## VFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the\nchunk specified.  This can reduce the used download quota for some\nremotes by requesting only chunks from the remote that are actually\nread, at the cost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the `--vfs-read-chunk-streams` parameter.\n\n### `--vfs-read-chunk-streams` == 0\n\nRclone will start reading a chunk of size `--vfs-read-chunk-size`,\nand then double the size for each read. When `--vfs-read-chunk-size-limit` is\nspecified, and greater than `--vfs-read-chunk-size`, the chunk size for each\nopen file will get doubled only until the specified value is reached. If the\nvalue is \"off\", which is the default, the limit is disabled and the chunk size\nwill grow indefinitely.\n\nWith `--vfs-read-chunk-size 100M` and `--vfs-read-chunk-size-limit 0`\nthe following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen `--vfs-read-chunk-size-limit 500M` is specified, the result would be\n0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.\n\nSetting `--vfs-read-chunk-size` to `0` or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n### `--vfs-read-chunk-streams` > 0\n\nRclone reads `--vfs-read-chunk-streams` chunks of size\n`--vfs-read-chunk-size` concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links\nor very high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n`--vfs-read-chunk-size` and `--vfs-read-chunk-streams` as these will\ndepend on the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be `--vfs-read-chunk-streams 16` and\n`--vfs-read-chunk-size 4M`. In testing with AWS S3 the performance\nscaled roughly as the `--vfs-read-chunk-streams` setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more `--vfs-read-chunk-streams` in order to\nget the throughput.\n\n## VFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the [chunked reading](#vfs-chunked-reading)\nfeature.\n\nIn particular S3 and Swift benefit hugely from the `--no-modtime` flag\n(or use `--use-server-modtime` for a slightly different effect) as each\nread of the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather\nthan seeking rclone will wait a short time for the in sequence read or\nwrite to come in. These flags only come into effect when not using an\non disk cache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (`--vfs-cache-mode` with value writes or full),\nthe global flag `--transfers` can be set to adjust the number of parallel uploads of\nmodified files from the cache (the related global flag `--checkers` has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\n## VFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only\nby case, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case used\nto create the file is preserved and available for programs to query.\nIt is not allowed for two files in the same directory to differ only by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to make macOS\nfile systems case-sensitive but that is not the default.\n\nThe `--vfs-case-insensitive` VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the remote\nas-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers\nto an existing file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the same\nname is not found but a name differing only by case exists, rclone will\ntransparently fixup the name. This fixup happens only when an existing file\nis requested. Case sensitivity of file names created anew by rclone is\ncontrolled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the target)\nmay differ from case sensitivity of a file system presented by rclone (the source).\nThe flag controls whether \"fixup\" is performed to satisfy the target.\n\nIf the flag is not provided on the command line, then its default value depends\non the operating system where rclone runs: \"true\" on Windows and macOS, \"false\"\notherwise. If the flag is provided without a value, then it is \"true\".\n\nThe `--no-unicode-normalization` flag controls whether a similar \"fixup\" is\nperformed for filenames that differ but are [canonically\nequivalent](https://en.wikipedia.org/wiki/Unicode_equivalence) with respect to\nunicode. Unicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms. It is\ntherefore highly recommended to keep the default of `false` on macOS, to avoid\nencoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the `--vfs-block-norm-dupes`\nflag allows hiding these duplicates. This comes with a performance tradeoff, as\nrclone will have to scan the entire directory for duplicates when listing a\ndirectory. For this reason, it is recommended to leave this disabled if not\nneeded. However, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the mount,\nand both will appear to be editable, however, editing either version will\nactually result in only the NFD version getting edited under the hood. `--vfs-block-\nnorm-dupes` prevents this confusion by detecting this scenario, hiding the\nduplicates, and logging an error, similar to how this is handled in `rclone\nsync`.\n\n## VFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing system.\nIt can be useful when those statistics cannot be read correctly automatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\n## Alternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running `df` on the\nfilesystem, then pass the flag `--vfs-used-is-size` to rclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to `rclone size`\nand compute the total used space itself.\n\n_WARNING._ Contrary to `rclone size`, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots of API\ncalls resulting in extra charges. Use it as a last resort and only with caching.\n\n## Auth Proxy\n\nIf you supply the parameter `--auth-proxy /path/to/program` then\nrclone will use that program to generate backends on the fly which\nthen are used to authenticate incoming requests.  This uses a simple\nJSON based protocol with input on STDIN and output on STDOUT.\n\n**PLEASE NOTE:** `--auth-proxy` and `--authorized-keys` cannot be used\ntogether, if `--auth-proxy` is set the authorized keys option will be\nignored.\n\nThere is an example program\n[bin/test_proxy.py](https://github.com/rclone/rclone/blob/master/bin/test_proxy.py)\nin the rclone source code.\n\nThe program's job is to take a `user` and `pass` on the input and turn\nthose into the config for a backend on STDOUT in JSON format.  This\nconfig will have any default parameters for the backend added, but it\nwon't use configuration from environment variables or command line\noptions - it is the job of the proxy program to make a complete\nconfig.\n\nThis config generated must have this extra parameter\n- `_root` - root to use for the backend\n\nAnd it may have this parameter\n- `_obscure` - comma separated strings for parameters to obscure\n\nIf password authentication was used by the client, input to the proxy\nprocess (on STDIN) would look similar to this:\n\n```\n{\n\t\"user\": \"me\",\n\t\"pass\": \"mypassword\"\n}\n```\n\nIf public-key authentication was used by the client, input to the\nproxy process (on STDIN) would look similar to this:\n\n```\n{\n\t\"user\": \"me\",\n\t\"public_key\": \"AAAAB3NzaC1yc2EAAAADAQABAAABAQDuwESFdAe14hVS6omeyX7edc...JQdf\"\n}\n```\n\nAnd as an example return this on STDOUT\n\n```\n{\n\t\"type\": \"sftp\",\n\t\"_root\": \"\",\n\t\"_obscure\": \"pass\",\n\t\"user\": \"me\",\n\t\"pass\": \"mypassword\",\n\t\"host\": \"sftp.example.com\"\n}\n```\n\nThis would mean that an SFTP backend would be created on the fly for\nthe `user` and `pass`/`public_key` returned in the output to the host given.  Note\nthat since `_obscure` is set to `pass`, rclone will obscure the `pass`\nparameter before creating the backend (which is required for sftp\nbackends).\n\nThe program can manipulate the supplied `user` in any way, for example\nto make proxy to many different sftp backends, you could make the\n`user` be `user@example.com` and then set the `host` to `example.com`\nin the output and the user to `user`. For security you'd probably want\nto restrict the `host` to a limited list.\n\nNote that an internal cache is keyed on `user` so only use that for\nconfiguration, don't use `pass` or `public_key`.  This also means that if a user's\npassword or public-key is changed the cache will need to expire (which takes 5 mins)\nbefore it takes effect.\n\nThis can be used to build general purpose proxies to any kind of\nbackend that rclone supports.  \n\n\n\n```\nrclone serve ftp remote:path [flags]\n```\n\n## Options\n\n```\n      --addr string                            IPaddress:Port or :Port to bind server to (default \"localhost:2121\")\n      --auth-proxy string                      A program to use to create the backend from the auth\n      --cert string                            TLS PEM key (concatenation of certificate and CA certificate)\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --file-perms FileMode                    File permissions (default 666)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for ftp\n      --key string                             TLS PEM Private key\n      --no-checksum                            Don't compare checksums on up/download\n      --no-modtime                             Don't read/write the modification time (can speed things up)\n      --no-seek                                Don't allow seeking in files\n      --pass string                            Password for authentication (empty value allow every password)\n      --passive-port string                    Passive port range to use (default \"30000-32000\")\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --public-ip string                       Public IP address to advertise for passive connections\n      --read-only                              Only allow read-only access\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --user string                            User name for authentication (default \"anonymous\")\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n## See Also\n\n* [rclone serve](https://rclone.org/commands/rclone_serve/)\t - Serve a remote over a protocol.\n\n# rclone serve http\n\nServe the remote over HTTP.\n\n## Synopsis\n\nRun a basic web server to serve a remote over HTTP.\nThis can be viewed in a web browser or you can make a remote of type\nhttp read from it.\n\nYou can use the filter flags (e.g. `--include`, `--exclude`) to control what\nis served.\n\nThe server will log errors.  Use `-v` to see access logs.\n\n`--bwlimit` will be respected for file transfers.  Use `--stats` to\ncontrol the stats printing.\n\n## Server options\n\nUse `--addr` to specify which IP address and port the server should\nlisten on, eg `--addr 1.2.3.4:8000` or `--addr :8080` to listen to all\nIPs.  By default it only listens on localhost.  You can use port\n:0 to let the OS choose an available port.\n\nIf you set `--addr` to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n\nYou can use a unix socket by setting the url to `unix:///path/to/socket`\nor just by using an absolute path name. Note that unix sockets bypass the\nauthentication - this is expected to be done with file system permissions.\n\n`--addr` may be repeated to listen on multiple IPs/ports/sockets.\nSocket activation, described further below, can also be used to accomplish the same.\n\n`--server-read-timeout` and `--server-write-timeout` can be used to\ncontrol the timeouts on the server.  Note that this is the total time\nfor a transfer.\n\n`--max-header-bytes` controls the maximum number of bytes the server will\naccept in the HTTP header.\n\n`--baseurl` controls the URL prefix that rclone serves from.  By default\nrclone will serve from the root.  If you used `--baseurl \"/rclone\"` then\nrclone would serve from a URL starting with \"/rclone/\".  This is\nuseful if you wish to proxy rclone serve.  Rclone automatically\ninserts leading and trailing \"/\" on `--baseurl`, so `--baseurl \"rclone\"`,\n`--baseurl \"/rclone\"` and `--baseurl \"/rclone/\"` are all treated\nidentically.\n\n### TLS (SSL)\n\nBy default this will serve over http.  If you want you can serve over\nhttps.  You will need to supply the `--cert` and `--key` flags.\nIf you wish to do client side certificate validation then you will need to\nsupply `--client-ca` also.\n\n`--cert` should be a either a PEM encoded certificate or a concatenation\nof that with the CA certificate.  `--key` should be the PEM encoded\nprivate key and `--client-ca` should be the PEM encoded client\ncertificate authority certificate.\n\n`--min-tls-version` is minimum TLS version that is acceptable. Valid\n  values are \"tls1.0\", \"tls1.1\", \"tls1.2\" and \"tls1.3\" (default\n  \"tls1.0\").\n\n## Socket activation\n\nInstead of the listening addresses specified above, rclone will listen to all\nFDs passed by the service manager, if any (and ignore any arguments passed by --addr`).\n\nThis allows rclone to be a socket-activated service.\nIt can be configured with .socket and .service unit files as described in\nhttps://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html\n\nSocket activation can be tested ad-hoc with the `systemd-socket-activate`command\n\n       systemd-socket-activate -l 8000 -- rclone serve\n\nThis will socket-activate rclone on the first connection to port 8000 over TCP.\n### Template\n\n`--template` allows a user to specify a custom markup template for HTTP\nand WebDAV serve functions.  The server exports the following markup\nto be used within the template to server pages:\n\n| Parameter   | Description |\n| :---------- | :---------- |\n| .Name       | The full path of a file/directory. |\n| .Title      | Directory listing of .Name |\n| .Sort       | The current sort used.  This is changeable via ?sort= parameter |\n|             | Sort Options: namedirfirst,name,size,time (default namedirfirst) |\n| .Order      | The current ordering used.  This is changeable via ?order= parameter |\n|             | Order Options: asc,desc (default asc) |\n| .Query      | Currently unused. |\n| .Breadcrumb | Allows for creating a relative navigation |\n|-- .Link     | The relative to the root link of the Text. |\n|-- .Text     | The Name of the directory. |\n| .Entries    | Information about a specific file/directory. |\n|-- .URL      | The 'url' of an entry.  |\n|-- .Leaf     | Currently same as 'URL' but intended to be 'just' the name. |\n|-- .IsDir    | Boolean for if an entry is a directory or not. |\n|-- .Size     | Size in Bytes of the entry. |\n|-- .ModTime  | The UTC timestamp of an entry. |\n\nThe server also makes the following functions available so that they can be used within the\ntemplate. These functions help extend the options for dynamic rendering of HTML. They can\nbe used to render HTML based on specific conditions.\n\n| Function   | Description |\n| :---------- | :---------- |\n| afterEpoch  | Returns the time since the epoch for the given time. |\n| contains    | Checks whether a given substring is present or not in a given string. |\n| hasPrefix   | Checks whether the given string begins with the specified prefix. |\n| hasSuffix   | Checks whether the given string end with the specified suffix. |\n\n### Authentication\n\nBy default this will serve files without needing a login.\n\nYou can either use an htpasswd file which can take lots of users, or\nset a single username and password with the `--user` and `--pass` flags.\n\nIf no static users are configured by either of the above methods, and client\ncertificates are required by the `--client-ca` flag passed to the server, the\nclient certificate common name will be considered as the username.\n\nUse `--htpasswd /path/to/htpasswd` to provide an htpasswd file.  This is\nin standard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication.  Bcrypt is recommended.\n\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.\n\nUse `--realm` to set the authentication realm.\n\nUse `--salt` to change the password hashing salt from the default.\n\n## VFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk\nfiling system.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the\nVFS layer has to deal with that. Because there is no one right way of\ndoing this there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info\nabout files and directories (but not the data) in memory.\n\n## VFS Directory Cache\n\nUsing the `--dir-cache-time` flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend. Changes made through the VFS will appear immediately or\ninvalidate the cache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web\ninterface or a different copy of rclone will only be picked up once\nthe directory cache expires if the backend configured does not support\npolling for changes. If the backend supports polling, changes will be\npicked up within the polling interval.\n\nYou can send a `SIGHUP` signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.  Assuming only one\nrclone instance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a [remote control](/rc) then you can use\nrclone rc to flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\n## VFS File Buffering\n\nThe `--buffer-size` flag determines the amount of memory,\nthat will be used to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file.  The\nbuffer will only use memory for data that is downloaded but not not\nyet read. If the buffer is empty, only a small amount of memory will\nbe used.\n\nThe maximum memory used by rclone for buffering can be up to\n`--buffer-size * open files`.\n\n## VFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file.  See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with `-vv` rclone will print the location of the file cache.  The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with `--cache-dir` or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by `--vfs-cache-mode`.\nThe higher the cache mode the more compatible rclone becomes at the\ncost of using disk space.\n\nNote that files are written back to the remote only when they are\nclosed and if they haven't been accessed for `--vfs-write-back`\nseconds. If rclone is quit or dies with files that haven't been\nuploaded, these will be uploaded next time rclone is run with the same\nflags.\n\nIf using `--vfs-cache-max-size` or `--vfs-cache-min-free-size` note\nthat the cache may exceed these quotas for two reasons. Firstly\nbecause it is only checked every `--vfs-cache-poll-interval`. Secondly\nbecause open files cannot be evicted from the cache. When\n`--vfs-cache-max-size` or `--vfs-cache-min-free-size` is exceeded,\nrclone will attempt to evict the least accessed files from the cache\nfirst. rclone will start with files that haven't been accessed for the\nlongest. This cache flushing strategy is efficient and more relevant\nfiles are likely to remain cached.\n\nThe `--vfs-cache-max-age` will evict files from the cache\nafter the set time since last access has passed. The default value of\n1 hour will start evicting files from cache that haven't been accessed\nfor 1 hour. When a cached file is accessed the 1 hour timer is reset to 0\nand will wait for 1 more hour before evicting. Specify the time with\nstandard notation, s, m, h, d, w .\n\nYou **should not** run two copies of rclone using the same VFS cache\nwith the same or overlapping remotes if using `--vfs-cache-mode > off`.\nThis can potentially cause data corruption if you do. You can work\naround this by giving each rclone its own cache hierarchy with\n`--cache-dir`. You don't need to worry about this if the remotes in\nuse don't overlap.\n\n### --vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote and write\ndirectly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n  * Files can't be opened for both read AND write\n  * Files opened for write can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files open for read with O_TRUNC will be opened write only\n  * Files open for write only will behave as if O_TRUNC was supplied\n  * Open modes O_APPEND, O_TRUNC are ignored\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk.  This means that files opened for\nwrite will be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n  * Files opened for write only can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files opened for write only will ignore O_APPEND, O_TRUNC\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from\nthe remote, write only and read/write files are buffered to disk\nfirst.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n### --vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone\nwill keep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to `--vfs-cache-mode` writes.\n\nWhen reading a file rclone will read `--buffer-size` plus\n`--vfs-read-ahead` bytes ahead.  The `--buffer-size` is buffered in memory\nwhereas the `--vfs-read-ahead` is buffered on disk.\n\nWhen using this mode it is recommended that `--buffer-size` is not set\ntoo large and `--vfs-read-ahead` is set large if required.\n\n**IMPORTANT** not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache\ndirectory is on a filesystem which doesn't support sparse files and it\nwill log an ERROR message if one is detected.\n\n### Fingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file\ncopy has changed relative to a remote file. Fingerprints are made\nfrom:\n\n- size\n- modification time\n- hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take\nan extra API call per object, or extra work per object).\n\nFor example `hash` is slow with the `local` and `sftp` backends as\nthey have to read the entire file and hash it, and `modtime` is slow\nwith the `s3`, `swift`, `ftp` and `qinqstor` backends because they\nneed to do an extra API call to fetch it.\n\nIf you use the `--vfs-fast-fingerprint` flag then rclone will not\ninclude the slow operations in the fingerprint. This makes the\nfingerprinting less accurate but much faster and will improve the\nopening time of cached files.\n\nIf you are running a vfs cache over `local`, `s3` or `swift` backends\nthen using this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of\nthe files in the cache may be invalidated and the files will need to\nbe downloaded again.\n\n## VFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the\nchunk specified.  This can reduce the used download quota for some\nremotes by requesting only chunks from the remote that are actually\nread, at the cost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the `--vfs-read-chunk-streams` parameter.\n\n### `--vfs-read-chunk-streams` == 0\n\nRclone will start reading a chunk of size `--vfs-read-chunk-size`,\nand then double the size for each read. When `--vfs-read-chunk-size-limit` is\nspecified, and greater than `--vfs-read-chunk-size`, the chunk size for each\nopen file will get doubled only until the specified value is reached. If the\nvalue is \"off\", which is the default, the limit is disabled and the chunk size\nwill grow indefinitely.\n\nWith `--vfs-read-chunk-size 100M` and `--vfs-read-chunk-size-limit 0`\nthe following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen `--vfs-read-chunk-size-limit 500M` is specified, the result would be\n0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.\n\nSetting `--vfs-read-chunk-size` to `0` or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n### `--vfs-read-chunk-streams` > 0\n\nRclone reads `--vfs-read-chunk-streams` chunks of size\n`--vfs-read-chunk-size` concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links\nor very high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n`--vfs-read-chunk-size` and `--vfs-read-chunk-streams` as these will\ndepend on the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be `--vfs-read-chunk-streams 16` and\n`--vfs-read-chunk-size 4M`. In testing with AWS S3 the performance\nscaled roughly as the `--vfs-read-chunk-streams` setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more `--vfs-read-chunk-streams` in order to\nget the throughput.\n\n## VFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the [chunked reading](#vfs-chunked-reading)\nfeature.\n\nIn particular S3 and Swift benefit hugely from the `--no-modtime` flag\n(or use `--use-server-modtime` for a slightly different effect) as each\nread of the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather\nthan seeking rclone will wait a short time for the in sequence read or\nwrite to come in. These flags only come into effect when not using an\non disk cache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (`--vfs-cache-mode` with value writes or full),\nthe global flag `--transfers` can be set to adjust the number of parallel uploads of\nmodified files from the cache (the related global flag `--checkers` has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\n## VFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only\nby case, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case used\nto create the file is preserved and available for programs to query.\nIt is not allowed for two files in the same directory to differ only by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to make macOS\nfile systems case-sensitive but that is not the default.\n\nThe `--vfs-case-insensitive` VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the remote\nas-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers\nto an existing file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the same\nname is not found but a name differing only by case exists, rclone will\ntransparently fixup the name. This fixup happens only when an existing file\nis requested. Case sensitivity of file names created anew by rclone is\ncontrolled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the target)\nmay differ from case sensitivity of a file system presented by rclone (the source).\nThe flag controls whether \"fixup\" is performed to satisfy the target.\n\nIf the flag is not provided on the command line, then its default value depends\non the operating system where rclone runs: \"true\" on Windows and macOS, \"false\"\notherwise. If the flag is provided without a value, then it is \"true\".\n\nThe `--no-unicode-normalization` flag controls whether a similar \"fixup\" is\nperformed for filenames that differ but are [canonically\nequivalent](https://en.wikipedia.org/wiki/Unicode_equivalence) with respect to\nunicode. Unicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms. It is\ntherefore highly recommended to keep the default of `false` on macOS, to avoid\nencoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the `--vfs-block-norm-dupes`\nflag allows hiding these duplicates. This comes with a performance tradeoff, as\nrclone will have to scan the entire directory for duplicates when listing a\ndirectory. For this reason, it is recommended to leave this disabled if not\nneeded. However, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the mount,\nand both will appear to be editable, however, editing either version will\nactually result in only the NFD version getting edited under the hood. `--vfs-block-\nnorm-dupes` prevents this confusion by detecting this scenario, hiding the\nduplicates, and logging an error, similar to how this is handled in `rclone\nsync`.\n\n## VFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing system.\nIt can be useful when those statistics cannot be read correctly automatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\n## Alternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running `df` on the\nfilesystem, then pass the flag `--vfs-used-is-size` to rclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to `rclone size`\nand compute the total used space itself.\n\n_WARNING._ Contrary to `rclone size`, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots of API\ncalls resulting in extra charges. Use it as a last resort and only with caching.\n\n## Auth Proxy\n\nIf you supply the parameter `--auth-proxy /path/to/program` then\nrclone will use that program to generate backends on the fly which\nthen are used to authenticate incoming requests.  This uses a simple\nJSON based protocol with input on STDIN and output on STDOUT.\n\n**PLEASE NOTE:** `--auth-proxy` and `--authorized-keys` cannot be used\ntogether, if `--auth-proxy` is set the authorized keys option will be\nignored.\n\nThere is an example program\n[bin/test_proxy.py](https://github.com/rclone/rclone/blob/master/bin/test_proxy.py)\nin the rclone source code.\n\nThe program's job is to take a `user` and `pass` on the input and turn\nthose into the config for a backend on STDOUT in JSON format.  This\nconfig will have any default parameters for the backend added, but it\nwon't use configuration from environment variables or command line\noptions - it is the job of the proxy program to make a complete\nconfig.\n\nThis config generated must have this extra parameter\n- `_root` - root to use for the backend\n\nAnd it may have this parameter\n- `_obscure` - comma separated strings for parameters to obscure\n\nIf password authentication was used by the client, input to the proxy\nprocess (on STDIN) would look similar to this:\n\n```\n{\n\t\"user\": \"me\",\n\t\"pass\": \"mypassword\"\n}\n```\n\nIf public-key authentication was used by the client, input to the\nproxy process (on STDIN) would look similar to this:\n\n```\n{\n\t\"user\": \"me\",\n\t\"public_key\": \"AAAAB3NzaC1yc2EAAAADAQABAAABAQDuwESFdAe14hVS6omeyX7edc...JQdf\"\n}\n```\n\nAnd as an example return this on STDOUT\n\n```\n{\n\t\"type\": \"sftp\",\n\t\"_root\": \"\",\n\t\"_obscure\": \"pass\",\n\t\"user\": \"me\",\n\t\"pass\": \"mypassword\",\n\t\"host\": \"sftp.example.com\"\n}\n```\n\nThis would mean that an SFTP backend would be created on the fly for\nthe `user` and `pass`/`public_key` returned in the output to the host given.  Note\nthat since `_obscure` is set to `pass`, rclone will obscure the `pass`\nparameter before creating the backend (which is required for sftp\nbackends).\n\nThe program can manipulate the supplied `user` in any way, for example\nto make proxy to many different sftp backends, you could make the\n`user` be `user@example.com` and then set the `host` to `example.com`\nin the output and the user to `user`. For security you'd probably want\nto restrict the `host` to a limited list.\n\nNote that an internal cache is keyed on `user` so only use that for\nconfiguration, don't use `pass` or `public_key`.  This also means that if a user's\npassword or public-key is changed the cache will need to expire (which takes 5 mins)\nbefore it takes effect.\n\nThis can be used to build general purpose proxies to any kind of\nbackend that rclone supports.  \n\n\n\n```\nrclone serve http remote:path [flags]\n```\n\n## Options\n\n```\n      --addr stringArray                       IPaddress:Port, :Port or [unix://]/path/to/socket to bind server to (default [127.0.0.1:8080])\n      --allow-origin string                    Origin which cross-domain request (CORS) can be executed from\n      --auth-proxy string                      A program to use to create the backend from the auth\n      --baseurl string                         Prefix for URLs - leave blank for root\n      --cert string                            TLS PEM key (concatenation of certificate and CA certificate)\n      --client-ca string                       Client certificate authority to verify clients with\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --file-perms FileMode                    File permissions (default 666)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for http\n      --htpasswd string                        A htpasswd file - if not provided no authentication is done\n      --key string                             TLS PEM Private key\n      --max-header-bytes int                   Maximum size of request header (default 4096)\n      --min-tls-version string                 Minimum TLS version that is acceptable (default \"tls1.0\")\n      --no-checksum                            Don't compare checksums on up/download\n      --no-modtime                             Don't read/write the modification time (can speed things up)\n      --no-seek                                Don't allow seeking in files\n      --pass string                            Password for authentication\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --realm string                           Realm for authentication\n      --salt string                            Password hashing salt (default \"dlPL2MqE\")\n      --server-read-timeout Duration           Timeout for server reading data (default 1h0m0s)\n      --server-write-timeout Duration          Timeout for server writing data (default 1h0m0s)\n      --template string                        User-specified template\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --user string                            User name for authentication\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n## See Also\n\n* [rclone serve](https://rclone.org/commands/rclone_serve/)\t - Serve a remote over a protocol.\n\n# rclone serve nfs\n\nServe the remote as an NFS mount\n\n## Synopsis\n\nCreate an NFS server that serves the given remote over the network.\n\t\nThis implements an NFSv3 server to serve any rclone remote via NFS.\n\nThe primary purpose for this command is to enable the [mount\ncommand](https://rclone.org/commands/rclone_mount/) on recent macOS versions where\ninstalling FUSE is very cumbersome.\n\nThis server does not implement any authentication so any client will be\nable to access the data. To limit access, you can use `serve nfs` on\nthe loopback address or rely on secure tunnels (such as SSH) or use\nfirewalling.\n\nFor this reason, by default, a random TCP port is chosen and the\nloopback interface is used for the listening address by default;\nmeaning that it is only available to the local machine. If you want\nother machines to access the NFS mount over local network, you need to\nspecify the listening address and port using the `--addr` flag.\n\nModifying files through the NFS protocol requires VFS caching. Usually\nyou will need to specify `--vfs-cache-mode` in order to be able to\nwrite to the mountpoint (`full` is recommended). If you don't specify\nVFS cache mode, the mount will be read-only.\n\n`--nfs-cache-type` controls the type of the NFS handle cache. By\ndefault this is `memory` where new handles will be randomly allocated\nwhen needed. These are stored in memory. If the server is restarted\nthe handle cache will be lost and connected NFS clients will get stale\nhandle errors.\n\n`--nfs-cache-type disk` uses an on disk NFS handle cache. Rclone\nhashes the path of the object and stores it in a file named after the\nhash. These hashes are stored on disk the directory controlled by\n`--cache-dir` or the exact directory may be specified with\n`--nfs-cache-dir`. Using this means that the NFS server can be\nrestarted at will without affecting the connected clients.\n\n`--nfs-cache-type symlink` is similar to `--nfs-cache-type disk` in\nthat it uses an on disk cache, but the cache entries are held as\nsymlinks. Rclone will use the handle of the underlying file as the NFS\nhandle which improves performance. This sort of cache can't be backed\nup and restored as the underlying handles will change. This is Linux\nonly.\n\n`--nfs-cache-handle-limit` controls the maximum number of cached NFS\nhandles stored by the caching handler. This should not be set too low\nor you may experience errors when trying to access files. The default\nis `1000000`, but consider lowering this limit if the server's system\nresource usage causes problems. This is only used by the `memory` type\ncache.\n\nTo serve NFS over the network use following command:\n\n    rclone serve nfs remote: --addr 0.0.0.0:$PORT --vfs-cache-mode=full\n\nThis specifies a port that can be used in the mount command. To mount\nthe server under Linux/macOS, use the following command:\n    \n    mount -t nfs -o port=$PORT,mountport=$PORT,tcp $HOSTNAME:/ path/to/mountpoint\n\nWhere `$PORT` is the same port number used in the `serve nfs` command\nand `$HOSTNAME` is the network address of the machine that `serve nfs`\nwas run on.\n\nThis command is only available on Unix platforms.\n\n## VFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk\nfiling system.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the\nVFS layer has to deal with that. Because there is no one right way of\ndoing this there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info\nabout files and directories (but not the data) in memory.\n\n## VFS Directory Cache\n\nUsing the `--dir-cache-time` flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend. Changes made through the VFS will appear immediately or\ninvalidate the cache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web\ninterface or a different copy of rclone will only be picked up once\nthe directory cache expires if the backend configured does not support\npolling for changes. If the backend supports polling, changes will be\npicked up within the polling interval.\n\nYou can send a `SIGHUP` signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.  Assuming only one\nrclone instance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a [remote control](/rc) then you can use\nrclone rc to flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\n## VFS File Buffering\n\nThe `--buffer-size` flag determines the amount of memory,\nthat will be used to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file.  The\nbuffer will only use memory for data that is downloaded but not not\nyet read. If the buffer is empty, only a small amount of memory will\nbe used.\n\nThe maximum memory used by rclone for buffering can be up to\n`--buffer-size * open files`.\n\n## VFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file.  See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with `-vv` rclone will print the location of the file cache.  The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with `--cache-dir` or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by `--vfs-cache-mode`.\nThe higher the cache mode the more compatible rclone becomes at the\ncost of using disk space.\n\nNote that files are written back to the remote only when they are\nclosed and if they haven't been accessed for `--vfs-write-back`\nseconds. If rclone is quit or dies with files that haven't been\nuploaded, these will be uploaded next time rclone is run with the same\nflags.\n\nIf using `--vfs-cache-max-size` or `--vfs-cache-min-free-size` note\nthat the cache may exceed these quotas for two reasons. Firstly\nbecause it is only checked every `--vfs-cache-poll-interval`. Secondly\nbecause open files cannot be evicted from the cache. When\n`--vfs-cache-max-size` or `--vfs-cache-min-free-size` is exceeded,\nrclone will attempt to evict the least accessed files from the cache\nfirst. rclone will start with files that haven't been accessed for the\nlongest. This cache flushing strategy is efficient and more relevant\nfiles are likely to remain cached.\n\nThe `--vfs-cache-max-age` will evict files from the cache\nafter the set time since last access has passed. The default value of\n1 hour will start evicting files from cache that haven't been accessed\nfor 1 hour. When a cached file is accessed the 1 hour timer is reset to 0\nand will wait for 1 more hour before evicting. Specify the time with\nstandard notation, s, m, h, d, w .\n\nYou **should not** run two copies of rclone using the same VFS cache\nwith the same or overlapping remotes if using `--vfs-cache-mode > off`.\nThis can potentially cause data corruption if you do. You can work\naround this by giving each rclone its own cache hierarchy with\n`--cache-dir`. You don't need to worry about this if the remotes in\nuse don't overlap.\n\n### --vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote and write\ndirectly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n  * Files can't be opened for both read AND write\n  * Files opened for write can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files open for read with O_TRUNC will be opened write only\n  * Files open for write only will behave as if O_TRUNC was supplied\n  * Open modes O_APPEND, O_TRUNC are ignored\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk.  This means that files opened for\nwrite will be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n  * Files opened for write only can't be seeked\n  * Existing files opened for write must have O_TRUNC set\n  * Files opened for write only will ignore O_APPEND, O_TRUNC\n  * If an upload fails it can't be retried\n\n### --vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from\nthe remote, write only and read/write files are buffered to disk\nfirst.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n### --vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone\nwill keep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to `--vfs-cache-mode` writes.\n\nWhen reading a file rclone will read `--buffer-size` plus\n`--vfs-read-ahead` bytes ahead.  The `--buffer-size` is buffered in memory\nwhereas the `--vfs-read-ahead` is buffered on disk.\n\nWhen using this mode it is recommended that `--buffer-size` is not set\ntoo large and `--vfs-read-ahead` is set large if required.\n\n**IMPORTANT** not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache\ndirectory is on a filesystem which doesn't support sparse files and it\nwill log an ERROR message if one is detected.\n\n### Fingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file\ncopy has changed relative to a remote file. Fingerprints are made\nfrom:\n\n- size\n- modification time\n- hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take\nan extra API call per object, or extra work per object).\n\nFor example `hash` is slow with the `local` and `sftp` backends as\nthey have to read the entire file and hash it, and `modtime` is slow\nwith the `s3`, `swift`, `ftp` and `qinqstor` backends because they\nneed to do an extra API call to fetch it.\n\nIf you use the `--vfs-fast-fingerprint` flag then rclone will not\ninclude the slow operations in the fingerprint. This makes the\nfingerprinting less accurate but much faster and will improve the\nopening time of cached files.\n\nIf you are running a vfs cache over `local`, `s3` or `swift` backends\nthen using this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of\nthe files in the cache may be invalidated and the files will need to\nbe downloaded again.\n\n## VFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the\nchunk specified.  This can reduce the used download quota for some\nremotes by requesting only chunks from the remote that are actually\nread, at the cost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the `--vfs-read-chunk-streams` parameter.\n\n### `--vfs-read-chunk-streams` == 0\n\nRclone will start reading a chunk of size `--vfs-read-chunk-size`,\nand then double the size for each read. When `--vfs-read-chunk-size-limit` is\nspecified, and greater than `--vfs-read-chunk-size`, the chunk size for each\nopen file will get doubled only until the specified value is reached. If the\nvalue is \"off\", which is the default, the limit is disabled and the chunk size\nwill grow indefinitely.\n\nWith `--vfs-read-chunk-size 100M` and `--vfs-read-chunk-size-limit 0`\nthe following parts will be downloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen `--vfs-read-chunk-size-limit 500M` is specified, the result would be\n0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so on.\n\nSetting `--vfs-read-chunk-size` to `0` or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n### `--vfs-read-chunk-streams` > 0\n\nRclone reads `--vfs-read-chunk-streams` chunks of size\n`--vfs-read-chunk-size` concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links\nor very high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n`--vfs-read-chunk-size` and `--vfs-read-chunk-streams` as these will\ndepend on the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be `--vfs-read-chunk-streams 16` and\n`--vfs-read-chunk-size 4M`. In testing with AWS S3 the performance\nscaled roughly as the `--vfs-read-chunk-streams` setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more `--vfs-read-chunk-streams` in order to\nget the throughput.\n\n## VFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the [chunked reading](#vfs-chunked-reading)\nfeature.\n\nIn particular S3 and Swift benefit hugely from the `--no-modtime` flag\n(or use `--use-server-modtime` for a slightly different effect) as each\nread of the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather\nthan seeking rclone will wait a short time for the in sequence read or\nwrite to come in. These flags only come into effect when not using an\non disk cache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (`--vfs-cache-mode` with value writes or full),\nthe global flag `--transfers` can be set to adjust the number of parallel uploads of\nmodified files from the cache (the related global flag `--checkers` has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\n## VFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only\nby case, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case used\nto create the file is preserved and available for programs to query.\nIt is not allowed for two files in the same directory to differ only by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to make macOS\nfile systems case-sensitive but that is not the default.\n\nThe `--vfs-case-insensitive` VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the remote\nas-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers\nto an existing file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the same\nname is not found but a name differing only by case exists, rclone will\ntransparently fixup the name. This fixup happens only when an existing file\nis requested. Case sensitivity of file names created anew by rclone is\ncontrolled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the target)\nmay differ from case sensitivity of a file system presented by rclone (the source).\nThe flag controls whether \"fixup\" is performed to satisfy the target.\n\nIf the flag is not provided on the command line, then its default value depends\non the operating system where rclone runs: \"true\" on Windows and macOS, \"false\"\notherwise. If the flag is provided without a value, then it is \"true\".\n\nThe `--no-unicode-normalization` flag controls whether a similar \"fixup\" is\nperformed for filenames that differ but are [canonically\nequivalent](https://en.wikipedia.org/wiki/Unicode_equivalence) with respect to\nunicode. Unicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms. It is\ntherefore highly recommended to keep the default of `false` on macOS, to avoid\nencoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the `--vfs-block-norm-dupes`\nflag allows hiding these duplicates. This comes with a performance tradeoff, as\nrclone will have to scan the entire directory for duplicates when listing a\ndirectory. For this reason, it is recommended to leave this disabled if not\nneeded. However, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the mount,\nand both will appear to be editable, however, editing either version will\nactually result in only the NFD version getting edited under the hood. `--vfs-block-\nnorm-dupes` prevents this confusion by detecting this scenario, hiding the\nduplicates, and logging an error, similar to how this is handled in `rclone\nsync`.\n\n## VFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing system.\nIt can be useful when those statistics cannot be read correctly automatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\n## Alternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running `df` on the\nfilesystem, then pass the flag `--vfs-used-is-size` to rclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to `rclone size`\nand compute the total used space itself.\n\n_WARNING._ Contrary to `rclone size`, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots of API\ncalls resulting in extra charges. Use it as a last resort and only with caching.\n\n\n\n```\nrclone serve nfs remote:path [flags]\n```\n\n## Options\n\n```\n      --addr string                            IPaddress:Port or :Port to bind server to\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --file-perms FileMode                    File permissions (default 666)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for nfs\n      --nfs-cache-dir string                   The directory the NFS handle cache will use if set\n      --nfs-cache-handle-limit int             max file handles cached simultaneously (min 5) (default 1000000)\n      --nfs-cache-type memory|disk|symlink     Type of NFS handle cache to use (default memory)\n      --no-checksum                            Don't compare checksums on up/download\n      --no-modtime                             Don't read/write the modification time (can speed things up)\n      --no-seek                                Don't allow seeking in files\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n```\n\nOptions shared with other commands are described next.\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n### Filter Options\n\nFlags for filtering directory listings\n\n```\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n```\n\n## See Also\n\n* [rclone serve](https://rclone.org/commands/rclone_serve/)\t - Serve a remote over a protocol.\n\n# rclone serve restic\n\nServe the remote for restic's REST API.\n\n## Synopsis\n\nRun a basic web server to serve a remote over restic's REST backend\nAPI over HTTP.  This allows restic to use rclone as a data storage\nmechanism for cloud providers that restic does not support directly.\n\n[Restic](https://restic.net/) is a command-line program for doing\nbackups.\n\nThe server will log errors.  Use -v to see access logs.\n\n`--bwlimit` will be respected for file transfers.\nUse `--stats` to control the stats printing.\n\n## Setting up rclone for use by restic ###\n\nFirst [set up a remote for your chosen cloud provider](https://rclone.org/docs/#configure).\n\nOnce you have set up the remote, check it is working with, for example\n\"rclone lsd remote:\".  You may have called the remote something other\nthan \"remote:\" - just substitute whatever you called it in the\nfollowing instructions.\n\nNow start the rclone restic server\n\n    rclone serve restic -v remote:backup\n\nWhere you can replace \"backup\" in the above by whatever path in the\nremote you wish to use.\n\nBy default this will serve on \"localhost:8080\" you can change this\nwith use of the `--addr` flag.\n\nYou might wish to start this server on boot.\n\nAdding `--cache-objects=false` will cause rclone to stop caching objects\nreturned from the List call. Caching is normally desirable as it speeds\nup downloading objects, saves transactions and uses very little memory.\n\n## Setting up restic to use rclone ###\n\nNow you can [follow the restic\ninstructions](http://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#rest-server)\non setting up restic.\n\nNote that you will need restic 0.8.2 or later to interoperate with\nrclone.\n\nFor the example above you will want to use \"http://localhost:8080/\" as\nthe URL for the REST server.\n\nFor example:\n\n    $ export RESTIC_REPOSITORY=rest:http://localhost:8080/\n    $ export RESTIC_PASSWORD=yourpassword\n    $ restic init\n    created restic backend 8b1a4b56ae at rest:http://localhost:8080/\n\n    Please note that knowledge of your password is required to access\n    the repository. Losing your password means that your data is\n    irrecoverably lost.\n    $ restic backup /path/to/files/to/backup\n    scan [/path/to/files/to/backup]\n    scanned 189 directories, 312 files in 0:00\n    [0:00] 100.00%  38.128 MiB / 38.128 MiB  501 / 501 items  0 errors  ETA 0:00\n    duration: 0:00\n    snapshot 45c8fdd8 saved\n\n### Multiple repositories ####\n\nNote that you can use the endpoint to host multiple repositories.  Do\nthis by adding a directory name or path after the URL.  Note that\nthese **must** end with /.  Eg\n\n    $ export RESTIC_REPOSITORY=rest:http://localhost:8080/user1repo/\n    # backup user1 stuff\n    $ export RESTIC_REPOSITORY=rest:http://localhost:8080/user2repo/\n    # backup user2 stuff\n\n### Private repositories ####\n\nThe`--private-repos` flag can be used to limit users to repositories starting\nwith a path of `/<username>/`.\n\n## Server options\n\nUse `--addr` to specify which IP address and port the server should\nlisten on, eg `--addr 1.2.3.4:8000` or `--addr :8080` to listen to all\nIPs.  By default it only listens on localhost.  You can use port\n:0 to let the OS choose an available port.\n\nIf you set `--addr` to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n\nYou can use a unix socket by setting the url to `unix:///path/to/socket`\nor just by using an absolute path name. Note that unix sockets bypass the\nauthentication - this is expected to be done with file system permissions.\n\n`--addr` may be repeated to listen on multiple IPs/ports/sockets.\nSocket activation, described further below, can also be used to accomplish the same.\n\n`--server-read-timeout` and `--server-write-timeout` can be used to\ncontrol the timeouts on the server.  Note that this is the total time\nfor a transfer.\n\n`--max-header-bytes` controls the maximum number of bytes the server will\naccept in the HTTP header.\n\n`--baseurl` controls the URL prefix that rclone serves from.  By default\nrclone will serve from the root.  If you used `--baseurl \"/rclone\"` then\nrclone would serve from a URL starting with \"/rclone/\".  This is\nuseful if you wish to proxy rclone serve.  Rclone automatically\ninserts leading and trailing \"/\" on `--baseurl`, so `--baseurl \"rclone\"`,\n`--baseurl \"/rclone\"` and `--baseurl \"/rclone/\"` are all treated\nidentically.\n\n### TLS (SSL)\n\nBy default this will serve over http.  If you want you can serve over\nhttps.  You will need to supply the `--cert` and `--key` flags.\nIf you wish to do client side certificate validation then you will need to\nsupply `--client-ca` also.\n\n`--cert` should be a either a PEM encoded certificate or a concatenation\nof that with the CA certificate.  `--key` should be the PEM encoded\nprivate key and `--client-ca` should be the PEM encoded client\ncertificate authority certificate.\n\n`--min-tls-version` is minimum TLS version that is acceptable. Valid\n  values are \"tls1.0\", \"tls1.1\", \"tls1.2\" and \"tls1.3\" (default\n  \"tls1.0\").\n\n## Socket activation\n\nInstead of the listening addresses specified above, rclone will listen to all\nFDs passed by the service manager, if any (and ignore any arguments passed by --addr`).\n\nThis allows rclone to be a socket-activated service.\nIt can be configured with .socket and .service unit files as described in\nhttps://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html\n\nSocket activation can be tested ad-hoc with the `systemd-socket-activate`command\n\n       systemd-socket-activate -l 8000 -- rclone serve\n\nThis will socket-activate rclone on the first connection to port 8000 over TCP.\n### Authentication\n\nBy default this will serve files without needing a login.\n\nYou can either use an htpasswd file which can take lots of users, or\nset a single username and password with the `--user` and `--pass` flags.\n\nIf no static users are configured by either of the above methods, and client\ncertificates are required by the `--client-ca` flag passed to the server, the\nclient certificate common name will be considered as the username.\n\nUse `--htpasswd /path/to/htpasswd` to provide an htpasswd file.  This is\nin standard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication.  Bcrypt is recommended.\n\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.\n\nUse `--realm` to set the authentication realm.\n\nUse `--salt` to change the password hashing salt from the default.\n\n\n\n```\nrclone serve restic remote:path [flags]\n```\n\n## Options\n\n```\n      --addr stringArray                IPaddress:Port, :Port or [unix://]/path/to/socket to bind server to (default [127.0.0.1:8080])\n      --allow-origin string             Origin which cross-domain request (CORS) can be executed from\n      --append-only                     Disallow deletion of repository data\n      --baseurl string                  Prefix for URLs - leave blank for root\n      --cache-objects                   Cache listed objects (default true)\n      --cert string                     TLS PEM key (concatenation of certificate and CA certificate)\n      --client-ca string                Client certificate authority to verify clients with\n  -h, --help                            help for restic\n      --htpasswd string                 A htpasswd file - if not provided no authentication is done\n      --key string                      TLS PEM Private key\n      --max-header-bytes int            Maximum size of request header (default 4096)\n      --min-tls-version string          Minimum TLS version that is acceptable (default \"tls1.0\")\n      --pass string                     Password for authentication\n      --private-repos                   Users can only access their private repo\n      --realm string                    Realm for authentication\n      --salt string                     Password hashing salt (default \"dlPL2MqE\")\n      --server-read-timeout Duration    Timeout for server reading data (default 1h0m0s)\n      --server-write-timeout Duration   Timeout for server writing data (default 1h0m0s)\n      --stdio                           Run an HTTP2 server on stdin/stdout\n      --user string                     User name for authentication\n```\n\nSee the [global flags page](https://rclone.org/flags/) for global options not listed here.\n\n## See Also\n\n* [rclone serve](https://rclone.org/commands/rclone_serve/)\t - Serve a remote over a protocol.\n\n# rclone serve s3\n\nServe remote:path over s3.\n\n## Synopsis\n\n`serve s3` implements a basic s3 server that serves a remote via s3.\nThis can be viewed with an s3 client, or you can make an [s3 type\nremote](https://rclone.org/s3/) to read and write to it with rclone.\n\n`serve s3` is considered **Experimental** so use with care.\n\nS3 server supports Signature Version 4 authentication. Just use\n`--auth-key accessKey,secretKey` and set the `Authorization`\nheader correctly in the request. (See the [AWS\ndocs](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html)).\n\n`--auth-key` can be repeated for multiple auth pairs. If\n`--auth-key` is not provided then `serve s3` will allow anonymous\naccess.\n\nPlease note that some clients may require HTTPS endpoints. See [the\nSSL docs](#ssl-tls) for more information.\n\nThis command uses the [VFS directory cache](#vfs-virtual-file-system).\nAll the functionality will work with `--vfs-cache-mode off`. Using\n`--vfs-cache-mode full` (or `writes`) can be used to cache objects\nlocally to improve performance.\n\nUse `--force-path-style=false` if you want to use the bucket name as a\npart of the hostname (such as mybucket.local)\n\nUse `--etag-hash` if you want to change the hash uses for the `ETag`.\nNote that using anything other than `MD5` (the default) is likely to\ncause problems for S3 clients which rely on the Etag being the MD5.\n\n## Quickstart\n\nFor a simple set up, to serve `remote:path` over s3, run the server\nlike this:\n\n```\nrclone serve s3 --auth-key ACCESS_KEY_ID,SECRET_ACCESS_KEY remote:path\n```\n\nFor example, to use a simple folder in the filesystem, run the server\nwith a command like this:\n\n```\nrclone serve s3 --auth-key ACCESS_KEY_ID,SECRET_ACCESS_KEY local:/path/to/folder\n```\n\nThe `rclone.conf` for the server could look like this:\n\n```\n[local]\ntype = local\n```\n\nThe `local` configuration is optional though. If you run the server with a\n`remote:path` like `/path/to/folder` (without the `local:` prefix and without an\n`rclone.conf` file), rclone will fall back to a default configuration, which\nwill be visible as a warning in the logs. But it will run nonetheless.\n\nThis will be compatible with an rclone (client) remote configuration which\nis defined like this:\n\n```\n[serves3]\ntype = s3\nprovider = Rclone\nendpoint = http://127.0.0.1:8080/\naccess_key_id = ACCESS_KEY_ID\nsecret_access_key = SECRET_ACCESS_KEY\nuse_multipart_uploads = false\n```\n\nNote that setting `disable_multipart_uploads = true` is to work around\n[a bug](#bugs) which will be fixed in due course.\n\n## Bugs\n\nWhen uploading multipart files `serve s3` holds all the parts in\nmemory (see [#7453](https://github.com/rclone/rclone/issues/7453)).\nThis is a limitaton of the library rclone uses for serving S3 and will\nhopefully be fixed at some point.\n\nMultipart server side copies do not work (see\n[#7454](https://github.com/rclone/rclone/issues/7454)). These take a\nvery long time and eventually fail. The default threshold for\nmultipart server side copies is 5G which is the maximum it can be, so\nfiles above this side will fail to be server side copied.\n\nFor a current list of `serve s3` bugs see the [serve\ns3](https://github.com/rclone/rclone/labels/serve%20s3) bug category\non GitHub.\n\n## Limitations\n\n`serve s3` will treat all directories in the root as buckets and\nignore all files in the root. You can use `CreateBucket` to create\nfolders under the root, but you can't create empty folders under other\nfolders not in the root.\n\nWhen using `PutObject` or `DeleteObject`, rclone will automatically\ncreate or clean up empty folders. If you don't want to clean up empty\nfolders automatically, use `--no-cleanup`.\n\nWhen using `ListObjects`, rclone will use `/` when the delimiter is\nempty. This reduces backend requests with no effect on most\noperations, but if the delimiter is something other than `/` and\nempty, rclone will do a full recursive search of the backend, which\ncan take some time.\n\nVersioning is not currently supported.\n\nMetadata will only be saved in memory other than the rclone `mtime`\nmetadata which will be set as the modification time of the file.\n\n## Supported operations\n\n`serve s3` currently supports the following operations.\n\n- Bucket\n    - `ListBuckets`\n    - `CreateBucket`\n    - `DeleteBucket`\n- Object\n    - `HeadObject`\n    - `ListObjects`\n    - `GetObject`\n    - `PutObject`\n    - `DeleteObject`\n    - `DeleteObjects`\n    - `CreateMultipartUpload`\n    - `CompleteMultipartUpload`\n    - `AbortMultipartUpload`\n    - `CopyObject`\n    - `UploadPart`\n\nOther operations will return error `Unimplemented`.\n\n### Authentication\n\nBy default this will serve files without needing a login.\n\nYou can either use an htpasswd file which can take lots of users, or\nset a single username and password with the `--user` and `--pass` flags.\n\nIf no static users are configured by either of the above methods, and client\ncertificates are required by the `--client-ca` flag passed to the server, the\nclient certificate common name will be considered as the username.\n\nUse `--htpasswd /path/to/htpasswd` to provide an htpasswd file.  This is\nin standard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication.  Bcrypt is recommended.\n\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.\n\nUse `--realm` to set the authentication realm.\n\nUse `--salt` to change the password hashing salt from the default.\n\n## Server options\n\nUse `--addr` to specify which IP address and port the server should\nlisten on, eg `--addr 1.2.3.4:8000` or `--addr :8080` to listen to all\nIPs.  By default it only listens on localhost.  You can use port\n:0 to let the OS choose an available port.\n\nIf you set `--addr` to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n\nYou can use a unix socket by setting the url to `unix:///path/to/socket`\nor just by using an absolute path name. Note that unix sockets bypass the\nauthentication - this is expected to be done with file system permissions.\n\n`--addr` may be repeated to listen on multiple IPs/ports/sockets.\nSocket activation, described further below, can also be used to accomplish the same.\n\n`--server-read-timeout` and `--server-write-timeout` can be used to\ncontrol the timeouts on the server.  Note that this is the total time\nfor a transfer.\n\n`--max-header-bytes` controls the maximum number of bytes the server will\naccept in the HTTP header.\n\n`--baseurl` controls the URL prefix that rclone serves from.  By default\nrclone will serve from the root.  If you used `--baseurl \"/rclone\"` then\nrclone would serve from a URL starting with \"/rclone/\".  This is\nuseful if you wish to proxy rclone serve.  Rclone automatically\ninserts leading and trailing \"/\" on `--baseurl`, so `--baseurl \"rclone\"`,\n`--baseurl \"/rclone\"` and `--baseurl \"/rclone/\"` are all treated\nidentically.\n\n### TLS (SSL)\n\nBy default this will serve over http.  If you want you can serve over\nhttps.  You will need to supply the `--cert` and `--key` flags.\nIf you wish to do client side certificate validation then you will need to\nsupply `--client-ca` also.\n\n`--cert` should be a either a PEM encoded certificate or a concatenation\nof that with the CA certificate.  `--key` should be the PEM encoded\nprivate key and `--client-ca` should be the PEM encoded client\ncertificate authority certificate.\n\n`--min-tls-version` is minimum TLS version that is acceptable. Valid\n  values are \"tls1.0\", \"tls1.1\", \"tls1.2\" and \"tls1.3\" (default\n  \"tls1.0\").\n\n## Socket activation\n\nInstead of the listening addresses specified above, rclone will listen to all\nFDs passed by the service manager, if any (and ignore any arguments passed by --addr`).\n\nThis allows rclone to be a socket-activated service.\nIt can be configured with .socket and .service unit files as described in\nhttps://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html\n\nSocket activation can be tested ad-hoc with the `systemd-socket-activate`command\n\n       systemd-socket-activate -l 8000 -- rclone serve\n\nThis will socket-activate rclone on the first connection to port 8000 over TCP.\n## VFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk\nfiling system.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the\nVFS layer has to deal with that. Because there is no one right way of\ndoing this there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info\nabout files and directories (but not the data) in memory.\n\n## VFS Directory Cache\n\nUsing the `--dir-cache-time` flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend. Changes made through the VFS will appear immediately or\ninvalidate the cache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web\ninterface or a different copy of rclone will only be picked up once\nthe directory cache expires if the backend configured does not support\npolling for changes. If the backend supports polling, changes will be\npicked up within the polling interval.\n\nYou can send a `SIGHUP` signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.  Assuming only one\nrclone instance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof"
        },
        {
          "name": "MANUAL.txt",
          "type": "blob",
          "size": 2285.9404296875,
          "content": "rclone(1) User Manual\nNick Craig-Wood\nSep 08, 2024\n\nRclone syncs your files to cloud storage\n\n-   About rclone\n-   What can rclone do for you?\n-   What features does rclone have?\n-   What providers does rclone support?\n-   Download\n-   Install\n-   Donate.\n\nAbout rclone\n\nRclone is a command-line program to manage files on cloud storage. It is\na feature-rich alternative to cloud vendors' web storage interfaces.\nOver 70 cloud storage products support rclone including S3 object\nstores, business & consumer file storage services, as well as standard\ntransfer protocols.\n\nRclone has powerful cloud equivalents to the unix commands rsync, cp,\nmv, mount, ls, ncdu, tree, rm, and cat. Rclone's familiar syntax\nincludes shell pipeline support, and --dry-run protection. It is used at\nthe command line, in scripts or via its API.\n\nUsers call rclone \"The Swiss army knife of cloud storage\", and\n\"Technology indistinguishable from magic\".\n\nRclone really looks after your data. It preserves timestamps and\nverifies checksums at all times. Transfers over limited bandwidth;\nintermittent connections, or subject to quota can be restarted, from the\nlast good file transferred. You can check the integrity of your files.\nWhere possible, rclone employs server-side transfers to minimise local\nbandwidth use and transfers from one provider to another without using\nlocal disk.\n\nVirtual backends wrap local and cloud file systems to apply encryption,\ncompression, chunking, hashing and joining.\n\nRclone mounts any local, cloud or virtual filesystem as a disk on\nWindows, macOS, linux and FreeBSD, and also serves these over SFTP,\nHTTP, WebDAV, FTP and DLNA.\n\nRclone is mature, open-source software originally inspired by rsync and\nwritten in Go. The friendly support community is familiar with varied\nuse cases. Official Ubuntu, Debian, Fedora, Brew and Chocolatey repos.\ninclude rclone. For the latest version downloading from rclone.org is\nrecommended.\n\nRclone is widely used on Linux, Windows and Mac. Third-party developers\ncreate innovative backup, restore, GUI and business process solutions\nusing the rclone command line or API.\n\nRclone does the heavy lifting of communicating with cloud storage.\n\nWhat can rclone do for you?\n\nRclone helps you:\n\n-   Backup (and encrypt) files to cloud storage\n-   Restore (and decrypt) files from cloud storage\n-   Mirror cloud data to other cloud services or locally\n-   Migrate data to the cloud, or between cloud storage vendors\n-   Mount multiple, encrypted, cached or diverse cloud storage as a disk\n-   Analyse and account for data held on cloud storage using lsf, ljson,\n    size, ncdu\n-   Union file systems together to present multiple local and/or cloud\n    file systems as one\n\nFeatures\n\n-   Transfers\n    -   MD5, SHA1 hashes are checked at all times for file integrity\n    -   Timestamps are preserved on files\n    -   Operations can be restarted at any time\n    -   Can be to and from network, e.g. two different cloud providers\n    -   Can use multi-threaded downloads to local disk\n-   Copy new or changed files to cloud storage\n-   Sync (one way) to make a directory identical\n-   Bisync (two way) to keep two directories in sync bidirectionally\n-   Move files to cloud storage deleting the local after verification\n-   Check hashes and for missing/extra files\n-   Mount your cloud storage as a network disk\n-   Serve local or remote files over HTTP/WebDav/FTP/SFTP/DLNA\n-   Experimental Web based GUI\n\nSupported providers\n\n(There are many others, built on standard protocols such as WebDAV or\nS3, that work out of the box.)\n\n-   1Fichier\n-   Akamai Netstorage\n-   Alibaba Cloud (Aliyun) Object Storage System (OSS)\n-   Amazon S3\n-   Backblaze B2\n-   Box\n-   Ceph\n-   China Mobile Ecloud Elastic Object Storage (EOS)\n-   Arvan Cloud Object Storage (AOS)\n-   Citrix ShareFile\n-   Cloudflare R2\n-   DigitalOcean Spaces\n-   Digi Storage\n-   Dreamhost\n-   Dropbox\n-   Enterprise File Fabric\n-   Fastmail Files\n-   Files.com\n-   FTP\n-   Gofile\n-   Google Cloud Storage\n-   Google Drive\n-   Google Photos\n-   HDFS\n-   Hetzner Storage Box\n-   HiDrive\n-   HTTP\n-   ImageKit\n-   Internet Archive\n-   Jottacloud\n-   IBM COS S3\n-   IDrive e2\n-   IONOS Cloud\n-   Koofr\n-   Leviia Object Storage\n-   Liara Object Storage\n-   Linkbox\n-   Linode Object Storage\n-   Magalu\n-   Mail.ru Cloud\n-   Memset Memstore\n-   Mega\n-   Memory\n-   Microsoft Azure Blob Storage\n-   Microsoft Azure Files Storage\n-   Microsoft OneDrive\n-   Minio\n-   Nextcloud\n-   OVH\n-   Blomp Cloud Storage\n-   OpenDrive\n-   OpenStack Swift\n-   Oracle Cloud Storage Swift\n-   Oracle Object Storage\n-   ownCloud\n-   pCloud\n-   Petabox\n-   PikPak\n-   Pixeldrain\n-   premiumize.me\n-   put.io\n-   Proton Drive\n-   QingStor\n-   Qiniu Cloud Object Storage (Kodo)\n-   Quatrix by Maytech\n-   Rackspace Cloud Files\n-   rsync.net\n-   Scaleway\n-   Seafile\n-   Seagate Lyve Cloud\n-   SeaweedFS\n-   SFTP\n-   Sia\n-   SMB / CIFS\n-   StackPath\n-   Storj\n-   Synology\n-   SugarSync\n-   Tencent Cloud Object Storage (COS)\n-   Uloz.to\n-   Uptobox\n-   Wasabi\n-   WebDAV\n-   Yandex Disk\n-   Zoho WorkDrive\n-   The local filesystem\n\nVirtual providers\n\nThese backends adapt or modify other storage providers:\n\n-   Alias: Rename existing remotes\n-   Cache: Cache remotes (DEPRECATED)\n-   Chunker: Split large files\n-   Combine: Combine multiple remotes into a directory tree\n-   Compress: Compress files\n-   Crypt: Encrypt files\n-   Hasher: Hash files\n-   Union: Join multiple remotes to work together\n\nLinks\n\n-   Home page\n-   GitHub project page for source and bug tracker\n-   Rclone Forum\n-   Downloads\n\nInstall\n\nRclone is a Go program and comes as a single binary file.\n\nQuickstart\n\n-   Download the relevant binary.\n-   Extract the rclone executable, rclone.exe on Windows, from the\n    archive.\n-   Run rclone config to setup. See rclone config docs for more details.\n-   Optionally configure automatic execution.\n\nSee below for some expanded Linux / macOS / Windows instructions.\n\nSee the usage docs for how to use rclone, or run rclone -h.\n\nAlready installed rclone can be easily updated to the latest version\nusing the rclone selfupdate command.\n\nSee the release signing docs for how to verify signatures on the\nrelease.\n\nScript installation\n\nTo install rclone on Linux/macOS/BSD systems, run:\n\n    sudo -v ; curl https://rclone.org/install.sh | sudo bash\n\nFor beta installation, run:\n\n    sudo -v ; curl https://rclone.org/install.sh | sudo bash -s beta\n\nNote that this script checks the version of rclone installed first and\nwon't re-download if not needed.\n\nLinux installation\n\nPrecompiled binary\n\nFetch and unpack\n\n    curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip\n    unzip rclone-current-linux-amd64.zip\n    cd rclone-*-linux-amd64\n\nCopy binary file\n\n    sudo cp rclone /usr/bin/\n    sudo chown root:root /usr/bin/rclone\n    sudo chmod 755 /usr/bin/rclone\n\nInstall manpage\n\n    sudo mkdir -p /usr/local/share/man/man1\n    sudo cp rclone.1 /usr/local/share/man/man1/\n    sudo mandb\n\nRun rclone config to setup. See rclone config docs for more details.\n\n    rclone config\n\nmacOS installation\n\nInstallation with brew\n\n    brew install rclone\n\nNOTE: This version of rclone will not support mount any more (see\n#5373). If mounting is wanted on macOS, either install a precompiled\nbinary or enable the relevant option when installing from source.\n\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date. Its current version is as below.\n\n[Homebrew package]\n\nInstallation with MacPorts\n\nOn macOS, rclone can also be installed via MacPorts:\n\n    sudo port install rclone\n\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date. Its current version is as below.\n\n[MacPorts port]\n\nMore information here.\n\nPrecompiled binary, using curl\n\nTo avoid problems with macOS gatekeeper enforcing the binary to be\nsigned and notarized it is enough to download with curl.\n\nDownload the latest version of rclone.\n\n    cd && curl -O https://downloads.rclone.org/rclone-current-osx-amd64.zip\n\nUnzip the download and cd to the extracted folder.\n\n    unzip -a rclone-current-osx-amd64.zip && cd rclone-*-osx-amd64\n\nMove rclone to your $PATH. You will be prompted for your password.\n\n    sudo mkdir -p /usr/local/bin\n    sudo mv rclone /usr/local/bin/\n\n(the mkdir command is safe to run, even if the directory already\nexists).\n\nRemove the leftover files.\n\n    cd .. && rm -rf rclone-*-osx-amd64 rclone-current-osx-amd64.zip\n\nRun rclone config to setup. See rclone config docs for more details.\n\n    rclone config\n\nPrecompiled binary, using a web browser\n\nWhen downloading a binary with a web browser, the browser will set the\nmacOS gatekeeper quarantine attribute. Starting from Catalina, when\nattempting to run rclone, a pop-up will appear saying:\n\n    \"rclone\" cannot be opened because the developer cannot be verified.\n    macOS cannot verify that this app is free from malware.\n\nThe simplest fix is to run\n\n    xattr -d com.apple.quarantine rclone\n\nWindows installation\n\nPrecompiled binary\n\nFetch the correct binary for your processor type by clicking on these\nlinks. If not sure, use the first link.\n\n-   Intel/AMD - 64 Bit\n-   Intel/AMD - 32 Bit\n-   ARM - 64 Bit\n\nOpen this file in the Explorer and extract rclone.exe. Rclone is a\nportable executable so you can place it wherever is convenient.\n\nOpen a CMD window (or powershell) and run the binary. Note that rclone\ndoes not launch a GUI by default, it runs in the CMD Window.\n\n-   Run rclone.exe config to setup. See rclone config docs for more\n    details.\n-   Optionally configure automatic execution.\n\nIf you are planning to use the rclone mount feature then you will need\nto install the third party utility WinFsp also.\n\nWindows package manager (Winget)\n\nWinget comes pre-installed with the latest versions of Windows. If not,\nupdate the App Installer package from the Microsoft store.\n\nTo install rclone\n\n    winget install Rclone.Rclone\n\nTo uninstall rclone\n\n    winget uninstall Rclone.Rclone --force\n\nChocolatey package manager\n\nMake sure you have Choco installed\n\n    choco search rclone\n    choco install rclone\n\nThis will install rclone on your Windows machine. If you are planning to\nuse rclone mount then\n\n    choco install winfsp\n\nwill install that too.\n\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date. Its current version is as below.\n\n[Chocolatey package]\n\nScoop package manager\n\nMake sure you have Scoop installed\n\n    scoop install rclone\n\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date. Its current version is as below.\n\n[Scoop package]\n\nPackage manager installation\n\nMany Linux, Windows, macOS and other OS distributions package and\ndistribute rclone.\n\nThe distributed versions of rclone are often quite out of date and for\nthis reason we recommend one of the other installation methods if\npossible.\n\nYou can get an idea of how up to date or not your OS distribution's\npackage is here.\n\n[Packaging status]\n\nDocker installation\n\nThe rclone developers maintain a docker image for rclone.\n\nThese images are built as part of the release process based on a minimal\nAlpine Linux.\n\nThe :latest tag will always point to the latest stable release. You can\nuse the :beta tag to get the latest build from master. You can also use\nversion tags, e.g. :1.49.1, :1.49 or :1.\n\n    $ docker pull rclone/rclone:latest\n    latest: Pulling from rclone/rclone\n    Digest: sha256:0e0ced72671989bb837fea8e88578b3fc48371aa45d209663683e24cfdaa0e11\n    ...\n    $ docker run --rm rclone/rclone:latest version\n    rclone v1.49.1\n    - os/arch: linux/amd64\n    - go version: go1.12.9\n\nThere are a few command line options to consider when starting an rclone\nDocker container from the rclone image.\n\n-   You need to mount the host rclone config dir at /config/rclone into\n    the Docker container. Due to the fact that rclone updates tokens\n    inside its config file, and that the update process involves a file\n    rename, you need to mount the whole host rclone config dir, not just\n    the single host rclone config file.\n\n-   You need to mount a host data dir at /data into the Docker\n    container.\n\n-   By default, the rclone binary inside a Docker container runs with\n    UID=0 (root). As a result, all files created in a run will have\n    UID=0. If your config and data files reside on the host with a\n    non-root UID:GID, you need to pass these on the container start\n    command line.\n\n-   If you want to access the RC interface (either via the API or the\n    Web UI), it is required to set the --rc-addr to :5572 in order to\n    connect to it from outside the container. An explanation about why\n    this is necessary is present here.\n\n    -   NOTE: Users running this container with the docker network set\n        to host should probably set it to listen to localhost only, with\n        127.0.0.1:5572 as the value for --rc-addr\n\n-   It is possible to use rclone mount inside a userspace Docker\n    container, and expose the resulting fuse mount to the host. The\n    exact docker run options to do that might vary slightly between\n    hosts. See, e.g. the discussion in this thread.\n\n    You also need to mount the host /etc/passwd and /etc/group for fuse\n    to work inside the container.\n\nHere are some commands tested on an Ubuntu 18.04.3 host:\n\n    # config on host at ~/.config/rclone/rclone.conf\n    # data on host at ~/data\n\n    # add a remote interactively\n    docker run --rm -it \\\n        --volume ~/.config/rclone:/config/rclone \\\n        --user $(id -u):$(id -g) \\\n        rclone/rclone \\\n        config\n\n    # make sure the config is ok by listing the remotes\n    docker run --rm \\\n        --volume ~/.config/rclone:/config/rclone \\\n        --user $(id -u):$(id -g) \\\n        rclone/rclone \\\n        listremotes\n\n    # perform mount inside Docker container, expose result to host\n    mkdir -p ~/data/mount\n    docker run --rm \\\n        --volume ~/.config/rclone:/config/rclone \\\n        --volume ~/data:/data:shared \\\n        --user $(id -u):$(id -g) \\\n        --volume /etc/passwd:/etc/passwd:ro --volume /etc/group:/etc/group:ro \\\n        --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined \\\n        rclone/rclone \\\n        mount dropbox:Photos /data/mount &\n    ls ~/data/mount\n    kill %1\n\nSnap installation\n\n[Get it from the Snap Store]\n\nMake sure you have Snapd installed\n\n    $ sudo snap install rclone\n\nDue to the strict confinement of Snap, rclone snap cannot access real\n/home/$USER/.config/rclone directory, default config path is as below.\n\n-   Default config directory:\n    -   /home/$USER/snap/rclone/current/.config/rclone\n\nNote: Due to the strict confinement of Snap, rclone mount feature is not\nsupported.\n\nIf mounting is wanted, either install a precompiled binary or enable the\nrelevant option when installing from source.\n\nNote that this is controlled by community maintainer not the rclone\ndevelopers so it may be out of date. Its current version is as below.\n\n[rclone]\n\nSource installation\n\nMake sure you have git and Go installed. Go version 1.18 or newer is\nrequired, the latest release is recommended. You can get it from your\npackage manager, or download it from golang.org/dl. Then you can run the\nfollowing:\n\n    git clone https://github.com/rclone/rclone.git\n    cd rclone\n    go build\n\nThis will check out the rclone source in subfolder rclone, which you can\nlater modify and send pull requests with. Then it will build the rclone\nexecutable in the same folder. As an initial check you can now run\n./rclone version (.\\rclone version on Windows).\n\nNote that on macOS and Windows the mount command will not be available\nunless you specify an additional build tag cmount.\n\n    go build -tags cmount\n\nThis assumes you have a GCC compatible C compiler (GCC or Clang) in your\nPATH, as it uses cgo. But on Windows, the cgofuse library that the\ncmount implementation is based on, also supports building without cgo,\ni.e. by setting environment variable CGO_ENABLED to value 0 (static\nlinking). This is how the official Windows release of rclone is being\nbuilt, starting with version 1.59. It is still possible to build with\ncgo on Windows as well, by using the MinGW port of GCC, e.g. by\ninstalling it in a MSYS2 distribution (make sure you install it in the\nclassic mingw64 subsystem, the ucrt64 version is not compatible).\n\nAdditionally, to build with mount on Windows, you must install the third\nparty utility WinFsp, with the \"Developer\" feature selected. If building\nwith cgo, you must also set environment variable CPATH pointing to the\nfuse include directory within the WinFsp installation (normally\nC:\\Program Files (x86)\\WinFsp\\inc\\fuse).\n\nYou may add arguments -ldflags -s to omit symbol table and debug\ninformation, making the executable file smaller, and -trimpath to remove\nreferences to local file system paths. The official rclone releases are\nbuilt with both of these.\n\n    go build -trimpath -ldflags -s -tags cmount\n\nIf you want to customize the version string, as reported by the\nrclone version command, you can set one of the variables fs.Version,\nfs.VersionTag (to keep default suffix but customize the number), or\nfs.VersionSuffix (to keep default number but customize the suffix). This\ncan be done from the build command, by adding to the -ldflags argument\nvalue as shown below.\n\n    go build -trimpath -ldflags \"-s -X github.com/rclone/rclone/fs.Version=v9.9.9-test\" -tags cmount\n\nOn Windows, the official executables also have the version information,\nas well as a file icon, embedded as binary resources. To get that with\nyour own build you need to run the following command before the build\ncommand. It generates a Windows resource system object file, with\nextension .syso, e.g. resource_windows_amd64.syso, that will be\nautomatically picked up by future build commands.\n\n    go run bin/resource_windows.go\n\nThe above command will generate a resource file containing version\ninformation based on the fs.Version variable in source at the time you\nrun the command, which means if the value of this variable changes you\nneed to re-run the command for it to be reflected in the version\ninformation. Also, if you override this version variable in the build\ncommand as described above, you need to do that also when generating the\nresource file, or else it will still use the value from the source.\n\n    go run bin/resource_windows.go -version v9.9.9-test\n\nInstead of executing the go build command directly, you can run it via\nthe Makefile. The default target changes the version suffix from \"-DEV\"\nto \"-beta\" followed by additional commit details, embeds version\ninformation binary resources on Windows, and copies the resulting rclone\nexecutable into your GOPATH bin folder ($(go env GOPATH)/bin, which\ncorresponds to ~/go/bin/rclone by default).\n\n    make\n\nTo include mount command on macOS and Windows with Makefile build:\n\n    make GOTAGS=cmount\n\nThere are other make targets that can be used for more advanced builds,\nsuch as cross-compiling for all supported os/architectures, and\npackaging results into release artifacts. See Makefile and\ncross-compile.go for details.\n\nAnother alternative method for source installation is to download the\nsource, build and install rclone - all in one operation, as a regular Go\npackage. The source will be stored it in the Go module cache, and the\nresulting executable will be in your GOPATH bin folder\n($(go env GOPATH)/bin, which corresponds to ~/go/bin/rclone by default).\n\n    go install github.com/rclone/rclone@latest\n\nIn some situations, rclone executable size might be too big for\ndeployment in very restricted environments when all backends with large\nSDKs are included. To limit binary size unused backends can be commented\nout in backends/all/all.go and unused commands in cmd/all/all.go before\nbuilding with go build or make\n\nAnsible installation\n\nThis can be done with Stefan Weichinger's ansible role.\n\nInstructions\n\n1.  git clone https://github.com/stefangweichinger/ansible-rclone.git\n    into your local roles-directory\n2.  add the role to the hosts you want rclone installed to:\n\n        - hosts: rclone-hosts\n          roles:\n              - rclone\n\nPortable installation\n\nAs mentioned above, rclone is single executable (rclone, or rclone.exe\non Windows) that you can download as a zip archive and extract into a\nlocation of your choosing. When executing different commands, it may\ncreate files in different locations, such as a configuration file and\nvarious temporary files. By default the locations for these are\naccording to your operating system, e.g. configuration file in your user\nprofile directory and temporary files in the standard temporary\ndirectory, but you can customize all of them, e.g. to make a completely\nself-contained, portable installation.\n\nRun the config paths command to see the locations that rclone will use.\n\nTo override them set the corresponding options (as command-line\narguments, or as environment variables): - --config - --cache-dir -\n--temp-dir\n\nAutostart\n\nAfter installing and configuring rclone, as described above, you are\nready to use rclone as an interactive command line utility. If your goal\nis to perform periodic operations, such as a regular sync, you will\nprobably want to configure your rclone command in your operating\nsystem's scheduler. If you need to expose service-like features, such as\nremote control, GUI, serve or mount, you will often want an rclone\ncommand always running in the background, and configuring it to run in a\nservice infrastructure may be a better option. Below are some\nalternatives on how to achieve this on different operating systems.\n\nNOTE: Before setting up autorun it is highly recommended that you have\ntested your command manually from a Command Prompt first.\n\nAutostart on Windows\n\nThe most relevant alternatives for autostart on Windows are: - Run at\nuser log on using the Startup folder - Run at user log on, at system\nstartup or at schedule using Task Scheduler - Run at system startup\nusing Windows service\n\nRunning in background\n\nRclone is a console application, so if not starting from an existing\nCommand Prompt, e.g. when starting rclone.exe from a shortcut, it will\nopen a Command Prompt window. When configuring rclone to run from task\nscheduler and windows service you are able to set it to run hidden in\nbackground. From rclone version 1.54 you can also make it run hidden\nfrom anywhere by adding option --no-console (it may still flash briefly\nwhen the program starts). Since rclone normally writes information and\nany error messages to the console, you must redirect this to a file to\nbe able to see it. Rclone has a built-in option --log-file for that.\n\nExample command to run a sync in background:\n\n    c:\\rclone\\rclone.exe sync c:\\files remote:/files --no-console --log-file c:\\rclone\\logs\\sync_files.txt\n\nUser account\n\nAs mentioned in the mount documentation, mounted drives created as\nAdministrator are not visible to other accounts, not even the account\nthat was elevated as Administrator. By running the mount command as the\nbuilt-in SYSTEM user account, it will create drives accessible for\neveryone on the system. Both scheduled task and Windows service can be\nused to achieve this.\n\nNOTE: Remember that when rclone runs as the SYSTEM user, the user\nprofile that it sees will not be yours. This means that if you normally\nrun rclone with configuration file in the default location, to be able\nto use the same configuration when running as the system user you must\nexplicitly tell rclone where to find it with the --config option, or\nelse it will look in the system users profile path\n(C:\\Windows\\System32\\config\\systemprofile). To test your command\nmanually from a Command Prompt, you can run it with the PsExec utility\nfrom Microsoft's Sysinternals suite, which takes option -s to execute\ncommands as the SYSTEM user.\n\nStart from Startup folder\n\nTo quickly execute an rclone command you can simply create a standard\nWindows Explorer shortcut for the complete rclone command you want to\nrun. If you store this shortcut in the special \"Startup\" start-menu\nfolder, Windows will automatically run it at login. To open this folder\nin Windows Explorer, enter path\n%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup, or\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp if you want\nthe command to start for every user that logs in.\n\nThis is the easiest approach to autostarting of rclone, but it offers no\nfunctionality to set it to run as different user, or to set conditions\nor actions on certain events. Setting up a scheduled task as described\nbelow will often give you better results.\n\nStart from Task Scheduler\n\nTask Scheduler is an administrative tool built into Windows, and it can\nbe used to configure rclone to be started automatically in a highly\nconfigurable way, e.g. periodically on a schedule, on user log on, or at\nsystem startup. It can run be configured to run as the current user, or\nfor a mount command that needs to be available to all users it can run\nas the SYSTEM user. For technical information, see\nhttps://docs.microsoft.com/windows/win32/taskschd/task-scheduler-start-page.\n\nRun as service\n\nFor running rclone at system startup, you can create a Windows service\nthat executes your rclone command, as an alternative to scheduled task\nconfigured to run at startup.\n\nMount command built-in service integration\n\nFor mount commands, rclone has a built-in Windows service integration\nvia the third-party WinFsp library it uses. Registering as a regular\nWindows service easy, as you just have to execute the built-in\nPowerShell command New-Service (requires administrative privileges).\n\nExample of a PowerShell command that creates a Windows service for\nmounting some remote:/files as drive letter X:, for all users (service\nwill be running as the local system account):\n\n    New-Service -Name Rclone -BinaryPathName 'c:\\rclone\\rclone.exe mount remote:/files X: --config c:\\rclone\\config\\rclone.conf --log-file c:\\rclone\\logs\\mount.txt'\n\nThe WinFsp service infrastructure supports incorporating services for\nfile system implementations, such as rclone, into its own launcher\nservice, as kind of \"child services\". This has the additional advantage\nthat it also implements a network provider that integrates into Windows\nstandard methods for managing network drives. This is currently not\nofficially supported by Rclone, but with WinFsp version 2019.3 B2 /\nv1.5B2 or later it should be possible through path rewriting as\ndescribed here.\n\nThird-party service integration\n\nTo Windows service running any rclone command, the excellent third-party\nutility NSSM, the \"Non-Sucking Service Manager\", can be used. It\nincludes some advanced features such as adjusting process priority,\ndefining process environment variables, redirect to file anything\nwritten to stdout, and customized response to different exit codes, with\na GUI to configure everything from (although it can also be used from\ncommand line ).\n\nThere are also several other alternatives. To mention one more, WinSW,\n\"Windows Service Wrapper\", is worth checking out. It requires .NET\nFramework, but it is preinstalled on newer versions of Windows, and it\nalso provides alternative standalone distributions which includes\nnecessary runtime (.NET 5). WinSW is a command-line only utility, where\nyou have to manually create an XML file with service configuration. This\nmay be a drawback for some, but it can also be an advantage as it is\neasy to back up and reuse the configuration settings, without having go\nthrough manual steps in a GUI. One thing to note is that by default it\ndoes not restart the service on error, one have to explicit enable this\nin the configuration file (via the \"onfailure\" parameter).\n\nAutostart on Linux\n\nStart as a service\n\nTo always run rclone in background, relevant for mount commands etc, you\ncan use systemd to set up rclone as a system or user service. Running as\na system service ensures that it is run at startup even if the user it\nis running as has no active session. Running rclone as a user service\nensures that it only starts after the configured user has logged into\nthe system.\n\nRun periodically from cron\n\nTo run a periodic command, such as a copy/sync, you can set up a cron\njob.\n\nUsage\n\nRclone is a command line program to manage files on cloud storage. After\ndownload and install, continue here to learn how to use it: Initial\nconfiguration, what the basic syntax looks like, describes the various\nsubcommands, the various options, and more.\n\nConfigure\n\nFirst, you'll need to configure rclone. As the object storage systems\nhave quite complicated authentication these are kept in a config file.\n(See the --config entry for how to find the config file and choose its\nlocation.)\n\nThe easiest way to make the config is to run rclone with the config\noption:\n\n    rclone config\n\nSee the following for detailed instructions for\n\n-   1Fichier\n-   Akamai Netstorage\n-   Alias\n-   Amazon S3\n-   Backblaze B2\n-   Box\n-   Chunker - transparently splits large files for other remotes\n-   Citrix ShareFile\n-   Compress\n-   Combine\n-   Crypt - to encrypt other remotes\n-   DigitalOcean Spaces\n-   Digi Storage\n-   Dropbox\n-   Enterprise File Fabric\n-   Files.com\n-   FTP\n-   Gofile\n-   Google Cloud Storage\n-   Google Drive\n-   Google Photos\n-   Hasher - to handle checksums for other remotes\n-   HDFS\n-   Hetzner Storage Box\n-   HiDrive\n-   HTTP\n-   Internet Archive\n-   Jottacloud\n-   Koofr\n-   Linkbox\n-   Mail.ru Cloud\n-   Mega\n-   Memory\n-   Microsoft Azure Blob Storage\n-   Microsoft Azure Files Storage\n-   Microsoft OneDrive\n-   OpenStack Swift / Rackspace Cloudfiles / Blomp Cloud Storage /\n    Memset Memstore\n-   OpenDrive\n-   Oracle Object Storage\n-   Pcloud\n-   PikPak\n-   Pixeldrain\n-   premiumize.me\n-   put.io\n-   Proton Drive\n-   QingStor\n-   Quatrix by Maytech\n-   rsync.net\n-   Seafile\n-   SFTP\n-   Sia\n-   SMB\n-   Storj\n-   SugarSync\n-   Union\n-   Uloz.to\n-   Uptobox\n-   WebDAV\n-   Yandex Disk\n-   Zoho WorkDrive\n-   The local filesystem\n\nBasic syntax\n\nRclone syncs a directory tree from one storage system to another.\n\nIts syntax is like this\n\n    rclone subcommand [options] <parameters> <parameters...>\n\nA subcommand is a the rclone operation required, (e.g. sync, copy, ls).\n\nAn option is a single letter flag (e.g. -v) or a group of single letter\nflags (e.g. -Pv) or a long flag (e.g. --progress). No options are\nrequired. Options can come after the subcommand or in between parameters\ntoo or on the end, but only global options can be used before the\nsubcommand. Anything after a -- option will not be interpreted as an\noption so if you need to add a parameter which starts with a - then put\na -- on its own first, eg\n\n    rclone lsf -- -directory-starting-with-dash\n\nA parameter is usually a file path or rclone remote, eg /path/to/file or\nremote:path/to/file but it can be other things - the subcommand help\nwill tell you what.\n\nSource and destination paths are specified by the name you gave the\nstorage system in the config file then the sub path, e.g.\n\"drive:myfolder\" to look at \"myfolder\" in Google drive.\n\nYou can define as many storage paths as you like in the config file.\n\nPlease use the --interactive/-i flag while learning rclone to avoid\naccidental data loss.\n\nSubcommands\n\nrclone uses a system of subcommands. For example\n\n    rclone ls remote:path # lists a remote\n    rclone copy /local/path remote:path # copies /local/path to the remote\n    rclone sync --interactive /local/path remote:path # syncs /local/path to the remote\n\nrclone config\n\nEnter an interactive configuration session.\n\nSynopsis\n\nEnter an interactive configuration session where you can setup new\nremotes and manage existing ones. You may also set or remove a password\nto protect your configuration.\n\n    rclone config [flags]\n\nOptions\n\n      -h, --help   help for config\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n-   rclone config create - Create a new remote with name, type and\n    options.\n-   rclone config delete - Delete an existing remote.\n-   rclone config disconnect - Disconnects user from remote\n-   rclone config dump - Dump the config file as JSON.\n-   rclone config edit - Enter an interactive configuration session.\n-   rclone config encryption - set, remove and check the encryption for\n    the config file\n-   rclone config file - Show path of configuration file in use.\n-   rclone config password - Update password in an existing remote.\n-   rclone config paths - Show paths used for configuration, cache, temp\n    etc.\n-   rclone config providers - List in JSON format all the providers and\n    options.\n-   rclone config reconnect - Re-authenticates user with remote.\n-   rclone config redacted - Print redacted (decrypted) config file, or\n    the redacted config for a single remote.\n-   rclone config show - Print (decrypted) config file, or the config\n    for a single remote.\n-   rclone config touch - Ensure configuration file exists.\n-   rclone config update - Update options in an existing remote.\n-   rclone config userinfo - Prints info about logged in user of remote.\n\nrclone copy\n\nCopy files from source to dest, skipping identical files.\n\nSynopsis\n\nCopy the source to the destination. Does not transfer files that are\nidentical on source and destination, testing by size and modification\ntime or MD5SUM. Doesn't delete files from the destination. If you want\nto also delete files from destination, to make it match source, use the\nsync command instead.\n\nNote that it is always the contents of the directory that is synced, not\nthe directory itself. So when source:path is a directory, it's the\ncontents of source:path that are copied, not the directory name and\ncontents.\n\nTo copy single files, use the copyto command instead.\n\nIf dest:path doesn't exist, it is created and the source:path contents\ngo there.\n\nFor example\n\n    rclone copy source:sourcepath dest:destpath\n\nLet's say there are two files in sourcepath\n\n    sourcepath/one.txt\n    sourcepath/two.txt\n\nThis copies them to\n\n    destpath/one.txt\n    destpath/two.txt\n\nNot to\n\n    destpath/sourcepath/one.txt\n    destpath/sourcepath/two.txt\n\nIf you are familiar with rsync, rclone always works as if you had\nwritten a trailing / - meaning \"copy the contents of this directory\".\nThis applies to all commands and whether you are talking about the\nsource or destination.\n\nSee the --no-traverse option for controlling whether rclone lists the\ndestination directory or not. Supplying this option when copying a small\nnumber of files into a large destination can speed transfers up greatly.\n\nFor example, if you have many files in /path/to/src but only a few of\nthem change every day, you can copy all the files which have changed\nrecently very efficiently like this:\n\n    rclone copy --max-age 24h --no-traverse /path/to/src remote:\n\nRclone will sync the modification times of files and directories if the\nbackend supports it. If metadata syncing is required then use the\n--metadata flag.\n\nNote that the modification time and metadata for the root directory will\nnot be synced. See https://github.com/rclone/rclone/issues/7652 for more\ninfo.\n\nNote: Use the -P/--progress flag to view real-time transfer statistics.\n\nNote: Use the --dry-run or the --interactive/-i flag to test without\ncopying anything.\n\n    rclone copy source:path dest:path [flags]\n\nOptions\n\n          --create-empty-src-dirs   Create empty source dirs on destination after copy\n      -h, --help                    help for copy\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nCopy Options\n\nFlags for anything which can copy a file\n\n          --check-first                                 Do all the checks before starting transfers\n      -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n          --compare-dest stringArray                    Include additional server-side paths during comparison\n          --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n          --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n          --ignore-case-sync                            Ignore case when synchronizing\n          --ignore-checksum                             Skip post copy check of checksums\n          --ignore-existing                             Skip all files that exist on destination\n          --ignore-size                                 Ignore size when skipping use modtime or checksum\n      -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n          --immutable                                   Do not modify files, fail if existing files have been modified\n          --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n          --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n          --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n          --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n      -M, --metadata                                    If set, preserve metadata when copying objects\n          --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n          --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n          --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n          --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n          --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n          --no-check-dest                               Don't check the destination, copy regardless\n          --no-traverse                                 Don't traverse destination file system on copy\n          --no-update-dir-modtime                       Don't update directory modification times\n          --no-update-modtime                           Don't update destination modtime if files identical\n          --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n          --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n          --refresh-times                               Refresh the modtime of remote files\n          --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n          --size-only                                   Skip based on size only, not modtime or checksum\n          --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n      -u, --update                                      Skip files that are newer on the destination\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone sync\n\nMake source and dest identical, modifying destination only.\n\nSynopsis\n\nSync the source to the destination, changing the destination only.\nDoesn't transfer files that are identical on source and destination,\ntesting by size and modification time or MD5SUM. Destination is updated\nto match source, including deleting files if necessary (except duplicate\nobjects, see below). If you don't want to delete files from destination,\nuse the copy command instead.\n\nImportant: Since this can cause data loss, test first with the --dry-run\nor the --interactive/-i flag.\n\n    rclone sync --interactive SOURCE remote:DESTINATION\n\nNote that files in the destination won't be deleted if there were any\nerrors at any point. Duplicate objects (files with the same name, on\nthose providers that support it) are also not yet handled.\n\nIt is always the contents of the directory that is synced, not the\ndirectory itself. So when source:path is a directory, it's the contents\nof source:path that are copied, not the directory name and contents. See\nextended explanation in the copy command if unsure.\n\nIf dest:path doesn't exist, it is created and the source:path contents\ngo there.\n\nIt is not possible to sync overlapping remotes. However, you may exclude\nthe destination from the sync with a filter rule or by putting an\nexclude-if-present file inside the destination directory and sync to a\ndestination that is inside the source directory.\n\nRclone will sync the modification times of files and directories if the\nbackend supports it. If metadata syncing is required then use the\n--metadata flag.\n\nNote that the modification time and metadata for the root directory will\nnot be synced. See https://github.com/rclone/rclone/issues/7652 for more\ninfo.\n\nNote: Use the -P/--progress flag to view real-time transfer statistics\n\nNote: Use the rclone dedupe command to deal with \"Duplicate\nobject/directory found in source/destination - ignoring\" errors. See\nthis forum post for more info.\n\nLogger Flags\n\nThe --differ, --missing-on-dst, --missing-on-src, --match and --error\nflags write paths, one per line, to the file name (or stdout if it is -)\nsupplied. What they write is described in the help below. For example\n--differ will write all paths which are present on both the source and\ndestination but different.\n\nThe --combined flag will write a file (or stdout) which contains all\nfile paths with a symbol and then a space and then the path to tell you\nwhat happened to it. These are reminiscent of diff files.\n\n-   = path means path was found in source and destination and was\n    identical\n-   `- path` means path was missing on the source, so only in the\n    destination\n-   `+ path` means path was missing on the destination, so only in the\n    source\n-   `* path` means path was present in source and destination but\n    different.\n-   ! path means there was an error reading or hashing the source or\n    dest.\n\nThe --dest-after flag writes a list file using the same format flags as\nlsf (including customizable options for hash, modtime, etc.)\nConceptually it is similar to rsync's --itemize-changes, but not\nidentical -- it should output an accurate list of what will be on the\ndestination after the sync.\n\nNote that these logger flags have a few limitations, and certain\nscenarios are not currently supported:\n\n-   --max-duration / CutoffModeHard\n-   --compare-dest / --copy-dest\n-   server-side moves of an entire dir at once\n-   High-level retries, because there would be duplicates (use\n    --retries 1 to disable)\n-   Possibly some unusual error scenarios\n\nNote also that each file is logged during the sync, as opposed to after,\nso it is most useful as a predictor of what SHOULD happen to each file\n(which may or may not match what actually DID.)\n\n    rclone sync source:path dest:path [flags]\n\nOptions\n\n          --absolute                Put a leading / in front of path names\n          --combined string         Make a combined report of changes to this file\n          --create-empty-src-dirs   Create empty source dirs on destination after sync\n          --csv                     Output in CSV format\n          --dest-after string       Report all files that exist on the dest post-sync\n          --differ string           Report all non-matching files to this file\n      -d, --dir-slash               Append a slash to directory names (default true)\n          --dirs-only               Only list directories\n          --error string            Report all files with errors (hashing or reading) to this file\n          --files-only              Only list files (default true)\n      -F, --format string           Output format - see lsf help for details (default \"p\")\n          --hash h                  Use this hash when h is used in the format MD5|SHA-1|DropboxHash (default \"md5\")\n      -h, --help                    help for sync\n          --match string            Report all matching files to this file\n          --missing-on-dst string   Report all files missing from the destination to this file\n          --missing-on-src string   Report all files missing from the source to this file\n      -s, --separator string        Separator for the items in the format (default \";\")\n      -t, --timeformat string       Specify a custom time format, or 'max' for max precision supported by remote (default: 2006-01-02 15:04:05)\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nCopy Options\n\nFlags for anything which can copy a file\n\n          --check-first                                 Do all the checks before starting transfers\n      -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n          --compare-dest stringArray                    Include additional server-side paths during comparison\n          --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n          --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n          --ignore-case-sync                            Ignore case when synchronizing\n          --ignore-checksum                             Skip post copy check of checksums\n          --ignore-existing                             Skip all files that exist on destination\n          --ignore-size                                 Ignore size when skipping use modtime or checksum\n      -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n          --immutable                                   Do not modify files, fail if existing files have been modified\n          --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n          --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n          --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n          --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n      -M, --metadata                                    If set, preserve metadata when copying objects\n          --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n          --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n          --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n          --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n          --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n          --no-check-dest                               Don't check the destination, copy regardless\n          --no-traverse                                 Don't traverse destination file system on copy\n          --no-update-dir-modtime                       Don't update directory modification times\n          --no-update-modtime                           Don't update destination modtime if files identical\n          --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n          --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n          --refresh-times                               Refresh the modtime of remote files\n          --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n          --size-only                                   Skip based on size only, not modtime or checksum\n          --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n      -u, --update                                      Skip files that are newer on the destination\n\nSync Options\n\nFlags used for sync commands\n\n          --backup-dir string               Make backups into hierarchy based in DIR\n          --delete-after                    When synchronizing, delete files on destination after transferring (default)\n          --delete-before                   When synchronizing, delete files on destination before transferring\n          --delete-during                   When synchronizing, delete files during transfer\n          --fix-case                        Force rename of case insensitive dest to match source\n          --ignore-errors                   Delete even if there are I/O errors\n          --max-delete int                  When synchronizing, limit the number of deletes (default -1)\n          --max-delete-size SizeSuffix      When synchronizing, limit the total size of deletes (default off)\n          --suffix string                   Suffix to add to changed files\n          --suffix-keep-extension           Preserve the extension when using --suffix\n          --track-renames                   When synchronizing, track file renames and do a server-side move if possible\n          --track-renames-strategy string   Strategies to use when synchronizing using track-renames hash|modtime|leaf (default \"hash\")\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone move\n\nMove files from source to dest.\n\nSynopsis\n\nMoves the contents of the source directory to the destination directory.\nRclone will error if the source and destination overlap and the remote\ndoes not support a server-side directory move operation.\n\nTo move single files, use the moveto command instead.\n\nIf no filters are in use and if possible this will server-side move\nsource:path into dest:path. After this source:path will no longer exist.\n\nOtherwise for each file in source:path selected by the filters (if any)\nthis will move it into dest:path. If possible a server-side move will be\nused, otherwise it will copy it (server-side if possible) into dest:path\nthen delete the original (if no errors on copy) in source:path.\n\nIf you want to delete empty source directories after move, use the\n--delete-empty-src-dirs flag.\n\nSee the --no-traverse option for controlling whether rclone lists the\ndestination directory or not. Supplying this option when moving a small\nnumber of files into a large destination can speed transfers up greatly.\n\nRclone will sync the modification times of files and directories if the\nbackend supports it. If metadata syncing is required then use the\n--metadata flag.\n\nNote that the modification time and metadata for the root directory will\nnot be synced. See https://github.com/rclone/rclone/issues/7652 for more\ninfo.\n\nImportant: Since this can cause data loss, test first with the --dry-run\nor the --interactive/-i flag.\n\nNote: Use the -P/--progress flag to view real-time transfer statistics.\n\n    rclone move source:path dest:path [flags]\n\nOptions\n\n          --create-empty-src-dirs   Create empty source dirs on destination after move\n          --delete-empty-src-dirs   Delete empty source dirs after move\n      -h, --help                    help for move\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nCopy Options\n\nFlags for anything which can copy a file\n\n          --check-first                                 Do all the checks before starting transfers\n      -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n          --compare-dest stringArray                    Include additional server-side paths during comparison\n          --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n          --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n          --ignore-case-sync                            Ignore case when synchronizing\n          --ignore-checksum                             Skip post copy check of checksums\n          --ignore-existing                             Skip all files that exist on destination\n          --ignore-size                                 Ignore size when skipping use modtime or checksum\n      -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n          --immutable                                   Do not modify files, fail if existing files have been modified\n          --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n          --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n          --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n          --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n      -M, --metadata                                    If set, preserve metadata when copying objects\n          --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n          --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n          --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n          --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n          --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n          --no-check-dest                               Don't check the destination, copy regardless\n          --no-traverse                                 Don't traverse destination file system on copy\n          --no-update-dir-modtime                       Don't update directory modification times\n          --no-update-modtime                           Don't update destination modtime if files identical\n          --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n          --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n          --refresh-times                               Refresh the modtime of remote files\n          --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n          --size-only                                   Skip based on size only, not modtime or checksum\n          --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n      -u, --update                                      Skip files that are newer on the destination\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone delete\n\nRemove the files in path.\n\nSynopsis\n\nRemove the files in path. Unlike purge it obeys include/exclude filters\nso can be used to selectively delete files.\n\nrclone delete only deletes files but leaves the directory structure\nalone. If you want to delete a directory and all of its contents use the\npurge command.\n\nIf you supply the --rmdirs flag, it will remove all empty directories\nalong with it. You can also use the separate command rmdir or rmdirs to\ndelete empty directories only.\n\nFor example, to delete all files bigger than 100 MiB, you may first want\nto check what would be deleted (use either):\n\n    rclone --min-size 100M lsl remote:path\n    rclone --dry-run --min-size 100M delete remote:path\n\nThen proceed with the actual delete:\n\n    rclone --min-size 100M delete remote:path\n\nThat reads \"delete everything with a minimum size of 100 MiB\", hence\ndelete all files bigger than 100 MiB.\n\nImportant: Since this can cause data loss, test first with the --dry-run\nor the --interactive/-i flag.\n\n    rclone delete remote:path [flags]\n\nOptions\n\n      -h, --help     help for delete\n          --rmdirs   rmdirs removes empty directories but leaves root intact\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone purge\n\nRemove the path and all of its contents.\n\nSynopsis\n\nRemove the path and all of its contents. Note that this does not obey\ninclude/exclude filters - everything will be removed. Use the delete\ncommand if you want to selectively delete files. To delete empty\ndirectories only, use command rmdir or rmdirs.\n\nImportant: Since this can cause data loss, test first with the --dry-run\nor the --interactive/-i flag.\n\n    rclone purge remote:path [flags]\n\nOptions\n\n      -h, --help   help for purge\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone mkdir\n\nMake the path if it doesn't already exist.\n\n    rclone mkdir remote:path [flags]\n\nOptions\n\n      -h, --help   help for mkdir\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone rmdir\n\nRemove the empty directory at path.\n\nSynopsis\n\nThis removes empty directory given by path. Will not remove the path if\nit has any objects in it, not even empty subdirectories. Use command\nrmdirs (or delete with option --rmdirs) to do that.\n\nTo delete a path and any objects in it, use purge command.\n\n    rclone rmdir remote:path [flags]\n\nOptions\n\n      -h, --help   help for rmdir\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone check\n\nChecks the files in the source and destination match.\n\nSynopsis\n\nChecks the files in the source and destination match. It compares sizes\nand hashes (MD5 or SHA1) and logs a report of files that don't match. It\ndoesn't alter the source or destination.\n\nFor the crypt remote there is a dedicated command, cryptcheck, that are\nable to check the checksums of the encrypted files.\n\nIf you supply the --size-only flag, it will only compare the sizes not\nthe hashes as well. Use this for a quick check.\n\nIf you supply the --download flag, it will download the data from both\nremotes and check them against each other on the fly. This can be useful\nfor remotes that don't support hashes or if you really want to check all\nthe data.\n\nIf you supply the --checkfile HASH flag with a valid hash name, the\nsource:path must point to a text file in the SUM format.\n\nIf you supply the --one-way flag, it will only check that files in the\nsource match the files in the destination, not the other way around.\nThis means that extra files in the destination that are not in the\nsource will not be detected.\n\nThe --differ, --missing-on-dst, --missing-on-src, --match and --error\nflags write paths, one per line, to the file name (or stdout if it is -)\nsupplied. What they write is described in the help below. For example\n--differ will write all paths which are present on both the source and\ndestination but different.\n\nThe --combined flag will write a file (or stdout) which contains all\nfile paths with a symbol and then a space and then the path to tell you\nwhat happened to it. These are reminiscent of diff files.\n\n-   = path means path was found in source and destination and was\n    identical\n-   `- path` means path was missing on the source, so only in the\n    destination\n-   `+ path` means path was missing on the destination, so only in the\n    source\n-   `* path` means path was present in source and destination but\n    different.\n-   ! path means there was an error reading or hashing the source or\n    dest.\n\nThe default number of parallel checks is 8. See the --checkers=N option\nfor more information.\n\n    rclone check source:path dest:path [flags]\n\nOptions\n\n      -C, --checkfile string        Treat source:path as a SUM file with hashes of given type\n          --combined string         Make a combined report of changes to this file\n          --differ string           Report all non-matching files to this file\n          --download                Check by downloading rather than with hash\n          --error string            Report all files with errors (hashing or reading) to this file\n      -h, --help                    help for check\n          --match string            Report all matching files to this file\n          --missing-on-dst string   Report all files missing from the destination to this file\n          --missing-on-src string   Report all files missing from the source to this file\n          --one-way                 Check one way only, source files must exist on remote\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nCheck Options\n\nFlags used for check commands\n\n          --max-backlog int   Maximum number of objects in sync or check backlog (default 10000)\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone ls\n\nList the objects in the path with size and path.\n\nSynopsis\n\nLists the objects in the source path to standard output in a human\nreadable format with size and path. Recurses by default.\n\nEg\n\n    $ rclone ls swift:bucket\n        60295 bevajer5jef\n        90613 canole\n        94467 diwogej7\n        37600 fubuwic\n\nAny of the filtering options can be applied to this command.\n\nThere are several related list commands\n\n-   ls to list size and path of objects only\n-   lsl to list modification time, size and path of objects only\n-   lsd to list directories only\n-   lsf to list objects and directories in easy to parse format\n-   lsjson to list objects and directories in JSON format\n\nls,lsl,lsd are designed to be human-readable. lsf is designed to be\nhuman and machine-readable. lsjson is designed to be machine-readable.\n\nNote that ls and lsl recurse by default - use --max-depth 1 to stop the\nrecursion.\n\nThe other list commands lsd,lsf,lsjson do not recurse by default - use\n-R to make them recurse.\n\nListing a nonexistent directory will produce an error except for remotes\nwhich can't have empty directories (e.g. s3, swift, or gcs - the\nbucket-based remotes).\n\n    rclone ls remote:path [flags]\n\nOptions\n\n      -h, --help   help for ls\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone lsd\n\nList all directories/containers/buckets in the path.\n\nSynopsis\n\nLists the directories in the source path to standard output. Does not\nrecurse by default. Use the -R flag to recurse.\n\nThis command lists the total size of the directory (if known, -1 if\nnot), the modification time (if known, the current time if not), the\nnumber of objects in the directory (if known, -1 if not) and the name of\nthe directory, Eg\n\n    $ rclone lsd swift:\n          494000 2018-04-26 08:43:20     10000 10000files\n              65 2018-04-26 08:43:20         1 1File\n\nOr\n\n    $ rclone lsd drive:test\n              -1 2016-10-17 17:41:53        -1 1000files\n              -1 2017-01-03 14:40:54        -1 2500files\n              -1 2017-07-08 14:39:28        -1 4000files\n\nIf you just want the directory names use rclone lsf --dirs-only.\n\nAny of the filtering options can be applied to this command.\n\nThere are several related list commands\n\n-   ls to list size and path of objects only\n-   lsl to list modification time, size and path of objects only\n-   lsd to list directories only\n-   lsf to list objects and directories in easy to parse format\n-   lsjson to list objects and directories in JSON format\n\nls,lsl,lsd are designed to be human-readable. lsf is designed to be\nhuman and machine-readable. lsjson is designed to be machine-readable.\n\nNote that ls and lsl recurse by default - use --max-depth 1 to stop the\nrecursion.\n\nThe other list commands lsd,lsf,lsjson do not recurse by default - use\n-R to make them recurse.\n\nListing a nonexistent directory will produce an error except for remotes\nwhich can't have empty directories (e.g. s3, swift, or gcs - the\nbucket-based remotes).\n\n    rclone lsd remote:path [flags]\n\nOptions\n\n      -h, --help        help for lsd\n      -R, --recursive   Recurse into the listing\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone lsl\n\nList the objects in path with modification time, size and path.\n\nSynopsis\n\nLists the objects in the source path to standard output in a human\nreadable format with modification time, size and path. Recurses by\ndefault.\n\nEg\n\n    $ rclone lsl swift:bucket\n        60295 2016-06-25 18:55:41.062626927 bevajer5jef\n        90613 2016-06-25 18:55:43.302607074 canole\n        94467 2016-06-25 18:55:43.046609333 diwogej7\n        37600 2016-06-25 18:55:40.814629136 fubuwic\n\nAny of the filtering options can be applied to this command.\n\nThere are several related list commands\n\n-   ls to list size and path of objects only\n-   lsl to list modification time, size and path of objects only\n-   lsd to list directories only\n-   lsf to list objects and directories in easy to parse format\n-   lsjson to list objects and directories in JSON format\n\nls,lsl,lsd are designed to be human-readable. lsf is designed to be\nhuman and machine-readable. lsjson is designed to be machine-readable.\n\nNote that ls and lsl recurse by default - use --max-depth 1 to stop the\nrecursion.\n\nThe other list commands lsd,lsf,lsjson do not recurse by default - use\n-R to make them recurse.\n\nListing a nonexistent directory will produce an error except for remotes\nwhich can't have empty directories (e.g. s3, swift, or gcs - the\nbucket-based remotes).\n\n    rclone lsl remote:path [flags]\n\nOptions\n\n      -h, --help   help for lsl\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone md5sum\n\nProduces an md5sum file for all the objects in the path.\n\nSynopsis\n\nProduces an md5sum file for all the objects in the path. This is in the\nsame format as the standard md5sum tool produces.\n\nBy default, the hash is requested from the remote. If MD5 is not\nsupported by the remote, no hash will be returned. With the download\nflag, the file will be downloaded from the remote and hashed locally\nenabling MD5 for any remote.\n\nFor other algorithms, see the hashsum command. Running\nrclone md5sum remote:path is equivalent to running\nrclone hashsum MD5 remote:path.\n\nThis command can also hash data received on standard input (stdin), by\nnot passing a remote:path, or by passing a hyphen as remote:path when\nthere is data to read (if not, the hyphen will be treated literally, as\na relative path).\n\n    rclone md5sum remote:path [flags]\n\nOptions\n\n          --base64               Output base64 encoded hashsum\n      -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n          --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n      -h, --help                 help for md5sum\n          --output-file string   Output hashsums to a file rather than the terminal\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone sha1sum\n\nProduces an sha1sum file for all the objects in the path.\n\nSynopsis\n\nProduces an sha1sum file for all the objects in the path. This is in the\nsame format as the standard sha1sum tool produces.\n\nBy default, the hash is requested from the remote. If SHA-1 is not\nsupported by the remote, no hash will be returned. With the download\nflag, the file will be downloaded from the remote and hashed locally\nenabling SHA-1 for any remote.\n\nFor other algorithms, see the hashsum command. Running\nrclone sha1sum remote:path is equivalent to running\nrclone hashsum SHA1 remote:path.\n\nThis command can also hash data received on standard input (stdin), by\nnot passing a remote:path, or by passing a hyphen as remote:path when\nthere is data to read (if not, the hyphen will be treated literally, as\na relative path).\n\nThis command can also hash data received on STDIN, if not passing a\nremote:path.\n\n    rclone sha1sum remote:path [flags]\n\nOptions\n\n          --base64               Output base64 encoded hashsum\n      -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n          --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n      -h, --help                 help for sha1sum\n          --output-file string   Output hashsums to a file rather than the terminal\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone size\n\nPrints the total size and number of objects in remote:path.\n\nSynopsis\n\nCounts objects in the path and calculates the total size. Prints the\nresult to standard output.\n\nBy default the output is in human-readable format, but shows values in\nboth human-readable format as well as the raw numbers (global option\n--human-readable is not considered). Use option --json to format output\nas JSON instead.\n\nRecurses by default, use --max-depth 1 to stop the recursion.\n\nSome backends do not always provide file sizes, see for example Google\nPhotos and Google Docs. Rclone will then show a notice in the log\nindicating how many such files were encountered, and count them in as\nempty files in the output of the size command.\n\n    rclone size remote:path [flags]\n\nOptions\n\n      -h, --help   help for size\n          --json   Format output as JSON\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone version\n\nShow the version number.\n\nSynopsis\n\nShow the rclone version number, the go version, the build target OS and\narchitecture, the runtime OS and kernel version and bitness, build tags\nand the type of executable (static or dynamic).\n\nFor example:\n\n    $ rclone version\n    rclone v1.55.0\n    - os/version: ubuntu 18.04 (64 bit)\n    - os/kernel: 4.15.0-136-generic (x86_64)\n    - os/type: linux\n    - os/arch: amd64\n    - go/version: go1.16\n    - go/linking: static\n    - go/tags: none\n\nNote: before rclone version 1.55 the os/type and os/arch lines were\nmerged, and the \"go/version\" line was tagged as \"go version\".\n\nIf you supply the --check flag, then it will do an online check to\ncompare your version with the latest release and the latest beta.\n\n    $ rclone version --check\n    yours:  1.42.0.6\n    latest: 1.42          (released 2018-06-16)\n    beta:   1.42.0.5      (released 2018-06-17)\n\nOr\n\n    $ rclone version --check\n    yours:  1.41\n    latest: 1.42          (released 2018-06-16)\n      upgrade: https://downloads.rclone.org/v1.42\n    beta:   1.42.0.5      (released 2018-06-17)\n      upgrade: https://beta.rclone.org/v1.42-005-g56e1e820\n\n    rclone version [flags]\n\nOptions\n\n          --check   Check for new version\n      -h, --help    help for version\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone cleanup\n\nClean up the remote if possible.\n\nSynopsis\n\nClean up the remote if possible. Empty the trash or delete old file\nversions. Not supported by all remotes.\n\n    rclone cleanup remote:path [flags]\n\nOptions\n\n      -h, --help   help for cleanup\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone dedupe\n\nInteractively find duplicate filenames and delete/rename them.\n\nSynopsis\n\nBy default dedupe interactively finds files with duplicate names and\noffers to delete all but one or rename them to be different. This is\nknown as deduping by name.\n\nDeduping by name is only useful with a small group of backends (e.g.\nGoogle Drive, Opendrive) that can have duplicate file names. It can be\nrun on wrapping backends (e.g. crypt) if they wrap a backend which\nsupports duplicate file names.\n\nHowever if --by-hash is passed in then dedupe will find files with\nduplicate hashes instead which will work on any backend which supports\nat least one hash. This can be used to find files with duplicate\ncontent. This is known as deduping by hash.\n\nIf deduping by name, first rclone will merge directories with the same\nname. It will do this iteratively until all the identically named\ndirectories have been merged.\n\nNext, if deduping by name, for every group of duplicate file names /\nhashes, it will delete all but one identical file it finds without\nconfirmation. This means that for most duplicated files the dedupe\ncommand will not be interactive.\n\ndedupe considers files to be identical if they have the same file path\nand the same hash. If the backend does not support hashes (e.g. crypt\nwrapping Google Drive) then they will never be found to be identical. If\nyou use the --size-only flag then files will be considered identical if\nthey have the same size (any hash will be ignored). This can be useful\non crypt backends which do not support hashes.\n\nNext rclone will resolve the remaining duplicates. Exactly which action\nis taken depends on the dedupe mode. By default, rclone will\ninteractively query the user for each one.\n\nImportant: Since this can cause data loss, test first with the --dry-run\nor the --interactive/-i flag.\n\nHere is an example run.\n\nBefore - with duplicates\n\n    $ rclone lsl drive:dupes\n      6048320 2016-03-05 16:23:16.798000000 one.txt\n      6048320 2016-03-05 16:23:11.775000000 one.txt\n       564374 2016-03-05 16:23:06.731000000 one.txt\n      6048320 2016-03-05 16:18:26.092000000 one.txt\n      6048320 2016-03-05 16:22:46.185000000 two.txt\n      1744073 2016-03-05 16:22:38.104000000 two.txt\n       564374 2016-03-05 16:22:52.118000000 two.txt\n\nNow the dedupe session\n\n    $ rclone dedupe drive:dupes\n    2016/03/05 16:24:37 Google drive root 'dupes': Looking for duplicates using interactive mode.\n    one.txt: Found 4 files with duplicate names\n    one.txt: Deleting 2/3 identical duplicates (MD5 \"1eedaa9fe86fd4b8632e2ac549403b36\")\n    one.txt: 2 duplicates remain\n      1:      6048320 bytes, 2016-03-05 16:23:16.798000000, MD5 1eedaa9fe86fd4b8632e2ac549403b36\n      2:       564374 bytes, 2016-03-05 16:23:06.731000000, MD5 7594e7dc9fc28f727c42ee3e0749de81\n    s) Skip and do nothing\n    k) Keep just one (choose which in next step)\n    r) Rename all to be different (by changing file.jpg to file-1.jpg)\n    s/k/r> k\n    Enter the number of the file to keep> 1\n    one.txt: Deleted 1 extra copies\n    two.txt: Found 3 files with duplicate names\n    two.txt: 3 duplicates remain\n      1:       564374 bytes, 2016-03-05 16:22:52.118000000, MD5 7594e7dc9fc28f727c42ee3e0749de81\n      2:      6048320 bytes, 2016-03-05 16:22:46.185000000, MD5 1eedaa9fe86fd4b8632e2ac549403b36\n      3:      1744073 bytes, 2016-03-05 16:22:38.104000000, MD5 851957f7fb6f0bc4ce76be966d336802\n    s) Skip and do nothing\n    k) Keep just one (choose which in next step)\n    r) Rename all to be different (by changing file.jpg to file-1.jpg)\n    s/k/r> r\n    two-1.txt: renamed from: two.txt\n    two-2.txt: renamed from: two.txt\n    two-3.txt: renamed from: two.txt\n\nThe result being\n\n    $ rclone lsl drive:dupes\n      6048320 2016-03-05 16:23:16.798000000 one.txt\n       564374 2016-03-05 16:22:52.118000000 two-1.txt\n      6048320 2016-03-05 16:22:46.185000000 two-2.txt\n      1744073 2016-03-05 16:22:38.104000000 two-3.txt\n\nDedupe can be run non interactively using the --dedupe-mode flag or by\nusing an extra parameter with the same value\n\n-   --dedupe-mode interactive - interactive as above.\n-   --dedupe-mode skip - removes identical files then skips anything\n    left.\n-   --dedupe-mode first - removes identical files then keeps the first\n    one.\n-   --dedupe-mode newest - removes identical files then keeps the newest\n    one.\n-   --dedupe-mode oldest - removes identical files then keeps the oldest\n    one.\n-   --dedupe-mode largest - removes identical files then keeps the\n    largest one.\n-   --dedupe-mode smallest - removes identical files then keeps the\n    smallest one.\n-   --dedupe-mode rename - removes identical files then renames the rest\n    to be different.\n-   --dedupe-mode list - lists duplicate dirs and files only and changes\n    nothing.\n\nFor example, to rename all the identically named photos in your Google\nPhotos directory, do\n\n    rclone dedupe --dedupe-mode rename \"drive:Google Photos\"\n\nOr\n\n    rclone dedupe rename \"drive:Google Photos\"\n\n    rclone dedupe [mode] remote:path [flags]\n\nOptions\n\n          --by-hash              Find identical hashes rather than names\n          --dedupe-mode string   Dedupe mode interactive|skip|first|newest|oldest|largest|smallest|rename (default \"interactive\")\n      -h, --help                 help for dedupe\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone about\n\nGet quota information from the remote.\n\nSynopsis\n\nPrints quota information about a remote to standard output. The output\nis typically used, free, quota and trash contents.\n\nE.g. Typical output from rclone about remote: is:\n\n    Total:   17 GiB\n    Used:    7.444 GiB\n    Free:    1.315 GiB\n    Trashed: 100.000 MiB\n    Other:   8.241 GiB\n\nWhere the fields are:\n\n-   Total: Total size available.\n-   Used: Total size used.\n-   Free: Total space available to this user.\n-   Trashed: Total space used by trash.\n-   Other: Total amount in other storage (e.g. Gmail, Google Photos).\n-   Objects: Total number of objects in the storage.\n\nAll sizes are in number of bytes.\n\nApplying a --full flag to the command prints the bytes in full, e.g.\n\n    Total:   18253611008\n    Used:    7993453766\n    Free:    1411001220\n    Trashed: 104857602\n    Other:   8849156022\n\nA --json flag generates conveniently machine-readable output, e.g.\n\n    {\n        \"total\": 18253611008,\n        \"used\": 7993453766,\n        \"trashed\": 104857602,\n        \"other\": 8849156022,\n        \"free\": 1411001220\n    }\n\nNot all backends print all fields. Information is not included if it is\nnot provided by a backend. Where the value is unlimited it is omitted.\n\nSome backends does not support the rclone about command at all, see\ncomplete list in documentation.\n\n    rclone about remote: [flags]\n\nOptions\n\n          --full   Full numbers instead of human-readable\n      -h, --help   help for about\n          --json   Format output as JSON\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone authorize\n\nRemote authorization.\n\nSynopsis\n\nRemote authorization. Used to authorize a remote or headless rclone from\na machine with a browser - use as instructed by rclone config.\n\nUse --auth-no-open-browser to prevent rclone to open auth link in\ndefault browser automatically.\n\nUse --template to generate HTML output via a custom Go template. If a\nblank string is provided as an argument to this flag, the default\ntemplate is used.\n\n    rclone authorize [flags]\n\nOptions\n\n          --auth-no-open-browser   Do not automatically open auth link in default browser\n      -h, --help                   help for authorize\n          --template string        The path to a custom Go template for generating HTML responses\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone backend\n\nRun a backend-specific command.\n\nSynopsis\n\nThis runs a backend-specific command. The commands themselves (except\nfor \"help\" and \"features\") are defined by the backends and you should\nsee the backend docs for definitions.\n\nYou can discover what commands a backend implements by using\n\n    rclone backend help remote:\n    rclone backend help <backendname>\n\nYou can also discover information about the backend using (see\noperations/fsinfo in the remote control docs for more info).\n\n    rclone backend features remote:\n\nPass options to the backend command with -o. This should be key=value or\nkey, e.g.:\n\n    rclone backend stats remote:path stats -o format=json -o long\n\nPass arguments to the backend by placing them on the end of the line\n\n    rclone backend cleanup remote:path file1 file2 file3\n\nNote to run these commands on a running backend then see backend/command\nin the rc docs.\n\n    rclone backend <command> remote:path [opts] <args> [flags]\n\nOptions\n\n      -h, --help                 help for backend\n          --json                 Always output in JSON format\n      -o, --option stringArray   Option in the form name=value or name\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone bisync\n\nPerform bidirectional synchronization between two paths.\n\nSynopsis\n\nPerform bidirectional synchronization between two paths.\n\nBisync provides a bidirectional cloud sync solution in rclone. It\nretains the Path1 and Path2 filesystem listings from the prior run. On\neach successive run it will: - list files on Path1 and Path2, and check\nfor changes on each side. Changes include New, Newer, Older, and Deleted\nfiles. - Propagate changes on Path1 to Path2, and vice-versa.\n\nBisync is in beta and is considered an advanced command, so use with\ncare. Make sure you have read and understood the entire manual\n(especially the Limitations section) before using, or data loss can\nresult. Questions can be asked in the Rclone Forum.\n\nSee full bisync description for details.\n\n    rclone bisync remote1:path1 remote2:path2 [flags]\n\nOptions\n\n          --backup-dir1 string                   --backup-dir for Path1. Must be a non-overlapping path on the same remote.\n          --backup-dir2 string                   --backup-dir for Path2. Must be a non-overlapping path on the same remote.\n          --check-access                         Ensure expected RCLONE_TEST files are found on both Path1 and Path2 filesystems, else abort.\n          --check-filename string                Filename for --check-access (default: RCLONE_TEST)\n          --check-sync string                    Controls comparison of final listings: true|false|only (default: true) (default \"true\")\n          --compare string                       Comma-separated list of bisync-specific compare options ex. 'size,modtime,checksum' (default: 'size,modtime')\n          --conflict-loser ConflictLoserAction   Action to take on the loser of a sync conflict (when there is a winner) or on both files (when there is no winner): , num, pathname, delete (default: num)\n          --conflict-resolve string              Automatically resolve conflicts by preferring the version that is: none, path1, path2, newer, older, larger, smaller (default: none) (default \"none\")\n          --conflict-suffix string               Suffix to use when renaming a --conflict-loser. Can be either one string or two comma-separated strings to assign different suffixes to Path1/Path2. (default: 'conflict')\n          --create-empty-src-dirs                Sync creation and deletion of empty directories. (Not compatible with --remove-empty-dirs)\n          --download-hash                        Compute hash by downloading when otherwise unavailable. (warning: may be slow and use lots of data!)\n          --filters-file string                  Read filtering patterns from a file\n          --force                                Bypass --max-delete safety check and run the sync. Consider using with --verbose\n      -h, --help                                 help for bisync\n          --ignore-listing-checksum              Do not use checksums for listings (add --ignore-checksum to additionally skip post-copy checksum checks)\n          --max-lock Duration                    Consider lock files older than this to be expired (default: 0 (never expire)) (minimum: 2m) (default 0s)\n          --no-cleanup                           Retain working files (useful for troubleshooting and testing).\n          --no-slow-hash                         Ignore listing checksums only on backends where they are slow\n          --recover                              Automatically recover from interruptions without requiring --resync.\n          --remove-empty-dirs                    Remove ALL empty directories at the final cleanup step.\n          --resilient                            Allow future runs to retry after certain less-serious errors, instead of requiring --resync. Use at your own risk!\n      -1, --resync                               Performs the resync run. Equivalent to --resync-mode path1. Consider using --verbose or --dry-run first.\n          --resync-mode string                   During resync, prefer the version that is: path1, path2, newer, older, larger, smaller (default: path1 if --resync, otherwise none for no resync.) (default \"none\")\n          --slow-hash-sync-only                  Ignore slow checksums for listings and deltas, but still consider them during sync calls.\n          --workdir string                       Use custom working dir - useful for testing. (default: {WORKDIR})\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nCopy Options\n\nFlags for anything which can copy a file\n\n          --check-first                                 Do all the checks before starting transfers\n      -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n          --compare-dest stringArray                    Include additional server-side paths during comparison\n          --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n          --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n          --ignore-case-sync                            Ignore case when synchronizing\n          --ignore-checksum                             Skip post copy check of checksums\n          --ignore-existing                             Skip all files that exist on destination\n          --ignore-size                                 Ignore size when skipping use modtime or checksum\n      -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n          --immutable                                   Do not modify files, fail if existing files have been modified\n          --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n          --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n          --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n          --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n      -M, --metadata                                    If set, preserve metadata when copying objects\n          --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n          --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n          --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n          --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n          --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n          --no-check-dest                               Don't check the destination, copy regardless\n          --no-traverse                                 Don't traverse destination file system on copy\n          --no-update-dir-modtime                       Don't update directory modification times\n          --no-update-modtime                           Don't update destination modtime if files identical\n          --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n          --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n          --refresh-times                               Refresh the modtime of remote files\n          --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n          --size-only                                   Skip based on size only, not modtime or checksum\n          --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n      -u, --update                                      Skip files that are newer on the destination\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone cat\n\nConcatenates any files and sends them to stdout.\n\nSynopsis\n\nSends any files to standard output.\n\nYou can use it like this to output a single file\n\n    rclone cat remote:path/to/file\n\nOr like this to output any file in dir or its subdirectories.\n\n    rclone cat remote:path/to/dir\n\nOr like this to output any .txt files in dir or its subdirectories.\n\n    rclone --include \"*.txt\" cat remote:path/to/dir\n\nUse the --head flag to print characters only at the start, --tail for\nthe end and --offset and --count to print a section in the middle. Note\nthat if offset is negative it will count from the end, so\n--offset -1 --count 1 is equivalent to --tail 1.\n\nUse the --separator flag to print a separator value between files. Be\nsure to shell-escape special characters. For example, to print a newline\nbetween files, use:\n\n-   bash:\n\n        rclone --include \"*.txt\" --separator $'\\n' cat remote:path/to/dir\n\n-   powershell:\n\n        rclone --include \"*.txt\" --separator \"`n\" cat remote:path/to/dir\n\n    rclone cat remote:path [flags]\n\nOptions\n\n          --count int          Only print N characters (default -1)\n          --discard            Discard the output instead of printing\n          --head int           Only print the first N characters\n      -h, --help               help for cat\n          --offset int         Start printing at offset N (or from end if -ve)\n          --separator string   Separator to use between objects when printing multiple files\n          --tail int           Only print the last N characters\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone checksum\n\nChecks the files in the destination against a SUM file.\n\nSynopsis\n\nChecks that hashsums of destination files match the SUM file. It\ncompares hashes (MD5, SHA1, etc) and logs a report of files which don't\nmatch. It doesn't alter the file system.\n\nThe sumfile is treated as the source and the dst:path is treated as the\ndestination for the purposes of the output.\n\nIf you supply the --download flag, it will download the data from the\nremote and calculate the content hash on the fly. This can be useful for\nremotes that don't support hashes or if you really want to check all the\ndata.\n\nNote that hash values in the SUM file are treated as case insensitive.\n\nIf you supply the --one-way flag, it will only check that files in the\nsource match the files in the destination, not the other way around.\nThis means that extra files in the destination that are not in the\nsource will not be detected.\n\nThe --differ, --missing-on-dst, --missing-on-src, --match and --error\nflags write paths, one per line, to the file name (or stdout if it is -)\nsupplied. What they write is described in the help below. For example\n--differ will write all paths which are present on both the source and\ndestination but different.\n\nThe --combined flag will write a file (or stdout) which contains all\nfile paths with a symbol and then a space and then the path to tell you\nwhat happened to it. These are reminiscent of diff files.\n\n-   = path means path was found in source and destination and was\n    identical\n-   `- path` means path was missing on the source, so only in the\n    destination\n-   `+ path` means path was missing on the destination, so only in the\n    source\n-   `* path` means path was present in source and destination but\n    different.\n-   ! path means there was an error reading or hashing the source or\n    dest.\n\nThe default number of parallel checks is 8. See the --checkers=N option\nfor more information.\n\n    rclone checksum <hash> sumfile dst:path [flags]\n\nOptions\n\n          --combined string         Make a combined report of changes to this file\n          --differ string           Report all non-matching files to this file\n          --download                Check by hashing the contents\n          --error string            Report all files with errors (hashing or reading) to this file\n      -h, --help                    help for checksum\n          --match string            Report all matching files to this file\n          --missing-on-dst string   Report all files missing from the destination to this file\n          --missing-on-src string   Report all files missing from the source to this file\n          --one-way                 Check one way only, source files must exist on remote\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone completion\n\nOutput completion script for a given shell.\n\nSynopsis\n\nGenerates a shell completion script for rclone. Run with --help to list\nthe supported shells.\n\nOptions\n\n      -h, --help   help for completion\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n-   rclone completion bash - Output bash completion script for rclone.\n-   rclone completion fish - Output fish completion script for rclone.\n-   rclone completion powershell - Output powershell completion script\n    for rclone.\n-   rclone completion zsh - Output zsh completion script for rclone.\n\nrclone completion bash\n\nOutput bash completion script for rclone.\n\nSynopsis\n\nGenerates a bash shell autocompletion script for rclone.\n\nBy default, when run without any arguments,\n\n    rclone completion bash\n\nthe generated script will be written to\n\n    /etc/bash_completion.d/rclone\n\nand so rclone will probably need to be run as root, or with sudo.\n\nIf you supply a path to a file as the command line argument, then the\ngenerated script will be written to that file, in which case you should\nnot need root privileges.\n\nIf output_file is \"-\", then the output will be written to stdout.\n\nIf you have installed the script into the default location, you can\nlogout and login again to use the autocompletion script.\n\nAlternatively, you can source the script directly\n\n    . /path/to/my_bash_completion_scripts/rclone\n\nand the autocompletion functionality will be added to your current\nshell.\n\n    rclone completion bash [output_file] [flags]\n\nOptions\n\n      -h, --help   help for bash\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone completion - Output completion script for a given shell.\n\nrclone completion fish\n\nOutput fish completion script for rclone.\n\nSynopsis\n\nGenerates a fish autocompletion script for rclone.\n\nThis writes to /etc/fish/completions/rclone.fish by default so will\nprobably need to be run with sudo or as root, e.g.\n\n    sudo rclone completion fish\n\nLogout and login again to use the autocompletion scripts, or source them\ndirectly\n\n    . /etc/fish/completions/rclone.fish\n\nIf you supply a command line argument the script will be written there.\n\nIf output_file is \"-\", then the output will be written to stdout.\n\n    rclone completion fish [output_file] [flags]\n\nOptions\n\n      -h, --help   help for fish\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone completion - Output completion script for a given shell.\n\nrclone completion powershell\n\nOutput powershell completion script for rclone.\n\nSynopsis\n\nGenerate the autocompletion script for powershell.\n\nTo load completions in your current shell session:\n\n    rclone completion powershell | Out-String | Invoke-Expression\n\nTo load completions for every new session, add the output of the above\ncommand to your powershell profile.\n\nIf output_file is \"-\" or missing, then the output will be written to\nstdout.\n\n    rclone completion powershell [output_file] [flags]\n\nOptions\n\n      -h, --help   help for powershell\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone completion - Output completion script for a given shell.\n\nrclone completion zsh\n\nOutput zsh completion script for rclone.\n\nSynopsis\n\nGenerates a zsh autocompletion script for rclone.\n\nThis writes to /usr/share/zsh/vendor-completions/_rclone by default so\nwill probably need to be run with sudo or as root, e.g.\n\n    sudo rclone completion zsh\n\nLogout and login again to use the autocompletion scripts, or source them\ndirectly\n\n    autoload -U compinit && compinit\n\nIf you supply a command line argument the script will be written there.\n\nIf output_file is \"-\", then the output will be written to stdout.\n\n    rclone completion zsh [output_file] [flags]\n\nOptions\n\n      -h, --help   help for zsh\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone completion - Output completion script for a given shell.\n\nrclone config create\n\nCreate a new remote with name, type and options.\n\nSynopsis\n\nCreate a new remote of name with type and options. The options should be\npassed in pairs of key value or as key=value.\n\nFor example, to make a swift remote of name myremote using auto config\nyou would do:\n\n    rclone config create myremote swift env_auth true\n    rclone config create myremote swift env_auth=true\n\nSo for example if you wanted to configure a Google Drive remote but\nusing remote authorization you would do this:\n\n    rclone config create mydrive drive config_is_local=false\n\nNote that if the config process would normally ask a question the\ndefault is taken (unless --non-interactive is used). Each time that\nhappens rclone will print or DEBUG a message saying how to affect the\nvalue taken.\n\nIf any of the parameters passed is a password field, then rclone will\nautomatically obscure them if they aren't already obscured before\nputting them in the config file.\n\nNB If the password parameter is 22 characters or longer and consists\nonly of base64 characters then rclone can get confused about whether the\npassword is already obscured or not and put unobscured passwords into\nthe config file. If you want to be 100% certain that the passwords get\nobscured then use the --obscure flag, or if you are 100% certain you are\nalready passing obscured passwords then use --no-obscure. You can also\nset obscured passwords using the rclone config password command.\n\nThe flag --non-interactive is for use by applications that wish to\nconfigure rclone themselves, rather than using rclone's text based\nconfiguration questions. If this flag is set, and rclone needs to ask\nthe user a question, a JSON blob will be returned with the question in\nit.\n\nThis will look something like (some irrelevant detail removed):\n\n    {\n        \"State\": \"*oauth-islocal,teamdrive,,\",\n        \"Option\": {\n            \"Name\": \"config_is_local\",\n            \"Help\": \"Use web browser to automatically authenticate rclone with remote?\\n * Say Y if the machine running rclone has a web browser you can use\\n * Say N if running rclone on a (remote) machine without web browser access\\nIf not sure try Y. If Y failed, try N.\\n\",\n            \"Default\": true,\n            \"Examples\": [\n                {\n                    \"Value\": \"true\",\n                    \"Help\": \"Yes\"\n                },\n                {\n                    \"Value\": \"false\",\n                    \"Help\": \"No\"\n                }\n            ],\n            \"Required\": false,\n            \"IsPassword\": false,\n            \"Type\": \"bool\",\n            \"Exclusive\": true,\n        },\n        \"Error\": \"\",\n    }\n\nThe format of Option is the same as returned by rclone config providers.\nThe question should be asked to the user and returned to rclone as the\n--result option along with the --state parameter.\n\nThe keys of Option are used as follows:\n\n-   Name - name of variable - show to user\n-   Help - help text. Hard wrapped at 80 chars. Any URLs should be\n    clicky.\n-   Default - default value - return this if the user just wants the\n    default.\n-   Examples - the user should be able to choose one of these\n-   Required - the value should be non-empty\n-   IsPassword - the value is a password and should be edited as such\n-   Type - type of value, eg bool, string, int and others\n-   Exclusive - if set no free-form entry allowed only the Examples\n-   Irrelevant keys Provider, ShortOpt, Hide, NoPrefix, Advanced\n\nIf Error is set then it should be shown to the user at the same time as\nthe question.\n\n    rclone config update name --continue --state \"*oauth-islocal,teamdrive,,\" --result \"true\"\n\nNote that when using --continue all passwords should be passed in the\nclear (not obscured). Any default config values should be passed in with\neach invocation of --continue.\n\nAt the end of the non interactive process, rclone will return a result\nwith State as empty string.\n\nIf --all is passed then rclone will ask all the config questions, not\njust the post config questions. Any parameters are used as defaults for\nquestions as usual.\n\nNote that bin/config.py in the rclone source implements this protocol as\na readable demonstration.\n\n    rclone config create name type [key value]* [flags]\n\nOptions\n\n          --all               Ask the full set of config questions\n          --continue          Continue the configuration process with an answer\n      -h, --help              help for create\n          --no-obscure        Force any passwords not to be obscured\n          --non-interactive   Don't interact with user and return questions\n          --obscure           Force any passwords to be obscured\n          --result string     Result - use with --continue\n          --state string      State - use with --continue\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config delete\n\nDelete an existing remote.\n\n    rclone config delete name [flags]\n\nOptions\n\n      -h, --help   help for delete\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config disconnect\n\nDisconnects user from remote\n\nSynopsis\n\nThis disconnects the remote: passed in to the cloud storage system.\n\nThis normally means revoking the oauth token.\n\nTo reconnect use \"rclone config reconnect\".\n\n    rclone config disconnect remote: [flags]\n\nOptions\n\n      -h, --help   help for disconnect\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config dump\n\nDump the config file as JSON.\n\n    rclone config dump [flags]\n\nOptions\n\n      -h, --help   help for dump\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config edit\n\nEnter an interactive configuration session.\n\nSynopsis\n\nEnter an interactive configuration session where you can setup new\nremotes and manage existing ones. You may also set or remove a password\nto protect your configuration.\n\n    rclone config edit [flags]\n\nOptions\n\n      -h, --help   help for edit\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config encryption\n\nset, remove and check the encryption for the config file\n\nSynopsis\n\nThis command sets, clears and checks the encryption for the config file\nusing the subcommands below.\n\nOptions\n\n      -h, --help   help for encryption\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n-   rclone config encryption check - Check that the config file is\n    encrypted\n-   rclone config encryption remove - Remove the config file encryption\n    password\n-   rclone config encryption set - Set or change the config file\n    encryption password\n\nrclone config encryption check\n\nCheck that the config file is encrypted\n\nSynopsis\n\nThis checks the config file is encrypted and that you can decrypt it.\n\nIt will attempt to decrypt the config using the password you supply.\n\nIf decryption fails it will return a non-zero exit code if using\n--password-command, otherwise it will prompt again for the password.\n\nIf the config file is not encrypted it will return a non zero exit code.\n\n    rclone config encryption check [flags]\n\nOptions\n\n      -h, --help   help for check\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config encryption - set, remove and check the encryption for\n    the config file\n\nrclone config encryption remove\n\nRemove the config file encryption password\n\nSynopsis\n\nRemove the config file encryption password\n\nThis removes the config file encryption, returning it to un-encrypted.\n\nIf --password-command is in use, this will be called to supply the old\nconfig password.\n\nIf the config was not encrypted then no error will be returned and this\ncommand will do nothing.\n\n    rclone config encryption remove [flags]\n\nOptions\n\n      -h, --help   help for remove\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config encryption - set, remove and check the encryption for\n    the config file\n\nrclone config encryption set\n\nSet or change the config file encryption password\n\nSynopsis\n\nThis command sets or changes the config file encryption password.\n\nIf there was no config password set then it sets a new one, otherwise it\nchanges the existing config password.\n\nNote that if you are changing an encryption password using\n--password-command then this will be called once to decrypt the config\nusing the old password and then again to read the new password to\nre-encrypt the config.\n\nWhen --password-command is called to change the password then the\nenvironment variable RCLONE_PASSWORD_CHANGE=1 will be set. So if\nchanging passwords programatically you can use the environment variable\nto distinguish which password you must supply.\n\nAlternatively you can remove the password first (with\nrclone config encryption remove), then set it again with this command\nwhich may be easier if you don't mind the unecrypted config file being\non the disk briefly.\n\n    rclone config encryption set [flags]\n\nOptions\n\n      -h, --help   help for set\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config encryption - set, remove and check the encryption for\n    the config file\n\nrclone config file\n\nShow path of configuration file in use.\n\n    rclone config file [flags]\n\nOptions\n\n      -h, --help   help for file\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config password\n\nUpdate password in an existing remote.\n\nSynopsis\n\nUpdate an existing remote's password. The password should be passed in\npairs of key password or as key=password. The password should be passed\nin in clear (unobscured).\n\nFor example, to set password of a remote of name myremote you would do:\n\n    rclone config password myremote fieldname mypassword\n    rclone config password myremote fieldname=mypassword\n\nThis command is obsolete now that \"config update\" and \"config create\"\nboth support obscuring passwords directly.\n\n    rclone config password name [key value]+ [flags]\n\nOptions\n\n      -h, --help   help for password\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config paths\n\nShow paths used for configuration, cache, temp etc.\n\n    rclone config paths [flags]\n\nOptions\n\n      -h, --help   help for paths\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config providers\n\nList in JSON format all the providers and options.\n\n    rclone config providers [flags]\n\nOptions\n\n      -h, --help   help for providers\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config reconnect\n\nRe-authenticates user with remote.\n\nSynopsis\n\nThis reconnects remote: passed in to the cloud storage system.\n\nTo disconnect the remote use \"rclone config disconnect\".\n\nThis normally means going through the interactive oauth flow again.\n\n    rclone config reconnect remote: [flags]\n\nOptions\n\n      -h, --help   help for reconnect\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config redacted\n\nPrint redacted (decrypted) config file, or the redacted config for a\nsingle remote.\n\nSynopsis\n\nThis prints a redacted copy of the config file, either the whole config\nfile or for a given remote.\n\nThe config file will be redacted by replacing all passwords and other\nsensitive info with XXX.\n\nThis makes the config file suitable for posting online for support.\n\nIt should be double checked before posting as the redaction may not be\nperfect.\n\n    rclone config redacted [<remote>] [flags]\n\nOptions\n\n      -h, --help   help for redacted\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config show\n\nPrint (decrypted) config file, or the config for a single remote.\n\n    rclone config show [<remote>] [flags]\n\nOptions\n\n      -h, --help   help for show\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config touch\n\nEnsure configuration file exists.\n\n    rclone config touch [flags]\n\nOptions\n\n      -h, --help   help for touch\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config update\n\nUpdate options in an existing remote.\n\nSynopsis\n\nUpdate an existing remote's options. The options should be passed in\npairs of key value or as key=value.\n\nFor example, to update the env_auth field of a remote of name myremote\nyou would do:\n\n    rclone config update myremote env_auth true\n    rclone config update myremote env_auth=true\n\nIf the remote uses OAuth the token will be updated, if you don't require\nthis add an extra parameter thus:\n\n    rclone config update myremote env_auth=true config_refresh_token=false\n\nNote that if the config process would normally ask a question the\ndefault is taken (unless --non-interactive is used). Each time that\nhappens rclone will print or DEBUG a message saying how to affect the\nvalue taken.\n\nIf any of the parameters passed is a password field, then rclone will\nautomatically obscure them if they aren't already obscured before\nputting them in the config file.\n\nNB If the password parameter is 22 characters or longer and consists\nonly of base64 characters then rclone can get confused about whether the\npassword is already obscured or not and put unobscured passwords into\nthe config file. If you want to be 100% certain that the passwords get\nobscured then use the --obscure flag, or if you are 100% certain you are\nalready passing obscured passwords then use --no-obscure. You can also\nset obscured passwords using the rclone config password command.\n\nThe flag --non-interactive is for use by applications that wish to\nconfigure rclone themselves, rather than using rclone's text based\nconfiguration questions. If this flag is set, and rclone needs to ask\nthe user a question, a JSON blob will be returned with the question in\nit.\n\nThis will look something like (some irrelevant detail removed):\n\n    {\n        \"State\": \"*oauth-islocal,teamdrive,,\",\n        \"Option\": {\n            \"Name\": \"config_is_local\",\n            \"Help\": \"Use web browser to automatically authenticate rclone with remote?\\n * Say Y if the machine running rclone has a web browser you can use\\n * Say N if running rclone on a (remote) machine without web browser access\\nIf not sure try Y. If Y failed, try N.\\n\",\n            \"Default\": true,\n            \"Examples\": [\n                {\n                    \"Value\": \"true\",\n                    \"Help\": \"Yes\"\n                },\n                {\n                    \"Value\": \"false\",\n                    \"Help\": \"No\"\n                }\n            ],\n            \"Required\": false,\n            \"IsPassword\": false,\n            \"Type\": \"bool\",\n            \"Exclusive\": true,\n        },\n        \"Error\": \"\",\n    }\n\nThe format of Option is the same as returned by rclone config providers.\nThe question should be asked to the user and returned to rclone as the\n--result option along with the --state parameter.\n\nThe keys of Option are used as follows:\n\n-   Name - name of variable - show to user\n-   Help - help text. Hard wrapped at 80 chars. Any URLs should be\n    clicky.\n-   Default - default value - return this if the user just wants the\n    default.\n-   Examples - the user should be able to choose one of these\n-   Required - the value should be non-empty\n-   IsPassword - the value is a password and should be edited as such\n-   Type - type of value, eg bool, string, int and others\n-   Exclusive - if set no free-form entry allowed only the Examples\n-   Irrelevant keys Provider, ShortOpt, Hide, NoPrefix, Advanced\n\nIf Error is set then it should be shown to the user at the same time as\nthe question.\n\n    rclone config update name --continue --state \"*oauth-islocal,teamdrive,,\" --result \"true\"\n\nNote that when using --continue all passwords should be passed in the\nclear (not obscured). Any default config values should be passed in with\neach invocation of --continue.\n\nAt the end of the non interactive process, rclone will return a result\nwith State as empty string.\n\nIf --all is passed then rclone will ask all the config questions, not\njust the post config questions. Any parameters are used as defaults for\nquestions as usual.\n\nNote that bin/config.py in the rclone source implements this protocol as\na readable demonstration.\n\n    rclone config update name [key value]+ [flags]\n\nOptions\n\n          --all               Ask the full set of config questions\n          --continue          Continue the configuration process with an answer\n      -h, --help              help for update\n          --no-obscure        Force any passwords not to be obscured\n          --non-interactive   Don't interact with user and return questions\n          --obscure           Force any passwords to be obscured\n          --result string     Result - use with --continue\n          --state string      State - use with --continue\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone config userinfo\n\nPrints info about logged in user of remote.\n\nSynopsis\n\nThis prints the details of the person logged in to the cloud storage\nsystem.\n\n    rclone config userinfo remote: [flags]\n\nOptions\n\n      -h, --help   help for userinfo\n          --json   Format output as JSON\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone config - Enter an interactive configuration session.\n\nrclone copyto\n\nCopy files from source to dest, skipping identical files.\n\nSynopsis\n\nIf source:path is a file or directory then it copies it to a file or\ndirectory named dest:path.\n\nThis can be used to upload single files to other than their current\nname. If the source is a directory then it acts exactly like the copy\ncommand.\n\nSo\n\n    rclone copyto src dst\n\nwhere src and dst are rclone paths, either remote:path or /path/to/local\nor C:.\n\nThis will:\n\n    if src is file\n        copy it to dst, overwriting an existing file if it exists\n    if src is directory\n        copy it to dst, overwriting existing files if they exist\n        see copy command for full details\n\nThis doesn't transfer files that are identical on src and dst, testing\nby size and modification time or MD5SUM. It doesn't delete files from\nthe destination.\n\nNote: Use the -P/--progress flag to view real-time transfer statistics\n\n    rclone copyto source:path dest:path [flags]\n\nOptions\n\n      -h, --help   help for copyto\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nCopy Options\n\nFlags for anything which can copy a file\n\n          --check-first                                 Do all the checks before starting transfers\n      -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n          --compare-dest stringArray                    Include additional server-side paths during comparison\n          --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n          --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n          --ignore-case-sync                            Ignore case when synchronizing\n          --ignore-checksum                             Skip post copy check of checksums\n          --ignore-existing                             Skip all files that exist on destination\n          --ignore-size                                 Ignore size when skipping use modtime or checksum\n      -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n          --immutable                                   Do not modify files, fail if existing files have been modified\n          --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n          --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n          --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n          --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n      -M, --metadata                                    If set, preserve metadata when copying objects\n          --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n          --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n          --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n          --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n          --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n          --no-check-dest                               Don't check the destination, copy regardless\n          --no-traverse                                 Don't traverse destination file system on copy\n          --no-update-dir-modtime                       Don't update directory modification times\n          --no-update-modtime                           Don't update destination modtime if files identical\n          --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n          --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n          --refresh-times                               Refresh the modtime of remote files\n          --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n          --size-only                                   Skip based on size only, not modtime or checksum\n          --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n      -u, --update                                      Skip files that are newer on the destination\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone copyurl\n\nCopy the contents of the URL supplied content to dest:path.\n\nSynopsis\n\nDownload a URL's content and copy it to the destination without saving\nit in temporary storage.\n\nSetting --auto-filename will attempt to automatically determine the\nfilename from the URL (after any redirections) and used in the\ndestination path.\n\nWith --auto-filename-header in addition, if a specific filename is set\nin HTTP headers, it will be used instead of the name from the URL. With\n--print-filename in addition, the resulting file name will be printed.\n\nSetting --no-clobber will prevent overwriting file on the destination if\nthere is one with the same name.\n\nSetting --stdout or making the output file name - will cause the output\nto be written to standard output.\n\nTroublshooting\n\nIf you can't get rclone copyurl to work then here are some things you\ncan try:\n\n-   --disable-http2 rclone will use HTTP2 if available - try disabling\n    it\n-   --bind 0.0.0.0 rclone will use IPv6 if available - try disabling it\n-   --bind ::0 to disable IPv4\n-   --user agent curl - some sites have whitelists for curl's\n    user-agent - try that\n-   Make sure the site works with curl directly\n\n    rclone copyurl https://example.com dest:path [flags]\n\nOptions\n\n      -a, --auto-filename     Get the file name from the URL and use it for destination file path\n          --header-filename   Get the file name from the Content-Disposition header\n      -h, --help              help for copyurl\n          --no-clobber        Prevent overwriting file with same name\n      -p, --print-filename    Print the resulting name from --auto-filename\n          --stdout            Write the output to stdout rather than a file\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone cryptcheck\n\nCryptcheck checks the integrity of an encrypted remote.\n\nSynopsis\n\nChecks a remote against a crypted remote. This is the equivalent of\nrunning rclone check, but able to check the checksums of the encrypted\nremote.\n\nFor it to work the underlying remote of the cryptedremote must support\nsome kind of checksum.\n\nIt works by reading the nonce from each file on the cryptedremote: and\nusing that to encrypt each file on the remote:. It then checks the\nchecksum of the underlying file on the cryptedremote: against the\nchecksum of the file it has just encrypted.\n\nUse it like this\n\n    rclone cryptcheck /path/to/files encryptedremote:path\n\nYou can use it like this also, but that will involve downloading all the\nfiles in remote:path.\n\n    rclone cryptcheck remote:path encryptedremote:path\n\nAfter it has run it will log the status of the encryptedremote:.\n\nIf you supply the --one-way flag, it will only check that files in the\nsource match the files in the destination, not the other way around.\nThis means that extra files in the destination that are not in the\nsource will not be detected.\n\nThe --differ, --missing-on-dst, --missing-on-src, --match and --error\nflags write paths, one per line, to the file name (or stdout if it is -)\nsupplied. What they write is described in the help below. For example\n--differ will write all paths which are present on both the source and\ndestination but different.\n\nThe --combined flag will write a file (or stdout) which contains all\nfile paths with a symbol and then a space and then the path to tell you\nwhat happened to it. These are reminiscent of diff files.\n\n-   = path means path was found in source and destination and was\n    identical\n-   `- path` means path was missing on the source, so only in the\n    destination\n-   `+ path` means path was missing on the destination, so only in the\n    source\n-   `* path` means path was present in source and destination but\n    different.\n-   ! path means there was an error reading or hashing the source or\n    dest.\n\nThe default number of parallel checks is 8. See the --checkers=N option\nfor more information.\n\n    rclone cryptcheck remote:path cryptedremote:path [flags]\n\nOptions\n\n          --combined string         Make a combined report of changes to this file\n          --differ string           Report all non-matching files to this file\n          --error string            Report all files with errors (hashing or reading) to this file\n      -h, --help                    help for cryptcheck\n          --match string            Report all matching files to this file\n          --missing-on-dst string   Report all files missing from the destination to this file\n          --missing-on-src string   Report all files missing from the source to this file\n          --one-way                 Check one way only, source files must exist on remote\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nCheck Options\n\nFlags used for check commands\n\n          --max-backlog int   Maximum number of objects in sync or check backlog (default 10000)\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone cryptdecode\n\nCryptdecode returns unencrypted file names.\n\nSynopsis\n\nReturns unencrypted file names when provided with a list of encrypted\nfile names. List limit is 10 items.\n\nIf you supply the --reverse flag, it will return encrypted file names.\n\nuse it like this\n\n    rclone cryptdecode encryptedremote: encryptedfilename1 encryptedfilename2\n\n    rclone cryptdecode --reverse encryptedremote: filename1 filename2\n\nAnother way to accomplish this is by using the rclone backend encode (or\ndecode) command. See the documentation on the crypt overlay for more\ninfo.\n\n    rclone cryptdecode encryptedremote: encryptedfilename [flags]\n\nOptions\n\n      -h, --help      help for cryptdecode\n          --reverse   Reverse cryptdecode, encrypts filenames\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone deletefile\n\nRemove a single file from remote.\n\nSynopsis\n\nRemove a single file from remote. Unlike delete it cannot be used to\nremove a directory and it doesn't obey include/exclude filters - if the\nspecified file exists, it will always be removed.\n\n    rclone deletefile remote:path [flags]\n\nOptions\n\n      -h, --help   help for deletefile\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone gendocs\n\nOutput markdown docs for rclone to the directory supplied.\n\nSynopsis\n\nThis produces markdown docs for the rclone commands to the directory\nsupplied. These are in a format suitable for hugo to render into the\nrclone.org website.\n\n    rclone gendocs output_directory [flags]\n\nOptions\n\n      -h, --help   help for gendocs\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone gitannex\n\nSpeaks with git-annex over stdin/stdout.\n\nSynopsis\n\nRclone's gitannex subcommand enables git-annex to store and retrieve\ncontent from an rclone remote. It is meant to be run by git-annex, not\ndirectly by users.\n\nInstallation on Linux\n\n1.  Skip this step if your version of git-annex is 10.20240430 or newer.\n    Otherwise, you must create a symlink somewhere on your PATH with a\n    particular name. This symlink helps git-annex tell rclone it wants\n    to run the \"gitannex\" subcommand.\n\n        # Create the helper symlink in \"$HOME/bin\".\n        ln -s \"$(realpath rclone)\" \"$HOME/bin/git-annex-remote-rclone-builtin\"\n\n        # Verify the new symlink is on your PATH.\n        which git-annex-remote-rclone-builtin\n\n2.  Add a new remote to your git-annex repo. This new remote will\n    connect git-annex with the rclone gitannex subcommand.\n\n    Start by asking git-annex to describe the remote's available\n    configuration parameters.\n\n        # If you skipped step 1:\n        git annex initremote MyRemote type=rclone --whatelse\n\n        # If you created a symlink in step 1:\n        git annex initremote MyRemote type=external externaltype=rclone-builtin --whatelse\n\n      NOTE: If you're porting an existing git-annex-remote-rclone remote\n      to use rclone gitannex, you can probably reuse the configuration\n      parameters verbatim without renaming them. Check parameter\n      synonyms with --whatelse as shown above.\n\n    The following example creates a new git-annex remote named\n    \"MyRemote\" that will use the rclone remote named \"SomeRcloneRemote\".\n    That rclone remote must be one configured in your rclone.conf file,\n    which can be located with rclone config file.\n\n        git annex initremote MyRemote         \\\n            type=external                     \\\n            externaltype=rclone-builtin       \\\n            encryption=none                   \\\n            rcloneremotename=SomeRcloneRemote \\\n            rcloneprefix=git-annex-content    \\\n            rclonelayout=nodir\n\n3.  Before you trust this command with your precious data, be sure to\n    test the remote. This command is very new and has not been tested on\n    many rclone backends. Caveat emptor!\n\n        git annex testremote MyRemote\n\nHappy annexing!\n\n    rclone gitannex [flags]\n\nOptions\n\n      -h, --help   help for gitannex\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone hashsum\n\nProduces a hashsum file for all the objects in the path.\n\nSynopsis\n\nProduces a hash file for all the objects in the path using the hash\nnamed. The output is in the same format as the standard md5sum/sha1sum\ntool.\n\nBy default, the hash is requested from the remote. If the hash is not\nsupported by the remote, no hash will be returned. With the download\nflag, the file will be downloaded from the remote and hashed locally\nenabling any hash for any remote.\n\nFor the MD5 and SHA1 algorithms there are also dedicated commands,\nmd5sum and sha1sum.\n\nThis command can also hash data received on standard input (stdin), by\nnot passing a remote:path, or by passing a hyphen as remote:path when\nthere is data to read (if not, the hyphen will be treated literally, as\na relative path).\n\nRun without a hash to see the list of all supported hashes, e.g.\n\n    $ rclone hashsum\n    Supported hashes are:\n      * md5\n      * sha1\n      * whirlpool\n      * crc32\n      * sha256\n\nThen\n\n    $ rclone hashsum MD5 remote:path\n\nNote that hash names are case insensitive and values are output in lower\ncase.\n\n    rclone hashsum [<hash> remote:path] [flags]\n\nOptions\n\n          --base64               Output base64 encoded hashsum\n      -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n          --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n      -h, --help                 help for hashsum\n          --output-file string   Output hashsums to a file rather than the terminal\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone link\n\nGenerate public link to file/folder.\n\nSynopsis\n\nCreate, retrieve or remove a public link to the given file or folder.\n\n    rclone link remote:path/to/file\n    rclone link remote:path/to/folder/\n    rclone link --unlink remote:path/to/folder/\n    rclone link --expire 1d remote:path/to/file\n\nIf you supply the --expire flag, it will set the expiration time\notherwise it will use the default (100 years). Note not all backends\nsupport the --expire flag - if the backend doesn't support it then the\nlink returned won't expire.\n\nUse the --unlink flag to remove existing public links to the file or\nfolder. Note not all backends support \"--unlink\" flag - those that don't\nwill just ignore it.\n\nIf successful, the last line of the output will contain the link. Exact\ncapabilities depend on the remote, but the link will always by default\nbe created with the least constraints – e.g. no expiry, no password\nprotection, accessible without account.\n\n    rclone link remote:path [flags]\n\nOptions\n\n          --expire Duration   The amount of time that the link will be valid (default off)\n      -h, --help              help for link\n          --unlink            Remove existing public link to file/folder\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone listremotes\n\nList all the remotes in the config file and defined in environment\nvariables.\n\nSynopsis\n\nLists all the available remotes from the config file, or the remotes\nmatching an optional filter.\n\nPrints the result in human-readable format by default, and as a simple\nlist of remote names, or if used with flag --long a tabular format\nincluding the remote names, types and descriptions. Using flag --json\nproduces machine-readable output instead, which always includes all\nattributes - including the source (file or environment).\n\nResult can be filtered by a filter argument which applies to all\nattributes, and/or filter flags specific for each attribute. The values\nmust be specified according to regular rclone filtering pattern syntax.\n\n    rclone listremotes [<filter>] [flags]\n\nOptions\n\n          --description string   Filter remotes by description\n      -h, --help                 help for listremotes\n          --json                 Format output as JSON\n          --long                 Show type and description in addition to name\n          --name string          Filter remotes by name\n          --order-by string      Instructions on how to order the result, e.g. 'type,name=descending'\n          --source string        Filter remotes by source, e.g. 'file' or 'environment'\n          --type string          Filter remotes by type\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone lsf\n\nList directories and objects in remote:path formatted for parsing.\n\nSynopsis\n\nList the contents of the source path (directories and objects) to\nstandard output in a form which is easy to parse by scripts. By default\nthis will just be the names of the objects and directories, one per\nline. The directories will have a / suffix.\n\nEg\n\n    $ rclone lsf swift:bucket\n    bevajer5jef\n    canole\n    diwogej7\n    ferejej3gux/\n    fubuwic\n\nUse the --format option to control what gets listed. By default this is\njust the path, but you can use these parameters to control the output:\n\n    p - path\n    s - size\n    t - modification time\n    h - hash\n    i - ID of object\n    o - Original ID of underlying object\n    m - MimeType of object if known\n    e - encrypted name\n    T - tier of storage if known, e.g. \"Hot\" or \"Cool\"\n    M - Metadata of object in JSON blob format, eg {\"key\":\"value\"}\n\nSo if you wanted the path, size and modification time, you would use\n--format \"pst\", or maybe --format \"tsp\" to put the path last.\n\nEg\n\n    $ rclone lsf  --format \"tsp\" swift:bucket\n    2016-06-25 18:55:41;60295;bevajer5jef\n    2016-06-25 18:55:43;90613;canole\n    2016-06-25 18:55:43;94467;diwogej7\n    2018-04-26 08:50:45;0;ferejej3gux/\n    2016-06-25 18:55:40;37600;fubuwic\n\nIf you specify \"h\" in the format you will get the MD5 hash by default,\nuse the --hash flag to change which hash you want. Note that this can be\nreturned as an empty string if it isn't available on the object (and for\ndirectories), \"ERROR\" if there was an error reading it from the object\nand \"UNSUPPORTED\" if that object does not support that hash type.\n\nFor example, to emulate the md5sum command you can use\n\n    rclone lsf -R --hash MD5 --format hp --separator \"  \" --files-only .\n\nEg\n\n    $ rclone lsf -R --hash MD5 --format hp --separator \"  \" --files-only swift:bucket\n    7908e352297f0f530b84a756f188baa3  bevajer5jef\n    cd65ac234e6fea5925974a51cdd865cc  canole\n    03b5341b4f234b9d984d03ad076bae91  diwogej7\n    8fd37c3810dd660778137ac3a66cc06d  fubuwic\n    99713e14a4c4ff553acaf1930fad985b  gixacuh7ku\n\n(Though \"rclone md5sum .\" is an easier way of typing this.)\n\nBy default the separator is \";\" this can be changed with the --separator\nflag. Note that separators aren't escaped in the path so putting it last\nis a good strategy.\n\nEg\n\n    $ rclone lsf  --separator \",\" --format \"tshp\" swift:bucket\n    2016-06-25 18:55:41,60295,7908e352297f0f530b84a756f188baa3,bevajer5jef\n    2016-06-25 18:55:43,90613,cd65ac234e6fea5925974a51cdd865cc,canole\n    2016-06-25 18:55:43,94467,03b5341b4f234b9d984d03ad076bae91,diwogej7\n    2018-04-26 08:52:53,0,,ferejej3gux/\n    2016-06-25 18:55:40,37600,8fd37c3810dd660778137ac3a66cc06d,fubuwic\n\nYou can output in CSV standard format. This will escape things in \" if\nthey contain ,\n\nEg\n\n    $ rclone lsf --csv --files-only --format ps remote:path\n    test.log,22355\n    test.sh,449\n    \"this file contains a comma, in the file name.txt\",6\n\nNote that the --absolute parameter is useful for making lists of files\nto pass to an rclone copy with the --files-from-raw flag.\n\nFor example, to find all the files modified within one day and copy\nthose only (without traversing the whole directory structure):\n\n    rclone lsf --absolute --files-only --max-age 1d /path/to/local > new_files\n    rclone copy --files-from-raw new_files /path/to/local remote:path\n\nThe default time format is '2006-01-02 15:04:05'. Other formats can be\nspecified with the --time-format flag. Examples:\n\n    rclone lsf remote:path --format pt --time-format 'Jan 2, 2006 at 3:04pm (MST)'\n    rclone lsf remote:path --format pt --time-format '2006-01-02 15:04:05.000000000'\n    rclone lsf remote:path --format pt --time-format '2006-01-02T15:04:05.999999999Z07:00'\n    rclone lsf remote:path --format pt --time-format RFC3339\n    rclone lsf remote:path --format pt --time-format DateOnly\n    rclone lsf remote:path --format pt --time-format max\n\n--time-format max will automatically truncate\n'2006-01-02 15:04:05.000000000' to the maximum precision supported by\nthe remote.\n\nAny of the filtering options can be applied to this command.\n\nThere are several related list commands\n\n-   ls to list size and path of objects only\n-   lsl to list modification time, size and path of objects only\n-   lsd to list directories only\n-   lsf to list objects and directories in easy to parse format\n-   lsjson to list objects and directories in JSON format\n\nls,lsl,lsd are designed to be human-readable. lsf is designed to be\nhuman and machine-readable. lsjson is designed to be machine-readable.\n\nNote that ls and lsl recurse by default - use --max-depth 1 to stop the\nrecursion.\n\nThe other list commands lsd,lsf,lsjson do not recurse by default - use\n-R to make them recurse.\n\nListing a nonexistent directory will produce an error except for remotes\nwhich can't have empty directories (e.g. s3, swift, or gcs - the\nbucket-based remotes).\n\n    rclone lsf remote:path [flags]\n\nOptions\n\n          --absolute             Put a leading / in front of path names\n          --csv                  Output in CSV format\n      -d, --dir-slash            Append a slash to directory names (default true)\n          --dirs-only            Only list directories\n          --files-only           Only list files\n      -F, --format string        Output format - see  help for details (default \"p\")\n          --hash h               Use this hash when h is used in the format MD5|SHA-1|DropboxHash (default \"md5\")\n      -h, --help                 help for lsf\n      -R, --recursive            Recurse into the listing\n      -s, --separator string     Separator for the items in the format (default \";\")\n      -t, --time-format string   Specify a custom time format, or 'max' for max precision supported by remote (default: 2006-01-02 15:04:05)\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone lsjson\n\nList directories and objects in the path in JSON format.\n\nSynopsis\n\nList directories and objects in the path in JSON format.\n\nThe output is an array of Items, where each Item looks like this:\n\n    {\n      \"Hashes\" : {\n         \"SHA-1\" : \"f572d396fae9206628714fb2ce00f72e94f2258f\",\n         \"MD5\" : \"b1946ac92492d2347c6235b4d2611184\",\n         \"DropboxHash\" : \"ecb65bb98f9d905b70458986c39fcbad7715e5f2fcc3b1f07767d7c83e2438cc\"\n      },\n      \"ID\": \"y2djkhiujf83u33\",\n      \"OrigID\": \"UYOJVTUW00Q1RzTDA\",\n      \"IsBucket\" : false,\n      \"IsDir\" : false,\n      \"MimeType\" : \"application/octet-stream\",\n      \"ModTime\" : \"2017-05-31T16:15:57.034468261+01:00\",\n      \"Name\" : \"file.txt\",\n      \"Encrypted\" : \"v0qpsdq8anpci8n929v3uu9338\",\n      \"EncryptedPath\" : \"kja9098349023498/v0qpsdq8anpci8n929v3uu9338\",\n      \"Path\" : \"full/path/goes/here/file.txt\",\n      \"Size\" : 6,\n      \"Tier\" : \"hot\",\n    }\n\nThe exact set of properties included depends on the backend:\n\n-   The property IsBucket will only be included for bucket-based\n    remotes, and only for directories that are buckets. It will always\n    be omitted when value is not true.\n-   Properties Encrypted and EncryptedPath will only be included for\n    encrypted remotes, and (as mentioned below) only if the --encrypted\n    option is set.\n\nDifferent options may also affect which properties are included:\n\n-   If --hash is not specified, the Hashes property will be omitted. The\n    types of hash can be specified with the --hash-type parameter (which\n    may be repeated). If --hash-type is set then it implies --hash.\n-   If --no-modtime is specified then ModTime will be blank. This can\n    speed things up on remotes where reading the ModTime takes an extra\n    request (e.g. s3, swift).\n-   If --no-mimetype is specified then MimeType will be blank. This can\n    speed things up on remotes where reading the MimeType takes an extra\n    request (e.g. s3, swift).\n-   If --encrypted is not specified the Encrypted and EncryptedPath\n    properties will be omitted - even for encrypted remotes.\n-   If --metadata is set then an additional Metadata property will be\n    returned. This will have metadata in rclone standard format as a\n    JSON object.\n\nThe default is to list directories and files/objects, but this can be\nchanged with the following options:\n\n-   If --dirs-only is specified then directories will be returned only,\n    no files/objects.\n-   If --files-only is specified then files will be returned only, no\n    directories.\n\nIf --stat is set then the the output is not an array of items, but\ninstead a single JSON blob will be returned about the item pointed to.\nThis will return an error if the item isn't found, however on bucket\nbased backends (like s3, gcs, b2, azureblob etc) if the item isn't found\nit will return an empty directory, as it isn't possible to tell empty\ndirectories from missing directories there.\n\nThe Path field will only show folders below the remote path being\nlisted. If \"remote:path\" contains the file \"subfolder/file.txt\", the\nPath for \"file.txt\" will be \"subfolder/file.txt\", not\n\"remote:path/subfolder/file.txt\". When used without --recursive the Path\nwill always be the same as Name.\n\nThe time is in RFC3339 format with up to nanosecond precision. The\nnumber of decimal digits in the seconds will depend on the precision\nthat the remote can hold the times, so if times are accurate to the\nnearest millisecond (e.g. Google Drive) then 3 digits will always be\nshown (\"2017-05-31T16:15:57.034+01:00\") whereas if the times are\naccurate to the nearest second (Dropbox, Box, WebDav, etc.) no digits\nwill be shown (\"2017-05-31T16:15:57+01:00\").\n\nThe whole output can be processed as a JSON blob, or alternatively it\ncan be processed line by line as each item is written on individual\nlines (except with --stat).\n\nAny of the filtering options can be applied to this command.\n\nThere are several related list commands\n\n-   ls to list size and path of objects only\n-   lsl to list modification time, size and path of objects only\n-   lsd to list directories only\n-   lsf to list objects and directories in easy to parse format\n-   lsjson to list objects and directories in JSON format\n\nls,lsl,lsd are designed to be human-readable. lsf is designed to be\nhuman and machine-readable. lsjson is designed to be machine-readable.\n\nNote that ls and lsl recurse by default - use --max-depth 1 to stop the\nrecursion.\n\nThe other list commands lsd,lsf,lsjson do not recurse by default - use\n-R to make them recurse.\n\nListing a nonexistent directory will produce an error except for remotes\nwhich can't have empty directories (e.g. s3, swift, or gcs - the\nbucket-based remotes).\n\n    rclone lsjson remote:path [flags]\n\nOptions\n\n          --dirs-only               Show only directories in the listing\n          --encrypted               Show the encrypted names\n          --files-only              Show only files in the listing\n          --hash                    Include hashes in the output (may take longer)\n          --hash-type stringArray   Show only this hash type (may be repeated)\n      -h, --help                    help for lsjson\n      -M, --metadata                Add metadata to the listing\n          --no-mimetype             Don't read the mime type (can speed things up)\n          --no-modtime              Don't read the modification time (can speed things up)\n          --original                Show the ID of the underlying Object\n      -R, --recursive               Recurse into the listing\n          --stat                    Just return the info for the pointed to file\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone mount\n\nMount the remote as file system on a mountpoint.\n\nSynopsis\n\nRclone mount allows Linux, FreeBSD, macOS and Windows to mount any of\nRclone's cloud storage systems as a file system with FUSE.\n\nFirst set up your remote using rclone config. Check it works with\nrclone ls etc.\n\nOn Linux and macOS, you can run mount in either foreground or background\n(aka daemon) mode. Mount runs in foreground mode by default. Use the\n--daemon flag to force background mode. On Windows you can run mount in\nforeground only, the flag is ignored.\n\nIn background mode rclone acts as a generic Unix mount program: the main\nprogram starts, spawns background rclone process to setup and maintain\nthe mount, waits until success or timeout and exits with appropriate\ncode (killing the child process if it fails).\n\nOn Linux/macOS/FreeBSD start the mount like this, where\n/path/to/local/mount is an empty existing directory:\n\n    rclone mount remote:path/to/files /path/to/local/mount\n\nOn Windows you can start a mount in different ways. See below for\ndetails. If foreground mount is used interactively from a console\nwindow, rclone will serve the mount and occupy the console so another\nwindow should be used to work with the mount until rclone is interrupted\ne.g. by pressing Ctrl-C.\n\nThe following examples will mount to an automatically assigned drive, to\nspecific drive letter X:, to path C:\\path\\parent\\mount (where parent\ndirectory or drive must exist, and mount must not exist, and is not\nsupported when mounting as a network drive), and the last example will\nmount as network share \\\\cloud\\remote and map it to an automatically\nassigned drive:\n\n    rclone mount remote:path/to/files *\n    rclone mount remote:path/to/files X:\n    rclone mount remote:path/to/files C:\\path\\parent\\mount\n    rclone mount remote:path/to/files \\\\cloud\\remote\n\nWhen the program ends while in foreground mode, either via Ctrl+C or\nreceiving a SIGINT or SIGTERM signal, the mount should be automatically\nstopped.\n\nWhen running in background mode the user will have to stop the mount\nmanually:\n\n    # Linux\n    fusermount -u /path/to/local/mount\n    # OS X\n    umount /path/to/local/mount\n\nThe umount operation can fail, for example when the mountpoint is busy.\nWhen that happens, it is the user's responsibility to stop the mount\nmanually.\n\nThe size of the mounted file system will be set according to information\nretrieved from the remote, the same as returned by the rclone about\ncommand. Remotes with unlimited storage may report the used size only,\nthen an additional 1 PiB of free space is assumed. If the remote does\nnot support the about feature at all, then 1 PiB is set as both the\ntotal and the free size.\n\nInstalling on Windows\n\nTo run rclone mount on Windows, you will need to download and install\nWinFsp.\n\nWinFsp is an open-source Windows File System Proxy which makes it easy\nto write user space file systems for Windows. It provides a FUSE\nemulation layer which rclone uses combination with cgofuse. Both of\nthese packages are by Bill Zissimopoulos who was very helpful during the\nimplementation of rclone mount for Windows.\n\nMounting modes on windows\n\nUnlike other operating systems, Microsoft Windows provides a different\nfilesystem type for network and fixed drives. It optimises access on the\nassumption fixed disk drives are fast and reliable, while network drives\nhave relatively high latency and less reliability. Some settings can\nalso be differentiated between the two types, for example that Windows\nExplorer should just display icons and not create preview thumbnails for\nimage and video files on network drives.\n\nIn most cases, rclone will mount the remote as a normal, fixed disk\ndrive by default. However, you can also choose to mount it as a remote\nnetwork drive, often described as a network share. If you mount an\nrclone remote using the default, fixed drive mode and experience\nunexpected program errors, freezes or other issues, consider mounting as\na network drive instead.\n\nWhen mounting as a fixed disk drive you can either mount to an unused\ndrive letter, or to a path representing a nonexistent subdirectory of an\nexisting parent directory or drive. Using the special value * will tell\nrclone to automatically assign the next available drive letter, starting\nwith Z: and moving backward. Examples:\n\n    rclone mount remote:path/to/files *\n    rclone mount remote:path/to/files X:\n    rclone mount remote:path/to/files C:\\path\\parent\\mount\n    rclone mount remote:path/to/files X:\n\nOption --volname can be used to set a custom volume name for the mounted\nfile system. The default is to use the remote name and path.\n\nTo mount as network drive, you can add option --network-mode to your\nmount command. Mounting to a directory path is not supported in this\nmode, it is a limitation Windows imposes on junctions, so the remote\nmust always be mounted to a drive letter.\n\n    rclone mount remote:path/to/files X: --network-mode\n\nA volume name specified with --volname will be used to create the\nnetwork share path. A complete UNC path, such as \\\\cloud\\remote,\noptionally with path \\\\cloud\\remote\\madeup\\path, will be used as is. Any\nother string will be used as the share part, after a default prefix\n\\\\server\\. If no volume name is specified then \\\\server\\share will be\nused. You must make sure the volume name is unique when you are mounting\nmore than one drive, or else the mount command will fail. The share name\nwill treated as the volume label for the mapped drive, shown in Windows\nExplorer etc, while the complete \\\\server\\share will be reported as the\nremote UNC path by net use etc, just like a normal network drive\nmapping.\n\nIf you specify a full network share UNC path with --volname, this will\nimplicitly set the --network-mode option, so the following two examples\nhave same result:\n\n    rclone mount remote:path/to/files X: --network-mode\n    rclone mount remote:path/to/files X: --volname \\\\server\\share\n\nYou may also specify the network share UNC path as the mountpoint\nitself. Then rclone will automatically assign a drive letter, same as\nwith * and use that as mountpoint, and instead use the UNC path\nspecified as the volume name, as if it were specified with the --volname\noption. This will also implicitly set the --network-mode option. This\nmeans the following two examples have same result:\n\n    rclone mount remote:path/to/files \\\\cloud\\remote\n    rclone mount remote:path/to/files * --volname \\\\cloud\\remote\n\nThere is yet another way to enable network mode, and to set the share\npath, and that is to pass the \"native\" libfuse/WinFsp option directly:\n--fuse-flag --VolumePrefix=\\server\\share. Note that the path must be\nwith just a single backslash prefix in this case.\n\nNote: In previous versions of rclone this was the only supported method.\n\nRead more about drive mapping\n\nSee also Limitations section below.\n\nWindows filesystem permissions\n\nThe FUSE emulation layer on Windows must convert between the POSIX-based\npermission model used in FUSE, and the permission model used in Windows,\nbased on access-control lists (ACL).\n\nThe mounted filesystem will normally get three entries in its\naccess-control list (ACL), representing permissions for the POSIX\npermission scopes: Owner, group and others. By default, the owner and\ngroup will be taken from the current user, and the built-in group\n\"Everyone\" will be used to represent others. The user/group can be\ncustomized with FUSE options \"UserName\" and \"GroupName\", e.g.\n-o UserName=user123 -o GroupName=\"Authenticated Users\". The permissions\non each entry will be set according to options --dir-perms and\n--file-perms, which takes a value in traditional Unix numeric notation.\n\nThe default permissions corresponds to\n--file-perms 0666 --dir-perms 0777, i.e. read and write permissions to\neveryone. This means you will not be able to start any programs from the\nmount. To be able to do that you must add execute permissions, e.g.\n--file-perms 0777 --dir-perms 0777 to add it to everyone. If the program\nneeds to write files, chances are you will have to enable VFS File\nCaching as well (see also limitations). Note that the default write\npermission have some restrictions for accounts other than the owner,\nspecifically it lacks the \"write extended attributes\", as explained\nnext.\n\nThe mapping of permissions is not always trivial, and the result you see\nin Windows Explorer may not be exactly like you expected. For example,\nwhen setting a value that includes write access for the group or others\nscope, this will be mapped to individual permissions \"write attributes\",\n\"write data\" and \"append data\", but not \"write extended attributes\".\nWindows will then show this as basic permission \"Special\" instead of\n\"Write\", because \"Write\" also covers the \"write extended attributes\"\npermission. When setting digit 0 for group or others, to indicate no\npermissions, they will still get individual permissions \"read\nattributes\", \"read extended attributes\" and \"read permissions\". This is\ndone for compatibility reasons, e.g. to allow users without additional\npermissions to be able to read basic metadata about files like in Unix.\n\nWinFsp 2021 (version 1.9) introduced a new FUSE option \"FileSecurity\",\nthat allows the complete specification of file security descriptors\nusing SDDL. With this you get detailed control of the resulting\npermissions, compared to use of the POSIX permissions described above,\nand no additional permissions will be added automatically for\ncompatibility with Unix. Some example use cases will following.\n\nIf you set POSIX permissions for only allowing access to the owner,\nusing --file-perms 0600 --dir-perms 0700, the user group and the\nbuilt-in \"Everyone\" group will still be given some special permissions,\nas described above. Some programs may then (incorrectly) interpret this\nas the file being accessible by everyone, for example an SSH client may\nwarn about \"unprotected private key file\". You can work around this by\nspecifying -o FileSecurity=\"D:P(A;;FA;;;OW)\", which sets file all access\n(FA) to the owner (OW), and nothing else.\n\nWhen setting write permissions then, except for the owner, this does not\ninclude the \"write extended attributes\" permission, as mentioned above.\nThis may prevent applications from writing to files, giving permission\ndenied error instead. To set working write permissions for the built-in\n\"Everyone\" group, similar to what it gets by default but with the\naddition of the \"write extended attributes\", you can specify\n-o FileSecurity=\"D:P(A;;FRFW;;;WD)\", which sets file read (FR) and file\nwrite (FW) to everyone (WD). If file execute (FX) is also needed, then\nchange to -o FileSecurity=\"D:P(A;;FRFWFX;;;WD)\", or set file all access\n(FA) to get full access permissions, including delete, with\n-o FileSecurity=\"D:P(A;;FA;;;WD)\".\n\nWindows caveats\n\nDrives created as Administrator are not visible to other accounts, not\neven an account that was elevated to Administrator with the User Account\nControl (UAC) feature. A result of this is that if you mount to a drive\nletter from a Command Prompt run as Administrator, and then try to\naccess the same drive from Windows Explorer (which does not run as\nAdministrator), you will not be able to see the mounted drive.\n\nIf you don't need to access the drive from applications running with\nadministrative privileges, the easiest way around this is to always\ncreate the mount from a non-elevated command prompt.\n\nTo make mapped drives available to the user account that created them\nregardless if elevated or not, there is a special Windows setting called\nlinked connections that can be enabled.\n\nIt is also possible to make a drive mount available to everyone on the\nsystem, by running the process creating it as the built-in SYSTEM\naccount. There are several ways to do this: One is to use the\ncommand-line utility PsExec, from Microsoft's Sysinternals suite, which\nhas option -s to start processes as the SYSTEM account. Another\nalternative is to run the mount command from a Windows Scheduled Task,\nor a Windows Service, configured to run as the SYSTEM account. A third\nalternative is to use the WinFsp.Launcher infrastructure). Read more in\nthe install documentation. Note that when running rclone as another\nuser, it will not use the configuration file from your profile unless\nyou tell it to with the --config option. Note also that it is now the\nSYSTEM account that will have the owner permissions, and other accounts\nwill have permissions according to the group or others scopes. As\nmentioned above, these will then not get the \"write extended attributes\"\npermission, and this may prevent writing to files. You can work around\nthis with the FileSecurity option, see example above.\n\nNote that mapping to a directory path, instead of a drive letter, does\nnot suffer from the same limitations.\n\nMounting on macOS\n\nMounting on macOS can be done either via built-in NFS server, macFUSE\n(also known as osxfuse) or FUSE-T. macFUSE is a traditional FUSE driver\nutilizing a macOS kernel extension (kext). FUSE-T is an alternative FUSE\nsystem which \"mounts\" via an NFSv4 local server.\n\nUnicode Normalization\n\nIt is highly recommended to keep the default of\n--no-unicode-normalization=false for all mount and serve commands on\nmacOS. For details, see vfs-case-sensitivity.\n\nNFS mount\n\nThis method spins up an NFS server using serve nfs command and mounts it\nto the specified mountpoint. If you run this in background mode using\n|--daemon|, you will need to send SIGTERM signal to the rclone process\nusing |kill| command to stop the mount.\n\nNote that --nfs-cache-handle-limit controls the maximum number of cached\nfile handles stored by the nfsmount caching handler. This should not be\nset too low or you may experience errors when trying to access files.\nThe default is 1000000, but consider lowering this limit if the server's\nsystem resource usage causes problems.\n\nmacFUSE Notes\n\nIf installing macFUSE using dmg packages from the website, rclone will\nlocate the macFUSE libraries without any further intervention. If\nhowever, macFUSE is installed using the macports package manager, the\nfollowing addition steps are required.\n\n    sudo mkdir /usr/local/lib\n    cd /usr/local/lib\n    sudo ln -s /opt/local/lib/libfuse.2.dylib\n\nFUSE-T Limitations, Caveats, and Notes\n\nThere are some limitations, caveats, and notes about how it works. These\nare current as of FUSE-T version 1.0.14.\n\nModTime update on read\n\nAs per the FUSE-T wiki:\n\n  File access and modification times cannot be set separately as it\n  seems to be an issue with the NFS client which always modifies both.\n  Can be reproduced with 'touch -m' and 'touch -a' commands\n\nThis means that viewing files with various tools, notably macOS Finder,\nwill cause rlcone to update the modification time of the file. This may\nmake rclone upload a full new copy of the file.\n\nRead Only mounts\n\nWhen mounting with --read-only, attempts to write to files will fail\nsilently as opposed to with a clear warning as in macFUSE.\n\nLimitations\n\nWithout the use of --vfs-cache-mode this can only write files\nsequentially, it can only seek when reading. This means that many\napplications won't work with their files on an rclone mount without\n--vfs-cache-mode writes or --vfs-cache-mode full. See the VFS File\nCaching section for more info. When using NFS mount on macOS, if you\ndon't specify |--vfs-cache-mode| the mount point will be read-only.\n\nThe bucket-based remotes (e.g. Swift, S3, Google Compute Storage, B2) do\nnot support the concept of empty directories, so empty directories will\nhave a tendency to disappear once they fall out of the directory cache.\n\nWhen rclone mount is invoked on Unix with --daemon flag, the main rclone\nprogram will wait for the background mount to become ready or until the\ntimeout specified by the --daemon-wait flag. On Linux it can check mount\nstatus using ProcFS so the flag in fact sets maximum time to wait, while\nthe real wait can be less. On macOS / BSD the time to wait is constant\nand the check is performed only at the end. We advise you to set wait\ntime on macOS reasonably.\n\nOnly supported on Linux, FreeBSD, OS X and Windows at the moment.\n\nrclone mount vs rclone sync/copy\n\nFile systems expect things to be 100% reliable, whereas cloud storage\nsystems are a long way from 100% reliable. The rclone sync/copy commands\ncope with this with lots of retries. However rclone mount can't use\nretries in the same way without making local copies of the uploads. Look\nat the VFS File Caching for solutions to make mount more reliable.\n\nAttribute caching\n\nYou can use the flag --attr-timeout to set the time the kernel caches\nthe attributes (size, modification time, etc.) for directory entries.\n\nThe default is 1s which caches files just long enough to avoid too many\ncallbacks to rclone from the kernel.\n\nIn theory 0s should be the correct value for filesystems which can\nchange outside the control of the kernel. However this causes quite a\nfew problems such as rclone using too much memory, rclone not serving\nfiles to samba and excessive time listing directories.\n\nThe kernel can cache the info about a file for the time given by\n--attr-timeout. You may see corruption if the remote file changes length\nduring this window. It will show up as either a truncated file or a file\nwith garbage on the end. With --attr-timeout 1s this is very unlikely\nbut not impossible. The higher you set --attr-timeout the more likely it\nis. The default setting of \"1s\" is the lowest setting which mitigates\nthe problems above.\n\nIf you set it higher (10s or 1m say) then the kernel will call back to\nrclone less often making it more efficient, however there is more chance\nof the corruption issue above.\n\nIf files don't change on the remote outside of the control of rclone\nthen there is no chance of corruption.\n\nThis is the same as setting the attr_timeout option in mount.fuse.\n\nFilters\n\nNote that all the rclone filters can be used to select a subset of the\nfiles to be visible in the mount.\n\nsystemd\n\nWhen running rclone mount as a systemd service, it is possible to use\nType=notify. In this case the service will enter the started state after\nthe mountpoint has been successfully set up. Units having the rclone\nmount service specified as a requirement will see all files and folders\nimmediately in this mode.\n\nNote that systemd runs mount units without any environment variables\nincluding PATH or HOME. This means that tilde (~) expansion will not\nwork and you should provide --config and --cache-dir explicitly as\nabsolute paths via rclone arguments. Since mounting requires the\nfusermount program, rclone will use the fallback PATH of /bin:/usr/bin\nin this scenario. Please ensure that fusermount is present on this PATH.\n\nRclone as Unix mount helper\n\nThe core Unix program /bin/mount normally takes the -t FSTYPE argument\nthen runs the /sbin/mount.FSTYPE helper program passing it mount options\nas -o key=val,... or --opt=.... Automount (classic or systemd) behaves\nin a similar way.\n\nrclone by default expects GNU-style flags --key val. To run it as a\nmount helper you should symlink rclone binary to /sbin/mount.rclone and\noptionally /usr/bin/rclonefs, e.g.\nln -s /usr/bin/rclone /sbin/mount.rclone. rclone will detect it and\ntranslate command-line arguments appropriately.\n\nNow you can run classic mounts like this:\n\n    mount sftp1:subdir /mnt/data -t rclone -o vfs_cache_mode=writes,sftp_key_file=/path/to/pem\n\nor create systemd mount units:\n\n    # /etc/systemd/system/mnt-data.mount\n    [Unit]\n    Description=Mount for /mnt/data\n    [Mount]\n    Type=rclone\n    What=sftp1:subdir\n    Where=/mnt/data\n    Options=rw,_netdev,allow_other,args2env,vfs-cache-mode=writes,config=/etc/rclone.conf,cache-dir=/var/rclone\n\noptionally accompanied by systemd automount unit\n\n    # /etc/systemd/system/mnt-data.automount\n    [Unit]\n    Description=AutoMount for /mnt/data\n    [Automount]\n    Where=/mnt/data\n    TimeoutIdleSec=600\n    [Install]\n    WantedBy=multi-user.target\n\nor add in /etc/fstab a line like\n\n    sftp1:subdir /mnt/data rclone rw,noauto,nofail,_netdev,x-systemd.automount,args2env,vfs_cache_mode=writes,config=/etc/rclone.conf,cache_dir=/var/cache/rclone 0 0\n\nor use classic Automountd. Remember to provide explicit\nconfig=...,cache-dir=... as a workaround for mount units being run\nwithout HOME.\n\nRclone in the mount helper mode will split -o argument(s) by comma,\nreplace _ by - and prepend -- to get the command-line flags. Options\ncontaining commas or spaces can be wrapped in single or double quotes.\nAny inner quotes inside outer quotes of the same type should be doubled.\n\nMount option syntax includes a few extra options treated specially:\n\n-   env.NAME=VALUE will set an environment variable for the mount\n    process. This helps with Automountd and Systemd.mount which don't\n    allow setting custom environment for mount helpers. Typically you\n    will use env.HTTPS_PROXY=proxy.host:3128 or env.HOME=/root\n-   command=cmount can be used to run cmount or any other rclone command\n    rather than the default mount.\n-   args2env will pass mount options to the mount helper running in\n    background via environment variables instead of command line\n    arguments. This allows to hide secrets from such commands as ps or\n    pgrep.\n-   vv... will be transformed into appropriate --verbose=N\n-   standard mount options like x-systemd.automount, _netdev, nosuid and\n    alike are intended only for Automountd and ignored by rclone.\n\nVFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk filing\nsystem.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the VFS\nlayer has to deal with that. Because there is no one right way of doing\nthis there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n\nVFS Directory Cache\n\nUsing the --dir-cache-time flag, you can control how long a directory\nshould be considered up to date and not refreshed from the backend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges. If the backend supports polling, changes will be picked up\nwithin the polling interval.\n\nYou can send a SIGHUP signal to rclone for it to flush all directory\ncaches, regardless of how old they are. Assuming only one rclone\ninstance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\nVFS File Buffering\n\nThe --buffer-size flag determines the amount of memory, that will be\nused to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file. The buffer\nwill only use memory for data that is downloaded but not not yet read.\nIf the buffer is empty, only a small amount of memory will be used.\n\nThe maximum memory used by rclone for buffering can be up to\n--buffer-size * open files.\n\nVFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file. See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with -vv rclone will print the location of the file cache. The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with --cache-dir or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by --vfs-cache-mode. The higher\nthe cache mode the more compatible rclone becomes at the cost of using\ndisk space.\n\nNote that files are written back to the remote only when they are closed\nand if they haven't been accessed for --vfs-write-back seconds. If\nrclone is quit or dies with files that haven't been uploaded, these will\nbe uploaded next time rclone is run with the same flags.\n\nIf using --vfs-cache-max-size or --vfs-cache-min-free-size note that the\ncache may exceed these quotas for two reasons. Firstly because it is\nonly checked every --vfs-cache-poll-interval. Secondly because open\nfiles cannot be evicted from the cache. When --vfs-cache-max-size or\n--vfs-cache-min-free-size is exceeded, rclone will attempt to evict the\nleast accessed files from the cache first. rclone will start with files\nthat haven't been accessed for the longest. This cache flushing strategy\nis efficient and more relevant files are likely to remain cached.\n\nThe --vfs-cache-max-age will evict files from the cache after the set\ntime since last access has passed. The default value of 1 hour will\nstart evicting files from cache that haven't been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting. Specify the time with standard\nnotation, s, m, h, d, w .\n\nYou should not run two copies of rclone using the same VFS cache with\nthe same or overlapping remotes if using --vfs-cache-mode > off. This\ncan potentially cause data corruption if you do. You can work around\nthis by giving each rclone its own cache hierarchy with --cache-dir. You\ndon't need to worry about this if the remotes in use don't overlap.\n\n--vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n-   Files can't be opened for both read AND write\n-   Files opened for write can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files open for read with O_TRUNC will be opened write only\n-   Files open for write only will behave as if O_TRUNC was supplied\n-   Open modes O_APPEND, O_TRUNC are ignored\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk. This means that files opened for write\nwill be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n-   Files opened for write only can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files opened for write only will ignore O_APPEND, O_TRUNC\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n--vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to --vfs-cache-mode writes.\n\nWhen reading a file rclone will read --buffer-size plus --vfs-read-ahead\nbytes ahead. The --buffer-size is buffered in memory whereas the\n--vfs-read-ahead is buffered on disk.\n\nWhen using this mode it is recommended that --buffer-size is not set too\nlarge and --vfs-read-ahead is set large if required.\n\nIMPORTANT not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache directory\nis on a filesystem which doesn't support sparse files and it will log an\nERROR message if one is detected.\n\nFingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file. Fingerprints are made from:\n\n-   size\n-   modification time\n-   hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n\nFor example hash is slow with the local and sftp backends as they have\nto read the entire file and hash it, and modtime is slow with the s3,\nswift, ftp and qinqstor backends because they need to do an extra API\ncall to fetch it.\n\nIf you use the --vfs-fast-fingerprint flag then rclone will not include\nthe slow operations in the fingerprint. This makes the fingerprinting\nless accurate but much faster and will improve the opening time of\ncached files.\n\nIf you are running a vfs cache over local, s3 or swift backends then\nusing this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n\nVFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the chunk\nspecified. This can reduce the used download quota for some remotes by\nrequesting only chunks from the remote that are actually read, at the\ncost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the\n--vfs-read-chunk-streams parameter.\n\n--vfs-read-chunk-streams == 0\n\nRclone will start reading a chunk of size --vfs-read-chunk-size, and\nthen double the size for each read. When --vfs-read-chunk-size-limit is\nspecified, and greater than --vfs-read-chunk-size, the chunk size for\neach open file will get doubled only until the specified value is\nreached. If the value is \"off\", which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n\nWith --vfs-read-chunk-size 100M and --vfs-read-chunk-size-limit 0 the\nfollowing parts will be downloaded: 0-100M, 100M-200M, 200M-300M,\n300M-400M and so on. When --vfs-read-chunk-size-limit 500M is specified,\nthe result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M,\n1200M-1700M and so on.\n\nSetting --vfs-read-chunk-size to 0 or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n--vfs-read-chunk-streams > 0\n\nRclone reads --vfs-read-chunk-streams chunks of size\n--vfs-read-chunk-size concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n--vfs-read-chunk-size and --vfs-read-chunk-streams as these will depend\non the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be --vfs-read-chunk-streams 16 and --vfs-read-chunk-size 4M.\nIn testing with AWS S3 the performance scaled roughly as the\n--vfs-read-chunk-streams setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more --vfs-read-chunk-streams in order to get\nthe throughput.\n\nVFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the chunked reading feature.\n\nIn particular S3 and Swift benefit hugely from the --no-modtime flag (or\nuse --use-server-modtime for a slightly different effect) as each read\nof the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather than\nseeking rclone will wait a short time for the in sequence read or write\nto come in. These flags only come into effect when not using an on disk\ncache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (--vfs-cache-mode with value writes or\nfull), the global flag --transfers can be set to adjust the number of\nparallel uploads of modified files from the cache (the related global\nflag --checkers has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\nVFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery. It is not allowed for two files in the same directory to differ\nonly by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to\nmake macOS file systems case-sensitive but that is not the default.\n\nThe --vfs-case-insensitive VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the\nremote as-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers to an\nexisting file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the\nsame name is not found but a name differing only by case exists, rclone\nwill transparently fixup the name. This fixup happens only when an\nexisting file is requested. Case sensitivity of file names created anew\nby rclone is controlled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source). The flag controls whether \"fixup\" is performed to\nsatisfy the target.\n\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \"true\" on Windows and\nmacOS, \"false\" otherwise. If the flag is provided without a value, then\nit is \"true\".\n\nThe --no-unicode-normalization flag controls whether a similar \"fixup\"\nis performed for filenames that differ but are canonically equivalent\nwith respect to unicode. Unicode normalization can be particularly\nhelpful for users of macOS, which prefers form NFD instead of the NFC\nused by most other platforms. It is therefore highly recommended to keep\nthe default of false on macOS, to avoid encoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n--vfs-block-norm-dupes flag allows hiding these duplicates. This comes\nwith a performance tradeoff, as rclone will have to scan the entire\ndirectory for duplicates when listing a directory. For this reason, it\nis recommended to leave this disabled if not needed. However, macOS\nusers may wish to consider using it, as otherwise, if a remote directory\ncontains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the\nmount, and both will appear to be editable, however, editing either\nversion will actually result in only the NFD version getting edited\nunder the hood. --vfs-block- norm-dupes prevents this confusion by\ndetecting this scenario, hiding the duplicates, and logging an error,\nsimilar to how this is handled in rclone sync.\n\nVFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing\nsystem. It can be useful when those statistics cannot be read correctly\nautomatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\nAlternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running df on the\nfilesystem, then pass the flag --vfs-used-is-size to rclone. With this\nflag set, instead of relying on the backend to report this information,\nrclone will scan the whole remote similar to rclone size and compute the\ntotal used space itself.\n\nWARNING. Contrary to rclone size, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots\nof API calls resulting in extra charges. Use it as a last resort and\nonly with caching.\n\n    rclone mount remote:path /path/to/mountpoint [flags]\n\nOptions\n\n          --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n          --allow-other                            Allow access to other users (not supported on Windows)\n          --allow-root                             Allow access to root user (not supported on Windows)\n          --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n          --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n          --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n          --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n          --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n          --debug-fuse                             Debug the FUSE internals - needs -v\n          --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n          --devname string                         Set the device name - default is remote:path\n          --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n          --dir-perms FileMode                     Directory permissions (default 777)\n          --direct-io                              Use Direct IO, disables caching of data\n          --file-perms FileMode                    File permissions (default 666)\n          --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n          --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n      -h, --help                                   help for mount\n          --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n          --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n          --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n          --no-checksum                            Don't compare checksums on up/download\n          --no-modtime                             Don't read/write the modification time (can speed things up)\n          --no-seek                                Don't allow seeking in files\n          --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n          --noapplexattr                           Ignore all \"com.apple.*\" extended attributes (supported on OSX only)\n      -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n          --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n          --read-only                              Only allow read-only access\n          --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n          --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n          --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n          --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n          --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n          --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n          --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n          --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n          --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n          --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n          --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n          --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n          --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n          --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n          --vfs-read-chunk-streams int             The number of parallel streams to read at once\n          --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n          --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n          --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n          --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n          --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n          --volname string                         Set the volume name (supported on Windows and OSX only)\n          --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone moveto\n\nMove file or directory from source to dest.\n\nSynopsis\n\nIf source:path is a file or directory then it moves it to a file or\ndirectory named dest:path.\n\nThis can be used to rename files or upload single files to other than\ntheir existing name. If the source is a directory then it acts exactly\nlike the move command.\n\nSo\n\n    rclone moveto src dst\n\nwhere src and dst are rclone paths, either remote:path or /path/to/local\nor C:.\n\nThis will:\n\n    if src is file\n        move it to dst, overwriting an existing file if it exists\n    if src is directory\n        move it to dst, overwriting existing files if they exist\n        see move command for full details\n\nThis doesn't transfer files that are identical on src and dst, testing\nby size and modification time or MD5SUM. src will be deleted on\nsuccessful transfer.\n\nImportant: Since this can cause data loss, test first with the --dry-run\nor the --interactive/-i flag.\n\nNote: Use the -P/--progress flag to view real-time transfer statistics.\n\n    rclone moveto source:path dest:path [flags]\n\nOptions\n\n      -h, --help   help for moveto\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nCopy Options\n\nFlags for anything which can copy a file\n\n          --check-first                                 Do all the checks before starting transfers\n      -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n          --compare-dest stringArray                    Include additional server-side paths during comparison\n          --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n          --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n          --ignore-case-sync                            Ignore case when synchronizing\n          --ignore-checksum                             Skip post copy check of checksums\n          --ignore-existing                             Skip all files that exist on destination\n          --ignore-size                                 Ignore size when skipping use modtime or checksum\n      -I, --ignore-times                                Don't skip items that match size and time - transfer all unconditionally\n          --immutable                                   Do not modify files, fail if existing files have been modified\n          --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n          --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n          --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n          --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n      -M, --metadata                                    If set, preserve metadata when copying objects\n          --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n          --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n          --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n          --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n          --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n          --no-check-dest                               Don't check the destination, copy regardless\n          --no-traverse                                 Don't traverse destination file system on copy\n          --no-update-dir-modtime                       Don't update directory modification times\n          --no-update-modtime                           Don't update destination modtime if files identical\n          --order-by string                             Instructions on how to order the transfers, e.g. 'size,descending'\n          --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \".partial\")\n          --refresh-times                               Refresh the modtime of remote files\n          --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n          --size-only                                   Skip based on size only, not modtime or checksum\n          --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n      -u, --update                                      Skip files that are newer on the destination\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone ncdu\n\nExplore a remote with a text based user interface.\n\nSynopsis\n\nThis displays a text based user interface allowing the navigation of a\nremote. It is most useful for answering the question - \"What is using\nall my disk space?\".\n\nTo make the user interface it first scans the entire remote given and\nbuilds an in memory representation. rclone ncdu can be used during this\nscanning phase and you will see it building up the directory structure\nas it goes along.\n\nYou can interact with the user interface using key presses, press '?' to\ntoggle the help on and off. The supported keys are:\n\n     ↑,↓ or k,j to Move\n     →,l to enter\n     ←,h to return\n     g toggle graph\n     c toggle counts\n     a toggle average size in directory\n     m toggle modified time\n     u toggle human-readable format\n     n,s,C,A,M sort by name,size,count,asize,mtime\n     d delete file/directory\n     v select file/directory\n     V enter visual select mode\n     D delete selected files/directories\n     y copy current path to clipboard\n     Y display current path\n     ^L refresh screen (fix screen corruption)\n     r recalculate file sizes\n     ? to toggle help on and off\n     ESC to close the menu box\n     q/^c to quit\n\nListed files/directories may be prefixed by a one-character flag, some\nof them combined with a description in brackets at end of line. These\nflags have the following meaning:\n\n    e means this is an empty directory, i.e. contains no files (but\n      may contain empty subdirectories)\n    ~ means this is a directory where some of the files (possibly in\n      subdirectories) have unknown size, and therefore the directory\n      size may be underestimated (and average size inaccurate, as it\n      is average of the files with known sizes).\n    . means an error occurred while reading a subdirectory, and\n      therefore the directory size may be underestimated (and average\n      size inaccurate)\n    ! means an error occurred while reading this directory\n\nThis an homage to the ncdu tool but for rclone remotes. It is missing\nlots of features at the moment but is useful as it stands. Unlike ncdu\nit does not show excluded files.\n\nNote that it might take some time to delete big files/directories. The\nUI won't respond in the meantime since the deletion is done\nsynchronously.\n\nFor a non-interactive listing of the remote, see the tree command. To\njust get the total size of the remote you can also use the size command.\n\n    rclone ncdu remote:path [flags]\n\nOptions\n\n      -h, --help   help for ncdu\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nListing Options\n\nFlags for listing directories\n\n          --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n          --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone nfsmount\n\nMount the remote as file system on a mountpoint.\n\nSynopsis\n\nRclone nfsmount allows Linux, FreeBSD, macOS and Windows to mount any of\nRclone's cloud storage systems as a file system with FUSE.\n\nFirst set up your remote using rclone config. Check it works with\nrclone ls etc.\n\nOn Linux and macOS, you can run mount in either foreground or background\n(aka daemon) mode. Mount runs in foreground mode by default. Use the\n--daemon flag to force background mode. On Windows you can run mount in\nforeground only, the flag is ignored.\n\nIn background mode rclone acts as a generic Unix mount program: the main\nprogram starts, spawns background rclone process to setup and maintain\nthe mount, waits until success or timeout and exits with appropriate\ncode (killing the child process if it fails).\n\nOn Linux/macOS/FreeBSD start the mount like this, where\n/path/to/local/mount is an empty existing directory:\n\n    rclone nfsmount remote:path/to/files /path/to/local/mount\n\nOn Windows you can start a mount in different ways. See below for\ndetails. If foreground mount is used interactively from a console\nwindow, rclone will serve the mount and occupy the console so another\nwindow should be used to work with the mount until rclone is interrupted\ne.g. by pressing Ctrl-C.\n\nThe following examples will mount to an automatically assigned drive, to\nspecific drive letter X:, to path C:\\path\\parent\\mount (where parent\ndirectory or drive must exist, and mount must not exist, and is not\nsupported when mounting as a network drive), and the last example will\nmount as network share \\\\cloud\\remote and map it to an automatically\nassigned drive:\n\n    rclone nfsmount remote:path/to/files *\n    rclone nfsmount remote:path/to/files X:\n    rclone nfsmount remote:path/to/files C:\\path\\parent\\mount\n    rclone nfsmount remote:path/to/files \\\\cloud\\remote\n\nWhen the program ends while in foreground mode, either via Ctrl+C or\nreceiving a SIGINT or SIGTERM signal, the mount should be automatically\nstopped.\n\nWhen running in background mode the user will have to stop the mount\nmanually:\n\n    # Linux\n    fusermount -u /path/to/local/mount\n    # OS X\n    umount /path/to/local/mount\n\nThe umount operation can fail, for example when the mountpoint is busy.\nWhen that happens, it is the user's responsibility to stop the mount\nmanually.\n\nThe size of the mounted file system will be set according to information\nretrieved from the remote, the same as returned by the rclone about\ncommand. Remotes with unlimited storage may report the used size only,\nthen an additional 1 PiB of free space is assumed. If the remote does\nnot support the about feature at all, then 1 PiB is set as both the\ntotal and the free size.\n\nInstalling on Windows\n\nTo run rclone nfsmount on Windows, you will need to download and install\nWinFsp.\n\nWinFsp is an open-source Windows File System Proxy which makes it easy\nto write user space file systems for Windows. It provides a FUSE\nemulation layer which rclone uses combination with cgofuse. Both of\nthese packages are by Bill Zissimopoulos who was very helpful during the\nimplementation of rclone nfsmount for Windows.\n\nMounting modes on windows\n\nUnlike other operating systems, Microsoft Windows provides a different\nfilesystem type for network and fixed drives. It optimises access on the\nassumption fixed disk drives are fast and reliable, while network drives\nhave relatively high latency and less reliability. Some settings can\nalso be differentiated between the two types, for example that Windows\nExplorer should just display icons and not create preview thumbnails for\nimage and video files on network drives.\n\nIn most cases, rclone will mount the remote as a normal, fixed disk\ndrive by default. However, you can also choose to mount it as a remote\nnetwork drive, often described as a network share. If you mount an\nrclone remote using the default, fixed drive mode and experience\nunexpected program errors, freezes or other issues, consider mounting as\na network drive instead.\n\nWhen mounting as a fixed disk drive you can either mount to an unused\ndrive letter, or to a path representing a nonexistent subdirectory of an\nexisting parent directory or drive. Using the special value * will tell\nrclone to automatically assign the next available drive letter, starting\nwith Z: and moving backward. Examples:\n\n    rclone nfsmount remote:path/to/files *\n    rclone nfsmount remote:path/to/files X:\n    rclone nfsmount remote:path/to/files C:\\path\\parent\\mount\n    rclone nfsmount remote:path/to/files X:\n\nOption --volname can be used to set a custom volume name for the mounted\nfile system. The default is to use the remote name and path.\n\nTo mount as network drive, you can add option --network-mode to your\nnfsmount command. Mounting to a directory path is not supported in this\nmode, it is a limitation Windows imposes on junctions, so the remote\nmust always be mounted to a drive letter.\n\n    rclone nfsmount remote:path/to/files X: --network-mode\n\nA volume name specified with --volname will be used to create the\nnetwork share path. A complete UNC path, such as \\\\cloud\\remote,\noptionally with path \\\\cloud\\remote\\madeup\\path, will be used as is. Any\nother string will be used as the share part, after a default prefix\n\\\\server\\. If no volume name is specified then \\\\server\\share will be\nused. You must make sure the volume name is unique when you are mounting\nmore than one drive, or else the mount command will fail. The share name\nwill treated as the volume label for the mapped drive, shown in Windows\nExplorer etc, while the complete \\\\server\\share will be reported as the\nremote UNC path by net use etc, just like a normal network drive\nmapping.\n\nIf you specify a full network share UNC path with --volname, this will\nimplicitly set the --network-mode option, so the following two examples\nhave same result:\n\n    rclone nfsmount remote:path/to/files X: --network-mode\n    rclone nfsmount remote:path/to/files X: --volname \\\\server\\share\n\nYou may also specify the network share UNC path as the mountpoint\nitself. Then rclone will automatically assign a drive letter, same as\nwith * and use that as mountpoint, and instead use the UNC path\nspecified as the volume name, as if it were specified with the --volname\noption. This will also implicitly set the --network-mode option. This\nmeans the following two examples have same result:\n\n    rclone nfsmount remote:path/to/files \\\\cloud\\remote\n    rclone nfsmount remote:path/to/files * --volname \\\\cloud\\remote\n\nThere is yet another way to enable network mode, and to set the share\npath, and that is to pass the \"native\" libfuse/WinFsp option directly:\n--fuse-flag --VolumePrefix=\\server\\share. Note that the path must be\nwith just a single backslash prefix in this case.\n\nNote: In previous versions of rclone this was the only supported method.\n\nRead more about drive mapping\n\nSee also Limitations section below.\n\nWindows filesystem permissions\n\nThe FUSE emulation layer on Windows must convert between the POSIX-based\npermission model used in FUSE, and the permission model used in Windows,\nbased on access-control lists (ACL).\n\nThe mounted filesystem will normally get three entries in its\naccess-control list (ACL), representing permissions for the POSIX\npermission scopes: Owner, group and others. By default, the owner and\ngroup will be taken from the current user, and the built-in group\n\"Everyone\" will be used to represent others. The user/group can be\ncustomized with FUSE options \"UserName\" and \"GroupName\", e.g.\n-o UserName=user123 -o GroupName=\"Authenticated Users\". The permissions\non each entry will be set according to options --dir-perms and\n--file-perms, which takes a value in traditional Unix numeric notation.\n\nThe default permissions corresponds to\n--file-perms 0666 --dir-perms 0777, i.e. read and write permissions to\neveryone. This means you will not be able to start any programs from the\nmount. To be able to do that you must add execute permissions, e.g.\n--file-perms 0777 --dir-perms 0777 to add it to everyone. If the program\nneeds to write files, chances are you will have to enable VFS File\nCaching as well (see also limitations). Note that the default write\npermission have some restrictions for accounts other than the owner,\nspecifically it lacks the \"write extended attributes\", as explained\nnext.\n\nThe mapping of permissions is not always trivial, and the result you see\nin Windows Explorer may not be exactly like you expected. For example,\nwhen setting a value that includes write access for the group or others\nscope, this will be mapped to individual permissions \"write attributes\",\n\"write data\" and \"append data\", but not \"write extended attributes\".\nWindows will then show this as basic permission \"Special\" instead of\n\"Write\", because \"Write\" also covers the \"write extended attributes\"\npermission. When setting digit 0 for group or others, to indicate no\npermissions, they will still get individual permissions \"read\nattributes\", \"read extended attributes\" and \"read permissions\". This is\ndone for compatibility reasons, e.g. to allow users without additional\npermissions to be able to read basic metadata about files like in Unix.\n\nWinFsp 2021 (version 1.9) introduced a new FUSE option \"FileSecurity\",\nthat allows the complete specification of file security descriptors\nusing SDDL. With this you get detailed control of the resulting\npermissions, compared to use of the POSIX permissions described above,\nand no additional permissions will be added automatically for\ncompatibility with Unix. Some example use cases will following.\n\nIf you set POSIX permissions for only allowing access to the owner,\nusing --file-perms 0600 --dir-perms 0700, the user group and the\nbuilt-in \"Everyone\" group will still be given some special permissions,\nas described above. Some programs may then (incorrectly) interpret this\nas the file being accessible by everyone, for example an SSH client may\nwarn about \"unprotected private key file\". You can work around this by\nspecifying -o FileSecurity=\"D:P(A;;FA;;;OW)\", which sets file all access\n(FA) to the owner (OW), and nothing else.\n\nWhen setting write permissions then, except for the owner, this does not\ninclude the \"write extended attributes\" permission, as mentioned above.\nThis may prevent applications from writing to files, giving permission\ndenied error instead. To set working write permissions for the built-in\n\"Everyone\" group, similar to what it gets by default but with the\naddition of the \"write extended attributes\", you can specify\n-o FileSecurity=\"D:P(A;;FRFW;;;WD)\", which sets file read (FR) and file\nwrite (FW) to everyone (WD). If file execute (FX) is also needed, then\nchange to -o FileSecurity=\"D:P(A;;FRFWFX;;;WD)\", or set file all access\n(FA) to get full access permissions, including delete, with\n-o FileSecurity=\"D:P(A;;FA;;;WD)\".\n\nWindows caveats\n\nDrives created as Administrator are not visible to other accounts, not\neven an account that was elevated to Administrator with the User Account\nControl (UAC) feature. A result of this is that if you mount to a drive\nletter from a Command Prompt run as Administrator, and then try to\naccess the same drive from Windows Explorer (which does not run as\nAdministrator), you will not be able to see the mounted drive.\n\nIf you don't need to access the drive from applications running with\nadministrative privileges, the easiest way around this is to always\ncreate the mount from a non-elevated command prompt.\n\nTo make mapped drives available to the user account that created them\nregardless if elevated or not, there is a special Windows setting called\nlinked connections that can be enabled.\n\nIt is also possible to make a drive mount available to everyone on the\nsystem, by running the process creating it as the built-in SYSTEM\naccount. There are several ways to do this: One is to use the\ncommand-line utility PsExec, from Microsoft's Sysinternals suite, which\nhas option -s to start processes as the SYSTEM account. Another\nalternative is to run the mount command from a Windows Scheduled Task,\nor a Windows Service, configured to run as the SYSTEM account. A third\nalternative is to use the WinFsp.Launcher infrastructure). Read more in\nthe install documentation. Note that when running rclone as another\nuser, it will not use the configuration file from your profile unless\nyou tell it to with the --config option. Note also that it is now the\nSYSTEM account that will have the owner permissions, and other accounts\nwill have permissions according to the group or others scopes. As\nmentioned above, these will then not get the \"write extended attributes\"\npermission, and this may prevent writing to files. You can work around\nthis with the FileSecurity option, see example above.\n\nNote that mapping to a directory path, instead of a drive letter, does\nnot suffer from the same limitations.\n\nMounting on macOS\n\nMounting on macOS can be done either via built-in NFS server, macFUSE\n(also known as osxfuse) or FUSE-T. macFUSE is a traditional FUSE driver\nutilizing a macOS kernel extension (kext). FUSE-T is an alternative FUSE\nsystem which \"mounts\" via an NFSv4 local server.\n\nUnicode Normalization\n\nIt is highly recommended to keep the default of\n--no-unicode-normalization=false for all mount and serve commands on\nmacOS. For details, see vfs-case-sensitivity.\n\nNFS mount\n\nThis method spins up an NFS server using serve nfs command and mounts it\nto the specified mountpoint. If you run this in background mode using\n|--daemon|, you will need to send SIGTERM signal to the rclone process\nusing |kill| command to stop the mount.\n\nNote that --nfs-cache-handle-limit controls the maximum number of cached\nfile handles stored by the nfsmount caching handler. This should not be\nset too low or you may experience errors when trying to access files.\nThe default is 1000000, but consider lowering this limit if the server's\nsystem resource usage causes problems.\n\nmacFUSE Notes\n\nIf installing macFUSE using dmg packages from the website, rclone will\nlocate the macFUSE libraries without any further intervention. If\nhowever, macFUSE is installed using the macports package manager, the\nfollowing addition steps are required.\n\n    sudo mkdir /usr/local/lib\n    cd /usr/local/lib\n    sudo ln -s /opt/local/lib/libfuse.2.dylib\n\nFUSE-T Limitations, Caveats, and Notes\n\nThere are some limitations, caveats, and notes about how it works. These\nare current as of FUSE-T version 1.0.14.\n\nModTime update on read\n\nAs per the FUSE-T wiki:\n\n  File access and modification times cannot be set separately as it\n  seems to be an issue with the NFS client which always modifies both.\n  Can be reproduced with 'touch -m' and 'touch -a' commands\n\nThis means that viewing files with various tools, notably macOS Finder,\nwill cause rlcone to update the modification time of the file. This may\nmake rclone upload a full new copy of the file.\n\nRead Only mounts\n\nWhen mounting with --read-only, attempts to write to files will fail\nsilently as opposed to with a clear warning as in macFUSE.\n\nLimitations\n\nWithout the use of --vfs-cache-mode this can only write files\nsequentially, it can only seek when reading. This means that many\napplications won't work with their files on an rclone mount without\n--vfs-cache-mode writes or --vfs-cache-mode full. See the VFS File\nCaching section for more info. When using NFS mount on macOS, if you\ndon't specify |--vfs-cache-mode| the mount point will be read-only.\n\nThe bucket-based remotes (e.g. Swift, S3, Google Compute Storage, B2) do\nnot support the concept of empty directories, so empty directories will\nhave a tendency to disappear once they fall out of the directory cache.\n\nWhen rclone mount is invoked on Unix with --daemon flag, the main rclone\nprogram will wait for the background mount to become ready or until the\ntimeout specified by the --daemon-wait flag. On Linux it can check mount\nstatus using ProcFS so the flag in fact sets maximum time to wait, while\nthe real wait can be less. On macOS / BSD the time to wait is constant\nand the check is performed only at the end. We advise you to set wait\ntime on macOS reasonably.\n\nOnly supported on Linux, FreeBSD, OS X and Windows at the moment.\n\nrclone nfsmount vs rclone sync/copy\n\nFile systems expect things to be 100% reliable, whereas cloud storage\nsystems are a long way from 100% reliable. The rclone sync/copy commands\ncope with this with lots of retries. However rclone nfsmount can't use\nretries in the same way without making local copies of the uploads. Look\nat the VFS File Caching for solutions to make nfsmount more reliable.\n\nAttribute caching\n\nYou can use the flag --attr-timeout to set the time the kernel caches\nthe attributes (size, modification time, etc.) for directory entries.\n\nThe default is 1s which caches files just long enough to avoid too many\ncallbacks to rclone from the kernel.\n\nIn theory 0s should be the correct value for filesystems which can\nchange outside the control of the kernel. However this causes quite a\nfew problems such as rclone using too much memory, rclone not serving\nfiles to samba and excessive time listing directories.\n\nThe kernel can cache the info about a file for the time given by\n--attr-timeout. You may see corruption if the remote file changes length\nduring this window. It will show up as either a truncated file or a file\nwith garbage on the end. With --attr-timeout 1s this is very unlikely\nbut not impossible. The higher you set --attr-timeout the more likely it\nis. The default setting of \"1s\" is the lowest setting which mitigates\nthe problems above.\n\nIf you set it higher (10s or 1m say) then the kernel will call back to\nrclone less often making it more efficient, however there is more chance\nof the corruption issue above.\n\nIf files don't change on the remote outside of the control of rclone\nthen there is no chance of corruption.\n\nThis is the same as setting the attr_timeout option in mount.fuse.\n\nFilters\n\nNote that all the rclone filters can be used to select a subset of the\nfiles to be visible in the mount.\n\nsystemd\n\nWhen running rclone nfsmount as a systemd service, it is possible to use\nType=notify. In this case the service will enter the started state after\nthe mountpoint has been successfully set up. Units having the rclone\nnfsmount service specified as a requirement will see all files and\nfolders immediately in this mode.\n\nNote that systemd runs mount units without any environment variables\nincluding PATH or HOME. This means that tilde (~) expansion will not\nwork and you should provide --config and --cache-dir explicitly as\nabsolute paths via rclone arguments. Since mounting requires the\nfusermount program, rclone will use the fallback PATH of /bin:/usr/bin\nin this scenario. Please ensure that fusermount is present on this PATH.\n\nRclone as Unix mount helper\n\nThe core Unix program /bin/mount normally takes the -t FSTYPE argument\nthen runs the /sbin/mount.FSTYPE helper program passing it mount options\nas -o key=val,... or --opt=.... Automount (classic or systemd) behaves\nin a similar way.\n\nrclone by default expects GNU-style flags --key val. To run it as a\nmount helper you should symlink rclone binary to /sbin/mount.rclone and\noptionally /usr/bin/rclonefs, e.g.\nln -s /usr/bin/rclone /sbin/mount.rclone. rclone will detect it and\ntranslate command-line arguments appropriately.\n\nNow you can run classic mounts like this:\n\n    mount sftp1:subdir /mnt/data -t rclone -o vfs_cache_mode=writes,sftp_key_file=/path/to/pem\n\nor create systemd mount units:\n\n    # /etc/systemd/system/mnt-data.mount\n    [Unit]\n    Description=Mount for /mnt/data\n    [Mount]\n    Type=rclone\n    What=sftp1:subdir\n    Where=/mnt/data\n    Options=rw,_netdev,allow_other,args2env,vfs-cache-mode=writes,config=/etc/rclone.conf,cache-dir=/var/rclone\n\noptionally accompanied by systemd automount unit\n\n    # /etc/systemd/system/mnt-data.automount\n    [Unit]\n    Description=AutoMount for /mnt/data\n    [Automount]\n    Where=/mnt/data\n    TimeoutIdleSec=600\n    [Install]\n    WantedBy=multi-user.target\n\nor add in /etc/fstab a line like\n\n    sftp1:subdir /mnt/data rclone rw,noauto,nofail,_netdev,x-systemd.automount,args2env,vfs_cache_mode=writes,config=/etc/rclone.conf,cache_dir=/var/cache/rclone 0 0\n\nor use classic Automountd. Remember to provide explicit\nconfig=...,cache-dir=... as a workaround for mount units being run\nwithout HOME.\n\nRclone in the mount helper mode will split -o argument(s) by comma,\nreplace _ by - and prepend -- to get the command-line flags. Options\ncontaining commas or spaces can be wrapped in single or double quotes.\nAny inner quotes inside outer quotes of the same type should be doubled.\n\nMount option syntax includes a few extra options treated specially:\n\n-   env.NAME=VALUE will set an environment variable for the mount\n    process. This helps with Automountd and Systemd.mount which don't\n    allow setting custom environment for mount helpers. Typically you\n    will use env.HTTPS_PROXY=proxy.host:3128 or env.HOME=/root\n-   command=cmount can be used to run cmount or any other rclone command\n    rather than the default mount.\n-   args2env will pass mount options to the mount helper running in\n    background via environment variables instead of command line\n    arguments. This allows to hide secrets from such commands as ps or\n    pgrep.\n-   vv... will be transformed into appropriate --verbose=N\n-   standard mount options like x-systemd.automount, _netdev, nosuid and\n    alike are intended only for Automountd and ignored by rclone.\n\nVFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk filing\nsystem.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the VFS\nlayer has to deal with that. Because there is no one right way of doing\nthis there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n\nVFS Directory Cache\n\nUsing the --dir-cache-time flag, you can control how long a directory\nshould be considered up to date and not refreshed from the backend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges. If the backend supports polling, changes will be picked up\nwithin the polling interval.\n\nYou can send a SIGHUP signal to rclone for it to flush all directory\ncaches, regardless of how old they are. Assuming only one rclone\ninstance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\nVFS File Buffering\n\nThe --buffer-size flag determines the amount of memory, that will be\nused to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file. The buffer\nwill only use memory for data that is downloaded but not not yet read.\nIf the buffer is empty, only a small amount of memory will be used.\n\nThe maximum memory used by rclone for buffering can be up to\n--buffer-size * open files.\n\nVFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file. See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with -vv rclone will print the location of the file cache. The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with --cache-dir or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by --vfs-cache-mode. The higher\nthe cache mode the more compatible rclone becomes at the cost of using\ndisk space.\n\nNote that files are written back to the remote only when they are closed\nand if they haven't been accessed for --vfs-write-back seconds. If\nrclone is quit or dies with files that haven't been uploaded, these will\nbe uploaded next time rclone is run with the same flags.\n\nIf using --vfs-cache-max-size or --vfs-cache-min-free-size note that the\ncache may exceed these quotas for two reasons. Firstly because it is\nonly checked every --vfs-cache-poll-interval. Secondly because open\nfiles cannot be evicted from the cache. When --vfs-cache-max-size or\n--vfs-cache-min-free-size is exceeded, rclone will attempt to evict the\nleast accessed files from the cache first. rclone will start with files\nthat haven't been accessed for the longest. This cache flushing strategy\nis efficient and more relevant files are likely to remain cached.\n\nThe --vfs-cache-max-age will evict files from the cache after the set\ntime since last access has passed. The default value of 1 hour will\nstart evicting files from cache that haven't been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting. Specify the time with standard\nnotation, s, m, h, d, w .\n\nYou should not run two copies of rclone using the same VFS cache with\nthe same or overlapping remotes if using --vfs-cache-mode > off. This\ncan potentially cause data corruption if you do. You can work around\nthis by giving each rclone its own cache hierarchy with --cache-dir. You\ndon't need to worry about this if the remotes in use don't overlap.\n\n--vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n-   Files can't be opened for both read AND write\n-   Files opened for write can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files open for read with O_TRUNC will be opened write only\n-   Files open for write only will behave as if O_TRUNC was supplied\n-   Open modes O_APPEND, O_TRUNC are ignored\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk. This means that files opened for write\nwill be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n-   Files opened for write only can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files opened for write only will ignore O_APPEND, O_TRUNC\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n--vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to --vfs-cache-mode writes.\n\nWhen reading a file rclone will read --buffer-size plus --vfs-read-ahead\nbytes ahead. The --buffer-size is buffered in memory whereas the\n--vfs-read-ahead is buffered on disk.\n\nWhen using this mode it is recommended that --buffer-size is not set too\nlarge and --vfs-read-ahead is set large if required.\n\nIMPORTANT not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache directory\nis on a filesystem which doesn't support sparse files and it will log an\nERROR message if one is detected.\n\nFingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file. Fingerprints are made from:\n\n-   size\n-   modification time\n-   hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n\nFor example hash is slow with the local and sftp backends as they have\nto read the entire file and hash it, and modtime is slow with the s3,\nswift, ftp and qinqstor backends because they need to do an extra API\ncall to fetch it.\n\nIf you use the --vfs-fast-fingerprint flag then rclone will not include\nthe slow operations in the fingerprint. This makes the fingerprinting\nless accurate but much faster and will improve the opening time of\ncached files.\n\nIf you are running a vfs cache over local, s3 or swift backends then\nusing this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n\nVFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the chunk\nspecified. This can reduce the used download quota for some remotes by\nrequesting only chunks from the remote that are actually read, at the\ncost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the\n--vfs-read-chunk-streams parameter.\n\n--vfs-read-chunk-streams == 0\n\nRclone will start reading a chunk of size --vfs-read-chunk-size, and\nthen double the size for each read. When --vfs-read-chunk-size-limit is\nspecified, and greater than --vfs-read-chunk-size, the chunk size for\neach open file will get doubled only until the specified value is\nreached. If the value is \"off\", which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n\nWith --vfs-read-chunk-size 100M and --vfs-read-chunk-size-limit 0 the\nfollowing parts will be downloaded: 0-100M, 100M-200M, 200M-300M,\n300M-400M and so on. When --vfs-read-chunk-size-limit 500M is specified,\nthe result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M,\n1200M-1700M and so on.\n\nSetting --vfs-read-chunk-size to 0 or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n--vfs-read-chunk-streams > 0\n\nRclone reads --vfs-read-chunk-streams chunks of size\n--vfs-read-chunk-size concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n--vfs-read-chunk-size and --vfs-read-chunk-streams as these will depend\non the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be --vfs-read-chunk-streams 16 and --vfs-read-chunk-size 4M.\nIn testing with AWS S3 the performance scaled roughly as the\n--vfs-read-chunk-streams setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more --vfs-read-chunk-streams in order to get\nthe throughput.\n\nVFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the chunked reading feature.\n\nIn particular S3 and Swift benefit hugely from the --no-modtime flag (or\nuse --use-server-modtime for a slightly different effect) as each read\nof the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather than\nseeking rclone will wait a short time for the in sequence read or write\nto come in. These flags only come into effect when not using an on disk\ncache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (--vfs-cache-mode with value writes or\nfull), the global flag --transfers can be set to adjust the number of\nparallel uploads of modified files from the cache (the related global\nflag --checkers has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\nVFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery. It is not allowed for two files in the same directory to differ\nonly by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to\nmake macOS file systems case-sensitive but that is not the default.\n\nThe --vfs-case-insensitive VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the\nremote as-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers to an\nexisting file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the\nsame name is not found but a name differing only by case exists, rclone\nwill transparently fixup the name. This fixup happens only when an\nexisting file is requested. Case sensitivity of file names created anew\nby rclone is controlled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source). The flag controls whether \"fixup\" is performed to\nsatisfy the target.\n\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \"true\" on Windows and\nmacOS, \"false\" otherwise. If the flag is provided without a value, then\nit is \"true\".\n\nThe --no-unicode-normalization flag controls whether a similar \"fixup\"\nis performed for filenames that differ but are canonically equivalent\nwith respect to unicode. Unicode normalization can be particularly\nhelpful for users of macOS, which prefers form NFD instead of the NFC\nused by most other platforms. It is therefore highly recommended to keep\nthe default of false on macOS, to avoid encoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n--vfs-block-norm-dupes flag allows hiding these duplicates. This comes\nwith a performance tradeoff, as rclone will have to scan the entire\ndirectory for duplicates when listing a directory. For this reason, it\nis recommended to leave this disabled if not needed. However, macOS\nusers may wish to consider using it, as otherwise, if a remote directory\ncontains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the\nmount, and both will appear to be editable, however, editing either\nversion will actually result in only the NFD version getting edited\nunder the hood. --vfs-block- norm-dupes prevents this confusion by\ndetecting this scenario, hiding the duplicates, and logging an error,\nsimilar to how this is handled in rclone sync.\n\nVFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing\nsystem. It can be useful when those statistics cannot be read correctly\nautomatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\nAlternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running df on the\nfilesystem, then pass the flag --vfs-used-is-size to rclone. With this\nflag set, instead of relying on the backend to report this information,\nrclone will scan the whole remote similar to rclone size and compute the\ntotal used space itself.\n\nWARNING. Contrary to rclone size, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots\nof API calls resulting in extra charges. Use it as a last resort and\nonly with caching.\n\n    rclone nfsmount remote:path /path/to/mountpoint [flags]\n\nOptions\n\n          --addr string                            IPaddress:Port or :Port to bind server to\n          --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n          --allow-other                            Allow access to other users (not supported on Windows)\n          --allow-root                             Allow access to root user (not supported on Windows)\n          --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n          --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n          --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n          --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n          --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n          --debug-fuse                             Debug the FUSE internals - needs -v\n          --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n          --devname string                         Set the device name - default is remote:path\n          --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n          --dir-perms FileMode                     Directory permissions (default 777)\n          --direct-io                              Use Direct IO, disables caching of data\n          --file-perms FileMode                    File permissions (default 666)\n          --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n          --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n      -h, --help                                   help for nfsmount\n          --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n          --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n          --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n          --nfs-cache-dir string                   The directory the NFS handle cache will use if set\n          --nfs-cache-handle-limit int             max file handles cached simultaneously (min 5) (default 1000000)\n          --nfs-cache-type memory|disk|symlink     Type of NFS handle cache to use (default memory)\n          --no-checksum                            Don't compare checksums on up/download\n          --no-modtime                             Don't read/write the modification time (can speed things up)\n          --no-seek                                Don't allow seeking in files\n          --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n          --noapplexattr                           Ignore all \"com.apple.*\" extended attributes (supported on OSX only)\n      -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n          --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n          --read-only                              Only allow read-only access\n          --sudo                                   Use sudo to run the mount/umount commands as root.\n          --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n          --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n          --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n          --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n          --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n          --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n          --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n          --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n          --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n          --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n          --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n          --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n          --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n          --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n          --vfs-read-chunk-streams int             The number of parallel streams to read at once\n          --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n          --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n          --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n          --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n          --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n          --volname string                         Set the volume name (supported on Windows and OSX only)\n          --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone obscure\n\nObscure password for use in the rclone config file.\n\nSynopsis\n\nIn the rclone config file, human-readable passwords are obscured.\nObscuring them is done by encrypting them and writing them out in\nbase64. This is not a secure way of encrypting these passwords as rclone\ncan decrypt them - it is to prevent \"eyedropping\" - namely someone\nseeing a password in the rclone config file by accident.\n\nMany equally important things (like access tokens) are not obscured in\nthe config file. However it is very hard to shoulder surf a 64 character\nhex token.\n\nThis command can also accept a password through STDIN instead of an\nargument by passing a hyphen as an argument. This will use the first\nline of STDIN as the password not including the trailing newline.\n\n    echo \"secretpassword\" | rclone obscure -\n\nIf there is no data on STDIN to read, rclone obscure will default to\nobfuscating the hyphen itself.\n\nIf you want to encrypt the config file then please use config file\nencryption - see rclone config for more info.\n\n    rclone obscure password [flags]\n\nOptions\n\n      -h, --help   help for obscure\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone rc\n\nRun a command against a running rclone.\n\nSynopsis\n\nThis runs a command against a running rclone. Use the --url flag to\nspecify an non default URL to connect on. This can be either a \":port\"\nwhich is taken to mean \"http://localhost:port\" or a \"host:port\" which is\ntaken to mean \"http://host:port\"\n\nA username and password can be passed in with --user and --pass.\n\nNote that --rc-addr, --rc-user, --rc-pass will be read also for --url,\n--user, --pass.\n\nThe --unix-socket flag can be used to connect over a unix socket like\nthis\n\n    # start server on /tmp/my.socket\n    rclone rcd --rc-addr unix:///tmp/my.socket\n    # Connect to it\n    rclone rc --unix-socket /tmp/my.socket core/stats\n\nArguments should be passed in as parameter=value.\n\nThe result will be returned as a JSON object by default.\n\nThe --json parameter can be used to pass in a JSON blob as an input\ninstead of key=value arguments. This is the only way of passing in more\ncomplicated values.\n\nThe -o/--opt option can be used to set a key \"opt\" with key, value\noptions in the form -o key=value or -o key. It can be repeated as many\ntimes as required. This is useful for rc commands which take the \"opt\"\nparameter which by convention is a dictionary of strings.\n\n    -o key=value -o key2\n\nWill place this in the \"opt\" value\n\n    {\"key\":\"value\", \"key2\",\"\")\n\nThe -a/--arg option can be used to set strings in the \"arg\" value. It\ncan be repeated as many times as required. This is useful for rc\ncommands which take the \"arg\" parameter which by convention is a list of\nstrings.\n\n    -a value -a value2\n\nWill place this in the \"arg\" value\n\n    [\"value\", \"value2\"]\n\nUse --loopback to connect to the rclone instance running rclone rc. This\nis very useful for testing commands without having to run an rclone rc\nserver, e.g.:\n\n    rclone rc --loopback operations/about fs=/\n\nUse rclone rc to see a list of all possible commands.\n\n    rclone rc commands parameter [flags]\n\nOptions\n\n      -a, --arg stringArray      Argument placed in the \"arg\" array\n      -h, --help                 help for rc\n          --json string          Input JSON - use instead of key=value args\n          --loopback             If set connect to this rclone instance not via HTTP\n          --no-output            If set, don't output the JSON result\n      -o, --opt stringArray      Option in the form name=value or name placed in the \"opt\" array\n          --pass string          Password to use to connect to rclone remote control\n          --unix-socket string   Path to a unix domain socket to dial to, instead of opening a TCP connection directly\n          --url string           URL to connect to rclone remote control (default \"http://localhost:5572/\")\n          --user string          Username to use to rclone remote control\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone rcat\n\nCopies standard input to file on remote.\n\nSynopsis\n\nReads from standard input (stdin) and copies it to a single remote file.\n\n    echo \"hello world\" | rclone rcat remote:path/to/file\n    ffmpeg - | rclone rcat remote:path/to/file\n\nIf the remote file already exists, it will be overwritten.\n\nrcat will try to upload small files in a single request, which is\nusually more efficient than the streaming/chunked upload endpoints,\nwhich use multiple requests. Exact behaviour depends on the remote. What\nis considered a small file may be set through --streaming-upload-cutoff.\nUploading only starts after the cutoff is reached or if the file ends\nbefore that. The data must fit into RAM. The cutoff needs to be small\nenough to adhere the limits of your remote, please see there. Generally\nspeaking, setting this cutoff too high will decrease your performance.\n\nUse the --size flag to preallocate the file in advance at the remote end\nand actually stream it, even if remote backend doesn't support\nstreaming.\n\n--size should be the exact size of the input stream in bytes. If the\nsize of the stream is different in length to the --size passed in then\nthe transfer will likely fail.\n\nNote that the upload cannot be retried because the data is not stored.\nIf the backend supports multipart uploading then individual chunks can\nbe retried. If you need to transfer a lot of data, you may be better off\ncaching it locally and then rclone move it to the destination which can\nuse retries.\n\n    rclone rcat remote:path [flags]\n\nOptions\n\n      -h, --help       help for rcat\n          --size int   File size hint to preallocate (default -1)\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone rcd\n\nRun rclone listening to remote control commands only.\n\nSynopsis\n\nThis runs rclone so that it only listens to remote control commands.\n\nThis is useful if you are controlling rclone via the rc API.\n\nIf you pass in a path to a directory, rclone will serve that directory\nfor GET requests on the URL passed in. It will also open the URL in the\nbrowser when rclone is run.\n\nSee the rc documentation for more info on the rc flags.\n\nServer options\n\nUse --rc-addr to specify which IP address and port the server should\nlisten on, eg --rc-addr 1.2.3.4:8000 or --rc-addr :8080 to listen to all\nIPs. By default it only listens on localhost. You can use port :0 to let\nthe OS choose an available port.\n\nIf you set --rc-addr to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n\nYou can use a unix socket by setting the url to unix:///path/to/socket\nor just by using an absolute path name. Note that unix sockets bypass\nthe authentication - this is expected to be done with file system\npermissions.\n\n--rc-addr may be repeated to listen on multiple IPs/ports/sockets.\nSocket activation, described further below, can also be used to\naccomplish the same.\n\n--rc-server-read-timeout and --rc-server-write-timeout can be used to\ncontrol the timeouts on the server. Note that this is the total time for\na transfer.\n\n--rc-max-header-bytes controls the maximum number of bytes the server\nwill accept in the HTTP header.\n\n--rc-baseurl controls the URL prefix that rclone serves from. By default\nrclone will serve from the root. If you used --rc-baseurl \"/rclone\" then\nrclone would serve from a URL starting with \"/rclone/\". This is useful\nif you wish to proxy rclone serve. Rclone automatically inserts leading\nand trailing \"/\" on --rc-baseurl, so --rc-baseurl \"rclone\",\n--rc-baseurl \"/rclone\" and --rc-baseurl \"/rclone/\" are all treated\nidentically.\n\nTLS (SSL)\n\nBy default this will serve over http. If you want you can serve over\nhttps. You will need to supply the --rc-cert and --rc-key flags. If you\nwish to do client side certificate validation then you will need to\nsupply --rc-client-ca also.\n\n--rc-cert should be a either a PEM encoded certificate or a\nconcatenation of that with the CA certificate. --krc-ey should be the\nPEM encoded private key and --rc-client-ca should be the PEM encoded\nclient certificate authority certificate.\n\n--rc-min-tls-version is minimum TLS version that is acceptable. Valid\nvalues are \"tls1.0\", \"tls1.1\", \"tls1.2\" and \"tls1.3\" (default \"tls1.0\").\n\nSocket activation\n\nInstead of the listening addresses specified above, rclone will listen\nto all FDs passed by the service manager, if any (and ignore any\narguments passed by --rc-addr`).\n\nThis allows rclone to be a socket-activated service. It can be\nconfigured with .socket and .service unit files as described in\nhttps://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html\n\nSocket activation can be tested ad-hoc with the\nsystemd-socket-activatecommand\n\n       systemd-socket-activate -l 8000 -- rclone serve\n\nThis will socket-activate rclone on the first connection to port 8000\nover TCP. ### Template\n\n--rc-template allows a user to specify a custom markup template for HTTP\nand WebDAV serve functions. The server exports the following markup to\nbe used within the template to server pages:\n\n  -----------------------------------------------------------------------\n  Parameter                           Description\n  ----------------------------------- -----------------------------------\n  .Name                               The full path of a file/directory.\n\n  .Title                              Directory listing of .Name\n\n  .Sort                               The current sort used. This is\n                                      changeable via ?sort= parameter\n\n                                      Sort Options:\n                                      namedirfirst,name,size,time\n                                      (default namedirfirst)\n\n  .Order                              The current ordering used. This is\n                                      changeable via ?order= parameter\n\n                                      Order Options: asc,desc (default\n                                      asc)\n\n  .Query                              Currently unused.\n\n  .Breadcrumb                         Allows for creating a relative\n                                      navigation\n\n  -- .Link                            The relative to the root link of\n                                      the Text.\n\n  -- .Text                            The Name of the directory.\n\n  .Entries                            Information about a specific\n                                      file/directory.\n\n  -- .URL                             The 'url' of an entry.\n\n  -- .Leaf                            Currently same as 'URL' but\n                                      intended to be 'just' the name.\n\n  -- .IsDir                           Boolean for if an entry is a\n                                      directory or not.\n\n  -- .Size                            Size in Bytes of the entry.\n\n  -- .ModTime                         The UTC timestamp of an entry.\n  -----------------------------------------------------------------------\n\nThe server also makes the following functions available so that they can\nbe used within the template. These functions help extend the options for\ndynamic rendering of HTML. They can be used to render HTML based on\nspecific conditions.\n\n  -----------------------------------------------------------------------\n  Function                            Description\n  ----------------------------------- -----------------------------------\n  afterEpoch                          Returns the time since the epoch\n                                      for the given time.\n\n  contains                            Checks whether a given substring is\n                                      present or not in a given string.\n\n  hasPrefix                           Checks whether the given string\n                                      begins with the specified prefix.\n\n  hasSuffix                           Checks whether the given string end\n                                      with the specified suffix.\n  -----------------------------------------------------------------------\n\nAuthentication\n\nBy default this will serve files without needing a login.\n\nYou can either use an htpasswd file which can take lots of users, or set\na single username and password with the --rc-user and --rc-pass flags.\n\nIf no static users are configured by either of the above methods, and\nclient certificates are required by the --client-ca flag passed to the\nserver, the client certificate common name will be considered as the\nusername.\n\nUse --rc-htpasswd /path/to/htpasswd to provide an htpasswd file. This is\nin standard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication. Bcrypt is recommended.\n\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.\n\nUse --rc-realm to set the authentication realm.\n\nUse --rc-salt to change the password hashing salt from the default.\n\n    rclone rcd <path to files to serve>* [flags]\n\nOptions\n\n      -h, --help   help for rcd\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nRC Options\n\nFlags to control the Remote Control API\n\n          --rc                                 Enable the remote control server\n          --rc-addr stringArray                IPaddress:Port or :Port to bind server to (default [\"localhost:5572\"])\n          --rc-allow-origin string             Origin which cross-domain request (CORS) can be executed from\n          --rc-baseurl string                  Prefix for URLs - leave blank for root\n          --rc-cert string                     TLS PEM key (concatenation of certificate and CA certificate)\n          --rc-client-ca string                Client certificate authority to verify clients with\n          --rc-enable-metrics                  Enable the Prometheus metrics path at the remote control server\n          --rc-files string                    Path to local files to serve on the HTTP server\n          --rc-htpasswd string                 A htpasswd file - if not provided no authentication is done\n          --rc-job-expire-duration Duration    Expire finished async jobs older than this value (default 1m0s)\n          --rc-job-expire-interval Duration    Interval to check for expired async jobs (default 10s)\n          --rc-key string                      TLS PEM Private key\n          --rc-max-header-bytes int            Maximum size of request header (default 4096)\n          --rc-min-tls-version string          Minimum TLS version that is acceptable (default \"tls1.0\")\n          --rc-no-auth                         Don't require auth for certain methods\n          --rc-pass string                     Password for authentication\n          --rc-realm string                    Realm for authentication\n          --rc-salt string                     Password hashing salt (default \"dlPL2MqE\")\n          --rc-serve                           Enable the serving of remote objects\n          --rc-serve-no-modtime                Don't read the modification time (can speed things up)\n          --rc-server-read-timeout Duration    Timeout for server reading data (default 1h0m0s)\n          --rc-server-write-timeout Duration   Timeout for server writing data (default 1h0m0s)\n          --rc-template string                 User-specified template\n          --rc-user string                     User name for authentication\n          --rc-web-fetch-url string            URL to fetch the releases for webgui (default \"https://api.github.com/repos/rclone/rclone-webui-react/releases/latest\")\n          --rc-web-gui                         Launch WebGUI on localhost\n          --rc-web-gui-force-update            Force update to latest version of web gui\n          --rc-web-gui-no-open-browser         Don't open the browser automatically\n          --rc-web-gui-update                  Check and update to latest version of web gui\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone rmdirs\n\nRemove empty directories under the path.\n\nSynopsis\n\nThis recursively removes any empty directories (including directories\nthat only contain empty directories), that it finds under the path. The\nroot path itself will also be removed if it is empty, unless you supply\nthe --leave-root flag.\n\nUse command rmdir to delete just the empty directory given by path, not\nrecurse.\n\nThis is useful for tidying up remotes that rclone has left a lot of\nempty directories in. For example the delete command will delete files\nbut leave the directory structure (unless used with option --rmdirs).\n\nThis will delete --checkers directories concurrently so if you have\nthousands of empty directories consider increasing this number.\n\nTo delete a path and any objects in it, use the purge command.\n\n    rclone rmdirs remote:path [flags]\n\nOptions\n\n      -h, --help         help for rmdirs\n          --leave-root   Do not remove root directory if empty\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nImportant Options\n\nImportant flags useful for most commands\n\n      -n, --dry-run         Do a trial run with no permanent changes\n      -i, --interactive     Enable interactive mode\n      -v, --verbose count   Print lots more stuff (repeat for more)\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone selfupdate\n\nUpdate the rclone binary.\n\nSynopsis\n\nThis command downloads the latest release of rclone and replaces the\ncurrently running binary. The download is verified with a hashsum and\ncryptographically signed signature; see the release signing docs for\ndetails.\n\nIf used without flags (or with implied --stable flag), this command will\ninstall the latest stable release. However, some issues may be fixed (or\nfeatures added) only in the latest beta release. In such cases you\nshould run the command with the --beta flag, i.e.\nrclone selfupdate --beta. You can check in advance what version would be\ninstalled by adding the --check flag, then repeat the command without it\nwhen you are satisfied.\n\nSometimes the rclone team may recommend you a concrete beta or stable\nrclone release to troubleshoot your issue or add a bleeding edge\nfeature. The --version VER flag, if given, will update to the concrete\nversion instead of the latest one. If you omit micro version from VER\n(for example 1.53), the latest matching micro version will be used.\n\nUpon successful update rclone will print a message that contains a\nprevious version number. You will need it if you later decide to revert\nyour update for some reason. Then you'll have to note the previous\nversion and run the following command:\nrclone selfupdate [--beta] OLDVER. If the old version contains only dots\nand digits (for example v1.54.0) then it's a stable release so you won't\nneed the --beta flag. Beta releases have an additional information\nsimilar to v1.54.0-beta.5111.06f1c0c61. (if you are a developer and use\na locally built rclone, the version number will end with -DEV, you will\nhave to rebuild it as it obviously can't be distributed).\n\nIf you previously installed rclone via a package manager, the package\nmay include local documentation or configure services. You may wish to\nupdate with the flag --package deb or --package rpm (whichever is\ncorrect for your OS) to update these too. This command with the default\n--package zip will update only the rclone executable so the local manual\nmay become inaccurate after it.\n\nThe rclone mount command may or may not support extended FUSE options\ndepending on the build and OS. selfupdate will refuse to update if the\ncapability would be discarded.\n\nNote: Windows forbids deletion of a currently running executable so this\ncommand will rename the old executable to 'rclone.old.exe' upon success.\n\nPlease note that this command was not available before rclone version\n1.55. If it fails for you with the message unknown command \"selfupdate\"\nthen you will need to update manually following the install instructions\nlocated at https://rclone.org/install/\n\n    rclone selfupdate [flags]\n\nOptions\n\n          --beta             Install beta release\n          --check            Check for latest release, do not download\n      -h, --help             help for selfupdate\n          --output string    Save the downloaded binary at a given path (default: replace running binary)\n          --package string   Package format: zip|deb|rpm (default: zip)\n          --stable           Install stable release (this is the default)\n          --version string   Install the given rclone version (default: latest)\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n\nrclone serve\n\nServe a remote over a protocol.\n\nSynopsis\n\nServe a remote over a given protocol. Requires the use of a subcommand\nto specify the protocol, e.g.\n\n    rclone serve http remote:\n\nEach subcommand has its own options which you can see in their help.\n\n    rclone serve <protocol> [opts] <remote> [flags]\n\nOptions\n\n      -h, --help   help for serve\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone - Show help for rclone commands, flags and backends.\n-   rclone serve dlna - Serve remote:path over DLNA\n-   rclone serve docker - Serve any remote on docker's volume plugin\n    API.\n-   rclone serve ftp - Serve remote:path over FTP.\n-   rclone serve http - Serve the remote over HTTP.\n-   rclone serve nfs - Serve the remote as an NFS mount\n-   rclone serve restic - Serve the remote for restic's REST API.\n-   rclone serve s3 - Serve remote:path over s3.\n-   rclone serve sftp - Serve the remote over SFTP.\n-   rclone serve webdav - Serve remote:path over WebDAV.\n\nrclone serve dlna\n\nServe remote:path over DLNA\n\nSynopsis\n\nRun a DLNA media server for media stored in an rclone remote. Many\ndevices, such as the Xbox and PlayStation, can automatically discover\nthis server in the LAN and play audio/video from it. VLC is also\nsupported. Service discovery uses UDP multicast packets (SSDP) and will\nthus only work on LANs.\n\nRclone will list all files present in the remote, without filtering\nbased on media formats or file extensions. Additionally, there is no\nmedia transcoding support. This means that some players might show files\nthat they are not able to play back correctly.\n\nRclone will add external subtitle files (.srt) to videos if they have\nthe same filename as the video file itself (except the extension),\neither in the same directory as the video, or in a \"Subs\" subdirectory.\n\nServer options\n\nUse --addr to specify which IP address and port the server should listen\non, e.g. --addr 1.2.3.4:8000 or --addr :8080 to listen to all IPs.\n\nUse --name to choose the friendly server name, which is by default\n\"rclone (hostname)\".\n\nUse --log-trace in conjunction with -vv to enable additional debug\nlogging of all UPNP traffic.\n\nVFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk filing\nsystem.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the VFS\nlayer has to deal with that. Because there is no one right way of doing\nthis there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n\nVFS Directory Cache\n\nUsing the --dir-cache-time flag, you can control how long a directory\nshould be considered up to date and not refreshed from the backend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges. If the backend supports polling, changes will be picked up\nwithin the polling interval.\n\nYou can send a SIGHUP signal to rclone for it to flush all directory\ncaches, regardless of how old they are. Assuming only one rclone\ninstance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\nVFS File Buffering\n\nThe --buffer-size flag determines the amount of memory, that will be\nused to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file. The buffer\nwill only use memory for data that is downloaded but not not yet read.\nIf the buffer is empty, only a small amount of memory will be used.\n\nThe maximum memory used by rclone for buffering can be up to\n--buffer-size * open files.\n\nVFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file. See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with -vv rclone will print the location of the file cache. The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with --cache-dir or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by --vfs-cache-mode. The higher\nthe cache mode the more compatible rclone becomes at the cost of using\ndisk space.\n\nNote that files are written back to the remote only when they are closed\nand if they haven't been accessed for --vfs-write-back seconds. If\nrclone is quit or dies with files that haven't been uploaded, these will\nbe uploaded next time rclone is run with the same flags.\n\nIf using --vfs-cache-max-size or --vfs-cache-min-free-size note that the\ncache may exceed these quotas for two reasons. Firstly because it is\nonly checked every --vfs-cache-poll-interval. Secondly because open\nfiles cannot be evicted from the cache. When --vfs-cache-max-size or\n--vfs-cache-min-free-size is exceeded, rclone will attempt to evict the\nleast accessed files from the cache first. rclone will start with files\nthat haven't been accessed for the longest. This cache flushing strategy\nis efficient and more relevant files are likely to remain cached.\n\nThe --vfs-cache-max-age will evict files from the cache after the set\ntime since last access has passed. The default value of 1 hour will\nstart evicting files from cache that haven't been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting. Specify the time with standard\nnotation, s, m, h, d, w .\n\nYou should not run two copies of rclone using the same VFS cache with\nthe same or overlapping remotes if using --vfs-cache-mode > off. This\ncan potentially cause data corruption if you do. You can work around\nthis by giving each rclone its own cache hierarchy with --cache-dir. You\ndon't need to worry about this if the remotes in use don't overlap.\n\n--vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n-   Files can't be opened for both read AND write\n-   Files opened for write can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files open for read with O_TRUNC will be opened write only\n-   Files open for write only will behave as if O_TRUNC was supplied\n-   Open modes O_APPEND, O_TRUNC are ignored\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk. This means that files opened for write\nwill be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n-   Files opened for write only can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files opened for write only will ignore O_APPEND, O_TRUNC\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n--vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to --vfs-cache-mode writes.\n\nWhen reading a file rclone will read --buffer-size plus --vfs-read-ahead\nbytes ahead. The --buffer-size is buffered in memory whereas the\n--vfs-read-ahead is buffered on disk.\n\nWhen using this mode it is recommended that --buffer-size is not set too\nlarge and --vfs-read-ahead is set large if required.\n\nIMPORTANT not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache directory\nis on a filesystem which doesn't support sparse files and it will log an\nERROR message if one is detected.\n\nFingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file. Fingerprints are made from:\n\n-   size\n-   modification time\n-   hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n\nFor example hash is slow with the local and sftp backends as they have\nto read the entire file and hash it, and modtime is slow with the s3,\nswift, ftp and qinqstor backends because they need to do an extra API\ncall to fetch it.\n\nIf you use the --vfs-fast-fingerprint flag then rclone will not include\nthe slow operations in the fingerprint. This makes the fingerprinting\nless accurate but much faster and will improve the opening time of\ncached files.\n\nIf you are running a vfs cache over local, s3 or swift backends then\nusing this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n\nVFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the chunk\nspecified. This can reduce the used download quota for some remotes by\nrequesting only chunks from the remote that are actually read, at the\ncost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the\n--vfs-read-chunk-streams parameter.\n\n--vfs-read-chunk-streams == 0\n\nRclone will start reading a chunk of size --vfs-read-chunk-size, and\nthen double the size for each read. When --vfs-read-chunk-size-limit is\nspecified, and greater than --vfs-read-chunk-size, the chunk size for\neach open file will get doubled only until the specified value is\nreached. If the value is \"off\", which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n\nWith --vfs-read-chunk-size 100M and --vfs-read-chunk-size-limit 0 the\nfollowing parts will be downloaded: 0-100M, 100M-200M, 200M-300M,\n300M-400M and so on. When --vfs-read-chunk-size-limit 500M is specified,\nthe result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M,\n1200M-1700M and so on.\n\nSetting --vfs-read-chunk-size to 0 or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n--vfs-read-chunk-streams > 0\n\nRclone reads --vfs-read-chunk-streams chunks of size\n--vfs-read-chunk-size concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n--vfs-read-chunk-size and --vfs-read-chunk-streams as these will depend\non the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be --vfs-read-chunk-streams 16 and --vfs-read-chunk-size 4M.\nIn testing with AWS S3 the performance scaled roughly as the\n--vfs-read-chunk-streams setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more --vfs-read-chunk-streams in order to get\nthe throughput.\n\nVFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the chunked reading feature.\n\nIn particular S3 and Swift benefit hugely from the --no-modtime flag (or\nuse --use-server-modtime for a slightly different effect) as each read\nof the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather than\nseeking rclone will wait a short time for the in sequence read or write\nto come in. These flags only come into effect when not using an on disk\ncache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (--vfs-cache-mode with value writes or\nfull), the global flag --transfers can be set to adjust the number of\nparallel uploads of modified files from the cache (the related global\nflag --checkers has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\nVFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery. It is not allowed for two files in the same directory to differ\nonly by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to\nmake macOS file systems case-sensitive but that is not the default.\n\nThe --vfs-case-insensitive VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the\nremote as-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers to an\nexisting file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the\nsame name is not found but a name differing only by case exists, rclone\nwill transparently fixup the name. This fixup happens only when an\nexisting file is requested. Case sensitivity of file names created anew\nby rclone is controlled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source). The flag controls whether \"fixup\" is performed to\nsatisfy the target.\n\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \"true\" on Windows and\nmacOS, \"false\" otherwise. If the flag is provided without a value, then\nit is \"true\".\n\nThe --no-unicode-normalization flag controls whether a similar \"fixup\"\nis performed for filenames that differ but are canonically equivalent\nwith respect to unicode. Unicode normalization can be particularly\nhelpful for users of macOS, which prefers form NFD instead of the NFC\nused by most other platforms. It is therefore highly recommended to keep\nthe default of false on macOS, to avoid encoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n--vfs-block-norm-dupes flag allows hiding these duplicates. This comes\nwith a performance tradeoff, as rclone will have to scan the entire\ndirectory for duplicates when listing a directory. For this reason, it\nis recommended to leave this disabled if not needed. However, macOS\nusers may wish to consider using it, as otherwise, if a remote directory\ncontains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the\nmount, and both will appear to be editable, however, editing either\nversion will actually result in only the NFD version getting edited\nunder the hood. --vfs-block- norm-dupes prevents this confusion by\ndetecting this scenario, hiding the duplicates, and logging an error,\nsimilar to how this is handled in rclone sync.\n\nVFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing\nsystem. It can be useful when those statistics cannot be read correctly\nautomatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\nAlternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running df on the\nfilesystem, then pass the flag --vfs-used-is-size to rclone. With this\nflag set, instead of relying on the backend to report this information,\nrclone will scan the whole remote similar to rclone size and compute the\ntotal used space itself.\n\nWARNING. Contrary to rclone size, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots\nof API calls resulting in extra charges. Use it as a last resort and\nonly with caching.\n\n    rclone serve dlna remote:path [flags]\n\nOptions\n\n          --addr string                            The ip:port or :port to bind the DLNA http server to (default \":7879\")\n          --announce-interval Duration             The interval between SSDP announcements (default 12m0s)\n          --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n          --dir-perms FileMode                     Directory permissions (default 777)\n          --file-perms FileMode                    File permissions (default 666)\n          --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n      -h, --help                                   help for dlna\n          --interface stringArray                  The interface to use for SSDP (repeat as necessary)\n          --log-trace                              Enable trace logging of SOAP traffic\n          --name string                            Name of DLNA server\n          --no-checksum                            Don't compare checksums on up/download\n          --no-modtime                             Don't read/write the modification time (can speed things up)\n          --no-seek                                Don't allow seeking in files\n          --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n          --read-only                              Only allow read-only access\n          --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n          --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n          --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n          --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n          --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n          --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n          --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n          --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n          --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n          --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n          --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n          --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n          --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n          --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n          --vfs-read-chunk-streams int             The number of parallel streams to read at once\n          --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n          --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n          --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n          --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n          --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nSee Also\n\n-   rclone serve - Serve a remote over a protocol.\n\nrclone serve docker\n\nServe any remote on docker's volume plugin API.\n\nSynopsis\n\nThis command implements the Docker volume plugin API allowing docker to\nuse rclone as a data storage mechanism for various cloud providers.\nrclone provides docker volume plugin based on it.\n\nTo create a docker plugin, one must create a Unix or TCP socket that\nDocker will look for when you use the plugin and then it listens for\ncommands from docker daemon and runs the corresponding code when\nnecessary. Docker plugins can run as a managed plugin under control of\nthe docker daemon or as an independent native service. For testing, you\ncan just run it directly from the command line, for example:\n\n    sudo rclone serve docker --base-dir /tmp/rclone-volumes --socket-addr localhost:8787 -vv\n\nRunning rclone serve docker will create the said socket, listening for\ncommands from Docker to create the necessary Volumes. Normally you need\nnot give the --socket-addr flag. The API will listen on the unix domain\nsocket at /run/docker/plugins/rclone.sock. In the example above rclone\nwill create a TCP socket and a small file\n/etc/docker/plugins/rclone.spec containing the socket address. We use\nsudo because both paths are writeable only by the root user.\n\nIf you later decide to change listening socket, the docker daemon must\nbe restarted to reconnect to /run/docker/plugins/rclone.sock or parse\nnew /etc/docker/plugins/rclone.spec. Until you restart, any volume\nrelated docker commands will timeout trying to access the old socket.\nRunning directly is supported on Linux only, not on Windows or MacOS.\nThis is not a problem with managed plugin mode described in details in\nthe full documentation.\n\nThe command will create volume mounts under the path given by --base-dir\n(by default /var/lib/docker-volumes/rclone available only to root) and\nmaintain the JSON formatted file docker-plugin.state in the rclone cache\ndirectory with book-keeping records of created and mounted volumes.\n\nAll mount and VFS options are submitted by the docker daemon via API,\nbut you can also provide defaults on the command line as well as set\npath to the config file and cache directory or adjust logging verbosity.\n\nVFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk filing\nsystem.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the VFS\nlayer has to deal with that. Because there is no one right way of doing\nthis there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n\nVFS Directory Cache\n\nUsing the --dir-cache-time flag, you can control how long a directory\nshould be considered up to date and not refreshed from the backend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges. If the backend supports polling, changes will be picked up\nwithin the polling interval.\n\nYou can send a SIGHUP signal to rclone for it to flush all directory\ncaches, regardless of how old they are. Assuming only one rclone\ninstance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\nVFS File Buffering\n\nThe --buffer-size flag determines the amount of memory, that will be\nused to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file. The buffer\nwill only use memory for data that is downloaded but not not yet read.\nIf the buffer is empty, only a small amount of memory will be used.\n\nThe maximum memory used by rclone for buffering can be up to\n--buffer-size * open files.\n\nVFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file. See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with -vv rclone will print the location of the file cache. The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with --cache-dir or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by --vfs-cache-mode. The higher\nthe cache mode the more compatible rclone becomes at the cost of using\ndisk space.\n\nNote that files are written back to the remote only when they are closed\nand if they haven't been accessed for --vfs-write-back seconds. If\nrclone is quit or dies with files that haven't been uploaded, these will\nbe uploaded next time rclone is run with the same flags.\n\nIf using --vfs-cache-max-size or --vfs-cache-min-free-size note that the\ncache may exceed these quotas for two reasons. Firstly because it is\nonly checked every --vfs-cache-poll-interval. Secondly because open\nfiles cannot be evicted from the cache. When --vfs-cache-max-size or\n--vfs-cache-min-free-size is exceeded, rclone will attempt to evict the\nleast accessed files from the cache first. rclone will start with files\nthat haven't been accessed for the longest. This cache flushing strategy\nis efficient and more relevant files are likely to remain cached.\n\nThe --vfs-cache-max-age will evict files from the cache after the set\ntime since last access has passed. The default value of 1 hour will\nstart evicting files from cache that haven't been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting. Specify the time with standard\nnotation, s, m, h, d, w .\n\nYou should not run two copies of rclone using the same VFS cache with\nthe same or overlapping remotes if using --vfs-cache-mode > off. This\ncan potentially cause data corruption if you do. You can work around\nthis by giving each rclone its own cache hierarchy with --cache-dir. You\ndon't need to worry about this if the remotes in use don't overlap.\n\n--vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n-   Files can't be opened for both read AND write\n-   Files opened for write can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files open for read with O_TRUNC will be opened write only\n-   Files open for write only will behave as if O_TRUNC was supplied\n-   Open modes O_APPEND, O_TRUNC are ignored\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk. This means that files opened for write\nwill be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n-   Files opened for write only can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files opened for write only will ignore O_APPEND, O_TRUNC\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n--vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to --vfs-cache-mode writes.\n\nWhen reading a file rclone will read --buffer-size plus --vfs-read-ahead\nbytes ahead. The --buffer-size is buffered in memory whereas the\n--vfs-read-ahead is buffered on disk.\n\nWhen using this mode it is recommended that --buffer-size is not set too\nlarge and --vfs-read-ahead is set large if required.\n\nIMPORTANT not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache directory\nis on a filesystem which doesn't support sparse files and it will log an\nERROR message if one is detected.\n\nFingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file. Fingerprints are made from:\n\n-   size\n-   modification time\n-   hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n\nFor example hash is slow with the local and sftp backends as they have\nto read the entire file and hash it, and modtime is slow with the s3,\nswift, ftp and qinqstor backends because they need to do an extra API\ncall to fetch it.\n\nIf you use the --vfs-fast-fingerprint flag then rclone will not include\nthe slow operations in the fingerprint. This makes the fingerprinting\nless accurate but much faster and will improve the opening time of\ncached files.\n\nIf you are running a vfs cache over local, s3 or swift backends then\nusing this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n\nVFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the chunk\nspecified. This can reduce the used download quota for some remotes by\nrequesting only chunks from the remote that are actually read, at the\ncost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the\n--vfs-read-chunk-streams parameter.\n\n--vfs-read-chunk-streams == 0\n\nRclone will start reading a chunk of size --vfs-read-chunk-size, and\nthen double the size for each read. When --vfs-read-chunk-size-limit is\nspecified, and greater than --vfs-read-chunk-size, the chunk size for\neach open file will get doubled only until the specified value is\nreached. If the value is \"off\", which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n\nWith --vfs-read-chunk-size 100M and --vfs-read-chunk-size-limit 0 the\nfollowing parts will be downloaded: 0-100M, 100M-200M, 200M-300M,\n300M-400M and so on. When --vfs-read-chunk-size-limit 500M is specified,\nthe result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M,\n1200M-1700M and so on.\n\nSetting --vfs-read-chunk-size to 0 or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n--vfs-read-chunk-streams > 0\n\nRclone reads --vfs-read-chunk-streams chunks of size\n--vfs-read-chunk-size concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n--vfs-read-chunk-size and --vfs-read-chunk-streams as these will depend\non the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be --vfs-read-chunk-streams 16 and --vfs-read-chunk-size 4M.\nIn testing with AWS S3 the performance scaled roughly as the\n--vfs-read-chunk-streams setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more --vfs-read-chunk-streams in order to get\nthe throughput.\n\nVFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the chunked reading feature.\n\nIn particular S3 and Swift benefit hugely from the --no-modtime flag (or\nuse --use-server-modtime for a slightly different effect) as each read\nof the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather than\nseeking rclone will wait a short time for the in sequence read or write\nto come in. These flags only come into effect when not using an on disk\ncache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (--vfs-cache-mode with value writes or\nfull), the global flag --transfers can be set to adjust the number of\nparallel uploads of modified files from the cache (the related global\nflag --checkers has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\nVFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery. It is not allowed for two files in the same directory to differ\nonly by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to\nmake macOS file systems case-sensitive but that is not the default.\n\nThe --vfs-case-insensitive VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the\nremote as-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers to an\nexisting file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the\nsame name is not found but a name differing only by case exists, rclone\nwill transparently fixup the name. This fixup happens only when an\nexisting file is requested. Case sensitivity of file names created anew\nby rclone is controlled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source). The flag controls whether \"fixup\" is performed to\nsatisfy the target.\n\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \"true\" on Windows and\nmacOS, \"false\" otherwise. If the flag is provided without a value, then\nit is \"true\".\n\nThe --no-unicode-normalization flag controls whether a similar \"fixup\"\nis performed for filenames that differ but are canonically equivalent\nwith respect to unicode. Unicode normalization can be particularly\nhelpful for users of macOS, which prefers form NFD instead of the NFC\nused by most other platforms. It is therefore highly recommended to keep\nthe default of false on macOS, to avoid encoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n--vfs-block-norm-dupes flag allows hiding these duplicates. This comes\nwith a performance tradeoff, as rclone will have to scan the entire\ndirectory for duplicates when listing a directory. For this reason, it\nis recommended to leave this disabled if not needed. However, macOS\nusers may wish to consider using it, as otherwise, if a remote directory\ncontains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the\nmount, and both will appear to be editable, however, editing either\nversion will actually result in only the NFD version getting edited\nunder the hood. --vfs-block- norm-dupes prevents this confusion by\ndetecting this scenario, hiding the duplicates, and logging an error,\nsimilar to how this is handled in rclone sync.\n\nVFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing\nsystem. It can be useful when those statistics cannot be read correctly\nautomatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\nAlternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running df on the\nfilesystem, then pass the flag --vfs-used-is-size to rclone. With this\nflag set, instead of relying on the backend to report this information,\nrclone will scan the whole remote similar to rclone size and compute the\ntotal used space itself.\n\nWARNING. Contrary to rclone size, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots\nof API calls resulting in extra charges. Use it as a last resort and\nonly with caching.\n\n    rclone serve docker [flags]\n\nOptions\n\n          --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n          --allow-other                            Allow access to other users (not supported on Windows)\n          --allow-root                             Allow access to root user (not supported on Windows)\n          --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n          --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n          --base-dir string                        Base directory for volumes (default \"/var/lib/docker-volumes/rclone\")\n          --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n          --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n          --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n          --debug-fuse                             Debug the FUSE internals - needs -v\n          --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n          --devname string                         Set the device name - default is remote:path\n          --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n          --dir-perms FileMode                     Directory permissions (default 777)\n          --direct-io                              Use Direct IO, disables caching of data\n          --file-perms FileMode                    File permissions (default 666)\n          --forget-state                           Skip restoring previous state\n          --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n          --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n      -h, --help                                   help for docker\n          --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n          --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n          --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n          --no-checksum                            Don't compare checksums on up/download\n          --no-modtime                             Don't read/write the modification time (can speed things up)\n          --no-seek                                Don't allow seeking in files\n          --no-spec                                Do not write spec file\n          --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n          --noapplexattr                           Ignore all \"com.apple.*\" extended attributes (supported on OSX only)\n      -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n          --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n          --read-only                              Only allow read-only access\n          --socket-addr string                     Address <host:port> or absolute path (default: /run/docker/plugins/rclone.sock)\n          --socket-gid int                         GID for unix socket (default: current process GID) (default 1000)\n          --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n          --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n          --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n          --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n          --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n          --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n          --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n          --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n          --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n          --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n          --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n          --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n          --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n          --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n          --vfs-read-chunk-streams int             The number of parallel streams to read at once\n          --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n          --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n          --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n          --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n          --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n          --volname string                         Set the volume name (supported on Windows and OSX only)\n          --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nSee Also\n\n-   rclone serve - Serve a remote over a protocol.\n\nrclone serve ftp\n\nServe remote:path over FTP.\n\nSynopsis\n\nRun a basic FTP server to serve a remote over FTP protocol. This can be\nviewed with a FTP client or you can make a remote of type FTP to read\nand write it.\n\nServer options\n\nUse --addr to specify which IP address and port the server should listen\non, e.g. --addr 1.2.3.4:8000 or --addr :8080 to listen to all IPs. By\ndefault it only listens on localhost. You can use port :0 to let the OS\nchoose an available port.\n\nIf you set --addr to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n\nAuthentication\n\nBy default this will serve files without needing a login.\n\nYou can set a single username and password with the --user and --pass\nflags.\n\nVFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk filing\nsystem.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the VFS\nlayer has to deal with that. Because there is no one right way of doing\nthis there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n\nVFS Directory Cache\n\nUsing the --dir-cache-time flag, you can control how long a directory\nshould be considered up to date and not refreshed from the backend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges. If the backend supports polling, changes will be picked up\nwithin the polling interval.\n\nYou can send a SIGHUP signal to rclone for it to flush all directory\ncaches, regardless of how old they are. Assuming only one rclone\ninstance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\nVFS File Buffering\n\nThe --buffer-size flag determines the amount of memory, that will be\nused to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file. The buffer\nwill only use memory for data that is downloaded but not not yet read.\nIf the buffer is empty, only a small amount of memory will be used.\n\nThe maximum memory used by rclone for buffering can be up to\n--buffer-size * open files.\n\nVFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file. See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with -vv rclone will print the location of the file cache. The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with --cache-dir or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by --vfs-cache-mode. The higher\nthe cache mode the more compatible rclone becomes at the cost of using\ndisk space.\n\nNote that files are written back to the remote only when they are closed\nand if they haven't been accessed for --vfs-write-back seconds. If\nrclone is quit or dies with files that haven't been uploaded, these will\nbe uploaded next time rclone is run with the same flags.\n\nIf using --vfs-cache-max-size or --vfs-cache-min-free-size note that the\ncache may exceed these quotas for two reasons. Firstly because it is\nonly checked every --vfs-cache-poll-interval. Secondly because open\nfiles cannot be evicted from the cache. When --vfs-cache-max-size or\n--vfs-cache-min-free-size is exceeded, rclone will attempt to evict the\nleast accessed files from the cache first. rclone will start with files\nthat haven't been accessed for the longest. This cache flushing strategy\nis efficient and more relevant files are likely to remain cached.\n\nThe --vfs-cache-max-age will evict files from the cache after the set\ntime since last access has passed. The default value of 1 hour will\nstart evicting files from cache that haven't been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting. Specify the time with standard\nnotation, s, m, h, d, w .\n\nYou should not run two copies of rclone using the same VFS cache with\nthe same or overlapping remotes if using --vfs-cache-mode > off. This\ncan potentially cause data corruption if you do. You can work around\nthis by giving each rclone its own cache hierarchy with --cache-dir. You\ndon't need to worry about this if the remotes in use don't overlap.\n\n--vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n-   Files can't be opened for both read AND write\n-   Files opened for write can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files open for read with O_TRUNC will be opened write only\n-   Files open for write only will behave as if O_TRUNC was supplied\n-   Open modes O_APPEND, O_TRUNC are ignored\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk. This means that files opened for write\nwill be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n-   Files opened for write only can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files opened for write only will ignore O_APPEND, O_TRUNC\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n--vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to --vfs-cache-mode writes.\n\nWhen reading a file rclone will read --buffer-size plus --vfs-read-ahead\nbytes ahead. The --buffer-size is buffered in memory whereas the\n--vfs-read-ahead is buffered on disk.\n\nWhen using this mode it is recommended that --buffer-size is not set too\nlarge and --vfs-read-ahead is set large if required.\n\nIMPORTANT not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache directory\nis on a filesystem which doesn't support sparse files and it will log an\nERROR message if one is detected.\n\nFingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file. Fingerprints are made from:\n\n-   size\n-   modification time\n-   hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n\nFor example hash is slow with the local and sftp backends as they have\nto read the entire file and hash it, and modtime is slow with the s3,\nswift, ftp and qinqstor backends because they need to do an extra API\ncall to fetch it.\n\nIf you use the --vfs-fast-fingerprint flag then rclone will not include\nthe slow operations in the fingerprint. This makes the fingerprinting\nless accurate but much faster and will improve the opening time of\ncached files.\n\nIf you are running a vfs cache over local, s3 or swift backends then\nusing this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n\nVFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the chunk\nspecified. This can reduce the used download quota for some remotes by\nrequesting only chunks from the remote that are actually read, at the\ncost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the\n--vfs-read-chunk-streams parameter.\n\n--vfs-read-chunk-streams == 0\n\nRclone will start reading a chunk of size --vfs-read-chunk-size, and\nthen double the size for each read. When --vfs-read-chunk-size-limit is\nspecified, and greater than --vfs-read-chunk-size, the chunk size for\neach open file will get doubled only until the specified value is\nreached. If the value is \"off\", which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n\nWith --vfs-read-chunk-size 100M and --vfs-read-chunk-size-limit 0 the\nfollowing parts will be downloaded: 0-100M, 100M-200M, 200M-300M,\n300M-400M and so on. When --vfs-read-chunk-size-limit 500M is specified,\nthe result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M,\n1200M-1700M and so on.\n\nSetting --vfs-read-chunk-size to 0 or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n--vfs-read-chunk-streams > 0\n\nRclone reads --vfs-read-chunk-streams chunks of size\n--vfs-read-chunk-size concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n--vfs-read-chunk-size and --vfs-read-chunk-streams as these will depend\non the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be --vfs-read-chunk-streams 16 and --vfs-read-chunk-size 4M.\nIn testing with AWS S3 the performance scaled roughly as the\n--vfs-read-chunk-streams setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more --vfs-read-chunk-streams in order to get\nthe throughput.\n\nVFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the chunked reading feature.\n\nIn particular S3 and Swift benefit hugely from the --no-modtime flag (or\nuse --use-server-modtime for a slightly different effect) as each read\nof the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather than\nseeking rclone will wait a short time for the in sequence read or write\nto come in. These flags only come into effect when not using an on disk\ncache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (--vfs-cache-mode with value writes or\nfull), the global flag --transfers can be set to adjust the number of\nparallel uploads of modified files from the cache (the related global\nflag --checkers has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\nVFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery. It is not allowed for two files in the same directory to differ\nonly by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to\nmake macOS file systems case-sensitive but that is not the default.\n\nThe --vfs-case-insensitive VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the\nremote as-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers to an\nexisting file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the\nsame name is not found but a name differing only by case exists, rclone\nwill transparently fixup the name. This fixup happens only when an\nexisting file is requested. Case sensitivity of file names created anew\nby rclone is controlled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source). The flag controls whether \"fixup\" is performed to\nsatisfy the target.\n\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \"true\" on Windows and\nmacOS, \"false\" otherwise. If the flag is provided without a value, then\nit is \"true\".\n\nThe --no-unicode-normalization flag controls whether a similar \"fixup\"\nis performed for filenames that differ but are canonically equivalent\nwith respect to unicode. Unicode normalization can be particularly\nhelpful for users of macOS, which prefers form NFD instead of the NFC\nused by most other platforms. It is therefore highly recommended to keep\nthe default of false on macOS, to avoid encoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n--vfs-block-norm-dupes flag allows hiding these duplicates. This comes\nwith a performance tradeoff, as rclone will have to scan the entire\ndirectory for duplicates when listing a directory. For this reason, it\nis recommended to leave this disabled if not needed. However, macOS\nusers may wish to consider using it, as otherwise, if a remote directory\ncontains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the\nmount, and both will appear to be editable, however, editing either\nversion will actually result in only the NFD version getting edited\nunder the hood. --vfs-block- norm-dupes prevents this confusion by\ndetecting this scenario, hiding the duplicates, and logging an error,\nsimilar to how this is handled in rclone sync.\n\nVFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing\nsystem. It can be useful when those statistics cannot be read correctly\nautomatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\nAlternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running df on the\nfilesystem, then pass the flag --vfs-used-is-size to rclone. With this\nflag set, instead of relying on the backend to report this information,\nrclone will scan the whole remote similar to rclone size and compute the\ntotal used space itself.\n\nWARNING. Contrary to rclone size, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots\nof API calls resulting in extra charges. Use it as a last resort and\nonly with caching.\n\nAuth Proxy\n\nIf you supply the parameter --auth-proxy /path/to/program then rclone\nwill use that program to generate backends on the fly which then are\nused to authenticate incoming requests. This uses a simple JSON based\nprotocol with input on STDIN and output on STDOUT.\n\nPLEASE NOTE: --auth-proxy and --authorized-keys cannot be used together,\nif --auth-proxy is set the authorized keys option will be ignored.\n\nThere is an example program bin/test_proxy.py in the rclone source code.\n\nThe program's job is to take a user and pass on the input and turn those\ninto the config for a backend on STDOUT in JSON format. This config will\nhave any default parameters for the backend added, but it won't use\nconfiguration from environment variables or command line options - it is\nthe job of the proxy program to make a complete config.\n\nThis config generated must have this extra parameter - _root - root to\nuse for the backend\n\nAnd it may have this parameter - _obscure - comma separated strings for\nparameters to obscure\n\nIf password authentication was used by the client, input to the proxy\nprocess (on STDIN) would look similar to this:\n\n    {\n        \"user\": \"me\",\n        \"pass\": \"mypassword\"\n    }\n\nIf public-key authentication was used by the client, input to the proxy\nprocess (on STDIN) would look similar to this:\n\n    {\n        \"user\": \"me\",\n        \"public_key\": \"AAAAB3NzaC1yc2EAAAADAQABAAABAQDuwESFdAe14hVS6omeyX7edc...JQdf\"\n    }\n\nAnd as an example return this on STDOUT\n\n    {\n        \"type\": \"sftp\",\n        \"_root\": \"\",\n        \"_obscure\": \"pass\",\n        \"user\": \"me\",\n        \"pass\": \"mypassword\",\n        \"host\": \"sftp.example.com\"\n    }\n\nThis would mean that an SFTP backend would be created on the fly for the\nuser and pass/public_key returned in the output to the host given. Note\nthat since _obscure is set to pass, rclone will obscure the pass\nparameter before creating the backend (which is required for sftp\nbackends).\n\nThe program can manipulate the supplied user in any way, for example to\nmake proxy to many different sftp backends, you could make the user be\nuser@example.com and then set the host to example.com in the output and\nthe user to user. For security you'd probably want to restrict the host\nto a limited list.\n\nNote that an internal cache is keyed on user so only use that for\nconfiguration, don't use pass or public_key. This also means that if a\nuser's password or public-key is changed the cache will need to expire\n(which takes 5 mins) before it takes effect.\n\nThis can be used to build general purpose proxies to any kind of backend\nthat rclone supports.\n\n    rclone serve ftp remote:path [flags]\n\nOptions\n\n          --addr string                            IPaddress:Port or :Port to bind server to (default \"localhost:2121\")\n          --auth-proxy string                      A program to use to create the backend from the auth\n          --cert string                            TLS PEM key (concatenation of certificate and CA certificate)\n          --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n          --dir-perms FileMode                     Directory permissions (default 777)\n          --file-perms FileMode                    File permissions (default 666)\n          --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n      -h, --help                                   help for ftp\n          --key string                             TLS PEM Private key\n          --no-checksum                            Don't compare checksums on up/download\n          --no-modtime                             Don't read/write the modification time (can speed things up)\n          --no-seek                                Don't allow seeking in files\n          --pass string                            Password for authentication (empty value allow every password)\n          --passive-port string                    Passive port range to use (default \"30000-32000\")\n          --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n          --public-ip string                       Public IP address to advertise for passive connections\n          --read-only                              Only allow read-only access\n          --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n          --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n          --user string                            User name for authentication (default \"anonymous\")\n          --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n          --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n          --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n          --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n          --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n          --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n          --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n          --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n          --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n          --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n          --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n          --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n          --vfs-read-chunk-streams int             The number of parallel streams to read at once\n          --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n          --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n          --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n          --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n          --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nSee Also\n\n-   rclone serve - Serve a remote over a protocol.\n\nrclone serve http\n\nServe the remote over HTTP.\n\nSynopsis\n\nRun a basic web server to serve a remote over HTTP. This can be viewed\nin a web browser or you can make a remote of type http read from it.\n\nYou can use the filter flags (e.g. --include, --exclude) to control what\nis served.\n\nThe server will log errors. Use -v to see access logs.\n\n--bwlimit will be respected for file transfers. Use --stats to control\nthe stats printing.\n\nServer options\n\nUse --addr to specify which IP address and port the server should listen\non, eg --addr 1.2.3.4:8000 or --addr :8080 to listen to all IPs. By\ndefault it only listens on localhost. You can use port :0 to let the OS\nchoose an available port.\n\nIf you set --addr to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n\nYou can use a unix socket by setting the url to unix:///path/to/socket\nor just by using an absolute path name. Note that unix sockets bypass\nthe authentication - this is expected to be done with file system\npermissions.\n\n--addr may be repeated to listen on multiple IPs/ports/sockets. Socket\nactivation, described further below, can also be used to accomplish the\nsame.\n\n--server-read-timeout and --server-write-timeout can be used to control\nthe timeouts on the server. Note that this is the total time for a\ntransfer.\n\n--max-header-bytes controls the maximum number of bytes the server will\naccept in the HTTP header.\n\n--baseurl controls the URL prefix that rclone serves from. By default\nrclone will serve from the root. If you used --baseurl \"/rclone\" then\nrclone would serve from a URL starting with \"/rclone/\". This is useful\nif you wish to proxy rclone serve. Rclone automatically inserts leading\nand trailing \"/\" on --baseurl, so --baseurl \"rclone\",\n--baseurl \"/rclone\" and --baseurl \"/rclone/\" are all treated\nidentically.\n\nTLS (SSL)\n\nBy default this will serve over http. If you want you can serve over\nhttps. You will need to supply the --cert and --key flags. If you wish\nto do client side certificate validation then you will need to supply\n--client-ca also.\n\n--cert should be a either a PEM encoded certificate or a concatenation\nof that with the CA certificate. --key should be the PEM encoded private\nkey and --client-ca should be the PEM encoded client certificate\nauthority certificate.\n\n--min-tls-version is minimum TLS version that is acceptable. Valid\nvalues are \"tls1.0\", \"tls1.1\", \"tls1.2\" and \"tls1.3\" (default \"tls1.0\").\n\nSocket activation\n\nInstead of the listening addresses specified above, rclone will listen\nto all FDs passed by the service manager, if any (and ignore any\narguments passed by --addr`).\n\nThis allows rclone to be a socket-activated service. It can be\nconfigured with .socket and .service unit files as described in\nhttps://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html\n\nSocket activation can be tested ad-hoc with the\nsystemd-socket-activatecommand\n\n       systemd-socket-activate -l 8000 -- rclone serve\n\nThis will socket-activate rclone on the first connection to port 8000\nover TCP. ### Template\n\n--template allows a user to specify a custom markup template for HTTP\nand WebDAV serve functions. The server exports the following markup to\nbe used within the template to server pages:\n\n  -----------------------------------------------------------------------\n  Parameter                           Description\n  ----------------------------------- -----------------------------------\n  .Name                               The full path of a file/directory.\n\n  .Title                              Directory listing of .Name\n\n  .Sort                               The current sort used. This is\n                                      changeable via ?sort= parameter\n\n                                      Sort Options:\n                                      namedirfirst,name,size,time\n                                      (default namedirfirst)\n\n  .Order                              The current ordering used. This is\n                                      changeable via ?order= parameter\n\n                                      Order Options: asc,desc (default\n                                      asc)\n\n  .Query                              Currently unused.\n\n  .Breadcrumb                         Allows for creating a relative\n                                      navigation\n\n  -- .Link                            The relative to the root link of\n                                      the Text.\n\n  -- .Text                            The Name of the directory.\n\n  .Entries                            Information about a specific\n                                      file/directory.\n\n  -- .URL                             The 'url' of an entry.\n\n  -- .Leaf                            Currently same as 'URL' but\n                                      intended to be 'just' the name.\n\n  -- .IsDir                           Boolean for if an entry is a\n                                      directory or not.\n\n  -- .Size                            Size in Bytes of the entry.\n\n  -- .ModTime                         The UTC timestamp of an entry.\n  -----------------------------------------------------------------------\n\nThe server also makes the following functions available so that they can\nbe used within the template. These functions help extend the options for\ndynamic rendering of HTML. They can be used to render HTML based on\nspecific conditions.\n\n  -----------------------------------------------------------------------\n  Function                            Description\n  ----------------------------------- -----------------------------------\n  afterEpoch                          Returns the time since the epoch\n                                      for the given time.\n\n  contains                            Checks whether a given substring is\n                                      present or not in a given string.\n\n  hasPrefix                           Checks whether the given string\n                                      begins with the specified prefix.\n\n  hasSuffix                           Checks whether the given string end\n                                      with the specified suffix.\n  -----------------------------------------------------------------------\n\nAuthentication\n\nBy default this will serve files without needing a login.\n\nYou can either use an htpasswd file which can take lots of users, or set\na single username and password with the --user and --pass flags.\n\nIf no static users are configured by either of the above methods, and\nclient certificates are required by the --client-ca flag passed to the\nserver, the client certificate common name will be considered as the\nusername.\n\nUse --htpasswd /path/to/htpasswd to provide an htpasswd file. This is in\nstandard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication. Bcrypt is recommended.\n\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.\n\nUse --realm to set the authentication realm.\n\nUse --salt to change the password hashing salt from the default.\n\nVFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk filing\nsystem.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the VFS\nlayer has to deal with that. Because there is no one right way of doing\nthis there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n\nVFS Directory Cache\n\nUsing the --dir-cache-time flag, you can control how long a directory\nshould be considered up to date and not refreshed from the backend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges. If the backend supports polling, changes will be picked up\nwithin the polling interval.\n\nYou can send a SIGHUP signal to rclone for it to flush all directory\ncaches, regardless of how old they are. Assuming only one rclone\ninstance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\nVFS File Buffering\n\nThe --buffer-size flag determines the amount of memory, that will be\nused to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file. The buffer\nwill only use memory for data that is downloaded but not not yet read.\nIf the buffer is empty, only a small amount of memory will be used.\n\nThe maximum memory used by rclone for buffering can be up to\n--buffer-size * open files.\n\nVFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file. See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with -vv rclone will print the location of the file cache. The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with --cache-dir or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by --vfs-cache-mode. The higher\nthe cache mode the more compatible rclone becomes at the cost of using\ndisk space.\n\nNote that files are written back to the remote only when they are closed\nand if they haven't been accessed for --vfs-write-back seconds. If\nrclone is quit or dies with files that haven't been uploaded, these will\nbe uploaded next time rclone is run with the same flags.\n\nIf using --vfs-cache-max-size or --vfs-cache-min-free-size note that the\ncache may exceed these quotas for two reasons. Firstly because it is\nonly checked every --vfs-cache-poll-interval. Secondly because open\nfiles cannot be evicted from the cache. When --vfs-cache-max-size or\n--vfs-cache-min-free-size is exceeded, rclone will attempt to evict the\nleast accessed files from the cache first. rclone will start with files\nthat haven't been accessed for the longest. This cache flushing strategy\nis efficient and more relevant files are likely to remain cached.\n\nThe --vfs-cache-max-age will evict files from the cache after the set\ntime since last access has passed. The default value of 1 hour will\nstart evicting files from cache that haven't been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting. Specify the time with standard\nnotation, s, m, h, d, w .\n\nYou should not run two copies of rclone using the same VFS cache with\nthe same or overlapping remotes if using --vfs-cache-mode > off. This\ncan potentially cause data corruption if you do. You can work around\nthis by giving each rclone its own cache hierarchy with --cache-dir. You\ndon't need to worry about this if the remotes in use don't overlap.\n\n--vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n-   Files can't be opened for both read AND write\n-   Files opened for write can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files open for read with O_TRUNC will be opened write only\n-   Files open for write only will behave as if O_TRUNC was supplied\n-   Open modes O_APPEND, O_TRUNC are ignored\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk. This means that files opened for write\nwill be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n-   Files opened for write only can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files opened for write only will ignore O_APPEND, O_TRUNC\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n--vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to --vfs-cache-mode writes.\n\nWhen reading a file rclone will read --buffer-size plus --vfs-read-ahead\nbytes ahead. The --buffer-size is buffered in memory whereas the\n--vfs-read-ahead is buffered on disk.\n\nWhen using this mode it is recommended that --buffer-size is not set too\nlarge and --vfs-read-ahead is set large if required.\n\nIMPORTANT not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache directory\nis on a filesystem which doesn't support sparse files and it will log an\nERROR message if one is detected.\n\nFingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file. Fingerprints are made from:\n\n-   size\n-   modification time\n-   hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n\nFor example hash is slow with the local and sftp backends as they have\nto read the entire file and hash it, and modtime is slow with the s3,\nswift, ftp and qinqstor backends because they need to do an extra API\ncall to fetch it.\n\nIf you use the --vfs-fast-fingerprint flag then rclone will not include\nthe slow operations in the fingerprint. This makes the fingerprinting\nless accurate but much faster and will improve the opening time of\ncached files.\n\nIf you are running a vfs cache over local, s3 or swift backends then\nusing this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n\nVFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the chunk\nspecified. This can reduce the used download quota for some remotes by\nrequesting only chunks from the remote that are actually read, at the\ncost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the\n--vfs-read-chunk-streams parameter.\n\n--vfs-read-chunk-streams == 0\n\nRclone will start reading a chunk of size --vfs-read-chunk-size, and\nthen double the size for each read. When --vfs-read-chunk-size-limit is\nspecified, and greater than --vfs-read-chunk-size, the chunk size for\neach open file will get doubled only until the specified value is\nreached. If the value is \"off\", which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n\nWith --vfs-read-chunk-size 100M and --vfs-read-chunk-size-limit 0 the\nfollowing parts will be downloaded: 0-100M, 100M-200M, 200M-300M,\n300M-400M and so on. When --vfs-read-chunk-size-limit 500M is specified,\nthe result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M,\n1200M-1700M and so on.\n\nSetting --vfs-read-chunk-size to 0 or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n--vfs-read-chunk-streams > 0\n\nRclone reads --vfs-read-chunk-streams chunks of size\n--vfs-read-chunk-size concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n--vfs-read-chunk-size and --vfs-read-chunk-streams as these will depend\non the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be --vfs-read-chunk-streams 16 and --vfs-read-chunk-size 4M.\nIn testing with AWS S3 the performance scaled roughly as the\n--vfs-read-chunk-streams setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more --vfs-read-chunk-streams in order to get\nthe throughput.\n\nVFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the chunked reading feature.\n\nIn particular S3 and Swift benefit hugely from the --no-modtime flag (or\nuse --use-server-modtime for a slightly different effect) as each read\nof the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather than\nseeking rclone will wait a short time for the in sequence read or write\nto come in. These flags only come into effect when not using an on disk\ncache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (--vfs-cache-mode with value writes or\nfull), the global flag --transfers can be set to adjust the number of\nparallel uploads of modified files from the cache (the related global\nflag --checkers has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\nVFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery. It is not allowed for two files in the same directory to differ\nonly by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to\nmake macOS file systems case-sensitive but that is not the default.\n\nThe --vfs-case-insensitive VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the\nremote as-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers to an\nexisting file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the\nsame name is not found but a name differing only by case exists, rclone\nwill transparently fixup the name. This fixup happens only when an\nexisting file is requested. Case sensitivity of file names created anew\nby rclone is controlled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source). The flag controls whether \"fixup\" is performed to\nsatisfy the target.\n\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \"true\" on Windows and\nmacOS, \"false\" otherwise. If the flag is provided without a value, then\nit is \"true\".\n\nThe --no-unicode-normalization flag controls whether a similar \"fixup\"\nis performed for filenames that differ but are canonically equivalent\nwith respect to unicode. Unicode normalization can be particularly\nhelpful for users of macOS, which prefers form NFD instead of the NFC\nused by most other platforms. It is therefore highly recommended to keep\nthe default of false on macOS, to avoid encoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n--vfs-block-norm-dupes flag allows hiding these duplicates. This comes\nwith a performance tradeoff, as rclone will have to scan the entire\ndirectory for duplicates when listing a directory. For this reason, it\nis recommended to leave this disabled if not needed. However, macOS\nusers may wish to consider using it, as otherwise, if a remote directory\ncontains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the\nmount, and both will appear to be editable, however, editing either\nversion will actually result in only the NFD version getting edited\nunder the hood. --vfs-block- norm-dupes prevents this confusion by\ndetecting this scenario, hiding the duplicates, and logging an error,\nsimilar to how this is handled in rclone sync.\n\nVFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing\nsystem. It can be useful when those statistics cannot be read correctly\nautomatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\nAlternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running df on the\nfilesystem, then pass the flag --vfs-used-is-size to rclone. With this\nflag set, instead of relying on the backend to report this information,\nrclone will scan the whole remote similar to rclone size and compute the\ntotal used space itself.\n\nWARNING. Contrary to rclone size, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots\nof API calls resulting in extra charges. Use it as a last resort and\nonly with caching.\n\nAuth Proxy\n\nIf you supply the parameter --auth-proxy /path/to/program then rclone\nwill use that program to generate backends on the fly which then are\nused to authenticate incoming requests. This uses a simple JSON based\nprotocol with input on STDIN and output on STDOUT.\n\nPLEASE NOTE: --auth-proxy and --authorized-keys cannot be used together,\nif --auth-proxy is set the authorized keys option will be ignored.\n\nThere is an example program bin/test_proxy.py in the rclone source code.\n\nThe program's job is to take a user and pass on the input and turn those\ninto the config for a backend on STDOUT in JSON format. This config will\nhave any default parameters for the backend added, but it won't use\nconfiguration from environment variables or command line options - it is\nthe job of the proxy program to make a complete config.\n\nThis config generated must have this extra parameter - _root - root to\nuse for the backend\n\nAnd it may have this parameter - _obscure - comma separated strings for\nparameters to obscure\n\nIf password authentication was used by the client, input to the proxy\nprocess (on STDIN) would look similar to this:\n\n    {\n        \"user\": \"me\",\n        \"pass\": \"mypassword\"\n    }\n\nIf public-key authentication was used by the client, input to the proxy\nprocess (on STDIN) would look similar to this:\n\n    {\n        \"user\": \"me\",\n        \"public_key\": \"AAAAB3NzaC1yc2EAAAADAQABAAABAQDuwESFdAe14hVS6omeyX7edc...JQdf\"\n    }\n\nAnd as an example return this on STDOUT\n\n    {\n        \"type\": \"sftp\",\n        \"_root\": \"\",\n        \"_obscure\": \"pass\",\n        \"user\": \"me\",\n        \"pass\": \"mypassword\",\n        \"host\": \"sftp.example.com\"\n    }\n\nThis would mean that an SFTP backend would be created on the fly for the\nuser and pass/public_key returned in the output to the host given. Note\nthat since _obscure is set to pass, rclone will obscure the pass\nparameter before creating the backend (which is required for sftp\nbackends).\n\nThe program can manipulate the supplied user in any way, for example to\nmake proxy to many different sftp backends, you could make the user be\nuser@example.com and then set the host to example.com in the output and\nthe user to user. For security you'd probably want to restrict the host\nto a limited list.\n\nNote that an internal cache is keyed on user so only use that for\nconfiguration, don't use pass or public_key. This also means that if a\nuser's password or public-key is changed the cache will need to expire\n(which takes 5 mins) before it takes effect.\n\nThis can be used to build general purpose proxies to any kind of backend\nthat rclone supports.\n\n    rclone serve http remote:path [flags]\n\nOptions\n\n          --addr stringArray                       IPaddress:Port, :Port or [unix://]/path/to/socket to bind server to (default [127.0.0.1:8080])\n          --allow-origin string                    Origin which cross-domain request (CORS) can be executed from\n          --auth-proxy string                      A program to use to create the backend from the auth\n          --baseurl string                         Prefix for URLs - leave blank for root\n          --cert string                            TLS PEM key (concatenation of certificate and CA certificate)\n          --client-ca string                       Client certificate authority to verify clients with\n          --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n          --dir-perms FileMode                     Directory permissions (default 777)\n          --file-perms FileMode                    File permissions (default 666)\n          --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n      -h, --help                                   help for http\n          --htpasswd string                        A htpasswd file - if not provided no authentication is done\n          --key string                             TLS PEM Private key\n          --max-header-bytes int                   Maximum size of request header (default 4096)\n          --min-tls-version string                 Minimum TLS version that is acceptable (default \"tls1.0\")\n          --no-checksum                            Don't compare checksums on up/download\n          --no-modtime                             Don't read/write the modification time (can speed things up)\n          --no-seek                                Don't allow seeking in files\n          --pass string                            Password for authentication\n          --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n          --read-only                              Only allow read-only access\n          --realm string                           Realm for authentication\n          --salt string                            Password hashing salt (default \"dlPL2MqE\")\n          --server-read-timeout Duration           Timeout for server reading data (default 1h0m0s)\n          --server-write-timeout Duration          Timeout for server writing data (default 1h0m0s)\n          --template string                        User-specified template\n          --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n          --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n          --user string                            User name for authentication\n          --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n          --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n          --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n          --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n          --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n          --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n          --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n          --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n          --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n          --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n          --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n          --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n          --vfs-read-chunk-streams int             The number of parallel streams to read at once\n          --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n          --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n          --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n          --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n          --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nSee Also\n\n-   rclone serve - Serve a remote over a protocol.\n\nrclone serve nfs\n\nServe the remote as an NFS mount\n\nSynopsis\n\nCreate an NFS server that serves the given remote over the network.\n\nThis implements an NFSv3 server to serve any rclone remote via NFS.\n\nThe primary purpose for this command is to enable the mount command on\nrecent macOS versions where installing FUSE is very cumbersome.\n\nThis server does not implement any authentication so any client will be\nable to access the data. To limit access, you can use serve nfs on the\nloopback address or rely on secure tunnels (such as SSH) or use\nfirewalling.\n\nFor this reason, by default, a random TCP port is chosen and the\nloopback interface is used for the listening address by default; meaning\nthat it is only available to the local machine. If you want other\nmachines to access the NFS mount over local network, you need to specify\nthe listening address and port using the --addr flag.\n\nModifying files through the NFS protocol requires VFS caching. Usually\nyou will need to specify --vfs-cache-mode in order to be able to write\nto the mountpoint (full is recommended). If you don't specify VFS cache\nmode, the mount will be read-only.\n\n--nfs-cache-type controls the type of the NFS handle cache. By default\nthis is memory where new handles will be randomly allocated when needed.\nThese are stored in memory. If the server is restarted the handle cache\nwill be lost and connected NFS clients will get stale handle errors.\n\n--nfs-cache-type disk uses an on disk NFS handle cache. Rclone hashes\nthe path of the object and stores it in a file named after the hash.\nThese hashes are stored on disk the directory controlled by --cache-dir\nor the exact directory may be specified with --nfs-cache-dir. Using this\nmeans that the NFS server can be restarted at will without affecting the\nconnected clients.\n\n--nfs-cache-type symlink is similar to --nfs-cache-type disk in that it\nuses an on disk cache, but the cache entries are held as symlinks.\nRclone will use the handle of the underlying file as the NFS handle\nwhich improves performance. This sort of cache can't be backed up and\nrestored as the underlying handles will change. This is Linux only.\n\n--nfs-cache-handle-limit controls the maximum number of cached NFS\nhandles stored by the caching handler. This should not be set too low or\nyou may experience errors when trying to access files. The default is\n1000000, but consider lowering this limit if the server's system\nresource usage causes problems. This is only used by the memory type\ncache.\n\nTo serve NFS over the network use following command:\n\n    rclone serve nfs remote: --addr 0.0.0.0:$PORT --vfs-cache-mode=full\n\nThis specifies a port that can be used in the mount command. To mount\nthe server under Linux/macOS, use the following command:\n\n    mount -t nfs -o port=$PORT,mountport=$PORT,tcp $HOSTNAME:/ path/to/mountpoint\n\nWhere $PORT is the same port number used in the serve nfs command and\n$HOSTNAME is the network address of the machine that serve nfs was run\non.\n\nThis command is only available on Unix platforms.\n\nVFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk filing\nsystem.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the VFS\nlayer has to deal with that. Because there is no one right way of doing\nthis there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n\nVFS Directory Cache\n\nUsing the --dir-cache-time flag, you can control how long a directory\nshould be considered up to date and not refreshed from the backend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges. If the backend supports polling, changes will be picked up\nwithin the polling interval.\n\nYou can send a SIGHUP signal to rclone for it to flush all directory\ncaches, regardless of how old they are. Assuming only one rclone\ninstance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\nVFS File Buffering\n\nThe --buffer-size flag determines the amount of memory, that will be\nused to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file. The buffer\nwill only use memory for data that is downloaded but not not yet read.\nIf the buffer is empty, only a small amount of memory will be used.\n\nThe maximum memory used by rclone for buffering can be up to\n--buffer-size * open files.\n\nVFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file. See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with -vv rclone will print the location of the file cache. The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with --cache-dir or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by --vfs-cache-mode. The higher\nthe cache mode the more compatible rclone becomes at the cost of using\ndisk space.\n\nNote that files are written back to the remote only when they are closed\nand if they haven't been accessed for --vfs-write-back seconds. If\nrclone is quit or dies with files that haven't been uploaded, these will\nbe uploaded next time rclone is run with the same flags.\n\nIf using --vfs-cache-max-size or --vfs-cache-min-free-size note that the\ncache may exceed these quotas for two reasons. Firstly because it is\nonly checked every --vfs-cache-poll-interval. Secondly because open\nfiles cannot be evicted from the cache. When --vfs-cache-max-size or\n--vfs-cache-min-free-size is exceeded, rclone will attempt to evict the\nleast accessed files from the cache first. rclone will start with files\nthat haven't been accessed for the longest. This cache flushing strategy\nis efficient and more relevant files are likely to remain cached.\n\nThe --vfs-cache-max-age will evict files from the cache after the set\ntime since last access has passed. The default value of 1 hour will\nstart evicting files from cache that haven't been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting. Specify the time with standard\nnotation, s, m, h, d, w .\n\nYou should not run two copies of rclone using the same VFS cache with\nthe same or overlapping remotes if using --vfs-cache-mode > off. This\ncan potentially cause data corruption if you do. You can work around\nthis by giving each rclone its own cache hierarchy with --cache-dir. You\ndon't need to worry about this if the remotes in use don't overlap.\n\n--vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n-   Files can't be opened for both read AND write\n-   Files opened for write can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files open for read with O_TRUNC will be opened write only\n-   Files open for write only will behave as if O_TRUNC was supplied\n-   Open modes O_APPEND, O_TRUNC are ignored\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk. This means that files opened for write\nwill be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n-   Files opened for write only can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files opened for write only will ignore O_APPEND, O_TRUNC\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n--vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to --vfs-cache-mode writes.\n\nWhen reading a file rclone will read --buffer-size plus --vfs-read-ahead\nbytes ahead. The --buffer-size is buffered in memory whereas the\n--vfs-read-ahead is buffered on disk.\n\nWhen using this mode it is recommended that --buffer-size is not set too\nlarge and --vfs-read-ahead is set large if required.\n\nIMPORTANT not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache directory\nis on a filesystem which doesn't support sparse files and it will log an\nERROR message if one is detected.\n\nFingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file. Fingerprints are made from:\n\n-   size\n-   modification time\n-   hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n\nFor example hash is slow with the local and sftp backends as they have\nto read the entire file and hash it, and modtime is slow with the s3,\nswift, ftp and qinqstor backends because they need to do an extra API\ncall to fetch it.\n\nIf you use the --vfs-fast-fingerprint flag then rclone will not include\nthe slow operations in the fingerprint. This makes the fingerprinting\nless accurate but much faster and will improve the opening time of\ncached files.\n\nIf you are running a vfs cache over local, s3 or swift backends then\nusing this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n\nVFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the chunk\nspecified. This can reduce the used download quota for some remotes by\nrequesting only chunks from the remote that are actually read, at the\ncost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the\n--vfs-read-chunk-streams parameter.\n\n--vfs-read-chunk-streams == 0\n\nRclone will start reading a chunk of size --vfs-read-chunk-size, and\nthen double the size for each read. When --vfs-read-chunk-size-limit is\nspecified, and greater than --vfs-read-chunk-size, the chunk size for\neach open file will get doubled only until the specified value is\nreached. If the value is \"off\", which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n\nWith --vfs-read-chunk-size 100M and --vfs-read-chunk-size-limit 0 the\nfollowing parts will be downloaded: 0-100M, 100M-200M, 200M-300M,\n300M-400M and so on. When --vfs-read-chunk-size-limit 500M is specified,\nthe result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M,\n1200M-1700M and so on.\n\nSetting --vfs-read-chunk-size to 0 or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n--vfs-read-chunk-streams > 0\n\nRclone reads --vfs-read-chunk-streams chunks of size\n--vfs-read-chunk-size concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n--vfs-read-chunk-size and --vfs-read-chunk-streams as these will depend\non the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be --vfs-read-chunk-streams 16 and --vfs-read-chunk-size 4M.\nIn testing with AWS S3 the performance scaled roughly as the\n--vfs-read-chunk-streams setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more --vfs-read-chunk-streams in order to get\nthe throughput.\n\nVFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the chunked reading feature.\n\nIn particular S3 and Swift benefit hugely from the --no-modtime flag (or\nuse --use-server-modtime for a slightly different effect) as each read\nof the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather than\nseeking rclone will wait a short time for the in sequence read or write\nto come in. These flags only come into effect when not using an on disk\ncache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (--vfs-cache-mode with value writes or\nfull), the global flag --transfers can be set to adjust the number of\nparallel uploads of modified files from the cache (the related global\nflag --checkers has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\nVFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery. It is not allowed for two files in the same directory to differ\nonly by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to\nmake macOS file systems case-sensitive but that is not the default.\n\nThe --vfs-case-insensitive VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the\nremote as-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers to an\nexisting file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the\nsame name is not found but a name differing only by case exists, rclone\nwill transparently fixup the name. This fixup happens only when an\nexisting file is requested. Case sensitivity of file names created anew\nby rclone is controlled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source). The flag controls whether \"fixup\" is performed to\nsatisfy the target.\n\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \"true\" on Windows and\nmacOS, \"false\" otherwise. If the flag is provided without a value, then\nit is \"true\".\n\nThe --no-unicode-normalization flag controls whether a similar \"fixup\"\nis performed for filenames that differ but are canonically equivalent\nwith respect to unicode. Unicode normalization can be particularly\nhelpful for users of macOS, which prefers form NFD instead of the NFC\nused by most other platforms. It is therefore highly recommended to keep\nthe default of false on macOS, to avoid encoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n--vfs-block-norm-dupes flag allows hiding these duplicates. This comes\nwith a performance tradeoff, as rclone will have to scan the entire\ndirectory for duplicates when listing a directory. For this reason, it\nis recommended to leave this disabled if not needed. However, macOS\nusers may wish to consider using it, as otherwise, if a remote directory\ncontains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the\nmount, and both will appear to be editable, however, editing either\nversion will actually result in only the NFD version getting edited\nunder the hood. --vfs-block- norm-dupes prevents this confusion by\ndetecting this scenario, hiding the duplicates, and logging an error,\nsimilar to how this is handled in rclone sync.\n\nVFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing\nsystem. It can be useful when those statistics cannot be read correctly\nautomatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\nAlternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running df on the\nfilesystem, then pass the flag --vfs-used-is-size to rclone. With this\nflag set, instead of relying on the backend to report this information,\nrclone will scan the whole remote similar to rclone size and compute the\ntotal used space itself.\n\nWARNING. Contrary to rclone size, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots\nof API calls resulting in extra charges. Use it as a last resort and\nonly with caching.\n\n    rclone serve nfs remote:path [flags]\n\nOptions\n\n          --addr string                            IPaddress:Port or :Port to bind server to\n          --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n          --dir-perms FileMode                     Directory permissions (default 777)\n          --file-perms FileMode                    File permissions (default 666)\n          --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n      -h, --help                                   help for nfs\n          --nfs-cache-dir string                   The directory the NFS handle cache will use if set\n          --nfs-cache-handle-limit int             max file handles cached simultaneously (min 5) (default 1000000)\n          --nfs-cache-type memory|disk|symlink     Type of NFS handle cache to use (default memory)\n          --no-checksum                            Don't compare checksums on up/download\n          --no-modtime                             Don't read/write the modification time (can speed things up)\n          --no-seek                                Don't allow seeking in files\n          --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n          --read-only                              Only allow read-only access\n          --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n          --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n          --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n          --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n          --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n          --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n          --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n          --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n          --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n          --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n          --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n          --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n          --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n          --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached ('off' is unlimited) (default off)\n          --vfs-read-chunk-streams int             The number of parallel streams to read at once\n          --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n          --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n          --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n          --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n          --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n\nOptions shared with other commands are described next. See the global\nflags page for global options not listed here.\n\nFilter Options\n\nFlags for filtering directory listings\n\n          --delete-excluded                     Delete files on dest excluded from sync\n          --exclude stringArray                 Exclude files matching pattern\n          --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n          --exclude-if-present stringArray      Exclude directories if filename is present\n          --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n          --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n      -f, --filter stringArray                  Add a file filtering rule\n          --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n          --ignore-case                         Ignore case in filters (case insensitive)\n          --include stringArray                 Include files matching pattern\n          --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n          --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --max-depth int                       If set limits the recursion depth to this (default -1)\n          --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n          --metadata-exclude stringArray        Exclude metadatas matching pattern\n          --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n          --metadata-filter stringArray         Add a metadata filtering rule\n          --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n          --metadata-include stringArray        Include metadatas matching pattern\n          --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n          --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n          --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\nSee Also\n\n-   rclone serve - Serve a remote over a protocol.\n\nrclone serve restic\n\nServe the remote for restic's REST API.\n\nSynopsis\n\nRun a basic web server to serve a remote over restic's REST backend API\nover HTTP. This allows restic to use rclone as a data storage mechanism\nfor cloud providers that restic does not support directly.\n\nRestic is a command-line program for doing backups.\n\nThe server will log errors. Use -v to see access logs.\n\n--bwlimit will be respected for file transfers. Use --stats to control\nthe stats printing.\n\nSetting up rclone for use by restic\n\nFirst set up a remote for your chosen cloud provider.\n\nOnce you have set up the remote, check it is working with, for example\n\"rclone lsd remote:\". You may have called the remote something other\nthan \"remote:\" - just substitute whatever you called it in the following\ninstructions.\n\nNow start the rclone restic server\n\n    rclone serve restic -v remote:backup\n\nWhere you can replace \"backup\" in the above by whatever path in the\nremote you wish to use.\n\nBy default this will serve on \"localhost:8080\" you can change this with\nuse of the --addr flag.\n\nYou might wish to start this server on boot.\n\nAdding --cache-objects=false will cause rclone to stop caching objects\nreturned from the List call. Caching is normally desirable as it speeds\nup downloading objects, saves transactions and uses very little memory.\n\nSetting up restic to use rclone\n\nNow you can follow the restic instructions on setting up restic.\n\nNote that you will need restic 0.8.2 or later to interoperate with\nrclone.\n\nFor the example above you will want to use \"http://localhost:8080/\" as\nthe URL for the REST server.\n\nFor example:\n\n    $ export RESTIC_REPOSITORY=rest:http://localhost:8080/\n    $ export RESTIC_PASSWORD=yourpassword\n    $ restic init\n    created restic backend 8b1a4b56ae at rest:http://localhost:8080/\n\n    Please note that knowledge of your password is required to access\n    the repository. Losing your password means that your data is\n    irrecoverably lost.\n    $ restic backup /path/to/files/to/backup\n    scan [/path/to/files/to/backup]\n    scanned 189 directories, 312 files in 0:00\n    [0:00] 100.00%  38.128 MiB / 38.128 MiB  501 / 501 items  0 errors  ETA 0:00\n    duration: 0:00\n    snapshot 45c8fdd8 saved\n\nMultiple repositories\n\nNote that you can use the endpoint to host multiple repositories. Do\nthis by adding a directory name or path after the URL. Note that these\nmust end with /. Eg\n\n    $ export RESTIC_REPOSITORY=rest:http://localhost:8080/user1repo/\n    # backup user1 stuff\n    $ export RESTIC_REPOSITORY=rest:http://localhost:8080/user2repo/\n    # backup user2 stuff\n\nPrivate repositories\n\nThe--private-repos flag can be used to limit users to repositories\nstarting with a path of /<username>/.\n\nServer options\n\nUse --addr to specify which IP address and port the server should listen\non, eg --addr 1.2.3.4:8000 or --addr :8080 to listen to all IPs. By\ndefault it only listens on localhost. You can use port :0 to let the OS\nchoose an available port.\n\nIf you set --addr to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n\nYou can use a unix socket by setting the url to unix:///path/to/socket\nor just by using an absolute path name. Note that unix sockets bypass\nthe authentication - this is expected to be done with file system\npermissions.\n\n--addr may be repeated to listen on multiple IPs/ports/sockets. Socket\nactivation, described further below, can also be used to accomplish the\nsame.\n\n--server-read-timeout and --server-write-timeout can be used to control\nthe timeouts on the server. Note that this is the total time for a\ntransfer.\n\n--max-header-bytes controls the maximum number of bytes the server will\naccept in the HTTP header.\n\n--baseurl controls the URL prefix that rclone serves from. By default\nrclone will serve from the root. If you used --baseurl \"/rclone\" then\nrclone would serve from a URL starting with \"/rclone/\". This is useful\nif you wish to proxy rclone serve. Rclone automatically inserts leading\nand trailing \"/\" on --baseurl, so --baseurl \"rclone\",\n--baseurl \"/rclone\" and --baseurl \"/rclone/\" are all treated\nidentically.\n\nTLS (SSL)\n\nBy default this will serve over http. If you want you can serve over\nhttps. You will need to supply the --cert and --key flags. If you wish\nto do client side certificate validation then you will need to supply\n--client-ca also.\n\n--cert should be a either a PEM encoded certificate or a concatenation\nof that with the CA certificate. --key should be the PEM encoded private\nkey and --client-ca should be the PEM encoded client certificate\nauthority certificate.\n\n--min-tls-version is minimum TLS version that is acceptable. Valid\nvalues are \"tls1.0\", \"tls1.1\", \"tls1.2\" and \"tls1.3\" (default \"tls1.0\").\n\nSocket activation\n\nInstead of the listening addresses specified above, rclone will listen\nto all FDs passed by the service manager, if any (and ignore any\narguments passed by --addr`).\n\nThis allows rclone to be a socket-activated service. It can be\nconfigured with .socket and .service unit files as described in\nhttps://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html\n\nSocket activation can be tested ad-hoc with the\nsystemd-socket-activatecommand\n\n       systemd-socket-activate -l 8000 -- rclone serve\n\nThis will socket-activate rclone on the first connection to port 8000\nover TCP. ### Authentication\n\nBy default this will serve files without needing a login.\n\nYou can either use an htpasswd file which can take lots of users, or set\na single username and password with the --user and --pass flags.\n\nIf no static users are configured by either of the above methods, and\nclient certificates are required by the --client-ca flag passed to the\nserver, the client certificate common name will be considered as the\nusername.\n\nUse --htpasswd /path/to/htpasswd to provide an htpasswd file. This is in\nstandard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication. Bcrypt is recommended.\n\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.\n\nUse --realm to set the authentication realm.\n\nUse --salt to change the password hashing salt from the default.\n\n    rclone serve restic remote:path [flags]\n\nOptions\n\n          --addr stringArray                IPaddress:Port, :Port or [unix://]/path/to/socket to bind server to (default [127.0.0.1:8080])\n          --allow-origin string             Origin which cross-domain request (CORS) can be executed from\n          --append-only                     Disallow deletion of repository data\n          --baseurl string                  Prefix for URLs - leave blank for root\n          --cache-objects                   Cache listed objects (default true)\n          --cert string                     TLS PEM key (concatenation of certificate and CA certificate)\n          --client-ca string                Client certificate authority to verify clients with\n      -h, --help                            help for restic\n          --htpasswd string                 A htpasswd file - if not provided no authentication is done\n          --key string                      TLS PEM Private key\n          --max-header-bytes int            Maximum size of request header (default 4096)\n          --min-tls-version string          Minimum TLS version that is acceptable (default \"tls1.0\")\n          --pass string                     Password for authentication\n          --private-repos                   Users can only access their private repo\n          --realm string                    Realm for authentication\n          --salt string                     Password hashing salt (default \"dlPL2MqE\")\n          --server-read-timeout Duration    Timeout for server reading data (default 1h0m0s)\n          --server-write-timeout Duration   Timeout for server writing data (default 1h0m0s)\n          --stdio                           Run an HTTP2 server on stdin/stdout\n          --user string                     User name for authentication\n\nSee the global flags page for global options not listed here.\n\nSee Also\n\n-   rclone serve - Serve a remote over a protocol.\n\nrclone serve s3\n\nServe remote:path over s3.\n\nSynopsis\n\nserve s3 implements a basic s3 server that serves a remote via s3. This\ncan be viewed with an s3 client, or you can make an s3 type remote to\nread and write to it with rclone.\n\nserve s3 is considered Experimental so use with care.\n\nS3 server supports Signature Version 4 authentication. Just use\n--auth-key accessKey,secretKey and set the Authorization header\ncorrectly in the request. (See the AWS docs).\n\n--auth-key can be repeated for multiple auth pairs. If --auth-key is not\nprovided then serve s3 will allow anonymous access.\n\nPlease note that some clients may require HTTPS endpoints. See the SSL\ndocs for more information.\n\nThis command uses the VFS directory cache. All the functionality will\nwork with --vfs-cache-mode off. Using --vfs-cache-mode full (or writes)\ncan be used to cache objects locally to improve performance.\n\nUse --force-path-style=false if you want to use the bucket name as a\npart of the hostname (such as mybucket.local)\n\nUse --etag-hash if you want to change the hash uses for the ETag. Note\nthat using anything other than MD5 (the default) is likely to cause\nproblems for S3 clients which rely on the Etag being the MD5.\n\nQuickstart\n\nFor a simple set up, to serve remote:path over s3, run the server like\nthis:\n\n    rclone serve s3 --auth-key ACCESS_KEY_ID,SECRET_ACCESS_KEY remote:path\n\nFor example, to use a simple folder in the filesystem, run the server\nwith a command like this:\n\n    rclone serve s3 --auth-key ACCESS_KEY_ID,SECRET_ACCESS_KEY local:/path/to/folder\n\nThe rclone.conf for the server could look like this:\n\n    [local]\n    type = local\n\nThe local configuration is optional though. If you run the server with a\nremote:path like /path/to/folder (without the local: prefix and without\nan rclone.conf file), rclone will fall back to a default configuration,\nwhich will be visible as a warning in the logs. But it will run\nnonetheless.\n\nThis will be compatible with an rclone (client) remote configuration\nwhich is defined like this:\n\n    [serves3]\n    type = s3\n    provider = Rclone\n    endpoint = http://127.0.0.1:8080/\n    access_key_id = ACCESS_KEY_ID\n    secret_access_key = SECRET_ACCESS_KEY\n    use_multipart_uploads = false\n\nNote that setting disable_multipart_uploads = true is to work around a\nbug which will be fixed in due course.\n\nBugs\n\nWhen uploading multipart files serve s3 holds all the parts in memory\n(see #7453). This is a limitaton of the library rclone uses for serving\nS3 and will hopefully be fixed at some point.\n\nMultipart server side copies do not work (see #7454). These take a very\nlong time and eventually fail. The default threshold for multipart\nserver side copies is 5G which is the maximum it can be, so files above\nthis side will fail to be server side copied.\n\nFor a current list of serve s3 bugs see the serve s3 bug category on\nGitHub.\n\nLimitations\n\nserve s3 will treat all directories in the root as buckets and ignore\nall files in the root. You can use CreateBucket to create folders under\nthe root, but you can't create empty folders under other folders not in\nthe root.\n\nWhen using PutObject or DeleteObject, rclone will automatically create\nor clean up empty folders. If you don't want to clean up empty folders\nautomatically, use --no-cleanup.\n\nWhen using ListObjects, rclone will use / when the delimiter is empty.\nThis reduces backend requests with no effect on most operations, but if\nthe delimiter is something other than / and empty, rclone will do a full\nrecursive search of the backend, which can take some time.\n\nVersioning is not currently supported.\n\nMetadata will only be saved in memory other than the rclone mtime\nmetadata which will be set as the modification time of the file.\n\nSupported operations\n\nserve s3 currently supports the following operations.\n\n-   Bucket\n    -   ListBuckets\n    -   CreateBucket\n    -   DeleteBucket\n-   Object\n    -   HeadObject\n    -   ListObjects\n    -   GetObject\n    -   PutObject\n    -   DeleteObject\n    -   DeleteObjects\n    -   CreateMultipartUpload\n    -   CompleteMultipartUpload\n    -   AbortMultipartUpload\n    -   CopyObject\n    -   UploadPart\n\nOther operations will return error Unimplemented.\n\nAuthentication\n\nBy default this will serve files without needing a login.\n\nYou can either use an htpasswd file which can take lots of users, or set\na single username and password with the --user and --pass flags.\n\nIf no static users are configured by either of the above methods, and\nclient certificates are required by the --client-ca flag passed to the\nserver, the client certificate common name will be considered as the\nusername.\n\nUse --htpasswd /path/to/htpasswd to provide an htpasswd file. This is in\nstandard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication. Bcrypt is recommended.\n\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.\n\nUse --realm to set the authentication realm.\n\nUse --salt to change the password hashing salt from the default.\n\nServer options\n\nUse --addr to specify which IP address and port the server should listen\non, eg --addr 1.2.3.4:8000 or --addr :8080 to listen to all IPs. By\ndefault it only listens on localhost. You can use port :0 to let the OS\nchoose an available port.\n\nIf you set --addr to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n\nYou can use a unix socket by setting the url to unix:///path/to/socket\nor just by using an absolute path name. Note that unix sockets bypass\nthe authentication - this is expected to be done with file system\npermissions.\n\n--addr may be repeated to listen on multiple IPs/ports/sockets. Socket\nactivation, described further below, can also be used to accomplish the\nsame.\n\n--server-read-timeout and --server-write-timeout can be used to control\nthe timeouts on the server. Note that this is the total time for a\ntransfer.\n\n--max-header-bytes controls the maximum number of bytes the server will\naccept in the HTTP header.\n\n--baseurl controls the URL prefix that rclone serves from. By default\nrclone will serve from the root. If you used --baseurl \"/rclone\" then\nrclone would serve from a URL starting with \"/rclone/\". This is useful\nif you wish to proxy rclone serve. Rclone automatically inserts leading\nand trailing \"/\" on --baseurl, so --baseurl \"rclone\",\n--baseurl \"/rclone\" and --baseurl \"/rclone/\" are all treated\nidentically.\n\nTLS (SSL)\n\nBy default this will serve over http. If you want you can serve over\nhttps. You will need to supply the --cert and --key flags. If you wish\nto do client side certificate validation then you will need to supply\n--client-ca also.\n\n--cert should be a either a PEM encoded certificate or a concatenation\nof that with the CA certificate. --key should be the PEM encoded private\nkey and --client-ca should be the PEM encoded client certificate\nauthority certificate.\n\n--min-tls-version is minimum TLS version that is acceptable. Valid\nvalues are \"tls1.0\", \"tls1.1\", \"tls1.2\" and \"tls1.3\" (default \"tls1.0\").\n\nSocket activation\n\nInstead of the listening addresses specified above, rclone will listen\nto all FDs passed by the service manager, if any (and ignore any\narguments passed by --addr`).\n\nThis allows rclone to be a socket-activated service. It can be\nconfigured with .socket and .service unit files as described in\nhttps://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html\n\nSocket activation can be tested ad-hoc with the\nsystemd-socket-activatecommand\n\n       systemd-socket-activate -l 8000 -- rclone serve\n\nThis will socket-activate rclone on the first connection to port 8000\nover TCP. ## VFS - Virtual File System\n\nThis command uses the VFS layer. This adapts the cloud storage objects\nthat rclone uses into something which looks much more like a disk filing\nsystem.\n\nCloud storage objects have lots of properties which aren't like disk\nfiles - you can't extend them or write to the middle of them, so the VFS\nlayer has to deal with that. Because there is no one right way of doing\nthis there are various options explained below.\n\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n\nVFS Directory Cache\n\nUsing the --dir-cache-time flag, you can control how long a directory\nshould be considered up to date and not refreshed from the backend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n\n    --dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n    --poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges. If the backend supports polling, changes will be picked up\nwithin the polling interval.\n\nYou can send a SIGHUP signal to rclone for it to flush all directory\ncaches, regardless of how old they are. Assuming only one rclone\ninstance is running, you can reset the cache like this:\n\n    kill -SIGHUP $(pidof rclone)\n\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n\n    rclone rc vfs/forget\n\nOr individual files or directories:\n\n    rclone rc vfs/forget file=path/to/file dir=path/to/dir\n\nVFS File Buffering\n\nThe --buffer-size flag determines the amount of memory, that will be\nused to buffer data in advance.\n\nEach open file will try to keep the specified amount of data in memory\nat all times. The buffered data is bound to one open file and won't be\nshared.\n\nThis flag is a upper limit for the used memory per open file. The buffer\nwill only use memory for data that is downloaded but not not yet read.\nIf the buffer is empty, only a small amount of memory will be used.\n\nThe maximum memory used by rclone for buffering can be up to\n--buffer-size * open files.\n\nVFS File Caching\n\nThese flags control the VFS file caching options. File caching is\nnecessary to make the VFS layer appear compatible with a normal file\nsystem. It can be disabled at the cost of some compatibility.\n\nFor example you'll need to enable VFS caching if you want to read and\nwrite simultaneously to a file. See below for more details.\n\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n\n    --cache-dir string                     Directory rclone will use for caching.\n    --vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n    --vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n    --vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n    --vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n    --vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n    --vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\nIf run with -vv rclone will print the location of the file cache. The\nfiles are stored in the user cache file area which is OS dependent but\ncan be controlled with --cache-dir or setting the appropriate\nenvironment variable.\n\nThe cache has 4 different modes selected by --vfs-cache-mode. The higher\nthe cache mode the more compatible rclone becomes at the cost of using\ndisk space.\n\nNote that files are written back to the remote only when they are closed\nand if they haven't been accessed for --vfs-write-back seconds. If\nrclone is quit or dies with files that haven't been uploaded, these will\nbe uploaded next time rclone is run with the same flags.\n\nIf using --vfs-cache-max-size or --vfs-cache-min-free-size note that the\ncache may exceed these quotas for two reasons. Firstly because it is\nonly checked every --vfs-cache-poll-interval. Secondly because open\nfiles cannot be evicted from the cache. When --vfs-cache-max-size or\n--vfs-cache-min-free-size is exceeded, rclone will attempt to evict the\nleast accessed files from the cache first. rclone will start with files\nthat haven't been accessed for the longest. This cache flushing strategy\nis efficient and more relevant files are likely to remain cached.\n\nThe --vfs-cache-max-age will evict files from the cache after the set\ntime since last access has passed. The default value of 1 hour will\nstart evicting files from cache that haven't been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting. Specify the time with standard\nnotation, s, m, h, d, w .\n\nYou should not run two copies of rclone using the same VFS cache with\nthe same or overlapping remotes if using --vfs-cache-mode > off. This\ncan potentially cause data corruption if you do. You can work around\nthis by giving each rclone its own cache hierarchy with --cache-dir. You\ndon't need to worry about this if the remotes in use don't overlap.\n\n--vfs-cache-mode off\n\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n\nThis will mean some operations are not possible\n\n-   Files can't be opened for both read AND write\n-   Files opened for write can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files open for read with O_TRUNC will be opened write only\n-   Files open for write only will behave as if O_TRUNC was supplied\n-   Open modes O_APPEND, O_TRUNC are ignored\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode minimal\n\nThis is very similar to \"off\" except that files opened for read AND\nwrite will be buffered to disk. This means that files opened for write\nwill be a lot more compatible, but uses the minimal disk space.\n\nThese operations are not possible\n\n-   Files opened for write only can't be seeked\n-   Existing files opened for write must have O_TRUNC set\n-   Files opened for write only will ignore O_APPEND, O_TRUNC\n-   If an upload fails it can't be retried\n\n--vfs-cache-mode writes\n\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n\nThis mode should support all normal file system operations.\n\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n\n--vfs-cache-mode full\n\nIn this mode all reads and writes are buffered to and from disk. When\ndata is read from the remote this is buffered to disk as well.\n\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file. These files will appear to be\ntheir full size in the cache, but they will be sparse files with only\nthe data that has been downloaded present in them.\n\nThis mode should support all normal file system operations and is\notherwise identical to --vfs-cache-mode writes.\n\nWhen reading a file rclone will read --buffer-size plus --vfs-read-ahead\nbytes ahead. The --buffer-size is buffered in memory whereas the\n--vfs-read-ahead is buffered on disk.\n\nWhen using this mode it is recommended that --buffer-size is not set too\nlarge and --vfs-read-ahead is set large if required.\n\nIMPORTANT not all file systems support sparse files. In particular\nFAT/exFAT do not. Rclone will perform very badly if the cache directory\nis on a filesystem which doesn't support sparse files and it will log an\nERROR message if one is detected.\n\nFingerprinting\n\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file. Fingerprints are made from:\n\n-   size\n-   modification time\n-   hash\n\nwhere available on an object.\n\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n\nFor example hash is slow with the local and sftp backends as they have\nto read the entire file and hash it, and modtime is slow with the s3,\nswift, ftp and qinqstor backends because they need to do an extra API\ncall to fetch it.\n\nIf you use the --vfs-fast-fingerprint flag then rclone will not include\nthe slow operations in the fingerprint. This makes the fingerprinting\nless accurate but much faster and will improve the opening time of\ncached files.\n\nIf you are running a vfs cache over local, s3 or swift backends then\nusing this flag is recommended.\n\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n\nVFS Chunked Reading\n\nWhen rclone reads files from a remote it reads them in chunks. This\nmeans that rather than requesting the whole file rclone reads the chunk\nspecified. This can reduce the used download quota for some remotes by\nrequesting only chunks from the remote that are actually read, at the\ncost of an increased number of requests.\n\nThese flags control the chunking:\n\n    --vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n    --vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n    --vfs-read-chunk-streams int            The number of parallel streams to read at once\n\nThe chunking behaves differently depending on the\n--vfs-read-chunk-streams parameter.\n\n--vfs-read-chunk-streams == 0\n\nRclone will start reading a chunk of size --vfs-read-chunk-size, and\nthen double the size for each read. When --vfs-read-chunk-size-limit is\nspecified, and greater than --vfs-read-chunk-size, the chunk size for\neach open file will get doubled only until the specified value is\nreached. If the value is \"off\", which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n\nWith --vfs-read-chunk-size 100M and --vfs-read-chunk-size-limit 0 the\nfollowing parts will be downloaded: 0-100M, 100M-200M, 200M-300M,\n300M-400M and so on. When --vfs-read-chunk-size-limit 500M is specified,\nthe result would be 0-100M, 100M-300M, 300M-700M, 700M-1200M,\n1200M-1700M and so on.\n\nSetting --vfs-read-chunk-size to 0 or \"off\" disables chunked reading.\n\nThe chunks will not be buffered in memory.\n\n--vfs-read-chunk-streams > 0\n\nRclone reads --vfs-read-chunk-streams chunks of size\n--vfs-read-chunk-size concurrently. The size for each read will stay\nconstant.\n\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n\nSome experimentation will be needed to find the optimum values of\n--vfs-read-chunk-size and --vfs-read-chunk-streams as these will depend\non the backend in use and the latency to the backend.\n\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be --vfs-read-chunk-streams 16 and --vfs-read-chunk-size 4M.\nIn testing with AWS S3 the performance scaled roughly as the\n--vfs-read-chunk-streams setting.\n\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more --vfs-read-chunk-streams in order to get\nthe throughput.\n\nVFS Performance\n\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons. See also the chunked reading feature.\n\nIn particular S3 and Swift benefit hugely from the --no-modtime flag (or\nuse --use-server-modtime for a slightly different effect) as each read\nof the modification time takes a transaction.\n\n    --no-checksum     Don't compare checksums on up/download.\n    --no-modtime      Don't read/write the modification time (can speed things up).\n    --no-seek         Don't allow seeking in files.\n    --read-only       Only allow read-only access.\n\nSometimes rclone is delivered reads or writes out of order. Rather than\nseeking rclone will wait a short time for the in sequence read or write\nto come in. These flags only come into effect when not using an on disk\ncache file.\n\n    --vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n    --vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\nWhen using VFS write caching (--vfs-cache-mode with value writes or\nfull), the global flag --transfers can be set to adjust the number of\nparallel uploads of modified files from the cache (the related global\nflag --checkers has no effect on the VFS).\n\n    --transfers int  Number of file transfers to run in parallel (default 4)\n\nVFS Case Sensitivity\n\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery. It is not allowed for two files in the same directory to differ\nonly by case.\n\nUsually file systems on macOS are case-insensitive. It is possible to\nmake macOS file systems case-sensitive but that is not the default.\n\nThe --vfs-case-insensitive VFS flag controls how rclone handles these\ntwo cases. If its value is \"false\", rclone passes file names to the\nremote as-is. If the flag is \"true\" (or appears without a value on the\ncommand line), rclone may perform a \"fixup\" as explained below.\n\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote. If an argument refers to an\nexisting file with exactly the same name, then the case of the existing\nfile on the disk will be used. However, if a file name with exactly the\nsame name is not found but a name differing only by case exists, rclone\nwill transparently fixup the name. This fixup happens only when an\nexisting file is requested. Case sensitivity of file names created anew\nby rclone is controlled by the underlying remote.\n\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source). The flag controls whether \"fixup\" is performed to\nsatisfy the target.\n\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \"true\" on Windows and\nmacOS, \"false\" otherwise. If the flag is provided without a value, then\nit is \"true\".\n\nThe --no-unicode-normalization flag controls whether a similar \"fixup\"\nis performed for filenames that differ but are canonically equivalent\nwith respect to unicode. Unicode normalization can be particularly\nhelpful for users of macOS, which prefers form NFD instead of the NFC\nused by most other platforms. It is therefore highly recommended to keep\nthe default of false on macOS, to avoid encoding compatibility issues.\n\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n--vfs-block-norm-dupes flag allows hiding these duplicates. This comes\nwith a performance tradeoff, as rclone will have to scan the entire\ndirectory for duplicates when listing a directory. For this reason, it\nis recommended to leave this disabled if not needed. However, macOS\nusers may wish to consider using it, as otherwise, if a remote directory\ncontains both NFC and NFD versions of the same filename, an odd\nsituation will occur: both versions of the file will be visible in the\nmount, and both will appear to be editable, however, editing either\nversion will actually result in only the NFD version getting edited\nunder the hood. --vfs-block- norm-dupes prevents this confusion by\ndetecting this scenario, hiding the duplicates, and logging an error,\nsimilar to how this is handled in rclone sync.\n\nVFS Disk Options\n\nThis flag allows you to manually set the statistics about the filing\nsystem. It can be useful when those statistics cannot be read correctly\nautomatically.\n\n    --vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\nAlternate report of used bytes\n\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running df on the\nfilesystem, then pass the flag --vfs-used-is-size to rclone. With this\nflag set, instead of relying on the backend to report this information,\nrclone will scan the whole remote similar to rclone size and compute the\ntotal used space itself.\n\nWARNING. Contrary to rclone size, this flag ignores filters so that the\nresult is accurate. However, this is very inefficient and may cost lots\nof API calls resulting in extra charges. Use it as a last resort and\nonly with caching.\n\n    rclone serve s3 remote:path [flags]\n\nOptions\n\n          --addr stringArray                       IPaddress:Port, :Port or [unix://]/path/to/socket to bind server to (default [127.0.0.1:8080])\n          --allow-origin string                    Origin which cross-domain request (CORS) can be executed from\n          --auth-key stringArray                   Set key pair for v4 authorization: access_key_id,secret_access_key\n          --auth-proxy string                      A program to use to create the backend from the auth\n          --baseurl string                         Prefix for URLs - leave blank for root\n          --cert string                            TLS PEM key (concatenation of certificate and CA certificate)\n          --client-ca string                       Client certificate authority to verify clients with\n          --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n          --dir-perms FileMode                     Directory permissions (default 777)\n          --etag-hash string                       Which hash to use for the ETag, or auto or blank for off (default \"MD5\")\n          --file-perms FileMode                    File permissions (default 666)\n          --force-path-style                       If true use path style access if false use virtual hosted style (default true) (default true)\n          --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n      -h, --help                                   help for s3\n          --htpasswd string                        A htpasswd file - if not provided no authentication is done\n          --key string                             TLS PEM Private key\n          --max-header-bytes int                   Maximum size of request header (default 4096)\n          --min-tls-version string                 Minimum TLS version that is acceptable (default \"tls1.0\")\n          --no-checksum                            Don't compare checksums on up/download\n          --no-cleanup                             Not to cleanup empty folder after object is deleted\n          --no-modtime                             Don't read/write the modification time (can speed things up)\n          --no-seek                                Don't allow seeking in files\n          --pass string                            Password for authentication\n          --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (defaul"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 11.1904296875,
          "content": "SHELL = bash\n# Branch we are working on\nBRANCH := $(or $(BUILD_SOURCEBRANCHNAME),$(lastword $(subst /, ,$(GITHUB_REF))),$(shell git rev-parse --abbrev-ref HEAD))\n# Tag of the current commit, if any.  If this is not \"\" then we are building a release\nRELEASE_TAG := $(shell git tag -l --points-at HEAD)\n# Version of last release (may not be on this branch)\nVERSION := $(shell cat VERSION)\n# Last tag on this branch\nLAST_TAG := $(shell git describe --tags --abbrev=0)\n# Next version\nNEXT_VERSION := $(shell echo $(VERSION) | awk -F. -v OFS=. '{print $$1,$$2+1,0}')\nNEXT_PATCH_VERSION := $(shell echo $(VERSION) | awk -F. -v OFS=. '{print $$1,$$2,$$3+1}')\n# If we are working on a release, override branch to master\nifdef RELEASE_TAG\n\tBRANCH := master\n\tLAST_TAG := $(shell git describe --abbrev=0 --tags $(VERSION)^)\nendif\nTAG_BRANCH := .$(BRANCH)\nBRANCH_PATH := branch/$(BRANCH)/\n# If building HEAD or master then unset TAG_BRANCH and BRANCH_PATH\nifeq ($(subst HEAD,,$(subst master,,$(BRANCH))),)\n\tTAG_BRANCH :=\n\tBRANCH_PATH :=\nendif\n# Make version suffix -beta.NNNN.CCCCCCCC (N=Commit number, C=Commit)\nVERSION_SUFFIX := -beta.$(shell git rev-list --count HEAD).$(shell git show --no-patch --no-notes --pretty='%h' HEAD)\n# TAG is current version + commit number + commit + branch\nTAG := $(VERSION)$(VERSION_SUFFIX)$(TAG_BRANCH)\nifdef RELEASE_TAG\n\tTAG := $(RELEASE_TAG)\nendif\nGO_VERSION := $(shell go version)\nGO_OS := $(shell go env GOOS)\nifdef BETA_SUBDIR\n\tBETA_SUBDIR := /$(BETA_SUBDIR)\nendif\nBETA_PATH := $(BRANCH_PATH)$(TAG)$(BETA_SUBDIR)\nBETA_URL := https://beta.rclone.org/$(BETA_PATH)/\nBETA_UPLOAD_ROOT := beta.rclone.org:\nBETA_UPLOAD := $(BETA_UPLOAD_ROOT)/$(BETA_PATH)\n# Pass in GOTAGS=xyz on the make command line to set build tags\nifdef GOTAGS\nBUILDTAGS=-tags \"$(GOTAGS)\"\nLINTTAGS=--build-tags \"$(GOTAGS)\"\nendif\nLDFLAGS=--ldflags \"-s -X github.com/rclone/rclone/fs.Version=$(TAG)\"\n\n.PHONY: rclone test_all vars version\n\nrclone:\nifeq ($(GO_OS),windows)\n\tgo run bin/resource_windows.go -version $(TAG) -syso resource_windows_`go env GOARCH`.syso\nendif\n\tgo build -v $(LDFLAGS) $(BUILDTAGS) $(BUILD_ARGS)\nifeq ($(GO_OS),windows)\n\trm resource_windows_`go env GOARCH`.syso\nendif\n\tmkdir -p `go env GOPATH`/bin/\n\tcp -av rclone`go env GOEXE` `go env GOPATH`/bin/rclone`go env GOEXE`.new\n\tmv -v `go env GOPATH`/bin/rclone`go env GOEXE`.new `go env GOPATH`/bin/rclone`go env GOEXE`\n\ntest_all:\n\tgo install $(LDFLAGS) $(BUILDTAGS) $(BUILD_ARGS) github.com/rclone/rclone/fstest/test_all\n\nvars:\n\t@echo SHELL=\"'$(SHELL)'\"\n\t@echo BRANCH=\"'$(BRANCH)'\"\n\t@echo TAG=\"'$(TAG)'\"\n\t@echo VERSION=\"'$(VERSION)'\"\n\t@echo GO_VERSION=\"'$(GO_VERSION)'\"\n\t@echo BETA_URL=\"'$(BETA_URL)'\"\n\nbtest:\n\t@echo \"[$(TAG)]($(BETA_URL)) on branch [$(BRANCH)](https://github.com/rclone/rclone/tree/$(BRANCH)) (uploaded in 15-30 mins)\" | xclip -r -sel clip\n\t@echo \"Copied markdown of beta release to clip board\"\n\nbtesth:\n\t@echo \"<a href=\"$(BETA_URL)\">$(TAG)</a> on branch <a href=\"https://github.com/rclone/rclone/tree/$(BRANCH)\">$(BRANCH)</a> (uploaded in 15-30 mins)\" | xclip -r -sel clip -t text/html\n\t@echo \"Copied beta release in HTML to clip board\"\n\nversion:\n\t@echo '$(TAG)'\n\n# Full suite of integration tests\ntest:\trclone test_all\n\t-test_all 2>&1 | tee test_all.log\n\t@echo \"Written logs in test_all.log\"\n\n# Quick test\nquicktest:\n\tRCLONE_CONFIG=\"/notfound\" go test $(LDFLAGS) $(BUILDTAGS) ./...\n\nracequicktest:\n\tRCLONE_CONFIG=\"/notfound\" go test $(LDFLAGS) $(BUILDTAGS) -cpu=2 -race ./...\n\ncompiletest:\n\tRCLONE_CONFIG=\"/notfound\" go test $(LDFLAGS) $(BUILDTAGS) -run XXX ./...\n\n# Do source code quality checks\ncheck:\trclone\n\t@echo \"-- START CODE QUALITY REPORT -------------------------------\"\n\t@golangci-lint run $(LINTTAGS) ./...\n\t@echo \"-- END CODE QUALITY REPORT ---------------------------------\"\n\n# Get the build dependencies\nbuild_dep:\n\tgo run bin/get-github-release.go -use-api -extract golangci-lint golangci/golangci-lint 'golangci-lint-.*\\.tar\\.gz'\n\n# Get the release dependencies we only install on linux\nrelease_dep_linux:\n\tgo install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest\n\n# Update dependencies\nshowupdates:\n\t@echo \"*** Direct dependencies that could be updated ***\"\n\t@GO111MODULE=on go list -u -f '{{if (and (not (or .Main .Indirect)) .Update)}}{{.Path}}: {{.Version}} -> {{.Update.Version}}{{end}}' -m all 2> /dev/null\n\n# Update direct dependencies only\nupdatedirect:\n\tGO111MODULE=on go get -d $$(go list -m -f '{{if not (or .Main .Indirect)}}{{.Path}}{{end}}' all)\n\tGO111MODULE=on go mod tidy\n\n# Update direct and indirect dependencies and test dependencies\nupdate:\n\tGO111MODULE=on go get -d -u -t ./...\n\tGO111MODULE=on go mod tidy\n\n# Tidy the module dependencies\ntidy:\n\tGO111MODULE=on go mod tidy\n\ndoc:\trclone.1 MANUAL.html MANUAL.txt rcdocs commanddocs\n\nrclone.1:\tMANUAL.md\n\tpandoc -s --from markdown-smart --to man MANUAL.md -o rclone.1\n\nMANUAL.md:\tbin/make_manual.py docs/content/*.md commanddocs backenddocs rcdocs\n\t./bin/make_manual.py\n\nMANUAL.html:\tMANUAL.md\n\tpandoc -s --from markdown-smart --to html MANUAL.md -o MANUAL.html\n\nMANUAL.txt:\tMANUAL.md\n\tpandoc -s --from markdown-smart --to plain MANUAL.md -o MANUAL.txt\n\ncommanddocs: rclone\n\t-@rmdir -p '$$HOME/.config/rclone'\n\tXDG_CACHE_HOME=\"\" XDG_CONFIG_HOME=\"\" HOME=\"\\$$HOME\" USER=\"\\$$USER\" rclone gendocs --config=/notfound docs/content/\n\t@[ ! -e '$$HOME' ] || (echo 'Error: created unwanted directory named $$HOME' && exit 1)\n\nbackenddocs: rclone bin/make_backend_docs.py\n\t-@rmdir -p '$$HOME/.config/rclone'\n\tXDG_CACHE_HOME=\"\" XDG_CONFIG_HOME=\"\" HOME=\"\\$$HOME\" USER=\"\\$$USER\" ./bin/make_backend_docs.py\n\t@[ ! -e '$$HOME' ] || (echo 'Error: created unwanted directory named $$HOME' && exit 1)\n\nrcdocs: rclone\n\tbin/make_rc_docs.sh\n\ninstall: rclone\n\tinstall -d ${DESTDIR}/usr/bin\n\tinstall ${GOPATH}/bin/rclone ${DESTDIR}/usr/bin\n\nclean:\n\tgo clean ./...\n\tfind . -name \\*~ | xargs -r rm -f\n\trm -rf build docs/public\n\trm -f rclone fs/operations/operations.test fs/sync/sync.test fs/test_all.log test.log\n\nwebsite:\n\trm -rf docs/public\n\tcd docs && hugo\n\t@if grep -R \"raw HTML omitted\" docs/public ; then echo \"ERROR: found unescaped HTML - fix the markdown source\" ; fi\n\nupload_website:\twebsite\n\trclone -v sync docs/public www.rclone.org:\n\nupload_test_website:\twebsite\n\trclone -P sync docs/public test-rclone-org:\n\nvalidate_website: website\n\tfind docs/public -type f -name \"*.html\" | xargs tidy --mute-id yes -errors --gnu-emacs yes --drop-empty-elements no --warn-proprietary-attributes no --mute MISMATCHED_ATTRIBUTE_WARN\n\ntarball:\n\tgit archive -9 --format=tar.gz --prefix=rclone-$(TAG)/ -o build/rclone-$(TAG).tar.gz $(TAG)\n\nvendorball:\n\tgo mod vendor\n\ttar -zcf build/rclone-$(TAG)-vendor.tar.gz vendor\n\trm -rf vendor\n\nsign_upload:\n\tcd build && md5sum rclone-v* | gpg --clearsign > MD5SUMS\n\tcd build && sha1sum rclone-v* | gpg --clearsign > SHA1SUMS\n\tcd build && sha256sum rclone-v* | gpg --clearsign > SHA256SUMS\n\ncheck_sign:\n\tcd build && gpg --verify MD5SUMS && gpg --decrypt MD5SUMS | md5sum -c\n\tcd build && gpg --verify SHA1SUMS && gpg --decrypt SHA1SUMS | sha1sum -c\n\tcd build && gpg --verify SHA256SUMS && gpg --decrypt SHA256SUMS | sha256sum -c\n\nupload:\n\trclone -P copy build/ downloads.rclone.org:/$(TAG)\n\trclone lsf build --files-only --include '*.{zip,deb,rpm}' --include version.txt | xargs -i bash -c 'i={}; j=\"$$i\"; [[ $$i =~ (.*)(-v[0-9\\.]+-)(.*) ]] && j=$${BASH_REMATCH[1]}-current-$${BASH_REMATCH[3]}; rclone copyto -v \"downloads.rclone.org:/$(TAG)/$$i\" \"downloads.rclone.org:/$$j\"'\n\nupload_github:\n\t./bin/upload-github $(TAG)\n\ncross:\tdoc\n\tgo run bin/cross-compile.go -release current $(BUILD_FLAGS) $(BUILDTAGS) $(BUILD_ARGS) $(TAG)\n\nbeta:\n\tgo run bin/cross-compile.go $(BUILD_FLAGS) $(BUILDTAGS) $(BUILD_ARGS) $(TAG)\n\trclone -v copy build/ pub.rclone.org:/$(TAG)\n\t@echo Beta release ready at https://pub.rclone.org/$(TAG)/\n\nlog_since_last_release:\n\tgit log $(LAST_TAG)..\n\ncompile_all:\n\tgo run bin/cross-compile.go -compile-only $(BUILD_FLAGS) $(BUILDTAGS) $(BUILD_ARGS) $(TAG)\n\nci_upload:\n\tsudo chown -R $$USER build\n\tfind build -type l -delete\n\tgzip -r9v build\n\t./rclone --no-check-dest --config bin/ci.rclone.conf -v copy build/ $(BETA_UPLOAD)/testbuilds\nifeq ($(or $(BRANCH_PATH),$(RELEASE_TAG)),)\n\t./rclone --no-check-dest --config bin/ci.rclone.conf -v copy build/ $(BETA_UPLOAD_ROOT)/test/testbuilds-latest\nendif\n\t@echo Beta release ready at $(BETA_URL)/testbuilds\n\nci_beta:\n\tgit log $(LAST_TAG).. > /tmp/git-log.txt\n\tgo run bin/cross-compile.go -release beta-latest -git-log /tmp/git-log.txt $(BUILD_FLAGS) $(BUILDTAGS) $(BUILD_ARGS) $(TAG)\n\trclone --no-check-dest --config bin/ci.rclone.conf -v copy --exclude '*beta-latest*' build/ $(BETA_UPLOAD)\nifeq ($(or $(BRANCH_PATH),$(RELEASE_TAG)),)\n\trclone --no-check-dest --config bin/ci.rclone.conf -v copy --include '*beta-latest*' --include version.txt build/ $(BETA_UPLOAD_ROOT)$(BETA_SUBDIR)\nendif\n\t@echo Beta release ready at $(BETA_URL)\n\n# Fetch the binary builds from GitHub actions\nfetch_binaries:\n\trclone -P sync --exclude \"/testbuilds/**\" --delete-excluded $(BETA_UPLOAD) build/\n\nserve:\twebsite\n\tcd docs && hugo server --logLevel info -w --disableFastRender\n\ntag:\tretag doc\n\tbin/make_changelog.py $(LAST_TAG) $(VERSION) > docs/content/changelog.md.new\n\tmv docs/content/changelog.md.new docs/content/changelog.md\n\t@echo \"Edit the new changelog in docs/content/changelog.md\"\n\t@echo \"Then commit all the changes\"\n\t@echo git commit -m \\\"Version $(VERSION)\\\" -a -v\n\t@echo \"And finally run make retag before make cross, etc.\"\n\nretag:\n\t@echo \"Version is $(VERSION)\"\n\tgit tag -f -s -m \"Version $(VERSION)\" $(VERSION)\n\nstartdev:\n\t@echo \"Version is $(VERSION)\"\n\t@echo \"Next version is $(NEXT_VERSION)\"\n\techo -e \"package fs\\n\\n// VersionTag of rclone\\nvar VersionTag = \\\"$(NEXT_VERSION)\\\"\\n\" | gofmt > fs/versiontag.go\n\techo -n \"$(NEXT_VERSION)\" > docs/layouts/partials/version.html\n\techo \"$(NEXT_VERSION)\" > VERSION\n\tgit commit -m \"Start $(NEXT_VERSION)-DEV development\" fs/versiontag.go VERSION docs/layouts/partials/version.html\n\nstartstable:\n\t@echo \"Version is $(VERSION)\"\n\t@echo \"Next stable version is $(NEXT_PATCH_VERSION)\"\n\techo -e \"package fs\\n\\n// VersionTag of rclone\\nvar VersionTag = \\\"$(NEXT_PATCH_VERSION)\\\"\\n\" | gofmt > fs/versiontag.go\n\techo -n \"$(NEXT_PATCH_VERSION)\" > docs/layouts/partials/version.html\n\techo \"$(NEXT_PATCH_VERSION)\" > VERSION\n\tgit commit -m \"Start $(NEXT_PATCH_VERSION)-DEV development\" fs/versiontag.go VERSION docs/layouts/partials/version.html\n\nwinzip:\n\tzip -9 rclone-$(TAG).zip rclone.exe\n\n# docker volume plugin\nPLUGIN_USER ?= rclone\nPLUGIN_TAG ?= latest\nPLUGIN_BASE_TAG ?= latest\nPLUGIN_ARCH ?= amd64\nPLUGIN_IMAGE := $(PLUGIN_USER)/docker-volume-rclone:$(PLUGIN_TAG)\nPLUGIN_BASE := $(PLUGIN_USER)/rclone:$(PLUGIN_BASE_TAG)\nPLUGIN_BUILD_DIR := ./build/docker-plugin\nPLUGIN_CONTRIB_DIR := ./contrib/docker-plugin/managed\n\ndocker-plugin-create:\n\tdocker buildx inspect |grep -q /${PLUGIN_ARCH} || \\\n\tdocker run --rm --privileged tonistiigi/binfmt --install all\n\trm -rf ${PLUGIN_BUILD_DIR}\n\tdocker buildx build \\\n\t\t--no-cache --pull \\\n\t\t--build-arg BASE_IMAGE=${PLUGIN_BASE} \\\n\t\t--platform linux/${PLUGIN_ARCH} \\\n\t\t--output ${PLUGIN_BUILD_DIR}/rootfs \\\n\t\t${PLUGIN_CONTRIB_DIR}\n\tcp ${PLUGIN_CONTRIB_DIR}/config.json ${PLUGIN_BUILD_DIR}\n\tdocker plugin rm --force ${PLUGIN_IMAGE} 2>/dev/null || true\n\tdocker plugin create ${PLUGIN_IMAGE} ${PLUGIN_BUILD_DIR}\n\ndocker-plugin-push:\n\tdocker plugin push ${PLUGIN_IMAGE}\n\tdocker plugin rm ${PLUGIN_IMAGE}\n\ndocker-plugin: docker-plugin-create docker-plugin-push\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.0478515625,
          "content": "<div align=\"center\">\n<sup>Special thanks to our sponsor:</sup>\n<br>\n<br>\n<a href=\"https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=rclone_20231103\">\n  <div>\n    <img src=\"https://rclone.org/img/logos/warp-github.svg\" width=\"300\" alt=\"Warp\">\n  </div>\n  <b>Warp is a modern, Rust-based terminal with AI built in so you and your team can build great software, faster.</b>\n  <div>\n    <sup>Visit warp.dev to learn more.</sup>\n  </div>\n</a>\n<br>\n<hr>\n</div>\n<br>\n\n[<img src=\"https://rclone.org/img/logo_on_light__horizontal_color.svg\" width=\"50%\" alt=\"rclone logo\">](https://rclone.org/#gh-light-mode-only)\n[<img src=\"https://rclone.org/img/logo_on_dark__horizontal_color.svg\" width=\"50%\" alt=\"rclone logo\">](https://rclone.org/#gh-dark-mode-only)\n\n[Website](https://rclone.org) |\n[Documentation](https://rclone.org/docs/) |\n[Download](https://rclone.org/downloads/) |\n[Contributing](CONTRIBUTING.md) |\n[Changelog](https://rclone.org/changelog/) |\n[Installation](https://rclone.org/install/) |\n[Forum](https://forum.rclone.org/)\n\n[![Build Status](https://github.com/rclone/rclone/workflows/build/badge.svg)](https://github.com/rclone/rclone/actions?query=workflow%3Abuild)\n[![Go Report Card](https://goreportcard.com/badge/github.com/rclone/rclone)](https://goreportcard.com/report/github.com/rclone/rclone)\n[![GoDoc](https://godoc.org/github.com/rclone/rclone?status.svg)](https://godoc.org/github.com/rclone/rclone)\n[![Docker Pulls](https://img.shields.io/docker/pulls/rclone/rclone)](https://hub.docker.com/r/rclone/rclone)\n\n# Rclone\n\nRclone *(\"rsync for cloud storage\")* is a command-line program to sync files and directories to and from different cloud storage providers.\n\n## Storage providers\n\n  * 1Fichier [:page_facing_up:](https://rclone.org/fichier/)\n  * Akamai Netstorage [:page_facing_up:](https://rclone.org/netstorage/)\n  * Alibaba Cloud (Aliyun) Object Storage System (OSS) [:page_facing_up:](https://rclone.org/s3/#alibaba-oss)\n  * Amazon S3 [:page_facing_up:](https://rclone.org/s3/)\n  * ArvanCloud Object Storage (AOS) [:page_facing_up:](https://rclone.org/s3/#arvan-cloud-object-storage-aos)\n  * Backblaze B2 [:page_facing_up:](https://rclone.org/b2/)\n  * Box [:page_facing_up:](https://rclone.org/box/)\n  * Ceph [:page_facing_up:](https://rclone.org/s3/#ceph)\n  * China Mobile Ecloud Elastic Object Storage (EOS) [:page_facing_up:](https://rclone.org/s3/#china-mobile-ecloud-eos)\n  * Cloudflare R2 [:page_facing_up:](https://rclone.org/s3/#cloudflare-r2)\n  * Citrix ShareFile [:page_facing_up:](https://rclone.org/sharefile/)\n  * DigitalOcean Spaces [:page_facing_up:](https://rclone.org/s3/#digitalocean-spaces)\n  * Digi Storage [:page_facing_up:](https://rclone.org/koofr/#digi-storage)\n  * Dreamhost [:page_facing_up:](https://rclone.org/s3/#dreamhost)\n  * Dropbox [:page_facing_up:](https://rclone.org/dropbox/)\n  * Enterprise File Fabric [:page_facing_up:](https://rclone.org/filefabric/)\n  * Fastmail Files [:page_facing_up:](https://rclone.org/webdav/#fastmail-files)\n  * Files.com [:page_facing_up:](https://rclone.org/filescom/)\n  * FTP [:page_facing_up:](https://rclone.org/ftp/)\n  * GoFile [:page_facing_up:](https://rclone.org/gofile/)\n  * Google Cloud Storage [:page_facing_up:](https://rclone.org/googlecloudstorage/)\n  * Google Drive [:page_facing_up:](https://rclone.org/drive/)\n  * Google Photos [:page_facing_up:](https://rclone.org/googlephotos/)\n  * HDFS (Hadoop Distributed Filesystem) [:page_facing_up:](https://rclone.org/hdfs/)\n  * Hetzner Storage Box [:page_facing_up:](https://rclone.org/sftp/#hetzner-storage-box)\n  * HiDrive [:page_facing_up:](https://rclone.org/hidrive/)\n  * HTTP [:page_facing_up:](https://rclone.org/http/)\n  * Huawei Cloud Object Storage Service(OBS) [:page_facing_up:](https://rclone.org/s3/#huawei-obs)\n  * iCloud Drive [:page_facing_up:](https://rclone.org/iclouddrive/)\n  * ImageKit [:page_facing_up:](https://rclone.org/imagekit/)\n  * Internet Archive [:page_facing_up:](https://rclone.org/internetarchive/)\n  * Jottacloud [:page_facing_up:](https://rclone.org/jottacloud/)\n  * IBM COS S3 [:page_facing_up:](https://rclone.org/s3/#ibm-cos-s3)\n  * IONOS Cloud [:page_facing_up:](https://rclone.org/s3/#ionos)\n  * Koofr [:page_facing_up:](https://rclone.org/koofr/)\n  * Leviia Object Storage [:page_facing_up:](https://rclone.org/s3/#leviia)\n  * Liara Object Storage [:page_facing_up:](https://rclone.org/s3/#liara-object-storage)\n  * Linkbox [:page_facing_up:](https://rclone.org/linkbox)\n  * Linode Object Storage [:page_facing_up:](https://rclone.org/s3/#linode)\n  * Magalu Object Storage [:page_facing_up:](https://rclone.org/s3/#magalu)\n  * Mail.ru Cloud [:page_facing_up:](https://rclone.org/mailru/)\n  * Memset Memstore [:page_facing_up:](https://rclone.org/swift/)\n  * Mega [:page_facing_up:](https://rclone.org/mega/)\n  * Memory [:page_facing_up:](https://rclone.org/memory/)\n  * Microsoft Azure Blob Storage [:page_facing_up:](https://rclone.org/azureblob/)\n  * Microsoft Azure Files Storage [:page_facing_up:](https://rclone.org/azurefiles/)\n  * Microsoft OneDrive [:page_facing_up:](https://rclone.org/onedrive/)\n  * Minio [:page_facing_up:](https://rclone.org/s3/#minio)\n  * Nextcloud [:page_facing_up:](https://rclone.org/webdav/#nextcloud)\n  * OVH [:page_facing_up:](https://rclone.org/swift/)\n  * Blomp Cloud Storage [:page_facing_up:](https://rclone.org/swift/)\n  * OpenDrive [:page_facing_up:](https://rclone.org/opendrive/)\n  * OpenStack Swift [:page_facing_up:](https://rclone.org/swift/)\n  * Oracle Cloud Storage [:page_facing_up:](https://rclone.org/swift/)\n  * Oracle Object Storage [:page_facing_up:](https://rclone.org/oracleobjectstorage/)\n  * Outscale [:page_facing_up:](https://rclone.org/s3/#outscale)\n  * ownCloud [:page_facing_up:](https://rclone.org/webdav/#owncloud)\n  * pCloud [:page_facing_up:](https://rclone.org/pcloud/)\n  * Petabox [:page_facing_up:](https://rclone.org/s3/#petabox)\n  * PikPak [:page_facing_up:](https://rclone.org/pikpak/)\n  * Pixeldrain [:page_facing_up:](https://rclone.org/pixeldrain/)\n  * premiumize.me [:page_facing_up:](https://rclone.org/premiumizeme/)\n  * put.io [:page_facing_up:](https://rclone.org/putio/)\n  * Proton Drive [:page_facing_up:](https://rclone.org/protondrive/)\n  * QingStor [:page_facing_up:](https://rclone.org/qingstor/)\n  * Qiniu Cloud Object Storage (Kodo) [:page_facing_up:](https://rclone.org/s3/#qiniu)\n  * Quatrix [:page_facing_up:](https://rclone.org/quatrix/)\n  * Rackspace Cloud Files [:page_facing_up:](https://rclone.org/swift/)\n  * RackCorp Object Storage [:page_facing_up:](https://rclone.org/s3/#RackCorp)\n  * rsync.net [:page_facing_up:](https://rclone.org/sftp/#rsync-net)\n  * Scaleway [:page_facing_up:](https://rclone.org/s3/#scaleway)\n  * Seafile [:page_facing_up:](https://rclone.org/seafile/)\n  * SeaweedFS [:page_facing_up:](https://rclone.org/s3/#seaweedfs)\n  * Selectel Object Storage [:page_facing_up:](https://rclone.org/s3/#selectel)\n  * SFTP [:page_facing_up:](https://rclone.org/sftp/)\n  * SMB / CIFS [:page_facing_up:](https://rclone.org/smb/)\n  * StackPath [:page_facing_up:](https://rclone.org/s3/#stackpath)\n  * Storj [:page_facing_up:](https://rclone.org/storj/)\n  * SugarSync [:page_facing_up:](https://rclone.org/sugarsync/)\n  * Synology C2 Object Storage [:page_facing_up:](https://rclone.org/s3/#synology-c2)\n  * Tencent Cloud Object Storage (COS) [:page_facing_up:](https://rclone.org/s3/#tencent-cos)\n  * Uloz.to [:page_facing_up:](https://rclone.org/ulozto/)\n  * Wasabi [:page_facing_up:](https://rclone.org/s3/#wasabi)\n  * WebDAV [:page_facing_up:](https://rclone.org/webdav/)\n  * Yandex Disk [:page_facing_up:](https://rclone.org/yandex/)\n  * Zoho WorkDrive [:page_facing_up:](https://rclone.org/zoho/)\n  * The local filesystem [:page_facing_up:](https://rclone.org/local/)\n\nPlease see [the full list of all storage providers and their features](https://rclone.org/overview/)\n\n### Virtual storage providers\n\nThese backends adapt or modify other storage providers\n\n  * Alias: rename existing remotes [:page_facing_up:](https://rclone.org/alias/)\n  * Cache: cache remotes (DEPRECATED) [:page_facing_up:](https://rclone.org/cache/)\n  * Chunker: split large files [:page_facing_up:](https://rclone.org/chunker/)\n  * Combine: combine multiple remotes into a directory tree [:page_facing_up:](https://rclone.org/combine/)\n  * Compress: compress files [:page_facing_up:](https://rclone.org/compress/)\n  * Crypt: encrypt files [:page_facing_up:](https://rclone.org/crypt/)\n  * Hasher: hash files [:page_facing_up:](https://rclone.org/hasher/)\n  * Union: join multiple remotes to work together [:page_facing_up:](https://rclone.org/union/)\n\n## Features\n\n  * MD5/SHA-1 hashes checked at all times for file integrity\n  * Timestamps preserved on files\n  * Partial syncs supported on a whole file basis\n  * [Copy](https://rclone.org/commands/rclone_copy/) mode to just copy new/changed files\n  * [Sync](https://rclone.org/commands/rclone_sync/) (one way) mode to make a directory identical\n  * [Bisync](https://rclone.org/bisync/) (two way) to keep two directories in sync bidirectionally\n  * [Check](https://rclone.org/commands/rclone_check/) mode to check for file hash equality\n  * Can sync to and from network, e.g. two different cloud accounts\n  * Optional large file chunking ([Chunker](https://rclone.org/chunker/))\n  * Optional transparent compression ([Compress](https://rclone.org/compress/))\n  * Optional encryption ([Crypt](https://rclone.org/crypt/))\n  * Optional FUSE mount ([rclone mount](https://rclone.org/commands/rclone_mount/))\n  * Multi-threaded downloads to local disk\n  * Can [serve](https://rclone.org/commands/rclone_serve/) local or remote files over HTTP/WebDAV/FTP/SFTP/DLNA\n\n## Installation & documentation\n\nPlease see the [rclone website](https://rclone.org/) for:\n\n  * [Installation](https://rclone.org/install/)\n  * [Documentation & configuration](https://rclone.org/docs/)\n  * [Changelog](https://rclone.org/changelog/)\n  * [FAQ](https://rclone.org/faq/)\n  * [Storage providers](https://rclone.org/overview/)\n  * [Forum](https://forum.rclone.org/)\n  * ...and more\n\n## Downloads\n\n  * https://rclone.org/downloads/\n\nLicense\n-------\n\nThis is free software under the terms of the MIT license (check the\n[COPYING file](/COPYING) included in this package).\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 5.2001953125,
          "content": "# Release\n\nThis file describes how to make the various kinds of releases\n\n## Extra required software for making a release\n\n  * [gh the github cli](https://github.com/cli/cli) for uploading packages\n  * pandoc for making the html and man pages\n\n## Making a release\n\n  * git checkout master # see below for stable branch\n  * git pull # IMPORTANT\n  * git status - make sure everything is checked in\n  * Check GitHub actions build for master is Green\n  * make test # see integration test server or run locally\n  * make tag\n  * edit docs/content/changelog.md # make sure to remove duplicate logs from point releases\n  * make tidy\n  * make doc\n  * git status - to check for new man pages - git add them\n  * git commit -a -v -m \"Version v1.XX.0\"\n  * make retag\n  * git push origin # without --follow-tags so it doesn't push the tag if it fails\n  * git push --follow-tags origin\n  * # Wait for the GitHub builds to complete then...\n  * make fetch_binaries\n  * make tarball\n  * make vendorball\n  * make sign_upload\n  * make check_sign\n  * make upload\n  * make upload_website\n  * make upload_github\n  * make startdev # make startstable for stable branch\n  * # announce with forum post, twitter post, patreon post\n\n## Update dependencies\n\nEarly in the next release cycle update the dependencies.\n\n  * Review any pinned packages in go.mod and remove if possible\n  * `make updatedirect`\n  * `make GOTAGS=cmount`\n  * `make compiletest`\n  * Fix anything which doesn't compile at this point and commit changes here\n  * `git commit -a -v -m \"build: update all dependencies\"`\n\nIf the `make updatedirect` upgrades the version of go in the `go.mod`\nthen go to manual mode. `go1.20` here is the lowest supported version\nin the `go.mod`.\n\n```\ngo list -m -f '{{if not (or .Main .Indirect)}}{{.Path}}{{end}}' all > /tmp/potential-upgrades\ngo get -d $(cat /tmp/potential-upgrades)\ngo mod tidy -go=1.20 -compat=1.20\n```\n\nIf the `go mod tidy` fails use the output from it to remove the\npackage which can't be upgraded from `/tmp/potential-upgrades` when\ndone\n\n```\ngit co go.mod go.sum\n```\n\nAnd try again.\n\nOptionally upgrade the direct and indirect dependencies. This is very\nlikely to fail if the manual method was used abve - in that case\nignore it as it is too time consuming to fix.\n\n  * `make update`\n  * `make GOTAGS=cmount`\n  * `make compiletest`\n  * roll back any updates which didn't compile\n  * `git commit -a -v --amend`\n  * **NB** watch out for this changing the default go version in `go.mod`\n\nNote that `make update` updates all direct and indirect dependencies\nand there can occasionally be forwards compatibility problems with\ndoing that so it may be necessary to roll back dependencies to the\nversion specified by `make updatedirect` in order to get rclone to\nbuild.\n\nOnce it compiles locally, push it on a test branch and commit fixes\nuntil the tests pass.\n\n## Tidy beta\n\nAt some point after the release run\n\n    bin/tidy-beta v1.55\n\nwhere the version number is that of a couple ago to remove old beta binaries.\n\n## Making a point release\n\nIf rclone needs a point release due to some horrendous bug:\n\nSet vars\n\n  * BASE_TAG=v1.XX          # e.g. v1.52\n  * NEW_TAG=${BASE_TAG}.Y   # e.g. v1.52.1\n  * echo $BASE_TAG $NEW_TAG # v1.52 v1.52.1\n\nFirst make the release branch.  If this is a second point release then\nthis will be done already.\n\n  * git co -b ${BASE_TAG}-stable ${BASE_TAG}.0\n  * make startstable\n\nNow\n\n  * git co ${BASE_TAG}-stable\n  * git cherry-pick any fixes\n  * Do the steps as above\n  * make startstable\n  * git co master\n  * `#` cherry pick the changes to the changelog - check the diff to make sure it is correct\n  * git checkout ${BASE_TAG}-stable docs/content/changelog.md\n  * git commit -a -v -m \"Changelog updates from Version ${NEW_TAG}\"\n  * git push\n\n## Sponsor logos\n\nIf updating the website note that the sponsor logos have been moved out of the main repository.\n\nYou will need to checkout `/docs/static/img/logos` from https://github.com/rclone/third-party-logos\nwhich is a private repo containing artwork from sponsors.\n\n## Update the website between releases\n\nCreate an update website branch based off the last release\n\n    git co -b update-website\n\nIf the branch already exists, double check there are no commits that need saving.\n\nNow reset the branch to the last release\n\n    git reset --hard v1.64.0\n\nCreate the changes, check them in, test with `make serve` then\n\n    make upload_test_website\n\nCheck out https://test.rclone.org and when happy\n\n    make upload_website\n\nCherry pick any changes back to master and the stable branch if it is active.\n\n## Making a manual build of docker\n\nTo do a basic build of rclone's docker image to debug builds locally:\n\n```\ndocker buildx build --load -t rclone/rclone:testing --progress=plain .\ndocker run --rm rclone/rclone:testing version\n```\n\nTo test the multipatform build\n\n```\ndocker buildx build -t rclone/rclone:testing --progress=plain --platform linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6 .\n```\n\nTo make a full build then set the tags correctly and add `--push`\n\nNote that you can't only build one architecture - you need to build them all.\n\n```\ndocker buildx build --platform linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6 -t rclone/rclone:1.54.1 -t rclone/rclone:1.54 -t rclone/rclone:1 -t rclone/rclone:latest --push .\n```\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0078125,
          "content": "v1.69.0\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmdtest",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fstest",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 11.0234375,
          "content": "module github.com/rclone/rclone\n\ngo 1.21\n\nrequire (\n\tbazil.org/fuse v0.0.0-20230120002735-62a210ff1fd5\n\tgithub.com/Azure/azure-sdk-for-go/sdk/azcore v1.16.0\n\tgithub.com/Azure/azure-sdk-for-go/sdk/azidentity v1.8.0\n\tgithub.com/Azure/azure-sdk-for-go/sdk/storage/azblob v1.5.0\n\tgithub.com/Azure/azure-sdk-for-go/sdk/storage/azfile v1.4.0\n\tgithub.com/Azure/go-ntlmssp v0.0.0-20221128193559-754e69321358\n\tgithub.com/Files-com/files-sdk-go/v3 v3.2.97\n\tgithub.com/Max-Sum/base32768 v0.0.0-20230304063302-18e6ce5945fd\n\tgithub.com/a8m/tree v0.0.0-20240104212747-2c8764a5f17e\n\tgithub.com/aalpar/deheap v0.0.0-20210914013432-0cc84d79dec3\n\tgithub.com/abbot/go-http-auth v0.4.0\n\tgithub.com/anacrolix/dms v1.7.1\n\tgithub.com/anacrolix/log v0.16.0\n\tgithub.com/atotto/clipboard v0.1.4\n\tgithub.com/aws/aws-sdk-go-v2 v1.32.6\n\tgithub.com/aws/aws-sdk-go-v2/config v1.28.6\n\tgithub.com/aws/aws-sdk-go-v2/credentials v1.17.47\n\tgithub.com/aws/aws-sdk-go-v2/feature/s3/manager v1.17.43\n\tgithub.com/aws/aws-sdk-go-v2/service/s3 v1.71.0\n\tgithub.com/aws/smithy-go v1.22.1\n\tgithub.com/buengese/sgzip v0.1.1\n\tgithub.com/cloudinary/cloudinary-go/v2 v2.9.0\n\tgithub.com/cloudsoda/go-smb2 v0.0.0-20241223203758-52b943b88fd6\n\tgithub.com/colinmarc/hdfs/v2 v2.4.0\n\tgithub.com/coreos/go-semver v0.3.1\n\tgithub.com/coreos/go-systemd/v22 v22.5.0\n\tgithub.com/dop251/scsu v0.0.0-20220106150536-84ac88021d00\n\tgithub.com/dropbox/dropbox-sdk-go-unofficial/v6 v6.0.5\n\tgithub.com/gabriel-vasile/mimetype v1.4.7\n\tgithub.com/gdamore/tcell/v2 v2.7.4\n\tgithub.com/go-chi/chi/v5 v5.1.0\n\tgithub.com/go-darwin/apfs v0.0.0-20211011131704-f84b94dbf348\n\tgithub.com/go-git/go-billy/v5 v5.6.0\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/hanwen/go-fuse/v2 v2.7.2\n\tgithub.com/henrybear327/Proton-API-Bridge v1.0.0\n\tgithub.com/henrybear327/go-proton-api v1.0.0\n\tgithub.com/jcmturner/gokrb5/v8 v8.4.4\n\tgithub.com/jlaffaye/ftp v0.2.0\n\tgithub.com/josephspurrier/goversioninfo v1.4.1\n\tgithub.com/jzelinskie/whirlpool v0.0.0-20201016144138-0675e54bb004\n\tgithub.com/klauspost/compress v1.17.11\n\tgithub.com/koofr/go-httpclient v0.0.0-20240520111329-e20f8f203988\n\tgithub.com/koofr/go-koofrclient v0.0.0-20221207135200-cbd7fc9ad6a6\n\tgithub.com/mattn/go-colorable v0.1.13\n\tgithub.com/mattn/go-runewidth v0.0.16\n\tgithub.com/minio/minio-go/v7 v7.0.74\n\tgithub.com/mitchellh/go-homedir v1.1.0\n\tgithub.com/moby/sys/mountinfo v0.7.2\n\tgithub.com/ncw/swift/v2 v2.0.3\n\tgithub.com/oracle/oci-go-sdk/v65 v65.80.0\n\tgithub.com/patrickmn/go-cache v2.1.0+incompatible\n\tgithub.com/pkg/sftp v1.13.7\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2\n\tgithub.com/prometheus/client_golang v1.20.5\n\tgithub.com/putdotio/go-putio/putio v0.0.0-20200123120452-16d982cac2b8\n\tgithub.com/quasilyte/go-ruleguard/dsl v0.3.22\n\tgithub.com/rclone/gofakes3 v0.0.3\n\tgithub.com/rfjakob/eme v1.1.2\n\tgithub.com/rivo/uniseg v0.4.7\n\tgithub.com/rogpeppe/go-internal v1.12.0\n\tgithub.com/shirou/gopsutil/v4 v4.24.12\n\tgithub.com/sirupsen/logrus v1.9.3\n\tgithub.com/skratchdot/open-golang v0.0.0-20200116055534-eef842397966\n\tgithub.com/spf13/cobra v1.8.1\n\tgithub.com/spf13/pflag v1.0.5\n\tgithub.com/stretchr/testify v1.10.0\n\tgithub.com/t3rm1n4l/go-mega v0.0.0-20241213150454-ec0027fb0002\n\tgithub.com/unknwon/goconfig v1.0.0\n\tgithub.com/willscott/go-nfs v0.0.3-0.20240425122109-91bc38957cc9\n\tgithub.com/winfsp/cgofuse v1.5.1-0.20221118130120-84c0898ad2e0\n\tgithub.com/xanzy/ssh-agent v0.3.3\n\tgithub.com/youmark/pkcs8 v0.0.0-20240726163527-a2c0da244d78\n\tgithub.com/yunify/qingstor-sdk-go/v3 v3.2.0\n\tgithub.com/zeebo/blake3 v0.2.3\n\tgo.etcd.io/bbolt v1.3.10\n\tgoftp.io/server/v2 v2.0.1\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/net v0.33.0\n\tgolang.org/x/oauth2 v0.24.0\n\tgolang.org/x/sync v0.10.0\n\tgolang.org/x/sys v0.28.0\n\tgolang.org/x/text v0.21.0\n\tgolang.org/x/time v0.8.0\n\tgoogle.golang.org/api v0.211.0\n\tgopkg.in/validator.v2 v2.0.1\n\tgopkg.in/yaml.v2 v2.4.0\n\tstorj.io/uplink v1.13.1\n)\n\nrequire (\n\tcloud.google.com/go/auth v0.12.1 // indirect\n\tcloud.google.com/go/auth/oauth2adapt v0.2.6 // indirect\n\tcloud.google.com/go/compute/metadata v0.5.2 // indirect\n\tgithub.com/Azure/azure-sdk-for-go/sdk/internal v1.10.0 // indirect\n\tgithub.com/AzureAD/microsoft-authentication-library-for-go v1.2.2 // indirect\n\tgithub.com/ProtonMail/bcrypt v0.0.0-20211005172633-e235017c1baf // indirect\n\tgithub.com/ProtonMail/gluon v0.17.1-0.20230724134000-308be39be96e // indirect\n\tgithub.com/ProtonMail/go-mime v0.0.0-20230322103455-7d82a3887f2f // indirect\n\tgithub.com/ProtonMail/go-srp v0.0.7 // indirect\n\tgithub.com/ProtonMail/gopenpgp/v2 v2.7.4 // indirect\n\tgithub.com/PuerkitoBio/goquery v1.8.1 // indirect\n\tgithub.com/akavel/rsrc v0.10.2 // indirect\n\tgithub.com/anacrolix/generics v0.0.1 // indirect\n\tgithub.com/andybalholm/cascadia v1.3.2 // indirect\n\tgithub.com/appscode/go-querystring v0.0.0-20170504095604-0126cfb3f1dc // indirect\n\tgithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.21 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.25 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.25 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/v4a v1.3.25 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.6 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.6 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.6 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/sso v1.24.7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.6 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/sts v1.33.2 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/bradenaw/juniper v0.15.2 // indirect\n\tgithub.com/bradfitz/iter v0.0.0-20191230175014-e8f45d346db8 // indirect\n\tgithub.com/calebcase/tmpfile v1.0.3 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/chilts/sid v0.0.0-20190607042430-660e94789ec9 // indirect\n\tgithub.com/cloudflare/circl v1.3.7 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.4 // indirect\n\tgithub.com/creasty/defaults v1.7.0 // indirect\n\tgithub.com/cronokirby/saferith v0.33.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/ebitengine/purego v0.8.1 // indirect\n\tgithub.com/emersion/go-message v0.18.0 // indirect\n\tgithub.com/emersion/go-textwrapper v0.0.0-20200911093747-65d896831594 // indirect\n\tgithub.com/emersion/go-vcard v0.0.0-20230815062825-8fda7d206ec9 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/flynn/noise v1.0.1 // indirect\n\tgithub.com/gdamore/encoding v1.0.0 // indirect\n\tgithub.com/geoffgarside/ber v1.1.0 // indirect\n\tgithub.com/go-ini/ini v1.67.0 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-ole/go-ole v1.3.0 // indirect\n\tgithub.com/go-resty/resty/v2 v2.11.0 // indirect\n\tgithub.com/goccy/go-json v0.10.3 // indirect\n\tgithub.com/gofrs/flock v0.8.1 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang-jwt/jwt/v5 v5.2.1 // indirect\n\tgithub.com/google/s2a-go v0.1.8 // indirect\n\tgithub.com/googleapis/enterprise-certificate-proxy v0.3.4 // indirect\n\tgithub.com/googleapis/gax-go/v2 v2.14.0 // indirect\n\tgithub.com/gopherjs/gopherjs v0.0.0-20181103185306-d547d1d9531e // indirect\n\tgithub.com/gorilla/schema v1.4.1 // indirect\n\tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n\tgithub.com/hashicorp/go-cleanhttp v0.5.2 // indirect\n\tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n\tgithub.com/hashicorp/go-retryablehttp v0.7.7 // indirect\n\tgithub.com/hashicorp/go-uuid v1.0.3 // indirect\n\tgithub.com/hashicorp/golang-lru/v2 v2.0.7 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/jcmturner/aescts/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/dnsutils/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/gofork v1.7.6 // indirect\n\tgithub.com/jcmturner/goidentity/v6 v6.0.1 // indirect\n\tgithub.com/jcmturner/rpc/v2 v2.0.3 // indirect\n\tgithub.com/jtolio/noiseconn v0.0.0-20231127013910-f6d9ecbf1de7 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.8 // indirect\n\tgithub.com/kr/fs v0.1.0 // indirect\n\tgithub.com/kylelemons/godebug v1.1.0 // indirect\n\tgithub.com/lpar/date v1.0.0 // indirect\n\tgithub.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\tgithub.com/lufia/plan9stats v0.0.0-20231016141302-07b5767bb0ed // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/minio/md5-simd v1.1.2 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/onsi/ginkgo v1.16.5 // indirect\n\tgithub.com/panjf2000/ants/v2 v2.9.1 // indirect\n\tgithub.com/pengsrc/go-shared v0.2.1-0.20190131101655-1999055a4a14 // indirect\n\tgithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/power-devops/perfstat v0.0.0-20221212215047-62379fc7944b // indirect\n\tgithub.com/prometheus/client_model v0.6.1 // indirect\n\tgithub.com/prometheus/common v0.55.0 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/rasky/go-xdr v0.0.0-20170124162913-1a41d1a06c93 // indirect\n\tgithub.com/relvacode/iso8601 v1.3.0 // indirect\n\tgithub.com/rs/xid v1.5.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/ryszard/goskiplist v0.0.0-20150312221310-2dfbae5fcf46 // indirect\n\tgithub.com/sabhiram/go-gitignore v0.0.0-20210923224102-525f6e181f06 // indirect\n\tgithub.com/samber/lo v1.47.0 // indirect\n\tgithub.com/shabbyrobe/gocovmerge v0.0.0-20230507112040-c3350d9342df // indirect\n\tgithub.com/sony/gobreaker v0.5.0 // indirect\n\tgithub.com/spacemonkeygo/monkit/v3 v3.0.22 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.13 // indirect\n\tgithub.com/tklauser/numcpus v0.7.0 // indirect\n\tgithub.com/willscott/go-nfs-client v0.0.0-20240104095149-b44639837b00 // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.4 // indirect\n\tgithub.com/zeebo/errs v1.3.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 // indirect\n\tgo.opentelemetry.io/otel v1.29.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.29.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.29.0 // indirect\n\tgolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect\n\tgolang.org/x/mod v0.19.0 // indirect\n\tgolang.org/x/tools v0.23.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241206012308-a4fef0638583 // indirect\n\tgoogle.golang.org/grpc v1.67.1 // indirect\n\tgoogle.golang.org/protobuf v1.35.2 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\tmoul.io/http2curl/v2 v2.3.0 // indirect\n\tstorj.io/common v0.0.0-20240812101423-26b53789c348 // indirect\n\tstorj.io/drpc v0.0.35-0.20240709171858-0075ac871661 // indirect\n\tstorj.io/eventkit v0.0.0-20240415002644-1d9596fee086 // indirect\n\tstorj.io/infectious v0.0.2 // indirect\n\tstorj.io/picobuf v0.0.3 // indirect\n)\n\nrequire (\n\tgithub.com/Microsoft/go-winio v0.6.1 // indirect\n\tgithub.com/ProtonMail/go-crypto v1.1.3\n\tgithub.com/golang-jwt/jwt/v4 v4.5.1\n\tgithub.com/pkg/xattr v0.4.10\n\tgolang.org/x/mobile v0.0.0-20240716161057-1ad2df20a8b6\n\tgolang.org/x/term v0.27.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 100.173828125,
          "content": "bazil.org/fuse v0.0.0-20230120002735-62a210ff1fd5 h1:A0NsYy4lDBZAC6QiYeJ4N+XuHIKBpyhAVRMHRQZKTeQ=\nbazil.org/fuse v0.0.0-20230120002735-62a210ff1fd5/go.mod h1:gG3RZAMXCa/OTes6rr9EwusmR1OH1tDDy+cg9c5YliY=\ncloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=\ncloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=\ncloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.45.1/go.mod h1:RpBamKRgapWJb87xiFSdk4g1CME7QZg3uwTez+TSTjc=\ncloud.google.com/go v0.46.3/go.mod h1:a6bKKbmY7er1mI7TEI4lsAkts/mkhTSZK8w33B4RAg0=\ncloud.google.com/go v0.50.0/go.mod h1:r9sluTvynVuxRIOHXQEHMFffphuXHOMZMycpNR5e6To=\ncloud.google.com/go v0.52.0/go.mod h1:pXajvRH/6o3+F9jDHZWQ5PbGhn+o8w9qiu/CffaVdO4=\ncloud.google.com/go v0.53.0/go.mod h1:fp/UouUEsRkN6ryDKNW/Upv/JBKnv6WDthjR6+vze6M=\ncloud.google.com/go v0.54.0/go.mod h1:1rq2OEkV3YMf6n/9ZvGWI3GWw0VoqH/1x2nd8Is/bPc=\ncloud.google.com/go v0.56.0/go.mod h1:jr7tqZxxKOVYizybht9+26Z/gUq7tiRzu+ACVAMbKVk=\ncloud.google.com/go v0.57.0/go.mod h1:oXiQ6Rzq3RAkkY7N6t3TcE6jE+CIBBbA36lwQ1JyzZs=\ncloud.google.com/go v0.62.0/go.mod h1:jmCYTdRCQuc1PHIIJ/maLInMho30T/Y0M4hTdTShOYc=\ncloud.google.com/go v0.65.0/go.mod h1:O5N8zS7uWy9vkA9vayVHs65eM1ubvY4h553ofrNHObY=\ncloud.google.com/go/auth v0.12.1 h1:n2Bj25BUMM0nvE9D2XLTiImanwZhO3DkfWSYS/SAJP4=\ncloud.google.com/go/auth v0.12.1/go.mod h1:BFMu+TNpF3DmvfBO9ClqTR/SiqVIm7LukKF9mbendF4=\ncloud.google.com/go/auth/oauth2adapt v0.2.6 h1:V6a6XDu2lTwPZWOawrAa9HUK+DB2zfJyTuciBG5hFkU=\ncloud.google.com/go/auth/oauth2adapt v0.2.6/go.mod h1:AlmsELtlEBnaNTL7jCj8VQFLy6mbZv0s4Q7NGBeQ5E8=\ncloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=\ncloud.google.com/go/bigquery v1.3.0/go.mod h1:PjpwJnslEMmckchkHFfq+HTD2DmtT67aNFKH1/VBDHE=\ncloud.google.com/go/bigquery v1.4.0/go.mod h1:S8dzgnTigyfTmLBfrtrhyYhwRxG72rYxvftPBK2Dvzc=\ncloud.google.com/go/bigquery v1.5.0/go.mod h1:snEHRnqQbz117VIFhE8bmtwIDY80NLUZUMb4Nv6dBIg=\ncloud.google.com/go/bigquery v1.7.0/go.mod h1://okPTzCYNXSlb24MZs83e2Do+h+VXtc4gLoIoXIAPc=\ncloud.google.com/go/bigquery v1.8.0/go.mod h1:J5hqkt3O0uAFnINi6JXValWIb1v0goeZM77hZzJN/fQ=\ncloud.google.com/go/compute/metadata v0.5.2 h1:UxK4uu/Tn+I3p2dYWTfiX4wva7aYlKixAHn3fyqngqo=\ncloud.google.com/go/compute/metadata v0.5.2/go.mod h1:C66sj2AluDcIqakBq/M8lw8/ybHgOZqin2obFxa/E5k=\ncloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=\ncloud.google.com/go/datastore v1.1.0/go.mod h1:umbIZjpQpHh4hmRpGhH4tLFup+FVzqBi1b3c64qFpCk=\ncloud.google.com/go/pubsub v1.0.1/go.mod h1:R0Gpsv3s54REJCy4fxDixWD93lHJMoZTyQ2kNxGRt3I=\ncloud.google.com/go/pubsub v1.1.0/go.mod h1:EwwdRX2sKPjnvnqCa270oGRyludottCI76h+R3AArQw=\ncloud.google.com/go/pubsub v1.2.0/go.mod h1:jhfEVHT8odbXTkndysNHCcx0awwzvfOlguIAii9o8iA=\ncloud.google.com/go/pubsub v1.3.1/go.mod h1:i+ucay31+CNRpDW4Lu78I4xXG+O1r/MAHgjpRVR+TSU=\ncloud.google.com/go/storage v1.0.0/go.mod h1:IhtSnM/ZTZV8YYJWCY8RULGVqBDmpoyjwiyrjsg+URw=\ncloud.google.com/go/storage v1.5.0/go.mod h1:tpKbwo567HUNpVclU5sGELwQWBDZ8gh0ZeosJ0Rtdos=\ncloud.google.com/go/storage v1.6.0/go.mod h1:N7U0C8pVQ/+NIKOBQyamJIeKQKkZ+mxpohlUTyfDhBk=\ncloud.google.com/go/storage v1.8.0/go.mod h1:Wv1Oy7z6Yz3DshWRJFhqM/UCfaWIRTdp0RXyy7KQOVs=\ncloud.google.com/go/storage v1.10.0/go.mod h1:FLPqc6j+Ki4BU591ie1oL6qBQGu2Bl/tZ9ullr3+Kg0=\ndmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore v1.16.0 h1:JZg6HRh6W6U4OLl6lk7BZ7BLisIzM9dG1R50zUk9C/M=\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore v1.16.0/go.mod h1:YL1xnZ6QejvQHWJrX/AvhFl4WW4rqHVoKspWNVwFk0M=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity v1.8.0 h1:B/dfvscEQtew9dVuoxqxrUKKv8Ih2f55PydknDamU+g=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity v1.8.0/go.mod h1:fiPSssYvltE08HJchL04dOy+RD4hgrjph0cwGGMntdI=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity/cache v0.3.0 h1:+m0M/LFxN43KvULkDNfdXOgrjtg6UYJPFBJyuEcRCAw=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity/cache v0.3.0/go.mod h1:PwOyop78lveYMRs6oCxjiVyBdyCgIYH6XHIVZO9/SFQ=\ngithub.com/Azure/azure-sdk-for-go/sdk/internal v1.10.0 h1:ywEEhmNahHBihViHepv3xPBn1663uRv2t2q/ESv9seY=\ngithub.com/Azure/azure-sdk-for-go/sdk/internal v1.10.0/go.mod h1:iZDifYGJTIgIIkYRNWPENUnqx6bJ2xnSDFI2tjwZNuY=\ngithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage v1.6.0 h1:PiSrjRPpkQNjrM8H0WwKMnZUdu1RGMtd/LdGKUrOo+c=\ngithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage v1.6.0/go.mod h1:oDrbWx4ewMylP7xHivfgixbfGBT6APAwsSoHRKotnIc=\ngithub.com/Azure/azure-sdk-for-go/sdk/storage/azblob v1.5.0 h1:mlmW46Q0B79I+Aj4azKC6xDMFN9a9SyZWESlGWYXbFs=\ngithub.com/Azure/azure-sdk-for-go/sdk/storage/azblob v1.5.0/go.mod h1:PXe2h+LKcWTX9afWdZoHyODqR4fBa5boUM/8uJfZ0Jo=\ngithub.com/Azure/azure-sdk-for-go/sdk/storage/azfile v1.4.0 h1:mJVYrRyo7/ISs3MLMHphqssqbS1vLJ3uiwo1+fY8OUQ=\ngithub.com/Azure/azure-sdk-for-go/sdk/storage/azfile v1.4.0/go.mod h1:QXy84HaR0FHLPWaGQDBrZZbdCPTshwGl3gQ64uR/Zrc=\ngithub.com/Azure/go-ntlmssp v0.0.0-20221128193559-754e69321358 h1:mFRzDkZVAjdal+s7s0MwaRv9igoPqLRdzOLzw/8Xvq8=\ngithub.com/Azure/go-ntlmssp v0.0.0-20221128193559-754e69321358/go.mod h1:chxPXzSsl7ZWRAuOIE23GDNzjWuZquvFlgA8xmpunjU=\ngithub.com/AzureAD/microsoft-authentication-extensions-for-go/cache v0.1.1 h1:WJTmL004Abzc5wDB5VtZG2PJk5ndYDgVacGqfirKxjM=\ngithub.com/AzureAD/microsoft-authentication-extensions-for-go/cache v0.1.1/go.mod h1:tCcJZ0uHAmvjsVYzEFivsRTN00oz5BEsRgQHu5JZ9WE=\ngithub.com/AzureAD/microsoft-authentication-library-for-go v1.2.2 h1:XHOnouVk1mxXfQidrMEnLlPk9UMeRtyBTnEFtxkV0kU=\ngithub.com/AzureAD/microsoft-authentication-library-for-go v1.2.2/go.mod h1:wP83P5OoQ5p6ip3ScPr0BAq0BvuPAvacpEuSzyouqAI=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=\ngithub.com/Files-com/files-sdk-go/v3 v3.2.97 h1:c+mQoiES/21JrHDAxJLCYICJO+bu8Clv0ZDNZe7Ndyk=\ngithub.com/Files-com/files-sdk-go/v3 v3.2.97/go.mod h1:Y/bCHoPJNPKz2hw1ADXjQXJP378HODwK+g/5SR2gqfU=\ngithub.com/Masterminds/semver/v3 v3.2.0 h1:3MEsd0SM6jqZojhjLWWeBY+Kcjy9i6MQAeY7YgDP83g=\ngithub.com/Masterminds/semver/v3 v3.2.0/go.mod h1:qvl/7zhW3nngYb5+80sSMF+FG2BjYrf8m9wsX0PNOMQ=\ngithub.com/Max-Sum/base32768 v0.0.0-20230304063302-18e6ce5945fd h1:nzE1YQBdx1bq9IlZinHa+HVffy+NmVRoKr+wHN8fpLE=\ngithub.com/Max-Sum/base32768 v0.0.0-20230304063302-18e6ce5945fd/go.mod h1:C8yoIfvESpM3GD07OCHU7fqI7lhwyZ2Td1rbNbTAhnc=\ngithub.com/Microsoft/go-winio v0.5.2/go.mod h1:WpS1mjBmmwHBEWmogvA2mj8546UReBk4v8QkMxJ6pZY=\ngithub.com/Microsoft/go-winio v0.6.1 h1:9/kr64B9VUZrLm5YYwbGtUJnMgqWVOdUAXu6Migciow=\ngithub.com/Microsoft/go-winio v0.6.1/go.mod h1:LRdKpFKfdobln8UmuiYcKPot9D2v6svN5+sAH+4kjUM=\ngithub.com/ProtonMail/bcrypt v0.0.0-20210511135022-227b4adcab57/go.mod h1:HecWFHognK8GfRDGnFQbW/LiV7A3MX3gZVs45vk5h8I=\ngithub.com/ProtonMail/bcrypt v0.0.0-20211005172633-e235017c1baf h1:yc9daCCYUefEs69zUkSzubzjBbL+cmOXgnmt9Fyd9ug=\ngithub.com/ProtonMail/bcrypt v0.0.0-20211005172633-e235017c1baf/go.mod h1:o0ESU9p83twszAU8LBeJKFAAMX14tISa0yk4Oo5TOqo=\ngithub.com/ProtonMail/gluon v0.17.1-0.20230724134000-308be39be96e h1:lCsqUUACrcMC83lg5rTo9Y0PnPItE61JSfvMyIcANwk=\ngithub.com/ProtonMail/gluon v0.17.1-0.20230724134000-308be39be96e/go.mod h1:Og5/Dz1MiGpCJn51XujZwxiLG7WzvvjE5PRpZBQmAHo=\ngithub.com/ProtonMail/go-crypto v0.0.0-20230321155629-9a39f2531310/go.mod h1:8TI4H3IbrackdNgv+92dI+rhpCaLqM0IfpgCgenFvRE=\ngithub.com/ProtonMail/go-crypto v0.0.0-20230717121422-5aa5874ade95/go.mod h1:EjAoLdwvbIOoOQr3ihjnSoLZRtE8azugULFRteWMNc0=\ngithub.com/ProtonMail/go-crypto v1.1.3 h1:nRBOetoydLeUb4nHajyO2bKqMLfWQ/ZPwkXqXxPxCFk=\ngithub.com/ProtonMail/go-crypto v1.1.3/go.mod h1:rA3QumHc/FZ8pAHreoekgiAbzpNsfQAosU5td4SnOrE=\ngithub.com/ProtonMail/go-mime v0.0.0-20230322103455-7d82a3887f2f h1:tCbYj7/299ekTTXpdwKYF8eBlsYsDVoggDAuAjoK66k=\ngithub.com/ProtonMail/go-mime v0.0.0-20230322103455-7d82a3887f2f/go.mod h1:gcr0kNtGBqin9zDW9GOHcVntrwnjrK+qdJ06mWYBybw=\ngithub.com/ProtonMail/go-srp v0.0.7 h1:Sos3Qk+th4tQR64vsxGIxYpN3rdnG9Wf9K4ZloC1JrI=\ngithub.com/ProtonMail/go-srp v0.0.7/go.mod h1:giCp+7qRnMIcCvI6V6U3S1lDDXDQYx2ewJ6F/9wdlJk=\ngithub.com/ProtonMail/gopenpgp/v2 v2.7.4 h1:Vz/8+HViFFnf2A6XX8JOvZMrA6F5puwNvvF21O1mRlo=\ngithub.com/ProtonMail/gopenpgp/v2 v2.7.4/go.mod h1:IhkNEDaxec6NyzSI0PlxapinnwPVIESk8/76da3Ct3g=\ngithub.com/PuerkitoBio/goquery v1.8.1 h1:uQxhNlArOIdbrH1tr0UXwdVFgDcZDrZVdcpygAcwmWM=\ngithub.com/PuerkitoBio/goquery v1.8.1/go.mod h1:Q8ICL1kNUJ2sXGoAhPGUdYDJvgQgHzJsnnd3H7Ho5jQ=\ngithub.com/a8m/tree v0.0.0-20240104212747-2c8764a5f17e h1:KMVieI1/Ub++GYfnhyFPoGE3g5TUiG4srE3TMGr5nM4=\ngithub.com/a8m/tree v0.0.0-20240104212747-2c8764a5f17e/go.mod h1:j5astEcUkZQX8lK+KKlQ3NRQ50f4EE8ZjyZpCz3mrH4=\ngithub.com/aalpar/deheap v0.0.0-20210914013432-0cc84d79dec3 h1:hhdWprfSpFbN7lz3W1gM40vOgvSh1WCSMxYD6gGB4Hs=\ngithub.com/aalpar/deheap v0.0.0-20210914013432-0cc84d79dec3/go.mod h1:XaUnRxSCYgL3kkgX0QHIV0D+znljPIDImxlv2kbGv0Y=\ngithub.com/abbot/go-http-auth v0.4.0 h1:QjmvZ5gSC7jm3Zg54DqWE/T5m1t2AfDu6QlXJT0EVT0=\ngithub.com/abbot/go-http-auth v0.4.0/go.mod h1:Cz6ARTIzApMJDzh5bRMSUou6UMSp0IEXg9km/ci7TJM=\ngithub.com/akavel/rsrc v0.10.2 h1:Zxm8V5eI1hW4gGaYsJQUhxpjkENuG91ki8B4zCrvEsw=\ngithub.com/akavel/rsrc v0.10.2/go.mod h1:uLoCtb9J+EyAqh+26kdrTgmzRBFPGOolLWKpdxkKq+c=\ngithub.com/anacrolix/dms v1.7.1 h1:XVOpT3eoO5Ds34B1X+TE3R2ApfqGGeqotEoCVNP8BaI=\ngithub.com/anacrolix/dms v1.7.1/go.mod h1:excFJW5MKBhn5yt5ZMyeE9iFVqnO6tEGQl7YG/2tUoQ=\ngithub.com/anacrolix/generics v0.0.1 h1:4WVhK6iLb3UAAAQP6I3uYlMOHcp9FqJC9j4n81Wv9Ks=\ngithub.com/anacrolix/generics v0.0.1/go.mod h1:ff2rHB/joTV03aMSSn/AZNnaIpUw0h3njetGsaXcMy8=\ngithub.com/anacrolix/log v0.16.0 h1:DSuyb5kAJwl3Y0X1TRcStVrTS9ST9b0BHW+7neE4Xho=\ngithub.com/anacrolix/log v0.16.0/go.mod h1:m0poRtlr41mriZlXBQ9SOVZ8yZBkLjOkDhd5Li5pITA=\ngithub.com/andybalholm/cascadia v1.3.1/go.mod h1:R4bJ1UQfqADjvDa4P6HZHLh/3OxWWEqc0Sk8XGwHqvA=\ngithub.com/andybalholm/cascadia v1.3.2 h1:3Xi6Dw5lHF15JtdcmAHD3i1+T8plmv7BQ/nsViSLyss=\ngithub.com/andybalholm/cascadia v1.3.2/go.mod h1:7gtRlve5FxPPgIgX36uWBX58OdBsSS6lUvCFb+h7KvU=\ngithub.com/appscode/go-querystring v0.0.0-20170504095604-0126cfb3f1dc h1:LoL75er+LKDHDUfU5tRvFwxH0LjPpZN8OoG8Ll+liGU=\ngithub.com/appscode/go-querystring v0.0.0-20170504095604-0126cfb3f1dc/go.mod h1:w648aMHEgFYS6xb0KVMMtZ2uMeemhiKCuD2vj6gY52A=\ngithub.com/atotto/clipboard v0.1.4 h1:EH0zSVneZPSuFR11BlR9YppQTVDbh5+16AmcJi4g1z4=\ngithub.com/atotto/clipboard v0.1.4/go.mod h1:ZY9tmq7sm5xIbd9bOK4onWV4S6X0u6GY7Vn0Yu86PYI=\ngithub.com/aws/aws-sdk-go-v2 v1.32.6 h1:7BokKRgRPuGmKkFMhEg/jSul+tB9VvXhcViILtfG8b4=\ngithub.com/aws/aws-sdk-go-v2 v1.32.6/go.mod h1:P5WJBrYqqbWVaOxgH0X/FYYD47/nooaPOZPlQdmiN2U=\ngithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7 h1:lL7IfaFzngfx0ZwUGOZdsFFnQ5uLvR0hWqqhyE7Q9M8=\ngithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7/go.mod h1:QraP0UcVlQJsmHfioCrveWOC1nbiWUl3ej08h4mXWoc=\ngithub.com/aws/aws-sdk-go-v2/config v1.28.6 h1:D89IKtGrs/I3QXOLNTH93NJYtDhm8SYa9Q5CsPShmyo=\ngithub.com/aws/aws-sdk-go-v2/config v1.28.6/go.mod h1:GDzxJ5wyyFSCoLkS+UhGB0dArhb9mI+Co4dHtoTxbko=\ngithub.com/aws/aws-sdk-go-v2/credentials v1.17.47 h1:48bA+3/fCdi2yAwVt+3COvmatZ6jUDNkDTIsqDiMUdw=\ngithub.com/aws/aws-sdk-go-v2/credentials v1.17.47/go.mod h1:+KdckOejLW3Ks3b0E3b5rHsr2f9yuORBum0WPnE5o5w=\ngithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.21 h1:AmoU1pziydclFT/xRV+xXE/Vb8fttJCLRPv8oAkprc0=\ngithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.21/go.mod h1:AjUdLYe4Tgs6kpH4Bv7uMZo7pottoyHMn4eTcIcneaY=\ngithub.com/aws/aws-sdk-go-v2/feature/s3/manager v1.17.43 h1:iLdpkYZ4cXIQMO7ud+cqMWR1xK5ESbt1rvN77tRi1BY=\ngithub.com/aws/aws-sdk-go-v2/feature/s3/manager v1.17.43/go.mod h1:OgbsKPAswXDd5kxnR4vZov69p3oYjbvUyIRBAAV0y9o=\ngithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.25 h1:s/fF4+yDQDoElYhfIVvSNyeCydfbuTKzhxSXDXCPasU=\ngithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.25/go.mod h1:IgPfDv5jqFIzQSNbUEMoitNooSMXjRSDkhXv8jiROvU=\ngithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.25 h1:ZntTCl5EsYnhN/IygQEUugpdwbhdkom9uHcbCftiGgA=\ngithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.25/go.mod h1:DBdPrgeocww+CSl1C8cEV8PN1mHMBhuCDLpXezyvWkE=\ngithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1 h1:VaRN3TlFdd6KxX1x3ILT5ynH6HvKgqdiXoTxAF4HQcQ=\ngithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1/go.mod h1:FbtygfRFze9usAadmnGJNc8KsP346kEe+y2/oyhGAGc=\ngithub.com/aws/aws-sdk-go-v2/internal/v4a v1.3.25 h1:r67ps7oHCYnflpgDy2LZU0MAQtQbYIOqNNnqGO6xQkE=\ngithub.com/aws/aws-sdk-go-v2/internal/v4a v1.3.25/go.mod h1:GrGY+Q4fIokYLtjCVB/aFfCVL6hhGUFl8inD18fDalE=\ngithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1 h1:iXtILhvDxB6kPvEXgsDhGaZCSC6LQET5ZHSdJozeI0Y=\ngithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1/go.mod h1:9nu0fVANtYiAePIBh2/pFUSwtJ402hLnp854CNoDOeE=\ngithub.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.6 h1:HCpPsWqmYQieU7SS6E9HXfdAMSud0pteVXieJmcpIRI=\ngithub.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.6/go.mod h1:ngUiVRCco++u+soRRVBIvBZxSMMvOVMXA4PJ36JLfSw=\ngithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.6 h1:50+XsN70RS7dwJ2CkVNXzj7U2L1HKP8nqTd3XWEXBN4=\ngithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.6/go.mod h1:WqgLmwY7so32kG01zD8CPTJWVWM+TzJoOVHwTg4aPug=\ngithub.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.6 h1:BbGDtTi0T1DYlmjBiCr/le3wzhA37O8QTC5/Ab8+EXk=\ngithub.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.6/go.mod h1:hLMJt7Q8ePgViKupeymbqI0la+t9/iYFBjxQCFwuAwI=\ngithub.com/aws/aws-sdk-go-v2/service/s3 v1.71.0 h1:nyuzXooUNJexRT0Oy0UQY6AhOzxPxhtt4DcBIHyCnmw=\ngithub.com/aws/aws-sdk-go-v2/service/s3 v1.71.0/go.mod h1:sT/iQz8JK3u/5gZkT+Hmr7GzVZehUMkRZpOaAwYXeGY=\ngithub.com/aws/aws-sdk-go-v2/service/sso v1.24.7 h1:rLnYAfXQ3YAccocshIH5mzNNwZBkBo+bP6EhIxak6Hw=\ngithub.com/aws/aws-sdk-go-v2/service/sso v1.24.7/go.mod h1:ZHtuQJ6t9A/+YDuxOLnbryAmITtr8UysSny3qcyvJTc=\ngithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.6 h1:JnhTZR3PiYDNKlXy50/pNeix9aGMo6lLpXwJ1mw8MD4=\ngithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.6/go.mod h1:URronUEGfXZN1VpdktPSD1EkAL9mfrV+2F4sjH38qOY=\ngithub.com/aws/aws-sdk-go-v2/service/sts v1.33.2 h1:s4074ZO1Hk8qv65GqNXqDjmkf4HSQqJukaLuuW0TpDA=\ngithub.com/aws/aws-sdk-go-v2/service/sts v1.33.2/go.mod h1:mVggCnIWoM09jP71Wh+ea7+5gAp53q+49wDFs1SW5z8=\ngithub.com/aws/smithy-go v1.22.1 h1:/HPHZQ0g7f4eUeK6HKglFz8uwVfZKgoI25rb/J+dnro=\ngithub.com/aws/smithy-go v1.22.1/go.mod h1:irrKGvNn1InZwb2d7fkIRNucdfwR8R+Ts3wxYa/cJHg=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bradenaw/juniper v0.15.2 h1:0JdjBGEF2jP1pOxmlNIrPhAoQN7Ng5IMAY5D0PHMW4U=\ngithub.com/bradenaw/juniper v0.15.2/go.mod h1:UX4FX57kVSaDp4TPqvSjkAAewmRFAfXf27BOs5z9dq8=\ngithub.com/bradfitz/iter v0.0.0-20191230175014-e8f45d346db8 h1:GKTyiRCL6zVf5wWaqKnf+7Qs6GbEPfd4iMOitWzXJx8=\ngithub.com/bradfitz/iter v0.0.0-20191230175014-e8f45d346db8/go.mod h1:spo1JLcs67NmW1aVLEgtA8Yy1elc+X8y5SRW1sFW4Og=\ngithub.com/buengese/sgzip v0.1.1 h1:ry+T8l1mlmiWEsDrH/YHZnCVWD2S3im1KLsyO+8ZmTU=\ngithub.com/buengese/sgzip v0.1.1/go.mod h1:i5ZiXGF3fhV7gL1xaRRL1nDnmpNj0X061FQzOS8VMas=\ngithub.com/bwesterb/go-ristretto v1.2.0/go.mod h1:fUIoIZaG73pV5biE2Blr2xEzDoMj7NFEuV9ekS419A0=\ngithub.com/bwesterb/go-ristretto v1.2.3/go.mod h1:fUIoIZaG73pV5biE2Blr2xEzDoMj7NFEuV9ekS419A0=\ngithub.com/bytedance/sonic v1.11.6 h1:oUp34TzMlL+OY1OUWxHqsdkgC/Zfc85zGqw9siXjrc0=\ngithub.com/bytedance/sonic v1.11.6/go.mod h1:LysEHSvpvDySVdC2f87zGWf6CIKJcAvqab1ZaiQtds4=\ngithub.com/bytedance/sonic/loader v0.1.1 h1:c+e5Pt1k/cy5wMveRDyk2X4B9hF4g7an8N3zCYjJFNM=\ngithub.com/bytedance/sonic/loader v0.1.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=\ngithub.com/calebcase/tmpfile v1.0.3 h1:BZrOWZ79gJqQ3XbAQlihYZf/YCV0H4KPIdM5K5oMpJo=\ngithub.com/calebcase/tmpfile v1.0.3/go.mod h1:UAUc01aHeC+pudPagY/lWvt2qS9ZO5Zzof6/tIUzqeI=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/chilts/sid v0.0.0-20190607042430-660e94789ec9 h1:z0uK8UQqjMVYzvk4tiiu3obv2B44+XBsvgEJREQfnO8=\ngithub.com/chilts/sid v0.0.0-20190607042430-660e94789ec9/go.mod h1:Jl2neWsQaDanWORdqZ4emBl50J4/aRBBS4FyyG9/PFo=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cloudflare/circl v1.1.0/go.mod h1:prBCrKB9DV4poKZY1l9zBXg2QJY7mvgRvtMxxK7fi4I=\ngithub.com/cloudflare/circl v1.3.3/go.mod h1:5XYMA4rFBvNIrhs50XuiBJ15vF2pZn4nnUKZrLbUZFA=\ngithub.com/cloudflare/circl v1.3.7 h1:qlCDlTPz2n9fu58M0Nh1J/JzcFpfgkFHHX3O35r5vcU=\ngithub.com/cloudflare/circl v1.3.7/go.mod h1:sRTcRWXGLrKw6yIGJ+l7amYJFfAXbZG0kBSc8r4zxgA=\ngithub.com/cloudinary/cloudinary-go/v2 v2.9.0 h1:8C76QklmuV4qmKAC7cUnu9D68X9kCkFMuLspPikECCo=\ngithub.com/cloudinary/cloudinary-go/v2 v2.9.0/go.mod h1:ireC4gqVetsjVhYlwjUJwKTbZuWjEIynbR9zQTlqsvo=\ngithub.com/cloudsoda/go-smb2 v0.0.0-20241223203758-52b943b88fd6 h1:mLY/79N73URZ2J/oRKTxmfhCgxThzBmjQ6XOjX5tYjI=\ngithub.com/cloudsoda/go-smb2 v0.0.0-20241223203758-52b943b88fd6/go.mod h1:0aLYPsmguHbok591y6hI5yAqU0drbUzrPEO10ZpgTTw=\ngithub.com/cloudwego/base64x v0.1.4 h1:jwCgWpFanWmN8xoIUHa2rtzmkd5J2plF/dnLS6Xd/0Y=\ngithub.com/cloudwego/base64x v0.1.4/go.mod h1:0zlkT4Wn5C6NdauXdJRhSKRlJvmclQ1hhJgA0rcu/8w=\ngithub.com/cloudwego/iasm v0.2.0 h1:1KNIy1I1H9hNNFEEH3DVnI4UujN+1zjpuk6gwHLTssg=\ngithub.com/cloudwego/iasm v0.2.0/go.mod h1:8rXZaNYT2n95jn+zTI1sDr+IgcD2GVs0nlbbQPiEFhY=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/colinmarc/hdfs/v2 v2.4.0 h1:v6R8oBx/Wu9fHpdPoJJjpGSUxo8NhHIwrwsfhFvU9W0=\ngithub.com/colinmarc/hdfs/v2 v2.4.0/go.mod h1:0NAO+/3knbMx6+5pCv+Hcbaz4xn/Zzbn9+WIib2rKVI=\ngithub.com/coreos/go-semver v0.3.1 h1:yi21YpKnrx1gt5R+la8n5WgS0kCrsPp33dmEyHReZr4=\ngithub.com/coreos/go-semver v0.3.1/go.mod h1:irMmmIw/7yzSRPWryHsK7EYSg09caPQL03VsM8rvUec=\ngithub.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=\ngithub.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4 h1:wfIWP927BUkWJb2NmU/kNDYIBTh/ziUX91+lVfRxZq4=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creasty/defaults v1.7.0 h1:eNdqZvc5B509z18lD8yc212CAqJNvfT1Jq6L8WowdBA=\ngithub.com/creasty/defaults v1.7.0/go.mod h1:iGzKe6pbEHnpMPtfDXZEr0NVxWnPTjb1bbDy08fPzYM=\ngithub.com/cronokirby/saferith v0.33.0 h1:TgoQlfsD4LIwx71+ChfRcIpjkw+RPOapDEVxa+LhwLo=\ngithub.com/cronokirby/saferith v0.33.0/go.mod h1:QKJhjoqUtBsXCAVEjw38mFqoi7DebT7kthcD7UzbnoA=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f h1:lO4WD4F/rVNCu3HqELle0jiPLLBs70cWOduZpkS1E78=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f/go.mod h1:cuUVRXasLTGF7a8hSLbxyZXjz+1KgoB3wDUb6vlszIc=\ngithub.com/dnaeon/go-vcr v1.2.0 h1:zHCHvJYTMh1N7xnV7zf1m1GPBF9Ad0Jk/whtQ1663qI=\ngithub.com/dnaeon/go-vcr v1.2.0/go.mod h1:R4UdLID7HZT3taECzJs4YgbbH6PIGXB6W/sc5OLb6RQ=\ngithub.com/dop251/scsu v0.0.0-20220106150536-84ac88021d00 h1:xJBhC00smQpSZw3Kr0ErMUBXhUSjYoLRm2szxdbRBL0=\ngithub.com/dop251/scsu v0.0.0-20220106150536-84ac88021d00/go.mod h1:nNICngOdmNImBb/vuL+dSc0aIg3ryNATpjxThNoPw4g=\ngithub.com/dropbox/dropbox-sdk-go-unofficial/v6 v6.0.5 h1:FT+t0UEDykcor4y3dMVKXIiWJETBpRgERYTGlmMd7HU=\ngithub.com/dropbox/dropbox-sdk-go-unofficial/v6 v6.0.5/go.mod h1:rSS3kM9XMzSQ6pw91Qgd6yB5jdt70N4OdtrAf74As5M=\ngithub.com/dsnet/try v0.0.3 h1:ptR59SsrcFUYbT/FhAbKTV6iLkeD6O18qfIWRml2fqI=\ngithub.com/dsnet/try v0.0.3/go.mod h1:WBM8tRpUmnXXhY1U6/S8dt6UWdHTQ7y8A5YSkRCkq40=\ngithub.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/ebitengine/purego v0.8.1 h1:sdRKd6plj7KYW33EH5As6YKfe8m9zbN9JMrOjNVF/BE=\ngithub.com/ebitengine/purego v0.8.1/go.mod h1:iIjxzd6CiRiOG0UyXP+V1+jWqUXVjPKLAI0mRfJZTmQ=\ngithub.com/emersion/go-message v0.18.0 h1:7LxAXHRpSeoO/Wom3ZApVZYG7c3d17yCScYce8WiXA8=\ngithub.com/emersion/go-message v0.18.0/go.mod h1:Zi69ACvzaoV/MBnrxfVBPV3xWEuCmC2nEN39oJF4B8A=\ngithub.com/emersion/go-textwrapper v0.0.0-20200911093747-65d896831594 h1:IbFBtwoTQyw0fIM5xv1HF+Y+3ZijDR839WMulgxCcUY=\ngithub.com/emersion/go-textwrapper v0.0.0-20200911093747-65d896831594/go.mod h1:aqO8z8wPrjkscevZJFVE1wXJrLpC5LtJG7fqLOsPb2U=\ngithub.com/emersion/go-vcard v0.0.0-20230815062825-8fda7d206ec9 h1:ATgqloALX6cHCranzkLb8/zjivwQ9DWWDCQRnxTPfaA=\ngithub.com/emersion/go-vcard v0.0.0-20230815062825-8fda7d206ec9/go.mod h1:HMJKR5wlh/ziNp+sHEDV2ltblO4JD2+IdDOWtGcQBTM=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/fatih/color v1.16.0 h1:zmkK9Ngbjj+K0yRhTVONQh1p/HknKYSlNT+vZCzyokM=\ngithub.com/fatih/color v1.16.0/go.mod h1:fL2Sau1YI5c0pdGEVCbKQbLXB6edEj1ZgiY4NijnWvE=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/flynn/noise v1.0.1 h1:vPp/jdQLXC6ppsXSj/pM3W1BIJ5FEHE2TulSJBpb43Y=\ngithub.com/flynn/noise v1.0.1/go.mod h1:xbMo+0i6+IGbYdJhF31t2eR1BIU0CYc12+BNAKwUTag=\ngithub.com/frankban/quicktest v1.14.4 h1:g2rn0vABPOOXmZUj+vbmUp0lPoXEMuhTpIluN0XL9UY=\ngithub.com/frankban/quicktest v1.14.4/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/gabriel-vasile/mimetype v1.4.7 h1:SKFKl7kD0RiPdbht0s7hFtjl489WcQ1VyPW8ZzUMYCA=\ngithub.com/gabriel-vasile/mimetype v1.4.7/go.mod h1:GDlAgAyIRT27BhFl53XNAFtfjzOkLaF35JdEG0P7LtU=\ngithub.com/gdamore/encoding v1.0.0 h1:+7OoQ1Bc6eTm5niUzBa0Ctsh6JbMW6Ra+YNuAtDBdko=\ngithub.com/gdamore/encoding v1.0.0/go.mod h1:alR0ol34c49FCSBLjhosxzcPHQbf2trDkoo5dl+VrEg=\ngithub.com/gdamore/tcell/v2 v2.7.4 h1:sg6/UnTM9jGpZU+oFYAsDahfchWAFW8Xx2yFinNSAYU=\ngithub.com/gdamore/tcell/v2 v2.7.4/go.mod h1:dSXtXTSK0VsW1biw65DZLZ2NKr7j0qP/0J7ONmsraWg=\ngithub.com/geoffgarside/ber v1.1.0 h1:qTmFG4jJbwiSzSXoNJeHcOprVzZ8Ulde2Rrrifu5U9w=\ngithub.com/geoffgarside/ber v1.1.0/go.mod h1:jVPKeCbj6MvQZhwLYsGwaGI52oUorHoHKNecGT85ZCc=\ngithub.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=\ngithub.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=\ngithub.com/gin-gonic/gin v1.10.0 h1:nTuyha1TYqgedzytsKYqna+DfLos46nTv2ygFy86HFU=\ngithub.com/gin-gonic/gin v1.10.0/go.mod h1:4PMNQiOhvDRa013RKVbsiNwoyezlm2rm0uX/T7kzp5Y=\ngithub.com/go-chi/chi/v5 v5.1.0 h1:acVI1TYaD+hhedDJ3r54HyA6sExp3HfXq7QWEEY/xMw=\ngithub.com/go-chi/chi/v5 v5.1.0/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\ngithub.com/go-darwin/apfs v0.0.0-20211011131704-f84b94dbf348 h1:JnrjqG5iR07/8k7NqrLNilRsl3s1EPRQEGvbPyOce68=\ngithub.com/go-darwin/apfs v0.0.0-20211011131704-f84b94dbf348/go.mod h1:Czxo/d1g948LtrALAZdL04TL/HnkopquAjxYUuI02bo=\ngithub.com/go-git/go-billy/v5 v5.6.0 h1:w2hPNtoehvJIxR00Vb4xX94qHQi/ApZfX+nBE2Cjio8=\ngithub.com/go-git/go-billy/v5 v5.6.0/go.mod h1:sFDq7xD3fn3E0GOwUSZqHo9lrkmx8xJhA0ZrfvjBRGM=\ngithub.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-ini/ini v1.67.0 h1:z6ZrTEZqSWOTyH2FlglNbNgARyHG8oLW9gMELqKr06A=\ngithub.com/go-ini/ini v1.67.0/go.mod h1:ByCAeIL28uOIIG0E3PJtZPDL8WnHpFKFOtgjp+3Ies8=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-ole/go-ole v1.3.0 h1:Dt6ye7+vXGIKZ7Xtk4s6/xVdGDQynvom7xCFEdWr6uE=\ngithub.com/go-ole/go-ole v1.3.0/go.mod h1:5LS6F96DhAwUc7C+1HLexzMXY1xGRSryjyPPKW6zv78=\ngithub.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=\ngithub.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=\ngithub.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=\ngithub.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=\ngithub.com/go-playground/validator/v10 v10.20.0 h1:K9ISHbSaI0lyB2eWMPJo+kOS/FBExVwjEviJTixqxL8=\ngithub.com/go-playground/validator/v10 v10.20.0/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=\ngithub.com/go-resty/resty/v2 v2.11.0 h1:i7jMfNOJYMp69lq7qozJP+bjgzfAzeOhuGlyDrqxT/8=\ngithub.com/go-resty/resty/v2 v2.11.0/go.mod h1:iiP/OpA0CkcL3IGt1O0+/SIItFUbkkyw5BGXiVdTu+A=\ngithub.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 h1:tfuBGBXKqDEevZMzYi5KSi8KkcZtzBcTgAUUtapy0OI=\ngithub.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=\ngithub.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=\ngithub.com/goccy/go-json v0.10.3 h1:KZ5WoDbxAIgm2HNbYckL0se1fHD6rz5j4ywS6ebzDqA=\ngithub.com/goccy/go-json v0.10.3/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gofrs/flock v0.8.1 h1:+gYjHKf32LDeiEEFhQaotPbLuUXjY5ZqxKgXy7n59aw=\ngithub.com/gofrs/flock v0.8.1/go.mod h1:F1TvTiK9OcQqauNUHlbJvyl9Qa1QvF/gOUDKA14jxHU=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=\ngithub.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=\ngithub.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=\ngithub.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=\ngithub.com/golang/mock v1.4.0/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.1/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.3/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.4/go.mod h1:l3mdAwkq5BuhzHwde/uurv3sEJeZMXNpwsxVWU71h+4=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.4/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.4.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=\ngithub.com/google/martian/v3 v3.0.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=\ngithub.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20190515194954-54271f7e092f/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20191218002539-d4f498aebedc/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200212024743-f11f1df84d12/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200229191704-1ebb73c60ed3/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200430221834-fc25d7d30c6d/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200708004538-1a94d8640e99/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20240509144519-723abb6459b7 h1:velgFPYr1X9TDwLIfkV7fWqsFlf7TeP11M/7kPd/dVI=\ngithub.com/google/pprof v0.0.0-20240509144519-723abb6459b7/go.mod h1:kf6iHlnVGwgKolg33glAes7Yg/8iWP8ukqeldJSO7jw=\ngithub.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=\ngithub.com/google/s2a-go v0.1.8 h1:zZDs9gcbt9ZPLV0ndSyQk6Kacx2g/X+SKYovpnz3SMM=\ngithub.com/google/s2a-go v0.1.8/go.mod h1:6iNWHTpQ+nfNRN5E00MSdfDwVesa8hhS32PhPO8deJA=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/googleapis/enterprise-certificate-proxy v0.3.4 h1:XYIDZApgAnrN1c855gTgghdIA6Stxb52D5RnLI1SLyw=\ngithub.com/googleapis/enterprise-certificate-proxy v0.3.4/go.mod h1:YKe7cfqYXjKGpGvmSg28/fFvhNzinZQm8DGnaburhGA=\ngithub.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=\ngithub.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=\ngithub.com/googleapis/gax-go/v2 v2.14.0 h1:f+jMrjBPl+DL9nI4IQzLUxMq7XrAqFYB7hBPqMNIe8o=\ngithub.com/googleapis/gax-go/v2 v2.14.0/go.mod h1:lhBCnjdLrWRaPvLWhmc8IS24m9mr07qSYnHncrgo+zk=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gopherjs/gopherjs v0.0.0-20181103185306-d547d1d9531e h1:JKmoR8x90Iww1ks85zJ1lfDGgIiMDuIptTOhJq+zKyg=\ngithub.com/gopherjs/gopherjs v0.0.0-20181103185306-d547d1d9531e/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gorilla/schema v1.4.1 h1:jUg5hUjCSDZpNGLuXQOgIWGdlgrIdYvgQ0wZtdK1M3E=\ngithub.com/gorilla/schema v1.4.1/go.mod h1:Dg5SSm5PV60mhF2NFaTV1xuYYj8tV8NOPRo4FggUMnM=\ngithub.com/gorilla/securecookie v1.1.1 h1:miw7JPhV+b/lAHSXz4qd/nN9jRiAFV5FwjeKyCS8BvQ=\ngithub.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+HVt/4epWDjd4=\ngithub.com/gorilla/sessions v1.2.1 h1:DHd3rPN5lE3Ts3D8rKkQ8x/0kqfeNmBAaiSi+o7FsgI=\ngithub.com/gorilla/sessions v1.2.1/go.mod h1:dk2InVEVJ0sfLlnXv9EAgkf6ecYs/i80K/zI+bUmuGM=\ngithub.com/hanwen/go-fuse/v2 v2.7.2 h1:SbJP1sUP+n1UF8NXBA14BuojmTez+mDgOk0bC057HQw=\ngithub.com/hanwen/go-fuse/v2 v2.7.2/go.mod h1:ugNaD/iv5JYyS1Rcvi57Wz7/vrLQJo10mmketmoef48=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=\ngithub.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-cleanhttp v0.5.2 h1:035FKYIWjmULyFRBKPs8TBQoi0x6d9G4xc9neXJWAZQ=\ngithub.com/hashicorp/go-cleanhttp v0.5.2/go.mod h1:kO/YDlP8L1346E6Sodw+PrpBSV4/SoxCXGY6BqNFT48=\ngithub.com/hashicorp/go-hclog v1.6.3 h1:Qr2kF+eVWjTiYmU7Y31tYlP1h0q/X3Nl3tPGdaB11/k=\ngithub.com/hashicorp/go-hclog v1.6.3/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=\ngithub.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\ngithub.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\ngithub.com/hashicorp/go-retryablehttp v0.7.7 h1:C8hUCYzor8PIfXHa4UrZkU4VvK8o9ISHxT2Q8+VepXU=\ngithub.com/hashicorp/go-retryablehttp v0.7.7/go.mod h1:pkQpWZeYWskR+D1tR2O5OcBFOxfA7DoAO6xtkuQnHTk=\ngithub.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.3 h1:2gKiV6YVmrJ1i2CKKa9obLvRieoRGviZFL26PcT/Co8=\ngithub.com/hashicorp/go-uuid v1.0.3/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru/v2 v2.0.7 h1:a+bsQ5rvGLjzHuww6tVxozPZFVghXaHOwFs4luLUK2k=\ngithub.com/hashicorp/golang-lru/v2 v2.0.7/go.mod h1:QeFd9opnmA6QUJc5vARoKUSoFhyfM2/ZepoAG6RGpeM=\ngithub.com/henrybear327/Proton-API-Bridge v1.0.0 h1:gjKAaWfKu++77WsZTHg6FUyPC5W0LTKWQciUm8PMZb0=\ngithub.com/henrybear327/Proton-API-Bridge v1.0.0/go.mod h1:gunH16hf6U74W2b9CGDaWRadiLICsoJ6KRkSt53zLts=\ngithub.com/henrybear327/go-proton-api v1.0.0 h1:zYi/IbjLwFAW7ltCeqXneUGJey0TN//Xo851a/BgLXw=\ngithub.com/henrybear327/go-proton-api v1.0.0/go.mod h1:w63MZuzufKcIZ93pwRgiOtxMXYafI8H74D77AxytOBc=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/jcmturner/aescts/v2 v2.0.0 h1:9YKLH6ey7H4eDBXW8khjYslgyqG2xZikXP0EQFKrle8=\ngithub.com/jcmturner/aescts/v2 v2.0.0/go.mod h1:AiaICIRyfYg35RUkr8yESTqvSy7csK90qZ5xfvvsoNs=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0 h1:lltnkeZGL0wILNvrNiVCR6Ro5PGU/SeBvVO/8c/iPbo=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0/go.mod h1:b0TnjGOvI/n42bZa+hmXL+kFJZsFT7G4t3HTlQ184QM=\ngithub.com/jcmturner/gofork v1.7.6 h1:QH0l3hzAU1tfT3rZCnW5zXl+orbkNMMRGJfdJjHVETg=\ngithub.com/jcmturner/gofork v1.7.6/go.mod h1:1622LH6i/EZqLloHfE7IeZ0uEJwMSUyQ/nDd82IeqRo=\ngithub.com/jcmturner/goidentity/v6 v6.0.1 h1:VKnZd2oEIMorCTsFBnJWbExfNN7yZr3EhJAxwOkZg6o=\ngithub.com/jcmturner/goidentity/v6 v6.0.1/go.mod h1:X1YW3bgtvwAXju7V3LCIMpY0Gbxyjn/mY9zx4tFonSg=\ngithub.com/jcmturner/gokrb5/v8 v8.4.4 h1:x1Sv4HaTpepFkXbt2IkL29DXRf8sOfZXo8eRKh687T8=\ngithub.com/jcmturner/gokrb5/v8 v8.4.4/go.mod h1:1btQEpgT6k+unzCwX1KdWMEwPPkkgBtP+F6aCACiMrs=\ngithub.com/jcmturner/rpc/v2 v2.0.3 h1:7FXXj8Ti1IaVFpSAziCZWNzbNuZmnvw/i6CqLNdWfZY=\ngithub.com/jcmturner/rpc/v2 v2.0.3/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=\ngithub.com/jlaffaye/ftp v0.0.0-20190624084859-c1312a7102bf/go.mod h1:lli8NYPQOFy3O++YmYbqVgOcQ1JPCwdOy+5zSjKJ9qY=\ngithub.com/jlaffaye/ftp v0.2.0 h1:lXNvW7cBu7R/68bknOX3MrRIIqZ61zELs1P2RAiA3lg=\ngithub.com/jlaffaye/ftp v0.2.0/go.mod h1:is2Ds5qkhceAPy2xD6RLI6hmp/qysSoymZ+Z2uTnspI=\ngithub.com/josephspurrier/goversioninfo v1.4.1 h1:5LvrkP+n0tg91J9yTkoVnt/QgNnrI1t4uSsWjIonrqY=\ngithub.com/josephspurrier/goversioninfo v1.4.1/go.mod h1:JWzv5rKQr+MmW+LvM412ToT/IkYDZjaclF2pKDss8IY=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=\ngithub.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=\ngithub.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/jtolio/noiseconn v0.0.0-20231127013910-f6d9ecbf1de7 h1:JcltaO1HXM5S2KYOYcKgAV7slU0xPy1OcvrVgn98sRQ=\ngithub.com/jtolio/noiseconn v0.0.0-20231127013910-f6d9ecbf1de7/go.mod h1:MEkhEPFwP3yudWO0lj6vfYpLIB+3eIcuIW+e0AZzUQk=\ngithub.com/jzelinskie/whirlpool v0.0.0-20201016144138-0675e54bb004 h1:G+9t9cEtnC9jFiTxyptEKuNIAbiN5ZCQzX2a74lj3xg=\ngithub.com/jzelinskie/whirlpool v0.0.0-20201016144138-0675e54bb004/go.mod h1:KmHnJWQrgEvbuy0vcvj00gtMqbvNn1L+3YUZLK/B92c=\ngithub.com/keybase/go-keychain v0.0.0-20231219164618-57a3676c3af6 h1:IsMZxCuZqKuao2vNdfD82fjjgPLfyHLpR41Z88viRWs=\ngithub.com/keybase/go-keychain v0.0.0-20231219164618-57a3676c3af6/go.mod h1:3VeWNIJaW+O5xpRQbPp0Ybqu1vJd/pm7s2F473HRrkw=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/klauspost/cpuid/v2 v2.0.1/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.0.12/go.mod h1:g2LTdtYhdyuGPqyWyv7qRAmj1WBqxuObKfj5c0PQa7c=\ngithub.com/klauspost/cpuid/v2 v2.2.8 h1:+StwCXwm9PdpiEkPyzBXIy+M9KUb4ODm0Zarf1kS5BM=\ngithub.com/klauspost/cpuid/v2 v2.2.8/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/koofr/go-httpclient v0.0.0-20240520111329-e20f8f203988 h1:CjEMN21Xkr9+zwPmZPaJJw+apzVbjGL5uK/6g9Q2jGU=\ngithub.com/koofr/go-httpclient v0.0.0-20240520111329-e20f8f203988/go.mod h1:/agobYum3uo/8V6yPVnq+R82pyVGCeuWW5arT4Txn8A=\ngithub.com/koofr/go-koofrclient v0.0.0-20221207135200-cbd7fc9ad6a6 h1:FHVoZMOVRA+6/y4yRlbiR3WvsrOcKBd/f64H7YiWR2U=\ngithub.com/koofr/go-koofrclient v0.0.0-20221207135200-cbd7fc9ad6a6/go.mod h1:MRAz4Gsxd+OzrZ0owwrUHc0zLESL+1Y5syqK/sJxK2A=\ngithub.com/kr/fs v0.1.0 h1:Jskdu9ieNAYnjxsi0LbQp1ulIKZV1LAFgK1tWhpZgl8=\ngithub.com/kr/fs v0.1.0/go.mod h1:FFnZGqtBN9Gxj7eW1uZ42v5BccTP0vu6NEaFoC2HwRg=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=\ngithub.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=\ngithub.com/lpar/date v1.0.0 h1:bq/zVqFTUmsxvd/CylidY4Udqpr9BOFrParoP6p0x/I=\ngithub.com/lpar/date v1.0.0/go.mod h1:KjYe0dDyMQTgpqcUz4LEIeM5VZwhggjVx/V2dtc8NSo=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/lufia/plan9stats v0.0.0-20231016141302-07b5767bb0ed h1:036IscGBfJsFIgJQzlui7nK1Ncm0tp2ktmPj8xO4N/0=\ngithub.com/lufia/plan9stats v0.0.0-20231016141302-07b5767bb0ed/go.mod h1:ilwx/Dta8jXAgpFYFvSWEMwxmbWXyiUHkd5FwyKhb5k=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=\ngithub.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/minio/md5-simd v1.1.2 h1:Gdi1DZK69+ZVMoNHRXJyNcxrMA4dSxoYHZSQbirFg34=\ngithub.com/minio/md5-simd v1.1.2/go.mod h1:MzdKDxYpY2BT9XQFocsiZf/NKVtR7nkE4RoEpN+20RM=\ngithub.com/minio/minio-go/v6 v6.0.46/go.mod h1:qD0lajrGW49lKZLtXKtCB4X/qkMf0a5tBvN2PaZg7Gg=\ngithub.com/minio/minio-go/v7 v7.0.74 h1:fTo/XlPBTSpo3BAMshlwKL5RspXRv9us5UeHEGYCFe0=\ngithub.com/minio/minio-go/v7 v7.0.74/go.mod h1:qydcVzV8Hqtj1VtEocfxbmVFa2siu6HGa+LDEPogjD8=\ngithub.com/minio/sha256-simd v0.1.1/go.mod h1:B5e1o+1/KgNmWrSQK08Y6Z1Vb5pwIktudl0J58iy0KM=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/moby/sys/mountinfo v0.7.2 h1:1shs6aH5s4o5H2zQLn796ADW1wMrIwHsyJ2v9KouLrg=\ngithub.com/moby/sys/mountinfo v0.7.2/go.mod h1:1YOa8w8Ih7uW0wALDUgT1dTTSBrZ+HiBLGws92L2RU4=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/ncw/swift/v2 v2.0.3 h1:8R9dmgFIWs+RiVlisCEfiQiik1hjuR0JnOkLxaP9ihg=\ngithub.com/ncw/swift/v2 v2.0.3/go.mod h1:cbAO76/ZwcFrFlHdXPjaqWZ9R7Hdar7HpjRXBfbjigk=\ngithub.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=\ngithub.com/nxadm/tail v1.4.8 h1:nPr65rt6Y5JFSKQO7qToXr7pePgD6Gwiw05lkbyAQTE=\ngithub.com/nxadm/tail v1.4.8/go.mod h1:+ncqLTQzXmGhMZNUePPaPqPvBxHAIsmXswZKocGu+AU=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.12.1/go.mod h1:zj2OWP4+oCPe1qIXoGWkgMRwljMUYCdkwsT2108oapk=\ngithub.com/onsi/ginkgo v1.16.5 h1:8xi0RTUf59SOSfEtZMvwTvXYMzG4gV23XVHOZiXNtnE=\ngithub.com/onsi/ginkgo v1.16.5/go.mod h1:+E8gABHa3K6zRBolWtd+ROzc/U5bkGt0FwiG042wbpU=\ngithub.com/onsi/ginkgo/v2 v2.17.3 h1:oJcvKpIb7/8uLpDDtnQuf18xVnwKp8DTD7DQ6gTd/MU=\ngithub.com/onsi/ginkgo/v2 v2.17.3/go.mod h1:nP2DPOQoNsQmsVyv5rDA8JkXQoCs6goXIvr/PRJ1eCc=\ngithub.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=\ngithub.com/onsi/gomega v1.10.1/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=\ngithub.com/onsi/gomega v1.34.1 h1:EUMJIKUjM8sKjYbtxQI9A4z2o+rruxnzNvpknOXie6k=\ngithub.com/onsi/gomega v1.34.1/go.mod h1:kU1QgUvBDLXBJq618Xvm2LUX6rSAfRaFRTcdOeDLwwY=\ngithub.com/oracle/oci-go-sdk/v65 v65.80.0 h1:Rr7QLMozd2DfDBKo6AB3DzLYQxAwuOG118+K5AAD5E8=\ngithub.com/oracle/oci-go-sdk/v65 v65.80.0/go.mod h1:IBEV9l1qBzUpo7zgGaRUhbB05BVfcDGYRFBCPlTcPp0=\ngithub.com/panjf2000/ants/v2 v2.9.1 h1:Q5vh5xohbsZXGcD6hhszzGqB7jSSc2/CRr3QKIga8Kw=\ngithub.com/panjf2000/ants/v2 v2.9.1/go.mod h1:7ZxyxsqE4vvW0M7LSD8aI3cKwgFhBHbxnlN8mDqHa1I=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=\ngithub.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=\ngithub.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=\ngithub.com/pengsrc/go-shared v0.2.1-0.20190131101655-1999055a4a14 h1:XeOYlK9W1uCmhjJSsY78Mcuh7MVkNjTzmHx1yBzizSU=\ngithub.com/pengsrc/go-shared v0.2.1-0.20190131101655-1999055a4a14/go.mod h1:jVblp62SafmidSkvWrXyxAme3gaTfEtWwRPGz5cpvHg=\ngithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c h1:+mdjkGKdHQG3305AYmdv1U2eRNDiU2ErMBj1gwrq8eQ=\ngithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c/go.mod h1:7rwL4CYBLnjLxUqIJNnCWiEdr3bn6IUYi15bNlnbCCU=\ngithub.com/pkg/diff v0.0.0-20200914180035-5b29258ca4f7/go.mod h1:zO8QMzTeZd5cpnIkz/Gn6iK0jDfGicM1nynOkkPIl28=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/sftp v1.13.7 h1:uv+I3nNJvlKZIQGSr8JVQLNHFU9YhhNpvC14Y6KgmSM=\ngithub.com/pkg/sftp v1.13.7/go.mod h1:KMKI0t3T6hfA+lTR/ssZdunHo+uwq7ghoN09/FSu3DY=\ngithub.com/pkg/xattr v0.4.10 h1:Qe0mtiNFHQZ296vRgUjRCoPHPqH7VdTOrZx3g0T+pGA=\ngithub.com/pkg/xattr v0.4.10/go.mod h1:di8WF84zAKk8jzR1UBTEWh9AUlIZZ7M/JNt8e9B6ktU=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/power-devops/perfstat v0.0.0-20221212215047-62379fc7944b h1:0LFwY6Q3gMACTjAbMZBjXAqTOzOwFaj2Ld6cjeQ7Rig=\ngithub.com/power-devops/perfstat v0.0.0-20221212215047-62379fc7944b/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=\ngithub.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.55.0 h1:KEi6DK7lXW/m7Ig5i47x0vRzuBsHuvJdi5ee6Y3G1dc=\ngithub.com/prometheus/common v0.55.0/go.mod h1:2SECS4xJG1kd8XF9IcM1gMX6510RAEL65zxzNImwdc8=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/putdotio/go-putio/putio v0.0.0-20200123120452-16d982cac2b8 h1:Y258uzXU/potCYnQd1r6wlAnoMB68BiCkCcCnKx1SH8=\ngithub.com/putdotio/go-putio/putio v0.0.0-20200123120452-16d982cac2b8/go.mod h1:bSJjRokAHHOhA+XFxplld8w2R/dXLH7Z3BZ532vhFwU=\ngithub.com/quasilyte/go-ruleguard/dsl v0.3.22 h1:wd8zkOhSNr+I+8Qeciml08ivDt1pSXe60+5DqOpCjPE=\ngithub.com/quasilyte/go-ruleguard/dsl v0.3.22/go.mod h1:KeCP03KrjuSO0H1kTuZQCWlQPulDV6YMIXmpQss17rU=\ngithub.com/quic-go/qtls-go1-20 v0.4.1 h1:D33340mCNDAIKBqXuAvexTNMUByrYmFYVfKfDN5nfFs=\ngithub.com/quic-go/qtls-go1-20 v0.4.1/go.mod h1:X9Nh97ZL80Z+bX/gUXMbipO6OxdiDi58b/fMC9mAL+k=\ngithub.com/quic-go/quic-go v0.40.1 h1:X3AGzUNFs0jVuO3esAGnTfvdgvL4fq655WaOi1snv1Q=\ngithub.com/quic-go/quic-go v0.40.1/go.mod h1:PeN7kuVJ4xZbxSv/4OX6S1USOX8MJvydwpTx31vx60c=\ngithub.com/rasky/go-xdr v0.0.0-20170124162913-1a41d1a06c93 h1:UVArwN/wkKjMVhh2EQGC0tEc1+FqiLlvYXY5mQ2f8Wg=\ngithub.com/rasky/go-xdr v0.0.0-20170124162913-1a41d1a06c93/go.mod h1:Nfe4efndBz4TibWycNE+lqyJZiMX4ycx+QKV8Ta0f/o=\ngithub.com/rclone/gofakes3 v0.0.3 h1:0sKCxJ8TUUAG5KXGuc/fcDKGnzB/j6IjNQui9ntIZPo=\ngithub.com/rclone/gofakes3 v0.0.3/go.mod h1:z7+o2VUwitO0WuVHReQlOW9jZ03LpeJ0PUFSULyTIds=\ngithub.com/redis/go-redis/v9 v9.6.1 h1:HHDteefn6ZkTtY5fGUE8tj8uy85AHk6zP7CpzIAM0y4=\ngithub.com/redis/go-redis/v9 v9.6.1/go.mod h1:0C0c6ycQsdpVNQpxb1njEQIqkx5UcsM8FJCQLgE9+RA=\ngithub.com/relvacode/iso8601 v1.3.0 h1:HguUjsGpIMh/zsTczGN3DVJFxTU/GX+MMmzcKoMO7ko=\ngithub.com/relvacode/iso8601 v1.3.0/go.mod h1:FlNp+jz+TXpyRqgmM7tnzHHzBnz776kmAH2h3sZCn0I=\ngithub.com/rfjakob/eme v1.1.2 h1:SxziR8msSOElPayZNFfQw4Tjx/Sbaeeh3eRvrHVMUs4=\ngithub.com/rfjakob/eme v1.1.2/go.mod h1:cVvpasglm/G3ngEfcfT/Wt0GwhkuO32pf/poW6Nyk1k=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.3/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/rs/xid v1.5.0 h1:mKX4bl4iPYJtEIxp6CYiUuLQ/8DYMoz0PUdtGgMFRVc=\ngithub.com/rs/xid v1.5.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/ryszard/goskiplist v0.0.0-20150312221310-2dfbae5fcf46 h1:GHRpF1pTW19a8tTFrMLUcfWwyC0pnifVo2ClaLq+hP8=\ngithub.com/ryszard/goskiplist v0.0.0-20150312221310-2dfbae5fcf46/go.mod h1:uAQ5PCi+MFsC7HjREoAz1BU+Mq60+05gifQSsHSDG/8=\ngithub.com/sabhiram/go-gitignore v0.0.0-20210923224102-525f6e181f06 h1:OkMGxebDjyw0ULyrTYWeN0UNCCkmCWfjPnIA2W6oviI=\ngithub.com/sabhiram/go-gitignore v0.0.0-20210923224102-525f6e181f06/go.mod h1:+ePHsJ1keEjQtpvf9HHw0f4ZeJ0TLRsxhunSI2hYJSs=\ngithub.com/samber/lo v1.47.0 h1:z7RynLwP5nbyRscyvcD043DWYoOcYRv3mV8lBeqOCLc=\ngithub.com/samber/lo v1.47.0/go.mod h1:RmDH9Ct32Qy3gduHQuKJ3gW1fMHAnE/fAzQuf6He5cU=\ngithub.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=\ngithub.com/shabbyrobe/gocovmerge v0.0.0-20230507112040-c3350d9342df h1:S77Pf5fIGMa7oSwp8SQPp7Hb4ZiI38K3RNBKD2LLeEM=\ngithub.com/shabbyrobe/gocovmerge v0.0.0-20230507112040-c3350d9342df/go.mod h1:dcuzJZ83w/SqN9k4eQqwKYMgmKWzg/KzJAURBhRL1tc=\ngithub.com/shirou/gopsutil/v4 v4.24.12 h1:qvePBOk20e0IKA1QXrIIU+jmk+zEiYVVx06WjBRlZo4=\ngithub.com/shirou/gopsutil/v4 v4.24.12/go.mod h1:DCtMPAad2XceTeIAbGyVfycbYQNBGk2P8cvDi7/VN9o=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/skratchdot/open-golang v0.0.0-20200116055534-eef842397966 h1:JIAuq3EEf9cgbU6AtGPK4CTG3Zf6CKMNqf0MHTggAUA=\ngithub.com/skratchdot/open-golang v0.0.0-20200116055534-eef842397966/go.mod h1:sUM3LWHvSMaG192sy56D9F7CNvL7jUJVXoqM1QKLnog=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d h1:zE9ykElWQ6/NYmHa3jpm/yHnI4xSofP+UP6SpjHcSeM=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/goconvey v0.0.0-20190330032615-68dc04aab96a h1:pa8hGb/2YqsZKovtsgrwcDH1RZhVbTKCjLp47XpqCDs=\ngithub.com/smartystreets/goconvey v0.0.0-20190330032615-68dc04aab96a/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/snabb/httpreaderat v1.0.1 h1:whlb+vuZmyjqVop8x1EKOg05l2NE4z9lsMMXjmSUCnY=\ngithub.com/snabb/httpreaderat v1.0.1/go.mod h1:lpbGrKDWF37yvRbtRvQsbesS6Ty5c83t8ztannPoMsA=\ngithub.com/sony/gobreaker v0.5.0 h1:dRCvqm0P490vZPmy7ppEk2qCnCieBooFJ+YoXGYB+yg=\ngithub.com/sony/gobreaker v0.5.0/go.mod h1:ZKptC7FHNvhBz7dN2LGjPVBz2sZJmc0/PkyDJOjmxWY=\ngithub.com/spacemonkeygo/monkit/v3 v3.0.22 h1:4/g8IVItBDKLdVnqrdHZrCVPpIrwDBzl1jrV0IHQHDU=\ngithub.com/spacemonkeygo/monkit/v3 v3.0.22/go.mod h1:XkZYGzknZwkD0AKUnZaSXhRiVTLCkq7CWVa3IsE72gA=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2 h1:xuMeJ0Sdp5ZMRXx/aWO6RZxdr3beISkG5/G/aIRr3pY=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.3.1-0.20190311161405-34c6fa2dc709/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/t3rm1n4l/go-mega v0.0.0-20241213150454-ec0027fb0002 h1:jevGbwKzMmHLgHAaDaMJLQX3jpXUWjUvnsrPeMgkM7o=\ngithub.com/t3rm1n4l/go-mega v0.0.0-20241213150454-ec0027fb0002/go.mod h1:0Mv/XWQoRWF7d7jkc4DufsAJQg8xyZ5NtCkY59wECQY=\ngithub.com/tailscale/depaware v0.0.0-20210622194025-720c4b409502/go.mod h1:p9lPsd+cx33L3H9nNoecRRxPssFKUwwI50I3pZ0yT+8=\ngithub.com/tklauser/go-sysconf v0.3.13 h1:GBUpcahXSpR2xN01jhkNAbTLRk2Yzgggk8IM08lq3r4=\ngithub.com/tklauser/go-sysconf v0.3.13/go.mod h1:zwleP4Q4OehZHGn4CYZDipCgg9usW5IJePewFCGVEa0=\ngithub.com/tklauser/numcpus v0.7.0 h1:yjuerZP127QG9m5Zh/mSO4wqurYil27tHrqwRoRjpr4=\ngithub.com/tklauser/numcpus v0.7.0/go.mod h1:bb6dMVcj8A42tSE7i32fsIUCbQNllK5iDguyOZRUzAY=\ngithub.com/tv42/httpunix v0.0.0-20191220191345-2ba4b9c3382c h1:u6SKchux2yDvFQnDHS3lPnIRmfVJ5Sxy3ao2SIdysLQ=\ngithub.com/tv42/httpunix v0.0.0-20191220191345-2ba4b9c3382c/go.mod h1:hzIxponao9Kjc7aWznkXaL4U4TWaDSs8zcsY4Ka08nM=\ngithub.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=\ngithub.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=\ngithub.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=\ngithub.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=\ngithub.com/unknwon/goconfig v1.0.0 h1:rS7O+CmUdli1T+oDm7fYj1MwqNWtEJfNj+FqcUHML8U=\ngithub.com/unknwon/goconfig v1.0.0/go.mod h1:qu2ZQ/wcC/if2u32263HTVC39PeOQRSmidQk3DuDFQ8=\ngithub.com/willscott/go-nfs v0.0.3-0.20240425122109-91bc38957cc9 h1:IGSoH2aBagQ9VI8ZwbjHYIslta5vXfczegV1B4y9KqY=\ngithub.com/willscott/go-nfs v0.0.3-0.20240425122109-91bc38957cc9/go.mod h1:Ql2ebUpEFm/a1CAY884di2XZkdcddfHZ6ONrAlhFev0=\ngithub.com/willscott/go-nfs-client v0.0.0-20240104095149-b44639837b00 h1:U0DnHRZFzoIV1oFEZczg5XyPut9yxk9jjtax/9Bxr/o=\ngithub.com/willscott/go-nfs-client v0.0.0-20240104095149-b44639837b00/go.mod h1:Tq++Lr/FgiS3X48q5FETemXiSLGuYMQT2sPjYNPJSwA=\ngithub.com/winfsp/cgofuse v1.5.1-0.20221118130120-84c0898ad2e0 h1:j3un8DqYvvAOqKI5OPz+/RRVhDFipbPKI4t2Uk5RBJw=\ngithub.com/winfsp/cgofuse v1.5.1-0.20221118130120-84c0898ad2e0/go.mod h1:uxjoF2jEYT3+x+vC2KJddEGdk/LU8pRowXmyVMHSV5I=\ngithub.com/xanzy/ssh-agent v0.3.3 h1:+/15pJfg/RsTxqYcX6fHqOXZwwMP+2VyYWJeWM2qQFM=\ngithub.com/xanzy/ssh-agent v0.3.3/go.mod h1:6dzNDKs0J9rVPHPhaGCukekBHKqfl+L3KghI1Bc68Uw=\ngithub.com/youmark/pkcs8 v0.0.0-20240726163527-a2c0da244d78 h1:ilQV1hzziu+LLM3zUTJ0trRztfwgjqKnBWNtSRkbmwM=\ngithub.com/youmark/pkcs8 v0.0.0-20240726163527-a2c0da244d78/go.mod h1:aL8wCCfTfSfmXjznFBSZNN13rSJjlIOI1fUNAtF7rmI=\ngithub.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/yunify/qingstor-sdk-go/v3 v3.2.0 h1:9sB2WZMgjwSUNZhrgvaNGazVltoFUUfuS9f0uCWtTr8=\ngithub.com/yunify/qingstor-sdk-go/v3 v3.2.0/go.mod h1:KciFNuMu6F4WLk9nGwwK69sCGKLCdd9f97ac/wfumS4=\ngithub.com/yusufpapurcu/wmi v1.2.4 h1:zFUKzehAFReQwLys1b/iSMl+JQGSCSjtVqQn9bBrPo0=\ngithub.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=\ngithub.com/zeebo/assert v1.1.0/go.mod h1:Pq9JiuJQpG8JLJdtkwrJESF0Foym2/D9XMU5ciN/wJ0=\ngithub.com/zeebo/assert v1.3.1 h1:vukIABvugfNMZMQO1ABsyQDJDTVQbn+LWSMy1ol1h6A=\ngithub.com/zeebo/assert v1.3.1/go.mod h1:Pq9JiuJQpG8JLJdtkwrJESF0Foym2/D9XMU5ciN/wJ0=\ngithub.com/zeebo/blake3 v0.2.3 h1:TFoLXsjeXqRNFxSbk35Dk4YtszE/MQQGK10BH4ptoTg=\ngithub.com/zeebo/blake3 v0.2.3/go.mod h1:mjJjZpnsyIVtVgTOSpJ9vmRE4wgDeyt2HU3qXvvKCaQ=\ngithub.com/zeebo/errs v1.3.0 h1:hmiaKqgYZzcVgRL1Vkc1Mn2914BbzB0IBxs+ebeutGs=\ngithub.com/zeebo/errs v1.3.0/go.mod h1:sgbWHsvVuTPHcqJJGQ1WhI5KbWlHYz+2+2C/LSEtCw4=\ngithub.com/zeebo/pcg v1.0.1 h1:lyqfGeWiv4ahac6ttHs+I5hwtH/+1mrhlCtVNQM2kHo=\ngithub.com/zeebo/pcg v1.0.1/go.mod h1:09F0S9iiKrwn9rlI5yjLkmrug154/YRW6KnnXVDM/l4=\ngo.etcd.io/bbolt v1.3.10 h1:+BqfJTcCzTItrop8mq/lbzL8wSGtj94UO/3U31shqG0=\ngo.etcd.io/bbolt v1.3.10/go.mod h1:bK3UQLPJZly7IlNmV7uVHJDxfe5aK9Ll93e/74Y9oEQ=\ngo.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=\ngo.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=\ngo.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.4/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 h1:TT4fX+nBOA/+LUkobKGW1ydGcn+G3vRw9+g5HwCphpk=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0/go.mod h1:L7UH0GbB0p47T4Rri3uHjbpCFYrVrwc1I25QhNPiGK8=\ngo.opentelemetry.io/otel v1.29.0 h1:PdomN/Al4q/lN6iBJEN3AwPvUiHPMlt93c8bqTG5Llw=\ngo.opentelemetry.io/otel v1.29.0/go.mod h1:N/WtXPs1CNCUEx+Agz5uouwCba+i+bJGFicT8SR4NP8=\ngo.opentelemetry.io/otel/metric v1.29.0 h1:vPf/HFWTNkPu1aYeIsc98l4ktOQaL6LeSoeV2g+8YLc=\ngo.opentelemetry.io/otel/metric v1.29.0/go.mod h1:auu/QWieFVWx+DmQOUMgj0F8LHWdgalxXqvp7BII/W8=\ngo.opentelemetry.io/otel/trace v1.29.0 h1:J/8ZNK4XgR7a21DZUAsbF8pZ5Jcw1VhACmnYt39JTi4=\ngo.opentelemetry.io/otel/trace v1.29.0/go.mod h1:eHl3w0sp3paPkYstJOmAimxhiFXPg+MMTlEh3nsQgWQ=\ngo.uber.org/goleak v1.2.1 h1:NBol2c7O1ZokfZ0LEU9K6Whx/KnwvepVetCUhtKja4A=\ngo.uber.org/goleak v1.2.1/go.mod h1:qlT2yGI9QafXHhZZLxlSuNsMw3FFLxBr+tBRlmO1xH4=\ngo.uber.org/mock v0.3.0 h1:3mUxI1No2/60yUYax92Pt8eNOEecx2D3lcXZh2NEZJo=\ngo.uber.org/mock v0.3.0/go.mod h1:a6FSlNadKUHUa9IP5Vyt1zh4fC7uAwxMutEAscFbkZc=\ngoftp.io/server/v2 v2.0.1 h1:H+9UbCX2N206ePDSVNCjBftOKOgil6kQ5RAQNx5hJwE=\ngoftp.io/server/v2 v2.0.1/go.mod h1:7+H/EIq7tXdfo1Muu5p+l3oQ6rYkDZ8lY7IM5d5kVdQ=\ngolang.org/x/arch v0.8.0 h1:3wRIsP3pM4yUptoR96otTUOXI367OS0+c9eeRi9doIc=\ngolang.org/x/arch v0.8.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190513172903-22d7a77e9e5f/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20210322153248-0c34fe9e7dc2/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20220622213112-05595931fe9d/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.3.1-0.20221117191849-2c476679df9a/go.mod h1:hebNnKkNXi2UzZN1eVRvBB7co0a+JxK6XbPiWVs/3J4=\ngolang.org/x/crypto v0.6.0/go.mod h1:OFC/31mSvZgRz0V1QTNCzfAI1aIRzbiufJtkMIlEp58=\ngolang.org/x/crypto v0.7.0/go.mod h1:pYwdfH91IfpZVANVyUOhSIPZaFoJGxTFbZhFTx+dXZU=\ngolang.org/x/crypto v0.14.0/go.mod h1:MVFd36DqK4CsrnJYDkBA3VC4m2GkXAM0PvzMCn4JQf4=\ngolang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=\ngolang.org/x/exp v0.0.0-20190829153037-c13cbed26979/go.mod h1:86+5VVa7VpoJ4kLfm080zCjGlMRFzhUhsZKEZO7MGek=\ngolang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136/go.mod h1:JXzH8nQsPlswgeRAPE3MuO9GYsAcnJvJ4vnMwN/5qkY=\ngolang.org/x/exp v0.0.0-20191129062945-2f5052295587/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20191227195350-da58074b4299/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=\ngolang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=\ngolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=\ngolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=\ngolang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=\ngolang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190909230951-414d861bb4ac/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20191125180803-fdd1cda4f05f/go.mod h1:5qLYkcX4OjUUV8bRuDixDT3tpyyb+LUpUlRWLxfhWrs=\ngolang.org/x/lint v0.0.0-20200130185559-910be7a94367/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=\ngolang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=\ngolang.org/x/mobile v0.0.0-20240716161057-1ad2df20a8b6 h1:/VlmIrkuLf2wzPjkZ8imSpckHoW7Y71h66dxbLHSpi8=\ngolang.org/x/mobile v0.0.0-20240716161057-1ad2df20a8b6/go.mod h1:TCsc78+c4cqb8IKEosz2LwJ6YRNkIjMuAYeHYjchGDE=\ngolang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=\ngolang.org/x/mod v0.1.0/go.mod h1:0QHyrYULN0/3qlju5TqG8bIK38QM8yzMo5ekMj3DlcY=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.1.1-0.20191107180719-034126e5016b/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.19.0 h1:fEdghXQSo20giMthA7cd28ZC+jts4amQ3YMXiP5oMQ8=\ngolang.org/x/mod v0.19.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190628185345-da137c7871d7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200222125558-5a598a2470a0/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200301022130-244492dfa37a/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200501053045-e0ff5e5a1de5/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200506145744-7e3656a0809f/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200513185701-a91f0712d120/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210916014120-12bc252f5db8/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.2.0/go.mod h1:KqCZLdyyvdV855qA2rE3GC2aiw5xGR5TEjj8smXukLY=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.7.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.8.0/go.mod h1:QVkue5JL9kW//ek3r6jTKnTFis1tRmNAW2P1shuFdJc=\ngolang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20191202225959-858c2ad4c8b6/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20201208152858-08078c50e5b5/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191228213918-04cbcbbfeed8/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200212091648-12a6c2dcc1e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200302150141-5c8b2ff67527/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200331124033-c3d80250170d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200501052902-10377860bb8e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200511232937-7e40ca221e25/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200515095857-1151b9dac4a9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200803210538-64077c9b5642/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210112080510-489259a85091/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210514084401-e8d321eab015/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211007075335-d3039528d8ac/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220408201424-a24fb2fb8a0f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.3.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.13.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.2.0/go.mod h1:TVmDHMZPmdnySmBfhjOoOdhjzdE1h4u1VwSiw2l1Nuc=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.6.0/go.mod h1:m6U89DPEgQRMq3DNkDClhWw02AUbt2daBVO4cn4Hv9U=\ngolang.org/x/term v0.7.0/go.mod h1:P32HKFT3hSsZrRxla30E9HqToFYAQPCMs/zFMBUFqPY=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.13.0/go.mod h1:LTmsnFJwVN6bCy1rVCoS+qHT1HhALEFxKncY3WNNh4U=\ngolang.org/x/term v0.15.0/go.mod h1:BDl952bC7+uMoWR75FIrCDx79TPU9oHkTZ9yRbYOrX0=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.8.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.3.0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.8.0 h1:9i3RxcPv3PZnitoVGMPDKZSq1xW1gK1Xy3ArNOGZfEg=\ngolang.org/x/time v0.8.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190506145303-2d16b83fe98c/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190606124116-d0a3d012864b/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190829051458-42f498d34c4d/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191113191852-77e3bb0ad9e7/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191115202509-3a792d9c32b2/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191125144606-a911d9008d1f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191130070609-6e064ea0cf2d/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191216173652-a0e659d51361/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20191227053925-7b8e75db28f4/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200117161641-43d50277825c/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200122220014-bf1340f18c4a/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200204074204-1cc6d1ef6c74/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200207183749-b753a1ba74fa/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200212150539-ea181f53ac56/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200224181240-023911ca70b2/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200227222343-706bc42d1f0d/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200304193943-95d2e580d8eb/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=\ngolang.org/x/tools v0.0.0-20200312045724-11d5b4c81c7d/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=\ngolang.org/x/tools v0.0.0-20200331025713-a30bf2db82d4/go.mod h1:Sl4aGygMT6LrqrWclx+PTx3U+LnKx/seiNR+3G19Ar8=\ngolang.org/x/tools v0.0.0-20200501065659-ab2804fb9c9d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200512131952-2bc93b1c0c88/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200515010526-7d3b6ebf133d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200618134242-20370b0cb4b2/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200729194436-6467de6f59a7/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200804011535-6c149bb5ef0d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200825202427-b303f430e36d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20201211185031-d93e913c1a58/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201224043029-2b0845dc783e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.23.0 h1:SGsXPZ+2l4JsgaCKkx+FQ9YZ5XEtA1GZYuoDjenLjvg=\ngolang.org/x/tools v0.23.0/go.mod h1:pnu6ufv6vQkll6szChhK3C3L/ruaIv5eBeztNG8wtsI=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=\ngoogle.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=\ngoogle.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.9.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.13.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.14.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.15.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.17.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.18.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.19.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.20.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.22.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.24.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.28.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.29.0/go.mod h1:Lcubydp8VUV7KeIHD9z2Bys/sm/vGKnG1UHuDBSrHWM=\ngoogle.golang.org/api v0.30.0/go.mod h1:QGmEvQ87FHZNiUVJkT14jQNYJ4ZJjdRF23ZXz5138Fc=\ngoogle.golang.org/api v0.211.0 h1:IUpLjq09jxBSV1lACO33CGY3jsRcbctfGzhj+ZSE/Bg=\ngoogle.golang.org/api v0.211.0/go.mod h1:XOloB4MXFH4UTlQSGuNUxw0UT74qdENK8d6JNsXKLi0=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=\ngoogle.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/appengine v1.6.6/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190801165951-fa694d86fc64/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190911173649-1774047e7e51/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=\ngoogle.golang.org/genproto v0.0.0-20191108220845-16a3f7862a1a/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191115194625-c23dd37a84c9/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191216164720-4f79533eabd1/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191230161307-f3c370f40bfb/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200115191322-ca5a22157cba/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200122232147-0452cf42e150/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200204135345-fa8e72b47b90/go.mod h1:GmwEX6Z4W5gMy59cAlVYjN9JhxgbQH6Gn+gFDQe2lzA=\ngoogle.golang.org/genproto v0.0.0-20200212174721-66ed5ce911ce/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200224152610-e50cd9704f63/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200228133532-8c2c7df3a383/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200305110556-506484158171/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200312145019-da6875a35672/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200331122359-1ee6d9798940/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200430143042-b979b6f78d84/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200511104702-f5ebc3bea380/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200515170657-fc4c6c6a6587/go.mod h1:YsZOwe1myG/8QRHRsmBRE1LrgQY60beZKjly0O1fX9U=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/genproto v0.0.0-20200618031413-b414f8b61790/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=\ngoogle.golang.org/genproto v0.0.0-20200729003335-053ba62fc06f/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200804131852-c06518451d9c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200825200019-8632dd797987/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20240205150955-31a09d347014 h1:g/4bk7P6TPMkAUbUhquq98xey1slwvuVJPosdBqYJlU=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241118233622-e639e219e697 h1:pgr/4QbFyktUv9CtQ/Fq4gzEE6/Xs7iCXbktaGzLHbQ=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241118233622-e639e219e697/go.mod h1:+D9ySVjN8nY8YCVjc5O7PZDIdZporIDY3KaGfJunh88=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241206012308-a4fef0638583 h1:IfdSdTcLFy4lqUQrQJLkLt1PB+AsqVz6lwkWPzWEz10=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241206012308-a4fef0638583/go.mod h1:5uTbfoYQed2U9p3KIj2/Zzm02PYhndfdmML0qC3q3FU=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.28.0/go.mod h1:rpkK4SK4GF4Ach/+MFLZUBavHOvF2JJB5uozKKal+60=\ngoogle.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=\ngoogle.golang.org/grpc v1.30.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.31.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.67.1 h1:zWnc1Vrcno+lHZCOofnIMvycFcc0QRGIzm9dhnDX68E=\ngoogle.golang.org/grpc v1.67.1/go.mod h1:1gLDyUQU7CTLJI90u3nXZ9ekeghjeM7pTDZlqFNg2AA=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.35.2 h1:8Ar7bF+apOIoThw1EdZl0p1oWvMqTHmpA2fRTyZO8io=\ngoogle.golang.org/protobuf v1.35.2/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/ini.v1 v1.42.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/validator.v2 v2.0.1 h1:xF0KWyGWXm/LM2G1TrEjqOu4pa6coO9AlWSf3msVfDY=\ngopkg.in/validator.v2 v2.0.1/go.mod h1:lIUZBlB3Im4s/eYp39Ry/wkR02yOPhZ9IwIRBjuPuG8=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=\nhonnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nhonnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nmoul.io/http2curl/v2 v2.3.0 h1:9r3JfDzWPcbIklMOs2TnIFzDYvfAZvjeavG6EzP7jYs=\nmoul.io/http2curl/v2 v2.3.0/go.mod h1:RW4hyBjTWSYDOxapodpNEtX0g5Eb16sxklBqmd2RHcE=\nrsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=\nrsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nstorj.io/common v0.0.0-20240812101423-26b53789c348 h1:Urs3fX+1Fyb+CFKGw0mCJV3MPR499WM+Vs6osw4Rqtk=\nstorj.io/common v0.0.0-20240812101423-26b53789c348/go.mod h1:XMpwKxc04HCBl4H5IFCGv1ca5Dm0tvH4NL7Jx+JhxuA=\nstorj.io/drpc v0.0.35-0.20240709171858-0075ac871661 h1:hLvEV2RMTscX3JHPd+LSQCeTt8i1Q0Yt7U2EdfyMnaQ=\nstorj.io/drpc v0.0.35-0.20240709171858-0075ac871661/go.mod h1:Y9LZaa8esL1PW2IDMqJE7CFSNq7d5bQ3RI7mGPtmKMg=\nstorj.io/eventkit v0.0.0-20240415002644-1d9596fee086 h1:TkytkGUI6zGtH5Qx/O0VxQCcYJqOOiwRq0oMi4uM5Tg=\nstorj.io/eventkit v0.0.0-20240415002644-1d9596fee086/go.mod h1:S6p41RzIBKoeGAdrziksWkiijnZXql9YcNsc23t0u+8=\nstorj.io/infectious v0.0.2 h1:rGIdDC/6gNYAStsxsZU79D/MqFjNyJc1tsyyj9sTl7Q=\nstorj.io/infectious v0.0.2/go.mod h1:QEjKKww28Sjl1x8iDsjBpOM4r1Yp8RsowNcItsZJ1Vs=\nstorj.io/picobuf v0.0.3 h1:xAUPB5ZUGfxkqd3bnw3zp01kkWb9wlhg4vtZWUs2S9A=\nstorj.io/picobuf v0.0.3/go.mod h1:4V4xelV1RSCck5GgmkL/Txw9l6IfX3XcBzegmL5Kudo=\nstorj.io/uplink v1.13.1 h1:C8RdW/upALoCyuF16Lod9XGCXEdbJAS+ABQy9JO/0pA=\nstorj.io/uplink v1.13.1/go.mod h1:x0MQr4UfFsQBwgVWZAtEsLpuwAn6dg7G0Mpne1r516E=\n"
        },
        {
          "name": "graphics",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "librclone",
          "type": "tree",
          "content": null
        },
        {
          "name": "notes.txt",
          "type": "blob",
          "size": 1.4619140625,
          "content": "Change lsd command so it doesn't show -1\n  * Make sure all Fses show -1 for objects Zero for dates, etc.\n  * Make test?\n\nPut the TestRemote names into the Fs description\nMake fs/test_all.go use the TestRemote name automatically\n\nGet rid of Storable?\n\nTodo\n  * FIXME: More -dry-run checks for object transfer\n  * Might be quicker to check md5sums first? for swift <-> swift certainly, and maybe for small files\n  * FIXME Make NewFs to return err.IsAnObject so can put the LimitedFs\n    creation in common code? Or try for as much as possible?\n  * FIXME Account all the transactions (ls, etc.) using a different\n    Roundtripper wrapper which wraps the transactions?\n\nIdeas\n  * could do encryption - put IV into metadata?\n  * optimise remote copy container to another container using remote\n    copy if local is same as remote - use an optional Copier interface\n  * support\n      * sftp\n      * scp\n      * rsync over ssh\n  * control times sync (which is slow with some remotes) with -a --archive flag?\n  * Copy a glob pattern - could do with LimitedFs\n\nMake an encryption layer.\n\nThis would layer over the source FS to\n    * decrypt all gets\n    * encrypt all puts\n    * encrypt file names in list\n    * decrypt them in list\n\nWould like to be able to see unencrypted file names in remote though? How?  Or is that two encryption layers..?\n\nBugs\n  * Non verbose - not sure number transferred got counted up? CHECK\n  * When doing copy it recurses the whole of the destination FS which isn't necessary\n"
        },
        {
          "name": "rclone.1",
          "type": "blob",
          "size": 2522.283203125,
          "content": ".\\\"t\n.\\\" Automatically generated by Pandoc 2.9.2.1\n.\\\"\n.TH \"rclone\" \"1\" \"Sep 08, 2024\" \"User Manual\" \"\"\n.hy\n.SH Rclone syncs your files to cloud storage\n.PP\n.IP \\[bu] 2\nAbout rclone\n.IP \\[bu] 2\nWhat can rclone do for you?\n.IP \\[bu] 2\nWhat features does rclone have?\n.IP \\[bu] 2\nWhat providers does rclone support?\n.IP \\[bu] 2\nDownload (https://rclone.org/downloads/)\n.IP \\[bu] 2\nInstall (https://rclone.org/install/)\n.IP \\[bu] 2\nDonate. (https://rclone.org/donate/)\n.SS About rclone\n.PP\nRclone is a command-line program to manage files on cloud storage.\nIt is a feature-rich alternative to cloud vendors\\[aq] web storage\ninterfaces.\nOver 70 cloud storage products support rclone including S3 object\nstores, business & consumer file storage services, as well as standard\ntransfer protocols.\n.PP\nRclone has powerful cloud equivalents to the unix commands rsync, cp,\nmv, mount, ls, ncdu, tree, rm, and cat.\nRclone\\[aq]s familiar syntax includes shell pipeline support, and\n\\f[C]--dry-run\\f[R] protection.\nIt is used at the command line, in scripts or via its API.\n.PP\nUsers call rclone \\f[I]\\[dq]The Swiss army knife of cloud\nstorage\\[dq]\\f[R], and \\f[I]\\[dq]Technology indistinguishable from\nmagic\\[dq]\\f[R].\n.PP\nRclone really looks after your data.\nIt preserves timestamps and verifies checksums at all times.\nTransfers over limited bandwidth; intermittent connections, or subject\nto quota can be restarted, from the last good file transferred.\nYou can check (https://rclone.org/commands/rclone_check/) the integrity\nof your files.\nWhere possible, rclone employs server-side transfers to minimise local\nbandwidth use and transfers from one provider to another without using\nlocal disk.\n.PP\nVirtual backends wrap local and cloud file systems to apply\nencryption (https://rclone.org/crypt/),\ncompression (https://rclone.org/compress/),\nchunking (https://rclone.org/chunker/),\nhashing (https://rclone.org/hasher/) and\njoining (https://rclone.org/union/).\n.PP\nRclone mounts (https://rclone.org/commands/rclone_mount/) any local,\ncloud or virtual filesystem as a disk on Windows, macOS, linux and\nFreeBSD, and also serves these over\nSFTP (https://rclone.org/commands/rclone_serve_sftp/),\nHTTP (https://rclone.org/commands/rclone_serve_http/),\nWebDAV (https://rclone.org/commands/rclone_serve_webdav/),\nFTP (https://rclone.org/commands/rclone_serve_ftp/) and\nDLNA (https://rclone.org/commands/rclone_serve_dlna/).\n.PP\nRclone is mature, open-source software originally inspired by rsync and\nwritten in Go (https://golang.org).\nThe friendly support community is familiar with varied use cases.\nOfficial Ubuntu, Debian, Fedora, Brew and Chocolatey repos.\ninclude rclone.\nFor the latest version downloading from\nrclone.org (https://rclone.org/downloads/) is recommended.\n.PP\nRclone is widely used on Linux, Windows and Mac.\nThird-party developers create innovative backup, restore, GUI and\nbusiness process solutions using the rclone command line or API.\n.PP\nRclone does the heavy lifting of communicating with cloud storage.\n.SS What can rclone do for you?\n.PP\nRclone helps you:\n.IP \\[bu] 2\nBackup (and encrypt) files to cloud storage\n.IP \\[bu] 2\nRestore (and decrypt) files from cloud storage\n.IP \\[bu] 2\nMirror cloud data to other cloud services or locally\n.IP \\[bu] 2\nMigrate data to the cloud, or between cloud storage vendors\n.IP \\[bu] 2\nMount multiple, encrypted, cached or diverse cloud storage as a disk\n.IP \\[bu] 2\nAnalyse and account for data held on cloud storage using\nlsf (https://rclone.org/commands/rclone_lsf/),\nljson (https://rclone.org/commands/rclone_lsjson/),\nsize (https://rclone.org/commands/rclone_size/),\nncdu (https://rclone.org/commands/rclone_ncdu/)\n.IP \\[bu] 2\nUnion (https://rclone.org/union/) file systems together to present\nmultiple local and/or cloud file systems as one\n.SS Features\n.IP \\[bu] 2\nTransfers\n.RS 2\n.IP \\[bu] 2\nMD5, SHA1 hashes are checked at all times for file integrity\n.IP \\[bu] 2\nTimestamps are preserved on files\n.IP \\[bu] 2\nOperations can be restarted at any time\n.IP \\[bu] 2\nCan be to and from network, e.g.\ntwo different cloud providers\n.IP \\[bu] 2\nCan use multi-threaded downloads to local disk\n.RE\n.IP \\[bu] 2\nCopy (https://rclone.org/commands/rclone_copy/) new or changed files to\ncloud storage\n.IP \\[bu] 2\nSync (https://rclone.org/commands/rclone_sync/) (one way) to make a\ndirectory identical\n.IP \\[bu] 2\nBisync (https://rclone.org/bisync/) (two way) to keep two directories in\nsync bidirectionally\n.IP \\[bu] 2\nMove (https://rclone.org/commands/rclone_move/) files to cloud storage\ndeleting the local after verification\n.IP \\[bu] 2\nCheck (https://rclone.org/commands/rclone_check/) hashes and for\nmissing/extra files\n.IP \\[bu] 2\nMount (https://rclone.org/commands/rclone_mount/) your cloud storage as\na network disk\n.IP \\[bu] 2\nServe (https://rclone.org/commands/rclone_serve/) local or remote files\nover\nHTTP (https://rclone.org/commands/rclone_serve_http/)/WebDav (https://rclone.org/commands/rclone_serve_webdav/)/FTP (https://rclone.org/commands/rclone_serve_ftp/)/SFTP (https://rclone.org/commands/rclone_serve_sftp/)/DLNA (https://rclone.org/commands/rclone_serve_dlna/)\n.IP \\[bu] 2\nExperimental Web based GUI (https://rclone.org/gui/)\n.SS Supported providers\n.PP\n(There are many others, built on standard protocols such as WebDAV or\nS3, that work out of the box.)\n.IP \\[bu] 2\n1Fichier\n.IP \\[bu] 2\nAkamai Netstorage\n.IP \\[bu] 2\nAlibaba Cloud (Aliyun) Object Storage System (OSS)\n.IP \\[bu] 2\nAmazon S3\n.IP \\[bu] 2\nBackblaze B2\n.IP \\[bu] 2\nBox\n.IP \\[bu] 2\nCeph\n.IP \\[bu] 2\nChina Mobile Ecloud Elastic Object Storage (EOS)\n.IP \\[bu] 2\nArvan Cloud Object Storage (AOS)\n.IP \\[bu] 2\nCitrix ShareFile\n.IP \\[bu] 2\nCloudflare R2\n.IP \\[bu] 2\nDigitalOcean Spaces\n.IP \\[bu] 2\nDigi Storage\n.IP \\[bu] 2\nDreamhost\n.IP \\[bu] 2\nDropbox\n.IP \\[bu] 2\nEnterprise File Fabric\n.IP \\[bu] 2\nFastmail Files\n.IP \\[bu] 2\nFiles.com\n.IP \\[bu] 2\nFTP\n.IP \\[bu] 2\nGofile\n.IP \\[bu] 2\nGoogle Cloud Storage\n.IP \\[bu] 2\nGoogle Drive\n.IP \\[bu] 2\nGoogle Photos\n.IP \\[bu] 2\nHDFS\n.IP \\[bu] 2\nHetzner Storage Box\n.IP \\[bu] 2\nHiDrive\n.IP \\[bu] 2\nHTTP\n.IP \\[bu] 2\nImageKit\n.IP \\[bu] 2\nInternet Archive\n.IP \\[bu] 2\nJottacloud\n.IP \\[bu] 2\nIBM COS S3\n.IP \\[bu] 2\nIDrive e2\n.IP \\[bu] 2\nIONOS Cloud\n.IP \\[bu] 2\nKoofr\n.IP \\[bu] 2\nLeviia Object Storage\n.IP \\[bu] 2\nLiara Object Storage\n.IP \\[bu] 2\nLinkbox\n.IP \\[bu] 2\nLinode Object Storage\n.IP \\[bu] 2\nMagalu\n.IP \\[bu] 2\nMail.ru Cloud\n.IP \\[bu] 2\nMemset Memstore\n.IP \\[bu] 2\nMega\n.IP \\[bu] 2\nMemory\n.IP \\[bu] 2\nMicrosoft Azure Blob Storage\n.IP \\[bu] 2\nMicrosoft Azure Files Storage\n.IP \\[bu] 2\nMicrosoft OneDrive\n.IP \\[bu] 2\nMinio\n.IP \\[bu] 2\nNextcloud\n.IP \\[bu] 2\nOVH\n.IP \\[bu] 2\nBlomp Cloud Storage\n.IP \\[bu] 2\nOpenDrive\n.IP \\[bu] 2\nOpenStack Swift\n.IP \\[bu] 2\nOracle Cloud Storage Swift\n.IP \\[bu] 2\nOracle Object Storage\n.IP \\[bu] 2\nownCloud\n.IP \\[bu] 2\npCloud\n.IP \\[bu] 2\nPetabox\n.IP \\[bu] 2\nPikPak\n.IP \\[bu] 2\nPixeldrain\n.IP \\[bu] 2\npremiumize.me\n.IP \\[bu] 2\nput.io\n.IP \\[bu] 2\nProton Drive\n.IP \\[bu] 2\nQingStor\n.IP \\[bu] 2\nQiniu Cloud Object Storage (Kodo)\n.IP \\[bu] 2\nQuatrix by Maytech\n.IP \\[bu] 2\nRackspace Cloud Files\n.IP \\[bu] 2\nrsync.net\n.IP \\[bu] 2\nScaleway\n.IP \\[bu] 2\nSeafile\n.IP \\[bu] 2\nSeagate Lyve Cloud\n.IP \\[bu] 2\nSeaweedFS\n.IP \\[bu] 2\nSFTP\n.IP \\[bu] 2\nSia\n.IP \\[bu] 2\nSMB / CIFS\n.IP \\[bu] 2\nStackPath\n.IP \\[bu] 2\nStorj\n.IP \\[bu] 2\nSynology\n.IP \\[bu] 2\nSugarSync\n.IP \\[bu] 2\nTencent Cloud Object Storage (COS)\n.IP \\[bu] 2\nUloz.to\n.IP \\[bu] 2\nUptobox\n.IP \\[bu] 2\nWasabi\n.IP \\[bu] 2\nWebDAV\n.IP \\[bu] 2\nYandex Disk\n.IP \\[bu] 2\nZoho WorkDrive\n.IP \\[bu] 2\nThe local filesystem\n.SS Virtual providers\n.PP\nThese backends adapt or modify other storage providers:\n.IP \\[bu] 2\nAlias: Rename existing remotes\n.IP \\[bu] 2\nCache: Cache remotes (DEPRECATED)\n.IP \\[bu] 2\nChunker: Split large files\n.IP \\[bu] 2\nCombine: Combine multiple remotes into a directory tree\n.IP \\[bu] 2\nCompress: Compress files\n.IP \\[bu] 2\nCrypt: Encrypt files\n.IP \\[bu] 2\nHasher: Hash files\n.IP \\[bu] 2\nUnion: Join multiple remotes to work together\n.SS Links\n.IP \\[bu] 2\nHome page (https://rclone.org/)\n.IP \\[bu] 2\nGitHub project page for source and bug\ntracker (https://github.com/rclone/rclone)\n.IP \\[bu] 2\nRclone Forum (https://forum.rclone.org)\n.IP \\[bu] 2\nDownloads (https://rclone.org/downloads/)\n.SH Install\n.PP\nRclone is a Go program and comes as a single binary file.\n.SS Quickstart\n.IP \\[bu] 2\nDownload (https://rclone.org/downloads/) the relevant binary.\n.IP \\[bu] 2\nExtract the \\f[C]rclone\\f[R] executable, \\f[C]rclone.exe\\f[R] on\nWindows, from the archive.\n.IP \\[bu] 2\nRun \\f[C]rclone config\\f[R] to setup.\nSee rclone config docs (https://rclone.org/docs/) for more details.\n.IP \\[bu] 2\nOptionally configure automatic execution.\n.PP\nSee below for some expanded Linux / macOS / Windows instructions.\n.PP\nSee the usage (https://rclone.org/docs/) docs for how to use rclone, or\nrun \\f[C]rclone -h\\f[R].\n.PP\nAlready installed rclone can be easily updated to the latest version\nusing the rclone\nselfupdate (https://rclone.org/commands/rclone_selfupdate/) command.\n.PP\nSee the release signing docs (https://rclone.org/release_signing/) for\nhow to verify signatures on the release.\n.SS Script installation\n.PP\nTo install rclone on Linux/macOS/BSD systems, run:\n.IP\n.nf\n\\f[C]\nsudo -v ; curl https://rclone.org/install.sh | sudo bash\n\\f[R]\n.fi\n.PP\nFor beta installation, run:\n.IP\n.nf\n\\f[C]\nsudo -v ; curl https://rclone.org/install.sh | sudo bash -s beta\n\\f[R]\n.fi\n.PP\nNote that this script checks the version of rclone installed first and\nwon\\[aq]t re-download if not needed.\n.SS Linux installation\n.SS Precompiled binary\n.PP\nFetch and unpack\n.IP\n.nf\n\\f[C]\ncurl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip\nunzip rclone-current-linux-amd64.zip\ncd rclone-*-linux-amd64\n\\f[R]\n.fi\n.PP\nCopy binary file\n.IP\n.nf\n\\f[C]\nsudo cp rclone /usr/bin/\nsudo chown root:root /usr/bin/rclone\nsudo chmod 755 /usr/bin/rclone\n\\f[R]\n.fi\n.PP\nInstall manpage\n.IP\n.nf\n\\f[C]\nsudo mkdir -p /usr/local/share/man/man1\nsudo cp rclone.1 /usr/local/share/man/man1/\nsudo mandb\n\\f[R]\n.fi\n.PP\nRun \\f[C]rclone config\\f[R] to setup.\nSee rclone config docs (https://rclone.org/docs/) for more details.\n.IP\n.nf\n\\f[C]\nrclone config\n\\f[R]\n.fi\n.SS macOS installation\n.SS Installation with brew\n.IP\n.nf\n\\f[C]\nbrew install rclone\n\\f[R]\n.fi\n.PP\nNOTE: This version of rclone will not support \\f[C]mount\\f[R] any more\n(see #5373 (https://github.com/rclone/rclone/issues/5373)).\nIf mounting is wanted on macOS, either install a precompiled binary or\nenable the relevant option when installing from source.\n.PP\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date.\nIts current version is as below.\n.PP\n[IMAGE: Homebrew\npackage (https://repology.org/badge/version-for-repo/homebrew/rclone.svg)] (https://repology.org/project/rclone/versions)\n.SS Installation with MacPorts\n.PP\nOn macOS, rclone can also be installed via\nMacPorts (https://www.macports.org):\n.IP\n.nf\n\\f[C]\nsudo port install rclone\n\\f[R]\n.fi\n.PP\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date.\nIts current version is as below.\n.PP\n[IMAGE: MacPorts\nport (https://repology.org/badge/version-for-repo/macports/rclone.svg)] (https://repology.org/project/rclone/versions)\n.PP\nMore information here (https://ports.macports.org/port/rclone/).\n.SS Precompiled binary, using curl\n.PP\nTo avoid problems with macOS gatekeeper enforcing the binary to be\nsigned and notarized it is enough to download with \\f[C]curl\\f[R].\n.PP\nDownload the latest version of rclone.\n.IP\n.nf\n\\f[C]\ncd && curl -O https://downloads.rclone.org/rclone-current-osx-amd64.zip\n\\f[R]\n.fi\n.PP\nUnzip the download and cd to the extracted folder.\n.IP\n.nf\n\\f[C]\nunzip -a rclone-current-osx-amd64.zip && cd rclone-*-osx-amd64\n\\f[R]\n.fi\n.PP\nMove rclone to your $PATH.\nYou will be prompted for your password.\n.IP\n.nf\n\\f[C]\nsudo mkdir -p /usr/local/bin\nsudo mv rclone /usr/local/bin/\n\\f[R]\n.fi\n.PP\n(the \\f[C]mkdir\\f[R] command is safe to run, even if the directory\nalready exists).\n.PP\nRemove the leftover files.\n.IP\n.nf\n\\f[C]\ncd .. && rm -rf rclone-*-osx-amd64 rclone-current-osx-amd64.zip\n\\f[R]\n.fi\n.PP\nRun \\f[C]rclone config\\f[R] to setup.\nSee rclone config docs (https://rclone.org/docs/) for more details.\n.IP\n.nf\n\\f[C]\nrclone config\n\\f[R]\n.fi\n.SS Precompiled binary, using a web browser\n.PP\nWhen downloading a binary with a web browser, the browser will set the\nmacOS gatekeeper quarantine attribute.\nStarting from Catalina, when attempting to run \\f[C]rclone\\f[R], a\npop-up will appear saying:\n.IP\n.nf\n\\f[C]\n\\[dq]rclone\\[dq] cannot be opened because the developer cannot be verified.\nmacOS cannot verify that this app is free from malware.\n\\f[R]\n.fi\n.PP\nThe simplest fix is to run\n.IP\n.nf\n\\f[C]\nxattr -d com.apple.quarantine rclone\n\\f[R]\n.fi\n.SS Windows installation\n.SS Precompiled binary\n.PP\nFetch the correct binary for your processor type by clicking on these\nlinks.\nIf not sure, use the first link.\n.IP \\[bu] 2\nIntel/AMD - 64\nBit (https://downloads.rclone.org/rclone-current-windows-amd64.zip)\n.IP \\[bu] 2\nIntel/AMD - 32\nBit (https://downloads.rclone.org/rclone-current-windows-386.zip)\n.IP \\[bu] 2\nARM - 64\nBit (https://downloads.rclone.org/rclone-current-windows-arm64.zip)\n.PP\nOpen this file in the Explorer and extract \\f[C]rclone.exe\\f[R].\nRclone is a portable executable so you can place it wherever is\nconvenient.\n.PP\nOpen a CMD window (or powershell) and run the binary.\nNote that rclone does not launch a GUI by default, it runs in the CMD\nWindow.\n.IP \\[bu] 2\nRun \\f[C]rclone.exe config\\f[R] to setup.\nSee rclone config docs (https://rclone.org/docs/) for more details.\n.IP \\[bu] 2\nOptionally configure automatic execution.\n.PP\nIf you are planning to use the rclone\nmount (https://rclone.org/commands/rclone_mount/) feature then you will\nneed to install the third party utility WinFsp (https://winfsp.dev/)\nalso.\n.SS Windows package manager (Winget)\n.PP\nWinget (https://learn.microsoft.com/en-us/windows/package-manager/)\ncomes pre-installed with the latest versions of Windows.\nIf not, update the App\nInstaller (https://www.microsoft.com/p/app-installer/9nblggh4nns1)\npackage from the Microsoft store.\n.PP\nTo install rclone\n.IP\n.nf\n\\f[C]\nwinget install Rclone.Rclone\n\\f[R]\n.fi\n.PP\nTo uninstall rclone\n.IP\n.nf\n\\f[C]\nwinget uninstall Rclone.Rclone --force\n\\f[R]\n.fi\n.SS Chocolatey package manager\n.PP\nMake sure you have Choco (https://chocolatey.org/) installed\n.IP\n.nf\n\\f[C]\nchoco search rclone\nchoco install rclone\n\\f[R]\n.fi\n.PP\nThis will install rclone on your Windows machine.\nIf you are planning to use rclone\nmount (https://rclone.org/commands/rclone_mount/) then\n.IP\n.nf\n\\f[C]\nchoco install winfsp\n\\f[R]\n.fi\n.PP\nwill install that too.\n.PP\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date.\nIts current version is as below.\n.PP\n[IMAGE: Chocolatey\npackage (https://repology.org/badge/version-for-repo/chocolatey/rclone.svg)] (https://repology.org/project/rclone/versions)\n.SS Scoop package manager\n.PP\nMake sure you have Scoop (https://scoop.sh/) installed\n.IP\n.nf\n\\f[C]\nscoop install rclone\n\\f[R]\n.fi\n.PP\nNote that this is a third party installer not controlled by the rclone\ndevelopers so it may be out of date.\nIts current version is as below.\n.PP\n[IMAGE: Scoop\npackage (https://repology.org/badge/version-for-repo/scoop/rclone.svg)] (https://repology.org/project/rclone/versions)\n.SS Package manager installation\n.PP\nMany Linux, Windows, macOS and other OS distributions package and\ndistribute rclone.\n.PP\nThe distributed versions of rclone are often quite out of date and for\nthis reason we recommend one of the other installation methods if\npossible.\n.PP\nYou can get an idea of how up to date or not your OS distribution\\[aq]s\npackage is here.\n.PP\n[IMAGE: Packaging\nstatus (https://repology.org/badge/vertical-allrepos/rclone.svg?columns=3)] (https://repology.org/project/rclone/versions)\n.SS Docker installation\n.PP\nThe rclone developers maintain a docker image for\nrclone (https://hub.docker.com/r/rclone/rclone).\n.PP\nThese images are built as part of the release process based on a minimal\nAlpine Linux.\n.PP\nThe \\f[C]:latest\\f[R] tag will always point to the latest stable\nrelease.\nYou can use the \\f[C]:beta\\f[R] tag to get the latest build from master.\nYou can also use version tags, e.g.\n\\f[C]:1.49.1\\f[R], \\f[C]:1.49\\f[R] or \\f[C]:1\\f[R].\n.IP\n.nf\n\\f[C]\n$ docker pull rclone/rclone:latest\nlatest: Pulling from rclone/rclone\nDigest: sha256:0e0ced72671989bb837fea8e88578b3fc48371aa45d209663683e24cfdaa0e11\n\\&...\n$ docker run --rm rclone/rclone:latest version\nrclone v1.49.1\n- os/arch: linux/amd64\n- go version: go1.12.9\n\\f[R]\n.fi\n.PP\nThere are a few command line options to consider when starting an rclone\nDocker container from the rclone image.\n.IP \\[bu] 2\nYou need to mount the host rclone config dir at \\f[C]/config/rclone\\f[R]\ninto the Docker container.\nDue to the fact that rclone updates tokens inside its config file, and\nthat the update process involves a file rename, you need to mount the\nwhole host rclone config dir, not just the single host rclone config\nfile.\n.IP \\[bu] 2\nYou need to mount a host data dir at \\f[C]/data\\f[R] into the Docker\ncontainer.\n.IP \\[bu] 2\nBy default, the rclone binary inside a Docker container runs with UID=0\n(root).\nAs a result, all files created in a run will have UID=0.\nIf your config and data files reside on the host with a non-root\nUID:GID, you need to pass these on the container start command line.\n.IP \\[bu] 2\nIf you want to access the RC interface (either via the API or the Web\nUI), it is required to set the \\f[C]--rc-addr\\f[R] to \\f[C]:5572\\f[R] in\norder to connect to it from outside the container.\nAn explanation about why this is necessary is present\nhere (https://web.archive.org/web/20200808071950/https://pythonspeed.com/articles/docker-connection-refused/).\n.RS 2\n.IP \\[bu] 2\nNOTE: Users running this container with the docker network set to\n\\f[C]host\\f[R] should probably set it to listen to localhost only, with\n\\f[C]127.0.0.1:5572\\f[R] as the value for \\f[C]--rc-addr\\f[R]\n.RE\n.IP \\[bu] 2\nIt is possible to use \\f[C]rclone mount\\f[R] inside a userspace Docker\ncontainer, and expose the resulting fuse mount to the host.\nThe exact \\f[C]docker run\\f[R] options to do that might vary slightly\nbetween hosts.\nSee, e.g.\nthe discussion in this\nthread (https://github.com/moby/moby/issues/9448).\n.RS 2\n.PP\nYou also need to mount the host \\f[C]/etc/passwd\\f[R] and\n\\f[C]/etc/group\\f[R] for fuse to work inside the container.\n.RE\n.PP\nHere are some commands tested on an Ubuntu 18.04.3 host:\n.IP\n.nf\n\\f[C]\n# config on host at \\[ti]/.config/rclone/rclone.conf\n# data on host at \\[ti]/data\n\n# add a remote interactively\ndocker run --rm -it \\[rs]\n    --volume \\[ti]/.config/rclone:/config/rclone \\[rs]\n    --user $(id -u):$(id -g) \\[rs]\n    rclone/rclone \\[rs]\n    config\n\n# make sure the config is ok by listing the remotes\ndocker run --rm \\[rs]\n    --volume \\[ti]/.config/rclone:/config/rclone \\[rs]\n    --user $(id -u):$(id -g) \\[rs]\n    rclone/rclone \\[rs]\n    listremotes\n\n# perform mount inside Docker container, expose result to host\nmkdir -p \\[ti]/data/mount\ndocker run --rm \\[rs]\n    --volume \\[ti]/.config/rclone:/config/rclone \\[rs]\n    --volume \\[ti]/data:/data:shared \\[rs]\n    --user $(id -u):$(id -g) \\[rs]\n    --volume /etc/passwd:/etc/passwd:ro --volume /etc/group:/etc/group:ro \\[rs]\n    --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined \\[rs]\n    rclone/rclone \\[rs]\n    mount dropbox:Photos /data/mount &\nls \\[ti]/data/mount\nkill %1\n\\f[R]\n.fi\n.SS Snap installation\n.PP\n[IMAGE: Get it from the Snap\nStore (https://snapcraft.io/static/images/badges/en/snap-store-black.svg)] (https://snapcraft.io/rclone)\n.PP\nMake sure you have Snapd\ninstalled (https://snapcraft.io/docs/installing-snapd)\n.IP\n.nf\n\\f[C]\n$ sudo snap install rclone\n\\f[R]\n.fi\n.PP\nDue to the strict confinement of Snap, rclone snap cannot access real\n/home/$USER/.config/rclone directory, default config path is as below.\n.IP \\[bu] 2\nDefault config directory:\n.RS 2\n.IP \\[bu] 2\n/home/$USER/snap/rclone/current/.config/rclone\n.RE\n.PP\nNote: Due to the strict confinement of Snap, \\f[C]rclone mount\\f[R]\nfeature is \\f[C]not\\f[R] supported.\n.PP\nIf mounting is wanted, either install a precompiled binary or enable the\nrelevant option when installing from source.\n.PP\nNote that this is controlled by community\nmaintainer (https://github.com/boukendesho/rclone-snap) not the rclone\ndevelopers so it may be out of date.\nIts current version is as below.\n.PP\n[IMAGE: rclone (https://snapcraft.io/rclone/badge.svg)] (https://snapcraft.io/rclone)\n.SS Source installation\n.PP\nMake sure you have git and Go (https://golang.org/) installed.\nGo version 1.18 or newer is required, the latest release is recommended.\nYou can get it from your package manager, or download it from\ngolang.org/dl (https://golang.org/dl/).\nThen you can run the following:\n.IP\n.nf\n\\f[C]\ngit clone https://github.com/rclone/rclone.git\ncd rclone\ngo build\n\\f[R]\n.fi\n.PP\nThis will check out the rclone source in subfolder rclone, which you can\nlater modify and send pull requests with.\nThen it will build the rclone executable in the same folder.\nAs an initial check you can now run \\f[C]./rclone version\\f[R]\n(\\f[C].\\[rs]rclone version\\f[R] on Windows).\n.PP\nNote that on macOS and Windows the\nmount (https://rclone.org/commands/rclone_mount/) command will not be\navailable unless you specify an additional build tag \\f[C]cmount\\f[R].\n.IP\n.nf\n\\f[C]\ngo build -tags cmount\n\\f[R]\n.fi\n.PP\nThis assumes you have a GCC compatible C compiler (GCC or Clang) in your\nPATH, as it uses cgo (https://pkg.go.dev/cmd/cgo).\nBut on Windows, the cgofuse (https://github.com/winfsp/cgofuse) library\nthat the cmount implementation is based on, also supports building\nwithout cgo (https://github.com/golang/go/wiki/WindowsDLLs), i.e.\nby setting environment variable CGO_ENABLED to value 0 (static linking).\nThis is how the official Windows release of rclone is being built,\nstarting with version 1.59.\nIt is still possible to build with cgo on Windows as well, by using the\nMinGW port of GCC, e.g.\nby installing it in a MSYS2 (https://www.msys2.org) distribution (make\nsure you install it in the classic mingw64 subsystem, the ucrt64 version\nis not compatible).\n.PP\nAdditionally, to build with mount on Windows, you must install the third\nparty utility WinFsp (https://winfsp.dev/), with the \\[dq]Developer\\[dq]\nfeature selected.\nIf building with cgo, you must also set environment variable CPATH\npointing to the fuse include directory within the WinFsp installation\n(normally\n\\f[C]C:\\[rs]Program Files (x86)\\[rs]WinFsp\\[rs]inc\\[rs]fuse\\f[R]).\n.PP\nYou may add arguments \\f[C]-ldflags -s\\f[R] to omit symbol table and\ndebug information, making the executable file smaller, and\n\\f[C]-trimpath\\f[R] to remove references to local file system paths.\nThe official rclone releases are built with both of these.\n.IP\n.nf\n\\f[C]\ngo build -trimpath -ldflags -s -tags cmount\n\\f[R]\n.fi\n.PP\nIf you want to customize the version string, as reported by the\n\\f[C]rclone version\\f[R] command, you can set one of the variables\n\\f[C]fs.Version\\f[R], \\f[C]fs.VersionTag\\f[R] (to keep default suffix\nbut customize the number), or \\f[C]fs.VersionSuffix\\f[R] (to keep\ndefault number but customize the suffix).\nThis can be done from the build command, by adding to the\n\\f[C]-ldflags\\f[R] argument value as shown below.\n.IP\n.nf\n\\f[C]\ngo build -trimpath -ldflags \\[dq]-s -X github.com/rclone/rclone/fs.Version=v9.9.9-test\\[dq] -tags cmount\n\\f[R]\n.fi\n.PP\nOn Windows, the official executables also have the version information,\nas well as a file icon, embedded as binary resources.\nTo get that with your own build you need to run the following command\n\\f[B]before\\f[R] the build command.\nIt generates a Windows resource system object file, with extension\n\\&.syso, e.g.\n\\f[C]resource_windows_amd64.syso\\f[R], that will be automatically picked\nup by future build commands.\n.IP\n.nf\n\\f[C]\ngo run bin/resource_windows.go\n\\f[R]\n.fi\n.PP\nThe above command will generate a resource file containing version\ninformation based on the fs.Version variable in source at the time you\nrun the command, which means if the value of this variable changes you\nneed to re-run the command for it to be reflected in the version\ninformation.\nAlso, if you override this version variable in the build command as\ndescribed above, you need to do that also when generating the resource\nfile, or else it will still use the value from the source.\n.IP\n.nf\n\\f[C]\ngo run bin/resource_windows.go -version v9.9.9-test\n\\f[R]\n.fi\n.PP\nInstead of executing the \\f[C]go build\\f[R] command directly, you can\nrun it via the Makefile.\nThe default target changes the version suffix from \\[dq]-DEV\\[dq] to\n\\[dq]-beta\\[dq] followed by additional commit details, embeds version\ninformation binary resources on Windows, and copies the resulting rclone\nexecutable into your GOPATH bin folder (\\f[C]$(go env GOPATH)/bin\\f[R],\nwhich corresponds to \\f[C]\\[ti]/go/bin/rclone\\f[R] by default).\n.IP\n.nf\n\\f[C]\nmake\n\\f[R]\n.fi\n.PP\nTo include mount command on macOS and Windows with Makefile build:\n.IP\n.nf\n\\f[C]\nmake GOTAGS=cmount\n\\f[R]\n.fi\n.PP\nThere are other make targets that can be used for more advanced builds,\nsuch as cross-compiling for all supported os/architectures, and\npackaging results into release artifacts.\nSee Makefile (https://github.com/rclone/rclone/blob/master/Makefile) and\ncross-compile.go (https://github.com/rclone/rclone/blob/master/bin/cross-compile.go)\nfor details.\n.PP\nAnother alternative method for source installation is to download the\nsource, build and install rclone - all in one operation, as a regular Go\npackage.\nThe source will be stored it in the Go module cache, and the resulting\nexecutable will be in your GOPATH bin folder\n(\\f[C]$(go env GOPATH)/bin\\f[R], which corresponds to\n\\f[C]\\[ti]/go/bin/rclone\\f[R] by default).\n.IP\n.nf\n\\f[C]\ngo install github.com/rclone/rclone\\[at]latest\n\\f[R]\n.fi\n.PP\nIn some situations, rclone executable size might be too big for\ndeployment in very restricted environments when all backends with large\nSDKs are included.\nTo limit binary size unused backends can be commented out in\n\\f[C]backends/all/all.go\\f[R] and unused commands in\n\\f[C]cmd/all/all.go\\f[R] before building with \\f[C]go build\\f[R] or\n\\f[C]make\\f[R]\n.SS Ansible installation\n.PP\nThis can be done with Stefan Weichinger\\[aq]s ansible\nrole (https://github.com/stefangweichinger/ansible-rclone).\n.PP\nInstructions\n.IP \"1.\" 3\n\\f[C]git clone https://github.com/stefangweichinger/ansible-rclone.git\\f[R]\ninto your local roles-directory\n.IP \"2.\" 3\nadd the role to the hosts you want rclone installed to:\n.IP\n.nf\n\\f[C]\n    - hosts: rclone-hosts\n      roles:\n          - rclone\n\\f[R]\n.fi\n.SS Portable installation\n.PP\nAs mentioned above (https://rclone.org/install/#quickstart), rclone is\nsingle executable (\\f[C]rclone\\f[R], or \\f[C]rclone.exe\\f[R] on Windows)\nthat you can download as a zip archive and extract into a location of\nyour choosing.\nWhen executing different commands, it may create files in different\nlocations, such as a configuration file and various temporary files.\nBy default the locations for these are according to your operating\nsystem, e.g.\nconfiguration file in your user profile directory and temporary files in\nthe standard temporary directory, but you can customize all of them,\ne.g.\nto make a completely self-contained, portable installation.\n.PP\nRun the config paths (https://rclone.org/commands/rclone_config_paths/)\ncommand to see the locations that rclone will use.\n.PP\nTo override them set the corresponding options (as command-line\narguments, or as environment\nvariables (https://rclone.org/docs/#environment-variables)): -\n--config (https://rclone.org/docs/#config-config-file) -\n--cache-dir (https://rclone.org/docs/#cache-dir-dir) -\n--temp-dir (https://rclone.org/docs/#temp-dir-dir)\n.SS Autostart\n.PP\nAfter installing and configuring rclone, as described above, you are\nready to use rclone as an interactive command line utility.\nIf your goal is to perform \\f[I]periodic\\f[R] operations, such as a\nregular sync (https://rclone.org/commands/rclone_sync/), you will\nprobably want to configure your rclone command in your operating\nsystem\\[aq]s scheduler.\nIf you need to expose \\f[I]service\\f[R]-like features, such as remote\ncontrol (https://rclone.org/rc/), GUI (https://rclone.org/gui/),\nserve (https://rclone.org/commands/rclone_serve/) or\nmount (https://rclone.org/commands/rclone_mount/), you will often want\nan rclone command always running in the background, and configuring it\nto run in a service infrastructure may be a better option.\nBelow are some alternatives on how to achieve this on different\noperating systems.\n.PP\nNOTE: Before setting up autorun it is highly recommended that you have\ntested your command manually from a Command Prompt first.\n.SS Autostart on Windows\n.PP\nThe most relevant alternatives for autostart on Windows are: - Run at\nuser log on using the Startup folder - Run at user log on, at system\nstartup or at schedule using Task Scheduler - Run at system startup\nusing Windows service\n.SS Running in background\n.PP\nRclone is a console application, so if not starting from an existing\nCommand Prompt, e.g.\nwhen starting rclone.exe from a shortcut, it will open a Command Prompt\nwindow.\nWhen configuring rclone to run from task scheduler and windows service\nyou are able to set it to run hidden in background.\nFrom rclone version 1.54 you can also make it run hidden from anywhere\nby adding option \\f[C]--no-console\\f[R] (it may still flash briefly when\nthe program starts).\nSince rclone normally writes information and any error messages to the\nconsole, you must redirect this to a file to be able to see it.\nRclone has a built-in option \\f[C]--log-file\\f[R] for that.\n.PP\nExample command to run a sync in background:\n.IP\n.nf\n\\f[C]\nc:\\[rs]rclone\\[rs]rclone.exe sync c:\\[rs]files remote:/files --no-console --log-file c:\\[rs]rclone\\[rs]logs\\[rs]sync_files.txt\n\\f[R]\n.fi\n.SS User account\n.PP\nAs mentioned in the mount (https://rclone.org/commands/rclone_mount/)\ndocumentation, mounted drives created as Administrator are not visible\nto other accounts, not even the account that was elevated as\nAdministrator.\nBy running the mount command as the built-in \\f[C]SYSTEM\\f[R] user\naccount, it will create drives accessible for everyone on the system.\nBoth scheduled task and Windows service can be used to achieve this.\n.PP\nNOTE: Remember that when rclone runs as the \\f[C]SYSTEM\\f[R] user, the\nuser profile that it sees will not be yours.\nThis means that if you normally run rclone with configuration file in\nthe default location, to be able to use the same configuration when\nrunning as the system user you must explicitly tell rclone where to find\nit with the\n\\f[C]--config\\f[R] (https://rclone.org/docs/#config-config-file) option,\nor else it will look in the system users profile path\n(\\f[C]C:\\[rs]Windows\\[rs]System32\\[rs]config\\[rs]systemprofile\\f[R]).\nTo test your command manually from a Command Prompt, you can run it with\nthe\nPsExec (https://docs.microsoft.com/en-us/sysinternals/downloads/psexec)\nutility from Microsoft\\[aq]s Sysinternals suite, which takes option\n\\f[C]-s\\f[R] to execute commands as the \\f[C]SYSTEM\\f[R] user.\n.SS Start from Startup folder\n.PP\nTo quickly execute an rclone command you can simply create a standard\nWindows Explorer shortcut for the complete rclone command you want to\nrun.\nIf you store this shortcut in the special \\[dq]Startup\\[dq] start-menu\nfolder, Windows will automatically run it at login.\nTo open this folder in Windows Explorer, enter path\n\\f[C]%APPDATA%\\[rs]Microsoft\\[rs]Windows\\[rs]Start Menu\\[rs]Programs\\[rs]Startup\\f[R],\nor\n\\f[C]C:\\[rs]ProgramData\\[rs]Microsoft\\[rs]Windows\\[rs]Start Menu\\[rs]Programs\\[rs]StartUp\\f[R]\nif you want the command to start for \\f[I]every\\f[R] user that logs in.\n.PP\nThis is the easiest approach to autostarting of rclone, but it offers no\nfunctionality to set it to run as different user, or to set conditions\nor actions on certain events.\nSetting up a scheduled task as described below will often give you\nbetter results.\n.SS Start from Task Scheduler\n.PP\nTask Scheduler is an administrative tool built into Windows, and it can\nbe used to configure rclone to be started automatically in a highly\nconfigurable way, e.g.\nperiodically on a schedule, on user log on, or at system startup.\nIt can run be configured to run as the current user, or for a mount\ncommand that needs to be available to all users it can run as the\n\\f[C]SYSTEM\\f[R] user.\nFor technical information, see\nhttps://docs.microsoft.com/windows/win32/taskschd/task-scheduler-start-page.\n.SS Run as service\n.PP\nFor running rclone at system startup, you can create a Windows service\nthat executes your rclone command, as an alternative to scheduled task\nconfigured to run at startup.\n.SS Mount command built-in service integration\n.PP\nFor mount commands, rclone has a built-in Windows service integration\nvia the third-party WinFsp library it uses.\nRegistering as a regular Windows service easy, as you just have to\nexecute the built-in PowerShell command \\f[C]New-Service\\f[R] (requires\nadministrative privileges).\n.PP\nExample of a PowerShell command that creates a Windows service for\nmounting some \\f[C]remote:/files\\f[R] as drive letter \\f[C]X:\\f[R], for\n\\f[I]all\\f[R] users (service will be running as the local system\naccount):\n.IP\n.nf\n\\f[C]\nNew-Service -Name Rclone -BinaryPathName \\[aq]c:\\[rs]rclone\\[rs]rclone.exe mount remote:/files X: --config c:\\[rs]rclone\\[rs]config\\[rs]rclone.conf --log-file c:\\[rs]rclone\\[rs]logs\\[rs]mount.txt\\[aq]\n\\f[R]\n.fi\n.PP\nThe WinFsp service\ninfrastructure (https://github.com/billziss-gh/winfsp/wiki/WinFsp-Service-Architecture)\nsupports incorporating services for file system implementations, such as\nrclone, into its own launcher service, as kind of \\[dq]child\nservices\\[dq].\nThis has the additional advantage that it also implements a network\nprovider that integrates into Windows standard methods for managing\nnetwork drives.\nThis is currently not officially supported by Rclone, but with WinFsp\nversion 2019.3 B2 / v1.5B2 or later it should be possible through path\nrewriting as described\nhere (https://github.com/rclone/rclone/issues/3340).\n.SS Third-party service integration\n.PP\nTo Windows service running any rclone command, the excellent third-party\nutility NSSM (http://nssm.cc), the \\[dq]Non-Sucking Service\nManager\\[dq], can be used.\nIt includes some advanced features such as adjusting process priority,\ndefining process environment variables, redirect to file anything\nwritten to stdout, and customized response to different exit codes, with\na GUI to configure everything from (although it can also be used from\ncommand line ).\n.PP\nThere are also several other alternatives.\nTo mention one more, WinSW (https://github.com/winsw/winsw),\n\\[dq]Windows Service Wrapper\\[dq], is worth checking out.\nIt requires .NET Framework, but it is preinstalled on newer versions of\nWindows, and it also provides alternative standalone distributions which\nincludes necessary runtime (.NET 5).\nWinSW is a command-line only utility, where you have to manually create\nan XML file with service configuration.\nThis may be a drawback for some, but it can also be an advantage as it\nis easy to back up and reuse the configuration settings, without having\ngo through manual steps in a GUI.\nOne thing to note is that by default it does not restart the service on\nerror, one have to explicit enable this in the configuration file (via\nthe \\[dq]onfailure\\[dq] parameter).\n.SS Autostart on Linux\n.SS Start as a service\n.PP\nTo always run rclone in background, relevant for mount commands etc, you\ncan use systemd to set up rclone as a system or user service.\nRunning as a system service ensures that it is run at startup even if\nthe user it is running as has no active session.\nRunning rclone as a user service ensures that it only starts after the\nconfigured user has logged into the system.\n.SS Run periodically from cron\n.PP\nTo run a periodic command, such as a copy/sync, you can set up a cron\njob.\n.SH Usage\n.PP\nRclone is a command line program to manage files on cloud storage.\nAfter download (https://rclone.org/downloads/) and install, continue\nhere to learn how to use it: Initial configuration, what the basic\nsyntax looks like, describes the various subcommands, the various\noptions, and more.\n.SS Configure\n.PP\nFirst, you\\[aq]ll need to configure rclone.\nAs the object storage systems have quite complicated authentication\nthese are kept in a config file.\n(See the \\f[C]--config\\f[R] entry for how to find the config file and\nchoose its location.)\n.PP\nThe easiest way to make the config is to run rclone with the config\noption:\n.IP\n.nf\n\\f[C]\nrclone config\n\\f[R]\n.fi\n.PP\nSee the following for detailed instructions for\n.IP \\[bu] 2\n1Fichier (https://rclone.org/fichier/)\n.IP \\[bu] 2\nAkamai Netstorage (https://rclone.org/netstorage/)\n.IP \\[bu] 2\nAlias (https://rclone.org/alias/)\n.IP \\[bu] 2\nAmazon S3 (https://rclone.org/s3/)\n.IP \\[bu] 2\nBackblaze B2 (https://rclone.org/b2/)\n.IP \\[bu] 2\nBox (https://rclone.org/box/)\n.IP \\[bu] 2\nChunker (https://rclone.org/chunker/) - transparently splits large files\nfor other remotes\n.IP \\[bu] 2\nCitrix ShareFile (https://rclone.org/sharefile/)\n.IP \\[bu] 2\nCompress (https://rclone.org/compress/)\n.IP \\[bu] 2\nCombine (https://rclone.org/combine/)\n.IP \\[bu] 2\nCrypt (https://rclone.org/crypt/) - to encrypt other remotes\n.IP \\[bu] 2\nDigitalOcean Spaces (https://rclone.org/s3/#digitalocean-spaces)\n.IP \\[bu] 2\nDigi Storage (https://rclone.org/koofr/#digi-storage)\n.IP \\[bu] 2\nDropbox (https://rclone.org/dropbox/)\n.IP \\[bu] 2\nEnterprise File Fabric (https://rclone.org/filefabric/)\n.IP \\[bu] 2\nFiles.com (https://rclone.org/filescom/)\n.IP \\[bu] 2\nFTP (https://rclone.org/ftp/)\n.IP \\[bu] 2\nGofile (https://rclone.org/gofile/)\n.IP \\[bu] 2\nGoogle Cloud Storage (https://rclone.org/googlecloudstorage/)\n.IP \\[bu] 2\nGoogle Drive (https://rclone.org/drive/)\n.IP \\[bu] 2\nGoogle Photos (https://rclone.org/googlephotos/)\n.IP \\[bu] 2\nHasher (https://rclone.org/hasher/) - to handle checksums for other\nremotes\n.IP \\[bu] 2\nHDFS (https://rclone.org/hdfs/)\n.IP \\[bu] 2\nHetzner Storage Box (https://rclone.org/sftp/#hetzner-storage-box)\n.IP \\[bu] 2\nHiDrive (https://rclone.org/hidrive/)\n.IP \\[bu] 2\nHTTP (https://rclone.org/http/)\n.IP \\[bu] 2\nInternet Archive (https://rclone.org/internetarchive/)\n.IP \\[bu] 2\nJottacloud (https://rclone.org/jottacloud/)\n.IP \\[bu] 2\nKoofr (https://rclone.org/koofr/)\n.IP \\[bu] 2\nLinkbox (https://rclone.org/linkbox/)\n.IP \\[bu] 2\nMail.ru Cloud (https://rclone.org/mailru/)\n.IP \\[bu] 2\nMega (https://rclone.org/mega/)\n.IP \\[bu] 2\nMemory (https://rclone.org/memory/)\n.IP \\[bu] 2\nMicrosoft Azure Blob Storage (https://rclone.org/azureblob/)\n.IP \\[bu] 2\nMicrosoft Azure Files Storage (https://rclone.org/azurefiles/)\n.IP \\[bu] 2\nMicrosoft OneDrive (https://rclone.org/onedrive/)\n.IP \\[bu] 2\nOpenStack Swift / Rackspace Cloudfiles / Blomp Cloud Storage / Memset\nMemstore (https://rclone.org/swift/)\n.IP \\[bu] 2\nOpenDrive (https://rclone.org/opendrive/)\n.IP \\[bu] 2\nOracle Object Storage (https://rclone.org/oracleobjectstorage/)\n.IP \\[bu] 2\nPcloud (https://rclone.org/pcloud/)\n.IP \\[bu] 2\nPikPak (https://rclone.org/pikpak/)\n.IP \\[bu] 2\nPixeldrain (https://rclone.org/pixeldrain/)\n.IP \\[bu] 2\npremiumize.me (https://rclone.org/premiumizeme/)\n.IP \\[bu] 2\nput.io (https://rclone.org/putio/)\n.IP \\[bu] 2\nProton Drive (https://rclone.org/protondrive/)\n.IP \\[bu] 2\nQingStor (https://rclone.org/qingstor/)\n.IP \\[bu] 2\nQuatrix by Maytech (https://rclone.org/quatrix/)\n.IP \\[bu] 2\nrsync.net (https://rclone.org/sftp/#rsync-net)\n.IP \\[bu] 2\nSeafile (https://rclone.org/seafile/)\n.IP \\[bu] 2\nSFTP (https://rclone.org/sftp/)\n.IP \\[bu] 2\nSia (https://rclone.org/sia/)\n.IP \\[bu] 2\nSMB (https://rclone.org/smb/)\n.IP \\[bu] 2\nStorj (https://rclone.org/storj/)\n.IP \\[bu] 2\nSugarSync (https://rclone.org/sugarsync/)\n.IP \\[bu] 2\nUnion (https://rclone.org/union/)\n.IP \\[bu] 2\nUloz.to (https://rclone.org/ulozto/)\n.IP \\[bu] 2\nUptobox (https://rclone.org/uptobox/)\n.IP \\[bu] 2\nWebDAV (https://rclone.org/webdav/)\n.IP \\[bu] 2\nYandex Disk (https://rclone.org/yandex/)\n.IP \\[bu] 2\nZoho WorkDrive (https://rclone.org/zoho/)\n.IP \\[bu] 2\nThe local filesystem (https://rclone.org/local/)\n.SS Basic syntax\n.PP\nRclone syncs a directory tree from one storage system to another.\n.PP\nIts syntax is like this\n.IP\n.nf\n\\f[C]\nrclone subcommand [options] <parameters> <parameters...>\n\\f[R]\n.fi\n.PP\nA \\f[C]subcommand\\f[R] is a the rclone operation required, (e.g.\n\\f[C]sync\\f[R], \\f[C]copy\\f[R], \\f[C]ls\\f[R]).\n.PP\nAn \\f[C]option\\f[R] is a single letter flag (e.g.\n\\f[C]-v\\f[R]) or a group of single letter flags (e.g.\n\\f[C]-Pv\\f[R]) or a long flag (e.g.\n\\f[C]--progress\\f[R]).\nNo options are required.\nOptions can come after the \\f[C]subcommand\\f[R] or in between parameters\ntoo or on the end, but only global options can be used before the\n\\f[C]subcommand\\f[R].\nAnything after a \\f[C]--\\f[R] option will not be interpreted as an\noption so if you need to add a parameter which starts with a \\f[C]-\\f[R]\nthen put a \\f[C]--\\f[R] on its own first, eg\n.IP\n.nf\n\\f[C]\nrclone lsf -- -directory-starting-with-dash\n\\f[R]\n.fi\n.PP\nA \\f[C]parameter\\f[R] is usually a file path or rclone remote, eg\n\\f[C]/path/to/file\\f[R] or \\f[C]remote:path/to/file\\f[R] but it can be\nother things - the \\f[C]subcommand\\f[R] help will tell you what.\n.PP\nSource and destination paths are specified by the name you gave the\nstorage system in the config file then the sub path, e.g.\n\\[dq]drive:myfolder\\[dq] to look at \\[dq]myfolder\\[dq] in Google drive.\n.PP\nYou can define as many storage paths as you like in the config file.\n.PP\nPlease use the \\f[C]--interactive\\f[R]/\\f[C]-i\\f[R] flag while learning\nrclone to avoid accidental data loss.\n.SS Subcommands\n.PP\nrclone uses a system of subcommands.\nFor example\n.IP\n.nf\n\\f[C]\nrclone ls remote:path # lists a remote\nrclone copy /local/path remote:path # copies /local/path to the remote\nrclone sync --interactive /local/path remote:path # syncs /local/path to the remote\n\\f[R]\n.fi\n.SH rclone config\n.PP\nEnter an interactive configuration session.\n.SS Synopsis\n.PP\nEnter an interactive configuration session where you can setup new\nremotes and manage existing ones.\nYou may also set or remove a password to protect your configuration.\n.IP\n.nf\n\\f[C]\nrclone config [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for config\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.IP \\[bu] 2\nrclone config create (https://rclone.org/commands/rclone_config_create/)\n- Create a new remote with name, type and options.\n.IP \\[bu] 2\nrclone config delete (https://rclone.org/commands/rclone_config_delete/)\n- Delete an existing remote.\n.IP \\[bu] 2\nrclone config\ndisconnect (https://rclone.org/commands/rclone_config_disconnect/) -\nDisconnects user from remote\n.IP \\[bu] 2\nrclone config dump (https://rclone.org/commands/rclone_config_dump/) -\nDump the config file as JSON.\n.IP \\[bu] 2\nrclone config edit (https://rclone.org/commands/rclone_config_edit/) -\nEnter an interactive configuration session.\n.IP \\[bu] 2\nrclone config\nencryption (https://rclone.org/commands/rclone_config_encryption/) -\nset, remove and check the encryption for the config file\n.IP \\[bu] 2\nrclone config file (https://rclone.org/commands/rclone_config_file/) -\nShow path of configuration file in use.\n.IP \\[bu] 2\nrclone config\npassword (https://rclone.org/commands/rclone_config_password/) - Update\npassword in an existing remote.\n.IP \\[bu] 2\nrclone config paths (https://rclone.org/commands/rclone_config_paths/) -\nShow paths used for configuration, cache, temp etc.\n.IP \\[bu] 2\nrclone config\nproviders (https://rclone.org/commands/rclone_config_providers/) - List\nin JSON format all the providers and options.\n.IP \\[bu] 2\nrclone config\nreconnect (https://rclone.org/commands/rclone_config_reconnect/) -\nRe-authenticates user with remote.\n.IP \\[bu] 2\nrclone config\nredacted (https://rclone.org/commands/rclone_config_redacted/) - Print\nredacted (decrypted) config file, or the redacted config for a single\nremote.\n.IP \\[bu] 2\nrclone config show (https://rclone.org/commands/rclone_config_show/) -\nPrint (decrypted) config file, or the config for a single remote.\n.IP \\[bu] 2\nrclone config touch (https://rclone.org/commands/rclone_config_touch/) -\nEnsure configuration file exists.\n.IP \\[bu] 2\nrclone config update (https://rclone.org/commands/rclone_config_update/)\n- Update options in an existing remote.\n.IP \\[bu] 2\nrclone config\nuserinfo (https://rclone.org/commands/rclone_config_userinfo/) - Prints\ninfo about logged in user of remote.\n.SH rclone copy\n.PP\nCopy files from source to dest, skipping identical files.\n.SS Synopsis\n.PP\nCopy the source to the destination.\nDoes not transfer files that are identical on source and destination,\ntesting by size and modification time or MD5SUM.\nDoesn\\[aq]t delete files from the destination.\nIf you want to also delete files from destination, to make it match\nsource, use the sync (https://rclone.org/commands/rclone_sync/) command\ninstead.\n.PP\nNote that it is always the contents of the directory that is synced, not\nthe directory itself.\nSo when source:path is a directory, it\\[aq]s the contents of source:path\nthat are copied, not the directory name and contents.\n.PP\nTo copy single files, use the\ncopyto (https://rclone.org/commands/rclone_copyto/) command instead.\n.PP\nIf dest:path doesn\\[aq]t exist, it is created and the source:path\ncontents go there.\n.PP\nFor example\n.IP\n.nf\n\\f[C]\nrclone copy source:sourcepath dest:destpath\n\\f[R]\n.fi\n.PP\nLet\\[aq]s say there are two files in sourcepath\n.IP\n.nf\n\\f[C]\nsourcepath/one.txt\nsourcepath/two.txt\n\\f[R]\n.fi\n.PP\nThis copies them to\n.IP\n.nf\n\\f[C]\ndestpath/one.txt\ndestpath/two.txt\n\\f[R]\n.fi\n.PP\nNot to\n.IP\n.nf\n\\f[C]\ndestpath/sourcepath/one.txt\ndestpath/sourcepath/two.txt\n\\f[R]\n.fi\n.PP\nIf you are familiar with \\f[C]rsync\\f[R], rclone always works as if you\nhad written a trailing \\f[C]/\\f[R] - meaning \\[dq]copy the contents of\nthis directory\\[dq].\nThis applies to all commands and whether you are talking about the\nsource or destination.\n.PP\nSee the --no-traverse (https://rclone.org/docs/#no-traverse) option for\ncontrolling whether rclone lists the destination directory or not.\nSupplying this option when copying a small number of files into a large\ndestination can speed transfers up greatly.\n.PP\nFor example, if you have many files in /path/to/src but only a few of\nthem change every day, you can copy all the files which have changed\nrecently very efficiently like this:\n.IP\n.nf\n\\f[C]\nrclone copy --max-age 24h --no-traverse /path/to/src remote:\n\\f[R]\n.fi\n.PP\nRclone will sync the modification times of files and directories if the\nbackend supports it.\nIf metadata syncing is required then use the \\f[C]--metadata\\f[R] flag.\n.PP\nNote that the modification time and metadata for the root directory will\n\\f[B]not\\f[R] be synced.\nSee https://github.com/rclone/rclone/issues/7652 for more info.\n.PP\n\\f[B]Note\\f[R]: Use the \\f[C]-P\\f[R]/\\f[C]--progress\\f[R] flag to view\nreal-time transfer statistics.\n.PP\n\\f[B]Note\\f[R]: Use the \\f[C]--dry-run\\f[R] or the\n\\f[C]--interactive\\f[R]/\\f[C]-i\\f[R] flag to test without copying\nanything.\n.IP\n.nf\n\\f[C]\nrclone copy source:path dest:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --create-empty-src-dirs   Create empty source dirs on destination after copy\n  -h, --help                    help for copy\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Copy Options\n.PP\nFlags for anything which can copy a file\n.IP\n.nf\n\\f[C]\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don\\[aq]t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don\\[aq]t check the destination, copy regardless\n      --no-traverse                                 Don\\[aq]t traverse destination file system on copy\n      --no-update-dir-modtime                       Don\\[aq]t update directory modification times\n      --no-update-modtime                           Don\\[aq]t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. \\[aq]size,descending\\[aq]\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \\[dq].partial\\[dq])\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n\\f[R]\n.fi\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone sync\n.PP\nMake source and dest identical, modifying destination only.\n.SS Synopsis\n.PP\nSync the source to the destination, changing the destination only.\nDoesn\\[aq]t transfer files that are identical on source and destination,\ntesting by size and modification time or MD5SUM.\nDestination is updated to match source, including deleting files if\nnecessary (except duplicate objects, see below).\nIf you don\\[aq]t want to delete files from destination, use the\ncopy (https://rclone.org/commands/rclone_copy/) command instead.\n.PP\n\\f[B]Important\\f[R]: Since this can cause data loss, test first with the\n\\f[C]--dry-run\\f[R] or the \\f[C]--interactive\\f[R]/\\f[C]-i\\f[R] flag.\n.IP\n.nf\n\\f[C]\nrclone sync --interactive SOURCE remote:DESTINATION\n\\f[R]\n.fi\n.PP\nNote that files in the destination won\\[aq]t be deleted if there were\nany errors at any point.\nDuplicate objects (files with the same name, on those providers that\nsupport it) are also not yet handled.\n.PP\nIt is always the contents of the directory that is synced, not the\ndirectory itself.\nSo when source:path is a directory, it\\[aq]s the contents of source:path\nthat are copied, not the directory name and contents.\nSee extended explanation in the\ncopy (https://rclone.org/commands/rclone_copy/) command if unsure.\n.PP\nIf dest:path doesn\\[aq]t exist, it is created and the source:path\ncontents go there.\n.PP\nIt is not possible to sync overlapping remotes.\nHowever, you may exclude the destination from the sync with a filter\nrule or by putting an exclude-if-present file inside the destination\ndirectory and sync to a destination that is inside the source directory.\n.PP\nRclone will sync the modification times of files and directories if the\nbackend supports it.\nIf metadata syncing is required then use the \\f[C]--metadata\\f[R] flag.\n.PP\nNote that the modification time and metadata for the root directory will\n\\f[B]not\\f[R] be synced.\nSee https://github.com/rclone/rclone/issues/7652 for more info.\n.PP\n\\f[B]Note\\f[R]: Use the \\f[C]-P\\f[R]/\\f[C]--progress\\f[R] flag to view\nreal-time transfer statistics\n.PP\n\\f[B]Note\\f[R]: Use the \\f[C]rclone dedupe\\f[R] command to deal with\n\\[dq]Duplicate object/directory found in source/destination -\nignoring\\[dq] errors.\nSee this forum\npost (https://forum.rclone.org/t/sync-not-clearing-duplicates/14372) for\nmore info.\n.SH Logger Flags\n.PP\nThe \\f[C]--differ\\f[R], \\f[C]--missing-on-dst\\f[R],\n\\f[C]--missing-on-src\\f[R], \\f[C]--match\\f[R] and \\f[C]--error\\f[R]\nflags write paths, one per line, to the file name (or stdout if it is\n\\f[C]-\\f[R]) supplied.\nWhat they write is described in the help below.\nFor example \\f[C]--differ\\f[R] will write all paths which are present on\nboth the source and destination but different.\n.PP\nThe \\f[C]--combined\\f[R] flag will write a file (or stdout) which\ncontains all file paths with a symbol and then a space and then the path\nto tell you what happened to it.\nThese are reminiscent of diff files.\n.IP \\[bu] 2\n\\f[C]= path\\f[R] means path was found in source and destination and was\nidentical\n.IP \\[bu] 2\n\\[ga]- path\\[ga] means path was missing on the source, so only in the\ndestination\n.IP \\[bu] 2\n\\[ga]+ path\\[ga] means path was missing on the destination, so only in\nthe source\n.IP \\[bu] 2\n\\[ga]* path\\[ga] means path was present in source and destination but\ndifferent.\n.IP \\[bu] 2\n\\f[C]! path\\f[R] means there was an error reading or hashing the source\nor dest.\n.PP\nThe \\f[C]--dest-after\\f[R] flag writes a list file using the same format\nflags as\n\\f[C]lsf\\f[R] (https://rclone.org/commands/rclone_lsf/#synopsis)\n(including customizable options for hash, modtime,\netc. (https://rclone.org/commands/rclone_lsf/#synopsis)) Conceptually it\nis similar to rsync\\[aq]s \\f[C]--itemize-changes\\f[R], but not identical\n-- it should output an accurate list of what will be on the destination\nafter the sync.\n.PP\nNote that these logger flags have a few limitations, and certain\nscenarios are not currently supported:\n.IP \\[bu] 2\n\\f[C]--max-duration\\f[R] / \\f[C]CutoffModeHard\\f[R]\n.IP \\[bu] 2\n\\f[C]--compare-dest\\f[R] / \\f[C]--copy-dest\\f[R]\n.IP \\[bu] 2\nserver-side moves of an entire dir at once\n.IP \\[bu] 2\nHigh-level retries, because there would be duplicates (use\n\\f[C]--retries 1\\f[R] to disable)\n.IP \\[bu] 2\nPossibly some unusual error scenarios\n.PP\nNote also that each file is logged during the sync, as opposed to after,\nso it is most useful as a predictor of what SHOULD happen to each file\n(which may or may not match what actually DID.)\n.IP\n.nf\n\\f[C]\nrclone sync source:path dest:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --absolute                Put a leading / in front of path names\n      --combined string         Make a combined report of changes to this file\n      --create-empty-src-dirs   Create empty source dirs on destination after sync\n      --csv                     Output in CSV format\n      --dest-after string       Report all files that exist on the dest post-sync\n      --differ string           Report all non-matching files to this file\n  -d, --dir-slash               Append a slash to directory names (default true)\n      --dirs-only               Only list directories\n      --error string            Report all files with errors (hashing or reading) to this file\n      --files-only              Only list files (default true)\n  -F, --format string           Output format - see lsf help for details (default \\[dq]p\\[dq])\n      --hash h                  Use this hash when h is used in the format MD5|SHA-1|DropboxHash (default \\[dq]md5\\[dq])\n  -h, --help                    help for sync\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n  -s, --separator string        Separator for the items in the format (default \\[dq];\\[dq])\n  -t, --timeformat string       Specify a custom time format, or \\[aq]max\\[aq] for max precision supported by remote (default: 2006-01-02 15:04:05)\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Copy Options\n.PP\nFlags for anything which can copy a file\n.IP\n.nf\n\\f[C]\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don\\[aq]t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don\\[aq]t check the destination, copy regardless\n      --no-traverse                                 Don\\[aq]t traverse destination file system on copy\n      --no-update-dir-modtime                       Don\\[aq]t update directory modification times\n      --no-update-modtime                           Don\\[aq]t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. \\[aq]size,descending\\[aq]\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \\[dq].partial\\[dq])\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n\\f[R]\n.fi\n.SS Sync Options\n.PP\nFlags used for sync commands\n.IP\n.nf\n\\f[C]\n      --backup-dir string               Make backups into hierarchy based in DIR\n      --delete-after                    When synchronizing, delete files on destination after transferring (default)\n      --delete-before                   When synchronizing, delete files on destination before transferring\n      --delete-during                   When synchronizing, delete files during transfer\n      --fix-case                        Force rename of case insensitive dest to match source\n      --ignore-errors                   Delete even if there are I/O errors\n      --max-delete int                  When synchronizing, limit the number of deletes (default -1)\n      --max-delete-size SizeSuffix      When synchronizing, limit the total size of deletes (default off)\n      --suffix string                   Suffix to add to changed files\n      --suffix-keep-extension           Preserve the extension when using --suffix\n      --track-renames                   When synchronizing, track file renames and do a server-side move if possible\n      --track-renames-strategy string   Strategies to use when synchronizing using track-renames hash|modtime|leaf (default \\[dq]hash\\[dq])\n\\f[R]\n.fi\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone move\n.PP\nMove files from source to dest.\n.SS Synopsis\n.PP\nMoves the contents of the source directory to the destination directory.\nRclone will error if the source and destination overlap and the remote\ndoes not support a server-side directory move operation.\n.PP\nTo move single files, use the\nmoveto (https://rclone.org/commands/rclone_moveto/) command instead.\n.PP\nIf no filters are in use and if possible this will server-side move\n\\f[C]source:path\\f[R] into \\f[C]dest:path\\f[R].\nAfter this \\f[C]source:path\\f[R] will no longer exist.\n.PP\nOtherwise for each file in \\f[C]source:path\\f[R] selected by the filters\n(if any) this will move it into \\f[C]dest:path\\f[R].\nIf possible a server-side move will be used, otherwise it will copy it\n(server-side if possible) into \\f[C]dest:path\\f[R] then delete the\noriginal (if no errors on copy) in \\f[C]source:path\\f[R].\n.PP\nIf you want to delete empty source directories after move, use the\n\\f[C]--delete-empty-src-dirs\\f[R] flag.\n.PP\nSee the --no-traverse (https://rclone.org/docs/#no-traverse) option for\ncontrolling whether rclone lists the destination directory or not.\nSupplying this option when moving a small number of files into a large\ndestination can speed transfers up greatly.\n.PP\nRclone will sync the modification times of files and directories if the\nbackend supports it.\nIf metadata syncing is required then use the \\f[C]--metadata\\f[R] flag.\n.PP\nNote that the modification time and metadata for the root directory will\n\\f[B]not\\f[R] be synced.\nSee https://github.com/rclone/rclone/issues/7652 for more info.\n.PP\n\\f[B]Important\\f[R]: Since this can cause data loss, test first with the\n\\f[C]--dry-run\\f[R] or the \\f[C]--interactive\\f[R]/\\f[C]-i\\f[R] flag.\n.PP\n\\f[B]Note\\f[R]: Use the \\f[C]-P\\f[R]/\\f[C]--progress\\f[R] flag to view\nreal-time transfer statistics.\n.IP\n.nf\n\\f[C]\nrclone move source:path dest:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --create-empty-src-dirs   Create empty source dirs on destination after move\n      --delete-empty-src-dirs   Delete empty source dirs after move\n  -h, --help                    help for move\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Copy Options\n.PP\nFlags for anything which can copy a file\n.IP\n.nf\n\\f[C]\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don\\[aq]t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don\\[aq]t check the destination, copy regardless\n      --no-traverse                                 Don\\[aq]t traverse destination file system on copy\n      --no-update-dir-modtime                       Don\\[aq]t update directory modification times\n      --no-update-modtime                           Don\\[aq]t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. \\[aq]size,descending\\[aq]\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \\[dq].partial\\[dq])\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n\\f[R]\n.fi\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone delete\n.PP\nRemove the files in path.\n.SS Synopsis\n.PP\nRemove the files in path.\nUnlike purge (https://rclone.org/commands/rclone_purge/) it obeys\ninclude/exclude filters so can be used to selectively delete files.\n.PP\n\\f[C]rclone delete\\f[R] only deletes files but leaves the directory\nstructure alone.\nIf you want to delete a directory and all of its contents use the\npurge (https://rclone.org/commands/rclone_purge/) command.\n.PP\nIf you supply the \\f[C]--rmdirs\\f[R] flag, it will remove all empty\ndirectories along with it.\nYou can also use the separate command\nrmdir (https://rclone.org/commands/rclone_rmdir/) or\nrmdirs (https://rclone.org/commands/rclone_rmdirs/) to delete empty\ndirectories only.\n.PP\nFor example, to delete all files bigger than 100 MiB, you may first want\nto check what would be deleted (use either):\n.IP\n.nf\n\\f[C]\nrclone --min-size 100M lsl remote:path\nrclone --dry-run --min-size 100M delete remote:path\n\\f[R]\n.fi\n.PP\nThen proceed with the actual delete:\n.IP\n.nf\n\\f[C]\nrclone --min-size 100M delete remote:path\n\\f[R]\n.fi\n.PP\nThat reads \\[dq]delete everything with a minimum size of 100 MiB\\[dq],\nhence delete all files bigger than 100 MiB.\n.PP\n\\f[B]Important\\f[R]: Since this can cause data loss, test first with the\n\\f[C]--dry-run\\f[R] or the \\f[C]--interactive\\f[R]/\\f[C]-i\\f[R] flag.\n.IP\n.nf\n\\f[C]\nrclone delete remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help     help for delete\n      --rmdirs   rmdirs removes empty directories but leaves root intact\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone purge\n.PP\nRemove the path and all of its contents.\n.SS Synopsis\n.PP\nRemove the path and all of its contents.\nNote that this does not obey include/exclude filters - everything will\nbe removed.\nUse the delete (https://rclone.org/commands/rclone_delete/) command if\nyou want to selectively delete files.\nTo delete empty directories only, use command\nrmdir (https://rclone.org/commands/rclone_rmdir/) or\nrmdirs (https://rclone.org/commands/rclone_rmdirs/).\n.PP\n\\f[B]Important\\f[R]: Since this can cause data loss, test first with the\n\\f[C]--dry-run\\f[R] or the \\f[C]--interactive\\f[R]/\\f[C]-i\\f[R] flag.\n.IP\n.nf\n\\f[C]\nrclone purge remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for purge\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone mkdir\n.PP\nMake the path if it doesn\\[aq]t already exist.\n.IP\n.nf\n\\f[C]\nrclone mkdir remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for mkdir\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone rmdir\n.PP\nRemove the empty directory at path.\n.SS Synopsis\n.PP\nThis removes empty directory given by path.\nWill not remove the path if it has any objects in it, not even empty\nsubdirectories.\nUse command rmdirs (https://rclone.org/commands/rclone_rmdirs/) (or\ndelete (https://rclone.org/commands/rclone_delete/) with option\n\\f[C]--rmdirs\\f[R]) to do that.\n.PP\nTo delete a path and any objects in it, use\npurge (https://rclone.org/commands/rclone_purge/) command.\n.IP\n.nf\n\\f[C]\nrclone rmdir remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for rmdir\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone check\n.PP\nChecks the files in the source and destination match.\n.SS Synopsis\n.PP\nChecks the files in the source and destination match.\nIt compares sizes and hashes (MD5 or SHA1) and logs a report of files\nthat don\\[aq]t match.\nIt doesn\\[aq]t alter the source or destination.\n.PP\nFor the crypt (https://rclone.org/crypt/) remote there is a dedicated\ncommand, cryptcheck (https://rclone.org/commands/rclone_cryptcheck/),\nthat are able to check the checksums of the encrypted files.\n.PP\nIf you supply the \\f[C]--size-only\\f[R] flag, it will only compare the\nsizes not the hashes as well.\nUse this for a quick check.\n.PP\nIf you supply the \\f[C]--download\\f[R] flag, it will download the data\nfrom both remotes and check them against each other on the fly.\nThis can be useful for remotes that don\\[aq]t support hashes or if you\nreally want to check all the data.\n.PP\nIf you supply the \\f[C]--checkfile HASH\\f[R] flag with a valid hash\nname, the \\f[C]source:path\\f[R] must point to a text file in the SUM\nformat.\n.PP\nIf you supply the \\f[C]--one-way\\f[R] flag, it will only check that\nfiles in the source match the files in the destination, not the other\nway around.\nThis means that extra files in the destination that are not in the\nsource will not be detected.\n.PP\nThe \\f[C]--differ\\f[R], \\f[C]--missing-on-dst\\f[R],\n\\f[C]--missing-on-src\\f[R], \\f[C]--match\\f[R] and \\f[C]--error\\f[R]\nflags write paths, one per line, to the file name (or stdout if it is\n\\f[C]-\\f[R]) supplied.\nWhat they write is described in the help below.\nFor example \\f[C]--differ\\f[R] will write all paths which are present on\nboth the source and destination but different.\n.PP\nThe \\f[C]--combined\\f[R] flag will write a file (or stdout) which\ncontains all file paths with a symbol and then a space and then the path\nto tell you what happened to it.\nThese are reminiscent of diff files.\n.IP \\[bu] 2\n\\f[C]= path\\f[R] means path was found in source and destination and was\nidentical\n.IP \\[bu] 2\n\\[ga]- path\\[ga] means path was missing on the source, so only in the\ndestination\n.IP \\[bu] 2\n\\[ga]+ path\\[ga] means path was missing on the destination, so only in\nthe source\n.IP \\[bu] 2\n\\[ga]* path\\[ga] means path was present in source and destination but\ndifferent.\n.IP \\[bu] 2\n\\f[C]! path\\f[R] means there was an error reading or hashing the source\nor dest.\n.PP\nThe default number of parallel checks is 8.\nSee the --checkers=N (https://rclone.org/docs/#checkers-n) option for\nmore information.\n.IP\n.nf\n\\f[C]\nrclone check source:path dest:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -C, --checkfile string        Treat source:path as a SUM file with hashes of given type\n      --combined string         Make a combined report of changes to this file\n      --differ string           Report all non-matching files to this file\n      --download                Check by downloading rather than with hash\n      --error string            Report all files with errors (hashing or reading) to this file\n  -h, --help                    help for check\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n      --one-way                 Check one way only, source files must exist on remote\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Check Options\n.PP\nFlags used for check commands\n.IP\n.nf\n\\f[C]\n      --max-backlog int   Maximum number of objects in sync or check backlog (default 10000)\n\\f[R]\n.fi\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone ls\n.PP\nList the objects in the path with size and path.\n.SS Synopsis\n.PP\nLists the objects in the source path to standard output in a human\nreadable format with size and path.\nRecurses by default.\n.PP\nEg\n.IP\n.nf\n\\f[C]\n$ rclone ls swift:bucket\n    60295 bevajer5jef\n    90613 canole\n    94467 diwogej7\n    37600 fubuwic\n\\f[R]\n.fi\n.PP\nAny of the filtering options can be applied to this command.\n.PP\nThere are several related list commands\n.IP \\[bu] 2\n\\f[C]ls\\f[R] to list size and path of objects only\n.IP \\[bu] 2\n\\f[C]lsl\\f[R] to list modification time, size and path of objects only\n.IP \\[bu] 2\n\\f[C]lsd\\f[R] to list directories only\n.IP \\[bu] 2\n\\f[C]lsf\\f[R] to list objects and directories in easy to parse format\n.IP \\[bu] 2\n\\f[C]lsjson\\f[R] to list objects and directories in JSON format\n.PP\n\\f[C]ls\\f[R],\\f[C]lsl\\f[R],\\f[C]lsd\\f[R] are designed to be\nhuman-readable.\n\\f[C]lsf\\f[R] is designed to be human and machine-readable.\n\\f[C]lsjson\\f[R] is designed to be machine-readable.\n.PP\nNote that \\f[C]ls\\f[R] and \\f[C]lsl\\f[R] recurse by default - use\n\\f[C]--max-depth 1\\f[R] to stop the recursion.\n.PP\nThe other list commands \\f[C]lsd\\f[R],\\f[C]lsf\\f[R],\\f[C]lsjson\\f[R] do\nnot recurse by default - use \\f[C]-R\\f[R] to make them recurse.\n.PP\nListing a nonexistent directory will produce an error except for remotes\nwhich can\\[aq]t have empty directories (e.g.\ns3, swift, or gcs - the bucket-based remotes).\n.IP\n.nf\n\\f[C]\nrclone ls remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for ls\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone lsd\n.PP\nList all directories/containers/buckets in the path.\n.SS Synopsis\n.PP\nLists the directories in the source path to standard output.\nDoes not recurse by default.\nUse the \\f[C]-R\\f[R] flag to recurse.\n.PP\nThis command lists the total size of the directory (if known, -1 if\nnot), the modification time (if known, the current time if not), the\nnumber of objects in the directory (if known, -1 if not) and the name of\nthe directory, Eg\n.IP\n.nf\n\\f[C]\n$ rclone lsd swift:\n      494000 2018-04-26 08:43:20     10000 10000files\n          65 2018-04-26 08:43:20         1 1File\n\\f[R]\n.fi\n.PP\nOr\n.IP\n.nf\n\\f[C]\n$ rclone lsd drive:test\n          -1 2016-10-17 17:41:53        -1 1000files\n          -1 2017-01-03 14:40:54        -1 2500files\n          -1 2017-07-08 14:39:28        -1 4000files\n\\f[R]\n.fi\n.PP\nIf you just want the directory names use\n\\f[C]rclone lsf --dirs-only\\f[R].\n.PP\nAny of the filtering options can be applied to this command.\n.PP\nThere are several related list commands\n.IP \\[bu] 2\n\\f[C]ls\\f[R] to list size and path of objects only\n.IP \\[bu] 2\n\\f[C]lsl\\f[R] to list modification time, size and path of objects only\n.IP \\[bu] 2\n\\f[C]lsd\\f[R] to list directories only\n.IP \\[bu] 2\n\\f[C]lsf\\f[R] to list objects and directories in easy to parse format\n.IP \\[bu] 2\n\\f[C]lsjson\\f[R] to list objects and directories in JSON format\n.PP\n\\f[C]ls\\f[R],\\f[C]lsl\\f[R],\\f[C]lsd\\f[R] are designed to be\nhuman-readable.\n\\f[C]lsf\\f[R] is designed to be human and machine-readable.\n\\f[C]lsjson\\f[R] is designed to be machine-readable.\n.PP\nNote that \\f[C]ls\\f[R] and \\f[C]lsl\\f[R] recurse by default - use\n\\f[C]--max-depth 1\\f[R] to stop the recursion.\n.PP\nThe other list commands \\f[C]lsd\\f[R],\\f[C]lsf\\f[R],\\f[C]lsjson\\f[R] do\nnot recurse by default - use \\f[C]-R\\f[R] to make them recurse.\n.PP\nListing a nonexistent directory will produce an error except for remotes\nwhich can\\[aq]t have empty directories (e.g.\ns3, swift, or gcs - the bucket-based remotes).\n.IP\n.nf\n\\f[C]\nrclone lsd remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help        help for lsd\n  -R, --recursive   Recurse into the listing\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone lsl\n.PP\nList the objects in path with modification time, size and path.\n.SS Synopsis\n.PP\nLists the objects in the source path to standard output in a human\nreadable format with modification time, size and path.\nRecurses by default.\n.PP\nEg\n.IP\n.nf\n\\f[C]\n$ rclone lsl swift:bucket\n    60295 2016-06-25 18:55:41.062626927 bevajer5jef\n    90613 2016-06-25 18:55:43.302607074 canole\n    94467 2016-06-25 18:55:43.046609333 diwogej7\n    37600 2016-06-25 18:55:40.814629136 fubuwic\n\\f[R]\n.fi\n.PP\nAny of the filtering options can be applied to this command.\n.PP\nThere are several related list commands\n.IP \\[bu] 2\n\\f[C]ls\\f[R] to list size and path of objects only\n.IP \\[bu] 2\n\\f[C]lsl\\f[R] to list modification time, size and path of objects only\n.IP \\[bu] 2\n\\f[C]lsd\\f[R] to list directories only\n.IP \\[bu] 2\n\\f[C]lsf\\f[R] to list objects and directories in easy to parse format\n.IP \\[bu] 2\n\\f[C]lsjson\\f[R] to list objects and directories in JSON format\n.PP\n\\f[C]ls\\f[R],\\f[C]lsl\\f[R],\\f[C]lsd\\f[R] are designed to be\nhuman-readable.\n\\f[C]lsf\\f[R] is designed to be human and machine-readable.\n\\f[C]lsjson\\f[R] is designed to be machine-readable.\n.PP\nNote that \\f[C]ls\\f[R] and \\f[C]lsl\\f[R] recurse by default - use\n\\f[C]--max-depth 1\\f[R] to stop the recursion.\n.PP\nThe other list commands \\f[C]lsd\\f[R],\\f[C]lsf\\f[R],\\f[C]lsjson\\f[R] do\nnot recurse by default - use \\f[C]-R\\f[R] to make them recurse.\n.PP\nListing a nonexistent directory will produce an error except for remotes\nwhich can\\[aq]t have empty directories (e.g.\ns3, swift, or gcs - the bucket-based remotes).\n.IP\n.nf\n\\f[C]\nrclone lsl remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for lsl\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone md5sum\n.PP\nProduces an md5sum file for all the objects in the path.\n.SS Synopsis\n.PP\nProduces an md5sum file for all the objects in the path.\nThis is in the same format as the standard md5sum tool produces.\n.PP\nBy default, the hash is requested from the remote.\nIf MD5 is not supported by the remote, no hash will be returned.\nWith the download flag, the file will be downloaded from the remote and\nhashed locally enabling MD5 for any remote.\n.PP\nFor other algorithms, see the\nhashsum (https://rclone.org/commands/rclone_hashsum/) command.\nRunning \\f[C]rclone md5sum remote:path\\f[R] is equivalent to running\n\\f[C]rclone hashsum MD5 remote:path\\f[R].\n.PP\nThis command can also hash data received on standard input (stdin), by\nnot passing a remote:path, or by passing a hyphen as remote:path when\nthere is data to read (if not, the hyphen will be treated literally, as\na relative path).\n.IP\n.nf\n\\f[C]\nrclone md5sum remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --base64               Output base64 encoded hashsum\n  -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n      --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n  -h, --help                 help for md5sum\n      --output-file string   Output hashsums to a file rather than the terminal\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone sha1sum\n.PP\nProduces an sha1sum file for all the objects in the path.\n.SS Synopsis\n.PP\nProduces an sha1sum file for all the objects in the path.\nThis is in the same format as the standard sha1sum tool produces.\n.PP\nBy default, the hash is requested from the remote.\nIf SHA-1 is not supported by the remote, no hash will be returned.\nWith the download flag, the file will be downloaded from the remote and\nhashed locally enabling SHA-1 for any remote.\n.PP\nFor other algorithms, see the\nhashsum (https://rclone.org/commands/rclone_hashsum/) command.\nRunning \\f[C]rclone sha1sum remote:path\\f[R] is equivalent to running\n\\f[C]rclone hashsum SHA1 remote:path\\f[R].\n.PP\nThis command can also hash data received on standard input (stdin), by\nnot passing a remote:path, or by passing a hyphen as remote:path when\nthere is data to read (if not, the hyphen will be treated literally, as\na relative path).\n.PP\nThis command can also hash data received on STDIN, if not passing a\nremote:path.\n.IP\n.nf\n\\f[C]\nrclone sha1sum remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --base64               Output base64 encoded hashsum\n  -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n      --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n  -h, --help                 help for sha1sum\n      --output-file string   Output hashsums to a file rather than the terminal\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone size\n.PP\nPrints the total size and number of objects in remote:path.\n.SS Synopsis\n.PP\nCounts objects in the path and calculates the total size.\nPrints the result to standard output.\n.PP\nBy default the output is in human-readable format, but shows values in\nboth human-readable format as well as the raw numbers (global option\n\\f[C]--human-readable\\f[R] is not considered).\nUse option \\f[C]--json\\f[R] to format output as JSON instead.\n.PP\nRecurses by default, use \\f[C]--max-depth 1\\f[R] to stop the recursion.\n.PP\nSome backends do not always provide file sizes, see for example Google\nPhotos (https://rclone.org/googlephotos/#size) and Google\nDocs (https://rclone.org/drive/#limitations-of-google-docs).\nRclone will then show a notice in the log indicating how many such files\nwere encountered, and count them in as empty files in the output of the\nsize command.\n.IP\n.nf\n\\f[C]\nrclone size remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for size\n      --json   Format output as JSON\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone version\n.PP\nShow the version number.\n.SS Synopsis\n.PP\nShow the rclone version number, the go version, the build target OS and\narchitecture, the runtime OS and kernel version and bitness, build tags\nand the type of executable (static or dynamic).\n.PP\nFor example:\n.IP\n.nf\n\\f[C]\n$ rclone version\nrclone v1.55.0\n- os/version: ubuntu 18.04 (64 bit)\n- os/kernel: 4.15.0-136-generic (x86_64)\n- os/type: linux\n- os/arch: amd64\n- go/version: go1.16\n- go/linking: static\n- go/tags: none\n\\f[R]\n.fi\n.PP\nNote: before rclone version 1.55 the os/type and os/arch lines were\nmerged, and the \\[dq]go/version\\[dq] line was tagged as \\[dq]go\nversion\\[dq].\n.PP\nIf you supply the --check flag, then it will do an online check to\ncompare your version with the latest release and the latest beta.\n.IP\n.nf\n\\f[C]\n$ rclone version --check\nyours:  1.42.0.6\nlatest: 1.42          (released 2018-06-16)\nbeta:   1.42.0.5      (released 2018-06-17)\n\\f[R]\n.fi\n.PP\nOr\n.IP\n.nf\n\\f[C]\n$ rclone version --check\nyours:  1.41\nlatest: 1.42          (released 2018-06-16)\n  upgrade: https://downloads.rclone.org/v1.42\nbeta:   1.42.0.5      (released 2018-06-17)\n  upgrade: https://beta.rclone.org/v1.42-005-g56e1e820\n\\f[R]\n.fi\n.IP\n.nf\n\\f[C]\nrclone version [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --check   Check for new version\n  -h, --help    help for version\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone cleanup\n.PP\nClean up the remote if possible.\n.SS Synopsis\n.PP\nClean up the remote if possible.\nEmpty the trash or delete old file versions.\nNot supported by all remotes.\n.IP\n.nf\n\\f[C]\nrclone cleanup remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for cleanup\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone dedupe\n.PP\nInteractively find duplicate filenames and delete/rename them.\n.SS Synopsis\n.PP\nBy default \\f[C]dedupe\\f[R] interactively finds files with duplicate\nnames and offers to delete all but one or rename them to be different.\nThis is known as deduping by name.\n.PP\nDeduping by name is only useful with a small group of backends (e.g.\nGoogle Drive, Opendrive) that can have duplicate file names.\nIt can be run on wrapping backends (e.g.\ncrypt) if they wrap a backend which supports duplicate file names.\n.PP\nHowever if \\f[C]--by-hash\\f[R] is passed in then dedupe will find files\nwith duplicate hashes instead which will work on any backend which\nsupports at least one hash.\nThis can be used to find files with duplicate content.\nThis is known as deduping by hash.\n.PP\nIf deduping by name, first rclone will merge directories with the same\nname.\nIt will do this iteratively until all the identically named directories\nhave been merged.\n.PP\nNext, if deduping by name, for every group of duplicate file names /\nhashes, it will delete all but one identical file it finds without\nconfirmation.\nThis means that for most duplicated files the \\f[C]dedupe\\f[R] command\nwill not be interactive.\n.PP\n\\f[C]dedupe\\f[R] considers files to be identical if they have the same\nfile path and the same hash.\nIf the backend does not support hashes (e.g.\ncrypt wrapping Google Drive) then they will never be found to be\nidentical.\nIf you use the \\f[C]--size-only\\f[R] flag then files will be considered\nidentical if they have the same size (any hash will be ignored).\nThis can be useful on crypt backends which do not support hashes.\n.PP\nNext rclone will resolve the remaining duplicates.\nExactly which action is taken depends on the dedupe mode.\nBy default, rclone will interactively query the user for each one.\n.PP\n\\f[B]Important\\f[R]: Since this can cause data loss, test first with the\n\\f[C]--dry-run\\f[R] or the \\f[C]--interactive\\f[R]/\\f[C]-i\\f[R] flag.\n.PP\nHere is an example run.\n.PP\nBefore - with duplicates\n.IP\n.nf\n\\f[C]\n$ rclone lsl drive:dupes\n  6048320 2016-03-05 16:23:16.798000000 one.txt\n  6048320 2016-03-05 16:23:11.775000000 one.txt\n   564374 2016-03-05 16:23:06.731000000 one.txt\n  6048320 2016-03-05 16:18:26.092000000 one.txt\n  6048320 2016-03-05 16:22:46.185000000 two.txt\n  1744073 2016-03-05 16:22:38.104000000 two.txt\n   564374 2016-03-05 16:22:52.118000000 two.txt\n\\f[R]\n.fi\n.PP\nNow the \\f[C]dedupe\\f[R] session\n.IP\n.nf\n\\f[C]\n$ rclone dedupe drive:dupes\n2016/03/05 16:24:37 Google drive root \\[aq]dupes\\[aq]: Looking for duplicates using interactive mode.\none.txt: Found 4 files with duplicate names\none.txt: Deleting 2/3 identical duplicates (MD5 \\[dq]1eedaa9fe86fd4b8632e2ac549403b36\\[dq])\none.txt: 2 duplicates remain\n  1:      6048320 bytes, 2016-03-05 16:23:16.798000000, MD5 1eedaa9fe86fd4b8632e2ac549403b36\n  2:       564374 bytes, 2016-03-05 16:23:06.731000000, MD5 7594e7dc9fc28f727c42ee3e0749de81\ns) Skip and do nothing\nk) Keep just one (choose which in next step)\nr) Rename all to be different (by changing file.jpg to file-1.jpg)\ns/k/r> k\nEnter the number of the file to keep> 1\none.txt: Deleted 1 extra copies\ntwo.txt: Found 3 files with duplicate names\ntwo.txt: 3 duplicates remain\n  1:       564374 bytes, 2016-03-05 16:22:52.118000000, MD5 7594e7dc9fc28f727c42ee3e0749de81\n  2:      6048320 bytes, 2016-03-05 16:22:46.185000000, MD5 1eedaa9fe86fd4b8632e2ac549403b36\n  3:      1744073 bytes, 2016-03-05 16:22:38.104000000, MD5 851957f7fb6f0bc4ce76be966d336802\ns) Skip and do nothing\nk) Keep just one (choose which in next step)\nr) Rename all to be different (by changing file.jpg to file-1.jpg)\ns/k/r> r\ntwo-1.txt: renamed from: two.txt\ntwo-2.txt: renamed from: two.txt\ntwo-3.txt: renamed from: two.txt\n\\f[R]\n.fi\n.PP\nThe result being\n.IP\n.nf\n\\f[C]\n$ rclone lsl drive:dupes\n  6048320 2016-03-05 16:23:16.798000000 one.txt\n   564374 2016-03-05 16:22:52.118000000 two-1.txt\n  6048320 2016-03-05 16:22:46.185000000 two-2.txt\n  1744073 2016-03-05 16:22:38.104000000 two-3.txt\n\\f[R]\n.fi\n.PP\nDedupe can be run non interactively using the \\f[C]--dedupe-mode\\f[R]\nflag or by using an extra parameter with the same value\n.IP \\[bu] 2\n\\f[C]--dedupe-mode interactive\\f[R] - interactive as above.\n.IP \\[bu] 2\n\\f[C]--dedupe-mode skip\\f[R] - removes identical files then skips\nanything left.\n.IP \\[bu] 2\n\\f[C]--dedupe-mode first\\f[R] - removes identical files then keeps the\nfirst one.\n.IP \\[bu] 2\n\\f[C]--dedupe-mode newest\\f[R] - removes identical files then keeps the\nnewest one.\n.IP \\[bu] 2\n\\f[C]--dedupe-mode oldest\\f[R] - removes identical files then keeps the\noldest one.\n.IP \\[bu] 2\n\\f[C]--dedupe-mode largest\\f[R] - removes identical files then keeps the\nlargest one.\n.IP \\[bu] 2\n\\f[C]--dedupe-mode smallest\\f[R] - removes identical files then keeps\nthe smallest one.\n.IP \\[bu] 2\n\\f[C]--dedupe-mode rename\\f[R] - removes identical files then renames\nthe rest to be different.\n.IP \\[bu] 2\n\\f[C]--dedupe-mode list\\f[R] - lists duplicate dirs and files only and\nchanges nothing.\n.PP\nFor example, to rename all the identically named photos in your Google\nPhotos directory, do\n.IP\n.nf\n\\f[C]\nrclone dedupe --dedupe-mode rename \\[dq]drive:Google Photos\\[dq]\n\\f[R]\n.fi\n.PP\nOr\n.IP\n.nf\n\\f[C]\nrclone dedupe rename \\[dq]drive:Google Photos\\[dq]\n\\f[R]\n.fi\n.IP\n.nf\n\\f[C]\nrclone dedupe [mode] remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --by-hash              Find identical hashes rather than names\n      --dedupe-mode string   Dedupe mode interactive|skip|first|newest|oldest|largest|smallest|rename (default \\[dq]interactive\\[dq])\n  -h, --help                 help for dedupe\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone about\n.PP\nGet quota information from the remote.\n.SS Synopsis\n.PP\nPrints quota information about a remote to standard output.\nThe output is typically used, free, quota and trash contents.\n.PP\nE.g.\nTypical output from \\f[C]rclone about remote:\\f[R] is:\n.IP\n.nf\n\\f[C]\nTotal:   17 GiB\nUsed:    7.444 GiB\nFree:    1.315 GiB\nTrashed: 100.000 MiB\nOther:   8.241 GiB\n\\f[R]\n.fi\n.PP\nWhere the fields are:\n.IP \\[bu] 2\nTotal: Total size available.\n.IP \\[bu] 2\nUsed: Total size used.\n.IP \\[bu] 2\nFree: Total space available to this user.\n.IP \\[bu] 2\nTrashed: Total space used by trash.\n.IP \\[bu] 2\nOther: Total amount in other storage (e.g.\nGmail, Google Photos).\n.IP \\[bu] 2\nObjects: Total number of objects in the storage.\n.PP\nAll sizes are in number of bytes.\n.PP\nApplying a \\f[C]--full\\f[R] flag to the command prints the bytes in\nfull, e.g.\n.IP\n.nf\n\\f[C]\nTotal:   18253611008\nUsed:    7993453766\nFree:    1411001220\nTrashed: 104857602\nOther:   8849156022\n\\f[R]\n.fi\n.PP\nA \\f[C]--json\\f[R] flag generates conveniently machine-readable output,\ne.g.\n.IP\n.nf\n\\f[C]\n{\n    \\[dq]total\\[dq]: 18253611008,\n    \\[dq]used\\[dq]: 7993453766,\n    \\[dq]trashed\\[dq]: 104857602,\n    \\[dq]other\\[dq]: 8849156022,\n    \\[dq]free\\[dq]: 1411001220\n}\n\\f[R]\n.fi\n.PP\nNot all backends print all fields.\nInformation is not included if it is not provided by a backend.\nWhere the value is unlimited it is omitted.\n.PP\nSome backends does not support the \\f[C]rclone about\\f[R] command at\nall, see complete list in\ndocumentation (https://rclone.org/overview/#optional-features).\n.IP\n.nf\n\\f[C]\nrclone about remote: [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --full   Full numbers instead of human-readable\n  -h, --help   help for about\n      --json   Format output as JSON\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone authorize\n.PP\nRemote authorization.\n.SS Synopsis\n.PP\nRemote authorization.\nUsed to authorize a remote or headless rclone from a machine with a\nbrowser - use as instructed by rclone config.\n.PP\nUse --auth-no-open-browser to prevent rclone to open auth link in\ndefault browser automatically.\n.PP\nUse --template to generate HTML output via a custom Go template.\nIf a blank string is provided as an argument to this flag, the default\ntemplate is used.\n.IP\n.nf\n\\f[C]\nrclone authorize [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --auth-no-open-browser   Do not automatically open auth link in default browser\n  -h, --help                   help for authorize\n      --template string        The path to a custom Go template for generating HTML responses\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone backend\n.PP\nRun a backend-specific command.\n.SS Synopsis\n.PP\nThis runs a backend-specific command.\nThe commands themselves (except for \\[dq]help\\[dq] and\n\\[dq]features\\[dq]) are defined by the backends and you should see the\nbackend docs for definitions.\n.PP\nYou can discover what commands a backend implements by using\n.IP\n.nf\n\\f[C]\nrclone backend help remote:\nrclone backend help <backendname>\n\\f[R]\n.fi\n.PP\nYou can also discover information about the backend using (see\noperations/fsinfo (https://rclone.org/rc/#operations-fsinfo) in the\nremote control docs for more info).\n.IP\n.nf\n\\f[C]\nrclone backend features remote:\n\\f[R]\n.fi\n.PP\nPass options to the backend command with -o.\nThis should be key=value or key, e.g.:\n.IP\n.nf\n\\f[C]\nrclone backend stats remote:path stats -o format=json -o long\n\\f[R]\n.fi\n.PP\nPass arguments to the backend by placing them on the end of the line\n.IP\n.nf\n\\f[C]\nrclone backend cleanup remote:path file1 file2 file3\n\\f[R]\n.fi\n.PP\nNote to run these commands on a running backend then see\nbackend/command (https://rclone.org/rc/#backend-command) in the rc docs.\n.IP\n.nf\n\\f[C]\nrclone backend <command> remote:path [opts] <args> [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help                 help for backend\n      --json                 Always output in JSON format\n  -o, --option stringArray   Option in the form name=value or name\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone bisync\n.PP\nPerform bidirectional synchronization between two paths.\n.SS Synopsis\n.PP\nPerform bidirectional synchronization between two paths.\n.PP\nBisync (https://rclone.org/bisync/) provides a bidirectional cloud sync\nsolution in rclone.\nIt retains the Path1 and Path2 filesystem listings from the prior run.\nOn each successive run it will: - list files on Path1 and Path2, and\ncheck for changes on each side.\nChanges include \\f[C]New\\f[R], \\f[C]Newer\\f[R], \\f[C]Older\\f[R], and\n\\f[C]Deleted\\f[R] files.\n- Propagate changes on Path1 to Path2, and vice-versa.\n.PP\nBisync is \\f[B]in beta\\f[R] and is considered an \\f[B]advanced\ncommand\\f[R], so use with care.\nMake sure you have read and understood the entire\nmanual (https://rclone.org/bisync) (especially the\nLimitations (https://rclone.org/bisync/#limitations) section) before\nusing, or data loss can result.\nQuestions can be asked in the Rclone Forum (https://forum.rclone.org/).\n.PP\nSee full bisync description (https://rclone.org/bisync/) for details.\n.IP\n.nf\n\\f[C]\nrclone bisync remote1:path1 remote2:path2 [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --backup-dir1 string                   --backup-dir for Path1. Must be a non-overlapping path on the same remote.\n      --backup-dir2 string                   --backup-dir for Path2. Must be a non-overlapping path on the same remote.\n      --check-access                         Ensure expected RCLONE_TEST files are found on both Path1 and Path2 filesystems, else abort.\n      --check-filename string                Filename for --check-access (default: RCLONE_TEST)\n      --check-sync string                    Controls comparison of final listings: true|false|only (default: true) (default \\[dq]true\\[dq])\n      --compare string                       Comma-separated list of bisync-specific compare options ex. \\[aq]size,modtime,checksum\\[aq] (default: \\[aq]size,modtime\\[aq])\n      --conflict-loser ConflictLoserAction   Action to take on the loser of a sync conflict (when there is a winner) or on both files (when there is no winner): , num, pathname, delete (default: num)\n      --conflict-resolve string              Automatically resolve conflicts by preferring the version that is: none, path1, path2, newer, older, larger, smaller (default: none) (default \\[dq]none\\[dq])\n      --conflict-suffix string               Suffix to use when renaming a --conflict-loser. Can be either one string or two comma-separated strings to assign different suffixes to Path1/Path2. (default: \\[aq]conflict\\[aq])\n      --create-empty-src-dirs                Sync creation and deletion of empty directories. (Not compatible with --remove-empty-dirs)\n      --download-hash                        Compute hash by downloading when otherwise unavailable. (warning: may be slow and use lots of data!)\n      --filters-file string                  Read filtering patterns from a file\n      --force                                Bypass --max-delete safety check and run the sync. Consider using with --verbose\n  -h, --help                                 help for bisync\n      --ignore-listing-checksum              Do not use checksums for listings (add --ignore-checksum to additionally skip post-copy checksum checks)\n      --max-lock Duration                    Consider lock files older than this to be expired (default: 0 (never expire)) (minimum: 2m) (default 0s)\n      --no-cleanup                           Retain working files (useful for troubleshooting and testing).\n      --no-slow-hash                         Ignore listing checksums only on backends where they are slow\n      --recover                              Automatically recover from interruptions without requiring --resync.\n      --remove-empty-dirs                    Remove ALL empty directories at the final cleanup step.\n      --resilient                            Allow future runs to retry after certain less-serious errors, instead of requiring --resync. Use at your own risk!\n  -1, --resync                               Performs the resync run. Equivalent to --resync-mode path1. Consider using --verbose or --dry-run first.\n      --resync-mode string                   During resync, prefer the version that is: path1, path2, newer, older, larger, smaller (default: path1 if --resync, otherwise none for no resync.) (default \\[dq]none\\[dq])\n      --slow-hash-sync-only                  Ignore slow checksums for listings and deltas, but still consider them during sync calls.\n      --workdir string                       Use custom working dir - useful for testing. (default: {WORKDIR})\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Copy Options\n.PP\nFlags for anything which can copy a file\n.IP\n.nf\n\\f[C]\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don\\[aq]t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don\\[aq]t check the destination, copy regardless\n      --no-traverse                                 Don\\[aq]t traverse destination file system on copy\n      --no-update-dir-modtime                       Don\\[aq]t update directory modification times\n      --no-update-modtime                           Don\\[aq]t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. \\[aq]size,descending\\[aq]\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \\[dq].partial\\[dq])\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n\\f[R]\n.fi\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone cat\n.PP\nConcatenates any files and sends them to stdout.\n.SS Synopsis\n.PP\nSends any files to standard output.\n.PP\nYou can use it like this to output a single file\n.IP\n.nf\n\\f[C]\nrclone cat remote:path/to/file\n\\f[R]\n.fi\n.PP\nOr like this to output any file in dir or its subdirectories.\n.IP\n.nf\n\\f[C]\nrclone cat remote:path/to/dir\n\\f[R]\n.fi\n.PP\nOr like this to output any .txt files in dir or its subdirectories.\n.IP\n.nf\n\\f[C]\nrclone --include \\[dq]*.txt\\[dq] cat remote:path/to/dir\n\\f[R]\n.fi\n.PP\nUse the \\f[C]--head\\f[R] flag to print characters only at the start,\n\\f[C]--tail\\f[R] for the end and \\f[C]--offset\\f[R] and\n\\f[C]--count\\f[R] to print a section in the middle.\nNote that if offset is negative it will count from the end, so\n\\f[C]--offset -1 --count 1\\f[R] is equivalent to \\f[C]--tail 1\\f[R].\n.PP\nUse the \\f[C]--separator\\f[R] flag to print a separator value between\nfiles.\nBe sure to shell-escape special characters.\nFor example, to print a newline between files, use:\n.IP \\[bu] 2\nbash:\n.RS 2\n.IP\n.nf\n\\f[C]\nrclone --include \\[dq]*.txt\\[dq] --separator $\\[aq]\\[rs]n\\[aq] cat remote:path/to/dir\n\\f[R]\n.fi\n.RE\n.IP \\[bu] 2\npowershell:\n.RS 2\n.IP\n.nf\n\\f[C]\nrclone --include \\[dq]*.txt\\[dq] --separator \\[dq]\\[ga]n\\[dq] cat remote:path/to/dir\n\\f[R]\n.fi\n.RE\n.IP\n.nf\n\\f[C]\nrclone cat remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --count int          Only print N characters (default -1)\n      --discard            Discard the output instead of printing\n      --head int           Only print the first N characters\n  -h, --help               help for cat\n      --offset int         Start printing at offset N (or from end if -ve)\n      --separator string   Separator to use between objects when printing multiple files\n      --tail int           Only print the last N characters\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone checksum\n.PP\nChecks the files in the destination against a SUM file.\n.SS Synopsis\n.PP\nChecks that hashsums of destination files match the SUM file.\nIt compares hashes (MD5, SHA1, etc) and logs a report of files which\ndon\\[aq]t match.\nIt doesn\\[aq]t alter the file system.\n.PP\nThe sumfile is treated as the source and the dst:path is treated as the\ndestination for the purposes of the output.\n.PP\nIf you supply the \\f[C]--download\\f[R] flag, it will download the data\nfrom the remote and calculate the content hash on the fly.\nThis can be useful for remotes that don\\[aq]t support hashes or if you\nreally want to check all the data.\n.PP\nNote that hash values in the SUM file are treated as case insensitive.\n.PP\nIf you supply the \\f[C]--one-way\\f[R] flag, it will only check that\nfiles in the source match the files in the destination, not the other\nway around.\nThis means that extra files in the destination that are not in the\nsource will not be detected.\n.PP\nThe \\f[C]--differ\\f[R], \\f[C]--missing-on-dst\\f[R],\n\\f[C]--missing-on-src\\f[R], \\f[C]--match\\f[R] and \\f[C]--error\\f[R]\nflags write paths, one per line, to the file name (or stdout if it is\n\\f[C]-\\f[R]) supplied.\nWhat they write is described in the help below.\nFor example \\f[C]--differ\\f[R] will write all paths which are present on\nboth the source and destination but different.\n.PP\nThe \\f[C]--combined\\f[R] flag will write a file (or stdout) which\ncontains all file paths with a symbol and then a space and then the path\nto tell you what happened to it.\nThese are reminiscent of diff files.\n.IP \\[bu] 2\n\\f[C]= path\\f[R] means path was found in source and destination and was\nidentical\n.IP \\[bu] 2\n\\[ga]- path\\[ga] means path was missing on the source, so only in the\ndestination\n.IP \\[bu] 2\n\\[ga]+ path\\[ga] means path was missing on the destination, so only in\nthe source\n.IP \\[bu] 2\n\\[ga]* path\\[ga] means path was present in source and destination but\ndifferent.\n.IP \\[bu] 2\n\\f[C]! path\\f[R] means there was an error reading or hashing the source\nor dest.\n.PP\nThe default number of parallel checks is 8.\nSee the --checkers=N (https://rclone.org/docs/#checkers-n) option for\nmore information.\n.IP\n.nf\n\\f[C]\nrclone checksum <hash> sumfile dst:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --combined string         Make a combined report of changes to this file\n      --differ string           Report all non-matching files to this file\n      --download                Check by hashing the contents\n      --error string            Report all files with errors (hashing or reading) to this file\n  -h, --help                    help for checksum\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n      --one-way                 Check one way only, source files must exist on remote\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone completion\n.PP\nOutput completion script for a given shell.\n.SS Synopsis\n.PP\nGenerates a shell completion script for rclone.\nRun with \\f[C]--help\\f[R] to list the supported shells.\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for completion\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.IP \\[bu] 2\nrclone completion\nbash (https://rclone.org/commands/rclone_completion_bash/) - Output bash\ncompletion script for rclone.\n.IP \\[bu] 2\nrclone completion\nfish (https://rclone.org/commands/rclone_completion_fish/) - Output fish\ncompletion script for rclone.\n.IP \\[bu] 2\nrclone completion\npowershell (https://rclone.org/commands/rclone_completion_powershell/) -\nOutput powershell completion script for rclone.\n.IP \\[bu] 2\nrclone completion\nzsh (https://rclone.org/commands/rclone_completion_zsh/) - Output zsh\ncompletion script for rclone.\n.SH rclone completion bash\n.PP\nOutput bash completion script for rclone.\n.SS Synopsis\n.PP\nGenerates a bash shell autocompletion script for rclone.\n.PP\nBy default, when run without any arguments,\n.IP\n.nf\n\\f[C]\nrclone completion bash\n\\f[R]\n.fi\n.PP\nthe generated script will be written to\n.IP\n.nf\n\\f[C]\n/etc/bash_completion.d/rclone\n\\f[R]\n.fi\n.PP\nand so rclone will probably need to be run as root, or with sudo.\n.PP\nIf you supply a path to a file as the command line argument, then the\ngenerated script will be written to that file, in which case you should\nnot need root privileges.\n.PP\nIf output_file is \\[dq]-\\[dq], then the output will be written to\nstdout.\n.PP\nIf you have installed the script into the default location, you can\nlogout and login again to use the autocompletion script.\n.PP\nAlternatively, you can source the script directly\n.IP\n.nf\n\\f[C]\n\\&. /path/to/my_bash_completion_scripts/rclone\n\\f[R]\n.fi\n.PP\nand the autocompletion functionality will be added to your current\nshell.\n.IP\n.nf\n\\f[C]\nrclone completion bash [output_file] [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for bash\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone completion (https://rclone.org/commands/rclone_completion/) -\nOutput completion script for a given shell.\n.SH rclone completion fish\n.PP\nOutput fish completion script for rclone.\n.SS Synopsis\n.PP\nGenerates a fish autocompletion script for rclone.\n.PP\nThis writes to /etc/fish/completions/rclone.fish by default so will\nprobably need to be run with sudo or as root, e.g.\n.IP\n.nf\n\\f[C]\nsudo rclone completion fish\n\\f[R]\n.fi\n.PP\nLogout and login again to use the autocompletion scripts, or source them\ndirectly\n.IP\n.nf\n\\f[C]\n\\&. /etc/fish/completions/rclone.fish\n\\f[R]\n.fi\n.PP\nIf you supply a command line argument the script will be written there.\n.PP\nIf output_file is \\[dq]-\\[dq], then the output will be written to\nstdout.\n.IP\n.nf\n\\f[C]\nrclone completion fish [output_file] [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for fish\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone completion (https://rclone.org/commands/rclone_completion/) -\nOutput completion script for a given shell.\n.SH rclone completion powershell\n.PP\nOutput powershell completion script for rclone.\n.SS Synopsis\n.PP\nGenerate the autocompletion script for powershell.\n.PP\nTo load completions in your current shell session:\n.IP\n.nf\n\\f[C]\nrclone completion powershell | Out-String | Invoke-Expression\n\\f[R]\n.fi\n.PP\nTo load completions for every new session, add the output of the above\ncommand to your powershell profile.\n.PP\nIf output_file is \\[dq]-\\[dq] or missing, then the output will be\nwritten to stdout.\n.IP\n.nf\n\\f[C]\nrclone completion powershell [output_file] [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for powershell\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone completion (https://rclone.org/commands/rclone_completion/) -\nOutput completion script for a given shell.\n.SH rclone completion zsh\n.PP\nOutput zsh completion script for rclone.\n.SS Synopsis\n.PP\nGenerates a zsh autocompletion script for rclone.\n.PP\nThis writes to /usr/share/zsh/vendor-completions/_rclone by default so\nwill probably need to be run with sudo or as root, e.g.\n.IP\n.nf\n\\f[C]\nsudo rclone completion zsh\n\\f[R]\n.fi\n.PP\nLogout and login again to use the autocompletion scripts, or source them\ndirectly\n.IP\n.nf\n\\f[C]\nautoload -U compinit && compinit\n\\f[R]\n.fi\n.PP\nIf you supply a command line argument the script will be written there.\n.PP\nIf output_file is \\[dq]-\\[dq], then the output will be written to\nstdout.\n.IP\n.nf\n\\f[C]\nrclone completion zsh [output_file] [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for zsh\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone completion (https://rclone.org/commands/rclone_completion/) -\nOutput completion script for a given shell.\n.SH rclone config create\n.PP\nCreate a new remote with name, type and options.\n.SS Synopsis\n.PP\nCreate a new remote of \\f[C]name\\f[R] with \\f[C]type\\f[R] and options.\nThe options should be passed in pairs of \\f[C]key\\f[R] \\f[C]value\\f[R]\nor as \\f[C]key=value\\f[R].\n.PP\nFor example, to make a swift remote of name myremote using auto config\nyou would do:\n.IP\n.nf\n\\f[C]\nrclone config create myremote swift env_auth true\nrclone config create myremote swift env_auth=true\n\\f[R]\n.fi\n.PP\nSo for example if you wanted to configure a Google Drive remote but\nusing remote authorization you would do this:\n.IP\n.nf\n\\f[C]\nrclone config create mydrive drive config_is_local=false\n\\f[R]\n.fi\n.PP\nNote that if the config process would normally ask a question the\ndefault is taken (unless \\f[C]--non-interactive\\f[R] is used).\nEach time that happens rclone will print or DEBUG a message saying how\nto affect the value taken.\n.PP\nIf any of the parameters passed is a password field, then rclone will\nautomatically obscure them if they aren\\[aq]t already obscured before\nputting them in the config file.\n.PP\n\\f[B]NB\\f[R] If the password parameter is 22 characters or longer and\nconsists only of base64 characters then rclone can get confused about\nwhether the password is already obscured or not and put unobscured\npasswords into the config file.\nIf you want to be 100% certain that the passwords get obscured then use\nthe \\f[C]--obscure\\f[R] flag, or if you are 100% certain you are already\npassing obscured passwords then use \\f[C]--no-obscure\\f[R].\nYou can also set obscured passwords using the\n\\f[C]rclone config password\\f[R] command.\n.PP\nThe flag \\f[C]--non-interactive\\f[R] is for use by applications that\nwish to configure rclone themselves, rather than using rclone\\[aq]s text\nbased configuration questions.\nIf this flag is set, and rclone needs to ask the user a question, a JSON\nblob will be returned with the question in it.\n.PP\nThis will look something like (some irrelevant detail removed):\n.IP\n.nf\n\\f[C]\n{\n    \\[dq]State\\[dq]: \\[dq]*oauth-islocal,teamdrive,,\\[dq],\n    \\[dq]Option\\[dq]: {\n        \\[dq]Name\\[dq]: \\[dq]config_is_local\\[dq],\n        \\[dq]Help\\[dq]: \\[dq]Use web browser to automatically authenticate rclone with remote?\\[rs]n * Say Y if the machine running rclone has a web browser you can use\\[rs]n * Say N if running rclone on a (remote) machine without web browser access\\[rs]nIf not sure try Y. If Y failed, try N.\\[rs]n\\[dq],\n        \\[dq]Default\\[dq]: true,\n        \\[dq]Examples\\[dq]: [\n            {\n                \\[dq]Value\\[dq]: \\[dq]true\\[dq],\n                \\[dq]Help\\[dq]: \\[dq]Yes\\[dq]\n            },\n            {\n                \\[dq]Value\\[dq]: \\[dq]false\\[dq],\n                \\[dq]Help\\[dq]: \\[dq]No\\[dq]\n            }\n        ],\n        \\[dq]Required\\[dq]: false,\n        \\[dq]IsPassword\\[dq]: false,\n        \\[dq]Type\\[dq]: \\[dq]bool\\[dq],\n        \\[dq]Exclusive\\[dq]: true,\n    },\n    \\[dq]Error\\[dq]: \\[dq]\\[dq],\n}\n\\f[R]\n.fi\n.PP\nThe format of \\f[C]Option\\f[R] is the same as returned by\n\\f[C]rclone config providers\\f[R].\nThe question should be asked to the user and returned to rclone as the\n\\f[C]--result\\f[R] option along with the \\f[C]--state\\f[R] parameter.\n.PP\nThe keys of \\f[C]Option\\f[R] are used as follows:\n.IP \\[bu] 2\n\\f[C]Name\\f[R] - name of variable - show to user\n.IP \\[bu] 2\n\\f[C]Help\\f[R] - help text.\nHard wrapped at 80 chars.\nAny URLs should be clicky.\n.IP \\[bu] 2\n\\f[C]Default\\f[R] - default value - return this if the user just wants\nthe default.\n.IP \\[bu] 2\n\\f[C]Examples\\f[R] - the user should be able to choose one of these\n.IP \\[bu] 2\n\\f[C]Required\\f[R] - the value should be non-empty\n.IP \\[bu] 2\n\\f[C]IsPassword\\f[R] - the value is a password and should be edited as\nsuch\n.IP \\[bu] 2\n\\f[C]Type\\f[R] - type of value, eg \\f[C]bool\\f[R], \\f[C]string\\f[R],\n\\f[C]int\\f[R] and others\n.IP \\[bu] 2\n\\f[C]Exclusive\\f[R] - if set no free-form entry allowed only the\n\\f[C]Examples\\f[R]\n.IP \\[bu] 2\nIrrelevant keys \\f[C]Provider\\f[R], \\f[C]ShortOpt\\f[R], \\f[C]Hide\\f[R],\n\\f[C]NoPrefix\\f[R], \\f[C]Advanced\\f[R]\n.PP\nIf \\f[C]Error\\f[R] is set then it should be shown to the user at the\nsame time as the question.\n.IP\n.nf\n\\f[C]\nrclone config update name --continue --state \\[dq]*oauth-islocal,teamdrive,,\\[dq] --result \\[dq]true\\[dq]\n\\f[R]\n.fi\n.PP\nNote that when using \\f[C]--continue\\f[R] all passwords should be passed\nin the clear (not obscured).\nAny default config values should be passed in with each invocation of\n\\f[C]--continue\\f[R].\n.PP\nAt the end of the non interactive process, rclone will return a result\nwith \\f[C]State\\f[R] as empty string.\n.PP\nIf \\f[C]--all\\f[R] is passed then rclone will ask all the config\nquestions, not just the post config questions.\nAny parameters are used as defaults for questions as usual.\n.PP\nNote that \\f[C]bin/config.py\\f[R] in the rclone source implements this\nprotocol as a readable demonstration.\n.IP\n.nf\n\\f[C]\nrclone config create name type [key value]* [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --all               Ask the full set of config questions\n      --continue          Continue the configuration process with an answer\n  -h, --help              help for create\n      --no-obscure        Force any passwords not to be obscured\n      --non-interactive   Don\\[aq]t interact with user and return questions\n      --obscure           Force any passwords to be obscured\n      --result string     Result - use with --continue\n      --state string      State - use with --continue\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config delete\n.PP\nDelete an existing remote.\n.IP\n.nf\n\\f[C]\nrclone config delete name [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for delete\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config disconnect\n.PP\nDisconnects user from remote\n.SS Synopsis\n.PP\nThis disconnects the remote: passed in to the cloud storage system.\n.PP\nThis normally means revoking the oauth token.\n.PP\nTo reconnect use \\[dq]rclone config reconnect\\[dq].\n.IP\n.nf\n\\f[C]\nrclone config disconnect remote: [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for disconnect\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config dump\n.PP\nDump the config file as JSON.\n.IP\n.nf\n\\f[C]\nrclone config dump [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for dump\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config edit\n.PP\nEnter an interactive configuration session.\n.SS Synopsis\n.PP\nEnter an interactive configuration session where you can setup new\nremotes and manage existing ones.\nYou may also set or remove a password to protect your configuration.\n.IP\n.nf\n\\f[C]\nrclone config edit [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for edit\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config encryption\n.PP\nset, remove and check the encryption for the config file\n.SS Synopsis\n.PP\nThis command sets, clears and checks the encryption for the config file\nusing the subcommands below.\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for encryption\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.IP \\[bu] 2\nrclone config encryption\ncheck (https://rclone.org/commands/rclone_config_encryption_check/) -\nCheck that the config file is encrypted\n.IP \\[bu] 2\nrclone config encryption\nremove (https://rclone.org/commands/rclone_config_encryption_remove/) -\nRemove the config file encryption password\n.IP \\[bu] 2\nrclone config encryption\nset (https://rclone.org/commands/rclone_config_encryption_set/) - Set or\nchange the config file encryption password\n.SH rclone config encryption check\n.PP\nCheck that the config file is encrypted\n.SS Synopsis\n.PP\nThis checks the config file is encrypted and that you can decrypt it.\n.PP\nIt will attempt to decrypt the config using the password you supply.\n.PP\nIf decryption fails it will return a non-zero exit code if using\n\\f[C]--password-command\\f[R], otherwise it will prompt again for the\npassword.\n.PP\nIf the config file is not encrypted it will return a non zero exit code.\n.IP\n.nf\n\\f[C]\nrclone config encryption check [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for check\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config\nencryption (https://rclone.org/commands/rclone_config_encryption/) -\nset, remove and check the encryption for the config file\n.SH rclone config encryption remove\n.PP\nRemove the config file encryption password\n.SS Synopsis\n.PP\nRemove the config file encryption password\n.PP\nThis removes the config file encryption, returning it to un-encrypted.\n.PP\nIf \\f[C]--password-command\\f[R] is in use, this will be called to supply\nthe old config password.\n.PP\nIf the config was not encrypted then no error will be returned and this\ncommand will do nothing.\n.IP\n.nf\n\\f[C]\nrclone config encryption remove [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for remove\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config\nencryption (https://rclone.org/commands/rclone_config_encryption/) -\nset, remove and check the encryption for the config file\n.SH rclone config encryption set\n.PP\nSet or change the config file encryption password\n.SS Synopsis\n.PP\nThis command sets or changes the config file encryption password.\n.PP\nIf there was no config password set then it sets a new one, otherwise it\nchanges the existing config password.\n.PP\nNote that if you are changing an encryption password using\n\\f[C]--password-command\\f[R] then this will be called once to decrypt\nthe config using the old password and then again to read the new\npassword to re-encrypt the config.\n.PP\nWhen \\f[C]--password-command\\f[R] is called to change the password then\nthe environment variable \\f[C]RCLONE_PASSWORD_CHANGE=1\\f[R] will be set.\nSo if changing passwords programatically you can use the environment\nvariable to distinguish which password you must supply.\n.PP\nAlternatively you can remove the password first (with\n\\f[C]rclone config encryption remove\\f[R]), then set it again with this\ncommand which may be easier if you don\\[aq]t mind the unecrypted config\nfile being on the disk briefly.\n.IP\n.nf\n\\f[C]\nrclone config encryption set [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for set\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config\nencryption (https://rclone.org/commands/rclone_config_encryption/) -\nset, remove and check the encryption for the config file\n.SH rclone config file\n.PP\nShow path of configuration file in use.\n.IP\n.nf\n\\f[C]\nrclone config file [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for file\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config password\n.PP\nUpdate password in an existing remote.\n.SS Synopsis\n.PP\nUpdate an existing remote\\[aq]s password.\nThe password should be passed in pairs of \\f[C]key\\f[R]\n\\f[C]password\\f[R] or as \\f[C]key=password\\f[R].\nThe \\f[C]password\\f[R] should be passed in in clear (unobscured).\n.PP\nFor example, to set password of a remote of name myremote you would do:\n.IP\n.nf\n\\f[C]\nrclone config password myremote fieldname mypassword\nrclone config password myremote fieldname=mypassword\n\\f[R]\n.fi\n.PP\nThis command is obsolete now that \\[dq]config update\\[dq] and\n\\[dq]config create\\[dq] both support obscuring passwords directly.\n.IP\n.nf\n\\f[C]\nrclone config password name [key value]+ [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for password\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config paths\n.PP\nShow paths used for configuration, cache, temp etc.\n.IP\n.nf\n\\f[C]\nrclone config paths [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for paths\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config providers\n.PP\nList in JSON format all the providers and options.\n.IP\n.nf\n\\f[C]\nrclone config providers [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for providers\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config reconnect\n.PP\nRe-authenticates user with remote.\n.SS Synopsis\n.PP\nThis reconnects remote: passed in to the cloud storage system.\n.PP\nTo disconnect the remote use \\[dq]rclone config disconnect\\[dq].\n.PP\nThis normally means going through the interactive oauth flow again.\n.IP\n.nf\n\\f[C]\nrclone config reconnect remote: [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for reconnect\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config redacted\n.PP\nPrint redacted (decrypted) config file, or the redacted config for a\nsingle remote.\n.SS Synopsis\n.PP\nThis prints a redacted copy of the config file, either the whole config\nfile or for a given remote.\n.PP\nThe config file will be redacted by replacing all passwords and other\nsensitive info with XXX.\n.PP\nThis makes the config file suitable for posting online for support.\n.PP\nIt should be double checked before posting as the redaction may not be\nperfect.\n.IP\n.nf\n\\f[C]\nrclone config redacted [<remote>] [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for redacted\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config show\n.PP\nPrint (decrypted) config file, or the config for a single remote.\n.IP\n.nf\n\\f[C]\nrclone config show [<remote>] [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for show\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config touch\n.PP\nEnsure configuration file exists.\n.IP\n.nf\n\\f[C]\nrclone config touch [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for touch\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config update\n.PP\nUpdate options in an existing remote.\n.SS Synopsis\n.PP\nUpdate an existing remote\\[aq]s options.\nThe options should be passed in pairs of \\f[C]key\\f[R] \\f[C]value\\f[R]\nor as \\f[C]key=value\\f[R].\n.PP\nFor example, to update the env_auth field of a remote of name myremote\nyou would do:\n.IP\n.nf\n\\f[C]\nrclone config update myremote env_auth true\nrclone config update myremote env_auth=true\n\\f[R]\n.fi\n.PP\nIf the remote uses OAuth the token will be updated, if you don\\[aq]t\nrequire this add an extra parameter thus:\n.IP\n.nf\n\\f[C]\nrclone config update myremote env_auth=true config_refresh_token=false\n\\f[R]\n.fi\n.PP\nNote that if the config process would normally ask a question the\ndefault is taken (unless \\f[C]--non-interactive\\f[R] is used).\nEach time that happens rclone will print or DEBUG a message saying how\nto affect the value taken.\n.PP\nIf any of the parameters passed is a password field, then rclone will\nautomatically obscure them if they aren\\[aq]t already obscured before\nputting them in the config file.\n.PP\n\\f[B]NB\\f[R] If the password parameter is 22 characters or longer and\nconsists only of base64 characters then rclone can get confused about\nwhether the password is already obscured or not and put unobscured\npasswords into the config file.\nIf you want to be 100% certain that the passwords get obscured then use\nthe \\f[C]--obscure\\f[R] flag, or if you are 100% certain you are already\npassing obscured passwords then use \\f[C]--no-obscure\\f[R].\nYou can also set obscured passwords using the\n\\f[C]rclone config password\\f[R] command.\n.PP\nThe flag \\f[C]--non-interactive\\f[R] is for use by applications that\nwish to configure rclone themselves, rather than using rclone\\[aq]s text\nbased configuration questions.\nIf this flag is set, and rclone needs to ask the user a question, a JSON\nblob will be returned with the question in it.\n.PP\nThis will look something like (some irrelevant detail removed):\n.IP\n.nf\n\\f[C]\n{\n    \\[dq]State\\[dq]: \\[dq]*oauth-islocal,teamdrive,,\\[dq],\n    \\[dq]Option\\[dq]: {\n        \\[dq]Name\\[dq]: \\[dq]config_is_local\\[dq],\n        \\[dq]Help\\[dq]: \\[dq]Use web browser to automatically authenticate rclone with remote?\\[rs]n * Say Y if the machine running rclone has a web browser you can use\\[rs]n * Say N if running rclone on a (remote) machine without web browser access\\[rs]nIf not sure try Y. If Y failed, try N.\\[rs]n\\[dq],\n        \\[dq]Default\\[dq]: true,\n        \\[dq]Examples\\[dq]: [\n            {\n                \\[dq]Value\\[dq]: \\[dq]true\\[dq],\n                \\[dq]Help\\[dq]: \\[dq]Yes\\[dq]\n            },\n            {\n                \\[dq]Value\\[dq]: \\[dq]false\\[dq],\n                \\[dq]Help\\[dq]: \\[dq]No\\[dq]\n            }\n        ],\n        \\[dq]Required\\[dq]: false,\n        \\[dq]IsPassword\\[dq]: false,\n        \\[dq]Type\\[dq]: \\[dq]bool\\[dq],\n        \\[dq]Exclusive\\[dq]: true,\n    },\n    \\[dq]Error\\[dq]: \\[dq]\\[dq],\n}\n\\f[R]\n.fi\n.PP\nThe format of \\f[C]Option\\f[R] is the same as returned by\n\\f[C]rclone config providers\\f[R].\nThe question should be asked to the user and returned to rclone as the\n\\f[C]--result\\f[R] option along with the \\f[C]--state\\f[R] parameter.\n.PP\nThe keys of \\f[C]Option\\f[R] are used as follows:\n.IP \\[bu] 2\n\\f[C]Name\\f[R] - name of variable - show to user\n.IP \\[bu] 2\n\\f[C]Help\\f[R] - help text.\nHard wrapped at 80 chars.\nAny URLs should be clicky.\n.IP \\[bu] 2\n\\f[C]Default\\f[R] - default value - return this if the user just wants\nthe default.\n.IP \\[bu] 2\n\\f[C]Examples\\f[R] - the user should be able to choose one of these\n.IP \\[bu] 2\n\\f[C]Required\\f[R] - the value should be non-empty\n.IP \\[bu] 2\n\\f[C]IsPassword\\f[R] - the value is a password and should be edited as\nsuch\n.IP \\[bu] 2\n\\f[C]Type\\f[R] - type of value, eg \\f[C]bool\\f[R], \\f[C]string\\f[R],\n\\f[C]int\\f[R] and others\n.IP \\[bu] 2\n\\f[C]Exclusive\\f[R] - if set no free-form entry allowed only the\n\\f[C]Examples\\f[R]\n.IP \\[bu] 2\nIrrelevant keys \\f[C]Provider\\f[R], \\f[C]ShortOpt\\f[R], \\f[C]Hide\\f[R],\n\\f[C]NoPrefix\\f[R], \\f[C]Advanced\\f[R]\n.PP\nIf \\f[C]Error\\f[R] is set then it should be shown to the user at the\nsame time as the question.\n.IP\n.nf\n\\f[C]\nrclone config update name --continue --state \\[dq]*oauth-islocal,teamdrive,,\\[dq] --result \\[dq]true\\[dq]\n\\f[R]\n.fi\n.PP\nNote that when using \\f[C]--continue\\f[R] all passwords should be passed\nin the clear (not obscured).\nAny default config values should be passed in with each invocation of\n\\f[C]--continue\\f[R].\n.PP\nAt the end of the non interactive process, rclone will return a result\nwith \\f[C]State\\f[R] as empty string.\n.PP\nIf \\f[C]--all\\f[R] is passed then rclone will ask all the config\nquestions, not just the post config questions.\nAny parameters are used as defaults for questions as usual.\n.PP\nNote that \\f[C]bin/config.py\\f[R] in the rclone source implements this\nprotocol as a readable demonstration.\n.IP\n.nf\n\\f[C]\nrclone config update name [key value]+ [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --all               Ask the full set of config questions\n      --continue          Continue the configuration process with an answer\n  -h, --help              help for update\n      --no-obscure        Force any passwords not to be obscured\n      --non-interactive   Don\\[aq]t interact with user and return questions\n      --obscure           Force any passwords to be obscured\n      --result string     Result - use with --continue\n      --state string      State - use with --continue\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone config userinfo\n.PP\nPrints info about logged in user of remote.\n.SS Synopsis\n.PP\nThis prints the details of the person logged in to the cloud storage\nsystem.\n.IP\n.nf\n\\f[C]\nrclone config userinfo remote: [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for userinfo\n      --json   Format output as JSON\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone config (https://rclone.org/commands/rclone_config/) - Enter an\ninteractive configuration session.\n.SH rclone copyto\n.PP\nCopy files from source to dest, skipping identical files.\n.SS Synopsis\n.PP\nIf source:path is a file or directory then it copies it to a file or\ndirectory named dest:path.\n.PP\nThis can be used to upload single files to other than their current\nname.\nIf the source is a directory then it acts exactly like the\ncopy (https://rclone.org/commands/rclone_copy/) command.\n.PP\nSo\n.IP\n.nf\n\\f[C]\nrclone copyto src dst\n\\f[R]\n.fi\n.PP\nwhere src and dst are rclone paths, either remote:path or /path/to/local\nor C:.\n.PP\nThis will:\n.IP\n.nf\n\\f[C]\nif src is file\n    copy it to dst, overwriting an existing file if it exists\nif src is directory\n    copy it to dst, overwriting existing files if they exist\n    see copy command for full details\n\\f[R]\n.fi\n.PP\nThis doesn\\[aq]t transfer files that are identical on src and dst,\ntesting by size and modification time or MD5SUM.\nIt doesn\\[aq]t delete files from the destination.\n.PP\n\\f[B]Note\\f[R]: Use the \\f[C]-P\\f[R]/\\f[C]--progress\\f[R] flag to view\nreal-time transfer statistics\n.IP\n.nf\n\\f[C]\nrclone copyto source:path dest:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for copyto\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Copy Options\n.PP\nFlags for anything which can copy a file\n.IP\n.nf\n\\f[C]\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don\\[aq]t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don\\[aq]t check the destination, copy regardless\n      --no-traverse                                 Don\\[aq]t traverse destination file system on copy\n      --no-update-dir-modtime                       Don\\[aq]t update directory modification times\n      --no-update-modtime                           Don\\[aq]t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. \\[aq]size,descending\\[aq]\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \\[dq].partial\\[dq])\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n\\f[R]\n.fi\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone copyurl\n.PP\nCopy the contents of the URL supplied content to dest:path.\n.SS Synopsis\n.PP\nDownload a URL\\[aq]s content and copy it to the destination without\nsaving it in temporary storage.\n.PP\nSetting \\f[C]--auto-filename\\f[R] will attempt to automatically\ndetermine the filename from the URL (after any redirections) and used in\nthe destination path.\n.PP\nWith \\f[C]--auto-filename-header\\f[R] in addition, if a specific\nfilename is set in HTTP headers, it will be used instead of the name\nfrom the URL.\nWith \\f[C]--print-filename\\f[R] in addition, the resulting file name\nwill be printed.\n.PP\nSetting \\f[C]--no-clobber\\f[R] will prevent overwriting file on the\ndestination if there is one with the same name.\n.PP\nSetting \\f[C]--stdout\\f[R] or making the output file name \\f[C]-\\f[R]\nwill cause the output to be written to standard output.\n.SS Troublshooting\n.PP\nIf you can\\[aq]t get \\f[C]rclone copyurl\\f[R] to work then here are some\nthings you can try:\n.IP \\[bu] 2\n\\f[C]--disable-http2\\f[R] rclone will use HTTP2 if available - try\ndisabling it\n.IP \\[bu] 2\n\\f[C]--bind 0.0.0.0\\f[R] rclone will use IPv6 if available - try\ndisabling it\n.IP \\[bu] 2\n\\f[C]--bind ::0\\f[R] to disable IPv4\n.IP \\[bu] 2\n\\f[C]--user agent curl\\f[R] - some sites have whitelists for curl\\[aq]s\nuser-agent - try that\n.IP \\[bu] 2\nMake sure the site works with \\f[C]curl\\f[R] directly\n.IP\n.nf\n\\f[C]\nrclone copyurl https://example.com dest:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -a, --auto-filename     Get the file name from the URL and use it for destination file path\n      --header-filename   Get the file name from the Content-Disposition header\n  -h, --help              help for copyurl\n      --no-clobber        Prevent overwriting file with same name\n  -p, --print-filename    Print the resulting name from --auto-filename\n      --stdout            Write the output to stdout rather than a file\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone cryptcheck\n.PP\nCryptcheck checks the integrity of an encrypted remote.\n.SS Synopsis\n.PP\nChecks a remote against a crypted (https://rclone.org/crypt/) remote.\nThis is the equivalent of running rclone\ncheck (https://rclone.org/commands/rclone_check/), but able to check the\nchecksums of the encrypted remote.\n.PP\nFor it to work the underlying remote of the cryptedremote must support\nsome kind of checksum.\n.PP\nIt works by reading the nonce from each file on the cryptedremote: and\nusing that to encrypt each file on the remote:.\nIt then checks the checksum of the underlying file on the cryptedremote:\nagainst the checksum of the file it has just encrypted.\n.PP\nUse it like this\n.IP\n.nf\n\\f[C]\nrclone cryptcheck /path/to/files encryptedremote:path\n\\f[R]\n.fi\n.PP\nYou can use it like this also, but that will involve downloading all the\nfiles in remote:path.\n.IP\n.nf\n\\f[C]\nrclone cryptcheck remote:path encryptedremote:path\n\\f[R]\n.fi\n.PP\nAfter it has run it will log the status of the encryptedremote:.\n.PP\nIf you supply the \\f[C]--one-way\\f[R] flag, it will only check that\nfiles in the source match the files in the destination, not the other\nway around.\nThis means that extra files in the destination that are not in the\nsource will not be detected.\n.PP\nThe \\f[C]--differ\\f[R], \\f[C]--missing-on-dst\\f[R],\n\\f[C]--missing-on-src\\f[R], \\f[C]--match\\f[R] and \\f[C]--error\\f[R]\nflags write paths, one per line, to the file name (or stdout if it is\n\\f[C]-\\f[R]) supplied.\nWhat they write is described in the help below.\nFor example \\f[C]--differ\\f[R] will write all paths which are present on\nboth the source and destination but different.\n.PP\nThe \\f[C]--combined\\f[R] flag will write a file (or stdout) which\ncontains all file paths with a symbol and then a space and then the path\nto tell you what happened to it.\nThese are reminiscent of diff files.\n.IP \\[bu] 2\n\\f[C]= path\\f[R] means path was found in source and destination and was\nidentical\n.IP \\[bu] 2\n\\[ga]- path\\[ga] means path was missing on the source, so only in the\ndestination\n.IP \\[bu] 2\n\\[ga]+ path\\[ga] means path was missing on the destination, so only in\nthe source\n.IP \\[bu] 2\n\\[ga]* path\\[ga] means path was present in source and destination but\ndifferent.\n.IP \\[bu] 2\n\\f[C]! path\\f[R] means there was an error reading or hashing the source\nor dest.\n.PP\nThe default number of parallel checks is 8.\nSee the --checkers=N (https://rclone.org/docs/#checkers-n) option for\nmore information.\n.IP\n.nf\n\\f[C]\nrclone cryptcheck remote:path cryptedremote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --combined string         Make a combined report of changes to this file\n      --differ string           Report all non-matching files to this file\n      --error string            Report all files with errors (hashing or reading) to this file\n  -h, --help                    help for cryptcheck\n      --match string            Report all matching files to this file\n      --missing-on-dst string   Report all files missing from the destination to this file\n      --missing-on-src string   Report all files missing from the source to this file\n      --one-way                 Check one way only, source files must exist on remote\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Check Options\n.PP\nFlags used for check commands\n.IP\n.nf\n\\f[C]\n      --max-backlog int   Maximum number of objects in sync or check backlog (default 10000)\n\\f[R]\n.fi\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone cryptdecode\n.PP\nCryptdecode returns unencrypted file names.\n.SS Synopsis\n.PP\nReturns unencrypted file names when provided with a list of encrypted\nfile names.\nList limit is 10 items.\n.PP\nIf you supply the \\f[C]--reverse\\f[R] flag, it will return encrypted\nfile names.\n.PP\nuse it like this\n.IP\n.nf\n\\f[C]\nrclone cryptdecode encryptedremote: encryptedfilename1 encryptedfilename2\n\nrclone cryptdecode --reverse encryptedremote: filename1 filename2\n\\f[R]\n.fi\n.PP\nAnother way to accomplish this is by using the\n\\f[C]rclone backend encode\\f[R] (or \\f[C]decode\\f[R]) command.\nSee the documentation on the crypt (https://rclone.org/crypt/) overlay\nfor more info.\n.IP\n.nf\n\\f[C]\nrclone cryptdecode encryptedremote: encryptedfilename [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help      help for cryptdecode\n      --reverse   Reverse cryptdecode, encrypts filenames\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone deletefile\n.PP\nRemove a single file from remote.\n.SS Synopsis\n.PP\nRemove a single file from remote.\nUnlike \\f[C]delete\\f[R] it cannot be used to remove a directory and it\ndoesn\\[aq]t obey include/exclude filters - if the specified file exists,\nit will always be removed.\n.IP\n.nf\n\\f[C]\nrclone deletefile remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for deletefile\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone gendocs\n.PP\nOutput markdown docs for rclone to the directory supplied.\n.SS Synopsis\n.PP\nThis produces markdown docs for the rclone commands to the directory\nsupplied.\nThese are in a format suitable for hugo to render into the rclone.org\nwebsite.\n.IP\n.nf\n\\f[C]\nrclone gendocs output_directory [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for gendocs\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone gitannex\n.PP\nSpeaks with git-annex over stdin/stdout.\n.SS Synopsis\n.PP\nRclone\\[aq]s \\f[C]gitannex\\f[R] subcommand enables\ngit-annex (https://git-annex.branchable.com/) to store and retrieve\ncontent from an rclone remote.\nIt is meant to be run by git-annex, not directly by users.\n.SS Installation on Linux\n.IP \"1.\" 3\nSkip this step if your version of git-annex is\n10.20240430 (https://git-annex.branchable.com/news/version_10.20240430/)\nor newer.\nOtherwise, you must create a symlink somewhere on your PATH with a\nparticular name.\nThis symlink helps git-annex tell rclone it wants to run the\n\\[dq]gitannex\\[dq] subcommand.\n.RS 4\n.IP\n.nf\n\\f[C]\n# Create the helper symlink in \\[dq]$HOME/bin\\[dq].\nln -s \\[dq]$(realpath rclone)\\[dq] \\[dq]$HOME/bin/git-annex-remote-rclone-builtin\\[dq]\n\n# Verify the new symlink is on your PATH.\nwhich git-annex-remote-rclone-builtin\n\\f[R]\n.fi\n.RE\n.IP \"2.\" 3\nAdd a new remote to your git-annex repo.\nThis new remote will connect git-annex with the\n\\f[C]rclone gitannex\\f[R] subcommand.\n.RS 4\n.PP\nStart by asking git-annex to describe the remote\\[aq]s available\nconfiguration parameters.\n.IP\n.nf\n\\f[C]\n# If you skipped step 1:\ngit annex initremote MyRemote type=rclone --whatelse\n\n# If you created a symlink in step 1:\ngit annex initremote MyRemote type=external externaltype=rclone-builtin --whatelse\n\\f[R]\n.fi\n.RS\n.PP\n\\f[B]NOTE\\f[R]: If you\\[aq]re porting an existing\ngit-annex-remote-rclone (https://github.com/git-annex-remote-rclone/git-annex-remote-rclone)\nremote to use \\f[C]rclone gitannex\\f[R], you can probably reuse the\nconfiguration parameters verbatim without renaming them.\nCheck parameter synonyms with \\f[C]--whatelse\\f[R] as shown above.\n.RE\n.PP\nThe following example creates a new git-annex remote named\n\\[dq]MyRemote\\[dq] that will use the rclone remote named\n\\[dq]SomeRcloneRemote\\[dq].\nThat rclone remote must be one configured in your rclone.conf file,\nwhich can be located with \\f[C]rclone config file\\f[R].\n.IP\n.nf\n\\f[C]\ngit annex initremote MyRemote         \\[rs]\n    type=external                     \\[rs]\n    externaltype=rclone-builtin       \\[rs]\n    encryption=none                   \\[rs]\n    rcloneremotename=SomeRcloneRemote \\[rs]\n    rcloneprefix=git-annex-content    \\[rs]\n    rclonelayout=nodir\n\\f[R]\n.fi\n.RE\n.IP \"3.\" 3\nBefore you trust this command with your precious data, be sure to\n\\f[B]test the remote\\f[R].\nThis command is very new and has not been tested on many rclone\nbackends.\nCaveat emptor!\n.RS 4\n.IP\n.nf\n\\f[C]\ngit annex testremote MyRemote\n\\f[R]\n.fi\n.RE\n.PP\nHappy annexing!\n.IP\n.nf\n\\f[C]\nrclone gitannex [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for gitannex\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone hashsum\n.PP\nProduces a hashsum file for all the objects in the path.\n.SS Synopsis\n.PP\nProduces a hash file for all the objects in the path using the hash\nnamed.\nThe output is in the same format as the standard md5sum/sha1sum tool.\n.PP\nBy default, the hash is requested from the remote.\nIf the hash is not supported by the remote, no hash will be returned.\nWith the download flag, the file will be downloaded from the remote and\nhashed locally enabling any hash for any remote.\n.PP\nFor the MD5 and SHA1 algorithms there are also dedicated commands,\nmd5sum (https://rclone.org/commands/rclone_md5sum/) and\nsha1sum (https://rclone.org/commands/rclone_sha1sum/).\n.PP\nThis command can also hash data received on standard input (stdin), by\nnot passing a remote:path, or by passing a hyphen as remote:path when\nthere is data to read (if not, the hyphen will be treated literally, as\na relative path).\n.PP\nRun without a hash to see the list of all supported hashes, e.g.\n.IP\n.nf\n\\f[C]\n$ rclone hashsum\nSupported hashes are:\n  * md5\n  * sha1\n  * whirlpool\n  * crc32\n  * sha256\n\\f[R]\n.fi\n.PP\nThen\n.IP\n.nf\n\\f[C]\n$ rclone hashsum MD5 remote:path\n\\f[R]\n.fi\n.PP\nNote that hash names are case insensitive and values are output in lower\ncase.\n.IP\n.nf\n\\f[C]\nrclone hashsum [<hash> remote:path] [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --base64               Output base64 encoded hashsum\n  -C, --checkfile string     Validate hashes against a given SUM file instead of printing them\n      --download             Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote\n  -h, --help                 help for hashsum\n      --output-file string   Output hashsums to a file rather than the terminal\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone link\n.PP\nGenerate public link to file/folder.\n.SS Synopsis\n.PP\nCreate, retrieve or remove a public link to the given file or folder.\n.IP\n.nf\n\\f[C]\nrclone link remote:path/to/file\nrclone link remote:path/to/folder/\nrclone link --unlink remote:path/to/folder/\nrclone link --expire 1d remote:path/to/file\n\\f[R]\n.fi\n.PP\nIf you supply the --expire flag, it will set the expiration time\notherwise it will use the default (100 years).\n\\f[B]Note\\f[R] not all backends support the --expire flag - if the\nbackend doesn\\[aq]t support it then the link returned won\\[aq]t expire.\n.PP\nUse the --unlink flag to remove existing public links to the file or\nfolder.\n\\f[B]Note\\f[R] not all backends support \\[dq]--unlink\\[dq] flag - those\nthat don\\[aq]t will just ignore it.\n.PP\nIf successful, the last line of the output will contain the link.\nExact capabilities depend on the remote, but the link will always by\ndefault be created with the least constraints \\[en] e.g.\nno expiry, no password protection, accessible without account.\n.IP\n.nf\n\\f[C]\nrclone link remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --expire Duration   The amount of time that the link will be valid (default off)\n  -h, --help              help for link\n      --unlink            Remove existing public link to file/folder\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone listremotes\n.PP\nList all the remotes in the config file and defined in environment\nvariables.\n.SS Synopsis\n.PP\nLists all the available remotes from the config file, or the remotes\nmatching an optional filter.\n.PP\nPrints the result in human-readable format by default, and as a simple\nlist of remote names, or if used with flag \\f[C]--long\\f[R] a tabular\nformat including the remote names, types and descriptions.\nUsing flag \\f[C]--json\\f[R] produces machine-readable output instead,\nwhich always includes all attributes - including the source (file or\nenvironment).\n.PP\nResult can be filtered by a filter argument which applies to all\nattributes, and/or filter flags specific for each attribute.\nThe values must be specified according to regular rclone filtering\npattern syntax.\n.IP\n.nf\n\\f[C]\nrclone listremotes [<filter>] [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --description string   Filter remotes by description\n  -h, --help                 help for listremotes\n      --json                 Format output as JSON\n      --long                 Show type and description in addition to name\n      --name string          Filter remotes by name\n      --order-by string      Instructions on how to order the result, e.g. \\[aq]type,name=descending\\[aq]\n      --source string        Filter remotes by source, e.g. \\[aq]file\\[aq] or \\[aq]environment\\[aq]\n      --type string          Filter remotes by type\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone lsf\n.PP\nList directories and objects in remote:path formatted for parsing.\n.SS Synopsis\n.PP\nList the contents of the source path (directories and objects) to\nstandard output in a form which is easy to parse by scripts.\nBy default this will just be the names of the objects and directories,\none per line.\nThe directories will have a / suffix.\n.PP\nEg\n.IP\n.nf\n\\f[C]\n$ rclone lsf swift:bucket\nbevajer5jef\ncanole\ndiwogej7\nferejej3gux/\nfubuwic\n\\f[R]\n.fi\n.PP\nUse the \\f[C]--format\\f[R] option to control what gets listed.\nBy default this is just the path, but you can use these parameters to\ncontrol the output:\n.IP\n.nf\n\\f[C]\np - path\ns - size\nt - modification time\nh - hash\ni - ID of object\no - Original ID of underlying object\nm - MimeType of object if known\ne - encrypted name\nT - tier of storage if known, e.g. \\[dq]Hot\\[dq] or \\[dq]Cool\\[dq]\nM - Metadata of object in JSON blob format, eg {\\[dq]key\\[dq]:\\[dq]value\\[dq]}\n\\f[R]\n.fi\n.PP\nSo if you wanted the path, size and modification time, you would use\n\\f[C]--format \\[dq]pst\\[dq]\\f[R], or maybe\n\\f[C]--format \\[dq]tsp\\[dq]\\f[R] to put the path last.\n.PP\nEg\n.IP\n.nf\n\\f[C]\n$ rclone lsf  --format \\[dq]tsp\\[dq] swift:bucket\n2016-06-25 18:55:41;60295;bevajer5jef\n2016-06-25 18:55:43;90613;canole\n2016-06-25 18:55:43;94467;diwogej7\n2018-04-26 08:50:45;0;ferejej3gux/\n2016-06-25 18:55:40;37600;fubuwic\n\\f[R]\n.fi\n.PP\nIf you specify \\[dq]h\\[dq] in the format you will get the MD5 hash by\ndefault, use the \\f[C]--hash\\f[R] flag to change which hash you want.\nNote that this can be returned as an empty string if it isn\\[aq]t\navailable on the object (and for directories), \\[dq]ERROR\\[dq] if there\nwas an error reading it from the object and \\[dq]UNSUPPORTED\\[dq] if\nthat object does not support that hash type.\n.PP\nFor example, to emulate the md5sum command you can use\n.IP\n.nf\n\\f[C]\nrclone lsf -R --hash MD5 --format hp --separator \\[dq]  \\[dq] --files-only .\n\\f[R]\n.fi\n.PP\nEg\n.IP\n.nf\n\\f[C]\n$ rclone lsf -R --hash MD5 --format hp --separator \\[dq]  \\[dq] --files-only swift:bucket\n7908e352297f0f530b84a756f188baa3  bevajer5jef\ncd65ac234e6fea5925974a51cdd865cc  canole\n03b5341b4f234b9d984d03ad076bae91  diwogej7\n8fd37c3810dd660778137ac3a66cc06d  fubuwic\n99713e14a4c4ff553acaf1930fad985b  gixacuh7ku\n\\f[R]\n.fi\n.PP\n(Though \\[dq]rclone md5sum .\\[dq] is an easier way of typing this.)\n.PP\nBy default the separator is \\[dq];\\[dq] this can be changed with the\n\\f[C]--separator\\f[R] flag.\nNote that separators aren\\[aq]t escaped in the path so putting it last\nis a good strategy.\n.PP\nEg\n.IP\n.nf\n\\f[C]\n$ rclone lsf  --separator \\[dq],\\[dq] --format \\[dq]tshp\\[dq] swift:bucket\n2016-06-25 18:55:41,60295,7908e352297f0f530b84a756f188baa3,bevajer5jef\n2016-06-25 18:55:43,90613,cd65ac234e6fea5925974a51cdd865cc,canole\n2016-06-25 18:55:43,94467,03b5341b4f234b9d984d03ad076bae91,diwogej7\n2018-04-26 08:52:53,0,,ferejej3gux/\n2016-06-25 18:55:40,37600,8fd37c3810dd660778137ac3a66cc06d,fubuwic\n\\f[R]\n.fi\n.PP\nYou can output in CSV standard format.\nThis will escape things in \\[dq] if they contain ,\n.PP\nEg\n.IP\n.nf\n\\f[C]\n$ rclone lsf --csv --files-only --format ps remote:path\ntest.log,22355\ntest.sh,449\n\\[dq]this file contains a comma, in the file name.txt\\[dq],6\n\\f[R]\n.fi\n.PP\nNote that the \\f[C]--absolute\\f[R] parameter is useful for making lists\nof files to pass to an rclone copy with the \\f[C]--files-from-raw\\f[R]\nflag.\n.PP\nFor example, to find all the files modified within one day and copy\nthose only (without traversing the whole directory structure):\n.IP\n.nf\n\\f[C]\nrclone lsf --absolute --files-only --max-age 1d /path/to/local > new_files\nrclone copy --files-from-raw new_files /path/to/local remote:path\n\\f[R]\n.fi\n.PP\nThe default time format is \\f[C]\\[aq]2006-01-02 15:04:05\\[aq]\\f[R].\nOther formats (https://pkg.go.dev/time#pkg-constants) can be specified\nwith the \\f[C]--time-format\\f[R] flag.\nExamples:\n.IP\n.nf\n\\f[C]\nrclone lsf remote:path --format pt --time-format \\[aq]Jan 2, 2006 at 3:04pm (MST)\\[aq]\nrclone lsf remote:path --format pt --time-format \\[aq]2006-01-02 15:04:05.000000000\\[aq]\nrclone lsf remote:path --format pt --time-format \\[aq]2006-01-02T15:04:05.999999999Z07:00\\[aq]\nrclone lsf remote:path --format pt --time-format RFC3339\nrclone lsf remote:path --format pt --time-format DateOnly\nrclone lsf remote:path --format pt --time-format max\n\\f[R]\n.fi\n.PP\n\\f[C]--time-format max\\f[R] will automatically truncate\n\\[aq]\\f[C]2006-01-02 15:04:05.000000000\\f[R]\\[aq] to the maximum\nprecision supported by the remote.\n.PP\nAny of the filtering options can be applied to this command.\n.PP\nThere are several related list commands\n.IP \\[bu] 2\n\\f[C]ls\\f[R] to list size and path of objects only\n.IP \\[bu] 2\n\\f[C]lsl\\f[R] to list modification time, size and path of objects only\n.IP \\[bu] 2\n\\f[C]lsd\\f[R] to list directories only\n.IP \\[bu] 2\n\\f[C]lsf\\f[R] to list objects and directories in easy to parse format\n.IP \\[bu] 2\n\\f[C]lsjson\\f[R] to list objects and directories in JSON format\n.PP\n\\f[C]ls\\f[R],\\f[C]lsl\\f[R],\\f[C]lsd\\f[R] are designed to be\nhuman-readable.\n\\f[C]lsf\\f[R] is designed to be human and machine-readable.\n\\f[C]lsjson\\f[R] is designed to be machine-readable.\n.PP\nNote that \\f[C]ls\\f[R] and \\f[C]lsl\\f[R] recurse by default - use\n\\f[C]--max-depth 1\\f[R] to stop the recursion.\n.PP\nThe other list commands \\f[C]lsd\\f[R],\\f[C]lsf\\f[R],\\f[C]lsjson\\f[R] do\nnot recurse by default - use \\f[C]-R\\f[R] to make them recurse.\n.PP\nListing a nonexistent directory will produce an error except for remotes\nwhich can\\[aq]t have empty directories (e.g.\ns3, swift, or gcs - the bucket-based remotes).\n.IP\n.nf\n\\f[C]\nrclone lsf remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --absolute             Put a leading / in front of path names\n      --csv                  Output in CSV format\n  -d, --dir-slash            Append a slash to directory names (default true)\n      --dirs-only            Only list directories\n      --files-only           Only list files\n  -F, --format string        Output format - see  help for details (default \\[dq]p\\[dq])\n      --hash h               Use this hash when h is used in the format MD5|SHA-1|DropboxHash (default \\[dq]md5\\[dq])\n  -h, --help                 help for lsf\n  -R, --recursive            Recurse into the listing\n  -s, --separator string     Separator for the items in the format (default \\[dq];\\[dq])\n  -t, --time-format string   Specify a custom time format, or \\[aq]max\\[aq] for max precision supported by remote (default: 2006-01-02 15:04:05)\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone lsjson\n.PP\nList directories and objects in the path in JSON format.\n.SS Synopsis\n.PP\nList directories and objects in the path in JSON format.\n.PP\nThe output is an array of Items, where each Item looks like this:\n.IP\n.nf\n\\f[C]\n{\n  \\[dq]Hashes\\[dq] : {\n     \\[dq]SHA-1\\[dq] : \\[dq]f572d396fae9206628714fb2ce00f72e94f2258f\\[dq],\n     \\[dq]MD5\\[dq] : \\[dq]b1946ac92492d2347c6235b4d2611184\\[dq],\n     \\[dq]DropboxHash\\[dq] : \\[dq]ecb65bb98f9d905b70458986c39fcbad7715e5f2fcc3b1f07767d7c83e2438cc\\[dq]\n  },\n  \\[dq]ID\\[dq]: \\[dq]y2djkhiujf83u33\\[dq],\n  \\[dq]OrigID\\[dq]: \\[dq]UYOJVTUW00Q1RzTDA\\[dq],\n  \\[dq]IsBucket\\[dq] : false,\n  \\[dq]IsDir\\[dq] : false,\n  \\[dq]MimeType\\[dq] : \\[dq]application/octet-stream\\[dq],\n  \\[dq]ModTime\\[dq] : \\[dq]2017-05-31T16:15:57.034468261+01:00\\[dq],\n  \\[dq]Name\\[dq] : \\[dq]file.txt\\[dq],\n  \\[dq]Encrypted\\[dq] : \\[dq]v0qpsdq8anpci8n929v3uu9338\\[dq],\n  \\[dq]EncryptedPath\\[dq] : \\[dq]kja9098349023498/v0qpsdq8anpci8n929v3uu9338\\[dq],\n  \\[dq]Path\\[dq] : \\[dq]full/path/goes/here/file.txt\\[dq],\n  \\[dq]Size\\[dq] : 6,\n  \\[dq]Tier\\[dq] : \\[dq]hot\\[dq],\n}\n\\f[R]\n.fi\n.PP\nThe exact set of properties included depends on the backend:\n.IP \\[bu] 2\nThe property IsBucket will only be included for bucket-based remotes,\nand only for directories that are buckets.\nIt will always be omitted when value is not true.\n.IP \\[bu] 2\nProperties Encrypted and EncryptedPath will only be included for\nencrypted remotes, and (as mentioned below) only if the\n\\f[C]--encrypted\\f[R] option is set.\n.PP\nDifferent options may also affect which properties are included:\n.IP \\[bu] 2\nIf \\f[C]--hash\\f[R] is not specified, the Hashes property will be\nomitted.\nThe types of hash can be specified with the \\f[C]--hash-type\\f[R]\nparameter (which may be repeated).\nIf \\f[C]--hash-type\\f[R] is set then it implies \\f[C]--hash\\f[R].\n.IP \\[bu] 2\nIf \\f[C]--no-modtime\\f[R] is specified then ModTime will be blank.\nThis can speed things up on remotes where reading the ModTime takes an\nextra request (e.g.\ns3, swift).\n.IP \\[bu] 2\nIf \\f[C]--no-mimetype\\f[R] is specified then MimeType will be blank.\nThis can speed things up on remotes where reading the MimeType takes an\nextra request (e.g.\ns3, swift).\n.IP \\[bu] 2\nIf \\f[C]--encrypted\\f[R] is not specified the Encrypted and\nEncryptedPath properties will be omitted - even for encrypted remotes.\n.IP \\[bu] 2\nIf \\f[C]--metadata\\f[R] is set then an additional Metadata property will\nbe returned.\nThis will have metadata (https://rclone.org/docs/#metadata) in rclone\nstandard format as a JSON object.\n.PP\nThe default is to list directories and files/objects, but this can be\nchanged with the following options:\n.IP \\[bu] 2\nIf \\f[C]--dirs-only\\f[R] is specified then directories will be returned\nonly, no files/objects.\n.IP \\[bu] 2\nIf \\f[C]--files-only\\f[R] is specified then files will be returned only,\nno directories.\n.PP\nIf \\f[C]--stat\\f[R] is set then the the output is not an array of items,\nbut instead a single JSON blob will be returned about the item pointed\nto.\nThis will return an error if the item isn\\[aq]t found, however on bucket\nbased backends (like s3, gcs, b2, azureblob etc) if the item isn\\[aq]t\nfound it will return an empty directory, as it isn\\[aq]t possible to\ntell empty directories from missing directories there.\n.PP\nThe Path field will only show folders below the remote path being\nlisted.\nIf \\[dq]remote:path\\[dq] contains the file \\[dq]subfolder/file.txt\\[dq],\nthe Path for \\[dq]file.txt\\[dq] will be \\[dq]subfolder/file.txt\\[dq],\nnot \\[dq]remote:path/subfolder/file.txt\\[dq].\nWhen used without \\f[C]--recursive\\f[R] the Path will always be the same\nas Name.\n.PP\nThe time is in RFC3339 format with up to nanosecond precision.\nThe number of decimal digits in the seconds will depend on the precision\nthat the remote can hold the times, so if times are accurate to the\nnearest millisecond (e.g.\nGoogle Drive) then 3 digits will always be shown\n(\\[dq]2017-05-31T16:15:57.034+01:00\\[dq]) whereas if the times are\naccurate to the nearest second (Dropbox, Box, WebDav, etc.) no digits\nwill be shown (\\[dq]2017-05-31T16:15:57+01:00\\[dq]).\n.PP\nThe whole output can be processed as a JSON blob, or alternatively it\ncan be processed line by line as each item is written on individual\nlines (except with \\f[C]--stat\\f[R]).\n.PP\nAny of the filtering options can be applied to this command.\n.PP\nThere are several related list commands\n.IP \\[bu] 2\n\\f[C]ls\\f[R] to list size and path of objects only\n.IP \\[bu] 2\n\\f[C]lsl\\f[R] to list modification time, size and path of objects only\n.IP \\[bu] 2\n\\f[C]lsd\\f[R] to list directories only\n.IP \\[bu] 2\n\\f[C]lsf\\f[R] to list objects and directories in easy to parse format\n.IP \\[bu] 2\n\\f[C]lsjson\\f[R] to list objects and directories in JSON format\n.PP\n\\f[C]ls\\f[R],\\f[C]lsl\\f[R],\\f[C]lsd\\f[R] are designed to be\nhuman-readable.\n\\f[C]lsf\\f[R] is designed to be human and machine-readable.\n\\f[C]lsjson\\f[R] is designed to be machine-readable.\n.PP\nNote that \\f[C]ls\\f[R] and \\f[C]lsl\\f[R] recurse by default - use\n\\f[C]--max-depth 1\\f[R] to stop the recursion.\n.PP\nThe other list commands \\f[C]lsd\\f[R],\\f[C]lsf\\f[R],\\f[C]lsjson\\f[R] do\nnot recurse by default - use \\f[C]-R\\f[R] to make them recurse.\n.PP\nListing a nonexistent directory will produce an error except for remotes\nwhich can\\[aq]t have empty directories (e.g.\ns3, swift, or gcs - the bucket-based remotes).\n.IP\n.nf\n\\f[C]\nrclone lsjson remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --dirs-only               Show only directories in the listing\n      --encrypted               Show the encrypted names\n      --files-only              Show only files in the listing\n      --hash                    Include hashes in the output (may take longer)\n      --hash-type stringArray   Show only this hash type (may be repeated)\n  -h, --help                    help for lsjson\n  -M, --metadata                Add metadata to the listing\n      --no-mimetype             Don\\[aq]t read the mime type (can speed things up)\n      --no-modtime              Don\\[aq]t read the modification time (can speed things up)\n      --original                Show the ID of the underlying Object\n  -R, --recursive               Recurse into the listing\n      --stat                    Just return the info for the pointed to file\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone mount\n.PP\nMount the remote as file system on a mountpoint.\n.SS Synopsis\n.PP\nRclone mount allows Linux, FreeBSD, macOS and Windows to mount any of\nRclone\\[aq]s cloud storage systems as a file system with FUSE.\n.PP\nFirst set up your remote using \\f[C]rclone config\\f[R].\nCheck it works with \\f[C]rclone ls\\f[R] etc.\n.PP\nOn Linux and macOS, you can run mount in either foreground or background\n(aka daemon) mode.\nMount runs in foreground mode by default.\nUse the \\f[C]--daemon\\f[R] flag to force background mode.\nOn Windows you can run mount in foreground only, the flag is ignored.\n.PP\nIn background mode rclone acts as a generic Unix mount program: the main\nprogram starts, spawns background rclone process to setup and maintain\nthe mount, waits until success or timeout and exits with appropriate\ncode (killing the child process if it fails).\n.PP\nOn Linux/macOS/FreeBSD start the mount like this, where\n\\f[C]/path/to/local/mount\\f[R] is an \\f[B]empty\\f[R] \\f[B]existing\\f[R]\ndirectory:\n.IP\n.nf\n\\f[C]\nrclone mount remote:path/to/files /path/to/local/mount\n\\f[R]\n.fi\n.PP\nOn Windows you can start a mount in different ways.\nSee below for details.\nIf foreground mount is used interactively from a console window, rclone\nwill serve the mount and occupy the console so another window should be\nused to work with the mount until rclone is interrupted e.g.\nby pressing Ctrl-C.\n.PP\nThe following examples will mount to an automatically assigned drive, to\nspecific drive letter \\f[C]X:\\f[R], to path\n\\f[C]C:\\[rs]path\\[rs]parent\\[rs]mount\\f[R] (where parent directory or\ndrive must exist, and mount must \\f[B]not\\f[R] exist, and is not\nsupported when mounting as a network drive), and the last example will\nmount as network share \\f[C]\\[rs]\\[rs]cloud\\[rs]remote\\f[R] and map it\nto an automatically assigned drive:\n.IP\n.nf\n\\f[C]\nrclone mount remote:path/to/files *\nrclone mount remote:path/to/files X:\nrclone mount remote:path/to/files C:\\[rs]path\\[rs]parent\\[rs]mount\nrclone mount remote:path/to/files \\[rs]\\[rs]cloud\\[rs]remote\n\\f[R]\n.fi\n.PP\nWhen the program ends while in foreground mode, either via Ctrl+C or\nreceiving a SIGINT or SIGTERM signal, the mount should be automatically\nstopped.\n.PP\nWhen running in background mode the user will have to stop the mount\nmanually:\n.IP\n.nf\n\\f[C]\n# Linux\nfusermount -u /path/to/local/mount\n# OS X\numount /path/to/local/mount\n\\f[R]\n.fi\n.PP\nThe umount operation can fail, for example when the mountpoint is busy.\nWhen that happens, it is the user\\[aq]s responsibility to stop the mount\nmanually.\n.PP\nThe size of the mounted file system will be set according to information\nretrieved from the remote, the same as returned by the rclone\nabout (https://rclone.org/commands/rclone_about/) command.\nRemotes with unlimited storage may report the used size only, then an\nadditional 1 PiB of free space is assumed.\nIf the remote does not\nsupport (https://rclone.org/overview/#optional-features) the about\nfeature at all, then 1 PiB is set as both the total and the free size.\n.SS Installing on Windows\n.PP\nTo run rclone mount on Windows, you will need to download and install\nWinFsp (http://www.secfs.net/winfsp/).\n.PP\nWinFsp (https://github.com/winfsp/winfsp) is an open-source Windows File\nSystem Proxy which makes it easy to write user space file systems for\nWindows.\nIt provides a FUSE emulation layer which rclone uses combination with\ncgofuse (https://github.com/winfsp/cgofuse).\nBoth of these packages are by Bill Zissimopoulos who was very helpful\nduring the implementation of rclone mount for Windows.\n.SS Mounting modes on windows\n.PP\nUnlike other operating systems, Microsoft Windows provides a different\nfilesystem type for network and fixed drives.\nIt optimises access on the assumption fixed disk drives are fast and\nreliable, while network drives have relatively high latency and less\nreliability.\nSome settings can also be differentiated between the two types, for\nexample that Windows Explorer should just display icons and not create\npreview thumbnails for image and video files on network drives.\n.PP\nIn most cases, rclone will mount the remote as a normal, fixed disk\ndrive by default.\nHowever, you can also choose to mount it as a remote network drive,\noften described as a network share.\nIf you mount an rclone remote using the default, fixed drive mode and\nexperience unexpected program errors, freezes or other issues, consider\nmounting as a network drive instead.\n.PP\nWhen mounting as a fixed disk drive you can either mount to an unused\ndrive letter, or to a path representing a \\f[B]nonexistent\\f[R]\nsubdirectory of an \\f[B]existing\\f[R] parent directory or drive.\nUsing the special value \\f[C]*\\f[R] will tell rclone to automatically\nassign the next available drive letter, starting with Z: and moving\nbackward.\nExamples:\n.IP\n.nf\n\\f[C]\nrclone mount remote:path/to/files *\nrclone mount remote:path/to/files X:\nrclone mount remote:path/to/files C:\\[rs]path\\[rs]parent\\[rs]mount\nrclone mount remote:path/to/files X:\n\\f[R]\n.fi\n.PP\nOption \\f[C]--volname\\f[R] can be used to set a custom volume name for\nthe mounted file system.\nThe default is to use the remote name and path.\n.PP\nTo mount as network drive, you can add option \\f[C]--network-mode\\f[R]\nto your mount command.\nMounting to a directory path is not supported in this mode, it is a\nlimitation Windows imposes on junctions, so the remote must always be\nmounted to a drive letter.\n.IP\n.nf\n\\f[C]\nrclone mount remote:path/to/files X: --network-mode\n\\f[R]\n.fi\n.PP\nA volume name specified with \\f[C]--volname\\f[R] will be used to create\nthe network share path.\nA complete UNC path, such as \\f[C]\\[rs]\\[rs]cloud\\[rs]remote\\f[R],\noptionally with path\n\\f[C]\\[rs]\\[rs]cloud\\[rs]remote\\[rs]madeup\\[rs]path\\f[R], will be used\nas is.\nAny other string will be used as the share part, after a default prefix\n\\f[C]\\[rs]\\[rs]server\\[rs]\\f[R].\nIf no volume name is specified then \\f[C]\\[rs]\\[rs]server\\[rs]share\\f[R]\nwill be used.\nYou must make sure the volume name is unique when you are mounting more\nthan one drive, or else the mount command will fail.\nThe share name will treated as the volume label for the mapped drive,\nshown in Windows Explorer etc, while the complete\n\\f[C]\\[rs]\\[rs]server\\[rs]share\\f[R] will be reported as the remote UNC\npath by \\f[C]net use\\f[R] etc, just like a normal network drive mapping.\n.PP\nIf you specify a full network share UNC path with \\f[C]--volname\\f[R],\nthis will implicitly set the \\f[C]--network-mode\\f[R] option, so the\nfollowing two examples have same result:\n.IP\n.nf\n\\f[C]\nrclone mount remote:path/to/files X: --network-mode\nrclone mount remote:path/to/files X: --volname \\[rs]\\[rs]server\\[rs]share\n\\f[R]\n.fi\n.PP\nYou may also specify the network share UNC path as the mountpoint\nitself.\nThen rclone will automatically assign a drive letter, same as with\n\\f[C]*\\f[R] and use that as mountpoint, and instead use the UNC path\nspecified as the volume name, as if it were specified with the\n\\f[C]--volname\\f[R] option.\nThis will also implicitly set the \\f[C]--network-mode\\f[R] option.\nThis means the following two examples have same result:\n.IP\n.nf\n\\f[C]\nrclone mount remote:path/to/files \\[rs]\\[rs]cloud\\[rs]remote\nrclone mount remote:path/to/files * --volname \\[rs]\\[rs]cloud\\[rs]remote\n\\f[R]\n.fi\n.PP\nThere is yet another way to enable network mode, and to set the share\npath, and that is to pass the \\[dq]native\\[dq] libfuse/WinFsp option\ndirectly: \\f[C]--fuse-flag --VolumePrefix=\\[rs]server\\[rs]share\\f[R].\nNote that the path must be with just a single backslash prefix in this\ncase.\n.PP\n\\f[I]Note:\\f[R] In previous versions of rclone this was the only\nsupported method.\n.PP\nRead more about drive\nmapping (https://en.wikipedia.org/wiki/Drive_mapping)\n.PP\nSee also Limitations section below.\n.SS Windows filesystem permissions\n.PP\nThe FUSE emulation layer on Windows must convert between the POSIX-based\npermission model used in FUSE, and the permission model used in Windows,\nbased on access-control lists (ACL).\n.PP\nThe mounted filesystem will normally get three entries in its\naccess-control list (ACL), representing permissions for the POSIX\npermission scopes: Owner, group and others.\nBy default, the owner and group will be taken from the current user, and\nthe built-in group \\[dq]Everyone\\[dq] will be used to represent others.\nThe user/group can be customized with FUSE options \\[dq]UserName\\[dq]\nand \\[dq]GroupName\\[dq], e.g.\n\\f[C]-o UserName=user123 -o GroupName=\\[dq]Authenticated Users\\[dq]\\f[R].\nThe permissions on each entry will be set according to options\n\\f[C]--dir-perms\\f[R] and \\f[C]--file-perms\\f[R], which takes a value in\ntraditional Unix numeric\nnotation (https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\n.PP\nThe default permissions corresponds to\n\\f[C]--file-perms 0666 --dir-perms 0777\\f[R], i.e.\nread and write permissions to everyone.\nThis means you will not be able to start any programs from the mount.\nTo be able to do that you must add execute permissions, e.g.\n\\f[C]--file-perms 0777 --dir-perms 0777\\f[R] to add it to everyone.\nIf the program needs to write files, chances are you will have to enable\nVFS File Caching as well (see also limitations).\nNote that the default write permission have some restrictions for\naccounts other than the owner, specifically it lacks the \\[dq]write\nextended attributes\\[dq], as explained next.\n.PP\nThe mapping of permissions is not always trivial, and the result you see\nin Windows Explorer may not be exactly like you expected.\nFor example, when setting a value that includes write access for the\ngroup or others scope, this will be mapped to individual permissions\n\\[dq]write attributes\\[dq], \\[dq]write data\\[dq] and \\[dq]append\ndata\\[dq], but not \\[dq]write extended attributes\\[dq].\nWindows will then show this as basic permission \\[dq]Special\\[dq]\ninstead of \\[dq]Write\\[dq], because \\[dq]Write\\[dq] also covers the\n\\[dq]write extended attributes\\[dq] permission.\nWhen setting digit 0 for group or others, to indicate no permissions,\nthey will still get individual permissions \\[dq]read attributes\\[dq],\n\\[dq]read extended attributes\\[dq] and \\[dq]read permissions\\[dq].\nThis is done for compatibility reasons, e.g.\nto allow users without additional permissions to be able to read basic\nmetadata about files like in Unix.\n.PP\nWinFsp 2021 (version 1.9) introduced a new FUSE option\n\\[dq]FileSecurity\\[dq], that allows the complete specification of file\nsecurity descriptors using\nSDDL (https://docs.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format).\nWith this you get detailed control of the resulting permissions,\ncompared to use of the POSIX permissions described above, and no\nadditional permissions will be added automatically for compatibility\nwith Unix.\nSome example use cases will following.\n.PP\nIf you set POSIX permissions for only allowing access to the owner,\nusing \\f[C]--file-perms 0600 --dir-perms 0700\\f[R], the user group and\nthe built-in \\[dq]Everyone\\[dq] group will still be given some special\npermissions, as described above.\nSome programs may then (incorrectly) interpret this as the file being\naccessible by everyone, for example an SSH client may warn about\n\\[dq]unprotected private key file\\[dq].\nYou can work around this by specifying\n\\f[C]-o FileSecurity=\\[dq]D:P(A;;FA;;;OW)\\[dq]\\f[R], which sets file all\naccess (FA) to the owner (OW), and nothing else.\n.PP\nWhen setting write permissions then, except for the owner, this does not\ninclude the \\[dq]write extended attributes\\[dq] permission, as mentioned\nabove.\nThis may prevent applications from writing to files, giving permission\ndenied error instead.\nTo set working write permissions for the built-in \\[dq]Everyone\\[dq]\ngroup, similar to what it gets by default but with the addition of the\n\\[dq]write extended attributes\\[dq], you can specify\n\\f[C]-o FileSecurity=\\[dq]D:P(A;;FRFW;;;WD)\\[dq]\\f[R], which sets file\nread (FR) and file write (FW) to everyone (WD).\nIf file execute (FX) is also needed, then change to\n\\f[C]-o FileSecurity=\\[dq]D:P(A;;FRFWFX;;;WD)\\[dq]\\f[R], or set file all\naccess (FA) to get full access permissions, including delete, with\n\\f[C]-o FileSecurity=\\[dq]D:P(A;;FA;;;WD)\\[dq]\\f[R].\n.SS Windows caveats\n.PP\nDrives created as Administrator are not visible to other accounts, not\neven an account that was elevated to Administrator with the User Account\nControl (UAC) feature.\nA result of this is that if you mount to a drive letter from a Command\nPrompt run as Administrator, and then try to access the same drive from\nWindows Explorer (which does not run as Administrator), you will not be\nable to see the mounted drive.\n.PP\nIf you don\\[aq]t need to access the drive from applications running with\nadministrative privileges, the easiest way around this is to always\ncreate the mount from a non-elevated command prompt.\n.PP\nTo make mapped drives available to the user account that created them\nregardless if elevated or not, there is a special Windows setting called\nlinked\nconnections (https://docs.microsoft.com/en-us/troubleshoot/windows-client/networking/mapped-drives-not-available-from-elevated-command#detail-to-configure-the-enablelinkedconnections-registry-entry)\nthat can be enabled.\n.PP\nIt is also possible to make a drive mount available to everyone on the\nsystem, by running the process creating it as the built-in SYSTEM\naccount.\nThere are several ways to do this: One is to use the command-line\nutility\nPsExec (https://docs.microsoft.com/en-us/sysinternals/downloads/psexec),\nfrom Microsoft\\[aq]s Sysinternals suite, which has option \\f[C]-s\\f[R]\nto start processes as the SYSTEM account.\nAnother alternative is to run the mount command from a Windows Scheduled\nTask, or a Windows Service, configured to run as the SYSTEM account.\nA third alternative is to use the WinFsp.Launcher\ninfrastructure (https://github.com/winfsp/winfsp/wiki/WinFsp-Service-Architecture)).\nRead more in the install documentation (https://rclone.org/install/).\nNote that when running rclone as another user, it will not use the\nconfiguration file from your profile unless you tell it to with the\n\\f[C]--config\\f[R] (https://rclone.org/docs/#config-config-file) option.\nNote also that it is now the SYSTEM account that will have the owner\npermissions, and other accounts will have permissions according to the\ngroup or others scopes.\nAs mentioned above, these will then not get the \\[dq]write extended\nattributes\\[dq] permission, and this may prevent writing to files.\nYou can work around this with the FileSecurity option, see example\nabove.\n.PP\nNote that mapping to a directory path, instead of a drive letter, does\nnot suffer from the same limitations.\n.SS Mounting on macOS\n.PP\nMounting on macOS can be done either via built-in NFS\nserver (https://rclone.org/commands/rclone_serve_nfs/),\nmacFUSE (https://osxfuse.github.io/) (also known as osxfuse) or\nFUSE-T (https://www.fuse-t.org/).\nmacFUSE is a traditional FUSE driver utilizing a macOS kernel extension\n(kext).\nFUSE-T is an alternative FUSE system which \\[dq]mounts\\[dq] via an NFSv4\nlocal server.\n.SS Unicode Normalization\n.PP\nIt is highly recommended to keep the default of\n\\f[C]--no-unicode-normalization=false\\f[R] for all \\f[C]mount\\f[R] and\n\\f[C]serve\\f[R] commands on macOS.\nFor details, see\nvfs-case-sensitivity (https://rclone.org/commands/rclone_mount/#vfs-case-sensitivity).\n.SS NFS mount\n.PP\nThis method spins up an NFS server using serve\nnfs (https://rclone.org/commands/rclone_serve_nfs/) command and mounts\nit to the specified mountpoint.\nIf you run this in background mode using |--daemon|, you will need to\nsend SIGTERM signal to the rclone process using |kill| command to stop\nthe mount.\n.PP\nNote that \\f[C]--nfs-cache-handle-limit\\f[R] controls the maximum number\nof cached file handles stored by the \\f[C]nfsmount\\f[R] caching handler.\nThis should not be set too low or you may experience errors when trying\nto access files.\nThe default is 1000000, but consider lowering this limit if the\nserver\\[aq]s system resource usage causes problems.\n.SS macFUSE Notes\n.PP\nIf installing macFUSE using dmg\npackages (https://github.com/osxfuse/osxfuse/releases) from the website,\nrclone will locate the macFUSE libraries without any further\nintervention.\nIf however, macFUSE is installed using the\nmacports (https://www.macports.org/) package manager, the following\naddition steps are required.\n.IP\n.nf\n\\f[C]\nsudo mkdir /usr/local/lib\ncd /usr/local/lib\nsudo ln -s /opt/local/lib/libfuse.2.dylib\n\\f[R]\n.fi\n.SS FUSE-T Limitations, Caveats, and Notes\n.PP\nThere are some limitations, caveats, and notes about how it works.\nThese are current as of FUSE-T version 1.0.14.\n.SS ModTime update on read\n.PP\nAs per the FUSE-T\nwiki (https://github.com/macos-fuse-t/fuse-t/wiki#caveats):\n.RS\n.PP\nFile access and modification times cannot be set separately as it seems\nto be an issue with the NFS client which always modifies both.\nCan be reproduced with \\[aq]touch -m\\[aq] and \\[aq]touch -a\\[aq]\ncommands\n.RE\n.PP\nThis means that viewing files with various tools, notably macOS Finder,\nwill cause rlcone to update the modification time of the file.\nThis may make rclone upload a full new copy of the file.\n.SS Read Only mounts\n.PP\nWhen mounting with \\f[C]--read-only\\f[R], attempts to write to files\nwill fail \\f[I]silently\\f[R] as opposed to with a clear warning as in\nmacFUSE.\n.SS Limitations\n.PP\nWithout the use of \\f[C]--vfs-cache-mode\\f[R] this can only write files\nsequentially, it can only seek when reading.\nThis means that many applications won\\[aq]t work with their files on an\nrclone mount without \\f[C]--vfs-cache-mode writes\\f[R] or\n\\f[C]--vfs-cache-mode full\\f[R].\nSee the VFS File Caching section for more info.\nWhen using NFS mount on macOS, if you don\\[aq]t specify\n|--vfs-cache-mode| the mount point will be read-only.\n.PP\nThe bucket-based remotes (e.g.\nSwift, S3, Google Compute Storage, B2) do not support the concept of\nempty directories, so empty directories will have a tendency to\ndisappear once they fall out of the directory cache.\n.PP\nWhen \\f[C]rclone mount\\f[R] is invoked on Unix with \\f[C]--daemon\\f[R]\nflag, the main rclone program will wait for the background mount to\nbecome ready or until the timeout specified by the\n\\f[C]--daemon-wait\\f[R] flag.\nOn Linux it can check mount status using ProcFS so the flag in fact sets\n\\f[B]maximum\\f[R] time to wait, while the real wait can be less.\nOn macOS / BSD the time to wait is constant and the check is performed\nonly at the end.\nWe advise you to set wait time on macOS reasonably.\n.PP\nOnly supported on Linux, FreeBSD, OS X and Windows at the moment.\n.SS rclone mount vs rclone sync/copy\n.PP\nFile systems expect things to be 100% reliable, whereas cloud storage\nsystems are a long way from 100% reliable.\nThe rclone sync/copy commands cope with this with lots of retries.\nHowever rclone mount can\\[aq]t use retries in the same way without\nmaking local copies of the uploads.\nLook at the VFS File Caching for solutions to make mount more reliable.\n.SS Attribute caching\n.PP\nYou can use the flag \\f[C]--attr-timeout\\f[R] to set the time the kernel\ncaches the attributes (size, modification time, etc.) for directory\nentries.\n.PP\nThe default is \\f[C]1s\\f[R] which caches files just long enough to avoid\ntoo many callbacks to rclone from the kernel.\n.PP\nIn theory 0s should be the correct value for filesystems which can\nchange outside the control of the kernel.\nHowever this causes quite a few problems such as rclone using too much\nmemory (https://github.com/rclone/rclone/issues/2157), rclone not\nserving files to\nsamba (https://forum.rclone.org/t/rclone-1-39-vs-1-40-mount-issue/5112)\nand excessive time listing\ndirectories (https://github.com/rclone/rclone/issues/2095#issuecomment-371141147).\n.PP\nThe kernel can cache the info about a file for the time given by\n\\f[C]--attr-timeout\\f[R].\nYou may see corruption if the remote file changes length during this\nwindow.\nIt will show up as either a truncated file or a file with garbage on the\nend.\nWith \\f[C]--attr-timeout 1s\\f[R] this is very unlikely but not\nimpossible.\nThe higher you set \\f[C]--attr-timeout\\f[R] the more likely it is.\nThe default setting of \\[dq]1s\\[dq] is the lowest setting which\nmitigates the problems above.\n.PP\nIf you set it higher (\\f[C]10s\\f[R] or \\f[C]1m\\f[R] say) then the kernel\nwill call back to rclone less often making it more efficient, however\nthere is more chance of the corruption issue above.\n.PP\nIf files don\\[aq]t change on the remote outside of the control of rclone\nthen there is no chance of corruption.\n.PP\nThis is the same as setting the attr_timeout option in mount.fuse.\n.SS Filters\n.PP\nNote that all the rclone filters can be used to select a subset of the\nfiles to be visible in the mount.\n.SS systemd\n.PP\nWhen running rclone mount as a systemd service, it is possible to use\nType=notify.\nIn this case the service will enter the started state after the\nmountpoint has been successfully set up.\nUnits having the rclone mount service specified as a requirement will\nsee all files and folders immediately in this mode.\n.PP\nNote that systemd runs mount units without any environment variables\nincluding \\f[C]PATH\\f[R] or \\f[C]HOME\\f[R].\nThis means that tilde (\\f[C]\\[ti]\\f[R]) expansion will not work and you\nshould provide \\f[C]--config\\f[R] and \\f[C]--cache-dir\\f[R] explicitly\nas absolute paths via rclone arguments.\nSince mounting requires the \\f[C]fusermount\\f[R] program, rclone will\nuse the fallback PATH of \\f[C]/bin:/usr/bin\\f[R] in this scenario.\nPlease ensure that \\f[C]fusermount\\f[R] is present on this PATH.\n.SS Rclone as Unix mount helper\n.PP\nThe core Unix program \\f[C]/bin/mount\\f[R] normally takes the\n\\f[C]-t FSTYPE\\f[R] argument then runs the \\f[C]/sbin/mount.FSTYPE\\f[R]\nhelper program passing it mount options as \\f[C]-o key=val,...\\f[R] or\n\\f[C]--opt=...\\f[R].\nAutomount (classic or systemd) behaves in a similar way.\n.PP\nrclone by default expects GNU-style flags \\f[C]--key val\\f[R].\nTo run it as a mount helper you should symlink rclone binary to\n\\f[C]/sbin/mount.rclone\\f[R] and optionally \\f[C]/usr/bin/rclonefs\\f[R],\ne.g.\n\\f[C]ln -s /usr/bin/rclone /sbin/mount.rclone\\f[R].\nrclone will detect it and translate command-line arguments\nappropriately.\n.PP\nNow you can run classic mounts like this:\n.IP\n.nf\n\\f[C]\nmount sftp1:subdir /mnt/data -t rclone -o vfs_cache_mode=writes,sftp_key_file=/path/to/pem\n\\f[R]\n.fi\n.PP\nor create systemd mount units:\n.IP\n.nf\n\\f[C]\n# /etc/systemd/system/mnt-data.mount\n[Unit]\nDescription=Mount for /mnt/data\n[Mount]\nType=rclone\nWhat=sftp1:subdir\nWhere=/mnt/data\nOptions=rw,_netdev,allow_other,args2env,vfs-cache-mode=writes,config=/etc/rclone.conf,cache-dir=/var/rclone\n\\f[R]\n.fi\n.PP\noptionally accompanied by systemd automount unit\n.IP\n.nf\n\\f[C]\n# /etc/systemd/system/mnt-data.automount\n[Unit]\nDescription=AutoMount for /mnt/data\n[Automount]\nWhere=/mnt/data\nTimeoutIdleSec=600\n[Install]\nWantedBy=multi-user.target\n\\f[R]\n.fi\n.PP\nor add in \\f[C]/etc/fstab\\f[R] a line like\n.IP\n.nf\n\\f[C]\nsftp1:subdir /mnt/data rclone rw,noauto,nofail,_netdev,x-systemd.automount,args2env,vfs_cache_mode=writes,config=/etc/rclone.conf,cache_dir=/var/cache/rclone 0 0\n\\f[R]\n.fi\n.PP\nor use classic Automountd.\nRemember to provide explicit \\f[C]config=...,cache-dir=...\\f[R] as a\nworkaround for mount units being run without \\f[C]HOME\\f[R].\n.PP\nRclone in the mount helper mode will split \\f[C]-o\\f[R] argument(s) by\ncomma, replace \\f[C]_\\f[R] by \\f[C]-\\f[R] and prepend \\f[C]--\\f[R] to\nget the command-line flags.\nOptions containing commas or spaces can be wrapped in single or double\nquotes.\nAny inner quotes inside outer quotes of the same type should be doubled.\n.PP\nMount option syntax includes a few extra options treated specially:\n.IP \\[bu] 2\n\\f[C]env.NAME=VALUE\\f[R] will set an environment variable for the mount\nprocess.\nThis helps with Automountd and Systemd.mount which don\\[aq]t allow\nsetting custom environment for mount helpers.\nTypically you will use \\f[C]env.HTTPS_PROXY=proxy.host:3128\\f[R] or\n\\f[C]env.HOME=/root\\f[R]\n.IP \\[bu] 2\n\\f[C]command=cmount\\f[R] can be used to run \\f[C]cmount\\f[R] or any\nother rclone command rather than the default \\f[C]mount\\f[R].\n.IP \\[bu] 2\n\\f[C]args2env\\f[R] will pass mount options to the mount helper running\nin background via environment variables instead of command line\narguments.\nThis allows to hide secrets from such commands as \\f[C]ps\\f[R] or\n\\f[C]pgrep\\f[R].\n.IP \\[bu] 2\n\\f[C]vv...\\f[R] will be transformed into appropriate\n\\f[C]--verbose=N\\f[R]\n.IP \\[bu] 2\nstandard mount options like \\f[C]x-systemd.automount\\f[R],\n\\f[C]_netdev\\f[R], \\f[C]nosuid\\f[R] and alike are intended only for\nAutomountd and ignored by rclone.\n.SS VFS - Virtual File System\n.PP\nThis command uses the VFS layer.\nThis adapts the cloud storage objects that rclone uses into something\nwhich looks much more like a disk filing system.\n.PP\nCloud storage objects have lots of properties which aren\\[aq]t like disk\nfiles - you can\\[aq]t extend them or write to the middle of them, so the\nVFS layer has to deal with that.\nBecause there is no one right way of doing this there are various\noptions explained below.\n.PP\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n.SS VFS Directory Cache\n.PP\nUsing the \\f[C]--dir-cache-time\\f[R] flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n.IP\n.nf\n\\f[C]\n--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\\f[R]\n.fi\n.PP\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges.\nIf the backend supports polling, changes will be picked up within the\npolling interval.\n.PP\nYou can send a \\f[C]SIGHUP\\f[R] signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.\nAssuming only one rclone instance is running, you can reset the cache\nlike this:\n.IP\n.nf\n\\f[C]\nkill -SIGHUP $(pidof rclone)\n\\f[R]\n.fi\n.PP\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget\n\\f[R]\n.fi\n.PP\nOr individual files or directories:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget file=path/to/file dir=path/to/dir\n\\f[R]\n.fi\n.SS VFS File Buffering\n.PP\nThe \\f[C]--buffer-size\\f[R] flag determines the amount of memory, that\nwill be used to buffer data in advance.\n.PP\nEach open file will try to keep the specified amount of data in memory\nat all times.\nThe buffered data is bound to one open file and won\\[aq]t be shared.\n.PP\nThis flag is a upper limit for the used memory per open file.\nThe buffer will only use memory for data that is downloaded but not not\nyet read.\nIf the buffer is empty, only a small amount of memory will be used.\n.PP\nThe maximum memory used by rclone for buffering can be up to\n\\f[C]--buffer-size * open files\\f[R].\n.SS VFS File Caching\n.PP\nThese flags control the VFS file caching options.\nFile caching is necessary to make the VFS layer appear compatible with a\nnormal file system.\nIt can be disabled at the cost of some compatibility.\n.PP\nFor example you\\[aq]ll need to enable VFS caching if you want to read\nand write simultaneously to a file.\nSee below for more details.\n.PP\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n.IP\n.nf\n\\f[C]\n--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\\f[R]\n.fi\n.PP\nIf run with \\f[C]-vv\\f[R] rclone will print the location of the file\ncache.\nThe files are stored in the user cache file area which is OS dependent\nbut can be controlled with \\f[C]--cache-dir\\f[R] or setting the\nappropriate environment variable.\n.PP\nThe cache has 4 different modes selected by \\f[C]--vfs-cache-mode\\f[R].\nThe higher the cache mode the more compatible rclone becomes at the cost\nof using disk space.\n.PP\nNote that files are written back to the remote only when they are closed\nand if they haven\\[aq]t been accessed for \\f[C]--vfs-write-back\\f[R]\nseconds.\nIf rclone is quit or dies with files that haven\\[aq]t been uploaded,\nthese will be uploaded next time rclone is run with the same flags.\n.PP\nIf using \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] note that the cache may exceed these\nquotas for two reasons.\nFirstly because it is only checked every\n\\f[C]--vfs-cache-poll-interval\\f[R].\nSecondly because open files cannot be evicted from the cache.\nWhen \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] is exceeded, rclone will attempt to\nevict the least accessed files from the cache first.\nrclone will start with files that haven\\[aq]t been accessed for the\nlongest.\nThis cache flushing strategy is efficient and more relevant files are\nlikely to remain cached.\n.PP\nThe \\f[C]--vfs-cache-max-age\\f[R] will evict files from the cache after\nthe set time since last access has passed.\nThe default value of 1 hour will start evicting files from cache that\nhaven\\[aq]t been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting.\nSpecify the time with standard notation, s, m, h, d, w .\n.PP\nYou \\f[B]should not\\f[R] run two copies of rclone using the same VFS\ncache with the same or overlapping remotes if using\n\\f[C]--vfs-cache-mode > off\\f[R].\nThis can potentially cause data corruption if you do.\nYou can work around this by giving each rclone its own cache hierarchy\nwith \\f[C]--cache-dir\\f[R].\nYou don\\[aq]t need to worry about this if the remotes in use don\\[aq]t\noverlap.\n.SS --vfs-cache-mode off\n.PP\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n.PP\nThis will mean some operations are not possible\n.IP \\[bu] 2\nFiles can\\[aq]t be opened for both read AND write\n.IP \\[bu] 2\nFiles opened for write can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles open for read with O_TRUNC will be opened write only\n.IP \\[bu] 2\nFiles open for write only will behave as if O_TRUNC was supplied\n.IP \\[bu] 2\nOpen modes O_APPEND, O_TRUNC are ignored\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode minimal\n.PP\nThis is very similar to \\[dq]off\\[dq] except that files opened for read\nAND write will be buffered to disk.\nThis means that files opened for write will be a lot more compatible,\nbut uses the minimal disk space.\n.PP\nThese operations are not possible\n.IP \\[bu] 2\nFiles opened for write only can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles opened for write only will ignore O_APPEND, O_TRUNC\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode writes\n.PP\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n.PP\nThis mode should support all normal file system operations.\n.PP\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n.SS --vfs-cache-mode full\n.PP\nIn this mode all reads and writes are buffered to and from disk.\nWhen data is read from the remote this is buffered to disk as well.\n.PP\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n.PP\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file.\nThese files will appear to be their full size in the cache, but they\nwill be sparse files with only the data that has been downloaded present\nin them.\n.PP\nThis mode should support all normal file system operations and is\notherwise identical to \\f[C]--vfs-cache-mode\\f[R] writes.\n.PP\nWhen reading a file rclone will read \\f[C]--buffer-size\\f[R] plus\n\\f[C]--vfs-read-ahead\\f[R] bytes ahead.\nThe \\f[C]--buffer-size\\f[R] is buffered in memory whereas the\n\\f[C]--vfs-read-ahead\\f[R] is buffered on disk.\n.PP\nWhen using this mode it is recommended that \\f[C]--buffer-size\\f[R] is\nnot set too large and \\f[C]--vfs-read-ahead\\f[R] is set large if\nrequired.\n.PP\n\\f[B]IMPORTANT\\f[R] not all file systems support sparse files.\nIn particular FAT/exFAT do not.\nRclone will perform very badly if the cache directory is on a filesystem\nwhich doesn\\[aq]t support sparse files and it will log an ERROR message\nif one is detected.\n.SS Fingerprinting\n.PP\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file.\nFingerprints are made from:\n.IP \\[bu] 2\nsize\n.IP \\[bu] 2\nmodification time\n.IP \\[bu] 2\nhash\n.PP\nwhere available on an object.\n.PP\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n.PP\nFor example \\f[C]hash\\f[R] is slow with the \\f[C]local\\f[R] and\n\\f[C]sftp\\f[R] backends as they have to read the entire file and hash\nit, and \\f[C]modtime\\f[R] is slow with the \\f[C]s3\\f[R],\n\\f[C]swift\\f[R], \\f[C]ftp\\f[R] and \\f[C]qinqstor\\f[R] backends because\nthey need to do an extra API call to fetch it.\n.PP\nIf you use the \\f[C]--vfs-fast-fingerprint\\f[R] flag then rclone will\nnot include the slow operations in the fingerprint.\nThis makes the fingerprinting less accurate but much faster and will\nimprove the opening time of cached files.\n.PP\nIf you are running a vfs cache over \\f[C]local\\f[R], \\f[C]s3\\f[R] or\n\\f[C]swift\\f[R] backends then using this flag is recommended.\n.PP\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n.SS VFS Chunked Reading\n.PP\nWhen rclone reads files from a remote it reads them in chunks.\nThis means that rather than requesting the whole file rclone reads the\nchunk specified.\nThis can reduce the used download quota for some remotes by requesting\nonly chunks from the remote that are actually read, at the cost of an\nincreased number of requests.\n.PP\nThese flags control the chunking:\n.IP\n.nf\n\\f[C]\n--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once\n\\f[R]\n.fi\n.PP\nThe chunking behaves differently depending on the\n\\f[C]--vfs-read-chunk-streams\\f[R] parameter.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] == 0\n.PP\nRclone will start reading a chunk of size\n\\f[C]--vfs-read-chunk-size\\f[R], and then double the size for each read.\nWhen \\f[C]--vfs-read-chunk-size-limit\\f[R] is specified, and greater\nthan \\f[C]--vfs-read-chunk-size\\f[R], the chunk size for each open file\nwill get doubled only until the specified value is reached.\nIf the value is \\[dq]off\\[dq], which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n.PP\nWith \\f[C]--vfs-read-chunk-size 100M\\f[R] and\n\\f[C]--vfs-read-chunk-size-limit 0\\f[R] the following parts will be\ndownloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen \\f[C]--vfs-read-chunk-size-limit 500M\\f[R] is specified, the result\nwould be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so\non.\n.PP\nSetting \\f[C]--vfs-read-chunk-size\\f[R] to \\f[C]0\\f[R] or \\[dq]off\\[dq]\ndisables chunked reading.\n.PP\nThe chunks will not be buffered in memory.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] > 0\n.PP\nRclone reads \\f[C]--vfs-read-chunk-streams\\f[R] chunks of size\n\\f[C]--vfs-read-chunk-size\\f[R] concurrently.\nThe size for each read will stay constant.\n.PP\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n.PP\nSome experimentation will be needed to find the optimum values of\n\\f[C]--vfs-read-chunk-size\\f[R] and \\f[C]--vfs-read-chunk-streams\\f[R]\nas these will depend on the backend in use and the latency to the\nbackend.\n.PP\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be \\f[C]--vfs-read-chunk-streams 16\\f[R] and\n\\f[C]--vfs-read-chunk-size 4M\\f[R].\nIn testing with AWS S3 the performance scaled roughly as the\n\\f[C]--vfs-read-chunk-streams\\f[R] setting.\n.PP\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more \\f[C]--vfs-read-chunk-streams\\f[R] in\norder to get the throughput.\n.SS VFS Performance\n.PP\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons.\nSee also the chunked reading feature.\n.PP\nIn particular S3 and Swift benefit hugely from the\n\\f[C]--no-modtime\\f[R] flag (or use \\f[C]--use-server-modtime\\f[R] for a\nslightly different effect) as each read of the modification time takes a\ntransaction.\n.IP\n.nf\n\\f[C]\n--no-checksum     Don\\[aq]t compare checksums on up/download.\n--no-modtime      Don\\[aq]t read/write the modification time (can speed things up).\n--no-seek         Don\\[aq]t allow seeking in files.\n--read-only       Only allow read-only access.\n\\f[R]\n.fi\n.PP\nSometimes rclone is delivered reads or writes out of order.\nRather than seeking rclone will wait a short time for the in sequence\nread or write to come in.\nThese flags only come into effect when not using an on disk cache file.\n.IP\n.nf\n\\f[C]\n--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\\f[R]\n.fi\n.PP\nWhen using VFS write caching (\\f[C]--vfs-cache-mode\\f[R] with value\nwrites or full), the global flag \\f[C]--transfers\\f[R] can be set to\nadjust the number of parallel uploads of modified files from the cache\n(the related global flag \\f[C]--checkers\\f[R] has no effect on the VFS).\n.IP\n.nf\n\\f[C]\n--transfers int  Number of file transfers to run in parallel (default 4)\n\\f[R]\n.fi\n.SS VFS Case Sensitivity\n.PP\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n.PP\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery.\nIt is not allowed for two files in the same directory to differ only by\ncase.\n.PP\nUsually file systems on macOS are case-insensitive.\nIt is possible to make macOS file systems case-sensitive but that is not\nthe default.\n.PP\nThe \\f[C]--vfs-case-insensitive\\f[R] VFS flag controls how rclone\nhandles these two cases.\nIf its value is \\[dq]false\\[dq], rclone passes file names to the remote\nas-is.\nIf the flag is \\[dq]true\\[dq] (or appears without a value on the command\nline), rclone may perform a \\[dq]fixup\\[dq] as explained below.\n.PP\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote.\nIf an argument refers to an existing file with exactly the same name,\nthen the case of the existing file on the disk will be used.\nHowever, if a file name with exactly the same name is not found but a\nname differing only by case exists, rclone will transparently fixup the\nname.\nThis fixup happens only when an existing file is requested.\nCase sensitivity of file names created anew by rclone is controlled by\nthe underlying remote.\n.PP\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source).\nThe flag controls whether \\[dq]fixup\\[dq] is performed to satisfy the\ntarget.\n.PP\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \\[dq]true\\[dq] on\nWindows and macOS, \\[dq]false\\[dq] otherwise.\nIf the flag is provided without a value, then it is \\[dq]true\\[dq].\n.PP\nThe \\f[C]--no-unicode-normalization\\f[R] flag controls whether a similar\n\\[dq]fixup\\[dq] is performed for filenames that differ but are\ncanonically\nequivalent (https://en.wikipedia.org/wiki/Unicode_equivalence) with\nrespect to unicode.\nUnicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms.\nIt is therefore highly recommended to keep the default of\n\\f[C]false\\f[R] on macOS, to avoid encoding compatibility issues.\n.PP\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n\\f[C]--vfs-block-norm-dupes\\f[R] flag allows hiding these duplicates.\nThis comes with a performance tradeoff, as rclone will have to scan the\nentire directory for duplicates when listing a directory.\nFor this reason, it is recommended to leave this disabled if not needed.\nHowever, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same\nfilename, an odd situation will occur: both versions of the file will be\nvisible in the mount, and both will appear to be editable, however,\nediting either version will actually result in only the NFD version\ngetting edited under the hood.\n\\f[C]--vfs-block- norm-dupes\\f[R] prevents this confusion by detecting\nthis scenario, hiding the duplicates, and logging an error, similar to\nhow this is handled in \\f[C]rclone sync\\f[R].\n.SS VFS Disk Options\n.PP\nThis flag allows you to manually set the statistics about the filing\nsystem.\nIt can be useful when those statistics cannot be read correctly\nautomatically.\n.IP\n.nf\n\\f[C]\n--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\\f[R]\n.fi\n.SS Alternate report of used bytes\n.PP\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running \\f[C]df\\f[R]\non the filesystem, then pass the flag \\f[C]--vfs-used-is-size\\f[R] to\nrclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to\n\\f[C]rclone size\\f[R] and compute the total used space itself.\n.PP\n\\f[I]WARNING.\\f[R] Contrary to \\f[C]rclone size\\f[R], this flag ignores\nfilters so that the result is accurate.\nHowever, this is very inefficient and may cost lots of API calls\nresulting in extra charges.\nUse it as a last resort and only with caching.\n.IP\n.nf\n\\f[C]\nrclone mount remote:path /path/to/mountpoint [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n      --allow-other                            Allow access to other users (not supported on Windows)\n      --allow-root                             Allow access to root user (not supported on Windows)\n      --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n      --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n      --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n      --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n      --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n      --debug-fuse                             Debug the FUSE internals - needs -v\n      --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n      --devname string                         Set the device name - default is remote:path\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --direct-io                              Use Direct IO, disables caching of data\n      --file-perms FileMode                    File permissions (default 666)\n      --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for mount\n      --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n      --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n      --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n      --no-checksum                            Don\\[aq]t compare checksums on up/download\n      --no-modtime                             Don\\[aq]t read/write the modification time (can speed things up)\n      --no-seek                                Don\\[aq]t allow seeking in files\n      --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n      --noapplexattr                           Ignore all \\[dq]com.apple.*\\[dq] extended attributes (supported on OSX only)\n  -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (\\[aq]off\\[aq] is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n      --volname string                         Set the volume name (supported on Windows and OSX only)\n      --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone moveto\n.PP\nMove file or directory from source to dest.\n.SS Synopsis\n.PP\nIf source:path is a file or directory then it moves it to a file or\ndirectory named dest:path.\n.PP\nThis can be used to rename files or upload single files to other than\ntheir existing name.\nIf the source is a directory then it acts exactly like the\nmove (https://rclone.org/commands/rclone_move/) command.\n.PP\nSo\n.IP\n.nf\n\\f[C]\nrclone moveto src dst\n\\f[R]\n.fi\n.PP\nwhere src and dst are rclone paths, either remote:path or /path/to/local\nor C:.\n.PP\nThis will:\n.IP\n.nf\n\\f[C]\nif src is file\n    move it to dst, overwriting an existing file if it exists\nif src is directory\n    move it to dst, overwriting existing files if they exist\n    see move command for full details\n\\f[R]\n.fi\n.PP\nThis doesn\\[aq]t transfer files that are identical on src and dst,\ntesting by size and modification time or MD5SUM.\nsrc will be deleted on successful transfer.\n.PP\n\\f[B]Important\\f[R]: Since this can cause data loss, test first with the\n\\f[C]--dry-run\\f[R] or the \\f[C]--interactive\\f[R]/\\f[C]-i\\f[R] flag.\n.PP\n\\f[B]Note\\f[R]: Use the \\f[C]-P\\f[R]/\\f[C]--progress\\f[R] flag to view\nreal-time transfer statistics.\n.IP\n.nf\n\\f[C]\nrclone moveto source:path dest:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for moveto\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Copy Options\n.PP\nFlags for anything which can copy a file\n.IP\n.nf\n\\f[C]\n      --check-first                                 Do all the checks before starting transfers\n  -c, --checksum                                    Check for changes with size & checksum (if available, or fallback to size only)\n      --compare-dest stringArray                    Include additional server-side paths during comparison\n      --copy-dest stringArray                       Implies --compare-dest but also copies files from paths into destination\n      --cutoff-mode HARD|SOFT|CAUTIOUS              Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS (default HARD)\n      --ignore-case-sync                            Ignore case when synchronizing\n      --ignore-checksum                             Skip post copy check of checksums\n      --ignore-existing                             Skip all files that exist on destination\n      --ignore-size                                 Ignore size when skipping use modtime or checksum\n  -I, --ignore-times                                Don\\[aq]t skip items that match size and time - transfer all unconditionally\n      --immutable                                   Do not modify files, fail if existing files have been modified\n      --inplace                                     Download directly to destination file instead of atomic download to temp/rename\n      --max-backlog int                             Maximum number of objects in sync or check backlog (default 10000)\n      --max-duration Duration                       Maximum duration rclone will transfer data for (default 0s)\n      --max-transfer SizeSuffix                     Maximum size of data to transfer (default off)\n  -M, --metadata                                    If set, preserve metadata when copying objects\n      --modify-window Duration                      Max time diff to be considered the same (default 1ns)\n      --multi-thread-chunk-size SizeSuffix          Chunk size for multi-thread downloads / uploads, if not set by filesystem (default 64Mi)\n      --multi-thread-cutoff SizeSuffix              Use multi-thread downloads for files above this size (default 256Mi)\n      --multi-thread-streams int                    Number of streams to use for multi-thread downloads (default 4)\n      --multi-thread-write-buffer-size SizeSuffix   In memory buffer size for writing when in multi-thread mode (default 128Ki)\n      --no-check-dest                               Don\\[aq]t check the destination, copy regardless\n      --no-traverse                                 Don\\[aq]t traverse destination file system on copy\n      --no-update-dir-modtime                       Don\\[aq]t update directory modification times\n      --no-update-modtime                           Don\\[aq]t update destination modtime if files identical\n      --order-by string                             Instructions on how to order the transfers, e.g. \\[aq]size,descending\\[aq]\n      --partial-suffix string                       Add partial-suffix to temporary file name when --inplace is not used (default \\[dq].partial\\[dq])\n      --refresh-times                               Refresh the modtime of remote files\n      --server-side-across-configs                  Allow server-side operations (e.g. copy) to work across different configs\n      --size-only                                   Skip based on size only, not modtime or checksum\n      --streaming-upload-cutoff SizeSuffix          Cutoff for switching to chunked upload if file size is unknown, upload starts after reaching cutoff or when file ends (default 100Ki)\n  -u, --update                                      Skip files that are newer on the destination\n\\f[R]\n.fi\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone ncdu\n.PP\nExplore a remote with a text based user interface.\n.SS Synopsis\n.PP\nThis displays a text based user interface allowing the navigation of a\nremote.\nIt is most useful for answering the question - \\[dq]What is using all my\ndisk space?\\[dq].\n.PP\nTo make the user interface it first scans the entire remote given and\nbuilds an in memory representation.\nrclone ncdu can be used during this scanning phase and you will see it\nbuilding up the directory structure as it goes along.\n.PP\nYou can interact with the user interface using key presses, press\n\\[aq]?\\[aq] to toggle the help on and off.\nThe supported keys are:\n.IP\n.nf\n\\f[C]\n \\[ua],\\[da] or k,j to Move\n \\[->],l to enter\n \\[<-],h to return\n g toggle graph\n c toggle counts\n a toggle average size in directory\n m toggle modified time\n u toggle human-readable format\n n,s,C,A,M sort by name,size,count,asize,mtime\n d delete file/directory\n v select file/directory\n V enter visual select mode\n D delete selected files/directories\n y copy current path to clipboard\n Y display current path\n \\[ha]L refresh screen (fix screen corruption)\n r recalculate file sizes\n ? to toggle help on and off\n ESC to close the menu box\n q/\\[ha]c to quit\n\\f[R]\n.fi\n.PP\nListed files/directories may be prefixed by a one-character flag, some\nof them combined with a description in brackets at end of line.\nThese flags have the following meaning:\n.IP\n.nf\n\\f[C]\ne means this is an empty directory, i.e. contains no files (but\n  may contain empty subdirectories)\n\\[ti] means this is a directory where some of the files (possibly in\n  subdirectories) have unknown size, and therefore the directory\n  size may be underestimated (and average size inaccurate, as it\n  is average of the files with known sizes).\n\\&. means an error occurred while reading a subdirectory, and\n  therefore the directory size may be underestimated (and average\n  size inaccurate)\n! means an error occurred while reading this directory\n\\f[R]\n.fi\n.PP\nThis an homage to the ncdu tool (https://dev.yorhel.nl/ncdu) but for\nrclone remotes.\nIt is missing lots of features at the moment but is useful as it stands.\nUnlike ncdu it does not show excluded files.\n.PP\nNote that it might take some time to delete big files/directories.\nThe UI won\\[aq]t respond in the meantime since the deletion is done\nsynchronously.\n.PP\nFor a non-interactive listing of the remote, see the\ntree (https://rclone.org/commands/rclone_tree/) command.\nTo just get the total size of the remote you can also use the\nsize (https://rclone.org/commands/rclone_size/) command.\n.IP\n.nf\n\\f[C]\nrclone ncdu remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for ncdu\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS Listing Options\n.PP\nFlags for listing directories\n.IP\n.nf\n\\f[C]\n      --default-time Time   Time to show if modtime is unknown for files and directories (default 2000-01-01T00:00:00Z)\n      --fast-list           Use recursive list if available; uses more memory but fewer transactions\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone nfsmount\n.PP\nMount the remote as file system on a mountpoint.\n.SS Synopsis\n.PP\nRclone nfsmount allows Linux, FreeBSD, macOS and Windows to mount any of\nRclone\\[aq]s cloud storage systems as a file system with FUSE.\n.PP\nFirst set up your remote using \\f[C]rclone config\\f[R].\nCheck it works with \\f[C]rclone ls\\f[R] etc.\n.PP\nOn Linux and macOS, you can run mount in either foreground or background\n(aka daemon) mode.\nMount runs in foreground mode by default.\nUse the \\f[C]--daemon\\f[R] flag to force background mode.\nOn Windows you can run mount in foreground only, the flag is ignored.\n.PP\nIn background mode rclone acts as a generic Unix mount program: the main\nprogram starts, spawns background rclone process to setup and maintain\nthe mount, waits until success or timeout and exits with appropriate\ncode (killing the child process if it fails).\n.PP\nOn Linux/macOS/FreeBSD start the mount like this, where\n\\f[C]/path/to/local/mount\\f[R] is an \\f[B]empty\\f[R] \\f[B]existing\\f[R]\ndirectory:\n.IP\n.nf\n\\f[C]\nrclone nfsmount remote:path/to/files /path/to/local/mount\n\\f[R]\n.fi\n.PP\nOn Windows you can start a mount in different ways.\nSee below for details.\nIf foreground mount is used interactively from a console window, rclone\nwill serve the mount and occupy the console so another window should be\nused to work with the mount until rclone is interrupted e.g.\nby pressing Ctrl-C.\n.PP\nThe following examples will mount to an automatically assigned drive, to\nspecific drive letter \\f[C]X:\\f[R], to path\n\\f[C]C:\\[rs]path\\[rs]parent\\[rs]mount\\f[R] (where parent directory or\ndrive must exist, and mount must \\f[B]not\\f[R] exist, and is not\nsupported when mounting as a network drive), and the last example will\nmount as network share \\f[C]\\[rs]\\[rs]cloud\\[rs]remote\\f[R] and map it\nto an automatically assigned drive:\n.IP\n.nf\n\\f[C]\nrclone nfsmount remote:path/to/files *\nrclone nfsmount remote:path/to/files X:\nrclone nfsmount remote:path/to/files C:\\[rs]path\\[rs]parent\\[rs]mount\nrclone nfsmount remote:path/to/files \\[rs]\\[rs]cloud\\[rs]remote\n\\f[R]\n.fi\n.PP\nWhen the program ends while in foreground mode, either via Ctrl+C or\nreceiving a SIGINT or SIGTERM signal, the mount should be automatically\nstopped.\n.PP\nWhen running in background mode the user will have to stop the mount\nmanually:\n.IP\n.nf\n\\f[C]\n# Linux\nfusermount -u /path/to/local/mount\n# OS X\numount /path/to/local/mount\n\\f[R]\n.fi\n.PP\nThe umount operation can fail, for example when the mountpoint is busy.\nWhen that happens, it is the user\\[aq]s responsibility to stop the mount\nmanually.\n.PP\nThe size of the mounted file system will be set according to information\nretrieved from the remote, the same as returned by the rclone\nabout (https://rclone.org/commands/rclone_about/) command.\nRemotes with unlimited storage may report the used size only, then an\nadditional 1 PiB of free space is assumed.\nIf the remote does not\nsupport (https://rclone.org/overview/#optional-features) the about\nfeature at all, then 1 PiB is set as both the total and the free size.\n.SS Installing on Windows\n.PP\nTo run rclone nfsmount on Windows, you will need to download and install\nWinFsp (http://www.secfs.net/winfsp/).\n.PP\nWinFsp (https://github.com/winfsp/winfsp) is an open-source Windows File\nSystem Proxy which makes it easy to write user space file systems for\nWindows.\nIt provides a FUSE emulation layer which rclone uses combination with\ncgofuse (https://github.com/winfsp/cgofuse).\nBoth of these packages are by Bill Zissimopoulos who was very helpful\nduring the implementation of rclone nfsmount for Windows.\n.SS Mounting modes on windows\n.PP\nUnlike other operating systems, Microsoft Windows provides a different\nfilesystem type for network and fixed drives.\nIt optimises access on the assumption fixed disk drives are fast and\nreliable, while network drives have relatively high latency and less\nreliability.\nSome settings can also be differentiated between the two types, for\nexample that Windows Explorer should just display icons and not create\npreview thumbnails for image and video files on network drives.\n.PP\nIn most cases, rclone will mount the remote as a normal, fixed disk\ndrive by default.\nHowever, you can also choose to mount it as a remote network drive,\noften described as a network share.\nIf you mount an rclone remote using the default, fixed drive mode and\nexperience unexpected program errors, freezes or other issues, consider\nmounting as a network drive instead.\n.PP\nWhen mounting as a fixed disk drive you can either mount to an unused\ndrive letter, or to a path representing a \\f[B]nonexistent\\f[R]\nsubdirectory of an \\f[B]existing\\f[R] parent directory or drive.\nUsing the special value \\f[C]*\\f[R] will tell rclone to automatically\nassign the next available drive letter, starting with Z: and moving\nbackward.\nExamples:\n.IP\n.nf\n\\f[C]\nrclone nfsmount remote:path/to/files *\nrclone nfsmount remote:path/to/files X:\nrclone nfsmount remote:path/to/files C:\\[rs]path\\[rs]parent\\[rs]mount\nrclone nfsmount remote:path/to/files X:\n\\f[R]\n.fi\n.PP\nOption \\f[C]--volname\\f[R] can be used to set a custom volume name for\nthe mounted file system.\nThe default is to use the remote name and path.\n.PP\nTo mount as network drive, you can add option \\f[C]--network-mode\\f[R]\nto your nfsmount command.\nMounting to a directory path is not supported in this mode, it is a\nlimitation Windows imposes on junctions, so the remote must always be\nmounted to a drive letter.\n.IP\n.nf\n\\f[C]\nrclone nfsmount remote:path/to/files X: --network-mode\n\\f[R]\n.fi\n.PP\nA volume name specified with \\f[C]--volname\\f[R] will be used to create\nthe network share path.\nA complete UNC path, such as \\f[C]\\[rs]\\[rs]cloud\\[rs]remote\\f[R],\noptionally with path\n\\f[C]\\[rs]\\[rs]cloud\\[rs]remote\\[rs]madeup\\[rs]path\\f[R], will be used\nas is.\nAny other string will be used as the share part, after a default prefix\n\\f[C]\\[rs]\\[rs]server\\[rs]\\f[R].\nIf no volume name is specified then \\f[C]\\[rs]\\[rs]server\\[rs]share\\f[R]\nwill be used.\nYou must make sure the volume name is unique when you are mounting more\nthan one drive, or else the mount command will fail.\nThe share name will treated as the volume label for the mapped drive,\nshown in Windows Explorer etc, while the complete\n\\f[C]\\[rs]\\[rs]server\\[rs]share\\f[R] will be reported as the remote UNC\npath by \\f[C]net use\\f[R] etc, just like a normal network drive mapping.\n.PP\nIf you specify a full network share UNC path with \\f[C]--volname\\f[R],\nthis will implicitly set the \\f[C]--network-mode\\f[R] option, so the\nfollowing two examples have same result:\n.IP\n.nf\n\\f[C]\nrclone nfsmount remote:path/to/files X: --network-mode\nrclone nfsmount remote:path/to/files X: --volname \\[rs]\\[rs]server\\[rs]share\n\\f[R]\n.fi\n.PP\nYou may also specify the network share UNC path as the mountpoint\nitself.\nThen rclone will automatically assign a drive letter, same as with\n\\f[C]*\\f[R] and use that as mountpoint, and instead use the UNC path\nspecified as the volume name, as if it were specified with the\n\\f[C]--volname\\f[R] option.\nThis will also implicitly set the \\f[C]--network-mode\\f[R] option.\nThis means the following two examples have same result:\n.IP\n.nf\n\\f[C]\nrclone nfsmount remote:path/to/files \\[rs]\\[rs]cloud\\[rs]remote\nrclone nfsmount remote:path/to/files * --volname \\[rs]\\[rs]cloud\\[rs]remote\n\\f[R]\n.fi\n.PP\nThere is yet another way to enable network mode, and to set the share\npath, and that is to pass the \\[dq]native\\[dq] libfuse/WinFsp option\ndirectly: \\f[C]--fuse-flag --VolumePrefix=\\[rs]server\\[rs]share\\f[R].\nNote that the path must be with just a single backslash prefix in this\ncase.\n.PP\n\\f[I]Note:\\f[R] In previous versions of rclone this was the only\nsupported method.\n.PP\nRead more about drive\nmapping (https://en.wikipedia.org/wiki/Drive_mapping)\n.PP\nSee also Limitations section below.\n.SS Windows filesystem permissions\n.PP\nThe FUSE emulation layer on Windows must convert between the POSIX-based\npermission model used in FUSE, and the permission model used in Windows,\nbased on access-control lists (ACL).\n.PP\nThe mounted filesystem will normally get three entries in its\naccess-control list (ACL), representing permissions for the POSIX\npermission scopes: Owner, group and others.\nBy default, the owner and group will be taken from the current user, and\nthe built-in group \\[dq]Everyone\\[dq] will be used to represent others.\nThe user/group can be customized with FUSE options \\[dq]UserName\\[dq]\nand \\[dq]GroupName\\[dq], e.g.\n\\f[C]-o UserName=user123 -o GroupName=\\[dq]Authenticated Users\\[dq]\\f[R].\nThe permissions on each entry will be set according to options\n\\f[C]--dir-perms\\f[R] and \\f[C]--file-perms\\f[R], which takes a value in\ntraditional Unix numeric\nnotation (https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\n.PP\nThe default permissions corresponds to\n\\f[C]--file-perms 0666 --dir-perms 0777\\f[R], i.e.\nread and write permissions to everyone.\nThis means you will not be able to start any programs from the mount.\nTo be able to do that you must add execute permissions, e.g.\n\\f[C]--file-perms 0777 --dir-perms 0777\\f[R] to add it to everyone.\nIf the program needs to write files, chances are you will have to enable\nVFS File Caching as well (see also limitations).\nNote that the default write permission have some restrictions for\naccounts other than the owner, specifically it lacks the \\[dq]write\nextended attributes\\[dq], as explained next.\n.PP\nThe mapping of permissions is not always trivial, and the result you see\nin Windows Explorer may not be exactly like you expected.\nFor example, when setting a value that includes write access for the\ngroup or others scope, this will be mapped to individual permissions\n\\[dq]write attributes\\[dq], \\[dq]write data\\[dq] and \\[dq]append\ndata\\[dq], but not \\[dq]write extended attributes\\[dq].\nWindows will then show this as basic permission \\[dq]Special\\[dq]\ninstead of \\[dq]Write\\[dq], because \\[dq]Write\\[dq] also covers the\n\\[dq]write extended attributes\\[dq] permission.\nWhen setting digit 0 for group or others, to indicate no permissions,\nthey will still get individual permissions \\[dq]read attributes\\[dq],\n\\[dq]read extended attributes\\[dq] and \\[dq]read permissions\\[dq].\nThis is done for compatibility reasons, e.g.\nto allow users without additional permissions to be able to read basic\nmetadata about files like in Unix.\n.PP\nWinFsp 2021 (version 1.9) introduced a new FUSE option\n\\[dq]FileSecurity\\[dq], that allows the complete specification of file\nsecurity descriptors using\nSDDL (https://docs.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format).\nWith this you get detailed control of the resulting permissions,\ncompared to use of the POSIX permissions described above, and no\nadditional permissions will be added automatically for compatibility\nwith Unix.\nSome example use cases will following.\n.PP\nIf you set POSIX permissions for only allowing access to the owner,\nusing \\f[C]--file-perms 0600 --dir-perms 0700\\f[R], the user group and\nthe built-in \\[dq]Everyone\\[dq] group will still be given some special\npermissions, as described above.\nSome programs may then (incorrectly) interpret this as the file being\naccessible by everyone, for example an SSH client may warn about\n\\[dq]unprotected private key file\\[dq].\nYou can work around this by specifying\n\\f[C]-o FileSecurity=\\[dq]D:P(A;;FA;;;OW)\\[dq]\\f[R], which sets file all\naccess (FA) to the owner (OW), and nothing else.\n.PP\nWhen setting write permissions then, except for the owner, this does not\ninclude the \\[dq]write extended attributes\\[dq] permission, as mentioned\nabove.\nThis may prevent applications from writing to files, giving permission\ndenied error instead.\nTo set working write permissions for the built-in \\[dq]Everyone\\[dq]\ngroup, similar to what it gets by default but with the addition of the\n\\[dq]write extended attributes\\[dq], you can specify\n\\f[C]-o FileSecurity=\\[dq]D:P(A;;FRFW;;;WD)\\[dq]\\f[R], which sets file\nread (FR) and file write (FW) to everyone (WD).\nIf file execute (FX) is also needed, then change to\n\\f[C]-o FileSecurity=\\[dq]D:P(A;;FRFWFX;;;WD)\\[dq]\\f[R], or set file all\naccess (FA) to get full access permissions, including delete, with\n\\f[C]-o FileSecurity=\\[dq]D:P(A;;FA;;;WD)\\[dq]\\f[R].\n.SS Windows caveats\n.PP\nDrives created as Administrator are not visible to other accounts, not\neven an account that was elevated to Administrator with the User Account\nControl (UAC) feature.\nA result of this is that if you mount to a drive letter from a Command\nPrompt run as Administrator, and then try to access the same drive from\nWindows Explorer (which does not run as Administrator), you will not be\nable to see the mounted drive.\n.PP\nIf you don\\[aq]t need to access the drive from applications running with\nadministrative privileges, the easiest way around this is to always\ncreate the mount from a non-elevated command prompt.\n.PP\nTo make mapped drives available to the user account that created them\nregardless if elevated or not, there is a special Windows setting called\nlinked\nconnections (https://docs.microsoft.com/en-us/troubleshoot/windows-client/networking/mapped-drives-not-available-from-elevated-command#detail-to-configure-the-enablelinkedconnections-registry-entry)\nthat can be enabled.\n.PP\nIt is also possible to make a drive mount available to everyone on the\nsystem, by running the process creating it as the built-in SYSTEM\naccount.\nThere are several ways to do this: One is to use the command-line\nutility\nPsExec (https://docs.microsoft.com/en-us/sysinternals/downloads/psexec),\nfrom Microsoft\\[aq]s Sysinternals suite, which has option \\f[C]-s\\f[R]\nto start processes as the SYSTEM account.\nAnother alternative is to run the mount command from a Windows Scheduled\nTask, or a Windows Service, configured to run as the SYSTEM account.\nA third alternative is to use the WinFsp.Launcher\ninfrastructure (https://github.com/winfsp/winfsp/wiki/WinFsp-Service-Architecture)).\nRead more in the install documentation (https://rclone.org/install/).\nNote that when running rclone as another user, it will not use the\nconfiguration file from your profile unless you tell it to with the\n\\f[C]--config\\f[R] (https://rclone.org/docs/#config-config-file) option.\nNote also that it is now the SYSTEM account that will have the owner\npermissions, and other accounts will have permissions according to the\ngroup or others scopes.\nAs mentioned above, these will then not get the \\[dq]write extended\nattributes\\[dq] permission, and this may prevent writing to files.\nYou can work around this with the FileSecurity option, see example\nabove.\n.PP\nNote that mapping to a directory path, instead of a drive letter, does\nnot suffer from the same limitations.\n.SS Mounting on macOS\n.PP\nMounting on macOS can be done either via built-in NFS\nserver (https://rclone.org/commands/rclone_serve_nfs/),\nmacFUSE (https://osxfuse.github.io/) (also known as osxfuse) or\nFUSE-T (https://www.fuse-t.org/).\nmacFUSE is a traditional FUSE driver utilizing a macOS kernel extension\n(kext).\nFUSE-T is an alternative FUSE system which \\[dq]mounts\\[dq] via an NFSv4\nlocal server.\n.SS Unicode Normalization\n.PP\nIt is highly recommended to keep the default of\n\\f[C]--no-unicode-normalization=false\\f[R] for all \\f[C]mount\\f[R] and\n\\f[C]serve\\f[R] commands on macOS.\nFor details, see\nvfs-case-sensitivity (https://rclone.org/commands/rclone_mount/#vfs-case-sensitivity).\n.SS NFS mount\n.PP\nThis method spins up an NFS server using serve\nnfs (https://rclone.org/commands/rclone_serve_nfs/) command and mounts\nit to the specified mountpoint.\nIf you run this in background mode using |--daemon|, you will need to\nsend SIGTERM signal to the rclone process using |kill| command to stop\nthe mount.\n.PP\nNote that \\f[C]--nfs-cache-handle-limit\\f[R] controls the maximum number\nof cached file handles stored by the \\f[C]nfsmount\\f[R] caching handler.\nThis should not be set too low or you may experience errors when trying\nto access files.\nThe default is 1000000, but consider lowering this limit if the\nserver\\[aq]s system resource usage causes problems.\n.SS macFUSE Notes\n.PP\nIf installing macFUSE using dmg\npackages (https://github.com/osxfuse/osxfuse/releases) from the website,\nrclone will locate the macFUSE libraries without any further\nintervention.\nIf however, macFUSE is installed using the\nmacports (https://www.macports.org/) package manager, the following\naddition steps are required.\n.IP\n.nf\n\\f[C]\nsudo mkdir /usr/local/lib\ncd /usr/local/lib\nsudo ln -s /opt/local/lib/libfuse.2.dylib\n\\f[R]\n.fi\n.SS FUSE-T Limitations, Caveats, and Notes\n.PP\nThere are some limitations, caveats, and notes about how it works.\nThese are current as of FUSE-T version 1.0.14.\n.SS ModTime update on read\n.PP\nAs per the FUSE-T\nwiki (https://github.com/macos-fuse-t/fuse-t/wiki#caveats):\n.RS\n.PP\nFile access and modification times cannot be set separately as it seems\nto be an issue with the NFS client which always modifies both.\nCan be reproduced with \\[aq]touch -m\\[aq] and \\[aq]touch -a\\[aq]\ncommands\n.RE\n.PP\nThis means that viewing files with various tools, notably macOS Finder,\nwill cause rlcone to update the modification time of the file.\nThis may make rclone upload a full new copy of the file.\n.SS Read Only mounts\n.PP\nWhen mounting with \\f[C]--read-only\\f[R], attempts to write to files\nwill fail \\f[I]silently\\f[R] as opposed to with a clear warning as in\nmacFUSE.\n.SS Limitations\n.PP\nWithout the use of \\f[C]--vfs-cache-mode\\f[R] this can only write files\nsequentially, it can only seek when reading.\nThis means that many applications won\\[aq]t work with their files on an\nrclone mount without \\f[C]--vfs-cache-mode writes\\f[R] or\n\\f[C]--vfs-cache-mode full\\f[R].\nSee the VFS File Caching section for more info.\nWhen using NFS mount on macOS, if you don\\[aq]t specify\n|--vfs-cache-mode| the mount point will be read-only.\n.PP\nThe bucket-based remotes (e.g.\nSwift, S3, Google Compute Storage, B2) do not support the concept of\nempty directories, so empty directories will have a tendency to\ndisappear once they fall out of the directory cache.\n.PP\nWhen \\f[C]rclone mount\\f[R] is invoked on Unix with \\f[C]--daemon\\f[R]\nflag, the main rclone program will wait for the background mount to\nbecome ready or until the timeout specified by the\n\\f[C]--daemon-wait\\f[R] flag.\nOn Linux it can check mount status using ProcFS so the flag in fact sets\n\\f[B]maximum\\f[R] time to wait, while the real wait can be less.\nOn macOS / BSD the time to wait is constant and the check is performed\nonly at the end.\nWe advise you to set wait time on macOS reasonably.\n.PP\nOnly supported on Linux, FreeBSD, OS X and Windows at the moment.\n.SS rclone nfsmount vs rclone sync/copy\n.PP\nFile systems expect things to be 100% reliable, whereas cloud storage\nsystems are a long way from 100% reliable.\nThe rclone sync/copy commands cope with this with lots of retries.\nHowever rclone nfsmount can\\[aq]t use retries in the same way without\nmaking local copies of the uploads.\nLook at the VFS File Caching for solutions to make nfsmount more\nreliable.\n.SS Attribute caching\n.PP\nYou can use the flag \\f[C]--attr-timeout\\f[R] to set the time the kernel\ncaches the attributes (size, modification time, etc.) for directory\nentries.\n.PP\nThe default is \\f[C]1s\\f[R] which caches files just long enough to avoid\ntoo many callbacks to rclone from the kernel.\n.PP\nIn theory 0s should be the correct value for filesystems which can\nchange outside the control of the kernel.\nHowever this causes quite a few problems such as rclone using too much\nmemory (https://github.com/rclone/rclone/issues/2157), rclone not\nserving files to\nsamba (https://forum.rclone.org/t/rclone-1-39-vs-1-40-mount-issue/5112)\nand excessive time listing\ndirectories (https://github.com/rclone/rclone/issues/2095#issuecomment-371141147).\n.PP\nThe kernel can cache the info about a file for the time given by\n\\f[C]--attr-timeout\\f[R].\nYou may see corruption if the remote file changes length during this\nwindow.\nIt will show up as either a truncated file or a file with garbage on the\nend.\nWith \\f[C]--attr-timeout 1s\\f[R] this is very unlikely but not\nimpossible.\nThe higher you set \\f[C]--attr-timeout\\f[R] the more likely it is.\nThe default setting of \\[dq]1s\\[dq] is the lowest setting which\nmitigates the problems above.\n.PP\nIf you set it higher (\\f[C]10s\\f[R] or \\f[C]1m\\f[R] say) then the kernel\nwill call back to rclone less often making it more efficient, however\nthere is more chance of the corruption issue above.\n.PP\nIf files don\\[aq]t change on the remote outside of the control of rclone\nthen there is no chance of corruption.\n.PP\nThis is the same as setting the attr_timeout option in mount.fuse.\n.SS Filters\n.PP\nNote that all the rclone filters can be used to select a subset of the\nfiles to be visible in the mount.\n.SS systemd\n.PP\nWhen running rclone nfsmount as a systemd service, it is possible to use\nType=notify.\nIn this case the service will enter the started state after the\nmountpoint has been successfully set up.\nUnits having the rclone nfsmount service specified as a requirement will\nsee all files and folders immediately in this mode.\n.PP\nNote that systemd runs mount units without any environment variables\nincluding \\f[C]PATH\\f[R] or \\f[C]HOME\\f[R].\nThis means that tilde (\\f[C]\\[ti]\\f[R]) expansion will not work and you\nshould provide \\f[C]--config\\f[R] and \\f[C]--cache-dir\\f[R] explicitly\nas absolute paths via rclone arguments.\nSince mounting requires the \\f[C]fusermount\\f[R] program, rclone will\nuse the fallback PATH of \\f[C]/bin:/usr/bin\\f[R] in this scenario.\nPlease ensure that \\f[C]fusermount\\f[R] is present on this PATH.\n.SS Rclone as Unix mount helper\n.PP\nThe core Unix program \\f[C]/bin/mount\\f[R] normally takes the\n\\f[C]-t FSTYPE\\f[R] argument then runs the \\f[C]/sbin/mount.FSTYPE\\f[R]\nhelper program passing it mount options as \\f[C]-o key=val,...\\f[R] or\n\\f[C]--opt=...\\f[R].\nAutomount (classic or systemd) behaves in a similar way.\n.PP\nrclone by default expects GNU-style flags \\f[C]--key val\\f[R].\nTo run it as a mount helper you should symlink rclone binary to\n\\f[C]/sbin/mount.rclone\\f[R] and optionally \\f[C]/usr/bin/rclonefs\\f[R],\ne.g.\n\\f[C]ln -s /usr/bin/rclone /sbin/mount.rclone\\f[R].\nrclone will detect it and translate command-line arguments\nappropriately.\n.PP\nNow you can run classic mounts like this:\n.IP\n.nf\n\\f[C]\nmount sftp1:subdir /mnt/data -t rclone -o vfs_cache_mode=writes,sftp_key_file=/path/to/pem\n\\f[R]\n.fi\n.PP\nor create systemd mount units:\n.IP\n.nf\n\\f[C]\n# /etc/systemd/system/mnt-data.mount\n[Unit]\nDescription=Mount for /mnt/data\n[Mount]\nType=rclone\nWhat=sftp1:subdir\nWhere=/mnt/data\nOptions=rw,_netdev,allow_other,args2env,vfs-cache-mode=writes,config=/etc/rclone.conf,cache-dir=/var/rclone\n\\f[R]\n.fi\n.PP\noptionally accompanied by systemd automount unit\n.IP\n.nf\n\\f[C]\n# /etc/systemd/system/mnt-data.automount\n[Unit]\nDescription=AutoMount for /mnt/data\n[Automount]\nWhere=/mnt/data\nTimeoutIdleSec=600\n[Install]\nWantedBy=multi-user.target\n\\f[R]\n.fi\n.PP\nor add in \\f[C]/etc/fstab\\f[R] a line like\n.IP\n.nf\n\\f[C]\nsftp1:subdir /mnt/data rclone rw,noauto,nofail,_netdev,x-systemd.automount,args2env,vfs_cache_mode=writes,config=/etc/rclone.conf,cache_dir=/var/cache/rclone 0 0\n\\f[R]\n.fi\n.PP\nor use classic Automountd.\nRemember to provide explicit \\f[C]config=...,cache-dir=...\\f[R] as a\nworkaround for mount units being run without \\f[C]HOME\\f[R].\n.PP\nRclone in the mount helper mode will split \\f[C]-o\\f[R] argument(s) by\ncomma, replace \\f[C]_\\f[R] by \\f[C]-\\f[R] and prepend \\f[C]--\\f[R] to\nget the command-line flags.\nOptions containing commas or spaces can be wrapped in single or double\nquotes.\nAny inner quotes inside outer quotes of the same type should be doubled.\n.PP\nMount option syntax includes a few extra options treated specially:\n.IP \\[bu] 2\n\\f[C]env.NAME=VALUE\\f[R] will set an environment variable for the mount\nprocess.\nThis helps with Automountd and Systemd.mount which don\\[aq]t allow\nsetting custom environment for mount helpers.\nTypically you will use \\f[C]env.HTTPS_PROXY=proxy.host:3128\\f[R] or\n\\f[C]env.HOME=/root\\f[R]\n.IP \\[bu] 2\n\\f[C]command=cmount\\f[R] can be used to run \\f[C]cmount\\f[R] or any\nother rclone command rather than the default \\f[C]mount\\f[R].\n.IP \\[bu] 2\n\\f[C]args2env\\f[R] will pass mount options to the mount helper running\nin background via environment variables instead of command line\narguments.\nThis allows to hide secrets from such commands as \\f[C]ps\\f[R] or\n\\f[C]pgrep\\f[R].\n.IP \\[bu] 2\n\\f[C]vv...\\f[R] will be transformed into appropriate\n\\f[C]--verbose=N\\f[R]\n.IP \\[bu] 2\nstandard mount options like \\f[C]x-systemd.automount\\f[R],\n\\f[C]_netdev\\f[R], \\f[C]nosuid\\f[R] and alike are intended only for\nAutomountd and ignored by rclone.\n.SS VFS - Virtual File System\n.PP\nThis command uses the VFS layer.\nThis adapts the cloud storage objects that rclone uses into something\nwhich looks much more like a disk filing system.\n.PP\nCloud storage objects have lots of properties which aren\\[aq]t like disk\nfiles - you can\\[aq]t extend them or write to the middle of them, so the\nVFS layer has to deal with that.\nBecause there is no one right way of doing this there are various\noptions explained below.\n.PP\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n.SS VFS Directory Cache\n.PP\nUsing the \\f[C]--dir-cache-time\\f[R] flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n.IP\n.nf\n\\f[C]\n--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\\f[R]\n.fi\n.PP\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges.\nIf the backend supports polling, changes will be picked up within the\npolling interval.\n.PP\nYou can send a \\f[C]SIGHUP\\f[R] signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.\nAssuming only one rclone instance is running, you can reset the cache\nlike this:\n.IP\n.nf\n\\f[C]\nkill -SIGHUP $(pidof rclone)\n\\f[R]\n.fi\n.PP\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget\n\\f[R]\n.fi\n.PP\nOr individual files or directories:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget file=path/to/file dir=path/to/dir\n\\f[R]\n.fi\n.SS VFS File Buffering\n.PP\nThe \\f[C]--buffer-size\\f[R] flag determines the amount of memory, that\nwill be used to buffer data in advance.\n.PP\nEach open file will try to keep the specified amount of data in memory\nat all times.\nThe buffered data is bound to one open file and won\\[aq]t be shared.\n.PP\nThis flag is a upper limit for the used memory per open file.\nThe buffer will only use memory for data that is downloaded but not not\nyet read.\nIf the buffer is empty, only a small amount of memory will be used.\n.PP\nThe maximum memory used by rclone for buffering can be up to\n\\f[C]--buffer-size * open files\\f[R].\n.SS VFS File Caching\n.PP\nThese flags control the VFS file caching options.\nFile caching is necessary to make the VFS layer appear compatible with a\nnormal file system.\nIt can be disabled at the cost of some compatibility.\n.PP\nFor example you\\[aq]ll need to enable VFS caching if you want to read\nand write simultaneously to a file.\nSee below for more details.\n.PP\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n.IP\n.nf\n\\f[C]\n--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\\f[R]\n.fi\n.PP\nIf run with \\f[C]-vv\\f[R] rclone will print the location of the file\ncache.\nThe files are stored in the user cache file area which is OS dependent\nbut can be controlled with \\f[C]--cache-dir\\f[R] or setting the\nappropriate environment variable.\n.PP\nThe cache has 4 different modes selected by \\f[C]--vfs-cache-mode\\f[R].\nThe higher the cache mode the more compatible rclone becomes at the cost\nof using disk space.\n.PP\nNote that files are written back to the remote only when they are closed\nand if they haven\\[aq]t been accessed for \\f[C]--vfs-write-back\\f[R]\nseconds.\nIf rclone is quit or dies with files that haven\\[aq]t been uploaded,\nthese will be uploaded next time rclone is run with the same flags.\n.PP\nIf using \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] note that the cache may exceed these\nquotas for two reasons.\nFirstly because it is only checked every\n\\f[C]--vfs-cache-poll-interval\\f[R].\nSecondly because open files cannot be evicted from the cache.\nWhen \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] is exceeded, rclone will attempt to\nevict the least accessed files from the cache first.\nrclone will start with files that haven\\[aq]t been accessed for the\nlongest.\nThis cache flushing strategy is efficient and more relevant files are\nlikely to remain cached.\n.PP\nThe \\f[C]--vfs-cache-max-age\\f[R] will evict files from the cache after\nthe set time since last access has passed.\nThe default value of 1 hour will start evicting files from cache that\nhaven\\[aq]t been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting.\nSpecify the time with standard notation, s, m, h, d, w .\n.PP\nYou \\f[B]should not\\f[R] run two copies of rclone using the same VFS\ncache with the same or overlapping remotes if using\n\\f[C]--vfs-cache-mode > off\\f[R].\nThis can potentially cause data corruption if you do.\nYou can work around this by giving each rclone its own cache hierarchy\nwith \\f[C]--cache-dir\\f[R].\nYou don\\[aq]t need to worry about this if the remotes in use don\\[aq]t\noverlap.\n.SS --vfs-cache-mode off\n.PP\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n.PP\nThis will mean some operations are not possible\n.IP \\[bu] 2\nFiles can\\[aq]t be opened for both read AND write\n.IP \\[bu] 2\nFiles opened for write can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles open for read with O_TRUNC will be opened write only\n.IP \\[bu] 2\nFiles open for write only will behave as if O_TRUNC was supplied\n.IP \\[bu] 2\nOpen modes O_APPEND, O_TRUNC are ignored\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode minimal\n.PP\nThis is very similar to \\[dq]off\\[dq] except that files opened for read\nAND write will be buffered to disk.\nThis means that files opened for write will be a lot more compatible,\nbut uses the minimal disk space.\n.PP\nThese operations are not possible\n.IP \\[bu] 2\nFiles opened for write only can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles opened for write only will ignore O_APPEND, O_TRUNC\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode writes\n.PP\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n.PP\nThis mode should support all normal file system operations.\n.PP\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n.SS --vfs-cache-mode full\n.PP\nIn this mode all reads and writes are buffered to and from disk.\nWhen data is read from the remote this is buffered to disk as well.\n.PP\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n.PP\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file.\nThese files will appear to be their full size in the cache, but they\nwill be sparse files with only the data that has been downloaded present\nin them.\n.PP\nThis mode should support all normal file system operations and is\notherwise identical to \\f[C]--vfs-cache-mode\\f[R] writes.\n.PP\nWhen reading a file rclone will read \\f[C]--buffer-size\\f[R] plus\n\\f[C]--vfs-read-ahead\\f[R] bytes ahead.\nThe \\f[C]--buffer-size\\f[R] is buffered in memory whereas the\n\\f[C]--vfs-read-ahead\\f[R] is buffered on disk.\n.PP\nWhen using this mode it is recommended that \\f[C]--buffer-size\\f[R] is\nnot set too large and \\f[C]--vfs-read-ahead\\f[R] is set large if\nrequired.\n.PP\n\\f[B]IMPORTANT\\f[R] not all file systems support sparse files.\nIn particular FAT/exFAT do not.\nRclone will perform very badly if the cache directory is on a filesystem\nwhich doesn\\[aq]t support sparse files and it will log an ERROR message\nif one is detected.\n.SS Fingerprinting\n.PP\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file.\nFingerprints are made from:\n.IP \\[bu] 2\nsize\n.IP \\[bu] 2\nmodification time\n.IP \\[bu] 2\nhash\n.PP\nwhere available on an object.\n.PP\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n.PP\nFor example \\f[C]hash\\f[R] is slow with the \\f[C]local\\f[R] and\n\\f[C]sftp\\f[R] backends as they have to read the entire file and hash\nit, and \\f[C]modtime\\f[R] is slow with the \\f[C]s3\\f[R],\n\\f[C]swift\\f[R], \\f[C]ftp\\f[R] and \\f[C]qinqstor\\f[R] backends because\nthey need to do an extra API call to fetch it.\n.PP\nIf you use the \\f[C]--vfs-fast-fingerprint\\f[R] flag then rclone will\nnot include the slow operations in the fingerprint.\nThis makes the fingerprinting less accurate but much faster and will\nimprove the opening time of cached files.\n.PP\nIf you are running a vfs cache over \\f[C]local\\f[R], \\f[C]s3\\f[R] or\n\\f[C]swift\\f[R] backends then using this flag is recommended.\n.PP\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n.SS VFS Chunked Reading\n.PP\nWhen rclone reads files from a remote it reads them in chunks.\nThis means that rather than requesting the whole file rclone reads the\nchunk specified.\nThis can reduce the used download quota for some remotes by requesting\nonly chunks from the remote that are actually read, at the cost of an\nincreased number of requests.\n.PP\nThese flags control the chunking:\n.IP\n.nf\n\\f[C]\n--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once\n\\f[R]\n.fi\n.PP\nThe chunking behaves differently depending on the\n\\f[C]--vfs-read-chunk-streams\\f[R] parameter.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] == 0\n.PP\nRclone will start reading a chunk of size\n\\f[C]--vfs-read-chunk-size\\f[R], and then double the size for each read.\nWhen \\f[C]--vfs-read-chunk-size-limit\\f[R] is specified, and greater\nthan \\f[C]--vfs-read-chunk-size\\f[R], the chunk size for each open file\nwill get doubled only until the specified value is reached.\nIf the value is \\[dq]off\\[dq], which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n.PP\nWith \\f[C]--vfs-read-chunk-size 100M\\f[R] and\n\\f[C]--vfs-read-chunk-size-limit 0\\f[R] the following parts will be\ndownloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen \\f[C]--vfs-read-chunk-size-limit 500M\\f[R] is specified, the result\nwould be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so\non.\n.PP\nSetting \\f[C]--vfs-read-chunk-size\\f[R] to \\f[C]0\\f[R] or \\[dq]off\\[dq]\ndisables chunked reading.\n.PP\nThe chunks will not be buffered in memory.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] > 0\n.PP\nRclone reads \\f[C]--vfs-read-chunk-streams\\f[R] chunks of size\n\\f[C]--vfs-read-chunk-size\\f[R] concurrently.\nThe size for each read will stay constant.\n.PP\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n.PP\nSome experimentation will be needed to find the optimum values of\n\\f[C]--vfs-read-chunk-size\\f[R] and \\f[C]--vfs-read-chunk-streams\\f[R]\nas these will depend on the backend in use and the latency to the\nbackend.\n.PP\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be \\f[C]--vfs-read-chunk-streams 16\\f[R] and\n\\f[C]--vfs-read-chunk-size 4M\\f[R].\nIn testing with AWS S3 the performance scaled roughly as the\n\\f[C]--vfs-read-chunk-streams\\f[R] setting.\n.PP\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more \\f[C]--vfs-read-chunk-streams\\f[R] in\norder to get the throughput.\n.SS VFS Performance\n.PP\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons.\nSee also the chunked reading feature.\n.PP\nIn particular S3 and Swift benefit hugely from the\n\\f[C]--no-modtime\\f[R] flag (or use \\f[C]--use-server-modtime\\f[R] for a\nslightly different effect) as each read of the modification time takes a\ntransaction.\n.IP\n.nf\n\\f[C]\n--no-checksum     Don\\[aq]t compare checksums on up/download.\n--no-modtime      Don\\[aq]t read/write the modification time (can speed things up).\n--no-seek         Don\\[aq]t allow seeking in files.\n--read-only       Only allow read-only access.\n\\f[R]\n.fi\n.PP\nSometimes rclone is delivered reads or writes out of order.\nRather than seeking rclone will wait a short time for the in sequence\nread or write to come in.\nThese flags only come into effect when not using an on disk cache file.\n.IP\n.nf\n\\f[C]\n--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\\f[R]\n.fi\n.PP\nWhen using VFS write caching (\\f[C]--vfs-cache-mode\\f[R] with value\nwrites or full), the global flag \\f[C]--transfers\\f[R] can be set to\nadjust the number of parallel uploads of modified files from the cache\n(the related global flag \\f[C]--checkers\\f[R] has no effect on the VFS).\n.IP\n.nf\n\\f[C]\n--transfers int  Number of file transfers to run in parallel (default 4)\n\\f[R]\n.fi\n.SS VFS Case Sensitivity\n.PP\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n.PP\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery.\nIt is not allowed for two files in the same directory to differ only by\ncase.\n.PP\nUsually file systems on macOS are case-insensitive.\nIt is possible to make macOS file systems case-sensitive but that is not\nthe default.\n.PP\nThe \\f[C]--vfs-case-insensitive\\f[R] VFS flag controls how rclone\nhandles these two cases.\nIf its value is \\[dq]false\\[dq], rclone passes file names to the remote\nas-is.\nIf the flag is \\[dq]true\\[dq] (or appears without a value on the command\nline), rclone may perform a \\[dq]fixup\\[dq] as explained below.\n.PP\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote.\nIf an argument refers to an existing file with exactly the same name,\nthen the case of the existing file on the disk will be used.\nHowever, if a file name with exactly the same name is not found but a\nname differing only by case exists, rclone will transparently fixup the\nname.\nThis fixup happens only when an existing file is requested.\nCase sensitivity of file names created anew by rclone is controlled by\nthe underlying remote.\n.PP\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source).\nThe flag controls whether \\[dq]fixup\\[dq] is performed to satisfy the\ntarget.\n.PP\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \\[dq]true\\[dq] on\nWindows and macOS, \\[dq]false\\[dq] otherwise.\nIf the flag is provided without a value, then it is \\[dq]true\\[dq].\n.PP\nThe \\f[C]--no-unicode-normalization\\f[R] flag controls whether a similar\n\\[dq]fixup\\[dq] is performed for filenames that differ but are\ncanonically\nequivalent (https://en.wikipedia.org/wiki/Unicode_equivalence) with\nrespect to unicode.\nUnicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms.\nIt is therefore highly recommended to keep the default of\n\\f[C]false\\f[R] on macOS, to avoid encoding compatibility issues.\n.PP\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n\\f[C]--vfs-block-norm-dupes\\f[R] flag allows hiding these duplicates.\nThis comes with a performance tradeoff, as rclone will have to scan the\nentire directory for duplicates when listing a directory.\nFor this reason, it is recommended to leave this disabled if not needed.\nHowever, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same\nfilename, an odd situation will occur: both versions of the file will be\nvisible in the mount, and both will appear to be editable, however,\nediting either version will actually result in only the NFD version\ngetting edited under the hood.\n\\f[C]--vfs-block- norm-dupes\\f[R] prevents this confusion by detecting\nthis scenario, hiding the duplicates, and logging an error, similar to\nhow this is handled in \\f[C]rclone sync\\f[R].\n.SS VFS Disk Options\n.PP\nThis flag allows you to manually set the statistics about the filing\nsystem.\nIt can be useful when those statistics cannot be read correctly\nautomatically.\n.IP\n.nf\n\\f[C]\n--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\\f[R]\n.fi\n.SS Alternate report of used bytes\n.PP\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running \\f[C]df\\f[R]\non the filesystem, then pass the flag \\f[C]--vfs-used-is-size\\f[R] to\nrclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to\n\\f[C]rclone size\\f[R] and compute the total used space itself.\n.PP\n\\f[I]WARNING.\\f[R] Contrary to \\f[C]rclone size\\f[R], this flag ignores\nfilters so that the result is accurate.\nHowever, this is very inefficient and may cost lots of API calls\nresulting in extra charges.\nUse it as a last resort and only with caching.\n.IP\n.nf\n\\f[C]\nrclone nfsmount remote:path /path/to/mountpoint [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --addr string                            IPaddress:Port or :Port to bind server to\n      --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n      --allow-other                            Allow access to other users (not supported on Windows)\n      --allow-root                             Allow access to root user (not supported on Windows)\n      --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n      --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n      --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n      --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n      --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n      --debug-fuse                             Debug the FUSE internals - needs -v\n      --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n      --devname string                         Set the device name - default is remote:path\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --direct-io                              Use Direct IO, disables caching of data\n      --file-perms FileMode                    File permissions (default 666)\n      --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for nfsmount\n      --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n      --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n      --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n      --nfs-cache-dir string                   The directory the NFS handle cache will use if set\n      --nfs-cache-handle-limit int             max file handles cached simultaneously (min 5) (default 1000000)\n      --nfs-cache-type memory|disk|symlink     Type of NFS handle cache to use (default memory)\n      --no-checksum                            Don\\[aq]t compare checksums on up/download\n      --no-modtime                             Don\\[aq]t read/write the modification time (can speed things up)\n      --no-seek                                Don\\[aq]t allow seeking in files\n      --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n      --noapplexattr                           Ignore all \\[dq]com.apple.*\\[dq] extended attributes (supported on OSX only)\n  -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --sudo                                   Use sudo to run the mount/umount commands as root.\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (\\[aq]off\\[aq] is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n      --volname string                         Set the volume name (supported on Windows and OSX only)\n      --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone obscure\n.PP\nObscure password for use in the rclone config file.\n.SS Synopsis\n.PP\nIn the rclone config file, human-readable passwords are obscured.\nObscuring them is done by encrypting them and writing them out in\nbase64.\nThis is \\f[B]not\\f[R] a secure way of encrypting these passwords as\nrclone can decrypt them - it is to prevent \\[dq]eyedropping\\[dq] -\nnamely someone seeing a password in the rclone config file by accident.\n.PP\nMany equally important things (like access tokens) are not obscured in\nthe config file.\nHowever it is very hard to shoulder surf a 64 character hex token.\n.PP\nThis command can also accept a password through STDIN instead of an\nargument by passing a hyphen as an argument.\nThis will use the first line of STDIN as the password not including the\ntrailing newline.\n.IP\n.nf\n\\f[C]\necho \\[dq]secretpassword\\[dq] | rclone obscure -\n\\f[R]\n.fi\n.PP\nIf there is no data on STDIN to read, rclone obscure will default to\nobfuscating the hyphen itself.\n.PP\nIf you want to encrypt the config file then please use config file\nencryption - see rclone\nconfig (https://rclone.org/commands/rclone_config/) for more info.\n.IP\n.nf\n\\f[C]\nrclone obscure password [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for obscure\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone rc\n.PP\nRun a command against a running rclone.\n.SS Synopsis\n.PP\nThis runs a command against a running rclone.\nUse the \\f[C]--url\\f[R] flag to specify an non default URL to connect\non.\nThis can be either a \\[dq]:port\\[dq] which is taken to mean\n\\[dq]http://localhost:port\\[dq] or a \\[dq]host:port\\[dq] which is taken\nto mean \\[dq]http://host:port\\[dq]\n.PP\nA username and password can be passed in with \\f[C]--user\\f[R] and\n\\f[C]--pass\\f[R].\n.PP\nNote that \\f[C]--rc-addr\\f[R], \\f[C]--rc-user\\f[R], \\f[C]--rc-pass\\f[R]\nwill be read also for \\f[C]--url\\f[R], \\f[C]--user\\f[R],\n\\f[C]--pass\\f[R].\n.PP\nThe \\f[C]--unix-socket\\f[R] flag can be used to connect over a unix\nsocket like this\n.IP\n.nf\n\\f[C]\n# start server on /tmp/my.socket\nrclone rcd --rc-addr unix:///tmp/my.socket\n# Connect to it\nrclone rc --unix-socket /tmp/my.socket core/stats\n\\f[R]\n.fi\n.PP\nArguments should be passed in as parameter=value.\n.PP\nThe result will be returned as a JSON object by default.\n.PP\nThe \\f[C]--json\\f[R] parameter can be used to pass in a JSON blob as an\ninput instead of key=value arguments.\nThis is the only way of passing in more complicated values.\n.PP\nThe \\f[C]-o\\f[R]/\\f[C]--opt\\f[R] option can be used to set a key\n\\[dq]opt\\[dq] with key, value options in the form \\f[C]-o key=value\\f[R]\nor \\f[C]-o key\\f[R].\nIt can be repeated as many times as required.\nThis is useful for rc commands which take the \\[dq]opt\\[dq] parameter\nwhich by convention is a dictionary of strings.\n.IP\n.nf\n\\f[C]\n-o key=value -o key2\n\\f[R]\n.fi\n.PP\nWill place this in the \\[dq]opt\\[dq] value\n.IP\n.nf\n\\f[C]\n{\\[dq]key\\[dq]:\\[dq]value\\[dq], \\[dq]key2\\[dq],\\[dq]\\[dq])\n\\f[R]\n.fi\n.PP\nThe \\f[C]-a\\f[R]/\\f[C]--arg\\f[R] option can be used to set strings in\nthe \\[dq]arg\\[dq] value.\nIt can be repeated as many times as required.\nThis is useful for rc commands which take the \\[dq]arg\\[dq] parameter\nwhich by convention is a list of strings.\n.IP\n.nf\n\\f[C]\n-a value -a value2\n\\f[R]\n.fi\n.PP\nWill place this in the \\[dq]arg\\[dq] value\n.IP\n.nf\n\\f[C]\n[\\[dq]value\\[dq], \\[dq]value2\\[dq]]\n\\f[R]\n.fi\n.PP\nUse \\f[C]--loopback\\f[R] to connect to the rclone instance running\n\\f[C]rclone rc\\f[R].\nThis is very useful for testing commands without having to run an rclone\nrc server, e.g.:\n.IP\n.nf\n\\f[C]\nrclone rc --loopback operations/about fs=/\n\\f[R]\n.fi\n.PP\nUse \\f[C]rclone rc\\f[R] to see a list of all possible commands.\n.IP\n.nf\n\\f[C]\nrclone rc commands parameter [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -a, --arg stringArray      Argument placed in the \\[dq]arg\\[dq] array\n  -h, --help                 help for rc\n      --json string          Input JSON - use instead of key=value args\n      --loopback             If set connect to this rclone instance not via HTTP\n      --no-output            If set, don\\[aq]t output the JSON result\n  -o, --opt stringArray      Option in the form name=value or name placed in the \\[dq]opt\\[dq] array\n      --pass string          Password to use to connect to rclone remote control\n      --unix-socket string   Path to a unix domain socket to dial to, instead of opening a TCP connection directly\n      --url string           URL to connect to rclone remote control (default \\[dq]http://localhost:5572/\\[dq])\n      --user string          Username to use to rclone remote control\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone rcat\n.PP\nCopies standard input to file on remote.\n.SS Synopsis\n.PP\nReads from standard input (stdin) and copies it to a single remote file.\n.IP\n.nf\n\\f[C]\necho \\[dq]hello world\\[dq] | rclone rcat remote:path/to/file\nffmpeg - | rclone rcat remote:path/to/file\n\\f[R]\n.fi\n.PP\nIf the remote file already exists, it will be overwritten.\n.PP\nrcat will try to upload small files in a single request, which is\nusually more efficient than the streaming/chunked upload endpoints,\nwhich use multiple requests.\nExact behaviour depends on the remote.\nWhat is considered a small file may be set through\n\\f[C]--streaming-upload-cutoff\\f[R].\nUploading only starts after the cutoff is reached or if the file ends\nbefore that.\nThe data must fit into RAM.\nThe cutoff needs to be small enough to adhere the limits of your remote,\nplease see there.\nGenerally speaking, setting this cutoff too high will decrease your\nperformance.\n.PP\nUse the \\f[C]--size\\f[R] flag to preallocate the file in advance at the\nremote end and actually stream it, even if remote backend doesn\\[aq]t\nsupport streaming.\n.PP\n\\f[C]--size\\f[R] should be the exact size of the input stream in bytes.\nIf the size of the stream is different in length to the \\f[C]--size\\f[R]\npassed in then the transfer will likely fail.\n.PP\nNote that the upload cannot be retried because the data is not stored.\nIf the backend supports multipart uploading then individual chunks can\nbe retried.\nIf you need to transfer a lot of data, you may be better off caching it\nlocally and then \\f[C]rclone move\\f[R] it to the destination which can\nuse retries.\n.IP\n.nf\n\\f[C]\nrclone rcat remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help       help for rcat\n      --size int   File size hint to preallocate (default -1)\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone rcd\n.PP\nRun rclone listening to remote control commands only.\n.SS Synopsis\n.PP\nThis runs rclone so that it only listens to remote control commands.\n.PP\nThis is useful if you are controlling rclone via the rc API.\n.PP\nIf you pass in a path to a directory, rclone will serve that directory\nfor GET requests on the URL passed in.\nIt will also open the URL in the browser when rclone is run.\n.PP\nSee the rc documentation (https://rclone.org/rc/) for more info on the\nrc flags.\n.SS Server options\n.PP\nUse \\f[C]--rc-addr\\f[R] to specify which IP address and port the server\nshould listen on, eg \\f[C]--rc-addr 1.2.3.4:8000\\f[R] or\n\\f[C]--rc-addr :8080\\f[R] to listen to all IPs.\nBy default it only listens on localhost.\nYou can use port :0 to let the OS choose an available port.\n.PP\nIf you set \\f[C]--rc-addr\\f[R] to listen on a public or LAN accessible\nIP address then using Authentication is advised - see the next section\nfor info.\n.PP\nYou can use a unix socket by setting the url to\n\\f[C]unix:///path/to/socket\\f[R] or just by using an absolute path name.\nNote that unix sockets bypass the authentication - this is expected to\nbe done with file system permissions.\n.PP\n\\f[C]--rc-addr\\f[R] may be repeated to listen on multiple\nIPs/ports/sockets.\nSocket activation, described further below, can also be used to\naccomplish the same.\n.PP\n\\f[C]--rc-server-read-timeout\\f[R] and\n\\f[C]--rc-server-write-timeout\\f[R] can be used to control the timeouts\non the server.\nNote that this is the total time for a transfer.\n.PP\n\\f[C]--rc-max-header-bytes\\f[R] controls the maximum number of bytes the\nserver will accept in the HTTP header.\n.PP\n\\f[C]--rc-baseurl\\f[R] controls the URL prefix that rclone serves from.\nBy default rclone will serve from the root.\nIf you used \\f[C]--rc-baseurl \\[dq]/rclone\\[dq]\\f[R] then rclone would\nserve from a URL starting with \\[dq]/rclone/\\[dq].\nThis is useful if you wish to proxy rclone serve.\nRclone automatically inserts leading and trailing \\[dq]/\\[dq] on\n\\f[C]--rc-baseurl\\f[R], so \\f[C]--rc-baseurl \\[dq]rclone\\[dq]\\f[R],\n\\f[C]--rc-baseurl \\[dq]/rclone\\[dq]\\f[R] and\n\\f[C]--rc-baseurl \\[dq]/rclone/\\[dq]\\f[R] are all treated identically.\n.SS TLS (SSL)\n.PP\nBy default this will serve over http.\nIf you want you can serve over https.\nYou will need to supply the \\f[C]--rc-cert\\f[R] and \\f[C]--rc-key\\f[R]\nflags.\nIf you wish to do client side certificate validation then you will need\nto supply \\f[C]--rc-client-ca\\f[R] also.\n.PP\n\\f[C]--rc-cert\\f[R] should be a either a PEM encoded certificate or a\nconcatenation of that with the CA certificate.\n\\f[C]--krc-ey\\f[R] should be the PEM encoded private key and\n\\f[C]--rc-client-ca\\f[R] should be the PEM encoded client certificate\nauthority certificate.\n.PP\n\\f[C]--rc-min-tls-version\\f[R] is minimum TLS version that is\nacceptable.\nValid values are \\[dq]tls1.0\\[dq], \\[dq]tls1.1\\[dq], \\[dq]tls1.2\\[dq]\nand \\[dq]tls1.3\\[dq] (default \\[dq]tls1.0\\[dq]).\n.SS Socket activation\n.PP\nInstead of the listening addresses specified above, rclone will listen\nto all FDs passed by the service manager, if any (and ignore any\narguments passed by --rc-addr\\[ga]).\n.PP\nThis allows rclone to be a socket-activated service.\nIt can be configured with .socket and .service unit files as described\nin\nhttps://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html\n.PP\nSocket activation can be tested ad-hoc with the\n\\f[C]systemd-socket-activate\\f[R]command\n.IP\n.nf\n\\f[C]\n   systemd-socket-activate -l 8000 -- rclone serve\n\\f[R]\n.fi\n.PP\nThis will socket-activate rclone on the first connection to port 8000\nover TCP.\n### Template\n.PP\n\\f[C]--rc-template\\f[R] allows a user to specify a custom markup\ntemplate for HTTP and WebDAV serve functions.\nThe server exports the following markup to be used within the template\nto server pages:\n.PP\n.TS\ntab(@);\nlw(35.0n) lw(35.0n).\nT{\nParameter\nT}@T{\nDescription\nT}\n_\nT{\n\\&.Name\nT}@T{\nThe full path of a file/directory.\nT}\nT{\n\\&.Title\nT}@T{\nDirectory listing of .Name\nT}\nT{\n\\&.Sort\nT}@T{\nThe current sort used.\nThis is changeable via ?sort= parameter\nT}\nT{\nT}@T{\nSort Options: namedirfirst,name,size,time (default namedirfirst)\nT}\nT{\n\\&.Order\nT}@T{\nThe current ordering used.\nThis is changeable via ?order= parameter\nT}\nT{\nT}@T{\nOrder Options: asc,desc (default asc)\nT}\nT{\n\\&.Query\nT}@T{\nCurrently unused.\nT}\nT{\n\\&.Breadcrumb\nT}@T{\nAllows for creating a relative navigation\nT}\nT{\n-- .Link\nT}@T{\nThe relative to the root link of the Text.\nT}\nT{\n-- .Text\nT}@T{\nThe Name of the directory.\nT}\nT{\n\\&.Entries\nT}@T{\nInformation about a specific file/directory.\nT}\nT{\n-- .URL\nT}@T{\nThe \\[aq]url\\[aq] of an entry.\nT}\nT{\n-- .Leaf\nT}@T{\nCurrently same as \\[aq]URL\\[aq] but intended to be \\[aq]just\\[aq] the\nname.\nT}\nT{\n-- .IsDir\nT}@T{\nBoolean for if an entry is a directory or not.\nT}\nT{\n-- .Size\nT}@T{\nSize in Bytes of the entry.\nT}\nT{\n-- .ModTime\nT}@T{\nThe UTC timestamp of an entry.\nT}\n.TE\n.PP\nThe server also makes the following functions available so that they can\nbe used within the template.\nThese functions help extend the options for dynamic rendering of HTML.\nThey can be used to render HTML based on specific conditions.\n.PP\n.TS\ntab(@);\nlw(35.0n) lw(35.0n).\nT{\nFunction\nT}@T{\nDescription\nT}\n_\nT{\nafterEpoch\nT}@T{\nReturns the time since the epoch for the given time.\nT}\nT{\ncontains\nT}@T{\nChecks whether a given substring is present or not in a given string.\nT}\nT{\nhasPrefix\nT}@T{\nChecks whether the given string begins with the specified prefix.\nT}\nT{\nhasSuffix\nT}@T{\nChecks whether the given string end with the specified suffix.\nT}\n.TE\n.SS Authentication\n.PP\nBy default this will serve files without needing a login.\n.PP\nYou can either use an htpasswd file which can take lots of users, or set\na single username and password with the \\f[C]--rc-user\\f[R] and\n\\f[C]--rc-pass\\f[R] flags.\n.PP\nIf no static users are configured by either of the above methods, and\nclient certificates are required by the \\f[C]--client-ca\\f[R] flag\npassed to the server, the client certificate common name will be\nconsidered as the username.\n.PP\nUse \\f[C]--rc-htpasswd /path/to/htpasswd\\f[R] to provide an htpasswd\nfile.\nThis is in standard apache format and supports MD5, SHA1 and BCrypt for\nbasic authentication.\nBcrypt is recommended.\n.PP\nTo create an htpasswd file:\n.IP\n.nf\n\\f[C]\ntouch htpasswd\nhtpasswd -B htpasswd user\nhtpasswd -B htpasswd anotherUser\n\\f[R]\n.fi\n.PP\nThe password file can be updated while rclone is running.\n.PP\nUse \\f[C]--rc-realm\\f[R] to set the authentication realm.\n.PP\nUse \\f[C]--rc-salt\\f[R] to change the password hashing salt from the\ndefault.\n.IP\n.nf\n\\f[C]\nrclone rcd <path to files to serve>* [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for rcd\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS RC Options\n.PP\nFlags to control the Remote Control API\n.IP\n.nf\n\\f[C]\n      --rc                                 Enable the remote control server\n      --rc-addr stringArray                IPaddress:Port or :Port to bind server to (default [\\[dq]localhost:5572\\[dq]])\n      --rc-allow-origin string             Origin which cross-domain request (CORS) can be executed from\n      --rc-baseurl string                  Prefix for URLs - leave blank for root\n      --rc-cert string                     TLS PEM key (concatenation of certificate and CA certificate)\n      --rc-client-ca string                Client certificate authority to verify clients with\n      --rc-enable-metrics                  Enable the Prometheus metrics path at the remote control server\n      --rc-files string                    Path to local files to serve on the HTTP server\n      --rc-htpasswd string                 A htpasswd file - if not provided no authentication is done\n      --rc-job-expire-duration Duration    Expire finished async jobs older than this value (default 1m0s)\n      --rc-job-expire-interval Duration    Interval to check for expired async jobs (default 10s)\n      --rc-key string                      TLS PEM Private key\n      --rc-max-header-bytes int            Maximum size of request header (default 4096)\n      --rc-min-tls-version string          Minimum TLS version that is acceptable (default \\[dq]tls1.0\\[dq])\n      --rc-no-auth                         Don\\[aq]t require auth for certain methods\n      --rc-pass string                     Password for authentication\n      --rc-realm string                    Realm for authentication\n      --rc-salt string                     Password hashing salt (default \\[dq]dlPL2MqE\\[dq])\n      --rc-serve                           Enable the serving of remote objects\n      --rc-serve-no-modtime                Don\\[aq]t read the modification time (can speed things up)\n      --rc-server-read-timeout Duration    Timeout for server reading data (default 1h0m0s)\n      --rc-server-write-timeout Duration   Timeout for server writing data (default 1h0m0s)\n      --rc-template string                 User-specified template\n      --rc-user string                     User name for authentication\n      --rc-web-fetch-url string            URL to fetch the releases for webgui (default \\[dq]https://api.github.com/repos/rclone/rclone-webui-react/releases/latest\\[dq])\n      --rc-web-gui                         Launch WebGUI on localhost\n      --rc-web-gui-force-update            Force update to latest version of web gui\n      --rc-web-gui-no-open-browser         Don\\[aq]t open the browser automatically\n      --rc-web-gui-update                  Check and update to latest version of web gui\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone rmdirs\n.PP\nRemove empty directories under the path.\n.SS Synopsis\n.PP\nThis recursively removes any empty directories (including directories\nthat only contain empty directories), that it finds under the path.\nThe root path itself will also be removed if it is empty, unless you\nsupply the \\f[C]--leave-root\\f[R] flag.\n.PP\nUse command rmdir (https://rclone.org/commands/rclone_rmdir/) to delete\njust the empty directory given by path, not recurse.\n.PP\nThis is useful for tidying up remotes that rclone has left a lot of\nempty directories in.\nFor example the delete (https://rclone.org/commands/rclone_delete/)\ncommand will delete files but leave the directory structure (unless used\nwith option \\f[C]--rmdirs\\f[R]).\n.PP\nThis will delete \\f[C]--checkers\\f[R] directories concurrently so if you\nhave thousands of empty directories consider increasing this number.\n.PP\nTo delete a path and any objects in it, use the\npurge (https://rclone.org/commands/rclone_purge/) command.\n.IP\n.nf\n\\f[C]\nrclone rmdirs remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help         help for rmdirs\n      --leave-root   Do not remove root directory if empty\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Important Options\n.PP\nImportant flags useful for most commands\n.IP\n.nf\n\\f[C]\n  -n, --dry-run         Do a trial run with no permanent changes\n  -i, --interactive     Enable interactive mode\n  -v, --verbose count   Print lots more stuff (repeat for more)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone selfupdate\n.PP\nUpdate the rclone binary.\n.SS Synopsis\n.PP\nThis command downloads the latest release of rclone and replaces the\ncurrently running binary.\nThe download is verified with a hashsum and cryptographically signed\nsignature; see the release signing\ndocs (https://rclone.org/release_signing/) for details.\n.PP\nIf used without flags (or with implied \\f[C]--stable\\f[R] flag), this\ncommand will install the latest stable release.\nHowever, some issues may be fixed (or features added) only in the latest\nbeta release.\nIn such cases you should run the command with the \\f[C]--beta\\f[R] flag,\ni.e.\n\\f[C]rclone selfupdate --beta\\f[R].\nYou can check in advance what version would be installed by adding the\n\\f[C]--check\\f[R] flag, then repeat the command without it when you are\nsatisfied.\n.PP\nSometimes the rclone team may recommend you a concrete beta or stable\nrclone release to troubleshoot your issue or add a bleeding edge\nfeature.\nThe \\f[C]--version VER\\f[R] flag, if given, will update to the concrete\nversion instead of the latest one.\nIf you omit micro version from \\f[C]VER\\f[R] (for example\n\\f[C]1.53\\f[R]), the latest matching micro version will be used.\n.PP\nUpon successful update rclone will print a message that contains a\nprevious version number.\nYou will need it if you later decide to revert your update for some\nreason.\nThen you\\[aq]ll have to note the previous version and run the following\ncommand: \\f[C]rclone selfupdate [--beta] OLDVER\\f[R].\nIf the old version contains only dots and digits (for example\n\\f[C]v1.54.0\\f[R]) then it\\[aq]s a stable release so you won\\[aq]t need\nthe \\f[C]--beta\\f[R] flag.\nBeta releases have an additional information similar to\n\\f[C]v1.54.0-beta.5111.06f1c0c61\\f[R].\n(if you are a developer and use a locally built rclone, the version\nnumber will end with \\f[C]-DEV\\f[R], you will have to rebuild it as it\nobviously can\\[aq]t be distributed).\n.PP\nIf you previously installed rclone via a package manager, the package\nmay include local documentation or configure services.\nYou may wish to update with the flag \\f[C]--package deb\\f[R] or\n\\f[C]--package rpm\\f[R] (whichever is correct for your OS) to update\nthese too.\nThis command with the default \\f[C]--package zip\\f[R] will update only\nthe rclone executable so the local manual may become inaccurate after\nit.\n.PP\nThe rclone mount (https://rclone.org/commands/rclone_mount/) command may\nor may not support extended FUSE options depending on the build and OS.\n\\f[C]selfupdate\\f[R] will refuse to update if the capability would be\ndiscarded.\n.PP\nNote: Windows forbids deletion of a currently running executable so this\ncommand will rename the old executable to \\[aq]rclone.old.exe\\[aq] upon\nsuccess.\n.PP\nPlease note that this command was not available before rclone version\n1.55.\nIf it fails for you with the message\n\\f[C]unknown command \\[dq]selfupdate\\[dq]\\f[R] then you will need to\nupdate manually following the install instructions located at\nhttps://rclone.org/install/\n.IP\n.nf\n\\f[C]\nrclone selfupdate [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --beta             Install beta release\n      --check            Check for latest release, do not download\n  -h, --help             help for selfupdate\n      --output string    Save the downloaded binary at a given path (default: replace running binary)\n      --package string   Package format: zip|deb|rpm (default: zip)\n      --stable           Install stable release (this is the default)\n      --version string   Install the given rclone version (default: latest)\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.SH rclone serve\n.PP\nServe a remote over a protocol.\n.SS Synopsis\n.PP\nServe a remote over a given protocol.\nRequires the use of a subcommand to specify the protocol, e.g.\n.IP\n.nf\n\\f[C]\nrclone serve http remote:\n\\f[R]\n.fi\n.PP\nEach subcommand has its own options which you can see in their help.\n.IP\n.nf\n\\f[C]\nrclone serve <protocol> [opts] <remote> [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n  -h, --help   help for serve\n\\f[R]\n.fi\n.PP\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS See Also\n.IP \\[bu] 2\nrclone (https://rclone.org/commands/rclone/) - Show help for rclone\ncommands, flags and backends.\n.IP \\[bu] 2\nrclone serve dlna (https://rclone.org/commands/rclone_serve_dlna/) -\nServe remote:path over DLNA\n.IP \\[bu] 2\nrclone serve docker (https://rclone.org/commands/rclone_serve_docker/) -\nServe any remote on docker\\[aq]s volume plugin API.\n.IP \\[bu] 2\nrclone serve ftp (https://rclone.org/commands/rclone_serve_ftp/) - Serve\nremote:path over FTP.\n.IP \\[bu] 2\nrclone serve http (https://rclone.org/commands/rclone_serve_http/) -\nServe the remote over HTTP.\n.IP \\[bu] 2\nrclone serve nfs (https://rclone.org/commands/rclone_serve_nfs/) - Serve\nthe remote as an NFS mount\n.IP \\[bu] 2\nrclone serve restic (https://rclone.org/commands/rclone_serve_restic/) -\nServe the remote for restic\\[aq]s REST API.\n.IP \\[bu] 2\nrclone serve s3 (https://rclone.org/commands/rclone_serve_s3/) - Serve\nremote:path over s3.\n.IP \\[bu] 2\nrclone serve sftp (https://rclone.org/commands/rclone_serve_sftp/) -\nServe the remote over SFTP.\n.IP \\[bu] 2\nrclone serve webdav (https://rclone.org/commands/rclone_serve_webdav/) -\nServe remote:path over WebDAV.\n.SH rclone serve dlna\n.PP\nServe remote:path over DLNA\n.SS Synopsis\n.PP\nRun a DLNA media server for media stored in an rclone remote.\nMany devices, such as the Xbox and PlayStation, can automatically\ndiscover this server in the LAN and play audio/video from it.\nVLC is also supported.\nService discovery uses UDP multicast packets (SSDP) and will thus only\nwork on LANs.\n.PP\nRclone will list all files present in the remote, without filtering\nbased on media formats or file extensions.\nAdditionally, there is no media transcoding support.\nThis means that some players might show files that they are not able to\nplay back correctly.\n.PP\nRclone will add external subtitle files (.srt) to videos if they have\nthe same filename as the video file itself (except the extension),\neither in the same directory as the video, or in a \\[dq]Subs\\[dq]\nsubdirectory.\n.SS Server options\n.PP\nUse \\f[C]--addr\\f[R] to specify which IP address and port the server\nshould listen on, e.g.\n\\f[C]--addr 1.2.3.4:8000\\f[R] or \\f[C]--addr :8080\\f[R] to listen to all\nIPs.\n.PP\nUse \\f[C]--name\\f[R] to choose the friendly server name, which is by\ndefault \\[dq]rclone (hostname)\\[dq].\n.PP\nUse \\f[C]--log-trace\\f[R] in conjunction with \\f[C]-vv\\f[R] to enable\nadditional debug logging of all UPNP traffic.\n.SS VFS - Virtual File System\n.PP\nThis command uses the VFS layer.\nThis adapts the cloud storage objects that rclone uses into something\nwhich looks much more like a disk filing system.\n.PP\nCloud storage objects have lots of properties which aren\\[aq]t like disk\nfiles - you can\\[aq]t extend them or write to the middle of them, so the\nVFS layer has to deal with that.\nBecause there is no one right way of doing this there are various\noptions explained below.\n.PP\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n.SS VFS Directory Cache\n.PP\nUsing the \\f[C]--dir-cache-time\\f[R] flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n.IP\n.nf\n\\f[C]\n--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\\f[R]\n.fi\n.PP\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges.\nIf the backend supports polling, changes will be picked up within the\npolling interval.\n.PP\nYou can send a \\f[C]SIGHUP\\f[R] signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.\nAssuming only one rclone instance is running, you can reset the cache\nlike this:\n.IP\n.nf\n\\f[C]\nkill -SIGHUP $(pidof rclone)\n\\f[R]\n.fi\n.PP\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget\n\\f[R]\n.fi\n.PP\nOr individual files or directories:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget file=path/to/file dir=path/to/dir\n\\f[R]\n.fi\n.SS VFS File Buffering\n.PP\nThe \\f[C]--buffer-size\\f[R] flag determines the amount of memory, that\nwill be used to buffer data in advance.\n.PP\nEach open file will try to keep the specified amount of data in memory\nat all times.\nThe buffered data is bound to one open file and won\\[aq]t be shared.\n.PP\nThis flag is a upper limit for the used memory per open file.\nThe buffer will only use memory for data that is downloaded but not not\nyet read.\nIf the buffer is empty, only a small amount of memory will be used.\n.PP\nThe maximum memory used by rclone for buffering can be up to\n\\f[C]--buffer-size * open files\\f[R].\n.SS VFS File Caching\n.PP\nThese flags control the VFS file caching options.\nFile caching is necessary to make the VFS layer appear compatible with a\nnormal file system.\nIt can be disabled at the cost of some compatibility.\n.PP\nFor example you\\[aq]ll need to enable VFS caching if you want to read\nand write simultaneously to a file.\nSee below for more details.\n.PP\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n.IP\n.nf\n\\f[C]\n--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\\f[R]\n.fi\n.PP\nIf run with \\f[C]-vv\\f[R] rclone will print the location of the file\ncache.\nThe files are stored in the user cache file area which is OS dependent\nbut can be controlled with \\f[C]--cache-dir\\f[R] or setting the\nappropriate environment variable.\n.PP\nThe cache has 4 different modes selected by \\f[C]--vfs-cache-mode\\f[R].\nThe higher the cache mode the more compatible rclone becomes at the cost\nof using disk space.\n.PP\nNote that files are written back to the remote only when they are closed\nand if they haven\\[aq]t been accessed for \\f[C]--vfs-write-back\\f[R]\nseconds.\nIf rclone is quit or dies with files that haven\\[aq]t been uploaded,\nthese will be uploaded next time rclone is run with the same flags.\n.PP\nIf using \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] note that the cache may exceed these\nquotas for two reasons.\nFirstly because it is only checked every\n\\f[C]--vfs-cache-poll-interval\\f[R].\nSecondly because open files cannot be evicted from the cache.\nWhen \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] is exceeded, rclone will attempt to\nevict the least accessed files from the cache first.\nrclone will start with files that haven\\[aq]t been accessed for the\nlongest.\nThis cache flushing strategy is efficient and more relevant files are\nlikely to remain cached.\n.PP\nThe \\f[C]--vfs-cache-max-age\\f[R] will evict files from the cache after\nthe set time since last access has passed.\nThe default value of 1 hour will start evicting files from cache that\nhaven\\[aq]t been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting.\nSpecify the time with standard notation, s, m, h, d, w .\n.PP\nYou \\f[B]should not\\f[R] run two copies of rclone using the same VFS\ncache with the same or overlapping remotes if using\n\\f[C]--vfs-cache-mode > off\\f[R].\nThis can potentially cause data corruption if you do.\nYou can work around this by giving each rclone its own cache hierarchy\nwith \\f[C]--cache-dir\\f[R].\nYou don\\[aq]t need to worry about this if the remotes in use don\\[aq]t\noverlap.\n.SS --vfs-cache-mode off\n.PP\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n.PP\nThis will mean some operations are not possible\n.IP \\[bu] 2\nFiles can\\[aq]t be opened for both read AND write\n.IP \\[bu] 2\nFiles opened for write can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles open for read with O_TRUNC will be opened write only\n.IP \\[bu] 2\nFiles open for write only will behave as if O_TRUNC was supplied\n.IP \\[bu] 2\nOpen modes O_APPEND, O_TRUNC are ignored\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode minimal\n.PP\nThis is very similar to \\[dq]off\\[dq] except that files opened for read\nAND write will be buffered to disk.\nThis means that files opened for write will be a lot more compatible,\nbut uses the minimal disk space.\n.PP\nThese operations are not possible\n.IP \\[bu] 2\nFiles opened for write only can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles opened for write only will ignore O_APPEND, O_TRUNC\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode writes\n.PP\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n.PP\nThis mode should support all normal file system operations.\n.PP\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n.SS --vfs-cache-mode full\n.PP\nIn this mode all reads and writes are buffered to and from disk.\nWhen data is read from the remote this is buffered to disk as well.\n.PP\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n.PP\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file.\nThese files will appear to be their full size in the cache, but they\nwill be sparse files with only the data that has been downloaded present\nin them.\n.PP\nThis mode should support all normal file system operations and is\notherwise identical to \\f[C]--vfs-cache-mode\\f[R] writes.\n.PP\nWhen reading a file rclone will read \\f[C]--buffer-size\\f[R] plus\n\\f[C]--vfs-read-ahead\\f[R] bytes ahead.\nThe \\f[C]--buffer-size\\f[R] is buffered in memory whereas the\n\\f[C]--vfs-read-ahead\\f[R] is buffered on disk.\n.PP\nWhen using this mode it is recommended that \\f[C]--buffer-size\\f[R] is\nnot set too large and \\f[C]--vfs-read-ahead\\f[R] is set large if\nrequired.\n.PP\n\\f[B]IMPORTANT\\f[R] not all file systems support sparse files.\nIn particular FAT/exFAT do not.\nRclone will perform very badly if the cache directory is on a filesystem\nwhich doesn\\[aq]t support sparse files and it will log an ERROR message\nif one is detected.\n.SS Fingerprinting\n.PP\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file.\nFingerprints are made from:\n.IP \\[bu] 2\nsize\n.IP \\[bu] 2\nmodification time\n.IP \\[bu] 2\nhash\n.PP\nwhere available on an object.\n.PP\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n.PP\nFor example \\f[C]hash\\f[R] is slow with the \\f[C]local\\f[R] and\n\\f[C]sftp\\f[R] backends as they have to read the entire file and hash\nit, and \\f[C]modtime\\f[R] is slow with the \\f[C]s3\\f[R],\n\\f[C]swift\\f[R], \\f[C]ftp\\f[R] and \\f[C]qinqstor\\f[R] backends because\nthey need to do an extra API call to fetch it.\n.PP\nIf you use the \\f[C]--vfs-fast-fingerprint\\f[R] flag then rclone will\nnot include the slow operations in the fingerprint.\nThis makes the fingerprinting less accurate but much faster and will\nimprove the opening time of cached files.\n.PP\nIf you are running a vfs cache over \\f[C]local\\f[R], \\f[C]s3\\f[R] or\n\\f[C]swift\\f[R] backends then using this flag is recommended.\n.PP\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n.SS VFS Chunked Reading\n.PP\nWhen rclone reads files from a remote it reads them in chunks.\nThis means that rather than requesting the whole file rclone reads the\nchunk specified.\nThis can reduce the used download quota for some remotes by requesting\nonly chunks from the remote that are actually read, at the cost of an\nincreased number of requests.\n.PP\nThese flags control the chunking:\n.IP\n.nf\n\\f[C]\n--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once\n\\f[R]\n.fi\n.PP\nThe chunking behaves differently depending on the\n\\f[C]--vfs-read-chunk-streams\\f[R] parameter.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] == 0\n.PP\nRclone will start reading a chunk of size\n\\f[C]--vfs-read-chunk-size\\f[R], and then double the size for each read.\nWhen \\f[C]--vfs-read-chunk-size-limit\\f[R] is specified, and greater\nthan \\f[C]--vfs-read-chunk-size\\f[R], the chunk size for each open file\nwill get doubled only until the specified value is reached.\nIf the value is \\[dq]off\\[dq], which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n.PP\nWith \\f[C]--vfs-read-chunk-size 100M\\f[R] and\n\\f[C]--vfs-read-chunk-size-limit 0\\f[R] the following parts will be\ndownloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen \\f[C]--vfs-read-chunk-size-limit 500M\\f[R] is specified, the result\nwould be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so\non.\n.PP\nSetting \\f[C]--vfs-read-chunk-size\\f[R] to \\f[C]0\\f[R] or \\[dq]off\\[dq]\ndisables chunked reading.\n.PP\nThe chunks will not be buffered in memory.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] > 0\n.PP\nRclone reads \\f[C]--vfs-read-chunk-streams\\f[R] chunks of size\n\\f[C]--vfs-read-chunk-size\\f[R] concurrently.\nThe size for each read will stay constant.\n.PP\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n.PP\nSome experimentation will be needed to find the optimum values of\n\\f[C]--vfs-read-chunk-size\\f[R] and \\f[C]--vfs-read-chunk-streams\\f[R]\nas these will depend on the backend in use and the latency to the\nbackend.\n.PP\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be \\f[C]--vfs-read-chunk-streams 16\\f[R] and\n\\f[C]--vfs-read-chunk-size 4M\\f[R].\nIn testing with AWS S3 the performance scaled roughly as the\n\\f[C]--vfs-read-chunk-streams\\f[R] setting.\n.PP\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more \\f[C]--vfs-read-chunk-streams\\f[R] in\norder to get the throughput.\n.SS VFS Performance\n.PP\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons.\nSee also the chunked reading feature.\n.PP\nIn particular S3 and Swift benefit hugely from the\n\\f[C]--no-modtime\\f[R] flag (or use \\f[C]--use-server-modtime\\f[R] for a\nslightly different effect) as each read of the modification time takes a\ntransaction.\n.IP\n.nf\n\\f[C]\n--no-checksum     Don\\[aq]t compare checksums on up/download.\n--no-modtime      Don\\[aq]t read/write the modification time (can speed things up).\n--no-seek         Don\\[aq]t allow seeking in files.\n--read-only       Only allow read-only access.\n\\f[R]\n.fi\n.PP\nSometimes rclone is delivered reads or writes out of order.\nRather than seeking rclone will wait a short time for the in sequence\nread or write to come in.\nThese flags only come into effect when not using an on disk cache file.\n.IP\n.nf\n\\f[C]\n--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\\f[R]\n.fi\n.PP\nWhen using VFS write caching (\\f[C]--vfs-cache-mode\\f[R] with value\nwrites or full), the global flag \\f[C]--transfers\\f[R] can be set to\nadjust the number of parallel uploads of modified files from the cache\n(the related global flag \\f[C]--checkers\\f[R] has no effect on the VFS).\n.IP\n.nf\n\\f[C]\n--transfers int  Number of file transfers to run in parallel (default 4)\n\\f[R]\n.fi\n.SS VFS Case Sensitivity\n.PP\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n.PP\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery.\nIt is not allowed for two files in the same directory to differ only by\ncase.\n.PP\nUsually file systems on macOS are case-insensitive.\nIt is possible to make macOS file systems case-sensitive but that is not\nthe default.\n.PP\nThe \\f[C]--vfs-case-insensitive\\f[R] VFS flag controls how rclone\nhandles these two cases.\nIf its value is \\[dq]false\\[dq], rclone passes file names to the remote\nas-is.\nIf the flag is \\[dq]true\\[dq] (or appears without a value on the command\nline), rclone may perform a \\[dq]fixup\\[dq] as explained below.\n.PP\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote.\nIf an argument refers to an existing file with exactly the same name,\nthen the case of the existing file on the disk will be used.\nHowever, if a file name with exactly the same name is not found but a\nname differing only by case exists, rclone will transparently fixup the\nname.\nThis fixup happens only when an existing file is requested.\nCase sensitivity of file names created anew by rclone is controlled by\nthe underlying remote.\n.PP\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source).\nThe flag controls whether \\[dq]fixup\\[dq] is performed to satisfy the\ntarget.\n.PP\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \\[dq]true\\[dq] on\nWindows and macOS, \\[dq]false\\[dq] otherwise.\nIf the flag is provided without a value, then it is \\[dq]true\\[dq].\n.PP\nThe \\f[C]--no-unicode-normalization\\f[R] flag controls whether a similar\n\\[dq]fixup\\[dq] is performed for filenames that differ but are\ncanonically\nequivalent (https://en.wikipedia.org/wiki/Unicode_equivalence) with\nrespect to unicode.\nUnicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms.\nIt is therefore highly recommended to keep the default of\n\\f[C]false\\f[R] on macOS, to avoid encoding compatibility issues.\n.PP\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n\\f[C]--vfs-block-norm-dupes\\f[R] flag allows hiding these duplicates.\nThis comes with a performance tradeoff, as rclone will have to scan the\nentire directory for duplicates when listing a directory.\nFor this reason, it is recommended to leave this disabled if not needed.\nHowever, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same\nfilename, an odd situation will occur: both versions of the file will be\nvisible in the mount, and both will appear to be editable, however,\nediting either version will actually result in only the NFD version\ngetting edited under the hood.\n\\f[C]--vfs-block- norm-dupes\\f[R] prevents this confusion by detecting\nthis scenario, hiding the duplicates, and logging an error, similar to\nhow this is handled in \\f[C]rclone sync\\f[R].\n.SS VFS Disk Options\n.PP\nThis flag allows you to manually set the statistics about the filing\nsystem.\nIt can be useful when those statistics cannot be read correctly\nautomatically.\n.IP\n.nf\n\\f[C]\n--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\\f[R]\n.fi\n.SS Alternate report of used bytes\n.PP\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running \\f[C]df\\f[R]\non the filesystem, then pass the flag \\f[C]--vfs-used-is-size\\f[R] to\nrclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to\n\\f[C]rclone size\\f[R] and compute the total used space itself.\n.PP\n\\f[I]WARNING.\\f[R] Contrary to \\f[C]rclone size\\f[R], this flag ignores\nfilters so that the result is accurate.\nHowever, this is very inefficient and may cost lots of API calls\nresulting in extra charges.\nUse it as a last resort and only with caching.\n.IP\n.nf\n\\f[C]\nrclone serve dlna remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --addr string                            The ip:port or :port to bind the DLNA http server to (default \\[dq]:7879\\[dq])\n      --announce-interval Duration             The interval between SSDP announcements (default 12m0s)\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --file-perms FileMode                    File permissions (default 666)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for dlna\n      --interface stringArray                  The interface to use for SSDP (repeat as necessary)\n      --log-trace                              Enable trace logging of SOAP traffic\n      --name string                            Name of DLNA server\n      --no-checksum                            Don\\[aq]t compare checksums on up/download\n      --no-modtime                             Don\\[aq]t read/write the modification time (can speed things up)\n      --no-seek                                Don\\[aq]t allow seeking in files\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (\\[aq]off\\[aq] is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone serve (https://rclone.org/commands/rclone_serve/) - Serve a\nremote over a protocol.\n.SH rclone serve docker\n.PP\nServe any remote on docker\\[aq]s volume plugin API.\n.SS Synopsis\n.PP\nThis command implements the Docker volume plugin API allowing docker to\nuse rclone as a data storage mechanism for various cloud providers.\nrclone provides docker volume plugin based on it.\n.PP\nTo create a docker plugin, one must create a Unix or TCP socket that\nDocker will look for when you use the plugin and then it listens for\ncommands from docker daemon and runs the corresponding code when\nnecessary.\nDocker plugins can run as a managed plugin under control of the docker\ndaemon or as an independent native service.\nFor testing, you can just run it directly from the command line, for\nexample:\n.IP\n.nf\n\\f[C]\nsudo rclone serve docker --base-dir /tmp/rclone-volumes --socket-addr localhost:8787 -vv\n\\f[R]\n.fi\n.PP\nRunning \\f[C]rclone serve docker\\f[R] will create the said socket,\nlistening for commands from Docker to create the necessary Volumes.\nNormally you need not give the \\f[C]--socket-addr\\f[R] flag.\nThe API will listen on the unix domain socket at\n\\f[C]/run/docker/plugins/rclone.sock\\f[R].\nIn the example above rclone will create a TCP socket and a small file\n\\f[C]/etc/docker/plugins/rclone.spec\\f[R] containing the socket address.\nWe use \\f[C]sudo\\f[R] because both paths are writeable only by the root\nuser.\n.PP\nIf you later decide to change listening socket, the docker daemon must\nbe restarted to reconnect to \\f[C]/run/docker/plugins/rclone.sock\\f[R]\nor parse new \\f[C]/etc/docker/plugins/rclone.spec\\f[R].\nUntil you restart, any volume related docker commands will timeout\ntrying to access the old socket.\nRunning directly is supported on \\f[B]Linux only\\f[R], not on Windows or\nMacOS.\nThis is not a problem with managed plugin mode described in details in\nthe full documentation (https://rclone.org/docker).\n.PP\nThe command will create volume mounts under the path given by\n\\f[C]--base-dir\\f[R] (by default\n\\f[C]/var/lib/docker-volumes/rclone\\f[R] available only to root) and\nmaintain the JSON formatted file \\f[C]docker-plugin.state\\f[R] in the\nrclone cache directory with book-keeping records of created and mounted\nvolumes.\n.PP\nAll mount and VFS options are submitted by the docker daemon via API,\nbut you can also provide defaults on the command line as well as set\npath to the config file and cache directory or adjust logging verbosity.\n.SS VFS - Virtual File System\n.PP\nThis command uses the VFS layer.\nThis adapts the cloud storage objects that rclone uses into something\nwhich looks much more like a disk filing system.\n.PP\nCloud storage objects have lots of properties which aren\\[aq]t like disk\nfiles - you can\\[aq]t extend them or write to the middle of them, so the\nVFS layer has to deal with that.\nBecause there is no one right way of doing this there are various\noptions explained below.\n.PP\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n.SS VFS Directory Cache\n.PP\nUsing the \\f[C]--dir-cache-time\\f[R] flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n.IP\n.nf\n\\f[C]\n--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\\f[R]\n.fi\n.PP\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges.\nIf the backend supports polling, changes will be picked up within the\npolling interval.\n.PP\nYou can send a \\f[C]SIGHUP\\f[R] signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.\nAssuming only one rclone instance is running, you can reset the cache\nlike this:\n.IP\n.nf\n\\f[C]\nkill -SIGHUP $(pidof rclone)\n\\f[R]\n.fi\n.PP\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget\n\\f[R]\n.fi\n.PP\nOr individual files or directories:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget file=path/to/file dir=path/to/dir\n\\f[R]\n.fi\n.SS VFS File Buffering\n.PP\nThe \\f[C]--buffer-size\\f[R] flag determines the amount of memory, that\nwill be used to buffer data in advance.\n.PP\nEach open file will try to keep the specified amount of data in memory\nat all times.\nThe buffered data is bound to one open file and won\\[aq]t be shared.\n.PP\nThis flag is a upper limit for the used memory per open file.\nThe buffer will only use memory for data that is downloaded but not not\nyet read.\nIf the buffer is empty, only a small amount of memory will be used.\n.PP\nThe maximum memory used by rclone for buffering can be up to\n\\f[C]--buffer-size * open files\\f[R].\n.SS VFS File Caching\n.PP\nThese flags control the VFS file caching options.\nFile caching is necessary to make the VFS layer appear compatible with a\nnormal file system.\nIt can be disabled at the cost of some compatibility.\n.PP\nFor example you\\[aq]ll need to enable VFS caching if you want to read\nand write simultaneously to a file.\nSee below for more details.\n.PP\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n.IP\n.nf\n\\f[C]\n--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\\f[R]\n.fi\n.PP\nIf run with \\f[C]-vv\\f[R] rclone will print the location of the file\ncache.\nThe files are stored in the user cache file area which is OS dependent\nbut can be controlled with \\f[C]--cache-dir\\f[R] or setting the\nappropriate environment variable.\n.PP\nThe cache has 4 different modes selected by \\f[C]--vfs-cache-mode\\f[R].\nThe higher the cache mode the more compatible rclone becomes at the cost\nof using disk space.\n.PP\nNote that files are written back to the remote only when they are closed\nand if they haven\\[aq]t been accessed for \\f[C]--vfs-write-back\\f[R]\nseconds.\nIf rclone is quit or dies with files that haven\\[aq]t been uploaded,\nthese will be uploaded next time rclone is run with the same flags.\n.PP\nIf using \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] note that the cache may exceed these\nquotas for two reasons.\nFirstly because it is only checked every\n\\f[C]--vfs-cache-poll-interval\\f[R].\nSecondly because open files cannot be evicted from the cache.\nWhen \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] is exceeded, rclone will attempt to\nevict the least accessed files from the cache first.\nrclone will start with files that haven\\[aq]t been accessed for the\nlongest.\nThis cache flushing strategy is efficient and more relevant files are\nlikely to remain cached.\n.PP\nThe \\f[C]--vfs-cache-max-age\\f[R] will evict files from the cache after\nthe set time since last access has passed.\nThe default value of 1 hour will start evicting files from cache that\nhaven\\[aq]t been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting.\nSpecify the time with standard notation, s, m, h, d, w .\n.PP\nYou \\f[B]should not\\f[R] run two copies of rclone using the same VFS\ncache with the same or overlapping remotes if using\n\\f[C]--vfs-cache-mode > off\\f[R].\nThis can potentially cause data corruption if you do.\nYou can work around this by giving each rclone its own cache hierarchy\nwith \\f[C]--cache-dir\\f[R].\nYou don\\[aq]t need to worry about this if the remotes in use don\\[aq]t\noverlap.\n.SS --vfs-cache-mode off\n.PP\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n.PP\nThis will mean some operations are not possible\n.IP \\[bu] 2\nFiles can\\[aq]t be opened for both read AND write\n.IP \\[bu] 2\nFiles opened for write can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles open for read with O_TRUNC will be opened write only\n.IP \\[bu] 2\nFiles open for write only will behave as if O_TRUNC was supplied\n.IP \\[bu] 2\nOpen modes O_APPEND, O_TRUNC are ignored\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode minimal\n.PP\nThis is very similar to \\[dq]off\\[dq] except that files opened for read\nAND write will be buffered to disk.\nThis means that files opened for write will be a lot more compatible,\nbut uses the minimal disk space.\n.PP\nThese operations are not possible\n.IP \\[bu] 2\nFiles opened for write only can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles opened for write only will ignore O_APPEND, O_TRUNC\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode writes\n.PP\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n.PP\nThis mode should support all normal file system operations.\n.PP\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n.SS --vfs-cache-mode full\n.PP\nIn this mode all reads and writes are buffered to and from disk.\nWhen data is read from the remote this is buffered to disk as well.\n.PP\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n.PP\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file.\nThese files will appear to be their full size in the cache, but they\nwill be sparse files with only the data that has been downloaded present\nin them.\n.PP\nThis mode should support all normal file system operations and is\notherwise identical to \\f[C]--vfs-cache-mode\\f[R] writes.\n.PP\nWhen reading a file rclone will read \\f[C]--buffer-size\\f[R] plus\n\\f[C]--vfs-read-ahead\\f[R] bytes ahead.\nThe \\f[C]--buffer-size\\f[R] is buffered in memory whereas the\n\\f[C]--vfs-read-ahead\\f[R] is buffered on disk.\n.PP\nWhen using this mode it is recommended that \\f[C]--buffer-size\\f[R] is\nnot set too large and \\f[C]--vfs-read-ahead\\f[R] is set large if\nrequired.\n.PP\n\\f[B]IMPORTANT\\f[R] not all file systems support sparse files.\nIn particular FAT/exFAT do not.\nRclone will perform very badly if the cache directory is on a filesystem\nwhich doesn\\[aq]t support sparse files and it will log an ERROR message\nif one is detected.\n.SS Fingerprinting\n.PP\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file.\nFingerprints are made from:\n.IP \\[bu] 2\nsize\n.IP \\[bu] 2\nmodification time\n.IP \\[bu] 2\nhash\n.PP\nwhere available on an object.\n.PP\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n.PP\nFor example \\f[C]hash\\f[R] is slow with the \\f[C]local\\f[R] and\n\\f[C]sftp\\f[R] backends as they have to read the entire file and hash\nit, and \\f[C]modtime\\f[R] is slow with the \\f[C]s3\\f[R],\n\\f[C]swift\\f[R], \\f[C]ftp\\f[R] and \\f[C]qinqstor\\f[R] backends because\nthey need to do an extra API call to fetch it.\n.PP\nIf you use the \\f[C]--vfs-fast-fingerprint\\f[R] flag then rclone will\nnot include the slow operations in the fingerprint.\nThis makes the fingerprinting less accurate but much faster and will\nimprove the opening time of cached files.\n.PP\nIf you are running a vfs cache over \\f[C]local\\f[R], \\f[C]s3\\f[R] or\n\\f[C]swift\\f[R] backends then using this flag is recommended.\n.PP\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n.SS VFS Chunked Reading\n.PP\nWhen rclone reads files from a remote it reads them in chunks.\nThis means that rather than requesting the whole file rclone reads the\nchunk specified.\nThis can reduce the used download quota for some remotes by requesting\nonly chunks from the remote that are actually read, at the cost of an\nincreased number of requests.\n.PP\nThese flags control the chunking:\n.IP\n.nf\n\\f[C]\n--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once\n\\f[R]\n.fi\n.PP\nThe chunking behaves differently depending on the\n\\f[C]--vfs-read-chunk-streams\\f[R] parameter.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] == 0\n.PP\nRclone will start reading a chunk of size\n\\f[C]--vfs-read-chunk-size\\f[R], and then double the size for each read.\nWhen \\f[C]--vfs-read-chunk-size-limit\\f[R] is specified, and greater\nthan \\f[C]--vfs-read-chunk-size\\f[R], the chunk size for each open file\nwill get doubled only until the specified value is reached.\nIf the value is \\[dq]off\\[dq], which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n.PP\nWith \\f[C]--vfs-read-chunk-size 100M\\f[R] and\n\\f[C]--vfs-read-chunk-size-limit 0\\f[R] the following parts will be\ndownloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen \\f[C]--vfs-read-chunk-size-limit 500M\\f[R] is specified, the result\nwould be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so\non.\n.PP\nSetting \\f[C]--vfs-read-chunk-size\\f[R] to \\f[C]0\\f[R] or \\[dq]off\\[dq]\ndisables chunked reading.\n.PP\nThe chunks will not be buffered in memory.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] > 0\n.PP\nRclone reads \\f[C]--vfs-read-chunk-streams\\f[R] chunks of size\n\\f[C]--vfs-read-chunk-size\\f[R] concurrently.\nThe size for each read will stay constant.\n.PP\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n.PP\nSome experimentation will be needed to find the optimum values of\n\\f[C]--vfs-read-chunk-size\\f[R] and \\f[C]--vfs-read-chunk-streams\\f[R]\nas these will depend on the backend in use and the latency to the\nbackend.\n.PP\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be \\f[C]--vfs-read-chunk-streams 16\\f[R] and\n\\f[C]--vfs-read-chunk-size 4M\\f[R].\nIn testing with AWS S3 the performance scaled roughly as the\n\\f[C]--vfs-read-chunk-streams\\f[R] setting.\n.PP\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more \\f[C]--vfs-read-chunk-streams\\f[R] in\norder to get the throughput.\n.SS VFS Performance\n.PP\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons.\nSee also the chunked reading feature.\n.PP\nIn particular S3 and Swift benefit hugely from the\n\\f[C]--no-modtime\\f[R] flag (or use \\f[C]--use-server-modtime\\f[R] for a\nslightly different effect) as each read of the modification time takes a\ntransaction.\n.IP\n.nf\n\\f[C]\n--no-checksum     Don\\[aq]t compare checksums on up/download.\n--no-modtime      Don\\[aq]t read/write the modification time (can speed things up).\n--no-seek         Don\\[aq]t allow seeking in files.\n--read-only       Only allow read-only access.\n\\f[R]\n.fi\n.PP\nSometimes rclone is delivered reads or writes out of order.\nRather than seeking rclone will wait a short time for the in sequence\nread or write to come in.\nThese flags only come into effect when not using an on disk cache file.\n.IP\n.nf\n\\f[C]\n--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\\f[R]\n.fi\n.PP\nWhen using VFS write caching (\\f[C]--vfs-cache-mode\\f[R] with value\nwrites or full), the global flag \\f[C]--transfers\\f[R] can be set to\nadjust the number of parallel uploads of modified files from the cache\n(the related global flag \\f[C]--checkers\\f[R] has no effect on the VFS).\n.IP\n.nf\n\\f[C]\n--transfers int  Number of file transfers to run in parallel (default 4)\n\\f[R]\n.fi\n.SS VFS Case Sensitivity\n.PP\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n.PP\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery.\nIt is not allowed for two files in the same directory to differ only by\ncase.\n.PP\nUsually file systems on macOS are case-insensitive.\nIt is possible to make macOS file systems case-sensitive but that is not\nthe default.\n.PP\nThe \\f[C]--vfs-case-insensitive\\f[R] VFS flag controls how rclone\nhandles these two cases.\nIf its value is \\[dq]false\\[dq], rclone passes file names to the remote\nas-is.\nIf the flag is \\[dq]true\\[dq] (or appears without a value on the command\nline), rclone may perform a \\[dq]fixup\\[dq] as explained below.\n.PP\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote.\nIf an argument refers to an existing file with exactly the same name,\nthen the case of the existing file on the disk will be used.\nHowever, if a file name with exactly the same name is not found but a\nname differing only by case exists, rclone will transparently fixup the\nname.\nThis fixup happens only when an existing file is requested.\nCase sensitivity of file names created anew by rclone is controlled by\nthe underlying remote.\n.PP\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source).\nThe flag controls whether \\[dq]fixup\\[dq] is performed to satisfy the\ntarget.\n.PP\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \\[dq]true\\[dq] on\nWindows and macOS, \\[dq]false\\[dq] otherwise.\nIf the flag is provided without a value, then it is \\[dq]true\\[dq].\n.PP\nThe \\f[C]--no-unicode-normalization\\f[R] flag controls whether a similar\n\\[dq]fixup\\[dq] is performed for filenames that differ but are\ncanonically\nequivalent (https://en.wikipedia.org/wiki/Unicode_equivalence) with\nrespect to unicode.\nUnicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms.\nIt is therefore highly recommended to keep the default of\n\\f[C]false\\f[R] on macOS, to avoid encoding compatibility issues.\n.PP\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n\\f[C]--vfs-block-norm-dupes\\f[R] flag allows hiding these duplicates.\nThis comes with a performance tradeoff, as rclone will have to scan the\nentire directory for duplicates when listing a directory.\nFor this reason, it is recommended to leave this disabled if not needed.\nHowever, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same\nfilename, an odd situation will occur: both versions of the file will be\nvisible in the mount, and both will appear to be editable, however,\nediting either version will actually result in only the NFD version\ngetting edited under the hood.\n\\f[C]--vfs-block- norm-dupes\\f[R] prevents this confusion by detecting\nthis scenario, hiding the duplicates, and logging an error, similar to\nhow this is handled in \\f[C]rclone sync\\f[R].\n.SS VFS Disk Options\n.PP\nThis flag allows you to manually set the statistics about the filing\nsystem.\nIt can be useful when those statistics cannot be read correctly\nautomatically.\n.IP\n.nf\n\\f[C]\n--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\\f[R]\n.fi\n.SS Alternate report of used bytes\n.PP\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running \\f[C]df\\f[R]\non the filesystem, then pass the flag \\f[C]--vfs-used-is-size\\f[R] to\nrclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to\n\\f[C]rclone size\\f[R] and compute the total used space itself.\n.PP\n\\f[I]WARNING.\\f[R] Contrary to \\f[C]rclone size\\f[R], this flag ignores\nfilters so that the result is accurate.\nHowever, this is very inefficient and may cost lots of API calls\nresulting in extra charges.\nUse it as a last resort and only with caching.\n.IP\n.nf\n\\f[C]\nrclone serve docker [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --allow-non-empty                        Allow mounting over a non-empty directory (not supported on Windows)\n      --allow-other                            Allow access to other users (not supported on Windows)\n      --allow-root                             Allow access to root user (not supported on Windows)\n      --async-read                             Use asynchronous reads (not supported on Windows) (default true)\n      --attr-timeout Duration                  Time for which file/directory attributes are cached (default 1s)\n      --base-dir string                        Base directory for volumes (default \\[dq]/var/lib/docker-volumes/rclone\\[dq])\n      --daemon                                 Run mount in background and exit parent process (as background output is suppressed, use --log-file with --log-format=pid,... to monitor) (not supported on Windows)\n      --daemon-timeout Duration                Time limit for rclone to respond to kernel (not supported on Windows) (default 0s)\n      --daemon-wait Duration                   Time to wait for ready mount from daemon (maximum time on Linux, constant sleep time on OSX/BSD) (not supported on Windows) (default 1m0s)\n      --debug-fuse                             Debug the FUSE internals - needs -v\n      --default-permissions                    Makes kernel enforce access control based on the file mode (not supported on Windows)\n      --devname string                         Set the device name - default is remote:path\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --direct-io                              Use Direct IO, disables caching of data\n      --file-perms FileMode                    File permissions (default 666)\n      --forget-state                           Skip restoring previous state\n      --fuse-flag stringArray                  Flags or arguments to be passed direct to libfuse/WinFsp (repeat if required)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for docker\n      --max-read-ahead SizeSuffix              The number of bytes that can be prefetched for sequential reads (not supported on Windows) (default 128Ki)\n      --mount-case-insensitive Tristate        Tell the OS the mount is case insensitive (true) or sensitive (false) regardless of the backend (auto) (default unset)\n      --network-mode                           Mount as remote network drive, instead of fixed disk drive (supported on Windows only)\n      --no-checksum                            Don\\[aq]t compare checksums on up/download\n      --no-modtime                             Don\\[aq]t read/write the modification time (can speed things up)\n      --no-seek                                Don\\[aq]t allow seeking in files\n      --no-spec                                Do not write spec file\n      --noappledouble                          Ignore Apple Double (._) and .DS_Store files (supported on OSX only) (default true)\n      --noapplexattr                           Ignore all \\[dq]com.apple.*\\[dq] extended attributes (supported on OSX only)\n  -o, --option stringArray                     Option for libfuse/WinFsp (repeat if required)\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --socket-addr string                     Address <host:port> or absolute path (default: /run/docker/plugins/rclone.sock)\n      --socket-gid int                         GID for unix socket (default: current process GID) (default 1000)\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (\\[aq]off\\[aq] is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n      --volname string                         Set the volume name (supported on Windows and OSX only)\n      --write-back-cache                       Makes kernel buffer writes before sending them to rclone (without this, writethrough caching is used) (not supported on Windows)\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone serve (https://rclone.org/commands/rclone_serve/) - Serve a\nremote over a protocol.\n.SH rclone serve ftp\n.PP\nServe remote:path over FTP.\n.SS Synopsis\n.PP\nRun a basic FTP server to serve a remote over FTP protocol.\nThis can be viewed with a FTP client or you can make a remote of type\nFTP to read and write it.\n.SS Server options\n.PP\nUse --addr to specify which IP address and port the server should listen\non, e.g.\n--addr 1.2.3.4:8000 or --addr :8080 to listen to all IPs.\nBy default it only listens on localhost.\nYou can use port :0 to let the OS choose an available port.\n.PP\nIf you set --addr to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.\n.SS Authentication\n.PP\nBy default this will serve files without needing a login.\n.PP\nYou can set a single username and password with the --user and --pass\nflags.\n.SS VFS - Virtual File System\n.PP\nThis command uses the VFS layer.\nThis adapts the cloud storage objects that rclone uses into something\nwhich looks much more like a disk filing system.\n.PP\nCloud storage objects have lots of properties which aren\\[aq]t like disk\nfiles - you can\\[aq]t extend them or write to the middle of them, so the\nVFS layer has to deal with that.\nBecause there is no one right way of doing this there are various\noptions explained below.\n.PP\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n.SS VFS Directory Cache\n.PP\nUsing the \\f[C]--dir-cache-time\\f[R] flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n.IP\n.nf\n\\f[C]\n--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\\f[R]\n.fi\n.PP\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges.\nIf the backend supports polling, changes will be picked up within the\npolling interval.\n.PP\nYou can send a \\f[C]SIGHUP\\f[R] signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.\nAssuming only one rclone instance is running, you can reset the cache\nlike this:\n.IP\n.nf\n\\f[C]\nkill -SIGHUP $(pidof rclone)\n\\f[R]\n.fi\n.PP\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget\n\\f[R]\n.fi\n.PP\nOr individual files or directories:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget file=path/to/file dir=path/to/dir\n\\f[R]\n.fi\n.SS VFS File Buffering\n.PP\nThe \\f[C]--buffer-size\\f[R] flag determines the amount of memory, that\nwill be used to buffer data in advance.\n.PP\nEach open file will try to keep the specified amount of data in memory\nat all times.\nThe buffered data is bound to one open file and won\\[aq]t be shared.\n.PP\nThis flag is a upper limit for the used memory per open file.\nThe buffer will only use memory for data that is downloaded but not not\nyet read.\nIf the buffer is empty, only a small amount of memory will be used.\n.PP\nThe maximum memory used by rclone for buffering can be up to\n\\f[C]--buffer-size * open files\\f[R].\n.SS VFS File Caching\n.PP\nThese flags control the VFS file caching options.\nFile caching is necessary to make the VFS layer appear compatible with a\nnormal file system.\nIt can be disabled at the cost of some compatibility.\n.PP\nFor example you\\[aq]ll need to enable VFS caching if you want to read\nand write simultaneously to a file.\nSee below for more details.\n.PP\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n.IP\n.nf\n\\f[C]\n--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\\f[R]\n.fi\n.PP\nIf run with \\f[C]-vv\\f[R] rclone will print the location of the file\ncache.\nThe files are stored in the user cache file area which is OS dependent\nbut can be controlled with \\f[C]--cache-dir\\f[R] or setting the\nappropriate environment variable.\n.PP\nThe cache has 4 different modes selected by \\f[C]--vfs-cache-mode\\f[R].\nThe higher the cache mode the more compatible rclone becomes at the cost\nof using disk space.\n.PP\nNote that files are written back to the remote only when they are closed\nand if they haven\\[aq]t been accessed for \\f[C]--vfs-write-back\\f[R]\nseconds.\nIf rclone is quit or dies with files that haven\\[aq]t been uploaded,\nthese will be uploaded next time rclone is run with the same flags.\n.PP\nIf using \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] note that the cache may exceed these\nquotas for two reasons.\nFirstly because it is only checked every\n\\f[C]--vfs-cache-poll-interval\\f[R].\nSecondly because open files cannot be evicted from the cache.\nWhen \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] is exceeded, rclone will attempt to\nevict the least accessed files from the cache first.\nrclone will start with files that haven\\[aq]t been accessed for the\nlongest.\nThis cache flushing strategy is efficient and more relevant files are\nlikely to remain cached.\n.PP\nThe \\f[C]--vfs-cache-max-age\\f[R] will evict files from the cache after\nthe set time since last access has passed.\nThe default value of 1 hour will start evicting files from cache that\nhaven\\[aq]t been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting.\nSpecify the time with standard notation, s, m, h, d, w .\n.PP\nYou \\f[B]should not\\f[R] run two copies of rclone using the same VFS\ncache with the same or overlapping remotes if using\n\\f[C]--vfs-cache-mode > off\\f[R].\nThis can potentially cause data corruption if you do.\nYou can work around this by giving each rclone its own cache hierarchy\nwith \\f[C]--cache-dir\\f[R].\nYou don\\[aq]t need to worry about this if the remotes in use don\\[aq]t\noverlap.\n.SS --vfs-cache-mode off\n.PP\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n.PP\nThis will mean some operations are not possible\n.IP \\[bu] 2\nFiles can\\[aq]t be opened for both read AND write\n.IP \\[bu] 2\nFiles opened for write can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles open for read with O_TRUNC will be opened write only\n.IP \\[bu] 2\nFiles open for write only will behave as if O_TRUNC was supplied\n.IP \\[bu] 2\nOpen modes O_APPEND, O_TRUNC are ignored\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode minimal\n.PP\nThis is very similar to \\[dq]off\\[dq] except that files opened for read\nAND write will be buffered to disk.\nThis means that files opened for write will be a lot more compatible,\nbut uses the minimal disk space.\n.PP\nThese operations are not possible\n.IP \\[bu] 2\nFiles opened for write only can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles opened for write only will ignore O_APPEND, O_TRUNC\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode writes\n.PP\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n.PP\nThis mode should support all normal file system operations.\n.PP\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n.SS --vfs-cache-mode full\n.PP\nIn this mode all reads and writes are buffered to and from disk.\nWhen data is read from the remote this is buffered to disk as well.\n.PP\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n.PP\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file.\nThese files will appear to be their full size in the cache, but they\nwill be sparse files with only the data that has been downloaded present\nin them.\n.PP\nThis mode should support all normal file system operations and is\notherwise identical to \\f[C]--vfs-cache-mode\\f[R] writes.\n.PP\nWhen reading a file rclone will read \\f[C]--buffer-size\\f[R] plus\n\\f[C]--vfs-read-ahead\\f[R] bytes ahead.\nThe \\f[C]--buffer-size\\f[R] is buffered in memory whereas the\n\\f[C]--vfs-read-ahead\\f[R] is buffered on disk.\n.PP\nWhen using this mode it is recommended that \\f[C]--buffer-size\\f[R] is\nnot set too large and \\f[C]--vfs-read-ahead\\f[R] is set large if\nrequired.\n.PP\n\\f[B]IMPORTANT\\f[R] not all file systems support sparse files.\nIn particular FAT/exFAT do not.\nRclone will perform very badly if the cache directory is on a filesystem\nwhich doesn\\[aq]t support sparse files and it will log an ERROR message\nif one is detected.\n.SS Fingerprinting\n.PP\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file.\nFingerprints are made from:\n.IP \\[bu] 2\nsize\n.IP \\[bu] 2\nmodification time\n.IP \\[bu] 2\nhash\n.PP\nwhere available on an object.\n.PP\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n.PP\nFor example \\f[C]hash\\f[R] is slow with the \\f[C]local\\f[R] and\n\\f[C]sftp\\f[R] backends as they have to read the entire file and hash\nit, and \\f[C]modtime\\f[R] is slow with the \\f[C]s3\\f[R],\n\\f[C]swift\\f[R], \\f[C]ftp\\f[R] and \\f[C]qinqstor\\f[R] backends because\nthey need to do an extra API call to fetch it.\n.PP\nIf you use the \\f[C]--vfs-fast-fingerprint\\f[R] flag then rclone will\nnot include the slow operations in the fingerprint.\nThis makes the fingerprinting less accurate but much faster and will\nimprove the opening time of cached files.\n.PP\nIf you are running a vfs cache over \\f[C]local\\f[R], \\f[C]s3\\f[R] or\n\\f[C]swift\\f[R] backends then using this flag is recommended.\n.PP\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n.SS VFS Chunked Reading\n.PP\nWhen rclone reads files from a remote it reads them in chunks.\nThis means that rather than requesting the whole file rclone reads the\nchunk specified.\nThis can reduce the used download quota for some remotes by requesting\nonly chunks from the remote that are actually read, at the cost of an\nincreased number of requests.\n.PP\nThese flags control the chunking:\n.IP\n.nf\n\\f[C]\n--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once\n\\f[R]\n.fi\n.PP\nThe chunking behaves differently depending on the\n\\f[C]--vfs-read-chunk-streams\\f[R] parameter.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] == 0\n.PP\nRclone will start reading a chunk of size\n\\f[C]--vfs-read-chunk-size\\f[R], and then double the size for each read.\nWhen \\f[C]--vfs-read-chunk-size-limit\\f[R] is specified, and greater\nthan \\f[C]--vfs-read-chunk-size\\f[R], the chunk size for each open file\nwill get doubled only until the specified value is reached.\nIf the value is \\[dq]off\\[dq], which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n.PP\nWith \\f[C]--vfs-read-chunk-size 100M\\f[R] and\n\\f[C]--vfs-read-chunk-size-limit 0\\f[R] the following parts will be\ndownloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen \\f[C]--vfs-read-chunk-size-limit 500M\\f[R] is specified, the result\nwould be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so\non.\n.PP\nSetting \\f[C]--vfs-read-chunk-size\\f[R] to \\f[C]0\\f[R] or \\[dq]off\\[dq]\ndisables chunked reading.\n.PP\nThe chunks will not be buffered in memory.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] > 0\n.PP\nRclone reads \\f[C]--vfs-read-chunk-streams\\f[R] chunks of size\n\\f[C]--vfs-read-chunk-size\\f[R] concurrently.\nThe size for each read will stay constant.\n.PP\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n.PP\nSome experimentation will be needed to find the optimum values of\n\\f[C]--vfs-read-chunk-size\\f[R] and \\f[C]--vfs-read-chunk-streams\\f[R]\nas these will depend on the backend in use and the latency to the\nbackend.\n.PP\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be \\f[C]--vfs-read-chunk-streams 16\\f[R] and\n\\f[C]--vfs-read-chunk-size 4M\\f[R].\nIn testing with AWS S3 the performance scaled roughly as the\n\\f[C]--vfs-read-chunk-streams\\f[R] setting.\n.PP\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more \\f[C]--vfs-read-chunk-streams\\f[R] in\norder to get the throughput.\n.SS VFS Performance\n.PP\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons.\nSee also the chunked reading feature.\n.PP\nIn particular S3 and Swift benefit hugely from the\n\\f[C]--no-modtime\\f[R] flag (or use \\f[C]--use-server-modtime\\f[R] for a\nslightly different effect) as each read of the modification time takes a\ntransaction.\n.IP\n.nf\n\\f[C]\n--no-checksum     Don\\[aq]t compare checksums on up/download.\n--no-modtime      Don\\[aq]t read/write the modification time (can speed things up).\n--no-seek         Don\\[aq]t allow seeking in files.\n--read-only       Only allow read-only access.\n\\f[R]\n.fi\n.PP\nSometimes rclone is delivered reads or writes out of order.\nRather than seeking rclone will wait a short time for the in sequence\nread or write to come in.\nThese flags only come into effect when not using an on disk cache file.\n.IP\n.nf\n\\f[C]\n--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\\f[R]\n.fi\n.PP\nWhen using VFS write caching (\\f[C]--vfs-cache-mode\\f[R] with value\nwrites or full), the global flag \\f[C]--transfers\\f[R] can be set to\nadjust the number of parallel uploads of modified files from the cache\n(the related global flag \\f[C]--checkers\\f[R] has no effect on the VFS).\n.IP\n.nf\n\\f[C]\n--transfers int  Number of file transfers to run in parallel (default 4)\n\\f[R]\n.fi\n.SS VFS Case Sensitivity\n.PP\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n.PP\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery.\nIt is not allowed for two files in the same directory to differ only by\ncase.\n.PP\nUsually file systems on macOS are case-insensitive.\nIt is possible to make macOS file systems case-sensitive but that is not\nthe default.\n.PP\nThe \\f[C]--vfs-case-insensitive\\f[R] VFS flag controls how rclone\nhandles these two cases.\nIf its value is \\[dq]false\\[dq], rclone passes file names to the remote\nas-is.\nIf the flag is \\[dq]true\\[dq] (or appears without a value on the command\nline), rclone may perform a \\[dq]fixup\\[dq] as explained below.\n.PP\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote.\nIf an argument refers to an existing file with exactly the same name,\nthen the case of the existing file on the disk will be used.\nHowever, if a file name with exactly the same name is not found but a\nname differing only by case exists, rclone will transparently fixup the\nname.\nThis fixup happens only when an existing file is requested.\nCase sensitivity of file names created anew by rclone is controlled by\nthe underlying remote.\n.PP\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source).\nThe flag controls whether \\[dq]fixup\\[dq] is performed to satisfy the\ntarget.\n.PP\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \\[dq]true\\[dq] on\nWindows and macOS, \\[dq]false\\[dq] otherwise.\nIf the flag is provided without a value, then it is \\[dq]true\\[dq].\n.PP\nThe \\f[C]--no-unicode-normalization\\f[R] flag controls whether a similar\n\\[dq]fixup\\[dq] is performed for filenames that differ but are\ncanonically\nequivalent (https://en.wikipedia.org/wiki/Unicode_equivalence) with\nrespect to unicode.\nUnicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms.\nIt is therefore highly recommended to keep the default of\n\\f[C]false\\f[R] on macOS, to avoid encoding compatibility issues.\n.PP\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n\\f[C]--vfs-block-norm-dupes\\f[R] flag allows hiding these duplicates.\nThis comes with a performance tradeoff, as rclone will have to scan the\nentire directory for duplicates when listing a directory.\nFor this reason, it is recommended to leave this disabled if not needed.\nHowever, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same\nfilename, an odd situation will occur: both versions of the file will be\nvisible in the mount, and both will appear to be editable, however,\nediting either version will actually result in only the NFD version\ngetting edited under the hood.\n\\f[C]--vfs-block- norm-dupes\\f[R] prevents this confusion by detecting\nthis scenario, hiding the duplicates, and logging an error, similar to\nhow this is handled in \\f[C]rclone sync\\f[R].\n.SS VFS Disk Options\n.PP\nThis flag allows you to manually set the statistics about the filing\nsystem.\nIt can be useful when those statistics cannot be read correctly\nautomatically.\n.IP\n.nf\n\\f[C]\n--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\\f[R]\n.fi\n.SS Alternate report of used bytes\n.PP\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running \\f[C]df\\f[R]\non the filesystem, then pass the flag \\f[C]--vfs-used-is-size\\f[R] to\nrclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to\n\\f[C]rclone size\\f[R] and compute the total used space itself.\n.PP\n\\f[I]WARNING.\\f[R] Contrary to \\f[C]rclone size\\f[R], this flag ignores\nfilters so that the result is accurate.\nHowever, this is very inefficient and may cost lots of API calls\nresulting in extra charges.\nUse it as a last resort and only with caching.\n.SS Auth Proxy\n.PP\nIf you supply the parameter \\f[C]--auth-proxy /path/to/program\\f[R] then\nrclone will use that program to generate backends on the fly which then\nare used to authenticate incoming requests.\nThis uses a simple JSON based protocol with input on STDIN and output on\nSTDOUT.\n.PP\n\\f[B]PLEASE NOTE:\\f[R] \\f[C]--auth-proxy\\f[R] and\n\\f[C]--authorized-keys\\f[R] cannot be used together, if\n\\f[C]--auth-proxy\\f[R] is set the authorized keys option will be\nignored.\n.PP\nThere is an example program\nbin/test_proxy.py (https://github.com/rclone/rclone/blob/master/bin/test_proxy.py)\nin the rclone source code.\n.PP\nThe program\\[aq]s job is to take a \\f[C]user\\f[R] and \\f[C]pass\\f[R] on\nthe input and turn those into the config for a backend on STDOUT in JSON\nformat.\nThis config will have any default parameters for the backend added, but\nit won\\[aq]t use configuration from environment variables or command\nline options - it is the job of the proxy program to make a complete\nconfig.\n.PP\nThis config generated must have this extra parameter - \\f[C]_root\\f[R] -\nroot to use for the backend\n.PP\nAnd it may have this parameter - \\f[C]_obscure\\f[R] - comma separated\nstrings for parameters to obscure\n.PP\nIf password authentication was used by the client, input to the proxy\nprocess (on STDIN) would look similar to this:\n.IP\n.nf\n\\f[C]\n{\n    \\[dq]user\\[dq]: \\[dq]me\\[dq],\n    \\[dq]pass\\[dq]: \\[dq]mypassword\\[dq]\n}\n\\f[R]\n.fi\n.PP\nIf public-key authentication was used by the client, input to the proxy\nprocess (on STDIN) would look similar to this:\n.IP\n.nf\n\\f[C]\n{\n    \\[dq]user\\[dq]: \\[dq]me\\[dq],\n    \\[dq]public_key\\[dq]: \\[dq]AAAAB3NzaC1yc2EAAAADAQABAAABAQDuwESFdAe14hVS6omeyX7edc...JQdf\\[dq]\n}\n\\f[R]\n.fi\n.PP\nAnd as an example return this on STDOUT\n.IP\n.nf\n\\f[C]\n{\n    \\[dq]type\\[dq]: \\[dq]sftp\\[dq],\n    \\[dq]_root\\[dq]: \\[dq]\\[dq],\n    \\[dq]_obscure\\[dq]: \\[dq]pass\\[dq],\n    \\[dq]user\\[dq]: \\[dq]me\\[dq],\n    \\[dq]pass\\[dq]: \\[dq]mypassword\\[dq],\n    \\[dq]host\\[dq]: \\[dq]sftp.example.com\\[dq]\n}\n\\f[R]\n.fi\n.PP\nThis would mean that an SFTP backend would be created on the fly for the\n\\f[C]user\\f[R] and \\f[C]pass\\f[R]/\\f[C]public_key\\f[R] returned in the\noutput to the host given.\nNote that since \\f[C]_obscure\\f[R] is set to \\f[C]pass\\f[R], rclone will\nobscure the \\f[C]pass\\f[R] parameter before creating the backend (which\nis required for sftp backends).\n.PP\nThe program can manipulate the supplied \\f[C]user\\f[R] in any way, for\nexample to make proxy to many different sftp backends, you could make\nthe \\f[C]user\\f[R] be \\f[C]user\\[at]example.com\\f[R] and then set the\n\\f[C]host\\f[R] to \\f[C]example.com\\f[R] in the output and the user to\n\\f[C]user\\f[R].\nFor security you\\[aq]d probably want to restrict the \\f[C]host\\f[R] to a\nlimited list.\n.PP\nNote that an internal cache is keyed on \\f[C]user\\f[R] so only use that\nfor configuration, don\\[aq]t use \\f[C]pass\\f[R] or \\f[C]public_key\\f[R].\nThis also means that if a user\\[aq]s password or public-key is changed\nthe cache will need to expire (which takes 5 mins) before it takes\neffect.\n.PP\nThis can be used to build general purpose proxies to any kind of backend\nthat rclone supports.\n.IP\n.nf\n\\f[C]\nrclone serve ftp remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --addr string                            IPaddress:Port or :Port to bind server to (default \\[dq]localhost:2121\\[dq])\n      --auth-proxy string                      A program to use to create the backend from the auth\n      --cert string                            TLS PEM key (concatenation of certificate and CA certificate)\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --file-perms FileMode                    File permissions (default 666)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for ftp\n      --key string                             TLS PEM Private key\n      --no-checksum                            Don\\[aq]t compare checksums on up/download\n      --no-modtime                             Don\\[aq]t read/write the modification time (can speed things up)\n      --no-seek                                Don\\[aq]t allow seeking in files\n      --pass string                            Password for authentication (empty value allow every password)\n      --passive-port string                    Passive port range to use (default \\[dq]30000-32000\\[dq])\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --public-ip string                       Public IP address to advertise for passive connections\n      --read-only                              Only allow read-only access\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --user string                            User name for authentication (default \\[dq]anonymous\\[dq])\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (\\[aq]off\\[aq] is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone serve (https://rclone.org/commands/rclone_serve/) - Serve a\nremote over a protocol.\n.SH rclone serve http\n.PP\nServe the remote over HTTP.\n.SS Synopsis\n.PP\nRun a basic web server to serve a remote over HTTP.\nThis can be viewed in a web browser or you can make a remote of type\nhttp read from it.\n.PP\nYou can use the filter flags (e.g.\n\\f[C]--include\\f[R], \\f[C]--exclude\\f[R]) to control what is served.\n.PP\nThe server will log errors.\nUse \\f[C]-v\\f[R] to see access logs.\n.PP\n\\f[C]--bwlimit\\f[R] will be respected for file transfers.\nUse \\f[C]--stats\\f[R] to control the stats printing.\n.SS Server options\n.PP\nUse \\f[C]--addr\\f[R] to specify which IP address and port the server\nshould listen on, eg \\f[C]--addr 1.2.3.4:8000\\f[R] or\n\\f[C]--addr :8080\\f[R] to listen to all IPs.\nBy default it only listens on localhost.\nYou can use port :0 to let the OS choose an available port.\n.PP\nIf you set \\f[C]--addr\\f[R] to listen on a public or LAN accessible IP\naddress then using Authentication is advised - see the next section for\ninfo.\n.PP\nYou can use a unix socket by setting the url to\n\\f[C]unix:///path/to/socket\\f[R] or just by using an absolute path name.\nNote that unix sockets bypass the authentication - this is expected to\nbe done with file system permissions.\n.PP\n\\f[C]--addr\\f[R] may be repeated to listen on multiple\nIPs/ports/sockets.\nSocket activation, described further below, can also be used to\naccomplish the same.\n.PP\n\\f[C]--server-read-timeout\\f[R] and \\f[C]--server-write-timeout\\f[R] can\nbe used to control the timeouts on the server.\nNote that this is the total time for a transfer.\n.PP\n\\f[C]--max-header-bytes\\f[R] controls the maximum number of bytes the\nserver will accept in the HTTP header.\n.PP\n\\f[C]--baseurl\\f[R] controls the URL prefix that rclone serves from.\nBy default rclone will serve from the root.\nIf you used \\f[C]--baseurl \\[dq]/rclone\\[dq]\\f[R] then rclone would\nserve from a URL starting with \\[dq]/rclone/\\[dq].\nThis is useful if you wish to proxy rclone serve.\nRclone automatically inserts leading and trailing \\[dq]/\\[dq] on\n\\f[C]--baseurl\\f[R], so \\f[C]--baseurl \\[dq]rclone\\[dq]\\f[R],\n\\f[C]--baseurl \\[dq]/rclone\\[dq]\\f[R] and\n\\f[C]--baseurl \\[dq]/rclone/\\[dq]\\f[R] are all treated identically.\n.SS TLS (SSL)\n.PP\nBy default this will serve over http.\nIf you want you can serve over https.\nYou will need to supply the \\f[C]--cert\\f[R] and \\f[C]--key\\f[R] flags.\nIf you wish to do client side certificate validation then you will need\nto supply \\f[C]--client-ca\\f[R] also.\n.PP\n\\f[C]--cert\\f[R] should be a either a PEM encoded certificate or a\nconcatenation of that with the CA certificate.\n\\f[C]--key\\f[R] should be the PEM encoded private key and\n\\f[C]--client-ca\\f[R] should be the PEM encoded client certificate\nauthority certificate.\n.PP\n\\f[C]--min-tls-version\\f[R] is minimum TLS version that is acceptable.\nValid values are \\[dq]tls1.0\\[dq], \\[dq]tls1.1\\[dq], \\[dq]tls1.2\\[dq]\nand \\[dq]tls1.3\\[dq] (default \\[dq]tls1.0\\[dq]).\n.SS Socket activation\n.PP\nInstead of the listening addresses specified above, rclone will listen\nto all FDs passed by the service manager, if any (and ignore any\narguments passed by --addr\\[ga]).\n.PP\nThis allows rclone to be a socket-activated service.\nIt can be configured with .socket and .service unit files as described\nin\nhttps://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html\n.PP\nSocket activation can be tested ad-hoc with the\n\\f[C]systemd-socket-activate\\f[R]command\n.IP\n.nf\n\\f[C]\n   systemd-socket-activate -l 8000 -- rclone serve\n\\f[R]\n.fi\n.PP\nThis will socket-activate rclone on the first connection to port 8000\nover TCP.\n### Template\n.PP\n\\f[C]--template\\f[R] allows a user to specify a custom markup template\nfor HTTP and WebDAV serve functions.\nThe server exports the following markup to be used within the template\nto server pages:\n.PP\n.TS\ntab(@);\nlw(35.0n) lw(35.0n).\nT{\nParameter\nT}@T{\nDescription\nT}\n_\nT{\n\\&.Name\nT}@T{\nThe full path of a file/directory.\nT}\nT{\n\\&.Title\nT}@T{\nDirectory listing of .Name\nT}\nT{\n\\&.Sort\nT}@T{\nThe current sort used.\nThis is changeable via ?sort= parameter\nT}\nT{\nT}@T{\nSort Options: namedirfirst,name,size,time (default namedirfirst)\nT}\nT{\n\\&.Order\nT}@T{\nThe current ordering used.\nThis is changeable via ?order= parameter\nT}\nT{\nT}@T{\nOrder Options: asc,desc (default asc)\nT}\nT{\n\\&.Query\nT}@T{\nCurrently unused.\nT}\nT{\n\\&.Breadcrumb\nT}@T{\nAllows for creating a relative navigation\nT}\nT{\n-- .Link\nT}@T{\nThe relative to the root link of the Text.\nT}\nT{\n-- .Text\nT}@T{\nThe Name of the directory.\nT}\nT{\n\\&.Entries\nT}@T{\nInformation about a specific file/directory.\nT}\nT{\n-- .URL\nT}@T{\nThe \\[aq]url\\[aq] of an entry.\nT}\nT{\n-- .Leaf\nT}@T{\nCurrently same as \\[aq]URL\\[aq] but intended to be \\[aq]just\\[aq] the\nname.\nT}\nT{\n-- .IsDir\nT}@T{\nBoolean for if an entry is a directory or not.\nT}\nT{\n-- .Size\nT}@T{\nSize in Bytes of the entry.\nT}\nT{\n-- .ModTime\nT}@T{\nThe UTC timestamp of an entry.\nT}\n.TE\n.PP\nThe server also makes the following functions available so that they can\nbe used within the template.\nThese functions help extend the options for dynamic rendering of HTML.\nThey can be used to render HTML based on specific conditions.\n.PP\n.TS\ntab(@);\nlw(35.0n) lw(35.0n).\nT{\nFunction\nT}@T{\nDescription\nT}\n_\nT{\nafterEpoch\nT}@T{\nReturns the time since the epoch for the given time.\nT}\nT{\ncontains\nT}@T{\nChecks whether a given substring is present or not in a given string.\nT}\nT{\nhasPrefix\nT}@T{\nChecks whether the given string begins with the specified prefix.\nT}\nT{\nhasSuffix\nT}@T{\nChecks whether the given string end with the specified suffix.\nT}\n.TE\n.SS Authentication\n.PP\nBy default this will serve files without needing a login.\n.PP\nYou can either use an htpasswd file which can take lots of users, or set\na single username and password with the \\f[C]--user\\f[R] and\n\\f[C]--pass\\f[R] flags.\n.PP\nIf no static users are configured by either of the above methods, and\nclient certificates are required by the \\f[C]--client-ca\\f[R] flag\npassed to the server, the client certificate common name will be\nconsidered as the username.\n.PP\nUse \\f[C]--htpasswd /path/to/htpasswd\\f[R] to provide an htpasswd file.\nThis is in standard apache format and supports MD5, SHA1 and BCrypt for\nbasic authentication.\nBcrypt is recommended.\n.PP\nTo create an htpasswd file:\n.IP\n.nf\n\\f[C]\ntouch htpasswd\nhtpasswd -B htpasswd user\nhtpasswd -B htpasswd anotherUser\n\\f[R]\n.fi\n.PP\nThe password file can be updated while rclone is running.\n.PP\nUse \\f[C]--realm\\f[R] to set the authentication realm.\n.PP\nUse \\f[C]--salt\\f[R] to change the password hashing salt from the\ndefault.\n.SS VFS - Virtual File System\n.PP\nThis command uses the VFS layer.\nThis adapts the cloud storage objects that rclone uses into something\nwhich looks much more like a disk filing system.\n.PP\nCloud storage objects have lots of properties which aren\\[aq]t like disk\nfiles - you can\\[aq]t extend them or write to the middle of them, so the\nVFS layer has to deal with that.\nBecause there is no one right way of doing this there are various\noptions explained below.\n.PP\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n.SS VFS Directory Cache\n.PP\nUsing the \\f[C]--dir-cache-time\\f[R] flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n.IP\n.nf\n\\f[C]\n--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\\f[R]\n.fi\n.PP\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges.\nIf the backend supports polling, changes will be picked up within the\npolling interval.\n.PP\nYou can send a \\f[C]SIGHUP\\f[R] signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.\nAssuming only one rclone instance is running, you can reset the cache\nlike this:\n.IP\n.nf\n\\f[C]\nkill -SIGHUP $(pidof rclone)\n\\f[R]\n.fi\n.PP\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget\n\\f[R]\n.fi\n.PP\nOr individual files or directories:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget file=path/to/file dir=path/to/dir\n\\f[R]\n.fi\n.SS VFS File Buffering\n.PP\nThe \\f[C]--buffer-size\\f[R] flag determines the amount of memory, that\nwill be used to buffer data in advance.\n.PP\nEach open file will try to keep the specified amount of data in memory\nat all times.\nThe buffered data is bound to one open file and won\\[aq]t be shared.\n.PP\nThis flag is a upper limit for the used memory per open file.\nThe buffer will only use memory for data that is downloaded but not not\nyet read.\nIf the buffer is empty, only a small amount of memory will be used.\n.PP\nThe maximum memory used by rclone for buffering can be up to\n\\f[C]--buffer-size * open files\\f[R].\n.SS VFS File Caching\n.PP\nThese flags control the VFS file caching options.\nFile caching is necessary to make the VFS layer appear compatible with a\nnormal file system.\nIt can be disabled at the cost of some compatibility.\n.PP\nFor example you\\[aq]ll need to enable VFS caching if you want to read\nand write simultaneously to a file.\nSee below for more details.\n.PP\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n.IP\n.nf\n\\f[C]\n--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\\f[R]\n.fi\n.PP\nIf run with \\f[C]-vv\\f[R] rclone will print the location of the file\ncache.\nThe files are stored in the user cache file area which is OS dependent\nbut can be controlled with \\f[C]--cache-dir\\f[R] or setting the\nappropriate environment variable.\n.PP\nThe cache has 4 different modes selected by \\f[C]--vfs-cache-mode\\f[R].\nThe higher the cache mode the more compatible rclone becomes at the cost\nof using disk space.\n.PP\nNote that files are written back to the remote only when they are closed\nand if they haven\\[aq]t been accessed for \\f[C]--vfs-write-back\\f[R]\nseconds.\nIf rclone is quit or dies with files that haven\\[aq]t been uploaded,\nthese will be uploaded next time rclone is run with the same flags.\n.PP\nIf using \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] note that the cache may exceed these\nquotas for two reasons.\nFirstly because it is only checked every\n\\f[C]--vfs-cache-poll-interval\\f[R].\nSecondly because open files cannot be evicted from the cache.\nWhen \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] is exceeded, rclone will attempt to\nevict the least accessed files from the cache first.\nrclone will start with files that haven\\[aq]t been accessed for the\nlongest.\nThis cache flushing strategy is efficient and more relevant files are\nlikely to remain cached.\n.PP\nThe \\f[C]--vfs-cache-max-age\\f[R] will evict files from the cache after\nthe set time since last access has passed.\nThe default value of 1 hour will start evicting files from cache that\nhaven\\[aq]t been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting.\nSpecify the time with standard notation, s, m, h, d, w .\n.PP\nYou \\f[B]should not\\f[R] run two copies of rclone using the same VFS\ncache with the same or overlapping remotes if using\n\\f[C]--vfs-cache-mode > off\\f[R].\nThis can potentially cause data corruption if you do.\nYou can work around this by giving each rclone its own cache hierarchy\nwith \\f[C]--cache-dir\\f[R].\nYou don\\[aq]t need to worry about this if the remotes in use don\\[aq]t\noverlap.\n.SS --vfs-cache-mode off\n.PP\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n.PP\nThis will mean some operations are not possible\n.IP \\[bu] 2\nFiles can\\[aq]t be opened for both read AND write\n.IP \\[bu] 2\nFiles opened for write can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles open for read with O_TRUNC will be opened write only\n.IP \\[bu] 2\nFiles open for write only will behave as if O_TRUNC was supplied\n.IP \\[bu] 2\nOpen modes O_APPEND, O_TRUNC are ignored\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode minimal\n.PP\nThis is very similar to \\[dq]off\\[dq] except that files opened for read\nAND write will be buffered to disk.\nThis means that files opened for write will be a lot more compatible,\nbut uses the minimal disk space.\n.PP\nThese operations are not possible\n.IP \\[bu] 2\nFiles opened for write only can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles opened for write only will ignore O_APPEND, O_TRUNC\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode writes\n.PP\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n.PP\nThis mode should support all normal file system operations.\n.PP\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n.SS --vfs-cache-mode full\n.PP\nIn this mode all reads and writes are buffered to and from disk.\nWhen data is read from the remote this is buffered to disk as well.\n.PP\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n.PP\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file.\nThese files will appear to be their full size in the cache, but they\nwill be sparse files with only the data that has been downloaded present\nin them.\n.PP\nThis mode should support all normal file system operations and is\notherwise identical to \\f[C]--vfs-cache-mode\\f[R] writes.\n.PP\nWhen reading a file rclone will read \\f[C]--buffer-size\\f[R] plus\n\\f[C]--vfs-read-ahead\\f[R] bytes ahead.\nThe \\f[C]--buffer-size\\f[R] is buffered in memory whereas the\n\\f[C]--vfs-read-ahead\\f[R] is buffered on disk.\n.PP\nWhen using this mode it is recommended that \\f[C]--buffer-size\\f[R] is\nnot set too large and \\f[C]--vfs-read-ahead\\f[R] is set large if\nrequired.\n.PP\n\\f[B]IMPORTANT\\f[R] not all file systems support sparse files.\nIn particular FAT/exFAT do not.\nRclone will perform very badly if the cache directory is on a filesystem\nwhich doesn\\[aq]t support sparse files and it will log an ERROR message\nif one is detected.\n.SS Fingerprinting\n.PP\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file.\nFingerprints are made from:\n.IP \\[bu] 2\nsize\n.IP \\[bu] 2\nmodification time\n.IP \\[bu] 2\nhash\n.PP\nwhere available on an object.\n.PP\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n.PP\nFor example \\f[C]hash\\f[R] is slow with the \\f[C]local\\f[R] and\n\\f[C]sftp\\f[R] backends as they have to read the entire file and hash\nit, and \\f[C]modtime\\f[R] is slow with the \\f[C]s3\\f[R],\n\\f[C]swift\\f[R], \\f[C]ftp\\f[R] and \\f[C]qinqstor\\f[R] backends because\nthey need to do an extra API call to fetch it.\n.PP\nIf you use the \\f[C]--vfs-fast-fingerprint\\f[R] flag then rclone will\nnot include the slow operations in the fingerprint.\nThis makes the fingerprinting less accurate but much faster and will\nimprove the opening time of cached files.\n.PP\nIf you are running a vfs cache over \\f[C]local\\f[R], \\f[C]s3\\f[R] or\n\\f[C]swift\\f[R] backends then using this flag is recommended.\n.PP\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n.SS VFS Chunked Reading\n.PP\nWhen rclone reads files from a remote it reads them in chunks.\nThis means that rather than requesting the whole file rclone reads the\nchunk specified.\nThis can reduce the used download quota for some remotes by requesting\nonly chunks from the remote that are actually read, at the cost of an\nincreased number of requests.\n.PP\nThese flags control the chunking:\n.IP\n.nf\n\\f[C]\n--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once\n\\f[R]\n.fi\n.PP\nThe chunking behaves differently depending on the\n\\f[C]--vfs-read-chunk-streams\\f[R] parameter.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] == 0\n.PP\nRclone will start reading a chunk of size\n\\f[C]--vfs-read-chunk-size\\f[R], and then double the size for each read.\nWhen \\f[C]--vfs-read-chunk-size-limit\\f[R] is specified, and greater\nthan \\f[C]--vfs-read-chunk-size\\f[R], the chunk size for each open file\nwill get doubled only until the specified value is reached.\nIf the value is \\[dq]off\\[dq], which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n.PP\nWith \\f[C]--vfs-read-chunk-size 100M\\f[R] and\n\\f[C]--vfs-read-chunk-size-limit 0\\f[R] the following parts will be\ndownloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen \\f[C]--vfs-read-chunk-size-limit 500M\\f[R] is specified, the result\nwould be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so\non.\n.PP\nSetting \\f[C]--vfs-read-chunk-size\\f[R] to \\f[C]0\\f[R] or \\[dq]off\\[dq]\ndisables chunked reading.\n.PP\nThe chunks will not be buffered in memory.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] > 0\n.PP\nRclone reads \\f[C]--vfs-read-chunk-streams\\f[R] chunks of size\n\\f[C]--vfs-read-chunk-size\\f[R] concurrently.\nThe size for each read will stay constant.\n.PP\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n.PP\nSome experimentation will be needed to find the optimum values of\n\\f[C]--vfs-read-chunk-size\\f[R] and \\f[C]--vfs-read-chunk-streams\\f[R]\nas these will depend on the backend in use and the latency to the\nbackend.\n.PP\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be \\f[C]--vfs-read-chunk-streams 16\\f[R] and\n\\f[C]--vfs-read-chunk-size 4M\\f[R].\nIn testing with AWS S3 the performance scaled roughly as the\n\\f[C]--vfs-read-chunk-streams\\f[R] setting.\n.PP\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more \\f[C]--vfs-read-chunk-streams\\f[R] in\norder to get the throughput.\n.SS VFS Performance\n.PP\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons.\nSee also the chunked reading feature.\n.PP\nIn particular S3 and Swift benefit hugely from the\n\\f[C]--no-modtime\\f[R] flag (or use \\f[C]--use-server-modtime\\f[R] for a\nslightly different effect) as each read of the modification time takes a\ntransaction.\n.IP\n.nf\n\\f[C]\n--no-checksum     Don\\[aq]t compare checksums on up/download.\n--no-modtime      Don\\[aq]t read/write the modification time (can speed things up).\n--no-seek         Don\\[aq]t allow seeking in files.\n--read-only       Only allow read-only access.\n\\f[R]\n.fi\n.PP\nSometimes rclone is delivered reads or writes out of order.\nRather than seeking rclone will wait a short time for the in sequence\nread or write to come in.\nThese flags only come into effect when not using an on disk cache file.\n.IP\n.nf\n\\f[C]\n--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default 20ms)\n--vfs-write-wait duration  Time to wait for in-sequence write before giving error (default 1s)\n\\f[R]\n.fi\n.PP\nWhen using VFS write caching (\\f[C]--vfs-cache-mode\\f[R] with value\nwrites or full), the global flag \\f[C]--transfers\\f[R] can be set to\nadjust the number of parallel uploads of modified files from the cache\n(the related global flag \\f[C]--checkers\\f[R] has no effect on the VFS).\n.IP\n.nf\n\\f[C]\n--transfers int  Number of file transfers to run in parallel (default 4)\n\\f[R]\n.fi\n.SS VFS Case Sensitivity\n.PP\nLinux file systems are case-sensitive: two files can differ only by\ncase, and the exact case must be used when opening a file.\n.PP\nFile systems in modern Windows are case-insensitive but case-preserving:\nalthough existing files can be opened using any case, the exact case\nused to create the file is preserved and available for programs to\nquery.\nIt is not allowed for two files in the same directory to differ only by\ncase.\n.PP\nUsually file systems on macOS are case-insensitive.\nIt is possible to make macOS file systems case-sensitive but that is not\nthe default.\n.PP\nThe \\f[C]--vfs-case-insensitive\\f[R] VFS flag controls how rclone\nhandles these two cases.\nIf its value is \\[dq]false\\[dq], rclone passes file names to the remote\nas-is.\nIf the flag is \\[dq]true\\[dq] (or appears without a value on the command\nline), rclone may perform a \\[dq]fixup\\[dq] as explained below.\n.PP\nThe user may specify a file name to open/delete/rename/etc with a case\ndifferent than what is stored on the remote.\nIf an argument refers to an existing file with exactly the same name,\nthen the case of the existing file on the disk will be used.\nHowever, if a file name with exactly the same name is not found but a\nname differing only by case exists, rclone will transparently fixup the\nname.\nThis fixup happens only when an existing file is requested.\nCase sensitivity of file names created anew by rclone is controlled by\nthe underlying remote.\n.PP\nNote that case sensitivity of the operating system running rclone (the\ntarget) may differ from case sensitivity of a file system presented by\nrclone (the source).\nThe flag controls whether \\[dq]fixup\\[dq] is performed to satisfy the\ntarget.\n.PP\nIf the flag is not provided on the command line, then its default value\ndepends on the operating system where rclone runs: \\[dq]true\\[dq] on\nWindows and macOS, \\[dq]false\\[dq] otherwise.\nIf the flag is provided without a value, then it is \\[dq]true\\[dq].\n.PP\nThe \\f[C]--no-unicode-normalization\\f[R] flag controls whether a similar\n\\[dq]fixup\\[dq] is performed for filenames that differ but are\ncanonically\nequivalent (https://en.wikipedia.org/wiki/Unicode_equivalence) with\nrespect to unicode.\nUnicode normalization can be particularly helpful for users of macOS,\nwhich prefers form NFD instead of the NFC used by most other platforms.\nIt is therefore highly recommended to keep the default of\n\\f[C]false\\f[R] on macOS, to avoid encoding compatibility issues.\n.PP\nIn the (probably unlikely) event that a directory has multiple duplicate\nfilenames after applying case and unicode normalization, the\n\\f[C]--vfs-block-norm-dupes\\f[R] flag allows hiding these duplicates.\nThis comes with a performance tradeoff, as rclone will have to scan the\nentire directory for duplicates when listing a directory.\nFor this reason, it is recommended to leave this disabled if not needed.\nHowever, macOS users may wish to consider using it, as otherwise, if a\nremote directory contains both NFC and NFD versions of the same\nfilename, an odd situation will occur: both versions of the file will be\nvisible in the mount, and both will appear to be editable, however,\nediting either version will actually result in only the NFD version\ngetting edited under the hood.\n\\f[C]--vfs-block- norm-dupes\\f[R] prevents this confusion by detecting\nthis scenario, hiding the duplicates, and logging an error, similar to\nhow this is handled in \\f[C]rclone sync\\f[R].\n.SS VFS Disk Options\n.PP\nThis flag allows you to manually set the statistics about the filing\nsystem.\nIt can be useful when those statistics cannot be read correctly\nautomatically.\n.IP\n.nf\n\\f[C]\n--vfs-disk-space-total-size    Manually set the total disk space size (example: 256G, default: -1)\n\\f[R]\n.fi\n.SS Alternate report of used bytes\n.PP\nSome backends, most notably S3, do not report the amount of bytes used.\nIf you need this information to be available when running \\f[C]df\\f[R]\non the filesystem, then pass the flag \\f[C]--vfs-used-is-size\\f[R] to\nrclone.\nWith this flag set, instead of relying on the backend to report this\ninformation, rclone will scan the whole remote similar to\n\\f[C]rclone size\\f[R] and compute the total used space itself.\n.PP\n\\f[I]WARNING.\\f[R] Contrary to \\f[C]rclone size\\f[R], this flag ignores\nfilters so that the result is accurate.\nHowever, this is very inefficient and may cost lots of API calls\nresulting in extra charges.\nUse it as a last resort and only with caching.\n.SS Auth Proxy\n.PP\nIf you supply the parameter \\f[C]--auth-proxy /path/to/program\\f[R] then\nrclone will use that program to generate backends on the fly which then\nare used to authenticate incoming requests.\nThis uses a simple JSON based protocol with input on STDIN and output on\nSTDOUT.\n.PP\n\\f[B]PLEASE NOTE:\\f[R] \\f[C]--auth-proxy\\f[R] and\n\\f[C]--authorized-keys\\f[R] cannot be used together, if\n\\f[C]--auth-proxy\\f[R] is set the authorized keys option will be\nignored.\n.PP\nThere is an example program\nbin/test_proxy.py (https://github.com/rclone/rclone/blob/master/bin/test_proxy.py)\nin the rclone source code.\n.PP\nThe program\\[aq]s job is to take a \\f[C]user\\f[R] and \\f[C]pass\\f[R] on\nthe input and turn those into the config for a backend on STDOUT in JSON\nformat.\nThis config will have any default parameters for the backend added, but\nit won\\[aq]t use configuration from environment variables or command\nline options - it is the job of the proxy program to make a complete\nconfig.\n.PP\nThis config generated must have this extra parameter - \\f[C]_root\\f[R] -\nroot to use for the backend\n.PP\nAnd it may have this parameter - \\f[C]_obscure\\f[R] - comma separated\nstrings for parameters to obscure\n.PP\nIf password authentication was used by the client, input to the proxy\nprocess (on STDIN) would look similar to this:\n.IP\n.nf\n\\f[C]\n{\n    \\[dq]user\\[dq]: \\[dq]me\\[dq],\n    \\[dq]pass\\[dq]: \\[dq]mypassword\\[dq]\n}\n\\f[R]\n.fi\n.PP\nIf public-key authentication was used by the client, input to the proxy\nprocess (on STDIN) would look similar to this:\n.IP\n.nf\n\\f[C]\n{\n    \\[dq]user\\[dq]: \\[dq]me\\[dq],\n    \\[dq]public_key\\[dq]: \\[dq]AAAAB3NzaC1yc2EAAAADAQABAAABAQDuwESFdAe14hVS6omeyX7edc...JQdf\\[dq]\n}\n\\f[R]\n.fi\n.PP\nAnd as an example return this on STDOUT\n.IP\n.nf\n\\f[C]\n{\n    \\[dq]type\\[dq]: \\[dq]sftp\\[dq],\n    \\[dq]_root\\[dq]: \\[dq]\\[dq],\n    \\[dq]_obscure\\[dq]: \\[dq]pass\\[dq],\n    \\[dq]user\\[dq]: \\[dq]me\\[dq],\n    \\[dq]pass\\[dq]: \\[dq]mypassword\\[dq],\n    \\[dq]host\\[dq]: \\[dq]sftp.example.com\\[dq]\n}\n\\f[R]\n.fi\n.PP\nThis would mean that an SFTP backend would be created on the fly for the\n\\f[C]user\\f[R] and \\f[C]pass\\f[R]/\\f[C]public_key\\f[R] returned in the\noutput to the host given.\nNote that since \\f[C]_obscure\\f[R] is set to \\f[C]pass\\f[R], rclone will\nobscure the \\f[C]pass\\f[R] parameter before creating the backend (which\nis required for sftp backends).\n.PP\nThe program can manipulate the supplied \\f[C]user\\f[R] in any way, for\nexample to make proxy to many different sftp backends, you could make\nthe \\f[C]user\\f[R] be \\f[C]user\\[at]example.com\\f[R] and then set the\n\\f[C]host\\f[R] to \\f[C]example.com\\f[R] in the output and the user to\n\\f[C]user\\f[R].\nFor security you\\[aq]d probably want to restrict the \\f[C]host\\f[R] to a\nlimited list.\n.PP\nNote that an internal cache is keyed on \\f[C]user\\f[R] so only use that\nfor configuration, don\\[aq]t use \\f[C]pass\\f[R] or \\f[C]public_key\\f[R].\nThis also means that if a user\\[aq]s password or public-key is changed\nthe cache will need to expire (which takes 5 mins) before it takes\neffect.\n.PP\nThis can be used to build general purpose proxies to any kind of backend\nthat rclone supports.\n.IP\n.nf\n\\f[C]\nrclone serve http remote:path [flags]\n\\f[R]\n.fi\n.SS Options\n.IP\n.nf\n\\f[C]\n      --addr stringArray                       IPaddress:Port, :Port or [unix://]/path/to/socket to bind server to (default [127.0.0.1:8080])\n      --allow-origin string                    Origin which cross-domain request (CORS) can be executed from\n      --auth-proxy string                      A program to use to create the backend from the auth\n      --baseurl string                         Prefix for URLs - leave blank for root\n      --cert string                            TLS PEM key (concatenation of certificate and CA certificate)\n      --client-ca string                       Client certificate authority to verify clients with\n      --dir-cache-time Duration                Time to cache directory entries for (default 5m0s)\n      --dir-perms FileMode                     Directory permissions (default 777)\n      --file-perms FileMode                    File permissions (default 666)\n      --gid uint32                             Override the gid field set by the filesystem (not supported on Windows) (default 1000)\n  -h, --help                                   help for http\n      --htpasswd string                        A htpasswd file - if not provided no authentication is done\n      --key string                             TLS PEM Private key\n      --max-header-bytes int                   Maximum size of request header (default 4096)\n      --min-tls-version string                 Minimum TLS version that is acceptable (default \\[dq]tls1.0\\[dq])\n      --no-checksum                            Don\\[aq]t compare checksums on up/download\n      --no-modtime                             Don\\[aq]t read/write the modification time (can speed things up)\n      --no-seek                                Don\\[aq]t allow seeking in files\n      --pass string                            Password for authentication\n      --poll-interval Duration                 Time to wait between polling for changes, must be smaller than dir-cache-time and only on supported remotes (set 0 to disable) (default 1m0s)\n      --read-only                              Only allow read-only access\n      --realm string                           Realm for authentication\n      --salt string                            Password hashing salt (default \\[dq]dlPL2MqE\\[dq])\n      --server-read-timeout Duration           Timeout for server reading data (default 1h0m0s)\n      --server-write-timeout Duration          Timeout for server writing data (default 1h0m0s)\n      --template string                        User-specified template\n      --uid uint32                             Override the uid field set by the filesystem (not supported on Windows) (default 1000)\n      --umask FileMode                         Override the permission bits set by the filesystem (not supported on Windows) (default 002)\n      --user string                            User name for authentication\n      --vfs-block-norm-dupes                   If duplicate filenames exist in the same directory (after normalization), log an error and hide the duplicates (may have a performance cost)\n      --vfs-cache-max-age Duration             Max time since last access of objects in the cache (default 1h0m0s)\n      --vfs-cache-max-size SizeSuffix          Max total size of objects in the cache (default off)\n      --vfs-cache-min-free-space SizeSuffix    Target minimum free space on the disk containing the cache (default off)\n      --vfs-cache-mode CacheMode               Cache mode off|minimal|writes|full (default off)\n      --vfs-cache-poll-interval Duration       Interval to poll the cache for stale objects (default 1m0s)\n      --vfs-case-insensitive                   If a file name not found, find a case insensitive match\n      --vfs-disk-space-total-size SizeSuffix   Specify the total space of disk (default off)\n      --vfs-fast-fingerprint                   Use fast (less accurate) fingerprints for change detection\n      --vfs-read-ahead SizeSuffix              Extra read ahead over --buffer-size when using cache-mode full\n      --vfs-read-chunk-size SizeSuffix         Read the source objects in chunks (default 128Mi)\n      --vfs-read-chunk-size-limit SizeSuffix   If greater than --vfs-read-chunk-size, double the chunk size after each chunk read, until the limit is reached (\\[aq]off\\[aq] is unlimited) (default off)\n      --vfs-read-chunk-streams int             The number of parallel streams to read at once\n      --vfs-read-wait Duration                 Time to wait for in-sequence read before seeking (default 20ms)\n      --vfs-refresh                            Refreshes the directory cache recursively in the background on start\n      --vfs-used-is-size rclone size           Use the rclone size algorithm for Used size\n      --vfs-write-back Duration                Time to writeback files after last use when using cache (default 5s)\n      --vfs-write-wait Duration                Time to wait for in-sequence write before giving error (default 1s)\n\\f[R]\n.fi\n.PP\nOptions shared with other commands are described next.\nSee the global flags page (https://rclone.org/flags/) for global options\nnot listed here.\n.SS Filter Options\n.PP\nFlags for filtering directory listings\n.IP\n.nf\n\\f[C]\n      --delete-excluded                     Delete files on dest excluded from sync\n      --exclude stringArray                 Exclude files matching pattern\n      --exclude-from stringArray            Read file exclude patterns from file (use - to read from stdin)\n      --exclude-if-present stringArray      Exclude directories if filename is present\n      --files-from stringArray              Read list of source-file names from file (use - to read from stdin)\n      --files-from-raw stringArray          Read list of source-file names from file without any processing of lines (use - to read from stdin)\n  -f, --filter stringArray                  Add a file filtering rule\n      --filter-from stringArray             Read file filtering patterns from a file (use - to read from stdin)\n      --ignore-case                         Ignore case in filters (case insensitive)\n      --include stringArray                 Include files matching pattern\n      --include-from stringArray            Read file include patterns from file (use - to read from stdin)\n      --max-age Duration                    Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --max-depth int                       If set limits the recursion depth to this (default -1)\n      --max-size SizeSuffix                 Only transfer files smaller than this in KiB or suffix B|K|M|G|T|P (default off)\n      --metadata-exclude stringArray        Exclude metadatas matching pattern\n      --metadata-exclude-from stringArray   Read metadata exclude patterns from file (use - to read from stdin)\n      --metadata-filter stringArray         Add a metadata filtering rule\n      --metadata-filter-from stringArray    Read metadata filtering patterns from a file (use - to read from stdin)\n      --metadata-include stringArray        Include metadatas matching pattern\n      --metadata-include-from stringArray   Read metadata include patterns from file (use - to read from stdin)\n      --min-age Duration                    Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y (default off)\n      --min-size SizeSuffix                 Only transfer files bigger than this in KiB or suffix B|K|M|G|T|P (default off)\n\\f[R]\n.fi\n.SS See Also\n.IP \\[bu] 2\nrclone serve (https://rclone.org/commands/rclone_serve/) - Serve a\nremote over a protocol.\n.SH rclone serve nfs\n.PP\nServe the remote as an NFS mount\n.SS Synopsis\n.PP\nCreate an NFS server that serves the given remote over the network.\n.PP\nThis implements an NFSv3 server to serve any rclone remote via NFS.\n.PP\nThe primary purpose for this command is to enable the mount\ncommand (https://rclone.org/commands/rclone_mount/) on recent macOS\nversions where installing FUSE is very cumbersome.\n.PP\nThis server does not implement any authentication so any client will be\nable to access the data.\nTo limit access, you can use \\f[C]serve nfs\\f[R] on the loopback address\nor rely on secure tunnels (such as SSH) or use firewalling.\n.PP\nFor this reason, by default, a random TCP port is chosen and the\nloopback interface is used for the listening address by default; meaning\nthat it is only available to the local machine.\nIf you want other machines to access the NFS mount over local network,\nyou need to specify the listening address and port using the\n\\f[C]--addr\\f[R] flag.\n.PP\nModifying files through the NFS protocol requires VFS caching.\nUsually you will need to specify \\f[C]--vfs-cache-mode\\f[R] in order to\nbe able to write to the mountpoint (\\f[C]full\\f[R] is recommended).\nIf you don\\[aq]t specify VFS cache mode, the mount will be read-only.\n.PP\n\\f[C]--nfs-cache-type\\f[R] controls the type of the NFS handle cache.\nBy default this is \\f[C]memory\\f[R] where new handles will be randomly\nallocated when needed.\nThese are stored in memory.\nIf the server is restarted the handle cache will be lost and connected\nNFS clients will get stale handle errors.\n.PP\n\\f[C]--nfs-cache-type disk\\f[R] uses an on disk NFS handle cache.\nRclone hashes the path of the object and stores it in a file named after\nthe hash.\nThese hashes are stored on disk the directory controlled by\n\\f[C]--cache-dir\\f[R] or the exact directory may be specified with\n\\f[C]--nfs-cache-dir\\f[R].\nUsing this means that the NFS server can be restarted at will without\naffecting the connected clients.\n.PP\n\\f[C]--nfs-cache-type symlink\\f[R] is similar to\n\\f[C]--nfs-cache-type disk\\f[R] in that it uses an on disk cache, but\nthe cache entries are held as symlinks.\nRclone will use the handle of the underlying file as the NFS handle\nwhich improves performance.\nThis sort of cache can\\[aq]t be backed up and restored as the underlying\nhandles will change.\nThis is Linux only.\n.PP\n\\f[C]--nfs-cache-handle-limit\\f[R] controls the maximum number of cached\nNFS handles stored by the caching handler.\nThis should not be set too low or you may experience errors when trying\nto access files.\nThe default is \\f[C]1000000\\f[R], but consider lowering this limit if\nthe server\\[aq]s system resource usage causes problems.\nThis is only used by the \\f[C]memory\\f[R] type cache.\n.PP\nTo serve NFS over the network use following command:\n.IP\n.nf\n\\f[C]\nrclone serve nfs remote: --addr 0.0.0.0:$PORT --vfs-cache-mode=full\n\\f[R]\n.fi\n.PP\nThis specifies a port that can be used in the mount command.\nTo mount the server under Linux/macOS, use the following command:\n.IP\n.nf\n\\f[C]\nmount -t nfs -o port=$PORT,mountport=$PORT,tcp $HOSTNAME:/ path/to/mountpoint\n\\f[R]\n.fi\n.PP\nWhere \\f[C]$PORT\\f[R] is the same port number used in the\n\\f[C]serve nfs\\f[R] command and \\f[C]$HOSTNAME\\f[R] is the network\naddress of the machine that \\f[C]serve nfs\\f[R] was run on.\n.PP\nThis command is only available on Unix platforms.\n.SS VFS - Virtual File System\n.PP\nThis command uses the VFS layer.\nThis adapts the cloud storage objects that rclone uses into something\nwhich looks much more like a disk filing system.\n.PP\nCloud storage objects have lots of properties which aren\\[aq]t like disk\nfiles - you can\\[aq]t extend them or write to the middle of them, so the\nVFS layer has to deal with that.\nBecause there is no one right way of doing this there are various\noptions explained below.\n.PP\nThe VFS layer also implements a directory cache - this caches info about\nfiles and directories (but not the data) in memory.\n.SS VFS Directory Cache\n.PP\nUsing the \\f[C]--dir-cache-time\\f[R] flag, you can control how long a\ndirectory should be considered up to date and not refreshed from the\nbackend.\nChanges made through the VFS will appear immediately or invalidate the\ncache.\n.IP\n.nf\n\\f[C]\n--dir-cache-time duration   Time to cache directory entries for (default 5m0s)\n--poll-interval duration    Time to wait between polling for changes. Must be smaller than dir-cache-time. Only on supported remotes. Set to 0 to disable (default 1m0s)\n\\f[R]\n.fi\n.PP\nHowever, changes made directly on the cloud storage by the web interface\nor a different copy of rclone will only be picked up once the directory\ncache expires if the backend configured does not support polling for\nchanges.\nIf the backend supports polling, changes will be picked up within the\npolling interval.\n.PP\nYou can send a \\f[C]SIGHUP\\f[R] signal to rclone for it to flush all\ndirectory caches, regardless of how old they are.\nAssuming only one rclone instance is running, you can reset the cache\nlike this:\n.IP\n.nf\n\\f[C]\nkill -SIGHUP $(pidof rclone)\n\\f[R]\n.fi\n.PP\nIf you configure rclone with a remote control then you can use rclone rc\nto flush the whole directory cache:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget\n\\f[R]\n.fi\n.PP\nOr individual files or directories:\n.IP\n.nf\n\\f[C]\nrclone rc vfs/forget file=path/to/file dir=path/to/dir\n\\f[R]\n.fi\n.SS VFS File Buffering\n.PP\nThe \\f[C]--buffer-size\\f[R] flag determines the amount of memory, that\nwill be used to buffer data in advance.\n.PP\nEach open file will try to keep the specified amount of data in memory\nat all times.\nThe buffered data is bound to one open file and won\\[aq]t be shared.\n.PP\nThis flag is a upper limit for the used memory per open file.\nThe buffer will only use memory for data that is downloaded but not not\nyet read.\nIf the buffer is empty, only a small amount of memory will be used.\n.PP\nThe maximum memory used by rclone for buffering can be up to\n\\f[C]--buffer-size * open files\\f[R].\n.SS VFS File Caching\n.PP\nThese flags control the VFS file caching options.\nFile caching is necessary to make the VFS layer appear compatible with a\nnormal file system.\nIt can be disabled at the cost of some compatibility.\n.PP\nFor example you\\[aq]ll need to enable VFS caching if you want to read\nand write simultaneously to a file.\nSee below for more details.\n.PP\nNote that the VFS cache is separate from the cache backend and you may\nfind that you need one or the other or both.\n.IP\n.nf\n\\f[C]\n--cache-dir string                     Directory rclone will use for caching.\n--vfs-cache-mode CacheMode             Cache mode off|minimal|writes|full (default off)\n--vfs-cache-max-age duration           Max time since last access of objects in the cache (default 1h0m0s)\n--vfs-cache-max-size SizeSuffix        Max total size of objects in the cache (default off)\n--vfs-cache-min-free-space SizeSuffix  Target minimum free space on the disk containing the cache (default off)\n--vfs-cache-poll-interval duration     Interval to poll the cache for stale objects (default 1m0s)\n--vfs-write-back duration              Time to writeback files after last use when using cache (default 5s)\n\\f[R]\n.fi\n.PP\nIf run with \\f[C]-vv\\f[R] rclone will print the location of the file\ncache.\nThe files are stored in the user cache file area which is OS dependent\nbut can be controlled with \\f[C]--cache-dir\\f[R] or setting the\nappropriate environment variable.\n.PP\nThe cache has 4 different modes selected by \\f[C]--vfs-cache-mode\\f[R].\nThe higher the cache mode the more compatible rclone becomes at the cost\nof using disk space.\n.PP\nNote that files are written back to the remote only when they are closed\nand if they haven\\[aq]t been accessed for \\f[C]--vfs-write-back\\f[R]\nseconds.\nIf rclone is quit or dies with files that haven\\[aq]t been uploaded,\nthese will be uploaded next time rclone is run with the same flags.\n.PP\nIf using \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] note that the cache may exceed these\nquotas for two reasons.\nFirstly because it is only checked every\n\\f[C]--vfs-cache-poll-interval\\f[R].\nSecondly because open files cannot be evicted from the cache.\nWhen \\f[C]--vfs-cache-max-size\\f[R] or\n\\f[C]--vfs-cache-min-free-size\\f[R] is exceeded, rclone will attempt to\nevict the least accessed files from the cache first.\nrclone will start with files that haven\\[aq]t been accessed for the\nlongest.\nThis cache flushing strategy is efficient and more relevant files are\nlikely to remain cached.\n.PP\nThe \\f[C]--vfs-cache-max-age\\f[R] will evict files from the cache after\nthe set time since last access has passed.\nThe default value of 1 hour will start evicting files from cache that\nhaven\\[aq]t been accessed for 1 hour.\nWhen a cached file is accessed the 1 hour timer is reset to 0 and will\nwait for 1 more hour before evicting.\nSpecify the time with standard notation, s, m, h, d, w .\n.PP\nYou \\f[B]should not\\f[R] run two copies of rclone using the same VFS\ncache with the same or overlapping remotes if using\n\\f[C]--vfs-cache-mode > off\\f[R].\nThis can potentially cause data corruption if you do.\nYou can work around this by giving each rclone its own cache hierarchy\nwith \\f[C]--cache-dir\\f[R].\nYou don\\[aq]t need to worry about this if the remotes in use don\\[aq]t\noverlap.\n.SS --vfs-cache-mode off\n.PP\nIn this mode (the default) the cache will read directly from the remote\nand write directly to the remote without caching anything on disk.\n.PP\nThis will mean some operations are not possible\n.IP \\[bu] 2\nFiles can\\[aq]t be opened for both read AND write\n.IP \\[bu] 2\nFiles opened for write can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles open for read with O_TRUNC will be opened write only\n.IP \\[bu] 2\nFiles open for write only will behave as if O_TRUNC was supplied\n.IP \\[bu] 2\nOpen modes O_APPEND, O_TRUNC are ignored\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode minimal\n.PP\nThis is very similar to \\[dq]off\\[dq] except that files opened for read\nAND write will be buffered to disk.\nThis means that files opened for write will be a lot more compatible,\nbut uses the minimal disk space.\n.PP\nThese operations are not possible\n.IP \\[bu] 2\nFiles opened for write only can\\[aq]t be seeked\n.IP \\[bu] 2\nExisting files opened for write must have O_TRUNC set\n.IP \\[bu] 2\nFiles opened for write only will ignore O_APPEND, O_TRUNC\n.IP \\[bu] 2\nIf an upload fails it can\\[aq]t be retried\n.SS --vfs-cache-mode writes\n.PP\nIn this mode files opened for read only are still read directly from the\nremote, write only and read/write files are buffered to disk first.\n.PP\nThis mode should support all normal file system operations.\n.PP\nIf an upload fails it will be retried at exponentially increasing\nintervals up to 1 minute.\n.SS --vfs-cache-mode full\n.PP\nIn this mode all reads and writes are buffered to and from disk.\nWhen data is read from the remote this is buffered to disk as well.\n.PP\nIn this mode the files in the cache will be sparse files and rclone will\nkeep track of which bits of the files it has downloaded.\n.PP\nSo if an application only reads the starts of each file, then rclone\nwill only buffer the start of the file.\nThese files will appear to be their full size in the cache, but they\nwill be sparse files with only the data that has been downloaded present\nin them.\n.PP\nThis mode should support all normal file system operations and is\notherwise identical to \\f[C]--vfs-cache-mode\\f[R] writes.\n.PP\nWhen reading a file rclone will read \\f[C]--buffer-size\\f[R] plus\n\\f[C]--vfs-read-ahead\\f[R] bytes ahead.\nThe \\f[C]--buffer-size\\f[R] is buffered in memory whereas the\n\\f[C]--vfs-read-ahead\\f[R] is buffered on disk.\n.PP\nWhen using this mode it is recommended that \\f[C]--buffer-size\\f[R] is\nnot set too large and \\f[C]--vfs-read-ahead\\f[R] is set large if\nrequired.\n.PP\n\\f[B]IMPORTANT\\f[R] not all file systems support sparse files.\nIn particular FAT/exFAT do not.\nRclone will perform very badly if the cache directory is on a filesystem\nwhich doesn\\[aq]t support sparse files and it will log an ERROR message\nif one is detected.\n.SS Fingerprinting\n.PP\nVarious parts of the VFS use fingerprinting to see if a local file copy\nhas changed relative to a remote file.\nFingerprints are made from:\n.IP \\[bu] 2\nsize\n.IP \\[bu] 2\nmodification time\n.IP \\[bu] 2\nhash\n.PP\nwhere available on an object.\n.PP\nOn some backends some of these attributes are slow to read (they take an\nextra API call per object, or extra work per object).\n.PP\nFor example \\f[C]hash\\f[R] is slow with the \\f[C]local\\f[R] and\n\\f[C]sftp\\f[R] backends as they have to read the entire file and hash\nit, and \\f[C]modtime\\f[R] is slow with the \\f[C]s3\\f[R],\n\\f[C]swift\\f[R], \\f[C]ftp\\f[R] and \\f[C]qinqstor\\f[R] backends because\nthey need to do an extra API call to fetch it.\n.PP\nIf you use the \\f[C]--vfs-fast-fingerprint\\f[R] flag then rclone will\nnot include the slow operations in the fingerprint.\nThis makes the fingerprinting less accurate but much faster and will\nimprove the opening time of cached files.\n.PP\nIf you are running a vfs cache over \\f[C]local\\f[R], \\f[C]s3\\f[R] or\n\\f[C]swift\\f[R] backends then using this flag is recommended.\n.PP\nNote that if you change the value of this flag, the fingerprints of the\nfiles in the cache may be invalidated and the files will need to be\ndownloaded again.\n.SS VFS Chunked Reading\n.PP\nWhen rclone reads files from a remote it reads them in chunks.\nThis means that rather than requesting the whole file rclone reads the\nchunk specified.\nThis can reduce the used download quota for some remotes by requesting\nonly chunks from the remote that are actually read, at the cost of an\nincreased number of requests.\n.PP\nThese flags control the chunking:\n.IP\n.nf\n\\f[C]\n--vfs-read-chunk-size SizeSuffix        Read the source objects in chunks (default 128M)\n--vfs-read-chunk-size-limit SizeSuffix  Max chunk doubling size (default off)\n--vfs-read-chunk-streams int            The number of parallel streams to read at once\n\\f[R]\n.fi\n.PP\nThe chunking behaves differently depending on the\n\\f[C]--vfs-read-chunk-streams\\f[R] parameter.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] == 0\n.PP\nRclone will start reading a chunk of size\n\\f[C]--vfs-read-chunk-size\\f[R], and then double the size for each read.\nWhen \\f[C]--vfs-read-chunk-size-limit\\f[R] is specified, and greater\nthan \\f[C]--vfs-read-chunk-size\\f[R], the chunk size for each open file\nwill get doubled only until the specified value is reached.\nIf the value is \\[dq]off\\[dq], which is the default, the limit is\ndisabled and the chunk size will grow indefinitely.\n.PP\nWith \\f[C]--vfs-read-chunk-size 100M\\f[R] and\n\\f[C]--vfs-read-chunk-size-limit 0\\f[R] the following parts will be\ndownloaded: 0-100M, 100M-200M, 200M-300M, 300M-400M and so on.\nWhen \\f[C]--vfs-read-chunk-size-limit 500M\\f[R] is specified, the result\nwould be 0-100M, 100M-300M, 300M-700M, 700M-1200M, 1200M-1700M and so\non.\n.PP\nSetting \\f[C]--vfs-read-chunk-size\\f[R] to \\f[C]0\\f[R] or \\[dq]off\\[dq]\ndisables chunked reading.\n.PP\nThe chunks will not be buffered in memory.\n.SS \\f[C]--vfs-read-chunk-streams\\f[R] > 0\n.PP\nRclone reads \\f[C]--vfs-read-chunk-streams\\f[R] chunks of size\n\\f[C]--vfs-read-chunk-size\\f[R] concurrently.\nThe size for each read will stay constant.\n.PP\nThis improves performance performance massively on high latency links or\nvery high bandwidth links to high performance object stores.\n.PP\nSome experimentation will be needed to find the optimum values of\n\\f[C]--vfs-read-chunk-size\\f[R] and \\f[C]--vfs-read-chunk-streams\\f[R]\nas these will depend on the backend in use and the latency to the\nbackend.\n.PP\nFor high performance object stores (eg AWS S3) a reasonable place to\nstart might be \\f[C]--vfs-read-chunk-streams 16\\f[R] and\n\\f[C]--vfs-read-chunk-size 4M\\f[R].\nIn testing with AWS S3 the performance scaled roughly as the\n\\f[C]--vfs-read-chunk-streams\\f[R] setting.\n.PP\nSimilar settings should work for high latency links, but depending on\nthe latency they may need more \\f[C]--vfs-read-chunk-streams\\f[R] in\norder to get the throughput.\n.SS VFS Performance\n.PP\nThese flags may be used to enable/disable features of the VFS for\nperformance or other reasons.\nSee also the chunked reading feature.\n.PP\nIn particular S3 and Swift benefit hugely from the\n\\f[C]--no-modtime\\f[R] flag (or use \\f[C]--use-server-modtime\\f[R] for a\nslightly different effect) as each read of the modification time takes a\ntransaction.\n.IP\n.nf\n\\f[C]\n--no-checksum     Don\\[aq]t compare checksums on up/download.\n--no-modtime      Don\\[aq]t read/write the modification time (can speed things up).\n--no-seek         Don\\[aq]t allow seeking in files.\n--read-only       Only allow read-only access.\n\\f[R]\n.fi\n.PP\nSometimes rclone is delivered reads or writes out of order.\nRather than seeking rclone will wait a short time for the in sequence\nread or write to come in.\nThese flags only come into effect when not using an on disk cache file.\n.IP\n.nf\n\\f[C]\n--vfs-read-wait duration   Time to wait for in-sequence read before seeking (default "
        },
        {
          "name": "rclone.go",
          "type": "blob",
          "size": 0.3818359375,
          "content": "// Sync files and directories to and from local and remote object stores\n//\n// Nick Craig-Wood <nick@craig-wood.com>\npackage main\n\nimport (\n\t_ \"github.com/rclone/rclone/backend/all\" // import all backends\n\t\"github.com/rclone/rclone/cmd\"\n\t_ \"github.com/rclone/rclone/cmd/all\"    // import all commands\n\t_ \"github.com/rclone/rclone/lib/plugin\" // import plugins\n)\n\nfunc main() {\n\tcmd.Main()\n}\n"
        },
        {
          "name": "vfs",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}