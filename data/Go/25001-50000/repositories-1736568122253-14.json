{
  "metadata": {
    "timestamp": 1736568122253,
    "page": 14,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "coreybutler/nvm-windows",
      "stars": 38881,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0517578125,
          "content": "* text eol=lf\n*.exe binary\n*.dll binary\n*.e32 binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4404296875,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n*.old\n\n# Folders\n_obj\n_test\nbin\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n!utilities/**/*.exe\n*.test\n*.prof\n\n**/.*\n\ndist\nsrc/v*\nbin/*.exe\nbin/*.log\nbin/LICENSE\n!bin/buildtools/*\n!assets/buildtools/*\nbin/*.zip\nbin/nvm/*\n\n!.gitignore\n!.gitattributes\n!.github\ntests\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.55078125,
          "content": "## Before you submit an issue....\n\nThere have been a lot of duplicate issues filed. Please do a simple search for your issue before posting something new.\n\nIf you just have a question and no real problem, please use the [StackOverflow tag](https://stackoverflow.com/questions/tagged/nvm-windows) the [Gitter channel](https://gitter.im/coreybutler/nvm-windows) instead of clogging up the bug tracker with questions.\n\n## Common Issues & Resolutions\n\nSee the [Common Issues](https://github.com/coreybutler/nvm-windows/wiki/Common-Issues) wiki page before submitting.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0986328125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2025 Author Software Inc.\nCopyright (c) 2022 Ecor Ventures LLC.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.7763671875,
          "content": "<div align=\"center\"><h2>Notice: We are working full time work on <a href=\"https://github.com/coreybutler/nvm-windows/wiki/Runtime\">Runtime</a>, the successor to NVM for Windows.</h2>Complete <a href=\"https://t.co/oGqQCM9FPx\">this form</a> to provide your thoughts and sign up for progress updates.<br/><br/>Updates will also be posted on the <A href=\"https://linkedin.com/company/authorsoftware\">Author Software LinkedIn Page</a>.</div>\n<br/><br/>\n<h1 align=\"center\">NVM for Windows</h1>\n\n<div align=\"center\">\n  The <a href=\"https://docs.microsoft.com/en-us/windows/nodejs/setup-on-windows\">Microsoft</a>/<a href=\"https://docs.npmjs.com/cli/v9/configuring-npm/install#windows-node-version-managers\">npm</a>/<a href=\"https://cloud.google.com/nodejs/docs/setup#installing_nvm\">Google</a> recommended Node.js version manager for <em>Windows</em>.<br/>\n\n<details>\n<summary><b>This is not the same thing as nvm!</b> (expand for details)</summary>\n\n_The original [nvm](https://github.com/nvm-sh/nvm) is a completely separate project for Mac/Linux only._ This project uses an entirely different philosophy and is not just a clone of nvm. Details are listed in [Why another version manager?](#bulb-why-another-version-manager) and [what&#39;s the big difference?](#bulb-whats-the-big-difference).\n</details>\n\n[![Download Now](https://img.shields.io/badge/-Download%20Now!-%2322A6F2)](https://github.com/coreybutler/nvm-windows/releases) [![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/coreybutler/nvm-windows?label=Latest%20Release&style=social&x=1)]((https://github.com/coreybutler/nvm-windows/releases)) ![GitHub Release Date](https://img.shields.io/github/release-date/coreybutler/nvm-windows?label=Released&style=social) ![GitHub all releases](https://img.shields.io/github/downloads/coreybutler/nvm-windows/total?label=Downloads&style=social) [![Discuss](https://img.shields.io/badge/-Discuss-blue)](https://github.com/coreybutler/nvm-windows/discussions) [![Twitter URL](https://img.shields.io/twitter/url?style=social&url=https%3A%2F%2Ftwitter.com%2Fintent%2Ftweet%3Fhashtags%3Dnodejs%26original_referer%3Dhttp%253A%252F%252F127.0.0.1%253A91%252F%26text%3DCheck%2520out%2520NVM%2520for%2520Windows%21%26tw_p%3Dtweetbutton%26url%3Dhttp%253A%252F%252Fgithub.com%252Fcoreybutler%252Fnvm-windows%26via%3Dgoldglovecb)](https://twitter.com/intent/tweet?hashtags=nodejs&original_referer=http%3A%2F%2F127.0.0.1%3A91%2F&text=Check%20out%20NVM%20for%20Windows!&tw_p=tweetbutton&url=http%3A%2F%2Fgithub.com%2Fcoreybutler%2Fnvm-windows&via=goldglovecb)\n</div>\n\n<h5 align=\"center\">Sponsors</h5>\n\n<div align=\"center\">\n  <table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" align=\"center\">\n    <tr>\n      <td><a href=\"https://linkedin.com/company/authorsoftware\"><img src=\"https://github.com/coreybutler/staticassets/blob/master/sponsors/logo_author_software_flat.png\" width=\"200px\"/></a></td>\n      <td width=\"33%\" align=\"center\"><a href=\"https://ecorventures.com\"><img src=\"https://avatars.githubusercontent.com/u/8259581?s=200&v=4\" height=\"30px\"/></a></td>\n      <td width=\"33%\" align=\"center\"><a href=\"https://github.com/microsoft\"><img src=\"https://user-images.githubusercontent.com/770982/195955265-5c3dca78-7140-4ec6-b05a-f308518643ee.png\" height=\"30px\"/></a></td>\n    </tr>\n    <tr>\n      <td colspan=\"4\" align=\"center\">\n        <a href=\"https://github.com/sponsors/coreybutler\"><img src=\"https://img.shields.io/github/sponsors/coreybutler?label=Individual%20Sponsors&logo=github&style=social\"/></a>\n        &nbsp;<a href=\"https://github.com/sponsors/coreybutler\"><img src=\"https://img.shields.io/badge/-Become%20a%20Sponsor-yellow\"/></a>\n      </td>\n    </tr>\n    <tr>\n      <td colspan=\"4\" align=\"center\">\n        <img src=\"https://github.blog/wp-content/uploads/2020/09/github-stars-logo_Color.png\" width=\"50\"/><br/>\n        <b>Can't sponsor?</b><br/>Consider <a href=\"https://stars.github.com/nominate/\" target=\"_blank\">nominating @coreybutler for a Github star</a>.\n      </td>\n    </tr>\n  </table>\n</div>\n<br/>\n\n<div align=\"center\"><b>Running into issues?</b> See the <a href=\"https://github.com/coreybutler/nvm-windows/wiki/Common-Issues\">common issues wiki</a>.</div>\n\n<br/>\n<table style=\"background-color:red;padding:6px;border-radius:3px;\">\n  <tr><td>\n    <h3>Seeking Feedback:</h3>\n    We're working on <a href=\"https://github.com/coreybutler/nvm-windows/wiki/Runtime\">Runtime (rt)</a>, the successor to NVM For Windows. Please contribute by taking a minute to complete <a href=\"https://t.co/oGqQCM9FPx\">this form</a>. Thank you!\n    <h3></h3>\n  </td></tr>\n</table>\n\n## Overview\n\nManage multiple installations of node.js on a Windows computer.\n\n**tl;dr** Similar (not identical) to [nvm](https://github.com/creationix/nvm), but for Windows. Has an installer. [Download Now](https://github.com/coreybutler/nvm-windows/releases)!\n\nThis has always been a node version manager, not an io.js manager, so there is no back-support for io.js. Node 4+ is supported. Remember when running `nvm install` or `nvm use`, Windows usually requires administrative rights (to create symlinks). To install the latest version of Node.js, run `nvm install latest`. To install the latest stable version, run `nvm install lts`.\n\n![NVM for Windows](https://github.com/coreybutler/staticassets/raw/master/images/nvm-1.1.8-screenshot.jpg)\n\nThere are situations where the ability to switch between different versions of Node.js can be very useful. For example, if you want to test a module you're developing with the latest bleeding edge version without uninstalling the stable version of node, this utility can help.\n\n![Switch between stable and unstable versions.](https://github.com/coreybutler/staticassets/raw/master/images/nvm-usage-highlighted.jpg)\n\n### Installation & Upgrades\n\n#### :star: :star: Uninstall any pre-existing Node installations!! :star: :star:\n\nThe simplest (recommended) way to get NVM for Windows running properly is to uninstall any prior Node installation _before_ installing NVM for Windows. It avoids all of the pitfalls listed below. However; you may not wish to nuke your Node installation if you've highly customized it. NVM for Windows _can_ assume management of an existing installation, but there are nuances to this (dependent entirely on the permissions of the user running the installation). If you have an administrative account, it's relatively safe to install NVM for Windows before uninstalling the original Node version. If you are working in a closed environment, such as a corporate Active Directory environment where installations/uninstallations are controlled by group policy, you should really consider removing the original version of Node before installing NVM4W.\n\n_Permission Problems_\nFor security reasons, Windows will not allow an application from one vendor to \"uninstall\" an application from a different vendor. The official NVM4W installer will attempt assume management of an existing installation of Node., but it cannot actually uninstall the original Node.js version. To work around this, NVM for Windows installer attempts to copy the original Node.js installation files to the NVM root. This includes global npm modules and configurations. Once this process is complete, the original Node.js installation can be uninstalled without losing data.\n\n_PATH Installation Problems_\nIf you attempt to configure the `NVM_SYMLINK` to use an existing directory (like `C:\\Program Files\\nodejs`), it will fail because a symlink cannot overwrite a physical directory. This is not a problem if you choose a different symlink path (such as `C:\\nvm\\node`).\n\n_PATH Conflicts_\nIf you do not uninstall the original version, running `nvm use` may appear to do nothing at all. Running `node -v` will always show the original installation version. This is due to a [`PATH` conflict](https://github.com/coreybutler/nvm-windows/wiki/Common-Issues#why-do-i-need-to-uninstall-nodejs-before-installing-nvm-for-windows) that presents when the same application is installed multiple times. In NVM4W 1.1.11+, run `nvm debug` to determine if you have a `PATH` conflict.\n\nFor simpliciy, we recommend uninstalling any existing versions of Node.js before using NVM for Windows. Delete any existing Node.js installation directories (e.g., `%ProgramFiles%\\nodejs`) that might remain. NVM's generated symlink will not overwrite an existing (even empty) installation directory.\n\n:eyes: **Backup any global `npmrc` config** :eyes:\n(e.g. `%AppData%\\npm\\etc\\npmrc`)\n\nAlternatively, copy the settings to the user config `%UserProfile%\\.npmrc`. Delete the existing npm install location (e.g. `%AppData%\\npm`) to prevent global module conflicts.\n\n#### Install nvm-windows\n\nUse the [latest installer](https://github.com/coreybutler/nvm/releases) (comes with an uninstaller). Alternatively, follow the  [manual installation](https://github.com/coreybutler/nvm-windows/wiki#manual-installation) guide.\n\n_If NVM4W doesn't appear to work immediately after installation, restart the terminal/powershell (not the whole computer)._\n\n![NVM for Windows Installer](https://github.com/coreybutler/staticassets/raw/master/images/nvm-installer.jpg)\n\n#### Reinstall any global utilities\n\nAfter install, reinstalling global utilities (e.g. yarn) will have to be done for each installed version of node:\n\n```\nnvm use 14.0.0\nnpm install -g yarn\nnvm use 12.0.1\nnpm install -g yarn\n```\n\n### Upgrading nvm-windows\n\n:bulb: _As of v1.1.8, there is an upgrade utility that will automate the upgrade process._\n\n**To upgrade nvm-windows**, run the new installer. It will safely overwrite the files it needs to update without touching your node.js installations. Make sure you use the same installation and symlink folder. If you originally installed to the default locations, you just need to click \"next\" on each window until it finishes.\n\n### Usage\n\n**nvm-windows runs in an Admin shell**. You'll need to start `powershell` or Command Prompt as Administrator to use nvm-windows\n\nNVM for Windows is a command line tool. Simply type `nvm` in the console for help. The basic commands are:\n\n- **`nvm arch [32|64]`**: Show if node is running in 32 or 64 bit mode. Specify 32 or 64 to override the default architecture.\n- **`nvm debug`**: Check the NVM4W process for known problems.\n- **`nvm current`**: Display active version.\n- **`nvm install <version> [arch]`**:  The version can be a specific version, \"latest\" for the latest current version, or \"lts\" for the most recent LTS version. Optionally specify whether to install the 32 or 64 bit version (defaults to system arch). Set [arch] to \"all\" to install 32 AND 64 bit versions. Add `--insecure` to the end of this command to bypass SSL validation of the remote download server.\n- **`nvm list [available]`**: List the node.js installations. Type `available` at the end to show a list of versions available for download.\n- **`nvm on`**: Enable node.js version management.\n- **`nvm off`**: Disable node.js version management (does not uninstall anything).\n- **`nvm proxy [url]`**: Set a proxy to use for downloads. Leave `[url]` blank to see the current proxy. Set `[url]` to \"none\" to remove the proxy.\n- **`nvm uninstall <version>`**: Uninstall a specific version.\n- **`nvm use <version> [arch]`**: Switch to use the specified version. Optionally use `latest`, `lts`, or `newest`. `newest` is the latest _installed_ version. Optionally specify 32/64bit architecture. `nvm use <arch>` will continue using the selected version, but switch to 32/64 bit mode. For information about using `use` in a specific directory (or using `.nvmrc`), please refer to [issue #16](https://github.com/coreybutler/nvm-windows/issues/16).\n- **`nvm root <path>`**: Set the directory where nvm should store different versions of node.js. If `<path>` is not set, the current root will be displayed.\n- **`nvm version`**: Displays the current running version of NVM for Windows.\n- **`nvm node_mirror <node_mirror_url>`**: Set the node mirror.People in China can use *https://npmmirror.com/mirrors/node/*\n- **`nvm npm_mirror <npm_mirror_url>`**: Set the npm mirror.People in China can use *https://npmmirror.com/mirrors/npm/*\n\n### :warning: Gotcha!\n\nPlease note that any global npm modules you may have installed are **not** shared between the various versions of node.js you have installed. Additionally, some npm modules may not be supported in the version of node you're using, so be aware of your environment as you work.\n\n### :name_badge: Antivirus\n\nUsers have reported some problems using antivirus, specifically McAfee. It appears the antivirus software is manipulating access to the VBScript engine. See [issue #133](https://github.com/coreybutler/nvm-windows/issues/133) for details and resolution.\n\n**v1.1.8 is not code signed**, but all other versions are signed by [Ecor Ventures LLC](https://ecorventures.com)/[Author.io](https://author.io). This should help prevent false positives with most antivirus software.\n\n> v1.1.8+ was not code signed due to an expired certificate (see the [release notes](https://github.com/coreybutler/nvm-windows/releases/tag/1.1.8) for reasons). **v1.1.9 _is_ code signed** thanks to [ajyong](https://github.com/ajyong), who sponsored the new certificate.\n\n### Using Yarn\n\n**tldr;** `npm i -g yarn`\n\nSee the [wiki](https://github.com/coreybutler/nvm-windows/wiki/Common-Issues#how-do-i-use-yarn-with-nvm-windows) for details.\n\n### Build from source\n\n- Install go from http://golang.org\n- Download source / Git Clone the repo\n- Change GOARCH to amd64 in build.bat if you feel like building a 64-bit executable\n- Fire up a Windows command prompt and change directory to project dir\n- Execute `go get github.com/blang/semver`\n- Execute `go get github.com/olekukonko/tablewriter`\n- Execute `build.bat`\n- Check the `dist`directory for generated setup program.\n\n---\n\n## :bulb: Why another version manager?\n\nThere are several version managers for node.js. Tools like [nvm](https://github.com/creationix/nvm) and [n](https://github.com/tj/n)\nonly run on Mac OSX and Linux. Windows users are left in the cold? No. [nvmw](https://github.com/hakobera/nvmw) and [nodist](https://github.com/marcelklehr/nodist)\nare both designed for Windows. So, why another version manager for Windows?\n\nThe architecture of most node version managers for Windows rely on `.bat` files, which do some clever tricks to set or mimic environment variables. Some of them use node itself (once it's downloaded), which is admirable, but prone to problems. Right around node 0.10.30, the installation structure changed a little, causing some of these to just stop working with anything new.\n\nAdditionally, some users struggle to install these modules since it requires a little more knowledge of node's installation structure. I believe if it were easier for people to switch between versions, people might take the time to test their code on back and future versions... which is just good practice.\n\n## :bulb: What's the big difference?\n\nFirst and foremost, this version of nvm has no dependency on node. It's written in [Go](https://golang.org/), which is a much more structured approach than hacking around a limited `.bat` file. It does not rely on having an existing node installation. Go offers the ability to create a Mac/Linux version on the same code base. In fact, this is already underway.\n\nThe control mechanism is also quite different. There are two general ways to support multiple node installations with hot switching capabilities. The first is to modify the system `PATH` any time you switch versions, or bypass it by using a `.bat` file to mimic the node executable and redirect accordingly. This always seemed a little hackish to me, and there are some quirks as a result of this implementation.\n\nThe second option is to use a symlink. This concept requires putting the symlink in the system `PATH`, then updating its target to the node installation directory you want to use. This is a straightforward approach, and seems to be what people recommend.... until they realize just how much of a pain symlinks are on Windows. This is why it hasn't happened before.\n\nIn order to create/modify a symlink, you must be running as an admin, and you must get around Windows UAC (that annoying prompt). Luckily, this is a challenge I already solved with some helper scripts in [node-windows](https://github.com/coreybutler/node-windows). As a result, NVM for Windows maintains a single symlink that is put in the system `PATH` during installation only. Switching to different versions of node is a matter of switching the symlink target. As a result, this utility does **not** require you to run `nvm use x.x.x` every time you open a console window. When you _do_ run `nvm use x.x.x`, the active version of node is automatically updated across all open console windows. It also persists between system reboots, so you only need to use nvm when you want to make a change.\n\nNVM for Windows comes with an installer, courtesy of a byproduct of my work on [Fenix Web Server](https://preview.fenixwebserver.com).\n\nOverall, this project brings together some ideas, a few battle-hardened pieces of other modules, and support for newer versions of node.\n\nNVM for Windows recognizes the \"latest\" versions using a [list](https://nodejs.org/download/release/index.json) provided by the Node project. Version 1.1.1+ use this list. Before this list existed, I was scraping releases and serving it as a standalone [data feed](https://github.com/coreybutler/nodedistro). This list was used in versions 1.1.0 and prior, but is now deprecated.\n\n## Motivation\n\nI needed it, plain and simple. Additionally, it's apparent that [support for multiple versions](https://github.com/nodejs/node-v0.x-archive/issues/8075) is not coming to node core. It was also an excuse to play with Go.\n\n## Why Go? Why not Node?\n\nI chose Go because it is cross-platform, felt like less overhead than Java, has been around longer than most people think. Plus, I wanted to experiment with it. I've been asked why I didn't write it with Node. Trying to write a tool with the tool you're trying to install doesn't make sense to me. As a result, my project requirements for this were simple... something that's not Node. Node will continue to evolve and change. If you need a reminder of that, remember io.js, Ayo, all the breaking changes between 4.x.x and 6.x.x, and the shift to ES Modules in 12+. Change is inevitable in the world of software. JavaScript is extremely dynamic.\n\n## :pray: Thanks\n\nThanks to everyone who has submitted issues on and off Github, made suggestions, and generally helped make this a better project. Special thanks to\n\n- [@vkbansal](https://github.com/vkbansal), who provided significant early feedback throughout the early releases.\n- [@rainabba](https://github.com/rainabba) and [@sullivanpt](https://github.com/sullivanpt) for getting Node v4 support integrated.\n- [@s-h-a-d-o-w](https://github.com/s-h-a-d-o-w) who resolved the longstanding space escaping issue in path names ([#355](https://github.com/coreybutler/nvm-windows/pull/355)).\n- [ajyong](https://github.com/ajyong) who sponsored the code signing certificate in late 2021.\n\n<br/>\n\n![Contributors](https://contrib.rocks/image?repo=coreybutler/nvm-windows)\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 0.7890625,
          "content": "# Need Help?\n\nIf you're running into problems using NVM4W, try the following resources.\n\n1. Review the [wiki](https://github.com/coreybutler/nvm-windows/wiki).\n1. Join ongoing [discussions](https://github.com/coreybutler/nvm-windows/discussions).\n1. Search [closed issues](https://github.com/coreybutler/nvm-windows/issues?q=is%3Aissue+is%3Aclosed) for existing solutions.\n1. Search [StackOverflow ([nvm-windows])](https://stackoverflow.com/questions/tagged/nvm-windows) for answers.\n\nThere are also a number of [YouTube videos](https://www.youtube.com/results?search_query=NVM+for+Windows) and blogs online that show how to use NVM for Windows.\n\nIf none of these things help and you suspect a bug, file an issue.\n\nYou can also try reaching out to [@goldglovecb](https://twitter.com/goldglovecb) on Twitter.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.js",
          "type": "blob",
          "size": 1.2294921875,
          "content": "// This is a deno helper script to locally build the installer using Inno Setup\n// Yeah, I know  it's not Node, but we need to compile this and Node SEAs on Win32 are a PITA.\nconst content = await Deno.readTextFile('./nvm.iss')\nconst data = JSON.parse(await Deno.readTextFile('./src/manifest.json'))\nconst {version} = data\nconst output = content.replaceAll('{{VERSION}}', version)\nawait Deno.writeTextFile('./.tmp.iss', output)\n\nconsole.log('Viewing /.tmp.iss')\noutput.split(\"\\n\").forEach((line, num) => {\n  let n = `${num+1}`\n  while (n.length < 3) {\n    n = ' ' + n\n  }\n\n  console.log(`${n} | ${line}`)\n})\n\nconst command = await new Deno.Command('.\\\\assets\\\\buildtools\\\\iscc.exe', {\n  args: ['.\\\\.tmp.iss'],\n  stdout: 'piped',\n  stderr: 'piped',\n})\n\nconst process = command.spawn();\n\n// Stream stdout\n(async () => {\n  const decoder = new TextDecoder();\n  for await (const chunk of process.stdout) {\n    console.log(decoder.decode(chunk));\n  }\n})();\n\n// Stream stderr\n(async () => {\n  const decoder = new TextDecoder();\n  for await (const chunk of process.stderr) {\n    console.error(decoder.decode(chunk));\n  }\n})();\n\n// Wait for completion\nconst status = await process.status;\nDeno.remove('.\\\\.tmp.iss');\nif (!status.success) {\n  Deno.exit(status.code);\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "nvm.iss",
          "type": "blob",
          "size": 19.236328125,
          "content": "#define MyAppName \"NVM for Windows\"\n#define MyAppShortName \"nvm\"\n#define MyAppLCShortName \"nvm\"\n#define MyAppVersion \"{{VERSION}}\"\n#define MyAppPublisher \"Author Software Inc.\"\n#define MyAppURL \"https://github.com/coreybutler/nvm-windows\"\n#define MyAppExeName \"nvm.exe\"\n#define MyIcon \"bin\\nvm.ico\"\n#define MyAppId \"40078385-F676-4C61-9A9C-F9028599D6D3\"\n#define ProjectRoot \".\"\n\n[Setup]\n; NOTE: The value of AppId uniquely identifies this application.\n; Do not use the same AppId value in installers for other applications.\nPrivilegesRequired=admin\n; SignTool=MsSign $f\n; SignedUninstaller=yes\nAppId={#MyAppId}\nAppName={#MyAppName}\nAppVersion={#MyAppVersion}\nAppCopyright=Copyright (C) 2018-{code:GetCurrentYear} Author Software Inc., Ecor Ventures LLC, Corey Butler, and contributors.\nAppVerName={#MyAppName} {#MyAppVersion}\nAppPublisher={#MyAppPublisher}\nAppPublisherURL={#MyAppURL}\nAppSupportURL={#MyAppURL}\nAppUpdatesURL={#MyAppURL}\nDefaultDirName={localappdata}\\{#MyAppShortName}\nDisableDirPage=no\nDefaultGroupName={#MyAppName}\nAllowNoIcons=yes\nLicenseFile={#ProjectRoot}\\LICENSE\nOutputDir={#ProjectRoot}\\dist\\{#MyAppVersion}\nOutputBaseFilename={#MyAppLCShortName}-setup\nSetupIconFile={#ProjectRoot}\\{#MyIcon}\nCompression=lzma\nSolidCompression=yes\nChangesEnvironment=yes\nDisableProgramGroupPage=yes\nArchitecturesInstallIn64BitMode=x64\nUninstallDisplayIcon={app}\\{#MyIcon}\n\n; Version information\nVersionInfoVersion={{VERSION}}.0\nVersionInfoCopyright=Copyright © {code:GetCurrentYear} Author Software Inc., Ecor Ventures LLC, Corey Butler, and contributors.\nVersionInfoCompany=Author Software Inc.\nVersionInfoDescription=Node.js version manager for Windows\nVersionInfoProductName={#MyAppShortName}\nVersionInfoProductTextVersion={#MyAppVersion}\n\n[Languages]\nName: \"english\"; MessagesFile: \"compiler:Default.isl\"\n\n[Tasks]\nName: \"quicklaunchicon\"; Description: \"{cm:CreateQuickLaunchIcon}\"; GroupDescription: \"{cm:AdditionalIcons}\"; Flags: unchecked; OnlyBelowVersion: 0,6.1\n\n[Files]\nSource: \"{#ProjectRoot}\\bin\\*\"; DestDir: \"{app}\"; BeforeInstall: PreInstall; Flags: ignoreversion recursesubdirs createallsubdirs; Excludes: \"{#ProjectRoot}\\bin\\install.cmd\"\n\n[Icons]\nName: \"{group}\\{#MyAppShortName}\"; Filename: \"{app}\\{#MyAppExeName}\"; IconFilename: \"{#MyIcon}\"\nName: \"{group}\\Uninstall {#MyAppShortName}\"; Filename: \"{uninstallexe}\"\n\n[Registry]\n; Register the URL protocol 'nvm'\nRoot: HKCR; Subkey: \"{#MyAppShortName}\"; ValueType: string; ValueName: \"\"; ValueData: \"URL:nvm\"; Flags: uninsdeletekey\nRoot: HKCR; Subkey: \"{#MyAppShortName}\"; ValueType: string; ValueName: \"URL Protocol\"; ValueData: \"\"; Flags: uninsdeletekey\nRoot: HKCR; Subkey: \"{#MyAppShortName}\\DefaultIcon\"; ValueType: string; ValueName: \"\"; ValueData: \"{app}\\{#MyAppExeName},0\"; Flags: uninsdeletekey\nRoot: HKCR; Subkey: \"{#MyAppShortName}\\shell\\launch\\command\"; ValueType: string; ValueName: \"\"; ValueData: \"\"\"{app}\\{#MyAppExeName}\"\" \"\"%1\"\"\"; Flags: uninsdeletekey\n\n[Code]\nvar\n  SymlinkPage: TInputDirWizardPage;\n  NotificationOptionPage: TInputOptionWizardPage;\n  EmailPage: TWizardPage;\n  EmailEdit: TEdit;\n  EmailLabel: TLabel;\n  PreText: TLabel;\n\nfunction GetCurrentYear(Param: String): String;\nbegin\n  result := GetDateTimeString('yyyy', '-', ':');\nend;\n\nfunction IsDirEmpty(dir: string): Boolean;\nvar\n  FindRec: TFindRec;\n  ct: Integer;\nbegin\n  ct := 0;\n  if FindFirst(ExpandConstant(dir + '\\*'), FindRec) then\n  try\n    repeat\n      if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then\n        ct := ct+1;\n    until\n      not FindNext(FindRec);\n  finally\n    FindClose(FindRec);\n    Result := ct = 0;\n  end;\nend;\n\n//function getInstalledVersions(dir: string):\nvar\n  nodeInUse: string;\n\nprocedure TakeControl(np: string; nv: string);\nvar\n  path: string;\nbegin\n  // Move the existing node.js installation directory to the nvm root & update the path\n  RenameFile(np,ExpandConstant('{app}')+'\\'+nv);\n\n  RegQueryStringValue(HKEY_LOCAL_MACHINE,\n    'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment',\n    'Path', path);\n\n  StringChangeEx(path,np+'\\','',True);\n  StringChangeEx(path,np,'',True);\n  StringChangeEx(path,np+';;',';',True);\n\n  RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment', 'Path', path);\n\n  RegQueryStringValue(HKEY_CURRENT_USER,\n    'Environment',\n    'Path', path);\n\n  StringChangeEx(path,np+'\\','',True);\n  StringChangeEx(path,np,'',True);\n  StringChangeEx(path,np+';;',';',True);\n\n  RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', path);\n\n  nodeInUse := ExpandConstant('{app}')+'\\'+nv;\n\nend;\n\nfunction Ansi2String(AString:AnsiString):String;\nvar\n i : Integer;\n iChar : Integer;\n outString : String;\nbegin\n outString :='';\n for i := 1 to Length(AString) do\n begin\n  iChar := Ord(AString[i]); //get int value\n  outString := outString + Chr(iChar);\n end;\n\n Result := outString;\nend;\n\nprocedure PreInstall();\nvar\n  TmpResultFile, TmpJS, NodeVersion, NodePath: string;\n  stdout: Ansistring;\n  ResultCode: integer;\n  msg1, msg2, msg3, dir1: Boolean;\nbegin\n  // Create a file to check for Node.JS\n  TmpJS := ExpandConstant('{tmp}') + '\\nvm_check.js';\n  SaveStringToFile(TmpJS, 'console.log(require(\"path\").dirname(process.execPath));', False);\n\n  // Execute the node file and save the output temporarily\n  TmpResultFile := ExpandConstant('{tmp}') + '\\nvm_node_check.txt';\n  Exec(ExpandConstant('{cmd}'), '/C node \"'+TmpJS+'\" > \"' + TmpResultFile + '\"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);\n  DeleteFile(TmpJS)\n\n  // Process the results\n  LoadStringFromFile(TmpResultFile,stdout);\n  NodePath := Trim(Ansi2String(stdout));\n  if DirExists(NodePath) then begin\n    Exec(ExpandConstant('{cmd}'), '/C node -v > \"' + TmpResultFile + '\"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);\n    LoadStringFromFile(TmpResultFile, stdout);\n    NodeVersion := Trim(Ansi2String(stdout));\n    msg1 := SuppressibleMsgBox('Node '+NodeVersion+' is already installed. Do you want NVM to control this version?', mbConfirmation, MB_YESNO, IDYES) = IDNO;\n    if msg1 then begin\n      msg2 := SuppressibleMsgBox('NVM cannot run in parallel with an existing Node.js installation. Node.js must be uninstalled before NVM can be installed, or you must allow NVM to control the existing installation. Do you want NVM to control node '+NodeVersion+'?', mbConfirmation, MB_YESNO, IDYES) = IDYES;\n      if msg2 then begin\n        TakeControl(NodePath, NodeVersion);\n      end;\n      if not msg2 then begin\n        DeleteFile(TmpResultFile);\n        WizardForm.Close;\n      end;\n    end;\n    if not msg1 then\n    begin\n      TakeControl(NodePath, NodeVersion);\n    end;\n  end;\n\n  // Make sure the symlink directory doesn't exist\n  if DirExists(SymlinkPage.Values[0]) then begin\n    // If the directory is empty, just delete it since it will be recreated anyway.\n    dir1 := IsDirEmpty(SymlinkPage.Values[0]);\n    if dir1 then begin\n      RemoveDir(SymlinkPage.Values[0]);\n    end;\n    if not dir1 then begin\n      msg3 := SuppressibleMsgBox(SymlinkPage.Values[0]+' will be overwritten and all contents will be lost. Do you want to proceed?', mbConfirmation, MB_OKCANCEL, IDOK) = IDOK;\n      if msg3 then begin\n        RemoveDir(SymlinkPage.Values[0]);\n      end;\n      if not msg3 then begin\n        //RaiseException('The symlink cannot be created due to a conflict with the existing directory at '+SymlinkPage.Values[0]);\n        WizardForm.Close;\n      end;\n    end;\n  end;\nend;\n\nfunction IsSymbolicLink(const Path: string): Boolean;\nvar\n  FindRec: TFindRec;\nbegin\n  Result := False;\n  if FindFirst(Path, FindRec) then\n  begin\n    Result := (FindRec.Attributes and FILE_ATTRIBUTE_REPARSE_POINT) <> 0;\n    FindClose(FindRec);\n  end;\nend;\n\nprocedure SymlinkPageChange(Sender: TObject);\nvar\n  NewPath: string;\nbegin\n  // Append '\\nodejs' to the path if it is not already appended\n  NewPath := AddBackslash(SymlinkPage.Values[0]) + 'nodejs';\n  if Copy(SymlinkPage.Values[0], Length(SymlinkPage.Values[0]) - Length('\\nodejs') + 1, Length('\\nodejs')) <> '\\nodejs' then\n    SymlinkPage.Values[0] := NewPath;\n\n  // Check if the new path exists and is not a symbolic link\n  if DirExists(NewPath) and not IsSymbolicLink(NewPath) then\n  begin\n    MsgBox('The directory \"' + NewPath + '\" already exists as a physical directory. Please choose a different location.', mbError, MB_OK);\n    SymlinkPage.Values[0] := '';\n  end;\nend;\n\nprocedure InitializeWizard;\nbegin\n  SymlinkPage := CreateInputDirPage(wpSelectDir,\n    'Active Version Location',\n    'The active version of Node.js will always be available at this location.',\n    'Select the folder in which Setup should create the symlink, then click Next.',\n    False, '');\n  SymlinkPage.Add('This directory will automatically be added to your system path.');\n  SymlinkPage.Values[0] := ExpandConstant('C:\\nvm4w\\nodejs');\n\n  // Assign the OnChange event handler\n  SymlinkPage.Edits[0].OnChange := @SymlinkPageChange;\n\n  // Notification option page (after the Symlink page)\n  NotificationOptionPage := CreateInputOptionPage(\n    SymlinkPage.ID, // Ensures the Notification page appears right after the Symlink page\n    'Desktop Notifications (PREVIEW)',\n    'NVM for Windows supports the basic (free) edition of Author Notifications.',\n    'Select the events you wish to be notified of. Your choices can be modified at any time in the future.',\n    FALSE,\n    FALSE);\n\n  // Pre-checked checkbox\n  NotificationOptionPage.AddEx('Node.js LTS releases (Long-Term Support/Stable)', 0, FALSE);\n  NotificationOptionPage.AddEx('Node.js Current releases (Latest/Testing)', 0, FALSE);\n  NotificationOptionPage.AddEx('NVM For Windows releases', 0, FALSE);\n  NotificationOptionPage.AddEx('Author updates and releases (upcoming NVM for Windows successor)', 0, FALSE);\n  NotificationOptionPage.Values[0] := TRUE;\n  NotificationOptionPage.Values[1] := TRUE;\n  NotificationOptionPage.Values[2] := TRUE;\n  NotificationOptionPage.Values[3] := TRUE;\n\n  // Email Input Page\n  EmailPage := CreateCustomPage(\n    NotificationOptionPage.ID,\n    'Author Progress Email Signup',\n    'Get details about Author development milestones in your inbox.');\n\n  // Add introductory text above the input field\n  PreText := TLabel.Create(WizardForm);\n  PreText.Parent := EmailPage.Surface;\n  PreText.Caption := 'Author is the upcoming successor to NVM for Windows. Provide your email address to be informed of development milestones, release timelines, and enterprise capabilities. ' +\n                     'Leave it blank if you do not wish to receive notifications.';\n  PreText.Left := 10;\n  PreText.Top := 10;\n  PreText.Width := 600; // Adjust width to fit the text\n  PreText.WordWrap := True; // Ensures the text wraps if it exceeds the width\n\n  // Add a label for the email input field\n  EmailLabel := TLabel.Create(WizardForm);\n  EmailLabel.Parent := EmailPage.Surface;\n  EmailLabel.Caption := 'Email Address: (Optional)';\n  EmailLabel.Font.Style := [fsBold];\n  EmailLabel.Left := 10;  // Position from the left\n  EmailLabel.Top := 80;   // Position from the top\n\n  // Add an email input field on the EmailPage\n  EmailEdit := TEdit.Create(WizardForm);\n  EmailEdit.Parent := EmailPage.Surface;\n  EmailEdit.Left := 10;   // Align with the label\n  EmailEdit.Top := 110;    // Position just below the label\n  EmailEdit.Width := 610;\n  EmailEdit.Text := ''; // Default value\nend;\n\nfunction LastPos(const SubStr, S: string): Integer;\nvar\n  I: Integer;\nbegin\n  Result := 0;\n  for I := Length(S) downto 1 do\n  begin\n    if Copy(S, I, Length(SubStr)) = SubStr then\n    begin\n      Result := I;\n      Exit;\n    end;\n  end;\nend;\n\nfunction IsValidEmail(const Email: string): Boolean;\nvar\n  AtPos, DotPos: Integer;\nbegin\n  AtPos := Pos('@', Email);\n  DotPos := LastPos('.', Email);\n  Result := (AtPos > 1) and (DotPos > AtPos + 1) and (DotPos < Length(Email));\nend;\n\nfunction NextButtonClick(CurPageID: Integer): Boolean;\nvar\n  Email: string;\nbegin\n  Result := True; // Allow navigation by default\n\n  if CurPageID = SymlinkPage.ID then\n  begin\n    // Check if the directory is empty\n    if DirExists(SymlinkPage.Values[0]) then\n    begin\n      if IsDirEmpty(SymlinkPage.Values[0]) then\n      begin\n        // If the directory is empty, just delete it since it will be recreated anyway.\n        RemoveDir(SymlinkPage.Values[0]);\n      end\n      else\n      begin\n        // Show a warning if the directory is not empty\n        MsgBox('The selected directory is not empty. Please choose a different path.', mbError, MB_OK);\n        Result := False; // Prevent navigation to the next page\n      end;\n    end;\n  end;\n\n  if CurPageID = EmailPage.ID then\n  begin\n    Email := Trim(EmailEdit.Text); // Remove leading/trailing spaces\n    if (Email <> '') and not IsValidEmail(Email) then\n    begin\n      MsgBox('Please enter a valid email address or leave the field blank.', mbError, MB_OK);\n      Result := False; // Prevent navigation to the next page\n    end\n    else\n    begin\n      WizardForm.NextButton.Enabled := True; // Allow navigation to the next page\n    end;\n  end;\n\n  // Handle the Notification page logic\n  if CurPageID = NotificationOptionPage.ID then\n  begin\n    if NotificationOptionPage.Values[0] then\n    begin\n      Log('User opted to enable Node.js release notifications.');\n      // Add your logic for enabling notifications here\n    end\n    else\n    begin\n      Log('User opted out of Node.js release notifications.');\n    end;\n  end;\nend;\n\nfunction InitializeUninstall(): Boolean;\nvar\n  path: string;\n  nvm_symlink: string;\nbegin\n  SuppressibleMsgBox('Removing NVM for Windows will remove the nvm command and all versions of node.js, including global npm modules.', mbInformation, MB_OK, IDOK);\n\n  // Remove the symlink\n  RegQueryStringValue(HKEY_LOCAL_MACHINE,\n    'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment',\n    'NVM_SYMLINK', nvm_symlink);\n  RemoveDir(nvm_symlink);\n\n  // Clean the registry\n  RegDeleteValue(HKEY_LOCAL_MACHINE,\n    'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment',\n    'NVM_HOME')\n  RegDeleteValue(HKEY_LOCAL_MACHINE,\n    'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment',\n    'NVM_SYMLINK')\n  RegDeleteValue(HKEY_CURRENT_USER,\n    'Environment',\n    'NVM_HOME')\n  RegDeleteValue(HKEY_CURRENT_USER,\n    'Environment',\n    'NVM_SYMLINK')\n\n  RegQueryStringValue(HKEY_LOCAL_MACHINE,\n    'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment',\n    'Path', path);\n\n  StringChangeEx(path,'%NVM_HOME%','',True);\n  StringChangeEx(path,'%NVM_SYMLINK%','',True);\n  StringChangeEx(path,';;',';',True);\n\n  RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment', 'Path', path);\n\n  RegQueryStringValue(HKEY_CURRENT_USER,\n    'Environment',\n    'Path', path);\n\n  StringChangeEx(path,'%NVM_HOME%','',True);\n  StringChangeEx(path,'%NVM_SYMLINK%','',True);\n  StringChangeEx(path,';;',';',True);\n\n  RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', path);\n\n  Result := True;\nend;\n\n// Generate the settings file based on user input & update registry\nprocedure CurStepChanged(CurStep: TSetupStep);\nvar\n  path: string;\n  rootDir: string;\nbegin\n  if CurStep = ssInstall then\n  begin\n    // Ensure the root directory exists\n    rootDir := ExtractFileDir(SymlinkPage.Values[0]);\n    if not DirExists(rootDir) then\n    begin\n      if not CreateDir(rootDir) then\n      begin\n        MsgBox('Failed to create root directory: ' + rootDir, mbError, MB_OK);\n        WizardForm.Close;\n      end;\n    end;\n  end;\n\n  if CurStep = ssPostInstall then\n  begin\n    SaveStringToFile(ExpandConstant('{app}\\settings.txt'), 'root: ' + ExpandConstant('{app}') + #13#10 + 'path: ' + SymlinkPage.Values[0] + #13#10, False);\n\n    // Add Registry settings\n    RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment', 'NVM_HOME', ExpandConstant('{app}'));\n    RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment', 'NVM_SYMLINK', SymlinkPage.Values[0]);\n    RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'NVM_HOME', ExpandConstant('{app}'));\n    RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'NVM_SYMLINK', SymlinkPage.Values[0]);\n\n    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{#MyAppId}_is1', 'DisplayVersion', '{#MyAppVersion}');\n\n    // Update system and user PATH if needed\n    RegQueryStringValue(HKEY_LOCAL_MACHINE,\n      'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment',\n      'Path', path);\n    if Pos('%NVM_HOME%',path) = 0 then begin\n      path := path+';%NVM_HOME%';\n      StringChangeEx(path,';;',';',True);\n      RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment', 'Path', path);\n    end;\n    if Pos('%NVM_SYMLINK%',path) = 0 then begin\n      path := path+';%NVM_SYMLINK%';\n      StringChangeEx(path,';;',';',True);\n      RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment', 'Path', path);\n    end;\n     RegQueryStringValue(HKEY_CURRENT_USER,\n      'Environment',\n      'Path', path);\n    if Pos('%NVM_HOME%',path) = 0 then begin\n      path := path+';%NVM_HOME%';\n      StringChangeEx(path,';;',';',True);\n      RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', path);\n    end;\n    if Pos('%NVM_SYMLINK%',path) = 0 then begin\n      path := path+';%NVM_SYMLINK%';\n      StringChangeEx(path,';;',';',True);\n      RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', path);\n    end;\n  end;\n\nend;\n\nfunction GetNotificationString(Param: String): String;\nbegin\n  Result := ' subscribe';\n  if NotificationOptionPage.Values[0] then\n  begin\n    Result := Result + ' --lts';\n  end;\n  if NotificationOptionPage.Values[1] then\n  begin\n    Result := Result + ' --current';\n  end;\n  if NotificationOptionPage.Values[2] then\n  begin\n    Result := Result + ' --nvm4w';\n  end;\n  if NotificationOptionPage.Values[3] then\n  begin\n    Result := Result + ' --author';\n  end;\n  Result := Trim(Result);\nend;\n\nfunction getSymLink(o: string): string;\nbegin\n  Result := SymlinkPage.Values[0];\nend;\n\nfunction getCurrentVersion(o: string): string;\nbegin\n  Result := nodeInUse;\nend;\n\nfunction isNodeAlreadyInUse(): boolean;\nbegin\n  Result := Length(nodeInUse) > 0;\nend;\n\nfunction isEmailSupplied(): boolean;\nbegin\n  Result := Trim(EmailEdit.Text) <> '';\nend;\n\nfunction GetEmailRegistrationString(Param: String): string;\nbegin\n  Result := ' author newsletter --notify ' + Trim(EmailEdit.Text);\nend;\n\n[Run]\nFilename: \"{app}\\nvm.exe\"; Parameters: \"{code:GetNotificationString}\"; Flags: waituntilidle runhidden;\nFilename: \"{app}\\nvm.exe\"; Parameters: \"{code:GetEmailRegistrationString}\"; Check: isEmailSupplied; Flags: waituntilidle runhidden;\nFilename: \"{cmd}\"; Parameters: \"/C \"\"mklink /D \"\"{code:getSymLink}\"\" \"\"{code:getCurrentVersion}\"\"\"\" \"; Check: isNodeAlreadyInUse; Flags: waituntilidle runhidden;\nFilename: \"powershell.exe\"; Parameters: \"-NoExit -Command refreshenv; cls; Write-Host 'Welcome to NVM for Windows v{{VERSION}}'\"; Description: \"Open with Powershell\"; Flags: postinstall skipifsilent;\n\n[UninstallRun]\nFilename: \"{app}\\nvm.exe\"; Parameters: \"unsubscribe --lts --current --nvm4w --author\"; Flags: runhidden; RunOnceId: \"UnregisterNVMForWindows\";\nFilename: \"{app}\\nvm.exe\"; Parameters: \"off\"; Flags: runhidden; RunOnceId: \"RemoveNVMForWindowsSymlink\";\nFilename: \"{cmd}\"; Parameters: \"/C rmdir /S /Q \"\"{code:getSymLink}\"\"\"; Flags: runhidden; RunOnceId: \"RemoveSymlink\";\n\n[UninstallDelete]\nType: filesandordirs; Name: \"{app}\";\nType: filesandordirs; Name: \"{localappdata}\\.nvm\";\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}