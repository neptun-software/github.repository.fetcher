{
  "metadata": {
    "timestamp": 1736568158086,
    "page": 55,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tmrts/go-patterns",
      "stars": 25726,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4541015625,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.prof\n# Test binary, build with `go test -c`\n*.test\n# Binaries for programs and plugins\n*.exe\n*.dll\n*.dylib\n\n# JetBrains project files\n.idea/\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.2021484375,
          "content": "language: node_js\n\nenv:\n  global:\n    - GH_REPO=\"github.com/tmrts/go-patterns\"\n    - secure: SRAVBGLCkoVpCNC5J43qC6xcQvigIYbGKgLMLiP9B4XiyKH/Q6VGjk/BVVPYuC0d072jNjgfhVdTLx/jGgy6nN+AD7i8U/FoDY6pQmy4cK1nghUUlt44mq7JTlXYHLmV3NsaxmRMV5QuO9L/9AMcCh6U0MxrgMYafSPaSdHQq8hTkFFOYU05zKKUihLF3sVfEZ0KpxhHjtKA+SqcJK2NjqaGdySaziSe6Nj1kZgF9/SJkOiw/bM7O4/uqFXqEGZo5QaOQpwaj2B0wfGqwfJtyE2wM+80Aw5Ya/yqdQWplUozHKv36/u1N45cHkeDbr+RXnBpmUfGh8YTbInWh9BjyU5MLgKeJTtUMAVvwr/soa+OsHuGmdeVM5mRdXISlFSnXCkoowJ6iQsPdqGvYROz0KqqXmkVDuUKdxPU4ShyKo/LqtRwXvxQS9etF4ais8MoNmW0zI3eKdc4b6cpCXWt5fUtK8uzSUGDHHVFGpWnk8VsF0cPfLYxd9bo87amHqYGQoPJ4ughTtOAbA6uSNlcDM9AkQ591+vHpQE15td2VXUOf7aKqqPFWy+GagsI/yPry6v3d/Mk5D4ZLUXZGOv5uvengyos0dxWg9EV1yjm/mpiCtuqAtvV9HMNxcMGGCii7dMy37WmGBj3HBqeGPYHvt8pKMo2/gkcXxadzBXvJVs=\n\ninstall:\n  - npm install gitbook-cli\n  - gitbook install\n\nscript:\n  - gitbook build . out\n\nafter_success:\n  - echo -e \"Deploying updates to GitHub...\"\n  - MSG=$(git log -1 --oneline)\n  - cd out\n  - git config --global user.email \"contact@tmrts.com\"\n  - git config --global user.name \"Tamer Tas\"\n  - git init\n  - git checkout -b gh-pages\n  - git add -A :/\n  - git commit -m \"Travis CI | ${MSG}\"\n  - git push \"https://${GH_TOKEN}@${GH_REPO}\" gh-pages -f\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0458984375,
          "content": "# Contribution Guidelines\n\nPlease ensure your pull request adheres to the following guidelines:\n\n- Make an individual pull request for each suggestion.\n- Choose the corresponding patterns section for your suggestion.\n- List, after your addition, should be in lexicographical order.\n\n## Commit Messages Guidelines\n\n- The message should be in imperative form and uncapitalized.\n- If possible, please include an explanation in the commit message body\n- Use the form `<pattern-section>/<pattern-name>: <message>` (e.g. `creational/singleton: refactor singleton constructor`)\n\n## Pattern Template\n\nEach pattern should have a single markdown file containing the important part of the implementation, the usage and the explanations for it. This is to ensure that the reader doesn't have to read bunch of boilerplate to understand what's going on and the code is as simple as possible and not simpler.\n\nPlease use the following template for adding new patterns:\n\n```markdown\n# <Pattern-Name>\n<Pattern description>\n\n## Implementation\n\n## Usage\n\n// Optional\n## Rules of Thumb \n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.9345703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.384765625,
          "content": "<p align=\"center\">\n  <img src=\"/gopher.png\" height=\"400\">\n  <h1 align=\"center\">\n    Go Patterns\n    <br>\n    <a href=\"http://travis-ci.org/tmrts/go-patterns\"><img alt=\"build-status\" src=\"https://img.shields.io/badge/build-passing-brightgreen.svg?style=flat-square\" /></a>\n    <a href=\"https://github.com/sindresorhus/awesome\" ><img alt=\"awesome\" src=\"https://img.shields.io/badge/awesome-%E2%9C%93-ff69b4.svg?style=flat-square\" /></a>\n    <a href=\"https://github.com/tmrts/go-patterns/blob/master/LICENSE\" ><img alt=\"license\" src=\"https://img.shields.io/badge/license-Apache%20License%202.0-E91E63.svg?style=flat-square\" /></a>\n  </h1>\n</p>\n\nA curated collection of idiomatic design & application patterns for Go language.\n\n## Creational Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Abstract Factory](/creational/abstract_factory.md) | Provides an interface for creating families of releated objects | ✘ |\n| [Builder](/creational/builder.md) | Builds a complex object using simple objects | ✔ |\n| [Factory Method](/creational/factory.md) | Defers instantiation of an object to a specialized function for creating instances | ✔ |\n| [Object Pool](/creational/object-pool.md) | Instantiates and maintains a group of objects instances of the same type | ✔ |\n| [Singleton](/creational/singleton.md) | Restricts instantiation of a type to one object | ✔ |\n\n## Structural Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Bridge](/structural/bridge.md) | Decouples an interface from its implementation so that the two can vary independently | ✘ |\n| [Composite](/structural/composite.md) | Encapsulates and provides access to a number of different objects | ✘ |\n| [Decorator](/structural/decorator.md) | Adds behavior to an object, statically or dynamically | ✔ |\n| [Facade](/structural/facade.md) | Uses one type as an API to a number of others | ✘ |\n| [Flyweight](/structural/flyweight.md) | Reuses existing instances of objects with similar/identical state to minimize resource usage | ✘ |\n| [Proxy](/structural/proxy.md) | Provides a surrogate for an object to control it's actions | ✔ |\n\n## Behavioral Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Chain of Responsibility](/behavioral/chain_of_responsibility.md) | Avoids coupling a sender to receiver by giving more than object a chance to handle the request | ✘ |\n| [Command](/behavioral/command.md) | Bundles a command and arguments to call later | ✘ |\n| [Mediator](/behavioral/mediator.md) | Connects objects and acts as a proxy | ✘ |\n| [Memento](/behavioral/memento.md) | Generate an opaque token that can be used to go back to a previous state | ✘ |\n| [Observer](/behavioral/observer.md) | Provide a callback for notification of events/changes to data | ✔ |\n| [Registry](/behavioral/registry.md) | Keep track of all subclasses of a given class | ✘ |\n| [State](/behavioral/state.md) | Encapsulates varying behavior for the same object based on its internal state | ✘ |\n| [Strategy](/behavioral/strategy.md) | Enables an algorithm's behavior to be selected at runtime | ✔ |\n| [Template](/behavioral/template.md) | Defines a skeleton class which defers some methods to subclasses | ✘ |\n| [Visitor](/behavioral/visitor.md) | Separates an algorithm from an object on which it operates | ✘ |\n\n## Synchronization Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Condition Variable](/synchronization/condition_variable.md) | Provides a mechanism for threads to temporarily give up access in order to wait for some condition | ✘ |\n| [Lock/Mutex](/synchronization/mutex.md) | Enforces mutual exclusion limit on a resource to gain exclusive access | ✘ |\n| [Monitor](/synchronization/monitor.md) | Combination of mutex and condition variable patterns | ✘ |\n| [Read-Write Lock](/synchronization/read_write_lock.md) | Allows parallel read access, but only exclusive access on write operations to a resource | ✘ |\n| [Semaphore](/synchronization/semaphore.md) | Allows controlling access to a common resource | ✔ |\n\n## Concurrency Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [N-Barrier](/concurrency/barrier.md) | Prevents a process from proceeding until all N processes reach to the barrier | ✘ |\n| [Bounded Parallelism](/concurrency/bounded_parallelism.md) | Completes large number of independent tasks with resource limits | ✔ |\n| [Broadcast](/concurrency/broadcast.md) | Transfers a message to all recipients simultaneously | ✘ |\n| [Coroutines](/concurrency/coroutine.md) | Subroutines that allow suspending and resuming execution at certain locations | ✘ |\n| [Generators](/concurrency/generator.md) | Yields a sequence of values one at a time | ✔ |\n| [Reactor](/concurrency/reactor.md) | Demultiplexes service requests delivered concurrently to a service handler and dispatches them syncronously to the associated request handlers | ✘ |\n| [Parallelism](/concurrency/parallelism.md) | Completes large number of independent tasks | ✔ |\n| [Producer Consumer](/concurrency/producer_consumer.md) | Separates tasks from task executions | ✘ |\n\n## Messaging Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Fan-In](/messaging/fan_in.md) | Funnels tasks to a work sink (e.g. server) | ✔ |\n| [Fan-Out](/messaging/fan_out.md) | Distributes tasks among workers (e.g. producer) | ✔ |\n| [Futures & Promises](/messaging/futures_promises.md) | Acts as a place-holder of a result that is initially unknown for synchronization purposes | ✘ |\n| [Publish/Subscribe](/messaging/publish_subscribe.md) | Passes information to a collection of recipients who subscribed to a topic | ✔ |\n| [Push & Pull](/messaging/push_pull.md) | Distributes messages to multiple workers, arranged in a pipeline | ✘ |\n\n## Stability Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Bulkheads](/stability/bulkhead.md)  | Enforces a principle of failure containment (i.e. prevents cascading failures) | ✘ |\n| [Circuit-Breaker](/stability/circuit-breaker.md) | Stops the flow of the requests when requests are likely to fail | ✔ |\n| [Deadline](/stability/deadline.md) | Allows clients to stop waiting for a response once the probability of response becomes low (e.g. after waiting 10 seconds for a page refresh) | ✘ |\n| [Fail-Fast](/stability/fail_fast.md) | Checks the availability of required resources at the start of a request and fails if the requirements are not satisfied | ✘ |\n| [Handshaking](/stability/handshaking.md) | Asks a component if it can take any more load, if it can't, the request is declined | ✘ |\n| [Steady-State](/stability/steady_state.md) | For every service that accumulates a resource, some other service must recycle that resource | ✘ |\n\n## Profiling Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Timing Functions](/profiling/timing.md) | Wraps a function and logs the execution | ✔ |\n\n## Idioms\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Functional Options](/idiom/functional-options.md) | Allows creating clean APIs with sane defaults and idiomatic overrides | ✔ |\n\n## Anti-Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Cascading Failures](/anti-patterns/cascading_failures.md) | A failure in a system of interconnected parts in which the failure of a part causes a domino effect | ✘ |\n"
        },
        {
          "name": "SUMMARY.md",
          "type": "blob",
          "size": 2.822265625,
          "content": "# Summary\n\n* [Go Patterns](/README.md)\n  * [Creational Patterns](/README.md#creational-patterns)\n    * [Abstract Factory](/creational/abstract_factory.md)\n    * [Builder](/creational/builder.md)\n    * [Factory Method](/creational/factory.md)\n    * [Object Pool](/creational/object-pool.md)\n    * [Singleton](/creational/singleton.md)\n  * [Structural Patterns](/README.md#structural-patterns)\n    * [Bridge](/structural/bridge.md)\n    * [Composite](/structural/composite.md)\n    * [Decorator](/structural/decorator.md)\n    * [Facade](/structural/facade.md)\n    * [Flyweight](/structural/flyweight.md)\n    * [Proxy](/structural/proxy.md)\n  * [Behavioral Patterns](/README.md#behavioral-patterns)\n    * [Chain of Responsibility](/behavioral/chain_of_responsibility.md)\n    * [Command](/behavioral/command.md)\n    * [Mediator](/behavioral/mediator.md)\n    * [Memento](/behavioral/memento.md)\n    * [Observer](/behavioral/observer.md)\n    * [Registry](/behavioral/registry.md)\n    * [State](/behavioral/state.md)\n    * [Strategy](/behavioral/strategy.md)\n    * [Template](/behavioral/template.md)\n    * [Visitor](/behavioral/visitor.md)\n  * [Synchronization Patterns](/README.md#synchronization-patterns)\n    * [Condition Variable](/synchronization/condition_variable.md)\n    * [Lock/Mutex](/synchronization/mutex.md)\n    * [Monitor](/synchronization/monitor.md)\n    * [Read-Write Lock](/synchronization/read_write_lock.md)\n    * [Semaphore](/synchronization/semaphore.md)\n  * [Concurrency Patterns](/README.md#concurrency-patterns)\n    * [N-Barrier](/concurrency/barrier.md)\n    * [Bounded Parallelism](/concurrency/bounded_parallelism.md)\n    * [Broadcast](/concurrency/broadcast.md)\n    * [Coroutines](/concurrency/coroutine.md)\n    * [Generators](/concurrency/generator.md)\n    * [Reactor](/concurrency/reactor.md)\n    * [Parallelism](/concurrency/parallelism.md)\n    * [Producer Consumer](/concurrency/producer_consumer.md)\n  * [Messaging Patterns](/README.md#messaging-patterns)\n    * [Fan-In](/messaging/fan_in.md)\n    * [Fan-Out](/messaging/fan_out.md)\n    * [Futures & Promises](/messaging/futures_promises.md)\n    * [Publish/Subscribe](/messaging/publish_subscribe.md)\n    * [Push & Pull](/messaging/push_pull.md)\n  * [Stability Patterns](/README.md#stability-patterns)\n    * [Bulkheads](/stability/bulkhead.md)\n    * [Circuit-Breaker](/stability/circuit-breaker.md)\n    * [Deadline](/stability/deadline.md)\n    * [Fail-Fast](/stability/fail_fast.md)\n    * [Handshaking](/stability/handshaking.md)\n    * [Steady-State](/stability/steady_state.md)\n  * [Profiling Patterns](/README.md#profiling-patterns)\n    * [Timing Functions](/profiling/timing.md)\n  * [Idioms](/README.md#idioms)\n    * [Functional Options](/idiom/functional-options.md)\n  * [Anti-Patterns](/README.md#anti-patterns)\n    * [Cascading Failures](/anti-patterns/cascading_failures.md)\n* [Contributing](/CONTRIBUTING.md)\n"
        },
        {
          "name": "behavioral",
          "type": "tree",
          "content": null
        },
        {
          "name": "book.json",
          "type": "blob",
          "size": 0.3427734375,
          "content": "{\n    \"plugins\": [\n        \"-search\", \n        \"-lunr\",\n        \"github\",\n        \"edit-link\"\n    ],\n    \"pluginsConfig\": {\n        \"github\": {\n            \"url\": \"https://github.com/tmrts/go-patterns\"\n        },\n        \"edit-link\": {\n            \"base\": \"https://github.com/tmrts/go-patterns/edit/master/\",\n            \"label\": \"\"\n        }\n    }\n}\n"
        },
        {
          "name": "concurrency",
          "type": "tree",
          "content": null
        },
        {
          "name": "creational",
          "type": "tree",
          "content": null
        },
        {
          "name": "gopher.png",
          "type": "blob",
          "size": 107.2509765625,
          "content": null
        },
        {
          "name": "idiom",
          "type": "tree",
          "content": null
        },
        {
          "name": "messaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "profiling",
          "type": "tree",
          "content": null
        },
        {
          "name": "stability",
          "type": "tree",
          "content": null
        },
        {
          "name": "structural",
          "type": "tree",
          "content": null
        },
        {
          "name": "synchronization",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}