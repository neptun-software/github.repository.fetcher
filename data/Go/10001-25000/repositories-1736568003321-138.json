{
  "metadata": {
    "timestamp": 1736568003321,
    "page": 138,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenNHP/opennhp",
      "stars": 13526,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.236328125,
          "content": "# Binaries for programs and plugins\r\n*.exe\r\n*.exe~\r\n*.dll\r\n*.so\r\n*.dylib\r\n\r\n# Test binary, build with `go test -c`\r\n*.test\r\n\r\n# Output of the go coverage tool, specifically when used with LiteIDE\r\n*.out\r\n\r\n# Go workspace\r\ngo.sum\r\n\r\nrelease/\r\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.0966796875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nopennhp@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.6083984375,
          "content": "export GO111MODULE := on\n\nall: generate-version-and-build\n\n# Repo settings\nGIT_REPO = github.com/OpenNHP/opennhp\n\n# Version and build settings\nMAKEFLAGS += --no-print-directory\nOS_NAME = $(shell uname -s | tr A-Z a-z)\n\n# Version number auto increment \nTIMESTAMP=$(shell date +%y%m%d%H%M%S)\nVERSION = $(shell cat version/VERSION).$(TIMESTAMP)\n# Other version settings\nCOMMIT_ID = $(shell git show -s --format=%H)\nCOMMIT_TIME = $(shell git show -s --format=%cd --date=format:'%Y-%m-%d %H:%M:%S')\nBUILD_TIME = $(shell date \"+%Y-%m-%d %H:%M:%S\")\n# Built Package File Name\nPACKAGE_FILE = opennhp-$(VERSION).tar.gz\n# Go build flags\nLD_FLAGS = \"-s -w -X '${GIT_REPO}/version.Version=${VERSION}' -X '${GIT_REPO}/version.CommitId=${COMMIT_ID}' -X '${GIT_REPO}/version.CommitTime=${COMMIT_TIME}' -X '${GIT_REPO}/version.BuildTime=${BUILD_TIME}'\"\n\n# Color definition\nCOLOUR_GREEN=\\033[0;32m\nCOLOUR_RED=\\033[0;31m\nCOLOUR_BLUE=\\033[0;34m\nEND_COLOUR=\\033[0m\n\n# Plugins\nNHP_PLUGINS = server/plugins\n\ngenerate-version-and-build:\n\t@echo \"$(COLOUR_BLUE)[OpenNHP] Start building... $(END_COLOUR)\"\n\t@echo \"$(COLOUR_BLUE)Version: ${VERSION} $(END_COLOUR)\"\n\t@echo \"$(COLOUR_BLUE)Commit id: ${COMMIT_ID} $(END_COLOUR)\"\n\t@echo \"$(COLOUR_BLUE)Commit time: ${COMMIT_TIME} $(END_COLOUR)\"\n\t@echo \"$(COLOUR_BLUE)Build time: ${BUILD_TIME} $(END_COLOUR)\"\n\t@$(MAKE) init\n\t@$(MAKE) agentd\n\t@$(MAKE) acd\n\t@$(MAKE) serverd\n\t@$(MAKE) kgc\n\t@$(MAKE) agentsdk\n\t@$(MAKE) devicesdk\n\t@$(MAKE) plugins\n\t@$(MAKE) archive\n\t@echo \"$(COLOUR_GREEN)[OpenNHP] Build for platform ${OS_NAME} successfully done!$(END_COLOUR)\"\n\ninit:\n\tgit clean -df release\n\tgo mod tidy\n\nagentd:\n\tgo build -trimpath -ldflags ${LD_FLAGS} -v -o ./release/nhp-agent/nhp-agentd ./agent/main/main.go\n\tcp ./agent/main/etc/*.toml ./release/nhp-agent/etc/\n\nacd:\n\tgo build -trimpath -ldflags ${LD_FLAGS} -v -o ./release/nhp-ac/nhp-acd ./ac/main/main.go\n\tcp ./ac/main/etc/*.toml ./release/nhp-ac/etc/\n\nserverd:\n\tgo build -trimpath -ldflags ${LD_FLAGS} -v -o ./release/nhp-server/nhp-serverd ./server/main/main.go\n\tmkdir -p ./release/nhp-server/etc\n\tcp ./server/main/etc/*.toml ./release/nhp-server/etc/\n\nkgc:\n\t@echo \"$(COLOUR_BLUE)[KGC] Building KGC module... $(END_COLOUR)\"\n\tmkdir -p ./release/kgc/etc\n\t@cd kgc/main && go build -trimpath -ldflags ${LD_FLAGS} -v -o ../../release/kgc/kgc ./main.go\n\tcp ./kgc/main/etc/*.toml ./release/kgc/etc/ 2>/dev/null || true\n\t@echo \"$(COLOUR_GREEN)[KGC] Build completed!$(END_COLOUR)\"\n\n\nagentsdk:\nifeq ($(OS_NAME), linux)\n\tgo build -a -trimpath -buildmode=c-shared -ldflags ${LD_FLAGS} -v -o ./release/nhp-agent/nhp-agent.so ./agent/main/main.go ./agent/main/export.go\n\tgcc ./agent/sdkdemo/nhp-agent-demo.c -I ./release/nhp-agent -l:nhp-agent.so -L./release/nhp-agent -Wl,-rpath=. -o ./release/nhp-agent/nhp-agent-demo\nendif\n\ndevicesdk:\nifeq ($(OS_NAME), linux)\n\tgo build -a -trimpath -buildmode=c-shared -ldflags ${LD_FLAGS} -v -o ./release/nhp-device/nhpdevice.so ./core/main/main.go ./core/main/nhpdevice.go\n#\tgcc ./core/sdkdemo/nhp-device-demo.c -I ./release/nhp-device -I ./core/main -l:nhpdevice.so -L./release/nhp-device -Wl,-rpath=. -o ./release/nhp-device/nhp-device-demo\nendif\n\nplugins:\n\t@if test -d $(NHP_PLUGINS); then $(MAKE) -C $(NHP_PLUGINS); fi\n\ntest:\n\t@echo \"[OpenNHP] Runing Tests for the Output Binaries ...\"\n\t@echo \"$(COLOUR_GREEN)[OpenNHP] All Tests Are Done!$(END_COLOUR)\"\n\narchive:\n\t@echo \"$(COLOUR_BLUE)[OpenNHP] Start archiving... $(END_COLOUR)\"\n\t@cd release && mkdir -p archive && tar -czvf ./archive/$(PACKAGE_FILE) nhp-agent nhp-ac nhp-server\n\t@echo \"$(COLOUR_GREEN)[OpenNHP] Package ${PACKAGE_FILE} archived!$(END_COLOUR)\"\n\n.PHONY: all generate-version-and-build init agentsdk devicesdk plugins test archive \n"
        },
        {
          "name": "README.de.md",
          "type": "blob",
          "size": 18.9404296875,
          "content": "[![en](https://img.shields.io/badge/lang-en-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.md)\r\n[![zh-cn](https://img.shields.io/badge/lang-zh--cn-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.zh-cn.md)\r\n[![de](https://img.shields.io/badge/lang-de-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.de.md)\r\n[![ja](https://img.shields.io/badge/lang-ja-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.ja.md)\r\n[![fr](https://img.shields.io/badge/lang-fr-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.fr.md)\r\n[![es](https://img.shields.io/badge/lang-es-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.es.md)\r\n\r\n![OpenNHP Logo](docs/images/logo11.png)\r\n# OpenNHP: Zero Trust Netzwerk-Infrastruktur-Verbergungsprotokoll\r\nEin leichtgewichtiges, kryptographisch getriebenes Zero Trust Netzwerkprotokoll auf der OSI-Schicht 5, um Ihren Server und Ihre Daten vor Angreifern zu verbergen.\r\n\r\n![Build Status](https://img.shields.io/badge/build-passing-brightgreen)\r\n![Version](https://img.shields.io/badge/version-1.0.0-blue)\r\n![Lizenz](https://img.shields.io/badge/license-Apache%202.0-green)\r\n\r\n---\r\n\r\n## Herausforderung: KI verwandelt das Internet in einen \"Dunklen Wald\"\r\n\r\nDer schnelle Fortschritt der **KI**-Technologien, insbesondere großer Sprachmodelle (LLMs), verändert die Cybersicherheitslandschaft erheblich. Das Aufkommen der **autonomen Ausnutzung von Schwachstellen (AVE)** stellt einen großen Fortschritt im KI-Zeitalter dar, indem es die Ausnutzung von Schwachstellen automatisiert, wie in [diesem Forschungspapier](https://arxiv.org/abs/2404.08144) gezeigt wird. Diese Entwicklung erhöht das Risiko für alle exponierten Netzwerkdienste erheblich und erinnert an die [Dunkle Wald-Hypothese](https://de.wikipedia.org/wiki/Dunkler_Wald) des Internets. KI-gesteuerte Tools scannen kontinuierlich die digitale Umgebung, identifizieren schnell Schwachstellen und nutzen sie aus. Folglich entwickelt sich das Internet zu einem **\"dunklen Wald\"**, in dem **Sichtbarkeit Verwundbarkeit bedeutet**.\r\n\r\n![Verwundbarkeitsrisiken](docs/images/Vul_Risks.png)\r\n\r\nGartner prognostiziert einen [schnellen Anstieg von KI-gesteuerten Cyberangriffen](https://www.gartner.com/en/newsroom/press-releases/2024-08-28-gartner-forecasts-global-information-security-spending-to-grow-15-percent-in-2025). Dieser Wandel erfordert eine Neubewertung traditioneller Cybersicherheitsstrategien mit einem Fokus auf proaktive Verteidigungsmaßnahmen, schnelle Reaktionsmechanismen und die Einführung von Netzwerkverbergungstechnologien zum Schutz kritischer Infrastrukturen.\r\n\r\n---\r\n\r\n## Schnelle Demo: OpenNHP in Aktion sehen\r\n\r\nBevor wir in die Details von OpenNHP eintauchen, beginnen wir mit einer kurzen Demonstration, wie OpenNHP einen Server vor unbefugtem Zugriff schützt. Sie können dies in Aktion sehen, indem Sie den geschützten Server unter https://acdemo.opennhp.org aufrufen.\r\n\r\n### 1) Der geschützte Server ist für nicht authentifizierte Benutzer \"unsichtbar\"\r\n\r\nStandardmäßig führt jeder Versuch, eine Verbindung zum geschützten Server herzustellen, zu einem TIME OUT-Fehler, da alle Ports geschlossen sind, wodurch der Server *\"unsichtbar\"* und scheinbar offline wird.\r\n\r\n![OpenNHP Demo](docs/images/OpenNHP_ACDemo0.png)\r\n\r\nDas Scannen der Ports des Servers führt ebenfalls zu einem TIME OUT-Fehler.\r\n\r\n![OpenNHP Demo](docs/images/OpenNHP_ScanDemo.png)\r\n\r\n### 2) Nach der Authentifizierung wird der geschützte Server zugänglich\r\n\r\nOpenNHP unterstützt eine Vielzahl von Authentifizierungsmethoden, wie OAuth, SAML, QR-Codes und mehr. Für diese Demonstration verwenden wir einen einfachen Benutzernamen/Passwort-Authentifizierungsdienst unter https://demologin.opennhp.org.\r\n\r\n![OpenNHP Demo](docs/images/OpenNHP_DemoLogin.png)\r\n\r\nSobald Sie auf die Schaltfläche \"Login\" klicken, ist die Authentifizierung erfolgreich und Sie werden zum geschützten Server weitergeleitet. Zu diesem Zeitpunkt wird der Server *\"sichtbar\"* und auf Ihrem Gerät zugänglich.\r\n\r\n![OpenNHP Demo](docs/images/OpenNHP_ACDemo1.png)\r\n\r\n---\r\n\r\n## Vision: Das Internet vertrauenswürdig machen\r\n\r\nDie Offenheit der TCP/IP-Protokolle hat das explosive Wachstum von Internetanwendungen vorangetrieben, aber auch Schwachstellen offengelegt, die es böswilligen Akteuren ermöglichen, unbefugten Zugriff zu erhalten und jede exponierte IP-Adresse auszunutzen. Obwohl das [OSI-Netzwerkmodell](https://de.wikipedia.org/wiki/OSI-Modell) die *5. Schicht (Sitzungsschicht)* zur Verwaltung von Verbindungen definiert, wurden bisher nur wenige effektive Lösungen hierfür implementiert.\r\n\r\n**NHP**, oder das **\"Netzwerk-Infrastruktur-Verbergungsprotokoll\"**, ist ein leichtgewichtiges, kryptographisch getriebenes Zero Trust Netzwerkprotokoll, das auf der *OSI-Sitzungsschicht* arbeitet und sich ideal zur Verwaltung der Netzwerkvisibilität und Verbindungen eignet. Das Hauptziel von NHP ist es, geschützte Ressourcen vor unbefugten Entitäten zu verbergen und den Zugriff nur verifizierten, autorisierten Benutzern durch kontinuierliche Überprüfung zu gewähren, um so zu einem vertrauenswürdigeren Internet beizutragen.\r\n\r\n![Vertrauenswürdiges Internet](docs/images/TrustworthyCyberspace.png)\r\n\r\n---\r\n\r\n## Lösung: OpenNHP stellt die Kontrolle über die Netzwerkvisibilität wieder her\r\n\r\n**OpenNHP** ist die Open-Source-Implementierung des NHP-Protokolls. Es basiert auf der Kryptographie und wurde mit Sicherheitsprinzipien im Vordergrund entwickelt, um eine echte Zero Trust-Architektur auf der *OSI-Sitzungsschicht* zu implementieren.\r\n\r\n![OpenNHP als OSI 5. Schicht](docs/images/OSI_OpenNHP.png)\r\n\r\nOpenNHP baut auf früheren Forschungen zur Netzwerkverbergungstechnologie auf und nutzt moderne kryptographische Rahmenwerke und Architektur, um Sicherheit und hohe Leistung zu gewährleisten und die Einschränkungen früherer Technologien zu überwinden.\r\n\r\n| Netzwerk-Infrastruktur-Verbergungsprotokoll | 1. Generation | 2. Generation | 3. Generation |\r\n|:---|:---|:---|:---|\r\n| **Kerntechnologie** | [Port Knocking](https://de.wikipedia.org/wiki/Port_knocking) | [Single Packet Authorization (SPA)](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2) | Netzwerk-Infrastruktur-Verbergungsprotokoll (NHP) |\r\n| **Authentifizierung** | Port-Sequenzen | Geteilte Geheimnisse | Modernes Kryptographie-Rahmenwerk |\r\n| **Architektur** | Kein Kontrollplan | Kein Kontrollplan | Skalierbarer Kontrollplan |\r\n| **Fähigkeit** | Ports verbergen | Ports verbergen | Ports, IPs und Domains verbergen |\r\n| **Zugriffskontrolle** | IP-Ebene | Port-Ebene | Anwendungsebene |\r\n| **Open-Source-Projekte** | [knock](https://github.com/jvinet/knock) *(C)* | [fwknop](https://github.com/mrash/fwknop) *(C++)* | [OpenNHP](https://github.com/OpenNHP/opennhp) *(Go)* |\r\n\r\n> Es ist entscheidend, eine **speichersichere** Sprache wie *Go* für die Entwicklung von OpenNHP zu wählen, wie im [technischen Bericht der US-Regierung](https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf) betont wird. Für einen detaillierten Vergleich zwischen **SPA und NHP** lesen Sie bitte die [Abschnitt unten](#comparison-between-spa-and-nhp).\r\n\r\n## Sicherheitsvorteile\r\n\r\nDa OpenNHP Zero Trust-Prinzipien auf der *OSI-Sitzungsschicht* implementiert, bietet es erhebliche Vorteile:\r\n\r\n- Reduziert die Angriffsfläche durch Verbergen der Infrastruktur\r\n- Verhindert unbefugte Netzwerkaufklärung\r\n- Mildert die Ausnutzung von Schwachstellen\r\n- Verhindert Phishing durch verschlüsseltes DNS\r\n- Schützt vor DDoS-Angriffen\r\n- Ermöglicht granulare Zugriffskontrolle\r\n- Bietet verbindungsbasierte Identitätsverfolgung\r\n- Angriffszurechnung\r\n\r\n## Architektur\r\n\r\nDie Architektur von OpenNHP orientiert sich an der [NIST Zero Trust-Architektur](https://www.nist.gov/publications/zero-trust-architecture). Sie folgt einem modularen Design mit drei Hauptkomponenten: **NHP-Server**, **NHP-AC** und **NHP-Agent**, wie in der folgenden Abbildung dargestellt.\r\n\r\n![OpenNHP Architektur](docs/images/OpenNHP_Arch.png)\r\n\r\n> Weitere Informationen zur Architektur und zum Workflow finden Sie in der [OpenNHP-Dokumentation](https://opennhp.org/).\r\n\r\n## Kern: Kryptographische Algorithmen\r\n\r\nKryptographie steht im Mittelpunkt von OpenNHP und bietet robuste Sicherheit, hervorragende Leistung und Skalierbarkeit durch den Einsatz modernster kryptographischer Algorithmen. Nachfolgend sind die wichtigsten kryptographischen Algorithmen und Frameworks aufgeführt, die von OpenNHP verwendet werden:\r\n\r\n- **[Elliptische Kurvenkryptographie (ECC)](https://de.wikipedia.org/wiki/Elliptische-Kurven-Kryptographie)**: Wird für effiziente asymmetrische Kryptographie verwendet.\r\n\r\n> Im Vergleich zu RSA bietet ECC eine höhere Effizienz mit stärkerer Verschlüsselung bei kürzeren Schlüssellängen, was sowohl die Netzwerkübertragung als auch die Rechenleistung verbessert. Die folgende Tabelle zeigt die Unterschiede in der Sicherheitsstärke, den Schlüssellängen und dem Verhältnis zwischen RSA und ECC sowie die jeweiligen Gültigkeitszeiträume.\r\n\r\n| Sicherheitsstärke (Bits) | DSA/RSA-Schlüssellänge (Bits) | ECC-Schlüssellänge (Bits) | Verhältnis: ECC zu DSA/RSA | Gültigkeit |\r\n|:------------------------:|:-----------------------------:|:------------------------:|:--------------------------:|:---------:|\r\n| 80                       | 1024                          | 160-223                  | 1:6                        | Bis 2010  |\r\n| 112                      | 2048                          | 224-255                  | 1:9                        | Bis 2030  |\r\n| 128                      | 3072                          | 256-383                  | 1:12                       | Nach 2031 |\r\n| 192                      | 7680                          | 384-511                  | 1:20                       |           |\r\n| 256                      | 15360                         | 512+                     | 1:30                       |           |\r\n\r\n- **[Noise Protocol Framework](https://noiseprotocol.org/)**: Ermöglicht sicheren Schlüsselaustausch, Nachrichtenverschlüsselung/-entschlüsselung und gegenseitige Authentifizierung.\r\n\r\n> Das Noise-Protokoll basiert auf dem [Diffie-Hellman-Schlüsselaustausch](https://de.wikipedia.org/wiki/Diffie-Hellman-Schl%C3%BCsselaustausch) und bietet moderne kryptographische Lösungen wie gegenseitige und optionale Authentifizierung, Identitätsverbergung, Vorwärtsgeheimnis und null Round-Trip-Verschlüsselung. Es hat sich bereits durch seine Sicherheit und Leistung bewährt und wird von beliebten Anwendungen wie [WhatsApp](https://www.whatsapp.com/security/WhatsApp-Security-Whitepaper.pdf), [Slack](https://github.com/slackhq/nebula) und [WireGuard](https://www.wireguard.com/) verwendet.\r\n\r\n- **[Identitätsbasierte Kryptographie (IBC)](https://de.wikipedia.org/wiki/Identit%C3%A4tsbasierte_Kryptographie)**: Vereinfacht die Schlüsselverteilung im großen Maßstab.\r\n\r\n> Eine effiziente Schlüsselverteilung ist entscheidend für die Umsetzung von Zero Trust. OpenNHP unterstützt sowohl PKI als auch IBC. Während PKI seit Jahrzehnten weit verbreitet ist, hängt es von zentralisierten Zertifizierungsstellen (CA) zur Identitätsprüfung und Schlüsselverwaltung ab, was zeitaufwändig und kostspielig sein kann. Im Gegensatz dazu ermöglicht IBC einen dezentralisierten und selbstverwalteten Ansatz für die Identitätsprüfung und Schlüsselverwaltung, was es kostengünstiger für die Zero Trust-Umgebung von OpenNHP macht, in der Milliarden von Geräten oder Servern in Echtzeit geschützt und eingebunden werden müssen.\r\n\r\n- **[Zertifikatslose Kryptographie (CL-PKC)](https://de.wikipedia.org/wiki/Zertifikatslose_Kryptographie)**: Empfohlener IBC-Algorithmus\r\n\r\n> CL-PKC ist ein Schema, das die Sicherheit verbessert, indem es die Schlüsselverwaltung vermeidet und die Einschränkungen der identitätsbasierten Kryptographie (IBC) angeht. In den meisten IBC-Systemen wird der private Schlüssel eines Benutzers von einer Schlüsselgenerierungsstelle (KGC) erstellt, was erhebliche Risiken birgt. Ein kompromittierter KGC kann zur Offenlegung der privaten Schlüssel aller Benutzer führen, wodurch volles Vertrauen in den KGC erforderlich ist. CL-PKC mindert dieses Problem, indem der Schlüsselerstellungsprozess aufgeteilt wird, sodass der KGC nur einen Teil des privaten Schlüssels kennt. Dadurch kombiniert CL-PKC die Stärken von PKI und IBC und bietet eine stärkere Sicherheit ohne die Nachteile der zentralisierten Schlüsselverwaltung.\r\n\r\nWeiterführende Informationen:\r\n\r\n> Weitere Details zu den in OpenNHP verwendeten kryptographischen Algorithmen finden Sie in der [OpenNHP-Dokumentation](https://opennhp.org/cryptography/).\r\n\r\n## Hauptfunktionen\r\n\r\n- Mildert die Ausnutzung von Schwachstellen, indem standardmäßig \"deny-all\"-Regeln angewendet werden\r\n- Verhindert Phishing-Angriffe durch verschlüsselte DNS-Auflösung\r\n- Schützt vor DDoS-Angriffen, indem die Infrastruktur verborgen wird\r\n- Ermöglicht Angriffszurechnung durch identitätsbasierte Verbindungen\r\n- Standardmäßig verweigerter Zugriff auf alle geschützten Ressourcen\r\n- Authentifizierung basierend auf Identität und Geräten vor dem Netzwerkzugang\r\n- Verschlüsselte DNS-Auflösung, um DNS-Hijacking zu verhindern\r\n- Verteilte Infrastruktur zur Minderung von DDoS-Angriffen\r\n- Skalierbare Architektur mit entkoppelten Komponenten\r\n- Integration mit bestehenden Systemen zur Verwaltung von Identitäten und Zugriffen\r\n- Unterstützung für verschiedene Bereitstellungsmodelle (Client-zu-Gateway, Client-zu-Server usw.)\r\n- Kryptographisch sicher unter Verwendung moderner Algorithmen (ECC, Noise Protocol, IBC)\r\n\r\n<details>\r\n<summary>Klicken Sie hier, um die Funktionsdetails zu erweitern</summary>\r\n\r\n- **Standardmäßig verweigerter Zugriff**: Alle Ressourcen sind standardmäßig verborgen und werden nur nach Authentifizierung und Autorisierung zugänglich.\r\n- **Authentifizierung basierend auf Identität und Geräten**: Stellt sicher, dass nur bekannte Benutzer auf zugelassenen Geräten Zugriff erhalten.\r\n- **Verschlüsselte DNS-Auflösung**: Verhindert DNS-Hijacking und damit verbundene Phishing-Angriffe.\r\n- **DDoS-Minderung**: Das verteilte Infrastruktursystem hilft beim Schutz vor DDoS-Angriffen.\r\n- **Skalierbare Architektur**: Entkoppelte Komponenten ermöglichen flexiblen Einsatz und Skalierung.\r\n- **IAM-Integration**: Funktioniert mit Ihren bestehenden Systemen zur Verwaltung von Identitäten und Zugriffen.\r\n- **Flexibler Einsatz**: Unterstützt verschiedene Modelle, einschließlich Client-zu-Gateway, Client-zu-Server und mehr.\r\n- **Starke Kryptographie**: Nutzt moderne Algorithmen wie ECC, Noise Protocol und IBC für robuste Sicherheit.\r\n</details>\r\n\r\n## Bereitstellung\r\n\r\nOpenNHP unterstützt mehrere Bereitstellungsmodelle für unterschiedliche Anwendungsfälle:\r\n\r\n- Client-zu-Gateway: Sichert den Zugriff auf mehrere Server hinter einem Gateway\r\n- Client-zu-Server: Sichert direkt einzelne Server/Anwendungen\r\n- Server-zu-Server: Sichert die Kommunikation zwischen Backend-Diensten\r\n- Gateway-zu-Gateway: Sichert Standort-zu-Standort-Verbindungen\r\n\r\n> Weitere Details zur Bereitstellung finden Sie in der [OpenNHP-Dokumentation](https://opennhp.org/deploy/).\r\n\r\n## Vergleich zwischen SPA und NHP\r\nDas Single Packet Authorization (SPA)-Protokoll ist in der vom [Cloud Security Alliance (CSA)](https://cloudsecurityalliance.org/) veröffentlichten [Software Defined Perimeter (SDP)-Spezifikation](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2) enthalten. NHP verbessert die Sicherheit, Zuverlässigkeit, Skalierbarkeit und Erweiterbarkeit durch ein modernes kryptographisches Framework und eine moderne Architektur, wie im [AHAC-Forschungspapier](https://www.mdpi.com/2076-3417/14/13/5593) gezeigt.\r\n\r\n| - | SPA | NHP | Vorteile von NHP |\r\n|:---|:---|:---|:---|\r\n| **Architektur** | Das SPA-Paketentschlüsselungs- und Benutzer-/Geräteauthentifizierungskomponente ist mit der Netzwerkzugriffskontrollkomponente im SPA-Server gekoppelt. | NHP-Server (die Paketentschlüsselungs- und Benutzer-/Geräteauthentifizierungskomponente) und NHP-AC (die Zugriffskontrollkomponente) sind entkoppelt. Der NHP-Server kann auf separaten Hosts bereitgestellt werden und unterstützt horizontale Skalierung. | <ul><li>Performance: Die ressourcenintensive Komponente NHP-Server ist vom geschützten Server getrennt.</li><li>Skalierbarkeit: Der NHP-Server kann im verteilten oder Cluster-Modus bereitgestellt werden.</li><li>Sicherheit: Die IP-Adresse des geschützten Servers ist für den Client nicht sichtbar, solange die Authentifizierung nicht erfolgreich war.</li></ul>|\r\n| **Kommunikation** | Einfache Richtung | Bidirektional | Bessere Zuverlässigkeit durch Statusbenachrichtigung der Zugriffskontrolle |\r\n| **Kryptographisches Framework** | Geteilte Geheimnisse | PKI oder IBC, Noise Framework | <ul><li>Sicherheit: Bewährter Schlüsselvereinbarungsmechanismus zur Abschwächung von MITM-Bedrohungen</li><li>Niedrige Kosten: Effiziente Schlüsselverteilung für das Zero Trust-Modell</li><li>Performance: Hochleistungs-Verschlüsselung/Entschlüsselung</li></ul>|\r\n| **Fähigkeit zur Verbergung der Netzwerkinfrastruktur** | Nur Serverports | Domains, IPs und Ports | Stärker gegen verschiedene Angriffe (z.B. Schwachstellen, DNS-Hijacking und DDoS-Angriffe) |\r\n| **Erweiterbarkeit** | Keine, nur für SDP | Universell | Unterstützt jedes Szenario, das eine Dienstverschleierung erfordert |\r\n| **Interoperabilität** | Nicht verfügbar | Anpassbar | NHP kann nahtlos mit bestehenden Protokollen (z.B. DNS, FIDO usw.) integriert werden |\r\n\r\n## Beitrag leisten\r\n\r\nWir begrüßen Beiträge zu OpenNHP! Bitte lesen Sie unsere [Beitragsrichtlinien](CONTRIBUTING.md), um mehr darüber zu erfahren, wie Sie sich beteiligen können.\r\n\r\n## Lizenz\r\n\r\nOpenNHP wird unter der [Apache 2.0-Lizenz](LICENSE) veröffentlicht.\r\n\r\n## Kontakt\r\n\r\n- Projekt-Website: [https://github.com/OpenNHP/opennhp](https://github.com/OpenNHP/opennhp)\r\n- E-Mail: [opennhp@gmail.com](mailto:opennhp@gmail.com)\r\n- Slack-Kanal: [Treten Sie unserem Slack bei](https://slack.opennhp.org)\r\n\r\nFür eine detaillierte Dokumentation besuchen Sie bitte unsere [Offizielle Dokumentation](https://opennhp.org).\r\n\r\n## Referenzen\r\n\r\n- [Software-Defined Perimeter (SDP) Specification v2.0](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2). Jason Garbis, Juanita Koilpillai, Junaid lslam, Bob Flores, Daniel Bailey, Benfeng Chen, Eitan Bremler, Michael Roza, Ahmed Refaey Hussein. [*Cloud Security Alliance (CSA)*](https://cloudsecurityalliance.org/). März 2022.\r\n- [AHAC: Fortschrittliches Netzwerk-Verbergung-Zugriffskontroll-Framework](https://www.mdpi.com/2076-3417/14/13/5593). Mudi Xu, Benfeng Chen, Zhizhong Tan, Shan Chen, Lei Wang, Yan Liu, Tai Io San, Sou Wang Fong, Wenyong Wang und Jing Feng. *Zeitschrift für Angewandte Wissenschaften*. Juni 2024.\r\n- Noise Protocol Framework. https://noiseprotocol.org/\r\n- Vulnerability Management Framework-Projekt. https://phoenix.security/web-vuln-management/\r\n\r\n---\r\n\r\n🌟 Vielen Dank für Ihr Interesse an OpenNHP! Wir freuen uns auf Ihre Beiträge und Ihr Feedback.\r\n\r\n"
        },
        {
          "name": "README.es.md",
          "type": "blob",
          "size": 19.0947265625,
          "content": "[![en](https://img.shields.io/badge/lang-en-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.md)\r\n[![zh-cn](https://img.shields.io/badge/lang-zh--cn-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.zh-cn.md)\r\n[![de](https://img.shields.io/badge/lang-de-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.de.md)\r\n[![ja](https://img.shields.io/badge/lang-ja-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.ja.md)\r\n[![fr](https://img.shields.io/badge/lang-fr-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.fr.md)\r\n[![es](https://img.shields.io/badge/lang-es-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.es.md)\r\n\r\n![Logo OpenNHP](docs/images/logo11.png)\r\n# OpenNHP: Protocolo de Ocultación de Infraestructura de Red Zero Trust\r\nUn protocolo de red de confianza cero impulsado por criptografía en la capa 5 del modelo OSI para ocultar su servidor y sus datos de los atacantes.\r\n\r\n![Estado de Construcción](https://img.shields.io/badge/build-passing-brightgreen)\r\n![Versión](https://img.shields.io/badge/version-1.0.0-blue)\r\n![Licencia](https://img.shields.io/badge/license-Apache%202.0-green)\r\n\r\n---\r\n\r\n## Desafío: La IA transforma Internet en un \"Bosque Oscuro\"\r\n\r\nEl rápido avance de las tecnologías de **IA**, especialmente los grandes modelos de lenguaje (LLM), está transformando significativamente el panorama de la ciberseguridad. El surgimiento de la **Explotación Autónoma de Vulnerabilidades (AVE)** representa un gran avance en la era de la IA, al automatizar la explotación de vulnerabilidades, como se muestra en [este artículo de investigación](https://arxiv.org/abs/2404.08144). Este desarrollo aumenta significativamente el riesgo para todos los servicios de red expuestos, evocando la [Hipótesis del Bosque Oscuro](https://es.wikipedia.org/wiki/Hip%C3%B3tesis_del_bosque_oscuro) en Internet. Las herramientas impulsadas por IA escanean continuamente el entorno digital, identifican rápidamente las debilidades y las explotan. Como resultado, Internet está evolucionando hacia un **\"bosque oscuro\"** donde **la visibilidad equivale a vulnerabilidad**.\r\n\r\n![Riesgos de Vulnerabilidad](docs/images/Vul_Risks.png)\r\n\r\nLa investigación de Gartner pronostica un [rápido aumento de los ciberataques impulsados por IA](https://www.gartner.com/en/newsroom/press-releases/2024-08-28-gartner-forecasts-global-information-security-spending-to-grow-15-percent-in-2025). Este cambio de paradigma requiere una reevaluación de las estrategias tradicionales de ciberseguridad, con un enfoque en defensas proactivas, mecanismos de respuesta rápida y la adopción de tecnologías de ocultación de red para proteger la infraestructura crítica.\r\n\r\n---\r\n\r\n## Demostración rápida: Ver OpenNHP en acción\r\n\r\nAntes de profundizar en los detalles de OpenNHP, comencemos con una breve demostración de cómo OpenNHP protege un servidor del acceso no autorizado. Puede verlo en acción accediendo al servidor protegido en https://acdemo.opennhp.org.\r\n\r\n### 1) El servidor protegido es \"invisible\" para los usuarios no autenticados\r\n\r\nPor defecto, cualquier intento de conectar con el servidor protegido resultará en un error TIME OUT, ya que todos los puertos están cerrados, haciendo que el servidor parezca *\"invisible\"* y efectivamente fuera de línea.\r\n\r\n![Demostración de OpenNHP](docs/images/OpenNHP_ACDemo0.png)\r\n\r\nEl escaneo de puertos del servidor también devolverá un error TIME OUT.\r\n\r\n![Demostración de OpenNHP](docs/images/OpenNHP_ScanDemo.png)\r\n\r\n### 2) Después de la autenticación, el servidor protegido se vuelve accesible\r\n\r\nOpenNHP admite una variedad de métodos de autenticación, como OAuth, SAML, códigos QR, y más. Para esta demostración, utilizamos un servicio de autenticación básica de nombre de usuario/contraseña en https://demologin.opennhp.org.\r\n\r\n![Demostración de OpenNHP](docs/images/OpenNHP_DemoLogin.png)\r\n\r\nUna vez que haga clic en el botón \"Login\", la autenticación se completará con éxito y será redirigido al servidor protegido. En ese momento, el servidor se vuelve *\"visible\"* y accesible en su dispositivo.\r\n\r\n![Demostración de OpenNHP](docs/images/OpenNHP_ACDemo1.png)\r\n\r\n---\r\n\r\n## Visín: Hacer de Internet un lugar confiable\r\n\r\nLa apertura de los protocolos TCP/IP ha impulsado el crecimiento explosivo de las aplicaciones de Internet, pero también ha expuesto vulnerabilidades, permitiendo que actores malintencionados obtengan acceso no autorizado y exploten cualquier dirección IP expuesta. Aunque el [modelo de red OSI](https://es.wikipedia.org/wiki/Modelo_OSI) define la *capa 5 (capa de sesión)* para la gestión de conexiones, pocas soluciones efectivas se han implementado para abordar este problema.\r\n\r\n**NHP**, o el **\"Protocolo de Ocultación de la Infraestructura de Red\"**, es un protocolo de red ligero y basado en criptografía Zero Trust, diseñado para funcionar en la *capa de sesión OSI*, óptimo para gestionar la visibilidad y las conexiones de la red. El objetivo principal de NHP es ocultar los recursos protegidos de entidades no autorizadas, otorgando acceso solo a los usuarios verificados y autorizados mediante una verificación continua, contribuyendo así a un Internet más confiable.\r\n\r\n![Internet confiable](docs/images/TrustworthyCyberspace.png)\r\n\r\n---\r\n\r\n## Solución: OpenNHP restablece el control de la visibilidad de la red\r\n\r\n**OpenNHP** es la implementación de código abierto del protocolo NHP. Está impulsado por criptografía y diseñado con principios de seguridad en primer lugar, implementando una verdadera arquitectura de confianza cero en la *capa de sesión OSI*.\r\n\r\n![OpenNHP como la capa 5 del OSI](docs/images/OSI_OpenNHP.png)\r\n\r\nOpenNHP se basa en investigaciones anteriores sobre tecnología de ocultación de redes, utilizando un marco criptográfico moderno y una arquitectura que garantiza seguridad y alto rendimiento, superando las limitaciones de tecnologías anteriores.\r\n\r\n| Protocolo de Ocultación de Infraestructura de Red | 1ª Generación | 2ª Generación | 3ª Generación |\r\n|:---|:---|:---|:---|\r\n| **Tecnología Clave** | [Port Knocking](https://es.wikipedia.org/wiki/Port_knocking) | [Single Packet Authorization (SPA)](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2) | Protocolo de Ocultación de Infraestructura de Red (NHP) |\r\n| **Autenticación** | Secuencias de puertos | Secretos compartidos | Marco Criptográfico Moderno |\r\n| **Arquitectura** | Sin plano de control | Sin plano de control | Plano de control escalable |\r\n| **Capacidad** | Ocultar puertos | Ocultar puertos | Ocultar puertos, IPs y dominios |\r\n| **Control de Acceso** | Nivel IP | Nivel de Puertos | Nivel de Aplicación |\r\n| **Proyectos de Código Abierto** | [knock](https://github.com/jvinet/knock) *(C)* | [fwknop](https://github.com/mrash/fwknop) *(C++)* | [OpenNHP](https://github.com/OpenNHP/opennhp) *(Go)* |\r\n\r\n> Es crucial elegir un lenguaje **seguro para la memoria** como *Go* para el desarrollo de OpenNHP, como se destaca en el [informe técnico del gobierno de los EE.UU.](https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf). Para una comparación detallada entre **SPA y NHP**, consulte la [sección a continuación](#comparison-between-spa-and-nhp).\r\n\r\n## Beneficios de Seguridad\r\n\r\nDado que OpenNHP implementa los principios de confianza cero en la *capa de sesión OSI*, ofrece beneficios significativos:\r\n\r\n- Reduce la superficie de ataque ocultando la infraestructura\r\n- Evita el reconocimiento no autorizado de la red\r\n- Mitiga la explotación de vulnerabilidades\r\n- Previene ataques de phishing mediante DNS cifrado\r\n- Protege contra ataques DDoS\r\n- Permite el control de acceso granular\r\n- Proporciona seguimiento de conexiones basado en identidad\r\n- Atribución de ataques\r\n\r\n## Arquitectura\r\n\r\nLa arquitectura de OpenNHP se inspira en el [estándar de Arquitectura de Confianza Cero del NIST](https://www.nist.gov/publications/zero-trust-architecture). Sigue un diseño modular con los tres componentes principales: **NHP-Server**, **NHP-AC** y **NHP-Agent**, como se ilustra en el siguiente diagrama.\r\n\r\n![Arquitectura de OpenNHP](docs/images/OpenNHP_Arch.png)\r\n\r\n> Consulte la [documentación de OpenNHP](https://opennhp.org/) para obtener información detallada sobre la arquitectura y el flujo de trabajo.\r\n\r\n## Centro: Algoritmos Criptográficos\r\n\r\nLa criptografía es el centro de OpenNHP, proporcionando seguridad robusta, un excelente rendimiento y escalabilidad mediante el uso de algoritmos criptográficos de vanguardia. A continuación se muestran los principales algoritmos y marcos criptográficos utilizados por OpenNHP:\r\n\r\n- **[Criptografía de Curva Elíptica (ECC)](https://es.wikipedia.org/wiki/Criptograf%C3%ADa_de_curva_el%C3%ADptica)**: Utilizada para criptografía asimétrica eficiente.\r\n\r\n> En comparación con RSA, ECC ofrece una mayor eficiencia con una encriptación más fuerte en longitudes de clave más cortas, mejorando tanto la transmisión en la red como el rendimiento computacional. La tabla a continuación muestra las diferencias en la fortaleza de la seguridad, las longitudes de clave y la proporción de longitud de clave entre RSA y ECC, junto con sus respectivos períodos de validez.\r\n\r\n| Fortaleza de Seguridad (bits) | Longitud de Clave DSA/RSA (bits) | Longitud de Clave ECC (bits) | Relación: ECC vs. DSA/RSA | Validez |\r\n|:----------------------------:|:-------------------------------:|:---------------------------:|:--------------------------:|:-------:|\r\n| 80                           | 1024                            | 160-223                     | 1:6                        | Hasta 2010 |\r\n| 112                          | 2048                            | 224-255                     | 1:9                        | Hasta 2030 |\r\n| 128                          | 3072                            | 256-383                     | 1:12                       | Después de 2031 |\r\n| 192                          | 7680                            | 384-511                     | 1:20                       | |\r\n| 256                          | 15360                           | 512+                        | 1:30                       | |\r\n\r\n- **[Marco de Protocolo Noise](https://noiseprotocol.org/)**: Permite el intercambio seguro de claves, el cifrado/descifrado de mensajes y la autenticación mutua.\r\n\r\n> El Protocolo Noise se basa en el [acuerdo de clave Diffie-Hellman](https://es.wikipedia.org/wiki/Intercambio_de_claves_Diffie-Hellman) y proporciona soluciones criptográficas modernas como la autenticación mutua y opcional, el ocultamiento de identidad, la confidencialidad directa y el cifrado de ida y vuelta. Probado por su seguridad y rendimiento, ya es utilizado por aplicaciones populares como [WhatsApp](https://www.whatsapp.com/security/WhatsApp-Security-Whitepaper.pdf), [Slack](https://github.com/slackhq/nebula) y [WireGuard](https://www.wireguard.com/).\r\n\r\n- **[Criptografía Basada en Identidad (IBC)](https://es.wikipedia.org/wiki/Criptograf%C3%ADa_basada_en_la_identidad)**: Simplifica la distribución de claves a escala.\r\n\r\n> Una distribución eficiente de claves es esencial para implementar Zero Trust. OpenNHP admite tanto PKI como IBC. Mientras que PKI se ha utilizado ampliamente durante décadas, depende de Autoridades Certificadoras (CA) centralizadas para la verificación de identidad y la gestión de claves, lo que puede ser costoso y llevar tiempo. En contraste, IBC permite un enfoque descentralizado y autogestionado para la verificación de identidad y la gestión de claves, haciéndolo más rentable para el entorno Zero Trust de OpenNHP, donde miles de millones de dispositivos o servidores pueden necesitar protección e integración en tiempo real.\r\n\r\n- **[Criptografía sin Certificados (CL-PKC)](https://es.wikipedia.org/wiki/Criptograf%C3%ADa_sin_certificado)**: Algoritmo IBC recomendado\r\n\r\n> CL-PKC es un esquema que mejora la seguridad al evitar la custodia de claves y abordar las limitaciones de la Criptografía Basada en Identidad (IBC). En la mayoría de los sistemas IBC, la clave privada de un usuario es generada por un Centro de Generación de Claves (KGC), lo cual conlleva riesgos significativos. Un KGC comprometido puede llevar a la exposición de todas las claves privadas de los usuarios, requiriendo plena confianza en el KGC. CL-PKC mitiga este problema dividiendo el proceso de generación de claves, de modo que el KGC solo tiene conocimiento de una clave privada parcial. Como resultado, CL-PKC combina las fortalezas de PKI e IBC, ofreciendo una mayor seguridad sin los inconvenientes de la gestión centralizada de claves.\r\n\r\nLectura adicional:\r\n\r\n> Consulte la [documentación de OpenNHP](https://opennhp.org/cryptography/) para una explicación detallada de los algoritmos criptográficos utilizados en OpenNHP.\r\n\r\n## Características Clave\r\n\r\n- Mitiga la explotación de vulnerabilidades mediante la aplicación de reglas \"denegar todo\" por defecto\r\n- Previene ataques de phishing mediante la resolución DNS cifrada\r\n- Protege contra ataques DDoS ocultando la infraestructura\r\n- Permite la atribución de ataques mediante conexiones basadas en identidad\r\n- Control de acceso predeterminado para todos los recursos protegidos\r\n- Autenticación basada en identidad y dispositivos antes del acceso a la red\r\n- Resolución DNS cifrada para prevenir secuestro de DNS\r\n- Infraestructura distribuida para mitigar ataques DDoS\r\n- Arquitectura escalable con componentes desacoplados\r\n- Integración con sistemas de gestión de identidades y accesos existentes\r\n- Compatible con varios modelos de despliegue (cliente a puerta de enlace, cliente a servidor, etc.)\r\n- Seguridad criptográfica con algoritmos modernos (ECC, Noise Protocol, IBC)\r\n\r\n<details>\r\n<summary>Haga clic para expandir los detalles de las características</summary>\r\n\r\n- **Control de acceso predeterminado**: Todos los recursos están ocultos por defecto, solo siendo accesibles tras la autenticación y autorización.\r\n- **Autenticación basada en identidad y dispositivos**: Garantiza que solo los usuarios conocidos en dispositivos aprobados puedan acceder.\r\n- **Resolución DNS cifrada**: Evita el secuestro de DNS y los ataques de phishing asociados.\r\n- **Mitigación de DDoS**: El diseño de infraestructura distribuida ayuda a proteger contra los ataques de denegación de servicio distribuidos.\r\n- **Arquitectura escalable**: Los componentes desacoplados permiten un despliegue y escalado flexibles.\r\n- **Integración IAM**: Funciona con sus sistemas de gestión de identidades y accesos existentes.\r\n- **Despliegue flexible**: Compatible con varios modelos, incluido cliente a puerta de enlace, cliente a servidor y más.\r\n- **Criptografía robusta**: Utiliza algoritmos modernos como ECC, Noise Protocol e IBC para una seguridad robusta.\r\n</details>\r\n\r\n## Despliegue\r\n\r\nOpenNHP admite varios modelos de despliegue para adaptarse a diferentes casos de uso:\r\n\r\n- Cliente a puerta de enlace: Asegura el acceso a varios servidores detrás de una puerta de enlace\r\n- Cliente a servidor: Asegura directamente servidores/aplicaciones individuales\r\n- Servidor a servidor: Asegura la comunicación entre servicios backend\r\n- Puerta de enlace a puerta de enlace: Asegura conexiones entre sitios\r\n\r\n> Consulte la [documentación de OpenNHP](https://opennhp.org/deploy/) para obtener instrucciones detalladas de despliegue.\r\n\r\n## Comparación entre SPA y NHP\r\nEl protocolo Single Packet Authorization (SPA) está incluido en la [especificación del Perímetro Definido por Software (SDP)](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2) publicada por la [Cloud Security Alliance (CSA)](https://cloudsecurityalliance.org/). NHP mejora la seguridad, la fiabilidad, la escalabilidad y la extensibilidad mediante un marco criptográfico moderno y una arquitectura moderna, como se demuestra en el [artículo de investigación AHAC](https://www.mdpi.com/2076-3417/14/13/5593).\r\n\r\n| - | SPA | NHP | Ventajas de NHP |\r\n|:---|:---|:---|:---|\r\n| **Arquitectura** | El componente de descifrado de paquetes SPA y autenticación de usuario/dispositivo está acoplado con el componente de control de acceso a la red en el servidor SPA. | NHP-Server (el componente de descifrado de paquetes y autenticación de usuario/dispositivo) y NHP-AC (el componente de control de acceso) están desacoplados. NHP-Server se puede desplegar en hosts separados y admite la escalabilidad horizontal. | <ul><li>Rendimiento: el componente que consume muchos recursos, NHP-server, está separado del servidor protegido.</li><li>Escalabilidad: NHP-server se puede desplegar en modo distribuido o clúster.</li><li>Seguridad: la dirección IP del servidor protegido no es visible para el cliente a menos que la autenticación sea exitosa.</li></ul>|\r\n| **Comunicación** | Dirección única | Bidireccional | Mejor fiabilidad con la notificación de estado del control de acceso |\r\n| **Marco criptográfico** | Secretos compartidos | PKI o IBC, Marco Noise | <ul><li>Seguridad: mecanismo comprobado de intercambio de claves para mitigar las amenazas MITM</li><li>Bajo costo: distribución de claves eficiente para el modelo de confianza cero</li><li>Rendimiento: cifrado/descifrado de alto rendimiento</li></ul>|\r\n| **Capacidad de Ocultación de Infraestructura de Red** | Solo puertos de servidor | Dominios, IPs y puertos | Más poderoso contra varios ataques (p. ej., vulnerabilidades, secuestro de DNS y ataques DDoS) |\r\n| **Extensibilidad** | Ninguna, solo para SDP | Todo uso | Compatible con cualquier escenario que necesite oscurecimiento del servicio |\r\n| **Interoperabilidad** | No disponible | Personalizable | NHP puede integrarse sin problemas con protocolos existentes (p. ej., DNS, FIDO, etc.) |\r\n\r\n## Contribuir\r\n\r\n¡Damos la bienvenida a las contribuciones a OpenNHP! Consulte nuestras [Directrices de Contribución](CONTRIBUTING.md) para obtener más información sobre cómo participar.\r\n\r\n## Licencia\r\n\r\nOpenNHP se publica bajo la [Licencia Apache 2.0](LICENSE).\r\n\r\n## Contacto\r\n\r\n- Sitio web del proyecto: [https://github.com/OpenNHP/opennhp](https://github.com/OpenNHP/opennhp)\r\n- Correo electrónico: [opennhp@gmail.com](mailto:opennhp@gmail.com)\r\n- Canal de Slack: [Únase a nuestro Slack](https://slack.opennhp.org)\r\n\r\nPara obtener una documentación más detallada, visite nuestra [Documentación Oficial](https://opennhp.org).\r\n\r\n## Referencias\r\n\r\n- [Especificación del Perímetro Definido por Software (SDP) v2.0](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2). Jason Garbis, Juanita Koilpillai, Junaid lslam, Bob Flores, Daniel Bailey, Benfeng Chen, Eitan Bremler, Michael Roza, Ahmed Refaey Hussein. [*Cloud Security Alliance (CSA)*](https://cloudsecurityalliance.org/). Marzo 2022.\r\n- [AHAC: Marco Avanzado de Control de Acceso Oculto en Red](https://www.mdpi.com/2076-3417/14/13/5593). Mudi Xu, Benfeng Chen, Zhizhong Tan, Shan Chen, Lei Wang, Yan Liu, Tai Io San, Sou Wang Fong, Wenyong Wang y Jing Feng. *Revista de Ciencias Aplicadas*. Junio 2024.\r\n- Noise Protocol Framework. https://noiseprotocol.org/\r\n- Proyecto de Marco de Gestión de Vulnerabilidades. https://phoenix.security/web-vuln-management/\r\n\r\n---\r\n\r\n🌟 ¡Gracias por su interés en OpenNHP! Esperamos sus contribuciones y comentarios.\r\n\r\n"
        },
        {
          "name": "README.fr.md",
          "type": "blob",
          "size": 19.384765625,
          "content": "[![en](https://img.shields.io/badge/lang-en-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.md)\r\n[![zh-cn](https://img.shields.io/badge/lang-zh--cn-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.zh-cn.md)\r\n[![de](https://img.shields.io/badge/lang-de-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.de.md)\r\n[![ja](https://img.shields.io/badge/lang-ja-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.ja.md)\r\n[![fr](https://img.shields.io/badge/lang-fr-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.fr.md)\r\n[![es](https://img.shields.io/badge/lang-es-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.es.md)\r\n\r\n![Logo OpenNHP](docs/images/logo11.png)\r\n# OpenNHP : Protocole de Masquage de l'Infrastructure Réseau en Zéro Confiance\r\nUn protocole réseau de zéro confiance, basé sur la cryptographie, au niveau 5 du modèle OSI, permettant de cacher votre serveur et vos données des attaquants.\r\n\r\n![Statut de Construction](https://img.shields.io/badge/build-passing-brightgreen)\r\n![Version](https://img.shields.io/badge/version-1.0.0-blue)\r\n![Licence](https://img.shields.io/badge/license-Apache%202.0-green)\r\n\r\n---\r\n\r\n## Défi : L'IA transforme Internet en une \"Forêt Sombre\"\r\n\r\nL'avancement rapide des technologies d'**IA**, en particulier les grands modèles de langage (LLM), transforme de manière significative le paysage de la cybersécurité. L'émergence de l'**exploitation autonome des vulnérabilités (AVE)** représente un bond majeur dans l'ère de l'IA, automatisant l'exploitation des vulnérabilités, comme le montre [cet article de recherche](https://arxiv.org/abs/2404.08144). Ce développement augmente de manière significative le risque pour tous les services réseau exposés, évoquant l'hypothèse de la [forêt sombre](https://fr.wikipedia.org/wiki/For%C3%AAt_sombre) sur Internet. Les outils pilotés par l'IA scannent continuellement l'environnement numérique, identifiant rapidement les faiblesses et les exploitant. Ainsi, Internet devient une **\"forêt sombre\"** où **la visibilité équivaut à la vulnérabilité**.\r\n\r\n![Risques de Vulnérabilité](docs/images/Vul_Risks.png)\r\n\r\nSelon les recherches de Gartner, les [cyberattaques pilotées par l'IA vont augmenter rapidement](https://www.gartner.com/en/newsroom/press-releases/2024-08-28-gartner-forecasts-global-information-security-spending-to-grow-15-percent-in-2025). Ce paradigme en évolution impose une réévaluation des stratégies de cybersécurité traditionnelles, avec un accent sur les défenses proactives, des mécanismes de réponse rapide, et l'adoption de technologies de masquage réseau pour protéger les infrastructures critiques.\r\n\r\n---\r\n\r\n## Démo rapide : Voir OpenNHP en action\r\n\r\nAvant de plonger dans les détails d'OpenNHP, commençons par une démonstration rapide de la façon dont OpenNHP protège un serveur contre les accès non autorisés. Vous pouvez le voir en action en accédant au serveur protégé à l'adresse suivante : https://acdemo.opennhp.org.\r\n\r\n### 1) Le serveur protégé est \"invisible\" aux utilisateurs non authentifiés\r\n\r\nPar défaut, toute tentative de connexion au serveur protégé résultera en une erreur de TYPE OUT, car tous les ports sont fermés, rendant le serveur *\"invisible\"* et apparemment hors ligne.\r\n\r\n![Démo OpenNHP](docs/images/OpenNHP_ACDemo0.png)\r\n\r\nLe scan des ports du serveur retournera également une erreur de TYPE OUT.\r\n\r\n![Démo OpenNHP](docs/images/OpenNHP_ScanDemo.png)\r\n\r\n### 2) Après authentification, le serveur protégé devient accessible\r\n\r\nOpenNHP supporte une variété de méthodes d'authentification, telles que OAuth, SAML, QR codes, et plus encore. Pour cette démonstration, nous utilisons un service d'authentification basé sur un nom d'utilisateur/mot de passe simple à l'adresse https://demologin.opennhp.org.\r\n\r\n![Démo OpenNHP](docs/images/OpenNHP_DemoLogin.png)\r\n\r\nUne fois que vous cliquez sur le bouton \"Login\", l'authentification est réussie, et vous êtes redirigé vers le serveur protégé. Le serveur devient alors *\"visible\"* et accessible sur votre appareil.\r\n\r\n![Démo OpenNHP](docs/images/OpenNHP_ACDemo1.png)\r\n\r\n---\r\n\r\n## Vision : Faire d'Internet un espace de confiance\r\n\r\nL'ouverture des protocoles TCP/IP a stimulé la croissance des applications Internet, mais a aussi exposé des vulnérabilités, permettant aux acteurs malveillants d'accéder de manière non autorisée à toute adresse IP exposée. Bien que le [modèle réseau OSI](https://fr.wikipedia.org/wiki/Mod%C3%A8le_OSI) définisse la *couche 5 (couche session)* pour la gestion des connexions, peu de solutions efficaces ont été mises en place à cet égard.\r\n\r\n**NHP**, ou **\"Protocole de Masquage de l'Infrastructure Réseau\"**, est un protocole réseau de zéro confiance, basé sur la cryptographie, conçu pour fonctionner au *niveau de la couche session OSI*, idéal pour gérer la visibilité réseau et les connexions. L'objectif principal de NHP est de dissimuler les ressources protégées des entités non autorisées, accordant l'accès uniquement aux utilisateurs vérifiés et autorisés par une vérification continue, contribuant ainsi à un Internet plus digne de confiance.\r\n\r\n![Internet de Confiance](docs/images/TrustworthyCyberspace.png)\r\n\r\n---\r\n\r\n## Solution : OpenNHP rétablit le contrôle de la visibilité réseau\r\n\r\n**OpenNHP** est l'implémentation open source du protocole NHP. Il est basé sur la cryptographie et conçu avec des principes de sécurité en priorité, implémentant une véritable architecture de zéro confiance au *niveau de la couche session OSI*.\r\n\r\n![OpenNHP en tant que couche 5 OSI](docs/images/OSI_OpenNHP.png)\r\n\r\nOpenNHP s'appuie sur des recherches antérieures sur la technologie de masquage réseau, en utilisant des cadres et une architecture modernes de cryptographie pour garantir la sécurité et des performances élevées, surmontant ainsi les limitations des technologies précédentes.\r\n\r\n| Protocole de Masquage de l'Infrastructure | 1ère Génération | 2ème Génération | 3ème Génération |\r\n|:---|:---|:---|:---|\r\n| **Technologie Clé** | [Port Knocking](https://fr.wikipedia.org/wiki/Port_knocking) | [Autorisation par Paquet Unique (SPA)](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2) | Protocole de Masquage de l'Infrastructure Réseau (NHP) |\r\n| **Authentification** | Séquences de ports | Secrets partagés | Cadre cryptographique moderne |\r\n| **Architecture** | Pas de plan de contrôle | Pas de plan de contrôle | Plan de contrôle scalable |\r\n| **Capacité** | Masquer les ports | Masquer les ports | Masquer les ports, IPs et domaines |\r\n| **Contrôle d'Accès** | Niveau IP | Niveau Port | Niveau Application |\r\n| **Projets Open Source** | [knock](https://github.com/jvinet/knock) *(C)* | [fwknop](https://github.com/mrash/fwknop) *(C++)* | [OpenNHP](https://github.com/OpenNHP/opennhp) *(Go)* |\r\n\r\n> Il est crucial de choisir un langage **sûr pour la mémoire** comme *Go* pour le développement d'OpenNHP, comme le souligne le [rapport technique du gouvernement des États-Unis](https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf). Pour une comparaison détaillée entre **SPA et NHP**, référez-vous à la [section ci-dessous](#comparison-between-spa-and-nhp).\r\n\r\n## Bénéfices en matière de sécurité\r\n\r\nPuisqu'OpenNHP implémente les principes de zéro confiance au *niveau de la couche session OSI*, il offre des avantages significatifs :\r\n\r\n- Réduit la surface d'attaque en cachant l'infrastructure\r\n- Empêche la reconnaissance réseau non autorisée\r\n- Atténue l'exploitation des vulnérabilités\r\n- Empêche le phishing via DNS chiffré\r\n- Protège contre les attaques DDoS\r\n- Permet un contrôle d'accès granulaire\r\n- Fournit un suivi des connexions basé sur l'identité\r\n- Attribution des attaques\r\n\r\n## Architecture\r\n\r\nL'architecture d'OpenNHP s'inspire de la [norme d'architecture Zero Trust du NIST](https://www.nist.gov/publications/zero-trust-architecture). Elle suit une conception modulaire avec trois composants principaux : **NHP-Server**, **NHP-AC** et **NHP-Agent**, comme illustré dans le diagramme ci-dessous.\r\n\r\n![Architecture OpenNHP](docs/images/OpenNHP_Arch.png)\r\n\r\n> Veuillez consulter la [documentation d'OpenNHP](https://opennhp.org/) pour des informations détaillées sur l'architecture et le flux de travail.\r\n\r\n## Cœur : Algorithmes Cryptographiques\r\n\r\nLa cryptographie est au cœur d'OpenNHP, fournissant une sécurité robuste, d'excellentes performances et une bonne évolutivité en utilisant des algorithmes cryptographiques de pointe. Voici les principaux algorithmes et cadres cryptographiques employés par OpenNHP :\r\n\r\n- **[Cryptographie à Courbes Elliptiques (ECC)](https://fr.wikipedia.org/wiki/Cryptographie_sur_courbe_elliptique)** : Utilisée pour la cryptographie asymétrique efficace.\r\n\r\n> Comparée à RSA, l'ECC offre une efficacité supérieure avec un chiffrement plus fort à des longueurs de clé plus courtes, améliorant la transmission réseau et les performances de calcul. Le tableau ci-dessous montre les différences de force de sécurité, de longueurs de clé et du ratio entre RSA et ECC, ainsi que leurs périodes de validité respectives.\r\n\r\n| Force de Sécurité (bits) | Longueur de Clé DSA/RSA (bits) | Longueur de Clé ECC (bits) | Ratio : ECC vs DSA/RSA | Validité |\r\n|:--------------------------:|:------------------------------:|:--------------------------:|:-----------------------:|:---------:|\r\n| 80                         | 1024                           | 160-223                    | 1:6                     | Jusqu'en 2010 |\r\n| 112                        | 2048                           | 224-255                    | 1:9                     | Jusqu'en 2030 |\r\n| 128                        | 3072                           | 256-383                    | 1:12                    | Après 2031 |\r\n| 192                        | 7680                           | 384-511                    | 1:20                    | |\r\n| 256                        | 15360                          | 512+                       | 1:30                    | |\r\n\r\n- **[Cadre de Protocole Noise](https://noiseprotocol.org/)** : Permet l'échange de clés sécurisé, le chiffrement/déchiffrement des messages, et l'authentification mutuelle.\r\n\r\n> Le protocole Noise est basé sur l'[accord de clé Diffie-Hellman](https://fr.wikipedia.org/wiki/%C3%89change_de_cl%C3%A9_Diffie-Hellman) et offre des solutions cryptographiques modernes telles que l'authentification mutuelle et optionnelle, le masquage de l'identité, la sécurité persistante, et le chiffrement à tour de passezà-tour de zéro. Déjà prouvé pour sa sécurité et ses performances, il est utilisé par des applications populaires comme [WhatsApp](https://www.whatsapp.com/security/WhatsApp-Security-Whitepaper.pdf), [Slack](https://github.com/slackhq/nebula), et [WireGuard](https://www.wireguard.com/).\r\n\r\n- **[Cryptographie basée sur l'Identité (IBC)](https://fr.wikipedia.org/wiki/Cryptographie_bas%C3%A9e_sur_l%27identit%C3%A9)** : Simplifie la distribution des clés à grande échelle.\r\n\r\n> Une distribution efficace des clés est essentielle pour implémenter le Zéro Confiance. OpenNHP prend en charge à la fois PKI et IBC. Alors que PKI est utilisée depuis des décennies, elle dépend de Certificats d'Autorité centralisés (CA) pour la vérification de l'identité et la gestion des clés, ce qui peut être long et coûteux. En revanche, l'IBC permet une approche décentralisée et autonome de la vérification de l'identité et de la gestion des clés, la rendant plus rentable pour l'environnement Zero Trust d'OpenNHP, où des milliards d'appareils ou de serveurs peuvent avoir besoin de protection et d'intégration en temps réel.\r\n\r\n- **[Cryptographie à Clé Publique sans Certificat (CL-PKC)](https://fr.wikipedia.org/wiki/Cryptographie_sans_certificat)** : Algorithme IBC recommandé\r\n\r\n> CL-PKC est un schéma qui améliore la sécurité en évitant la garde des clés et en répondant aux limites de la cryptographie basée sur l'identité (IBC). Dans la plupart des systèmes IBC, la clé privée d'un utilisateur est générée par un Centre de Génération de Clés (KGC), ce qui introduit des risques importants. Un KGC compromis peut entraîner l'exposition des clés privées de tous les utilisateurs, nécessitant une confiance totale dans le KGC. CL-PKC atténue ce problème en divisant le processus de génération de clés, de sorte que le KGC n'a connaissance que d'une clé privée partielle. En conséquence, CL-PKC combine les forces du PKI et de l'IBC, offrant une sécurité renforcée sans les inconvénients de la gestion centralisée des clés.\r\n\r\nPour en savoir plus :\r\n\r\n> Veuillez consulter la [documentation OpenNHP](https://opennhp.org/cryptography/) pour une explication détaillée des algorithmes cryptographiques utilisés dans OpenNHP.\r\n\r\n## Principales Fonctionnalités\r\n\r\n- Atténue l'exploitation des vulnérabilités en appliquant par défaut des règles \"deny-all\"\r\n- Empêche les attaques de phishing via la résolution DNS chiffrée\r\n- Protège contre les attaques DDoS en cachant l'infrastructure\r\n- Permet l'attribution des attaques via des connexions basées sur l'identité\r\n- Contrôle d'accès par défaut pour toutes les ressources protégées\r\n- Authentification basée sur l'identité et les appareils avant l'accès au réseau\r\n- Résolution DNS chiffrée pour empêcher le piratage DNS\r\n- Infrastructure distribuée pour atténuer les attaques DDoS\r\n- Architecture évolutive avec des composants découplés\r\n- Intégration avec les systèmes existants de gestion des identités et des accès\r\n- Prend en charge divers modèles de déploiement (client-à-passerelle, client-à-serveur, etc.)\r\n- Sécurité cryptographique avec des algorithmes modernes (ECC, Noise Protocol, IBC)\r\n\r\n<details>\r\n<summary>Cliquez pour développer les détails des fonctionnalités</summary>\r\n\r\n- **Contrôle d'accès par défaut** : Toutes les ressources sont cachées par défaut, ne devenant accessibles qu'après authentification et autorisation.\r\n- **Authentification basée sur l'identité et les appareils** : Garantit que seuls les utilisateurs connus sur des appareils approuvés peuvent accéder.\r\n- **Résolution DNS chiffrée** : Empêche le piratage DNS et les attaques de phishing associées.\r\n- **Atténuation des DDoS** : Conception d'infrastructure distribuée aide à protéger contre les attaques par DDoS.\r\n- **Architecture évolutive** : Les composants découplés permettent un déploiement et une évolution flexibles.\r\n- **Intégration IAM** : Fonctionne avec vos systèmes de gestion des identités et des accès.\r\n- **Déploiement flexible** : Prend en charge divers modèles, y compris client-à-passerelle, client-à-serveur, et plus encore.\r\n- **Cryptographie forte** : Utilise des algorithmes modernes comme ECC, Noise Protocol, et IBC pour une sécurité robuste.\r\n</details>\r\n\r\n## Déploiement\r\n\r\nOpenNHP prend en charge plusieurs modèles de déploiement pour répondre à différents cas d'utilisation :\r\n\r\n- Client-à-Passerelle : Sécurise l'accès à plusieurs serveurs derrière une passerelle\r\n- Client-à-Serveur : Sécurise directement des serveurs/applications individuels\r\n- Serveur-à-Serveur : Sécurise la communication entre les services backend\r\n- Passerelle-à-Passerelle : Sécurise les connexions site-à-site\r\n\r\n> Veuillez consulter la [documentation OpenNHP](https://opennhp.org/deploy/) pour des instructions de déploiement détaillées.\r\n\r\n## Comparaison entre SPA et NHP\r\nLe protocole d'Autorisation par Paquet Unique (SPA) est inclus dans la [spécification du Périmètre Défini par Logiciel (SDP)](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2) publiée par l'[Alliance pour la Sécurité Cloud (CSA)](https://cloudsecurityalliance.org/). NHP améliore la sécurité, la fiabilité, la scalabilité et l'extensibilité grâce à un cadre et une architecture de cryptographie modernes, comme démontré dans l'article de recherche [AHAC](https://www.mdpi.com/2076-3417/14/13/5593).\r\n\r\n| - | SPA | NHP | Avantages de NHP |\r\n|:---|:---|:---|:---|\r\n| **Architecture** | Le déchiffrement du paquet SPA et le composant d'authentification de l'utilisateur/appareil sont couplés au composant de contrôle d'accès réseau dans le serveur SPA. | NHP-Server (le composant de déchiffrement de paquet et d'authentification utilisateur/appareil) et NHP-AC (le composant de contrôle d'accès) sont découplés. NHP-Server peut être déployé sur des hôtes distincts et prend en charge la mise à l'échelle horizontale. | <ul><li>Performance : le composant gourmand en ressources NHP-server est séparé du serveur protégé.</li><li>Scalabilité : NHP-server peut être déployé en mode distribué ou en cluster.</li><li>Sécurité : l'adresse IP du serveur protégé n'est pas visible par le client tant que l'authentification n'a pas réussi.</li></ul>|\r\n| **Communication** | Simple direction | Bidirectionnelle | Meilleure fiabilité avec la notification d'état du contrôle d'accès |\r\n| **Cadre cryptographique** | Secrets partagés | PKI ou IBC, Cadre Noise | <ul><li>Sécurité : mécanisme éprouvé d'échange de clés pour atténuer les menaces MITM</li><li>Coût faible : distribution efficace des clés pour le modèle de zéro confiance</li><li>Performance : chiffrement/déchiffrement haute performance</li></ul>|\r\n| **Capacité de Masquage de l'Infrastructure Réseau** | Uniquement les ports de serveur | Domaines, IP et ports | Plus puissant contre diverses attaques (e.g., vulnérabilités, piratage DNS, et attaques DDoS) |\r\n| **Extensibilité** | Aucune, uniquement pour SDP | Tout usage | Prise en charge de tout scénario nécessitant un obscurcissement de service |\r\n| **Interopérabilité** | Non disponible | Personnalisable | NHP peut s'intégrer de manière transparente avec les protocoles existants (e.g., DNS, FIDO, etc.) |\r\n\r\n## Contribuer\r\n\r\nNous accueillons avec plaisir les contributions à OpenNHP ! Veuillez consulter nos [lignes directrices de contribution](CONTRIBUTING.md) pour plus d'informations sur la manière de participer.\r\n\r\n## Licence\r\n\r\nOpenNHP est publié sous la [licence Apache 2.0](LICENSE).\r\n\r\n## Contact\r\n\r\n- Site Web du Projet : [https://github.com/OpenNHP/opennhp](https://github.com/OpenNHP/opennhp)\r\n- E-mail : [opennhp@gmail.com](mailto:opennhp@gmail.com)\r\n- Canal Slack : [Rejoignez notre Slack](https://slack.opennhp.org)\r\n\r\nPour plus de documentation détaillée, veuillez visiter notre [Documentation Officielle](https://opennhp.org).\r\n\r\n## Références\r\n\r\n- [Spécification du Périmètre Défini par Logiciel (SDP) v2.0](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2). Jason Garbis, Juanita Koilpillai, Junaid lslam, Bob Flores, Daniel Bailey, Benfeng Chen, Eitan Bremler, Michael Roza, Ahmed Refaey Hussein. [*Cloud Security Alliance (CSA)*](https://cloudsecurityalliance.org/). Mar 2022.\r\n- [AHAC : Cadre Avancé de Contrôle d'Accès Caché au Réseau](https://www.mdpi.com/2076-3417/14/13/5593). Mudi Xu, Benfeng Chen, Zhizhong Tan, Shan Chen, Lei Wang, Yan Liu, Tai Io San, Sou Wang Fong, Wenyong Wang, et Jing Feng. *Journal des Sciences Appliquées*. Juin 2024.\r\n- Noise Protocol Framework. https://noiseprotocol.org/\r\n- Projet de Cadre de Gestion des Vulnérabilités. https://phoenix.security/web-vuln-management/\r\n\r\n---\r\n\r\n🌟 Merci pour votre intérêt dans OpenNHP ! Nous attendons vos contributions et vos commentaires avec impatience.\r\n\r\n"
        },
        {
          "name": "README.ja.md",
          "type": "blob",
          "size": 14.171875,
          "content": "[![en](https://img.shields.io/badge/lang-en-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.md)\r\n[![zh-cn](https://img.shields.io/badge/lang-zh--cn-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.zh-cn.md)\r\n[![de](https://img.shields.io/badge/lang-de-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.de.md)\r\n[![ja](https://img.shields.io/badge/lang-ja-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.ja.md)\r\n[![fr](https://img.shields.io/badge/lang-fr-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.fr.md)\r\n[![es](https://img.shields.io/badge/lang-es-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.es.md)\r\n\r\n![OpenNHP Logo](docs/images/logo11.png)\r\n# OpenNHP: ゼロトラストネットワークインフラストラクチャ隠蔽プロトコル\r\n攻撃者からサーバーとデータを隠すためのOSI第5層に位置する、軽量の暗号化駆動型ゼロトラストネットワークプロトコルです。\r\n\r\n![Build Status](https://img.shields.io/badge/build-passing-brightgreen)\r\n![Version](https://img.shields.io/badge/version-1.0.0-blue)\r\n![License](https://img.shields.io/badge/license-Apache%202.0-green)\r\n\r\n---\r\n\r\n## セキュリティの利点\r\n\r\nOpenNHPは*OSIセッション層*でゼロトラストの原則を実装しているため、次のような大きな利点があります。\r\n\r\n- インフラの隠蔽による攻撃面の削減\r\n- 不正なネットワーク偵察の防止\r\n- 脆弱性の悪用を防ぐ\r\n- 暗号化されたDNSによるフィッシング防止\r\n- DDoS攻撃に対する防御\r\n- 細粒度のアクセス制御を実現\r\n- アイデンティティベースの接続追跡\r\n- 攻撃の帰属\r\n\r\n## アーキテクチャ\r\n\r\nOpenNHPのアーキテクチャは[NISTゼロトラストアーキテクチャ標準](https://www.nist.gov/publications/zero-trust-architecture)に触発されています。以下の図に示すように、3つの主要なコンポーネント（**NHP-Server**、**NHP-AC**、**NHP-Agent**）を持つモジュール設計に従います。\r\n\r\n![OpenNHP architecture](docs/images/OpenNHP_Arch.png)\r\n\r\n> アーキテクチャとワークフローの詳細については、[OpenNHPドキュメント](https://opennhp.org/)を参照してください。\r\n\r\n## コア: 暗号化アルゴリズム\r\n\r\n暗号化はOpenNHPの中心にあり、強力なセキュリティ、高いパフォーマンス、およびスケーラビリティを提供するために最新の暗号化アルゴリズムを利用しています。以下は、OpenNHPで使用されている主要な暗号化アルゴリズムとフレームワークです。\r\n\r\n- **[楕円曲線暗号（ECC）](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography)**：効率的な公開鍵暗号に使用されています。\r\n\r\n> RSAと比較して、ECCは短い鍵長で強力な暗号化を提供し、ネットワーク伝送と計算パフォーマンスを向上させます。以下の表は、RSAとECCのセキュリティ強度、鍵長、および鍵長の比率の違いを示し、それぞれの有効期間を示しています。\r\n\r\n| セキュリティ強度（ビット） | DSA/RSA鍵長（ビット） | ECC鍵長（ビット） | 比率：ECC対DSA/RSA | 有効期限 |\r\n|:------------------------:|:-------------------------:|:---------------------:|:----------------------:|:--------:|\r\n| 80                       | 1024                      | 160-223               | 1:6                    | 2010年まで |\r\n| 112                      | 2048                      | 224-255               | 1:9                    | 2030年まで |\r\n| 128                      | 3072                      | 256-383               | 1:12                   | 2031年以降 |\r\n| 192                      | 7680                      | 384-511               | 1:20                   | |\r\n| 256                      | 15360                     | 512+                  | 1:30                   | |\r\n\r\n- **[ノイズプロトコルフレームワーク](https://noiseprotocol.org/)**：安全な鍵交換、メッセージの暗号化/復号化、および相互認証を可能にします。\r\n\r\n> ノイズプロトコルは[ディフィー・ヘルマン鍵共有](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)に基づいており、相互およびオプションの認証、アイデンティティの隠蔽、前方秘匿性、ゼロラウンドトリップ暗号化などの最新の暗号化ソリューションを提供します。そのセキュリティとパフォーマンスは、[WhatsApp](https://www.whatsapp.com/security/WhatsApp-Security-Whitepaper.pdf)、[Slack](https://github.com/slackhq/nebula)、および[WireGuard](https://www.wireguard.com/)などの人気アプリケーションで既に証明されています。\r\n\r\n- **[アイデンティティベース暗号（IBC）](https://en.wikipedia.org/wiki/Identity-based_cryptography)**：大規模な鍵配布を簡素化します。\r\n\r\n> 効率的な鍵配布は、ゼロトラストの実装に不可欠です。OpenNHPはPKIとIBCの両方をサポートしています。PKIは数十年にわたって広く使用されてきましたが、アイデンティティの確認と鍵管理に中央集権的な認証局（CA）に依存しており、時間とコストがかかることがあります。一方、IBCは、アイデンティティの確認と鍵管理を分散型で自己管理可能な方法で行うことができ、リアルタイムで何十億ものデバイスやサーバーを保護し、オンボーディングする必要があるOpenNHPのゼロトラスト環境において、よりコスト効率的です。\r\n\r\n- **[証明書レス公開鍵暗号（CL-PKC）](https://en.wikipedia.org/wiki/Certificateless_cryptography)**：推奨されるIBCアルゴリズム\r\n\r\n> CL-PKCは、鍵エスクローを回避し、アイデンティティベース暗号（IBC）の制限に対処することでセキュリティを強化するスキームです。ほとんどのIBCシステムでは、ユーザーの秘密鍵は鍵生成センター（KGC）によって生成され、これは重大なリスクをもたらします。KGCが侵害された場合、すべてのユーザーの秘密鍵が公開される可能性があり、KGCへの完全な信頼が必要です。CL-PKCは鍵生成プロセスを分割し、KGCは部分的な秘密鍵のみを知っているため、CL-PKCはPKIとIBCの両方の強みを組み合わせ、中央集権的な鍵管理の欠点なしに強力なセキュリティを提供します。\r\n\r\n詳細について：\r\n\r\n> OpenNHPで使用されている暗号化アルゴリズムの詳細な説明については、[OpenNHPドキュメント](https://opennhp.org/cryptography/)を参照してください。\r\n\r\n## 主な機能\r\n\r\n- デフォルトで「すべて拒否」ルールを適用することにより、脆弱性の悪用を軽減\r\n- 暗号化されたDNS解決を通じてフィッシング攻撃を防止\r\n- インフラの隠蔽によるDDoS攻撃の防御\r\n- アイデンティティベースの接続による攻撃の帰属\r\n- 保護されたリソースに対するすべてのアクセスをデフォルトで拒否\r\n- ネットワークアクセス前にアイデンティティおよびデバイスベースの認証\r\n- DNSハイジャックを防止するための暗号化されたDNS解決\r\n- DDoS攻撃を緩和するための分散インフラ\r\n- 分離されたコンポーネントによるスケーラブルなアーキテクチャ\r\n- 既存のアイデンティティおよびアクセス管理システムとの統合\r\n- さまざまな展開モデルをサポート（クライアント対ゲートウェイ、クライアント対サーバーなど）\r\n- 最新のアルゴリズム（ECC、ノイズプロトコル、IBC）を使用した暗号化によるセキュリティの確保\r\n\r\n<details>\r\n<summary>機能の詳細を表示</summary>\r\n\r\n- **デフォルト拒否のアクセス制御**：すべてのリソースはデフォルトで隠蔽され、認証と認可が行われた後にのみアクセス可能になります。\r\n- **アイデンティティおよびデバイスベースの認証**：既知のユーザーと承認されたデバイスのみがアクセス可能です。\r\n- **暗号化されたDNS解決**：DNSハイジャックとそれに伴うフィッシング攻撃を防止します。\r\n- **DDoS緩和**：分散型インフラ設計により、分散型サービス拒否攻撃を防御します。\r\n- **スケーラブルなアーキテクチャ**：分離されたコンポーネントにより柔軟な展開とスケーリングが可能です。\r\n- **IAM統合**：既存のアイデンティティおよびアクセス管理システムと連携します。\r\n- **柔軟な展開**：クライアント対ゲートウェイ、クライアント対サーバーなど、さまざまなモデルをサポートします。\r\n- **強力な暗号化**：ECC、ノイズプロトコル、IBCなどの最新アルゴリズムを使用して強力なセキュリティを提供します。\r\n</details>\r\n\r\n## 展開\r\n\r\nOpenNHPは、さまざまなユースケースに合わせた複数の展開モデルをサポートしています。\r\n\r\n- クライアント対ゲートウェイ：ゲートウェイの背後にある複数のサーバーへのアクセスを保護します\r\n- クライアント対サーバー：個々のサーバー/アプリケーションを直接保護します\r\n- サーバー対サーバー：バックエンドサービス間の通信を保護します\r\n- ゲートウェイ対ゲートウェイ：サイト間接続を保護します\r\n\r\n> 詳細な展開手順については、[OpenNHPドキュメント](https://opennhp.org/deploy/)を参照してください。\r\n\r\n## SPAとNHPの比較\r\n[クラウドセキュリティアライアンス（CSA）](https://cloudsecurityalliance.org/)がリリースした[ソフトウェア定義境界（SDP）仕様](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2)には、シングルパケット認証（SPA）プロトコルが含まれています。NHPは、最新の暗号化フレームワークとアーキテクチャを通じてセキュリティ、信頼性、スケーラビリティ、拡張性を向上させ、[AHAC研究論文](https://www.mdpi.com/2076-3417/14/13/5593)で示されているように従来の技術の限界を克服しています。\r\n\r\n| - | SPA |NHP | NHPの利点  |\r\n|:---|:---|:---|:---|\r\n| **アーキテクチャ** | SPAサーバーのパケット復号化およびユーザー/デバイス認証コンポーネントがネットワークアクセス制御コンポーネントと結合されています。 | NHP-Server（パケット復号化およびユーザー/デバイス認証コンポーネント）とNHP-AC（アクセス制御コンポーネント）が分離されています。NHP-Serverは別のホストに展開でき、水平スケーリングをサポートします。 | <ul><li>パフォーマンス：リソース消費の多いコンポーネントNHP-Serverが保護されたサーバーから分離されています。</li><li>スケーラビリティ：NHP-Serverは分散またはクラスター化モードで展開可能です。</li><li>セキュリティ：認証が成功するまでは、保護されたサーバーのIPアドレスがクライアントには見えません。</li></ul>|\r\n| **通信** | 単方向 | 双方向 | アクセス制御のステータス通知による信頼性の向上 |\r\n| **暗号化フレームワーク** | 共有シークレット | PKIまたはIBC、ノイズフレームワーク |<ul><li>セキュリティ：MITM脅威を軽減する証明された安全な鍵交換メカニズム</li><li>低コスト：ゼロトラストモデルにおける効率的な鍵配布</li><li>パフォーマンス：高パフォーマンスの暗号化/復号化</li></ul>|\r\n| **ネットワークインフラストラクチャ隠蔽能力** | サーバーポートのみ | ドメイン、IP、ポート | 脆弱性、DNSハイジャック、DDoS攻撃など、さまざまな攻撃に対する強力な防御 |\r\n| **拡張性** | なし、SDP専用 | 汎用 | あらゆるサービス暗黒化の必要があるシナリオに対応 |\r\n| **相互運用性** | 利用不可 | カスタマイズ可能| NHPは既存のプロトコル（例：DNS、FIDOなど）とシームレスに統合可能 |\r\n\r\n## コントリビューション\r\n\r\nOpenNHPへの貢献を歓迎します！貢献方法の詳細については、[コントリビューションガイドライン](CONTRIBUTING.md)を参照してください。\r\n\r\n## ライセンス\r\n\r\nOpenNHPは[Apache 2.0ライセンス](LICENSE)の下でリリースされています。\r\n\r\n## 連絡先\r\n\r\n- プロジェクトウェブサイト：[https://github.com/OpenNHP/opennhp](https://github.com/OpenNHP/opennhp)\r\n- メール：[opennhp@gmail.com](mailto:opennhp@gmail.com)\r\n- Slackチャンネル：[Slackに参加する](https://slack.opennhp.org)\r\n\r\n詳細なドキュメントについては、[公式ドキュメント](https://opennhp.org)をご覧ください。\r\n\r\n## 参考文献\r\n\r\n- [ソフトウェア定義境界（SDP）仕様 v2.0](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2)。Jason Garbis、Juanita Koilpillai、Junaid Islam、Bob Flores、Daniel Bailey、Benfeng Chen、Eitan Bremler、Michael Roza、Ahmed Refaey Hussein。[*クラウドセキュリティアライアンス（CSA）*](https://cloudsecurityalliance.org/)。2022年3月。\r\n- [AHAC：高度なネットワーク隠蔽アクセス制御フレームワーク](https://www.mdpi.com/2076-3417/14/13/5593)。Mudi Xu、Benfeng Chen、Zhizhong Tan、Shan Chen、Lei Wang、Yan Liu、Tai Io San、Sou Wang Fong、Wenyong Wang、Jing Feng。*応用科学ジャーナル*。2024年6月。\r\n- ノイズプロトコルフレームワーク。https://noiseprotocol.org/\r\n- 脆弱性管理フレームワークプロジェクト。https://phoenix.security/web-vuln-management/\r\n\r\n---\r\n\r\n✨ OpenNHPにご関心をお寄せいただき、ありがとうございます！皆様の貢献とフィードバックをお待ちしております。\r\n\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.212890625,
          "content": "[![en](https://img.shields.io/badge/lang-en-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.md)\n[![zh-cn](https://img.shields.io/badge/lang-zh--cn-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.zh-cn.md)\n[![de](https://img.shields.io/badge/lang-de-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.de.md)\n[![ja](https://img.shields.io/badge/lang-ja-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.ja.md)\n[![fr](https://img.shields.io/badge/lang-fr-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.fr.md)\n[![es](https://img.shields.io/badge/lang-es-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.es.md)\n\n![OpenNHP Logo](docs/images/logo11.png)\n# OpenNHP: Zero Trust Network-resource Hiding Protocol\n\n**NHP (Network-resource Hiding Protocol)** is a lightweight, cryptography-based Zero Trust protocol designed to safeguard servers and data from attackers by leveraging resource-hiding and encryption. It includes two core sub-protocols:\n\n- **Network-infrastructure Hiding Protocol (nHP):** Protects servers and applications by concealing domains, IP addresses, and ports.  \n- **Data-object Hiding Protocol (dHP):** Ensures data security and privacy by making data \"usable but not visible\" through cryptographic key negotiation and encryption.\n\n**OpenNHP** is the open source implementation of NHP.\n\n![Build Status](https://img.shields.io/badge/build-passing-brightgreen)\n![Version](https://img.shields.io/badge/version-1.0.0-blue)\n![License](https://img.shields.io/badge/license-Apache%202.0-green)\n\n---\n\n## Challenge: AI transforms the Internet into a \"Dark Forest\" \n\nThe rapid evolution of **AI** technologies, particularly large language models (LLMs), is significantly reshaping the cybersecurity landscape. The emergence of **Autonomous Vulnerability Exploitation (AVE)** represents a major leap in the AI era, streamlining the exploitation of vulnerabilities, as highlighted in recent research such as [[1]](https://googleprojectzero.blogspot.com/2024/10/from-naptime-to-big-sleep.html), [[2]](https://arxiv.org/abs/2404.08144), [[3]](https://github.com/protectai/vulnhuntr) and etc. This development dramatically increases the risk for any exposed network services, reflecting the [Dark Forest Hypothesis](https://en.wikipedia.org/wiki/Dark_forest_hypothesis) of the Internet. AI-powered tools are continuously scanning the digital realm, quickly finding and exploiting weaknesses. Consequently, the Internet is evolving into a **\"Dark Forest,\"** where **visibility equates to vulnerability**.\n\n![Vulnerability Risks](docs/images/Vul_Risks.png)\n\nGartner research anticipates a [sharp rise in AI-driven cyberattacks](https://www.gartner.com/en/newsroom/press-releases/2024-08-28-gartner-forecasts-global-information-security-spending-to-grow-15-percent-in-2025). To address these threats, CISA recently issued an executive order mandating a [14-day deadline for vulnerability remediation](https://www.cisa.gov/sites/default/files/2024-10/Proposed-Security-Requirements-EO-14117-21Oct24508.pdf). This shift necessitates a reevaluation of traditional cybersecurity approaches, emphasizing proactive defense, rapid response strategies, and the deployment of network-hiding technologies to protect critical infrastructure.\n\n---\n\n## Quick Demo: See OpenNHP in Action\n\nBefore diving into the details of OpenNHP, let's start with a quick demonstration of how OpenNHP protects a server from unauthorized access. You can see it in action by accessing the protected server at https://acdemo.opennhp.org.\n\n### 1) The Protected Server is \"Invisible\" to Unauthenticated Users\n\nBy default, any attempt to connect to the protected server will result in a TIME OUT error, as all ports are closed, making the server appear offline and effectively *\"invisible.\"*\n\n![OpenNHP Demo](docs/images/OpenNHP_ACDemo0.png)\n\nPort scanning the server will also return a TIME OUT error.\n\n![OpenNHP Demo](docs/images/OpenNHP_ScanDemo.png)\n\n### 2) After Authentication, the Protected Server Becomes Accessible\n\nOpenNHP supports a variety of authentication methods, such as OAuth, SAML, QR codes, and more. For simplicity, this demo uses a basic username/password authentication service at https://demologin.opennhp.org to demonstrate the process.\n\n![OpenNHP Demo](docs/images/OpenNHP_DemoLogin.png)\n\nOnce you click the \"Login\" button, authentication is completed successfully, and you are redirected to the protected server. At this point, the server becomes *\"visible\"* and accessible on your device.\n\n![OpenNHP Demo](docs/images/OpenNHP_ACDemo1.png)\n\n---\n\n## Vision: Making the Internet Trustworthy\n\nThe openness of TCP/IP protocols has driven the explosive growth of internet applications but also exposed vulnerabilities, allowing malicious actors to gain unauthorized access and exploit any exposed IP address. Although the [OSI network model](https://en.wikipedia.org/wiki/OSI_model) defines the *5th layer (Session Layer)* for managing connections, few effective solutions have been implemented to address this.\n\n**NHP**, or the **\"Network-resource Hiding Protocol\"**, is a lightweight cryptography-driven Zero Trust  protocol designed to function at the *OSI 5th and 6th Layer*, which is optimal for managing network visibility and connections. NHP's key objective is to conceal protected resources from unauthorized entities, granting access only to verified, authorized users through continuous verification, contributing to a more trustworthy Internet.\n\n![Trustworthy Internet](docs/images/TrustworthyCyberspace.png)\n\n---\n\n## Solution: OpenNHP Fixes the Network/Data Visibility Control\n\n**OpenNHP** is the open-source implementation of the NHP protocol. It is cryptography-driven and designed with security-first principles, implementing a true zero-trust architecture at the *OSI Session and Presentation Layer*. \n\n![OpenNHP as the OSI 5th and 6th layer](docs/images/OSI_OpenNHP2.png)\n\nOpenNHP builds upon earlier research in network hiding technology, utilizing modern cryptographic framework and architecture to ensure security and high performance, thereby overcoming the limitations of previous technologies.\n\n| Network Hiding Protocol | 1st Generation | 2nd Generation | 3rd Generation |\n|:---|:---|:---|:---|\n| **Core Technology** | [Port Knocking](https://en.wikipedia.org/wiki/Port_knocking) | [Single Packet Authorization (SPA)](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2) | Network-resource Hiding Protocol (NHP) |\n| **Authentication** | Port sequences | Shared Secrets | Modern Crypto Framework |\n| **Architecture** | No Control Plane | No Control Plane | Scalable Control Plane |\n| **Capability** | Hide Ports | Hide Ports | Hide Ports, IPs and Domains |\n| **Access Control** | IP Level | Port Level | Application Level |\n| **Open Source Projects** | [knock](https://github.com/jvinet/knock) *(C)* | [fwknop](https://github.com/mrash/fwknop) *(C++)* | [OpenNHP](https://github.com/OpenNHP/opennhp) *(Go)* |\n\n> It is crucial to choose a **memory-safe** language like *Go* for OpenNHP development, as emphasized in the [US Government technical report](https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf). For a detailed comparison between **SPA and NHP**, refer to the [section below](#comparison-between-spa-and-nhp).\n\n## Security Benefits\n\nSince OpenNHP implements Zero Trust principles at the *OSI Session Layer*, it offers significant benefits:\n\n- Reduces attack surface by hiding infrastructure\n- Prevents unauthorized network reconnaissance\n- Mitigates vulnerability exploitation\n- Stops phishing via encrypted DNS\n- Protects against DDoS attacks\n- Enables fine-grained access control\n- Provides identity-based connection tracking\n- Attack attribution\n\n## Architecture\n\nThe OpenNHP architecture is inspired by the [NIST Zero Trust Architecture standard](https://www.nist.gov/publications/zero-trust-architecture). It follows a modular design with the 3 core components: **NHP-Server**, **NHP-AC** and **NHP-Agent**, as illustrated in the below diagram.\n\n![OpenNHP architecture](docs/images/OpenNHP_Arch.png)\n\n> Please refer to the [OpenNHP Documentation](https://opennhp.org/) for detailed information about architecture and workflow.\n\n## Core: Cryptographic Algorithms\n\nCryptography is at the heart of OpenNHP, providing robust security, excellent performance, and scalability by utilizing cutting-edge cryptographic algorithms. Below are the key cryptographic algorithms and frameworks employed by OpenNHP:\n\n- **[Elliptic Curve Cryptography (ECC)](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography):** Used for efficient public key cryptography.\n\n> Compared to RSA, ECC offers superior efficiency with stronger encryption at shorter key lengths, improving both network transmission and computational performance. The table below highlights the differences in security strength, key lengths, and the key length ratio between RSA and ECC, along with their respective validity periods.\n\n| Security Strength (bits) | DSA/RSA Key Length (bits) | ECC Key Length (bits) | Ratio: ECC vs. DSA/RSA | Validity |\n|:------------------------:|:-------------------------:|:---------------------:|:----------------------:|:--------:|\n| 80                       | 1024                      | 160-223               | 1:6                    | Until 2010 |\n| 112                      | 2048                      | 224-255               | 1:9                    | Until 2030 |\n| 128                      | 3072                      | 256-383               | 1:12                   | After 2031 |\n| 192                      | 7680                      | 384-511               | 1:20                   | |\n| 256                      | 15360                     | 512+                  | 1:30                   | |\n\n- **[Noise Protocol Framework](https://noiseprotocol.org/):** Enables secure key exchange, message encryption/decryption, and mutual authentication.\n\n> The Noise Protocol is built around the [Diffie-Hellman key agreement](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) and provides modern cryptographic solutions like mutual and optional authentication, identity hiding, forward secrecy, and zero round-trip encryption. Proven for its security and performance, it is already used by popular applications like [WhatsApp](https://www.whatsapp.com/security/WhatsApp-Security-Whitepaper.pdf), [Slack](https://github.com/slackhq/nebula) and [WireGuard](https://www.wireguard.com/).\n\n- **[Identity-Based Cryptography (IBC)](https://en.wikipedia.org/wiki/Identity-based_cryptography):** Simplifies key distribution at scale.\n\n> Efficient key distribution is essential for implementing Zero Trust. OpenNHP supports both PKI and IBC. While PKI has been widely used for decades, it depends on centralized Certificate Authorities (CA) for identity verification and key management, which can be time-consuming and costly. In contrast, IBC allows for a decentralized and self-governing approach to identity verification and key management, making it more cost-effective for OpenNHP's Zero Trust environment, where billions of devices or servers may need protection and onboarding in real-time.\n\n- **[Certificateless Public Key Cryptography (CL-PKC)](https://en.wikipedia.org/wiki/Certificateless_cryptography):** Recommended IBC algorithm \n\n> CL-PKC is a scheme that enhances security by avoiding key escrow and addressing the limitations of Identity-Based Cryptography (IBC). In most IBC systems, a user's private key is generated by a Key Generation Center (KGC), which introduces significant risks. A compromised KGC can lead to the exposure of all users' private keys, requiring full trust in the KGC. CL-PKC mitigates this issue by splitting the key generation process, so the KGC only has knowledge of a partial private key. As a result, CL-PKC combines the strengths of both PKI and IBC, offering stronger security without the drawbacks of centralized key management.\n\nFurther reading:\n\n> Please refer to the [OpenNHP Documentation](https://opennhp.org/cryptography/) for detailed explanation of cryptographic algorithms used in OpenNHP.\n\n## Key Features\n\n- Mitigates vulnerability exploitation by enforcing \"deny-all\" rules by default\n- Prevents phishing attacks through encrypted DNS resolution\n- Protects against DDoS attacks by hiding infrastructure\n- Enables attack attribution through identity-based connections\n- Default-deny access control for all protected resources\n- Identity and device-based authentication before network access\n- Encrypted DNS resolution to prevent DNS hijacking\n- Distributed infrastructure to mitigate DDoS attacks\n- Scalable architecture with decoupled components\n- Integration with existing identity and access management systems\n- Support for various deployment models (client-to-gateway, client-to-server, etc)\n- Cryptographically secure using modern algorithms (ECC, Noise Protocol, IBC)\n\n<details>\n<summary>Click to expand feature details</summary>\n\n- **Default-deny access control**: All resources are hidden by default, only becoming accessible after authentication and authorization.\n- **Identity and device-based authentication**: Ensures that only known users on approved devices can gain access.\n- **Encrypted DNS resolution**: Prevents DNS hijacking and associated phishing attacks.\n- **DDoS mitigation**: Distributed infrastructure design helps protect against Distributed Denial of Service attacks.\n- **Scalable architecture**: Decoupled components allow for flexible deployment and scaling.\n- **IAM integration**: Works with your existing Identity and Access Management systems.\n- **Flexible deployment**: Supports various models including client-to-gateway, client-to-server, and more.\n- **Strong cryptography**: Utilizes modern algorithms like ECC, Noise Protocol, and IBC for robust security.\n</details>\n\n## Deployment\n\nOpenNHP supports multiple deployment models to suit different use cases:\n\n- Client-to-Gateway: Secures access to multiple servers behind a gateway\n- Client-to-Server: Directly secures individual servers/applications\n- Server-to-Server: Secures communication between backend services\n- Gateway-to-Gateway: Secures site-to-site connections\n\n> Please refer to the [OpenNHP Documentation](https://opennhp.org/deploy/) for detailed deployment instructions.\n\n## Comparison between SPA and NHP\nThe Single Packet Authorization (SPA) protocol is included in the [Software Defined Perimeter (SDP) specification](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2) released by the [Cloud Security Alliance (CSA)](https://cloudsecurityalliance.org/). NHP improves security, reliability, scalability, and extensibility through a modern cryptographic framework and architecture, as demonstrated in the [AHAC research paper](https://www.mdpi.com/2076-3417/14/13/5593).\n\n| - | SPA |NHP | NHP Advantages  |\n|:---|:---|:---|:---|\n| **Architecture** | The SPA packet decryption and user/device authentication component is coupled with the network access control component in the SPA server. | NHP-Server (the packet decryption and user/device authentication component) and NHP-AC( the access control component) are decoupled. NHP-Server can be deployed in separate hosts and supports horizontal scaling. | <ul><li> Performance: the resource-consuming component NHP-server is separated from the protected server. </li><li>Scalability: NHP-server can be deployed in distributed or clustered mode.</li><li>Security: the IP address of the protected server is not visible to the client unless the authentication succeeded. </li></ul>|\n| **Communication** | Single direction | Bi-direction | Better reliability with the status notification of access control |\n| **Cryptographic framework** | Shared Secretes | PKI or IBC, Noise Framework |<ul><li>Security: proven secure key exchange mechanism to mitigate the MITM threats</li><li>Low cost: efficient key distribution for zero trust model</li><li>Performance: high performance encryption/decryption</li></ul>|\n| **Capability of Hiding network infrastructure** | Only server ports | Domain, IP, and ports | More powerful against various attacks(e.g., vulnerabilities, DNS hijack, and DDoS attacks) |\n| **Extensibility** | None, only for SDP | All-purpose | Support any scenario that needs service darkening |\n| **Interoperability** | Not available | Customizable| NHP can seamlessly integrate with existing protocols (e.g., DNS, FIDO, etc.) |\n\n\n## Contributing\n\nWe welcome contributions to OpenNHP! Please see our [Contributing Guidelines](CONTRIBUTING.md) for more information on how to get involved.\n\n\n## License\n\nOpenNHP is released under the [Apache 2.0 License](LICENSE).\n\n\n## Contact\n\n- Project Website: [https://github.com/OpenNHP/opennhp](https://github.com/OpenNHP/opennhp)\n- Email: [opennhp@gmail.com](mailto:opennhp@gmail.com)\n- Slack Channel: [Join our Slack](https://slack.opennhp.org)\n\nFor more detailed documentation, please visit our [Official Documentation](https://opennhp.org).\n\n\n## References\n\n1. [From Naptime to Big Sleep: Using Large Language Models To Catch Vulnerabilities In Real-World Code](https://googleprojectzero.blogspot.com/2024/10/from-naptime-to-big-sleep.html), Google Big Sleep team. Google Project Zero. Oct 2024.\n2. [LLM Agents can Autonomously Exploit One-day Vulnerabilities](https://arxiv.org/abs/2404.08144). Richard Fang, Rohan Bindu, Akul Gupta, Daniel Kang. arxiv. April 2004.\n3. [VulnHuntr: Zero shot vulnerability discovery using LLMs](https://github.com/protectai/vulnhuntr). VulnHuntr Open Source Project: https://github.com/protectai/vulnhuntr. \n4. [Software-Defined Perimeter (SDP) Specification v2.0](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2). Jason Garbis, Juanita Koilpillai, Junaid lslam, Bob Flores, Daniel Bailey, Benfeng Chen, Eitan Bremler, Michael Roza, Ahmed Refaey Hussein. [*Cloud Security Alliance(CSA)*](https://cloudsecurityalliance.org/). Mar 2022.\n5. [AHAC: Advanced Network-Hiding Access Control Framework](https://www.mdpi.com/2076-3417/14/13/5593). Mudi Xu, Benfeng Chen, Zhizhong Tan, Shan Chen, Lei Wang, Yan Liu, Tai Io San, Sou Wang Fong, Wenyong Wang, and Jing Feng. *Applied Sciences Journal*. June 2024.\n6. Noise Protocol Framework. https://noiseprotocol.org/\n7. Vulnerability Management Framework project. https://phoenix.security/web-vuln-management/ \n\n---\n\n🌟 Thank you for your interest in OpenNHP! We look forward to your contributions and feedback.\n"
        },
        {
          "name": "README.zh-cn.md",
          "type": "blob",
          "size": 14.8046875,
          "content": "[![en](https://img.shields.io/badge/lang-en-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.md)\n[![zh-cn](https://img.shields.io/badge/lang-zh--cn-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.zh-cn.md)\n[![de](https://img.shields.io/badge/lang-de-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.de.md)\n[![ja](https://img.shields.io/badge/lang-ja-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.ja.md)\n[![fr](https://img.shields.io/badge/lang-fr-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.fr.md)\n[![es](https://img.shields.io/badge/lang-es-green.svg)](https://github.com/OpenNHP/opennhp/blob/master/README.es.md)\n\n![OpenNHP Logo](docs/images/logo11.png)\n# OpenNHP: 零信任网络隐身协议\nOpenNHP是一个轻量级、基于加密算法的零信任网络协议，其工作在OSI网络模型第五层，用于隐藏您的服务器和数据，避免被攻击者发现和访问\n\n![Build Status](https://img.shields.io/badge/build-passing-brightgreen)\n![Version](https://img.shields.io/badge/version-1.0.0-blue)\n![License](https://img.shields.io/badge/license-Apache%202.0-green)\n\n---\n\n## 挑战：AI 将互联网变为“黑暗森林”\n\n**AI** 技术的快速发展，尤其是大语言模型（LLM），正在显著改变网络安全格局。**自主漏洞利用（AVE）** 的兴起是 AI 时代的一个重大飞跃，大大简化了漏洞的利用，这一点在[这篇研究论文](https://arxiv.org/abs/2404.08144)中有详细说明。这一发展显著增加了任何暴露网络服务的风险，与互联网的[黑暗森林假说](https://en.wikipedia.org/wiki/Dark_forest_hypothesis)不谋而合。AI 驱动的工具不断扫描数字环境，迅速识别和利用弱点。因此，互联网正逐渐成为一个**“黑暗森林”**，**可见性意味着脆弱性**。\n\n![Vulnerability Risks](docs/images/Vul_Risks.png)\n\nGartner 研究预测，[AI 驱动的网络攻击将迅速增加](https://www.gartner.com/en/newsroom/press-releases/2024-08-28-gartner-forecasts-global-information-security-spending-to-grow-15-percent-in-2025)。这一变化要求重新评估传统的网络安全策略，重点放在主动防御、快速响应机制和网络隐藏技术的采用，以保护关键基础设施。\n\n---\n\n## 快速演示：查看 OpenNHP 的工作原理\n\n在深入了解 OpenNHP 的详细信息之前，让我们先来看一个 OpenNHP 如何保护服务器免受未经授权访问的演示。您可以通过访问 https://acdemo.opennhp.org 查看其实际效果。\n\n### 1) 受保护的服务器对未经身份验证的用户“不可见”\n\n默认情况下，任何试图连接受保护服务器的操作都会导致超时错误，因为所有端口都是关闭的，使服务器看起来像是*“离线”*且实际上是“不可见”的。\n\n![OpenNHP Demo](docs/images/OpenNHP_ACDemo0.png)\n\n对服务器进行端口扫描也会返回超时错误。\n\n![OpenNHP Demo](docs/images/OpenNHP_ScanDemo.png)\n\n### 2) 身份验证后，受保护的服务器变得可访问\n\nOpenNHP 支持多种身份验证方法，如 OAuth、SAML、二维码等。为了演示方便，本次演示使用 https://demologin.opennhp.org 上的基本用户名/密码身份验证服务来展示该过程。\n\n![OpenNHP Demo](docs/images/OpenNHP_DemoLogin.png)\n\n点击“登录”按钮后，身份验证成功完成，您会被重定向到受保护的服务器。此时，服务器在您的设备上变得*“可见”*并且可以访问。\n\n![OpenNHP Demo](docs/images/OpenNHP_ACDemo1.png)\n\n---\n\n## 愿景：让互联网变得值得信赖\n\nTCP/IP 协议的开放性推动了互联网应用的爆炸式增长，但也暴露了漏洞，使得恶意攻击者可以获得未经授权的访问并利用任何暴露的 IP 地址。尽管 [OSI 网络模型](https://en.wikipedia.org/wiki/OSI_model) 在*第五层（会话层）*定义了连接管理，但在实际中很少有有效的解决方案能够应对这一挑战。\n\n**NHP**，即**“网络基础设施隐藏协议”**，是一种轻量级、基于加密的零信任网络协议，旨在工作于*OSI 会话层*，该层在管理网络可见性和连接方面是最佳选择。NHP 的主要目标是将受保护的资源隐藏于未授权的实体，只允许经过验证的用户通过持续认证访问，从而为更值得信赖的互联网作出贡献。\n\n![Trustworthy Internet](docs/images/TrustworthyCyberspace.png)\n\n---\n\n## 解决方案：OpenNHP 解决网络可见性控制问题\n\n**OpenNHP** 是 NHP 协议的开源实现。它基于加密技术，采用安全优先的原则，在*OSI 会话层*实现了真正的零信任架构。\n\n![OpenNHP as the OSI 5th layer](docs/images/OSI_OpenNHP.png)\n\nOpenNHP 构建在早期的网络隐藏技术研究基础之上，利用现代加密框架和架构确保安全性和高性能，从而克服了前代技术的局限性。\n\n| 网络隐藏协议 | 第一代 | 第二代 | 第三代 |\n|:---|:---|:---|:---|\n| **核心技术** | [端口敲门](https://en.wikipedia.org/wiki/Port_knocking) | [单包认证（SPA）](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2) | 网络基础设施隐藏协议（NHP） |\n| **身份认证** | 端口序列 | 共享密钥 | 现代加密框架 |\n| **架构** | 无控制平面 | 无控制平面 | 可扩展控制平面 |\n| **功能** | 隐藏端口 | 隐藏端口 | 隐藏端口、IP 和域名 |\n| **访问控制** | IP 层级 | 端口层级 | 应用层级 |\n| **开源项目** | [knock](https://github.com/jvinet/knock) *(C)* | [fwknop](https://github.com/mrash/fwknop) *(C++)* | [OpenNHP](https://github.com/OpenNHP/opennhp) *(Go)* |\n\n> 开发 OpenNHP 选择使用**内存安全**的语言如 *Go*，这一点在[美国政府技术报告](https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf)中得到了强调。有关 **SPA 和 NHP** 之间详细的比较，请参见[下文](#comparison-between-spa-and-nhp)。\n\n## 安全性优势\n\n由于 OpenNHP 在 *OSI 会话层*实现了零信任原则，因此具有显著的优势：\n\n- 通过隐藏基础设施减少攻击面\n- 防止未经授权的网络侦察\n- 减少漏洞利用的可能性\n- 通过加密的 DNS 保护防止钓鱼\n- 抵御 DDoS 攻击\n- 提供细粒度的访问控制\n- 实现基于身份的连接追踪\n- 支持攻击溯源\n\n## 架构\n\nOpenNHP 的架构受 [NIST 零信任架构标准](https://www.nist.gov/publications/zero-trust-architecture) 启发，采用模块化设计，包含三个核心组件：**NHP-Server**、**NHP-AC** 和 **NHP-Agent**，如下图所示。\n\n![OpenNHP architecture](docs/images/OpenNHP_Arch.png)\n\n> 有关架构和工作流程的详细信息，请参阅 [OpenNHP 文档](https://opennhp.org/)。\n\n## 核心：加密算法\n\n加密是 OpenNHP 的核心，提供强大的安全性、出色的性能和可扩展性，使用了先进的加密算法。以下是 OpenNHP 采用的关键加密算法和框架：\n\n- **[椭圆曲线密码学（ECC）](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography)**：用于高效的公钥密码学。\n\n> 与 RSA 相比，ECC 具有更高的效率，以较短的密钥长度提供更强的加密能力，从而提高网络传输和计算性能。下表显示了 RSA 和 ECC 在安全强度、密钥长度和密钥长度比率上的差异，以及其有效期。\n\n| 安全强度（位） | DSA/RSA 密钥长度（位） | ECC 密钥长度（位） | 比率：ECC 与 DSA/RSA | 有效期 |\n|:---------------:|:----------------------:|:-----------------:|:------------------:|:------:|\n| 80              | 1024                   | 160-223           | 1:6                | 到 2010 年 |\n| 112             | 2048                   | 224-255           | 1:9                | 到 2030 年 |\n| 128             | 3072                   | 256-383           | 1:12               | 2031 年后 |\n| 192             | 7680                   | 384-511           | 1:20               | |\n| 256             | 15360                  | 512+              | 1:30               | |\n\n- **[Noise 协议框架](https://noiseprotocol.org/)**：用于安全的密钥交换、消息加密/解密和相互身份认证。\n\n> Noise 协议基于[Diffie-Hellman 密钥交换](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)，提供了现代加密解决方案，如相互和可选认证、身份隐藏、前向安全性和零轮次加密。它已被 WhatsApp、Slack 和 WireGuard 等应用广泛验证并使用，证明其安全性和性能。\n\n- **[基于身份的加密（IBC）](https://en.wikipedia.org/wiki/Identity-based_cryptography)**：简化了大规模的密钥分发。\n\n> 高效的密钥分发是实现零信任的关键。OpenNHP 支持 PKI 和 IBC。虽然 PKI 已经被广泛使用，但它依赖于集中式的证书颁发机构（CA）进行身份验证和密钥管理，这在时间和成本上较为昂贵。相比之下，IBC 允许在身份验证和密钥管理方面采用去中心化和自我管理的方法，使其在 OpenNHP 的零信任环境中更具成本效益，尤其是在需要实时保护和管理数十亿设备或服务器的情况下。\n\n- **[无证书公钥加密（CL-PKC）](https://en.wikipedia.org/wiki/Certificateless_cryptography)**：推荐的 IBC 算法。\n\n> CL-PKC 是一种通过避免密钥托管和解决基于身份的加密（IBC）局限性来增强安全性的方案。在大多数 IBC 系统中，用户的私钥由密钥生成中心（KGC）生成，这带来了显著的风险。如果 KGC 被攻破，所有用户的私钥都可能被泄露，这要求对 KGC 完全信任。CL-PKC 通过将密钥生成过程分离，使 KGC 仅了解部分私钥，从而避免这一问题。结果，CL-PKC 结合了 PKI 和 IBC 的优点，在不牺牲安全性的情况下提供更强的保护。\n\n更多阅读：\n\n> 有关 OpenNHP 中使用的加密算法的详细说明，请参阅 [OpenNHP 文档](https://opennhp.org/cryptography/)。\n\n## 主要特性\n\n- 通过强制默认“全部拒绝”规则减少漏洞利用\n- 通过加密的 DNS 解决防止钓鱼攻击\n- 通过隐藏基础设施保护免受 DDoS 攻击\n- 通过身份追踪连接实现攻击溯源\n- 对所有受保护资源的默认拒绝访问控制\n- 在网络访问前进行基于身份和设备的身份认证\n- 加密的 DNS 解决防止 DNS 劫持\n- 分布式基础设施抵御 DDoS 攻击\n- 解耦组件实现可扩展架构\n- 与现有身份和访问管理系统集成\n- 支持多种部署模型（客户端到网关、客户端到服务器等）\n- 使用现代算法（ECC、Noise 协议、IBC）进行加密确保安全性\n\n<details>\n<summary>点击展开特性详情</summary>\n\n- **默认拒绝访问控制**：所有资源默认隐藏，只有通过身份验证和授权后才会变得可访问。\n- **基于身份和设备的身份验证**：确保只有已知用户在授权设备上可以访问。\n- **加密的 DNS 解决**：防止 DNS 劫持和相关的钓鱼攻击。\n- **DDoS 缓解**：分布式基础设施设计有助于抵御分布式拒绝服务攻击。\n- **可扩展架构**：解耦组件允许灵活部署和扩展。\n- **IAM 集成**：可以与现有身份和访问管理系统配合使用。\n- **灵活部署**：支持包括客户端到网关、客户端到服务器等多种模型。\n- **强大加密**：使用现代算法如 ECC、Noise 协议和 IBC 确保安全性。\n</details>\n\n## 部署\n\nOpenNHP 支持多种部署模型，以适应不同的使用场景：\n\n- 客户端到网关：保护网关后面的多个服务器的访问\n- 客户端到服务器：直接保护单个服务器/应用\n- 服务器到服务器：保护后端服务之间的通信\n- 网关到网关：保护站点到站点的连接\n\n> 有关详细部署说明，请参阅 [OpenNHP 文档](https://opennhp.org/deploy/)。\n\n## SPA 和 NHP 的比较\n单包认证（SPA）协议被包含在 [软件定义边界（SDP）规范](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2) 中，由 [云安全联盟（CSA）](https://cloudsecurityalliance.org/) 发布。NHP 通过现代加密框架和架构在安全性、可靠性、可扩展性和可扩展性方面进行了改进，这一点在 [AHAC 研究论文](https://www.mdpi.com/2076-3417/14/13/5593) 中得到了验证。\n\n| - | SPA | NHP | NHP 优势 |\n|:---|:---|:---|:---|\n| **架构** | SPA 服务器中的 SPA 数据包解密和用户/设备身份验证组件与网络访问控制组件是耦合的。 | NHP-Server（数据包解密和用户/设备身份验证组件）和 NHP-AC（访问控制组件）是解耦的。NHP-Server 可以部署在独立的主机上，并支持水平扩展。 | <ul><li>性能：资源消耗大的组件 NHP-Server 从受保护服务器分离。</li><li>可扩展性：NHP-Server 可以以分布式或集群模式部署。</li><li>安全性：受保护服务器的 IP 地址在身份验证成功之前对客户端是不可见的。</li></ul> |\n| **通信** | 单向 | 双向 | 更好的可靠性，访问控制状态通知 |\n| **加密框架** | 共享密钥 | PKI 或 IBC，Noise 框架 | <ul><li>安全性：经过验证的安全密钥交换机制，减轻中间人攻击威胁</li><li>低成本：适合零信任模型的高效密钥分发</li><li>性能：高性能加密/解密</li></ul> |\n| **隐藏网络基础设施的能力** | 仅服务器端口 | 域名、IP 和端口 | 更强大，针对各种攻击（如漏洞利用、DNS 劫持和 DDoS 攻击） |\n| **可扩展性** | 无，仅适用于 SDP | 通用 | 支持任何需要服务暗化的场景 |\n| **互操作性** | 不支持 | 可定制 | NHP 可以无缝集成现有协议（如 DNS、FIDO 等） |\n\n## 贡献\n\n我们欢迎对 OpenNHP 的贡献！有关如何参与的更多信息，请参阅我们的[贡献指南](CONTRIBUTING.md)。\n\n## 许可协议\n\nOpenNHP 遵循 [Apache 2.0 许可协议](LICENSE)。\n\n## 联系方式\n\n- 项目网站：[https://github.com/OpenNHP/opennhp](https://github.com/OpenNHP/opennhp)\n- 电子邮件：[opennhp@gmail.com](mailto:opennhp@gmail.com)\n- Slack 频道：[加入我们的 Slack](https://slack.opennhp.org)\n\n有关更详细的文档，请访问我们的[官方网站](https://opennhp.org)。\n\n## 参考文献\n\n- [软件定义边界（SDP）规范 v2.0](https://cloudsecurityalliance.org/artifacts/software-defined-perimeter-zero-trust-specification-v2)。Jason Garbis、Juanita Koilpillai、Junaid lslam、Bob Flores、Daniel Bailey、Benfeng Chen、Eitan Bremler、Michael Roza、Ahmed Refaey Hussein。[*云安全联盟（CSA）*](https://cloudsecurityalliance.org/)。2022 年 3 月。\n- [AHAC：高级网络隐藏访问控制框架](https://www.mdpi.com/2076-3417/14/13/5593)。Mudi Xu、Benfeng Chen、Zhizhong Tan、Shan Chen、Lei Wang、Yan Liu、Tai Io San、Sou Wang Fong、Wenyong Wang 和 Jing Feng。*应用科学杂志*。2024 年 6 月。\n- Noise 协议框架。https://noiseprotocol.org/\n- 漏洞管理框架项目。https://phoenix.security/web-vuln-management/\n\n---\n\n🌟 感谢您对 OpenNHP 的关注！我们期待您的贡献和反馈。\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.7607421875,
          "content": "# Security Policy\n\n## Reporting Security Issues\n\nThe OpenNHP team and community take security bugs in OpenNHP seriously. We appreciate your efforts to responsibly disclose your findings, and will make every effort to acknowledge your contributions.\n\nTo report a security issue, please use the GitHub Security Advisory [\"Report a Vulnerability\"](https://github.com/opennhp/opennhp/security/advisories/new) tab.\n\nThe OpenNHP team will send a response indicating the next steps in handling your report. After the initial reply to your report, the security team will keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance.\n\nReport security bugs in third-party modules to the person or team maintaining the module. \n\n"
        },
        {
          "name": "ac",
          "type": "tree",
          "content": null
        },
        {
          "name": "agent",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.bat",
          "type": "blob",
          "size": 2.5556640625,
          "content": "@echo off\r\n\r\ncd %~dp0\r\n\r\nFOR /F %%i in ('powershell -c \"get-date -format yyMMddHHmmss\"') do SET BUILD_NO=%%i\r\nFOR /F \"tokens=*\" %%a in (version\\VERSION) do SET VERSION=%%a.%BUILD_NO%\r\necho OpenNHP version: %VERSION%\r\nFOR /F \"tokens=* usebackq\" %%a in (`\"git show -s \"--format^=%%H\"\"`) do SET COMMIT_ID=%%a\r\necho commit id: %COMMIT_ID%\r\nFOR /F \"tokens=* usebackq\" %%a in (`\"git show -s \"--format^=%%cd\" \"--date^=format:%%Y-%%m-%%d %%H:%%M:%%S\"\"`) do SET COMMIT_TIME=%%a\r\necho commit time: %COMMIT_TIME%\r\nFOR /F \"tokens=1 usebackq\" %%a in (`echo %date%`) do SET CURR_DATE=%%a\r\nFOR /F \"tokens=1 delims=. usebackq\" %%a in (`echo %time%`) do SET CURR_TIME=%%a\r\nSET BUILD_TIME=%CURR_DATE% %CURR_TIME%\r\necho build time: %BUILD_TIME%\r\n\r\nset LD_FLAGS=\"-X 'github.com/OpenNHP/opennhp/version.Version=%VERSION%' -X 'github.com/OpenNHP/opennhp/version.CommitId=%COMMIT_ID%' -X 'github.com/OpenNHP/opennhp/version.CommitTime=%COMMIT_TIME%' -X 'github.com/OpenNHP/opennhp/version.BuildTime=%BUILD_TIME%'\"\r\n\r\ngo mod tidy\r\nset CGO_ENABLED=1\r\n\r\n:agentd\r\ngo build -trimpath -ldflags %LD_FLAGS% -v -o release\\nhp-agent\\nhp-agentd.exe agent\\main\\main.go\r\nIF %ERRORLEVEL% NEQ 0 exit /b 1\r\ncopy /y agent\\main\\etc\\*.* release\\nhp-agent\\etc\r\n\r\n:acd\r\ngo build -trimpath -ldflags %LD_FLAGS% -v -o release\\nhp-ac\\nhp-acd.exe ac\\main\\main.go\r\nIF %ERRORLEVEL% NEQ 0 exit /b 1\r\ncopy /y ac\\main\\etc\\*.* release\\nhp-ac\\etc\r\n\r\n:serverd\r\ngo build -trimpath -ldflags %LD_FLAGS% -v -o release\\nhp-server\\nhp-serverd.exe server\\main\\main.go\r\nIF %ERRORLEVEL% NEQ 0 exit /b 1\r\ncopy /y server\\main\\etc\\*.* release\\nhp-server\\etc\r\n\r\n:agentsdk\r\ngo build -trimpath -buildmode=c-shared -ldflags %LD_FLAGS% -v -o release\\nhp-agent\\nhp-agent.dll agent\\main\\main.go agent\\main\\export.go\r\nIF %ERRORLEVEL% NEQ 0 exit /b 1\r\ngcc agent\\sdkdemo\\nhp-agent-demo.c -I release\\nhp-agent -l:nhp-agent.dll -Lrelease\\nhp-agent -Wl,-rpath=. -o release\\nhp-agent\\nhp-agent-demo.exe\r\nIF %ERRORLEVEL% NEQ 0 exit /b 1\r\n\r\n:devicesdk\r\ngo build -trimpath -buildmode=c-shared -ldflags %LD_FLAGS% -v -o release\\nhp-device\\nhpdevice.dll core\\main\\main.go core\\main\\nhpdevice.go\r\nIF %ERRORLEVEL% NEQ 0 exit /b 1\r\nREM gcc nhp\\sdkdemo\\nhp-device-demo.c -I nhp\\main -I release\\nhp-device -l:nhpdevice.dll -Lrelease\\nhp-device -Wl,-rpath=. -o release\\nhp-device\\nhp-device-demo.exe\r\nIF %ERRORLEVEL% NEQ 0 exit /b 1\r\ncd release\\nhp-device\r\ncall \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64\r\nlib /def:./nhpdevice.def /name:nhpdevice.dll /out:./nhpdevice.lib /MACHINE:X64\r\ncd ..\\..\r\n\r\necho [Done] OpenNHP v%VERSION% for platform %OS% built!"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.41015625,
          "content": "module github.com/OpenNHP/opennhp\n\ngo 1.20\n\nrequire (\n\tgithub.com/coocood/freecache v1.2.4\n\tgithub.com/emmansun/gmsm v0.24.1\n\tgithub.com/fsnotify/fsnotify v1.7.0\n\tgithub.com/gin-gonic/gin v1.9.1\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/pelletier/go-toml/v2 v2.1.1\n\tgithub.com/spf13/viper v1.18.2\n\tgithub.com/urfave/cli/v2 v2.27.0\n\tgolang.org/x/crypto v0.31.0\n\tgorm.io/driver/mysql v1.5.2\n\tgorm.io/gorm v1.25.5\n)\n"
        },
        {
          "name": "kgc",
          "type": "tree",
          "content": null
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "relay",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}