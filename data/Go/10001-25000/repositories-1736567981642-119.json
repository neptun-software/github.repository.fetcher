{
  "metadata": {
    "timestamp": 1736567981642,
    "page": 119,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "txthinking/brook",
      "stars": 14681,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.009765625,
          "content": ".DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1484375,
          "content": "language: go\nsudo: false\nos:\n  - linux\n  - osx\n  - windows\ngo:\n  - \"1.16\"\nscript:\n    - go test -v .\n    - cd cli/brook && go get -t -v . && go build .\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3173828125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "OPENSOURCELICENSES",
          "type": "blob",
          "size": 47.6396484375,
          "content": "### cli\n\nhttps://github.com/urfave/cli\n\nMIT License\n\nCopyright (c) 2016 Jeremy Saenz & Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n### crypto\n\nhttps://github.com/golang/crypto\n\nCopyright (c) 2009 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### dhcp4\n\nhttps://github.com/krolaw/dhcp4\n\nCopyright (c) 2014 Skagerrak Software Limited. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Skagerrak Software Limited nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### dns\n\nhttps://github.com/miekg/dns\n\nCopyright (c) 2009 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nAs this is fork of the official Go code the same license applies.\nExtensions of the original work are copyright (c) 2011 Miek Gieben\n\n### encrypt\n\nhttps://github.com/txthinking/encrypt\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Cloud <cloud@txthinking.com> http://www.txthinking.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n### go-cache\n\nhttps://github.com/patrickmn/go-cache\n\nCopyright (c) 2012-2017 Patrick Mylund Nielsen and the go-cache contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n### go-flutter\n\nhttps://github.com/go-flutter-desktop/go-flutter\n\nBSD 3-Clause License\n\nCopyright (c) 2019, Pierre Champion\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### go-tproxy\n\nhttps://github.com/LiamHaworth/go-tproxy\n\nMIT License\n\nCopyright (c) 2017 Liam R. Haworth\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n### gopacket\n\nhttps://github.com/google/gopacket\n\nCopyright (c) 2012 Google, Inc. All rights reserved.\nCopyright (c) 2009-2011 Andreas Krennmair. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Andreas Krennmair, Google, nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### gvisor\n\nhttps://github.com/google/gvisor\n\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n------------------\n\nSome files carry the following license, noted at the top of each file:\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in\n   all copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   THE SOFTWARE.\n\n### minify\n\nhttps://github.com/tdewolff/minify\n\nCopyright (c) 2015 Taco de Wolff\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n### mux\n\nhttps://github.com/gorilla/mux\n\nCopyright (c) 2012 Rodrigo Moraes. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n\t * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n\t * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n\t * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### negroni\n\nhttps://github.com/urfave/negroni\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Jeremy Saenz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n### net\n\nhttps://github.com/golang/net\n\nCopyright (c) 2009 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### socks5\n\nhttps://github.com/txthinking/socks5\n\nMIT License\n\nCopyright (c) 2015-present Cloud <cloud@txthinking.com> https://www.txthinking.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n### qrterminal\n\nhttps://github.com/mdp/qrterminal\n\nCopyright 2019 Mark Percival <m@mdp.im>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n### water\n\nhttps://github.com/songgao/water\n\nCopyright (c) 2016, Song Gao <song@gao.io>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of water nor the names of its contributors may be used to\n  endorse or promote products derived from this software without specific prior\n  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### websocket\n\nhttps://github.com/gorilla/websocket\n\nCopyright (c) 2013 The Gorilla WebSocket Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n  Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### wintun.dll\n\nPrebuilt Binaries License\n-------------------------\n\n1. DEFINITIONS. \"Software\" means the precise contents of the \"wintun.dll\"\n   files that are included in the .zip file that contains this document as\n   downloaded from wintun.net/builds.\n\n2. LICENSE GRANT. WireGuard LLC grants to you a non-exclusive and\n   non-transferable right to use Software for lawful purposes under certain\n   obligations and limited rights as set forth in this agreement.\n\n3. RESTRICTIONS. Software is owned and copyrighted by WireGuard LLC. It is\n   licensed, not sold. Title to Software and all associated intellectual\n   property rights are retained by WireGuard. You must not:\n   a. reverse engineer, decompile, disassemble, extract from, or otherwise\n      modify the Software;\n   b. modify or create derivative work based upon Software in whole or in\n      parts, except insofar as only the API interfaces of the \"wintun.h\" file\n      distributed alongside the Software (the \"Permitted API\") are used;\n   c. remove any proprietary notices, labels, or copyrights from the Software;\n   d. resell, redistribute, lease, rent, transfer, sublicense, or otherwise\n      transfer rights of the Software without the prior written consent of\n      WireGuard LLC, except insofar as the Software is distributed alongside\n      other software that uses the Software only via the Permitted API;\n   e. use the name of WireGuard LLC, the WireGuard project, the Wintun\n      project, or the names of its contributors to endorse or promote products\n      derived from the Software without specific prior written consent.\n\n4. LIMITED WARRANTY. THE SOFTWARE IS PROVIDED \"AS IS\" AND WITHOUT WARRANTY OF\n   ANY KIND. WIREGUARD LLC HEREBY EXCLUDES AND DISCLAIMS ALL IMPLIED OR\n   STATUTORY WARRANTIES, INCLUDING ANY WARRANTIES OF MERCHANTABILITY, FITNESS\n   FOR A PARTICULAR PURPOSE, QUALITY, NON-INFRINGEMENT, TITLE, RESULTS,\n   EFFORTS, OR QUIET ENJOYMENT. THERE IS NO WARRANTY THAT THE PRODUCT WILL BE\n   ERROR-FREE OR WILL FUNCTION WITHOUT INTERRUPTION. YOU ASSUME THE ENTIRE\n   RISK FOR THE RESULTS OBTAINED USING THE PRODUCT. TO THE EXTENT THAT\n   WIREGUARD LLC MAY NOT DISCLAIM ANY WARRANTY AS A MATTER OF APPLICABLE LAW,\n   THE SCOPE AND DURATION OF SUCH WARRANTY WILL BE THE MINIMUM PERMITTED UNDER\n   SUCH LAW. ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND\n   WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR\n   A PARTICULAR PURPOSE OR NON-INFRINGEMENT ARE DISCLAIMED, EXCEPT TO THE\n   EXTENT THAT THESE DISCLAIMERS ARE HELD TO BE LEGALLY INVALID.\n\n5. LIMITATION OF LIABILITY. To the extent not prohibited by law, in no event\n   WireGuard LLC or any third-party-developer will be liable for any lost\n   revenue, profit or data or for special, indirect, consequential, incidental\n   or punitive damages, however caused regardless of the theory of liability,\n   arising out of or related to the use of or inability to use Software, even\n   if WireGuard LLC has been advised of the possibility of such damages.\n   Solely you are responsible for determining the appropriateness of using\n   Software and accept full responsibility for all risks associated with its\n   exercise of rights under this agreement, including but not limited to the\n   risks and costs of program errors, compliance with applicable laws, damage\n   to or loss of data, programs or equipment, and unavailability or\n   interruption of operations. The foregoing limitations will apply even if\n   the above stated warranty fails of its essential purpose. You acknowledge,\n   that it is in the nature of software that software is complex and not\n   completely free of errors. In no event shall WireGuard LLC or any\n   third-party-developer be liable to you under any theory for any damages\n   suffered by you or any user of Software or for any special, incidental,\n   indirect, consequential or similar damages (including without limitation\n   damages for loss of business profits, business interruption, loss of\n   business information or any other pecuniary loss) arising out of the use or\n   inability to use Software, even if WireGuard LLC has been advised of the\n   possibility of such damages and regardless of the legal or quitable theory\n   (contract, tort, or otherwise) upon which the claim is based.\n\n6. TERMINATION. This agreement is affected until terminated. You may\n   terminate this agreement at any time. This agreement will terminate\n   immediately without notice from WireGuard LLC if you fail to comply with\n   the terms and conditions of this agreement. Upon termination, you must\n   delete Software and all copies of Software and cease all forms of\n   distribution of Software.\n\n7. SEVERABILITY. If any provision of this agreement is held to be\n   unenforceable, this agreement will remain in effect with the provision\n   omitted, unless omission would frustrate the intent of the parties, in\n   which case this agreement will immediately terminate.\n\n8. RESERVATION OF RIGHTS. All rights not expressly granted in this agreement\n   are reserved by WireGuard LLC. For example, WireGuard LLC reserves the\n   right at any time to cease development of Software, to alter distribution\n   details, features, specifications, capabilities, functions, licensing\n   terms, release dates, APIs, ABIs, general availability, or other\n   characteristics of the Software.\n\n### wireguard-go\n\nhttps://github.com/WireGuard/wireguard-go\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n### x\n\nhttps://github.com/txthinking/x\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-present Cloud <cloud@txthinking.com> https://www.txthinking.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n### tengo\n\nhttps://github.com/d5/tengo\n\nMIT License\n\nCopyright (c) 2019 Daniel Kang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n### iploc\n\nhttps://github.com/phuslu/iploc\n\nMIT License\n\nCopyright (c) 2020 Phus Lu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n#### quic-go\n\nhttps://github.com/quic-go/quic-go\n\nMIT License\n\nCopyright (c) 2016 the quic-go authors & Google, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n#### code_field\n\nhttps://github.com/BertrandBev/code_field\n\nMIT License\n\nCopyright (c) 2021 Bertrand Bevillard\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n#### xterm\n\nhttps://github.com/TerminalStudio/xterm.dart\n\nThe MIT License (MIT)\n\nCopyright (c) 2020 xuty\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 53.65625,
          "content": "# Brook\n<!--SIDEBAR-->\n<!--G-R3M673HK5V-->\nA cross-platform programmable network tool.\n\n# Sponsor\n**❤️  [Shiliew - A network app designed for those who value their time](https://www.txthinking.com/shiliew.html)**\n# Getting Started\n\n## Server\n\n```\nbash <(curl https://bash.ooo/nami.sh)\n```\n\n```\nnami install brook\n```\n\n```\nbrook server -l :9999 -p hello\n```\n\n## Client\n\n- [iOS](https://apps.apple.com/us/app/brook-network-tool/id1216002642)\n- [Android](https://github.com/txthinking/brook/releases/latest/download/Brook.apk)\n- [macOS](https://apps.apple.com/us/app/brook-network-tool/id1216002642)\n- [Windows](https://github.com/txthinking/brook/releases/latest/download/Brook.msix)\n- [Linux](https://github.com/txthinking/brook/releases/latest/download/Brook.bin)\n- [OpenWrt](https://www.txthinking.com/talks/articles/brook-openwrt-en.article)\n\n> You may want to use `brook link` to customize some parameters\n\n- [About App Mode on macOS](https://www.txthinking.com/talks/articles/macos-app-mode-en.article)\n- [How to install Brook on Windows](https://www.txthinking.com/talks/articles/msix-brook-en.article)\n- [How to install Brook on Linux](https://www.txthinking.com/talks/articles/linux-app-brook-en.article)\n- [How to install Brook on OpenWrt](https://www.txthinking.com/talks/articles/brook-openwrt-en.article)\n\n# Server\n\nbrook dnsserver, dohserver, dnsserveroverbrook, server, wsserver, wssserver, quicserver can use script to do more complex thing. brook will pass different _global variables_ to the script at different times, and the script only needs to assign the processing result to the global variable `out`\n\n## Brook DNS Server\n\n![x](./images/brook-dns-server.svg)\n\nScript can do more:\n\n- There are [examples](https://github.com/txthinking/brook/blob/master/programmable/dnsserver/) for dns server\n- In the `script: in_dnsquery` step, script can do more, read more below\n\n## Brook Server\n\n![x](./images/brook-server.svg)\n\nScript can do more:\n\n- There are [examples](https://github.com/txthinking/brook/blob/master/programmable/server/) for server\n- In the `script: in_address` step, script can do more, read more below\n\n## Variables\n\n| variable                       | type | command   | timing                            | description                                       | out type |\n| ------------------------------ | ---- | ----------- | --------------------------------- | ------------------------------------------------- | -------- |\n| in_dnsservers                  | map  | dnsserver/dnsserveroverbrook/dohserver/server/wsserver/wssserver/quicserver | When just running | Predefine multiple dns servers, and then programmatically specify which one to use | map      |\n| in_dohservers                  | map  | dnsserver/dnsserveroverbrook/dohserver/server/wsserver/wssserver/quicserver | When just running | Predefine multiple doh servers, and then programmatically specify which one to use | map      |\n| in_brooklinks                  | map  | server/wsserver/wssserver/quicserver | When just running | Predefine multiple brook links, and then programmatically specify which one to use | map      |\n| in_dnsquery                    | map  | dnsserver/dnsserveroverbrook/dohserver | When a DNS query occurs           | Script can decide how to handle this request      | map      |\n| in_address                     | map  | server/wsserver/wssserver/quicserver           | When the Server connects the proxied address  | Script can decide how to handle this request                  | map      |\n\n## in_dnsservers\n\n| Key    | Type   | Description | Example    |\n| ------ | ------ | -------- | ---------- |\n| _ | bool | meaningless    | true |\n\n`out`, ignored if not of type `map`\n\n| Key    | Type   | Description | Example    |\n| ------------ | ------ | -------------------------------------------------------------------------------------------------- | ------- |\n| ...    | ... | ... | ... |\n| custom name    | string | dns server | 8.8.8.8:53                           |\n| ...    | ... | ... | ... |\n\n\n## in_dohservers\n\n| Key    | Type   | Description | Example    |\n| ------ | ------ | -------- | ---------- |\n| _ | bool | meaningless    | true |\n\n`out`, ignored if not of type `map`\n\n| Key    | Type   | Description | Example    |\n| ------------ | ------ | -------------------------------------------------------------------------------------------------- | ------- |\n| ...    | ... | ... | ... |\n| custom name    | string | dohserver | https://dns.quad9.net/dns-query?address=9.9.9.9%3A443                           |\n| ...    | ... | ... | ... |\n\n\n## in_brooklinks\n\n| Key    | Type   | Description | Example    |\n| ------ | ------ | -------- | ---------- |\n| _ | bool | meaningless    | true |\n\n`out`, ignored if not of type `map`\n\n| Key    | Type   | Description | Example    |\n| ------------ | ------ | -------------------------------------------------------------------------------------------------- | ------- |\n| ...    | ... | ... | ... |\n| custom name    | string | brook link | brook://...                           |\n| ...    | ... | ... | ... |\n\n## in_dnsquery\n\n| Key    | Type   | Description | Example    |\n| ------ | ------ | ----------- | ---------- |\n| fromipaddress | string | client address which send this request | 1.2.3.4:5 |\n| domain | string | domain name | google.com |\n| type   | string | query type  | A          |\n| ...   | ... | ...  | ... |\n| tag_key   | string | --tag specifies the key value | tag_value |\n| ...   | ... | ...  | ... |\n\n`out`, if it is `error` type will be recorded in the log. Ignored if not of type `map`\n\n| Key          | Type   | Description                                                                                                                   | Example |\n| ------------ | ------ | ----------------------------------------------------------------------------------------------------------------------------- | ------- |\n| block        | bool   | Whether Block, default `false`                                                | false   |\n| ip           | string | Specify IP directly, only valid when `type` is `A`/`AAAA`                                                                     | 1.2.3.4 |\n| dnsserverkey       | string   | Use the dnsserver specified by key to resolve | custom name |\n| dohserverkey       | string   | Use the dohserver specified by key to resolve | custom name |\n\n## in_address\n\n| Key    | Type   | Description | Example    |\n| ------ | ------ | ----------- | ---------- |\n| network | string | `tcp` or `udp` | tcp |\n| fromipaddress | string | client address which send this request | 1.2.3.4:5 |\n| ipaddress   | string | ip address to be proxied  | 1.2.3.4:443          |\n| domainaddress   | string | domain address to be proxied  | google.com:443          |\n| user   | string | user ID, only available when used with --userAPI  | 9         |\n| ...   | ... | ...  | ... |\n| tag_key   | string | --tag specifies the key value | tag_value |\n| ...   | ... | ...  | ... |\n\n`out`, if it is `error` type will be recorded in the log. Ignored if not of type `map`\n\n| Key          | Type   | Description                                                                                                                   | Example |\n| ------------ | ------ | ----------------------------------------------------------------------------------------------------------------------------- | ------- |\n| block        | bool   | Whether Block, default `false`                                                | false   |\n| address           | string | Rewrite destination to an address                                                                     | 1.2.3.4 |\n| ipaddressfromdnsserverkey       | string   | If the destination is domain address, use the dnsserver specified by key to resolve | custom name |\n| ipaddressfromdnsserverkey       | string   | If the destination is domain address, use the dohserver specified by key to resolve | custom name |\n| aoraaaa       | string   | Must be used with ipaddressfromdnsserverkey or ipaddressfromdnsserverkey. Valid value is `A`/`AAAA` | A |\n| speedlimit       | int   | Set a rate limit for this request, for example `1000000` means 1000 kb/s | 1000000 |\n| brooklinkkey       | string   | Use the brook link specified by key to proxy | custom name |\n| dialwith       | string   | If your server has multiple IPs or network interfaces, you can specify the IP or network interface name to initiate this request | 192.168.1.2 or 2606:4700:3030::ac43:a86a or en1 |\n# Client\n\n## CLI\n\nBefore discussing the GUI client, let's first talk about the command line client `brook`. As we know, after you have deployed the server, you can use the command line client `brook` to create a local socks5 proxy or http proxy on your machine, and then configure it in your system proxy settings or in your browser to use this proxy. However:\n\n1. Not all apps will use this proxy, whether they use it is up to the app itself.\n2. Generally, all UDP protocols will not go through this proxy, such as http3.\n\nFor the specifics of socks5 and http proxy, you can read [this article](https://www.txthinking.com/talks/articles/socks5-and-http-proxy-en.article).\n\n## GUI\n\nThe GUI client does not use socks5 and http proxy mode, so there is no issue with some software not using the system proxy. Instead, it uses a virtual network card to take over the entire system's network, including UDP-based http3. Moreover, Brook allows us to control network requests programmatically, so it is necessary to have basic knowledge of network requests. Brook GUI will pass different _global variables_ to the script at different times, and the script only needs to assign the processing result to the global variable `out`\n\n## Without Brook\n\n> Note: When we talk about addresses, we mean addresses that include the port number, such as a domain address: `google.com:443`, or an IP address: `8.8.8.8:53`\n\n![x](./images/network.svg)\n\n1. When an app requests a domain address, such as `google.com:443`\n2. It will first perform a DNS resolution, which means that the app will send a network request to the system-configured DNS, such as `8.8.8.8:53`, to inquire about the IP of `google.com`\n1. The system DNS will return the IP of `google.com`, such as `1.2.3.4`, to the app\n3. The app will combine the IP and port into an IP address, such as: `1.2.3.4:443`\n4. The app makes a network request to this IP address `1.2.3.4:443`\n5. The app receives the response data\n\nIn the above process, the app actually makes two network requests: one to the IP address `8.8.8.8:53` and another to the IP address `1.2.3.4:443`. In other words, the domain name is essentially an alias for the IP, and must obtain the domain's IP to establish a connection.\n\n## With Brook \n\nBrook has a Fake DNS feature default, which can parse the domain name out of the query requests that an app sends to the system DNS UDP 53 and decide how to respond to the app.\n\n![x](./images/brook-client.svg)\n\n1. When an app requests a domain name address, such as `google.com:443`\n2. A DNS resolution will be performed first. That is, the app will send a network request to the system-configured DNS, such as `8.8.8.8:53`, to inquire about the IP of `google.com`\n3. The Brook client detects that an app is sending a network request to `8.8.8.8:53`. <mark>This will trigger the `in_dnsquery` variable, carrying information such as `domain`</mark>\n1. The Brook client returns a fake IP to the app, such as `240.0.0.1`\n4. The app combines the IP and port into an IP address, such as: `240.0.0.1:443`\n5. The app makes a network request to the IP address `240.0.0.1:443`\n6. The Brook client detects that an app is sending a network request to `240.0.0.1:443`, discovers that this is a fake IP, and will convert the fake IP address back to the domain address `google.com:443`. <mark>This will trigger the `in_address` variable, carrying information such as `domainaddress`</mark>\n1. The Brook client sends `google.com:443` to the Brook Server\n2. The Brook Server first requests its own DNS to resolve the domain name to find out the IP of `google.com`, such as receiving `1.2.3.4`\n3. The Brook Server combines the IP and port into an IP address, such as: `1.2.3.4:443`\n4. The Brook Server sends a network request to `1.2.3.4:443` and returns the data to the Brook client\n5. The Brook client then returns the data to the app\n7. The app receives the response data\n\nHowever, if the following situations occur, the domain name will not/cannot be parsed, meaning that the Brook client will not/cannot know what the domain name is and will treat it as a normal request sent to an IP address. To avoid the ineffectiveness of Fake DNS, please refer to [this article](https://www.txthinking.com/talks/articles/brook-fakedns-en.article):\n\n- Fake DNS not enabled: in this case, the Brook client will not attempt to parse the domain name from the request sent to the system DNS and will treat it as a normal request sent to an IP address.\n- Even with Fake DNS enabled, but the app uses the system's secure DNS or the app's own secure DNS: in this case, the Brook client cannot parse the domain name from the request sent to the secure DNS and will treat it as a normal request sent to an IP address.\n\nScript can do more:\n\n- In the `script: in_dnsquery` step, script can do more, read more below\n- In the `script: in_address` step, script can do more, read more below\n\n## Variables\n\n| variable                       | type | condition   | timing                            | description                                       | out type |\n| ------------------------------ | ---- | ----------- | --------------------------------- | ------------------------------------------------- | -------- |\n| in_brooklinks                  | map  | / | Before connecting  | Predefine multiple brook links, and then programmatically specify which one to connect to | map      |\n| in_dnsquery                    | map  | FakeDNS: On | When a DNS query occurs           | Script can decide how to handle this request      | map      |\n| in_address                     | map  | /           | When connecting to an address     | Script can decide how to handle this request                  | map      |\n| in_httprequest                 | map  | /           | When an HTTP(S) request comes in  | Script can decide how to handle this request  | map      |\n| in_httprequest,in_httpresponse | map  | /           | when an HTTP(S) response comes in | Script can decide how to handle this response | map      |\n\n## in_brooklinks\n\n| Key    | Type   | Description | Example    |\n| ------ | ------ | -------- | ---------- |\n| _ | bool | meaningless    | true |\n\n`out`, ignored if not of type `map`\n\n| Key    | Type   | Description | Example    |\n| ------------ | ------ | -------------------------------------------------------------------------------------------------- | ------- |\n| ...    | ... | ... | ... |\n| custom name    | string | brook link | brook://...                           |\n| ...    | ... | ... | ... |\n\n## in_dnsquery\n\n| Key    | Type   | Description | Example    |\n| ------ | ------ | ----------- | ---------- |\n| domain | string | domain name | google.com |\n| type   | string | query type  | A          |\n| appid   | string | macOS App Mode: this is app id; Linux and Windows: this is app path; OpenWrt: this is IP address of client device. Note: In some operating systems, the app may initiate DNS queries through the system app. | com.google.Chrome.helper          |\n\n`out`, if it is `error` type will be recorded in the log. Ignored if not of type `map`\n\n| Key          | Type   | Description                                                                                                                   | Example |\n| ------------ | ------ | ----------------------------------------------------------------------------------------------------------------------------- | ------- |\n| block        | bool   | Whether Block, default `false`                                                | false   |\n| ip           | string | Ignore fake DNS, specify IP directly, only valid when `type` is `A`/`AAAA`                                                                     | 1.2.3.4 |\n| system       | bool   | Ignore fake DNS, resolve by System DNS over brook, default `false`                                                                                       | false   |\n| bypass       | bool   | Ignore fake DNS, resolve by Bypass DNS, default `false` | false   |\n| brooklinkkey | string   | When need to connect the Server, instead, perfer connect to the Server specified by the key in_brooklinks | custom name   |\n\n## in_address\n\n| Key           | Type   | Description                                                                                                         | Example        |\n| ------------- | ------ | ------------------------------------------------------------------------------------------------------------------- | -------------- |\n| network       | string | Network type, the value `tcp`/`udp`                                                                                 | tcp            |\n| ipaddress     | string | IP type address. There is only one of ipaddress and domainaddress. Note that there is no relationship between these two | 1.2.3.4:443    |\n| domainaddress | string | Domain type address, because of FakeDNS we can get the domain name address here                                     | google.com:443 |\n| appid   | string | macOS App Mode: this is app id; Linux and Windows: this is app path; OpenWrt: this is IP address of client device | com.google.Chrome.helper          |\n\n`out`, if it is `error` type will be recorded in the log. Ignored if not of type `map`\n\n| Key                    | Type   | Description                                                                                                                                                                                             | Example     |\n| ---------------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| block                  | bool   | Whether Block, default `false`                                                                                                                                                                          | false       |\n| ipaddress              | string | Rewrite destination to an ip address                                                                                                                                                                   | 1.2.3.4:443 |\n| ipaddressfrombypassdns | string | Use Bypass DNS to obtain `A` or `AAAA` IP and rewrite the destination, only valid when `domainaddress` exists, the value `A`/`AAAA`                                                                     | A           |\n| bypass                 | bool   | Bypass, default `false`. If `true` and `domainaddress` exists, then `ipaddress` or `ipaddressfrombypassdns` must be specified | false       |\n| mitm                   | bool   | Whether to perform MITM, default `false`. Only valid when `network` is `tcp`. Need to install CA, see below                                                                                             | false       |\n| mitmprotocol           | string | MITM protocol needs to be specified explicitly, the value is `http`/`https`                                                                                                                             | https       |\n| mitmcertdomain         | string | The MITM certificate domain name, which is taken from `domainaddress` by default. If `ipaddress` exists and `mitm` is `true` and `mitmprotocol` is `https` then must be must be specified explicitly           | example.com |\n| mitmwithbody           | bool   | Whether to manipulate the http body, default `false`. will read the body of the request and response into the memory and interact with the script. iOS 50M total memory limit may kill process      | false       |\n| mitmautohandlecompress | bool   | Whether to automatically decompress the http body when interacting with the script, default `false`. Usually need set this to true                                                                                                     | false       |\n| mitmclienttimeout      | int    | Timeout for MITM talk to server, second, default 0                                                                                                                                                      | 0           |\n| mitmserverreadtimeout  | int    | Timeout for MITM read from client, second, default 0                                                                                                                                                    | 0           |\n| mitmserverwritetimeout | int    | Timeout for MITM write to client, second, default 0                                                                                                                                                     | 0           |\n| brooklinkkey | string   | When need to connect the Server，instead, connect to the Server specified by the key in_brooklinks | custom name   |\n\n## in_httprequest\n\n| Key    | Type   | Description                   | Example                     |\n| ------ | ------ | ----------------------------- | --------------------------- |\n| URL    | string | URL                           | `https://example.com/hello` |\n| Method | string | HTTP method                   | GET                         |\n| Body   | bytes  | HTTP request body             | /                           |\n| ...    | string | other fields are HTTP headers | /                           |\n\n`out`, must be set to an unmodified or modified request or a response\n\n## in_httpresponse\n\n| Key        | Type   | Description                   | Example |\n| ---------- | ------ | ----------------------------- | ------- |\n| StatusCode | int    | HTTP status code              | 200     |\n| Body       | bytes  | HTTP response body            | /       |\n| ...        | string | other fields are HTTP headers | /       |\n\n`out`, must be set to an unmodified or modified response\n\n## Modules\n\nIn Brook GUI, scripts are abstracted into **Modules**. There are already [some modules](https://github.com/txthinking/brook/blob/master/programmable/modules/), and there is no magic, it just automatically combine [_header.tengo](https://github.com/txthinking/brook/blob/master/programmable/modules/_header.tengo) and [_footer.tengo](https://github.com/txthinking/brook/blob/master/programmable/modules/_footer.tengo), so you only need to write the module itself.\n\n```\nmodules = append(modules, {\n    // If you want to predefine multiple brook links, and then programmatically specify which one to connect to, then define `brooklinks` key a function\n    brooklinks: func(m) {\n        // Please refer to the example in `brooklinks.tengo`\n    },\n    // If you want to intercept and handle a DNS query, then define `dnsquery` key a function, `m` is the `in_dnsquery`\n    dnsquery: func(m) {\n        // Please refer to the example in `block_aaaa.tengo`\n    },\n    // If you want to intercept and handle an address, then define `address` key a function, `m` is the `in_address`\n    address: func(m) {\n        // Please refer to the example in `block_google_secure_dns.tengo`\n    },\n    // If you want to intercept and handle a http request, then define `httprequest` key a function, `request` is the `in_httprequest`\n    httprequest: func(request) {\n        // Please refer to the example in `ios_app_downgrade.tengo` or `redirect_google_cn.tengo`\n    },\n    // If you want to intercept and handle a http response, then define `httpresponse` key a function, `request` is the `in_httprequest`, `response` is the `in_httpresponse`\n    httpresponse: func(request, response) {\n        // Please refer to the example in `response_sample.tengo`\n    }\n})\n```\n\n## ipio\n\nhttps://github.com/txthinking/ipio\n\nipio uses the same script as the GUI. If you are using ipio, you can manually combine multiple modules into a complete script in the following way. For example:\n\n```\ncat _header.tengo > my.tengo\n\ncat block_google_secure_dns.tengo >> my.tengo\ncat block_aaaa.tengo >> my.tengo\n\ncat _footer.tengo >> my.tengo\n```\n\n## openwrt\n\nhttps://www.txthinking.com/talks/articles/brook-openwrt-en.article\n\nopenwrt uses the same script as the GUI. If you are using openwrt, you can manually combine multiple modules into a complete script in the following way. For example:\n\n```\ncat _header.tengo > my.tengo\n\ncat block_google_secure_dns.tengo >> my.tengo\ncat block_aaaa.tengo >> my.tengo\n\ncat _footer.tengo >> my.tengo\n```\n\n## Debug\n\nIf you are writing complex scripts, the GUI may not be convenient for debugging. It is recommended to use [ipio](https://github.com/txthinking/ipio) on desktop to debug with `fmt.println`\n\n## CA\n\nhttps://txthinking.github.io/ca/ca.pem\n\n| OS | How |\n| --- | --- |\n| iOS | https://www.youtube.com/watch?v=HSGPC2vpDGk |\n| Android | Android has user CA and system CA, must be installed in the system CA after ROOT |\n| macOS | `nami install mad ca.txthinking`, `sudo mad install --ca ~/.nami/bin/ca.pem` |\n| Windows | `nami install mad ca.txthinking`, Admin: `mad install --ca ~/.nami/bin/ca.pem` |\n\n> Some software may not read the system CA，you can use `curl --cacert ~/.nami/bin/ca.pem` to debug\n\n## IPv6\n\nBrook's stance on IPv6 is positive, if your server or local environment doesn't have an IPv6 stack, read [this article](https://www.txthinking.com/talks/articles/brook-ipv6-en.article).\n\n## Troubleshooting Steps\n\n1. After adding your Server to the Brook client\n2. If your Server uses a domain and has not specified an IP address via `brook link --address`, then Brook client will attempt to resolve the domain's IP using local DNS, preferring AAAA record. For example:\n   - domain.com:9999\n   - ws://domain.com:9999\n   - wss://domain.com:9999\n   - quic://domain.com:9999\n3. Connectivity check: Go to the Server details page and click `Connectivity Check`. If it works sometimes but not others, this indicates instability.\n4. After connected\n1. Brook will change your system DNS to the System DNS configured in Brook (by default Google's DNS). In very rare cases, this change may be ignored on Windows, you can confirm this in the system settings.\n5. Test IPv4 TCP: Use `Test IPv4 TCP` for testing; this test has hardcoded the IP address, so does not trigger DNS resolution.\n5. Test IPv4 UDP: Use `Test IPv4 UDP` for testing; this test has hardcoded the IP address, so does not trigger DNS resolution.\n6. Test IPv6 TCP: Use `Test IPv6 TCP` for testing; this test has hardcoded the IP address, so does not trigger DNS resolution.\n6. Test IPv6 UDP: Use `Test IPv6 UDP` for testing; this test has hardcoded the IP address, so does not trigger DNS resolution.\n7. Test TCP and UDP: Use the `Echo Client` for testing. If the echo server entered is a domain address, it will trigger DNS resolution.\n8. Ensure the effectiveness of Fake DNS: Fake DNS is essential to do something with a domain or domain address. Generally, enable the `Block Google Secure DNS` module is sufficient. For other cases, refer to [this article](https://www.txthinking.com/talks/articles/brook-fakedns-en.article).\n9. If your local or Server does not support IPv6: Refer to [this article](https://www.txthinking.com/talks/articles/brook-ipv6-en.article).\n10. macOS App Mode: Refer to [this article](https://www.txthinking.com/talks/articles/macos-app-mode-en.article).\n11. Windows:\n    - The client can pass the tests without any special configuration on a brand-new, genuine Windows 11.\n    - Be aware that the Windows system time is often incorrect.\n    - Do not have other similar network software installed; they can cause conflicting network settings in the system.\n    - Try restarting the computer.\n    - Windows Defender may ask for permission to connect to the network or present other issues.\n    - System DNS may need to be set to 8.8.8.8 and/or 2001:4860:4860::8888\n12. Android:\n    - The client can pass the tests without any special configuration on the official Google ROM.\n    - Different ROMs may have made different modifications to the system.\n    - Permission for background running might require separate settings.\n    - System DNS may need to be set to 8.8.8.8 and/or 2001:4860:4860::8888\n13. Bypass traffic such as China, usually requires the following modules to be activated:\n    - `Block Google Secure DNS`\n    - `Bypass Geo`\n    - `Bypass Apple`: To prevent issues receiving Apple message notifications.\n    - `Bypass China domain` or `Bypass China domain A`: The former uses `Bypass DNS` to obtain the IP, then `Bypass Geo` or other modules decide whether to bypass; the latter bypasses directly after obtaining the IP with `Bypass DNS` using A records. The latter is needed if your local does not support IPv6.\n    - If you are a [Shiliew](https://www.txthinking.com/shiliew.html) user, some modules are enabled by default, which is usually sufficient.\n14. Search [GitHub issues](https://github.com/txthinking/brook/issues?q=is%3Aissue)\n15. Read the [blog](https://www.txthinking.com/talks/)\n16. Read the [documentation](https://brook.app)\n14. Submit [new issue](https://github.com/txthinking/brook/issues?q=is%3Aissue)\n17. Seek help in the [group](https://t.me/txthinking)\n# Other\n\n## Script Syntax\n\nI think just reading this one page is enough: [Tengo Language Syntax](https://github.com/d5/tengo/blob/master/docs/tutorial.md)\n\nLibrary\n\n-   [text](https://github.com/d5/tengo/blob/master/docs/stdlib-text.md): regular expressions, string conversion, and manipulation\n-   [math](https://github.com/d5/tengo/blob/master/docs/stdlib-math.md): mathematical constants and functions\n-   [times](https://github.com/d5/tengo/blob/master/docs/stdlib-times.md): time-related functions\n-   [rand](https://github.com/d5/tengo/blob/master/docs/stdlib-rand.md): random functions\n-   [fmt](https://github.com/d5/tengo/blob/master/docs/stdlib-fmt.md): formatting functions\n-   [json](https://github.com/d5/tengo/blob/master/docs/stdlib-json.md): JSON functions\n-   [enum](https://github.com/d5/tengo/blob/master/docs/stdlib-enum.md): Enumeration functions\n-   [hex](https://github.com/d5/tengo/blob/master/docs/stdlib-hex.md): hex encoding and decoding functions\n-   [base64](https://github.com/d5/tengo/blob/master/docs/stdlib-base64.md): base64 encoding and decoding functions\n-   `brook`: brook module\n\n    ```\n    Constants\n\n    * os: string, linux/darwin/windows/ios/android\n\n    Functions\n\n    * splithostport(address string) => map/error: splits a network address of the form \"host:port\" to { \"host\": \"xxx\", \"port\": \"xxx\" }\n    * country(ip string) => string/error: get country code from ip\n    * cidrcontainsip(cidr string, ip string) => bool/error: reports whether the network includes ip\n    * parseurl(url string) => map/error: parses a raw url into a map, keys: scheme/host/path/rawpath/rawquery\n    * parsequery(query string) => map/error: parses a raw query into a kv map\n    * map2query(kv map) => string/error: convert map{string:string} into a query string\n    * bytes2ints(b bytes) => array/error: convert bytes into [int]\n    * ints2bytes(ints array) => bytes/error: convert [int] into bytes\n    * bytescompare(a bytes, b bytes) => int/error: returns an integer comparing two bytes lexicographically. The result will be 0 if a == b, -1 if a < b, and +1 if a > b\n    * bytescontains(b bytes, sub bytes) => bool/error: reports whether sub is within b\n    * byteshasprefix(s bytes, prefix bytes) => bool/error: tests whether the bytes s begins with prefix\n    * byteshassuffix(s bytes, suffix bytes) => bool/error: tests whether the bytes s ends with suffix\n    * bytesindex(s bytes, sep bytes) => int/error: returns the index of the first instance of sep in s, or -1 if sep is not present in s\n    * byteslastindex(s bytes, sep bytes) => int/error: returns the index of the last instance of sep in s, or -1 if sep is not present in s\n    * bytesreplace(s bytes, old bytes, new bytes, n int) => bytes/error: returns a copy of the s with the first n non-overlapping instances of old replaced by new. If n < 0, there is no limit on the number of replacements\n    * pathescape(s string) => string/error: escapes the string so it can be safely placed inside a URL path segment, replacing special characters (including /) with %XX sequences as needed\n    * pathunescape(s string) => string/error: does the inverse transformation of pathescape\n    * queryescape(s string) => string/error: escapes the string so it can be safely placed inside a URL query\n    * queryunescape(s string) => string/error: does the inverse transformation of queryescape\n    * hexdecode(s string) => bytes/error: returns the bytes represented by the hexadecimal string s\n    * hexencode(s string) => string/error: returns the hexadecimal encoding of src\n    ```\n\n## Example\n\nEach `subcommand` has a `--example`, such as:\n\n```\nbrook server --example\n```\n\n## Resources\n\n| CLI | Description |\n| --- | --- |\n| [nami](https://github.com/txthinking/nami) | A clean and tidy decentralized package manager |\n| [joker](https://github.com/txthinking/joker) | Joker can turn process into daemon. Zero-Configuration |\n| [nico](https://github.com/txthinking/nico) | Nico can work with brook wsserver together |\n| [z](https://github.com/txthinking/z) | z - process manager |\n| [ipio](https://github.com/txthinking/ipio) | Proxy all traffic just one line command |\n| [mad](https://github.com/txthinking/mad) | Generate root CA and derivative certificate for any domains and any IPs |\n| [hancock](https://github.com/txthinking/hancock) | Manage multiple remote servers and execute commands remotely |\n| [sshexec](https://github.com/txthinking/sshexec) | A command-line tool to execute remote command through ssh |\n| [bash](https://github.com/txthinking/bash) | Many one-click scripts |\n| [docker](https://hub.docker.com/r/txthinking/brook) | `docker run txthinking/brook` | \n\n| Resources | Description |\n| --- | --- |\n| [Protocol](https://github.com/txthinking/brook/tree/master/protocol) | Brook Protocol |\n| [Blog](https://www.txthinking.com/talks/) | Some articles you should read |\n| [YouTube](https://www.youtube.com/txthinking) | Some videos you should watch |\n| [Telegram](https://t.me/txthinking) | Ask questions here |\n| [Announce](https://t.me/s/txthinking_talks) | All news you should care |\n| [GitHub](https://github.com/txthinking) | Other useful repos |\n| [Socks5 Configurator](https://chromewebstore.google.com/detail/socks5-configurator/hnpgnjkeaobghpjjhaiemlahikgmnghb) | If you prefer CLI brook client | \n| [IPvBar](https://chromewebstore.google.com/detail/ipvbar/nepjlegfiihpkcdhlmaebfdfppckonlj) | See domain, IP and country in browser | \n| [TxThinking SSH](https://www.txthinking.com/ssh.html) | A SSH Terminal |\n| [brook-store](https://github.com/txthinkinginc/brook-store) | A Brook User System |\n| [TxThinking](https://www.txthinking.com) | Everything |\n\n# CLI Documentation\n# NAME\n\nBrook - A cross-platform programmable network tool\n\n# SYNOPSIS\n\nBrook\n\n```\nbrook --help\n```\n\n**Usage**:\n\n```\nBrook [GLOBAL OPTIONS] command [COMMAND OPTIONS] [ARGUMENTS...]\n```\n\n# GLOBAL OPTIONS\n\n- **--cliToken**=\"\": The CLI Token of your Brook Plus or Brook Business account, get it from https://www.txthinking.com/brook.html\n\n- **--clientHKDFInfo**=\"\": client HKDF info, most time you don't need to change this, if changed, all and each brook links in client side must be same (default: \"brook\")\n\n\n\n- **--log**=\"\": Works with server, wsserver, wssserver, quicserver, dnsserver, dohserver, dnsserveroverbrook. A valid value is file path. If you want to debug SOCKS5 lib, set env SOCKS5_DEBUG=true\n\n- **--pid**=\"\": A file path used to store pid. Send SIGUSR1 to me to reset the --log or --userLog file on unix system\n\n- **--script**=\"\": [Brook Plus or Brook Business]. Works with server, wsserver, wssserver, quicserver, dnsserver, dohserver, dnsserveroverbrook. https://, http:// or /path/to/file.tengo. Get details at https://brook.app\n\n- **--scriptUpdateInterval**=\"\": Works with --script. The interval (s) to re-fetch script. The default is 0, which means only fetch once on startup (default: 0)\n\n- **--serverHKDFInfo**=\"\": server HKDF info, most time you don't need to change this, if changed, all and each brook links in client side must be same (default: \"brook\")\n\n- **--tag**=\"\": Works with --log, --userAPI, --userLog, --script. Tag can be used to the process, will be append into log or userLog, such as: 'key1:value1'. And all tags will also be appended as query parameters one by one to the userAPI\n\n- **--userAPI**=\"\": [Brook Business]. Works with server, wsserver, wssserver, quicserver. When you build your own user system, Brook Server will send GET request to your userAPI to check if token is valid, for example: https://your-api-server.com/a_unpredictable_path. Yes, it is recommended to add an unpredictable path to your https API, of course, you can also use the http api for internal network communication. The request format is https://your-api-server.com/a_unpredictable_path?token=xxx. When the response is 200, the body should be the user's unique identifier, such as user ID; all other status codes are considered to represent an illegitimate user, and in these cases, the body should be a string describing the error. For more information, please read https://github.com/txthinking/brook/blob/master/protocol/user.md\n\n- **--userAPIRateLimit**=\"\": Works with --userAPI. Limit the request rate per token to the user API by Brook Server, this will reduce the load on the user API. This is especially important when users have expired, and the userAPIValidCacheTime will not cache the requests, resulting in continuous requests to the user API. The default is 0, which means no limitation. For example, setting it to 1 means the rate is limited to 1 request per token per second. The phrase 'per token' means that each token has its own rate limiter, and they do not interfere with each other (default: 1)\n\n- **--userAPIValidCacheTime**=\"\": Works with --userAPI. Once a token is checked and valid, the userAPI will not be requested to validate again for a certain period (s). A reasonable value must be set, otherwise it will affect the performance of each incoming connection (default: 3600)\n\n- **--userLog**=\"\": Works with --userAPI. Log, traffic and more. A valid value is file path. Send SIGUSR1 to me to reset the log file on unix system. Mutually exclusive with the --log parameter.\n\n- **--version, -v**: print the version\n\n\n# COMMANDS\n\n## server\n\nStart a brook server that supports tcp and udp\n\n- **--example**: Show a minimal example of usage\n\n- **--listen, -l**=\"\": Listen address, like: ':9999'\n\n- **--password, -p**=\"\": Server password\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## client\n\nStart a brook client that supports tcp and udp. It can open a socks5 proxy, [src <-> socks5 <-> $ brook client <-> $ brook server <-> dst]\n\n- **--example**: Show a minimal example of usage\n\n- **--http**=\"\": Where to listen for HTTP proxy connections\n\n- **--link**=\"\": brook link, you can get it via $ brook link. The wssserver and password parameters will be ignored\n\n- **--password, -p**=\"\": Brook server password\n\n- **--server, -s**=\"\": Brook server address, like: 1.2.3.4:9999\n\n- **--socks5**=\"\": Where to listen for SOCKS5 connections (default: 127.0.0.1:1080)\n\n- **--socks5ServerIP**=\"\": Only if your socks5 server IP is different from listen IP\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## wsserver\n\nStart a brook wsserver that supports tcp and udp. It opens a standard http server and a websocket server\n\n- **--example**: Show a minimal example of usage\n\n- **--listen, -l**=\"\": Listen address, like: ':80'\n\n- **--password, -p**=\"\": Server password\n\n- **--path**=\"\": URL path (default: /ws)\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n- **--xForwardedFor**: Replace the from field in --log, note that this may be forged\n\n## wsclient\n\nStart a brook wsclient that supports tcp and udp. It can open a socks5 proxy, [src <-> socks5 <-> $ brook wsclient <-> $ brook wsserver <-> dst]\n\n- **--example**: Show a minimal example of usage\n\n- **--http**=\"\": Where to listen for HTTP proxy connections\n\n- **--link**=\"\": brook link, you can get it via $ brook link. The wssserver and password parameters will be ignored\n\n- **--password, -p**=\"\": Brook wsserver password\n\n- **--socks5**=\"\": Where to listen for SOCKS5 connections (default: 127.0.0.1:1080)\n\n- **--socks5ServerIP**=\"\": Only if your socks5 server IP is different from listen IP\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n- **--wsserver, -s**=\"\": Brook wsserver address, like: ws://1.2.3.4:80, if no path then /ws will be used. Do not omit the port under any circumstances\n\n## wssserver\n\nStart a brook wssserver that supports tcp and udp. It opens a standard https server and a websocket server\n\n- **--cert**=\"\": The cert file absolute path for the domain, such as /path/to/cert.pem. If cert or certkey is empty, a certificate will be issued automatically\n\n- **--certkey**=\"\": The cert key file absolute path for the domain, such as /path/to/certkey.pem. If cert or certkey is empty, a certificate will be issued automatically\n\n- **--domainaddress**=\"\": Such as: domain.com:443. If you choose to automatically issue certificates, the domain must have been resolved to the server IP and 80 port also will be used\n\n- **--example**: Show a minimal example of usage\n\n- **--password, -p**=\"\": Server password\n\n- **--path**=\"\": URL path (default: /ws)\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## wssclient\n\nStart a brook wssclient that supports tcp and udp. It can open a socks5 proxy, [src <-> socks5 <-> $ brook wssclient <-> $ brook wssserver <-> dst]\n\n- **--example**: Show a minimal example of usage\n\n- **--http**=\"\": Where to listen for HTTP proxy connections\n\n- **--link**=\"\": brook link, you can get it via $ brook link. The wssserver and password parameters will be ignored\n\n- **--password, -p**=\"\": Brook wssserver password\n\n- **--socks5**=\"\": Where to listen for SOCKS5 connections (default: 127.0.0.1:1080)\n\n- **--socks5ServerIP**=\"\": Only if your socks5 server IP is different from listen IP\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n- **--wssserver, -s**=\"\": Brook wssserver address, like: wss://google.com:443, if no path then /ws will be used. Do not omit the port under any circumstances\n\n## quicserver\n\nStart a brook quicserver that supports tcp and udp.\n\n- **--cert**=\"\": The cert file absolute path for the domain, such as /path/to/cert.pem. If cert or certkey is empty, a certificate will be issued automatically\n\n- **--certkey**=\"\": The cert key file absolute path for the domain, such as /path/to/certkey.pem. If cert or certkey is empty, a certificate will be issued automatically\n\n- **--domainaddress**=\"\": Such as: domain.com:443. If you choose to automatically issue certificates, the domain must have been resolved to the server IP and 80 port also will be used\n\n- **--example**: Show a minimal example of usage\n\n- **--password, -p**=\"\": Server password\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## quicclient\n\nStart a brook quicclient that supports tcp and udp. It can open a socks5 proxy, [src <-> socks5 <-> $ brook quicclient <-> $ brook quicserver <-> dst]\n\n- **--example**: Show a minimal example of usage\n\n- **--http**=\"\": Where to listen for HTTP proxy connections\n\n- **--link**=\"\": brook link, you can get it via $ brook link. The wssserver and password parameters will be ignored\n\n- **--socks5**=\"\": Where to listen for SOCKS5 connections (default: 127.0.0.1:1080)\n\n- **--socks5ServerIP**=\"\": Only if your socks5 server IP is different from listen IP\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## relayoverbrook\n\nRelay network traffic over brook, which supports TCP and UDP. Accessing [from address] is equal to accessing [to address], [src <-> from address <-> $ brook server/wsserver/wssserver/quicserver <-> to address]\n\n- **--example**: Show a minimal example of usage\n\n- **--from, -f, -l**=\"\": Listen address: like ':9999'\n\n- **--link**=\"\": brook link, you can get it via $ brook link. The server and password parameters will be ignored\n\n- **--password, -p**=\"\": Password\n\n- **--server, -s**=\"\": brook server or brook wsserver or brook wssserver or brook quicserver, like: 1.2.3.4:9999, ws://1.2.3.4:9999, wss://domain:443/ws, quic://domain.com:443\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--to, -t**=\"\": Address which relay to, like: 1.2.3.4:9999\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## dnsserveroverbrook\n\nRun a dns server over brook, which supports TCP and UDP, [src <-> $ brook dnserversoverbrook <-> $ brook server/wsserver/wssserver/quicserver <-> dns]\n\n- **--dns**=\"\": Forward to DNS server (default: 8.8.8.8:53)\n\n- **--example**: Show a minimal example of usage\n\n- **--link**=\"\": brook link, you can get it via $ brook link. The server and password parameters will be ignored\n\n- **--listen, -l**=\"\": Listen address, like: 127.0.0.1:53\n\n- **--password, -p**=\"\": Password\n\n- **--server, -s**=\"\": brook server or brook wsserver or brook wssserver or brook quicserver, like: 1.2.3.4:9999, ws://1.2.3.4:9999, wss://domain.com:443/ws, quic://domain.com:443\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## connect\n\nRun a client and connect with a brook link, which supports TCP and UDP. It can start a socks5 proxy, [src <-> socks5 <-> $ brook connect <-> $ brook server/wsserver/wssserver/quicserver <-> dst]\n\n- **--example**: Show a minimal example of usage\n\n- **--http**=\"\": Where to listen for HTTP proxy connections\n\n- **--link, -l**=\"\": brook link, you can get it via $ brook link\n\n- **--socks5**=\"\": Where to listen for SOCKS5 connections (default: 127.0.0.1:1080)\n\n- **--socks5ServerIP**=\"\": Only if your socks5 server IP is different from listen IP\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## link\n\nGenerate a brook link\n\n- **--address**=\"\": When server is brook wsserver or brook wssserver or brook quicserver, specify address instead of resolving addresses from host, such as 1.2.3.4:443\n\n- **--ca**=\"\": When server is brook wssserver or brook quicserver, specify ca for untrusted cert, such as /path/to/ca.pem\n\n- **--clientHKDFInfo**=\"\": client HKDF info, most time you don't need to change this, read brook protocol if you don't know what this is\n\n- **--example**: Show a minimal example of usage\n\n- **--fragment**=\"\": When server is brook wssserver, split the ClientHello into multiple fragments and then send them one by one with delays (millisecond). The format is min_length:max_length:min_delay:max_delay, cannot be zero, such as 50:100:10:50\n\n- **--insecure**: When server is brook wssserver or brook quicserver, client do not verify the server's certificate chain and host name\n\n- **--name**=\"\": Give this server a name\n\n- **--password, -p**=\"\": Password\n\n- **--server, -s**=\"\": Support brook server, brook wsserver, brook wssserver, socks5 server, brook quicserver. Like: 1.2.3.4:9999, ws://1.2.3.4:9999, wss://google.com:443/ws, socks5://1.2.3.4:1080, quic://google.com:443\n\n- **--serverHKDFInfo**=\"\": server HKDF info, most time you don't need to change this, read brook protocol if you don't know what this is\n\n- **--tlsfingerprint**=\"\": When server is brook wssserver, select tls fingerprint, value can be: chrome\n\n- **--token**=\"\": A token represents a user's identity. A string encoded in hexadecimal. Server needs to have --userAPI enabled\n\n- **--udpoverstream**: When server is brook quicserver, UDP over Stream. Under normal circumstances, you need this parameter because the max datagram size for QUIC is very small\n\n- **--udpovertcp**: When server is brook server, UDP over TCP\n\n- **--username, -u**=\"\": Username, when server is socks5 server\n\n## relay\n\nRun a standalone relay, which supports TCP and UDP. Accessing [from address] is equal to accessing [to address], [src <-> from address <-> to address]\n\n- **--example**: Show a minimal example of usage\n\n- **--from, -f, -l**=\"\": Listen address: like ':9999'\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--to, -t**=\"\": Address which relay to, like: 1.2.3.4:9999\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## dnsserver\n\nRun a standalone dns server\n\n- **--dns**=\"\": DNS server which forward to. Such as 8.8.8.8:53 or https://dns.google/dns-query?address=8.8.8.8%3A443, the address is required (default: 8.8.8.8:53)\n\n- **--example**: Show a minimal example of usage\n\n- **--listen, -l**=\"\": Listen address, like: 127.0.0.1:53\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## dnsclient\n\nSend a dns query\n\n- **--dns, -s**=\"\": DNS server, such as 8.8.8.8:53 (default: 8.8.8.8:53)\n\n- **--domain, -d**=\"\": Domain\n\n- **--example**: Show a minimal example of usage\n\n- **--short**: Short for A/AAAA\n\n- **--type, -t**=\"\": Type, such as A (default: A)\n\n## dohserver\n\nRun a standalone doh server\n\n- **--cert**=\"\": The cert file absolute path for the domain, such as /path/to/cert.pem. If cert or certkey is empty, a certificate will be issued automatically\n\n- **--certkey**=\"\": The cert key file absolute path for the domain, such as /path/to/certkey.pem. If cert or certkey is empty, a certificate will be issued automatically\n\n- **--dns**=\"\": DNS server which forward to. Such as 8.8.8.8:53 or https://dns.google/dns-query?address=8.8.8.8%3A443, the address is required (default: 8.8.8.8:53)\n\n- **--domainaddress**=\"\": Such as: domain.com:443, if you want to create a https server. If you choose to automatically issue certificates, the domain must have been resolved to the server IP and 80 port also will be used\n\n- **--example**: Show a minimal example of usage\n\n- **--listen**=\"\": listen address, if you want to create a http server behind nico\n\n- **--path**=\"\": URL path (default: /dns-query)\n\n- **--tcpTimeout**=\"\": time (s) (default: 0)\n\n- **--udpTimeout**=\"\": time (s) (default: 0)\n\n## dohclient\n\nSend a dns query\n\n- **--doh, -s**=\"\": DOH server, the address is required (default: https://dns.quad9.net/dns-query?address=9.9.9.9%3A443)\n\n- **--domain, -d**=\"\": Domain\n\n- **--example**: Show a minimal example of usage\n\n- **--short**: Short for A/AAAA\n\n- **--type, -t**=\"\": Type, such as A (default: A)\n\n## dhcpserver\n\nRun a standalone dhcp server. IPv4 only. Other running dhcp servers need to be stopped.\n\n- **--cache**=\"\": Cache file, local absolute file path, default is $HOME/.brook.dhcpserver\n\n- **--count**=\"\": IP range from the start, which you want to assign to clients (default: 0)\n\n- **--dnsserver**=\"\": The dns server which you want to assign to clients, such as: 192.168.1.1 or 8.8.8.8\n\n- **--example**: Show a minimal example of usage\n\n- **--gateway**=\"\": The router gateway which you want to assign to clients, such as: 192.168.1.1\n\n- **--interface**=\"\": Select interface on multi interface device. Linux only\n\n- **--netmask**=\"\": Subnet netmask which you want to assign to clients (default: 255.255.255.0)\n\n- **--serverip**=\"\": DHCP server IP, the IP of the this machine, you shoud set a static IP to this machine before doing this, such as: 192.168.1.10\n\n- **--start**=\"\": Start IP which you want to assign to clients, such as: 192.168.1.100\n\n## socks5\n\nRun a standalone standard socks5 server, which supports TCP and UDP\n\n- **--example**: Show a minimal example of usage\n\n- **--limitUDP**: The server MAY use this information to limit access to the UDP association. This usually causes connection failures in a NAT environment, where most clients are.\n\n- **--listen, -l**=\"\": Socks5 server listen address, like: :1080 or 1.2.3.4:1080\n\n- **--password**=\"\": Password, optional\n\n- **--socks5ServerIP**=\"\": Only if your socks5 server IP is different from listen IP\n\n- **--tcpTimeout**=\"\": Connection deadline time (s) (default: 0)\n\n- **--udpTimeout**=\"\": Connection deadline time (s) (default: 0)\n\n- **--username**=\"\": User name, optional\n\n## socks5tohttp\n\nConvert a socks5 proxy to a http proxy, [src <-> listen address(http proxy) <-> socks5 address <-> dst]\n\n- **--example**: Show a minimal example of usage\n\n- **--listen, -l**=\"\": HTTP proxy which will be create: like: 127.0.0.1:8010\n\n- **--socks5, -s**=\"\": Socks5 server address, like: 127.0.0.1:1080\n\n- **--socks5password**=\"\": Socks5 password, optional\n\n- **--socks5username**=\"\": Socks5 username, optional\n\n- **--tcpTimeout**=\"\": Connection tcp timeout (s) (default: 0)\n\n## testsocks5\n\nTest a socks5 server to see if it works properly\n\n- **--dns**=\"\": A DNS Server to connect to and send TCP DNS query to test TCP, and UDP DNS query to test UDP. (default: 8.8.8.8:53)\n\n- **--example**: Show a minimal example of usage\n\n- **--password, -p**=\"\": Socks5 password\n\n- **--socks5, -s**=\"\": Like: 127.0.0.1:1080\n\n- **--username, -u**=\"\": Socks5 username\n\n## testbrook\n\nTest UDP and TCP of a brook server/wsserver/wssserver/quicserver connection.\n\n- **--dns**=\"\": A DNS Server to connect to and send TCP DNS query to test TCP, and UDP DNS query to test UDP. (default: 8.8.8.8:53)\n\n- **--example**: Show a minimal example of usage\n\n- **--link, -l**=\"\": brook link. Get it via $ brook link\n\n## echoserver\n\nEcho server, echo UDP and TCP address of routes\n\n- **--example**: Show a minimal example of usage\n\n- **--listen, -l**=\"\": Listen address, like: ':7777'\n\n## echoclient\n\nConnect to echoserver, echo UDP and TCP address of routes\n\n- **--example**: Show a minimal example of usage\n\n- **--server, -s**=\"\": Echo server address, such as 1.2.3.4:7777\n\n- **--times**=\"\": Times of interactions (default: 0)\n\n## ipcountry\n\nGet country of IP\n\n- **--example**: Show a minimal example of usage\n\n- **--ip**=\"\": 1.1.1.1\n\n## completion\n\nGenerate shell completions\n\n- **--example**: Show a minimal example of usage\n\n- **--file, -f**=\"\": Write to file (default: brook_autocomplete)\n\n## mdpage\n\nGenerate markdown page\n\n- **--example**: Show a minimal example of usage\n\n- **--file, -f**=\"\": Write to file, default print to stdout\n\n\n\n\n\n\n\n## manpage\n\nGenerate man.1 page\n\n- **--example**: Show a minimal example of usage\n\n- **--file, -f**=\"\": Write to file, default print to stdout. You should put to /path/to/man/man1/brook.1 on linux or /usr/local/share/man/man1/brook.1 on macos\n\n## help, h\n\nShows a list of commands or help for one command\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2509765625,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nIf you discover a security vulnerability, please send an e-mail to cloud@txthinking.com.\nIt would be much appreciated if the POC is directly included.\nAll security vulnerabilities will be promptly addressed.\n"
        },
        {
          "name": "brooklink.go",
          "type": "blob",
          "size": 10.5615234375,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"net/url\"\n\t\"os/exec\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"strings\"\n\n\tutls \"github.com/refraction-networking/utls\"\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/txthinking/socks5\"\n)\n\ntype BrookLink struct {\n\tKind              string\n\tAddress           string\n\tHost              string\n\tPath              string\n\tPassword          []byte\n\tV                 url.Values\n\tTc                *tls.Config\n\tTLSFingerprint    utls.ClientHelloID\n\tFragmentMinLength int64\n\tFragmentMaxLength int64\n\tFragmentMinDelay  int64\n\tFragmentMaxDelay  int64\n\n\tS5         *socks5.Server\n\tPcf        *PacketConnFactory\n\tTCPTimeout int\n\tUDPTimeout int\n}\n\nfunc NewBrookLink(link string) (*BrookLink, error) {\n\tvar address, host, path string\n\tkind, server, v, err := ParseLink(link)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tp := []byte(v.Get(\"password\"))\n\tif kind == \"server\" {\n\t\taddress = server\n\t}\n\tvar tc *tls.Config\n\tvar tlsfingerprint utls.ClientHelloID\n\tvar fragmentMinLength int64\n\tvar fragmentMaxLength int64\n\tvar fragmentMinDelay int64\n\tvar fragmentMaxDelay int64\n\tif kind == \"socks5\" || kind == \"wsserver\" || kind == \"wssserver\" || kind == \"quicserver\" {\n\t\tu, err := url.Parse(server)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\thost = u.Host\n\t\tpath = u.Path\n\t\tif path == \"\" {\n\t\t\tpath = \"/ws\"\n\t\t}\n\t\taddress = host\n\t\tif kind == \"wsserver\" || kind == \"wssserver\" || kind == \"quicserver\" {\n\t\t\tif v.Get(\"address\") != \"\" {\n\t\t\t\taddress = v.Get(\"address\")\n\t\t\t}\n\t\t}\n\t\tif kind == \"wssserver\" || kind == \"quicserver\" {\n\t\t\th, _, err := net.SplitHostPort(u.Host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ttc = &tls.Config{ServerName: h}\n\t\t\tif v.Get(\"insecure\") == \"true\" {\n\t\t\t\ttc.InsecureSkipVerify = true\n\t\t\t}\n\t\t\tif v.Get(\"ca\") != \"\" {\n\t\t\t\troots := x509.NewCertPool()\n\t\t\t\tok := roots.AppendCertsFromPEM([]byte(v.Get(\"ca\")))\n\t\t\t\tif !ok {\n\t\t\t\t\treturn nil, errors.New(\"failed to parse root certificate\")\n\t\t\t\t}\n\t\t\t\ttc.RootCAs = roots\n\t\t\t}\n\t\t\tif kind == \"wssserver\" {\n\t\t\t\ttc.NextProtos = []string{\"http/1.1\"}\n\t\t\t}\n\t\t\tif kind == \"quicserver\" {\n\t\t\t\ttc.NextProtos = []string{\"h3\"}\n\t\t\t}\n\t\t}\n\t\tif kind == \"wsserver\" || kind == \"wssserver\" || kind == \"quicserver\" {\n\t\t\tif v.Get(\"withoutBrookProtocol\") == \"true\" {\n\t\t\t\tp, err = SHA256Bytes([]byte(v.Get(\"password\")))\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif kind == \"wssserver\" {\n\t\t\tif v.Get(\"tlsfingerprint\") == \"chrome\" {\n\t\t\t\ttlsfingerprint = utls.HelloChrome_Auto\n\t\t\t}\n\t\t\tif v.Get(\"fragment\") != \"\" {\n\t\t\t\tl := strings.Split(v.Get(\"fragment\"), \":\")\n\t\t\t\tif len(l) == 4 {\n\t\t\t\t\tfragmentMinLength, _ = strconv.ParseInt(l[0], 10, 64)\n\t\t\t\t\tfragmentMaxLength, _ = strconv.ParseInt(l[1], 10, 64)\n\t\t\t\t\tfragmentMinDelay, _ = strconv.ParseInt(l[2], 10, 64)\n\t\t\t\t\tfragmentMaxDelay, _ = strconv.ParseInt(l[3], 10, 64)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn &BrookLink{\n\t\tKind:              kind,\n\t\tAddress:           address,\n\t\tHost:              host,\n\t\tPath:              path,\n\t\tPassword:          p,\n\t\tV:                 v,\n\t\tTc:                tc,\n\t\tTLSFingerprint:    tlsfingerprint,\n\t\tFragmentMinLength: fragmentMinLength,\n\t\tFragmentMaxLength: fragmentMaxLength,\n\t\tFragmentMinDelay:  fragmentMinDelay,\n\t\tFragmentMaxDelay:  fragmentMaxDelay,\n\t}, nil\n}\n\nfunc (blk *BrookLink) CreateExchanger(network, src string, dstb []byte, tcptimeout, udptimeout int) (Exchanger, net.Conn, error) {\n\tif blk.Kind == \"server\" {\n\t\tif network == \"tcp\" {\n\t\t\trc, err := DialTCP(\"tcp\", \"\", blk.Address)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\tsc, err := NewStreamClient(\"tcp\", blk.Password, src, rc, tcptimeout, dstb)\n\t\t\tif err != nil {\n\t\t\t\trc.Close()\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\treturn sc, rc, nil\n\t\t}\n\t\tif blk.V.Get(\"udpovertcp\") == \"true\" {\n\t\t\trc, err := NATDial(\"tcp\", src, socks5.ToAddress(dstb[0], dstb[1:len(dstb)-2], dstb[len(dstb)-2:]), blk.Address)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\tsc, err := NewStreamClient(\"udp\", blk.Password, src, rc, udptimeout, dstb)\n\t\t\tif err != nil {\n\t\t\t\trc.Close()\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\treturn sc, rc, nil\n\t\t}\n\t\trc, err := NATDial(\"udp\", src, socks5.ToAddress(dstb[0], dstb[1:len(dstb)-2], dstb[len(dstb)-2:]), blk.Address)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tsc, err := NewPacketClient(blk.Password, src, rc, udptimeout, dstb)\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\treturn nil, nil, err\n\t\t}\n\t\treturn sc, rc, nil\n\t}\n\tif blk.Kind == \"wsserver\" || blk.Kind == \"wssserver\" {\n\t\tif network == \"tcp\" {\n\t\t\trc, err := WebSocketDial(\"\", \"\", blk.Address, blk.Host, blk.Path, blk.Tc, tcptimeout, blk.TLSFingerprint, blk.FragmentMinLength, blk.FragmentMaxLength, blk.FragmentMinDelay, blk.FragmentMaxDelay)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\tvar sc Exchanger\n\t\t\tif blk.V.Get(\"withoutBrookProtocol\") != \"true\" {\n\t\t\t\tsc, err = NewStreamClient(\"tcp\", blk.Password, src, rc, tcptimeout, dstb)\n\t\t\t}\n\t\t\tif blk.V.Get(\"withoutBrookProtocol\") == \"true\" {\n\t\t\t\tsc, err = NewSimpleStreamClient(\"tcp\", blk.Password, src, rc, tcptimeout, dstb)\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\trc.Close()\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\treturn sc, rc, nil\n\t\t}\n\t\trc, err := WebSocketDial(src, socks5.ToAddress(dstb[0], dstb[1:len(dstb)-2], dstb[len(dstb)-2:]), blk.Address, blk.Host, blk.Path, blk.Tc, tcptimeout, blk.TLSFingerprint, blk.FragmentMinLength, blk.FragmentMaxLength, blk.FragmentMinDelay, blk.FragmentMaxDelay)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tvar sc Exchanger\n\t\tif blk.V.Get(\"withoutBrookProtocol\") != \"true\" {\n\t\t\tsc, err = NewStreamClient(\"udp\", blk.Password, src, rc, udptimeout, dstb)\n\t\t}\n\t\tif blk.V.Get(\"withoutBrookProtocol\") == \"true\" {\n\t\t\tsc, err = NewSimpleStreamClient(\"udp\", blk.Password, src, rc, udptimeout, dstb)\n\t\t}\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\treturn nil, nil, err\n\t\t}\n\t\treturn sc, rc, nil\n\t}\n\tif blk.Kind == \"quicserver\" {\n\t\tif network == \"tcp\" {\n\t\t\trc, err := QUICDialTCP(\"\", \"\", blk.Address, blk.Tc, tcptimeout)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\tvar sc Exchanger\n\t\t\tif blk.V.Get(\"withoutBrookProtocol\") != \"true\" {\n\t\t\t\tsc, err = NewStreamClient(\"tcp\", blk.Password, src, rc, tcptimeout, dstb)\n\t\t\t}\n\t\t\tif blk.V.Get(\"withoutBrookProtocol\") == \"true\" {\n\t\t\t\tsc, err = NewSimpleStreamClient(\"tcp\", blk.Password, src, rc, tcptimeout, dstb)\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\trc.Close()\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\treturn sc, rc, nil\n\t\t}\n\t\tif blk.V.Get(\"udpoverstream\") == \"true\" {\n\t\t\trc, err := QUICDialTCP(src, socks5.ToAddress(dstb[0], dstb[1:len(dstb)-2], dstb[len(dstb)-2:]), blk.Address, blk.Tc, tcptimeout)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\tvar sc Exchanger\n\t\t\tif blk.V.Get(\"withoutBrookProtocol\") != \"true\" {\n\t\t\t\tsc, err = NewStreamClient(\"udp\", blk.Password, src, rc, tcptimeout, dstb)\n\t\t\t}\n\t\t\tif blk.V.Get(\"withoutBrookProtocol\") == \"true\" {\n\t\t\t\tsc, err = NewSimpleStreamClient(\"udp\", blk.Password, src, rc, tcptimeout, dstb)\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\trc.Close()\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\treturn sc, rc, nil\n\t\t}\n\t\trc, err := QUICDialUDP(src, socks5.ToAddress(dstb[0], dstb[1:len(dstb)-2], dstb[len(dstb)-2:]), blk.Address, blk.Tc, udptimeout)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tvar sc Exchanger\n\t\tif blk.V.Get(\"withoutBrookProtocol\") != \"true\" {\n\t\t\tsc, err = NewPacketClient(blk.Password, src, rc, udptimeout, dstb)\n\t\t}\n\t\tif blk.V.Get(\"withoutBrookProtocol\") == \"true\" {\n\t\t\tsc, err = NewSimplePacketClient(blk.Password, src, rc, udptimeout, dstb)\n\t\t}\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\treturn nil, nil, err\n\t\t}\n\t\treturn sc, rc, nil\n\t}\n\treturn nil, nil, errors.New(\"cannot create exchanger from \" + blk.Kind)\n}\n\nfunc (x *BrookLink) PrepareSocks5Server(addr, ip string, tcptimeout, udptimeout int) error {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\tif x.Kind == \"quicserver\" {\n\t\tif runtime.GOOS == \"linux\" {\n\t\t\tc := exec.Command(\"sysctl\", \"-w\", \"net.core.rmem_max=2500000\")\n\t\t\tb, err := c.CombinedOutput()\n\t\t\tif err != nil {\n\t\t\t\tLog(Error{\"when\": \"try to raise UDP Receive Buffer Size\", \"warning\": string(b)})\n\t\t\t}\n\t\t}\n\t\tif runtime.GOOS == \"darwin\" {\n\t\t\tc := exec.Command(\"sysctl\", \"-w\", \"kern.ipc.maxsockbuf=3014656\")\n\t\t\tb, err := c.CombinedOutput()\n\t\t\tif err != nil {\n\t\t\t\tLog(Error{\"when\": \"try to raise UDP Receive Buffer Size\", \"warning\": string(b)})\n\t\t\t}\n\t\t}\n\t}\n\tvar err error\n\tx.S5, err = socks5.NewClassicServer(addr, ip, \"\", \"\", tcptimeout, udptimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tx.Pcf = NewPacketConnFactory()\n\tx.TCPTimeout = tcptimeout\n\tx.UDPTimeout = udptimeout\n\treturn nil\n}\n\nfunc (x *BrookLink) ListenAndServe() error {\n\treturn x.S5.ListenAndServe(x)\n}\n\nfunc (x *BrookLink) TCPHandle(s *socks5.Server, c *net.TCPConn, r *socks5.Request) error {\n\tif r.Cmd == socks5.CmdConnect {\n\t\tdstb := append(append([]byte{r.Atyp}, r.DstAddr...), r.DstPort...)\n\t\tsc, rc, err := x.CreateExchanger(\"tcp\", c.RemoteAddr().String(), dstb, x.TCPTimeout, x.UDPTimeout)\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\tdefer rc.Close()\n\t\tdefer sc.Clean()\n\t\ta, address, port, err := socks5.ParseAddress(rc.LocalAddr().String())\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\trp := socks5.NewReply(socks5.RepSuccess, a, address, port)\n\t\tif _, err := rp.WriteTo(c); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := sc.Exchange(c); err != nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn nil\n\t}\n\tif r.Cmd == socks5.CmdUDP {\n\t\t_, err := r.UDP(c, x.S5.ServerAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tio.Copy(io.Discard, c)\n\t\treturn nil\n\t}\n\treturn socks5.ErrUnsupportCmd\n}\n\nfunc (x *BrookLink) UDPHandle(s *socks5.Server, addr *net.UDPAddr, d *socks5.Datagram) error {\n\tdstb := append(append([]byte{d.Atyp}, d.DstAddr...), d.DstPort...)\n\tconn, err := x.Pcf.Handle(addr, dstb, d.Data, func(b []byte) (int, error) {\n\t\td.Data = b\n\t\treturn s.UDPConn.WriteToUDP(d.Bytes(), addr)\n\t}, x.UDPTimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif conn == nil {\n\t\treturn nil\n\t}\n\tdefer conn.Close()\n\tsc, rc, err := x.CreateExchanger(\"udp\", addr.String(), dstb, x.TCPTimeout, x.UDPTimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tdefer sc.Clean()\n\tif err := sc.Exchange(conn); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (x *BrookLink) Shutdown() error {\n\treturn x.S5.Shutdown()\n}\n"
        },
        {
          "name": "cac.go",
          "type": "blob",
          "size": 1.54296875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"os\"\n\t\"strings\"\n)\n\n// TODO: make me more compatible with the shell environment.\n// https://github.com/TxThinkingInc/CAC\nfunc CAC(file string) ([]string, error) {\n\tb, err := os.ReadFile(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tl0 := []string{}\n\tl1 := strings.Split(string(b), \"\\n\")\n\tfor _, v := range l1 {\n\t\tv = strings.TrimSpace(v)\n\t\tif strings.HasSuffix(v, \"\\\\\") {\n\t\t\tv = v[0 : len(v)-1]\n\t\t}\n\t\tif strings.HasPrefix(v, \"#\") || v == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tl0 = append(l0, v)\n\t}\n\tif len(l0) == 0 {\n\t\treturn l0, nil\n\t}\n\ts := strings.Join(l0, \" \")\n\tl0 = []string{}\n\tl1 = strings.Fields(s)\n\tfor _, v := range l1 {\n\t\tif len(v) > 1 && strings.HasPrefix(v, \"'\") && strings.HasSuffix(v, \"'\") {\n\t\t\tl0 = append(l0, v[1:len(v)-1])\n\t\t\tcontinue\n\t\t}\n\t\tif len(v) > 1 && strings.HasPrefix(v, \"\\\"\") && strings.HasSuffix(v, \"\\\"\") {\n\t\t\tl0 = append(l0, v[1:len(v)-1])\n\t\t\tcontinue\n\t\t}\n\t\tl0 = append(l0, v)\n\t}\n\treturn l0, nil\n}\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "client.go",
          "type": "blob",
          "size": 3.7392578125,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"net\"\n\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/txthinking/socks5\"\n)\n\ntype Client struct {\n\tServer            *socks5.Server\n\tServerAddress     string\n\tPassword          []byte\n\tTCPTimeout        int\n\tUDPTimeout        int\n\tUDPOverTCP        bool\n\tPacketConnFactory *PacketConnFactory\n}\n\nfunc NewClient(addr, ip, server, password string, tcpTimeout, udpTimeout int) (*Client, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\ts5, err := socks5.NewClassicServer(addr, ip, \"\", \"\", tcpTimeout, udpTimeout)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx := &Client{\n\t\tServerAddress:     server,\n\t\tServer:            s5,\n\t\tPassword:          []byte(password),\n\t\tTCPTimeout:        tcpTimeout,\n\t\tUDPTimeout:        udpTimeout,\n\t\tPacketConnFactory: NewPacketConnFactory(),\n\t}\n\treturn x, nil\n}\n\nfunc (x *Client) ListenAndServe() error {\n\treturn x.Server.ListenAndServe(x)\n}\n\nfunc (x *Client) TCPHandle(s *socks5.Server, c *net.TCPConn, r *socks5.Request) error {\n\tif r.Cmd == socks5.CmdConnect {\n\t\trc, err := DialTCP(\"tcp\", \"\", x.ServerAddress)\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\tdefer rc.Close()\n\t\tdst := make([]byte, 0, 1+len(r.DstAddr)+2)\n\t\tdst = append(dst, r.Atyp)\n\t\tdst = append(dst, r.DstAddr...)\n\t\tdst = append(dst, r.DstPort...)\n\t\tsc, err := NewStreamClient(\"tcp\", x.Password, c.RemoteAddr().String(), rc, x.TCPTimeout, dst)\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\tdefer sc.Clean()\n\t\ta, address, port, err := socks5.ParseAddress(rc.LocalAddr().String())\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\trp := socks5.NewReply(socks5.RepSuccess, a, address, port)\n\t\tif _, err := rp.WriteTo(c); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := sc.Exchange(c); err != nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn nil\n\t}\n\tif r.Cmd == socks5.CmdUDP {\n\t\t_, err := r.UDP(c, x.Server.ServerAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\treturn socks5.ErrUnsupportCmd\n}\n\nfunc (x *Client) UDPHandle(s *socks5.Server, addr *net.UDPAddr, d *socks5.Datagram) error {\n\tdstb := append(append([]byte{d.Atyp}, d.DstAddr...), d.DstPort...)\n\tconn, err := x.PacketConnFactory.Handle(addr, dstb, d.Data, func(b []byte) (int, error) {\n\t\td.Data = b\n\t\treturn s.UDPConn.WriteToUDP(d.Bytes(), addr)\n\t}, x.UDPTimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif conn == nil {\n\t\treturn nil\n\t}\n\tdefer conn.Close()\n\tif x.UDPOverTCP {\n\t\trc, err := NATDial(\"tcp\", addr.String(), d.Address(), x.ServerAddress)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer rc.Close()\n\t\tsc, err := NewStreamClient(\"udp\", x.Password, addr.String(), rc, x.UDPTimeout, dstb)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer sc.Clean()\n\t\tif err := sc.Exchange(conn); err != nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn nil\n\t}\n\trc, err := NATDial(\"udp\", addr.String(), d.Address(), x.ServerAddress)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tsc, err := NewPacketClient(x.Password, addr.String(), rc, x.UDPTimeout, dstb)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sc.Clean()\n\tif err := sc.Exchange(conn); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (x *Client) Shutdown() error {\n\treturn x.Server.Shutdown()\n}\n"
        },
        {
          "name": "dhcpserver.go",
          "type": "blob",
          "size": 4.744140625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/krolaw/dhcp4\"\n)\n\ntype DHCPServer struct {\n\tListen   net.PacketConn\n\tServerIP net.IP\n\tStart    net.IP\n\tCount    int\n\tLeases   map[int]string\n\tOptions  dhcp4.Options\n\tCache    string\n}\n\nfunc NewDHCPServer(iface, serverip, start, mask string, count int, gateway string, dnsserver []string, cache string) (*DHCPServer, error) {\n\tif net.ParseIP(serverip).To4() == nil || net.ParseIP(start).To4() == nil || net.ParseIP(mask).To4() == nil || net.ParseIP(gateway).To4() == nil {\n\t\treturn nil, errors.New(\"Invalid v4 IP\")\n\t}\n\tdnsserverips := make([]net.IP, 0)\n\tfor _, v := range dnsserver {\n\t\tif net.ParseIP(v).To4() == nil {\n\t\t\treturn nil, errors.New(\"Invalid v4 IP\")\n\t\t}\n\t\tdnsserverips = append(dnsserverips, net.ParseIP(v).To4())\n\t}\n\tif cache == \"\" {\n\t\ts, err := os.UserHomeDir()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcache = filepath.Join(s, \".brook.dhcpserver\")\n\t}\n\tb, err := os.ReadFile(cache)\n\tif err != nil && !os.IsNotExist(err) {\n\t\treturn nil, err\n\t}\n\tm := make(map[int]string)\n\tif err == nil {\n\t\tif err := json.Unmarshal(b, &m); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tl, err := DHCPListen(iface)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &DHCPServer{\n\t\tListen:   l,\n\t\tServerIP: net.ParseIP(serverip).To4(),\n\t\tStart:    net.ParseIP(start).To4(),\n\t\tCount:    count,\n\t\tLeases:   m,\n\t\tOptions: dhcp4.Options{\n\t\t\tdhcp4.OptionSubnetMask:       []byte(net.ParseIP(mask).To4()),\n\t\t\tdhcp4.OptionRouter:           []byte(net.ParseIP(gateway).To4()),\n\t\t\tdhcp4.OptionDomainNameServer: dhcp4.JoinIPs(dnsserverips),\n\t\t},\n\t\tCache: cache,\n\t}, nil\n}\n\nfunc (h *DHCPServer) ListenAndServe() error {\n\treturn dhcp4.Serve(h.Listen, h)\n}\n\nfunc (h *DHCPServer) Shutdown() error {\n\tb, err := json.Marshal(h.Leases)\n\tif err != nil {\n\t\tLog(err)\n\t}\n\tif err == nil {\n\t\tif err := os.WriteFile(h.Cache, b, 0644); err != nil {\n\t\t\tLog(err)\n\t\t}\n\t}\n\treturn h.Listen.Close()\n}\n\nvar DHCPServerGate func(inmt string, in dhcp4.Packet, outmt string, ip net.IP, err error) = func(inmt string, in dhcp4.Packet, outmt string, ip net.IP, err error) {\n}\n\nfunc (h *DHCPServer) ServeDHCP(p dhcp4.Packet, msgType dhcp4.MessageType, options dhcp4.Options) (d dhcp4.Packet) {\n\tswitch msgType {\n\tcase dhcp4.Discover:\n\t\tfor i, s := range h.Leases {\n\t\t\tif s == p.CHAddr().String() {\n\t\t\t\tDHCPServerGate(msgType.String(), p, dhcp4.Offer.String(), dhcp4.IPAdd(h.Start, i), nil)\n\t\t\t\treturn dhcp4.ReplyPacket(p, dhcp4.Offer, h.ServerIP, dhcp4.IPAdd(h.Start, i), 7*24*time.Hour, h.Options.SelectOrderOrAll(options[dhcp4.OptionParameterRequestList]))\n\t\t\t}\n\t\t}\n\t\tfor i := 0; i < h.Count; i++ {\n\t\t\t_, ok := h.Leases[i]\n\t\t\tif !ok {\n\t\t\t\tDHCPServerGate(msgType.String(), p, dhcp4.Offer.String(), dhcp4.IPAdd(h.Start, i), nil)\n\t\t\t\treturn dhcp4.ReplyPacket(p, dhcp4.Offer, h.ServerIP, dhcp4.IPAdd(h.Start, i), 7*24*time.Hour, h.Options.SelectOrderOrAll(options[dhcp4.OptionParameterRequestList]))\n\t\t\t}\n\t\t}\n\t\tLog(errors.New(\"DHCP server is full\"))\n\t\tDHCPServerGate(msgType.String(), p, \"\", nil, errors.New(\"DHCP server is full\"))\n\t\treturn nil\n\tcase dhcp4.Request:\n\t\tif server, ok := options[dhcp4.OptionServerIdentifier]; ok && !net.IP(server).Equal(h.ServerIP) {\n\t\t\treturn nil\n\t\t}\n\t\treqIP := net.IP(options[dhcp4.OptionRequestedIPAddress])\n\t\tif reqIP == nil {\n\t\t\treqIP = net.IP(p.CIAddr())\n\t\t}\n\t\tif len(reqIP) == 4 && !reqIP.Equal(net.IPv4zero) {\n\t\t\ti := dhcp4.IPRange(h.Start, reqIP) - 1\n\t\t\tif i >= 0 && i < h.Count {\n\t\t\t\ts, ok := h.Leases[i]\n\t\t\t\tif !ok || s == p.CHAddr().String() {\n\t\t\t\t\th.Leases[i] = p.CHAddr().String()\n\t\t\t\t\tDHCPServerGate(msgType.String(), p, dhcp4.ACK.String(), reqIP, nil)\n\t\t\t\t\treturn dhcp4.ReplyPacket(p, dhcp4.ACK, h.ServerIP, reqIP, 7*24*time.Hour, h.Options.SelectOrderOrAll(options[dhcp4.OptionParameterRequestList]))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDHCPServerGate(msgType.String(), p, dhcp4.NAK.String(), reqIP, nil)\n\t\treturn dhcp4.ReplyPacket(p, dhcp4.NAK, h.ServerIP, nil, 0, nil)\n\tcase dhcp4.Release, dhcp4.Decline:\n\t\tfor i, s := range h.Leases {\n\t\t\tif s == p.CHAddr().String() {\n\t\t\t\tdelete(h.Leases, i)\n\t\t\t}\n\t\t}\n\t\tDHCPServerGate(msgType.String(), p, \"\", nil, nil)\n\t\treturn nil\n\t}\n\tDHCPServerGate(msgType.String(), p, \"\", nil, nil)\n\treturn nil\n}\n"
        },
        {
          "name": "dhcpserver_linux.go",
          "type": "blob",
          "size": 0.8603515625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"net\"\n\n\t\"github.com/krolaw/dhcp4/conn\"\n)\n\nfunc DHCPListen(iface string) (net.PacketConn, error) {\n\tif iface == \"\" {\n\t\treturn net.ListenPacket(\"udp4\", \":67\")\n\t}\n\treturn conn.NewUDP4BoundListener(iface, \":67\")\n}\n"
        },
        {
          "name": "dhcpserver_notlinux.go",
          "type": "blob",
          "size": 0.77734375,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\n// +build !linux\n\npackage brook\n\nimport (\n\t\"net\"\n)\n\nfunc DHCPListen(iface string) (net.PacketConn, error) {\n\treturn net.ListenPacket(\"udp4\", \":67\")\n}\n"
        },
        {
          "name": "dial.go",
          "type": "blob",
          "size": 1.8037109375,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"net\"\n)\n\nvar Resolve func(network string, addr string) (net.Addr, error) = func(network string, addr string) (net.Addr, error) {\n\tif network == \"tcp\" {\n\t\treturn net.ResolveTCPAddr(\"tcp\", addr)\n\t}\n\treturn net.ResolveUDPAddr(\"udp\", addr)\n}\n\nvar DialTCP func(network string, laddr, raddr string) (net.Conn, error) = func(network string, laddr, raddr string) (net.Conn, error) {\n\tvar la, ra *net.TCPAddr\n\tif laddr != \"\" {\n\t\tvar err error\n\t\tla, err = net.ResolveTCPAddr(network, laddr)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\ta, err := Resolve(network, raddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tra = a.(*net.TCPAddr)\n\treturn net.DialTCP(network, la, ra)\n}\n\nvar DialUDP func(network string, laddr, raddr string) (net.Conn, error) = func(network string, laddr, raddr string) (net.Conn, error) {\n\tvar la, ra *net.UDPAddr\n\tif laddr != \"\" {\n\t\tvar err error\n\t\tla, err = net.ResolveUDPAddr(network, laddr)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\ta, err := Resolve(network, raddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tra = a.(*net.UDPAddr)\n\treturn net.DialUDP(network, la, ra)\n}\n\nvar ListenUDP func(network string, laddr *net.UDPAddr) (*net.UDPConn, error) = net.ListenUDP\n"
        },
        {
          "name": "dnsclient.go",
          "type": "blob",
          "size": 1.9072265625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/miekg/dns\"\n)\n\ntype DNSClient struct {\n\tServer string\n}\n\nfunc (c *DNSClient) Exchange(m *dns.Msg) (*dns.Msg, error) {\n\tconn, err := DialUDP(\"udp\", \"\", c.Server)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tif err := conn.SetDeadline(time.Now().Add(time.Duration(60) * time.Second)); err != nil {\n\t\treturn nil, err\n\t}\n\tb, err := m.Pack()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif _, err := conn.Write(b); err != nil {\n\t\treturn nil, err\n\t}\n\tb = make([]byte, 1024)\n\ti, err := conn.Read(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tr := &dns.Msg{}\n\tif err := r.Unpack(b[:i]); err != nil {\n\t\treturn nil, err\n\t}\n\treturn r, nil\n}\n\n// if no AAAA, return nil\nfunc (c *DNSClient) AAAA(domain string) (net.IP, error) {\n\tm := &dns.Msg{}\n\tm.SetQuestion(domain+\".\", dns.TypeAAAA)\n\tm, err := c.Exchange(m)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, v := range m.Answer {\n\t\tif t, ok := v.(*dns.AAAA); ok {\n\t\t\treturn t.AAAA, nil\n\t\t}\n\t}\n\treturn nil, nil\n}\n\n// if no A, return nil\nfunc (c *DNSClient) A(domain string) (net.IP, error) {\n\tm := &dns.Msg{}\n\tm.SetQuestion(domain+\".\", dns.TypeA)\n\tm, err := c.Exchange(m)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, v := range m.Answer {\n\t\tif t, ok := v.(*dns.A); ok {\n\t\t\treturn t.A, nil\n\t\t}\n\t}\n\treturn nil, nil\n}\n"
        },
        {
          "name": "dnsserver.go",
          "type": "blob",
          "size": 1.5869140625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/miekg/dns\"\n)\n\nvar DNSGate func(addr *net.UDPAddr, m *dns.Msg, l1 *net.UDPConn) (done bool, err error) = func(addr *net.UDPAddr, m *dns.Msg, l1 *net.UDPConn) (done bool, err error) {\n\tif m.Question[0].Qtype == dns.TypeHTTPS || m.Question[0].Qtype == dns.TypeSVCB {\n\t\tm1 := &dns.Msg{}\n\t\tm1.SetReply(m)\n\t\tm1.Authoritative = true\n\t\tm1.Answer = append(m1.Answer, &dns.SOA{\n\t\t\tHdr:     dns.RR_Header{Name: m.Question[0].Name, Rrtype: dns.TypeSOA, Class: dns.ClassINET, Ttl: 60},\n\t\t\tNs:      \"txthinking.com.\",\n\t\t\tMbox:    \"cloud.txthinking.com.\",\n\t\t\tSerial:  uint32((time.Now().Year() * 10000) + (int(time.Now().Month()) * 100) + (time.Now().Day())*100),\n\t\t\tRefresh: 21600,\n\t\t\tRetry:   3600,\n\t\t\tExpire:  259200,\n\t\t\tMinttl:  300,\n\t\t})\n\t\tm1b, err := m1.PackBuffer(nil)\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif _, err := l1.WriteToUDP(m1b, addr); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\treturn true, nil\n\t}\n\treturn false, nil\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dohclient.go",
          "type": "blob",
          "size": 2.44140625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/miekg/dns\"\n)\n\ntype DOHClient struct {\n\tClient *http.Client\n\tDOH    string\n}\n\nfunc NewDOHClient(doh string) (*DOHClient, error) {\n\tu, err := url.Parse(doh)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ta := u.Query().Get(\"address\")\n\tif a == \"\" {\n\t\treturn nil, errors.New(\"no address\")\n\t}\n\tq := u.Query()\n\tq.Del(\"address\")\n\tu.RawQuery = q.Encode()\n\tc := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDial: func(network, addr string) (net.Conn, error) {\n\t\t\t\treturn DialTCP(\"tcp\", \"\", a)\n\t\t\t},\n\t\t},\n\t}\n\treturn &DOHClient{\n\t\tClient: c,\n\t\tDOH:    u.String(),\n\t}, nil\n}\n\nfunc (c *DOHClient) Exchange(m *dns.Msg) (*dns.Msg, error) {\n\tb, err := m.Pack()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\thr, err := http.NewRequest(\"POST\", c.DOH, bytes.NewReader(b))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\thr.Header.Set(\"Accept\", \"application/dns-message\")\n\thr.Header.Set(\"Content-Type\", \"application/dns-message\")\n\tres, err := c.Client.Do(hr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\tb, err = io.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tr := &dns.Msg{}\n\tif err := r.Unpack(b); err != nil {\n\t\treturn nil, err\n\t}\n\treturn r, nil\n}\n\n// if no AAAA, return nil\nfunc (c *DOHClient) AAAA(domain string) (net.IP, error) {\n\tm := &dns.Msg{}\n\tm.SetQuestion(domain+\".\", dns.TypeAAAA)\n\tm, err := c.Exchange(m)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, v := range m.Answer {\n\t\tif t, ok := v.(*dns.AAAA); ok {\n\t\t\treturn t.AAAA, nil\n\t\t}\n\t}\n\treturn nil, nil\n}\n\n// if no A, return nil\nfunc (c *DOHClient) A(domain string) (net.IP, error) {\n\tm := &dns.Msg{}\n\tm.SetQuestion(domain+\".\", dns.TypeA)\n\tm, err := c.Exchange(m)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, v := range m.Answer {\n\t\tif t, ok := v.(*dns.A); ok {\n\t\t\treturn t.A, nil\n\t\t}\n\t}\n\treturn nil, nil\n}\n"
        },
        {
          "name": "dohserver.go",
          "type": "blob",
          "size": 5.0390625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gorilla/mux\"\n\t\"github.com/miekg/dns\"\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/urfave/negroni\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\ntype DOHServer struct {\n\tAddr       string\n\tDomain     string\n\tPath       string\n\tDNSClient  *DNSClient\n\tDOHClient  *DOHClient\n\tHTTPServer *http.Server\n\tCert       []byte\n\tCertKey    []byte\n}\n\nfunc NewDOHServer(addr, domain, path, to string, tcpTimeout, udpTimeout int) (*DOHServer, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\ts := &DOHServer{\n\t\tAddr:   addr,\n\t\tDomain: domain,\n\t\tPath:   path,\n\t}\n\tif !strings.HasPrefix(to, \"https://\") {\n\t\ts.DNSClient = &DNSClient{Server: to}\n\t}\n\tif strings.HasPrefix(to, \"https://\") {\n\t\tc, err := NewDOHClient(to)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ts.DOHClient = c\n\t}\n\treturn s, nil\n}\n\nfunc (s *DOHServer) ListenAndServe() error {\n\tr := mux.NewRouter()\n\tr.NotFoundHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(404)\n\t\treturn\n\t})\n\tr.Methods(\"POST\").Path(s.Path).Handler(s)\n\n\tn := negroni.New()\n\tn.Use(negroni.NewRecovery())\n\tn.UseFunc(func(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {\n\t\tw.Header().Set(\"Server\", \"brook\")\n\t\tnext(w, r)\n\t})\n\tn.UseHandler(r)\n\n\tif s.Domain == \"\" {\n\t\ts.HTTPServer = &http.Server{\n\t\t\tAddr:           s.Addr,\n\t\t\tReadTimeout:    5 * time.Second,\n\t\t\tWriteTimeout:   10 * time.Second,\n\t\t\tIdleTimeout:    120 * time.Second,\n\t\t\tMaxHeaderBytes: 1 << 20,\n\t\t\tHandler:        n,\n\t\t}\n\t\treturn s.HTTPServer.ListenAndServe()\n\t}\n\tvar t *tls.Config\n\tif s.Cert == nil || s.CertKey == nil {\n\t\tm := autocert.Manager{\n\t\t\tCache:      autocert.DirCache(\".letsencrypt\"),\n\t\t\tPrompt:     autocert.AcceptTOS,\n\t\t\tHostPolicy: autocert.HostWhitelist(s.Domain),\n\t\t\tEmail:      \"cloud@txthinking.com\",\n\t\t}\n\t\tgo func() {\n\t\t\terr := http.ListenAndServe(\":80\", m.HTTPHandler(nil))\n\t\t\tif err != nil {\n\t\t\t\tLog(err)\n\t\t\t}\n\t\t}()\n\t\tt = &tls.Config{GetCertificate: m.GetCertificate}\n\t}\n\tif s.Cert != nil && s.CertKey != nil {\n\t\tct, err := tls.X509KeyPair(s.Cert, s.CertKey)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tt = &tls.Config{Certificates: []tls.Certificate{ct}, ServerName: s.Domain}\n\t}\n\ts.HTTPServer = &http.Server{\n\t\tAddr:         s.Addr,\n\t\tReadTimeout:  5 * time.Second,\n\t\tWriteTimeout: 10 * time.Second,\n\t\tIdleTimeout:  120 * time.Second,\n\t\tHandler:      n,\n\t\tTLSConfig:    t,\n\t}\n\tif s.Cert == nil || s.CertKey == nil {\n\t\tgo func() {\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t\tc := &http.Client{\n\t\t\t\tTimeout: 10 * time.Second,\n\t\t\t}\n\t\t\t_, _ = c.Get(\"https://\" + s.Domain + s.Addr)\n\t\t}()\n\t}\n\treturn s.HTTPServer.ListenAndServeTLS(\"\", \"\")\n}\n\nvar DOHGate func(m *dns.Msg, w http.ResponseWriter, r *http.Request) (done bool, err error) = func(m *dns.Msg, w http.ResponseWriter, r *http.Request) (done bool, err error) {\n\tif m.Question[0].Qtype == dns.TypeHTTPS || m.Question[0].Qtype == dns.TypeSVCB {\n\t\tm1 := &dns.Msg{}\n\t\tm1.SetReply(m)\n\t\tm1.Authoritative = true\n\t\tm1.Answer = append(m1.Answer, &dns.SOA{\n\t\t\tHdr:     dns.RR_Header{Name: m.Question[0].Name, Rrtype: dns.TypeSOA, Class: dns.ClassINET, Ttl: 60},\n\t\t\tNs:      \"txthinking.com.\",\n\t\t\tMbox:    \"cloud.txthinking.com.\",\n\t\t\tSerial:  uint32((time.Now().Year() * 10000) + (int(time.Now().Month()) * 100) + (time.Now().Day())*100),\n\t\t\tRefresh: 21600,\n\t\t\tRetry:   3600,\n\t\t\tExpire:  259200,\n\t\t\tMinttl:  300,\n\t\t})\n\t\tm1b, err := m1.PackBuffer(nil)\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tw.Header().Set(\"Content-Type\", \"application/dns-message\")\n\t\tw.Write(m1b)\n\t\treturn true, nil\n\t}\n\treturn false, nil\n}\n\nfunc (s *DOHServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tb, err := io.ReadAll(r.Body)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), 500)\n\t\treturn\n\t}\n\tm := &dns.Msg{}\n\tif err := m.Unpack(b); err != nil {\n\t\thttp.Error(w, err.Error(), 500)\n\t\treturn\n\t}\n\tdone, err := DOHGate(m, w, r)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), 500)\n\t\treturn\n\t}\n\tif done {\n\t\treturn\n\t}\n\tm1 := &dns.Msg{}\n\tif s.DNSClient != nil {\n\t\tm1, err = s.DNSClient.Exchange(m)\n\t}\n\tif s.DOHClient != nil {\n\t\tm1, err = s.DOHClient.Exchange(m)\n\t}\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), 500)\n\t\treturn\n\t}\n\tb, err = m1.Pack()\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), 500)\n\t\treturn\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/dns-message\")\n\tw.Write(b)\n}\n\nfunc (s *DOHServer) Shutdown() error {\n\treturn s.HTTPServer.Shutdown(context.Background())\n}\n"
        },
        {
          "name": "echoclient.go",
          "type": "blob",
          "size": 2.31640625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"fmt\"\n)\n\nfunc EchoClient(server string, times int) error {\n\tc, err := DialTCP(\"tcp\", \"\", server)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\tvar b [1024 * 2]byte\n\tfor i := 0; i < times; i++ {\n\t\tif _, err := c.Write([]byte(c.LocalAddr().String())); err != nil {\n\t\t\treturn err\n\t\t}\n\t\ti, err := c.Read(b[:])\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif c.LocalAddr().String() == string(b[:i]) {\n\t\t\tfmt.Printf(\"TCP: src:%s -> dst:%s\\n\", c.LocalAddr().String(), c.RemoteAddr().String())\n\t\t\tfmt.Printf(\"TCP: dst:%s <- src:%s\\n\", c.LocalAddr().String(), c.RemoteAddr().String())\n\t\t}\n\t\tif c.LocalAddr().String() != string(b[:i]) {\n\t\t\tfmt.Printf(\"TCP: src:%s -> dst:proxy -> src:proxy -> dst:%s\\n\", c.LocalAddr().String(), c.RemoteAddr().String())\n\t\t\tfmt.Printf(\"TCP: dst:%s <- src:proxy <- dst:%s <- src:%s\\n\", c.LocalAddr().String(), string(b[:i]), c.RemoteAddr().String())\n\t\t}\n\t}\n\n\tc1, err := DialUDP(\"udp\", \"\", server)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c1.Close()\n\tfor i := 0; i < times; i++ {\n\t\tif _, err := c1.Write([]byte(c1.LocalAddr().String())); err != nil {\n\t\t\treturn err\n\t\t}\n\t\ti, err := c1.Read(b[:])\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif c1.LocalAddr().String() == string(b[:i]) {\n\t\t\tfmt.Printf(\"UDP: src:%s -> dst:%s\\n\", c1.LocalAddr().String(), c1.RemoteAddr().String())\n\t\t\tfmt.Printf(\"UDP: dst:%s <- src:%s\\n\", c1.LocalAddr().String(), c1.RemoteAddr().String())\n\t\t}\n\t\tif c1.LocalAddr().String() != string(b[:i]) {\n\t\t\tfmt.Printf(\"UDP: src:%s -> dst:proxy -> src:proxy -> dst:%s\\n\", c1.LocalAddr().String(), c1.RemoteAddr().String())\n\t\t\tfmt.Printf(\"UDP: dst:%s <- src:proxy <- dst:%s <- src:%s\\n\", c1.LocalAddr().String(), string(b[:i]), c1.RemoteAddr().String())\n\t\t}\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "echoserver.go",
          "type": "blob",
          "size": 3.9013671875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/txthinking/runnergroup\"\n)\n\ntype EchoServer struct {\n\tAddr        string\n\tRunnerGroup *runnergroup.RunnerGroup\n}\n\nfunc NewEchoServer(addr string) (*EchoServer, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\ts := &EchoServer{\n\t\tAddr:        addr,\n\t\tRunnerGroup: runnergroup.New(),\n\t}\n\treturn s, nil\n}\n\nfunc (s *EchoServer) ListenAndServe() error {\n\taddr, err := net.ResolveTCPAddr(\"tcp\", s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tl, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.RunnerGroup.Add(&runnergroup.Runner{\n\t\tStart: func() error {\n\t\t\tfor {\n\t\t\t\tc, err := l.AcceptTCP()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tgo func(c *net.TCPConn) {\n\t\t\t\t\tdefer c.Close()\n\t\t\t\t\tif err := s.TCPHandle(c); err != nil {\n\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"error\": err.Error()})\n\t\t\t\t\t}\n\t\t\t\t}(c)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tStop: func() error {\n\t\t\treturn l.Close()\n\t\t},\n\t})\n\taddr1, err := net.ResolveUDPAddr(\"udp\", s.Addr)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn err\n\t}\n\tl1, err := net.ListenUDP(\"udp\", addr1)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn err\n\t}\n\ts.RunnerGroup.Add(&runnergroup.Runner{\n\t\tStart: func() error {\n\t\t\tfor {\n\t\t\t\tb := make([]byte, 65507)\n\t\t\t\tn, addr, err := l1.ReadFromUDP(b)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tgo func(addr *net.UDPAddr, b []byte) {\n\t\t\t\t\tif err := s.UDPHandle(addr, b, l1); err != nil {\n\t\t\t\t\t\tLog(Error{\"from\": addr.String(), \"error\": err.Error()})\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}(addr, b[0:n])\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tStop: func() error {\n\t\t\treturn l1.Close()\n\t\t},\n\t})\n\treturn s.RunnerGroup.Wait()\n}\n\nfunc (s *EchoServer) TCPHandle(c *net.TCPConn) error {\n\tvar b [1024 * 2]byte\n\tfor {\n\t\tif err := c.SetDeadline(time.Now().Add(60 * time.Second)); err != nil {\n\t\t\treturn err\n\t\t}\n\t\ti, err := c.Read(b[:])\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tif _, err := c.Write([]byte(c.RemoteAddr().String())); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif c.RemoteAddr().String() == string(b[:i]) {\n\t\t\tfmt.Printf(\"TCP: dst:%s <- src:%s\\n\", c.LocalAddr().String(), c.RemoteAddr().String())\n\t\t\tfmt.Printf(\"TCP: src:%s -> dst:%s\\n\", c.LocalAddr().String(), c.RemoteAddr().String())\n\t\t}\n\t\tif c.RemoteAddr().String() != string(b[:i]) {\n\t\t\tfmt.Printf(\"TCP: dst:%s <- src:%s <- dst:proxy <- src:%s\\n\", c.LocalAddr().String(), c.RemoteAddr().String(), string(b[:i]))\n\t\t\tfmt.Printf(\"TCP: src:%s -> dst:%s -> src:proxy -> dst:%s\\n\", c.LocalAddr().String(), c.RemoteAddr().String(), string(b[:i]))\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *EchoServer) UDPHandle(addr *net.UDPAddr, b []byte, l1 *net.UDPConn) error {\n\tif _, err := l1.WriteToUDP([]byte(addr.String()), addr); err != nil {\n\t\treturn err\n\t}\n\tif addr.String() == string(b) {\n\t\tfmt.Printf(\"UDP: dst:%s <- src:%s\\n\", l1.LocalAddr().String(), addr.String())\n\t\tfmt.Printf(\"UDP: src:%s -> dst:%s\\n\", l1.LocalAddr().String(), addr.String())\n\t}\n\tif addr.String() != string(b) {\n\t\tfmt.Printf(\"UDP: dst:%s <- src:%s <- dst:proxy <- src:%s\\n\", l1.LocalAddr().String(), addr.String(), string(b))\n\t\tfmt.Printf(\"UDP: src:%s -> dst:%s -> src:proxy -> dst:%s\\n\", l1.LocalAddr().String(), addr.String(), string(b))\n\t}\n\treturn nil\n}\n\nfunc (s *EchoServer) Shutdown() error {\n\treturn s.RunnerGroup.Done()\n}\n"
        },
        {
          "name": "error.go",
          "type": "blob",
          "size": 0.8154296875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport \"encoding/json\"\n\ntype Error map[string]string\n\nfunc (e Error) Error() string {\n\tb, err := json.Marshal(e)\n\tif err != nil {\n\t\treturn err.Error()\n\t}\n\treturn string(b)\n}\n"
        },
        {
          "name": "exchanger.go",
          "type": "blob",
          "size": 1.146484375,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"net\"\n)\n\ntype Exchanger interface {\n\tNetwork() string\n\tSrc() string\n\tDst() string\n\tExchange(remote net.Conn) error\n\tClean()\n}\n\ntype UDPServerConnFactory interface {\n\tHandle(addr *net.UDPAddr, b, p []byte, w func([]byte) (int, error), timeout int) (net.Conn, []byte, error)\n}\n\nvar ServerGate func(ex Exchanger) (Exchanger, error) = func(ex Exchanger) (Exchanger, error) {\n\treturn ex, nil\n}\n\nvar ClientGate func(ex Exchanger) (Exchanger, error) = func(ex Exchanger) (Exchanger, error) {\n\treturn ex, nil\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.158203125,
          "content": "module github.com/txthinking/brook\n\ngo 1.22\n\ntoolchain go1.23.0\n\nrequire (\n\tgithub.com/gorilla/mux v1.8.1\n\tgithub.com/gorilla/websocket v1.5.1\n\tgithub.com/krolaw/dhcp4 v0.0.0-20190909130307-a50d88189771\n\tgithub.com/miekg/dns v1.1.57\n\tgithub.com/patrickmn/go-cache v2.1.0+incompatible\n\tgithub.com/phuslu/iploc v1.0.20240501\n\tgithub.com/prometheus/client_golang v1.19.1\n\tgithub.com/quic-go/quic-go v0.48.2\n\tgithub.com/refraction-networking/utls v1.5.4\n\tgithub.com/tdewolff/minify v2.3.6+incompatible\n\tgithub.com/txthinking/runnergroup v0.0.0-20230325130830-408dc5853f86\n\tgithub.com/txthinking/socks5 v0.0.0-20230325130024-4230056ae301\n\tgithub.com/txthinking/x v0.0.0-20240301021728-6f68aba84c87\n\tgithub.com/urfave/cli/v2 v2.25.7\n\tgithub.com/urfave/negroni v1.0.0\n\tgolang.org/x/crypto v0.26.0\n\tgolang.org/x/net v0.28.0\n)\n\nrequire (\n\tgithub.com/andybalholm/brotli v1.0.5 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.2.0 // indirect\n\tgithub.com/cloudflare/circl v1.3.7 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect\n\tgithub.com/gaukas/godicttls v0.0.4 // indirect\n\tgithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 // indirect\n\tgithub.com/golang/protobuf v1.5.3 // indirect\n\tgithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38 // indirect\n\tgithub.com/klauspost/compress v1.16.7 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.4 // indirect\n\tgithub.com/onsi/ginkgo/v2 v2.9.5 // indirect\n\tgithub.com/prometheus/client_model v0.5.0 // indirect\n\tgithub.com/prometheus/common v0.48.0 // indirect\n\tgithub.com/prometheus/procfs v0.12.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/tdewolff/parse v2.3.4+incompatible // indirect\n\tgithub.com/tdewolff/test v1.0.10 // indirect\n\tgithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 // indirect\n\tgo.uber.org/mock v0.4.0 // indirect\n\tgolang.org/x/exp v0.0.0-20240506185415-9bf2ced13842 // indirect\n\tgolang.org/x/mod v0.17.0 // indirect\n\tgolang.org/x/sys v0.23.0 // indirect\n\tgolang.org/x/text v0.17.0 // indirect\n\tgolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d // indirect\n\tgoogle.golang.org/protobuf v1.33.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 16.6708984375,
          "content": "github.com/andybalholm/brotli v1.0.5 h1:8uQZIdzKmjc/iuPu7O2ioW48L81FgatrcpfFmiq/cCs=\ngithub.com/andybalholm/brotli v1.0.5/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=\ngithub.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/cloudflare/circl v1.3.7 h1:qlCDlTPz2n9fu58M0Nh1J/JzcFpfgkFHHX3O35r5vcU=\ngithub.com/cloudflare/circl v1.3.7/go.mod h1:sRTcRWXGLrKw6yIGJ+l7amYJFfAXbZG0kBSc8r4zxgA=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2 h1:p1EgwI/C7NhT0JmVkwCD2ZBK8j4aeHQX2pMHHBfMQ6w=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/gaukas/godicttls v0.0.4 h1:NlRaXb3J6hAnTmWdsEKb9bcSBD6BvcIjdGdeb0zfXbk=\ngithub.com/gaukas/godicttls v0.0.4/go.mod h1:l6EenT4TLWgTdwslVb4sEMOCf7Bv0JAK67deKr9/NCI=\ngithub.com/go-logr/logr v1.2.4 h1:g01GSCwiDw2xSZfjJ2/T9M+S6pFdcNtFYsp+Y43HYDQ=\ngithub.com/go-logr/logr v1.2.4/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 h1:tfuBGBXKqDEevZMzYi5KSi8KkcZtzBcTgAUUtapy0OI=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572/go.mod h1:9Pwr4B2jHnOSGXyyzV8ROjYa2ojvAY6HCGYYfMoC3Ls=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38 h1:yAJXTCF9TqKcTiHJAE8dj7HMvPfh66eeA2JYW7eFpSE=\ngithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=\ngithub.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=\ngithub.com/gorilla/websocket v1.5.1 h1:gmztn0JnHVt9JZquRuzLw3g4wouNVzKL15iLr/zn/QY=\ngithub.com/gorilla/websocket v1.5.1/go.mod h1:x3kM2JMyaluk02fnUJpQuwD2dCS5NDG2ZHL0uE0tcaY=\ngithub.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/klauspost/compress v1.16.7 h1:2mk3MPGNzKyxErAw8YaohYh69+pa4sIQSC0fPGCFR9I=\ngithub.com/klauspost/compress v1.16.7/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=\ngithub.com/krolaw/dhcp4 v0.0.0-20190909130307-a50d88189771 h1:t2c2B9g1ZVhMYduqmANSEGVD3/1WlsrEYNPtVoFlENk=\ngithub.com/krolaw/dhcp4 v0.0.0-20190909130307-a50d88189771/go.mod h1:0AqAH3ZogsCrvrtUpvc6EtVKbc3w6xwZhkvGLuqyi3o=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.4 h1:mmDVorXM7PCGKw94cs5zkfA9PSy5pEvNWRP0ET0TIVo=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.4/go.mod h1:BSXmuO+STAnVfrANrmjBb36TMTDstsz7MSK+HVaYKv4=\ngithub.com/miekg/dns v1.1.51/go.mod h1:2Z9d3CP1LQWihRZUf29mQ19yDThaI4DAYzte2CaQW5c=\ngithub.com/miekg/dns v1.1.57 h1:Jzi7ApEIzwEPLHWRcafCN9LZSBbqQpxjt/wpgvg7wcM=\ngithub.com/miekg/dns v1.1.57/go.mod h1:uqRjCRUuEAA6qsOiJvDd+CFo/vW+y5WR6SNmHE55hZk=\ngithub.com/onsi/ginkgo/v2 v2.9.5 h1:+6Hr4uxzP4XIUyAkg61dWBw8lb/gc4/X5luuxN/EC+Q=\ngithub.com/onsi/ginkgo/v2 v2.9.5/go.mod h1:tvAoo1QUJwNEU2ITftXTpR7R1RbCzoZUOs3RonqW57k=\ngithub.com/onsi/gomega v1.27.6 h1:ENqfyGeS5AX/rlXDd/ETokDz93u0YufY1Pgxuy/PvWE=\ngithub.com/onsi/gomega v1.27.6/go.mod h1:PIQNjfQwkP3aQAH7lf7j87O/5FiNr+ZR8+ipb+qQlhg=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=\ngithub.com/phuslu/iploc v1.0.20231031 h1:AsKT2PqStXV+gqJjNJ5mcUJ7YT9i09W+NVthhz5987s=\ngithub.com/phuslu/iploc v1.0.20231031/go.mod h1:gsgExGWldwv1AEzZm+Ki9/vGfyjkL33pbSr9HGpt2Xg=\ngithub.com/phuslu/iploc v1.0.20240501 h1:lX2dEFOQzxVpTH3dgJ+pcNEpLxwaJUhoCGMoajuAI5w=\ngithub.com/phuslu/iploc v1.0.20240501/go.mod h1:VZqAWoi2A80YPvfk1AizLGHavNIG9nhBC8d87D/SeVs=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v1.17.0 h1:rl2sfwZMtSthVU752MqfjQozy7blglC+1SOtjMAMh+Q=\ngithub.com/prometheus/client_golang v1.17.0/go.mod h1:VeL+gMmOAxkS2IqfCq0ZmHSL+LjWfWDUmp1mBz9JgUY=\ngithub.com/prometheus/client_golang v1.19.1 h1:wZWJDwK+NameRJuPGDhlnFgx8e8HN3XHQeLaYJFJBOE=\ngithub.com/prometheus/client_golang v1.19.1/go.mod h1:mP78NwGzrVks5S2H6ab8+ZZGJLZUq1hoULYBAYBw1Ho=\ngithub.com/prometheus/client_model v0.4.1-0.20230718164431-9a2bf3000d16 h1:v7DLqVdK4VrYkVD5diGdl4sxJurKJEMnODWRJlxV9oM=\ngithub.com/prometheus/client_model v0.4.1-0.20230718164431-9a2bf3000d16/go.mod h1:oMQmHW1/JoDwqLtg57MGgP/Fb1CJEYF2imWWhWtMkYU=\ngithub.com/prometheus/client_model v0.5.0 h1:VQw1hfvPvk3Uv6Qf29VrPF32JB6rtbgI6cYPYQjL0Qw=\ngithub.com/prometheus/client_model v0.5.0/go.mod h1:dTiFglRmd66nLR9Pv9f0mZi7B7fk5Pm3gvsjB5tr+kI=\ngithub.com/prometheus/common v0.44.0 h1:+5BrQJwiBB9xsMygAB3TNvpQKOwlkc25LbISbrdOOfY=\ngithub.com/prometheus/common v0.44.0/go.mod h1:ofAIvZbQ1e/nugmZGz4/qCb9Ap1VoSTIO7x0VV9VvuY=\ngithub.com/prometheus/common v0.48.0 h1:QO8U2CdOzSn1BBsmXJXduaaW+dY/5QLjfB8svtSzKKE=\ngithub.com/prometheus/common v0.48.0/go.mod h1:0/KsvlIEfPQCQ5I2iNSAWKPZziNCvRs5EC6ILDTlAPc=\ngithub.com/prometheus/procfs v0.11.1 h1:xRC8Iq1yyca5ypa9n1EZnWZkt7dwcoRPQwX/5gwaUuI=\ngithub.com/prometheus/procfs v0.11.1/go.mod h1:eesXgaPo1q7lBpVMoMy0ZOFTth9hBn4W/y0/p/ScXhY=\ngithub.com/prometheus/procfs v0.12.0 h1:jluTpSng7V9hY0O2R9DzzJHYb2xULk9VTR1V1R/k6Bo=\ngithub.com/prometheus/procfs v0.12.0/go.mod h1:pcuDEFsWDnvcgNzo4EEweacyhjeA9Zk3cnaOZAZEfOo=\ngithub.com/quic-go/quic-go v0.42.0 h1:uSfdap0eveIl8KXnipv9K7nlwZ5IqLlYOpJ58u5utpM=\ngithub.com/quic-go/quic-go v0.42.0/go.mod h1:132kz4kL3F9vxhW3CtQJLDVwcFe5wdWeJXXijhsO57M=\ngithub.com/quic-go/quic-go v0.48.2 h1:wsKXZPeGWpMpCGSWqOcqpW2wZYic/8T3aqiOID0/KWE=\ngithub.com/quic-go/quic-go v0.48.2/go.mod h1:yBgs3rWBOADpga7F+jJsb6Ybg1LSYiQvwWlLX+/6HMs=\ngithub.com/refraction-networking/utls v1.5.4 h1:9k6EO2b8TaOGsQ7Pl7p9w6PUhx18/ZCeT0WNTZ7Uw4o=\ngithub.com/refraction-networking/utls v1.5.4/go.mod h1:SPuDbBmgLGp8s+HLNc83FuavwZCFoMmExj+ltUHiHUw=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.6.1 h1:hDPOHmpOpP40lSULcqw7IrRb/u7w6RpDC9399XyoNd0=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/tdewolff/minify v2.3.6+incompatible h1:2hw5/9ZvxhWLvBUnHE06gElGYz+Jv9R4Eys0XUzItYo=\ngithub.com/tdewolff/minify v2.3.6+incompatible/go.mod h1:9Ov578KJUmAWpS6NeZwRZyT56Uf6o3Mcz9CEsg8USYs=\ngithub.com/tdewolff/parse v2.3.4+incompatible h1:x05/cnGwIMf4ceLuDMBOdQ1qGniMoxpP46ghf0Qzh38=\ngithub.com/tdewolff/parse v2.3.4+incompatible/go.mod h1:8oBwCsVmUkgHO8M5iCzSIDtpzXOT0WXX9cWhz+bIzJQ=\ngithub.com/tdewolff/test v1.0.10 h1:uWiheaLgLcNFqHcdWveum7PQfMnIUTf9Kl3bFxrIoew=\ngithub.com/tdewolff/test v1.0.10/go.mod h1:6DAvZliBAAnD7rhVgwaM7DE5/d9NMOAJ09SqYqeK4QE=\ngithub.com/txthinking/runnergroup v0.0.0-20210608031112-152c7c4432bf/go.mod h1:CLUSJbazqETbaR+i0YAhXBICV9TrKH93pziccMhmhpM=\ngithub.com/txthinking/runnergroup v0.0.0-20230325130830-408dc5853f86 h1:EX/lPhI7pMS0AOXCkKgdo/CCHOtTtTBvdjk7uUWeSYc=\ngithub.com/txthinking/runnergroup v0.0.0-20230325130830-408dc5853f86/go.mod h1:cldYm15/XHcGt7ndItnEWHwFZo7dinU+2QoyjfErhsI=\ngithub.com/txthinking/socks5 v0.0.0-20230325130024-4230056ae301 h1:d/Wr/Vl/wiJHc3AHYbYs5I3PucJvRuw3SvbmlIRf+oM=\ngithub.com/txthinking/socks5 v0.0.0-20230325130024-4230056ae301/go.mod h1:ntmMHL/xPq1WLeKiw8p/eRATaae6PiVRNipHFJxI8PM=\ngithub.com/txthinking/x v0.0.0-20240301021728-6f68aba84c87 h1:ukVX+9jDc97QsREpOZbs5sXbxaChFOBz8b/6dlwnRzQ=\ngithub.com/txthinking/x v0.0.0-20240301021728-6f68aba84c87/go.mod h1:/hZBnjRcqz02ybkpqkkCx6LL7UpRTXnkE2pfZDh5t6g=\ngithub.com/urfave/cli/v2 v2.25.7 h1:VAzn5oq403l5pHjc4OhD54+XGO9cdKVL/7lDjF+iKUs=\ngithub.com/urfave/cli/v2 v2.25.7/go.mod h1:8qnjx1vcq5s2/wpsqoZFndg2CE5tNFyrTvS6SinrnYQ=\ngithub.com/urfave/negroni v1.0.0 h1:kIimOitoypq34K7TG7DUaJ9kq/N4Ofuwi1sjz0KipXc=\ngithub.com/urfave/negroni v1.0.0/go.mod h1:Meg73S6kFm/4PpbYdq35yYWoCZ9mS/YSx+lKnmiohz4=\ngithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 h1:bAn7/zixMGCfxrRTfdpNzjtPYqr8smhKouy9mxVdGPU=\ngithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673/go.mod h1:N3UwUGtsrSj3ccvlPHLoLsHnpR27oXr4ZE984MbSER8=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngo.uber.org/mock v0.4.0 h1:VcM4ZOtdbR4f6VXfiOpwpVJDL6lCReaZ6mw31wqh7KU=\ngo.uber.org/mock v0.4.0/go.mod h1:a6FSlNadKUHUa9IP5Vyt1zh4fC7uAwxMutEAscFbkZc=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.17.0 h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=\ngolang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=\ngolang.org/x/crypto v0.22.0 h1:g1v0xeRhjcugydODzvb3mEM9SQ0HGp9s/nh3COQ/C30=\ngolang.org/x/crypto v0.22.0/go.mod h1:vr6Su+7cTlO45qkww3VDJlzDn0ctJvRgYbC2NvXHt+M=\ngolang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=\ngolang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=\ngolang.org/x/exp v0.0.0-20221205204356-47842c84f3db h1:D/cFflL63o2KSLJIwjlcIt8PR064j/xsmdEJL/YvY/o=\ngolang.org/x/exp v0.0.0-20221205204356-47842c84f3db/go.mod h1:CxIveKay+FTh1D0yPZemJVgC/95VzuuOLq5Qi4xnoYc=\ngolang.org/x/exp v0.0.0-20240506185415-9bf2ced13842 h1:vr/HnozRka3pE4EsMEg1lgkXJkTFJCVUX+S/ZT6wYzM=\ngolang.org/x/exp v0.0.0-20240506185415-9bf2ced13842/go.mod h1:XtvwrStGgqGPLc4cjQfWqZHG1YFdYs6swckp8vpsjnc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.7.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.12.0 h1:rmsUpXtvNzj340zd98LZ4KntptpfRHwpFOHG188oHXc=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.17.0 h1:zY54UmvipHiNd+pm+m0x9KhZ9hl1/7QNMyxXbc6ICqA=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.2.0/go.mod h1:KqCZLdyyvdV855qA2rE3GC2aiw5xGR5TEjj8smXukLY=\ngolang.org/x/net v0.18.0 h1:mIYleuAkSbHh0tCv7RvjL3F6ZVbLjq4+R7zbOn3Kokg=\ngolang.org/x/net v0.18.0/go.mod h1:/czyP5RqHAH4odGYxBJ1qz0+CE5WZ+2j1YgoEo8F2jQ=\ngolang.org/x/net v0.24.0 h1:1PcaxkF854Fu3+lvBIx5SYn9wRlBzzcnHZSiaFFAb0w=\ngolang.org/x/net v0.24.0/go.mod h1:2Q7sJY5mzlzWjKtYUEXSlBWCdyaioyXzRB2RtU8KVE8=\ngolang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=\ngolang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.4.0 h1:zxkM55ReGkDlKSM+Fu41A+zmbZuaPVbGMzvvdUPznYQ=\ngolang.org/x/sync v0.4.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.15.0 h1:h48lPFYpsTvQJZF4EKyI4aLHaev3CxivZmv7yZig9pc=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.19.0 h1:q5f1RH2jigJ1MoAWp2KTp3gm5zAGFUTarQZ5U386+4o=\ngolang.org/x/sys v0.19.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.23.0 h1:YfKFowiIMvtgl1UERQoTPPToxltDeZfbj4H7dVUCwmM=\ngolang.org/x/sys v0.23.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.2.0/go.mod h1:TVmDHMZPmdnySmBfhjOoOdhjzdE1h4u1VwSiw2l1Nuc=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=\ngolang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=\ngolang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.3.0/go.mod h1:/rWhSS2+zyEVwoJf8YAX6L2f0ntZ7Kn/mGgAWcipA5k=\ngolang.org/x/tools v0.13.0 h1:Iey4qkscZuv0VvIt8E0neZjtPVQFSc870HQ448QgEmQ=\ngolang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d h1:vU5i/LfpvrRCpgM/VPfJLg5KjxD3E+hfT1SH+d9zLwg=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "init.go",
          "type": "blob",
          "size": 0.775390625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nvar ServerHKDFInfo = []byte{0x62, 0x72, 0x6f, 0x6f, 0x6b}\nvar ClientHKDFInfo = []byte{0x62, 0x72, 0x6f, 0x6f, 0x6b}\n\nfunc init() {\n}\n"
        },
        {
          "name": "limits",
          "type": "tree",
          "content": null
        },
        {
          "name": "link.go",
          "type": "blob",
          "size": 1.017578125,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n)\n\nfunc Link(kind, server string, v url.Values) string {\n\tv.Set(kind, server)\n\treturn fmt.Sprintf(\"brook://%s?%s\", kind, v.Encode())\n}\n\nfunc ParseLink(link string) (kind, server string, v url.Values, err error) {\n\tvar u *url.URL\n\tu, err = url.Parse(link)\n\tif err != nil {\n\t\treturn\n\t}\n\tkind = u.Host\n\tserver = u.Query().Get(kind)\n\tv = u.Query()\n\treturn\n}\n"
        },
        {
          "name": "list.go",
          "type": "blob",
          "size": 5.22265625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\tcache \"github.com/patrickmn/go-cache\"\n\t\"github.com/phuslu/iploc\"\n)\n\nfunc ListHasDomain(ds map[string]byte, domain string, c *cache.Cache) bool {\n\tif ds == nil {\n\t\treturn false\n\t}\n\tif c != nil {\n\t\tany, ok := c.Get(domain)\n\t\tif ok {\n\t\t\treturn any.(bool)\n\t\t}\n\t}\n\tss := strings.Split(domain, \".\")\n\tvar s1 string\n\tfor i := len(ss) - 1; i >= 0; i-- {\n\t\tif s1 == \"\" {\n\t\t\ts1 = ss[i]\n\t\t} else {\n\t\t\ts1 = ss[i] + \".\" + s1\n\t\t}\n\t\tif _, ok := ds[s1]; ok {\n\t\t\tif c != nil {\n\t\t\t\tc.Set(domain, true, 24*time.Hour)\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\t}\n\tif c != nil {\n\t\tc.Set(domain, false, 24*time.Hour)\n\t}\n\treturn false\n}\n\nfunc ListHasIP(c4, c6 []*net.IPNet, i net.IP, c *cache.Cache, geo []string) bool {\n\tif c4 == nil && c6 == nil && len(geo) == 0 {\n\t\treturn false\n\t}\n\tif c != nil {\n\t\tany, ok := c.Get(i.String())\n\t\tif ok {\n\t\t\treturn any.(bool)\n\t\t}\n\t}\n\tif len(geo) != 0 {\n\t\tbs := iploc.Country(i)\n\t\tif bs != \"\" {\n\t\t\tfor _, v := range geo {\n\t\t\t\tif v == bs {\n\t\t\t\t\tif c != nil {\n\t\t\t\t\t\tc.Set(i.String(), true, 24*time.Hour)\n\t\t\t\t\t}\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif i.To4() != nil {\n\t\tif c4 == nil {\n\t\t\treturn false\n\t\t}\n\t\tii := i.To4()\n\t\tfor _, v := range c4 {\n\t\t\tif v.Contains(ii) {\n\t\t\t\tif c != nil {\n\t\t\t\t\tc.Set(i.String(), true, 24*time.Hour)\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\tif i.To4() == nil {\n\t\tif c6 == nil {\n\t\t\treturn false\n\t\t}\n\t\tii := i.To16()\n\t\tfor _, v := range c6 {\n\t\t\tif v.Contains(ii) {\n\t\t\t\tif c != nil {\n\t\t\t\t\tc.Set(i.String(), true, 24*time.Hour)\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\tif c != nil {\n\t\tc.Set(i.String(), false, 24*time.Hour)\n\t}\n\treturn false\n}\n\nfunc ReadDomainList(url string) (map[string]byte, error) {\n\tds := make(map[string]byte)\n\tss, err := ReadList(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, v := range ss {\n\t\tds[v] = 0\n\t}\n\treturn ds, nil\n}\n\nfunc ReadCIDRList(url string) ([]*net.IPNet, error) {\n\tc := make([]*net.IPNet, 0)\n\tl, err := ReadList(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, v := range l {\n\t\t_, in, err := net.ParseCIDR(v)\n\t\tif err != nil {\n\t\t\tLog(Error{\"when\": \"net.ParseCIDR\", \"cidr\": v, \"error\": err.Error()})\n\t\t\tcontinue\n\t\t}\n\t\tc = append(c, in)\n\t}\n\treturn c, nil\n}\n\nfunc ReadList(url string) ([]string, error) {\n\tvar data []byte\n\tvar err error\n\tif strings.HasPrefix(url, \"http://\") || strings.HasPrefix(url, \"https://\") {\n\t\tc := &http.Client{\n\t\t\tTimeout: 9 * time.Second,\n\t\t\tTransport: &http.Transport{\n\t\t\t\tDialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {\n\t\t\t\t\th, p, err := net.SplitHostPort(addr)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn nil, err\n\t\t\t\t\t}\n\t\t\t\t\ts, err := Resolve6(h)\n\t\t\t\t\tif err == nil {\n\t\t\t\t\t\tc, err := net.Dial(network, net.JoinHostPort(s, p))\n\t\t\t\t\t\tif err == nil {\n\t\t\t\t\t\t\treturn c, nil\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ts, err = Resolve4(h)\n\t\t\t\t\tif err == nil {\n\t\t\t\t\t\tc, err := net.Dial(network, net.JoinHostPort(s, p))\n\t\t\t\t\t\tif err == nil {\n\t\t\t\t\t\t\treturn c, nil\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn nil, errors.New(\"Can not fetch \" + addr)\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\tr, err := c.Get(url)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer r.Body.Close()\n\t\tdata, err = io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif !strings.HasPrefix(url, \"http://\") && !strings.HasPrefix(url, \"https://\") {\n\t\tdata, err = os.ReadFile(url)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tdata = bytes.TrimSpace(data)\n\tdata = bytes.Replace(data, []byte{0x20}, []byte{}, -1)\n\tdata = bytes.Replace(data, []byte{0x0d, 0x0a}, []byte{0x0a}, -1)\n\tss := strings.Split(string(data), \"\\n\")\n\treturn ss, nil\n}\n\nfunc ReadData(url string) ([]byte, error) {\n\tvar data []byte\n\tvar err error\n\tif strings.HasPrefix(url, \"http://\") || strings.HasPrefix(url, \"https://\") {\n\t\tc := &http.Client{\n\t\t\tTimeout: 9 * time.Second,\n\t\t\tTransport: &http.Transport{\n\t\t\t\tDialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {\n\t\t\t\t\th, p, err := net.SplitHostPort(addr)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn nil, err\n\t\t\t\t\t}\n\t\t\t\t\ts, err := Resolve6(h)\n\t\t\t\t\tif err == nil {\n\t\t\t\t\t\tc, err := net.Dial(network, net.JoinHostPort(s, p))\n\t\t\t\t\t\tif err == nil {\n\t\t\t\t\t\t\treturn c, nil\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ts, err = Resolve4(h)\n\t\t\t\t\tif err == nil {\n\t\t\t\t\t\tc, err := net.Dial(network, net.JoinHostPort(s, p))\n\t\t\t\t\t\tif err == nil {\n\t\t\t\t\t\t\treturn c, nil\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn nil, errors.New(\"Can not fetch \" + addr)\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\tr, err := c.Get(url)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer r.Body.Close()\n\t\tdata, err = io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif !strings.HasPrefix(url, \"http://\") && !strings.HasPrefix(url, \"https://\") {\n\t\tdata, err = os.ReadFile(url)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn data, nil\n}\n"
        },
        {
          "name": "log.go",
          "type": "blob",
          "size": 0.7216796875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport \"log\"\n\nvar Log func(err error) = func(err error) {\n\tlog.Println(err)\n}\n"
        },
        {
          "name": "nat.go",
          "type": "blob",
          "size": 2.5439453125,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"net\"\n\t\"strings\"\n\t\"sync\"\n)\n\ntype NATTable struct {\n\tTable map[string]string\n\tLock  *sync.Mutex\n}\n\nvar NAT = &NATTable{\n\tTable: map[string]string{},\n\tLock:  &sync.Mutex{},\n}\n\nfunc (n *NATTable) Set(src, dst, addr string) {\n\tn.Lock.Lock()\n\tdefer n.Lock.Unlock()\n\tn.Table[src+dst] = addr\n}\n\nfunc (n *NATTable) Get(src, dst string) string {\n\tn.Lock.Lock()\n\tdefer n.Lock.Unlock()\n\ts, _ := n.Table[src+dst]\n\treturn s\n}\n\nfunc (n *NATTable) Reset() {\n\tn.Lock.Lock()\n\tdefer n.Lock.Unlock()\n\tn.Table = map[string]string{}\n}\n\nvar NATDial func(network string, src, dst, addr string) (net.Conn, error) = func(network string, src, dst, addr string) (net.Conn, error) {\n\ts := NAT.Get(src, dst)\n\tvar c net.Conn\n\tvar err error\n\tif network == \"tcp\" {\n\t\tc, err = DialTCP(network, s, addr)\n\t}\n\tif network == \"udp\" {\n\t\tc, err = DialUDP(network, s, addr)\n\t}\n\tif err != nil {\n\t\tif !strings.Contains(err.Error(), \"address already in use\") && !strings.Contains(err.Error(), \"assign requested address\") {\n\t\t\treturn nil, err\n\t\t}\n\t\tif network == \"tcp\" {\n\t\t\tc, err = DialTCP(network, \"\", addr)\n\t\t}\n\t\tif network == \"udp\" {\n\t\t\tc, err = DialUDP(network, \"\", addr)\n\t\t}\n\t\ts = \"\"\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif s == \"\" {\n\t\tNAT.Set(src, dst, c.LocalAddr().String())\n\t}\n\treturn c, nil\n}\n\nvar NATListenUDP func(network string, src, dst string) (*net.UDPConn, error) = func(network string, src, dst string) (*net.UDPConn, error) {\n\tvar laddr *net.UDPAddr\n\ts := NAT.Get(src, dst)\n\tif s != \"\" {\n\t\tvar err error\n\t\tladdr, err = net.ResolveUDPAddr(\"udp\", s)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tc, err := ListenUDP(\"udp\", laddr)\n\tif err != nil {\n\t\tif !strings.Contains(err.Error(), \"address already in use\") && !strings.Contains(err.Error(), \"assign requested address\") {\n\t\t\treturn nil, err\n\t\t}\n\t\tc, err = ListenUDP(\"udp\", nil)\n\t\ts = \"\"\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif s == \"\" {\n\t\tNAT.Set(src, dst, c.LocalAddr().String())\n\t}\n\treturn c, nil\n}\n"
        },
        {
          "name": "nonce.go",
          "type": "blob",
          "size": 0.7861328125,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport \"encoding/binary\"\n\nfunc NextNonce(b []byte) {\n\ti := binary.LittleEndian.Uint64(b[:8])\n\ti += 1\n\tbinary.LittleEndian.PutUint64(b[:8], i)\n}\n"
        },
        {
          "name": "pac.go",
          "type": "blob",
          "size": 3.900390625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"text/template\"\n\t\"time\"\n\t\"strings\"\n\n\t\"github.com/tdewolff/minify\"\n\t\"github.com/tdewolff/minify/js\"\n)\n\ntype PAC struct {\n\tAddr       string\n\tFile       string\n\tProxy      string\n\tDomainURL  string\n\tDomainData []byte\n\tHTTPServer *http.Server\n\tBody       []byte\n}\n\nfunc NewPAC(addr, file, proxy, domainURL string) *PAC {\n\tp := &PAC{\n\t\tAddr:      addr,\n\t\tFile:      file,\n\t\tProxy:     proxy,\n\t\tDomainURL: domainURL,\n\t}\n\tmux := http.NewServeMux()\n\tmux.Handle(\"/\", p)\n\tp.HTTPServer = &http.Server{\n\t\tAddr:           p.Addr,\n\t\tReadTimeout:    5 * time.Second,\n\t\tWriteTimeout:   10 * time.Second,\n\t\tIdleTimeout:    120 * time.Second,\n\t\tMaxHeaderBytes: 1 << 20,\n\t\tHandler:        mux,\n\t}\n\treturn p\n}\n\nfunc (p *PAC) MakeBody() (io.Reader, error) {\n\tvar err error\n\tl := make([]string, 0)\n\tif p.DomainURL != \"\" {\n\t\tl, err = ReadList(p.DomainURL)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif p.DomainData != nil {\n\t\tb := bytes.TrimSpace(p.DomainData)\n\t\tb = bytes.Replace(b, []byte{0x20}, []byte{}, -1)\n\t\tb = bytes.Replace(b, []byte{0x0d, 0x0a}, []byte{0x0a}, -1)\n\t\tl = strings.Split(string(b), \"\\n\")\n\t}\n\tt := template.New(\"pac\")\n\tt, err = t.Parse(tpl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tb := &bytes.Buffer{}\n\tif err := t.Execute(b, map[string]interface{}{\n\t\t\"proxy\":   p.Proxy,\n\t\t\"domains\": l,\n\t}); err != nil {\n\t\treturn nil, err\n\t}\n\tb1 := &bytes.Buffer{}\n\tm := minify.New()\n\tm.AddFunc(\"application/javascript\", js.Minify)\n\tif err := m.Minify(\"application/javascript\", b1, b); err != nil {\n\t\treturn nil, err\n\t}\n\treturn b1, nil\n}\n\nfunc (p *PAC) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/x-ns-proxy-autoconfig\")\n\tw.Write(p.Body)\n}\n\nfunc (p *PAC) ListenAndServe() error {\n\tr, err := p.MakeBody()\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.Body, err = io.ReadAll(r)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn p.HTTPServer.ListenAndServe()\n}\n\nfunc (p *PAC) Shutdown() error {\n\treturn p.HTTPServer.Shutdown(context.Background())\n}\n\nfunc (p *PAC) WriteToFile() error {\n\tr, err := p.MakeBody()\n\tif err != nil {\n\t\treturn err\n\t}\n\tb, err := io.ReadAll(r)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := os.WriteFile(p.File, b, 0644); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (p *PAC) WriteToStdout() error {\n\tr, err := p.MakeBody()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif _, err := io.Copy(os.Stdout, r); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nvar tpl = `\nvar proxy=\"{{.proxy}}\";\n\nvar domains = {\n\t{{range .domains}}\n\t\"{{.}}\": 1,\n\t{{end}}\n};\n\nfunction ip4todecimal(ip) {\n    var d = ip.split('.');\n    return ((((((+d[0])*256)+(+d[1]))*256)+(+d[2]))*256)+(+d[3]);\n}\n\nfunction FindProxyForURL(url, host){\n    if(/\\d+\\.\\d+\\.\\d+\\.\\d+/.test(host)){\n        if (isInNet(dnsResolve(host), \"10.0.0.0\", \"255.0.0.0\") ||\n                isInNet(dnsResolve(host), \"172.16.0.0\",  \"255.240.0.0\") ||\n                isInNet(dnsResolve(host), \"192.168.0.0\", \"255.255.0.0\") ||\n                isInNet(dnsResolve(host), \"127.0.0.0\", \"255.255.255.0\")){\n            return \"DIRECT\";\n        }\n\t\treturn \"DIRECT\";\n    }\n    if (isPlainHostName(host)){\n        return \"DIRECT\";\n    }\n\n    var a = host.split(\".\");\n    for(var i=a.length-1; i>=0; i--){\n        if (domains.hasOwnProperty(a.slice(i).join(\".\"))){\n\t\t\treturn \"DIRECT\";\n        }\n    }\n\treturn proxy;\n}\n`\n"
        },
        {
          "name": "packetclient.go",
          "type": "blob",
          "size": 3.576171875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"crypto/sha256\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n\t\"github.com/txthinking/x\"\n\t\"golang.org/x/crypto/hkdf\"\n)\n\ntype PacketClient struct {\n\tServer   net.Conn\n\tPassword []byte\n\tRB       []byte\n\tWB       []byte\n\tTimeout  int\n\tsrc      string\n\tdstb     []byte\n}\n\nfunc NewPacketClient(password []byte, src string, server net.Conn, timeout int, dstb []byte) (Exchanger, error) {\n\ts := &PacketClient{Password: password, Server: server, Timeout: timeout, src: src}\n\ts.RB = x.BP65507.Get().([]byte)\n\ts.WB = x.BP65507.Get().([]byte)\n\ts.dstb = dstb\n\treturn ClientGate(s)\n}\n\nfunc (c *PacketClient) Exchange(local net.Conn) error {\n\tgo func() {\n\t\tfor {\n\t\t\tif c.Timeout != 0 {\n\t\t\t\tif err := c.Server.SetDeadline(time.Now().Add(time.Duration(c.Timeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\ti, err := c.Server.Read(c.RB)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif i < 12+16 {\n\t\t\t\tLog(errors.New(\"data too small\"))\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsk := x.BP32.Get().([]byte)\n\t\t\tif _, err := io.ReadFull(hkdf.New(sha256.New, c.Password, c.RB[:12], ServerHKDFInfo), sk); err != nil {\n\t\t\t\tx.BP32.Put(sk)\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsb, err := aes.NewCipher(sk)\n\t\t\tif err != nil {\n\t\t\t\tx.BP32.Put(sk)\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tx.BP32.Put(sk)\n\t\t\tsa, err := cipher.NewGCM(sb)\n\t\t\tif err != nil {\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif _, err := sa.Open(c.RB[:12], c.RB[:12], c.RB[12:i], nil); err != nil {\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, h, _, err := socks5.ParseBytesAddress(c.RB[12:])\n\t\t\tif err != nil {\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, err = local.Write(c.RB[12+1+len(h)+2 : i-16])\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tif c.Timeout != 0 {\n\t\t\tif err := local.SetDeadline(time.Now().Add(time.Duration(c.Timeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tcopy(c.WB[12+4:12+4+len(c.dstb)], c.dstb)\n\t\tl, err := local.Read(c.WB[12+4+len(c.dstb) : 65507-16])\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tif _, err := io.ReadFull(rand.Reader, c.WB[:12]); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbinary.BigEndian.PutUint32(c.WB[12:12+4], uint32(time.Now().Unix()))\n\t\tck := x.BP32.Get().([]byte)\n\t\tif _, err := io.ReadFull(hkdf.New(sha256.New, c.Password, c.WB[:12], ClientHKDFInfo), ck); err != nil {\n\t\t\tx.BP32.Put(ck)\n\t\t\treturn err\n\t\t}\n\t\tcb, err := aes.NewCipher(ck)\n\t\tif err != nil {\n\t\t\tx.BP32.Put(ck)\n\t\t\treturn err\n\t\t}\n\t\tx.BP32.Put(ck)\n\t\tca, err := cipher.NewGCM(cb)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tca.Seal(c.WB[:12], c.WB[:12], c.WB[12:12+4+len(c.dstb)+l], nil)\n\t\t_, err = c.Server.Write(c.WB[:12+4+len(c.dstb)+l+16])\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *PacketClient) Clean() {\n\tx.BP65507.Put(s.RB)\n\tx.BP65507.Put(s.WB)\n}\n\nfunc (s *PacketClient) Network() string {\n\treturn \"udp\"\n}\n\nfunc (s *PacketClient) Src() string {\n\treturn s.src\n}\n\nfunc (s *PacketClient) Dst() string {\n\treturn socks5.ToAddress(s.dstb[0], s.dstb[1:len(s.dstb)-2], s.dstb[len(s.dstb)-2:])\n}\n"
        },
        {
          "name": "packetconn.go",
          "type": "blob",
          "size": 3.2216796875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n)\n\ntype PacketConnFactory struct {\n\tConns map[string]*PacketConn\n\tLock  *sync.Mutex\n}\n\nfunc NewPacketConnFactory() *PacketConnFactory {\n\treturn &PacketConnFactory{\n\t\tConns: make(map[string]*PacketConn),\n\t\tLock:  &sync.Mutex{},\n\t}\n}\n\nfunc (f *PacketConnFactory) Handle(addr *net.UDPAddr, dstb, data []byte, w func([]byte) (int, error), timeout int) (net.Conn, error) {\n\tdst := socks5.ToAddress(dstb[0], dstb[1:len(dstb)-2], dstb[len(dstb)-2:])\n\tf.Lock.Lock()\n\tc, ok := f.Conns[addr.String()+dst]\n\tf.Lock.Unlock()\n\tif ok {\n\t\t_ = c.In(data)\n\t\treturn nil, nil\n\t}\n\tf.Lock.Lock()\n\tc = NewPacketConn(data, w, timeout, func() {\n\t\tf.Lock.Lock()\n\t\tdelete(f.Conns, addr.String()+dst)\n\t\tf.Lock.Unlock()\n\t})\n\tf.Conns[addr.String()+dst] = c\n\tf.Lock.Unlock()\n\treturn c, nil\n}\n\ntype PacketConn struct {\n\tFirst   []byte\n\tInCh    chan []byte\n\tDone    chan byte\n\tW       func([]byte) (int, error)\n\tClean   func()\n\tTimeout int\n}\n\nfunc NewPacketConn(fb []byte, w func([]byte) (int, error), timeout int, clean func()) *PacketConn {\n\tc := &PacketConn{\n\t\tInCh:    make(chan []byte),\n\t\tDone:    make(chan byte),\n\t\tW:       w,\n\t\tFirst:   fb,\n\t\tClean:   clean,\n\t\tTimeout: timeout,\n\t}\n\treturn c\n}\n\nfunc (c *PacketConn) In(b []byte) error {\n\tselect {\n\tcase c.InCh <- b:\n\t\treturn nil\n\tcase <-c.Done:\n\t\treturn errors.New(\"closed\")\n\t}\n\treturn nil\n}\n\nfunc (c *PacketConn) Read(b []byte) (int, error) {\n\tif c.First != nil {\n\t\ti := copy(b, c.First)\n\t\tc.First = nil\n\t\treturn i, nil\n\t}\n\ttm := time.NewTimer(time.Duration(c.Timeout) * time.Second)\n\tdefer tm.Stop()\n\tselect {\n\tcase <-tm.C:\n\t\treturn 0, errors.New(\"timeout\")\n\tcase bb := <-c.InCh:\n\t\ti := copy(b, bb)\n\t\treturn i, nil\n\tcase <-c.Done:\n\t\treturn 0, errors.New(\"closed\")\n\t}\n\treturn 0, nil\n}\n\nfunc (c *PacketConn) Write(b []byte) (int, error) {\n\tselect {\n\tcase <-c.Done:\n\t\treturn 0, errors.New(\"closed\")\n\tdefault:\n\t\treturn c.W(b)\n\t}\n\treturn 0, nil\n}\n\nfunc (c *PacketConn) Close() error {\n\tselect {\n\tcase <-c.Done:\n\tdefault:\n\t\tc.Clean()\n\t\tclose(c.Done)\n\t}\n\treturn nil\n}\n\nfunc (c *PacketConn) LocalAddr() net.Addr {\n\tpanic(\"no\")\n\treturn nil\n}\n\nfunc (c *PacketConn) RemoteAddr() net.Addr {\n\tpanic(\"no\")\n\treturn nil\n}\n\nfunc (c *PacketConn) SetDeadline(t time.Time) error {\n\treturn nil\n}\n\nfunc (c *PacketConn) SetReadDeadline(t time.Time) error {\n\treturn nil\n}\n\nfunc (c *PacketConn) SetWriteDeadline(t time.Time) error {\n\treturn nil\n}\n\ntype ConnFirst struct {\n\t*net.UDPConn\n\tFirst []byte\n}\n\nfunc (c *ConnFirst) Read(b []byte) (int, error) {\n\tif c.First != nil {\n\t\ti := copy(b, c.First)\n\t\tc.First = nil\n\t\treturn i, nil\n\t}\n\treturn c.UDPConn.Read(b)\n}\n"
        },
        {
          "name": "packetserver.go",
          "type": "blob",
          "size": 2.861328125,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"crypto/sha256\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n\t\"github.com/txthinking/x\"\n\t\"golang.org/x/crypto/hkdf\"\n)\n\ntype PacketServer struct {\n\tClient   net.Conn\n\tPassword []byte\n\tRB       []byte\n\tWB       []byte\n\tTimeout  int\n\tsrc      string\n\tdstb     []byte\n}\n\nfunc NewPacketServer(password []byte, src string, client net.Conn, timeout int, dstb []byte) (Exchanger, error) {\n\ts := &PacketServer{Password: password, Client: client, Timeout: timeout, src: src}\n\ts.RB = x.BP65507.Get().([]byte)\n\ts.WB = x.BP65507.Get().([]byte)\n\ts.dstb = dstb\n\treturn ServerGate(s)\n}\n\nfunc (s *PacketServer) Exchange(remote net.Conn) error {\n\tgo func() {\n\t\tfor {\n\t\t\tif s.Timeout != 0 {\n\t\t\t\tif err := remote.SetDeadline(time.Now().Add(time.Duration(s.Timeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tcopy(s.WB[12:12+len(s.dstb)], s.dstb)\n\t\t\tl, err := remote.Read(s.WB[12+len(s.dstb) : 65507-16])\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif _, err := io.ReadFull(rand.Reader, s.WB[:12]); err != nil {\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsk := x.BP32.Get().([]byte)\n\t\t\tif _, err := io.ReadFull(hkdf.New(sha256.New, s.Password, s.WB[:12], ServerHKDFInfo), sk); err != nil {\n\t\t\t\tx.BP32.Put(sk)\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsb, err := aes.NewCipher(sk)\n\t\t\tif err != nil {\n\t\t\t\tx.BP32.Put(sk)\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tx.BP32.Put(sk)\n\t\t\tsa, err := cipher.NewGCM(sb)\n\t\t\tif err != nil {\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsa.Seal(s.WB[:12], s.WB[:12], s.WB[12:12+len(s.dstb)+l], nil)\n\t\t\t_, err = s.Client.Write(s.WB[:12+len(s.dstb)+l+16])\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tif s.Timeout != 0 {\n\t\t\tif err := s.Client.SetDeadline(time.Now().Add(time.Duration(s.Timeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tl, err := s.Client.Read(s.RB)\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tif _, err := remote.Write(s.RB[:l]); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *PacketServer) Clean() {\n\tx.BP65507.Put(s.RB)\n\tx.BP65507.Put(s.WB)\n}\n\nfunc (s *PacketServer) Network() string {\n\treturn \"udp\"\n}\n\nfunc (s *PacketServer) Src() string {\n\treturn s.src\n}\n\nfunc (s *PacketServer) Dst() string {\n\treturn socks5.ToAddress(s.dstb[0], s.dstb[1:len(s.dstb)-2], s.dstb[len(s.dstb)-2:])\n}\n"
        },
        {
          "name": "packetserverconn.go",
          "type": "blob",
          "size": 2.5322265625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/sha256\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n\t\"github.com/txthinking/x\"\n\t\"golang.org/x/crypto/hkdf\"\n)\n\ntype PacketServerConnFactory struct {\n\tConns map[string]*PacketConn\n\tLock  *sync.Mutex\n}\n\nfunc NewPacketServerConnFactory() *PacketServerConnFactory {\n\treturn &PacketServerConnFactory{\n\t\tConns: make(map[string]*PacketConn),\n\t\tLock:  &sync.Mutex{},\n\t}\n}\n\nfunc (f *PacketServerConnFactory) Handle(addr *net.UDPAddr, b, p []byte, w func([]byte) (int, error), timeout int) (net.Conn, []byte, error) {\n\tif len(b) < 12+4+16 {\n\t\treturn nil, nil, errors.New(\"data too small\")\n\t}\n\tck := x.BP32.Get().([]byte)\n\tif _, err := io.ReadFull(hkdf.New(sha256.New, p, b[:12], ClientHKDFInfo), ck); err != nil {\n\t\tx.BP32.Put(ck)\n\t\treturn nil, nil, err\n\t}\n\n\tcb, err := aes.NewCipher(ck)\n\tif err != nil {\n\t\tx.BP32.Put(ck)\n\t\treturn nil, nil, err\n\t}\n\tx.BP32.Put(ck)\n\tca, err := cipher.NewGCM(cb)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tif _, err := ca.Open(b[:12], b[:12], b[12:], nil); err != nil {\n\t\treturn nil, nil, err\n\t}\n\ti := int64(binary.BigEndian.Uint32(b[12 : 12+4]))\n\tif time.Now().Unix()-i > 60 {\n\t\treturn nil, nil, errors.New(\"Expired request\")\n\t}\n\ta, h, p, err := socks5.ParseBytesAddress(b[12+4:])\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tif 12+4+1+len(h)+2 >= len(b)-16 {\n\t\treturn nil, nil, errors.New(fmt.Sprintf(\"invalid packet. length: %d address: %#x %#x %#x\", len(b), a, h, p))\n\t}\n\tdst := socks5.ToAddress(a, h, p)\n\tf.Lock.Lock()\n\tc, ok := f.Conns[addr.String()+dst]\n\tf.Lock.Unlock()\n\tif ok {\n\t\t_ = c.In(b[12+4+1+len(h)+2 : len(b)-16])\n\t\treturn nil, nil, nil\n\t}\n\tf.Lock.Lock()\n\tc = NewPacketConn(b[12+4+1+len(h)+2:len(b)-16], w, timeout, func() {\n\t\tf.Lock.Lock()\n\t\tdelete(f.Conns, addr.String()+dst)\n\t\tf.Lock.Unlock()\n\t})\n\tf.Conns[addr.String()+dst] = c\n\tf.Lock.Unlock()\n\treturn c, b[12+4 : 12+4+1+len(h)+2], nil\n}\n"
        },
        {
          "name": "ping",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "programmable",
          "type": "tree",
          "content": null
        },
        {
          "name": "protocol",
          "type": "tree",
          "content": null
        },
        {
          "name": "quic.go",
          "type": "blob",
          "size": 3.8095703125,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/quic-go/quic-go\"\n)\n\nfunc QUICDialUDP(src, dst, addr string, tc *tls.Config, idleTime int) (net.Conn, error) {\n\tvar rc *net.UDPConn\n\tvar err error\n\tif src == \"\" || dst == \"\" {\n\t\trc, err = ListenUDP(\"udp\", nil)\n\t}\n\tif src != \"\" && dst != \"\" {\n\t\trc, err = NATListenUDP(\"udp\", src, dst)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\traddr, err := Resolve(\"udp\", addr)\n\tif err != nil {\n\t\trc.Close()\n\t\treturn nil, err\n\t}\n\trc1, err := quic.Dial(context.Background(), rc, raddr, tc, &quic.Config{MaxIdleTimeout: time.Duration(idleTime) * time.Second, EnableDatagrams: true})\n\tif err != nil {\n\t\trc.Close()\n\t\treturn nil, err\n\t}\n\treturn &QUICConn{\n\t\tUDPConn: rc,\n\t\tConn:    rc1,\n\t\tLAddr:   rc1.LocalAddr(),\n\t\tRAddr:   rc1.RemoteAddr(),\n\t}, nil\n}\n\nfunc QUICDialTCP(src, dst, addr string, tc *tls.Config, idleTime int) (net.Conn, error) {\n\tvar rc *net.UDPConn\n\tvar err error\n\tif src == \"\" || dst == \"\" {\n\t\trc, err = ListenUDP(\"udp\", nil)\n\t}\n\tif src != \"\" && dst != \"\" {\n\t\trc, err = NATListenUDP(\"udp\", src, dst)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\traddr, err := Resolve(\"udp\", addr)\n\tif err != nil {\n\t\trc.Close()\n\t\treturn nil, err\n\t}\n\trc1, err := quic.Dial(context.Background(), rc, raddr, tc, &quic.Config{MaxIdleTimeout: time.Duration(idleTime) * time.Second})\n\tif err != nil {\n\t\trc.Close()\n\t\treturn nil, err\n\t}\n\ts, err := rc1.OpenStreamSync(context.Background())\n\tif err != nil {\n\t\trc1.CloseWithError(0, err.Error())\n\t\trc.Close()\n\t\treturn nil, err\n\t}\n\treturn &QUICConn{\n\t\tUDPConn: rc,\n\t\tConn:    rc1,\n\t\tStream:  s,\n\t\tLAddr: &net.TCPAddr{\n\t\t\tIP:   rc1.LocalAddr().(*net.UDPAddr).IP,\n\t\t\tPort: rc1.LocalAddr().(*net.UDPAddr).Port,\n\t\t\tZone: rc1.LocalAddr().(*net.UDPAddr).Zone,\n\t\t},\n\t\tRAddr: &net.TCPAddr{\n\t\t\tIP:   rc1.RemoteAddr().(*net.UDPAddr).IP,\n\t\t\tPort: rc1.RemoteAddr().(*net.UDPAddr).Port,\n\t\t\tZone: rc1.RemoteAddr().(*net.UDPAddr).Zone,\n\t\t},\n\t}, nil\n}\n\ntype QUICConn struct {\n\tUDPConn *net.UDPConn\n\tConn    quic.Connection\n\tStream  quic.Stream\n\tLAddr   net.Addr\n\tRAddr   net.Addr\n}\n\nfunc (c *QUICConn) Read(b []byte) (int, error) {\n\tif c.Stream != nil {\n\t\treturn c.Stream.Read(b)\n\t}\n\tb1, err := c.Conn.ReceiveDatagram(context.Background())\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\ti := copy(b, b1)\n\treturn i, nil\n}\n\nfunc (c *QUICConn) Write(b []byte) (int, error) {\n\tif c.Stream != nil {\n\t\treturn c.Stream.Write(b)\n\t}\n\tif err := c.Conn.SendDatagram(b); err != nil {\n\t\treturn 0, err\n\t}\n\treturn len(b), nil\n}\n\nfunc (c *QUICConn) Close() error {\n\tif c.Stream != nil {\n\t\tc.Stream.CancelRead(0)\n\t\tc.Stream.Close()\n\t}\n\tif c.Conn != nil {\n\t\tc.Conn.CloseWithError(0, \"close\")\n\t}\n\tif c.UDPConn != nil {\n\t\tc.UDPConn.Close()\n\t}\n\treturn nil\n}\n\nfunc (c *QUICConn) LocalAddr() net.Addr {\n\treturn c.LAddr\n}\n\nfunc (c *QUICConn) RemoteAddr() net.Addr {\n\treturn c.RAddr\n}\n\nfunc (c *QUICConn) SetDeadline(t time.Time) error {\n\tif c.Stream != nil {\n\t\treturn c.Stream.SetDeadline(t)\n\t}\n\t// prefer quic.Config.MaxIdleTimeout\n\treturn nil\n}\n\nfunc (c *QUICConn) SetReadDeadline(t time.Time) error {\n\tif c.Stream != nil {\n\t\treturn c.Stream.SetReadDeadline(t)\n\t}\n\treturn nil\n}\n\nfunc (c *QUICConn) SetWriteDeadline(t time.Time) error {\n\tif c.Stream != nil {\n\t\treturn c.Stream.SetWriteDeadline(t)\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "quicclient.go",
          "type": "blob",
          "size": 4.9306640625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"net\"\n\t\"net/url\"\n\t\"os/exec\"\n\t\"runtime\"\n\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/txthinking/socks5\"\n)\n\ntype QUICClient struct {\n\tServer            *socks5.Server\n\tServerHost        string\n\tServerAddress     string\n\tTLSConfig         *tls.Config\n\tPassword          []byte\n\tTCPTimeout        int\n\tUDPTimeout        int\n\tWithoutBrook      bool\n\tPacketConnFactory *PacketConnFactory\n}\n\nfunc NewQUICClient(addr, ip, server, password string, tcpTimeout, udpTimeout int, withoutbrook bool) (*QUICClient, error) {\n\ts5, err := socks5.NewClassicServer(addr, ip, \"\", \"\", tcpTimeout, udpTimeout)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tu, err := url.Parse(server)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\tif runtime.GOOS == \"linux\" {\n\t\tc := exec.Command(\"sysctl\", \"-w\", \"net.core.rmem_max=2500000\")\n\t\tb, err := c.CombinedOutput()\n\t\tif err != nil {\n\t\t\tLog(Error{\"when\": \"try to raise UDP Receive Buffer Size\", \"warning\": string(b)})\n\t\t}\n\t}\n\tif runtime.GOOS == \"darwin\" {\n\t\tc := exec.Command(\"sysctl\", \"-w\", \"kern.ipc.maxsockbuf=3014656\")\n\t\tb, err := c.CombinedOutput()\n\t\tif err != nil {\n\t\t\tLog(Error{\"when\": \"try to raise UDP Receive Buffer Size\", \"warning\": string(b)})\n\t\t}\n\t}\n\tp := []byte(password)\n\tif withoutbrook {\n\t\tp, err = SHA256Bytes([]byte(password))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tx := &QUICClient{\n\t\tServerHost:        u.Host,\n\t\tServer:            s5,\n\t\tPassword:          p,\n\t\tTCPTimeout:        tcpTimeout,\n\t\tUDPTimeout:        udpTimeout,\n\t\tWithoutBrook:      withoutbrook,\n\t\tPacketConnFactory: NewPacketConnFactory(),\n\t}\n\th, _, err := net.SplitHostPort(u.Host)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx.TLSConfig = &tls.Config{ServerName: h, NextProtos: []string{\"h3\"}}\n\treturn x, nil\n}\n\nfunc (x *QUICClient) ListenAndServe() error {\n\treturn x.Server.ListenAndServe(x)\n}\n\nfunc (x *QUICClient) TCPHandle(s *socks5.Server, c *net.TCPConn, r *socks5.Request) error {\n\tif r.Cmd == socks5.CmdConnect {\n\t\tsa := x.ServerAddress\n\t\tif sa == \"\" {\n\t\t\tsa = x.ServerHost\n\t\t}\n\t\trc, err := QUICDialTCP(\"\", \"\", sa, x.TLSConfig, x.TCPTimeout)\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\tdefer rc.Close()\n\t\tdst := make([]byte, 0, 1+len(r.DstAddr)+2)\n\t\tdst = append(dst, r.Atyp)\n\t\tdst = append(dst, r.DstAddr...)\n\t\tdst = append(dst, r.DstPort...)\n\t\tvar sc Exchanger\n\t\tif !x.WithoutBrook {\n\t\t\tsc, err = NewStreamClient(\"tcp\", x.Password, c.RemoteAddr().String(), rc, x.TCPTimeout, dst)\n\t\t}\n\t\tif x.WithoutBrook {\n\t\t\tsc, err = NewSimpleStreamClient(\"tcp\", x.Password, c.RemoteAddr().String(), rc, x.TCPTimeout, dst)\n\t\t}\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\tdefer sc.Clean()\n\t\ta, address, port, err := socks5.ParseAddress(rc.LocalAddr().String())\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\trp := socks5.NewReply(socks5.RepSuccess, a, address, port)\n\t\tif _, err := rp.WriteTo(c); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := sc.Exchange(c); err != nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn nil\n\t}\n\tif r.Cmd == socks5.CmdUDP {\n\t\t_, err := r.UDP(c, x.Server.ServerAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\treturn socks5.ErrUnsupportCmd\n}\n\nfunc (x *QUICClient) UDPHandle(s *socks5.Server, addr *net.UDPAddr, d *socks5.Datagram) error {\n\tif 12+4+1+len(d.DstAddr)+2+len(d.Data)+16 > 1197 {\n\t\treturn errors.New(\"quic max datagram size is 1197\")\n\t}\n\tdstb := append(append([]byte{d.Atyp}, d.DstAddr...), d.DstPort...)\n\tconn, err := x.PacketConnFactory.Handle(addr, dstb, d.Data, func(b []byte) (int, error) {\n\t\td.Data = b\n\t\treturn s.UDPConn.WriteToUDP(d.Bytes(), addr)\n\t}, x.UDPTimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif conn == nil {\n\t\treturn nil\n\t}\n\tdefer conn.Close()\n\tsa := x.ServerAddress\n\tif sa == \"\" {\n\t\tsa = x.ServerHost\n\t}\n\trc, err := QUICDialUDP(addr.String(), d.Address(), sa, x.TLSConfig, x.UDPTimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tvar sc Exchanger\n\tif !x.WithoutBrook {\n\t\tsc, err = NewPacketClient(x.Password, addr.String(), rc, x.UDPTimeout, dstb)\n\t}\n\tif x.WithoutBrook {\n\t\tsc, err = NewSimplePacketClient(x.Password, addr.String(), rc, x.UDPTimeout, dstb)\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sc.Clean()\n\tif err := sc.Exchange(conn); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (x *QUICClient) Shutdown() error {\n\treturn x.Server.Shutdown()\n}\n"
        },
        {
          "name": "quicserver.go",
          "type": "blob",
          "size": 7.8916015625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"net\"\n\t\"net/http\"\n\t\"os/exec\"\n\t\"runtime\"\n\t\"time\"\n\n\t\"github.com/quic-go/quic-go\"\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/txthinking/runnergroup\"\n\t\"github.com/txthinking/socks5\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\ntype QUICServer struct {\n\tPassword             []byte\n\tDomain               string\n\tAddr                 string\n\tTCPTimeout           int\n\tUDPTimeout           int\n\tCert                 []byte\n\tCertKey              []byte\n\tRunnerGroup          *runnergroup.RunnerGroup\n\tWithoutBrook         bool\n\tUDPServerConnFactory UDPServerConnFactory\n}\n\nfunc NewQUICServer(addr, password, domain string, tcpTimeout, udpTimeout int, withoutbrook bool) (*QUICServer, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\tif runtime.GOOS == \"linux\" {\n\t\tc := exec.Command(\"sysctl\", \"-w\", \"net.core.rmem_max=2500000\")\n\t\tb, err := c.CombinedOutput()\n\t\tif err != nil {\n\t\t\tLog(Error{\"when\": \"try to raise UDP Receive Buffer Size\", \"warning\": string(b)})\n\t\t}\n\t}\n\tif runtime.GOOS == \"darwin\" {\n\t\tc := exec.Command(\"sysctl\", \"-w\", \"kern.ipc.maxsockbuf=3014656\")\n\t\tb, err := c.CombinedOutput()\n\t\tif err != nil {\n\t\t\tLog(Error{\"when\": \"try to raise UDP Receive Buffer Size\", \"warning\": string(b)})\n\t\t}\n\t}\n\tvar p []byte\n\tvar f UDPServerConnFactory\n\tif !withoutbrook {\n\t\tp = []byte(password)\n\t\tf = NewPacketServerConnFactory()\n\t}\n\tif withoutbrook {\n\t\tvar err error\n\t\tp, err = SHA256Bytes([]byte(password))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tf = NewSimplePacketServerConnFactory()\n\t}\n\ts := &QUICServer{\n\t\tPassword:             p,\n\t\tDomain:               domain,\n\t\tAddr:                 addr,\n\t\tTCPTimeout:           tcpTimeout,\n\t\tUDPTimeout:           udpTimeout,\n\t\tUDPServerConnFactory: f,\n\t\tRunnerGroup:          runnergroup.New(),\n\t\tWithoutBrook:         withoutbrook,\n\t}\n\treturn s, nil\n}\n\nfunc (s *QUICServer) ListenAndServe() error {\n\tvar t *tls.Config\n\tif s.Cert == nil || s.CertKey == nil {\n\t\tm := autocert.Manager{\n\t\t\tCache:      autocert.DirCache(\".letsencrypt\"),\n\t\t\tPrompt:     autocert.AcceptTOS,\n\t\t\tHostPolicy: autocert.HostWhitelist(s.Domain),\n\t\t\tEmail:      \"cloud@txthinking.com\",\n\t\t}\n\t\tserver := &http.Server{Addr: \":80\", Handler: m.HTTPHandler(nil)}\n\t\ts.RunnerGroup.Add(&runnergroup.Runner{\n\t\t\tStart: func() error {\n\t\t\t\treturn server.ListenAndServe()\n\t\t\t},\n\t\t\tStop: func() error {\n\t\t\t\treturn server.Shutdown(context.Background())\n\t\t\t},\n\t\t})\n\t\tt = &tls.Config{GetCertificate: m.GetCertificate, ServerName: s.Domain, NextProtos: []string{\"h3\"}}\n\t}\n\tif s.Cert != nil && s.CertKey != nil {\n\t\tct, err := tls.X509KeyPair(s.Cert, s.CertKey)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tt = &tls.Config{Certificates: []tls.Certificate{ct}, ServerName: s.Domain, NextProtos: []string{\"h3\"}}\n\t}\n\tl, err := quic.ListenAddr(s.Addr, t, &quic.Config{MaxIdleTimeout: time.Duration(s.UDPTimeout) * time.Second, EnableDatagrams: true})\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.RunnerGroup.Add(&runnergroup.Runner{\n\t\tStart: func() error {\n\t\t\tfor {\n\t\t\t\tc, err := l.Accept(context.Background())\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tgo func(c quic.Connection) {\n\t\t\t\t\tdefer c.CloseWithError(0, \"defer\")\n\t\t\t\t\tfor {\n\t\t\t\t\t\tst, err := c.AcceptStream(context.Background())\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgo func(c net.Conn) {\n\t\t\t\t\t\t\tdefer c.Close()\n\t\t\t\t\t\t\tvar ss Exchanger\n\t\t\t\t\t\t\tif !s.WithoutBrook {\n\t\t\t\t\t\t\t\tss, err = NewStreamServer(s.Password, c.RemoteAddr().String(), c, s.TCPTimeout, s.UDPTimeout)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif s.WithoutBrook {\n\t\t\t\t\t\t\t\tss, err = NewSimpleStreamServer(s.Password, c.RemoteAddr().String(), c, s.TCPTimeout, s.UDPTimeout)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"error\": err.Error()})\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdefer ss.Clean()\n\t\t\t\t\t\t\tif ss.Network() == \"tcp\" {\n\t\t\t\t\t\t\t\tif err := s.TCPHandle(ss); err != nil {\n\t\t\t\t\t\t\t\t\tLog(Error{\"from\": ss.Src(), \"dst\": ss.Dst(), \"error\": err.Error()})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ss.Network() == \"udp\" {\n\t\t\t\t\t\t\t\tif err := s.UDPOverTCPHandle(ss); err != nil {\n\t\t\t\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"dst\": ss.Dst(), \"error\": err.Error()})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}(&QUICConn{\n\t\t\t\t\t\t\tConn:   c,\n\t\t\t\t\t\t\tStream: st,\n\t\t\t\t\t\t\tLAddr: &net.TCPAddr{\n\t\t\t\t\t\t\t\tIP:   c.LocalAddr().(*net.UDPAddr).IP,\n\t\t\t\t\t\t\t\tPort: c.LocalAddr().(*net.UDPAddr).Port,\n\t\t\t\t\t\t\t\tZone: c.LocalAddr().(*net.UDPAddr).Zone,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRAddr: &net.TCPAddr{\n\t\t\t\t\t\t\t\tIP:   c.RemoteAddr().(*net.UDPAddr).IP,\n\t\t\t\t\t\t\t\tPort: c.RemoteAddr().(*net.UDPAddr).Port,\n\t\t\t\t\t\t\t\tZone: c.RemoteAddr().(*net.UDPAddr).Zone,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}(c)\n\t\t\t\tif c.ConnectionState().SupportsDatagrams {\n\t\t\t\t\tgo func(c quic.Connection) {\n\t\t\t\t\t\tdefer c.CloseWithError(0, \"defer\")\n\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\tb, err := c.ReceiveDatagram(context.Background())\n\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconn, dstb, err := s.UDPServerConnFactory.Handle(c.RemoteAddr().(*net.UDPAddr), b, s.Password, func(b []byte) (int, error) {\n\t\t\t\t\t\t\t\tif len(b) > 1197 {\n\t\t\t\t\t\t\t\t\terr := errors.New(\"when write to client, quic max datagram size is 1197\")\n\t\t\t\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"error\": err.Error()})\n\t\t\t\t\t\t\t\t\treturn 0, err\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif err := c.SendDatagram(b); err != nil {\n\t\t\t\t\t\t\t\t\treturn 0, err\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn len(b), nil\n\t\t\t\t\t\t\t}, s.UDPTimeout)\n\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"error\": err.Error()})\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif conn == nil {\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgo func() {\n\t\t\t\t\t\t\t\tdefer conn.Close()\n\t\t\t\t\t\t\t\tvar ss Exchanger\n\t\t\t\t\t\t\t\tif !s.WithoutBrook {\n\t\t\t\t\t\t\t\t\tss, err = NewPacketServer(s.Password, c.RemoteAddr().String(), conn, s.UDPTimeout, dstb)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif s.WithoutBrook {\n\t\t\t\t\t\t\t\t\tss, err = NewSimplePacketServer(s.Password, c.RemoteAddr().String(), conn, s.UDPTimeout, dstb)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"dst\": socks5.ToAddress(dstb[0], dstb[1:len(dstb)-2], dstb[len(dstb)-2:]), \"error\": err.Error()})\n\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdefer ss.Clean()\n\t\t\t\t\t\t\t\tif err := s.UDPHandle(ss); err != nil {\n\t\t\t\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"dst\": socks5.ToAddress(dstb[0], dstb[1:len(dstb)-2], dstb[len(dstb)-2:]), \"error\": err.Error()})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t}\n\t\t\t\t\t}(c)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tStop: func() error {\n\t\t\treturn l.Close()\n\t\t},\n\t})\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second)\n\t\t_, _ = quic.DialAddr(context.Background(), net.JoinHostPort(s.Domain, s.Addr[1:]), &tls.Config{NextProtos: []string{\"h3\"}}, nil)\n\t}()\n\treturn s.RunnerGroup.Wait()\n}\n\nfunc (s *QUICServer) TCPHandle(ss Exchanger) error {\n\trc, err := DialTCP(\"tcp\", \"\", ss.Dst())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tif err := ss.Exchange(rc); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (s *QUICServer) UDPOverTCPHandle(ss Exchanger) error {\n\trc, err := NATDial(\"udp\", ss.Src(), ss.Dst(), ss.Dst())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tif err := ss.Exchange(rc); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (s *QUICServer) UDPHandle(ss Exchanger) error {\n\trc, err := NATDial(\"udp\", ss.Src(), ss.Dst(), ss.Dst())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tif err := ss.Exchange(rc); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (s *QUICServer) Shutdown() error {\n\treturn s.RunnerGroup.Done()\n}\n"
        },
        {
          "name": "relay.go",
          "type": "blob",
          "size": 4.8681640625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/miekg/dns\"\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/txthinking/runnergroup\"\n\t\"github.com/txthinking/socks5\"\n)\n\ntype Relay struct {\n\tFrom        string\n\tTo          string\n\tDstb        []byte\n\tTCPTimeout  int\n\tUDPTimeout  int\n\tPcf         *PacketConnFactory\n\tRunnerGroup *runnergroup.RunnerGroup\n\tIsDNS       bool\n}\n\nfunc NewRelay(from, to string, tcpTimeout, udpTimeout int) (*Relay, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\ta, h, p, err := socks5.ParseAddress(to)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := &Relay{\n\t\tFrom:        from,\n\t\tTo:          to,\n\t\tDstb:        append(append([]byte{a}, h...), p...),\n\t\tTCPTimeout:  tcpTimeout,\n\t\tUDPTimeout:  udpTimeout,\n\t\tPcf:         NewPacketConnFactory(),\n\t\tRunnerGroup: runnergroup.New(),\n\t}\n\treturn s, nil\n}\n\nfunc (s *Relay) ListenAndServe() error {\n\taddr, err := net.ResolveTCPAddr(\"tcp\", s.From)\n\tif err != nil {\n\t\treturn err\n\t}\n\tl, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.RunnerGroup.Add(&runnergroup.Runner{\n\t\tStart: func() error {\n\t\t\tfor {\n\t\t\t\tc, err := l.AcceptTCP()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tgo func(c *net.TCPConn) {\n\t\t\t\t\tdefer c.Close()\n\t\t\t\t\tif err := s.TCPHandle(c); err != nil {\n\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"error\": err.Error()})\n\t\t\t\t\t}\n\t\t\t\t}(c)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tStop: func() error {\n\t\t\treturn l.Close()\n\t\t},\n\t})\n\taddr1, err := net.ResolveUDPAddr(\"udp\", s.From)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn err\n\t}\n\tl1, err := net.ListenUDP(\"udp\", addr1)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn err\n\t}\n\ts.RunnerGroup.Add(&runnergroup.Runner{\n\t\tStart: func() error {\n\t\t\tfor {\n\t\t\t\tb := make([]byte, 65507)\n\t\t\t\tn, addr, err := l1.ReadFromUDP(b)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tgo func(addr *net.UDPAddr, b []byte) {\n\t\t\t\t\tif err := s.UDPHandle(addr, b, l1); err != nil {\n\t\t\t\t\t\tLog(Error{\"from\": addr.String(), \"error\": err.Error()})\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}(addr, b[0:n])\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tStop: func() error {\n\t\t\treturn l1.Close()\n\t\t},\n\t})\n\treturn s.RunnerGroup.Wait()\n}\n\nfunc (s *Relay) TCPHandle(c *net.TCPConn) error {\n\trc, err := DialTCP(\"tcp\", \"\", s.To)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tgo func() {\n\t\tvar bf [1024 * 2]byte\n\t\tfor {\n\t\t\tif s.TCPTimeout != 0 {\n\t\t\t\tif err := rc.SetDeadline(time.Now().Add(time.Duration(s.TCPTimeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\ti, err := rc.Read(bf[:])\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif _, err := c.Write(bf[0:i]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tvar bf [1024 * 2]byte\n\tfor {\n\t\tif s.TCPTimeout != 0 {\n\t\t\tif err := c.SetDeadline(time.Now().Add(time.Duration(s.TCPTimeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\ti, err := c.Read(bf[:])\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tif _, err := rc.Write(bf[0:i]); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *Relay) UDPHandle(addr *net.UDPAddr, b []byte, l1 *net.UDPConn) error {\n\tif s.IsDNS {\n\t\tm := &dns.Msg{}\n\t\tif err := m.Unpack(b); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif len(m.Question) == 0 {\n\t\t\treturn errors.New(\"no question\")\n\t\t}\n\t\tdone, err := DNSGate(addr, m, l1)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif done {\n\t\t\treturn nil\n\t\t}\n\t}\n\tc, err := s.Pcf.Handle(addr, s.Dstb, b, func(b []byte) (int, error) {\n\t\treturn l1.WriteToUDP(b, addr)\n\t}, s.UDPTimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif c == nil {\n\t\treturn nil\n\t}\n\tdefer c.Close()\n\trc, err := NATDial(\"udp\", addr.String(), s.To, s.To)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tgo func() {\n\t\tvar bf [65507]byte\n\t\tfor {\n\t\t\tif s.UDPTimeout != 0 {\n\t\t\t\tif err := rc.SetDeadline(time.Now().Add(time.Duration(s.UDPTimeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\ti, err := rc.Read(bf[:])\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif _, err := c.Write(bf[0:i]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tvar bf [65507]byte\n\tfor {\n\t\tif s.UDPTimeout != 0 {\n\t\t\tif err := c.SetDeadline(time.Now().Add(time.Duration(s.UDPTimeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\ti, err := c.Read(bf[:])\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tif _, err := rc.Write(bf[0:i]); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *Relay) Shutdown() error {\n\treturn s.RunnerGroup.Done()\n}\n"
        },
        {
          "name": "relayoverbrook.go",
          "type": "blob",
          "size": 4.6005859375,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"os/exec\"\n\t\"runtime\"\n\n\t\"github.com/miekg/dns\"\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/txthinking/runnergroup\"\n\t\"github.com/txthinking/socks5\"\n)\n\ntype RelayOverBrook struct {\n\tFrom        string\n\tLink        string\n\tdstb        []byte\n\tTCPTimeout  int\n\tUDPTimeout  int\n\tblk         *BrookLink\n\tpcf         *PacketConnFactory\n\tRunnerGroup *runnergroup.RunnerGroup\n\tIsDNS       bool\n}\n\nfunc NewRelayOverBrook(from, link, to string, tcpTimeout, udpTimeout int) (*RelayOverBrook, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\ta, h, p, err := socks5.ParseAddress(to)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tblk, err := NewBrookLink(link)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif blk.Kind == \"quicserver\" {\n\t\tif runtime.GOOS == \"linux\" {\n\t\t\tc := exec.Command(\"sysctl\", \"-w\", \"net.core.rmem_max=2500000\")\n\t\t\tb, err := c.CombinedOutput()\n\t\t\tif err != nil {\n\t\t\t\tLog(Error{\"when\": \"try to raise UDP Receive Buffer Size\", \"warning\": string(b)})\n\t\t\t}\n\t\t}\n\t\tif runtime.GOOS == \"darwin\" {\n\t\t\tc := exec.Command(\"sysctl\", \"-w\", \"kern.ipc.maxsockbuf=3014656\")\n\t\t\tb, err := c.CombinedOutput()\n\t\t\tif err != nil {\n\t\t\t\tLog(Error{\"when\": \"try to raise UDP Receive Buffer Size\", \"warning\": string(b)})\n\t\t\t}\n\t\t}\n\t}\n\ts := &RelayOverBrook{\n\t\tFrom:        from,\n\t\tLink:        link,\n\t\tdstb:        append(append([]byte{a}, h...), p...),\n\t\tTCPTimeout:  tcpTimeout,\n\t\tUDPTimeout:  udpTimeout,\n\t\tblk:         blk,\n\t\tpcf:         NewPacketConnFactory(),\n\t\tRunnerGroup: runnergroup.New(),\n\t}\n\treturn s, nil\n}\n\nfunc (s *RelayOverBrook) ListenAndServe() error {\n\taddr, err := net.ResolveTCPAddr(\"tcp\", s.From)\n\tif err != nil {\n\t\treturn err\n\t}\n\tl, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.RunnerGroup.Add(&runnergroup.Runner{\n\t\tStart: func() error {\n\t\t\tfor {\n\t\t\t\tc, err := l.AcceptTCP()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tgo func(c *net.TCPConn) {\n\t\t\t\t\tdefer c.Close()\n\t\t\t\t\tif err := s.TCPHandle(c); err != nil {\n\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"error\": err.Error()})\n\t\t\t\t\t}\n\t\t\t\t}(c)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tStop: func() error {\n\t\t\treturn l.Close()\n\t\t},\n\t})\n\taddr1, err := net.ResolveUDPAddr(\"udp\", s.From)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn err\n\t}\n\tl1, err := net.ListenUDP(\"udp\", addr1)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn err\n\t}\n\ts.RunnerGroup.Add(&runnergroup.Runner{\n\t\tStart: func() error {\n\t\t\tfor {\n\t\t\t\tb := make([]byte, 65507)\n\t\t\t\tn, addr, err := l1.ReadFromUDP(b)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tgo func(addr *net.UDPAddr, b []byte) {\n\t\t\t\t\tif err := s.UDPHandle(addr, b, l1); err != nil {\n\t\t\t\t\t\tLog(Error{\"from\": addr.String(), \"error\": err.Error()})\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}(addr, b[0:n])\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tStop: func() error {\n\t\t\treturn l1.Close()\n\t\t},\n\t})\n\treturn s.RunnerGroup.Wait()\n}\n\nfunc (s *RelayOverBrook) TCPHandle(c *net.TCPConn) error {\n\tsc, rc, err := s.blk.CreateExchanger(\"tcp\", c.RemoteAddr().String(), s.dstb, s.TCPTimeout, s.UDPTimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tdefer sc.Clean()\n\tif err := sc.Exchange(c); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (s *RelayOverBrook) UDPHandle(addr *net.UDPAddr, b []byte, l1 *net.UDPConn) error {\n\tif s.IsDNS {\n\t\tm := &dns.Msg{}\n\t\tif err := m.Unpack(b); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif len(m.Question) == 0 {\n\t\t\treturn errors.New(\"no question\")\n\t\t}\n\t\tdone, err := DNSGate(addr, m, l1)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif done {\n\t\t\treturn nil\n\t\t}\n\t}\n\tconn, err := s.pcf.Handle(addr, s.dstb, b, func(b []byte) (int, error) {\n\t\treturn l1.WriteToUDP(b, addr)\n\t}, s.UDPTimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif conn == nil {\n\t\treturn nil\n\t}\n\tdefer conn.Close()\n\tsc, rc, err := s.blk.CreateExchanger(\"udp\", addr.String(), s.dstb, s.TCPTimeout, s.UDPTimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tdefer sc.Clean()\n\tif err := sc.Exchange(conn); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (s *RelayOverBrook) Shutdown() error {\n\treturn s.RunnerGroup.Done()\n}\n"
        },
        {
          "name": "resolve.go",
          "type": "blob",
          "size": 0.982421875,
          "content": "package brook\n\nimport (\n\t\"errors\"\n\t\"net\"\n\n\t\"github.com/miekg/dns\"\n)\n\nfunc Resolve6(host string) (string, error) {\n\tif net.ParseIP(host).To4() != nil {\n\t\treturn \"\", errors.New(\"This is ipv4\")\n\t}\n\tif net.ParseIP(host).To16() != nil {\n\t\treturn host, nil\n\t}\n\tm := &dns.Msg{}\n\tm.SetQuestion(host+\".\", dns.TypeAAAA)\n\tr, err := dns.Exchange(m, \"[2001:4860:4860::8888]:53\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tfor _, v := range r.Answer {\n\t\tif t, ok := v.(*dns.AAAA); ok {\n\t\t\treturn t.AAAA.String(), nil\n\t\t}\n\t}\n\treturn \"\", errors.New(\"Can not find IP\")\n}\n\nfunc Resolve4(host string) (string, error) {\n\tif net.ParseIP(host).To4() != nil {\n\t\treturn host, nil\n\t}\n\tif net.ParseIP(host).To16() != nil {\n\t\treturn \"\", errors.New(\"This is ipv6\")\n\t}\n\tm := &dns.Msg{}\n\tm.SetQuestion(host+\".\", dns.TypeA)\n\tr, err := dns.Exchange(m, \"8.8.8.8:53\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tfor _, v := range r.Answer {\n\t\tif t, ok := v.(*dns.A); ok {\n\t\t\treturn t.A.String(), nil\n\t\t}\n\t}\n\treturn \"\", errors.New(\"Can not find IP\")\n}\n"
        },
        {
          "name": "server.go",
          "type": "blob",
          "size": 4.341796875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"net\"\n\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/txthinking/runnergroup\"\n\t\"github.com/txthinking/socks5\"\n)\n\ntype Server struct {\n\tAddr        string\n\tPassword    []byte\n\tTCPTimeout  int\n\tUDPTimeout  int\n\tRunnerGroup *runnergroup.RunnerGroup\n}\n\nfunc NewServer(addr, password string, tcpTimeout, udpTimeout int) (*Server, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\ts := &Server{\n\t\tPassword:    []byte(password),\n\t\tAddr:        addr,\n\t\tTCPTimeout:  tcpTimeout,\n\t\tUDPTimeout:  udpTimeout,\n\t\tRunnerGroup: runnergroup.New(),\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) ListenAndServe() error {\n\taddr, err := net.ResolveTCPAddr(\"tcp\", s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tl, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.RunnerGroup.Add(&runnergroup.Runner{\n\t\tStart: func() error {\n\t\t\tfor {\n\t\t\t\tc, err := l.AcceptTCP()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tgo func(c *net.TCPConn) {\n\t\t\t\t\tdefer c.Close()\n\t\t\t\t\tss, err := NewStreamServer(s.Password, c.RemoteAddr().String(), c, s.TCPTimeout, s.UDPTimeout)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"error\": err.Error()})\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tdefer ss.Clean()\n\t\t\t\t\tif ss.Network() == \"tcp\" {\n\t\t\t\t\t\tif err := s.TCPHandle(ss); err != nil {\n\t\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"dst\": ss.Dst(), \"error\": err.Error()})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ss.Network() == \"udp\" {\n\t\t\t\t\t\tif err := s.UDPOverTCPHandle(ss); err != nil {\n\t\t\t\t\t\t\tLog(Error{\"from\": c.RemoteAddr().String(), \"dst\": ss.Dst(), \"error\": err.Error()})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}(c)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tStop: func() error {\n\t\t\treturn l.Close()\n\t\t},\n\t})\n\taddr1, err := net.ResolveUDPAddr(\"udp\", s.Addr)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn err\n\t}\n\tl1, err := net.ListenUDP(\"udp\", addr1)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn err\n\t}\n\ts.RunnerGroup.Add(&runnergroup.Runner{\n\t\tStart: func() error {\n\t\t\tf := NewPacketServerConnFactory()\n\t\t\tfor {\n\t\t\t\tb := make([]byte, 65507)\n\t\t\t\tn, addr, err := l1.ReadFromUDP(b)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tconn, dstb, err := f.Handle(addr, b[0:n], s.Password, func(b []byte) (int, error) {\n\t\t\t\t\treturn l1.WriteToUDP(b, addr)\n\t\t\t\t}, s.UDPTimeout)\n\t\t\t\tif err != nil {\n\t\t\t\t\tLog(Error{\"from\": addr.String(), \"error\": err.Error()})\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif conn == nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tgo func() {\n\t\t\t\t\tdefer conn.Close()\n\t\t\t\t\tss, err := NewPacketServer(s.Password, addr.String(), conn, s.UDPTimeout, dstb)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tLog(Error{\"from\": addr.String(), \"dst\": socks5.ToAddress(dstb[0], dstb[1:len(dstb)-2], dstb[len(dstb)-2:]), \"error\": err.Error()})\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tdefer ss.Clean()\n\t\t\t\t\tif err := s.UDPHandle(ss); err != nil {\n\t\t\t\t\t\tLog(Error{\"from\": addr.String(), \"dst\": socks5.ToAddress(dstb[0], dstb[1:len(dstb)-2], dstb[len(dstb)-2:]), \"error\": err.Error()})\n\t\t\t\t\t}\n\t\t\t\t}()\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tStop: func() error {\n\t\t\treturn l1.Close()\n\t\t},\n\t})\n\treturn s.RunnerGroup.Wait()\n}\n\nfunc (s *Server) TCPHandle(ss Exchanger) error {\n\trc, err := DialTCP(\"tcp\", \"\", ss.Dst())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tif err := ss.Exchange(rc); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (s *Server) UDPOverTCPHandle(ss Exchanger) error {\n\trc, err := NATDial(\"udp\", ss.Src(), ss.Dst(), ss.Dst())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tif err := ss.Exchange(rc); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (s *Server) UDPHandle(ss Exchanger) error {\n\trc, err := NATDial(\"udp\", ss.Src(), ss.Dst(), ss.Dst())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tif err := ss.Exchange(rc); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (s *Server) Shutdown() error {\n\treturn s.RunnerGroup.Done()\n}\n"
        },
        {
          "name": "simplepacketclient.go",
          "type": "blob",
          "size": 2.4892578125,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"encoding/binary\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n\t\"github.com/txthinking/x\"\n)\n\ntype SimplePacketClient struct {\n\tServer   net.Conn\n\tPassword []byte\n\tRB       []byte\n\tWB       []byte\n\tTimeout  int\n\tsrc      string\n\tdst      string\n\tdstl     int\n}\n\nfunc NewSimplePacketClient(password []byte, src string, server net.Conn, timeout int, dst []byte) (Exchanger, error) {\n\ts := &SimplePacketClient{Password: password, Server: server, Timeout: timeout, src: src}\n\ts.RB = x.BP65507.Get().([]byte)\n\ts.WB = x.BP65507.Get().([]byte)\n\ts.dstl = copy(s.WB[32+4:32+4+len(dst)], dst)\n\ts.dst = socks5.ToAddress(dst[0], dst[1:s.dstl-2], dst[s.dstl-2:])\n\treturn ClientGate(s)\n}\n\nfunc (c *SimplePacketClient) Exchange(local net.Conn) error {\n\tgo func() {\n\t\tfor {\n\t\t\tif c.Timeout != 0 {\n\t\t\t\tif err := c.Server.SetDeadline(time.Now().Add(time.Duration(c.Timeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\ti, err := c.Server.Read(c.RB)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, h, _, err := socks5.ParseBytesAddress(c.RB[0:])\n\t\t\tif err != nil {\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, err = local.Write(c.RB[1+len(h)+2 : i])\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tif c.Timeout != 0 {\n\t\t\tif err := local.SetDeadline(time.Now().Add(time.Duration(c.Timeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tl, err := local.Read(c.WB[32+4+c.dstl:])\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tcopy(c.WB[0:32], c.Password)\n\t\tbinary.BigEndian.PutUint32(c.WB[32:32+4], uint32(time.Now().Unix()))\n\t\t_, err = c.Server.Write(c.WB[:32+4+c.dstl+l])\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *SimplePacketClient) Clean() {\n\tx.BP65507.Put(s.RB)\n\tx.BP65507.Put(s.WB)\n}\n\nfunc (s *SimplePacketClient) Network() string {\n\treturn \"udp\"\n}\n\nfunc (s *SimplePacketClient) Src() string {\n\treturn s.src\n}\n\nfunc (s *SimplePacketClient) Dst() string {\n\treturn s.dst\n}\n"
        },
        {
          "name": "simplepacketserver.go",
          "type": "blob",
          "size": 2.2451171875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n\t\"github.com/txthinking/x\"\n)\n\ntype SimplePacketServer struct {\n\tClient   net.Conn\n\tPassword []byte\n\tRB       []byte\n\tWB       []byte\n\tTimeout  int\n\tsrc      string\n\tdst      string\n\tdstl     int\n}\n\nfunc NewSimplePacketServer(password []byte, src string, client net.Conn, timeout int, dst []byte) (Exchanger, error) {\n\ts := &SimplePacketServer{Password: password, Client: client, Timeout: timeout, src: src}\n\ts.RB = x.BP65507.Get().([]byte)\n\ts.WB = x.BP65507.Get().([]byte)\n\ts.dstl = copy(s.WB[:len(dst)], dst)\n\ts.dst = socks5.ToAddress(dst[0], dst[1:s.dstl-2], dst[s.dstl-2:])\n\treturn ServerGate(s)\n}\n\nfunc (s *SimplePacketServer) Exchange(remote net.Conn) error {\n\tgo func() {\n\t\tfor {\n\t\t\tif s.Timeout != 0 {\n\t\t\t\tif err := remote.SetDeadline(time.Now().Add(time.Duration(s.Timeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tl, err := remote.Read(s.WB[s.dstl:])\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, err = s.Client.Write(s.WB[:s.dstl+l])\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tif s.Timeout != 0 {\n\t\t\tif err := s.Client.SetDeadline(time.Now().Add(time.Duration(s.Timeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tl, err := s.Client.Read(s.RB)\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tif _, err := remote.Write(s.RB[:l]); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *SimplePacketServer) Clean() {\n\tx.BP65507.Put(s.RB)\n\tx.BP65507.Put(s.WB)\n}\n\nfunc (s *SimplePacketServer) Network() string {\n\treturn \"udp\"\n}\n\nfunc (s *SimplePacketServer) Src() string {\n\treturn s.src\n}\n\nfunc (s *SimplePacketServer) Dst() string {\n\treturn s.dst\n}\n"
        },
        {
          "name": "simplepacketserverconn.go",
          "type": "blob",
          "size": 1.951171875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n)\n\ntype SimplePacketServerConnFactory struct {\n\tConns map[string]*PacketConn\n\tLock  *sync.Mutex\n}\n\nfunc NewSimplePacketServerConnFactory() *SimplePacketServerConnFactory {\n\treturn &SimplePacketServerConnFactory{\n\t\tConns: make(map[string]*PacketConn),\n\t\tLock:  &sync.Mutex{},\n\t}\n}\n\nfunc (f *SimplePacketServerConnFactory) Handle(addr *net.UDPAddr, b, p []byte, w func([]byte) (int, error), timeout int) (net.Conn, []byte, error) {\n\tif len(b) < 32+4 {\n\t\treturn nil, nil, errors.New(\"data too small\")\n\t}\n\tif bytes.Compare(p, b[:32]) != 0 {\n\t\treturn nil, nil, errors.New(\"Password is wrong\")\n\t}\n\ti := int64(binary.BigEndian.Uint32(b[32 : 32+4]))\n\tif time.Now().Unix()-i > 60 {\n\t\treturn nil, nil, errors.New(\"Expired request\")\n\t}\n\ta, h, p, err := socks5.ParseBytesAddress(b[32+4:])\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tdst := socks5.ToAddress(a, h, p)\n\tf.Lock.Lock()\n\tc, ok := f.Conns[addr.String()+dst]\n\tf.Lock.Unlock()\n\tif ok {\n\t\t_ = c.In(b[32+4+1+len(h)+2:])\n\t\treturn nil, nil, nil\n\t}\n\tf.Lock.Lock()\n\tc = NewPacketConn(b[32+4+1+len(h)+2:], w, timeout, func() {\n\t\tf.Lock.Lock()\n\t\tdelete(f.Conns, addr.String()+dst)\n\t\tf.Lock.Unlock()\n\t})\n\tf.Conns[addr.String()+dst] = c\n\tf.Lock.Unlock()\n\treturn c, b[32+4 : 32+4+1+len(h)+2], nil\n}\n"
        },
        {
          "name": "simplestreamclient.go",
          "type": "blob",
          "size": 3.8232421875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n\t\"github.com/txthinking/x\"\n)\n\ntype SimpleStreamClient struct {\n\tServer  net.Conn\n\tTimeout int\n\tRB      []byte\n\tWB      []byte\n\tnetwork string\n\tsrc     string\n\tdst     string\n}\n\nfunc NewSimpleStreamClient(network string, password []byte, src string, server net.Conn, timeout int, dst []byte) (Exchanger, error) {\n\tc := &SimpleStreamClient{network: network, Server: server, Timeout: timeout, src: src, dst: socks5.ToAddress(dst[0], dst[1:len(dst)-2], dst[len(dst)-2:])}\n\tif len(dst) > 2048-32-2-4 {\n\t\treturn nil, errors.New(\"dst too long\")\n\t}\n\tb := x.BP2048.Get().([]byte)\n\tbinary.BigEndian.PutUint16(b[32:32+2], uint16(4+len(dst)))\n\ti := time.Now().Unix()\n\tif c.network == \"tcp\" && i%2 != 0 {\n\t\ti += 1\n\t}\n\tif c.network == \"udp\" && i%2 != 1 {\n\t\ti += 1\n\t}\n\tbinary.BigEndian.PutUint32(b[32+2:32+2+4], uint32(i))\n\tcopy(b[:32], password)\n\tcopy(b[32+2+4:], dst)\n\tif _, err := server.Write(b[:32+2+4+len(dst)]); err != nil {\n\t\tx.BP2048.Put(b)\n\t\treturn nil, err\n\t}\n\tif c.network == \"tcp\" {\n\t\tc.RB = b\n\t\tc.WB = x.BP2048.Get().([]byte)\n\t}\n\tif c.network == \"udp\" {\n\t\tx.BP2048.Put(b)\n\t\tc.RB = x.BP65507.Get().([]byte)\n\t\tc.WB = x.BP65507.Get().([]byte)\n\t}\n\treturn ClientGate(c)\n}\n\nfunc (c *SimpleStreamClient) Exchange(local net.Conn) error {\n\tgo func() {\n\t\tif c.Timeout == 0 && c.network == \"tcp\" {\n\t\t\tio.Copy(local, c.Server)\n\t\t\treturn\n\t\t}\n\t\tfor {\n\t\t\tif c.Timeout != 0 {\n\t\t\t\tif err := c.Server.SetDeadline(time.Now().Add(time.Duration(c.Timeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif c.network == \"tcp\" {\n\t\t\t\tl, err := c.Server.Read(c.RB)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif _, err := local.Write(c.RB[:l]); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif c.network == \"udp\" {\n\t\t\t\tif _, err := io.ReadFull(c.Server, c.RB[:2]); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tl := int(binary.BigEndian.Uint16(c.RB[:2]))\n\t\t\t\tif l > 65507-2 {\n\t\t\t\t\tLog(Error{\"from\": c.src, \"dst\": c.dst, \"error\": \"read from server but packet too long\"})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif _, err := io.ReadFull(c.Server, c.RB[2:2+l]); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif _, err := local.Write(c.RB[2 : 2+l]); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\tif c.Timeout == 0 && c.network == \"tcp\" {\n\t\tio.Copy(c.Server, local)\n\t\treturn nil\n\t}\n\tfor {\n\t\tif c.Timeout != 0 {\n\t\t\tif err := local.SetDeadline(time.Now().Add(time.Duration(c.Timeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tif c.network == \"tcp\" {\n\t\t\tl, err := local.Read(c.WB)\n\t\t\tif err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif _, err := c.Server.Write(c.WB[:l]); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tif c.network == \"udp\" {\n\t\t\tl, err := local.Read(c.WB[2:])\n\t\t\tif err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tbinary.BigEndian.PutUint16(c.WB[:2], uint16(l))\n\t\t\tif _, err := c.Server.Write(c.WB[:2+l]); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *SimpleStreamClient) Clean() {\n\tif s.network == \"tcp\" {\n\t\tx.BP2048.Put(s.WB)\n\t\tx.BP2048.Put(s.RB)\n\t}\n\tif s.network == \"udp\" {\n\t\tx.BP65507.Put(s.WB)\n\t\tx.BP65507.Put(s.RB)\n\t}\n}\n\nfunc (s *SimpleStreamClient) Network() string {\n\treturn s.network\n}\n\nfunc (s *SimpleStreamClient) Src() string {\n\treturn s.src\n}\n\nfunc (s *SimpleStreamClient) Dst() string {\n\treturn s.dst\n}\n"
        },
        {
          "name": "simplestreamserver.go",
          "type": "blob",
          "size": 4.099609375,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n\t\"github.com/txthinking/x\"\n)\n\ntype SimpleStreamServer struct {\n\tClient  net.Conn\n\tTimeout int\n\tRB      []byte\n\tWB      []byte\n\tnetwork string\n\tsrc     string\n\tdst     string\n}\n\nfunc NewSimpleStreamServer(password []byte, src string, client net.Conn, timeout, udptimeout int) (Exchanger, error) {\n\tif timeout != 0 {\n\t\tif err := client.SetDeadline(time.Now().Add(time.Duration(timeout) * time.Second)); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\ts := &SimpleStreamServer{Client: client, Timeout: timeout, src: src}\n\tb := x.BP2048.Get().([]byte)\n\tif _, err := io.ReadFull(s.Client, b[:32+2]); err != nil {\n\t\tx.BP2048.Put(b)\n\t\treturn nil, err\n\t}\n\tif bytes.Compare(password, b[:32]) != 0 {\n\t\tx.BP2048.Put(b)\n\t\tWaitReadErr(s.Client)\n\t\treturn nil, errors.New(\"Password is wrong\")\n\t}\n\tl := int(binary.BigEndian.Uint16(b[32:34]))\n\tif l > 2048 {\n\t\tx.BP2048.Put(b)\n\t\treturn nil, errors.New(\"data too long\")\n\t}\n\tif _, err := io.ReadFull(s.Client, b[:l]); err != nil {\n\t\tx.BP2048.Put(b)\n\t\treturn nil, err\n\t}\n\ti := int64(binary.BigEndian.Uint32(b[:4]))\n\tif time.Now().Unix()-i > 60 {\n\t\tx.BP2048.Put(b)\n\t\tWaitReadErr(s.Client)\n\t\treturn nil, errors.New(\"Expired request\")\n\t}\n\tif i%2 == 0 {\n\t\ts.network = \"tcp\"\n\t\ts.RB = b\n\t\ts.WB = x.BP2048.Get().([]byte)\n\t}\n\tif i%2 == 1 {\n\t\ts.network = \"udp\"\n\t\ts.Timeout = udptimeout\n\t\ts.RB = x.BP65507.Get().([]byte)\n\t\tcopy(s.RB[:l], b[:l])\n\t\tx.BP2048.Put(b)\n\t\ts.WB = x.BP65507.Get().([]byte)\n\t}\n\ts.dst = socks5.ToAddress(s.RB[4], s.RB[4+1:l-2], s.RB[l-2:])\n\treturn ServerGate(s)\n}\n\nfunc (s *SimpleStreamServer) Exchange(remote net.Conn) error {\n\tgo func() {\n\t\tif s.network == \"tcp\" && s.Timeout == 0 {\n\t\t\tio.Copy(s.Client, remote)\n\t\t\treturn\n\t\t}\n\t\tfor {\n\t\t\tif s.Timeout != 0 {\n\t\t\t\tif err := remote.SetDeadline(time.Now().Add(time.Duration(s.Timeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif s.network == \"tcp\" {\n\t\t\t\tl, err := remote.Read(s.WB)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif _, err := s.Client.Write(s.WB[:l]); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif s.network == \"udp\" {\n\t\t\t\tl, err := remote.Read(s.WB[2:])\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbinary.BigEndian.PutUint16(s.WB[:2], uint16(l))\n\t\t\t\tif _, err := s.Client.Write(s.WB[:2+l]); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\tif s.network == \"tcp\" && s.Timeout == 0 {\n\t\tio.Copy(remote, s.Client)\n\t\treturn nil\n\t}\n\tfor {\n\t\tif s.Timeout != 0 {\n\t\t\tif err := s.Client.SetDeadline(time.Now().Add(time.Duration(s.Timeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tif s.network == \"tcp\" {\n\t\t\tl, err := s.Client.Read(s.RB)\n\t\t\tif err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif _, err := remote.Write(s.RB[:l]); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tif s.network == \"udp\" {\n\t\t\tif _, err := io.ReadFull(s.Client, s.RB[:2]); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tl := int(binary.BigEndian.Uint16(s.RB[:2]))\n\t\t\tif l > 65507-2 {\n\t\t\t\treturn errors.New(\"packet too long\")\n\t\t\t}\n\t\t\tif _, err := io.ReadFull(s.Client, s.RB[2:2+l]); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif _, err := remote.Write(s.RB[2 : 2+l]); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *SimpleStreamServer) Network() string {\n\treturn s.network\n}\n\nfunc (s *SimpleStreamServer) Src() string {\n\treturn s.src\n}\n\nfunc (s *SimpleStreamServer) Dst() string {\n\treturn s.dst\n}\n\nfunc (s *SimpleStreamServer) Clean() {\n\tif s.network == \"tcp\" {\n\t\tx.BP2048.Put(s.WB)\n\t\tx.BP2048.Put(s.RB)\n\t}\n\tif s.network == \"udp\" {\n\t\tx.BP65507.Put(s.WB)\n\t\tx.BP65507.Put(s.RB)\n\t}\n}\n"
        },
        {
          "name": "socks5.go",
          "type": "blob",
          "size": 1.3369140625,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/txthinking/socks5\"\n)\n\ntype Socks5Server struct {\n\tServer *socks5.Server\n}\n\nfunc NewSocks5Server(addr, ip, userName, password string, tcpTimeout, udpTimeout int) (*Socks5Server, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\ts5, err := socks5.NewClassicServer(addr, ip, userName, password, tcpTimeout, udpTimeout)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tx := &Socks5Server{\n\t\tServer: s5,\n\t}\n\treturn x, nil\n}\n\nfunc (x *Socks5Server) ListenAndServe() error {\n\treturn x.Server.ListenAndServe(nil)\n}\n\nfunc (x *Socks5Server) Shutdown() error {\n\treturn x.Server.Shutdown()\n}\n"
        },
        {
          "name": "socks5test.go",
          "type": "blob",
          "size": 2.25,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/miekg/dns\"\n\t\"github.com/txthinking/socks5\"\n)\n\nfunc Socks5Test(s, u, p, domain, a, ds string) error {\n\ts5c, err := socks5.NewClient(s, u, p, 0, 60)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfmt.Println(\"Testing TCP: query \" + domain + \" A on \" + ds)\n\tc := &dns.Client{Net: \"tcp\"}\n\ttc, err := s5c.Dial(\"tcp\", ds)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer tc.Close()\n\tm := &dns.Msg{}\n\tm.RecursionDesired = true\n\tm.SetQuestion(domain+\".\", dns.TypeA)\n\tm, _, err = c.ExchangeWithConn(m, &dns.Conn{Conn: tc})\n\tif err != nil {\n\t\treturn err\n\t}\n\tif len(m.Answer) == 0 {\n\t\treturn errors.New(\"no answer\")\n\t}\n\tv, ok := m.Answer[0].(*dns.A)\n\tif !ok {\n\t\treturn errors.New(\"invalid answer\")\n\t}\n\tif v.A.String() != a {\n\t\tfmt.Println(\"Expect\", a, \"but got\", v.A.String())\n\t}\n\tif v.A.String() == a {\n\t\tfmt.Println(\"TCP: OK\")\n\t}\n\n\tfmt.Println(\"Testing UDP: query \" + domain + \" A on \" + ds)\n\tuc, err := s5c.Dial(\"udp\", ds)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer uc.Close()\n\tm = &dns.Msg{}\n\tm.RecursionDesired = true\n\tm.SetQuestion(domain+\".\", dns.TypeA)\n\tb, err := m.Pack()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif _, err := uc.Write(b); err != nil {\n\t\treturn err\n\t}\n\tlog.Printf(\"Sent Datagram. %#v\\n\", b)\n\tb = make([]byte, 512)\n\ti, err := uc.Read(b)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := m.Unpack(b[:i]); err != nil {\n\t\treturn err\n\t}\n\tif len(m.Answer) == 0 {\n\t\treturn errors.New(\"no answer\")\n\t}\n\tv, ok = m.Answer[0].(*dns.A)\n\tif !ok {\n\t\treturn errors.New(\"invalid answer\")\n\t}\n\tif v.A.String() != a {\n\t\tfmt.Println(\"Expect\", a, \"but got\", v.A.String())\n\t}\n\tif v.A.String() == a {\n\t\tfmt.Println(\"UDP: OK\")\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "socks5tohttp.go",
          "type": "blob",
          "size": 4.0380859375,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/txthinking/brook/limits\"\n\t\"golang.org/x/net/proxy\"\n)\n\ntype Socks5ToHTTP struct {\n\tAddr       string\n\tDial       proxy.Dialer\n\tTCPTimeout int\n\tListen     *net.TCPListener\n}\n\ntype _pd struct {\n}\n\nfunc (p *_pd) Dial(network, addr string) (c net.Conn, err error) {\n\treturn DialTCP(network, \"\", addr)\n}\n\nfunc NewSocks5ToHTTP(addr, socks5addr, socks5username, socks5password string, tcpTimeout int) (*Socks5ToHTTP, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\tvar auth *proxy.Auth\n\tif socks5username != \"\" || socks5password != \"\" {\n\t\tauth = &proxy.Auth{\n\t\t\tUser:     socks5username,\n\t\t\tPassword: socks5password,\n\t\t}\n\t}\n\tdial, err := proxy.SOCKS5(\"tcp\", socks5addr, auth, &_pd{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Socks5ToHTTP{\n\t\tAddr:       addr,\n\t\tDial:       dial,\n\t\tTCPTimeout: tcpTimeout,\n\t}, nil\n}\n\nfunc (s *Socks5ToHTTP) ListenAndServe() error {\n\taddr, err := net.ResolveTCPAddr(\"tcp\", s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tl, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer l.Close()\n\ts.Listen = l\n\tfor {\n\t\tc, err := l.AcceptTCP()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgo func(c *net.TCPConn) {\n\t\t\tdefer c.Close()\n\t\t\tif s.TCPTimeout != 0 {\n\t\t\t\tif err := c.SetDeadline(time.Now().Add(time.Duration(s.TCPTimeout) * time.Second)); err != nil {\n\t\t\t\t\tLog(err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif err := s.Handle(c); err != nil {\n\t\t\t\tLog(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}(c)\n\t}\n}\n\nfunc (s *Socks5ToHTTP) Handle(c *net.TCPConn) error {\n\tb := make([]byte, 0, 1024)\n\tfor {\n\t\tvar b1 [1024]byte\n\t\tn, err := c.Read(b1[:])\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tb = append(b, b1[:n]...)\n\t\tif bytes.Contains(b, []byte{0x0d, 0x0a, 0x0d, 0x0a}) {\n\t\t\tbreak\n\t\t}\n\t\tif len(b) >= 2083+18 {\n\t\t\treturn errors.New(\"HTTP header too long\")\n\t\t}\n\t}\n\n\tbb := bytes.SplitN(b, []byte(\" \"), 3)\n\tif len(bb) != 3 {\n\t\treturn errors.New(\"Invalid Request\")\n\t}\n\tmethod, address := string(bb[0]), string(bb[1])\n\tvar addr string\n\tif method == \"CONNECT\" {\n\t\taddr = address\n\t}\n\tif method != \"CONNECT\" {\n\t\tvar err error\n\t\taddr, err = GetAddressFromURL(address)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\ttmp, err := s.Dial.Dial(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\trc := tmp.(*net.TCPConn)\n\tdefer rc.Close()\n\tif s.TCPTimeout != 0 {\n\t\tif err := rc.SetDeadline(time.Now().Add(time.Duration(s.TCPTimeout) * time.Second)); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif method == \"CONNECT\" {\n\t\t_, err := c.Write([]byte(\"HTTP/1.1 200 Connection established\\r\\n\\r\\n\"))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif method != \"CONNECT\" {\n\t\tif _, err := rc.Write(b); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tgo func() {\n\t\tvar bf [1024 * 2]byte\n\t\tfor {\n\t\t\tif s.TCPTimeout != 0 {\n\t\t\t\tif err := rc.SetDeadline(time.Now().Add(time.Duration(s.TCPTimeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\ti, err := rc.Read(bf[:])\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif _, err := c.Write(bf[0:i]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tvar bf [1024 * 2]byte\n\tfor {\n\t\tif s.TCPTimeout != 0 {\n\t\t\tif err := c.SetDeadline(time.Now().Add(time.Duration(s.TCPTimeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\ti, err := c.Read(bf[:])\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tif _, err := rc.Write(bf[0:i]); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *Socks5ToHTTP) Shutdown() error {\n\tif s.Listen == nil {\n\t\treturn nil\n\t}\n\treturn s.Listen.Close()\n}\n"
        },
        {
          "name": "streamclient.go",
          "type": "blob",
          "size": 5.23046875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"crypto/sha256\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n\t\"github.com/txthinking/x\"\n\t\"golang.org/x/crypto/hkdf\"\n)\n\ntype StreamClient struct {\n\tServer  net.Conn\n\tcn      []byte\n\tca      cipher.AEAD\n\tsn      []byte\n\tsa      cipher.AEAD\n\tRB      []byte\n\tWB      []byte\n\tTimeout int\n\tnetwork string\n\tsrc     string\n\tdst     string\n}\n\nfunc NewStreamClient(network string, password []byte, src string, server net.Conn, timeout int, dst []byte) (Exchanger, error) {\n\tif timeout != 0 {\n\t\tif err := server.SetDeadline(time.Now().Add(time.Duration(timeout) * time.Second)); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif len(dst) > 2048-2-16-4-16 {\n\t\treturn nil, errors.New(\"dst too long\")\n\t}\n\tc := &StreamClient{network: network, Server: server, Timeout: timeout, src: src, dst: socks5.ToAddress(dst[0], dst[1:len(dst)-2], dst[len(dst)-2:])}\n\n\tc.cn = x.BP12.Get().([]byte)\n\tif _, err := io.ReadFull(rand.Reader, c.cn); err != nil {\n\t\tx.BP12.Put(c.cn)\n\t\treturn nil, err\n\t}\n\tck := x.BP32.Get().([]byte)\n\tif _, err := io.ReadFull(hkdf.New(sha256.New, password, c.cn, ClientHKDFInfo), ck); err != nil {\n\t\tx.BP12.Put(c.cn)\n\t\tx.BP32.Put(ck)\n\t\treturn nil, err\n\t}\n\tif _, err := c.Server.Write(c.cn); err != nil {\n\t\tx.BP12.Put(c.cn)\n\t\tx.BP32.Put(ck)\n\t\treturn nil, err\n\t}\n\tcb, err := aes.NewCipher(ck)\n\tif err != nil {\n\t\tx.BP12.Put(c.cn)\n\t\tx.BP32.Put(ck)\n\t\treturn nil, err\n\t}\n\tx.BP32.Put(ck)\n\tc.ca, err = cipher.NewGCM(cb)\n\tif err != nil {\n\t\tx.BP12.Put(c.cn)\n\t\treturn nil, err\n\t}\n\n\tc.WB = x.BP2048.Get().([]byte)\n\ti := time.Now().Unix()\n\tif c.network == \"tcp\" && i%2 != 0 {\n\t\ti += 1\n\t}\n\tif c.network == \"udp\" && i%2 != 1 {\n\t\ti += 1\n\t}\n\tbinary.BigEndian.PutUint32(c.WB[2+16:2+16+4], uint32(i))\n\tcopy(c.WB[2+16+4:2+16+4+len(dst)], dst)\n\tif err := c.Write(4 + len(dst)); err != nil {\n\t\tx.BP12.Put(c.cn)\n\t\tx.BP2048.Put(c.WB)\n\t\treturn nil, err\n\t}\n\n\tc.sn = x.BP12.Get().([]byte)\n\tif _, err := io.ReadFull(c.Server, c.sn); err != nil {\n\t\tx.BP12.Put(c.cn)\n\t\tx.BP2048.Put(c.WB)\n\t\tx.BP12.Put(c.sn)\n\t\treturn nil, err\n\t}\n\tsk := x.BP32.Get().([]byte)\n\tif _, err := io.ReadFull(hkdf.New(sha256.New, password, c.sn, ServerHKDFInfo), sk); err != nil {\n\t\tx.BP12.Put(c.cn)\n\t\tx.BP2048.Put(c.WB)\n\t\tx.BP12.Put(c.sn)\n\t\tx.BP32.Put(sk)\n\t\treturn nil, err\n\t}\n\tsb, err := aes.NewCipher(sk)\n\tif err != nil {\n\t\tx.BP12.Put(c.cn)\n\t\tx.BP2048.Put(c.WB)\n\t\tx.BP12.Put(c.sn)\n\t\tx.BP32.Put(sk)\n\t\treturn nil, err\n\t}\n\tx.BP32.Put(sk)\n\tc.sa, err = cipher.NewGCM(sb)\n\tif err != nil {\n\t\tx.BP12.Put(c.cn)\n\t\tx.BP2048.Put(c.WB)\n\t\tx.BP12.Put(c.sn)\n\t\treturn nil, err\n\t}\n\tif c.network == \"tcp\" {\n\t\tc.RB = x.BP2048.Get().([]byte)\n\t}\n\tif c.network == \"udp\" {\n\t\tx.BP2048.Put(c.WB)\n\t\tc.WB = x.BP65507.Get().([]byte)\n\t\tc.RB = x.BP65507.Get().([]byte)\n\t}\n\treturn ClientGate(c)\n}\n\nfunc (c *StreamClient) Exchange(local net.Conn) error {\n\tgo func() {\n\t\tfor {\n\t\t\tif c.Timeout != 0 {\n\t\t\t\tif err := c.Server.SetDeadline(time.Now().Add(time.Duration(c.Timeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tl, err := c.Read()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif _, err := local.Write(c.RB[2+16 : 2+16+l]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tif c.Timeout != 0 {\n\t\t\tif err := local.SetDeadline(time.Now().Add(time.Duration(c.Timeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tl, err := local.Read(c.WB[2+16 : len(c.WB)-16])\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tif err := c.Write(l); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (c *StreamClient) Write(l int) error {\n\tbinary.BigEndian.PutUint16(c.WB[:2], uint16(l))\n\tc.ca.Seal(c.WB[:0], c.cn, c.WB[:2], nil)\n\tNextNonce(c.cn)\n\tc.ca.Seal(c.WB[:2+16], c.cn, c.WB[2+16:2+16+l], nil)\n\tif _, err := c.Server.Write(c.WB[:2+16+l+16]); err != nil {\n\t\treturn err\n\t}\n\tNextNonce(c.cn)\n\treturn nil\n}\n\nfunc (c *StreamClient) Read() (int, error) {\n\tif _, err := io.ReadFull(c.Server, c.RB[:2+16]); err != nil {\n\t\treturn 0, err\n\t}\n\tif _, err := c.sa.Open(c.RB[:0], c.sn, c.RB[:2+16], nil); err != nil {\n\t\treturn 0, err\n\t}\n\tl := int(binary.BigEndian.Uint16(c.RB[:2]))\n\tif _, err := io.ReadFull(c.Server, c.RB[2+16:2+16+l+16]); err != nil {\n\t\treturn 0, err\n\t}\n\tNextNonce(c.sn)\n\tif _, err := c.sa.Open(c.RB[:2+16], c.sn, c.RB[2+16:2+16+l+16], nil); err != nil {\n\t\treturn 0, err\n\t}\n\tNextNonce(c.sn)\n\treturn l, nil\n}\n\nfunc (c *StreamClient) Clean() {\n\tx.BP12.Put(c.cn)\n\tx.BP12.Put(c.sn)\n\tif c.network == \"tcp\" {\n\t\tx.BP2048.Put(c.WB)\n\t\tx.BP2048.Put(c.RB)\n\t}\n\tif c.network == \"udp\" {\n\t\tx.BP65507.Put(c.WB)\n\t\tx.BP65507.Put(c.RB)\n\t}\n}\n\nfunc (s *StreamClient) Network() string {\n\treturn s.network\n}\n\nfunc (s *StreamClient) Src() string {\n\treturn s.src\n}\n\nfunc (s *StreamClient) Dst() string {\n\treturn s.dst\n}\n"
        },
        {
          "name": "streamserver.go",
          "type": "blob",
          "size": 5.328125,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"crypto/sha256\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n\t\"github.com/txthinking/x\"\n\t\"golang.org/x/crypto/hkdf\"\n)\n\ntype StreamServer struct {\n\tClient  net.Conn\n\tcn      []byte\n\tca      cipher.AEAD\n\tsn      []byte\n\tsa      cipher.AEAD\n\tRB      []byte\n\tWB      []byte\n\tTimeout int\n\tnetwork string\n\tsrc     string\n\tdst     string\n}\n\nfunc NewStreamServer(password []byte, src string, client net.Conn, timeout, udptimeout int) (Exchanger, error) {\n\tif timeout != 0 {\n\t\tif err := client.SetDeadline(time.Now().Add(time.Duration(timeout) * time.Second)); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\ts := &StreamServer{Client: client, Timeout: timeout, src: src}\n\ts.cn = x.BP12.Get().([]byte)\n\tif _, err := io.ReadFull(s.Client, s.cn); err != nil {\n\t\tx.BP12.Put(s.cn)\n\t\treturn nil, err\n\t}\n\tck := x.BP32.Get().([]byte)\n\tif _, err := io.ReadFull(hkdf.New(sha256.New, password, s.cn, ClientHKDFInfo), ck); err != nil {\n\t\tx.BP12.Put(s.cn)\n\t\tx.BP32.Put(ck)\n\t\treturn nil, err\n\t}\n\tcb, err := aes.NewCipher(ck)\n\tif err != nil {\n\t\tx.BP12.Put(s.cn)\n\t\tx.BP32.Put(ck)\n\t\treturn nil, err\n\t}\n\tx.BP32.Put(ck)\n\ts.ca, err = cipher.NewGCM(cb)\n\tif err != nil {\n\t\tx.BP12.Put(s.cn)\n\t\treturn nil, err\n\t}\n\n\ts.RB = x.BP2048.Get().([]byte)\n\tl, err := s.Read()\n\tif err != nil {\n\t\tx.BP12.Put(s.cn)\n\t\tx.BP2048.Put(s.RB)\n\t\treturn nil, err\n\t}\n\ti := int64(binary.BigEndian.Uint32(s.RB[2+16 : 2+16+4]))\n\tif time.Now().Unix()-i > 60 {\n\t\tx.BP12.Put(s.cn)\n\t\tx.BP2048.Put(s.RB)\n\t\tWaitReadErr(s.Client)\n\t\treturn nil, errors.New(\"Expired request\")\n\t}\n\tif i%2 == 0 {\n\t\ts.network = \"tcp\"\n\t}\n\tif i%2 == 1 {\n\t\ts.network = \"udp\"\n\t\ts.Timeout = udptimeout\n\t}\n\n\ts.sn = x.BP12.Get().([]byte)\n\tif _, err := io.ReadFull(rand.Reader, s.sn); err != nil {\n\t\tx.BP12.Put(s.cn)\n\t\tx.BP2048.Put(s.RB)\n\t\tx.BP12.Put(s.sn)\n\t\treturn nil, err\n\t}\n\tsk := x.BP32.Get().([]byte)\n\tif _, err := io.ReadFull(hkdf.New(sha256.New, password, s.sn, ServerHKDFInfo), sk); err != nil {\n\t\tx.BP12.Put(s.cn)\n\t\tx.BP2048.Put(s.RB)\n\t\tx.BP12.Put(s.sn)\n\t\tx.BP32.Put(sk)\n\t\treturn nil, err\n\t}\n\tif _, err := s.Client.Write(s.sn); err != nil {\n\t\tx.BP12.Put(s.cn)\n\t\tx.BP2048.Put(s.RB)\n\t\tx.BP12.Put(s.sn)\n\t\tx.BP32.Put(sk)\n\t\treturn nil, err\n\t}\n\tsb, err := aes.NewCipher(sk)\n\tif err != nil {\n\t\tx.BP12.Put(s.cn)\n\t\tx.BP2048.Put(s.RB)\n\t\tx.BP12.Put(s.sn)\n\t\tx.BP32.Put(sk)\n\t\treturn nil, err\n\t}\n\tx.BP32.Put(sk)\n\ts.sa, err = cipher.NewGCM(sb)\n\tif err != nil {\n\t\tx.BP12.Put(s.cn)\n\t\tx.BP2048.Put(s.RB)\n\t\tx.BP12.Put(s.sn)\n\t\treturn nil, err\n\t}\n\n\tif s.network == \"tcp\" {\n\t\ts.WB = x.BP2048.Get().([]byte)\n\t}\n\tif s.network == \"udp\" {\n\t\tRB := x.BP65507.Get().([]byte)\n\t\tcopy(RB[2+16+4:2+16+l], s.RB[2+16+4:2+16+l])\n\t\tx.BP2048.Put(s.RB)\n\t\ts.RB = RB\n\t\ts.WB = x.BP65507.Get().([]byte)\n\t}\n\ts.dst = socks5.ToAddress(s.RB[2+16+4], s.RB[2+16+4+1:2+16+l-2], s.RB[2+16+l-2:])\n\treturn ServerGate(s)\n}\n\nfunc (s *StreamServer) Exchange(remote net.Conn) error {\n\tgo func() {\n\t\tfor {\n\t\t\tif s.Timeout != 0 {\n\t\t\t\tif err := remote.SetDeadline(time.Now().Add(time.Duration(s.Timeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tl, err := remote.Read(s.WB[2+16 : len(s.WB)-16])\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err := s.Write(l); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tif s.Timeout != 0 {\n\t\t\tif err := s.Client.SetDeadline(time.Now().Add(time.Duration(s.Timeout) * time.Second)); err != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tl, err := s.Read()\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tif _, err := remote.Write(s.RB[2+16 : 2+16+l]); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *StreamServer) Write(l int) error {\n\tbinary.BigEndian.PutUint16(s.WB[:2], uint16(l))\n\ts.sa.Seal(s.WB[:0], s.sn, s.WB[:2], nil)\n\tNextNonce(s.sn)\n\ts.sa.Seal(s.WB[:2+16], s.sn, s.WB[2+16:2+16+l], nil)\n\tif _, err := s.Client.Write(s.WB[:2+16+l+16]); err != nil {\n\t\treturn err\n\t}\n\tNextNonce(s.sn)\n\treturn nil\n}\n\nfunc (s *StreamServer) Read() (int, error) {\n\tif _, err := io.ReadFull(s.Client, s.RB[:2+16]); err != nil {\n\t\treturn 0, err\n\t}\n\tif _, err := s.ca.Open(s.RB[:0], s.cn, s.RB[:2+16], nil); err != nil {\n\t\tWaitReadErr(s.Client)\n\t\treturn 0, err\n\t}\n\tl := int(binary.BigEndian.Uint16(s.RB[:2]))\n\tif _, err := io.ReadFull(s.Client, s.RB[2+16:2+16+l+16]); err != nil {\n\t\treturn 0, err\n\t}\n\tNextNonce(s.cn)\n\tif _, err := s.ca.Open(s.RB[:2+16], s.cn, s.RB[2+16:2+16+l+16], nil); err != nil {\n\t\treturn 0, err\n\t}\n\tNextNonce(s.cn)\n\treturn l, nil\n}\n\nfunc (s *StreamServer) Clean() {\n\tx.BP12.Put(s.cn)\n\tx.BP12.Put(s.sn)\n\tif s.network == \"tcp\" {\n\t\tx.BP2048.Put(s.WB)\n\t\tx.BP2048.Put(s.RB)\n\t}\n\tif s.network == \"udp\" {\n\t\tx.BP65507.Put(s.WB)\n\t\tx.BP65507.Put(s.RB)\n\t}\n}\n\nfunc (s *StreamServer) Network() string {\n\treturn s.network\n}\n\nfunc (s *StreamServer) Src() string {\n\treturn s.src\n}\n\nfunc (s *StreamServer) Dst() string {\n\treturn s.dst\n}\n"
        },
        {
          "name": "test_test.go",
          "type": "blob",
          "size": 0.798828125,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"testing\"\n\n\t\"github.com/phuslu/iploc\"\n)\n\nfunc TestTest(t *testing.T) {\n\tlog.Printf(\"%#v\\n\", iploc.Country(net.ParseIP(\"8.8.8.8\")))\n}\n"
        },
        {
          "name": "util.go",
          "type": "blob",
          "size": 2.3125,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"crypto/sha256\"\n\t\"errors\"\n\t\"hash\"\n\t\"net\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/txthinking/socks5\"\n)\n\nfunc ErrorReply(r *socks5.Request, c *net.TCPConn, e error) error {\n\tvar p *socks5.Reply\n\tif r.Atyp == socks5.ATYPIPv4 || r.Atyp == socks5.ATYPDomain {\n\t\tp = socks5.NewReply(socks5.RepConnectionRefused, socks5.ATYPIPv4, net.IPv4zero, []byte{0x00, 0x00})\n\t} else {\n\t\tp = socks5.NewReply(socks5.RepConnectionRefused, socks5.ATYPIPv6, net.IPv6zero, []byte{0x00, 0x00})\n\t}\n\tif _, err := p.WriteTo(c); err != nil {\n\t\treturn err\n\t}\n\treturn e\n}\n\nfunc GetAddressFromURL(s string) (string, error) {\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif _, _, err := net.SplitHostPort(u.Host); err == nil {\n\t\treturn u.Host, nil\n\t}\n\treturn net.JoinHostPort(u.Host, \"80\"), nil\n}\n\nfunc Conn2Conn(c, rc net.Conn, bufsize, timeout int) {\n\tgo func() {\n\t\tbf := make([]byte, bufsize)\n\t\tfor {\n\t\t\tif timeout != 0 {\n\t\t\t\tif err := rc.SetDeadline(time.Now().Add(time.Duration(timeout) * time.Second)); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\ti, err := rc.Read(bf)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif _, err := c.Write(bf[0:i]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tbf := make([]byte, bufsize)\n\tfor {\n\t\tif timeout != 0 {\n\t\t\tif err := c.SetDeadline(time.Now().Add(time.Duration(timeout) * time.Second)); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\ti, err := c.Read(bf)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tif _, err := rc.Write(bf[0:i]); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\treturn\n}\n\nfunc SHA256Bytes(s []byte) ([]byte, error) {\n\tvar h hash.Hash\n\th = sha256.New()\n\tn, err := h.Write(s)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif n != len(s) {\n\t\treturn nil, errors.New(\"Write length error\")\n\t}\n\tr := h.Sum(nil)\n\treturn r, nil\n}\n"
        },
        {
          "name": "waitreaderr.go",
          "type": "blob",
          "size": 0.779296875,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport \"net\"\n\nfunc WaitReadErr(conn net.Conn) {\n\tvar b [2048]byte\n\tfor {\n\t\tif _, err := conn.Read(b[:]); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "websocket.go",
          "type": "blob",
          "size": 5.380859375,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"crypto/rand\"\n\t\"crypto/sha1\"\n\t\"crypto/tls\"\n\t\"encoding/base64\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\tutls \"github.com/refraction-networking/utls\"\n\n\t\"github.com/txthinking/x\"\n\tx1 \"github.com/txthinking/x\"\n)\n\nfunc WebSocketDial(src, dst, addr, host, path string, tc *tls.Config, timeout int, tlsfingerprint utls.ClientHelloID, fragmentMinLength, fragmentMaxLength, fragmentMinDelay, fragmentMaxDelay int64) (net.Conn, error) {\n\tvar c net.Conn\n\tvar err error\n\tif src == \"\" || dst == \"\" {\n\t\tc, err = DialTCP(\"tcp\", \"\", addr)\n\t}\n\tif src != \"\" && dst != \"\" {\n\t\tc, err = NATDial(\"tcp\", src, dst, addr)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif timeout != 0 {\n\t\tif err := c.SetDeadline(time.Now().Add(time.Duration(timeout) * time.Second)); err != nil {\n\t\t\tc.Close()\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif tc != nil {\n\t\tif fragmentMinLength != 0 && fragmentMaxLength != 0 && fragmentMinDelay != 0 && fragmentMaxDelay != 0 {\n\t\t\tc = &TLSFragmentConn{\n\t\t\t\tConn:      c,\n\t\t\t\tMinLength: fragmentMinLength,\n\t\t\t\tMaxLength: fragmentMaxLength,\n\t\t\t\tMinDelay:  fragmentMinDelay,\n\t\t\t\tMaxDelay:  fragmentMaxDelay,\n\t\t\t}\n\t\t}\n\t\tif tlsfingerprint.Client == \"\" {\n\t\t\tc1 := tls.Client(c, tc)\n\t\t\tif err := c1.Handshake(); err != nil {\n\t\t\t\tc1.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ts := host\n\t\t\th, _, err := net.SplitHostPort(host)\n\t\t\tif err == nil {\n\t\t\t\ts = h\n\t\t\t}\n\t\t\tif !tc.InsecureSkipVerify {\n\t\t\t\tif err := c1.VerifyHostname(s); err != nil {\n\t\t\t\t\tc1.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\tc = c1\n\t\t}\n\t\tif tlsfingerprint.Client != \"\" {\n\t\t\tc1 := utls.UClient(c, &utls.Config{\n\t\t\t\tServerName:         tc.ServerName,\n\t\t\t\tNextProtos:         tc.NextProtos,\n\t\t\t\tInsecureSkipVerify: tc.InsecureSkipVerify,\n\t\t\t\tRootCAs:            tc.RootCAs,\n\t\t\t}, tlsfingerprint)\n\t\t\ts := host\n\t\t\th, _, err := net.SplitHostPort(host)\n\t\t\tif err == nil {\n\t\t\t\ts = h\n\t\t\t}\n\t\t\tif err := c1.BuildHandshakeState(); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tfor _, v := range c1.Extensions {\n\t\t\t\tif vv, ok := v.(*utls.ALPNExtension); ok {\n\t\t\t\t\tif tlsfingerprint.Client == \"Chrome\" {\n\t\t\t\t\t\tvv.AlpnProtocols = []string{\"http/1.1\"}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif err := c1.BuildHandshakeState(); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif err := c1.Handshake(); err != nil {\n\t\t\t\tc1.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif !tc.InsecureSkipVerify {\n\t\t\t\tif err := c1.VerifyHostname(s); err != nil {\n\t\t\t\t\tc1.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\tc = c1\n\t\t}\n\t}\n\tp := x1.BP16.Get().([]byte)\n\tif _, err := io.ReadFull(rand.Reader, p); err != nil {\n\t\tx1.BP16.Put(p)\n\t\tc.Close()\n\t\treturn nil, err\n\t}\n\tk := base64.StdEncoding.EncodeToString(p)\n\tx1.BP16.Put(p)\n\tb := make([]byte, 0, 300)\n\tb = append(b, []byte(\"GET \"+path+\" HTTP/1.1\\r\\n\")...)\n\tb = append(b, []byte(fmt.Sprintf(\"Host: %s\\r\\n\", host))...)\n\tb = append(b, []byte(\"Upgrade: websocket\\r\\n\")...)\n\tb = append(b, []byte(\"Connection: Upgrade\\r\\n\")...)\n\tb = append(b, []byte(fmt.Sprintf(\"Sec-WebSocket-Key: %s\\r\\n\", k))...)\n\tb = append(b, []byte(\"Sec-WebSocket-Version: 13\\r\\n\\r\\n\")...)\n\tif _, err := c.Write(b); err != nil {\n\t\tc.Close()\n\t\treturn nil, err\n\t}\n\tr := bufio.NewReader(c)\n\tfor {\n\t\tb, err = r.ReadBytes('\\n')\n\t\tif err != nil {\n\t\t\tc.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\tb = bytes.TrimSpace(b)\n\t\tif len(b) == 0 {\n\t\t\tbreak\n\t\t}\n\t\tif bytes.HasPrefix(b, []byte(\"HTTP/1.1 \")) {\n\t\t\tif !bytes.Contains(b, []byte(\"101\")) {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, errors.New(string(b))\n\t\t\t}\n\t\t}\n\t\tif bytes.HasPrefix(b, []byte(\"Sec-WebSocket-Accept: \")) {\n\t\t\th := sha1.New()\n\t\t\th.Write([]byte(k))\n\t\t\th.Write([]byte(\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"))\n\t\t\tak := base64.StdEncoding.EncodeToString(h.Sum(nil))\n\t\t\tif string(b[len(\"Sec-WebSocket-Accept: \"):]) != ak {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, errors.New(string(b))\n\t\t\t}\n\t\t}\n\t}\n\treturn c, nil\n}\n\ntype TLSFragmentConn struct {\n\tnet.Conn\n\tMinLength int64\n\tMaxLength int64\n\tMinDelay  int64\n\tMaxDelay  int64\n\tBuf       []byte\n\tL         int\n\tFinished  bool\n}\n\nfunc (c *TLSFragmentConn) Write(b []byte) (int, error) {\n\tif c.Finished {\n\t\treturn c.Conn.Write(b)\n\t}\n\tb1 := make([]byte, len(c.Buf)+len(b))\n\tcopy(b1, c.Buf)\n\tcopy(b1[len(c.Buf):], b)\n\tc.Buf = b1\n\tif len(c.Buf) < 5 {\n\t\treturn len(b), nil\n\t}\n\tif c.L == 0 {\n\t\tc.L = int(binary.BigEndian.Uint16(c.Buf[3:5]))\n\t}\n\tif len(c.Buf) < 5+c.L {\n\t\treturn len(b), nil\n\t}\n\ti := 0\n\tfor {\n\t\tr, err := x.CryptoRandom(c.MinLength, c.MaxLength)\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t\tl := int(r)\n\t\tif i+l > 5+c.L {\n\t\t\tl = 5 + c.L - i\n\t\t}\n\t\tif _, err := c.Conn.Write(c.Buf[i : i+l]); err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t\ti += l\n\t\tif i == 5+c.L {\n\t\t\tbreak\n\t\t}\n\t\tt, err := x.CryptoRandom(c.MinDelay, c.MaxDelay)\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t\ttime.Sleep(time.Duration(t) * time.Microsecond)\n\t}\n\tif len(c.Buf) > i {\n\t\tif _, err := c.Conn.Write(c.Buf[i:]); err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t}\n\tc.Finished = true\n\treturn len(b), nil\n}\n"
        },
        {
          "name": "wsclient.go",
          "type": "blob",
          "size": 4.6552734375,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/url\"\n\n\tutls \"github.com/refraction-networking/utls\"\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/txthinking/socks5\"\n)\n\ntype WSClient struct {\n\tServer            *socks5.Server\n\tServerHost        string\n\tServerAddress     string\n\tTLSConfig         *tls.Config\n\tTLSFingerprint    utls.ClientHelloID\n\tPassword          []byte\n\tTCPTimeout        int\n\tUDPTimeout        int\n\tPath              string\n\tWithoutBrook      bool\n\tPacketConnFactory *PacketConnFactory\n}\n\nfunc NewWSClient(addr, ip, server, password string, tcpTimeout, udpTimeout int, withoutbrook bool) (*WSClient, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\ts5, err := socks5.NewClassicServer(addr, ip, \"\", \"\", tcpTimeout, udpTimeout)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tu, err := url.Parse(server)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tpath := u.Path\n\tif path == \"\" {\n\t\tpath = \"/ws\"\n\t}\n\tp := []byte(password)\n\tif withoutbrook {\n\t\tp, err = SHA256Bytes([]byte(password))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tx := &WSClient{\n\t\tServerHost:        u.Host,\n\t\tServer:            s5,\n\t\tPassword:          p,\n\t\tTCPTimeout:        tcpTimeout,\n\t\tUDPTimeout:        udpTimeout,\n\t\tPath:              path,\n\t\tWithoutBrook:      withoutbrook,\n\t\tPacketConnFactory: NewPacketConnFactory(),\n\t}\n\tif u.Scheme == \"wss\" {\n\t\th, _, err := net.SplitHostPort(u.Host)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tx.TLSConfig = &tls.Config{ServerName: h, NextProtos: []string{\"http/1.1\"}}\n\t}\n\treturn x, nil\n}\n\nfunc (x *WSClient) ListenAndServe() error {\n\treturn x.Server.ListenAndServe(x)\n}\n\nfunc (x *WSClient) TCPHandle(s *socks5.Server, c *net.TCPConn, r *socks5.Request) error {\n\tif r.Cmd == socks5.CmdConnect {\n\t\tsa := x.ServerAddress\n\t\tif sa == \"\" {\n\t\t\tsa = x.ServerHost\n\t\t}\n\t\trc, err := WebSocketDial(\"\", \"\", sa, x.ServerHost, x.Path, x.TLSConfig, x.TCPTimeout, x.TLSFingerprint, 0, 0, 0, 0)\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\tdefer rc.Close()\n\t\tdst := make([]byte, 0, 1+len(r.DstAddr)+2)\n\t\tdst = append(dst, r.Atyp)\n\t\tdst = append(dst, r.DstAddr...)\n\t\tdst = append(dst, r.DstPort...)\n\t\tvar sc Exchanger\n\t\tif !x.WithoutBrook {\n\t\t\tsc, err = NewStreamClient(\"tcp\", x.Password, c.RemoteAddr().String(), rc, x.TCPTimeout, dst)\n\t\t}\n\t\tif x.WithoutBrook {\n\t\t\tsc, err = NewSimpleStreamClient(\"tcp\", x.Password, c.RemoteAddr().String(), rc, x.TCPTimeout, dst)\n\t\t}\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\tdefer sc.Clean()\n\t\ta, address, port, err := socks5.ParseAddress(rc.LocalAddr().String())\n\t\tif err != nil {\n\t\t\treturn ErrorReply(r, c, err)\n\t\t}\n\t\trp := socks5.NewReply(socks5.RepSuccess, a, address, port)\n\t\tif _, err := rp.WriteTo(c); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := sc.Exchange(c); err != nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn nil\n\t}\n\tif r.Cmd == socks5.CmdUDP {\n\t\t_, err := r.UDP(c, x.Server.ServerAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\treturn socks5.ErrUnsupportCmd\n}\n\nfunc (x *WSClient) UDPHandle(s *socks5.Server, addr *net.UDPAddr, d *socks5.Datagram) error {\n\tdstb := append(append([]byte{d.Atyp}, d.DstAddr...), d.DstPort...)\n\tconn, err := x.PacketConnFactory.Handle(addr, dstb, d.Data, func(b []byte) (int, error) {\n\t\td.Data = b\n\t\treturn s.UDPConn.WriteToUDP(d.Bytes(), addr)\n\t}, x.UDPTimeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif conn == nil {\n\t\treturn nil\n\t}\n\tdefer conn.Close()\n\tsa := x.ServerAddress\n\tif sa == \"\" {\n\t\tsa = x.ServerHost\n\t}\n\trc, err := WebSocketDial(addr.String(), d.Address(), sa, x.ServerHost, x.Path, x.TLSConfig, x.TCPTimeout, x.TLSFingerprint, 0, 0, 0, 0)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tvar sc Exchanger\n\tif !x.WithoutBrook {\n\t\tsc, err = NewStreamClient(\"udp\", x.Password, addr.String(), rc, x.UDPTimeout, dstb)\n\t}\n\tif x.WithoutBrook {\n\t\tsc, err = NewSimpleStreamClient(\"udp\", x.Password, addr.String(), rc, x.UDPTimeout, dstb)\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sc.Clean()\n\tif err := sc.Exchange(conn); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (x *WSClient) Shutdown() error {\n\treturn x.Server.Shutdown()\n}\n"
        },
        {
          "name": "wsserver.go",
          "type": "blob",
          "size": 5.3662109375,
          "content": "// Copyright (c) 2016-present Cloud <cloud@txthinking.com>\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 3 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npackage brook\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gorilla/mux\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/txthinking/brook/limits\"\n\t\"github.com/urfave/negroni\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\ntype WSServer struct {\n\tPassword      []byte\n\tDomain        string\n\tAddr          string\n\tHTTPServer    *http.Server\n\tTCPTimeout    int\n\tUDPTimeout    int\n\tPath          string\n\tCert          []byte\n\tCertKey       []byte\n\tWithoutBrook  bool\n\tXForwardedFor bool\n}\n\nfunc NewWSServer(addr, password, domain, path string, tcpTimeout, udpTimeout int, withoutbrook bool) (*WSServer, error) {\n\tif err := limits.Raise(); err != nil {\n\t\tLog(Error{\"when\": \"try to raise system limits\", \"warning\": err.Error()})\n\t}\n\tp := []byte(password)\n\tif withoutbrook {\n\t\tvar err error\n\t\tp, err = SHA256Bytes([]byte(password))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\ts := &WSServer{\n\t\tPassword:     p,\n\t\tAddr:         addr,\n\t\tDomain:       domain,\n\t\tPath:         path,\n\t\tTCPTimeout:   tcpTimeout,\n\t\tUDPTimeout:   udpTimeout,\n\t\tWithoutBrook: withoutbrook,\n\t}\n\treturn s, nil\n}\n\nfunc (s *WSServer) ListenAndServe() error {\n\tr := mux.NewRouter()\n\tr.NotFoundHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(404)\n\t\treturn\n\t})\n\tr.Methods(\"GET\").Path(s.Path).Handler(s)\n\n\tn := negroni.New()\n\tn.Use(negroni.NewRecovery())\n\tn.UseFunc(func(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {\n\t\tw.Header().Set(\"Server\", \"nginx\")\n\t\tnext(w, r)\n\t})\n\tn.UseHandler(r)\n\n\tif s.Domain == \"\" {\n\t\ts.HTTPServer = &http.Server{\n\t\t\tAddr:           s.Addr,\n\t\t\tReadTimeout:    5 * time.Second,\n\t\t\tWriteTimeout:   10 * time.Second,\n\t\t\tIdleTimeout:    120 * time.Second,\n\t\t\tMaxHeaderBytes: 1 << 20,\n\t\t\tHandler:        n,\n\t\t}\n\t\treturn s.HTTPServer.ListenAndServe()\n\t}\n\tvar t *tls.Config\n\tif s.Cert == nil || s.CertKey == nil {\n\t\tm := autocert.Manager{\n\t\t\tCache:      autocert.DirCache(\".letsencrypt\"),\n\t\t\tPrompt:     autocert.AcceptTOS,\n\t\t\tHostPolicy: autocert.HostWhitelist(s.Domain),\n\t\t\tEmail:      \"cloud@txthinking.com\",\n\t\t}\n\t\tgo func() {\n\t\t\terr := http.ListenAndServe(\":80\", m.HTTPHandler(nil))\n\t\t\tif err != nil {\n\t\t\t\tLog(err)\n\t\t\t}\n\t\t}()\n\t\tt = &tls.Config{GetCertificate: m.GetCertificate, ServerName: s.Domain, NextProtos: []string{\"http/1.1\"}}\n\t}\n\tif s.Cert != nil && s.CertKey != nil {\n\t\tct, err := tls.X509KeyPair(s.Cert, s.CertKey)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tt = &tls.Config{Certificates: []tls.Certificate{ct}, ServerName: s.Domain, NextProtos: []string{\"http/1.1\"}}\n\t}\n\ts.HTTPServer = &http.Server{\n\t\tAddr:         s.Addr,\n\t\tReadTimeout:  5 * time.Second,\n\t\tWriteTimeout: 10 * time.Second,\n\t\tIdleTimeout:  120 * time.Second,\n\t\tHandler:      n,\n\t\tTLSConfig:    t,\n\t}\n\tif s.Cert == nil || s.CertKey == nil {\n\t\tgo func() {\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t\tc := &http.Client{\n\t\t\t\tTimeout: 10 * time.Second,\n\t\t\t}\n\t\t\t_, _ = c.Get(\"https://\" + s.Domain + s.Addr)\n\t\t}()\n\t}\n\treturn s.HTTPServer.ListenAndServeTLS(\"\", \"\")\n}\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  65507,\n\tWriteBufferSize: 65507,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc (s *WSServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\treturn\n\t}\n\tc := conn.UnderlyingConn()\n\tdefer c.Close()\n\tfrom := c.RemoteAddr().String()\n\tif s.XForwardedFor && r.Header.Get(\"X-Forwarded-For\") != \"\" {\n\t\ts1 := strings.Split(r.Header.Get(\"X-Forwarded-For\"), \", \")[0]\n\t\th, _, err := net.SplitHostPort(s1)\n\t\tif err != nil {\n\t\t\th = s1\n\t\t}\n\t\tif net.ParseIP(h) != nil {\n\t\t\t_, p, err := net.SplitHostPort(from)\n\t\t\tif err == nil {\n\t\t\t\tfrom = net.JoinHostPort(h, p)\n\t\t\t}\n\t\t}\n\t}\n\tvar ss Exchanger\n\tif !s.WithoutBrook {\n\t\tss, err = NewStreamServer(s.Password, from, c, s.TCPTimeout, s.UDPTimeout)\n\t}\n\tif s.WithoutBrook {\n\t\tss, err = NewSimpleStreamServer(s.Password, from, c, s.TCPTimeout, s.UDPTimeout)\n\t}\n\tif err != nil {\n\t\tLog(Error{\"from\": from, \"error\": err.Error()})\n\t\treturn\n\t}\n\tdefer ss.Clean()\n\tif ss.Network() == \"tcp\" {\n\t\tif err := s.TCPHandle(ss); err != nil {\n\t\t\tLog(Error{\"from\": from, \"dst\": ss.Dst(), \"error\": err.Error()})\n\t\t}\n\t}\n\tif ss.Network() == \"udp\" {\n\t\tif err := s.UDPHandle(ss); err != nil {\n\t\t\tLog(Error{\"from\": from, \"dst\": ss.Dst(), \"error\": err.Error()})\n\t\t}\n\t}\n}\n\nfunc (s *WSServer) TCPHandle(ss Exchanger) error {\n\trc, err := DialTCP(\"tcp\", \"\", ss.Dst())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tif err := ss.Exchange(rc); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (s *WSServer) UDPHandle(ss Exchanger) error {\n\trc, err := NATDial(\"udp\", ss.Src(), ss.Dst(), ss.Dst())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rc.Close()\n\tif err := ss.Exchange(rc); err != nil {\n\t\treturn nil\n\t}\n\treturn nil\n}\n\nfunc (s *WSServer) Shutdown() error {\n\treturn s.HTTPServer.Shutdown(context.Background())\n}\n"
        }
      ]
    }
  ]
}