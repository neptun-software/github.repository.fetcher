{
  "metadata": {
    "timestamp": 1736568060858,
    "page": 197,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Jguer/yay",
      "stars": 11416,
      "defaultBranch": "next",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0595703125,
          "content": "*\n!*.go\n!pkg\n!go.mod\n!go.sum\n!Makefile\n!po\n!doc\n!completions\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2890625,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n.vscode\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n*.exe\n*.test\n*.prof\nyay\nyay_*/\n*.tar.gz\nqemu-*\n.go\n\n# Locale\n*.mo\n*.pot\n*.po~\n*.pprof\n\nnode_modules/\nxgotext\n.devcontainer/"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 1.9814453125,
          "content": "linters-settings:\n  dupl:\n    threshold: 100\n  funlen:\n    lines: 100\n    statements: 50\n  goconst:\n    min-len: 3\n    min-occurrences: 4\n  gocritic:\n    enabled-tags:\n      - diagnostic\n      - experimental\n      - opinionated\n      - performance\n      - style\n  gocyclo:\n    min-complexity: 15\n  goimports:\n    local-prefixes: github.com/Jguer/yay/v12\n  gomnd:\n    checks:\n      - argument\n      - case\n      - condition\n      - return\n    ignored-numbers:\n      - \"0\"\n      - \"1\"\n      - \"2\"\n      - \"3\"\n    ignored-functions:\n      - strings.SplitN\n  lll:\n    line-length: 140\n  misspell:\n    locale: US\n  nolintlint:\n    allow-unused: false # report any unused nolint directives\n    require-explanation: false # don't require an explanation for nolint directives\n    require-specific: false # don't require nolint directives to be specific about which linter is being skipped\n\nlinters:\n  # please, do not use `enable-all`: it's deprecated and will be removed soon.\n  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint\n  disable-all: true\n  enable:\n    - forbidigo\n    - bodyclose\n    - dogsled\n    - dupl\n    - errorlint\n    - errcheck\n    # - funlen # TOFIX\n    - gochecknoinits\n    # - goconst # TOFIX\n    - gocritic\n    # - gocyclo # TOFIX\n    - gofmt\n    - goimports\n    # - gomnd # TOFIX\n    - goprintffuncname\n    - gosec\n    - gosimple\n    - govet\n    - ineffassign\n    - lll\n    - misspell\n    - nakedret\n    - noctx\n    - nolintlint\n    - staticcheck\n    - stylecheck\n    - typecheck\n    - unconvert\n    - unparam\n    - unused\n    - whitespace\n\nrun:\n  go: \"1.20\"\n  timeout: \"10m\"\n  forbidigo:\n    forbid:\n      - p: ^fmt\\.Print.*$\n        msg: Do not commit print statements.\n\nissues:\n  exclude-rules:\n    - path: (.+)_test.go\n      linters:\n        - lll\n        - revive\n        - wsl\n        - govet\n        - godot\n        - errcheck\n        - stylecheck\n        - dupl\n        - gocritic\n        - gochecknoinits\n        - errorlint\n\n  exclude:\n    - G204\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.7177734375,
          "content": "default_stages: [commit]\n\nrepos:\n  - repo: https://github.com/dnephin/pre-commit-golang\n    rev: v0.5.1\n    hooks:\n      - id: go-fmt\n      - id: golangci-lint\n      - id: go-unit-tests\n      - id: go-build\n\n  - repo: https://github.com/pre-commit/mirrors-prettier\n    rev: v4.0.0-alpha.8 # Use the sha or tag you want to point at\n    hooks:\n      - id: prettier\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0 # Use the ref you want to point at\n    hooks:\n      - id: trailing-whitespace\n      - id: check-json\n      - id: check-yaml\n      - id: check-added-large-files\n\n  - repo: https://github.com/commitizen-tools/commitizen\n    rev: v3.15.0\n    hooks:\n      - id: commitizen\n        stages: [commit-msg]\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.0732421875,
          "content": "# Contributing to yay\n\n## Translation\n\n[Transifex](https://www.transifex.com/yay-1/yay/)\n\n## Quality Assurance\n\n```sh\npacman -S --needed git base-devel\ngit clone https://aur.archlinux.org/yay-git.git\ncd yay-git\nmakepkg -si\n```\n\nInstalling `yay-git` and using issues to help determine what's broken is already\na very big help.\n\n## Development\n\nContributors are always welcome!\n\nIf you plan to make any large changes or changes that may not be 100% agreed\non, we suggest opening an issue detailing your ideas first.\n\nOtherwise send us a pull request and we will be happy to review it.\n\n### Vision\n\nYay is based on the design of [yaourt](https://github.com/archlinuxfr/yaourt), [apacman](https://github.com/oshazard/apacman) and [pacaur](https://github.com/rmarquis/pacaur). It is developed with these objectives in mind:\n\n- Provide an interface for pacman\n- Yaourt-style interactive search/install\n- Minimal dependencies\n- Minimize user input\n\n### Dependencies\n\nYay depends on:\n\n- go (make only)\n- git\n- base-devel\n- pacman\n\nNote: Yay also depends on a few other projects, these are pulled as go modules.\n\n### Building\n\nRun `make` to build Yay. This command will generate a binary called `yay` in\nthe same directory as the Makefile.\n\n#### Docker Release\n\n`make docker-release` will build the release packages for `aarch64` and for `x86_64`.\n\nFor `aarch64` to run on a `x86_64` platform `qemu-user-static(-bin)` must be\ninstalled.\n\n```\ndocker run --rm --privileged multiarch/qemu-user-static:register --reset\n```\n\nwill register QEMU in the build agent. ARM builds tend to crash sometimes but\nrepeated runs tend to succeed.\n\n### Code Style\n\nAll code should be formatted through `go fmt`. This tool will automatically\nformat code for you. We recommend, however, that you write code in the proper\nstyle and use `go fmt` only to catch mistakes.\n\nUse [pre-commit](https://pre-commit.com/) to validate your commits against the various\nlinters configured for this repository.\n\n### Testing\n\nRun `make test` to test Yay. This command will verify that the code is\nformatted correctly, run the code through `go vet`, and run unit tests.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.203125,
          "content": "FROM docker.io/jguer/yay-builder:latest\nLABEL maintainer=\"Jguer,docker@jguer.space\"\n\nARG VERSION\nARG PREFIX\nARG ARCH\n\nWORKDIR /app\n\nCOPY . .\n\nRUN make release VERSION=${VERSION} PREFIX=${PREFIX} ARCH=${ARCH}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3173828125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.6708984375,
          "content": "export GO111MODULE=on\nGOPROXY ?= https://proxy.golang.org,direct\nexport GOPROXY\n\nBUILD_TAG = devel\nARCH ?= $(shell uname -m)\nBIN := yay\nDESTDIR :=\nGO ?= go\nPKGNAME := yay\nPREFIX := /usr/local\n\nMAJORVERSION := 12\nMINORVERSION := 0\nPATCHVERSION := 0\nVERSION ?= ${MAJORVERSION}.${MINORVERSION}.${PATCHVERSION}\n\nLOCALEDIR := po\nSYSTEMLOCALEPATH := $(PREFIX)/share/locale/\n\n# ls -1 po | sed -e 's/\\.po$//' | paste -sd \" \"\nLANGS := ca cs de en es eu fr_FR he id it_IT ja ko pl_PL pt_BR pt ru_RU ru sv tr uk zh_CN zh_TW\nPOTFILE := default.pot\nPOFILES := $(addprefix $(LOCALEDIR)/,$(addsuffix .po,$(LANGS)))\nMOFILES := $(POFILES:.po=.mo)\n\nFLAGS ?= -trimpath -mod=readonly -modcacherw\nEXTRA_FLAGS ?= -buildmode=pie\nLDFLAGS := -X \"main.yayVersion=${VERSION}\" -X \"main.localePath=${SYSTEMLOCALEPATH}\" -linkmode=external -compressdwarf=false\n\nRELEASE_DIR := ${PKGNAME}_${VERSION}_${ARCH}\nPACKAGE := $(RELEASE_DIR).tar.gz\nSOURCES ?= $(shell find . -name \"*.go\" -type f)\n\n.PRECIOUS: ${LOCALEDIR}/%.po\n\n.PHONY: default\ndefault: build\n\n.PHONY: all\nall: | clean release\n\n.PHONY: clean\nclean:\n\t$(GO) clean $(FLAGS) -i ./...\n\trm -rf $(BIN) $(PKGNAME)_*\n\n.PHONY: test_lint\ntest_lint: test lint\n\n.PHONY: test\ntest:\n\t$(GO) test -race -covermode=atomic $(FLAGS) ./...\n\n.PHONY: test-integration\ntest-integration:\n\t$(GO) test -tags=integration $(FLAGS) ./...\n\n.PHONY: build\nbuild: $(BIN)\n\n.PHONY: release\nrelease: $(PACKAGE)\n\n.PHONY: docker-release-all\ndocker-release-all:\n\tmake docker-release-armv7h ARCH=armv7h\n\tmake docker-release-x86_64 ARCH=x86_64\n\tmake docker-release-aarch64 ARCH=aarch64\n\ndocker-release:\n\tdocker create --name yay-$(ARCH) yay:${ARCH} /bin/sh\n\tdocker cp yay-$(ARCH):/app/${PACKAGE} $(PACKAGE)\n\tdocker container rm yay-$(ARCH)\n\n.PHONY: docker-build\ndocker-build:\n\tdocker build -t yay-$(ARCH):${VERSION} .\n\tdocker run -e=\"ARCH=$(ARCH)\" --name yay-$(ARCH) yay-$(ARCH):${VERSION} make build VERSION=${VERSION} PREFIX=${PREFIX}\n\tdocker cp yay-$(ARCH):/app/${BIN} $(BIN)\n\tdocker container rm yay-$(ARCH)\n\n.PHONY: lint\nlint:\n\tGOFLAGS=\"$(FLAGS)\" golangci-lint run ./...\n\n.PHONY: fmt\nfmt:\n\tgo fmt ./...\n\n.PHONY: install\ninstall: build ${MOFILES}\n\tinstall -Dm755 ${BIN} $(DESTDIR)$(PREFIX)/bin/${BIN}\n\tinstall -Dm644 doc/${PKGNAME}.8 $(DESTDIR)$(PREFIX)/share/man/man8/${PKGNAME}.8\n\tinstall -Dm644 completions/bash $(DESTDIR)$(PREFIX)/share/bash-completion/completions/${PKGNAME}\n\tinstall -Dm644 completions/zsh $(DESTDIR)$(PREFIX)/share/zsh/site-functions/_${PKGNAME}\n\tinstall -Dm644 completions/fish $(DESTDIR)$(PREFIX)/share/fish/vendor_completions.d/${PKGNAME}.fish\n\tfor lang in ${LANGS}; do \\\n\t\tinstall -Dm644 ${LOCALEDIR}/$${lang}.mo $(DESTDIR)$(PREFIX)/share/locale/$$lang/LC_MESSAGES/${PKGNAME}.mo; \\\n\tdone\n\n.PHONY: uninstall\nuninstall:\n\trm -f $(DESTDIR)$(PREFIX)/bin/${BIN}\n\trm -f $(DESTDIR)$(PREFIX)/share/man/man8/${PKGNAME}.8\n\trm -f $(DESTDIR)$(PREFIX)/share/bash-completion/completions/${PKGNAME}\n\trm -f $(DESTDIR)$(PREFIX)/share/zsh/site-functions/_${PKGNAME}\n\trm -f $(DESTDIR)$(PREFIX)/share/fish/vendor_completions.d/${PKGNAME}.fish\n\tfor lang in ${LANGS}; do \\\n\t\trm -f $(DESTDIR)$(PREFIX)/share/locale/$$lang/LC_MESSAGES/${PKGNAME}.mo; \\\n\tdone\n\n$(BIN): $(SOURCES)\n\t$(GO) build $(FLAGS) -ldflags '$(LDFLAGS)' $(EXTRA_FLAGS) -o $@\n\n$(RELEASE_DIR):\n\tmkdir $(RELEASE_DIR)\n\n$(PACKAGE): $(BIN) $(RELEASE_DIR) ${MOFILES}\n\tstrip ${BIN}\n\tcp -t $(RELEASE_DIR) ${BIN} doc/${PKGNAME}.8 completions/* ${MOFILES}\n\ttar -czvf $(PACKAGE) $(RELEASE_DIR)\n\nlocale:\n\txgotext -in . -out po\n\tmv po/default.pot po/en.po\n\tfor lang in ${LANGS}; do \\\n\t\ttest -f po/$$lang.po || msginit --no-translator -l po/$$lang.po -i po/${POTFILE} -o po/$$lang.po; \\\n\t\tmsgmerge -U po/$$lang.po po/${POTFILE}; \\\n\t\ttouch po/$$lang.po; \\\n\tdone\n\n${LOCALEDIR}/%.mo: ${LOCALEDIR}/%.po\n\tmsgfmt $< -o $@\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.8271484375,
          "content": "[![yay](https://img.shields.io/aur/version/yay?color=1793d1&label=yay&logo=arch-linux&style=for-the-badge)](https://aur.archlinux.org/packages/yay/)\n[![yay-bin](https://img.shields.io/aur/version/yay-bin?color=1793d1&label=yay-bin&logo=arch-linux&style=for-the-badge)](https://aur.archlinux.org/packages/yay-bin/)\n[![yay-git](https://img.shields.io/aur/version/yay-git?color=1793d1&label=yay-git&logo=arch-linux&style=for-the-badge)](https://aur.archlinux.org/packages/yay-git/)\n![AUR votes](https://img.shields.io/aur/votes/yay?color=333333&style=for-the-badge)\n[![GitHub license](https://img.shields.io/github/license/jguer/yay?color=333333&style=for-the-badge)](https://github.com/Jguer/yay/blob/master/LICENSE)\n\n# Yay\n\nYet Another Yogurt - An AUR Helper Written in Go\n\n### Help translate yay: [Transifex](https://www.transifex.com/yay-1/yay/)\n\n## Features\n\n- Advanced dependency solving\n- PKGBUILD downloading from ABS or AUR\n- Completions for AUR packages\n- Query user up-front for all input (prior to starting builds)\n- Narrow search (`yay linux header` will first search `linux` and then narrow on `header`)\n- Find matching package providers during search and allow selection\n- Remove make dependencies at the end of the build process\n- Build local PKGBUILDs with AUR dependencies\n- Un/Vote for packages\n\n[![asciicast](https://asciinema.org/a/399431.svg)](https://asciinema.org/a/399431)\n\n[![asciicast](https://asciinema.org/a/399433.svg)](https://asciinema.org/a/399433)\n\n## Installation\n\nIf you are migrating from another AUR helper, you can simply install Yay with that helper.\n\n> [!WARNING]  \n> We are using `sudo` in these examples, you can switch that out for a different privilege escalation tool.\n\n### Source\n\nThe initial installation of Yay can be done by cloning the PKGBUILD and\nbuilding with makepkg:\n\nWe make sure we have the `base-devel` package group installed.\n\n```sh\nsudo pacman -S --needed git base-devel\ngit clone https://aur.archlinux.org/yay.git\ncd yay\nmakepkg -si\n```\n\nIf you want to do all of this at once, we can chain the commands like so:\n\n```sh\nsudo pacman -S --needed git base-devel && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si\n```\n\n### Binary\n\nIf you do not want to compile yay yourself you can use the builds generated by\nGitHub Actions.\n\n```sh\nsudo pacman -S --needed git base-devel\ngit clone https://aur.archlinux.org/yay-bin.git\ncd yay-bin\nmakepkg -si\n```\n\nIf you want to do all of this at once, we can chain the commands like so:\n\n```sh\nsudo pacman -S --needed git base-devel && git clone https://aur.archlinux.org/yay-bin.git && cd yay-bin && makepkg -si\n```\n\n### Other distributions\n\nIf you're using Manjaro or [another distribution that packages `yay`](https://repology.org/project/yay/versions)\nyou can simply install yay using pacman (as root):\n\n```sh\npacman -S --needed git base-devel yay\n```\n> [!WARNING]  \n> distributions sometimes lag updating yay on their repositories.\n\n## First Use\n\n#### Development packages upgrade\n\n- Use `yay -Y --gendb` to generate a development package database for `*-git`\n  packages that were installed without yay.\n  This command should only be run once.\n\n- `yay -Syu --devel` will then check for development package updates\n\n- Use `yay -Y --devel --save` to make development package updates permanently\n  enabled (`yay` and `yay -Syu` will then always check dev packages)\n\n## Examples of Custom Operations\n\n| Command                           | Description                                                                                                |\n| --------------------------------- | ---------------------------------------------------------------------------------------------------------- |\n| `yay`                             | Alias to `yay -Syu`.                                                                                       |\n| `yay <Search Term>`               | Present package-installation selection menu.                                                               |\n| `yay -Bi <dir>`                   | Install dependencies and build a local PKGBUILD.                                                           |\n| `yay -G <AUR Package>`            | Download PKGBUILD from ABS or AUR. (yay v12.0+)                                                            |\n| `yay -Gp <AUR Package>`           | Print to stdout PKGBUILD from ABS or AUR.                                                                  |\n| `yay -Ps`                         | Print system statistics.                                                                                   |\n| `yay -Syu --devel`                | Perform system upgrade, but also check for development package updates.                                    |\n| `yay -Syu --timeupdate`           | Perform system upgrade and use PKGBUILD modification time (not version number) to determine update.        |\n| `yay -Wu <AUR Package>`           | Unvote for package (Requires setting `AUR_USERNAME` and `AUR_PASSWORD` environment variables) (yay v11.3+) |\n| `yay -Wv <AUR Package>`           | Vote for package (Requires setting `AUR_USERNAME` and `AUR_PASSWORD` environment variables). (yay v11.3+)  |\n| `yay -Y --combinedupgrade --save` | Make combined upgrade the default mode.                                                                    |\n| `yay -Y --gendb`                  | Generate development package database used for devel update.                                               |\n| `yay -Yc`                         | Clean unneeded dependencies.                                                                               |\n\n## Frequently Asked Questions\n\n- **Yay does not display colored output. How do I fix it?**\n\n  Make sure you have the `Color` option in your `/etc/pacman.conf`\n  (see issue [#123](https://github.com/Jguer/yay/issues/123)).\n\n- **Sometimes diffs are printed to the terminal, and other times they are paged via less. How do I fix this?**\n\n  Yay uses `git diff` to display diffs, which by default tells less not to\n  page if the output can fit into one terminal length. This behavior can be\n  overridden by exporting your own flags (`export LESS=SRX`).\n\n- **Yay is not asking me to edit PKGBUILDS, and I don't like the diff menu! What can I do?**\n\n  `yay --editmenu --diffmenu=false --save`\n\n- **How can I tell Yay to act only on AUR packages, or only on repo packages?**\n\n  `yay -{OPERATION} --aur`\n  `yay -{OPERATION} --repo`\n\n- **A `Flagged Out Of Date AUR Packages` message is displayed. Why doesn't Yay update them?**\n\n  This message does not mean that updated AUR packages are available. It means\n  the packages have been flagged out of date on the AUR, but\n  their maintainers have not yet updated the `PKGBUILD`s\n  (see [outdated AUR packages](https://wiki.archlinux.org/index.php/Arch_User_Repository#Foo_in_the_AUR_is_outdated.3B_what_should_I_do.3F)).\n\n- **Yay doesn't install dependencies added to a PKGBUILD during installation.**\n\n  Yay resolves all dependencies ahead of time. You are free to edit the\n  PKGBUILD in any way, but any problems you cause are your own and should not be\n  reported unless they can be reproduced with the original PKGBUILD.\n\n- **I know my `-git` package has updates but yay doesn't offer to update it**\n\n  Yay uses an hash cache for development packages. Normally it is updated at the end of the package install with the message `Found git repo`.\n  If you transition between aur helpers and did not install the devel package using yay at some point, it is possible it never got added to the cache. `yay -Y --gendb` will fix the current version of every devel package and start checking from there.\n\n- **I want to help out!**\n\n  Check [CONTRIBUTING.md](./CONTRIBUTING.md) for more information.\n\n## Support\n\nAll support related to Yay should be requested via GitHub issues. Since Yay is not\nofficially supported by Arch Linux, support should not be sought out on the\nforums, AUR comments or other official channels.\n\nA broken AUR package should be reported as a comment on the package's AUR page.\nA package may only be considered broken if it fails to build with makepkg.\n\nReports should be made using makepkg and include the full output as well as any\nother relevant information. Never make reports using Yay or any other external\ntools.\n\n## Images\n\n<p float=\"left\">\n<img src=\"https://rawcdn.githack.com/Jguer/jguer.github.io/77647f396cb7156fd32e30970dbeaf6d6dc7f983/yay/yay.png\" width=\"42%\"/>\n<img src=\"https://rawcdn.githack.com/Jguer/jguer.github.io/77647f396cb7156fd32e30970dbeaf6d6dc7f983/yay/yay-s.png\" width=\"42%\"/>\n</p>\n\n<p float=\"left\">\n<img src=\"https://rawcdn.githack.com/Jguer/jguer.github.io/77647f396cb7156fd32e30970dbeaf6d6dc7f983/yay/yay-y.png\" width=\"42%\"/>\n<img src=\"https://rawcdn.githack.com/Jguer/jguer.github.io/77647f396cb7156fd32e30970dbeaf6d6dc7f983/yay/yay-ps.png\" width=\"42%\"/>\n</p>\n\n### Other AUR helpers/tools\n\n- [paru](https://github.com/morganamilo/paru)\n- [aurutils](https://github.com/AladW/aurutils)\n- [pikaur](https://github.com/actionless/pikaur)\n"
        },
        {
          "name": "ci.Dockerfile",
          "type": "blob",
          "size": 0.5244140625,
          "content": "FROM docker.io/ljmf00/archlinux:devel\nLABEL maintainer=\"Jguer,docker@jguer.space\"\n\nENV GO111MODULE=on\nWORKDIR /app\n\nCOPY go.mod .\n\nRUN pacman-key --init && pacman -Sy && pacman -S --overwrite=* --noconfirm archlinux-keyring && \\\n    pacman -Su --overwrite=* --needed --noconfirm pacman doxygen meson asciidoc go git gcc make sudo base-devel && \\\n    rm -rfv /var/cache/pacman/* /var/lib/pacman/sync/* && \\\n    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.61.0 && \\\n    go mod download\n"
        },
        {
          "name": "clean.go",
          "type": "blob",
          "size": 4.8701171875,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"github.com/Jguer/aur\"\n\tmapset \"github.com/deckarep/golang-set/v2\"\n\t\"github.com/leonelquinteros/gotext\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/exe\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n)\n\n// CleanDependencies removes all dangling dependencies in system.\nfunc cleanDependencies(ctx context.Context, cfg *settings.Configuration,\n\tcmdBuilder exe.ICmdBuilder, cmdArgs *parser.Arguments, dbExecutor db.Executor,\n\tremoveOptional bool,\n) error {\n\thanging := hangingPackages(removeOptional, dbExecutor)\n\tif len(hanging) != 0 {\n\t\treturn cleanRemove(ctx, cfg, cmdBuilder, cmdArgs, hanging)\n\t}\n\n\treturn nil\n}\n\n// CleanRemove sends a full removal command to pacman with the pkgName slice.\nfunc cleanRemove(ctx context.Context, cfg *settings.Configuration,\n\tcmdBuilder exe.ICmdBuilder, cmdArgs *parser.Arguments, pkgNames []string,\n) error {\n\tif len(pkgNames) == 0 {\n\t\treturn nil\n\t}\n\n\targuments := cmdArgs.CopyGlobal()\n\tif err := arguments.AddArg(\"R\", \"s\", \"u\"); err != nil {\n\t\treturn err\n\t}\n\targuments.AddTarget(pkgNames...)\n\n\treturn cmdBuilder.Show(\n\t\tcmdBuilder.BuildPacmanCmd(ctx,\n\t\t\targuments, cfg.Mode, settings.NoConfirm))\n}\n\nfunc syncClean(ctx context.Context, run *runtime.Runtime, cmdArgs *parser.Arguments, dbExecutor db.Executor) error {\n\tkeepInstalled := false\n\tkeepCurrent := false\n\n\t_, removeAll, _ := cmdArgs.GetArg(\"c\", \"clean\")\n\n\tfor _, v := range run.PacmanConf.CleanMethod {\n\t\tif v == \"KeepInstalled\" {\n\t\t\tkeepInstalled = true\n\t\t} else if v == \"KeepCurrent\" {\n\t\t\tkeepCurrent = true\n\t\t}\n\t}\n\n\tif run.Cfg.Mode.AtLeastRepo() {\n\t\tif err := run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm)); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif !run.Cfg.Mode.AtLeastAUR() {\n\t\treturn nil\n\t}\n\n\tvar question string\n\tif removeAll {\n\t\tquestion = gotext.Get(\"Do you want to remove ALL AUR packages from cache?\")\n\t} else {\n\t\tquestion = gotext.Get(\"Do you want to remove all other AUR packages from cache?\")\n\t}\n\n\trun.Logger.Println(gotext.Get(\"\\nBuild directory:\"), run.Cfg.BuildDir)\n\n\tif run.Logger.ContinueTask(question, true, settings.NoConfirm) {\n\t\tif err := cleanAUR(ctx, run, keepInstalled, keepCurrent, removeAll, dbExecutor); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif removeAll {\n\t\treturn nil\n\t}\n\n\tif run.Logger.ContinueTask(gotext.Get(\"Do you want to remove ALL untracked AUR files?\"), true, settings.NoConfirm) {\n\t\treturn cleanUntracked(ctx, run)\n\t}\n\n\treturn nil\n}\n\nfunc cleanAUR(ctx context.Context, run *runtime.Runtime,\n\tkeepInstalled, keepCurrent, removeAll bool, dbExecutor db.Executor,\n) error {\n\trun.Logger.Println(gotext.Get(\"removing AUR packages from cache...\"))\n\n\tinstalledBases := mapset.NewThreadUnsafeSet[string]()\n\tinAURBases := mapset.NewThreadUnsafeSet[string]()\n\n\tremotePackages := dbExecutor.InstalledRemotePackages()\n\n\tfiles, err := os.ReadDir(run.Cfg.BuildDir)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcachedPackages := make([]string, 0, len(files))\n\n\tfor _, file := range files {\n\t\tif !file.IsDir() {\n\t\t\tcontinue\n\t\t}\n\n\t\tcachedPackages = append(cachedPackages, file.Name())\n\t}\n\n\t// Most people probably don't use keep current and that is the only\n\t// case where this is needed.\n\t// Querying the AUR is slow and needs internet so don't do it if we\n\t// don't need to.\n\tif keepCurrent {\n\t\tinfo, errInfo := run.AURClient.Get(ctx, &aur.Query{\n\t\t\tNeedles: cachedPackages,\n\t\t})\n\t\tif errInfo != nil {\n\t\t\treturn errInfo\n\t\t}\n\n\t\tfor i := range info {\n\t\t\tinAURBases.Add(info[i].PackageBase)\n\t\t}\n\t}\n\n\tfor _, pkg := range remotePackages {\n\t\tif pkg.Base() != \"\" {\n\t\t\tinstalledBases.Add(pkg.Base())\n\t\t} else {\n\t\t\tinstalledBases.Add(pkg.Name())\n\t\t}\n\t}\n\n\tfor _, file := range files {\n\t\tif !file.IsDir() {\n\t\t\tcontinue\n\t\t}\n\n\t\tif !removeAll {\n\t\t\tif keepInstalled && installedBases.Contains(file.Name()) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif keepCurrent && inAURBases.Contains(file.Name()) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tdir := filepath.Join(run.Cfg.BuildDir, file.Name())\n\t\trun.Logger.Debugln(\"removing\", dir)\n\t\tif err = os.RemoveAll(dir); err != nil {\n\t\t\trun.Logger.Warnln(gotext.Get(\"Unable to remove %s: %s\", dir, err))\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc cleanUntracked(ctx context.Context, run *runtime.Runtime) error {\n\trun.Logger.Println(gotext.Get(\"removing untracked AUR files from cache...\"))\n\n\tfiles, err := os.ReadDir(run.Cfg.BuildDir)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfor _, file := range files {\n\t\tif !file.IsDir() {\n\t\t\tcontinue\n\t\t}\n\n\t\tdir := filepath.Join(run.Cfg.BuildDir, file.Name())\n\t\trun.Logger.Debugln(\"cleaning\", dir)\n\t\tif isGitRepository(dir) {\n\t\t\tif err := run.CmdBuilder.Show(run.CmdBuilder.BuildGitCmd(ctx, dir, \"clean\", \"-fx\")); err != nil {\n\t\t\t\trun.Logger.Warnln(gotext.Get(\"Unable to clean:\"), dir)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc isGitRepository(dir string) bool {\n\t_, err := os.Stat(filepath.Join(dir, \".git\"))\n\treturn !os.IsNotExist(err)\n}\n"
        },
        {
          "name": "clean_test.go",
          "type": "blob",
          "size": 2.8310546875,
          "content": "//go:build !integration\n// +build !integration\n\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/Jguer/go-alpm/v2\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db/mock\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/exe\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n)\n\nfunc TestCleanHanging(t *testing.T) {\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\n\tt.Parallel()\n\n\ttestCases := []struct {\n\t\tname     string\n\t\targs     []string\n\t\twantShow []string\n\t}{\n\t\t{\n\t\t\tname:     \"clean\",\n\t\t\targs:     []string{\"Y\", \"c\"},\n\t\t\twantShow: []string{\"pacman\", \"-R\", \"-s\", \"-u\", \"--config\", \"/etc/pacman.conf\", \"--\", \"lsp-plugins\"},\n\t\t},\n\t\t{\n\t\t\tname:     \"clean double\",\n\t\t\targs:     []string{\"Y\", \"c\", \"c\"},\n\t\t\twantShow: []string{\"pacman\", \"-R\", \"-s\", \"-u\", \"--config\", \"/etc/pacman.conf\", \"--\", \"lsp-plugins\", \"linux-headers\"},\n\t\t},\n\t}\n\n\tdbExc := &mock.DBExecutor{\n\t\tPackageOptionalDependsFn: func(i alpm.IPackage) []alpm.Depend {\n\t\t\tif i.Name() == \"linux\" {\n\t\t\t\treturn []alpm.Depend{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: \"linux-headers\",\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn []alpm.Depend{}\n\t\t},\n\t\tPackageProvidesFn: func(p alpm.IPackage) []alpm.Depend { return []alpm.Depend{} },\n\t\tPackageDependsFn:  func(p alpm.IPackage) []alpm.Depend { return []alpm.Depend{} },\n\t\tLocalPackagesFn: func() []mock.IPackage {\n\t\t\treturn []mock.IPackage{\n\t\t\t\t&mock.Package{\n\t\t\t\t\tPReason: alpm.PkgReasonExplicit,\n\t\t\t\t\tPName:   \"linux\",\n\t\t\t\t},\n\t\t\t\t&mock.Package{\n\t\t\t\t\tPReason: alpm.PkgReasonDepend,\n\t\t\t\t\tPName:   \"lsp-plugins\",\n\t\t\t\t},\n\t\t\t\t&mock.Package{\n\t\t\t\t\tPReason: alpm.PkgReasonDepend,\n\t\t\t\t\tPName:   \"linux-headers\",\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tmockRunner := &exe.MockRunner{\n\t\t\t\tCaptureFn: func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\t\t\t\treturn \"\", \"\", nil\n\t\t\t\t},\n\t\t\t\tShowFn: func(cmd *exec.Cmd) error { return nil },\n\t\t\t}\n\t\t\tcmdBuilder := &exe.CmdBuilder{\n\t\t\t\tSudoBin:          \"su\",\n\t\t\t\tPacmanBin:        pacmanBin,\n\t\t\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\t\t\tGitBin:           \"git\",\n\t\t\t\tRunner:           mockRunner,\n\t\t\t\tSudoLoopEnabled:  false,\n\t\t\t}\n\n\t\t\trun := &runtime.Runtime{CmdBuilder: cmdBuilder, Cfg: &settings.Configuration{}}\n\t\t\tcmdArgs := parser.MakeArguments()\n\t\t\tcmdArgs.AddArg(tc.args...)\n\n\t\t\terr := handleCmd(context.Background(),\n\t\t\t\trun, cmdArgs, dbExc,\n\t\t\t)\n\n\t\t\trequire.NoError(t, err)\n\n\t\t\tfor i, call := range mockRunner.ShowCalls {\n\t\t\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\t\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\n\t\t\t\t// options are in a different order on different systems and on CI root user is used\n\t\t\t\tassert.Subset(t, strings.Split(show, \" \"),\n\t\t\t\t\tstrings.Split(tc.wantShow[i], \" \"),\n\t\t\t\t\tfmt.Sprintf(\"%d - %s\", i, show))\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "cmd.go",
          "type": "blob",
          "size": 15.9580078125,
          "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\talpm \"github.com/Jguer/go-alpm/v2\"\n\t\"github.com/leonelquinteros/gotext\"\n\n\t\"github.com/Jguer/yay/v12/pkg/completion\"\n\t\"github.com/Jguer/yay/v12/pkg/db\"\n\t\"github.com/Jguer/yay/v12/pkg/download\"\n\t\"github.com/Jguer/yay/v12/pkg/intrange\"\n\t\"github.com/Jguer/yay/v12/pkg/news\"\n\t\"github.com/Jguer/yay/v12/pkg/query\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/exe\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/text\"\n\t\"github.com/Jguer/yay/v12/pkg/upgrade\"\n\t\"github.com/Jguer/yay/v12/pkg/vcs\"\n)\n\nfunc usage(logger *text.Logger) {\n\tlogger.Println(`Usage:\n    yay\n    yay <operation> [...]\n    yay <package(s)>\n\noperations:\n    yay {-h --help}\n    yay {-V --version}\n    yay {-D --database}    <options> <package(s)>\n    yay {-F --files}       [options] [package(s)]\n    yay {-Q --query}       [options] [package(s)]\n    yay {-R --remove}      [options] <package(s)>\n    yay {-S --sync}        [options] [package(s)]\n    yay {-T --deptest}     [options] [package(s)]\n    yay {-U --upgrade}     [options] <file(s)>\n\nNew operations:\n    yay {-B --build}       [options] [dir]\n    yay {-G --getpkgbuild} [options] [package(s)]\n    yay {-P --show}        [options]\n    yay {-W --web}         [options] [package(s)]\n    yay {-Y --yay}         [options] [package(s)]\n\nIf no operation is specified 'yay -Syu' will be performed\nIf no operation is specified and targets are provided -Y will be assumed\n\nNew options:\n    -N --repo             Assume targets are from the repositories\n    -a --aur              Assume targets are from the AUR\n\nPermanent configuration options:\n    --save                Causes the following options to be saved back to the\n                          config file when used\n\n    --aururl      <url>   Set an alternative AUR URL\n    --aurrpcurl   <url>   Set an alternative URL for the AUR /rpc endpoint\n    --builddir    <dir>   Directory used to download and run PKGBUILDS\n    --editor      <file>  Editor to use when editing PKGBUILDs\n    --editorflags <flags> Pass arguments to editor\n    --makepkg     <file>  makepkg command to use\n    --mflags      <flags> Pass arguments to makepkg\n    --pacman      <file>  pacman command to use\n    --git         <file>  git command to use\n    --gitflags    <flags> Pass arguments to git\n    --gpg         <file>  gpg command to use\n    --gpgflags    <flags> Pass arguments to gpg\n    --config      <file>  pacman.conf file to use\n    --makepkgconf <file>  makepkg.conf file to use\n    --nomakepkgconf       Use the default makepkg.conf\n\n    --requestsplitn <n>   Max amount of packages to query per AUR request\n    --completioninterval  <n> Time in days to refresh completion cache\n    --sortby    <field>   Sort AUR results by a specific field during search\n    --searchby  <field>   Search for packages using a specified field\n    --answerclean   <a>   Set a predetermined answer for the clean build menu\n    --answerdiff    <a>   Set a predetermined answer for the diff menu\n    --answeredit    <a>   Set a predetermined answer for the edit pkgbuild menu\n    --answerupgrade <a>   Set a predetermined answer for the upgrade menu\n    --noanswerclean       Unset the answer for the clean build menu\n    --noanswerdiff        Unset the answer for the edit diff menu\n    --noansweredit        Unset the answer for the edit pkgbuild menu\n    --noanswerupgrade     Unset the answer for the upgrade menu\n    --cleanmenu           Give the option to clean build PKGBUILDS\n    --diffmenu            Give the option to show diffs for build files\n    --editmenu            Give the option to edit/view PKGBUILDS\n    --askremovemake       Ask to remove makedepends after install\n    --askyesremovemake    Ask to remove makedepends after install(\"Y\" as default)\n    --removemake          Remove makedepends after install\n    --noremovemake        Don't remove makedepends after install\n\n    --cleanafter          Remove package sources after successful install\n    --keepsrc             Keep pkg/ and src/ after building packages\n    --bottomup            Shows AUR's packages first and then repository's\n    --topdown             Shows repository's packages first and then AUR's\n    --singlelineresults   List each search result on its own line\n    --doublelineresults   List each search result on two lines, like pacman\n\n    --devel               Check development packages during sysupgrade\n    --rebuild             Always build target packages\n    --rebuildall          Always build all AUR packages\n    --norebuild           Skip package build if in cache and up to date\n    --rebuildtree         Always build all AUR packages even if installed\n    --redownload          Always download pkgbuilds of targets\n    --noredownload        Skip pkgbuild download if in cache and up to date\n    --redownloadall       Always download pkgbuilds of all AUR packages\n    --provides            Look for matching providers when searching for packages\n    --pgpfetch            Prompt to import PGP keys from PKGBUILDs\n    --useask              Automatically resolve conflicts using pacman's ask flag\n\n    --sudo                <file>  sudo command to use\n    --sudoflags           <flags> Pass arguments to sudo\n    --sudoloop            Loop sudo calls in the background to avoid timeout\n\n    --timeupdate          Check packages' AUR page for changes during sysupgrade\n\nshow specific options:\n    -c --complete         Used for completions\n    -d --defaultconfig    Print default yay configuration\n    -g --currentconfig    Print current yay configuration\n    -s --stats            Display system package statistics\n    -w --news             Print arch news\n\nyay specific options:\n    -c --clean            Remove unneeded dependencies (-cc to ignore optdepends)\n       --gendb            Generates development package DB used for updating\n\ngetpkgbuild specific options:\n    -f --force            Force download for existing ABS packages\n    -p --print            Print pkgbuild of packages`)\n}\n\nfunc handleCmd(ctx context.Context, run *runtime.Runtime,\n\tcmdArgs *parser.Arguments, dbExecutor db.Executor,\n) error {\n\tif cmdArgs.ExistsArg(\"h\", \"help\") {\n\t\treturn handleHelp(ctx, run, cmdArgs)\n\t}\n\n\tif run.Cfg.SudoLoop && cmdArgs.NeedRoot(run.Cfg.Mode) {\n\t\trun.CmdBuilder.SudoLoop()\n\t}\n\n\tswitch cmdArgs.Op {\n\tcase \"V\", \"version\":\n\t\thandleVersion(run.Logger)\n\t\treturn nil\n\tcase \"D\", \"database\":\n\t\treturn run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm))\n\tcase \"F\", \"files\":\n\t\treturn run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm))\n\tcase \"Q\", \"query\":\n\t\treturn handleQuery(ctx, run, cmdArgs, dbExecutor)\n\tcase \"R\", \"remove\":\n\t\treturn handleRemove(ctx, run, cmdArgs, run.VCSStore)\n\tcase \"S\", \"sync\":\n\t\treturn handleSync(ctx, run, cmdArgs, dbExecutor)\n\tcase \"T\", \"deptest\":\n\t\treturn run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm))\n\tcase \"U\", \"upgrade\":\n\t\treturn handleUpgrade(ctx, run, cmdArgs)\n\tcase \"B\", \"build\":\n\t\treturn handleBuild(ctx, run, dbExecutor, cmdArgs)\n\tcase \"G\", \"getpkgbuild\":\n\t\treturn handleGetpkgbuild(ctx, run, cmdArgs, dbExecutor)\n\tcase \"P\", \"show\":\n\t\treturn handlePrint(ctx, run, cmdArgs, dbExecutor)\n\tcase \"Y\", \"yay\":\n\t\treturn handleYay(ctx, run, cmdArgs, run.CmdBuilder,\n\t\t\tdbExecutor, run.QueryBuilder)\n\tcase \"W\", \"web\":\n\t\treturn handleWeb(ctx, run, cmdArgs)\n\t}\n\n\treturn errors.New(gotext.Get(\"unhandled operation\"))\n}\n\n// getFilter returns filter function which can keep packages which were only\n// explicitly installed or ones installed as dependencies for showing available\n// updates or their count.\nfunc getFilter(cmdArgs *parser.Arguments) (upgrade.Filter, error) {\n\tdeps, explicit := cmdArgs.ExistsArg(\"d\", \"deps\"), cmdArgs.ExistsArg(\"e\", \"explicit\")\n\n\tswitch {\n\tcase deps && explicit:\n\t\treturn nil, errors.New(gotext.Get(\"invalid option: '--deps' and '--explicit' may not be used together\"))\n\tcase deps:\n\t\treturn func(pkg *upgrade.Upgrade) bool {\n\t\t\treturn pkg.Reason == alpm.PkgReasonDepend\n\t\t}, nil\n\tcase explicit:\n\t\treturn func(pkg *upgrade.Upgrade) bool {\n\t\t\treturn pkg.Reason == alpm.PkgReasonExplicit\n\t\t}, nil\n\t}\n\n\treturn func(pkg *upgrade.Upgrade) bool {\n\t\treturn true\n\t}, nil\n}\n\nfunc handleQuery(ctx context.Context, run *runtime.Runtime, cmdArgs *parser.Arguments, dbExecutor db.Executor) error {\n\tif cmdArgs.ExistsArg(\"u\", \"upgrades\") {\n\t\tfilter, err := getFilter(cmdArgs)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn printUpdateList(ctx, run, cmdArgs, dbExecutor,\n\t\t\tcmdArgs.ExistsDouble(\"u\", \"sysupgrade\"), filter)\n\t}\n\n\tif err := run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm)); err != nil {\n\t\tif str := err.Error(); strings.Contains(str, \"exit status\") {\n\t\t\t// yay -Qdt should not output anything in case of error\n\t\t\treturn fmt.Errorf(\"\")\n\t\t}\n\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc handleHelp(ctx context.Context, run *runtime.Runtime, cmdArgs *parser.Arguments) error {\n\tusage(run.Logger)\n\tswitch cmdArgs.Op {\n\tcase \"Y\", \"yay\", \"G\", \"getpkgbuild\", \"P\", \"show\", \"W\", \"web\", \"B\", \"build\":\n\t\treturn nil\n\t}\n\n\trun.Logger.Println(\"\\npacman operation specific options:\")\n\treturn run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm))\n}\n\nfunc handleVersion(logger *text.Logger) {\n\tlogger.Printf(\"yay v%s - libalpm v%s\\n\", yayVersion, alpm.Version())\n}\n\nfunc handlePrint(ctx context.Context, run *runtime.Runtime, cmdArgs *parser.Arguments, dbExecutor db.Executor) error {\n\tswitch {\n\tcase cmdArgs.ExistsArg(\"d\", \"defaultconfig\"):\n\t\ttmpConfig := settings.DefaultConfig(yayVersion)\n\t\trun.Logger.Printf(\"%v\", tmpConfig)\n\n\t\treturn nil\n\tcase cmdArgs.ExistsArg(\"g\", \"currentconfig\"):\n\t\trun.Logger.Printf(\"%v\", run.Cfg)\n\n\t\treturn nil\n\tcase cmdArgs.ExistsArg(\"w\", \"news\"):\n\t\tdouble := cmdArgs.ExistsDouble(\"w\", \"news\")\n\t\tquiet := cmdArgs.ExistsArg(\"q\", \"quiet\")\n\n\t\treturn news.PrintNewsFeed(ctx, run.HTTPClient, run.Logger,\n\t\t\tdbExecutor.LastBuildTime(), run.Cfg.BottomUp, double, quiet)\n\tcase cmdArgs.ExistsArg(\"c\", \"complete\"):\n\t\treturn completion.Show(ctx, run.HTTPClient, dbExecutor,\n\t\t\trun.Cfg.AURURL, run.Cfg.CompletionPath, run.Cfg.CompletionInterval, cmdArgs.ExistsDouble(\"c\", \"complete\"))\n\tcase cmdArgs.ExistsArg(\"s\", \"stats\"):\n\t\treturn localStatistics(ctx, run, dbExecutor)\n\t}\n\n\treturn nil\n}\n\nfunc handleYay(ctx context.Context, run *runtime.Runtime,\n\tcmdArgs *parser.Arguments, cmdBuilder exe.ICmdBuilder,\n\tdbExecutor db.Executor, queryBuilder query.Builder,\n) error {\n\tswitch {\n\tcase cmdArgs.ExistsArg(\"gendb\"):\n\t\treturn createDevelDB(ctx, run, dbExecutor)\n\tcase cmdArgs.ExistsDouble(\"c\"):\n\t\treturn cleanDependencies(ctx, run.Cfg, cmdBuilder, cmdArgs, dbExecutor, true)\n\tcase cmdArgs.ExistsArg(\"c\", \"clean\"):\n\t\treturn cleanDependencies(ctx, run.Cfg, cmdBuilder, cmdArgs, dbExecutor, false)\n\tcase len(cmdArgs.Targets) > 0:\n\t\treturn displayNumberMenu(ctx, run, cmdArgs.Targets, dbExecutor, queryBuilder, cmdArgs)\n\t}\n\n\treturn nil\n}\n\nfunc handleWeb(ctx context.Context, run *runtime.Runtime, cmdArgs *parser.Arguments) error {\n\tswitch {\n\tcase cmdArgs.ExistsArg(\"v\", \"vote\"):\n\t\treturn handlePackageVote(ctx, cmdArgs.Targets, run.AURClient, run.Logger,\n\t\t\trun.VoteClient, true)\n\tcase cmdArgs.ExistsArg(\"u\", \"unvote\"):\n\t\treturn handlePackageVote(ctx, cmdArgs.Targets, run.AURClient, run.Logger,\n\t\t\trun.VoteClient, false)\n\t}\n\n\treturn nil\n}\n\nfunc handleGetpkgbuild(ctx context.Context, run *runtime.Runtime, cmdArgs *parser.Arguments, dbExecutor download.DBSearcher) error {\n\tif cmdArgs.ExistsArg(\"p\", \"print\") {\n\t\treturn printPkgbuilds(dbExecutor, run.AURClient,\n\t\t\trun.HTTPClient, run.Logger, cmdArgs.Targets, run.Cfg.Mode, run.Cfg.AURURL)\n\t}\n\n\treturn getPkgbuilds(ctx, dbExecutor, run.AURClient, run,\n\t\tcmdArgs.Targets, cmdArgs.ExistsArg(\"f\", \"force\"))\n}\n\nfunc handleUpgrade(ctx context.Context,\n\trun *runtime.Runtime, cmdArgs *parser.Arguments,\n) error {\n\treturn run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm))\n}\n\n// -B* options\nfunc handleBuild(ctx context.Context,\n\trun *runtime.Runtime, dbExecutor db.Executor, cmdArgs *parser.Arguments,\n) error {\n\tif cmdArgs.ExistsArg(\"i\", \"install\") {\n\t\treturn installLocalPKGBUILD(ctx, run, cmdArgs, dbExecutor)\n\t}\n\n\treturn nil\n}\n\nfunc handleSync(ctx context.Context, run *runtime.Runtime, cmdArgs *parser.Arguments, dbExecutor db.Executor) error {\n\ttargets := cmdArgs.Targets\n\n\tswitch {\n\tcase cmdArgs.ExistsArg(\"s\", \"search\"):\n\t\treturn syncSearch(ctx, targets, dbExecutor, run.QueryBuilder, !cmdArgs.ExistsArg(\"q\", \"quiet\"))\n\tcase cmdArgs.ExistsArg(\"p\", \"print\", \"print-format\"):\n\t\treturn run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm))\n\tcase cmdArgs.ExistsArg(\"c\", \"clean\"):\n\t\treturn syncClean(ctx, run, cmdArgs, dbExecutor)\n\tcase cmdArgs.ExistsArg(\"l\", \"list\"):\n\t\treturn syncList(ctx, run, run.HTTPClient, cmdArgs, dbExecutor)\n\tcase cmdArgs.ExistsArg(\"g\", \"groups\"):\n\t\treturn run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm))\n\tcase cmdArgs.ExistsArg(\"i\", \"info\"):\n\t\treturn syncInfo(ctx, run, cmdArgs, targets, dbExecutor)\n\tcase cmdArgs.ExistsArg(\"u\", \"sysupgrade\") || len(cmdArgs.Targets) > 0:\n\t\treturn syncInstall(ctx, run, cmdArgs, dbExecutor)\n\tcase cmdArgs.ExistsArg(\"y\", \"refresh\"):\n\t\treturn run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm))\n\t}\n\n\treturn nil\n}\n\nfunc handleRemove(ctx context.Context, run *runtime.Runtime, cmdArgs *parser.Arguments, localCache vcs.Store) error {\n\terr := run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm))\n\tif err == nil {\n\t\tlocalCache.RemovePackages(cmdArgs.Targets)\n\t}\n\n\treturn err\n}\n\n// NumberMenu presents a CLI for selecting packages to install.\nfunc displayNumberMenu(ctx context.Context, run *runtime.Runtime, pkgS []string, dbExecutor db.Executor,\n\tqueryBuilder query.Builder, cmdArgs *parser.Arguments,\n) error {\n\tqueryBuilder.Execute(ctx, dbExecutor, pkgS)\n\n\tif err := queryBuilder.Results(dbExecutor, query.NumberMenu); err != nil {\n\t\treturn err\n\t}\n\n\tif queryBuilder.Len() == 0 {\n\t\t// no results were found\n\t\treturn nil\n\t}\n\n\trun.Logger.Infoln(gotext.Get(\"Packages to install (eg: 1 2 3, 1-3 or ^4)\"))\n\n\tnumberBuf, err := run.Logger.GetInput(\"\", false)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tinclude, exclude, _, otherExclude := intrange.ParseNumberMenu(numberBuf)\n\n\ttargets, err := queryBuilder.GetTargets(include, exclude, otherExclude)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// modify the arguments to pass for the install\n\tcmdArgs.Targets = targets\n\n\tif len(cmdArgs.Targets) == 0 {\n\t\trun.Logger.Println(gotext.Get(\" there is nothing to do\"))\n\t\treturn nil\n\t}\n\n\treturn syncInstall(ctx, run, cmdArgs, dbExecutor)\n}\n\nfunc syncList(ctx context.Context, run *runtime.Runtime,\n\thttpClient *http.Client, cmdArgs *parser.Arguments, dbExecutor db.Executor,\n) error {\n\taur := false\n\n\tfor i := len(cmdArgs.Targets) - 1; i >= 0; i-- {\n\t\tif cmdArgs.Targets[i] == \"aur\" && run.Cfg.Mode.AtLeastAUR() {\n\t\t\tcmdArgs.Targets = append(cmdArgs.Targets[:i], cmdArgs.Targets[i+1:]...)\n\t\t\taur = true\n\t\t}\n\t}\n\n\tif run.Cfg.Mode.AtLeastAUR() && (len(cmdArgs.Targets) == 0 || aur) {\n\t\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, run.Cfg.AURURL+\"/packages.gz\", http.NoBody)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tresp, err := httpClient.Do(req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tscanner := bufio.NewScanner(resp.Body)\n\n\t\tscanner.Scan()\n\n\t\tfor scanner.Scan() {\n\t\t\tname := scanner.Text()\n\t\t\tif cmdArgs.ExistsArg(\"q\", \"quiet\") {\n\t\t\t\trun.Logger.Println(name)\n\t\t\t} else {\n\t\t\t\trun.Logger.Printf(\"%s %s %s\", text.Magenta(\"aur\"), text.Bold(name), text.Bold(text.Green(gotext.Get(\"unknown-version\"))))\n\n\t\t\t\tif dbExecutor.LocalPackage(name) != nil {\n\t\t\t\t\trun.Logger.Print(text.Bold(text.Blue(gotext.Get(\" [Installed]\"))))\n\t\t\t\t}\n\n\t\t\t\trun.Logger.Println()\n\t\t\t}\n\t\t}\n\t}\n\n\tif run.Cfg.Mode.AtLeastRepo() && (len(cmdArgs.Targets) != 0 || !aur) {\n\t\treturn run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\t\tcmdArgs, run.Cfg.Mode, settings.NoConfirm))\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "cmd_test.go",
          "type": "blob",
          "size": 3.6484375,
          "content": "//go:build !integration\n// +build !integration\n\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/Jguer/aur\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db/mock\"\n\tmockaur \"github.com/Jguer/yay/v12/pkg/dep/mock\"\n\t\"github.com/Jguer/yay/v12/pkg/query\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/exe\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/text\"\n\t\"github.com/Jguer/yay/v12/pkg/vcs\"\n)\n\nfunc TestYogurtMenuAURDB(t *testing.T) {\n\tt.Skip(\"skip until Operation service is an interface\")\n\tt.Parallel()\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\treturn \"\", \"\", nil\n\t}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"Y\")\n\tcmdArgs.AddTarget(\"yay\")\n\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tRefreshHandleFn: func() error {\n\t\t\treturn nil\n\t\t},\n\t\tReposFn: func() []string {\n\t\t\treturn []string{\"aur\"}\n\t\t},\n\t\tSyncPackagesFn: func(s ...string) []mock.IPackage {\n\t\t\treturn []mock.IPackage{\n\t\t\t\t&mock.Package{\n\t\t\t\t\tPName:    \"yay\",\n\t\t\t\t\tPBase:    \"yay\",\n\t\t\t\t\tPVersion: \"10.0.0\",\n\t\t\t\t\tPDB:      mock.NewDB(\"aur\"),\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tLocalPackageFn: func(s string) mock.IPackage {\n\t\t\treturn nil\n\t\t},\n\t}\n\taurCache := &mockaur.MockAUR{\n\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\treturn []aur.Pkg{\n\t\t\t\t{\n\t\t\t\t\tName:        \"yay\",\n\t\t\t\t\tPackageBase: \"yay\",\n\t\t\t\t\tVersion:     \"10.0.0\",\n\t\t\t\t},\n\t\t\t}, nil\n\t\t},\n\t}\n\tlogger := text.NewLogger(io.Discard, os.Stderr, strings.NewReader(\"1\\n\"), true, \"test\")\n\n\trun := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tRemoveMake: \"no\",\n\t\t},\n\t\tLogger:     logger,\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tQueryBuilder: query.NewSourceQueryBuilder(aurCache, logger, \"votes\", parser.ModeAny, \"name\",\n\t\t\ttrue, false, true),\n\t\tAURClient: aurCache,\n\t}\n\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\trequire.NoError(t, err)\n\n\twantCapture := []string{}\n\twantShow := []string{\n\t\t\"pacman -S -y --config /etc/pacman.conf --\",\n\t\t\"pacman -S -y -u --config /etc/pacman.conf --\",\n\t}\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n"
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "errors.go",
          "type": "blob",
          "size": 0.1591796875,
          "content": "package main\n\nimport (\n\t\"errors\"\n\n\t\"github.com/leonelquinteros/gotext\"\n)\n\nvar ErrPackagesNotFound = errors.New(gotext.Get(\"could not find all required packages\"))\n"
        },
        {
          "name": "get.go",
          "type": "blob",
          "size": 1.806640625,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/Jguer/aur\"\n\t\"github.com/leonelquinteros/gotext\"\n\n\t\"github.com/Jguer/yay/v12/pkg/download\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/text\"\n)\n\n// yay -Gp.\nfunc printPkgbuilds(dbExecutor download.DBSearcher, aurClient aur.QueryClient,\n\thttpClient *http.Client, logger *text.Logger, targets []string,\n\tmode parser.TargetMode, aurURL string,\n) error {\n\tpkgbuilds, err := download.PKGBUILDs(dbExecutor, aurClient, httpClient, logger, targets, aurURL, mode)\n\tif err != nil {\n\t\tlogger.Errorln(err)\n\t}\n\n\tfor target, pkgbuild := range pkgbuilds {\n\t\tlogger.Printf(\"\\n\\n# %s\\n\\n%s\", target, string(pkgbuild))\n\t}\n\n\tif len(pkgbuilds) != len(targets) {\n\t\tmissing := []string{}\n\n\t\tfor _, target := range targets {\n\t\t\tif _, ok := pkgbuilds[target]; !ok {\n\t\t\t\tmissing = append(missing, target)\n\t\t\t}\n\t\t}\n\n\t\tlogger.Warnln(gotext.Get(\"Unable to find the following packages:\"), \" \", strings.Join(missing, \", \"))\n\n\t\treturn fmt.Errorf(\"\")\n\t}\n\n\treturn nil\n}\n\n// yay -G.\nfunc getPkgbuilds(ctx context.Context, dbExecutor download.DBSearcher, aurClient aur.QueryClient,\n\trun *runtime.Runtime, targets []string, force bool,\n) error {\n\twd, err := os.Getwd()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcloned, errD := download.PKGBUILDRepos(ctx, dbExecutor, aurClient,\n\t\trun.CmdBuilder, run.Logger, targets, run.Cfg.Mode, run.Cfg.AURURL, wd, force)\n\tif errD != nil {\n\t\trun.Logger.Errorln(errD)\n\t}\n\n\tif len(targets) != len(cloned) {\n\t\tmissing := []string{}\n\n\t\tfor _, target := range targets {\n\t\t\tif _, ok := cloned[target]; !ok {\n\t\t\t\tmissing = append(missing, target)\n\t\t\t}\n\t\t}\n\n\t\trun.Logger.Warnln(gotext.Get(\"Unable to find the following packages:\"), \" \", strings.Join(missing, \", \"))\n\n\t\terr = fmt.Errorf(\"\")\n\t}\n\n\treturn err\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.123046875,
          "content": "module github.com/Jguer/yay/v12\n\nrequire (\n\tgithub.com/Jguer/aur v1.2.3\n\tgithub.com/Jguer/go-alpm/v2 v2.2.2\n\tgithub.com/Jguer/votar v1.0.0\n\tgithub.com/Morganamilo/go-pacmanconf v0.0.0-20210502114700-cff030e927a5\n\tgithub.com/Morganamilo/go-srcinfo v1.0.0\n\tgithub.com/adrg/strutil v0.3.1\n\tgithub.com/bradleyjkemp/cupaloy v2.3.0+incompatible\n\tgithub.com/deckarep/golang-set/v2 v2.6.0\n\tgithub.com/hashicorp/go-multierror v1.1.1\n\tgithub.com/leonelquinteros/gotext v1.5.2\n\tgithub.com/stretchr/testify v1.9.0\n\tgolang.org/x/net v0.0.0-20220722155237-a158d28d115b\n\tgolang.org/x/sys v0.18.0\n\tgolang.org/x/term v0.18.0\n\tgopkg.in/h2non/gock.v1 v1.1.2\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/h2non/parth v0.0.0-20190131123155-b4df798d6542 // indirect\n\tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n\tgithub.com/itchyny/gojq v0.12.14 // indirect\n\tgithub.com/itchyny/timefmt-go v0.1.5 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/ohler55/ojg v1.21.4 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n\ngo 1.21\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 8.439453125,
          "content": "github.com/Jguer/aur v1.2.3 h1:D+OGgLxnAnZnw88DsRvnRQsn0Poxsy9ng7pBcsA0krM=\ngithub.com/Jguer/aur v1.2.3/go.mod h1:Dahvb6L1yr0rR7svyYSDwaRJoQMeyvJblwJ3QH/7CUs=\ngithub.com/Jguer/go-alpm/v2 v2.2.2 h1:sPwUoZp1X5Tw6K6Ba1lWvVJfcgVNEGVcxARLBttZnC0=\ngithub.com/Jguer/go-alpm/v2 v2.2.2/go.mod h1:lfe8gSe83F/KERaQvEfrSqQ4n+8bES+ZIyKWR/gm3MI=\ngithub.com/Jguer/votar v1.0.0 h1:drPYpV5Py5BeAQS8xezmT6uCEfLzotNjLf5yfmlHKTg=\ngithub.com/Jguer/votar v1.0.0/go.mod h1:rc6vgVlTqNjI4nAnPbDTbdxw/N7kXkbB8BcUDjeFbYQ=\ngithub.com/Morganamilo/go-pacmanconf v0.0.0-20210502114700-cff030e927a5 h1:TMscPjkb1ThXN32LuFY5bEYIcXZx3YlwzhS1GxNpn/c=\ngithub.com/Morganamilo/go-pacmanconf v0.0.0-20210502114700-cff030e927a5/go.mod h1:Hk55m330jNiwxRodIlMCvw5iEyoRUCIY64W1p9D+tHc=\ngithub.com/Morganamilo/go-srcinfo v1.0.0 h1:Wh4nEF+HJWo+29hnxM18Q2hi+DUf0GejS13+Wg+dzmI=\ngithub.com/Morganamilo/go-srcinfo v1.0.0/go.mod h1:MP6VGY1NNpVUmYIEgoM9acix95KQqIRyqQ0hCLsyYUY=\ngithub.com/adrg/strutil v0.3.1 h1:OLvSS7CSJO8lBii4YmBt8jiK9QOtB9CzCzwl4Ic/Fz4=\ngithub.com/adrg/strutil v0.3.1/go.mod h1:8h90y18QLrs11IBffcGX3NW/GFBXCMcNg4M7H6MspPA=\ngithub.com/alexflint/go-arg v1.4.3/go.mod h1:3PZ/wp/8HuqRZMUUgu7I+e1qcpUbvmS258mRXkFH4IA=\ngithub.com/alexflint/go-scalar v1.1.0/go.mod h1:LoFvNMqS1CPrMVltza4LvnGKhaSpc3oyLEBUZVhhS2o=\ngithub.com/bradleyjkemp/cupaloy v2.3.0+incompatible h1:UafIjBvWQmS9i/xRg+CamMrnLTKNzo+bdmT/oH34c2Y=\ngithub.com/bradleyjkemp/cupaloy v2.3.0+incompatible/go.mod h1:Au1Xw1sgaJ5iSFktEhYsS0dbQiS1B0/XMXl+42y9Ilk=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/deckarep/golang-set/v2 v2.6.0 h1:XfcQbWM1LlMB8BsJ8N9vW5ehnnPVIw0je80NsVHagjM=\ngithub.com/deckarep/golang-set/v2 v2.6.0/go.mod h1:VAky9rY/yGXJOLEDv3OMci+7wtDpOF4IN+y82NBOac4=\ngithub.com/h2non/parth v0.0.0-20190131123155-b4df798d6542 h1:2VTzZjLZBgl62/EtslCrtky5vbi9dd7HrQPQIx6wqiw=\ngithub.com/h2non/parth v0.0.0-20190131123155-b4df798d6542/go.mod h1:Ow0tF8D4Kplbc8s8sSb3V2oUCygFHVp8gC3Dn6U4MNI=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=\ngithub.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\ngithub.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\ngithub.com/itchyny/gojq v0.12.14 h1:6k8vVtsrhQSYgSGg827AD+PVVaB1NLXEdX+dda2oZCc=\ngithub.com/itchyny/gojq v0.12.14/go.mod h1:y1G7oO7XkcR1LPZO59KyoCRy08T3j9vDYRV0GgYSS+s=\ngithub.com/itchyny/timefmt-go v0.1.5 h1:G0INE2la8S6ru/ZI5JecgyzbbJNs5lG1RcBqa7Jm6GE=\ngithub.com/itchyny/timefmt-go v0.1.5/go.mod h1:nEP7L+2YmAbT2kZ2HfSs1d8Xtw9LY8D2stDBckWakZ8=\ngithub.com/leonelquinteros/gotext v1.5.2 h1:T2y6ebHli+rMBCjcJlHTXyUrgXqsKBhl/ormgvt7lPo=\ngithub.com/leonelquinteros/gotext v1.5.2/go.mod h1:AT4NpQrOmyj1L/+hLja6aR0lk81yYYL4ePnj2kp7d6M=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/nbio/st v0.0.0-20140626010706-e9e8d9816f32 h1:W6apQkHrMkS0Muv8G/TipAy/FJl/rCYT0+EuS8+Z0z4=\ngithub.com/nbio/st v0.0.0-20140626010706-e9e8d9816f32/go.mod h1:9wM+0iRr9ahx58uYLpLIr5fm8diHn0JbqRycJi6w0Ms=\ngithub.com/ohler55/ojg v1.21.4 h1:2iWyz/xExx0XySVIxR9kWFxIdsLNrpWLrKuAcs5aOZU=\ngithub.com/ohler55/ojg v1.21.4/go.mod h1:gQhDVpQLqrmnd2eqGAvJtn+NfKoYJbe/A4Sj3/Vro4o=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2 h1:xuMeJ0Sdp5ZMRXx/aWO6RZxdr3beISkG5/G/aIRr3pY=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.2/go.mod h1:R6va5+xMeoiuVRoj+gSkQ7d3FALtqAAGI1FQKckRals=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b h1:PxfKdU9lEEDYjdIzOtC4qFWgkU2rGHdKlKowJSMN9h0=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.18.0 h1:FcHjZXDMxI8mM3nwhX9HlKop4C0YQvCVCdwYl2wOtE8=\ngolang.org/x/term v0.18.0/go.mod h1:ILwASektA3OnRv7amZ1xhE/KTR+u50pbXfZ03+6Nx58=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/h2non/gock.v1 v1.1.2 h1:jBbHXgGBK/AoPVfJh5x4r/WxIrElvbLel8TCZkkZJoY=\ngopkg.in/h2non/gock.v1 v1.1.2/go.mod h1:n7UGz/ckNChHiK05rDoiC4MYSunEC/lyaUm2WWaDva0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "local_install.go",
          "type": "blob",
          "size": 2.8857421875,
          "content": "// Experimental code for install local with dependency refactoring\n// Not at feature parity with install.go\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db\"\n\t\"github.com/Jguer/yay/v12/pkg/dep\"\n\t\"github.com/Jguer/yay/v12/pkg/multierror\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/exe\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/sync\"\n\n\tgosrc \"github.com/Morganamilo/go-srcinfo\"\n\t\"github.com/leonelquinteros/gotext\"\n)\n\nvar ErrNoBuildFiles = errors.New(gotext.Get(\"cannot find PKGBUILD and .SRCINFO in directory\"))\n\nfunc srcinfoExists(ctx context.Context,\n\tcmdBuilder exe.ICmdBuilder, targetDir string,\n) error {\n\tsrcInfoDir := filepath.Join(targetDir, \".SRCINFO\")\n\tpkgbuildDir := filepath.Join(targetDir, \"PKGBUILD\")\n\tif _, err := os.Stat(srcInfoDir); err == nil {\n\t\tif _, err := os.Stat(pkgbuildDir); err == nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\n\tif _, err := os.Stat(pkgbuildDir); err == nil {\n\t\t// run makepkg to generate .SRCINFO\n\t\tsrcinfo, stderr, err := cmdBuilder.Capture(cmdBuilder.BuildMakepkgCmd(ctx, targetDir, \"--printsrcinfo\"))\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"unable to generate .SRCINFO: %w - %s\", err, stderr)\n\t\t}\n\n\t\tif err := os.WriteFile(srcInfoDir, []byte(srcinfo), 0o600); err != nil {\n\t\t\treturn fmt.Errorf(\"unable to write .SRCINFO: %w\", err)\n\t\t}\n\n\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"%w: %s\", ErrNoBuildFiles, targetDir)\n}\n\nfunc installLocalPKGBUILD(\n\tctx context.Context,\n\trun *runtime.Runtime,\n\tcmdArgs *parser.Arguments,\n\tdbExecutor db.Executor,\n) error {\n\taurCache := run.AURClient\n\tnoCheck := strings.Contains(run.Cfg.MFlags, \"--nocheck\")\n\n\tif len(cmdArgs.Targets) < 1 {\n\t\treturn errors.New(gotext.Get(\"no target directories specified\"))\n\t}\n\n\tsrcInfos := map[string]*gosrc.Srcinfo{}\n\tfor _, targetDir := range cmdArgs.Targets {\n\t\tif err := srcinfoExists(ctx, run.CmdBuilder, targetDir); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tpkgbuild, err := gosrc.ParseFile(filepath.Join(targetDir, \".SRCINFO\"))\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"%s: %w\", gotext.Get(\"failed to parse .SRCINFO\"), err)\n\t\t}\n\n\t\tsrcInfos[targetDir] = pkgbuild\n\t}\n\n\tgrapher := dep.NewGrapher(dbExecutor, aurCache, false, settings.NoConfirm,\n\t\tcmdArgs.ExistsDouble(\"d\", \"nodeps\"), noCheck, cmdArgs.ExistsArg(\"needed\"),\n\t\trun.Logger.Child(\"grapher\"))\n\tgraph, err := grapher.GraphFromSrcInfos(ctx, nil, srcInfos)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\topService := sync.NewOperationService(ctx, dbExecutor, run)\n\tmultiErr := &multierror.MultiError{}\n\ttargets := graph.TopoSortedLayerMap(func(name string, ii *dep.InstallInfo) error {\n\t\tif ii.Source == dep.Missing {\n\t\t\tmultiErr.Add(fmt.Errorf(\"%w: %s %s\", ErrPackagesNotFound, name, ii.Version))\n\t\t}\n\t\treturn nil\n\t})\n\n\tif err := multiErr.Return(); err != nil {\n\t\treturn err\n\t}\n\treturn opService.Run(ctx, run, cmdArgs, targets, []string{})\n}\n"
        },
        {
          "name": "local_install_test.go",
          "type": "blob",
          "size": 30.615234375,
          "content": "//go:build !integration\n// +build !integration\n\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\n\taur \"github.com/Jguer/aur\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db/mock\"\n\tmockaur \"github.com/Jguer/yay/v12/pkg/dep/mock\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/exe\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/text\"\n\t\"github.com/Jguer/yay/v12/pkg/vcs\"\n)\n\nfunc newTestLogger() *text.Logger {\n\treturn text.NewLogger(io.Discard, io.Discard, strings.NewReader(\"\"), true, \"test\")\n}\n\nfunc TestIntegrationLocalInstall(t *testing.T) {\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\ttmpDir := t.TempDir()\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\ttars := []string{\n\t\ttmpDir + \"/jellyfin-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/jellyfin-web-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/jellyfin-server-10.8.4-1-x86_64.pkg.tar.zst\",\n\t}\n\n\twantShow := []string{\n\t\t\"makepkg --verifysource --skippgpcheck -f -Cc\",\n\t\t\"pacman -S --config /etc/pacman.conf -- community/dotnet-sdk-6.0 community/dotnet-runtime-6.0\",\n\t\t\"pacman -D -q --asdeps --config /etc/pacman.conf -- dotnet-runtime-6.0 dotnet-sdk-6.0\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"pacman -U --config /etc/pacman.conf -- /testdir/jellyfin-server-10.8.4-1-x86_64.pkg.tar.zst /testdir/jellyfin-web-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\t\"pacman -D -q --asexplicit --config /etc/pacman.conf -- jellyfin-server jellyfin-web\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"pacman -U --config /etc/pacman.conf -- /testdir/jellyfin-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\t\"pacman -D -q --asexplicit --config /etc/pacman.conf -- jellyfin\",\n\t}\n\n\twantCapture := []string{\n\t\t\"makepkg --packagelist\",\n\t\t\"git -C testdata/jfin git reset --hard HEAD\",\n\t\t\"git -C testdata/jfin git merge --no-edit --ff\",\n\t\t\"makepkg --packagelist\",\n\t}\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\treturn strings.Join(tars, \"\\n\"), \"\", nil\n\t}\n\n\tonce := sync.Once{}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\tonce.Do(func() {\n\t\t\tfor _, tar := range tars {\n\t\t\t\tf, err := os.OpenFile(tar, os.O_RDONLY|os.O_CREATE, 0o666)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NoError(t, f.Close())\n\t\t\t}\n\t\t})\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"B\")\n\tcmdArgs.AddArg(\"i\")\n\tcmdArgs.AddTarget(\"testdata/jfin\")\n\tsettings.NoConfirm = true\n\tdefer func() { settings.NoConfirm = false }()\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tLocalSatisfierExistsFn: func(s string) bool {\n\t\t\tswitch s {\n\t\t\tcase \"dotnet-sdk>=6\", \"dotnet-sdk<7\", \"dotnet-runtime>=6\", \"dotnet-runtime<7\", \"jellyfin-server=10.8.4\", \"jellyfin-web=10.8.4\":\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\treturn true\n\t\t},\n\t\tSyncSatisfierFn: func(s string) mock.IPackage {\n\t\t\tswitch s {\n\t\t\tcase \"dotnet-runtime>=6\", \"dotnet-runtime<7\":\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"dotnet-runtime-6.0\",\n\t\t\t\t\tPBase:    \"dotnet-runtime-6.0\",\n\t\t\t\t\tPVersion: \"6.0.100-1\",\n\t\t\t\t\tPDB:      mock.NewDB(\"community\"),\n\t\t\t\t}\n\t\t\tcase \"dotnet-sdk>=6\", \"dotnet-sdk<7\":\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"dotnet-sdk-6.0\",\n\t\t\t\t\tPBase:    \"dotnet-sdk-6.0\",\n\t\t\t\t\tPVersion: \"6.0.100-1\",\n\t\t\t\t\tPDB:      mock.NewDB(\"community\"),\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn nil\n\t\t},\n\t\tLocalPackageFn:                func(s string) mock.IPackage { return nil },\n\t\tInstalledRemotePackageNamesFn: func() []string { return []string{} },\n\t}\n\n\trun := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tRemoveMake: \"no\",\n\t\t},\n\t\tLogger:     newTestLogger(),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t},\n\t\t},\n\t}\n\n\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\trequire.NoError(t, err)\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, tmpDir, \"/testdir\") // replace the temp dir with a static path\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n\nfunc TestIntegrationLocalInstallMissingDep(t *testing.T) {\n\twantErr := ErrPackagesNotFound\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\ttmpDir := t.TempDir()\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\ttars := []string{\n\t\ttmpDir + \"/jellyfin-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/jellyfin-web-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/jellyfin-server-10.8.4-1-x86_64.pkg.tar.zst\",\n\t}\n\n\twantShow := []string{}\n\twantCapture := []string{}\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\treturn strings.Join(tars, \"\\n\"), \"\", nil\n\t}\n\n\tonce := sync.Once{}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\tonce.Do(func() {\n\t\t\tfor _, tar := range tars {\n\t\t\t\tf, err := os.OpenFile(tar, os.O_RDONLY|os.O_CREATE, 0o666)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NoError(t, f.Close())\n\t\t\t}\n\t\t})\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"B\")\n\tcmdArgs.AddArg(\"i\")\n\tcmdArgs.AddTarget(\"testdata/jfin\")\n\tsettings.NoConfirm = true\n\tdefer func() { settings.NoConfirm = false }()\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tLocalSatisfierExistsFn: func(s string) bool {\n\t\t\tswitch s {\n\t\t\tcase \"dotnet-sdk>=6\", \"dotnet-sdk<7\", \"dotnet-runtime>=6\", \"dotnet-runtime<7\", \"jellyfin-server=10.8.4\", \"jellyfin-web=10.8.4\":\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\treturn true\n\t\t},\n\t\tSyncSatisfierFn: func(s string) mock.IPackage {\n\t\t\tswitch s {\n\t\t\tcase \"dotnet-runtime>=6\", \"dotnet-runtime<7\":\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"dotnet-runtime-6.0\",\n\t\t\t\t\tPBase:    \"dotnet-runtime-6.0\",\n\t\t\t\t\tPVersion: \"6.0.100-1\",\n\t\t\t\t\tPDB:      mock.NewDB(\"community\"),\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn nil\n\t\t},\n\t\tLocalPackageFn: func(string) mock.IPackage { return nil },\n\t}\n\n\trun := &runtime.Runtime{\n\t\tCfg:        &settings.Configuration{},\n\t\tLogger:     newTestLogger(),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t},\n\t\t},\n\t}\n\n\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\trequire.ErrorContains(t, err, wantErr.Error())\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, tmpDir, \"/testdir\") // replace the temp dir with a static path\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n\nfunc TestIntegrationLocalInstallNeeded(t *testing.T) {\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\ttmpDir := t.TempDir()\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\ttars := []string{\n\t\ttmpDir + \"/jellyfin-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/jellyfin-web-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/jellyfin-server-10.8.4-1-x86_64.pkg.tar.zst\",\n\t}\n\n\twantShow := []string{\n\t\t\"makepkg --verifysource --skippgpcheck -f -Cc\",\n\t\t\"pacman -S --config /etc/pacman.conf -- community/dotnet-sdk-6.0 community/dotnet-runtime-6.0\",\n\t\t\"pacman -D -q --asdeps --config /etc/pacman.conf -- dotnet-runtime-6.0 dotnet-sdk-6.0\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t}\n\n\twantCapture := []string{\n\t\t\"makepkg --packagelist\",\n\t\t\"git -C testdata/jfin git reset --hard HEAD\",\n\t\t\"git -C testdata/jfin git merge --no-edit --ff\",\n\t\t\"makepkg --packagelist\",\n\t}\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\treturn strings.Join(tars, \"\\n\"), \"\", nil\n\t}\n\n\tonce := sync.Once{}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\tonce.Do(func() {\n\t\t\tfor _, tar := range tars {\n\t\t\t\tf, err := os.OpenFile(tar, os.O_RDONLY|os.O_CREATE, 0o666)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NoError(t, f.Close())\n\t\t\t}\n\t\t})\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"B\")\n\tcmdArgs.AddArg(\"i\")\n\tcmdArgs.AddArg(\"needed\")\n\tcmdArgs.AddTarget(\"testdata/jfin\")\n\tsettings.NoConfirm = true\n\tdefer func() { settings.NoConfirm = false }()\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tIsCorrectVersionInstalledFn: func(s1, s2 string) bool {\n\t\t\treturn true\n\t\t},\n\t\tLocalPackageFn: func(s string) mock.IPackage {\n\t\t\tif s == \"jellyfin-server\" {\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"jellyfin-server\",\n\t\t\t\t\tPBase:    \"jellyfin-server\",\n\t\t\t\t\tPVersion: \"10.8.4-1\",\n\t\t\t\t\tPDB:      mock.NewDB(\"community\"),\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tLocalSatisfierExistsFn: func(s string) bool {\n\t\t\tswitch s {\n\t\t\tcase \"dotnet-sdk>=6\", \"dotnet-sdk<7\", \"dotnet-runtime>=6\", \"dotnet-runtime<7\", \"jellyfin-server=10.8.4\", \"jellyfin-web=10.8.4\":\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\treturn true\n\t\t},\n\t\tSyncSatisfierFn: func(s string) mock.IPackage {\n\t\t\tswitch s {\n\t\t\tcase \"dotnet-runtime>=6\", \"dotnet-runtime<7\":\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"dotnet-runtime-6.0\",\n\t\t\t\t\tPBase:    \"dotnet-runtime-6.0\",\n\t\t\t\t\tPVersion: \"6.0.100-1\",\n\t\t\t\t\tPDB:      mock.NewDB(\"community\"),\n\t\t\t\t}\n\t\t\tcase \"dotnet-sdk>=6\", \"dotnet-sdk<7\":\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"dotnet-sdk-6.0\",\n\t\t\t\t\tPBase:    \"dotnet-sdk-6.0\",\n\t\t\t\t\tPVersion: \"6.0.100-1\",\n\t\t\t\t\tPDB:      mock.NewDB(\"community\"),\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn nil\n\t\t},\n\t\tInstalledRemotePackageNamesFn: func() []string { return []string{} },\n\t}\n\n\trun := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tRemoveMake: \"no\",\n\t\t},\n\t\tLogger:     newTestLogger(),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t},\n\t\t},\n\t}\n\n\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\trequire.NoError(t, err)\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow), \"show calls: %v\", mockRunner.ShowCalls)\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, tmpDir, \"/testdir\") // replace the temp dir with a static path\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n\nfunc TestIntegrationLocalInstallGenerateSRCINFO(t *testing.T) {\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\ttmpDir := t.TempDir()\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tsrcinfo, err := os.ReadFile(\"testdata/jfin/.SRCINFO\")\n\trequire.NoError(t, err)\n\tassert.True(t, strings.HasPrefix(string(srcinfo), \"pkgbase = jellyfin\"), string(srcinfo))\n\n\ttargetDir := t.TempDir()\n\tf, err = os.OpenFile(filepath.Join(targetDir, \"PKGBUILD\"), os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\ttars := []string{\n\t\ttmpDir + \"/jellyfin-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/jellyfin-web-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/jellyfin-server-10.8.4-1-x86_64.pkg.tar.zst\",\n\t}\n\n\twantShow := []string{\n\t\t\"makepkg --verifysource --skippgpcheck -f -Cc\",\n\t\t\"pacman -S --config /etc/pacman.conf -- community/dotnet-sdk-6.0 community/dotnet-runtime-6.0\",\n\t\t\"pacman -D -q --asdeps --config /etc/pacman.conf -- dotnet-runtime-6.0 dotnet-sdk-6.0\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"pacman -U --config /etc/pacman.conf -- /testdir/jellyfin-server-10.8.4-1-x86_64.pkg.tar.zst /testdir/jellyfin-web-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\t\"pacman -D -q --asexplicit --config /etc/pacman.conf -- jellyfin-server jellyfin-web\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"pacman -U --config /etc/pacman.conf -- /testdir/jellyfin-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\t\"pacman -D -q --asexplicit --config /etc/pacman.conf -- jellyfin\",\n\t}\n\n\twantCapture := []string{\n\t\t\"makepkg --printsrcinfo\",\n\t\t\"makepkg --packagelist\",\n\t\t\"git -C testdata/jfin git reset --hard HEAD\",\n\t\t\"git -C testdata/jfin git merge --no-edit --ff\",\n\t\t\"makepkg --packagelist\",\n\t}\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\tfor _, arg := range cmd.Args {\n\t\t\tif arg == \"--printsrcinfo\" {\n\t\t\t\treturn string(srcinfo), \"\", nil\n\t\t\t}\n\t\t}\n\t\treturn strings.Join(tars, \"\\n\"), \"\", nil\n\t}\n\n\tonce := sync.Once{}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\tonce.Do(func() {\n\t\t\tfor _, tar := range tars {\n\t\t\t\tf, err := os.OpenFile(tar, os.O_RDONLY|os.O_CREATE, 0o666)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NoError(t, f.Close())\n\t\t\t}\n\t\t})\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"B\")\n\tcmdArgs.AddArg(\"i\")\n\tcmdArgs.AddTarget(targetDir)\n\tsettings.NoConfirm = true\n\tdefer func() { settings.NoConfirm = false }()\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tLocalSatisfierExistsFn: func(s string) bool {\n\t\t\tswitch s {\n\t\t\tcase \"dotnet-sdk>=6\", \"dotnet-sdk<7\", \"dotnet-runtime>=6\", \"dotnet-runtime<7\", \"jellyfin-server=10.8.4\", \"jellyfin-web=10.8.4\":\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\treturn true\n\t\t},\n\t\tLocalPackageFn: func(string) mock.IPackage { return nil },\n\t\tSyncSatisfierFn: func(s string) mock.IPackage {\n\t\t\tswitch s {\n\t\t\tcase \"dotnet-runtime>=6\", \"dotnet-runtime<7\":\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"dotnet-runtime-6.0\",\n\t\t\t\t\tPBase:    \"dotnet-runtime-6.0\",\n\t\t\t\t\tPVersion: \"6.0.100-1\",\n\t\t\t\t\tPDB:      mock.NewDB(\"community\"),\n\t\t\t\t}\n\t\t\tcase \"dotnet-sdk>=6\", \"dotnet-sdk<7\":\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"dotnet-sdk-6.0\",\n\t\t\t\t\tPBase:    \"dotnet-sdk-6.0\",\n\t\t\t\t\tPVersion: \"6.0.100-1\",\n\t\t\t\t\tPDB:      mock.NewDB(\"community\"),\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn nil\n\t\t},\n\t\tInstalledRemotePackageNamesFn: func() []string { return []string{} },\n\t}\n\n\trun := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tRemoveMake: \"no\",\n\t\t\tDebug:      false,\n\t\t},\n\t\tLogger:     newTestLogger(),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t},\n\t\t},\n\t}\n\n\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\trequire.NoError(t, err)\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, tmpDir, \"/testdir\") // replace the temp dir with a static path\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n\nfunc TestIntegrationLocalInstallMissingFiles(t *testing.T) {\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\ttmpDir := t.TempDir()\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tsrcinfo, err := os.ReadFile(\"testdata/jfin/.SRCINFO\")\n\trequire.NoError(t, err)\n\n\ttargetDir := t.TempDir()\n\n\ttars := []string{\n\t\ttmpDir + \"/jellyfin-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/jellyfin-web-10.8.4-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/jellyfin-server-10.8.4-1-x86_64.pkg.tar.zst\",\n\t}\n\n\twantShow := []string{}\n\n\twantCapture := []string{}\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\tif cmd.Args[1] == \"--printsrcinfo\" {\n\t\t\treturn string(srcinfo), \"\", nil\n\t\t}\n\t\treturn strings.Join(tars, \"\\n\"), \"\", nil\n\t}\n\n\tonce := sync.Once{}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\tonce.Do(func() {\n\t\t\tfor _, tar := range tars {\n\t\t\t\tf, err := os.OpenFile(tar, os.O_RDONLY|os.O_CREATE, 0o666)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NoError(t, f.Close())\n\t\t\t}\n\t\t})\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"B\")\n\tcmdArgs.AddArg(\"i\")\n\tcmdArgs.AddTarget(targetDir)\n\tsettings.NoConfirm = true\n\tdefer func() { settings.NoConfirm = false }()\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tLocalSatisfierExistsFn: func(s string) bool {\n\t\t\tswitch s {\n\t\t\tcase \"dotnet-sdk>=6\", \"dotnet-sdk<7\", \"dotnet-runtime>=6\", \"dotnet-runtime<7\", \"jellyfin-server=10.8.4\", \"jellyfin-web=10.8.4\":\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\treturn true\n\t\t},\n\t\tSyncSatisfierFn: func(s string) mock.IPackage {\n\t\t\tswitch s {\n\t\t\tcase \"dotnet-runtime>=6\", \"dotnet-runtime<7\":\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"dotnet-runtime-6.0\",\n\t\t\t\t\tPBase:    \"dotnet-runtime-6.0\",\n\t\t\t\t\tPVersion: \"6.0.100-1\",\n\t\t\t\t\tPDB:      mock.NewDB(\"community\"),\n\t\t\t\t}\n\t\t\tcase \"dotnet-sdk>=6\", \"dotnet-sdk<7\":\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"dotnet-sdk-6.0\",\n\t\t\t\t\tPBase:    \"dotnet-sdk-6.0\",\n\t\t\t\t\tPVersion: \"6.0.100-1\",\n\t\t\t\t\tPDB:      mock.NewDB(\"community\"),\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn nil\n\t\t},\n\t}\n\n\tconfig := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tRemoveMake: \"no\",\n\t\t\tDebug:      false,\n\t\t},\n\t\tLogger:     newTestLogger(),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t},\n\t\t},\n\t}\n\n\terr = handleCmd(context.Background(), config, cmdArgs, db)\n\trequire.ErrorIs(t, err, ErrNoBuildFiles)\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, tmpDir, \"/testdir\") // replace the temp dir with a static path\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n\nfunc TestIntegrationLocalInstallWithDepsProvides(t *testing.T) {\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\ttmpDir := t.TempDir()\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\ttars := []string{\n\t\ttmpDir + \"/ceph-bin-17.2.6-2-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/ceph-libs-bin-17.2.6-2-x86_64.pkg.tar.zst\",\n\t}\n\n\twantShow := []string{\n\t\t\"makepkg --verifysource --skippgpcheck -f -Cc\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"pacman -U --config /etc/pacman.conf -- /testdir/ceph-libs-bin-17.2.6-2-x86_64.pkg.tar.zst\",\n\t\t\"pacman -D -q --asexplicit --config /etc/pacman.conf -- ceph-libs-bin\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"pacman -U --config /etc/pacman.conf -- /testdir/ceph-bin-17.2.6-2-x86_64.pkg.tar.zst\",\n\t\t\"pacman -D -q --asexplicit --config /etc/pacman.conf -- ceph-bin\",\n\t}\n\n\twantCapture := []string{\n\t\t\"git -C testdata/cephbin git reset --hard HEAD\",\n\t\t\"git -C testdata/cephbin git merge --no-edit --ff\",\n\t\t\"makepkg --packagelist\",\n\t\t\"makepkg --packagelist\",\n\t}\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\treturn strings.Join(tars, \"\\n\"), \"\", nil\n\t}\n\n\tonce := sync.Once{}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\tonce.Do(func() {\n\t\t\tfor _, tar := range tars {\n\t\t\t\tf, err := os.OpenFile(tar, os.O_RDONLY|os.O_CREATE, 0o666)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NoError(t, f.Close())\n\t\t\t}\n\t\t})\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"B\")\n\tcmdArgs.AddArg(\"i\")\n\tcmdArgs.AddTarget(\"testdata/cephbin\")\n\tsettings.NoConfirm = true\n\tdefer func() { settings.NoConfirm = false }()\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tLocalSatisfierExistsFn: func(s string) bool {\n\t\t\tswitch s {\n\t\t\tcase \"ceph=17.2.6-2\", \"ceph-libs=17.2.6-2\":\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\treturn true\n\t\t},\n\t\tSyncSatisfierFn: func(s string) mock.IPackage {\n\t\t\treturn nil\n\t\t},\n\t\tLocalPackageFn:                func(s string) mock.IPackage { return nil },\n\t\tInstalledRemotePackageNamesFn: func() []string { return []string{} },\n\t}\n\n\tconfig := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tRemoveMake: \"no\",\n\t\t},\n\t\tLogger:     newTestLogger(),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t},\n\t\t},\n\t}\n\n\terr = handleCmd(context.Background(), config, cmdArgs, db)\n\trequire.NoError(t, err)\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, tmpDir, \"/testdir\") // replace the temp dir with a static path\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n\nfunc TestIntegrationLocalInstallTwoSrcInfosWithDeps(t *testing.T) {\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\ttmpDir1 := t.TempDir()\n\ttmpDir2 := t.TempDir()\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tpkgsTars := []string{\n\t\ttmpDir1 + \"/libzip-git-1.9.2.r166.gd2c47d0f-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir2 + \"/gourou-0.8.1-4-x86_64.pkg.tar.zst\",\n\t}\n\n\twantShow := []string{\n\t\t\"makepkg --verifysource --skippgpcheck -f -Cc\",\n\t\t\"makepkg --verifysource --skippgpcheck -f -Cc\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"pacman -U --config /etc/pacman.conf -- /testdir1/libzip-git-1.9.2.r166.gd2c47d0f-1-x86_64.pkg.tar.zst\",\n\t\t\"pacman -D -q --asexplicit --config /etc/pacman.conf -- libzip-git\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"pacman -U --config /etc/pacman.conf -- /testdir2/gourou-0.8.1-4-x86_64.pkg.tar.zst\",\n\t\t\"pacman -D -q --asexplicit --config /etc/pacman.conf -- gourou\",\n\t}\n\n\twantCapture := []string{\n\t\t\"git -C testdata/gourou git reset --hard HEAD\",\n\t\t\"git -C testdata/gourou git merge --no-edit --ff\",\n\t\t\"git -C testdata/libzip-git git reset --hard HEAD\",\n\t\t\"git -C testdata/libzip-git git merge --no-edit --ff\",\n\t\t\"makepkg --packagelist\",\n\t\t\"makepkg --packagelist\",\n\t}\n\n\tcaptureCounter := 0\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\tcaptureCounter++\n\t\tswitch captureCounter {\n\t\tcase 5:\n\t\t\treturn pkgsTars[0] + \"\\n\", \"\", nil\n\t\tcase 6:\n\t\t\treturn pkgsTars[1] + \"\\n\", \"\", nil\n\t\tdefault:\n\t\t\treturn \"\", \"\", nil\n\t\t}\n\t}\n\n\tonce := sync.Once{}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\tonce.Do(func() {\n\t\t\tfor _, tar := range pkgsTars {\n\t\t\t\tf, err := os.OpenFile(tar, os.O_RDONLY|os.O_CREATE, 0o666)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NoError(t, f.Close())\n\t\t\t}\n\t\t})\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"B\")\n\tcmdArgs.AddArg(\"i\")\n\tcmdArgs.AddTarget(\"testdata/gourou\")\n\tcmdArgs.AddTarget(\"testdata/libzip-git\")\n\tsettings.NoConfirm = true\n\tdefer func() { settings.NoConfirm = false }()\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tLocalSatisfierExistsFn: func(s string) bool {\n\t\t\tswitch s {\n\t\t\tcase \"gourou\", \"libzip\", \"libzip-git\":\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\treturn true\n\t\t},\n\t\tSyncSatisfierFn: func(s string) mock.IPackage {\n\t\t\treturn nil\n\t\t},\n\t\tLocalPackageFn:                func(s string) mock.IPackage { return nil },\n\t\tInstalledRemotePackageNamesFn: func() []string { return []string{} },\n\t}\n\n\trun := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tRemoveMake: \"no\",\n\t\t},\n\t\tLogger:     newTestLogger(),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t},\n\t\t},\n\t}\n\n\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\trequire.NoError(t, err)\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, tmpDir1, \"/testdir1\") // replace the temp dir with a static path\n\t\tshow = strings.ReplaceAll(show, tmpDir2, \"/testdir2\") // replace the temp dir with a static path\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 2.826171875,
          "content": "package main // import \"github.com/Jguer/yay\"\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"os\"\n\t\"os/exec\"\n\t\"runtime/debug\"\n\n\t\"github.com/leonelquinteros/gotext\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db/ialpm\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/text\"\n)\n\nvar (\n\tyayVersion = \"12.0.4\"            // To be set by compiler.\n\tlocalePath = \"/usr/share/locale\" // To be set by compiler.\n)\n\nfunc initGotext() {\n\tif envLocalePath := os.Getenv(\"LOCALE_PATH\"); envLocalePath != \"\" {\n\t\tlocalePath = envLocalePath\n\t}\n\n\tif lc := os.Getenv(\"LANGUAGE\"); lc != \"\" {\n\t\tgotext.Configure(localePath, lc, \"yay\")\n\t} else if lc := os.Getenv(\"LC_ALL\"); lc != \"\" {\n\t\tgotext.Configure(localePath, lc, \"yay\")\n\t} else if lc := os.Getenv(\"LC_MESSAGES\"); lc != \"\" {\n\t\tgotext.Configure(localePath, lc, \"yay\")\n\t} else {\n\t\tgotext.Configure(localePath, os.Getenv(\"LANG\"), \"yay\")\n\t}\n}\n\nfunc main() {\n\tfallbackLog := text.NewLogger(os.Stdout, os.Stderr, os.Stdin, false, \"fallback\")\n\tvar (\n\t\terr error\n\t\tctx = context.Background()\n\t\tret = 0\n\t)\n\n\tdefer func() {\n\t\tif rec := recover(); rec != nil {\n\t\t\tfallbackLog.Errorln(rec)\n\t\t\tdebug.PrintStack()\n\t\t}\n\n\t\tos.Exit(ret)\n\t}()\n\n\tinitGotext()\n\n\tif os.Geteuid() == 0 {\n\t\tfallbackLog.Warnln(gotext.Get(\"Avoid running yay as root/sudo.\"))\n\t}\n\n\tconfigPath := settings.GetConfigPath()\n\t// Parse config\n\tcfg, err := settings.NewConfig(fallbackLog, configPath, yayVersion)\n\tif err != nil {\n\t\tif str := err.Error(); str != \"\" {\n\t\t\tfallbackLog.Errorln(str)\n\t\t}\n\n\t\tret = 1\n\n\t\treturn\n\t}\n\n\tif errS := cfg.RunMigrations(fallbackLog,\n\t\tsettings.DefaultMigrations(), configPath, yayVersion); errS != nil {\n\t\tfallbackLog.Errorln(errS)\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\n\t// Parse command line\n\tif err = cfg.ParseCommandLine(cmdArgs); err != nil {\n\t\tif str := err.Error(); str != \"\" {\n\t\t\tfallbackLog.Errorln(str)\n\t\t}\n\n\t\tret = 1\n\n\t\treturn\n\t}\n\n\tif cfg.SaveConfig {\n\t\tif errS := cfg.Save(configPath, yayVersion); errS != nil {\n\t\t\tfallbackLog.Errorln(errS)\n\t\t}\n\t}\n\n\t// Build run\n\trun, err := runtime.NewRuntime(cfg, cmdArgs, yayVersion)\n\tif err != nil {\n\t\tif str := err.Error(); str != \"\" {\n\t\t\tfallbackLog.Errorln(str)\n\t\t}\n\n\t\tret = 1\n\n\t\treturn\n\t}\n\n\tdbExecutor, err := ialpm.NewExecutor(run.PacmanConf, run.Logger.Child(\"db\"))\n\tif err != nil {\n\t\tif str := err.Error(); str != \"\" {\n\t\t\tfallbackLog.Errorln(str)\n\t\t}\n\n\t\tret = 1\n\n\t\treturn\n\t}\n\n\tdefer func() {\n\t\tif rec := recover(); rec != nil {\n\t\t\tfallbackLog.Errorln(rec, string(debug.Stack()))\n\t\t}\n\n\t\tdbExecutor.Cleanup()\n\t}()\n\n\tif err = handleCmd(ctx, run, cmdArgs, dbExecutor); err != nil {\n\t\tif str := err.Error(); str != \"\" {\n\t\t\tfallbackLog.Errorln(str)\n\t\t}\n\n\t\texitError := &exec.ExitError{}\n\t\tif errors.As(err, &exitError) {\n\t\t\t// mirror pacman exit code when applicable\n\t\t\tret = exitError.ExitCode()\n\t\t\treturn\n\t\t}\n\n\t\t// fallback\n\t\tret = 1\n\t}\n}\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "print.go",
          "type": "blob",
          "size": 8.16796875,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"syscall\"\n\t\"unicode\"\n\n\taur \"github.com/Jguer/aur\"\n\tmapset \"github.com/deckarep/golang-set/v2\"\n\t\"github.com/leonelquinteros/gotext\"\n\t\"golang.org/x/sys/unix\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db\"\n\t\"github.com/Jguer/yay/v12/pkg/dep\"\n\t\"github.com/Jguer/yay/v12/pkg/query\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/text\"\n\t\"github.com/Jguer/yay/v12/pkg/upgrade\"\n)\n\n// printInfo prints package info like pacman -Si.\nfunc printInfo(logger *text.Logger, config *settings.Configuration, a *aur.Pkg, extendedInfo bool) {\n\tprintInfoValue(logger, gotext.Get(\"Repository\"), \"aur\")\n\tprintInfoValue(logger, gotext.Get(\"Name\"), a.Name)\n\tprintInfoValue(logger, gotext.Get(\"Version\"), a.Version)\n\tprintInfoValue(logger, gotext.Get(\"Description\"), a.Description)\n\tprintInfoValue(logger, gotext.Get(\"URL\"), a.URL)\n\tprintInfoValue(logger, gotext.Get(\"Licenses\"), a.License...)\n\tprintInfoValue(logger, gotext.Get(\"Groups\"), a.Groups...)\n\tprintInfoValue(logger, gotext.Get(\"Provides\"), a.Provides...)\n\tprintInfoValue(logger, gotext.Get(\"Depends On\"), a.Depends...)\n\tprintInfoValue(logger, gotext.Get(\"Optional Deps\"), a.OptDepends...)\n\tprintInfoValue(logger, gotext.Get(\"Make Deps\"), a.MakeDepends...)\n\tprintInfoValue(logger, gotext.Get(\"Check Deps\"), a.CheckDepends...)\n\tprintInfoValue(logger, gotext.Get(\"Conflicts With\"), a.Conflicts...)\n\tprintInfoValue(logger, gotext.Get(\"Replaces\"), a.Replaces...)\n\tprintInfoValue(logger, gotext.Get(\"AUR URL\"), config.AURURL+\"/packages/\"+a.Name)\n\tprintInfoValue(logger, gotext.Get(\"First Submitted\"), text.FormatTimeQuery(a.FirstSubmitted))\n\tprintInfoValue(logger, gotext.Get(\"Keywords\"), a.Keywords...)\n\tprintInfoValue(logger, gotext.Get(\"Last Modified\"), text.FormatTimeQuery(a.LastModified))\n\tprintInfoValue(logger, gotext.Get(\"Maintainer\"), a.Maintainer)\n\tprintInfoValue(logger, gotext.Get(\"Popularity\"), fmt.Sprintf(\"%f\", a.Popularity))\n\tprintInfoValue(logger, gotext.Get(\"Votes\"), fmt.Sprintf(\"%d\", a.NumVotes))\n\n\tif a.OutOfDate != 0 {\n\t\tprintInfoValue(logger, gotext.Get(\"Out-of-date\"), text.FormatTimeQuery(a.OutOfDate))\n\t} else {\n\t\tprintInfoValue(logger, gotext.Get(\"Out-of-date\"), \"No\")\n\t}\n\n\tif extendedInfo {\n\t\tprintInfoValue(logger, \"ID\", fmt.Sprintf(\"%d\", a.ID))\n\t\tprintInfoValue(logger, gotext.Get(\"Package Base ID\"), fmt.Sprintf(\"%d\", a.PackageBaseID))\n\t\tprintInfoValue(logger, gotext.Get(\"Package Base\"), a.PackageBase)\n\t\tprintInfoValue(logger, gotext.Get(\"Snapshot URL\"), config.AURURL+a.URLPath)\n\t}\n\n\tlogger.Println()\n}\n\n// BiggestPackages prints the name of the ten biggest packages in the system.\nfunc biggestPackages(logger *text.Logger, dbExecutor db.Executor) {\n\tpkgS := dbExecutor.BiggestPackages()\n\n\tif len(pkgS) < 10 {\n\t\treturn\n\t}\n\n\tfor i := 0; i < 10; i++ {\n\t\tlogger.Printf(\"%s: %s\\n\", text.Bold(pkgS[i].Name()), text.Cyan(text.Human(pkgS[i].ISize())))\n\t}\n}\n\n// localStatistics prints installed packages statistics.\nfunc localStatistics(ctx context.Context, run *runtime.Runtime, dbExecutor db.Executor) error {\n\tinfo := statistics(run, dbExecutor)\n\n\tremoteNames := dbExecutor.InstalledRemotePackageNames()\n\tremote := dbExecutor.InstalledRemotePackages()\n\trun.Logger.Infoln(gotext.Get(\"Yay version v%s\", yayVersion))\n\trun.Logger.Println(text.Bold(text.Cyan(\"===========================================\")))\n\trun.Logger.Infoln(gotext.Get(\"Total installed packages: %s\", text.Cyan(strconv.Itoa(info.Totaln))))\n\trun.Logger.Infoln(gotext.Get(\"Foreign installed packages: %s\", text.Cyan(strconv.Itoa(len(remoteNames)))))\n\trun.Logger.Infoln(gotext.Get(\"Explicitly installed packages: %s\", text.Cyan(strconv.Itoa(info.Expln))))\n\trun.Logger.Infoln(gotext.Get(\"Total Size occupied by packages: %s\", text.Cyan(text.Human(info.TotalSize))))\n\n\tfor path, size := range info.pacmanCaches {\n\t\trun.Logger.Infoln(gotext.Get(\"Size of pacman cache %s: %s\", path, text.Cyan(text.Human(size))))\n\t}\n\n\trun.Logger.Infoln(gotext.Get(\"Size of yay cache %s: %s\", run.Cfg.BuildDir, text.Cyan(text.Human(info.yayCache))))\n\trun.Logger.Println(text.Bold(text.Cyan(\"===========================================\")))\n\trun.Logger.Infoln(gotext.Get(\"Ten biggest packages:\"))\n\tbiggestPackages(run.Logger, dbExecutor)\n\trun.Logger.Println(text.Bold(text.Cyan(\"===========================================\")))\n\n\taurData, err := run.AURClient.Get(ctx, &aur.Query{\n\t\tNeedles: remoteNames,\n\t\tBy:      aur.Name,\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\twarnings := query.NewWarnings(run.Logger.Child(\"warnings\"))\n\tfor i := range aurData {\n\t\twarnings.AddToWarnings(remote, &aurData[i])\n\t}\n\n\twarnings.Print()\n\n\treturn nil\n}\n\nfunc printUpdateList(ctx context.Context, run *runtime.Runtime, cmdArgs *parser.Arguments,\n\tdbExecutor db.Executor, enableDowngrade bool, filter upgrade.Filter,\n) error {\n\tquietMode := cmdArgs.ExistsArg(\"q\", \"quiet\")\n\n\t// TODO: handle quiet mode in a better way\n\tlogger := text.NewLogger(io.Discard, os.Stderr, os.Stdin, run.Cfg.Debug, \"update-list\")\n\tdbExecutor.SetLogger(logger.Child(\"db\"))\n\toldNoConfirm := settings.NoConfirm\n\tsettings.NoConfirm = true\n\t// restoring global NoConfirm to make tests work properly\n\tdefer func() { settings.NoConfirm = oldNoConfirm }()\n\n\ttargets := mapset.NewThreadUnsafeSet(cmdArgs.Targets...)\n\tgrapher := dep.NewGrapher(dbExecutor, run.AURClient, false, true,\n\t\tfalse, false, cmdArgs.ExistsArg(\"needed\"), logger.Child(\"grapher\"))\n\n\tupService := upgrade.NewUpgradeService(\n\t\tgrapher, run.AURClient, dbExecutor, run.VCSStore,\n\t\trun.Cfg, true, logger.Child(\"upgrade\"))\n\n\tgraph, errSysUp := upService.GraphUpgrades(ctx, nil,\n\t\tenableDowngrade, filter)\n\tif errSysUp != nil {\n\t\treturn errSysUp\n\t}\n\n\tif graph.Len() == 0 {\n\t\treturn fmt.Errorf(\"\")\n\t}\n\n\tnoTargets := targets.Cardinality() == 0\n\tforeignFilter := cmdArgs.ExistsArg(\"m\", \"foreign\")\n\tnativeFilter := cmdArgs.ExistsArg(\"n\", \"native\")\n\n\tnoUpdates := true\n\t_ = graph.ForEach(func(pkgName string, ii *dep.InstallInfo) error {\n\t\tif !ii.Upgrade {\n\t\t\treturn nil\n\t\t}\n\n\t\tif noTargets || targets.Contains(pkgName) {\n\t\t\tif ii.Source == dep.Sync && foreignFilter {\n\t\t\t\treturn nil\n\t\t\t} else if ii.Source == dep.AUR && nativeFilter {\n\t\t\t\treturn nil\n\t\t\t}\n\n\t\t\tif quietMode {\n\t\t\t\trun.Logger.Printf(\"%s\\n\", pkgName)\n\t\t\t} else {\n\t\t\t\trun.Logger.Printf(\"%s %s -> %s\\n\", text.Bold(pkgName), text.Bold(text.Green(ii.LocalVersion)),\n\t\t\t\t\ttext.Bold(text.Green(ii.Version)))\n\t\t\t}\n\n\t\t\ttargets.Remove(pkgName)\n\t\t\tnoUpdates = false\n\t\t}\n\n\t\treturn nil\n\t})\n\n\tmissing := false\n\ttargets.Each(func(pkgName string) bool {\n\t\tif dbExecutor.LocalPackage(pkgName) == nil {\n\t\t\trun.Logger.Errorln(gotext.Get(\"package '%s' was not found\", pkgName))\n\t\t\tmissing = true\n\t\t}\n\t\treturn false\n\t})\n\n\tif missing || noUpdates {\n\t\treturn fmt.Errorf(\"\")\n\t}\n\n\treturn nil\n}\n\nfunc printInfoValue(logger *text.Logger, key string, values ...string) {\n\tconst (\n\t\tkeyLength  = 32\n\t\tdelimCount = 2\n\t)\n\n\tspecialWordsCount := 0\n\n\tfor _, runeValue := range key {\n\t\t// CJK handling: the character 'ー' is Katakana\n\t\t// but if use unicode.Katakana, it will return false\n\t\tif unicode.IsOneOf([]*unicode.RangeTable{\n\t\t\tunicode.Han,\n\t\t\tunicode.Hiragana,\n\t\t\tunicode.Katakana,\n\t\t\tunicode.Hangul,\n\t\t}, runeValue) || runeValue == 'ー' {\n\t\t\tspecialWordsCount++\n\t\t}\n\t}\n\n\tkeyTextCount := specialWordsCount - keyLength + delimCount\n\tstr := fmt.Sprintf(text.Bold(\"%-*s: \"), keyTextCount, key)\n\n\tif len(values) == 0 || (len(values) == 1 && values[0] == \"\") {\n\t\tlogger.Printf(\"%s%s\\n\", str, gotext.Get(\"None\"))\n\t\treturn\n\t}\n\n\tmaxCols := getColumnCount()\n\tcols := keyLength + len(values[0])\n\tstr += values[0]\n\n\tfor _, value := range values[1:] {\n\t\tif maxCols > keyLength && cols+len(value)+delimCount >= maxCols {\n\t\t\tcols = keyLength\n\t\t\tstr += \"\\n\" + strings.Repeat(\" \", keyLength)\n\t\t} else if cols != keyLength {\n\t\t\tstr += strings.Repeat(\" \", delimCount)\n\t\t\tcols += delimCount\n\t\t}\n\n\t\tstr += value\n\t\tcols += len(value)\n\t}\n\n\tlogger.Println(str)\n}\n\nvar cachedColumnCount = -1\n\nfunc getColumnCount() int {\n\tif cachedColumnCount > 0 {\n\t\treturn cachedColumnCount\n\t}\n\n\tif count, err := strconv.Atoi(os.Getenv(\"COLUMNS\")); err == nil {\n\t\tcachedColumnCount = count\n\t\treturn cachedColumnCount\n\t}\n\n\tif ws, err := unix.IoctlGetWinsize(syscall.Stdout, unix.TIOCGWINSZ); err == nil {\n\t\tcachedColumnCount = int(ws.Col)\n\t\treturn cachedColumnCount\n\t}\n\n\treturn 80\n}\n"
        },
        {
          "name": "print_test.go",
          "type": "blob",
          "size": 7.3515625,
          "content": "//go:build !integration\n// +build !integration\n\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/Jguer/aur\"\n\talpm \"github.com/Jguer/go-alpm/v2\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db\"\n\t\"github.com/Jguer/yay/v12/pkg/db/mock\"\n\tmockaur \"github.com/Jguer/yay/v12/pkg/dep/mock\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/exe\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/text\"\n\t\"github.com/Jguer/yay/v12/pkg/vcs\"\n)\n\nfunc TestPrintUpdateList(t *testing.T) {\n\t// The current method of capturing os.Stdout hinders parallelization.\n\t// Setting of global settings.NoConfirm in printUpdateList also hinders parallelization.\n\t// t.Parallel()\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tf, err := os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tmockDBName := mock.NewDB(\"core\")\n\tmockDB := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tRefreshHandleFn: func() error {\n\t\t\treturn nil\n\t\t},\n\t\tReposFn: func() []string {\n\t\t\treturn []string{\"core\"}\n\t\t},\n\t\tInstalledRemotePackagesFn: func() map[string]alpm.IPackage {\n\t\t\treturn map[string]alpm.IPackage{\n\t\t\t\t\"vosk-api\": &mock.Package{\n\t\t\t\t\tPName:    \"vosk-api\",\n\t\t\t\t\tPVersion: \"0.3.43-1\",\n\t\t\t\t\tPBase:    \"vosk-api\",\n\t\t\t\t\tPReason:  alpm.PkgReasonExplicit,\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tInstalledRemotePackageNamesFn: func() []string {\n\t\t\treturn []string{\"vosk-api\"}\n\t\t},\n\t\tSyncUpgradesFn: func(\n\t\t\tbool,\n\t\t) (map[string]db.SyncUpgrade, error) {\n\t\t\treturn map[string]db.SyncUpgrade{\n\t\t\t\t\"linux\": {\n\t\t\t\t\tPackage: &mock.Package{\n\t\t\t\t\t\tPName:    \"linux\",\n\t\t\t\t\t\tPVersion: \"5.10.0\",\n\t\t\t\t\t\tPDB:      mockDBName,\n\t\t\t\t\t},\n\t\t\t\t\tLocalVersion: \"4.3.0\",\n\t\t\t\t\tReason:       alpm.PkgReasonExplicit,\n\t\t\t\t},\n\t\t\t\t\"go\": {\n\t\t\t\t\tPackage: &mock.Package{\n\t\t\t\t\t\tPName:    \"go\",\n\t\t\t\t\t\tPVersion: \"2:1.20.4-1\",\n\t\t\t\t\t\tPDB:      mockDBName,\n\t\t\t\t\t},\n\t\t\t\t\tLocalVersion: \"2:1.20.3-1\",\n\t\t\t\t\tReason:       alpm.PkgReasonExplicit,\n\t\t\t\t},\n\t\t\t}, nil\n\t\t},\n\t\tLocalPackageFn: func(s string) mock.IPackage {\n\t\t\tif s == \"no-update-pkg\" {\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName:    \"no-update-pkg\",\n\t\t\t\t\tPVersion: \"3.3.3\",\n\t\t\t\t\tPDB:      mockDBName,\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tSetLoggerFn: func(logger *text.Logger) {},\n\t}\n\n\tmockDBNoUpdates := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tRefreshHandleFn: func() error {\n\t\t\treturn nil\n\t\t},\n\t\tReposFn: func() []string {\n\t\t\treturn []string{\"core\"}\n\t\t},\n\t\tInstalledRemotePackagesFn: func() map[string]alpm.IPackage {\n\t\t\treturn map[string]alpm.IPackage{\n\t\t\t\t\"vosk-api\": &mock.Package{\n\t\t\t\t\tPName:    \"vosk-api\",\n\t\t\t\t\tPVersion: \"0.3.43-1\",\n\t\t\t\t\tPBase:    \"vosk-api\",\n\t\t\t\t\tPReason:  alpm.PkgReasonExplicit,\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tInstalledRemotePackageNamesFn: func() []string {\n\t\t\treturn []string{\"vosk-api\"}\n\t\t},\n\t\tSyncUpgradesFn: func(\n\t\t\tbool,\n\t\t) (map[string]db.SyncUpgrade, error) {\n\t\t\treturn map[string]db.SyncUpgrade{}, nil\n\t\t},\n\t\tLocalPackageFn: func(s string) mock.IPackage {\n\t\t\treturn nil\n\t\t},\n\t\tSetLoggerFn: func(logger *text.Logger) {},\n\t}\n\n\tmockAUR := &mockaur.MockAUR{\n\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\treturn []aur.Pkg{\n\t\t\t\t{\n\t\t\t\t\tName:        \"vosk-api\",\n\t\t\t\t\tPackageBase: \"vosk-api\",\n\t\t\t\t\tVersion:     \"0.3.45-1\",\n\t\t\t\t},\n\t\t\t}, nil\n\t\t},\n\t}\n\n\tmockAURNoUpdates := &mockaur.MockAUR{\n\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\treturn []aur.Pkg{\n\t\t\t\t{\n\t\t\t\t\tName:        \"vosk-api\",\n\t\t\t\t\tPackageBase: \"vosk-api\",\n\t\t\t\t\tVersion:     \"0.3.43-1\",\n\t\t\t\t},\n\t\t\t}, nil\n\t\t},\n\t}\n\n\ttype mockData struct {\n\t\tdb       *mock.DBExecutor\n\t\taurCache *mockaur.MockAUR\n\t}\n\n\ttestCases := []struct {\n\t\tname     string\n\t\tmockData mockData\n\t\targs     []string\n\t\ttargets  []string\n\t\twantPkgs []string\n\t\twantErr  bool\n\t}{\n\t\t{\n\t\t\tname:     \"Qu\",\n\t\t\tmockData: mockData{mockDB, mockAUR},\n\t\t\targs:     []string{\"Q\", \"u\"},\n\t\t\ttargets:  []string{},\n\t\t\twantPkgs: []string{\n\t\t\t\tfmt.Sprintf(\"%s %s -> %s\",\n\t\t\t\t\ttext.Bold(\"linux\"),\n\t\t\t\t\ttext.Bold(text.Green(\"4.3.0\")),\n\t\t\t\t\ttext.Bold(text.Green(\"5.10.0\")),\n\t\t\t\t),\n\t\t\t\tfmt.Sprintf(\"%s %s -> %s\",\n\t\t\t\t\ttext.Bold(\"go\"),\n\t\t\t\t\ttext.Bold(text.Green(\"2:1.20.3-1\")),\n\t\t\t\t\ttext.Bold(text.Green(\"2:1.20.4-1\")),\n\t\t\t\t),\n\t\t\t\tfmt.Sprintf(\"%s %s -> %s\",\n\t\t\t\t\ttext.Bold(\"vosk-api\"),\n\t\t\t\t\ttext.Bold(text.Green(\"0.3.43-1\")),\n\t\t\t\t\ttext.Bold(text.Green(\"0.3.45-1\")),\n\t\t\t\t),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:     \"Quq\",\n\t\t\tmockData: mockData{mockDB, mockAUR},\n\t\t\targs:     []string{\"Q\", \"u\", \"q\"},\n\t\t\ttargets:  []string{},\n\t\t\twantPkgs: []string{\"linux\", \"go\", \"vosk-api\"},\n\t\t},\n\t\t{\n\t\t\tname:     \"Quq linux\",\n\t\t\tmockData: mockData{mockDB, mockAUR},\n\t\t\targs:     []string{\"Q\", \"u\", \"q\"},\n\t\t\ttargets:  []string{\"linux\"},\n\t\t\twantPkgs: []string{\"linux\"},\n\t\t},\n\t\t{\n\t\t\tname:     \"Qunq\",\n\t\t\tmockData: mockData{mockDB, mockAUR},\n\t\t\targs:     []string{\"Q\", \"u\", \"n\", \"q\"},\n\t\t\ttargets:  []string{},\n\t\t\twantPkgs: []string{\"linux\", \"go\"},\n\t\t},\n\t\t{\n\t\t\tname:     \"Qumq\",\n\t\t\tmockData: mockData{mockDB, mockAUR},\n\t\t\targs:     []string{\"Q\", \"u\", \"m\", \"q\"},\n\t\t\ttargets:  []string{},\n\t\t\twantPkgs: []string{\"vosk-api\"},\n\t\t},\n\t\t{\n\t\t\tname:     \"Quq no-update-pkg\",\n\t\t\tmockData: mockData{mockDB, mockAUR},\n\t\t\targs:     []string{\"Q\", \"u\", \"q\"},\n\t\t\ttargets:  []string{\"no-update-pkg\"},\n\t\t\twantPkgs: []string{},\n\t\t\twantErr:  true,\n\t\t},\n\t\t{\n\t\t\tname:     \"Quq non-existent-pkg\",\n\t\t\tmockData: mockData{mockDB, mockAUR},\n\t\t\targs:     []string{\"Q\", \"u\", \"q\"},\n\t\t\ttargets:  []string{\"non-existent-pkg\"},\n\t\t\twantPkgs: []string{},\n\t\t\twantErr:  true,\n\t\t},\n\t\t{\n\t\t\tname:     \"Qu no-updates-any\",\n\t\t\tmockData: mockData{mockDBNoUpdates, mockAURNoUpdates},\n\t\t\targs:     []string{\"Q\", \"u\"},\n\t\t\ttargets:  []string{},\n\t\t\twantPkgs: []string{},\n\t\t\twantErr:  true,\n\t\t},\n\t\t{\n\t\t\tname:     \"Qun no-updates-native\",\n\t\t\tmockData: mockData{mockDBNoUpdates, mockAUR},\n\t\t\targs:     []string{\"Q\", \"u\", \"n\"},\n\t\t\ttargets:  []string{},\n\t\t\twantPkgs: []string{},\n\t\t\twantErr:  true,\n\t\t},\n\t\t{\n\t\t\tname:     \"Qum no-updates-foreign\",\n\t\t\tmockData: mockData{mockDB, mockAURNoUpdates},\n\t\t\targs:     []string{\"Q\", \"u\", \"m\"},\n\t\t\ttargets:  []string{},\n\t\t\twantPkgs: []string{},\n\t\t\twantErr:  true,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tcmdBuilder := &exe.CmdBuilder{\n\t\t\t\tSudoBin:          \"su\",\n\t\t\t\tPacmanBin:        pacmanBin,\n\t\t\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\t\t\tRunner:           &exe.MockRunner{},\n\t\t\t\tSudoLoopEnabled:  false,\n\t\t\t}\n\n\t\t\tr, w, _ := os.Pipe()\n\n\t\t\tlogger := text.NewLogger(w, io.Discard, strings.NewReader(\"\"), true, \"test\")\n\n\t\t\trun := &runtime.Runtime{\n\t\t\t\tCfg: &settings.Configuration{\n\t\t\t\t\tRemoveMake: \"no\",\n\t\t\t\t},\n\t\t\t\tLogger:     logger,\n\t\t\t\tCmdBuilder: cmdBuilder,\n\t\t\t\tVCSStore:   &vcs.Mock{},\n\t\t\t\tAURClient:  tc.mockData.aurCache,\n\t\t\t}\n\n\t\t\tcmdArgs := parser.MakeArguments()\n\t\t\tcmdArgs.AddArg(tc.args...)\n\t\t\tcmdArgs.AddTarget(tc.targets...)\n\n\t\t\terr = handleCmd(context.Background(), run, cmdArgs, tc.mockData.db)\n\n\t\t\tw.Close()\n\t\t\tout, _ := io.ReadAll(r)\n\n\t\t\tif tc.wantErr {\n\t\t\t\trequire.Error(t, err)\n\t\t\t\tassert.EqualError(t, err, \"\")\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\n\t\t\toutStr := string(out)\n\t\t\toutPkgs := make([]string, 0)\n\t\t\tif outStr != \"\" {\n\t\t\t\toutPkgs = strings.Split(strings.TrimSuffix(outStr, \"\\n\"), \"\\n\")\n\t\t\t}\n\n\t\t\tassert.ElementsMatch(t, outPkgs, tc.wantPkgs, \"Lists of packages should match\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "query.go",
          "type": "blob",
          "size": 6.1552734375,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io/fs\"\n\t\"path/filepath\"\n\n\taur \"github.com/Jguer/aur\"\n\talpm \"github.com/Jguer/go-alpm/v2\"\n\tmapset \"github.com/deckarep/golang-set/v2\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db\"\n\t\"github.com/Jguer/yay/v12/pkg/query\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/text\"\n)\n\n// SyncSearch presents a query to the local repos and to the AUR.\nfunc syncSearch(ctx context.Context, pkgS []string,\n\tdbExecutor db.Executor, queryBuilder query.Builder, verbose bool,\n) error {\n\tqueryBuilder.Execute(ctx, dbExecutor, pkgS)\n\n\tsearchMode := query.Minimal\n\tif verbose {\n\t\tsearchMode = query.Detailed\n\t}\n\n\treturn queryBuilder.Results(dbExecutor, searchMode)\n}\n\n// SyncInfo serves as a pacman -Si for repo packages and AUR packages.\nfunc syncInfo(ctx context.Context, run *runtime.Runtime,\n\tcmdArgs *parser.Arguments, pkgS []string, dbExecutor db.Executor,\n) error {\n\tvar (\n\t\tinfo    []aur.Pkg\n\t\terr     error\n\t\tmissing = false\n\t)\n\n\tpkgS = query.RemoveInvalidTargets(run.Logger, pkgS, run.Cfg.Mode)\n\taurS, repoS := packageSlices(pkgS, run.Cfg, dbExecutor)\n\n\tif len(repoS) == 0 && len(aurS) == 0 {\n\t\tif run.Cfg.Mode != parser.ModeRepo {\n\t\t\taurS = dbExecutor.InstalledRemotePackageNames()\n\t\t}\n\n\t\tif run.Cfg.Mode != parser.ModeAUR {\n\t\t\trepoS = dbExecutor.InstalledSyncPackageNames()\n\t\t}\n\t}\n\n\tif len(aurS) != 0 {\n\t\tnoDB := make([]string, 0, len(aurS))\n\n\t\tfor _, pkg := range aurS {\n\t\t\t_, name := text.SplitDBFromName(pkg)\n\t\t\tnoDB = append(noDB, name)\n\t\t}\n\n\t\tinfo, err = run.AURClient.Get(ctx, &aur.Query{\n\t\t\tNeedles: noDB,\n\t\t\tBy:      aur.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\tmissing = true\n\n\t\t\trun.Logger.Errorln(err)\n\t\t}\n\t}\n\n\tif len(repoS) != 0 || (len(aurS) == 0 && len(repoS) == 0) {\n\t\targuments := cmdArgs.Copy()\n\t\targuments.ClearTargets()\n\t\targuments.AddTarget(repoS...)\n\n\t\terr = run.CmdBuilder.Show(run.CmdBuilder.BuildPacmanCmd(ctx,\n\t\t\targuments, run.Cfg.Mode, settings.NoConfirm))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif len(aurS) != len(info) {\n\t\tmissing = true\n\t}\n\n\tfor i := range info {\n\t\tprintInfo(run.Logger, run.Cfg, &info[i], cmdArgs.ExistsDouble(\"i\"))\n\t}\n\n\tif missing {\n\t\terr = fmt.Errorf(\"\")\n\t}\n\n\treturn err\n}\n\n// PackageSlices separates an input slice into aur and repo slices.\nfunc packageSlices(toCheck []string, config *settings.Configuration, dbExecutor db.Executor) (aurNames, repoNames []string) {\n\tfor _, _pkg := range toCheck {\n\t\tdbName, name := text.SplitDBFromName(_pkg)\n\n\t\tif dbName == \"aur\" || config.Mode == parser.ModeAUR {\n\t\t\taurNames = append(aurNames, _pkg)\n\t\t\tcontinue\n\t\t} else if dbName != \"\" || config.Mode == parser.ModeRepo {\n\t\t\trepoNames = append(repoNames, _pkg)\n\t\t\tcontinue\n\t\t}\n\n\t\tif dbExecutor.SyncSatisfierExists(name) ||\n\t\t\tlen(dbExecutor.PackagesFromGroup(name)) != 0 {\n\t\t\trepoNames = append(repoNames, _pkg)\n\t\t} else {\n\t\t\taurNames = append(aurNames, _pkg)\n\t\t}\n\t}\n\n\treturn aurNames, repoNames\n}\n\n// MapSetMap is a Map of Sets.\ntype mapSetMap[T comparable] map[T]mapset.Set[T]\n\n// Add adds a new value to the Map.\n// If n is already in the map, then v is appended to the StringSet under that key.\n// Otherwise a new Set is created containing v.\nfunc (mss mapSetMap[T]) Add(n, v T) {\n\tif _, ok := mss[n]; !ok {\n\t\tmss[n] = mapset.NewSet[T]()\n\t}\n\n\tmss[n].Add(v)\n}\n\n// HangingPackages returns a list of packages installed as deps\n// and unneeded by the system\n// removeOptional decides whether optional dependencies are counted or not.\nfunc hangingPackages(removeOptional bool, dbExecutor db.Executor) (hanging []string) {\n\t// safePackages represents every package in the system in one of 3 states\n\t// State = 0 - Remove package from the system\n\t// State = 1 - Keep package in the system; need to iterate over dependencies\n\t// State = 2 - Keep package and have iterated over dependencies\n\tsafePackages := make(map[string]uint8)\n\t// provides stores a mapping from the provides name back to the original package name\n\tprovides := make(mapSetMap[string])\n\n\tpackages := dbExecutor.LocalPackages()\n\t// Mark explicit dependencies and enumerate the provides list\n\tfor _, pkg := range packages {\n\t\tif pkg.Reason() == alpm.PkgReasonExplicit {\n\t\t\tsafePackages[pkg.Name()] = 1\n\t\t} else {\n\t\t\tsafePackages[pkg.Name()] = 0\n\t\t}\n\n\t\tfor _, dep := range dbExecutor.PackageProvides(pkg) {\n\t\t\tprovides.Add(dep.Name, pkg.Name())\n\t\t}\n\t}\n\n\titerateAgain := true\n\n\tfor iterateAgain {\n\t\titerateAgain = false\n\n\t\tfor _, pkg := range packages {\n\t\t\tif state := safePackages[pkg.Name()]; state == 0 || state == 2 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tsafePackages[pkg.Name()] = 2\n\t\t\tdeps := dbExecutor.PackageDepends(pkg)\n\n\t\t\tif !removeOptional {\n\t\t\t\tdeps = append(deps, dbExecutor.PackageOptionalDepends(pkg)...)\n\t\t\t}\n\n\t\t\t// Update state for dependencies\n\t\t\tfor _, dep := range deps {\n\t\t\t\t// Don't assume a dependency is installed\n\t\t\t\tstate, ok := safePackages[dep.Name]\n\t\t\t\tif !ok {\n\t\t\t\t\t// Check if dep is a provides rather than actual package name\n\t\t\t\t\tif pset, ok2 := provides[dep.Name]; ok2 {\n\t\t\t\t\t\tfor p := range pset.Iter() {\n\t\t\t\t\t\t\tif safePackages[p] == 0 {\n\t\t\t\t\t\t\t\titerateAgain = true\n\t\t\t\t\t\t\t\tsafePackages[p] = 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tif state == 0 {\n\t\t\t\t\titerateAgain = true\n\t\t\t\t\tsafePackages[dep.Name] = 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Build list of packages to be removed\n\tfor _, pkg := range packages {\n\t\tif safePackages[pkg.Name()] == 0 {\n\t\t\thanging = append(hanging, pkg.Name())\n\t\t}\n\t}\n\n\treturn hanging\n}\n\nfunc getFolderSize(path string) (size int64) {\n\t_ = filepath.WalkDir(path, func(p string, entry fs.DirEntry, err error) error {\n\t\tinfo, _ := entry.Info()\n\t\tsize += info.Size()\n\t\treturn nil\n\t})\n\n\treturn size\n}\n\n// Statistics returns statistics about packages installed in system.\nfunc statistics(run *runtime.Runtime, dbExecutor db.Executor) (res struct {\n\tTotaln       int\n\tExpln        int\n\tTotalSize    int64\n\tpacmanCaches map[string]int64\n\tyayCache     int64\n},\n) {\n\tfor _, pkg := range dbExecutor.LocalPackages() {\n\t\tres.TotalSize += pkg.ISize()\n\t\tres.Totaln++\n\n\t\tif pkg.Reason() == alpm.PkgReasonExplicit {\n\t\t\tres.Expln++\n\t\t}\n\t}\n\n\tres.pacmanCaches = make(map[string]int64)\n\tfor _, path := range run.PacmanConf.CacheDir {\n\t\tres.pacmanCaches[path] = getFolderSize(path)\n\t}\n\n\tres.yayCache = getFolderSize(run.Cfg.BuildDir)\n\n\treturn\n}\n"
        },
        {
          "name": "query_test.go",
          "type": "blob",
          "size": 7.3349609375,
          "content": "//go:build !integration\n// +build !integration\n\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db/mock\"\n\tmockaur \"github.com/Jguer/yay/v12/pkg/dep/mock\"\n\t\"github.com/Jguer/yay/v12/pkg/query\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/exe\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\n\t\"github.com/Jguer/aur\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc getFromFile(t *testing.T, filePath string) mockaur.GetFunc {\n\tf, err := os.Open(filePath)\n\trequire.NoError(t, err)\n\n\tfBytes, err := io.ReadAll(f)\n\trequire.NoError(t, err)\n\n\tpkgs := []aur.Pkg{}\n\terr = json.Unmarshal(fBytes, &pkgs)\n\trequire.NoError(t, err)\n\n\treturn func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\treturn pkgs, nil\n\t}\n}\n\nfunc TestSyncInfo(t *testing.T) {\n\tt.Parallel()\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\n\ttestCases := []struct {\n\t\tname     string\n\t\targs     []string\n\t\ttargets  []string\n\t\twantShow []string\n\t\twantErr  bool\n\t}{\n\t\t{\n\t\t\tname:     \"Si linux\",\n\t\t\targs:     []string{\"S\", \"i\"},\n\t\t\ttargets:  []string{\"linux\"},\n\t\t\twantShow: []string{\"pacman\", \"-S\", \"-i\", \"--config\", \"/etc/pacman.conf\", \"--\", \"linux\"},\n\t\t},\n\t\t{\n\t\t\tname:     \"Si jellyfin\",\n\t\t\targs:     []string{\"S\", \"i\"},\n\t\t\ttargets:  []string{\"jellyfin\"},\n\t\t\twantShow: []string{},\n\t\t},\n\t\t{\n\t\t\tname:     \"Si linux jellyfin\",\n\t\t\targs:     []string{\"S\", \"i\"},\n\t\t\ttargets:  []string{\"linux\", \"jellyfin\"},\n\t\t\twantShow: []string{\"pacman\", \"-S\", \"-i\", \"--config\", \"/etc/pacman.conf\", \"--\", \"linux\"},\n\t\t},\n\t\t{\n\t\t\tname:     \"Si jellyfin\",\n\t\t\targs:     []string{\"S\", \"i\"},\n\t\t\ttargets:  []string{\"jellyfin\"},\n\t\t\twantShow: []string{},\n\t\t},\n\t\t{\n\t\t\tname:     \"Si missing\",\n\t\t\targs:     []string{\"S\", \"i\"},\n\t\t\ttargets:  []string{\"missing\"},\n\t\t\twantShow: []string{},\n\t\t\twantErr:  true,\n\t\t},\n\t}\n\n\tdbExc := &mock.DBExecutor{\n\t\tSyncSatisfierFn: func(s string) mock.IPackage {\n\t\t\tif s == \"linux\" {\n\t\t\t\treturn &mock.Package{\n\t\t\t\t\tPName: \"linux\",\n\t\t\t\t\tPBase: \"linux\",\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tPackagesFromGroupFn: func(s string) []mock.IPackage {\n\t\t\treturn nil\n\t\t},\n\t}\n\n\tmockAUR := &mockaur.MockAUR{GetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\tif query.Needles[0] == \"jellyfin\" {\n\t\t\tjfinFn := getFromFile(t, \"pkg/dep/testdata/jellyfin.json\")\n\t\t\treturn jfinFn(ctx, query)\n\t\t}\n\n\t\treturn nil, fmt.Errorf(\"not found\")\n\t}}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tmockRunner := &exe.MockRunner{\n\t\t\t\tCaptureFn: func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\t\t\t\treturn \"\", \"\", nil\n\t\t\t\t},\n\t\t\t\tShowFn: func(cmd *exec.Cmd) error { return nil },\n\t\t\t}\n\t\t\tcmdBuilder := &exe.CmdBuilder{\n\t\t\t\tSudoBin:          \"su\",\n\t\t\t\tPacmanBin:        pacmanBin,\n\t\t\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\t\t\tGitBin:           \"git\",\n\t\t\t\tRunner:           mockRunner,\n\t\t\t\tSudoLoopEnabled:  false,\n\t\t\t}\n\n\t\t\trun := &runtime.Runtime{\n\t\t\t\tCmdBuilder: cmdBuilder,\n\t\t\t\tAURClient:  mockAUR,\n\t\t\t\tLogger:     newTestLogger(),\n\t\t\t\tCfg:        &settings.Configuration{},\n\t\t\t}\n\n\t\t\tcmdArgs := parser.MakeArguments()\n\t\t\tcmdArgs.AddArg(tc.args...)\n\t\t\tcmdArgs.AddTarget(tc.targets...)\n\n\t\t\terr := handleCmd(context.Background(),\n\t\t\t\trun, cmdArgs, dbExc,\n\t\t\t)\n\n\t\t\tif tc.wantErr {\n\t\t\t\trequire.Error(t, err)\n\t\t\t\tassert.EqualError(t, err, \"\")\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\t\t\tif len(tc.wantShow) == 0 {\n\t\t\t\tassert.Empty(t, mockRunner.ShowCalls)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfor i, call := range mockRunner.ShowCalls {\n\t\t\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\t\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\n\t\t\t\t// options are in a different order on different systems and on CI root user is used\n\t\t\t\tassert.Subset(t, strings.Split(show, \" \"),\n\t\t\t\t\tstrings.Split(tc.wantShow[i], \" \"),\n\t\t\t\t\tfmt.Sprintf(\"%d - %s\", i, show))\n\t\t\t}\n\t\t})\n\t}\n}\n\n// Should not error when there is a DB called aur\nfunc TestSyncSearchAURDB(t *testing.T) {\n\tt.Parallel()\n\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\ttestCases := []struct {\n\t\tname       string\n\t\targs       []string\n\t\ttargets    []string\n\t\twantShow   []string\n\t\twantErr    bool\n\t\tbottomUp   bool\n\t\tsingleLine bool\n\t\tmixed      bool\n\t}{\n\t\t{\n\t\t\tname:     \"Ss jellyfin false false\",\n\t\t\targs:     []string{\"S\", \"s\"},\n\t\t\ttargets:  []string{\"jellyfin\"},\n\t\t\twantShow: []string{},\n\t\t},\n\t\t{\n\t\t\tname:       \"Ss jellyfin true false\",\n\t\t\targs:       []string{\"S\", \"s\"},\n\t\t\ttargets:    []string{\"jellyfin\"},\n\t\t\twantShow:   []string{},\n\t\t\tsingleLine: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"Ss jellyfin true true\",\n\t\t\targs:       []string{\"S\", \"s\"},\n\t\t\ttargets:    []string{\"jellyfin\"},\n\t\t\twantShow:   []string{},\n\t\t\tsingleLine: true,\n\t\t\tmixed:      true,\n\t\t},\n\t\t{\n\t\t\tname:       \"Ss jellyfin false true\",\n\t\t\targs:       []string{\"S\", \"s\"},\n\t\t\ttargets:    []string{\"jellyfin\"},\n\t\t\twantShow:   []string{},\n\t\t\tsingleLine: false,\n\t\t\tmixed:      true,\n\t\t},\n\t\t{\n\t\t\tname:       \"Ss jellyfin true true - bottomup\",\n\t\t\targs:       []string{\"S\", \"s\"},\n\t\t\ttargets:    []string{\"jellyfin\"},\n\t\t\twantShow:   []string{},\n\t\t\tsingleLine: true,\n\t\t\tmixed:      true,\n\t\t\tbottomUp:   true,\n\t\t},\n\t}\n\n\tdbExc := &mock.DBExecutor{\n\t\tSyncPackagesFn: func(s ...string) []mock.IPackage {\n\t\t\treturn []mock.IPackage{\n\t\t\t\t&mock.Package{\n\t\t\t\t\tPName: \"jellyfin\",\n\t\t\t\t\tPBase: \"jellyfin\",\n\t\t\t\t\tPDB:   mock.NewDB(\"aur\"),\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tLocalPackageFn: func(s string) mock.IPackage {\n\t\t\treturn &mock.Package{\n\t\t\t\tPName: \"jellyfin\",\n\t\t\t\tPBase: \"jellyfin\",\n\t\t\t\tPDB:   mock.NewDB(\"aur\"),\n\t\t\t}\n\t\t},\n\t\tPackagesFromGroupFn: func(s string) []mock.IPackage {\n\t\t\treturn nil\n\t\t},\n\t}\n\n\tmockAUR := &mockaur.MockAUR{GetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\tif query.Needles[0] == \"jellyfin\" {\n\t\t\tjfinFn := getFromFile(t, \"pkg/dep/testdata/jellyfin.json\")\n\t\t\treturn jfinFn(ctx, query)\n\t\t}\n\n\t\treturn nil, fmt.Errorf(\"not found\")\n\t}}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tmockRunner := &exe.MockRunner{\n\t\t\t\tCaptureFn: func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\t\t\t\treturn \"\", \"\", nil\n\t\t\t\t},\n\t\t\t\tShowFn: func(cmd *exec.Cmd) error { return nil },\n\t\t\t}\n\t\t\tcmdBuilder := &exe.CmdBuilder{\n\t\t\t\tSudoBin:          \"su\",\n\t\t\t\tPacmanBin:        pacmanBin,\n\t\t\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\t\t\tGitBin:           \"git\",\n\t\t\t\tRunner:           mockRunner,\n\t\t\t\tSudoLoopEnabled:  false,\n\t\t\t}\n\n\t\t\trun := &runtime.Runtime{\n\t\t\t\tCmdBuilder: cmdBuilder,\n\t\t\t\tAURClient:  mockAUR,\n\t\t\t\tQueryBuilder: query.NewSourceQueryBuilder(mockAUR, newTestLogger(), \"votes\", parser.ModeAny, \"name\",\n\t\t\t\t\ttc.bottomUp, tc.singleLine, tc.mixed),\n\t\t\t\tLogger: newTestLogger(),\n\t\t\t\tCfg:    &settings.Configuration{},\n\t\t\t}\n\n\t\t\tcmdArgs := parser.MakeArguments()\n\t\t\tcmdArgs.AddArg(tc.args...)\n\t\t\tcmdArgs.AddTarget(tc.targets...)\n\n\t\t\terr := handleCmd(context.Background(),\n\t\t\t\trun, cmdArgs, dbExc,\n\t\t\t)\n\n\t\t\tif tc.wantErr {\n\t\t\t\trequire.Error(t, err)\n\t\t\t\tassert.EqualError(t, err, \"\")\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\t\t\tif len(tc.wantShow) == 0 {\n\t\t\t\tassert.Empty(t, mockRunner.ShowCalls)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfor i, call := range mockRunner.ShowCalls {\n\t\t\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\t\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\n\t\t\t\t// options are in a different order on different systems and on CI root user is used\n\t\t\t\tassert.Subset(t, strings.Split(show, \" \"),\n\t\t\t\t\tstrings.Split(tc.wantShow[i], \" \"),\n\t\t\t\t\tfmt.Sprintf(\"%d - %s\", i, show))\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "sync.go",
          "type": "blob",
          "size": 2.841796875,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/leonelquinteros/gotext\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db\"\n\t\"github.com/Jguer/yay/v12/pkg/dep\"\n\t\"github.com/Jguer/yay/v12/pkg/multierror\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/exe\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/sync\"\n\t\"github.com/Jguer/yay/v12/pkg/upgrade\"\n)\n\nfunc syncInstall(ctx context.Context,\n\trun *runtime.Runtime,\n\tcmdArgs *parser.Arguments,\n\tdbExecutor db.Executor,\n) error {\n\taurCache := run.AURClient\n\trefreshArg := cmdArgs.ExistsArg(\"y\", \"refresh\")\n\tnoDeps := cmdArgs.ExistsArg(\"d\", \"nodeps\")\n\tnoCheck := strings.Contains(run.Cfg.MFlags, \"--nocheck\")\n\tif noDeps {\n\t\trun.CmdBuilder.AddMakepkgFlag(\"-d\")\n\t}\n\n\tif refreshArg && run.Cfg.Mode.AtLeastRepo() {\n\t\tif errR := earlyRefresh(ctx, run.Cfg, run.CmdBuilder, cmdArgs); errR != nil {\n\t\t\treturn fmt.Errorf(\"%s - %w\", gotext.Get(\"error refreshing databases\"), errR)\n\t\t}\n\n\t\t// we may have done -Sy, our handle now has an old\n\t\t// database.\n\t\tif errRefresh := dbExecutor.RefreshHandle(); errRefresh != nil {\n\t\t\treturn errRefresh\n\t\t}\n\t}\n\n\tgrapher := dep.NewGrapher(dbExecutor, aurCache, false, settings.NoConfirm,\n\t\tnoDeps, noCheck, cmdArgs.ExistsArg(\"needed\"), run.Logger.Child(\"grapher\"))\n\n\tgraph, err := grapher.GraphFromTargets(ctx, nil, cmdArgs.Targets)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\texcluded := []string{}\n\tif cmdArgs.ExistsArg(\"u\", \"sysupgrade\") {\n\t\tvar errSysUp error\n\n\t\tupService := upgrade.NewUpgradeService(\n\t\t\tgrapher, aurCache, dbExecutor, run.VCSStore,\n\t\t\trun.Cfg, settings.NoConfirm, run.Logger.Child(\"upgrade\"))\n\n\t\tgraph, errSysUp = upService.GraphUpgrades(ctx,\n\t\t\tgraph, cmdArgs.ExistsDouble(\"u\", \"sysupgrade\"),\n\t\t\tfunc(*upgrade.Upgrade) bool { return true })\n\t\tif errSysUp != nil {\n\t\t\treturn errSysUp\n\t\t}\n\n\t\tupService.AURWarnings.Print()\n\n\t\texcluded, errSysUp = upService.UserExcludeUpgrades(graph)\n\t\tif errSysUp != nil {\n\t\t\treturn errSysUp\n\t\t}\n\t}\n\n\topService := sync.NewOperationService(ctx, dbExecutor, run)\n\tmultiErr := &multierror.MultiError{}\n\ttargets := graph.TopoSortedLayerMap(func(s string, ii *dep.InstallInfo) error {\n\t\tif ii.Source == dep.Missing {\n\t\t\tmultiErr.Add(fmt.Errorf(\"%w: %s %s\", ErrPackagesNotFound, s, ii.Version))\n\t\t}\n\t\treturn nil\n\t})\n\n\tif err := multiErr.Return(); err != nil {\n\t\treturn err\n\t}\n\n\treturn opService.Run(ctx, run, cmdArgs, targets, excluded)\n}\n\nfunc earlyRefresh(ctx context.Context, cfg *settings.Configuration, cmdBuilder exe.ICmdBuilder, cmdArgs *parser.Arguments) error {\n\targuments := cmdArgs.Copy()\n\tif cfg.CombinedUpgrade {\n\t\targuments.DelArg(\"u\", \"sysupgrade\")\n\t}\n\targuments.DelArg(\"s\", \"search\")\n\targuments.DelArg(\"i\", \"info\")\n\targuments.DelArg(\"l\", \"list\")\n\targuments.ClearTargets()\n\n\treturn cmdBuilder.Show(cmdBuilder.BuildPacmanCmd(ctx,\n\t\targuments, cfg.Mode, settings.NoConfirm))\n}\n"
        },
        {
          "name": "sync_test.go",
          "type": "blob",
          "size": 19.7705078125,
          "content": "//go:build !integration\n// +build !integration\n\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"github.com/Jguer/aur\"\n\talpm \"github.com/Jguer/go-alpm/v2\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db\"\n\t\"github.com/Jguer/yay/v12/pkg/db/mock\"\n\tmockaur \"github.com/Jguer/yay/v12/pkg/dep/mock\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/settings\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/exe\"\n\t\"github.com/Jguer/yay/v12/pkg/settings/parser\"\n\t\"github.com/Jguer/yay/v12/pkg/text\"\n\t\"github.com/Jguer/yay/v12/pkg/vcs\"\n)\n\nfunc TestSyncUpgrade(t *testing.T) {\n\tt.Parallel()\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\treturn \"\", \"\", nil\n\t}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"S\")\n\tcmdArgs.AddArg(\"y\")\n\tcmdArgs.AddArg(\"u\")\n\n\tdbName := mock.NewDB(\"core\")\n\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tRefreshHandleFn: func() error {\n\t\t\treturn nil\n\t\t},\n\t\tReposFn: func() []string {\n\t\t\treturn []string{\"core\"}\n\t\t},\n\t\tInstalledRemotePackagesFn: func() map[string]alpm.IPackage {\n\t\t\treturn map[string]alpm.IPackage{}\n\t\t},\n\t\tInstalledRemotePackageNamesFn: func() []string {\n\t\t\treturn []string{}\n\t\t},\n\t\tSyncUpgradesFn: func(\n\t\t\tbool,\n\t\t) (map[string]db.SyncUpgrade, error) {\n\t\t\treturn map[string]db.SyncUpgrade{\n\t\t\t\t\"linux\": {\n\t\t\t\t\tPackage: &mock.Package{\n\t\t\t\t\t\tPName:    \"linux\",\n\t\t\t\t\t\tPVersion: \"5.10.0\",\n\t\t\t\t\t\tPDB:      dbName,\n\t\t\t\t\t},\n\t\t\t\t\tLocalVersion: \"4.3.0\",\n\t\t\t\t\tReason:       alpm.PkgReasonExplicit,\n\t\t\t\t},\n\t\t\t}, nil\n\t\t},\n\t}\n\n\trun := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tRemoveMake: \"no\",\n\t\t},\n\t\tLogger:     text.NewLogger(io.Discard, os.Stderr, strings.NewReader(\"\\n\"), true, \"test\"),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t},\n\t\t},\n\t}\n\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\trequire.NoError(t, err)\n\n\twantCapture := []string{}\n\twantShow := []string{\n\t\t\"pacman -S -y --config /etc/pacman.conf --\",\n\t\t\"pacman -S -y -u --config /etc/pacman.conf --\",\n\t}\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n\nfunc TestSyncUpgrade_IgnoreAll(t *testing.T) {\n\tt.Parallel()\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\treturn \"\", \"\", nil\n\t}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"S\")\n\tcmdArgs.AddArg(\"y\")\n\tcmdArgs.AddArg(\"u\")\n\n\tdbName := mock.NewDB(\"core\")\n\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tRefreshHandleFn: func() error {\n\t\t\treturn nil\n\t\t},\n\t\tReposFn: func() []string {\n\t\t\treturn []string{\"core\"}\n\t\t},\n\t\tInstalledRemotePackagesFn: func() map[string]alpm.IPackage {\n\t\t\treturn map[string]alpm.IPackage{}\n\t\t},\n\t\tInstalledRemotePackageNamesFn: func() []string {\n\t\t\treturn []string{}\n\t\t},\n\t\tSyncUpgradesFn: func(\n\t\t\tbool,\n\t\t) (map[string]db.SyncUpgrade, error) {\n\t\t\treturn map[string]db.SyncUpgrade{\n\t\t\t\t\"linux\": {\n\t\t\t\t\tPackage: &mock.Package{\n\t\t\t\t\t\tPName:    \"linux\",\n\t\t\t\t\t\tPVersion: \"5.10.0\",\n\t\t\t\t\t\tPDB:      dbName,\n\t\t\t\t\t},\n\t\t\t\t\tLocalVersion: \"4.3.0\",\n\t\t\t\t\tReason:       alpm.PkgReasonExplicit,\n\t\t\t\t},\n\t\t\t}, nil\n\t\t},\n\t}\n\n\trun := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tRemoveMake: \"no\",\n\t\t},\n\t\tLogger:     text.NewLogger(io.Discard, os.Stderr, strings.NewReader(\"1\\n\"), true, \"test\"),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t},\n\t\t},\n\t}\n\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\trequire.NoError(t, err)\n\n\twantCapture := []string{}\n\twantShow := []string{\n\t\t\"pacman -S -y --config /etc/pacman.conf --\",\n\t}\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n\nfunc TestSyncUpgrade_IgnoreOne(t *testing.T) {\n\tt.Parallel()\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\tgitBin := t.TempDir() + \"/git\"\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\treturn \"\", \"\", nil\n\t}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"S\")\n\tcmdArgs.AddArg(\"y\")\n\tcmdArgs.AddArg(\"u\")\n\n\tdbName := mock.NewDB(\"core\")\n\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tRefreshHandleFn: func() error {\n\t\t\treturn nil\n\t\t},\n\t\tReposFn: func() []string {\n\t\t\treturn []string{\"core\"}\n\t\t},\n\t\tInstalledRemotePackagesFn: func() map[string]alpm.IPackage {\n\t\t\treturn map[string]alpm.IPackage{}\n\t\t},\n\t\tInstalledRemotePackageNamesFn: func() []string {\n\t\t\treturn []string{}\n\t\t},\n\t\tSyncUpgradesFn: func(\n\t\t\tbool,\n\t\t) (map[string]db.SyncUpgrade, error) {\n\t\t\treturn map[string]db.SyncUpgrade{\n\t\t\t\t\"gcc\": {\n\t\t\t\t\tPackage: &mock.Package{\n\t\t\t\t\t\tPName:    \"gcc\",\n\t\t\t\t\t\tPVersion: \"6.0.0\",\n\t\t\t\t\t\tPDB:      dbName,\n\t\t\t\t\t},\n\t\t\t\t\tLocalVersion: \"5.0.0\",\n\t\t\t\t\tReason:       alpm.PkgReasonExplicit,\n\t\t\t\t},\n\t\t\t\t\"linux\": {\n\t\t\t\t\tPackage: &mock.Package{\n\t\t\t\t\t\tPName:    \"linux\",\n\t\t\t\t\t\tPVersion: \"5.10.0\",\n\t\t\t\t\t\tPDB:      dbName,\n\t\t\t\t\t},\n\t\t\t\t\tLocalVersion: \"4.3.0\",\n\t\t\t\t\tReason:       alpm.PkgReasonExplicit,\n\t\t\t\t},\n\t\t\t\t\"linux-headers\": {\n\t\t\t\t\tPackage: &mock.Package{\n\t\t\t\t\t\tPName:    \"linux-headers\",\n\t\t\t\t\t\tPVersion: \"5.10.0\",\n\t\t\t\t\t\tPDB:      dbName,\n\t\t\t\t\t},\n\t\t\t\t\tLocalVersion: \"4.3.0\",\n\t\t\t\t\tReason:       alpm.PkgReasonDepend,\n\t\t\t\t},\n\t\t\t}, nil\n\t\t},\n\t}\n\n\trun := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tRemoveMake: \"no\",\n\t\t},\n\t\tLogger:     text.NewLogger(io.Discard, os.Stderr, strings.NewReader(\"1\\n\"), true, \"test\"),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t},\n\t\t},\n\t}\n\n\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\trequire.NoError(t, err)\n\n\twantCapture := []string{}\n\twantShow := []string{\n\t\t\"pacman -S -y --config /etc/pacman.conf --\",\n\t\t\"pacman -S -y -u --config /etc/pacman.conf --ignore linux-headers --\",\n\t}\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n\n// Pinned deps with rollup\nfunc TestSyncUpgradeAURPinnedSplitPackage(t *testing.T) {\n\tt.Parallel()\n\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\tpacmanBin := t.TempDir() + \"/pacman\"\n\ttmpDir := t.TempDir()\n\tgitBin := t.TempDir() + \"/git\"\n\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\trequire.NoError(t, err)\n\trequire.NoError(t, f.Close())\n\n\tpkgBuildDir := tmpDir + \"/vosk-api\"\n\tos.Mkdir(pkgBuildDir, 0o755)\n\tfSource, err := os.OpenFile(pkgBuildDir+\"/.SRCINFO\", os.O_RDWR|os.O_CREATE, 0o666)\n\trequire.NoError(t, err)\n\tn, errF := fSource.WriteString(`pkgbase = vosk-api\n\tpkgdesc = Offline speech recognition toolkit\n\tpkgver = 0.3.45\n\tpkgrel = 1\n\turl = https://alphacephei.com/vosk/\n\tarch = x86_64\n\tlicense = Apache\n\npkgname = vosk-api\n\tpkgdesc = vosk-api\n\npkgname = python-vosk\n\tpkgdesc = Python module for vosk-api\n\tdepends = vosk-api=0.3.45`)\n\trequire.NoError(t, errF)\n\trequire.Greater(t, n, 0)\n\trequire.NoError(t, fSource.Close())\n\n\ttars := []string{\n\t\ttmpDir + \"/vosk-api-0.3.45-1-x86_64.pkg.tar.zst\",\n\t\ttmpDir + \"/python-vosk-0.3.45-1-x86_64.pkg.tar.zst\",\n\t}\n\n\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\treturn strings.Join(tars, \"\\n\"), \"\", nil\n\t}\n\n\tonce := sync.Once{}\n\n\tshowOverride := func(cmd *exec.Cmd) error {\n\t\tonce.Do(func() {\n\t\t\tfor _, tar := range tars {\n\t\t\t\tf, err := os.OpenFile(tar, os.O_RDONLY|os.O_CREATE, 0o666)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NoError(t, f.Close())\n\t\t\t}\n\t\t})\n\t\tif sanitizeCall(cmd.String(), tmpDir, makepkgBin,\n\t\t\tpacmanBin, gitBin) == \"pacman -U --config /etc/pacman.conf -- /testdir/vosk-api-0.3.45-1-x86_64.pkg.tar.zst\" {\n\t\t\treturn errors.New(\"Unsatisfied dependency\")\n\t\t}\n\t\treturn nil\n\t}\n\n\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\tcmdBuilder := &exe.CmdBuilder{\n\t\tMakepkgBin:       makepkgBin,\n\t\tSudoBin:          \"su\",\n\t\tPacmanBin:        pacmanBin,\n\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\tGitBin:           \"git\",\n\t\tRunner:           mockRunner,\n\t\tSudoLoopEnabled:  false,\n\t}\n\n\tcmdArgs := parser.MakeArguments()\n\tcmdArgs.AddArg(\"S\")\n\tcmdArgs.AddArg(\"y\")\n\tcmdArgs.AddArg(\"u\")\n\n\tdb := &mock.DBExecutor{\n\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\treturn []string{\"x86_64\"}, nil\n\t\t},\n\t\tRefreshHandleFn: func() error {\n\t\t\treturn nil\n\t\t},\n\t\tReposFn: func() []string {\n\t\t\treturn []string{\"core\"}\n\t\t},\n\t\tSyncSatisfierFn: func(s string) mock.IPackage {\n\t\t\treturn nil\n\t\t},\n\t\tInstalledRemotePackagesFn: func() map[string]alpm.IPackage {\n\t\t\treturn map[string]alpm.IPackage{\n\t\t\t\t\"vosk-api\": &mock.Package{\n\t\t\t\t\tPName:    \"vosk-api\",\n\t\t\t\t\tPVersion: \"0.3.43-1\",\n\t\t\t\t\tPBase:    \"vosk-api\",\n\t\t\t\t\tPReason:  alpm.PkgReasonDepend,\n\t\t\t\t},\n\t\t\t\t\"python-vosk\": &mock.Package{\n\t\t\t\t\tPName:    \"python-vosk\",\n\t\t\t\t\tPVersion: \"0.3.43-1\",\n\t\t\t\t\tPBase:    \"python-vosk\",\n\t\t\t\t\tPReason:  alpm.PkgReasonExplicit,\n\t\t\t\t\t// TODO: fix mock Depends\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tInstalledRemotePackageNamesFn: func() []string {\n\t\t\treturn []string{\"vosk-api\", \"python-vosk\"}\n\t\t},\n\t\tLocalSatisfierExistsFn: func(s string) bool {\n\t\t\treturn false\n\t\t},\n\t\tSyncUpgradesFn: func(\n\t\t\tbool,\n\t\t) (map[string]db.SyncUpgrade, error) {\n\t\t\treturn map[string]db.SyncUpgrade{}, nil\n\t\t},\n\t}\n\n\trun := &runtime.Runtime{\n\t\tCfg: &settings.Configuration{\n\t\t\tDoubleConfirm: true,\n\t\t\tRemoveMake:    \"no\",\n\t\t\tBuildDir:      tmpDir,\n\t\t},\n\t\tLogger:     text.NewLogger(io.Discard, os.Stderr, strings.NewReader(\"\\n\\n\\n\\n\"), true, \"test\"),\n\t\tCmdBuilder: cmdBuilder,\n\t\tVCSStore:   &vcs.Mock{},\n\t\tAURClient: &mockaur.MockAUR{\n\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\treturn []aur.Pkg{\n\t\t\t\t\t{\n\t\t\t\t\t\tName:        \"vosk-api\",\n\t\t\t\t\t\tPackageBase: \"vosk-api\",\n\t\t\t\t\t\tVersion:     \"0.3.45-1\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tName:        \"python-vosk\",\n\t\t\t\t\t\tPackageBase: \"vosk-api\",\n\t\t\t\t\t\tVersion:     \"0.3.45-1\",\n\t\t\t\t\t\tDepends: []string{\n\t\t\t\t\t\t\t\"vosk-api=0.3.45\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}, nil\n\t\t\t},\n\t\t},\n\t}\n\n\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\trequire.NoError(t, err)\n\n\twantCapture := []string{\n\t\t\"/usr/bin/git -C /testdir/vosk-api reset --hard HEAD\",\n\t\t\"/usr/bin/git -C /testdir/vosk-api merge --no-edit --ff\",\n\t\t\"makepkg --packagelist\",\n\t\t\"makepkg --packagelist\",\n\t}\n\twantShow := []string{\n\t\t\"pacman -S -y --config /etc/pacman.conf --\",\n\t\t\"makepkg --verifysource --skippgpcheck -f -Cc\", \"makepkg --nobuild -f -C --ignorearch\",\n\t\t\"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"pacman -U --config /etc/pacman.conf -- /testdir/vosk-api-0.3.45-1-x86_64.pkg.tar.zst\",\n\t\t\"makepkg --nobuild -f -C --ignorearch\", \"makepkg -c --nobuild --noextract --ignorearch\",\n\t\t\"pacman -U --config /etc/pacman.conf -- /testdir/vosk-api-0.3.45-1-x86_64.pkg.tar.zst /testdir/python-vosk-0.3.45-1-x86_64.pkg.tar.zst\",\n\t\t\"pacman -D -q --asdeps --config /etc/pacman.conf -- vosk-api\",\n\t\t\"pacman -D -q --asexplicit --config /etc/pacman.conf -- python-vosk\",\n\t}\n\n\trequire.Len(t, mockRunner.ShowCalls, len(wantShow),\n\t\tfmt.Sprintf(\"%#v\", sanitizeCalls(mockRunner.ShowCalls, tmpDir, makepkgBin, pacmanBin, gitBin)))\n\trequire.Len(t, mockRunner.CaptureCalls, len(wantCapture),\n\t\tfmt.Sprintf(\"%#v\", sanitizeCalls(mockRunner.CaptureCalls, tmpDir, makepkgBin, pacmanBin, gitBin)))\n\n\tfor i, call := range mockRunner.ShowCalls {\n\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\tshow = strings.ReplaceAll(show, tmpDir, \"/testdir\") // replace the temp dir with a static path\n\t\tshow = strings.ReplaceAll(show, makepkgBin, \"makepkg\")\n\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\t\tshow = strings.ReplaceAll(show, gitBin, \"pacman\")\n\n\t\t// options are in a different order on different systems and on CI root user is used\n\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(wantShow[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t}\n}\n\nfunc sanitizeCalls(calls []exe.Call, tmpDir, makepkg, pacman, git string) []string {\n\tsan := make([]string, 0, len(calls))\n\tfor _, c := range calls {\n\t\ts := c.Args[0].(*exec.Cmd).String()\n\t\tsan = append(san, sanitizeCall(s, tmpDir, makepkg, pacman, git))\n\t}\n\n\treturn san\n}\n\nfunc sanitizeCall(s, tmpDir, makepkg, pacman, git string) string {\n\t_, after, found := strings.Cut(s, makepkg)\n\tif found {\n\t\ts = \"makepkg\" + after\n\t}\n\n\t_, after, found = strings.Cut(s, pacman)\n\tif found {\n\t\ts = \"pacman\" + after\n\t}\n\n\t_, after, found = strings.Cut(s, git)\n\tif found {\n\t\ts = \"git\" + after\n\t}\n\n\ts = strings.ReplaceAll(s, tmpDir, \"/testdir\")\n\n\treturn s\n}\n\nfunc TestSyncUpgrade_NoCombinedUpgrade(t *testing.T) {\n\tt.Parallel()\n\n\ttestCases := []struct {\n\t\tname            string\n\t\tcombinedUpgrade bool\n\t\twant            []string\n\t}{\n\t\t{\n\t\t\tname:            \"combined upgrade\",\n\t\t\tcombinedUpgrade: true,\n\t\t\twant:            []string{\"pacman -S -y -u --config /etc/pacman.conf --\"},\n\t\t},\n\t\t{\n\t\t\tname:            \"no combined upgrade\",\n\t\t\tcombinedUpgrade: false,\n\t\t\twant:            []string{\"pacman -S -y --config /etc/pacman.conf --\"},\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\ttc := tc\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\tmakepkgBin := t.TempDir() + \"/makepkg\"\n\t\t\tpacmanBin := t.TempDir() + \"/pacman\"\n\t\t\tgitBin := t.TempDir() + \"/git\"\n\t\t\tf, err := os.OpenFile(makepkgBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.NoError(t, f.Close())\n\n\t\t\tf, err = os.OpenFile(pacmanBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.NoError(t, f.Close())\n\n\t\t\tf, err = os.OpenFile(gitBin, os.O_RDONLY|os.O_CREATE, 0o755)\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.NoError(t, f.Close())\n\n\t\t\tcaptureOverride := func(cmd *exec.Cmd) (stdout string, stderr string, err error) {\n\t\t\t\treturn \"\", \"\", nil\n\t\t\t}\n\n\t\t\tshowOverride := func(cmd *exec.Cmd) error {\n\t\t\t\treturn nil\n\t\t\t}\n\n\t\t\tmockRunner := &exe.MockRunner{CaptureFn: captureOverride, ShowFn: showOverride}\n\t\t\tcmdBuilder := &exe.CmdBuilder{\n\t\t\t\tMakepkgBin:       makepkgBin,\n\t\t\t\tSudoBin:          \"su\",\n\t\t\t\tPacmanBin:        pacmanBin,\n\t\t\t\tPacmanConfigPath: \"/etc/pacman.conf\",\n\t\t\t\tGitBin:           \"git\",\n\t\t\t\tRunner:           mockRunner,\n\t\t\t\tSudoLoopEnabled:  false,\n\t\t\t}\n\n\t\t\tcmdArgs := parser.MakeArguments()\n\t\t\tcmdArgs.AddArg(\"S\")\n\t\t\tcmdArgs.AddArg(\"y\")\n\t\t\tcmdArgs.AddArg(\"u\")\n\n\t\t\tdb := &mock.DBExecutor{\n\t\t\t\tAlpmArchitecturesFn: func() ([]string, error) {\n\t\t\t\t\treturn []string{\"x86_64\"}, nil\n\t\t\t\t},\n\t\t\t\tRefreshHandleFn: func() error {\n\t\t\t\t\treturn nil\n\t\t\t\t},\n\t\t\t\tReposFn: func() []string {\n\t\t\t\t\treturn []string{\"core\"}\n\t\t\t\t},\n\t\t\t\tInstalledRemotePackagesFn: func() map[string]alpm.IPackage {\n\t\t\t\t\treturn map[string]alpm.IPackage{}\n\t\t\t\t},\n\t\t\t\tInstalledRemotePackageNamesFn: func() []string {\n\t\t\t\t\treturn []string{}\n\t\t\t\t},\n\t\t\t\tSyncUpgradesFn: func(\n\t\t\t\t\tbool,\n\t\t\t\t) (map[string]db.SyncUpgrade, error) {\n\t\t\t\t\treturn map[string]db.SyncUpgrade{}, nil\n\t\t\t\t},\n\t\t\t}\n\n\t\t\trun := &runtime.Runtime{\n\t\t\t\tCfg: &settings.Configuration{\n\t\t\t\t\tRemoveMake:      \"no\",\n\t\t\t\t\tCombinedUpgrade: false,\n\t\t\t\t},\n\t\t\t\tLogger:     text.NewLogger(io.Discard, os.Stderr, strings.NewReader(\"1\\n\"), true, \"test\"),\n\t\t\t\tCmdBuilder: cmdBuilder,\n\t\t\t\tVCSStore:   &vcs.Mock{},\n\t\t\t\tAURClient: &mockaur.MockAUR{\n\t\t\t\t\tGetFn: func(ctx context.Context, query *aur.Query) ([]aur.Pkg, error) {\n\t\t\t\t\t\treturn []aur.Pkg{}, nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\n\t\t\terr = handleCmd(context.Background(), run, cmdArgs, db)\n\t\t\trequire.NoError(t, err)\n\n\t\t\trequire.Len(t, mockRunner.ShowCalls, len(tc.want))\n\t\t\trequire.Len(t, mockRunner.CaptureCalls, 0)\n\n\t\t\tfor i, call := range mockRunner.ShowCalls {\n\t\t\t\tshow := call.Args[0].(*exec.Cmd).String()\n\t\t\t\tshow = strings.ReplaceAll(show, pacmanBin, \"pacman\")\n\n\t\t\t\t// options are in a different order on different systems and on CI root user is used\n\t\t\t\tassert.Subset(t, strings.Split(show, \" \"), strings.Split(tc.want[i], \" \"), fmt.Sprintf(\"%d - %s\", i, show))\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcs.go",
          "type": "blob",
          "size": 1.802734375,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"sync\"\n\n\t\"github.com/Jguer/aur\"\n\t\"github.com/leonelquinteros/gotext\"\n\n\t\"github.com/Jguer/yay/v12/pkg/db\"\n\t\"github.com/Jguer/yay/v12/pkg/dep\"\n\t\"github.com/Jguer/yay/v12/pkg/runtime\"\n\t\"github.com/Jguer/yay/v12/pkg/sync/srcinfo\"\n\t\"github.com/Jguer/yay/v12/pkg/sync/workdir\"\n)\n\nfunc infoToInstallInfo(info []aur.Pkg) []map[string]*dep.InstallInfo {\n\tinstallInfo := make([]map[string]*dep.InstallInfo, 1)\n\tinstallInfo[0] = map[string]*dep.InstallInfo{}\n\n\tfor i := range info {\n\t\tpkg := &info[i]\n\t\tinstallInfo[0][pkg.Name] = &dep.InstallInfo{\n\t\t\tAURBase: &pkg.PackageBase,\n\t\t\tSource:  dep.AUR,\n\t\t}\n\t}\n\n\treturn installInfo\n}\n\n// createDevelDB forces yay to create a DB of the existing development packages.\nfunc createDevelDB(ctx context.Context, run *runtime.Runtime, dbExecutor db.Executor) error {\n\tremoteNames := dbExecutor.InstalledRemotePackageNames()\n\n\trun.QueryBuilder.Execute(ctx, dbExecutor, remoteNames)\n\tinfo, err := run.AURClient.Get(ctx, &aur.Query{\n\t\tNeedles:  remoteNames,\n\t\tBy:       aur.Name,\n\t\tContains: false,\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tpreper := workdir.NewPreparerWithoutHooks(dbExecutor, run.CmdBuilder, run.Cfg, run.Logger.Child(\"workdir\"), false)\n\n\tmapInfo := infoToInstallInfo(info)\n\tpkgBuildDirsByBase, err := preper.Run(ctx, run, mapInfo)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsrcinfos, err := srcinfo.ParseSrcinfoFilesByBase(run.Logger.Child(\"srcinfo\"), pkgBuildDirsByBase, false)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar wg sync.WaitGroup\n\tfor i := range srcinfos {\n\t\tfor iP := range srcinfos[i].Packages {\n\t\t\twg.Add(1)\n\n\t\t\tgo func(i string, iP int) {\n\t\t\t\trun.VCSStore.Update(ctx, srcinfos[i].Packages[iP].Pkgname, srcinfos[i].Source)\n\t\t\t\twg.Done()\n\t\t\t}(i, iP)\n\t\t}\n\t}\n\n\twg.Wait()\n\trun.Logger.OperationInfoln(gotext.Get(\"GenDB finished. No packages were installed\"))\n\n\treturn err\n}\n"
        },
        {
          "name": "vote.go",
          "type": "blob",
          "size": 1.1962890625,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\n\t\"github.com/Jguer/aur\"\n\t\"github.com/Jguer/votar/pkg/vote\"\n\t\"github.com/leonelquinteros/gotext\"\n\n\t\"github.com/Jguer/yay/v12/pkg/text\"\n)\n\ntype ErrAURVote struct {\n\tinner   error\n\tpkgName string\n}\n\nfunc (e *ErrAURVote) Error() string {\n\treturn gotext.Get(\"Unable to handle package vote for: %s. err: %s\", e.pkgName, e.inner.Error())\n}\n\nfunc handlePackageVote(ctx context.Context,\n\ttargets []string, aurClient aur.QueryClient, logger *text.Logger,\n\tvoteClient *vote.Client, upvote bool,\n) error {\n\tinfos, err := aurClient.Get(ctx, &aur.Query{\n\t\tNeedles: targets,\n\t\tBy:      aur.Name,\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif len(infos) == 0 {\n\t\tlogger.Println(gotext.Get(\" there is nothing to do\"))\n\t\treturn nil\n\t}\n\n\tfor i := range infos {\n\t\tvar err error\n\t\tif upvote {\n\t\t\terr = voteClient.Vote(ctx, infos[i].PackageBase)\n\t\t} else {\n\t\t\terr = voteClient.Unvote(ctx, infos[i].PackageBase)\n\t\t}\n\n\t\tif err != nil {\n\t\t\tif errors.Is(err, vote.ErrNoCredentials) {\n\t\t\t\treturn errors.New(\n\t\t\t\t\tgotext.Get(\"%s: please set AUR_USERNAME and AUR_PASSWORD environment variables for voting\",\n\t\t\t\t\t\terr.Error()))\n\t\t\t}\n\n\t\t\treturn &ErrAURVote{inner: err, pkgName: infos[i].Name}\n\t\t}\n\t}\n\n\treturn nil\n}\n"
        }
      ]
    }
  ]
}