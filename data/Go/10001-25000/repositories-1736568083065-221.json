{
  "metadata": {
    "timestamp": 1736568083065,
    "page": 221,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "linkerd/linkerd2",
      "stars": 10772,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.255859375,
          "content": ".git\n.github\n**/.idea\n**/cmake-*\n**/CMakeLists.txt\n*.iml\n**/node_modules\nbin\n!bin/action-dev-check\n!bin/fetch-proxy\n!bin/install-deps\n!bin/scurl\n!bin/web\n**/Dockerfile*\nDockerfile*\n**/target\ntarget\n!target/docker-build\nweb/app/dist\nweb/app/yarn-error.log\nvendor\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.580078125,
          "content": "# top-most EditorConfig file\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ncharset = utf-8\nindent_style = space\nindent_size = 4\n\n# Go code uses tabs. Display with 4 space indentation in editors and on GitHub\n# (see https://github.com/isaacs/github/issues/170#issuecomment-150489692).\n[*.go]\nindent_style = tab\n\n[*.jsx]\nindent_size = 2\nindent_style = space\n\n[*.js]\nindent_size = 2\nindent_style = space\n\n[*.css]\nindent_size = 2\nindent_style = space\n\n[*.yml]\nindent_size = 2\n\n[*.yaml]\nindent_size = 2\n\n[*.proto]\nindent_size = 2\nindent_style = space\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3115234375,
          "content": "# Expand these files in PRs:\ngo.sum linguist-generated=false\n**/Cargo.lock linguist-generated=false\n# Collapse these files in PRs:\ncontroller/gen/**/*.pb.go linguist-generated=true\n**/*.golden linguist-generated=true\n**/*.golden.yml linguist-generated=true\ncontroller/proxy-injector/fake/data/* linguist-generated=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.267578125,
          "content": "**/disco\ntarget\ntmp.discovery\n**/.idea\n**/cmake-*\n**/CMakeLists.txt\n*.iml\n**/node_modules\nweb/web\nweb/app/dist\nweb/app/js/locales/_build\nweb/app/js/locales/**/*.js\nweb/app/yarn-error.log\nvendor\n**/*.gogen*\n**/*.swp\n**/charts/**/charts\npackage-lock.json\n.vscode\n**/coverage*\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 4.544921875,
          "content": "# This file specifies which linters golangci-lint should run.\n#\n# For descriptions of all available linters, run:\n# ./.golangci-lint-1.17.1 linters\n# or browse to:\n# https://github.com/golangci/golangci-lint#supported-linters\n\nrun:\n  deadline: 5m\n  exclude-dirs:\n  - controller/gen\n\nlinters:\n  enable:\n  - bodyclose\n  #TODO - copyloopvar\n  - errcheck\n  - errorlint\n  - gocritic\n  - gosec\n  - gosimple\n  - govet\n  - ineffassign\n  - misspell\n  - nakedret\n  - revive\n  - staticcheck\n  - stylecheck\n  - typecheck\n  - unconvert\n  - unparam\n  - unused\n  # TODO: enable more linters!\n  # - depguard\n  # - dupl\n  # - gochecknoglobals\n  # - gochecknoinits\n  # - gocyclo\n  # - interfacer\n  # - lll\n  # - maligned\n  # - prealloc\n\n  disable: []\n\nlinters-settings:\n  revive:\n    rules:\n    - name: package-comments\n      disabled: true\n  stylecheck:\n    checks: [\"ST1019\"]\n  errcheck:\n    exclude-functions:\n      - fmt.Fprint\n      - fmt.Fprintf\n      - fmt.Fprintln\n  gosec:\n    excludes:\n      - G115 # Potential integer overflow when converting between integer types\n\nissues:\n  exclude-use-default: false\n  exclude-rules:\n  # Ignore errors when performing the following file operations. If these are\n  # not handled separately already, they tend to be insignificant.\n  - linters:\n    - errcheck\n    text: Error return value of `.*\\.(Copy|Flush|Write|WriteTo)` is not checked\n\n  # Ignore error values when closing file or HTTP response bodies. These\n  # generally happen as cleanup and are part of defer statements.\n  - linters:\n    - errcheck\n    text: Error return value of `.*\\.Close` is not checked\n\n  # Ignore error values when closing file or HTTP response bodies. These\n  # generally happen as cleanup and are part of defer statements.\n  - linters:\n    - gosec\n    text: Deferring unsafe method \"Close\" on type\n\n  # Ignore error checks for CLI output.\n  - linters:\n    - errcheck\n    text: Error return value of `(plugin|spin|termbox)\\.(Clear|Color|Flush|Run)` is not checked\n\n  # The errcheck linter catches these instances and we exclude them with the\n  # rule above; therefore we'll ignore redundant warnings through gosec.\n  - linters:\n    - gosec\n    text: \"G104: Errors unhandled.\"\n\n  # This gives false negatives if a variable name is too close to the pattern\n  # used to determine if a variable is a credential.\n  - linters:\n    - gosec\n    text: \"G101: Potential hardcoded credentials\"\n\n  # Temporarily disable this check until the next golang-ci upgrade (greater\n  # than v1.50.1) which upgrades gosec from v2.13.1 to v2.14.0. The fix is in\n  # this commit, that refers to G404 but it seems it also affects G402:\n  # https://github.com/securego/gosec/commit/dfde579243e1bfe0856ddafc5fc6aebb29c0edf6\n  - linters:\n    - gosec\n    text: \"G402: TLS MinVersion too low\"\n\n  # Flag operations are fallible if the flag does not exist. We assume these\n  # exist as they are generally flags we are deprecating or use only for\n  # development.\n  - linters:\n    - errcheck\n    text: Error return value of `(.*)\\.(MarkDeprecated|MarkHidden|Set)` is not checked\n\n  # Flag completion is not critical to the CLI and errors are ignored if\n  # registration fails.\n  - linters:\n    - errcheck\n    text: Error return value of `.*\\.RegisterFlagCompletionFunc` is not checked\n\n  # Errors that occur when gracefully shutting down control plane components\n  # are insignificant.\n  - linters:\n    - errcheck\n    text: Error return value of `(adminServer|apiServer|server)\\.Shutdown` is not checked\n\n  # Append should be able to assign to a different var/slice.\n  - linters:\n    - gocritic\n    text: \"appendAssign: append result not assigned to the same slice\"\n\n  # This does not always result in more readable code.\n  - linters:\n    - gocritic\n    text: \"singleCaseSwitch: should rewrite switch statement to if statement\"\n\n  # This does not always result in more readable code.\n  - linters:\n    - gocritic\n    text: \"ifElseChain: rewrite if-else to switch statement\"\n\n  # Test/fuzzing do not need to be tested for security issues.\n  - linters:\n    - gosec\n    path: .*(test|fuzzer).*\\.go\n\n  # In tests/fuzzing we are usually mocking components or have a good idea\n  # about the errors that we expect. For this reason, we ignore unchecked\n  # errors in all test files.\n  - path: .*(test|fuzzer).*\\.go\n    text: Error return value of `.*` is not checked\n\n  # In tests we'll ignore unchecked filename operations because the values\n  # are not dynamic.\n  - path: (.*test.*\\.go|fake)\n    text: \"G304: Potential file inclusion via variable\"\n\n  # This ignores the errors returned from AddToScheme operations.\n  - path: pkg/k8s/fake.go\n    text: Error return value is not checked\n"
        },
        {
          "name": ".helmdocsignore",
          "type": "blob",
          "size": 0.0341796875,
          "content": "# Add potential chart ignores here\n"
        },
        {
          "name": ".markdownlint.yaml",
          "type": "blob",
          "size": 0.0947265625,
          "content": "default: true\nline_length: \n  code_blocks: false\n  tables: false\nheadings:\n  siblings_only: true\n"
        },
        {
          "name": ".proxy-version",
          "type": "blob",
          "size": 0.0087890625,
          "content": "v2.271.0\n"
        },
        {
          "name": "ADOPTERS.md",
          "type": "blob",
          "size": 4.048828125,
          "content": "# Linkerd 2.x adopters\n\n- [Ada](http://www.ada.cx)\n- [Adidas](https://www.adidas-group.com)\n- [Advance Latam](http://www.advlatam.com)\n- [Allotrac](https://allotrac.com.au)\n- [AlphaSights](https://www.alphasights.com)\n- [Altinn](https://www.altinn.no/en/)\n- [ANNA Money](https://anna.money)\n- [Apester](https://apester.com)\n- [AppddictionStudio](https://appddicitonstudio.com)\n- [Applause](https://www.applause.com)\n- [AT&T](<https://il.att.com/>)\n- [Attest](https://www.askattest.com)\n- [Bede Gaming](https://bedegaming.com)\n- [Bink](https://bink.com)\n- [Bitfactory](https://www.bitfactory.nl/)\n- [Boomin](https://www.boomin.com)\n- [Bosch Thermotecnology](https://www.bosch-thermotechnology.com)\n- [Buoyant](https://buoyant.io)\n- [Cabify](https://cabify.com)\n- [Candide](https://candidegardening.com)\n- [Celonis](https://celonis.com)\n- [CloverHealth](https://www.cloverhealth.com/)\n- [Cohere](https://cohere.ai/)\n- [Commonbond](https://www.commonbond.co/)\n- [Crayon](https://crayon.com)\n- [Docker](https://docker.com)\n- [Doji](https://www.doji.cn/)\n- [Dukaan](https://mydukaan.io/)\n- [Expedia](https://www.expedia.com)\n- [Facelift](https://www.facelift-bbt.com/en)\n- [Favrit](https://www.favrit.com)\n- [Figure](https://www.figure.com)\n- [finleap connect](https://connect.finleap.com/)\n- [Giant Swarm](https://www.giantswarm.io)\n- [Gotin](https://www.gotin.online)\n- [HomeChoice](https://www.homechoice.co.za/)\n- [HP Inc](https://www8.hp.com/us/en/home.html)\n- [In Loco](https://inloco.com.br/en/)\n- [Info Support](https://infosupport.com/)\n- [Ingrid](https://ingrid.com/)\n- [Inscripta](https://inscripta.io)\n- [Jimdo](https://www.jimdo.com/)\n- [Just Football](https://justfootball.io)\n- [K3 Business Technologies](https://www.k3btg.com)\n- [Kairos](https://kairos.com)\n- [Kurio](https://kurio.id)\n- [LeadIQ](https://leadiq.com)\n- [LeanNet](https://leannet.eu/)\n- [Lendico](https://www.lendico.de/)\n- [Livspace](https://www.livspace.com/)\n- [Lumoa](https://www.lumoa.me/)\n- [M1 Finance](https://www.m1finance.com/)\n- [manager.cl](https://www.manager.cl/)\n- [MattePaint](https://www.mattepaint.com/)\n- [Mentum](https://mentumqr.com/)\n- [MercedesBenz.io](https://www.mercedes-benz.io/)\n- [Microsoft](https://www.microsoft.com/)\n- [Mulligan Funding](https://www.mulliganfunding.com/)\n- [Mythical Games](https://mythicalgames.com/)\n- [National Information Solutions Cooperative (NISC)](https://nisc.coop/)\n- [NAV](https://nav.no/)\n- [Nordstrom](https://nordstrom.com/)\n- [Novolabs](https://novolabs.com)\n- [OLX Brasil](https://www.olx.com.br)\n- [p3r](https://www.p3r.one/)\n- [Pangea](https://pangea.cloud)\n- [Parklab](https://parklab.app/)\n- [Paybase](https://paybase.io/)\n- [Pento](https://pento.io/)\n- [Personio](https://www.personio.com/)\n- [PITS Global Data Recovery Services](https://www.pitsdatarecovery.net/)\n- [PlayStudios Asia](https://www.playstudios.asia)\n- [PlexTrac](https://plextrac.com)\n- [PriceKinetics (GVC Australia)](https://www.pricekinetics.com.au/)\n- [Projector](https://projector.com)\n- [Purdue University Global](https://www.purdueglobal.edu/)\n- [reDock](https://www.redock.com/)\n- [ReliMail](https://relimail.com/)\n- [S&P Global Platts](https://www.spglobal.com/platts/en)\n- [Salt Security](https://salt.security/)\n- [Samarkand Global](https://www.samarkand.global/)\n- [SCA](https://sca.com.au)\n- [Search365](https://search365.ai/)\n- [Skit](https://skit.ai/)\n- [Split](https://www.split.io/)\n- [StackPulse](https://stackpulse.com)\n- [Studyo](https://studyo.co)\n- [Sue](https://sue.nl)\n- [The Zebra](https://www.thezebra.com)\n- [Timescale](https://www.timescale.com)\n- [Tradeshift](https://tradeshift.com/)\n- [Transit](https://transit.app)\n- [True Tickets](https://true-tickets.com)\n- [Web Summit](https://websummit.com)\n- [Winuall](https://www.winuall.com)\n- [Wiz Security](https://www.wiz.io/)\n- [xCloud](https://www.xbox.com/en-US/xbox-game-streaming/project-xcloud)\n- [YouMail](https://www.youmail.com)\n- [ZeroFlucs](https://zeroflucs.io/)\n- [Zimpler](https://www.zimpler.com/)\n\nIf you're using Linkerd 2.x and aren't on this list, please [submit a pull\nrequest](https://github.com/linkerd/linkerd2/edit/main/ADOPTERS.md)!\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 16.6904296875,
          "content": "<!-- markdownlint-disable-file code-block-style -->\n# Linkerd2 Development Guide\n\n:balloon: Welcome to the Linkerd2 development guide! :wave:\n\nThis document will help you build and run Linkerd2 from source. More information\nabout testing from source can be found in the [TEST.md](TEST.md) guide.\n\n## Table of contents\n\n- [Repo Layout](#repo-layout)\n  - [Control Plane (Go/React)](#control-plane-goreact)\n  - [Data Plane (Rust)](#data-plane-rust)\n- [Components](#components)\n- [Development configurations](#development-configurations)\n  - [Comprehensive](#comprehensive)\n    - [Deploying Control Plane components with Tracing](#deploying-control-plane-components-with-tracing)\n  - [Publishing Images](#publishing-images)\n  - [Go](#go)\n    - [A note about Go run](#a-note-about-go-run)\n    - [Lint](#lint)\n    - [Formatting](#formatting)\n    - [Building the CLI for development](#building-the-cli-for-development)\n    - [Running the control plane for development](#running-the-control-plane-for-development)\n    - [Running the Tap APIService for development](#debugging-the-tap-apiservice-for-development)\n    - [Generating CLI docs](#generating-cli-docs)\n  - [Web](#web)\n    - [First time setup](#first-time-setup)\n    - [Run web standalone](#run-web-standalone)\n    - [Webpack dev server](#webpack-dev-server)\n    - [JavaScript dependencies](#javascript-dependencies)\n    - [Translations](#translations)\n  - [Rust](#rust)\n    - [Docker](#docker)\n- [Dependencies](#dependencies)\n  - [Updating protobuf dependencies](#updating-protobuf-dependencies)\n  - [Updating ServiceProfile generated\n    code](#updating-serviceprofile-generated-code)\n- [Linkerd Helm Chart](#linkerd-helm-chart)\n  - [Extensions Helm charts](#extensions-helm-charts)\n  - [Making changes to the chart templates](#making-changes-to-the-chart-templates)\n  - [Annotating values.yaml](#annotating-valuesyaml)\n  - [Markdown templates](#markdown-templates)\n\n## Repo layout\n\nLinkerd2 is primarily written in Rust, Go, and React. At its core is a\nhigh-performance data plane written in Rust. The control plane components and\nits extensions are written in Go. The dashboard UI is a React application.\n\n### Control Plane (Go/React)\n\n- [`cli`](cli): Command-line `linkerd` utility, view and drive the control\n  plane.\n- [`controller`](controller)\n  - [`destination`](controller/api/destination): Accepts requests from `proxy`\n    instances and serves service discovery information.\n  - [`proxy-injector`](controller/proxy-injector): Mutating webhook triggered by\n    pods creation, that injects the proxy container as a sidecar.\n  - [`identity`](controller/identity): Provides a CA to distribute certificates\n    to proxies for them to establish mTLS connections between them.\n- [`viz extension`](viz)\n  - [`metrics-api`](viz/metrics-api): Accepts requests from API clients such as\n    cli and web, serving metrics from the proxies in the cluster through\n    Prometheus queries.\n  - [`tap`](viz/tap/api): Provides a live pipeline of requests.\n  - [`tap-injector`](viz/tap/injector): Mutating webhook triggered by pods\n    creation, that injects metadata into the proxy container in order to enable\n    tap.\n  - [`web`](web): Provides a UI dashboard to view and drive the control plane.\n- [`multicluster extension`](multicluster)\n  - [`linkerd-gateway`]: Accepts requests from other clusters and forwards them\n    to the appropriate destination in the local cluster.\n  - [`linkerd-service-mirror-xxx`](multicluster/service-mirror): Controller\n    observing the labeling of exported services in the target cluster, each one\n    for which it will create a mirrored service in the local cluster.\n- [`jaeger extension`](jaeger)\n  - [`jaeger-injector`](jaeger/injector): Mutating webhook triggered by pods\n    creation, that expands the proxy container for it to produce tracing spans.\n\n### Data Plane (Rust)\n\n- [`linkerd2-proxy`](https://github.com/linkerd/linkerd2-proxy): Rust source\n  code for the proxy lives in the linkerd2-proxy repo.\n- [`linkerd2-proxy-api`](https://github.com/linkerd/linkerd2-proxy-api):\n  Protobuf definitions for the data plane APIs live in the linkerd2-proxy-api\n  repo.\n\n## Components\n\n![Linkerd2 Components](https://g.gravizo.com/source/svg/linkerd2_components?https%3A%2F%2Fraw.githubusercontent.com%2Flinkerd%2Flinkerd2%2Fmain%2FBUILD.md)\n\n<!-- markdownlint-disable no-inline-html -->\n<details>\n<summary></summary>\nlinkerd2_components\n  digraph G {\n    rankdir=LR;\n\n    node [style=filled, shape=rect];\n\n    \"cli\" [color=lightblue];\n    \"destination\" [color=lightblue];\n    \"identity\" [color=lightblue];\n    \"metrics-api\" [color=lightblue];\n    \"tap\" [color=lightblue];\n    \"web\" [color=lightblue];\n\n    \"proxy\" [color=orange];\n\n    \"cli\" -> \"metrics-api\";\n    \"cli\" -> \"tap\";\n\n    \"web\" -> \"metrics-api\";\n    \"web\" -> \"tap\";\n    \"web\" -> \"grafana\";\n\n    \"metrics-api\" -> \"prometheus\";\n\n    \"tap\" -> \"proxy\";\n\n    \"proxy\" -> \"destination\";\n    \"proxy\" -> \"identity\";\n\n    \"identity\" -> \"kubernetes api\"\n\n    \"destination\" -> \"kubernetes api\";\n\n    \"grafana\" -> \"prometheus\";\n    \"prometheus\" -> \"proxy\";\n  }\nlinkerd2_components\n</details>\n<!-- markdownlint-enable no-inline-html -->\n\n## Development configurations\n\nDepending on use case, there are several configurations with which to develop\nand run Linkerd2:\n\n- [Comprehensive](#comprehensive): Integrated configuration using k3d, most\n  closely matches release.\n- [Web](#web): Development of the Linkerd2 Dashboard.\n\n### Comprehensive\n\nThis configuration builds all Linkerd2 components in Docker images, and deploys\nthem onto a k3d cluster. This setup most closely parallels our recommended\nproduction installation, documented in [Getting\nStarted](https://linkerd.io/2/getting-started/).\n\nNote that you need to have first installed docker buildx, as explained\n[here](https://github.com/docker/buildx).\n\n```bash\n# create the k3d cluster\nbin/k3d cluster create\n\n# build all docker images\nbin/docker-build\n\n# load all the images into k3d\nbin/image-load --k3d\n\n# install linkerd\nbin/linkerd install --crds | kubectl apply -f -\nbin/linkerd install | kubectl apply -f -\n\n# wait for the core components to be ready, then install linkerd-viz\nbin/linkerd viz install | kubectl apply -f -\n\n# in order to use `linkerd viz tap` against control plane components, you need\n# to restart them (so that the tap-injector enables tap on their proxies)\nkubectl -n linkerd rollout restart deploy\n\n# verify cli and server versions\nbin/linkerd version\n\n# validate installation\nbin/linkerd check --expected-version $(bin/root-tag)\n\n# view linkerd dashboard\nbin/linkerd viz dashboard\n\n# install the demo app\ncurl https://run.linkerd.io/emojivoto.yml | bin/linkerd inject - | kubectl apply -f -\n\n# port-forward the demo app's frontend to see it at http://localhost:8080\nkubectl -n emojivoto port-forward svc/web-svc 8080:80\n\n# view details per deployment\nbin/linkerd viz -n emojivoto stat deployments\n\n# view a live pipeline of requests\nbin/linkerd viz -n emojivoto tap deploy voting\n```\n\n#### Deploying Control Plane components with Tracing\n\nControl Plane components have the `trace-collector` flag used to enable\n[Distributed Tracing](https://opentracing.io/docs/overview/what-is-tracing/) for\ndevelopment purposes. It can be enabled globally i.e Control plane components\nand their proxies by using the `--set controlPlaneTracing=true` installation\nflag.\n\nThis will configure all the components to send the traces at\n`collector.{{.Values.controlPlaneTracingNamespace}}.svc.{{.Values.ClusterDomain}}:55678`\n\n```bash\n\n# install Linkerd with tracing\nlinkerd install --set controlPlaneTracing=true | kubectl apply -f -\n\n# install the Jaeger extension\nlinkerd jaeger install | kubectl apply -f -\n\n# restart the control plane components so that the jaeger-injector enables\n# tracing in their proxies\nkubectl -n linkerd rollout restart deploy\n```\n\n### Publishing images\n\nThe example above builds and loads the docker images into k3d. For testing your\nbuilt images outside your local environment, you need to publish your images so\nthey become accessible in those external environments.\n\nTo signal `bin/docker-build` or any of the more specific scripts\n`bin/docker-build-*` what registry to use, just set the environment variable\n`DOCKER_REGISTRY` (which defaults to the official registry `cr.l5d.io/linkerd`).\nAfter having pushed those images through the usual means (`docker push`) you'll\nhave to pass the `--registry` flag to `linkerd install` with a value  matching\nyour registry. Extensions don't have that flag and instead you need to use the\nequivalent Helm value; e.g. for Viz `linkerd viz install --set\ndefaultRegistry=...`.\n\n### Go\n\n#### A note about Go run\n\nOur instructions use a [`bin/go-run`](bin/go-run) script in lieu `go run`. This\nis a convenience script that leverages caching via `go build` to make your\nbuild/run/debug loop faster.\n\nIn general, replace commands like this:\n\n```bash\ngo run cli/main.go check\n```\n\nwith this:\n\n```bash\nbin/go-run cli check\n```\n\nThat is equivalent to running `linkerd check` using the code on your branch.\n\n#### Lint\n\nTo analyze and lint the Go code using golangci-lint, run:\n\n```bash\ngolangci-lint run\n```\n\n#### Formatting\n\nAll Go source code is formatted with `goimports`. The version of `goimports`\nused by this project is specified in `go.mod`. To ensure you have the same\nversion installed, run `go install -mod=readonly\ngolang.org/x/tools/cmd/goimports`. It's recommended that you set your IDE or\nother development tools to use `goimports`. Formatting is checked during CI by\nthe `bin/fmt` script.\n\n#### Building the CLI for development\n\nThe script for building the CLI binaries using docker is\n`bin/docker-build-cli-bin`. This will also be called indirectly when calling\n`bin/docker-build`. By default it creates binaries for your current host's\nOS/arch.\n\nTo cross-build targeting a different OS or architecture, set the environment\nvariable `DOCKER_TARGET` according to any of the final stages available in\n[cli/Dockerfile](cli/Dockerfile).\n\nFor local development and a faster edit-build-test cycle you can build directly\nwithout going through a docker container by calling `bin/build-cli-bin`.\n\nIf you set the environment variable `LINKERD_LOCAL_BUILD_CLI=1` then\n`bin/docker-build` will use this last method for the step that builds the CLI.\n\n#### Running the control plane for development\n\nLinkerd2's control plane is composed of several Go microservices. You can run\nthese components in a Kubernetes cluster, or even locally.\n\nTo run an individual component locally, you can use the `go-run` command, and\npass in valid Kubernetes credentials via the `-kubeconfig` flag. For instance,\nto run the destination service locally, run:\n\n```bash\nbin/go-run controller/cmd destination -kubeconfig ~/.kube/config -log-level debug\n```\n\nYou can send test requests to the destination service using the\n`destination-client` in the `controller/script` directory. For instance:\n\n```bash\nbin/go-run controller/script/destination-client -path hello.default.svc.cluster.local:80\n```\n\n##### Debugging the Tap APIService for development\n\nThe Tap APIService is a Kubernetes extension API server, so it can be\nchallenging to run outside the cluster. The most straightforward workflow is to\nsimply test changes by building and loading the container image as explained in\nthe [comprehensive configuration](#comprehensive) section above (in order to\njust build this component use `bin/docker-build-tap`).\n\n#### Generating CLI docs\n\nThe [documentation](https://linkerd.io/2/cli/) for the CLI tool is partially\ngenerated from YAML. This can be generated by running the `linkerd doc` command.\n\n### Web\n\nThis is a React app fronting a Go process. It uses webpack to bundle assets, and\npostcss to transform css.\n\nThese commands assume working [Go](https://golang.org) and\n[Yarn](https://yarnpkg.com) environments.\n\n#### First time setup\n\n1. Install [Yarn](https://yarnpkg.com) and use it to install JS dependencies:\n\n    ```bash\n    brew install yarn\n    bin/web setup\n    ```\n\n2. Install Linkerd on a Kubernetes cluster.\n\n#### Run web standalone\n\n```bash\nbin/web run\n```\n\nThe web server will be running on `localhost:7777`.\n\n#### Webpack dev server\n\nTo develop with a webpack dev server:\n\n1. Start the development server.\n\n    ```bash\n    bin/web dev\n    ```\n\n    Note: this will start up:\n\n    - `web` on :7777. This is the golang process that serves the dashboard.\n    - `webpack-dev-server` on :8080 to manage rebuilding/reloading of the\n      javascript.\n    - `metrics-api` is port-forwarded from the Kubernetes cluster via `kubectl`\n      on :8085\n\n2. Go to [http://localhost:7777](http://localhost:7777) to see everything\n   running.\n\n#### JavaScript dependencies\n\nTo add a JS dependency:\n\n```bash\ncd web/app\nyarn add [dep]\n```\n\n#### Translations\n\nTo add a locale:\n\n```bash\ncd web/app\nyarn lingui add-locale [locales...] # will create a messages.json file for new locale(s)\n```\n\nTo extract message keys from existing components:\n\n```bash\ncd web/app\nyarn lingui extract\n...\nyarn lingui compile # done automatically in bin/web run\n```\n\nFinally, make sure the new locale is also referred in the following places:\n\n- Under the `lingui` section in `package.json`\n- In the `make-plural/plurals` import in `index.js`\n- In the `langOptions` object in `index.js`\n\n### Rust\n\nAll Rust development happens in the\n[`linkerd2-proxy`](https://github.com/linkerd/linkerd2-proxy) repo.\n\n#### Docker\n\nThe `bin/docker-build-proxy` script builds the proxy by pulling a pre-published\nproxy binary:\n\n```bash\nbin/docker-build-proxy\n```\n\n#### Locally built proxy\n\nIf you want to deploy a locally built proxy, you can build it in the\n[`linkerd2-proxy`](https://github.com/linkerd/linkerd2-proxy) repo by running:\n\n```bash\nDOCKER_TAG=cr.l5d.io/linkerd/proxy:dev make docker\n```\n\nThen, in this repo, run:\n\n```bash\n./bin/k3d image import cr.l5d.io/linkerd/proxy:dev\n```\n\nNow, to make a pod use your image, add the following annotations to it:\n\n```yaml\nconfig.linkerd.io/proxy-version: dev\n```\n\n## Dependencies\n\n### Updating protobuf dependencies\n\n If you make Protobuf changes, run:\n\n ```bash\nbin/protoc-go.sh\n```\n\n### Updating ServiceProfile generated code\n\nThe [ServiceProfile client code](./controller/gen/client) is generated by\n[`bin/update-codegen.sh`](bin/update-codegen.sh), which depends on [K8s\ncode-generator](https://github.com/kubernetes/code-generator), which does not\nyet support Go Modules. To re-generate this code, check out this repo into your\n`GOPATH`:\n\n```bash\ngo get -u github.com/linkerd/linkerd2\ncd $GOPATH/src/github.com/linkerd/linkerd2\nbin/update-codegen.sh\n```\n\n## Linkerd Helm chart\n\nThe Linkerd control plane chart is located in the\n[`charts/linkerd2`](charts/linkerd2) folder. The [`charts/patch`](charts/patch)\nchart consists of the Linkerd proxy specification, which is used by the proxy\ninjector to inject the proxy container. Both charts depend on the partials\nsubchart which can be found in the [`charts/partials`](charts/partials) folder.\n\nNote that the `charts/linkerd2/values.yaml` file contains a placeholder\n`linkerdVersionValue` that you need to replace with an appropriate string (like\n`edge-20.2.2`) before proceeding.\n\nDuring development, please use the [`bin/helm`](bin/helm) wrapper script to\ninvoke the Helm commands. For example,\n\n```bash\nbin/helm install linkerd2 charts/linkerd2\n```\n\nThis ensures that you use the same Helm version as that of the Linkerd CI\nsystem.\n\nFor general instructions on how to install the charts check out the\n[docs](https://linkerd.io/2/tasks/install-helm/). You also need to supply or\ngenerate your own certificates to use the chart, as explained\n[here](https://linkerd.io/2/tasks/generate-certificates/).\n\n### Extensions Helm charts\n\nExtensions provide each their own chart:\n\n- Viz: [`viz/charts/linkerd-viz`](viz/charts/linkerd-viz)\n- Multicluster:\n  [`multicluster/charts/linkerd-multicluster`](multicluster/charts/linkerd-multicluster)\n- Jaeger: [`jaeger/charts/linkerd-jaeger`](jaeger/charts/linkerd-jaeger)\n\n### Making changes to the chart templates\n\nWhenever you make changes to the files under\n[`charts/linkerd2/templates`](charts/linkerd2/templates) or its dependency\n[`charts/partials`](charts/partials), make sure to run\n[`bin/helm-build`](bin/helm-build) which will refresh the dependencies and lint\nthe templates.\n\n### Annotating values.yaml\n\nTo allow helm-docs to properly document the values in `values.yaml` a descriptive\ncomment is required. This can be done in two ways.\nEither comment the value directly above with\n`# -- This is a really nice value` where the double dashes automatically\nannotates the value. Another explicit usage is to type out the value name.\n`# global.MyNiceValue -- I really like this value`\n\n### Markdown templates\n\nIn order to accommodate for extra data that might not have a proper place in the\n´values.yaml´ file the corresponding ´README.md.gotmpl´ can be modified for each\nchart. This template allows the standard markdown syntax as well as the go\ntemplating functions. Checkout\n[helm-docs](https://github.com/norwoodj/helm-docs) for more info.\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 380.5517578125,
          "content": "# Changes\n\nPlease visit Linkerd's [Release page][gh-releases] for for the latest release\nnotes moving forward!\n\n[gh-releases]: https://github.com/linkerd/linkerd2/releases\n\n## edge-24.2.5\n\n* Migrated edge release change notes to use GitHub's automated release notes\n  feature.\n\n## edge-24.2.4\n\n* Updated the ExternalWorkload CRD to v1beta1, renaming the meshTls field to\n  meshTLS ([#12098])\n* Updated the proxy to address some logging and metrics inconsistencies\n  ([#12099])\n\n[#12098]: https://github.com/linkerd/linkerd2/pull/12098\n[#12099]: https://github.com/linkerd/linkerd2/pull/12099\n\n## edge-24.2.3\n\n* Allowed the `MutatingWebhookConfig` timeout value to be configured ([#12028])\n  (thanks @mikebell90)\n* Added a counter for items dropped from destination controller workqueue\n  ([#12079])\n* Fixed a spurious `linkerd check` error when using container images with\n  digests ([#12059])\n* Fixed an issue where inbound policy could be incorrect after certain policy\n  resources are deleted ([#12088])\n\n[#12028]: https://github.com/linkerd/linkerd2/pull/12028\n[#12079]: https://github.com/linkerd/linkerd2/pull/12079\n[#12059]: https://github.com/linkerd/linkerd2/pull/12059\n[#12088]: https://github.com/linkerd/linkerd2/pull/12088\n\n## edge-24.2.2\n\nThis release addresses some issues in the destination service that could cause\nit to behave unexpectedly when processing updates.\n\n* Fixed a race condition in the destination service that could cause panics\n  under very specific conditions ([#12022]; fixes [#12010])\n* Changed how updates to a `Server` selector are handled in the destination\n  service. When a `Server` that marks a port as opaque no longer selects a\n  resource, the resource's opaqueness will reverted to default settings\n  ([#12031]; fixes [#11995])\n* Introduced Helm configuration values for liveness and readiness probe\n  timeouts and delays ([#11458]; fixes [#11453]) (thanks @jan-kantert!)\n\n[#12010]: https://github.com/linkerd/linkerd2/issues/12010\n[#12022]: https://github.com/linkerd/linkerd2/pull/12022\n[#11995]: https://github.com/linkerd/linkerd2/issues/11995\n[#12031]: https://github.com/linkerd/linkerd2/pull/12031\n[#11453]: https://github.com/linkerd/linkerd2/issues/11453\n[#11458]: https://github.com/linkerd/linkerd2/pull/11458\n\n## edge-24.2.1\n\nThis edge release contains performance and stability improvements to the\nDestination controller, and continues stabilizing support for ExternalWorkloads.\n\n* Reduced the load on the Destination controller by only processing Server\n  updates on workloads affected by the Server ([#12017])\n* Changed how the Destination controller reacts to target clusters (in\n  multicluster pod-to-pod mode) whose Server CRD is outdated: skip them and log\n  an error instead of panicking ([#12008])\n* Improved the leader election of the ExternalWorkloads Endpoints controller to\n  avoid missing events ([#12021])\n* Improved naming of EndpointSlices generated by ExternWorkloads ([#12016])\n* Restriced the number of IPs an ExternalWorkload can have ([#12026])\n\n[#12017]: https://github.com/linkerd/linkerd2/pull/12017\n[#12008]: https://github.com/linkerd/linkerd2/pull/12008\n[#12021]: https://github.com/linkerd/linkerd2/pull/12021\n[#12016]: https://github.com/linkerd/linkerd2/pull/12016\n[#12026]: https://github.com/linkerd/linkerd2/pull/12026\n\n## edge-24.1.3\n\nThis release continues support for ExternalWorkload resources throughout the\ncontrol and data planes.\n\n* Updated the proxy to use SPIRE to instrument identity outside of Kubernetes.\n* Updated the Destination controller to return `INVALID_ARGUMENT` status codes\n  properly when a `ServiceProfile` is requested for a service that does not\n  exist. (#11980)\n* An ExternalWorkload EndpointSlice controller has been added to the\n  Destination controller.\n* Added a `createNamespaceMetadataJob` Helm value to control whether the\n  namespace-metadata job is run during install (#11782)\n\n## edge-24.1.2\n\nThis edge release incrementally improves support for ExternalWorkload resources\nthroughout the control plane.\n\n## edge-24.1.1\n\nThis edge release introduces a number of different fixes and improvements. More\nnotably, it introduces a new `cni-repair-controller` binary to the CNI plugin\nimage. The controller will automatically restart pods that have not received\ntheir iptables configuration.\n\n* Removed shortnames from Tap API resources to avoid colliding with existing\n  Kubernetes resources ([#11816]; fixes [#11784])\n* Introduced a new ExternalWorkload CRD to support upcoming mesh expansion\n  feature ([#11805])\n* Changed `MeshTLSAuthentication` resource validation to allow SPIFFE URI\n  identities ([#11882])\n* Introduced a new `cni-repair-controller` to the `linkerd-cni` DaemonSet to\n  automatically restart misconfigured pods that are missing iptables rules\n  ([#11699]; fixes [#11073])\n* Fixed a `\"duplicate metrics\"` warning in the multicluster service-mirror\n  component ([#11875]; fixes [#11839])\n* Added metric labels and weights to `linkerd diagnostics endpoints` json\n  output ([#11889])\n* Changed how `Server` updates are handled in the destination service. The\n  change will ensure that during a cluster resync, consumers won't be\n  overloaded by redundant updates ([#11907])\n* Changed `linkerd install` error output to add a newline when a Kubernetes\n  client cannot be successfully initialised ([#11917])\n\n[#11816]: https://github.com/linkerd/linkerd2/pull/11816\n[#11784]: https://github.com/linkerd/linkerd2/issues/11784\n[#11805]: https://github.com/linkerd/linkerd2/pull/11805\n[#11882]: https://github.com/linkerd/linkerd2/pull/11882\n[#11699]: https://github.com/linkerd/linkerd2/pull/11699\n[#11073]: https://github.com/linkerd/linkerd2/issues/11073\n[#11875]: https://github.com/linkerd/linkerd2/pull/11875\n[#11839]: https://github.com/linkerd/linkerd2/issues/11839\n[#11889]: https://github.com/linkerd/linkerd2/pull/11889\n[#11907]: https://github.com/linkerd/linkerd2/pull/11907\n[#11917]: https://github.com/linkerd/linkerd2/pull/11917\n\n## edge-23.12.4\n\nThis edge release includes fixes and improvements to the destination\ncontroller's endpoint resolution API.\n\n* Fixed an issue in the control plane where discovery for pod IP addresses could\n  hang indefinitely ([#11815])\n* Updated the proxy to enforce time limits on control plane response streams so\n  that proxies more naturally distribute load over control plane replicas\n  ([#11837])\n* Fixed the policy's controller service metadata responses so that proxy logs\n  and metrics have informative values ([#11842])\n\n[#11842]: https://github.com/linkerd/linkerd2/pull/11842\n[#11837]: https://github.com/linkerd/linkerd2/pull/11837\n[#11815]: https://github.com/linkerd/linkerd2/pull/11815\n\n## edge-23.12.3\n\nThis edge release contains improvements to the logging and diagnostics of the\ndestination controller.\n\n* Added a control plane metric to count errors talking to the Kubernetes API\n  ([#11774])\n* Fixed an issue causing spurious destination controller error messages for\n  profile lookups on unmeshed pods with port in default opaque list ([#11550])\n\n[#11774]: https://github.com/linkerd/linkerd2/pull/11774\n[#11550]: https://github.com/linkerd/linkerd2/pull/11550\n\n## edge-23.12.2\n\nThis edge release includes a restructuring of the proxy's balancer along with\naccompanying new metrics. The new minimum supported Kubernetes version is 1.22.\n\n* Restructured the proxy's balancer ([#11750]): balancer changes may now occur\n  independently of request processing. Fail-fast circuit breaking is enforced on\n  the balancer's queue so that requests can't get stuck in a queue indefinitely.\n  This new balancer is instrumented with new metrics: request (in-queue) latency\n  histograms, failfast states, discovery updates counts, and balancer endpoint\n  pool sizes.\n* Changed how the policy controller updates HTTPRoute status so that it doesn't\n  affect statuses from other non-linkerd controllers ([#11705]; fixes [#11659])\n\n[#11750]: https://github.com/linkerd/linkerd2/pull/11750\n[#11705]: https://github.com/linkerd/linkerd2/pull/11705\n[#11659]: https://github.com/linkerd/linkerd2/pull/11659\n\n## edge-23.12.1\n\nThis edge release introduces new configuration values in the identity\ncontroller for client-go's `QPS` and `Burst` settings. Default values for these\nsettings have also been raised from `5` (QPS) and `10` (Burst) to `100` and\n`200` respectively.\n\n* Added `namespaceSelector` fields for the tap-injector and jaeger-injector\n  webhooks. The webhooks are now configured to skip `kube-system` by default\n  ([#11649]; fixes [#11647]) (thanks @mikutas!)\n* Added the ability to configure client-go's `QPS` and `Burst` settings in the\n  identity controller ([#11644])\n* Improved client-go logging visibility throughout the control plane's\n  components ([#11632])\n* Introduced `PodDisruptionBudgets` in the linkerd-viz Helm chart for tap and\n  tap-injector ([#11628]; fixes [#11248]) (thanks @mcharriere!)\n\n[#11649]: https://github.com/linkerd/linkerd2/pull/11649\n[#11647]: https://github.com/linkerd/linkerd2/issues/11647\n[#11644]: https://github.com/linkerd/linkerd2/pull/11644\n[#11632]: https://github.com/linkerd/linkerd2/pull/11632\n[#11628]: https://github.com/linkerd/linkerd2/pull/11628\n[#11248]: https://github.com/linkerd/linkerd2/issues/11248\n\n## edge-23.11.4\n\nThis edge release introduces support for the native sidecar containers entering\nbeta support in Kubernetes 1.29. This improves the startup and shutdown ordering\nfor the proxy relative to other containers, fixing the long-standing\nshutdown issue with injected `Job`s. Furthermore, traffic from other\n`initContainer`s can now be proxied by Linkerd.\n\nIn addition, this edge release includes Helm chart improvements, and improvements\nto the multicluster extension.\n\n* Added a new `config.alpha.linkerd.io/proxy-enable-native-sidecar` annotation\n  and `Proxy.NativeSidecar` Helm option that causes the proxy container to run\n  as an init-container (thanks @teejaded!) ([#11465]; fixes [#11461])\n* Fixed broken affinity rules for the multicluster `service-mirror` when running\n  in HA mode ([#11609]; fixes [#11603])\n* Added a new check to `linkerd check` that ensures all extension namespaces are\n  configured properly ([#11629]; fixes [#11509])\n* Updated the Prometheus Docker image used by the `linkerd-viz` extension to\n  v2.48.0, resolving a number of CVEs in older Prometheus versions ([#11633])\n* Added `nodeAffinity` to `deployment` templates in the `linkerd-viz` and\n  `linkerd-jaeger` Helm charts (thanks @naing2victor!) ([#11464]; fixes\n  [#10680])\n\n[#11465]: https://github.com/linkerd/linkerd2/pull/11465\n[#11461]: https://github.com/linkerd/linkerd2/issues/11461\n[#11609]: https://github.com/linkerd/linkerd2/pull/11609\n[#11603]: https://github.com/linkerd/linkerd2/issues/11603\n[#11629]: https://github.com/linkerd/linkerd2/pull/11629\n[#11509]: https://github.com/linkerd/linkerd2/issues/11509\n[#11633]: https://github.com/linkerd/linkerd2/pull/11633\n[#11464]: https://github.com/linkerd/linkerd2/pull/11464\n[#10680]: https://github.com/linkerd/linkerd2/issues/10680\n\n## edge-23.11.3\n\nThis edge release fixes a bug where Linkerd could cause EOF errors during bursts\nof TCP connections.\n\n* Fixed a bug where the `linkerd multicluster link` command's\n  `--gateway-addresses` flag was not respected when a remote gateway exists\n  ([#11564])\n* proxy: Increased DEFAULT_OUTBOUND_TCP_QUEUE_CAPACITY to prevent EOF errors\n  during bursts of TCP connections\n\n[#11564]: https://github.com/linkerd/linkerd2/pull/11564\n\n## edge-23.11.2\n\nThis edge release contains observability improvements and bug fixes to the\nDestination controller, and a refinement to the multicluster gateway resolution\nlogic.\n\n* Fixed an issue where the Destination controller could stop processing service\n  profile updates, if a proxy subscribed to those updates stops reading them;\n  this is a followup to the issue [#11491] fixed in [edge-23.10.3] ([#11546])\n* In the Destination controller, added informer lag histogram metrics to track\n  whenever the Kubernetes objects watched by the controller are falling behind\n  the state in the kube-apiserver ([#11534])\n* In the multicluster service mirror, extended the target gateway resolution\n  logic to take into account all the possible IPs a hostname might resolve to,\n  rather than just the first one (thanks @MrFreezeex!) ([#11499])\n* Added probes to the debug container to appease environments requiring probes\n  for all containers ([#11308])\n\n[edge-23.10.3]: https://github.com/linkerd/linkerd2/releases/tag/edge-23.10.3\n[#11546]: https://github.com/linkerd/linkerd2/pull/11546\n[#11534]: https://github.com/linkerd/linkerd2/pull/11534\n[#11499]: https://github.com/linkerd/linkerd2/pull/11499\n[#11308]: https://github.com/linkerd/linkerd2/pull/11308\n\n## edge-23.11.1\n\nThis edge release fixes two bugs in the Destination controller that could cause\noutbound connections to hang indefinitely.\n\n* helm: Introduce configurable values for protocol detection ([#11536])\n* destination: Fix GetProfiles error when address is opaque and unmeshed ([#11556])\n* destination: Return NotFound for unknown pod names ([#11540])\n* proxy: Log controller errors at WARN\n* proxy: Fix grpc_status metric labels for inbound traffic\n\n[#11536]: https://github.com/linkerd/linkerd2/pull/11536\n[#11556]: https://github.com/linkerd/linkerd2/pull/11556\n[#11540]: https://github.com/linkerd/linkerd2/pull/11540\n\n## edge-23.10.4\n\nThis edge release includes a fix for the `ServiceProfile` CRD resource schema.\nThe schema incorrectly required `not` response matches to be arrays, while the\nin-cluster validator parsed `not` response matches as objects. In addition, an\nissues has been fixed in `linkerd profile`. When used with the `--open-api`\nflag, it would not strip trailing slashes when generating a resource from\nswagger specifications.\n\n* Fixed an issue where trailing slashes wouldn't be stripped when generating\n  `ServiceProfile` resources through `linkerd profile --open-api` ([#11519])\n* Fixed an issue in the `ServiceProfile` CRD schema. The schema incorrectly\n  required that a `not` response match should be an array, which the service\n  profile validator rejected since it expected an object. The schema has been\n  updated to properly indicate that `not` values should be an object ([#11510];\n  fixes [#11483])\n* Improved logging in the destination controller by adding the client pod's\n  name to the logging context. This will improve visibility into the messages\n  sent and received by the control plane from a specific proxy ([#11532])\n* Fixed an issue in the destination controller where the metadata API would not\n  initialize a `Job` informer. The destination controller uses the metadata API\n  to retrieve `Job` metadata, and relies mostly on informers. Without an\n  initialized informer, an error message would be logged, and the controller\n  relied on direct API calls ([#11541]; fixes [#11531])\n\n[#11541]: https://github.com/linkerd/linkerd2/pull/11541\n[#11532]: https://github.com/linkerd/linkerd2/pull/11532\n[#11531]: https://github.com/linkerd/linkerd2/issues/11531\n[#11519]: https://github.com/linkerd/linkerd2/pull/11519\n[#11510]: https://github.com/linkerd/linkerd2/pull/11510\n[#11483]: https://github.com/linkerd/linkerd2/issues/11483\n\n## edge-23.10.3\n\nThis edge release fixes issues in the proxy and Destination controller which can\nresult in Linkerd proxies sending traffic to stale endpoints. In addition, it\ncontains other bugfixes and updates dependencies to include patches for the\nsecurity advisories [CVE-2023-44487]/GHSA-qppj-fm5r-hxr3 and GHSA-c827-hfw6-qwvm.\n\n* Fixed an issue where the Destination controller could stop processing\n  changes in the endpoints of a destination, if a proxy subscribed to that\n  destination stops reading service discovery updates. This issue results in\n  proxies attempting to send traffic for that destination to stale endpoints\n  ([#11491], fixes [#11480], [#11279], and [#10590])\n* Fixed a regression introduced in stable-2.13.0 where proxies would not\n  terminate unused service discovery watches, exerting backpressure on the\n  Destination controller which could cause it to become stuck\n  ([linkerd2-proxy#2484] and [linkerd2-proxy#2486])\n* Added `INFO`-level logging to the proxy when endpoints are added or removed\n  from a load balancer. These logs are enabled by default, and can be disabled\n  by [setting the proxy log level][proxy-log-level] to\n  `warn,linkerd=info,linkerd_proxy_balance=warn` or similar\n  ([linkerd2-proxy#2486])\n* Fixed a regression where the proxy rendered `grpc_status` metric labels as a\n  string rather than as the numeric status code ([linkerd2-proxy#2480]; fixes\n  [#11449])\n* Extended `linkerd-jaeger`'s `imagePullSecrets` Helm value to also apply to\nthe `namespace-metadata` ServiceAccount ([#11504])\n* Updated the control plane's dependency on the `golang.google.org/grpc` Go\n  package to include patches for [CVE-2023-44487]/GHSA-qppj-fm5r-hxr3 ([#11496])\n* Updated dependencies on `rustix` to include patches for GHSA-c827-hfw6-qwvm\n  ([linkerd2-proxy#2488] and [#11512]).\n\n[#10590]: https://github.com/linkerd/linkerd2/issues/10590\n[#11279]: https://github.com/linkerd/linkerd2/issues/11279\n[#11491]: https://github.com/linkerd/linkerd2/pull/11491\n[#11449]: https://github.com/linkerd/linkerd2/issues/11449\n[#11480]: https://github.com/linkerd/linkerd2/issues/11480\n[#11504]: https://github.com/linkerd/linkerd2/issues/11504\n[#11512]: https://github.com/linkerd/linkerd2/issues/11512\n[linkerd2-proxy#2480]: https://github.com/linkerd/linkerd2-proxy/pull/2480\n[linkerd2-proxy#2484]: https://github.com/linkerd/linkerd2-proxy/pull/2484\n[linkerd2-proxy#2486]: https://github.com/linkerd/linkerd2-proxy/pull/2486\n[linkerd2-proxy#2488]: https://github.com/linkerd/linkerd2-proxy/pull/2488\n[proxy-log-level]: https://linkerd.io/2.14/tasks/modifying-proxy-log-level/\n[CVE-2023-44487]: https://github.com/advisories/GHSA-qppj-fm5r-hxr3\n\n## edge-23.10.2\n\nThis edge release includes a fix addressing an issue during upgrades for\ninstances not relying on automated webhook certificate management (like\ncert-manager provides).\n\n* Added a `checksum/config` annotation to the destination and proxy injector\n  deployment manifests, to force restarting those workloads whenever their\n  webhook secrets change during upgrade (thanks @iAnomaly!) ([#11440])\n* Fixed policy controller error when deleting a Gateway API HTTPRoute resource\n  ([#11471])\n\n[#11440]: https://github.com/linkerd/linkerd2/pull/11440\n[#11471]: https://github.com/linkerd/linkerd2/pull/11471\n\n## edge-23.10.1\n\nThis edge release adds additional configurability to Linkerd's viz and\nmulticluster extensions.\n\n* Added a `podAnnotations` Helm value to allow adding additional annotations to\n  the Linkerd-Viz Prometheus Deployment ([#11365]) (thanks @cemenson)\n* Added `imagePullSecrets` Helm values to the multicluster chart so that it can\n  be installed in an air-gapped environment. ([#11285]) (thanks @lhaussknecht)\n\n[#11365]: https://github.com/linkerd/linkerd2/issues/11365\n[#11285]: https://github.com/linkerd/linkerd2/issues/11285\n\n## edge-23.9.4\n\nThis edge release makes Linkerd even better.\n\n* Added a controlPlaneVersion override to the `linkerd-control-plane` Helm chart\n  to support including SHA256 image digests in Linkerd manifests (thanks\n  @cromulentbanana!) ([#11406])\n* Improved `linkerd viz check` to attempt to validate that the Prometheus scrape\n  interval will work well with the CLI and Web query parameters ([#11376])\n* Improved CLI error handling to print differentiated error information when\n  versioncheck.linkerd.io cannot be resolved (thanks @dtaskai) ([#11377])\n* Fixed an issue where the destination controller would not update pod metadata\n  for profile resolutions for a pod accessed via the host network (e.g.\n  HostPort endpoints) ([#11334]).\n* Added a validating webhook config for httproutes.gateway.networking.k8s.io\n  resources (thanks @mikutas!) ([#11150])\n* Introduced a new `multicluster check --timeout` flag to limit the time\n  allowed for Kubernetes API calls (thanks @moki1202) ([#11420])\n\n[#11150]: https://github.com/linkerd/linkerd2/pull/11150\n[#11334]: https://github.com/linkerd/linkerd2/pull/11334\n[#11376]: https://github.com/linkerd/linkerd2/pull/11376\n[#11377]: https://github.com/linkerd/linkerd2/pull/11377\n[#11406]: https://github.com/linkerd/linkerd2/pull/11406\n[#11420]: https://github.com/linkerd/linkerd2/pull/11420\n\n## edge-23.9.3\n\nThis edge release updates the proxy's dependency on the `rustls` library to\npatch security vulnerability [RUSTSEC-2023-0052][RUSTSEC-2023-0052-0]\n(GHSA-8qv2-5vq6-g2g7), a potential CPU usage denial-of-service attack when\nacceting a TLS handshake from an untrusted peer with a maliciously-crafted\ncertificate. Furthermore, this edge release contains a few improvements to the\ncontrol plane and jaeger extension Helm charts.\n\n* Addressed security vulnerability [RUSTSEC-2023-0052][RUSTSEC-2023-0052-0] in\n  the proxy by updating its dependency on the `rustls` library\n* Added a `prometheusUrl` field for the heartbeat job in the control plane Helm\n  chart (thanks @david972!) ([#11343]; fixes [#11342])\n* Introduced support for arbitrary labels in the `podMonitors` field in the\n  control plane Helm chart (thanks @jseiser!) ([#11222]; fixes [#11175])\n* Added support for config merge and Deployment environment to\n  `opentelemetry-collector` in the jaeger extension (thanks @iAnomaly!)\n  ([#11283])\n\n[#11283]: https://github.com/linkerd/linkerd2/pull/11283\n[#11222]: https://github.com/linkerd/linkerd2/pull/11222\n[#11175]: https://github.com/linkerd/linkerd2/issues/11175\n[#11343]: https://github.com/linkerd/linkerd2/pull/11343\n[#11342]: https://github.com/linkerd/linkerd2/issues/11342\n[RUSTSEC-2023-0052-0]: https://rustsec.org/advisories/RUSTSEC-2023-0052.html\n\n## edge-23.9.2\n\nThis edge release updates the proxy's dependency on the `webpki` library to\npatch security vulnerability [RUSTSEC-2023-0052] (GHSA-8qv2-5vq6-g2g7), a\npotential CPU usage denial-of-service attack when accepting a TLS handshake from\nan untrusted peer with a maliciously-crafted certificate.\n\n* Addressed security vulnerability [RUSTSEC-2023-0052] in the proxy ([#11361])\n* Fixed `linkerd check --proxy` incorrectly checking the proxy version of pods\n  in the `completed` state (thanks @mikutas!) ([#11295]; fixes [#11280])\n* Removed unnecessary `linkerd.io/helm-release-version` annotation from the\n  `linkerd-control-plane` Helm chart (thanks @mikutas!) ([#11329]; fixes\n  [#10778])\n\n[RUSTSEC-2023-0052]: https://rustsec.org/advisories/RUSTSEC-2023-0052.html\n[#11295]: https://github.com/linkerd/linkerd2/pull/11295\n[#11280]: https://github.com/linkerd/linkerd2/issues/11280\n[#11361]: https://github.com/linkerd/linkerd2/pull/11361\n[#11329]: https://github.com/linkerd/linkerd2/pull/11329\n[#10778]: https://github.com/linkerd/linkerd2/issues/10778\n\n## edge-23.9.1\n\nThis edge release introduces a fix for service discovery on endpoints that use\nhostPorts. Previously, the destination service would return the pod IP for the\ndiscovery request which could break connectivity on pod restart. To fix this,\ndirect pod communication for a pod bound on a hostPort will always return the\nhostIP. In addition, this release fixes a security vulnerability (CVE-2023-2603)\ndetected in the CNI plugin and proxy-init images, and includes a number of other\nfixes and small improvements.\n\n* Addressed security vulnerability CVE-2023-2603 in proxy-init and CNI plugin\n  ([#11296])\n* Introduced resource requests/limits for the policy controller resource in the\n  control plane helm chart ([#11301])\n* Fixed an issue where an empty `remoteDiscoverySelector` field in a\n  multicluster link would cause all services to be mirrored ([#11309])\n* Removed time out from `linkerd multicluster gateways` command; when no\n  metrics exist the command will return instantly ([#11265])\n* Improved help messaging for `linkerd multicluster link` ([#11265])\n* Changed how hostPort lookups are handled in the destination service.\n  Previously, when doing service discovery for an endpoint bound on a hostPort,\n  the destination service would return the corresponding pod IP. On pod\n  restart, this could lead to loss of connectivity on the client's side. The\n  destination service now always returns host IPs for service discovery on an\n  endpoint that uses hostPorts ([#11328])\n* Updated HTTPRoute webhook rule to validate all apiVersions of the resource\n  (thanks @mikutas!) ([#11149])\n* Fixed erroneous `skipped` messages when injecting namespaces with `linkerd\n  inject` (thanks @mikutas!) ([#10231])\n\n[#11309]: https://github.com/linkerd/linkerd2/issues/11309\n[#11296]: https://github.com/linkerd/linkerd2/discussions/11296\n[#11328]: https://github.com/linkerd/linkerd2/pull/11328\n[#11301]: https://github.com/linkerd/linkerd2/issues/11301\n[#11265]: https://github.com/linkerd/linkerd2/pull/11265\n[#11149]: https://github.com/linkerd/linkerd2/pull/11149\n[#10231]: https://github.com/linkerd/linkerd2/issues/10231\n\n## stable-2.14.0\n\nThis release introduces direct pod-to-pod multicluster service mirroring. When\nclusters are deployed on a flat network, Linkerd can export multicluster\nservices in a way where cross-cluster traffic does not need to go through the\ngateway. This enhances multicluster authentication and can reduce the need for\nprovisioning public load balancers.\n\nIn addition, this release adds support for the\n[Gateway API](https://gateway-api.sigs.k8s.io/) HTTPRoute resource (in the\n`gateway.networking.k8s.io` api group). This improves compatibility with other\ntools that use these resources such as [Flagger](https://flagger.app/) and\n[Argo Rollouts](https://argoproj.github.io/rollouts/). The release also includes\na large number of features and improvements to HTTPRoute including the ability\nto set timeouts and the ability to define consumer-namespace HTTPRoutes.\n\nFinally, this release includes a number of bugfixes, performance improvements,\nand other smaller additions.\n\n**Upgrade notes**: Please see the\n[upgrade instructions](https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2140).\n\n* Multicluster\n  * Remove namespace field from cluster scoped resources to fix pruning\n  * Added -o json flag for the `linkerd multicluster gateways` command (thanks\n    @hiteshwani29)\n  * Introduced `logFormat` value to the multicluster `Link` Helm Chart (thanks\n    @bunnybilou!)\n  * Added leader-election capabilities to the service-mirror controller\n  * Added high-availability (HA) mode for the multicluster service-mirror\n  * Added a new `remoteDiscoverySelector` field to the multicluster `Link` CRD,\n    which enables a service mirroring mode where the control plane\n    performs discovery for the mirrored service from the remote cluster, rather\n    than creating Endpoints for the mirrored service in the source cluster\n* HTTPRoute\n  * Fixed `linkerd uninstall` issue for HTTPRoute\n  * Added support for `gateway.networking.k8s.io` HTTPRoutes in the policy\n    controller\n  * Added support for RequestHeaderModifier and RequestRedirect HTTP filters in\n    outbound policy; filters may be added at the route or backend level\n  * Added support for the `ResponseHeaderModifier` HTTPRoute filter\n  * Added support for HTTPRoutes defined in the consumer namespace\n  * Added support for HTTPRoute `parent_refs` that do not specify a port\n* CRDs\n  * Patched the MeshTLSAuthentication CRD to force providing at least one\n    identity/identityRef\n* Control Plane\n  * Send Opaque protocol hint for opaque ports in destination controller\n  * Replaced deprecated `failure-domain.beta.kubernetes.io/zone` labels in Helm\n    charts  with `topology.kubernetes.io/zone` labels (thanks @piyushsingariya!)\n  * Replaced `server_port_subscribers` Destination controller gauge metric with\n    `server_port_subscribes` and `server_port_unsubscribes` counter metrics\n* Proxy\n  * Handle Opaque protocol hints on endpoints\n  * Added `outbound_http_balancer_endpoints` metric\n  * Fixed missing route_ metrics for requests with ServiceProfiles\n  * Fixed proxy startup failure when using the `config.linkerd.io/admin-port`\n    annotation (thanks @jclegras!)\n  * Added distinguishable version information to proxy logs and metrics\n* CLI\n  * The `linkerd diagnostics policy` command now displays outbound policy when\n    the target resource is a Service\n  * A fix for HA validation checks when Linkerd is installed with Helm. Thanks\n    @mikutas!!\n* Viz\n  * Add the `kubelet` NetworkAuthentication back since it is used by the\n    `linkerd viz allow-scrapes` subcommand.\n  * Fixed the `linkerd viz check` command so that it will wait until the viz\n    extension becomes ready\n  * Fixed an issue where specifying a `remote_write` config would cause the\n    Prometheus config to be invalid (thanks @hiteshwani29)\n  * Improved validation of the `--to` and `--from` flags for the `linkerd viz stat`\n    command (thanks @pranoyk)\n  * Added `-o jsonpath` flag to `linkerd viz tap` to allow filtering output fields\n    (thanks @hiteshwani29!)\n  * Fixed a Grafana error caused by an incorrect datasource (thanks @albundy83!)\n  * Fixed missing \"Services\" menu item in the Spanish localization for the\n  `linkerd-viz` web dashboard (thanks @mclavel!)\n* Extensions\n  * Added missing label `linkerd.io/extension` to certain resources to ensure they\n    pruned when appropriate (thanks @ClementRepo)\n  * Added tolerations and nodeSelector support in extensions `namespace-metadata`\n    Jobs (thanks @pssalman!)\n* Init Containers\n  * Added an option for disabling the network validator's security context for\n    environments that provide their own\n* CNI\n  * Added --set flag to install-cni plugin (thanks @amit-62!)\n  * Fixed missing resource-cni labels on linkerd-cni, this blocked the\n    linkerd-cni pods from coming up when the injector was broken (thanks\n    @migueleliasweb!)\n* Build\n  * Build improvements for multi-arch build artifacts. Thanks @MarkSRobinson!!\n\nThis release includes changes from a massive list of contributors! A special\nthank-you to everyone who helped make this release possible:\n\n* Amir Karimi @AMK9978\n* Amit Kumar @amit-62\n* Andre Marcelo-Tanner @kzap\n* Andrew @andrew-gropyus\n* Arnaud Beun @bunnybilou\n* Clement @proxfly\n* Dima @krabradosty\n* Grégoire Bellon-Gervais @albundy83\n* Harsh Soni @harsh020\n* Jean-Charles Legras @jclegras\n* Loong Dai @daixiang0\n* Mark Robinson @MarkSRobinson\n* Miguel Elias dos Santos @migueleliasweb\n* Pranoy Kumar Kundu @pranoyk\n* Ryan Hristovski @ryanhristovski\n* Takumi Sue @mikutas\n* Zakhar Bessarab @zekker6\n* hiteshwani29 @hiteshwani29\n* pheianox\n* pssalman @pssalman\n\n## edge-23.8.3\n\nThis is a release candidate for stable-2.14.0; we encourage you to help trying\nit out!\n\nThis edge release contains a number of improvements over the multi-cluster\nfeatures introduced in the last edge release supporting flat networks. It also\nhardens the containers security stance by removing write access to the root\nfilesystem.\n\n* Enhanced `linkerd multicluster link` to allow clusters to be linked without a\n  gateway ([#11226])\n* Added cluster store size gauge metric ([#11256])\n* Disabled local traffic policy for remote discovery ([#11257])\n* Fixed various innocuous multi-cluster warnings ([#11251], [#11246], [#11253])\n* Set `readOnlyRootFilesystem: true` in all the containers, as they don't\n  require write permissions ([#11221]; fixes [#11142]) (thanks @mikutas!)\n\n[#11226]: https://github.com/linkerd/linkerd2/pull/11226\n[#11256]: https://github.com/linkerd/linkerd2/pull/11256\n[#11257]: https://github.com/linkerd/linkerd2/pull/11257\n[#11251]: https://github.com/linkerd/linkerd2/pull/11251\n[#11246]: https://github.com/linkerd/linkerd2/pull/11246\n[#11253]: https://github.com/linkerd/linkerd2/pull/11253\n[#11221]: https://github.com/linkerd/linkerd2/pull/11221\n[#11142]: https://github.com/linkerd/linkerd2/issues/11142\n\n## edge-23.8.2\n\nThis edge release adds improvements to Linkerd's multi-cluster features as part\nof the [flat network support] planned for Linkerd stable-2.14.0. In addition, it\nfixes an issue ([#10764]) where warnings about an invalid metric were logged\nfrequently by the Destination controller.\n\n* Added a new `remoteDiscoverySelector` field to the multicluster `Link` CRD,\n  which enables a service mirroring mode where the control plane\n  performs discovery for the mirrored service from the remote cluster, rather\n  than creating Endpoints for the mirrored service in the source cluster\n  ([#11190], [#11201], [#11220], and [#11224])\n* Fixed missing \"Services\" menu item in the Spanish localization for the\n  `linkerd-viz` web dashboard ([#11229]) (thanks @mclavel!)\n* Replaced `server_port_subscribers` Destination controller gauge metric with\n  `server_port_subscribes` and `server_port_unsubscribes` counter metrics\n  ([#11206]; fixes [#10764])\n* Replaced deprecated `failure-domain.beta.kubernetes.io/zone` labels in Helm\n  charts  with `topology.kubernetes.io/zone` labels ([#11148]; fixes [#11114])\n  (thanks @piyushsingariya!)\n\n[#10764]: https://github.com/linkerd/linkerd2/issues/10764\n[#11114]: https://github.com/linkerd/linkerd2/issues/11114\n[#11148]: https://github.com/linkerd/linkerd2/issues/11148\n[#11190]: https://github.com/linkerd/linkerd2/issues/11190\n[#11201]: https://github.com/linkerd/linkerd2/issues/11201\n[#11206]: https://github.com/linkerd/linkerd2/issues/11206\n[#11220]: https://github.com/linkerd/linkerd2/issues/11220\n[#11224]: https://github.com/linkerd/linkerd2/issues/11224\n[#11229]: https://github.com/linkerd/linkerd2/issues/11229\n[flat network support]: https://linkerd.io/2023/07/20/enterprise-multi-cluster-at-scale-supporting-flat-networks-in-linkerd/\n\n## edge-23.8.1\n\nThis edge release restores a proxy setting for it to shed load less aggressively\nwhile under high load, which should result in lower error rates (see #11055). It\nalso removes the usage of host networking in the linkerd-cni extension.\n\n* Changed the default HTTP request queue capacities for the inbound and outbound\n  proxies back to 10,000 requests (see #11055 and #11198)\n* Lifted need of using host networking in the linkerd-cni Daemonset (#11141)\n  (thanks @abhijeetgauravm!)\n\n## edge-23.7.3\n\nThis edge release improves Linkerd's support for HttpRoute by allowing\n`parent_ref` ports to be optional, allowing HttpRoutes to be defined in a\nconsumer's namespace, and adding support for the `ResponseHeaderModifier` filter.\nIt also fixes a panic in the destination controller.\n\n* Added an option for disabling the network validator's security context for\n  environments that provide their own\n* Added high-availability (HA) mode for the multicluster service-mirror\n* Added support for HttpRoute `parent_refs` that do not specify a port\n* Fixed a Grafana error caused by an incorrect datasource (thanks @albundy83!)\n* Added support for HttpRoutes defined in the consumer namespace\n* Improved the granularity of logging levels in the control plane\n* Fixed a race condition in the destination controller that could cause it to\n  panic\n* Added support for the `ResponseHeaderModifier` HttpRoute filter\n* Updated extension CLI commands to prefer the `--register` flag over the\n  `LINKERD_DOCKER_REGISTRY` environment variable, making the precedence more\n  consistent (thanks @harsh020!)\n\n## edge-23.7.2\n\nThis edge release introduces support for HTTP filters configured through both\n`policy.linkerd.io` and `gateway.networking.k8s.io` HTTPRoute resources.\nCurrently, RequestHeaderModifier and RequestRedirect HTTP filters are\nsupported. Additionally, this release fixes an issue with the linkerd-cni\nchart.\n\n* Added support for RequestHeaderModifier and RequestRedirect HTTP filters in\n  outbound policy; filters may be added at the route or backend level\n* Fixed missing resource-cni labels on linkerd-cni, this blocked the\n  linkerd-cni pods from coming up when the injector was broken (thanks\n  @migueleliasweb!)\n\n## edge-23.7.1\n\nThis edge release adds support for the upstream `gateway.networking.k8s.io`\nHTTPRoute resource (in addition to the `policy.linkerd.io` CRD installed by\nLinkerd). Furthermore, it fixes a bug where the ingress-mode proxy would fail to\nfall back to ServiceProfiles for destinations without HTTPRoutes.\n\n* Added support for `gateway.networking.k8s.io` HTTPRoutes in the policy\n  controller\n* Added distinguishable version information to proxy logs and metrics\n* Fixed incorrect handling of `NotFound` client policies in ingress-mode proxies\n\n## edge-23.6.3\n\nThis edge release adds leader-election capabilities to the service-mirror\ncontroller under the hood, as a precursor to HA mode in an upcoming release. It\nalso includes a `linkerd viz tap` improvement and a proxy startup bugfix, both\ncontributed by the community!\n\n* Added leader-election capabilities to the service-mirror controller\n* Added `-o jsonpath` flag to `linkerd viz tap` to allow filtering output fields\n  (thanks @hiteshwani29!)\n* Fixed proxy startup failure when using the `config.linkerd.io/admin-port`\n  annotation (thanks @jclegras!)\n\n## edge-23.6.2\n\nThis edge release introduces timeout capabilities for HTTPRoutes in a manner\ncompatible with the proposed changes to HTTPRoute in\n[kubernetes-sigs/gateway-api#1997](https://github.com/kubernetes-sigs/gateway-api/pull/1997).\n\nThis release also includes several small improvements and fixes:\n\n* A fix for HA validation checks when Linkerd is installed with Helm. Thanks\n@mikutas!!\n* Build improvements for multi-arch build artifacts. Thanks @MarkSRobinson!!\n\n## edge-23.6.1\n\nThis edge release changes the behavior of the CNI plugin to run exclusively in\n\"chained mode\". Instead of creating its own configuration file, the CNI plugin\nwill now wait until a `conf` file exists before appending its configuration.\nAdditionally, this change includes a bug fix for topology aware service\nrouting.\n\n* Changed the CNI plugin installer to always run in 'chained' mode; the plugin will\n  now wait until another CNI plugin is installed before appending its\n  configuration\n* Fixed bug where topology routing would not disable while service was under\n  load (thanks @MarkSRobinson!)\n* Introduced `logFormat` value to the multicluster `Link` Helm Chart (thanks\n  @bunnybilou!)\n\n## edge-23.5.3\n\nThis edge release includes fixes for several bugs related to HTTPRoute handling.\n\n* Fixed an issue where the `namespace` field on HTTPRoute `backendRef`s was\n  ignored, and the backend Service would always be assumed to be in the\n  namespace as the parent Service\n* Fixed an issue where default authorizations generated for readiness and\n  liveness probes would fail if the probe path included URI query parameters\n* Fixed the proxy not using gRPC response classification for gRPC requests to\n  destinations without ServiceProfiles\n\n## edge-23.5.2\n\nThis edge release adds some minor improvements in the MeshTLSAuthentication CRD\nand the extensions charts, and fixes an issue with `linkerd multicluster check`.\n\n* Added tolerations and nodeSelector support in extensions `namespace-metadata`\n  Jobs (thanks @pssalman!)\n* Patched the MeshTLSAuthentication CRD to force providing at least one\n  identity/identityRef\n* Fixed the `linkerd multicluster check` command failing in the presence of lots\n  of mirrored services\n\n## edge-23.5.1\n\nThis edge release introduces the ability to configure the proxy's discovery cache\ntimeouts via annotations. While most users will not need to do this, it can be\nuseful to improve the mesh's resilience to control plane failures. This release\nalso includes a number of other important improvements and bug fixes.\n\n* Added -o json flag for the `linkerd multicluster gateways` command (thanks\n  @hiteshwani29)\n* Added missing label `linkerd.io/extension` to certain resources to ensure they\n  pruned when appropriate (thanks @ClementRepo)\n* Fixed a memory leak in the service mirror controller\n* Improved validation of the `--to` and `--from` flags for the `linkerd viz stat`\n  command (thanks @pranoyk)\n* Fixed an issue with W3C trace context propagation which caused proxy spans to\n  be siblings rather than children of their original parent (thanks\n  @whiskeysierra)\n* Updated the Linkerd CNI plugin base docker image from Debian to Alpine\n* Fixed an issue where specifying a `remote_write` config would cause the\n  Prometheus config to be invalid (thanks @hiteshwani29)\n* Added the ability to configure the proxy's discovery cache timeouts with the\n  `config.linkerd.io/proxy-outbound-discovery-cache-unused-timeout` and\n  `config.linkerd.io/proxy-inbound-discovery-cache-unused-timeout` annotations\n* Fixed the `linkerd viz check` command so that it will wait until the viz\n  extension becomes ready\n* Fixed an issue where meshed pods could not communicate with themselves through\n  a ClusterIP Service\n\n## edge-23.4.3\n\nThis edge release improves compatibility with ArgoCD by changing the Linkerd\ncontrol plane to create Lease resources at runtime rather than including them\nin the Helm chart. It also addresses a CVE by upgrading an underlying\ndependency.\n\n* Upgraded `h2` dependency to address CVE-2023-26964\n* Fixed an issue where `server_port_subscribers` metric in the Destination\n  controller was sometimes absent\n* Removed the policy-controller-write Lease from the control plane Helm chart in\n  favor of creating it at runtime\n* Updated the proxy-injector to pass opaque port lists to the proxy as ranges\n  rather than individually, greatly reducing the size of proxy manifests when\n  large opaque port ranges are set\n* Fixed an issue where the proxy was performing protocol detection on ports\n  marked as opaque\n* Improved backwards compatibility between 2.13 proxies and 2.12 control planes\n\n## edge-23.4.2\n\nThis edge release contains a number of bug fixes.\n\n* CLI\n  * Fixed `linkerd uninstall` issue for HttpRoute\n  * The `linkerd diagnostics policy` command now displays outbound policy when\n    the target resource is a Service\n\n* CNI\n  * Fixed incompatibility issue with AWS CNI addon in EKS, that was\n    forbidding pods to acquire networking after scaling up nodes.\n    (thanks @frimik!)\n  * Added --set flag to install-cni plugin (thanks @amit-62!)\n\n* Control Plane\n  * Fixed an issue where the policy controller always used the default\n    `cluster.local` domain\n  * Send Opaque protocol hint for opaque ports in destination controller\n\n* Helm\n  * Fixed an issue in the viz Helm chart where the namespace metadata template\n    would throw `unexpected argument found` errors\n  * Fixed Jaeger chart installation failure\n\n* Multicluster\n  * Remove namespace field from cluster scoped resources to fix pruning\n\n* Proxy\n  * Updated `h2` dependency to include a patch for a theoretical\n    denial-of-service vulnerability discovered in CVE-2023-26964\n  * Handle Opaque protocol hints on endpoints\n  * Changed the proxy's default log level to silence warnings from\n    `trust_dns_proto` that are generally spurious.\n  * Added `outbound_http_balancer_endpoints` metric\n  * Fixed missing route_ metrics for requests with ServiceProfiles\n\n* Viz\n  * Bump prometheus image to v2.43.0\n  * Add the `kubelet` NetworkAuthentication back since it is used by the\n`linkerd viz allow-scrapes` subcommand.\n\n## stable-2.13.1\n\nThis stable release fixes an issue in the policy controller where a non-default\ncluster domain would return incorrect authorities in the outbound policy API.\nAdditionally, this release updates a proxy dependency to fix CVE-2023-2694.\n\n* Proxy\n  * Updated `h2` dependency to include a patch for a theoretical\n    denial-of-service vulnerability discovered in CVE-2023-26964\n\n* Control Plane\n  * Fixed an issue where the policy controller always used the default\n    `cluster.local` domain\n\n* Helm\n  * Fixed an issue in the viz Helm chart where the namespace metadata template\n    would throw `unexpected argument found` errors\n\n## stable-2.13.0\n\nThis release introduces client-side policy to Linkerd, including dynamic routing\nand circuit breaking. [Gateway API](https://gateway-api.sigs.k8s.io/) HTTPRoutes\ncan now be used to configure policy for outbound (client) proxies as well as\ninbound (server) proxies, by creating HTTPRoutes with Service resources as their\n`parentRef`. See the Linkerd documentation for tutorials on [dynamic request\nrouting] and [circuit breaking]. New functionality for debugging HTTPRoute-based\npolicy is also included in this release, including [new proxy metrics] and the\nability to display outbound policies in the `linkerd diagnostics policy` CLI\ncommand.\n\nIn addition, this release adds `network-validator`, a new init container to be\nused when CNI is enabled. `network-validator` ensures that local iptables rules\nare working as expected. It will validate this before linkerd-proxy starts.\n`network-validator` replaces the `noop` container, runs as `nobody`, and drops\nall capabilities before starting.\n\nFinally, this release includes a number of bugfixes, performance improvements,\nand other smaller additions.\n\n**Upgrade notes**: Please see the [upgrade instructions][upgrade-2130].\n\n* CRDs\n  * HTTPRoutes may now have Service parents, to configure outbound policy\n  * Updated HTTPRoute version from `v1alpha1` to `v1beta2`\n\n* CLI\n  * Added a new `linkerd prune` command to the CLI (including most extensions) to\n    remove resources which are no longer part of Linkerd's manifests\n  * Added additional shortnames for Linkerd policy resources (thanks @javaducky!)\n  * The `linkerd diagnostics policy` command now displays outbound policy when\n    the target resource is a Service\n\n* Control Plane\n  * The policy controller now discovers outbound policy configurations from\n    HTTPRoutes that target Services.\n  * Added OutboundPolicies API, for use by `linkerd-proxy` to route\n    outbound traffic\n  * Added Prometheus `/metrics` endpoint to the admin server, with process\n    metrics\n  * Fixed QueryParamMatch parsing for HTTPRoutes\n  * Added the policy status controller which writes the `status` field to\n    HTTPRoutes when a parent reference Server accepts or rejects it\n  * Added KubeAPI server ports to `ignoreOutboundPorts` of `proxy-injector`\n  * No longer apply `waitBeforeExitSeconds` to control plane, viz and jaeger\n    extension pods\n  * Added support for the `internalTrafficPolicy` of a service (thanks @yc185050!)\n  * Added block chomping to strip trailing new lines in ConfigMap (thanks @avdicl!)\n  * Added protection against nil dereference in resources helm template\n  * Added support for Pod Security Admission (Pod Security Policy resources are\n    still supported but disabled by default)\n  * Lowered non-actionable error messages in the Destination log to debug-level\n    entries to avoid triggering false alarms (thanks @siddharthshubhampal!)\n  * Fixed an issue with EndpointSlice endpoint reconciliation on slice deletion;\n    when using more than one slice, a `NoEndpoints` event would be sent to the\n    proxy regardless of the amount of endpoints that were still available\n    (thanks @utay!)\n  * Improved diagnostic log messages\n  * Fixed sending of spurious profile updates\n  * Removed unnecessary Namespaces access from the destination controller RBAC\n  * Added the server_port_subscribers metric to track the number of subscribers\n    to Server changes associated with a pod's port\n  * Added the service_subscribers metric to track the number of subscribers to\n    Service changes\n  * Fixed a small memory leak in the opaque ports watcher\n\n* Proxy\n  * Use the new OutboundPolicies API, supporting Gateway API-style routes\n    in the outbound proxy\n  * Added support for dynamic request routing based on HTTPRoutes\n  * Added HTTP circuit breaking\n  * Added `outbound_route_backend_http_requests_total`,\n    `outbound_route_backend_grpc_requests_total`, and\n    `outbound_http_balancer_endpoints` metrics\n  * Changed the proxy's behavior when traffic splitting so that only services\n    that are not in failfast are used. This will enable the proxy to manage\n    failover without external coordination\n  * Updated tokio (async runtime) in the proxy which should reduce CPU usage,\n    especially for proxy's pod local (i.e in the same network namespace)\n    communication\n\n* linkerd-proxy-init\n  * Changed `proxy-init` iptables rules to be idempotent upon init pod\n    restart (thanks @jim-minter!)\n  * Improved logging in `proxy-init` and `linkerd-cni`\n  * Added a `proxyInit.privileged` setting to control whether the `proxy-init`\n    initContainer runs as a privileged process\n\n* CNI\n  * Added static and dynamic port overrides for CNI eBPF to work with socket-level\n    load balancing\n  * Added `network-validator` init container to ensure that iptables rules are\n    working as expected\n  * Added a `resources` field in the linkerd-cni chart (thanks @jcogilvie!)\n\n* Viz\n  * Added `tap.ignoredHeaders` Helm value to the linkerd-viz chart. This value\n    allows users to specify a comma-separated list of header names which will be\n    ignored by Linkerd Tap (thanks @ryanhristovski!)\n  * Removed duplicate SecurityContext in Prometheus manifest\n  * Added new flag `--viz-namespace` which avoids requiring permissions for\n    listing all namespaces in `linkerd viz` subcommands (thanks @danibaeyens!)\n  * Removed the TrafficSplit page from the Linkerd viz dashboard (thanks\n    @h-dav!)\n  * Introduced new values in the `viz` chart to allow for arbitrary annotations\n    on the `Service` objects (thanks @sgrzemski!)\n  * Added an optional AuthorizationPolicy to authorize Grafana to Prometheus\n    in the Viz extension\n\n* Multicluster\n  * Removed duplicate AuthorizationPolicy for probes from the multicluster\n    gateway Helm chart\n  * Updated wording for linkerd-multicluster cluster when it fails to probe a\n    remote gateway mirror\n  * Added multicluster gateway `nodeSelector` and `tolerations` helm parameters\n  * Added new configuration options for the multicluster gateway:\n    * `gateway.deploymentAnnotations`\n    * `gateway.terminationGracePeriodSeconds` (thanks @bunnybilou!)\n    * `gateway.loadBalancerSourceRanges` (thanks @Tyrion85!)\n\n* Extensions\n  * Removed dependency on the `curlimages/curl` 3rd-party image used to initialize\n    extensions namespaces metadata (so they are visible by `linkerd check`),\n    replaced by the new `extension-init` image\n  * Converted `ServerAuthorization` resources to `AuthorizationPolicy` resources\n    in Linkerd extensions\n  * Removed policy resources bound to admin servers in extensions (previously\n    these resources were used to authorize probes but now are authorized by\n    default)\n  * Fixed the link to the Jaeger dashboard the in viz dashboard (thanks\n    @eugenegoncharuk!)\n  * Updated linkerd-jaeger's collector to expose port 4318 in order support HTTP\n    alongside gRPC (thanks @uralsemih!)\n\n* Among other dependency updates, the no-longer maintained ghodss/yaml library\n  was replaced with sigs.k8s.io/yaml (thanks @Juneezee!)\n\nThis release includes changes from a massive list of contributors! A special\nthank-you to everyone who helped make this release possible:\n\n* Andrew Pinkham [@jambonrose](https://github.com/jambonrose)\n* Arnaud Beun [@bunnybilou](https://github.com/bunnybilou)\n* Carlos Tadeu Panato Junior [@cpanato](https://github.com/cpanato)\n* Christian Segundo [@someone-stole-my-name](https://github.com/someone-stole-my-name)\n* Dani Baeyens [@danibaeyens](https://github.com/danibaeyens)\n* Duc Tran [@ductnn](https://github.com/ductnn)\n* Eng Zer Jun [@Juneezee](https://github.com/Juneezee)\n* Ivan Ivic [@Tyrion85](https://github.com/Tyrion85)\n* Joe Bowbeer [@joebowbeer](https://github.com/joebowbeer)\n* Jonathan Ogilvie [@jcogilvie](https://github.com/jcogilvie)\n* Jun [@junnplus](https://github.com/junnplus)\n* Loong Dai [@daixiang0](https://github.com/daixiang0)\n* María Teresa Rojas [@mtrojas](https://github.com/mtrojas)\n* Mo Sattler [@MoSattler](https://github.com/MoSattler)\n* Oleg Vorobev [@olegy2008](https://github.com/olegy2008)\n* Paul Balogh [@javaducky](https://github.com/javaducky)\n* Peter Smit [@psmit](https://github.com/psmit)\n* Ryan Hristovski [@ryanhristovski](https://github.com/ryanhristovski)\n* Semih Ural [@uralsemih](https://github.com/uralsemih)\n* Shubhodeep Mukherjee [@shubhodeep9](https://github.com/shubhodeep9)\n* Siddharth S Pal [@siddharthshubhampal](https://github.com/siddharthshubhampal)\n* Subhash Choudhary [@subhashchy](https://github.com/subhashchy)\n* Szymon Grzemski [@sgrzemski](https://github.com/sgrzemski)\n* Takumi Sue [@mikutas](https://github.com/mikutas)\n* Yannick Utard [@utay](https://github.com/utay)\n* Yu Cao [@yc185050](https://github.com/yc185050)\n* anoxape [@anoxape](https://github.com/anoxape)\n* bastienbosser [@bastienbosser](https://github.com/bastienbosser)\n* bitfactory-sem-denbroeder [@bitfactory-sem-denbroeder](https://github.com/bitfactory-sem-denbroeder)\n* cui fliter [@cuishuang](https://github.com/cuishuang)\n* eugenegoncharuk [@eugenegoncharuk](https://github.com/eugenegoncharuk)\n* h-dav @[h-dav](https://github.com/h-dav)\n* martinkubrak [@martinkubra](https://github.com/martinkubra)\n* verbotenj [@verbotenj](https://github.com/verbotenj)\n* ziollek [@ziollek](https://github.com/ziollek)\n\n[dynamic request routing]: https://linkerd.io/2.13/tasks/configuring-dynamic-request-routing\n[circuit breaking]: https://linkerd.io/2.13/tasks/circuit-breakers\n[new proxy metrics]: https://linkerd.io/2.13/reference/proxy-metrics/#outbound-xroute-metrics\n[upgrade-2130]: https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2130\n\n## edge-23.4.1\n\nThis is a release candidate for stable-2.13.0 &mdash; we encourage you to help\ntry it out!\n\nThis edge release introduces request-level HTTP circuit-breaking\nusing a consecutive failures failure accrual policy. Circuit breaking can be\nconfigured by adding failure accrual annotations to a Service. In addition, this\nrelease adds new `outbound_route_backend_http_requests_total` and\n`outbound_route_backend_grpc_requests_total` proxy metrics, which can be\nused to track how routing rules and backend distributions apply to\nrequests. These metrics contain labels describing the route's parent\n(i.e. a Service), the route resource being used, and the backend\nresource being used by each request.\n\n* Proxy\n  * Added discovery of failure accrual policies from the OutboundPolicy API\n  * Implemented consecutive failures failure accrual policy\n  * Added INFO-level logging on failure accrual changes\n  * Added `outbound_route_backend_http_requests_total` and\n    `outbound_route_backend_grpc_requests_total` metrics\n\n* Policy Controller\n  * Added failure accrual configuration to the OutboundPolicy API\n  * Added Prometheus `/metrics` endpoint to the admin server, with process\n    metrics\n  * Changed the policy controller to only accept HTTPRoutes when the parentRef\n    is a ClusterIP Service\n  * Added ports to service references in the OutboundPolicy API\n\n* Viz\n  * Added `tap.ignoredHeaders` Helm value to the linkerd-viz chart. This value\n    allows users to specify a comma-separated list of header names which will be\n    ignored by Linkerd Tap (thanks @ryanhristovski!)\n  * Removed duplicate SecurityContext in Prometheus manifest\n\n* Multicluster\n  * Removed duplicate AuthorizationPolicy for probes from the multicluster\n    gateway Helm chart\n\n## edge-23.3.4\n\nThis edge release further enhances the OutboundPolicies API used by the proxy to\nroute outbound traffic, and continues extending the HTTPRoute resource's Status\nfield. It also starts integrating circuit-breaking functionality into the proxy,\nwhich will be configurable in a subsequent iteration.\n\n* Continued iterating on the HTTPRoute's Status field, by extending support for\n  routes parented to Services, and adding a ResolvedRefs condition reflecting\n  the status of BackendRefs\n* Updated the OutboundPolicies API such that only HTTPRoutes with an Accepted\n  status of `true` are considered when routing outbound requests\n* Improved handling of invalid backends, allowing the configuration of error\n  responses\n* Added new flag `--viz-namespace` which avoids requiring permissions for\n  listing all namespaces in `linkerd viz` subcommands (thanks @danibaeyens!)\n* Among other dependency updates, the no-longer maintained ghodss/yaml library\n  was replaced with sigs.k8s.io/yaml (thanks @Juneezee!)\n\n## edge-23.3.3\n\nThis edge release removes TrafficSplits from the Linkerd dashboard as well as\nfixing a number of issues in the policy controller.\n\n* Removed the TrafficSplit page from the Linkerd viz dashboard\n* Fixed an issue where the policy controller was not returning the correct\n  status for non-Service authorities\n* Fixed an issue where the policy controller could use large amounts of CPU\n  when lease API calls failed\n\n## edge-23.3.2\n\nThis edge release continues to improve dynamic Policy statuses and\nintroduces support for header-based routing.\n\n* Destination Controller\n  * Added OutboundPolicies API, for use by `linkerd-proxy` to route\n    outbound traffic\n  * Improved diagnostic log messages\n  * Fixed sending of spurious profile updates\n\n* Proxy\n  * Use the new OutboundPolicies API, supporting Gateway API-style routes\n    in the outbound proxy\n\n* Policy Controller\n  * Support highly available Policy Controller by utilizing\n   `policy-controller-write` Lease when patching HTTPRoutes\n  * Consider the `status` field and filter out HTTPRoutes which have not\n    been accepted\n\n* Added KubeAPI server ports to `ignoreOutboundPorts` of `proxy-injector`\n* Updated HTTPRoute version from `v1alpha1` to `v1beta2`\n* Updated `network-validator` helm charts to use `proxy-init` resources\n* Fixed Grafana regular expression, enabling monitoring of filesystem\n  usage (thanks @h-dav!)\n\n## edge-23.3.1\n\nThis edge release continues to build support under the hood for the upcoming\nfeatures in 2.13. Also included are several dependency updates and less verbose\nlogging.\n\n* Removed dependency on the `curlimages/curl` 3rd-party image used to initialize\n  extensions namespaces metadata (so they are visible by `linkerd check`),\n  replaced by the new `extension-init` image\n* Lowered non-actionable error messages in the Destination log to debug-level\n  entries to avoid triggering false alarms (thanks @siddharthshubhampal!)\n\n## edge-23.2.3\n\nThis edge release includes a number of fixes and introduces a new CLI command,\n`linkerd prune`. The new `prune` command should be used to remove resources\nwhich are no longer part of the Linkerd manifest when doing an upgrade.\nPreviously, the recommendation was to use `linkerd upgrade` in conjunction with\n`kubectl apply --prune`, however, that will not remove resources which are not\npart of the input manifest, and it will not detect cluster scoped resources,\n`linkerd prune` (included in all core extensions) should be preferred over it.\n\nAdditionally, this change contains a few fixes from our external contributors,\nand a change to the `viz` Helm chart which allows for arbitrary annotations on\n`Service` objects. Last but not least, the release contains a few proxy\ninternal changes to prepare for the new client policy API.\n\n* Added a new `linkerd prune` command to the CLI (including extensions) to\n  remove resources which are no longer part of Linkerd's manifests\n* Introduced new values in the `viz` chart to allow for arbitrary annotations\n  on the `Service` objects (thanks @sgrzemski!)\n* Fixed up a comment in k8s API wrapper (thanks @ductnn!)\n* Fixed an issue with EndpointSlice endpoint reconciliation on slice deletion;\n  when using more than one slice, a `NoEndpoints` event would be sent to the\n  proxy regardless of the amount of endpoints that were still available (thanks\n  @utay!)\n\n## edge-23.2.2\n\nThis edge release adds the policy status controller which writes the `status`\nfield to HTTPRoutes when a parent reference Server accepts or rejects the\nHTTPRoute. This field is currently not consumed by the policy controller, but\nacts as the first step for considering HTTPRoute `status` when serving policy.\n\nAdditionally, the destination controller now uses the Kubernetes metadata API\nfor resources which it only needs to track the metadata for — Nodes and\nReplicaSets. For all other resources it tracks, it uses additional information\nso continues to use the API as before.\n\n* Fixed error message to include the colliding Server in the policy controller's\n  admission webhook validation\n* Updated wording for linkerd-multicluster cluster when it fails to probe a\n  remote gateway mirror\n* Removed unnecessary Namespaces access from the destination controller RBAC\n* Added Kubernetes metadata API in the destination controller for watching Nodes\n  and ReplicaSets\n* Fixed QueryParamMatch parsing for HTTPRoutes\n* Added the policy status controller which writes the `status` field to\n  HTTPRoutes when a parent reference Server accepts or rejects it\n\n## edge-23.2.1\n\nThis edge release sees the `linkerd-cni` plugin moved to\n`linkerd2-proxy-init` and released from that repository. An iptables\nimprovement to `linkerd-cni` and `proxy-init` is the main focus. Other\nminor fixes are also included.\n\n* Changed `proxy-init` iptables rules to be idempotent upon init pod\n  restart (thanks @jim-minter!)\n* Improved logging in `proxy-init` and `linkerd-cni`\n* Added the server_port_subscribers metric to track the number of subscribers\n  to Server changes associated with a pod's port\n* Added the service_subscribers metric to track the number of subscribers to\n  Service changes\n* Fixed a small memory leak in the opaque ports watcher\n* No longer apply `waitBeforeExitSeconds` to control plane, viz and jaeger\n  extension pods\n* Added support for the `internalTrafficPolicy` of a service (thanks @yc185050!)\n* Added `limits` and `requests` to network-validator for ResourceQuota interop\n* Added block chomping to strip trailing new lines in ConfigMap (thanks @avdicl!)\n* Added multicluster gateway `nodeSelector` and `tolerations` helm parameters\n* Added protection against nil dereference in resources helm template\n\n## edge-23.1.2\n\nThis edge release fixes a memory leak in the Linkerd control plane that could\noccur when many many pods were created. It also adds a number of new\nconfiguration options Multicluster extension's gateway.\n\n* Added additional shortnames for Linkerd policy resources (thanks @javaducky!)\n* Added new configuration options for the multicluster gateway:\n  * `gateway.deploymentAnnotations`\n  * `gateway.terminationGracePeriodSeconds` (thanks @bunnybilou!)\n  * `gateway.loadBalancerSourceRanges` (thanks @Tyrion85!)\n* Added an optional AuthorizationPolicy to authorize Grafana to Prometheus\n  in the Viz extension\n* Fixed the link to the Jaeger dashboard the in viz dashboard (thanks @eugenegoncharuk!)\n* Fixed an issue where control plane components could fail to start on large\n  clusters because of failing readiness probes while caches were being\n  initialized\n* Fixed a memory leak in the Destination controller\n* Fixed an issue where PodSecurityPolicies could reject Linkerd control plane\n  components due to the `seccompProfile`\n\n## edge-23.1.1\n\nThis edge release fixes a caching issue in the destination controller, converts\ndeprecated policy resources, and introduces several changes to how the proxy\nworks.\n\nA bug in the destination controller that could potentially lead to stale pods\nbeing considered in the load balancer has been fixed.\n\nSeveral Linkerd extensions were still using the now deprecated\nServerAuthorization resource. These instances have now been converted to using\nAuthorizationPolicy. Additionally, removed several policy resources that\nauthenticated probes, since probes are now authenticated by default.\n\nAs part of ongoing policy work, there are several changes with how the proxy\nworks. Routes are now lazily initialized so that service profile routes will\nnot show up in metrics until the route is used. Furthermore, the proxy’s\ntraffic splitting behavior has changed so that only available resources are\nused, resulting in less failfast errors.\n\nFinally, this edge release contains a number of fixes and improvements from our\ncontributors.\n\n* Converted `ServerAuthorization` resources to `AuthorizationPolicy` resources\n  in Linkerd extensions\n* Removed policy resources bound to admin servers in extensions (previously\n  these resources were used to authorize probes but now are authorized by\n  default)\n* Added a `resources` field in the linkerd-cni chart (thanks @jcogilvie!)\n* Fixed an issue in the CLI where `--identity-external-ca` would set an\n  incorrect field (thanks @anoxape!)\n* Fixed an issue in the destination controller's cache that could result in\n  stale endpoints when using EndpointSlice objects\n* Added namespace to namespace-metadata resources in Helm (thanks @joebowbeer!)\n* Added support for Pod Security Admission (Pod Security Policy resources are\n  still supported but disabled by default)\n* Changed routes to be initialized lazily. Service Profile routes will no\n  longer show up in metrics until the route is used (default routes are always\n  available when no Service Profile is defined for a service)\n* Changed the proxy's behavior when traffic splitting so that only services\n  that are not in failfast are used. This will enable the proxy to manage\n  failover without external coordination\n* Updated tokio (async runtime) in the proxy which should reduce CPU usage,\n  especially for proxy's pod local (i.e in the same network namespace)\n  communication\n* Fixed an issue where `linkerd viz tap` would display wrong latency/duration\n  value (thanks @olegy2008!)\n\n## edge-22.12.1\n\nThis edge release introduces static and dynamic port overrides for CNI eBPF\nsocket-level load balancing. In certain installations when CNI plugins run in\neBPF mode, socket-level load balancing rewrites packet destinations to port\n6443; as with 443 already, this port is now skipped as well on control plane\ncomponents so that they can communicate with the Kubernetes API before their\nproxies are running.\n\nAdditionally, a potential panic and false warning have been fixed in the\ndestination controller.\n\n* Updated linkerd-jaeger's collector to expose port 4318 in order support HTTP\n  alongside gRPC (thanks @uralsemih!)\n* Added a `proxyInit.privileged` setting to control whether the `proxy-init`\n  initContainer runs as a privileged process\n* Fixed a potential panic in the destination controller caused by concurrent\n  writes when dealing with Endpoint updates\n* Fixed false warning when looking up HostPort mappings on Pods\n* Added static and dynamic port overrides for CNI eBPF to work with socket-level\n  load balancing\n\n## edge-22.11.3\n\nThis edge release fixes connection errors to pods that use `hostPort`\nconfigurations. The CNI `network-validator` init container features\nimproved error logging, and the default `linkerd-cni` DaemonSet\nconfiguration is updated to tolerate all node taints so that the CNI\nruns on all nodes in a cluster.\n\n* Fixed `destination` service to properly discover targets using a `hostPort`\n  different than their `containerPort`, which was causing 502 errors\n* Upgraded the `network-validator` with better logging allowing users to\n  determine whether failures occur as a result of their environment or the tool\n  itself\n* Added default `Exists` toleration to the `linkerd-cni` DaemonSet, allowing it\n  to be deployed in all nodes by default, regardless of taints\n\n## edge-22.11.2\n\nThis edge release introduces the use of the Kubernetes metadata API in the\nproxy-injector and tap-injector components. This can reduce the IO and memory\nfootprint for those components as they now only need to track the metadata for\ncertain resources, rather than the entire resource itself. Similar changes will\nbe made for the destination component in an upcoming release.\n\n* Bumped HTTP dependencies to fix a potential deadlock in HTTP/2 clients\n* Changed the proxy-injector and tap-injector components to use the metadata API\n  which should result in less memory consumption\n\n## edge-22.11.1\n\nThis edge releases ships a few fixes in Linkerd's dashboard, and the\nmulticluster extension. Additionally, a regression has been fixed in the CLI\nthat blocked upgrades from versions older than 2.12.0, due to missing CRDs\n(even if the CRDs were present in-cluster). Finally, the release includes\nchanges to the helm charts to allow for arbitrary (user-provided) labels on\nLinkerd workloads.\n\n* Fixed an issue in the CLI where upgrades from any version prior to\n  stable-2.12.0 would fail when using the `--from-manifest` flag\n* Removed un-injectable namespaces, such as kube-system from unmeshed resource\n  notification in the dashboard (thanks @MoSattler!)\n* Fixed an issue where the dashboard would respond to requests with 404 due to\n  wrong root paths in the HTML script (thanks @junnplus!)\n* Removed the proxyProtocol field in the multicluster gateway policy; this has\n  the effect of changing the protocol from 'HTTP/1.1' to 'unknown' (thanks\n  @psmit!)\n* Fixed the multicluster gateway UID when installing through the CLI, prior to\n  this change the 'runAsUser' field would be empty\n* Changed the helm chart for the control plane and all extensions to support\n  arbitrary labels on resources (thanks @bastienbosser!)\n\n## edge-22.10.3\n\nThis edge release adds `network-validator`, a new init container to be used when\nCNI is enabled. `network-validator` ensures that local iptables rules are\nworking as expected. It will validate this before linkerd-proxy starts.\n`network-validator` replaces the `noop` container, runs as `nobody`, and drops\nall capabilities before starting.\n\n* Validate CNI `iptables` configuration during pod startup\n* Fix \"cluster networks contains all services\" fails with services with no\n  ClusterIP\n* Remove kubectl version check from `linkerd check` (thanks @ziollek!)\n* Set `readOnlyRootFilesystem: true` in viz chart (thanks @mikutas!)\n* Fix `linkerd multicluster install` by re-adding `pause` container image\n  in chart\n* linkerd-viz have hardcoded image value in namespace-metadata.yml template\n  bug correction (thanks @bastienbosser!)\n\n## edge-22.10.2\n\nThis edge release fixes an issue with CNI chaining that was preventing the\nLinkerd CNI plugin from working with other CNI plugins such as Cilium. It also\nincludes several other fixes.\n\n* Updated Grafana dashboards to use variable duration parameter so that they can\n  be used when Prometheus has a longer scrape interval (thanks @TarekAS)\n* Fixed handling of .conf files in the CNI plugin so that the Linkerd CNI plugin\n  can be used alongside other CNI plugins such as Cilium\n* Added a `linkerd diagnostics policy` command to inspect Linkerd policy state\n* Added a check that ClusterIP services are in the cluster networks\n* Added a noop init container to injected pods when the CNI plugin is enabled\n  to prevent certain scenarios where a pod can get stuck without an IP address\n* Fixed a bug where the`config.linkerd.io/proxy-version` annotation could be empty\n\n## edge-22.10.1\n\nThis edge release fixes some sections of the Viz dashboard appearing blank, and\nadds an optional PodMonitor resource to the Helm chart to enable easier\nintegration with the Prometheus Operator. It also includes many fixes submitted\nby our contributors.\n\n* Fixed the dashboard sections Tap, Top, and Routes appearing blank (thanks\n  @MoSattler!)\n* Added an optional PodMonitor resource to the main Helm chart (thanks\n  @jaygridley!)\n* Fixed the CLI ignoring the `--api-addr` flag (thanks @mikutas!)\n* Expanded the `linkerd authz` command to display AuthorizationPolicy resources\n  that target namespaces (thanks @aatarasoff!)\n* Fixed the `NotIn` label selector operator in the policy resources, being\n  erroneously treated as `In`.\n* Fixed warning logic around the \"linkerd-viz ClusterRoles exist\" and\n  \"linkerd-viz ClusterRoleBindings exist\" checks in `linkerd viz check`\n* Fixed proxies emitting some duplicate inbound metrics\n\n## stable-2.12.1\n\nThis release includes several control plane and proxy fixes for `stable-2.12.0`.\nIn particular, it fixes issues related to control plane HTTP servers' header\nread timeouts resulting in decreased controller success rates, lowers the\ninbound connection pool idle timeout in the proxy, and fixes an issue where the\njaeger injector would put pods into an error state when upgrading from\nstable-2.11.x.\n\nAdditionally, this release adds the `linkerd.io/trust-root-sha256` annotation to\nall injected workloads allowing predictable comparison of all workloads' trust\nanchors via the Kubernetes API.\n\nFor Windows users, note that the Linkerd CLI's `nupkg` file for Chocolatey is\nonce again included in the release assets (it was previously removed in\nstable-2.10.0).\n\n* Proxy\n  * Lowered inbound connection pool idle timeout to 3s\n\n* Control Plane\n  * Updated AdmissionRegistration API version usage to v1\n  * Added `linkerd.io/trust-root-sha256` annotation on all injected workloads\n    to indicate certifcate bundle\n  * Updated fields in `AuthorizationPolicy` and `MeshTLSAuthentication` to\n    conform to specification (thanks @aatarasoff!)\n  * Updated the identity controller to not require a `ClusterRoleBinding`\n    to read all deployment resources\n  * Increased servers' header read timeouts so they no longer match default\n    probe and Prometheus scrape intervals\n\n* Helm\n  * Restored `namespace` field in Linkerd helm charts\n  * Updated `PodDisruptionBudget` `apiVersion` from `policy/v1beta1` to\n    `policy/v1` (thanks @Vrx555!)\n\n* Extensions\n  * Fixed jaeger injector interfering with upgrades to 2.12.x\n\n## edge-22.9.2\n\nThis release fixes an issue where the jaeger injector would put pods into an\nerror state when upgrading from stable-2.11.x.\n\n* Updated AdmissionRegistration API version usage to v1\n* Fixed jaeger injector interfering with upgrades to 2.12.x\n\n## edge-22.9.1\n\nThis release adds the `linkerd.io/trust-root-sha256` annotation to all injected\nworkloads allowing predictable comparison of all workloads' trust anchors via\nthe Kubernetes API.\n\nAdditionally, this release lowers the inbound connection pool idle timeout to\n3s. This should help avoid socket errors, especially for Kubernetes probes.\n\n* Added `linkerd.io/trust-root-sha256` annotation on all injected workloads\n  to indicate certifcate bundle\n* Lowered inbound connection pool idle timeout to 3s\n* Restored `namespace` field in Linkerd helm charts\n* Updated fields in `AuthorizationPolicy` and `MeshTLSAuthentication` to\n  conform to specification (thanks @aatarasoff!)\n* Updated the identity controller to not require a `ClusterRoleBinding`\n  to read all deployment resources.\n\n## edge-22.8.3\n\nIncreased control plane HTTP servers' read timeouts so that they no longer\nmatch the default probe intervals. This was leading to closed connections\nand decreased controller success rate.\n\n## stable-2.12.0\n\nThis release introduces route-based policy to Linkerd, allowing users to define\nand enforce authorization policies based on HTTP routes in a fully zero-trust\nway. These policies are built on Linkerd's strong workload identities, secured\nby mutual TLS, and configured using types from the Kubernetes [Gateway\nAPI](https://gateway-api.sigs.k8s.io/).\n\nThe 2.12 release also introduces optional request logging (\"access logging\"\nafter its name in webservers), optional support for `iptables-nft`, and a host\nof other improvements and performance enhancements.\n\nAdditionally, the `linkerd-smi` extension is now required to use TrafficSplit,\nand the installation process has been updated to separate management of the\nLinkerd CRDs from the main installation process. With the CLI, you'll need to\n`linkerd install --crds` before running `linkerd install`; with Helm, you'll\ninstall the new `linkerd-crds` chart, then the `linkerd-control-plane` chart.\nThese charts are now versioned using [SemVer](https://semver.org) independently\nof Linkerd releases. For more information, see the [upgrade\nnotes][upgrade-2120].\n\n**Upgrade notes**: Please see the [upgrade instructions][upgrade-2120].\n\n* Proxy\n  * Added a `config.linkerd.io/shutdown-grace-period` annotation to limit the\n    duration that the proxy may wait for graceful shutdown\n  * Added a `config.linkerd.io/access-log` annotation to enable logging of\n    workload requests\n  * Added a new `iptables-nft` mode for the `proxy-init` initContainer\n  * Added support for non-HTTP traffic forwarding within the mesh in `ingress`\n    mode\n  * Added the `/env.json` log diagnostic endpoint\n  * Added a new `process_uptime_seconds_total` metric to track proxy uptime in\n    seconds\n  * Added support for dynamically discovering policies for ports that are not\n    documented in a pod's `containerPorts`\n  * Added support for route-based inbound HTTP metrics\n    (`route_group`/`route_kind`/`route_name`)\n  * Added a new annotation to configure skipping subnets in the init container\n    (`config.linkerd.io/skip-subnets`), needed e.g. in Docker-in-Docker\n    workloads (thanks @michaellzc!)\n\n* Control Plane\n  * Added support for per-route policy by supporting AuthorizationPolicy\n    resources which can target HttpRoute or Server resources\n  * Added support for bound service account token volumes for the control plane\n    and injected workloads\n  * Removed kube-system exclusions from watchers to fix service discovery for\n    workloads in the kube-system namespace (thanks @JacobHenner!)\n  * Updated healthcheck to ignore `Terminated` state for pods (thanks\n    @AgrimPrasad!)\n  * Updated the default policy controller log level to `info`; the controller\n    will now emit INFO level logs for some of its dependencies\n  * Added probe authorization by default, allowing clusters that use a default\n    `deny` policy to not explicitly need to authorize probes\n  * Fixed an issue where the proxy-injector would break when using\n    `nodeAffinity` values for the control plane\n  * Fixed an issue where certain control plane components were not restarting as\n    necessary after a trust root rotation\n  * Removed SMI functionality in the default Linkerd installation; this is now\n    part of the `linkerd-smi` extension\n\n* CLI\n  * Fixed the `linkerd check` command crashing when unexpected pods are found in\n    a Linkerd namespace\n  * Updated the `linkerd authz` command to support AuthorizationPolicy and\n    HttpRoute resources\n  * Updated `linkerd check` to allow RSA signed trust anchors (thanks\n    @danibaeyens!)\n  * `linkerd install --crds` must be run before `linkerd install`\n  * `linkerd upgrade --crds` must be run before `linkerd upgrade`\n  * Fixed invalid yaml syntax in the viz extension's tap-injector template\n    (thanks @wc-s!)\n  * Fixed an issue where the `--default-inbound-policy` setting was not being\n    respected\n  * Added support for AuthorizationPolicy and HttpRoute to `viz authz` command\n  * Added support for AuthorizationPolicy and HttpRoute to `viz stat` command\n  * Added support for policy metadata in `linkerd viz tap`\n\n* Helm\n  * Split the `linkerd2` chart into `linkerd-crds` and `linkerd-control-plane`\n  * Charts are now versioned using [SemVer](https://semver.org) independently of\n    Linkerd releases\n  * Added missing port in the Linkerd viz chart documentation (thanks @haswalt!)\n  * Changed the `proxy.await` Helm value so that users can now disable\n    `linkerd-await` on control plane components\n  * Added the `policyController.probeNetworks` Helm value for configuring the\n    networks that probes are expected to be performed from\n\n* Extensions\n  * Added annotations to allow Linkerd extension deployments to be evicted by\n    the autoscaler when necessary\n  * Added ability to run the Linkerd CNI plugin in non-chained (stand-alone)\n    mode\n  * Added a ServiceAccount token Secret to the multicluster extension to support\n    Kubernetes versions >= v1.24\n\nThis release includes changes from a massive list of contributors, including\nengineers from Adidas, Intel, Red Hat, Shopify, Sourcegraph, Timescale, and\nothers. A special thank-you to everyone who helped make this release possible:\n\nAgrim Prasad [@AgrimPrasad](https://github.com/AgrimPrasad)\nAhmed Al-Hulaibi [@ahmedalhulaibi](https://github.com/ahmedalhulaibi)\nAleksandr Tarasov [@aatarasoff](https://github.com/aatarasoff)\nAlexander Berger [@alex-berger](https://github.com/alex-berger)\nAo Chen [@chenaoxd](https://github.com/chenaoxd)\nBadis Merabet [@badis](https://github.com/badis)\nBjørn [@Crevil](https://github.com/Crevil)\nBrian Dunnigan [@bdun1013](https://github.com/bdun1013)\nChristian Schlotter [@chrischdi](https://github.com/chrischdi)\nDani Baeyens [@danibaeyens](https://github.com/danibaeyens)\nDavid Symons [@multimac](https://github.com/multimac)\nDmitrii Ermakov [@ErmakovDmitriy](https://github.com/ErmakovDmitriy)\nElvin Efendi [@ElvinEfendi](https://github.com/ElvinEfendi)\nEvan Hines [@evan-hines-firebolt](https://github.com/evan-hines-firebolt)\nEng Zer Jun [@Juneezee](https://github.com/Juneezee)\nGustavo Fernandes de Carvalho [@gusfcarvalho](https://github.com/gusfcarvalho)\nHarry Walter [@haswalt](https://github.com/haswalt)\nIsrael Miller [@imiller31](https://github.com/imiller31)\nJack Gill [@jackgill](https://github.com/jackgill)\nJacob Henner [@JacobHenner](https://github.com/JacobHenner)\nJacob Lorenzen [@Jaxwood](https://github.com/Jaxwood)\nJoakim Roubert [@joakimr-axis](https://github.com/joakimr-axis)\nJosh Ault [@jault-figure](https://github.com/jault-figure)\nJoão Soares [@jasoares](https://github.com/jasoares)\njtcarnes [@jtcarnes](https://github.com/jtcarnes)\nKim Christensen [@kichristensen](https://github.com/kichristensen)\nKrzysztof Dryś [@krzysztofdrys](https://github.com/krzysztofdrys)\nLior Yantovski [@lioryantov](https://github.com/lioryantov)\nMartin Anker Have [@mahlunar](https://github.com/mahlunar)\nMichael Lin [@michaellzc](https://github.com/michaellzc)\nMichał Romanowski [@michalrom089](https://github.com/michalrom089)\nNaveen Nalam [@nnalam](https://github.com/nnalam)\nNick Calibey [@ncalibey](https://github.com/ncalibey)\nNikola Brdaroski [@nikolabrdaroski](https://github.com/nikolabrdaroski)\nOr Shachar [@or-shachar](https://github.com/or-shachar)\nPål-Magnus Slåtto [@dev-slatto](https://github.com/dev-slatto)\nRaman Gupta [@rocketraman](https://github.com/rocketraman)\nRicardo Gândara Pinto [@rmgpinto](https://github.com/rmgpinto)\nRoberth Strand [@roberthstrand](https://github.com/roberthstrand)\nSankalp Rangare [@sankalp-r](https://github.com/sankalp-r)\nSascha Grunert [@saschagrunert](https://github.com/saschagrunert)\nSteve Gray [@steve-gray](https://github.com/steve-gray)\nSteve Zhang [@zhlsunshine](https://github.com/zhlsunshine)\nTakumi Sue [@mikutas](https://github.com/mikutas)\nTanmay Bhat [@tanmay-bhat](https://github.com/tanmay-bhat)\nTáskai Dominik [@dtaskai](https://github.com/dtaskai)\nUjjwal Goyal [@importhuman](https://github.com/importhuman)\nWeichung Shaw [@wc-s](https://github.com/wc-s)\nWim de Groot [@wim-de-groot](https://github.com/wim-de-groot)\nYannick Utard [@utay](https://github.com/utay)\nYurii Dzobak [@yuriydzobak](https://github.com/yuriydzobak)\n罗泽轩 [@spacewander](https://github.com/spacewander)\n\n[upgrade-2120]: https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2120\n\n## stable-2.12.0-rc2\n\nThis release is the second release candidate for stable-2.12.0.\n\nAt this point the Helm charts can be retrieved from the stable repo:\n\n```sh\nhelm repo add linkerd https://helm.linkerd.io/stable\nhelm repo up\nhelm install linkerd-crds -n linkerd --create-namespace linkerd/linkerd-crds\nhelm install linkerd-control-plane \\\n  -n linkerd \\\n  --set-file identityTrustAnchorsPEM=ca.crt \\\n  --set-file identity.issuer.tls.crtPEM=issuer.crt \\\n  --set-file identity.issuer.tls.keyPEM=issuer.key \\\n  linkerd/linkerd-control-plane\n```\n\nThe following lists all the changes since edge-22.8.2:\n\n* Fixed inheritance of the `linkerd.io/inject` annotation from Namespace to\n  Workloads when its value is `ingress`\n* Added the `config.linkerd.io/default-inbound-policy: all-authenticated`\n  annotation to linkerd-multicluster’s Gateway deployment so that all clients\n  are required to be authenticated\n* Added a `ReadHeaderTimeout` of 10s to all the go `http.Server` instances, to\n  avoid being vulnerable to \"slowrolis\" attacks\n* Added check in `linkerd viz check --proxy` to warn in case namespace have the\n  `config.linkerd.io/default-inbound-policy: deny` annotation, which would not\n  authorize scrapes coming from the linkerd-viz Prometheus instance\n* Added validation for accepted values for the `--default-inbound-policy` flag\n* Fixed invalid URL in the `linkerd install --help` output\n* Added `--destination-pod` flag to `linkerd diagnostics endpoints` subcommand\n* Added `proxyInit.runAsUser` in `values.yaml` defaulting to non-zero, to\n  complement the new default `proxyInit.runAsRoot: false` that was rencently\n  changed\n\n## edge-22.8.2\n\nThis release is considered a release candidate for stable-2.12.0 and we\nencourage you to try it out! It includes an update to the multicluster extension\nwhich adds support for Kubernetes v1.24 and also updates many CLI commands to\nsupport the new policy resources: ServerAuthorization and HTTPRoute.\n\n* Updated linkerd check to allow RSA signed trust anchors (thanks @danibaeyens!)\n* Fixed some invalid yaml in the viz extension's tap-injector template (thanks @wc-s!)\n* Added support for AuthorizationPolicy and HttpRoute to viz authz command\n* Added support for AuthorizationPolicy and HttpRoute to viz stat\n* Added support for policy metadata in linkerd tap\n* Fixed an issue where certain control plane components were not restarting as\n  necessary after a trust root rotation\n* Added a ServiceAccount token Secret to the multicluster extension to support\n  Kubernetes versions >= v1.24\n* Fixed an issue where the --default-inbound-policy setting was not being\n  respected\n\n## edge-22.8.1\n\nThis releases introduces default probe authorization. This means that on\nclusters that use a default `deny` policy, probes do not have to be explicitly\nauthorized using policy resources. Additionally, the\n`policyController.probeNetworks` Helm value has been added, which allows users\nto configure the networks that probes are expected to be performed from.\n\nAdditionally, the `linkerd authz` command has been updated to support the policy\nresources AuthorizationPolicy and HttpRoute.\n\nFinally, some smaller changes include allowing to disable `linkerd-await` on\ncontrol plane components (using the existing `proxy.await` configuration) and\nchanging the default iptables mode back to `legacy` to support more cluster\nenvironments by default.\n\n* Updated the `linkerd authz` command to support AuthorizationPolicy and\n  HttpRoute resources\n* Changed the `proxy.await` Helm value so that users can now disable\n  `linkerd-await` on control plane components\n* Added probe authorization by default allowing clusters that use a default\n  `deny` policy to not explicitly need to authorize probes\n* Added ability to run the Linkerd CNI plugin in non-chained (stand-alone) mode\n* Added the `policyController.probeNetworks` Helm value for configuring the\n  networks that probes are expected to be performed from\n* Changed the default iptables mode to `legacy`\n\n## edge-22.7.3\n\nThis release adds a new `nft` iptables mode, used by default in proxy-init.\nWhen used, firewall configuration will be set-up through the `iptables-nft`\nbinary; this should allow hosts that do not support `iptables-legacy` (such as\nRHEL based environments) to make use of the init container. The older\n`iptables-legacy` mode is still supported, but it must be explictly turned on.\nMoreover, this release also replaces the `HTTPRoute` CRD with Linkerd's own\nversion, and includes a number of fixes and improvements.\n\n* Added a new `iptables-nft` mode for proxy-init. When running in this mode,\n  the firewall will be configured with `nft` kernel API; this should allow\n  users to run the init container on RHEL-family hosts\n* Fixed an issue where the proxy-injector would break when using `nodeAffinity`\n  values for the control plane\n* Updated healthcheck to ignore `Terminated` state for pods (thanks\n  @AgrimPrasad!)\n* Replaced `HTTRoute` CRD version from `gateway.networking.k8s.io` with a\n  similar version from the `policy.linkerd.io` API group. While the CRD is\n  similar, it does not support the `Gateway` type, does not contain the\n  `backendRefs` fields, and does not support `RequestMirror` and `ExtensionRef`\n  filter types.\n* Updated the default policy controller log level to `info`; the controller\n  will now emit INFO level logs for some of its dependencies\n* Added validation to ensure `HTTPRoute` paths are absolute; relative paths are\n  not supported by the proxy and the policy controller admission server will\n  reject any routes that use paths which do not start with `/`\n\n## edge-22.7.2\n\nThis release adds support for per-route authorization policy using the\nAuthorizationPolicy and HttpRoute resources. It also adds a configurable\nshutdown grace period to the proxy which can be used to ensure that proxy\ngraceful shutdown completes within a certain time, even if there are outstanding\nopen connections.\n\n* Removed kube-system exclusions from watchers to fix service discovery for\n  workloads in the kube-system namespace (thanks @JacobHenner!)\n* Added annotations to allow Linkerd extension deployments to be evicted by the\n  autoscaler when necessary\n* Added missing port in the Linkerd viz chart documentation (thanks @haswalt!)\n* Added support for per-route policy by supporting AuthorizationPolicy resources\n  which target HttpRoute resources\n* Fixed the `linkerd check` command crashing when unexpected pods are found in\n  a Linkerd namespace\n* Added a `config.linkerd.io/shutdown-grace-period` annotation to configure the\n  proxy's maximum grace period for graceful shutdown\n\n## edge-22.7.1\n\nThis release includes a security improvement. When a user manually specified the\n`policyValidator.keyPEM` setting, the value was incorrectly included in the\n`linkerd-config` configmap. This means that this private key was erroneously\nexposed to service accounts with read access to this configmap. Practically,\nthis means that the Linkerd `proxy-injector`, `identity`, and `heartbeat` pods\ncould read this value. This should **not** have exposed this private key to\nother unauthorized users unless additional role bindings were added outside of\nLinkerd. Nevertheless, we recommend that users who manually set control plane\ncertificates update the credentials for the policy validator after upgrading\nLinkerd.\n\nAdditionally, the linkerd-multicluster extensions has several fixes related to\nfail fast errors during link watch restarts, improper label matching for\nmirrored services, and properly cleaning up mirrored endpoints in certain\nsituations.\n\nLastly, the proxy can now retry gRPC requests that have responses with a\nTRAILERS frame. A fix to reduce redundant load balancer updates should also\nresult in less connection churn.\n\n* Changed unit tests to use newly introduced `prommatch` package for asserting\n  expected metrics (thanks @krzysztofdrys!)\n* Fixed Docker container runtime check to only during `linkerd install` rather\n  than `linkerd check --pre`\n* Changed linkerd-multicluster's remote cluster watcher to assume the gateway is\n  alive when starting—fixing fail fast errors from occurring during restarts\n  (thanks @chenaoxd!)\n* Added `matchLabels` and `matchExpressions` to linkerd-multicluster's Link CRD\n* Fixed linkerd-multicluster's label selector to properly select resources that\n  match the expected label value, rather than just the presence of the label\n* Fixed linkerd-multicluster's cluster watcher to properly clean up endpoints\n  belonging to remote headless services that are no longer mirrored\n* Added the HttpRoute CRD which will be used by future policy features\n* Fixed CNI plugin event processing where file updates could sometimes be\n  skipped leading to the update not being acknowledged\n* Fixed redundant load balancer updates in the proxy that could cause\n  unnecessary connection churn\n* Fixed gRPC request retries for responses that contain a TRAILERS frame\n* Fixed the dashboard's `linkerd check` due to missing RBAC for listing pods in\n  the cluster\n* Fixed API check that ensures access to the Server CRD (thanks @aatarasoff!)\n* Changed `linkerd authz` to match the labels of pre-fetched Pods rather than\n  the multiple API calls it was doing—resulting in significant speed-up (thanks\n  @aatarasoff!)\n* Unset `policyValidtor.keyPEM` in `linkerd-config` ConfigMap\n\n## edge-22.6.2\n\nThis edge release bumps the minimum supported Kubernetes version from `v1.20`\nto `v1.21`, introduces some new changes, and includes a few bug fixes. Most\nnotably, a bug has been fixed in the proxy's outbound load balancer that could\ncause panics, especially when the balancer would process many service discovery\nupdates in a short period of time. This release also fixes a panic in the\nproxy-injector, and introduces a change that will include HTTP probe ports in\nthe proxy's inbound ports configuration, to be used for policy discovery.\n\n* Fixed a bug in the proxy's outbound load balancer that could cause panics\n  when many discovery updates were processed in short time periods\n* Added `runtimeClassName` options to Linkerd's Helm chart (thanks @jtcarnes!)\n* Introduced a change in the proxy-injector that will configure the inbound\n  ports proxy configuration with the pod's probe ports (HTTPGet)\n* Added godoc links in the project README file (thanks @spacewander!)\n* Increased minimum supported Kubernetes version to `v1.21` from `v1.20`\n* Fixed an issue where the proxy-injector would not emit events for resources\n  that receive annotation patches but are skipped for injection\n* Refactored `PublicIPToString` to handle both IPv4 and IPv6 addresses in a\n  similar behavior (thanks @zhlsunshine!)\n* Replaced the usage of branch with tags, and pinned `cosign-installer` action\n  to `v1` (thanks @saschagrunert!)\n* Fixed an issue where the proxy-injector would panic if resources have an\n  unsupported owner kind\n\n## edge-22.6.1\n\nThis edge release fixes an issue where Linkerd injected pods could not be\nevicted by Cluster Autoscaler. It also adds the `--crds` flag to `linkerd check`\nwhich validates that the Linkerd CRDs have been installed with the proper\nversions.\n\nThe previously noisy \"cluster networks can be verified\" check has been replaced\nwith one that now verifies each running Pod IP is contained within the current\n`clusterNetworks` configuration value.\n\nAdditionally, linkerd-viz is no longer required for linkerd-multicluster's\n`gateways` command — allowing the `Gateways` API to marked as deprecated for\n2.12.\n\nFinally, several security issues have been patched in the Docker images now that\nthe builds are pinned only to minor — rather than patch — versions.\n\n* Replaced manual IP address parsing with functions available in the Go standard\n  library (thanks @zhlsunshine!)\n* Removed linkerd-multicluster's `gateway` command dependency on the linkerd-viz\n  extension\n* Fixed issue where Linkerd injected pods were prevented from being evicted by\n  Cluster Autoscaler\n* Added the `dst_target_cluster` metric to linkerd-multicluster's service-mirror\n  controller probe traffic\n* Added the `--crds` flag to `linkerd check` which validates that the Linkerd\n  CRDs have been installed\n* Removed the Docker image's hardcoded patch versions so that builds pick up\n  patch releases without manual intervention\n* Replaced the \"cluster networks can be verified check\" check with a \"cluster\n  networks contains all pods\" check which ensures that all currently running Pod\n  IPs are contained by the current `clusterNetworks` configuration\n* Added IPv6 compatible IP address generation in certain control plane\n  components that were only generating IPv4 (thanks @zhlsunshine!)\n* Deprecated linkerd-viz's `Gateways` API which is no longer used by\n  linkerd-multicluster\n* Added the `promm` package for making programatic Prometheus assertions in\n  tests (thanks @krzysztofdrys!)\n* Added the `runAsUser` configuration to extensions to fix a PodSecurityPolicy\n  violation when CNI is enabled\n\n## edge-22.5.3\n\nThis edge release fixes a few proxy issues, improves the upgrade process, and\nintroduces proto retries to Service Profiles. Also included are updates to the\nbash scripts to ensure that they follow best practices.\n\n* Polished the shell scripts (thanks @joakimr-axis)\n* Introduced retries to Service Profiles based on the idempotency option of the\n  method by adding an isRetryable function to the proto definition\n (thanks @mahlunar)\n* Fixed proxy responses to CONNECT requests by removing the content-length\n  and/or transfer-encoding headers from the response\n* Fixed DNS lookups in the proxy to consistently use A records when SRV records\n  cannot be resolved\n* Added dynamic policy discovery to the proxy by evaluating traffic on ports\n  not included in the LINKERD2_PROXY_INBOUND_PORTS environment variable\n* Added logic to require that the linkerd CRDs are installed when running\n  the `linkerd upgrade` command\n\n## edge-22.5.2\n\nThis edge release ships a few changes to the chart values, a fix for\nmulticluster headless services, and notable proxy features. HA functionality,\nsuch as PDBs, deployment strategies, and pod anti-affinity, have been split\nfrom the HA values and are now configurable for the control plane. On the proxy\nside, non-HTTP traffic will now be forwarded on the outbound side within the\ncluster when the proxy runs in ingress mode.\n\n* Updated `ingress-mode` proxies to forward non-HTTP traffic within the cluster\n  (protocol detection will always be attempted for outbound connections)\n* Added a new proxy metric `process_uptime_seconds_total` to keep track of the\n  number of seconds since the proxy started\n* Fixed an issue with multicluster headless service mirroring, where exported\n  endpoints would be mirrored with a delay, or when changes to the export label\n  would be ignored\n* Split HA functionality, such as PodDisruptionBudgets, into multiple\n  configurable values (thanks @evan-hines-firebolt for the initial work)\n\n## edge-22.5.1\n\nThis edge release adds more flexibility to the MeshTLSAuthentication and\nAuthorizationPolicy policy resources by allowing them to target entire\nnamespaces. It also fixes a race condition when multiple CNI plugins are\ninstalled together as well as a number of other bug fixes.\n\n* Added support for MeshTLSAuthentication resources to target an entire\n  namespace, authenticating all ServiceAccounts in that namespace\n* Fixed a panic in `linkerd install` when the `--ignore-cluster` flag is passed\n* Fixed issue where pods would fail to start when `enablePSP` and\n  `proxyInit.runAsRoot` are set\n* Added support for AuthorizationPolicy resources to target namespaces, applying\n  to all Servers in that namespace\n* Fixed a race condition where the Linkerd CNI configuration could be\n  overwritten when multiple CNI plugins are installed\n* Added test for opaque ports using Service and Pod IPs (thanks @krzysztofdrys!)\n* Fixed an error in the linkerd-viz Helm chart in HA mode\n\n## edge-22.4.1\n\nIn order to support having custom resources in the default Linkerd installation,\nthe CLI install flow is now always a 2-step process where `linkerd install\n--crds` must be run first to install CRDs only and then `linkerd install` is run\nto install everything else. This more closely aligns the CLI install flow with\nthe Helm install flow where the CRDs are a separate chart. This also applies to\n`linkerd upgrade`. Also, the `config` and `control-plane` sub-commands have been\nremoved from both `linkerd install` and `linkerd upgrade`.\n\nOn the proxy side, this release fixes an issue where proxies would not honor the\ncluster's opaqueness settings for non-pod/service addresses. This could cause\nprotocol detection to be peformed, for instance, when using off-cluster\ndatabases.\n\nThis release also disables the use of regexes in Linkerd log filters (i.e., as\nset by `LINKERD2_PROXY_LOG`). Malformed log directives could, in theory, cause a\nproxy to stop responding.\n\nThe `helm.sh/chart` label in some of the CRDs had its formatting fixed, which\navoids issues when installing/upgrading through external tools that make use of\nit, such as recent versions of Flux.\n\n* Added `--crds` flag to install/upgrade and remove config/control-plane stages\n* Allowed the `AuthorizationPolicy` CRD to have an empty\n  `requiredAuthenticationRefs` entry that allows all traffic\n* Introduced `nodeAffinity` config in all the charts for enhanced control on the\n  pods scheduling (thanks @michalrom089!)\n* Introduced `resources`, `nodeSelector` and `tolerations` configs in the\n  `linkerd-multicluster-link` chart for enhanced control on the service mirror\n  deployment (thanks @utay!)\n* Fixed formatting of the `helm.sh/chart` label in CRDs\n* Updated container base images from buster to bullseye\n* Added support for spaces in the `config.linkerd.io/opaque-ports` annotation\n\n## edge-22.3.5\n\nThis edge release introduces new policy CRDs that allow for more generalized\nauthorization policies.\n\nThe `AuthorizationPolicy` CRD authorizes clients that satisfy all the required\nauthentications to communicate with the Linkerd `Server` that it targets.\nRequired authentications are specified through the new `MeshTLSAuthentication`\nand `NetworkAuthentication` CRDs.\n\nA `MeshTLSAuthentication` defines a list of authenticated client IDs—specified\ndirectly by proxy identity strings or referencing resources such as\n`ServiceAccount`s.\n\nA `NetworkAuthentication` defines a list of client networks that will be\nauthenticated.\n\nAdditionally, to support the new CRDs, policy-related labels have been changed\nto better categorize policy metrics. A `srv_kind` label has been introduced\nwhich splits the current `srv_name` value—formatted as `kind:name`—into separate\nlabels. The `saz_name` label has been removed and is replaced by the new\n`authz_kind` and `authz_name` labels.\n\n* Introduced the `srv_kind` label which allowed splitting the value of the\n  current `srv_name` label\n* Removed the `saz_name` label and replaced it with the new `authz_kind` and\n  `authz_name` labels\n* Fixed an issue in the destination controller where an update would not be sent\n  after an endpoint was discovered for a currently empty service\n* Introduced the following custom resource types to support generalized\n  authorization policies: `AuthorizationPolicy`, `MeshTLSAuthentication`,\n  `NetworkAuthentication`\n* Deprecated the `--proxy-version` flag (thanks @importhuman!)\n* Updated linkerd-viz to use new policy CRDs\n\n## edge-22.3.4\n\n* Disabled pprof endpoints on Linkerd control plane components by default\n* Fixed an issue where mirror service endpoints of headless services were always\n  ready regardless of gateway liveness\n* Added server side validation for ServerAuthorization resources\n* Fixed an \"origin not allowed\" issue when using the latest Grafana with the\n  Linkerd Viz extension\n\n## edge-22.3.3\n\nThis edge release ensures that in multicluster installations, mirror service\nendpoints have their readiness tied to gateway liveness. When the gateway for a\ntarget cluster is not alive, the endpoints that point to it on a source cluster\nwill properly indicate that they are not ready.\n\n* Fixed tap controller logging errors that were succeptible to log forgery by\n  ensuring special characters are escaped\n* Fixed issue where mirror service endpoints were always ready regardless of\n  gateway liveness\n* Removed unused `namespace` entry in `linkerd-control-plane` chart\n\n## edge-22.3.2\n\nThis edge release includes a few fixes and quality of life improvements. An\nissue has been fixed in the proxy allowing HTTP Upgrade requests to work\nthrough multi-cluster gateways, and the init container's resource limits and\nrequests have been revised. Additionally, more Go linters have been enabled and\nimprovements have been made to the devcontainer.\n\n* Changed `linkerd-init` resource (CPU/memory) limits and requests to ensure by\n  default the init container does not break a pod's `Guaranteed` QOS class\n* Added a new check condition to skip pods whose status is `NodeShutdown`\n  during validation as they will not have a proxy container\n* Fixed an issue that would prevent proxies from sending HTTP Upgrade requests\n  (used in websockets) through multi-cluster gateways\n\n## edge-22.3.1\n\nThis edge release includes updates to dependencies, CI, and rust 1.59.0. It also\nincludes changes to the `linkerd-jaeger` chart to ensure that namespace labels\nare preserved and adds support for `imagePullSecrets`, along with improvements\nto the multicluster and policy functionality.\n\n* Added note to `multicluster link` command to clarify that the link is\n  one-direction\n* Introduced `imagePullSecrets` to Jaeger Helm chart\n* Updated Rust to v1.59.0\n* Fixed a bug where labels can be overwritten in the `linkerd-jaeger` chart\n* Fix broken mirrored headles services after `repairEndpoints` runs\n* Updated `Server` CRD to handle an empty `PodSelector`\n\n## edge-22.2.4\n\nThis edge release continues to address several security related lints and\nensures they are checked by CI.\n\n* Add `linkerd check` warning for clusters that cannot verify their\n  `clusterNetworks` due to Nodes missing the `podCIDR` field\n* Changed `Server` CRD to allow having an empty `PodSelector`\n* Modified `linkerd inject` to only support `https` URLs to mitigate security\n  risks\n* Fixed potential goroutine leak in the port forwarding used by several CLI\n  commands and control plane components\n* Fixed timeouts in the policiy validator which could lead to failures if\n  `failurePolicy` was set to `Fail`\n\n## edge-22.2.3\n\nThis edge release fixes some `Instant`-related proxy panics that occur on Amazon\nLinux. It also includes many behind the scenes improvements to the project's\nCI and linting.\n\n* Removed the `--controller-image-version` install flag to simplify the way that\n  image versions are handled. The controller image version can be set using the\n  `--set linkerdVersion` flag or Helm value\n* Lowercased logs and removed redundant lines from the Linkerd2 proxy init\n  container\n* Prevented the proxy from logging spurious errors when its pod does not define\n  any container ports\n* Added workarounds to reduce the likelihood of `Instant`-related proxy panics\n  that occur on Amazon Linux\n\n## edge-22.2.2\n\nThis edge release updates the jaeger extension to be available in ARM\narchitectures and applies some security-oriented amendments.\n\n* Upgraded jaeger and the opentelemetry-collector to their latest versions,\n  which now support ARM architectures\n* Fixed `linkerd multicluster check` which was reporting false warnings\n* Started enforcing TLS v1.2 as a minimum in the webhook servers\n* Had the identity controller emit SHA256 certificate fingerprints in its\n  logs/events, instead of MD5\n\n## edge-22.2.1\n\nThis edge release removed the `disableIdentity` configuration now that the proxy\nno longer supports running without identity.\n\n* Added a `privileged` configuration to linkerd-cni which is required by some\n  environments\n* Fixed an issue where the TLS credentials used by the policy validator were not\n  updated when the credentials were rotated\n* Removed the `disableIdentity` configurations now that the proxy no longer\n  supports running without identity\n* Fixed an issue where `linkerd jaeger check` would needlessly fail for BYO\n  Jaeger or collector installations\n* Fixed a Helm HA installation race condition introduced by the stoppage of\n  namespace creation\n\n## edge-22.1.5\n\nThis edge release adds support for per-request Access Logging for HTTP inbound\nrequests in Linkerd. A new annotation i.e. `config.linkerd.io/access-log` is added,\nwhich configures the proxies to emit access logs to stderr. `apache` and `json`\nare the supported configuration options, emitting access logs in Apache Common\nLog Format and JSON respectively.\n\nSpecial thanks to @tustvold for all the initial work around this!\n\n* Updated injector to support the new `config.linkerd.io/access-log` annotation\n* Added a new `LINKERD2_PROXY_ACCESS_LOG` proxy environment variable to configure\n  the access log format (thanks @tustvold)\n* Updated service mirror controller to emit relevant events when\n  mirroring is skipped for a service\n* Updated various dependencies across the project (thanks @dependabot)\n\n## edge-22.1.4\n\nThis edge release features a new configuration annotation, support for\nexternally hosted Grafana instances, and other improvements in the CLI,\ndashboard and Helm charts. To learn more about using an external Grafana\ninstance with Linkerd, you can refer to our\n[docs](https://github.com/linkerd/website/blob/0c3c5cd5ae329cd7dbcca18534f3bc8ec7d57859/linkerd.io/content/2.12/tasks/grafana.md).\n\n* Added a new annotation to configure skipping subnets in the init container\n  (`config.linkerd.io/skip-subnets`). This configuration option is ideal for\n  Docker-in-Docker (dind) workloads (thanks @michaellzc!)\n* Added support in the dashboard for externally hosted Grafana instances\n  (thanks @jackgill!)\n* Introduced resource block to `linkerd-jaeger` Helm chart (thanks\n  @yuriydzobak!)\n* Introduced parametrized datasource (`DS_PROMETHEUS`) in all Grafana\n  dashboards. This allows pointing to the right Prometheus datasource when\n  importing a dashboard\n* Introduced a consistent `--ignore-cluster` flag in the CLI for the base\n  installation and extensions; manifests will now be rendered even if there is\n  an existing installation in the current Kubernetes context (thanks\n  @krzysztofdrys!)\n* Updated the service mirror controller to skip mirroring services whose\n  namespaces do not yet exist in the source cluster; previously, the service\n  mirror would create the namespace itself.\n\n## edge-22.1.3\n\nThis release removes the Grafana component in the linkerd-viz extension.\nUsers can now import linkerd dashboards into Grafana from the [Linkerd org](https://grafana.com/orgs/linkerd)\nin Grafana. Users can also follow the instructions in the [docs](https://github.com/linkerd/website/blob/f687a04ee43c90bd804b04af287bc80c9366db98/linkerd.io/content/2.12/tasks/grafana.md)\nto install a separate Grafana that can be integrated with the Linkerd Dashboard.\n\n* Stopped shipping grafana-based image in the linkerd-viz extension\n* Removed `repair` sub-command in the CLI\n* Updated various dependencies across the project (thanks @dependabot)\n\n## edge-22.1.2\n\nThis release sets the version of the extension Helm charts to 30.0.0-edge to\nensure that previous versions of these charts can be upgraded properly.\n\n* Reset extensions Helm chart versions at 30.0.0-edge\n* Pin multicluster extension pause container version to 3.2 so that it will work\n  on Arm architectures\n* Create a unique PSP `RoleBinding` for each multicluster link to prevent\n  conflicts when PSP is enabled\n\n## edge-22.1.1\n\nThis release adds support for using the cert-manager CA Injector to configure\nLinkerd's webhooks.\n\n* Fixed a rare issue when a Service's opaque ports annotation does not match\n  that of the pods in the service\n* Disallowed privilege escalation in control plane containers (thanks @kichristensen!)\n* Updated the multicluster extension's service mirror controller to make mirror\n  services empty when the exported service is empty\n* Added support for injecting Webhook CA bundles with cert-manager CA Injector\n  (thanks @bdun1013!)\n\n## edge-21.12.4\n\nThis release adds support for custom HTTP methods in the viz stats\n(i.e CLI and Dashboard). Additionally, it also includes various\nsmaller improvements.\n\n* Added support for custom HTTP methods in the `linkerd-viz` stats\n* Updated the health checker to pull trust root from the `linkerd-identity-trust-roots`\n  configmap to support cases where they are generated externally (thanks @wim-de-groot)\n* Removed unnecessary `installNamespace` bool flag from the\n  `linkerd-control-plane` chart (thanks @mikutas)\n* Updated the `install` command to error if container runtime check fails\n* Updated various dependencies across the project (thanks @dependabot)\n\n## edge-21.12.3\n\nThis edge release contains a few improvements to the CLI commands and a major\nchange around Helm charts.\n\n* **Breaking change**\n\nThe `linkerd2` chart has been deprecated in favor of the `linkerd-crds` and\n`linkerd-control-plane` charts. The former takes care of installing all the\nrequired CRDs and the latter everything else. Of important note is that, as per\nHelm best practice, we're no longer creating the linkerd namespace. Users\nrequire to do that manually, or have the Helm tool do it explicitly. So the\ninstall procedure would look something like this:\n\n```bash\nhelm install linkerd-crds -n linkerd --create-namespace linkerd/linkerd-crds\n\nhelm install linkerd-control-plane -n linkerd \\\n  --set-file identityTrustAnchorsPEM=ca.crt \\\n  --set-file identity.issuer.tls.crtPEM=issuer.crt \\\n  --set-file identity.issuer.tls.keyPEM=issuer.key \\\n  linkerd/linkerd-control-plane\n```\n\nIn order to upgrade, please delete your previously installed `linkerd2` chart\nand install the new charts as explained above.\n\nAlthough the charts for the main extensions (viz, multicluster, jaeger,\nlinkerd2-cni) were not deprecated, they also stopped creating their namespace\nand users are required to uninstall and reinstall them anew, e.g:\n\n```bash\nhelm install linkerd-viz -n linkerd-viz --create-namespace linkerd/linkerd-viz\n```\n\n* Added a new `--obfuscate` flag to `linkerd diagnostics proxy-metrics` to\n  obfuscate potentially private information in the output (thanks\n  @ahmedalhulaibi!)\n* Fixed formatting of the recommended value for `--set clusterNetworks` in the\n  `linkerd check` output when that parameter doesn't contain all the node\n  podCIDRs (thanks @ElvinEfendi!)\n* Skipped evicted pods in `linkerd viz check` and `linkerd jaeger check`, to\n  avoid the checks fail unnecessarily\n* Removed some no longer used environment variables from the proxy's manifest\n\n## edge-21.12.2\n\nThis edge removes the default SMI functionality that is included in\ninstallations now that the linkerd-smi extension provides these resources. It\nalso relaxes the `proxy-init`'s `privileged` value to only be set to `true` when\nneeded by certain installation configurations.\n\nAlong with some bug fixes, the repository's issue and feature request templates\nhave been updated to forms; check them when opening a [new\nissue](https://github.com/linkerd/linkerd2/issues/new/choose)! (thanks\n@mikutas).\n\n* Removed SMI functionality in the default Linkerd installation; this is now\n  part of the linkerd-smi extension\n* Fixed autocompletion of the `--context` flag (thanks @mikutas!)\n* Added support for conditionally setting `proxy-init`'s `privileged: true` only\n  when needed (thanks @alex-berger!)\n* Added support for controlling opaque ports through the Server resource\n* Fixed an issue where `linkerd check` would compare proxy versions of\n  uninjected pods leading to incorrect errors\n* Relaxed extension checks so that the CLI still works when not all extension\n  proxies are healthy\n* Added the `--default-inbound-policy` flag to `linkerd inject` for setting a\n  non-default inbound policy on injected workloads (thanks @ahmedalhulaibi!)\n\n## edge-21.12.1\n\nThis edge release enables by default `EndpointSlices` in the destination\ncontroller, which unblocks any functionality that is specific to\n`EndpointSlices` such as as topology-aware hints. It also contains a couple of\ninternal cleanups and upgrades, by our external contributors!\n\n* Added new check to `linkerd check` verifying the nodes aren't running the old\n  Docker container runtime and attempting to run proxy-init as root at the same\n  time, which doesn't work (thanks @alex-berger!)\n* Enabled `EndpointSlices` in the destination controller by default\n* Removed extraneous empty lines and fixed the formatting of warnings in the\n  output of `linkerd check -o short`\n* Upgraded to go 1.17 (thanks @Juneezee!)\n* Removed old protobuf definitions from the codebase (thanks @krzysztofdrys!)\n\n## edge-21.11.4\n\nThis edge release introduces a change in the destination service to honor\nopaque ports set in the `proxyProtocol` field of `Server` resources. This\nchange makes it possible to set opaque ports directly in `Server` resources\nwithout needing the opaque ports annotation on pods. The release also features\na number of fixes and improvements, a big thank you to our external\ncontributors for their continued support and involvement.\n\n* Added support in the destination service for honoring opaque ports marked in\n  `Server` resources; ports can now be marked as opaque directly in `Server`\n  resources through the `proxyProtocol` field.\n* Added support to override default behavior and run `proxyInit` as root\n  (thanks @alex-berger!)\n* Added multicluster `Link` CRD to code generation script; consumers of the\n  multicluster API can now use a typed API to interact with multicluster links\n  (thanks @zaharidichev!)\n* Added a multicluster integration test for exported headless services (thanks\n  @importhuman!)\n* Deprecated `v1alpha1` version of the policy APIs\n* Removed newline from `linkerd check` header text (thanks @mikutas!)\n* Replaced deprecated `beta.kubernetes.io/os` label with `kubernetes.io/os`\n\n## edge-21.11.3\n\nThis edge releases fixes a compatibility issue that prevented the policy\ncontroller from starting in some Kubernetes distributions. This release also\nincludes a new High Availability mode for the gateway component in multicluster\nextension. Various dependencies across the CNI plugin, Policy Controller and\ndashboard have also been upgraded. In the proxy, error logging when the proxy\nfails to accept a connection due to a system error has been improved.\n\n* Updated policy controller to use `openssl` instead of `rustls` to fix\n  compatibility issues with some Kubernetes distributions\n* Added HA mode to multicluster gateway that adds a PodDisruptionBudget,\n  additional replicas and anti-affinity to the deployment (thanks @Crevil)\n* Improved TCP server error messages in the proxy\n* Fixed broken Grafana links in the dashboard\n* Upgraded CNI pkg to v0.8.1 in `linkerd-cni` to support latest CNI\n  versions\n* Updated various dependencies in the dashboard, policy controller\n  (thanks @dependabot)\n\n## edge-21.11.2\n\nThis edge release introduces a new Services page in the web dashboard that shows\nlive calls and route metrics for meshed services. Additionally, the `proxy-init`\ncontainer is no longer enforced to run as root. Lastly, the proxy can now retry\nrequests with a `content-length` header—permitting requests emitted by grpc-go\nto be retried.\n\n* Removed hardcoding that enforced the `proxy-init` container to run as root\n* Added support for retrying requests without a `content-length` header\n* Changed service discovery logs from `TRACE` to `DEBUG`\n* Fixed issue with policy controller where it assumed `linkerd` was the name of\n  the control plane namespace, leading to issues with installations that use a\n  non-default namespace name\n* Added support for ephemeral storage requests and limits configured either\n  through the CLI or annotations (thanks @michaellzc!)\n* Deprecated support for topology keys and added support for topology aware\n  hints\n* Added `logFormat` and `logLevel` configuration values for the `proxy-init`\n  container (thanks @gusfcarvalho!)\n* Added services to the web dashboard (thanks @krzysztofdrys!)\n* Updated example commands in the web dashboard to use the `viz` subcommand when\n  necessary (thanks @mikutas!)\n* Removed references to `linkerd-sp-validator` service account in the\n  `linkerd-psp` role binding (thanks @multimac!)\n\n## edge-21.11.1\n\nIn this edge, we're very excited to introduce Service Account Token Volume\nProjections, used to set up the pods' identities. These tokens are bounded\nspecifically for this use case and are rotated daily, replacing the usage of the\ndefault tokens injected by Kubernetes which are overly permissive.\n\nNote that this edge release updates the minimum supported kubernetes version to 1.20.\n\n* Updated the minimum supported kubernetes version to 1.20\n* Use Service Account Token Volume Projections to set up the pods' identities;\n  now injection also works on pods with `automountServiceAccountToken` set to\n  `false`\n* Updated proxy-init's Alpine base image to fix some CVEs (not affecting\n  Linkerd)\n* Updated the Prometheus image in linkerd-viz to 2.30.3\n* Changed the proxy and policy controller to use jemalloc on x86_64 gnu/linux to\n  reduce memory usage\n* Fixed output for `linkerd check -o json`\n* Added ability to configure ephemeral-storage resources for each component\n  (thanks @michaellzc!)\n\n## edge-21.10.3\n\nThis edge release fixes a bug in the proxy that could cause it to be killed in\ncertain situations. It also uses a more relaxed policy for the identity\ncontroller that allows it to work in environments where health checks come from\noutside of the pod network.\n\n* Skipped Prometheus scrapes on policy's `admin` server so that it no longer\n  incorrectly appears as \"DOWN\" in the Prometheus UI\n* Updated the identity controller to use the 'all-unauthenticated' policy so\n  that it can accept health checks from the node IPs\n* Fixed an infinite loop in the proxy that could cause it to be killed\n* Added tests for the multicluster install command (thanks @crevil!)\n* Fixed a bug where `authz` CLI commands would fail when policy resources had\n  an empty selector\n\n## edge-21.10.2\n\nThis edge release fixes linkerd check and the helm charts to explicitly\nindicate that the minimum Kubernetes version is 1.17.0. Prior to this change,\nthere was no validation or enforcement from linkerd check or helm to meet this\nminimum requirement.\n\nThis edge also improves `check` functionality for extensions by adding the\n`-oshort` flag, and prevents duplicate policy resources from being created for\nlinked multicluster services.\n\n* Moved service mirror policy into multicluster base chart\n* Added `-oshort` flag for extension `check` commands\n* Updated minimum kubernetes version to 1.17.0\n* Removed unused `crtExpiry` template parameter from helm charts\n* Fixed multicluster gateway name for ServerAuthorization\n* Added `priorityClassName` to the helm charts to configure control plane\n  components\n\n## edge-21.10.1\n\nThis release includes some fixes in the `linkerd check`, along with a\nbunch of dependency updates across the dashboard, Go components, and\nothers. On the proxy side, Support for `TLSv1.2` has been dropped\n(Only `TLSv1.3` cipher suite will be used), `h2` crate has been updated\nto support HTTP/2 messages with larger header values.\n\n* Updated `linkerd check` to avoid multiline errors with retryable checks\n* Fixed incorrect opaque ports warning in `linkerd check --proxy` with\n  un-named ports\n* Bumped proxy-init to `1.4.1` which adds support for `--log-level`\n  and `--log-format` flags (thanks @gusfcarvalho)\n* Removed the use of `TLSv1.2` in the proxy\n* Updated the `h2` crate in the proxy to support HTTP/2 messages with\n  larger header values.\n* Updated various dependencies across the dashboard, policy-controller, etc\n  (thanks @dependabot!)\n\n## stable-2.11.0\n\nThis release introduces access control policies. Default policies may be\nconfigured at the cluster- and workspace-levels; and fine grained policies may\nbe instrumented via the new `policy.linkerd.io/v1beta1` CRDs: `Server` and\n`ServerAuthorization`. These resources may be created to define how individual\nports accept connections; and the `Server` resource will be a building block for\nfuture features that configure inbound proxy behavior.\n\nFurthermore, `ServiceProfile` retry configurations can now instrument retries\nfor requests with bodies. This unlocks retry behavior for gRPC services.\n\n**Upgrade notes**: Please see the [upgrade instructions][upgrade-2110].\n\n* Proxy\n  * Reduced CPU & Memory usage by up to 30% in some load tests\n  * Updated retries to support requests with bodies up to 64KB. ServiceProfiles\n    may now configure retries for gRPC services\n  * The proxy's container image is now based on `gcr.io/distroless/cc` to\n    contain a minimal OS footprint that should not trigger unnecessary alerts in\n    security scanners\n  * Added the `inbound_http_errors_total` and `outbound_http_errors_total`\n    metrics to reflect errors that caused the proxy to respond with errors\n  * Added an `l5d-proxy-error` header that is included on responses on trusted\n    connections for debugging purposes\n  * Added a `l5d-client-id` header on mutually-authenticated inbound requests so\n    that applications can discover the client's identity\n  * Added metrics to reflect TCP and HTTP authorization decisions\n  * Added `srv_name` and `saz_name` labels to inbound HTTP metrics\n  * Fixed an issue that could cause the proxy to continually reconnect to\n    defunct service endpoints\n  * Dropped support for non-HTTP outbound services when `linkerd.io/inject:\n    ingress` is used\n  * Instrumented fuzz testing to help guard against unexpected panics\n\n* Control Plane\n  * Added a new `policy-controller` container to the `linkerd-destination`\n    pod--the first control plane component implemented in Rust\n  * Added a new admission controller to validate that multiple `Server`\n    resources do not reference the same port\n  * Added a `linkerd-identity-trust-roots` ConfigMap which configures the trust\n    root bundle for all pods in the core control plane namespace\n  * Eliminated the `linkerd-controller` deployment so that Linkerd's core\n    control plane now consists of only 3 deployments\n  * Updated the proxy injector to configure the `proxy-init` container with\n    `NET_RAW` and `NET_ADMIN` capabilities so that the container does not fail\n    when the pod drops these capabilities\n\n* CLI\n  * Enhanced `linkerd completion` to expand Kubernetes resources from the current\n    kubectl context\n  * Added an `authz` subcommand to display the authorization policies that\n    impact a workload\n  * Added a _short_ output mode for `linkerd check` that only prints failed\n    checks\n  * Added support for `ReplicaSets` to `linkerd stat` so that pods created by\n    Argo `Rollout` resources can be inspected\n\n* Helm: please see the [upgrade instructions][upgrade-2110].\n\n* Extensions:\n  * Introduced a new (optional) SMI extension responsible for reading\n    `specs.smi-spec.io` resources and converting them to Linkerd resources\n  * In `stable-2.12`, this extension will be required to use `TrafficSplit`\n    resources with Linkerd\n  * Added an extensions page to the Linkerd Web UI\n\n  * Viz\n    * Added `Server` and `ServerAuthorization` resources for all ports\n    * Added JSON log formatting\n\n  * Jaeger\n    * Added OpenTelemetry collector instead of OpenCensus\n\n  * Multicluster\n    * Added experimental support for `StatefulSet` workloads\n\nThis release includes changes from a massive list of contributors. A special\nthank-you to everyone who helped make this release possible:\n\nGustavo Fernandes de Carvalho @gusfcarvalho\nOleg Vorobev @olegy2008\nBart Peeters @bartpeeters\nStepan Rabotkin @EpicStep\nLiuDui @xichengliudui\nAndrew Hemming @drewhemm\nUjjwal Goyal @importhuman\nKnut Götz @knutgoetz\nSanni Michael @sannimichaelse\nBrandon Sorgdrager @bsord\nGerald Pape @ubergesundheit\nAlexey Kostin @rumanzo\nrdileep13 @rdileep13\nTakumi Sue @mikutas\nAkshit Grover @akshitgrover\nSanskar Jaiswal @aryan9600\nAleksandr Tarasov @aatarasoff\nTaylor @skinn\nMiguel Ángel Pastor Olivar @migue\nwangchenglong01 @wangchenglong01\nJosh Soref @jsoref\nCarol Chen @kipply\nPeter Smit @psmit\nTarvi Pillessaar @tarvip\nJames Roper @jroper\nDominik Münch @muenchdo\nSzymon Gibała @Szymongib\nMitch Hulscher @mhulscher\n\n[upgrade-2110]: https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2110\n\n## edge-21.9.5\n\nThis edge is a release candidate for `stable-2.11.0`, containing a couple of\nimprovements to `linkerd check`, some final tweaks before the stable release,\nand a couple of contributions from the community.\n\n* Had `linkerd check --proxy` stop failing on pods that are in Shutdown status\n  (thanks @olegy2008!)\n* Lowered from error to warning a failed check on misconfigured opaque ports\n  annotations, given that doesn't imply the installation is broken\n* Added log level and format settings to all the viz components (thanks\n  @gusfcarvalho!)\n* Removed label from the multicluster gateway and service-mirror pods to allow\n  them to be properly rolled out when upgrading\n\n## edge-21.9.4\n\nThis edge is a release candidate for `stable-2.11.0`! It introduces a new\n`linkerd viz auth` command which shows metrics for server authorizations broken\ndown by server for a given resource. It also shows the rate of unauthorized\nrequests to each server.  This is helpful for seeing a breakdown of which\nauthorizations are being used and what proportion of traffic is being rejected.\n\nIt also fixes an issue in the proxy where  HTTP load balancers could continue\ntrying to establish connections to endpoints that were removed from service\ndiscovery. In addition it improves the proxy's error handling so that it can\nsignal to an inbound proxy when its peers outbound connections should be torn\ndown.\n\n* Changed destination watch updates from `info` to `debug` to reduce the amount\n  of logs (thanks @bartpeeters!)\n* Added the `linkerd viz auth` command which shows metrics for server\n  authorizations broken down by server for a given resource\n* Fixed an issue where the policy controller's validating admission webhook\n  attempted to validate ServerAuthorizations when it should only be validating\n  Servers\n* Removed `omitWebhookSideEffects` setting now that we no longer support\n  Kubernetes 1.12\n* Improved proxy error handling so that it can signal to its peers that their\n  outbound connections should be torn down\n* Fixed an issue where after upgrades there would be a mismatch in certs used by\n  the policy controller validator; the destination pod is now restarted similar\n  to the injector\n* Fixed a field reference in the Helm template to properly refer to\n  `profileValidator.namespaceSelector`\n* Updated policy CRD versions to `v1beta1`\n* Added support for `stat`'s `-o json` option to Server resources\n* Fixed an issue in the proxy where HTTP load balancers could continue trying to\n  establish connections to endpoints that were removed from service discovery\n* Added JSON output format to `linkerd viz authz` command\n\n## edge-21.9.3\n\nThis edge is a release candidate for `stable-2.11.0`! It features a new `linkerd\nauthz` CLI command to list servers and authorizations for a workload, as well as\npolicy resources support for `linkerd viz stat`. Furthermore, this edge release\nadds support for JSON log formatting, enables TLS detection on port 443\n(previously marked as opaque), and further improves policy features.\n\n* Removed port 443 from the default list of opaque ports, this will allow the\n  proxy to report metadata (such as the connection's SNI value) on TLS\n  connections to port 443\n* Added default policies for core Linkerd extensions\n* Added support for JSON log formatting to the policy controller\n* Added support for new policy resources to `viz stat` command\n* Added default policy annotation to `linkerd-identity`\n* Added a new `linkerd authz` command to the CLI to list all server and\n  authorization resources that apply to a specific resource\n* Added TLS labels (including client identity) to authorization metrics in the\n  proxy\n* Changed the opaque ports CLI check to consider service and pod ports when\n  checking annotation values; previously, the check would naively issue warnings\n  when the service annotation values were different from the pod it selected\n* Changed how the proxy forwards inbound connections to a pod locally; the proxy\n  now targets the original address instead of a port bound on localhost to\n  protect services that are only bound on loopback from being exposed to other\n  pods\n* Improved memory utilization in the proxy, especially for TCP forwarding, where\n  the memory allocated was reduced from 128KB to 16KB\n* Updated the inbound policy system for the proxies to always allow connections\n  from localhost\n* Fixed an issue where the policy controller would not detect changes to the\n  `proxyProtocol` field of `Server` resources\n* Fixed an issue where the policy admission controller would log a `WARN`\n  message when deserializing `Server` structs\n\n## edge-21.9.2\n\nThis edge release gets us closer to 2.11 by further polishing the policy\nfeature. Also the proxy received a noticeable resource consumption improvement.\n\n* Stopped creating the default authorizations for the kubelet\n* Added missing ports to the destination controller's default list of ports, to\n  allow the sp-validator to start properly when using a default-deny policy\n* Set the destination and proxy-injector pods default policy to\n  `all-unauthenticated` to allow the webhooks to be called from the kube-api\n  when using a default-deny policy\n* Extended inbound policies to cover the proxy's admin server\n* Improved the proxy's error handling so that HTTP metrics include 5XX responses\n  for common errors\n* The proxy's outbound tap has been fixed to include route labels when service\n  profiles are configured\n* Enabled link-time optimizations in the Rust components (proxy and policy\n  controller), resulting in noticeable RSS and CPU consumption improvements\n* Made the admin servers in the control plane components properly shut down\n  (thanks @EpicStep!)\n* Updated linkerd-await, suppressing the error emitted when linkerd-await was\n  disabled\n\n## edge-21.9.1\n\nThis release includes various improvements and feature additions across the policy\nfeature i.e, New validating webhook for policy resources. This also includes changes\nin the proxy i.e, terminating TCP connections when a authorization is revoked, improvements\nin the proxy authorization metrics. In addition, proxy injector has also been updated\nto set the right `opaque-ports` annotation on services with default opaque ports.\n\n* Added a new validating admission controller to validate the policy resources\n* Updated the proxy-init to remove a rule which caused the packets from the proxy\n  with destination != 127.0.0.1 on localhost to be sent to the inbound proxy\n* Updated inbound policy enforcement to interrupt TCP forwarding if a previously\n  established authorization is revoked\n* Added new proxy metrics to expose authorization decisions\n* Updated inbound TCP metrics to only include a `srv_name` label\n* Updated the proxy to export route-oriented metrics only when a ServiceProfile\n  is enabled\n* Updated the proxy's release build configuration to improve CPU and memory\n  utilization\n* Added DNS name validation to the `proxy-identity` binary which creates the\n  read-only private key required by the proxy (thanks @yorkijr!)\n* Updated the identity controller's default policy to be `cluster-unauthenticated`\n* Updated the proxy injector to include the correct default ports as opaque with\n  services\n* Deprecated the usage of `vis stat ts` and print a warning about the SMI extension\n* Updated various dependencies across the dashboard, policy-controller\n  (thanks @dependabot!)\n\n## edge-21.8.4\n\nThis edge release continues to build on the policy feature by adding support for\ncluster-scoped default policies and exposing policy labels on various prometheus\nmetrics. The proxy has been updated to return HTTP-level authorization errors\nat the time that the request is processed, instead of when the connection is\nestablished.\n\nIn addition, the proxy-injector has been updated to set the `opaque-ports`\nannotation on a workload to make sure that controllers can discover how the\nworkload was configured. Also, the `sleep` binary has been added to the proxy\nimage in order to restore the functionality required for `waitBeforeExitSeconds`\nto work.\n\n* Added `default-inbound-policy` annotation to the proxy-injector\n* Updated the proxy-injector to always add the `opaque-ports` annotation\n* Added `sleep` binary to proxy image\n* Updated inbound traffic metrics to include server and authorization labels\n* Updated the policy-controller to honor pod level port annotations when a\n  `Server` resource definition does not match the ports defined for the workload\n* Updated the point at which the proxy returns HTTP-level authorization errors\n* Exposed permit and policy labels on HTTP metrics\n* Added support for cluster-scoped default policies\n* Dropped `nonroot` variant from the policy-controller's distroless base image\n  to avoid erroring in some environments.\n\n## edge-21.8.3\n\nThis release adds support for dynamic inbound policies. The proxy now discovers\npolicies from the policy-controller API for all application ports documented in a\npod spec. Rejected connections are logged. Policies are not yet reflected in the\nproxy's metrics.\n\nThese policies also allow the proxy to skip protocol detection when a server is\nexplicitly annotated as HTTP/2 or when the server is documented to be opaque or\napplication-terminated TLS.\n\n* Added a new section to linkerd-viz's dashboard that lists installed extensions\n  (thanks @sannimichaelse!)\n* Added the `enableHeadlessServices` Helm flag to the `linkerd multicluster\n  link` command for enabling headless service mirroring (thanks @knutgoetz!)\n* Removed some unused and duplicate constants in the codebase (thanks\n  @xichengliudui!)\n* Added support for exposing service metadata from exported to mirrored services\n  in multicluster installations (thanks @importhuman!)\n* Fixed an issue where the policy controller's liveness checks would fail after\n  the controller was disconnected but had successfully resumed its watches\n* Fixed the `linkerd-policy` service selector to properly select `destination`\n  control plane components\n* Added additional environment variables to the proxy container to allow support\n  for dynamic policy configuration\n\n## edge-21.8.2\n\nThis edge release continues the policy work by adding a new controller, written\nin Rust, to expose a discovery API for inbound server policies. Apart from\nthat, this release includes a number of changes from external contributors; the\n`linkerd-jaeger` helm chart now supports passing arguments to the Jaeger\ncontainer through the chart's values file. A number of unused functions and\nvariables have been also removed to improve the quality of the codebase.\nFinally, this release also comes with changes to the proxy's outbound behavior,\na new extensions page on the dashboard, and support for querying service\nmetrics using the `authority` label in `linkerd viz stat`.\n\n* Introduced new `linkerd-policy-controller`; the new controller is written in\n  Rust and implements discovery APIs for inbound server policies, the container\n  has been added to the `linkerd-destination` pod\n* Updated `linkerd-jaeger` helm chart to support passing arguments to the\n  Jaeger container (thanks @bsord!)\n* Added support for querying service metrics using the `authority` label in\n  `linkerd viz stat`\n* Improved code hygiene by removing unused constants and functions throughout\n  the codebase (thanks @xichengliudui!)\n* Added a new extensions page to the dashboard to list all known built-in and\n  third party extensions that can be used with Linkerd\n* Changed outbound behavior in the proxy to tear down server-side connections\n  when the remote proxy returns responses that indicate proxy errors; the\n  connection in this case will be reset to allow clients to connect to a new\n  endpoint\n\n## edge-21.8.1\n\nThis releases includes initial changes w.r.t addition of Authorization into\nLinkerd. It includes adding the new `policy.linkerd.io` CRDs to the core install.\nThis also includes numerous dependency updates both in the web and dashboard.\n\n* Added `servers.policy.linkerd.io` and `serverauthorizations.policy.linkerd.io`\n  CRDs into the default Linkerd installation to support configuration and\n  discovery of inbound policies\n* Modified the proxy to support upcoming policy features\n* Updated several dashboard dependencies to latest versions\n* Updated several proxy dependencies to latest versions\n\n## edge-21.7.5\n\nThis release updates Linkerd to store the identity trust root in a ConfigMap to\nmake it easier to manage and rotate the trust root.  The release also lays the\ngroundwork for StatefulSet support in the multicluster extension and removes\ndeprecated PSP resources by default.\n\n* Added a `linkerd-identity-trust-roots` ConfigMap which contains the configured\n  trust root bundle\n* Introduced support for StatefulSets across multicluster (disabled by default)\n* Stopped installing PSP resources by default since these are deprecated as\n  of Kubernetes v1.21\n\n## edge-21.7.4\n\nThis release continues to focus on dependency updates. It also adds the\n`l5d-proxy-error` information header to distinguish proxy generated errors\nproxy generated errors from application generated errors.\n\n* Updated several project dependencies\n* Added a new `l5d-proxy-error` on responses that allows proxy-generated error\n  responses to be distinguished from application-generated error responses.\n* Removed support for configuring HTTP/2 keepalives via the proxy.\n  Configuring this setting would sometimes cause conflicts with Go gRPC servers\n  and clients\n* Added a new `target_addr` label to `*_tcp_accept_errors` metrics to improve\n  diagnostics, especially for TLS detection timeouts\n\n## edge-21.7.3\n\nThis edge release introduces several changes around metrics. ReplicaSets are now\na supported resource and metrics can be associated with them. A new metric has\nbeen added which counts proxy errors encountered before a protocol can be\ndetected. Finally, the request errors metric has been split into separate\ninbound and outbound directions.\n\n* Fixed printing `check --pre` command usage if it fails after being unable to\n  connect to Kubernetes (thanks @rdileep13!)\n* Updated the default skip and opaque ports to match that which is listed in the\n  [documentation](https://linkerd.io/2.10/features/protocol-detection/#configuring-protocol-detection)\n* Added the `LINKERD2_PROXY_INBOUND_PORTS` environment variable during proxy\n  injection which will be used by ongoing policy changes\n* Added client-go cache size metrics to the `diagnostics controller-metrics`\n  command\n* Added validation that the certificate provided by an external issuer is a CA\n  (thanks @rumanzo!)\n* Added metrics support for ReplicaSets\n* Replaced the `request_errors_total` metric with two new metrics:\n  `inbound_http_errors_total` and `outbound_http_errors_total`\n* Introduced the `inbound_tcp_accept_errors_total` and\n  `outbound_tcp_accept_errors_total` metrics which count proxy errors\n  encountered before a protocol can be detected\n\n## edge-21.7.2\n\nThis edge release focuses on dependency updates and has a couple of functional\nchanges. First, the Dockerfile used to build the proxy has been updated to use\nthe default `distroless` image, rather than the non-root variant. This change\nis safe because the proxy already runs as non-root within the container. Second,\nthe `ignoreInboundPorts` parameter has been added in the linkerd2-cni helm\ncharts in order to enable tap support.\n\n* Updated several project dependencies\n* Updated the Dockerfile-proxy to use the default distroless image, because\n  the proxy already runs as non-root within the container\n* Added `ignoreInboundPorts` parameter to the linkerd2-cni plugin helm chart\n\n## edge-21.7.1\n\nThis edge release adds support for emitting Kubernetes events in the identity\ncontroller when issuing leaf certificates. The event includes the identity,\nexpiry date, and a hash of the certificate. Additionally, this release contains\nmany dependency updates for the control plane's components, and it includes a\nfix for an issue with the clusterNetworks healthcheck.\n\n* Updated the identity controller to emit Kubernetes events when successfully\n  issuing leaf certificates to injected pods.\n* Fixed an issue in `linkerd check` where the clusterNetworks healthcheck\n  would fail if the `podCIDR` field is omitted from a node's spec.\n* Removed unnecessary controller port-forward logic from the `bin/web` script.\n\n## edge-21.6.5\n\nThis release contains a few improvements, from many contributors!  Also under\nthe hood, the destination service has received updates in preparation to the\nupcoming support for StatefulSets across multicluster.\n\n* Improved the `linkerd check --proxy` command to avoid hitting a timeout when\n  dealing with large clusters\n* Fixed the web component permissions in order to properly run the podCIDR check\n  (thanks @aryan9600!)\n* Avoid having the proxy-init container fail when the main container is\n  configured to drop either the NET_RAW or NET_ADMIN capabilities (thanks\n  @aryan9600!)\n* Upgraded the proxy-init image to improve the output in \"simulate\" mode (thanks\n  @liuerfire!) and to log to stdout instead of stderr (thanks @mo4islona!)\n* Added test-coverage reports to PRs (thanks @akshitgrover!)\n\n## edge-21.6.3\n\nThis release moves the Linkerd proxy to a more minimal Docker base image,\nadds a check for detecting certain network misconfigurations, and replaces\nthe deprecated OpenCensus collector with the OpenTelemetry collector in the\njaeger extension.\n\n* Switched the Linkerd proxy's base docker image from Debian to a minimal\n  distroless base image (thanks @tskinn!)\n* Added a check to verify that Linkerd's clusterNetworks settings match the\n  cluster's pod CIDR networks (thanks @aryan9600!)\n* Replaced the deprecated OpenCensus collector with the OpenTelemetry\n  collector in the jaeger extension (thanks @aatarasoff!)\n\n## edge-21.6.2\n\nThis release fixes a problem with the HTTP body buffering that was added\nto support gRPC retries. Now, only requests with a retry configuration\nare buffered (and only when their bodies are less than 64KB).\n\nAdditionally, an issue with the outbound ingress-mode proxy where forwarded\nHTTP clients could fail to detect when the target pod was deleted, causing\nconnections to retry forever has been fixed. This only impacted traffic\nforwarded directly to pod IPs and not load balanced services.\n\nFinally, this release also includes some fixes in the CLI and dashboard.\n\n* Added a new check that verifies if the opaque ports annotation is\n  misconfigured on services or pods (thanks @migue!)\n* Added support for resource aware completion for core linkerd command\n* Fixed an issue where `namespace` resource was erroneously being shown\n  in the dashboard's topology graph\n* Added uninstall command support for legacy extension installs\n* Updated the proxy to only buffer request bodies when a request can be retried\n* Updated the proxy to prevent buffering indefinitely on requests\n  when endpoints are updated in ingress mode\n* Fixed spelling mistakes across various files in the project\n  (thanks @jsoref!)\n\n## edge-21.6.1\n\nThis release adds support for retrying HTTP/2 requests with small (<64KB)\nmessage bodies, allowing the proxy to properly buffer message bodies when\nresponses are classified as a failure. Documentation on how to configure\nretries can be found [here](https://linkerd.io/2.10/tasks/configuring-retries/).\n\nThis release also modifies the proxy's identity subsystem to instantiate a\nclient on-demand so client connections are not retained continually. Also\nincluded in this release are various bug fixes and improvements as well as\nexpanding support for resource-aware tab completion in the jaeger and\nmulticluster CLI extensions.\n\n* Added support for specifying a `gateway-port` flag for the `multicluster link`\n  command (thanks @psmit!)\n* Added support for Kubernetes resource aware tab completion for `jaeger` and\n  `multicluster` commands\n* Fixed an issue where `viz`, `jaeger` and `multicluster` extensions could not\n  be installed on `PodSecurityPolicy`-enabled clusters\n* Fixed an issue where `linkerd check --proxy` could incorrectly report\n  out-of-date proxy versions caused by incorrect regex (thanks @aryan9600!)\n* Added support for the proxy to retry HTTP/2 requests with message bodies\n  <= 64KB\n* Modified the proxy's controller stack to create new client connections\n  on-demand\n* Fixed Viz's `uninstall` command to remove viz installations that used the\n  legacy `linkerd.io/extension: linkerd-viz` label (thanks @jsoref!)\n* Expanded the \"linkerd-existence\" health check to also check for the\n  destination pod readiness\n\n## edge-21.5.3\n\nThis edge release contains various improvements to the Viz and Jaeger install\ncharts, along with bug fixes in the CLI, and destination. This release also\nadds kubernetes aware autocompletion to all viz commands, along with\nServiceProfiles to be part of the default `viz install`.\n\nFinally, the proxy has been updated to continue supporting requests without\n`l5d-dst-override` in ingress-mode proxies, to no longer include query parameters\nin the OpenCensus trace spans, and to prevent timeouts with controller clients\nof components with more than one replica.\n\n* Separated protocol hint setting from H2 upgrades in destination profile\n  response, thus preventing `hint.OpaqueTransport` field from not being set when\n  H2 upgrades are disabled\n* Updated OpenCensus trace spans for HTTP requests to no longer include query\n  parameters (thanks @aatarasoff!)\n* Reverted [linkerd/linkerd2-proxy#992](https://github.com/linkerd/linkerd2-proxy/pull/992)\n  to support requests without `l5d-dst-override` in ingress-mode proxies\n* Fixed an issue in the proxy to prevent timeouts with controller clients\n  of components with more than one replica\n* Fixed `linkerd check --proxy` failure with pods that are part of Jobs\n* Updated `viz install` to also include ServiceProfiles of its components.\n  As a side-effect, `linkerd diagnostics install-sp` cmd has been removed\n* Added support for Kubernetes resource aware tab completion for all\n  viz commands\n* Updated destination to prefer `ServiceProfile.dstOverrides` over\n  `TrafficSplit` when both are present for a service\n* Added toggle flags for `collector` and `jaeger` components in the\n  jaeger extension (thanks @tarvip!)\n* Added support for setting `nodeselector`, `toleration` fields for components\n  in the Viz extension (thanks @aatarasoff!)\n* Fixed a templating issue in Viz, making `podAnnotations` field\n  work with prometheus\n* Updated Golang version to 1.16.4\n* Removed unnecessary `--addon-overwrite` flag in `linkerd upgrade`\n\n## edge-21.5.2\n\nThis edge release updates the proxy-init container to check whether the iptables\nrules have already been added, which prevents errors if the proxy-init container\nis restarted. Also, the `viz stat` command now has tab completion for Kubernetes\nresources, saving you precious keystrokes! Finally, the proxy has been updated\nwith several fixes and improvements.\n\n* Added instructions to `build.md` for using a locally built proxy\n  (thanks @jroper!)\n* Added support for Kubernetes resource aware tab completion to the `viz stat`\n  command\n* Updated `proxy-init` to skip configuring firewall if rules exists\n* Fixed `viz uninstall` to delete all RBAC objects (thanks @aryan9600!)\n* Improved diagnostics for rejected profile discovery\n* Added the `l5d-client-id` header on mutually-authenticated inbound requests so\n  that applications can discover the client's identity.\n* Reduced proxy resource usage when there are no profiles\n* Changed the admin server to assume all meshed connections are HTTP/2 and fail\n  connections when that is not the case\n* Updated the proxy to require the `l5d-dst-override` header on outbound\n  requests when the proxy is in ingress-mode\n* Removed support for TCP-forwarding in ingress-mode\n\n## edge-21.5.1\n\nThis edge release adds support for versioned hint URLs in `linkerd check` and\nsupport for traffic splitting through ServiceProfiles, among other fixes and\nimprovements. Additionally, more options have been added to the\nlinkerd-multicluster and linkerd-jaeger helm charts.\n\n* Added support for traffic splitting through a ServiceProfile's `dstOverrides`\n  field.\n* Added `nodePorts` option to the multicluster helm chart (thanks @psmit!).\n* Added `nodeSelector` and toleration options to the linkerd-jaeger helm chart\n  (thanks @aatarasoff!).\n* Added versioned hint URLs to the CLI `check` command when encountering an\n  error; each major CLI version will now point to that version's relevant\n  section in the Linkerd troubleshooting page.\n* Fixed an issue in the CLI `check` command where error messages for\n  healthchecks that were being retried would be outputted repeatedly instead of\n  just once.\n* Fixed an issue in the proxy injector where a namespace annotated with opaque\n  ports would overwrite all service annotations.\n* Fixed a regression in the proxy that caused all logs to be output with ANSI\n  control characters, by default logs are output in plaintext now.\n* Simplified proxy internals in order to distinguish endpoint-forwarding logic\n  from the handling of load balanced services.\n* Simplified the ingress-mode outbound proxy by requiring the\n  `l5d-dst-override` header and by failing non-HTTP communication. Proxies\n  running in ingress-mode will not unexpectedly revert to insecure\n  communication as a result.\n\n## edge-21.4.5\n\nThis edge release adds a new output format `short` for `linkerd check` to show a\nsummary of the check output. This release also includes various proxy bug fixes\nand improvements.\n\n* Proxy\n  * Fixed a task leak that would be triggered when clients disconnect a\n    service in failfast.\n  * Improved admin server protocol detection so that error messages are\n    more descriptive about the underlying problem.\n  * Fixed panics found in fuzz testing. These panics were extremely\n    unlikely to occur in practice and would require very specific\n    configuration overrides to be triggered.\n* CLI\n  * Added support for a new `short` format for the `--output` flag of the `check`\n    command to show a summary of check results\n\n## edge-21.4.4\n\nThis edge release further consolidates the control plane by removing the\nlinkerd-controller deployment and moving the sp-validator container into the\ndestination deployment.\n\nAnnotation inheritance has been added so that all Linkerd annotations\non a namespace resource will be inherited by pods within that namespace.\nIn addition, the `config.linkerd.io/proxy-await` annotation has been added which\nenables the [linkerd-await](https://github.com/linkerd/linkerd-await)\nfunctionality by default, simplifying the implementation of the await behavior.\nSetting the annotation value to disabled will prevent this behavior.\n\nSome of the `linkerd check` functionality has been updated. The command\nensures that annotations and labels are properly located in the YAML and adds\nproxy checks for the control plane and extension pods.\n\nFinally, the nginx container has been removed from the Multicluster gateway pod,\nwhich will impact upgrades. Please see the note below.\n\n**Upgrade note:** When the Multicluster extension is updated in both of the\nsource and target clusters there won't be any downtime because this change only\naffects the readiness probe. The multicluster links must be re-generated with\nthe `linkerd mc link` command and the `linkerd mc gateways` will show\nthe target cluster as not alive until the `linkerd mc link` command is re-run,\nhowever that shouldn't affect existing endpoints pointing to the target cluster.\n\n* Added proxy checks for core control plane and extension pods\n* Added support for awaiting proxy readiness using an annotation\n* Added namespace annotation inheritance to pods\n* Removed the linkerd-controller pod\n* Moved sp-validator container into the destination deployment\n* Added check verifying that labels and annotations are not mixed up\n  (thanks @szymongib)\n* Enabled support for extra initContainers to the linkerd-cni daemonset\n  (thanks @mhulscher!)\n* Removed nginx container from multicluster gateway pod\n* Added an error message when there is nothing to uninstall\n\n## stable-2.10.1\n\nThis stable release adds CLI support for Apple Silicon M1 chips and support for\nSMI's TrafficSplit `v1alpha2`.\n\nThere are several proxy fixes: handling `FailedPrecondition` errors gracefully,\ninbound TLS detection from non-meshed workloads, and using the correct cached\nclient when the proxy is in ingress mode. The logging infrastructure has also\nbeen improved to reduce memory pressure in high-connection environments.\n\nOn the control-plane side, there have been several improvements to the\ndestination service such as support for Host IP lookups and ignoring pods\nin \"Terminating\" state. It also updates the proxy-injector to add opaque ports\nannotation to pods if their namespace has it set.\n\nOn the CLI side, `linkerd repair` has been updated to be aware about the control-plane\nversion and suggest the relevant version to generate the right config. Various\nbugs have been fixed around `linkerd identity`, etc.\n\n**Upgrade notes**: Please refer [2.10 upgrade instructions](https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2100)\nif you are upgrading from `2.9.x` or below versions.\n\n* Proxy:\n  * Fixed an issue where proxies could infinitely retry failed requests to the\n    `destination` controller when it returned a `FailedPrecondition`\n  * The proxy's logging infrastructure has been updated to reduce memory pressure\n    in high-connection environments.\n  * Fixed a caching issue in the outbound proxy that would cause it to\n    forward traffic to the wrong pod when running in ingress mode.\n  * Fixed an issue where inbound TLS detection from non-meshed workloads\n    could break\n  * Fixed an issue where the admin server's HTTP detection would fail and\n    not recover; these are now handled gracefully and without logging warnings\n  * Control plane proxies no longer emit warnings about the resolution stream ending.\n    This error was innocuous.\n  * Bumped the proxy-init image to v1.3.11 which updates the go version to be 1.16.2\n\n* Control Plane:\n  * Fixed an issue where the destination service would respond with too big of a\n    header and result in http2 protocol errors\n  * Fixed an issue where the destination control plane component sometimes returned\n    endpoint addresses with a 0 port number while pods were undergoing a rollout\n    (thanks @riccardofreixo!)\n  * Fixed an issue where pod lookups by host IP and host port fail even though\n    the cluster has a matching pod\n  * Updated the IP Watcher in destination to ignore pods in \"Terminating\" state\n    (thanks @Wenliang-CHEN!)\n  * Modified the proxy-injector to add the opaque ports annotation to pods\n    if their namespace has it set\n  * Added Support for TrafficSplit `v1alpha2`\n  * Updated all the control-plane components to use go `1.16.2`.\n\n* CLI:\n  * Fixed an issue where the linkerd identity command returned the root\n    certificate of a pod instead of its leaf certificates\n  * Fixed an issue where the destination service would respond with too\n    big of a header and result in http2 protocol errors\n  * Updated the release process to build Linkerd CLI binaries for Apple\n    Silicon M1 chips\n  * Improved error messaging when trying to install Linkerd on a cluster\n    that already had Linkerd installed\n  * Added a loading spinner to the linkerd check command when running\n    extension checks\n  * Added installNamespace toggle in the jaeger extension's install.\n    (thanks @jijeesh!)\n  * Updated healthcheck pkg to have hintBaseURL configurable, useful\n    for external extensions using that pkg\n  * Fixed TCP read and write bytes/sec calculations to group by label\n    based off inbound or outbound traffic\n  * Fixed an issue in linkerd inject where the wrong annotation would\n    be added when using --ingress flag\n  * Updated `linkerd repair` to be aware of the client and server versions\n  * Updated `linkerd uninstall` to print error message when there are no\n    resources to uninstall.\n\n* Helm:\n  * Aligned the Helm installation heartbeat schedule to match that of the CLI\n\n* Viz:\n  * Fixed an issue where the topology graph in the dashboard was no\n    longer draggable.\n  * Updated dashboard build to use webpack v5\n  * Added CA certs to the Viz extension's metrics-api container so\n    that it can validate the certificate of an external Prometheus\n  * Removed components from the control plane dashboard that now\n    are part of the Viz extension\n  * Changed web's base image from debian to scratch\n\n* Multicluster:\n  * Fixed an issue with Multicluster's service mirror where its endpoint\n    repair retries were not properly rate limited\n\n* Jaeger:\n  * Fixed components in the Jaeger extension to set the correct Prometheus\n    scrape values\n\n## edge-21.4.3\n\nThis edge supersedes `edge-21.4.2` as a release candidate for `stable-2.10.1`!\n\nThis release adds support for TrafficSplit `v1alpha2`. Additionally, It includes\nimprovements to the web and `proxy-init` images.\n\n* Added Support for TrafficSplit `v1alpha2`\n* Changed web base image from debian to scratch\n* Bumped the `proxy-init` image to `v1.3.11` which updates\n  the go version to be `1.16.2`\n\n## edge-21.4.2\n\nThis edge release is another candidate for `stable-2.10.1`!\n\nIt includes some CLI fixes and addresses an issue where the outbound proxy\nwould forward traffic to the wrong pod when running in ingress mode.\n\nThank you to all of our users that have helped test and identify issues in 2.10!\n\n* Fixed an issue in `linkerd inject` where the wrong annotation would be\n  added when using `--ingress` flag\n* Fixed a nil pointer dereference in `linkerd repair` caused by a mismatch\n  between CLI and server versions\n* Removed an unnecessary error handling condition in multicluster check\n  (thanks @wangchenglong01!)\n* Fixed a caching issue in the outbound proxy that would cause it to\n  forward traffic to the wrong pod when running in ingress mode.\n* Removed unsupported `matches` field from TrafficSplit CRD\n\n## edge-21.4.1\n\nThis is a release candidate for `stable-2.10.1`!\n\nThis includes several fixes for the core installation as well the Multicluster,\nJaeger, and Viz extensions. There are two significant proxy fixes that address\nTLS detection and admin server failures.\n\nThanks to all our 2.10 users who helped discover these issues!\n\n* Fixed TCP read and write bytes/sec calculations to group by label based off\n  inbound or outbound traffic\n* Updated dashboard build to use webpack v5\n* Modified the proxy-injector to add the opaque ports annotation to pods if\n  their namespace has it set\n* Added CA certs to the Viz extension's `metrics-api` container so that it can\n  validate the certificate of an external Prometheus\n* Fixed an issue where inbound TLS detection from non-meshed workloads could\n  break\n* Fixed an issue where the admin server's HTTP detection would fail and not\n  recover; these are now handled gracefully and without logging warnings\n* Aligned the Helm installation heartbeat schedule to match that of the CLI\n* Fixed an issue with Multicluster's service mirror where it's endpoint repair\n  retries were not properly rate limited\n* Removed components from the control plane dashboard that now are part of the\n  Viz extension\n* Fixed components in the Jaeger extension to set the correct Prometheus scrape\n  values\n\n## edge-21.3.4\n\nThis release fixes some issues around publishing of CLI binary\nfor Apple Silicon M1 Chips. This release also includes some fixes and\nimprovements to the dashboard, destination, and the CLI.\n\n* Fixed an issue where the topology graph in the dashboard was no longer\n  draggable\n* Updated the IP Watcher in destination to ignore pods in \"Terminating\" state\n  (thanks @Wenliang-CHEN!)\n* Added `installNamespace` toggle in the jaeger extension's install.\n  (thanks @jijeesh!)\n* Updated `healthcheck` pkg to have `hintBaseURL` configurable, useful\n  for external extensions using that pkg\n* Added multi-arch support for RabbitMQ integration tests (thanks @barkardk!)\n\n## edge-21.3.3\n\nThis release includes various bug fixes and improvements to the CLI, the\nidentity and destination control plane components as well as the proxy. This\nrelease also ships with a new CLI binary for Apple Silicon M1 chips.\n\n* Added new RabbitMQ integration tests (thanks @barkardk!)\n* Updated the Go version to 1.16.2\n* Fixed an issue where the `linkerd identity` command returned the root\n  certificate of a pod instead of its leaf certificate\n* Fixed an issue where the destination service would respond with too big of a\n  header and result in http2 protocol errors\n* Updated the release process to build Linkerd CLI binaries for Apple Silicon\n  M1 chips\n* Improved error messaging when trying to install Linkerd on a cluster that\n  already had Linkerd installed\n* Fixed an issue where the `destination` control plane component sometimes\n  returned endpoint addresses with a `0` port number while pods were\n  undergoing a rollout (thanks @riccardofreixo!)\n* Added a loading spinner to the `linkerd check` command when running extension\n  checks\n* Fixed an issue where pod lookups by host IP and host port fail even though\n  the cluster has a matching pod\n* Control plane proxies no longer emit warnings about the resolution stream\n  ending. This error was innocuous.\n* Fixed an issue where proxies could infinitely retry failed requests to the\n  `destination` controller when it returned a `FailedPrecondition`\n* The proxy's logging infrastructure has been updated to reduce memory pressure\n  in high-connection environments.\n\n## stable-2.10.0\n\nThis release introduces Linkerd extensions. The default control plane no longer\nincludes Prometheus, Grafana, the dashboard, or several other components that\npreviously shipped by default.  This results in a much smaller and simpler set\nof core functionalities.  Visibility and metrics functionality is now available\nin the Viz extension under the `linkerd viz` command.  Cross-cluster\ncommunication functionality is now available in the Multicluster extension\nunder the `linkerd multicluster` command.  Distributed tracing functionality is\nnow available in the Jaeger extension under the `linkerd jaeger` command.\n\nThis release also introduces the ability to mark certain ports as \"opaque\",\nindicating that the proxy should treat the traffic as opaque TCP instead of\nattempting protocol detection.  This allows the proxy to provide TCP metrics\nand mTLS for server-speaks-first protocols.  It also enables support for\nTCP traffic in the Multicluster extension.\n\n**Upgrade notes**: Please see the [upgrade\ninstructions](https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2100).\n\n* Proxy\n  * Updated the proxy to use TLS version 1.3; support for TLS 1.2 remains\n    enabled for compatibility with prior proxy versions\n  * Improved support for server-speaks-first protocols by allowing ports to be\n    marked as opaque, causing the proxy to skip protocol detection.  Ports can\n    be marked as opaque by setting the `config.linkerd.io/opaque-ports`\n    annotation on the Pod and Service or by using the `--opaque-ports` flag with\n    `linkerd inject`\n  * Ports `25,443,587,3306,5432,11211` have been removed from the default skip\n    ports; all traffic through those ports is now proxied and handled opaquely\n    by default\n  * Fixed an issue that could cause proxies in \"ingress mode\"\n    (`linkerd.io/inject: ingress`) to use an excessive amount of memory\n  * Improved diagnostic logging around \"fail fast\" and \"max-concurrency\n    exhausted\" error messages\n  * Added a new `/shutdown` admin endpoint that may only be accessed over the\n    loopback network allowing batch jobs to gracefully terminate the proxy on\n    completion\n\n* Control Plane\n  * Removed all components and functionality related to visibility, tracing,\n    or multicluster.  These have been moved into extensions\n  * Changed the identity controller to receive the trust anchor via environment\n    variable instead of by flag; this allows the certificate to be loaded from a\n    config map or secret (thanks @mgoltzsche!)\n  * Added PodDisruptionBudgets to the control plane components so that they\n    cannot be all terminated at the same time during disruptions\n    (thanks @tustvold!)\n\n* CLI\n  * Changed the `check` command to include each installed extension's `check`\n    output; this allows users to check for proper configuration and installation\n    of Linkerd without running a command for each extension\n  * Moved the `metrics`, `endpoints`, and `install-sp` commands into subcommands\n    under the `diagnostics` command\n  * Added an `--opaque-ports` flag to `linkerd inject` to easily mark ports\n    as opaque.\n  * Added the `repair` command which will repopulate resources needed for\n    properly upgrading a Linkerd installation\n  * Added Helm-style `set`, `set-string`, `values`, `set-files` customization\n    flags for the `linkerd install` and `linkerd upgrade` commands\n  * Introduced the `linkerd identity` command, used to fetch the TLS certificates\n    for injected pods (thanks @jimil749)\n  * Removed the `get` and `logs` command from the CLI\n\n* Helm\n  * Changed many Helm values, please see the upgrade notes\n\n* Viz\n  * Introduced the `linkerd viz` subcommand which contains commands for\n    installing the viz extension and all visibility commands\n  * Updated the Web UI to only display the \"Gateway\" sidebar link when the\n    multicluster extension is active\n  * Added a `linkerd viz list` command to list pods with tap enabled\n  * Fixed an issue where the `tap` APIServer would not refresh its certs\n    automatically when provided externally—like through cert-manager\n\n* Multicluster\n  * Introduced the `linkerd multicluster` subcommand which contains commands for\n    installing the multicluster extension and all multicluster commands\n  * Added support for cross-cluster TCP traffic\n  * Updated the service mirror controller to copy the\n    `config.linkerd.io/opaque-ports` annotation when mirroring services so that\n    cross-cluster traffic can be correctly handled as opaque\n  * Added support for multicluster gateways of types other than LoadBalancer\n    (thanks @DaspawnW!)\n\n* Jaeger\n  * Introduced the `linkerd jaeger` subcommand which contains commands for\n    installing the jaeger extension and all tracing commands\n  * Added a `linkerd jaeger list` command to list pods with tracing enabled\n\nThis release includes changes from a massive list of contributors. A special\nthank-you to everyone who helped make this release possible:\n[Lutz Behnke](https://github.com/cypherfox)\n[Björn Wenzel](https://github.com/DaspawnW)\n[Filip Petkovski](https://github.com/fpetkovski)\n[Simon Weald](https://github.com/glitchcrab)\n[GMarkfjard](https://github.com/GMarkfjard)\n[hodbn](https://github.com/hodbn)\n[Hu Shuai](https://github.com/hs0210)\n[Jimil Desai](https://github.com/jimil749)\n[jiraguha](https://github.com/jiraguha)\n[Joakim Roubert](https://github.com/joakimr-axis)\n[Josh Soref](https://github.com/jsoref)\n[Kelly Campbell](https://github.com/kellycampbell)\n[Matei David](https://github.com/mateiidavid)\n[Mayank Shah](https://github.com/mayankshah1607)\n[Max Goltzsche](https://github.com/mgoltzsche)\n[Mitch Hulscher](https://github.com/mhulscher)\n[Eugene Formanenko](https://github.com/mo4islona)\n[Nathan J Mehl](https://github.com/n-oden)\n[Nicolas Lamirault](https://github.com/nlamirault)\n[Oleh Ozimok](https://github.com/oleh-ozimok)\n[Piyush Singariya](https://github.com/piyushsingariya)\n[Naga Venkata Pradeep Namburi](https://github.com/pradeepnnv)\n[rish-onesignal](https://github.com/rish-onesignal)\n[Shai Katz](https://github.com/shaikatz)\n[Takumi Sue](https://github.com/tkms0106)\n[Raphael Taylor-Davies](https://github.com/tustvold)\n[Yashvardhan Kukreja](https://github.com/yashvardhan-kukreja)\n\n## edge-21.3.2\n\nThis edge release is another release candidate for stable 2.10 and fixes some\nfinal bugs found in testing. A big thank you to users who have helped us\nidentity these issues!\n\n* Fixed an issue with the service profile validating webhook that prevented\n  service profiles from being added or updated\n* Updated the `check` command output hint anchors to match Linkerd component\n  names\n* Fixed a permission issue with the Viz extension's tap admin cluster role by\n  adding namespace listing to the allowed actions\n* Fixed an issue with the proxy where connections would not be torn down when\n  communicating with a defunct endpoint\n* Improved diagnostic logging in the proxy\n* Fixed an issue with the Viz extension's Prometheus template that prevented\n  users from specifying a log level flag for that component (thanks @n-oden!)\n* Fixed a template parsing issue that prevented users from specifying additional\n  ignored inbound parts through Helm's `--set` flag\n* Fixed an issue with the proxy where non-HTTP streams could sometimes hang due\n  to TLS buffering\n\n## edge-21.3.1\n\nThis edge release is another release candidate, bringing us closer to\n`stable-2.10.0`! It fixes the Helm install/upgrade procedure and ships some new\nCLI commands, among other improvements.\n\n* Fixed Helm install/upgrade, which was failing when not explicitly setting\n  `proxy.image.version`\n* Added a warning in the dashboard when viewing tap streams from resources that\n  don't have tap enabled\n* Added the command `linkerd viz list` to list meshed pods and indicate which can\n  be tapped, which need to be restarted before they can be tapped, and which\n  have tap disabled\n* Similarly, added the command `linkerd jaeger list` to list meshed pods and\n  indicate which will participate in tracing\n* Added the `--opaque-ports` flag to `linkerd inject` to specify the list of\n  opaque ports when injecting pods (and services)\n* Simplified the output of `linkerd jaeger check`, combining the checks for the\n  status of each component into a single check\n* Changed the destination component to receive the list of default opaque ports\n  set during install so that it's properly reflected during discovery\n* Moved the level of the proxy server's I/O-related \"Connection closed\" messages\n  from info to debug, which were not providing actionable information\n\n## edge-21.2.4\n\nThis edge is a release candidate for `stable-2.10.0`! It wraps up the functional\nchanges planned for the upcoming stable release. We hope you can help us test\nthis in your staging clusters so that we can address anything unexpected before\nan official stable.\n\nThis release introduces support for CLI extensions. The Linkerd `check` command\nwill now invoke each extension's `check` command so that users can check the\nhealth of their Linkerd installation and extensions with one command. Additional\ndocumentation will follow for developers interested in creating extensions.\n\nAdditionally, there is no longer a default list of ports skipped by the proxy.\nThese ports have been moved to opaque ports, meaning protocols like MySQL will\nbe encrypted by default and without user input.\n\n* Cleaned up entries in `values.yaml` by removing `do not edit` entries; they\n  are now hardcoded in the templates\n* Added the count of service profiles installed in a cluster to the Heartbeat\n  metrics\n* Fixed CLI commands which would unnecessarily print usage instructions after\n  encountering API errors (thanks @piyushsingariya!)\n* Fixed the `install` command so that it errors after detecting there is an\n  existing Linkerd installation in the cluster\n* Changed the identity controller to receive the trust anchor via environment\n  variable instead of by flag; this allows the certificate to be loaded from a\n  config map or secret (thanks @mgoltzsche!)\n* Updated the proxy to use TLS version 1.3; support for TLS 1.2 remains enabled\n  for compatibility with prior proxy versions\n* The opaque ports annotation is now supported on services and enables users to\n  use this annotation on mirrored services in multicluster installations\n* Reverted the renaming of the `mirror.linkerd.io` label\n* Ports `25,443,587,3306,5432,11211` have been removed from the default skip\n  ports; all traffic through those ports is now proxied and handled opaquely by\n  default\n* Errors configuring the firewall in CNI are propagated so that they can be\n  handled by the user\n* Removed Viz extension warnings from the `check --proxy` command when tap is\n  not configured for pods; this is now handled by the `viz tap` command\n* Added support for CLI extensions as well as ensuring their `check` commands\n  are invoked by Linkerd's `check` command\n* Moved the `metrics`, `endpoints`, and `install-sp` commands into subcommands\n  under the `diagnostics` command.\n* Removed the `linkerd-` prefix from non-cluster scoped resources in the Viz and\n  Jaeger extensions\n* Added the linkerd-await helper to all Linkerd containers so that the proxy can\n  initialize before the components start making outbound connections\n* Removed the `tcp_connection_duration_ms` histogram from the metrics export to\n  fix high cardinality issues that surfaced through high memory usage\n\n## edge-21.2.3\n\nThis release wraps up most of the functional changes planned for the upcoming\n`stable-2.10.0` release. Try this edge release in your staging cluster and\nlet us know if you see anything unexpected!\n\n* **Breaking change**: Changed the multicluster `Service`-export annotation\n  from `mirror.linkerd.io/exported` to `multicluster.linkerd.io/export`\n* Updated the proxy-injector to to set the `config.linkerd.io/opaque-ports`\n  annotation on newly-created `Service` objects when the annotation is set on\n  its parent `Namespace`\n* Updated the proxy-injector to ignore pods that have disabled\n  `automountServiceAccountToken` (thanks @jimil749)\n* Updated the proxy to log warnings when control plane components are\n  unresolveable\n* Updated the Destination controller to cache node topology metadata (thanks\n  @fpetkovski)\n* Updated the CLI to handle API errors without printing the CLI usage (thanks\n  @piyushsingariya)\n* Updated the Web UI to only display the \"Gateway\" sidebar link when the\n  multicluster extension is active\n* Fixed the Web UI on Chrome v88 (thanks @kellycampbell)\n* Improved `install` and `uninstall` behavior for extensions to prevent\n  control-plane components from being left in a broken state\n* Docker images are now hosted on the `cr.l5d.io` registry\n* Updated base docker images to buster-20210208-slim\n* Updated the Go version to 1.14.15\n* Updated the proxy to prevent outbound connections to localhost to protect\n  against traffic loops\n\n## edge-21.2.2\n\nThis edge release introduces support for multicluster TCP!\n\nThe `repair` command was added which will repopulate resources needed for\nupgrading from a `2.9.x` installation. There will be an error message during the\nupgrade process indicating that this command should be run so that users do not\nneed to guess.\n\nLastly, it contains a breaking change for Helm users. The `global` field has\nbeen removed from the Helm chart now that it is no longer needed. Users will\nneed to pass in the identity certificates again—along with any other\ncustomizations, no longer rooted at `global`.\n\n* **Breaking change**: Removed the `Global` field from the Linkerd Helm chart\n  now that it is unused because of the extension model\n* Added the `repair` command which will repopulate resources needed for properly\n  upgrading a Linkerd installation\n* Fixed the spelling of the `sidecarContainers` key in the Viz extension Helm\n  chart to match that of the template (thanks @n-oden!)\n* Added the `tapInjector.logLevel` key to the Viz extension helm chart so that\n  the log level of the component can be configured\n* Removed the `--disable-tap` flag from the `inject` command now that tap is no\n  longer part of the core installation (thanks @mayankshah1607!)\n* Changed proxy configuration to use fully-qualified DNS names to avoid extra\n  search paths in DNS resolutions\n* Changed the `check` command to include each installed extension's `check`\n  output; this allows users to check for proper configuration and installation\n  of Linkerd without running a command for each extension\n* Added proxy support for TCP traffic to the multicluster gateways\n\n## edge-21.2.1\n\nThis edge release continues improving the proxy's diagnostics and also avoids\ntiming out when the HTTP protocol detection fails. Additionally, old resource\nversions were upgraded to avoid warnings in k8s v1.19. Finally, it comes with\nlots of CLI improvements detailed below.\n\n* Improved the proxy's diagnostic metrics to help us get better insights into\n  services that are in fail-fast\n* Improved the proxy's HTTP protocol detection to prevent timeout errors\n* Upgraded CRD and webhook config resources to get rid of warnings in k8s v1.19\n  (thanks @mateiidavid!)\n* Added viz components into the Linkerd Health Grafana charts\n* Had the tap injector add a `viz.linkerd.io/tap-enabled` annotation when\n  injecting a pod, which allowed providing clearer feedback for the `linkerd\n  tap` command\n* Had the jaeger injector add a `jaeger.linkerd.io/tracing-enabled` annotation\n  when injecting a pod, which also allowed providing better feedback for the\n  `linkerd jaeger check` command\n* Improved the `linkerd uninstall` command so it fails gracefully when there\n  still are injected resources in the cluster (a `--force` flag was provided\n  too)\n* Moved the `linkerd profile --tap` functionality into a new command `linkerd\n  viz profile --tap`, given tap now belongs to the viz extension\n* Expanded the `linkerd viz check` command to include data-plane checks\n* Cleaned-up YAML in templates that was incompatible with SOPS (thanks\n  @tkms0106!)\n\n## edge-21.1.4\n\nThis edge release continues to polish the Linkerd extension model and improves\nthe robustness of the opaque transport.\n\n* Improved the consistency of behavior of the `check` commands between\n  Linkerd extensions\n* Fixed an issue where Linkerd extension commands could be run before the\n  extension was fully installed\n* Renamed some extension Helm charts for consistency:\n  * jaeger -> linkerd-jaeger\n  * linkerd2-multicluster -> linkerd-multicluster\n  * linkerd2-multicluster-link -> linkerd-multicluster-link\n* Fixed an issue that could cause the inbound proxy to fail meshed HTTP/1\n  requests from older proxies (from the stable-2.8.x vintage)\n* Changed opaque-port transport to be advertised via ALPN so that new proxies\n  will not initiate opaque-transport connections to proxies from prior edge\n  releases\n* Added inbound proxy transport metrics with `tls=\"passthru\"` when forwarding\n  non-mesh TLS connections\n* Thanks to @hs0210 for adding new unit tests!\n\n## edge-21.1.3\n\nThis edge release improves proxy diagnostics and recovery in situations where\nthe proxy is temporarily unable to route requests. Additionally, the `viz` and\n`multicluster` CLI sub-commands have been updated for consistency.\n\nFull release notes:\n\n* Added Helm-style `set`, `set-string`, `values`, `set-files` customization\n  flags for the `linkerd install` and `linkerd multicluster install` commands\n* Fixed an issue where `linkerd metrics` could return metrics for the incorrect\n  set of pods when there are overlapping label selectors\n* Added tap-injector to linkerd-viz which is responsible for adding the tap\n  service name environment variable to the Linkerd proxy container\n* Improved diagnostics when the proxy is temporarily unable to route requests\n* Made proxy recovery for a service more robust when the proxy is unable to\n  route requests, even when new requests are being received\n* Added `client` and `server` prefixes in the proxy logs for socket-level errors\n  to indicate which side of the proxy encountered the error\n* Improved jaeger-injector reliability in environments with many resources by\n  adding watch RBAC permissions\n* Added check to confirm whether the jaeger-injector pod is in running state\n  (thanks @yashvardhan-kukreja!)\n* Fixed a crash in the destination controller when EndpointSlices are enabled\n  (thanks @oleh-ozimok!)\n* Added a `linkerd viz check` sub-command to verify the states of the\n  `linkerd-viz` components\n* Added a `log-format` flag to optionally output the control plane component log\n  output as JSON (thanks @mo4islona!)\n* Updated the logic in the `metrics` and `profile` subcommands to use the\n  `namespace` specified by the `current-context` of the KUBECONFIG so that it is\n  no longer necessary to use the `--namespace` flag to query resources in the\n  current namespace. Queries for resources in namespaces other than the\n  current namespace still require the `--namespace` flag\n* Added new pod 'linkerd-metrics-api' set up by `linkerd viz install` that\n  manages all functionality dependent on Prometheus, thus removing most of the\n  dependencies on Prometheus from the linkerd core installation\n* Removed need to have linkerd-viz installed for the\n  `linkerd multicluster check` command to properly work.\n\n## edge-21.1.2\n\nThis edge release continues the work on decoupling non-core Linkerd components.\nCommands that use the viz extension i.e, `dashboard`, `edges`, `routes`,\n`stat`, `tap` and `top` are moved to the `viz` sub-command. These commands are still\navailable under root but are marked as deprecated and will be removed in a\nlater stable release.\n\nThis release also upgrades the proxy's dependencies to the Tokio v1 ecosystem.\n\n* Moved sub-commands that use the viz extension under `viz`\n* Started ignoring pods with `Succeeded` status when watching IP addresses\n  in destination. This allows the re-use of IPs of terminated pods\n* Support Bring your own Jaeger use-case by adding `collector.jaegerAddr` in\n  the Jaeger extension.\n* Fixed an issue with the generation of working manifests in the\n  `podAntiAffinity` use-case\n* Added support for the modification of proxy resources in the viz\n  extension through `values.yaml` in Helm and flags in CLI.\n* Improved error reporting for port-forward logic with namespace\n  and pod data, used across dashboard, checks, etc\n  (thanks @piyushsingariya)\n* Added support to disable the rendering of `linkerd-viz` namespace\n  resource in the viz extension (thanks @nlamirault)\n* Made service-profile generation work offline with `--ignore-cluster`\n  flag (thanks @piyushsingariya)\n* Upgraded the proxy's dependencies to the Tokio v1 ecosystem\n\n## edge-21.1.1\n\nThis edge release introduces a new \"opaque transport\" feature that allows the\nproxy to securely transport server-speaks-first and otherwise opaque TCP\ntraffic. Using the `config.linkerd.io/opaque-ports` annotation on pods and\nnamespaces, users can configure ports that should skip the proxy's protocol\ndetection.\n\nAdditionally, a new `linkerd-viz` extension has been introduced that separates\nthe installation of the Grafana, Prometheus, web, and tap components. This\nextension closely follows the Jaeger and multicluster extensions; users can\n`install` and `uninstall` with the `linkerd viz ..` command as well as configure\nfor HA with the `--ha` flag.\n\nThe `linkerd viz install` command does not have any cli flags to customize the\ninstall directly, but instead follows the Helm way of customization by using\nflags such as `set`, `set-string`, `values`, `set-files`.\n\nFinally, a new `/shutdown` admin endpoint that may only be accessed over the\nloopback network has been added. This allows batch jobs to gracefully terminate\nthe proxy on completion. The `linkerd-await` utility can be used to automate\nthis.\n\n* Added a new `linkerd multicluster check` command to validate that the\n  `linkerd-multicluster` extension is working correctly\n* Fixed description in the `linkerd edges` command (thanks @jsoref!)\n* Moved the Grafana, Prometheus, web, and tap components into a new Viz chart,\n  following the same extension model that multicluster and Jaeger follow\n* Introduced a new \"opaque transport\" feature that allows the proxy to securely\n  transport server-speaks-first and otherwise opaque TCP traffic\n* Removed the check comparing the `ca.crt` field in the identity issuer secret\n  and the trust anchors in the Linkerd config; these values being different is\n  not a failure case for the `linkerd check` command (thanks @cypherfox!)\n* Removed the Prometheus check from the `linkerd check` command since it now\n  depends on a component that is installed with the Viz extension\n* Fixed error messages thrown by the cert checks in `linkerd check` (thanks\n  @pradeepnnv!)\n* Added PodDisruptionBudgets to the control plane components so that they cannot\n  be all terminated at the same time during disruptions (thanks @tustvold!)\n* Fixed an issue that displayed the wrong `linkerd.io/proxy-version` when it is\n  overridden by annotations (thanks @mateiidavid!)\n* Added support for custom registries in the `linkerd-viz` helm chart (thanks\n  @jimil749!)\n* Renamed `proxy-mutator` to `jaeger-injector` in the `linkerd-jaeger` extension\n* Added a new `/shutdown` admin endpoint that may only be accessed over the\n  loopback network allowing batch jobs to gracefully terminate the proxy on\n  completion\n* Introduced the `linkerd identity` command, used to fetch the TLS certificates\n  for injected pods (thanks @jimil749)\n* Fixed an issue with the CNI plugin where it was incorrectly terminating and\n  emitting error events (thanks @mhulscher!)\n* Re-added support for non-LoadBalancer service types in the\n  `linkerd-multicluster` extension\n\n## edge-20.12.4\n\nThis edge release adds support for the `config.linkerd.io/opaque-ports`\nannotation on pods and namespaces, to configure ports that should skip the\nproxy's protocol detection. In addition, it adds new CLI commands related to the\n`linkerd-jaeger` extension, fixes bugs in the CLI `install` and `upgrade`\ncommands and Helm charts, and fixes a potential false positive in the proxy's\nHTTP protocol detection. Finally, it includes improvements in proxy performance\nand memory usage, including an upgrade for the proxy's dependency on the Tokio\nasync runtime.\n\n* Added support for the `config.linkerd.io/opaque-ports` annotation on pods and\n  namespaces, to indicate to the proxy that some ports should skip protocol\n  detection\n* Fixed an issue where `linkerd install --ha` failed to honor flags\n* Fixed an issue where `linkerd upgrade --ha` can override existing configs\n* Added missing label to the `linkerd-config-overrides` secret to avoid breaking\n  upgrades performed with the help of `kubectl apply --prune`\n* Added a missing icon to Jaeger Helm chart\n* Added new `linkerd jaeger check` CLI command to validate that the\n  `linkerd-jaeger` extension is working correctly\n* Added new `linkerd jaeger uninstall` CLI command to print the `linkerd-jaeger`\n  extension's resources so that they can be piped into `kubectl delete`\n* Fixed an issue where the `linkerd-cni` daemonset may not be installed on all\n  intended nodes, due to missing tolerations to the `linkerd-cni` Helm chart\n  (thanks @rish-onesignal!)\n* Fixed an issue where the `tap` APIServer would not refresh its certs\n  automatically when provided externally—like through cert-manager\n* Changed the proxy's cache eviction strategy to reduce memory consumption,\n  especially for busy HTTP/1.1 clients\n* Fixed an issue in the proxy's HTTP protocol detection which could cause false\n  positives for non-HTTP traffic\n* Increased the proxy's default dispatch timeout to 5 seconds to accommodate\n  connection pools which might open connections without immediately making a\n  request\n* Updated the proxy's Tokio dependency to v0.3\n\n## edge-20.12.3\n\nThis edge release is functionally the same as `edge-20.12.2`. It fixes an issue\nthat prevented the release build from occurring.\n\n## edge-20.12.2\n\n* Fixed an issue where the `proxy-injector` and `sp-validator` did not refresh\n  their certs automatically when provided externally—like through cert-manager\n* Added support for overrides flags to the `jaeger install` command to allow\n  setting Helm values when installing the Linkerd-jaeger extension\n* Added missing Helm values to the multicluster chart (thanks @DaspawnW!)\n* Moved tracing functionality to the `linkerd-jaeger` extension\n* Fixed various issues in developer shell scripts (thanks @joakimr-axis!)\n* Fixed an issue where `install --ha` was only partially applying the high\n  availability config\n* Updated RBAC API versions in the CNI chart (thanks @glitchcrab!)\n* Fixed an issue where TLS credentials are changed during upgrades, but the\n  Linkerd webhooks would not restart, leaving them to use older credentials and\n  fail requests\n* Stopped publishing the multicluster link chart as its primary use case is in\n  the `multicluster link` command and not being installed through Helm\n* Added service mirror error logs for when the multicluster gateway's hostname\n  cannot be resolved.\n\n## edge-20.12.1\n\nThis edge release continues the work of decoupling non-core Linkerd components\nby moving more tracing related functionality into the Linkerd-jaeger extension.\n\n* Continued work on moving tracing functionality from the main control plane\n  into the `linkerd-jaeger` extension\n* Fixed a potential panic in the proxy when looking up a socket's peer address\n  while under high load\n* Added automatic readme generation for charts (thanks @GMarkfjard!)\n* Fixed zsh completion for the CLI (thanks @jiraguha!)\n* Added support for multicluster gateways of types other than LoadBalancer\n  (thanks @DaspawnW!)\n\n## edge-20.11.5\n\nThis edge release improves the proxy's support high-traffic workloads. It also\ncontains the first steps towards decoupling non-core Linkerd components, the\nfirst iteration being a new `linkerd jaeger` sub-command for installing tracing.\nPlease note this is still a work in progress.\n\n* Addressed some issues reported around clients seeing max-concurrency errors by\n  increasing the default in-flight request limit to 100K pending requests\n* Have the proxy appropriately set `content-type` when synthesizing gRPC error\n  responses\n* Bumped the `proxy-init` image to `v1.3.8` which is based off of\n  `buster-20201117-slim` to reduce potential security vulnerabilities\n* No longer panic in rare cases when `linkerd-config` doesn't have an entry for\n  `Global` configs (thanks @hodbn!)\n* Work in progress: the `/jaeger` directory now contains the charts and commands\n  for installing the tracing component.\n\n## edge-20.11.4\n\n* Fixed an issue in the destination service where endpoints always included a\n  protocol hint, regardless of the controller label being present or not\n\n## edge-20.11.3\n\nThis edge release improves support for CNI by properly handling parameters\npassed to the `nsenter` command, relaxes checks on root and intermediate\ncertificates (following X509 best practices), and fixes two issues: one that\nprevented installation of the control plane into a custom namespace and one\nwhich failed to update endpoint information when a headless service is modified.\nThis release also improves linkerd proxy performance by eliminating unnecessary\nendpoint resolutions for TCP traffic and properly tearing down serverside\nconnections when errors occur.\n\n* Added HTTP/2 keepalive PING frames\n* Removed logic to avoid redundant TCP endpoint resolution\n* Fixed an issue where serverside connections were not torn down when an error\n  occurs\n* Updated `linkerd check` so that it doesn't attempt to validate the subject\n  alternative name (SAN) on root and intermediate certificates. SANs for leaf\n  certificates will continue to be validated\n* Fixed a CLI issue where the `linkerd-namespace` flag is not honored when\n  passed to the `install` and `upgrade` commands\n* Fixed an issue where the proxy does not receive updated endpoint information\n  when a headless service is modified\n* Updated the control plane Docker images to use `buster-20201117-slim` to\n  reduce potential security vulnerabilities\n* Updated the proxy-init container to `v1.3.7` which fixes CNI issues in certain\n  environments by properly parsing `nsenter` args\n\n## edge-20.11.2\n\nThis edge release reduces memory consumption of Linkerd proxies which maintain\nmany idle connections (such as Prometheus).  It also removes some obsolete\ncommands from the CLI and allows setting custom annotations on multicluster\ngateways.\n\n* Reduced the default idle connection timeout to 5s for outbound clients and\n  20s for inbound clients to reduce the proxy's memory footprint, especially on\n  Prometheus instances\n* Added support for setting annotations on the multicluster gateway in Helm\n  which allows setting the load balancer as internal (thanks @shaikatz!)\n* Removed the `get` and `logs` command from the CLI\n\n## stable-2.9.0\n\nThis release extends Linkerd's zero-config mutual TLS (mTLS) support to all TCP\nconnections, allowing Linkerd to transparently encrypt and authenticate all TCP\nconnections in the cluster the moment it's installed. It also adds ARM support,\nintroduces a new multi-core proxy runtime for higher throughput, adds support\nfor Kubernetes service topologies, and lots, lots more, as described below:\n\n* Proxy\n  * Performed internal improvements for lower latencies under high concurrency\n  * Reduced performance impact of logging, especially when the `debug` or\n    `trace` log levels are disabled\n  * Improved error handling for DNS errors encountered when discovering control\n    plane addresses; this can be common during installation before all\n    components have been started, allowing linkerd to continue to operate\n    normally in HA during node outages\n\n* Control Plane\n  * Added support for [topology-aware service\n    routing](https://kubernetes.io/docs/concepts/services-networking/service-topology/)\n    to the Destination controller; when providing service discovery updates to\n    proxies the Destination controller will now filter endpoints based on the\n    service's topology preferences\n  * Added support for the new Kubernetes\n    [EndpointSlice](https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/)\n    resource to the Destination controller; Linkerd can be installed with\n    `--enable-endpoint-slices` flag to use this resource rather than the\n    Endpoints API in clusters where this new API is supported\n\n* Dashboard\n  * Added new Spanish translations (please help us translate into your\n    language!)\n  * Added new section for exposing multicluster gateway metrics\n\n* CLI\n  * Renamed the `--addon-config` flag to `--config` to clarify this flag can be\n    used to set any Helm value\n  * Added fish shell completions to the `linkerd` command\n\n* Multicluster\n  * Replaced the single `service-mirror` controller with separate controllers\n    that will be installed per target cluster through `linkerd multicluster\n    link`\n  * Changed the mechanism for mirroring services: instead of relying on\n    annotations on the target services, now the source cluster should specify\n    which services from the target cluster should be exported by using a label\n    selector\n  * Added support for creating multiple service accounts when installing\n    multicluster with Helm to allow more granular revocation\n  * Added a multicluster `unlink` command for removing multicluster links\n\n* Prometheus\n  * Moved Linkerd's bundled Prometheus into an add-on (enabled by default); this\n    makes the Linkerd Prometheus more configurable, gives it a separate upgrade\n    lifecycle from the rest of the control plane, and allows users to\n    disable the bundled Prometheus instance\n  * The long-awaited Bring-Your-Own-Prometheus case has been finally addressed:\n    added `global.prometheusUrl` to the Helm config to have linkerd use an\n    external Prometheus instance instead of the one provided by default\n  * Added an option to persist data to a volume instead of memory, so that\n    historical metrics are available when Prometheus is restarted\n  * The helm chart can now configure persistent storage and limits\n\n* Other\n  * Added a new `linkerd.io/inject: ingress` annotation and accompanying\n    `--ingress` flag to the `inject` command, to configure the proxy to support\n    service profiles and enable per-route metrics and traffic splits for HTTP\n    ingress controllers\n  * Changed the type of the injector and tap API secrets to `kubernetes.io/tls`\n    so they can be provisioned by cert-manager\n  * Changed default docker image repository to `ghcr.io` from `gcr.io`; **Users\n    who pull the images into private repositories should take note of this\n    change**\n  * Introduced support for authenticated docker registries\n  * Simplified the way that Linkerd stores its configuration; configuration is\n    now stored as Helm values in the `linkerd-config` ConfigMap\n  * Added support for Helm configuration of per-component proxy resources\n    requests\n\nThis release includes changes from a massive list of contributors. A special\nthank-you to everyone who helped make this release possible: [Abereham G\nWodajie](https://github.com/Abrishges), [Alexander\nBerger](https://github.com/alex-berger), [Ali\nAriff](https://github.com/aliariff), [Arthur Silva\nSens](https://github.com/ArthurSens), [Chris\nCampbell](https://github.com/campbel), [Daniel\nLang](https://github.com/mavrick), [David Tyler](https://github.com/DaveTCode),\n[Desmond Ho](https://github.com/DesmondH0), [Dominik\nMünch](https://github.com/muenchdo), [George\nGarces](https://github.com/jgarces21), [Herrmann\nHinz](https://github.com/HerrmannHinz), [Hu Shuai](https://github.com/hs0210),\n[Jeffrey N. Davis](https://github.com/penland365), [Joakim\nRoubert](https://github.com/joakimr-axis), [Josh\nSoref](https://github.com/jsoref), [Lutz Behnke](https://github.com/cypherfox),\n[MaT1g3R](https://github.com/MaT1g3R), [Marcus Vaal](https://github.com/mvaal),\n[Markus](https://github.com/mbettsteller), [Matei\nDavid](https://github.com/mateiidavid), [Matt\nMiller](https://github.com/mmiller1), [Mayank\nShah](https://github.com/mayankshah1607),\n[Naseem](https://github.com/naseemkullah), [Nil](https://github.com/c-n-c),\n[OlivierB](https://github.com/olivierboudet), [Olukayode\nBankole](https://github.com/rbankole), [Paul\nBalogh](https://github.com/javaducky), [Rajat\nJindal](https://github.com/rajatjindal), [Raphael\nTaylor-Davies](https://github.com/tustvold), [Simon\nWeald](https://github.com/glitchcrab), [Steve\nGray](https://github.com/steve-gray), [Suraj\nDeshmukh](https://github.com/surajssd), [Tharun\nRajendran](https://github.com/tharun208), [Wei Lun](https://github.com/WLun001),\n[Zhou Hao](https://github.com/zhouhao3), [ZouYu](https://github.com/Hellcatlk),\n[aimbot31](https://github.com/aimbot31),\n[iohenkies](https://github.com/iohenkies), [memory](https://github.com/memory),\nand [tbsoares](https://github.com/tbsoares)\n\n## edge-20.11.1\n\nThis edge supersedes edge-20.10.6 as a release candidate for stable-2.9.0.\n\n* Fixed issue where the `check` command would error when there is no Prometheus\n  configured\n* Fixed recent regression that caused multicluster on EKS to not work properly\n* Changed the `check` command to warn instead of error when webhook certificates\n  are near expiry\n* Added the `--ingress` flag to the `inject` command which adds the recently\n  introduced `linkerd.io/inject: ingress` annotation\n* Fixed issue with upgrades where external certs would be fetched and stored\n  even though this does not happen on fresh installs with externally created\n  certs\n* Fixed issue with upgrades where the issuer cert expiration was being reset\n* Removed the `--registry` flag from the `multicluster install` command\n* Removed default CPU limits for the proxy and control plane components in HA\n  mode\n\n## edge-20.10.6\n\nThis edge supersedes edge-20.10.5 as a release candidate for stable-2.9.0. It\nadds a new `linkerd.io/inject: ingress` annotation to support service profiles\nand enable per-route metrics and traffic splits for HTTP ingress controllers\n\n* Added a new `linkerd.io/inject: ingress` annotation to configure the\n  proxy to support service profiles and enable per-route metrics and traffic\n  splits for HTTP ingress controllers\n* Reduced performance impact of logging in the proxy, especially when the\n  `debug` or `trace` log levels are disabled\n* Fixed spurious warnings logged by the `linkerd profile` CLI command\n\n## edge-20.10.5\n\nThis edge supersedes edge-20.10.4 as a release candidate for stable-2.9.0. It\nadds a fix for updating the destination service when there are no endpoints\n\n* Added a fix to clear the EndpointTranslator state when it gets a\n  `NoEndpoints` message. This ensures that the clients get the correct set of\n  endpoints during an update.\n\n## edge-20.10.4\n\nThis edge release is a release candidate for stable-2.9.0. For the proxy, there\nhave been changes to improve performance, remove unused code, and configure\nports that can be ignored by default. Also, this edge release adds enhancements\nto the multicluster configuration and observability, adds more translations to\nthe dashboard, and addresses a bug in the CLI.\n\n* Added more Spanish translations to the dashboard and more labels that can be\n  translated\n* Added support for creating multiple service accounts when installing\n  multicluster with Helm to allow more granular revocation\n* Renamed `global.proxy.destinationGetNetworks` to `global.clusterNetworks`.\n  This is a cluster-wide setting and can no longer be overridden per-pod\n* Fixed an empty multicluster Grafana graph which used a deprecated label\n* Added the control plane tracing ServiceAccounts to the linkerd-psp\n  RoleBinding so that it can be used in environments where PodSecurityPolicy\n  is enabled\n* Enhanced EKS support by adding `100.64.0.0/10` to the set of discoverable\n  networks\n* Fixed a bug in the way that the `--all-namespaces` flag is handled by the\n  `linkerd edges` command\n* Added a default set of ports to bypass the proxy for server-first, https,\n  and memcached traffic\n\n## edge-20.10.3\n\nThis edge release is a release candidate for stable-2.9.0.  It overhauls the\ndiscovery and routing logic implemented by the proxy, simplifies the way that\nLinkerd stores configuration, and adds new Helm values to configure additional\nlabels, annotations, and namespace selectors for webhooks.\n\n* Added podLabels and podAnnotations Helm values to allow adding additional\n  labels or annotations to Linkerd control plane pods (thanks @tustvold!)\n* Added namespaceSelector Helm value for configuring the namespace selector\n  used by admission webhooks (thanks @tustvold!)\n* Expanded the 'linkerd edges' command to show TCP connections\n* Overhauled the discovery and routing logic implemented by the proxy:\n  * The `l5d-dst-override` header is no longer honored\n  * When the application attempts to connect to a pod IP, the proxy no\n    longer load balances these requests among all pods in the service.\n    The proxy will now honor session-stickiness as selected by an\n    application-level load balancer\n  * `TrafficSplits` are only applied when a client targets a service's IP\n  * The proxy no longer performs DNS \"canonicalization\" to translate\n    relative host header names to a fully-qualified form\n* Simplified the way that Linkerd stores its configuration.  Configuration is\n  now stored as Helm values in the linkerd-config ConfigMap\n* Renamed the --addon-config flag to --config to clarify this flag can be used\n  to set any Helm value\n\n## edge-20.10.2\n\nThis edge release adds more improvements for mTLS for all TCP traffic.\nIt also includes significant internal improvements to the way Linkerd\nconfiguration is stored within the cluster.\n\n* Changed TCP metrics exported by the proxy to ensure that peer\n  identities are encoded via the `client_id` and `server_id` labels.\n* Removed the dependency of control plane components on `linkerd-config`\n* Updated the data structure `proxy-injector` uses to derive the configuration\n  used when injecting workloads\n\n## edge-20.10.1\n\nThis edge release includes a couple of external contributions towards\nimproved cert-manager support and Grafana charts fixes, among other\nenhancements.\n\n* Changed the type of the injector and tap API secrets to `kubernetes.io/tls`,\n  so they can be provisioned by cert-manager (thanks @cypherfox!)\n* Fixed the \"Kubernetes cluster monitoring\" Grafana dashboard that had a few\n  charts with incomplete data (thanks @aimbot31!)\n* Fixed the `service-mirror` multicluster component so that it retries\n  connections to the target cluster's Kubernetes API when it's not reachable,\n  instead of blocking\n* Increased the proxy's default timeout for DNS resolution to 500ms, as there\n  were reports that 100ms was too restrictive\n\n## edge-20.9.4\n\nThis edge release introduces support for authenticated docker registries and\nfixes a recent multicluster regression.\n\n* Fixed a regression in multicluster gateway configurations that would forbid\n  inbound gateway traffic\n* Upgraded bundled Grafana to v7.1.5\n* Enabled Jaeger receiver in collector configuration in Helm chart (thanks\n  @olivierboudet!)\n* Fixed skip port configuration being skipped in CNI plugin\n* Introduced support for authenticated docker registries (thanks @c-n-c!)\n\n## edge-20.9.3\n\nThis edge release includes fixes and updates for the control plane and CLI.\n\n* Added `--dest-cni-bin-dir` flag to the `linkerd install-cni` command, to\n  configure the directory on the host where the CNI binary will be placed\n* Removed `collector.name` and `jaeger.name` config fields from the tracing\n  addon\n* Updated Jaeger to 1.19.2\n* Fixed a warning about deprecated Go packages in controller container logs\n\n## edge-20.9.2\n\nThis edge release continues the work of adding support for mTLS for all TCP\ntraffic and changes the default container registry to `ghcr.io` from `gcr.io`.\n\nIf you are upgrading from `stable-2.8.x` with the Linkerd CLI using the\n`linkerd upgrade` command, you must add the `--addon-overwrite` flag to ensure\nthat the grafana image is properly set.\n\n* Removed the default timeout for ServiceProfiles so that ServiceProfile routes\n  behave the same as when there is no ServiceProfile definition\n* Changed default docker image repository to ghcr.io from gcr.io. **Users who\n  pull the images into private repositories should take note of this change**\n* Added endpoint labels to outbound TCP metrics to provide more context and\n  detail for the metrics, add load balancing to TCP connections\n  (bypassing kube-proxy), and secure the connection with mTLS when both\n  endpoints are meshed\n* Made unnamed ServiceProfile discovery configurable using the\n  `proxy.destinationGetNetworks` variable to set the\n  `LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS` variable in the proxy chart\n  template\n* Added TLS certificate validation for the Injector, SP Validator, and Tap\n  webhooks to the `linkerd check` command\n\n## edge-20.9.1\n\nThis edge release contains an important proxy update that allows linkerd to\ncontinue to operate normally in HA during node outages. We're also adding full\nKubernetes 1.19 support!\n\n* Improved the proxy's error handling for DNS errors encountered when\n  discovering control plane addresses, which can be common during installation,\n  before all components have been started\n* The destination and identity services had to be made headless in order to\n  support that new controller discovery (which now can leverage SRV records)\n* Use SAN fields when generating the linkerd webhook configs; this completes the\n  Kubernetes 1.19 support which enforces them\n* Fixed `linkerd check` for multicluster that was spuriously claiming the\n  absence of some resources\n* Improved the injection test cleanup (thanks @zhouhao3!)\n* Added ability to run the integration test suite using a cluster in an ARM\n  architecture (thanks @aliariff!)\n\n## edge-20.8.4\n\n* Fixed a problem causing the `enable-endpoint-slices` flag to not be persisted\n  when set via `linkerd upgrade` (thanks @Matei207!)\n* Removed SMI-Metrics templates and experimental sub-commands\n* Use `--frozen-lockfile` to avoid accidental update of dashboard JS\n  dependencies in CI (thanks @tharun208!)\n\n## edge-20.8.3\n\nThis edge release adds support for [topology-aware service routing][topology] to\nthe Destination controller. When providing service discovery updates to proxies,\nthe Destination controller will now filter endpoints based on the service's\ntopology preferences. Additionally, this release includes bug fixes for the\n`linkerd check` CLI command and web dashboard.\n\n* CLI\n  * `linkerd check` will no longer warn about a looser webhook failure policy in\n    HA mode\n* Controller\n  * Added support for [topology-aware service routing][topology] to the Destination\n    controller (thanks @Matei207)\n  * Changed the Destination controller to always return destination overrides\n    for service profiles when no traffic split is present\n* Web UI\n  * Fixed Tap `Authority` dropdown not being populated (thanks to @tharun208!)\n\n[topology]: https://kubernetes.io/docs/concepts/services-networking/service-topology/\n\n## edge-20.8.2\n\nThis edge release adds an internationalization framework to the dashboard,\nSpanish translations to the dashboard UI, and a `linkerd multicluster uninstall`\ncommand for graceful removal of the multicluster components.\n\n* Web UI\n  * Added Spanish translations to the dashboard\n  * Added a framework and documentation to simplify creation of new\n    translations\n* Multicluster\n  * Added a multicluster uninstall command\n  * Added a warning from `linkerd check --multicluster` if the multicluster\n    support is not installed\n\n## edge-20.8.1\n\nThis edge adds multi-arch support to Linkerd! Our docker images and CLI now\nsupport the amd64, arm64, and arm architectures.\n\n* Multicluster\n  * Added a multicluster unlink command for removing multicluster links\n  * Improved multicluster checks to be more informative when the remote API is\n    not reachable\n* Proxy\n  * Enabled a multi-threaded runtime to substantially improve latency especially\n    when the proxy is serving requests for many concurrent connections\n* Other\n  * Fixed an issue where the debug sidecar image was missing during upgrades\n    (thanks @javaducky!)\n  * Updated all control plane plane and proxy container images to be multi-arch\n    to support amd64, arm64, and arm (thanks @aliariff!)\n  * Fixed an issue where check was failing when DisableHeartBeat was set to true\n    (thanks @mvaal!)\n\n## edge-20.7.5\n\nThis edge brings a new approach to multicluster service mirror controllers and\nthe way services in target clusters are selected for mirroring.\n\nThe long-awaited Bring-Your-Own-Prometheus case has been finally addressed.\n\nMany other improvements from our great contributors are described below. Also\nnote progress is still being made under the covers for future support for Service\nTopologies (by @Matei207) and delivering image builds in multiple platforms (by\n@aliariff).\n\n* Multicluster\n  * Replaced the single `service-mirror` controller, with separate controllers\n    that will be installed per target cluster through `linkerd multicluster\n    link`. More info [here](https://github.com/linkerd/linkerd2/pull/4710).\n  * Changed the mechanism for mirroring services: instead of relying on\n    annotations on the target services, now the source cluster should specify\n    which services from the target cluster should be exported by using a label\n    selector. More info [here](https://github.com/linkerd/linkerd2/pull/4795).\n  * Added new section in the dashboard for exposing multicluster gateway metrics\n    (thanks @tharun208!)\n* Prometheus\n  * Added `global.prometheusUrl` to the Helm config to have linkerd use an\n    external Prometheus instance instead of the one provided by default.\n  * Added ability to declare sidecar containers in the Prometheus Helm config.\n    This allows adding components for cases like exporting logs to services\n    such as Cloudwatch, Stackdriver, Datadog, etc. (thanks @memory!)\n  * Upgraded Prometheus to the latest version (v2.19.3), which should consume\n    substantially less memory, among other benefits.\n* Other\n  * Fixed bug in `linkerd check` that was failing to wait for Prometheus to be\n    available right after having installed linkerd.\n  * Added ability to set `priorityClassName` for CNI DaemonSet pods, and to\n    install CNI in an existing namespace (both options provided through the CLI\n    and as Helm configs) (thanks @alex-berger!)\n  * Added support for overriding the proxy's inbound and outbound TCP connection\n    timeouts (thanks @mmiller1!)\n  * Added library support for dashboard i18n. Strings still need to be tagged\n    and translations to be added. More info\n    [here](https://github.com/linkerd/linkerd2/pull/4803).\n  * In some Helm charts, replaced the non-standard\n    `linkerd.io/helm-release-version` annotation with `checksum/config` for\n    forcing restarting the component during upgrades (thanks @naseemkullah!)\n  * Upgraded the proxy init-container to v1.3.4, which comes with an updated\n    debian-buster distro and will provide cleaner logs listing the iptables\n    rules applied.\n\n## edge-20.7.4\n\nThis edge release adds support for the new Kubernetes\n[EndpointSlice](https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/)\nresource to the Destination controller. Using the EndpointSlice API is more\nefficient for the Kubernetes control plane than using the Endpoints API. If\nthe cluster supports EndpointSlices (a beta feature in Kubernetes 1.17),\nLinkerd can be installed with `--enable-endpoint-slices` flag to use this\nresource rather than the Endpoints API.\n\n* Added fish shell completions to the `linkerd` command (thanks @WLun001!)\n* Enabled the support for EndpointSlices (thanks @Matei207!)\n* Separated Prometheus checks and made them runnable only when the add-on\n  is enabled\n\n## edge-20.7.3\n\n* Add preliminary support for EndpointSlices which will be usable in future\n  releases (thanks @Matei207!)\n* Internal improvements to the CI process for testing Helm installations\n\n## edge-20.7.2\n\nThis edge release moves Linkerd's bundled Prometheus into an add-on. This makes\nthe Linkerd Prometheus more configurable, gives it a separate upgrade lifecycle\nfrom the rest of the control plane, and will allow users to disable the bundled\nPrometheus instance. In addition, this release includes fixes for several\nissues, including a regression where the proxy would fail to report OpenCensus\nspans.\n\n* Prometheus is now an optional add-on, enabled by default\n* Custom tolerations can now be specified for control plane resources when\n  installing with Helm (thanks @DesmondH0!)\n* Evicted data plane pods are no longer considered to be failed by `linkerd\n  check --proxy`, fixing an issue where the check would be retried indefinitely\n  as long as evicted pods are present\n* Fixed a regression where proxy spans were not reported to OpenCensus\n* Fixed a bug where the proxy injector would fail to render skipped port lists\n  when installed with Helm\n* Internal improvements to the proxy for lower latencies under high concurrency\n* Thanks to @Hellcatlk and @surajssd for adding new unit tests and spelling\n  fixes!\n\n## edge-20.7.1\n\nThis edge release features the option to persist prometheus data to a volume\ninstead of memory, so that historical metrics are available when prometheus is\nrestarted. Additional changes are outlined in the bullet points below.\n\n* Some commands like `linkerd stat` would fail if any control plane components\n  were unhealthy, even when other replicas are healthy. The check conditions\n  for these commands have been improved\n* The helm chart can now configure persistent storage for Prometheus\n  (thanks @naseemkullah!)\n* The proxy log output format can now be configured to `plain` or `json` using\n  the `config.linkerd.io/proxy-log-format` annotation or the\n  `global.proxy.logFormat` value in the helm chart\n  (thanks again @naseemkullah!)\n* `linkerd install --addon-config=` now supports URLs in addition to local\n  files\n* The CNI Helm chart used the incorrect variable name to determine the `createdBy`\n  version tag. This is now controlled by `cniPluginVersion` in the helm chart\n* The proxy's default buffer size has been increased, which reduces latency when\n  the proxy has many concurrent clients\n\n## edge-20.6.4\n\nThis edge release moves the proxy onto a new version of the Tokio runtime. This\nallows us to more easily integrate with the ecosystem and may yield performance\nbenefits as well.\n\n* Upgraded the proxy's underlying Tokio runtime and its related libraries\n* Added support for PKCS8 formatted ECDSA private keys\n* Added support for Helm configuration of per-component proxy resources requests\n  and limits (thanks @cypherfox!)\n* Updated the `linkerd inject` command to throw an error while injecting\n  non-compliant pods (thanks @mayankshah1607)\n\n## stable-2.8.1\n\nThis release fixes multicluster gateways support on EKS.\n\n* The multicluster service-mirror has been extended to resolve DNS names for\n  target clusters when an IP address is not known.\n* Linkerd checks could fail when run from the dashboard. Thanks to @alex-berger\n  for providing a fix!\n* Have the service mirror controller check in `linkerd check` retry on failures.\n* As of this version we're including a Chocolatey package (Windows) next to the\n  other binaries in the release assets in GitHub.\n* Base images have been updated:\n  * debian:buster-20200514-slim\n  * grafana/grafana:7.0.3\n* The shell scripts under `bin` continued to be improved, thanks to @joakimr-axis!\n\n## edge-20.6.3\n\nThis edge release is a release candidate for stable-2.8.1. It includes a fix\nto support multicluster gateways on EKS.\n\n* The `config.linkerd.io/proxy-destination-get-networks` annotation configures\n  the networks for which a proxy can discover metadata. This is an advanced\n  configuration option that has security implications.\n* The multicluster service-mirror has been extended to resolve DNS names for\n  target clusters when an IP address it not known.\n* Linkerd checks could fail when run from the dashboard. Thanks to @alex-berger\n  for providing a fix!\n* The CLI will be published for Chocolatey (Windows) on future stable releases.\n* Base images have been updated:\n  * debian:buster-20200514-slim\n  * grafana/grafana:7.0.3\n\n## stable-2.8.0\n\nThis release introduces new a multi-cluster extension to Linkerd, allowing it\nto establish connections across Kubernetes clusters that are secure,\ntransparent to the application, and work with any network topology.\n\n* The CLI has a new set of `linkerd multicluster` sub-commands that provide\n  tooling to create the resources needed to discover services across\n  Kubernetes clusters.\n* The `linkerd multicluster gateways` command exposes gateway-specific\n  telemetry to supplement the existing `stat` and `tap` commands.\n* The Linkerd-provided Grafana instance remains enabled by default, but it can\n  now be disabled. When it is disabled, the Linkerd dashboard can be\n  configured to link to an alternate, externally-managed Grafana instance.\n* Jaeger & OpenCensus are configurable as an [add-on][addon-2.8.0]; and the\n  proxy has been improved to emit spans with labels that reflect its pod's\n  metadata.\n* The `linkerd-cni` component has been promoted from _experimental_ to\n  _stable_.\n* `linkerd profile --open-api` now honors the `x-linkerd-retryable` and\n  `x-linkerd-timeout` OpenAPI annotations.\n* The Helm chart continues to become more flexible and modular, with new\n  Prometheus configuration options. More information is available in the\n  [Helm chart README][helm-2.8.0].\n* gRPC stream error handling has been improved so that transport errors\n  are indicated to the client with a `grpc-status: UNAVAILABLE` trailer.\n* The proxy's memory footprint could grow significantly when\n  server-speaks-first-protocol connections hit the proxy. Now, a timeout is\n  in place to prevent these connections from consuming resources.\n* After benchmarking the proxy in high-concurrency situations, the inbound\n  proxy has been improved to reduce contention, improving latency and\n  reducing spurious timeouts.\n* The proxy could fail requests to services that had only 1 request every 60\n  seconds. This race condition has been eliminated.\n* Finally, users reported that ingress misconfigurations could cause the proxy\n  to consume an entire CPU which could lead to timeouts. The proxy now\n  attempts to prevent the most common traffic-loop scenarios to protect against\n  this.\n\n_**NOTE**_: Linkerd's `multicluster` extension does not yet work on Amazon\nEKS. We expect to follow this release with a stable-2.8.1 to address this\nissue. Follow [#4582](https://github.com/linkerd/linkerd2/pull/4582) for updates.\n\nThis release includes changes from a massive list of contributors. A special\nthank-you to everyone who helped make this release possible: @aliariff,\n@amariampolskiy, @arminbuerkle, @arthursens, @christianhuening,\n@christyjacob4, @cypherfox, @daxmc99, @dr0pdb, @drholmie, @hydeenoble,\n@joakimr-axis, @jpresky, @kohsheen1234, @lewiscowper, @lundbird, @matei207,\n@mayankshah1607, @mmiller1, @naseemkullah, @sannimichaelse, & @supra08.\n\n[addon-2.8.0]: https://github.com/linkerd/linkerd2/blob/4219955bdb5441c5fce192328d3760da13fb7ba1/charts/linkerd2/README.md#add-ons-configuration\n[helm-2.8.0]: https://github.com/linkerd/linkerd2/blob/4219955bdb5441c5fce192328d3760da13fb7ba1/charts/linkerd2/README.md\n\n## edge-20.6.2\n\nThis edge release is our second release candidate for `stable-2.8`, including\nvarious fixes and improvements around multicluster support.\n\n* CLI\n  * Fixed bad output in the `linkerd multicluster gateways` command\n  * Improved the error returned when running the CLI with no KUBECONFIG path set\n    (thanks @Matei207!)\n* Controller\n  * Fixed issue where mirror service wasn't created when paired to a gateway\n    whose external IP wasn't yet provided\n  * Fixed issue where updating the gateway identity annotation wasn't propagated\n    back into the mirror gateway endpoints object\n  * Fixed issue where updating the gateway ports wasn't reflected in the gateway\n    mirror service\n  * Increased the log level for some of the service mirror events\n  * Changed the nginx gateway config so that it runs as non-root and denies all\n    requests to locations other than the probe path\n* Web UI\n  * Fixed multicluster Grafana dashboard\n* Internal\n  * Added flag in integration tests to dump fixture diffs into a separate\n    directory (thanks @cypherfox!)\n\n## edge-20.6.1\n\nThis edge release is a release candidate for `stable-2.8`! It introduces several\nimprovements and fixes for multicluster support.\n\n* CLI\n  * Added multicluster daisy chain checks to `linkerd check`\n  * Added list of successful gateways in multicluster checks section of `linkerd\n    check`\n* Controller\n  * Renamed `nginx-configuration` ConfigMap to `linkerd-gateway-config` (please\n    manually remove the former if upgrading from an earlier multicluster\n    install, thanks @mayankshah1607!)\n  * Renamed multicluster gateway ports to `mc-gateway` and `mc-probe`\n  * Fixed Service Profiles routes for `linkerd-prometheus`\n* Internal\n  * Fixed shellcheck errors in all `bin/` scripts (thanks @joakimr-axis!)\n* Helm\n  * Added support for `linkerd mc allow`\n  * Added ability to disable secret resources for self-signed certs (thanks\n    @cypherfox!)\n* Proxy\n  * Modified the `linkerd-gateway` component to use the inbound proxy, rather\n    than nginx, for gateway; this allows Linkerd to detect loops and propagate\n    identity\n\n## edge-20.5.5\n\nThis edge release adds refinements to the Linkerd multicluster implementation,\nadds new health checks for the tracing add-on, and addresses an issue in which\noutbound requests from the proxy result in looping behavior.\n\n* CLI\n  * Added the `multicluster` command along with subcommands to configure and\n    deploy Linkerd workloads which enable services to be mirrored across\n    clusters\n  * Added health-checks for tracing add-on\n* Proxy\n  * Added logic to prevent loops in outbound requests\n\n## edge-20.5.4\n\n* CLI\n  * Fixed the display of the meshed pod column for non-selector services in\n    `linkerd stat` output\n  * Added an `addon-overwrite` upgrade flag which allows users to overwrite the\n    existing addon config rather than merging into it\n  * Added a `--close-wait-timeout` inject flag which sets the\n    `nf_conntrack_tcp_timeout_close_wait` property which can be used to mitigate\n    connection issues with application that hold half-closed sockets\n* Controller\n  * Restricted the service-mirror's RBAC permissions so that it no longer is\n    able to read secrets in all namespaces\n  * Moved many multicluster components into the `linkerd-multicluster` namespace\n    by default\n  * Added multicluster gateway mirror services to allow multicluster liveness\n    probes to work in private networks\n  * Fixed an issue where multicluster gateway mirror services could be\n    incorrectly deleted during a resync\n* Internal\n  * Fixed many style issues in build scripts (thanks @joakimr-axis!)\n* Helm\n  * Added `global.grafanaUrl` variable to allow using an existing Grafana\n    installation\n\n## edge-20.5.3\n\n* Controller\n  * Added a Grafana dashboard for tracking multi-cluster traffic metrics\n  * Added health checks for the Grafana add-on, under a separate section\n  * Fixed issues when updating a remote multi-cluster gateway\n\n* Proxy\n  * Added special special handling for I/O errors in HTTP responses so that an\n    `errno` label is included to describe the underlying errors in the proxy's\n    metrics\n\n* Internal\n  * Started gathering stats of CI runs for aggregating CI health metrics\n\n## edge-20.5.2\n\nThis edge release contains everything required to get up and running with\nmulticluster. For a tutorial on how to do that, check out the\n[documentation](https://linkerd.io/2/features/multicluster_support/).\n\n* CLI\n  * Added a section to the `linkerd check` that validates that all clusters\n    part of a multicluster setup have compatible trust anchors\n  * Modified the `inkerd cluster export-service` command to work by\n    transforming yaml instead of modifying cluster state\n  * Added functionality that allows the `linkerd cluster export-service`\n    command to operate on lists of services\n* Controller\n  * Changed the multicluster gateway to always require TLS on connections\n    originating from outside the cluster\n  * Removed admin server timeouts from control plane components, thereby\n    fixing a bug that can cause liveness checks to fail\n* Helm\n  * Moved Grafana templates into a separate add-on chart\n* Proxy\n  * Improved latency under high-concurrency use cases.\n\n## edge-20.5.1\n\n* CLI\n  * Fixed all commands to use kubeconfig's default namespace if specified\n    (thanks @Matei207!)\n  * Added multicluster checks to the `linkerd check` command\n  * Hid development flags in the `linkerd install` command for release builds\n* Controller\n  * Added ability to configure Prometheus Alertmanager as well as recording\n    and alerting rules on the Linkerd Prometheus (thanks @naseemkullah!)\n  * Added ability to add more commandline flags to the Prometheus command\n    (thanks @naseemkullah!)\n* Web UI\n  * Fixed TrafficSplit detail page not loading\n  * Added Jaeger links to the dashboard when the tracing addon is enabled\n* Proxy\n  * Modified internal buffering to avoid idling out services as a request\n    arrives, fixing failures for requests that are sent exactly once per\n    minute--such as Prometheus scrapes\n\n## edge-20.4.5\n\nThis edge release includes several new CLI commands for use with multi-cluster\ngateways, and adds liveness checks and metrics for gateways. Additionally, it\nmakes the proxy's gRPC error-handling behavior more consistent with other\nimplementations, and includes a fix for a bug in the web UI.\n\n* CLI\n  * Added `linkerd cluster setup-remote` command for setting up a\n    multi-cluster gateway\n  * Added `linkerd cluster gateways` command to display stats for\n    multi-cluster gateways\n  * Changed `linkerd cluster export-service` to modify a provided YAML file\n    and output it, rather than mutating the cluster\n* Controller\n  * Added liveness checks and Prometheus metrics for multi-cluster gateways\n  * Changed the proxy injector to configure proxies to do destination lookups\n    for IPs in the private IP range\n* Web UI\n  * Fixed errors when viewing resource detail pages\n* Internal\n  * Created script and config to build a Linkerd CLI Chocolatey package for\n    Windows users, which will be published with stable releases (thanks to\n    @drholmie!)\n* Proxy\n  * Changed the proxy to set a `grpc-status: UNAVAILABLE` trailer when a gRPC\n    response stream is interrupted by a transport error\n\n## edge-20.4.4\n\nThis edge release fixes a packaging issue in `edge-20.4.3`.\n\n_From `edge.20.4.3` release notes_:\n\nThis edge release adds functionality to the CLI to output more detail and\nincludes changes which support the multi-cluster functionality. Also, the helm\nsupport has been expanded to make installation more configurable. Finally, the\nHA reliability is improved by ensuring that control plane pods are restarted\nwith a rolling strategy\n\n* CLI\n  * Added output to the `linkerd check --proxy` command to list all data plane\n    pods which are not up-to-date rather than just printing the first one it\n    encounters\n  * Added a `--proxy` flag to the `linkerd version` command which lists all\n    proxy versions running in the cluster and the number of pods running each\n    version\n  * Lifted requirement of using --unmeshed for linkerd stat when querying\n    TrafficSplit resources\n  * Added support for multi-stage installs with Add-Ons\n* Controller\n  * Added a rolling update strategy to Linkerd deployments that have multiple\n    replicas during HA deployments to ensure that at most one pod begins\n    terminating before a new pod ready is ready\n  * Added a new label for the proxy injector to write to the template,\n    `linkerd.io/workload-ns` which indicates the namespace of the workload/pod\n* Internal\n  * Added a [security\n    policy](https://help.github.com/en/github/managing-security-vulnerabilities/adding-a-security-policy-to-your-repository)\n    to facilitate conversations around security\n* Helm\n  * Changed charts to use downwardAPI to mount labels to the proxy container\n    making them easier to identify\n* Proxy\n  * Changed the Linkerd proxy endpoint for liveness to use the new `/live`\n    admin endpoint instead of the `/metrics` endpoint, because the `/live`\n    endpoint returns a smaller payload\n  * Added a per-endpoint authority-override feature to support multi-cluster\n    gateways\n\n## edge-20.4.3\n\n**This release is superseded by `edge-20.4.4`**\n\nThis edge release adds functionality to the CLI to output more detail and\nincludes changes which support the multi-cluster functionality. Also, the helm\nsupport has been expanded to make installation more configurable. Finally, the\nHA reliability is improved by ensuring that control plane pods are restarted\nwith a rolling strategy\n\n* CLI\n  * Added output to the `linkerd check --proxy` command to list all data plane\n    pods which are not up-to-date rather than just printing the first one it\n    encounters\n  * Added a `--proxy` flag to the `linkerd version` command which lists all\n    proxy versions running in the cluster and the number of pods running each\n    version\n  * Lifted requirement of using --unmeshed for linkerd stat when querying\n    TrafficSplit resources\n  * Added support for multi-stage installs with Add-Ons\n* Controller\n  * Added a rolling update strategy to Linkerd deployments that have multiple\n    replicas during HA deployments to ensure that at most one pod begins\n    terminating before a new pod ready is ready\n  * Added a new label for the proxy injector to write to the template,\n    `linkerd.io/workload-ns` which indicates the namespace of the workload/pod\n* Internal\n  * Added a [security\n    policy](https://help.github.com/en/github/managing-security-vulnerabilities/adding-a-security-policy-to-your-repository)\n    to facilitate conversations around security\n* Helm\n  * Changed charts to use downwardAPI to mount labels to the proxy container\n    making them easier to identify\n* Proxy\n  * Changed the Linkerd proxy endpoint for liveness to use the new `/live`\n    admin endpoint instead of the `/metrics` endpoint, because the `/live`\n    endpoint returns a smaller payload\n  * Added a per-endpoint authority-override feature to support multi-cluster\n    gateways\n\n## edge-20.4.2\n\nThis release brings a number of CLI fixes and Controller improvements.\n\n* CLI\n  * Fixed a bug that caused pods to crash after upgrade if\n    `--skip-outbound-ports` or `--skip-inbound-ports` were used\n  * Added `unmeshed` flag to the `stat` command, such that unmeshed resources\n    are only displayed if the user opts-in\n  * Added a `--smi-metrics` flag to `install`, to allow installation of the\n    experimental `linkerd-smi-metrics` component\n  * Fixed a bug in `linkerd stat`, causing incorrect output formatting when\n    using the `--o wide` flag\n  * Fixed a bug, causing `linkerd uninstall` to fail when attempting to delete\n    PSPs\n* Controller\n  * Improved the anti-affinity of `linkerd-smi-metrics` deployment to avoid\n    pod scheduling problems during `upgrade`\n  * Improved endpoints change detection in the `linkerd-destination` service,\n    enabling mirrored remote services to change cluster gateways\n  * Added `operationID` field to tap OpenAPI response to prevent issues during\n    upgrade from 2.6 to 2.7\n* Proxy\n  * Added a new protocol detection timeout to prevent clients from consuming\n    resources indefinitely when not sending any data\n\n## edge-20.4.1\n\nThis release introduces some cool new functionalities, all provided by our\nawesome community of contributors! Also two bugs were fixed that were\nintroduced since edge-20.3.2.\n\n* CLI\n  * Added `linkerd uninstall` command to uninstall the control plane (thanks\n    @Matei207!)\n  * Fixed a bug causing `linkerd routes -o wide` to not show the proper actual\n    success rate\n* Controller\n  * Fail proxy injection if the pod spec has `automountServiceAccountToken`\n    disabled (thanks @mayankshah1607!)\n* Web UI\n  * Added a route dashboard to Grafana (thanks @lundbird!)\n* Proxy\n  * Fixed a bug causing the proxy's inbound to spuriously return 503 timeouts\n\n## edge-20.3.4\n\nThis release introduces several fixes and improvements to the CLI.\n\n* CLI\n  * Added support for kubectl-style label selectors in many CLI commands\n    (thanks @mayankshah1607!)\n  * Fixed the path regex in service profiles generated from proto files\n    without a package name (thanks @amariampolskiy!)\n  * Fixed an error when injecting Cronjobs that have no metadata\n  * Relaxed the clock skew check to match the default node heartbeat interval\n    on Kubernetes 1.17 and made this check a warning\n  * Fixed a bug where the linkerd-smi-metrics pod could not be created on\n    clusters with pod security policy enabled\n* Internal\n  * Upgraded tracing components to more recent versions and improved resource\n    defaults (thanks @Pothulapati!)\n\n## edge-20.3.3\n\nThis release introduces new experimental CLI commands for querying metrics\nusing the Service Mesh Interface (SMI) and for multi-cluster support via\nservice mirroring.\n\nIf you would like to learn more about service mirroring or SMI, or are\ninterested in experimenting with these features, please join us in [Linkerd\nSlack](https://slack.linkerd.io) for help and feedback.\n\n* CLI\n  * Added experimental `linkerd cluster` commands for managing multi-cluster\n    service mirroring\n  * Added the experimental `linkerd alpha clients` command, which uses the\n    smi-metrics API to display client-side metrics from each of a resource's\n    clients\n  * Added retries to some `linkerd check` checks to prevent spurious failures\n    when run immediately after cluster creation or Linkerd installation\n\n## edge-20.3.2\n\nThis release introduces substantial proxy improvements as well as new\nobservability and security functionality.\n\n* CLI\n  * Added the `linkerd alpha stat` command, which uses the smi-metrics API;\n    the latter enables access to metrics to be controlled with RBAC\n* Controller\n  * Added support for configuring service profile timeouts\n    `(x-linkerd-timeout)` via OpenAPI spec (thanks @lewiscowper!)\n* Web UI\n  * Improved the Grafana dashboards to use a globing operator for Prometheus\n    in order to avoid producing queries that are too large (thanks @mmiller1!)\n* Helm\n  * Improved the `linkerd2` chart README (thanks @lundbird!)\n* Proxy\n  * Fixed a bug that could cause log levels to be processed incorrectly\n\n## edge-20.3.1\n\nThis release introduces new functionality mainly focused around observability\nand multi-cluster support via `service mirroring`.\n\nIf you would like to learn more about `service mirroring` or are interested in\nexperimenting with this feature, please join us in [Linkerd\nSlack](https://slack.linkerd.io) for help and feedback.\n\n* CLI\n  * Improved the `linkerd check` command to check for extension server\n    certificate (thanks @christyjacob4!)\n* Controller\n  * Removed restrictions preventing Linkerd from injecting proxies into\n    Contour (thanks @alfatraining!)\n  * Added an experimental version of a service mirroring controller, allowing\n    discovery of services on remote clusters.\n* Web UI\n  * Fixed a bug causing incorrect Grafana links to be rendered in the web\n    dashboard.\n* Proxy\n  * Fixed a bug that could cause the proxy's load balancer to stop processing\n    updates from service discovery.\n\n## edge-20.2.3\n\nThis release introduces the first optional add-on `tracing`, added through the\nnew add-on model!\n\nThe existing optional `tracing` components Jaeger and OpenCensus can now be\ninstalled as add-on components.\n\nThere will be more information to come about the new add-on model, but please\nrefer to the details of [#3955](https://github.com/linkerd/linkerd2/pull/3955)\nfor how to get started.\n\n* CLI\n  * Added the `linkerd diagnostics` command to get metrics only from the\n    control plane, excluding metrics from the data plane proxies (thanks\n    @srv-twry!)\n  * Added the `linkerd install --prometheus-image` option for installing a\n    custom Prometheus image (thanks @christyjacob4!)\n  * Fixed an issue with `linkerd upgrade` where changes to the `Namespace`\n    object were ignored (thanks @supra08!)\n* Controller\n  * Added the `tracing` add-on which installs Jaeger and OpenCensus as add-on\n    components (thanks @Pothulapati!!)\n* Proxy\n  * Increased the inbound router's default capacity from 100 to 10k to\n    accommodate environments that have a high cardinality of virtual hosts\n    served by a single pod\n* Web UI\n  * Fixed styling in the CallToAction banner (thanks @aliariff!)\n\n## edge-20.2.2\n\nThis release includes the results from continued profiling & performance\nanalysis on the Linkerd proxy. In addition to modifying internals to prevent\nunwarranted memory growth, new metrics were introduced to aid in debugging and\ndiagnostics.\n\nAlso, Linkerd's CNI plugin is out of experimental, check out the docs at\n<https://linkerd.io/2/features/cni/> !\n\n* CLI\n  * Added support for label selectors in the `linkerd stat` command (thanks\n    @mayankshah1607!)\n  * Added scrolling functionality to the `linkerd top` output (thanks\n    @kohsheen1234!)\n  * Fixed bug in `linkerd metrics` that was causing a panic when\n    port-forwarding failed (thanks @mayankshah1607!)\n  * Added check to `linkerd check` verifying the number of replicas for\n    Linkerd components in HA (thanks @mayankshah1607!)\n  * Unified trust anchors terminology across the CLI commands\n  * Removed some messages from `linkerd upgrade`'s output that are no longer\n    relevant (thanks @supra08!)\n\n* Controller\n  * Added support for configuring service profile retries\n    `(x-linkerd-retryable)` via OpenAPI spec (thanks @kohsheen1234!)\n  * Improved traffic split metrics so sources in all namespaces are shown, not\n    just traffic from the traffic split's own namespace\n  * Improved linkerd-identity's logs and events to help diagnosing certificate\n    validation issues (thanks @mayankshah1607!)\n\n* Proxy\n  * Added `request_errors_total` metric exposing the number of requests that\n    receive synthesized responses due to proxy errors\n\n* Helm\n  * Added a new `enforcedHostRegexp` variable to allow configuring the\n    linkerd-web component enforced host (that was previously introduced to\n    protect against DNS rebinding attacks) (thanks @sannimichaelse!)\n\n* Internal\n  * Removed various es-lint warnings from the dashboard code (thanks\n    @christyjacob4 and @kohsheen1234!)\n  * Fixed go module file syntax (thanks @daxmc99!)\n\n## stable-2.7.0\n\nThis release adds support for integrating Linkerd's PKI with an external\ncertificate issuer such as [`cert-manager`] as well as streamlining the\ncertificate rotation process in general. For more details about cert-manager\nand certificate rotation, see the\n[docs](https://linkerd.io/2/tasks/use_external_certs/). This release also\nincludes performance improvements to the dashboard, reduced memory usage of\nthe proxy, various improvements to the Helm chart, and much much more.\n\nTo install this release, run: `curl https://run.linkerd.io/install | sh`\n\n**Upgrade notes**: This release includes breaking changes to our Helm charts.\nPlease see the [upgrade\ninstructions](https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-270).\n\n**Special thanks to**: @alenkacz, @bmcstdio, @daxmc99, @droidnoob, @ereslibre,\n@javaducky, @joakimr-axis, @JohannesEH, @KIVagant, @mayankshah1607,\n@Pothulapati, and @StupidScience!\n\n**Full release notes**:\n\n* CLI\n  * Updated the mTLS trust anchor checks to eliminate false positives caused\n    by extra trailing spaces\n  * Reduced the severity level of the Linkerd version checks, so that they\n    don't fail when the external version endpoint is unreachable (thanks\n    @mayankshah1607!)\n  * Added a new `tap` APIService check to aid with uncovering Kubernetes API\n    aggregation layer issues (thanks @droidnoob!)\n  * Introduced CNI checks to confirm the CNI plugin is installed and ready;\n    this is done through `linkerd check --pre --linkerd-cni-enabled` before\n    installation and `linkerd check` after installation if the CNI plugin is\n    present\n  * Added support for the `--as-group` flag so that users can impersonate\n    groups for Kubernetes operations (thanks @mayankshah1607!)\n  * Added HA specific checks to `linkerd check` to ensure that the\n    `kube-system` namespace has the\n    `config.linkerd.io/admission-webhooks:disabled` label set\n  * Fixed a problem causing the presence of unnecessary empty fields in\n    generated resource definitions (thanks @mayankshah1607)\n  * Added the ability to pass both port numbers and port ranges to\n    `--skip-inbound-ports` and `--skip-outbound-ports` (thanks to @javaducky!)\n  * Increased the comprehensiveness of `linkerd check --pre`\n  * Added TLS certificate validation to `check` and `upgrade` commands\n  * Added support for injecting CronJobs and ReplicaSets, as well as the\n    ability to use them as targets in the CLI subcommands\n  * Introduced the new flags `--identity-issuer-certificate-file`,\n    `--identity-issuer-key-file` and `identity-trust-anchors-file` to `linkerd\n    upgrade` to support trust anchor and issuer certificate rotation\n  * Added a check that ensures using `--namespace` and `--all-namespaces`\n    results in an error as they are mutually exclusive\n  * Added a `Dashboard.Replicas` parameter to the Linkerd Helm chart to allow\n    configuring the number of dashboard replicas (thanks @KIVagant!)\n  * Removed redundant service profile check (thanks @alenkacz!)\n  * Updated `uninject` command to work with namespace resources (thanks\n    @mayankshah1607!)\n  * Added a new `--identity-external-issuer` flag to `linkerd install` that\n    configures Linkerd to use certificates issued by an external certificate\n    issuer (such as `cert-manager`)\n  * Added support for injecting a namespace to `linkerd inject` (thanks\n    @mayankshah1607!)\n  * Added checks to `linkerd check --preinstall` ensuring Kubernetes Secrets\n    can be created and accessed\n  * Fixed `linkerd tap` sometimes displaying incorrect pod names for unmeshed\n    IPs that match multiple running pods\n  * Made `linkerd install --ignore-cluster` and `--skip-checks` faster\n  * Fixed a bug causing `linkerd upgrade` to fail when used with\n    `--from-manifest`\n  * Made `--cluster-domain` an install-only flag (thanks @bmcstdio!)\n  * Updated `check` to ensure that proxy trust anchors match configuration\n       (thanks @ereslibre!)\n  * Added condition to the `linkerd stat` command that requires a window size\n    of at least 15 seconds to work properly with Prometheus\n* Controller\n  * Fixed an issue where an override of the Docker registry was not being\n    applied to debug containers (thanks @javaducky!)\n  * Added check for the Subject Alternate Name attributes to the API server\n    when access restrictions have been enabled (thanks @javaducky!)\n  * Added support for arbitrary pod labels so that users can leverage the\n    Linkerd provided Prometheus instance to scrape for their own labels\n    (thanks @daxmc99!)\n  * Fixed an issue with CNI config parsing\n  * Fixed a race condition in the `linkerd-web` service\n  * Updated Prometheus to 2.15.2 (thanks @Pothulapati)\n  * Increased minimum kubernetes version to 1.13.0\n  * Added support for pod ip and service cluster ip lookups in the destination\n    service\n  * Added recommended kubernetes labels to control-plane\n  * Added the `--wait-before-exit-seconds` flag to linkerd inject for the\n    proxy sidecar to delay the start of its shutdown process (a huge commit\n    from @KIVagant, thanks!)\n  * Added a pre-sign check to the identity service\n  * Fixed inject failures for pods with security context capabilities\n  * Added `conntrack` to the `debug` container to help with connection\n    tracking debugging\n  * Fixed a bug in `tap` where mismatch cluster domain and trust domain caused\n    `tap` to hang\n  * Fixed an issue in the `identity` RBAC resource which caused start up\n    errors in k8s 1.6 (thanks @Pothulapati!)\n  * Added support for using trust anchors from an external certificate issuer\n    (such as `cert-manager`) to the `linkerd-identity` service\n  * Added support for headless services (thanks @JohannesEH!)\n* Helm\n  * **Breaking change**: Renamed `noInitContainer` parameter to `cniEnabled`\n  * **Breaking Change** Updated Helm charts to follow best practices (thanks\n    @Pothulapati and @javaducky!)\n  * Fixed an issue with `helm install` where the lists of ignored inbound and\n    outbound ports would not be reflected\n  * Fixed the `linkerd-cni` Helm chart not setting proper namespace\n    annotations and labels\n  * Fixed certificate issuance lifetime not being set when installing through\n    Helm\n  * Updated the helm build to retain previous releases\n  * Moved CNI template into its own Helm chart\n* Proxy\n  * Fixed an issue that could cause the OpenCensus exporter to stall\n  * Improved error classification and error responses for gRPC services\n  * Fixed a bug where the proxy could stop receiving service discovery\n    updates, resulting in 503 errors\n  * Improved debug/error logging to include detailed contextual information\n  * Fixed a bug in the proxy's logging subsystem that could cause the proxy to\n    consume memory until the process is OOM killed, especially when the proxy\n    was configured to log diagnostic information\n  * Updated proxy dependencies to address RUSTSEC-2019-0033,\n    RUSTSEC-2019-0034, and RUSTSEC-2020-02\n* Web UI\n  * Fixed an error when refreshing an already open dashboard when the Linkerd\n    version has changed\n  * Increased the speed of the dashboard by pausing network activity when the\n    dashboard is not visible to the user\n  * Added support for CronJobs and ReplicaSets, including new Grafana\n    dashboards for them\n  * Added `linkerd check` to the dashboard in the `/controlplane` view\n  * Added request and response headers to the `tap` expanded view in the\n    dashboard\n  * Added filter to namespace select button\n  * Improved how empty tables are displayed\n  * Added `Host:` header validation to the `linkerd-web` service, to protect\n    against DNS rebinding attacks\n  * Made the dashboard sidebar component responsive\n  * Changed the navigation bar color to the one used on the\n    [Linkerd](https://linkerd.io/) website\n* Internal\n  * Added validation to incoming sidecar injection requests that ensures the\n    value of `linkerd.io/inject` is either `enabled` or `disabled` (thanks\n    @mayankshah1607)\n  * Upgraded the Prometheus Go client library to v1.2.1 (thanks @daxmc99!)\n  * Fixed an issue causing `tap`, `injector` and `sp-validator` to use old\n    certificates after `helm upgrade` due to not being restarted\n  * Fixed incomplete Swagger definition of the tap api, causing benign error\n    logging in the kube-apiserver\n  * Removed the destination container from the linkerd-controller deployment\n    as it now runs in the linkerd-destination deployment\n  * Allowed the control plane to be injected with the `debug` container\n  * Updated proxy image build script to support HTTP proxy options (thanks\n    @joakimr-axis!)\n  * Updated the CLI `doc` command to auto-generate documentation for the proxy\n    configuration annotations (thanks @StupidScience!)\n  * Added new `--trace-collector` and `--trace-collector-svc-account` flags to\n    `linkerd inject` that configures the OpenCensus trace collector used by\n    proxies in the injected workload (thanks @Pothulapati!)\n  * Added a new `--control-plane-tracing` flag to `linkerd install` that\n    enables distributed tracing in the control plane (thanks @Pothulapati!)\n  * Added distributed tracing support to the control plane (thanks\n    @Pothulapati!)\n\n## edge-20.2.1\n\nThis edge release is a release candidate for `stable-2.7` and fixes an issue\nwhere the proxy could consume inappropriate amounts of memory.\n\n* Proxy\n  * Fixed a bug in the proxy's logging subsystem that could cause the proxy to\n    consume memory until the process is OOM killed, especially when the proxy\n    was configured to log diagnostic information\n  * Fixed properly emitting `grpc-status` headers when signaling proxy errors\n    to gRPC clients\n  * Updated certain proxy dependencies to address RUSTSEC-2019-0033,\n    RUSTSEC-2019-0034, and RUSTSEC-2020-02\n\n## edge-20.1.4\n\nThis edge release is a release candidate for `stable-2.7`.\n\nThe `linkerd check` command has been updated to improve the control plane\ndebugging experience.\n\n* CLI\n  * Updated the mTLS trust anchor checks to eliminate false positives caused\n    by extra trailing spaces\n  * Reduced the severity level of the Linkerd version checks, so that they\n    don't fail when the external version endpoint is unreachable (thanks\n    @mayankshah1607!)\n  * Added a new `tap` APIService check to aid with uncovering Kubernetes API\n    aggregation layer issues (thanks @droidnoob!)\n\n## edge-20.1.3\n\nThis edge release is a release candidate for `stable-2.7`.\n\nAn update to the Helm charts has caused a **breaking change** for users who\nhave installed Linkerd using Helm. In order to make the purpose of the\n`noInitContainer` parameter more explicit, it has been renamed to\n`cniEnabled`.\n\n* CLI\n  * Introduced CNI checks to confirm the CNI plugin is installed and ready;\n    this is done through `linkerd check --pre --linkerd-cni-enabled` before\n    installation and `linkerd check` after installation if the CNI plugin is\n    present\n  * Added support for the `--as-group` flag so that users can impersonate\n    groups for Kubernetes operations (thanks @mayankshah160!)\n* Controller\n  * Fixed an issue where an override of the Docker registry was not being\n    applied to debug containers (thanks @javaducky!)\n  * Added check for the Subject Alternate Name attributes to the API server\n    when access restrictions have been enabled (thanks @javaducky!)\n  * Added support for arbitrary pod labels so that users can leverage the\n    Linkerd provided Prometheus instance to scrape for their own labels\n    (thanks @daxmc99!)\n  * Fixed an issue with CNI config parsing\n* Helm\n  * **Breaking change**: Renamed `noInitContainer` parameter to `cniEnabled`\n  * Fixed an issue with `helm install` where the lists of ignored inbound and\n    outbound ports would not be reflected\n\n## edge-20.1.2\n\n* CLI\n  * Added HA specific checks to `linkerd check` to ensure that the\n    `kube-system` namespace has the\n    `config.linkerd.io/admission-webhooks:disabled` label set\n  * Fixed a problem causing the presence of unnecessary empty fields in\n    generated resource definitions (thanks @mayankshah1607)\n* Proxy\n  * Fixed an issue that could cause the OpenCensus exporter to stall\n* Internal\n  * Added validation to incoming sidecar injection requests that ensures the\n    value of `linkerd.io/inject` is either `enabled` or `disabled` (thanks\n    @mayankshah1607)\n\n## edge-20.1.1\n\nThis edge release includes experimental improvements to the Linkerd proxy's\nrequest buffering and backpressure infrastructure.\n\nAdditionally, we've fixed several bugs when installing Linkerd with Helm,\nupdated the CLI to allow using both port numbers _and_ port ranges with the\n`--skip-inbound-ports` and `--skip-outbound-ports`  flags, and fixed a\ndashboard error that can occur if the dashboard is open in a browser while\nupdating Linkerd.\n\n**Note**: The `linkerd-proxy` version included with this release is more\nexperimental than usual. We'd love your help testing, but be aware that there\nmight be stability issues.\n\n* CLI\n  * Added the ability to pass both port numbers and port ranges to\n    `--skip-inbound-ports` and `--skip-outbound-ports` (thanks to @javaducky!)\n* Controller\n  * Fixed a race condition in the `linkerd-web` service\n  * Updated Prometheus to 2.15.2 (thanks @Pothulapati)\n* Web UI\n  * Fixed an error when refreshing an already open dashboard when the Linkerd\n    version has changed\n* Proxy\n  * Internal changes to the proxy's request buffering and backpressure\n    infrastructure\n* Helm\n  * Fixed the `linkerd-cni` Helm chart not setting proper namespace\n    annotations and labels\n  * Fixed certificate issuance lifetime not being set when installing through\n    Helm\n  * More improvements to Helm best practices (thanks to @Pothulapati!)\n\n## edge-19.12.3\n\nThis edge release adds support for pod IP and service cluster IP lookups,\nimproves performance of the dashboard, and makes `linkerd check --pre` perform\nmore comprehensive checks.\n\nThe `--wait-before-exit-seconds` flag has been added to allow Linkerd users to\n opt in to `preStop hooks`. The details of this change are in\n [#3798](https://github.com/linkerd/linkerd2/pull/3798).\n\nAlso, the proxy has been updated to `v2.82.0` which improves gRPC error\nclassification and [ensures that\nresolutions](https://github.com/linkerd/linkerd2/pull/3848) are released when\nthe associated balancer becomes idle.\n\nFinally, an update to follow best practices in the Helm charts has caused a\n_breaking change_. Users who have installed Linkerd using Helm must be certain\nto read the details of\n[#3822](https://github.com/linkerd/linkerd2/issues/3822)\n\n* CLI\n  * Increased the comprehensiveness of `linkerd check --pre`\n  * Added TLS certificate validation to `check` and `upgrade` commands\n* Controller\n  * Increased minimum kubernetes version to 1.13.0\n  * Added support for pod ip and service cluster ip lookups in the destination\n    service\n  * Added recommended kubernetes labels to control-plane\n  * Added the `--wait-before-exit-seconds` flag to linkerd inject for the\n    proxy sidecar to delay the start of its shutdown process (a huge commit\n    from @KIVagant, thanks!)\n  * Added a pre-sign check to the identity service\n* Web UI\n  * Increased the speed of the dashboard by pausing network activity when the\n    dashboard is not visible to the user\n* Proxy\n  * Added a timeout to release resolutions to idle balancers\n  * Improved error classification for gRPC services\n* Internal\n  * **Breaking Change** Updated Helm charts to follow best practices using\n    proper casing (thanks @Pothulapati!)\n\n## edge-19.12.2\n\n* CLI\n  * Added support for injecting CronJobs and ReplicaSets, as well as the\n    ability to use them as targets in the CLI subcommands\n  * Introduced the new flags `--identity-issuer-certificate-file`,\n    `--identity-issuer-key-file` and `identity-trust-anchors-file` to `linkerd\n    upgrade` to support trust anchor and issuer certificate rotation\n* Controller\n  * Fixed inject failures for pods with security context capabilities\n* Web UI\n  * Added support for CronJobs and ReplicaSets, including new Grafana\n    dashboards for them\n* Proxy\n  * Fixed a bug where the proxy could stop receiving service discovery\n    updates, resulting in 503 errors\n* Internal\n  * Moved CNI template into a Helm chart to prepare for future publication\n  * Upgraded the Prometheus Go client library to v1.2.1 (thanks @daxmc99!)\n  * Reenabled certificates rotation integration tests\n\n## edge-19.12.1\n\n* CLI\n  * Added condition to the `linkerd stat` command that requires a window size\n    of at least 15 seconds to work properly with Prometheus\n* Internal\n  * Fixed whitespace path handling in non-docker build scripts (thanks\n    @joakimr-axis!)\n  * Removed Calico logutils dependency that was incompatible with Go 1.13\n  * Updated Helm templates to use fully-qualified variable references based\n    upon Helm best practices (thanks @javaducky!)\n\n## edge-19.11.3\n\n* CLI\n  * Added a check that ensures using `--namespace` and `--all-namespaces`\n    results in an error as they are mutually exclusive\n* Internal\n  * Fixed an issue causing `tap`, `injector` and `sp-validator` to use old\n    certificates after `helm upgrade` due to not being restarted\n  * Fixed incomplete Swagger definition of the tap api, causing benign error\n    logging in the kube-apiserver\n\n## edge-19.11.2\n\n* CLI\n  * Added a `Dashboard.Replicas` parameter to the Linkerd Helm chart to allow\n    configuring the number of dashboard replicas (thanks @KIVagant!)\n  * Removed redundant service profile check (thanks @alenkacz!)\n* Web UI\n  * Added `linkerd check` to the dashboard in the `/controlplane` view\n  * Added request and response headers to the `tap` expanded view in the\n    dashboard\n* Internal\n  * Removed the destination container from the linkerd-controller deployment\n    as it now runs in the linkerd-destination deployment\n  * Upgraded Go to version 1.13.4\n\n## edge-19.11.1\n\n* CLI\n  * Updated `uninject` command to work with namespace resources (thanks\n    @mayankshah1607!)\n* Controller\n  * Added `conntrack` to the `debug` container to help with connection\n    tracking debugging\n  * Fixed a bug in `tap` where mismatch cluster domain and trust domain caused\n    `tap` to hang\n  * Fixed an issue in the `identity` RBAC resource which caused start up\n    errors in k8s 1.6 (thanks @Pothulapati!)\n* Proxy\n  * Improved debug/error logging to include detailed contextual information\n* Web UI\n  * Added filter to namespace select button\n  * Improved how empty tables are displayed\n* Internal\n  * Added integration test for custom cluster domain\n  * Allowed the control plane to be injected with the `debug` container\n  * Updated proxy image build script to support HTTP proxy options (thanks\n    @joakimr-axis!)\n  * Updated the CLI `doc` command to auto-generate documentation for the proxy\n    configuration annotations (thanks @StupidScience!)\n\n## edge-19.10.5\n\nThis edge release adds support for integrating Linkerd's PKI with an external\ncertificate issuer such as [`cert-manager`], adds distributed tracing support\nto the Linkerd control plane, and adds protection against DNS rebinding\nattacks to the web dashboard. In addition, it includes several improvements to\nthe Linkerd CLI.\n\n* CLI\n  * Added a new `--identity-external-issuer` flag to `linkerd install` that\n    configures Linkerd to use certificates issued by an external certificate\n    issuer (such as `cert-manager`)\n  * Added support for injecting a namespace to `linkerd inject` (thanks\n    @mayankshah1607!)\n  * Added checks to `linkerd check --preinstall` ensuring Kubernetes Secrets\n    can be created and accessed\n  * Fixed `linkerd tap` sometimes displaying incorrect pod names for unmeshed\n    IPs that match multiple running pods\n* Controller\n  * Added support for using trust anchors from an external certificate issuer\n    (such as `cert-manager`) to the `linkerd-identity` service\n* Web UI\n  * Added `Host:` header validation to the `linkerd-web` service, to protect\n    against DNS rebinding attacks\n* Internal\n  * Added new `--trace-collector` and `--trace-collector-svc-account` flags to\n    `linkerd inject` that configures the OpenCensus trace collector used by\n    proxies in the injected workload (thanks @Pothulapati!)\n  * Added a new `--control-plane-tracing` flag to `linkerd install` that\n    enables distributed tracing in the control plane (thanks @Pothulapati!)\n  * Added distributed tracing support to the control plane (thanks\n    @Pothulapati!)\n\nAlso, thanks to @joakimr-axis for several fixes and improvements to internal\nbuild scripts!\n\n[`cert-manager`]: https://github.com/jetstack/cert-manager\n\n## edge-19.10.4\n\nThis edge release adds dashboard UX enhancements, and improves the speed of\nthe CLI.\n\n* CLI\n  * Made `linkerd install --ignore-cluster` and `--skip-checks` faster\n  * Fixed a bug causing `linkerd upgrade` to fail when used with\n    `--from-manifest`\n* Web UI\n  * Made the dashboard sidebar component responsive\n  * Changed the navigation bar color to the one used on the\n    [Linkerd](https://linkerd.io/) website\n\n## edge-19.10.3\n\nThis edge release adds support for headless services, improves the upgrade\nprocess after installing Linkerd with a custom cluster domain, and enhances\nthe `check` functionality to report invalid trust anchors.\n\n* CLI\n  * Made `--cluster-domain` an install-only flag (thanks @bmcstdio!)\n  * Updated `check` to ensure that proxy trust anchors match configuration\n       (thanks @ereslibre!)\n* Controller\n  * Added support for headless services (thanks @JohannesEH!)\n* Helm\n  * Updated the helm build to retain previous releases\n\n## stable-2.6.0\n\nThis release introduces distributed tracing support, adds request and response\nheaders to `linkerd tap`, dramatically improves the performance of the\ndashboard on large clusters, adds traffic split visualizations to the\ndashboard, adds a public Helm repo, and many more improvements!\n\nFor more details, see the announcement blog post:\n<https://linkerd.io/2019/10/10/announcing-linkerd-2.6/>\n\nTo install this release, run: `curl https://run.linkerd.io/install | sh`\n\n**Upgrade notes**: Please see the [upgrade\ninstructions](https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2-6-0).\n\n**Special thanks to**: @alenkacz, @arminbuerkle, @bmcstdio, @bourquep,\n@brianstorti, @kevtaylor, @KIVagant, @pierDipi, and @Pothulapati!\n\n**Full release notes**:\n\n* CLI\n  * Added a new `json` output option to the `linkerd tap` command, which\n    exposes request and response headers\n  * Added a public Helm repo - for full installation instructions, see our\n    [Helm documentation](https://linkerd.io/2/tasks/install-helm/).\n  * Added an `--address` flag to `linkerd dashboard`, allowing users to\n    specify a port-forwarding address (thanks @bmcstdio!)\n  * Added node selector constraints to Helm installation, so users can control\n    which nodes the control plane is deployed to (thanks @bmcstdio!)\n  * Added a `--cluster-domain` flag to the `linkerd install` command that\n    allows setting a custom cluster domain (thanks @arminbuerkle!)\n  * Added a `--disable-heartbeat` flag for `linkerd install | upgrade`\n    commands\n  * Allowed disabling namespace creation when installing Linkerd using Helm\n    (thanks @KIVagant!)\n  * Improved the error message when the CLI cannot connect to Kubernetes\n    (thanks @alenkacz!)\n* Controller\n  * Updated the Prometheus config to keep only needed `cadvisor` metrics,\n    substantially reducing the number of time-series stored in most clusters\n  * Introduced `config.linkerd.io/trace-collector` and\n    `config.alpha.linkerd.io/trace-collector-service-account` pod spec\n    annotations to support per-pod tracing\n  * Instrumented the proxy injector to provide additional metrics about\n    injection (thanks @Pothulapati!)\n  * Added Kubernetes events (and log lines) when the proxy injector injects a\n    deployment, and when injection is skipped\n  * Fixed a workload admission error between the Kubernetes apiserver and the\n    HA proxy injector, by allowing workloads in a namespace to be omitted from\n    the admission webhooks phase using the\n    `config.linkerd.io/admission-webhooks: disabled` label (thanks\n    @hasheddan!)\n  * Fixed proxy injector timeout during a large number of concurrent\n    injections\n  * Added support for disabling the heartbeat cronjob (thanks @kevtaylor!)\n* Proxy\n  * Added distributed tracing support\n  * Decreased proxy Docker image size by removing bundled debug tools\n  * Added 587 (SMTP) to the list of ports to ignore in protocol detection\n    (bound to server-speaks-first protocols) (thanks @brianstorti!)\n* Web UI\n  * Redesigned dashboard navigation so workloads are now viewed by namespace,\n    with an \"All Namespaces\" option, in order to increase dashboard speed\n  * Added Traffic Splits as a resource to the dashboard, including a Traffic\n    Split detail page\n  * Added a `Linkerd Namespace` Grafana dashboard, allowing users to view\n    historical data for a given namespace, similar to CLI output for `linkerd\n    stat deploy -n myNs` (thanks @bourquep!)\n  * Fixed bad request in the top routes tab on empty fields (thanks\n    @pierDipi!)\n* Internal\n  * Moved CI from Travis to GitHub Actions\n  * Added requirement for Go `1.12.9` for controller builds to include\n    security fixes\n  * Added support for Kubernetes `1.16`\n  * Upgraded client-go to `v12.0.0`\n\n## edge-19.10.2\n\nThis edge release is a release candidate for `stable-2.6`.\n\n* Controller\n  * Added the destination container back to the controller; it had previously\n    been separated into its own deployment. This ensures backwards\n    compatibility and allows users to avoid data plane downtime during an\n    upcoming upgrade to `stable-2.6`.\n\n## edge-19.10.1\n\nThis edge release is a release candidate for `stable-2.6`.\n\n* Proxy\n  * Improved error logging when the proxy fails to emit trace spans\n  * Fixed bug in distributed tracing where trace ids with fewer than 16 bytes\n    were discarded\n* Internal\n  * Added integration tests for `linkerd edges` and `linkerd endpoints`\n\n## edge-19.9.5\n\nThis edge release is a release candidate for `stable-2.6`.\n\n* Helm\n  * Added node selector constraints, so users can control which nodes the\n    control plane is deployed to (thanks @bmcstdio!)\n* CLI\n  * Added request and response headers to the JSON output option for `linkerd\n    tap`\n\n## edge-19.9.4\n\nThis edge release introduces experimental support for distributed tracing as\nwell as a redesigned sidebar in the Web UI!\n\nExperimental support for distributed tracing means that Linkerd data plane\nproxies can now emit trace spans, allowing you to see the exact amount of time\nspent in the Linkerd proxy for traced requests. The new\n`config.linkerd.io/trace-collector` and\n`config.alpha.linkerd.io/trace-collector-service-account` tracing annotations\nallow specifying which pods should emit trace spans.\n\nThe goal of the dashboard's sidebar redesign was to reduce load on Prometheus\nand simplify navigation by providing top-level views centered around\nnamespaces and workloads.\n\n* CLI\n  * Introduced a new `--cluster-domain` flag to the `linkerd install` command\n    that allows setting a custom cluster domain (thanks @arminbuerkle!)\n  * Fixed the `linkerd endpoints` command to use the correct Destination API\n    address (thanks @Pothulapati!)\n  * Added `--disable-heartbeat` flag for `linkerd` `install|upgrade` commands\n* Controller\n  * Instrumented the proxy-injector to provide additional metrics about\n    injection (thanks @Pothulapati!)\n  * Added support for `config.linkerd.io/admission-webhooks: disabled` label\n    on namespaces so that the pods creation events in these namespaces are\n    ignored by the proxy injector; this fixes situations in HA deployments\n    where the proxy-injector is installed in `kube-system` (thanks\n    @hasheddan!)\n  * Introduced `config.linkerd.io/trace-collector` and\n    `config.alpha.linkerd.io/trace-collector-service-account` pod spec\n    annotations to support per-pod tracing\n* Web UI\n  * Workloads are now viewed by namespace, with an \"All Namespaces\" option, to\n    improve dashboard performance\n* Proxy\n  * Added experimental distributed tracing support\n\n## edge-19.9.3\n\n* Helm\n  * Allowed disabling namespace creation during install (thanks @KIVagant!)\n* CLI\n  * Added a new `json` output option to the `linkerd tap` command\n* Controller\n  * Fixed proxy injector timeout during a large number of concurrent\n    injections\n  * Separated the destination controller into its own separate deployment\n  * Updated Prometheus config to keep only needed `cadvisor` metrics,\n    substantially reducing the number of time-series stored in most clusters\n* Web UI\n  * Fixed bad request in the top routes tab on empty fields (thanks\n    @pierDipi!)\n* Proxy\n  * Fixes to the client's backoff logic\n  * Added 587 (SMTP) to the list of ports to ignore in protocol detection\n    (bound to server-speaks-first protocols) (thanks @brianstorti!)\n\n## edge-19.9.2\n\nMuch of our effort has been focused on improving our build and test\ninfrastructure, but this edge release lays the groundwork for some big new\nfeatures to land in the coming releases!\n\n* Helm\n  * There's now a public Helm repo! This release can be installed with: `helm\n    repo add linkerd-edge https://helm.linkerd.io/edge && helm install\n    linkerd-edge/linkerd2`\n  * Improved TLS credential parsing by ignoring spurious newlines\n* Proxy\n  * Decreased proxy-init Docker image size by removing bundled debug tools\n* Web UI\n  * Fixed an issue where the edges table could end up with duplicates\n  * Added an icon to more clearly label external links\n* Internal\n  * Upgraded client-go to v12.0.0\n  * Moved CI from Travis to GitHub Actions\n\n## edge-19.9.1\n\nThis edge release adds traffic splits into the Linkerd dashboard as well as a\nvariety of other improvements.\n\n* CLI\n  * Improved the error message when the CLI cannot connect to Kubernetes\n    (thanks @alenkacz!)\n  * Added `--address` flag to `linkerd dashboard` (thanks @bmcstdio!)\n* Controller\n  * Fixed an issue where the proxy-injector had insufficient RBAC permissions\n  * Added support for disabling the heartbeat cronjob (thanks @kevtaylor!)\n* Proxy\n  * Decreased proxy Docker image size by removing bundled debug tools\n  * Fixed an issue where the incorrect content-length could be set for GET\n    requests with bodies\n* Web UI\n  * Added trafficsplits as a resource to the dashboard, including a\n    trafficsplit detail page\n* Internal\n  * Added support for Kubernetes 1.16\n\n## edge-19.8.7\n\n* Controller\n  * Added Kubernetes events (and log lines) when the proxy injector injects a\n    deployment, and when injection is skipped\n  * Additional preparation for configuring the cluster base domain (thanks\n    @arminbuerkle!)\n* Proxy\n  * Changed the proxy to require the `LINKERD2_PROXY_DESTINATION_SVC_ADDR`\n    environment variable when starting up\n* Web UI\n  * Increased dashboard speed by consolidating existing Prometheus queries\n\n## edge-19.8.6\n\nA new Grafana dashboard has been added which shows historical data for a\nselected namespace. The build process for controller components now requires\n`Go 1.12.9`. Additional contributions were made towards support for custom\ncluster domains.\n\n* Web UI\n  * Added a `Linkerd Namespace` Grafana dashboard, allowing users to view\n    historical data for a given namespace, similar to CLI output for `linkerd\n    stat deploy -n myNs` (thanks @bourquep!)\n* Internal\n  * Added requirement for Go `1.12.9` for controller builds to include\n    security fixes\n  * Set `LINKERD2_PROXY_DESTINATION_GET_SUFFIXES` proxy environment variable,\n    in preparation for custom cluster domain support (thanks @arminbuerkle!)\n\n## stable-2.5.0\n\nThis release adds [Helm support](https://linkerd.io/2/tasks/install-helm/),\n[tap authentication and authorization via RBAC](https://linkerd.io/tap-rbac),\ntraffic split stats, dynamic logging levels, a new cluster monitoring\ndashboard, and countless performance enhancements and bug fixes.\n\nFor more details, see the announcement blog post:\n<https://linkerd.io/2019/08/20/announcing-linkerd-2.5/>\n\nTo install this release, run: `curl https://run.linkerd.io/install | sh`\n\n**Upgrade notes**: Use the `linkerd upgrade` command to upgrade the control\nplane. This command ensures that all existing control plane's configuration\nand mTLS secrets are retained. For more details, please see the [upgrade\ninstructions](https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2-5-0).\n\n**Special thanks to**: @alenkacz, @codeman9, @ethan-daocloud, @jonathanbeber,\nand @Pothulapati!\n\n**Full release notes**:\n\n* CLI\n  * **New** Updated `linkerd tap`, `linkerd top` and `linkerd profile --tap`\n    to require `tap.linkerd.io` RBAC privileges. See\n    <https://linkerd.io/tap-rbac> for more info\n  * **New** Added traffic split metrics via `linkerd stat trafficsplits`\n    subcommand\n  * Made the `linkerd routes` command traffic split aware\n  * Introduced the `linkerd --as` flag which allows users to impersonate\n    another user for Kubernetes operations\n  * Introduced the `--all-namespaces` (`-A`) option to the `linkerd get`,\n    `linkerd edges` and `linkerd stat` commands to retrieve resources across\n    all namespaces\n  * Improved the installation report produced by the `linkerd check` command\n    to include the control plane pods' live status\n  * Fixed bug in the `linkerd upgrade config` command that was causing it to\n    crash\n  * Introduced `--use-wait-flag` to the `linkerd install-cni` command, to\n    configure the CNI plugin to use the `-w` flag for `iptables` commands\n  * Introduced `--restrict-dashboard-privileges` flag to `linkerd install`\n    command, to disallow tap in the dashboard\n  * Fixed `linkerd uninject` not removing `linkerd.io/inject: enabled`\n    annotations\n  * Fixed `linkerd stat -h` example commands (thanks @ethan-daocloud!)\n  * Fixed incorrect \"meshed\" count in `linkerd stat` when resources share the\n    same label selector for pods (thanks @jonathanbeber!)\n  * Added pod status to the output of the `linkerd stat` command (thanks\n    @jonathanbeber!)\n  * Added namespace information to the `linkerd edges` command output and a\n    new `-o wide` flag that shows the identity of the client and server if\n    known\n  * Added a check to the `linkerd check` command to validate the user has\n    privileges necessary to create CronJobs\n  * Added a new check to the `linkerd check --pre` command validating that if\n    PSP is enabled, the NET_RAW capability is available\n* Controller\n  * **New** Disabled all unauthenticated tap endpoints. Tap requests now\n    require [RBAC authentication and\n    authorization](https://linkerd.io/tap-rbac)\n  * The `l5d-require-id` header is now set on tap requests so that a\n    connection is established over TLS\n  * Introduced a new RoleBinding in the `kube-system` namespace to provide\n    [access to tap](https://linkerd.io/tap-rbac)\n  * Added HTTP security headers on all dashboard responses\n  * Added support for namespace-level proxy override annotations (thanks\n    @Pothulapati!)\n  * Added resource limits when HA is enabled (thanks @Pothulapati!)\n  * Added pod anti-affinity rules to the control plane pods when HA is enabled\n    (thanks @Pothulapati!)\n  * Fixed a crash in the destination service when an endpoint does not have a\n    `TargetRef`\n  * Updated the destination service to return `InvalidArgument` for external\n    name services so that the proxy does not immediately fail the request\n  * Fixed an issue with discovering StatefulSet pods via their unique hostname\n  * Fixed an issue with traffic split where outbound proxy stats are missing\n  * Upgraded the service profile CRD to v1alpha2. No changes required for\n    users currently using v1alpha1\n  * Updated the control plane's pod security policy to restrict workloads from\n    running as `root` in the CNI mode (thanks @codeman9!)\n  * Introduced optional cluster heartbeat cron job\n  * Bumped Prometheus to 2.11.1\n  * Bumped Grafana to 6.2.5\n* Proxy\n  * **New** Added a new `/proxy-log-level` endpoint to update the log level at\n    runtime\n  * **New** Updated the tap server to only admit requests from the control\n    plane's tap controller\n  * Added `request_handle_us` histogram to measure proxy overhead\n  * Fixed gRPC client cancellations getting recorded as failures rather than\n    as successful\n  * Fixed a bug where tap would stop streaming after a short amount of time\n  * Fixed a bug that could cause the proxy to leak service discovery\n    resolutions to the Destination controller\n* Web UI\n  * **New** Added \"Kubernetes cluster monitoring\" Grafana dashboard with\n    cluster and containers metrics\n  * Updated the web server to use the new tap APIService. If the `linkerd-web`\n    service account is not authorized to tap resources, users will see a link\n    to documentation to remedy the error\n\n## edge-19.8.5\n\nThis edge release is a release candidate for `stable-2.5`.\n\n* CLI\n  * Fixed CLI filepath issue on Windows\n* Proxy\n  * Fixed gRPC client cancellations getting recorded as failures rather than\n    as successful\n\n## edge-19.8.4\n\nThis edge release is a release candidate for `stable-2.5`.\n\n* CLI\n  * Introduced `--use-wait-flag` to the `linkerd install-cni` command, to\n    configure the CNI plugin to use the `-w` flag for `iptables` commands\n* Controller\n  * Disabled the tap gRPC server listener. All tap requests now require RBAC\n    authentication and authorization\n\n## edge-19.8.3\n\nThis edge release introduces a new `linkerd stat trafficsplits` subcommand, to\nshow traffic split metrics. It also introduces a \"Kubernetes cluster\nmonitoring\" Grafana dashboard.\n\n* CLI\n  * Added traffic split metrics via `linkerd stat trafficsplits` subcommand\n  * Fixed `linkerd uninject` not removing `linkerd.io/inject: enabled`\n    annotations\n  * Fixed `linkerd stat -h` example commands (thanks @ethan-daocloud!)\n* Controller\n  * Added support for namespace-level proxy override annotations\n  * Removed unauthenticated tap from the Public API\n* Proxy\n  * Added `request_handle_us` histogram to measure proxy overhead\n  * Updated the tap server to only admit requests from the control plane's tap\n    controller\n  * Fixed a bug where tap would stop streaming after a short amount of time\n  * Fixed a bug that could cause the proxy to leak service discovery\n    resolutions to the Destination controller\n* Web UI\n  * Added \"Kubernetes cluster monitoring\" Grafana dashboard with cluster and\n    containers metrics\n* Internal\n  * Updated `linkerd install` and `linkerd upgrade` to use Helm charts for\n    templating\n  * Pinned Helm tooling to `v2.14.3`\n  * Added Helm integration tests\n  * Added container CPU and memory usage to `linkerd-heartbeat` requests\n  * Removed unused inject code (thanks @alenkacz!)\n\n## edge-19.8.2\n\nThis edge release introduces the new Linkerd control plane Helm chart, named\n`linkerd2`. Helm users can now install and remove the Linkerd control plane by\nusing the `helm install` and `helm delete` commands. Proxy injection also now\nuses Helm charts.\n\nNo changes were made to the existing `linkerd install` behavior.\n\nFor detailed installation steps using Helm, see the notes for\n[#3146](https://github.com/linkerd/linkerd2/pull/3146).\n\n* CLI\n  * Updated `linkerd top` and `linkerd profile --tap` to require\n    `tap.linkerd.io` RBAC privileges, see <https://linkerd.io/tap-rbac> for\n    more info\n  * Modified `tap.linkerd.io` APIService to enable usage in `kubectl auth\n    can-i` commands\n  * Introduced `--restrict-dashboard-privileges` flag to `linkerd install`\n    command, to restrict the dashboard's default privileges to disallow tap\n* Controller\n  * Introduced a new ClusterRole, `linkerd-linkerd-tap-admin`, which gives\n    cluster-wide tap privileges. Also introduced a new ClusterRoleBinding,\n    `linkerd-linkerd-web-admin`, which binds the `linkerd-web` service account\n    to the new tap ClusterRole\n  * Removed successfully completed `linkerd-heartbeat` jobs from pod listing\n    in the linkerd control plane to streamline `get po` output (thanks\n    @Pothulapati!)\n* Web UI\n  * Updated the web server to use the new tap APIService. If the `linkerd-web`\n    service account is not authorized to tap resources, users will see a link\n    to documentation to remedy the error\n\n## edge-19.8.1\n\n### Significant Update\n\nThis edge release introduces a new tap APIService. The Kubernetes apiserver\nauthenticates the requesting tap user and then forwards tap requests to the\nnew tap APIServer. The `linkerd tap` command now makes requests against the\nAPIService.\n\nWith this release, users must be authorized via RBAC to use the `linkerd tap`\ncommand. Specifically `linkerd tap` requires the `watch` verb on all resources\nin the `tap.linkerd.io/v1alpha1` APIGroup. More granular access is also\navailable via sub-resources such as `deployments/tap` and `pods/tap`.\n\n* CLI\n  * Added a check to the `linkerd check` command to validate the user has\n    privileges necessary to create CronJobs\n  * Introduced the `linkerd --as` flag which allows users to impersonate\n    another user for Kubernetes operations\n  * The `linkerd tap` command now makes requests against the tap APIService\n* Controller\n  * Added HTTP security headers on all dashboard responses\n  * Fixed nil pointer dereference in the destination service when an endpoint\n    does not have a `TargetRef`\n  * Added resource limits when HA is enabled\n  * Added RSA support to TLS libraries\n  * Updated the destination service to return `InvalidArgument` for external\n    name services so that the proxy does not immediately fail the request\n  * The `l5d-require-id` header is now set on tap requests so that a\n    connection is established over TLS\n  * Introduced the `APIService/v1alpha1.tap.linkerd.io` global resource\n  * Introduced the `ClusterRoleBinding/linkerd-linkerd-tap-auth-delegator`\n    global resource\n  * Introduced the `Secret/linkerd-tap-tls` resource into the `linkerd`\n    namespace\n  * Introduced the `RoleBinding/linkerd-linkerd-tap-auth-reader` resource into\n    the `kube-system` namespace\n* Proxy\n  * Added the `LINKERD2_PROXY_TAP_SVC_NAME` environment variable so that the\n    tap server attempts to authorize client identities\n* Internal\n  * Replaced `dep` with Go modules for dependency management\n\n## edge-19.7.5\n\n* CLI\n  * Improved the installation report produced by the `linkerd check` command\n    to include the control plane pods' live status\n  * Added the `--all-namespaces` (`-A`) option to the `linkerd get`, `linkerd\n    edges` and `linkerd stat` commands to retrieve resources across all\n    namespaces\n* Controller\n  * Fixed an issue with discovering StatefulSet pods via their unique hostname\n  * Fixed an issue with traffic split where outbound proxy stats are missing\n  * Bumped Prometheus to 2.11.1\n  * Bumped Grafana to 6.2.5\n  * Upgraded the service profile CRD to v1alpha2 where the openAPIV3Schema\n    validation is replaced by a validating admission webhook. No changes\n    required for users currently using v1alpha1\n  * Updated the control plane's pod security policy to restrict workloads from\n    running as `root` in the CNI mode (thanks @codeman9!)\n  * Introduced cluster heartbeat cron job\n* Proxy\n  * Introduced the `l5d-require-id` header to enforce TLS outbound\n    communication from the Tap server\n\n## edge-19.7.4\n\n* CLI\n  * Made the `linkerd routes` command traffic-split aware\n  * Fixed bug in the `linkerd upgrade config` command that was causing it to\n    crash\n  * Added pod status to the output of the `linkerd stat`command (thanks\n    @jonathanbeber!)\n  * Fixed incorrect \"meshed\" count in `linkerd stat` when resources share the\n    same label selector for pods (thanks @jonathanbeber!)\n  * Added namespace information to the `linkerd edges` command output and a\n    new `-o wide` flag that shows the identity of the client and server if\n    known\n  * Added a new check to the `linkerd check --pre` command validating that if\n    PSP is enabled, the NET_RAW capability is available\n* Controller\n  * Added pod anti-affinity rules to the control plane pods when HA is enabled\n    (thanks @Pothulapati!)\n* Proxy\n  * Improved performance by using a constant-time load balancer\n  * Added a new `/proxy-log-level` endpoint to update the log level at runtime\n\n## stable-2.4.0\n\nThis release adds traffic splitting functionality, support for the Kubernetes\nService Mesh Interface (SMI), graduates high-availability support out of\nexperimental status, and adds a tremendous list of other improvements,\nperformance enhancements, and bug fixes.\n\nLinkerd's new traffic splitting feature allows users to dynamically control\nthe percentage of traffic destined for a service. This powerful feature can be\nused to implement rollout strategies like canary releases and blue-green\ndeploys. Support for the [Service Mesh Interface](https://smi-spec.io) (SMI)\nmakes it easier for ecosystem tools to work across all service mesh\nimplementations.\n\nAlong with the introduction of optional install stages via the `linkerd\ninstall config` and `linkerd install control-plane` commands, the default\nbehavior of the `linkerd inject` command only adds annotations and defers\ninjection to the always-installed proxy injector component.\n\nFinally, there have been many performance and usability improvements to the\nproxy and UI, as well as production-ready features including:\n\n* A new `linkerd edges` command that provides fine-grained observability into\n  the TLS-based identity system\n* A `--enable-debug-sidecar` flag for the `linkerd inject` command that\n  improves debugging efforts\n\nLinkerd recently passed a CNCF-sponsored security audit! Check out the\nin-depth report\n[here](https://github.com/linkerd/linkerd2/blob/master/SECURITY_AUDIT.pdf).\n\nTo install this release, run: `curl https://run.linkerd.io/install | sh`\n\n**Upgrade notes**: Use the `linkerd upgrade` command to upgrade the control\nplane. This command ensures that all existing control plane's configuration\nand mTLS secrets are retained. For more details, please see the [upgrade\ninstructions](https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2-4-0)\nfor more details.\n\n**Special thanks to**: @alenkacz, @codeman9, @dwj300, @jackprice, @liquidslr,\n@matej-g, @Pothulapati, @zaharidichev\n\n**Full release notes**:\n\n* CLI\n  * **Breaking Change** Removed the `--proxy-auto-inject` flag, as the proxy\n    injector is now always installed\n  * **Breaking Change** Replaced the `--linkerd-version` flag with the\n    `--proxy-version` flag in the `linkerd install` and `linkerd upgrade`\n    commands, which allows setting the version for the injected proxy sidecar\n    image, without changing the image versions for the control plane\n  * Introduced install stages: `linkerd install config` and `linkerd install\n    control-plane`\n  * Introduced upgrade stages: `linkerd upgrade config` and `linkerd upgrade\n    control-plane`\n  * Introduced a new `--from-manifests` flag to `linkerd upgrade` allowing\n    manually feeding a previously saved output of `linkerd install` into the\n    command, instead of requiring a connection to the cluster to fetch the\n    config\n  * Introduced a new `--manual` flag to `linkerd inject` to output the proxy\n    sidecar container spec\n  * Introduced a new `--enable-debug-sidecar` flag to `linkerd inject`, that\n    injects a debug sidecar to inspect traffic to and from the meshed pod\n  * Added a new check for unschedulable pods and PSP issues (thanks,\n    @liquidslr!)\n  * Disabled the spinner in `linkerd check` when running without a TTY\n  * Ensured the ServiceAccount for the proxy injector is created before its\n    Deployment to avoid warnings when installing the proxy injector (thanks,\n    @dwj300!)\n  * Added a `linkerd check config` command for verifying that `linkerd install\n    config` was successful\n  * Improved the help documentation of `linkerd install` to clarify flag usage\n  * Added support for private Kubernetes clusters by changing the CLI to\n    connect to the control plane using a port-forward (thanks, @jackprice!)\n  * Fixed `linkerd check` and `linkerd dashboard` failing when any control\n    plane pod is not ready, even when multiple replicas exist (as in HA mode)\n  * **New** Added a `linkerd edges` command that shows the source and\n    destination name and identity for proxied connections, to assist in\n    debugging\n  * Tap can now be disabled for specific pods during injection by using the\n    `--disable-tap` flag, or by using the `config.linkerd.io/disable-tap`\n    annotation\n  * Introduced pre-install healthcheck for clock skew (thanks, @matej-g!)\n  * Added a JSON option to the `linkerd edges` command so that output is\n    scripting friendly and can be parsed easily (thanks @alenkacz!)\n  * Fixed an issue when Linkerd is installed with `--ha`, running `linkerd\n    upgrade` without `--ha` will disable the high availability control plane\n  * Fixed an issue with `linkerd upgrade` where running without `--ha` would\n    unintentionally disable high availability features if they were previously\n    enabled\n  * Added a `--init-image-version` flag to `linkerd inject` to override the\n    injected proxy-init container version\n  * Added the `--linkerd-cni-enabled` flag to the `install` subcommands so\n    that `NET_ADMIN` capability is omitted from the CNI-enabled control\n    plane's PSP\n  * Updated `linkerd check` to validate the caller can create\n    `PodSecurityPolicy` resources\n  * Added a check to `linkerd install` to prevent installing multiple control\n    planes into different namespaces avoid conflicts between global resources\n  * Added support for passing a URL directly to `linkerd inject` (thanks\n    @Pothulapati!)\n  * Added more descriptive output to the `linkerd check` output for control\n    plane ReplicaSet readiness\n  * Refactored the `linkerd endpoints` to use the same interface as used by\n    the proxy for service discovery information\n  * Fixed a bug where `linkerd inject` would fail when given a path to a file\n    outside the current directory\n  * Graduated high-availability support out of experimental status\n  * Modified the error message for `linkerd install` to provide instructions\n    for proceeding when an existing installation is found\n* Controller\n  * Added Go pprof HTTP endpoints to all control plane components' admin\n    servers to better assist debugging efforts\n  * Fixed bug in the proxy injector, where sporadically the pod workload owner\n    wasn't properly determined, which would result in erroneous stats\n  * Added support for a new `config.linkerd.io/disable-identity` annotation to\n    opt out of identity for a specific pod\n  * Fixed pod creation failure when a `ResourceQuota` exists by adding a\n    default resource spec for the proxy-init init container\n  * Fixed control plane components failing on startup when the Kubernetes API\n    returns an `ErrGroupDiscoveryFailed`\n  * Added Controller Component Labels to the webhook config resources (thanks,\n    @Pothulapati!)\n  * Moved the tap service into its own pod\n  * **New** Control plane installations now generate a self-signed certificate\n    and private key pair for each webhook, to prepare for future work to make\n    the proxy injector and service profile validator HA\n  * Added the `config.linkerd.io/enable-debug-sidecar` annotation allowing the\n    `--enable-debug-sidecar` flag to work when auto-injecting Linkerd proxies\n  * Added multiple replicas for the `proxy-injector` and `sp-validator`\n    controllers when run in high availability mode (thanks to @Pothulapati!)\n  * Defined least privilege default security context values for the proxy\n    container so that auto-injection does not fail (thanks @codeman9!)\n  * Default the webhook failure policy to `Fail` in order to account for\n    unexpected errors during auto-inject; this ensures uninjected applications\n    are not deployed\n  * Introduced control plane's PSP and RBAC resources into Helm templates;\n    these policies are only in effect if the PSP admission controller is\n    enabled\n  * Removed `UPDATE` operation from proxy-injector webhook because pod\n    mutations are disallowed during update operations\n  * Default the mutating and validating webhook configurations `sideEffects`\n    property to `None` to indicate that the webhooks have no side effects on\n    other resources (thanks @Pothulapati!)\n  * Added support for the SMI TrafficSplit API which allows users to define\n    traffic splits in TrafficSplit custom resources\n  * Added the `linkerd.io/control-plane-ns` label to all Linkerd resources\n    allowing them to be identified using a label selector\n  * Added Prometheus metrics for the Kubernetes watchers in the destination\n    service for better visibility\n* Proxy\n  * Replaced the fixed reconnect backoff with an exponential one (thanks,\n    @zaharidichev!)\n  * Fixed an issue where load balancers can become stuck\n  * Added a dispatch timeout that limits the amount of time a request can be\n    buffered in the proxy\n  * Removed the limit on the number of concurrently active service discovery\n    queries to the destination service\n  * Fix an epoll notification issue that could cause excessive CPU usage\n  * Added the ability to disable tap by setting an env var (thanks,\n    @zaharidichev!)\n  * Changed the proxy's routing behavior so that, when the control plane does\n    not resolve a destination, the proxy forwards the request with minimal\n    additional routing logic\n  * Fixed a bug in the proxy's HPACK codec that could cause requests with very\n    large header values to hang indefinitely\n  * Fixed a memory leak that can occur if an HTTP/2 request with a payload\n    ends before the entire payload is sent to the destination\n  * The `l5d-override-dst` header is now used for inbound service profile\n    discovery\n  * Added errors totals to `response_total` metrics\n  * Changed the load balancer to require that Kubernetes services are resolved\n    via the control plane\n  * Added the `NET_RAW` capability to the proxy-init container to be\n    compatible with `PodSecurityPolicy`s that use `drop: all`\n  * Fixed the proxy rejecting HTTP2 requests that don't have an `:authority`\n  * Improved idle service eviction to reduce resource consumption for clients\n    that send requests to many services\n  * Fixed proxied HTTP/2 connections returning 502 errors when the upstream\n    connection is reset, rather than propagating the reset to the client\n  * Changed the proxy to treat unexpected HTTP/2 frames as stream errors\n    rather than connection errors\n  * Fixed a bug where DNS queries could persist longer than necessary\n  * Improved router eviction to remove idle services in a more timely manner\n  * Fixed a bug where the proxy would fail to process requests with obscure\n    characters in the URI\n* Web UI\n  * Added the Font Awesome stylesheet locally; this allows both Font Awesome\n    and Material-UI sidebar icons to display consistently with no/limited\n    internet access (thanks again, @liquidslr!)\n  * Removed the Authorities table and sidebar link from the dashboard to\n    prepare for a new, improved dashboard view communicating authority data\n  * Fixed dashboard behavior that caused incorrect table sorting\n  * Removed the \"Debug\" page from the Linkerd dashboard while the\n    functionality of that page is being redesigned\n  * Added an Edges table to the resource detail view that shows the source,\n    destination name, and identity for proxied connections\n  * Improved UI for Edges table in dashboard by changing column names, adding\n    a \"Secured\" icon and showing an empty Edges table in the case of no\n    returned edges\n* Internal\n  * Known container errors were hidden in the integration tests; now they are\n    reported in the output without having the tests fail\n  * Fixed integration tests by adding known proxy-injector log warning to\n    tests\n  * Modified the integration test for `linkerd upgrade` in order to test\n    upgrading from the latest stable release instead of the latest edge and\n    reflect the typical use case\n  * Moved the proxy-init container to a separate `linkerd/proxy-init` Git\n    repository\n\n## edge-19.7.3\n\n* CLI\n  * Graduated high-availability support out of experimental status\n  * Modified the error message for `linkerd install` to provide instructions\n    for proceeding when an existing installation is found\n* Controller\n  * Added Prometheus metrics for the Kubernetes watchers in the destination\n    service for better visibility\n\n## edge-19.7.2\n\n* CLI\n  * Refactored the `linkerd endpoints` to use the same interface as used by\n    the proxy for service discovery information\n  * Fixed a bug where `linkerd inject` would fail when given a path to a file\n    outside the current directory\n* Proxy\n  * Fixed a bug where DNS queries could persist longer than necessary\n  * Improved router eviction to remove idle services in a more timely manner\n  * Fixed a bug where the proxy would fail to process requests with obscure\n    characters in the URI\n\n## edge-19.7.1\n\n* CLI\n  * Added more descriptive output to the `linkerd check` output for control\n    plane ReplicaSet readiness\n  * **Breaking change** Renamed `config.linkerd.io/debug` annotation to\n    `config.linkerd.io/enable-debug-sidecar`, to match the\n    `--enable-debug-sidecar` CLI flag that sets it\n  * Fixed a bug in `linkerd edges` that caused incorrect identities to be\n    displayed when requests were sent from two or more namespaces\n* Controller\n  * Added the `linkerd.io/control-plane-ns` label to the SMI Traffic Split CRD\n* Proxy\n  * Fixed proxied HTTP/2 connections returning 502 errors when the upstream\n    connection is reset, rather than propagating the reset to the client\n  * Changed the proxy to treat unexpected HTTP/2 frames as stream errors\n    rather than connection errors\n\n## edge-19.6.4\n\nThis release adds support for the SMI [Traffic\nSplit](https://github.com/deislabs/smi-spec/blob/master/traffic-split.md) API.\nCreating a TrafficSplit resource will cause Linkerd to split traffic between\nthe specified backend services. Please see [the\nspec](https://github.com/deislabs/smi-spec/blob/master/traffic-split.md) for\nmore details.\n\n* CLI\n  * Added a check to `install` to prevent installing multiple control planes\n    into different namespaces\n  * Added support for passing a URL directly to `linkerd inject` (thanks\n    @Pothulapati!)\n  * Added the `--all-namespaces` flag to `linkerd edges`\n* Controller\n  * Added support for the SMI TrafficSplit API which allows users to define\n    traffic splits in TrafficSplit custom resources\n* Web UI\n  * Improved UI for Edges table in dashboard by changing column names, adding\n    a \"Secured\" icon and showing an empty Edges table in the case of no\n    returned edges\n\n## edge-19.6.3\n\n* CLI\n  * Updated `linkerd check` to validate the caller can create\n    `PodSecurityPolicy` resources\n* Controller\n  * Default the mutating and validating webhook configurations `sideEffects`\n    property to `None` to indicate that the webhooks have no side effects on\n    other resources (thanks @Pothulapati!)\n* Proxy\n  * Added the `NET_RAW` capability to the proxy-init container to be\n    compatible with `PodSecurityPolicy`s that use `drop: all`\n  * Fixed the proxy rejecting HTTP2 requests that don't have an `:authority`\n  * Improved idle service eviction to reduce resource consumption for clients\n    that send requests to many services\n* Web UI\n  * Removed the \"Debug\" page from the Linkerd dashboard while the\n    functionality of that page is being redesigned\n  * Added an Edges table to the resource detail view that shows the source,\n    destination name, and identity for proxied connections\n\n## edge-19.6.2\n\n* CLI\n  * Added the `--linkerd-cni-enabled` flag to the `install` subcommands so\n    that `NET_ADMIN` capability is omitted from the CNI-enabled control\n    plane's PSP\n* Controller\n  * Default to least-privilege security context values for the proxy container\n    so that auto-inject does not fail on restricted PSPs (thanks @codeman9!)\n  * Defined least privilege default security context values for the proxy\n    container so that auto-injection does not fail on (thanks @codeman9!)\n  * Default the webhook failure policy to `Fail` in order to account for\n    unexpected errors during auto-inject; this ensures uninjected applications\n    are not deployed\n  * Introduced control plane's PSP and RBAC resources into Helm templates;\n    these policies are only in effect if the PSP admission controller is\n    enabled\n  * Removed `UPDATE` operation from proxy-injector webhook because pod\n    mutations are disallowed during update operations\n* Proxy\n  * The `l5d-override-dst` header is now used for inbound service profile\n    discovery\n  * Include errors in `response_total` metrics\n  * Changed the load balancer to require that Kubernetes services are resolved\n    via the control plane\n* Web UI\n  * Fixed dashboard behavior that caused incorrect table sorting\n\n## edge-19.6.1\n\n* CLI\n  * Fixed an issue where, when Linkerd is installed with `--ha`, running\n    `linkerd upgrade` without `--ha` will disable the high availability\n    control plane\n  * Added a `--init-image-version` flag to `linkerd inject` to override the\n    injected proxy-init container version\n* Controller\n  * Added multiple replicas for the `proxy-injector` and `sp-validator`\n    controllers when run in high availability mode (thanks to @Pothulapati!)\n* Proxy\n  * Fixed a memory leak that can occur if an HTTP/2 request with a payload\n    ends before the entire payload is sent to the destination\n* Internal\n  * Moved the proxy-init container to a separate `linkerd/proxy-init` Git\n    repository\n\n## stable-2.3.2\n\nThis stable release fixes a memory leak in the proxy.\n\nTo install this release, run: `curl https://run.linkerd.io/install | sh`\n\n**Full release notes**:\n\n* Proxy\n  * Fixed a memory leak that can occur if an HTTP/2 request with a payload\n    ends before the entire payload is sent to the destination\n\n## edge-19.5.4\n\n* CLI\n  * Added a JSON option to the `linkerd edges` command so that output is\n    scripting friendly and can be parsed easily (thanks @alenkacz!)\n* Controller\n  * **New** Control plane installations now generate a self-signed certificate\n    and private key pair for each webhook, to prepare for future work to make\n    the proxy injector and service profile validator HA\n  * Added a debug container annotation, allowing the `--enable-debug-sidecar`\n    flag to work when auto-injecting Linkerd proxies\n* Proxy\n  * Changed the proxy's routing behavior so that, when the control plane does\n    not resolve a destination, the proxy forwards the request with minimal\n    additional routing logic\n  * Fixed a bug in the proxy's HPACK codec that could cause requests with very\n    large header values to hang indefinitely\n* Web UI\n  * Removed the Authorities table and sidebar link from the dashboard to\n    prepare for a new, improved dashboard view communicating authority data\n* Internal\n  * Modified the integration test for `linkerd upgrade` to test upgrading from\n    the latest stable release instead of the latest edge, to reflect the\n    typical use case\n\n## stable-2.3.1\n\nThis stable release adds a number of proxy stability improvements.\n\nTo install this release, run: `curl https://run.linkerd.io/install | sh`\n\n**Special thanks to**: @zaharidichev and @11Takanori!\n\n**Full release notes**:\n\n* Proxy\n  * Changed the proxy's routing behavior so that, when the control plane does\n    not resolve a destination, the proxy forwards the request with minimal\n    additional routing logic\n  * Fixed a bug in the proxy's HPACK codec that could cause requests with very\n    large header values to hang indefinitely\n  * Replaced the fixed reconnect backoff with an exponential one (thanks,\n    @zaharidichev!)\n  * Fixed an issue where requests could be held indefinitely by the load\n    balancer\n  * Added a dispatch timeout that limits the amount of time a request can be\n    buffered in the proxy\n  * Removed the limit on the number of concurrently active service discovery\n    queries to the destination service\n  * Fixed an epoll notification issue that could cause excessive CPU usage\n  * Added the ability to disable tap by setting an env var (thanks,\n    @zaharidichev!)\n\n## edge-19.5.3\n\n* CLI\n  * **New** Added a `linkerd edges` command that shows the source and\n    destination name and identity for proxied connections, to assist in\n    debugging\n  * Tap can now be disabled for specific pods during injection by using the\n    `--disable-tap` flag, or by using the `config.linkerd.io/disable-tap`\n    annotation\n  * Introduced pre-install healthcheck for clock skew (thanks, @matej-g!)\n* Controller\n  * Added Controller Component Labels to the webhook config resources (thanks,\n    @Pothulapati!)\n  * Moved the tap service into its own pod\n* Proxy\n  * Fix an epoll notification issue that could cause excessive CPU usage\n  * Added the ability to disable tap by setting an env var (thanks,\n    @zaharidichev!)\n\n## edge-19.5.2\n\n* CLI\n  * Fixed `linkerd check` and `linkerd dashboard` failing when any control\n    plane pod is not ready, even when multiple replicas exist (as in HA mode)\n* Controller\n  * Fixed control plane components failing on startup when the Kubernetes API\n    returns an `ErrGroupDiscoveryFailed`\n* Proxy\n  * Added a dispatch timeout that limits the amount of time a request can be\n    buffered in the proxy\n  * Removed the limit on the number of concurrently active service discovery\n    queries to the destination service\n\nSpecial thanks to @zaharidichev for adding end to end tests for proxies with\nTLS!\n\n## edge-19.5.1\n\n* CLI\n  * Added a `linkerd check config` command for verifying that `linkerd install\n    config` was successful\n  * Improved the help documentation of `linkerd install` to clarify flag usage\n  * Added support for private Kubernetes clusters by changing the CLI to\n    connect to the control plane using a port-forward (thanks, @jackprice!)\n* Controller\n  * Fixed pod creation failure when a `ResourceQuota` exists by adding a\n    default resource spec for the proxy-init init container\n* Proxy\n  * Replaced the fixed reconnect backoff with an exponential one (thanks,\n    @zaharidichev!)\n  * Fixed an issue where load balancers can become stuck\n* Internal\n  * Fixed integration tests by adding known proxy-injector log warning to\n    tests\n\n## edge-19.4.5\n\n### Significant Update\n\nAs of this edge release the proxy injector component is always installed. To\nhave the proxy injector inject a pod you still can manually add the\n`linkerd.io/inject: enable` annotation into the pod spec, or at the namespace\nlevel to have all your pods be injected by default. With this release the\nbehaviour of the `linkerd inject` command changes, where the proxy sidecar\ncontainer YAML is no longer included in its output by default, but instead it\nwill just add the annotations to defer the injection to the proxy injector.\nFor use cases that require the full injected YAML to be output, a new\n`--manual` flag has been added.\n\nAnother important update is the introduction of install stages. You still have\nthe old `linkerd install` command, but now it can be broken into `linkerd\ninstall config` which installs the resources that require cluster-level\nprivileges, and `linkerd install control-plane` that continues with the\nresources that only require namespace-level privileges. This also applies to\nthe `linkerd upgrade` command.\n\n* CLI\n  * **Breaking Change** Removed the `--proxy-auto-inject` flag, as the proxy\n    injector is now always installed\n  * **Breaking Change** Replaced the `--linkerd-version` flag with the\n    `--proxy-version` flag in the `linkerd install` and `linkerd upgrade`\n    commands, which allows setting the version for the injected proxy sidecar\n    image, without changing the image versions for the control plane\n  * Introduced install stages: `linkerd install config` and `linkerd install\n    control-plane`\n  * Introduced upgrade stages: `linkerd upgrade config` and `linkerd upgrade\n    control-plane`\n  * Introduced a new `--from-manifests` flag to `linkerd upgrade` allowing\n    manually feeding a previously saved output of `linkerd install` into the\n    command, instead of requiring a connection to the cluster to fetch the\n    config\n  * Introduced a new `--manual` flag to `linkerd inject` to output the proxy\n    sidecar container spec\n  * Introduced a new `--enable-debug-sidecar` option to `linkerd inject`, that\n    injects a debug sidecar to inspect traffic to and from the meshed pod\n  * Added a new check for unschedulable pods and PSP issues (thanks,\n    @liquidslr!)\n  * Disabled the spinner in `linkerd check` when running without a TTY\n  * Ensured the ServiceAccount for the proxy injector is created before its\n    Deployment to avoid warnings when installing the proxy injector (thanks,\n    @dwj300!)\n\n* Controller\n  * Added Go pprof HTTP endpoints to all control plane components' admin\n    servers to better assist debugging efforts\n  * Fixed bug in the proxy injector, where sporadically the pod workload owner\n    wasn't properly determined, which would result in erroneous stats\n  * Added support for a new `config.linkerd.io/disable-identity` annotation to\n    opt out of identity for a specific pod\n\n* Web UI\n  * Added the Font Awesome stylesheet locally; this allows both Font Awesome\n    and Material-UI sidebar icons to display consistently with no/limited\n    internet access (thanks again, @liquidslr!)\n\n* Internal\n  * Known container errors were hidden in the integration tests; now they are\n    reported in the output, still without having the tests fail\n\n## stable-2.3.0\n\nThis stable release introduces a new TLS-based service identity system into\nthe default Linkerd installation, replacing `--tls=optional` and the\n`linkerd-ca` controller. Now, proxies generate ephemeral private keys into a\ntmpfs directory and dynamically refresh certificates, authenticated by\nKubernetes ServiceAccount tokens, and tied to ServiceAccounts as the identity\nprimitive\n\nIn this release, all meshed HTTP communication is private and authenticated by\ndefault.\n\nAmong the many improvements to the web dashboard, we've added a Community page\nto surface news and updates from linkerd.io.\n\nFor more details, see the announcement blog post:\n<https://linkerd.io/2019/04/16/announcing-linkerd-2.3/>\n\nTo install this release, run: `curl https://run.linkerd.io/install | sh`\n\n**Upgrade notes**: The `linkerd-ca` controller has been removed in favor of\nthe `linkerd-identity` controller. If you had previously installed Linkerd\nwith `--tls=optional`, manually delete the `linkerd-ca` deployment after\nupgrading. Also, `--single-namespace` mode is no longer supported. For full\ndetails on upgrading to this release, please see the [upgrade\ninstructions](https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2-3-0).\n\n**Special thanks to**: @codeman9, @harsh-98, @huynq0911, @KatherineMelnyk,\n@liquidslr, @paranoidaditya, @Pothulapati, @TwinProduction, and @yb172!\n\n**Full release notes**:\n\n* CLI\n  * Introduced an `upgrade` command! This allows an existing Linkerd control\n    plane to be reinstalled or reconfigured; it is particularly useful for\n    automatically reusing flags set in the previous `install` or `upgrade`\n  * Introduced the `linkerd metrics` command for fetching proxy metrics\n  * **Breaking Change:** The `--linkerd-cni-enabled` flag has been removed\n    from the `inject` command; CNI is configured at the cluster level with the\n    `install` command and no longer applies to the `inject` command\n  * **Breaking Change** Removed the `--disable-external-profiles` flag from\n    the `install` command; external profiles are now disabled by default and\n    can be enabled with the new `--enable-external-profiles` flag\n  * **Breaking change** Removed the `--api-port` flag from the `inject` and\n    `install` commands, since there's no benefit to running the control\n    plane's destination API on a non-default port (thanks, @paranoidaditya)\n  * **Breaking change** Removed the `--tls=optional` flag from the `linkerd\n    install` command, since TLS is now enabled by default\n  * Changed `install` to accept or generate an issuer Secret for the Identity\n    controller\n  * Changed `install` to fail in the case of a conflict with an existing\n    installation; this can be disabled with the `--ignore-cluster` flag\n  * Added the ability to adjust the Prometheus log level via\n    `--controller-log-level`\n  * Implemented `--proxy-cpu-limit` and `--proxy-memory-limit` for setting the\n    proxy resources limits (`--proxy-cpu` and `--proxy-memory` were deprecated\n    in favor of `proxy-cpu-request` and `proxy-memory-request`) (thanks\n    @TwinProduction!)\n  * Added a validator for the `--proxy-log-level` flag\n  * Updated the `inject` and `uninject` subcommands to issue warnings when\n    resources lack a `Kind` property (thanks @Pothulapati!)\n  * The `inject` command proxy options are now converted into config\n    annotations; the annotations ensure that these configs are persisted in\n    subsequent resource updates\n  * Changed `inject` to require fetching a configuration from the control\n    plane; this can be disabled with the `--ignore-cluster` and\n    `--disable-identity` flags, though this will prevent the injected pods\n    from participating in mesh identity\n  * Included kubectl version check as part of `linkerd check` (thanks @yb172!)\n  * Updated `linkerd check` to ensure hint URLs are displayed for RPC checks\n  * Fixed sporadic (and harmless) race condition error in `linkerd check`\n  * Introduced a check for NET_ADMIN in `linkerd check`\n  * Fixed permissions check for CRDs\n  * Updated the `linkerd dashboard` command to serve the dashboard on a fixed\n    port, allowing it to leverage browser local storage for user settings\n  * Updated the `linkerd routes` command to display rows for routes that are\n    not receiving any traffic\n  * Added TCP stats to the stat command, under the `-o wide` and `-o json`\n    flags\n  * The `stat` command now always shows the number of open TCP connections\n  * Removed TLS metrics from the `stat` command; this is in preparation for\n    surfacing identity metrics in a clearer way\n  * Exposed the `install-cni` command and its flags, and tweaked their\n    descriptions\n  * Eliminated false-positive vulnerability warnings related to go.uuid\n* Controller\n  * Added a new public API endpoint for fetching control plane configuration\n  * **Breaking change** Removed support for running the control plane in\n    single-namespace mode, which was severely limited in the number of\n    features it supported due to not having access to cluster-wide resources;\n    the end goal being Linkerd degrading gracefully depending on its\n    privileges\n  * Updated automatic proxy injection and CLI injection to support overriding\n    inject defaults via pod spec annotations\n  * Added support for the `config.linkerd.io/proxy-version` annotation on pod\n    specs; this will override the injected proxy version\n  * The auto-inject admission controller webhook is updated to watch pods\n    creation and update events; with this change, proxy auto-injection now\n    works for all kinds of workloads, including StatefulSets, DaemonSets,\n    Jobs, etc\n  * Service profile validation is now performed via a webhook endpoint; this\n    prevents Kubernetes from accepting invalid service profiles\n  * Changed the default CPU request from `10m` to `100m` for HA deployments;\n    this will help some intermittent liveness/readiness probes from failing\n    due to tight resource constraints\n  * Updated destination service to return TLS identities only when the\n    destination pod is TLS-aware and is in the same controller namespace\n  * Lessen klog level to improve security\n  * Updated control plane components to query Kubernetes at startup to\n    determine authorized namespaces and if ServiceProfile support is available\n  * Modified the stats payload to include the following TCP stats:\n    `tcp_open_connections`, `tcp_read_bytes_total`, `tcp_write_bytes_total`\n  * Instrumented clients in the control plane connecting to Kubernetes, thus\n    providing better visibility for diagnosing potential problems with those\n    connections\n  * Renamed the \"linkerd-proxy-api\" service to \"linkerd-destination\"\n  * Bumped Prometheus to version 2.7.1 and Grafana to version 5.4.3\n* Proxy\n  * Introduced per-proxy private key generation and dynamic certificate\n    renewal\n  * **Fixed** a connection starvation issue where TLS discovery detection on\n    slow or idle connections could block all other connections from being\n    accepted on the inbound listener of the proxy\n  * **Fixed** a stream leak between the proxy and the control plane that could\n    cause the `linkerd-controller` pod to use an excessive amount of memory\n  * Added a readiness check endpoint on `:4191/ready` so that Kubernetes\n    doesn't consider pods ready until they have acquired a certificate from\n    the Identity controller\n  * Some `l5d-*` informational headers have been temporarily removed from\n    requests and responses because they could leak information to external\n    clients\n  * The proxy's connect timeouts have been updated, especially to improve\n    reconnect behavior between the proxy and the control plane\n  * Increased the inbound/router cap on MAX_CONCURRENT_STREAMS\n  * The `l5d-remote-ip` header is now set on inbound requests and outbound\n    responses\n  * Fixed issue with proxy falling back to filesystem polling due to\n    improperly sized inotify buffer\n* Web UI\n  * **New** Added a Community page to surface news and updates from linkerd.io\n  * Added a Debug page to the web dashboard, allowing you to introspect\n    service discovery state\n  * The Overview page in the Linkerd dashboard now renders appropriately when\n    viewed on mobile devices\n  * Added filter functionality to the metrics tables\n  * Added stable sorting for table rows\n  * Added TCP stats to the Linkerd Pod Grafana dashboard\n  * Added TCP stat tables on the namespace landing page and resource detail\n    page\n  * The topology graph now shows TCP stats if no HTTP stats are available\n  * Improved table display on the resource detail page for resources with\n    TCP-only traffic\n  * Updated the resource detail page to start displaying a table with TCP\n    stats\n  * Modified the Grafana variable queries to use a TCP-based metric, so that\n    if there is only TCP traffic then the dropdowns don't end up empty\n  * Fixed sidebar not updating when resources were added/deleted (thanks\n    @liquidslr!)\n  * Added validation to the \"new service profile\" form (thanks @liquidslr!)\n  * Added a Grafana dashboard and web tables for displaying Job stats (thanks,\n    @Pothulapati!)\n  * Removed TLS columns from the dashboard tables; this is in preparation for\n    surfacing identity metrics in a clearer way\n  * Fixed the behavior of the Top query 'Start' button if a user's query\n    returns no data\n  * Fixed an issue with the order of tables returned from a Top Routes query\n  * Added text wrap for paths in the modal for expanded Tap query data\n  * Fixed a quoting issue with service profile downloads (thanks, @liquidslr!)\n  * Updated sorting of route table to move default routes to the bottom\n  * Removed 'Help' hierarchy and surfaced links on navigation sidebar\n  * Ensured that all the tooltips in Grafana displaying the series are shared\n    across all the graphs\n* Internals\n  * Improved the `bin/go-run` script for the build process so that on failure,\n    all associated background processes are terminated\n  * Added more log errors to the integration tests\n  * Removed the GOPATH dependence from the CLI dev environment\n  * Consolidated injection code from CLI and admission controller code paths\n  * Enabled the following linters: `unparam`, `unconvert`, `goimports`,\n    `goconst`, `scopelint`, `unused`, `gosimple`\n  * Bumped base Docker images\n  * Added the flags `-update` and `-pretty-diff` to tests to allow overwriting\n    fixtures and to print the full text of the fixtures upon mismatches\n  * Introduced golangci-lint tooling, using `.golangci.yml` to centralize the\n    config\n  * Added a `-cover` parameter to track code coverage in go tests (more info\n    in TEST.md)\n  * Renamed a function in a test that was shadowing a go built-in function\n    (thanks @huynq0911!)\n\n## edge-19.4.4\n\n* Proxy\n  * **Fixed** a connection starvation issue where TLS discovery detection on\n    slow or idle connections could block all other connections from being\n    accepted on the inbound listener of the proxy\n* CLI\n  * **Fixed** `inject` to allow the `--disable-identity` flag to be used\n    without having to specify the `--ignore-cluster` flag\n* Web UI\n  * The Overview page in the Linkerd dashboard now renders appropriately when\n    viewed on mobile devices\n\n## edge-19.4.3\n\n* CLI\n  * **Fixed** `linkerd upgrade` command not upgrading proxy containers (thanks\n    @jon-walton for the issue report!)\n  * **Fixed** `linkerd upgrade` command not installing the identity service\n    when it was not already installed\n  * Eliminate false-positive vulnerability warnings related to go.uuid\n\nSpecial thanks to @KatherineMelnyk for updating the web component to read the\nUUID from the `linkerd-config` ConfigMap!\n\n## edge-19.4.2\n\n* CLI\n  * Removed TLS metrics from the `stat` command; this is in preparation for\n    surfacing identity metrics in a clearer way\n  * The `upgrade` command now outputs a URL that explains next steps for\n    upgrading\n  * **Breaking Change:** The `--linkerd-cni-enabled` flag has been removed\n    from the `inject` command; CNI is configured at the cluster level with the\n    `install` command and no longer applies to the `inject` command\n* Controller\n  * Service profile validation is now performed via a webhook endpoint; this\n    prevents Kubernetes from accepting invalid service profiles\n  * Added support for the `config.linkerd.io/proxy-version` annotation on pod\n    specs; this will override the injected proxy version\n  * Changed the default CPU request from `10m` to `100m` for HA deployments;\n    this will help some intermittent liveness/readiness probes from failing\n    due to tight resource constraints\n* Proxy\n  * The `CommonName` field on CSRs is now set to the proxy's identity name\n* Web UI\n  * Removed TLS columns from the dashboard tables; this is in preparation for\n    surfacing identity metrics in a clearer way\n\n## edge-19.4.1\n\n* CLI\n  * Introduced an `upgrade` command! This allows an existing Linkerd control\n    plane to be reinstalled or reconfigured; it is particularly useful for\n    automatically reusing flags set in the previous `install` or `upgrade`\n  * The `inject` command proxy options are now converted into config\n    annotations; the annotations ensure that these configs are persisted in\n    subsequent resource updates\n  * The `stat` command now always shows the number of open TCP connections\n  * **Breaking Change** Removed the `--disable-external-profiles` flag from\n    the `install` command; external profiles are now disabled by default and\n    can be enabled with the new `--enable-external-profiles` flag\n* Controller\n  * The auto-inject admission controller webhook is updated to watch pods\n    creation and update events; with this change, proxy auto-injection now\n    works for all kinds of workloads, including StatefulSets, DaemonSets,\n    Jobs, etc\n* Proxy\n  * Some `l5d-*` informational headers have been temporarily removed from\n    requests and responses because they could leak information to external\n    clients\n* Web UI\n  * The topology graph now shows TCP stats if no HTTP stats are available\n  * Improved table display on the resource detail page for resources with\n    TCP-only traffic\n  * Added validation to the \"new service profile\" form (thanks @liquidslr!)\n\n## edge-19.3.3\n\n### Significant Update\n\nThis edge release introduces a new TLS Identity system into the default\nLinkerd installation, replacing `--tls=optional` and the `linkerd-ca`\ncontroller. Now, proxies generate ephemeral private keys into a tmpfs\ndirectory and dynamically refresh certificates, authenticated by Kubernetes\nServiceAccount tokens, via the newly-introduced Identity controller.\n\nNow, all meshed HTTP communication is private and authenticated by default.\n\n* CLI\n  * Changed `install` to accept or generate an issuer Secret for the Identity\n    controller\n  * Changed `install` to fail in the case of a conflict with an existing\n    installation; this can be disabled with the `--ignore-cluster` flag\n  * Changed `inject` to require fetching a configuration from the control\n    plane; this can be disabled with the `--ignore-cluster` and\n    `--disable-identity` flags, though this will prevent the injected pods\n    from participating in mesh identity\n  * **Breaking change** Removed the `--tls=optional` flag from the `linkerd\n    install` command, since TLS is now enabled by default\n  * Added the ability to adjust the Prometheus log level\n* Proxy\n  * **Fixed** a stream leak between the proxy and the control plane that could\n    cause the `linkerd-controller` pod to use an excessive amount of memory\n  * Introduced per-proxy private key generation and dynamic certificate\n    renewal\n  * Added a readiness check endpoint on `:4191/ready` so that Kubernetes\n    doesn't consider pods ready until they have acquired a certificate from\n    the Identity controller\n  * The proxy's connect timeouts have been updated, especially to improve\n    reconnect behavior between the proxy and the control plane\n* Web UI\n  * Added TCP stats to the Linkerd Pod Grafana dashboard\n  * Fixed the behavior of the Top query 'Start' button if a user's query\n    returns no data\n  * Added stable sorting for table rows\n  * Fixed an issue with the order of tables returned from a Top Routes query\n  * Added text wrap for paths in the modal for expanded Tap query data\n* Internal\n  * Improved the `bin/go-run` script for the build process so that on failure,\n    all associated background processes are terminated\n\nSpecial thanks to @liquidslr for many useful UI and log changes, and to\n@mmalone and @sourishkrout at @smallstep for collaboration and advice on the\nIdentity system!\n\n## edge-19.3.2\n\n* Controller\n  * **Breaking change** Removed support for running the control plane in\n    single-namespace mode, which was severely limited in the number of\n    features it supported due to not having access to cluster-wide resources\n  * Updated automatic proxy injection and CLI injection to support overriding\n    inject defaults via pod spec annotations\n  * Added a new public API endpoint for fetching control plane configuration\n* CLI\n  * **Breaking change** Removed the `--api-port` flag from the `inject` and\n    `install` commands, since there's no benefit to running the control\n    plane's destination API on a non-default port (thanks, @paranoidaditya)\n  * Introduced the `linkerd metrics` command for fetching proxy metrics\n  * Updated the `linkerd routes` command to display rows for routes that are\n    not receiving any traffic\n  * Updated the `linkerd dashboard` command to serve the dashboard on a fixed\n    port, allowing it to leverage browser local storage for user settings\n* Web UI\n  * **New** Added a Community page to surface news and updates from linkerd.io\n  * Fixed a quoting issue with service profile downloads (thanks, @liquidslr!)\n  * Added a Grafana dashboard and web tables for displaying Job stats (thanks,\n    @Pothulapati!)\n  * Updated sorting of route table to move default routes to the bottom\n  * Added TCP stat tables on the namespace landing page and resource detail\n    page\n\n## edge-19.3.1\n\n* CLI\n  * Introduced a check for NET_ADMIN in `linkerd check`\n  * Fixed permissions check for CRDs\n  * Included kubectl version check as part of `linkerd check` (thanks @yb172!)\n  * Added TCP stats to the stat command, under the `-o wide` and `-o json`\n    flags\n* Controller\n  * Updated the `mutatingwebhookconfiguration` so that it is recreated when\n    the proxy injector is restarted, so that the MWC always picks up the\n    latest config template during version upgrade\n* Proxy\n  * Increased the inbound/router cap on MAX_CONCURRENT_STREAMS\n  * The `l5d-remote-ip` header is now set on inbound requests and outbound\n    responses\n* Web UI\n  * Fixed sidebar not updating when resources were added/deleted (thanks\n    @liquidslr!)\n  * Added filter functionality to the metrics tables\n* Internal\n  * Added more log errors to the integration tests\n  * Removed the GOPATH dependence from the CLI dev environment\n  * Consolidated injection code from CLI and admission controller code paths\n\n## edge-19.2.5\n\n* CLI\n  * Updated `linkerd check` to ensure hint URLs are displayed for RPC checks\n* Controller\n  * Updated the auto-inject admission controller webhook to respond to UPDATE\n    events for deployment workloads\n  * Updated destination service to return TLS identities only when the\n    destination pod is TLS-aware and is in the same controller namespace\n  * Lessen klog level to improve security\n  * Updated control plane components to query Kubernetes at startup to\n    determine authorized namespaces and if ServiceProfile support is available\n  * Modified the stats payload to include the following TCP stats:\n    `tcp_open_connections`, `tcp_read_bytes_total`, `tcp_write_bytes_total`\n* Proxy\n  * Fixed issue with proxy falling back to filesystem polling due to\n    improperly sized inotify buffer\n* Web UI\n  * Removed 'Help' hierarchy and surfaced links on navigation sidebar\n  * Added a Debug page to the web dashboard, allowing you to introspect\n    service discovery state\n  * Updated the resource detail page to start displaying a table with TCP\n    stats\n* Internal\n  * Enabled the following linters: `unparam`, `unconvert`, `goimports`,\n    `goconst`, `scopelint`, `unused`, `gosimple`\n  * Bumped base Docker images\n\n## stable-2.2.1\n\nThis stable release polishes some of the CLI help text and fixes two issues\nthat came up since the stable-2.2.0 release.\n\nTo install this release, run: `curl https://run.linkerd.io/install | sh`\n\n**Full release notes**:\n\n* CLI\n  * Fixed handling of kubeconfig server urls that include paths\n  * Updated the description of the `--proxy-auto-inject` flag to indicate that\n    it is no longer experimental\n  * Updated the `profile` help text to match the other commands\n  * Added the \"ep\" alias for the `endpoints` command\n* Controller\n  * Stopped logging an error when a route doesn't specify a timeout\n\n## edge-19-2.4\n\n* CLI\n  * Implemented `--proxy-cpu-limit` and `--proxy-memory-limit` for setting the\n    proxy resources limits (`--proxy-cpu` and `--proxy-memory` were deprecated\n    in favor of `proxy-cpu-request` and `proxy-memory-request`) (thanks\n    @TwinProduction!)\n  * Updated the `inject` and `uninject` subcommands to issue warnings when\n    resources lack a `Kind` property (thanks @Pothulapati!)\n  * Exposed the `install-cni` command and its flags, and tweaked their\n    descriptions\n  * Fixed handling of kubeconfig server urls that include paths\n  * Updated the description of the `--proxy-auto-inject` flag to indicate that\n    it is no longer experimental\n  * Updated the `profile` help text to match the other commands\n  * Added the \"ep\" alias for the `endpoints` command (also @Pothulapati!)\n  * Added a validator for the `--proxy-log-level` flag\n  * Fixed sporadic (and harmless) race condition error in `linkerd check`\n* Controller\n  * Instrumented clients in the control plane connecting to Kubernetes, thus\n    providing better visibility for diagnosing potential problems with those\n    connections\n  * Stopped logging an error when a route doesn't specify a timeout\n  * Renamed the \"linkerd-proxy-api\" service to \"linkerd-destination\"\n  * Bumped Prometheus to version 2.7.1 and Grafana to version 5.4.3\n* Web UI\n  * Modified the Grafana variable queries to use a TCP-based metric, so that\n    if there is only TCP traffic then the dropdowns don't end up empty\n  * Ensured that all the tooltips in Grafana displaying the series are shared\n    across all the graphs\n* Internals\n  * Added the flags `-update` and `-pretty-diff` to tests to allow overwriting\n    fixtures and to print the full text of the fixtures upon mismatches\n  * Introduced golangci-lint tooling, using `.golangci.yml` to centralize the\n    config\n  * Added a `-cover` parameter to track code coverage in go tests (more info\n    in TEST.md)\n  * Added integration tests for `--single-namespace`\n  * Renamed a function in a test that was shadowing a go built-in function\n    (thanks @huynq0911!)\n\n## stable-2.2.0\n\nThis stable release introduces automatic request retries and timeouts, and\ngraduates auto-inject to be a fully-supported (non-experimental) feature. It\nadds several new CLI commands, including `logs` and `endpoints`, that provide\ndiagnostic visibility into Linkerd's control plane. Finally, it introduces two\nexciting experimental features: a cryptographically-secured client identity\nheader, and a CNI plugin that avoids the need for `NET_ADMIN` kernel\ncapabilities at deploy time.\n\nFor more details, see the announcement blog post:\n<https://blog.linkerd.io/2019/02/12/announcing-linkerd-2-2/>\n\nTo install this release, run: `curl https://run.linkerd.io/install | sh`\n\n**Upgrade notes**: The default behavior for proxy auto injection and service\nprofile ownership has changed as part of this release. Please see the [upgrade\ninstructions](https://linkerd.io/2/tasks/upgrade/#upgrade-notice-stable-2-2-0)\nfor more details.\n\n**Special thanks to**: @alenkacz, @codeman9, @jonrichards, @radu-matei,\n@yeya24, and @zknill\n\n**Full release notes**:\n\n* CLI\n  * Improved service profile validation when running `linkerd check` in order\n    to validate service profiles in all namespaces\n  * Added the `linkerd endpoints` command to introspect Linkerd's service\n    discovery state\n  * Added the `--tap` flag to `linkerd profile` to generate service profiles\n    using the route results seen during the tap\n  * Added support for the `linkerd.io/inject: disabled` annotation on pod\n    specs to disable injection for specific pods when running `linkerd inject`\n  * Added support for `basePath` in OpenAPI 2.0 files when running `linkerd\n    profile --open-api`\n  * Increased `linkerd check` client timeout from 5 seconds to 30 seconds to\n    fix issues for clusters with slow API servers\n  * Updated `linkerd routes` to no longer return rows for `ExternalName`\n    services in the namespace\n  * Broadened the set of valid URLs when connecting to the Kubernetes API\n  * Added the `--proto` flag to `linkerd profile` to output a service profile\n    based on a Protobuf spec file\n  * Fixed CLI connection failures to clusters that use self-signed\n    certificates\n  * Simplified `linkerd install` so that setting up proxy auto-injection (flag\n    `--proxy-auto-inject`) no longer requires enabling TLS (flag `--tls`)\n  * Added links for each `linkerd check` failure, pointing to a relevant\n    section in our new FAQ page with resolution steps for each case\n  * Added optional `linkerd install-sp` command to generate service profiles\n    for the control plane, providing per-route metrics for control plane\n    components\n  * Removed `--proxy-bind-timeout` flag from `linkerd install` and `linkerd\n    inject`, as the proxy no longer accepts this environment variable\n  * Improved CLI appearance on Windows systems\n  * Improved `linkerd check` output, fixed bug with `--single-namespace`\n  * Fixed panic when `linkerd routes` is called in single-namespace mode\n  * Added `linkerd logs` command to surface logs from any container in the\n    Linkerd control plane\n  * Added `linkerd uninject` command to remove the Linkerd proxy from a\n    Kubernetes config\n  * Improved `linkerd inject` to re-inject a resource that already has a\n    Linkerd proxy\n  * Improved `linkerd routes` to list all routes, including those without\n    traffic\n  * Improved readability in `linkerd check` and `linkerd inject` outputs\n  * Adjusted the set of checks that are run before executing CLI commands,\n    which allows the CLI to be invoked even when the control plane is not\n    fully ready\n  * Fixed reporting of injected resources when the `linkerd inject` command is\n    run on `List` type resources with multiple items\n  * Updated the `linkerd dashboard` command to use port-forwarding instead of\n    proxying when connecting to the web UI and Grafana\n  * Added validation for the `ServiceProfile` CRD\n  * Updated the `linkerd check` command to disallow setting both the `--pre`\n    and `--proxy` flags simultaneously\n  * Added `--routes` flag to the `linkerd top` command, for grouping table\n    rows by route instead of by path\n  * Updated Prometheus configuration to automatically load `*_rules.yml` files\n  * Removed TLS column from the `linkerd routes` command output\n  * Updated `linkerd install` output to use non-default service accounts,\n    `emptyDir` volume mounts, and non-root users\n  * Removed cluster-wide resources from single-namespace installs\n  * Fixed resource requests for proxy-injector container in `--ha` installs\n* Controller\n  * Fixed issue with auto-injector not setting the proxy ID, which is required\n    to successfully locate client service profiles\n  * Added full stat and tap support for DaemonSets and StatefulSets in the\n    CLI, Grafana, and web UI\n  * Updated auto-injector to use the proxy log level configured at install\n    time\n  * Fixed issue with auto-injector including TLS settings in injected pods\n    even when TLS was not enabled\n  * Changed automatic proxy injection to be opt-in via the `linkerd.io/inject`\n    annotation on the pod or namespace\n  * Move service profile definitions to client and server namespaces, rather\n    than the control plane namespace\n  * Added `linkerd.io/created-by` annotation to the linkerd-cni DaemonSet\n  * Added a 10 second keepalive default to resolve dropped connections in\n    Azure environments\n  * Improved node selection for installing the linkerd-cni DaemonSet\n  * Corrected the expected controller identity when configuring pods with TLS\n  * Modified klog to be verbose when controller log-level is set to `debug`\n  * Added support for retries and timeouts, configured directly in the service\n    profile for each route\n  * Added an experimental CNI plugin to avoid requiring the NET_ADMIN\n    capability when injecting proxies\n  * Improved the API for `ListPods`\n  * Fixed `GetProfiles` API call not returning immediately when no profile\n    exists (resulting in proxies logging warnings)\n  * Blocked controller initialization until caches have synced with kube API\n  * Fixed proxy-api handling of named target ports in service configs\n  * Added parameter to stats API to skip retrieving prometheus stats\n* Web UI\n  * Updated navigation to link the Linkerd logo back to the Overview page\n  * Fixed console warnings on the Top page\n  * Grayed-out the tap icon for requests from sources that are not meshed\n  * Improved resource detail pages to show all resource types\n  * Fixed stats not appearing for routes that have service profiles installed\n  * Added \"meshed\" and \"no traffic\" badges on the resource detail pages\n  * Fixed `linkerd dashboard` to maintain proxy connection when browser open\n    fails\n  * Fixed JavaScript bundling to avoid serving old versions after upgrade\n  * Reduced the size of the webpack JavaScript bundle by nearly 50%\n  * Fixed an indexing error on the top results page\n  * Restored unmeshed resources in the network graph on the resource detail\n    page\n  * Adjusted label for unknown routes in route tables, added tooltip\n  * Updated Top Routes page to persist form settings in URL\n  * Added button to create new service profiles on Top Routes page\n  * Fixed CLI commands displayed when linkerd is running in non-default\n    namespace\n* Proxy\n  * Modified the way in which canonicalization warnings are logged to reduce\n    the overall volume of error logs and make it clearer when failures occur\n  * Added TCP keepalive configuration to fix environments where peers may\n    silently drop connections\n  * Updated the `Get` and `GetProfiles` APIs to accept a `proxy_id` parameter\n    in order to return more tailored results\n  * Removed TLS fallback-to-plaintext if handshake fails\n  * Added the ability to override a proxy's normal outbound routing by adding\n    an `l5d-override-dst` header\n  * Added `LINKERD2_PROXY_DNS_CANONICALIZE_TIMEOUT` environment variable to\n    customize the timeout for DNS queries to canonicalize a name\n  * Added support for route timeouts in service profiles\n  * Improved logging for gRPC errors and for malformed HTTP/2 request headers\n  * Improved log readability by moving some noisy log messages to more verbose\n    log levels\n  * Fixed a deadlock in HTTP/2 stream reference counts\n  * Updated the proxy-init container to exit with a non-zero exit code if\n    initialization fails, making initialization errors much more visible\n  * Fixed a memory leak due to leaked UDP sockets for failed DNS queries\n  * Improved configuration of the PeakEwma load balancer\n  * Improved handling of ports configured to skip protocol detection when the\n    proxy is running with TLS enabled\n\n## edge-19.2.3\n\n* Controller\n  * Fixed issue with auto-injector not setting the proxy ID, which is required\n    to successfully locate client service profiles\n* Web UI\n  * Updated navigation to link the Linkerd logo back to the Overview page\n  * Fixed console warnings on the Top page\n\n## edge-19.2.2\n\n* CLI\n  * Improved service profile validation when running `linkerd check` in order\n    to validate service profiles in all namespaces\n* Controller\n  * Added stat and tap support for StatefulSets in the CLI, Grafana, and web\n    UI\n  * Updated auto-injector to use the proxy log level configured at install\n    time\n  * Fixed issue with auto-injector including TLS settings in injected pods\n    even when TLS was not enabled\n* Proxy\n  * Modified the way in which canonicalization warnings are logged to reduce\n    the overall volume of error logs and make it clearer when failures occur\n\n## edge-19.2.1\n\n* Controller\n  * **Breaking change** Changed automatic proxy injection to be opt-in via the\n    `linkerd.io/inject` annotation on the pod or namespace. More info:\n    <https://linkerd.io/2/proxy-injection/>\n  * **Breaking change** `ServiceProfile`s are now defined in client and server\n    namespaces, rather than the control plane namespace. `ServiceProfile`s\n    defined in the client namespace take priority over ones defined in the\n    server namespace\n  * Added `linkerd.io/created-by` annotation to the linkerd-cni DaemonSet\n    (thanks @codeman9!)\n  * Added a 10 second keepalive default to resolve dropped connections in\n    Azure environments\n  * Improved node selection for installing the linkerd-cni DaemonSet (thanks\n    @codeman9!)\n  * Corrected the expected controller identity when configuring pods with TLS\n  * Modified klog to be verbose when controller log-level is set to `Debug`\n* CLI\n  * Added the `linkerd endpoints` command to introspect Linkerd's service\n    discovery state\n  * Added the `--tap` flag to `linkerd profile` to generate a `ServiceProfile`\n    by using the route results seen during the tap\n  * Added support for the `linkerd.io/inject: disabled` annotation on pod\n    specs to disable injection for specific pods when running `linkerd inject`\n  * Added support for `basePath` in OpenAPI 2.0 files when running `linkerd\n    profile --open-api`\n  * Increased `linkerd check` client timeout from 5 seconds to 30 seconds to\n    fix issues for clusters with a slower API server\n  * `linkerd routes` will no longer return rows for `ExternalName` services in\n    the namespace\n  * Broadened set of valid URLs when connecting to the Kubernetes API\n  * Improved `ServiceProfile` field validation in `linkerd check`\n* Proxy\n  * Added TCP keepalive configuration to fix environments where peers may\n    silently drop connections\n  * The `Get` and `GetProfiles` API now accept a `proxy_id` parameter in order\n    to return more tailored results\n  * Removed TLS fallback-to-plaintext if handshake fails\n\n## edge-19.1.4\n\n* Controller\n  * Added support for timeouts! Configurable in the service profiles for each\n    route\n  * Added an experimental CNI plugin to avoid requiring the NET_ADMIN\n    capability when injecting proxies (more details at\n    <https://linkerd.io/2/cni)> (thanks @codeman9!)\n  * Added more improvements to the API for `ListPods` (thanks @alenkacz!)\n* Web UI\n  * Grayed-out the tap icon for requests from sources that are not meshed\n* CLI\n  * Added the `--proto` flag to `linkerd profile` to output a service profile\n    based on a Protobuf spec file\n  * Fixed CLI connection failure to clusters that use self-signed certificates\n  * Simplified `linkerd install` so that setting up proxy auto-injection (flag\n    `--proxy-auto-inject`) no longer requires enabling TLS (flag `--tls`)\n  * Added links for each `linkerd check` failure, pointing to a relevant\n    section in our new FAQ page with resolution steps for each case\n\n## edge-19.1.3\n\n* Controller\n  * Improved API for `ListPods` (thanks @alenkacz!)\n  * Fixed `GetProfiles` API call not returning immediately when no profile\n    exists (resulting in proxies logging warnings)\n* Web UI\n  * Improved resource detail pages now show all resource types\n  * Fixed stats not appearing for routes that have service profiles installed\n* CLI\n  * Added optional `linkerd install-sp` command to generate service profiles\n    for the control plane, providing per-route metrics for control plane\n    components\n  * Removed `--proxy-bind-timeout` flag from `linkerd install` and `linkerd\n    inject` commands, as the proxy no longer accepts this environment variable\n  * Improved CLI appearance on Windows systems\n  * Improved `linkerd check` output, fixed check bug when using\n    `--single-namespace` (thanks to @djeeg for the bug report!)\n  * Improved `linkerd stat` now supports DaemonSets (thanks @zknill!)\n  * Fixed panic when `linkerd routes` is called in single-namespace mode\n* Proxy\n  * Added the ability to override a proxy's normal outbound routing by adding\n    an `l5d-override-dst` header\n  * Added `LINKERD2_PROXY_DNS_CANONICALIZE_TIMEOUT` environment variable to\n    customize the timeout for DNS queries to canonicalize a name\n  * Added support for route timeouts in service profiles\n  * Improved logging for gRPC errors and for malformed HTTP/2 request headers\n  * Improved log readability by moving some noisy log messages to more verbose\n    log levels\n\n## edge-19.1.2\n\n* Controller\n  * Retry support! Introduce an `isRetryable` property to service profiles to\n    enable configuring retries on a per-route basis\n* Web UI\n  * Add \"meshed\" and \"no traffic\" badges on the resource detail pages\n  * Fix `linkerd dashboard` to maintain proxy connection when browser open\n    fails\n  * Fix JavaScript bundling to avoid serving old versions after upgrade\n* CLI\n  * Add `linkerd logs` command to surface logs from any container in the\n    Linkerd control plane (shout out to\n    [Stern](https://github.com/wercker/stern)!)\n  * Add `linkerd uninject` command to remove the Linkerd proxy from a\n    Kubernetes config\n  * Improve `linkerd inject` to re-inject a resource that already has a\n    Linkerd proxy\n  * Improve `linkerd routes` to list all routes, including those without\n    traffic\n  * Improve readability in `linkerd check` and `linkerd inject` outputs\n* Proxy\n  * Fix a deadlock in HTTP/2 stream reference counts\n\n## edge-19.1.1\n\n* CLI\n  * Adjust the set of checks that are run before executing CLI commands, which\n    allows the CLI to be invoked even when the control plane is not fully\n    ready\n  * Fix reporting of injected resources when the `linkerd inject` command is\n    run on `List` type resources with multiple items\n  * Update the `linkerd dashboard` command to use port-forwarding instead of\n    proxying when connecting to the web UI and Grafana\n  * Add validation for the `ServiceProfile` CRD (thanks, @alenkacz!)\n  * Update the `linkerd check` command to disallow setting both the `--pre`\n    and `--proxy` flags simultaneously (thanks again, @alenkacz!)\n* Web UI\n  * Reduce the size of the webpack JavaScript bundle by nearly 50%!\n  * Fix an indexing error on the top results page\n* Proxy\n  * **Fixed** The proxy-init container now exits with a non-zero exit code if\n    initialization fails, making initialization errors much more visible\n  * **Fixed** The proxy previously leaked UDP sockets for failed DNS queries,\n    causing a memory leak; this has been fixed\n\n## edge-18.12.4\n\nUpgrade notes: The control plane components have been renamed as of the\nedge-18.12.1 release to reduce possible naming collisions. To upgrade an older\ninstallation, see the [Upgrade Guide](https://linkerd.io/2/upgrade/).\n\n* CLI\n  * Add `--routes` flag to the `linkerd top` command, for grouping table rows\n    by route instead of by path\n  * Update Prometheus configuration to automatically load `*_rules.yml` files\n  * Remove TLS column from the `linkerd routes` command output\n* Web UI\n  * Restore unmeshed resources in the network graph on the resource detail\n    page\n  * Reduce the overall size of the asset bundle for the web frontend\n* Proxy\n  * Improve configuration of the PeakEwma load balancer\n\nSpecial thanks to @radu-matei for cleaning up a whole slew of Go lint\nwarnings, and to @jonrichards for improving the Rust build setup!\n\n## edge-18.12.3\n\nUpgrade notes: The control plane components have been renamed as of the\nedge-18.12.1 release to reduce possible naming collisions. To upgrade an older\ninstallation, see the [Upgrade Guide](https://linkerd.io/2/upgrade/).\n\n* CLI\n  * Multiple improvements to the `linkerd install` config (thanks @codeman9!)\n    * Use non-default service accounts for grafana and web deployments\n    * Use `emptyDir` volume mount for prometheus and grafana pods\n    * Set security context on control plane components to not run as root\n  * Remove cluster-wide resources from single-namespace installs\n    * Disable service profiles in single-namespace mode\n    * Require that namespace already exist for single-namespace installs\n  * Fix resource requests for proxy-injector container in `--ha` installs\n* Controller\n  * Block controller initialization until caches have synced with kube API\n  * Fix proxy-api handling of named target ports in service configs\n  * Add parameter to stats API to skip retrieving prometheus stats (thanks,\n    @alpeb!)\n* Web UI\n  * Adjust label for unknown routes in route tables, add tooltip\n  * Update Top Routes page to persist form settings in URL\n  * Add button to create new service profiles on Top Routes page\n  * Fix CLI commands displayed when linkerd is running in non-default\n    namespace\n* Proxy\n  * Proxies with TLS enabled now honor ports configured to skip protocol\n    detection\n\n## stable-2.1.0\n\nThis stable release introduces several major improvements, including per-route\nmetrics, service profiles, and a vastly improved dashboard UI. It also adds\nseveral significant experimental features, including proxy auto-injection,\nsingle namespace installs, and a high-availability mode for the control plane.\n\nFor more details, see the announcement blog post:\n<https://blog.linkerd.io/2018/12/06/announcing-linkerd-2-1/>\n\nTo install this release, run: `curl https://run.linkerd.io/install | sh`\n\n**Upgrade notes**: The control plane components have been renamed in this\nrelease to reduce possible naming collisions. Please make sure to read the\n[upgrade\ninstructions](https://linkerd.io/2/upgrade/#upgrade-notice-stable-2-1-0) if\nyou are upgrading from the `stable-2.0.0` release.\n\n**Special thanks to**: @alenkacz, @alpeb, @benjdlambert, @fahrradflucht,\n@ffd2subroutine, @hypnoglow, @ihcsim, @lucab, and @rochacon\n\n**Full release notes**:\n\n* CLI\n  * `linkerd routes` command displays per-route stats for _any resource_\n  * Service profiles are now supported for external authorities\n  * `linkerd routes --open-api` flag generates a service profile based on an\n    OpenAPI specification (swagger) file\n  * `linkerd routes` command displays per-route stats for services with\n    service profiles\n  * Add `--ha` flag to `linkerd install` command, for HA deployment of the\n    control plane\n  * Update stat command to accept multiple stat targets\n  * Fix authority stat filtering when the `--from` flag is present\n  * Various improvements to check command, including:\n    * Emit warnings instead of errors when not running the latest version\n    * Add retries if control plane health check fails initially\n    * Run all pre-install RBAC checks, instead of stopping at first failure\n  * Fixed an issue with the `--registry` install flag not accepting hosts with\n    ports\n  * Added an `--output` stat flag, for printing stats as JSON\n  * Updated the `top` table to set column widths dynamically\n  * Added a `--single-namespace` install flag for installing the control plane\n    with Role permissions instead of ClusterRole permissions\n  * Added a `--proxy-auto-inject` flag to the `install` command, allowing for\n    auto-injection of sidecar containers\n  * Added `--proxy-cpu` and `--proxy-memory` flags to the `install` and\n    `inject` commands, giving the ability to configure CPU + Memory requests\n  * Added a `--context` flag to specify the context to use to talk to the\n    Kubernetes apiserver\n  * The namespace in which Linkerd is installed is configurable via the\n    `LINKERD_NAMESPACE` env var, in addition to the `--linkerd-namespace` flag\n  * The wait time for the `check` and `dashboard` commands is configurable via\n    the `--wait` flag\n  * The `top` command now aggregates by HTTP method as well\n* Controller\n  * Rename snake case fields to camel case in service profile spec\n  * Controller components are now prefixed with `linkerd-` to prevent name\n    collisions with existing resources\n  * `linkerd install --disable-h2-upgrade` flag has been added to control\n    automatic HTTP/2 upgrading\n  * Fix auto injection issue on Kubernetes `v1.9.11` that would merge, rather\n    than append, the proxy container into the application\n  * Fixed a few issues with auto injection via the proxy-injector webhook:\n    * Injected pods now execute the linkerd-init container last, to avoid\n      rerouting requests during pod init\n    * Original pod labels and annotations are preserved when auto-injecting\n  * CLI health check now uses unified endpoint for data plane checks\n  * Include Licence files in all Docker images\n* Proxy\n  * The proxy's `tap` subsystem has been reimplemented to be more efficient\n    and and reliable\n    * The proxy now supports route metadata in tap queries and events\n  * A potential HTTP/2 window starvation bug has been fixed\n  * Prometheus counters now wrap properly for values greater than 2^53\n  * Add controller client metrics, scoped under `control_`\n  * Canonicalize outbound names via DNS for inbound profiles\n  * Fix routing issue when a pod makes a request to itself\n  * Only include `classification` label on `response_total` metric\n  * Remove panic when failing to get remote address\n  * Better logging in TCP connect error messages\n* Web UI\n  * Top routes page, served at `/routes`\n  * Route metrics are now available in the resource detail pages for services\n    with configured profiles\n  * Service profiles can be created and downloaded from the Web UI\n  * Top Routes page, served at `/routes`\n  * Fixed a smattering of small UI issues\n  * Added a new Grafana dashboard for authorities\n  * Revamped look and feel of the Linkerd dashboard by switching component\n    libraries from antd to material-ui\n  * Added a Help section in the sidebar containing useful links\n  * Tap and Top pages\n    * Added clear button to query form\n  * Resource Detail pages\n    * Limit number of resources shown in the graph\n  * Resource Detail page\n    * Better rendering of the dependency graph at the top of the page\n    * Unmeshed sources are now populated in the Inbound traffic table\n    * Sources and destinations are aligned in the popover\n  * Tap and Top pages\n    * Additional validation and polish for the form controls\n    * The top table clears older results when a new top call is started\n    * The top table now aggregates by HTTP method as well\n\n## edge-18.12.2\n\nUpgrade notes: The control plane components have been renamed as of the\nedge-18.12.1 release to reduce possible naming collisions. To upgrade an older\ninstallation, see the [Upgrade Guide](https://linkerd.io/2/upgrade/).\n\n* Controller\n  * Rename snake case fields to camel case in service profile spec\n\n## edge-18.12.1\n\nUpgrade notes: The control plane components have been renamed in this release\nto reduce possible naming collisions. To upgrade an existing installation:\n\n* Install new CLI: `curl https://run.linkerd.io/install-edge | sh`\n* Install new control plane: `linkerd install | kubectl apply -f -`\n* Remove old deploys/cms: `kubectl -n linkerd get deploy,cm -oname | grep -v\n  linkerd | xargs kubectl -n linkerd delete`\n* Re-inject your applications: `linkerd inject my-app.yml | kubectl apply -f\n  -`\n* Remove old services: `kubectl -n linkerd get svc -oname | grep -v linkerd |\n  xargs kubectl -n linkerd delete`\n\nFor more information, see the [Upgrade Guide](https://linkerd.io/2/upgrade/).\n\n* CLI\n  * **Improved** `linkerd routes` command displays per-route stats for _any\n    resource_!\n  * **New** Service profiles are now supported for external authorities!\n  * **New** `linkerd routes --open-api` flag generates a service profile based\n    on an OpenAPI specification (swagger) file\n* Web UI\n  * **New** Top routes page, served at `/routes`\n  * **New** Route metrics are now available in the resource detail pages for\n    services with configured profiles\n  * **New** Service profiles can be created and downloaded from the Web UI\n* Controller\n  * **Improved** Controller components are now prefixed with `linkerd-` to\n    prevent name collisions with existing resources\n  * **New** `linkerd install --disable-h2-upgrade` flag has been added to\n    control automatic HTTP/2 upgrading\n* Proxy\n  * **Improved** The proxy's `tap` subsystem has been reimplemented to be more\n    efficient and and reliable\n    * The proxy now supports route metadata in tap queries and events\n  * **Fixed** A potential HTTP/2 window starvation bug has been fixed\n  * **Fixed** Prometheus counters now wrap properly for values greater than\n    2^53 (thanks, @lucab!)\n\n## edge-18.11.3\n\n* CLI\n  * **New** `linkerd routes` command displays per-route stats for services\n    with service profiles\n  * **Experimental** Add `--ha` flag to `linkerd install` command, for HA\n    deployment of the control plane (thanks @benjdlambert!)\n* Web UI\n  * **Experimental** Top Routes page, served at `/routes`\n* Controller\n  * **Fixed** Fix auto injection issue on Kubernetes `v1.9.11` that would\n    merge, rather than append, the proxy container into the application\n* Proxy\n  * **Improved** Add controller client metrics, scoped under `control_`\n  * **Improved** Canonicalize outbound names via DNS for inbound profiles\n\n## edge-18.11.2\n\n* CLI\n  * **Improved** Update stat command to accept multiple stat targets\n  * **Fixed** Fix authority stat filtering when the `--from` flag is present\n  * Various improvements to check command, including:\n    * Emit warnings instead of errors when not running the latest version\n    * Add retries if control plane health check fails initially\n    * Run all pre-install RBAC checks, instead of stopping at first failure\n* Proxy / Proxy-Init\n  * **Fixed** Fix routing issue when a pod makes a request to itself (#1585)\n  * Only include `classification` label on `response_total` metric\n\n## edge-18.11.1\n\n* Proxy\n  * **Fixed** Remove panic when failing to get remote address\n  * **Improved** Better logging in TCP connect error messages\n* Web UI\n  * **Improved** Fixed a smattering of small UI issues\n\n## edge-18.10.4\n\nThis release includes a major redesign of the web frontend to make use of the\nMaterial design system. Additional features that leverage the new design are\ncoming soon! This release also includes the following changes:\n\n* CLI\n  * **Fixed** Fixed an issue with the `--registry` install flag not accepting\n    hosts with ports (thanks, @alenkacz!)\n* Web UI\n  * **New** Added a new Grafana dashboard for authorities (thanks, @alpeb!)\n  * **New** Revamped look and feel of the Linkerd dashboard by switching\n    component libraries from antd to material-ui\n\n## edge-18.10.3\n\n* CLI\n  * **New** Added an `--output` stat flag, for printing stats as JSON\n  * **Improved** Updated the `top` table to set column widths dynamically\n  * **Experimental** Added a `--single-namespace` install flag for installing\n    the control plane with Role permissions instead of ClusterRole permissions\n* Controller\n  * Fixed a few issues with auto injection via the proxy-injector webhook:\n    * Injected pods now execute the linkerd-init container last, to avoid\n      rerouting requests during pod init\n    * Original pod labels and annotations are preserved when auto-injecting\n* Web UI\n  * **New** Added a Help section in the sidebar containing useful links\n\n## edge-18.10.2\n\nThis release brings major improvements to the CLI as described below,\nincluding support for auto-injecting deployments via a Kubernetes Admission\nController. Proxy auto-injection is **experimental**, and the implementation\nmay change going forward.\n\n* CLI\n  * **New** Added a `--proxy-auto-inject` flag to the `install` command,\n    allowing for auto-injection of sidecar containers (Thanks @ihcsim!)\n  * **Improved** Added `--proxy-cpu` and `--proxy-memory` flags to the\n    `install` and `inject` commands, giving the ability to configure CPU +\n    Memory requests (Thanks @benjdlambert!)\n  * **Improved** Added a `--context` flag to specify the context to use to\n    talk to the Kubernetes apiserver (Thanks @ffd2subroutine!)\n\n## edge-18.10.1\n\n* Web UI\n  * **Improved** Tap and Top pages\n    * Added clear button to query form\n  * **Improved** Resource Detail pages\n    * Limit number of resources shown in the graph\n* Controller\n  * CLI health check now uses unified endpoint for data plane checks\n  * Include Licence files in all Docker images\n\nSpecial thanks to @alenkacz for contributing to this release!\n\n## edge-18.9.3\n\n* Web UI\n  * **Improved** Resource Detail page\n    * Better rendering of the dependency graph at the top of the page\n    * Unmeshed sources are now populated in the Inbound traffic table\n    * Sources and destinations are aligned in the popover\n  * **Improved** Tap and Top pages\n    * Additional validation and polish for the form controls\n    * The top table clears older results when a new top call is started\n    * The top table now aggregates by HTTP method as well\n* CLI\n  * **New** The namespace in which Linkerd is installed is configurable via\n    the `LINKERD_NAMESPACE` env var, in addition to the `--linkerd-namespace`\n    flag\n  * **New** The wait time for the `check` and `dashboard` commands is\n    configurable via the `--wait` flag\n  * **Improved** The `top` command now aggregates by HTTP method as well\n\nSpecial thanks to @rochacon, @fahrradflucht and @alenkacz for contributing to\nthis release!\n\n## stable-2.0.0\n\n## edge-18.9.2\n\n* **New** _edge_ and _stable_ release channels\n* Web UI\n  * **Improved** Tap & Top UIs with better layout and linking\n* CLI\n  * **Improved** `check --pre` command verifies the caller has sufficient\n    permissions to install Linkerd\n  * **Improved** `check` command verifies that Prometheus has data for proxied\n    pods\n* Proxy\n  * **Fix** `hyper` crate dependency corrects HTTP/1.0 Keep-Alive behavior\n\n## v18.9.1\n\n* Web UI\n  * **New** Default landing page provides namespace overview with expandable\n    sections\n  * **New** Breadcrumb navigation at the top of the dashboard\n  * **Improved** Tap and Top pages\n    * Table rendering performance improvements via throttling\n    * Tables now link to resource detail pages\n    * Tap an entire namespace when no resource is specified\n    * Tap websocket errors provide more descriptive text\n    * Consolidated source and destination columns\n  * Misc ui updates\n    * Metrics tables now include a small success rate chart\n    * Improved latency formatting for seconds latencies\n    * Renamed upstream/downstream to inbound/outbound\n    * Sidebar scrolls independently from main panel, scrollbars hidden when\n      not needed\n    * Removed social links from sidebar\n* CLI\n  * **New** `linkerd check` now validates Linkerd proxy versions and readiness\n  * **New** `linkerd inject` now provides an injection status report, and\n    warns when resources are not injectable\n  * **New** `linkerd top` now has a `--hide-sources` flag, to hide the source\n    column and collapse top results accordingly\n* Control Plane\n  * Updated Prometheus to v2.4.0, Grafana to 5.2.4\n\n## v18.8.4\n\n* Web UI\n  * **Improved** Tap and Top now have a better sampling rate\n  * **Fixed** Missing sidebar headings now appear\n\n## v18.8.3\n\n* Web UI\n  * **Improved** Kubernetes resource navigation in the sidebar\n  * **Improved** resource detail pages:\n    * **New** live request view\n    * **New** success rate graphs\n* CLI\n  * `tap` and `top` have been improved to sample up to 100 RPS\n* Control plane\n  * Injected proxy containers now have readiness and liveness probes enabled\n\nSpecial thanks to @sourishkrout for contributing a web readability fix!\n\n## v18.8.2\n\n* CLI\n  * **New** `linkerd top` command has been added, displays live traffic stats\n  * `linkerd check` has been updated with additional checks, now supports a\n    `--pre` flag for running pre-install checks\n  * `linkerd check` and `linkerd dashboard` now support a `--wait` flag that\n    tells the CLI to wait for the control plane to become ready\n  * `linkerd tap` now supports a `--output` flag to display output in a wide\n    format that includes src and dst resources and namespaces\n  * `linkerd stat` includes additional validation for command line inputs\n  * All commands that talk to the Linkerd API now show better error messages\n    when the control plane is unavailable\n* Web UI\n  * **New** individual resources can now be viewed on a resource detail page,\n    which includes stats for the resource itself and its nearest neighbors\n  * **Experimental** web-based Top interface accessible at `/top`, aggregates\n    tap data in real time to display live traffic stats\n  * The `/tap` page has multiple improvements, including displaying additional\n    src/dst metadata, improved form controls, and better latency formatting\n  * All resource tables have been updated to display meshed pod counts, as\n    well as an icon linking to the resource's Grafana dashboard if it is\n    meshed\n  * The UI now shows more useful information when server errors are\n    encountered\n* Proxy\n  * The `h2` crate fixed a HTTP/2 window management bug\n  * The `rustls` crate fixed a bug that could improperly fail TLS streams\n* Control Plane\n  * The tap server now hydrates metadata for both sources and destinations\n\n## v18.8.1\n\n* Web UI\n  * **New** Tap UI makes it possible to query & inspect requests from the\n    browser!\n* Proxy\n  * **New** Automatic, transparent HTTP/2 multiplexing of HTTP/1 traffic\n    reduces the cost of short-lived HTTP/1 connections\n* Control Plane\n  * **Improved** `linkerd inject` now supports injecting all resources in a\n    folder\n  * **Fixed** `linkerd tap` no longer crashes when there are many pods\n  * **New** Prometheus now only scrapes proxies belonging to its own linkerd\n    install\n  * **Fixed** Prometheus metrics collection for clusters with >100 pods\n\nSpecial thanks to @ihcsim for contributing the `inject` improvement!\n\n## v18.7.3\n\nLinkerd2 v18.7.3 completes the rebranding from Conduit to Linkerd2, and\nimproves overall performance and stability.\n\n* Proxy\n  * **Improved** CPU utilization by ~20%\n* Web UI\n  * **Experimental** `/tap` page now supports additional filters\n* Control Plane\n  * Updated all k8s.io dependencies to 1.11.1\n\n## v18.7.2\n\nLinkerd2 v18.7.2 introduces new stability features as we work toward\nproduction readiness.\n\n* Control Plane\n  * **Breaking change** Injected pod labels have been renamed to be more\n    consistent with Kubernetes; previously injected pods must be re-injected\n    with new version of linkerd CLI in order to work with updated control\n    plane\n  * The \"ca-bundle-distributor\" deployment has been renamed to \"ca\"\n* Proxy\n  * **Fixed** HTTP/1.1 connections were not properly reused, leading to\n    elevated latencies and CPU load\n  * **Fixed** The `process_cpu_seconds_total` was calculated incorrectly\n* Web UI\n  * **New** per-namespace application topology graph\n  * **Experimental** web-based Tap interface accessible at  `/tap`\n  * Updated favicon to the Linkerd logo\n\n## v18.7.1\n\nLinkerd2 v18.7.1 is the first release of the Linkerd2 project, which was\nformerly hosted at github.com/runconduit/conduit.\n\n* Packaging\n  * Introduce new date-based versioning scheme, `vYY.M.n`\n  * Move all Docker images to `gcr.io/linkerd-io` repo\n* User Interface\n  * Update branding to reference Linkerd throughout\n  * The CLI is now called `linkerd`\n* Production Readiness\n  * Fix issue with destination service sending back incomplete pod metadata\n  * Fix high CPU usage during proxy shutdown\n  * ClusterRoles are now unique per Linkerd install, allowing multiple\n    instances to be installed in the same Kubernetes cluster\n\n## v0.5.0\n\nConduit v0.5.0 introduces a new, experimental feature that automatically\nenables Transport Layer Security between Conduit proxies to secure application\ntraffic. It also adds support for HTTP protocol upgrades, so applications that\nuse WebSockets can now benefit from Conduit.\n\n* Security\n  * **New** `conduit install --tls=optional` enables automatic, opportunistic\n    TLS. See [the docs][auto-tls] for more info.\n* Production Readiness\n  * The proxy now transparently supports HTTP protocol upgrades to support,\n    for instance, WebSockets.\n  * The proxy now seamlessly forwards HTTP `CONNECT` streams.\n  * Controller services are now configured with liveness and readiness probes.\n* User Interface\n  * `conduit stat` now supports a virtual `authority` resource that aggregates\n    traffic by the `:authority` (or `Host`) header of an HTTP request.\n  * `dashboard`, `stat`, and `tap` have been updated to describe TLS state for\n    traffic.\n  * `conduit tap` now has more detailed information, including the direction\n    of each message (outbound or inbound).\n  * `conduit stat` now more-accurately records histograms for low-latency\n    services.\n  * `conduit dashboard` now includes error messages when a Conduit-enabled pod\n    fails.\n* Internals\n  * Prometheus has been upgraded to v2.3.1.\n  * A potential live-lock has been fixed in HTTP/2 servers.\n  * `conduit tap` could crash due to a null-pointer access. This has been\n    fixed.\n\n[auto-tls]: docs/automatic-tls.md\n\n## v0.4.4\n\nConduit v0.4.4 continues to improve production suitability and sets up\ninternals for the upcoming v0.5.0 release.\n\n* Production Readiness\n  * The destination service has been mostly-rewritten to improve safety and\n    correctness, especially during controller initialization.\n  * Readiness and Liveness checks have been added for some controller\n    components.\n  * RBAC settings have been expanded so that Prometheus can access node-level\n    metrics.\n* User Interface\n  * Ad blockers like uBlock prevented the Conduit dashboard from fetching API\n    data. This has been fixed.\n  * The UI now highlights pods that have failed to start a proxy.\n* Internals\n  * Various dependency upgrades, including Rust 1.26.2.\n  * TLS testing continues to bear fruit, precipitating stability improvements\n    to dependencies like Rustls.\n\nSpecial thanks to @alenkacz for improving docker build times!\n\n## v0.4.3\n\nConduit v0.4.3 continues progress towards production readiness. It features a\nnew latency-aware load balancer.\n\n* Production Readiness\n  * The proxy now uses a latency-aware load balancer for outbound requests.\n    This implementation is based on Finagle's Peak-EWMA balancer, which has\n    been proven to significantly reduce tail latencies. This is the same load\n    balancing strategy used by Linkerd.\n* User Interface\n  * `conduit stat` is now slightly more predictable in the way it outputs\n    things, especially for commands like `watch conduit stat all\n    --all-namespaces`.\n  * Failed and completed pods are no longer shown in stat summary results.\n* Internals\n  * The proxy now supports some TLS configuration, though these features\n    remain disabled and undocumented pending further testing and\n    instrumentation.\n\nSpecial thanks to @ihcsim for contributing his first PR to the project and to\n@roanta for discussing the Peak-EWMA load balancing algorithm with us.\n\n## v0.4.2\n\nConduit v0.4.2 is a major step towards production readiness. It features a\nwide array of fixes and improvements for long-running proxies, and several new\ntelemetry features. It also lays the groundwork for upcoming releases that\nintroduce mutual TLS everywhere.\n\n* Production Readiness\n  * The proxy now drops metrics that do not update for 10 minutes, preventing\n    unbounded memory growth for long-running processes.\n  * The proxy now constrains the number of services that a node can route to\n    simultaneously (default: 100). This protects long-running proxies from\n    consuming unbounded resources by tearing down the longest-idle clients\n    when the capacity is reached.\n  * The proxy now properly honors HTTP/2 request cancellation.\n  * The proxy could incorrectly handle requests in the face of some connection\n    errors. This has been fixed.\n  * The proxy now honors DNS TTLs.\n  * `conduit inject` now works with `statefulset` resources.\n* Telemetry\n  * **New** `conduit stat` now supports the `all` Kubernetes resource, which\n    shows traffic stats for all Kubernetes resources in a namespace.\n  * **New** the Conduit web UI has been reorganized to provide namespace\n    overviews.\n  * **Fix** a bug in Tap that prevented the proxy from simultaneously\n    satisfying more than one Tap request.\n  * **Fix** a bug that could prevent stats from being reported for some TCP\n    streams in failure conditions.\n  * The proxy now measures response latency as time-to-first-byte.\n* Internals\n  * The proxy now supports user-friendly time values (e.g. `10s`) from\n    environment configuration.\n  * The control plane now uses client for Kubernetes 1.10.2.\n  * Much richer proxy debug logging, including socket and stream metadata.\n  * The proxy internals have been changed substantially in preparation for TLS\n    support.\n\nSpecial thanks to @carllhw, @kichristensen, & @sfroment for contributing to\nthis release!\n\n### Upgrading from v0.4.1\n\nWhen upgrading from v0.4.1, we suggest that the control plane be upgraded to\nv0.4.2 before injecting application pods to use v0.4.2 proxies.\n\n## v0.4.1\n\nConduit 0.4.1 builds on the telemetry work from 0.4.0, providing rich,\nKubernetes-aware observability and debugging.\n\n* Web UI\n  * **New** Automatically-configured Grafana dashboards for Services, Pods,\n    ReplicationControllers, and Conduit mesh health.\n  * **New** `conduit dashboard` Pod and ReplicationController views.\n* Command-line interface\n  * **Breaking change** `conduit tap` now operates on most Kubernetes\n    resources.\n  * `conduit stat` and `conduit tap` now both support kubectl-style resource\n    strings (`deploy`, `deploy/web`, and `deploy web`), specifically:\n    * `namespaces`\n    * `deployments`\n    * `replicationcontrollers`\n    * `services`\n    * `pods`\n* Telemetry\n  * **New** Tap support for filtering by and exporting destination metadata.\n    Now you can sample requests from A to B, where A and B are any resource or\n    group of resources.\n  * **New** TCP-level stats, including connection counts and durations, and\n    throughput, wired through to Grafana dashboards.\n* Service Discovery\n  * The proxy now uses the [trust-dns] DNS resolver. This fixes a number of\n    DNS correctness issues.\n  * The destination service could sometimes return incorrect, stale, labels\n    for an endpoint. This has been fixed!\n\n[trust-dns]: https://github.com/bluejekyll/trust-dns\n\n## v0.4.0\n\nConduit 0.4.0 overhauls Conduit's telemetry system and improves service\ndiscovery reliability.\n\n* Web UI\n  * **New** automatically-configured Grafana dashboards for all Deployments.\n* Command-line interface\n  * `conduit stat` has been completely rewritten to accept arguments like\n    `kubectl get`. The `--to` and `--from` filters can be used to filter\n    traffic by destination and source, respectively.  `conduit stat` currently\n    can operate on `Namespace` and `Deployment` Kubernetes resources. More\n    resource types will be added in the next release!\n* Proxy (data plane)\n  * **New** Prometheus-formatted metrics are now exposed on `:4191/metrics`,\n    including rich destination labeling for outbound HTTP requests. The proxy\n    no longer pushes metrics to the control plane.\n  * The proxy now handles `SIGINT` or `SIGTERM`, gracefully draining requests\n    until all are complete or `SIGQUIT` is received.\n  * SMTP and MySQL (ports 25 and 3306) are now treated as opaque TCP by\n    default. You should no longer have to specify `--skip-outbound-ports` to\n    communicate with such services.\n  * When the proxy reconnected to the controller, it could continue to send\n    requests to old endpoints. Now, when the proxy reconnects to the\n    controller, it properly removes invalid endpoints.\n  * A bug impacting some HTTP/2 reset scenarios has been fixed.\n* Service Discovery\n  * Previously, the proxy failed to resolve some domain names that could be\n    misinterpreted as a Kubernetes Service name. This has been fixed by\n    extending the _Destination_ API with a negative acknowledgement response.\n* Control Plane\n  * The _Telemetry_ service and associated APIs have been removed.\n* Documentation\n  * Updated [Roadmap](doc/roadmap.md)\n\nSpecial thanks to @ahume, @alenkacz, & @xiaods for contributing to this\nrelease!\n\n### Upgrading from v0.3.1\n\nWhen upgrading from v0.3.1, it's important to upgrade proxies before upgrading\nthe controller. As you upgrade proxies, the controller will lose visibility\ninto some data plane stats. Once all proxies are updated, `conduit install\n|kubectl apply -f -` can be run to upgrade the controller without causing any\ndata plane disruptions. Once the controller has been restarted, traffic stats\nshould become available.\n\n## v0.3.1\n\nConduit 0.3.1 improves Conduit's resilience and transparency.\n\n* Proxy (data plane)\n  * The proxy now makes fewer changes to requests and responses being proxied.\n    In particular, requests and responses without bodies or with empty bodies\n    are better supported.\n  * HTTP/1 requests with different `Host` header fields are no longer sent on\n    the same HTTP/1 connection even when those hostnames resolve to the same\n    IP address.\n  * A connection leak during proxying of non-HTTP TCP connections was fixed.\n  * The proxy now handles unavailable services more gracefully by timing out\n    while waiting for an endpoint to become available for the service.\n* Command-line interface\n  * `$KUBECONFIG` with multiple paths is now supported. (PR #482 by\n    @hypnoglow).\n  * `conduit check` now checks for the availability of a Conduit update. (PR\n    #460 by @ahume).\n* Service Discovery\n  * Kubernetes services with type `ExternalName` are now supported.\n* Control Plane\n  * The proxy is injected into the control plane during installation to\n    improve the control plane's resilience and to \"dogfood\" the proxy.\n  * The control plane is now more resilient regarding networking failures.\n* Documentation\n  * The markdown source for the documentation published at\n    <https://conduit.io/docs/> is now open source at\n    <https://github.com/runconduit/conduit/tree/master/doc.>\n\n## v0.3.0\n\nConduit 0.3 focused heavily on production hardening of Conduit's telemetry\nsystem. Conduit 0.3 should \"just work\" for most apps on Kubernetes 1.8 or 1.9\nwithout configuration, and should support Kubernetes clusters with hundreds of\nservices, thousands of instances, and hundreds of RPS per instance.\n\nWith this release, Conduit also moves from _experimental_ to _alpha_---meaning\nthat we're ready for some serious testing and vetting from you. As part of\nthis, we've published the [Conduit roadmap](https://conduit.io/roadmap/), and\nwe've also launched some new mailing lists:\n[conduit-users](https://groups.google.com/forum/#!forum/conduit-users),\n[conduit-dev](https://groups.google.com/forum/#!forum/conduit-dev), and\n[conduit-announce](https://groups.google.com/forum/#!forum/conduit-announce).\n\n* CLI\n  * CLI commands no longer depend on `kubectl`\n  * `conduit dashboard` now runs on an ephemeral port, removing port 8001\n    conflicts\n  * `conduit inject` now skips pods with `hostNetwork=true`\n  * CLI commands now have friendlier error messages, and support a `--verbose`\n    flag for debugging\n* Web UI\n  * All displayed metrics are now instantaneous snapshots rather than\n    aggregated over 10 minutes\n  * The sidebar can now be collapsed\n  * UX refinements and bug fixes\n* Conduit proxy (data plane)\n  * Proxy does load-aware (P2C + least-loaded) L7 balancing for HTTP\n  * Proxy can now route to external DNS names\n  * Proxy now properly sheds load in some pathological cases when it cannot\n    route\n* Telemetry system\n  * Many optimizations and refinements to support scale goals\n  * Per-path and per-pod metrics have been removed temporarily to improve\n    scalability and stability; they will be reintroduced in Conduit 0.4 (#405)\n* Build improvements\n  * The Conduit docker images are now much smaller.\n  * Dockerfiles have been changed to leverage caching, improving build times\n    substantially\n\nKnown Issues:\n\n* Some DNS lookups to external domains fail (#62, #155, #392)\n* Applications that use WebSockets, HTTP tunneling/proxying, or protocols such\n  as MySQL and SMTP, require additional configuration (#339)\n\n## v0.2.0\n\nThis is a big milestone! With this release, Conduit adds support for HTTP/1.x\nand raw TCP traffic, meaning it should \"just work\" for most applications that\nare running on Kubernetes without additional configuration.\n\n* Data plane\n  * Conduit now transparently proxies all TCP traffic, including HTTP/1.x and\n    HTTP/2. (See caveats below.)\n* Command-line interface\n  * Improved error handling for the `tap` command\n  * `tap` also now works with HTTP/1.x traffic\n* Dashboard\n  * Minor UI appearance tweaks\n  * Deployments now searchable from the dashboard sidebar\n\nCaveats:\n\n* Conduit will automatically work for most protocols. However, applications\n  that use WebSockets, HTTP tunneling/proxying, or protocols such as MySQL and\n  SMTP, will require some additional configuration. See the\n  [documentation](https://conduit.io/adding-your-service/#protocol-support)\n  for details.\n* Conduit doesn't yet support external DNS lookups. These will be addressed in\n  an upcoming release.\n* There are known issues with Conduit's telemetry pipeline that prevent it\n  from scaling beyond a few nodes. These will be addressed in an upcoming\n  release.\n* Conduit is still in alpha! Please help us by [filing issues and contributing\n  pull requests](https://github.com/runconduit/conduit/issues/new).\n\n## v0.1.3\n\n* This is a minor bugfix for some web dashboard UI elements that were not\n  rendering correctly.\n\n## v0.1.2\n\nConduit 0.1.2 continues down the path of increasing usability and improving\ndebugging and introspection of the service mesh itself.\n\n* Conduit CLI\n  * New `conduit check` command reports on the health of your Conduit\n    installation.\n  * New `conduit completion` command provides shell completion.\n* Dashboard\n  * Added per-path metrics to the deployment detail pages.\n  * Added animations to line graphs indicating server activity.\n  * More descriptive CSS variable names. (Thanks @natemurthy!)\n  * A variety of other minor UI bugfixes and improvements\n* Fixes\n  * Fixed Prometheus config when using RBAC. (Thanks @FaKod!)\n  * Fixed `tap` failure when pods do not belong to a deployment. (Thanks\n    @FaKod!)\n\n## v0.1.1\n\nConduit 0.1.1 is focused on making it easier to get started with Conduit.\n\n* Conduit can now be installed on Kubernetes clusters that use RBAC.\n* The `conduit inject` command now supports a `--skip-outbound-ports` flag\n  that directs Conduit to bypass proxying for specific outbound ports, making\n  Conduit easier to use with non-gRPC or HTTP/2 protocols.\n* The `conduit tap` command output has been reformatted to be line-oriented,\n  making it easier to parse with common UNIX command line utilities.\n* Conduit now supports routing of non-fully qualified domain names.\n* The web UI has improved support for large deployments and deployments that\n  don't have any inbound/outbound traffic.\n\n## v0.1.0\n\nConduit 0.1.0 is the first public release of Conduit.\n\n* This release supports services that communicate via gRPC only. non-gRPC\n  HTTP/2 services should work. More complete HTTP support, including HTTP/1.0\n  and HTTP/1.1 and non-gRPC HTTP/2, will be added in an upcoming release.\n* Kubernetes 1.8.0 or later is required.\n* kubectl 1.8.0 or later is required. `conduit dashboard` will not work with\n  earlier versions of kubectl.\n* When deploying to Minikube, Minikube 0.23 or 0.24.1 or later are required.\n  Earlier versions will not work.\n* This release has been tested using Google Kubernetes Engine and Minikube.\n  Upcoming releases will be tested on additional providers too.\n* Configuration settings and protocols are not stable yet.\n* Services written in Go must use grpc-go 1.3 or later to avoid [grpc-go bug\n  #1120](https://github.com/grpc/grpc-go/issues/1120).\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.146484375,
          "content": "# Linkerd Community Code of Conduct\n\nAs a CNCF project, we follow the [CNCF Contributor Code of\nConduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md).\nAdditionally, we are committed to the following guidelines adapted from the\n[Rust Code of Conduct](https://www.rust-lang.org/en-US/conduct.html):\n\n## Community Guidelines\n\nOur goal is to foster an inclusive and diverse community of technology\nenthusiasts.\n\nTry to be your best self. Treat your fellow community members with kindness and\nempathy. We welcome disagreements when they are conducted respectfully and\nwithout personal attacks.\n\nWe ask that you keep unstructured critique to a minimum. Disparaging remarks\nabout the project are unnecessary and a drain on community morale. Feedback\nshould be constructive and relevant. Having passionately held opinions on what\nshould improve is encouraged! We hope you will use that enthusiasm to roll up\nyour sleeves and get involved by submitting pull requests. We have additional\nguidelines on [how to ask constructive\nquestions](https://github.com/linkerd/linkerd/wiki/How-To-Ask-Questions-in-Slack).\n\nWe don't tolerate insults, spamming, trolling, flaming, baiting, or harassment.\nWe don't tolerate sexual language, imagery, or unwanted advances. Private\nharassment is also unacceptable.\n\nWe do our best to avoid\n[subtle-isms](https://www.recurse.com/manual#sub-sec-social-rules): small\nactions that make others feel uncomfortable. If you witness a subtle-ism, you\nmay respectfully point it out to the person publicly or privately, or you may\nask a moderator to say something. Accidentally saying something biased is\ncommon, expected, and readily forgiven. It is not in and of itself a bannable\noffense.\n\n## Moderation\n\nIf you feel that a channel needs moderation, please message one of the\n[`maintainers`](MAINTAINERS.md) directly.\n\nModerators will issue a warning to users who don't follow the code of conduct. A\nsecond offense results in a temporary ban, a third warrants a permanent ban.\nIt's at the moderator's discretion to un-ban a remorseful user, or immediately\nban a toxic user without warning. Unjustified bans can be appealed by contacting\n<banhammer@buoyant.io>.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.4638671875,
          "content": "# Contributing to Linkerd2 #\n\n:balloon: Thanks for your help improving the project!\n\n## Getting Help ##\n\nIf you have a question about Linkerd2 or have encountered problems using it,\nstart by [asking a question in the forums][discourse] or join us in the\n[#linkerd2 Slack channel][slack].\n\n## Developer Certificate of Origin ##\n\nTo contribute to this project, you must agree to the Developer Certificate of\nOrigin (DCO) for each commit you make. The DCO is a simple statement that you,\nas a contributor, have the legal right to make the contribution.\n\nSee the [DCO](DCO) file for the full text of what you must agree to.\n\n### Option 1: commit message signoffs ###\n\nOne way to signify that you agree to the DCO for a commit is to add a line to\nthe git commit message:\n\n```txt\nSigned-off-by: Jane Smith <jane.smith@example.com>\n```\n\nIn most cases, you can add this signoff to your commit automatically with the\n`-s` flag to `git commit`. You must use your real name and a reachable email\naddress (sorry, no pseudonyms or anonymous contributions).\n\n### Option 2: public statement ###\n\nIf you've already made the commits and don't want to engage in git shenanigans\nto retroactively apply the signoff as above, there is another option: leave a\ncomment on the PR with the following statement: \"I agree to the DCO for all the\ncommits in this PR.\"\n\nNote that this option also requires that your commits are made under your real\nname and a reachable email address.\n\nIf you use this approach, the DCO bot will still complain, but maintainers will\noverride the DCO bot at merge time.\n\n### Option 3: very simple changes ###\n\nChanges that are trivial (e.g. spelling corrections, adding to ADOPTERS.md,\none-word changes) do not require a DCO signoff. Maintainers should feel free to\noverride the DCO bot for these changes.\n\n## Submitting a Pull Request ##\n\nDo you have an improvement?\n\n1. Submit an [issue][issue] describing your proposed change.\n2. We will try to respond to your issue promptly.\n3. Fork this repo, develop and test your code changes. See the project's\n   [README](README.md) for further information about working in this repository.\n4. Submit a pull request against this repo's `main` branch.\n    - Include instructions on how to test your changes.\n    - If you are making a change to the user interface (UI), include a\n      screenshot of the UI before and after your changes.\n5. Your branch may be merged once all configured checks pass, including:\n    - The branch has passed tests in CI.\n    - A review from appropriate maintainers (see\n      [MAINTAINERS.md](MAINTAINERS.md) and [GOVERNANCE.md](GOVERNANCE.md))\n\n## Committing ##\n\nWe prefer squash or rebase commits so that all changes from a branch are\ncommitted to main as a single commit. All pull requests are squashed when\nmerged, but rebasing prior to merge gives you better control over the commit\nmessage.\n\n### Commit messages ###\n\nFinalized commit messages should be in the following format:\n\n```txt\nSubject\n\nProblem\n\nSolution\n\nValidation\n\nFixes #[GitHub issue ID]\n```\n\n#### Subject ####\n\n- one line, <= 50 characters\n- describe what is done; not the result\n- use the active voice\n- capitalize first word and proper nouns\n- do not end in a period — this is a title/subject\n- reference the GitHub issue by number\n\n##### Examples #####\n\n```txt\nbad: server disconnects should cause dst client disconnects.\ngood: Propagate disconnects from source to destination\n```\n\n```txt\nbad: support tls servers\ngood: Introduce support for server-side TLS (#347)\n```\n\n#### Problem ####\n\nExplain the context and why you're making that change.  What is the problem\nyou're trying to solve? In some cases there is not a problem and this can be\nthought of as being the motivation for your change.\n\n#### Solution ####\n\nDescribe the modifications you've made.\n\nIf this PR changes a behavior, it is helpful to describe the difference between\nthe old behavior and the new behavior. Provide before and after screenshots,\nexample CLI output, or changed YAML where applicable.\n\nDescribe any implementation changes which are particularly complex or\nunintuitive.\n\nList any follow-up work that will need to be done in a future PR and link to any\nrelevant GitHub issues.\n\n#### Validation ####\n\nDescribe the testing you've done to validate your change.  Give instructions for\nreviewers to replicate your tests.  Performance-related changes should include\nbefore- and after- benchmark results.\n\n[discourse]: https://discourse.linkerd.io/c/linkerd2\n[issue]: https://github.com/linkerd/linkerd2/issues/new\n[slack]: http://slack.linkerd.io/\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 72.7578125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 4\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.24.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfbe277e56a376000877090da837660b4427aad530e3028d44e0bffe4f89a1c1\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler2\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627\"\n\n[[package]]\nname = \"adler32\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234\"\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"allocator-api2\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923\"\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9\"\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34ac096ce696dc2fcabef30516bb13c0a68a11d30131d3df6f04711467681b04\"\n\n[[package]]\nname = \"async-stream\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b5a71a6f37880a80d1d7f19efd781e4b5de42c88f0722cc13bcb6cc2cfe8476\"\ndependencies = [\n \"async-stream-impl\",\n \"futures-core\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"async-stream-impl\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7c24de15d275a1ecfd47a380fb4d5ec9bfe0933f309ed5e705b775596a3574d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"async-trait\"\nversion = \"0.1.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f934833b4b7233644e5848f235df3f57ed8c80f1528a26c3dfa13d2147fa056\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"axum\"\nversion = \"0.6.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b829e4e32b91e643de6eafe82b1d90675f5874230191a4ffbc1b336dec4d6bf\"\ndependencies = [\n \"async-trait\",\n \"axum-core\",\n \"bitflags 1.3.2\",\n \"bytes\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"itoa\",\n \"matchit\",\n \"memchr\",\n \"mime\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"rustversion\",\n \"serde\",\n \"sync_wrapper\",\n \"tower\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"axum-core\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"759fa577a247914fd3f7f76d62972792636412fbfd634cd452f6a385a74d2d2c\"\ndependencies = [\n \"async-trait\",\n \"bytes\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"mime\",\n \"rustversion\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"backoff\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b62ddb9cb1ec0a098ad4bbf9344d0713fa193ae1a80af55febcff2627b6a00c1\"\ndependencies = [\n \"futures-core\",\n \"getrandom\",\n \"instant\",\n \"pin-project-lite\",\n \"rand\",\n \"tokio\",\n]\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d82cb332cdfaed17ae235a638438ac4d4839913cc2af585c3c6746e8f8bee1a\"\ndependencies = [\n \"addr2line\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.21.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"325918d6fe32f23b19878fe4b34794ae41fc19ddbe53b10571a4874d44ffd39b\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a012a0df96dd6d06ba9a1b29d6402d1a5d77c6befd2566afdc26e10603dc93d7\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e36cc9d416881d2e24f9a963be5fb1cd90966419ac844274161d10488b3e825\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"num-traits\",\n \"serde\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8eb5e908ef3a6efbe1ed62520fb7287959888c88485abe072543190ecc66783\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96b01801b5fc6a0a232407abc821660c9c6d25a1cafc0d4f85f29fb8d9afc121\"\ndependencies = [\n \"anstyle\",\n \"clap_lex\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54b755194d6389280185988721fffba69495eed5ee9feeee9a599b53db80318c\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46ad14479a25103f283c0f10005961cf086d8dc42205bb44c46ac563475dca6\"\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16b80225097f2e5ae4e7179dd2266824648f3e2f49d9134d584b76389d31c4c3\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.20.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f63b86c8a8826a49b8c21f08a2d07338eec8d900540f8630dc76284be802989\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.20.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95133861a8032aaea082871032f5815eb9e98cef03fa916ab4500513994df9e5\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.20.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d336a2a514f6ccccaa3e09b02d41d35330c07ddf03a62165fcec10bb561c7806\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"data-encoding\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8566979429cf69b49a5c740c60791108e86440e8be149bbea4fe54d2c32d6e2\"\n\n[[package]]\nname = \"deflate\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c86f7e25f518f4b81808a2cf1c50996a61f5c2eb394b2393bd87f2a4780a432f\"\ndependencies = [\n \"adler32\",\n \"gzip-header\",\n]\n\n[[package]]\nname = \"derivative\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"displaydoc\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"drain\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d105028bd2b5dfcb33318fd79a445001ead36004dd8dffef1bdd7e493d8bc1e\"\ndependencies = [\n \"tokio\",\n]\n\n[[package]]\nname = \"dtoa\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcbb2bf8e87535c23f7a8a321e364ce21462d0ff10cb6407820e8e96dfff6653\"\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33d852cb9b869c2a9b3df2f71a3074817f01e1844f839a144f5fcef059a4eb5d\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6\"\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.31.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f\"\n\n[[package]]\nname = \"gzip-header\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95cc527b92e6029a62960ad99aa8a6660faa4555fe5f731aab13aa6a921795a2\"\ndependencies = [\n \"crc32fast\",\n]\n\n[[package]]\nname = \"h2\"\nversion = \"0.3.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81fe527a889e1532da5c525686d96d4c2e74cdd345badf8dfef9f6b39dd5f5e8\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"futures-core\",\n \"futures-sink\",\n \"futures-util\",\n \"http\",\n \"indexmap 2.2.6\",\n \"slab\",\n \"tokio\",\n \"tokio-util\",\n \"tracing\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\ndependencies = [\n \"ahash\",\n \"allocator-api2\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"home\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589533453244b0995c858700322199b2becb13b627df2851f64a2775d024abcf\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"http\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ceab25649e9960c0311ea418d17bee82c0dcec1bd053b5f9a66e265a693bed2\"\ndependencies = [\n \"bytes\",\n \"http\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"http-range-header\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"add0ab9360ddbd88cfeb3bd9574a1d85cfdfa14db10b3e21d3700dbc4328758f\"\n\n[[package]]\nname = \"httparse\"\nversion = \"1.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d71d3574edd2771538b901e6549113b4006ece66150fb69c0fb6d9a2adae946\"\n\n[[package]]\nname = \"httpdate\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9\"\n\n[[package]]\nname = \"hyper\"\nversion = \"0.14.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41dfc780fdec9373c01bae43289ea34c972e40ee3c9f6b3c8801a35f35586ce7\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"httparse\",\n \"httpdate\",\n \"itoa\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n \"want\",\n]\n\n[[package]]\nname = \"hyper-openssl\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6ee5d7a8f718585d1c3c61dfde28ef5b0bb14734b4db13f5ada856cdc6c612b\"\ndependencies = [\n \"http\",\n \"hyper\",\n \"linked_hash_set\",\n \"once_cell\",\n \"openssl\",\n \"openssl-sys\",\n \"parking_lot\",\n \"tokio\",\n \"tokio-openssl\",\n \"tower-layer\",\n]\n\n[[package]]\nname = \"hyper-rustls\"\nversion = \"0.24.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec3efd23720e2049821a693cbc7e65ea87c72f1c58ff2f9522ff332b1491e590\"\ndependencies = [\n \"futures-util\",\n \"http\",\n \"hyper\",\n \"log\",\n \"rustls\",\n \"rustls-native-certs\",\n \"tokio\",\n \"tokio-rustls\",\n]\n\n[[package]]\nname = \"hyper-timeout\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbb958482e8c7be4bc3cf272a766a2b0bf1a6755e7a6ae777f017a31d11b13b1\"\ndependencies = [\n \"hyper\",\n \"pin-project-lite\",\n \"tokio\",\n \"tokio-io-timeout\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"235e081f3925a06703c2d0117ea8b91f042756fd6e7a6e5d901e8ca1a996b220\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"icu_collections\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526\"\ndependencies = [\n \"displaydoc\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637\"\ndependencies = [\n \"displaydoc\",\n \"litemap\",\n \"tinystr\",\n \"writeable\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_locid_transform_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdc8ff3388f852bede6b579ad4e978ab004f139284d7b28715f773507b946f6e\"\n\n[[package]]\nname = \"icu_normalizer\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_normalizer_data\",\n \"icu_properties\",\n \"icu_provider\",\n \"smallvec\",\n \"utf16_iter\",\n \"utf8_iter\",\n \"write16\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_normalizer_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8cafbf7aa791e9b22bec55a167906f9e1215fd475cd22adfcf660e03e989516\"\n\n[[package]]\nname = \"icu_properties\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_locid_transform\",\n \"icu_properties_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_properties_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67a8effbc3dd3e4ba1afa8ad918d5684b8868b3b26500753effea8d2eed19569\"\n\n[[package]]\nname = \"icu_provider\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_provider_macros\",\n \"stable_deref_trait\",\n \"tinystr\",\n \"writeable\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_provider_macros\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"idna\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e\"\ndependencies = [\n \"idna_adapter\",\n \"smallvec\",\n \"utf8_iter\",\n]\n\n[[package]]\nname = \"idna_adapter\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daca1df1c957320b2cf139ac61e7bd64fed304c5040df000a745aa1de3b4ef71\"\ndependencies = [\n \"icu_normalizer\",\n \"icu_properties\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown 0.12.3\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ipnet\"\nversion = \"2.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ddc24109865250148c2e0f3d25d4f0f479571723792d3802153c60922a4fb708\"\ndependencies = [\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d75a2a4b1b190afb6f5425f10f6a8f959d2ea0b9c2b1d79553551850539e4674\"\n\n[[package]]\nname = \"jemalloc-sys\"\nversion = \"0.5.4+5.3.0-patched\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac6c1946e1cea1788cbfde01c993b52a10e2da07f4bac608228d1bed20bfebf2\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"jemallocator\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0de374a9f8e63150e6f5e8a60cc14c668226d7a347d8aee1a45766e3c4dd3bc\"\ndependencies = [\n \"jemalloc-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"json-patch\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec9ad60d674508f3ca8f380a928cfe7b096bc729c4e2dbfe3852bc45da3ab30b\"\ndependencies = [\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"jsonpath-rust\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06cc127b7c3d270be504572364f9569761a180b981919dd0d87693a7f5fb7829\"\ndependencies = [\n \"pest\",\n \"pest_derive\",\n \"regex\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"k8s-gateway-api\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"84b31e055e9626a2feb83cea00e22f796392edbe634fd4bafc0c73bf6d035ec0\"\ndependencies = [\n \"k8s-openapi\",\n \"kube\",\n \"schemars\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"k8s-openapi\"\nversion = \"0.20.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"edc3606fd16aca7989db2f84bb25684d0270c6d6fa1dbcd0025af7b4130523a6\"\ndependencies = [\n \"base64 0.21.7\",\n \"bytes\",\n \"chrono\",\n \"schemars\",\n \"serde\",\n \"serde-value\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"kube\"\nversion = \"0.87.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3499c8d60c763246c7a213f51caac1e9033f46026904cb89bc8951ae8601f26e\"\ndependencies = [\n \"k8s-openapi\",\n \"kube-client\",\n \"kube-core\",\n \"kube-derive\",\n \"kube-runtime\",\n]\n\n[[package]]\nname = \"kube-client\"\nversion = \"0.87.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"033450dfa0762130565890dadf2f8835faedf749376ca13345bcd8ecd6b5f29f\"\ndependencies = [\n \"base64 0.21.7\",\n \"bytes\",\n \"chrono\",\n \"either\",\n \"futures\",\n \"home\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"hyper-openssl\",\n \"hyper-rustls\",\n \"hyper-timeout\",\n \"jsonpath-rust\",\n \"k8s-openapi\",\n \"kube-core\",\n \"openssl\",\n \"pem\",\n \"pin-project\",\n \"rand\",\n \"rustls\",\n \"rustls-pemfile\",\n \"secrecy\",\n \"serde\",\n \"serde_json\",\n \"serde_yaml\",\n \"thiserror 1.0.69\",\n \"tokio\",\n \"tokio-tungstenite\",\n \"tokio-util\",\n \"tower\",\n \"tower-http\",\n \"tracing\",\n]\n\n[[package]]\nname = \"kube-core\"\nversion = \"0.87.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5bba93d054786eba7994d03ce522f368ef7d48c88a1826faa28478d85fb63ae\"\ndependencies = [\n \"chrono\",\n \"form_urlencoded\",\n \"http\",\n \"json-patch\",\n \"k8s-openapi\",\n \"once_cell\",\n \"schemars\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"kube-derive\"\nversion = \"0.87.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e98dd5e5767c7b894c1f0e41fd628b145f808e981feb8b08ed66455d47f1a4\"\ndependencies = [\n \"darling\",\n \"proc-macro2\",\n \"quote\",\n \"serde_json\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"kube-runtime\"\nversion = \"0.87.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d8893eb18fbf6bb6c80ef6ee7dd11ec32b1dc3c034c988ac1b3a84d46a230ae\"\ndependencies = [\n \"ahash\",\n \"async-trait\",\n \"backoff\",\n \"derivative\",\n \"futures\",\n \"hashbrown 0.14.5\",\n \"json-patch\",\n \"k8s-openapi\",\n \"kube-client\",\n \"parking_lot\",\n \"pin-project\",\n \"serde\",\n \"serde_json\",\n \"smallvec\",\n \"thiserror 1.0.69\",\n \"tokio\",\n \"tokio-util\",\n \"tracing\",\n]\n\n[[package]]\nname = \"kubert\"\nversion = \"0.22.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ff4135c85607c3733cd52e3098df704994980a91cb14afabd967a60cb167433\"\ndependencies = [\n \"ahash\",\n \"backoff\",\n \"bytes\",\n \"chrono\",\n \"clap\",\n \"deflate\",\n \"drain\",\n \"futures-core\",\n \"futures-util\",\n \"hyper\",\n \"k8s-openapi\",\n \"kube-client\",\n \"kube-core\",\n \"kube-runtime\",\n \"kubert-prometheus-process\",\n \"kubert-prometheus-tokio\",\n \"parking_lot\",\n \"pin-project-lite\",\n \"prometheus-client\",\n \"rustls-pemfile\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n \"tokio\",\n \"tokio-rustls\",\n \"tower\",\n \"tower-http\",\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"kubert-prometheus-process\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40d2f45f0fb66a3681630fe2efd018c63eb7336697c44d909e53a99847113b97\"\ndependencies = [\n \"libc\",\n \"procfs\",\n \"prometheus-client\",\n \"tracing\",\n]\n\n[[package]]\nname = \"kubert-prometheus-tokio\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a101fa3df488c89130664aaf4652986da49e204fb1725d089122f75b22ff6cbb\"\ndependencies = [\n \"prometheus-client\",\n \"tokio\",\n \"tokio-metrics\",\n \"tracing\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.169\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a\"\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"\n\n[[package]]\nname = \"linked_hash_set\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bae85b5be22d9843c80e5fc80e9b64c8a3b1f98f867c709956eca3efff4e92e2\"\ndependencies = [\n \"linked-hash-map\",\n]\n\n[[package]]\nname = \"linkerd-policy-controller\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"jemallocator\",\n \"linkerd-policy-controller-runtime\",\n \"tokio\",\n]\n\n[[package]]\nname = \"linkerd-policy-controller-core\"\nversion = \"0.1.0\"\ndependencies = [\n \"ahash\",\n \"anyhow\",\n \"async-trait\",\n \"chrono\",\n \"futures\",\n \"http\",\n \"ipnet\",\n \"regex\",\n]\n\n[[package]]\nname = \"linkerd-policy-controller-grpc\"\nversion = \"0.1.0\"\ndependencies = [\n \"async-stream\",\n \"async-trait\",\n \"drain\",\n \"futures\",\n \"http\",\n \"hyper\",\n \"linkerd-policy-controller-core\",\n \"linkerd2-proxy-api\",\n \"maplit\",\n \"prost-types\",\n \"serde\",\n \"serde_json\",\n \"tokio\",\n \"tonic\",\n \"tracing\",\n]\n\n[[package]]\nname = \"linkerd-policy-controller-k8s-api\"\nversion = \"0.1.0\"\ndependencies = [\n \"ipnet\",\n \"k8s-gateway-api\",\n \"k8s-openapi\",\n \"kube\",\n \"schemars\",\n \"serde\",\n \"serde_json\",\n \"serde_yaml\",\n \"thiserror 2.0.9\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"linkerd-policy-controller-k8s-index\"\nversion = \"0.1.0\"\ndependencies = [\n \"ahash\",\n \"anyhow\",\n \"chrono\",\n \"futures\",\n \"http\",\n \"k8s-openapi\",\n \"kube\",\n \"kubert\",\n \"linkerd-policy-controller-core\",\n \"linkerd-policy-controller-k8s-api\",\n \"maplit\",\n \"parking_lot\",\n \"prometheus-client\",\n \"thiserror 2.0.9\",\n \"tokio\",\n \"tokio-stream\",\n \"tokio-test\",\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"linkerd-policy-controller-k8s-status\"\nversion = \"0.1.0\"\ndependencies = [\n \"ahash\",\n \"anyhow\",\n \"chrono\",\n \"kubert\",\n \"linkerd-policy-controller-core\",\n \"linkerd-policy-controller-k8s-api\",\n \"parking_lot\",\n \"prometheus-client\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.9\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"linkerd-policy-controller-runtime\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"clap\",\n \"drain\",\n \"futures\",\n \"hyper\",\n \"ipnet\",\n \"k8s-openapi\",\n \"kube\",\n \"kubert\",\n \"linkerd-policy-controller-core\",\n \"linkerd-policy-controller-grpc\",\n \"linkerd-policy-controller-k8s-api\",\n \"linkerd-policy-controller-k8s-index\",\n \"linkerd-policy-controller-k8s-status\",\n \"openssl\",\n \"parking_lot\",\n \"prometheus-client\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.9\",\n \"tokio\",\n \"tokio-stream\",\n \"tonic\",\n \"tracing\",\n]\n\n[[package]]\nname = \"linkerd-policy-test\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"futures\",\n \"hyper\",\n \"ipnet\",\n \"k8s-gateway-api\",\n \"k8s-openapi\",\n \"kube\",\n \"linkerd-policy-controller-core\",\n \"linkerd-policy-controller-grpc\",\n \"linkerd-policy-controller-k8s-api\",\n \"linkerd2-proxy-api\",\n \"maplit\",\n \"rand\",\n \"regex\",\n \"schemars\",\n \"serde\",\n \"serde_json\",\n \"tokio\",\n \"tokio-test\",\n \"tonic\",\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"linkerd2-proxy-api\"\nversion = \"0.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4682c00263191a5bfa4fbe64f6d80b22ff2b49aaa294da5aac062f5abc6eb9e\"\ndependencies = [\n \"http\",\n \"ipnet\",\n \"prost\",\n \"prost-types\",\n \"thiserror 1.0.69\",\n \"tonic\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"litemap\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ee93343901ab17bd981295f2cf0026d4ad018c7c31ba84549a4ddbb47a45104\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"maplit\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d\"\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata 0.1.10\",\n]\n\n[[package]]\nname = \"matchit\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e7465ac9959cc2b1404e8e2367b43684a6d13790fe23056cc8c6c5a6b7bcb94\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"mime\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ffbe83022cedc1d264172192511ae958937694cd57ce297164951b8b3568394\"\ndependencies = [\n \"adler2\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2886843bf800fba2e3377cff24abf6379b4c4d5c6681eaf9ea5b0d15090450bd\"\ndependencies = [\n \"libc\",\n \"wasi\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.36.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62948e14d923ea95ea2c7c86c71013138b66525b86bdc08d2dcc262bdb497b87\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.68\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6174bc48f102d208783c2c84bf931bb75927a617866870de8a4ea85597f871f5\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"cfg-if\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-macros\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"openssl-src\"\nversion = \"300.4.1+3.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"faa4eac4138c62414b5622d1b31c5c304f34b406b013c079c2bbc652fdd6678c\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.104\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45abf306cbf99debc8195b66b7346498d7b10c210de50418b5ccd7ceba08c741\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"openssl-src\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"ordered-float\"\nversion = \"2.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68f19d67e5a2795c94e73e0bb1cc1a7edeb2e28efd39e2e1c9b7a40c1108b11c\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"pem\"\nversion = \"3.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e459365e590736a54c3fa561947c84837534b8e9af6fc5bf781307e82658fae\"\ndependencies = [\n \"base64 0.22.1\",\n \"serde\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b7cafe60d6cf8e62e1b9b2ea516a089c008945bb5a275416789e7db0bc199dc\"\ndependencies = [\n \"memchr\",\n \"thiserror 2.0.9\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"pest_derive\"\nversion = \"2.7.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"816518421cfc6887a0d62bf441b6ffb4536fcc926395a69e1a85852d4363f57e\"\ndependencies = [\n \"pest\",\n \"pest_generator\",\n]\n\n[[package]]\nname = \"pest_generator\"\nversion = \"2.7.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d1396fd3a870fc7838768d171b4616d5c91f6cc25e377b673d714567d99377b\"\ndependencies = [\n \"pest\",\n \"pest_meta\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"pest_meta\"\nversion = \"2.7.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1e58089ea25d717bfd31fb534e4f3afcc2cc569c70de3e239778991ea3b7dea\"\ndependencies = [\n \"once_cell\",\n \"pest\",\n \"sha2\",\n]\n\n[[package]]\nname = \"pin-project\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e2ec53ad785f4d35dac0adea7f7dc6f1bb277ad84a680c7afefeae05d1f5916\"\ndependencies = [\n \"pin-project-internal\",\n]\n\n[[package]]\nname = \"pin-project-internal\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d56a66c0c55993aa927429d0f8a0abfd74f084e4d9c192cffed01e418d83eefb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"procfs\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"731e0d9356b0c25f16f33b5be79b1c57b562f141ebfcdb0ad8ac2c13a24293b4\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"hex\",\n \"lazy_static\",\n \"procfs-core\",\n \"rustix\",\n]\n\n[[package]]\nname = \"procfs-core\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d3554923a69f4ce04c4a754260c338f505ce22642d3830e049a399fc2059a29\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"hex\",\n]\n\n[[package]]\nname = \"prometheus-client\"\nversion = \"0.22.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"504ee9ff529add891127c4827eb481bd69dc0ebc72e9a682e187db4caa60c3ca\"\ndependencies = [\n \"dtoa\",\n \"itoa\",\n \"parking_lot\",\n \"prometheus-client-derive-encode\",\n]\n\n[[package]]\nname = \"prometheus-client-derive-encode\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"440f724eba9f6996b75d63681b0a92b06947f1457076d503a4d2e2c8f56442b8\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"prost\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"deb1435c188b76130da55f17a466d252ff7b1418b2ad3e037d127b94e3411f29\"\ndependencies = [\n \"bytes\",\n \"prost-derive\",\n]\n\n[[package]]\nname = \"prost-derive\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81bddcdb20abf9501610992b6759a4c888aef7d1a7247ef75e2404275ac24af1\"\ndependencies = [\n \"anyhow\",\n \"itertools\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"prost-types\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9091c90b0a32608e984ff2fa4091273cbdd755d54935c51d520887f4a1dbd5b0\"\ndependencies = [\n \"prost\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e4dccaaaf89514f546c693ddc140f729f958c247918a13380cccc6078391acc\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"469052894dcb553421e483e4209ee581a45100d31b4018de03e5a7ad86374a7e\"\ndependencies = [\n \"bitflags 2.5.0\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata 0.4.8\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax 0.6.29\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"368758f23274712b504848e9d5a6f010445cc8b87a7cdb4d7cbee666c1288da3\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"ring\"\nversion = \"0.17.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"getrandom\",\n \"libc\",\n \"spin\",\n \"untrusted\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa260229e6538e52293eeb577aabd09945a09d6d9cc0fc550ed7529056c2e32a\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.21.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f56a14d1f48b391359b22f731fd4bd7e43c97f3c50eee276f3aa09c94784d3e\"\ndependencies = [\n \"log\",\n \"ring\",\n \"rustls-webpki\",\n \"sct\",\n]\n\n[[package]]\nname = \"rustls-native-certs\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00\"\ndependencies = [\n \"openssl-probe\",\n \"rustls-pemfile\",\n \"schannel\",\n \"security-framework\",\n]\n\n[[package]]\nname = \"rustls-pemfile\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c74cae0a4cf6ccbbf5f359f08efdf8ee7e1dc532573bf0db71968cb56b1448c\"\ndependencies = [\n \"base64 0.21.7\",\n]\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.101.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b6275d1ee7a1cd780b64aca7726599a1dbc893b1e64144529e55c3c2f745765\"\ndependencies = [\n \"ring\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7c45b9784283f1b2e7fb61b42047c2fd678ef0960d4f6f1eba131594cc369d4\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f29ebaa345f945cec9fbbc532eb307f0fdad8161f281b6369539c8d84876b3d\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"sct\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da046153aa2352493d6cb7da4b6e5c0c057d8a1d0a9aa8560baffdd945acd414\"\ndependencies = [\n \"ring\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"secrecy\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9bd1c54ea06cfd2f6b63219704de0b9b4f72dcc2b8fdef820be6cd799780e91e\"\ndependencies = [\n \"serde\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c627723fd09706bacdb5cf41499e95098555af3c3c29d014dc3c458ef6be11c0\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"core-foundation\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49db231d56a190491cb4aeda9527f1ad45345af50b0851622a7adb8c03b01c32\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02fc4265df13d6fa1d00ecff087228cc0a2b5f3c0e87e258d8b94a156e984c70\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde-value\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3a1a3341211875ef120e117ea7fd5228530ae7e7036a779fdc9117be6b3282c\"\ndependencies = [\n \"ordered-float\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a9bf7cf98d04a2b28aead066b7496853d4779c9cc183c440dbac457641e19a0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.135\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b0d7ba2887406110130a978386c4e1befb98c674b4fba677954e4db976630d9\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_yaml\"\nversion = \"0.9.34+deprecated\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8b1a1a2ebf674015cc02edccce75287f1a0130d394307b36743c2f5d504b47\"\ndependencies = [\n \"indexmap 2.2.6\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n \"unsafe-libyaml\",\n]\n\n[[package]]\nname = \"sha1\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9e9e0b4211b72e7b8b6e85c807d36c212bdb33ea8587f7569562a84df5465b1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"socket2\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c970269d99b64e60ec3bd6ad27270092a5394c4e309314b18ae3fe575695fbe8\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.87\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25aa4ce346d03a6dcd68dd8b4010bcb74e54e62c90c573f394c46eae99aba32d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"sync_wrapper\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160\"\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52\"\ndependencies = [\n \"thiserror-impl 1.0.69\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"2.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f072643fd0190df67a8bab670c20ef5d8737177d6ac6b2e9a236cb096206b2cc\"\ndependencies = [\n \"thiserror-impl 2.0.9\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"2.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b50fa271071aae2e6ee85f842e2e28ba8cd2c5fb67f11fcb1fd70b276f9e7d4\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"tinystr\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f\"\ndependencies = [\n \"displaydoc\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"tokio\"\nversion = \"1.42.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cec9b21b0450273377fc97bd4c33a8acffc8c996c987a7c5b319a0083707551\"\ndependencies = [\n \"backtrace\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"parking_lot\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2\",\n \"tokio-macros\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"tokio-io-timeout\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30b74022ada614a1b4834de765f9bb43877f910cc8ce4be40e89042c9223a8bf\"\ndependencies = [\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"693d596312e88961bc67d7f1f97af8a70227d9f90c31bba5806eec004978d752\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"tokio-metrics\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eace09241d62c98b7eeb1107d4c5c64ca3bd7da92e8c218c153ab3a78f9be112\"\ndependencies = [\n \"futures-util\",\n \"pin-project-lite\",\n \"tokio\",\n \"tokio-stream\",\n]\n\n[[package]]\nname = \"tokio-openssl\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59df6849caa43bb7567f9a36f863c447d95a11d5903c9cc334ba32576a27eadd\"\ndependencies = [\n \"openssl\",\n \"openssl-sys\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-rustls\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081\"\ndependencies = [\n \"rustls\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-stream\"\nversion = \"0.1.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca58d7bba4a75707817a2c44174253f9236b2d5fbd055602e9d5c07c139a047\"\ndependencies = [\n \"futures-core\",\n \"pin-project-lite\",\n \"tokio\",\n \"tokio-util\",\n]\n\n[[package]]\nname = \"tokio-test\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2468baabc3311435b55dd935f702f42cd1b8abb7e754fb7dfb16bd36aa88f9f7\"\ndependencies = [\n \"async-stream\",\n \"bytes\",\n \"futures-core\",\n \"tokio\",\n \"tokio-stream\",\n]\n\n[[package]]\nname = \"tokio-tungstenite\"\nversion = \"0.20.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"212d5dcb2a1ce06d81107c3d0ffa3121fe974b73f068c8282cb1c32328113b6c\"\ndependencies = [\n \"futures-util\",\n \"log\",\n \"tokio\",\n \"tungstenite\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.7.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d7fcaa8d55a2bdd6b83ace262b016eca0d79ee02818c5c1bcdf0305114081078\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-sink\",\n \"pin-project-lite\",\n \"slab\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tonic\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d560933a0de61cf715926b9cac824d4c883c2c43142f787595e48280c40a1d0e\"\ndependencies = [\n \"async-stream\",\n \"async-trait\",\n \"axum\",\n \"base64 0.21.7\",\n \"bytes\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"hyper-timeout\",\n \"percent-encoding\",\n \"pin-project\",\n \"prost\",\n \"tokio\",\n \"tokio-stream\",\n \"tower\",\n \"tower-layer\",\n \"tower-service\",\n \"tracing\",\n]\n\n[[package]]\nname = \"tower\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c\"\ndependencies = [\n \"futures-core\",\n \"futures-util\",\n \"indexmap 1.9.3\",\n \"pin-project\",\n \"pin-project-lite\",\n \"rand\",\n \"slab\",\n \"tokio\",\n \"tokio-util\",\n \"tower-layer\",\n \"tower-service\",\n \"tracing\",\n]\n\n[[package]]\nname = \"tower-http\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61c5bb1d698276a2443e5ecfabc1008bf15a36c12e6a7176e7bf089ea9131140\"\ndependencies = [\n \"base64 0.21.7\",\n \"bitflags 2.5.0\",\n \"bytes\",\n \"futures-core\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"http-range-header\",\n \"mime\",\n \"pin-project-lite\",\n \"tower-layer\",\n \"tower-service\",\n \"tracing\",\n]\n\n[[package]]\nname = \"tower-layer\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"121c2a6cda46980bb0fcd1647ffaf6cd3fc79a013de288782836f6df9c48780e\"\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8df9b6e13f2d32c91b9bd719c00d1958837bc7dec474d94952798cc8e69eeec3\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0\"\ndependencies = [\n \"log\",\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-serde\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"704b1aeb7be0d0a84fc9828cae51dab5970fee5088f83d1dd7ee6f6246fc6ff1\"\ndependencies = [\n \"serde\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008\"\ndependencies = [\n \"matchers\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n \"tracing-serde\",\n]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b\"\n\n[[package]]\nname = \"tungstenite\"\nversion = \"0.20.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e3dac10fd62eaf6617d3a904ae222845979aec67c615d1c842b4002c7666fb9\"\ndependencies = [\n \"byteorder\",\n \"bytes\",\n \"data-encoding\",\n \"http\",\n \"httparse\",\n \"log\",\n \"rand\",\n \"sha1\",\n \"thiserror 1.0.69\",\n \"url\",\n \"utf-8\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2896d95c02a80c6d6a5d6e953d479f5ddf2dfdb6a244441010e373ac0fb88971\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83\"\n\n[[package]]\nname = \"unsafe-libyaml\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"673aac59facbab8a9007c7f6108d11f63b603f7cabff99fabf650fea5c32b861\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1\"\n\n[[package]]\nname = \"url\"\nversion = \"2.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32f8b686cadd1473f4bd0117a5d28d36b1ade384ea9b5069a1c40aefed7fda60\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"utf-8\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09cc8ee72d2a9becf2f2febe0205bbed8fc6615b7cb429ad062dc7b7ddd036a9\"\n\n[[package]]\nname = \"utf16_iter\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246\"\n\n[[package]]\nname = \"utf8_iter\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be\"\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"want\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e\"\ndependencies = [\n \"try-lock\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"write16\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936\"\n\n[[package]]\nname = \"writeable\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51\"\n\n[[package]]\nname = \"yoke\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"120e6aef9aa629e3d4f52dc8cc43a015c7724194c97dfaf45180d2daf2b77f40\"\ndependencies = [\n \"serde\",\n \"stable_deref_trait\",\n \"yoke-derive\",\n \"zerofrom\",\n]\n\n[[package]]\nname = \"yoke-derive\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2380878cad4ac9aac1e2435f3eb4020e8374b5f13c296cb75b4620ff8e229154\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"zerofrom\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cff3ee08c995dee1859d998dea82f7374f2826091dd9cd47def953cae446cd2e\"\ndependencies = [\n \"zerofrom-derive\",\n]\n\n[[package]]\nname = \"zerofrom-derive\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"595eed982f7d355beb85837f651fa22e90b3c044842dc7f2c2842c086f295808\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\n\n[[package]]\nname = \"zerovec\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079\"\ndependencies = [\n \"yoke\",\n \"zerofrom\",\n \"zerovec-derive\",\n]\n\n[[package]]\nname = \"zerovec-derive\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.4970703125,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"policy-controller\",\n    \"policy-controller/core\",\n    \"policy-controller/grpc\",\n    \"policy-controller/k8s/api\",\n    \"policy-controller/k8s/index\",\n    \"policy-controller/k8s/status\",\n    \"policy-controller/runtime\",\n    \"policy-test\",\n]\n\n[profile.release]\nlto = \"thin\"\n\n[workspace.dependencies]\nk8s-openapi = { version = \"0.20\", features = [\"v1_22\"] }\nkube = { version = \"0.87.1\", default-features = false }\nkubert = { version = \"0.22\", default-features = false }\n"
        },
        {
          "name": "DCO",
          "type": "blob",
          "size": 1.3876953125,
          "content": "Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n"
        },
        {
          "name": "Dockerfile-debug",
          "type": "blob",
          "size": 0.47265625,
          "content": "FROM debian:bookworm-slim\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    curl \\\n    dnsutils \\\n    iptables \\\n    jq \\\n    nghttp2 \\\n    tcpdump \\\n    iproute2 \\\n    lsof \\\n    conntrack \\\n    tshark && \\\n    rm -rf /var/lib/apt/lists/*\n\n# We still rely on old iptables-legacy syntax.\nRUN update-alternatives --set iptables /usr/sbin/iptables-legacy \\\n    && update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy\n\nENTRYPOINT [ \"tshark\", \"-i\", \"any\" ]\n"
        },
        {
          "name": "Dockerfile-proxy",
          "type": "blob",
          "size": 2.826171875,
          "content": "ARG RUNTIME_IMAGE=gcr.io/distroless/cc-debian12\nARG BUILDPLATFORM=linux/amd64\n\n# Precompile key slow-to-build dependencies\nFROM --platform=$BUILDPLATFORM golang:1.23-alpine AS go-deps\nWORKDIR /linkerd-build\nCOPY go.mod go.sum ./\nCOPY bin/install-deps bin/\nRUN go mod download\nARG TARGETARCH\nRUN ./bin/install-deps $TARGETARCH\n\nFROM --platform=$BUILDPLATFORM debian:bookworm-slim AS fetch\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y curl jq && \\\n    rm -rf /var/lib/apt/lists/*\nWORKDIR /build\nCOPY bin/fetch-proxy bin/fetch-proxy\nCOPY bin/scurl bin/scurl\nARG TARGETARCH\nARG LINKERD2_PROXY_REPO=\"linkerd/linkerd2-proxy\"\nARG LINKERD2_PROXY_VERSION=\"\"\nRUN --mount=type=secret,id=github \\\n    export GITHUB_TOKEN_FILE=/run/secrets/github; \\\n    proxy=$(bin/fetch-proxy \"$LINKERD2_PROXY_VERSION\" \"$TARGETARCH\"); \\\n    mv \"$proxy\" linkerd2-proxy\nRUN echo \"$LINKERD2_PROXY_VERSION\" > proxy-version\nARG LINKERD_AWAIT_VERSION=v0.2.9\nRUN bin/scurl -o linkerd-await https://github.com/linkerd/linkerd-await/releases/download/release%2F${LINKERD_AWAIT_VERSION}/linkerd-await-${LINKERD_AWAIT_VERSION}-${TARGETARCH} && chmod +x linkerd-await\nARG LINKERD_VALIDATOR_VERSION=v0.1.2\nRUN bin/scurl -O https://github.com/linkerd/linkerd2-proxy-init/releases/download/validator%2F${LINKERD_VALIDATOR_VERSION}/linkerd-network-validator-${LINKERD_VALIDATOR_VERSION}-${TARGETARCH}.tgz\nRUN tar -zxvf linkerd-network-validator-${LINKERD_VALIDATOR_VERSION}-${TARGETARCH}.tgz && mv linkerd-network-validator-${LINKERD_VALIDATOR_VERSION}-${TARGETARCH}/linkerd-network-validator .\n\n## compile proxy-identity agent\nFROM go-deps AS golang\nWORKDIR /linkerd-build\nCOPY pkg/util pkg/util\nCOPY pkg/flags pkg/flags\nCOPY pkg/tls pkg/tls\nCOPY pkg/version pkg/version\nARG TARGETARCH\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=$TARGETARCH go build -mod=readonly ./pkg/...\nCOPY proxy-identity proxy-identity\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=$TARGETARCH go build -o /out/proxy-identity -mod=readonly -ldflags \"-s -w\" ./proxy-identity\n\nFROM $RUNTIME_IMAGE AS runtime\nLABEL org.opencontainers.image.source=https://github.com/linkerd/linkerd2\nCOPY --from=fetch /build/target/proxy/LICENSE /usr/lib/linkerd/LICENSE\nCOPY --from=fetch /build/proxy-version /usr/lib/linkerd/linkerd2-proxy-version.txt\nCOPY --from=fetch /build/linkerd2-proxy /usr/lib/linkerd/linkerd2-proxy\nCOPY --from=fetch /build/linkerd-await /usr/lib/linkerd/linkerd-await\nCOPY --from=fetch /build/linkerd-network-validator /usr/lib/linkerd/linkerd2-network-validator\nCOPY --from=golang /out/proxy-identity /usr/lib/linkerd/linkerd2-proxy-identity\nCOPY --from=debian:bookworm-slim /bin/sleep /bin/sleep\nARG LINKERD_VERSION\nENV LINKERD_CONTAINER_VERSION_OVERRIDE=${LINKERD_VERSION}\nENV LINKERD2_PROXY_LOG=warn,linkerd=info\nENV LINKERD2_PROXY_LOG_FORMAT=plain\nENTRYPOINT [\"/usr/lib/linkerd/linkerd2-proxy-identity\"]\n"
        },
        {
          "name": "EXTENSIONS.md",
          "type": "blob",
          "size": 5.173828125,
          "content": "# Linkerd Extensions\n\nLinkerd has an extension model which allows 3rd parties to add functionality.\nEach extension consists of a binary CLI named `linkerd-name` (where `name` is\nthe name of the extension) as well as a set of Kubernetes resources.  To invoke\nan extension, users can run `linkerd name` which will search the current PATH\nfor an executable named `linkerd-name` and execute it.\n\n## Installing Extensions\n\nTo install an extension, first download the extension executable and put it\nin your PATH. The extension can then be installed into your Kubernetes cluster\nby running `linkerd <extension name> install | kubectl apply -f -`. Similarly,\nit can be uninstalled by running\n`linkerd <extension name> uninstall | kubectl delete -f -`.\n\nA full list of installed extensions can be printed by running `linkerd check`.\n\n## Developing Extensions\n\nThe extension must be an executable file named `linkerd-name` where `name` is\nthe name of the extension. The name must not be any of the built-in Linkerd\ncommands (e.g. `check`) or extensions (e.g. `viz`).\n\nThe extension must accept the following flags and respect them any time that\nit communicates with the Kubernetes API.  All of these flags must be accepted\nbut may be ignored if they are not applicable.\n\n* `--api-addr`: Override kubeconfig and communicate directly with the control\n  plane at host:port (mostly for testing)\n* `--context`: Name of the kubeconfig context to use\n* `--as`: Username to impersonate for Kubernetes operations\n* `--as-group`: Group to impersonate for Kubernetes operations\n* `--help`/`-h`: Print help message\n* `--kubeconfig`: Path to the kubeconfig file to use for CLI requests\n* `--linkerd-namespace`/`-L`: Namespace in which Linkerd is installed\n  [$LINKERD_NAMESPACE]\n* `--verbose`: Turn on debug logging\n\nThe extension must implement these commands:\n\n### `linkerd-name install`\n\nThis command must print the Kubernetes manifests for the extension as yaml\nwhich is suitable to be passed to `kubectl apply -f`. These manifests must\ninclude a Namespace resource with the label `linkerd.io/extension=name` where\n`name` is the name of the extension. This allows Linkerd to detect installed\nextensions.\n\n### `linkerd-name uninstall`\n\nThis command must print manifests for all cluster-scoped Kubernetes resources\nbelonging to this extension (including the extension Namespace) as yaml which\nis suitable to be passed to `kubectl delete -f`.\n\n### `linkerd-name check`\n\nThis command must perform any appropriate health checks for the extension\nincluding but not limited to checking that the extension resources exist and\nare in a healthy state. This command must exit with a status code of 0 if the\nchecks pass or with a nonzero status code if they do not pass. For consistency,\nit is recommended that this command follows the same output formatting as\n`linkerd check`, e.g.\n\n```console\nlinkerd-version\n---------------\n√ can determine the latest version\n√ cli is up-to-date\n\nStatus check results are √\n```\n\nThe final line of output should be either `Status check results are √` or\n`Status check results are ×`.\n\nIn addition to the flags described above, `linkerd-name check` must accept the\nfollowing flags:\n\n* `--namespace`/`-n`: Namespace to use for –proxy checks (default: all\n  namespaces)\n* `--output`/`-o`: Output format. One of: table, json, short\n* `--pre`: Only run pre-installation checks, to determine if the extension can\n  be installed\n* `--proxy`: Only run data-plane checks, to determine if the data plane is\n  healthy\n* `--wait`: Maximum allowed time for all tests to pass\n\nIf the output format is set to json then output must be in json format\ninstead of the output format described above.  E.g.\n\n```json\n{\n  \"success\": false,\n  \"categories\": [\n    {\n      \"categoryName\": \"kubernetes-api\",\n      \"checks\": [\n        {\n          \"description\": \"can initialize the client\",\n          \"result\": \"success\"\n        },\n        {\n          \"description\": \"can query the Kubernetes API\",\n          \"result\": \"success\"\n        },\n        {\n          \"description\": \"linkerd-viz Namespace exists\",\n          \"hint\": \"https://linkerd.io/2/checks/#l5d-viz-ns-exists\",\n          \"error\": \"could not find the linkerd-viz extension\",\n          \"result\": \"error\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nIn particular, the `linkerd check` command will invoke the check command for\neach extension installed in the cluster and will request json output.\n`linkerd check` may optinally invoke your extension if not installed in the\ncluster (see `linkerd-name _extension-metadata` below to opt-in).  To preserve\nforwards compatibility, it is recommended that the check command should ignore\nany unknown flags.\n\n### `linkerd-name _extension-metadata`\n\nThis subcommand is optional, and enables an extension to opt-in to being\nexecuted as part of `linkerd check`, even when there is no corresponding\nextension on the cluster. To opt-in, the output of\n`linkerd-name _extension-metadata` should be json of the form:\n\n```json\n{\n  \"name\": \"linkerd-name\",\n  \"checks\": \"always\",\n}\n```\n\nNote that for `linkerd check` to validate which extensions are opting-in, it\nruns `linkerd-* _extension-metadata` against every executable in the PATH.\n\nThe extension may also implement further commands in addition to the ones\ndefined here.\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 3.2490234375,
          "content": "# Linkerd Governance\n\nThis document defines project governance for Linkerd.\n\n> The Linkerd maintainers are 100% committed to open governance and to being\n> hosted by a neutral foundation. We believe that a diverse and active set of\n> maintainers is fundamental to the long-term health of an open source project.\n> And we want YOU to join us.\n\n&mdash; [Linkerd's Commitment to Open\nGovernance](https://linkerd.io/2019/10/03/linkerds-commitment-to-open-governance/)\n\n## Contributors\n\nLinkerd is for everyone. Anyone can become a Linkerd contributor simply by\ncontributing to the project, whether through code, documentation, blog posts,\ncommunity management, or other means. As with all Linkerd community members,\ncontributors are expected to follow the [Linkerd Code of\nConduct][coc].\n\nAll contributions to Linkerd code, documentation, or other components in the\nLinkerd GitHub org must follow the guidelines in [CONTRIBUTING.md][contrib].\nWhether these contributions are merged into the project is the prerogative of\nthe maintainers.\n\n## Directors\n\nDirectors are responsible for non-technical leadership functions within the\nproject. This includes representing Linkerd and its maintainers to the\ncommunity, to press, and to the outside world; interfacing with CNCF and other\ngovernance entities; and participating in project decision-making processes when\nappropriate.\n\nDirectors may be elected by a majority vote of the maintainers.\n\n## Maintainers\n\nMaintainers have the ability to merge code into the project. Anyone can\nbecome a Linkerd maintainer (see \"Becoming a maintainer\" below.)\n\n### Expectations\n\nLinkerd maintainers are expected to:\n\n* Review pull requests, triage issues, and fix bugs in their areas of\n  expertise, ensuring that all changes go through the project's code review\n  and integration processes.\n* Monitor cncf-linkerd-* emails and the Linkerd Slack, and help out when\n  possible.\n* Rapidly respond to any time-sensitive security release processes.\n* Attend meetings with the Linkerd Steering Committee.\n\nIf a maintainer is no longer interested in or cannot perform the duties\nlisted above, they should move themselves to emeritus status. If necessary,\nthis can also occur through the decision-making process outlined below.\n\n### Becoming a maintainer\n\nAnyone can become a Linkerd maintainer. Maintainers should be extremely\nproficient in Go and/or Rust; have relevant domain expertise; have the time\nand ability to meet the maintainer expectations above; and demonstrate the\nability to work with the existing maintainers and project processes.\n\nTo become a maintainer, start by expressing interest to existing maintainers.\nExisting maintainers will then ask you to demonstrate the qualifications\nabove by contributing PRs, doing code reviews, and other such tasks under\ntheir guidance. After several months of working together, maintainers will\ndecide whether to grant maintainer status.\n\n## Project decision-making process\n\nIdeally, all project decisions are resolved by consensus of maintainers and\ndirectors. If this is not possible, a vote will be called. The voting process is\na simple majority in which each maintainer and director receives one vote.\n\n[coc]: https://github.com/linkerd/linkerd/wiki/Linkerd-code-of-conduct\n[contrib]: https://github.com/linkerd/linkerd2/blob/main/CONTRIBUTING.md\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 1.14453125,
          "content": "# Maintainers\n\nThe Linkerd maintainers are:\n\n* Oliver Gould <ver@buoyant.io> @olix0r\n* Alejandro Pedraza <alejandro@buoyant.io> @alpeb\n* Alex Leong <alex@buoyant.io> @adleong\n* Matei David <matei@buoyant.io> @mateiidavid\n* Zahari Dichev <zahari@buoyant.io> @zaharidichev\n\n## Directors\n\nThe Linkerd directors are:\n\n* William Morgan <william@buoyant.io> @wmorgan\n\n## Steering Committee\n\nThe Linkerd Steering Committee members are:\n\n* Steve Gray (ZeroFlucs) @steve-gray\n* Christian Hüning (BWI) @christianhuening\n* Dan Williams (LoveHolidays) @dwilliams782\n\n## Emeriti\n\nFormer maintainers include:\n\n* Andrew Seigner <siggy@buoyant.io> @siggy\n* Kevin Ingleman <ki@buoyant.io> @klingerf\n* Risha Mars <mars@buoyant.io> @rmars\n* Hema Lee <Hemalekha.Lee@nordstrom.com> @hemakl\n* Tarun Pothulapati <tarun@buoyant.io> @pothulapati\n* Kevin Leimkuhler @kleimkuhler\n* Steve Jenson @stevej\n* Eliza Weisman <eliza@buoyant.io> @hawkw\n\n<!--\n# Adding a new maintainer\n\n* Submit a PR modifying this file\n* Obtain approvals per GOVERNANCE.md\n* Invite maintainer to\n  https://github.com/orgs/linkerd/teams/maintainers/members\n* Invite maintainer to https://github.com/orgs/linkerd/people\n-->\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8515625,
          "content": "# Linkerd\n\n![Linkerd][logo]\n\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/4629/badge)](https://bestpractices.coreinfrastructure.org/projects/4629)\n[![GitHub Actions Status][github-actions-badge]][github-actions]\n[![GitHub license](https://img.shields.io/github/license/linkerd/linkerd2.svg)](LICENSE)\n[![Go Report Card][go-report-card-badge]][go-report-card]\n[![Go Reference][go-doc-badge]][go-doc]\n[![Slack Status][slack-badge]][slack]\n\n:balloon: Welcome to Linkerd! :wave:\n\nLinkerd is an ultralight, security-first service mesh for Kubernetes. Linkerd\nadds critical security, observability, and reliability features to your\nKubernetes stack with no code change required.\n\nLinkerd is a Cloud Native Computing Foundation ([CNCF][cncf]) project.\n\n## Repo layout\n\nThis is the primary repo for the Linkerd 2.x line of development.\n\nThe complete list of Linkerd repos is:\n\n* [linkerd2][linkerd2]: Main Linkerd 2.x repo, including control plane and CLI\n* [linkerd2-proxy][proxy]: Linkerd 2.x data plane proxy\n* [linkerd2-proxy-api][proxy-api]: Linkerd 2.x gRPC API bindings\n* [linkerd][linkerd1]: Linkerd 1.x\n* [website][linkerd-website]: linkerd.io website (including docs for 1.x and\n  2.x)\n\n## Quickstart and documentation\n\nYou can run Linkerd on any modern Kubernetes cluster in a matter of seconds.\nSee the [Linkerd Getting Started Guide][getting-started] for how.\n\nFor more comprehensive documentation, start with the [Linkerd\ndocs][linkerd-docs]. (The doc source code is available in the\n[website][linkerd-website] repo.)\n\n## Working in this repo\n\n[`BUILD.md`](BUILD.md) includes general information on how to work in this repo.\n\nWe :heart: pull requests! See [`CONTRIBUTING.md`](CONTRIBUTING.md) for info on\ncontributing changes.\n\n## Get involved\n\n* Join Linkerd's [user mailing list][linkerd-users], [developer mailing\n  list][linkerd-dev], and [announcements mailing list][linkerd-announce].\n* Follow [@Linkerd][twitter] on Twitter.\n* Join the [Linkerd Slack][slack].\n\n## Steering Committee meetings\n\nWe host regular online meetings for the Linkerd Steering Committee. All are\nwelcome to attend, but audio and video participation is limited to Steering\nCommittee members and maintainers. These meetings are currently scheduled on an\nad-hoc basis and announced on the [linkerd-users][linkerd-users] mailing list.\n\n* [Zoom link](https://zoom.us/my/cncflinkerd)\n* [Minutes from previous meetings](https://docs.google.com/document/d/1GDNM5eosiyjVDo6YHXBMsvlpyzUldgg-XLMNzf7I404/edit)\n* [Recordings from previous meetings](https://www.youtube.com/playlist?list=PLI9FkLPXDscBHP91Ud3lyJScI4ZCjRG6F)\n\n## Code of Conduct\n\nThis project is for everyone. We ask that our users and contributors take a few\nminutes to review our [Code of Conduct][CoC].\n\n## Security\n\nSee [SECURITY.md](SECURITY.md) for our security policy, including how to report\nvulnerabilities.\n\nLinkerd undergoes periodic third-party security audits and we\n[publish the results here](https://github.com/linkerd/linkerd2/tree/main/audits).\n\n## License\n\nCopyright 2023 the Linkerd Authors. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthese files except in compliance with the License. You may obtain a copy of the\nLicense at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n\n<!-- refs -->\n[github-actions]: https://github.com/linkerd/linkerd2/actions\n[github-actions-badge]: https://github.com/linkerd/linkerd2/actions/workflows/actions.yml/badge.svg\n[cncf]: https://www.cncf.io/\n[CoC]: https://github.com/linkerd/linkerd/wiki/Linkerd-code-of-conduct\n[getting-started]: https://linkerd.io/2/getting-started/\n[go-report-card]: https://goreportcard.com/report/github.com/linkerd/linkerd2\n[go-report-card-badge]: https://goreportcard.com/badge/github.com/linkerd/linkerd2\n[go-doc-badge]: https://pkg.go.dev/badge/github.com/linkerd/linkerd2.svg\n[go-doc]: https://pkg.go.dev/github.com/linkerd/linkerd2\n[linkerd1]: https://github.com/linkerd/linkerd\n[linkerd2]: https://github.com/linkerd/linkerd2\n[linkerd-announce]: https://lists.cncf.io/g/cncf-linkerd-announce\n[linkerd-dev]: https://lists.cncf.io/g/cncf-linkerd-dev\n[linkerd-docs]: https://linkerd.io/2/overview/\n[linkerd-users]: https://lists.cncf.io/g/cncf-linkerd-users\n[linkerd-website]: https://github.com/linkerd/website\n[logo]: https://user-images.githubusercontent.com/9226/33582867-3e646e02-d90c-11e7-85a2-2e238737e859.png\n[proxy]: https://github.com/linkerd/linkerd2-proxy\n[proxy-api]: https://github.com/linkerd/linkerd2-proxy-api\n[slack-badge]: http://slack.linkerd.io/badge.svg\n[slack]: http://slack.linkerd.io\n[twitter]: https://twitter.com/linkerd\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 5.3564453125,
          "content": "# Linkerd2 Release\n\nThis document contains instructions for releasing Linkerd2.\n\n## 1. Bump the proxy version\n\nDetermine the commit SHA of the `linkerd2-proxy` repo to be included in the\nrelease. If\n[proxy-version](https://github.com/linkerd/linkerd2/blob/main/.proxy-version)\nis already at the desired SHA, skip to step 2.\n\nIf updating to `linkerd-proxy` HEAD, note the commit SHA at\n[latest.txt](https://build.l5d.io/linkerd2-proxy/latest.txt) (Look for\n`linkerd2-proxy-<linkerd2-proxy-sha>.tar.gz`).\n\nCreate a new branch in the `linkerd2` repo, `username/proxy-version-bump`.\n\nThen run:\n\n```bash\nbin/git-commit-proxy-version <linkerd2-proxy-sha>\n```\n\nThe script will update the `.proxy-version` file. Submit a PR to obtain reviews\nand approval.\n\n## 2. Bump the proxy-init or CNI plugin version\n\nIf the `linkerd2/proxy-init` or `linkerd2/cni-plugin` projects have a new\nrelease (which is rare), the following updates are needed:\n\n- `pkg/version/version.go` (this also implies changes in unit test fixtures)\n\n   ```go\n   var ProxyInitVersion = \"v2.3.0\"\n   var LinkerdCNIVersion = \"v1.4.0\"\n   ```\n\n- `charts/linkerd-control-plane/values.yaml`\n\n   Upgrade the version in `global.proxyInit.image.version`\n\n- `charts/linkerd2-cni/values.yaml`\n\n   Upgrade the version in `image.version`\n\nCreate a new branch in the `linkerd2` repo,\n`username/proxy-init-version-bump`.\n\nOpen a pull request that includes the changes.\n\n## 3. Optional: push images\n\nTo facilitate testing you might want to publish the docker images to your\nprivate repo.\n\nFirst tag the release:\n\n```bash\ngit tag edge-2024.3.1\n```\n\nDo *not* push this tag just yet, to avoid triggering the actual public release.\n\nMake sure you're logged into your Github docker registry:\n\n```bash\necho \"$GH_PAT\" | docker login ghcr.io -u $GH_USERNAME --password-stdin\n```\n\nWhere `$GH_USERNAME` is your Github username and `$GH_PAT` is a personal access\ntoken with enough permissions for creating Github packages.\n\nThen this will build the images and also push them to your personal Github\ndocker registry (note this implies you've already set docker buildx in your\nmachine, if not follow [these\ninstructions](https://github.com/docker/buildx#installing)):\n\n```bash\nDOCKER_REGISTRY=ghcr.io/$GH_USERNAME DOCKER_MULTIARCH=1 DOCKER_PUSH=1 bin/docker-build\n```\n\nIf this is the first time you push those images into your personal registry,\nyou'll need to go to `https://github.com/$GH_USERNAME?tab=packages` and access\nthe settings for each image in order to make them public.\n\nAfter having successfully pushed those images, delete the tag so you can create\nit again and push it for good as explained in the following step.\n\nNow testers can pull the CLI binaries through this:\n\n```bash\nDOCKER_REGISTRY=ghcr.io/$GH_USERNAME bin/docker-pull-binaries edge-2024.3.1\n```\n\nwhich will dump them under the `target/release` directory.\n\nBesides using those particular binaries to install Linkerd, they'll also need to\npoint to your registry using the `--registry` flag.\n\n```bash\ntarget/release/linkerd2-cli-edge-2024.3.1-darwin install --registry ghcr.io/$GH_USERNAME -f ~/tmp/linkerd-overrides.yml\n```\n\n## 4. Tag the release\n\n- Checkout the `main` branch\n- Tag, e.g. `edge-24.3.1`\n- Push the tag\n\nThat will kick off a CI Release workflow run that will:\n\n- Build and push the docker images for the tag that was created\n- Run the k3d integration tests in the Github actions VMs themselves\n- Run a k3d integration test on a separate ARM64 host\n- Create a release in Github, and upload the CLI binaries with their checksums\n- Dispatch an event caught by the website repo that triggers a website rebuild\n  which will update the edge version in the website\n- Retrieve the installation script from [run.linkerd.io](https://run.linkerd.io)\n  and verify it installs the current version being released\n- Deploy the updated helm charts\n\nYou can locate the CI run [here](https://github.com/linkerd/linkerd2/actions).\n\n## 5. Do a walkthrough verification of the release\n\nGo to the release page in Github and check that the notes are properly\nformatted and the files are there.  Download the file for your system along\nwith its checksum, verify the checksum matches, and do a basic sanity check:\n\n```bash\nlinkerd version\nlinkerd install | kubectl apply -f -\nlinkerd check\nlinkerd viz install | kubectl apply -f -\nlinkerd viz check\nlinkerd dashboard\n```\n\n## 6. Send the announcement email\n\nSend an email to <cncf-linkerd-dev@lists.cncf.io>,\n<cncf-linkerd-users@lists.cncf.io>, and <cncf-linkerd-announce@lists.cncf.io>,\nannouncing the release.\n\nSubscribe to these mailing lists if you aren't on them:\n\n- [linkerd-users](https://lists.cncf.io/g/cncf-linkerd-users/join)\n- [linkerd-announce](https://lists.cncf.io/g/cncf-linkerd-announce/join)\n- [linkerd-dev](https://lists.cncf.io/g/cncf-linkerd-dev/join)\n\nMake sure to include the install instructions.\n\n> To install the CLI for this edge release, run:\n<!-- markdownlint-disable MD034 -->\n>\n> curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install-edge | sh\n>\n> And please check the [upgrade\ninstructions](https://linkerd.io/2.12/tasks/upgrade/) for detailed steps on how\nto upgrade your cluster using either the CLI or Helm.\n\nAftewards, include the full release notes. Liberally apply emoji. ⭐\n\n## 7. Send an announcement to Linkerd Slack's #announcements channel\n\nEnsure that you send a brief summary of the release in Linkerd Slack's\n[#announcement](https://linkerd.slack.com/messages/C0JV5E7BR) channel.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.470703125,
          "content": "# Linkerd Security Policy\n\nSecurity is critical to Linkerd and we take it very seriously. Not only must\nLinkerd be secure, it must improve the security of the system around it. To this\nend, every aspect of Linkerd's development is done with security in mind.\n\nLinkerd makes use of a variety of tools to ensure software security, including:\n\n* Code review\n* Dependency hygiene and supply chain security via\n  [dependabot](https://docs.github.com/en/code-security/dependabot)\n* [Fuzz testing](https://linkerd.io/2021/05/07/fuzz-testing-for-linkerd/)\n* [Third-party security audits](#security-audits)\n* And other forms of manual, static, and dynamic checking.\n\n## Reporting a Vulnerability\n\nIf you believe you've found a security problem in Linkerd, whether in the\ncontrol plane, proxy, or any other component, please file a [GitHub security\nadvisory on the linkerd2\nrepo](https://github.com/linkerd/linkerd2/security/advisories). The maintainers\nwill diagnose the severity of the issue and determine how to address the issue.\n\n## Criticality Policy\n\nIn general, critical issues that affect Linkerd's security posture or that\nreduce its ability to provide security for users will receive immediate\nattention and be fixed as quickly as possible.\n\nIssues that do not affect Linkerd's security posture and that don't reduce its\nability to provide security for users may not be immediately addressed. For\nexample, CVEs in underlying dependencies that don't actually affect Linkerd may\nnot be immediately addressed.\n\nOnce merged into main, security updates will be available in the next edge\nrelease produced.\n\n## Security Audits\n\nThe CNCF provides periodic third-party security audits. We publish unredacted\nreports in the [audits/](audits/) subdirectory.\n\n## Security Advisories\n\nWhen vulnerabilities in Linkerd itself are discovered and corrected, we will\nissue a security advisory, describing the problem and providing a pointer to the\nfix. These will be announced to our\n[cncf-linkerd-announce](https://lists.cncf.io/g/cncf-linkerd-announce) mailing\nlist.\n\nThere are some situations where we may delay issuing a security advisory. For\nexample, when a vulnerability is found during a code audit or when several\nissues are likely to be spotted and fixed in the near future, the maintainers\nmay delay the release of a Security Advisory so that we can issue a single\ncomprehensive Security Advisory covering multiple vulnerabilities. Communication\nwith vendors and other distributions shipping the same code may also cause these\ndelays.\n"
        },
        {
          "name": "STEERING.md",
          "type": "blob",
          "size": 1.916015625,
          "content": "# Linkerd Steering Committee Charter\n\nThe goal of the Linkerd Steering Committee is to ensure that Linkerd meets the\nneeds of its current and future users. The Steering Committee represents the\nvoice of the user, and works with the Linkerd maintainers and directors to help\nguide development efforts towards solving concrete and immediate problems for\nLinkerd adopters.\n\n## Responsibilities\n\nThe Steering Committee’s responsibilities are to:\n\n1. Provide feedback to project maintainers about Linkerd's featureset, UX, and\n   operational model.\n2. Assist Linkerd maintainers in prioritizing upcoming roadmap items and\n   planned work.\n3. Represent the \"voice of the Linkerd user\" both internally and to the broader\n   community.\n4. Provide neutral mediation for non-technical disputes.\n5. Develop and maintain a project continuity plan.\n\n## Membership\n\nThe Steering Committee comprises at most 7 people. To be eligible for\nmembership in the Steering Committee, you must:\n\n1. Be currently responsible for a production Linkerd deployment of non-trivial\n   size, or have been responsible for such a deployment within the past two\n   years.\n2. Be willing and able to attend regularly-scheduled Steering Committee\n   meetings.\n3. Abide by Linkerd's Code of Conduct.\n\nCandidates for membership will be nominated by current Steering Committee\nmembers or by Linkerd maintainers and directors. Once nominated, inclusion in\nthe Steering Committee will be determined by the normal project decision-making\nprocess.\n\nMembership expires if any of the eligibility conditions is unmet, or after one\nyear. Members may seek reinstatement immediately in accordance with the rules\nabove.\n\n## Meetings\n\nMeetings will happen periodically not less than once a quarter. Recordings and\nminutes will be posted publicly.\n\n## Changes to this charter\n\nChanges to this charter must be approved by a majority of Steering Committee\nmembers and a majority of Linkerd maintainers and directors.\n"
        },
        {
          "name": "TEST.md",
          "type": "blob",
          "size": 8.810546875,
          "content": "# Linkerd2 Test Guide\n\nThis document covers how to run all of the tests that are present in the\nLinkerd2 repo. Most of these tests are run in CI, but you can use the\ninstructions here to run the tests from source. For more information about\nworking in this repo, see the [BUILD.md](BUILD.md) guide.\n\nNote that all shell commands in this guide are expected to be run from the root\nof this repo, unless otherwise indicated by a `cd` command.\n\n## Table of contents\n\n- [Unit tests](#unit-tests)\n  - [Go](#go)\n  - [JavaScript](#javascript)\n  - [Shell](#shell)\n- [Integration tests](#integration-tests)\n  - [Prerequisites](#prerequisites)\n  - [Running tests](#running-tests)\n  - [Writing tests](#writing-tests)\n\n## Unit tests\n\n### Go\n\nTo run tests:\n\n```bash\ngo test -cover -race ./...\n```\n\nTo investigate code coverage:\n\n```bash\ncov=`mktemp`\ngo test -coverprofile=$cov ./...\ngo tool cover -html=$cov\n```\n\n#### Pretty-printed diffs for templated text\n\nWhen running `go test`, mismatched text is usually displayed as a compact diff.\nIf you prefer to see the full text of the mismatch with colorized output, you\ncan set the `LINKERD_TEST_PRETTY_DIFF` environment variable or run `go test\n./cli/cmd/... --pretty-diff`.\n\n#### Updating templates\n\nWhen kubernetes templates change, several test fixtures usually need to be\nupdated (in `cli/cmd/testdata/*.golden`). These golden files can be\nautomatically regenerated with the command:\n\n```sh\ngo test ./cli/cmd/... --update\n```\n\n### JavaScript\n\nJavaScript dependencies are managed via [yarn](https://yarnpkg.com/) and\n[webpack](https://webpack.js.org/). We use\n[jest](https://facebook.github.io/jest) as our test runner.\n\nTo fetch dependencies and run tests, run:\n\n```bash\nbin/web setup\nbin/web test\n\n# or alternatively:\n\ncd web/app\nyarn && NODE_ENV=test yarn webpack\nyarn jest \"$*\"\n```\n\nFor faster testing, run a subset of the tests by passing flags to jest.\n\nRun tests on files that have changed since the last commit:\n\n```bash\nbin/web test -o\n```\n\nRun tests that match a spec name (regex):\n\n```bash\nbin/web test -t name-of-spec\n```\n\nRun watch mode:\n\n```bash\nbin/web test --watch # runs -o by default (tests only files changed since last commit)\nbin/web test --watchAll # runs all tests after a change to a file\n```\n\n### Shell\n\n```bash\nbin/shellcheck -x bin/*\n```\n\n## Integration tests\n\nThe `test/integration` directory contains a test suite that can be run to\nvalidate Linkerd functionality via a series of end-to-end tests.\n\n### Prerequisites\n\n#### Prerequisites for default behavior\n\nThe integration tests will configure their own k3s clusters by default (using\nthe k3d helper). There are no prerequisites for this test path.\n\n#### Prerequisites for existing cluster\n\nIf integration tests should run on an existing Kubernetes cluster, then the\n`--skip-cluster-create` flag should be passed. This will disable the tests from\ncreating their own clusters and instead use the current Kubernetes context.\n\nIn this case, ensure the following:\n\n- The Linkerd docker images you're trying to test have been built and are\n  accessible to the Kubernetes cluster to which you are deploying.\n  If you're testing locally through a KinD or k3d cluster and don't want to push\n  the images to a public registry, you can call `bin/image-load --kind|k3d` to\n  load all the Linkerd images into those clusters.\n- The `kubectl` CLI has been configured to talk to that Kubernetes cluster\n\n### Running tests\n\nYou can use the `bin/tests` script to run one or all of the tests in the test\nsuite.\n\nThe `bin/tests` script requires an absolute path to a `linkerd` binary to test.\n\nOptional flags can be passed that change the testing behavior:\n\n- `--name`: Pass an argument with this flag to specify a specific test that\n  should be run; all tests (except some special ones, see below) are run in the\n  absence of this flag. Valid test names are included in the `bin/tests --help`\n  output\n- `--skip-cluster-create`: Skip KinD cluster creation for each test and use an\n  existing Kubernetes cluster\n- `--images`: (Primarily for CI) Loads images from the `image-archive/`\n  directory into the KinD clusters created for each test\n\nView full help text:\n\n```bash\nbin/tests --help\n```\n\nRun individual test:\n\n```bash\nbin/tests --name upgrade /path/to/linkerd\n```\n\n#### Testing against the installed version of the CLI\n\nYou can run tests using your installed version of the `linkerd` CLI. For\nexample, to run the full suite of tests using your installed CLI, run:\n\n```bash\nbin/tests `which linkerd`\n```\n\nIf using an existing cluster to run tests, the resources can be cleaned up\nmanually with:\n\n```bash\nbin/test-cleanup /path/to/linkerd\n```\n\n#### Testing against a locally-built version of the CLI\n\nYou can also test a locally-built version of the `linkerd` CLI.\n\nFirst build all of the Linkerd images by running:\n\n```bash\nbin/docker-build\n```\n\nThat command also copies the corresponding `linkerd` binaries into the\n`target/cli` directory, and you can use the `bin/linkerd` script to load those\nbinaries when running tests. To run tests using your local binary, run:\n\n```bash\nbin/tests $PWD/bin/linkerd\n```\n\n**Note**: As stated above, if running tests in an existing KinD cluster by\npassing `--skip-cluster-create`, `bin/kind-load` must be run so that the images are\navailable to the cluster\n\n#### Special tests: cluster-domain, cni-calico-deep and multicluster\n\nWhen running `bin/tests` without specifying `--name` all tests except for\n`cluster-domain`, `cni-calico-deep` and `multicluster` are run, because these require\ncreating the clusters with special configurations. To run any of these tests,\ninvoke them explicitly with `--name` for the script to create the cluster (using\nk3d) and trigger the test:\n\n- `bin/tests --name cluster-domain`: This simply creates the cluster with a\n  cluster domain setting different than the default `cluster.local`, then\n  installs Linkerd and triggers some smoke tests.\n- `bin/tests --name cni-calico-deep`: This installs a cluster replacing the\n  default CNI plugin (which for k3s is Flannel) with the Calico CNI plugin, then\n  installs the Linkerd CNI plugin and the Linkerd control plane, and finally\n  triggers the full suite of deep tests.\n- `bin/tests --name multicluster`: Two k3d clusters are installed each one with\n  separate instances of Linkerd sharing the same trust root. Then the\n  multicluster component is installed, both clusters are linked together and a\n  test ensures exported services can be reached between the two clusters.\n\n#### Testing the dashboard\n\nIf you're new to the repo, make sure you've installed web dependencies via\n[Yarn](https://yarnpkg.com):\n\n```bash\nbrew install yarn # if you don't already have yarn\nbin/web setup\n```\n\nThen start up the dashboard at `localhost:7777`. You can do that in one of two\nways:\n\n```bash\n# standalone\nbin/web run\n```\n\nOR\n\n```bash\n# with webpack-dev-server\nbin/web dev\n```\n\n## Writing tests\n\nTo add a new test, create a new subdirectory inside the `test/` directory.\nConfiguration files, such as Kubernetes configs, should be placed inside a\n`testdata/` directory inside the test subdirectory that you created. Then create\na test file in the subdirectory that's suffixed with `_test.go`. This test file\nwill be run automatically by the test runner script.\n\nThe tests rely heavily on the test helpers that are defined in the `testutil/`\ndirectory. For a complete description of how to use the test helpers to write\nyour own tests, view the `testutil` package's godoc, with:\n\n```bash\ngodoc github.com/linkerd/linkerd2/testutil | less\n```\n\n## Scale tests\n\nThe scale tests deploy a single Linkerd control-plane, and then scale up\nmultiple sample apps across multiple replicas across multiple namespaces.\n\nPrerequisites:\n\n- a `linkerd` CLI binary\n- Linkerd Docker images associated with the `linkerd` CLI binary\n- a Kubernetes cluster with sufficient resources to run 100s of pods\n\n## Run tests\n\n```bash\nbin/test-scale\nusage: test-scale /path/to/linkerd [namespace]\n```\n\nFor example, to test a newly built Linkerd CLI:\n\n```bash\nbin/test-scale `pwd`/bin/linkerd\n```\n\n## Cleanup\n\n```bash\nbin/test-cleanup /path/to/linkerd\n```\n\n## Test against multiple cloud providers\n\nThe [`bin/test-clouds`](bin/test-clouds) script runs the integration tests\nagainst 4 cloud providers:\n\n- Amazon (EKS)\n- DigitalOcean (DO)\n- Google (GKE)\n- Microsoft (AKS)\n\nThis script assumes you have a working Kubernetes cluster set up on each Cloud\nprovider, and that Kubernetes contexts are configured via environment variables.\n\nFor example:\n\n```bash\nexport AKS=my-aks-cluster\nexport DO=do-nyc1-my-cluster\nexport EKS=arn:aws:eks:us-east-1:123456789012:cluster/my-cluster\nexport GKE=gke_my-project_us-east1-b_my-cluster\n```\n\nFor more information on configuring access to multiple clusters, see:\n<https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#define-clusters-users-and-contexts>\n\n```bash\nbin/test-clouds `pwd`/bin/linkerd\n```\n\nTo cleanup all integration tests:\n\n```bash\nbin/test-clouds-cleanup\n```\n"
        },
        {
          "name": "audits",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "charts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "controller",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 1.837890625,
          "content": "[graph]\ntargets = [\n    { triple = \"x86_64-unknown-linux-gnu\" },\n    { triple = \"aarch64-unknown-linux-gnu\" },\n    { triple = \"armv7-unknown-linux-gnu\" },\n]\n\n[advisories]\ndb-path = \"~/.cargo/advisory-db\"\ndb-urls = [\"https://github.com/rustsec/advisory-db\"]\nignore = [\n    # Pending kube update\n    \"RUSTSEC-2024-0384\",\n    \"RUSTSEC-2024-0388\",\n]\n\n[licenses]\nallow = [\n    \"Apache-2.0\",\n    \"BSD-2-Clause\",\n    \"BSD-3-Clause\",\n    \"ISC\",\n    \"MIT\",\n    \"Unicode-3.0\",\n]\nconfidence-threshold = 0.8\nexceptions = [\n    { allow = [\n        \"ISC\",\n        \"MIT\",\n        \"OpenSSL\",\n    ], name = \"ring\", version = \"*\" },\n\n    { allow = [\n        \"Zlib\",\n    ], name = \"adler32\" },\n]\n\n[[licenses.clarify]]\nname = \"ring\"\nversion = \"*\"\nexpression = \"MIT AND ISC AND OpenSSL\"\nlicense-files = [{ path = \"LICENSE\", hash = 0xbd0eed23 }]\n\n[bans]\nmultiple-versions = \"deny\"\n# Wildcard dependencies are used for all workspace-local crates.\nwildcards = \"allow\"\nhighlight = \"all\"\nskip = [\n    # `rustls-pemfile` and `k8s-openapi` depend on versions of `base64` that\n    # have diverged significantly.\n    { name = \"base64\" },\n    # `tower-http` (a transitive dep via `kubert`) depends on v2.x of `bitflags`,\n    # while pretty much the entire rest of the world is still on v1.x\n    { name = \"bitflags\", version = \"1.0\" },\n    # https://github.com/hawkw/matchers/pull/4\n    { name = \"regex-automata\", version = \"0.1\" },\n    { name = \"regex-syntax\", version = \"0.6\" },\n]\nskip-tree = [\n    # `serde_json` and `h2` depend on diverged versions of `indexmap` (2.0.x and\n    # 1.9.x, respectively)\n    { name = \"indexmap\" },\n    # thiserror v2 is still making its way through the ecosystem\n    { name = \"thiserror\", version = \"1\" },\n]\n\n[sources]\nunknown-registry = \"deny\"\nunknown-git = \"deny\"\nallow-registry = [\"https://github.com/rust-lang/crates.io-index\"]\nallow-git = []\n\n[sources.allow-org]\ngithub = []\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 7.7109375,
          "content": "module github.com/linkerd/linkerd2\n\ngo 1.23.0\n\nrequire (\n\tcontrib.go.opencensus.io/exporter/ocagent v0.7.0\n\tgithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24\n\tgithub.com/bombsimon/logrusr/v4 v4.1.0\n\tgithub.com/briandowns/spinner v0.0.0-20190212173954-5cf08d0ac778\n\tgithub.com/clarketm/json v1.15.7\n\tgithub.com/emicklei/proto v1.14.0\n\tgithub.com/evanphx/json-patch v5.9.0+incompatible\n\tgithub.com/fatih/color v1.18.0\n\tgithub.com/fsnotify/fsnotify v1.8.0\n\tgithub.com/go-openapi/spec v0.21.0\n\tgithub.com/go-test/deep v1.1.1\n\tgithub.com/golang/protobuf v1.5.4\n\tgithub.com/gorilla/websocket v1.5.3\n\tgithub.com/grantae/certinfo v0.0.0-20170412194111-59d56a35515b\n\tgithub.com/grpc-ecosystem/go-grpc-prometheus v1.2.0\n\tgithub.com/imdario/mergo v0.3.16\n\tgithub.com/julienschmidt/httprouter v1.3.0\n\tgithub.com/linkerd/linkerd2-proxy-api v0.15.0\n\tgithub.com/mattn/go-isatty v0.0.20\n\tgithub.com/mattn/go-runewidth v0.0.16\n\tgithub.com/nsf/termbox-go v1.1.1\n\tgithub.com/patrickmn/go-cache v2.1.0+incompatible\n\tgithub.com/pkg/browser v0.0.0-20170505125900-c90ca0c84f15\n\tgithub.com/prometheus/client_golang v1.20.5\n\tgithub.com/prometheus/client_model v0.6.1\n\tgithub.com/prometheus/common v0.61.0\n\tgithub.com/sergi/go-diff v1.3.1\n\tgithub.com/shurcooL/vfsgen v0.0.0-20230704071429-0000e147ea92\n\tgithub.com/sirupsen/logrus v1.9.3\n\tgithub.com/spf13/cobra v1.8.1\n\tgithub.com/spf13/pflag v1.0.5\n\tgo.opencensus.io v0.24.0\n\tgolang.org/x/net v0.34.0\n\tgolang.org/x/tools v0.29.0\n\tgoogle.golang.org/grpc v1.69.2\n\tgoogle.golang.org/grpc/cmd/protoc-gen-go-grpc v1.5.1\n\tgoogle.golang.org/protobuf v1.36.2\n\tgopkg.in/yaml.v2 v2.4.0\n\thelm.sh/helm/v3 v3.16.4\n\tk8s.io/api v0.32.0\n\tk8s.io/apiextensions-apiserver v0.32.0\n\tk8s.io/apimachinery v0.32.0\n\tk8s.io/client-go v0.32.0\n\tk8s.io/code-generator v0.32.0\n\tk8s.io/endpointslice v0.32.0\n\tk8s.io/klog/v2 v2.130.1\n\tk8s.io/kube-aggregator v0.32.0\n\tk8s.io/utils v0.0.0-20241104100929-3ea5e8cea738\n\tsigs.k8s.io/gateway-api v0.8.1\n\tsigs.k8s.io/yaml v1.4.0\n)\n\nrequire (\n\tdario.cat/mergo v1.0.1 // indirect\n\tgithub.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 // indirect\n\tgithub.com/BurntSushi/toml v1.3.2 // indirect\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/semver/v3 v3.3.0 // indirect\n\tgithub.com/Masterminds/sprig/v3 v3.3.0 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/blang/semver/v4 v4.0.0 // indirect\n\tgithub.com/census-instrumentation/opencensus-proto v0.4.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/containerd/containerd v1.7.23 // indirect\n\tgithub.com/containerd/errdefs v0.3.0 // indirect\n\tgithub.com/containerd/log v0.1.0 // indirect\n\tgithub.com/containerd/platforms v0.2.1 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.4 // indirect\n\tgithub.com/cyphar/filepath-securejoin v0.3.4 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/distribution/reference v0.6.0 // indirect\n\tgithub.com/docker/cli v25.0.1+incompatible // indirect\n\tgithub.com/docker/distribution v2.8.3+incompatible // indirect\n\tgithub.com/docker/docker v26.1.5+incompatible // indirect\n\tgithub.com/docker/docker-credential-helpers v0.7.0 // indirect\n\tgithub.com/docker/go-connections v0.5.0 // indirect\n\tgithub.com/docker/go-metrics v0.0.1 // indirect\n\tgithub.com/emicklei/go-restful/v3 v3.11.2 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/fxamacker/cbor/v2 v2.7.0 // indirect\n\tgithub.com/go-errors/errors v1.4.2 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.21.0 // indirect\n\tgithub.com/go-openapi/jsonreference v0.21.0 // indirect\n\tgithub.com/go-openapi/swag v0.23.0 // indirect\n\tgithub.com/gobwas/glob v0.2.3 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect\n\tgithub.com/google/btree v1.0.1 // indirect\n\tgithub.com/google/gnostic-models v0.6.8 // indirect\n\tgithub.com/google/go-cmp v0.6.0 // indirect\n\tgithub.com/google/gofuzz v1.2.0 // indirect\n\tgithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/gorilla/mux v1.8.0 // indirect\n\tgithub.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2 v2.20.0 // indirect\n\tgithub.com/huandu/xstrings v1.5.0 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/jpillora/backoff v1.0.0 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/klauspost/compress v1.17.9 // indirect\n\tgithub.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/moby/locker v1.0.1 // indirect\n\tgithub.com/moby/spdystream v0.5.0 // indirect\n\tgithub.com/moby/term v0.5.0 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/monochromegane/go-gitignore v0.0.0-20200626010858-205db1a8cc00 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f // indirect\n\tgithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.1.0 // indirect\n\tgithub.com/peterbourgon/diskv v2.0.1+incompatible // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/rivo/uniseg v0.4.4 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/shopspring/decimal v1.4.0 // indirect\n\tgithub.com/shurcooL/httpfs v0.0.0-20230704072500-f1e31cf0ba5c // indirect\n\tgithub.com/spf13/cast v1.7.0 // indirect\n\tgithub.com/stretchr/objx v0.5.1 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb // indirect\n\tgithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 // indirect\n\tgithub.com/xeipuuv/gojsonschema v1.2.0 // indirect\n\tgithub.com/xlab/treeprint v1.2.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.53.0 // indirect\n\tgo.opentelemetry.io/otel v1.31.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.31.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.31.0 // indirect\n\tgo.starlark.net v0.0.0-20230525235612-a134d8f9ddca // indirect\n\tgolang.org/x/crypto v0.32.0 // indirect\n\tgolang.org/x/mod v0.22.0 // indirect\n\tgolang.org/x/oauth2 v0.24.0 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/sys v0.29.0 // indirect\n\tgolang.org/x/term v0.28.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgolang.org/x/time v0.7.0 // indirect\n\tgoogle.golang.org/api v0.143.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20241015192408-796eee8c2d53 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241015192408-796eee8c2d53 // indirect\n\tgopkg.in/evanphx/json-patch.v4 v4.12.0 // indirect\n\tgopkg.in/inf.v0 v0.9.1 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\tk8s.io/cli-runtime v0.31.3 // indirect\n\tk8s.io/component-base v0.32.0 // indirect\n\tk8s.io/gengo/v2 v2.0.0-20240911193312-2b36238f13e9 // indirect\n\tk8s.io/kube-openapi v0.0.0-20241105132330-32ad38e42d3f // indirect\n\toras.land/oras-go v1.2.5 // indirect\n\tsigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3 // indirect\n\tsigs.k8s.io/kustomize/api v0.17.2 // indirect\n\tsigs.k8s.io/kustomize/kyaml v0.17.1 // indirect\n\tsigs.k8s.io/structured-merge-diff/v4 v4.4.2 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 73.3310546875,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=\ncloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=\ncloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.45.1/go.mod h1:RpBamKRgapWJb87xiFSdk4g1CME7QZg3uwTez+TSTjc=\ncloud.google.com/go v0.46.3/go.mod h1:a6bKKbmY7er1mI7TEI4lsAkts/mkhTSZK8w33B4RAg0=\ncloud.google.com/go v0.50.0/go.mod h1:r9sluTvynVuxRIOHXQEHMFffphuXHOMZMycpNR5e6To=\ncloud.google.com/go v0.52.0/go.mod h1:pXajvRH/6o3+F9jDHZWQ5PbGhn+o8w9qiu/CffaVdO4=\ncloud.google.com/go v0.53.0/go.mod h1:fp/UouUEsRkN6ryDKNW/Upv/JBKnv6WDthjR6+vze6M=\ncloud.google.com/go v0.56.0/go.mod h1:jr7tqZxxKOVYizybht9+26Z/gUq7tiRzu+ACVAMbKVk=\ncloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=\ncloud.google.com/go/bigquery v1.3.0/go.mod h1:PjpwJnslEMmckchkHFfq+HTD2DmtT67aNFKH1/VBDHE=\ncloud.google.com/go/bigquery v1.4.0/go.mod h1:S8dzgnTigyfTmLBfrtrhyYhwRxG72rYxvftPBK2Dvzc=\ncloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=\ncloud.google.com/go/datastore v1.1.0/go.mod h1:umbIZjpQpHh4hmRpGhH4tLFup+FVzqBi1b3c64qFpCk=\ncloud.google.com/go/pubsub v1.0.1/go.mod h1:R0Gpsv3s54REJCy4fxDixWD93lHJMoZTyQ2kNxGRt3I=\ncloud.google.com/go/pubsub v1.1.0/go.mod h1:EwwdRX2sKPjnvnqCa270oGRyludottCI76h+R3AArQw=\ncloud.google.com/go/pubsub v1.2.0/go.mod h1:jhfEVHT8odbXTkndysNHCcx0awwzvfOlguIAii9o8iA=\ncloud.google.com/go/storage v1.0.0/go.mod h1:IhtSnM/ZTZV8YYJWCY8RULGVqBDmpoyjwiyrjsg+URw=\ncloud.google.com/go/storage v1.5.0/go.mod h1:tpKbwo567HUNpVclU5sGELwQWBDZ8gh0ZeosJ0Rtdos=\ncloud.google.com/go/storage v1.6.0/go.mod h1:N7U0C8pVQ/+NIKOBQyamJIeKQKkZ+mxpohlUTyfDhBk=\ncontrib.go.opencensus.io/exporter/ocagent v0.7.0 h1:BEfdCTXfMV30tLZD8c9n64V/tIZX5+9sXiuFLnrr1k8=\ncontrib.go.opencensus.io/exporter/ocagent v0.7.0/go.mod h1:IshRmMJBhDfFj5Y67nVhMYTTIze91RUeT73ipWKs/GY=\ndario.cat/mergo v1.0.1 h1:Ra4+bf83h2ztPIQYNP99R6m+Y7KfnARDfID+a+vLl4s=\ndario.cat/mergo v1.0.1/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\ndmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 h1:bvDV9vkmnHYOMsOr4WLk+Vo07yKIzd94sVoIqshQ4bU=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24/go.mod h1:8o94RPi1/7XTJvwPpRSzSUedZrtlirdB3r9Z20bi2f8=\ngithub.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 h1:L/gRVlceqvL25UVaW/CKtUDjefjrs0SPonmDGUVOYP0=\ngithub.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/BurntSushi/toml v1.3.2 h1:o7IhLm0Msx3BaB+n3Ag7L8EVlByGnpq14C4YWiu/gL8=\ngithub.com/BurntSushi/toml v1.3.2/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=\ngithub.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=\ngithub.com/Masterminds/goutils v1.1.1 h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=\ngithub.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=\ngithub.com/Masterminds/semver/v3 v3.3.0 h1:B8LGeaivUe71a5qox1ICM/JLl0NqZSW5CHyL+hmvYS0=\ngithub.com/Masterminds/semver/v3 v3.3.0/go.mod h1:4V+yj/TJE1HU9XfppCwVMZq3I84lprf4nC11bSS5beM=\ngithub.com/Masterminds/sprig/v3 v3.3.0 h1:mQh0Yrg1XPo6vjYXgtf5OtijNAKJRNcTdOOGZe3tPhs=\ngithub.com/Masterminds/sprig/v3 v3.3.0/go.mod h1:Zy1iXRYNqNLUolqCpL4uhk6SHUMAOSCzdgBfDb35Lz0=\ngithub.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=\ngithub.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=\ngithub.com/Microsoft/hcsshim v0.11.7 h1:vl/nj3Bar/CvJSYo7gIQPyRWc9f3c6IeSNavBTSZNZQ=\ngithub.com/Microsoft/hcsshim v0.11.7/go.mod h1:MV8xMfmECjl5HdO7U/3/hFVnkmSBjAjmA09d4bExKcU=\ngithub.com/Shopify/logrus-bugsnag v0.0.0-20171204204709-577dee27f20d h1:UrqY+r/OJnIp5u0s1SbQ8dVfLCZJsnvazdBP5hS4iRs=\ngithub.com/Shopify/logrus-bugsnag v0.0.0-20171204204709-577dee27f20d/go.mod h1:HI8ITrYtUY+O+ZhtlqUnD8+KwNPOyugEhfP9fdUIaEQ=\ngithub.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5 h1:0CwZNZbxp69SHPdPJAN/hZIm0C4OItdklCFmMRWYpio=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM=\ngithub.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=\ngithub.com/bombsimon/logrusr/v4 v4.1.0 h1:uZNPbwusB0eUXlO8hIUwStE6Lr5bLN6IgYgG+75kuh4=\ngithub.com/bombsimon/logrusr/v4 v4.1.0/go.mod h1:pjfHC5e59CvjTBIU3V3sGhFWFAnsnhOR03TRc6im0l8=\ngithub.com/briandowns/spinner v0.0.0-20190212173954-5cf08d0ac778 h1:Dmz6bJXocvwkw7BOz4jpyVZReGrkjs+fBDWKn5tBES4=\ngithub.com/briandowns/spinner v0.0.0-20190212173954-5cf08d0ac778/go.mod h1:hw/JEQBIE+c/BLI4aKM8UU8v+ZqrD3h7HC27kKt8JQU=\ngithub.com/bshuster-repo/logrus-logstash-hook v1.0.0 h1:e+C0SB5R1pu//O4MQ3f9cFuPGoOVeF2fE4Og9otCc70=\ngithub.com/bshuster-repo/logrus-logstash-hook v1.0.0/go.mod h1:zsTqEiSzDgAa/8GZR7E1qaXrhYNDKBYy5/dWPTIflbk=\ngithub.com/bugsnag/bugsnag-go v0.0.0-20141110184014-b1d153021fcd h1:rFt+Y/IK1aEZkEHchZRSq9OQbsSzIT/OrI8YFFmRIng=\ngithub.com/bugsnag/bugsnag-go v0.0.0-20141110184014-b1d153021fcd/go.mod h1:2oa8nejYd4cQ/b0hMIopN0lCRxU0bueqREvZLWFrtK8=\ngithub.com/bugsnag/osext v0.0.0-20130617224835-0dd3f918b21b h1:otBG+dV+YK+Soembjv71DPz3uX/V/6MMlSyD9JBQ6kQ=\ngithub.com/bugsnag/osext v0.0.0-20130617224835-0dd3f918b21b/go.mod h1:obH5gd0BsqsP2LwDJ9aOkm/6J86V6lyAXCoQWGw3K50=\ngithub.com/bugsnag/panicwrap v0.0.0-20151223152923-e2c28503fcd0 h1:nvj0OLI3YqYXer/kZD8Ri1aaunCxIEsOst1BVJswV0o=\ngithub.com/bugsnag/panicwrap v0.0.0-20151223152923-e2c28503fcd0/go.mod h1:D/8v3kj0zr8ZAKg1AQ6crr+5VwKN5eIywRkfhyM/+dE=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/census-instrumentation/opencensus-proto v0.4.1 h1:iKLQ0xPNFxR/2hzXZMrBo8f1j86j5WHzznCCQxV/b8g=\ngithub.com/census-instrumentation/opencensus-proto v0.4.1/go.mod h1:4T9NM4+4Vw91VeyqjLS6ao50K5bOcLKN6Q42XnYaRYw=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/clarketm/json v1.15.7 h1:zWsOtfj736/nP76KiS0HpcyO6W50ojEodx7T4LW4NMc=\ngithub.com/clarketm/json v1.15.7/go.mod h1:ynr2LRfb0fQU34l07csRNBTcivjySLLiY1YzQqKVfdo=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=\ngithub.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=\ngithub.com/containerd/containerd v1.7.23 h1:H2CClyUkmpKAGlhQp95g2WXHfLYc7whAuvZGBNYOOwQ=\ngithub.com/containerd/containerd v1.7.23/go.mod h1:7QUzfURqZWCZV7RLNEn1XjUCQLEf0bkaK4GjUaZehxw=\ngithub.com/containerd/continuity v0.4.2 h1:v3y/4Yz5jwnvqPKJJ+7Wf93fyWoCB3F5EclWG023MDM=\ngithub.com/containerd/continuity v0.4.2/go.mod h1:F6PTNCKepoxEaXLQp3wDAjygEnImnZ/7o4JzpodfroQ=\ngithub.com/containerd/errdefs v0.3.0 h1:FSZgGOeK4yuT/+DnF07/Olde/q4KBoMsaamhXxIMDp4=\ngithub.com/containerd/errdefs v0.3.0/go.mod h1:+YBYIdtsnF4Iw6nWZhJcqGSg/dwvV7tyJ/kCkyJ2k+M=\ngithub.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=\ngithub.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=\ngithub.com/containerd/platforms v0.2.1 h1:zvwtM3rz2YHPQsF2CHYM8+KtB5dvhISiXh5ZpSBQv6A=\ngithub.com/containerd/platforms v0.2.1/go.mod h1:XHCb+2/hzowdiut9rkudds9bE5yJ7npe7dG/wG+uFPw=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4 h1:wfIWP927BUkWJb2NmU/kNDYIBTh/ziUX91+lVfRxZq4=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=\ngithub.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=\ngithub.com/cyphar/filepath-securejoin v0.3.4 h1:VBWugsJh2ZxJmLFSM06/0qzQyiQX2Qs0ViKrUAcqdZ8=\ngithub.com/cyphar/filepath-securejoin v0.3.4/go.mod h1:8s/MCNJREmFK0H02MF6Ihv1nakJe4L/w3WZLHNkvlYM=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/distribution/distribution/v3 v3.0.0-20221208165359-362910506bc2 h1:aBfCb7iqHmDEIp6fBvC/hQUddQfg+3qdYjwzaiP9Hnc=\ngithub.com/distribution/distribution/v3 v3.0.0-20221208165359-362910506bc2/go.mod h1:WHNsWjnIn2V1LYOrME7e8KxSeKunYHsxEm4am0BUtcI=\ngithub.com/distribution/reference v0.6.0 h1:0IXCQ5g4/QMHHkarYzh5l+u8T3t73zM5QvfrDyIgxBk=\ngithub.com/distribution/reference v0.6.0/go.mod h1:BbU0aIcezP1/5jX/8MP0YiH4SdvB5Y4f/wlDRiLyi3E=\ngithub.com/docker/cli v25.0.1+incompatible h1:mFpqnrS6Hsm3v1k7Wa/BO23oz0k121MTbTO1lpcGSkU=\ngithub.com/docker/cli v25.0.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=\ngithub.com/docker/distribution v2.8.3+incompatible h1:AtKxIZ36LoNK51+Z6RpzLpddBirtxJnzDrHLEKxTAYk=\ngithub.com/docker/distribution v2.8.3+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=\ngithub.com/docker/docker v26.1.5+incompatible h1:NEAxTwEjxV6VbBMBoGG3zPqbiJosIApZjxlbrG9q3/g=\ngithub.com/docker/docker v26.1.5+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/docker-credential-helpers v0.7.0 h1:xtCHsjxogADNZcdv1pKUHXryefjlVRqWqIhk/uXJp0A=\ngithub.com/docker/docker-credential-helpers v0.7.0/go.mod h1:rETQfLdHNT3foU5kuNkFR1R1V12OJRRO5lzt2D1b5X0=\ngithub.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=\ngithub.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=\ngithub.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c h1:+pKlWGMw7gf6bQ+oDZB4KHQFypsfjYlq/C4rfL7D3g8=\ngithub.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c/go.mod h1:Uw6UezgYA44ePAFQYUehOuCzmy5zmg/+nl2ZfMWGkpA=\ngithub.com/docker/go-metrics v0.0.1 h1:AgB/0SvBxihN0X8OR4SjsblXkbMvalQ8cjmtKQ2rQV8=\ngithub.com/docker/go-metrics v0.0.1/go.mod h1:cG1hvH2utMXtqgqqYE9plW6lDxS3/5ayHzueweSI3Vw=\ngithub.com/docker/libtrust v0.0.0-20150114040149-fa567046d9b1 h1:ZClxb8laGDf5arXfYcAtECDFgAgHklGI8CxgjHnXKJ4=\ngithub.com/docker/libtrust v0.0.0-20150114040149-fa567046d9b1/go.mod h1:cyGadeNEkKy96OOhEzfZl+yxihPEzKnqJwvfuSUqbZE=\ngithub.com/emicklei/go-restful/v3 v3.11.2 h1:1onLa9DcsMYO9P+CXaL0dStDqQ2EHHXLiz+BtnqkLAU=\ngithub.com/emicklei/go-restful/v3 v3.11.2/go.mod h1:6n3XBCmQQb25CM2LCACGz8ukIrRry+4bhvbpWn3mrbc=\ngithub.com/emicklei/proto v1.14.0 h1:WYxC0OrBuuC+FUCTZvb8+fzEHdZMwLEF+OnVfZA3LXU=\ngithub.com/emicklei/proto v1.14.0/go.mod h1:rn1FgRS/FANiZdD2djyH7TMA9jdRDcYQ9IEN9yvjX0A=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/evanphx/json-patch v5.9.0+incompatible h1:fBXyNpNMuTTDdquAq/uisOr2lShz4oaXpDTX2bLe7ls=\ngithub.com/evanphx/json-patch v5.9.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=\ngithub.com/fatih/color v1.18.0 h1:S8gINlzdQ840/4pfAwic/ZE0djQEH3wM94VfqLTZcOM=\ngithub.com/fatih/color v1.18.0/go.mod h1:4FelSpRwEGDpQ12mAdzqdOukCy4u8WUtOY6lkT/6HfU=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/foxcpp/go-mockdns v1.1.0 h1:jI0rD8M0wuYAxL7r/ynTrCQQq0BVqfB99Vgk7DlmewI=\ngithub.com/foxcpp/go-mockdns v1.1.0/go.mod h1:IhLeSFGed3mJIAXPH2aiRQB+kqz7oqu8ld2qVbOu7Wk=\ngithub.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\ngithub.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=\ngithub.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=\ngithub.com/fxamacker/cbor/v2 v2.7.0 h1:iM5WgngdRBanHcxugY4JySA0nk1wZorNOpTgCMedv5E=\ngithub.com/fxamacker/cbor/v2 v2.7.0/go.mod h1:pxXPTn3joSm21Gbwsv0w9OSA2y1HFR9qXEeXQVeNoDQ=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=\ngithub.com/go-errors/errors v1.4.2/go.mod h1:sIVyrIiJhuEF+Pj9Ebtd6P/rEYROXFi3BopGUQ5a5Og=\ngithub.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-openapi/jsonpointer v0.21.0 h1:YgdVicSA9vH5RiHs9TZW5oyafXZFc6+2Vc1rr/O9oNQ=\ngithub.com/go-openapi/jsonpointer v0.21.0/go.mod h1:IUyH9l/+uyhIYQ/PXVA41Rexl+kOkAPDdXEYns6fzUY=\ngithub.com/go-openapi/jsonreference v0.21.0 h1:Rs+Y7hSXT83Jacb7kFyjn4ijOuVGSvOdF2+tg1TRrwQ=\ngithub.com/go-openapi/jsonreference v0.21.0/go.mod h1:LmZmgsrTkVg9LG4EaHeY8cBDslNPMo06cago5JNLkm4=\ngithub.com/go-openapi/spec v0.21.0 h1:LTVzPc3p/RzRnkQqLRndbAzjY0d0BCL72A6j3CdL9ZY=\ngithub.com/go-openapi/spec v0.21.0/go.mod h1:78u6VdPw81XU44qEWGhtr982gJ5BWg2c0I5XwVMotYk=\ngithub.com/go-openapi/swag v0.23.0 h1:vsEVJDUo2hPJ2tu0/Xc+4noaxyEffXNIs3cOULZ+GrE=\ngithub.com/go-openapi/swag v0.23.0/go.mod h1:esZ8ITTYEsH1V2trKHjAN8Ai7xHb8RV+YSZ577vPjgQ=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=\ngithub.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=\ngithub.com/go-test/deep v1.1.1 h1:0r/53hagsehfO4bzD2Pgr/+RgHqhmf+k1Bpse2cTu1U=\ngithub.com/go-test/deep v1.1.1/go.mod h1:5C2ZWiW0ErCdrYzpqxLbTX7MG14M9iiw8DgHncVwcsE=\ngithub.com/gobwas/glob v0.2.3 h1:A4xDbljILXROh+kObIiy5kIaPYD8e96x1tgBhUI5J+Y=\ngithub.com/gobwas/glob v0.2.3/go.mod h1:d3Ez4x06l9bZtSvzIay5+Yzi0fmZzPgnTbPcKjJAkT8=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=\ngithub.com/golang/mock v1.4.0/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.3/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/gomodule/redigo v1.8.2 h1:H5XSIre1MB5NbPYFp+i1NBbb5qN1W8Y8YAQoAYbkm8k=\ngithub.com/gomodule/redigo v1.8.2/go.mod h1:P9dn9mFrCBvWhGE1wpxx6fgq7BAeLBk+UUUzlpkBYO0=\ngithub.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/btree v1.0.1 h1:gK4Kx5IaGY9CD5sPJ36FHiBJ6ZXl0kilRiiCj+jdYp4=\ngithub.com/google/btree v1.0.1/go.mod h1:xXMiIv4Fb/0kKde4SpL7qlzvu5cMJDRkFDxJfI9uaxA=\ngithub.com/google/gnostic-models v0.6.8 h1:yo/ABAfM5IMRsS1VnXjTBvUb61tFIHozhlYvRgGre9I=\ngithub.com/google/gnostic-models v0.6.8/go.mod h1:5n7qKqH0f5wFt+aWF8CW6pZLLNOfYuF5OpfBSENuI8U=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=\ngithub.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=\ngithub.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20190515194954-54271f7e092f/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20191218002539-d4f498aebedc/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200212024743-f11f1df84d12/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200229191704-1ebb73c60ed3/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20241029153458-d1b30febd7db h1:097atOisP2aRj7vFgYQBbFN4U4JNXUNYpxael3UzMyo=\ngithub.com/google/pprof v0.0.0-20241029153458-d1b30febd7db/go.mod h1:vavhavw2zAxS5dIdcRluK6cSGGPlZynqzFM8NdvU144=\ngithub.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 h1:El6M4kTTCOh6aBiKaUGG7oYTSPP8MxqL4YI3kZKwcP4=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510/go.mod h1:pupxD2MaaD3pAXIBCelhxNneeOaAeabZDe5s4K6zSpQ=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=\ngithub.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=\ngithub.com/gorilla/handlers v1.5.1 h1:9lRY6j8DEeeBT10CvO9hGW0gmky0BprnvDI5vfhUHH4=\ngithub.com/gorilla/handlers v1.5.1/go.mod h1:t8XrUpc4KVXb7HGyJ4/cEnwQiaxrX/hz1Zv/4g96P1Q=\ngithub.com/gorilla/mux v1.8.0 h1:i40aqfkR1h2SlN9hojwV5ZA91wcXFOvkdNIeFDP5koI=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=\ngithub.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/grantae/certinfo v0.0.0-20170412194111-59d56a35515b h1:NGgE5ELokSf2tZ/bydyDUKrvd/jP8lrAoPNeBuMOTOk=\ngithub.com/grantae/certinfo v0.0.0-20170412194111-59d56a35515b/go.mod h1:zT/uzhdQGTqlwTq7Lpbj3JoJQWfPfIJ1tE0OidAmih8=\ngithub.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79 h1:+ngKgrYPPJrOjhax5N+uePQ0Fh1Z7PheYoUI/0nzkPA=\ngithub.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=\ngithub.com/grpc-ecosystem/go-grpc-prometheus v1.2.0 h1:Ovs26xHkKqVztRpIrF/92BcuyuQ/YW4NSIpoGtfXNho=\ngithub.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=\ngithub.com/grpc-ecosystem/grpc-gateway v1.14.6/go.mod h1:zdiPV4Yse/1gnckTHtghG4GkDEdKCRJduHpTxT3/jcw=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.20.0 h1:bkypFPDjIYGfCYD5mRBvpqxfYX1YCS1PXdKYWi8FsN0=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.20.0/go.mod h1:P+Lt/0by1T8bfcF3z737NnSbmxQAppXMRziHUxPOC8k=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=\ngithub.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/huandu/xstrings v1.5.0 h1:2ag3IFq9ZDANvthTwTiqSSZLjDc+BedvHPAp5tJy2TI=\ngithub.com/huandu/xstrings v1.5.0/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=\ngithub.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/imdario/mergo v0.3.16 h1:wwQJbIsHYGMUyLSPrEq1CT16AhnhNJQ51+4fdHUnCl4=\ngithub.com/imdario/mergo v0.3.16/go.mod h1:WBLT9ZmE3lPoWsEzCh9LPo3TiwVN+ZKEjmz+hD27ysY=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/jpillora/backoff v1.0.0 h1:uvFg412JmmHBHw7iwprIxkPMI+sGQ4kzOWsMeHnm2EA=\ngithub.com/jpillora/backoff v1.0.0/go.mod h1:J/6gKK9jxlEcS3zixgDgUAsiuZ7yrSoa/FX5e0EB2j4=\ngithub.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=\ngithub.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=\ngithub.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=\ngithub.com/julienschmidt/httprouter v1.3.0 h1:U0609e9tgbseu3rBINet9P48AI/D3oJs4dN7jwJOQ1U=\ngithub.com/julienschmidt/httprouter v1.3.0/go.mod h1:JR6WtHb+2LUe8TCKY3cZOxFyyO8IZAc4RVcycCCAKdM=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2qeMA=\ngithub.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de h1:9TO3cAIGXtEhnIaL+V+BEER86oLrvS+kWobKpbJuye0=\ngithub.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de/go.mod h1:zAbeS9B/r2mtpb6U+EI2rYA5OAXxsYw6wTamcNW+zcE=\ngithub.com/linkerd/linkerd2-proxy-api v0.15.0 h1:PvFmstO+DQ00BSW86gqGMf8rLRsG+rnD4oBzDO4ISTc=\ngithub.com/linkerd/linkerd2-proxy-api v0.15.0/go.mod h1:6o9cU1AjX0JahLqROVyZ+ehy+1Vqj32xg4ZDBcntK1s=\ngithub.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=\ngithub.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=\ngithub.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/miekg/dns v1.1.57 h1:Jzi7ApEIzwEPLHWRcafCN9LZSBbqQpxjt/wpgvg7wcM=\ngithub.com/miekg/dns v1.1.57/go.mod h1:uqRjCRUuEAA6qsOiJvDd+CFo/vW+y5WR6SNmHE55hZk=\ngithub.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=\ngithub.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=\ngithub.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=\ngithub.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/moby/locker v1.0.1 h1:fOXqR41zeveg4fFODix+1Ch4mj/gT0NE1XJbp/epuBg=\ngithub.com/moby/locker v1.0.1/go.mod h1:S7SDdo5zpBK84bzzVlKr2V0hz+7x9hWbYC/kq7oQppc=\ngithub.com/moby/spdystream v0.5.0 h1:7r0J1Si3QO/kjRitvSLVVFUjxMEb/YLj6S9FF62JBCU=\ngithub.com/moby/spdystream v0.5.0/go.mod h1:xBAYlnt/ay+11ShkdFKNAG7LsyK/tmNBVvVOwrfMgdI=\ngithub.com/moby/sys/mountinfo v0.6.2 h1:BzJjoreD5BMFNmD9Rus6gdd1pLuecOFPt8wC+Vygl78=\ngithub.com/moby/sys/mountinfo v0.6.2/go.mod h1:IJb6JQeOklcdMU9F5xQ8ZALD+CUr5VlGpwtX+VE0rpI=\ngithub.com/moby/sys/userns v0.1.0 h1:tVLXkFOxVu9A64/yh59slHVv9ahO9UIev4JZusOLG/g=\ngithub.com/moby/sys/userns v0.1.0/go.mod h1:IHUYgu/kao6N8YZlp9Cf444ySSvCmDlmzUcYfDHOl28=\ngithub.com/moby/term v0.5.0 h1:xt8Q1nalod/v7BqbG21f8mQPqH+xAaC9C3N3wfWbVP0=\ngithub.com/moby/term v0.5.0/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/monochromegane/go-gitignore v0.0.0-20200626010858-205db1a8cc00 h1:n6/2gBQ3RWajuToeY6ZtZTIKv2v7ThUy5KKusIT0yc0=\ngithub.com/monochromegane/go-gitignore v0.0.0-20200626010858-205db1a8cc00/go.mod h1:Pm3mSP3c5uWn86xMLZ5Sa7JB9GsEZySvHYXCTK4E9q4=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f h1:KUppIJq7/+SVif2QVs3tOP0zanoHgBEVAwHxUSIzRqU=\ngithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f h1:y5//uYreIhSUg3J1GEMiLbxo1LJaP8RfCpH6pymGZus=\ngithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f/go.mod h1:ZdcZmHo+o7JKHSa8/e818NopupXU1YMK5fe1lsApnBw=\ngithub.com/nsf/termbox-go v1.1.1 h1:nksUPLCb73Q++DwbYUBEglYBRPZyoXJdrj5L+TkjyZY=\ngithub.com/nsf/termbox-go v1.1.1/go.mod h1:T0cTdVuOwf7pHQNtfhnEbzHbcNyCEcVU4YPpouCbVxo=\ngithub.com/onsi/ginkgo/v2 v2.21.0 h1:7rg/4f3rB88pb5obDgNZrNHrQ4e6WpjonchcpuBRnZM=\ngithub.com/onsi/ginkgo/v2 v2.21.0/go.mod h1:7Du3c42kxCUegi0IImZ1wUQzMBVecgIHjR1C+NkhLQo=\ngithub.com/onsi/gomega v1.35.1 h1:Cwbd75ZBPxFSuZ6T+rN/WCb/gOc6YgFBXLlZLhC7Ds4=\ngithub.com/onsi/gomega v1.35.1/go.mod h1:PvZbdDc8J6XJEpDK4HCuRBm8a6Fzp9/DmhC9C7yFlog=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=\ngithub.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=\ngithub.com/peterbourgon/diskv v2.0.1+incompatible h1:UBdAOUP5p4RWqPBg048CAvpKN+vxiaj6gdUUzhl4XmI=\ngithub.com/peterbourgon/diskv v2.0.1+incompatible/go.mod h1:uqqh8zWWbv1HBMNONnaR/tNboyR3/BZd58JJSHlUSCU=\ngithub.com/phayes/freeport v0.0.0-20220201140144-74d24b5ae9f5 h1:Ii+DKncOVM8Cu1Hc+ETb5K+23HdAMvESYE3ZJ5b5cMI=\ngithub.com/phayes/freeport v0.0.0-20220201140144-74d24b5ae9f5/go.mod h1:iIss55rKnNBTvrwdmkUpLnDpZoAHvWaiq5+iMmen4AE=\ngithub.com/pkg/browser v0.0.0-20170505125900-c90ca0c84f15 h1:mrI+6Ae64Wjt+uahGe5we/sPS1sXjvfT3YjtawAVgps=\ngithub.com/pkg/browser v0.0.0-20170505125900-c90ca0c84f15/go.mod h1:4OwLy04Bl9Ef3GJJCoec+30X3LQs/0/m4HFRt/2LUSA=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=\ngithub.com/prometheus/client_golang v1.1.0/go.mod h1:I1FGZT9+L76gKKOs5djB6ezCbFQP1xR9D75/vuwEF3g=\ngithub.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=\ngithub.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.6.0/go.mod h1:eBmuwkDJBwy6iBfxCBob6t6dR6ENT/y+J+Zk0j9GMYc=\ngithub.com/prometheus/common v0.61.0 h1:3gv/GThfX0cV2lpO7gkTUwZru38mxevy90Bj8YFSRQQ=\ngithub.com/prometheus/common v0.61.0/go.mod h1:zr29OCN/2BsJRaFwG8QOBr41D6kkchKbpeNH7pAjb/s=\ngithub.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.0.3/go.mod h1:4A/X28fw3Fc593LaREMrKMqOKvUAntwMDaekg4FpcdQ=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.4 h1:8TfxU8dW6PdqD27gjM8MVNuicgxIjxpm4K7x4jp8sis=\ngithub.com/rivo/uniseg v0.4.4/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=\ngithub.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sergi/go-diff v1.3.1 h1:xkr+Oxo4BOQKmkn/B9eMK0g5Kg/983T9DqqPHwYqD+8=\ngithub.com/sergi/go-diff v1.3.1/go.mod h1:aMJSSKb2lpPvRNec0+w3fl7LP9IOFzdc9Pa4NFbPK1I=\ngithub.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp81k=\ngithub.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=\ngithub.com/shurcooL/httpfs v0.0.0-20230704072500-f1e31cf0ba5c h1:aqg5Vm5dwtvL+YgDpBcK1ITf3o96N/K7/wsRXQnUTEs=\ngithub.com/shurcooL/httpfs v0.0.0-20230704072500-f1e31cf0ba5c/go.mod h1:owqhoLW1qZoYLZzLnBw+QkPP9WZnjlSWihhxAJC1+/M=\ngithub.com/shurcooL/vfsgen v0.0.0-20230704071429-0000e147ea92 h1:OfRzdxCzDhp+rsKWXuOO2I/quKMJ/+TQwVbIP/gltZg=\ngithub.com/shurcooL/vfsgen v0.0.0-20230704071429-0000e147ea92/go.mod h1:7/OT02F6S6I7v6WXb+IjhMuZEYfH/RJ5RwEWnEo5BMg=\ngithub.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/spf13/cast v1.7.0 h1:ntdiHjuueXFgm5nzDRdOS4yfT43P5Fnud6DH50rz/7w=\ngithub.com/spf13/cast v1.7.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.1 h1:4VhoImhV/Bm0ToFkXFi8hXNXwpDRZ/ynw3amt82mzq0=\ngithub.com/stretchr/objx v0.5.1/go.mod h1:/iHQpkQwBD6DLUmQ4pE+s1TXdob1mORJ4/UFdrifcy0=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/x448/float16 v0.8.4 h1:qLwI1I70+NjRFUR3zs1JPUCgaCXSh3SW62uAKT1mSBM=\ngithub.com/x448/float16 v0.8.4/go.mod h1:14CWIYCyZA/cWjXOioeEpHeN/83MdbZDRQHoFcYsOfg=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb h1:zGWFAtiMcyryUHoUjUJX0/lt1H2+i2Ka2n+D3DImSNo=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 h1:EzJWgHovont7NscjpAxXsDA8S8BMYve8Y5+7cuRE7R0=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=\ngithub.com/xeipuuv/gojsonschema v1.2.0 h1:LhYJRs+L4fBtjZUfuSZIKGeVu0QRy8e5Xi7D17UxZ74=\ngithub.com/xeipuuv/gojsonschema v1.2.0/go.mod h1:anYRn/JVcOK2ZgGU+IjEV4nwlhoK5sQluxsYJ78Id3Y=\ngithub.com/xlab/treeprint v1.2.0 h1:HzHnuAF1plUN2zGlAFHbSQP2qJ0ZAD3XF5XD7OesXRQ=\ngithub.com/xlab/treeprint v1.2.0/go.mod h1:gj5Gd3gPdKtR1ikdDK6fnFLdmIS0X30kTTuNd/WEJu0=\ngithub.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yvasiyarov/go-metrics v0.0.0-20140926110328-57bccd1ccd43 h1:+lm10QQTNSBd8DVTNGHx7o/IKu9HYDvLMffDhbyLccI=\ngithub.com/yvasiyarov/go-metrics v0.0.0-20140926110328-57bccd1ccd43/go.mod h1:aX5oPXxHm3bOH+xeAttToC8pqch2ScQN/JoXYupl6xs=\ngithub.com/yvasiyarov/gorelic v0.0.0-20141212073537-a9bba5b9ab50 h1:hlE8//ciYMztlGpl/VA+Zm1AcTPHYkHJPbHqE6WJUXE=\ngithub.com/yvasiyarov/gorelic v0.0.0-20141212073537-a9bba5b9ab50/go.mod h1:NUSPSUX/bi6SeDMUh6brw0nXpxHnc96TguQh0+r/ssA=\ngithub.com/yvasiyarov/newrelic_platform_go v0.0.0-20140908184405-b21fdbd4370f h1:ERexzlUfuTvpE74urLSbIQW0Z/6hF9t8U4NsJLaioAY=\ngithub.com/yvasiyarov/newrelic_platform_go v0.0.0-20140908184405-b21fdbd4370f/go.mod h1:GlGEuHIJweS1mbCqG+7vt2nvWLzLLnRHbXz5JKd/Qbg=\ngo.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=\ngo.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=\ngo.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=\ngo.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.53.0 h1:4K4tsIXefpVJtvA/8srF4V4y0akAoPHkIslgAkjixJA=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.53.0/go.mod h1:jjdQuTGVsXV4vSs+CJ2qYDeDPf9yIJV23qlIzBm73Vg=\ngo.opentelemetry.io/otel v1.31.0 h1:NsJcKPIW0D0H3NgzPDHmo0WW6SptzPdqg/L1zsIm2hY=\ngo.opentelemetry.io/otel v1.31.0/go.mod h1:O0C14Yl9FgkjqcCZAsE053C13OaddMYr/hz6clDkEJE=\ngo.opentelemetry.io/otel/metric v1.31.0 h1:FSErL0ATQAmYHUIzSezZibnyVlft1ybhy4ozRPcF2fE=\ngo.opentelemetry.io/otel/metric v1.31.0/go.mod h1:C3dEloVbLuYoX41KpmAhOqNriGbA+qqH6PQ5E5mUfnY=\ngo.opentelemetry.io/otel/sdk v1.31.0 h1:xLY3abVHYZ5HSfOg3l2E5LUj2Cwva5Y7yGxnSW9H5Gk=\ngo.opentelemetry.io/otel/sdk v1.31.0/go.mod h1:TfRbMdhvxIIr/B2N2LQW2S5v9m3gOQ/08KsbbO5BPT0=\ngo.opentelemetry.io/otel/sdk/metric v1.31.0 h1:i9hxxLJF/9kkvfHppyLL55aW7iIJz4JjxTeYusH7zMc=\ngo.opentelemetry.io/otel/sdk/metric v1.31.0/go.mod h1:CRInTMVvNhUKgSAMbKyTMxqOBC0zgyxzW55lZzX43Y8=\ngo.opentelemetry.io/otel/trace v1.31.0 h1:ffjsj1aRouKewfr85U2aGagJ46+MvodynlQ1HYdmJys=\ngo.opentelemetry.io/otel/trace v1.31.0/go.mod h1:TXZkRk7SM2ZQLtR6eoAWQFIHPvzQ06FJAsO1tJg480A=\ngo.starlark.net v0.0.0-20230525235612-a134d8f9ddca h1:VdD38733bfYv5tUZwEIskMM93VanwNIi5bIKnDrJdEY=\ngo.starlark.net v0.0.0-20230525235612-a134d8f9ddca/go.mod h1:jxU+3+j+71eXOW14274+SmmuW82qJzl6iZSeqEtTGds=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.32.0 h1:euUpcYgM8WcP71gNpTqQCn6rC2t6ULUPiOzfWaXVVfc=\ngolang.org/x/crypto v0.32.0/go.mod h1:ZnnJkOaASj8g0AjIduWNlq2NRxL0PlBrbKVyZ6V/Ugc=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=\ngolang.org/x/exp v0.0.0-20190829153037-c13cbed26979/go.mod h1:86+5VVa7VpoJ4kLfm080zCjGlMRFzhUhsZKEZO7MGek=\ngolang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136/go.mod h1:JXzH8nQsPlswgeRAPE3MuO9GYsAcnJvJ4vnMwN/5qkY=\ngolang.org/x/exp v0.0.0-20191129062945-2f5052295587/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20191227195350-da58074b4299/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=\ngolang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=\ngolang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=\ngolang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190909230951-414d861bb4ac/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20191125180803-fdd1cda4f05f/go.mod h1:5qLYkcX4OjUUV8bRuDixDT3tpyyb+LUpUlRWLxfhWrs=\ngolang.org/x/lint v0.0.0-20200130185559-910be7a94367/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=\ngolang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=\ngolang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=\ngolang.org/x/mod v0.1.0/go.mod h1:0QHyrYULN0/3qlju5TqG8bIK38QM8yzMo5ekMj3DlcY=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.1.1-0.20191107180719-034126e5016b/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.22.0 h1:D4nJWe9zXqHOmWqj4VMOJhvzj7bEZg4wEYa759z1pH4=\ngolang.org/x/mod v0.22.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191002035440-2ec189313ef0/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200222125558-5a598a2470a0/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.34.0 h1:Mb7Mrk043xzHgnRM88suvJFwzVrRfHEHJEl5/71CKw0=\ngolang.org/x/net v0.34.0/go.mod h1:di0qlW3YNM5oh6GqDGQr92MyTozJPmybPK4Ev/Gm31k=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20191202225959-858c2ad4c8b6/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190801041406-cbf593c0f2f3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191228213918-04cbcbbfeed8/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200212091648-12a6c2dcc1e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200331124033-c3d80250170d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20220526004731-065cf7ba2467/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.28.0 h1:/Ts8HFuMR2E6IP/jlo7QVLZHggjKQbhu/7H0LJFr3Gg=\ngolang.org/x/term v0.28.0/go.mod h1:Sw/lC2IAUZ92udQNf3WodGtn4k/XoLyZoh8v/8uiwek=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.7.0 h1:ntUhktv3OPE6TgYxXWv9vKvUSJyIFJlyohwbkEwPrKQ=\ngolang.org/x/time v0.7.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190506145303-2d16b83fe98c/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190606124116-d0a3d012864b/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191113191852-77e3bb0ad9e7/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191115202509-3a792d9c32b2/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191125144606-a911d9008d1f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191130070609-6e064ea0cf2d/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191216173652-a0e659d51361/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20191227053925-7b8e75db28f4/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200117161641-43d50277825c/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200122220014-bf1340f18c4a/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200204074204-1cc6d1ef6c74/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200207183749-b753a1ba74fa/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200212150539-ea181f53ac56/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200224181240-023911ca70b2/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200331025713-a30bf2db82d4/go.mod h1:Sl4aGygMT6LrqrWclx+PTx3U+LnKx/seiNR+3G19Ar8=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.29.0 h1:Xx0h3TtM9rzQpQuR4dKLrdglAmCEN5Oi+P74JdhdzXE=\ngolang.org/x/tools v0.29.0/go.mod h1:KMQVMRsVxU6nHCFXrBPhDB8XncLNLM0lIy/F14RP588=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=\ngoogle.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=\ngoogle.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.9.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.13.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.14.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.15.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.17.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.18.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.20.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.25.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.143.0 h1:o8cekTkqhywkbZT6p1UHJPZ9+9uuCAJs/KYomxZB8fA=\ngoogle.golang.org/api v0.143.0/go.mod h1:FoX9DO9hT7DLNn97OuoZAGSDuNAXdJRuGK98rSUgurk=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=\ngoogle.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190801165951-fa694d86fc64/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190911173649-1774047e7e51/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=\ngoogle.golang.org/genproto v0.0.0-20191108220845-16a3f7862a1a/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191115194625-c23dd37a84c9/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191216164720-4f79533eabd1/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191230161307-f3c370f40bfb/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200115191322-ca5a22157cba/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200122232147-0452cf42e150/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200204135345-fa8e72b47b90/go.mod h1:GmwEX6Z4W5gMy59cAlVYjN9JhxgbQH6Gn+gFDQe2lzA=\ngoogle.golang.org/genproto v0.0.0-20200212174721-66ed5ce911ce/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200224152610-e50cd9704f63/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200331122359-1ee6d9798940/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/genproto v0.0.0-20200527145253-8367513e4ece/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241015192408-796eee8c2d53 h1:fVoAXEKA4+yufmbdVYv+SE73+cPZbbbe8paLsHfkK+U=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241015192408-796eee8c2d53/go.mod h1:riSXTwQ4+nqmPGtobMFyW5FqVAmIs0St6VPp4Ug7CE4=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241015192408-796eee8c2d53 h1:X58yt85/IXCx0Y3ZwN6sEIKZzQtDEYaBWrDvErdXrRE=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241015192408-796eee8c2d53/go.mod h1:GX3210XPVPUjJbTUbvwI8f2IpZDMZuPJWDzDuebbviI=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.28.0/go.mod h1:rpkK4SK4GF4Ach/+MFLZUBavHOvF2JJB5uozKKal+60=\ngoogle.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=\ngoogle.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=\ngoogle.golang.org/grpc v1.69.2 h1:U3S9QEtbXC0bYNvRtcoklF3xGtLViumSYxWykJS+7AU=\ngoogle.golang.org/grpc v1.69.2/go.mod h1:vyjdE6jLBI76dgpDojsFGNaHlxdjXN9ghpnd2o7JGZ4=\ngoogle.golang.org/grpc/cmd/protoc-gen-go-grpc v1.5.1 h1:F29+wU6Ee6qgu9TddPgooOdaqsxTMunOoj8KA5yuS5A=\ngoogle.golang.org/grpc/cmd/protoc-gen-go-grpc v1.5.1/go.mod h1:5KF+wpkbTSbGcR9zteSqZV6fqFOWBl4Yde8En8MryZA=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.36.2 h1:R8FeyR1/eLmkutZOM5CWghmo5itiG9z0ktFlTVLuTmU=\ngoogle.golang.org/protobuf v1.36.2/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/evanphx/json-patch.v4 v4.12.0 h1:n6jtcsulIzXPJaxegRbvFNNrZDjbij7ny3gmSPG+6V4=\ngopkg.in/evanphx/json-patch.v4 v4.12.0/go.mod h1:p8EYWUEYMpynmqDbY58zCKCFZw8pRWMG4EsWvDvM72M=\ngopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=\ngopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.4.0 h1:ZazjZUfuVeZGLAmlKKuyv3IKP5orXcwtOwDQH6YVr6o=\ngotest.tools/v3 v3.4.0/go.mod h1:CtbdzLSsqVhDgMtKsx03ird5YTGB3ar27v0u/yKBW5g=\nhelm.sh/helm/v3 v3.16.4 h1:rBn/h9MACw+QlhxQTjpl8Ifx+VTWaYsw3rguGBYBzr0=\nhelm.sh/helm/v3 v3.16.4/go.mod h1:k8QPotUt57wWbi90w3LNmg3/MWcLPigVv+0/X4B8BzA=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=\nhonnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nk8s.io/api v0.32.0 h1:OL9JpbvAU5ny9ga2fb24X8H6xQlVp+aJMFlgtQjR9CE=\nk8s.io/api v0.32.0/go.mod h1:4LEwHZEf6Q/cG96F3dqR965sYOfmPM7rq81BLgsE0p0=\nk8s.io/apiextensions-apiserver v0.32.0 h1:S0Xlqt51qzzqjKPxfgX1xh4HBZE+p8KKBq+k2SWNOE0=\nk8s.io/apiextensions-apiserver v0.32.0/go.mod h1:86hblMvN5yxMvZrZFX2OhIHAuFIMJIZ19bTvzkP+Fmw=\nk8s.io/apimachinery v0.32.0 h1:cFSE7N3rmEEtv4ei5X6DaJPHHX0C+upp+v5lVPiEwpg=\nk8s.io/apimachinery v0.32.0/go.mod h1:GpHVgxoKlTxClKcteaeuF1Ul/lDVb74KpZcxcmLDElE=\nk8s.io/cli-runtime v0.31.3 h1:fEQD9Xokir78y7pVK/fCJN090/iYNrLHpFbGU4ul9TI=\nk8s.io/cli-runtime v0.31.3/go.mod h1:Q2jkyTpl+f6AtodQvgDI8io3jrfr+Z0LyQBPJJ2Btq8=\nk8s.io/client-go v0.32.0 h1:DimtMcnN/JIKZcrSrstiwvvZvLjG0aSxy8PxN8IChp8=\nk8s.io/client-go v0.32.0/go.mod h1:boDWvdM1Drk4NJj/VddSLnx59X3OPgwrOo0vGbtq9+8=\nk8s.io/code-generator v0.32.0 h1:s0lNN8VSWny8LBz5t5iy7MCdgwdOhdg7vAGVxvS+VWU=\nk8s.io/code-generator v0.32.0/go.mod h1:b7Q7KMZkvsYFy72A79QYjiv4aTz3GvW0f1T3UfhFq4s=\nk8s.io/component-base v0.32.0 h1:d6cWHZkCiiep41ObYQS6IcgzOUQUNpywm39KVYaUqzU=\nk8s.io/component-base v0.32.0/go.mod h1:JLG2W5TUxUu5uDyKiH2R/7NnxJo1HlPoRIIbVLkK5eM=\nk8s.io/endpointslice v0.32.0 h1:ka4sAuyApwkHgh+/0GLTidTCFC2Bz2T7F/jmBeQ+TzY=\nk8s.io/endpointslice v0.32.0/go.mod h1:ArQ8P2n//14SG8k9vAxkiR3adB8C3BY3oSACOpTJRiY=\nk8s.io/gengo/v2 v2.0.0-20240911193312-2b36238f13e9 h1:si3PfKm8dDYxgfbeA6orqrtLkvvIeH8UqffFJDl0bz4=\nk8s.io/gengo/v2 v2.0.0-20240911193312-2b36238f13e9/go.mod h1:EJykeLsmFC60UQbYJezXkEsG2FLrt0GPNkU5iK5GWxU=\nk8s.io/klog/v2 v2.130.1 h1:n9Xl7H1Xvksem4KFG4PYbdQCQxqc/tTUyrgXaOhHSzk=\nk8s.io/klog/v2 v2.130.1/go.mod h1:3Jpz1GvMt720eyJH1ckRHK1EDfpxISzJ7I9OYgaDtPE=\nk8s.io/kube-aggregator v0.32.0 h1:5ZyMW3QwAbmkasQrROcpa5we3et938DQuyUYHeXSPao=\nk8s.io/kube-aggregator v0.32.0/go.mod h1:6OKivf6Ypx44qu2v1ZUMrxH8kRp/8LKFKeJU72J18lU=\nk8s.io/kube-openapi v0.0.0-20241105132330-32ad38e42d3f h1:GA7//TjRY9yWGy1poLzYYJJ4JRdzg3+O6e8I+e+8T5Y=\nk8s.io/kube-openapi v0.0.0-20241105132330-32ad38e42d3f/go.mod h1:R/HEjbvWI0qdfb8viZUeVZm0X6IZnxAydC7YU42CMw4=\nk8s.io/utils v0.0.0-20241104100929-3ea5e8cea738 h1:M3sRQVHv7vB20Xc2ybTt7ODCeFj6JSWYFzOFnYeS6Ro=\nk8s.io/utils v0.0.0-20241104100929-3ea5e8cea738/go.mod h1:OLgZIPagt7ERELqWJFomSt595RzquPNLL48iOWgYOg0=\noras.land/oras-go v1.2.5 h1:XpYuAwAb0DfQsunIyMfeET92emK8km3W4yEzZvUbsTo=\noras.land/oras-go v1.2.5/go.mod h1:PuAwRShRZCsZb7g8Ar3jKKQR/2A/qN+pkYxIOd/FAoo=\nrsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=\nrsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nsigs.k8s.io/gateway-api v0.8.1 h1:Bo4NMAQFYkQZnHXOfufbYwbPW7b3Ic5NjpbeW6EJxuU=\nsigs.k8s.io/gateway-api v0.8.1/go.mod h1:0PteDrsrgkRmr13nDqFWnev8tOysAVrwnvfFM55tSVg=\nsigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3 h1:/Rv+M11QRah1itp8VhT6HoVx1Ray9eB4DBr+K+/sCJ8=\nsigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3/go.mod h1:18nIHnGi6636UCz6m8i4DhaJ65T6EruyzmoQqI2BVDo=\nsigs.k8s.io/kustomize/api v0.17.2 h1:E7/Fjk7V5fboiuijoZHgs4aHuexi5Y2loXlVOAVAG5g=\nsigs.k8s.io/kustomize/api v0.17.2/go.mod h1:UWTz9Ct+MvoeQsHcJ5e+vziRRkwimm3HytpZgIYqye0=\nsigs.k8s.io/kustomize/kyaml v0.17.1 h1:TnxYQxFXzbmNG6gOINgGWQt09GghzgTP6mIurOgrLCQ=\nsigs.k8s.io/kustomize/kyaml v0.17.1/go.mod h1:9V0mCjIEYjlXuCdYsSXvyoy2BTsLESH7TlGV81S282U=\nsigs.k8s.io/structured-merge-diff/v4 v4.4.2 h1:MdmvkGuXi/8io6ixD5wud3vOLwc1rj0aNqRlpuvjmwA=\nsigs.k8s.io/structured-merge-diff/v4 v4.4.2/go.mod h1:N8f93tFZh9U6vpxwRArLiikrE5/2tiu1w1AGfACIGE4=\nsigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=\nsigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=\n"
        },
        {
          "name": "grafana",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaeger",
          "type": "tree",
          "content": null
        },
        {
          "name": "justfile",
          "type": "blob",
          "size": 18.4990234375,
          "content": "# See https://just.systems/man/en\n\nlint: action-lint action-dev-check md-lint sh-lint rs-fetch rs-clippy rs-check-fmt go-lint\n\n##\n## Go\n##\n\nexport GO111MODULE := \"on\"\n\ngo-fetch:\n    go mod download\n\ngo-fmt *flags:\n    bin/fmt {{ flags }}\n\ngo-lint *flags:\n    golangci-lint run {{ flags }}\n\ngo-test:\n    LINKERD_TEST_PRETTY_DIFF=1 gotestsum -- -race -v -mod=readonly ./...\n\n##\n## Rust\n##\n\n# By default we compile in development mode mode because it's faster.\nrs-build-type := if env_var_or_default(\"RELEASE\", \"\") == \"\" { \"debug\" } else { \"release\" }\n\n# Overriddes the default Rust toolchain version.\nrs-toolchain := \"\"\n\nrs-features := 'all'\n\n_cargo := \"cargo\" + if rs-toolchain != \"\" { \" +\" + rs-toolchain } else { \"\" }\n\n# Fetch Rust dependencies.\nrs-fetch:\n    {{ _cargo }} fetch --locked\n\n# Format Rust code.\nrs-fmt:\n    {{ _cargo }} fmt --all\n\n# Check that the Rust code is formatted correctly.\nrs-check-fmt:\n    {{ _cargo }} fmt --all -- --check\n\n# Lint Rust code.\nrs-clippy:\n    {{ _cargo }} clippy --frozen --workspace --all-targets --no-deps {{ _features }} {{ _fmt }}\n\nalias clippy := rs-clippy\n\n# Audit Rust dependencies.\nrs-audit-deps:\n    {{ _cargo }} deny {{ _features }} check\n\n# Generate Rust documentation.\nrs-doc *flags:\n    {{ _cargo }} doc --frozen \\\n        {{ if rs-build-type == \"release\" { \"--release\" } else { \"\" } }} \\\n        {{ _features }} \\\n        {{ flags }}\n\nrs-test-build:\n    {{ _cargo-test }} --no-run --frozen \\\n        --workspace --exclude=linkerd-policy-test \\\n        {{ _features }}\n\n# Run Rust unit tests\nrs-test *flags:\n    {{ _cargo-test }} --frozen \\\n        --workspace --exclude=linkerd-policy-test \\\n        {{ if rs-build-type == \"release\" { \"--release\" } else { \"\" } }} \\\n        {{ _features }} \\\n        {{ flags }}\n\n# Check each crate independently to ensure its Cargo.toml is sufficient.\nrs-check-dirs:\n    #!/usr/bin/env bash\n    set -euo pipefail\n    while IFS= read -r toml ; do\n        {{ just_executable() }} \\\n            rs-build-type='{{ rs-build-type }}' \\\n            rs-features='{{ rs-features }}' \\\n            rs-toolchain='{{ rs-toolchain }}' \\\n            _rs-check-dir \"${toml%/*}\"\n        {{ just_executable() }} \\\n            rs-build-type='{{ rs-build-type }}' \\\n            rs-features='{{ rs-features }}' \\\n            rs-toolchain='{{ rs-toolchain }}' \\\n            _rs-check-dir \"${toml%/*}\" --tests\n    done < <(find . -mindepth 2 -name Cargo.toml | sort -r)\n\n_rs-check-dir dir *flags:\n    cd {{ dir }} \\\n        && {{ _cargo }} check --frozen \\\n                {{ if rs-build-type == \"release\" { \"--release\" } else { \"\" } }} \\\n                {{ _features }} \\\n                {{ flags }} \\\n                {{ _fmt }}\n\n# If we're running in github actions and cargo-action-fmt is installed, then add\n# a command suffix that formats errors.\n_fmt := if env_var_or_default(\"GITHUB_ACTIONS\", \"\") != \"true\" { \"\" } else {\n    ```\n    if command -v cargo-action-fmt >/dev/null 2>&1; then\n        echo \"--message-format=json | cargo-action-fmt\"\n    fi\n    ```\n}\n\n# Configures which features to enable when invoking cargo commands.\n_features := if rs-features == \"all\" {\n        \"--all-features\"\n    } else if rs-features != \"\" {\n        \"--no-default-features --features=\" + rs-features\n    } else { \"\" }\n\n# Use cargo-nextest if it is available. It may not be available when running\n# outside of the devcontainer.\n_cargo-test := _cargo + ```\n    if command -v cargo-nextest >/dev/null 2>&1 ; then\n        echo \" nextest run\"\n    else\n        echo \" test\"\n    fi\n    ```\n\n##\n## Policy integration tests\n##\n\nexport POLICY_TEST_CONTEXT := env_var_or_default(\"POLICY_TEST_CONTEXT\", \"k3d-\" + k3d-name)\n\n# Install linkerd in the test cluster and run the policy tests.\npolicy-test: linkerd-install policy-test-deps-load policy-test-run && policy-test-cleanup linkerd-uninstall\n\n# Run the policy tests without installing linkerd.\npolicy-test-run *flags:\n    cd policy-test && {{ _cargo-test }} {{ flags }}\n\n# Build the policy tests without running them.\npolicy-test-build:\n    cd policy-test && {{ _cargo-test }} --no-run\n\n# Delete all test namespaces and remove linkerd from the cluster.\npolicy-test-cleanup:\n    {{ _kubectl }} delete ns --selector='linkerd-policy-test'\n    @while [ $({{ _kubectl }} get ns --selector='linkerd-policy-test' -o json |jq '.items | length') != \"0\" ]; do sleep 1 ; done\n\npolicy-test-deps-pull:\n    docker pull -q docker.io/bitnami/kubectl:latest\n    docker pull -q docker.io/curlimages/curl:latest\n    docker pull -q ghcr.io/olix0r/hokay:latest\n\n# Load all images into the test cluster.\npolicy-test-deps-load: _k3d-init policy-test-deps-pull\n    for i in {1..3} ; do {{ _k3d-load }} \\\n        bitnami/kubectl:latest \\\n        curlimages/curl:latest \\\n        fortio/fortio:latest \\\n        ghcr.io/olix0r/hokay:latest && exit || sleep 1 ; done\n\n##\n## Test cluster\n##\n\n# The name of the k3d cluster to use.\nk3d-name := \"l5d-test\"\n\n# The name of the docker network to use (i.e., for multicluster testing).\nk3d-network := \"k3d-name\"\n\n# The kubernetes version to use for the test cluster. e.g. 'v1.24', 'latest', etc\nk3d-k8s := \"latest\"\n\nk3d-agents := \"0\"\nk3d-servers := \"1\"\n\n_k3d-flags := \"--no-lb --k3s-arg --disable='local-storage,traefik,servicelb,metrics-server@server:*'\"\n\n_context := \"--context=k3d-\" + k3d-name\n_kubectl := \"kubectl \" + _context\n\n_k3d-load := \"k3d image import --mode=direct --cluster=\" + k3d-name\n\n# Run kubectl with the test cluster context.\nk *flags:\n    {{ _kubectl }} {{ flags }}\n\n# Creates a k3d cluster that can be used for testing.\nk3d-create: && _k3d-ready\n    k3d cluster create {{ k3d-name }} \\\n        --image='+{{ k3d-k8s }}' \\\n        --agents='{{ k3d-agents }}' \\\n        --servers='{{ k3d-servers }}' \\\n        --network='{{ k3d-network }}' \\\n        {{ _k3d-flags }} \\\n        --kubeconfig-update-default \\\n        --kubeconfig-switch-context=false\n\n# Deletes the test cluster.\nk3d-delete:\n    k3d cluster delete {{ k3d-name }}\n\n# Print information the test cluster's detailed status.\nk3d-info:\n    k3d cluster list {{ k3d-name }} -o json | jq .\n\n# Set the default kubectl context to the test cluster.\nk3d-use:\n    k3d kubeconfig merge {{ k3d-name }} \\\n        --kubeconfig-merge-default \\\n        --kubeconfig-switch-context=true \\\n        >/dev/null\n\n# Ensures the test cluster has been initialized.\n_k3d-init: && _k3d-ready\n    #!/usr/bin/env bash\n    set -euo pipefail\n    if ! k3d cluster list {{ k3d-name }} >/dev/null 2>/dev/null; then\n        {{ just_executable() }} \\\n            k3d-k8s='{{ k3d-k8s }}' \\\n            k3d-name='{{ k3d-name }}' \\\n            k3d-network='{{ k3d-network }}' \\\n            _k3d-flags='{{ _k3d-flags }}' \\\n            k3d-create\n    fi\n    k3d kubeconfig merge {{ k3d-name }} \\\n        --kubeconfig-merge-default \\\n        --kubeconfig-switch-context=false \\\n        >/dev/null\n\n_k3d-ready: _k3d-api-ready _k3d-dns-ready\n\n# Wait for the cluster's API server to be accessible\n_k3d-api-ready:\n    #!/usr/bin/env bash\n    set -euo pipefail\n    for i in {1..6} ; do\n        if {{ _kubectl }} cluster-info >/dev/null ; then exit 0 ; fi\n        sleep 10\n    done\n    exit 1\n\n# Wait for the cluster's DNS pods to be ready.\n_k3d-dns-ready:\n    while [ $({{ _kubectl }} get po -n kube-system -l k8s-app=kube-dns -o json |jq '.items | length') = \"0\" ]; do sleep 1 ; done\n    {{ _kubectl }} wait pod --for=condition=ready \\\n        --namespace=kube-system --selector=k8s-app=kube-dns \\\n        --timeout=1m\n\n##\n## Docker images\n##\n\n# If DOCKER_REGISTRY is not already set, use a bogus registry with a unique\n# name so that it's virtually impossible to accidentally use an incorrect image.\nexport DOCKER_REGISTRY := env_var_or_default(\"DOCKER_REGISTRY\", \"test.l5d.io/\" + _test-id )\n_test-id := `tr -dc 'a-z0-9' </dev/urandom | fold -w 5 | head -n 1`\n\n# The docker image tag.\nlinkerd-tag := `bin/root-tag`\n\ndocker-arch := ''\n\n_pause-load: _k3d-init\n    #!/usr/bin/env bash\n    set -euo pipefail\n    img=\"$(yq .gateway.pauseImage multicluster/charts/linkerd-multicluster/values.yaml)\"\n    if [ -z \"$(docker image ls -q \"$img\")\" ]; then\n       docker pull -q \"$img\"\n    fi\n    for i in {1..3} ; do {{ _k3d-load }} \"$img\" && exit || sleep 1 ; done\n\n##\n## Linkerd CLI\n##\n\n# The Linkerd CLI binary.\nlinkerd-exec := \"bin/linkerd\"\n_linkerd := linkerd-exec + \" \" + _context\n\ncontroller-image := DOCKER_REGISTRY + \"/controller\"\nproxy-image := DOCKER_REGISTRY + \"/proxy\"\npolicy-controller-image := DOCKER_REGISTRY + \"/policy-controller\"\n\n# External dependencies\n#\n# We execute these commands lazily in case `yq` isn't present (so that other\n# just recipes can succeed).\n_proxy-init-image-cmd := \"yq '.proxyInit.image | \\\"ghcr.io/linkerd/proxy-init:\\\" + .version' charts/linkerd-control-plane/values.yaml\"\n_cni-plugin-image-cmd := \"yq '.image | \\\"ghcr.io/linkerd/cni-plugin:\\\" + .version' charts/linkerd2-cni/values.yaml\"\n_prometheus-image-cmd := \"yq '.prometheus.image | .registry + \\\"/\\\" + .name + \\\":\\\" + .tag'  viz/charts/linkerd-viz/values.yaml\"\n\nlinkerd *flags:\n    {{ _linkerd }} {{ flags }}\n\n# Install crds on the test cluster.\nlinkerd-crds-install: _k3d-init\n    {{ _linkerd }} install --crds \\\n        | {{ _kubectl }} apply -f -\n    {{ _kubectl }} wait crd --for condition=established \\\n        --selector='linkerd.io/control-plane-ns' \\\n        --timeout=1m\n\n# Install linkerd on the test cluster using test images.\nlinkerd-install *args='': linkerd-load linkerd-crds-install && _linkerd-ready\n    {{ _linkerd }} install \\\n            --set='imagePullPolicy=Never' \\\n            --set='controllerImage={{ controller-image }}' \\\n            --set='linkerdVersion={{ linkerd-tag }}' \\\n            --set='policyController.image.name={{ policy-controller-image }}' \\\n            --set='policyController.image.version={{ linkerd-tag }}' \\\n            --set='policyController.loglevel=info\\,linkerd=trace\\,kubert=trace' \\\n            --set='proxy.image.name={{ proxy-image }}' \\\n            --set='proxy.image.version={{ linkerd-tag }}' \\\n            --set='proxyInit.image.name=ghcr.io/linkerd/proxy-init' \\\n            {{ args }} \\\n        | {{ _kubectl }} apply -f -\n\n# Wait for all test namespaces to be removed before uninstalling linkerd from the cluster.\nlinkerd-uninstall:\n    {{ _linkerd }} uninstall \\\n        | {{ _kubectl }} delete -f -\n\nlinkerd-load: _linkerd-images _k3d-init\n    for i in {1..3} ; do {{ _k3d-load }} \\\n        '{{ controller-image }}:{{ linkerd-tag }}' \\\n        '{{ policy-controller-image }}:{{ linkerd-tag }}' \\\n        '{{ proxy-image }}:{{ linkerd-tag }}' \\\n        $({{ _proxy-init-image-cmd }}) && exit || sleep 1 ; done\n\nlinkerd-load-cni:\n    docker pull -q $({{ _cni-plugin-image-cmd }})\n    {{ _k3d-load }} $({{ _cni-plugin-image-cmd }})\n\nlinkerd-build: _policy-controller-build\n    TAG={{ linkerd-tag }} bin/docker-build-controller\n    TAG={{ linkerd-tag }} bin/docker-build-proxy\n\n_linkerd-images:\n    #!/usr/bin/env bash\n    set -xeuo pipefail\n    docker pull -q $({{ _proxy-init-image-cmd }})\n    for img in \\\n        '{{ controller-image }}:{{ linkerd-tag }}' \\\n        '{{ policy-controller-image }}:{{ linkerd-tag }}' \\\n        '{{ proxy-image }}:{{ linkerd-tag }}'\n    do\n        if [ -z $(docker image ls -q \"$img\") ]; then\n            # Build images if any one of the images is missing.\n            exec {{ just_executable() }} \\\n                controller-image='{{ controller-image }}' \\\n                policy-controller-image='{{ policy-controller-image }}' \\\n                linkerd-tag='{{ linkerd-tag }}' \\\n                linkerd-build\n        fi\n    done\n\n# Build the policy controller docker image for testing (on amd64).\n_policy-controller-build:\n    docker buildx build . \\\n        --file='policy-controller/Dockerfile' \\\n        --platform={{ if docker-arch == '' { \"amd64\" } else { docker-arch} }} \\\n        --build-arg='build_type={{ rs-build-type }}' \\\n        --tag='{{ policy-controller-image }}:{{ linkerd-tag }}' \\\n        --progress=plain \\\n        --load\n\n_linkerd-ready:\n    if ! {{ _kubectl }} wait pod --for=condition=ready \\\n            --namespace=linkerd --selector='linkerd.io/control-plane-component' \\\n            --timeout=1m ; then \\\n        {{ _kubectl }} describe pods --namespace=linkerd ; \\\n    fi\n\n# Ensure that a linkerd control plane is installed\n_linkerd-init: && _linkerd-ready\n    #!/usr/bin/env bash\n    set -euo pipefail\n    if ! {{ _kubectl }} get ns linkerd >/dev/null 2>&1 ; then\n        {{ just_executable() }} \\\n            k3d-name='{{ k3d-name }}' \\\n            k3d-k8s='{{ k3d-k8s }}' \\\n            k3d-agents='{{ k3d-agents }}' \\\n            k3d-servers='{{ k3d-servers }}' \\\n            k3d-network='{{ k3d-network }}' \\\n            _k3d-flags='{{ _k3d-flags }}' \\\n            linkerd-tag='{{ linkerd-tag }}' \\\n            controller-image='{{ controller-image }}' \\\n            proxy-image='{{ proxy-image }}' \\\n            linkerd-exec='{{ linkerd-exec }}' \\\n            linkerd-install\n    fi\n\n##\n## linkerd viz\n##\n\nlinkerd-viz *flags: _k3d-init\n    {{ _linkerd }} viz {{ flags }}\n\nlinkerd-viz-install: _linkerd-init linkerd-viz-load && _linkerd-viz-ready\n    {{ _linkerd }} viz install \\\n            --set='defaultRegistry={{ DOCKER_REGISTRY }}' \\\n            --set='linkerdVersion={{ linkerd-tag }}' \\\n            --set='defaultImagePullPolicy=Never' \\\n        | {{ _kubectl }} apply -f -\n\n# Wait for all test namespaces to be removed before uninstalling linkerd from the cluster.\nlinkerd-viz-uninstall:\n    {{ _linkerd }} viz uninstall \\\n        | {{ _kubectl }} delete -f -\n\n_linkerd-viz-images:\n    #!/usr/bin/env bash\n    set -euo pipefail\n    docker pull -q $({{ _prometheus-image-cmd }})\n    for img in \\\n        '{{ DOCKER_REGISTRY }}/metrics-api:{{ linkerd-tag }}' \\\n        '{{ DOCKER_REGISTRY }}/tap:{{ linkerd-tag }}' \\\n        '{{ DOCKER_REGISTRY }}/web:{{ linkerd-tag }}'\n    do\n        if [ -z $(docker image ls -q \"$img\") ]; then\n            echo \"Missing image: $img\" >&2\n            exec {{ just_executable() }} \\\n                linkerd-tag='{{ linkerd-tag }}' \\\n                linkerd-viz-build\n        fi\n    done\n\nlinkerd-viz-load: _linkerd-viz-images _k3d-init\n    for i in {1..3} ; do {{ _k3d-load }} \\\n        {{ DOCKER_REGISTRY }}/metrics-api:{{ linkerd-tag }} \\\n        {{ DOCKER_REGISTRY }}/tap:{{ linkerd-tag }} \\\n        {{ DOCKER_REGISTRY }}/web:{{ linkerd-tag }} \\\n        $({{ _prometheus-image-cmd }}) && exit || sleep 1 ; done\n\nlinkerd-viz-build:\n    TAG={{ linkerd-tag }} bin/docker-build-metrics-api\n    TAG={{ linkerd-tag }} bin/docker-build-tap\n    TAG={{ linkerd-tag }} bin/docker-build-web\n\n_linkerd-viz-ready:\n    {{ _kubectl }} wait pod --for=condition=ready \\\n        --namespace=linkerd-viz --selector='linkerd.io/extension=viz' \\\n        --timeout=1m\n\n# Ensure that a linkerd control plane is installed\n_linkerd-viz-uninit:\n    #!/usr/bin/env bash\n    set -euo pipefail\n    if {{ _kubectl }} get ns linkerd-viz >/dev/null 2>&1 ; then\n        {{ just_executable() }} \\\n            k3d-name='{{ k3d-name }}' \\\n            linkerd-exec='{{ linkerd-exec }}' \\\n            linkerd-viz-uninstall\n    fi\n\n# TODO linkerd-jaeger-install\n\n##\n## linkerd multicluster\n##\n\n_mc-target-k3d-flags := \"--k3s-arg --disable='local-storage,metrics-server@server:*' --k3s-arg '--cluster-cidr=10.23.0.0/24@server:*'\"\n\nlinkerd-mc-install: _linkerd-init\n    {{ _linkerd }} mc install --set='linkerdVersion={{ linkerd-tag }}' \\\n        | {{ _kubectl }} apply -f -\n\n# Wait for all test namespaces to be removed before uninstalling linkerd-multicluster.\nlinkerd-mc-uninstall:\n    {{ _linkerd }} mc uninstall \\\n        | {{ _kubectl }} delete -f -\n\nmc-target-k3d-delete:\n    #!/usr/bin/env bash\n    set -euo pipefail\n    if k3d cluster list '{{ k3d-name }}-target' >/dev/null 2>/dev/null; then\n        {{ just_executable() }} \\\n            k3d-name='{{ k3d-name }}-target' \\\n            k3d-delete\n    fi\n\n_mc-load: _k3d-init linkerd-load\n\n_mc-target-load:\n    @{{ just_executable() }} \\\n        k3d-name='{{ k3d-name }}-target' \\\n        k3d-k8s='{{ k3d-k8s }}' \\\n        k3d-agents='{{ k3d-agents }}' \\\n        k3d-servers='{{ k3d-servers }}' \\\n        k3d-network='{{ k3d-network }}' \\\n        _k3d-flags='{{ _mc-target-k3d-flags }}' \\\n        controller-image='{{ controller-image }}' \\\n        proxy-image='{{ proxy-image }}' \\\n        linkerd-exec='{{ linkerd-exec }}' \\\n        linkerd-tag='{{ linkerd-tag }}' \\\n        _pause-load \\\n        _mc-load\n\n# Run the multicluster tests with cluster setup\nmc-test: mc-test-load mc-test-run\n\nmc-test-build:\n    go build --mod=readonly \\\n        ./test/integration/multicluster/...\n\nmc-test-load: _mc-load _mc-target-load mc-flat-network-init\n\nk3d-source-server := \"k3d-\" + k3d-name + \"-server-0\"\nk3d-target-server := \"k3d-\" + k3d-name + \"-target-server-0\"\n\n_mc-route-output-fmt := \"-o jsonpath='ip route add {.spec.podCIDR} via {.status.addresses[?(.type==\\\"InternalIP\\\")].address}'\"\n_mc-print-source-route := _kubectl + \" \" + \"get node \" + k3d-source-server + \" \" + _mc-route-output-fmt\n_mc-print-target-route := \"kubectl --context=k3d-\" + k3d-name + \"-target \"+ \"get node \" + k3d-target-server + \" \" + _mc-route-output-fmt\n\n# Allow two k3d server nodes to participate in a flat network\nmc-flat-network-init:\n\t@docker exec k3d-{{k3d-name}}-server-0 `{{_mc-print-target-route}}`\n\t@docker exec k3d-{{k3d-name}}-target-server-0 `{{_mc-print-source-route}}`\n\n\n# Run the multicluster tests without any setup\nmc-test-run:\n    LINKERD_DOCKER_REGISTRY='{{ DOCKER_REGISTRY }}' \\\n        go test -v -test.timeout=20m --failfast --mod=readonly \\\n            ./test/integration/multicluster/... \\\n                -integration-tests \\\n                -linkerd='{{ justfile_directory() }}/bin/linkerd' \\\n                -multicluster-source-context='k3d-{{ k3d-name }}' \\\n                -multicluster-target-context='k3d-{{ k3d-name }}-target'\n\n##\n## GitHub Actions\n##\n\n# Format actionlint output for Github Actions if running in CI.\n_actionlint-fmt := if env_var_or_default(\"GITHUB_ACTIONS\", \"\") != \"true\" { \"\" } else {\n  '{{range $err := .}}::error file={{$err.Filepath}},line={{$err.Line}},col={{$err.Column}}::{{$err.Message}}%0A```%0A{{replace $err.Snippet \"\\\\n\" \"%0A\"}}%0A```\\n{{end}}'\n}\n\n# Lints all GitHub Actions workflows\naction-lint:\n    actionlint {{ if _actionlint-fmt != '' { \"-format '\" + _actionlint-fmt + \"'\" } else { \"\" } }} .github/workflows/*\n\n# Ensure all devcontainer versions are in sync\naction-dev-check:\n    just-dev check-action-images\n\n##\n## Other tools...\n##\n\nmd-lint:\n    markdownlint-cli2 '**/*.md' '!**/node_modules' '!target'\n\nsh-lint:\n    bin/shellcheck-all\n\n##\n## Git\n##\n\n# Display the git history minus Dependabot updates\nhistory *paths='.':\n    @git log --oneline --graph --invert-grep --author=\"dependabot\" -- {{ paths }}\n\n# Display the history of Dependabot changes\nhistory-dependabot *paths='.':\n    @git log --oneline --graph --author=\"dependabot\" -- {{ paths }}\n\n# vim: set ft=make :\n"
        },
        {
          "name": "multicluster",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "policy-controller",
          "type": "tree",
          "content": null
        },
        {
          "name": "policy-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "proxy-identity",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0302734375,
          "content": "[toolchain]\nchannel = \"1.83.0\"\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "testutil",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools.go",
          "type": "blob",
          "size": 0.203125,
          "content": "//go:build tools\n// +build tools\n\npackage tools\n\nimport (\n\t_ \"github.com/shurcooL/vfsgen\"\n\t_ \"golang.org/x/tools/cmd/goimports\"\n\t_ \"google.golang.org/grpc/cmd/protoc-gen-go-grpc\"\n\t_ \"k8s.io/code-generator\"\n)\n"
        },
        {
          "name": "viz",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}