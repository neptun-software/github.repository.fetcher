{
  "metadata": {
    "timestamp": 1736568006108,
    "page": 141,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/wire",
      "stars": 13269,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.2041015625,
          "content": "comment: off\ncoverage:\n  status:\n    project:\n      default:\n        target: 0\n        threshold: null\n        base: auto\n    patch:\n      default:\n        target: 0\n        threshold: null\n        base: auto\n"
        },
        {
          "name": ".contributebot",
          "type": "blob",
          "size": 0.2265625,
          "content": "{\n  \"issue_title_pattern\": \"^.*$\",\n  \"pull_request_title_response\": \"Please edit the title of this pull request with the name of the affected component, or \\\"all\\\", followed by a colon, followed by a short summary of the change.\"\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.013671875,
          "content": "* text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.6298828125,
          "content": "# This is the official list of Wire authors for copyright purposes.\n# This file is distinct from the CONTRIBUTORS files.\n# See the latter for an explanation.\n\n# Names should be added to this file as one of\n#     Organization's name\n#     Individual's name <submission email address>\n#     Individual's name <submission email address> <email2> <emailN>\n# See CONTRIBUTORS for the meaning of multiple email addresses.\n\n# Please keep the list sorted.\n\nGoogle LLC\nktr <ktr@syfm.me>\nKumbirai Tanekha <kumbirai.tanekha@gmail.com>\nOleg Kovalov <iamolegkovalov@gmail.com>\nYoichiro Shimizu <budougumi0617@gmail.com>\nZachary Romero <zacromero3@gmail.com>\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3271484375,
          "content": "# Code of Conduct\n\nThis project is covered under the [Go Code of Conduct][]. In summary:\n\n-   Treat everyone with respect and kindness.\n-   Be thoughtful in how you communicate.\n-   Donâ€™t be destructive or inflammatory.\n-   If you encounter an issue, please mail conduct@golang.org.\n\n[Go Code of Conduct]: https://golang.org/conduct\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.185546875,
          "content": "# How to Contribute\n\nWe would love to accept your patches and contributions to this project. Here is\nhow you can help.\n\n## Filing issues\n\nFiling issues is an important way you can contribute to the Wire Project. We\nwant your feedback on things like bugs, desired API changes, or just anything\nthat isn't working for you.\n\n### Bugs\n\nIf your issue is a bug, open one\n[here](https://github.com/google/wire/issues/new). The easiest way to file an\nissue with all the right information is to run `go bug`. `go bug` will print out\na handy template of questions and system information that will help us get to\nthe root of the issue quicker.\n\n### Changes\n\nUnlike the core Go project, we do not have a formal proposal process for\nchanges. If you have a change you would like to see in Wire, please file an\nissue with the necessary details.\n\n### Triaging\n\nThe Go Cloud team triages issues at least every two weeks, but usually within\ntwo business days. Bugs or feature requests are either placed into a **Sprint**\nmilestone which means the issue is intended to be worked on. Issues that we\nwould like to address but do not have time for are placed into the [Unplanned][]\nmilestone.\n\n[Unplanned]: https://github.com/google/wire/milestone/1\n\n## Contributing Code\n\nWe love accepting contributions! If your change is minor, please feel free\nsubmit a [pull request](https://help.github.com/articles/about-pull-requests/).\nIf your change is larger, or adds a feature, please file an issue beforehand so\nthat we can discuss the change. You're welcome to file an implementation pull\nrequest immediately as well, although we generally lean towards discussing the\nchange and then reviewing the implementation separately.\n\n### Finding something to work on\n\nIf you want to write some code, but don't know where to start or what you might\nwant to do, take a look at our [Unplanned][] milestone. This is where you can\nfind issues we would like to address but can't currently find time for. See if\nany of the latest ones look interesting! If you need help before you can start\nwork, you can comment on the issue and we will try to help as best we can.\n\n### Contributor License Agreement\n\nContributions to this project can only be made by those who have signed Google's\nContributor License Agreement. You (or your employer) retain the copyright to\nyour contribution, this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to\n<https://cla.developers.google.com/> to see your current agreements on file or\nto sign a new one.\n\nAs a personal contributor, you only need to sign the Google CLA once across all\nGoogle projects. If you've already signed the CLA, there is no need to do it\nagain. If you are submitting code on behalf of your employer, there's\n[a separate corporate CLA that your employer manages for you](https://opensource.google.com/docs/cla/#external-contributors).\n\n## Making a pull request\n\n*   Follow the normal\n    [pull request flow](https://help.github.com/articles/creating-a-pull-request/)\n*   Build your changes using Go 1.11 with Go modules enabled. Wire's continuous\n    integration uses Go modules in order to ensure\n    [reproducible builds](https://research.swtch.com/vgo-repro).\n*   Test your changes using `go test ./...`. Please add tests that show the\n    change does what it says it does, even if there wasn't a test in the first\n    place.\n*   Feel free to make as many commits as you want; we will squash them all into\n    a single commit before merging your change.\n*   Check the diffs, write a useful description (including something like\n    `Fixes #123` if it's fixing a bug) and send the PR out.\n*   Github will run tests against the PR. This should\n    happen within 10 minutes or so. If a test fails, go back to the coding stage\n    and try to fix the test and push the same branch again. You won't need to\n    make a new pull request, the changes will be rolled directly into the PR you\n    already opened. Wait for the tests again. There is no need to assign a reviewer\n    to the PR, the project team will assign someone for review during the\n    standard [triage](#triaging) process.\n\n## Code review\n\nAll submissions, including submissions by project members, require review. It is\nalmost never the case that a pull request is accepted without some changes\nrequested, so please do not be offended!\n\nWhen you have finished making requested changes to your pull request, please\nmake a comment containing \"PTAL\" (Please Take Another Look) on your pull\nrequest. GitHub notifications can be noisy, and it is unfortunately easy for\nthings to be lost in the shuffle.\n\nOnce your PR is approved (hooray!) the reviewer will squash your commits into a\nsingle commit, and then merge the commit onto the Wire master branch. Thank you!\n\n## Github code review workflow conventions\n\n(For project members and frequent contributors.)\n\nAs a contributor:\n\n-   Try hard to make each Pull Request as small and focused as possible. In\n    particular, this means that if a reviewer asks you to do something that is\n    beyond the scope of the Pull Request, the best practice is to file another\n    issue and reference it from the Pull Request rather than just adding more\n    commits to the existing PR.\n-   Adding someone as a Reviewer means \"please feel free to look and comment\";\n    the review is optional. Choose as many Reviewers as you'd like.\n-   Adding someone as an Assignee means that the Pull Request should not be\n    submitted until they approve. If you choose multiple Assignees, wait until\n    all of them approve. It is fine to ask someone if they are OK with being\n    removed as an Assignee.\n    -   Note that if you don't select any assignees, ContributeBot will turn all\n        of your Reviewers into Assignees.\n-   Make as many commits as you want locally, but try not to push them to Github\n    until you've addressed comments; this allows the email notification about\n    the push to be a signal to reviewers that the PR is ready to be looked at\n    again.\n-   When there may be confusion about what should happen next for a PR, be\n    explicit; add a \"PTAL\" comment if it is ready for review again, or a \"Please\n    hold off on reviewing for now\" if you are still working on addressing\n    comments.\n-   \"Resolve\" comments that you are sure you've addressed; let your reviewers\n    resolve ones that you're not sure about.\n-   Do not use `git push --force`; this can cause comments from your reviewers\n    that are associated with a specific commit to be lost. This implies that\n    once you've sent a Pull Request, you should use `git merge` instead of `git\n    rebase` to incorporate commits from the master branch.\n\nAs a reviewer:\n\n-   Be timely in your review process, especially if you are an Assignee.\n-   Try to use `Start a Review` instead of single comments, to reduce email\n    spam.\n-   \"Resolve\" your own comments if they have been addressed.\n-   If you want your review to be blocking, and are not currently an Assignee,\n    add yourself as an Assignee.\n\nWhen squashing-and-merging:\n\n-   Ensure that **all** of the Assignees have approved.\n-   Do a final review of the one-line PR summary, ensuring that it accurately\n    describes the change.\n-   Delete the automatically added commit lines; these are generally not\n    interesting and make commit history harder to read.\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 1.8173828125,
          "content": "# This is the official list of people who can contribute\n# (and typically have contributed) code to the Wire repository.\n# The AUTHORS file lists the copyright holders; this file\n# lists people.  For example, Google employees are listed here\n# but not in AUTHORS, because Google holds the copyright.\n#\n# Names should be added to this file only after verifying that\n# the individual or the individual's organization has agreed to\n# the appropriate Contributor License Agreement, found here:\n#\n#     http://code.google.com/legal/individual-cla-v1.0.html\n#     http://code.google.com/legal/corporate-cla-v1.0.html\n#\n# The agreement for individuals can be filled out on the web.\n#\n# When adding J Random Contributor's name to this file,\n# either J's name or J's organization's name should be\n# added to the AUTHORS file, depending on whether the\n# individual or corporate CLA was used.\n\n# Names should be added to this file like so:\n#     Individual's name <submission email address>\n#     Individual's name <submission email address> <email2> <emailN>\n#\n# An entry with multiple email addresses specifies that the\n# first address should be used in the submit logs and\n# that the other addresses should be recognized as the\n# same person when interacting with Git.\n\n# Please keep the list sorted.\n\nChris Lewis <cflewis@google.com> <cflewis@golang.org> <c@chris.to>\nChristina Austin <4240737+clausti@users.noreply.github.com>\nEno Compton <enocom@google.com>\nIssac Trotts <issactrotts@google.com> <issac.trotts@gmail.com>\nktr <ktr@syfm.me>\nKumbirai Tanekha <kumbirai.tanekha@gmail.com>\nOleg Kovalov <iamolegkovalov@gmail.com>\nRobert van Gent <rvangent@google.com> <vangent@gmail.com>\nRoss Light <light@google.com> <ross@zombiezen.com>\nTuo Shan <shantuo@google.com> <sturbo89@gmail.com>\nYoichiro Shimizu <budougumi0617@gmail.com>\nZachary Romero <zacromero3@gmail.com>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9326171875,
          "content": "# Wire: Automated Initialization in Go\n\n[![Build Status](https://github.com/google/wire/actions/workflows/tests.yml/badge.svg?branch=main)](https://github.com/google/wire/actions)\n[![godoc](https://godoc.org/github.com/google/wire?status.svg)][godoc]\n[![Coverage](https://codecov.io/gh/google/wire/branch/master/graph/badge.svg)](https://codecov.io/gh/google/wire)\n\n\nWire is a code generation tool that automates connecting components using\n[dependency injection][]. Dependencies between components are represented in\nWire as function parameters, encouraging explicit initialization instead of\nglobal variables. Because Wire operates without runtime state or reflection,\ncode written to be used with Wire is useful even for hand-written\ninitialization.\n\nFor an overview, see the [introductory blog post][].\n\n[dependency injection]: https://en.wikipedia.org/wiki/Dependency_injection\n[introductory blog post]: https://blog.golang.org/wire\n[godoc]: https://godoc.org/github.com/google/wire\n[travis]: https://travis-ci.com/google/wire\n\n## Installing\n\nInstall Wire by running:\n\n```shell\ngo install github.com/google/wire/cmd/wire@latest\n```\n\nand ensuring that `$GOPATH/bin` is added to your `$PATH`.\n\n## Documentation\n\n- [Tutorial][]\n- [User Guide][]\n- [Best Practices][]\n- [FAQ][]\n\n[Tutorial]: ./_tutorial/README.md\n[Best Practices]: ./docs/best-practices.md\n[FAQ]: ./docs/faq.md\n[User Guide]: ./docs/guide.md\n\n## Project status\n\nAs of version v0.3.0, Wire is *beta* and is considered feature complete. It\nworks well for the tasks it was designed to perform, and we prefer to keep it\nas simple as possible.\n\nWe'll not be accepting new features at this time, but will gladly accept bug\nreports and fixes.\n\n## Community\n\nFor questions, please use [GitHub Discussions](https://github.com/google/wire/discussions).\n\nThis project is covered by the Go [Code of Conduct][].\n\n[Code of Conduct]: ./CODE_OF_CONDUCT.md\n[go-cloud mailing list]: https://groups.google.com/forum/#!forum/go-cloud\n"
        },
        {
          "name": "_tutorial",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.1845703125,
          "content": "module github.com/google/wire\n\ngo 1.12\n\nrequire (\n\tgithub.com/google/go-cmp v0.2.0\n\tgithub.com/google/subcommands v1.2.0\n\tgithub.com/pmezard/go-difflib v1.0.0\n\tgolang.org/x/tools v0.17.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.1494140625,
          "content": "github.com/google/go-cmp v0.2.0 h1:+dTQ8DZQJz0Mb/HjFlkptS1FeQ4cWSnN941F8aEG4SQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/subcommands v1.2.0 h1:vWQspBTo2nEqTUFita5/KeEWlUL8kQObDFbub/EN9oE=\ngithub.com/google/subcommands v1.2.0/go.mod h1:ZjhPrFU+Olkh9WazFPsl27BQ4UPiG37m3yTrtFlrHVk=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=\ngolang.org/x/crypto v0.18.0/go.mod h1:R0j02AL6hcrfOiy9T4ZYp/rcWeMxM3L6QYxlOuEG1mg=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.14.0 h1:dGoOF9QVLYng8IHTm7BAyWqCqSheQ5pYWGhzW00YJr0=\ngolang.org/x/mod v0.14.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\ngolang.org/x/net v0.20.0/go.mod h1:z8BVo6PvndSri0LbOE3hAn0apkU+1YvI6E70E9jsnvY=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sync v0.6.0 h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=\ngolang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.16.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=\ngolang.org/x/term v0.16.0/go.mod h1:yn7UURbUtPyrVJPGPq404EukNFxcm/foM+bV/bfcDsY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\ngolang.org/x/tools v0.17.0 h1:FvmRgNOcs3kOa+T20R1uhfP9F6HgG2mfxDv1vrx1Htc=\ngolang.org/x/tools v0.17.0/go.mod h1:xsh6VxdV005rRVaS6SSAf9oiAqljS7UZUacMZ8Bnsps=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "wire.go",
          "type": "blob",
          "size": 7.5751953125,
          "content": "// Copyright 2018 The Wire Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Package wire contains directives for Wire code generation.\n// For an overview of working with Wire, see the user guide at\n// https://github.com/google/wire/blob/master/docs/guide.md\n//\n// The directives in this package are used as input to the Wire code generation\n// tool. The entry point of Wire's analysis are injector functions: function\n// templates denoted by only containing a call to Build. The arguments to Build\n// describes a set of providers and the Wire code generation tool builds a\n// directed acylic graph of the providers' output types. The generated code will\n// fill in the function template by using the providers from the provider set to\n// instantiate any needed types.\npackage wire\n\n// ProviderSet is a marker type that collects a group of providers.\ntype ProviderSet struct{}\n\n// NewSet creates a new provider set that includes the providers in its\n// arguments. Each argument is a function value, a provider set, a call to\n// Struct, a call to Bind, a call to Value, a call to InterfaceValue or a call\n// to FieldsOf.\n//\n// Passing a function value to NewSet declares that the function's first\n// return value type will be provided by calling the function. The arguments\n// to the function will come from the providers for their types. As such, all\n// the function's parameters must be of non-identical types. The function may\n// optionally return an error as its last return value and a cleanup function\n// as the second return value. A cleanup function must be of type func() and is\n// guaranteed to be called before the cleanup function of any of the\n// provider's inputs. If any provider returns an error, the injector function\n// will call all the appropriate cleanup functions and return the error from\n// the injector function.\n//\n// Passing a ProviderSet to NewSet is the same as if the set's contents\n// were passed as arguments to NewSet directly.\n//\n// The behavior of passing the result of a call to other functions in this\n// package are described in their respective doc comments.\n//\n// For compatibility with older versions of Wire, passing a struct value of type\n// S to NewSet declares that both S and *S will be provided by creating a new\n// value of the appropriate type by filling in each field of S using the\n// provider of the field's type. This form is deprecated and will be removed in\n// a future version of Wire: new providers sets should use wire.Struct.\nfunc NewSet(...interface{}) ProviderSet {\n\treturn ProviderSet{}\n}\n\n// Build is placed in the body of an injector function template to declare the\n// providers to use. The Wire code generation tool will fill in an\n// implementation of the function. The arguments to Build are interpreted the\n// same as NewSet: they determine the provider set presented to Wire's\n// dependency graph. Build returns an error message that can be sent to a call\n// to panic().\n//\n// The parameters of the injector function are used as inputs in the dependency\n// graph.\n//\n// Similar to provider functions passed into NewSet, the first return value is\n// the output of the injector function, the optional second return value is a\n// cleanup function, and the optional last return value is an error. If any of\n// the provider functions in the injector function's provider set return errors\n// or cleanup functions, the corresponding return value must be present in the\n// injector function template.\n//\n// Examples:\n//\n//\tfunc injector(ctx context.Context) (*sql.DB, error) {\n//\t\twire.Build(otherpkg.FooSet, myProviderFunc)\n//\t\treturn nil, nil\n//\t}\n//\n//\tfunc injector(ctx context.Context) (*sql.DB, error) {\n//\t\tpanic(wire.Build(otherpkg.FooSet, myProviderFunc))\n//\t}\nfunc Build(...interface{}) string {\n\treturn \"implementation not generated, run wire\"\n}\n\n// A Binding maps an interface to a concrete type.\ntype Binding struct{}\n\n// Bind declares that a concrete type should be used to satisfy a dependency on\n// the type of iface. iface must be a pointer to an interface type, to must be a\n// pointer to a concrete type.\n//\n// Example:\n//\n//\ttype Fooer interface {\n//\t\tFoo()\n//\t}\n//\n//\ttype MyFoo struct{}\n//\n//\tfunc (MyFoo) Foo() {}\n//\n//\tvar MySet = wire.NewSet(\n//\t\twire.Struct(new(MyFoo))\n//\t\twire.Bind(new(Fooer), new(MyFoo)))\nfunc Bind(iface, to interface{}) Binding {\n\treturn Binding{}\n}\n\n// bindToUsePointer is detected by the wire tool to indicate that Bind's second argument should take a pointer.\n// See https://github.com/google/wire/issues/120 for details.\nconst bindToUsePointer = true\n\n// A ProvidedValue is an expression that is copied to the generated injector.\ntype ProvidedValue struct{}\n\n// Value binds an expression to provide the type of the expression.\n// The expression may not be an interface value; use InterfaceValue for that.\n//\n// Example:\n//\n//\tvar MySet = wire.NewSet(wire.Value([]string(nil)))\nfunc Value(interface{}) ProvidedValue {\n\treturn ProvidedValue{}\n}\n\n// InterfaceValue binds an expression to provide a specific interface type.\n// The first argument is a pointer to the interface which user wants to provide.\n// The second argument is the actual variable value whose type implements the\n// interface.\n//\n// Example:\n//\n//\tvar MySet = wire.NewSet(wire.InterfaceValue(new(io.Reader), os.Stdin))\nfunc InterfaceValue(typ interface{}, x interface{}) ProvidedValue {\n\treturn ProvidedValue{}\n}\n\n// A StructProvider represents a named struct.\ntype StructProvider struct{}\n\n// Struct specifies that the given struct type will be provided by filling in\n// the fields in the struct that have the names given.\n//\n// The first argument must be a pointer to the struct type. For a struct type\n// Foo, Wire will use field-filling to provide both Foo and *Foo. The remaining\n// arguments are field names to fill in. As a special case, if a single name \"*\"\n// is given, then all of the fields in the struct will be filled in.\n//\n// For example:\n//\n//\ttype S struct {\n//\t  MyFoo *Foo\n//\t  MyBar *Bar\n//\t}\n//\tvar Set = wire.NewSet(wire.Struct(new(S), \"MyFoo\")) -> inject only S.MyFoo\n//\tvar Set = wire.NewSet(wire.Struct(new(S), \"*\")) -> inject all fields\nfunc Struct(structType interface{}, fieldNames ...string) StructProvider {\n\treturn StructProvider{}\n}\n\n// StructFields is a collection of the fields from a struct.\ntype StructFields struct{}\n\n// FieldsOf declares that the fields named of the given struct type will be used\n// to provide the types of those fields. The structType argument must be a\n// pointer to the struct or a pointer to a pointer to the struct it wishes to reference.\n//\n// The following example would provide Foo and Bar using S.MyFoo and S.MyBar respectively:\n//\n//\ttype S struct {\n//\t\tMyFoo Foo\n//\t\tMyBar Bar\n//\t}\n//\n//\tfunc NewStruct() S { /* ... */ }\n//\tvar Set = wire.NewSet(wire.FieldsOf(new(S), \"MyFoo\", \"MyBar\"))\n//\n//\tor\n//\n//\tfunc NewStruct() *S { /* ... */ }\n//\tvar Set = wire.NewSet(wire.FieldsOf(new(*S), \"MyFoo\", \"MyBar\"))\n//\n//\tIf the structType argument is a pointer to a pointer to a struct, then FieldsOf\n//\tadditionally provides a pointer to each field type (e.g., *Foo and *Bar in the\n//\texample above).\nfunc FieldsOf(structType interface{}, fieldNames ...string) StructFields {\n\treturn StructFields{}\n}\n"
        }
      ]
    }
  ]
}