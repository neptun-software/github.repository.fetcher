{
  "metadata": {
    "timestamp": 1736568020271,
    "page": 157,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "direnv/direnv",
      "stars": 12869,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.189453125,
          "content": "*.sw?\n.direnv\n.gopath\n/direnv\n/direnv.test\n/dist\n/test/config\n/test/data\n/test/scenarios/inherited/.envrc\n\n# for context: https://github.com/Homebrew/homebrew-bundle/pull/552\nBrewfile.lock.json\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.1982421875,
          "content": "linters:\n  presets:\n    - bugs\n    - unused\n  enable:\n    - gofmt\n    - misspell\n    - revive\n    - stylecheck\n  disable:\n    # direnv is not a web server, context is not strictly necessary.\n    - noctx\n"
        },
        {
          "name": ".mergify.yml",
          "type": "blob",
          "size": 0.5234375,
          "content": "queue_rules:\n  - name: default\n    queue_conditions:\n      - base=master\n      - label~=merge-queue|dependencies\n    merge_conditions:\n      - check-success=Analyze (go)\n      - check-success=Go Build (macos-latest)\n      - check-success=Go Build (ubuntu-latest)\n      - check-success=Go Build (windows-latest)\n      - check-success=Nix Build (macos-latest)\n      - check-success=Nix Build (ubuntu-latest)\n    merge_method: rebase\n\npull_request_rules:\n  - name: refactored queue action rule\n    conditions: []\n    actions:\n      queue:\n"
        },
        {
          "name": "Brewfile",
          "type": "blob",
          "size": 0.138671875,
          "content": "# Run `brew bundle` to install these dev dependencies:\nbrew \"go\"\nbrew \"shellcheck\"\nbrew \"golangci-lint\"\nbrew \"elvish\"\nbrew \"fish\"\nbrew \"tcsh\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 28.845703125,
          "content": "\n2.35.0 / 2024-10-07\n==================\n\n  * doc: Add version requirement for load_dotenv option (#1326)\n  * doc: fix broken link (#1327)\n  * doc: update elvish docs (#1305)\n  * docs: change Guix link to its package search. (#1268)\n  * feat: add opam support (#1298)\n  * fix: add NuShell into list of supported shells (#1260)\n  * fix: close tmp file (#1272)\n  * fix: direnv edit: use `editor` when EDITOR not found, closes #1246 (#1247)\n  * fix: release script\n  * fix: stdlib: enable flakes when use flake is used (#1299)\n  * fix: stdlib: export GOBIN for layout_go (#1286)\n  * fix: stdlib: update layout_python to resolve deprecation warning (#1176)\n  * fix: using PWD in .env files (#1052)\n  * test: Fix Murex python-layout test (#1293)\n\n2.34.0 / 2024-03-01\n==================\n\n  * doc: README.md, man pages: it's typos (#1230)\n  * doc: add shell setup instructions for oh-my-zsh (#1070)\n  * doc: added fetchurl manpage link to README.md\n  * doc: document XDG_DATA_HOME (#1185)\n  * doc: update installation.md for Gentoo (#1206)\n  * feat: add Murex support (#1242)\n  * feat: added systemd shell for export (#1126)\n  * feat: allow to disable warn timeouts (#1209)\n  * feat: hide env diff (#1223, #1234)\n  * feat: made 'direnv export' non private (#1229)\n  * fix: `use_julia` should not set LD_LIBRARY_PATH (#900)\n  * fix: add missing deps for release in go.mod\n  * fix: avoid use of regex in bash hook output (#1043)\n  * fix: direnv.toml.1.md: add examples for $HOME expansion\n  * fix: stdlib: use_flake: don't keep old generations around (#1089)\n  * fix: stdlib: use_node: strip leading v from version (#1071)\n  * fix: support Bash 5.1 array PROMPT_COMMAND (#1208)\n  * fix: update stdlib.sh to avoid deprecation warning (#1221)\n  * fix: update zsh syntax in internal/cmd/shell_zsh.go (#1075)\n\n2.33.0 / 2023-11-29\n==================\n\n  * doc: add a Nushell section to `hook.md` by @amtoine in https://github.com/direnv/direnv/pull/1175\n  * doc: fix broken links in installation.md by @just1602 in https://github.com/direnv/direnv/pull/1110\n  * doc: show how to run tests by @bukzor-sentryio in https://github.com/direnv/direnv/pull/1137\n  * doc: update NixOS installation instructions by @Gerg-L in https://github.com/direnv/direnv/pull/1172\n  * doc: update direnv.toml.1.md by @Ativerc in https://github.com/direnv/direnv/pull/1099\n  * feat: `direnv status --json` by @shivaraj-bh in https://github.com/direnv/direnv/pull/1142\n  * feat: add PowerShell Support by @bamsammich in https://github.com/direnv/direnv/pull/1171\n  * feat: add mergify configuration by @Mic92 in https://github.com/direnv/direnv/pull/1147\n  * feat: add support for armv7l platform in install.sh by @ardje in https://github.com/direnv/direnv/pull/1162\n  * feat: add watch print command by @Mic92 in https://github.com/direnv/direnv/pull/1198\n  * feat: alias `direnv disallow` to deny by @will in https://github.com/direnv/direnv/pull/1182\n  * feat: stdlib: create CACHEDIR.TAG inside .direnv by @Mic92 in https://github.com/direnv/direnv/pull/1148\n  * fix: `allowPath` for `LoadedRC` by @shivaraj-bh in https://github.com/direnv/direnv/pull/1157\n  * fix: don't prompt to allow if user explicitly denied by @Gabriella439 in https://github.com/direnv/direnv/pull/1158\n  * fix: man/direnv-stdlib: fix obsolete opam-env example by @mzacho in https://github.com/direnv/direnv/pull/1170\n  * fix: print correct path in source_env log message by @wentasah in https://github.com/direnv/direnv/pull/1144\n  * fix: quote tcsh $PATH, to avoid failure on whitespace by @bukzor-sentryio in https://github.com/direnv/direnv/pull/1139\n  * fix: remove redundant nil check in `CommandsDispatch` by @Juneezee in https://github.com/direnv/direnv/pull/1166\n  * fix: update nixpkgs and shellcheck by @Mic92 in https://github.com/direnv/direnv/pull/1146\n\n2.32.3 / 2023-05-20\n==================\n\n  * fix: incorrect escape sequences during Loads under git-bash (Windows) (#1085)\n  * fix: skip some tests for IBM Z mainframe's z/OS operating system (#1094)\n  * fix: stdlib: use_guix: Switch to guix shell. (#1045)\n  * fix: stat the already open rc file rather than another path based one on it (#1044)\n  * fix: remove deprecated io/ioutil uses (#1042)\n  * fix: spelling fixes (#1041)\n  * fix: appease Go 1.19 gofmt (#1040)\n  * fix: pass BASH_PATH to make, matches the nixpkgs derivation (#1006)\n  * fix: stdlib/layout_python: exclude patchlevel from $python_version (#1033)\n  * doc: add Windows installation with winget (#1096)\n  * doc: link 12factor webpage for more clarity (#1095)\n  * website: add Plausible analytics\n\n2.32.2 / 2022-11-24\n==================\n\n  * doc: Add stdlib's layout_pyenv to docs (#969)\n  * doc: Fix broken link (#991)\n  * doc: Minor typo fix (#1013)\n  * doc: `$XDG_CONFIG_HOME/direnv/direnv.toml` => add (typically ~/.config/direnv/direnv.toml) (#985)\n  * doc: add quickenv to Related projects (#970)\n  * feat: Update layout anaconda to accept a path to a yml file (#962)\n  * feat: install.sh: can specify direnv version (#1012)\n  * fix: elvish: replace deprecated `except` with `catch` (#987)\n  * fix: installer.sh: make direnv executable for all\n  * fix: path escaping (#975)\n  * fix: stdlib: only use ANSI escape on TTY (#958)\n  * fix: test: remove mentions of DIRENV_MTIME (#1009)\n  * fix: test: use lowercase -d flag for base64 decoding of DIRENV_DIFF (#996)\n  * update: build(deps): bump github.com/BurntSushi/toml from 1.1.0 to 1.2.0 (#974)\n\n2.32.1 / 2022-06-21\n==================\n\n  * feat: Support custom VIRTUAL_ENV for layout_python (#876)\n  * fix: vendor go-dotenv (#955)\n\n2.32.0 / 2022-06-13\n==================\n\n  * feat: Add gha shell for GitHub Actions (#910)\n  * feat: Enable ppc64le builds (#947)\n  * feat: allow conda environment names to be detected from environment.yml (#909)\n  * feat: source_up_if_exists: A strict_env compatible version of source_up (#921)\n  * feat: Expand ~/ in whitelist paths (#931)\n  * feat: Add \"block\" and \"revoke\" as aliases of the \"deny\" command (#935)\n  * feat: Add \"permit\" and \"grant\" as aliases of the \"allow\" command (#935)\n  * fix: update go-dotenv\n  * fix: fetchurl: store files as hex (#930)\n  * fix: fetchurl: only store 200 responses (#944)\n  * fix: Ensure status log messages are printed with normal color (#884)\n  * fix: Clarify handling of .env files (#941)\n  * fix: Update shell_elvish.go (#896)\n  * fix: stdlib.sh: remove dependency on tput (#932)\n  * fix: Use setenv in vim to allow non alphanumeric vars (#901)\n  * fix: install.sh: add information about bin_path (#920)\n  * fix: Treat `mingw*` as windows (direnv/direnv#918) (#919)\n  * fix: man: clarify paths (#929)\n  * fix: installation.md: Fix Fedora package link (#915)\n  * Merge pull request #874 from direnv/refactor\n  * chore: rc: stop using --noprofile --norc\n  * chore: rc: prepare stdin earlier\n  * chore: rc: install interrupt handler earlier\n  * chore: stdlib: factor out stdlib preparation\n  * chore: fix CI\n  * chore: source_env: show full path (#870)\n  * chore: Sort shells in DetectShell\n  * chore: Enable codeql action (#938)\n  * chore: Set permissions for GitHub actions (#937)\n  * go: bump golang.org/x/sys for linux/loong64 support (#946)\n  * build(deps): bump actions/checkout from 2.4.0 to 3.0.0 (#922)\n  * build(deps): bump actions/checkout from 3.0.0 to 3.0.1 (#933)\n  * build(deps): bump actions/checkout from 3.0.1 to 3.0.2 (#936)\n  * build(deps): bump actions/setup-go from 2.1.5 to 3.0.0 (#923)\n  * build(deps): bump actions/setup-go from 3.0.0 to 3.1.0 (#943)\n  * build(deps): bump actions/setup-go from 3.1.0 to 3.2.0 (#950)\n  * build(deps): bump cachix/install-nix-action from 16 to 17 (#925)\n  * build(deps): bump github.com/BurntSushi/toml from 0.4.1 to 1.1.0 (#924)\n\n2.31.0 / 2022-03-26\n==================\n\n  * Don't load .env files by default (#911)\n  * doc: `~/.config/direnv/direnvrc` is the default\n  * doc: fix the broken link to arch linux (#892)\n  * Re-add accidentally deleted comment line (#881)\n  * fix version test\n\n2.30.3 / 2022-01-05\n==================\n\n  * Allow skipping `.env` autoload (#878)\n  * stdlib: add `env_vars_required` (#872) (#872)\n  * Test whether version.txt contains semantic version (#871)\n\n2.30.2 / 2021-12-28\n==================\n\n  * FIX: version: trim surrounding spaces (#869)\n  * build(deps): bump actions/setup-go from 2.1.4 to 2.1.5 (#866)\n  * move most code under internal/cmd (#865)\n\n2.30.1 / 2021-12-24\n==================\n\n  * FIX: ignore .envrc and .env if they are not files (#864)\n\n2.30.0 / 2021-12-23\n==================\n\n  * Add automatic `.env` load (#845)\n  * Resolve symlinks during `direnv deny` (#851)\n  * update installer for Apple Silicon (#849)\n  * stdlib: use_flake handle no layout dir (#861)\n  * embed stdlib.sh (#782)\n  * embed version.txt\n  * go mod update\n  * make dist: remove references to Go\n\n2.29.0 / 2021-11-28\n==================\n\n  * stdlib: add use_flake function (#847)\n  * docs(direnv.toml) Add config.toml clarification (#831)\n  * docs(install): fix macos links (#841)\n  * Corrects stdlib link in Ruby docs (#837)\n  * stdlib.sh: Fix removal of temp file (#830)\n  * install.sh: add aarch64 support\n  * Updated conditional for zsh hook to be more forgiving (#808)\n  * Add -r flag for matching Git branches with a regexp (#800)\n  * Add docs about pipenv (#797)\n  * Enable syntax hilights to the quick demo code (#752)\n  * Fixed extra quotes for lower alpha characters (#783)\n  * Remove noisy warning about PS1 again (#781)\n\n2.28.0 / 2021-03-12\n==================\n\n  * Merge pull request #779 from wingrunr21/go_1_16\n  * Build for darwin/arm64. Resolves #738\n  * Update to go 1.16\n  * test: Fix errors for elvish test (#767)\n  * tcsh: fix variable escaping (#778)\n  * Change DESTDIR to PREFIX in development.md (#774)\n  * go: use the /v2 prefix (#765)\n  * Relax README's recommendation for nix-direnv (#763)\n  * man/direnv.1.md: add FILES section (fix #758) (#759)\n  * Add/update fish tests (#754)\n  * build(deps): bump golang.org/x/mod from 0.4.0 to 0.4.1 (#749)\n  * Fix typo \"avaible\" in install.sh (#750)\n  * docs: improve the use_node documentation\n\n2.27.0 / 2021-01-01\n==================\n\n  * fixed fish shell hook to work with eval (#743)\n  * dist: remove darwin/386\n  * nix: update to nixpkgs@nixos-20.09\n  * packaging: stop vendoring the Go code (#739)\n  * packaging: change packaging. DESTDIR -> PREFIX, fish hook (#741)\n\n2.26.0 / 2020-12-27\n==================\n\n  * updated fish hook support issue (#732)\n  * ci: add basic windows CI (#737)\n  * test: fix shellcheck usage in ./test/stdlib.bash\n  * test: fix use_julia test for NixOS\n  * remove dead code: rootDir\n  * fix: create temp dir in current working dir for one test (#735)\n  * Add `dotenv_if_exists` (#734)\n  * stdlib: add watch_dir command (#697)\n\n2.25.2 / 2020-12-12\n==================\n\nThere was a generation issue in 2.25.1. This release only bumps the version\nto do another release.\n\n2.25.1 / 2020-12-11\n==================\n\n  * stdlib.go: re-generate (fixes #707)\n  * README: remove old Azure badge\n  * build(deps): bump golang.org/x/mod from 0.3.0 to 0.4.0 (#730)\n\n2.25.0 / 2020-12-03\n==================\n\n  * dist: add linux/arm64 and linux/ppc64\n  * Added use_nodenv to stdlib (#727)\n  * Fix proposal for  #707, broken direnv compatibility under Windows (#723)\n  * fix: layout anaconda <env_name_or_prefix> (#717)\n  * Add on_git_branch command to detect whether a specific git branch is checked out (#702)\n\n2.24.0 / 2020-11-15\n==================\n\n  * direnv_load: avoid leaking DIRENV_DUMP_FILE_PATH (#715)\n  * Add strict_env and unstrict_env (#572)\n  * stdlib: add `use_vim` to source local vimrc (#497)\n  * stdlib: add source_env_if_exists (#714)\n  * Wording (#713)\n  * build(deps): bump actions/checkout from v2.3.3 to v2.3.4 (#709)\n  * build(deps): bump cachix/install-nix-action from v11 to v12 (#710)\n  * Fix XDG_CACHE_HOME path (#711)\n  * rc: make file existence check more robust (#706)\n\n2.23.1 / 2020-10-22\n==================\n\n  * fix: handle links on Mac when using `allow` (#696)\n  * fix: use restored env in exec (#695)\n  * stdlib: add basename and dirname from realpath (#693)\n  * stdlib.sh: remove tabs\n  * dist: compile all the binaries statically\n\n2.23.0 / 2020-10-10\n==================\n\n  * stdlib: add source_url function (#562)\n  * direnv: add fetchurl command (#686)\n  * shell: Update Elvish hook to replace deprecated `explode` (#685)\n\n2.22.1 / 2020-10-06\n==================\n\n  * Look for stdlib in DIRENV_CONFIG (#679)\n  * stdlib: use Bash 3.0-compatible array expansion (#676)\n  * Clarify path to direnv.toml (#678)\n  * stdlib/use_julia: fix a bug in parameter substitution for empty or (#667)\n  * man: update the layout_go documentation\n  * stdlib:  adds GOPATH/bin to PATH (#670)\n\n2.22.0 / 2020-09-01\n==================\n\n  * stdlib: use_julia <version> (#666)\n  * stdlib: semver_search (#665)\n  * direnv-stdlib.1: add layout julia (#661)\n  * README: spelling correction (#660)\n  * README.md: add shadowenv to similar projects (#659)\n  * docs: remove Snap from the installations\n  * OSX -> macOS (#655)\n  * Update shell_fish.go to use \\X for UTF encoding (#584)\n  * Change XDG_CONFIG_DIR to XDG_CONFIG_HOME (#641)\n  * Streamline core algorithm of export and exec (#636)\n  * test: add failure test-case (#637)\n\n2.21.3 / 2020-05-08\n==================\n\n  * Replace `direnv expand_path` with pure bash (#631)\n  * Fix #594 - write error to fd 3 on Windows (#634)\n  * Make direnv hook output work on Windows (#632)\n  * Update hook.md to remove \">\" typo in Fish instructions (#624)\n  * stdlib: `layout go` adds layout dir to GOPATH (#622)\n  * direnv-stdlib.1: add layout php (#619)\n  * stdlib: add PATH_rm <pattern> [<pattern> ...] (#615)\n  * Error handling tuples (#610)\n  * Merge pull request #607 from punitagrawal/master\n  * test: elvish: Fix evaluation function\n  * stdlib.sh: Re-write grep pattern to avoid shell escape\n  * man: Escape '.' at the beginning of line to remove manpage warning\n  * stdlib: fix direnv_config_dir usage (#601)\n  * direnv version: improve error message (#599)\n  * README: fix NixOS link in installation.md (#589)\n  * stdlib: add direnv_apply_dump <file> (#587)\n  * Simplify direnv_load and make it work even when the command crashes. (#568)\n  * docs: fix fish installation instruction\n  * test: test for utf-8 compatibility\n  * config: add [global] section\n  * config: add strict_env option\n  * config: fix warn_timeout parsing (#582)\n  * Github action for releases\n  * config: fix the configuration file selection\n  * stdlib: fix shellcheck warnings\n\n2.21.2 / 2020-01-28\n==================\n\nMaking things stable again.\n\n  * stdlib: revert the `set -euo pipefail` change. It was causing too many\n    issues for users.\n  * direnv allow: fix the allow migration by also creating the parent target\n    directory.\n\n2.21.1 / 2020-01-26\n==================\n\nFix release\n\n  * stdlib: fix unused variable in `use node`\n  * stdlib: fix unused variable in `source_up`\n  * test: add stdlib test skeleton\n  * add dist release utility\n\n2.21.0 / 2020-01-25\n==================\n\nThis is a massive release!\n\n## Highlights\n\nYou can now hit Ctrl-C during a long reload in bash and zsh and it will not\nloop anymore.\n\nCommands that use `direnv_load` won't fail when there is an output to stdout\nanymore (eg: `use_nix`).\n\nDirenv now also loads files from `.config/direnv/lib/*.sh`. This is intended\nto be used by third-party tools to augment direnv with their own stdlib\nfunctions.\n\nThe `.envrc` is now loaded with `set -euo pipefail`. This will more likely\nexpose issues with existing `.envrc` files.\n\n## docs\n\n  * Update README.md (#536)\n  * Add link to asdf-direnv. (#535)\n  * docs: fix invalid link (#533)\n  * adds experimental curl based installer (#539)\n\n## commands\n\n  * change where the allow files are being stored\n  * direnv status: also show the config\n  * direnv exec: improve the error message\n  * warn if PS1 is being exported\n  * handle SIGINT during export in bash\n  * export: display the full RC path instead of a relative one\n  * direnv exec: the DIR argument is always required (#493)\n\n## build\n\n  * ci: use GitHub Actions instead of Azure Pipelines\n  * staticcheck (#543)\n  * use go modules\n  * make: handle when /dev/stderr doesn't exist (#491)\n  * site: use jekyll to render the website\n  * Pin nixpkgs to current NixOS 19.09 channel (#526)\n\n## shells\n\n  * fix elvish hook\n  * Use `fish_preexec` hook instead of `fish_prompt` (#512)\n  * Use `fish_postexec` to make sure direnv hook executed 'after' the directory has changed when using `cd`.\n  * improve zsh hook (#514)\n\n## config.toml\n\n  * rename the configuration from config.toml to direnv.toml (#498)\n  * add warn_timeout option. DIRENV_WARN_TIMEOUT is now deprecated.\n\n## stdlib\n\n  * `direnv_load` can now handle stdout outputs\n  * stdlib: add layout_julia\n  * Handle failing pipenv on empty file and avoid an extra pipenv execution (#510)\n  * fix `source_env` behaviour when the file doesn't exists (#487)\n  * `watch_file` can now watch multiple files in a single invocation (#524)\n  * `layout_python`: prefer venv over virtualenv. Do not export VIRTUAL_ENV if $python_version is unavailable or a virtual environment does not exist/can't be created\n  * Adds layout_pyenv (#505)\n  * Fix `source_up` docs to explain that search starts in parent directory (#518)\n  * fix `path_add` to not leak local variables\n  * `layout_pyenv`: support multiple python versions (#525)\n  * Add a `direnv_version <version_at_least>` command to check the direnv\n    version.\n  * `dotenv`: handle undefined variables\n  * source files from `.config/direnv/lib/*.sh`\n  * stdlib: set `-euo pipefail`\n\n2.20.1 / 2019-03-31\n==================\n\n  * ci: try to fix releases\n\n2.20.0 / 2019-03-31\n==================\n\n  * CHANGE: Use source instead of eval on fish hook\n  * DOC: Remove duplicate build badge (#465)\n  * DOC: add note about auth (#463)\n  * DOC: change nixos link (#460)\n  * FIX: Corrects reverse patching when using exec cmd. (#466)\n  * FIX: Perform stricter search for existing Anaconda environments (#462)\n  * FIX: arity mismatch for elvish (#482)\n  * FIX: avoid reloading on each prompt after error (#468)\n  * FIX: improve bash hook handlign of empty PROMPT_COMMAND (#473)\n  * FIX: improved the tests for bash, zsh, fish and tcsh (#469)\n  * MISC: migrated from Travis CI to Azure Pipelines (#484)\n\n2.19.2 / 2019-02-09\n==================\n\n  * FIX: file_times: check Stat and Lstat (#457)\n\n2.19.1 / 2019-01-31\n==================\n\n  * FIX: watched files now handle symlinks properly. Thanks @grahamc! #452\n\n2.19.0 / 2019-01-11\n==================\n\n  * NEW: add support for .env variable expansion. Thanks to @hakamadare!\n\n2.18.2 / 2018-11-23\n==================\n\n  * make: generate direnv.exe on windows (#417)\n\n2.18.1 / 2018-11-22\n==================\n\n  * travis: fix the release process\n\n2.18.0 / 2018-11-22\n==================\n\nA lot of changes!\n\n  * stdlib: add DIRENV_IN_ENVRC (#414)\n  * Fix typo in readme. (#412)\n  * Merge pull request #407 from zimbatm/direnv-dump-shell\n  * direnv dump can now dump to arbitrary shells\n  * add a new \"gzenv\" shell\n  * move gzenv into new package\n  * shell: introduce a dump capability\n  * cleanup the shells\n  * Add alias '--version' to version command. Closes #377. (#404)\n  * Correctes spelling of openSUSE (#403)\n  * testing: elvish 0.12 is released now (#402)\n  * Merge pull request #397 from zimbatm/readme-packaging-status\n  * README: add packaging status badge\n  * README: remove equinox installation\n  * direnv show_dump: new command to debug encoded env (#395)\n  * Document possibility to unset vars (#392)\n  * stdlib: fix typo\n  * go dep: update Gopkg.lock\n  * make: don't make shfmt a dependency\n  * Avoid to add unnecessary trailing semicolon character (#384)\n  * add asdf to the list of known projects\n  * stdlib.go: re-generate\n  * Add PHP layout to stdlib (#346)\n  * make: fix formatting\n  * README: add build status badge\n  * Overhaul the build system (#375)\n  * stdlib, layout_pipenv: handle `$PIPENV_PIPFILE` (#371)\n  * README: improve the source build instructions\n\n2.17.0 / 2018-06-17\n==================\n\n  * CHANGE: hook expands the direnv path. Ensures that direnv can be executed even if the PATH is changed #369.\n  * CHANGE: stdlib: direnv_load: disallow watching in child\n    Allows the `use nix --pure` scenario in #368\n  * README: add OpenSuSE to the list of distros\n  * Revert \"use_nix: unset IN_NIX_SHELL\"\n\n2.16.0 / 2018-05-09\n==================\n\n  * NEW: add support for elvish (#356)\n  * NEW: config: allow to disable stdin on eval (#351)\n  * DOC: Add the usage of source_up to the README (#347)\n  * FIX: default.nix: fix compilation\n\n2.15.2 / 2018-02-25\n==================\n\n  * FIX: lintian warnings (#340)\n  * FIX: release process (#342)\n\n2.15.1 / 2018-02-24\n==================\n\n  * FIX: support for go 1.10 (#339)\n\n2.15.0 / 2018-02-23\n==================\n\n  * NEW: TOML configuration file! (#332, #337)\n  * NEW: support for allow folder whitelist (#332)\n  * NEW: add anaconda support (#312)\n  * CHANGE: use_nix: unset IN_NIX_SHELL\n\n2.14.0 / 2017-12-13\n==================\n\n  * NEW: Add support for Pipenv layout (#314)\n  * CHANGE: direnv version: make public\n  * FIX: direnv edit: run the command through bash\n  * FIX: website: update ditto to v0.15\n\n2.13.3 / 2017-11-30\n==================\n\n  * FIX: fixes dotenv loading issue on macOS `''=''`\n\n2.13.2 / 2017-11-28\n==================\n\n  * FIX: direnv edit: fix path escaping\n  * FIX: stdlib: fix find_up\n  * FIX: stdlib: use absolute path in source_up\n  * FIX: remove ruby as a build dependency\n  * FIX: go-dotenv: update to latest master to fix a parsing error\n\n2.13.1 / 2017-09-27\n==================\n\n  * FIX: stdlib: make direnv_layout_dir lazy (#298)\n\n2.13.0 / 2017-09-24\n==================\n\n  * NEW: stdlib: configurable direnv_layout_dir\n  * CHANGE: stdlib: source the direnvrc directly\n  * FIX: permit empty NODE_VERSION_PREFIX variable\n  * FIX: pwd: Don't use -P to remove symlinks (#295)\n  * FIX: also reload when mtime goes back in time\n  * FIX: Prevent `$HOME` path from being striked (#287)\n  * BUILD: use the new `dep` tool to manage dependencies\n  * BUILD: dotenv: move to vendor folder\n\n2.12.2 / 2017-07-05\n==================\n\n  * stdlib layout_python: fixes on no arg\n\n2.12.1 / 2017-07-01\n==================\n\n  * FIX: stdlib path_add(), see #278\n  * FIX: install from source instructions\n\n2.12.0 / 2017-06-30\n==================\n\n  * NEW: support multiple items in path_add and PATH_add (#276)\n  * NEW: add a configurable DIRENV_WARN_TIMEOUT option (#273)\n  * CHANGE: rewrite the dotenv parsing, now supports commented lines\n  * CHANGE: pass additional args to virtualenv (#261)\n  * FIX: stdlib watch_file(): escaping fix\n  * FIX: only output color if $TERM is not dumb (#264)\n  * FIX: the watch_file documentation\n\n2.11.3 / 2017-03-02\n==================\n\n  * FIX: node version sorting (#255)\n\n2.11.2 / 2017-03-01\n==================\n\n  * FIX: Typo in MANPATH_add always generates \"PATH missing\" error. (#256)\n\n2.11.1 / 2017-02-20\n==================\n\n  * FIX: only deploy the go 1.8 version\n\n2.11.0 / 2017-02-20\n==================\n\n  * NEW: stdlib.sh: introduce MANPATH_add <path> (#248)\n  * NEW: provide packages using the equinox service\n  * CHANGE: test direnv with go 1.8 (#254)\n  * FIX: Add warning about source_env/up\n  * FIX: go-md2man install instruction\n\n2.10.0 / 2016-12-10\n==================\n\n  * NEW: `use guix` (#242)\n  * CHANGE: use go-md2man to generate the man pages\n  * FIX: tcsh escaping (#241)\n  * FIX: doc typos and rewords (#226)\n\n2.9.0 / 2016-07-03\n==================\n\n  * NEW: use_nix() is now watching default.nix and shell.nix\n  * NEW: Allow to fix the bash path at built time\n  * FIX: Panic on `direnv current` with no argument\n  * FIX: Permit empty NODE_VERSION_PREFIX variable\n  * FIX: layout_python: fail properly when python is not found\n\n2.8.1 / 2016-04-04\n==================\n\n  * FIX: travis dist release\n\n2.8.0 / 2016-03-27\n==================\n\n  * NEW: `direnv export json` to facilitate IDE integration\n  * NEW: watch functionality thanks to @avnik\n    Now direnv also reload on associate .env and .envrc changes.\n  * NEW: stdlib `watch_file` function thanks to @avnik\n    Allows to monitor more files for change.\n  * NEW: stdlib `use node` function thanks to @wilmoore\n  * NEW: `direnv prune` to remove old allowed files thanks to @punitagrawal\n    Only works with newly-generated files since we're not storing the path\n    inside of them.\n\n2.7.0 / 2015-08-08\n==================\n\n  * NEW: use_nix() helper to stdlib. Thanks @gfxmonk\n  * FIX: Added SHELLOPTS to ignored vars. Thanks @fernandomora\n  * FIX: Removed shellcheck offenses in the stdlib, better escaping\n  * FIX: typos. Thanks @camelpunch, @oppegard\n\n2.6.1 / 2015-06-23\n==================\n\n  * FIX: source_env handles missing .envrc gracefully. Thanks @gerhard\n  * FIX: Empty variable as unloading in Vim. Thanks @p0deje\n  * FIX: Corrected spelling mistake in deny command. Thanks @neanias\n\n2.6.0 / 2015-02-15\n==================\n\n  * NEW: tcsh is now supported ! Thanks @bbense\n  * CHANGE: `direnv dump` now ignores `BASH_FUNC_` exports. Thanks @gfxmonk\n  * CHANGE: Interactive input during load is now possible. Thanks @toao\n  * FIX: allow workaround for tmux users: `alias tmux='direnv exec / tmux'`\n  * FIX: hardened fish shell escaping thanks to @gfxmonk\n\nThanks @bbense @vially and @dadooda for corrections in the docs\n\n2.5.0 / 2014-11-04\n==================\n\n  * NEW: Use a different virtualenv per python versions for easier version\n    switching. Eg: ./.direnv/python-${python_version}\n  * NEW: Makes `layout python3` a shortcut for `layout python python3`. Thanks\n    @ghickman !\n  * NEW: Allows to specify which executable of python to use in `layout_python`\n  * CHANGE: `layout python` now unsets $PYTHONHOME to better mimic virtualenv\n  * CHANGE: Don't make virtualenvs relocatable. Fixes #137\n  * OTHER: Use Travis to push release builds to github\n\n2.4.0 / 2014-06-15\n==================\n\n * NEW: Try to detect an editor in the PATH if EDITOR is not set.\n * NEW: Preliminary support for vim\n * NEW: New site: put the doc inside the project so it stays in sync\n * NEW: Support for Cygwin - Thanks @CMCDragonkai !\n * NEW: Allow to disable logging by setting an empty `DIRENV_LOG_FORMAT`\n * NEW: stdlib `layout perl`. Thanks @halkeye !\n * CHANGE: layout ruby: share the gem home starting from rubygems v2.2.0\n * CHANGE: Allow arbitrary number of args in `log_status`\n * CHANGE: Bump command timeout to 5 seconds\n * FIX: Adds selected bash executable in `direnv status`\n * FIX: man changes, replaced abandoned ronn by md2man\n * FIX: `make install` was creating a ./bin directory\n * FIX: issue #114 - work for blank envs. Thanks @pwaller !\n * FIX: man pages warning. Thanks @punitagrawal !\n * FIX: Multi-arg EDITOR was broken #108\n * FIX: typos in doc. Thanks @HeroicEric and @lmarlow !\n * FIX: If two paths don't have a common ancestors, don't make them relative.\n * FIX: missing doc on layered .envrc. Thanks @take !\n\n2.3.0 / 2014-02-06\n==================\n\n * NEW: DIRENV_LOG_FORMAT environment variable can be used tocontrol log formatting\n * NEW: `direnv exec [DIR] <COMMAND>` to execute programs with an .envrc context\n * CHANGE: layout_python now tries to make your virtualenv relocatable\n * CHANGE: the export diff is not from the old env, not the current env\n * CHANGE: layout_go now also adds $PWD/bin in the PATH\n * FIX: Hides the DIRENV_ variables in the output diff. Fixes #94\n * FIX: Makes sure the path used in the allow hash is absolute. See #95\n * FIX: Set the executable bit on direnv on install\n * FIX: Some bash installs had a parse error in the hook.\n\n2.2.1 / 2014-01-12\n==================\n\nThe last release was heavily broken. Ooops !\n\n * FIX: Refactored the whole export and diff mechanism. Fixes #92 regression.\n * CHANGE: DIRENV_BACKUP has been renamed to DIRENV_DIFF\n\n2.2.0 / 2014-01-11\n==================\n\nRestart your shells on upgrade, the format of DIRENV_BACKUP has changed and is\nincompatible with previous versions.\n\n * NEW: `direnv_load <command-that-outputs-a-direnv-dump>` stdlib function\n * CHANGE: Only backup the diff of environments. Fixes #82\n * CHANGE: Renames `$DIRENV_PATH` to `$direnv` in the stdlib.\n * CHANGE: Allow/Deny mechanism now includes the path to make it more secure.\n * CHANGE: `direnv --help` is an alias to `direnv help`\n * CHANGE: more consistent log outputs and error messages\n * CHANGE: `direnv edit` only auto-allows the .envrc if it's mtime has changed.\n * CHANGE: Fixes old bash (OSX) segfault in some cases. See #81\n * CHANGE: The stdlib `dotenv` now supports more .env syntax\n * FIX: Restore the environment properly after loading errors.\n\n2.1.0 / 2013-11-10\n==================\n\n * Added support for the fish shell. See README.md for install instructions.\n * Stop recommending using $0 to detect the shell. Fixes #64.\n * Makes the zsh hook resistant to double-hooking.\n * Makes the bash hook resistant to double-hooking.\n * More precise direnv allow error message. Fixes #72\n\n2.0.1 / 2013-07-27\n==================\n\n * Fixes shell detection corner case\n\n2.0.0 / 2013-06-16\n==================\n\nWhen upgrading from direnv 1.x make sure to restart your shell. The rest is\nrelatively backward-compatible.\n\n * changed the execution model. Everything is in a single static executable\n * most of the logic has been rewritten in Go\n * robust shell escaping (supports UTF-8 in env vars)\n * robust eval/export loop, avoids retrys on every prompt if there is an error\n * stdlib: added the `dotenv [PATH]` command to load .env files\n * command: added `direnv reload` to force-reload your environment\n\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0107421875,
          "content": "direnv.net\n"
        },
        {
          "name": "GNUmakefile",
          "type": "blob",
          "size": 4.634765625,
          "content": "############################################################################\n# Variables\n############################################################################\n\n# Set this to change the target installation path\nPREFIX   = /usr/local\nBINDIR   = ${PREFIX}/bin\nSHAREDIR = ${PREFIX}/share\nMANDIR   = ${SHAREDIR}/man\nDISTDIR ?= dist\n\n# filename of the executable\nexe = direnv$(shell go env GOEXE)\n\n# Override the go executable\nGO = go\n\n# BASH_PATH can also be passed to hard-code the path to bash at build time\n\nSHELL = bash\n\n############################################################################\n# Common\n############################################################################\n\n.PHONY: all\nall: build man\n\nexport GO111MODULE=on\n\n############################################################################\n# Build\n############################################################################\n\n.PHONY: build\nbuild: direnv\n\n.PHONY: clean\nclean:\n\trm -rf \\\n\t\t.gopath \\\n\t\tdirenv\n\nGO_LDFLAGS =\n\nifeq ($(shell uname), Darwin)\n\t# Fixes DYLD_INSERT_LIBRARIES issues\n\t# See https://github.com/direnv/direnv/issues/194\n\tGO_LDFLAGS += -linkmode=external\nendif\n\nifdef BASH_PATH\n\tGO_LDFLAGS += -X main.bashPath=$(BASH_PATH)\nendif\n\nifneq ($(strip $(GO_LDFLAGS)),)\n\tGO_BUILD_FLAGS = -ldflags '$(GO_LDFLAGS)'\nendif\n\nSOURCES = $(wildcard *.go internal/*/*.go pkg/*/*.go)\n\ndirenv: $(SOURCES)\n\t$(GO) build $(GO_BUILD_FLAGS) -o $(exe)\n\n############################################################################\n# Format all the things\n############################################################################\n.PHONY: fmt fmt-go fmt-sh\nfmt: fmt-go fmt-sh\n\nfmt-go:\n\t$(GO) fmt\n\nfmt-sh:\n\t@command -v shfmt >/dev/null || (echo \"Could not format stdlib.sh because shfmt is missing. Run: go install mvdan.cc/sh/cmd/shfmt@latest\"; false)\n\tshfmt -i 2 -w stdlib.sh\n\n############################################################################\n# Documentation\n############################################################################\n\nman_md = $(wildcard man/*.md)\nroffs = $(man_md:.md=)\n\n.PHONY: man\nman: $(roffs)\n\n%.1: %.1.md\n\t@command -v go-md2man >/dev/null || (echo \"Could not generate man page because go-md2man is missing. Run: go install github.com/cpuguy83/go-md2man/v2@latest\"; false)\n\tgo-md2man -in $< -out $@\n\n############################################################################\n# Testing\n############################################################################\n\ntests = \\\n\t\t\t\ttest-shellcheck \\\n\t\t\t\ttest-stdlib \\\n\t\t\t\ttest-go \\\n\t\t\t\ttest-go-lint \\\n\t\t\t\ttest-go-fmt \\\n\t\t\t\ttest-bash \\\n\t\t\t\ttest-elvish \\\n\t\t\t\ttest-fish \\\n\t\t\t\ttest-tcsh \\\n\t\t\t\ttest-zsh \\\n\t\t\t\ttest-pwsh \\\n\t\t\t\ttest-mx\n\n# Skip few checks for IBM Z mainframe's z/OS aka OS/390\nifeq ($(shell uname), OS/390)\n\ttests = \\\n\t\ttest-stdlib \\\n\t\ttest-go \\\n\t\ttest-go-fmt \\\n\t\ttest-bash\nendif\n\n.PHONY: $(tests)\ntest: build $(tests)\n\t@echo\n\t@echo SUCCESS!\n\ntest-shellcheck:\n\tshellcheck stdlib.sh\n\tshellcheck ./test/stdlib.bash\n\ntest-stdlib: build\n\t./test/stdlib.bash\n\ntest-go:\n\t$(GO) test -v ./...\n\ntest-go-lint:\n\tgolangci-lint run\n\ntest-bash:\n\tbash ./test/direnv-test.bash\n\n# Needs elvish 0.12+\ntest-elvish:\n\telvish ./test/direnv-test.elv\n\ntest-fish:\n\tfish ./test/direnv-test.fish\n\ntest-tcsh:\n\ttcsh -e ./test/direnv-test.tcsh\n\ntest-zsh:\n\tzsh ./test/direnv-test.zsh\n\ntest-pwsh:\n\tpwsh ./test/direnv-test.ps1\n\ntest-mx:\n\tmurex -trypipe ./test/direnv-test.mx\n\n############################################################################\n# Installation\n############################################################################\n\n.PHONY: install\ninstall: all\n\tinstall -d $(DESTDIR)$(BINDIR)\n\tinstall $(exe) $(DESTDIR)$(BINDIR)\n\tinstall -d $(DESTDIR)$(MANDIR)/man1\n\tcp -R man/*.1 $(DESTDIR)$(MANDIR)/man1\n\tinstall -d $(DESTDIR)$(SHAREDIR)/fish/vendor_conf.d\n\techo \"$(BINDIR)/direnv hook fish | source\" > $(DESTDIR)$(SHAREDIR)/fish/vendor_conf.d/direnv.fish\n\n.PHONY: dist\ndist:\n\t@command -v gox >/dev/null || (echo \"Could not generate dist because gox is missing. Run: go get -u github.com/mitchellh/gox\"; false)\n\tCGO_ENABLED=0 GOFLAGS=\"-trimpath\" \\\n\t\tgox -rebuild -ldflags=\"-s -w\" -output \"$(DISTDIR)/direnv.{{.OS}}-{{.Arch}}\" \\\n\t\t-osarch darwin/amd64 \\\n\t\t-osarch darwin/arm64 \\\n\t\t-osarch freebsd/386 \\\n\t\t-osarch freebsd/amd64 \\\n\t\t-osarch freebsd/arm \\\n\t\t-osarch linux/386 \\\n\t\t-osarch linux/amd64 \\\n\t\t-osarch linux/arm \\\n\t\t-osarch linux/arm64 \\\n\t\t-osarch linux/mips \\\n\t\t-osarch linux/mips64 \\\n\t\t-osarch linux/mips64le \\\n\t\t-osarch linux/mipsle \\\n\t\t-osarch linux/ppc64 \\\n\t\t-osarch linux/ppc64le \\\n\t\t-osarch linux/s390x \\\n\t\t-osarch netbsd/386 \\\n\t\t-osarch netbsd/amd64 \\\n\t\t-osarch netbsd/arm \\\n\t\t-osarch openbsd/386 \\\n\t\t-osarch openbsd/amd64 \\\n\t\t-osarch windows/386 \\\n\t\t-osarch windows/amd64 \\\n\t\t&& true\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "MIT License\n\nCopyright (c) 2019 zimbatm and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.59765625,
          "content": "direnv -- unclutter your .profile\n=================================\n\n[![Built with Nix](https://builtwithnix.org/badge.svg)](https://builtwithnix.org)\n[![Packaging status](https://repology.org/badge/tiny-repos/direnv.svg)](https://repology.org/project/direnv/versions)\n[![latest packaged version(s)](https://repology.org/badge/latest-versions/direnv.svg)](https://repology.org/project/direnv/versions)\n[![Support room on Matrix](https://img.shields.io/matrix/direnv:numtide.com.svg?label=%23direnv%3Anumtide.com&logo=matrix&server_fqdn=matrix.numtide.com)](https://matrix.to/#/#direnv:numtide.com)\n\n`direnv` is an extension for your shell. It augments existing shells with a\nnew feature that can load and unload environment variables depending on the\ncurrent directory.\n\n## Use cases\n\n* Load [12factor apps](https://12factor.net/) environment variables\n* Create per-project isolated development environments\n* Load secrets for deployment\n\n## How it works\n\nBefore each prompt, direnv checks for the existence of a `.envrc` file (and\n[optionally](man/direnv.toml.1.md#codeloaddotenvcode) a `.env` file) in the current\nand parent directories. If the file exists (and is authorized), it is loaded\ninto a **bash** sub-shell and all exported variables are then captured by\ndirenv and then made available to the current shell.\n\nIt supports hooks for all the common shells like bash, zsh, tcsh and fish.\nThis allows project-specific environment variables without cluttering the\n`~/.profile` file.\n\nBecause direnv is compiled into a single static executable, it is fast enough\nto be unnoticeable on each prompt. It is also language-agnostic and can be\nused to build solutions similar to rbenv, pyenv and phpenv.\n\n## Getting Started\n\n### Prerequisites\n\n* Unix-like operating system (macOS, Linux, ...)\n* A supported shell (bash, zsh, tcsh, fish, elvish, powershell, murex, nushell)\n\n### Basic Installation\n\n1. direnv is packaged in most distributions already. See [the installation documentation](docs/installation.md) for details.\n2. [hook direnv into your shell](docs/hook.md).\n\nNow restart your shell.\n\n### Quick demo\n\nTo follow along in your shell once direnv is installed.\n\n```shell\n# Create a new folder for demo purposes.\n$ mkdir ~/my-project\n$ cd ~/my-project\n\n# Show that the FOO environment variable is not loaded.\n$ echo ${FOO-nope}\nnope\n\n# Create a new .envrc. This file is bash code that is going to be loaded by\n# direnv.\n$ echo export FOO=foo > .envrc\n.envrc is not allowed\n\n# The security mechanism didn't allow to load the .envrc. Since we trust it,\n# let's allow its execution.\n$ direnv allow .\ndirenv: reloading\ndirenv: loading .envrc\ndirenv export: +FOO\n\n# Show that the FOO environment variable is loaded.\n$ echo ${FOO-nope}\nfoo\n\n# Exit the project\n$ cd ..\ndirenv: unloading\n\n# And now FOO is unset again\n$ echo ${FOO-nope}\nnope\n```\n\n### The stdlib\n\nExporting variables by hand is a bit repetitive so direnv provides a set of\nutility functions that are made available in the context of the `.envrc` file.\n\nAs an example, the `PATH_add` function is used to expand and prepend a path to\nthe $PATH environment variable. Instead of `export PATH=$PWD/bin:$PATH` you\ncan write `PATH_add bin`. It's shorter and avoids a common mistake where\n`$PATH=bin`.\n\nTo find the documentation for all available functions check the\n[direnv-stdlib(1) man page](man/direnv-stdlib.1.md).\n\nIt's also possible to create your own extensions by creating a bash file at\n`~/.config/direnv/direnvrc` or `~/.config/direnv/lib/*.sh`. This file is\nloaded before your `.envrc` and thus allows you to make your own extensions to\ndirenv.\n\nNote that this functionality is not supported in `.env` files. If the\ncoexistence of both is needed, one can use `.envrc` for leveraging stdlib and\nappend `dotenv` at the end of it to instruct direnv to also read the `.env`\nfile next.\n\n## Docs\n\n* [Install direnv](docs/installation.md)\n* [Hook into your shell](docs/hook.md)\n* [Develop for direnv](docs/development.md)\n* [Manage your rubies with direnv and ruby-install](docs/ruby.md)\n* [Community Wiki](https://github.com/direnv/direnv/wiki)\n\nMake sure to take a look at the wiki! It contains all sorts of useful\ninformation such as common recipes, editor integration, tips-and-tricks.\n\n### Man pages\n\n* [direnv(1) man page](man/direnv.1.md)\n* [direnv-fetchurl(1) man page](man/direnv-fetchurl.1.md)\n* [direnv-stdlib(1) man page](man/direnv-stdlib.1.md)\n* [direnv.toml(1) man page](man/direnv.toml.1.md)\n\n### FAQ\n\nBased on GitHub issues interactions, here are the top things that have been\nconfusing for users:\n\n1. direnv has a standard library of functions, a collection of utilities that\n   I found useful to have and accumulated over the years. You can find it\n   here: https://github.com/direnv/direnv/blob/master/stdlib.sh\n\n2. It's possible to override the stdlib with your own set of function by\n   adding a bash file to `~/.config/direnv/direnvrc`. This file is loaded and\n   its content made available to any `.envrc` file.\n\n3. direnv is not loading the `.envrc` into the current shell. It's creating a\n   new bash sub-process to load the stdlib, direnvrc and `.envrc`, and only\n   exports the environment diff back to the original shell. This allows direnv\n   to record the environment changes accurately and also work with all sorts\n   of shells. It also means that aliases and functions are not exportable\n   right now.\n\n## Contributing\n\nBug reports, contributions and forks are welcome. All bugs or other forms of\ndiscussion happen on http://github.com/direnv/direnv/issues .\n\nOr drop by on [Matrix](https://matrix.to/#/#direnv:numtide.com) to\nhave a chat. If you ask a question make sure to stay around as not everyone is\nactive all day.\n\n### Testing\n\nTo run our tests, use these commands: (you may need to install [homebrew](https://brew.sh/))\n\n```\nbrew bundle\nmake test\n```\n\n## Complementary projects\n\nHere is a list of projects you might want to look into if you are using direnv.\n\n* [starship](https://starship.rs/) - A cross-shell prompt.\n* [Projects for Nix integration](https://github.com/direnv/direnv/wiki/Nix) - choose from one of a variety of projects offering improvements over Direnv's built-in `use_nix` implementation.\n\n## Related projects\n\nHere is a list of other projects found in the same design space. Feel free to\nsubmit new ones.\n\n* [Environment Modules](http://modules.sourceforge.net/) - one of the oldest (in a good way) environment-loading systems\n* [autoenv](https://github.com/hyperupcall/autoenv) - older, popular, and lightweight.\n* [zsh-autoenv](https://github.com/Tarrasch/zsh-autoenv) - a feature-rich mixture of autoenv and [smartcd](https://github.com/cxreg/smartcd): enter/leave events, nesting, stashing (Zsh-only).\n* [asdf](https://github.com/asdf-vm/asdf) - a pure bash solution that has a plugin system. The [asdf-direnv](https://github.com/asdf-community/asdf-direnv) plugin allows using asdf managed tools with direnv.\n* [ondir](https://github.com/alecthomas/ondir) - OnDir is a small program to automate tasks specific to certain directories\n* [shadowenv](https://shopify.github.io/shadowenv/) - uses an s-expression format to define environment changes that should be executed\n* [quickenv](https://github.com/untitaker/quickenv) - an alternative loader for `.envrc` files that does not hook into your shell and favors speed over convenience.\n* [mise](https://github.com/jdx/mise) - direnv, make and asdf all in one tool.\n\n## Commercial support\n\nLooking for help or customization?\n\nGet in touch with Numtide to get a quote. We make it easy for companies to\nwork with Open Source projects: <https://numtide.com/contact>\n\n## COPYRIGHT\n\n[MIT licence](LICENSE) - Copyright (C) 2019 @zimbatm and [contributors](https://github.com/direnv/direnv/graphs/contributors)\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.58203125,
          "content": "theme: jekyll-theme-primer\ntitle: direnv\ndescription: \"unclutter your .profile\"\nurl: \"https://direnv.net\"\n\nexclude:\n  - test\n\n# see https://github.com/github/pages-gem/blob/754a725e4766d4329bb1dd0e07c638a045ad2c04/lib/github-pages/plugins.rb#L6-L42\nplugins:\n  - jemoji\n  - jekyll-avatar\n  - jekyll-default-layout\n  - jekyll-feed\n  - jekyll-mentions\n  - jekyll-readme-index\n  - jekyll-sitemap\n\nmarkdown: CommonMarkGhPages\n# see https://github.com/gjtorikian/commonmarker#parse-options\ncommonmark:\n  options:\n    - FOOTNOTES\n    - SMART\n  extensions:\n    - autolink\n    - strikethrough\n    - table\n"
        },
        {
          "name": "_includes",
          "type": "tree",
          "content": null
        },
        {
          "name": "default.nix",
          "type": "blob",
          "size": 0.7744140625,
          "content": "{ buildGoApplication, lib, stdenv, bash }:\nbuildGoApplication {\n  pname = \"direnv\";\n  version = lib.fileContents ./version.txt;\n  subPackages = [ \".\" ];\n\n  src = ./.;\n  pwd = ./.;\n  modules = ./gomod2nix.toml;\n\n  # we have no bash at the moment for windows\n  BASH_PATH =\n    lib.optionalString (!stdenv.hostPlatform.isWindows)\n      \"${bash}/bin/bash\";\n\n  # replace the build phase to use the GNUMakefile instead\n  buildPhase = ''\n    ls -la ./vendor\n    make BASH_PATH=$BASH_PATH\n  '';\n\n  installPhase = ''\n    echo $GOCACHE\n    make install PREFIX=$out\n  '';\n\n  meta = {\n    description = \"A shell extension that manages your environment\";\n    homepage = \"https://direnv.net\";\n    license = lib.licenses.mit;\n    maintainers = [ lib.maintainers.zimbatm ];\n    mainProgram = \"direnv\";\n  };\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 2.4267578125,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1710146030,\n        \"narHash\": \"sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"b1d9ab70662946ef0850d488da1c9019f3a9752a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"gomod2nix\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1694616124,\n        \"narHash\": \"sha256-c49BVhQKw3XDRgt+y+uPAbArtgUlMXCET6VxEBmzHXE=\",\n        \"owner\": \"nix-community\",\n        \"repo\": \"gomod2nix\",\n        \"rev\": \"f95720e89af6165c8c0aa77f180461fe786f3c21\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-community\",\n        \"repo\": \"gomod2nix\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1708807242,\n        \"narHash\": \"sha256-sRTRkhMD4delO/hPxxi+XwLqPn8BuUq6nnj4JqLwOu0=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"73de017ef2d18a04ac4bfd0c02650007ccb31c2a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"gomod2nix\": \"gomod2nix\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"systems\": \"systems_2\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems_2\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.2568359375,
          "content": "{\n  description = \"A basic gomod2nix flake\";\n\n  inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n  inputs.gomod2nix.url = \"github:nix-community/gomod2nix\";\n  inputs.gomod2nix.inputs.nixpkgs.follows = \"nixpkgs\";\n  inputs.systems.url = \"github:nix-systems/default\";\n\n  outputs =\n    {\n      self,\n      nixpkgs,\n      gomod2nix,\n      systems,\n    }:\n    let\n      eachSystem =\n        f:\n        nixpkgs.lib.genAttrs (import systems) (\n          system:\n          f rec {\n            callPackage = pkgs.darwin.apple_sdk_11_0.callPackage or pkgs.callPackage;\n            gomod2nixPkgs = gomod2nix.legacyPackages.${system};\n            inherit system;\n            pkgs = nixpkgs.legacyPackages.${system};\n          }\n        );\n    in\n    {\n      packages = eachSystem (\n        { callPackage, gomod2nixPkgs, ... }:\n        {\n          default = callPackage ./. { inherit (gomod2nixPkgs) buildGoApplication; };\n        }\n      );\n\n      devShells = eachSystem (\n        { callPackage, gomod2nixPkgs, ... }:\n        {\n          default = callPackage ./shell.nix { inherit (gomod2nixPkgs) mkGoEnv gomod2nix; };\n        }\n      );\n\n      checks = eachSystem (\n        { system, ... }:\n        {\n          check-package = self.packages.${system}.default;\n        }\n      );\n    };\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.1943359375,
          "content": "module github.com/direnv/direnv/v2\n\ngo 1.20\n\nrequire (\n\tgithub.com/BurntSushi/toml v1.4.0\n\tgithub.com/mattn/go-isatty v0.0.20\n\tgolang.org/x/mod v0.19.0\n)\n\nrequire golang.org/x/sys v0.6.0 // indirect\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.6328125,
          "content": "github.com/BurntSushi/toml v1.4.0 h1:kuoIxZQy2WRRk1pttg9asf+WVv6tWQuBNVmK8+nqPr0=\ngithub.com/BurntSushi/toml v1.4.0/go.mod h1:ukJfTF/6rtPPRCnwkur4qwRxa8vTRFBF0uk2lLoLwho=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngolang.org/x/mod v0.19.0 h1:fEdghXQSo20giMthA7cd28ZC+jts4amQ3YMXiP5oMQ8=\ngolang.org/x/mod v0.19.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/sys v0.6.0 h1:MVltZSvRTcU2ljQOhs94SXPftV6DCNnZViHeQps87pQ=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n"
        },
        {
          "name": "gomod2nix.toml",
          "type": "blob",
          "size": 0.48828125,
          "content": "schema = 3\n\n[mod]\n  [mod.\"github.com/BurntSushi/toml\"]\n    version = \"v1.4.0\"\n    hash = \"sha256-3cr8hfVA4th/AfveHDxigmj8Eiiae0ZBnxAgy+7RYO4=\"\n  [mod.\"github.com/mattn/go-isatty\"]\n    version = \"v0.0.20\"\n    hash = \"sha256-qhw9hWtU5wnyFyuMbKx+7RB8ckQaFQ8D+8GKPkN3HHQ=\"\n  [mod.\"golang.org/x/mod\"]\n    version = \"v0.19.0\"\n    hash = \"sha256-9TUzg1aDvdZw3Z8IyGGSVSnLfUwgeGC/vrnkhkarXL4=\"\n  [mod.\"golang.org/x/sys\"]\n    version = \"v0.6.0\"\n    hash = \"sha256-zAgxiTuL24sGhbXrna9R1UYqLQh46ldztpumOScmduY=\"\n"
        },
        {
          "name": "gzenv",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.3818359375,
          "content": "#!/usr/bin/env bash\n#\n# A good old bash | curl script for direnv.\n#\nset -euo pipefail\n\n{ # Prevent execution if this script was only partially downloaded\n\n  log() {\n    echo \"[installer] $*\" >&2\n  }\n\n  die() {\n    log \"$@\"\n    exit 1\n  }\n\n  at_exit() {\n    ret=$?\n    if [[ $ret -gt 0 ]]; then\n      log \"the script failed with error $ret.\\n\" \\\n        \"\\n\" \\\n        \"To report installation errors, submit an issue to\\n\" \\\n        \"    https://github.com/direnv/direnv/issues/new/choose\"\n    fi\n    exit \"$ret\"\n  }\n  trap at_exit EXIT\n\n  kernel=$(uname -s | tr \"[:upper:]\" \"[:lower:]\")\n  case \"${kernel}\" in\n    mingw*)\n      kernel=windows\n      ;;\n  esac\n  case \"$(uname -m)\" in\n    x86_64)\n      machine=amd64\n      ;;\n    i686 | i386)\n      machine=386\n      ;;\n    armv7l)\n      machine=arm\n      ;;\n    aarch64 | arm64)\n      machine=arm64\n      ;;\n    *)\n      die \"Machine $(uname -m) not supported by the installer.\\n\" \\\n        \"Go to https://direnv for alternate installation methods.\"\n      ;;\n  esac\n  log \"kernel=$kernel machine=$machine\"\n\n  : \"${use_sudo:=}\"\n  : \"${bin_path:=}\"\n\n  if [[ -z \"$bin_path\" ]]; then\n    log \"bin_path is not set, you can set bin_path to specify the installation path\"\n    log \"e.g. export bin_path=/path/to/installation before installing\"\n    log \"looking for a writeable path from PATH environment variable\"\n    for path in $(echo \"$PATH\" | tr ':' '\\n'); do\n      if [[ -w $path ]]; then\n        bin_path=$path\n        break\n      fi\n    done\n  fi\n  if [[ -z \"$bin_path\" ]]; then\n    die \"did not find a writeable path in $PATH\"\n  fi\n  echo \"bin_path=$bin_path\"\n\n  if [[ -n \"${version:-}\" ]]; then\n    release=\"tags/${version}\"\n  else\n    release=\"latest\"\n  fi\n  echo \"release=$release\"\n\n  log \"looking for a download URL\"\n  download_url=$(\n    curl -fL \"https://api.github.com/repos/direnv/direnv/releases/$release\" \\\n    | grep browser_download_url \\\n    | cut -d '\"' -f 4 \\\n    | grep \"direnv.$kernel.$machine\\$\"\n  )\n  echo \"download_url=$download_url\"\n\n  log \"downloading\"\n  curl -o \"$bin_path/direnv\" -fL \"$download_url\"\n  chmod a+x \"$bin_path/direnv\"\n\n  cat <<DONE\n\nThe direnv binary is now available in:\n\n    $bin_path/direnv\n\nThe last step is to configure your shell to use it. For example for bash, add\nthe following lines at the end of your ~/.bashrc:\n\n    eval \"\\$(direnv hook bash)\"\n\nThen restart the shell.\n\nFor other shells, see https://direnv.net/docs/hook.html\n\nThanks!\nDONE\n}\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.39453125,
          "content": "package main\n\nimport (\n\t_ \"embed\"\n\t\"github.com/direnv/direnv/v2/internal/cmd\"\n\t\"os\"\n\t\"strings\"\n)\n\nvar (\n\t// Configured at compile time\n\tbashPath string\n\t//go:embed stdlib.sh\n\tstdlib string\n\t//go:embed version.txt\n\tversion string\n)\n\nfunc main() {\n\tvar (\n\t\tenv  = cmd.GetEnv()\n\t\targs = os.Args\n\t)\n\terr := cmd.Main(env, args, bashPath, stdlib, strings.TrimSpace(version))\n\tif err != nil {\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.7880859375,
          "content": "{ stdenv\n, mkGoEnv\n, gomod2nix\n, git\n, git-extras\n, gnumake\n, go\n, go-md2man\n, gox\n, bashInteractive\n, elvish\n, fish\n, tcsh\n, zsh\n, powershell\n, murex\n, golangci-lint\n, python3\n, ruby\n, shellcheck\n, shfmt\n, cacert\n}:\nstdenv.mkDerivation {\n  name = \"shell\";\n  buildInputs = [\n    (mkGoEnv { pwd = ./.; })\n\n    # Build\n    git\n    git-extras # for git-changelog\n    gnumake\n    go\n    go-md2man\n    gox\n    gomod2nix\n\n    # Shells\n    bashInteractive\n    elvish\n    fish\n    tcsh\n    zsh\n    powershell\n    murex\n\n    # Test dependencies\n    golangci-lint\n    python3\n    ruby\n    shellcheck\n    shfmt\n  ];\n\n  shellHook = ''\n    unset GOPATH GOROOT\n    # needed in pure shell\n    export HOME=''${HOME:-$TMPDIR}\n\n    export GO111MODULE=on\n    export SSL_CERT_FILE=${cacert}/etc/ssl/certs/ca-bundle.crt\n  '';\n}\n"
        },
        {
          "name": "stdlib.sh",
          "type": "blob",
          "size": 36.2900390625,
          "content": "#!/usr/bin/env bash\n#\n# These are the commands available in an .envrc context\n#\n# ShellCheck exceptions:\n#\n# SC1090: Can't follow non-constant source. Use a directive to specify location.\n# SC1091: Not following: (file missing)\n# SC1117: Backslash is literal in \"\\n\". Prefer explicit escaping: \"\\\\n\".\n# SC2059: Don't use variables in the printf format string. Use printf \"..%s..\" \"$foo\".\nshopt -s gnu_errfmt\nshopt -s nullglob\nshopt -s extglob\n\n# NOTE: don't touch the RHS, it gets replaced at runtime\ndirenv=\"$(command -v direnv)\"\n\n# Where direnv configuration should be stored\ndirenv_config_dir=\"${DIRENV_CONFIG:-${XDG_CONFIG_HOME:-$HOME/.config}/direnv}\"\n\n# This variable can be used by programs to detect when they are running inside\n# of a .envrc evaluation context. It is ignored by the direnv diffing\n# algorithm and so it won't be re-exported.\nexport DIRENV_IN_ENVRC=1\n\n__env_strictness() {\n  local mode tmpfile old_shell_options\n  local -i res\n\n  tmpfile=\"$(mktemp)\"\n  res=0\n  mode=\"$1\"\n  shift\n\n  set +o | grep 'pipefail\\|nounset\\|errexit' >\"$tmpfile\"\n  old_shell_options=$(<\"$tmpfile\")\n  rm -f \"$tmpfile\"\n\n  case \"$mode\" in\n  strict)\n    set -o errexit -o nounset -o pipefail\n    ;;\n  unstrict)\n    set +o errexit +o nounset +o pipefail\n    ;;\n  *)\n    log_error \"Unknown strictness mode '${mode}'.\"\n    exit 1\n    ;;\n  esac\n\n  if (($#)); then\n    \"${@}\"\n    res=$?\n    eval \"$old_shell_options\"\n  fi\n\n  # Force failure if the inner script has failed and the mode is strict\n  if [[ $mode = strict && $res -gt 0 ]]; then\n    exit 1\n  fi\n\n  return $res\n}\n\n# Usage: strict_env [<command> ...]\n#\n# Turns on shell execution strictness. This will force the .envrc\n# evaluation context to exit immediately if:\n#\n# - any command in a pipeline returns a non-zero exit status that is\n#   not otherwise handled as part of `if`, `while`, or `until` tests,\n#   return value negation (`!`), or part of a boolean (`&&` or `||`)\n#   chain.\n# - any variable that has not explicitly been set or declared (with\n#   either `declare` or `local`) is referenced.\n#\n# If followed by a command-line, the strictness applies for the duration\n# of the command.\n#\n# Example:\n#\n#    strict_env\n#    has curl\n#\n#    strict_env has curl\nstrict_env() {\n  __env_strictness strict \"$@\"\n}\n\n# Usage: unstrict_env [<command> ...]\n#\n# Turns off shell execution strictness. If followed by a command-line, the\n# strictness applies for the duration of the command.\n#\n# Example:\n#\n#    unstrict_env\n#    has curl\n#\n#    unstrict_env has curl\nunstrict_env() {\n  if (($#)); then\n    __env_strictness unstrict \"$@\"\n  else\n    set +o errexit +o nounset +o pipefail\n  fi\n}\n\n# Usage: direnv_layout_dir\n#\n# Prints the folder path that direnv should use to store layout content.\n# This needs to be a function as $PWD might change during source_env/up.\n#\n# The output defaults to $PWD/.direnv.\n\ndirenv_layout_dir() {\n  echo \"${direnv_layout_dir:-$PWD/.direnv}\"\n}\n\n# Usage: log_status [<message> ...]\n#\n# Logs a status message. Acts like echo,\n# but wraps output in the standard direnv log format\n# and directs it to stderr rather than stdout.\n#\n# Example:\n#\n#    log_status \"Loading ...\"\n#\nlog_status() {\n  \"$direnv\" log -status \"$*\"\n}\n\n# Usage: log_error [<message> ...]\n#\n# Logs an error message. Acts like echo,\n# but wraps output in the standard direnv log format\n# and directs it to stderr rather than stdout.\n#\n# Example:\n#\n#    log_error \"Unable to find specified directory!\"\n\nlog_error() {\n  \"$direnv\" log -error \"$*\"\n}\n\n# Usage: has <command>\n#\n# Returns 0 if the <command> is available. Returns 1 otherwise. It can be a\n# binary in the PATH or a shell function.\n#\n# Example:\n#\n#    if has curl; then\n#      echo \"Yes we do\"\n#    fi\n#\nhas() {\n  type \"$1\" &>/dev/null\n}\n\n# Usage: join_args [args...]\n#\n# Joins all the passed arguments into a single string that can be evaluated by bash\n#\n# This is useful when one has to serialize an array of arguments back into a string\njoin_args() {\n  printf '%q ' \"$@\"\n}\n\n# Usage: expand_path <rel_path> [<relative_to>]\n#\n# Outputs the absolute path of <rel_path> relative to <relative_to> or the\n# current directory.\n#\n# Example:\n#\n#    cd /usr/local/games\n#    expand_path ../foo\n#    # output: /usr/local/foo\n#\nexpand_path() {\n  local REPLY\n  realpath.absolute \"${2+\"$2\"}\" \"${1+\"$1\"}\"\n  echo \"$REPLY\"\n}\n\n# --- vendored from https://github.com/bashup/realpaths\nrealpath.dirname() {\n  REPLY=.\n  ! [[ $1 =~ /+[^/]+/*$|^//$ ]] || REPLY=\"${1%\"${BASH_REMATCH[0]}\"}\"\n  REPLY=${REPLY:-/}\n}\nrealpath.basename() {\n  REPLY=/\n  ! [[ $1 =~ /*([^/]+)/*$ ]] || REPLY=\"${BASH_REMATCH[1]}\"\n}\n\nrealpath.absolute() {\n  REPLY=$PWD\n  local eg=extglob\n  ! shopt -q $eg || eg=\n  ${eg:+shopt -s $eg}\n  while (($#)); do case $1 in\n    // | //[^/]*)\n      REPLY=//\n      set -- \"${1:2}\" \"${@:2}\"\n      ;;\n    /*)\n      REPLY=/\n      set -- \"${1##+(/)}\" \"${@:2}\"\n      ;;\n    */*) set -- \"${1%%/*}\" \"${1##\"${1%%/*}\"+(/)}\" \"${@:2}\" ;;\n    '' | .) shift ;;\n    ..)\n      realpath.dirname \"$REPLY\"\n      shift\n      ;;\n    *)\n      REPLY=\"${REPLY%/}/$1\"\n      shift\n      ;;\n    esac done\n  ${eg:+shopt -u $eg}\n}\n# ---\n\n# Usage: dotenv [<dotenv>]\n#\n# Loads a \".env\" file into the current environment\n#\ndotenv() {\n  local path=${1:-}\n  if [[ -z $path ]]; then\n    path=$PWD/.env\n  elif [[ -d $path ]]; then\n    path=$path/.env\n  fi\n  watch_file \"$path\"\n  if ! [[ -f $path ]]; then\n    log_error \".env at $path not found\"\n    return 1\n  fi\n  eval \"$(\"$direnv\" dotenv bash \"$@\")\"\n}\n\n# Usage: dotenv_if_exists [<filename>]\n#\n# Loads a \".env\" file into the current environment, but only if it exists.\n#\ndotenv_if_exists() {\n  local path=${1:-}\n  if [[ -z $path ]]; then\n    path=$PWD/.env\n  elif [[ -d $path ]]; then\n    path=$path/.env\n  fi\n  watch_file \"$path\"\n  if ! [[ -f $path ]]; then\n    return\n  fi\n  eval \"$(\"$direnv\" dotenv bash \"$@\")\"\n}\n\n# Usage: user_rel_path <abs_path>\n#\n# Transforms an absolute path <abs_path> into a user-relative path if\n# possible.\n#\n# Example:\n#\n#    echo $HOME\n#    # output: /home/user\n#    user_rel_path /home/user/my/project\n#    # output: ~/my/project\n#    user_rel_path /usr/local/lib\n#    # output: /usr/local/lib\n#\nuser_rel_path() {\n  local abs_path=${1#-}\n\n  if [[ -z $abs_path ]]; then return; fi\n\n  if [[ -n $HOME ]]; then\n    local rel_path=${abs_path#\"$HOME\"}\n    if [[ $rel_path != \"$abs_path\" ]]; then\n      abs_path=~$rel_path\n    fi\n  fi\n\n  echo \"$abs_path\"\n}\n\n# Usage: find_up <filename>\n#\n# Outputs the path of <filename> when searched from the current directory up to\n# /. Returns 1 if the file has not been found.\n#\n# Example:\n#\n#    cd /usr/local/my\n#    mkdir -p project/foo\n#    touch bar\n#    cd project/foo\n#    find_up bar\n#    # output: /usr/local/my/bar\n#\nfind_up() {\n  (\n    while true; do\n      if [[ -f $1 ]]; then\n        echo \"$PWD/$1\"\n        return 0\n      fi\n      if [[ $PWD == / ]] || [[ $PWD == // ]]; then\n        return 1\n      fi\n      cd ..\n    done\n  )\n}\n\n# Usage: source_env <file_or_dir_path>\n#\n# Loads another \".envrc\" either by specifying its path or filename.\n#\n# NOTE: the other \".envrc\" is not checked by the security framework.\nsource_env() {\n  local rcpath=${1/#\\~/$HOME}\n  if has cygpath; then\n    rcpath=$(cygpath -u \"$rcpath\")\n  fi\n\n  local REPLY\n  if [[ -d $rcpath ]]; then\n    rcpath=$rcpath/.envrc\n  fi\n  if [[ ! -e $rcpath ]]; then\n    log_status \"referenced $rcpath does not exist\"\n    return 1\n  fi\n\n  realpath.dirname \"$rcpath\"\n  local rcpath_dir=$REPLY\n  realpath.basename \"$rcpath\"\n  local rcpath_base=$REPLY\n\n  local rcfile\n  rcfile=$(user_rel_path \"$rcpath\")\n  watch_file \"$rcpath\"\n\n  pushd \"$(pwd 2>/dev/null)\" >/dev/null || return 1\n  pushd \"$rcpath_dir\" >/dev/null || return 1\n  if [[ -f ./$rcpath_base ]]; then\n    log_status \"loading $(user_rel_path \"$(expand_path \"$rcpath_base\")\")\"\n    # shellcheck disable=SC1090\n    . \"./$rcpath_base\"\n  else\n    log_status \"referenced $rcfile does not exist\"\n  fi\n  popd >/dev/null || return 1\n  popd >/dev/null || return 1\n}\n\n# Usage: source_env_if_exists <filename>\n#\n# Loads another \".envrc\", but only if it exists.\n#\n# NOTE: contrary to source_env, this only works when passing a path to a file,\n#       not a directory.\n#\n# Example:\n#\n#    source_env_if_exists .envrc.private\n#\nsource_env_if_exists() {\n  watch_file \"$1\"\n  if [[ -f \"$1\" ]]; then source_env \"$1\"; fi\n}\n\n# Usage: env_vars_required <varname> [<varname> ...]\n#\n# Logs error for every variable not present in the environment or having an empty value.\n# Typically this is used in combination with source_env and source_env_if_exists.\n#\n# Example:\n#\n#     # expect .envrc.private to provide tokens\n#     source_env .envrc.private\n#     # check presence of tokens\n#     env_vars_required GITHUB_TOKEN OTHER_TOKEN\n#\nenv_vars_required() {\n  local environment\n  local -i ret\n  environment=$(env)\n  ret=0\n\n  for var in \"$@\"; do\n    if [[ \"$environment\" != *\"$var=\"* || -z ${!var:-} ]]; then\n      log_error \"env var $var is required but missing/empty\"\n      ret=1\n    fi\n  done\n  return \"$ret\"\n}\n\n# Usage: watch_file <filename> [<filename> ...]\n#\n# Adds each <filename> to the list of files that direnv will watch for changes -\n# useful when the contents of a file influence how variables are set -\n# especially in direnvrc\n#\nwatch_file() {\n  eval \"$(\"$direnv\" watch bash \"$@\")\"\n}\n\n# Usage: watch_dir <dir>\n#\n# Adds <dir> to the list of dirs that direnv will recursively watch for changes\nwatch_dir() {\n  eval \"$(\"$direnv\" watch-dir bash \"$1\")\"\n}\n\n# Usage: _source_up [<filename>] [true|false]\n#\n# Private helper function for source_up and source_up_if_exists. The second\n# parameter determines if it's an error for the file we're searching for to\n# not exist.\n_source_up() {\n  local envrc file=${1:-.envrc}\n  local ok_if_not_exist=${2}\n  envrc=$(cd .. && (find_up \"$file\" || true))\n  if [[ -n $envrc ]]; then\n    source_env \"$envrc\"\n  elif $ok_if_not_exist; then\n    return 0\n  else\n    log_error \"No ancestor $file found\"\n    return 1\n  fi\n}\n\n# Usage: source_up [<filename>]\n#\n# Loads another \".envrc\" if found with the find_up command. Returns 1 if no\n# file is found.\n#\n# NOTE: the other \".envrc\" is not checked by the security framework.\nsource_up() {\n  _source_up \"${1:-}\" false\n}\n\n# Usage: source_up_if_exists [<filename>]\n#\n# Loads another \".envrc\" if found with the find_up command. If one is not\n# found, nothing happens.\n#\n# NOTE: the other \".envrc\" is not checked by the security framework.\nsource_up_if_exists() {\n  _source_up \"${1:-}\" true\n}\n\n# Usage: fetchurl <url> [<integrity-hash>]\n#\n# Fetches a URL and outputs a file with its content. If the <integrity-hash>\n# is given it will also validate the content of the file before returning it.\nfetchurl() {\n  \"$direnv\" fetchurl \"$@\"\n}\n\n# Usage: source_url <url> <integrity-hash>\n#\n# Fetches a URL and evaluates its content.\nsource_url() {\n  local url=$1 integrity_hash=${2:-} path\n  if [[ -z $url ]]; then\n    log_error \"source_url: <url> argument missing\"\n    return 1\n  fi\n  if [[ -z $integrity_hash ]]; then\n    log_error \"source_url: <integrity-hash> argument missing. Use \\`direnv fetchurl $url\\` to find out the hash.\"\n    return 1\n  fi\n\n  log_status \"loading $url ($integrity_hash)\"\n  path=$(fetchurl \"$url\" \"$integrity_hash\")\n  # shellcheck disable=SC1090\n  source \"$path\"\n}\n\n# Usage: direnv_load <command-generating-dump-output>\n#   e.g: direnv_load opam-env exec -- \"$direnv\" dump\n#\n# Applies the environment generated by running <argv> as a\n# command. This is useful for adopting the environment of a child\n# process - cause that process to run \"direnv dump\" and then wrap\n# the results with direnv_load.\n#\n# shellcheck disable=SC1090\ndirenv_load() {\n  # Backup watches in case of `nix-shell --pure`\n  local prev_watches=$DIRENV_WATCHES\n  local temp_dir output_file script_file exit_code old_direnv_dump_file_path\n\n  # Prepare a temporary place for dumps and such.\n  temp_dir=$(mktemp -dt direnv.XXXXXX) || {\n    log_error \"Could not create temporary directory.\"\n    return 1\n  }\n  output_file=\"$temp_dir/output\"\n  script_file=\"$temp_dir/script\"\n  old_direnv_dump_file_path=${DIRENV_DUMP_FILE_PATH:-}\n\n  # Chain the following commands explicitly so that we can capture the exit code\n  # of the whole chain. Crucially this ensures that we don't return early (via\n  # `set -e`, for example) and hence always remove the temporary directory.\n  touch \"$output_file\" &&\n    DIRENV_DUMP_FILE_PATH=\"$output_file\" \"$@\" &&\n    {\n      test -s \"$output_file\" || {\n        log_error \"Environment not dumped; did you invoke 'direnv dump'?\"\n        false\n      }\n    } &&\n    \"$direnv\" apply_dump \"$output_file\" >\"$script_file\" &&\n    source \"$script_file\" ||\n    exit_code=$?\n\n  # Scrub temporary directory\n  rm -rf \"$temp_dir\"\n\n  # Restore watches if the dump wiped them\n  if [[ -z \"${DIRENV_WATCHES:-}\" ]]; then\n    export DIRENV_WATCHES=$prev_watches\n  fi\n\n  # Restore DIRENV_DUMP_FILE_PATH if needed\n  if [[ -n \"$old_direnv_dump_file_path\" ]]; then\n    export DIRENV_DUMP_FILE_PATH=$old_direnv_dump_file_path\n  else\n    unset DIRENV_DUMP_FILE_PATH\n  fi\n\n  # Exit accordingly\n  return ${exit_code:-0}\n}\n\n# Usage: direnv_apply_dump <file>\n#\n# Loads the output of `direnv dump` that was stored in a file.\ndirenv_apply_dump() {\n  local path=$1\n  eval \"$(\"$direnv\" apply_dump \"$path\")\"\n}\n\n# Usage: PATH_add <path> [<path> ...]\n#\n# Prepends the expanded <path> to the PATH environment variable, in order.\n# It prevents a common mistake where PATH is replaced by only the new <path>,\n# or where a trailing colon is left in PATH, resulting in the current directory\n# being considered in the PATH.  Supports adding multiple directories at once.\n#\n# Example:\n#\n#    pwd\n#    # output: /my/project\n#    PATH_add bin\n#    echo $PATH\n#    # output: /my/project/bin:/usr/bin:/bin\n#    PATH_add bam boum\n#    echo $PATH\n#    # output: /my/project/bam:/my/project/boum:/my/project/bin:/usr/bin:/bin\n#\nPATH_add() {\n  path_add PATH \"$@\"\n}\n\n# Usage: path_add <varname> <path> [<path> ...]\n#\n# Works like PATH_add except that it's for an arbitrary <varname>.\npath_add() {\n  local path i var_name=\"$1\"\n  # split existing paths into an array\n  declare -a path_array\n  IFS=: read -ra path_array <<<\"${!1-}\"\n  shift\n\n  # prepend the passed paths in the right order\n  for ((i = $#; i > 0; i--)); do\n    path_array=(\"$(expand_path \"${!i}\")\" ${path_array[@]+\"${path_array[@]}\"})\n  done\n\n  # join back all the paths\n  path=$(\n    IFS=:\n    echo \"${path_array[*]}\"\n  )\n\n  # and finally export back the result to the original variable\n  export \"$var_name=$path\"\n}\n\n# Usage: MANPATH_add <path>\n#\n# Prepends a path to the MANPATH environment variable while making sure that\n# `man` can still lookup the system manual pages.\n#\n# If MANPATH is not empty, man will only look in MANPATH.\n# So if we set MANPATH=$path, man will only look in $path.\n# Instead, prepend to `man -w` (which outputs man's default paths).\n#\nMANPATH_add() {\n  local old_paths=\"${MANPATH:-$(man -w)}\"\n  local dir\n  dir=$(expand_path \"$1\")\n  export \"MANPATH=$dir:$old_paths\"\n}\n\n# Usage: PATH_rm <pattern> [<pattern> ...]\n# Removes directories that match any of the given shell patterns from\n# the PATH environment variable. Order of the remaining directories is\n# preserved in the resulting PATH.\n#\n# Bash pattern syntax:\n#   https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html\n#\n# Example:\n#\n#   echo $PATH\n#   # output: /dontremove/me:/remove/me:/usr/local/bin/:...\n#   PATH_rm '/remove/*'\n#   echo $PATH\n#   # output: /dontremove/me:/usr/local/bin/:...\n#\nPATH_rm() {\n  path_rm PATH \"$@\"\n}\n\n# Usage: path_rm <varname> <pattern> [<pattern> ...]\n#\n# Works like PATH_rm except that it's for an arbitrary <varname>.\npath_rm() {\n  local path i discard var_name=\"$1\"\n  # split existing paths into an array\n  declare -a path_array\n  IFS=: read -ra path_array <<<\"${!1}\"\n  shift\n\n  patterns=(\"$@\")\n  results=()\n\n  # iterate over path entries, discard entries that match any of the patterns\n  # shellcheck disable=SC2068\n  for path in ${path_array[@]+\"${path_array[@]}\"}; do\n    discard=false\n    # shellcheck disable=SC2068\n    for pattern in ${patterns[@]+\"${patterns[@]}\"}; do\n      if [[ \"$path\" == +($pattern) ]]; then\n        discard=true\n        break\n      fi\n    done\n    if ! $discard; then\n      results+=(\"$path\")\n    fi\n  done\n\n  # join the result paths\n  result=$(\n    IFS=:\n    echo \"${results[*]}\"\n  )\n\n  # and finally export back the result to the original variable\n  export \"$var_name=$result\"\n}\n\n# Usage: load_prefix <prefix_path>\n#\n# Expands some common path variables for the given <prefix_path> prefix. This is\n# useful if you installed something in the <prefix_path> using\n# $(./configure --prefix=<prefix_path> && make install) and want to use it in\n# the project.\n#\n# Variables set:\n#\n#    CPATH\n#    LD_LIBRARY_PATH\n#    LIBRARY_PATH\n#    MANPATH\n#    PATH\n#    PKG_CONFIG_PATH\n#\n# Example:\n#\n#    ./configure --prefix=$HOME/rubies/ruby-1.9.3\n#    make && make install\n#    # Then in the .envrc\n#    load_prefix ~/rubies/ruby-1.9.3\n#\nload_prefix() {\n  local REPLY\n  realpath.absolute \"$1\"\n  MANPATH_add \"$REPLY/man\"\n  MANPATH_add \"$REPLY/share/man\"\n  path_add CPATH \"$REPLY/include\"\n  path_add LD_LIBRARY_PATH \"$REPLY/lib\"\n  path_add LIBRARY_PATH \"$REPLY/lib\"\n  path_add PATH \"$REPLY/bin\"\n  path_add PKG_CONFIG_PATH \"$REPLY/lib/pkgconfig\"\n}\n\n# Usage: semver_search <directory> <folder_prefix> <partial_version>\n#\n# Search a directory for the highest version number in SemVer format (X.Y.Z).\n#\n# Examples:\n#\n# $ tree .\n# .\n# |-- dir\n#     |-- program-1.4.0\n#     |-- program-1.4.1\n#     |-- program-1.5.0\n# $ semver_search \"dir\" \"program-\" \"1.4.0\"\n# 1.4.0\n# $ semver_search \"dir\" \"program-\" \"1.4\"\n# 1.4.1\n# $ semver_search \"dir\" \"program-\" \"1\"\n# 1.5.0\n#\nsemver_search() {\n  local version_dir=${1:-}\n  local prefix=${2:-}\n  local partial_version=${3:-}\n  # Look for matching versions in $version_dir path\n  # Strip possible \"/\" suffix from $version_dir, then use that to\n  # strip $version_dir/$prefix prefix from line.\n  # Sort by version: split by \".\" then reverse numeric sort for each piece of the version string\n  # The first one is the highest\n  find \"$version_dir\" -maxdepth 1 -mindepth 1 -type d -name \"${prefix}${partial_version}*\" |\n    while IFS= read -r line; do echo \"${line#\"${version_dir%/}\"/\"${prefix}\"}\"; done |\n    sort -t . -k 1,1rn -k 2,2rn -k 3,3rn |\n    head -1\n}\n\n# Usage: layout <type>\n#\n# A semantic dispatch used to describe common project layouts.\n#\nlayout() {\n  local funcname=\"layout_$1\"\n  shift\n  \"$funcname\" \"$@\"\n  local layout_dir\n  layout_dir=$(direnv_layout_dir)\n  if [[ -d \"$layout_dir\" && ! -f \"$layout_dir/CACHEDIR.TAG\" ]]; then\n    echo 'Signature: 8a477f597d28d172789f06886806bc55\n# This file is a cache directory tag created by direnv.\n# For information about cache directory tags, see:\n#\thttp://www.brynosaurus.com/cachedir/' >\"$layout_dir/CACHEDIR.TAG\"\n  fi\n}\n\n# Usage: layout go\n#\n# Adds \"$(direnv_layout_dir)/go\" to the GOPATH environment variable.\n# Furthermore \"$(direnv_layout_dir)/go/bin\" is set as the value for the GOBIN environment variable and added to the PATH environment variable.\nlayout_go() {\n  path_add GOPATH \"$(direnv_layout_dir)/go\"\n\n  bindir=\"$(direnv_layout_dir)/go/bin\"\n  PATH_add \"$bindir\"\n  export GOBIN=\"$bindir\"\n}\n\n# Usage: layout node\n#\n# Adds \"$PWD/node_modules/.bin\" to the PATH environment variable.\nlayout_node() {\n  PATH_add node_modules/.bin\n}\n\n# Usage: layout opam\n#\n# Sets environment variables from `opam env`.\nlayout_opam() {\n  export OPAMSWITCH=$PWD\n  eval \"$(opam env \"$@\")\"\n}\n\n# Usage: layout perl\n#\n# Setup environment variables required by perl's local::lib\n# See http://search.cpan.org/dist/local-lib/lib/local/lib.pm for more details\n#\nlayout_perl() {\n  local libdir\n  libdir=$(direnv_layout_dir)/perl5\n  export LOCAL_LIB_DIR=$libdir\n  export PERL_MB_OPT=\"--install_base '$libdir'\"\n  export PERL_MM_OPT=\"INSTALL_BASE=$libdir\"\n  path_add PERL5LIB \"$libdir/lib/perl5\"\n  path_add PERL_LOCAL_LIB_ROOT \"$libdir\"\n  PATH_add \"$libdir/bin\"\n}\n\n# Usage: layout php\n#\n# Adds \"$PWD/vendor/bin\" to the PATH environment variable\nlayout_php() {\n  PATH_add vendor/bin\n}\n\n# Usage: layout python <python_exe>\n#\n# Creates and loads a virtual environment.\n# You can specify the path of the virtual environment through VIRTUAL_ENV\n# environment variable, otherwise it will be set to\n# \"$direnv_layout_dir/python-$python_version\".\n# For python older then 3.3 this requires virtualenv to be installed.\n#\n# It's possible to specify the python executable if you want to use different\n# versions of python.\n#\nlayout_python() {\n  local old_env\n  local python=${1:-python}\n  [[ $# -gt 0 ]] && shift\n  old_env=$(direnv_layout_dir)/virtualenv\n  unset PYTHONHOME\n  if [[ -d $old_env && $python == python ]]; then\n    VIRTUAL_ENV=$old_env\n  else\n    local python_version ve\n    # shellcheck disable=SC2046\n    read -r python_version ve <<<$($python -c \"import importlib.util as u, platform as p;ve='venv' if u.find_spec('venv') else ('virtualenv' if u.find_spec('virtualenv') else '');print('.'.join(p.python_version_tuple()[:2])+' '+ve)\")\n    if [[ -z $python_version ]]; then\n      log_error \"Could not find python's version\"\n      return 1\n    fi\n\n    if [[ -n \"${VIRTUAL_ENV:-}\" ]]; then\n      local REPLY\n      realpath.absolute \"$VIRTUAL_ENV\"\n      VIRTUAL_ENV=$REPLY\n    else\n      VIRTUAL_ENV=$(direnv_layout_dir)/python-$python_version\n    fi\n    case $ve in\n    \"venv\")\n      if [[ ! -d $VIRTUAL_ENV ]]; then\n        $python -m venv \"$@\" \"$VIRTUAL_ENV\"\n      fi\n      ;;\n    \"virtualenv\")\n      if [[ ! -d $VIRTUAL_ENV ]]; then\n        $python -m virtualenv \"$@\" \"$VIRTUAL_ENV\"\n      fi\n      ;;\n    *)\n      log_error \"Error: neither venv nor virtualenv are available.\"\n      return 1\n      ;;\n    esac\n  fi\n  export VIRTUAL_ENV\n  PATH_add \"$VIRTUAL_ENV/bin\"\n}\n\n# Usage: layout python2\n#\n# A shortcut for $(layout python python2)\n#\nlayout_python2() {\n  layout_python python2 \"$@\"\n}\n\n# Usage: layout python3\n#\n# A shortcut for $(layout python python3)\n#\nlayout_python3() {\n  layout_python python3 \"$@\"\n}\n\n# Usage: layout anaconda <env_spec> [<conda_exe>]\n#\n# Activates anaconda for the provided environment.\n# The <env_spec> can be one of the following:\n#   1. Name of an environment\n#   2. Prefix path to an environment\n#   3. Path to a yml-formatted file specifying the environment\n#\n# Environment creation will use environment.yml, if\n# available, when a name or prefix is provided. Otherwise,\n# an empty environment will be created.\n#\n# <conda_exe> is optional and will default to the one\n# found in the system environment.\n#\nlayout_anaconda() {\n  local env_spec=$1\n  local env_name\n  local env_loc\n  local env_config\n  local conda\n  local REPLY\n  if [[ $# -gt 1 ]]; then\n    conda=${2}\n  else\n    conda=$(command -v conda)\n  fi\n  realpath.dirname \"$conda\"\n  PATH_add \"$REPLY\"\n\n  if [[ \"${env_spec##*.}\" == \"yml\" ]]; then\n    env_config=$env_spec\n  elif [[ \"${env_spec%%/*}\" == \".\" ]]; then\n    # \"./foo\" relative prefix\n    realpath.absolute \"$env_spec\"\n    env_loc=\"$REPLY\"\n  elif [[ ! \"$env_spec\" == \"${env_spec#/}\" ]]; then\n    # \"/foo\" absolute prefix\n    env_loc=\"$env_spec\"\n  elif [[ -n \"$env_spec\" ]]; then\n    # \"name\" specified\n    env_name=\"$env_spec\"\n  else\n    # Need at least one\n    env_config=environment.yml\n  fi\n\n  # If only config, it needs a name field\n  if [[ -n \"$env_config\" ]]; then\n    if [[ -e \"$env_config\" ]]; then\n      env_name=\"$(grep -- '^name:' \"$env_config\")\"\n      env_name=\"${env_name/#name:*([[:space:]])/}\"\n      if [[ -z \"$env_name\" ]]; then\n        log_error \"Unable to find 'name' in '$env_config'\"\n        return 1\n      fi\n    else\n      log_error \"Unable to find config '$env_config'\"\n      return 1\n    fi\n  fi\n\n  # Try to find location based on name\n  if [[ -z \"$env_loc\" ]]; then\n    # Update location if already created\n    env_loc=$(\"$conda\" env list | grep -- '^'\"$env_name\"'\\s')\n    env_loc=\"${env_loc##* }\"\n  fi\n\n  # Check for environment existence\n  if [[ ! -d \"$env_loc\" ]]; then\n\n    # Create if necessary\n    if [[ -z \"$env_config\" ]] && [[ -n \"$env_name\" ]]; then\n      if [[ -e environment.yml ]]; then\n        \"$conda\" env create --file environment.yml --name \"$env_name\"\n      else\n        \"$conda\" create -y --name \"$env_name\"\n      fi\n    elif [[ -n \"$env_config\" ]]; then\n      \"$conda\" env create --file \"$env_config\"\n    elif [[ -n \"$env_loc\" ]]; then\n      if [[ -e environment.yml ]]; then\n        \"$conda\" env create --file environment.yml --prefix \"$env_loc\"\n      else\n        \"$conda\" create -y --prefix \"$env_loc\"\n      fi\n    fi\n\n    if [[ -z \"$env_loc\" ]]; then\n      # Update location if already created\n      env_loc=$(\"$conda\" env list | grep -- '^'\"$env_name\"'\\s')\n      env_loc=\"${env_loc##* }\"\n    fi\n  fi\n\n  eval \"$(\"$conda\" shell.bash activate \"$env_loc\")\"\n}\n\n# Usage: layout pipenv\n#\n# Similar to layout_python, but uses Pipenv to build a\n# virtualenv from the Pipfile located in the same directory.\n#\nlayout_pipenv() {\n  PIPENV_PIPFILE=\"${PIPENV_PIPFILE:-Pipfile}\"\n  if [[ ! -f \"$PIPENV_PIPFILE\" ]]; then\n    log_error \"No Pipfile found.  Use \\`pipenv\\` to create a \\`$PIPENV_PIPFILE\\` first.\"\n    exit 2\n  fi\n\n  VIRTUAL_ENV=$(\n    pipenv --venv 2>/dev/null\n    true\n  )\n\n  if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then\n    pipenv install --dev\n    VIRTUAL_ENV=$(pipenv --venv)\n  fi\n\n  PATH_add \"$VIRTUAL_ENV/bin\"\n  export PIPENV_ACTIVE=1\n  export VIRTUAL_ENV\n}\n\n# Usage: layout pyenv <python version number> [<python version number> ...]\n#\n# Example:\n#\n#    layout pyenv 3.6.7\n#\n# Uses pyenv and layout_python to create and load a virtual environment.\n# You can specify the path of the virtual environment through VIRTUAL_ENV\n# environment variable, otherwise it will be set to\n# \"$direnv_layout_dir/python-$python_version\".\n#\nlayout_pyenv() {\n  unset PYENV_VERSION\n  # layout_python prepends each python version to the PATH, so we add each\n  # version in reverse order so that the first listed version ends up\n  # first in the path\n  local i\n  for ((i = $#; i > 0; i--)); do\n    local python_version=${!i}\n    local pyenv_python\n    pyenv_python=$(pyenv root)/versions/${python_version}/bin/python\n    if [[ -x \"$pyenv_python\" ]]; then\n      if layout_python \"$pyenv_python\"; then\n        # e.g. Given \"use pyenv 3.6.9 2.7.16\", PYENV_VERSION becomes \"3.6.9:2.7.16\"\n        PYENV_VERSION=${python_version}${PYENV_VERSION:+:$PYENV_VERSION}\n      fi\n    else\n      log_error \"pyenv: version '$python_version' not installed\"\n      return 1\n    fi\n  done\n\n  [[ -n \"$PYENV_VERSION\" ]] && export PYENV_VERSION\n}\n\n# Usage: layout ruby\n#\n# Sets the GEM_HOME environment variable to \"$(direnv_layout_dir)/ruby/RUBY_VERSION\".\n# This forces the installation of any gems into the project's sub-folder.\n# If you're using bundler it will create wrapper programs that can be invoked\n# directly instead of using the $(bundle exec) prefix.\n#\nlayout_ruby() {\n  BUNDLE_BIN=$(direnv_layout_dir)/bin\n\n  if ruby -e \"exit Gem::VERSION > '2.2.0'\" 2>/dev/null; then\n    GEM_HOME=$(direnv_layout_dir)/ruby\n  else\n    local ruby_version\n    ruby_version=$(ruby -e\"puts (defined?(RUBY_ENGINE) ? RUBY_ENGINE : 'ruby') + '-' + RUBY_VERSION\")\n    GEM_HOME=$(direnv_layout_dir)/ruby-${ruby_version}\n  fi\n\n  export BUNDLE_BIN\n  export GEM_HOME\n\n  PATH_add \"$GEM_HOME/bin\"\n  PATH_add \"$BUNDLE_BIN\"\n}\n\n# Usage: layout julia\n#\n# Sets the JULIA_PROJECT environment variable to the current directory.\nlayout_julia() {\n  export JULIA_PROJECT=$PWD\n}\n\n# Usage: use <program_name> [<version>]\n#\n# A semantic command dispatch intended for loading external dependencies into\n# the environment.\n#\n# Example:\n#\n#    use_ruby() {\n#      echo \"Ruby $1\"\n#    }\n#    use ruby 1.9.3\n#    # output: Ruby 1.9.3\n#\nuse() {\n  local cmd=$1\n  log_status \"using $*\"\n  shift\n  \"use_$cmd\" \"$@\"\n}\n\n# Usage: use julia [<version>]\n# Loads specified Julia version.\n#\n# Environment Variables:\n#\n# - $JULIA_VERSIONS (required)\n#   You must specify a path to your installed Julia versions with the `$JULIA_VERSIONS` variable.\n#\n# - $JULIA_VERSION_PREFIX (optional) [default=\"julia-\"]\n#   Overrides the default version prefix.\n#\nuse_julia() {\n  local version=${1:-}\n  local julia_version_prefix=${JULIA_VERSION_PREFIX-julia-}\n  local search_version\n  local julia_prefix\n\n  if [[ -z ${JULIA_VERSIONS:-} || -z $version ]]; then\n    log_error \"Must specify the \\$JULIA_VERSIONS environment variable and a Julia version!\"\n    return 1\n  fi\n\n  julia_prefix=\"${JULIA_VERSIONS}/${julia_version_prefix}${version}\"\n\n  if [[ ! -d ${julia_prefix} ]]; then\n    search_version=$(semver_search \"${JULIA_VERSIONS}\" \"${julia_version_prefix}\" \"${version}\")\n    julia_prefix=\"${JULIA_VERSIONS}/${julia_version_prefix}${search_version}\"\n  fi\n\n  if [[ ! -d $julia_prefix ]]; then\n    log_error \"Unable to find Julia version ($version) in ($JULIA_VERSIONS)!\"\n    return 1\n  fi\n\n  if [[ ! -x $julia_prefix/bin/julia ]]; then\n    log_error \"Unable to load Julia binary (julia) for version ($version) in ($JULIA_VERSIONS)!\"\n    return 1\n  fi\n\n  PATH_add \"$julia_prefix/bin\"\n  MANPATH_add \"$julia_prefix/share/man\"\n\n  log_status \"Successfully loaded $(julia --version), from prefix ($julia_prefix)\"\n}\n\n# Usage: use rbenv\n#\n# Loads rbenv which add the ruby wrappers available on the PATH.\n#\nuse_rbenv() {\n  eval \"$(rbenv init -)\"\n}\n\n# Usage: rvm [...]\n#\n# Should work just like in the shell if you have rvm installed.#\n#\nrvm() {\n  unset rvm\n  if [[ -n ${rvm_scripts_path:-} ]]; then\n    # shellcheck disable=SC1090,SC1091\n    source \"${rvm_scripts_path}/rvm\"\n  elif [[ -n ${rvm_path:-} ]]; then\n    # shellcheck disable=SC1090,SC1091\n    source \"${rvm_path}/scripts/rvm\"\n  else\n    # shellcheck disable=SC1090,SC1091\n    source \"$HOME/.rvm/scripts/rvm\"\n  fi\n  rvm \"$@\"\n}\n\n# Usage: use node [<version>]\n#\n# Loads the specified NodeJS version into the environment.\n#\n# If a partial NodeJS version is passed (i.e. `4.2`), a fuzzy match\n# is performed and the highest matching version installed is selected.\n#\n# If no version is passed, it will look at the '.nvmrc' or '.node-version'\n# files in the current directory if they exist.\n#\n# Environment Variables:\n#\n# - $NODE_VERSIONS (required)\n#   Points to a folder that contains all the installed Node versions. That\n#   folder must exist.\n#\n# - $NODE_VERSION_PREFIX (optional) [default=\"node-v\"]\n#   Overrides the default version prefix.\n#\nuse_node() {\n  local version=${1:-}\n  local via=\"\"\n  local node_version_prefix=${NODE_VERSION_PREFIX-node-v}\n  local search_version\n  local node_prefix\n\n  if [[ -z ${NODE_VERSIONS:-} || ! -d $NODE_VERSIONS ]]; then\n    log_error \"You must specify a \\$NODE_VERSIONS environment variable and the directory specified must exist!\"\n    return 1\n  fi\n\n  if [[ -z $version && -f .nvmrc ]]; then\n    version=$(<.nvmrc)\n    via=\".nvmrc\"\n  fi\n\n  if [[ -z $version && -f .node-version ]]; then\n    version=$(<.node-version)\n    via=\".node-version\"\n  fi\n\n  version=${version#v}\n\n  if [[ -z $version ]]; then\n    log_error \"I do not know which NodeJS version to load because one has not been specified!\"\n    return 1\n  fi\n\n  # Search for the highest version matching $version in the folder\n  search_version=$(semver_search \"$NODE_VERSIONS\" \"${node_version_prefix}\" \"${version}\")\n  node_prefix=\"${NODE_VERSIONS}/${node_version_prefix}${search_version}\"\n\n  if [[ ! -d $node_prefix ]]; then\n    log_error \"Unable to find NodeJS version ($version) in ($NODE_VERSIONS)!\"\n    return 1\n  fi\n\n  if [[ ! -x $node_prefix/bin/node ]]; then\n    log_error \"Unable to load NodeJS binary (node) for version ($version) in ($NODE_VERSIONS)!\"\n    return 1\n  fi\n\n  load_prefix \"$node_prefix\"\n\n  if [[ -z $via ]]; then\n    log_status \"Successfully loaded NodeJS $(node --version), from prefix ($node_prefix)\"\n  else\n    log_status \"Successfully loaded NodeJS $(node --version) (via $via), from prefix ($node_prefix)\"\n  fi\n}\n\n# Usage: use nodenv <node version number>\n#\n# Example:\n#\n#    use nodenv 15.2.1\n#\n# Uses nodenv, use_node and layout_node to add the chosen node version and\n# \"$PWD/node_modules/.bin\" to the PATH\n#\nuse_nodenv() {\n  local node_version=\"${1}\"\n  local node_versions_dir\n  local nodenv_version\n  node_versions_dir=\"$(nodenv root)/versions\"\n  nodenv_version=\"${node_versions_dir}/${node_version}\"\n  if [[ -e \"$nodenv_version\" ]]; then\n    # Put the selected node version in the PATH\n    NODE_VERSIONS=\"${node_versions_dir}\" NODE_VERSION_PREFIX=\"\" use_node \"${node_version}\"\n    # Add $PWD/node_modules/.bin to the PATH\n    layout_node\n  else\n    log_error \"nodenv: version '$node_version' not installed.  Use \\`nodenv install ${node_version}\\` to install it first.\"\n    return 1\n  fi\n}\n\n# Usage: use_nix [...]\n#\n# Load environment variables from `nix-shell`.\n# If you have a `default.nix` or `shell.nix` these will be\n# used by default, but you can also specify packages directly\n# (e.g `use nix -p ocaml`).\n#\nuse_nix() {\n  direnv_load nix-shell --show-trace \"$@\" --run \"$(join_args \"$direnv\" dump)\"\n  if [[ $# == 0 ]]; then\n    watch_file default.nix shell.nix\n  fi\n}\n\n# Usage: use_flake [<installable>]\n#\n# Load the build environment of a derivation similar to `nix develop`.\n#\n# By default it will load the current folder flake.nix devShell attribute. Or\n# pass an \"installable\" like \"nixpkgs#hello\" to load all the build\n# dependencies of the hello package from the latest nixpkgs.\n#\n# Note that the flakes feature is hidden behind an experimental flag, which\n# you will have to enable on your own. Flakes is not considered stable yet.\nuse_flake() {\n  watch_file flake.nix\n  watch_file flake.lock\n  mkdir -p \"$(direnv_layout_dir)\"\n  eval \"$(nix --extra-experimental-features \"nix-command flakes\" print-dev-env --profile \"$(direnv_layout_dir)/flake-profile\" \"$@\")\"\n  nix --extra-experimental-features \"nix-command flakes\" profile wipe-history --profile \"$(direnv_layout_dir)/flake-profile\"\n}\n\n# Usage: use_guix [...]\n#\n# Load environment variables from `guix shell`.\n# Any arguments given will be passed to guix shell. For example,\n# `use guix hello` would setup an environment including the hello\n# package. To create an environment with the hello dependencies, the\n# `--development` flag is used `use guix --development hello`. Other\n# options include `--file` which allows loading an environment from a\n# file. For a full list of options, consult the documentation for the\n# `guix shell` command.\nuse_guix() {\n  eval \"$(guix shell \"$@\" --search-paths)\"\n}\n\n# Usage: use_vim [<vimrc_file>]\n#\n# Prepends the specified vim script (or .vimrc.local by default) to the\n# `DIRENV_EXTRA_VIMRC` environment variable.\n#\n# This variable is understood by the direnv/direnv.vim extension. When found,\n# it will source it after opening files in the directory.\nuse_vim() {\n  local extra_vimrc=${1:-.vimrc.local}\n  path_add DIRENV_EXTRA_VIMRC \"$extra_vimrc\"\n}\n\n# Usage: direnv_version <version_at_least>\n#\n# Checks that the direnv version is at least old as <version_at_least>.\ndirenv_version() {\n  \"$direnv\" version \"$@\"\n}\n\n# Usage: on_git_branch [<branch_name>] OR on_git_branch -r [<regexp>]\n#\n# Returns 0 if within a git repository with given `branch_name`. If no branch\n# name is provided, then returns 0 when within _any_ branch. Requires the git\n# command to be installed. Returns 1 otherwise.\n#\n# When the `-r` flag is specified, then the second argument is interpreted as a\n# regexp pattern for matching a branch name.\n#\n# Regardless, when a branch is specified, then `.git/HEAD` is watched so that\n# entering/exiting a branch triggers a reload.\n#\n# Example (.envrc):\n#\n#    if on_git_branch; then\n#      echo \"Thanks for contributing to a GitHub project!\"\n#    fi\n#\n#    if on_git_branch child_changes; then\n#      export MERGE_BASE_BRANCH=parent_changes\n#    fi\n#\n#    if on_git_branch -r '.*py2'; then\n#      layout python2\n#    else\n#      layout python\n#    fi\non_git_branch() {\n  local git_dir\n  if ! has git; then\n    log_error \"on_git_branch needs git, which could not be found on your system\"\n    return 1\n  elif ! git_dir=$(git rev-parse --absolute-git-dir 2>/dev/null); then\n    log_error \"on_git_branch could not locate the .git directory corresponding to the current working directory\"\n    return 1\n  elif [ -z \"$1\" ]; then\n    return 0\n  elif [[ \"$1\" = \"-r\" && -z \"$2\" ]]; then\n    log_error \"missing regexp pattern after \\`-r\\` flag\"\n    return 1\n  fi\n  watch_file \"$git_dir/HEAD\"\n  local git_branch\n  git_branch=$(git branch --show-current)\n  if [ \"$1\" = '-r' ]; then\n    [[ \"$git_branch\" =~ $2 ]]\n  else\n    [ \"$1\" = \"$git_branch\" ]\n  fi\n}\n\n# Usage: __main__ <cmd> [...<args>]\n#\n# Used by rc.go\n__main__() {\n  # reserve stdout for dumping\n  exec 3>&1\n  exec 1>&2\n\n  # shellcheck disable=SC2317\n  __dump_at_exit() {\n    local ret=$?\n    \"$direnv\" dump json \"\" >&3\n    trap - EXIT\n    exit \"$ret\"\n  }\n  trap __dump_at_exit EXIT\n\n  # load direnv libraries\n  for lib in \"$direnv_config_dir/lib/\"*.sh; do\n    # shellcheck disable=SC1090\n    source \"$lib\"\n  done\n\n  # load the global ~/.direnvrc if present\n  if [[ -f $direnv_config_dir/direnvrc ]]; then\n    # shellcheck disable=SC1090,SC1091\n    source \"$direnv_config_dir/direnvrc\" >&2\n  elif [[ -f $HOME/.direnvrc ]]; then\n    # shellcheck disable=SC1090,SC1091\n    source \"$HOME/.direnvrc\" >&2\n  fi\n\n  # and finally load the .envrc\n  \"$@\"\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.0068359375,
          "content": "2.35.0\n"
        },
        {
          "name": "xdg",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}