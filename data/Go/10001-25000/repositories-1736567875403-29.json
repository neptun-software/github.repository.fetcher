{
  "metadata": {
    "timestamp": 1736567875403,
    "page": 29,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "micro/go-micro",
      "stars": 22063,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.453125,
          "content": "# Develop tools\n/.vscode/\n/.idea/\n/.trunk\n\n# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Folders\n_obj\n_test\n_build\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# vim temp files\n*~\n*.swp\n*.swo\n\n# go work files\ngo.work\ngo.work.sum\n"
        },
        {
          "name": ".golangci.yaml",
          "type": "blob",
          "size": 8.076171875,
          "content": "# This file contains all available configuration options\n# with their default values.\n\n# options for analysis running\nrun:\n  # go: '1.18'\n  # default concurrency is a available CPU number\n  # concurrency: 4\n\n  # timeout for analysis, e.g. 30s, 5m, default is 1m\n  deadline: 10m\n\n  # exit code when at least one issue was found, default is 1\n  issues-exit-code: 1\n\n  # include test files or not, default is true\n  tests: true\n\n  # which files to skip: they will be analyzed, but issues from them\n  # won't be reported. Default value is empty list, but there is\n  # no need to include all autogenerated files, we confidently recognize\n  # autogenerated files. If it's not please let us know.\n  skip-files:\n    []\n    # - .*\\\\.pb\\\\.go$\n\n  allow-parallel-runners: true\n\n  # list of build tags, all linters use it. Default is empty list.\n  build-tags: []\n\n# output configuration options\noutput:\n  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions\n  #\n  # Multiple can be specified by separating them by comma, output can be provided\n  # for each of them by separating format name and path by colon symbol.\n  # Output path can be either `stdout`, `stderr` or path to the file to write to.\n  # Example: \"checkstyle:report.json,colored-line-number\"\n  #\n  # Default: colored-line-number\n  format: colored-line-number\n  # Print lines of code with issue.\n  # Default: true\n  print-issued-lines: true\n  # Print linter name in the end of issue text.\n  # Default: true\n  print-linter-name: true\n  # Make issues output unique by line.\n  # Default: true\n  uniq-by-line: true\n  # Add a prefix to the output file references.\n  # Default is no prefix.\n  path-prefix: \"\"\n  # Sort results by: filepath, line and column.\n  sort-results: true\n\n# all available settings of specific linters\nlinters-settings:\n  wsl:\n    allow-cuddle-with-calls: [\"Lock\", \"RLock\", \"defer\"]\n  funlen:\n    lines: 80\n    statements: 60\n  varnamelen:\n    # The longest distance, in source lines, that is being considered a \"small scope\".\n    # Variables used in at most this many lines will be ignored.\n    # Default: 5\n    max-distance: 26\n    ignore-names:\n      - err\n      - id\n      - ch\n      - wg\n      - mu\n    ignore-decls:\n      - c echo.Context\n      - t testing.T\n      - f *foo.Bar\n      - e error\n      - i int\n      - const C\n      - T any\n      - m map[string]int\n  errcheck:\n    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;\n    # default is false: such cases aren't reported by default.\n    check-type-assertions: true\n\n    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;\n    # default is false: such cases aren't reported by default.\n    check-blank: true\n  govet:\n    # report about shadowed variables\n    check-shadowing: false\n  gofmt:\n    # simplify code: gofmt with `-s` option, true by default\n    simplify: true\n  gocyclo:\n    # minimal code complexity to report, 30 by default (but we recommend 10-20)\n    min-complexity: 15\n  maligned:\n    # print struct with more effective memory layout or not, false by default\n    suggest-new: true\n  dupl:\n    # tokens count to trigger issue, 150 by default\n    threshold: 100\n  goconst:\n    # minimal length of string constant, 3 by default\n    min-len: 3\n    # minimal occurrences count to trigger, 3 by default\n    min-occurrences: 3\n  depguard:\n    list-type: blacklist\n    # Packages listed here will reported as error if imported\n    packages:\n      - github.com/golang/protobuf/proto\n  misspell:\n    # Correct spellings using locale preferences for US or UK.\n    # Default is to use a neutral variety of English.\n    # Setting locale to US will correct the British spelling of 'colour' to 'color'.\n    locale: US\n  lll:\n    # max line length, lines longer will be reported. Default is 120.\n    # '\\t' is counted as 1 character by default, and can be changed with the tab-width option\n    line-length: 120\n    # tab width in spaces. Default to 1.\n    tab-width: 1\n  unused:\n    # treat code as a program (not a library) and report unused exported identifiers; default is false.\n    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:\n    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations\n    # with golangci-lint call it on a directory with the changed file.\n    check-exported: false\n  unparam:\n    # call graph construction algorithm (cha, rta). In general, use cha for libraries,\n    # and rta for programs with main packages. Default is cha.\n    algo: cha\n\n    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.\n    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:\n    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations\n    # with golangci-lint call it on a directory with the changed file.\n    check-exported: false\n  nakedret:\n    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30\n    max-func-lines: 60\n  nolintlint:\n    allow-unused: false\n    allow-leading-space: false\n    allow-no-explanation: []\n    require-explanation: false\n    require-specific: true\n  prealloc:\n    # XXX: we don't recommend using this linter before doing performance profiling.\n    # For most programs usage of prealloc will be a premature optimization.\n\n    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.\n    # True by default.\n    simple: true\n    range-loops: true # Report preallocation suggestions on range loops, true by default\n    for-loops: false # Report preallocation suggestions on for loops, false by default\n  cyclop:\n    # the maximal code complexity to report\n    max-complexity: 20\n  gomoddirectives:\n    replace-local: true\n    retract-allow-no-explanation: false\n    exclude-forbidden: true\n\nlinters:\n  enable-all: true\n  disable-all: false\n  fast: false\n  disable:\n    - golint\n    - varcheck\n    - ifshort\n    - structcheck\n    - deadcode\n    # - nosnakecase\n    - interfacer\n    - maligned\n    - scopelint\n    - exhaustivestruct\n    - testpackage\n    - promlinter\n    - nonamedreturns\n    - makezero\n    - gofumpt\n    - nlreturn\n    - thelper\n\n    # Can be considered to be enabled\n    - gochecknoinits\n    - gochecknoglobals # RIP\n    - dogsled\n    - wrapcheck\n    - paralleltest\n    - ireturn\n    - gomnd\n    - goerr113\n    - exhaustruct\n    - containedctx\n    - godox\n    - forcetypeassert\n    - gci\n    - lll\n\nissues:\n  # List of regexps of issue texts to exclude, empty list by default.\n  # But independently from this option we use default exclude patterns,\n  # it can be disabled by `exclude-use-default: false`. To list all\n  # excluded by default patterns execute `golangci-lint run --help`\n  # exclude:\n  #   - package comment should be of the form \"Package services ...\" # revive\n  #   - ^ST1000 # ST1000: at least one file in a package should have a package comment (stylecheck)\n\n  # exclude-rules:\n  #   - path: internal/app/machined/pkg/system/services\n  #     linters:\n  #       - dupl\n  exclude-rules:\n    - path: _test\\.go\n      linters:\n        - gocyclo\n        - dupl\n        - gosec\n        - funlen\n        - varnamelen\n        - wsl\n\n  # Independently from option `exclude` we use default exclude patterns,\n  # it can be disabled by this option. To list all\n  # excluded by default patterns execute `golangci-lint run --help`.\n  # Default value for this option is true.\n  exclude-use-default: false\n\n  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.\n  max-issues-per-linter: 0\n\n  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.\n  max-same-issues: 0\n\n  # Show only new issues: if there are unstaged changes or untracked files,\n  # only those changes are analyzed, else only changes in HEAD~ are analyzed.\n  # It's a super-useful option for integration of golangci-lint into existing\n  # large codebase. It's not practical to fix all existing issues at the moment\n  # of integration: much better don't allow issues in new code.\n  # Default is false.\n  new: false\n"
        },
        {
          "name": ".richstyle.yaml",
          "type": "blob",
          "size": 0.4755859375,
          "content": "labelType: long\ncoverThreshold: 70\nbuildStyle:\n  bold: true\n  foreground: yellow\nstartStyle:\n  foreground: lightBlack\npassStyle:\n  foreground: green\nfailStyle:\n  bold: true\n  foreground: \"#821515\"\nskipStyle:\n  foreground: lightBlack\npassPackageStyle:\n  foreground: green\n  hide: false\nfailPackageStyle:\n  bold: true\n  foreground: \"#821515\"\ncoveredStyle:\n  foreground: green\nuncoveredStyle:\n  bold: true\n  foreground: yellow\nfileStyle:\n  foreground: cyan\nlineStyle:\n  foreground: magenta\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3046875,
          "content": "# Go Micro [![Go.Dev reference](https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&logoColor=white&style=flat-square)](https://pkg.go.dev/go-micro.dev/v5?tab=doc) [![Go Report Card](https://goreportcard.com/badge/github.com/go-micro/go-micro)](https://goreportcard.com/report/github.com/go-micro/go-micro)\n\nGo Micro is a framework for distributed systems development.\n\n## Overview\n\nGo Micro provides the core requirements for distributed systems development including RPC and Event driven communication.\nThe Go Micro philosophy is sane defaults with a pluggable architecture. We provide defaults to get you started quickly\nbut everything can be easily swapped out.\n\n## Features\n\nGo Micro abstracts away the details of distributed systems. Here are the main features.\n\n- **Authentication** - Auth is built in as a first class citizen. Authentication and authorization enable secure\n  zero trust networking by providing every service an identity and certificates. This additionally includes rule\n  based access control.\n\n- **Dynamic Config** - Load and hot reload dynamic config from anywhere. The config interface provides a way to load application\n  level config from any source such as env vars, file, etcd. You can merge the sources and even define fallbacks.\n\n- **Data Storage** - A simple data store interface to read, write and delete records. It includes support for many storage backends\nin the plugins repo. State and persistence becomes a core requirement beyond prototyping and Micro looks to build that into the framework.\n\n- **Service Discovery** - Automatic service registration and name resolution. Service discovery is at the core of micro service\n  development. When service A needs to speak to service B it needs the location of that service. The default discovery mechanism is\n  multicast DNS (mdns), a zeroconf system.\n\n- **Load Balancing** - Client side load balancing built on service discovery. Once we have the addresses of any number of instances\n  of a service we now need a way to decide which node to route to. We use random hashed load balancing to provide even distribution\n  across the services and retry a different node if there's a problem.\n\n- **Message Encoding** - Dynamic message encoding based on content-type. The client and server will use codecs along with content-type\n  to seamlessly encode and decode Go types for you. Any variety of messages could be encoded and sent from different clients. The client\n  and server handle this by default. This includes protobuf and json by default.\n\n- **RPC Client/Server** - RPC based request/response with support for bidirectional streaming. We provide an abstraction for synchronous\n  communication. A request made to a service will be automatically resolved, load balanced, dialled and streamed.\n\n- **Async Messaging** - PubSub is built in as a first class citizen for asynchronous communication and event driven architectures.\n  Event notifications are a core pattern in micro service development. The default messaging system is a HTTP event message broker.\n\n- **Pluggable Interfaces** - Go Micro makes use of Go interfaces for each distributed system abstraction. Because of this these interfaces\n  are pluggable and allows Go Micro to be runtime agnostic. You can plugin any underlying technology.\n\n## Getting Started\n\nTo make use of Go Micro import it \n\n```golang\nimport \"go-micro.dev/v5\"\n```\n\nDefine a handler (protobuf is optionally supported - see [example](https://github.com/go-micro/examples/blob/main/helloworld/main.go)) \n\n```golang\ntype Request struct {\n        Name string `json:\"name\"`\n}\n\ntype Response struct {\n        Message string `json:\"message\"`\n}\n\ntype Helloworld struct{}\n\nfunc (h *Helloworld) Greeting(ctx context.Context, req *Request, rsp *Response) error {\n        rsp.Message = \"Hello \" + req.Name\n        return nil\n}\n```\n\nCreate, initialise and run the service\n\n```golang\n// create a new service\nservice := micro.NewService(\n    micro.Name(\"helloworld\"),\n    micro.Handle(new(Helloworld)),\n)\n\n// initialise flags\nservice.Init()\n\n// start the service\nservice.Run()\n```\n\nOptionally set fixed address\n\n```golang\nservice := micro.NewService(\n    // set address\n    micro.Address(\":8080\"),\n)\n```\n\nCall it via curl\n\n```\ncurl -XPOST \\\n     -H 'Content-Type: application/json' \\\n     -H 'Micro-Endpoint: Helloworld.Greeting' \\\n     -d '{\"name\": \"alice\"}' \\\n      http://localhost:8080\n```\n\n\n"
        },
        {
          "name": "auth",
          "type": "tree",
          "content": null
        },
        {
          "name": "broker",
          "type": "tree",
          "content": null
        },
        {
          "name": "cache",
          "type": "tree",
          "content": null
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "codec",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "errors",
          "type": "tree",
          "content": null
        },
        {
          "name": "event.go",
          "type": "blob",
          "size": 0.2822265625,
          "content": "package micro\n\nimport (\n\t\"context\"\n\n\t\"go-micro.dev/v5/client\"\n)\n\ntype event struct {\n\tc     client.Client\n\ttopic string\n}\n\nfunc (e *event) Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error {\n\treturn e.c.Publish(ctx, e.c.NewMessage(e.topic, msg), opts...)\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.2236328125,
          "content": "module go-micro.dev/v5\n\ngo 1.18\n\nrequire (\n\tgithub.com/bitly/go-simplejson v0.5.0\n\tgithub.com/fsnotify/fsnotify v1.6.0\n\tgithub.com/golang/protobuf v1.5.4\n\tgithub.com/google/uuid v1.3.0\n\tgithub.com/imdario/mergo v0.3.12\n\tgithub.com/miekg/dns v1.1.43\n\tgithub.com/oxtoacart/bpool v0.0.0-20190530202638-03653db5a59c\n\tgithub.com/patrickmn/go-cache v2.1.0+incompatible\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/stretchr/testify v1.8.1\n\tgithub.com/urfave/cli/v2 v2.25.7\n\tgolang.org/x/crypto v0.21.0\n\tgolang.org/x/net v0.23.0\n\tgolang.org/x/sync v0.1.0\n\tgoogle.golang.org/protobuf v1.33.0\n)\n\nrequire (\n\tgithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/google/go-cmp v0.5.9 // indirect\n\tgithub.com/kr/pretty v0.3.0 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 // indirect\n\tgolang.org/x/sys v0.18.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n\tgopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 7.41015625,
          "content": "github.com/bitly/go-simplejson v0.5.0 h1:6IH+V8/tVMab511d5bn4M7EwGXZf9Hj6i2xSwkNEM+Y=\ngithub.com/bitly/go-simplejson v0.5.0/go.mod h1:cXHtHw4XUPsvGaxgjIAn8PhEWG9NfngEKAMDJEczWVA=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869 h1:DDGfHa7BWjL4YnC6+E63dPcxHo2sUxDIu8g3QgEJdRY=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869/go.mod h1:Ekp36dRnpXw/yCqJaO+ZrUyxD+3VXMFFr56k5XYrpB4=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2 h1:p1EgwI/C7NhT0JmVkwCD2ZBK8j4aeHQX2pMHHBfMQ6w=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fsnotify/fsnotify v1.6.0 h1:n+5WquG0fcWoWp6xPWfHdbskMCQaFnG6PfBrh1Ky4HY=\ngithub.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=\ngithub.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/imdario/mergo v0.3.12 h1:b6R2BslTbIEToALKP7LxUvijTsNI9TAe80pLWN2g/HU=\ngithub.com/imdario/mergo v0.3.12/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.0 h1:WgNl7dwNpEZ6jJ9k1snq4pZsg7DOEN8hP9Xw0Tsjwk0=\ngithub.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/miekg/dns v1.1.43 h1:JKfpVSCB84vrAmHzyrsxB5NAr5kLoMXZArPSw7Qlgyg=\ngithub.com/miekg/dns v1.1.43/go.mod h1:+evo5L0630/F6ca/Z9+GAqzhjGyn8/c+TBaOyfEl0V4=\ngithub.com/oxtoacart/bpool v0.0.0-20190530202638-03653db5a59c h1:rp5dCmg/yLR3mgFuSOe4oEnDDmGLROTvMragMUXpTQw=\ngithub.com/oxtoacart/bpool v0.0.0-20190530202638-03653db5a59c/go.mod h1:X07ZCGwUbLaax7L0S3Tw4hpejzu63ZrrQiUe6W0hcy0=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.6.1 h1:/FiVV8dS/e+YqF2JvO3yXRFbBLTIuSDkuC7aBOAvL+k=\ngithub.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/urfave/cli/v2 v2.25.7 h1:VAzn5oq403l5pHjc4OhD54+XGO9cdKVL/7lDjF+iKUs=\ngithub.com/urfave/cli/v2 v2.25.7/go.mod h1:8qnjx1vcq5s2/wpsqoZFndg2CE5tNFyrTvS6SinrnYQ=\ngithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 h1:bAn7/zixMGCfxrRTfdpNzjtPYqr8smhKouy9mxVdGPU=\ngithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673/go.mod h1:N3UwUGtsrSj3ccvlPHLoLsHnpR27oXr4ZE984MbSER8=\ngolang.org/x/crypto v0.21.0 h1:X31++rzVUdKhX5sWmSOFZxx8UW/ldWx55cbf08iNAMA=\ngolang.org/x/crypto v0.21.0/go.mod h1:0BP7YvVV9gBbVKyeTG0Gyn+gZm94bibOW5BjDEYAOMs=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.23.0 h1:7EYJ93RZ9vYSZAIb2x3lnuvqO5zneoD6IvWjuhfxjTs=\ngolang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210303074136-134d130e1a04/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "logger",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 8.5009765625,
          "content": null
        },
        {
          "name": "metadata",
          "type": "tree",
          "content": null
        },
        {
          "name": "micro.go",
          "type": "blob",
          "size": 2.083984375,
          "content": "// Package micro is a pluggable framework for microservices\npackage micro\n\nimport (\n\t\"context\"\n\n\t\"go-micro.dev/v5/client\"\n\t\"go-micro.dev/v5/server\"\n)\n\ntype serviceKey struct{}\n\n// Service is an interface that wraps the lower level libraries\n// within go-micro. Its a convenience method for building\n// and initializing services.\ntype Service interface {\n\t// The service name\n\tName() string\n\t// Init initializes options\n\tInit(...Option)\n\t// Options returns the current options\n\tOptions() Options\n\t// Client is used to call services\n\tClient() client.Client\n\t// Server is for handling requests and events\n\tServer() server.Server\n\t// Run the service\n\tRun() error\n\t// The service implementation\n\tString() string\n}\n\n// Event is used to publish messages to a topic.\ntype Event interface {\n\t// Publish publishes a message to the event topic\n\tPublish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error\n}\n\n// Type alias to satisfy the deprecation.\ntype Publisher = Event\n\ntype Option func(*Options)\n\n// NewService creates and returns a new Service based on the packages within.\nfunc NewService(opts ...Option) Service {\n\treturn newService(opts...)\n}\n\n// FromContext retrieves a Service from the Context.\nfunc FromContext(ctx context.Context) (Service, bool) {\n\ts, ok := ctx.Value(serviceKey{}).(Service)\n\treturn s, ok\n}\n\n// NewContext returns a new Context with the Service embedded within it.\nfunc NewContext(ctx context.Context, s Service) context.Context {\n\treturn context.WithValue(ctx, serviceKey{}, s)\n}\n\n// NewEvent creates a new event publisher.\nfunc NewEvent(topic string, c client.Client) Event {\n\tif c == nil {\n\t\tc = client.NewClient()\n\t}\n\n\treturn &event{c, topic}\n}\n\n// RegisterHandler is syntactic sugar for registering a handler.\nfunc RegisterHandler(s server.Server, h interface{}, opts ...server.HandlerOption) error {\n\treturn s.Handle(s.NewHandler(h, opts...))\n}\n\n// RegisterSubscriber is syntactic sugar for registering a subscriber.\nfunc RegisterSubscriber(topic string, s server.Server, h interface{}, opts ...server.SubscriberOption) error {\n\treturn s.Subscribe(s.NewSubscriber(topic, h, opts...))\n}\n"
        },
        {
          "name": "options.go",
          "type": "blob",
          "size": 7.6318359375,
          "content": "package micro\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/urfave/cli/v2\"\n\t\"go-micro.dev/v5/auth\"\n\t\"go-micro.dev/v5/broker\"\n\t\"go-micro.dev/v5/cache\"\n\t\"go-micro.dev/v5/client\"\n\t\"go-micro.dev/v5/cmd\"\n\t\"go-micro.dev/v5/config\"\n\t\"go-micro.dev/v5/debug/profile\"\n\t\"go-micro.dev/v5/debug/trace\"\n\t\"go-micro.dev/v5/logger\"\n\t\"go-micro.dev/v5/registry\"\n\t\"go-micro.dev/v5/selector\"\n\t\"go-micro.dev/v5/server\"\n\t\"go-micro.dev/v5/store\"\n\t\"go-micro.dev/v5/transport\"\n)\n\n// Options for micro service.\ntype Options struct {\n\tRegistry registry.Registry\n\tStore    store.Store\n\tAuth     auth.Auth\n\tCmd      cmd.Cmd\n\tConfig   config.Config\n\tClient   client.Client\n\tServer   server.Server\n\n\t// Other options for implementations of the interface\n\t// can be stored in a context\n\tContext context.Context\n\n\tCache     cache.Cache\n\tProfile   profile.Profile\n\tTransport transport.Transport\n\tLogger    logger.Logger\n\tBroker    broker.Broker\n\t// Before and After funcs\n\tBeforeStart []func() error\n\tAfterStart  []func() error\n\tAfterStop   []func() error\n\n\tBeforeStop []func() error\n\n\tSignal bool\n}\n\nfunc newOptions(opts ...Option) Options {\n\topt := Options{\n\t\tAuth:      auth.DefaultAuth,\n\t\tBroker:    broker.DefaultBroker,\n\t\tCache:     cache.DefaultCache,\n\t\tCmd:       cmd.DefaultCmd,\n\t\tConfig:    config.DefaultConfig,\n\t\tClient:    client.DefaultClient,\n\t\tServer:    server.DefaultServer,\n\t\tStore:     store.DefaultStore,\n\t\tRegistry:  registry.DefaultRegistry,\n\t\tTransport: transport.DefaultTransport,\n\t\tContext:   context.Background(),\n\t\tSignal:    true,\n\t\tLogger:    logger.DefaultLogger,\n\t}\n\n\tfor _, o := range opts {\n\t\to(&opt)\n\t}\n\n\treturn opt\n}\n\n// Broker to be used for service.\nfunc Broker(b broker.Broker) Option {\n\treturn func(o *Options) {\n\t\to.Broker = b\n\t\t// Update Client and Server\n\t\to.Client.Init(client.Broker(b))\n\t\to.Server.Init(server.Broker(b))\n\t}\n}\n\nfunc Cache(c cache.Cache) Option {\n\treturn func(o *Options) {\n\t\to.Cache = c\n\t}\n}\n\nfunc Cmd(c cmd.Cmd) Option {\n\treturn func(o *Options) {\n\t\to.Cmd = c\n\t}\n}\n\n// Client to be used for service.\nfunc Client(c client.Client) Option {\n\treturn func(o *Options) {\n\t\to.Client = c\n\t}\n}\n\n// Context specifies a context for the service.\n// Can be used to signal shutdown of the service and for extra option values.\nfunc Context(ctx context.Context) Option {\n\treturn func(o *Options) {\n\t\to.Context = ctx\n\t}\n}\n\n// Handle will register a handler without any fuss\nfunc Handle(v interface{}) Option {\n\treturn func(o *Options) {\n\t\to.Server.Handle(\n\t\t\to.Server.NewHandler(v),\n\t\t)\n\t}\n}\n\n// HandleSignal toggles automatic installation of the signal handler that\n// traps TERM, INT, and QUIT.  Users of this feature to disable the signal\n// handler, should control liveness of the service through the context.\nfunc HandleSignal(b bool) Option {\n\treturn func(o *Options) {\n\t\to.Signal = b\n\t}\n}\n\n// Profile to be used for debug profile.\nfunc Profile(p profile.Profile) Option {\n\treturn func(o *Options) {\n\t\to.Profile = p\n\t}\n}\n\n// Server to be used for service.\nfunc Server(s server.Server) Option {\n\treturn func(o *Options) {\n\t\to.Server = s\n\t}\n}\n\n// Store sets the store to use.\nfunc Store(s store.Store) Option {\n\treturn func(o *Options) {\n\t\to.Store = s\n\t}\n}\n\n// Registry sets the registry for the service\n// and the underlying components.\nfunc Registry(r registry.Registry) Option {\n\treturn func(o *Options) {\n\t\to.Registry = r\n\t\t// Update Client and Server\n\t\to.Client.Init(client.Registry(r))\n\t\to.Server.Init(server.Registry(r))\n\t\t// Update Broker\n\t\to.Broker.Init(broker.Registry(r))\n\t}\n}\n\n// Tracer sets the tracer for the service.\nfunc Tracer(t trace.Tracer) Option {\n\treturn func(o *Options) {\n\t\to.Server.Init(server.Tracer(t))\n\t}\n}\n\n// Auth sets the auth for the service.\nfunc Auth(a auth.Auth) Option {\n\treturn func(o *Options) {\n\t\to.Auth = a\n\t}\n}\n\n// Config sets the config for the service.\nfunc Config(c config.Config) Option {\n\treturn func(o *Options) {\n\t\to.Config = c\n\t}\n}\n\n// Selector sets the selector for the service client.\nfunc Selector(s selector.Selector) Option {\n\treturn func(o *Options) {\n\t\to.Client.Init(client.Selector(s))\n\t}\n}\n\n// Transport sets the transport for the service\n// and the underlying components.\nfunc Transport(t transport.Transport) Option {\n\treturn func(o *Options) {\n\t\to.Transport = t\n\t\t// Update Client and Server\n\t\to.Client.Init(client.Transport(t))\n\t\to.Server.Init(server.Transport(t))\n\t}\n}\n\n// Convenience options\n\n// Address sets the address of the server.\nfunc Address(addr string) Option {\n\treturn func(o *Options) {\n\t\to.Server.Init(server.Address(addr))\n\t}\n}\n\n// Name of the service.\nfunc Name(n string) Option {\n\treturn func(o *Options) {\n\t\to.Server.Init(server.Name(n))\n\t}\n}\n\n// Version of the service.\nfunc Version(v string) Option {\n\treturn func(o *Options) {\n\t\to.Server.Init(server.Version(v))\n\t}\n}\n\n// Metadata associated with the service.\nfunc Metadata(md map[string]string) Option {\n\treturn func(o *Options) {\n\t\to.Server.Init(server.Metadata(md))\n\t}\n}\n\n// Flags that can be passed to service.\nfunc Flags(flags ...cli.Flag) Option {\n\treturn func(o *Options) {\n\t\to.Cmd.App().Flags = append(o.Cmd.App().Flags, flags...)\n\t}\n}\n\n// Action can be used to parse user provided cli options.\nfunc Action(a func(*cli.Context) error) Option {\n\treturn func(o *Options) {\n\t\to.Cmd.App().Action = a\n\t}\n}\n\n// RegisterTTL specifies the TTL to use when registering the service.\nfunc RegisterTTL(t time.Duration) Option {\n\treturn func(o *Options) {\n\t\to.Server.Init(server.RegisterTTL(t))\n\t}\n}\n\n// RegisterInterval specifies the interval on which to re-register.\nfunc RegisterInterval(t time.Duration) Option {\n\treturn func(o *Options) {\n\t\to.Server.Init(server.RegisterInterval(t))\n\t}\n}\n\n// WrapClient is a convenience method for wrapping a Client with\n// some middleware component. A list of wrappers can be provided.\n// Wrappers are applied in reverse order so the last is executed first.\nfunc WrapClient(w ...client.Wrapper) Option {\n\treturn func(o *Options) {\n\t\t// apply in reverse\n\t\tfor i := len(w); i > 0; i-- {\n\t\t\to.Client = w[i-1](o.Client)\n\t\t}\n\t}\n}\n\n// WrapCall is a convenience method for wrapping a Client CallFunc.\nfunc WrapCall(w ...client.CallWrapper) Option {\n\treturn func(o *Options) {\n\t\to.Client.Init(client.WrapCall(w...))\n\t}\n}\n\n// WrapHandler adds a handler Wrapper to a list of options passed into the server.\nfunc WrapHandler(w ...server.HandlerWrapper) Option {\n\treturn func(o *Options) {\n\t\tvar wrappers []server.Option\n\n\t\tfor _, wrap := range w {\n\t\t\twrappers = append(wrappers, server.WrapHandler(wrap))\n\t\t}\n\n\t\t// Init once\n\t\to.Server.Init(wrappers...)\n\t}\n}\n\n// WrapSubscriber adds a subscriber Wrapper to a list of options passed into the server.\nfunc WrapSubscriber(w ...server.SubscriberWrapper) Option {\n\treturn func(o *Options) {\n\t\tvar wrappers []server.Option\n\n\t\tfor _, wrap := range w {\n\t\t\twrappers = append(wrappers, server.WrapSubscriber(wrap))\n\t\t}\n\n\t\t// Init once\n\t\to.Server.Init(wrappers...)\n\t}\n}\n\n// Add opt to server option.\nfunc AddListenOption(option server.Option) Option {\n\treturn func(o *Options) {\n\t\to.Server.Init(option)\n\t}\n}\n\n// Before and Afters\n\n// BeforeStart run funcs before service starts.\nfunc BeforeStart(fn func() error) Option {\n\treturn func(o *Options) {\n\t\to.BeforeStart = append(o.BeforeStart, fn)\n\t}\n}\n\n// BeforeStop run funcs before service stops.\nfunc BeforeStop(fn func() error) Option {\n\treturn func(o *Options) {\n\t\to.BeforeStop = append(o.BeforeStop, fn)\n\t}\n}\n\n// AfterStart run funcs after service starts.\nfunc AfterStart(fn func() error) Option {\n\treturn func(o *Options) {\n\t\to.AfterStart = append(o.AfterStart, fn)\n\t}\n}\n\n// AfterStop run funcs after service stops.\nfunc AfterStop(fn func() error) Option {\n\treturn func(o *Options) {\n\t\to.AfterStop = append(o.AfterStop, fn)\n\t}\n}\n\n// Logger sets the logger for the service.\nfunc Logger(l logger.Logger) Option {\n\treturn func(o *Options) {\n\t\to.Logger = l\n\t}\n}\n"
        },
        {
          "name": "registry",
          "type": "tree",
          "content": null
        },
        {
          "name": "selector",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "service.go",
          "type": "blob",
          "size": 3.166015625,
          "content": "package micro\n\nimport (\n\t\"os\"\n\t\"os/signal\"\n\trtime \"runtime\"\n\t\"sync\"\n\n\t\"go-micro.dev/v5/client\"\n\t\"go-micro.dev/v5/cmd\"\n\tlog \"go-micro.dev/v5/logger\"\n\t\"go-micro.dev/v5/server\"\n\t\"go-micro.dev/v5/store\"\n\tsignalutil \"go-micro.dev/v5/util/signal\"\n)\n\ntype service struct {\n\topts Options\n\n\tonce sync.Once\n}\n\nfunc newService(opts ...Option) Service {\n\treturn &service{\n\t\topts: newOptions(opts...),\n\t}\n}\n\nfunc (s *service) Name() string {\n\treturn s.opts.Server.Options().Name\n}\n\n// Init initializes options. Additionally it calls cmd.Init\n// which parses command line flags. cmd.Init is only called\n// on first Init.\nfunc (s *service) Init(opts ...Option) {\n\t// process options\n\tfor _, o := range opts {\n\t\to(&s.opts)\n\t}\n\n\ts.once.Do(func() {\n\t\t// set cmd name\n\t\tif len(s.opts.Cmd.App().Name) == 0 {\n\t\t\ts.opts.Cmd.App().Name = s.Server().Options().Name\n\t\t}\n\n\t\t// Initialize the command flags, overriding new service\n\t\tif err := s.opts.Cmd.Init(\n\t\t\tcmd.Auth(&s.opts.Auth),\n\t\t\tcmd.Broker(&s.opts.Broker),\n\t\t\tcmd.Registry(&s.opts.Registry),\n\t\t\tcmd.Transport(&s.opts.Transport),\n\t\t\tcmd.Client(&s.opts.Client),\n\t\t\tcmd.Config(&s.opts.Config),\n\t\t\tcmd.Server(&s.opts.Server),\n\t\t\tcmd.Store(&s.opts.Store),\n\t\t\tcmd.Profile(&s.opts.Profile),\n\t\t); err != nil {\n\t\t\ts.opts.Logger.Log(log.FatalLevel, err)\n\t\t}\n\n\t\t// If the store has no Table set, fallback to the\n\t\t// services name\n\t\tif len(s.opts.Store.Options().Table) == 0 {\n\t\t\tname := s.opts.Cmd.App().Name\n\t\t\terr := s.opts.Store.Init(store.Table(name))\n\t\t\tif err != nil {\n\t\t\t\ts.opts.Logger.Log(log.FatalLevel, err)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (s *service) Options() Options {\n\treturn s.opts\n}\n\nfunc (s *service) Client() client.Client {\n\treturn s.opts.Client\n}\n\nfunc (s *service) Server() server.Server {\n\treturn s.opts.Server\n}\n\nfunc (s *service) String() string {\n\treturn \"micro\"\n}\n\nfunc (s *service) Start() error {\n\tfor _, fn := range s.opts.BeforeStart {\n\t\tif err := fn(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := s.opts.Server.Start(); err != nil {\n\t\treturn err\n\t}\n\n\tfor _, fn := range s.opts.AfterStart {\n\t\tif err := fn(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (s *service) Stop() error {\n\tvar err error\n\n\tfor _, fn := range s.opts.BeforeStop {\n\t\terr = fn()\n\t}\n\n\tif err := s.opts.Server.Stop(); err != nil {\n\t\treturn err\n\t}\n\n\tfor _, fn := range s.opts.AfterStop {\n\t\terr = fn()\n\t}\n\n\treturn err\n}\n\nfunc (s *service) Run() (err error) {\n\tlogger := s.opts.Logger\n\n\t// exit when help flag is provided\n\tfor _, v := range os.Args[1:] {\n\t\tif v == \"-h\" || v == \"--help\" {\n\t\t\tos.Exit(0)\n\t\t}\n\t}\n\n\t// start the profiler\n\tif s.opts.Profile != nil {\n\t\t// to view mutex contention\n\t\trtime.SetMutexProfileFraction(5)\n\t\t// to view blocking profile\n\t\trtime.SetBlockProfileRate(1)\n\n\t\tif err = s.opts.Profile.Start(); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tdefer func() {\n\t\t\tif nerr := s.opts.Profile.Stop(); nerr != nil {\n\t\t\t\tlogger.Log(log.ErrorLevel, nerr)\n\t\t\t}\n\t\t}()\n\t}\n\n\tlogger.Logf(log.InfoLevel, \"Starting [service] %s\", s.Name())\n\n\tif err = s.Start(); err != nil {\n\t\treturn err\n\t}\n\n\tch := make(chan os.Signal, 1)\n\tif s.opts.Signal {\n\t\tsignal.Notify(ch, signalutil.Shutdown()...)\n\t}\n\n\tselect {\n\t// wait on kill signal\n\tcase <-ch:\n\t// wait on context cancel\n\tcase <-s.opts.Context.Done():\n\t}\n\n\treturn s.Stop()\n}\n"
        },
        {
          "name": "store",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "transport",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}