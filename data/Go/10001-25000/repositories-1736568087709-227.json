{
  "metadata": {
    "timestamp": 1736568087709,
    "page": 227,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/grumpy",
      "stars": 10545,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": "build\nerrors.err\n*.swp\n*.pyc\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 1.1376953125,
          "content": "[BASIC]\nargument-rgx=^[a-z][a-z0-9_]*$\nattr-rgx=^_{0,2}[a-z][a-z0-9_]*$\nconst-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\ndocstring-min-length=10\nfunction-rgx=^(?:(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$\ngood-names=main,_\nmethod-rgx=^(?:(?P<exempt>__[a-z0-9_]+__|next|test[A-Z_][A-Za-z0-9_]*)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$\nno-docstring-rgx=(__.*__|main|test[A-Z_][A-Za-z0-9_]*|[A-Z][A-Za-z0-9]*Test)\nvariable-rgx=^[a-z][a-z0-9_]*$\n\n[FORMAT]\nindent-string='  '\nmax-line-length=80\n\n[MESSAGES CONTROL]\n# TODO: Remove cyclic-import once expr_visitor.py -> stmt.py is resolved.\ndisable=design,similarities,no-self-use,attribute-defined-outside-init,locally-disabled,star-args,pointless-except,bad-option-value,global-statement,fixme,suppressed-message,useless-suppression,locally-enabled,file-ignored,cyclic-import\n\n[REPORTS]\nmsg-template={path}:{line}: {msg} ({symbol})\nreports=no\n\n[TYPECHECK]\n# AST classes have dynamic members. Writer does not but for some reason pylint\n# barfs on some of its members.\nignored-classes=pythonparser.ast.Module,grumpy.compiler.util.Writer\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.287109375,
          "content": "language: go\nos:\n  - linux\n  - osx\nbefore_script:\n  - rvm get head || true # https://github.com/travis-ci/travis-ci/issues/6307 \n  - set -e\n# Run gofmt and lint serially to avoid confusing output. Run tests in parallel\n# for speed.\nscript: make gofmt lint && make -j2 test\nafter_script: set +e\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 1.1728515625,
          "content": "Contributors in the order of first contribution\n\n* [Dylan Trotter](https://github.com/trotterdylan)\n* [Aaron Tubbs](https://github.com/atubbs)\n* [Devin Jeanpierre](https://github.com/ssbr)\n* [Torin Rudeen](https://github.com/torinmr)\n* [Brian Atkinson](https://github.com/nairb774)\n* [Matt Harden](https://github.com/nerdatmath)\n* [Ryan Kennedy](https://github.com/ryankennedy)\n* [Brett Cannon](https://github.com/brettcannon)\n* [Alex Koren](https://github.com/AlexEKoren)\n* [Steven Maude](https://github.com/StevenMaude)\n* [feilengcui008](https://github.com/feilengcui008)\n* [Meador Inge](https://github.com/meadori)\n* [Kyoung-chan Lee](https://github.com/leekchan)\n* [Cholerae Hu](https://github.com/choleraehyq)\n* [Jurriaan Bremer](https://github.com/jbremer)\n* [Florian Ludwig](https://github.com/FlorianLudwig)\n* [ns-cweber](https://github.com/ns-cweber)\n* [Paul Smith](https://github.com/paulsmith)\n* [Izaak Weiss](https://github.com/lalaithion)\n* [YOU](https://github.com/S-YOU)\n* [iury](https://github.com/IuryAlves)\n* [wuttem](https://github.com/wuttem)\n* [cclauss](https://github.com/cclauss)\n* [Mirko Dziadzka](https://github.com/MirkoDziadzka)\n* [Dong-hee Na](https://github.com/corona10)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0048828125,
          "content": "Want to contribute? Great! First, read this page.\n\n### Before you contribute\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement]\n(https://cla.developers.google.com/about/google-individual)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other thingsâ€”for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\nContributions made by corporations are covered by a different agreement than\nthe one above, the\n[Software Grant and Corporate Contributor License Agreement]\n(https://cla.developers.google.com/about/google-corporate).\n\n### Code reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose.\n\n### Code Style\nWe use Google style guides for all our code. Below are the guidelines for each\nlanguage we use.\n\n#### Go\nAll Go source code must be formatted using gofmt and be lint-clean according to\ngolint. This will be checked by Travis but can be checked manually from a local\nrepo via `make gofmt golint`.\n\nCode is expected to be gofmt- and lint clean before it is submitted for review.\nCode reviews can then focus on structural details and higher level style\nconsiderations. Many common mistakes are already documented in the\n[Go Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments)\ndoc so it's worth being familiar with these patterns.\n\n#### Python\nAll Python source code must be lint-clean according to pylint. This will be\nchecked by Travis but can be checked manually from a local repo via\n`make pylint`.\n\nOnce code is pylint-clean, it can be submitted for review. In addition to lint\ncleanliness, Python code must adhere to the\n[Google Python Style Guide](https://google.github.io/styleguide/pyguide.html)\nwhich has a number of additional conventions. Please be familiar with the style\nguide and ensure code satisfies its rules before submitting for review.\n\n##### Borrowed Standard Library Code\nStandard library code that is borrowed from other open source projects such as\nCPython and PyPy need not be lint clean or satisfy the style guide. The goal\nshould be to keep the copied sources as close to the originals as possible\nwhile still being functional. For more details about borrowing this kind of\ncode from other places see the\n[guidelines for integration](https://github.com/google/grumpy/wiki/Standard-libraries:-guidelines-for-integration).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1435546875,
          "content": "Copyright 2016 Google Inc. All Rights Reserved.\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2016 Google Inc. All Rights Reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 13.2451171875,
          "content": "# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# ------------------------------------------------------------------------------\n# General setup\n# ------------------------------------------------------------------------------\n\nGO_ENV := $(shell go env GOOS GOARCH)\nGOOS ?= $(word 1,$(GO_ENV))\nGOARCH ?= $(word 2,$(GO_ENV))\nROOT_DIR := $(realpath .)\nPKG_DIR := build/pkg/$(GOOS)_$(GOARCH)\n\n# Try python2 and then python if PYTHON has not been set\nifeq ($(PYTHON),)\n  ifneq ($(shell which python2),)\n    PYTHON = python2\n  else\n    PYTHON = python\n  endif\nendif\nPYTHON_BIN := $(shell which $(PYTHON))\nPYTHON_VER := $(word 2,$(shell $(PYTHON) -V 2>&1))\nGO_REQ_MAJ := 1\nGO_REQ_MIN := 9\nGO_MAJ_MIN := $(subst go,, $(word 3,$(shell go version 2>&1)) )\nGO_MAJ := $(word 1,$(subst ., ,$(GO_MAJ_MIN) ))\nGO_MIN := $(word 2,$(subst ., ,$(GO_MAJ_MIN) ))\n\nifeq ($(filter 2.7.%,$(PYTHON_VER)),)\n  $(error unsupported Python version $(PYTHON_VER), Grumpy only supports 2.7.x. To use a different python binary such as python2, run: 'make PYTHON=python2 ...')\nendif\n\nifneq ($(shell test $(GO_MAJ) -ge $(GO_REQ_MAJ) -a $(GO_MIN) -ge $(GO_REQ_MIN) && echo ok),ok)\n  $(error unsupported Go version $(GO_VER), Grumpy requires at least $(GO_REQ_MAJ).$(GO_REQ_MIN). Please update Go)\nendif\n\nPY_DIR := build/lib/python2.7/site-packages\nPY_INSTALL_DIR := $(shell $(PYTHON) -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\")\n\nexport GOPATH := $(ROOT_DIR)/build\nexport PYTHONPATH := $(ROOT_DIR)/$(PY_DIR)\nexport PATH := $(ROOT_DIR)/build/bin:$(PATH)\n\nGOPATH_PY_ROOT := $(GOPATH)/src/__python__\n\nPYTHONPARSER_SRCS := $(patsubst third_party/%,$(PY_DIR)/grumpy/%,$(wildcard third_party/pythonparser/*.py))\n\nCOMPILER_BIN := build/bin/grumpc\nCOMPILER_SRCS := $(addprefix $(PY_DIR)/grumpy/compiler/,$(notdir $(shell find compiler -name '*.py' -not -name '*_test.py'))) $(PY_DIR)/grumpy/__init__.py\nCOMPILER_TESTS := $(patsubst %.py,grumpy/%,$(filter-out compiler/expr_visitor_test.py compiler/stmt_test.py,$(wildcard compiler/*_test.py)))\nCOMPILER_TEST_SRCS := $(patsubst %,$(PY_DIR)/%.py,$(COMPILER_TESTS))\nCOMPILER_SHARDED_TEST_SRCS := $(patsubst %,$(PY_DIR)/grumpy/compiler/%,expr_visitor_test.py stmt_test.py)\nCOMPILER_PASS_FILES := $(patsubst %,$(PY_DIR)/%.pass,$(COMPILER_TESTS))\nCOMPILER_EXPR_VISITOR_PASS_FILES := $(patsubst %,$(PY_DIR)/grumpy/compiler/expr_visitor_test.%of32.pass,$(shell seq 32))\nCOMPILER_STMT_PASS_FILES := $(patsubst %,$(PY_DIR)/grumpy/compiler/stmt_test.%of16.pass,$(shell seq 16))\nCOMPILER_D_FILES := $(patsubst %,$(PY_DIR)/%.d,$(COMPILER_TESTS))\nCOMPILER := $(COMPILER_BIN) $(COMPILER_SRCS) $(PYTHONPARSER_SRCS)\n\nPKGC_BIN := build/bin/pkgc\n\nRUNNER_BIN := build/bin/grumprun\nRUNTIME_SRCS := $(addprefix build/src/grumpy/,$(notdir $(wildcard runtime/*.go)))\nRUNTIME := $(PKG_DIR)/grumpy.a\nRUNTIME_PASS_FILE := build/runtime.pass\nRUNTIME_COVER_FILE := $(PKG_DIR)/grumpy.cover\nRUNNER = $(RUNNER_BIN) $(COMPILER) $(RUNTIME) $(STDLIB)\n\nLIB_SRCS := $(patsubst lib/%,$(GOPATH_PY_ROOT)/%,$(shell find lib -name '*.py'))\nTHIRD_PARTY_STDLIB_SRCS := $(patsubst third_party/stdlib/%,$(GOPATH_PY_ROOT)/%,$(shell find third_party/stdlib -name '*.py'))\nTHIRD_PARTY_PYPY_SRCS := $(patsubst third_party/pypy/%,$(GOPATH_PY_ROOT)/%,$(shell find third_party/pypy -name '*.py'))\nTHIRD_PARTY_OUROBOROS_SRCS := $(patsubst third_party/ouroboros/%,$(GOPATH_PY_ROOT)/%,$(shell find third_party/ouroboros -name '*.py'))\nSTDLIB_SRCS := $(LIB_SRCS) $(THIRD_PARTY_STDLIB_SRCS) $(THIRD_PARTY_PYPY_SRCS) $(THIRD_PARTY_OUROBOROS_SRCS)\n\nSTDLIB_PACKAGES := $(patsubst $(GOPATH_PY_ROOT)/%.py,%,$(patsubst $(GOPATH_PY_ROOT)/%/__init__.py,%,$(STDLIB_SRCS)))\nSTDLIB := $(patsubst %,$(PKG_DIR)/__python__/%.a,$(STDLIB_PACKAGES))\nSTDLIB_TESTS := \\\n  itertools_test \\\n  math_test \\\n  os/path_test \\\n  os_test \\\n  random_test \\\n  re_tests \\\n  sys_test \\\n  tempfile_test \\\n  test/test_bisect \\\n  test/test_colorsys \\\n  test/test_datetime \\\n  test/test_dict \\\n  test/test_dircache \\\n  test/test_dummy_thread \\\n  test/test_fpformat \\\n  test/test_genericpath \\\n  test/test_list \\\n  test/test_md5 \\\n  test/test_mimetools \\\n  test/test_mutex \\\n  test/test_operator \\\n  test/test_quopri \\\n  test/test_queue \\\n  test/test_rfc822 \\\n  test/test_sched \\\n  test/test_select \\\n  test/test_slice \\\n  test/test_stat \\\n  test/test_string \\\n  test/test_threading \\\n  test/test_tuple \\\n  test/test_uu \\\n  time_test \\\n  types_test \\\n  weetest_test\nSTDLIB_PASS_FILES := $(patsubst %,build/testing/%.pass,$(notdir $(STDLIB_TESTS)))\n\nACCEPT_TESTS := $(patsubst %.py,%,$(wildcard testing/*.py))\nACCEPT_PASS_FILES := $(patsubst %,build/%.pass,$(ACCEPT_TESTS))\nACCEPT_PY_PASS_FILES := $(patsubst %,build/%_py.pass,$(filter-out %/native_test,$(ACCEPT_TESTS)))\n\nBENCHMARKS := $(patsubst %.py,%,$(wildcard benchmarks/*.py))\nBENCHMARK_BINS := $(patsubst %,build/%_benchmark,$(BENCHMARKS))\n\nTOOL_BINS = $(patsubst %,build/bin/%,benchcmp coverparse diffrange genmake pydeps)\n\nGOLINT_BIN = build/bin/golint\nPYLINT_BIN = build/bin/pylint\n\nall: $(COMPILER) $(RUNNER) $(RUNTIME) $(TOOL_BINS)\n\nbenchmarks: $(BENCHMARK_BINS)\n\nclean:\n\t@rm -rf build\n\n# Convenient wrapper around grumprun that avoids having to set up PATH, etc.\nrun: $(RUNNER)\n\t@$(RUNNER_BIN)\n\ntest: $(ACCEPT_PASS_FILES) $(ACCEPT_PY_PASS_FILES) $(COMPILER_PASS_FILES) $(COMPILER_EXPR_VISITOR_PASS_FILES) $(COMPILER_STMT_PASS_FILES) $(RUNTIME_PASS_FILE) $(STDLIB_PASS_FILES)\n\nprecommit: cover gofmt lint test\n\n.PHONY: all benchmarks clean cover gofmt golint install lint precommit pylint run test\n\n# ------------------------------------------------------------------------------\n# grumpc compiler\n# ------------------------------------------------------------------------------\n\n$(COMPILER_BIN) $(RUNNER_BIN) $(TOOL_BINS): build/bin/%: tools/%\n\t@mkdir -p build/bin\n\t@cp -f $< $@\n\t@sed -i.bak -e '1s@/usr/bin/env python@$(PYTHON_BIN)@' $@\n\t@rm -f $@.bak\n\n$(COMPILER_SRCS) $(COMPILER_TEST_SRCS) $(COMPILER_SHARDED_TEST_SRCS): $(PY_DIR)/grumpy/%.py: %.py\n\t@mkdir -p $(PY_DIR)/grumpy/compiler\n\t@cp -f $< $@\n\n$(COMPILER_PASS_FILES): %.pass: %.py $(COMPILER) $(COMPILER_TEST_SRCS)\n\t@$(PYTHON) $< -q\n\t@touch $@\n\t@echo compiler/`basename $*` PASS\n\n# NOTE: In the regex below we use (\\.|$) instead of \\> because the latter is\n# not available in the awk available on OS X.\n$(COMPILER_D_FILES): $(PY_DIR)/%.d: $(PY_DIR)/%.py $(COMPILER_SRCS) $(PYTHONPARSER_SRCS)\n\t@$(PYTHON) -m modulefinder $< | awk '{if (match($$2, /^grumpy(\\.|$$)/)) { print \"$(PY_DIR)/$*.pass: \" substr($$3, length(\"$(ROOT_DIR)/\") + 1) }}' > $@\n\n-include $(COMPILER_D_FILES)\n\n# Does not depend on stdlibs since it makes minimal use of them.\n$(COMPILER_EXPR_VISITOR_PASS_FILES): $(PY_DIR)/grumpy/compiler/expr_visitor_test.%.pass: $(PY_DIR)/grumpy/compiler/expr_visitor_test.py $(RUNNER_BIN) $(COMPILER) $(RUNTIME) $(PKG_DIR)/__python__/traceback.a\n\t@$(PYTHON) $< --shard=$*\n\t@touch $@\n\t@echo 'compiler/expr_visitor_test $* PASS'\n\nCOMPILER_STMT_PASS_FILE_DEPS := \\\n  $(PKG_DIR)/__python__/__go__/grumpy.a \\\n  $(PKG_DIR)/__python__/__go__/os.a \\\n  $(PKG_DIR)/__python__/__go__/runtime.a \\\n  $(PKG_DIR)/__python__/__go__/time.a \\\n  $(PKG_DIR)/__python__/__go__/unicode.a \\\n  $(PKG_DIR)/__python__/sys.a \\\n  $(PKG_DIR)/__python__/traceback.a\n\n# Does not depend on stdlibs since it makes minimal use of them.\n$(COMPILER_STMT_PASS_FILES): $(PY_DIR)/grumpy/compiler/stmt_test.%.pass: $(PY_DIR)/grumpy/compiler/stmt_test.py $(RUNNER_BIN) $(COMPILER) $(RUNTIME) $(COMPILER_STMT_PASS_FILE_DEPS)\n\t@$(PYTHON) $< --shard=$*\n\t@touch $@\n\t@echo 'compiler/stmt_test $* PASS'\n\n$(PKGC_BIN): tools/pkgc.go\n\t@mkdir -p $(@D)\n\t@go build -o $@ $<\n\n# ------------------------------------------------------------------------------\n# Grumpy runtime\n# ------------------------------------------------------------------------------\n\n$(RUNTIME_SRCS): build/src/grumpy/%.go: runtime/%.go\n\t@mkdir -p build/src/grumpy\n\t@cp -f $< $@\n\n$(RUNTIME): $(filter-out %_test.go,$(RUNTIME_SRCS))\n\t@mkdir -p $(PKG_DIR)\n\t@go tool compile -o $@ -p grumpy -complete -I $(PKG_DIR) -pack $^\n\n$(RUNTIME_PASS_FILE): $(RUNTIME) $(filter %_test.go,$(RUNTIME_SRCS))\n\t@go test grumpy\n\t@touch $@\n\t@echo 'runtime/grumpy PASS'\n\n$(RUNTIME_COVER_FILE): $(RUNTIME) $(filter %_test.go,$(RUNTIME_SRCS))\n\t@go test -coverprofile=$@ grumpy\n\ncover: $(RUNTIME_COVER_FILE) $(TOOL_BINS)\n\t@bash -c 'comm -12 <(coverparse $< | sed \"s/^grumpy/runtime/\" | sort) <(git diff --dst-prefix= $(DIFF_COMMIT) | diffrange | sort)' | sort -t':' -k1,1 -k2n,2 | sed 's/$$/: missing coverage/' | tee errors.err\n\t@test ! -s errors.err\n\nbuild/gofmt.diff: $(wildcard runtime/*.go)\n\t@gofmt -d $^ > $@\n\ngofmt: build/gofmt.diff\n\t@if [ -s $< ]; then echo 'gofmt found errors, run: gofmt -w $(ROOT_DIR)/runtime/*.go'; false; fi\n\n$(GOLINT_BIN):\n\t@go get -u github.com/golang/lint/golint\n\ngolint: $(GOLINT_BIN)\n\t@$(GOLINT_BIN) -set_exit_status runtime\n\n# Don't use system pip for this since behavior varies a lot between versions.\n# Instead build pylint from source. Dependencies will be fetched by distutils.\n$(PYLINT_BIN):\n\t@mkdir -p build/third_party\n\t@cd build/third_party && curl -sL https://pypi.io/packages/source/p/pylint/pylint-1.6.4.tar.gz | tar -zx\n\t@cd build/third_party/pylint-1.6.4 && $(PYTHON) setup.py install --prefix $(ROOT_DIR)/build\n\npylint: $(PYLINT_BIN) $(COMPILER_SRCS) $(PYTHONPARSER_SRCS) $(COMPILER_BIN) $(RUNNER_BIN) $(TOOL_BINS)\n\t@$(PYTHON) $(PYLINT_BIN) $(COMPILER_SRCS) $(COMPILER_BIN) $(RUNNER_BIN) $(TOOL_BINS)\n\nlint: golint pylint\n\n# ------------------------------------------------------------------------------\n# Native modules\n# ------------------------------------------------------------------------------\n\n$(PKG_DIR)/__python__/__go__/%.a: build/src/__python__/__go__/%/module.go $(RUNTIME)\n\t@mkdir -p $(@D)\n\t@go install __python__/__go__/$*\n\nbuild/src/__python__/__go__/%/module.go: $(PKGC_BIN) $(RUNTIME)\n\t@mkdir -p $(@D)\n\t@$(PKGC_BIN) $* > $@\n\n$(PKG_DIR)/__python__/__go__/grumpy.a: $(RUNTIME)\n\n.PRECIOUS: build/src/__python__/__go__/%/module.go $(PKG_DIR)/__python__/__go__/%.a\n\n# ------------------------------------------------------------------------------\n# Standard library\n# ------------------------------------------------------------------------------\n\n$(LIB_SRCS): $(GOPATH_PY_ROOT)/%: lib/%\n\t@mkdir -p $(@D)\n\t@cp -f $< $@\n\n$(THIRD_PARTY_STDLIB_SRCS): $(GOPATH_PY_ROOT)/%: third_party/stdlib/%\n\t@mkdir -p $(@D)\n\t@cp -f $< $@\n\n$(THIRD_PARTY_PYPY_SRCS): $(GOPATH_PY_ROOT)/%: third_party/pypy/%\n\t@mkdir -p $(@D)\n\t@cp -f $< $@\n\n\n$(THIRD_PARTY_OUROBOROS_SRCS): $(GOPATH_PY_ROOT)/%: third_party/ouroboros/%\n\t@mkdir -p $(@D)\n\t@cp -f $< $@\n\nbuild/stdlib.mk: build/bin/genmake | $(STDLIB_SRCS)\n\t@genmake build > $@\n\n-include build/stdlib.mk\n\n$(patsubst %,build/src/__python__/%/module.go,$(STDLIB_PACKAGES)): $(COMPILER)\n$(patsubst %,build/src/__python__/%/module.d,$(STDLIB_PACKAGES)): build/bin/pydeps $(PYTHONPARSER_SRCS) $(COMPILER)\n$(patsubst %,$(PKG_DIR)/__python__/%.a,$(STDLIB_PACKAGES)): $(RUNTIME)\n\ndefine GRUMPY_STDLIB_TEST\nbuild/testing/$(notdir $(1)).pass: $(RUNTIME) $(PKG_DIR)/__python__/$(1).a $(RUNNER_BIN) $(PKG_DIR)/__python__/traceback.a\n\t@mkdir -p $$(@D)\n\t@$(RUNNER_BIN) -m $(subst /,.,$(1))\n\t@touch $$@\n\t@echo 'lib/$(1) PASS'\n\nendef\n\n$(eval $(foreach x,$(STDLIB_TESTS),$(call GRUMPY_STDLIB_TEST,$(x))))\n\n# ------------------------------------------------------------------------------\n# Acceptance tests & benchmarks\n# ------------------------------------------------------------------------------\n\n$(PY_DIR)/weetest.py: lib/weetest.py\n\t@cp -f $< $@\n\n$(PYTHONPARSER_SRCS): $(PY_DIR)/grumpy/%: third_party/%\n\t@mkdir -p $(@D)\n\t@cp -f $< $@\n\n$(ACCEPT_PASS_FILES): build/%_test.pass: %_test.py $(RUNTIME) $(STDLIB) $(RUNNER_BIN)\n\t@mkdir -p $(@D)\n\t@$(RUNNER_BIN) < $<\n\t@touch $@\n\t@echo '$*_test PASS'\n\nNATIVE_TEST_DEPS := \\\n  $(PKG_DIR)/__python__/__go__/encoding/csv.a \\\n  $(PKG_DIR)/__python__/__go__/image.a \\\n  $(PKG_DIR)/__python__/__go__/math.a \\\n  $(PKG_DIR)/__python__/__go__/strings.a\n\nbuild/testing/native_test.pass: $(NATIVE_TEST_DEPS)\n\n$(ACCEPT_PY_PASS_FILES): build/%_py.pass: %.py $(PY_DIR)/weetest.py\n\t@mkdir -p $(@D)\n\t@$(PYTHON) $<\n\t@touch $@\n\t@echo '$*_py PASS'\n\n$(patsubst %,build/%.go,$(BENCHMARKS)): build/%.go: %.py $(COMPILER)\n\t@mkdir -p $(@D)\n\t@$(COMPILER_BIN) $< > $@\n\n$(BENCHMARK_BINS): build/benchmarks/%_benchmark: build/benchmarks/%.go $(RUNTIME) $(STDLIB)\n\t@mkdir -p $(@D)\n\t@go build -o $@ $<\n\n# ------------------------------------------------------------------------------\n# Installation\n# ------------------------------------------------------------------------------\n\ninstall: $(RUNNER_BIN) $(COMPILER) $(RUNTIME) $(STDLIB)\n\t# Binary executables\n\tinstall -d \"$(DESTDIR)/usr/bin\"\n\tinstall -m755 build/bin/grumpc \"$(DESTDIR)/usr/bin/grumpc\"\n\tinstall -m755 build/bin/grumprun \"$(DESTDIR)/usr/bin/grumprun\"\n\t# Python module\n\tinstall -d \"$(DESTDIR)\"{/usr/lib/go,\"$(PY_INSTALL_DIR)\"}\n\tcp -rv \"$(PY_DIR)/grumpy\" \"$(DESTDIR)$(PY_INSTALL_DIR)\"\n\t# Go package and sources\n\tinstall -d \"$(DESTDIR)/usr/lib/go/\"\n\tcp -rv build/pkg build/src \"$(DESTDIR)/usr/lib/go/\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.55859375,
          "content": "# Grumpy: Go running Python\n\n[![Build Status](https://travis-ci.org/google/grumpy.svg?branch=master)](https://travis-ci.org/google/grumpy)\n[![Join the chat at https://gitter.im/grumpy-devel/Lobby](https://badges.gitter.im/grumpy-devel/Lobby.svg)](https://gitter.im/grumpy-devel/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Overview\n\nGrumpy is a Python to Go source code transcompiler and runtime that is intended\nto be a near drop-in replacement for CPython 2.7. The key difference is that it\ncompiles Python source code to Go source code which is then compiled to native\ncode, rather than to bytecode. This means that Grumpy has no VM. The compiled Go\nsource code is a series of calls to the Grumpy runtime, a Go library serving a\nsimilar purpose to the Python C API (although the API is incompatible with\nCPython's).\n\n## Limitations\n\n### Things that will probably never be supported by Grumpy\n\n1. `exec`, `eval` and `compile`: These dynamic features of CPython are not\n   supported by Grumpy because Grumpy modules consist of statically-compiled Go\n   code. Supporting dynamic execution would require bundling Grumpy programs\n   with the compilation toolchain, which would be unwieldy and impractically\n   slow.\n\n2. C extension modules: Grumpy has a different API and object layout than\n   CPython and so supporting C extensions would be difficult. In principle it's\n   possible to support them via an API bridge layer like the one that\n   [JyNI](http://jyni.org) provides for Jython, but it would be hard to maintain and\n   would add significant overhead when calling into and out of extension\n   modules.\n\n### Things that Grumpy will support but doesn't yet\n\nThere are three basic categories of incomplete functionality:\n\n1. [Language features](https://github.com/google/grumpy/wiki/Missing-features#language-features):\n   Most language features are implemented with the notable exception of\n   [old-style classes](http://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python).\n   There are also a handful of operators that aren't yet supported.\n\n2. [Builtin functions and types](https://github.com/google/grumpy/wiki/Missing-features#builtins):\n   There are a number of missing functions and types in `__builtins__` that have\n   not yet been implemented. There are also a lot of methods on builtin types\n   that are missing.\n\n3. [Standard library](https://github.com/google/grumpy/wiki/Missing-features#standard-libraries):\n   The Python standard library is very large and much of it is pure Python, so\n   as the language features and builtins get filled out, many modules will\n   just work. But there are also a number of libraries in CPython that are C\n   extension modules which will need to be rewritten.\n\n4. C locale support: Go doesn't support locales in the same way that C does. As such,\n   some functionality that is locale-dependent may not currently work the same as in\n   CPython.\n\n## Running Grumpy Programs\n\n### Method 1: make run:\n\nThe simplest way to execute a Grumpy program is to use `make run`, which wraps a\nshell script called grumprun that takes Python code on stdin and builds and runs\nthe code under Grumpy. All of the commands below are assumed to be run from the\nroot directory of the Grumpy source code distribution:\n\n```\necho \"print 'hello, world'\" | make run\n```\n\n### Method 2: grumpc and grumprun:\n\nFor more complicated programs, you'll want to compile your Python source code to\nGo using grumpc (the Grumpy compiler) and then build the Go code using `go\nbuild`. Since Grumpy programs are statically linked, all the modules in a\nprogram must be findable by the Grumpy toolchain on the GOPATH. Grumpy looks for\nGo packages corresponding to Python modules in the \\_\\_python\\_\\_ subdirectory\nof the GOPATH. By convention, this subdirectory is also used for staging Python\nsource code, making it similar to the PYTHONPATH.\n\nThe first step is to set up the shell so that the Grumpy toolchain and libraries\ncan be found. From the root directory of the Grumpy source distribution run:\n\n```\nmake\nexport PATH=$PWD/build/bin:$PATH\nexport GOPATH=$PWD/build\nexport PYTHONPATH=$PWD/build/lib/python2.7/site-packages\n```\n\nYou will know things are working if you see the expected output from this\ncommand:\n\n```\necho 'import sys; print sys.version' | grumprun\n```\n\nNext, we will write our simple Python module into the \\_\\_python\\_\\_ directory:\n\n```\necho 'def hello(): print \"hello, world\"' > $GOPATH/src/__python__/hello.py\n```\n\nTo build a Go package from our Python script, run the following:\n\n```\nmkdir -p $GOPATH/src/__python__/hello\ngrumpc -modname=hello $GOPATH/src/__python__/hello.py > \\\n    $GOPATH/src/__python__/hello/module.go\n```\n\nYou should now be able to build a Go program that imports the package\n\"\\_\\_python\\_\\_/hello\". We can also import this module into Python programs\nthat are built using grumprun:\n\n```\necho 'from hello import hello; hello()' | grumprun\n```\n\ngrumprun is doing a few things under the hood here:\n\n1. Compiles the given Python code to a dummy Go package, the same way we\n   produced \\_\\_python\\_\\_/hello/module.go above\n2. Produces a main Go package that imports the Go package from step 1. and\n   executes it as our \\_\\_main\\_\\_ Python package\n3. Executes `go run` on the main package generated in step 2.\n\n## Developing Grumpy\n\nThere are three main components and depending on what kind of feature you're\nwriting, you may need to change one or more of these.\n\n### grumpc\n\nGrumpy converts Python programs into Go programs and `grumpc` is the tool\nresponsible for parsing Python code and generating Go code from it. `grumpc` is\nwritten in Python and uses the [`pythonparser`](https://github.com/m-labs/pythonparser)\nmodule to accomplish parsing.\n\nThe grumpc script itself lives at `tools/grumpc`. It is supported by a number of\nPython modules in the `compiler` subdir.\n\n### Grumpy Runtime\n\nThe Go code generated by `grumpc` performs operations on data structures that\nrepresent Python objects in running Grumpy programs. These data structures and\noperations are defined in the `grumpy` Go library (source is in the runtime\nsubdir of the source distribution).  This runtime is analogous to the Python C\nAPI and many of the structures and operations defined by `grumpy` have\ncounterparts in CPython.\n\n### Grumpy Standard Library\n\nMuch of the Python standard library is written in Python and thus \"just works\"\nin Grumpy. These parts of the standard library are copied from CPython 2.7\n(possibly with light modifications). For licensing reasons, these files are kept\nin the `third_party` subdir.\n\nThe parts of the standard library that cannot be written in pure Python, e.g.\nfile and directory operations, are kept in the `lib` subdir. In CPython these\nkinds of modules are written as C extensions. In Grumpy they are written in\nPython but they use native Go extensions to access facilities not otherwise\navailable in Python.\n\n### Source Code Overview\n\n- `compiler`: Python package implementating Python -> Go transcompilation logic.\n- `lib`: Grumpy-specific Python standard library implementation.\n- `runtime`: Go source code for the Grumpy runtime library.\n- `third_party/ouroboros`: Pure Python standard libraries copied from the\n   [Ouroboros project](https://github.com/pybee/ouroboros).\n- `third_party/pypy`: Pure Python standard libraries copied from PyPy.\n- `third_party/stdlib`: Pure Python standard libraries copied from CPython.\n- `tools`: Transcompilation and utility binaries.\n\n## Contact\n\nQuestions? Comments? Drop us a line at [grumpy-users@googlegroups.com](https://groups.google.com/forum/#!forum/grumpy-users)\nor join our [Gitter channel](https://gitter.im/grumpy-devel/Lobby)\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 0.58203125,
          "content": "# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}