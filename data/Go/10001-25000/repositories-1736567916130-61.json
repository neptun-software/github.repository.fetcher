{
  "metadata": {
    "timestamp": 1736567916130,
    "page": 61,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dolthub/dolt",
      "stars": 18144,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2666015625,
          "content": "**/.idea/\n**/.dolt/\n.vscode\n.run\nvenv\n\n.DS_Store\n.sqlhistory\n.doltcfg\ntest.sh\n*eventsapi@*\n\n# ignore cp'd sysbench runner testing files\nSysbenchDockerfile\nSysbenchDockerfile.dockerignore\nsysbench-runner-tests-entrypoint.sh\nconfig.json\nintegration-tests/bats/batsee_results\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.93359375,
          "content": "[submodule \"proto/third_party/protobuf\"]\n\tpath = proto/third_party/protobuf\n\turl = https://github.com/protocolbuffers/protobuf.git\n\tignore = dirty\n[submodule \"proto/third_party/googleapis\"]\n\tpath = proto/third_party/googleapis\n\turl = https://github.com/googleapis/googleapis.git\n\tignore = dirty\n[submodule \"proto/third_party/protobuf-go\"]\n\tpath = proto/third_party/protobuf-go\n\turl = https://github.com/protocolbuffers/protobuf-go.git\n\tignore = dirty\n[submodule \"proto/third_party/grpc-go\"]\n\tpath = proto/third_party/grpc-go\n\turl = https://github.com/grpc/grpc-go.git\n\tignore = dirty\n[submodule \"integration-tests/mysql-client-tests/cpp/third_party/mysql-connector-cpp\"]\n\tpath = integration-tests/mysql-client-tests/cpp/third_party/mysql-connector-cpp\n\turl = https://github.com/mysql/mysql-connector-cpp.git\n\tignore = dirty\n[submodule \"proto/third_party/flatbuffers\"]\n\tpath = proto/third_party/flatbuffers\n\turl = https://github.com/dolthub/flatbuffers.git\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.5478515625,
          "content": "# Lines starting with '#' are comments.\n\n# Each line is a file pattern followed by one or more owners.\n\n# These owners will be the default owners for everything in the repo.\n\n# * @defunkt\n\n# Order is important. The last matching pattern has the most precedence.\n\n# So if a pull request only touches javascript files, only these owners\n\n# will be requested to review.\n\n# *.js @octocat @github/js\n\n# You can also use email addresses if you prefer.\n\n# docs/* docs@example.com\n\n# Begin dolt repository owners\n\nintegration-tests/mysql-client-tests/node/* @tbantle22\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 39.173828125,
          "content": "<img height=\"100\" src=\"./images/Dolt-Logo@3x.svg\"/>\n\n# Dolt is Git for Data!\n\nDolt is a SQL database that you can fork, clone, branch, merge, push\nand pull just like a Git repository. \n\nConnect to Dolt just like any MySQL database to read or modify schema \nand data. Version control functionality is exposed in SQL via system \ntables, functions, and procedures. \n\nOr, use the Git-like command line interface to import CSV files, commit \nyour changes, push them to a remote, or merge your teammate's changes.\nAll the commands you know for Git work exactly the same for Dolt. \n\nGit versions files. Dolt versions tables. It's like Git and MySQL had a\nbaby.\n\nWe also built [DoltHub](https://www.dolthub.com), a place to share\nDolt databases. We host public data for free. If you want to host\nyour own version of DoltHub, we have [DoltLab](https://www.doltlab.com). \nIf you want us to run a Dolt server for you, we have [Hosted Dolt](https://hosted.doltdb.com). \nIf you are looking for a Postgres version of Dolt, we built \n[DoltgreSQL](https://github.com/dolthub/doltgresql). Warning, it's \nearly Alpha. Dolt is production-ready.\n\n[Join us on Discord](https://discord.com/invite/RFwfYpu) to say hi and\nask questions, or [check out our roadmap](https://docs.dolthub.com/other/roadmap) \nto see what we're building next.\n\n# Video Introduction\n\n[![Dolt Explainer Video](https://img.youtube.com/vi/H2iZy0Cme10/maxresdefault.jpg)](https://www.youtube.com/watch?v=H2iZy0Cme10)\n\n# What's it for?\n\nLots of things! Dolt is a generally useful tool with countless\napplications. But if you want some ideas, [here's how people are using\nit so far](https://dolthub.com/blog/2024-10-15-dolt-use-cases/).\n\nDolt can be [set up as a replica of your existing MySQL or MariaDB](https://www.dolthub.com/blog/2023-02-17-binlog-replication-preview/)\ndatabase using standard MySQL binlog replication. Every write becomes\na Dolt commit. This is a great way to get the version control benefits \nof Dolt and keep an existing MySQL or MariaDB database. \n\n# Dolt CLI\n\nThe `dolt` CLI has the same commands as `git`, with some extras.\n\n```\n$ dolt\nValid commands for dolt are\n                init - Create an empty Dolt data repository.\n              status - Show the working tree status.\n                 add - Add table changes to the list of staged table changes.\n                diff - Diff a table.\n               reset - Remove table changes from the list of staged table changes.\n               clean - Remove untracked tables from working set.\n              commit - Record changes to the repository.\n                 sql - Run a SQL query against tables in repository.\n          sql-server - Start a MySQL-compatible server.\n                 log - Show commit logs.\n              branch - Create, list, edit, delete branches.\n            checkout - Checkout a branch or overwrite a table from HEAD.\n               merge - Merge a branch.\n           conflicts - Commands for viewing and resolving merge conflicts.\n         cherry-pick - Apply the changes introduced by an existing commit.\n              revert - Undo the changes introduced in a commit.\n               clone - Clone from a remote data repository.\n               fetch - Update the database from a remote data repository.\n                pull - Fetch from a dolt remote data repository and merge.\n                push - Push to a dolt remote.\n              config - Dolt configuration.\n              remote - Manage set of tracked repositories.\n              backup - Manage a set of server backups.\n               login - Login to a dolt remote host.\n               creds - Commands for managing credentials.\n                  ls - List tables in the working set.\n              schema - Commands for showing and importing table schemas.\n               table - Commands for copying, renaming, deleting, and exporting tables.\n                 tag - Create, list, delete tags.\n               blame - Show what revision and author last modified each row of a table.\n         constraints - Commands for handling constraints.\n             migrate - Executes a database migration to use the latest Dolt data format.\n         read-tables - Fetch table(s) at a specific commit into a new dolt repo\n                  gc - Cleans up unreferenced data from the repository.\n       filter-branch - Edits the commit history using the provided query.\n          merge-base - Find the common ancestor of two commits.\n             version - Displays the current Dolt cli version.\n                dump - Export all tables in the working set into a file.\n```\n\n# Installation\n\nDolt is a single ~103 megabyte program. \n\n```bash\ndolt $ du -h /Users/timsehn/go/bin/dolt\n103M\t/Users/timsehn/go/bin/dolt\n```\n\nIt's really easy to install. Download it and put it on your `PATH`. \nWe have a bunch of ways to make this even easier for most platforms.\n\n## From Latest Release\n\nTo install on Linux or Mac based systems run this command in your\nterminal:\n\n```\nsudo bash -c 'curl -L https://github.com/dolthub/dolt/releases/latest/download/install.sh | bash'\n```\n\nThis will download the latest `dolt` release and put it in\n`/usr/local/bin/`, which is probably on your `$PATH`.\n\nThe install script needs sudo in order to put `dolt` in `/usr/local/bin`. If you don't have root\nprivileges or aren't comfortable running a script with them, you can download the dolt binary\nfor your platform from [the latest release](https://github.com/dolthub/dolt/releases), unzip it,\nand put the binary somewhere on your `$PATH`.\n\n### Linux\n\n#### Arch Linux\n\nDolt is packaged in the official repositories for Arch Linux.\n\n```\npacman -S dolt\n```\n\n### Mac\n\n#### Homebrew\n\nDolt is on Homebrew, updated every release.\n\n```\nbrew install dolt\n```\n#### MacPorts\n\nOn macOS, Dolt can also be installed via a [community-managed port](https://ports.macports.org/port/dolt/) via [MacPorts](https://www.macports.org):\n\n```sh\nsudo port install dolt\n```\n\n### Windows\n\nDownload the latest Microsoft Installer (`.msi` file) in\n[releases](https://github.com/dolthub/dolt/releases) and run\nit.\n\nFor information on running on Windows, see [here](https://docs.dolthub.com/introduction/installation/windows).\n\n#### Chocolatey\n\nYou can install `dolt` using [Chocolatey](https://chocolatey.org/):\n\n```sh\nchoco install dolt\n```\n\n#### Docker\n\nThere are following official Docker images for Dolt:\n\n* [`dolthub/dolt`](https://hub.docker.com/r/dolthub/dolt) for running Dolt\nas CLI tool.\n* [`dolthub/dolt-sql-server`](https://hub.docker.com/r/dolthub/dolt-sql-server) for running Dolt in server mode.\n\n## From Source\n\nMake sure you have Go installed, and that `go` is in your path. Dolt has a dependency on [cgo](https://pkg.go.dev/cmd/cgo), so you will need a working C compiler and toolchain as well.\n\nClone this repository and cd into the `go` directory. Then run:\n\n```\ngo install ./cmd/dolt\n```\n\nThe output will be in `$GOPATH/bin`, which defaults to `~/go/bin`. To test your build, try:\n\n```\n~/go/bin/dolt version\n```\n\n# Configuration\n\nVerify that your installation has succeeded by running `dolt` in your\nterminal.\n\n```\n$ dolt\nValid commands for dolt are\n[...]\n```\n\nConfigure `dolt` with your user name and email, which you'll need to\ncreate commits. The commands work exactly the same as git.\n\n```\n$ dolt config --global --add user.email YOU@DOMAIN.COM\n$ dolt config --global --add user.name \"YOUR NAME\"\n```\n\n# Getting started\n\n## Navigate to the directory where you would like your data stored\n\nDolt needs a place to store your databases. I'm going to put my databases in `~/dolt`. \n\n```bash\n% cd ~\n% mkdir dolt\n% cd dolt\n```\n\nAny databases you create will be stored in this directory. So, for this example, a directory named `getting_started` will be created here once you run `create database getting_started`. Navigating to `~/dolt/getting_started` will allow you to access this database using the Dolt command line.\n\nNOTE: For this example, the `getting_started` directory will be created after you run `create database getting_started;` in a SQL shell in the [Create a schema section](#create-a-schema). Don't do anything except make the directory and navigate to it just yet.\n\n## Start a MySQL-compatible database server\n\nDolt ships with a MySQL compatible database server built in. To start it you use the command `dolt sql-server`. Running this command starts the server on port 3306. \n\n```bash\ndolt sql-server\nStarting server with Config HP=\"localhost:3306\"|T=\"28800000\"|R=\"false\"|L=\"info\"\n```\n\nYour terminal will just hang there. This means the server is running. Any errors will be printed in this terminal. Just leave it there and open a new terminal.\n\n## Connect with a MySQL client (up to version 8.4)\n\nIn the new terminal, we will now connect to the running database server using a client. Dolt also ships with a MySQL compatible client. \n\n```bash\n% dolt -u root -p \"\" sql\n# Welcome to the Dolt MySQL client.\n# Statements must be terminated with ';'.\n# \"exit\" or \"quit\" (or Ctrl-D) to exit.\nmysql>\n```\n\nIn the other terminal where you ran `dolt sql-server`, you'll see the following log line.\n\n```\n2022-06-06T13:14:32-07:00 INFO [conn 1] NewConnection {DisableClientMultiStatements=false}\n```\n\nYou are connected!\n\nWhile we're here let's grab a copy of MySQL so we can connect with that client. Head over to the [MySQL Getting Started](https://dev.mysql.com/doc/mysql-getting-started/en/) documentation and install MySQL on your machine. I used [Homebrew](https://brew.sh/) to install MySQL on my Mac: `brew install mysql@8.4`. Alternatively, you can install only the client component by running `brew install mysql-client@8.4`.\n\nNOTE: Make sure you install a MySQL 8.4 release. MySQL 8.4 is the current Long Term Support (LTS) release, meaning this is the stable and supported version of MySQL. MySQL 9.0 is also available, but is an \"innovation\" release, meaning it has more recent changes and features, but may not be as stable as the LTS release. The 9.0 release changes authentication support and isn't able to connect to a Dolt SQL server by default. You can install MySQL 8.4 with Homebrew by running `brew install mysql@8.4`. If you do want to use MySQL-9.0, read [our post on how to configure Dolt for `caching_sha2_password` authentication](https://www.dolthub.com/blog/2024-12-11-mysql9-and-caching-sha2-auth-support/). \n\nMySQL comes with a MySQL server called `mysqld` and a MySQL client called `mysql`. You're only interested in the client. After following the instructions from MySQL's documentation, make sure you have a copy of the `mysql` client on your path:\n\n```bash\n% mysql --version\nmysql  Ver 8.0.29 for macos12.2 on x86_64 (Homebrew)\n```\n\nNow, to connect the `mysql` client to Dolt, you are going to force the MySQL client through the TCP interface by passing in a host and port. The default is the socket interface which Dolt supports, but is only available on `localhost`. So, it's better to show off the TCP interface. The MySQL client also requires you specify a user, in this case `root`.\n\n```bash\n% mysql --host 127.0.0.1 --port 3306 -uroot\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 2\nServer version: 5.7.9-Vitess \n\nCopyright (c) 2000, 2022, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n```\n\nAgain, to ensure the client actually connected, you should see the following in the `dolt sql-server` terminal \n\n```\n2022-06-06T13:26:55-07:00 INFO [conn 2] NewConnection {DisableClientMultiStatements=false}\n```\n\nAs you can see, Dolt supports any MySQL-compatible client. Dolt ships with a client but you can use any MySQL client, like the one that comes with MySQL.\n\n## Create a schema\n\nNow we're actually ready to do something interesting. I'll stay in the `mysql` client and execute the following SQL statements to create a database called `getting_started`. The `getting_started` database will have three tables: `employees`, `teams`, and `employees_teams`.\n\n```\nmysql> create database getting_started;\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> use getting_started;\nDatabase changed\nmysql> create table employees (\n    id int, \n    last_name varchar(255), \n    first_name varchar(255), \n    primary key(id));\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> create table teams (\n    id int, \n    team_name varchar(255), \n    primary key(id)); \nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> create table employees_teams(\n    team_id int, \n    employee_id int, \n    primary key(team_id, employee_id), \n    foreign key (team_id) references teams(id), \n    foreign key (employee_id) references employees(id));\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> show tables;\n+---------------------------+\n| Tables_in_getting_started |\n+---------------------------+\n| employees                 |\n| employees_teams           |\n| teams                     |\n+---------------------------+\n3 rows in set (0.00 sec)\n```\n\nDolt supports foreign keys, secondary indexes, triggers, check constraints, and stored procedures. It's a modern, feature-rich SQL database.\n\n## Make a Dolt commit\n\nIt's time to use your first Dolt feature. We're going to make a Dolt [commit](https://docs.dolthub.com/concepts/dolt/commits). A Dolt commit allows you to time travel and see lineage. Make a Dolt commit whenever you want to restore or compare to this point in time.\n\nDolt exposes version control functionality through a Git-style interface. On the command line, Dolt commands map exactly to their Git equivalent with the targets being tables instead of files. In SQL, Dolt exposes version control read operations as [system tables](https://docs.dolthub.com/sql-reference/version-control/dolt-system-tables) and version control write operations as [stored procedures](https://docs.dolthub.com/sql-reference/version-control/dolt-sql-procedures). \n\nThe naming of the system tables and stored procedures follows the `dolt_<command>` pattern. So `dolt add` on the CLI becomes `dolt_add` as a stored procedure. Passing options also follows the command line model. For instance, to specify tables to add, send the table names in as options to the `dolt_add` procedure. For named arguments like sending a message into the `dolt_commit` command use two arguments in sequence like `('-m', 'This is a message')`. If you know Git, the version control procedures and system tables should feel familiar.\n\nSo, we add and commit our new schema like so.\n\n```\nmysql> call dolt_add('teams', 'employees', 'employees_teams');\n+--------+\n| status |\n+--------+\n|      0 |\n+--------+\n1 row in set (0.03 sec)\n\nmysql> call dolt_commit('-m', 'Created initial schema');\n+----------------------------------+\n| hash                             |\n+----------------------------------+\n| ne182jemgrlm8jnjmoubfqsstlfi1s98 |\n+----------------------------------+\n1 row in set (0.02 sec)\n\nmysql> select * from dolt_log;\n+----------------------------------+-----------+-----------------+-------------------------+----------------------------+\n| commit_hash                      | committer | email           | date                    | message                    |\n+----------------------------------+-----------+-----------------+-------------------------+----------------------------+\n| ne182jemgrlm8jnjmoubfqsstlfi1s98 | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema     |\n| vluuhvd0bn59598utedt77ed9q5okbcb | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:33:59.531 | Initialize data repository |\n+----------------------------------+-----------+-----------------+-------------------------+----------------------------+\n2 rows in set (0.01 sec)\n```\n\nThere you have it. Your schema is created and you have a Dolt commit tracking the creation, as seen in the `dolt_log` system table.\n\nNote, a Dolt commit is different than a standard SQL transaction `COMMIT`. In this case, I am running the database with [`AUTOCOMMIT`](https://dev.mysql.com/doc/refman/5.6/en/innodb-autocommit-commit-rollback.html) on, so each SQL statement is automatically generating a transaction `COMMIT`. If you want system to generate a Dolt commit for every transaction use the system variable, [`@@dolt_transaction_commit`](https://docs.dolthub.com/sql-reference/version-control/dolt-sysvars#dolt_transaction_commit).\n\n## Insert some data\n\nNow, I'm going to populate the database with a few employees here at DoltHub. Then, I'll assign the employees to two teams: engineering and sales. The CEO wears many hats at a start up so he'll be assigned to multiple teams.\n\n```\nmysql> insert into employees values \n    (0, 'Sehn', 'Tim'), \n    (1, 'Hendriks', 'Brian'), \n    (2, 'Son','Aaron'), \n    (3, 'Fitzgerald', 'Brian');\nQuery OK, 4 rows affected (0.01 sec)\n\nmysql> select * from employees where first_name='Brian';\n+------+------------+------------+\n| id   | last_name  | first_name |\n+------+------------+------------+\n|    1 | Hendriks   | Brian      |\n|    3 | Fitzgerald | Brian      |\n+------+------------+------------+\n2 rows in set (0.00 sec)\n\nmysql> insert into teams values \n    (0, 'Engineering'), \n    (1, 'Sales');\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> insert into employees_teams values \n    (0,0), \n    (1,0), \n    (2,0), \n    (0,1), \n    (3,1);\nERROR 1452 (HY000): cannot add or update a child row - Foreign key violation on fk: `rv9ek7ft`, table: `employees_teams`, referenced table: `teams`, key: `[2]`\n```\n\nOops, I violated a constraint. It looks like I created the table with teams before employees. You should always specify your columns when you insert, not rely on natural ordering. Serves me right! Dolt comes with the full power of a modern SQL relational database to ensure data integrity.\n\n```\nmysql> insert into employees_teams(employee_id, team_id) values \n    (0,0), \n    (1,0), \n    (2,0), \n    (0,1), \n    (3,1);\nQuery OK, 5 rows affected (0.01 sec)\n\nmysql> select first_name, last_name, team_name from employees \n    join employees_teams on (employees.id=employees_teams.employee_id) \n    join teams on (teams.id=employees_teams.team_id) \n    where team_name='Engineering';\n+------------+-----------+-------------+\n| first_name | last_name | team_name   |\n+------------+-----------+-------------+\n| Tim        | Sehn      | Engineering |\n| Brian      | Hendriks  | Engineering |\n| Aaron      | Son       | Engineering |\n+------------+-----------+-------------+\n3 rows in set (0.00 sec)\n```\n\nLooks like everything is inserted and correct. I was able to list the members of the engineering team using that three table `JOIN`. Dolt supports up to twelve table `JOIN`s. Again, Dolt is a modern SQL relational database paired with Git-style version control.\n\n## Examine the diff\n\nNow, what if you want to see what changed in your working set before you make a commit? You use the `dolt_status` and `dolt_diff_<tablename>` system tables. \n\n```\nmysql> select * from dolt_status;\n+-----------------+--------+----------+\n| table_name      | staged | status   |\n+-----------------+--------+----------+\n| teams           |      0 | modified |\n| employees       |      0 | modified |\n| employees_teams |      0 | modified |\n+-----------------+--------+----------+\n3 rows in set (0.01 sec)\n\nmysql> select * from dolt_diff_employees;\n+--------------+---------------+-------+-----------+----------------+----------------+-----------------+---------+----------------------------------+-------------------------+-----------+\n| to_last_name | to_first_name | to_id | to_commit | to_commit_date | from_last_name | from_first_name | from_id | from_commit                      | from_commit_date        | diff_type |\n+--------------+---------------+-------+-----------+----------------+----------------+-----------------+---------+----------------------------------+-------------------------+-----------+\n| Sehn         | Tim           |     0 | WORKING   | NULL           | NULL           | NULL            |    NULL | ne182jemgrlm8jnjmoubfqsstlfi1s98 | 2022-06-07 16:35:49.277 | added     |\n| Hendriks     | Brian         |     1 | WORKING   | NULL           | NULL           | NULL            |    NULL | ne182jemgrlm8jnjmoubfqsstlfi1s98 | 2022-06-07 16:35:49.277 | added     |\n| Son          | Aaron         |     2 | WORKING   | NULL           | NULL           | NULL            |    NULL | ne182jemgrlm8jnjmoubfqsstlfi1s98 | 2022-06-07 16:35:49.277 | added     |\n| Fitzgerald   | Brian         |     3 | WORKING   | NULL           | NULL           | NULL            |    NULL | ne182jemgrlm8jnjmoubfqsstlfi1s98 | 2022-06-07 16:35:49.277 | added     |\n+--------------+---------------+-------+-----------+----------------+----------------+-----------------+---------+----------------------------------+-------------------------+-----------+\n4 rows in set (0.00 sec)\n```\n\nAs you can see from the diff I've added the correct values to the `employees` table. The values were previously `NULL` and now they are populated.\n\nLet's finish off with another Dolt commit this time adding all effected tables using `-am`.\n\n```\nmysql> call dolt_commit('-am', 'Populated tables with data');\n+----------------------------------+\n| hash                             |\n+----------------------------------+\n| 13qfqa5rojq18j84d1n2htjkm6fletg4 |\n+----------------------------------+\n1 row in set (0.02 sec)\n```\n\nYou can inspect the log using `dolt_log` and see which tables changed in each commit using an unscoped `dolt_diff`. Unscoped `dolt_diff` tells you whether schema, data, or both changed in that particular commit for the table.\n\n```\nmysql> select * from dolt_log;\n+----------------------------------+-----------+-----------------+-------------------------+----------------------------+\n| commit_hash                      | committer | email           | date                    | message                    |\n+----------------------------------+-----------+-----------------+-------------------------+----------------------------+\n| 13qfqa5rojq18j84d1n2htjkm6fletg4 | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:39:32.066 | Populated tables with data |\n| ne182jemgrlm8jnjmoubfqsstlfi1s98 | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema     |\n| vluuhvd0bn59598utedt77ed9q5okbcb | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:33:59.531 | Initialize data repository |\n+----------------------------------+-----------+-----------------+-------------------------+----------------------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from dolt_diff;\n+----------------------------------+-----------------+-----------+-----------------+-------------------------+----------------------------+-------------+---------------+\n| commit_hash                      | table_name      | committer | email           | date                    | message                    | data_change | schema_change |\n+----------------------------------+-----------------+-----------+-----------------+-------------------------+----------------------------+-------------+---------------+\n| 13qfqa5rojq18j84d1n2htjkm6fletg4 | teams           | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:39:32.066 | Populated tables with data |           1 |             0 |\n| 13qfqa5rojq18j84d1n2htjkm6fletg4 | employees       | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:39:32.066 | Populated tables with data |           1 |             0 |\n| 13qfqa5rojq18j84d1n2htjkm6fletg4 | employees_teams | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:39:32.066 | Populated tables with data |           1 |             0 |\n| ne182jemgrlm8jnjmoubfqsstlfi1s98 | employees       | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema     |           0 |             1 |\n| ne182jemgrlm8jnjmoubfqsstlfi1s98 | employees_teams | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema     |           0 |             1 |\n| ne182jemgrlm8jnjmoubfqsstlfi1s98 | teams           | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema     |           0 |             1 |\n+----------------------------------+-----------------+-----------+-----------------+-------------------------+----------------------------+-------------+---------------+\n6 rows in set (0.00 sec)\n```\n\n## Oh no! I made a mistake.\n\nDolt supports undoing changes via `call dolt_reset()`. Let's imagine I accidentally drop a table.\n\n```\nmysql> drop table employees_teams;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> show tables;\n+---------------------------+\n| Tables_in_getting_started |\n+---------------------------+\n| employees                 |\n| teams                     |\n+---------------------------+\n2 rows in set (0.00 sec)\n```\n\nIn a traditional database, this could be disastrous. In Dolt, you're one command away from getting your table back.\n\n```\nmysql> call dolt_reset('--hard');\n+--------+\n| status |\n+--------+\n|      0 |\n+--------+\n1 row in set (0.01 sec)\n\nmysql> show tables;\n+---------------------------+\n| Tables_in_getting_started |\n+---------------------------+\n| employees                 |\n| employees_teams           |\n| teams                     |\n+---------------------------+\n3 rows in set (0.01 sec)\n```\n\nDolt makes operating databases less error prone. You can always back out changes you have in progress or rewind to a known good state. You also have the ability to undo specific commits using [`dolt_revert()`](https://docs.dolthub.com/sql-reference/version-control/dolt-sql-procedures#dolt_revert). Even if you accidentally run `drop database` on the wrong database, Dolt lets you undo that by calling the [`dolt_undrop()` stored procedure](https://docs.dolthub.com/sql-reference/version-control/dolt-sql-procedures#dolt_undrop).\n\n\n## See the data in a SQL Workbench\n\nHate the command line? Let's use [Tableplus](https://tableplus.com/) to make some modifications. Tableplus is a free SQL Workbench. Follow the installation instructions from their website.\n\nNow, to connect you must select MySQL as the connection type. Then enter a name for your connection, `getting_started` as your database, and `root` as your user.\n\n![Tableplus Connection](./images/getting-started-tp-connect.png)\n\nClick connect and you'll be presented with a familiar database workbench GUI.\n\n![Tableplus](./images/getting-started-tp.png)\n\n## Make changes on a branch\n\nTo make changes on a branch, I use the `dolt_checkout()` stored procedure. Using the `-b` option creates a branch, just like in Git.\n\nTableplus gives me the ability to enter a multiple line SQL script on the SQL tab. I entered the following SQL to checkout a branch, update, insert, delete, and finally Dolt commit my changes.\n\n```SQL\ncall dolt_checkout('-b','modifications');\nupdate employees SET first_name='Timothy' where first_name='Tim';\ninsert INTO employees (id, first_name, last_name) values (4,'Daylon', 'Wilkins');\ninsert into employees_teams(team_id, employee_id) values (0,4);\ndelete from employees_teams where employee_id=0 and team_id=1;\ncall dolt_commit('-am', 'Modifications on a branch');\n```\n\nHere's the result in Tableplus.\n\n![New Updates](./images/getting-started-new-updates.png)\n\nBack in my terminal, I cannot see the table modifications made in Tableplus because they happened on a different branch than the one I have checked out in my session. \n\n```\nmysql> select * from dolt_branches;\n+---------------+----------------------------------+------------------+------------------------+-------------------------+----------------------------+\n| name          | hash                             | latest_committer | latest_committer_email | latest_commit_date      | latest_commit_message      |\n+---------------+----------------------------------+------------------+------------------------+-------------------------+----------------------------+\n| main          | 13qfqa5rojq18j84d1n2htjkm6fletg4 | Tim Sehn         | tim@dolthub.com        | 2022-06-07 16:39:32.066 | Populated tables with data |\n| modifications | uhkv57j4bp2v16vcnmev9lshgkqq8ppb | Tim Sehn         | tim@dolthub.com        | 2022-06-07 16:41:49.847 | Modifications on a branch  |\n+---------------+----------------------------------+------------------+------------------------+-------------------------+----------------------------+\n2 rows in set (0.00 sec)\n\nmysql> select active_branch();\n+-----------------+\n| active_branch() |\n+-----------------+\n| main            |\n+-----------------+\n1 row in set (0.00 sec)\n\nmysql> select * from employees;\n+------+------------+------------+\n| id   | last_name  | first_name |\n+------+------------+------------+\n|    0 | Sehn       | Tim        |\n|    1 | Hendriks   | Brian      |\n|    2 | Son        | Aaron      |\n|    3 | Fitzgerald | Brian      |\n+------+------------+------------+\n4 rows in set (0.00 sec)\n```\n\nI can query the branch no matter what I have checked out using SQL `as of` syntax. \n\n```\nmysql> select * from employees as of 'modifications';\n+------+------------+------------+\n| id   | last_name  | first_name |\n+------+------------+------------+\n|    0 | Sehn       | Timothy    |\n|    1 | Hendriks   | Brian      |\n|    2 | Son        | Aaron      |\n|    3 | Fitzgerald | Brian      |\n|    4 | Wilkins    | Daylon     |\n+------+------------+------------+\n5 rows in set (0.01 sec)\n```\n\nIf I'd like to see the diff between the two branches, I can use the `dolt_diff()` table function. It takes two branches and the table name as arguments.\n\n```\nmysql> select * from dolt_diff('main', 'modifications', 'employees');\n+--------------+---------------+-------+---------------+-------------------------+----------------+-----------------+---------+-------------+-------------------------+-----------+\n| to_last_name | to_first_name | to_id | to_commit     | to_commit_date          | from_last_name | from_first_name | from_id | from_commit | from_commit_date        | diff_type |\n+--------------+---------------+-------+---------------+-------------------------+----------------+-----------------+---------+-------------+-------------------------+-----------+\n| Sehn         | Timothy       |     0 | modifications | 2022-06-07 16:41:49.847 | Sehn           | Tim             |       0 | main        | 2022-06-07 16:39:32.066 | modified  |\n| Wilkins      | Daylon        |     4 | modifications | 2022-06-07 16:41:49.847 | NULL           | NULL            |    NULL | main        | 2022-06-07 16:39:32.066 | added     |\n+--------------+---------------+-------+---------------+-------------------------+----------------+-----------------+---------+-------------+-------------------------+-----------+\n2 rows in set (0.00 sec)\n```\n\nAs you can see, you have the full power of Git-style branches and diffs in a SQL database with Dolt.\n\n## Make a schema change on another branch\n\nI can also make schema changes on branches for isolated testing of new schema. I'm going to add a `start_date` column on a new branch and populate it. \n\n```\nmysql> call dolt_checkout('-b', 'schema_changes');\n+--------+\n| status |\n+--------+\n|      0 |\n+--------+\n1 row in set (0.01 sec)\n\nmysql> alter table employees add column start_date date;\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> update employees set start_date='2018-09-08';\nQuery OK, 4 rows affected (0.01 sec)\nRows matched: 4  Changed: 4  Warnings: 0\n\nmysql> update employees set start_date='2021-04-19' where last_name='Fitzgerald';\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from employees;\n+------+------------+------------+------------+\n| id   | last_name  | first_name | start_date |\n+------+------------+------------+------------+\n|    0 | Sehn       | Tim        | 2018-09-08 |\n|    1 | Hendriks   | Brian      | 2018-09-08 |\n|    2 | Son        | Aaron      | 2018-09-08 |\n|    3 | Fitzgerald | Brian      | 2021-04-19 |\n+------+------------+------------+------------+\n4 rows in set (0.00 sec)\n\nmysql> call dolt_commit('-am', 'Added start_date column to employees');\n+----------------------------------+\n| hash                             |\n+----------------------------------+\n| pg3nfi0j1dpc5pf1rfgckpmlteaufdrt |\n+----------------------------------+\n1 row in set (0.01 sec)\n```\n\nChanging schema on a branch gives you a new method for doing isolated integration testing of new schema changes.\n\n## Merge it all together\n\nLet's assume all the testing of the new schema on the `schema_changes` branch and data on the `modifications` branch completed flawlessly. It's time to merge all our edits together onto `main`. This is done using the `dolt_merge` stored procedure.\n\n```\nmysql> call dolt_checkout('main');\n+--------+\n| status |\n+--------+\n|      0 |\n+--------+\n1 row in set (0.01 sec)\n\nmysql> select * from dolt_status;\nEmpty set (0.00 sec)\n\nmysql> call dolt_merge('schema_changes');\n+--------------+\n| no_conflicts |\n+--------------+\n|            1 |\n+--------------+\n1 row in set (0.01 sec)\n\nmysql> select * from employees;\n+------+------------+------------+------------+\n| id   | last_name  | first_name | start_date |\n+------+------------+------------+------------+\n|    0 | Sehn       | Tim        | 2018-09-08 |\n|    1 | Hendriks   | Brian      | 2018-09-08 |\n|    2 | Son        | Aaron      | 2018-09-08 |\n|    3 | Fitzgerald | Brian      | 2021-04-19 |\n+------+------------+------------+------------+\n4 rows in set (0.00 sec)\n```\n\nSchema change successful. We now have start dates. Data changes are next.\n\n```\nmysql> call dolt_merge('modifications');\n+--------------+\n| no_conflicts |\n+--------------+\n|            1 |\n+--------------+\n1 row in set (0.02 sec)\n\nmysql> select * from employees;\n+------+------------+------------+------------+\n| id   | last_name  | first_name | start_date |\n+------+------------+------------+------------+\n|    0 | Sehn       | Timothy    | 2018-09-08 |\n|    1 | Hendriks   | Brian      | 2018-09-08 |\n|    2 | Son        | Aaron      | 2018-09-08 |\n|    3 | Fitzgerald | Brian      | 2021-04-19 |\n|    4 | Wilkins    | Daylon     | NULL       |\n+------+------------+------------+------------+\n5 rows in set (0.00 sec)\n```\n\nData changes successful as well. As you can see, I am now \"Timothy\" instead of \"Tim\", Daylon is added, and we all have start dates except for Daylon who was added on a different branch.\n\n```\nmysql> select first_name, last_name, team_name from employees \n    join employees_teams on (employees.id=employees_teams.employee_id) \n    join teams on (teams.id=employees_teams.team_id) \n    where team_name='Sales';\n+------------+------------+-----------+\n| first_name | last_name  | team_name |\n+------------+------------+-----------+\n| Brian      | Fitzgerald | Sales     |\n+------------+------------+-----------+\n1 row in set (0.01 sec)\n```\n\nI'm also gone from the Sales Team. Engineering is life.\n\nI have to commit all my changes because the last merge was not a fast-forward merge.\n\n```\nmysql> call dolt_commit('-m', 'Merged all branches');\n+----------------------------------+\n| hash                             |\n+----------------------------------+\n| vn9b0qcematsj2f6ka0hfoflhr5s6p0b |\n+----------------------------------+\n1 row in set (0.01 sec)\n\nmysql> select * from dolt_log;\n+----------------------------------+-----------+-----------------+-------------------------+--------------------------------------+\n| commit_hash                      | committer | email           | date                    | message                              |\n+----------------------------------+-----------+-----------------+-------------------------+--------------------------------------+\n| vn9b0qcematsj2f6ka0hfoflhr5s6p0b | Tim Sehn  | tim@dolthub.com | 2022-06-07 17:10:02.07  | Merged all branches                  |\n| pg3nfi0j1dpc5pf1rfgckpmlteaufdrt | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:44:37.513 | Added start_date column to employees |\n| uhkv57j4bp2v16vcnmev9lshgkqq8ppb | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:41:49.847 | Modifications on a branch            |\n| 13qfqa5rojq18j84d1n2htjkm6fletg4 | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:39:32.066 | Populated tables with data           |\n| ne182jemgrlm8jnjmoubfqsstlfi1s98 | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema               |\n| vluuhvd0bn59598utedt77ed9q5okbcb | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:33:59.531 | Initialize data repository           |\n+----------------------------------+-----------+-----------------+-------------------------+--------------------------------------+\n6 rows in set (0.00 sec)\n```\n\nNow, we have a database with all the schema and data changes merged and ready for use.\n\n## Audit Cell Lineage\n\nWhich commit changed my first name? With Dolt you have lineage for every cell in your database. Let's use the `dolt_history_<tablename>` and `dolt_diff_<tablename>` to explore the lineage features in Dolt.\n\n`dolt_history_<tablename>` shows you the state of the row at every commit.\n\n```\nmysql> select * from dolt_history_employees where id=0 order by commit_date;\n+------+-----------+------------+------------+----------------------------------+-----------+-------------------------+\n| id   | last_name | first_name | start_date | commit_hash                      | committer | commit_date             |\n+------+-----------+------------+------------+----------------------------------+-----------+-------------------------+\n|    0 | Sehn      | Tim        | NULL       | 13qfqa5rojq18j84d1n2htjkm6fletg4 | Tim Sehn  | 2022-06-07 16:39:32.066 |\n|    0 | Sehn      | Timothy    | NULL       | uhkv57j4bp2v16vcnmev9lshgkqq8ppb | Tim Sehn  | 2022-06-07 16:41:49.847 |\n|    0 | Sehn      | Tim        | 2018-09-08 | pg3nfi0j1dpc5pf1rfgckpmlteaufdrt | Tim Sehn  | 2022-06-07 16:44:37.513 |\n|    0 | Sehn      | Timothy    | 2018-09-08 | vn9b0qcematsj2f6ka0hfoflhr5s6p0b | Tim Sehn  | 2022-06-07 17:10:02.07  |\n+------+-----------+------------+------------+----------------------------------+-----------+-------------------------+\n4 rows in set (0.00 sec)\n```\n\n`dolt_diff_<tablename>` allows you to filter the history down to only commits when the cell in question changed. In this case, I'm interested in the commits that are changing my first name. Note, there are two commits that changed my name because one is the original change and the second is the merge commit.\n\n```\nmysql> select to_commit,from_first_name,to_first_name from dolt_diff_employees \n    where (from_id=0 or to_id=0) and (from_first_name <> to_first_name or from_first_name is NULL)\n    order by to_commit_date;\n+----------------------------------+-----------------+---------------+\n| to_commit                        | from_first_name | to_first_name |\n+----------------------------------+-----------------+---------------+\n| 13qfqa5rojq18j84d1n2htjkm6fletg4 | NULL            | Tim           |\n| uhkv57j4bp2v16vcnmev9lshgkqq8ppb | Tim             | Timothy       |\n| vn9b0qcematsj2f6ka0hfoflhr5s6p0b | Tim             | Timothy       |\n+----------------------------------+-----------------+---------------+\n3 rows in set (0.01 sec)\n```\n\nDolt provides powerful data audit capabilities down to individual cells. When, how, and why has each cell in your database changed over time?\n\n# Additional Reading\n\nHead over to [our documentation](https://docs.dolthub.com/introduction/what-is-dolt) now that you have a feel for Dolt. You can also read about what we've been working on in [our blog](https://www.dolthub.com/blog/).\n\n# Security Policy\n\n[Dolt's current security policy](https://github.com/dolthub/dolt/blob/main/SECURITY.md) is maintained in this repository. Please follow the disclosure instructions there. Please do not initially report security issues in this repository's public GitHub issues.\n\n# Credits and License\n\nDolt relies heavily on open source code and ideas from the\n[Noms](https://github.com/attic-labs/noms) project. We are very\nthankful to the Noms team for making this code freely available,\nwithout which we would not have been able to build Dolt so rapidly.\n\nDolt is licensed under the Apache License, Version 2.0. See\n[LICENSE](https://github.com/dolthub/dolt/blob/master/LICENSE) for\ndetails.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.58203125,
          "content": "# Security Policy\n\n## Supported Versions\n\nBy default, the most recent release of Dolt is the version which is\nsupported for all security updates. If you need ongoing security\nsupport for an older version of Dolt, please [contact us](https://www.dolthub.com/contact).\n\n## Reporting a Vulnerability\n\nAny security issues with Dolt can be reported to [security@dolthub.com](security@dolthub.com).\n\nReports will be responded to within one business day. The majority of\nour team operates on Pacific Time and on a US holiday schedule.\n\nDoltHub does not currently run a security bounty program for Dolt.\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "dolt.plugin.zsh",
          "type": "blob",
          "size": 0.4501953125,
          "content": "if (( $+commands[dolt] )); then\n  # gen-zsh writes a file to the command line, and does not output the completion script like\n  # most other cli tools. For this reason, we write the file to the local directory and source it\n  local completion_path=${0:h}/_dolt\n\n  if [[ ! -e \"$completion_path\" ]]; then\n    # creates a completion file in the current directory\n    dolt gen-zsh --file=\"$completion_path\"\n  fi\n\n  source \"$completion_path\"\n  compdef _dolt dolt\nfi\n"
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "integration-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "proto",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}