{
  "metadata": {
    "timestamp": 1736568017247,
    "page": 153,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ffuf/ffuf",
      "stars": 12996,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "/ffuf\n.idea\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 0.6767578125,
          "content": "builds:\n  - id: ffuf\n    binary: ffuf\n    flags:\n      - -trimpath\n    env:\n      - CGO_ENABLED=0\n    asmflags:\n      - all=-trimpath={{.Env.GOPATH}}\n    gcflags:\n      - all=-trimpath={{.Env.GOPATH}}\n    ldflags: |\n      -s -w -X github.com/ffuf/ffuf/v2/pkg/ffuf.VERSION_APPENDIX= -extldflags '-static'\n    goos:\n      - linux\n      - windows\n      - freebsd\n      - openbsd\n      - darwin\n    goarch:\n      - amd64\n      - 386\n      - arm\n      - arm64\n    ignore:\n      - goos: freebsd\n        goarch: arm64\n\narchives:\n  - id: tgz\n    format: tar.gz\n    replacements:\n        darwin: macOS\n    format_overrides:\n        - goos: windows\n          format: zip\n\nsigns:\n  - artifacts: checksum\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.7236328125,
          "content": "## Changelog\n- master\n  - New\n  - Changed\n    - Fix a bug in autocalibration strategy merging, when two files have the same strategy key\n    - Fix panic when setting rate to 0 in the interactive console\n  \n- v2.1.0\n  - New\n    - autocalibration-strategy refactored to support extensible strategy configuration\n    - New cli flag `-raw` to omit urlencoding for URIs\n    - New cli flags `-ck` and `-cc` to enable the use of client side certificate authentication\n    - Integration with `github.com/ffuf/pencode` library, added `-enc` cli flag to do various in-fly encodings for input data\n  - Changed\n    - Fix multiline output\n    - Explicitly allow TLS1.0 \n    - Fix markdown output file format\n    - Fix csv output file format\n    - Fixed divide by 0 error when setting rate limit to 0 manually.\n    - Automatic brotli and deflate decompression\n    - Report if request times out when a time based matcher or filter is active\n    - All 2XX status codes are now matched\n    - Allow adding \"unused\" wordlists in config file\n\n- v2.0.0\n  - New\n    - Added a new, dynamic keyword `FFUFHASH` that generates hash from job configuration and wordlist position to map blind payloads back to the initial request.\n    - New command line parameter for searching a hash: `-search FFUFHASH`\n    - Data scraper functionality\n    - Requests per second rate can be configured in the interactive mode\n  - Changed\n    - Multiline output prints out alphabetically sorted by keyword\n    - Default configuration directories now follow `XDG_CONFIG_HOME` variable (less spam in your home directory)\n    - Fixed issue with autocalibration of line & words filter\n    - Rate doesn't have initial burst anymore and is more robust in general\n    - Sniper mode template parsing fixes\n    - Time-based matcher now works properly\n    - Proxy URLs are verified to avoid hard to debug issues\n    - Made JSON (`-json`) output format take precedence over quiet output mode, to allow JSON output without the banner etc\n\n  \n- v1.5.0\n  - New\n    - New autocalibration options: `-ach`, `-ack` and `-acs`. Revamped the whole autocalibration process\n    - Configurable modes for matchers and filters (CLI flags: `fmode` and `mmode`): \"and\" and \"or\"\n  - Changed\n  \n- v1.4.1\n  - New\n  - Changed\n    - Fixed a bug with recursion, introduced in the 1.4.0 release\n    - Recursion now works better with multiple wordlists, disabling unnecessary wordlists for queued jobs where needed\n  \n- v1.4.0\n  - New\n    - Added response time logging and filtering\n    - Added a CLI flag to specify TLS SNI value\n    - Added full line colors\n    - Added `-json` to emit newline delimited JSON output\n    - Added 500 Internal Server Error to list of status codes matched by default\n  - Changed\n    - Fixed an issue where output file was created regardless of `-or`\n    - Fixed an issue where output (often a lot of it) would be printed after entering interactive mode\n    - Fixed an issue when reading wordlist files from ffufrc\n    - Fixed an issue where `-of all` option only creates one output file (instead of all formats) \n    - Fixed an issue where redirection to the same domain in recursive mode dropped port info from URL\n    - Added HTTP2 support\n\n- v1.3.1\n  - New\n    - Added a CLI flag to disable the interactive mode\n  - Changed\n    - Do not read the last newline in the end of the raw request file when using -request\n    - Fixed an issue with storing the matches for recursion jobs\n    - Fixed the way the \"size\" is calculated, it should match content-length now\n    - Fixed an issue with header canonicalization when a keyword was just a part of the header name  \n    - Fixed output writing so it doesn't silently fail if it needs to create directories recursively\n\n- v1.3.0\n  - New\n     - All output file formats now include the `Content-Type`.\n     - New CLI flag `-recursion-strategy` that allows adding new queued recursion jobs for non-redirect responses.\n     - Ability to enter interactive mode by pressing `ENTER` during  the ffuf execution. The interactive mode allows\n    user to change filters, manage recursion queue, save snapshot of matches to a file etc.\n  - Changed\n    - Fix a badchar in progress output\n  \n- v1.2.1\n  - Changed\n    - Fixed a build breaking bug in `input-shell` parameter\n    \n- v1.2.0\n  - New\n    - Added 405 Method Not Allowed to list of status codes matched by default.\n    - New CLI flag `-rate` to set maximum rate of requests per second. The adjustment is dynamic.\n    - New CLI flag `-config` to define a configuration file with preconfigured settings for the job.\n    - Ffuf now reads a default configuration file `$HOME/.ffufrc` upon startup. Options set in this file\n    are overwritten by the ones provided on CLI.\n    - Change banner logging to stderr instead of stdout.\n    - New CLI flag `-or` to avoid creating result files if we didn't get any. \n    - New CLI flag `-input-shell` to set the shell to be used by `input-cmd`\n\n  - Changed\n    - Pre-flight errors are now displayed also after the usage text to prevent the need to scroll through backlog.\n    - Cancelling via SIGINT (Ctrl-C) is now more responsive\n    - Fixed issue where a thread would hang due to TCP errors\n    - Fixed the issue where the option -ac was overwriting existing filters. Now auto-calibration will add them where needed.\n    - The `-w` flag now accepts comma delimited values in the form of `file1:W1,file2:W2`.\n    - Links in the HTML report are now clickable\n    - Fixed panic during wordlist flag parsing in Windows systems.\n\n- v1.1.0\n  - New\n    - New CLI flag `-maxtime-job` to set max. execution time per job.\n    - Changed behaviour of `-maxtime`, can now be used for entire process.\n    - A new flag `-ignore-body` so ffuf does not fetch the response content. Default value=false.\n    - Added the wordlists to the header information.\n    - Added support to output \"all\" formats (specify the path/filename sans file extension and ffuf will add the appropriate suffix for the filetype)\n\n  - Changed\n    - Fixed a bug related to the autocalibration feature making the random seed initialization also to take place before autocalibration needs it.\n    - Added tls renegotiation flag to fix #193 in http.Client\n    - Fixed HTML report to display select/combo-box for rows per page (and increased default from 10 to 250 rows).\n    - Added Host information to JSON output file\n    - Fixed request method when supplying request file\n    - Fixed crash with 3XX responses that weren't redirects (304 Not Modified, 300 Multiple Choices etc)\n\n- v1.0.2\n  - Changed\n    - Write POST request data properly to file when ran with `-od`.\n    - Fixed a bug by using header canonicaliztion related to HTTP headers being case insensitive.\n    - Properly handle relative redirect urls with `-recursion`\n    - Calculate req/sec correctly for when using recursion\n    - When `-request` is used, allow the user to override URL using `-u`\n\n- v1.0.1\n  - Changed\n    - Fixed a bug where regex matchers and filters would fail if `-od` was used to store the request & response contents.\n\n- v1.0\n  - New\n    - New CLI flag `-ic` to ignore comments from wordlist.\n    - New CLI flags `-request` to specify the raw request file to build the actual request from and `-request-proto` to define the new request format.\n    - New CLI flag `-od` (output directory) to enable writing requests and responses for matched results to a file for postprocessing or debugging purposes.\n    - New CLI flag `-maxtime` to limit the running time of ffuf\n    - New CLI flags `-recursion` and `-recursion-depth` to control recursive ffuf jobs if directories are found. This requires the `-u` to end with FUZZ keyword.\n    - New CLI flag `-replay-proxy` to replay matched requests using a custom proxy.\n  - Changed\n    - Limit the use of `-e` (extensions) to a single keyword: FUZZ\n    - Regexp matching and filtering (-mr/-fr) allow using keywords in patterns\n    - Take 429 responses into account when -sa (stop on all error cases) is used\n    - Remove -k flag support, convert to dummy flag #134\n    - Write configuration to output JSON\n    - Better help text.\n    - If any matcher is set, ignore -mc default value.\n\n- v0.12\n  - New\n    - Added a new flag to select a multi wordlist operation mode: `--mode`, possible values: `clusterbomb` and `pitchfork`.\n    - Added a new output file format eJSON, for always base64 encoding the input data.\n    - Redirect location is always shown in the output files (when using `-o`)\n    - Full URL is always shown in the output files (when using `-o`)\n    - HTML output format got [DataTables](https://datatables.net/) support allowing realtime searches, sorting by column etc.\n    - New CLI flag `-v` for verbose output. Including full URL, and redirect location.\n    - SIGTERM monitoring, in order to catch keyboard interrupts an such, to be able to write `-o` files before exiting.\n  - Changed\n    - Fixed a bug in the default multi wordlist mode\n    - Fixed JSON output regression, where all the input data was always encoded in base64\n    - `--debug-log` no correctly logs connection errors\n    - Removed `-l` flag in favor of `-v`\n    - More verbose information in banner shown in startup.\n\n- v0.11\n  - New\n\n    - New CLI flag: -l, shows target location of redirect responses\n    - New CLI flac: -acc, custom auto-calibration strings\n    - New CLI flag: -debug-log, writes the debug logging to the specified file.\n    - New CLI flags -ml and -fl, filters/matches line count in response\n    - Ability to use multiple wordlists / keywords by defining multiple -w command line flags. The if no keyword is defined, the default is FUZZ to keep backwards compatibility. Example: `-w \"wordlists/custom.txt:CUSTOM\" -H \"RandomHeader: CUSTOM\"`.\n\n  - Changed\n    - New CLI flag: -i, dummy flag that does nothing. for compatibility with copy as curl.\n    - New CLI flag: -b/--cookie, cookie data for compatibility with copy as curl.\n    - New Output format are available: HTML and Markdown table.\n    - New CLI flag: -l, shows target location of redirect responses\n    - Filtering and matching by status code, response size or word count now allow using ranges in addition to single values\n    - The internal logging information to be discarded, and can be written to a file with the new `-debug-log` flag.\n\n- v0.10\n  - New\n    - New CLI flag: -ac to autocalibrate response size and word filters based on few preset URLs.\n    - New CLI flag: -timeout to specify custom timeouts for all HTTP requests.\n    - New CLI flag: --data for compatibility with copy as curl functionality of browsers.\n    - New CLI flag: --compressed, dummy flag that does nothing. for compatibility with copy as curl.\n    - New CLI flags: --input-cmd, and --input-num to handle input generation using external commands. Mutators for example. Environment variable FFUF_NUM will be updated on every call of the command.\n    - When --input-cmd is used, display position instead of the payload in results. The output file (of all formats) will include the payload in addition to the position however.\n\n  - Changed\n    - Wordlist can also be read from standard input\n    - Defining -d or --data implies POST method if -X doesn't set it to something else than GET\n\n- v0.9\n  - New\n    - New output file formats: CSV and eCSV (CSV with base64 encoded input field to avoid CSV breakage with payloads containing a comma)\n    - New CLI flag to follow redirects\n    - Erroring connections will be retried once\n    - Error counter in status bar\n    - New CLI flags: -se (stop on spurious errors) and -sa (stop on all errors, implies -se and -sf)\n    - New CLI flags: -e to provide a list of extensions to add to wordlist entries, and -D to provide DirSearch wordlist format compatibility.\n    - Wildcard option for response status code matcher.\n- v0.8\n  - New\n    - New CLI flag to write output to a file in JSON format\n    - New CLI flag to stop on spurious 403 responses\n  - Changed\n    - Regex matching / filtering now matches the headers alongside of the response body\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 2.0546875,
          "content": "# Contributors\n\n* [adamtlangley](https://github.com/adamtlangley)\n* [adilsoybali](https://github.com/adilsoybali)\n* [AverageSecurityGuy](https://github.com/averagesecurityguy)\n* [bp0](https://github.com/bp0lr)\n* [bjhulst](https://github.com/bjhulst)\n* [bsysop](https://twitter.com/bsysop)\n* [ccsplit](https://github.com/ccsplit)\n* [choket](https://github.com/choket)\n* [codingo](https://github.com/codingo)\n* [c_sto](https://github.com/c-sto)\n* [Damian89](https://github.com/Damian89)\n* [Daviey](https://github.com/Daviey)\n* [delic](https://github.com/delic)\n* [denandz](https://github.com/denandz)\n* [Ephex2](https://github.com/Ephex2)\n* [erbbysam](https://github.com/erbbysam)\n* [eur0pa](https://github.com/eur0pa)\n* [gserrg](https://github.com/gserrg)\n* [fabiobauer](https://github.com/fabiobauer)\n* [fang0654](https://github.com/fang0654)\n* [haseobang](https://github.com/haseobang)\n* [Hazegard](https://github.com/Hazegard)\n* [helpermika](https://github.com/helpermika)\n* [h1x](https://github.com/h1x-lnx)\n* [Ice3man543](https://github.com/Ice3man543)\n* [JamTookTheBait](https://github.com/JamTookTheBait)\n* [jimen0](https://github.com/jimen0)\n* [joohoi](https://github.com/joohoi)\n* [JoshuaMulliken](https://github.com/JoshuaMulliken)\n* [jsgv](https://github.com/jsgv)\n* [justinsteven](https://github.com/justinsteven)\n* [jvesiluoma](https://github.com/jvesiluoma)\n* [Kiblyn11](https://github.com/Kiblyn11)\n* [l4yton](https://github.com/l4yton)\n* [lc](https://github.com/lc)\n* [mprencipe](https://github.com/mprencipe)\n* [nnwakelam](https://twitter.com/nnwakelam)\n* [noraj](https://pwn.by/noraj)\n* [oh6hay](https://github.com/oh6hay)\n* [penguinxoxo](https://github.com/penguinxoxo)\n* [p0dalirius](https://github.com/p0dalirius)\n* [putsi](https://github.com/putsi)\n* [SakiiR](https://github.com/SakiiR)\n* [seblw](https://github.com/seblw)\n* [Serizao](https://github.com/Serizao)\n* [Shaked](https://github.com/Shaked)\n* [Skyehopper](https://github.com/Skyehopper)\n* [SolomonSklash](https://github.com/SolomonSklash)\n* [TomNomNom](https://github.com/tomnomnom)\n* [xfgusta](https://github.com/xfgusta)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2021 Joona Hoikkala\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.8515625,
          "content": "![ffuf mascot](_img/ffuf_run_logo_600.png)\n# ffuf - Fuzz Faster U Fool\n\nA fast web fuzzer written in Go.\n\n- [Installation](https://github.com/ffuf/ffuf#installation)\n- [Example usage](https://github.com/ffuf/ffuf#example-usage)\n    - [Content discovery](https://github.com/ffuf/ffuf#typical-directory-discovery)\n    - [Vhost discovery](https://github.com/ffuf/ffuf#virtual-host-discovery-without-dns-records)\n    - [Parameter fuzzing](https://github.com/ffuf/ffuf#get-parameter-fuzzing)\n    - [POST data fuzzing](https://github.com/ffuf/ffuf#post-data-fuzzing)\n    - [Using external mutator](https://github.com/ffuf/ffuf#using-external-mutator-to-produce-test-cases)\n    - [Configuration files](https://github.com/ffuf/ffuf#configuration-files)\n- [Help](https://github.com/ffuf/ffuf#usage)\n    - [Interactive mode](https://github.com/ffuf/ffuf#interactive-mode)\n\n\n## Installation\n\n- [Download](https://github.com/ffuf/ffuf/releases/latest) a prebuilt binary from [releases page](https://github.com/ffuf/ffuf/releases/latest), unpack and run!\n\n  _or_\n- If you are on macOS with [homebrew](https://brew.sh), ffuf can be installed with: `brew install ffuf`\n  \n  _or_\n- If you have recent go compiler installed: `go install github.com/ffuf/ffuf/v2@latest` (the same command works for updating)\n  \n  _or_\n- `git clone https://github.com/ffuf/ffuf ; cd ffuf ; go get ; go build`\n\nFfuf depends on Go 1.16 or greater.\n\n## Example usage\n\nThe usage examples below show just the simplest tasks you can accomplish using `ffuf`. \n\nMore elaborate documentation that goes through many features with a lot of examples is\navailable in the ffuf wiki at [https://github.com/ffuf/ffuf/wiki](https://github.com/ffuf/ffuf/wiki)\n\nFor more extensive documentation, with real life usage examples and tips, be sure to check out the awesome guide:\n\"[Everything you need to know about FFUF](https://codingo.io/tools/ffuf/bounty/2020/09/17/everything-you-need-to-know-about-ffuf.html)\" by \nMichael Skelton ([@codingo](https://github.com/codingo)).\n\nYou can also practise your ffuf scans against a live host with different lessons and use cases either locally by using the docker container https://github.com/adamtlangley/ffufme or against the live hosted version at http://ffuf.me created by Adam Langley [@adamtlangley](https://twitter.com/adamtlangley).  \n\n### Typical directory discovery\n\n[![asciicast](https://asciinema.org/a/211350.png)](https://asciinema.org/a/211350)\n\nBy using the FUZZ keyword at the end of URL (`-u`):\n\n```\nffuf -w /path/to/wordlist -u https://target/FUZZ\n```\n\n### Virtual host discovery (without DNS records)\n\n[![asciicast](https://asciinema.org/a/211360.png)](https://asciinema.org/a/211360)\n\nAssuming that the default virtualhost response size is 4242 bytes, we can filter out all the responses of that size (`-fs 4242`)while fuzzing the Host - header:\n\n```\nffuf -w /path/to/vhost/wordlist -u https://target -H \"Host: FUZZ\" -fs 4242\n```\n\n### GET parameter fuzzing\n\nGET parameter name fuzzing is very similar to directory discovery, and works by defining the `FUZZ` keyword as a part of the URL. This also assumes a response size of 4242 bytes for invalid GET parameter name.\n\n```\nffuf -w /path/to/paramnames.txt -u https://target/script.php?FUZZ=test_value -fs 4242\n```\n\nIf the parameter name is known, the values can be fuzzed the same way. This example assumes a wrong parameter value returning HTTP response code 401.\n\n```\nffuf -w /path/to/values.txt -u https://target/script.php?valid_name=FUZZ -fc 401\n```\n\n### POST data fuzzing\n\nThis is a very straightforward operation, again by using the `FUZZ` keyword. This example is fuzzing only part of the POST request. We're again filtering out the 401 responses.\n\n```\nffuf -w /path/to/postdata.txt -X POST -d \"username=admin\\&password=FUZZ\" -u https://target/login.php -fc 401\n```\n\n### Maximum execution time\n\nIf you don't want ffuf to run indefinitely, you can use the `-maxtime`. This stops __the entire__ process after a given time (in seconds).\n\n```\nffuf -w /path/to/wordlist -u https://target/FUZZ -maxtime 60\n```\n\nWhen working with recursion, you can control the maxtime __per job__ using `-maxtime-job`. This will stop the current job after a given time (in seconds) and continue with the next one. New jobs are created when the recursion functionality detects a subdirectory.\n\n```\nffuf -w /path/to/wordlist -u https://target/FUZZ -maxtime-job 60 -recursion -recursion-depth 2\n```\n\nIt is also possible to combine both flags limiting the per job maximum execution time as well as the overall execution time. If you do not use recursion then both flags behave equally.\n\n### Using external mutator to produce test cases\n\nFor this example, we'll fuzz JSON data that's sent over POST. [Radamsa](https://gitlab.com/akihe/radamsa) is used as the mutator.\n\nWhen `--input-cmd` is used, ffuf will display matches as their position. This same position value will be available for the callee as an environment variable `$FFUF_NUM`. We'll use this position value as the seed for the mutator. Files example1.txt and example2.txt contain valid JSON payloads. We are matching all the responses, but filtering out response code `400 - Bad request`:\n\n```\nffuf --input-cmd 'radamsa --seed $FFUF_NUM example1.txt example2.txt' -H \"Content-Type: application/json\" -X POST -u https://ffuf.io.fi/FUZZ -mc all -fc 400\n```\n\nIt of course isn't very efficient to call the mutator for each payload, so we can also pre-generate the payloads, still using [Radamsa](https://gitlab.com/akihe/radamsa) as an example:\n\n```\n# Generate 1000 example payloads\nradamsa -n 1000 -o %n.txt example1.txt example2.txt\n\n# This results into files 1.txt ... 1000.txt\n# Now we can just read the payload data in a loop from file for ffuf\n\nffuf --input-cmd 'cat $FFUF_NUM.txt' -H \"Content-Type: application/json\" -X POST -u https://ffuf.io.fi/ -mc all -fc 400\n```\n\n### Configuration files\n\nWhen running ffuf, it first checks if a default configuration file exists. Default path for a `ffufrc` file is\n`$XDG_CONFIG_HOME/ffuf/ffufrc`.  You can configure one or multiple options in this file, and they will be applied on \nevery subsequent ffuf job. An example of ffufrc file can be found \n[here](https://github.com/ffuf/ffuf/blob/master/ffufrc.example). \n\nA more detailed description about configuration file locations can be found in the wiki: \n[https://github.com/ffuf/ffuf/wiki/Configuration](https://github.com/ffuf/ffuf/wiki/Configuration)\n\nThe configuration options provided on the command line override the ones loaded from the default `ffufrc` file.\nNote: this does not apply for CLI flags that can be provided more than once. One of such examples is `-H` (header) flag.\nIn this case, the `-H` values provided on the command line will be _appended_ to the ones from the config file instead.\n\nAdditionally, in case you wish to use bunch of configuration files for different use cases, you can do this by defining\nthe configuration file path using `-config` command line flag that takes the file path to the configuration file as its\nparameter. \n\n<p align=\"center\">\n  <img width=\"250\" src=\"_img/ffuf_juggling_250.png\">\n</p>\n\n## Usage\n\nTo define the test case for ffuf, use the keyword `FUZZ` anywhere in the URL (`-u`), headers (`-H`), or POST data (`-d`).\n\n```\nFuzz Faster U Fool - v2.1.0\n\nHTTP OPTIONS:\n  -H                  Header `\"Name: Value\"`, separated by colon. Multiple -H flags are accepted.\n  -X                  HTTP method to use\n  -b                  Cookie data `\"NAME1=VALUE1; NAME2=VALUE2\"` for copy as curl functionality.\n  -cc                 Client cert for authentication. Client key needs to be defined as well for this to work\n  -ck                 Client key for authentication. Client certificate needs to be defined as well for this to work\n  -d                  POST data\n  -http2              Use HTTP2 protocol (default: false)\n  -ignore-body        Do not fetch the response content. (default: false)\n  -r                  Follow redirects (default: false)\n  -raw                Do not encode URI (default: false)\n  -recursion          Scan recursively. Only FUZZ keyword is supported, and URL (-u) has to end in it. (default: false)\n  -recursion-depth    Maximum recursion depth. (default: 0)\n  -recursion-strategy Recursion strategy: \"default\" for a redirect based, and \"greedy\" to recurse on all matches (default: default)\n  -replay-proxy       Replay matched requests using this proxy.\n  -sni                Target TLS SNI, does not support FUZZ keyword\n  -timeout            HTTP request timeout in seconds. (default: 10)\n  -u                  Target URL\n  -x                  Proxy URL (SOCKS5 or HTTP). For example: http://127.0.0.1:8080 or socks5://127.0.0.1:8080\n\nGENERAL OPTIONS:\n  -V                  Show version information. (default: false)\n  -ac                 Automatically calibrate filtering options (default: false)\n  -acc                Custom auto-calibration string. Can be used multiple times. Implies -ac\n  -ach                Per host autocalibration (default: false)\n  -ack                Autocalibration keyword (default: FUZZ)\n  -acs                Custom auto-calibration strategies. Can be used multiple times. Implies -ac\n  -c                  Colorize output. (default: false)\n  -config             Load configuration from a file\n  -json               JSON output, printing newline-delimited JSON records (default: false)\n  -maxtime            Maximum running time in seconds for entire process. (default: 0)\n  -maxtime-job        Maximum running time in seconds per job. (default: 0)\n  -noninteractive     Disable the interactive console functionality (default: false)\n  -p                  Seconds of `delay` between requests, or a range of random delay. For example \"0.1\" or \"0.1-2.0\"\n  -rate               Rate of requests per second (default: 0)\n  -s                  Do not print additional information (silent mode) (default: false)\n  -sa                 Stop on all error cases. Implies -sf and -se. (default: false)\n  -scraperfile        Custom scraper file path\n  -scrapers           Active scraper groups (default: all)\n  -se                 Stop on spurious errors (default: false)\n  -search             Search for a FFUFHASH payload from ffuf history\n  -sf                 Stop when > 95% of responses return 403 Forbidden (default: false)\n  -t                  Number of concurrent threads. (default: 40)\n  -v                  Verbose output, printing full URL and redirect location (if any) with the results. (default: false)\n\nMATCHER OPTIONS:\n  -mc                 Match HTTP status codes, or \"all\" for everything. (default: 200-299,301,302,307,401,403,405,500)\n  -ml                 Match amount of lines in response\n  -mmode              Matcher set operator. Either of: and, or (default: or)\n  -mr                 Match regexp\n  -ms                 Match HTTP response size\n  -mt                 Match how many milliseconds to the first response byte, either greater or less than. EG: >100 or <100\n  -mw                 Match amount of words in response\n\nFILTER OPTIONS:\n  -fc                 Filter HTTP status codes from response. Comma separated list of codes and ranges\n  -fl                 Filter by amount of lines in response. Comma separated list of line counts and ranges\n  -fmode              Filter set operator. Either of: and, or (default: or)\n  -fr                 Filter regexp\n  -fs                 Filter HTTP response size. Comma separated list of sizes and ranges\n  -ft                 Filter by number of milliseconds to the first response byte, either greater or less than. EG: >100 or <100\n  -fw                 Filter by amount of words in response. Comma separated list of word counts and ranges\n\nINPUT OPTIONS:\n  -D                  DirSearch wordlist compatibility mode. Used in conjunction with -e flag. (default: false)\n  -e                  Comma separated list of extensions. Extends FUZZ keyword.\n  -enc                Encoders for keywords, eg. 'FUZZ:urlencode b64encode'\n  -ic                 Ignore wordlist comments (default: false)\n  -input-cmd          Command producing the input. --input-num is required when using this input method. Overrides -w.\n  -input-num          Number of inputs to test. Used in conjunction with --input-cmd. (default: 100)\n  -input-shell        Shell to be used for running command\n  -mode               Multi-wordlist operation mode. Available modes: clusterbomb, pitchfork, sniper (default: clusterbomb)\n  -request            File containing the raw http request\n  -request-proto      Protocol to use along with raw request (default: https)\n  -w                  Wordlist file path and (optional) keyword separated by colon. eg. '/path/to/wordlist:KEYWORD'\n\nOUTPUT OPTIONS:\n  -debug-log          Write all of the internal logging to the specified file.\n  -o                  Write output to file\n  -od                 Directory path to store matched results to.\n  -of                 Output file format. Available formats: json, ejson, html, md, csv, ecsv (or, 'all' for all formats) (default: json)\n  -or                 Don't create the output file if we don't have results (default: false)\n\nEXAMPLE USAGE:\n  Fuzz file paths from wordlist.txt, match all responses but filter out those with content-size 42.\n  Colored, verbose output.\n    ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v\n\n  Fuzz Host-header, match HTTP 200 responses.\n    ffuf -w hosts.txt -u https://example.org/ -H \"Host: FUZZ\" -mc 200\n\n  Fuzz POST JSON data. Match all responses not containing text \"error\".\n    ffuf -w entries.txt -u https://example.org/ -X POST -H \"Content-Type: application/json\" \\\n      -d '{\"name\": \"FUZZ\", \"anotherkey\": \"anothervalue\"}' -fr \"error\"\n\n  Fuzz multiple locations. Match only responses reflecting the value of \"VAL\" keyword. Colored.\n    ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \"VAL\" -c\n\n  More information and examples: https://github.com/ffuf/ffuf\n```\n\n### Interactive mode\n\nBy pressing `ENTER` during ffuf execution, the process is paused and user is dropped to a shell-like interactive mode:\n```\nentering interactive mode\ntype \"help\" for a list of commands, or ENTER to resume.\n> help\n\navailable commands:\n afc  [value]             - append to status code filter \n fc   [value]             - (re)configure status code filter \n afl  [value]             - append to line count filter \n fl   [value]             - (re)configure line count filter \n afw  [value]             - append to word count filter \n fw   [value]             - (re)configure word count filter \n afs  [value]             - append to size filter \n fs   [value]             - (re)configure size filter \n aft  [value]             - append to time filter \n ft   [value]             - (re)configure time filter \n rate [value]             - adjust rate of requests per second (active: 0)\n queueshow                - show job queue\n queuedel [number]        - delete a job in the queue\n queueskip                - advance to the next queued job\n restart                  - restart and resume the current ffuf job\n resume                   - resume current ffuf job (or: ENTER) \n show                     - show results for the current job\n savejson [filename]      - save current matches to a file\n help                     - you are looking at it\n> \n```\n\nin this mode, filters can be reconfigured, queue managed and the current state saved to disk.\n\nWhen (re)configuring the filters, they get applied posthumously and all the false positive matches from memory that\nwould have been filtered out by the newly added filters get deleted.\n\nThe new state of matches can be printed out with a command `show` that will print out all the matches as like they \nwould have been found by `ffuf`.\n\nAs \"negative\" matches are not stored to memory, relaxing the filters cannot unfortunately bring back the lost matches.\nFor this kind of scenario, the user is able to use the command `restart`, which resets the state and starts the current\njob from the beginning.\n\n<p align=\"center\">\n  <img width=\"250\" src=\"_img/ffuf_waving_250.png\">\n</p>\n\n## License\n\nffuf is released under MIT license. See [LICENSE](https://github.com/ffuf/ffuf/blob/master/LICENSE).\n"
        },
        {
          "name": "_img",
          "type": "tree",
          "content": null
        },
        {
          "name": "ffufrc.example",
          "type": "blob",
          "size": 1.8154296875,
          "content": "# This is an example of a ffuf configuration file.\n# https://github.com/ffuf/ffuf\n\n[http]\n    cookies = [\n        \"cookiename=cookievalue\"\n    ]\n    data = \"post=data&key=value\"\n    followredirects = false\n    headers = [\n        \"X-Header-Name: value\",\n        \"X-Another-Header: value\"\n    ]\n    ignorebody = false\n    method = \"GET\"\n    proxyurl = \"http://127.0.0.1:8080\"\n    raw = false\n    recursion = false\n    recursion_depth = 0\n    recursion_strategy = \"default\"\n    replayproxyurl = \"http://127.0.0.1:8080\"\n    timeout = 10\n    url = \"https://example.org/FUZZ\"\n\n[general]\n    autocalibration = false\n    autocalibrationstrings = [\n        \"randomtest\",\n        \"admin\"\n    ]\n    autocalibration_strategy = \"basic\"\n    autocalibration_keyword = \"FUZZ\"\n    autocalibration_perhost = false\n    colors = false\n    delay = \"\"\n    maxtime = 0\n    maxtimejob = 0\n    noninteractive = false\n    quiet = false\n    rate = 0\n    scrapers = \"all\"\n    stopon403 = false\n    stoponall = false\n    stoponerrors = false\n    threads = 40\n    verbose = false\n    json = false\n\n[input]\n    dirsearchcompat = false\n    extensions = \"\"\n    ignorewordlistcomments = false\n    inputmode = \"clusterbomb\"\n    inputnum = 100\n    inputcommands = [\n        \"seq 1 100:CUSTOMKEYWORD\"\n    ]\n    request = \"requestfile.txt\"\n    requestproto = \"https\"\n    wordlists = [\n        \"/path/to/wordlist:FUZZ\",\n        \"/path/to/hostlist:HOST\"\n    ]\n\n[output]\n    debuglog = \"debug.log\"\n    outputdirectory = \"/tmp/rawoutputdir\"\n    outputfile = \"output.json\"\n    outputformat = \"json\"\n    outputcreateemptyfile = false\n\n[filter]\n    mode = \"or\"\n    lines = \"\"\n    regexp = \"\"\n    size = \"\"\n    status = \"\"\n    time = \"\"\n    words = \"\"\n\n[matcher]\n    mode = \"or\"\n    lines = \"\"\n    regexp = \"\"\n    size = \"\"\n    status = \"200,204,301,302,307,401,403,405,500\"\n    time = \"\"\n    words = \"\"\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.4306640625,
          "content": "module github.com/ffuf/ffuf/v2\n\ngo 1.17\n\nrequire (\n\tgithub.com/PuerkitoBio/goquery v1.8.0\n\tgithub.com/adrg/xdg v0.4.0\n\tgithub.com/andybalholm/brotli v1.0.5\n\tgithub.com/ffuf/pencode v0.0.0-20230421231718-2cea7e60a693\n\tgithub.com/pelletier/go-toml v1.9.5\n)\n\nrequire (\n\tgithub.com/andybalholm/cascadia v1.3.1 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgolang.org/x/net v0.7.0 // indirect\n\tgolang.org/x/sys v0.5.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.2001953125,
          "content": "github.com/PuerkitoBio/goquery v1.8.0 h1:PJTF7AmFCFKk1N6V6jmKfrNH9tV5pNE6lZMkG0gta/U=\ngithub.com/PuerkitoBio/goquery v1.8.0/go.mod h1:ypIiRMtY7COPGk+I/YbZLbxsxn9g5ejnI2HSMtkjZvI=\ngithub.com/adrg/xdg v0.4.0 h1:RzRqFcjH4nE5C6oTAxhBtoE2IRyjBSa62SCbyPidvls=\ngithub.com/adrg/xdg v0.4.0/go.mod h1:N6ag73EX4wyxeaoeHctc1mas01KZgsj5tYiAIwqJE/E=\ngithub.com/andybalholm/brotli v1.0.5 h1:8uQZIdzKmjc/iuPu7O2ioW48L81FgatrcpfFmiq/cCs=\ngithub.com/andybalholm/brotli v1.0.5/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=\ngithub.com/andybalholm/cascadia v1.3.1 h1:nhxRkql1kdYCc8Snf7D5/D3spOX+dBgjA6u8x004T2c=\ngithub.com/andybalholm/cascadia v1.3.1/go.mod h1:R4bJ1UQfqADjvDa4P6HZHLh/3OxWWEqc0Sk8XGwHqvA=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/ffuf/pencode v0.0.0-20230421231718-2cea7e60a693 h1:fdlgw33oLPzRpoHa4ppDFX5EcmzHHychPrO5xXmzxqc=\ngithub.com/ffuf/pencode v0.0.0-20230421231718-2cea7e60a693/go.mod h1:Qmgn2URTRtZ5wMntUke1+/G7z8rofTFHG1EvN3addNY=\ngithub.com/pelletier/go-toml v1.9.5 h1:4yBQzkHv+7BHq2PQUZF3Mx0IYxG7LsP222s7Agd3ve8=\ngithub.com/pelletier/go-toml v1.9.5/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210916014120-12bc252f5db8/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.7.0 h1:rJrUqqhjsgNp7KqAIc25s9pZnjU7TUcSY7HcVZjdn1g=\ngolang.org/x/net v0.7.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211025201205-69cdffdb9359/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0 h1:MUK/U/4lj1t1oPg0HfuXDN/Z1wv31ZJ/YcPiGccS4DU=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "help.go",
          "type": "blob",
          "size": 5.1181640625,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/ffuf/ffuf/v2/pkg/ffuf\"\n)\n\ntype UsageSection struct {\n\tName          string\n\tDescription   string\n\tFlags         []UsageFlag\n\tHidden        bool\n\tExpectedFlags []string\n}\n\n// PrintSection prints out the section name, description and each of the flags\nfunc (u *UsageSection) PrintSection(max_length int, extended bool) {\n\t// Do not print if extended usage not requested and section marked as hidden\n\tif !extended && u.Hidden {\n\t\treturn\n\t}\n\tfmt.Printf(\"%s:\\n\", u.Name)\n\tfor _, f := range u.Flags {\n\t\tf.PrintFlag(max_length)\n\t}\n\tfmt.Printf(\"\\n\")\n}\n\ntype UsageFlag struct {\n\tName        string\n\tDescription string\n\tDefault     string\n}\n\n// PrintFlag prints out the flag name, usage string and default value\nfunc (f *UsageFlag) PrintFlag(max_length int) {\n\t// Create format string, used for padding\n\tformat := fmt.Sprintf(\"  -%%-%ds %%s\", max_length)\n\tif f.Default != \"\" {\n\t\tformat = format + \" (default: %s)\\n\"\n\t\tfmt.Printf(format, f.Name, f.Description, f.Default)\n\t} else {\n\t\tformat = format + \"\\n\"\n\t\tfmt.Printf(format, f.Name, f.Description)\n\t}\n}\n\nfunc Usage() {\n\tu_http := UsageSection{\n\t\tName:          \"HTTP OPTIONS\",\n\t\tDescription:   \"Options controlling the HTTP request and its parts.\",\n\t\tFlags:         make([]UsageFlag, 0),\n\t\tHidden:        false,\n\t\tExpectedFlags: []string{\"cc\", \"ck\", \"H\", \"X\", \"b\", \"d\", \"r\", \"u\", \"raw\", \"recursion\", \"recursion-depth\", \"recursion-strategy\", \"replay-proxy\", \"timeout\", \"ignore-body\", \"x\", \"sni\", \"http2\"},\n\t}\n\tu_general := UsageSection{\n\t\tName:          \"GENERAL OPTIONS\",\n\t\tDescription:   \"\",\n\t\tFlags:         make([]UsageFlag, 0),\n\t\tHidden:        false,\n\t\tExpectedFlags: []string{\"ac\", \"acc\", \"ack\", \"ach\", \"acs\", \"c\", \"config\", \"json\", \"maxtime\", \"maxtime-job\", \"noninteractive\", \"p\", \"rate\", \"scraperfile\", \"scrapers\", \"search\", \"s\", \"sa\", \"se\", \"sf\", \"t\", \"v\", \"V\"},\n\t}\n\tu_compat := UsageSection{\n\t\tName:          \"COMPATIBILITY OPTIONS\",\n\t\tDescription:   \"Options to ensure compatibility with other pieces of software.\",\n\t\tFlags:         make([]UsageFlag, 0),\n\t\tHidden:        true,\n\t\tExpectedFlags: []string{\"compressed\", \"cookie\", \"data\", \"data-ascii\", \"data-binary\", \"i\", \"k\"},\n\t}\n\tu_matcher := UsageSection{\n\t\tName:          \"MATCHER OPTIONS\",\n\t\tDescription:   \"Matchers for the response filtering.\",\n\t\tFlags:         make([]UsageFlag, 0),\n\t\tHidden:        false,\n\t\tExpectedFlags: []string{\"mmode\", \"mc\", \"ml\", \"mr\", \"ms\", \"mt\", \"mw\"},\n\t}\n\tu_filter := UsageSection{\n\t\tName:          \"FILTER OPTIONS\",\n\t\tDescription:   \"Filters for the response filtering.\",\n\t\tFlags:         make([]UsageFlag, 0),\n\t\tHidden:        false,\n\t\tExpectedFlags: []string{\"fmode\", \"fc\", \"fl\", \"fr\", \"fs\", \"ft\", \"fw\"},\n\t}\n\tu_input := UsageSection{\n\t\tName:          \"INPUT OPTIONS\",\n\t\tDescription:   \"Options for input data for fuzzing. Wordlists and input generators.\",\n\t\tFlags:         make([]UsageFlag, 0),\n\t\tHidden:        false,\n\t\tExpectedFlags: []string{\"D\", \"enc\", \"ic\", \"input-cmd\", \"input-num\", \"input-shell\", \"mode\", \"request\", \"request-proto\", \"e\", \"w\"},\n\t}\n\tu_output := UsageSection{\n\t\tName:          \"OUTPUT OPTIONS\",\n\t\tDescription:   \"Options for output. Output file formats, file names and debug file locations.\",\n\t\tFlags:         make([]UsageFlag, 0),\n\t\tHidden:        false,\n\t\tExpectedFlags: []string{\"debug-log\", \"o\", \"of\", \"od\", \"or\"},\n\t}\n\tsections := []UsageSection{u_http, u_general, u_compat, u_matcher, u_filter, u_input, u_output}\n\n\t// Populate the flag sections\n\tmax_length := 0\n\tflag.VisitAll(func(f *flag.Flag) {\n\t\tfound := false\n\t\tfor i, section := range sections {\n\t\t\tif ffuf.StrInSlice(f.Name, section.ExpectedFlags) {\n\t\t\t\tsections[i].Flags = append(sections[i].Flags, UsageFlag{\n\t\t\t\t\tName:        f.Name,\n\t\t\t\t\tDescription: f.Usage,\n\t\t\t\t\tDefault:     f.DefValue,\n\t\t\t\t})\n\t\t\t\tfound = true\n\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\tfmt.Printf(\"DEBUG: Flag %s was found but not defined in help.go.\\n\", f.Name)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif len(f.Name) > max_length {\n\t\t\tmax_length = len(f.Name)\n\t\t}\n\t})\n\n\tfmt.Printf(\"Fuzz Faster U Fool - v%s\\n\\n\", ffuf.Version())\n\n\t// Print out the sections\n\tfor _, section := range sections {\n\t\tsection.PrintSection(max_length, false)\n\t}\n\n\t// Usage examples.\n\tfmt.Printf(\"EXAMPLE USAGE:\\n\")\n\n\tfmt.Printf(\"  Fuzz file paths from wordlist.txt, match all responses but filter out those with content-size 42.\\n\")\n\tfmt.Printf(\"  Colored, verbose output.\\n\")\n\tfmt.Printf(\"    ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v\\n\\n\")\n\n\tfmt.Printf(\"  Fuzz Host-header, match HTTP 200 responses.\\n\")\n\tfmt.Printf(\"    ffuf -w hosts.txt -u https://example.org/ -H \\\"Host: FUZZ\\\" -mc 200\\n\\n\")\n\n\tfmt.Printf(\"  Fuzz POST JSON data. Match all responses not containing text \\\"error\\\".\\n\")\n\tfmt.Printf(\"    ffuf -w entries.txt -u https://example.org/ -X POST -H \\\"Content-Type: application/json\\\" \\\\\\n\")\n\tfmt.Printf(\"      -d '{\\\"name\\\": \\\"FUZZ\\\", \\\"anotherkey\\\": \\\"anothervalue\\\"}' -fr \\\"error\\\"\\n\\n\")\n\n\tfmt.Printf(\"  Fuzz multiple locations. Match only responses reflecting the value of \\\"VAL\\\" keyword. Colored.\\n\")\n\tfmt.Printf(\"    ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \\\"VAL\\\" -c\\n\\n\")\n\n\tfmt.Printf(\"  More information and examples: https://github.com/ffuf/ffuf\\n\\n\")\n}\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 17.9560546875,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/ffuf/ffuf/v2/pkg/ffuf\"\n\t\"github.com/ffuf/ffuf/v2/pkg/filter\"\n\t\"github.com/ffuf/ffuf/v2/pkg/input\"\n\t\"github.com/ffuf/ffuf/v2/pkg/interactive\"\n\t\"github.com/ffuf/ffuf/v2/pkg/output\"\n\t\"github.com/ffuf/ffuf/v2/pkg/runner\"\n\t\"github.com/ffuf/ffuf/v2/pkg/scraper\"\n)\n\ntype multiStringFlag []string\ntype wordlistFlag []string\n\nfunc (m *multiStringFlag) String() string {\n\treturn \"\"\n}\n\nfunc (m *wordlistFlag) String() string {\n\treturn \"\"\n}\n\nfunc (m *multiStringFlag) Set(value string) error {\n\t*m = append(*m, value)\n\treturn nil\n}\n\nfunc (m *wordlistFlag) Set(value string) error {\n\tdelimited := strings.Split(value, \",\")\n\n\tif len(delimited) > 1 {\n\t\t*m = append(*m, delimited...)\n\t} else {\n\t\t*m = append(*m, value)\n\t}\n\n\treturn nil\n}\n\n// ParseFlags parses the command line flags and (re)populates the ConfigOptions struct\nfunc ParseFlags(opts *ffuf.ConfigOptions) *ffuf.ConfigOptions {\n\tvar ignored bool\n\n\tvar cookies, autocalibrationstrings, autocalibrationstrategies, headers, inputcommands multiStringFlag\n\tvar wordlists, encoders wordlistFlag\n\n\tcookies = opts.HTTP.Cookies\n\tautocalibrationstrings = opts.General.AutoCalibrationStrings\n\theaders = opts.HTTP.Headers\n\tinputcommands = opts.Input.Inputcommands\n\twordlists = opts.Input.Wordlists\n\tencoders = opts.Input.Encoders\n\n\tflag.BoolVar(&ignored, \"compressed\", true, \"Dummy flag for copy as curl functionality (ignored)\")\n\tflag.BoolVar(&ignored, \"i\", true, \"Dummy flag for copy as curl functionality (ignored)\")\n\tflag.BoolVar(&ignored, \"k\", false, \"Dummy flag for backwards compatibility\")\n\tflag.BoolVar(&opts.Output.OutputSkipEmptyFile, \"or\", opts.Output.OutputSkipEmptyFile, \"Don't create the output file if we don't have results\")\n\tflag.BoolVar(&opts.General.AutoCalibration, \"ac\", opts.General.AutoCalibration, \"Automatically calibrate filtering options\")\n\tflag.BoolVar(&opts.General.AutoCalibrationPerHost, \"ach\", opts.General.AutoCalibration, \"Per host autocalibration\")\n\tflag.BoolVar(&opts.General.Colors, \"c\", opts.General.Colors, \"Colorize output.\")\n\tflag.BoolVar(&opts.General.Json, \"json\", opts.General.Json, \"JSON output, printing newline-delimited JSON records\")\n\tflag.BoolVar(&opts.General.Noninteractive, \"noninteractive\", opts.General.Noninteractive, \"Disable the interactive console functionality\")\n\tflag.BoolVar(&opts.General.Quiet, \"s\", opts.General.Quiet, \"Do not print additional information (silent mode)\")\n\tflag.BoolVar(&opts.General.ShowVersion, \"V\", opts.General.ShowVersion, \"Show version information.\")\n\tflag.BoolVar(&opts.General.StopOn403, \"sf\", opts.General.StopOn403, \"Stop when > 95% of responses return 403 Forbidden\")\n\tflag.BoolVar(&opts.General.StopOnAll, \"sa\", opts.General.StopOnAll, \"Stop on all error cases. Implies -sf and -se.\")\n\tflag.BoolVar(&opts.General.StopOnErrors, \"se\", opts.General.StopOnErrors, \"Stop on spurious errors\")\n\tflag.BoolVar(&opts.General.Verbose, \"v\", opts.General.Verbose, \"Verbose output, printing full URL and redirect location (if any) with the results.\")\n\tflag.BoolVar(&opts.HTTP.FollowRedirects, \"r\", opts.HTTP.FollowRedirects, \"Follow redirects\")\n\tflag.BoolVar(&opts.HTTP.IgnoreBody, \"ignore-body\", opts.HTTP.IgnoreBody, \"Do not fetch the response content.\")\n\tflag.BoolVar(&opts.HTTP.Raw, \"raw\", opts.HTTP.Raw, \"Do not encode URI\")\n\tflag.BoolVar(&opts.HTTP.Recursion, \"recursion\", opts.HTTP.Recursion, \"Scan recursively. Only FUZZ keyword is supported, and URL (-u) has to end in it.\")\n\tflag.BoolVar(&opts.HTTP.Http2, \"http2\", opts.HTTP.Http2, \"Use HTTP2 protocol\")\n\tflag.BoolVar(&opts.Input.DirSearchCompat, \"D\", opts.Input.DirSearchCompat, \"DirSearch wordlist compatibility mode. Used in conjunction with -e flag.\")\n\tflag.BoolVar(&opts.Input.IgnoreWordlistComments, \"ic\", opts.Input.IgnoreWordlistComments, \"Ignore wordlist comments\")\n\tflag.IntVar(&opts.General.MaxTime, \"maxtime\", opts.General.MaxTime, \"Maximum running time in seconds for entire process.\")\n\tflag.IntVar(&opts.General.MaxTimeJob, \"maxtime-job\", opts.General.MaxTimeJob, \"Maximum running time in seconds per job.\")\n\tflag.IntVar(&opts.General.Rate, \"rate\", opts.General.Rate, \"Rate of requests per second\")\n\tflag.IntVar(&opts.General.Threads, \"t\", opts.General.Threads, \"Number of concurrent threads.\")\n\tflag.IntVar(&opts.HTTP.RecursionDepth, \"recursion-depth\", opts.HTTP.RecursionDepth, \"Maximum recursion depth.\")\n\tflag.IntVar(&opts.HTTP.Timeout, \"timeout\", opts.HTTP.Timeout, \"HTTP request timeout in seconds.\")\n\tflag.IntVar(&opts.Input.InputNum, \"input-num\", opts.Input.InputNum, \"Number of inputs to test. Used in conjunction with --input-cmd.\")\n\tflag.StringVar(&opts.General.AutoCalibrationKeyword, \"ack\", opts.General.AutoCalibrationKeyword, \"Autocalibration keyword\")\n\tflag.StringVar(&opts.HTTP.ClientCert, \"cc\", \"\", \"Client cert for authentication. Client key needs to be defined as well for this to work\")\n\tflag.StringVar(&opts.HTTP.ClientKey, \"ck\", \"\", \"Client key for authentication. Client certificate needs to be defined as well for this to work\")\n\tflag.StringVar(&opts.General.ConfigFile, \"config\", \"\", \"Load configuration from a file\")\n\tflag.StringVar(&opts.General.ScraperFile, \"scraperfile\", \"\", \"Custom scraper file path\")\n\tflag.StringVar(&opts.General.Scrapers, \"scrapers\", opts.General.Scrapers, \"Active scraper groups\")\n\tflag.StringVar(&opts.Filter.Mode, \"fmode\", opts.Filter.Mode, \"Filter set operator. Either of: and, or\")\n\tflag.StringVar(&opts.Filter.Lines, \"fl\", opts.Filter.Lines, \"Filter by amount of lines in response. Comma separated list of line counts and ranges\")\n\tflag.StringVar(&opts.Filter.Regexp, \"fr\", opts.Filter.Regexp, \"Filter regexp\")\n\tflag.StringVar(&opts.Filter.Size, \"fs\", opts.Filter.Size, \"Filter HTTP response size. Comma separated list of sizes and ranges\")\n\tflag.StringVar(&opts.Filter.Status, \"fc\", opts.Filter.Status, \"Filter HTTP status codes from response. Comma separated list of codes and ranges\")\n\tflag.StringVar(&opts.Filter.Time, \"ft\", opts.Filter.Time, \"Filter by number of milliseconds to the first response byte, either greater or less than. EG: >100 or <100\")\n\tflag.StringVar(&opts.Filter.Words, \"fw\", opts.Filter.Words, \"Filter by amount of words in response. Comma separated list of word counts and ranges\")\n\tflag.StringVar(&opts.General.Delay, \"p\", opts.General.Delay, \"Seconds of `delay` between requests, or a range of random delay. For example \\\"0.1\\\" or \\\"0.1-2.0\\\"\")\n\tflag.StringVar(&opts.General.Searchhash, \"search\", opts.General.Searchhash, \"Search for a FFUFHASH payload from ffuf history\")\n\tflag.StringVar(&opts.HTTP.Data, \"d\", opts.HTTP.Data, \"POST data\")\n\tflag.StringVar(&opts.HTTP.Data, \"data\", opts.HTTP.Data, \"POST data (alias of -d)\")\n\tflag.StringVar(&opts.HTTP.Data, \"data-ascii\", opts.HTTP.Data, \"POST data (alias of -d)\")\n\tflag.StringVar(&opts.HTTP.Data, \"data-binary\", opts.HTTP.Data, \"POST data (alias of -d)\")\n\tflag.StringVar(&opts.HTTP.Method, \"X\", opts.HTTP.Method, \"HTTP method to use\")\n\tflag.StringVar(&opts.HTTP.ProxyURL, \"x\", opts.HTTP.ProxyURL, \"Proxy URL (SOCKS5 or HTTP). For example: http://127.0.0.1:8080 or socks5://127.0.0.1:8080\")\n\tflag.StringVar(&opts.HTTP.ReplayProxyURL, \"replay-proxy\", opts.HTTP.ReplayProxyURL, \"Replay matched requests using this proxy.\")\n\tflag.StringVar(&opts.HTTP.RecursionStrategy, \"recursion-strategy\", opts.HTTP.RecursionStrategy, \"Recursion strategy: \\\"default\\\" for a redirect based, and \\\"greedy\\\" to recurse on all matches\")\n\tflag.StringVar(&opts.HTTP.URL, \"u\", opts.HTTP.URL, \"Target URL\")\n\tflag.StringVar(&opts.HTTP.SNI, \"sni\", opts.HTTP.SNI, \"Target TLS SNI, does not support FUZZ keyword\")\n\tflag.StringVar(&opts.Input.Extensions, \"e\", opts.Input.Extensions, \"Comma separated list of extensions. Extends FUZZ keyword.\")\n\tflag.StringVar(&opts.Input.InputMode, \"mode\", opts.Input.InputMode, \"Multi-wordlist operation mode. Available modes: clusterbomb, pitchfork, sniper\")\n\tflag.StringVar(&opts.Input.InputShell, \"input-shell\", opts.Input.InputShell, \"Shell to be used for running command\")\n\tflag.StringVar(&opts.Input.Request, \"request\", opts.Input.Request, \"File containing the raw http request\")\n\tflag.StringVar(&opts.Input.RequestProto, \"request-proto\", opts.Input.RequestProto, \"Protocol to use along with raw request\")\n\tflag.StringVar(&opts.Matcher.Mode, \"mmode\", opts.Matcher.Mode, \"Matcher set operator. Either of: and, or\")\n\tflag.StringVar(&opts.Matcher.Lines, \"ml\", opts.Matcher.Lines, \"Match amount of lines in response\")\n\tflag.StringVar(&opts.Matcher.Regexp, \"mr\", opts.Matcher.Regexp, \"Match regexp\")\n\tflag.StringVar(&opts.Matcher.Size, \"ms\", opts.Matcher.Size, \"Match HTTP response size\")\n\tflag.StringVar(&opts.Matcher.Status, \"mc\", opts.Matcher.Status, \"Match HTTP status codes, or \\\"all\\\" for everything.\")\n\tflag.StringVar(&opts.Matcher.Time, \"mt\", opts.Matcher.Time, \"Match how many milliseconds to the first response byte, either greater or less than. EG: >100 or <100\")\n\tflag.StringVar(&opts.Matcher.Words, \"mw\", opts.Matcher.Words, \"Match amount of words in response\")\n\tflag.StringVar(&opts.Output.DebugLog, \"debug-log\", opts.Output.DebugLog, \"Write all of the internal logging to the specified file.\")\n\tflag.StringVar(&opts.Output.OutputDirectory, \"od\", opts.Output.OutputDirectory, \"Directory path to store matched results to.\")\n\tflag.StringVar(&opts.Output.OutputFile, \"o\", opts.Output.OutputFile, \"Write output to file\")\n\tflag.StringVar(&opts.Output.OutputFormat, \"of\", opts.Output.OutputFormat, \"Output file format. Available formats: json, ejson, html, md, csv, ecsv (or, 'all' for all formats)\")\n\tflag.Var(&autocalibrationstrings, \"acc\", \"Custom auto-calibration string. Can be used multiple times. Implies -ac\")\n\tflag.Var(&autocalibrationstrategies, \"acs\", \"Custom auto-calibration strategies. Can be used multiple times. Implies -ac\")\n\tflag.Var(&cookies, \"b\", \"Cookie data `\\\"NAME1=VALUE1; NAME2=VALUE2\\\"` for copy as curl functionality.\")\n\tflag.Var(&cookies, \"cookie\", \"Cookie data (alias of -b)\")\n\tflag.Var(&headers, \"H\", \"Header `\\\"Name: Value\\\"`, separated by colon. Multiple -H flags are accepted.\")\n\tflag.Var(&inputcommands, \"input-cmd\", \"Command producing the input. --input-num is required when using this input method. Overrides -w.\")\n\tflag.Var(&wordlists, \"w\", \"Wordlist file path and (optional) keyword separated by colon. eg. '/path/to/wordlist:KEYWORD'\")\n\tflag.Var(&encoders, \"enc\", \"Encoders for keywords, eg. 'FUZZ:urlencode b64encode'\")\n\tflag.Usage = Usage\n\tflag.Parse()\n\n\topts.General.AutoCalibrationStrings = autocalibrationstrings\n\tif len(autocalibrationstrategies) > 0 {\n\t\topts.General.AutoCalibrationStrategies = []string{}\n\t\tfor _, strategy := range autocalibrationstrategies {\n\t\t\topts.General.AutoCalibrationStrategies = append(opts.General.AutoCalibrationStrategies, strings.Split(strategy, \",\")...)\n\t\t}\n\t}\n\topts.HTTP.Cookies = cookies\n\topts.HTTP.Headers = headers\n\topts.Input.Inputcommands = inputcommands\n\topts.Input.Wordlists = wordlists\n\topts.Input.Encoders = encoders\n\treturn opts\n}\n\nfunc main() {\n\n\tvar err, optserr error\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\t// prepare the default config options from default config file\n\tvar opts *ffuf.ConfigOptions\n\topts, optserr = ffuf.ReadDefaultConfig()\n\n\topts = ParseFlags(opts)\n\n\t// Handle searchhash functionality and exit\n\tif opts.General.Searchhash != \"\" {\n\t\tcoptions, pos, err := ffuf.SearchHash(opts.General.Searchhash)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"[ERR] %s\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif len(coptions) > 0 {\n\t\t\tfmt.Printf(\"Request candidate(s) for hash %s\\n\", opts.General.Searchhash)\n\t\t}\n\t\tfor _, copt := range coptions {\n\t\t\tconf, err := ffuf.ConfigFromOptions(&copt.ConfigOptions, ctx, cancel)\n\t\t\tif err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tok, reason := ffuf.HistoryReplayable(conf)\n\t\t\tif ok {\n\t\t\t\tprintSearchResults(conf, pos, copt.Time, opts.General.Searchhash)\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"[ERR] Hash cannot be mapped back because %s\\n\", reason)\n\t\t\t}\n\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"[ERR] %s\\n\", err)\n\t\t}\n\t\tos.Exit(0)\n\t}\n\n\tif opts.General.ShowVersion {\n\t\tfmt.Printf(\"ffuf version: %s\\n\", ffuf.Version())\n\t\tos.Exit(0)\n\t}\n\tif len(opts.Output.DebugLog) != 0 {\n\t\tf, err := os.OpenFile(opts.Output.DebugLog, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Disabling logging, encountered error(s): %s\\n\", err)\n\t\t\tlog.SetOutput(io.Discard)\n\t\t} else {\n\t\t\tlog.SetOutput(f)\n\t\t\tdefer f.Close()\n\t\t}\n\t} else {\n\t\tlog.SetOutput(io.Discard)\n\t}\n\tif optserr != nil {\n\t\tlog.Printf(\"Error while opening default config file: %s\", optserr)\n\t}\n\n\tif opts.General.ConfigFile != \"\" {\n\t\topts, err = ffuf.ReadConfig(opts.General.ConfigFile)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Encoutered error(s): %s\\n\", err)\n\t\t\tUsage()\n\t\t\tfmt.Fprintf(os.Stderr, \"Encoutered error(s): %s\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\t// Reset the flag package state\n\t\tflag.CommandLine = flag.NewFlagSet(os.Args[0], flag.ExitOnError)\n\t\t// Re-parse the cli options\n\t\topts = ParseFlags(opts)\n\t}\n\n\t// Set up Config struct\n\tconf, err := ffuf.ConfigFromOptions(opts, ctx, cancel)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Encountered error(s): %s\\n\", err)\n\t\tUsage()\n\t\tfmt.Fprintf(os.Stderr, \"Encountered error(s): %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tjob, err := prepareJob(conf)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Encountered error(s): %s\\n\", err)\n\t\tUsage()\n\t\tfmt.Fprintf(os.Stderr, \"Encountered error(s): %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tif err := SetupFilters(opts, conf); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Encountered error(s): %s\\n\", err)\n\t\tUsage()\n\t\tfmt.Fprintf(os.Stderr, \"Encountered error(s): %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tif !conf.Noninteractive {\n\t\tgo func() {\n\t\t\terr := interactive.Handle(job)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Error while trying to initialize interactive session: %s\", err)\n\t\t\t}\n\t\t}()\n\t}\n\n\t// Job handles waiting for goroutines to complete itself\n\tjob.Start()\n}\n\nfunc prepareJob(conf *ffuf.Config) (*ffuf.Job, error) {\n\tvar err error\n\tjob := ffuf.NewJob(conf)\n\tvar errs ffuf.Multierror\n\tjob.Input, errs = input.NewInputProvider(conf)\n\t// TODO: implement error handling for runnerprovider and outputprovider\n\t// We only have http runner right now\n\tjob.Runner = runner.NewRunnerByName(\"http\", conf, false)\n\tif len(conf.ReplayProxyURL) > 0 {\n\t\tjob.ReplayRunner = runner.NewRunnerByName(\"http\", conf, true)\n\t}\n\t// We only have stdout outputprovider right now\n\tjob.Output = output.NewOutputProviderByName(\"stdout\", conf)\n\n\t// Initialize scraper\n\tnewscraper, scraper_err := scraper.FromDir(ffuf.SCRAPERDIR, conf.Scrapers)\n\tif scraper_err.ErrorOrNil() != nil {\n\t\terrs.Add(scraper_err.ErrorOrNil())\n\t}\n\tjob.Scraper = newscraper\n\tif conf.ScraperFile != \"\" {\n\t\terr = job.Scraper.AppendFromFile(conf.ScraperFile)\n\t\tif err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\treturn job, errs.ErrorOrNil()\n}\n\nfunc SetupFilters(parseOpts *ffuf.ConfigOptions, conf *ffuf.Config) error {\n\terrs := ffuf.NewMultierror()\n\tconf.MatcherManager = filter.NewMatcherManager()\n\t// If any other matcher is set, ignore -mc default value\n\tmatcherSet := false\n\tstatusSet := false\n\twarningIgnoreBody := false\n\tflag.Visit(func(f *flag.Flag) {\n\t\tif f.Name == \"mc\" {\n\t\t\tstatusSet = true\n\t\t}\n\t\tif f.Name == \"ms\" {\n\t\t\tmatcherSet = true\n\t\t\twarningIgnoreBody = true\n\t\t}\n\t\tif f.Name == \"ml\" {\n\t\t\tmatcherSet = true\n\t\t\twarningIgnoreBody = true\n\t\t}\n\t\tif f.Name == \"mr\" {\n\t\t\tmatcherSet = true\n\t\t}\n\t\tif f.Name == \"mt\" {\n\t\t\tmatcherSet = true\n\t\t}\n\t\tif f.Name == \"mw\" {\n\t\t\tmatcherSet = true\n\t\t\twarningIgnoreBody = true\n\t\t}\n\t})\n\t// Only set default matchers if no\n\tif statusSet || !matcherSet {\n\t\tif err := conf.MatcherManager.AddMatcher(\"status\", parseOpts.Matcher.Status); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\n\tif parseOpts.Filter.Status != \"\" {\n\t\tif err := conf.MatcherManager.AddFilter(\"status\", parseOpts.Filter.Status, false); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif parseOpts.Filter.Size != \"\" {\n\t\twarningIgnoreBody = true\n\t\tif err := conf.MatcherManager.AddFilter(\"size\", parseOpts.Filter.Size, false); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif parseOpts.Filter.Regexp != \"\" {\n\t\tif err := conf.MatcherManager.AddFilter(\"regexp\", parseOpts.Filter.Regexp, false); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif parseOpts.Filter.Words != \"\" {\n\t\twarningIgnoreBody = true\n\t\tif err := conf.MatcherManager.AddFilter(\"word\", parseOpts.Filter.Words, false); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif parseOpts.Filter.Lines != \"\" {\n\t\twarningIgnoreBody = true\n\t\tif err := conf.MatcherManager.AddFilter(\"line\", parseOpts.Filter.Lines, false); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif parseOpts.Filter.Time != \"\" {\n\t\tif err := conf.MatcherManager.AddFilter(\"time\", parseOpts.Filter.Time, false); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif parseOpts.Matcher.Size != \"\" {\n\t\tif err := conf.MatcherManager.AddMatcher(\"size\", parseOpts.Matcher.Size); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif parseOpts.Matcher.Regexp != \"\" {\n\t\tif err := conf.MatcherManager.AddMatcher(\"regexp\", parseOpts.Matcher.Regexp); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif parseOpts.Matcher.Words != \"\" {\n\t\tif err := conf.MatcherManager.AddMatcher(\"word\", parseOpts.Matcher.Words); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif parseOpts.Matcher.Lines != \"\" {\n\t\tif err := conf.MatcherManager.AddMatcher(\"line\", parseOpts.Matcher.Lines); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif parseOpts.Matcher.Time != \"\" {\n\t\tif err := conf.MatcherManager.AddMatcher(\"time\", parseOpts.Matcher.Time); err != nil {\n\t\t\terrs.Add(err)\n\t\t}\n\t}\n\tif conf.IgnoreBody && warningIgnoreBody {\n\t\tfmt.Printf(\"*** Warning: possible undesired combination of -ignore-body and the response options: fl,fs,fw,ml,ms and mw.\\n\")\n\t}\n\treturn errs.ErrorOrNil()\n}\n\nfunc printSearchResults(conf *ffuf.Config, pos int, exectime time.Time, hash string) {\n\tinp, err := input.NewInputProvider(conf)\n\tif err.ErrorOrNil() != nil {\n\t\tfmt.Printf(\"-------------------------------------------\\n\")\n\t\tfmt.Println(\"Encountered error that prevents reproduction of the request:\")\n\t\tfmt.Println(err.ErrorOrNil())\n\t\treturn\n\t}\n\tinp.SetPosition(pos)\n\tinputdata := inp.Value()\n\tinputdata[\"FFUFHASH\"] = []byte(hash)\n\tbasereq := ffuf.BaseRequest(conf)\n\tdummyrunner := runner.NewRunnerByName(\"simple\", conf, false)\n\tffufreq, _ := dummyrunner.Prepare(inputdata, &basereq)\n\trawreq, _ := dummyrunner.Dump(&ffufreq)\n\tfmt.Printf(\"-------------------------------------------\\n\")\n\tfmt.Printf(\"ffuf job started at: %s\\n\\n\", exectime.Format(time.RFC3339))\n\tfmt.Printf(\"%s\\n\", string(rawreq))\n}\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}