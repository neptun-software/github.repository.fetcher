{
  "metadata": {
    "timestamp": 1736567996536,
    "page": 131,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jpillora/chisel",
      "stars": 14005,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3173828125,
          "content": "dist/\n*.swp\n.idea/\nchisel\nbin/\nrelease/\ntmp/\n*.orig\ndebug\n\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0634765625,
          "content": "MIT License\n\nCopyright (c) 2024 Jaime Pillora <dev@jpillora.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.67578125,
          "content": "VERSION=$(shell git describe --abbrev=0 --tags)\nBUILD=$(shell git rev-parse HEAD)\nDIRBASE=./build\nDIR=${DIRBASE}/${VERSION}/${BUILD}/bin\n\nLDFLAGS=-ldflags \"-s -w ${XBUILD} -buildid=${BUILD} -X github.com/jpillora/chisel/share.BuildVersion=${VERSION}\"\n\nGOFILES=`go list ./...`\nGOFILESNOTEST=`go list ./... | grep -v test`\n\n# Make Directory to store executables\n$(shell mkdir -p ${DIR})\n\nall:\n\t@goreleaser build --skip-validate --single-target --config .github/goreleaser.yml\n\nfreebsd: lint\n\tenv CGO_ENABLED=0 GOOS=freebsd GOARCH=amd64 go build -trimpath ${LDFLAGS} ${GCFLAGS} ${ASMFLAGS} -o ${DIR}/chisel-freebsd_amd64 .\n\nlinux: lint\n\tenv CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -trimpath ${LDFLAGS} ${GCFLAGS} ${ASMFLAGS} -o ${DIR}/chisel-linux_amd64 .\n\nwindows: lint\n\tenv CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build -trimpath ${LDFLAGS} ${GCFLAGS} ${ASMFLAGS} -o ${DIR}/chisel-windows_amd64 .\n\ndarwin:\n\tenv CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -trimpath ${LDFLAGS} ${GCFLAGS} ${ASMFLAGS} -o ${DIR}/chisel-darwin_amd64 .\n\ndocker:\n\t@docker build .\n\ndep: ## Get the dependencies\n\t@go get -u github.com/goreleaser/goreleaser\n\t@go get -u github.com/boumenot/gocover-cobertura\n\t@go get -v -d ./...\n\t@go get -u all\n\t@go mod tidy\n\nlint: ## Lint the files\n\t@go fmt ${GOFILES}\n\t@go vet ${GOFILESNOTEST}\n\ntest: ## Run unit tests\n\t@go test -coverprofile=${DIR}/coverage.out -race -short ${GOFILESNOTEST}\n\t@go tool cover -html=${DIR}/coverage.out -o ${DIR}/coverage.html\n\t@gocover-cobertura < ${DIR}/coverage.out > ${DIR}/coverage.xml\n\nrelease: lint test\n\tgoreleaser release --config .github/goreleaser.yml\n\nclean:\n\trm -rf ${DIRBASE}/*\n\n.PHONY: all freebsd linux windows docker dep lint test release clean"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.22265625,
          "content": "# Chisel\n\n[![GoDoc](https://godoc.org/github.com/jpillora/chisel?status.svg)](https://godoc.org/github.com/jpillora/chisel) [![CI](https://github.com/jpillora/chisel/workflows/CI/badge.svg)](https://github.com/jpillora/chisel/actions?workflow=CI)\n\nChisel is a fast TCP/UDP tunnel, transported over HTTP, secured via SSH. Single executable including both client and server. Written in Go (golang). Chisel is mainly useful for passing through firewalls, though it can also be used to provide a secure endpoint into your network.\n\n![overview](https://docs.google.com/drawings/d/1p53VWxzGNfy8rjr-mW8pvisJmhkoLl82vAgctO_6f1w/pub?w=960&h=720)\n\n## Table of Contents\n\n- [Features](#features)\n- [Install](#install)\n- [Demo](#demo)\n- [Usage](#usage)\n- [Contributing](#contributing)\n- [Changelog](#changelog)\n- [License](#license)\n\n## Features\n\n- Easy to use\n- [Performant](./test/bench/perf.md)\\*\n- [Encrypted connections](#security) using the SSH protocol (via `crypto/ssh`)\n- [Authenticated connections](#authentication); authenticated client connections with a users config file, authenticated server connections with fingerprint matching.\n- Client auto-reconnects with [exponential backoff](https://github.com/jpillora/backoff)\n- Clients can create multiple tunnel endpoints over one TCP connection\n- Clients can optionally pass through SOCKS or HTTP CONNECT proxies\n- Reverse port forwarding (Connections go through the server and out the client)\n- Server optionally doubles as a [reverse proxy](http://golang.org/pkg/net/http/httputil/#NewSingleHostReverseProxy)\n- Server optionally allows [SOCKS5](https://en.wikipedia.org/wiki/SOCKS) connections (See [guide below](#socks5-guide))\n- Clients optionally allow [SOCKS5](https://en.wikipedia.org/wiki/SOCKS) connections from a reversed port forward\n- Client connections over stdio which supports `ssh -o ProxyCommand` providing SSH over HTTP\n\n## Install\n\n### Binaries\n\n[![Releases](https://img.shields.io/github/release/jpillora/chisel.svg)](https://github.com/jpillora/chisel/releases) [![Releases](https://img.shields.io/github/downloads/jpillora/chisel/total.svg)](https://github.com/jpillora/chisel/releases)\n\nSee [the latest release](https://github.com/jpillora/chisel/releases/latest) or download and install it now with `curl https://i.jpillora.com/chisel! | bash`\n\n### Docker\n\n[![Docker Pulls](https://img.shields.io/docker/pulls/jpillora/chisel.svg)](https://hub.docker.com/r/jpillora/chisel/) [![Image Size](https://img.shields.io/docker/image-size/jpillora/chisel/latest)](https://microbadger.com/images/jpillora/chisel)\n\n```sh\ndocker run --rm -it jpillora/chisel --help\n```\n\n### Fedora\n\nThe package is maintained by the Fedora community. If you encounter issues related to the usage of the RPM, please use this [issue tracker](https://bugzilla.redhat.com/buglist.cgi?bug_status=NEW&bug_status=ASSIGNED&classification=Fedora&component=chisel&list_id=11614537&product=Fedora&product=Fedora%20EPEL).\n\n```sh\nsudo dnf -y install chisel\n```\n\n### Source\n\n```sh\n$ go install github.com/jpillora/chisel@latest\n```\n\n## Demo\n\nA [demo app](https://chisel-demo.herokuapp.com) on Heroku is running this `chisel server`:\n\n```sh\n$ chisel server --port $PORT --proxy http://example.com\n# listens on $PORT, proxy web requests to http://example.com\n```\n\nThis demo app is also running a [simple file server](https://www.npmjs.com/package/serve) on `:3000`, which is normally inaccessible due to Heroku's firewall. However, if we tunnel in with:\n\n```sh\n$ chisel client https://chisel-demo.herokuapp.com 3000\n# connects to chisel server at https://chisel-demo.herokuapp.com,\n# tunnels your localhost:3000 to the server's localhost:3000\n```\n\nand then visit [localhost:3000](http://localhost:3000/), we should see a directory listing. Also, if we visit the [demo app](https://chisel-demo.herokuapp.com) in the browser we should hit the server's default proxy and see a copy of [example.com](http://example.com).\n\n## Usage\n\n<!-- render these help texts by hand,\n  or use https://github.com/jpillora/md-tmpl\n    with $ md-tmpl -w README.md -->\n\n<!--tmpl,code=plain:echo \"$ chisel --help\" && go run main.go --help | sed 's#0.0.0-src (go1\\..*)#X.Y.Z#' -->\n``` plain \n$ chisel --help\n\n  Usage: chisel [command] [--help]\n\n  Version: X.Y.Z\n\n  Commands:\n    server - runs chisel in server mode\n    client - runs chisel in client mode\n\n  Read more:\n    https://github.com/jpillora/chisel\n\n```\n<!--/tmpl-->\n\n\n<!--tmpl,code=plain:echo \"$ chisel server --help\" && go run main.go server --help | cat | sed 's#0.0.0-src (go1\\..*)#X.Y.Z#' -->\n``` plain \n$ chisel server --help\n\n  Usage: chisel server [options]\n\n  Options:\n\n    --host, Defines the HTTP listening host â€“ the network interface\n    (defaults the environment variable HOST and falls back to 0.0.0.0).\n\n    --port, -p, Defines the HTTP listening port (defaults to the environment\n    variable PORT and fallsback to port 8080).\n\n    --key, (deprecated use --keygen and --keyfile instead)\n    An optional string to seed the generation of a ECDSA public\n    and private key pair. All communications will be secured using this\n    key pair. Share the subsequent fingerprint with clients to enable detection\n    of man-in-the-middle attacks (defaults to the CHISEL_KEY environment\n    variable, otherwise a new key is generate each run).\n\n    --keygen, A path to write a newly generated PEM-encoded SSH private key file.\n    If users depend on your --key fingerprint, you may also include your --key to\n    output your existing key. Use - (dash) to output the generated key to stdout.\n\n    --keyfile, An optional path to a PEM-encoded SSH private key. When\n    this flag is set, the --key option is ignored, and the provided private key\n    is used to secure all communications. (defaults to the CHISEL_KEY_FILE\n    environment variable). Since ECDSA keys are short, you may also set keyfile\n    to an inline base64 private key (e.g. chisel server --keygen - | base64).\n\n    --authfile, An optional path to a users.json file. This file should\n    be an object with users defined like:\n      {\n        \"<user:pass>\": [\"<addr-regex>\",\"<addr-regex>\"]\n      }\n    when <user> connects, their <pass> will be verified and then\n    each of the remote addresses will be compared against the list\n    of address regular expressions for a match. Addresses will\n    always come in the form \"<remote-host>:<remote-port>\" for normal remotes\n    and \"R:<local-interface>:<local-port>\" for reverse port forwarding\n    remotes. This file will be automatically reloaded on change.\n\n    --auth, An optional string representing a single user with full\n    access, in the form of <user:pass>. It is equivalent to creating an\n    authfile with {\"<user:pass>\": [\"\"]}. If unset, it will use the\n    environment variable AUTH.\n\n    --keepalive, An optional keepalive interval. Since the underlying\n    transport is HTTP, in many instances we'll be traversing through\n    proxies, often these proxies will close idle connections. You must\n    specify a time with a unit, for example '5s' or '2m'. Defaults\n    to '25s' (set to 0s to disable).\n\n    --backend, Specifies another HTTP server to proxy requests to when\n    chisel receives a normal HTTP request. Useful for hiding chisel in\n    plain sight.\n\n    --socks5, Allow clients to access the internal SOCKS5 proxy. See\n    chisel client --help for more information.\n\n    --reverse, Allow clients to specify reverse port forwarding remotes\n    in addition to normal remotes.\n\n    --tls-key, Enables TLS and provides optional path to a PEM-encoded\n    TLS private key. When this flag is set, you must also set --tls-cert,\n    and you cannot set --tls-domain.\n\n    --tls-cert, Enables TLS and provides optional path to a PEM-encoded\n    TLS certificate. When this flag is set, you must also set --tls-key,\n    and you cannot set --tls-domain.\n\n    --tls-domain, Enables TLS and automatically acquires a TLS key and\n    certificate using LetsEncrypt. Setting --tls-domain requires port 443.\n    You may specify multiple --tls-domain flags to serve multiple domains.\n    The resulting files are cached in the \"$HOME/.cache/chisel\" directory.\n    You can modify this path by setting the CHISEL_LE_CACHE variable,\n    or disable caching by setting this variable to \"-\". You can optionally\n    provide a certificate notification email by setting CHISEL_LE_EMAIL.\n\n    --tls-ca, a path to a PEM encoded CA certificate bundle or a directory\n    holding multiple PEM encode CA certificate bundle files, which is used to \n    validate client connections. The provided CA certificates will be used \n    instead of the system roots. This is commonly used to implement mutual-TLS. \n\n    --pid Generate pid file in current working directory\n\n    -v, Enable verbose logging\n\n    --help, This help text\n\n  Signals:\n    The chisel process is listening for:\n      a SIGUSR2 to print process stats, and\n      a SIGHUP to short-circuit the client reconnect timer\n\n  Version:\n    X.Y.Z\n\n  Read more:\n    https://github.com/jpillora/chisel\n\n```\n<!--/tmpl-->\n\n\n<!--tmpl,code=plain:echo \"$ chisel client --help\" && go run main.go client --help | sed 's#0.0.0-src (go1\\..*)#X.Y.Z#' -->\n``` plain \n$ chisel client --help\n\n  Usage: chisel client [options] <server> <remote> [remote] [remote] ...\n\n  <server> is the URL to the chisel server.\n\n  <remote>s are remote connections tunneled through the server, each of\n  which come in the form:\n\n    <local-host>:<local-port>:<remote-host>:<remote-port>/<protocol>\n\n    â–  local-host defaults to 0.0.0.0 (all interfaces).\n    â–  local-port defaults to remote-port.\n    â–  remote-port is required*.\n    â–  remote-host defaults to 0.0.0.0 (server localhost).\n    â–  protocol defaults to tcp.\n\n  which shares <remote-host>:<remote-port> from the server to the client\n  as <local-host>:<local-port>, or:\n\n    R:<local-interface>:<local-port>:<remote-host>:<remote-port>/<protocol>\n\n  which does reverse port forwarding, sharing <remote-host>:<remote-port>\n  from the client to the server's <local-interface>:<local-port>.\n\n    example remotes\n\n      3000\n      example.com:3000\n      3000:google.com:80\n      192.168.0.5:3000:google.com:80\n      socks\n      5000:socks\n      R:2222:localhost:22\n      R:socks\n      R:5000:socks\n      stdio:example.com:22\n      1.1.1.1:53/udp\n\n    When the chisel server has --socks5 enabled, remotes can\n    specify \"socks\" in place of remote-host and remote-port.\n    The default local host and port for a \"socks\" remote is\n    127.0.0.1:1080. Connections to this remote will terminate\n    at the server's internal SOCKS5 proxy.\n\n    When the chisel server has --reverse enabled, remotes can\n    be prefixed with R to denote that they are reversed. That\n    is, the server will listen and accept connections, and they\n    will be proxied through the client which specified the remote.\n    Reverse remotes specifying \"R:socks\" will listen on the server's\n    default socks port (1080) and terminate the connection at the\n    client's internal SOCKS5 proxy.\n\n    When stdio is used as local-host, the tunnel will connect standard\n    input/output of this program with the remote. This is useful when \n    combined with ssh ProxyCommand. You can use\n      ssh -o ProxyCommand='chisel client chiselserver stdio:%h:%p' \\\n          user@example.com\n    to connect to an SSH server through the tunnel.\n\n  Options:\n\n    --fingerprint, A *strongly recommended* fingerprint string\n    to perform host-key validation against the server's public key.\n\tFingerprint mismatches will close the connection.\n\tFingerprints are generated by hashing the ECDSA public key using\n\tSHA256 and encoding the result in base64.\n\tFingerprints must be 44 characters containing a trailing equals (=).\n\n    --auth, An optional username and password (client authentication)\n    in the form: \"<user>:<pass>\". These credentials are compared to\n    the credentials inside the server's --authfile. defaults to the\n    AUTH environment variable.\n\n    --keepalive, An optional keepalive interval. Since the underlying\n    transport is HTTP, in many instances we'll be traversing through\n    proxies, often these proxies will close idle connections. You must\n    specify a time with a unit, for example '5s' or '2m'. Defaults\n    to '25s' (set to 0s to disable).\n\n    --max-retry-count, Maximum number of times to retry before exiting.\n    Defaults to unlimited.\n\n    --max-retry-interval, Maximum wait time before retrying after a\n    disconnection. Defaults to 5 minutes.\n\n    --proxy, An optional HTTP CONNECT or SOCKS5 proxy which will be\n    used to reach the chisel server. Authentication can be specified\n    inside the URL.\n    For example, http://admin:password@my-server.com:8081\n            or: socks://admin:password@my-server.com:1080\n\n    --header, Set a custom header in the form \"HeaderName: HeaderContent\".\n    Can be used multiple times. (e.g --header \"Foo: Bar\" --header \"Hello: World\")\n\n    --hostname, Optionally set the 'Host' header (defaults to the host\n    found in the server url).\n\n    --sni, Override the ServerName when using TLS (defaults to the \n    hostname).\n\n    --tls-ca, An optional root certificate bundle used to verify the\n    chisel server. Only valid when connecting to the server with\n    \"https\" or \"wss\". By default, the operating system CAs will be used.\n\n    --tls-skip-verify, Skip server TLS certificate verification of\n    chain and host name (if TLS is used for transport connections to\n    server). If set, client accepts any TLS certificate presented by\n    the server and any host name in that certificate. This only affects\n    transport https (wss) connection. Chisel server's public key\n    may be still verified (see --fingerprint) after inner connection\n    is established.\n\n    --tls-key, a path to a PEM encoded private key used for client \n    authentication (mutual-TLS).\n\n    --tls-cert, a path to a PEM encoded certificate matching the provided \n    private key. The certificate must have client authentication \n    enabled (mutual-TLS).\n\n    --pid Generate pid file in current working directory\n\n    -v, Enable verbose logging\n\n    --help, This help text\n\n  Signals:\n    The chisel process is listening for:\n      a SIGUSR2 to print process stats, and\n      a SIGHUP to short-circuit the client reconnect timer\n\n  Version:\n    X.Y.Z\n\n  Read more:\n    https://github.com/jpillora/chisel\n\n```\n<!--/tmpl-->\n\n### Security\n\nEncryption is always enabled. When you start up a chisel server, it will generate an in-memory ECDSA public/private key pair. The public key fingerprint (base64 encoded SHA256) will be displayed as the server starts. Instead of generating a random key, the server may optionally specify a key file, using the `--keyfile` option. When clients connect, they will also display the server's public key fingerprint. The client can force a particular fingerprint using the `--fingerprint` option. See the `--help` above for more information.\n\n### Authentication\n\nUsing the `--authfile` option, the server may optionally provide a `user.json` configuration file to create a list of accepted users. The client then authenticates using the `--auth` option. See [users.json](example/users.json) for an example authentication configuration file. See the `--help` above for more information.\n\nInternally, this is done using the _Password_ authentication method provided by SSH. Learn more about `crypto/ssh` here http://blog.gopheracademy.com/go-and-ssh/.\n\n### SOCKS5 Guide with Docker\n\n1. Print a new private key to the terminal\n\n    ```sh\n    chisel server --keygen -\n    # or save it to disk --keygen /path/to/mykey\n    ```\n\n1. Start your chisel server\n\n    ```sh\n    jpillora/chisel server --keyfile '<ck-base64 string or file path>' -p 9312 --socks5\n    ```\n\n1. Connect your chisel client (using server's fingerprint)\n\n    ```sh\n    chisel client --fingerprint '<see server output>' <server-address>:9312 socks\n    ```\n\n1. Point your SOCKS5 clients (e.g. OS/Browser) to:\n\n    ```\n    <client-address>:1080\n    ```\n\n1. Now you have an encrypted, authenticated SOCKS5 connection over HTTP\n\n\n#### Caveats\n\nSince WebSockets support is required:\n\n- IaaS providers all will support WebSockets (unless an unsupporting HTTP proxy has been forced in front of you, in which case I'd argue that you've been downgraded to PaaS)\n- PaaS providers vary in their support for WebSockets\n  - Heroku has full support\n  - Openshift has full support though connections are only accepted on ports 8443 and 8080\n  - Google App Engine has **no** support (Track this on [their repo](https://code.google.com/p/googleappengine/issues/detail?id=2535))\n\n## Contributing\n\n- http://golang.org/doc/code.html\n- http://golang.org/doc/effective_go.html\n- `github.com/jpillora/chisel/share` contains the shared package\n- `github.com/jpillora/chisel/server` contains the server package\n- `github.com/jpillora/chisel/client` contains the client package\n\n## Changelog\n\n- `1.0` - Initial release\n- `1.1` - Replaced simple symmetric encryption for ECDSA SSH\n- `1.2` - Added SOCKS5 (server) and HTTP CONNECT (client) support\n- `1.3` - Added reverse tunnelling support\n- `1.4` - Added arbitrary HTTP header support\n- `1.5` - Added reverse SOCKS support (by @aus)\n- `1.6` - Added client stdio support (by @BoleynSu)\n- `1.7` - Added UDP support\n- `1.8` - Move to a `scratch`Docker image\n- `1.9` - Bump to Go 1.21. Switch from `--key` seed to P256 key strings with `--key{gen,file}` (by @cmenginnz)\n- `1.10` - Bump to Go 1.22. Add `.rpm` `.deb` and `.akp` to releases. Fix bad version comparison.\n\n## License\n\n[MIT](https://github.com/jpillora/chisel/blob/master/LICENSE) Â© Jaime Pillora\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.658203125,
          "content": "module github.com/jpillora/chisel\n\ngo 1.21\n\nrequire (\n\tgithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5\n\tgithub.com/fsnotify/fsnotify v1.6.0\n\tgithub.com/gorilla/websocket v1.5.0\n\tgithub.com/jpillora/backoff v1.0.0\n\tgithub.com/jpillora/requestlog v1.0.0\n\tgithub.com/jpillora/sizestr v1.0.0\n\tgolang.org/x/crypto v0.16.0\n\tgolang.org/x/net v0.14.0\n\tgolang.org/x/sync v0.5.0\n)\n\nrequire (\n\tgithub.com/andrew-d/go-termutil v0.0.0-20150726205930-009166a695a2 // indirect\n\tgithub.com/jpillora/ansi v1.0.3 // indirect\n\tgithub.com/tomasen/realip v0.0.0-20180522021738-f0c99a92ddce // indirect\n\tgolang.org/x/sys v0.15.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 2.701171875,
          "content": "github.com/andrew-d/go-termutil v0.0.0-20150726205930-009166a695a2 h1:axBiC50cNZOs7ygH5BgQp4N+aYrZ2DNpWZ1KG3VOSOM=\ngithub.com/andrew-d/go-termutil v0.0.0-20150726205930-009166a695a2/go.mod h1:jnzFpU88PccN/tPPhCpnNU8mZphvKxYM9lLNkd8e+os=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5 h1:0CwZNZbxp69SHPdPJAN/hZIm0C4OItdklCFmMRWYpio=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=\ngithub.com/fsnotify/fsnotify v1.6.0 h1:n+5WquG0fcWoWp6xPWfHdbskMCQaFnG6PfBrh1Ky4HY=\ngithub.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=\ngithub.com/gorilla/websocket v1.5.0 h1:PPwGk2jz7EePpoHN/+ClbZu8SPxiqlu12wZP/3sWmnc=\ngithub.com/gorilla/websocket v1.5.0/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/jpillora/ansi v1.0.3 h1:nn4Jzti0EmRfDxm7JtEs5LzCbNwd5sv+0aE+LdS9/ZQ=\ngithub.com/jpillora/ansi v1.0.3/go.mod h1:D2tT+6uzJvN1nBVQILYWkIdq7zG+b5gcFN5WI/VyjMY=\ngithub.com/jpillora/backoff v1.0.0 h1:uvFg412JmmHBHw7iwprIxkPMI+sGQ4kzOWsMeHnm2EA=\ngithub.com/jpillora/backoff v1.0.0/go.mod h1:J/6gKK9jxlEcS3zixgDgUAsiuZ7yrSoa/FX5e0EB2j4=\ngithub.com/jpillora/requestlog v1.0.0 h1:bg++eJ74T7DYL3DlIpiwknrtfdUA9oP/M4fL+PpqnyA=\ngithub.com/jpillora/requestlog v1.0.0/go.mod h1:HTWQb7QfDc2jtHnWe2XEIEeJB7gJPnVdpNn52HXPvy8=\ngithub.com/jpillora/sizestr v1.0.0 h1:4tr0FLxs1Mtq3TnsLDV+GYUWG7Q26a6s+tV5Zfw2ygw=\ngithub.com/jpillora/sizestr v1.0.0/go.mod h1:bUhLv4ctkknatr6gR42qPxirmd5+ds1u7mzD+MZ33f0=\ngithub.com/tomasen/realip v0.0.0-20180522021738-f0c99a92ddce h1:fb190+cK2Xz/dvi9Hv8eCYJYvIGUTN2/KLq1pT6CjEc=\ngithub.com/tomasen/realip v0.0.0-20180522021738-f0c99a92ddce/go.mod h1:o8v6yHRoik09Xen7gje4m9ERNah1d1PPsVq1VEx9vE4=\ngolang.org/x/crypto v0.16.0 h1:mMMrFzRSCF0GvB7Ne27XVtVAaXLrPmgPC7/v0tkwHaY=\ngolang.org/x/crypto v0.16.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=\ngolang.org/x/net v0.14.0 h1:BONx9s002vGdD9umnlX1Po8vOZmrgH34qlHcD1MfK14=\ngolang.org/x/net v0.14.0/go.mod h1:PpSgVXXLK0OxS0F31C1/tv6XNguvCrnXIDrFMspZIUI=\ngolang.org/x/sync v0.5.0 h1:60k92dhOjHxJkrqnwsfl8KuaHbn/5dl0lUPUklKo3qE=\ngolang.org/x/sync v0.5.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.15.0 h1:h48lPFYpsTvQJZF4EKyI4aLHaev3CxivZmv7yZig9pc=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.15.0 h1:y/Oo/a/q3IXu26lQgl04j/gjuBDOBlx7X6Om1j2CPW4=\ngolang.org/x/term v0.15.0/go.mod h1:BDl952bC7+uMoWR75FIrCDx79TPU9oHkTZ9yRbYOrX0=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 15.142578125,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\tchclient \"github.com/jpillora/chisel/client\"\n\tchserver \"github.com/jpillora/chisel/server\"\n\tchshare \"github.com/jpillora/chisel/share\"\n\t\"github.com/jpillora/chisel/share/ccrypto\"\n\t\"github.com/jpillora/chisel/share/cos\"\n\t\"github.com/jpillora/chisel/share/settings\"\n)\n\nvar help = `\n  Usage: chisel [command] [--help]\n\n  Version: ` + chshare.BuildVersion + ` (` + runtime.Version() + `)\n\n  Commands:\n    server - runs chisel in server mode\n    client - runs chisel in client mode\n\n  Read more:\n    https://github.com/jpillora/chisel\n\n`\n\nfunc main() {\n\n\tversion := flag.Bool(\"version\", false, \"\")\n\tv := flag.Bool(\"v\", false, \"\")\n\tflag.Bool(\"help\", false, \"\")\n\tflag.Bool(\"h\", false, \"\")\n\tflag.Usage = func() {}\n\tflag.Parse()\n\n\tif *version || *v {\n\t\tfmt.Println(chshare.BuildVersion)\n\t\tos.Exit(0)\n\t}\n\n\targs := flag.Args()\n\n\tsubcmd := \"\"\n\tif len(args) > 0 {\n\t\tsubcmd = args[0]\n\t\targs = args[1:]\n\t}\n\n\tswitch subcmd {\n\tcase \"server\":\n\t\tserver(args)\n\tcase \"client\":\n\t\tclient(args)\n\tdefault:\n\t\tfmt.Print(help)\n\t\tos.Exit(0)\n\t}\n}\n\nvar commonHelp = `\n    --pid Generate pid file in current working directory\n\n    -v, Enable verbose logging\n\n    --help, This help text\n\n  Signals:\n    The chisel process is listening for:\n      a SIGUSR2 to print process stats, and\n      a SIGHUP to short-circuit the client reconnect timer\n\n  Version:\n    ` + chshare.BuildVersion + ` (` + runtime.Version() + `)\n\n  Read more:\n    https://github.com/jpillora/chisel\n\n`\n\nfunc generatePidFile() {\n\tpid := []byte(strconv.Itoa(os.Getpid()))\n\tif err := os.WriteFile(\"chisel.pid\", pid, 0644); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nvar serverHelp = `\n  Usage: chisel server [options]\n\n  Options:\n\n    --host, Defines the HTTP listening host â€“ the network interface\n    (defaults the environment variable HOST and falls back to 0.0.0.0).\n\n    --port, -p, Defines the HTTP listening port (defaults to the environment\n    variable PORT and fallsback to port 8080).\n\n    --key, (deprecated use --keygen and --keyfile instead)\n    An optional string to seed the generation of a ECDSA public\n    and private key pair. All communications will be secured using this\n    key pair. Share the subsequent fingerprint with clients to enable detection\n    of man-in-the-middle attacks (defaults to the CHISEL_KEY environment\n    variable, otherwise a new key is generate each run).\n\n    --keygen, A path to write a newly generated PEM-encoded SSH private key file.\n    If users depend on your --key fingerprint, you may also include your --key to\n    output your existing key. Use - (dash) to output the generated key to stdout.\n\n    --keyfile, An optional path to a PEM-encoded SSH private key. When\n    this flag is set, the --key option is ignored, and the provided private key\n    is used to secure all communications. (defaults to the CHISEL_KEY_FILE\n    environment variable). Since ECDSA keys are short, you may also set keyfile\n    to an inline base64 private key (e.g. chisel server --keygen - | base64).\n\n    --authfile, An optional path to a users.json file. This file should\n    be an object with users defined like:\n      {\n        \"<user:pass>\": [\"<addr-regex>\",\"<addr-regex>\"]\n      }\n    when <user> connects, their <pass> will be verified and then\n    each of the remote addresses will be compared against the list\n    of address regular expressions for a match. Addresses will\n    always come in the form \"<remote-host>:<remote-port>\" for normal remotes\n    and \"R:<local-interface>:<local-port>\" for reverse port forwarding\n    remotes. This file will be automatically reloaded on change.\n\n    --auth, An optional string representing a single user with full\n    access, in the form of <user:pass>. It is equivalent to creating an\n    authfile with {\"<user:pass>\": [\"\"]}. If unset, it will use the\n    environment variable AUTH.\n\n    --keepalive, An optional keepalive interval. Since the underlying\n    transport is HTTP, in many instances we'll be traversing through\n    proxies, often these proxies will close idle connections. You must\n    specify a time with a unit, for example '5s' or '2m'. Defaults\n    to '25s' (set to 0s to disable).\n\n    --backend, Specifies another HTTP server to proxy requests to when\n    chisel receives a normal HTTP request. Useful for hiding chisel in\n    plain sight.\n\n    --socks5, Allow clients to access the internal SOCKS5 proxy. See\n    chisel client --help for more information.\n\n    --reverse, Allow clients to specify reverse port forwarding remotes\n    in addition to normal remotes.\n\n    --tls-key, Enables TLS and provides optional path to a PEM-encoded\n    TLS private key. When this flag is set, you must also set --tls-cert,\n    and you cannot set --tls-domain.\n\n    --tls-cert, Enables TLS and provides optional path to a PEM-encoded\n    TLS certificate. When this flag is set, you must also set --tls-key,\n    and you cannot set --tls-domain.\n\n    --tls-domain, Enables TLS and automatically acquires a TLS key and\n    certificate using LetsEncrypt. Setting --tls-domain requires port 443.\n    You may specify multiple --tls-domain flags to serve multiple domains.\n    The resulting files are cached in the \"$HOME/.cache/chisel\" directory.\n    You can modify this path by setting the CHISEL_LE_CACHE variable,\n    or disable caching by setting this variable to \"-\". You can optionally\n    provide a certificate notification email by setting CHISEL_LE_EMAIL.\n\n    --tls-ca, a path to a PEM encoded CA certificate bundle or a directory\n    holding multiple PEM encode CA certificate bundle files, which is used to \n    validate client connections. The provided CA certificates will be used \n    instead of the system roots. This is commonly used to implement mutual-TLS. \n` + commonHelp\n\nfunc server(args []string) {\n\n\tflags := flag.NewFlagSet(\"server\", flag.ContinueOnError)\n\n\tconfig := &chserver.Config{}\n\tflags.StringVar(&config.KeySeed, \"key\", \"\", \"\")\n\tflags.StringVar(&config.KeyFile, \"keyfile\", \"\", \"\")\n\tflags.StringVar(&config.AuthFile, \"authfile\", \"\", \"\")\n\tflags.StringVar(&config.Auth, \"auth\", \"\", \"\")\n\tflags.DurationVar(&config.KeepAlive, \"keepalive\", 25*time.Second, \"\")\n\tflags.StringVar(&config.Proxy, \"proxy\", \"\", \"\")\n\tflags.StringVar(&config.Proxy, \"backend\", \"\", \"\")\n\tflags.BoolVar(&config.Socks5, \"socks5\", false, \"\")\n\tflags.BoolVar(&config.Reverse, \"reverse\", false, \"\")\n\tflags.StringVar(&config.TLS.Key, \"tls-key\", \"\", \"\")\n\tflags.StringVar(&config.TLS.Cert, \"tls-cert\", \"\", \"\")\n\tflags.Var(multiFlag{&config.TLS.Domains}, \"tls-domain\", \"\")\n\tflags.StringVar(&config.TLS.CA, \"tls-ca\", \"\", \"\")\n\n\thost := flags.String(\"host\", \"\", \"\")\n\tp := flags.String(\"p\", \"\", \"\")\n\tport := flags.String(\"port\", \"\", \"\")\n\tpid := flags.Bool(\"pid\", false, \"\")\n\tverbose := flags.Bool(\"v\", false, \"\")\n\tkeyGen := flags.String(\"keygen\", \"\", \"\")\n\n\tflags.Usage = func() {\n\t\tfmt.Print(serverHelp)\n\t\tos.Exit(0)\n\t}\n\tflags.Parse(args)\n\n\tif *keyGen != \"\" {\n\t\tif err := ccrypto.GenerateKeyFile(*keyGen, config.KeySeed); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\treturn\n\t}\n\n\tif config.KeySeed != \"\" {\n\t\tlog.Print(\"Option `--key` is deprecated and will be removed in a future version of chisel.\")\n\t\tlog.Print(\"Please use `chisel server --keygen /file/path`, followed by `chisel server --keyfile /file/path` to specify the SSH private key\")\n\t}\n\n\tif *host == \"\" {\n\t\t*host = os.Getenv(\"HOST\")\n\t}\n\tif *host == \"\" {\n\t\t*host = \"0.0.0.0\"\n\t}\n\tif *port == \"\" {\n\t\t*port = *p\n\t}\n\tif *port == \"\" {\n\t\t*port = os.Getenv(\"PORT\")\n\t}\n\tif *port == \"\" {\n\t\t*port = \"8080\"\n\t}\n\tif config.KeyFile == \"\" {\n\t\tconfig.KeyFile = settings.Env(\"KEY_FILE\")\n\t} else if config.KeySeed == \"\" {\n\t\tconfig.KeySeed = settings.Env(\"KEY\")\n\t}\n\tif config.Auth == \"\" {\n\t\tconfig.Auth = os.Getenv(\"AUTH\")\n\t}\n\ts, err := chserver.NewServer(config)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts.Debug = *verbose\n\tif *pid {\n\t\tgeneratePidFile()\n\t}\n\tgo cos.GoStats()\n\tctx := cos.InterruptContext()\n\tif err := s.StartContext(ctx, *host, *port); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := s.Wait(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\ntype multiFlag struct {\n\tvalues *[]string\n}\n\nfunc (flag multiFlag) String() string {\n\treturn strings.Join(*flag.values, \", \")\n}\n\nfunc (flag multiFlag) Set(arg string) error {\n\t*flag.values = append(*flag.values, arg)\n\treturn nil\n}\n\ntype headerFlags struct {\n\thttp.Header\n}\n\nfunc (flag *headerFlags) String() string {\n\tout := \"\"\n\tfor k, v := range flag.Header {\n\t\tout += fmt.Sprintf(\"%s: %s\\n\", k, v)\n\t}\n\treturn out\n}\n\nfunc (flag *headerFlags) Set(arg string) error {\n\tindex := strings.Index(arg, \":\")\n\tif index < 0 {\n\t\treturn fmt.Errorf(`Invalid header (%s). Should be in the format \"HeaderName: HeaderContent\"`, arg)\n\t}\n\tif flag.Header == nil {\n\t\tflag.Header = http.Header{}\n\t}\n\tkey := arg[0:index]\n\tvalue := arg[index+1:]\n\tflag.Header.Set(key, strings.TrimSpace(value))\n\treturn nil\n}\n\nvar clientHelp = `\n  Usage: chisel client [options] <server> <remote> [remote] [remote] ...\n\n  <server> is the URL to the chisel server.\n\n  <remote>s are remote connections tunneled through the server, each of\n  which come in the form:\n\n    <local-host>:<local-port>:<remote-host>:<remote-port>/<protocol>\n\n    â–  local-host defaults to 0.0.0.0 (all interfaces).\n    â–  local-port defaults to remote-port.\n    â–  remote-port is required*.\n    â–  remote-host defaults to 0.0.0.0 (server localhost).\n    â–  protocol defaults to tcp.\n\n  which shares <remote-host>:<remote-port> from the server to the client\n  as <local-host>:<local-port>, or:\n\n    R:<local-interface>:<local-port>:<remote-host>:<remote-port>/<protocol>\n\n  which does reverse port forwarding, sharing <remote-host>:<remote-port>\n  from the client to the server's <local-interface>:<local-port>.\n\n    example remotes\n\n      3000\n      example.com:3000\n      3000:google.com:80\n      192.168.0.5:3000:google.com:80\n      socks\n      5000:socks\n      R:2222:localhost:22\n      R:socks\n      R:5000:socks\n      stdio:example.com:22\n      1.1.1.1:53/udp\n\n    When the chisel server has --socks5 enabled, remotes can\n    specify \"socks\" in place of remote-host and remote-port.\n    The default local host and port for a \"socks\" remote is\n    127.0.0.1:1080. Connections to this remote will terminate\n    at the server's internal SOCKS5 proxy.\n\n    When the chisel server has --reverse enabled, remotes can\n    be prefixed with R to denote that they are reversed. That\n    is, the server will listen and accept connections, and they\n    will be proxied through the client which specified the remote.\n    Reverse remotes specifying \"R:socks\" will listen on the server's\n    default socks port (1080) and terminate the connection at the\n    client's internal SOCKS5 proxy.\n\n    When stdio is used as local-host, the tunnel will connect standard\n    input/output of this program with the remote. This is useful when \n    combined with ssh ProxyCommand. You can use\n      ssh -o ProxyCommand='chisel client chiselserver stdio:%h:%p' \\\n          user@example.com\n    to connect to an SSH server through the tunnel.\n\n  Options:\n\n    --fingerprint, A *strongly recommended* fingerprint string\n    to perform host-key validation against the server's public key.\n\tFingerprint mismatches will close the connection.\n\tFingerprints are generated by hashing the ECDSA public key using\n\tSHA256 and encoding the result in base64.\n\tFingerprints must be 44 characters containing a trailing equals (=).\n\n    --auth, An optional username and password (client authentication)\n    in the form: \"<user>:<pass>\". These credentials are compared to\n    the credentials inside the server's --authfile. defaults to the\n    AUTH environment variable.\n\n    --keepalive, An optional keepalive interval. Since the underlying\n    transport is HTTP, in many instances we'll be traversing through\n    proxies, often these proxies will close idle connections. You must\n    specify a time with a unit, for example '5s' or '2m'. Defaults\n    to '25s' (set to 0s to disable).\n\n    --max-retry-count, Maximum number of times to retry before exiting.\n    Defaults to unlimited.\n\n    --max-retry-interval, Maximum wait time before retrying after a\n    disconnection. Defaults to 5 minutes.\n\n    --proxy, An optional HTTP CONNECT or SOCKS5 proxy which will be\n    used to reach the chisel server. Authentication can be specified\n    inside the URL.\n    For example, http://admin:password@my-server.com:8081\n            or: socks://admin:password@my-server.com:1080\n\n    --header, Set a custom header in the form \"HeaderName: HeaderContent\".\n    Can be used multiple times. (e.g --header \"Foo: Bar\" --header \"Hello: World\")\n\n    --hostname, Optionally set the 'Host' header (defaults to the host\n    found in the server url).\n\n    --sni, Override the ServerName when using TLS (defaults to the \n    hostname).\n\n    --tls-ca, An optional root certificate bundle used to verify the\n    chisel server. Only valid when connecting to the server with\n    \"https\" or \"wss\". By default, the operating system CAs will be used.\n\n    --tls-skip-verify, Skip server TLS certificate verification of\n    chain and host name (if TLS is used for transport connections to\n    server). If set, client accepts any TLS certificate presented by\n    the server and any host name in that certificate. This only affects\n    transport https (wss) connection. Chisel server's public key\n    may be still verified (see --fingerprint) after inner connection\n    is established.\n\n    --tls-key, a path to a PEM encoded private key used for client \n    authentication (mutual-TLS).\n\n    --tls-cert, a path to a PEM encoded certificate matching the provided \n    private key. The certificate must have client authentication \n    enabled (mutual-TLS).\n` + commonHelp\n\nfunc client(args []string) {\n\tflags := flag.NewFlagSet(\"client\", flag.ContinueOnError)\n\tconfig := chclient.Config{Headers: http.Header{}}\n\tflags.StringVar(&config.Fingerprint, \"fingerprint\", \"\", \"\")\n\tflags.StringVar(&config.Auth, \"auth\", \"\", \"\")\n\tflags.DurationVar(&config.KeepAlive, \"keepalive\", 25*time.Second, \"\")\n\tflags.IntVar(&config.MaxRetryCount, \"max-retry-count\", -1, \"\")\n\tflags.DurationVar(&config.MaxRetryInterval, \"max-retry-interval\", 0, \"\")\n\tflags.StringVar(&config.Proxy, \"proxy\", \"\", \"\")\n\tflags.StringVar(&config.TLS.CA, \"tls-ca\", \"\", \"\")\n\tflags.BoolVar(&config.TLS.SkipVerify, \"tls-skip-verify\", false, \"\")\n\tflags.StringVar(&config.TLS.Cert, \"tls-cert\", \"\", \"\")\n\tflags.StringVar(&config.TLS.Key, \"tls-key\", \"\", \"\")\n\tflags.Var(&headerFlags{config.Headers}, \"header\", \"\")\n\thostname := flags.String(\"hostname\", \"\", \"\")\n\tsni := flags.String(\"sni\", \"\", \"\")\n\tpid := flags.Bool(\"pid\", false, \"\")\n\tverbose := flags.Bool(\"v\", false, \"\")\n\tflags.Usage = func() {\n\t\tfmt.Print(clientHelp)\n\t\tos.Exit(0)\n\t}\n\tflags.Parse(args)\n\t//pull out options, put back remaining args\n\targs = flags.Args()\n\tif len(args) < 2 {\n\t\tlog.Fatalf(\"A server and least one remote is required\")\n\t}\n\tconfig.Server = args[0]\n\tconfig.Remotes = args[1:]\n\t//default auth\n\tif config.Auth == \"\" {\n\t\tconfig.Auth = os.Getenv(\"AUTH\")\n\t}\n\t//move hostname onto headers\n\tif *hostname != \"\" {\n\t\tconfig.Headers.Set(\"Host\", *hostname)\n\t\tconfig.TLS.ServerName = *hostname\n\t}\n\n\tif *sni != \"\" {\n\t\tconfig.TLS.ServerName = *sni\n\t}\n\n\t//ready\n\tc, err := chclient.NewClient(&config)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tc.Debug = *verbose\n\tif *pid {\n\t\tgeneratePidFile()\n\t}\n\tgo cos.GoStats()\n\tctx := cos.InterruptContext()\n\tif err := c.Start(ctx); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := c.Wait(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}