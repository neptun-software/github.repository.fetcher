{
  "metadata": {
    "timestamp": 1736567952634,
    "page": 96,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "knadh/listmonk",
      "stars": 15779,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.30859375,
          "content": "**/.classpath\n**/.dockerignore\n**/.env\n**/.git\n**/.gitignore\n**/.project\n**/.settings\n**/.toolstarget\n**/.vs\n**/.vscode\n**/*.*proj.user\n**/*.dbmdl\n**/*.jfm\n**/azds.yaml\n**/bin\n**/charts\n**/docker-compose*\n**/Dockerfile*\n**/node_modules\n**/npm-debug.log\n**/obj\n**/secrets.dev.yaml\n**/values.dev.yaml\nLICENSE\nREADME.md"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0673828125,
          "content": "frontend/* linguist-vendored\nVERSION export-subst\n* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1220703125,
          "content": "frontend/node_modules/\nfrontend/.cache/\nfrontend/yarn.lock\nfrontend/build/\n.vscode/\n\nconfig.toml\nnode_modules\nlistmonk\ndist/*"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 6.73828125,
          "content": "env:\n  - GO111MODULE=on\n  - CGO_ENABLED=0\n  - GITHUB_ORG=knadh\n  - DOCKER_ORG=listmonk\n\nbefore:\n  hooks:\n    - make build-frontend\n\nbuilds:\n  - binary: listmonk\n    main: ./cmd\n    goos:\n      - linux\n      - windows\n      - darwin\n      - freebsd\n      - openbsd\n      - netbsd\n    goarch:\n      - amd64\n      - arm64\n      - arm\n    goarm:\n      - 6\n      - 7\n    ldflags:\n      - -s -w -X \"main.buildString={{ .Tag }} ({{ .ShortCommit }} {{ .Date }}, {{ .Os }}/{{ .Arch }})\" -X \"main.versionString={{ .Tag }}\"\n\n    hooks:\n      # stuff executables with static assets.\n      post: make pack-bin BIN={{ .Path }}\n\narchives:\n  - format: tar.gz\n    files:\n      - README.md\n      - LICENSE\n\ndockers:\n  - use: buildx\n    goos: linux\n    goarch: amd64\n    ids:\n      - listmonk\n    image_templates:\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:latest-amd64\"\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:{{ .Tag }}-amd64\"\n      - \"ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:latest-amd64\"\n      - \"ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:{{ .Tag }}-amd64\"\n    build_flag_templates:\n      - --platform=linux/amd64\n      - --label=org.opencontainers.image.title={{ .ProjectName }}\n      - --label=org.opencontainers.image.description={{ .ProjectName }}\n      - --label=org.opencontainers.image.url=https://github.com/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}\n      - --label=org.opencontainers.image.source=https://github.com/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}\n      - --label=org.opencontainers.image.version={{ .Version }}\n      - --label=org.opencontainers.image.created={{ time \"2006-01-02T15:04:05Z07:00\" }}\n      - --label=org.opencontainers.image.revision={{ .FullCommit }}\n      - --label=org.opencontainers.image.licenses=AGPL-3.0\n    dockerfile: Dockerfile\n    extra_files:\n      - config.toml.sample\n      - docker-entrypoint.sh\n  - use: buildx\n    goos: linux\n    goarch: arm64\n    ids:\n      - listmonk\n    image_templates:\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:latest-arm64v8\"\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:{{ .Tag }}-arm64v8\"\n      - \"ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:latest-arm64v8\"\n      - \"ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:{{ .Tag }}-arm64v8\"\n    build_flag_templates:\n      - --platform=linux/arm64/v8\n      - --label=org.opencontainers.image.title={{ .ProjectName }}\n      - --label=org.opencontainers.image.description={{ .ProjectName }}\n      - --label=org.opencontainers.image.url=https://github.com/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}\n      - --label=org.opencontainers.image.source=https://github.com/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}\n      - --label=org.opencontainers.image.version={{ .Version }}\n      - --label=org.opencontainers.image.created={{ time \"2006-01-02T15:04:05Z07:00\" }}\n      - --label=org.opencontainers.image.revision={{ .FullCommit }}\n      - --label=org.opencontainers.image.licenses=AGPL-3.0\n    dockerfile: Dockerfile\n    extra_files:\n      - config.toml.sample\n      - docker-entrypoint.sh\n  - use: buildx\n    goos: linux\n    goarch: arm\n    goarm: 6\n    ids:\n      - listmonk\n    image_templates:\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:latest-armv6\"\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:{{ .Tag }}-armv6\"\n      - \"ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:latest-armv6\"\n      - \"ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:{{ .Tag }}-armv6\"\n    build_flag_templates:\n      - --platform=linux/arm/v6\n      - --label=org.opencontainers.image.title={{ .ProjectName }}\n      - --label=org.opencontainers.image.description={{ .ProjectName }}\n      - --label=org.opencontainers.image.url=https://github.com/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}\n      - --label=org.opencontainers.image.source=https://github.com/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}\n      - --label=org.opencontainers.image.version={{ .Version }}\n      - --label=org.opencontainers.image.created={{ time \"2006-01-02T15:04:05Z07:00\" }}\n      - --label=org.opencontainers.image.revision={{ .FullCommit }}\n      - --label=org.opencontainers.image.licenses=AGPL-3.0\n    dockerfile: Dockerfile\n    extra_files:\n      - config.toml.sample\n      - docker-entrypoint.sh\n  - use: buildx\n    goos: linux\n    goarch: arm\n    goarm: 7\n    ids:\n      - listmonk\n    image_templates:\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:latest-armv7\"\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:{{ .Tag }}-armv7\"\n      - \"ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:latest-armv7\"\n      - \"ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:{{ .Tag }}-armv7\"\n    build_flag_templates:\n      - --platform=linux/arm/v7\n      - --label=org.opencontainers.image.title={{ .ProjectName }}\n      - --label=org.opencontainers.image.description={{ .ProjectName }}\n      - --label=org.opencontainers.image.url=https://github.com/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}\n      - --label=org.opencontainers.image.source=https://github.com/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}\n      - --label=org.opencontainers.image.version={{ .Version }}\n      - --label=org.opencontainers.image.created={{ time \"2006-01-02T15:04:05Z07:00\" }}\n      - --label=org.opencontainers.image.revision={{ .FullCommit }}\n      - --label=org.opencontainers.image.licenses=AGPL-3.0\n    dockerfile: Dockerfile\n    extra_files:\n      - config.toml.sample\n      - docker-entrypoint.sh\n\ndocker_manifests:\n  - name_template: \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:latest\"\n    image_templates:\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:latest-amd64\"\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:latest-arm64v8\"\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:latest-armv6\"\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:latest-armv7\"\n  - name_template: \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:{{ .Tag }}\"\n    image_templates:\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:{{ .Tag }}-amd64\"\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:{{ .Tag }}-arm64v8\"\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:{{ .Tag }}-armv6\"\n      - \"{{ .Env.DOCKER_ORG }}/{{ .ProjectName }}:{{ .Tag }}-armv7\"\n  - name_template: ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:latest\n    image_templates:\n      - ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:latest-amd64\n      - ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:latest-arm64v8\n      - ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:latest-armv6\n      - ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:latest-armv7\n  - name_template: ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:{{ .Tag }}\n    image_templates:\n      - ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:{{ .Tag }}-amd64\n      - ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:{{ .Tag }}-arm64v8\n      - ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:{{ .Tag }}-armv6\n      - ghcr.io/{{ .Env.GITHUB_ORG }}/{{ .ProjectName }}:{{ .Tag }}-armv7\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.009765625,
          "content": "# 1. Contributing\n\nWelcome to listmonk! You can contribute to the project in the following ways:\n\n1. **Bug reports:** One liner reports are difficult to understand and review.\n\t1. Follow the bug reporting issue template and provide clear, concise descriptions and steps to reproduce the bug.\n\t2. Ensure that you have searched the existing issues to avoid duplicates.\n\t3. Maintainers may close unclear issues that lack enough information to reproduce a bug. [Report a bug here](https://github.com/knadh/listmonk/issues/new?assignees=&labels=bug&template=bug_report.md).\n\n2. **Feature suggestions:** If you feel there is a nice enhancement or feature that can benefit many users, please open a feature request issue.\n\t1. Ensure that you have searched the existing issues to avoid duplicates.\n\t2. What makes sense for the project, what suits its scope and goals, and its future direction are at the discretion of the maintainers who put in the time, effort, and energy in building and maintaining the project for free. Please be respectful of this and keep discussions friendly and fruitful.\n\t3. It is the responsibility of the requester to clearly explain and justify why a change is warranted. It is not the responsibility of the maintainers to coax this information out of a requester. So, please post well researched, well thought out, and detailed feature requests saving everyone time.\n\t4. Maintainers may close unclear feature requests that lack enough information. [Suggest a feature here](https://github.com/knadh/listmonk/issues/new?assignees=&labels=enhancement&template=feature-or-change-request.md&title=).\n\n3. **Improving docs:** You can submit corrections and improvements to the [documentation](https://listmonk.app/docs) website on the [docs repo](https://github.com/knadh/listmonk/tree/master/docs).\n\n4. **i18n translations:** The project is available in many languages thanks to user contributions. You can create a new language pack or submit corrections to existing ones. There is a UI available for making translations easy. [More info here](https://listmonk.app/docs/i18n/).\n\n\n# 2. Pull requests\n\nThis is a tricky one for many reasons. A PR, be it a new feature or a small enhancement, has to make sense to the project's overall scope, goals, and technical aspects. The quality, style, and conventions of the code have to conform to that of the project's. Performance, usability, stability and other kinds of impacts of a PR should be well understood.\n\nThis makes reviewing PRs a difficult and time consuming task. The bigger a PR, the more difficult it is to understand. Reviewing a PR in detail, engaging in back and forth discussions to improve it, and deciding that it is meaningful and safe to merge can often require more time and effort than what has gone into creating a PR. Thus, ultimately, whether a PR gets accepted or not, for whatever reason, is at the discretion of the maintainers. Please be respectful of the fact that maintainers have a much deeper understanding of the overall project. So, nitpicking on micro aspects may not be meaningful.\n\nTo keep the process smooth:\n\n1. **Send a proposal first:** Open an issue describing what you aim to accomplish, how it makes sense to the project, and how you plan on implementing it (with useful technical details), before committing time and effort to writing code. This saves everyone time.\n\n2. **Send small PRs:** Whenever possible, send small PRs with well defined scopes. The smaller the PR, the easier it is to review and test. Bundling multiple features into a single PR is highly discouraged. \n\n3. **PRs will be squashed in the end:** A PR may change considerably with multiple commits before it is approved. Once a PR is approved, if there are multiple commits, they will be squashed into a single commit during merging.\n\n\n# 3. Be respectful\n\nRemember, most FOSS projects are fruits of love and labour of maintainers who share them with the world for free with no expectations of any returns. Free as in freedom, and free as in beer too. Really, *some people just want to watch the world turn*.\n\nSo:\n\n1. Please be respectful and refrain from using aggressive or snarky language. It wastes time, cognitive bandwidth, and goodwill.\n2. Please refrain from demanding. How badly you want a feature has no bearing on whether it warrants a maintainer's time or attention. It is entirely up to the maintainers, if, how, and when they want to implement something.\n3. Please do not nitpick and generate unnecessary discussions that waste time.\n4. Please make sure you have searched the docs and issues before asking support questions.\n5. **Please remember, FOSS project maintainers owe you nothing** (unless you have an explicit agreement with them, of course) including their time in responding to your messages or providing free customer support. If you want to be heard, please be respectful and establish goodwill.\n6. If these are unacceptable to you a) you don't have to use the project b) you can always fork the project and change it to your liking while adhering to the terms of the license. That is the beauty of FOSS, afterall.\n\nThank you!\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5498046875,
          "content": "FROM alpine:latest\n\n# Install dependencies\nRUN apk --no-cache add ca-certificates tzdata shadow su-exec\n\n# Set the working directory\nWORKDIR /listmonk\n\n# Copy only the necessary files\nCOPY listmonk .\nCOPY config.toml.sample config.toml\n\n# Copy the entrypoint script\nCOPY docker-entrypoint.sh /usr/local/bin/\n\n# Make the entrypoint script executable\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\n\n# Expose the application port\nEXPOSE 9000\n\n# Set the entrypoint\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# Define the command to run the application\nCMD [\"./listmonk\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7109375,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<http://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.0859375,
          "content": "# Try to get the commit hash from 1) git 2) the VERSION file 3) fallback.\nLAST_COMMIT := $(or $(shell git rev-parse --short HEAD 2> /dev/null),$(shell head -n 1 VERSION | grep -oP -m 1 \"^[a-z0-9]+$$\"),\"\")\n\n# Try to get the semver from 1) git 2) the VERSION file 3) fallback.\nVERSION := $(or $(LISTMONK_VERSION),$(shell git describe --tags --abbrev=0 2> /dev/null),$(shell grep -oP 'tag: \\Kv\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9.-]+)?' VERSION),\"v0.0.0\")\n\nBUILDSTR := ${VERSION} (\\#${LAST_COMMIT} $(shell date -u +\"%Y-%m-%dT%H:%M:%S%z\"))\n\nYARN ?= yarn\nGOPATH ?= $(HOME)/go\nSTUFFBIN ?= $(GOPATH)/bin/stuffbin\nFRONTEND_YARN_MODULES = frontend/node_modules\nFRONTEND_DIST = frontend/dist\nFRONTEND_DEPS = \\\n\t$(FRONTEND_YARN_MODULES) \\\n\tfrontend/index.html \\\n\tfrontend/package.json \\\n\tfrontend/vite.config.js \\\n\tfrontend/.eslintrc.js \\\n\t$(shell find frontend/fontello frontend/public frontend/src -type f)\n\nBIN := listmonk\nSTATIC := config.toml.sample \\\n\tschema.sql queries.sql permissions.json \\\n\tstatic/public:/public \\\n\tstatic/email-templates \\\n\tfrontend/dist:/admin \\\n\ti18n:/i18n\n\n.PHONY: build\nbuild: $(BIN)\n\n$(STUFFBIN):\n\tgo install github.com/knadh/stuffbin/...\n\n$(FRONTEND_YARN_MODULES): frontend/package.json frontend/yarn.lock\n\tcd frontend && $(YARN) install\n\ttouch -c $(FRONTEND_YARN_MODULES)\n\n# Build the backend to ./listmonk.\n$(BIN): $(shell find . -type f -name \"*.go\") go.mod go.sum schema.sql queries.sql permissions.json\n\tCGO_ENABLED=0 go build -o ${BIN} -ldflags=\"-s -w -X 'main.buildString=${BUILDSTR}' -X 'main.versionString=${VERSION}'\" cmd/*.go\n\n# Run the backend in dev mode. The frontend assets in dev mode are loaded from disk from frontend/dist.\n.PHONY: run\nrun:\n\tCGO_ENABLED=0 go run -ldflags=\"-s -w -X 'main.buildString=${BUILDSTR}' -X 'main.versionString=${VERSION}' -X 'main.frontendDir=frontend/dist'\" cmd/*.go\n\n# Build the JS frontend into frontend/dist.\n$(FRONTEND_DIST): $(FRONTEND_DEPS)\n\texport VUE_APP_VERSION=\"${VERSION}\" && cd frontend && $(YARN) build\n\ttouch -c $(FRONTEND_DIST)\n\n\n.PHONY: build-frontend\nbuild-frontend: $(FRONTEND_DIST)\n\n# Run the JS frontend server in dev mode.\n.PHONY: run-frontend\nrun-frontend:\n\texport VUE_APP_VERSION=\"${VERSION}\" && cd frontend && $(YARN) dev\n\n# Run Go tests.\n.PHONY: test\ntest:\n\tgo test ./...\n\n# Bundle all static assets including the JS frontend into the ./listmonk binary\n# using stuffbin (installed with make deps).\n.PHONY: dist\ndist: $(STUFFBIN) build build-frontend pack-bin\n\n# pack-releases runns stuffbin packing on the given binary. This is used\n# in the .goreleaser post-build hook.\n.PHONY: pack-bin\npack-bin: build-frontend $(BIN) $(STUFFBIN)\n\t$(STUFFBIN) -a stuff -in ${BIN} -out ${BIN} ${STATIC}\n\n# Use goreleaser to do a dry run producing local builds.\n.PHONY: release-dry\nrelease-dry:\n\tgoreleaser release --parallelism 1 --clean --snapshot --skip=publish\n\n# Use goreleaser to build production releases and publish them.\n.PHONY: release\nrelease:\n\tgoreleaser release --parallelism 1 --clean\n\n# Build local docker images for development.\n.PHONY: build-dev-docker\nbuild-dev-docker: build ## Build docker containers for the entire suite (Front/Core/PG).\n\tcd dev; \\\n\tdocker compose build ; \\\n\n# Spin a local docker suite for local development.\n.PHONY: dev-docker\ndev-docker: build-dev-docker ## Build and spawns docker containers for the entire suite (Front/Core/PG).\n\tcd dev; \\\n\tdocker compose up\n\n# Run the backend in docker-dev mode. The frontend assets in dev mode are loaded from disk from frontend/dist.\n.PHONY: run-backend-docker\nrun-backend-docker:\n\tCGO_ENABLED=0 go run -ldflags=\"-s -w -X 'main.buildString=${BUILDSTR}' -X 'main.versionString=${VERSION}' -X 'main.frontendDir=frontend/dist'\" cmd/*.go --config=dev/config.toml\n\n# Tear down the complete local development docker suite.\n.PHONY: rm-dev-docker\nrm-dev-docker: build ## Delete the docker containers including DB volumes.\n\tcd dev; \\\n\tdocker compose down -v ; \\\n\n# Setup the db for local dev docker suite.\n.PHONY: init-dev-docker\ninit-dev-docker: build-dev-docker ## Delete the docker containers including DB volumes.\n\tcd dev; \\\n\tdocker compose run --rm backend sh -c \"make dist && ./listmonk --install --idempotent --yes --config dev/config.toml\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.1162109375,
          "content": "<a href=\"https://zerodha.tech\"><img src=\"https://zerodha.tech/static/images/github-badge.svg\" align=\"right\" /></a>\n\n[![listmonk-logo](https://user-images.githubusercontent.com/547147/231084896-835dba66-2dfe-497c-ba0f-787564c0819e.png)](https://listmonk.app)\n\nlistmonk is a standalone, self-hosted, newsletter and mailing list manager. It is fast, feature-rich, and packed into a single binary. It uses a PostgreSQL (⩾ 12) database as its data store.\n\n[![listmonk-dashboard](https://user-images.githubusercontent.com/547147/134939475-e0391111-f762-44cb-b056-6cb0857755e3.png)](https://listmonk.app)\n\nVisit [listmonk.app](https://listmonk.app) for more info. Check out the [**live demo**](https://demo.listmonk.app).\n\n## Installation\n\n### Docker\n\nThe latest image is available on DockerHub at [`listmonk/listmonk:latest`](https://hub.docker.com/r/listmonk/listmonk/tags?page=1&ordering=last_updated&name=latest).\nDownload and use the sample [docker-compose.yml](https://github.com/knadh/listmonk/blob/master/docker-compose.yml).\n\n\n```shell\n# Download the compose file to the current directory.\ncurl -LO https://github.com/knadh/listmonk/raw/master/docker-compose.yml\n\n# Run the services in the background.\ndocker compose up -d\n```\nVisit `http://localhost:9000`\n\nSee [installation docs](https://listmonk.app/docs/installation)\n\n__________________\n\n### Binary\n- Download the [latest release](https://github.com/knadh/listmonk/releases) and extract the listmonk binary.\n- `./listmonk --new-config` to generate config.toml. Edit it.\n- `./listmonk --install` to setup the Postgres DB (or `--upgrade` to upgrade an existing DB. Upgrades are idempotent and running them multiple times have no side effects).\n- Run `./listmonk` and visit `http://localhost:9000`\n\nSee [installation docs](https://listmonk.app/docs/installation)\n__________________\n\n\n## Developers\nlistmonk is free and open source software licensed under AGPLv3. If you are interested in contributing, refer to the [developer setup](https://listmonk.app/docs/developer-setup). The backend is written in Go and the frontend is Vue with Buefy for UI. \n\n\n## License\nlistmonk is licensed under the AGPL v3 license.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0234375,
          "content": "$Format:%h$\n$Format:%D$\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.toml.sample",
          "type": "blob",
          "size": 0.6787109375,
          "content": "[app]\n# Interface and port where the app will run its webserver.  The default value\n# of localhost will only listen to connections from the current machine. To\n# listen on all interfaces use '0.0.0.0'. To listen on the default web address\n# port, use port 80 (this will require running with elevated permissions).\naddress = \"localhost:9000\"\n\n# Database.\n[db]\nhost = \"localhost\"\nport = 5432\nuser = \"listmonk\"\npassword = \"listmonk\"\n\n# Ensure that this database has been created in Postgres.\ndatabase = \"listmonk\"\n\nssl_mode = \"disable\"\nmax_open = 25\nmax_idle = 25\nmax_lifetime = \"300s\"\n\n# Optional space separated Postgres DSN params. eg: \"application_name=listmonk gssencmode=disable\"\nparams = \"\"\n"
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 2.9833984375,
          "content": "x-db-credentials: &db-credentials                             # Use the default POSTGRES_ credentials if they're available or simply default to \"listmonk\"\n  POSTGRES_USER: &db-user listmonk                            # for database user, password, and database name\n  POSTGRES_PASSWORD: &db-password listmonk\n  POSTGRES_DB: &db-name listmonk\n\nservices:\n  # listmonk app\n  app:\n    image: listmonk/listmonk:latest\n    container_name: listmonk_app\n    restart: unless-stopped\n    ports:\n      - \"9000:9000\"                                           # To change the externally exposed port, change to: $custom_port:9000\n    networks:\n      - listmonk\n    hostname: listmonk.example.com                            # Recommend using FQDN for hostname\n    depends_on:\n      - db\n    command: [sh, -c, \"./listmonk --install --idempotent --yes --config '' && ./listmonk --upgrade --yes --config '' && ./listmonk --config ''\"]\n                                                              # --config (file) param is set to empty so that listmonk only uses the env vars (below) for config.\n                                                              # --install --idempotent ensures that DB installation happens only once on an empty DB, on the first ever start.\n                                                              # --upgrade automatically runs any DB migrations when a new image is pulled.\n\n    environment:                                              # The same params as in config.toml are passed as env vars here.\n      LISTMONK_app__address: 0.0.0.0:9000\n      LISTMONK_db__user: *db-user\n      LISTMONK_db__password: *db-password\n      LISTMONK_db__database: *db-name\n      LISTMONK_db__host: listmonk_db\n      LISTMONK_db__port: 5432\n      LISTMONK_db__ssl_mode: disable\n      LISTMONK_db__max_open: 25\n      LISTMONK_db__max_idle: 25\n      LISTMONK_db__max_lifetime: 300s\n      TZ: Etc/UTC\n      LISTMONK_ADMIN_USER: ${LISTMONK_ADMIN_USER:-}           # If these (optional) are set during the first `docker compose up`, then the Super Admin user is automatically created.\n      LISTMONK_ADMIN_PASSWORD: ${LISTMONK_ADMIN_PASSWORD:-}   # Otherwise, the user can be setup on the web app after the first visit to http://localhost:9000\n    volumes:\n      - ./uploads:/listmonk/uploads:rw                        # Mount an uploads directory on the host to /listmonk/uploads inside the container.\n                                                              # To use this, change directory path in Admin -> Settings -> Media to /listmonk/uploads\n\n  # Postgres database\n  db:\n    image: postgres:17-alpine\n    container_name: listmonk_db\n    restart: unless-stopped\n    ports:\n      - \"5432:5432\"\n    networks:\n      - listmonk\n    environment:\n      <<: *db-credentials\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U listmonk\"]\n      interval: 10s\n      timeout: 5s\n      retries: 6\n    volumes:\n      - type: volume\n        source: listmonk-data\n        target: /var/lib/postgresql/data\n\nnetworks:\n  listmonk:\n\nvolumes:\n  listmonk-data:\n"
        },
        {
          "name": "docker-entrypoint.sh",
          "type": "blob",
          "size": 1.478515625,
          "content": "#!/bin/sh\n\nset -e\n\nexport PUID=${PUID:-0}\nexport PGID=${PGID:-0}\nexport GROUP_NAME=\"app\"\nexport USER_NAME=\"app\"\n\n# This function evaluates if the supplied PGID is already in use\n# if it is not in use, it creates the group with the PGID\n# if it is in use, it sets the GROUP_NAME to the existing group\ncreate_group() {\n  if ! getent group ${PGID} > /dev/null 2>&1; then\n    addgroup -g ${PGID} ${GROUP_NAME}\n  else\n    existing_group=$(getent group ${PGID} | cut -d: -f1)\n    export GROUP_NAME=${existing_group}\n  fi\n}\n\n# This function evaluates if the supplied PUID is already in use\n# if it is not in use, it creates the user with the PUID and PGID\ncreate_user() {\n  if ! getent passwd ${PUID} > /dev/null 2>&1; then\n    adduser -u ${PUID} -G ${GROUP_NAME} -s /bin/sh -D ${USER_NAME}\n  else\n    existing_user=$(getent passwd ${PUID} | cut -d: -f1)\n    export USER_NAME=${existing_user}\n  fi\n}\n\n# Run the needed functions to create the user and group\ncreate_group\ncreate_user\n\n# Try to set the ownership of the app directory to the app user.\nif ! chown -R ${PUID}:${PGID} /listmonk 2>/dev/null; then\n  echo \"Warning: Failed to change ownership of /listmonk. Readonly volume?\"\nfi\n\necho \"Launching listmonk with user=[${USER_NAME}] group=[${GROUP_NAME}] PUID=[${PUID}] PGID=[${PGID}]\"\n\n# If running as root and PUID is not 0, then execute command as PUID\n# this allows us to run the container as a non-root user\nif [ \"$(id -u)\" = \"0\" ] && [ \"${PUID}\" != \"0\" ]; then\n  su-exec ${PUID}:${PGID} \"$@\"\nelse\n  exec \"$@\"\nfi\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.919921875,
          "content": "module github.com/knadh/listmonk\n\ngo 1.20\n\nrequire (\n\tgithub.com/Masterminds/sprig/v3 v3.2.3\n\tgithub.com/coreos/go-oidc/v3 v3.9.0\n\tgithub.com/disintegration/imaging v1.6.2\n\tgithub.com/emersion/go-message v0.16.0\n\tgithub.com/gdgvda/cron v0.2.0\n\tgithub.com/gofrs/uuid/v5 v5.0.0\n\tgithub.com/gorilla/feeds v1.1.1\n\tgithub.com/jmoiron/sqlx v1.3.5\n\tgithub.com/knadh/go-pop3 v0.3.0\n\tgithub.com/knadh/goyesql/v2 v2.2.0\n\tgithub.com/knadh/koanf/maps v0.1.1\n\tgithub.com/knadh/koanf/parsers/json v0.1.0\n\tgithub.com/knadh/koanf/parsers/toml v0.1.0\n\tgithub.com/knadh/koanf/providers/confmap v0.1.0\n\tgithub.com/knadh/koanf/providers/env v0.1.0\n\tgithub.com/knadh/koanf/providers/file v0.1.0\n\tgithub.com/knadh/koanf/providers/posflag v0.1.0\n\tgithub.com/knadh/koanf/providers/rawbytes v0.1.0\n\tgithub.com/knadh/koanf/v2 v2.0.1\n\tgithub.com/knadh/paginator v1.0.1\n\tgithub.com/knadh/smtppool v1.1.0\n\tgithub.com/knadh/stuffbin v1.1.0\n\tgithub.com/labstack/echo/v4 v4.11.4\n\tgithub.com/lib/pq v1.10.9\n\tgithub.com/paulbellamy/ratecounter v0.2.0\n\tgithub.com/rhnvrm/simples3 v0.8.3\n\tgithub.com/spf13/pflag v1.0.5\n\tgithub.com/yuin/goldmark v1.6.0\n\tgithub.com/zerodha/easyjson v1.0.0\n\tgithub.com/zerodha/simplesessions/stores/postgres/v3 v3.0.0\n\tgithub.com/zerodha/simplesessions/v3 v3.0.0\n\tgolang.org/x/mod v0.17.0\n\tgolang.org/x/oauth2 v0.13.0\n\tgolang.org/x/text v0.21.0\n\tgopkg.in/volatiletech/null.v6 v6.0.0-20170828023728-0bef4e07ae1b\n)\n\nrequire (\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/semver/v3 v3.2.0 // indirect\n\tgithub.com/emersion/go-textwrapper v0.0.0-20200911093747-65d896831594 // indirect\n\tgithub.com/fsnotify/fsnotify v1.6.0 // indirect\n\tgithub.com/go-jose/go-jose/v3 v3.0.3 // indirect\n\tgithub.com/golang-jwt/jwt v3.2.2+incompatible // indirect\n\tgithub.com/golang/protobuf v1.5.3 // indirect\n\tgithub.com/google/uuid v1.3.0 // indirect\n\tgithub.com/huandu/xstrings v1.4.0 // indirect\n\tgithub.com/imdario/mergo v0.3.14 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/kr/pretty v0.3.1 // indirect\n\tgithub.com/labstack/gommon v0.4.2 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/pelletier/go-toml v1.9.5 // indirect\n\tgithub.com/shopspring/decimal v1.3.1 // indirect\n\tgithub.com/spf13/cast v1.5.0 // indirect\n\tgithub.com/valyala/bytebufferpool v1.0.0 // indirect\n\tgithub.com/valyala/fasttemplate v1.2.2 // indirect\n\tgolang.org/x/crypto v0.31.0 // indirect\n\tgolang.org/x/image v0.18.0 // indirect\n\tgolang.org/x/net v0.33.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/time v0.5.0 // indirect\n\tgoogle.golang.org/appengine v1.6.8 // indirect\n\tgoogle.golang.org/protobuf v1.33.0 // indirect\n\tgopkg.in/yaml.v2 v2.3.0 // indirect\n)\n\nreplace github.com/imdario/mergo => github.com/imdario/mergo v0.3.8\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 20.6396484375,
          "content": "github.com/Masterminds/goutils v1.1.1 h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=\ngithub.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=\ngithub.com/Masterminds/semver/v3 v3.2.0 h1:3MEsd0SM6jqZojhjLWWeBY+Kcjy9i6MQAeY7YgDP83g=\ngithub.com/Masterminds/semver/v3 v3.2.0/go.mod h1:qvl/7zhW3nngYb5+80sSMF+FG2BjYrf8m9wsX0PNOMQ=\ngithub.com/Masterminds/sprig/v3 v3.2.3 h1:eL2fZNezLomi0uOLqjQoN6BfsDD+fyLtgbJMAj9n6YA=\ngithub.com/Masterminds/sprig/v3 v3.2.3/go.mod h1:rXcFaZ2zZbLRJv/xSysmlgIM1u11eBaRMhvYXJNkGuM=\ngithub.com/coreos/go-oidc/v3 v3.9.0 h1:0J/ogVOd4y8P0f0xUh8l9t07xRP/d8tccvjHl2dcsSo=\ngithub.com/coreos/go-oidc/v3 v3.9.0/go.mod h1:rTKz2PYwftcrtoCzV5g5kvfJoWcm0Mk8AF8y1iAQro4=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/disintegration/imaging v1.6.2 h1:w1LecBlG2Lnp8B3jk5zSuNqd7b4DXhcjwek1ei82L+c=\ngithub.com/disintegration/imaging v1.6.2/go.mod h1:44/5580QXChDfwIclfc/PCwrr44amcmDAg8hxG0Ewe4=\ngithub.com/emersion/go-message v0.15.0/go.mod h1:wQUEfE+38+7EW8p8aZ96ptg6bAb1iwdgej19uXASlE4=\ngithub.com/emersion/go-message v0.16.0 h1:uZLz8ClLv3V5fSFF/fFdW9jXjrZkXIpE1Fn8fKx7pO4=\ngithub.com/emersion/go-message v0.16.0/go.mod h1:pDJDgf/xeUIF+eicT6B/hPX/ZbEorKkUMPOxrPVG2eQ=\ngithub.com/emersion/go-textwrapper v0.0.0-20200911093747-65d896831594 h1:IbFBtwoTQyw0fIM5xv1HF+Y+3ZijDR839WMulgxCcUY=\ngithub.com/emersion/go-textwrapper v0.0.0-20200911093747-65d896831594/go.mod h1:aqO8z8wPrjkscevZJFVE1wXJrLpC5LtJG7fqLOsPb2U=\ngithub.com/frankban/quicktest v1.14.3 h1:FJKSZTDHjyhriyC81FLQ0LY93eSai0ZyR/ZIkd3ZUKE=\ngithub.com/fsnotify/fsnotify v1.6.0 h1:n+5WquG0fcWoWp6xPWfHdbskMCQaFnG6PfBrh1Ky4HY=\ngithub.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=\ngithub.com/gdgvda/cron v0.2.0 h1:oX8qdLZq4tC5StnCsZsTNs2BIzaRjcjmPZ4o+BArKX4=\ngithub.com/gdgvda/cron v0.2.0/go.mod h1:VEwidZXB255kESB5DcUGRWTYZS8KkOBYD1YBn8Wiyx8=\ngithub.com/go-jose/go-jose/v3 v3.0.3 h1:fFKWeig/irsp7XD2zBxvnmA/XaRWp5V3CBsZXJF7G7k=\ngithub.com/go-jose/go-jose/v3 v3.0.3/go.mod h1:5b+7YgP7ZICgJDBdfjZaIt+H/9L9T/YQrVfLAMboGkQ=\ngithub.com/go-sql-driver/mysql v1.4.0/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=\ngithub.com/go-sql-driver/mysql v1.6.0 h1:BCTh4TKNUYmOmMUcQ3IipzF5prigylS7XXjEkfCHuOE=\ngithub.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/gofrs/uuid/v5 v5.0.0 h1:p544++a97kEL+svbcFbCQVM9KFu0Yo25UoISXGNNH9M=\ngithub.com/gofrs/uuid/v5 v5.0.0/go.mod h1:CDOjlDMVAtN56jqyRUZh58JT31Tiw7/oQyEXZV+9bD8=\ngithub.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=\ngithub.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=\ngithub.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/feeds v1.1.1 h1:HwKXxqzcRNg9to+BbvJog4+f3s/xzvtZXICcQGutYfY=\ngithub.com/gorilla/feeds v1.1.1/go.mod h1:Nk0jZrvPFZX1OBe5NPiddPw7CfwF6Q9eqzaBbaightA=\ngithub.com/huandu/xstrings v1.3.3/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=\ngithub.com/huandu/xstrings v1.4.0 h1:D17IlohoQq4UcpqD7fDk80P7l+lwAmlFaBHgOipl2FU=\ngithub.com/huandu/xstrings v1.4.0/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=\ngithub.com/imdario/mergo v0.3.8 h1:CGgOkSJeqMRmt0D9XLWExdT4m4F1vd3FV3VPt+0VxkQ=\ngithub.com/imdario/mergo v0.3.8/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/jmoiron/sqlx v1.2.0/go.mod h1:1FEQNm3xlJgrMD+FBdI9+xvCksHtbpVBBw5dYhBSsks=\ngithub.com/jmoiron/sqlx v1.3.5 h1:vFFPA71p1o5gAeqtEAwLU4dnX2napprKtHr7PYIcN3g=\ngithub.com/jmoiron/sqlx v1.3.5/go.mod h1:nRVWtLre0KfCLJvgxzCsLVMogSvQ1zNJtpYr2Ccp0mQ=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/knadh/go-pop3 v0.3.0 h1:h6wh28lyT/vUBMSiSwDDUXZjHH6zL8CM8WYCPbETM4Y=\ngithub.com/knadh/go-pop3 v0.3.0/go.mod h1:a5kUJzrBB6kec+tNJl+3Z64ROgByKBdcyub+mhZMAfI=\ngithub.com/knadh/goyesql/v2 v2.2.0 h1:DNQIzgITmMTXA+z+jDzbXCpgr7fGD6Hp0AJ7ZLEAem4=\ngithub.com/knadh/goyesql/v2 v2.2.0/go.mod h1:is+wK/XQBukYK3DdKfpJRyDH9U/ZTMyX2u6DFijjRnI=\ngithub.com/knadh/koanf/maps v0.1.1 h1:G5TjmUh2D7G2YWf5SQQqSiHRJEjaicvU0KpypqB3NIs=\ngithub.com/knadh/koanf/maps v0.1.1/go.mod h1:npD/QZY3V6ghQDdcQzl1W4ICNVTkohC8E73eI2xW4yI=\ngithub.com/knadh/koanf/parsers/json v0.1.0 h1:dzSZl5pf5bBcW0Acnu20Djleto19T0CfHcvZ14NJ6fU=\ngithub.com/knadh/koanf/parsers/json v0.1.0/go.mod h1:ll2/MlXcZ2BfXD6YJcjVFzhG9P0TdJ207aIBKQhV2hY=\ngithub.com/knadh/koanf/parsers/toml v0.1.0 h1:S2hLqS4TgWZYj4/7mI5m1CQQcWurxUz6ODgOub/6LCI=\ngithub.com/knadh/koanf/parsers/toml v0.1.0/go.mod h1:yUprhq6eo3GbyVXFFMdbfZSo928ksS+uo0FFqNMnO18=\ngithub.com/knadh/koanf/providers/confmap v0.1.0 h1:gOkxhHkemwG4LezxxN8DMOFopOPghxRVp7JbIvdvqzU=\ngithub.com/knadh/koanf/providers/confmap v0.1.0/go.mod h1:2uLhxQzJnyHKfxG927awZC7+fyHFdQkd697K4MdLnIU=\ngithub.com/knadh/koanf/providers/env v0.1.0 h1:LqKteXqfOWyx5Ab9VfGHmjY9BvRXi+clwyZozgVRiKg=\ngithub.com/knadh/koanf/providers/env v0.1.0/go.mod h1:RE8K9GbACJkeEnkl8L/Qcj8p4ZyPXZIQ191HJi44ZaQ=\ngithub.com/knadh/koanf/providers/file v0.1.0 h1:fs6U7nrV58d3CFAFh8VTde8TM262ObYf3ODrc//Lp+c=\ngithub.com/knadh/koanf/providers/file v0.1.0/go.mod h1:rjJ/nHQl64iYCtAW2QQnF0eSmDEX/YZ/eNFj5yR6BvA=\ngithub.com/knadh/koanf/providers/posflag v0.1.0 h1:mKJlLrKPcAP7Ootf4pBZWJ6J+4wHYujwipe7Ie3qW6U=\ngithub.com/knadh/koanf/providers/posflag v0.1.0/go.mod h1:SYg03v/t8ISBNrMBRMlojH8OsKowbkXV7giIbBVgbz0=\ngithub.com/knadh/koanf/providers/rawbytes v0.1.0 h1:dpzgu2KO6uf6oCb4aP05KDmKmAmI51k5pe8RYKQ0qME=\ngithub.com/knadh/koanf/providers/rawbytes v0.1.0/go.mod h1:mMTB1/IcJ/yE++A2iEZbY1MLygX7vttU+C+S/YmPu9c=\ngithub.com/knadh/koanf/v2 v2.0.1 h1:1dYGITt1I23x8cfx8ZnldtezdyaZtfAuRtIFOiRzK7g=\ngithub.com/knadh/koanf/v2 v2.0.1/go.mod h1:ZeiIlIDXTE7w1lMT6UVcNiRAS2/rCeLn/GdLNvY1Dus=\ngithub.com/knadh/paginator v1.0.1 h1:mzbhjx167qRpvv9ym7BBaaNa1//qXU2YKk7mTmSmW9o=\ngithub.com/knadh/paginator v1.0.1/go.mod h1:NDzJofYUQiHbDrWukKRi3E2vIKb0dzOZKY8VmxbM2Sk=\ngithub.com/knadh/smtppool v1.1.0 h1:J7RB3PpNQW/STnJ6JXlNZLfuNsgJu2VILV+CHWnc/j8=\ngithub.com/knadh/smtppool v1.1.0/go.mod h1:3DJHouXAgPDBz0kC50HukOsdapYSwIEfJGwuip46oCA=\ngithub.com/knadh/stuffbin v1.1.0 h1:f5S5BHzZALjuJEgTIOMC9NidEnBJM7Ze6Lu1GHR/lwU=\ngithub.com/knadh/stuffbin v1.1.0/go.mod h1:yVCFaWaKPubSNibBsTAJ939q2ABHudJQxRWZWV5yh+4=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/labstack/echo/v4 v4.11.4 h1:vDZmA+qNeh1pd/cCkEicDMrjtrnMGQ1QFI9gWN1zGq8=\ngithub.com/labstack/echo/v4 v4.11.4/go.mod h1:noh7EvLwqDsmh/X/HWKPUl1AjzJrhyptRyEbQJfxen8=\ngithub.com/labstack/gommon v0.4.2 h1:F8qTUNXgG1+6WQmqoUWnz8WiEU60mXVVw0P4ht1WRA0=\ngithub.com/labstack/gommon v0.4.2/go.mod h1:QlUFxVM+SNXhDL/Z7YhocGIBYOiwB0mXm1+1bAPHPyU=\ngithub.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=\ngithub.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-sqlite3 v1.9.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/mattn/go-sqlite3 v1.14.6 h1:dNPt6NO46WmLVt2DLNpwczCmdV5boIZ6g/tlDrlRUbg=\ngithub.com/mattn/go-sqlite3 v1.14.6/go.mod h1:NyWgC/yNuGj7Q9rpYnZvas74GogHl5/Z4A/KQRfk6bU=\ngithub.com/mitchellh/copystructure v1.0.0/go.mod h1:SNtv71yrdKgLRyLFxmLdkAbkKEFWgYaq1OVrnRcwhnw=\ngithub.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=\ngithub.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/reflectwalk v1.0.0/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=\ngithub.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/paulbellamy/ratecounter v0.2.0 h1:2L/RhJq+HA8gBQImDXtLPrDXK5qAj6ozWVK/zFXVJGs=\ngithub.com/paulbellamy/ratecounter v0.2.0/go.mod h1:Hfx1hDpSGoqxkVVpBi/IlYD7kChlfo5C6hzIHwPqfFE=\ngithub.com/pelletier/go-toml v1.9.5 h1:4yBQzkHv+7BHq2PQUZF3Mx0IYxG7LsP222s7Agd3ve8=\ngithub.com/pelletier/go-toml v1.9.5/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rhnvrm/simples3 v0.8.3 h1:6dS0EE/hMIkaJd9gJOoXZOwtQQqI4NJyk0jvtl86n28=\ngithub.com/rhnvrm/simples3 v0.8.3/go.mod h1:Y+3vYm2V7Y4VijFoJHHTrja6OgPrJ2cBti8dPGkC3sA=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/shopspring/decimal v1.2.0/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/shopspring/decimal v1.3.1 h1:2Usl1nmF/WZucqkFZhnfFYxxxu8LG21F6nPQBE5gKV8=\ngithub.com/shopspring/decimal v1.3.1/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/spf13/cast v1.3.1/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cast v1.5.0 h1:rj3WzYc11XZaIZMPKmwP96zkFEnnAmV8s6XbB2aY32w=\ngithub.com/spf13/cast v1.5.0/go.mod h1:SpXXQ5YoyJw6s3/6cMTQuxvgRl3PCJiyaX9p6b155UU=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=\ngithub.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=\ngithub.com/valyala/fasttemplate v1.2.2 h1:lxLXG0uE3Qnshl9QyaK6XJxMXlQZELvChBOCmQD0Loo=\ngithub.com/valyala/fasttemplate v1.2.2/go.mod h1:KHLXt3tVN2HBp8eijSv/kGJopbvo7S+qRAEEKiv+SiQ=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/yuin/goldmark v1.6.0 h1:boZcn2GTjpsynOsC0iJHnBWa4Bi0qzfJjthwauItG68=\ngithub.com/yuin/goldmark v1.6.0/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/zerodha/easyjson v1.0.0 h1:3u1lvS8C+8ntnb4lXHc7ZzfQ8txUdzBAH5t9AwF7bUs=\ngithub.com/zerodha/easyjson v1.0.0/go.mod h1:mA8d8Xs8Yp4Q95ppRb4dRGROERgKSLQIK9Y7iuC5mog=\ngithub.com/zerodha/simplesessions/stores/postgres/v3 v3.0.0 h1:50BNRW/VYOgCf5v6vbhKMT40sFA+yZ7xUrdM/vbI1G8=\ngithub.com/zerodha/simplesessions/stores/postgres/v3 v3.0.0/go.mod h1:PifZh0lGfmx4sN3+YvDCjkIDrTzZoILL9jkczV1SsiA=\ngithub.com/zerodha/simplesessions/v3 v3.0.0 h1:seHwxVNnlCbp5nG8GFxSsRUdiHnfb39QdEW3J536O9Y=\ngithub.com/zerodha/simplesessions/v3 v3.0.0/go.mod h1:lAK+CJmZRlbvfq+OnkB8Iyf6LWgjzvUuWYKX1XA51P0=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.3.0/go.mod h1:hebNnKkNXi2UzZN1eVRvBB7co0a+JxK6XbPiWVs/3J4=\ngolang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/image v0.0.0-20191009234506-e7c1f5e7dbb8/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/image v0.18.0 h1:jGzIakQa/ZXI1I0Fxvaa9W7yP25TqT6cHIHn+6CqvSQ=\ngolang.org/x/image v0.18.0/go.mod h1:4yyo5vMFQjVjUcVk4jEQcU9MGy/rulF5WvUILseCM2E=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.17.0 h1:zY54UmvipHiNd+pm+m0x9KhZ9hl1/7QNMyxXbc6ICqA=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.2.0/go.mod h1:KqCZLdyyvdV855qA2rE3GC2aiw5xGR5TEjj8smXukLY=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/oauth2 v0.13.0 h1:jDDenyj+WgFtmV3zYVoi8aE2BwtXFLWOA67ZfNWftiY=\ngolang.org/x/oauth2 v0.13.0/go.mod h1:/JMhi4ZRXAf4HG9LiNmxvk+45+96RUlVThiH8FzNBn0=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.2.0/go.mod h1:TVmDHMZPmdnySmBfhjOoOdhjzdE1h4u1VwSiw2l1Nuc=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\ngolang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=\ngolang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/appengine v1.6.8 h1:IhEN5q69dyKagZPYMSdIjS2HqprW324FRQZJcGqPAsM=\ngoogle.golang.org/appengine v1.6.8/go.mod h1:1jJ3jBArFh5pcgW8gCtRJnepW8FzD1V44FJffLiz/Ds=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/volatiletech/null.v6 v6.0.0-20170828023728-0bef4e07ae1b h1:P+3+n9hUbqSDkSdtusWHVPQRrpRpLiLFzlZ02xXskM0=\ngopkg.in/volatiletech/null.v6 v6.0.0-20170828023728-0bef4e07ae1b/go.mod h1:0LRKfykySnChgQpG3Qpk+bkZFWazQ+MMfc5oldQCwnY=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.3.0 h1:clyUAQHOM3G0M3f5vQj7LuJrETvjVot3Z5el9nffUtU=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "i18n",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "listmonk-simple.service",
          "type": "blob",
          "size": 2.5927734375,
          "content": "# A simpler version of the service template with wider compatibility for older OS's\n\n[Unit]\nDescription=listmonk email service\nConditionPathExists=/etc/listmonk/config.toml\nWants=network.target\n# The PostgreSQL database may not be on the same host but if it\n# is listmonk should wait for it to start up.\nAfter=postgresql.service\n\n[Service]\nType=simple\nPermissionsStartOnly=true\nWorkingDirectory=/usr/bin\nExecStartPre=/usr/bin/mkdir -p \"/etc/listmonk/uploads\"\nExecStartPre=/usr/bin/listmonk --config /etc/listmonk/config.toml --upgrade --yes\nExecStart=/usr/bin/listmonk --config /etc/listmonk/config.toml\nTimeoutStopSec=10\nRestart=on-failure\nRestartSec=5\n\n# To enable a static dir, add the following \n# --static-dir /etc/listmonk/static\n# to the end of the ExecStart line above after creating the dir and fetching the files with:\n# mkdir -p /etc/listmonk/static ; wget -O - https://github.com/knadh/listmonk/archive/master.tar.gz | tar xz -C /etc/listmonk/static --strip=2 \"listmonk-master/static\"\n\n# To enable a log file that persists after restarts, replace the ExecStart= line with:\n# ExecStart=/bin/bash -ce \"exec /usr/bin/listmonk --config /etc/listmonk/config.toml --static-dir /etc/listmonk/static >>/etc/listmonk/listmonk.log 2>&1\"\n\n# Set user to run listmonk service as (instead of root).\n# Can use \"DynamicUser=\" instead, if your systemd version is >= 232.\n# https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#DynamicUser=\n#User=\n#StateDirectory=/etc/listmonk\n#Environment=HOME=/usr/bin\n\n# Use systemd’s ability to disable security-sensitive features\n# that listmonk does not explicitly need.\n# NoNewPrivileges should be enabled by DynamicUser=yes but systemd-analyze\n# still recommended to explicitly enable it.\nNoNewPrivileges=True\n# listmonk doesn’t need any capabilities as defined by the linux kernel\n# see: https://man7.org/linux/man-pages/man7/capabilities.7.html\nCapabilityBoundingSet=\n# listmonk only executes native code with no need for any other ABIs.\nSystemCallArchitectures=native\n\n# Make /home/, /root/, and /run/user/ inaccessible.\n# ProtectSystem=strict and ProtectHome=read-only are implied by DynamicUser=True\n# If you set ExecStartPre=/usr/bin/mkdir -p \"listmonk/uploads\" to a directory in /home/ or /root/ it will cause uploads to fail \n# See https://github.com/knadh/listmonk/issues/843#issuecomment-1836023524\nProtectHome=True\n\n# Make sure files created by listmonk are only readable by itself and\n# others in the listmonk system group.\nUMask=0027\n# listmonk only needs to support the IPv4 and IPv6 address families.\nRestrictAddressFamilies=AF_INET AF_INET6\n\n[Install]\nWantedBy=multi-user.target\n"
        },
        {
          "name": "listmonk@.service",
          "type": "blob",
          "size": 2.75,
          "content": "[Unit]\nDescription=listmonk mailing list and newsletter manager (%I)\nConditionPathExists=/etc/listmonk/%i.toml\nWants=network.target\n# The PostgreSQL database may not be on the same host but if it\n# is listmonk should wait for it to start up.\nAfter=postgresql.service\n\n[Service]\nType=simple\nEnvironmentFile=-/etc/default/listmonk\nEnvironmentFile=-/etc/default/listmonk-%i\nExecStartPre=/usr/bin/mkdir -p \"${HOME}/uploads\"\nExecStartPre=/usr/bin/listmonk --config /etc/listmonk/%i.toml --upgrade --yes\nExecStart=/usr/bin/listmonk --config /etc/listmonk/%i.toml $SYSTEMD_LISTMONK_ARGS\nRestart=on-failure\n\n# Create dynamic users for listmonk service instances\n# but create a state directory for uploads in /var/lib/private/%i.\nDynamicUser=True\nStateDirectory=listmonk-%i\nEnvironment=HOME=%S/listmonk-%i\nWorkingDirectory=%S/listmonk-%i\n\n# Use systemd’s ability to disable security-sensitive features\n# that listmonk does not explicitly need.\n# NoNewPrivileges should be enabled by DynamicUser=yes but systemd-analyze\n# still recommended to explicitly enable it.\nNoNewPrivileges=True\n# listmonk doesn’t need any capabilities as defined by the linux kernel\n# see: https://man7.org/linux/man-pages/man7/capabilities.7.html\nCapabilityBoundingSet=\n# listmonk only executes native code with no need for any other ABIs.\nSystemCallArchitectures=native\n# Only enable a reasonable set of system calls.\n# see: https://www.freedesktop.org/software/systemd/man/systemd.exec.html#SystemCallFilter=\nSystemCallFilter=@system-service\nSystemCallFilter=~@privileged\n# ProtectSystem=strict, which is implied by DynamicUser=True, already disabled write calls\n# to the entire filesystem hierarchy, leaving only /dev/, /proc/, and /sys/ writable.\n# listmonk doesn’t need access to those so might as well disable them.\nPrivateDevices=True\nProtectControlGroups=True\nProtectKernelTunables=True\n# Make /home/, /root/, and /run/user/ inaccessible.\nProtectHome=True\n# listmonk doesn’t handle any specific device nodes.\nDeviceAllow=False\n# listmonk doesn’t make use of linux namespaces.\nRestrictNamespaces=True\n# listmonk doesn’t need realtime scheduling.\nRestrictRealtime=True\n# Make sure files created by listmonk are only readable by itself and\n# others in the listmonk system group.\nUMask=0027\n# Disable memory mappings that are both writable and executable.\nMemoryDenyWriteExecute=True\n# listmonk doesn’t make use of linux personality switching.\nLockPersonality=True\n# listmonk only needs to support the IPv4 and IPv6 address families.\nRestrictAddressFamilies=AF_INET AF_INET6\n# listmonk doesn’t need to load any linux kernel modules.\nProtectKernelModules=True\n# Create a sandboxed environment where the system users are mapped to a\n# service-specific linux kernel namespace.\nPrivateUsers=True\n\n[Install]\nWantedBy=multi-user.target\n"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "permissions.json",
          "type": "blob",
          "size": 1.396484375,
          "content": "[\n    {\n        \"group\": \"lists\",\n        \"permissions\":\n        [\n            \"lists:get_all\",\n            \"lists:manage_all\"\n        ]\n    },\n    {\n        \"group\": \"subscribers\",\n        \"permissions\":\n        [\n            \"subscribers:get\",\n            \"subscribers:get_all\",\n            \"subscribers:manage\",\n            \"subscribers:import\",\n            \"subscribers:sql_query\",\n            \"tx:send\"\n        ]\n    },\n    {\n        \"group\": \"campaigns\",\n        \"permissions\":\n        [\n            \"campaigns:get\",\n            \"campaigns:get_analytics\",\n            \"campaigns:manage\"\n        ]\n    },\n    {\n        \"group\": \"bounces\",\n        \"permissions\":\n        [\n            \"bounces:get\",\n            \"bounces:manage\",\n            \"webhooks:post_bounce\"\n        ]\n    },\n    {\n        \"group\": \"media\",\n        \"permissions\":\n        [\n            \"media:get\",\n            \"media:manage\"\n        ]\n    },\n    {\n        \"group\": \"templates\",\n        \"permissions\":\n        [\n            \"templates:get\",\n            \"templates:manage\"\n        ]\n    },\n    {\n        \"group\": \"users\",\n        \"permissions\":\n        [\n            \"users:get\",\n            \"users:manage\",\n            \"roles:get\",\n            \"roles:manage\"\n        ]\n    },\n    {\n        \"group\": \"settings\",\n        \"permissions\":\n        [\n            \"settings:get\",\n            \"settings:manage\",\n            \"settings:maintain\"\n        ]\n    }\n]\n"
        },
        {
          "name": "project.inlang.json",
          "type": "blob",
          "size": 0.912109375,
          "content": "{\n    \"$schema\":\"https://inlang.com/schema/project-settings\",\n    \"sourceLanguageTag\": \"en\",\n    \"languageTags\": [\"ca\", \"cs-cz\", \"cy\", \"de\", \"en\", \"es\", \"fi\", \"fr\", \"hu\", \"it\", \"jp\", \"ml\", \"nl\", \"pl\", \"pt-BR\", \"pt\", \"ro\", \"ru\", \"se\", \"sk\", \"tr\", \"vi\", \"zh-CN\", \"zh-TW\"],\n    \"modules\": [\n        \"https://cdn.jsdelivr.net/npm/@inlang/plugin-json@4/dist/index.js\",\n        \"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-empty-pattern@1/dist/index.js\",\n        \"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-identical-pattern@1/dist/index.js\",\n        \"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-without-source@1/dist/index.js\",\n        \"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-missing-translation@1/dist/index.js\"\n    ],\n    \"plugin.inlang.json\": {\n        \"pathPattern\": \"./i18n/{languageTag}.json\",\n        \"variableReferencePattern\": [\n            \"{\",\n            \"}\"\n        ]\n    }\n}\n"
        },
        {
          "name": "queries.sql",
          "type": "blob",
          "size": 49.7802734375,
          "content": "-- subscribers\n-- name: get-subscriber\n-- Get a single subscriber by id or UUID or email.\nSELECT * FROM subscribers WHERE\n    CASE\n        WHEN $1 > 0 THEN id = $1\n        WHEN $2 != '' THEN uuid = $2::UUID\n        WHEN $3 != '' THEN email = $3\n    END;\n\n-- name: has-subscriber-list\n-- Used for checking access permission by list.\nSELECT s.id AS subscriber_id,\n    CASE\n        WHEN EXISTS (SELECT 1 FROM subscriber_lists sl WHERE sl.subscriber_id = s.id AND sl.list_id = ANY($2))\n        THEN TRUE\n        ELSE FALSE\n    END AS has\nFROM subscribers s WHERE s.id = ANY($1);\n\n-- name: get-subscribers-by-emails\n-- Get subscribers by emails.\nSELECT * FROM subscribers WHERE email=ANY($1);\n\n-- name: get-subscriber-lists\nWITH sub AS (\n    SELECT id FROM subscribers WHERE CASE WHEN $1 > 0 THEN id = $1 ELSE uuid = $2 END\n)\nSELECT * FROM lists\n    LEFT JOIN subscriber_lists ON (lists.id = subscriber_lists.list_id)\n    WHERE subscriber_id = (SELECT id FROM sub)\n    -- Optional list IDs or UUIDs to filter.\n    AND (CASE WHEN CARDINALITY($3::INT[]) > 0 THEN id = ANY($3::INT[])\n          WHEN CARDINALITY($4::UUID[]) > 0 THEN uuid = ANY($4::UUID[])\n          ELSE TRUE\n    END)\n    AND (CASE WHEN $5 != '' THEN subscriber_lists.status = $5::subscription_status ELSE TRUE END)\n    AND (CASE WHEN $6 != '' THEN lists.optin = $6::list_optin ELSE TRUE END)\n    ORDER BY id;\n\n-- name: get-subscriber-lists-lazy\n-- Get lists associations of subscribers given a list of subscriber IDs.\n-- This query is used to lazy load given a list of subscriber IDs.\n-- The query returns results in the same order as the given subscriber IDs, and for non-existent subscriber IDs,\n-- the query still returns a row with 0 values. Thus, for lazy loading, the application simply iterate on the results in\n-- the same order as the list of campaigns it would've queried and attach the results.\nWITH subs AS (\n    SELECT subscriber_id, JSON_AGG(\n        ROW_TO_JSON(\n            (SELECT l FROM (\n                SELECT\n                    subscriber_lists.status AS subscription_status,\n                    subscriber_lists.created_at AS subscription_created_at,\n                    subscriber_lists.updated_at AS subscription_updated_at,\n                    subscriber_lists.meta AS subscription_meta,\n                    lists.*\n            ) l)\n        )\n    ) AS lists FROM lists\n    LEFT JOIN subscriber_lists ON (subscriber_lists.list_id = lists.id)\n    WHERE subscriber_lists.subscriber_id = ANY($1)\n    GROUP BY subscriber_id\n)\nSELECT id as subscriber_id,\n    COALESCE(s.lists, '[]') AS lists\n    FROM (SELECT id FROM UNNEST($1) AS id) x\n    LEFT JOIN subs AS s ON (s.subscriber_id = id)\n    ORDER BY ARRAY_POSITION($1, id);\n\n-- name: get-subscriptions\n-- Retrieves all lists a subscriber is attached to.\n-- if $3 is set to true, all lists are fetched including the subscriber's subscriptions.\n-- subscription_status, and subscription_created_at are null in that case.\nWITH sub AS (\n    SELECT id FROM subscribers WHERE CASE WHEN $1 > 0 THEN id = $1 ELSE uuid = $2 END\n)\nSELECT lists.*,\n    subscriber_lists.status as subscription_status,\n    subscriber_lists.created_at as subscription_created_at,\n    subscriber_lists.meta as subscription_meta\n    FROM lists LEFT JOIN subscriber_lists\n    ON (subscriber_lists.list_id = lists.id AND subscriber_lists.subscriber_id = (SELECT id FROM sub))\n    WHERE CASE WHEN $3 = TRUE THEN TRUE ELSE subscriber_lists.status IS NOT NULL END\n    ORDER BY subscriber_lists.status;\n\n-- name: insert-subscriber\nWITH sub AS (\n    INSERT INTO subscribers (uuid, email, name, status, attribs)\n    VALUES($1, $2, $3, $4, $5)\n    RETURNING id, status\n),\nlistIDs AS (\n    SELECT id FROM lists WHERE\n        (CASE WHEN CARDINALITY($6::INT[]) > 0 THEN id=ANY($6)\n              ELSE uuid=ANY($7::UUID[]) END)\n),\nsubs AS (\n    INSERT INTO subscriber_lists (subscriber_id, list_id, status)\n    VALUES(\n        (SELECT id FROM sub),\n        UNNEST(ARRAY(SELECT id FROM listIDs)),\n        (CASE WHEN $4='blocklisted' THEN 'unsubscribed'::subscription_status ELSE $8::subscription_status END)\n    )\n    ON CONFLICT (subscriber_id, list_id) DO UPDATE\n        SET updated_at=NOW(),\n            status=(\n                CASE WHEN $4='blocklisted' OR (SELECT status FROM sub)='blocklisted'\n                THEN 'unsubscribed'::subscription_status\n                ELSE $8::subscription_status END\n            )\n)\nSELECT id from sub;\n\n-- name: upsert-subscriber\n-- Upserts a subscriber where existing subscribers get their names and attributes overwritten.\n-- If $7 = true, update values, otherwise, skip.\nWITH sub AS (\n    INSERT INTO subscribers as s (uuid, email, name, attribs, status)\n    VALUES($1, $2, $3, $4, 'enabled')\n    ON CONFLICT (email)\n    DO UPDATE SET\n        name=(CASE WHEN $7 THEN $3 ELSE s.name END),\n        attribs=(CASE WHEN $7 THEN $4 ELSE s.attribs END),\n        updated_at=NOW()\n    RETURNING uuid, id, status\n),\nsubs AS (\n    INSERT INTO subscriber_lists (subscriber_id, list_id, status)\n    SELECT sub.id, listID, CASE WHEN sub.status = 'blocklisted' THEN 'unsubscribed' ELSE $6::subscription_status END\n    FROM sub, UNNEST($5::INT[]) AS listID\n    ON CONFLICT (subscriber_id, list_id) DO UPDATE\n    SET updated_at = NOW(),\n        status = CASE WHEN $7 THEN EXCLUDED.status ELSE subscriber_lists.status END\n)\nSELECT uuid, id from sub;\n\n-- name: upsert-blocklist-subscriber\n-- Upserts a subscriber where the update will only set the status to blocklisted\n-- unlike upsert-subscribers where name and attributes are updated. In addition, all\n-- existing subscriptions are marked as 'unsubscribed'.\n-- This is used in the bulk importer.\nWITH sub AS (\n    INSERT INTO subscribers (uuid, email, name, attribs, status)\n    VALUES($1, $2, $3, $4, 'blocklisted')\n    ON CONFLICT (email) DO UPDATE SET status='blocklisted', updated_at=NOW()\n    RETURNING id\n)\nUPDATE subscriber_lists SET status='unsubscribed', updated_at=NOW()\n    WHERE subscriber_id = (SELECT id FROM sub);\n\n-- name: update-subscriber\nUPDATE subscribers SET\n    email=(CASE WHEN $2 != '' THEN $2 ELSE email END),\n    name=(CASE WHEN $3 != '' THEN $3 ELSE name END),\n    status=(CASE WHEN $4 != '' THEN $4::subscriber_status ELSE status END),\n    attribs=(CASE WHEN $5 != '' THEN $5::JSONB ELSE attribs END),\n    updated_at=NOW()\nWHERE id = $1;\n\n-- name: update-subscriber-with-lists\n-- Updates a subscriber's data, and given a list of list_ids, inserts subscriptions\n-- for them while deleting existing subscriptions not in the list.\nWITH s AS (\n    UPDATE subscribers SET\n        email=(CASE WHEN $2 != '' THEN $2 ELSE email END),\n        name=(CASE WHEN $3 != '' THEN $3 ELSE name END),\n        status=(CASE WHEN $4 != '' THEN $4::subscriber_status ELSE status END),\n        attribs=(CASE WHEN $5 != '' THEN $5::JSONB ELSE attribs END),\n        updated_at=NOW()\n    WHERE id = $1 RETURNING id\n),\nlistIDs AS (\n    SELECT id FROM lists WHERE\n        (CASE WHEN CARDINALITY($6::INT[]) > 0 THEN id=ANY($6)\n              ELSE uuid=ANY($7::UUID[]) END)\n),\nd AS (\n    DELETE FROM subscriber_lists WHERE $9 = TRUE AND subscriber_id = $1 AND list_id != ALL(SELECT id FROM listIDs)\n)\nINSERT INTO subscriber_lists (subscriber_id, list_id, status)\n    VALUES(\n        (SELECT id FROM s),\n        UNNEST(ARRAY(SELECT id FROM listIDs)),\n        (CASE WHEN $4='blocklisted' THEN 'unsubscribed'::subscription_status ELSE $8::subscription_status END)\n    )\n    ON CONFLICT (subscriber_id, list_id) DO UPDATE\n    SET status = (\n        CASE\n            WHEN $4='blocklisted' THEN 'unsubscribed'::subscription_status\n            -- When subscriber is edited from the admin form, retain the status. Otherwise, a blocklisted\n            -- subscriber when being re-enabled, their subscription statuses change.\n            WHEN subscriber_lists.status = 'confirmed' THEN 'confirmed'\n            ELSE $8::subscription_status\n        END\n    );\n\n-- name: delete-subscribers\n-- Delete one or more subscribers by ID or UUID.\nDELETE FROM subscribers WHERE CASE WHEN ARRAY_LENGTH($1::INT[], 1) > 0 THEN id = ANY($1) ELSE uuid = ANY($2::UUID[]) END;\n\n-- name: delete-blocklisted-subscribers\nDELETE FROM subscribers WHERE status = 'blocklisted';\n\n-- name: delete-orphan-subscribers\nDELETE FROM subscribers a WHERE NOT EXISTS\n    (SELECT 1 FROM subscriber_lists b WHERE b.subscriber_id = a.id);\n\n-- name: blocklist-subscribers\nWITH b AS (\n    UPDATE subscribers SET status='blocklisted', updated_at=NOW()\n    WHERE id = ANY($1::INT[])\n)\nUPDATE subscriber_lists SET status='unsubscribed', updated_at=NOW()\n    WHERE subscriber_id = ANY($1::INT[]);\n\n-- name: add-subscribers-to-lists\nINSERT INTO subscriber_lists (subscriber_id, list_id, status)\n    (SELECT a, b, (CASE WHEN $3 != '' THEN $3::subscription_status ELSE 'unconfirmed' END) FROM UNNEST($1::INT[]) a, UNNEST($2::INT[]) b)\n    ON CONFLICT (subscriber_id, list_id) DO UPDATE SET status=(CASE WHEN $3 != '' THEN $3::subscription_status ELSE subscriber_lists.status END);\n\n-- name: delete-subscriptions\nDELETE FROM subscriber_lists\n    WHERE (subscriber_id, list_id) = ANY(SELECT a, b FROM UNNEST($1::INT[]) a, UNNEST($2::INT[]) b);\n\n-- name: confirm-subscription-optin\nWITH subID AS (\n    SELECT id FROM subscribers WHERE uuid = $1::UUID\n),\nlistIDs AS (\n    SELECT id FROM lists WHERE uuid = ANY($2::UUID[])\n)\nUPDATE subscriber_lists SET status='confirmed', meta=meta || $3, updated_at=NOW()\n    WHERE subscriber_id = (SELECT id FROM subID) AND list_id = ANY(SELECT id FROM listIDs);\n\n-- name: unsubscribe-subscribers-from-lists\nWITH listIDs AS (\n    SELECT ARRAY(\n        SELECT id FROM lists WHERE\n        (CASE WHEN CARDINALITY($2::INT[]) > 0 THEN id=ANY($2) ELSE uuid=ANY($3::UUID[]) END)\n    ) id\n)\nUPDATE subscriber_lists SET status='unsubscribed', updated_at=NOW()\n    WHERE (subscriber_id, list_id) = ANY(SELECT a, b FROM UNNEST($1::INT[]) a, UNNEST((SELECT id FROM listIDs)) b);\n\n-- name: unsubscribe-by-campaign\n-- Unsubscribes a subscriber given a campaign UUID (from all the lists in the campaign) and the subscriber UUID.\n-- If $3 is TRUE, then all subscriptions of the subscriber is blocklisted\n-- and all existing subscriptions, irrespective of lists, unsubscribed.\nWITH lists AS (\n    SELECT list_id FROM campaign_lists\n    LEFT JOIN campaigns ON (campaign_lists.campaign_id = campaigns.id)\n    WHERE campaigns.uuid = $1\n),\nsub AS (\n    UPDATE subscribers SET status = (CASE WHEN $3 IS TRUE THEN 'blocklisted' ELSE status END)\n    WHERE uuid = $2 RETURNING id\n)\nUPDATE subscriber_lists SET status = 'unsubscribed', updated_at=NOW() WHERE\n    subscriber_id = (SELECT id FROM sub) AND status != 'unsubscribed' AND\n    -- If $3 is false, unsubscribe from the campaign's lists, otherwise all lists.\n    CASE WHEN $3 IS FALSE THEN list_id = ANY(SELECT list_id FROM lists) ELSE list_id != 0 END;\n\n-- name: delete-unconfirmed-subscriptions\nWITH optins AS (\n    SELECT id FROM lists WHERE optin = 'double'\n)\nDELETE FROM subscriber_lists\n    WHERE status = 'unconfirmed' AND list_id IN (SELECT id FROM optins) AND created_at < $1;\n\n-- privacy\n-- name: export-subscriber-data\nWITH prof AS (\n    SELECT id, uuid, email, name, attribs, status, created_at, updated_at FROM subscribers WHERE\n    CASE WHEN $1 > 0 THEN id = $1 ELSE uuid = $2 END\n),\nsubs AS (\n    SELECT subscriber_lists.status AS subscription_status,\n            (CASE WHEN lists.type = 'private' THEN 'Private list' ELSE lists.name END) as name,\n            lists.type, subscriber_lists.created_at\n    FROM lists\n    LEFT JOIN subscriber_lists ON (subscriber_lists.list_id = lists.id)\n    WHERE subscriber_lists.subscriber_id = (SELECT id FROM prof)\n),\nviews AS (\n    SELECT subject as campaign, COUNT(subscriber_id) as views FROM campaign_views\n        LEFT JOIN campaigns ON (campaigns.id = campaign_views.campaign_id)\n        WHERE subscriber_id = (SELECT id FROM prof)\n        GROUP BY campaigns.id ORDER BY campaigns.id\n),\nclicks AS (\n    SELECT url, COUNT(subscriber_id) as clicks FROM link_clicks\n        LEFT JOIN links ON (links.id = link_clicks.link_id)\n        WHERE subscriber_id = (SELECT id FROM prof)\n        GROUP BY links.id ORDER BY links.id\n)\nSELECT (SELECT email FROM prof) as email,\n        COALESCE((SELECT JSON_AGG(t) FROM prof t), '{}') AS profile,\n        COALESCE((SELECT JSON_AGG(t) FROM subs t), '[]') AS subscriptions,\n        COALESCE((SELECT JSON_AGG(t) FROM views t), '[]') AS campaign_views,\n        COALESCE((SELECT JSON_AGG(t) FROM clicks t), '[]') AS link_clicks;\n\n-- Partial and RAW queries used to construct arbitrary subscriber\n-- queries for segmentation follow.\n\n-- name: query-subscribers\n-- raw: true\n-- Unprepared statement for issuring arbitrary WHERE conditions for\n-- searching subscribers. While the results are sliced using offset+limit,\n-- there's a COUNT() OVER() that still returns the total result count\n-- for pagination in the frontend, albeit being a field that'll repeat\n-- with every resultant row.\n-- %s = arbitrary expression, %s = order by field, %s = order direction\nSELECT subscribers.* FROM subscribers\n    LEFT JOIN subscriber_lists\n    ON (\n        -- Optional list filtering.\n        (CASE WHEN CARDINALITY($1::INT[]) > 0 THEN true ELSE false END)\n        AND subscriber_lists.subscriber_id = subscribers.id\n        AND ($2 = '' OR subscriber_lists.status = $2::subscription_status)\n    )\n    WHERE (CARDINALITY($1) = 0 OR subscriber_lists.list_id = ANY($1::INT[]))\n    %query%\n    ORDER BY %order% OFFSET $3 LIMIT (CASE WHEN $4 < 1 THEN NULL ELSE $4 END);\n\n-- name: query-subscribers-count\n-- Replica of query-subscribers for obtaining the results count.\nSELECT COUNT(*) AS total FROM subscribers\n    LEFT JOIN subscriber_lists\n    ON (\n        -- Optional list filtering.\n        (CASE WHEN CARDINALITY($1::INT[]) > 0 THEN true ELSE false END)\n        AND subscriber_lists.subscriber_id = subscribers.id\n        AND ($2 = '' OR subscriber_lists.status = $2::subscription_status)\n    )\n    WHERE (CARDINALITY($1) = 0 OR subscriber_lists.list_id = ANY($1::INT[])) %s;\n\n-- name: query-subscribers-count-all\n-- Cached query for getting the \"all\" subscriber count without arbitrary conditions.\nSELECT COALESCE(SUM(subscriber_count), 0) AS total FROM mat_list_subscriber_stats\n    WHERE list_id = ANY(CASE WHEN CARDINALITY($1::INT[]) > 0 THEN $1 ELSE '{0}' END)\n    AND ($2 = '' OR status = $2::subscription_status);\n\n-- name: query-subscribers-for-export\n-- raw: true\n-- Unprepared statement for issuring arbitrary WHERE conditions for\n-- searching subscribers to do bulk CSV export.\n-- %s = arbitrary expression\nSELECT subscribers.id,\n       subscribers.uuid,\n       subscribers.email,\n       subscribers.name,\n       subscribers.status,\n       subscribers.attribs,\n       subscribers.created_at,\n       subscribers.updated_at\n       FROM subscribers\n    LEFT JOIN subscriber_lists\n    ON (\n        -- Optional list filtering.\n        (CASE WHEN CARDINALITY($1::INT[]) > 0 THEN true ELSE false END)\n        AND subscriber_lists.subscriber_id = subscribers.id\n        AND ($4 = '' OR subscriber_lists.status = $4::subscription_status)\n    )\n    WHERE subscriber_lists.list_id = ALL($1::INT[]) AND id > $2\n    AND (CASE WHEN CARDINALITY($3::INT[]) > 0 THEN id=ANY($3) ELSE true END)\n    %query%\n    ORDER BY subscribers.id ASC LIMIT (CASE WHEN $5 < 1 THEN NULL ELSE $5 END);\n\n-- name: query-subscribers-template\n-- raw: true\n-- This raw query is reused in multiple queries (blocklist, add to list, delete)\n-- etc., so it's kept has a raw template to be injected into other raw queries,\n-- and for the same reason, it is not terminated with a semicolon.\n--\n-- All queries that embed this query should expect\n-- $1=true/false (dry-run or not) and $2=[]INT (option list IDs).\n-- That is, their positional arguments should start from $3.\nSELECT subscribers.id FROM subscribers\nLEFT JOIN subscriber_lists\nON (\n    -- Optional list filtering.\n    (CASE WHEN CARDINALITY($2::INT[]) > 0 THEN true ELSE false END)\n    AND subscriber_lists.subscriber_id = subscribers.id\n    AND ($3 = '' OR subscriber_lists.status = $3::subscription_status)\n)\nWHERE subscriber_lists.list_id = ALL($2::INT[]) %s\nLIMIT (CASE WHEN $1 THEN 1 END)\n\n-- name: delete-subscribers-by-query\n-- raw: true\nWITH subs AS (%s)\nDELETE FROM subscribers WHERE id=ANY(SELECT id FROM subs);\n\n-- name: blocklist-subscribers-by-query\n-- raw: true\nWITH subs AS (%s),\nb AS (\n    UPDATE subscribers SET status='blocklisted', updated_at=NOW()\n    WHERE id = ANY(SELECT id FROM subs)\n)\nUPDATE subscriber_lists SET status='unsubscribed', updated_at=NOW()\n    WHERE subscriber_id = ANY(SELECT id FROM subs);\n\n-- name: add-subscribers-to-lists-by-query\n-- raw: true\nWITH subs AS (%s)\nINSERT INTO subscriber_lists (subscriber_id, list_id, status)\n    (SELECT a, b, (CASE WHEN $5 != '' THEN $5::subscription_status ELSE 'unconfirmed' END) FROM UNNEST(ARRAY(SELECT id FROM subs)) a, UNNEST($4::INT[]) b)\n    ON CONFLICT (subscriber_id, list_id) DO NOTHING;\n\n-- name: delete-subscriptions-by-query\n-- raw: true\nWITH subs AS (%s)\nDELETE FROM subscriber_lists\n    WHERE (subscriber_id, list_id) = ANY(SELECT a, b FROM UNNEST(ARRAY(SELECT id FROM subs)) a, UNNEST($4::INT[]) b);\n\n-- name: unsubscribe-subscribers-from-lists-by-query\n-- raw: true\nWITH subs AS (%s)\nUPDATE subscriber_lists SET status='unsubscribed', updated_at=NOW()\n    WHERE (subscriber_id, list_id) = ANY(SELECT a, b FROM UNNEST(ARRAY(SELECT id FROM subs)) a, UNNEST($4::INT[]) b);\n\n\n-- lists\n-- name: get-lists\nSELECT * FROM lists WHERE (CASE WHEN $1 = '' THEN 1=1 ELSE type=$1::list_type END)\n    AND CASE\n        -- Optional list IDs based on user permission.\n        WHEN $3 = TRUE THEN TRUE ELSE id = ANY($4::INT[])\n    END\n    ORDER BY CASE WHEN $2 = 'id' THEN id END, CASE WHEN $2 = 'name' THEN name END;\n\n-- name: query-lists\nWITH ls AS (\n    SELECT COUNT(*) OVER () AS total, lists.* FROM lists WHERE\n    CASE\n        WHEN $1 > 0 THEN id = $1\n        WHEN $2 != '' THEN uuid = $2::UUID\n        WHEN $3 != '' THEN to_tsvector(name) @@ to_tsquery ($3)\n        ELSE TRUE\n    END\n    AND ($4 = '' OR type = $4::list_type)\n    AND ($5 = '' OR optin = $5::list_optin)\n    AND (CARDINALITY($6::VARCHAR(100)[]) = 0 OR $6 <@ tags)\n    AND CASE\n        -- Optional list IDs based on user permission.\n        WHEN $7 = TRUE THEN TRUE ELSE id = ANY($8::INT[])\n    END\n    OFFSET $9 LIMIT (CASE WHEN $10 < 1 THEN NULL ELSE $10 END)\n),\nstatuses AS (\n    SELECT\n        list_id,\n        COALESCE(JSONB_OBJECT_AGG(status, subscriber_count) FILTER (WHERE status IS NOT NULL), '{}') AS subscriber_statuses,\n        SUM(subscriber_count) AS subscriber_count\n    FROM mat_list_subscriber_stats\n    GROUP BY list_id\n)\nSELECT ls.*, COALESCE(ss.subscriber_statuses, '{}') AS subscriber_statuses, COALESCE(ss.subscriber_count, 0) AS subscriber_count\n    FROM ls LEFT JOIN statuses ss ON (ls.id = ss.list_id) ORDER BY %order%;\n\n-- name: get-lists-by-optin\n-- Can have a list of IDs or a list of UUIDs.\nSELECT * FROM lists WHERE (CASE WHEN $1 != '' THEN optin=$1::list_optin ELSE TRUE END) AND\n    (CASE WHEN $2::INT[] IS NOT NULL THEN id = ANY($2::INT[])\n          WHEN $3::UUID[] IS NOT NULL THEN uuid = ANY($3::UUID[])\n    END) ORDER BY name;\n\n-- name: create-list\nINSERT INTO lists (uuid, name, type, optin, tags, description) VALUES($1, $2, $3, $4, $5, $6) RETURNING id;\n\n-- name: update-list\nUPDATE lists SET\n    name=(CASE WHEN $2 != '' THEN $2 ELSE name END),\n    type=(CASE WHEN $3 != '' THEN $3::list_type ELSE type END),\n    optin=(CASE WHEN $4 != '' THEN $4::list_optin ELSE optin END),\n    tags=$5::VARCHAR(100)[],\n    description=(CASE WHEN $6 != '' THEN $6 ELSE description END),\n    updated_at=NOW()\nWHERE id = $1;\n\n-- name: update-lists-date\nUPDATE lists SET updated_at=NOW() WHERE id = ANY($1);\n\n-- name: delete-lists\nDELETE FROM lists WHERE id = ALL($1);\n\n\n-- campaigns\n-- name: create-campaign\n-- This creates the campaign and inserts campaign_lists relationships.\nWITH tpl AS (\n    -- If there's no template_id given, use the default template.\n    SELECT (CASE WHEN $13 = 0 THEN id ELSE $13 END) AS id FROM templates WHERE is_default IS TRUE\n),\ncounts AS (\n    -- This is going to be slow on large databases.\n    SELECT\n        COALESCE(COUNT(DISTINCT sl.subscriber_id), 0) AS to_send, COALESCE(MAX(s.id), 0) AS max_sub_id\n    FROM subscriber_lists sl\n        JOIN lists l ON sl.list_id = l.id\n        JOIN subscribers s ON sl.subscriber_id = s.id\n    WHERE sl.list_id = ANY($14::INT[])\n      AND s.status != 'blocklisted'\n      AND (\n        (l.optin = 'double' AND sl.status = 'confirmed') OR\n        (l.optin != 'double' AND sl.status != 'unsubscribed')\n      )\n),\ncamp AS (\n    INSERT INTO campaigns (uuid, type, name, subject, from_email, body, altbody, content_type, send_at, headers, tags, messenger, template_id, to_send, max_subscriber_id, archive, archive_slug, archive_template_id, archive_meta)\n        SELECT $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12,\n            (SELECT id FROM tpl), (SELECT to_send FROM counts),\n            (SELECT max_sub_id FROM counts), $15, $16,\n            (CASE WHEN $17 = 0 THEN (SELECT id FROM tpl) ELSE $17 END), $18\n        RETURNING id\n),\nmed AS (\n    INSERT INTO campaign_media (campaign_id, media_id, filename)\n        (SELECT (SELECT id FROM camp), id, filename FROM media WHERE id=ANY($19::INT[]))\n),\ninsLists AS (\n    INSERT INTO campaign_lists (campaign_id, list_id, list_name)\n        SELECT (SELECT id FROM camp), id, name FROM lists WHERE id=ANY($14::INT[])\n)\nSELECT id FROM camp;\n\n-- name: query-campaigns\n-- Here, 'lists' is returned as an aggregated JSON array from campaign_lists because\n-- the list reference may have been deleted.\n-- While the results are sliced using offset+limit,\n-- there's a COUNT() OVER() that still returns the total result count\n-- for pagination in the frontend, albeit being a field that'll repeat\n-- with every resultant row.\nSELECT  c.id, c.uuid, c.name, c.subject, c.from_email,\n        c.messenger, c.started_at, c.to_send, c.sent, c.type,\n        c.body, c.altbody, c.send_at, c.headers, c.status, c.content_type, c.tags,\n        c.template_id, c.archive, c.archive_slug, c.archive_template_id, c.archive_meta,\n        c.created_at, c.updated_at,\n        COUNT(*) OVER () AS total,\n        (\n            SELECT COALESCE(ARRAY_TO_JSON(ARRAY_AGG(l)), '[]') FROM (\n                SELECT COALESCE(campaign_lists.list_id, 0) AS id,\n                campaign_lists.list_name AS name\n                FROM campaign_lists WHERE campaign_lists.campaign_id = c.id\n        ) l\n    ) AS lists\nFROM campaigns c\nWHERE ($1 = 0 OR id = $1)\n    AND (CARDINALITY($2::campaign_status[]) = 0 OR status = ANY($2))\n    AND (CARDINALITY($3::VARCHAR(100)[]) = 0 OR $3 <@ tags)\n    AND ($4 = '' OR TO_TSVECTOR(CONCAT(name, ' ', subject)) @@ TO_TSQUERY($4) OR CONCAT(c.name, ' ', c.subject) ILIKE $4)\nORDER BY %order% OFFSET $5 LIMIT (CASE WHEN $6 < 1 THEN NULL ELSE $6 END);\n\n-- name: get-campaign\nSELECT campaigns.*,\n    COALESCE(templates.body, (SELECT body FROM templates WHERE is_default = true LIMIT 1)) AS template_body\n    FROM campaigns\n    LEFT JOIN templates ON (\n        CASE WHEN $4 = 'default' THEN templates.id = campaigns.template_id\n        ELSE templates.id = campaigns.archive_template_id END\n    )\n    WHERE CASE\n            WHEN $1 > 0 THEN campaigns.id = $1\n            WHEN $3 != '' THEN campaigns.archive_slug = $3\n            ELSE uuid = $2\n          END;\n\n-- name: get-archived-campaigns\nSELECT COUNT(*) OVER () AS total, campaigns.*,\n    COALESCE(templates.body, (SELECT body FROM templates WHERE is_default = true LIMIT 1)) AS template_body\n    FROM campaigns\n    LEFT JOIN templates ON (\n        CASE WHEN $3 = 'default' THEN templates.id = campaigns.template_id\n        ELSE templates.id = campaigns.archive_template_id END\n    )\n    WHERE campaigns.archive=true AND campaigns.type='regular' AND campaigns.status=ANY('{running, paused, finished}')\n    ORDER by campaigns.created_at DESC OFFSET $1 LIMIT $2;\n\n-- name: get-campaign-stats\n-- This query is used to lazy load campaign stats (views, counts, list of lists) given a list of campaign IDs.\n-- The query returns results in the same order as the given campaign IDs, and for non-existent campaign IDs,\n-- the query still returns a row with 0 values. Thus, for lazy loading, the application simply iterate on the results in\n-- the same order as the list of campaigns it would've queried and attach the results.\nWITH lists AS (\n    SELECT campaign_id, JSON_AGG(JSON_BUILD_OBJECT('id', list_id, 'name', list_name)) AS lists FROM campaign_lists\n    WHERE campaign_id = ANY($1) GROUP BY campaign_id\n),\nmedia AS (\n    SELECT campaign_id, JSON_AGG(JSON_BUILD_OBJECT('id', media_id, 'filename', filename)) AS media FROM campaign_media\n    WHERE campaign_id = ANY($1) GROUP BY campaign_id\n),\nviews AS (\n    SELECT campaign_id, COUNT(campaign_id) as num FROM campaign_views\n    WHERE campaign_id = ANY($1)\n    GROUP BY campaign_id\n),\nclicks AS (\n    SELECT campaign_id, COUNT(campaign_id) as num FROM link_clicks\n    WHERE campaign_id = ANY($1)\n    GROUP BY campaign_id\n),\nbounces AS (\n    SELECT campaign_id, COUNT(campaign_id) as num FROM bounces\n    WHERE campaign_id = ANY($1)\n    GROUP BY campaign_id\n)\nSELECT id as campaign_id,\n    COALESCE(v.num, 0) AS views,\n    COALESCE(c.num, 0) AS clicks,\n    COALESCE(b.num, 0) AS bounces,\n    COALESCE(l.lists, '[]') AS lists,\n    COALESCE(m.media, '[]') AS media\nFROM (SELECT id FROM UNNEST($1) AS id) x\nLEFT JOIN lists AS l ON (l.campaign_id = id)\nLEFT JOIN media AS m ON (m.campaign_id = id)\nLEFT JOIN views AS v ON (v.campaign_id = id)\nLEFT JOIN clicks AS c ON (c.campaign_id = id)\nLEFT JOIN bounces AS b ON (b.campaign_id = id)\nORDER BY ARRAY_POSITION($1, id);\n\n-- name: get-campaign-for-preview\nSELECT campaigns.*, COALESCE(templates.body, (SELECT body FROM templates WHERE is_default = true LIMIT 1)) AS template_body,\n(\n\tSELECT COALESCE(ARRAY_TO_JSON(ARRAY_AGG(l)), '[]') FROM (\n\t\tSELECT COALESCE(campaign_lists.list_id, 0) AS id,\n        campaign_lists.list_name AS name\n        FROM campaign_lists WHERE campaign_lists.campaign_id = campaigns.id\n\t) l\n) AS lists\nFROM campaigns\nLEFT JOIN templates ON (templates.id = (CASE WHEN $2=0 THEN campaigns.template_id ELSE $2 END))\nWHERE campaigns.id = $1;\n\n-- name: get-campaign-status\nSELECT id, status, to_send, sent, started_at, updated_at\n    FROM campaigns\n    WHERE status=$1;\n\n-- name: next-campaigns\n-- Retreives campaigns that are running (or scheduled and the time's up) and need\n-- to be processed. It updates the to_send count and max_subscriber_id of the campaign,\n-- that is, the total number of subscribers to be processed across all lists of a campaign.\n-- Thus, it has a sideaffect.\n-- In addition, it finds the max_subscriber_id, the upper limit across all lists of\n-- a campaign. This is used to fetch and slice subscribers for the campaign in next-campaign-subscribers.\nWITH camps AS (\n    -- Get all running campaigns and their template bodies (if the template's deleted, the default template body instead)\n    SELECT campaigns.*, COALESCE(templates.body, (SELECT body FROM templates WHERE is_default = true LIMIT 1)) AS template_body\n    FROM campaigns\n    LEFT JOIN templates ON (templates.id = campaigns.template_id)\n    WHERE (status='running' OR (status='scheduled' AND NOW() >= campaigns.send_at))\n    AND NOT(campaigns.id = ANY($1::INT[]))\n),\ncampLists AS (\n    -- Get the list_ids and their optin statuses for the campaigns found in the previous step.\n    SELECT lists.id AS list_id, campaign_id, optin FROM lists\n    INNER JOIN campaign_lists ON (campaign_lists.list_id = lists.id)\n    WHERE campaign_lists.campaign_id = ANY(SELECT id FROM camps)\n),\ncampMedia AS (\n    -- Get the list_ids and their optin statuses for the campaigns found in the previous step.\n    SELECT campaign_id, ARRAY_AGG(campaign_media.media_id)::INT[] AS media_id FROM campaign_media\n    WHERE campaign_id = ANY(SELECT id FROM camps) AND media_id IS NOT NULL\n    GROUP BY campaign_id\n),\ncounts AS (\n    SELECT camps.id AS campaign_id, COUNT(DISTINCT sl.subscriber_id) AS to_send, COALESCE(MAX(sl.subscriber_id), 0) AS max_subscriber_id\n    FROM camps\n    JOIN campLists cl ON cl.campaign_id = camps.id\n    JOIN subscriber_lists sl ON sl.list_id = cl.list_id\n        AND (\n            CASE\n                WHEN camps.type = 'optin' THEN sl.status = 'unconfirmed' AND cl.optin = 'double'\n                WHEN cl.optin = 'double' THEN sl.status = 'confirmed'\n                ELSE sl.status != 'unsubscribed'\n            END\n        )\n    JOIN subscribers s ON (s.id = sl.subscriber_id AND s.status != 'blocklisted')\n    GROUP BY camps.id\n),\nupdateCounts AS (\n    WITH uc (campaign_id, sent_count) AS (SELECT * FROM unnest($1::INT[], $2::INT[]))\n    UPDATE campaigns\n    SET sent = sent + uc.sent_count\n    FROM uc WHERE campaigns.id = uc.campaign_id\n),\nu AS (\n    -- For each campaign, update the to_send count and set the max_subscriber_id.\n    UPDATE campaigns AS ca\n    SET to_send = co.to_send,\n        status = (CASE WHEN status != 'running' THEN 'running' ELSE status END),\n        max_subscriber_id = co.max_subscriber_id,\n        started_at=(CASE WHEN ca.started_at IS NULL THEN NOW() ELSE ca.started_at END)\n    FROM (SELECT * FROM counts) co\n    WHERE ca.id = co.campaign_id\n)\nSELECT camps.*, campMedia.media_id FROM camps LEFT JOIN campMedia ON (campMedia.campaign_id = camps.id);\n\n-- name: get-campaign-analytics-unique-counts\nWITH intval AS (\n    -- For intervals < a week, aggregate counts hourly, otherwise daily.\n    SELECT CASE WHEN (EXTRACT (EPOCH FROM ($3::TIMESTAMP - $2::TIMESTAMP)) / 86400) >= 7 THEN 'day' ELSE 'hour' END\n),\nuniqIDs AS (\n    SELECT DISTINCT ON(subscriber_id) subscriber_id, campaign_id, DATE_TRUNC((SELECT * FROM intval), created_at) AS \"timestamp\"\n    FROM %s\n    WHERE campaign_id=ANY($1) AND created_at >= $2 AND created_at <= $3\n    ORDER BY subscriber_id, \"timestamp\"\n)\nSELECT COUNT(*) AS \"count\", campaign_id, \"timestamp\"\n    FROM uniqIDs GROUP BY campaign_id, \"timestamp\" ORDER BY \"timestamp\" ASC;\n\n-- name: get-campaign-analytics-counts\n-- raw: true\nWITH intval AS (\n    -- For intervals < a week, aggregate counts hourly, otherwise daily.\n    SELECT CASE WHEN (EXTRACT (EPOCH FROM ($3::TIMESTAMP - $2::TIMESTAMP)) / 86400) >= 7 THEN 'day' ELSE 'hour' END\n)\nSELECT campaign_id, COUNT(*) AS \"count\", DATE_TRUNC((SELECT * FROM intval), created_at) AS \"timestamp\"\n    FROM %s\n    WHERE campaign_id=ANY($1) AND created_at >= $2 AND created_at <= $3\n    GROUP BY campaign_id, \"timestamp\" ORDER BY \"timestamp\" ASC;\n\n-- name: get-campaign-bounce-counts\nWITH intval AS (\n    -- For intervals < a week, aggregate counts hourly, otherwise daily.\n    SELECT CASE WHEN (EXTRACT (EPOCH FROM ($3::TIMESTAMP - $2::TIMESTAMP)) / 86400) >= 7 THEN 'day' ELSE 'hour' END\n)\nSELECT campaign_id, COUNT(*) AS \"count\", DATE_TRUNC((SELECT * FROM intval), created_at) AS \"timestamp\"\n    FROM bounces\n    WHERE campaign_id=ANY($1) AND created_at >= $2 AND created_at <= $3\n    GROUP BY campaign_id, \"timestamp\" ORDER BY \"timestamp\" ASC;\n\n-- name: get-campaign-link-counts\n-- raw: true\n-- %s = * or DISTINCT subscriber_id (prepared based on based on individual tracking=on/off). Prepared on boot.\nSELECT COUNT(%s) AS \"count\", url\n    FROM link_clicks\n    LEFT JOIN links ON (link_clicks.link_id = links.id)\n    WHERE campaign_id=ANY($1) AND link_clicks.created_at >= $2 AND link_clicks.created_at <= $3\n    GROUP BY links.url ORDER BY \"count\" DESC LIMIT 50;\n\n-- name: get-running-campaign\n-- Returns the metadata for a running campaign that is required by next-campaign-subscribers to retrieve\n-- a batch of campaign subscribers for processing.\nSELECT campaigns.id AS campaign_id, campaigns.type as campaign_type, last_subscriber_id, max_subscriber_id, lists.id AS list_id\n    FROM campaigns\n    LEFT JOIN campaign_lists ON (campaign_lists.campaign_id = campaigns.id)\n    LEFT JOIN lists ON (lists.id = campaign_lists.list_id)\n    WHERE campaigns.id = $1 AND status='running';\n\n-- name: next-campaign-subscribers\n-- Returns a batch of subscribers in a given campaign starting from the last checkpoint\n-- (last_subscriber_id). Every fetch updates the checkpoint and the sent count, which means\n-- every fetch returns a new batch of subscribers until all rows are exhausted.\n--\n-- In previous versions, get-running-campaign + this was a single query spread across multiple\n-- CTEs, but despite numerous permutations and combinations, Postgres query planner simply would not use\n-- the right indexes on subscriber_lists when the JOIN or ids were referenced dynamically from campLists\n-- (be it a CTE or various kinds of joins). However, statically providing the list IDs to JOIN on ($5::INT[])\n-- the query planner works as expected. The difference is staggering. ~15 seconds on a subscribers table with 15m\n-- rows and a subscriber_lists table with 70 million rows when fetching subscribers for a campaign with a single list,\n-- vs. a few million seconds using this current approach.\nWITH campLists AS (\n    SELECT lists.id AS list_id, optin FROM lists\n    LEFT JOIN campaign_lists ON campaign_lists.list_id = lists.id\n    WHERE campaign_lists.campaign_id = $1\n),\nsubs AS (\n    SELECT s.*\n    FROM (\n        SELECT DISTINCT s.id\n        FROM subscriber_lists sl\n        JOIN campLists ON sl.list_id = campLists.list_id\n        JOIN subscribers s ON s.id = sl.subscriber_id\n        WHERE\n            sl.list_id = ANY($5::INT[])\n            -- last_subscriber_id\n            AND s.id > $3\n             -- max_subscriber_id\n            AND s.id <= $4\n             -- Subscriber should not be blacklisted.\n            AND s.status != 'blocklisted'\n            AND (\n                -- If it's an optin campaign and the list is double-optin, only pick unconfirmed subscribers.\n                ($2 = 'optin' AND sl.status = 'unconfirmed' AND campLists.optin = 'double')\n                OR (\n                    -- It is a regular campaign.\n                    $2 != 'optin' AND (\n                        -- It is a double optin list. Only pick confirmed subscribers.\n                        (campLists.optin = 'double' AND sl.status = 'confirmed') OR\n\n                        -- It is a single optin list. Pick all non-unsubscribed subscribers.\n                        (campLists.optin != 'double' AND sl.status != 'unsubscribed')\n                    )\n                )\n            )\n        ORDER BY s.id LIMIT $6\n    ) subIDs JOIN subscribers s ON (s.id = subIDs.id) ORDER BY s.id\n),\nu AS (\n    UPDATE campaigns\n    SET last_subscriber_id = (SELECT MAX(id) FROM subs), updated_at = NOW()\n    WHERE (SELECT COUNT(id) FROM subs) > 0 AND id=$1\n)\nSELECT * FROM subs;\n\n-- name: delete-campaign-views\nDELETE FROM campaign_views WHERE created_at < $1;\n\n-- name: delete-campaign-link-clicks\nDELETE FROM link_clicks WHERE created_at < $1;\n\n-- name: get-one-campaign-subscriber\nSELECT * FROM subscribers\nLEFT JOIN subscriber_lists ON (subscribers.id = subscriber_lists.subscriber_id AND subscriber_lists.status != 'unsubscribed')\nWHERE subscriber_lists.list_id=ANY(\n    SELECT list_id FROM campaign_lists where campaign_id=$1 AND list_id IS NOT NULL\n)\nORDER BY RANDOM() LIMIT 1;\n\n-- name: update-campaign\nWITH camp AS (\n    UPDATE campaigns SET\n        name=$2,\n        subject=$3,\n        from_email=$4,\n        body=$5,\n        altbody=(CASE WHEN $6 = '' THEN NULL ELSE $6 END),\n        content_type=$7::content_type,\n        send_at=$8::TIMESTAMP WITH TIME ZONE,\n        status=(CASE WHEN NOT $9 THEN 'draft' ELSE status END),\n        headers=$10,\n        tags=$11::VARCHAR(100)[],\n        messenger=$12,\n        template_id=$13,\n        archive=$15,\n        archive_slug=$16,\n        archive_template_id=$17,\n        archive_meta=$18,\n        updated_at=NOW()\n    WHERE id = $1 RETURNING id\n),\nclists AS (\n    -- Reset list relationships\n    DELETE FROM campaign_lists WHERE campaign_id = $1 AND NOT(list_id = ANY($14))\n),\nmed AS (\n    DELETE FROM campaign_media WHERE campaign_id = $1\n    AND ( media_id IS NULL or NOT(media_id = ANY($19))) RETURNING media_id\n),\nmedi AS (\n    INSERT INTO campaign_media (campaign_id, media_id, filename)\n        (SELECT $1 AS campaign_id, id, filename FROM media WHERE id=ANY($19::INT[]))\n        ON CONFLICT (campaign_id, media_id) DO NOTHING\n)\nINSERT INTO campaign_lists (campaign_id, list_id, list_name)\n    (SELECT $1 as campaign_id, id, name FROM lists WHERE id=ANY($14::INT[]))\n    ON CONFLICT (campaign_id, list_id) DO UPDATE SET list_name = EXCLUDED.list_name;\n\n-- name: update-campaign-counts\nUPDATE campaigns SET\n    to_send=(CASE WHEN $2 != 0 THEN $2 ELSE to_send END),\n    sent=sent+$3,\n    last_subscriber_id=(CASE WHEN $4 > 0 THEN $4 ELSE to_send END),\n    updated_at=NOW()\nWHERE id=$1;\n\n-- name: update-campaign-status\nUPDATE campaigns SET status=$2, updated_at=NOW() WHERE id = $1;\n\n-- name: update-campaign-archive\nUPDATE campaigns SET\n    archive=$2,\n    archive_slug=(CASE WHEN $3::TEXT = '' THEN NULL ELSE $3 END),\n    archive_template_id=(CASE WHEN $4 > 0 THEN $4 ELSE archive_template_id END),\n    archive_meta=(CASE WHEN $5::TEXT != '' THEN $5::JSONB ELSE archive_meta END),\n    updated_at=NOW()\n    WHERE id=$1;\n\n-- name: delete-campaign\nDELETE FROM campaigns WHERE id=$1;\n\n-- name: register-campaign-view\nWITH view AS (\n    SELECT campaigns.id as campaign_id, subscribers.id AS subscriber_id FROM campaigns\n    LEFT JOIN subscribers ON (CASE WHEN $2::TEXT != '' THEN subscribers.uuid = $2::UUID ELSE FALSE END)\n    WHERE campaigns.uuid = $1\n)\nINSERT INTO campaign_views (campaign_id, subscriber_id)\n    VALUES((SELECT campaign_id FROM view), (SELECT subscriber_id FROM view));\n\n-- templates\n-- name: get-templates\n-- Only if the second param ($2) is true, body is returned.\nSELECT id, name, type, subject, (CASE WHEN $2 = false THEN body ELSE '' END) as body,\n    is_default, created_at, updated_at\n    FROM templates WHERE ($1 = 0 OR id = $1) AND ($3 = '' OR type = $3::template_type)\n    ORDER BY created_at;\n\n-- name: create-template\nINSERT INTO templates (name, type, subject, body) VALUES($1, $2, $3, $4) RETURNING id;\n\n-- name: update-template\nUPDATE templates SET\n    name=(CASE WHEN $2 != '' THEN $2 ELSE name END),\n    subject=(CASE WHEN $3 != '' THEN $3 ELSE name END),\n    body=(CASE WHEN $4 != '' THEN $4 ELSE body END),\n    updated_at=NOW()\nWHERE id = $1;\n\n-- name: set-default-template\nWITH u AS (\n    UPDATE templates SET is_default=true WHERE id=$1 AND type='campaign' RETURNING id\n)\nUPDATE templates SET is_default=false WHERE id != $1;\n\n-- name: delete-template\n-- Delete a template as long as there's more than one. On deletion, set all campaigns\n-- with that template to the default template instead.\nWITH tpl AS (\n    DELETE FROM templates WHERE id = $1 AND (SELECT COUNT(id) FROM templates) > 1 AND is_default = false RETURNING id\n),\ndef AS (\n    SELECT id FROM templates WHERE is_default = true AND type='campaign' LIMIT 1\n),\nup AS (\n    UPDATE campaigns SET template_id = (SELECT id FROM def) WHERE (SELECT id FROM tpl) > 0 AND template_id = $1\n)\nSELECT id FROM tpl;\n\n\n-- media\n-- name: insert-media\nINSERT INTO media (uuid, filename, thumb, content_type, provider, meta, created_at) VALUES($1, $2, $3, $4, $5, $6, NOW()) RETURNING id;\n\n-- name: query-media\nSELECT COUNT(*) OVER () AS total, * FROM media\n    WHERE ($1 = '' OR filename ILIKE $1) AND provider=$2 ORDER BY created_at DESC OFFSET $3 LIMIT $4;\n\n-- name: get-media\nSELECT * FROM media WHERE CASE WHEN $1 > 0 THEN id = $1 ELSE uuid = $2 END;\n\n-- name: delete-media\nDELETE FROM media WHERE id=$1 RETURNING filename;\n\n-- links\n-- name: create-link\nINSERT INTO links (uuid, url) VALUES($1, $2) ON CONFLICT (url) DO UPDATE SET url=EXCLUDED.url RETURNING uuid;\n\n-- name: register-link-click\nWITH link AS(\n    SELECT id, url FROM links WHERE uuid = $1\n)\nINSERT INTO link_clicks (campaign_id, subscriber_id, link_id) VALUES(\n    (SELECT id FROM campaigns WHERE uuid = $2),\n    (SELECT id FROM subscribers WHERE\n        (CASE WHEN $3::TEXT != '' THEN subscribers.uuid = $3::UUID ELSE FALSE END)\n    ),\n    (SELECT id FROM link)\n) RETURNING (SELECT url FROM link);\n\n-- name: get-dashboard-charts\nSELECT data FROM mat_dashboard_charts;\n\n-- name: get-dashboard-counts\nSELECT data FROM mat_dashboard_counts;\n\n-- name: get-settings\nSELECT JSON_OBJECT_AGG(key, value) AS settings FROM (SELECT * FROM settings ORDER BY key) t;\n\n-- name: update-settings\nUPDATE settings AS s SET value = c.value\n    -- For each key in the incoming JSON map, update the row with the key and its value.\n    FROM(SELECT * FROM JSONB_EACH($1)) AS c(key, value) WHERE s.key = c.key;\n\n-- name: record-bounce\n-- Insert a bounce and count the bounces for the subscriber and either unsubscribe them,\nWITH sub AS (\n    SELECT id, status FROM subscribers WHERE CASE WHEN $1 != '' THEN uuid = $1::UUID ELSE email = $2 END\n),\ncamp AS (\n    SELECT id FROM campaigns WHERE $3 != '' AND uuid = $3::UUID\n),\nnum AS (\n    -- Add a +1 to include the current insertion that is happening.\n    SELECT COUNT(*) + 1 AS num FROM bounces WHERE subscriber_id = (SELECT id FROM sub) AND type = $4\n),\n-- block1 and block2 will run when $8 = 'blocklist' and the number of bounces exceed $8.\nblock1 AS (\n    UPDATE subscribers SET status='blocklisted'\n    WHERE $9 = 'blocklist' AND (SELECT num FROM num) >= $8 AND id = (SELECT id FROM sub) AND (SELECT status FROM sub) != 'blocklisted'\n),\nblock2 AS (\n    UPDATE subscriber_lists SET status='unsubscribed'\n    WHERE $9 = 'unsubscribe' AND (SELECT num FROM num) >= $8 AND subscriber_id = (SELECT id FROM sub) AND (SELECT status FROM sub) != 'blocklisted'\n),\nbounce AS (\n    -- Record the bounce if the subscriber is not already blocklisted;\n    INSERT INTO bounces (subscriber_id, campaign_id, type, source, meta, created_at)\n    SELECT (SELECT id FROM sub), (SELECT id FROM camp), $4, $5, $6, $7\n    WHERE NOT EXISTS (SELECT 1 WHERE (SELECT status FROM sub) = 'blocklisted' OR (SELECT num FROM num) > $8)\n)\n-- This delete  will only run when $9 = 'delete' and the number of bounces exceed $8.\nDELETE FROM subscribers\n    WHERE $9 = 'delete' AND (SELECT num FROM num) >= $8 AND id = (SELECT id FROM sub);\n\n-- name: query-bounces\nSELECT COUNT(*) OVER () AS total,\n    bounces.id,\n    bounces.type,\n    bounces.source,\n    bounces.meta,\n    bounces.created_at,\n    bounces.subscriber_id,\n    subscribers.uuid AS subscriber_uuid,\n    subscribers.email AS email,\n    subscribers.email AS email,\n    (\n        CASE WHEN bounces.campaign_id IS NOT NULL\n        THEN JSON_BUILD_OBJECT('id', bounces.campaign_id, 'name', campaigns.name)\n        ELSE NULL END\n    ) AS campaign\nFROM bounces\nLEFT JOIN subscribers ON (subscribers.id = bounces.subscriber_id)\nLEFT JOIN campaigns ON (campaigns.id = bounces.campaign_id)\nWHERE ($1 = 0 OR bounces.id = $1)\n    AND ($2 = 0 OR bounces.campaign_id = $2)\n    AND ($3 = 0 OR bounces.subscriber_id = $3)\n    AND ($4 = '' OR bounces.source = $4)\nORDER BY %order% OFFSET $5 LIMIT $6;\n\n-- name: delete-bounces\nDELETE FROM bounces WHERE CARDINALITY($1::INT[]) = 0 OR id = ANY($1);\n\n-- name: delete-bounces-by-subscriber\nWITH sub AS (\n    SELECT id FROM subscribers WHERE CASE WHEN $1 > 0 THEN id = $1 ELSE uuid = $2 END\n)\nDELETE FROM bounces WHERE subscriber_id = (SELECT id FROM sub);\n\n\n-- name: get-db-info\nSELECT JSON_BUILD_OBJECT('version', (SELECT VERSION()),\n                        'size_mb', (SELECT ROUND(pg_database_size((SELECT CURRENT_DATABASE()))/(1024^2)))) AS info;\n\n-- name: create-user\nINSERT INTO users (username, password_login, password, email, name, type, user_role_id, list_role_id, status)\n    VALUES($1, $2, (\n        CASE\n            -- For user types with password_login enabled, bcrypt and store the hash of the password.\n            WHEN $6::user_type != 'api' AND $2 AND $3 != ''\n                THEN CRYPT($3, GEN_SALT('bf'))\n            WHEN $6 = 'api'\n            -- For APIs, store the password (token) as-is.\n                THEN $3\n            ELSE NULL\n        END\n    ), $4, $5, $6, (SELECT id FROM roles WHERE id = $7 AND type = 'user'), (SELECT id FROM roles WHERE id = $8 AND type = 'list'), $9) RETURNING id;\n\n-- name: update-user\nWITH u AS (\n    -- Edit is only allowed if there are more than 1 active super users or\n    -- if the only superadmin user's status/role isn't being changed.\n    SELECT\n        CASE\n            WHEN (SELECT COUNT(*) FROM users WHERE id != $1 AND status = 'enabled' AND type = 'user' AND user_role_id = 1) = 0  AND ($8 != 1 OR $10 != 'enabled')\n            THEN FALSE\n            ELSE TRUE\n        END AS canEdit\n)\nUPDATE users SET\n    username=(CASE WHEN $2 != '' THEN $2 ELSE username END),\n    password_login=$3,\n    password=(CASE WHEN $3 = TRUE THEN (CASE WHEN $4 != '' THEN CRYPT($4, GEN_SALT('bf')) ELSE password END) ELSE NULL END),\n    email=(CASE WHEN $5 != '' THEN $5 ELSE email END),\n    name=(CASE WHEN $6 != '' THEN $6 ELSE name END),\n    type=(CASE WHEN $7 != '' THEN $7::user_type ELSE type END),\n    user_role_id=(CASE WHEN $8 != 0 THEN (SELECT id FROM roles WHERE id = $8 AND type = 'user') ELSE user_role_id END),\n    list_role_id=(\n        CASE\n            WHEN $9 < 0 THEN NULL\n            WHEN $9 > 0 THEN (SELECT id FROM roles WHERE id = $9 AND type = 'list')\n            ELSE list_role_id END\n    ),\n    status=(CASE WHEN $10 != '' THEN $10::user_status ELSE status END),\n    updated_at=NOW()\n    WHERE id=$1 AND (SELECT canEdit FROM u) = TRUE;\n\n-- name: delete-users\nWITH u AS (\n    SELECT COUNT(*) AS num FROM users WHERE NOT(id = ANY($1)) AND user_role_id=1 AND status='enabled'\n)\nDELETE FROM users WHERE id = ALL($1) AND (SELECT num FROM u) > 0;\n\n-- name: get-users\nWITH ur AS (\n    SELECT id, name, permissions FROM roles WHERE type = 'user' AND parent_id IS NULL\n),\nlr AS (\n    SELECT r.id, r.name, r.permissions, r.list_id, l.name AS list_name\n    FROM roles r\n    LEFT JOIN lists l ON r.list_id = l.id\n    WHERE r.type = 'list' AND r.parent_id IS NULL\n),\nlp AS (\n    SELECT lr.id AS list_role_id,\n        JSONB_AGG(\n            JSONB_BUILD_OBJECT(\n                'id', COALESCE(cr.list_id, lr.list_id),\n                'name', COALESCE(cl.name, lr.list_name),\n                'permissions', COALESCE(cr.permissions, lr.permissions)\n            )\n        ) AS list_role_perms\n    FROM lr\n    LEFT JOIN roles cr ON cr.parent_id = lr.id AND cr.type = 'list'\n    LEFT JOIN lists cl ON cr.list_id = cl.id\n    GROUP BY lr.id\n)\nSELECT \n    users.*,\n    ur.id AS user_role_id,\n    ur.name AS user_role_name,\n    ur.permissions AS user_role_permissions,\n    lp.list_role_id,\n    lr.name AS list_role_name,\n    lp.list_role_perms\nFROM users\n    LEFT JOIN ur ON users.user_role_id = ur.id\n    LEFT JOIN lp ON users.list_role_id = lp.list_role_id\n    LEFT JOIN lr ON lp.list_role_id = lr.id\n    ORDER BY users.created_at;\n\n-- name: get-user\nWITH sel AS (\n    SELECT * FROM users\n    WHERE\n    (\n        CASE\n            WHEN $1::INT != 0 THEN users.id = $1\n            WHEN $2::TEXT != '' THEN username = $2\n            WHEN $3::TEXT != '' THEN email = $3\n        END\n    )\n)\nSELECT \n    sel.*,\n    ur.id AS user_role_id,\n    ur.name AS user_role_name,\n    ur.permissions AS user_role_permissions,\n    lr.id AS list_role_id,\n    lr.name AS list_role_name,\n    lp.list_role_perms\nFROM sel\n    LEFT JOIN roles ur ON sel.user_role_id = ur.id AND ur.type = 'user' AND ur.parent_id IS NULL\n    LEFT JOIN (\n        SELECT r.id, r.name, r.permissions, r.list_id, l.name AS list_name\n        FROM roles r\n        LEFT JOIN lists l ON r.list_id = l.id\n        WHERE r.type = 'list' AND r.parent_id IS NULL\n    ) lr ON sel.list_role_id = lr.id\n    LEFT JOIN LATERAL (\n        SELECT JSONB_AGG(\n                JSONB_BUILD_OBJECT(\n                    'id', COALESCE(cr.list_id, lr.list_id),\n                    'name', COALESCE(cl.name, lr.list_name),\n                    'permissions', COALESCE(cr.permissions, lr.permissions)\n                )\n            ) AS list_role_perms\n        FROM roles cr\n        LEFT JOIN lists cl ON cr.list_id = cl.id\n        WHERE cr.parent_id = lr.id AND cr.type = 'list'\n        GROUP BY lr.id\n    ) lp ON TRUE;\n\n\n-- name: get-api-tokens\nSELECT username, password FROM users WHERE status='enabled' AND type='api';\n\n-- name: login-user\nWITH u AS (\n    SELECT users.*, r.name as role_name, r.permissions FROM users\n    LEFT JOIN roles r ON (r.id = users.user_role_id)\n    WHERE username = $1 AND status != 'disabled' AND password_login = TRUE\n    AND CRYPT($2, password) = password\n)\nUPDATE users SET loggedin_at = NOW() WHERE id = (SELECT id FROM u) RETURNING *;\n\n-- name: update-user-profile\nUPDATE users SET name=$2, email=(CASE WHEN password_login THEN $3 ELSE email END),\n    password=(CASE WHEN $4 = TRUE THEN (CASE WHEN $5 != '' THEN CRYPT($5, GEN_SALT('bf')) ELSE password END) ELSE NULL END)\n    WHERE id=$1;\n\n-- name: update-user-login\nUPDATE users SET loggedin_at=NOW(), avatar=(CASE WHEN $2 != '' THEN $2 ELSE avatar END) WHERE id=$1;\n\n-- name: get-user-roles\nWITH mainroles AS (\n    SELECT ur.* FROM roles ur WHERE type = 'user' AND ur.parent_id IS NULL\n),\nlistPerms AS (\n    SELECT ur.parent_id, JSONB_AGG(JSONB_BUILD_OBJECT('id', ur.list_id, 'name', lists.name, 'permissions', ur.permissions)) AS listPerms\n    FROM roles ur\n    LEFT JOIN lists ON(lists.id = ur.list_id)\n    WHERE ur.parent_id IS NOT NULL GROUP BY ur.parent_id\n)\nSELECT p.*, COALESCE(l.listPerms, '[]'::JSONB) AS \"list_permissions\" FROM mainroles p\n    LEFT JOIN listPerms l ON p.id = l.parent_id ORDER BY p.created_at;\n\n-- name: get-list-roles\nWITH mainroles AS (\n    SELECT ur.* FROM roles ur WHERE type = 'list' AND ur.parent_id IS NULL\n),\nlistPerms AS (\n    SELECT ur.parent_id, JSONB_AGG(JSONB_BUILD_OBJECT('id', ur.list_id, 'name', lists.name, 'permissions', ur.permissions)) AS listPerms\n    FROM roles ur\n    LEFT JOIN lists ON(lists.id = ur.list_id)\n    WHERE ur.parent_id IS NOT NULL GROUP BY ur.parent_id\n)\nSELECT p.*, COALESCE(l.listPerms, '[]'::JSONB) AS \"list_permissions\" FROM mainroles p\n    LEFT JOIN listPerms l ON p.id = l.parent_id ORDER BY p.created_at;\n\n\n-- name: create-role\nINSERT INTO roles (name, type, permissions, created_at, updated_at) VALUES($1, $2, $3, NOW(), NOW()) RETURNING *;\n\n-- name: upsert-list-permissions\nWITH d AS (\n    -- Delete lists that aren't included.\n    DELETE FROM roles WHERE parent_id = $1 AND list_id != ALL($2::INT[])\n),\np AS (\n    -- Get (list_id, perms[]), (list_id, perms[])\n    SELECT UNNEST($2) AS list_id, JSONB_ARRAY_ELEMENTS(TO_JSONB($3::TEXT[][])) AS perms\n)\nINSERT INTO roles (parent_id, list_id, permissions, type)\n    SELECT $1, list_id, ARRAY_REMOVE(ARRAY(SELECT JSONB_ARRAY_ELEMENTS_TEXT(perms)), ''), 'list' FROM p\n    ON CONFLICT (parent_id, list_id) DO UPDATE SET permissions = EXCLUDED.permissions;\n\n-- name: delete-list-permission\nDELETE FROM roles WHERE parent_id=$1 AND list_id=$2;\n\n-- name: update-role\nUPDATE roles SET name=$2, permissions=$3 WHERE id=$1 and parent_id IS NULL RETURNING *;\n\n-- name: delete-role\nDELETE FROM roles WHERE id=$1;\n"
        },
        {
          "name": "schema.sql",
          "type": "blob",
          "size": 21.2529296875,
          "content": "DROP TYPE IF EXISTS list_type CASCADE; CREATE TYPE list_type AS ENUM ('public', 'private', 'temporary');\nDROP TYPE IF EXISTS list_optin CASCADE; CREATE TYPE list_optin AS ENUM ('single', 'double');\nDROP TYPE IF EXISTS subscriber_status CASCADE; CREATE TYPE subscriber_status AS ENUM ('enabled', 'disabled', 'blocklisted');\nDROP TYPE IF EXISTS subscription_status CASCADE; CREATE TYPE subscription_status AS ENUM ('unconfirmed', 'confirmed', 'unsubscribed');\nDROP TYPE IF EXISTS campaign_status CASCADE; CREATE TYPE campaign_status AS ENUM ('draft', 'running', 'scheduled', 'paused', 'cancelled', 'finished');\nDROP TYPE IF EXISTS campaign_type CASCADE; CREATE TYPE campaign_type AS ENUM ('regular', 'optin');\nDROP TYPE IF EXISTS content_type CASCADE; CREATE TYPE content_type AS ENUM ('richtext', 'html', 'plain', 'markdown');\nDROP TYPE IF EXISTS bounce_type CASCADE; CREATE TYPE bounce_type AS ENUM ('soft', 'hard', 'complaint');\nDROP TYPE IF EXISTS template_type CASCADE; CREATE TYPE template_type AS ENUM ('campaign', 'tx');\nDROP TYPE IF EXISTS user_type CASCADE; CREATE TYPE user_type AS ENUM ('user', 'api');\nDROP TYPE IF EXISTS user_status CASCADE; CREATE TYPE user_status AS ENUM ('enabled', 'disabled');\nDROP TYPE IF EXISTS role_type CASCADE; CREATE TYPE role_type AS ENUM ('user', 'list');\n\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n\n-- subscribers\nDROP TABLE IF EXISTS subscribers CASCADE;\nCREATE TABLE subscribers (\n    id              SERIAL PRIMARY KEY,\n    uuid uuid       NOT NULL UNIQUE,\n    email           TEXT NOT NULL UNIQUE,\n    name            TEXT NOT NULL,\n    attribs         JSONB NOT NULL DEFAULT '{}',\n    status          subscriber_status NOT NULL DEFAULT 'enabled',\n\n    created_at      TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at      TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nDROP INDEX IF EXISTS idx_subs_email; CREATE UNIQUE INDEX idx_subs_email ON subscribers(LOWER(email));\nDROP INDEX IF EXISTS idx_subs_status; CREATE INDEX idx_subs_status ON subscribers(status);\nDROP INDEX IF EXISTS idx_subs_id_status; CREATE INDEX idx_subs_id_status ON subscribers(id, status);\nDROP INDEX IF EXISTS idx_subs_created_at; CREATE INDEX idx_subs_created_at ON subscribers(created_at);\nDROP INDEX IF EXISTS idx_subs_updated_at; CREATE INDEX idx_subs_updated_at ON subscribers(updated_at);\n\n-- lists\nDROP TABLE IF EXISTS lists CASCADE;\nCREATE TABLE lists (\n    id              SERIAL PRIMARY KEY,\n    uuid            uuid NOT NULL UNIQUE,\n    name            TEXT NOT NULL,\n    type            list_type NOT NULL,\n    optin           list_optin NOT NULL DEFAULT 'single',\n    tags            VARCHAR(100)[],\n    description     TEXT NOT NULL DEFAULT '',\n\n    created_at      TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at      TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nDROP INDEX IF EXISTS idx_lists_type; CREATE INDEX idx_lists_type ON lists(type);\nDROP INDEX IF EXISTS idx_lists_optin; CREATE INDEX idx_lists_optin ON lists(optin);\nDROP INDEX IF EXISTS idx_lists_name; CREATE INDEX idx_lists_name ON lists(name);\nDROP INDEX IF EXISTS idx_lists_created_at; CREATE INDEX idx_lists_created_at ON lists(created_at);\nDROP INDEX IF EXISTS idx_lists_updated_at; CREATE INDEX idx_lists_updated_at ON lists(updated_at);\n\n\nDROP TABLE IF EXISTS subscriber_lists CASCADE;\nCREATE TABLE subscriber_lists (\n    subscriber_id      INTEGER REFERENCES subscribers(id) ON DELETE CASCADE ON UPDATE CASCADE,\n    list_id            INTEGER NULL REFERENCES lists(id) ON DELETE CASCADE ON UPDATE CASCADE,\n    meta               JSONB NOT NULL DEFAULT '{}',\n    status             subscription_status NOT NULL DEFAULT 'unconfirmed',\n\n    created_at         TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at         TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n\n    PRIMARY KEY(subscriber_id, list_id)\n);\nDROP INDEX IF EXISTS idx_sub_lists_sub_id; CREATE INDEX idx_sub_lists_sub_id ON subscriber_lists(subscriber_id);\nDROP INDEX IF EXISTS idx_sub_lists_list_id; CREATE INDEX idx_sub_lists_list_id ON subscriber_lists(list_id);\nDROP INDEX IF EXISTS idx_sub_lists_status; CREATE INDEX idx_sub_lists_status ON subscriber_lists(status);\n\n-- templates\nDROP TABLE IF EXISTS templates CASCADE;\nCREATE TABLE templates (\n    id              SERIAL PRIMARY KEY,\n    name            TEXT NOT NULL,\n    type            template_type NOT NULL DEFAULT 'campaign',\n    subject         TEXT NOT NULL,\n    body            TEXT NOT NULL,\n    is_default      BOOLEAN NOT NULL DEFAULT false,\n\n    created_at      TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at      TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nCREATE UNIQUE INDEX ON templates (is_default) WHERE is_default = true;\n\n\n-- campaigns\nDROP TABLE IF EXISTS campaigns CASCADE;\nCREATE TABLE campaigns (\n    id               SERIAL PRIMARY KEY,\n    uuid uuid        NOT NULL UNIQUE,\n    name             TEXT NOT NULL,\n    subject          TEXT NOT NULL,\n    from_email       TEXT NOT NULL,\n    body             TEXT NOT NULL,\n    altbody          TEXT NULL,\n    content_type     content_type NOT NULL DEFAULT 'richtext',\n    send_at          TIMESTAMP WITH TIME ZONE,\n    headers          JSONB NOT NULL DEFAULT '[]',\n    status           campaign_status NOT NULL DEFAULT 'draft',\n    tags             VARCHAR(100)[],\n\n    -- The subscription statuses of subscribers to which a campaign will be sent.\n    -- For opt-in campaigns, this will be 'unsubscribed'.\n    type campaign_type DEFAULT 'regular',\n\n    -- The ID of the messenger backend used to send this campaign. \n    messenger        TEXT NOT NULL,\n    template_id      INTEGER REFERENCES templates(id) ON DELETE SET DEFAULT DEFAULT 1,\n\n    -- Progress and stats.\n    to_send            INT NOT NULL DEFAULT 0,\n    sent               INT NOT NULL DEFAULT 0,\n    max_subscriber_id  INT NOT NULL DEFAULT 0,\n    last_subscriber_id INT NOT NULL DEFAULT 0,\n\n    -- Publishing.\n    archive             BOOLEAN NOT NULL DEFAULT false,\n    archive_slug        TEXT NULL UNIQUE,\n    archive_template_id INTEGER REFERENCES templates(id) ON DELETE SET DEFAULT DEFAULT 1,\n    archive_meta        JSONB NOT NULL DEFAULT '{}',\n\n    started_at       TIMESTAMP WITH TIME ZONE,\n    created_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nDROP INDEX IF EXISTS idx_camps_status; CREATE INDEX idx_camps_status ON campaigns(status);\nDROP INDEX IF EXISTS idx_camps_name; CREATE INDEX idx_camps_name ON campaigns(name);\nDROP INDEX IF EXISTS idx_camps_created_at; CREATE INDEX idx_camps_created_at ON campaigns(created_at);\nDROP INDEX IF EXISTS idx_camps_updated_at; CREATE INDEX idx_camps_updated_at ON campaigns(updated_at);\n\n\nDROP TABLE IF EXISTS campaign_lists CASCADE;\nCREATE TABLE campaign_lists (\n    id           BIGSERIAL PRIMARY KEY,\n    campaign_id  INTEGER NOT NULL REFERENCES campaigns(id) ON DELETE CASCADE ON UPDATE CASCADE,\n\n    -- Lists may be deleted, so list_id is nullable\n    -- and a copy of the original list name is maintained here.\n    list_id      INTEGER NULL REFERENCES lists(id) ON DELETE SET NULL ON UPDATE CASCADE,\n    list_name    TEXT NOT NULL DEFAULT ''\n);\nCREATE UNIQUE INDEX ON campaign_lists (campaign_id, list_id);\nDROP INDEX IF EXISTS idx_camp_lists_camp_id; CREATE INDEX idx_camp_lists_camp_id ON campaign_lists(campaign_id);\nDROP INDEX IF EXISTS idx_camp_lists_list_id; CREATE INDEX idx_camp_lists_list_id ON campaign_lists(list_id);\n\nDROP TABLE IF EXISTS campaign_views CASCADE;\nCREATE TABLE campaign_views (\n    id               BIGSERIAL PRIMARY KEY,\n    campaign_id      INTEGER NOT NULL REFERENCES campaigns(id) ON DELETE CASCADE ON UPDATE CASCADE,\n\n    -- Subscribers may be deleted, but the view counts should remain.\n    subscriber_id    INTEGER NULL REFERENCES subscribers(id) ON DELETE SET NULL ON UPDATE CASCADE,\n    created_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nDROP INDEX IF EXISTS idx_views_camp_id; CREATE INDEX idx_views_camp_id ON campaign_views(campaign_id);\nDROP INDEX IF EXISTS idx_views_subscriber_id; CREATE INDEX idx_views_subscriber_id ON campaign_views(subscriber_id);\nDROP INDEX IF EXISTS idx_views_date; CREATE INDEX idx_views_date ON campaign_views((TIMEZONE('UTC', created_at)::DATE));\n\n-- media\nDROP TABLE IF EXISTS media CASCADE;\nCREATE TABLE media (\n    id               SERIAL PRIMARY KEY,\n    uuid uuid        NOT NULL UNIQUE,\n    provider         TEXT NOT NULL DEFAULT '',\n    filename         TEXT NOT NULL,\n    content_type     TEXT NOT NULL DEFAULT 'application/octet-stream',\n    thumb            TEXT NOT NULL,\n    meta             JSONB NOT NULL DEFAULT '{}',\n    created_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- campaign_media\nDROP TABLE IF EXISTS campaign_media CASCADE;\nCREATE TABLE campaign_media (\n    campaign_id  INTEGER REFERENCES campaigns(id) ON DELETE CASCADE ON UPDATE CASCADE,\n\n    -- Media items may be deleted, so media_id is nullable\n    -- and a copy of the original name is maintained here.\n    media_id     INTEGER NULL REFERENCES media(id) ON DELETE SET NULL ON UPDATE CASCADE,\n\n    filename     TEXT NOT NULL DEFAULT ''\n);\nDROP INDEX IF EXISTS idx_camp_media_id; CREATE UNIQUE INDEX idx_camp_media_id ON campaign_media (campaign_id, media_id);\nDROP INDEX IF EXISTS idx_camp_media_camp_id; CREATE INDEX idx_camp_media_camp_id ON campaign_media(campaign_id);\n\n\n-- links\nDROP TABLE IF EXISTS links CASCADE;\nCREATE TABLE links (\n    id               SERIAL PRIMARY KEY,\n    uuid uuid        NOT NULL UNIQUE,\n    url              TEXT NOT NULL UNIQUE,\n    created_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\nDROP TABLE IF EXISTS link_clicks CASCADE;\nCREATE TABLE link_clicks (\n    id               BIGSERIAL PRIMARY KEY,\n    campaign_id      INTEGER NULL REFERENCES campaigns(id) ON DELETE CASCADE ON UPDATE CASCADE,\n    link_id          INTEGER NOT NULL REFERENCES links(id) ON DELETE CASCADE ON UPDATE CASCADE,\n\n    -- Subscribers may be deleted, but the link counts should remain.\n    subscriber_id    INTEGER NULL REFERENCES subscribers(id) ON DELETE SET NULL ON UPDATE CASCADE,\n    created_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nDROP INDEX IF EXISTS idx_clicks_camp_id; CREATE INDEX idx_clicks_camp_id ON link_clicks(campaign_id);\nDROP INDEX IF EXISTS idx_clicks_link_id; CREATE INDEX idx_clicks_link_id ON link_clicks(link_id);\nDROP INDEX IF EXISTS idx_clicks_sub_id; CREATE INDEX idx_clicks_sub_id ON link_clicks(subscriber_id);\nDROP INDEX IF EXISTS idx_clicks_date; CREATE INDEX idx_clicks_date ON link_clicks((TIMEZONE('UTC', created_at)::DATE));\n\n-- settings\nDROP TABLE IF EXISTS settings CASCADE;\nCREATE TABLE settings (\n    key             TEXT NOT NULL UNIQUE,\n    value           JSONB NOT NULL DEFAULT '{}',\n    updated_at      TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nDROP INDEX IF EXISTS idx_settings_key; CREATE INDEX idx_settings_key ON settings(key);\nINSERT INTO settings (key, value) VALUES\n    ('app.site_name', '\"Mailing list\"'),\n    ('app.root_url', '\"http://localhost:9000\"'),\n    ('app.favicon_url', '\"\"'),\n    ('app.from_email', '\"listmonk <noreply@listmonk.yoursite.com>\"'),\n    ('app.logo_url', '\"\"'),\n    ('app.concurrency', '10'),\n    ('app.message_rate', '10'),\n    ('app.batch_size', '1000'),\n    ('app.max_send_errors', '1000'),\n    ('app.message_sliding_window', 'false'),\n    ('app.message_sliding_window_duration', '\"1h\"'),\n    ('app.message_sliding_window_rate', '10000'),\n    ('app.cache_slow_queries', 'false'),\n    ('app.cache_slow_queries_interval', '\"0 3 * * *\"'),\n    ('app.enable_public_archive', 'true'),\n    ('app.enable_public_subscription_page', 'true'),\n    ('app.enable_public_archive_rss_content', 'true'),\n    ('app.send_optin_confirmation', 'true'),\n    ('app.check_updates', 'true'),\n    ('app.notify_emails', '[\"admin1@mysite.com\", \"admin2@mysite.com\"]'),\n    ('app.lang', '\"en\"'),\n    ('privacy.individual_tracking', 'false'),\n    ('privacy.unsubscribe_header', 'true'),\n    ('privacy.allow_blocklist', 'true'),\n    ('privacy.allow_export', 'true'),\n    ('privacy.allow_wipe', 'true'),\n    ('privacy.allow_preferences', 'true'),\n    ('privacy.exportable', '[\"profile\", \"subscriptions\", \"campaign_views\", \"link_clicks\"]'),\n    ('privacy.domain_blocklist', '[]'),\n    ('privacy.record_optin_ip', 'false'),\n    ('security.enable_captcha', 'false'),\n    ('security.captcha_key', '\"\"'),\n    ('security.captcha_secret', '\"\"'),\n    ('security.oidc', '{\"enabled\": false, \"provider_url\": \"\", \"client_id\": \"\", \"client_secret\": \"\"}'),\n    ('upload.provider', '\"filesystem\"'),\n    ('upload.max_file_size', '5000'),\n    ('upload.extensions', '[\"jpg\",\"jpeg\",\"png\",\"gif\",\"svg\",\"*\"]'),\n    ('upload.filesystem.upload_path', '\"uploads\"'),\n    ('upload.filesystem.upload_uri', '\"/uploads\"'),\n    ('upload.s3.url', '\"https://ap-south-1.s3.amazonaws.com\"'),\n    ('upload.s3.public_url', '\"\"'),\n    ('upload.s3.aws_access_key_id', '\"\"'),\n    ('upload.s3.aws_secret_access_key', '\"\"'),\n    ('upload.s3.aws_default_region', '\"ap-south-1\"'),\n    ('upload.s3.bucket', '\"\"'),\n    ('upload.s3.bucket_domain', '\"\"'),\n    ('upload.s3.bucket_path', '\"/\"'),\n    ('upload.s3.bucket_type', '\"public\"'),\n    ('upload.s3.expiry', '\"167h\"'),\n    ('smtp',\n        '[{\"enabled\":true, \"host\":\"smtp.yoursite.com\",\"port\":25,\"auth_protocol\":\"cram\",\"username\":\"username\",\"password\":\"password\",\"hello_hostname\":\"\",\"max_conns\":10,\"idle_timeout\":\"15s\",\"wait_timeout\":\"5s\",\"max_msg_retries\":2,\"tls_type\":\"STARTTLS\",\"tls_skip_verify\":false,\"email_headers\":[]},\n          {\"enabled\":false, \"host\":\"smtp.gmail.com\",\"port\":465,\"auth_protocol\":\"login\",\"username\":\"username@gmail.com\",\"password\":\"password\",\"hello_hostname\":\"\",\"max_conns\":10,\"idle_timeout\":\"15s\",\"wait_timeout\":\"5s\",\"max_msg_retries\":2,\"tls_type\":\"TLS\",\"tls_skip_verify\":false,\"email_headers\":[]}]'),\n    ('messengers', '[]'),\n    ('bounce.enabled', 'false'),\n    ('bounce.webhooks_enabled', 'false'),\n    ('bounce.actions', '{\"soft\": {\"count\": 2, \"action\": \"none\"}, \"hard\": {\"count\": 1, \"action\": \"blocklist\"}, \"complaint\" : {\"count\": 1, \"action\": \"blocklist\"}}'),\n    ('bounce.ses_enabled', 'false'),\n    ('bounce.sendgrid_enabled', 'false'),\n    ('bounce.sendgrid_key', '\"\"'),\n    ('bounce.postmark', '{\"enabled\": false, \"username\": \"\", \"password\": \"\"}'),\n    ('bounce.forwardemail', '{\"enabled\": false, \"key\": \"\"}'),\n    ('bounce.mailboxes',\n        '[{\"enabled\":false, \"type\": \"pop\", \"host\":\"pop.yoursite.com\",\"port\":995,\"auth_protocol\":\"userpass\",\"username\":\"username\",\"password\":\"password\",\"return_path\": \"bounce@listmonk.yoursite.com\",\"scan_interval\":\"15m\",\"tls_enabled\":true,\"tls_skip_verify\":false}]'),\n    ('appearance.admin.custom_css', '\"\"'),\n    ('appearance.admin.custom_js', '\"\"'),\n    ('appearance.public.custom_css', '\"\"'),\n    ('appearance.public.custom_js', '\"\"');\n\n-- bounces\nDROP TABLE IF EXISTS bounces CASCADE;\nCREATE TABLE bounces (\n    id               SERIAL PRIMARY KEY,\n    subscriber_id    INTEGER NOT NULL REFERENCES subscribers(id) ON DELETE CASCADE ON UPDATE CASCADE,\n    campaign_id      INTEGER NULL REFERENCES campaigns(id) ON DELETE SET NULL ON UPDATE CASCADE,\n    type             bounce_type NOT NULL DEFAULT 'hard',\n    source           TEXT NOT NULL DEFAULT '',\n    meta             JSONB NOT NULL DEFAULT '{}',\n    created_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nDROP INDEX IF EXISTS idx_bounces_sub_id; CREATE INDEX idx_bounces_sub_id ON bounces(subscriber_id);\nDROP INDEX IF EXISTS idx_bounces_camp_id; CREATE INDEX idx_bounces_camp_id ON bounces(campaign_id);\nDROP INDEX IF EXISTS idx_bounces_source; CREATE INDEX idx_bounces_source ON bounces(source);\nDROP INDEX IF EXISTS idx_bounces_date; CREATE INDEX idx_bounces_date ON bounces((TIMEZONE('UTC', created_at)::DATE));\n\n-- roles\nDROP TABLE IF EXISTS roles CASCADE;\nCREATE TABLE roles (\n    id               SERIAL PRIMARY KEY,\n    type             role_type NOT NULL DEFAULT 'user',\n    parent_id        INTEGER NULL REFERENCES roles(id) ON DELETE CASCADE ON UPDATE CASCADE,\n    list_id          INTEGER NULL REFERENCES lists(id) ON DELETE CASCADE ON UPDATE CASCADE,\n    permissions      TEXT[] NOT NULL DEFAULT '{}',\n    name             TEXT NULL,\n    created_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nCREATE UNIQUE INDEX idx_roles ON roles (parent_id, list_id);\nCREATE UNIQUE INDEX idx_roles_name ON roles (type, name) WHERE name IS NOT NULL;\n\n-- users\nDROP TABLE IF EXISTS users CASCADE;\nCREATE TABLE users (\n    id               SERIAL PRIMARY KEY,\n    username         TEXT NOT NULL UNIQUE,\n    password_login   BOOLEAN NOT NULL DEFAULT false,\n    password         TEXT NULL,\n    email            TEXT NOT NULL UNIQUE,\n    name             TEXT NOT NULL,\n    avatar           TEXT NULL,\n    type             user_type NOT NULL DEFAULT 'user',\n    user_role_id     INTEGER NOT NULL REFERENCES roles(id) ON DELETE RESTRICT,\n    list_role_id     INTEGER NULL REFERENCES roles(id) ON DELETE CASCADE,\n    status           user_status NOT NULL DEFAULT 'disabled',\n    loggedin_at      TIMESTAMP WITH TIME ZONE NULL,\n    created_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at       TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- user sessions\nDROP TABLE IF EXISTS sessions CASCADE;\nCREATE TABLE sessions (\n    id TEXT NOT NULL PRIMARY KEY,\n    data JSONB DEFAULT '{}'::jsonb NOT NULL,\n    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT now() NOT NULL\n);\nDROP INDEX IF EXISTS idx_sessions; CREATE INDEX idx_sessions ON sessions (id, created_at);\n\n-- materialized views\n\n-- dashboard stats\nDROP MATERIALIZED VIEW IF EXISTS mat_dashboard_counts;\nCREATE MATERIALIZED VIEW mat_dashboard_counts AS\n    WITH subs AS (\n        SELECT COUNT(*) AS num, status FROM subscribers GROUP BY status\n    )\n    SELECT NOW() AS updated_at,\n        JSON_BUILD_OBJECT(\n            'subscribers', JSON_BUILD_OBJECT(\n                'total', (SELECT SUM(num) FROM subs),\n                'blocklisted', (SELECT num FROM subs WHERE status='blocklisted'),\n                'orphans', (\n                    SELECT COUNT(id) FROM subscribers\n                    LEFT JOIN subscriber_lists ON (subscribers.id = subscriber_lists.subscriber_id)\n                    WHERE subscriber_lists.subscriber_id IS NULL\n                )\n            ),\n            'lists', JSON_BUILD_OBJECT(\n                'total', (SELECT COUNT(*) FROM lists),\n                'private', (SELECT COUNT(*) FROM lists WHERE type='private'),\n                'public', (SELECT COUNT(*) FROM lists WHERE type='public'),\n                'optin_single', (SELECT COUNT(*) FROM lists WHERE optin='single'),\n                'optin_double', (SELECT COUNT(*) FROM lists WHERE optin='double')\n            ),\n            'campaigns', JSON_BUILD_OBJECT(\n                'total', (SELECT COUNT(*) FROM campaigns),\n                'by_status', (\n                    SELECT JSON_OBJECT_AGG (status, num) FROM\n                    (SELECT status, COUNT(*) AS num FROM campaigns GROUP BY status) r\n                )\n            ),\n            'messages', (SELECT SUM(sent) AS messages FROM campaigns)\n        ) AS data;\nDROP INDEX IF EXISTS mat_dashboard_stats_idx; CREATE UNIQUE INDEX mat_dashboard_stats_idx ON mat_dashboard_counts (updated_at);\n\n\nDROP MATERIALIZED VIEW IF EXISTS mat_dashboard_charts;\nCREATE MATERIALIZED VIEW mat_dashboard_charts AS\n    WITH clicks AS (\n        SELECT JSON_AGG(ROW_TO_JSON(row))\n        FROM (\n            WITH viewDates AS (\n              SELECT TIMEZONE('UTC', created_at)::DATE AS to_date,\n                     TIMEZONE('UTC', created_at)::DATE - INTERVAL '30 DAY' AS from_date\n                     FROM link_clicks ORDER BY id DESC LIMIT 1\n            )\n            SELECT COUNT(*) AS count, created_at::DATE as date FROM link_clicks\n              -- use > between < to force the use of the date index.\n              WHERE TIMEZONE('UTC', created_at)::DATE BETWEEN (SELECT from_date FROM viewDates) AND (SELECT to_date FROM viewDates)\n              GROUP by date ORDER BY date\n        ) row\n    ),\n    views AS (\n        SELECT JSON_AGG(ROW_TO_JSON(row))\n        FROM (\n            WITH viewDates AS (\n              SELECT TIMEZONE('UTC', created_at)::DATE AS to_date,\n                     TIMEZONE('UTC', created_at)::DATE - INTERVAL '30 DAY' AS from_date\n                     FROM campaign_views ORDER BY id DESC LIMIT 1\n            )\n            SELECT COUNT(*) AS count, created_at::DATE as date FROM campaign_views\n              -- use > between < to force the use of the date index.\n              WHERE TIMEZONE('UTC', created_at)::DATE BETWEEN (SELECT from_date FROM viewDates) AND (SELECT to_date FROM viewDates)\n              GROUP by date ORDER BY date\n        ) row\n    )\n    SELECT NOW() AS updated_at, JSON_BUILD_OBJECT('link_clicks', COALESCE((SELECT * FROM clicks), '[]'),\n                                  'campaign_views', COALESCE((SELECT * FROM views), '[]')\n                                ) AS data;\nDROP INDEX IF EXISTS mat_dashboard_charts_idx; CREATE UNIQUE INDEX mat_dashboard_charts_idx ON mat_dashboard_charts (updated_at);\n\n-- subscriber counts stats for lists\nDROP MATERIALIZED VIEW IF EXISTS mat_list_subscriber_stats;\nCREATE MATERIALIZED VIEW mat_list_subscriber_stats AS\n    SELECT NOW() AS updated_at, lists.id AS list_id, subscriber_lists.status, COUNT(subscriber_lists.status) AS subscriber_count FROM lists\n    LEFT JOIN subscriber_lists ON (subscriber_lists.list_id = lists.id)\n    GROUP BY lists.id, subscriber_lists.status\n    UNION ALL\n    SELECT NOW() AS updated_at, 0 AS list_id, NULL AS status, COUNT(id) AS subscriber_count FROM subscribers;\nDROP INDEX IF EXISTS mat_list_subscriber_stats_idx; CREATE UNIQUE INDEX mat_list_subscriber_stats_idx ON mat_list_subscriber_stats (list_id, status);\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}