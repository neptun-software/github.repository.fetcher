{
  "metadata": {
    "timestamp": 1736568023392,
    "page": 161,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jeessy2/ddns-go",
      "stars": 12830,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3662109375,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.go]\nindent_style = tab\nindent_size = 2\n\n[Dockerfile]\nindent_style = tab\nindent_size = 4\n\n[Makefile]\nindent_style = tab\nindent_size = 4\n\n[.travis.yml]\nindent_style = space\nindent_size = 2\n\n[*.json]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.318359375,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n/ddns-go\n__*\n\n# Folders\n_obj\n_test\n.vagrant\nreleases\ntmp\n/.idea/\nvendor/\n/dist\n\n# Architecture specific extensions/prefixes\ntrace.out\n*.out\n.DS_Store\n_testmain.go\n\n*.exe\n*.test\n*.prof\nprofile.cov\ncoverage.html\n/go.sum\n\n# Emacs backup files\n*~\n.*~\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.578125,
          "content": "# This is an example goreleaser.yaml file with some sane defaults.\n# Make sure to check the documentation at http://goreleaser.com\n\nversion: 2\n\nbefore:\n  hooks:\n    # You may remove this if you don't use go modules.\n    - go mod download\n    # you may remove this if you don't need go generate\n    - go generate ./...\nbuilds:\n  - env:\n      - CGO_ENABLED=0\n    flags:\n      - -trimpath\n    goos:\n      - android\n      - linux\n      - windows\n      - darwin\n      - freebsd\n    goarch:\n      - '386'\n      - amd64\n      - arm\n      - arm64\n      - mips\n      - mipsle\n      - mips64\n      - mips64le\n    goarm:\n      - '5'\n      - '6'\n      - '7'\n    gomips:\n      - hardfloat\n      - softfloat\n    ignore:\n      # we only need the arm64 build on android\n      - goos: android\n        goarch: arm\n      - goos: android\n        goarch: '386'\n      - goos: android\n        goarch: amd64\n\n    ldflags:\n      - -s -w -X main.version={{.Tag}} -X main.buildTime={{.Date}}\narchives:\n  # use zip for windows archives\n  - format_overrides:\n      - goos: windows\n        format: zip\n    # this name template makes the OS and Arch compatible with the results of uname.\n    name_template: >-\n      {{ .ProjectName }}_\n      {{- .Version }}_\n      {{- .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Mips }}_{{ .Mips }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\nchecksum:\n  name_template: 'checksums.txt'\nsnapshot:\n  name_template: '{{ .Tag }}-next'\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - '^docs:'\n      - '^test:'\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.546875,
          "content": "# build stage\nFROM --platform=$BUILDPLATFORM golang:1.20-alpine AS builder\n\nWORKDIR /app\nCOPY . .\nARG TARGETOS TARGETARCH\n\nRUN apk add --no-cache git make tzdata \\\n    && GOOS=$TARGETOS GOARCH=$TARGETARCH make clean build\n\n# final stage\nFROM alpine\nLABEL name=ddns-go\nLABEL url=https://github.com/jeessy2/ddns-go\nRUN apk add --no-cache curl grep\n\nWORKDIR /app\nCOPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo\nENV TZ=Asia/Shanghai\nCOPY --from=builder /app/ddns-go /app/ddns-go\nEXPOSE 9876\nENTRYPOINT [\"/app/ddns-go\"]\nCMD [\"-l\", \":9876\", \"-f\", \"300\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2020 jeessy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8505859375,
          "content": ".PHONY: build clean test test-race\n\n# 如果找不到 tag 则使用 HEAD commit\nVERSION=$(shell git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || git rev-parse --short HEAD)\nBUILD_TIME=$(shell date -u +\"%Y-%m-%dT%H:%M:%SZ\")\nBIN=ddns-go\nDIR_SRC=.\nDOCKER_ENV=DOCKER_BUILDKIT=1\nDOCKER=$(DOCKER_ENV) docker\n\nGO_ENV=CGO_ENABLED=0\nGO_FLAGS=-ldflags=\"-X main.version=$(VERSION) -X 'main.buildTime=$(BUILD_TIME)' -extldflags -static -s -w\" -trimpath\nGO=$(GO_ENV) $(shell which go)\nGOROOT=$(shell `which go` env GOROOT)\nGOPATH=$(shell `which go` env GOPATH)\n\nbuild: $(DIR_SRC)/main.go\n\t@$(GO) build $(GO_FLAGS) -o $(BIN) $(DIR_SRC)\n\nbuild_docker_image:\n\t@$(DOCKER) build -f ./Dockerfile -t ddns-go:$(VERSION) .\n\ntest:\n\t@$(GO) test ./...\n\ntest-race:\n\t@$(GO) test -race ./...\n\n# clean all build result\nclean:\n\t@$(GO) clean ./...\n\t@rm -f $(BIN)\n\t@rm -rf ./dist/*"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.755859375,
          "content": "# ddns-go\n\n[![GitHub release](https://img.shields.io/github/release/jeessy2/ddns-go.svg?logo=github&style=flat-square) ![GitHub release downloads](https://img.shields.io/github/downloads/jeessy2/ddns-go/total?logo=github)](https://github.com/jeessy2/ddns-go/releases/latest) [![Go version](https://img.shields.io/github/go-mod/go-version/jeessy2/ddns-go)](https://github.com/jeessy2/ddns-go/blob/master/go.mod) [![](https://goreportcard.com/badge/github.com/jeessy2/ddns-go/v6)](https://goreportcard.com/report/github.com/jeessy2/ddns-go/v6) [![](https://img.shields.io/docker/image-size/jeessy/ddns-go)](https://registry.hub.docker.com/r/jeessy/ddns-go) [![](https://img.shields.io/docker/pulls/jeessy/ddns-go)](https://registry.hub.docker.com/r/jeessy/ddns-go)\n\n中文 | [English](https://github.com/jeessy2/ddns-go/blob/master/README_EN.md)\n\n自动获得你的公网 IPv4 或 IPv6 地址，并解析到对应的域名服务。\n\n- [特性](#特性)\n- [系统中使用](#系统中使用)\n- [Docker中使用](#docker中使用)\n- [使用IPv6](#使用ipv6)\n- [Webhook](#webhook)\n- [Callback](#callback)\n- [界面](#界面)\n- [开发&自行编译](#开发自行编译)\n\n## 特性\n\n- 支持Mac、Windows、Linux系统，支持ARM、x86架构\n- 支持的域名服务商 `阿里云` `腾讯云` `Dnspod` `Cloudflare` `华为云` `Callback` `百度云` `Porkbun` `GoDaddy` `Namecheap` `NameSilo` `Dynadot`\n- 支持接口/网卡/[命令](https://github.com/jeessy2/ddns-go/wiki/通过命令获取IP参考)获取IP\n- 支持以服务的方式运行\n- 默认间隔5分钟同步一次\n- 支持同时配置多个DNS服务商\n- 支持多个域名同时解析\n- 支持多级域名\n- 网页中配置，简单又方便，默认勾选`禁止从公网访问`\n- 网页中方便快速查看最近50条日志\n- 支持Webhook通知\n- 支持TTL\n- 支持部分DNS服务商[传递自定义参数](https://github.com/jeessy2/ddns-go/wiki/传递自定义参数)，实现地域解析/多IP等功能\n\n> [!NOTE]\n> 建议在启用公网访问时，使用 Nginx 等反向代理软件启用 HTTPS 访问，以保证安全性。[FAQ](https://github.com/jeessy2/ddns-go/wiki/FAQ)\n\n## 系统中使用\n\n- 从 [Releases](https://github.com/jeessy2/ddns-go/releases) 下载并解压 ddns-go\n- 安装服务\n  - Mac/Linux: `sudo ./ddns-go -s install`\n  - Win(以管理员打开cmd): `.\\ddns-go.exe -s install`\n- [可选] 服务卸载\n  - Mac/Linux: `sudo ./ddns-go -s uninstall`\n  - Win(以管理员打开cmd): `.\\ddns-go.exe -s uninstall`\n- [可选] 支持安装带参数\n  - `-l` 监听地址\n  - `-f` 同步间隔时间(秒)\n  - `-cacheTimes` 间隔N次与服务商比对\n  - `-c` 自定义配置文件路径\n  - `-noweb` 不启动web服务\n  - `-skipVerify` 跳过证书验证\n  - `-dns` 自定义 DNS 服务器\n  - `-resetPassword` 重置密码\n- [可选] 参考示例\n  - 10分钟同步一次, 并指定了配置文件地址\n    ```bash\n    ./ddns-go -s install -f 600 -c /Users/name/.ddns_go_config.yaml\n    ```\n  - 每 10 秒检查一次本地 IP 变化, 每 30 分钟对比一下 IP 变化, 实现 IP 变化即时触发更新且不会被服务商限流, 如果使用接口获取IP, 需要注意接口限流\n    ```bash\n    ./ddns-go -s install -f 10 -cacheTimes 180\n    ```\n  - 重置密码\n    ```bash\n    ./ddns-go -resetPassword 123456\n    ./ddns-go -resetPassword 123456 -c /Users/name/.ddns_go_config.yaml\n    ```\n- [可选] 使用 [Homebrew](https://brew.sh) 安装 [ddns-go](https://formulae.brew.sh/formula/ddns-go)：\n\n  ```bash\n  brew install ddns-go\n  ```\n\n## Docker中使用\n\n- 挂载主机目录, 使用docker host模式。可把 `/opt/ddns-go` 替换为你主机任意目录, 配置文件为隐藏文件\n\n  ```bash\n  docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root jeessy/ddns-go\n  ```\n\n- 在浏览器中打开`http://主机IP:9876`，并修改你的配置\n\n- [可选] 使用 `ghcr.io` 镜像\n\n  ```bash\n  docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root ghcr.io/jeessy2/ddns-go\n  ```\n\n- [可选] 支持启动带参数 `-l`监听地址 `-f`间隔时间(秒)\n\n  ```bash\n  docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root jeessy/ddns-go -l :9877 -f 600\n  ```\n\n- [可选] 不使用docker host模式\n\n  ```bash\n  docker run -d --name ddns-go --restart=always -p 9876:9876 -v /opt/ddns-go:/root jeessy/ddns-go\n  ```\n\n- [可选] 重置密码\n\n  ```bash\n  docker exec ddns-go ./ddns-go -resetPassword 123456\n  docker restart ddns-go\n  ```\n\n## 使用IPv6\n\n- 前提：你的电脑或终端能正常获取IPv6，并能正常访问IPv6\n- Windows/Mac：推荐 [系统中使用](#系统中使用)，Windows/Mac桌面版的docker不支持`--net=host`\n- 群晖：\n  - 套件中心下载docker并打开\n  - 注册表中搜索`ddns-go`并下载\n  - 映像 -> 选择`jeessy/ddns-go` -> 启动 -> 高级设置 -> 网络中勾选`使用与 Docker Host 相同的网络`，高级设置中勾选`启动自动重新启动`\n  - 在浏览器中打开`http://群晖IP:9876`，修改你的配置，成功\n- Linux的x86或arm架构，推荐使用Docker的`--net=host`模式。参考 [Docker中使用](#Docker中使用)\n- 虚拟机中使用有可能正常获取IPv6，但不能正常访问IPv6\n\n## Webhook\n\n- 支持webhook, 域名更新成功或不成功时, 会回调填写的URL\n- 支持的变量\n\n  |  变量名   | 说明  |\n  |  ----  | ----  |\n  | #{ipv4Addr}  | 新的IPv4地址 |\n  | #{ipv4Result}  | IPv4地址更新结果: `未改变` `失败` `成功`|\n  | #{ipv4Domains}  | IPv4的域名，多个以`,`分割 |\n  | #{ipv6Addr}  | 新的IPv6地址 |\n  | #{ipv6Result}  | IPv6地址更新结果: `未改变` `失败` `成功`|\n  | #{ipv6Domains}  | IPv6的域名，多个以`,`分割 |\n\n- 如 RequestBody 为空则为 GET 请求，否则为 POST 请求\n- <details><summary>Server酱</summary>\n\n  ```\n  https://sctapi.ftqq.com/[SendKey].send?title=你的公网IP变了&desp=主人IPv4变了#{ipv4Addr},域名更新结果:#{ipv4Result}\n  ```\n- <details><summary>Bark</summary>\n\n  ```\n  https://api.day.app/[YOUR_KEY]/主人IPv4变了#{ipv4Addr},域名更新结果:#{ipv4Result}\n  ```\n  </details>\n- <details><summary>钉钉</summary>\n\n  - 钉钉电脑端 -> 群设置 -> 智能群助手 -> 添加机器人 -> 自定义\n  - 只勾选 `自定义关键词`, 输入的关键字必须包含在RequestBody的content中, 如：`你的公网IP变了`\n  - URL中输入钉钉给你的 `Webhook地址`\n  - RequestBody中输入\n    ```json\n    {\n        \"msgtype\": \"markdown\",\n        \"markdown\": {\n            \"title\": \"你的公网IP变了\",\n            \"text\": \"#### 你的公网IP变了 \\n - IPv4地址：#{ipv4Addr} \\n - 域名更新结果：#{ipv4Result} \\n\"\n        }\n    }\n    ```\n  </details>\n- <details><summary>飞书</summary>\n\n  - 飞书电脑端 -> 群设置 -> 添加机器人 -> 自定义机器人\n  - 安全设置只勾选 `自定义关键词`, 输入的关键字必须包含在RequestBody的content中, 如：`你的公网IP变了`\n  - URL中输入飞书给你的 `Webhook地址`\n  - RequestBody中输入\n    ```json\n    {\n        \"msg_type\": \"post\",\n        \"content\": {\n            \"post\": {\n                \"zh_cn\": {\n                    \"title\": \"你的公网IP变了\",\n                    \"content\": [\n                        [\n                            {\n                                \"tag\": \"text\",\n                                \"text\": \"IPv4地址：#{ipv4Addr}\"\n                            }\n                        ],\n                        [\n                            {\n                                \"tag\": \"text\",\n                                \"text\": \"域名更新结果：#{ipv4Result}\"\n                            }\n                        ]\n                    ]\n                }\n            }\n        }\n    }\n    ```\n  </details>\n- <details><summary>Telegram</summary>\n\n  [ddns-telegram-bot](https://github.com/WingLim/ddns-telegram-bot)\n  </details>\n- <details><summary>plusplus 推送加</summary>\n\n  - [获取token](https://www.pushplus.plus/push1.html)\n  - URL中输入 `https://www.pushplus.plus/send`\n  - RequestBody中输入\n    ```json\n    {\n        \"token\": \"your token\",\n        \"title\": \"你的公网IP变了\",\n        \"content\": \"你的公网IP变了 \\n - IPv4地址：#{ipv4Addr} \\n - 域名更新结果：#{ipv4Result} \\n\"\n    }\n    ```\n  </details>\n- <details><summary>Discord</summary>\n\n  - Discord任意客户端 -> 伺服器 -> 频道设置 -> 整合 -> 查看Webhook -> 新Webhook -> 复制Webhook网址\n  - URL中输入Discord复制的 `Webhook网址`\n  - RequestBody中输入\n    ```json\n    {\n        \"content\": \"域名 #{ipv4Domains} 动态解析 #{ipv4Result}.\",\n        \"embeds\": [\n            {\n                \"description\": \"#{ipv4Domains} 的动态解析 #{ipv4Result}, IP: #{ipv4Addr}\",\n                \"color\": 15258703,\n                \"author\": {\n                    \"name\": \"DDNS\"\n                },\n                \"footer\": {\n                    \"text\": \"DDNS #{ipv4Result}\"\n                }\n            }\n        ]\n    }\n    ```\n  </details>\n\n- [查看更多Webhook配置参考](https://github.com/jeessy2/ddns-go/issues/327)\n\n## Callback\n\n- 通过自定义回调可支持更多的第三方DNS服务商\n- 配置的域名有几行, 就会回调几次\n- 支持的变量\n\n  |  变量名   | 说明  |\n  |  ----  | ----  |\n  | #{ip}  | 新的IPv4/IPv6地址 |\n  | #{domain}  | 当前域名 |\n  | #{recordType}  | 记录类型 `A`或`AAAA` |\n  | #{ttl}  | TTL |\n- 如 RequestBody 为空则为 GET 请求，否则为 POST 请求\n- [Callback配置参考](https://github.com/jeessy2/ddns-go/wiki/Callback配置参考)\n\n## 界面\n\n![screenshots](https://raw.githubusercontent.com/jeessy2/ddns-go/master/ddns-web.png)\n\n## 开发&自行编译\n\n- 如果喜欢从源代码编译自己的版本，可以使用本项目提供的 Makefile 构建\n- 使用 `make build` 生成本地编译后的 `ddns-go` 可执行文件\n- 使用 `make build_docker_image` 自行编译 Docker 镜像\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 6.6533203125,
          "content": "# ddns-go\n\n[![GitHub release](https://img.shields.io/github/release/jeessy2/ddns-go.svg?logo=github&style=flat-square) ![GitHub release downloads](https://img.shields.io/github/downloads/jeessy2/ddns-go/total?logo=github)](https://github.com/jeessy2/ddns-go/releases/latest) [![Go version](https://img.shields.io/github/go-mod/go-version/jeessy2/ddns-go)](https://github.com/jeessy2/ddns-go/blob/master/go.mod) [![](https://goreportcard.com/badge/github.com/jeessy2/ddns-go/v6)](https://goreportcard.com/report/github.com/jeessy2/ddns-go/v6) [![](https://img.shields.io/docker/image-size/jeessy/ddns-go)](https://registry.hub.docker.com/r/jeessy/ddns-go) [![](https://img.shields.io/docker/pulls/jeessy/ddns-go)](https://registry.hub.docker.com/r/jeessy/ddns-go)\n\n[中文](https://github.com/jeessy2/ddns-go/blob/master/README.md) | English\n\nAutomatically obtain your public IPv4 or IPv6 address and resolve it to the corresponding domain name service.\n\n- [Features](#Features)\n- [Use in system](#Use-in-system)\n- [Use in docker](#Use-in-docker)\n- [Webhook](#webhook)\n- [Callback](#callback)\n- [Web interfaces](#Web-interfaces)\n\n## Features\n\n- Support Mac, Windows, Linux system, support ARM, x86 architecture\n- Support domain service providers `Aliyun` `Tencent` `Dnspod` `Cloudflare` `Huawei` `Callback` `Baidu` `Porkbun` `GoDaddy` `Namecheap` `NameSilo` `Dynadot`\n- Support interface / netcard / command to get IP\n- Support running as a service\n- Default interval is 5 minutes\n- Support configuring multiple DNS service providers at the same time\n- Support multiple domain name resolution at the same time\n- Support multi-level domain name\n- Configured on the web page, simple and convenient\n- In the web page, you can quickly view the latest 50 logs\n- Support Webhook notification\n- Support TTL\n- Support for some domain service providers to pass [custom parameters](https://github.com/jeessy2/ddns-go/wiki/传递自定义参数) to achieve multi-IP and other functions\n\n> [!NOTE]\n> If you enable public network access, it is recommended to use Nginx and other reverse proxy software to enable HTTPS access to ensure security.\n\n## Use in system\n\n- Download and unzip ddns-go from [Releases](https://github.com/jeessy2/ddns-go/releases)\n- Run in service mode\n  - Mac/Linux: `sudo ./ddns-go -s install`\n  - Win(Run as administrator): `.\\ddns-go.exe -s install`\n- [Optional] Uninstall service\n  - Mac/Linux: `sudo ./ddns-go -s uninstall`\n  - Win(Run as administrator): `.\\ddns-go.exe -s uninstall`\n- [Optional] Support installation with parameters\n  - `-l` listen address\n  - `-f` sync frequency(seconds)\n  - `-cacheTimes` interval N times compared with service providers\n  - `-c` custom configuration file path\n  - `-noweb` does not start web service\n  - `-skipVerify` skip certificate verification\n  - `-dns` custom DNS server\n  - `-resetPassword` reset password\n- [Optional] Examples\n  - 10 minutes to synchronize once, and the configuration file address is specified\n    ```bash\n    ./ddns-go -s install -f 600 -c /Users/name/.ddns_go_config.yaml\n    ```\n  - Every 10 seconds to check the local IP changes, every 30 minutes to compare the IP changes, to achieve IP changes immediately trigger updates and will not be limited by the service providers, if the use of api to obtain IP, need to pay attention to the api side of the flow limit\n    ```bash\n    ./ddns-go -s install -f 10 -cacheTimes 180\n    ```\n  - reset password\n    ```bash\n    ./ddns-go -resetPassword 123456\n    ```\n- [Optional] You can use [Homebrew](https://brew.sh) to install [ddns-go](https://formulae.brew.sh/formula/ddns-go)\n\n  ```bash\n  brew install ddns-go\n  ```\n\n## Use in docker\n\n- Mount the host directory, use the docker host mode. You can replace `/opt/ddns-go` with any directory on your host, the configuration file is a hidden file\n\n  ```bash\n  docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root jeessy/ddns-go\n  ```\n\n- Open `http://DOCKER_IP:9876` in the browser, modify your configuration\n\n- [Optional] Use `ghcr.io` mirror\n\n  ```bash\n  docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root ghcr.io/jeessy2/ddns-go\n  ```\n\n- [Optional] Support startup with parameters `-l`listen address `-f`Sync frequency(seconds)\n\n  ```bash\n  docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root jeessy/ddns-go -l :9877 -f 600\n  ```\n\n- [Optional] Without using docker host mode\n\n  ```bash\n  docker run -d --name ddns-go --restart=always -p 9876:9876 -v /opt/ddns-go:/root jeessy/ddns-go\n  ```\n\n- [Optional] Reset password\n\n  ```bash\n  docker exec ddns-go ./ddns-go -resetPassword 123456\n  docker restart ddns-go\n  ```\n\n## Webhook\n\n- Support webhook, when the domain name is updated successfully or not, the URL filled in will be called back\n- Support variables\n\n  |  Variable name   | Comments  |\n  |  ----  | ----  |\n  | #{ipv4Addr}  | The new IPv4 |\n  | #{ipv4Result}  | IPv4 update result: `no changed` `success` `failed`|\n  | #{ipv4Domains}  | IPv4 domains，Split by `,` |\n  | #{ipv6Addr}  | The new IPv6 |\n  | #{ipv6Result}  | IPv6 update result: `no changed` `success` `failed`|\n  | #{ipv6Domains}  | IPv6 domains，Split by `,` |\n\n- If RequestBody is empty, it is a `GET` request, otherwise it is a `POST` request\n\n- <details><summary>Telegram</summary>\n\n  [ddns-telegram-bot](https://github.com/WingLim/ddns-telegram-bot)\n  </details>\n- <details><summary>Discord</summary>\n\n  - Discord client -> Server -> Channel Settings -> Integration -> View Webhook -> New Webhook -> Copy Webhook URL\n  - Input the `Webhook URL` copied from Discord in the URL\n  - Input in RequestBody\n    ```json\n    {\n        \"content\": \"The domain name #{ipv4Domains} dynamically resolves to #{ipv4Result}.\",\n        \"embeds\": [\n            {\n                \"description\": \"Domains: #{ipv4Domains}, Result: #{ipv4Result}, IP: #{ipv4Addr}\",\n                \"color\": 15258703,\n                \"author\": {\n                    \"name\": \"DDNS\"\n                },\n                \"footer\": {\n                    \"text\": \"DDNS #{ipv4Result}\"\n                }\n            }\n        ]\n    }\n    ```\n  </details>\n\n- [More webhook configuration reference](https://github.com/jeessy2/ddns-go/issues/327)\n\n## Callback\n\n- Support more third-party DNS service providers through custom callback\n- Callback will be called as many times as there are lines in the configured domain name\n- Support variables\n\n  |  Variable name   | Comments  |\n  |  ----  | ----  |\n  | #{ip}  | The new IPv4/IPv6 address|\n  | #{domain}  | Current domain |\n  | #{recordType}  | Record type `A` or `AAAA` |\n  | #{ttl}  | TTL |\n- If RequestBody is empty, it is a `GET` request, otherwise it is a `POST` request\n\n## Web interfaces\n\n![screenshots](https://raw.githubusercontent.com/jeessy2/ddns-go/master/ddns-web.png)\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "ddns-web.png",
          "type": "blob",
          "size": 54.0205078125,
          "content": null
        },
        {
          "name": "dns",
          "type": "tree",
          "content": null
        },
        {
          "name": "favicon.ico",
          "type": "blob",
          "size": 4.185546875,
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.296875,
          "content": "module github.com/jeessy2/ddns-go/v6\n\ngo 1.20\n\nrequire (\n\tgithub.com/kardianos/service v1.2.2\n\tgithub.com/wagslane/go-password-validator v0.3.0\n\tgolang.org/x/crypto v0.32.0\n\tgolang.org/x/net v0.34.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tgolang.org/x/sys v0.29.0 // indirect\n\tgolang.org/x/text v0.21.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 1.4287109375,
          "content": "github.com/kardianos/service v1.2.2 h1:ZvePhAHfvo0A7Mftk/tEzqEZ7Q4lgnR8sGz4xu1YX60=\ngithub.com/kardianos/service v1.2.2/go.mod h1:CIMRFEJVL+0DS1a3Nx06NaMn4Dz63Ng6O7dl0qH0zVM=\ngithub.com/wagslane/go-password-validator v0.3.0 h1:vfxOPzGHkz5S146HDpavl0cw1DSVP061Ry2PX0/ON6I=\ngithub.com/wagslane/go-password-validator v0.3.0/go.mod h1:TI1XJ6T5fRdRnHqHt14pvy1tNVnrwe7m3/f1f2fDphQ=\ngolang.org/x/crypto v0.32.0 h1:euUpcYgM8WcP71gNpTqQCn6rC2t6ULUPiOzfWaXVVfc=\ngolang.org/x/crypto v0.32.0/go.mod h1:ZnnJkOaASj8g0AjIduWNlq2NRxL0PlBrbKVyZ6V/Ugc=\ngolang.org/x/net v0.34.0 h1:Mb7Mrk043xzHgnRM88suvJFwzVrRfHEHJEl5/71CKw0=\ngolang.org/x/net v0.34.0/go.mod h1:di0qlW3YNM5oh6GqDGQr92MyTozJPmybPK4Ev/Gm31k=\ngolang.org/x/sys v0.0.0-20201015000850-e3ed0017c211/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 9.8642578125,
          "content": "package main\n\nimport (\n\t\"embed\"\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/jeessy2/ddns-go/v6/config\"\n\t\"github.com/jeessy2/ddns-go/v6/dns\"\n\t\"github.com/jeessy2/ddns-go/v6/util\"\n\t\"github.com/jeessy2/ddns-go/v6/util/update\"\n\t\"github.com/jeessy2/ddns-go/v6/web\"\n\t\"github.com/kardianos/service\"\n)\n\n// ddns-go 版本\n// ddns-go version\nvar versionFlag = flag.Bool(\"v\", false, \"ddns-go version\")\n\n// 更新 ddns-go\nvar updateFlag = flag.Bool(\"u\", false, \"Upgrade ddns-go to the latest version\")\n\n// 监听地址\nvar listen = flag.String(\"l\", \":9876\", \"Listen address\")\n\n// 更新频率(秒)\nvar every = flag.Int(\"f\", 300, \"Update frequency(seconds)\")\n\n// 缓存次数\nvar ipCacheTimes = flag.Int(\"cacheTimes\", 5, \"Cache times\")\n\n// 服务管理\nvar serviceType = flag.String(\"s\", \"\", \"Service management (install|uninstall|restart)\")\n\n// 配置文件路径\nvar configFilePath = flag.String(\"c\", util.GetConfigFilePathDefault(), \"Custom configuration file path\")\n\n// Web 服务\nvar noWebService = flag.Bool(\"noweb\", false, \"No web service\")\n\n// 跳过验证证书\nvar skipVerify = flag.Bool(\"skipVerify\", false, \"Skip certificate verification\")\n\n// 自定义 DNS 服务器\nvar customDNS = flag.String(\"dns\", \"\", \"Custom DNS server address, example: 8.8.8.8\")\n\n// 重置密码\nvar newPassword = flag.String(\"resetPassword\", \"\", \"Reset password to the one entered\")\n\n//go:embed static\nvar staticEmbeddedFiles embed.FS\n\n//go:embed favicon.ico\nvar faviconEmbeddedFile embed.FS\n\n// version\nvar version = \"DEV\"\n\nfunc main() {\n\tflag.Parse()\n\tif *versionFlag {\n\t\tfmt.Println(version)\n\t\treturn\n\t}\n\tif *updateFlag {\n\t\tupdate.Self(version)\n\t\treturn\n\t}\n\n\t// 安卓 go/src/time/zoneinfo_android.go 固定localLoc 为 UTC\n\tif runtime.GOOS == \"android\" {\n\t\tutil.FixTimezone()\n\t}\n\t// 检查监听地址\n\tif _, err := net.ResolveTCPAddr(\"tcp\", *listen); err != nil {\n\t\tlog.Fatalf(\"Parse listen address failed! Exception: %s\", err)\n\t}\n\t// 设置版本号\n\tos.Setenv(web.VersionEnv, version)\n\t// 设置配置文件路径\n\tif *configFilePath != \"\" {\n\t\tabsPath, _ := filepath.Abs(*configFilePath)\n\t\tos.Setenv(util.ConfigFilePathENV, absPath)\n\t}\n\t// 重置密码\n\tif *newPassword != \"\" {\n\t\tconf, err := config.GetConfigCached()\n\t\tif err == nil {\n\t\t\tconf.ResetPassword(*newPassword)\n\t\t} else {\n\t\t\tutil.Log(\"配置文件 %s 不存在, 可通过-c指定配置文件\", *configFilePath)\n\t\t}\n\t\treturn\n\t}\n\t// 设置跳过证书验证\n\tif *skipVerify {\n\t\tutil.SetInsecureSkipVerify()\n\t}\n\t// 设置自定义DNS\n\tif *customDNS != \"\" {\n\t\tutil.SetDNS(*customDNS)\n\t}\n\tos.Setenv(util.IPCacheTimesENV, strconv.Itoa(*ipCacheTimes))\n\tswitch *serviceType {\n\tcase \"install\":\n\t\tinstallService()\n\tcase \"uninstall\":\n\t\tuninstallService()\n\tcase \"restart\":\n\t\trestartService()\n\tdefault:\n\t\tif util.IsRunInDocker() {\n\t\t\trun()\n\t\t} else {\n\t\t\ts := getService()\n\t\t\tstatus, _ := s.Status()\n\t\t\tif status != service.StatusUnknown {\n\t\t\t\t// 以服务方式运行\n\t\t\t\ts.Run()\n\t\t\t} else {\n\t\t\t\t// 非服务方式运行\n\t\t\t\tswitch s.Platform() {\n\t\t\t\tcase \"windows-service\":\n\t\t\t\t\tutil.Log(\"可使用 .\\\\ddns-go.exe -s install 安装服务运行\")\n\t\t\t\tdefault:\n\t\t\t\t\tutil.Log(\"可使用 sudo ./ddns-go -s install 安装服务运行\")\n\t\t\t\t}\n\t\t\t\trun()\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc run() {\n\t// 兼容之前的配置文件\n\tconf, _ := config.GetConfigCached()\n\tconf.CompatibleConfig()\n\t// 初始化语言\n\tutil.InitLogLang(conf.Lang)\n\n\tif !*noWebService {\n\t\tgo func() {\n\t\t\t// 启动web服务\n\t\t\terr := runWebServer()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t\ttime.Sleep(time.Minute)\n\t\t\t\tos.Exit(1)\n\t\t\t}\n\t\t}()\n\t}\n\n\t// 初始化备用DNS\n\tutil.InitBackupDNS(*customDNS, conf.Lang)\n\n\t// 等待网络连接\n\tutil.WaitInternet(dns.Addresses)\n\n\t// 定时运行\n\tdns.RunTimer(time.Duration(*every) * time.Second)\n}\n\nfunc staticFsFunc(writer http.ResponseWriter, request *http.Request) {\n\thttp.FileServer(http.FS(staticEmbeddedFiles)).ServeHTTP(writer, request)\n}\n\nfunc faviconFsFunc(writer http.ResponseWriter, request *http.Request) {\n\thttp.FileServer(http.FS(faviconEmbeddedFile)).ServeHTTP(writer, request)\n}\n\nfunc runWebServer() error {\n\t// 启动静态文件服务\n\thttp.HandleFunc(\"/static/\", web.AuthAssert(staticFsFunc))\n\thttp.HandleFunc(\"/favicon.ico\", web.AuthAssert(faviconFsFunc))\n\thttp.HandleFunc(\"/login\", web.AuthAssert(web.Login))\n\thttp.HandleFunc(\"/loginFunc\", web.AuthAssert(web.LoginFunc))\n\n\thttp.HandleFunc(\"/\", web.Auth(web.Writing))\n\thttp.HandleFunc(\"/save\", web.Auth(web.Save))\n\thttp.HandleFunc(\"/logs\", web.Auth(web.Logs))\n\thttp.HandleFunc(\"/clearLog\", web.Auth(web.ClearLog))\n\thttp.HandleFunc(\"/webhookTest\", web.Auth(web.WebhookTest))\n\thttp.HandleFunc(\"/logout\", web.Auth(web.Logout))\n\n\tutil.Log(\"监听 %s\", *listen)\n\n\tl, err := net.Listen(\"tcp\", *listen)\n\tif err != nil {\n\t\treturn errors.New(util.LogStr(\"监听端口发生异常, 请检查端口是否被占用! %s\", err))\n\t}\n\n\t// 没有配置, 自动打开浏览器\n\tautoOpenExplorer()\n\n\treturn http.Serve(l, nil)\n}\n\ntype program struct{}\n\nfunc (p *program) Start(s service.Service) error {\n\t// Start should not block. Do the actual work async.\n\tgo p.run()\n\treturn nil\n}\nfunc (p *program) run() {\n\trun()\n}\nfunc (p *program) Stop(s service.Service) error {\n\t// Stop should not block. Return with a few seconds.\n\treturn nil\n}\n\nfunc getService() service.Service {\n\toptions := make(service.KeyValue)\n\tvar depends []string\n\n\t// 确保服务等待网络就绪后再启动\n\tswitch service.ChosenSystem().String() {\n\tcase \"unix-systemv\":\n\t\toptions[\"SysvScript\"] = sysvScript\n\tcase \"windows-service\":\n\t\t// 将 Windows 服务的启动类型设为自动(延迟启动)\n\t\toptions[\"DelayedAutoStart\"] = true\n\tdefault:\n\t\t// 向 Systemd 添加网络依赖\n\t\tdepends = append(depends, \"Requires=network.target\",\n\t\t\t\"After=network-online.target\")\n\t}\n\n\tsvcConfig := &service.Config{\n\t\tName:         \"ddns-go\",\n\t\tDisplayName:  \"ddns-go\",\n\t\tDescription:  \"Simple and easy to use DDNS. Automatically update domain name resolution to public IP (Support Aliyun, Tencent Cloud, Dnspod, Cloudflare, Callback, Huawei Cloud, Baidu Cloud, Porkbun, GoDaddy...)\",\n\t\tArguments:    []string{\"-l\", *listen, \"-f\", strconv.Itoa(*every), \"-cacheTimes\", strconv.Itoa(*ipCacheTimes), \"-c\", *configFilePath},\n\t\tDependencies: depends,\n\t\tOption:       options,\n\t}\n\n\tif *noWebService {\n\t\tsvcConfig.Arguments = append(svcConfig.Arguments, \"-noweb\")\n\t}\n\n\tif *skipVerify {\n\t\tsvcConfig.Arguments = append(svcConfig.Arguments, \"-skipVerify\")\n\t}\n\n\tif *customDNS != \"\" {\n\t\tsvcConfig.Arguments = append(svcConfig.Arguments, \"-dns\", *customDNS)\n\t}\n\n\tprg := &program{}\n\ts, err := service.New(prg, svcConfig)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\treturn s\n}\n\n// 卸载服务\nfunc uninstallService() {\n\ts := getService()\n\ts.Stop()\n\tif service.ChosenSystem().String() == \"unix-systemv\" {\n\t\tif _, err := exec.Command(\"/etc/init.d/ddns-go\", \"stop\").Output(); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n\tif err := s.Uninstall(); err == nil {\n\t\tutil.Log(\"ddns-go 服务卸载成功\")\n\t} else {\n\t\tutil.Log(\"ddns-go 服务卸载失败, 异常信息: %s\", err)\n\t}\n}\n\n// 安装服务\nfunc installService() {\n\ts := getService()\n\n\tstatus, err := s.Status()\n\tif err != nil && status == service.StatusUnknown {\n\t\t// 服务未知，创建服务\n\t\tif err = s.Install(); err == nil {\n\t\t\ts.Start()\n\t\t\tutil.Log(\"安装 ddns-go 服务成功! 请打开浏览器并进行配置\")\n\t\t\tif service.ChosenSystem().String() == \"unix-systemv\" {\n\t\t\t\tif _, err := exec.Command(\"/etc/init.d/ddns-go\", \"enable\").Output(); err != nil {\n\t\t\t\t\tlog.Println(err)\n\t\t\t\t}\n\t\t\t\tif _, err := exec.Command(\"/etc/init.d/ddns-go\", \"start\").Output(); err != nil {\n\t\t\t\t\tlog.Println(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tutil.Log(\"安装 ddns-go 服务失败, 异常信息: %s\", err)\n\t}\n\n\tif status != service.StatusUnknown {\n\t\tutil.Log(\"ddns-go 服务已安装, 无需再次安装\")\n\t}\n}\n\n// 重启服务\nfunc restartService() {\n\ts := getService()\n\tstatus, err := s.Status()\n\tif err == nil {\n\t\tif status == service.StatusRunning {\n\t\t\tif err = s.Restart(); err == nil {\n\t\t\t\tutil.Log(\"重启 ddns-go 服务成功\")\n\t\t\t}\n\t\t} else if status == service.StatusStopped {\n\t\t\tif err = s.Start(); err == nil {\n\t\t\t\tutil.Log(\"启动 ddns-go 服务成功\")\n\t\t\t}\n\t\t}\n\t} else {\n\t\tutil.Log(\"ddns-go 服务未安装, 请先安装服务\")\n\t}\n}\n\n// 打开浏览器\nfunc autoOpenExplorer() {\n\t_, err := config.GetConfigCached()\n\t// 未找到配置文件\n\tif err != nil {\n\t\tif util.IsRunInDocker() {\n\t\t\t// docker中运行, 提示\n\t\t\tutil.Log(\"Docker中运行, 请在浏览器中打开 http://docker主机IP:9876 进行配置\")\n\t\t} else {\n\t\t\t// 主机运行, 打开浏览器\n\t\t\taddr, err := net.ResolveTCPAddr(\"tcp\", *listen)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\turl := fmt.Sprintf(\"http://127.0.0.1:%d\", addr.Port)\n\t\t\tif addr.IP.IsGlobalUnicast() {\n\t\t\t\turl = fmt.Sprintf(\"http://%s\", addr.String())\n\t\t\t}\n\t\t\tgo util.OpenExplorer(url)\n\t\t}\n\t}\n}\n\nconst sysvScript = `#!/bin/sh /etc/rc.common\nDESCRIPTION=\"{{.Description}}\"\ncmd=\"{{.Path}}{{range .Arguments}} {{.|cmd}}{{end}}\"\nname=\"ddns-go\"\npid_file=\"/var/run/$name.pid\"\nstdout_log=\"/var/log/$name.log\"\nstderr_log=\"/var/log/$name.err\"\nSTART=99\nget_pid() {\n    cat \"$pid_file\"\n}\nis_running() {\n    [ -f \"$pid_file\" ] && cat /proc/$(get_pid)/stat > /dev/null 2>&1\n}\nstart() {\n\tif is_running; then\n\t\techo \"Already started\"\n\telse\n\t\techo \"Starting $name\"\n\t\t{{if .WorkingDirectory}}cd '{{.WorkingDirectory}}'{{end}}\n\t\t$cmd >> \"$stdout_log\" 2>> \"$stderr_log\" &\n\t\techo $! > \"$pid_file\"\n\t\tif ! is_running; then\n\t\t\techo \"Unable to start, see $stdout_log and $stderr_log\"\n\t\t\texit 1\n\t\tfi\n\tfi\n}\nstop() {\n\tif is_running; then\n\t\techo -n \"Stopping $name..\"\n\t\tkill $(get_pid)\n\t\tfor i in $(seq 1 10)\n\t\tdo\n\t\t\tif ! is_running; then\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\techo -n \".\"\n\t\t\tsleep 1\n\t\tdone\n\t\techo\n\t\tif is_running; then\n\t\t\techo \"Not stopped; may still be shutting down or shutdown may have failed\"\n\t\t\texit 1\n\t\telse\n\t\t\techo \"Stopped\"\n\t\t\tif [ -f \"$pid_file\" ]; then\n\t\t\t\trm \"$pid_file\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\techo \"Not running\"\n\tfi\n}\nrestart() {\n\tstop\n\tif is_running; then\n\t\techo \"Unable to stop, will not attempt to start\"\n\t\texit 1\n\tfi\n\tstart\n}\n`\n"
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}