{
  "metadata": {
    "timestamp": 1736567848324,
    "page": 5,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "goharbor/harbor",
      "stars": 24605,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".buildbaselog",
          "type": "blob",
          "size": 0.7685546875,
          "content": "# Please add memo for logging the reason to trigger build base images action.\n# Note: \n#    Any modifiction of this file will trigger base images build action.\n\n\n%changelog\n\n*   Add date here... Add signature here...\n-   Add your reason here...\n\n*   Oct 24 2024 <yan-yw.wang@broadcom.com>\n-   Refresh base image\n\n*   Nov 28 2022 <jiaoya@vmware.com>\n-   Refresh base image\n\n*   Jul 15 2022 <jiaoya@vmware.com>\n-   Refresh base image\n\n*   May 20 2022 <jiaoya@vmware.com>\n-   Refresh base image\n\n*   Jan 14 2022 <jiaoya@vmware.com>\n-   Refresh base image\n\n*   Dec 10 2021 <jiaoya@vmware.com>\n-   Refresh base image\n\n*   Sept 23 2021 <jiaoya@vmware.com>\n-   Refresh base image\n\n*   Jul 15 2021 <danfengl@vmware.com>\n-   Create this file to trigger build base action in buld-package workflow "
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.08984375,
          "content": "src/portal/node_modules/\ndoc/\ndocs/\n.git\nmake/common/config/\nharbor-offline-installer-*.tgz\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0771484375,
          "content": "\n!/contrib/helm/harbor\n*.code-workspace\nmake/harbor.yml\nmake/docker-compose.yml\nmake/common/config/*\nmake/dev/adminserver/harbor_adminserver\nmake/dev/core/harbor_core\nmake/dev/jobservice/harbor_jobservice\nmake/photon/*/binary/\nmake/photon/prepare/versions\n\nsrc/adminserver/adminserver\nsrc/core/core\nsrc/jobservice/jobservice\nsrc/common/dao/dao.test\n*.pyc\njobservice/test\n\nsrc/portal/coverage/\nsrc/portal/dist/\nsrc/portal/html-report/\nsrc/portal/node_modules/\nsrc/portal/app-swagger-ui/node_modules/\nsrc/portal/app-swagger-ui/webpack.dev.js\nsrc/portal/typings/\n**/*npm-debug.log.*\n**/*yarn-error.log.*\n.idea/\n*.iml\n.DS_Store\n.project\n.vscode/\n**/node_modules\n**/ssl/\n**/proxy.config.mjs\n\nsrc/portal/src/**/*.js\nsrc/portal/src/**/*.js.map\nsrc/portal/src/lib/coverage\nsrc/portal/ng-swagger-gen\nsrc/portal/docker-build/nginx.conf\nsrc/portal/.angular\nsrc/portal/cypress/videos\nsrc/portal/cypress/screenshots\n**/npm*.log\n\n**/*ngsummary.json\n**/*ngfactory.ts\n**/aot\n**/dist\n**/.bin\nsrc/core/conf/app.conf\n\nsrc/server/v2.0/models/\nsrc/server/v2.0/restapi/\n.editorconfig\n\nharborclient/\nopenapi-generator-cli.jar\n"
        },
        {
          "name": ".gitmessage",
          "type": "blob",
          "size": 0.5859375,
          "content": "SUBJECT HERE\n#\n# Please provide your commit's subject above this line.\n#\n# Guideline (http://chris.beams.io/posts/git-commit/)\n#\n#   1. Separate subject from body with a blank line\n#   2. Limit the subject line to 50 characters\n#   3. Capitalize the first letter subject line\n#   4. Do not end the subject line with a period\n#   5. Use the imperative mood in the subject line\n#   6. Wrap the body at 72 characters\n#   7. Use the body to explain what and why vs. how\n#\n# Description of your commit should go below. Make sure to leave\n# one empty line after your description.\n#\n\nBODY LINE1\nBODY LINE2\n\n"
        },
        {
          "name": ".spectral.yaml",
          "type": "blob",
          "size": 0.708984375,
          "content": "extends: [[spectral:oas, all]]\n\nfunctionsDir: \"./tools/spectral/functions\"\n\nfunctions: [requireRequestId]\n\nrules:\n  no-$ref-siblings: false\n  oas2-valid-schema-example: false\n\n  required-operationId:\n    description: must have a operationId.\n    given: $.paths[*][*]\n    severity: error\n    then:\n      field: operationId\n      function: truthy\n\n  camel-case-operationId:\n    description: should be camelCased.\n    type: style\n    given: $.paths[*][*].operationId\n    then:\n      function: casing\n      functionOptions:\n        type: camel\n\n  requestId-required:\n    description: must have a requestId parameters.\n    given: $.paths[*][*]\n    severity: error\n    then:\n      field: parameters\n      function: requireRequestId\n"
        },
        {
          "name": "ADOPTERS.md",
          "type": "blob",
          "size": 10.2734375,
          "content": "# Harbor Adopters\n\nBelow is a list of adopters of Harbor in **production environments** that have\npublicly shared the details of their usage as well as the benefits provided by\nHarbor that their business relies on. There are some unreferenceable users that\nare leveraging Harbor that are not yet able to share details of their usage\npublicly at this time.\n\nThere are many additional adopters of Harbor in the evaluating phase that will\nbe added to this list as they transition to production deployments.\n\n<a href=\"https://www.jd.com\" border=\"0\" target=\"_blank\"><img alt=\"JD.com\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/jd.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp;\n<a href=\"https://www.trendmicro.com\" border=\"0\" target=\"_blank\"><img alt=\"trendmicro\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/trendmicro.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://pitsdatenrettung.de/\" target=\"_blank\" border=\"0\"><img alt=\"PITS Globale Datenrettungsdienste\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/pits-globale-datenrettungsdienste.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://www.datayes.com\" border=\"0\" target=\"_blank\"><img alt=\"DataYes\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/datayes.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://www.axatp.com\" border=\"0\" target=\"_blank\"><img alt=\"axatp\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/axatp.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp; <br/><br/>\n<a href=\"https://www.360totalsecurity.com/en/\" target=\"_blank\" border=\"0\"><img alt=\"360 Total Security\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/360.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp;\n<a href=\"https://www.talkingdata.com\" border=\"0\" target=\"_blank\"><img alt=\"talkingdata\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/talkingdata.png\" height=\"40\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.boericasa.com/index.html\" border=\"0\" target=\"_blank\"><img alt=\"BoerSmart\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/boer.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.open.com.cn\" border=\"0\" target=\"_blank\"><img alt=\"OpenEdutainment\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/openedutainment.png\" height=\"70\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.ifre.com.cn\" border=\"0\" target=\"_blank\"><img alt=\"iFRE\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/ifre.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp; <br/><br/>\n<a href=\"http://www.boco.com.cn:8080/bocoit/\" border=\"0\" target=\"_blank\"><img alt=\"BOCOIT\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/bocoit.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.wise2c.com/\" border=\"0\" target=\"_blank\"><img alt=\"wise2c\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/wise2c.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.hydsoft.com/\" border=\"0\" target=\"_blank\"><img alt=\"HYDSoft\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/hydsoft.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.cloud-star.com.cn/\" border=\"0\" target=\"_blank\"><img alt=\"CloudStar\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/cloudstar.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.beyondsoft.com/\" border=\"0\" target=\"_blank\"><img alt=\"BeyondSoft\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/beyondsoft.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.chinamobileltd.com/\" border=\"0\" target=\"_blank\"><img alt=\"ChinaMobile\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/china-mobile.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://www.caicloud.io\" target=\"_blank\" border=\"0\"><img alt=\"CaiCloud\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/caicloud.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://rancher.com/\" target=\"_blank\" border=\"0\"><img alt=\"Rancher\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/rancher.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://www.tenxcloud.com/\" target=\"_blank\" border=\"0\"><img alt=\"TenxCloud\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/tenxcloud.png\" height=\"70\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.bingocc.com/\" target=\"_blank\" border=\"0\"><img alt=\"BingoCloud\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/bingocloud.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<br/><br/>\n<a href=\"http://www.slamtec.com\" target=\"_blank\" border=\"0\"><img alt=\"SlamTec\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/slamtec.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.cloudchef.io/\" target=\"_blank\" border=\"0\"><img alt=\"CloudChef\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/cloudchef.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://pivotal.io/\" target=\"_blank\" border=\"0\"><img alt=\"Pivotal\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/pivotal.png\" height=\"40\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://www.163yun.com\" target=\"_blank\" border=\"0\"><img alt=\"Netease Cloud\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/wangyi.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"http://www.yanrongyun.com\" target=\"_blank\" border=\"0\"><img alt=\"Yanrongyun\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/Yanrong.jpg\" height=\"40\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://anchore.com\" target=\"_blank\" border=\"0\"><img alt=\"Anchore\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/anchore_logo.png\" height=\"40\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://www.dynatrace.com/\" target=\"_blank\" border=\"0\"><img alt=\"Dynatrace\" src=\"https://raw.githubusercontent.com/goharbor/website/main/static/img/logos/users-partners/dynatrace-logo.png\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://www.home.cern/\" target=\"_blank\" border=\"0\">CERN</a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://www.ns.nl/\" target=\"_blank\" border=\"0\"><img alt=\"Nederlandse Spoorwegen\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/nederlandse-spoorwegen.png\" height=\"40\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n<a href=\"https://www.de-cix.net/\" target=\"_blank\" border=\"0\"><img alt=\"DE-CIX\" src=\"https://raw.githubusercontent.com/goharbor/website/main/docs/img/adopters/de-cix.png\" height=\"50\"></a>&nbsp; &nbsp; &nbsp; &nbsp;\n\n## Success Stories\n\n**JD.com:** Harbor is the registry service of JD.com’s JDOS\nplatform. Harbor has been used for over 2 years in production with tens of\nthousands of nodes and managing millions of container images.\n\n**China Mobile:** Harbor has been used in production for more than a year,\nserving images to a container environment with over 1,000 nodes and about 20,000 images.\n\n**360 Total Security:** Harbor is used to distribute images and manage access\nto project images at 360 Total Security. The image replication function is\nheavily leveraged in their environment. Harbor supports approximately 800\ncompute nodes in production environments across different regions and manages\nabout 20,000 container images.\n\n**Slamtec:** Harbor is being used in external production systems as well as\ninternal dev/test environments. All services are deployed using container\nimages stored and managed by Harbor, making Harbor an important part of\nSlamtec's CI/CD workflow.\n\n**Bingo Cloud:** Bingo cloud OS uses Harbor as their ECR (Elastic Container\nRegistry) component. Harbor allows them to have project-based image management\nin private cloud environment of large enterprises. Harbor has been deployed in\nsome large state-owned or province-owned enterprises.\n\n**Union Pay:** Union Pay adopts Harbor to manage container images for more than\n200 nodes. Harbor enforces RBAC and vulnerability scanning on images used in\nthe production environment.\n\n**Minsheng Life Insurance:** Harbor is used to build a private image registry.\nIt manages base images of all application services and the container images\ncreated in project development. Harbor is integrated with the container cloud\nplatform through its RESTful API. Harbor supports about 40 nodes in a cluster\nand manages more than 3,000 images.\n\n**Priority Payment Systems:** Harbor has been an integral component in our\nCI/CD pipeline for more than a year housing hundreds of images for various\nenvironments.\n\n**AWN:** Utilizes Harbor as a secure image repository for all internal\ncontainer-based workloads. Harbor provides developers and sysadmins a secure\nand easy-to-use repository. AWN leverages the image vulnerability scanning\nfeature within Harbor before deploying images into production.\n\n**Allegis:** Harbor is used at Allegis as a secure private registry to store\nand scan customized container images for different business applications, like\nELK stack, as part of their CI/CD pipeline.\n\n**DE-CIX:** Harbor has been integrated into the application stack to replace the former hosted Docker registry, now known as the Distribution Registry. With Harbor, we have started separating access to project-related images using OIDC group mapping and robot accounts with dedicated permissions. Another significant benefit comes with the implemented vulnerability scanner, which makes vulnerabilities more transparent to our teams.\n\n## Adding your logo\n\nIf you would like to add your logo here and to the `Users and Partners of Harbor` section of the website, add a PNG or SVG version of your logo to the [adopters](https://github.com/goharbor/website/tree/main/docs/img/adopters) directory of the [website](https://github.com/goharbor/website) and submit a pull request with your change. Name the image file something that reflects your company (e.g., if your company is called Acme, name the image acme.png). We will follow up and make the change in the goharbor.io website as well.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.0673828125,
          "content": "# Changelog\n\n# v1.8.0 (2019-05-21)\n[Full list of issues fixed in v1.8.0](https://github.com/goharbor/harbor/issues?q=is%3Aissue+is%3Aclosed+label%3Atarget%2F1.8.0)\n* Support for OpenID Connect - OpenID Connect (OIDC) is an authentication layer on top of OAuth 2.0, allowing Harbor to verify the identity of users based on the authentication performed by an external authorization server or identity provider.\n* Robot accounts - Robot accounts can be configured to provide administrators with a token that can be granted appropriate permissions for pulling or pushing images. Harbor users can continue operating Harbor using their enterprise SSO credentials, and use robot accounts for CI/CD systems that perform Docker client commands.\n* Replication advancements - Harbor new version replication allows you to replicate your Harbor repository to and from non-Harbor registries. Harbor 1.8 expands on the Harbor-to-Harbor replication feature, adding the ability to replicate resources between Harbor and Docker Hub, Docker Registry, and Huawei Registry. This is enabled through both push and pull mode replication.\n* Health check API, showing detailed status and health of all Harbor components.\n* Support for defining cron-based scheduled tasks in the Harbor UI. Administrators can now use cron strings to define the schedule of a job. Scan, garbage collection and replication jobs are all supported.\nAPI explorer integration. End users can now explore and trigger Harbor’s API via the swagger UI nested inside Harbor’s UI.\n* Introduce a new master role to project, the role's permissions are more than developer and less than project admin.\n* Introduce harbor.yml as the replacement of harbor.cfg and refactor the prepare script to provide more flexibility to the installation process based on docker-compose\n* Enhancement of the Job Service engine to include webhook events, additional APIs for automation, and numerous bug fixes to improve the stability of the service.\n* Docker Registry upgraded to v2.7.1.\n\n## v1.7.5 (2019-04-02)\n* Bumped up Clair to v2.0.8\n* Fixed issues in supporting windows images. #6992 #6369\n* Removed user-agent check-in notification handler. #5729\n* Fixed the issue global search not working if chartmuseum is not installed #6753\n\n## v1.7.4 (2019-03-04)\n[Full list of issues fixed in v1.7.4](https://github.com/goharbor/harbor/issues?q=is%3Aissue+is%3Aclosed+label%3Atarget%2F1.7.4)\n\n## v1.7.1 (2019-01-07)\n[Full list of issues fixed in v1.7.1](https://github.com/goharbor/harbor/issues?q=is%3Aissue+is%3Aclosed+label%3Atarget%2F1.7.1)\n\n## v1.7.0 (2018-12-19)\n* Support deploy Harbor with Helm Chart, enables the user to have high availability of Harbor services, refer to the [Installation and Configuration Guide](https://github.com/goharbor/harbor-helm/tree/1.0.0). \n* Support on-demand Garbage Collection, enables the admin to configure run docker registry garbage collection manually or automatically with a cron schedule.\n* Support Image Retag, enables the user to tag image to different repositories and projects, this is particularly useful in cases when images need to be retagged programmatically in a CI pipeline.\n* Support Image Build History, makes it easy to see the contents of a container image, refer to the [User Guide](https://github.com/goharbor/harbor/blob/release-1.7.0/docs/user_guide.md#build-history).\n* Support Logger customization, enables the user to customize STDOUT / STDERR / FILE / DB logger of running jobs.\n* Improve user experience of Helm Chart Repository:\n   - Chart searching included in the global search results\n   - Show chart versions total number in the chart list\n   - Mark labels to helm charts\n   - The latest version can be downloaded as default one on the chart list view\n   - The chart can be deleted by deleting all the versions under it\n\n\n## v1.6.0 (2018-09-11)\n\n- Support manages Helm Charts: From version 1.6.0, Harbor is upgraded to be a composite cloud-native registry, which supports both image management and helm charts management.\n- Support LDAP group: User can import an LDAP/AD group to Harbor and assign project roles to it.\n- Replicate images with label filter: Use newly added label filter to narrow down the sourcing image list when doing image replication.\n- Migrate multiple databases to one unified PostgreSQL database.\n\n## v1.5.0 (2018-05-07)\n\n- Support read-only mode for registry: Admin can set registry to read-only mode before GC. [Details](https://github.com/vmware/harbor/blob/master/docs/user_guide.md#managing-registry-read-only)\n- Label support: User can add label to image/repository, and filter images by label on UI/API. [Details](https://github.com/vmware/harbor/blob/master/docs/user_guide.md#managing-labels)\n- Show repositories via Cardview.\n- Re-work Job service to make it HA ready.\n\n## v1.4.0 (2018-02-07)\n\n- Replication policy rework to support wildcard, scheduled replication.\n- Support repository level description.\n- Batch operation on projects/repositories/users from UI.\n- On board LDAP user when adding member to a project.\n\n## v1.3.0 (2018-01-04)\n\n- Project level policies for blocking the pull of images with vulnerabilities and unknown provenance.\n- Remote certificate verification of replication moved to target level.\n- Refined all images to improve security.\n\n## v1.2.0 (2017-09-15)\n\n- Authentication and authorization, implementing vCenter Single Sign On across components and role-based access control at the project level. [Read more](https://vmware.github.io/vic-product/assets/files/html/1.2/vic_overview/introduction.html#projects)\n- Full integration of the vSphere Integrated Containers Registry and Management Portal user interfaces. [Read more](https://vmware.github.io/vic-product/assets/files/html/1.2/vic_cloud_admin/)\n- Image vulnerabilities scanning.\n\n## v1.1.0 (2017-04-18)\n\n- Add in Notary support\n- User can update configuration through Harbor UI\n- Redesign of Harbor's UI using Clarity\n- Some changes to API\n- Fix some security issues in token service\n- Upgrade base image of nginx for latest openssl version\n- Various bug fixes.\n\n## v0.5.0 (2016-12-6)\n\n- Refactor for a new build process\n- Easier configuration for HTTPS in prepare script\n- Script to collect logs of a Harbor deployment\n- User can view the storage usage (default location) of Harbor.\n- Add an attribute to disable normal user to create project\n- Various bug fixes.\n\nFor Harbor virtual appliance:\n\n- Improve the bootstrap process of ova installation.\n- Enable HTTPS by default for .ova deployment, users can download the default root cert from UI for docker client or VCH.\n- Preload a photon:1.0 image to Harbor for users who have no internet connection.\n\n## v0.4.5 (2016-10-31)\n\n- Virtual appliance of Harbor for vSphere.\n- Refactor for new build process.\n- Easier configuration for HTTPS in prepare step.\n- Updated documents.\n- Various bug fixes.\n\n## v0.4.0 (2016-09-23)\n\n- Database schema changed, data migration/upgrade is needed for previous version.\n- A project can be deleted when no images and policies are under it.\n- Deleted users can be recreated.\n- Replication policy can be deleted.\n- Enhanced LDAP authentication, allowing multiple uid attributes.\n- Pagination in UI.\n- Improved authentication for remote image replication.\n- Display release version in UI\n- Offline installer.\n- Various bug fixes.\n\n## v0.3.5 (2016-08-13)\n\n- Vendoring all dependencies and remove go get from dockerfile\n- Installer using Docker Hub to download images\n- Harbor base images moved to Photon OS (except for official images from third party)\n- New Harbor logo\n- Various bug fixes\n\n## v0.3.0 (2016-07-15)\n\n- Database schema changed, data migration/upgrade is needed for previous version.\n- New UI\n- Image replication across multiple registry instances\n- Integration with registry v2.4.0 to support image deletion and garbage collection\n- Database migration tool\n- Bug fixes\n\n## v0.1.1 (2016-04-08)\n\n- Refactored database schema\n- Migrate to docker-compose v2 template\n- Update token service to support layer mount\n- Various bug fixes\n\n## v0.1.0 (2016-03-11)\n\nInitial release, key features include\n\n- Role based access control (RBAC)\n- LDAP / AD integration\n- Graphical user interface (GUI)\n- Auditing and logging\n- RESTful API\n- Internationalization\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.0693359375,
          "content": "# Community managmenent owners and tech docs\n*   @goharbor/maintainers\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 19.400390625,
          "content": "# Contributing to Harbor\n\n## Welcome\n\nHarbor is developed in the open, and is constantly being improved by our **users, contributors, and maintainers**.\nIt is because of you that we can bring great software to the community.\n\nThis guide provides information on filing issues and guidelines for open source contributors. **Please leave comments / suggestions if you find something is missing or incorrect.**\n\nContributors are encouraged to collaborate using the following resources in addition to the GitHub [issue tracker](https://github.com/goharbor/harbor/issues):\n\n* [Bi-weekly public community meetings][community-meetings]\n  * Catch up with [past meetings on YouTube][past-meetings]\n* Chat with us on the CNCF Slack ([get an invitation here][cncf-slack] )\n  * [#harbor][users-slack] for end-user discussions\n  * [#harbor-dev][dev-slack] for development of Harbor\n* Want long-form communication instead of Slack? We have two distributions lists:\n  * [harbor-users][users-dl] for end-user discussions\n  * [harbor-dev][dev-dl] for development of Harbor\n\nFollow us on Twitter at [@project_harbor][twitter]\n\n## Getting Started\n\n### Fork Repository\n\nFork the Harbor repository on GitHub to your personal account.\n```sh\n#Set golang environment\nexport GOPATH=$HOME/go\nmkdir -p $GOPATH/src/github.com/goharbor\n\n#Get code\ngit clone git@github.com:goharbor/harbor.git\ncd $GOPATH/src/github.com/goharbor/harbor\n\n#Track repository under your personal account\ngit config push.default nothing # Anything to avoid pushing to goharbor/harbor by default\ngit remote rename origin goharbor\ngit remote add $USER git@github.com:$USER/harbor.git\ngit fetch $USER\n\n```\n**NOTES:** Note that GOPATH can be any directory, the example above uses $HOME/go. Change $USER above to your own GitHub username.\n\n### Build Project\n\nTo build the project, please refer the [build](https://goharbor.io/docs/edge/build-customize-contribute/compile-guide/) guideline.\n\n### Repository Structure\n\nHere is the basic structure of the harbor code base. Some key folders / files are commented for your references.\n```\n.\n...\n├── contrib       # Contain documents, scripts, and other helpful things which are contributed by the community\n├── make          # Resource for building and setting up Harbor environment\n...\n├── src           # Source code folder\n├── tests         # Test cases for API / e2e testings\n└── tools         # Keep supporting tools\n...\n```\n\nThe folder graph below shows the structure of the source code folder `harbor/src`, which will be your primary working directory. The key folders are also commented.\n```\n.\n├── chartserver         # Source code contains the main logic to handle chart.\n├── cmd                 # Source code contains migrate script to handle DB upgrade.\n├── common              # Source code for some general components like dao etc.\n│   ├── api\n│   ├── config\n│   ├── dao\n│   ├── http\n│   ├── job\n│   ├── models\n│   ├── rbac\n│   ├── registryctl\n│   ├── secret\n│   ├── security\n│   └── utils\n├── controller          # Source code for the controllers used by the API handlers.\n│   ├── artifact\n│   ├── blob\n│   ├── event\n│   ├── icon\n│   ├── p2p\n│   ├── project\n│   ├── proxy\n│   ├── quota\n│   ├── repository\n│   ├── scan\n│   ├── scanner\n│   ├── tag\n│   ├── task\n├── core                # Source code for the main business logic. Contains rest apis and all service information.\n│   ├── api\n│   ├── auth\n│   ├── config\n│   ├── controllers\n│   ├── filter\n│   ├── label\n│   ├── notifier\n│   ├── promgr\n│   ├── proxy\n│   ├── service\n│   ├── systeminfo\n│   ├── utils\n│   └── views\n├── jobservice          # Source code for the job service component\n│   ├── api\n│   ├── config\n│   ├── core\n│   ├── env\n│   ├── errs\n│   ├── job\n│   ├── logger\n│   ├── models\n│   ├── opm\n│   ├── period\n│   ├── pool\n│   ├── runtime\n│   ├── tests\n│   └── utils\n├── portal              # The code of harbor web UI\n│   ├── e2e\n│   ├── lib             # Source code of @harbor/ui npm library which includes the main UI components of web UI\n│   └── src             # General web page UI code of Harbor\n├── registryctl         # Source code contains the main logic to handle registry.\n├── replication         # Source code contains the main logic of replication.\n├── server              # Source code for the APIs.\n│   ├── handler\n│   ├── middleware\n│   ├── registry\n│   ├── router\n│   ├── v2.0\n└── testing             # Some utilities to handle testing.\n```\n\n### Setup Development Environment\n\n#### Go\nHarbor backend is written in [Go](http://golang.org/). If you don't have a Harbor backend service development environment, please [set one up](https://golang.org/doc/install).\n\n| Harbor | Requires Go |\n|--------|-------------|\n| 1.1    | 1.7.3       |\n| 1.2    | 1.7.3       |\n| 1.3    | 1.9.2       |\n| 1.4    | 1.9.2       |\n| 1.5    | 1.9.2       |\n| 1.6    | 1.9.2       |\n| 1.7    | 1.9.2       |\n| 1.8    | 1.11.2      |\n| 1.9    | 1.12.12     |\n| 1.10   | 1.12.12     |\n| 2.0    | 1.13.15     |\n| 2.1    | 1.14.13     |\n| 2.2    | 1.15.6      |\n| 2.3    | 1.15.12     |\n| 2.4    | 1.17.7      |\n| 2.5    | 1.17.7      |\n| 2.6    | 1.18.6      |\n| 2.7    | 1.19.4      |\n| 2.8    | 1.20.6      |\n| 2.9    | 1.21.3      |\n| 2.10   | 1.21.8      |\n| 2.11   | 1.22.3      |\n| 2.12   | 1.23.2      |\n\n\nEnsure your GOPATH and PATH have been configured in accordance with the Go environment instructions.\n\n#### Web\n\nHarbor web UI is built based on [Clarity](https://vmware.github.io/clarity/) and [Angular](https://angular.io/) web framework. To setup web UI development environment, please make sure the [npm](https://www.npmjs.com/get-npm) tool is installed first.\n\n|  Harbor  |  Requires Angular  |  Requires Clarity  |\n|----------|--------------------|--------------------|\n|   1.1    |      2.4.1         |       0.8.7        |\n|   1.2    |      4.1.3         |       0.9.8        |\n|   1.3    |      4.3.0         |       0.10.17      |\n|   1.4    |      4.3.0         |       0.10.17      |\n|   1.5    |      4.3.0         |       0.10.27      |\n|   1.6    |      4.3.0         |       0.10.27      |\n|   1.7    |      6.0.3         |       0.12.10      |\n|   1.8    |      7.1.3         |       1.0.0        |\n|   1.9    |      7.1.3         |       1.0.0        |\n|   1.10   |      8.2.0         |       2.2.0        |\n|   2.0    |      8.2.0         |       2.3.8        |\n|   2.1    |      8.2.0         |       2.3.8        |\n|   2.2    |      10.1.2        |       4.0.2        |\n|   2.3    |      10.1.2        |       4.0.2        |\n|   2.4    |      12.0.3        |       5.3.0        |\n\nTo run the Web UI code, please refer to the UI [start](https://github.com/goharbor/harbor/tree/main/src/portal) guideline.\n\nTo run the code, please refer to the [build](https://goharbor.io/docs/edge/build-customize-contribute/compile-guide/) guideline.\n\n## Contribute Workflow\n\nPR are always welcome, even if they only contain small fixes like typos or a few lines of code. If there will be a significant effort, please document it as an issue and get a discussion going before starting to work on it.\n\nPlease submit a PR broken down into small changes bit by bit. A PR consisting of a lot of features and code changes may be hard to review. It is recommended to submit PRs in an incremental fashion.\n\nNote: If you split your pull request to small changes, please make sure any of the changes goes to `main` will not break anything. Otherwise, it can not be merged until this feature complete.\n\n### Fork and clone\n\nFork the Harbor repository and clone the code to your local workspace. Per Go's [workspace instructions](https://golang.org/doc/code.html#Workspaces), place Harbor's code on your `GOPATH`. Refer to section [Fork Repository](#fork-repository) for details.\n\nDefine a local working directory:\n```sh\nworking_dir=$GOPATH/src/github.com/goharbor\n```\n\nSet user to match your github profile name:\n```sh\nuser={your github profile name}\n```\n\nBoth `$working_dir` and `$user` are mentioned in the figure above.\n\n### Branch\nChanges should be made on your own fork in a new branch. The branch should be named  `XXX-description` where XXX is the number of the issue. PR should be rebased on top of `main` without multiple branches mixed into the PR. If your PR do not merge cleanly, use commands listed below to get it up to date.\n\n```sh\n#goharbor is the origin upstream\n\ncd $working_dir/harbor\ngit fetch goharbor\ngit checkout main\ngit rebase goharbor/main\n```\n\nBranch from the updated `main` branch:\n\n```sh\ngit checkout -b my_feature main\n```\n\n### Develop, Build and Test\n\nWrite code on the new branch in your fork. The coding style used in Harbor is suggested by the Golang community. See the [style doc](https://github.com/golang/go/wiki/CodeReviewComments) for details.\n\nTry to limit column width to 120 characters for both code and markdown documents such as this one.\n\nAs we are enforcing standards set by [golint](https://github.com/golang/lint), please always run golint on source code before committing your changes. If it reports an issue, in general, the preferred action is to fix the code to comply with the linter's recommendation\nbecause golint gives suggestions according to the stylistic conventions listed in [Effective Go](https://golang.org/doc/effective_go.html) and the [CodeReviewComments](https://github.com/golang/go/wiki/CodeReviewComments).\n```sh\n#Install fgt and golint\n\ngo install golang.org/x/lint/golint@latest\ngo install github.com/GeertJohan/fgt@latest\n\n#In the #working_dir/harbor, run\n\ngo list ./... | grep -v -E 'tests' | xargs -L1 fgt golint\n\n```\n\nUnit test cases should be added to cover the new code. Unit test framework for backend services is using [go testing](https://golang.org/doc/code.html#Testing). The UI library test framework is built based on [Jasmine](https://jasmine.github.io/) and [Karma](https://karma-runner.github.io/1.0/index.html), please refer to [Angular Testing](https://angular.io/guide/testing) for more details.\n\nRun go test cases:\n```sh\n#cd #working_dir/src/[package]\ngo test -v ./...\n```\n\nRun UI library test cases:\n```sh\n#cd #working_dir/src/portal/lib\nnpm run test\n```\n\nTo build the code, please refer to [build](https://goharbor.io/docs/edge/build-customize-contribute/compile-guide/) guideline.\n\n**Note**: from v2.0, Harbor uses [go-swagger](https://github.com/go-swagger/go-swagger) to generate API server from Swagger 2.0 (aka [OpenAPI 2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)). To add or change the APIs, first update the `api/v2.0/swagger.yaml` file, then run `make gen_apis` to generate the API server, finally, implement or update the API handlers in `src/server/v2.0/handler` package.\n\nAs now Harbor uses `controller/manager/dao` programming model, we suggest to use [testify mock](https://github.com/stretchr/testify/blob/master/mock/doc.go) to test `controller` and `manager`. Harbor integrates [mockery](https://github.com/vektra/mockery) to generate mocks for golang interfaces using the testify mock package. To generate mocks for the interface, first add mock config in the `src/.mockery.yaml`, then run `make gen_mocks` to generate mocks.\n\n###  Keep sync with upstream\n\n\nOnce your branch gets out of sync with the goharbor/main branch, use the following commands to update:\n```bash\ngit checkout my_feature\ngit fetch -a\ngit rebase goharbor/main\n\n```\n\nPlease use `fetch / rebase` (as shown above) instead of `git pull`. `git pull` does a merge, which leaves merge commits. These make the commit history messy and violate the principle that commits ought to be individually understandable and useful (see below). You can also consider changing your `.git/config` file via git config `branch.autoSetupRebase` always to change the behavior of `git pull`.\n\n### Commit\n\nAs Harbor has integrated the [DCO (Developer Certificate of Origin)](https://probot.github.io/apps/dco/) check tool, contributors are required to sign off that they adhere to those requirements by adding a `Signed-off-by` line to the commit messages. Git has even provided a `-s` command line option to append that automatically to your commit messages, please use it when you commit your changes.\n\n```bash\n$ git commit -s -m 'This is my commit message'\n```\n\nCommit your changes if they're ready:\n```bash\ngit add -A\ngit commit -s #-a\ngit push --force-with-lease $user my_feature\n```\n\nThe commit message should follow the convention on [How to Write a Git Commit Message](http://chris.beams.io/posts/git-commit/). Be sure to include any related GitHub issue references in the commit message. See [GFM syntax](https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown) for referencing issues and commits.\n\nTo help write conformant commit messages, it is recommended to set up the [git-good-commit](https://github.com/tommarshall/git-good-commit) commit hook. Run this command in the Harbor repo's root directory:\n\n```sh\ncurl https://cdn.jsdelivr.net/gh/tommarshall/git-good-commit@v0.6.1/hook.sh > .git/hooks/commit-msg && chmod +x .git/hooks/commit-msg\n```\n\n### Automated Testing\nOnce your pull request has been opened, harbor will run two CI pipelines against it.\n1. In the travis CI, your source code will be checked via `golint`, `go vet` and `go race` that makes sure the code is readable, safe and correct. Also, all of unit tests will be triggered via `go test` against the pull request. What you need to pay attention to is the travis result and the coverage report.\n* If any failure in travis, you need to figure out whether it is introduced by your commits.\n* If the coverage dramatic decline, you need to commit unit test to coverage your code.\n2. In the drone CI, the E2E test will be triggered against the pull request. Also, the source code will be checked via `gosec`, and the result is stored in google storage for later analysis. The pipeline is about to build and install harbor from source code, then to run four very basic E2E tests to validate the basic functionalities of harbor, like:\n* Registry Basic Verification, to validate the image can be pulled and pushed successful.\n* Trivy Basic Verification, to validate the image can be scanned successful.\n* Notary Basic Verification, to validate the image can be signed successful.\n* Ldap Basic Verification, to validate harbor can work in LDAP environment.\n\n### Push and Create PR\nWhen ready for review, push your branch to your fork repository on `github.com`:\n```sh\ngit push --force-with-lease $user my_feature\n\n```\n\nThen visit your fork at https://github.com/$user/harbor and click the `Compare & Pull Request` button next to your `my_feature` branch to create a new pull request (PR). Description of a pull request should refer to all the issues that it addresses. Remember to put a reference to issues (such as `Closes #XXX` and `Fixes #XXX`) in commits so that the issues can be closed when the PR is merged.\n\nOnce your pull request has been opened it will be assigned to one or more reviewers. Those reviewers will do a thorough code review, looking for correctness, bugs, opportunities for improvement, documentation and comments, and style.\n\nCommit changes made in response to review comments to the same branch on your fork.\n\n## Reporting issues\n\nIt is a great way to contribute to Harbor by reporting an issue. Well-written and complete bug reports are always welcome! Please open an issue on GitHub and follow the template to fill in required information.\n\nBefore opening any issue, please look up the existing [issues](https://github.com/goharbor/harbor/issues) to avoid submitting a duplication.\nIf you find a match, you can \"subscribe\" to it to get notified on updates. If you have additional helpful information about the issue, please leave a comment.\n\nWhen reporting issues, always include:\n\n* Version of docker engine and docker-compose\n* Configuration files of Harbor\n* Log files in /var/log/harbor/\n\nBecause the issues are open to the public, when submitting the log and configuration files, be sure to remove any sensitive information, e.g. user name, password, IP address, and company name. You can\nreplace those parts with \"REDACTED\" or other strings like \"****\".\n\nBe sure to include the steps to reproduce the problem if applicable. It can help us understand and fix your issue faster.\n\n## Documenting\n\nUpdate the documentation if you are creating or changing features. Good documentation is as important as the code itself.\n\nThe main location for the documentation is the [website repository](https://github.com/goharbor/website). The images referred to in documents can be placed in `docs/img` in that repo.\n\nDocuments are written with Markdown. See [Writing on GitHub](https://help.github.com/categories/writing-on-github/) for more details.\n\n## Develop and propose new features.\n### The following simple process can be used to submit new features or changes to the existing code.\n\n- See if your feature is already being worked on. Check both the [Issues](https://github.com/goharbor/harbor/issues) and the [PRs](https://github.com/goharbor/harbor/pulls) in the main Harbor repository as well as the [Community repository](https://github.com/goharbor/community).\n- Submit(open PR) the new proposal at [community/proposals/new](https://github.com/goharbor/community/tree/main/proposals/new) using the already existing [template](https://github.com/goharbor/community/blob/main/proposals/TEMPLATE.md)\n- The proposal must be labeled as \"kind/proposal\" - check examples [here](https://github.com/goharbor/community/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Akind%2Fproposal)\n- The proposal can be modified and adapted to meet the requirements from the community, other maintainers and contributors. The overall architecture needs to be consistent to avoid duplicate work in the [Roadmap](https://github.com/goharbor/harbor/wiki#roadmap).\n- Proposal should be discussed at Community meeting [Community Meeting agenda](https://github.com/goharbor/community/wiki/Harbor-Community-Meetings) to be presented to maintainers and contributors.\n- When reviewed and approved it can be implemented either by the original submitter or anyone else from the community which we highly encourage, as the project is community driven. Open PRs in the respective repositories with all the necessary code and test changes as described in the current document.\n- Once implemented or during the implementation, the PRs are reviewed by maintainers and contributors, following the best practices and methods.\n- After merging the new PRs, the proposal must be moved to [community/proposals](https://github.com/goharbor/community/tree/main/proposals) and marked as done!\n- You have made Harbor even better, congratulations. Thank you!\n\n\n\n[community-meetings]: https://github.com/goharbor/community/blob/main/MEETING_SCHEDULE.md\n[past-meetings]: https://www.youtube.com/playlist?list=PLgInP-D86bCwTC0DYAa1pgupsQIAWPomv\n[users-slack]: https://cloud-native.slack.com/archives/CC1E09J6S\n[dev-slack]: https://cloud-native.slack.com/archives/CC1E0J0MC\n[cncf-slack]: https://slack.cncf.io\n[users-dl]: https://lists.cncf.io/g/harbor-users\n[dev-dl]: https://lists.cncf.io/g/harbor-dev\n[twitter]: http://twitter.com/project_harbor\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0810546875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright Project Harbor Authors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 23.4716796875,
          "content": "# Makefile for Harbor project\n#\n# Targets:\n#\n# all:\t\t\tprepare env, compile binaries, build images and install images\n# prepare: \t\tprepare env\n# compile: \t\tcompile core and jobservice code\n#\n# compile_golangimage:\n#\t\t\tcompile from golang image\n#\t\t\tfor example: make compile_golangimage -e GOBUILDIMAGE= \\\n#\t\t\t\t\t\t\tgolang:1.18.5\n# compile_core, compile_jobservice: compile specific binary\n#\n# build:\tbuild Harbor docker images from photon baseimage\n#\n# install:\t\tinclude compile binaries, build images, prepare specific \\\n#\t\t\t\tversion composefile and startup Harbor instance\n#\n# start:\t\tstartup Harbor instance\n#\n# down:\t\t\tshutdown Harbor instance\n#\n# package_online:\n#\t\t\t\tprepare online install package\n#\t\t\tfor example: make package_online -e DEVFLAG=false\\\n#\t\t\t\t\t\t\tREGISTRYSERVER=reg-bj.goharbor.io \\\n#\t\t\t\t\t\t\tREGISTRYPROJECTNAME=harborrelease\n#\n# package_offline:\n#\t\t\t\tprepare offline install package\n#\n# pushimage:\tpush Harbor images to specific registry server\n#\t\t\tfor example: make pushimage -e DEVFLAG=false REGISTRYUSER=admin \\\n#\t\t\t\t\t\t\tREGISTRYPASSWORD=***** \\\n#\t\t\t\t\t\t\tREGISTRYSERVER=reg-bj.goharbor.io/ \\\n#\t\t\t\t\t\t\tREGISTRYPROJECTNAME=harborrelease\n#\t\t\t\tnote**: need add \"/\" on end of REGISTRYSERVER. If not setting \\\n#\t\t\t\t\t\tthis value will push images directly to dockerhub.\n#\t\t\t\t\t\t make pushimage -e DEVFLAG=false REGISTRYUSER=goharbor \\\n#\t\t\t\t\t\t\tREGISTRYPASSWORD=***** \\\n#\t\t\t\t\t\t\tREGISTRYPROJECTNAME=goharbor\n#\n# clean:        remove binary, Harbor images, specific version docker-compose \\\n#               file, specific version tag and online/offline install package\n# cleanbinary:\tremove core and jobservice binary\n# cleanbaseimage:\n#               remove the base images of Harbor images\n# cleanimage: \tremove Harbor images\n# cleandockercomposefile:\n#\t\t\t\tremove specific version docker-compose\n# cleanversiontag:\n#\t\t\t\tcleanpackageremove specific version tag\n# cleanpackage: remove online/offline install package\n#\n# other example:\n#\tclean specific version binaries and images:\n#\t\t\t\tmake clean -e VERSIONTAG=[TAG]\n#\t\t\t\tnote**: If commit new code to github, the git commit TAG will \\\n#\t\t\t\tchange. Better use this command clean previous images and \\\n#\t\t\t\tfiles with specific TAG.\n#   By default DEVFLAG=true, if you want to release new version of Harbor, \\\n#\t\tshould setting the flag to false.\n#\t\t\t\tmake XXXX -e DEVFLAG=false\n\nSHELL := /bin/bash\nBUILDPATH=$(CURDIR)\nMAKEPATH=$(BUILDPATH)/make\nMAKE_PREPARE_PATH=$(MAKEPATH)/photon/prepare\nSRCPATH=./src\nTOOLSPATH=$(BUILDPATH)/tools\nCORE_PATH=$(BUILDPATH)/src/core\nPORTAL_PATH=$(BUILDPATH)/src/portal\nCHECKENVCMD=checkenv.sh\n\n# parameters\nREGISTRYSERVER=\nREGISTRYPROJECTNAME=goharbor\nDEVFLAG=true\nTRIVYFLAG=false\nHTTPPROXY=\nBUILDBIN=true\nNPM_REGISTRY=https://registry.npmjs.org\nBUILDTARGET=build\nGEN_TLS=\n\n# version prepare\n# for docker image tag\nVERSIONTAG=dev\n# for base docker image tag\nBUILD_BASE=true\nPUSHBASEIMAGE=false\nBASEIMAGETAG=dev\nBUILDBASETARGET=trivy-adapter core db jobservice log nginx portal prepare redis registry registryctl exporter\nIMAGENAMESPACE=goharbor\nBASEIMAGENAMESPACE=goharbor\n# #input true/false only\nPULL_BASE_FROM_DOCKERHUB=true\n\n# for harbor package name\nPKGVERSIONTAG=dev\n\nPREPARE_VERSION_NAME=versions\n\n#versions\nREGISTRYVERSION=v2.8.3-patch-redis\nTRIVYVERSION=v0.56.1\nTRIVYADAPTERVERSION=v0.32.0-rc.1\n\n# version of registry for pulling the source code\nREGISTRY_SRC_TAG=v2.8.3\n# source of upstream distribution code\nDISTRIBUTION_SRC=https://github.com/distribution/distribution.git\n\n# dependency binaries\nREGISTRYURL=https://storage.googleapis.com/harbor-builds/bin/registry/release-${REGISTRYVERSION}/registry\nTRIVY_DOWNLOAD_URL=https://github.com/aquasecurity/trivy/releases/download/$(TRIVYVERSION)/trivy_$(TRIVYVERSION:v%=%)_Linux-64bit.tar.gz\nTRIVY_ADAPTER_DOWNLOAD_URL=https://github.com/goharbor/harbor-scanner-trivy/archive/refs/tags/$(TRIVYADAPTERVERSION).tar.gz\n\ndefine VERSIONS_FOR_PREPARE\nVERSION_TAG: $(VERSIONTAG)\nREGISTRY_VERSION: $(REGISTRYVERSION)\nTRIVY_VERSION: $(TRIVYVERSION)\nTRIVY_ADAPTER_VERSION: $(TRIVYADAPTERVERSION)\nendef\n\n# docker parameters\nDOCKERCMD=$(shell which docker)\nDOCKERBUILD=$(DOCKERCMD) build\nDOCKERRMIMAGE=$(DOCKERCMD) rmi\nDOCKERPULL=$(DOCKERCMD) pull\nDOCKERIMAGES=$(DOCKERCMD) images\nDOCKERSAVE=$(DOCKERCMD) save\nDOCKERCOMPOSECMD=$(shell which docker-compose)\nDOCKERTAG=$(DOCKERCMD) tag\n\n# go parameters\nGOCMD=$(shell which go)\nGOBUILD=$(GOCMD) build\nGOCLEAN=$(GOCMD) clean\nGOINSTALL=$(GOCMD) install\nGOTEST=$(GOCMD) test\nGODEP=$(GOTEST) -i\nGOFMT=gofmt -w\nGOBUILDIMAGE=golang:1.23.2\nGOBUILDPATHINCONTAINER=/harbor\n\n# go build\nPKG_PATH=github.com/goharbor/harbor/src/pkg\nGITCOMMIT := $(shell git rev-parse --short=8 HEAD)\nRELEASEVERSION := $(shell cat VERSION)\nGOFLAGS=\"-buildvcs=false\"\nGOTAGS=$(if $(GOBUILDTAGS),-tags \"$(GOBUILDTAGS)\",)\nGOLDFLAGS=$(if $(GOBUILDLDFLAGS),--ldflags \"-w -s $(GOBUILDLDFLAGS)\",)\nCORE_LDFLAGS=-X $(PKG_PATH)/version.GitCommit=$(GITCOMMIT) -X $(PKG_PATH)/version.ReleaseVersion=$(RELEASEVERSION)\nifneq ($(GOBUILDLDFLAGS),)\n\tCORE_LDFLAGS += $(GOBUILDLDFLAGS)\nendif\n\n# go build command\nGOIMAGEBUILDCMD=/usr/local/go/bin/go build\nGOIMAGEBUILD_COMMON=$(GOIMAGEBUILDCMD) $(GOFLAGS) ${GOTAGS} ${GOLDFLAGS}\nGOIMAGEBUILD_CORE=$(GOIMAGEBUILDCMD) $(GOFLAGS) ${GOTAGS} --ldflags \"-w -s $(CORE_LDFLAGS)\"\n\nGOBUILDPATH_CORE=$(GOBUILDPATHINCONTAINER)/src/core\nGOBUILDPATH_JOBSERVICE=$(GOBUILDPATHINCONTAINER)/src/jobservice\nGOBUILDPATH_REGISTRYCTL=$(GOBUILDPATHINCONTAINER)/src/registryctl\nGOBUILDPATH_STANDALONE_DB_MIGRATOR=$(GOBUILDPATHINCONTAINER)/src/cmd/standalone-db-migrator\nGOBUILDPATH_EXPORTER=$(GOBUILDPATHINCONTAINER)/src/cmd/exporter\nGOBUILDMAKEPATH=make\nGOBUILDMAKEPATH_CORE=$(GOBUILDMAKEPATH)/photon/core\nGOBUILDMAKEPATH_JOBSERVICE=$(GOBUILDMAKEPATH)/photon/jobservice\nGOBUILDMAKEPATH_REGISTRYCTL=$(GOBUILDMAKEPATH)/photon/registryctl\nGOBUILDMAKEPATH_STANDALONE_DB_MIGRATOR=$(GOBUILDMAKEPATH)/photon/standalone-db-migrator\nGOBUILDMAKEPATH_EXPORTER=$(GOBUILDMAKEPATH)/photon/exporter\n\n# binary\nCORE_BINARYPATH=$(BUILDPATH)/$(GOBUILDMAKEPATH_CORE)\nCORE_BINARYNAME=harbor_core\nJOBSERVICEBINARYPATH=$(BUILDPATH)/$(GOBUILDMAKEPATH_JOBSERVICE)\nJOBSERVICEBINARYNAME=harbor_jobservice\nREGISTRYCTLBINARYPATH=$(BUILDPATH)/$(GOBUILDMAKEPATH_REGISTRYCTL)\nREGISTRYCTLBINARYNAME=harbor_registryctl\nSTANDALONE_DB_MIGRATOR_BINARYPATH=$(BUILDPATH)/$(GOBUILDMAKEPATH_STANDALONE_DB_MIGRATOR)\nSTANDALONE_DB_MIGRATOR_BINARYNAME=migrate\n\n# configfile\nCONFIGPATH=$(MAKEPATH)\nINSIDE_CONFIGPATH=/compose_location\nCONFIGFILE=harbor.yml\n\n# prepare parameters\nPREPAREPATH=$(TOOLSPATH)\nPREPARECMD=prepare\nPREPARECMD_PARA=--conf $(INSIDE_CONFIGPATH)/$(CONFIGFILE)\nifeq ($(TRIVYFLAG), true)\n\tPREPARECMD_PARA+= --with-trivy\nendif\n\n# makefile\nMAKEFILEPATH_PHOTON=$(MAKEPATH)/photon\n\n# common dockerfile\nDOCKERFILEPATH_COMMON=$(MAKEPATH)/common\n\n# docker image name\nDOCKER_IMAGE_NAME_PREPARE=$(IMAGENAMESPACE)/prepare\nDOCKERIMAGENAME_PORTAL=$(IMAGENAMESPACE)/harbor-portal\nDOCKERIMAGENAME_CORE=$(IMAGENAMESPACE)/harbor-core\nDOCKERIMAGENAME_JOBSERVICE=$(IMAGENAMESPACE)/harbor-jobservice\nDOCKERIMAGENAME_LOG=$(IMAGENAMESPACE)/harbor-log\nDOCKERIMAGENAME_DB=$(IMAGENAMESPACE)/harbor-db\nDOCKERIMAGENAME_REGCTL=$(IMAGENAMESPACE)/harbor-registryctl\nDOCKERIMAGENAME_EXPORTER=$(IMAGENAMESPACE)/harbor-exporter\n\n# docker-compose files\nDOCKERCOMPOSEFILEPATH=$(MAKEPATH)\nDOCKERCOMPOSEFILENAME=docker-compose.yml\n\nSEDCMD=$(shell which sed)\nSEDCMDI=$(SEDCMD) -i\nifeq ($(shell uname),Darwin)\n    SEDCMDI=$(SEDCMD) -i ''\nendif\n\n# package\nTARCMD=$(shell which tar)\nZIPCMD=$(shell which gzip)\nDOCKERIMGFILE=harbor\nHARBORPKG=harbor\n\n# pull/push image\nPUSHSCRIPTPATH=$(MAKEPATH)\nPUSHSCRIPTNAME=pushimage.sh\nREGISTRYUSER=\nREGISTRYPASSWORD=\n\n# cmds\nDOCKERSAVE_PARA=$(DOCKER_IMAGE_NAME_PREPARE):$(VERSIONTAG) \\\n\t\t$(DOCKERIMAGENAME_PORTAL):$(VERSIONTAG) \\\n\t\t$(DOCKERIMAGENAME_CORE):$(VERSIONTAG) \\\n\t\t$(DOCKERIMAGENAME_LOG):$(VERSIONTAG) \\\n\t\t$(DOCKERIMAGENAME_DB):$(VERSIONTAG) \\\n\t\t$(DOCKERIMAGENAME_JOBSERVICE):$(VERSIONTAG) \\\n\t\t$(DOCKERIMAGENAME_REGCTL):$(VERSIONTAG) \\\n\t\t$(DOCKERIMAGENAME_EXPORTER):$(VERSIONTAG) \\\n\t\t$(IMAGENAMESPACE)/redis-photon:$(VERSIONTAG) \\\n\t\t$(IMAGENAMESPACE)/nginx-photon:$(VERSIONTAG) \\\n\t\t$(IMAGENAMESPACE)/registry-photon:$(VERSIONTAG)\n\nPACKAGE_OFFLINE_PARA=-zcvf harbor-offline-installer-$(PKGVERSIONTAG).tgz \\\n\t\t\t\t\t$(HARBORPKG)/$(DOCKERIMGFILE).$(VERSIONTAG).tar.gz \\\n\t\t\t\t\t$(HARBORPKG)/prepare \\\n\t\t\t\t\t$(HARBORPKG)/LICENSE $(HARBORPKG)/install.sh \\\n\t\t\t\t\t$(HARBORPKG)/common.sh \\\n\t\t\t\t\t$(HARBORPKG)/harbor.yml.tmpl\n\nPACKAGE_ONLINE_PARA=-zcvf harbor-online-installer-$(PKGVERSIONTAG).tgz \\\n\t\t\t\t\t$(HARBORPKG)/prepare \\\n\t\t\t\t\t$(HARBORPKG)/LICENSE \\\n\t\t\t\t\t$(HARBORPKG)/install.sh \\\n\t\t\t\t\t$(HARBORPKG)/common.sh \\\n\t\t\t\t\t$(HARBORPKG)/harbor.yml.tmpl\n\nDOCKERCOMPOSE_FILE_OPT=-f $(DOCKERCOMPOSEFILEPATH)/$(DOCKERCOMPOSEFILENAME)\n\nifeq ($(TRIVYFLAG), true)\n\tDOCKERSAVE_PARA+= $(IMAGENAMESPACE)/trivy-adapter-photon:$(VERSIONTAG)\nendif\n\n\nRUNCONTAINER=$(DOCKERCMD) run --rm -u $(shell id -u):$(shell id -g) -v $(BUILDPATH):$(BUILDPATH) -w $(BUILDPATH)\n\n# $1 the name of the docker image\n# $2 the tag of the docker image\n# $3 the command to build the docker image\ndefine prepare_docker_image\n\t@if [ \"$(shell ${DOCKERIMAGES} -q $(1):$(2) 2> /dev/null)\" == \"\" ]; then \\\n\t\t$(3) && echo \"build $(1):$(2) successfully\" || (echo \"build $(1):$(2) failed\" && exit 1) ; \\\n\tfi\nendef\n\n# lint swagger doc\nSPECTRAL_IMAGENAME=$(IMAGENAMESPACE)/spectral\nSPECTRAL_VERSION=v6.11.1\nSPECTRAL_IMAGE_BUILD_CMD=${DOCKERBUILD} -f ${TOOLSPATH}/spectral/Dockerfile --build-arg GOLANG=${GOBUILDIMAGE} --build-arg SPECTRAL_VERSION=${SPECTRAL_VERSION} -t ${SPECTRAL_IMAGENAME}:$(SPECTRAL_VERSION) .\nSPECTRAL=$(RUNCONTAINER) $(SPECTRAL_IMAGENAME):$(SPECTRAL_VERSION)\n\nlint_apis:\n\t$(call prepare_docker_image,${SPECTRAL_IMAGENAME},${SPECTRAL_VERSION},${SPECTRAL_IMAGE_BUILD_CMD})\n\t$(SPECTRAL) lint ./api/v2.0/swagger.yaml\n\nSWAGGER_IMAGENAME=$(IMAGENAMESPACE)/swagger\nSWAGGER_VERSION=v0.31.0\nSWAGGER=$(RUNCONTAINER) ${SWAGGER_IMAGENAME}:${SWAGGER_VERSION}\nSWAGGER_GENERATE_SERVER=${SWAGGER} generate server --template-dir=$(TOOLSPATH)/swagger/templates --exclude-main --additional-initialism=CVE --additional-initialism=GC --additional-initialism=OIDC\nSWAGGER_IMAGE_BUILD_CMD=${DOCKERBUILD} -f ${TOOLSPATH}/swagger/Dockerfile --build-arg GOLANG=${GOBUILDIMAGE} --build-arg SWAGGER_VERSION=${SWAGGER_VERSION} -t ${SWAGGER_IMAGENAME}:$(SWAGGER_VERSION) .\n\n# $1 the path of swagger spec\n# $2 the path of base directory for generating the files\n# $3 the name of the application\ndefine swagger_generate_server\n\t@echo \"generate all the files for API from $(1)\"\n\t@rm -rf $(2)/{models,restapi}\n\t@mkdir -p $(2)\n\t@$(SWAGGER_GENERATE_SERVER) -f $(1) -A $(3) --target $(2)\nendef\n\ngen_apis: lint_apis\n\t$(call prepare_docker_image,${SWAGGER_IMAGENAME},${SWAGGER_VERSION},${SWAGGER_IMAGE_BUILD_CMD})\n\t$(call swagger_generate_server,api/v2.0/swagger.yaml,src/server/v2.0,harbor)\n\n\nMOCKERY_IMAGENAME=$(IMAGENAMESPACE)/mockery\nMOCKERY_VERSION=v2.46.2\nMOCKERY=$(RUNCONTAINER)/src ${MOCKERY_IMAGENAME}:${MOCKERY_VERSION}\nMOCKERY_IMAGE_BUILD_CMD=${DOCKERBUILD} -f ${TOOLSPATH}/mockery/Dockerfile --build-arg GOLANG=${GOBUILDIMAGE} --build-arg MOCKERY_VERSION=${MOCKERY_VERSION} -t ${MOCKERY_IMAGENAME}:$(MOCKERY_VERSION) .\n\ngen_mocks:\n\t$(call prepare_docker_image,${MOCKERY_IMAGENAME},${MOCKERY_VERSION},${MOCKERY_IMAGE_BUILD_CMD})\n\t${MOCKERY} mockery\n\nmocks_check: gen_mocks\n\t@echo checking mocks...\n\t@res=$$(git status -s src/ | awk '{ printf(\"%s\\n\", $$2) }' | egrep .*.go); \\\n\tif [ -n \"$${res}\" ]; then \\\n\t\techo mocks of the interface are out of date... ; \\\n\t\techo \"$${res}\"; \\\n\t\texit 1; \\\n\tfi\n\nexport VERSIONS_FOR_PREPARE\nversions_prepare:\n\t@echo \"$$VERSIONS_FOR_PREPARE\" > $(MAKE_PREPARE_PATH)/$(PREPARE_VERSION_NAME)\n\ncheck_environment:\n\t@$(MAKEPATH)/$(CHECKENVCMD)\n\ncompile_core: gen_apis\n\t@echo \"compiling binary for core (golang image)...\"\n\t@echo $(GOBUILDPATHINCONTAINER)\n\t@$(DOCKERCMD) run --rm -v $(BUILDPATH):$(GOBUILDPATHINCONTAINER) -w $(GOBUILDPATH_CORE) $(GOBUILDIMAGE) $(GOIMAGEBUILD_CORE) -o $(GOBUILDPATHINCONTAINER)/$(GOBUILDMAKEPATH_CORE)/$(CORE_BINARYNAME)\n\t@echo \"Done.\"\n\ncompile_jobservice:\n\t@echo \"compiling binary for jobservice (golang image)...\"\n\t@$(DOCKERCMD) run --rm -v $(BUILDPATH):$(GOBUILDPATHINCONTAINER) -w $(GOBUILDPATH_JOBSERVICE) $(GOBUILDIMAGE) $(GOIMAGEBUILD_COMMON) -o $(GOBUILDPATHINCONTAINER)/$(GOBUILDMAKEPATH_JOBSERVICE)/$(JOBSERVICEBINARYNAME)\n\t@echo \"Done.\"\n\ncompile_registryctl:\n\t@echo \"compiling binary for harbor registry controller (golang image)...\"\n\t@$(DOCKERCMD) run --rm -v $(BUILDPATH):$(GOBUILDPATHINCONTAINER) -w $(GOBUILDPATH_REGISTRYCTL) $(GOBUILDIMAGE) $(GOIMAGEBUILD_COMMON) -o $(GOBUILDPATHINCONTAINER)/$(GOBUILDMAKEPATH_REGISTRYCTL)/$(REGISTRYCTLBINARYNAME)\n\t@echo \"Done.\"\n\ncompile_standalone_db_migrator:\n\t@echo \"compiling binary for standalone db migrator (golang image)...\"\n\t@$(DOCKERCMD) run --rm -v $(BUILDPATH):$(GOBUILDPATHINCONTAINER) -w $(GOBUILDPATH_STANDALONE_DB_MIGRATOR) $(GOBUILDIMAGE) $(GOIMAGEBUILD_COMMON) -o $(GOBUILDPATHINCONTAINER)/$(GOBUILDMAKEPATH_STANDALONE_DB_MIGRATOR)/$(STANDALONE_DB_MIGRATOR_BINARYNAME)\n\t@echo \"Done.\"\n\ncompile: check_environment versions_prepare compile_core compile_jobservice compile_registryctl\n\nupdate_prepare_version:\n\t@echo \"substitute the prepare version tag in prepare file...\"\n\t@$(SEDCMDI) -e 's/goharbor\\/prepare:.*[[:space:]]\\+/goharbor\\/prepare:$(VERSIONTAG) prepare /' $(MAKEPATH)/prepare ;\n\ngen_tls:\n\t@$(DOCKERCMD) run --rm -v /:/hostfs:z $(IMAGENAMESPACE)/prepare:$(VERSIONTAG) gencert -p /etc/harbor/tls/internal\n\nprepare: update_prepare_version\n\t@echo \"preparing...\"\n\t@if [ -n \"$(GEN_TLS)\" ] ; then \\\n\t\t$(DOCKERCMD) run --rm -v /:/hostfs:z $(IMAGENAMESPACE)/prepare:$(VERSIONTAG) gencert -p /etc/harbor/tls/internal; \\\n\tfi\n\t@$(MAKEPATH)/$(PREPARECMD) $(PREPARECMD_PARA)\n\nbuild:\n# PUSHBASEIMAGE should not be true if BUILD_BASE is not true\n\t@if [ \"$(PULL_BASE_FROM_DOCKERHUB)\" != \"true\" ] && [ \"$(PULL_BASE_FROM_DOCKERHUB)\" != \"false\" ] ; then \\\n\t\techo set PULL_BASE_FROM_DOCKERHUB to true or false.; exit 1; \\\n\tfi\n\t@if [ \"$(BUILD_BASE)\" != \"true\" ]  && [ \"$(PUSHBASEIMAGE)\" = \"true\" ] ; then \\\n\t\techo Do not push base images since no base images built. ; \\\n\t\texit 1; \\\n\tfi\n# PULL_BASE_FROM_DOCKERHUB should be true if BUILD_BASE is not true\n\t@if [ \"$(BUILD_BASE)\" != \"true\" ]  && [ \"$(PULL_BASE_FROM_DOCKERHUB)\" = \"false\" ] ; then \\\n\t\techo Should pull base images from registry in docker configuration since no base images built. ; \\\n\t\texit 1; \\\n\tfi\n\tmake -f $(MAKEFILEPATH_PHOTON)/Makefile $(BUILDTARGET) -e DEVFLAG=$(DEVFLAG) -e GOBUILDIMAGE=$(GOBUILDIMAGE) \\\n\t -e REGISTRYVERSION=$(REGISTRYVERSION) -e REGISTRY_SRC_TAG=$(REGISTRY_SRC_TAG)  -e DISTRIBUTION_SRC=$(DISTRIBUTION_SRC)\\\n\t -e TRIVYVERSION=$(TRIVYVERSION) -e TRIVYADAPTERVERSION=$(TRIVYADAPTERVERSION) \\\n\t -e VERSIONTAG=$(VERSIONTAG) \\\n\t -e BUILDBIN=$(BUILDBIN) \\\n\t -e NPM_REGISTRY=$(NPM_REGISTRY) -e BASEIMAGETAG=$(BASEIMAGETAG) -e IMAGENAMESPACE=$(IMAGENAMESPACE) -e BASEIMAGENAMESPACE=$(BASEIMAGENAMESPACE) \\\n\t -e REGISTRYURL=$(REGISTRYURL) \\\n\t -e TRIVY_DOWNLOAD_URL=$(TRIVY_DOWNLOAD_URL) -e TRIVY_ADAPTER_DOWNLOAD_URL=$(TRIVY_ADAPTER_DOWNLOAD_URL) \\\n\t -e PULL_BASE_FROM_DOCKERHUB=$(PULL_BASE_FROM_DOCKERHUB) -e BUILD_BASE=$(BUILD_BASE) \\\n\t -e REGISTRYUSER=$(REGISTRYUSER) -e REGISTRYPASSWORD=$(REGISTRYPASSWORD) \\\n\t -e PUSHBASEIMAGE=$(PUSHBASEIMAGE)\n\nbuild_standalone_db_migrator: compile_standalone_db_migrator\n\tmake -f $(MAKEFILEPATH_PHOTON)/Makefile _build_standalone_db_migrator -e BASEIMAGETAG=$(BASEIMAGETAG) -e VERSIONTAG=$(VERSIONTAG)\n\nbuild_base_docker:\n\tif [ -n \"$(REGISTRYUSER)\" ] && [ -n \"$(REGISTRYPASSWORD)\" ] ; then \\\n\t\tdocker login -u $(REGISTRYUSER) -p $(REGISTRYPASSWORD) ; \\\n\telse \\\n\t\techo \"No docker credentials provided, please make sure enough privileges to access docker hub!\" ; \\\n\tfi\n\t@for name in $(BUILDBASETARGET); do \\\n\t\techo $$name ; \\\n\t\tsleep 30 ; \\\n\t\t$(DOCKERBUILD) --pull --no-cache -f $(MAKEFILEPATH_PHOTON)/$$name/Dockerfile.base -t $(BASEIMAGENAMESPACE)/harbor-$$name-base:$(BASEIMAGETAG) --label base-build-date=$(date +\"%Y%m%d\") . ; \\\n\t\tif [ \"$(PUSHBASEIMAGE)\" != \"false\" ] ; then \\\n\t\t\t$(PUSHSCRIPTPATH)/$(PUSHSCRIPTNAME) $(BASEIMAGENAMESPACE)/harbor-$$name-base:$(BASEIMAGETAG) $(REGISTRYUSER) $(REGISTRYPASSWORD) || exit 1; \\\n\t\tfi ; \\\n\tdone\n\npull_base_docker:\n\t@for name in $(BUILDBASETARGET); do \\\n\t\techo $$name ; \\\n\t\t$(DOCKERPULL) $(BASEIMAGENAMESPACE)/harbor-$$name-base:$(BASEIMAGETAG) ; \\\n\tdone\n\ninstall: compile build prepare start\n\npackage_online: update_prepare_version\n\t@echo \"packing online package ...\"\n\t@cp -r make $(HARBORPKG)\n\t@if [ -n \"$(REGISTRYSERVER)\" ] ; then \\\n\t\t$(SEDCMDI) -e 's/image\\: $(IMAGENAMESPACE)/image\\: $(REGISTRYSERVER)\\/$(REGISTRYPROJECTNAME)/' \\\n\t\t$(HARBORPKG)/docker-compose.yml ; \\\n\tfi\n\t@cp LICENSE $(HARBORPKG)/LICENSE\n\n\t@$(TARCMD) $(PACKAGE_ONLINE_PARA)\n\t@rm -rf $(HARBORPKG)\n\t@echo \"Done.\"\n\npackage_offline: update_prepare_version compile build\n\n\t@echo \"packing offline package ...\"\n\t@cp -r make $(HARBORPKG)\n\t@cp LICENSE $(HARBORPKG)/LICENSE\n\n\t@echo \"saving harbor docker image\"\n\t@$(DOCKERSAVE) $(DOCKERSAVE_PARA) > $(HARBORPKG)/$(DOCKERIMGFILE).$(VERSIONTAG).tar\n\t@gzip $(HARBORPKG)/$(DOCKERIMGFILE).$(VERSIONTAG).tar\n\n\t@$(TARCMD) $(PACKAGE_OFFLINE_PARA)\n\t@rm -rf $(HARBORPKG)\n\t@echo \"Done.\"\n\ngo_check: gen_apis mocks_check misspell commentfmt lint\n\ncommentfmt:\n\t@echo checking comment format...\n\t@res=$$(find . -type d \\( -path ./tests \\) -prune -o -name '*.go' -print | xargs egrep '(^|\\s)\\/\\/(\\S)'|grep -v '//go:generate'); \\\n\tif [ -n \"$${res}\" ]; then \\\n\t\techo checking comment format fail.. ; \\\n\t\techo missing whitespace between // and comment body;\\\n\t\techo \"$${res}\"; \\\n\t\texit 1; \\\n\tfi\n\nmisspell:\n\t@echo checking misspell...\n\t@find . -type d \\( -path ./tests \\) -prune -o -name '*.go' -print | xargs misspell -error\n\n# golangci-lint binary installation or refer to https://golangci-lint.run/usage/install/#local-installation\n# curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2\nGOLANGCI_LINT := $(shell go env GOPATH)/bin/golangci-lint\nlint:\n\t@echo checking lint\n\t@echo $(GOLANGCI_LINT)\n\t@cd ./src/; $(GOLANGCI_LINT) cache clean; $(GOLANGCI_LINT) -v run ./... --timeout=10m;\n\n# go install golang.org/x/vuln/cmd/govulncheck@latest\nGOVULNCHECK := $(shell go env GOPATH)/bin/govulncheck\ngovulncheck:\n\t@echo golang vulnerability check\n\t@cd ./src/; $(GOVULNCHECK) ./...;\n\n\npushimage:\n\t@echo \"pushing harbor images ...\"\n\t@$(DOCKERTAG) $(DOCKER_IMAGE_NAME_PREPARE):$(VERSIONTAG) $(REGISTRYSERVER)$(DOCKER_IMAGE_NAME_PREPARE):$(VERSIONTAG)\n\t@$(PUSHSCRIPTPATH)/$(PUSHSCRIPTNAME) $(REGISTRYSERVER)$(DOCKER_IMAGE_NAME_PREPARE):$(VERSIONTAG) \\\n\t\t$(REGISTRYUSER) $(REGISTRYPASSWORD) $(REGISTRYSERVER)\n\t@$(DOCKERRMIMAGE) $(REGISTRYSERVER)$(DOCKER_IMAGE_NAME_PREPARE):$(VERSIONTAG)\n\n\t@$(DOCKERTAG) $(DOCKERIMAGENAME_PORTAL):$(VERSIONTAG) $(REGISTRYSERVER)$(DOCKERIMAGENAME_PORTAL):$(VERSIONTAG)\n\t@$(PUSHSCRIPTPATH)/$(PUSHSCRIPTNAME) $(REGISTRYSERVER)$(DOCKERIMAGENAME_PORTAL):$(VERSIONTAG) \\\n\t\t$(REGISTRYUSER) $(REGISTRYPASSWORD) $(REGISTRYSERVER)\n\t@$(DOCKERRMIMAGE) $(REGISTRYSERVER)$(DOCKERIMAGENAME_PORTAL):$(VERSIONTAG)\n\n\t@$(DOCKERTAG) $(DOCKERIMAGENAME_CORE):$(VERSIONTAG) $(REGISTRYSERVER)$(DOCKERIMAGENAME_CORE):$(VERSIONTAG)\n\t@$(PUSHSCRIPTPATH)/$(PUSHSCRIPTNAME) $(REGISTRYSERVER)$(DOCKERIMAGENAME_CORE):$(VERSIONTAG) \\\n\t\t$(REGISTRYUSER) $(REGISTRYPASSWORD) $(REGISTRYSERVER)\n\t@$(DOCKERRMIMAGE) $(REGISTRYSERVER)$(DOCKERIMAGENAME_CORE):$(VERSIONTAG)\n\n\t@$(DOCKERTAG) $(DOCKERIMAGENAME_JOBSERVICE):$(VERSIONTAG) $(REGISTRYSERVER)$(DOCKERIMAGENAME_JOBSERVICE):$(VERSIONTAG)\n\t@$(PUSHSCRIPTPATH)/$(PUSHSCRIPTNAME) $(REGISTRYSERVER)$(DOCKERIMAGENAME_JOBSERVICE):$(VERSIONTAG) \\\n\t\t$(REGISTRYUSER) $(REGISTRYPASSWORD) $(REGISTRYSERVER)\n\t@$(DOCKERRMIMAGE) $(REGISTRYSERVER)$(DOCKERIMAGENAME_JOBSERVICE):$(VERSIONTAG)\n\n\t@$(DOCKERTAG) $(DOCKERIMAGENAME_LOG):$(VERSIONTAG) $(REGISTRYSERVER)$(DOCKERIMAGENAME_LOG):$(VERSIONTAG)\n\t@$(PUSHSCRIPTPATH)/$(PUSHSCRIPTNAME) $(REGISTRYSERVER)$(DOCKERIMAGENAME_LOG):$(VERSIONTAG) \\\n\t\t$(REGISTRYUSER) $(REGISTRYPASSWORD) $(REGISTRYSERVER)\n\t@$(DOCKERRMIMAGE) $(REGISTRYSERVER)$(DOCKERIMAGENAME_LOG):$(VERSIONTAG)\n\n\t@$(DOCKERTAG) $(DOCKERIMAGENAME_DB):$(VERSIONTAG) $(REGISTRYSERVER)$(DOCKERIMAGENAME_DB):$(VERSIONTAG)\n\t@$(PUSHSCRIPTPATH)/$(PUSHSCRIPTNAME) $(REGISTRYSERVER)$(DOCKERIMAGENAME_DB):$(VERSIONTAG) \\\n\t\t$(REGISTRYUSER) $(REGISTRYPASSWORD) $(REGISTRYSERVER)\n\t@$(DOCKERRMIMAGE) $(REGISTRYSERVER)$(DOCKERIMAGENAME_DB):$(VERSIONTAG)\n\nstart:\n\t@echo \"loading harbor images...\"\n\t@$(DOCKERCOMPOSECMD) $(DOCKERCOMPOSE_FILE_OPT) up -d\n\t@echo \"Start complete. You can visit harbor now.\"\n\ndown:\n\t@while [ -z \"$$CONTINUE\" ]; do \\\n        read -r -p \"Type anything but Y or y to exit. [Y/N]: \" CONTINUE; \\\n    done ; \\\n    [ $$CONTINUE = \"y\" ] || [ $$CONTINUE = \"Y\" ] || (echo \"Exiting.\"; exit 1;)\n\t@echo \"stoping harbor instance...\"\n\t@$(DOCKERCOMPOSECMD) $(DOCKERCOMPOSE_FILE_OPT) down -v\n\t@echo \"Done.\"\n\nrestart: down prepare start\n\nswagger_client:\n\t@echo \"Generate swagger client\"\n\twget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/4.3.1/openapi-generator-cli-4.3.1.jar -O openapi-generator-cli.jar\n\trm -rf harborclient\n\tmkdir  -p harborclient/harbor_v2_swagger_client\n\tjava -jar openapi-generator-cli.jar generate -i api/v2.0/swagger.yaml -g python -o harborclient/harbor_v2_swagger_client --package-name v2_swagger_client\n\tcd harborclient/harbor_v2_swagger_client; python ./setup.py install\n\tpip install docker -q\n\tpip freeze\n\ncleanbinary:\n\t@echo \"cleaning binary...\"\n\tif [ -f $(CORE_BINARYPATH)/$(CORE_BINARYNAME) ] ; then rm $(CORE_BINARYPATH)/$(CORE_BINARYNAME) ; fi\n\tif [ -f $(JOBSERVICEBINARYPATH)/$(JOBSERVICEBINARYNAME) ] ; then rm $(JOBSERVICEBINARYPATH)/$(JOBSERVICEBINARYNAME) ; fi\n\tif [ -f $(REGISTRYCTLBINARYPATH)/$(REGISTRYCTLBINARYNAME) ] ; then rm $(REGISTRYCTLBINARYPATH)/$(REGISTRYCTLBINARYNAME) ; fi\n\trm -rf make/photon/*/binary/\n\ncleanbaseimage:\n\t@echo \"cleaning base image for photon...\"\n\t@for name in $(BUILDBASETARGET); do \\\n\t\t$(DOCKERRMIMAGE) -f $(BASEIMAGENAMESPACE)/harbor-$$name-base:$(BASEIMAGETAG) ; \\\n\tdone\n\ncleanimage:\n\t@echo \"cleaning image for photon...\"\n\t- $(DOCKERRMIMAGE) -f $(DOCKERIMAGENAME_CORE):$(VERSIONTAG)\n\t- $(DOCKERRMIMAGE) -f $(DOCKERIMAGENAME_DB):$(VERSIONTAG)\n\t- $(DOCKERRMIMAGE) -f $(DOCKERIMAGENAME_JOBSERVICE):$(VERSIONTAG)\n\t- $(DOCKERRMIMAGE) -f $(DOCKERIMAGENAME_LOG):$(VERSIONTAG)\n\ncleandockercomposefile:\n\t@echo \"cleaning docker-compose files in $(DOCKERCOMPOSEFILEPATH)\"\n\t@find $(DOCKERCOMPOSEFILEPATH) -maxdepth 1 -name \"docker-compose*.yml\" -exec rm -f {} \\;\n\t@find $(DOCKERCOMPOSEFILEPATH) -maxdepth 1 -name \"docker-compose*.yml-e\" -exec rm -f {} \\;\n\ncleanpackage:\n\t@echo \"cleaning harbor install package\"\n\t@if [ -d $(BUILDPATH)/harbor ] ; then rm -rf $(BUILDPATH)/harbor ; fi\n\t@if [ -f $(BUILDPATH)/harbor-online-installer-$(VERSIONTAG).tgz ] ; \\\n\tthen rm $(BUILDPATH)/harbor-online-installer-$(VERSIONTAG).tgz ; fi\n\t@if [ -f $(BUILDPATH)/harbor-offline-installer-$(VERSIONTAG).tgz ] ; \\\n\tthen rm $(BUILDPATH)/harbor-offline-installer-$(VERSIONTAG).tgz ; fi\n\ncleanconfig:\n\t@echo \"clean generated config files\"\n\trm -f $(BUILDPATH)/make/photon/prepare/versions\n\trm -f $(BUILDPATH)/UIVERSION\n\trm -rf $(BUILDPATH)/make/common\n\trm -rf $(BUILDPATH)/harborclient\n\trm -rf $(BUILDPATH)/src/portal/dist\n\trm -rf $(BUILDPATH)/src/portal/lib/dist\n\trm -f $(BUILDPATH)/src/portal/proxy.config.json\n\n.PHONY: cleanall\ncleanall: cleanbinary cleanimage cleanbaseimage cleandockercomposefile cleanconfig cleanpackage\n\nclean:\n\t@echo \"  make cleanall:\t\tremove binary, Harbor images, specific version docker-compose\"\n\t@echo \"\t\tfile, specific version tag, online and offline install package\"\n\t@echo \"  make cleanbinary:\t\tremove core and jobservice binary\"\n\t@echo \"  make cleanbaseimage:\t\tremove base image of Harbor images\"\n\t@echo \"  make cleanimage:\t\tremove Harbor images\"\n\t@echo \"  make cleandockercomposefile:\tremove specific version docker-compose\"\n\t@echo \"  make cleanpackage:\t\tremove online and offline install package\"\n\nall: install\n"
        },
        {
          "name": "OWNERS.md",
          "type": "blob",
          "size": 0.5263671875,
          "content": "Please see [CONTRIBUTING.md](CONTRIBUTING.md) for general contribution\nguidelines.\n[GOVERNANCE.md](https://github.com/goharbor/community/blob/master/GOVERNANCE.md)\ndescribes governance guidelines and maintainer responsibilities.\n\n[MAINTAINERS.md](https://github.com/goharbor/community/blob/master/MAINTAINERS.md) contains the project maintainers.\n\n[GUIDING_PRINCIPLES.md](https://github.com/goharbor/community/blob/master/GUIDING_PRINCIPLES.md) contains the project vision, values and principles and how we apply them in making decisions.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.505859375,
          "content": "# Harbor\n\n[![CI](https://github.com/goharbor/harbor/workflows/CI/badge.svg?branch=main&event=push)](https://github.com/goharbor/harbor/actions?query=event%3Apush+branch%3Amain+workflow%3ACI+)\n[![Coverage Status](https://codecov.io/gh/goharbor/harbor/branch/main/graph/badge.svg)](https://codecov.io/gh/goharbor/harbor)\n[![Go Report Card](https://goreportcard.com/badge/github.com/goharbor/harbor)](https://goreportcard.com/report/github.com/goharbor/harbor)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/2095/badge)](https://bestpractices.coreinfrastructure.org/projects/2095)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/792fe1755edc4d6e91f4c3469f553389)](https://www.codacy.com/gh/goharbor/harbor/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=goharbor/harbor&amp;utm_campaign=Badge_Grade)\n![Code scanning - action](https://github.com/goharbor/harbor/workflows/Code%20scanning%20-%20action/badge.svg)\n[![Nightly Status](https://us-central1-eminent-nation-87317.cloudfunctions.net/harbor-nightly-result)](https://www.googleapis.com/storage/v1/b/harbor-nightly/o)\n![CONFORMANCE_TEST](https://github.com/goharbor/harbor/workflows/CONFORMANCE_TEST/badge.svg)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fgoharbor%2Fharbor.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fgoharbor%2Fharbor?ref=badge_shield)\n</br>\n\n|![notification](https://raw.githubusercontent.com/goharbor/website/master/docs/img/readme/bell-outline-badged.svg)Community Meeting|\n|------------------|\n|The Harbor Project holds bi-weekly community calls in two different timezones. To join the community calls or to watch previous meeting notes and recordings, please visit the [meeting schedule](https://github.com/goharbor/community/blob/master/MEETING_SCHEDULE.md).|\n\n</br> </br>\n\n**Note**: The `main` branch may be in an *unstable or even broken state* during development.\nPlease use [releases](https://github.com/vmware/harbor/releases) instead of the `main` branch in order to get a stable set of binaries.\n\n<img alt=\"Harbor\" src=\"https://raw.githubusercontent.com/goharbor/website/master/docs/img/readme/harbor_logo.png\">\n\nHarbor is an open source trusted cloud native registry project that stores, signs, and scans content. Harbor extends the open source Docker Distribution by adding the functionalities usually required by users such as security, identity and management. Having a registry closer to the build and run environment can improve the image transfer efficiency. Harbor supports replication of images between registries, and also offers advanced security features such as user management, access control and activity auditing.\n\nHarbor is hosted by the [Cloud Native Computing Foundation](https://cncf.io) (CNCF). If you are an organization that wants to help shape the evolution of cloud native technologies, consider joining the CNCF. For details about whose involved and how Harbor plays a role, read the CNCF\n[announcement](https://www.cncf.io/blog/2018/07/31/cncf-to-host-harbor-in-the-sandbox/).\n\n## Features\n\n* **Cloud native registry**: With support for both container images and [Helm](https://helm.sh) charts, Harbor serves as registry for cloud native environments like container runtimes and orchestration platforms.\n* **Role based access control**: Users access different repositories through 'projects' and a user can have different permission for images or Helm charts under a project.\n* **Policy based replication**: Images and charts can be replicated (synchronized) between multiple registry instances based on policies with using filters (repository, tag and label). Harbor automatically retries a replication if it encounters any errors. This can be used to assist loadbalancing, achieve high availability, and facilitate multi-datacenter deployments in hybrid and multi-cloud scenarios.\n* **Vulnerability Scanning**: Harbor scans images regularly for vulnerabilities and has policy checks to prevent vulnerable images from being deployed.\n* **LDAP/AD support**: Harbor integrates with existing enterprise LDAP/AD for user authentication and management, and supports importing LDAP groups into Harbor that can then be given permissions to specific projects.\n* **OIDC support**: Harbor leverages OpenID Connect (OIDC) to verify the identity of users authenticated by an external authorization server or identity provider. Single sign-on can be enabled to log into the Harbor portal.\n* **Image deletion & garbage collection**: System admin can run garbage collection jobs so that images(dangling manifests and unreferenced blobs) can be deleted and their space can be freed up periodically.\n* **Notary**: Support signing container images using Docker Content Trust (leveraging Notary) for guaranteeing authenticity and provenance.  In addition, policies that prevent unsigned images from being deployed can also be activated.\n* **Graphical user portal**: User can easily browse, search repositories and manage projects.\n* **Auditing**: All the operations to the repositories are tracked through logs.\n* **RESTful API**: RESTful APIs are provided to facilitate administrative operations, and are easy to use for integration with external systems. An embedded Swagger UI is available for exploring and testing the API.\n* **Easy deployment**: Harbor can be deployed via Docker compose as well Helm Chart, and a Harbor Operator was added recently as well.\n\n## Architecture\n\nFor learning the architecture design of Harbor, check the document [Architecture Overview of Harbor](https://github.com/goharbor/harbor/wiki/Architecture-Overview-of-Harbor).\n\n## API\n\n* Harbor RESTful API: The APIs for most administrative operations of Harbor and can be used to perform integrations with Harbor programmatically.\n  * Part 1: [New or changed APIs](https://editor.swagger.io/?url=https://raw.githubusercontent.com/goharbor/harbor/main/api/v2.0/swagger.yaml)\n\n## Install & Run\n\n**System requirements:**\n\n**On a Linux host:** docker 20.10.10-ce+ and docker-compose 1.18.0+ .\n\nDownload binaries of **[Harbor release ](https://github.com/vmware/harbor/releases)** and follow **[Installation & Configuration Guide](https://goharbor.io/docs/latest/install-config/)** to install Harbor.\n\nIf you want to deploy Harbor on Kubernetes, please use the **[Harbor chart](https://github.com/goharbor/harbor-helm)**.\n\nRefer to the **[documentation](https://goharbor.io/docs/)** for more details on how to use Harbor.\n\n## OCI Distribution Conformance Tests\n\nCheck the OCI distribution conformance tests [report](https://storage.googleapis.com/harbor-conformance-test/report.html) of Harbor.\n\n## Compatibility\n\nThe [compatibility list](https://goharbor.io/docs/edge/install-config/harbor-compatibility-list/) document provides compatibility information for the Harbor components.\n\n* [Replication adapters](https://goharbor.io/docs/edge/install-config/harbor-compatibility-list/#replication-adapters)\n* [OIDC adapters](https://goharbor.io/docs/edge/install-config/harbor-compatibility-list/#oidc-adapters)\n* [Scanner adapters](https://goharbor.io/docs/edge/install-config/harbor-compatibility-list/#scanner-adapters)\n\n## Community\n\n* **Twitter:** [@project_harbor](https://twitter.com/project_harbor)\n* **User Group:** Join Harbor user email group: [harbor-users@lists.cncf.io](https://lists.cncf.io/g/harbor-users) to get update of Harbor's news, features, releases, or to provide suggestion and feedback.\n* **Developer Group:** Join Harbor developer group: [harbor-dev@lists.cncf.io](https://lists.cncf.io/g/harbor-dev) for discussion on Harbor development and contribution.\n* **Slack:** Join Harbor's community for discussion and ask questions: [Cloud Native Computing Foundation](https://slack.cncf.io/), channel: [#harbor](https://cloud-native.slack.com/messages/harbor/) and [#harbor-dev](https://cloud-native.slack.com/messages/harbor-dev/)\n\n## Demos\n\n* **[Live Demo](https://demo.goharbor.io)** - A demo environment with the latest Harbor stable build installed. For additional information please refer to [this page](https://goharbor.io/docs/latest/install-config/demo-server/).\n* **[Video Demos](https://github.com/goharbor/harbor/wiki/Video-demos-for-Harbor)** - Demos for Harbor features and continuously updated.\n\n## Partners and Users\n\nFor a list of users, please refer to [ADOPTERS.md](ADOPTERS.md).\n\n## Security\n\n### Security Audit\n\nA third party security audit was performed by Cure53 in October 2019. You can see the full report [here](https://goharbor.io/docs/2.0.0/security/Harbor_Security_Audit_Oct2019.pdf).\n\n### Reporting security vulnerabilities\n\nIf you've found a security related issue, a vulnerability, or a potential vulnerability in Harbor please let the [Harbor Security Team](mailto:cncf-harbor-security@lists.cncf.io) know with the details of the vulnerability. We'll send a confirmation\nemail to acknowledge your report, and we'll send an additional email when we've identified the issue\npositively or negatively.\n\nFor further details please see our complete [security release process](SECURITY.md).\n\n## License\n\nHarbor is available under the [Apache 2 license](LICENSE).\n\nThis project uses open source components which have additional licensing terms.  The official docker images and licensing terms for these open source components can be found at the following locations:\n\n* Photon OS 1.0: [docker image](https://hub.docker.com/_/photon/), [license](https://github.com/vmware/photon/blob/master/COPYING)\n\n\n## Fossa Status\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fgoharbor%2Fharbor.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fgoharbor%2Fharbor?ref=badge_large)\n"
        },
        {
          "name": "RELEASES.md",
          "type": "blob",
          "size": 4.787109375,
          "content": "# Versioning and Release\nThis document describes the versioning and release process of Harbor. This document is a living document, contents will be updated according to each release.\n\n## Releases\nHarbor releases will be versioned using dotted triples, similar to [Semantic Version](http://semver.org/). For this specific document, we will refer to the respective components of this triple as `<major>.<minor>.<patch>`. The version number may have additional information, such as \"-rc1,-rc2,-rc3\" to mark release candidate builds for earlier access. Such releases will be considered as \"pre-releases\".\n\n### Major and Minor Releases\nMajor and minor releases of Harbor will be branched from `main` when the release reaches to `RC(release candidate)` state. The branch format should follow `release-<major>.<minor>.0`. For example, once the release `v1.0.0` reaches to RC, a branch will be created with the format `release-1.0.0`. When the release reaches to `GA(General Available)` state, The tag with format `v<major>.<minor>.<patch>` and should be made with command `git tag -s v<major>.<minor>.<patch>`. The release cadence is around 3 months, might be adjusted based on open source event, but will communicate it clearly.\n\n### Patch releases\nPatch releases are based on the major/minor release branch, the release cadence for patch release of recent minor release is one month to solve critical community and security issues. The cadence for patch release of recent minus two minor releases are on-demand driven based on the severity of the issue to be fixed.\n\n### Pre-releases\n`Pre-releases:mainly the different RC builds` will be compiled from their corresponding branches. Please note they are done to assist in the stabilization process, no guarantees are provided.\n\n### Minor Release Support Matrix\n| Version        | Supported          |\n|----------------| ------------------ |\n| Harbor v2.12.x | :white_check_mark: |\n| Harbor v2.11.x | :white_check_mark: |\n| Harbor v2.10.x | :white_check_mark: |\n\n\n### Upgrade path and support policy\nThe upgrade path for Harbor is (1) 2.2.x patch releases are always compatible with its major and minor version. For example, previous released 2.2.x can be upgraded to most recent 2.2.3 release. (2) Harbor only supports two previous minor releases to upgrade to current minor release. For example, 2.3.0 will only support 2.1.0 and 2.2.0 to upgrade from, 2.0.0 to 2.3.0 is not supported. One should upgrade to 2.2.0 first, then to 2.3.0.\nThe Harbor project maintains release branches for the three most recent minor releases, each minor release will be maintained for approximately 9 months.\n\n### Next Release\nThe activity for next release will be tracked in the [up-to-date project board](https://github.com/orgs/goharbor/projects/1). If your issue is not present in the corresponding release, please reach out to the maintainers to add the issue to the project board.\n\n### Publishing a New Release\n\nThe following steps outline what to do when it's time to plan for and publish a release. Depending on the release (major/minor/patch), not all the following items are needed.\n\n1. Prepare information about what's new in the release.\n  * For every release, update documentation for changes that have happened in the release. See the [goharbor/website](https://github.com/goharbor/website) repo for more details on how to create documentation for a release. All documentation for a release should be published by the time the release is out.\n  * For every release, write release notes. See [previous releases](https://github.com/goharbor/harbor/releases) for examples of what to include in release notes.\n  * For a major/minor release, write a blog post that highlights new features in the release. Plan to publish this the same day as the release. Highlight the themes, or areas of focus, for the release. Some examples of themes are security, bug fixes, feature improvements. If there are any new features or workflows introduced in a release, consider writing additional blog posts to help users learn about the new features. Plan to publish these after the release date (all blogs don’t have to be published all at once).\n1. Release a new version. Make the new version, docs updates, and blog posts available.\n1. Announce the release and thank contributors. We should be doing the following for all releases.\n  * In all messages to the community include a brief list of highlights and links to the new release blog, release notes, or download location. Also include shoutouts to community member contribution included in the release.\n  * Send an email to the community via the [mailing list](https://lists.cncf.io/g/harbor-users)\n  * Post a message in the Harbor [slack channel](https://cloud-native.slack.com/archives/CC1E09J6S)\n  * Post to social media. Maintainers are encouraged to also post or repost from the Harbor account to help spread the word.\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 4.4462890625,
          "content": "## Harbor Roadmap\r\n\r\n### About this document\r\n\r\nThis document provides a link to the [Harbor Project board](https://github.com/orgs/goharbor/projects/1) that serves as the up-to-date description of items that are in the Harbor release pipeline. The board has separate swim lanes for each release. Most items are gathered from the community or include a feedback loop with the community. This should serve as a reference point for Harbor users and contributors to understand where the project is heading, and help determine if a contribution could be conflicting with a longer term plan.\r\n\r\n### How to help?\r\n\r\nDiscussion on the roadmap can take place in threads under [Issues](https://github.com/goharbor/harbor/issues) or in [community meetings](https://goharbor.io/community/). Please open and comment on an issue if you want to provide suggestions and feedback to an item in the roadmap. Please review the roadmap to avoid potential duplicated effort.\r\n\r\n### How to add an item to the roadmap?\r\nPlease open an issue to track any initiative on the roadmap of Harbor (Usually driven by new feature requests). We will work with and rely on our community to focus our efforts to improve Harbor.\r\n\r\n### Current Roadmap\r\n\r\nThe following table includes the current roadmap for Harbor. If you have any questions or would like to contribute to Harbor, please attend a [community meeting](https://goharbor.io/community/) to discuss with our team. If you don't know where to start, we are always looking for contributors that will help us reduce technical, automation, and documentation debt. Please take the timelines & dates as proposals and goals. Priorities and requirements change based on community feedback, roadblocks encountered, community contributions, etc. If you depend on a specific item, we encourage you to attend community meetings to get updated status information, or help us deliver that feature by contributing to Harbor.\r\n\r\n\r\n`Last Updated: June 2022`\r\n\r\n|Theme|Description|Timeline|\r\n|--|--|--|\r\n|Harbor for Edge|Optimize data transfer for substandard data center connectivity to edge nodes|2022 H2|\r\n||Create a lightweight Harbor with reduced feature set for minimal footprint|2022 H2|\r\n|Deployment|Improve Kubernetes Operator for Harbor, enabling improved Day1 and Day2 operations including enterprise grade HA, faster deployments and upgrades, automate backups and restores, and sensible defaults|Future|\r\n||Support Notary v2 to deliver persisting image signatures across image replications|Future|\r\n|Optimized Scalability & Performance|Introduce cache layer to improve performance|2022 H2|\r\n|Image acceleration|Leverage Nydus to support image acceleratiion|Future|\r\n|Regex Support|Add full Regex support to all modules within Harbor consistently including configuration of replication policies, retention policies, immutability policies and more|Future|\r\n|ARM Harbor|release an ARM deployment of Harbor|Future|\r\n|Backup & Restore|Leverage Project Velero to offer application-aware Harbor backup, including databases, Kubernetes objects and Persistent Volumes|2022 H2|\r\n|Extended image support|Support WASM images|2022 H2|\r\n||System artifact manager|2022 H2|\r\n|CVE reporting|Export CVE list at the repo level|Future|\r\n|SBoM support|SBoM generation & attestation|Future|\r\n|Networking|Support dual stack IPv6/IPv4 network for Harbor pods in a Kubernetes cluster|2022 H2|\r\n\r\n\r\n### Completed Items\r\n\r\n|Theme|Description|Timeline|\r\n|--|--|--|\r\n|Security Analysis|Leverage Sysdig Secure scanner to analyze container images|Aug 2020|\r\n|Image Distribution|Ability for Harbor registry to function as a pull-through cache for remote registry|Sep 2020|\r\n|Performance & Reliability|Non-blocking Garbage Collection|Sep 2020|\r\n|Image Distribution|Leverage P2P providers like Alibaba Dragonfly and Uber Kraken to geo-distribute artifacts at higher rates|Oct 2020|\r\n|Extensibility|Allow vendors to publish and share OCI artifacts like Machine Learning (Kubeflow) workloads generated datatypes on Harbor|Oct 2020|\r\n|Registry|Improve support for Windows containers layers|Oct 2020|\r\n|I&AM and RBAC|Improved Multi-tenancy through granular access and ability to manage teams of users and robot accounts through workspaces|Dec 2020|\r\n|Observability|Expose Harbor metrics through Prometheus Integration|Mar 2021|\r\n|Tracing|Leverage OpenTelemetry for enhanced tracing capabilities and identify bottlenecks and improve performance |Mar 2021|\r\n|Image Signing|Leverage Sigstore Cosign to deliver persisting image signatures across image replications|Apr 2021|\r\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 9.986328125,
          "content": "# Security Release Process\nHarbor is a large growing community devoted in creating a private enterprise-grade registry for all your cloud native assets. The community has adopted this security disclosure and response policy to ensure we responsibly handle critical issues.\n\n## Supported Versions\nThe Harbor project maintains release branches for the three most recent minor releases. Applicable fixes, including security fixes, may be backported to those three release branches, depending on severity and feasibility. Please refer to [RELEASES.md](https://github.com/goharbor/harbor/blob/main/RELEASES.md) for details.\n\n## Reporting a Vulnerability - Private Disclosure Process\nSecurity is of the highest importance and all security vulnerabilities or suspected security vulnerabilities should be reported to Harbor privately, to minimize attacks against current users of Harbor before they are fixed. Vulnerabilities will be investigated and patched on the next patch (or minor) release as soon as possible. This information could be kept entirely internal to the project.  \n\nIf you know of a publicly disclosed security vulnerability for Harbor, please **IMMEDIATELY** contact cncf-harbor-security@lists.cncf.io to inform the Harbor Security Team.\n \n**IMPORTANT: Do not file public issues on GitHub for security vulnerabilities**\n\nTo report a vulnerability or a security-related issue, please email the private address cncf-harbor-security@lists.cncf.io with the details of the vulnerability. The email will be fielded by the Harbor Security Team, which is made up of Harbor maintainers who have committer and release permissions. Emails will be addressed within 3 business days, including a detailed plan to investigate the issue and any potential workarounds to perform in the meantime. Do not report non-security-impacting bugs through this channel. Use [GitHub issues](https://github.com/goharbor/harbor/issues/new/choose) instead.\n\n### Proposed Email Content\nProvide a descriptive subject line and in the body of the email include the following information:\n* Basic identity information, such as your name and your affiliation or company.\n* Detailed steps to reproduce the vulnerability  (POC scripts, screenshots, and compressed packet captures are all helpful to us).\n* Description of the effects of the vulnerability on Harbor and the related hardware and software configurations, so that the Harbor Security Team can reproduce it.\n* How the vulnerability affects Harbor usage and an estimation of the attack surface, if there is one.\n* List other projects or dependencies that were used in conjunction with Harbor to produce the vulnerability.\n \n## When to report a vulnerability\n* When you think Harbor has a potential security vulnerability.\n* When you suspect a potential vulnerability, but you are unsure that it impacts Harbor.\n* When you know of or suspect a potential vulnerability on another project that is used by Harbor. For example Harbor has a dependency on Docker, PGSql, Redis, Notary, Trivy, etc.\n  \n## Patch, Release, and Disclosure\nThe Harbor Security Team will respond to vulnerability reports as follows:\n \n1.  The Security Team will investigate the vulnerability and determine its effects and criticality.\n2.  If the issue is not deemed to be a vulnerability, the Security Team will follow up with a detailed reason for rejection.\n3.  The Security Team will initiate a conversation with the reporter within 3 business days.\n4.  If a vulnerability is acknowledged and the timeline for a fix is determined, the Security Team will work on a plan to communicate with the appropriate community, including identifying mitigating steps that affected users can take to protect themselves until the fix is rolled out.\n5.  The Security Team will also create a [CVSS](https://www.first.org/cvss/specification-document) using the [CVSS Calculator](https://www.first.org/cvss/calculator/3.0). The Security Team makes the final call on the calculated CVSS; it is better to move quickly than making the CVSS perfect. Issues may also be reported to [Mitre](https://cve.mitre.org/) using this [scoring calculator](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator). The CVE will initially be set to private.\n6.  The Security Team will work on fixing the vulnerability and perform internal testing before preparing to roll out the fix.\n7.  The Security Team will provide early disclosure of the vulnerability by emailing the cncf-harbor-distributors-announce@lists.cncf.io mailing list. Distributors can initially plan for the vulnerability patch ahead of the fix, and later can test the fix and provide feedback to the Harbor team. See the section **Early Disclosure to Harbor Distributors List** for details about how to join this mailing list. \n8. A public disclosure date is negotiated by the Harbor Security Team, the bug submitter, and the distributors list. We prefer to fully disclose the bug as soon as possible once a user mitigation or patch is available. It is reasonable to delay disclosure when the bug or the fix is not yet fully understood, the solution is not well-tested, or for distributor coordination. The timeframe for disclosure is from immediate (especially if it’s already publicly known) to a few weeks. For a critical vulnerability with a straightforward mitigation, we expect report date to public disclosure date to be on the order of 14 business days. The Harbor Security Team holds the final say when setting a public disclosure date.\n9.  Once the fix is confirmed, the Security Team will patch the vulnerability in the next patch or minor release, and backport a patch release into all earlier supported releases. Upon release of the patched version of Harbor, we will follow the **Public Disclosure Process**.\n\n### Public Disclosure Process\nThe Security Team publishes a public [advisory](https://github.com/goharbor/harbor/security/advisories) to the Harbor community via GitHub. In most cases, additional communication via Slack, Twitter, CNCF lists, blog and other channels will assist in educating Harbor users and rolling out the patched release to affected users. \n\nThe Security Team will also publish any mitigating steps users can take until the fix can be applied to their Harbor instances. Harbor distributors will handle creating and publishing their own security advisories.\n \n## Mailing lists\n- Use cncf-harbor-security@lists.cncf.io to report security concerns to the Harbor Security Team, who uses the list to privately discuss security issues and fixes prior to disclosure.\n- Join cncf-harbor-distributors-announce@lists.cncf.io for early private information and vulnerability disclosure. Early disclosure may include mitigating steps and additional information on security patch releases. See below for information on how Harbor distributors or vendors can apply to join this list.\n\n## Early Disclosure to Harbor Distributors List\nThis private list is intended to be used primarily to provide actionable information to multiple distributor projects at once. This list is not intended to inform individuals about security issues.\n\n### Membership Criteria\nTo be eligible to join the cncf-harbor-distributors-announce@lists.cncf.io mailing list, you should:\n1. Be an active distributor of Harbor.\n2. Have a user base that is not limited to your own organization.\n3. Have a publicly verifiable track record up to the present day of fixing security issues.\n4. Not be a downstream or rebuild of another distributor.\n5. Be a participant and active contributor in the Harbor community.\n6. Accept the Embargo Policy that is outlined below. \n7. Has someone who is already on the list vouch for the person requesting membership on behalf of your distribution.\n\n**The terms and conditions of the Embargo Policy apply to all members of this mailing list. A request for membership represents your acceptance to the terms and conditions of the Embargo Policy**\n\n### Embargo Policy\nThe information that members receive on cncf-harbor-distributors-announce@lists.cncf.io must not be made public, shared, or even hinted at anywhere beyond those who need to know within your specific team, unless you receive explicit approval to do so from the Harbor Security Team. This remains true until the public disclosure date/time agreed upon by the list. Members of the list and others cannot use the information for any reason other than to get the issue fixed for your respective distribution's users.\nBefore you share any information from the list with members of your team who are required to fix the issue, these team members must agree to the same terms, and only be provided with information on a need-to-know basis.\n\nIn the unfortunate event that you share information beyond what is permitted by this policy, you must urgently inform the cncf-harbor-security@lists.cncf.io mailing list of exactly what information was leaked and to whom. If you continue to leak information and break the policy outlined here, you will be permanently removed from the list.\n \n### Requesting to Join\nSend new membership requests to cncf-harbor-security@lists.cncf.io.\nIn the body of your request please specify how you qualify for membership and fulfill each criterion listed in the Membership Criteria section above.\n\n## Confidentiality, integrity and availability\nWe consider vulnerabilities leading to the compromise of data confidentiality, elevation of privilege, or integrity to be our highest priority concerns. Availability, in particular in areas relating to DoS and resource exhaustion, is also a serious security concern. The Harbor Security Team takes all vulnerabilities, potential vulnerabilities, and suspected vulnerabilities seriously and will investigate them in an urgent and expeditious manner.\n\nNote that we do not currently consider the default settings for Harbor to be secure-by-default. It is necessary for operators to explicitly configure settings, role based access control, and other resource related features in Harbor to provide a hardened Harbor environment. We will not act on any security disclosure that relates to a lack of safe defaults. Over time, we will work towards improved safe-by-default configuration, taking into account backwards compatibility.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0078125,
          "content": "v2.13.0\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.5654296875,
          "content": "codecov:\n  require_ci_to_pass: no\n  bot: steven-zou\n  token: 7ec086ae-1431-4be8-af00-b95206144799\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"50...100\"\n\n  status:\n    project: yes\n    patch: yes\n    changes: no\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n\nfixes:\n  - \"src/github.com/goharbor/harbor/src/::src/\"\n\ncomment:\n  layout: \"reach,diff,flags,tree\"\n  behavior: default\n  require_changes: no\n\nignore:\n  - \"src/vendor\"\n  - \"src/testing\"\n  - \"src/server/v2.0/restapi/**/*\"\n  - \"src/server/v2.0/models\"\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "make",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}