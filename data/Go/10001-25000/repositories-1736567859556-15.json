{
  "metadata": {
    "timestamp": 1736567859556,
    "page": 15,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "go-kratos/kratos",
      "stars": 23581,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.55078125,
          "content": "# Reference https://github.com/github/gitignore/blob/master/Go.gitignore\n# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.dylib\n\n# Test binary, built with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Dependency directories (remove the comment below to include it)\nvendor/\n\n# Go workspace file\ngo.work\ngo.work.sum\n\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# OS General\nThumbs.db\n.DS_Store\n\n# project\n*.cert\n*.key\n*.log\nbin/\n\n# Develop tools\n.vscode/\n.idea/\n*.swp\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 1.2470703125,
          "content": "run:\n  timeout: 5m\n  modules-download-mode: readonly\n\nlinters:\n  disable-all: true\n  fast: false\n  enable:\n    - bodyclose\n    - dogsled\n    - durationcheck\n    - errcheck\n    # - copyloopvar # need upgrade to Go 1.22\n    - govet\n    - staticcheck\n    - gosimple\n    - gofmt\n    - gofumpt\n    - goconst\n    - goimports\n    - mnd\n    - gocyclo\n    - ineffassign\n    - lll\n    - prealloc\n    - revive\n    - staticcheck\n    - typecheck\n    - unused\n    - whitespace\n    - wastedassign\n    - unconvert\n    - misspell\n\n  # don't enable:\n  # - asciicheck\n  # - scopelint\n  # - gochecknoglobals\n  # - gocognit\n  # - godot\n  # - godox\n  # - goerr113\n  # - interfacer\n  # - maligned\n  # - nestif\n  # - prealloc\n  # - testpackage\n  # - stylecheck\n  # - wsl\n\nlinters-settings:\n  govet:\n    enable:\n      - shadow\n  whitespace:\n    multi-func: true\n  lll:\n    line-length: 160\n  mnd:\n    # don't include the \"operation\", \"argument\" and \"assign\"\n    checks:\n      - case\n      - condition\n      - return\n  goconst:\n    ignore-tests: true\n  gocyclo:\n    # recommend 10-20\n    min-complexity: 50\n  goimports:\n    local-prefixes: github.com/go-kratos # Put imports beginning with prefix after 3rd-party packages\n  misspell: # Finds commonly misspelled English words in comments\n    locale: US\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.0966796875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\niammao@vip.qq.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.2978515625,
          "content": "The kratos community wants to be helped by a wide range of developers, so you'd like to take a few minutes to read this guide before you mention the problem or pull request.\n\n## Reporting Bug or Fixing Bugs\nWe use GitHub issues to manage issues. If you want to submit , first make sure you've searched for existing issues, pull requests and read our [FAQ](https://go-kratos.dev/docs/intro/faq).\n\nWhen submitting a bug report, use the issue template we provide to clearly describe the problems encountered and how to reproduce, and if convenient it is best to provide a minimal reproduce repository.\n\n## Adding new features\n\nIn order to accurately distinguish whether the needs put forward by users are the needs or reasonable needs of most users, solicit opinions from the community through the proposal process, and the proposals adopted by the community will be realized as new feature.\nIn order to make the proposal process as simple as possible, the process includes three stages: proposal, feature and PR, in which proposal, feature is issue and PR is the specific function implementation. \nIn order to facilitate the community to correctly understand the requirements of the proposal, the proposal issue needs to describe the functional requirements and relevant references or literature in detail. \nWhen most community users agree with this proposal, they will create a feature issue associated with the proposal issue.\nThe feature issue needs to describe the implementation method and function demonstration in detail as a reference for the final function implementation. \nAfter the function is implemented, a merge request will be initiated to associate the proposal issue and feature issue.\nAfter the merge is completed, Close all issues.\n\n## How to submit code\nIf you've never submitted code on GitHub, follow these steps:\n\n- First, please fork items to your GitHub account\n- Then create a new feature branch based on the main branch and name it features such as feature-log \n- Write code\n- Submit code to the far end branch\n- Submit a PR request in github\n- Wait for review and merge to the main branch\n\n**Note That when you submit a PR request, you first ensure that the code uses the correct coding specifications and that there are complete test cases, and that the information in the submission of the PR is best associated with the relevant issue to ease the workload of the auditor.**\n\n## Conventional Commits\n\n```\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\n> More: [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/#summary)\n\n### type\n\nThere are the following types of commit:\n\n#### Main\n\n- **fix**: A bug fix\n- **feat**: A new feature\n- **deps**: Changes external dependencies\n- **break**: Changes has break change\n\n#### Other\n\n- **docs**: Documentation only changes\n- **refactor**: A code change that neither fixes a bug nor adds a feature\n- **style**: Changes that do not affect the meaning of the code (white-space, formatting, etc)\n- **test**: Adding missing tests or correcting existing tests\n- **chore** Daily work, examples, etc.\n- **ci**: Changes to our CI configuration files and scripts\n\n### scope \n\nThe following is the list of supported scopes:\n\n- transport\n- examples\n- middleware\n- config\n- cmd\n- etc.\n\n### description\n\nThe description contains a succinct description of the change\n\n- use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"\n- don't capitalize the first letter\n- no dot (.) at the end\n\n### body\n\nThe body should include the motivation for the change and contrast this with previous behavior.\n\n### footer\n\nThe footer should contain any information about **Breaking Changes** and is also the place to reference GitHub issues that this commit Closes.\n\n### examples\n\n\n#### Only commit message\n```\nfix: The log debug level should be -1  \n```\n\n#### Attention\n```\nrefactor!(transport/http): replacement underlying implementation\n```\n\n#### Full commit message\n```\nfix(log): [BREAKING-CHANGE] unable to meet the requirement of log Library\n\nExplain the reason, purpose, realization method, etc.\n\nClose #777\nDoc change on doc/#111\nBREAKING CHANGE:\n  Breaks log.info api, log.log should be used instead\n```\n## Release\n\nYou can use `kratos changelog dev` to generate a change log during.\n\nThe following is the list of supported types:\n\n- Breaking Change\n- Dependencies\n- Bug Fixes\n- Others\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2020 go-kratos\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.4892578125,
          "content": "user\t:=\t$(shell whoami)\nrev \t:= \t$(shell git rev-parse --short HEAD)\nos\t\t:=\t$(shell expr substr $(shell uname -s) 1 5)\n\n# GOBIN > GOPATH > INSTALLDIR\n# Mac OS X\nifeq ($(shell uname),Darwin)\nGOBIN\t:=\t$(shell echo ${GOBIN} | cut -d':' -f1)\nGOPATH\t:=\t$(shell echo $(GOPATH) | cut -d':' -f1)\nendif\n\n# Linux\nifeq ($(os),Linux)\nGOBIN\t:=\t$(shell echo ${GOBIN} | cut -d':' -f1)\nGOPATH\t:=\t$(shell echo $(GOPATH) | cut -d':' -f1)\nendif\n\n# Windows\nifeq ($(os),MINGW)\nGOBIN\t:=\t$(subst \\,/,$(GOBIN))\nGOPATH\t:=\t$(subst \\,/,$(GOPATH))\nGOBIN :=/$(shell echo \"$(GOBIN)\" | cut -d';' -f1 | sed 's/://g')\nGOPATH :=/$(shell echo \"$(GOPATH)\" | cut -d';' -f1 | sed 's/://g')\nendif\nBIN\t\t:= \t\"\"\n\nTOOLS_SHELL=\"./hack/tools.sh\"\n# golangci-lint\nLINTER := bin/golangci-lint\n\n# check GOBIN\nifneq ($(GOBIN),)\n\tBIN=$(GOBIN)\nelse\n# check GOPATH\n\tifneq ($(GOPATH),)\n\t\tBIN=$(GOPATH)/bin\n\tendif\nendif\n\n$(LINTER): \n\tcurl -SL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s latest\n\nall:\n\t@cd cmd/kratos && go build && cd - &> /dev/null\n\t@cd cmd/protoc-gen-go-errors && go build && cd - &> /dev/null\n\t@cd cmd/protoc-gen-go-http && go build && cd - &> /dev/null\n\n.PHONY: install\ninstall: all\nifeq ($(user),root)\n#root, install for all user\n\t@cp ./cmd/kratos/kratos /usr/bin\n\t@cp ./cmd/protoc-gen-go-errors/protoc-gen-go-errors /usr/bin\n\t@cp ./cmd/protoc-gen-go-http/protoc-gen-go-http /usr/bin\nelse\n#!root, install for current user\n\t$(shell if [ -z '$(BIN)' ]; then read -p \"Please select installdir: \" REPLY; mkdir -p $${REPLY};\\\n\tcp ./cmd/kratos/kratos $${REPLY}/;cp ./cmd/protoc-gen-go-errors/protoc-gen-go-errors $${REPLY}/;cp ./cmd/protoc-gen-go-http/protoc-gen-go-http $${REPLY}/;else mkdir -p '$(BIN)';\\\n\tcp ./cmd/kratos/kratos '$(BIN)';cp ./cmd/protoc-gen-go-errors/protoc-gen-go-errors '$(BIN)';cp ./cmd/protoc-gen-go-http/protoc-gen-go-http '$(BIN)'; fi)\nendif\n\t@which protoc-gen-go &> /dev/null || go get google.golang.org/protobuf/cmd/protoc-gen-go\n\t@which protoc-gen-go-grpc &> /dev/null || go get google.golang.org/grpc/cmd/protoc-gen-go-grpc\n\t@which protoc-gen-validate  &> /dev/null || go get github.com/envoyproxy/protoc-gen-validate\n\t@echo \"install finished\"\n\n.PHONY: uninstall\nuninstall:\n\t$(shell for i in `which -a kratos | grep -v '/usr/bin/kratos' 2>/dev/null | sort | uniq`; do read -p \"Press to remove $${i} (y/n): \" REPLY; if [ $${REPLY} = \"y\" ]; then rm -f $${i}; fi; done)\n\t$(shell for i in `which -a protoc-gen-go-grpc | grep -v '/usr/bin/protoc-gen-go-errors' 2>/dev/null | sort | uniq`; do read -p \"Press to remove $${i} (y/n): \" REPLY; if [ $${REPLY} = \"y\" ]; then rm -f $${i}; fi; done)\n\t$(shell for i in `which -a protoc-gen-validate | grep -v '/usr/bin/protoc-gen-go-errors' 2>/dev/null | sort | uniq`; do read -p \"Press to remove $${i} (y/n): \" REPLY; if [ $${REPLY} = \"y\" ]; then rm -f $${i}; fi; done)\n\t@echo \"uninstall finished\"\n\n.PHONY: clean\nclean:\n\t@${TOOLS_SHELL} tidy\n\t@echo \"clean finished\"\n\n.PHONY: fix\nfix: $(LINTER)\n\t@${TOOLS_SHELL} fix\n\t@echo \"lint fix finished\"\n\n.PHONY: test\ntest:\n\t@${TOOLS_SHELL} test\n\t@echo \"go test finished\"\n\n.PHONY: test-coverage\ntest-coverage:\n\t@${TOOLS_SHELL} test_coverage\n\t@echo \"go test with coverage finished\"\n\n.PHONY: lint\nlint: $(LINTER)\n\t@${TOOLS_SHELL} lint\n\t@echo \"lint check finished\"\n\n.PHONY: proto\nproto:\n\tprotoc --proto_path=./api --proto_path=./third_party --go_out=paths=source_relative:./api --go-grpc_out=paths=source_relative:./api --go-http_out=paths=source_relative:./api metadata/metadata.proto\n\tprotoc --proto_path=./third_party --go_out=paths=source_relative:./errors/errors.proto\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.9140625,
          "content": "<p align=\"center\"><a href=\"https://go-kratos.dev/\" target=\"_blank\"><img src=\"https://github.com/go-kratos/kratos/blob/main/docs/images/kratos-large.png?raw=true\"></a></p>\n\n<p align=\"center\">\n<a href=\"https://github.com/go-kratos/kratos/actions\"><img src=\"https://github.com/go-kratos/kratos/workflows/Go/badge.svg\" alt=\"Build Status\"></a>\n<a href=\"https://pkg.go.dev/github.com/go-kratos/kratos/v2\"><img src=\"https://pkg.go.dev/badge/github.com/go-kratos/kratos/v2\" alt=\"GoDoc\"></a>\n<a href=\"https://codecov.io/gh/go-kratos/kratos\"><img src=\"https://codecov.io/gh/go-kratos/kratos/master/graph/badge.svg\" alt=\"codeCov\"></a>\n<a href=\"https://goreportcard.com/report/github.com/go-kratos/kratos\"><img src=\"https://goreportcard.com/badge/github.com/go-kratos/kratos\" alt=\"Go Report Card\"></a>\n<a href=\"https://github.com/go-kratos/kratos/blob/main/LICENSE\"><img src=\"https://img.shields.io/github/license/go-kratos/kratos\" alt=\"License\"></a>\n<a href=\"https://github.com/avelino/awesome-go\"><img src=\"https://awesome.re/mentioned-badge.svg\" alt=\"Awesome Go\"></a>\n<a href=\"https://discord.gg/BWzJsUJ\"><img src=\"https://img.shields.io/discord/766619759214854164?label=chat&logo=discord\" alt=\"Discord\"></a>\n</p>\n<p align=\"center\">\n<a href=\"https://www.producthunt.com/posts/go-kratos?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-go-kratos\" target=\"_blank\"><img src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=306565&theme=light\" alt=\"Go Kratos - A Go framework for microservices. | Product Hunt\" style=\"width: 250px; height: 54px;\" width=\"250\" height=\"54\" /></a>\n</p>\n  \n##### Translate to: [简体中文](README_zh.md)\n\n## About Kratos\n  \n> The name is inspired by the Greek-mythology-based game \"God of War\". It tells the adventures of Kratos becoming a god of war from a mortal and launching a god-killing slaughter.\n\nKratos is a microservice-oriented governance framework implemented by golang, which offers convenient capabilities to help you quickly build a bulletproof application from scratch, such as:\n\n- The [communication protocol](https://go-kratos.dev/en/docs/component/api) is based on the HTTP/gRPC through the definition of Protobuf.\n- Abstract [transport](https://go-kratos.dev/en/docs/component/transport/overview) layer support: [HTTP](https://go-kratos.dev/en/docs/component/transport/http) / [gRPC](https://go-kratos.dev/en/docs/component/transport/grpc).\n- Powerful [middleware](https://go-kratos.dev/en/docs/component/middleware/overview) design, support: [Tracing (OpenTelemetry)](https://go-kratos.dev/en/docs/component/middleware/tracing), [Metrics (Prometheus is default)](https://go-kratos.dev/en/docs/component/middleware/metrics), [Recovery](https://go-kratos.dev/en/docs/component/middleware/recovery) and more.\n- [Registry](https://go-kratos.dev/en/docs/component/registry) interface able to be connected with various other centralized registries through plug-ins.\n- The [standard log interfaces](https://go-kratos.dev/en/docs/component/log) ease the integration of the third-party log libs with logs collected through the *Fluentd*.\n- Automatically support the selection of the content [encoding](https://go-kratos.dev/en/docs/component/encoding) with Accept and Content-Type.\n- Multiple data sources are supported for [configurations](https://go-kratos.dev/en/docs/component/config) and dynamic configurations (use atomic operations).\n- In the protocol of HTTP/gRPC, use the uniform [metadata](https://go-kratos.dev/en/docs/component/metadata) transfer method.\n- You can define [errors](https://go-kratos.dev/en/docs/component/errors/) in protos and generate enums with protoc-gen-go.\n- You can define [verification rules](https://go-kratos.dev/en/docs/component/middleware/validate) in Protobuf supported by the HTTP/gRPC service.\n- [Swagger API](https://go-kratos.dev/en/docs/guide/openapi) is generated Automatically and embed Swagger UI endpoint can be started by adding [Swagger plugin](https://github.com/go-kratos/swagger-api).\n\nKratos is accessible, powerful, and provides tools required for large, robust applications.\n\n## Learning Kratos\n\nKratos has the most extensive and thorough [documentation](https://go-kratos.dev/en/docs/getting-started/start) and [example](https://github.com/go-kratos/examples) library of all modern web application frameworks, making it a breeze to get started with the framework.\n\nWe also provide a [modern template](https://github.com/go-kratos/kratos-layout). This template should help reduce the work required to set up modern projects.\n\n### Goals\n\nKratos boosts your productivity. With the integration of excellent resources and further support, programmers can get rid of most issues might encounter in the field of distributed systems and software engineering such that they are allowed to focus on the release of businesses only. Additionally, for each programmer, Kratos is also an ideal one learning warehouse for many aspects of microservices to enrich their experiences and skills.\n\n### Principles\n\n* **Simple**: Appropriate design with plain and easy code.\n* **General**: Cover the various utilities for business development.\n* **Highly efficient**: Speeding up the efficiency of businesses upgrading.\n* **Stable**: The base libs validated in the production environment have the characteristics of high testability, high coverage as well as high security and reliability.\n* **Robust**: Eliminating misusing through high quality of the base libs.\n* **High-performance**: Optimal performance excluding the optimization of hacking in case of *unsafe*. \n* **Expandability**: Properly designed interfaces where you can expand utilities such as base libs to meet your further requirements.\n* **Fault-tolerance**: Designed against failure, enhance the understanding and exercising of SRE within Kratos to achieve more robustness.\n* **Toolchain**: Includes an extensive toolchain, such as the code generation of cache, the lint tool, and so forth.\n\n## Getting Started\n\nCreate a kratos playground through [docker](https://www.docker.com/products/docker-desktop):\n  \n```shell\ndocker run -it --rm -p 8000:8000 --workdir /workspace golang\n```\n  \n```shell\napt-get update && apt-get -y install protobuf-compiler\nexport GOPROXY=https://goproxy.io,direct\ngo install github.com/go-kratos/kratos/cmd/kratos/v2@latest && kratos upgrade\n```\n  \n```shell\nkratos new helloworld\ncd helloworld/ && go mod tidy\nkratos run\n```\n  \nUse a browser to open and visit: `http://localhost:8000/helloworld/kratos`, The kratos program is running!\n\nIf you need more, please visit the kratos [documentation](https://go-kratos.dev/en/docs/getting-started/start).\n\n## Security Vulnerabilities\n\nIf you discover a security vulnerability within Kratos, please send an e-mail to tonybase via go-kratos@googlegroups.com. All security vulnerabilities will be promptly addressed.\n\n## Community\n\n- [Wechat Group](https://github.com/go-kratos/kratos/issues/682)\n- [Discord Group](https://discord.gg/BWzJsUJ)\n- [go-kratos.dev](https://go-kratos.dev/en)\n\n## Contributors\n\nThank you for considering contributing to the Kratos framework! The contribution guide can be found in the [Kratos documentation](https://go-kratos.dev/en/docs/community/contribution).\n\n<a href=\"https://github.com/go-kratos/kratos/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=go-kratos/kratos\" />\n</a>\n\n## License\n\nThe Kratos framework is open-sourced software licensed under the [MIT license](./LICENSE).\n  \n## Acknowledgments\n  \nThe following project had particular influence on kratos's design.\n  \n- [go-kit/kit](https://github.com/go-kit/kit) is a programming toolkit for building microservices in go.\n- [asim/go-micro](https://github.com/asim/go-micro) a distributed systems development framework.\n- [google/go-cloud](https://github.com/google/go-cloud) is go cloud development kit.\n- [zeromicro/go-zero](https://github.com/zeromicro/go-zero) is a web and rpc framework with lots of builtin engineering practices.\n- [beego/beego](https://github.com/beego/beego) is a web framework including RESTful APIs, web apps and backend services.\n"
        },
        {
          "name": "README_zh.md",
          "type": "blob",
          "size": 6.99609375,
          "content": "<p align=\"center\"><a href=\"https://go-kratos.dev/\" target=\"_blank\"><img src=\"https://github.com/go-kratos/kratos/blob/main/docs/images/kratos-large.png?raw=true\"></a></p>\n\n<p align=\"center\">\n<a href=\"https://github.com/go-kratos/kratos/actions\"><img src=\"https://github.com/go-kratos/kratos/workflows/Go/badge.svg\" alt=\"Build Status\"></a>\n<a href=\"https://pkg.go.dev/github.com/go-kratos/kratos/v2\"><img src=\"https://pkg.go.dev/badge/github.com/go-kratos/kratos/v2\" alt=\"GoDoc\"></a>\n<a href=\"https://codecov.io/gh/go-kratos/kratos\"><img src=\"https://codecov.io/gh/go-kratos/kratos/master/graph/badge.svg\" alt=\"codeCov\"></a>\n<a href=\"https://goreportcard.com/report/github.com/go-kratos/kratos\"><img src=\"https://goreportcard.com/badge/github.com/go-kratos/kratos\" alt=\"Go Report Card\"></a>\n<a href=\"https://github.com/go-kratos/kratos/blob/main/LICENSE\"><img src=\"https://img.shields.io/github/license/go-kratos/kratos\" alt=\"License\"></a>\n<a href=\"https://github.com/avelino/awesome-go\"><img src=\"https://awesome.re/mentioned-badge.svg\" alt=\"Awesome Go\"></a>\n<a href=\"https://discord.gg/BWzJsUJ\"><img src=\"https://img.shields.io/discord/766619759214854164?label=chat&logo=discord\" alt=\"Discord\"></a>\n</p>\n<p align=\"center\">\n<a href=\"https://www.producthunt.com/posts/go-kratos?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-go-kratos\" target=\"_blank\"><img src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=306565&theme=light\" alt=\"Go Kratos - A Go framework for microservices. | Product Hunt\" style=\"width: 250px; height: 54px;\" width=\"250\" height=\"54\" /></a>\n</p>\n\nTranslations: [English](README.md) | [简体中文](README_zh.md)\n\n# Kratos\n\nKratos 一套轻量级 Go 微服务框架，包含大量微服务相关功能及工具。  \n\n> 名字来源于:《战神》游戏以希腊神话为背景，讲述奎托斯（Kratos）由凡人成为战神并展开弑神屠杀的冒险经历。\n\n## Goals\n\n我们致力于提供完整的微服务研发体验，整合相关框架及工具后，微服务治理相关部分可对整体业务开发周期无感，从而更加聚焦于业务交付。对每位开发者而言，整套 Kratos 框架也是不错的学习仓库，可以了解和参考到微服务方面的技术积累和经验。\n\n### Principles\n\n* 简单：不过度设计，代码平实简单；\n* 通用：通用业务开发所需要的基础库的功能；\n* 高效：提高业务迭代的效率；\n* 稳定：基础库可测试性高，覆盖率高，有线上实践安全可靠；\n* 健壮：通过良好的基础库设计，减少错用；\n* 高性能：性能高，但不特定为了性能做 hack 优化，引入 unsafe ；\n* 扩展性：良好的接口设计，来扩展实现，或者通过新增基础库目录来扩展功能；\n* 容错性：为失败设计，大量引入对 SRE 的理解，鲁棒性高；\n* 工具链：包含大量工具链，比如 cache 代码生成，lint 工具等等；\n\n## Features\n* [APIs](https://go-kratos.dev/docs/component/api) ：协议通信以 HTTP/gRPC 为基础，通过 Protobuf 进行定义；\n* [Errors](https://go-kratos.dev/docs/component/errors/) ：通过 Protobuf 的 Enum 作为错误码定义，以及工具生成判定接口；\n* [Metadata](https://go-kratos.dev/docs/component/metadata) ：在协议通信 HTTP/gRPC 中，通过 Middleware 规范化服务元信息传递；\n* [Config](https://go-kratos.dev/docs/component/config) ：支持多数据源方式，进行配置合并铺平，通过 Atomic 方式支持动态配置；\n* [Logger](https://go-kratos.dev/docs/component/log) ：标准日志接口，可方便集成三方 log 库，并可通过 fluentd 收集日志；\n* [Metrics](https://go-kratos.dev/docs/component/middleware/metrics) ：统一指标接口，可以实现各种指标系统，默认集成 Prometheus；\n* [Tracing](https://go-kratos.dev/docs/component/middleware/tracing) ：遵循 OpenTelemetry 规范定义，以实现微服务链路追踪；\n* [Encoding](https://go-kratos.dev/docs/component/encoding) ：支持 Accept 和 Content-Type 进行自动选择内容编码；\n* [Transport](https://go-kratos.dev/docs/component/transport/overview) ：通用的 [HTTP](https://go-kratos.dev/docs/component/transport/http) /[gRPC](https://go-kratos.dev/docs/component/transport/grpc) 传输层，实现统一的 [Middleware](https://go-kratos.dev/docs/component/middleware/overview) 插件支持；\n* [Registry](https://go-kratos.dev/docs/component/registry) ：实现统一注册中心接口，可插件化对接各种注册中心；\n* [Validation](https://go-kratos.dev/docs/component/middleware/validate): 通过Protobuf统一定义校验规则，并同时适用于HTTP/gRPC服务.\n* [SwaggerAPI](https://go-kratos.dev/docs/guide/openapi): 通过集成第三方[Swagger插件](https://github.com/go-kratos/swagger-api) 能够自动生成Swagger API json并启动一个内置的Swagger UI服务.\n\n## Getting Started\n### Required\n- [go](https://golang.org/dl/)\n- [protoc](https://github.com/protocolbuffers/protobuf)\n- [protoc-gen-go](https://github.com/protocolbuffers/protobuf-go)\n\n### Installing\n##### go install 安装：\n```\ngo install github.com/go-kratos/kratos/cmd/kratos/v2@latest\nkratos upgrade\n```\n##### 源码编译安装：\n```\ngit clone https://github.com/go-kratos/kratos\ncd kratos\nmake install\n```\n\n### Create a service\n```\n# 创建项目模板\nkratos new helloworld\n\ncd helloworld\n# 拉取项目依赖\ngo mod download\n\n# 生成proto模板\nkratos proto add api/helloworld/helloworld.proto\n# 生成proto源码\nkratos proto client api/helloworld/helloworld.proto\n# 生成server模板\nkratos proto server api/helloworld/helloworld.proto -t internal/service\n\n# 生成所有proto源码、wire等等\ngo generate ./...\n\n# 运行程序\nkratos run\n```\n\n### Kratos Boot\n```\nimport \"github.com/go-kratos/kratos/v2\"\nimport \"github.com/go-kratos/kratos/v2/transport/grpc\"\nimport \"github.com/go-kratos/kratos/v2/transport/http\"\n\nhttpSrv := http.NewServer(http.Address(\":8000\"))\ngrpcSrv := grpc.NewServer(grpc.Address(\":9000\"))\n\napp := kratos.New(\n    kratos.Name(\"kratos\"),\n    kratos.Version(\"latest\"),\n    kratos.Server(httpSrv, grpcSrv),\n)\napp.Run()\n```\n\n## Related\n\n* [Docs](https://go-kratos.dev/)\n* [Examples](https://github.com/go-kratos/examples)\n* [Service Layout](https://github.com/go-kratos/kratos-layout)\n\n## Community\n* [Wechat Group](https://github.com/go-kratos/kratos/issues/682)\n* [Discord Group](https://discord.gg/BWzJsUJ)\n* Website:  [go-kratos.dev](https://go-kratos.dev)\n* QQ Group: 716486124\n\n## WeChat Official Account\n![kratos](docs/images/wechat.png)\n\n## Conventional commits\n提交信息的结构应该如下所示:\n```text\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\n提交信息应按照下面的格式:\n- fix: simply describe the problem that has been fixed\n- feat(log): simple describe of new features\n- deps(examples): simple describe the change of the dependency\n- break(http): simple describe the reasons for breaking change\n\n## Sponsors and Backers\n\n![kratos](docs/images/alipay.png)\n\n## License\nKratos is MIT licensed. See the [LICENSE](./LICENSE) file for details.\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 1.474609375,
          "content": "# Kratos\n\nThis document defines the roadmap for Kratos development.\n\n## Features\n- [x] Config\n    - [x] Local Files\n    - [x] K8s ConfigMap\n    - [x] Consul\n    - [x] Etcd\n    - [x] Nacos\n- [x] Registry\n    - [x] Consul\n    - [x] Etcd\n    - [x] K8s\n    - [x] Nacos\n- [x] Encoding\n    - [x] JSON\n    - [x] Protobuf\n- [x] Transport\n    - [x] HTTP\n    - [x] gRPC\n- [x] Middleware\n    - [x] Logging\n    - [x] metrics\n    - [x] recovery\n    - [x] gRPC status\n    - [x] transport tracing\n    - [x] Validator\n    - [x] Authentication\n    - [x] Ratelimit\n    - [x] CircuitBreaker\n- [x] Metrics\n    - [x] Prometheus\n    - [x] DataDog\n- [x] Tracing\n    - [x] HTTP\n        - [x] TLS\n        - [x] Client\n        - [x] Service Registrar\n        - [ ] javascript/typescript clients\n    - [x] gRPC\n        - [x] TLS\n        - [x] Unary Handler\n        - [x] Streaming Handler\n- [ ] Cache\n    - [ ] go-redis\n- [x] Event\n    - [x] Pub/Sub\n    - [x] Kafka\n    - [ ] Nats\n- [x] Database\n    - [x] Ent\n    - [ ] Gorm\n\n## Platform\n- [ ] Kratos API\n    - [ ] Auth\n    - [ ] Config\n    - [ ] Registry\n    - [ ] Events\n- [ ] Kratos Runtime\n    - [ ] Secrets\n    - [ ] Service-to-Service\n    - [ ] Publish and Subscribe\n    - [ ] Observability\n    - [ ] Controllable\n- [ ] Kratos UI\n    - [ ] Auth\n    - [ ] Config\n    - [ ] Services\n    - [ ] Endpoints\n    - [ ] Ratelimit\n    - [ ] CircuitBreaker\n    - [ ] FaultInjection\n    - [ ] TrafficPolicy\n\n## Tools\n- [x] Kratos\n- [x] HTTP Generator\n    - [ ] API YAML\n- [x] Errors Generator\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5556640625,
          "content": "# Security Policy\n\n## Supported Versions\n\nUse this section to tell people about which versions of your project are\ncurrently being supported with security updates.\n\n| Version     | Supported          |\n|-------------|--------------------|\n| 2.0.rc1     | :white_check_mark: |\n| < 2.0.beta3 | :x:                |\n\n## Reporting a Vulnerability\n\nUse this section to tell people how to report a vulnerability.\n\nTell them where to go, how often they can expect to get an update on a\nreported vulnerability, what to expect if the vulnerability is accepted or\ndeclined, etc.\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "app.go",
          "type": "blob",
          "size": 4.64453125,
          "content": "package kratos\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"os\"\n\t\"os/signal\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n\t\"golang.org/x/sync/errgroup\"\n\n\t\"github.com/go-kratos/kratos/v2/log\"\n\t\"github.com/go-kratos/kratos/v2/registry\"\n\t\"github.com/go-kratos/kratos/v2/transport\"\n)\n\n// AppInfo is application context value.\ntype AppInfo interface {\n\tID() string\n\tName() string\n\tVersion() string\n\tMetadata() map[string]string\n\tEndpoint() []string\n}\n\n// App is an application components lifecycle manager.\ntype App struct {\n\topts     options\n\tctx      context.Context\n\tcancel   context.CancelFunc\n\tmu       sync.Mutex\n\tinstance *registry.ServiceInstance\n}\n\n// New create an application lifecycle manager.\nfunc New(opts ...Option) *App {\n\to := options{\n\t\tctx:              context.Background(),\n\t\tsigs:             []os.Signal{syscall.SIGTERM, syscall.SIGQUIT, syscall.SIGINT},\n\t\tregistrarTimeout: 10 * time.Second,\n\t\tstopTimeout:      10 * time.Second,\n\t}\n\tif id, err := uuid.NewUUID(); err == nil {\n\t\to.id = id.String()\n\t}\n\tfor _, opt := range opts {\n\t\topt(&o)\n\t}\n\tif o.logger != nil {\n\t\tlog.SetLogger(o.logger)\n\t}\n\tctx, cancel := context.WithCancel(o.ctx)\n\treturn &App{\n\t\tctx:    ctx,\n\t\tcancel: cancel,\n\t\topts:   o,\n\t}\n}\n\n// ID returns app instance id.\nfunc (a *App) ID() string { return a.opts.id }\n\n// Name returns service name.\nfunc (a *App) Name() string { return a.opts.name }\n\n// Version returns app version.\nfunc (a *App) Version() string { return a.opts.version }\n\n// Metadata returns service metadata.\nfunc (a *App) Metadata() map[string]string { return a.opts.metadata }\n\n// Endpoint returns endpoints.\nfunc (a *App) Endpoint() []string {\n\tif a.instance != nil {\n\t\treturn a.instance.Endpoints\n\t}\n\treturn nil\n}\n\n// Run executes all OnStart hooks registered with the application's Lifecycle.\nfunc (a *App) Run() error {\n\tinstance, err := a.buildInstance()\n\tif err != nil {\n\t\treturn err\n\t}\n\ta.mu.Lock()\n\ta.instance = instance\n\ta.mu.Unlock()\n\tsctx := NewContext(a.ctx, a)\n\teg, ctx := errgroup.WithContext(sctx)\n\twg := sync.WaitGroup{}\n\n\tfor _, fn := range a.opts.beforeStart {\n\t\tif err = fn(sctx); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tfor _, srv := range a.opts.servers {\n\t\tserver := srv\n\t\teg.Go(func() error {\n\t\t\t<-ctx.Done() // wait for stop signal\n\t\t\tstopCtx, cancel := context.WithTimeout(NewContext(a.opts.ctx, a), a.opts.stopTimeout)\n\t\t\tdefer cancel()\n\t\t\treturn server.Stop(stopCtx)\n\t\t})\n\t\twg.Add(1)\n\t\teg.Go(func() error {\n\t\t\twg.Done() // here is to ensure server start has begun running before register, so defer is not needed\n\t\t\treturn server.Start(NewContext(a.opts.ctx, a))\n\t\t})\n\t}\n\twg.Wait()\n\tif a.opts.registrar != nil {\n\t\trctx, rcancel := context.WithTimeout(ctx, a.opts.registrarTimeout)\n\t\tdefer rcancel()\n\t\tif err = a.opts.registrar.Register(rctx, instance); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tfor _, fn := range a.opts.afterStart {\n\t\tif err = fn(sctx); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, a.opts.sigs...)\n\teg.Go(func() error {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\tcase <-c:\n\t\t\treturn a.Stop()\n\t\t}\n\t})\n\tif err = eg.Wait(); err != nil && !errors.Is(err, context.Canceled) {\n\t\treturn err\n\t}\n\terr = nil\n\tfor _, fn := range a.opts.afterStop {\n\t\terr = fn(sctx)\n\t}\n\treturn err\n}\n\n// Stop gracefully stops the application.\nfunc (a *App) Stop() (err error) {\n\tsctx := NewContext(a.ctx, a)\n\tfor _, fn := range a.opts.beforeStop {\n\t\terr = fn(sctx)\n\t}\n\n\ta.mu.Lock()\n\tinstance := a.instance\n\ta.mu.Unlock()\n\tif a.opts.registrar != nil && instance != nil {\n\t\tctx, cancel := context.WithTimeout(NewContext(a.ctx, a), a.opts.registrarTimeout)\n\t\tdefer cancel()\n\t\tif err = a.opts.registrar.Deregister(ctx, instance); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif a.cancel != nil {\n\t\ta.cancel()\n\t}\n\treturn err\n}\n\nfunc (a *App) buildInstance() (*registry.ServiceInstance, error) {\n\tendpoints := make([]string, 0, len(a.opts.endpoints))\n\tfor _, e := range a.opts.endpoints {\n\t\tendpoints = append(endpoints, e.String())\n\t}\n\tif len(endpoints) == 0 {\n\t\tfor _, srv := range a.opts.servers {\n\t\t\tif r, ok := srv.(transport.Endpointer); ok {\n\t\t\t\te, err := r.Endpoint()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tendpoints = append(endpoints, e.String())\n\t\t\t}\n\t\t}\n\t}\n\treturn &registry.ServiceInstance{\n\t\tID:        a.opts.id,\n\t\tName:      a.opts.name,\n\t\tVersion:   a.opts.version,\n\t\tMetadata:  a.opts.metadata,\n\t\tEndpoints: endpoints,\n\t}, nil\n}\n\ntype appKey struct{}\n\n// NewContext returns a new Context that carries value.\nfunc NewContext(ctx context.Context, s AppInfo) context.Context {\n\treturn context.WithValue(ctx, appKey{}, s)\n}\n\n// FromContext returns the Transport value stored in ctx, if any.\nfunc FromContext(ctx context.Context) (s AppInfo, ok bool) {\n\ts, ok = ctx.Value(appKey{}).(AppInfo)\n\treturn\n}\n"
        },
        {
          "name": "app_test.go",
          "type": "blob",
          "size": 6.8310546875,
          "content": "package kratos\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net/url\"\n\t\"reflect\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/go-kratos/kratos/v2/registry\"\n\t\"github.com/go-kratos/kratos/v2/transport/grpc\"\n\t\"github.com/go-kratos/kratos/v2/transport/http\"\n)\n\ntype mockRegistry struct {\n\tlk      sync.Mutex\n\tservice map[string]*registry.ServiceInstance\n}\n\nfunc (r *mockRegistry) Register(_ context.Context, service *registry.ServiceInstance) error {\n\tif service == nil || service.ID == \"\" {\n\t\treturn errors.New(\"no service id\")\n\t}\n\tr.lk.Lock()\n\tdefer r.lk.Unlock()\n\tr.service[service.ID] = service\n\treturn nil\n}\n\n// Deregister the registration.\nfunc (r *mockRegistry) Deregister(_ context.Context, service *registry.ServiceInstance) error {\n\tr.lk.Lock()\n\tdefer r.lk.Unlock()\n\tif r.service[service.ID] == nil {\n\t\treturn errors.New(\"deregister service not found\")\n\t}\n\tdelete(r.service, service.ID)\n\treturn nil\n}\n\nfunc TestApp(t *testing.T) {\n\ths := http.NewServer()\n\tgs := grpc.NewServer()\n\tapp := New(\n\t\tName(\"kratos\"),\n\t\tVersion(\"v1.0.0\"),\n\t\tServer(hs, gs),\n\t\tBeforeStart(func(_ context.Context) error {\n\t\t\tt.Log(\"BeforeStart...\")\n\t\t\treturn nil\n\t\t}),\n\t\tBeforeStop(func(_ context.Context) error {\n\t\t\tt.Log(\"BeforeStop...\")\n\t\t\treturn nil\n\t\t}),\n\t\tAfterStart(func(_ context.Context) error {\n\t\t\tt.Log(\"AfterStart...\")\n\t\t\treturn nil\n\t\t}),\n\t\tAfterStop(func(_ context.Context) error {\n\t\t\tt.Log(\"AfterStop...\")\n\t\t\treturn nil\n\t\t}),\n\t\tRegistrar(&mockRegistry{service: make(map[string]*registry.ServiceInstance)}),\n\t)\n\ttime.AfterFunc(time.Second, func() {\n\t\t_ = app.Stop()\n\t})\n\tif err := app.Run(); err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\nfunc TestApp_ID(t *testing.T) {\n\tv := \"123\"\n\to := New(ID(v))\n\tif !reflect.DeepEqual(v, o.ID()) {\n\t\tt.Fatalf(\"o.ID():%s is not equal to v:%s\", o.ID(), v)\n\t}\n}\n\nfunc TestApp_Name(t *testing.T) {\n\tv := \"123\"\n\to := New(Name(v))\n\tif !reflect.DeepEqual(v, o.Name()) {\n\t\tt.Fatalf(\"o.Name():%s is not equal to v:%s\", o.Name(), v)\n\t}\n}\n\nfunc TestApp_Version(t *testing.T) {\n\tv := \"123\"\n\to := New(Version(v))\n\tif !reflect.DeepEqual(v, o.Version()) {\n\t\tt.Fatalf(\"o.Version():%s is not equal to v:%s\", o.Version(), v)\n\t}\n}\n\nfunc TestApp_Metadata(t *testing.T) {\n\tv := map[string]string{\n\t\t\"a\": \"1\",\n\t\t\"b\": \"2\",\n\t}\n\to := New(Metadata(v))\n\tif !reflect.DeepEqual(v, o.Metadata()) {\n\t\tt.Fatalf(\"o.Metadata():%s is not equal to v:%s\", o.Metadata(), v)\n\t}\n}\n\nfunc TestApp_Endpoint(t *testing.T) {\n\tv := []string{\"https://go-kratos.dev\", \"localhost\"}\n\tvar endpoints []*url.URL\n\tfor _, urlStr := range v {\n\t\tif endpoint, err := url.Parse(urlStr); err != nil {\n\t\t\tt.Errorf(\"invalid endpoint:%v\", urlStr)\n\t\t} else {\n\t\t\tendpoints = append(endpoints, endpoint)\n\t\t}\n\t}\n\to := New(Endpoint(endpoints...))\n\tif instance, err := o.buildInstance(); err != nil {\n\t\tt.Error(\"build instance failed\")\n\t} else {\n\t\to.instance = instance\n\t}\n\tif !reflect.DeepEqual(o.Endpoint(), v) {\n\t\tt.Errorf(\"Endpoint() = %v, want %v\", o.Endpoint(), v)\n\t}\n}\n\nfunc TestApp_buildInstance(t *testing.T) {\n\twant := struct {\n\t\tid        string\n\t\tname      string\n\t\tversion   string\n\t\tmetadata  map[string]string\n\t\tendpoints []string\n\t}{\n\t\tid:      \"1\",\n\t\tname:    \"kratos\",\n\t\tversion: \"v1.0.0\",\n\t\tmetadata: map[string]string{\n\t\t\t\"a\": \"1\",\n\t\t\t\"b\": \"2\",\n\t\t},\n\t\tendpoints: []string{\"https://go-kratos.dev\", \"localhost\"},\n\t}\n\tvar endpoints []*url.URL\n\tfor _, urlStr := range want.endpoints {\n\t\tif endpoint, err := url.Parse(urlStr); err != nil {\n\t\t\tt.Errorf(\"invalid endpoint:%v\", urlStr)\n\t\t} else {\n\t\t\tendpoints = append(endpoints, endpoint)\n\t\t}\n\t}\n\tapp := New(\n\t\tID(want.id),\n\t\tName(want.name),\n\t\tVersion(want.version),\n\t\tMetadata(want.metadata),\n\t\tEndpoint(endpoints...),\n\t)\n\tif got, err := app.buildInstance(); err != nil {\n\t\tt.Error(\"build got failed\")\n\t} else {\n\t\tif got.ID != want.id {\n\t\t\tt.Errorf(\"ID() = %v, want %v\", got.ID, want.id)\n\t\t}\n\t\tif got.Name != want.name {\n\t\t\tt.Errorf(\"Name() = %v, want %v\", got.Name, want.name)\n\t\t}\n\t\tif got.Version != want.version {\n\t\t\tt.Errorf(\"Version() = %v, want %v\", got.Version, want.version)\n\t\t}\n\t\tif !reflect.DeepEqual(got.Endpoints, want.endpoints) {\n\t\t\tt.Errorf(\"Endpoint() = %v, want %v\", got.Endpoints, want.endpoints)\n\t\t}\n\t\tif !reflect.DeepEqual(got.Metadata, want.metadata) {\n\t\t\tt.Errorf(\"Metadata() = %v, want %v\", got.Metadata, want.metadata)\n\t\t}\n\t}\n}\n\nfunc TestApp_Context(t *testing.T) {\n\ttype fields struct {\n\t\tid       string\n\t\tversion  string\n\t\tname     string\n\t\tinstance *registry.ServiceInstance\n\t\tmetadata map[string]string\n\t\twant     struct {\n\t\t\tid       string\n\t\t\tversion  string\n\t\t\tname     string\n\t\t\tendpoint []string\n\t\t\tmetadata map[string]string\n\t\t}\n\t}\n\ttests := []fields{\n\t\t{\n\t\t\tid:       \"1\",\n\t\t\tname:     \"kratos-v1\",\n\t\t\tinstance: &registry.ServiceInstance{Endpoints: []string{\"https://go-kratos.dev\", \"localhost\"}},\n\t\t\tmetadata: map[string]string{},\n\t\t\tversion:  \"v1\",\n\t\t\twant: struct {\n\t\t\t\tid       string\n\t\t\t\tversion  string\n\t\t\t\tname     string\n\t\t\t\tendpoint []string\n\t\t\t\tmetadata map[string]string\n\t\t\t}{\n\t\t\t\tid: \"1\", version: \"v1\", name: \"kratos-v1\", endpoint: []string{\"https://go-kratos.dev\", \"localhost\"},\n\t\t\t\tmetadata: map[string]string{},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid:       \"2\",\n\t\t\tname:     \"kratos-v2\",\n\t\t\tinstance: &registry.ServiceInstance{Endpoints: []string{\"test\"}},\n\t\t\tmetadata: map[string]string{\"kratos\": \"https://github.com/go-kratos/kratos\"},\n\t\t\tversion:  \"v2\",\n\t\t\twant: struct {\n\t\t\t\tid       string\n\t\t\t\tversion  string\n\t\t\t\tname     string\n\t\t\t\tendpoint []string\n\t\t\t\tmetadata map[string]string\n\t\t\t}{\n\t\t\t\tid: \"2\", version: \"v2\", name: \"kratos-v2\", endpoint: []string{\"test\"},\n\t\t\t\tmetadata: map[string]string{\"kratos\": \"https://github.com/go-kratos/kratos\"},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid:       \"3\",\n\t\t\tname:     \"kratos-v3\",\n\t\t\tinstance: nil,\n\t\t\tmetadata: make(map[string]string),\n\t\t\tversion:  \"v3\",\n\t\t\twant: struct {\n\t\t\t\tid       string\n\t\t\t\tversion  string\n\t\t\t\tname     string\n\t\t\t\tendpoint []string\n\t\t\t\tmetadata map[string]string\n\t\t\t}{\n\t\t\t\tid: \"3\", version: \"v3\", name: \"kratos-v3\", endpoint: nil,\n\t\t\t\tmetadata: map[string]string{},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\ta := &App{\n\t\t\t\topts:     options{id: tt.id, name: tt.name, metadata: tt.metadata, version: tt.version},\n\t\t\t\tctx:      context.Background(),\n\t\t\t\tcancel:   nil,\n\t\t\t\tinstance: tt.instance,\n\t\t\t}\n\n\t\t\tctx := NewContext(context.Background(), a)\n\n\t\t\tif got, ok := FromContext(ctx); ok {\n\t\t\t\tif got.ID() != tt.want.id {\n\t\t\t\t\tt.Errorf(\"ID() = %v, want %v\", got.ID(), tt.want.id)\n\t\t\t\t}\n\t\t\t\tif got.Name() != tt.want.name {\n\t\t\t\t\tt.Errorf(\"Name() = %v, want %v\", got.Name(), tt.want.name)\n\t\t\t\t}\n\t\t\t\tif got.Version() != tt.want.version {\n\t\t\t\t\tt.Errorf(\"Version() = %v, want %v\", got.Version(), tt.want.version)\n\t\t\t\t}\n\t\t\t\tif !reflect.DeepEqual(got.Endpoint(), tt.want.endpoint) {\n\t\t\t\t\tt.Errorf(\"Endpoint() = %v, want %v\", got.Endpoint(), tt.want.endpoint)\n\t\t\t\t}\n\t\t\t\tif !reflect.DeepEqual(got.Metadata(), tt.want.metadata) {\n\t\t\t\t\tt.Errorf(\"Metadata() = %v, want %v\", got.Metadata(), tt.want.metadata)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tt.Errorf(\"ok() = %v, want %v\", ok, true)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0380859375,
          "content": "ignore:\n  - \"examples\"\n  - \"**/*.pb.go\""
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "encoding",
          "type": "tree",
          "content": null
        },
        {
          "name": "errors",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.763671875,
          "content": "module github.com/go-kratos/kratos/v2\n\ngo 1.20\n\nrequire (\n\tdario.cat/mergo v1.0.0\n\tgithub.com/fsnotify/fsnotify v1.6.0\n\tgithub.com/go-kratos/aegis v0.2.0\n\tgithub.com/go-playground/form/v4 v4.2.0\n\tgithub.com/golang-jwt/jwt/v5 v5.1.0\n\tgithub.com/google/uuid v1.4.0\n\tgithub.com/gorilla/mux v1.8.1\n\tgo.opentelemetry.io/otel v1.24.0\n\tgo.opentelemetry.io/otel/metric v1.24.0\n\tgo.opentelemetry.io/otel/sdk v1.24.0\n\tgo.opentelemetry.io/otel/sdk/metric v1.24.0\n\tgo.opentelemetry.io/otel/trace v1.24.0\n\tgolang.org/x/sync v0.5.0\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20240102182953-50ed04b92917\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240102182953-50ed04b92917\n\tgoogle.golang.org/grpc v1.61.1\n\tgoogle.golang.org/protobuf v1.33.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tgithub.com/envoyproxy/go-control-plane v0.11.2-0.20230627204322-7d0032219fcb // indirect\n\tgithub.com/go-logr/logr v1.4.1 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-ole/go-ole v1.2.6 // indirect\n\tgithub.com/golang/protobuf v1.5.4 // indirect\n\tgithub.com/kr/pretty v0.3.1 // indirect\n\tgithub.com/lufia/plan9stats v0.0.0-20230326075908-cb1d2100619a // indirect\n\tgithub.com/power-devops/perfstat v0.0.0-20221212215047-62379fc7944b // indirect\n\tgithub.com/rogpeppe/go-internal v1.11.0 // indirect\n\tgithub.com/shirou/gopsutil/v3 v3.23.6 // indirect\n\tgithub.com/shoenig/go-m1cpu v0.1.6 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.11 // indirect\n\tgithub.com/tklauser/numcpus v0.6.1 // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.3 // indirect\n\tgolang.org/x/net v0.23.0 // indirect\n\tgolang.org/x/sys v0.18.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20231212172506-995d672761c0 // indirect\n\tgopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 10.4501953125,
          "content": "dario.cat/mergo v1.0.0 h1:AGCNq9Evsj31mOgNPcLyXc+4PNABt905YmuqPYYpBWk=\ndario.cat/mergo v1.0.0/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\ngithub.com/census-instrumentation/opencensus-proto v0.4.1 h1:iKLQ0xPNFxR/2hzXZMrBo8f1j86j5WHzznCCQxV/b8g=\ngithub.com/cncf/xds/go v0.0.0-20231109132714-523115ebc101 h1:7To3pQ+pZo0i3dsWEbinPNFs5gPSBOsJtx3wTT94VBY=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/envoyproxy/go-control-plane v0.11.2-0.20230627204322-7d0032219fcb h1:kxNVXsNro/lpR5WD+P1FI/yUHn2G03Glber3k8cQL2Y=\ngithub.com/envoyproxy/go-control-plane v0.11.2-0.20230627204322-7d0032219fcb/go.mod h1:GxGqnjWzl1Gz8WfAfMJSfhvsi4EPZayRb25nLHDWXyA=\ngithub.com/envoyproxy/protoc-gen-validate v1.0.2 h1:QkIBuU5k+x7/QXPvPPnWXWlCdaBFApVqftFV6k087DA=\ngithub.com/fsnotify/fsnotify v1.6.0 h1:n+5WquG0fcWoWp6xPWfHdbskMCQaFnG6PfBrh1Ky4HY=\ngithub.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=\ngithub.com/go-kratos/aegis v0.2.0 h1:dObzCDWn3XVjUkgxyBp6ZeWtx/do0DPZ7LY3yNSJLUQ=\ngithub.com/go-kratos/aegis v0.2.0/go.mod h1:v0R2m73WgEEYB3XYu6aE2WcMwsZkJ/Rzuf5eVccm7bI=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=\ngithub.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-ole/go-ole v1.2.6 h1:/Fpf6oFPoeFik9ty7siob0G6Ke8QvQEuVcuChpwXzpY=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-playground/assert/v2 v2.0.1 h1:MsBgLAaY856+nPRTKrp3/OZK38U/wa0CcBYNjji3q3A=\ngithub.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=\ngithub.com/go-playground/form/v4 v4.2.0 h1:N1wh+Goz61e6w66vo8vJkQt+uwZSoLz50kZPJWR8eic=\ngithub.com/go-playground/form/v4 v4.2.0/go.mod h1:q1a2BY+AQUUzhl6xA/6hBetay6dEIhMHjgvJiGo6K7U=\ngithub.com/golang-jwt/jwt/v5 v5.1.0 h1:UGKbA/IPjtS6zLcdB7i5TyACMgSbOTiR8qzXgw8HWQU=\ngithub.com/golang-jwt/jwt/v5 v5.1.0/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/uuid v1.4.0 h1:MtMxsa51/r9yyhkyLsVeVt0B+BGQZzpQiTQ4eHZ8bc4=\ngithub.com/google/uuid v1.4.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=\ngithub.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0/go.mod h1:zJYVVT2jmtg6P3p1VtQj7WsuWi/y4VnjVBn7F8KPB3I=\ngithub.com/lufia/plan9stats v0.0.0-20230326075908-cb1d2100619a h1:N9zuLhTvBSRt0gWSiJswwQ2HqDmtX/ZCDJURnKUt1Ik=\ngithub.com/lufia/plan9stats v0.0.0-20230326075908-cb1d2100619a/go.mod h1:JKx41uQRwqlTZabZc+kILPrO/3jlKnQ2Z8b7YiVw5cE=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/power-devops/perfstat v0.0.0-20221212215047-62379fc7944b h1:0LFwY6Q3gMACTjAbMZBjXAqTOzOwFaj2Ld6cjeQ7Rig=\ngithub.com/power-devops/perfstat v0.0.0-20221212215047-62379fc7944b/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/rogpeppe/go-internal v1.11.0 h1:cWPaGQEPrBb5/AsnsZesgZZ9yb1OQ+GOISoDNXVBh4M=\ngithub.com/rogpeppe/go-internal v1.11.0/go.mod h1:ddIwULY96R17DhadqLgMfk9H9tvdUzkipdSkR5nkCZA=\ngithub.com/shirou/gopsutil/v3 v3.23.6 h1:5y46WPI9QBKBbK7EEccUPNXpJpNrvPuTD0O2zHEHT08=\ngithub.com/shirou/gopsutil/v3 v3.23.6/go.mod h1:j7QX50DrXYggrpN30W0Mo+I4/8U2UUIQrnrhqUeWrAU=\ngithub.com/shoenig/go-m1cpu v0.1.6 h1:nxdKQNcEB6vzgA2E2bvzKIYRuNj7XNJ4S/aRSwKzFtM=\ngithub.com/shoenig/go-m1cpu v0.1.6/go.mod h1:1JJMcUBvfNwpq05QDQVAnx3gUHr9IYF7GNg9SUEw2VQ=\ngithub.com/shoenig/test v0.6.4 h1:kVTaSd7WLz5WZ2IaoM0RSzRsUD+m8wRR+5qvntpn4LU=\ngithub.com/shoenig/test v0.6.4/go.mod h1:byHiCGXqrVaflBLAMq/srcZIHynQPQgeyvkvXnjqq0k=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/tklauser/go-sysconf v0.3.11 h1:89WgdJhk5SNwJfu+GKyYveZ4IaJ7xAkecBo+KdJV0CM=\ngithub.com/tklauser/go-sysconf v0.3.11/go.mod h1:GqXfhXY3kiPa0nAXPDIQIWzJbMCB7AmcWpGR8lSZfqI=\ngithub.com/tklauser/numcpus v0.6.0/go.mod h1:FEZLMke0lhOUG6w2JadTzp0a+Nl8PF/GFkQ5UVIcaL4=\ngithub.com/tklauser/numcpus v0.6.1 h1:ng9scYS7az0Bk4OZLvrNXNSAO2Pxr1XXRAPyjhIx+Fk=\ngithub.com/tklauser/numcpus v0.6.1/go.mod h1:1XfjsgE2zo8GVw7POkMbHENHzVg3GzmoZ9fESEdAacY=\ngithub.com/yusufpapurcu/wmi v1.2.3 h1:E1ctvB7uKFMOJw3fdOW32DwGE9I7t++CRUEMKvFoFiw=\ngithub.com/yusufpapurcu/wmi v1.2.3/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=\ngo.opentelemetry.io/otel v1.24.0 h1:0LAOdjNmQeSTzGBzduGe/rU4tZhMwL5rWgtp9Ku5Jfo=\ngo.opentelemetry.io/otel v1.24.0/go.mod h1:W7b9Ozg4nkF5tWI5zsXkaKKDjdVjpD4oAt9Qi/MArHo=\ngo.opentelemetry.io/otel/metric v1.24.0 h1:6EhoGWWK28x1fbpA4tYTOWBkPefTDQnb8WSGXlc88kI=\ngo.opentelemetry.io/otel/metric v1.24.0/go.mod h1:VYhLe1rFfxuTXLgj4CBiyz+9WYBA8pNGJgDcSFRKBco=\ngo.opentelemetry.io/otel/sdk v1.24.0 h1:YMPPDNymmQN3ZgczicBY3B6sf9n62Dlj9pWD3ucgoDw=\ngo.opentelemetry.io/otel/sdk v1.24.0/go.mod h1:KVrIYw6tEubO9E96HQpcmpTKDVn9gdv35HoYiQWGDFg=\ngo.opentelemetry.io/otel/sdk/metric v1.24.0 h1:yyMQrPzF+k88/DbH7o4FMAs80puqd+9osbiBrJrz/w8=\ngo.opentelemetry.io/otel/sdk/metric v1.24.0/go.mod h1:I6Y5FjH6rvEnTTAYQz3Mmv2kl6Ek5IIrmwTLqMrrOE0=\ngo.opentelemetry.io/otel/trace v1.24.0 h1:CsKnnL4dUAr/0llH9FKuc698G04IrpWV0MQA/Y1YELI=\ngo.opentelemetry.io/otel/trace v1.24.0/go.mod h1:HPc3Xr/cOApsBI154IU0OI0HJexz+aw5uPdbs3UCjNU=\ngolang.org/x/net v0.23.0 h1:7EYJ93RZ9vYSZAIb2x3lnuvqO5zneoD6IvWjuhfxjTs=\ngolang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=\ngolang.org/x/sync v0.5.0 h1:60k92dhOjHxJkrqnwsfl8KuaHbn/5dl0lUPUklKo3qE=\ngolang.org/x/sync v0.5.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.9.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/genproto v0.0.0-20231212172506-995d672761c0 h1:YJ5pD9rF8o9Qtta0Cmy9rdBwkSjrTCT6XTiUQVOtIos=\ngoogle.golang.org/genproto v0.0.0-20231212172506-995d672761c0/go.mod h1:l/k7rMz0vFTBPy+tFSGvXEd3z+BcoG1k7EHbqm+YBsY=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240102182953-50ed04b92917 h1:rcS6EyEaoCO52hQDupoSfrxI3R6C2Tq741is7X8OvnM=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240102182953-50ed04b92917/go.mod h1:CmlNWB9lSezaYELKS5Ym1r44VrrbPUa7JTvw+6MbpJ0=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240102182953-50ed04b92917 h1:6G8oQ016D88m1xAKljMlBOOGWDZkes4kMhgGFlf8WcQ=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240102182953-50ed04b92917/go.mod h1:xtjpI3tXFPP051KaWnhvxkiubL/6dJ18vLVf7q2pTOU=\ngoogle.golang.org/grpc v1.61.1 h1:kLAiWrZs7YeDM6MumDe7m3y4aM6wacLzM1Y/wiLP9XY=\ngoogle.golang.org/grpc v1.61.1/go.mod h1:VUbo7IFqmF1QtCAstipjG0GIoq49KvMe9+h1jFLBNJs=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "hack",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "metadata",
          "type": "tree",
          "content": null
        },
        {
          "name": "middleware",
          "type": "tree",
          "content": null
        },
        {
          "name": "options.go",
          "type": "blob",
          "size": 2.953125,
          "content": "package kratos\n\nimport (\n\t\"context\"\n\t\"net/url\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/go-kratos/kratos/v2/log\"\n\t\"github.com/go-kratos/kratos/v2/registry\"\n\t\"github.com/go-kratos/kratos/v2/transport\"\n)\n\n// Option is an application option.\ntype Option func(o *options)\n\n// options is an application options.\ntype options struct {\n\tid        string\n\tname      string\n\tversion   string\n\tmetadata  map[string]string\n\tendpoints []*url.URL\n\n\tctx  context.Context\n\tsigs []os.Signal\n\n\tlogger           log.Logger\n\tregistrar        registry.Registrar\n\tregistrarTimeout time.Duration\n\tstopTimeout      time.Duration\n\tservers          []transport.Server\n\n\t// Before and After funcs\n\tbeforeStart []func(context.Context) error\n\tbeforeStop  []func(context.Context) error\n\tafterStart  []func(context.Context) error\n\tafterStop   []func(context.Context) error\n}\n\n// ID with service id.\nfunc ID(id string) Option {\n\treturn func(o *options) { o.id = id }\n}\n\n// Name with service name.\nfunc Name(name string) Option {\n\treturn func(o *options) { o.name = name }\n}\n\n// Version with service version.\nfunc Version(version string) Option {\n\treturn func(o *options) { o.version = version }\n}\n\n// Metadata with service metadata.\nfunc Metadata(md map[string]string) Option {\n\treturn func(o *options) { o.metadata = md }\n}\n\n// Endpoint with service endpoint.\nfunc Endpoint(endpoints ...*url.URL) Option {\n\treturn func(o *options) { o.endpoints = endpoints }\n}\n\n// Context with service context.\nfunc Context(ctx context.Context) Option {\n\treturn func(o *options) { o.ctx = ctx }\n}\n\n// Logger with service logger.\nfunc Logger(logger log.Logger) Option {\n\treturn func(o *options) { o.logger = logger }\n}\n\n// Server with transport servers.\nfunc Server(srv ...transport.Server) Option {\n\treturn func(o *options) { o.servers = srv }\n}\n\n// Signal with exit signals.\nfunc Signal(sigs ...os.Signal) Option {\n\treturn func(o *options) { o.sigs = sigs }\n}\n\n// Registrar with service registry.\nfunc Registrar(r registry.Registrar) Option {\n\treturn func(o *options) { o.registrar = r }\n}\n\n// RegistrarTimeout with registrar timeout.\nfunc RegistrarTimeout(t time.Duration) Option {\n\treturn func(o *options) { o.registrarTimeout = t }\n}\n\n// StopTimeout with app stop timeout.\nfunc StopTimeout(t time.Duration) Option {\n\treturn func(o *options) { o.stopTimeout = t }\n}\n\n// Before and Afters\n\n// BeforeStart run funcs before app starts\nfunc BeforeStart(fn func(context.Context) error) Option {\n\treturn func(o *options) {\n\t\to.beforeStart = append(o.beforeStart, fn)\n\t}\n}\n\n// BeforeStop run funcs before app stops\nfunc BeforeStop(fn func(context.Context) error) Option {\n\treturn func(o *options) {\n\t\to.beforeStop = append(o.beforeStop, fn)\n\t}\n}\n\n// AfterStart run funcs after app starts\nfunc AfterStart(fn func(context.Context) error) Option {\n\treturn func(o *options) {\n\t\to.afterStart = append(o.afterStart, fn)\n\t}\n}\n\n// AfterStop run funcs after app stops\nfunc AfterStop(fn func(context.Context) error) Option {\n\treturn func(o *options) {\n\t\to.afterStop = append(o.afterStop, fn)\n\t}\n}\n"
        },
        {
          "name": "options_test.go",
          "type": "blob",
          "size": 3.7958984375,
          "content": "package kratos\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\t\"reflect\"\n\t\"testing\"\n\t\"time\"\n\n\txlog \"github.com/go-kratos/kratos/v2/log\"\n\t\"github.com/go-kratos/kratos/v2/registry\"\n\t\"github.com/go-kratos/kratos/v2/transport\"\n)\n\nfunc TestID(t *testing.T) {\n\to := &options{}\n\tv := \"123\"\n\tID(v)(o)\n\tif !reflect.DeepEqual(v, o.id) {\n\t\tt.Fatalf(\"o.id:%s is not equal to v:%s\", o.id, v)\n\t}\n}\n\nfunc TestName(t *testing.T) {\n\to := &options{}\n\tv := \"abc\"\n\tName(v)(o)\n\tif !reflect.DeepEqual(v, o.name) {\n\t\tt.Fatalf(\"o.name:%s is not equal to v:%s\", o.name, v)\n\t}\n}\n\nfunc TestVersion(t *testing.T) {\n\to := &options{}\n\tv := \"123\"\n\tVersion(v)(o)\n\tif !reflect.DeepEqual(v, o.version) {\n\t\tt.Fatalf(\"o.version:%s is not equal to v:%s\", o.version, v)\n\t}\n}\n\nfunc TestMetadata(t *testing.T) {\n\to := &options{}\n\tv := map[string]string{\n\t\t\"a\": \"1\",\n\t\t\"b\": \"2\",\n\t}\n\tMetadata(v)(o)\n\tif !reflect.DeepEqual(v, o.metadata) {\n\t\tt.Fatalf(\"o.metadata:%s is not equal to v:%s\", o.metadata, v)\n\t}\n}\n\nfunc TestEndpoint(t *testing.T) {\n\to := &options{}\n\tv := []*url.URL{\n\t\t{Host: \"example.com\"},\n\t\t{Host: \"foo.com\"},\n\t}\n\tEndpoint(v...)(o)\n\tif !reflect.DeepEqual(v, o.endpoints) {\n\t\tt.Fatalf(\"o.endpoints:%s is not equal to v:%s\", o.endpoints, v)\n\t}\n}\n\nfunc TestContext(t *testing.T) {\n\ttype ctxKey struct {\n\t\tKey string\n\t}\n\to := &options{}\n\tv := context.WithValue(context.TODO(), ctxKey{Key: \"context\"}, \"b\")\n\tContext(v)(o)\n\tif !reflect.DeepEqual(v, o.ctx) {\n\t\tt.Fatalf(\"o.ctx:%s is not equal to v:%s\", o.ctx, v)\n\t}\n}\n\nfunc TestLogger(t *testing.T) {\n\to := &options{}\n\tv := xlog.NewStdLogger(log.Writer())\n\tLogger(v)(o)\n\tif !reflect.DeepEqual(v, o.logger) {\n\t\tt.Fatalf(\"o.logger:%v is not equal to xlog.NewHelper(v):%v\", o.logger, xlog.NewHelper(v))\n\t}\n}\n\ntype mockServer struct{}\n\nfunc (m *mockServer) Start(_ context.Context) error { return nil }\nfunc (m *mockServer) Stop(_ context.Context) error  { return nil }\n\nfunc TestServer(t *testing.T) {\n\to := &options{}\n\tv := []transport.Server{\n\t\t&mockServer{}, &mockServer{},\n\t}\n\tServer(v...)(o)\n\tif !reflect.DeepEqual(v, o.servers) {\n\t\tt.Fatalf(\"o.servers:%s is not equal to xlog.NewHelper(v):%s\", o.servers, v)\n\t}\n}\n\ntype mockSignal struct{}\n\nfunc (m *mockSignal) String() string { return \"sig\" }\nfunc (m *mockSignal) Signal()        {}\n\nfunc TestSignal(t *testing.T) {\n\to := &options{}\n\tv := []os.Signal{\n\t\t&mockSignal{}, &mockSignal{},\n\t}\n\tSignal(v...)(o)\n\tif !reflect.DeepEqual(v, o.sigs) {\n\t\tt.Fatal(\"o.sigs is not equal to v\")\n\t}\n}\n\ntype mockRegistrar struct{}\n\nfunc (m *mockRegistrar) Register(_ context.Context, _ *registry.ServiceInstance) error {\n\treturn nil\n}\n\nfunc (m *mockRegistrar) Deregister(_ context.Context, _ *registry.ServiceInstance) error {\n\treturn nil\n}\n\nfunc TestRegistrar(t *testing.T) {\n\to := &options{}\n\tv := &mockRegistrar{}\n\tRegistrar(v)(o)\n\tif !reflect.DeepEqual(v, o.registrar) {\n\t\tt.Fatal(\"o.registrar is not equal to v\")\n\t}\n}\n\nfunc TestRegistrarTimeout(t *testing.T) {\n\to := &options{}\n\tv := time.Duration(123)\n\tRegistrarTimeout(v)(o)\n\tif !reflect.DeepEqual(v, o.registrarTimeout) {\n\t\tt.Fatal(\"o.registrarTimeout is not equal to v\")\n\t}\n}\n\nfunc TestStopTimeout(t *testing.T) {\n\to := &options{}\n\tv := time.Duration(123)\n\tStopTimeout(v)(o)\n\tif !reflect.DeepEqual(v, o.stopTimeout) {\n\t\tt.Fatal(\"o.stopTimeout is not equal to v\")\n\t}\n}\n\nfunc TestBeforeStart(t *testing.T) {\n\to := &options{}\n\tv := func(_ context.Context) error {\n\t\tt.Log(\"BeforeStart...\")\n\t\treturn nil\n\t}\n\tBeforeStart(v)(o)\n}\n\nfunc TestBeforeStop(t *testing.T) {\n\to := &options{}\n\tv := func(_ context.Context) error {\n\t\tt.Log(\"BeforeStop...\")\n\t\treturn nil\n\t}\n\tBeforeStop(v)(o)\n}\n\nfunc TestAfterStart(t *testing.T) {\n\to := &options{}\n\tv := func(_ context.Context) error {\n\t\tt.Log(\"AfterStart...\")\n\t\treturn nil\n\t}\n\tAfterStart(v)(o)\n}\n\nfunc TestAfterStop(t *testing.T) {\n\to := &options{}\n\tv := func(_ context.Context) error {\n\t\tt.Log(\"AfterStop...\")\n\t\treturn nil\n\t}\n\tAfterStop(v)(o)\n}\n"
        },
        {
          "name": "registry",
          "type": "tree",
          "content": null
        },
        {
          "name": "selector",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "transport",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.go",
          "type": "blob",
          "size": 0.0810546875,
          "content": "package kratos\n\n// Release is the current kratos version.\nconst Release = \"v2.8.3\"\n"
        }
      ]
    }
  ]
}