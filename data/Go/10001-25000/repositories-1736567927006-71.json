{
  "metadata": {
    "timestamp": 1736567927006,
    "page": 71,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "getsops/sops",
      "stars": 17451,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0517578125,
          "content": "bin/\ndist/\nfunctional-tests/sops\nvendor/\nprofile.out\n"
        },
        {
          "name": ".goreleaser.yaml",
          "type": "blob",
          "size": 13.607421875,
          "content": "# yaml-language-server: $schema=https://goreleaser.com/static/schema.json\n\nproject_name: sops\n\n# xref: https://goreleaser.com/customization/hooks/\nbefore:\n  hooks:\n    - go mod download\n\n# xref: https://goreleaser.com/customization/env/\nenv:\n  - CGO_ENABLED=0\n  - PKG=github.com/getsops/sops/v3/version\n  - COSIGN_YES=true\n\n# xref: https://goreleaser.com/customization/reportsizes/\nreport_sizes: true\n\n# xref: https://goreleaser.com/customization/build/\nbuilds:\n  - id: binary-linux\n    main: ./cmd/sops\n    binary: \"{{ .ProjectName }}\"\n    flags:\n      - -trimpath\n      - -mod=readonly\n    ldflags:\n      - >\n        -s -w\n        -X \"{{ .Env.PKG }}.Version={{ .Version }}\"\n    goos:\n      - linux\n    goarch:\n      - amd64\n      - arm64\n    # Modified timestamp on the binary, set to ensure reproducible builds.\n    mod_timestamp: \"{{ .CommitTimestamp }}\"\n\n  - id: binary-darwin\n    main: ./cmd/sops\n    binary: \"{{ .ProjectName }}\"\n    flags:\n      - -trimpath\n      - -mod=readonly\n    ldflags:\n      - >\n        -s -w\n        -X {{ .Env.PKG }}.Version={{ .Version }}\n    goos:\n      - darwin\n    goarch:\n      - amd64\n      - arm64\n    # Modified timestamp on the binary, set to ensure reproducible builds.\n    mod_timestamp: \"{{ .CommitTimestamp }}\"\n\n  - id: binary-windows\n    main: ./cmd/sops\n    binary: \"{{ .ProjectName }}\"\n    flags:\n      - -trimpath\n      - -buildmode=pie\n      - -mod=readonly\n    ldflags:\n      - >\n        -s -w\n        -X {{ .Env.PKG }}.Version={{ .Version }}\n    goos:\n      - windows\n    goarch:\n      - amd64\n    # Modified timestamp on the binary, set to ensure reproducible builds.\n    mod_timestamp: \"{{ .CommitTimestamp }}\"\n\n# xref: https://goreleaser.com/customization/universalbinaries/\nuniversal_binaries:\n  - id: binary-darwin-universal\n    ids:\n      - binary-darwin\n    name_template: '{{ .ProjectName }}'\n    # We want to continue to ship individual binaries for darwin/amd64 and\n    # darwin/arm64.\n    replace: false\n    # Modified timestamp on the binary, set to ensure reproducible builds.\n    # NB: Available in GoReleaser >=1.20.0.\n    mod_timestamp: \"{{ .CommitTimestamp }}\"\n\n# xref: https://goreleaser.com/customization/nfpm/\nnfpms:\n  - id: deb\n    package_name: '{{ .ProjectName }}'\n    file_name_template: '{{ .ConventionalFileName }}'\n    vendor: CNCF SOPS\n    homepage: https://github.com/{{ .Env.GITHUB_REPOSITORY }}\n    maintainer: SOPS maintainers <cncf-SOPS-maintainers@lists.cncf.io>\n    description: Simple and flexible tool for managing secrets\n    license: MPL-2.0\n    formats:\n      - deb\n      - rpm\n\n# xref: https://goreleaser.com/customization/snapshots/\nsnapshot:\n  name_template: \"{{ incpatch .Version }}-dev-{{ .ShortCommit }}\"\n\n# xref: https://goreleaser.com/customization/archive/#disable-archiving\narchives:\n  - id: archive-unix\n    format: binary\n    builds:\n      - binary-linux\n      - binary-darwin\n    # NB: specifically crafted to ensure compatibility with release artifacts < v3.8.0.\n    name_template: '{{ .ProjectName }}-v{{ .Version }}.{{ .Os }}.{{ .Arch }}'\n\n  - id: archive-windows\n    format: binary\n    builds:\n      - binary-windows\n    # NB: specifically crafted to ensure compatibility with release artifacts < v3.8.0.\n    name_template: '{{ .ProjectName }}-v{{ .Version }}'\n\n  - id: archive-darwin-universal\n    format: binary\n    builds:\n      - binary-darwin-universal\n    # NB: specifically crafted to ensure compatibility with release artifacts < v3.8.0.\n    # We can't bundle this with the other unix archive, because .Arch becomes \"all\".\n    # Before v3.8.0, this used to be _just_ the AMD64 binary.\n    name_template: '{{ .ProjectName }}-v{{ .Version }}.darwin'\n\n# xref: https://goreleaser.com/customization/checksum/\nchecksum:\n  name_template: \"{{ .ProjectName }}-v{{ .Version }}.checksums.txt\"\n  algorithm: sha256\n  ids:\n    - archive-unix\n    - archive-windows\n    - archive-darwin-universal\n\n# xref: https://goreleaser.com/customization/sbom/\nsboms:\n  - id: binary-sbom\n    artifacts: binary\n    documents:\n      - \"{{ .ArtifactName }}.spdx.sbom.json\"\n\n# xref: https://goreleaser.com/customization/sign/\nsigns:\n  - cmd: cosign\n    artifacts: checksum\n    signature: '{{ trimsuffix .Env.artifact \".txt\" }}.sig'\n    certificate: '{{ trimsuffix .Env.artifact \".txt\" }}.pem'\n    args:\n      - \"sign-blob\"\n      - \"--output-signature\"\n      - \"${signature}\"\n      - \"--output-certificate\"\n      - \"${certificate}\"\n      - \"${artifact}\"\n    output: true\n\n# xref: https://goreleaser.com/customization/docker/\ndockers:\n  - image_templates:\n      - 'ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-amd64'\n      - 'quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-amd64'\n    use: buildx\n    goos: linux\n    goarch: amd64\n    ids:\n      - binary-linux\n    dockerfile: .release/Dockerfile\n    build_flag_templates:\n      - \"--pull\"\n      - \"--platform=linux/amd64\"\n      - \"--label=org.opencontainers.image.created={{ .Date }}\"\n      - \"--label=org.opencontainers.image.title={{ .ProjectName }}\"\n      - \"--label=org.opencontainers.image.revision={{ .FullCommit }}\"\n      - \"--label=org.opencontainers.image.version={{ .Version }}\"\n      - \"--label=org.opencontainers.image.source={{ .GitURL }}\"\n\n  - image_templates:\n      - 'ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-arm64'\n      - 'quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-arm64'\n    use: buildx\n    goos: linux\n    goarch: arm64\n    ids:\n      - binary-linux\n    dockerfile: .release/Dockerfile\n    build_flag_templates:\n      - \"--pull\"\n      - \"--platform=linux/arm64\"\n      - \"--label=org.opencontainers.image.created={{ .Date }}\"\n      - \"--label=org.opencontainers.image.title={{ .ProjectName }}\"\n      - \"--label=org.opencontainers.image.revision={{ .FullCommit }}\"\n      - \"--label=org.opencontainers.image.version={{ .Version }}\"\n      - \"--label=org.opencontainers.image.source={{ .GitURL }}\"\n\n  - image_templates:\n      - 'ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine-amd64'\n      - 'quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine-amd64'\n    use: buildx\n    goos: linux\n    goarch: amd64\n    ids:\n      - binary-linux\n    dockerfile: .release/alpine.Dockerfile\n    build_flag_templates:\n      - \"--pull\"\n      - \"--platform=linux/amd64\"\n      - \"--label=org.opencontainers.image.created={{ .Date }}\"\n      - \"--label=org.opencontainers.image.title={{ .ProjectName }}\"\n      - \"--label=org.opencontainers.image.revision={{ .FullCommit }}\"\n      - \"--label=org.opencontainers.image.version={{ .Version }}\"\n      - \"--label=org.opencontainers.image.source={{ .GitURL }}\"\n\n  - image_templates:\n      - 'ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine-arm64'\n      - 'quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine-arm64'\n    use: buildx\n    goos: linux\n    goarch: arm64\n    ids:\n      - binary-linux\n    dockerfile: .release/alpine.Dockerfile\n    build_flag_templates:\n      - \"--pull\"\n      - \"--platform=linux/arm64\"\n      - \"--label=org.opencontainers.image.created={{ .Date }}\"\n      - \"--label=org.opencontainers.image.title={{ .ProjectName }}\"\n      - \"--label=org.opencontainers.image.revision={{ .FullCommit }}\"\n      - \"--label=org.opencontainers.image.version={{ .Version }}\"\n      - \"--label=org.opencontainers.image.source={{ .GitURL }}\"\n\n# xref: https://goreleaser.com/customization/docker_manifest/\ndocker_manifests:\n  - name_template: 'ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}'\n    image_templates:\n      - 'ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-amd64'\n      - 'ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-arm64'\n\n  - name_template: 'ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine'\n    image_templates:\n      - 'ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine-amd64'\n      - 'ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine-arm64'\n\n  - name_template: 'quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}'\n    image_templates:\n      - 'quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-amd64'\n      - 'quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-arm64'\n\n  - name_template: 'quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine'\n    image_templates:\n      - 'quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine-amd64'\n      - 'quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine-arm64'\n\n# xref: https://goreleaser.com/customization/docker_sign/\ndocker_signs:\n  - cmd: cosign\n    artifacts: all\n    output: true\n    args:\n      - \"sign\"\n      - \"${artifact}@${digest}\"\n\n# xref: https://goreleaser.com/customization/changelog/\nchangelog:\n  # xref: https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes#configuration-options\n  # xref: https://docs.github.com/en/free-pro-team@latest/rest/releases/releases?apiVersion=2022-11-28#generate-release-notes-content-for-a-release\n  use: github-native\n\n# xref: https://goreleaser.com/customization/release/\nrelease:\n  prerelease: auto\n  header: |\n    ## Installation\n\n    To install `{{ .ProjectName }}`, download one of the pre-built binaries provided for your platform from the artifacts attached to this release.\n\n    For instance, if you are using Linux on an AMD64 architecture:\n\n    ```shell\n    # Download the binary\n    curl -LO https://github.com/{{ .Env.GITHUB_REPOSITORY }}/releases/download/{{ .Tag }}/{{ .ProjectName }}-v{{ .Version }}.linux.amd64\n\n    # Move the binary in to your PATH\n    mv {{ .ProjectName }}-v{{ .Version }}.linux.amd64 /usr/local/bin/{{ .ProjectName }}\n\n    # Make the binary executable\n    chmod +x /usr/local/bin/{{ .ProjectName }}\n    ```\n\n    ### Verify checksums file signature\n\n    The checksums file provided within the artifacts attached to this release is signed using [Cosign](https://docs.sigstore.dev/cosign/overview/) with GitHub OIDC. To validate the signature of this file, run the following commands:\n\n    ```shell\n    # Download the checksums file, certificate and signature\n    curl -LO https://github.com/{{ .Env.GITHUB_REPOSITORY }}/releases/download/{{ .Tag }}/{{ .ProjectName }}-v{{ .Version }}.checksums.txt\n    curl -LO https://github.com/{{ .Env.GITHUB_REPOSITORY }}/releases/download/{{ .Tag }}/{{ .ProjectName }}-v{{ .Version }}.checksums.pem\n    curl -LO https://github.com/{{ .Env.GITHUB_REPOSITORY }}/releases/download/{{ .Tag }}/{{ .ProjectName }}-v{{ .Version }}.checksums.sig\n\n    # Verify the checksums file\n    cosign verify-blob {{ .ProjectName }}-v{{ .Version }}.checksums.txt \\\n      --certificate {{ .ProjectName }}-v{{ .Version }}.checksums.pem \\\n      --signature {{ .ProjectName }}-v{{ .Version }}.checksums.sig \\\n      --certificate-identity-regexp=https://github.com/{{ .Env.GITHUB_REPOSITORY_OWNER }} \\\n      --certificate-oidc-issuer=https://token.actions.githubusercontent.com\n    ```\n\n    ### Verify binary integrity\n\n    To verify the integrity of the downloaded binary, you can utilize the checksums file after having validated its signature:\n\n    ```shell\n    # Verify the binary using the checksums file\n    sha256sum -c {{ .ProjectName }}-v{{ .Version }}.checksums.txt --ignore-missing\n    ```\n\n    ### Verify artifact provenance\n\n    The [SLSA provenance](https://slsa.dev/provenance/v0.2) of the binaries, packages, and SBOMs can be found within the artifacts associated with this release. It is presented through an [in-toto](https://in-toto.io/) link metadata file named `sops-v{{ .Version }}.intoto.jsonl`. To verify the provenance of an artifact, you can utilize the [`slsa-verifier`](https://github.com/slsa-framework/slsa-verifier#artifacts) tool:\n\n    ```shell\n    # Download the metadata file\n    curl -LO  https://github.com/{{ .Env.GITHUB_REPOSITORY }}/releases/download/{{ .Tag }}/sops-v{{ .Version }}.intoto.jsonl\n\n    # Verify the provenance of the artifact\n    slsa-verifier verify-artifact <artifact> \\\n      --provenance-path sops-v{{ .Version }}.intoto.jsonl \\\n      --source-uri github.com/{{ .Env.GITHUB_REPOSITORY }} \\\n      --source-tag {{ .Tag }}\n    ```\n\n    ## Container Images\n    \n    The `{{ .ProjectName }}` binaries are also available as container images, based on Debian (slim) and Alpine Linux. The Debian-based container images include any dependencies which may be required to make use of certain key services, such as GnuPG, AWS KMS, Azure Key Vault, and Google Cloud KMS. The Alpine-based container images are smaller in size, but do not include these dependencies.\n\n    These container images are available for the following architectures: `linux/amd64` and `linux/arm64`.\n\n    ### GitHub Container Registry\n\n    - `ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}`\n    - `ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine`\n\n    ### Quay.io\n\n    - `quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}`\n    - `quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine`\n\n    ### Verify container image signature\n\n    The container images are signed using [Cosign](https://docs.sigstore.dev/cosign/overview/) with GitHub OIDC. To validate the signature of an image, run the following command:\n\n    ```shell\n    cosign verify ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }} \\\n      --certificate-identity-regexp=https://github.com/{{ .Env.GITHUB_REPOSITORY_OWNER }} \\\n      --certificate-oidc-issuer=https://token.actions.githubusercontent.com \\\n      -o text\n    ```\n\n    ### Verify container image provenance\n\n    The container images include [SLSA provenance](https://slsa.dev/provenance/v0.2) attestations. For more information around the verification of this, please refer to the [`slsa-verifier` documentation](https://github.com/slsa-framework/slsa-verifier#containers).\n\n    ## Software Bill of Materials\n\n    The Software Bill of Materials (SBOM) for each binary is accessible within the artifacts enclosed with this release. It is presented as an [SPDX](https://spdx.dev/) JSON file, formatted as `<binary>.spdx.sbom.json`.\n"
        },
        {
          "name": ".release",
          "type": "tree",
          "content": null
        },
        {
          "name": ".sops.yaml",
          "type": "blob",
          "size": 0.1259765625,
          "content": "creation_rules:\n    - pgp: >-\n        FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4,\n        D7229043384BCC60326C6FB9D8720D957C3D3074\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 17.1611328125,
          "content": "Changelog\n=========\n\n3.9.3\n-----\n\nImprovements:\n\n* Dependency updates (#1699, #1703, #1710, #1714, #1715, #1723).\n* Add ``persist-credentials: false`` to checkouts in GitHub workflows (#1704).\n* Tests: use container images from https://github.com/getsops/ci-container-images (#1722).\n\nBugfixes:\n\n* GnuPG: do not incorrectly trim fingerprint in presence of exclamation marks for specfic subkey selection (#1720).\n* ``updatekeys`` subcommand: fix ``--input-type`` CLI flag being ignored (#1721).\n\nProject changes:\n\n* CI dependency updates (#1698, #1708, #1717).\n* Rust dependency updates (#1707, #1716, #1725).\n\n\n3.9.2\n-----\n\nImprovements:\n\n* Dependency updates (#1645, #1649, #1653, #1662, #1686, #1693).\n* Update compiled Protobuf definitions (#1688).\n* Remove unused variables and simplify conditional (##1687).\n\nBugfixes:\n\n* Handle whitespace in Azure Key Vault URLs (#1652).\n* Correctly handle comments during JSON serialization (#1647).\n\nProject changes:\n\n* CI dependency updates (#1644, #1648, #1654, #1664, #1673, #1677, #1685).\n* Rust dependency updates (#1655, #1663, #1670, #1676, #1689).\n* Update and improve Protobuf code generation (#1688).\n\n\n3.9.1\n-----\n\nImprovements:\n\n* Dependency updates (#1550, #1554, #1558, #1562, #1565, #1568, #1575, #1581, #1589, #1593, #1602, #1603, #1618, #1629, #1635, #1639, #1640).\n* Clarify naming of the configuration file in the documentation (#1569).\n* Build with Go 1.22 (#1589).\n* Specify filename of missing file in error messages (#1625).\n* ``updatekeys`` subcommand: show changes in ``shamir_threshold`` (#1609).\n\nBugfixes:\n\n* Fix the URL used for determining the latest SOPS version (#1553).\n* ``updatekeys`` subcommand: actually use option ``--shamir-secret-sharing-threshold`` (#1608).\n* Fix ``--config`` being ignored in subcommands by ``loadConfig`` (#1613).\n* Allow ``edit`` subcommand to create files (#1596).\n* Do not encrypt if a key group is empty, or there are no key groups (#1600).\n* Do not ignore config errors when trying to parse a config file (#1614).\n\nProject changes:\n\n* CI dependency updates (#1551, #1555, #1559, #1564, #1566, #1574, #1584, #1586, #1590, #1592, #1619, #1628, #1634).\n* Improve CI workflows (#1548, #1630).\n* Ignore user-set environment variable ``SOPS_AGE_KEY_FILE`` in tests (#1595).\n* Add example of using Age recipients in ``.sops.yaml`` (#1607).\n* Add linting check for Rust code formatting (#1604).\n* Set Rust version globally via ``rust-toolchain.toml`` for functional tests (#1612).\n* Improve test coverage (#1617).\n* Improve tests (#1622, #1624).\n* Simplify branch rules to check DCO and ``check`` task instead of an explicit list of tasks in the CLI workflow (#1621).\n* Build with Go 1.22 and 1.23 in CI and update Vault to 1.14 (#1531).\n* Build release with Go 1.22 (#1615).\n* Fix Dependabot config for Docker; add Dependabot config for Rust (#1632).\n* Lock Rust package versions for functional tests for improved reproducibility (#1637).\n* Rust dependency updates (#1638).\n\n3.9.0\n-----\nFeatures:\n\n* Add ``--mac-only-encrypted`` to compute MAC only over values which end up encrypted (#973)\n* Allow configuration of indentation for YAML and JSON stores (#1273, #1372)\n* Introduce a ``--pristine`` flag to ``sops exec-env`` (#912)\n* Allow to pass multiple paths to ``sops updatekeys`` (#1274)\n* Allow to override ``fileName`` with different value (#1332)\n* Sort masterkeys according to ``--decryption-order`` (#1345)\n* Add separate subcommands for encryption, decryption, rotating, editing, and setting values (#1391)\n* Add ``filestatus`` command (#545)\n* Add command ``unset`` (#1475)\n* Merge key for key groups and make keys unique (#1493)\n* Support using comments to select parts to encrypt (#974, #1392)\n\nDeprecations:\n\n* Deprecate the ``--background`` option to ``exec-env`` and ``exec-file`` (#1379)\n\nImprovements:\n\n* Warn/fail if the wrong number of arguments is provided (#1342)\n* Warn if more than one command is used (#1388)\n* Dependency updates (#1327, #1328, #1330, #1336, #1334, #1344, #1348, #1354, #1357, #1360, #1373, #1381, #1383, #1385, #1408, #1428, #1429, #1427, #1439, #1454, #1460, #1466, #1489, #1519, #1525, #1528, #1540, #1543, #1545)\n* Build with Go 1.21 (#1427)\n* Improve README.rst (#1339, #1399, #1350)\n* Fix typos (#1337, #1477, #1484)\n* Polish the ``sops help`` output a bit (#1341, #1544)\n* Improve and fix tests (#1346, #1349, #1370, #1390, #1396, #1492)\n* Create a constant for the ``sops`` metadata key (#1398)\n* Refactoring: move extraction of encryption and rotation options to separate functions (#1389)\n\nBug fixes:\n\n* Respect ``aws_profile`` from keygroup config (#1049)\n* Fix a bug where not having a config results in a panic (#1371)\n* Consolidate Flatten/Unflatten pre/post processing (#1356)\n* INI and DotEnv stores: ``shamir_threshold`` is an integer (#1394)\n* Make check whether file contains invalid keys for encryption dependent on output store (#1393)\n* Do not panic if ``updatekeys`` is used with a config that has no creation rules defined (#1506)\n* ``exec-file``: if ``--filename`` is used, use the provided filename without random suffix (#1474)\n* Do not use DotEnv store for ``exec-env``, but specialized environment serializing code (#1436)\n* Decryption: do not fail if no matching ``creation_rule`` is present in config file (#1434)\n\nProject changes:\n\n* CI dependency updates (#1347, #1359, #1376, #1382, #1386, #1425, #1432, #1498, #1503, #1508, #1510, #1516, #1521, #1492, #1534)\n* Adjust Makefile to new goreleaser 6.0.0 release (#1526)\n\n3.8.1\n-----\nImprovements:\n\n* Improve handling of errors when binary store handles bad data (#1289)\n* On macOS, prefer ``XDG_CONFIG_HOME`` over os.UserConfigDir() (#1291)\n* Dependency updates (#1306, #1319, #1325)\n* pgp: better error reporting for missing GPG binary during import of keys (#1286)\n* Fix descriptions of unencrypted-regex and encrypted-regex flags, and ensure unencrypted_regex is considered in config validation (#1300)\n* stores/json: improve error messages when parsing invalid JSON (#1307)\n\nBug fixes:\n\n* pgp: improve handling of GnuPG home dir (#1298)\n* Do not crash if an empty YAML file is encrypted (#1290)\n* Handling of various ignored errors (#1304, #1311)\n* pgp: do not require abs path for ``SOPS_GPG_EXEC`` (#1309)\n* Report key rotation errors (#1317)\n* Ensure wrapping of errors in main package (#1318)\n\nProject changes:\n\n* Enrich AWS authentication documentation (#1272)\n* Add linting for RST and MD files (#1287)\n* Delete SOPS encrypted file we don't have keys for (#1288)\n* CI dependency updates (#1295, #1301)\n* pgp: make error the last return value (#1310)\n* Improve documentation files (#1320)\n\n3.8.0\n-----\nFeatures:\n\n* Support ``--version`` without network requests using ``--disable-version-check`` (#1115)\n* Support ``--input-type`` for updatekeys command (#1116)\n\nImprovements:\n\n* pgp: modernize and improve, and add tests (#1054, #1282)\n* azkv: update SDK to latest, add tests, tidy (#1067, #1092, #1256)\n* age: improve identity loading, add tests, tidy (#1064)\n* kms: AWS SDK V2, allow creds config, add tests (#1065, #1257)\n* gcpkms: update SDK to latest, add tests, tidy (#1072, #1255)\n* hcvault: update API, add tests, tidy (#1085)\n* Do not report version when upstream ``--version`` check fails (#1124)\n* Use GitHub endpoints in ``--version`` command (#1261)\n* Close temporary file before invoking editor to widen support on Windows (#1265)\n* Update dependencies (#1063, #1091, #1147, #1242, #1260, #1264, #1275, #1280, #1283)\n* Deal with various deprecations of dependencies (#1113, #1262)\n\nBug fixes:\n\n* Ensure YAML comments are not displaced (#1069)\n* Ensure default Google credentials can be used again after introduction of ``GOOGLE_CREDENTIALS`` (#1249)\n* Avoid duplicate logging of errors in some key sources (#1146, #1281)\n* Using ``--set`` on a root level key does no longer truncate existing values (#899)\n* Ensure stable order of SOPS parameters in dotenv file (#1101)\n\nProject changes:\n\n* Update Go to 1.20 (#1148)\n* Update rustc functional tests to v1.70.0 (#1234)\n* Remove remaining CircleCI workflow (#1237)\n* Run CLI workflow on main (#1243)\n* Delete obsolete ``validation/`` artifact (#1248)\n* Rename Go module to ``github.com/getsops/sops/v3`` (#1247)\n* Revamp release automation, including (Cosign) signed container images and checksums file, SLSA3 provenance and SBOMs (#1250)\n* Update various bits of documentation (#1244)\n* Add missing ``--encrypt`` flag from Vault example (#1060)\n* Add documentation on how to use age in ``.sops.yaml`` (#1192)\n* Improve Make targets and address various issues (#1258)\n* Ensure clean working tree in CI (#1267)\n* Fix CHANGELOG.rst formatting (#1269)\n* Pin GitHub Actions to full length commit SHA and add CodeQL (#1276)\n* Enable Dependabot for Docker, GitHub Actions and Go Mod (#1277)\n* Generate versioned ``.intoto.jsonl`` (#1278)\n* Update CI dependencies (#1279)\n\n3.7.3\n-----\nChanges:\n\n* Upgrade dependencies (#1024, #1045)\n* Build alpine container in CI (#1018, #1032, #1025)\n* keyservice: accept KeyServiceServer in LocalClient (#1035)\n* Add support for GCP Service Account within ``GOOGLE_CREDENTIALS`` (#953)\n\nBug fixes:\n\n* Upload the correct binary for the linux amd64 build (#1026)\n* Fix bug when specifying multiple age recipients (#966)\n* Allow for empty yaml maps (#908)\n* Limit AWS role names to 64 characters (#1037)\n\n3.7.2\n-----\nChanges:\n\n* README updates (#861, #860)\n* Various test fixes (#909, #906, #1008)\n* Added Linux and Darwin arm64 releases (#911, #891)\n* Upgrade to go v1.17 (#1012)\n* Support SOPS_AGE_KEY environment variable (#1006)\n\nBug fixes:\n\n* Make sure comments in yaml files are not duplicated (#866)\n* Make sure configuration file paths work correctly relative to the config file in us (#853)\n\n3.7.1\n-----\nChanges:\n\n* Security fix\n* Add release workflow (#843)\n* Fix issue where CI wouldn't run against master (#848)\n* Trim extra whitespace around age keys (#846)\n\n3.7.0\n-----\nFeatures:\n\n* Add support for age (#688)\n* Add filename to exec-file (#761)\n\nChanges:\n\n* On failed decryption with GPG, return the error returned by GPG to the sops user (#762)\n* Use yaml.v3 instead of modified yaml.v2 for handling YAML files (#791)\n* Update aws-sdk-go to version v1.37.18 (#823)\n\nProject Changes:\n\n* Switch from TravisCI to Github Actions (#792)\n\n3.6.1\n-----\nFeatures:\n\n* Add support for --unencrypted-regex (#715)\n\nChanges:\n\n* Use keys.openpgp.org instead of gpg.mozilla.org (#732)\n* Upgrade AWS SDK version (#714)\n* Support --input-type for exec-file (#699)\n\nBug fixes:\n\n* Fixes broken Vault tests (#731)\n* Revert \"Add standard newline/quoting behavior to dotenv store\" (#706)\n\n\n3.6.0\n-----\nFeatures:\n\n* Support for encrypting data through the use of Hashicorp Vault (#655)\n* ``sops publish`` now supports ``--recursive`` flag for publishing all files in a directory (#602)\n* ``sops publish`` now supports ``--omit-extensions`` flag for omitting the extension in the destination path (#602)\n* sops now supports JSON arrays of arrays (#642)\n\nImprovements:\n\n* Updates and standardization for the dotenv store (#612, #622)\n* Close temp files after using them for edit command (#685)\n\nBug fixes:\n\n* AWS SDK usage now correctly resolves the ``~/.aws/config`` file (#680)\n* ``sops updatekeys`` now correctly matches config rules (#682)\n* ``sops updatekeys`` now correctly uses the config path cli flag (#672)\n* Partially empty sops config files don't break the use of sops anymore (#662)\n* Fix possible infinite loop in PGP's passphrase prompt call (#690)\n\nProject changes:\n\n* Dockerfile now based off of golang version 1.14 (#649)\n* Push alpine version of docker image to Dockerhub (#609)\n* Push major, major.minor, and major.minor.patch tagged docker images to Dockerhub (#607)\n* Removed out of date contact information (#668)\n* Update authors in the cli help text (#645)\n\n\n3.5.0\n-----\nFeatures:\n\n* ``sops exec-env`` and ``sops exec-file``, two new commands for utilizing sops secrets within a temporary file or env vars\n\nBug fixes:\n\n* Sanitize AWS STS session name, as sops creates it based off of the machines hostname\n* Fix for ``decrypt.Data`` to support ``.ini`` files\n* Various package fixes related to switching to Go Modules\n* Fixes for Vault-related tests running locally and in CI.\n\nProject changes:\n\n* Change to proper use of go modules, changing to primary module name to ``go.mozilla.org/sops/v3``\n* Change tags to requiring a ``v`` prefix.\n* Add documentation for ``sops updatekeys`` command\n\n3.4.0\n-----\nFeatures:\n\n* ``sops publish``, a new command for publishing sops encrypted secrets to S3, GCS, or Hashicorp Vault\n* Support for multiple Azure authentication mechanisms\n* Azure Keyvault support to the sops config file\n* ``encrypted_regex`` option to the sops config file\n\nBug fixes:\n\n* Return non-zero exit code for invalid CLI flags\n* Broken path handling for sops editing on Windows\n* ``go lint/fmt`` violations\n* Check for pgp fingerprint before slicing it\n\nProject changes:\n\n* Build container using golang 1.12\n* Switch to using go modules\n* Hashicorp Vault server in Travis CI build\n* Mozilla Publice License file to repo\n* Replaced expiring test gpg keys\n\n3.3.1\n-----\n\nBug fixes:\n\n* Make sure the pgp key fingerprint is longer than 16 characters before\n  slicing it. (#463)\n* Allow for ``--set`` value to be a string. (#461)\n\nProject changes:\n\n* Using ``develop`` as a staging branch to create releases off of. What\n  is in ``master`` is now the current stable release.\n* Upgrade to using Go 1.12 to build sops\n* Updated all vendored packages\n\n3.3.0\n-----\n\nNew features:\n\n* Multi-document support for YAML files\n* Support referencing AWS KMS keys by their alias\n* Support for INI files\n* Support for AWS CLI profiles\n* Comment support in .env files\n* Added vi to the list of known editors\n* Added a way to specify the GPG key server to use through the\n  SOPS_GPG_KEYSERVER environment variable\n\nBug fixes:\n\n* Now uses $HOME instead of ~ (which didn't work) to find the GPG home\n* Fix panic when vim was not available as an editor, but other\n  alternative editors were\n* Fix issue with AWS KMS Encryption Contexts (#445) with more than one\n  context value failing to decrypt intermittently. Includes an\n  automatic fix for old files affected by this issue.\n\nProject infrastructure changes:\n\n* Added integration tests for AWS KMS\n* Added Code of Conduct\n\n\n3.2.0\n-----\n\n* Added --output flag to write output a file directly instead of\n  through stdout\n* Added support for dotenv files\n\n3.1.1\n-----\n\n* Fix incorrect version number from previous release\n\n3.1.0\n-----\n\n* Add support for Azure Key Service\n\n* Fix bug that prevented JSON escapes in input files from working\n\n3.0.5\n-----\n\n* Prevent files from being encrypted twice\n\n* Fix empty comments not being decrypted correctly\n\n* If keyservicecmd returns an error, log it.\n\n* Initial sops workspace auditing support (still wip)\n\n* Refactor Store interface to reflect operations SOPS performs\n\n3.0.3\n-----\n\n* --set now works with nested data structures and not just simple\n  values\n\n* Changed default log level to warn instead of info\n\n* Avoid creating empty files when using the editor mode to create new\n  files and not making any changes to the example files\n\n* Output unformatted strings when using --extract instead of encoding\n  them to yaml\n\n* Allow forcing binary input and output types from command line flags\n\n* Deprecate filename_regex in favor of path_regex. filename_regex had\n  a bug and matched on the whole file path, when it should have only\n  matched on the file name. path_regex on the other hand is documented\n  to match on the whole file path.\n\n* Add an encrypted-suffix option, the exact opposite of\n  unencrypted-suffix\n\n* Allow specifying unencrypted_suffix and encrypted_suffix rules in\n  the .sops.yaml configuration file\n\n* Introduce key service flag optionally prompting users on\n  encryption/decryption\n\n3.0.1\n-----\n\n* Don't consider io.EOF returned by Decoder.Token as error\n\n* add IsBinary: true to FileHints when encoding with crypto/openpgp \n\n* some improvements to error messages\n\n3.0.0\n-----\n\n* Shamir secret sharing scheme support allows SOPS to require multiple master\n  keys to access a data key and decrypt a file. See ``sops groups -help`` and the\n  documentation in README.\n\n* Keyservice to forward access to a local master key on a socket, similar to\n  gpg-agent. See ``sops keyservice --help`` and the documentation in README.\n\n* Encrypt comments by default\n\n* Support for Google Compute Platform KMS\n\n* Refactor of the store logic to separate the internal representation SOPS\n  has of files from the external representation used in JSON and YAML files\n\n* Reencoding of versions as string on sops 1.X files.\n  **WARNING** this change breaks backward compatibility.\n  SOPS shows an error message with instructions on how to solve\n  this if it happens.\n  \n* Added command to reconfigure the keys used to encrypt/decrypt a file based on the .sops.yaml config file\n\n* Retrieve missing PGP keys from gpg.mozilla.org\n\n* Improved error messages for errors when decrypting files\n\n\n2.0.0\n-----\n\n* [major] rewrite in Go\n\n1.14\n----\n\n* [medium] Support AWS KMS Encryption Contexts\n* [minor] Support insertion in encrypted documents via --set\n* [minor] Read location of gpg binary from SOPS_GPG_EXEC env variables\n\n1.13\n----\n\n* [minor] handle $EDITOR variable with parameters\n\n1.12\n----\n\n* [minor] make sure filename_regex gets applied to file names, not paths\n* [minor] move check of latest version under the -V flag\n* [medium] fix handling of binary data to preserve file integrity\n* [minor] try to use configuration when encrypting existing files\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1875,
          "content": "# Code of Conduct\n\nThis project adheres to the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/main/code-of-conduct.md).\n\nBy participating, you are expected to honor this code.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.7177734375,
          "content": "# Contributing to SOPS\n\nThe SOPS project welcomes contributions from everyone. Here are a few guidelines\nand instructions if you are thinking of helping with the development of SOPS.\n\n## Getting started\n\n- Make sure you have Go 1.19 or greater installed. You can find information on\n  how to install Go [here](https://go.dev/doc/install)\n- Clone the Git repository and switch into SOPS's directory.\n- Run the tests with `make test`. They should all pass.\n- If you modify documentation (RST or MD files), run `make checkdocs` to run\n  [rstcheck](https://pypi.org/project/rstcheck/) and\n  [markdownlint](https://github.com/markdownlint/markdownlint). These should also\n  pass. If you need help in fixing issues, create a pull request (see below) and\n  ask for help.\n- Fork the project on GitHub.\n- Add your fork to Git's remotes:\n   - If you use SSH authentication:\n     `git remote add <your username> git@github.com:<your username>/sops.git`.\n   - Otherwise: `git remote add <your username> https://github.com/<your username>/sops.git`.\n- Make any changes you want to SOPS, commit them, and push them to your fork.\n- **Create a pull request against `main`**, and a maintainer will come by and\n  review your code. They may ask for some changes, and hopefully your\n  contribution will be merged!\n\n## Guidelines\n\n- Unless it's particularly hard, changes that fix a bug should have a regression\n  test to make sure that the bug is not introduced again.\n- New features and changes to existing features should be documented, and, if\n  possible, tested.\n\n## Communication\n\nIf you need any help contributing to SOPS, several maintainers are on the\n[`#sops-dev` channel](https://cloud-native.slack.com/archives/C059800AJBT) on\nthe [CNCF Slack](https://slack.cncf.io).\n"
        },
        {
          "name": "DCO",
          "type": "blob",
          "size": 1.388671875,
          "content": "Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.3330078125,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.388671875,
          "content": "# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nPROJECT             := github.com/getsops/sops/v3\nPROJECT_DIR         := $(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))\nBIN_DIR             := $(PROJECT_DIR)/bin\n\nGO                  := GOPROXY=https://proxy.golang.org go\nGO_TEST_FLAGS       ?= -race -coverprofile=profile.out -covermode=atomic\n\nGITHUB_REPOSITORY   ?= github.com/getsops/sops\n\nSTATICCHECK         := $(BIN_DIR)/staticcheck\nSTATICCHECK_VERSION := latest\n\nSYFT                := $(BIN_DIR)/syft\nSYFT_VERSION        ?= v0.87.0\n\nGORELEASER          := $(BIN_DIR)/goreleaser\nGORELEASER_VERSION  ?= v1.20.0\n\nPROTOC_GO           := $(BIN_DIR)/protoc-gen-go\nPROTOC_GO_VERSION   ?= v1.35.2\n\nPROTOC_GO_GRPC      := $(BIN_DIR)/protoc-gen-go-grpc\nPROTOC_GO_GRPC_VERSION ?= v1.5.1\n\nRSTCHECK            := $(shell command -v rstcheck)\nMARKDOWNLINT        := $(shell command -v mdl)\n\nexport PATH := $(BIN_DIR):$(PATH)\n\n.PHONY: all\nall: test vet generate install functional-tests\n\n.PHONY: origin-build\norigin-build: test vet generate install functional-tests-all\n\n.PHONY: install\ninstall:\n\t$(GO) install github.com/getsops/sops/v3/cmd/sops\n\n.PHONY: staticcheck\nstaticcheck: install-staticcheck\n\t$(STATICCHECK) ./...\n\n.PHONY: vendor\nvendor:\n\t$(GO) mod tidy\n\t$(GO) mod vendor\n\n.PHONY: vet\nvet:\n\t$(GO) vet ./...\n\n\n.PHONY: checkdocs\ncheckdocs: checkrst checkmd\n\n.PHONY: checkrst\nRST_FILES=$(shell find . -name '*.rst' | grep -v /vendor/ | sort)\ncheckrst: $(RST_FILES)\n\t@if [ \"$(RSTCHECK)\" == \"\" ]; then echo \"Need rstcheck to lint RST files. Install rstcheck from your system package repository or from PyPI (https://pypi.org/project/rstcheck/).\"; exit 1; fi\n\t$(RSTCHECK) --report-level warning $^\n\n.PHONY: checkmd\nMD_FILES=$(shell find . -name '*.md' | grep -v /vendor/ | sort)\ncheckmd: $(MD_FILES)\n\t@if [ \"$(MARKDOWNLINT)\" == \"\" ]; then echo \"Need markdownlint to lint RST files. Install markdownlint from your system package repository or from https://github.com/markdownlint/markdownlint.\"; exit 1; fi\n\t$(MARKDOWNLINT) $^\n\n.PHONY: test\ntest: vendor\n\tgpg --import pgp/sops_functional_tests_key.asc 2>&1 1>/dev/null || exit 0\n\tunset SOPS_AGE_KEY_FILE; LANG=en_US.UTF-8 $(GO) test $(GO_TEST_FLAGS) ./...\n\n.PHONY: showcoverage\nshowcoverage: test\n\t$(GO) tool cover -html=profile.out\n\n.PHONY: generate\ngenerate: install-protoc-go install-protoc-go-grpc keyservice/keyservice.pb.go\n\t$(GO) generate\n\n%.pb.go: %.proto\n\tprotoc --plugin gen-go=$(PROTOC_GO) --plugin gen-go-grpc=$(PLUGIN_GO_GRPC) --go-grpc_opt=require_unimplemented_servers=false --go-grpc_out=. --go_out=. $<\n\n.PHONY: functional-tests\nfunctional-tests:\n\t$(GO) build -o functional-tests/sops github.com/getsops/sops/v3/cmd/sops\n\tcd functional-tests && cargo test\n\n.PHONY: functional-tests-all\nfunctional-tests-all:\n\t$(GO) build -o functional-tests/sops github.com/getsops/sops/v3/cmd/sops\n\t# Ignored tests are ones that require external services (e.g. AWS KMS)\n\t# \tTODO: Once `--include-ignored` lands in rust stable, switch to that.\n\tcd functional-tests && cargo test && cargo test -- --ignored\n\n.PHONY: release-snapshot\nrelease-snapshot: install-goreleaser install-syft\n\tGITHUB_REPOSITORY=$(GITHUB_REPOSITORY) $(GORELEASER) release --clean --snapshot --skip=sign\n\n.PHONY: clean\nclean:\n\trm -rf $(BIN_DIR) profile.out functional-tests/sops\n\n.PHONY: install-staticcheck\ninstall-staticcheck:\n\t$(call go-install-tool,$(STATICCHECK),honnef.co/go/tools/cmd/staticcheck@$(STATICCHECK_VERSION),$(STATICCHECK_VERSION))\n\n.PHONY: install-goreleaser\ninstall-goreleaser:\n\t$(call go-install-tool,$(GORELEASER),github.com/goreleaser/goreleaser@$(GORELEASER_VERSION),$(GORELEASER_VERSION))\n\n.PHONY: install-syft\ninstall-syft:\n\t$(call go-install-tool,$(SYFT),github.com/anchore/syft/cmd/syft@$(SYFT_VERSION),$(SYFT_VERSION))\n\n.PHONY: install-protoc-go\ninstall-protoc-go:\n\t$(call go-install-tool,$(PROTOC_GO),google.golang.org/protobuf/cmd/protoc-gen-go@$(PROTOC_GO_VERSION),$(PROTOC_GO_VERSION))\n\n.PHONY: install-protoc-go-grpc\ninstall-protoc-go-grpc:\n\t$(call go-install-tool,$(PROTOC_GO_GRPC),google.golang.org/grpc/cmd/protoc-gen-go-grpc@$(PROTOC_GO_GRPC_VERSION),$(PROTOC_GO_GRPC_VERSION))\n\n# go-install-tool will 'go install' any package $2 and install it to $1.\ndefine go-install-tool\n@[ -f $(1)-$(3) ] || { \\\nset -e ;\\\nGOBIN=$$(dirname $(1)) go install $(2) ;\\\ntouch $(1)-$(3) ;\\\n}\nendef\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 72.966796875,
          "content": "SOPS: Secrets OPerationS\n========================\n\n**SOPS** is an editor of encrypted files that supports YAML, JSON, ENV, INI and BINARY\nformats and encrypts with AWS KMS, GCP KMS, Azure Key Vault, age, and PGP.\n(`demo <https://www.youtube.com/watch?v=YTEVyLXFiq0>`_)\n\n.. image:: https://i.imgur.com/X0TM5NI.gif\n\n------------\n\n.. image:: https://pkg.go.dev/badge/github.com/getsops/sops/v3.svg\n    :target: https://pkg.go.dev/github.com/getsops/sops/v3\n\nDownload\n--------\n\nStable release\n~~~~~~~~~~~~~~\nBinaries and packages of the latest stable release are available at `https://github.com/getsops/sops/releases <https://github.com/getsops/sops/releases>`_.\n\nDevelopment branch\n~~~~~~~~~~~~~~~~~~\nFor the adventurous, unstable features are available in the `main` branch, which you can install from source:\n\n.. code:: bash\n\n    $ mkdir -p $GOPATH/src/github.com/getsops/sops/\n    $ git clone https://github.com/getsops/sops.git $GOPATH/src/github.com/getsops/sops/\n    $ cd $GOPATH/src/github.com/getsops/sops/\n    $ make install\n\n(requires Go >= 1.19)\n\nIf you don't have Go installed, set it up with:\n\n.. code:: bash\n\n    $ {apt,yum,brew} install golang\n    $ echo 'export GOPATH=~/go' >> ~/.bashrc\n    $ source ~/.bashrc\n    $ mkdir $GOPATH\n\nOr whatever variation of the above fits your system and shell.\n\nTo use **SOPS** as a library, take a look at the `decrypt package <https://pkg.go.dev/github.com/getsops/sops/v3/decrypt>`_.\n\n.. sectnum::\n.. contents:: Table of Contents\n\nUsage\n-----\n\nFor a quick presentation of SOPS, check out this Youtube tutorial:\n\n.. image:: https://img.youtube.com/vi/V2PRhxphH2w/0.jpg\n   :target: https://www.youtube.com/watch?v=V2PRhxphH2w\n\nIf you're using AWS KMS, create one or multiple master keys in the IAM console\nand export them, comma separated, in the **SOPS_KMS_ARN** env variable. It is\nrecommended to use at least two master keys in different regions.\n\n.. code:: bash\n\n    export SOPS_KMS_ARN=\"arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e,arn:aws:kms:ap-southeast-1:656532927350:key/9006a8aa-0fa6-4c14-930e-a2dfb916de1d\"\n\nSOPS uses `aws-sdk-go-v2 <https://github.com/aws/aws-sdk-go-v2>`_ to communicate with AWS KMS. It will automatically\nread the credentials from the ``~/.aws/credentials`` file which can be created with the ``aws configure`` command.\n\nAn example of the ``~/.aws/credentials`` file is shown below:\n\n.. code:: sh\n\n    $ cat ~/.aws/credentials\n    [default]\n    aws_access_key_id = AKI.....\n    aws_secret_access_key = mw......\n\nIn addition to the ``~/.aws/credentials`` file, you can also use the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``\nenvironment variables to specify your credentials:\n\n.. code:: bash\n\n    export AWS_ACCESS_KEY_ID=\"AKI......\"\n    export AWS_SECRET_ACCESS_KEY=\"mw......\"\n\nFor more information and additional environment variables, see\n`specifying credentials <https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/#specifying-credentials>`_.\n\nIf you want to use PGP, export the fingerprints of the public keys, comma\nseparated, in the **SOPS_PGP_FP** env variable.\n\n.. code:: bash\n\n    export SOPS_PGP_FP=\"85D77543B3D624B63CEA9E6DBC17301B491B3F21,E60892BB9BD89A69F759A1A0A3D652173B763E8F\"\n\nNote: you can use both PGP and KMS simultaneously.\n\nThen simply call ``sops edit`` with a file path as argument. It will handle the\nencryption/decryption transparently and open the cleartext file in an editor\n\n.. code:: sh\n\n    $ sops edit mynewtestfile.yaml\n    mynewtestfile.yaml doesn't exist, creating it.\n    please wait while an encryption key is being generated and stored in a secure fashion\n    file written to mynewtestfile.yaml\n\nEditing will happen in whatever ``$EDITOR`` is set to, or, if it's not set, in vim.\nKeep in mind that SOPS will wait for the editor to exit, and then try to reencrypt\nthe file. Some GUI editors (atom, sublime) spawn a child process and then exit\nimmediately. They usually have an option to wait for the main editor window to be\nclosed before exiting. See `#127 <https://github.com/getsops/sops/issues/127>`_ for\nmore information.\n\nThe resulting encrypted file looks like this:\n\n.. code:: yaml\n\n    myapp1: ENC[AES256_GCM,data:Tr7o=,iv:1=,aad:No=,tag:k=]\n    app2:\n        db:\n            user: ENC[AES256_GCM,data:CwE4O1s=,iv:2k=,aad:o=,tag:w==]\n            password: ENC[AES256_GCM,data:p673w==,iv:YY=,aad:UQ=,tag:A=]\n        # private key for secret operations in app2\n        key: |-\n            ENC[AES256_GCM,data:Ea3kL5O5U8=,iv:DM=,aad:FKA=,tag:EA==]\n    an_array:\n        - ENC[AES256_GCM,data:v8jQ=,iv:HBE=,aad:21c=,tag:gA==]\n        - ENC[AES256_GCM,data:X10=,iv:o8=,aad:CQ=,tag:Hw==]\n        - ENC[AES256_GCM,data:KN=,iv:160=,aad:fI4=,tag:tNw==]\n    sops:\n        kms:\n            - created_at: 1441570389.775376\n              enc: CiC....Pm1Hm\n              arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e\n            - created_at: 1441570391.925734\n              enc: Ci...awNx\n              arn: arn:aws:kms:ap-southeast-1:656532927350:key/9006a8aa-0fa6-4c14-930e-a2dfb916de1d\n        pgp:\n            - fp: 85D77543B3D624B63CEA9E6DBC17301B491B3F21\n              created_at: 1441570391.930042\n              enc: |\n                  -----BEGIN PGP MESSAGE-----\n                  hQIMA0t4uZHfl9qgAQ//UvGAwGePyHuf2/zayWcloGaDs0MzI+zw6CmXvMRNPUsA\n                  ...=oJgS\n                  -----END PGP MESSAGE-----\n\nA copy of the encryption/decryption key is stored securely in each KMS and PGP\nblock. As long as one of the KMS or PGP method is still usable, you will be able\nto access your data.\n\nTo decrypt a file in a ``cat`` fashion, use the ``-d`` flag:\n\n.. code:: sh\n\n    $ sops decrypt mynewtestfile.yaml\n\nSOPS encrypted files contain the necessary information to decrypt their content.\nAll a user of SOPS needs is valid AWS credentials and the necessary\npermissions on KMS keys.\n\nGiven that, the only command a SOPS user needs is:\n\n.. code:: sh\n\n    $ sops edit <file>\n\n`<file>` will be opened, decrypted, passed to a text editor (vim by default),\nencrypted if modified, and saved back to its original location. All of these\nsteps, apart from the actual editing, are transparent to the user.\n\nThe order in which available decryption methods are tried can be specified with\n``--decryption-order`` option or **SOPS_DECRYPTION_ORDER** environment variable\nas a comma separated list. The default order is ``age,pgp``. Offline methods are\ntried first and then the remaining ones.\n\nTest with the dev PGP key\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to test **SOPS** without having to do a bunch of setup, you can use\nthe example files and pgp key provided with the repository::\n\n    $ git clone https://github.com/getsops/sops.git\n    $ cd sops\n    $ gpg --import pgp/sops_functional_tests_key.asc\n    $ sops edit example.yaml\n\nThis last step will decrypt ``example.yaml`` using the test private key.\n\nEncrypting with GnuPG subkeys\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to encrypt with specific GnuPG subkeys, it does not suffice to provide the\nexact key ID of the subkey to SOPS, since GnuPG might use *another* subkey instead\nto encrypt the file key with. To force GnuPG to use a specific subkey, you need to\nappend ``!`` to the key's fingerprint.\n\n.. code:: yaml\n\n    creation_rules:\n        - pgp: >-\n            85D77543B3D624B63CEA9E6DBC17301B491B3F21!,\n            E60892BB9BD89A69F759A1A0A3D652173B763E8F!\n\nPlease note that this is only passed on correctly to GnuPG since SOPS 3.9.3.\n\nEncrypting using age\n~~~~~~~~~~~~~~~~~~~~\n\n`age <https://age-encryption.org/>`_ is a simple, modern, and secure tool for\nencrypting files. It's recommended to use age over PGP, if possible.\n\nYou can encrypt a file for one or more age recipients (comma separated) using\nthe ``--age`` option or the **SOPS_AGE_RECIPIENTS** environment variable:\n\n.. code:: sh\n\n    $ sops encrypt --age age1yt3tfqlfrwdwx0z0ynwplcr6qxcxfaqycuprpmy89nr83ltx74tqdpszlw test.yaml > test.enc.yaml\n\nWhen decrypting a file with the corresponding identity, SOPS will look for a\ntext file name ``keys.txt`` located in a ``sops`` subdirectory of your user\nconfiguration directory. On Linux, this would be ``$XDG_CONFIG_HOME/sops/age/keys.txt``.\nIf ``$XDG_CONFIG_HOME`` is not set ``$HOME/.config/sops/age/keys.txt`` is used instead.\nOn macOS, this would be ``$HOME/Library/Application Support/sops/age/keys.txt``. On\nWindows, this would be ``%AppData%\\sops\\age\\keys.txt``. You can specify the location\nof this file manually by setting the environment variable **SOPS_AGE_KEY_FILE**.\nAlternatively, you can provide the key(s) directly by setting the **SOPS_AGE_KEY**\nenvironment variable.\n\nThe contents of this key file should be a list of age X25519 identities, one\nper line. Lines beginning with ``#`` are considered comments and ignored. Each\nidentity will be tried in sequence until one is able to decrypt the data.\n\nEncrypting with SSH keys via age is not yet supported by SOPS.\n\nA list of age recipients can be added to the ``.sops.yaml``:\n\n.. code:: yaml\n\n    creation_rules:\n        - age: >-\n            age1s3cqcks5genc6ru8chl0hkkd04zmxvczsvdxq99ekffe4gmvjpzsedk23c,\n            age1qe5lxzzeppw5k79vxn3872272sgy224g2nzqlzy3uljs84say3yqgvd0sw\n\nIt is also possible to use ``updatekeys``, when adding or removing age recipients. For example:\n\n.. code:: sh\n\n  $ sops updatekeys secret.enc.yaml\n  2022/02/09 16:32:02 Syncing keys for file /iac/solution1/secret.enc.yaml\n  The following changes will be made to the file's groups:\n  Group 1\n      age1s3cqcks5genc6ru8chl0hkkd04zmxvczsvdxq99ekffe4gmvjpzsedk23c\n  +++ age1qe5lxzzeppw5k79vxn3872272sgy224g2nzqlzy3uljs84say3yqgvd0sw\n  Is this okay? (y/n):y\n  2022/02/09 16:32:04 File /iac/solution1/secret.enc.yaml synced with new keys\n  \nEncrypting using GCP KMS\n~~~~~~~~~~~~~~~~~~~~~~~~\nGCP KMS uses `Application Default Credentials\n<https://developers.google.com/identity/protocols/application-default-credentials>`_.\nIf you already logged in using\n\n.. code:: sh\n\n    $ gcloud auth login\n\nyou can enable application default credentials using the sdk:\n\n.. code:: sh\n\n    $ gcloud auth application-default login\n\nEncrypting/decrypting with GCP KMS requires a KMS ResourceID. You can use the\ncloud console the get the ResourceID or you can create one using the gcloud\nsdk:\n\n.. code:: sh\n\n    $ gcloud kms keyrings create sops --location global\n    $ gcloud kms keys create sops-key --location global --keyring sops --purpose encryption\n    $ gcloud kms keys list --location global --keyring sops\n\n    # you should see\n    NAME                                                                   PURPOSE          PRIMARY_STATE\n    projects/my-project/locations/global/keyRings/sops/cryptoKeys/sops-key ENCRYPT_DECRYPT  ENABLED\n\nNow you can encrypt a file using::\n\n    $ sops encrypt --gcp-kms projects/my-project/locations/global/keyRings/sops/cryptoKeys/sops-key test.yaml > test.enc.yaml\n\nAnd decrypt it using::\n\n     $ sops decrypt test.enc.yaml\n\nEncrypting using Azure Key Vault\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe Azure Key Vault integration uses the\n`default credential chain <https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/azidentity#DefaultAzureCredential>`_\nwhich tries several authentication methods, in this order:\n\n1. `Environment credentials <https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/azidentity#EnvironmentCredential>`_\n\n   i. Service Principal with Client Secret\n   ii. Service Principal with Certificate\n   iii. User with username and password\n   iv. Configuration for multi-tenant applications\n\n2. `Workload Identity credentials <https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/azidentity#WorkloadIdentityCredential>`_\n3. `Managed Identity credentials <https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/azidentity#ManagedIdentityCredential>`_\n4. `Azure CLI credentials <https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/azidentity#AzureCLICredential>`_\n\nFor example, you can use a Service Principal with the following environment variables:\n\n.. code:: bash\n\n    AZURE_TENANT_ID\n    AZURE_CLIENT_ID\n    AZURE_CLIENT_SECRET\n\nYou can create a Service Principal using the CLI like this:\n\n.. code:: sh\n\n    $ az ad sp create-for-rbac -n my-keyvault-sp\n\n    {\n        \"appId\": \"<some-uuid>\",\n        \"displayName\": \"my-keyvault-sp\",\n        \"name\": \"http://my-keyvault-sp\",\n        \"password\": \"<random-string>\",\n        \"tenant\": \"<tenant-uuid>\"\n    }\n\nThe `appId` is the client ID, and the `password` is the client secret.\n\nEncrypting/decrypting with Azure Key Vault requires the resource identifier for\na key. This has the following form::\n\n    https://${VAULT_URL}/keys/${KEY_NAME}/${KEY_VERSION}\n\nTo create a Key Vault and assign your service principal permissions on it\nfrom the commandline:\n\n.. code:: sh\n\n    # Create a resource group if you do not have one:\n    $ az group create --name sops-rg --location westeurope\n    # Key Vault names are globally unique, so generate one:\n    $ keyvault_name=sops-$(uuidgen | tr -d - | head -c 16)\n    # Create a Vault, a key, and give the service principal access:\n    $ az keyvault create --name $keyvault_name --resource-group sops-rg --location westeurope\n    $ az keyvault key create --name sops-key --vault-name $keyvault_name --protection software --ops encrypt decrypt\n    $ az keyvault set-policy --name $keyvault_name --resource-group sops-rg --spn $AZURE_CLIENT_ID \\\n        --key-permissions encrypt decrypt\n    # Read the key id:\n    $ az keyvault key show --name sops-key --vault-name $keyvault_name --query key.kid\n\n    https://sops.vault.azure.net/keys/sops-key/some-string\n\nNow you can encrypt a file using::\n\n    $ sops encrypt --azure-kv https://sops.vault.azure.net/keys/sops-key/some-string test.yaml > test.enc.yaml\n\nAnd decrypt it using::\n\n    $ sops decrypt test.enc.yaml\n\n\nEncrypting and decrypting from other programs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen using ``sops`` in scripts or from other programs, there are often situations where you do not want to write\nencrypted or decrypted data to disk. The best way to avoid this is to pass data to SOPS via stdin, and to let\nSOPS write data to stdout. By default, the encrypt and decrypt operations write data to stdout already. To pass\ndata via stdin, you need to pass ``/dev/stdin`` as the input filename. Please note that this only works on\nUnix-like operating systems such as macOS and Linux. On Windows, you have to use named pipes.\n\nTo decrypt data, you can simply do:\n\n.. code:: sh\n\n\t$ cat encrypted-data | sops decrypt /dev/stdin > decrypted-data\n\nTo control the input and output format, pass ``--input-type`` and ``--output-type`` as appropriate. By default,\n``sops`` determines the input and output format from the provided filename, which is ``/dev/stdin`` here, and\nthus will use the binary store which expects JSON input and outputs binary data on decryption.\n\nFor example, to decrypt YAML data and obtain the decrypted result as YAML, use:\n\n.. code:: sh\n\n\t$ cat encrypted-data | sops decrypt --input-type yaml --output-type yaml /dev/stdin > decrypted-data\n\nTo encrypt, it is important to note that SOPS also uses the filename to look up the correct creation rule from\n``.sops.yaml``. Likely ``/dev/stdin`` will not match a creation rule, or only match the fallback rule without\n``path_regex``, which is usually not what you want. For that, ``sops`` provides the ``--filename-override``\nparameter which allows you to tell SOPS which filename to use to match creation rules:\n\n.. code:: sh\n\n\t$ echo 'foo: bar' | sops encrypt --filename-override path/filename.sops.yaml /dev/stdin > encrypted-data\n\nSOPS will find a matching creation rule for ``path/filename.sops.yaml`` in ``.sops.yaml`` and use that one to\nencrypt the data from stdin. This filename will also be used to determine the input and output store. As always,\nthe input store type can be adjusted by passing ``--input-type``, and the output store type by passing\n``--output-type``:\n\n.. code:: sh\n\n\t$ echo foo=bar | sops encrypt --filename-override path/filename.sops.yaml --input-type dotenv /dev/stdin > encrypted-data\n\n\nEncrypting using Hashicorp Vault\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe assume you have an instance (or more) of Vault running and you have privileged access to it. For instructions on how to deploy a secure instance of Vault, refer to Hashicorp's official documentation.\n\nTo easily deploy Vault locally: (DO NOT DO THIS FOR PRODUCTION!!!) \n\n.. code:: sh\n\n    $ docker run -d -p8200:8200 vault:1.2.0 server -dev -dev-root-token-id=toor\n\n\n.. code:: sh\n\n    $ # Substitute this with the address Vault is running on\n    $ export VAULT_ADDR=http://127.0.0.1:8200 \n\n    $ # this may not be necessary in case you previously used `vault login` for production use\n    $ export VAULT_TOKEN=toor \n    \n    $ # to check if Vault started and is configured correctly\n    $ vault status\n    Key             Value\n    ---             -----\n    Seal Type       shamir\n    Initialized     true\n    Sealed          false\n    Total Shares    1\n    Threshold       1\n    Version         1.2.0\n    Cluster Name    vault-cluster-618cc902\n    Cluster ID      e532e461-e8f0-1352-8a41-fc7c11096908\n    HA Enabled      false\n\n    $ # It is required to enable a transit engine if not already done (It is suggested to create a transit engine specifically for SOPS, in which it is possible to have multiple keys with various permission levels)\n    $ vault secrets enable -path=sops transit\n    Success! Enabled the transit secrets engine at: sops/\n\n    $ # Then create one or more keys\n    $ vault write sops/keys/firstkey type=rsa-4096\n    Success! Data written to: sops/keys/firstkey\n\n    $ vault write sops/keys/secondkey type=rsa-2048\n    Success! Data written to: sops/keys/secondkey\n\n    $ vault write sops/keys/thirdkey type=chacha20-poly1305\n    Success! Data written to: sops/keys/thirdkey\n\n    $ sops encrypt --hc-vault-transit $VAULT_ADDR/v1/sops/keys/firstkey vault_example.yml\n\n    $ cat <<EOF > .sops.yaml\n    creation_rules:\n        - path_regex: \\.dev\\.yaml$\n          hc_vault_transit_uri: \"$VAULT_ADDR/v1/sops/keys/secondkey\"\n        - path_regex: \\.prod\\.yaml$\n          hc_vault_transit_uri: \"$VAULT_ADDR/v1/sops/keys/thirdkey\"\n    EOF\n\n    $ sops encrypt --verbose prod/raw.yaml > prod/encrypted.yaml\n\nAdding and removing keys\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen creating new files, ``sops`` uses the PGP, KMS and GCP KMS defined in the\ncommand line arguments ``--kms``, ``--pgp``, ``--gcp-kms`` or ``--azure-kv``, or from\nthe environment variables ``SOPS_KMS_ARN``, ``SOPS_PGP_FP``, ``SOPS_GCP_KMS_IDS``,\n``SOPS_AZURE_KEYVAULT_URLS``. That information is stored in the file under the\n``sops`` section, such that decrypting files does not require providing those\nparameters again.\n\nMaster PGP and KMS keys can be added and removed from a ``sops`` file in one of\nthree ways:\n\n1. By using a ``.sops.yaml`` file and the ``updatekeys`` command.\n\n2. By using command line flags.\n\n3. By editing the file directly.\n\nThe SOPS team recommends the ``updatekeys`` approach.\n\n\n``updatekeys`` command\n**********************\n\nThe ``updatekeys`` command uses the `.sops.yaml <#using-sops-yaml-conf-to-select-kms-pgp-for-new-files>`_\nconfiguration file to update (add or remove) the corresponding secrets in the\nencrypted file. Note that the example below uses the\n`Block Scalar yaml construct <https://yaml-multiline.info/>`_ to build a space\nseparated list.\n\n.. code:: yaml\n\n    creation_rules:\n        - pgp: >-\n            85D77543B3D624B63CEA9E6DBC17301B491B3F21,\n            FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4\n\n.. code:: sh\n\n    $ sops updatekeys test.enc.yaml\n\nSOPS will prompt you with the changes to be made. This interactivity can be\ndisabled by supplying the ``-y`` flag.\n\n``rotate`` command\n******************\n\nThe ``rotate`` command generates a new data encryption key and reencrypt all values\nwith the new key. At te same time, the command line flag ``--add-kms``, ``--add-pgp``,\n``--add-gcp-kms``, ``--add-azure-kv``, ``--rm-kms``, ``--rm-pgp``, ``--rm-gcp-kms``\nand ``--rm-azure-kv`` can be used to add and remove keys from a file. These flags use\nthe comma separated syntax as the ``--kms``, ``--pgp``, ``--gcp-kms`` and ``--azure-kv``\narguments when creating new files.\n\nUse ``updatekeys`` if you want to add a key without rotating the data key.\n\n.. code:: sh\n\n    # add a new pgp key to the file and rotate the data key\n    $ sops rotate -i --add-pgp 85D77543B3D624B63CEA9E6DBC17301B491B3F21 example.yaml\n\n    # remove a pgp key from the file and rotate the data key\n    $ sops rotate -i --rm-pgp 85D77543B3D624B63CEA9E6DBC17301B491B3F21 example.yaml\n\n\nDirect Editing\n**************\n\nAlternatively, invoking ``sops edit`` with the flag **-s** will display the master keys\nwhile editing. This method can be used to add or remove ``kms`` or ``pgp`` keys under the\n``sops`` section.\n\nFor example, to add a KMS master key to a file, add the following entry while\nediting:\n\n.. code:: yaml\n\n    sops:\n        kms:\n            - arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e\n\nAnd, similarly, to add a PGP master key, we add its fingerprint:\n\n.. code:: yaml\n\n    sops:\n        pgp:\n            - fp: 85D77543B3D624B63CEA9E6DBC17301B491B3F21\n\nWhen the file is saved, SOPS will update its metadata and encrypt the data key\nwith the freshly added master keys. The removed entries are simply deleted from\nthe file.\n\nWhen removing keys, it is recommended to rotate the data key using ``-r``,\notherwise, owners of the removed key may have add access to the data key in the\npast.\n\nKMS AWS Profiles\n~~~~~~~~~~~~~~~~\n\nIf you want to use a specific profile, you can do so with `aws_profile`:\n\n.. code:: yaml\n\n    sops:\n        kms:\n            - arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e\n              aws_profile: foo\n\nIf no AWS profile is set, default credentials will be used.\n\nSimilarly the `--aws-profile` flag can be set with the command line with any of the KMS commands.\n\n\nAssuming roles and using KMS in various AWS accounts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSOPS has the ability to use KMS in multiple AWS accounts by assuming roles in\neach account. Being able to assume roles is a nice feature of AWS that allows\nadministrators to establish trust relationships between accounts, typically from\nthe most secure account to the least secure one. In our use-case, we use roles\nto indicate that a user of the Master AWS account is allowed to make use of KMS\nmaster keys in development and staging AWS accounts. Using roles, a single file\ncan be encrypted with KMS keys in multiple accounts, thus increasing reliability\nand ease of use.\n\nYou can use keys in various accounts by tying each KMS master key to a role that\nthe user is allowed to assume in each account. The `IAM roles\n<http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html>`_\ndocumentation has full details on how this needs to be configured on AWS's side.\n\nFrom the point of view of SOPS, you only need to specify the role a KMS key\nmust assume alongside its ARN, as follows:\n\n.. code:: yaml\n\n    sops:\n        kms:\n            - arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e\n              role: arn:aws:iam::927034868273:role/sops-dev-xyz\n\nThe role must have permission to call Encrypt and Decrypt using KMS. An example\npolicy is shown below.\n\n.. code:: json\n\n    {\n      \"Sid\": \"Allow use of the key\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"kms:Encrypt\",\n        \"kms:Decrypt\",\n        \"kms:ReEncrypt*\",\n        \"kms:GenerateDataKey*\",\n        \"kms:DescribeKey\"\n      ],\n      \"Resource\": \"*\",\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam::927034868273:role/sops-dev-xyz\"\n        ]\n      }\n    }\n\nYou can specify a role in the ``--kms`` flag and ``SOPS_KMS_ARN`` variable by\nappending it to the ARN of the master key, separated by a **+** sign::\n\n    <KMS ARN>+<ROLE ARN>\n    arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500+arn:aws:iam::927034868273:role/sops-dev-xyz\n\nAWS KMS Encryption Context\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSOPS has the ability to use `AWS KMS key policy and encryption context\n<http://docs.aws.amazon.com/kms/latest/developerguide/encryption-context.html>`_\nto refine the access control of a given KMS master key.\n\nWhen creating a new file, you can specify the encryption context in the\n``--encryption-context`` flag by comma separated list of key-value pairs:\n\n.. code:: sh\n\n    $ sops edit --encryption-context Environment:production,Role:web-server test.dev.yaml\n\nThe format of the Encrypt Context string is ``<EncryptionContext Key>:<EncryptionContext Value>,<EncryptionContext Key>:<EncryptionContext Value>,...``\n\nThe encryption context will be stored in the file metadata and does\nnot need to be provided at decryption.\n\nEncryption contexts can be used in conjunction with KMS Key Policies to define\nroles that can only access a given context. An example policy is shown below:\n\n.. code:: json\n\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::111122223333:role/RoleForExampleApp\"\n      },\n      \"Action\": \"kms:Decrypt\",\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"kms:EncryptionContext:AppName\": \"ExampleApp\",\n          \"kms:EncryptionContext:FilePath\": \"/var/opt/secrets/\"\n        }\n      }\n    }\n\nKey Rotation\n~~~~~~~~~~~~\n\nIt is recommended to renew the data key on a regular basis. ``sops`` supports key\nrotation via the ``rotate`` command. Invoking it on an existing file causes ``sops``\nto reencrypt the file with a new data key, which is then encrypted with the various\nKMS and PGP master keys defined in the file.\n\nAdd the ``-i`` option to write the rotated file back, instead of printing it to\nstdout.\n\n.. code:: sh\n\n    $ sops rotate example.yaml\n\nUsing .sops.yaml conf to select KMS, PGP and age for new files\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt is often tedious to specify the ``--kms`` ``--gcp-kms`` ``--pgp`` and ``--age`` parameters for creation\nof all new files. If your secrets are stored under a specific directory, like a\n``git`` repository, you can create a ``.sops.yaml`` configuration file at the root\ndirectory to define which keys are used for which filename.\n\n.. note::\n\n  The file needs to be named ``.sops.yaml``. Other names (i.e. ``.sops.yml``) won't be automatically\n  discovered by SOPS. You'll need to pass the ``--config .sops.yml`` option for it to be picked up.\n\nLet's take an example:\n\n* file named **something.dev.yaml** should use one set of KMS A, PGP and age\n* file named **something.prod.yaml** should use another set of KMS B, PGP and age\n* other files use a third set of KMS C and PGP\n* all live under **mysecretrepo/something.{dev,prod,gcp}.yaml**\n\nUnder those circumstances, a file placed at **mysecretrepo/.sops.yaml**\ncan manage the three sets of configurations for the three types of files:\n\n.. code:: yaml\n\n    # creation rules are evaluated sequentially, the first match wins\n    creation_rules:\n        # upon creation of a file that matches the pattern *.dev.yaml,\n        # KMS set A as well as PGP and age is used\n        - path_regex: \\.dev\\.yaml$\n          kms: 'arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500,arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e+arn:aws:iam::361527076523:role/hiera-sops-prod'\n          pgp: 'FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4'\n          age: 'age129h70qwx39k7h5x6l9hg566nwm53527zvamre8vep9e3plsm44uqgy8gla'\n\n        # prod files use KMS set B in the PROD IAM, PGP and age\n        - path_regex: \\.prod\\.yaml$\n          kms: 'arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e+arn:aws:iam::361527076523:role/hiera-sops-prod,arn:aws:kms:eu-central-1:361527076523:key/cb1fab90-8d17-42a1-a9d8-334968904f94+arn:aws:iam::361527076523:role/hiera-sops-prod'\n          pgp: 'FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4'\n          age: 'age129h70qwx39k7h5x6l9hg566nwm53527zvamre8vep9e3plsm44uqgy8gla'\n          hc_vault_uris: \"http://localhost:8200/v1/sops/keys/thirdkey\"\n\n        # gcp files using GCP KMS\n        - path_regex: \\.gcp\\.yaml$\n          gcp_kms: projects/mygcproject/locations/global/keyRings/mykeyring/cryptoKeys/thekey\n\n        # Finally, if the rules above have not matched, this one is a\n        # catchall that will encrypt the file using KMS set C as well as PGP\n        # The absence of a path_regex means it will match everything\n        - kms: 'arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500,arn:aws:kms:us-west-2:142069644989:key/846cfb17-373d-49b9-8baf-f36b04512e47,arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e'\n          pgp: 'FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4'\n\nWhen creating any file under **mysecretrepo**, whether at the root or under\na subdirectory, SOPS will recursively look for a ``.sops.yaml`` file. If one is\nfound, the filename of the file being created is compared with the filename\nregexes of the configuration file. The first regex that matches is selected,\nand its KMS and PGP keys are used to encrypt the file. It should be noted that\nthe looking up of ``.sops.yaml`` is from the working directory (CWD) instead of\nthe directory of the encrypting file (see `Issue 242 <https://github.com/getsops/sops/issues/242>`_).\n\nThe ``path_regex`` checks the path of the encrypting file relative to the ``.sops.yaml`` config file. Here is another example:\n\n* files located under directory **development** should use one set of KMS A\n* files located under directory **production** should use another set of KMS B\n* other files use a third set of KMS C\n\n.. code:: yaml\n\n    creation_rules:\n        # upon creation of a file under development,\n        # KMS set A is used\n        - path_regex: .*/development/.*\n          kms: 'arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500,arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e+arn:aws:iam::361527076523:role/hiera-sops-prod'\n          pgp: 'FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4'\n\n        # prod files use KMS set B in the PROD IAM\n        - path_regex: .*/production/.*\n          kms: 'arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e+arn:aws:iam::361527076523:role/hiera-sops-prod,arn:aws:kms:eu-central-1:361527076523:key/cb1fab90-8d17-42a1-a9d8-334968904f94+arn:aws:iam::361527076523:role/hiera-sops-prod'\n          pgp: 'FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4'\n\n        # other files use KMS set C\n        - kms: 'arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500,arn:aws:kms:us-west-2:142069644989:key/846cfb17-373d-49b9-8baf-f36b04512e47,arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e'\n          pgp: 'FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4'\n\nCreating a new file with the right keys is now as simple as\n\n.. code:: sh\n\n    $ sops edit <newfile>.prod.yaml\n\nNote that the configuration file is ignored when KMS or PGP parameters are\npassed on the SOPS command line or in environment variables.\n\nSpecify a different GPG executable\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSOPS checks for the ``SOPS_GPG_EXEC`` environment variable. If specified,\nit will attempt to use the executable set there instead of the default\nof ``gpg``.\n\nExample: place the following in your ``~/.bashrc``\n\n.. code:: bash\n\n    SOPS_GPG_EXEC = 'your_gpg_client_wrapper'\n\n\nSpecify a different GPG key server\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, SOPS uses the key server ``keys.openpgp.org`` to retrieve the GPG\nkeys that are not present in the local keyring.\nThis is no longer configurable. You can learn more about why from this write-up: `SKS Keyserver Network Under Attack <https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f>`_.\n\n\nKey groups\n~~~~~~~~~~\n\nBy default, SOPS encrypts the data key for a file with each of the master keys,\nsuch that if any of the master keys is available, the file can be decrypted.\nHowever, it is sometimes desirable to require access to multiple master keys\nin order to decrypt files. This can be achieved with key groups.\n\nWhen using key groups in SOPS, data keys are split into parts such that keys from\nmultiple groups are required to decrypt a file. SOPS uses Shamir's Secret Sharing\nto split the data key such that each key group has a fragment, each key in the\nkey group can decrypt that fragment, and a configurable number of fragments (threshold)\nare needed to decrypt and piece together the complete data key. When decrypting a\nfile using multiple key groups, SOPS goes through key groups in order, and in\neach group, tries to recover the fragment of the data key using a master key from\nthat group. Once the fragment is recovered, SOPS moves on to the next group,\nuntil enough fragments have been recovered to obtain the complete data key.\n\nBy default, the threshold is set to the number of key groups. For example, if\nyou have three key groups configured in your SOPS file and you don't override\nthe default threshold, then one master key from each of the three groups will\nbe required to decrypt the file.\n\nManagement of key groups is done with the ``sops groups`` command.\n\nFor example, you can add a new key group with 3 PGP keys and 3 KMS keys to the\nfile ``my_file.yaml``:\n\n.. code:: sh\n\n    $ sops groups add --file my_file.yaml --pgp fingerprint1 --pgp fingerprint2 --pgp fingerprint3 --kms arn1 --kms arn2 --kms arn3\n\nOr you can delete the 1st group (group number 0, as groups are zero-indexed)\nfrom ``my_file.yaml``:\n\n.. code:: sh\n\n    $ sops groups delete --file my_file.yaml 0\n\nKey groups can also be specified in the ``.sops.yaml`` config file,\nlike so:\n\n.. code:: yaml\n\n    creation_rules:\n        - path_regex: .*keygroups.*\n          key_groups:\n              # First key group\n              - pgp:\n                    - fingerprint1\n                    - fingerprint2\n                kms:\n                    - arn: arn1\n                      role: role1\n                      context:\n                          foo: bar\n                    - arn: arn2\n                      aws_profile: myprofile\n              # Second key group\n              - pgp:\n                    - fingerprint3\n                    - fingerprint4\n                kms:\n                    - arn: arn3\n                    - arn: arn4\n              # Third key group\n              - pgp:\n                    - fingerprint5\n\nGiven this configuration, we can create a new encrypted file like we normally\nwould, and optionally provide the ``--shamir-secret-sharing-threshold`` command line\nflag if we want to override the default threshold. SOPS will then split the data\nkey into three parts (from the number of key groups) and encrypt each fragment with\nthe master keys found in each group.\n\nFor example:\n\n.. code:: sh\n\n    $ sops edit --shamir-secret-sharing-threshold 2 example.json\n\nAlternatively, you can configure the Shamir threshold for each creation rule in the ``.sops.yaml`` config\nwith ``shamir_threshold``:\n\n.. code:: yaml\n\n    creation_rules:\n        - path_regex: .*keygroups.*\n          shamir_threshold: 2\n          key_groups:\n              # First key group\n              - pgp:\n                    - fingerprint1\n                    - fingerprint2\n                kms:\n                    - arn: arn1\n                      role: role1\n                      context:\n                          foo: bar\n                    - arn: arn2\n                      aws_profile: myprofile\n              # Second key group\n              - pgp:\n                    - fingerprint3\n                    - fingerprint4\n                kms:\n                    - arn: arn3\n                    - arn: arn4\n              # Third key group\n              - pgp:\n                    - fingerprint5\n\nAnd then run ``sops edit example.json``.\n\nThe threshold (``shamir_threshold``) is set to 2, so this configuration will require\nmaster keys from two of the three different key groups in order to decrypt the file.\nYou can then decrypt the file the same way as with any other SOPS file:\n\n.. code:: sh\n\n    $ sops decrypt example.json\n\nKey service\n~~~~~~~~~~~\n\nThere are situations where you might want to run SOPS on a machine that\ndoesn't have direct access to encryption keys such as PGP keys. The ``sops`` key\nservice allows you to forward a socket so that SOPS can access encryption\nkeys stored on a remote machine. This is similar to GPG Agent, but more\nportable.\n\nSOPS uses a client-server approach to encrypting and decrypting the data\nkey. By default, SOPS runs a local key service in-process. SOPS uses a key\nservice client to send an encrypt or decrypt request to a key service, which\nthen performs the operation. The requests are sent using gRPC and Protocol\nBuffers. The requests contain an identifier for the key they should perform\nthe operation with, and the plaintext or encrypted data key. The requests do\nnot contain any cryptographic keys, public or private.\n\n**WARNING: the key service connection currently does not use any sort of\nauthentication or encryption. Therefore, it is recommended that you make sure\nthe connection is authenticated and encrypted in some other way, for example\nthrough an SSH tunnel.**\n\nWhenever we try to encrypt or decrypt a data key, SOPS will try to do so first\nwith the local key service (unless it's disabled), and if that fails, it will\ntry all other remote key services until one succeeds.\n\nYou can start a key service server by running ``sops keyservice``.\n\nYou can specify the key services the ``sops`` binary uses with ``--keyservice``.\nThis flag can be specified more than once, so you can use multiple key\nservices. The local key service can be disabled with\n``enable-local-keyservice=false``.\n\nFor example, to decrypt a file using both the local key service and the key\nservice exposed on the unix socket located in ``/tmp/sops.sock``, you can run:\n\n.. code:: sh\n\n    $ sops decrypt --keyservice unix:///tmp/sops.sock file.yaml`\n\nAnd if you only want to use the key service exposed on the unix socket located\nin ``/tmp/sops.sock`` and not the local key service, you can run:\n\n.. code:: sh\n\n    $ sops decrypt --enable-local-keyservice=false --keyservice unix:///tmp/sops.sock file.yaml\n\nAuditing\n~~~~~~~~\n\nSometimes, users want to be able to tell what files were accessed by whom in an\nenvironment they control. For this reason, SOPS can generate audit logs to\nrecord activity on encrypted files. When enabled, SOPS will write a log entry\ninto a pre-configured PostgreSQL database when a file is decrypted. The log\nincludes a timestamp, the username SOPS is running as, and the file that was\ndecrypted.\n\nIn order to enable auditing, you must first create the database and credentials\nusing the schema found in ``audit/schema.sql``. This schema defines the\ntables that store the audit events and a role named ``sops`` that only has\npermission to add entries to the audit event tables. The default password for\nthe role ``sops`` is ``sops``. You should change this password.\n\nOnce you have created the database, you have to tell SOPS how to connect to it.\nBecause we don't want users of SOPS to be able to control auditing, the audit\nconfiguration file location is not configurable, and must be at\n``/etc/sops/audit.yaml``. This file should have strict permissions such\nthat only the root user can modify it.\n\nFor example, to enable auditing to a PostgreSQL database named ``sops`` running\non localhost, using the user ``sops`` and the password ``sops``,\n``/etc/sops/audit.yaml`` should have the following contents:\n\n.. code:: yaml\n\n    backends:\n        postgres:\n            - connection_string: \"postgres://sops:sops@localhost/sops?sslmode=verify-full\"\n\n\nYou can find more information on the ``connection_string`` format in the\n`PostgreSQL docs <https://www.postgresql.org/docs/current/static/libpq-connect.html#libpq-connstring>`_.\n\nUnder the ``postgres`` map entry in the above YAML is a list, so one can\nprovide more than one backend, and SOPS will log to all of them:\n\n.. code:: yaml\n\n    backends:\n        postgres:\n            - connection_string: \"postgres://sops:sops@localhost/sops?sslmode=verify-full\"\n            - connection_string: \"postgres://sops:sops@remotehost/sops?sslmode=verify-full\"\n\nSaving Output to a File\n~~~~~~~~~~~~~~~~~~~~~~~\nBy default SOPS just dumps all the output to the standard output. We can use the\n``--output`` flag followed by a filename to save the output to the file specified.\nBeware using both ``--in-place`` and ``--output`` flags will result in an error.\n\nPassing Secrets to Other Processes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn addition to writing secrets to standard output and to files on disk, SOPS\nhas two commands for passing decrypted secrets to a new process: ``exec-env``\nand ``exec-file``. These commands will place all output into the environment of\na child process and into a temporary file, respectively. For example, if a\nprogram looks for credentials in its environment, ``exec-env`` can be used to\nensure that the decrypted contents are available only to this process and never\nwritten to disk.\n\n.. code:: sh\n\n    # print secrets to stdout to confirm values\n    $ sops decrypt out.json\n    {\n            \"database_password\": \"jf48t9wfw094gf4nhdf023r\",\n            \"AWS_ACCESS_KEY_ID\": \"AKIAIOSFODNN7EXAMPLE\",\n            \"AWS_SECRET_KEY\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    }\n\n    # decrypt out.json and run a command\n    # the command prints the environment variable and runs a script that uses it\n    $ sops exec-env out.json 'echo secret: $database_password; ./database-import'\n    secret: jf48t9wfw094gf4nhdf023r\n\n    # launch a shell with the secrets available in its environment\n    $ sops exec-env out.json 'sh'\n    sh-3.2# echo $database_password\n    jf48t9wfw094gf4nhdf023r\n\n    # the secret is not accessible anywhere else\n    sh-3.2$ exit\n    $ echo your password: $database_password\n    your password:\n\n\nIf the command you want to run only operates on files, you can use ``exec-file``\ninstead. By default, SOPS will use a FIFO to pass the contents of the\ndecrypted file to the new program. Using a FIFO, secrets are only passed in\nmemory which has two benefits: the plaintext secrets never touch the disk, and\nthe child process can only read the secrets once. In contexts where this won't\nwork, eg platforms like Windows where FIFOs unavailable or secret files that need\nto be available to the child process longer term, the ``--no-fifo`` flag can be\nused to instruct SOPS to use a traditional temporary file that will get cleaned\nup once the process is finished executing. ``exec-file`` behaves similar to\n``find(1)`` in that ``{}`` is used as a placeholder in the command which will be\nsubstituted with the temporary file path (whether a FIFO or an actual file).\n\n.. code:: sh\n\n    # operating on the same file as before, but as a file this time\n    $ sops exec-file out.json 'echo your temporary file: {}; cat {}'\n    your temporary file: /tmp/.sops894650499/tmp-file\n    {\n            \"database_password\": \"jf48t9wfw094gf4nhdf023r\",\n            \"AWS_ACCESS_KEY_ID\": \"AKIAIOSFODNN7EXAMPLE\",\n            \"AWS_SECRET_KEY\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    }\n\n    # launch a shell with a variable TMPFILE pointing to the temporary file\n    $ sops exec-file --no-fifo out.json 'TMPFILE={} sh'\n    sh-3.2$ echo $TMPFILE\n    /tmp/.sops506055069/tmp-file291138648\n    sh-3.2$ cat $TMPFILE\n    {\n            \"database_password\": \"jf48t9wfw094gf4nhdf023r\",\n            \"AWS_ACCESS_KEY_ID\": \"AKIAIOSFODNN7EXAMPLE\",\n            \"AWS_SECRET_KEY\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    }\n    sh-3.2$ ./program --config $TMPFILE\n    sh-3.2$ exit\n\n    # try to open the temporary file from earlier\n    $ cat /tmp/.sops506055069/tmp-file291138648\n    cat: /tmp/.sops506055069/tmp-file291138648: No such file or directory\n\nAdditionally, on unix-like platforms, both ``exec-env`` and ``exec-file``\nsupport dropping privileges before executing the new program via the\n``--user <username>`` flag. This is particularly useful in cases where the\nencrypted file is only readable by root, but the target program does not\nneed root privileges to function. This flag should be used where possible\nfor added security.\n\nTo overwrite the default file name (``tmp-file``) in ``exec-file`` use the\n``--filename <filename>`` parameter.\n\n.. code:: sh\n\n    # the encrypted file can't be read by the current user\n    $ cat out.json\n    cat: out.json: Permission denied\n\n    # execute sops as root, decrypt secrets, then drop privileges\n    $ sudo sops exec-env --user nobody out.json 'sh'\n    sh-3.2$ echo $database_password\n    jf48t9wfw094gf4nhdf023r\n\n    # dropped privileges, still can't load the original file\n    sh-3.2$ id\n    uid=4294967294(nobody) gid=4294967294(nobody) groups=4294967294(nobody)\n    sh-3.2$ cat out.json\n    cat: out.json: Permission denied\n\nUsing the publish command\n~~~~~~~~~~~~~~~~~~~~~~~~~\n``sops publish $file`` publishes a file to a pre-configured destination (this lives in the SOPS\nconfig file). Additionally, support re-encryption rules that work just like the creation rules.\n\nThis command requires a ``.sops.yaml`` configuration file. Below is an example:\n\n.. code:: yaml\n\n    destination_rules:\n        - s3_bucket: \"sops-secrets\"\n          path_regex: s3/*\n          recreation_rule:\n              pgp: F69E4901EDBAD2D1753F8C67A64535C4163FB307\n        - gcs_bucket: \"sops-secrets\"\n          path_regex: gcs/*\n          recreation_rule:\n              pgp: F69E4901EDBAD2D1753F8C67A64535C4163FB307\n        - vault_path: \"sops/\"\n          vault_kv_mount_name: \"secret/\" # default\n          vault_kv_version: 2 # default\n          path_regex: vault/*\n          omit_extensions: true\n\nThe above configuration will place all files under ``s3/*`` into the S3 bucket ``sops-secrets``,\nall files under ``gcs/*`` into the GCS bucket ``sops-secrets``, and the contents of all files under\n``vault/*`` into Vault's KV store under the path ``secrets/sops/``. For the files that will be\npublished to S3 and GCS, it will decrypt them and re-encrypt them using the\n``F69E4901EDBAD2D1753F8C67A64535C4163FB307`` pgp key.\n\nYou would deploy a file to S3 with a command like: ``sops publish s3/app.yaml``\n\nTo publish all files in selected directory recursively, you need to specify ``--recursive`` flag.\n\nIf you don't want file extension to appear in destination secret path, use ``--omit-extensions``\nflag or ``omit_extensions: true`` in the destination rule in ``.sops.yaml``.\n\nPublishing to Vault\n*******************\n\nThere are a few settings for Vault that you can place in your destination rules. The first\nis ``vault_path``, which is required. The others are optional, and they are\n``vault_address``, ``vault_kv_mount_name``, ``vault_kv_version``.\n\nSOPS uses the official Vault API provided by Hashicorp, which makes use of `environment\nvariables <https://www.vaultproject.io/docs/commands/#environment-variables>`_ for\nconfiguring the client.\n\n``vault_kv_mount_name`` is used if your Vault KV is mounted somewhere other than ``secret/``.\n``vault_kv_version`` supports ``1`` and ``2``, with ``2`` being the default.\n\nIf the destination secret path already exists in Vault and contains the same data as the source\nfile, it will be skipped.\n\nBelow is an example of publishing to Vault (using token auth with a local dev instance of Vault).\n\n.. code:: sh\n\n    $ export VAULT_TOKEN=...\n    $ export VAULT_ADDR='http://127.0.0.1:8200'\n    $ sops decrypt vault/test.yaml\n    example_string: bar\n    example_number: 42\n    example_map:\n        key: value\n    $ sops publish vault/test.yaml\n    uploading /home/user/sops_directory/vault/test.yaml to http://127.0.0.1:8200/v1/secret/data/sops/test.yaml ? (y/n): y\n    $ vault kv get secret/sops/test.yaml\n    ====== Metadata ======\n    Key              Value\n    ---              -----\n    created_time     2019-07-11T03:32:17.074792017Z\n    deletion_time    n/a\n    destroyed        false\n    version          3\n\n    ========= Data =========\n    Key               Value\n    ---               -----\n    example_map       map[key:value]\n    example_number    42\n    example_string    bar\n\n\nImportant information on types\n------------------------------\n\nYAML, JSON, ENV and INI type extensions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSOPS uses the file extension to decide which encryption method to use on the file\ncontent. ``YAML``, ``JSON``, ``ENV``, and ``INI`` files are treated as trees of data, and key/values are\nextracted from the files to only encrypt the leaf values. The tree structure is also\nused to check the integrity of the file.\n\nTherefore, if a file is encrypted using a specific format, it needs to be decrypted\nin the same format. The easiest way to achieve this is to conserve the original file\nextension after encrypting a file. For example:\n\n.. code:: sh\n\n    $ sops encrypt -i myfile.json\n    $ sops decrypt myfile.json\n\nIf you want to change the extension of the file once encrypted, you need to provide\n``sops`` with the ``--input-type`` flag upon decryption. For example:\n\n.. code:: sh\n\n    $ sops encrypt myfile.json > myfile.json.enc\n\n    $ sops decrypt --input-type json myfile.json.enc\n\nWhen operating on stdin, use the ``--input-type`` and ``--output-type`` flags as follows:\n\n.. code:: sh\n\n    $ cat myfile.json | sops decrypt --input-type json --output-type json /dev/stdin\n\nJSON and JSON_binary indentation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSOPS indents ``JSON`` files by default using one ``tab``. However, you can change\nthis default behaviour to use ``spaces`` by either using the additional ``--indent=2`` CLI option or\nby configuring ``.sops.yaml`` with the code below.\n\nThe special value ``0`` disables indentation, and ``-1`` uses a single tab.\n\n.. code:: yaml\n\n  stores:\n      json:\n          indent: 2\n      json_binary:\n          indent: 2\n\nYAML indentation\n~~~~~~~~~~~~~~~~\n\nSOPS indents ``YAML`` files by default using 4 spaces. However, you can change\nthis default behaviour by either using the additional ``--indent=2`` CLI option or\nby configuring ``.sops.yaml`` with:\n\n.. code:: yaml\n\n  stores:\n      yaml:\n          indent: 2\n\n.. note::\n\n  The YAML emitter used by sops only supports values between 2 and 9. If you specify 1,\n  or 10 and larger, the indent will be 2.\n\nYAML anchors\n~~~~~~~~~~~~\n\nSOPS only supports a subset of ``YAML``'s many types. Encrypting YAML files that\ncontain strings, numbers and booleans will work fine, but files that contain anchors\nwill not work, because the anchors redefine the structure of the file at load time.\n\nThis file will not work in SOPS:\n\n.. code:: yaml\n\n    bill-to:  &id001\n        street: |\n            123 Tornado Alley\n            Suite 16\n        city:   East Centerville\n        state:  KS\n\n    ship-to:  *id001\n\nSOPS uses the path to a value as additional data in the AEAD encryption, and thus\ndynamic paths generated by anchors break the authentication step.\n\nJSON and TEXT file types do not support anchors and thus have no such limitation.\n\nYAML Streams\n~~~~~~~~~~~~\n\n``YAML`` supports having more than one \"document\" in a single file, while\nformats like ``JSON`` do not. SOPS is able to handle both. This means the\nfollowing multi-document will be encrypted as expected:\n\n.. code:: yaml-stream\n\n    ---\n    data: foo\n    ---\n    data: bar\n\nNote that the ``sops`` metadata, i.e. the hash, etc, is computed for the physical\nfile rather than each internal \"document\".\n\nTop-level arrays\n~~~~~~~~~~~~~~~~\n``YAML`` and ``JSON`` top-level arrays are not supported, because SOPS\nneeds a top-level ``sops`` key to store its metadata.\n\nThis file will not work in SOPS:\n\n.. code:: yaml\n\n    ---\n      - some\n      - array\n      - elements\n\nBut this one will work because the ``sops`` key can be added at the same level as the\n``data`` key.\n\n.. code:: yaml\n\n    data:\n        - some\n        - array\n        - elements\n\nSimilarly, with ``JSON`` arrays, this document will not work:\n\n.. code:: json\n\n    [\n      \"some\",\n      \"array\",\n      \"elements\"\n    ]\n\n\nBut this one will work just fine:\n\n.. code:: json\n\n    {\n      \"data\": [\n        \"some\",\n        \"array\",\n        \"elements\"\n      ]\n    }\n\n\nExamples\n--------\n\nTake a look into the `examples folder <https://github.com/getsops/sops/tree/main/examples>`_ for detailed use cases of SOPS in a CI environment. The section below describes specific tips for common use cases.\n\nCreating a new file\n~~~~~~~~~~~~~~~~~~~\n\nThe command below creates a new file with a data key encrypted by KMS and PGP.\n\n.. code:: sh\n\n    $ sops edit --kms \"arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500\" --pgp C9CAB0AF1165060DB58D6D6B2653B624D620786D /path/to/new/file.yaml\n\nEncrypting an existing file\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSimilar to the previous command, we tell SOPS to use one KMS and one PGP key.\nThe path points to an existing cleartext file, so we give ``sops`` the flag ``-e`` to\nencrypt the file, and redirect the output to a destination file.\n\n.. code:: sh\n\n    $ export SOPS_KMS_ARN=\"arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500\"\n    $ export SOPS_PGP_FP=\"C9CAB0AF1165060DB58D6D6B2653B624D620786D\"\n    $ sops encrypt /path/to/existing/file.yaml > /path/to/new/encrypted/file.yaml\n\nDecrypt the file with ``-d``.\n\n.. code:: sh\n\n    $ sops decrypt /path/to/new/encrypted/file.yaml\n\nEncrypt or decrypt a file in place\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRather than redirecting the output of ``-e`` or ``-d``, ``sops`` can replace the\noriginal file after encrypting or decrypting it.\n\n.. code:: sh\n\n    # file.yaml is in cleartext\n    $ sops encrypt -i /path/to/existing/file.yaml\n    # file.yaml is now encrypted\n    $ sops decrypt -i /path/to/existing/file.yaml\n    # file.yaml is back in cleartext\n\nEncrypting binary files\n~~~~~~~~~~~~~~~~~~~~~~~\n\nSOPS primary use case is encrypting YAML and JSON configuration files, but it\nalso has the ability to manage binary files. When encrypting a binary, SOPS will\nread the data as bytes, encrypt it, store the encrypted base64 under\n``tree['data']`` and write the result as JSON.\n\nNote that the base64 encoding of encrypted data can actually make the encrypted\nfile larger than the cleartext one.\n\nIn-place encryption/decryption also works on binary files.\n\n.. code:: sh\n\n    $ dd if=/dev/urandom of=/tmp/somerandom bs=1024\n    count=512\n    512+0 records in\n    512+0 records out\n    524288 bytes (524 kB) copied, 0.0466158 s, 11.2 MB/s\n\n    $ sha512sum /tmp/somerandom\n    9589bb20280e9d381f7a192000498c994e921b3cdb11d2ef5a986578dc2239a340b25ef30691bac72bdb14028270828dad7e8bd31e274af9828c40d216e60cbe /tmp/somerandom\n\n    $ sops encrypt -i /tmp/somerandom\n    please wait while a data encryption key is being generated and stored securely\n\n    $ sops decrypt -i /tmp/somerandom\n\n    $ sha512sum /tmp/somerandom\n    9589bb20280e9d381f7a192000498c994e921b3cdb11d2ef5a986578dc2239a340b25ef30691bac72bdb14028270828dad7e8bd31e274af9828c40d216e60cbe /tmp/somerandom\n\nExtract a sub-part of a document tree\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSOPS can extract a specific part of a YAML or JSON document, by provided the\npath in the ``--extract`` command line flag. This is useful to extract specific\nvalues, like keys, without needing an extra parser.\n\n.. code:: sh\n\n    $ sops decrypt --extract '[\"app2\"][\"key\"]' ~/git/svc/sops/example.yaml\n    -----BEGIN RSA PRIVATE KEY-----\n    MIIBPAIBAAJBAPTMNIyHuZtpLYc7VsHQtwOkWYobkUblmHWRmbXzlAX6K8tMf3Wf\n    ImcbNkqAKnELzFAPSBeEMhrBN0PyOC9lYlMCAwEAAQJBALXD4sjuBn1E7Y9aGiMz\n    bJEBuZJ4wbhYxomVoQKfaCu+kH80uLFZKoSz85/ySauWE8LgZcMLIBoiXNhDKfQL\n    vHECIQD6tCG9NMFWor69kgbX8vK5Y+QL+kRq+9HK6yZ9a+hsLQIhAPn4Ie6HGTjw\n    fHSTXWZpGSan7NwTkIu4U5q2SlLjcZh/AiEA78NYRRBwGwAYNUqzutGBqyXKUl4u\n    Erb0xAEyVV7e8J0CIQC8VBY8f8yg+Y7Kxbw4zDYGyb3KkXL10YorpeuZR4LuQQIg\n    bKGPkMM4w5blyE1tqGN0T7sJwEx+EUOgacRNqM2ljVA=\n    -----END RSA PRIVATE KEY-----\n\nThe tree path syntax uses regular python dictionary syntax, without the\nvariable name. Extract keys by naming them, and array elements by numbering\nthem.\n\n.. code:: sh\n\n    $ sops decrypt --extract '[\"an_array\"][1]' ~/git/svc/sops/example.yaml\n    secretuser2\n\nSet a sub-part in a document tree\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSOPS can set a specific part of a YAML or JSON document, by providing\nthe path and value in the ``set`` command. This is useful to set specific\nvalues, like keys, without needing an editor.\n\n.. code:: sh\n\n    $ sops set ~/git/svc/sops/example.yaml '[\"app2\"][\"key\"]' '\"app2keystringvalue\"'\n\nThe tree path syntax uses regular python dictionary syntax, without the\nvariable name. Set to keys by naming them, and array elements by\nnumbering them.\n\n.. code:: sh\n\n    $ sops set ~/git/svc/sops/example.yaml '[\"an_array\"][1]' '\"secretuser2\"'\n\nThe value must be formatted as json.\n\n.. code:: sh\n\n    $ sops set ~/git/svc/sops/example.yaml '[\"an_array\"][1]' '{\"uid1\":null,\"uid2\":1000,\"uid3\":[\"bob\"]}'\n\nUnset a sub-part in a document tree\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSymmetrically, SOPS can unset a specific part of a YAML or JSON document, by providing\nthe path in the ``unset`` command. This is useful to unset specific values, like keys, without\nneeding an editor.\n\n.. code:: sh\n\n    $ sops unset ~/git/svc/sops/example.yaml '[\"app2\"][\"key\"]'\n\nThe tree path syntax uses regular python dictionary syntax, without the\nvariable name. Set to keys by naming them, and array elements by\nnumbering them.\n\n.. code:: sh\n\n    $ sops unset ~/git/svc/sops/example.yaml '[\"an_array\"][1]'\n\nShowing diffs in cleartext in git\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou most likely want to store encrypted files in a version controlled repository.\nSOPS can be used with git to decrypt files when showing diffs between versions.\nThis is very handy for reviewing changes or visualizing history.\n\nTo configure SOPS to decrypt files during diff, create a ``.gitattributes`` file\nat the root of your repository that contains a filter and a command.\n\n.. code:: text\n\n    *.yaml diff=sopsdiffer\n\nHere we only care about YAML files. ``sopsdiffer`` is an arbitrary name that we map\nto a SOPS command in the git configuration file of the repository.\n\n.. code:: sh\n\n    $ git config diff.sopsdiffer.textconv \"sops decrypt\"\n\n    $ grep -A 1 sopsdiffer .git/config\n    [diff \"sopsdiffer\"]\n        textconv = \"sops decrypt\"\n\nWith this in place, calls to ``git diff`` will decrypt both previous and current\nversions of the target file prior to displaying the diff. And it even works with\ngit client interfaces, because they call git diff under the hood!\n\nEncrypting only parts of a file\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNote: this only works on YAML and JSON files, not on BINARY files.\n\nBy default, SOPS encrypts all the values of a YAML or JSON file and leaves the\nkeys in cleartext. In some instances, you may want to exclude some values from\nbeing encrypted. This can be accomplished by adding the suffix **_unencrypted**\nto any key of a file. When set, all values underneath the key that set the\n**_unencrypted** suffix will be left in cleartext.\n\nNote that, while in cleartext, unencrypted content is still added to the\nchecksum of the file, and thus cannot be modified outside of SOPS without\nbreaking the file integrity check.\nThis behavior can be modified using ``--mac-only-encrypted`` flag or ``.sops.yaml``\nconfig file which makes SOPS compute a MAC only over values it encrypted and\nnot all values.\n\nThe unencrypted suffix can be set to a different value using the\n``--unencrypted-suffix`` option.\n\nConversely, you can opt in to only encrypt some values in a YAML or JSON file,\nby adding a chosen suffix to those keys and passing it to the ``--encrypted-suffix`` option.\n\nA third method is to use the ``--encrypted-regex`` which will only encrypt values under\nkeys that match the supplied regular expression.  For example, this command:\n\n.. code:: sh\n\n    $ sops encrypt --encrypted-regex '^(data|stringData)$' k8s-secrets.yaml\n\nwill encrypt the values under the ``data`` and ``stringData`` keys in a YAML file\ncontaining kubernetes secrets.  It will not encrypt other values that help you to\nnavigate the file, like ``metadata`` which contains the secrets' names.\n\nConversely, you can opt in to only leave certain keys without encrypting by using the \n``--unencrypted-regex`` option, which will leave the values unencrypted of those keys \nthat match the supplied regular expression. For example, this command:\n\n.. code:: sh\n\n    $ sops encrypt --unencrypted-regex '^(description|metadata)$' k8s-secrets.yaml\n\nwill not encrypt the values under the ``description`` and ``metadata`` keys in a YAML file\ncontaining kubernetes secrets, while encrypting everything else.\n\nFor YAML files, another method is to use ``--encrypted-comment-regex`` which will\nonly encrypt comments and values which have a preceding comment matching the supplied\nregular expression.\n\nConversely, you can opt in to only left certain keys without encrypting by using the\n``--unencrypted-comment-regex`` option, which will leave the values and comments\nunencrypted when they have a preeceding comment, or a trailing comment on the same line,\nthat matches the supplied regular expression.\n\nYou can also specify these options in the ``.sops.yaml`` config file.\n\nNote: these six options ``--unencrypted-suffix``, ``--encrypted-suffix``, ``--encrypted-regex``,\n``--unencrypted-regex``, ``--encrypted-comment-regex``, and ``--unencrypted-comment-regex`` are\nmutually exclusive and cannot all be used in the same file.\n\nEncryption Protocol\n-------------------\n\nWhen SOPS creates a file, it generates a random 256 bit data key and asks each\nKMS and PGP master key to encrypt the data key. The encrypted version of the data\nkey is stored in the ``sops`` metadata under ``sops.kms`` and ``sops.pgp``.\n\nFor KMS:\n\n.. code:: yaml\n\n    sops:\n        kms:\n            - enc: CiC6yCOtzsnFhkfdIslYZ0bAf//gYLYCmIu87B3sy/5yYxKnAQEBAQB4usgjrc7JxYZH3SLJWGdGwH//4GC2ApiLvOwd7Mv+cmMAAAB+MHwGCSqGSIb3DQEHBqBvMG0CAQAwaAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAyGdRODuYMHbA8Ozj8CARCAO7opMolPJUmBXd39Zlp0L2H9fzMKidHm1vvaF6nNFq0ClRY7FlIZmTm4JfnOebPseffiXFn9tG8cq7oi\n              enc_ts: 1439568549.245995\n              arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e\n\nFor PGP:\n\n.. code:: yaml\n\n    sops:\n        pgp:\n            - fp: 85D77543B3D624B63CEA9E6DBC17301B491B3F21\n              created_at: 1441570391.930042\n              enc: |\n                  -----BEGIN PGP MESSAGE-----\n                  Version: GnuPG v1\n\n                  hQIMA0t4uZHfl9qgAQ//UvGAwGePyHuf2/zayWcloGaDs0MzI+zw6CmXvMRNPUsA\n                  pAgRKczJmDu4+XzN+cxX5Iq9xEWIbny9B5rOjwTXT3qcUYZ4Gkzbq4MWkjuPp/Iv\n                  qO4MJaYzoH5YxC4YORQ2LvzhA2YGsCzYnljmatGEUNg01yJ6r5mwFwDxl4Nc80Cn\n                  RwnHuGExK8j1jYJZu/juK1qRbuBOAuruIPPWVdFB845PA7waacG1IdUW3ZtBkOy3\n                  O0BIfG2ekRg0Nik6sTOhDUA+l2bewCcECI8FYCEjwHm9Sg5cxmP2V5m1mby+uKAm\n                  kewaoOyjbmV1Mh3iI1b/AQMr+/6ZE9MT2KnsoWosYamFyjxV5r1ZZM7cWKnOT+tu\n                  KOvGhTV1TeOfVpajNTNwtV/Oyh3mMLQ0F0HgCTqomQVqw5+sj7OWAASuD3CU/dyo\n                  pcmY5Qe0TNL1JsMNEH8LJDqSh+E0hsUxdY1ouVsg3ysf6mdM8ciWb3WRGxih1Vmf\n                  unfLy8Ly3V7ZIC8EHV8aLJqh32jIZV4i2zXIoO4ZBKrudKcECY1C2+zb/TziVAL8\n                  qyPe47q8gi1rIyEv5uirLZjgpP+JkDUgoMnzlX334FZ9pWtQMYW4Y67urAI4xUq6\n                  /q1zBAeHoeeeQK+YKDB7Ak/Y22YsiqQbNp2n4CKSKAE4erZLWVtDvSp+49SWmS/S\n                  XgGi+13MaXIp0ecPKyNTBjF+NOw/I3muyKr8EbDHrd2XgIT06QXqjYLsCb1TZ0zm\n                  xgXsOTY3b+ONQ2zjhcovanDp7/k77B+gFitLYKg4BLZsl7gJB12T8MQnpfSmRT4=\n                  =oJgS\n                  -----END PGP MESSAGE-----\n\nSOPS then opens a text editor on the newly created file. The user adds data to the\nfile and saves it when done.\n\nUpon save, SOPS browses the entire file as a key/value tree. Every time SOPS\nencounters a leaf value (a value that does not have children), it encrypts the\nvalue with AES256_GCM using the data key and a 256 bit random initialization\nvector.\n\nEach file uses a single data key to encrypt all values of a document, but each\nvalue receives a unique initialization vector and has unique authentication data.\n\nAdditional data is used to guarantee the integrity of the encrypted data\nand of the tree structure: when encrypting the tree, key names are concatenated\ninto a byte string that is used as AEAD additional data (aad) when encrypting\nvalues. We expect that keys do not carry sensitive information, and\nkeeping them in cleartext allows for better diff and overall readability.\n\nAny valid KMS or PGP master key can later decrypt the data key and access the\ndata.\n\nMultiple master keys allow for sharing encrypted files without sharing master\nkeys, and provide a disaster recovery solution. The recommended way to use SOPS\nis to have two KMS master keys in different regions and one PGP public key with\nthe private key stored offline. If, by any chance, both KMS master keys are\nlost, you can always recover the encrypted data using the PGP private key.\n\nMessage Authentication Code\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn addition to authenticating branches of the tree using keys as additional\ndata, SOPS computes a MAC on all the values to ensure that no value has been\nadded or removed fraudulently. The MAC is stored encrypted with AES_GCM and\nthe data key under tree -> ``sops`` -> ``mac``.\nThis behavior can be modified using ``--mac-only-encrypted`` flag or ``.sops.yaml``\nconfig file which makes SOPS compute a MAC only over values it encrypted and\nnot all values.\n\nMotivation\n----------\n\n   📝 **A note from the maintainers**\n\n   This section was written by the original authors of SOPS while they were\n   working at Mozilla. It is kept here for historical reasons and to provide\n   technical background on the project. It is not necessarily representative\n   of the views of the current maintainers, nor are they currently affiliated\n   with Mozilla.\n\nAutomating the distribution of secrets and credentials to components of an\ninfrastructure is a hard problem. We know how to encrypt secrets and share them\nbetween humans, but extending that trust to systems is difficult. Particularly\nwhen these systems follow devops principles and are created and destroyed\nwithout human intervention. The issue boils down to establishing the initial\ntrust of a system that just joined the infrastructure, and providing it access\nto the secrets it needs to configure itself.\n\nThe initial trust\n~~~~~~~~~~~~~~~~~\n\nIn many infrastructures, even highly dynamic ones, the initial trust is\nestablished by a human. An example is seen in Puppet by the way certificates are\nissued: when a new system attempts to join a Puppetmaster, an administrator\nmust, by default, manually approve the issuance of the certificate the system\nneeds. This is cumbersome, and many puppetmasters are configured to auto-sign\nnew certificates to work around that issue. This is obviously not recommended\nand far from ideal.\n\nAWS provides a more flexible approach to trusting new systems. It uses a\npowerful mechanism of roles and identities. In AWS, it is possible to verify\nthat a new system has been granted a specific role at creation, and it is\npossible to map that role to specific resources. Instead of trusting new systems\ndirectly, the administrator trusts the AWS permission model and its automation\ninfrastructure. As long as AWS keys are safe, and the AWS API is secure, we can\nassume that trust is maintained and systems are who they say they are.\n\nKMS, Trust and secrets distribution\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUsing the AWS trust model, we can create fine grained access controls to\nAmazon's Key Management Service (KMS). KMS is a service that encrypts and\ndecrypts data with AES_GCM, using keys that are never visible to users of the\nservice. Each KMS master key has a set of role-based access controls, and\nindividual roles are permitted to encrypt or decrypt using the master key. KMS\nhelps solve the problem of distributing keys, by shifting it into an access\ncontrol problem that can be solved using AWS's trust model.\n\nOperational requirements\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen Mozilla's Services Operations team started revisiting the issue of\ndistributing secrets to EC2 instances, we set a goal to store these secrets\nencrypted until the very last moment, when they need to be decrypted on target\nsystems. Not unlike many other organizations that operate sufficiently complex\nautomation, we found this to be a hard problem with a number of prerequisites:\n\n1. Secrets must be stored in YAML files for easy integration into hiera\n\n2. Secrets must be stored in GIT, and when a new CloudFormation stack is\n   built, the current HEAD is pinned to the stack. (This allows secrets to\n   be changed in GIT without impacting the current stack that may\n   autoscale).\n\n3. Entries must be encrypted separately. Encrypting entire files as blobs makes\n   git conflict resolution almost impossible. Encrypting each entry\n   separately is much easier to manage.\n\n4. Secrets must always be encrypted on disk (admin laptop, upstream\n   git repo, jenkins and S3) and only be decrypted on the target\n   systems\n\nSOPS can be used to encrypt YAML, JSON and BINARY files. In BINARY mode, the\ncontent of the file is treated as a blob, the same way PGP would encrypt an\nentire file. In YAML and JSON modes, however, the content of the file is\nmanipulated as a tree where keys are stored in cleartext, and values are\nencrypted. hiera-eyaml does something similar, and over the years we learned\nto appreciate its benefits, namely:\n\n* diffs are meaningful. If a single value of a file is modified, only that\n  value will show up in the diff. The diff is still limited to only showing\n  encrypted data, but that information is already more granular that\n  indicating that an entire file has changed.\n\n* conflicts are easier to resolve. If multiple users are working on the\n  same encrypted files, as long as they don't modify the same values,\n  changes are easy to merge. This is an improvement over the PGP\n  encryption approach where unsolvable conflicts often happen when\n  multiple users work on the same file.\n\nOpenPGP integration\n~~~~~~~~~~~~~~~~~~~\n\nOpenPGP gets a lot of bad press for being an outdated crypto protocol, and while\ntrue, what really made us look for alternatives is the difficulty of managing and\ndistributing keys to systems. With KMS, we manage permissions to an API, not keys,\nand that's a lot easier to do.\n\nBut PGP is not dead yet, and we still rely on it heavily as a backup solution:\nall our files are encrypted with KMS and with one PGP public key, with its\nprivate key stored securely for emergency decryption in the event that we lose\nall our KMS master keys.\n\nSOPS can be used without KMS entirely, the same way you would use an encrypted\nPGP file: by referencing the pubkeys of each individual who has access to the file.\nIt can easily be done by providing SOPS with a comma-separated list of public keys\nwhen creating a new file:\n\n.. code:: sh\n\n    $ sops edit --pgp \"E60892BB9BD89A69F759A1A0A3D652173B763E8F,84050F1D61AF7C230A12217687DF65059EF093D3,85D77543B3D624B63CEA9E6DBC17301B491B3F21\" mynewfile.yaml\n\nThreat Model\n------------\n\nThe security of the data stored using SOPS is as strong as the weakest\ncryptographic mechanism. Values are encrypted using AES256_GCM which is the\nstrongest symmetric encryption algorithm known today. Data keys are encrypted\nin either KMS, which also uses AES256_GCM, or PGP which uses either RSA or\nECDSA keys.\n\nGoing from the most likely to the least likely, the threats are as follows:\n\nCompromised AWS credentials grant access to KMS master key\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAn attacker with access to an AWS console can grant itself access to one of\nthe KMS master keys used to encrypt a ``sops`` data key. This threat should be\nmitigated by protecting AWS accesses with strong controls, such as multi-factor\nauthentication, and also by performing regular audits of permissions granted\nto AWS users.\n\nCompromised PGP key\n~~~~~~~~~~~~~~~~~~~\n\nPGP keys are routinely mishandled, either because owners copy them from\nmachine to machine, or because the key is left forgotten on an unused machine\nan attacker gains access to. When using PGP encryption, SOPS users should take\nspecial care of PGP private keys, and store them on smart cards or offline\nas often as possible.\n\nFactorized RSA key\n~~~~~~~~~~~~~~~~~~\n\nSOPS doesn't apply any restriction on the size or type of PGP keys. A weak PGP\nkeys, for example 512 bits RSA, could be factorized by an attacker to gain\naccess to the private key and decrypt the data key. Users of SOPS should rely\non strong keys, such as 2048+ bits RSA keys, or 256+ bits ECDSA keys.\n\nWeak AES cryptography\n~~~~~~~~~~~~~~~~~~~~~\n\nA vulnerability in AES256_GCM could potentially leak the data key or the KMS\nmaster key used by a SOPS encrypted file. While no such vulnerability exists\ntoday, we recommend that users keep their encrypted files reasonably private.\n\nBackward compatibility\n----------------------\n\nSOPS will remain backward compatible on the major version, meaning that all\nimprovements brought to the 1.X and 2.X branches (current) will maintain the\nfile format introduced in **1.0**.\n\nSecurity\n--------\n\nPlease report any security issues privately using `GitHub's advisory form <https://github.com/getsops/sops/security/advisories>`_.\n\nLicense\n-------\nMozilla Public License Version 2.0\n\nAuthors\n-------\n\nSOPS was initially launched as a project at Mozilla in 2015 and has been\ngraciously donated to the CNCF as a Sandbox project in 2023, now under the\nstewardship of a `new group of maintainers <https://github.com/getsops/community/blob/main/MAINTAINERS.md>`_.\n\nThe original authors of the project were:\n\n* Adrian Utrilla @autrilla\n* Julien Vehent @jvehent\n\nFurthermore, the project has been carried for a long time by AJ Bahnken @ajvb,\nand had not been possible without the contributions of numerous `contributors <https://github.com/getsops/sops/graphs/contributors>`_.\n\nCredits\n-------\n\nSOPS was inspired by `hiera-eyaml <https://github.com/TomPoulton/hiera-eyaml>`_,\n`credstash <https://github.com/LuminalOSS/credstash>`_,\n`sneaker <https://github.com/codahale/sneaker>`_,\n`password store <http://www.passwordstore.org/>`_ and too many years managing\nPGP encrypted files by hand...\n\n-----\n\n.. image:: docs/images/cncf-color-bg.svg\n   :width: 400\n   :alt: CNCF Sandbox Project\n\n**We are a** `Cloud Native Computing Foundation <https://cncf.io>`_ **sandbox project.**\n"
        },
        {
          "name": "aes",
          "type": "tree",
          "content": null
        },
        {
          "name": "age",
          "type": "tree",
          "content": null
        },
        {
          "name": "audit",
          "type": "tree",
          "content": null
        },
        {
          "name": "azkv",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "decrypt",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example.ini",
          "type": "blob",
          "size": 3.09765625,
          "content": "; ENC[AES256_GCM,data:EexYkXJHDv1E9WwU8wUrBakxAZcnlIkAJQgRFts3alF+5w==,iv:/wd7bCxSkJ85eG69NMq2RH70Dlw5q/diL42GcdTbRYs=,tag:8W4B3JjLYAtJgG3Zi6Hu+A==,type:comment]\n[name]\nfirstName = ENC[AES256_GCM,data:7cWtsg==,iv:rh/1l0yiOE3JmmSJB9CXp4Ctb5en0FcNUZZkLyWsX3c=,tag:d7We6RtSs3AYhA6jan/CoA==,type:str]\nlastName  = ENC[AES256_GCM,data:Iq50v00=,iv:o+bfCsNBsv/+XdXS4M7TCOTPzG38ft14/Q9/vZvnNvM=,tag:cRivFOZyIpMDXdKA9R+6mA==,type:str]\nage       = ENC[AES256_GCM,data:aSt9Fg==,iv:z1NjXdRRFs8+dAFkrngS7PyhUSCOTzAmxtzCcfafkAM=,tag:6kpo65TxMu1oKF9d7L1wJg==,type:str]\n\n[address]\ncity          = ENC[AES256_GCM,data:3hQ6RXAc8ik=,iv:ajAjhQIJiNWy9PGj8ZCI5k+3uw7igweqZ+eiZ9tuvG0=,tag:bGX7PK+/hTQE/1uYmXexyA==,type:str]\npostalCode    = ENC[AES256_GCM,data:1Ha0avZTe6IflQ==,iv:l8rbQbhSwxr3AJzqe/H8ALrHcXsntcBfkyUGt9/6k/U=,tag:f6s6ObY5QaqmG4CUpV+UKg==,type:str]\nstate         = ENC[AES256_GCM,data:ba0=,iv:P/VsGYbhT8ihRvluWc8HcUDPPigh/IcHXBnj0Xb86AE=,tag:JN7Y77eOaF1+tJjN2cxtnQ==,type:str]\nstreetAddress = ENC[AES256_GCM,data:LYYluDyJzryoYT2Nkg==,iv:KTmXPVV5tSY8/piTb/uPcfJL2mUqkS1aUI9pukQm1Dc=,tag:AzdSsRjEWx8kzclSZIdIcA==,type:str]\n\n[phoneNumbers]\nhome   = ENC[AES256_GCM,data:wv3pG8J7wmiotVY6,iv:YdX9RKlN9t0PohEu+Dxws0POUf8hjDMi4PJre+4/lsg=,tag:2XadWng1DxnfMituylFC5g==,type:str]\noffice = ENC[AES256_GCM,data:Hu3X626TUgV3Ix7i,iv:P1SBjvZPogJih4KLFLcbxeWeZT2aTNXPBtwlC9yZZ70=,tag:4SOkQZw4ynKfrFwrmre6Lw==,type:str]\n\n[not private]\nnotsecret_unencrypted = hi there!\n\n[sops]\npgp__list_0__map_fp         = FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4\npgp__list_1__map_created_at = 2019-12-10T22:45:52Z\npgp__list_1__map_fp         = D7229043384BCC60326C6FB9D8720D957C3D3074\nlastmodified                = 2019-12-10T22:45:52Z\npgp__list_0__map_created_at = 2019-12-10T22:45:52Z\npgp__list_0__map_enc        = -----BEGIN PGP MESSAGE-----\\n\\nwcBMAyUpShfNkFB/AQgAGb6tDB1gDtwLcVuENgd/AU1ZjxDbUY46OJzi1fkQ4jyo\\nvxfCviqfslYyncVrKab0S9U+alIu8Po8BrHCTwmDkcnPG7HWMcqRo+Nq3JShir3y\\ntVMbHuRGykPmGjs7GOUn1WibOisiJjHzLdFOsyNexveBV9AVln7kZazCRlXwbLqc\\nyJ9IQsWi1ET6DjtViejiBKblDzZ87WgvL2Z0E8QfYXmrB3GpFa+K4Aqgb3pHkQQo\\nGQArNAe8BmrhEXotj0IS/K3v2wjX5Sqli+0dh4qhaXiIeYb16nfc4M1TUo4Vvj7Q\\nyWdjufTi+2RIxxUEkIdRg6lDVabm98hLn6/jsQ5c5tLgAeT99N9te4j1eeO62xwy\\nz4S+4Xok4Cng9OFHFODz4hh6ah3gYuXRf4qFh++GUaxGwG/iGNSiY7A9eWg1gM+N\\nPB6MtiOnhuB15N5mbD2V1xrzlF0fu0K98Vviv75h4eGzYQA=\\n=RaGg\\n-----END PGP MESSAGE-----\nmac                         = ENC[AES256_GCM,data:5NouZe0uY8581eqXLe31TWYqThPlfePdpIyYDBgj3FwGvPfhiWB+dn/diSt4NpZ9zUNI4VhF2cmNesk8NgZdUK9/N9WbGgmJjjdBXvo0xhvr8RR22AiVCB9ipDlSFqnOMyJzo+CAvpSDbwF1bMU0qxwKW+zpDZV2uLX+px7b2qM=,iv:em3/lIV7eYA46u2kM0bR1/3O6Ga2vRfS5/r2qh0jges=,tag:ow9277u7mFNcs4IdsU4YUQ==,type:str]\npgp__list_1__map_enc        = -----BEGIN PGP MESSAGE-----\\n\\nwYwDXFUltYFwV4MBBAAQYkLcQ1MORGYYprtFwUZPO2J3CBOU4u76qJQod5JXZuAa\\n3aCynkyrOHIpgh2cKoyUle4u/FK68mFl9+TxixlFDRxt1CsvMR8dHP0EFJOMSq5U\\nNwpcnEh20++3DNiq7bCtS2W68FRh8bVxmhEEXPxW4HLJV4WZSE4pu9B7w9kd5NLg\\nAeQyj0ugpILq3IonJdLsgLkg4RGV4GDgFOEqxOCT4uKeSX/gdOXvr5WJzlWJRLjT\\nA51CtgnUVXlNO5zfCiFRMXOFyE1FCeBm5Ivkgh4KxkQvwI6jSZpU1rjiz4QYTOGO\\n4gA=\\n=XdTd\\n-----END PGP MESSAGE-----\nunencrypted_suffix          = _unencrypted\nversion                     = 3.5.0\n\n"
        },
        {
          "name": "example.json",
          "type": "blob",
          "size": 3.1826171875,
          "content": "{\n\t\"firstName\": \"ENC[AES256_GCM,data:f8++3g==,iv:rYuVzzb+C40QlYgO4Dl2V7atZUx0ITBcyb5fUsftKMo=,tag:krquPqa1HQltZqidzNamrA==,type:str]\",\n\t\"lastName\": \"ENC[AES256_GCM,data:94a2Q8c=,iv:c3NC7L80UTtbz7gdvPV5oSUwg30lC3Kg82uvRVs5CZw=,tag:kUXRNerUWmSe44mwD4w5uA==,type:str]\",\n\t\"age\": \"ENC[AES256_GCM,data:gjwWkw==,iv:XEWFpsyvEsPwr3qqsOJlfZ+vSZdiA+D6DAc6aoq/BS0=,tag:pcnUyMtYFa9v5DB6sNV15w==,type:float]\",\n\t\"address\": {\n\t\t\"city\": \"ENC[AES256_GCM,data:vSeyQwN1Z9k=,iv:DBmuX4w6w14Z/1b820OE3SM3MPx3oLGAeSoR4CWxdhg=,tag:ClpJZLb4ObIOdDD441clrw==,type:str]\",\n\t\t\"postalCode\": \"ENC[AES256_GCM,data:SZadC4tZh106eg==,iv:z/yWCZTd19j+3cFY5mwVkxY8a7i6veTBnwh4fsw5Kbw=,tag:iel9Pqh0jS0KhjxklXeqIg==,type:str]\",\n\t\t\"state\": \"ENC[AES256_GCM,data:b0Y=,iv:7Ar/Tb7XCDo5ABZNdSNBqGquaGEQF7dNxd1VvW7Nwak=,tag:uEjmOKwPlkYSq4IV1tQjwQ==,type:str]\",\n\t\t\"streetAddress\": \"ENC[AES256_GCM,data:dVFPTRPKOFSJ1plV9w==,iv:08Ks4C1FzFozezKBBYSPEAIkC5DkthDFmMW0R3zVbkI=,tag:waInfXMCAcx5C7avXHahOw==,type:str]\"\n\t},\n\t\"phoneNumbers\": [\n\t\t{\n\t\t\t\"number\": \"ENC[AES256_GCM,data:lkUEC7s3qU9AY6W+,iv:KjF9i0K9u7THbb3Bn1adQrIKpv1ZqA3PiJkctgFm3Bw=,tag:LBSqqr+gn15x0Pz5JKMJJQ==,type:str]\",\n\t\t\t\"type\": \"ENC[AES256_GCM,data:aXBHGg==,iv:ulcjNwVfGFvUtVN8q0h1LMYM5zRDmOsqtoFC1JOHREY=,tag:7vdMoCOD+7IeUHWQqQJ8XA==,type:str]\"\n\t\t},\n\t\t{\n\t\t\t\"number\": \"ENC[AES256_GCM,data:z9Ujp3n2yXBqPNM1,iv:1nbZrIKozuS2p2AgD5/gHgjMN/VSd8SFeCbWdjy9Cf0=,tag:tfwaYihQDMAsmy/yt6ScLg==,type:str]\",\n\t\t\t\"type\": \"ENC[AES256_GCM,data:ddkB7Iu6,iv:4t31C5r1zhCpLQ64idoJ8OBC7ocME15zCUXCmgf2ItY=,tag:RmBsmbhQW10oOTDuzfxEaA==,type:str]\"\n\t\t}\n\t],\n\t\"anEmptyValue\": \"\",\n\t\"sops\": {\n\t\t\"kms\": null,\n\t\t\"gcp_kms\": null,\n\t\t\"azure_kv\": null,\n\t\t\"lastmodified\": \"2019-12-10T22:45:55Z\",\n\t\t\"mac\": \"ENC[AES256_GCM,data:VoXDgYpIYCvFSLyKGx4c8yk56Mk5GkeIwM8IyUi4RgkKBY/xEIzNUOuMqBzWEOvTTsivF/JtUOrBIsDRxGY0u0qNJK1R5WFuSYr3TA5sdu3ytMcu+mKY4THSJN8uuri/tXVcoF+ywLOS6NRFbHDJPtJGcy1XQwJJAgvdw+sIvQA=,iv:dvk3FYXHr2N6gYIw2OqbYiHn6FfXzuyHqZvJIo6IVGM=,tag:rjnNkJSGpXJ762EyjDltXg==,type:str]\",\n\t\t\"pgp\": [\n\t\t\t{\n\t\t\t\t\"created_at\": \"2019-12-10T22:45:55Z\",\n\t\t\t\t\"enc\": \"-----BEGIN PGP MESSAGE-----\\n\\nwcBMAyUpShfNkFB/AQgAMSeWf3F8kIm8EFiVgGVQgWGIHUVoolToi8d8lAC8/UdK\\ncx9dIqlR43IFvvmCKyNZ6Q+/a1ERc07xLpVp3wmN80sE4NZCGZioThZjp2qNS42e\\n/HtLfDu+Rie1eKcXEik40rMDn7d8gaFVOpD3FbzoZUFVm8hN5ChzqQqL1nLy9ZgY\\nbthH3Rzt58Z1/sxARLNF2/yUqAEX/YEoL0MxM68Z55kwiMqSZ1rdmLKKfXdJbdoL\\nSRrFyi+XaAwr1bTD+BnqHqgmYEEWEfHPDW7e1St/4IS4PU98kKuVLjhBKbfTRUpF\\nkzxt+XQV6uDfPzdeOzf+JrFMRaoxTRMpcUi4Jn0vstLgAeSAjSzqkUr6DEVsuS8V\\nAqRD4Z9I4HHgy+GYruDQ4kDtTvPgbeUWFma5yz25JOoORZIHaGiEB3T8ZhrFD8VI\\ndFLxtxLtCeCg5BhRcrxFgWPQCMK/uCt/GFniNf4Y2OGOHQA=\\n=r/lV\\n-----END PGP MESSAGE-----\",\n\t\t\t\t\"fp\": \"FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"created_at\": \"2019-12-10T22:45:55Z\",\n\t\t\t\t\"enc\": \"-----BEGIN PGP MESSAGE-----\\n\\nwYwDXFUltYFwV4MBBABs0ZEghsU+mdsRFROvlT8ACqk4Ru0Bssw3N+lkSrpR+QyY\\nuRgAFNmZgPKz4DhZLHbhOD0zAAHuMCGriXVqtxMYMveX1nbXom+ayBmU0jja+6X2\\njwk0MghHS1bgIsGrrhPoD7c3iirdaXSgHKAxwl4bpw5OxW6t91moOtJ4DAyGXdLg\\nAeTkQxUyLFEeUbx4xX7kNCm+4Yho4CngDuH4oOD44gSWJsjgU+XiRBuJa50tiloC\\nA10yQkWZtuyPOWppO5qOdXqV3XDIeOBl5JSNFuv5B80w8UIYhPPXWpriV1nBveE/\\nwAA=\\n=Vg44\\n-----END PGP MESSAGE-----\",\n\t\t\t\t\"fp\": \"D7229043384BCC60326C6FB9D8720D957C3D3074\"\n\t\t\t}\n\t\t],\n\t\t\"unencrypted_suffix\": \"_unencrypted\",\n\t\t\"version\": \"3.5.0\"\n\t}\n}"
        },
        {
          "name": "example.txt",
          "type": "blob",
          "size": 1.9775390625,
          "content": "{\n\t\"data\": \"ENC[AES256_GCM,data:p6kOd9e7KOYw47VlNlKa52wPFfbY3xaJYQrO5QDT1LyNvUIVBSRTrJxvn5MCC7vdnTOkcBzWmlr6Z/Q23/sx22++3Y7nXTSgFPQxPVIA8X33OoIsCamNHS8+8JWOReALCf2Cd3rzedu0GWR+/f2YBSHNA3C4nffEDbWbXRyAvcvCv3G4umH+Jh9auWUlfbk3Bx/8LvX6DodcxhQ=,iv:ESrDyOG6qetEWGBNHWRpT6ra1NhpaFH3SnjBSdMj2r0=,tag:aP5vOboB64cJDUls9WKsTA==,type:str]\",\n\t\"sops\": {\n\t\t\"kms\": null,\n\t\t\"gcp_kms\": null,\n\t\t\"azure_kv\": null,\n\t\t\"lastmodified\": \"2019-12-10T22:44:49Z\",\n\t\t\"mac\": \"ENC[AES256_GCM,data:wN+npCzfJVz6nwZQ40FTPD23Ly1CEiU1N6aDua+Mgj9cH7NwJOklW8QKTs3+q3f4HEkbeuFE6VQN+Jm05Zsj1inGjAdG2MfDurspJl6Jpe5DBKgk3zudAcc66gm4T4Dn3h7zFvNovOl+VEa4+ntaxIoVNugVDq3ZLTj/wMd3XwU=,iv:RadNg2jPeQEkE1F/GzrdcPIZHbxXoZpo+iOHpRGlLhc=,tag:ID8N4xhN7p3N5EYGTkYKxg==,type:str]\",\n\t\t\"pgp\": [\n\t\t\t{\n\t\t\t\t\"created_at\": \"2019-12-10T22:44:49Z\",\n\t\t\t\t\"enc\": \"-----BEGIN PGP MESSAGE-----\\n\\nwcBMAyUpShfNkFB/AQgANOTnicDHAmqwi76yIm2eAgzm32k34hsPS40vKeCKtbIP\\niR91/hDmklYXgR9yL9xgBI0SRTMGySSk9YJ9daZd61JVh1IVuxr93Y8GSxhDldAn\\n1Wc2dXJ24x7zxfUs4sfZYCtzXZBUb/eAPLDIkeKPzkVKN4kLdVdccOig/2lOuuVo\\nw3Xy+m7cx0VPdsFFzVWok15oHj8n0+J8v6Vnyiyx7yI7xgsynNwpZDUN+K15NyGs\\nkaO21AeQnxDWmwo4H93+r10esFYns0kyLOCNwN5/XLskT31f9MCo8H4bBDyeO1lE\\nrfLKAn0mh81qKedQLTssjElCLBgY4CpcL9B688P/otLgAeSR+v/JrgslAw+QhiBC\\nPxqj4ZUC4KbgFeERieC34sjLWuPgxOUoC769iqiM3ArscWLYG6jYb9Acigwtf5/r\\nNkFoXHoZPOD15Ne/ElmCDPowh0aAFCwVp6/ipRc0teELTQA=\\n=FyYT\\n-----END PGP MESSAGE-----\",\n\t\t\t\t\"fp\": \"FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"created_at\": \"2019-12-10T22:44:49Z\",\n\t\t\t\t\"enc\": \"-----BEGIN PGP MESSAGE-----\\n\\nwYwDXFUltYFwV4MBBACebuDSGC4caG1iSviC+IQKXw/mQXmWDDWLA1RDH7/ZEa/2\\nqsA0Eb5bsd4Hf5pW6UpK/TDZpFn3eKeCn8wP2G792Ez19UmhwHB+0Zid9Zq76UAZ\\n1bcwX2YJeCgd8/OgIxfh7a6MDDz6TDNGL916BIE6kFJwT3Vvm9EzF7vDglE5mtLg\\nAeTK87HB76QLJNDI03Q8JYrN4e1S4KzgxOFhkeAv4lmhR+zgCeU3u0ripltx+Hys\\ngtiGJSnuoJrYrwhSIO8JOoc2iR0bkuCn5Gf4VirHEUwrIUqgQVsmLQnick1iv+Hk\\n3QA=\\n=exjM\\n-----END PGP MESSAGE-----\",\n\t\t\t\t\"fp\": \"D7229043384BCC60326C6FB9D8720D957C3D3074\"\n\t\t\t}\n\t\t],\n\t\t\"unencrypted_suffix\": \"_unencrypted\",\n\t\t\"version\": \"3.5.0\"\n\t}\n}"
        },
        {
          "name": "example.yaml",
          "type": "blob",
          "size": 5.0146484375,
          "content": "myapp1: ENC[AES256_GCM,data:zlGNmhTYX5xol4ZZFsiaoGkD73nn,iv:ql9mkhoU1I64E/FJi3iA0HaAe2U3kQVFee2ZLwPnBik=,tag:SqVSfu/JkRrwqidAT/i0pg==,type:str]\napp2:\n    db:\n        user: ENC[AES256_GCM,data:tQ1l,iv:o9MiMveNYO7T82yDab+4pAt17DO6B4wl8yGy3oFbDb8=,tag:0RjvUUtSQwaUc9SF3RSTZQ==,type:str]\n        password: ENC[AES256_GCM,data:8Ll+TDCgzQ==,iv:aao0OSVdFwaB9EGZ0O+Wn5bRJ6do7hgiQioqiwDi1w0=,tag:WKj0nuSSPkm2dBOBwinYvg==,type:str]\n        #ENC[AES256_GCM,data:uPuUQAahmq1xL5L2B0+a2gHSl7zXucjqa4Kr0AgNKTpgHw3IPx2lCoK+,iv:qYxjRmWMir47YKhmrrHwV0atmGjcJ3Dts+xvQ+6skHQ=,tag:dsj+0DsfiDyJNGUmvZwnHg==,type:comment]\n    key: ENC[AES256_GCM,data:xRjmLiX4BCoSUElToUs5twDq1WNWQNvNMi8yitXly43iGQiwltIs0FsY5u+7fzLepS66oLTGdL0NfWwCGxksYYzUKz5OXRLEatacZP40D71861zu+njmGdXepY0q0q5VOG7ObgIAMMMElVKRIFdjpVgmgUa+/h6R77mEbDztk6lqb28r15XyR6GmdubierTE7aialFzNoC+XO/yk7bnMi0XA/aomj1H5RdZ37LBR2k+rhqXmhkPdGTdJ39t4Ou1Q2Oc4RHRGvgs/EeFqQHcq0AilqXsFIv/PE0bQP564LaOcXK33B+PnoV1D+lXZ7mLOjKlq04c+UojwXjpZeXBr6Ip4H3dAGkPAoQKMtyGwHYzuLCNesxwPv2tPqbxkbVev0AKezGhnPjvCNvRN3S1Y0LPf1atfwzOCBQBhdUTpmXtxCdTNG0cUUZjeIKAyJXDWJooYHlstzDti/dSGMEedOnKq6648Yp7tLNDjAg5CGbDEWjTWehtqgvixUoRdYc2/r/ie3t09XB9h70BzLFDnbNdTNHhg0/aivHeDf8LJ2Co8YvIjLTwlm7GV0mSwzJIoY/2YxXFtw+XFqt+BCt1G8wq3R6OdXZK/+6fUKH/D4EVym5nrGkZIuOCiTB+wpzy09QmZ80Fo+ba0x/1g9ZTMKHk=,iv:ZtzvrO7QSHEOCnKCrIYcaesKnyScV8KaHZr22tUMLlU=,tag:2A3nJBIPF2Q3FlwMYLvG2w==,type:str]\nnumber: ENC[AES256_GCM,data:DX0qiTOWhQvG/w==,iv:ouWsby8JoFwCRj/mLVCnNcYhP2sdyf4h6nwZuGksE7Q=,tag:lPU6AId2JrlquHnYRw+E8Q==,type:float]\nan_array:\n- ENC[AES256_GCM,data:vyczE8EQr9qHkaM=,iv:sT5jKk3LZ61Zq/neTli5tcnDFxCxY5RuGr2k5oGQWJQ=,tag:1HgaHWfyh6EJLkI1V2kOrw==,type:str]\n- ENC[AES256_GCM,data:XtBinnYXR7bx1GY=,iv:KvT9smKVmgMNrab+RzfuWscyvJav2r8j1P08ucNmhgQ=,tag:IllAEvIPPeKOfqi1XbmT8w==,type:str]\n- ENC[AES256_GCM,data:gpZ7nwWTGaI+Ti+lk+CPQOoM0ypwK7UMMBUiZAniQHDNJelipqc8hyhNeV+tpJLNaRt74OHs04EX8g==,iv:mKcwVelqLvwVDPjR8NeyMZ7AhsjRgmnYmyEuwPNPrQ8=,tag:vrkoccUfJs105yLCmXYYCw==,type:str]\n- ENC[AES256_GCM,data:L9jPh+7+XsdqEpUnFcD4nA==,iv:xyfKjOXVrBDCIQG5786pSu5yvHdl/PK8eVxkIUWoCIw=,tag:Q0wlTV2e2vZeU6eTF5Oacg==,type:str]\nsomebooleans:\n- ENC[AES256_GCM,data:ExiXxg==,iv:K7FUwomqdA7o9lzvNoAMH/wbXs08FextTGGeJKnaatU=,tag:A9UntgvPIcappmeM3jsbdA==,type:bool]\n- ENC[AES256_GCM,data:3I0AVdM=,iv:q4YKnRIKufREPmwT4sz8plcsOD6iem/tY3NMUV0STBE=,tag:0w4OMKClWTzjKhqsJZT8JA==,type:bool]\nthis:\n    is:\n        a:\n            nested:\n                value: ENC[AES256_GCM,data:oFn5fJS5+slb2sCdLY5SxZ+iWeowWtf4wn9g,iv:MZ7i4tZnfCQhQRUwXV2fYQPIJ0tTUFLiD9xuB+765e8=,tag:ZEjE5jvxE5HkN3mma84pKw==,type:str]\n                #ENC[AES256_GCM,data:WwWiKtMsD1shPe5kPHOh2bJqQPGHwxa6GYrR1y14wiid,iv:AZPaRyVDOl100PvBPMeq0lt6/O5ZUhzWX5UmWNABWvM=,tag:PBReK6Ap/VHxncn0G4qtEA==,type:comment]\n                #ENC[AES256_GCM,data:eYRaxgs3vGeS96+ZDV8GYrwbvsrMtnWHOtsT2045tD2mlfOD,iv:/RVNEWuBlxhhY8OlJPbS/81QJukXZu1EWnPUQwrcin4=,tag:DybgrXKGWxoRyIQOlc+UMA==,type:comment]\n                #ENC[AES256_GCM,data:JXKEWGBg4eeCdeQ=,iv:K5keuEjyekf7a3q7WBOKwljsHGXRdQteJcXeeKvHo28=,tag:60VtIdsy13qSKPIEWHUUNg==,type:comment]\nsomelist_unencrypted:\n- all elements of this list\n- remain in clear text\n- because of the _unencrypted suffix in the key\nnested_unencrypted:\n    this:\n        is:\n            all: going to remain in clear text\nsops:\n    kms: []\n    gcp_kms: []\n    azure_kv: []\n    lastmodified: '2019-12-10T22:45:53Z'\n    mac: ENC[AES256_GCM,data:WDjMv0eWcyPQzZlr3MppeAMQavN88xv5LzI/9wOlg+WPhRoTdrvgFpWowyWvTdUC/i0ybRQRg2u/Wam0kaqzMDpl/E806Gp9hgJcSneqydDJqPiMh+HpXkXWpc70xbYg8/gc1l7eIfSG7rS1dC2t2je60OAIfC/5zAXrL9KH4Ho=,iv:h0hWhb+46upix6K7hZfNNQoiX7WCapiMTv5I/keZsm4=,tag:v7mVbTN3HWmekol5iaO8FA==,type:str]\n    pgp:\n    -   created_at: '2019-12-10T22:45:53Z'\n        enc: |-\n            -----BEGIN PGP MESSAGE-----\n\n            wcBMAyUpShfNkFB/AQgAE0MaWAQGbTKY7Xg3fDNtzlvnVBkkQRHsLt5kUTu2nAy4\n            sPX0NRXPVF/tAMxr9mI2fRjKnNBXKpOAecNis85D/QEkfflG8/syGkqiJqy9Nqon\n            WSm1bNriPfD4PL850688EJe49Xrsz6rVbW5FYZCHMbnPxvmoheMJRxLonW3/eWPy\n            IjJ9i6Z7W175mv1y7FELOimdQeelynp4r8bOuuq1BhePB4+wJXihw9n0ovuLklpl\n            Kr2iCmIUibSywlEO/LGQT/VXo6R7xgSN2Xg0RwWfflajYHNhVkHlnNYzkACjvdhj\n            ph1M5fLGDqPu+ySSe93EyahNhdwKgQ7R9yF8/13+QdLgAeRmrBgh0N54mQQAQyL7\n            mH/i4SWi4BjgmeHgUeBL4qcm2avg6OUasVJQHlTeA8D+c3TwKSTRVDijN4GBadYJ\n            Z5/vXKOseeBk5JWCnIHC/MtjOkuPt53nvGzi3lYvW+F0FQA=\n            =RDyn\n            -----END PGP MESSAGE-----\n        fp: FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4\n    -   created_at: '2019-12-10T22:45:53Z'\n        enc: |-\n            -----BEGIN PGP MESSAGE-----\n\n            wYwDXFUltYFwV4MBBABpm+tFhFhv3A7A/L/p6nL3HXKKhONrgguYgXA/hhSg4/bD\n            1Po5pQhCM4yb3gqWewxgVpGNKFr/Gl+kN9eZ3LXp5nEdhei/aQn7BbWkhph5PKt6\n            faiEZAL5PNHvktvEQwPsfNJvxe8QT2Z9oFmlueP0n3mCZz3UV9LZHNwOP7XfzdLg\n            AeRzUGrZK43KavmIjdgPXcd/4ZW14NPgNeGm8+BO4nD26Fvgh+UiCb0TpBiI7WsX\n            HQGUlFjuR6Vd7Q+vg8B/1Ovm3fUw7uCG5Gc2WeB0M+pXaLYS9bCDL9jisGOkD+Ef\n            ZAA=\n            =mqGc\n            -----END PGP MESSAGE-----\n        fp: D7229043384BCC60326C6FB9D8720D957C3D3074\n    unencrypted_suffix: _unencrypted\n    version: 3.5.0\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "functional-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcpkms",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 7.4150390625,
          "content": "module github.com/getsops/sops/v3\n\ngo 1.22\ntoolchain go1.22.9\n\nrequire (\n\tcloud.google.com/go/kms v1.20.4\n\tcloud.google.com/go/storage v1.49.0\n\tfilippo.io/age v1.2.1\n\tgithub.com/Azure/azure-sdk-for-go/sdk/azcore v1.16.0\n\tgithub.com/Azure/azure-sdk-for-go/sdk/azidentity v1.8.0\n\tgithub.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys v1.3.0\n\tgithub.com/ProtonMail/go-crypto v1.1.3\n\tgithub.com/aws/aws-sdk-go-v2 v1.32.7\n\tgithub.com/aws/aws-sdk-go-v2/config v1.28.7\n\tgithub.com/aws/aws-sdk-go-v2/credentials v1.17.48\n\tgithub.com/aws/aws-sdk-go-v2/feature/s3/manager v1.17.45\n\tgithub.com/aws/aws-sdk-go-v2/service/kms v1.37.8\n\tgithub.com/aws/aws-sdk-go-v2/service/s3 v1.72.0\n\tgithub.com/aws/aws-sdk-go-v2/service/sts v1.33.3\n\tgithub.com/blang/semver v3.5.1+incompatible\n\tgithub.com/fatih/color v1.18.0\n\tgithub.com/getsops/gopgagent v0.0.0-20241224165529-7044f28e491e\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510\n\tgithub.com/goware/prefixer v0.0.0-20160118172347-395022866408\n\tgithub.com/hashicorp/go-cleanhttp v0.5.2\n\tgithub.com/hashicorp/vault/api v1.15.0\n\tgithub.com/lib/pq v1.10.9\n\tgithub.com/mitchellh/go-homedir v1.1.0\n\tgithub.com/mitchellh/go-wordwrap v1.0.1\n\tgithub.com/ory/dockertest/v3 v3.11.0\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/sirupsen/logrus v1.9.3\n\tgithub.com/stretchr/testify v1.10.0\n\tgithub.com/urfave/cli v1.22.16\n\tgolang.org/x/net v0.33.0\n\tgolang.org/x/sys v0.29.0\n\tgolang.org/x/term v0.28.0\n\tgoogle.golang.org/api v0.214.0\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241223144023-3abc09e42ca8\n\tgoogle.golang.org/grpc v1.69.2\n\tgoogle.golang.org/protobuf v1.36.1\n\tgopkg.in/ini.v1 v1.67.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tcel.dev/expr v0.19.1 // indirect\n\tcloud.google.com/go v0.117.0 // indirect\n\tcloud.google.com/go/auth v0.13.0 // indirect\n\tcloud.google.com/go/auth/oauth2adapt v0.2.6 // indirect\n\tcloud.google.com/go/compute/metadata v0.6.0 // indirect\n\tcloud.google.com/go/iam v1.3.0 // indirect\n\tcloud.google.com/go/longrunning v0.6.3 // indirect\n\tcloud.google.com/go/monitoring v1.22.0 // indirect\n\tdario.cat/mergo v1.0.1 // indirect\n\tgithub.com/Azure/azure-sdk-for-go/sdk/internal v1.10.0 // indirect\n\tgithub.com/Azure/azure-sdk-for-go/sdk/security/keyvault/internal v1.1.0 // indirect\n\tgithub.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 // indirect\n\tgithub.com/AzureAD/microsoft-authentication-library-for-go v1.3.2 // indirect\n\tgithub.com/GoogleCloudPlatform/opentelemetry-operations-go/detectors/gcp v1.25.0 // indirect\n\tgithub.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric v0.49.0 // indirect\n\tgithub.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/resourcemapping v0.49.0 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.2 // indirect\n\tgithub.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.22 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.26 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.26 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/v4a v1.3.26 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/sso v1.24.8 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.7 // indirect\n\tgithub.com/aws/smithy-go v1.22.1 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.3.0 // indirect\n\tgithub.com/census-instrumentation/opencensus-proto v0.4.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/cloudflare/circl v1.5.0 // indirect\n\tgithub.com/cncf/xds/go v0.0.0-20241223141626-cff3c89139a3 // indirect\n\tgithub.com/containerd/continuity v0.4.5 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.6 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/docker/cli v27.4.1+incompatible // indirect\n\tgithub.com/docker/docker v27.4.1+incompatible // indirect\n\tgithub.com/docker/go-connections v0.5.0 // indirect\n\tgithub.com/docker/go-units v0.5.0 // indirect\n\tgithub.com/envoyproxy/go-control-plane v0.13.1 // indirect\n\tgithub.com/envoyproxy/protoc-gen-validate v1.1.0 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/go-jose/go-jose/v4 v4.0.4 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-viper/mapstructure/v2 v2.2.1 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang-jwt/jwt/v5 v5.2.1 // indirect\n\tgithub.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8 // indirect\n\tgithub.com/google/s2a-go v0.1.8 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/googleapis/enterprise-certificate-proxy v0.3.4 // indirect\n\tgithub.com/googleapis/gax-go/v2 v2.14.1 // indirect\n\tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n\tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n\tgithub.com/hashicorp/go-retryablehttp v0.7.7 // indirect\n\tgithub.com/hashicorp/go-rootcerts v1.0.2 // indirect\n\tgithub.com/hashicorp/go-secure-stdlib/parseutil v0.1.8 // indirect\n\tgithub.com/hashicorp/go-secure-stdlib/strutil v0.1.2 // indirect\n\tgithub.com/hashicorp/go-sockaddr v1.0.7 // indirect\n\tgithub.com/hashicorp/hcl v1.0.0 // indirect\n\tgithub.com/kylelemons/godebug v1.1.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/moby/docker-image-spec v1.3.1 // indirect\n\tgithub.com/moby/sys/user v0.3.0 // indirect\n\tgithub.com/moby/term v0.5.0 // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.1.0 // indirect\n\tgithub.com/opencontainers/runc v1.2.3 // indirect\n\tgithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c // indirect\n\tgithub.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/ryanuber/go-glob v1.0.0 // indirect\n\tgithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb // indirect\n\tgithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 // indirect\n\tgithub.com/xeipuuv/gojsonschema v1.2.0 // indirect\n\tgo.opentelemetry.io/auto/sdk v1.1.0 // indirect\n\tgo.opentelemetry.io/contrib/detectors/gcp v1.33.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.58.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.58.0 // indirect\n\tgo.opentelemetry.io/otel v1.33.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.33.0 // indirect\n\tgo.opentelemetry.io/otel/sdk v1.33.0 // indirect\n\tgo.opentelemetry.io/otel/sdk/metric v1.33.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.33.0 // indirect\n\tgolang.org/x/crypto v0.31.0 // indirect\n\tgolang.org/x/oauth2 v0.24.0 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgolang.org/x/time v0.8.0 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20241223144023-3abc09e42ca8 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20241223144023-3abc09e42ca8 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 35.3896484375,
          "content": "c2sp.org/CCTV/age v0.0.0-20240306222714-3ec4d716e805 h1:u2qwJeEvnypw+OCPUHmoZE3IqwfuN5kgDfo5MLzpNM0=\nc2sp.org/CCTV/age v0.0.0-20240306222714-3ec4d716e805/go.mod h1:FomMrUJ2Lxt5jCLmZkG3FHa72zUprnhd3v/Z18Snm4w=\ncel.dev/expr v0.19.1 h1:NciYrtDRIR0lNCnH1LFJegdjspNx9fI59O7TWcua/W4=\ncel.dev/expr v0.19.1/go.mod h1:MrpN08Q+lEBs+bGYdLxxHkZoUSsCp0nSKTs0nTymJgw=\ncloud.google.com/go v0.117.0 h1:Z5TNFfQxj7WG2FgOGX1ekC5RiXrYgms6QscOm32M/4s=\ncloud.google.com/go v0.117.0/go.mod h1:ZbwhVTb1DBGt2Iwb3tNO6SEK4q+cplHZmLWH+DelYYc=\ncloud.google.com/go/auth v0.13.0 h1:8Fu8TZy167JkW8Tj3q7dIkr2v4cndv41ouecJx0PAHs=\ncloud.google.com/go/auth v0.13.0/go.mod h1:COOjD9gwfKNKz+IIduatIhYJQIc0mG3H102r/EMxX6Q=\ncloud.google.com/go/auth/oauth2adapt v0.2.6 h1:V6a6XDu2lTwPZWOawrAa9HUK+DB2zfJyTuciBG5hFkU=\ncloud.google.com/go/auth/oauth2adapt v0.2.6/go.mod h1:AlmsELtlEBnaNTL7jCj8VQFLy6mbZv0s4Q7NGBeQ5E8=\ncloud.google.com/go/compute/metadata v0.6.0 h1:A6hENjEsCDtC1k8byVsgwvVcioamEHvZ4j01OwKxG9I=\ncloud.google.com/go/compute/metadata v0.6.0/go.mod h1:FjyFAW1MW0C203CEOMDTu3Dk1FlqW3Rga40jzHL4hfg=\ncloud.google.com/go/iam v1.3.0 h1:4Wo2qTaGKFtajbLpF6I4mywg900u3TLlHDb6mriLDPU=\ncloud.google.com/go/iam v1.3.0/go.mod h1:0Ys8ccaZHdI1dEUilwzqng/6ps2YB6vRsjIe00/+6JY=\ncloud.google.com/go/kms v1.20.4 h1:CJ0hMpOg1ANN9tx/a/GPJ+Uxudy8k6f3fvGFuTHiE5A=\ncloud.google.com/go/kms v1.20.4/go.mod h1:gPLsp1r4FblUgBYPOcvI/bUPpdMg2Jm1ZVKU4tQUfcc=\ncloud.google.com/go/logging v1.12.0 h1:ex1igYcGFd4S/RZWOCU51StlIEuey5bjqwH9ZYjHibk=\ncloud.google.com/go/logging v1.12.0/go.mod h1:wwYBt5HlYP1InnrtYI0wtwttpVU1rifnMT7RejksUAM=\ncloud.google.com/go/longrunning v0.6.3 h1:A2q2vuyXysRcwzqDpMMLSI6mb6o39miS52UEG/Rd2ng=\ncloud.google.com/go/longrunning v0.6.3/go.mod h1:k/vIs83RN4bE3YCswdXC5PFfWVILjm3hpEUlSko4PiI=\ncloud.google.com/go/monitoring v1.22.0 h1:mQ0040B7dpuRq1+4YiQD43M2vW9HgoVxY98xhqGT+YI=\ncloud.google.com/go/monitoring v1.22.0/go.mod h1:hS3pXvaG8KgWTSz+dAdyzPrGUYmi2Q+WFX8g2hqVEZU=\ncloud.google.com/go/storage v1.49.0 h1:zenOPBOWHCnojRd9aJZAyQXBYqkJkdQS42dxL55CIMw=\ncloud.google.com/go/storage v1.49.0/go.mod h1:k1eHhhpLvrPjVGfo0mOUPEJ4Y2+a/Hv5PiwehZI9qGU=\ncloud.google.com/go/trace v1.11.2 h1:4ZmaBdL8Ng/ajrgKqY5jfvzqMXbrDcBsUGXOT9aqTtI=\ncloud.google.com/go/trace v1.11.2/go.mod h1:bn7OwXd4pd5rFuAnTrzBuoZ4ax2XQeG3qNgYmfCy0Io=\ndario.cat/mergo v1.0.1 h1:Ra4+bf83h2ztPIQYNP99R6m+Y7KfnARDfID+a+vLl4s=\ndario.cat/mergo v1.0.1/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\nfilippo.io/age v1.2.1 h1:X0TZjehAZylOIj4DubWYU1vWQxv9bJpo+Uu2/LGhi1o=\nfilippo.io/age v1.2.1/go.mod h1:JL9ew2lTN+Pyft4RiNGguFfOpewKwSHm5ayKD/A4004=\nfilippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=\nfilippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore v1.16.0 h1:JZg6HRh6W6U4OLl6lk7BZ7BLisIzM9dG1R50zUk9C/M=\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore v1.16.0/go.mod h1:YL1xnZ6QejvQHWJrX/AvhFl4WW4rqHVoKspWNVwFk0M=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity v1.8.0 h1:B/dfvscEQtew9dVuoxqxrUKKv8Ih2f55PydknDamU+g=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity v1.8.0/go.mod h1:fiPSssYvltE08HJchL04dOy+RD4hgrjph0cwGGMntdI=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity/cache v0.3.0 h1:+m0M/LFxN43KvULkDNfdXOgrjtg6UYJPFBJyuEcRCAw=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity/cache v0.3.0/go.mod h1:PwOyop78lveYMRs6oCxjiVyBdyCgIYH6XHIVZO9/SFQ=\ngithub.com/Azure/azure-sdk-for-go/sdk/internal v1.10.0 h1:ywEEhmNahHBihViHepv3xPBn1663uRv2t2q/ESv9seY=\ngithub.com/Azure/azure-sdk-for-go/sdk/internal v1.10.0/go.mod h1:iZDifYGJTIgIIkYRNWPENUnqx6bJ2xnSDFI2tjwZNuY=\ngithub.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys v1.3.0 h1:7rKG7UmnrxX4N53TFhkYqjc+kVUZuw0fL8I3Fh+Ld9E=\ngithub.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys v1.3.0/go.mod h1:Wjo+24QJVhhl/L7jy6w9yzFF2yDOf3cKECAa8ecf9vE=\ngithub.com/Azure/azure-sdk-for-go/sdk/security/keyvault/internal v1.1.0 h1:eXnN9kaS8TiDwXjoie3hMRLuwdUBUMW9KRgOqB3mCaw=\ngithub.com/Azure/azure-sdk-for-go/sdk/security/keyvault/internal v1.1.0/go.mod h1:XIpam8wumeZ5rVMuhdDQLMfIPDf1WO3IzrCRO3e3e3o=\ngithub.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 h1:L/gRVlceqvL25UVaW/CKtUDjefjrs0SPonmDGUVOYP0=\ngithub.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=\ngithub.com/AzureAD/microsoft-authentication-extensions-for-go/cache v0.1.1 h1:WJTmL004Abzc5wDB5VtZG2PJk5ndYDgVacGqfirKxjM=\ngithub.com/AzureAD/microsoft-authentication-extensions-for-go/cache v0.1.1/go.mod h1:tCcJZ0uHAmvjsVYzEFivsRTN00oz5BEsRgQHu5JZ9WE=\ngithub.com/AzureAD/microsoft-authentication-library-for-go v1.3.2 h1:kYRSnvJju5gYVyhkij+RTJ/VR6QIUaCfWeaFm2ycsjQ=\ngithub.com/AzureAD/microsoft-authentication-library-for-go v1.3.2/go.mod h1:wP83P5OoQ5p6ip3ScPr0BAq0BvuPAvacpEuSzyouqAI=\ngithub.com/BurntSushi/toml v1.4.0/go.mod h1:ukJfTF/6rtPPRCnwkur4qwRxa8vTRFBF0uk2lLoLwho=\ngithub.com/GoogleCloudPlatform/opentelemetry-operations-go/detectors/gcp v1.25.0 h1:3c8yed4lgqTt+oTQ+JNMDo+F4xprBf+O/il4ZC0nRLw=\ngithub.com/GoogleCloudPlatform/opentelemetry-operations-go/detectors/gcp v1.25.0/go.mod h1:obipzmGjfSjam60XLwGfqUkJsfiheAl+TUjG+4yzyPM=\ngithub.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric v0.49.0 h1:o90wcURuxekmXrtxmYWTyNla0+ZEHhud6DI1ZTxd1vI=\ngithub.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric v0.49.0/go.mod h1:6fTWu4m3jocfUZLYF5KsZC1TUfRvEjs7lM4crme/irw=\ngithub.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/cloudmock v0.49.0 h1:jJKWl98inONJAr/IZrdFQUWcwUO95DLY1XMD1ZIut+g=\ngithub.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/cloudmock v0.49.0/go.mod h1:l2fIqmwB+FKSfvn3bAD/0i+AXAxhIZjTK2svT/mgUXs=\ngithub.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/resourcemapping v0.49.0 h1:GYUJLfvd++4DMuMhCFLgLXvFwofIxh/qOwoGuS/LTew=\ngithub.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/resourcemapping v0.49.0/go.mod h1:wRbFgBQUVm1YXrvWKofAEmq9HNJTDphbAaJSSX01KUI=\ngithub.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=\ngithub.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=\ngithub.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 h1:TngWCqHvy9oXAN6lEVMRuU21PR1EtLVZJmdB18Gu3Rw=\ngithub.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5/go.mod h1:lmUJ/7eu/Q8D7ML55dXQrVaamCz2vxCfdQBasLZfHKk=\ngithub.com/ProtonMail/go-crypto v1.1.3 h1:nRBOetoydLeUb4nHajyO2bKqMLfWQ/ZPwkXqXxPxCFk=\ngithub.com/ProtonMail/go-crypto v1.1.3/go.mod h1:rA3QumHc/FZ8pAHreoekgiAbzpNsfQAosU5td4SnOrE=\ngithub.com/aws/aws-sdk-go-v2 v1.32.7 h1:ky5o35oENWi0JYWUZkB7WYvVPP+bcRF5/Iq7JWSb5Rw=\ngithub.com/aws/aws-sdk-go-v2 v1.32.7/go.mod h1:P5WJBrYqqbWVaOxgH0X/FYYD47/nooaPOZPlQdmiN2U=\ngithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7 h1:lL7IfaFzngfx0ZwUGOZdsFFnQ5uLvR0hWqqhyE7Q9M8=\ngithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7/go.mod h1:QraP0UcVlQJsmHfioCrveWOC1nbiWUl3ej08h4mXWoc=\ngithub.com/aws/aws-sdk-go-v2/config v1.28.7 h1:GduUnoTXlhkgnxTD93g1nv4tVPILbdNQOzav+Wpg7AE=\ngithub.com/aws/aws-sdk-go-v2/config v1.28.7/go.mod h1:vZGX6GVkIE8uECSUHB6MWAUsd4ZcG2Yq/dMa4refR3M=\ngithub.com/aws/aws-sdk-go-v2/credentials v1.17.48 h1:IYdLD1qTJ0zanRavulofmqut4afs45mOWEI+MzZtTfQ=\ngithub.com/aws/aws-sdk-go-v2/credentials v1.17.48/go.mod h1:tOscxHN3CGmuX9idQ3+qbkzrjVIx32lqDSU1/0d/qXs=\ngithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.22 h1:kqOrpojG71DxJm/KDPO+Z/y1phm1JlC8/iT+5XRmAn8=\ngithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.22/go.mod h1:NtSFajXVVL8TA2QNngagVZmUtXciyrHOt7xgz4faS/M=\ngithub.com/aws/aws-sdk-go-v2/feature/s3/manager v1.17.45 h1:ZxB8WFVYwolhDZxuZXoesHkl+L9cXLWy0K/G0QkNATc=\ngithub.com/aws/aws-sdk-go-v2/feature/s3/manager v1.17.45/go.mod h1:1krrbyoFFDqaNldmltPTP+mK3sAXLHPoaFtISOw2Hkk=\ngithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.26 h1:I/5wmGMffY4happ8NOCuIUEWGUvvFp5NSeQcXl9RHcI=\ngithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.26/go.mod h1:FR8f4turZtNy6baO0KJ5FJUmXH/cSkI9fOngs0yl6mA=\ngithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.26 h1:zXFLuEuMMUOvEARXFUVJdfqZ4bvvSgdGRq/ATcrQxzM=\ngithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.26/go.mod h1:3o2Wpy0bogG1kyOPrgkXA8pgIfEEv0+m19O9D5+W8y8=\ngithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1 h1:VaRN3TlFdd6KxX1x3ILT5ynH6HvKgqdiXoTxAF4HQcQ=\ngithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1/go.mod h1:FbtygfRFze9usAadmnGJNc8KsP346kEe+y2/oyhGAGc=\ngithub.com/aws/aws-sdk-go-v2/internal/v4a v1.3.26 h1:GeNJsIFHB+WW5ap2Tec4K6dzcVTsRbsT1Lra46Hv9ME=\ngithub.com/aws/aws-sdk-go-v2/internal/v4a v1.3.26/go.mod h1:zfgMpwHDXX2WGoG84xG2H+ZlPTkJUU4YUvx2svLQYWo=\ngithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1 h1:iXtILhvDxB6kPvEXgsDhGaZCSC6LQET5ZHSdJozeI0Y=\ngithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1/go.mod h1:9nu0fVANtYiAePIBh2/pFUSwtJ402hLnp854CNoDOeE=\ngithub.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.7 h1:tB4tNw83KcajNAzaIMhkhVI2Nt8fAZd5A5ro113FEMY=\ngithub.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.7/go.mod h1:lvpyBGkZ3tZ9iSsUIcC2EWp+0ywa7aK3BLT+FwZi+mQ=\ngithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.7 h1:8eUsivBQzZHqe/3FE+cqwfH+0p5Jo8PFM/QYQSmeZ+M=\ngithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.7/go.mod h1:kLPQvGUmxn/fqiCrDeohwG33bq2pQpGeY62yRO6Nrh0=\ngithub.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.7 h1:Hi0KGbrnr57bEHWM0bJ1QcBzxLrL/k2DHvGYhb8+W1w=\ngithub.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.7/go.mod h1:wKNgWgExdjjrm4qvfbTorkvocEstaoDl4WCvGfeCy9c=\ngithub.com/aws/aws-sdk-go-v2/service/kms v1.37.8 h1:KbLZjYqhQ9hyB4HwXiheiflTlYQa0+Fz0Ms/rh5f3mk=\ngithub.com/aws/aws-sdk-go-v2/service/kms v1.37.8/go.mod h1:ANs9kBhK4Ghj9z1W+bsr3WsNaPF71qkgd6eE6Ekol/Y=\ngithub.com/aws/aws-sdk-go-v2/service/s3 v1.72.0 h1:SAfh4pNx5LuTafKKWR02Y+hL3A+3TX8cTKG1OIAJaBk=\ngithub.com/aws/aws-sdk-go-v2/service/s3 v1.72.0/go.mod h1:r+xl5yzMk9083rMR+sJ5TYj9Tihvf/l1oxzZXDgGj2Q=\ngithub.com/aws/aws-sdk-go-v2/service/sso v1.24.8 h1:CvuUmnXI7ebaUAhbJcDy9YQx8wHR69eZ9I7q5hszt/g=\ngithub.com/aws/aws-sdk-go-v2/service/sso v1.24.8/go.mod h1:XDeGv1opzwm8ubxddF0cgqkZWsyOtw4lr6dxwmb6YQg=\ngithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.7 h1:F2rBfNAL5UyswqoeWv9zs74N/NanhK16ydHW1pahX6E=\ngithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.7/go.mod h1:JfyQ0g2JG8+Krq0EuZNnRwX0mU0HrwY/tG6JNfcqh4k=\ngithub.com/aws/aws-sdk-go-v2/service/sts v1.33.3 h1:Xgv/hyNgvLda/M9l9qxXc4UFSgppnRczLxlMs5Ae/QY=\ngithub.com/aws/aws-sdk-go-v2/service/sts v1.33.3/go.mod h1:5Gn+d+VaaRgsjewpMvGazt0WfcFO+Md4wLOuBfGR9Bc=\ngithub.com/aws/smithy-go v1.22.1 h1:/HPHZQ0g7f4eUeK6HKglFz8uwVfZKgoI25rb/J+dnro=\ngithub.com/aws/smithy-go v1.22.1/go.mod h1:irrKGvNn1InZwb2d7fkIRNucdfwR8R+Ts3wxYa/cJHg=\ngithub.com/blang/semver v3.5.1+incompatible h1:cQNTCjp13qL8KC3Nbxr/y2Bqb63oX6wdnnjpJbkM4JQ=\ngithub.com/blang/semver v3.5.1+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=\ngithub.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=\ngithub.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=\ngithub.com/census-instrumentation/opencensus-proto v0.4.1 h1:iKLQ0xPNFxR/2hzXZMrBo8f1j86j5WHzznCCQxV/b8g=\ngithub.com/census-instrumentation/opencensus-proto v0.4.1/go.mod h1:4T9NM4+4Vw91VeyqjLS6ao50K5bOcLKN6Q42XnYaRYw=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cloudflare/circl v1.5.0 h1:hxIWksrX6XN5a1L2TI/h53AGPhNHoUBo+TD1ms9+pys=\ngithub.com/cloudflare/circl v1.5.0/go.mod h1:uddAzsPgqdMAYatqJ0lsjX1oECcQLIlRpzZh3pJrofs=\ngithub.com/cncf/xds/go v0.0.0-20241223141626-cff3c89139a3 h1:boJj011Hh+874zpIySeApCX4GeOjPl9qhRF3QuIZq+Q=\ngithub.com/cncf/xds/go v0.0.0-20241223141626-cff3c89139a3/go.mod h1:W+zGtBO5Y1IgJhy4+A9GOqVhqLpfZi+vwmdNXUehLA8=\ngithub.com/containerd/continuity v0.4.5 h1:ZRoN1sXq9u7V6QoHMcVWGhOwDFqZ4B9i5H6un1Wh0x4=\ngithub.com/containerd/continuity v0.4.5/go.mod h1:/lNJvtJKUQStBzpVQ1+rasXO1LAWtUQssk28EZvJ3nE=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.5/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.6 h1:XJtiaUW6dEEqVuZiMTn1ldk455QWwEIsMIJlo5vtkx0=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.6/go.mod h1:oOW0eioCTA6cOiMLiUPZOpcVxMig6NIQQ7OS05n1F4g=\ngithub.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=\ngithub.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f h1:lO4WD4F/rVNCu3HqELle0jiPLLBs70cWOduZpkS1E78=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f/go.mod h1:cuUVRXasLTGF7a8hSLbxyZXjz+1KgoB3wDUb6vlszIc=\ngithub.com/docker/cli v27.4.1+incompatible h1:VzPiUlRJ/xh+otB75gva3r05isHMo5wXDfPRi5/b4hI=\ngithub.com/docker/cli v27.4.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=\ngithub.com/docker/docker v27.4.1+incompatible h1:ZJvcY7gfwHn1JF48PfbyXg7Jyt9ZCWDW+GGXOIxEwp4=\ngithub.com/docker/docker v27.4.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=\ngithub.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=\ngithub.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=\ngithub.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/envoyproxy/go-control-plane v0.13.1 h1:vPfJZCkob6yTMEgS+0TwfTUfbHjfy/6vOJ8hUWX/uXE=\ngithub.com/envoyproxy/go-control-plane v0.13.1/go.mod h1:X45hY0mufo6Fd0KW3rqsGvQMw58jvjymeCzBU3mWyHw=\ngithub.com/envoyproxy/protoc-gen-validate v1.1.0 h1:tntQDh69XqOCOZsDz0lVJQez/2L6Uu2PdjCQwWCJ3bM=\ngithub.com/envoyproxy/protoc-gen-validate v1.1.0/go.mod h1:sXRDRVmzEbkM7CVcM06s9shE/m23dg3wzjl0UWqJ2q4=\ngithub.com/fatih/color v1.18.0 h1:S8gINlzdQ840/4pfAwic/ZE0djQEH3wM94VfqLTZcOM=\ngithub.com/fatih/color v1.18.0/go.mod h1:4FelSpRwEGDpQ12mAdzqdOukCy4u8WUtOY6lkT/6HfU=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/getsops/gopgagent v0.0.0-20241224165529-7044f28e491e h1:y/1nzrdF+RPds4lfoEpNhjfmzlgZtPqyO3jMzrqDQws=\ngithub.com/getsops/gopgagent v0.0.0-20241224165529-7044f28e491e/go.mod h1:awFzISqLJoZLm+i9QQ4SgMNHDqljH6jWV0B36V5MrUM=\ngithub.com/go-jose/go-jose/v4 v4.0.4 h1:VsjPI33J0SB9vQM6PLmNjoHqMQNGPiZ0rHL7Ni7Q6/E=\ngithub.com/go-jose/go-jose/v4 v4.0.4/go.mod h1:NKb5HO1EZccyMpiZNbdUw/14tiXNyUJh188dfnMCAfc=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-sql-driver/mysql v1.8.1 h1:LedoTUt/eveggdHS9qUFC1EFSa8bU2+1pZjSRpvNJ1Y=\ngithub.com/go-sql-driver/mysql v1.8.1/go.mod h1:wEBSXgmK//2ZFJyE+qWnIsVGmvmEKlqwuVSjsCm7DZg=\ngithub.com/go-test/deep v1.0.2 h1:onZX1rnHT3Wv6cqNgYyFOOlgVKJrksuCMCRvJStbMYw=\ngithub.com/go-test/deep v1.0.2/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=\ngithub.com/go-viper/mapstructure/v2 v2.2.1 h1:ZAaOCxANMuZx5RCeg0mBdEZk7DZasvvZIxtHqx8aGss=\ngithub.com/go-viper/mapstructure/v2 v2.2.1/go.mod h1:oJDH3BJKyqBA2TXFhDsKDGDTlndYOZ6rGS0BRZIxGhM=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=\ngithub.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=\ngithub.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8 h1:f+oWsMOmNPc8JmEHVZIycC7hBoQxHH9pNKQORJNozsQ=\ngithub.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8/go.mod h1:wcDNUvekVysuuOpQKo3191zZyTpiI6se1N1ULghS0sw=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/martian/v3 v3.3.3 h1:DIhPTQrbPkgs2yJYdXU/eNACCG5DVQjySNRNlflZ9Fc=\ngithub.com/google/martian/v3 v3.3.3/go.mod h1:iEPrYcgCF7jA9OtScMFQyAlZZ4YXTKEtJ1E6RWzmBA0=\ngithub.com/google/s2a-go v0.1.8 h1:zZDs9gcbt9ZPLV0ndSyQk6Kacx2g/X+SKYovpnz3SMM=\ngithub.com/google/s2a-go v0.1.8/go.mod h1:6iNWHTpQ+nfNRN5E00MSdfDwVesa8hhS32PhPO8deJA=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 h1:El6M4kTTCOh6aBiKaUGG7oYTSPP8MxqL4YI3kZKwcP4=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510/go.mod h1:pupxD2MaaD3pAXIBCelhxNneeOaAeabZDe5s4K6zSpQ=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/googleapis/enterprise-certificate-proxy v0.3.4 h1:XYIDZApgAnrN1c855gTgghdIA6Stxb52D5RnLI1SLyw=\ngithub.com/googleapis/enterprise-certificate-proxy v0.3.4/go.mod h1:YKe7cfqYXjKGpGvmSg28/fFvhNzinZQm8DGnaburhGA=\ngithub.com/googleapis/gax-go/v2 v2.14.1 h1:hb0FFeiPaQskmvakKu5EbCbpntQn48jyHuvrkurSS/Q=\ngithub.com/googleapis/gax-go/v2 v2.14.1/go.mod h1:Hb/NubMaVM88SrNkvl8X/o8XWwDJEPqouaLeN2IUxoA=\ngithub.com/goware/prefixer v0.0.0-20160118172347-395022866408 h1:Y9iQJfEqnN3/Nce9cOegemcy/9Ai5k3huT6E80F3zaw=\ngithub.com/goware/prefixer v0.0.0-20160118172347-395022866408/go.mod h1:PE1ycukgRPJ7bJ9a1fdfQ9j8i/cEcRAoLZzbxYpNB/s=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=\ngithub.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-cleanhttp v0.5.2 h1:035FKYIWjmULyFRBKPs8TBQoi0x6d9G4xc9neXJWAZQ=\ngithub.com/hashicorp/go-cleanhttp v0.5.2/go.mod h1:kO/YDlP8L1346E6Sodw+PrpBSV4/SoxCXGY6BqNFT48=\ngithub.com/hashicorp/go-hclog v1.6.3 h1:Qr2kF+eVWjTiYmU7Y31tYlP1h0q/X3Nl3tPGdaB11/k=\ngithub.com/hashicorp/go-hclog v1.6.3/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=\ngithub.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\ngithub.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\ngithub.com/hashicorp/go-retryablehttp v0.7.7 h1:C8hUCYzor8PIfXHa4UrZkU4VvK8o9ISHxT2Q8+VepXU=\ngithub.com/hashicorp/go-retryablehttp v0.7.7/go.mod h1:pkQpWZeYWskR+D1tR2O5OcBFOxfA7DoAO6xtkuQnHTk=\ngithub.com/hashicorp/go-rootcerts v1.0.2 h1:jzhAVGtqPKbwpyCPELlgNWhE1znq+qwJtW5Oi2viEzc=\ngithub.com/hashicorp/go-rootcerts v1.0.2/go.mod h1:pqUvnprVnM5bf7AOirdbb01K4ccR319Vf4pU3K5EGc8=\ngithub.com/hashicorp/go-secure-stdlib/parseutil v0.1.8 h1:iBt4Ew4XEGLfh6/bPk4rSYmuZJGizr6/x/AEizP0CQc=\ngithub.com/hashicorp/go-secure-stdlib/parseutil v0.1.8/go.mod h1:aiJI+PIApBRQG7FZTEBx5GiiX+HbOHilUdNxUZi4eV0=\ngithub.com/hashicorp/go-secure-stdlib/strutil v0.1.2 h1:kes8mmyCpxJsI7FTwtzRqEy9CdjCtrXrXGuOpxEA7Ts=\ngithub.com/hashicorp/go-secure-stdlib/strutil v0.1.2/go.mod h1:Gou2R9+il93BqX25LAKCLuM+y9U2T4hlwvT1yprcna4=\ngithub.com/hashicorp/go-sockaddr v1.0.7 h1:G+pTkSO01HpR5qCxg7lxfsFEZaG+C0VssTy/9dbT+Fw=\ngithub.com/hashicorp/go-sockaddr v1.0.7/go.mod h1:FZQbEYa1pxkQ7WLpyXJ6cbjpT8q0YgQaK/JakXqGyWw=\ngithub.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/hashicorp/vault/api v1.15.0 h1:O24FYQCWwhwKnF7CuSqP30S51rTV7vz1iACXE/pj5DA=\ngithub.com/hashicorp/vault/api v1.15.0/go.mod h1:+5YTO09JGn0u+b6ySD/LLVf8WkJCPLAL2Vkmrn2+CM8=\ngithub.com/keybase/go-keychain v0.0.0-20231219164618-57a3676c3af6 h1:IsMZxCuZqKuao2vNdfD82fjjgPLfyHLpR41Z88viRWs=\ngithub.com/keybase/go-keychain v0.0.0-20231219164618-57a3676c3af6/go.mod h1:3VeWNIJaW+O5xpRQbPp0Ybqu1vJd/pm7s2F473HRrkw=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=\ngithub.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-wordwrap v1.0.1 h1:TLuKupo69TCn6TQSyGxwI1EblZZEsQ0vMlAFQflz0v0=\ngithub.com/mitchellh/go-wordwrap v1.0.1/go.mod h1:R62XHJLzvMFRBbcrT7m7WgmE1eOyTSsCt+hzestvNj0=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/moby/docker-image-spec v1.3.1 h1:jMKff3w6PgbfSa69GfNg+zN/XLhfXJGnEx3Nl2EsFP0=\ngithub.com/moby/docker-image-spec v1.3.1/go.mod h1:eKmb5VW8vQEh/BAr2yvVNvuiJuY6UIocYsFu/DxxRpo=\ngithub.com/moby/sys/user v0.3.0 h1:9ni5DlcW5an3SvRSx4MouotOygvzaXbaSrc/wGDFWPo=\ngithub.com/moby/sys/user v0.3.0/go.mod h1:bG+tYYYJgaMtRKgEmuueC0hJEAZWwtIbZTB+85uoHjs=\ngithub.com/moby/term v0.5.0 h1:xt8Q1nalod/v7BqbG21f8mQPqH+xAaC9C3N3wfWbVP0=\ngithub.com/moby/term v0.5.0/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=\ngithub.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=\ngithub.com/opencontainers/runc v1.2.3 h1:fxE7amCzfZflJO2lHXf4y/y8M1BoAqp+FVmG19oYB80=\ngithub.com/opencontainers/runc v1.2.3/go.mod h1:nSxcWUydXrsBZVYNSkTjoQ/N6rcyTtn+1SD5D4+kRIM=\ngithub.com/ory/dockertest/v3 v3.11.0 h1:OiHcxKAvSDUwsEVh2BjxQQc/5EHz9n0va9awCtNGuyA=\ngithub.com/ory/dockertest/v3 v3.11.0/go.mod h1:VIPxS1gwT9NpPOrfD3rACs8Y9Z7yhzO4SB194iUDnUI=\ngithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c h1:+mdjkGKdHQG3305AYmdv1U2eRNDiU2ErMBj1gwrq8eQ=\ngithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c/go.mod h1:7rwL4CYBLnjLxUqIJNnCWiEdr3bn6IUYi15bNlnbCCU=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10 h1:GFCKgmp0tecUJ0sJuv4pzYCqS9+RGSn52M3FUwPs+uo=\ngithub.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10/go.mod h1:t/avpk3KcrXxUnYOhZhMXJlSEyie6gQbtLq5NM3loB8=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/redis/go-redis/v9 v9.6.1 h1:HHDteefn6ZkTtY5fGUE8tj8uy85AHk6zP7CpzIAM0y4=\ngithub.com/redis/go-redis/v9 v9.6.1/go.mod h1:0C0c6ycQsdpVNQpxb1njEQIqkx5UcsM8FJCQLgE9+RA=\ngithub.com/rogpeppe/go-internal v1.13.1 h1:KvO1DLK/DRN07sQ1LQKScxyZJuNnedQ5/wKSR38lUII=\ngithub.com/rogpeppe/go-internal v1.13.1/go.mod h1:uMEvuHeurkdAXX61udpOXGD/AzZDWNMNyH2VO9fmH0o=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/ryanuber/go-glob v1.0.0 h1:iQh3xXAumdQ+4Ufa5b25cRpC5TYKlno6hsv6Cb3pkBk=\ngithub.com/ryanuber/go-glob v1.0.0/go.mod h1:807d1WSdnB0XRJzKNil9Om6lcp/3a0v4qIHxIXzX/Yc=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/urfave/cli v1.22.16 h1:MH0k6uJxdwdeWQTwhSO42Pwr4YLrNLwBtg1MRgTqPdQ=\ngithub.com/urfave/cli v1.22.16/go.mod h1:EeJR6BKodywf4zciqrdw6hpCPk68JO9z5LazXZMn5Po=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb h1:zGWFAtiMcyryUHoUjUJX0/lt1H2+i2Ka2n+D3DImSNo=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 h1:EzJWgHovont7NscjpAxXsDA8S8BMYve8Y5+7cuRE7R0=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=\ngithub.com/xeipuuv/gojsonschema v1.2.0 h1:LhYJRs+L4fBtjZUfuSZIKGeVu0QRy8e5Xi7D17UxZ74=\ngithub.com/xeipuuv/gojsonschema v1.2.0/go.mod h1:anYRn/JVcOK2ZgGU+IjEV4nwlhoK5sQluxsYJ78Id3Y=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngo.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=\ngo.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=\ngo.opentelemetry.io/auto/sdk v1.1.0 h1:cH53jehLUN6UFLY71z+NDOiNJqDdPRaXzTel0sJySYA=\ngo.opentelemetry.io/auto/sdk v1.1.0/go.mod h1:3wSPjt5PWp2RhlCcmmOial7AvC4DQqZb7a7wCow3W8A=\ngo.opentelemetry.io/contrib/detectors/gcp v1.33.0 h1:FVPoXEoILwgbZUu4X7YSgsESsAmGRgoYcnXkzgQPhP4=\ngo.opentelemetry.io/contrib/detectors/gcp v1.33.0/go.mod h1:ZHrLmr4ikK2AwRj9QL+c9s2SOlgoSRyMpNVzUj2fZqI=\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.58.0 h1:PS8wXpbyaDJQ2VDHHncMe9Vct0Zn1fEjpsjrLxGJoSc=\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.58.0/go.mod h1:HDBUsEjOuRC0EzKZ1bSaRGZWUBAzo+MhAcUUORSr4D0=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.58.0 h1:yd02MEjBdJkG3uabWP9apV+OuWRIXGDuJEUJbOHmCFU=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.58.0/go.mod h1:umTcuxiv1n/s/S6/c2AT/g2CQ7u5C59sHDNmfSwgz7Q=\ngo.opentelemetry.io/otel v1.33.0 h1:/FerN9bax5LoK51X/sI0SVYrjSE0/yUL7DpxW4K3FWw=\ngo.opentelemetry.io/otel v1.33.0/go.mod h1:SUUkR6csvUQl+yjReHu5uM3EtVV7MBm5FHKRlNx4I8I=\ngo.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.29.0 h1:WDdP9acbMYjbKIyJUhTvtzj601sVJOqgWdUxSdR/Ysc=\ngo.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.29.0/go.mod h1:BLbf7zbNIONBLPwvFnwNHGj4zge8uTCM/UPIVW1Mq2I=\ngo.opentelemetry.io/otel/metric v1.33.0 h1:r+JOocAyeRVXD8lZpjdQjzMadVZp2M4WmQ+5WtEnklQ=\ngo.opentelemetry.io/otel/metric v1.33.0/go.mod h1:L9+Fyctbp6HFTddIxClbQkjtubW6O9QS3Ann/M82u6M=\ngo.opentelemetry.io/otel/sdk v1.33.0 h1:iax7M131HuAm9QkZotNHEfstof92xM+N8sr3uHXc2IM=\ngo.opentelemetry.io/otel/sdk v1.33.0/go.mod h1:A1Q5oi7/9XaMlIWzPSxLRWOI8nG3FnzHJNbiENQuihM=\ngo.opentelemetry.io/otel/sdk/metric v1.33.0 h1:Gs5VK9/WUJhNXZgn8MR6ITatvAmKeIuCtNbsP3JkNqU=\ngo.opentelemetry.io/otel/sdk/metric v1.33.0/go.mod h1:dL5ykHZmm1B1nVRk9dDjChwDmt81MjVp3gLkQRwKf/Q=\ngo.opentelemetry.io/otel/trace v1.33.0 h1:cCJuF7LRjUFso9LPnEAHJDB2pqzp+hbO8eu1qqW2d/s=\ngo.opentelemetry.io/otel/trace v1.33.0/go.mod h1:uIcdVUZMpTAmz0tI1z04GoVSezK37CbGV4fr1f2nBck=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.28.0 h1:/Ts8HFuMR2E6IP/jlo7QVLZHggjKQbhu/7H0LJFr3Gg=\ngolang.org/x/term v0.28.0/go.mod h1:Sw/lC2IAUZ92udQNf3WodGtn4k/XoLyZoh8v/8uiwek=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.8.0 h1:9i3RxcPv3PZnitoVGMPDKZSq1xW1gK1Xy3ArNOGZfEg=\ngolang.org/x/time v0.8.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/api v0.214.0 h1:h2Gkq07OYi6kusGOaT/9rnNljuXmqPnaig7WGPmKbwA=\ngoogle.golang.org/api v0.214.0/go.mod h1:bYPpLG8AyeMWwDU6NXoB00xC0DFkikVvd5MfwoxjLqE=\ngoogle.golang.org/genproto v0.0.0-20241223144023-3abc09e42ca8 h1:e26eS1K69yxjjNNHYqjN49y95kcaQLJ3TL5h68dcA1E=\ngoogle.golang.org/genproto v0.0.0-20241223144023-3abc09e42ca8/go.mod h1:i5btTErZyoKCCubju3HS5LVho4nZd3yFnEp6moqeUjE=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241223144023-3abc09e42ca8 h1:st3LcW/BPi75W4q1jJTEor/QWwbNlPlDG0JTn6XhZu0=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241223144023-3abc09e42ca8/go.mod h1:klhJGKFyG8Tn50enBn7gizg4nXGXJ+jqEREdCWaPcV4=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241223144023-3abc09e42ca8 h1:TqExAhdPaB60Ux47Cn0oLV07rGnxZzIsaRhQaqS666A=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241223144023-3abc09e42ca8/go.mod h1:lcTa1sDdWEIHMWlITnIczmw5w60CF9ffkb8Z+DVmmjA=\ngoogle.golang.org/grpc v1.69.2 h1:U3S9QEtbXC0bYNvRtcoklF3xGtLViumSYxWykJS+7AU=\ngoogle.golang.org/grpc v1.69.2/go.mod h1:vyjdE6jLBI76dgpDojsFGNaHlxdjXN9ghpnd2o7JGZ4=\ngoogle.golang.org/protobuf v1.36.1 h1:yBPeRvTftaleIgM3PZ/WBIZ7XM/eEYAaEyCwvyjq/gk=\ngoogle.golang.org/protobuf v1.36.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.5.1 h1:EENdUnS3pdur5nybKYIh2Vfgc8IUNBjxDPSjtiJcOzU=\ngotest.tools/v3 v3.5.1/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=\n"
        },
        {
          "name": "hcvault",
          "type": "tree",
          "content": null
        },
        {
          "name": "keys",
          "type": "tree",
          "content": null
        },
        {
          "name": "keyservice",
          "type": "tree",
          "content": null
        },
        {
          "name": "kms",
          "type": "tree",
          "content": null
        },
        {
          "name": "logging",
          "type": "tree",
          "content": null
        },
        {
          "name": "pgp",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0498046875,
          "content": "[toolchain]\nchannel = \"1.70.0\"\nprofile = \"minimal\"\n"
        },
        {
          "name": "shamir",
          "type": "tree",
          "content": null
        },
        {
          "name": "sops.go",
          "type": "blob",
          "size": 31.2109375,
          "content": "/*\nPackage sops manages JSON, YAML and BINARY documents to be encrypted or decrypted.\n\nThis package should not be used directly. Instead, Sops users should install the\ncommand line client via `go get -u github.com/getsops/sops/v3/cmd/sops`, or use the\ndecryption helper provided at `github.com/getsops/sops/v3/decrypt`.\n\nWe do not guarantee API stability for any package other than `github.com/getsops/sops/v3/decrypt`.\n\nA Sops document is a Tree composed of a data branch with arbitrary key/value pairs\nand a metadata branch with encryption and integrity information.\n\nIn JSON and YAML formats, the structure of the cleartext tree is preserved, keys are\nstored in cleartext and only values are encrypted. Keeping the keys in cleartext\nprovides better readability when storing Sops documents in version controls, and allows\nfor merging competing changes on documents. This is a major difference between Sops\nand other encryption tools that store documents as encrypted blobs.\n\nIn BINARY format, the cleartext data is treated as a single blob and the encrypted\ndocument is in JSON format with a single `data` key and a single encrypted value.\n\nSops allows operators to encrypt their documents with multiple master keys. Each of\nthe master key defined in the document is able to decrypt it, allowing users to\nshare documents amongst themselves without sharing keys, or using a PGP key as a\nbackup for KMS.\n\nIn practice, this is achieved by generating a data key for each document that is used\nto encrypt all values, and encrypting the data with each master key defined. Being\nable to decrypt the data key gives access to the document.\n\nThe integrity of each document is guaranteed by calculating a Message Authentication Code\n(MAC) that is stored encrypted by the data key. When decrypting a document, the MAC should\nbe recalculated and compared with the MAC stored in the document to verify that no\nfraudulent changes have been applied. The MAC covers keys and values as well as their\nordering.\n*/\npackage sops // import \"github.com/getsops/sops/v3\"\n\nimport (\n\t\"crypto/rand\"\n\t\"crypto/sha512\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"regexp\"\n\t\"slices\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/sirupsen/logrus\"\n\t\"golang.org/x/net/context\"\n\n\t\"github.com/getsops/sops/v3/age\"\n\t\"github.com/getsops/sops/v3/audit\"\n\t\"github.com/getsops/sops/v3/keys\"\n\t\"github.com/getsops/sops/v3/keyservice\"\n\t\"github.com/getsops/sops/v3/logging\"\n\t\"github.com/getsops/sops/v3/pgp\"\n\t\"github.com/getsops/sops/v3/shamir\"\n)\n\n// DefaultUnencryptedSuffix is the default suffix a TreeItem key has to end with for sops to leave its Value unencrypted\nconst DefaultUnencryptedSuffix = \"_unencrypted\"\n\nvar DefaultDecryptionOrder = []string{age.KeyTypeIdentifier, pgp.KeyTypeIdentifier}\n\ntype sopsError string\n\nfunc (e sopsError) Error() string {\n\treturn string(e)\n}\n\n// MacMismatch occurs when the computed MAC does not match the expected ones\nconst MacMismatch = sopsError(\"MAC mismatch\")\n\n// MetadataNotFound occurs when the input file is malformed and doesn't have sops metadata in it\nconst MetadataNotFound = sopsError(\"sops metadata not found\")\n\ntype SopsKeyNotFound struct {\n\tKey interface{}\n\tMsg string\n}\n\nfunc (e *SopsKeyNotFound) Error() string {\n\treturn fmt.Sprintf(e.Msg, e.Key)\n}\n\n// MACOnlyEncryptedInitialization is a constant and known sequence of 32 bytes used to initialize\n// MAC which is computed only over values which end up encrypted. That assures that a MAC with the\n// setting enabled is always different from a MAC with this setting disabled.\n// The following numbers are taken from the output of `echo -n sops | sha256sum` (shell) or `hashlib.sha256(b'sops').hexdigest()` (Python).\nvar MACOnlyEncryptedInitialization = []byte{0x8a, 0x3f, 0xd2, 0xad, 0x54, 0xce, 0x66, 0x52, 0x7b, 0x10, 0x34, 0xf3, 0xd1, 0x47, 0xbe, 0xb, 0xb, 0x97, 0x5b, 0x3b, 0xf4, 0x4f, 0x72, 0xc6, 0xfd, 0xad, 0xec, 0x81, 0x76, 0xf2, 0x7d, 0x69}\n\nvar log *logrus.Logger\n\nfunc init() {\n\tlog = logging.NewLogger(\"SOPS\")\n}\n\n// Cipher provides a way to encrypt and decrypt the data key used to encrypt and decrypt sops files, so that the\n// data key can be stored alongside the encrypted content. A Cipher must be able to decrypt the values it encrypts.\ntype Cipher interface {\n\t// Encrypt takes a plaintext, a key and additional data and returns the plaintext encrypted with the key, using the\n\t// additional data for authentication\n\tEncrypt(plaintext interface{}, key []byte, additionalData string) (ciphertext string, err error)\n\t// Encrypt takes a ciphertext, a key and additional data and returns the ciphertext encrypted with the key, using\n\t// the additional data for authentication\n\tDecrypt(ciphertext string, key []byte, additionalData string) (plaintext interface{}, err error)\n}\n\n// Comment represents a comment in the sops tree for the file formats that actually support them.\ntype Comment struct {\n\tValue string\n}\n\n// TreeItem is an item inside sops's tree\ntype TreeItem struct {\n\tKey   interface{}\n\tValue interface{}\n}\n\n// TreeBranch is a branch inside sops's tree. It is a slice of TreeItems and is therefore ordered\ntype TreeBranch []TreeItem\n\n// TreeBranches is a collection of TreeBranch\n// Trees usually have more than one branch\ntype TreeBranches []TreeBranch\n\nfunc valueFromPathAndLeaf(path []interface{}, leaf interface{}) interface{} {\n\tswitch component := path[0].(type) {\n\tcase int:\n\t\tif len(path) == 1 {\n\t\t\treturn []interface{}{\n\t\t\t\tleaf,\n\t\t\t}\n\t\t}\n\t\treturn []interface{}{\n\t\t\tvalueFromPathAndLeaf(path[1:], leaf),\n\t\t}\n\tdefault:\n\t\tif len(path) == 1 {\n\t\t\treturn TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   component,\n\t\t\t\t\tValue: leaf,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\treturn TreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   component,\n\t\t\t\tValue: valueFromPathAndLeaf(path[1:], leaf),\n\t\t\t},\n\t\t}\n\t}\n}\n\nfunc set(branch interface{}, path []interface{}, value interface{}) interface{} {\n\tswitch branch := branch.(type) {\n\tcase TreeBranch:\n\t\tfor i, item := range branch {\n\t\t\tif item.Key == path[0] {\n\t\t\t\tif len(path) == 1 {\n\t\t\t\t\tbranch[i].Value = value\n\t\t\t\t} else {\n\t\t\t\t\tbranch[i].Value = set(item.Value, path[1:], value)\n\t\t\t\t}\n\t\t\t\treturn branch\n\t\t\t}\n\t\t}\n\t\t// Not found, need to add the next path entry to the branch\n\t\tvalue := valueFromPathAndLeaf(path, value)\n\t\tif newBranch, ok := value.(TreeBranch); ok && len(newBranch) > 0 {\n\t\t\treturn append(branch, newBranch[0])\n\t\t}\n\t\treturn branch\n\tcase []interface{}:\n\t\tposition := path[0].(int)\n\t\tif len(path) == 1 {\n\t\t\tif position >= len(branch) {\n\t\t\t\treturn append(branch, value)\n\t\t\t}\n\t\t\tbranch[position] = value\n\t\t} else {\n\t\t\tif position >= len(branch) {\n\t\t\t\tbranch = append(branch, valueFromPathAndLeaf(path[1:], value))\n\t\t\t}\n\t\t\tbranch[position] = set(branch[position], path[1:], value)\n\t\t}\n\t\treturn branch\n\tdefault:\n\t\treturn valueFromPathAndLeaf(path, value)\n\t}\n}\n\n// Set sets a value on a given tree for the specified path\nfunc (branch TreeBranch) Set(path []interface{}, value interface{}) TreeBranch {\n\treturn set(branch, path, value).(TreeBranch)\n}\n\nfunc unset(branch interface{}, path []interface{}) (interface{}, error) {\n\tswitch branch := branch.(type) {\n\tcase TreeBranch:\n\t\tfor i, item := range branch {\n\t\t\tif item.Key == path[0] {\n\t\t\t\tif len(path) == 1 {\n\t\t\t\t\tbranch = slices.Delete(branch, i, i+1)\n\t\t\t\t} else {\n\t\t\t\t\tv, err := unset(item.Value, path[1:])\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn nil, err\n\t\t\t\t\t}\n\t\t\t\t\tbranch[i].Value = v\n\t\t\t\t}\n\t\t\t\treturn branch, nil\n\t\t\t}\n\t\t}\n\t\treturn nil, &SopsKeyNotFound{Msg: \"Key not found: %s\", Key: path[0]}\n\tcase []interface{}:\n\t\tposition := path[0].(int)\n\t\tif position >= len(branch) {\n\t\t\treturn nil, &SopsKeyNotFound{Msg: \"Index %d out of bounds\", Key: path[0]}\n\t\t}\n\t\tif len(path) == 1 {\n\t\t\tbranch = slices.Delete(branch, position, position+1)\n\t\t} else {\n\t\t\tv, err := unset(branch[position], path[1:])\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tbranch[position] = v\n\t\t}\n\t\treturn branch, nil\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"Unsupported type: %T for item '%s'\", branch, path[0])\n\t}\n}\n\n// Unset removes a value on a given tree from the specified path\nfunc (branch TreeBranch) Unset(path []interface{}) (TreeBranch, error) {\n\tv, err := unset(branch, path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn v.(TreeBranch), nil\n}\n\n// Tree is the data structure used by sops to represent documents internally\ntype Tree struct {\n\tMetadata Metadata\n\tBranches TreeBranches\n\t// FilePath is the path of the file this struct represents\n\tFilePath string\n}\n\n// Truncate truncates the tree to the path specified\nfunc (branch TreeBranch) Truncate(path []interface{}) (interface{}, error) {\n\tlog.WithField(\"path\", path).Info(\"Truncating tree\")\n\tvar current interface{} = branch\n\tfor _, component := range path {\n\t\tswitch component := component.(type) {\n\t\tcase string:\n\t\t\tfound := false\n\t\t\tfor _, item := range current.(TreeBranch) {\n\t\t\t\tif item.Key == component {\n\t\t\t\t\tcurrent = item.Value\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif !found {\n\t\t\t\treturn nil, fmt.Errorf(\"component ['%s'] not found\", component)\n\t\t\t}\n\t\tcase int:\n\t\t\tif reflect.ValueOf(current).Kind() != reflect.Slice {\n\t\t\t\treturn nil, fmt.Errorf(\"component [%d] is integer, but tree part is not a slice\", component)\n\t\t\t}\n\t\t\tif reflect.ValueOf(current).Len() <= component {\n\t\t\t\treturn nil, fmt.Errorf(\"component [%d] accesses out of bounds\", component)\n\t\t\t}\n\t\t\tcurrent = reflect.ValueOf(current).Index(component).Interface()\n\t\t}\n\t}\n\treturn current, nil\n}\n\nfunc (branch TreeBranch) walkValue(in interface{}, path []string, commentsStack [][]string, onLeaves func(in interface{}, path []string, commentsStack [][]string) (interface{}, error)) (interface{}, error) {\n\tswitch in := in.(type) {\n\tcase string:\n\t\treturn onLeaves(in, path, commentsStack)\n\tcase []byte:\n\t\treturn onLeaves(string(in), path, commentsStack)\n\tcase int:\n\t\treturn onLeaves(in, path, commentsStack)\n\tcase bool:\n\t\treturn onLeaves(in, path, commentsStack)\n\tcase float64:\n\t\treturn onLeaves(in, path, commentsStack)\n\tcase Comment:\n\t\treturn onLeaves(in, path, commentsStack)\n\tcase TreeBranch:\n\t\treturn branch.walkBranch(in, path, commentsStack, onLeaves)\n\tcase []interface{}:\n\t\treturn branch.walkSlice(in, path, commentsStack, onLeaves)\n\tcase nil:\n\t\t// the value returned remains the same since it doesn't make\n\t\t// sense to encrypt or decrypt a nil value\n\t\treturn nil, nil\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"Cannot walk value, unknown type: %T\", in)\n\t}\n}\n\nfunc (branch TreeBranch) walkSlice(in []interface{}, path []string, commentsStack [][]string, onLeaves func(in interface{}, path []string, commentsStack [][]string) (interface{}, error)) ([]interface{}, error) {\n\t// Because append returns a new slice, the original stack is not changed.\n\tcommentsStack = append(commentsStack, []string{})\n\tfor i, v := range in {\n\t\tc, vIsComment := v.(Comment)\n\t\tif vIsComment {\n\t\t\t// If v is a comment, we add it to the slice of active comments.\n\t\t\t// This allows us to also encrypt comments themselves by enabling encryption in a prior comment.\n\t\t\tcommentsStack[len(commentsStack)-1] = append(commentsStack[len(commentsStack)-1], c.Value)\n\t\t}\n\t\tnewV, err := branch.walkValue(v, path, commentsStack, onLeaves)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tin[i] = newV\n\t\tif !vIsComment {\n\t\t\t// If v is not a comment, we clear the slice of active comments.\n\t\t\tcommentsStack[len(commentsStack)-1] = []string{}\n\t\t}\n\t}\n\treturn in, nil\n}\n\nfunc (branch TreeBranch) walkBranch(in TreeBranch, path []string, commentsStack [][]string, onLeaves func(in interface{}, path []string, commentsStack [][]string) (interface{}, error)) (TreeBranch, error) {\n\t// Because append returns a new slice, the original stack is not changed.\n\tcommentsStack = append(commentsStack, []string{})\n\tfor i, item := range in {\n\t\tif c, ok := item.Key.(Comment); ok {\n\t\t\t// If key is a comment, we add it to the slice of active comments.\n\t\t\t// This allows us to also encrypt comments themselves by enabling encryption in a prior comment.\n\t\t\tcommentsStack[len(commentsStack)-1] = append(commentsStack[len(commentsStack)-1], c.Value)\n\t\t\tenc, err := branch.walkValue(item.Key, path, commentsStack, onLeaves)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif encComment, ok := enc.(Comment); ok {\n\t\t\t\tin[i].Key = encComment\n\t\t\t\tcontinue\n\t\t\t} else if comment, ok := enc.(string); ok {\n\t\t\t\tin[i].Key = Comment{Value: comment}\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\treturn nil, fmt.Errorf(\"walkValue of Comment should be either Comment or string, was %T\", enc)\n\t\t\t}\n\t\t}\n\t\tc, valueIsComment := item.Value.(Comment)\n\t\tif valueIsComment {\n\t\t\t// If value is a comment, we add it to the slice of active comments.\n\t\t\t// This allows us to also encrypt comments themselves by enabling encryption in a prior comment.\n\t\t\tcommentsStack[len(commentsStack)-1] = append(commentsStack[len(commentsStack)-1], c.Value)\n\t\t}\n\t\tkey, ok := item.Key.(string)\n\t\tif !ok {\n\t\t\treturn nil, fmt.Errorf(\"Tree contains a non-string key (type %T): %s. Only string keys are\"+\n\t\t\t\t\"supported\", item.Key, item.Key)\n\t\t}\n\t\tnewV, err := branch.walkValue(item.Value, append(path, key), commentsStack, onLeaves)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tin[i].Value = newV\n\t\tif !valueIsComment {\n\t\t\t// If value is not a comment, we clear the slice of active comments.\n\t\t\tcommentsStack[len(commentsStack)-1] = []string{}\n\t\t}\n\t}\n\treturn in, nil\n}\n\nfunc (tree Tree) shouldBeEncrypted(path []string, commentsStack [][]string, isComment bool) bool {\n\tencrypted := true\n\tif tree.Metadata.UnencryptedSuffix != \"\" {\n\t\tfor _, v := range path {\n\t\t\tif strings.HasSuffix(v, tree.Metadata.UnencryptedSuffix) {\n\t\t\t\tencrypted = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif tree.Metadata.EncryptedSuffix != \"\" {\n\t\tencrypted = false\n\t\tfor _, v := range path {\n\t\t\tif strings.HasSuffix(v, tree.Metadata.EncryptedSuffix) {\n\t\t\t\tencrypted = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif tree.Metadata.UnencryptedRegex != \"\" {\n\t\tfor _, p := range path {\n\t\t\tmatched, _ := regexp.Match(tree.Metadata.UnencryptedRegex, []byte(p))\n\t\t\tif matched {\n\t\t\t\tencrypted = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif tree.Metadata.EncryptedRegex != \"\" {\n\t\tencrypted = false\n\t\tfor _, p := range path {\n\t\t\tmatched, _ := regexp.Match(tree.Metadata.EncryptedRegex, []byte(p))\n\t\t\tif matched {\n\t\t\t\tencrypted = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif tree.Metadata.UnencryptedCommentRegex != \"\" {\n\tunencryptedComments:\n\t\tfor _, cs := range commentsStack {\n\t\t\tfor _, c := range cs {\n\t\t\t\tmatched, _ := regexp.Match(tree.Metadata.UnencryptedCommentRegex, []byte(c))\n\t\t\t\tif matched {\n\t\t\t\t\tencrypted = false\n\t\t\t\t\tbreak unencryptedComments\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif tree.Metadata.EncryptedCommentRegex != \"\" {\n\t\tlenCommentsStack := len(commentsStack)\n\t\tlenLastCommentsStack := len(commentsStack[lenCommentsStack-1])\n\t\tencrypted = false\n\tencryptedComments:\n\t\tfor i, cs := range commentsStack {\n\t\t\tfor j, c := range cs {\n\t\t\t\t// A special case. We do not encrypt the comment line itself which matches the regex.\n\t\t\t\t// So we skip the last line of the last set of comments. Only if the matches any previous\n\t\t\t\t// line, we encrypt this comment. Otherwise we do not.\n\t\t\t\tif isComment && i == lenCommentsStack-1 && j == lenLastCommentsStack-1 {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tmatched, _ := regexp.Match(tree.Metadata.EncryptedCommentRegex, []byte(c))\n\t\t\t\tif matched {\n\t\t\t\t\tencrypted = true\n\t\t\t\t\tbreak encryptedComments\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn encrypted\n}\n\n// Encrypt walks over the tree and encrypts all values with the provided cipher,\n// except those whose key ends with the UnencryptedSuffix specified on the\n// Metadata struct, those not ending with EncryptedSuffix, if EncryptedSuffix\n// is provided (by default it is not), those not matching EncryptedRegex,\n// if EncryptedRegex is provided (by default it is not), those matching UnencryptedRegex,\n// if UnencryptedRegex is provided (by default it is not), those with their comment\n// not matching EncryptedCommentRegex, if EncryptedCommentRegex is provided (by default\n// it is not), or those with their comment matching UnencryptedCommentRegex, if\n// UnencryptedCommentRegex is provided (by default it is not).\n// If encryption is successful, it returns the MAC for the encrypted tree\n// (all values if MACOnlyEncrypted is false, or only over values which end\n// up encrypted if MACOnlyEncrypted is true).\nfunc (tree Tree) Encrypt(key []byte, cipher Cipher) (string, error) {\n\taudit.SubmitEvent(audit.EncryptEvent{\n\t\tFile: tree.FilePath,\n\t})\n\thash := sha512.New()\n\tif tree.Metadata.MACOnlyEncrypted {\n\t\t// We initialize with known set of bytes so that a MAC with this setting\n\t\t// enabled is always different from a MAC with this setting disabled.\n\t\thash.Write(MACOnlyEncryptedInitialization)\n\t}\n\twalk := func(branch TreeBranch) error {\n\t\t_, err := branch.walkBranch(branch, make([]string, 0), make([][]string, 0), func(in interface{}, path []string, commentsStack [][]string) (interface{}, error) {\n\t\t\t_, ok := in.(Comment)\n\t\t\tencrypted := tree.shouldBeEncrypted(path, commentsStack, ok)\n\t\t\tif !tree.Metadata.MACOnlyEncrypted || encrypted {\n\t\t\t\t// Only add to MAC if not a comment\n\t\t\t\tif !ok {\n\t\t\t\t\tbytes, err := ToBytes(in)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn nil, fmt.Errorf(\"Could not convert %s to bytes: %s\", in, err)\n\t\t\t\t\t}\n\t\t\t\t\thash.Write(bytes)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif encrypted {\n\t\t\t\tvar err error\n\t\t\t\tpathString := strings.Join(path, \":\") + \":\"\n\t\t\t\tin, err = cipher.Encrypt(in, key, pathString)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, fmt.Errorf(\"Could not encrypt value: %s\", err)\n\t\t\t\t}\n\t\t\t\tif ok && tree.Metadata.UnencryptedCommentRegex != \"\" {\n\t\t\t\t\t// If an encrypted comment matches tree.Metadata.UnencryptedCommentRegex, decryption will fail\n\t\t\t\t\t// as the MAC does not match, and the commented value will not be decrypted.\n\t\t\t\t\tmatched, _ := regexp.Match(tree.Metadata.UnencryptedCommentRegex, []byte(in.(string)))\n\t\t\t\t\tif matched {\n\t\t\t\t\t\treturn nil, fmt.Errorf(\"Encrypted comment %q matches UnencryptedCommentRegex! Make sure that UnencryptedCommentRegex cannot match an encrypted comment.\", in)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn in, nil\n\t\t})\n\t\treturn err\n\t}\n\n\tfor _, branch := range tree.Branches {\n\t\terr := walk(branch)\n\t\tif err != nil {\n\t\t\treturn \"\", fmt.Errorf(\"Error walking tree: %s\", err)\n\t\t}\n\t}\n\treturn fmt.Sprintf(\"%X\", hash.Sum(nil)), nil\n}\n\n// Decrypt walks over the tree and decrypts all values with the provided cipher,\n// except those whose key ends with the UnencryptedSuffix specified on the Metadata struct,\n// those not ending with EncryptedSuffix, if EncryptedSuffix is provided (by default it is not),\n// those not matching EncryptedRegex, if EncryptedRegex is provided (by default it is not),\n// or those matching UnencryptedRegex, if UnencryptedRegex is provided (by default it is not).\n// If decryption is successful, it returns the MAC for the decrypted tree\n// (all values if MACOnlyEncrypted is false, or only over values which end\n// up decrypted if MACOnlyEncrypted is true).\nfunc (tree Tree) Decrypt(key []byte, cipher Cipher) (string, error) {\n\tlog.Debug(\"Decrypting tree\")\n\taudit.SubmitEvent(audit.DecryptEvent{\n\t\tFile: tree.FilePath,\n\t})\n\thash := sha512.New()\n\tif tree.Metadata.MACOnlyEncrypted {\n\t\t// We initialize with known set of bytes so that a MAC with this setting\n\t\t// enabled is always different from a MAC with this setting disabled.\n\t\thash.Write(MACOnlyEncryptedInitialization)\n\t}\n\twalk := func(branch TreeBranch) error {\n\t\t_, err := branch.walkBranch(branch, make([]string, 0), make([][]string, 0), func(in interface{}, path []string, commentsStack [][]string) (interface{}, error) {\n\t\t\tc, ok := in.(Comment)\n\t\t\tencrypted := tree.shouldBeEncrypted(path, commentsStack, ok)\n\t\t\tvar v interface{}\n\t\t\tif encrypted {\n\t\t\t\tvar err error\n\t\t\t\tpathString := strings.Join(path, \":\") + \":\"\n\t\t\t\tif ok {\n\t\t\t\t\tv, err = cipher.Decrypt(c.Value, key, pathString)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t// Assume the comment was not encrypted in the first place\n\t\t\t\t\t\tlog.WithField(\"comment\", c.Value).\n\t\t\t\t\t\t\tWarn(\"Found possibly unencrypted comment in file. \" +\n\t\t\t\t\t\t\t\t\"This is to be expected if the file being \" +\n\t\t\t\t\t\t\t\t\"decrypted was created with an older version of \" +\n\t\t\t\t\t\t\t\t\"SOPS.\")\n\t\t\t\t\t\tv = c\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tv, err = cipher.Decrypt(in.(string), key, pathString)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn nil, fmt.Errorf(\"Could not decrypt value: %s\", err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tv = in\n\t\t\t}\n\t\t\tif !tree.Metadata.MACOnlyEncrypted || encrypted {\n\t\t\t\t// Only add to MAC if not a comment\n\t\t\t\tif _, ok := v.(Comment); !ok {\n\t\t\t\t\tbytes, err := ToBytes(v)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn nil, fmt.Errorf(\"Could not convert %s to bytes: %s\", in, err)\n\t\t\t\t\t}\n\t\t\t\t\thash.Write(bytes)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn v, nil\n\t\t})\n\t\treturn err\n\t}\n\tfor _, branch := range tree.Branches {\n\t\terr := walk(branch)\n\t\tif err != nil {\n\t\t\treturn \"\", fmt.Errorf(\"Error walking tree: %s\", err)\n\t\t}\n\t}\n\treturn fmt.Sprintf(\"%X\", hash.Sum(nil)), nil\n}\n\n// GenerateDataKey generates a new random data key and encrypts it with all MasterKeys.\nfunc (tree Tree) GenerateDataKey() ([]byte, []error) {\n\tnewKey := make([]byte, 32)\n\t_, err := rand.Read(newKey)\n\tif err != nil {\n\t\treturn nil, []error{fmt.Errorf(\"Could not generate random key: %s\", err)}\n\t}\n\treturn newKey, tree.Metadata.UpdateMasterKeys(newKey)\n}\n\n// GenerateDataKeyWithKeyServices generates a new random data key and encrypts it with all MasterKeys.\nfunc (tree *Tree) GenerateDataKeyWithKeyServices(svcs []keyservice.KeyServiceClient) ([]byte, []error) {\n\tnewKey := make([]byte, 32)\n\t_, err := rand.Read(newKey)\n\tif err != nil {\n\t\treturn nil, []error{fmt.Errorf(\"Could not generate random key: %s\", err)}\n\t}\n\treturn newKey, tree.Metadata.UpdateMasterKeysWithKeyServices(newKey, svcs)\n}\n\n// Metadata holds information about a file encrypted by sops\ntype Metadata struct {\n\tLastModified              time.Time\n\tUnencryptedSuffix         string\n\tEncryptedSuffix           string\n\tUnencryptedRegex          string\n\tEncryptedRegex            string\n\tUnencryptedCommentRegex   string\n\tEncryptedCommentRegex     string\n\tMessageAuthenticationCode string\n\tMACOnlyEncrypted          bool\n\tVersion                   string\n\tKeyGroups                 []KeyGroup\n\t// ShamirThreshold is the number of key groups required to recover the\n\t// original data key\n\tShamirThreshold int\n\t// DataKey caches the decrypted data key so it doesn't have to be decrypted with a master key every time it's needed\n\tDataKey []byte\n}\n\n// KeyGroup is a slice of SOPS MasterKeys that all encrypt the same part of the data key\ntype KeyGroup []keys.MasterKey\n\n// EncryptedFileLoader is the interface for loading of encrypted files. It provides a\n// way to load encrypted SOPS files into the internal SOPS representation. Because it\n// loads encrypted files, the returned data structure already contains all SOPS\n// metadata.\ntype EncryptedFileLoader interface {\n\tLoadEncryptedFile(in []byte) (Tree, error)\n}\n\n// PlainFileLoader is the interface for loading of plain text files. It provides a\n// way to load unencrypted files into SOPS. Because the files it loads are\n// unencrypted, the returned data structure does not contain any metadata.\ntype PlainFileLoader interface {\n\tLoadPlainFile(in []byte) (TreeBranches, error)\n}\n\n// EncryptedFileEmitter is the interface for emitting encrypting files. It provides a\n// way to emit encrypted files from the internal SOPS representation.\ntype EncryptedFileEmitter interface {\n\tEmitEncryptedFile(Tree) ([]byte, error)\n}\n\n// PlainFileEmitter is the interface for emitting plain text files. It provides a way\n// to emit plain text files from the internal SOPS representation so that they can be\n// shown\ntype PlainFileEmitter interface {\n\tEmitPlainFile(TreeBranches) ([]byte, error)\n}\n\n// ValueEmitter is the interface for emitting a value. It provides a way to emit\n// values from the internal SOPS representation so that they can be shown\ntype ValueEmitter interface {\n\tEmitValue(interface{}) ([]byte, error)\n}\n\n// CheckEncrypted is the interface for testing whether a branch contains sops\n// metadata. This is used to check whether a file is already encrypted or not.\ntype CheckEncrypted interface {\n\tHasSopsTopLevelKey(TreeBranch) bool\n}\n\n// Store is used to interact with files, both encrypted and unencrypted.\ntype Store interface {\n\tEncryptedFileLoader\n\tPlainFileLoader\n\tEncryptedFileEmitter\n\tPlainFileEmitter\n\tValueEmitter\n\tCheckEncrypted\n}\n\n// MasterKeyCount returns the number of master keys available\nfunc (m *Metadata) MasterKeyCount() int {\n\tcount := 0\n\tfor _, group := range m.KeyGroups {\n\t\tcount += len(group)\n\t}\n\treturn count\n}\n\n// UpdateMasterKeysWithKeyServices encrypts the data key with all master keys using the provided key services\nfunc (m *Metadata) UpdateMasterKeysWithKeyServices(dataKey []byte, svcs []keyservice.KeyServiceClient) (errs []error) {\n\tif len(svcs) == 0 {\n\t\treturn []error{\n\t\t\tfmt.Errorf(\"no key services provided, cannot update master keys\"),\n\t\t}\n\t}\n\tif len(m.KeyGroups) == 0 {\n\t\treturn []error{\n\t\t\tfmt.Errorf(\"no key groups provided\"),\n\t\t}\n\t}\n\tvar parts [][]byte\n\tif len(m.KeyGroups) == 1 {\n\t\t// If there's only one key group, we can't do Shamir. All keys\n\t\t// in the group encrypt the whole data key.\n\t\tparts = append(parts, dataKey)\n\t} else {\n\t\tvar err error\n\t\tif m.ShamirThreshold == 0 {\n\t\t\tm.ShamirThreshold = len(m.KeyGroups)\n\t\t}\n\t\tlog.WithFields(logrus.Fields{\n\t\t\t\"quorum\": m.ShamirThreshold,\n\t\t\t\"parts\":  len(m.KeyGroups),\n\t\t}).Info(\"Splitting data key with Shamir Secret Sharing\")\n\t\tparts, err = shamir.Split(dataKey, len(m.KeyGroups), int(m.ShamirThreshold))\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Errorf(\"could not split data key into parts for Shamir: %s\", err))\n\t\t\treturn\n\t\t}\n\t\tif len(parts) != len(m.KeyGroups) {\n\t\t\terrs = append(errs, fmt.Errorf(\"not enough parts obtained from Shamir: need %d, got %d\", len(m.KeyGroups), len(parts)))\n\t\t\treturn\n\t\t}\n\t}\n\tfor i, group := range m.KeyGroups {\n\t\tpart := parts[i]\n\t\tif len(group) == 0 {\n\t\t\treturn []error{\n\t\t\t\tfmt.Errorf(\"empty key group provided\"),\n\t\t\t}\n\t\t}\n\t\tfor _, key := range group {\n\t\t\tsvcKey := keyservice.KeyFromMasterKey(key)\n\t\t\tvar keyErrs []error\n\t\t\tencrypted := false\n\t\t\tfor _, svc := range svcs {\n\t\t\t\trsp, err := svc.Encrypt(context.Background(), &keyservice.EncryptRequest{\n\t\t\t\t\tKey:       &svcKey,\n\t\t\t\t\tPlaintext: part,\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\tkeyErrs = append(keyErrs, fmt.Errorf(\"failed to encrypt new data key with master key %q: %w\", key.ToString(), err))\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tkey.SetEncryptedDataKey(rsp.Ciphertext)\n\t\t\t\tencrypted = true\n\t\t\t\t// Only need to encrypt the key successfully with one service\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif !encrypted {\n\t\t\t\terrs = append(errs, keyErrs...)\n\t\t\t}\n\t\t}\n\t}\n\tm.DataKey = dataKey\n\treturn\n}\n\n// UpdateMasterKeys encrypts the data key with all master keys\nfunc (m *Metadata) UpdateMasterKeys(dataKey []byte) (errs []error) {\n\treturn m.UpdateMasterKeysWithKeyServices(dataKey, []keyservice.KeyServiceClient{\n\t\tkeyservice.NewLocalClient(),\n\t})\n}\n\n// GetDataKeyWithKeyServices retrieves the data key, asking KeyServices to decrypt it with each\n// MasterKey in the Metadata's KeySources until one of them succeeds.\nfunc (m Metadata) GetDataKeyWithKeyServices(svcs []keyservice.KeyServiceClient, decryptionOrder []string) ([]byte, error) {\n\tif m.DataKey != nil {\n\t\treturn m.DataKey, nil\n\t}\n\tgetDataKeyErr := getDataKeyError{\n\t\tRequiredSuccessfulKeyGroups: m.ShamirThreshold,\n\t\tGroupResults:                make([]error, len(m.KeyGroups)),\n\t}\n\tvar parts [][]byte\n\tfor i, group := range m.KeyGroups {\n\t\tpart, err := decryptKeyGroup(group, svcs, decryptionOrder)\n\t\tif err == nil {\n\t\t\tparts = append(parts, part)\n\t\t}\n\t\tgetDataKeyErr.GroupResults[i] = err\n\t}\n\tvar dataKey []byte\n\tif len(m.KeyGroups) > 1 {\n\t\tif len(parts) < m.ShamirThreshold {\n\t\t\treturn nil, &getDataKeyErr\n\t\t}\n\t\tvar err error\n\t\tdataKey, err = shamir.Combine(parts)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"could not get data key from shamir parts: %s\", err)\n\t\t}\n\t} else {\n\t\tif len(parts) != 1 {\n\t\t\treturn nil, &getDataKeyErr\n\t\t}\n\t\tdataKey = parts[0]\n\t}\n\tlog.Info(\"Data key recovered successfully\")\n\tm.DataKey = dataKey\n\treturn dataKey, nil\n}\n\n// decryptKeyGroup tries to decrypt the contents of the provided KeyGroup with\n// any of the MasterKeys in the KeyGroup with any of the provided key services,\n// returning as soon as one key service succeeds.\nfunc decryptKeyGroup(group KeyGroup, svcs []keyservice.KeyServiceClient, decryptionOrder []string) ([]byte, error) {\n\tvar keyErrs []error\n\t// Sort MasterKeys in the group so we try them in specific order\n\t// Use sorted indices to avoid group slice modification\n\tindices := sortKeyGroupIndices(group, decryptionOrder)\n\tfor _, indexVal := range indices {\n\t\tkey := group[indexVal]\n\t\tpart, err := decryptKey(key, svcs)\n\t\tif err != nil {\n\t\t\tkeyErrs = append(keyErrs, err)\n\t\t} else {\n\t\t\treturn part, nil\n\t\t}\n\t}\n\treturn nil, decryptKeyErrors(keyErrs)\n}\n\n// sortKeyGroupIndices returns indices that would sort the KeyGroup\n// according to decryptionOrder\nfunc sortKeyGroupIndices(group KeyGroup, decryptionOrder []string) []int {\n\tpriorities := make(map[string]int)\n\t// give ordered weights\n\tfor i, v := range decryptionOrder {\n\t\tpriorities[v] = i\n\t}\n\tmaxPriority := len(decryptionOrder)\n\t// initialize indices\n\tn := len(group)\n\tindices := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tindices[i] = i\n\t}\n\tsort.SliceStable(indices, func(i, j int) bool {\n\t\tkeyTypeI := group[indices[i]].TypeToIdentifier()\n\t\tkeyTypeJ := group[indices[j]].TypeToIdentifier()\n\t\tpriorityI, ok := priorities[keyTypeI]\n\t\tif !ok {\n\t\t\tpriorityI = maxPriority\n\t\t}\n\t\tpriorityJ, ok := priorities[keyTypeJ]\n\t\tif !ok {\n\t\t\tpriorityJ = maxPriority\n\t\t}\n\t\treturn priorityI < priorityJ\n\t})\n\treturn indices\n}\n\n// decryptKey tries to decrypt the contents of the provided MasterKey with any\n// of the key services, returning as soon as one key service succeeds.\nfunc decryptKey(key keys.MasterKey, svcs []keyservice.KeyServiceClient) ([]byte, error) {\n\tsvcKey := keyservice.KeyFromMasterKey(key)\n\tvar part []byte\n\tdecryptErr := decryptKeyError{\n\t\tkeyName: key.ToString(),\n\t}\n\tfor _, svc := range svcs {\n\t\t// All keys in a key group encrypt the same part, so as soon\n\t\t// as we decrypt it successfully with one key, we need to\n\t\t// proceed with the next group\n\t\tvar err error\n\t\tif part == nil {\n\t\t\tvar rsp *keyservice.DecryptResponse\n\t\t\trsp, err = svc.Decrypt(\n\t\t\t\tcontext.Background(),\n\t\t\t\t&keyservice.DecryptRequest{\n\t\t\t\t\tCiphertext: key.EncryptedDataKey(),\n\t\t\t\t\tKey:        &svcKey,\n\t\t\t\t})\n\t\t\tif err == nil {\n\t\t\t\tpart = rsp.Plaintext\n\t\t\t}\n\t\t}\n\t\tdecryptErr.errs = append(decryptErr.errs, err)\n\t}\n\tif part != nil {\n\t\treturn part, nil\n\t}\n\treturn nil, &decryptErr\n}\n\n// GetDataKey retrieves the data key from the first MasterKey in the Metadata's KeySources that's able to return it,\n// using the local KeyService\nfunc (m Metadata) GetDataKey() ([]byte, error) {\n\treturn m.GetDataKeyWithKeyServices([]keyservice.KeyServiceClient{\n\t\tkeyservice.NewLocalClient(),\n\t}, nil)\n}\n\n// ToBytes converts a string, int, float or bool to a byte representation.\nfunc ToBytes(in interface{}) ([]byte, error) {\n\tswitch in := in.(type) {\n\tcase string:\n\t\treturn []byte(in), nil\n\tcase int:\n\t\treturn []byte(strconv.Itoa(in)), nil\n\tcase float64:\n\t\treturn []byte(strconv.FormatFloat(in, 'f', -1, 64)), nil\n\tcase bool:\n\t\tboolB := []byte(\"True\")\n\t\tif !in {\n\t\t\tboolB = []byte(\"False\")\n\t\t}\n\t\treturn boolB, nil\n\tcase []byte:\n\t\treturn in, nil\n\tcase Comment:\n\t\treturn ToBytes(in.Value)\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"Could not convert unknown type %T to bytes\", in)\n\t}\n}\n\n// EmitAsMap will emit the tree branches as a map. This is used by the publish\n// command for writing decrypted trees to various destinations. Should only be\n// used for outputting to data structures in code.\nfunc EmitAsMap(in TreeBranches) (map[string]interface{}, error) {\n\tdata := map[string]interface{}{}\n\n\tfor _, branch := range in {\n\t\tfor _, item := range branch {\n\t\t\tif _, ok := item.Key.(Comment); ok {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tval, err := encodeValueForMap(item.Value)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tdata[item.Key.(string)] = val\n\t\t}\n\t}\n\n\treturn data, nil\n}\n\nfunc encodeValueForMap(v interface{}) (interface{}, error) {\n\tswitch v := v.(type) {\n\tcase TreeBranch:\n\t\treturn EmitAsMap([]TreeBranch{v})\n\tdefault:\n\t\treturn v, nil\n\t}\n}\n"
        },
        {
          "name": "sops_test.go",
          "type": "blob",
          "size": 31.2685546875,
          "content": "package sops\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\t\"github.com/getsops/sops/v3/age\"\n\t\"github.com/getsops/sops/v3/hcvault\"\n\t\"github.com/getsops/sops/v3/pgp\"\n)\n\ntype reverseCipher struct{}\n\n// reverse returns its argument string reversed rune-wise left to right.\nfunc reverse(s string) string {\n\tr := []rune(s)\n\tfor i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n\t\tr[i], r[j] = r[j], r[i]\n\t}\n\treturn string(r)\n}\n\nfunc (c reverseCipher) Encrypt(value interface{}, key []byte, path string) (string, error) {\n\tb, err := ToBytes(value)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn reverse(string(b)), nil\n}\nfunc (c reverseCipher) Decrypt(value string, key []byte, path string) (plaintext interface{}, err error) {\n\tif value == \"error\" {\n\t\treturn nil, fmt.Errorf(\"Error\")\n\t}\n\treturn reverse(value), nil\n}\n\ntype encPrefixCipher struct{}\n\nfunc (c encPrefixCipher) Encrypt(value interface{}, key []byte, path string) (string, error) {\n\tb, err := ToBytes(value)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn \"ENC:\" + string(b), nil\n}\nfunc (c encPrefixCipher) Decrypt(value string, key []byte, path string) (plaintext interface{}, err error) {\n\tv, ok := strings.CutPrefix(value, \"ENC:\")\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"String not prefixed with 'ENC:'\")\n\t}\n\treturn v, nil\n}\n\nfunc TestUnencryptedSuffix(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo_unencrypted\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"bar_unencrypted\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{UnencryptedSuffix: \"_unencrypted\"}}\n\texpected := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"foo_unencrypted\",\n\t\t\tValue: \"bar\",\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"bar_unencrypted\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tcipher := reverseCipher{}\n\t_, err := tree.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Encrypting the tree failed: %s\", err)\n\t}\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot \\t\\t%+v,\\n expected \\t\\t%+v\", tree.Branches[0], expected)\n\t}\n\t_, err = tree.Decrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Decrypting the tree failed: %s\", err)\n\t}\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot\\t\\t\\t%+v,\\nexpected\\t\\t%+v\", tree.Branches[0], expected)\n\t}\n}\n\nfunc TestEncryptedSuffix(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo_encrypted\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"bar\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{EncryptedSuffix: \"_encrypted\"}}\n\texpected := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"foo_encrypted\",\n\t\t\tValue: \"rab\",\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"bar\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tcipher := reverseCipher{}\n\t_, err := tree.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Encrypting the tree failed: %s\", err)\n\t}\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot \\t\\t%+v,\\n expected \\t\\t%+v\", tree.Branches[0], expected)\n\t}\n\t_, err = tree.Decrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Decrypting the tree failed: %s\", err)\n\t}\n\texpected[0].Value = \"bar\"\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot\\t\\t\\t%+v,\\nexpected\\t\\t%+v\", tree.Branches[0], expected)\n\t}\n}\n\nfunc TestEncryptedRegex(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"enc:foo\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"bar\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{EncryptedRegex: \"^enc:\"}}\n\texpected := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"enc:foo\",\n\t\t\tValue: \"rab\",\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"bar\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tcipher := reverseCipher{}\n\t_, err := tree.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Encrypting the tree failed: %s\", err)\n\t}\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot \\t\\t%+v,\\n expected \\t\\t%+v\", tree.Branches[0], expected)\n\t}\n\t_, err = tree.Decrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Decrypting the tree failed: %s\", err)\n\t}\n\texpected[0].Value = \"bar\"\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot\\t\\t\\t%+v,\\nexpected\\t\\t%+v\", tree.Branches[0], expected)\n\t}\n}\n\nfunc TestUnencryptedRegex(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"dec:foo\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"dec:bar\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{UnencryptedRegex: \"^dec:\"}}\n\texpected := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"dec:foo\",\n\t\t\tValue: \"bar\",\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"dec:bar\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tcipher := reverseCipher{}\n\n\t_, err := tree.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Encrypting the tree failed: %s\", err)\n\t}\n\t// expected[1].Value[] = \"bar\"\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot \\t\\t%+v,\\n expected \\t\\t%+v\", tree.Branches[0], expected)\n\t}\n\t_, err = tree.Decrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Decrypting the tree failed: %s\", err)\n\t}\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot\\t\\t\\t%+v,\\nexpected\\t\\t%+v\", tree.Branches[0], expected)\n\t}\n}\n\nfunc TestMACOnlyEncrypted(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo_encrypted\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"bar\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{EncryptedSuffix: \"_encrypted\", MACOnlyEncrypted: true}}\n\tonlyEncrypted := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo_encrypted\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t},\n\t}\n\ttreeOnlyEncrypted := Tree{Branches: onlyEncrypted, Metadata: Metadata{EncryptedSuffix: \"_encrypted\", MACOnlyEncrypted: true}}\n\tcipher := reverseCipher{}\n\tmac, err := tree.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Encrypting the tree failed: %s\", err)\n\t}\n\tmacOnlyEncrypted, err := treeOnlyEncrypted.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Encrypting the treeOnlyEncrypted failed: %s\", err)\n\t}\n\tif mac != macOnlyEncrypted {\n\t\tt.Errorf(\"MACs don't match:\\ngot \\t\\t%+v,\\nexpected \\t\\t%+v\", mac, macOnlyEncrypted)\n\t}\n}\n\nfunc TestMACOnlyEncryptedNoConfusion(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo_encrypted\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"bar\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{EncryptedSuffix: \"_encrypted\", MACOnlyEncrypted: true}}\n\tonlyEncrypted := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo_encrypted\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t},\n\t}\n\ttreeOnlyEncrypted := Tree{Branches: onlyEncrypted, Metadata: Metadata{EncryptedSuffix: \"_encrypted\"}}\n\tcipher := reverseCipher{}\n\tmac, err := tree.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Encrypting the tree failed: %s\", err)\n\t}\n\tmacOnlyEncrypted, err := treeOnlyEncrypted.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Encrypting the treeOnlyEncrypted failed: %s\", err)\n\t}\n\tif mac == macOnlyEncrypted {\n\t\tt.Errorf(\"MACs match but they should not\")\n\t}\n}\n\nfunc TestEncryptedCommentRegex(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   Comment{\"sops:enc\"},\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"bar\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   Comment{\"before\"},\n\t\t\t\t\t\tValue: nil,\n\t\t\t\t\t},\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   Comment{\"sops:enc\"},\n\t\t\t\t\t\tValue: nil,\n\t\t\t\t\t},\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"encrypted\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"array\",\n\t\t\t\tValue: []interface{}{\n\t\t\t\t\t\"bar\",\n\t\t\t\t\tComment{\"sops:enc\"},\n\t\t\t\t\t\"baz\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   Comment{\"sops:enc\"},\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   Comment{\"after\"},\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"encarray\",\n\t\t\t\tValue: []interface{}{\n\t\t\t\t\t\"bar\",\n\t\t\t\t\t\"baz\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{EncryptedCommentRegex: \"sops:enc\"}}\n\texpected := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   Comment{\"sops:enc\"},\n\t\t\tValue: nil,\n\t\t},\n\t\tTreeItem{\n\t\t\tKey:   \"foo\",\n\t\t\tValue: \"rab\",\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"bar\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   Comment{\"before\"},\n\t\t\t\t\tValue: nil,\n\t\t\t\t},\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   Comment{\"sops:enc\"},\n\t\t\t\t\tValue: nil,\n\t\t\t\t},\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   \"encrypted\",\n\t\t\t\t\tValue: \"rab\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"array\",\n\t\t\tValue: []interface{}{\n\t\t\t\t\"bar\",\n\t\t\t\tComment{\"sops:enc\"},\n\t\t\t\t\"zab\",\n\t\t\t},\n\t\t},\n\t\tTreeItem{\n\t\t\tKey:   Comment{\"sops:enc\"},\n\t\t\tValue: nil,\n\t\t},\n\t\tTreeItem{\n\t\t\tKey:   Comment{\"retfa\"},\n\t\t\tValue: nil,\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"encarray\",\n\t\t\tValue: []interface{}{\n\t\t\t\t\"rab\",\n\t\t\t\t\"zab\",\n\t\t\t},\n\t\t},\n\t}\n\tcipher := reverseCipher{}\n\t_, err := tree.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Encrypting the tree failed: %s\", err)\n\t}\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot \\t\\t%+v,\\n expected \\t\\t%+v\", tree.Branches[0], expected)\n\t}\n\t_, err = tree.Decrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Decrypting the tree failed: %s\", err)\n\t}\n\texpected[1].Value = \"bar\"\n\texpected[2].Value.(TreeBranch)[3].Value = \"bar\"\n\texpected[3].Value.([]interface{})[2] = \"baz\"\n\texpected[5].Key = Comment{\"after\"}\n\texpected[6].Value = []interface{}{\n\t\t\"bar\",\n\t\t\"baz\",\n\t}\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot\\t\\t\\t%+v,\\nexpected\\t\\t%+v\", tree.Branches[0], expected)\n\t}\n}\n\nfunc TestUnencryptedCommentRegex(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   Comment{\"sops:noenc\"},\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"bar\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   Comment{\"before\"},\n\t\t\t\t\t\tValue: nil,\n\t\t\t\t\t},\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   Comment{\"sops:noenc\"},\n\t\t\t\t\t\tValue: nil,\n\t\t\t\t\t},\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"notencrypted\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"array\",\n\t\t\t\tValue: []interface{}{\n\t\t\t\t\t\"bar\",\n\t\t\t\t\tComment{\"sops:noenc\"},\n\t\t\t\t\t\"baz\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   Comment{\"sops:noenc\"},\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   Comment{\"after\"},\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"notencarray\",\n\t\t\t\tValue: []interface{}{\n\t\t\t\t\t\"bar\",\n\t\t\t\t\t\"baz\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{UnencryptedCommentRegex: \"sops:noenc\"}}\n\texpected := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   Comment{\"sops:noenc\"},\n\t\t\tValue: nil,\n\t\t},\n\t\tTreeItem{\n\t\t\tKey:   \"foo\",\n\t\t\tValue: \"bar\",\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"bar\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   \"foo\",\n\t\t\t\t\tValue: \"rab\",\n\t\t\t\t},\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   Comment{\"erofeb\"},\n\t\t\t\t\tValue: nil,\n\t\t\t\t},\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   Comment{\"sops:noenc\"},\n\t\t\t\t\tValue: nil,\n\t\t\t\t},\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   \"notencrypted\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"array\",\n\t\t\tValue: []interface{}{\n\t\t\t\t\"rab\",\n\t\t\t\tComment{\"sops:noenc\"},\n\t\t\t\t\"baz\",\n\t\t\t},\n\t\t},\n\t\tTreeItem{\n\t\t\tKey:   Comment{\"sops:noenc\"},\n\t\t\tValue: nil,\n\t\t},\n\t\tTreeItem{\n\t\t\tKey:   Comment{\"after\"},\n\t\t\tValue: nil,\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"notencarray\",\n\t\t\tValue: []interface{}{\n\t\t\t\t\"bar\",\n\t\t\t\t\"baz\",\n\t\t\t},\n\t\t},\n\t}\n\tcipher := reverseCipher{}\n\t_, err := tree.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Encrypting the tree failed: %s\", err)\n\t}\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot \\t\\t%+v,\\n expected \\t\\t%+v\", tree.Branches[0], expected)\n\t}\n\t_, err = tree.Decrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tif err != nil {\n\t\tt.Errorf(\"Decrypting the tree failed: %s\", err)\n\t}\n\texpected[2].Value.(TreeBranch)[0].Value = \"bar\"\n\texpected[2].Value.(TreeBranch)[1].Key = Comment{\"before\"}\n\texpected[3].Value.([]interface{})[0] = \"bar\"\n\tif !reflect.DeepEqual(tree.Branches[0], expected) {\n\t\tt.Errorf(\"Trees don't match: \\ngot\\t\\t\\t%+v,\\nexpected\\t\\t%+v\", tree.Branches[0], expected)\n\t}\n}\n\nfunc TestUnencryptedCommentRegexFail(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   Comment{\"sops:noenc\"},\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{UnencryptedCommentRegex: \"ENC\"}}\n\tcipher := encPrefixCipher{}\n\t_, err := tree.Encrypt(bytes.Repeat([]byte(\"f\"), 32), cipher)\n\tassert.ErrorContains(t, err, \"Encrypted comment \\\"ENC:sops:noenc\\\" matches UnencryptedCommentRegex!\")\n}\n\ntype MockCipher struct{}\n\nfunc (m MockCipher) Encrypt(value interface{}, key []byte, path string) (string, error) {\n\treturn \"a\", nil\n}\n\nfunc (m MockCipher) Decrypt(value string, key []byte, path string) (interface{}, error) {\n\treturn \"a\", nil\n}\n\nfunc TestEncrypt(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"baz\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"bar\",\n\t\t\t\t\t\tValue: 5,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"bar\",\n\t\t\t\tValue: false,\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foobar\",\n\t\t\t\tValue: 2.12,\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"barfoo\",\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t},\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo2\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t},\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo3\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t},\n\t}\n\texpected := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo\",\n\t\t\t\tValue: \"a\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"baz\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"bar\",\n\t\t\t\t\t\tValue: \"a\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"bar\",\n\t\t\t\tValue: \"a\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foobar\",\n\t\t\t\tValue: \"a\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"barfoo\",\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t},\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo2\",\n\t\t\t\tValue: \"a\",\n\t\t\t},\n\t\t},\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo3\",\n\t\t\t\tValue: \"a\",\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{UnencryptedSuffix: DefaultUnencryptedSuffix}}\n\ttree.Encrypt(bytes.Repeat([]byte{'f'}, 32), MockCipher{})\n\tif !reflect.DeepEqual(tree.Branches, expected) {\n\t\tt.Errorf(\"%s does not equal expected tree: %s\", tree.Branches, expected)\n\t}\n}\n\nfunc TestDecrypt(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"baz\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"bar\",\n\t\t\t\t\t\tValue: \"5\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"bar\",\n\t\t\t\tValue: \"false\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foobar\",\n\t\t\t\tValue: \"2.12\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"barfoo\",\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t},\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"baz\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"bar\",\n\t\t\t\t\t\tValue: \"6\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo3\",\n\t\t\t\tValue: \"bar\",\n\t\t\t},\n\t\t},\n\t}\n\texpected := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo\",\n\t\t\t\tValue: \"a\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"baz\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"bar\",\n\t\t\t\t\t\tValue: \"a\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"bar\",\n\t\t\t\tValue: \"a\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foobar\",\n\t\t\t\tValue: \"a\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"barfoo\",\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t},\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo\",\n\t\t\t\tValue: \"a\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey: \"baz\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"bar\",\n\t\t\t\t\t\tValue: \"a\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo3\",\n\t\t\t\tValue: \"a\",\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{UnencryptedSuffix: DefaultUnencryptedSuffix}}\n\ttree.Decrypt(bytes.Repeat([]byte{'f'}, 32), MockCipher{})\n\tif !reflect.DeepEqual(tree.Branches, expected) {\n\t\tt.Errorf(\"%s does not equal expected tree: %s\", tree.Branches[0], expected)\n\t}\n}\n\ntype WrongType struct{}\n\nfunc TestEncryptWrongType(t *testing.T) {\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foo\",\n\t\t\t\tValue: WrongType{},\n\t\t\t},\n\t\t},\n\t}\n\ttree := Tree{Branches: branches, Metadata: Metadata{UnencryptedSuffix: DefaultUnencryptedSuffix}}\n\tresult, err := tree.Encrypt(bytes.Repeat([]byte{'f'}, 32), MockCipher{})\n\tassert.Equal(t, \"\", result)\n\tassert.ErrorContains(t, err, \"unknown type: sops.WrongType\")\n}\n\nfunc TestTruncateTree(t *testing.T) {\n\ttree := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"foo\",\n\t\t\tValue: 2,\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"bar\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"foobar\",\n\t\t\t\t\tValue: []int{\n\t\t\t\t\t\t1,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t4,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\texpected := 3\n\tresult, err := tree.Truncate([]interface{}{\n\t\t\"bar\",\n\t\t\"foobar\",\n\t\t2,\n\t})\n\tassert.NoError(t, err)\n\tassert.Equal(t, expected, result)\n}\n\nfunc TestTruncateTreeNotFound(t *testing.T) {\n\ttree := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"foo\",\n\t\t\tValue: 2,\n\t\t},\n\t}\n\tresult, err := tree.Truncate([]interface{}{\"baz\"})\n\tassert.ErrorContains(t, err, \"baz\")\n\tassert.Nil(t, result, \"Truncate result was not nil upon %s\", err)\n}\n\nfunc TestTruncateTreeNotArray(t *testing.T) {\n\ttree := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"foo\",\n\t\t\tValue: 2,\n\t\t},\n\t}\n\tresult, err := tree.Truncate([]interface{}{\"foo\", 99})\n\tassert.ErrorContains(t, err, \"99\")\n\tassert.Nil(t, result, \"Truncate result was not nil upon %s\", err)\n}\n\nfunc TestTruncateTreeArrayOutOfBounds(t *testing.T) {\n\ttree := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t\t\"one\",\n\t\t\t\t\"two\",\n\t\t\t},\n\t\t},\n\t}\n\tresult, err := tree.Truncate([]interface{}{\"foo\", 99})\n\tassert.ErrorContains(t, err, \"99\")\n\tassert.Nil(t, result, \"Truncate result was not nil upon %s\", err)\n}\n\nfunc TestEncryptComments(t *testing.T) {\n\ttree := Tree{\n\t\tBranches: TreeBranches{\n\t\t\tTreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   Comment{\"foo\"},\n\t\t\t\t\tValue: nil,\n\t\t\t\t},\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"list\",\n\t\t\t\t\tValue: []interface{}{\n\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\tComment{\"bar\"},\n\t\t\t\t\t\t\"2\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tMetadata: Metadata{\n\t\t\tUnencryptedSuffix: DefaultUnencryptedSuffix,\n\t\t},\n\t}\n\ttree.Encrypt(bytes.Repeat([]byte{'f'}, 32), reverseCipher{})\n\tassert.Equal(t, \"oof\", tree.Branches[0][0].Key.(Comment).Value)\n\tassert.Equal(t, \"rab\", tree.Branches[0][1].Value.([]interface{})[1])\n}\n\nfunc TestDecryptComments(t *testing.T) {\n\ttree := Tree{\n\t\tBranches: TreeBranches{\n\t\t\tTreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   Comment{\"oof\"},\n\t\t\t\t\tValue: nil,\n\t\t\t\t},\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"list\",\n\t\t\t\t\tValue: []interface{}{\n\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\tComment{\"rab\"},\n\t\t\t\t\t\t\"2\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey:   \"list\",\n\t\t\t\t\tValue: nil,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tMetadata: Metadata{\n\t\t\tUnencryptedSuffix: DefaultUnencryptedSuffix,\n\t\t},\n\t}\n\ttree.Decrypt(bytes.Repeat([]byte{'f'}, 32), reverseCipher{})\n\tassert.Equal(t, \"foo\", tree.Branches[0][0].Key.(Comment).Value)\n\tassert.Equal(t, \"bar\", tree.Branches[0][1].Value.([]interface{})[1])\n}\n\nfunc TestDecryptUnencryptedComments(t *testing.T) {\n\ttree := Tree{\n\t\tBranches: TreeBranches{\n\t\t\tTreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\t// We use `error` to simulate an error decrypting, the fake cipher will error in this case\n\t\t\t\t\tKey:   Comment{\"error\"},\n\t\t\t\t\tValue: nil,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tMetadata: Metadata{},\n\t}\n\ttree.Decrypt(bytes.Repeat([]byte{'f'}, 32), reverseCipher{})\n\tassert.Equal(t, \"error\", tree.Branches[0][0].Key.(Comment).Value)\n}\n\nfunc TestSetNewKey(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\tValue: TreeBranch{\n\t\t\t\t\t\tTreeItem{\n\t\t\t\t\t\t\tKey:   \"baz\",\n\t\t\t\t\t\t\tValue: \"foobar\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tset := branch.Set([]interface{}{\"foo\", \"bar\", \"foo\"}, \"hello\")\n\tassert.Equal(t, \"hello\", set[0].Value.(TreeBranch)[0].Value.(TreeBranch)[1].Value)\n}\n\nfunc TestSetNewBranch(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"key\",\n\t\t\tValue: \"value\",\n\t\t},\n\t}\n\tset := branch.Set([]interface{}{\"foo\", \"bar\", \"baz\"}, \"hello\")\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"key\",\n\t\t\tValue: \"value\",\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\tValue: TreeBranch{\n\t\t\t\t\t\tTreeItem{\n\t\t\t\t\t\t\tKey:   \"baz\",\n\t\t\t\t\t\t\tValue: \"hello\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}, set)\n}\n\nfunc TestSetArrayDeepNew(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t\t\"one\",\n\t\t\t\t\"two\",\n\t\t\t},\n\t\t},\n\t}\n\tset := branch.Set([]interface{}{\"foo\", 2, \"bar\"}, \"hello\")\n\tassert.Equal(t, \"hello\", set[0].Value.([]interface{})[2].(TreeBranch)[0].Value)\n}\n\nfunc TestSetNewKeyDeep(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"foo\",\n\t\t\tValue: \"bar\",\n\t\t},\n\t}\n\tset := branch.Set([]interface{}{\"foo\", \"bar\", \"baz\"}, \"hello\")\n\tassert.Equal(t, \"hello\", set[0].Value.(TreeBranch)[0].Value.(TreeBranch)[0].Value)\n}\n\nfunc TestSetNewKeyOnEmptyBranch(t *testing.T) {\n\tbranch := TreeBranch{}\n\tset := branch.Set([]interface{}{\"foo\", \"bar\", \"baz\"}, \"hello\")\n\tassert.Equal(t, \"hello\", set[0].Value.(TreeBranch)[0].Value.(TreeBranch)[0].Value)\n}\n\nfunc TestSetArray(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t\t\"one\",\n\t\t\t\t\"two\",\n\t\t\t\t\"three\",\n\t\t\t},\n\t\t},\n\t}\n\tset := branch.Set([]interface{}{\"foo\", 0}, \"uno\")\n\tassert.Equal(t, \"uno\", set[0].Value.([]interface{})[0])\n}\n\nfunc TestSetArrayNew(t *testing.T) {\n\tbranch := TreeBranch{}\n\tset := branch.Set([]interface{}{\"foo\", 0, 0}, \"uno\")\n\tassert.Equal(t, \"uno\", set[0].Value.([]interface{})[0].([]interface{})[0])\n}\n\nfunc TestSetExisting(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"foo\",\n\t\t\tValue: \"foobar\",\n\t\t},\n\t}\n\tset := branch.Set([]interface{}{\"foo\"}, \"bar\")\n\tassert.Equal(t, \"bar\", set[0].Value)\n}\n\nfunc TestSetArrayLeafNewItem(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey:   \"array\",\n\t\t\tValue: []interface{}{},\n\t\t},\n\t}\n\tset := branch.Set([]interface{}{\"array\", 2}, \"hello\")\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"array\",\n\t\t\tValue: []interface{}{\n\t\t\t\t\"hello\",\n\t\t\t},\n\t\t},\n\t}, set)\n}\n\nfunc TestSetArrayNonLeaf(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"array\",\n\t\t\tValue: []interface{}{\n\t\t\t\t1,\n\t\t\t},\n\t\t},\n\t}\n\tset := branch.Set([]interface{}{\"array\", 0, \"hello\"}, \"hello\")\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"array\",\n\t\t\tValue: []interface{}{\n\t\t\t\tTreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey:   \"hello\",\n\t\t\t\t\t\tValue: \"hello\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}, set)\n}\n\nfunc TestUnsetKeyRootLeaf(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: \"foo\",\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"foofoo\",\n\t\t\tValue: \"foofoo\",\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foofoo\"})\n\tassert.NoError(t, err)\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: \"foo\",\n\t\t},\n\t}, unset)\n}\n\nfunc TestUnsetKeyBranchLeaf(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"barbar\",\n\t\t\t\t\tValue: \"barbar\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\", \"barbar\"})\n\tassert.NoError(t, err)\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}, unset)\n}\n\nfunc TestUnsetKeyBranch(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: \"foo\",\n\t\t},\n\t\tTreeItem{\n\t\t\tKey: \"foofoo\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foofoo\"})\n\tassert.NoError(t, err)\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: \"foo\",\n\t\t},\n\t}, unset)\n}\n\nfunc TestUnsetKeyRootLastLeaf(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: \"foo\",\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\"})\n\tassert.NoError(t, err)\n\tassert.Equal(t, TreeBranch{\n\t}, unset)\n}\n\nfunc TestUnsetKeyBranchLastLeaf(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\", \"bar\"})\n\tassert.NoError(t, err)\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: TreeBranch{\n\t\t\t},\n\t\t},\n\t}, unset)\n}\n\nfunc TestUnsetKeyArray(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\tValue: []interface{}{\n\t\t\t\t\t\tTreeBranch{\n\t\t\t\t\t\t\tTreeItem{\n\t\t\t\t\t\t\t\tKey: \"baz\",\n\t\t\t\t\t\t\t\tValue: \"baz\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\", \"bar\"})\n\tassert.NoError(t, err)\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: TreeBranch{\n\t\t\t},\n\t\t},\n\t}, unset)\n}\n\nfunc TestUnsetArrayItem(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t\tTreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey: \"barbar\",\n\t\t\t\t\t\tValue: \"barbar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\", 1})\n\tassert.NoError(t, err)\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t\tTreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}, unset)\n}\n\nfunc TestUnsetKeyInArrayItem(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t\tTreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey: \"barbar\",\n\t\t\t\t\t\tValue: \"barbar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\", 0, \"barbar\"})\n\tassert.NoError(t, err)\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t\tTreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}, unset)\n}\n\nfunc TestUnsetArrayLastItem(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t\tTreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\", 0})\n\tassert.NoError(t, err)\n\tassert.Equal(t, TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t},\n\t\t},\n\t}, unset)\n}\n\nfunc TestUnsetKeyNotFound(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: TreeBranch{\n\t\t\t\tTreeItem{\n\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\tValue: \"bar\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\", \"unknown-value\"})\n\tassert.Equal(t, err.(*SopsKeyNotFound).Key, \"unknown-value\")\n\tassert.ErrorContains(t, err, \"unknown-value\")\n\tassert.Nil(t, unset, \"Unset result was not nil upon %s\", err)\n}\n\nfunc TestUnsetKeyInArrayNotFound(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t\tTreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\", 0, \"unknown\"})\n\tassert.Equal(t, err.(*SopsKeyNotFound).Key, \"unknown\")\n\tassert.Nil(t, unset, \"Unset result was not nil upon %s\", err)\n}\n\nfunc TestUnsetArrayItemOutOfBounds(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: []interface{}{\n\t\t\t\tTreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\t\tValue: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\", 99})\n\tassert.Equal(t, err.(*SopsKeyNotFound).Key, 99)\n\tassert.Nil(t, unset, \"Unset result was not nil upon %s\", err)\n}\n\nfunc TestUnsetKeyNotABranch(t *testing.T) {\n\tbranch := TreeBranch{\n\t\tTreeItem{\n\t\t\tKey: \"foo\",\n\t\t\tValue: 99,\n\t\t},\n\t}\n\tunset, err := branch.Unset([]interface{}{\"foo\", \"bar\"})\n\tassert.ErrorContains(t, err, \"Unsupported type\")\n\tassert.Nil(t, unset, \"Unset result was not nil upon %s\", err)\n}\n\nfunc TestEmitAsMap(t *testing.T) {\n\texpected := map[string]interface{}{\n\t\t\"foobar\": \"barfoo\",\n\t\t\"number\": 42,\n\t\t\"foo\": map[string]interface{}{\n\t\t\t\"bar\": map[string]interface{}{\n\t\t\t\t\"baz\": \"foobar\",\n\t\t\t},\n\t\t},\n\t}\n\tbranches := TreeBranches{\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"foobar\",\n\t\t\t\tValue: \"barfoo\",\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   \"number\",\n\t\t\t\tValue: 42,\n\t\t\t},\n\t\t\tTreeItem{\n\t\t\t\tKey:   Comment{\"comment\"},\n\t\t\t\tValue: nil,\n\t\t\t},\n\t\t},\n\t\tTreeBranch{\n\t\t\tTreeItem{\n\t\t\t\tKey: \"foo\",\n\t\t\t\tValue: TreeBranch{\n\t\t\t\t\tTreeItem{\n\t\t\t\t\t\tKey: \"bar\",\n\t\t\t\t\t\tValue: TreeBranch{\n\t\t\t\t\t\t\tTreeItem{\n\t\t\t\t\t\t\t\tKey:   \"baz\",\n\t\t\t\t\t\t\t\tValue: \"foobar\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tdata, err := EmitAsMap(branches)\n\n\tassert.NoError(t, err)\n\tassert.Equal(t, expected, data)\n}\n\nfunc TestSortKeyGroupIndices(t *testing.T) {\n\tt.Run(\"default order\", func(t *testing.T) {\n\t\tgroup := KeyGroup{&hcvault.MasterKey{}, &age.MasterKey{}, &pgp.MasterKey{}}\n\t\texpected := []int{1, 2, 0}\n\t\tindices := sortKeyGroupIndices(group, DefaultDecryptionOrder)\n\t\tassert.Equal(t, expected, indices)\n\t})\n\n\tt.Run(\"different keygroup\", func(t *testing.T) {\n\t\tgroup := KeyGroup{&hcvault.MasterKey{}, &pgp.MasterKey{}, &age.MasterKey{}}\n\t\texpected := []int{2, 1, 0}\n\t\tindices := sortKeyGroupIndices(group, DefaultDecryptionOrder)\n\t\tassert.Equal(t, expected, indices)\n\t})\n\n\tt.Run(\"repeated key\", func(t *testing.T) {\n\t\tgroup := KeyGroup{&pgp.MasterKey{}, &hcvault.MasterKey{}, &pgp.MasterKey{}, &age.MasterKey{}}\n\t\texpected := []int{3, 0, 2, 1}\n\t\tindices := sortKeyGroupIndices(group, DefaultDecryptionOrder)\n\t\tassert.Equal(t, expected, indices)\n\t})\n\n\tt.Run(\"full order\", func(t *testing.T) {\n\t\tgroup := KeyGroup{&hcvault.MasterKey{}, &pgp.MasterKey{}, &age.MasterKey{}}\n\t\texpected := []int{1, 2, 0}\n\t\tindices := sortKeyGroupIndices(group, []string{\"pgp\", \"age\", \"hc_vault\"})\n\t\tassert.Equal(t, expected, indices)\n\t})\n\n\tt.Run(\"empty order\", func(t *testing.T) {\n\t\tgroup := KeyGroup{&hcvault.MasterKey{}, &pgp.MasterKey{}, &age.MasterKey{}}\n\t\texpected := []int{0, 1, 2}\n\t\tindices := sortKeyGroupIndices(group, []string{})\n\t\tassert.Equal(t, expected, indices)\n\t})\n\n\tt.Run(\"one match\", func(t *testing.T) {\n\t\tgroup := KeyGroup{&hcvault.MasterKey{}, &pgp.MasterKey{}, &age.MasterKey{}}\n\t\texpected := []int{2, 0, 1}\n\t\tindices := sortKeyGroupIndices(group, []string{\"azure_kv\", \"age\"})\n\t\tassert.Equal(t, expected, indices)\n\t})\n\n\tt.Run(\"nonmatching order\", func(t *testing.T) {\n\t\tgroup := KeyGroup{&pgp.MasterKey{}, &hcvault.MasterKey{}, &age.MasterKey{}}\n\t\texpected := []int{0, 1, 2}\n\t\tindices := sortKeyGroupIndices(group, []string{\"azure_kv\"})\n\t\tassert.Equal(t, expected, indices)\n\t})\n\n\tt.Run(\"nonexistent keys\", func(t *testing.T) {\n\t\tgroup := KeyGroup{&hcvault.MasterKey{}, &pgp.MasterKey{}, &age.MasterKey{}}\n\t\texpected := []int{2, 1, 0}\n\t\tindices := sortKeyGroupIndices(group, []string{\"dummy1\", \"age\", \"dummy2\", \"pgp\", \"dummy3\"})\n\t\tassert.Equal(t, expected, indices)\n\t})\n}\n"
        },
        {
          "name": "stores",
          "type": "tree",
          "content": null
        },
        {
          "name": "usererrors.go",
          "type": "blob",
          "size": 4.314453125,
          "content": "package sops\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"strings\"\n\n\t\"github.com/fatih/color\"\n\t\"github.com/goware/prefixer\"\n\t\"github.com/mitchellh/go-wordwrap\"\n)\n\n// UserError is a well-formatted error for the purpose of being displayed to\n// the end user.\ntype UserError interface {\n\terror\n\tUserError() string\n}\n\nvar statusSuccess = color.New(color.FgGreen).Sprint(\"SUCCESS\")\nvar statusFailed = color.New(color.FgRed).Sprint(\"FAILED\")\n\ntype getDataKeyError struct {\n\tRequiredSuccessfulKeyGroups int\n\tGroupResults                []error\n}\n\nfunc (err *getDataKeyError) successfulKeyGroups() int {\n\tn := 0\n\tfor _, r := range err.GroupResults {\n\t\tif r == nil {\n\t\t\tn++\n\t\t}\n\t}\n\treturn n\n}\n\nfunc (err *getDataKeyError) Error() string {\n\treturn fmt.Sprintf(\"Error getting data key: %d successful groups \"+\n\t\t\"required, got %d\", err.RequiredSuccessfulKeyGroups,\n\t\terr.successfulKeyGroups())\n}\n\nfunc (err *getDataKeyError) UserError() string {\n\tvar groupErrs []string\n\tfor i, res := range err.GroupResults {\n\t\tgroupErr := decryptGroupError{\n\t\t\terr:       res,\n\t\t\tgroupName: fmt.Sprintf(\"%d\", i),\n\t\t}\n\t\tgroupErrs = append(groupErrs, groupErr.UserError())\n\t}\n\tvar trailer string\n\tif err.RequiredSuccessfulKeyGroups == 0 {\n\t\ttrailer = \"Recovery failed because no master key was able to decrypt \" +\n\t\t\t\"the file. In order for SOPS to recover the file, at least one key \" +\n\t\t\t\"has to be successful, but none were.\"\n\t} else {\n\t\ttrailer = fmt.Sprintf(\"Recovery failed because the file was \"+\n\t\t\t\"encrypted with a Shamir threshold of %d, but only %d part(s) \"+\n\t\t\t\"were successfully recovered, one for each successful key group. \"+\n\t\t\t\"In order for SOPS to recover the file, at least %d groups have \"+\n\t\t\t\"to be successful. In order for a group to be successful, \"+\n\t\t\t\"decryption has to succeed with any of the keys in that key group.\",\n\t\t\terr.RequiredSuccessfulKeyGroups, err.successfulKeyGroups(),\n\t\t\terr.RequiredSuccessfulKeyGroups)\n\t}\n\ttrailer = wordwrap.WrapString(trailer, 75)\n\treturn fmt.Sprintf(\"Failed to get the data key required to \"+\n\t\t\"decrypt the SOPS file.\\n\\n%s\\n\\n%s\",\n\t\tstrings.Join(groupErrs, \"\\n\\n\"), trailer)\n}\n\ntype decryptGroupError struct {\n\tgroupName string\n\terr       error\n}\n\nfunc (r *decryptGroupError) Error() string {\n\treturn fmt.Sprintf(\"could not decrypt group %s: %s\", r.groupName, r.err)\n}\n\nfunc (r *decryptGroupError) UserError() string {\n\tvar status string\n\tif r.err == nil {\n\t\tstatus = statusSuccess\n\t} else {\n\t\tstatus = statusFailed\n\t}\n\theader := fmt.Sprintf(`Group %s: %s`, r.groupName, status)\n\tif r.err == nil {\n\t\treturn header\n\t}\n\tmessage := r.err.Error()\n\tif userError, ok := r.err.(UserError); ok {\n\t\tmessage = userError.UserError()\n\t}\n\treader := prefixer.New(strings.NewReader(message), \"  \")\n\t// Safe to ignore this error, as reading from a strings.Reader can't fail\n\terrMsg, _ := io.ReadAll(reader)\n\treturn fmt.Sprintf(\"%s\\n%s\", header, string(errMsg))\n}\n\ntype decryptKeyErrors []error\n\nfunc (e decryptKeyErrors) Error() string {\n\treturn fmt.Sprintf(\"error decrypting key: %s\", []error(e))\n}\n\nfunc (e decryptKeyErrors) UserError() string {\n\tvar errStrs []string\n\tfor _, err := range []error(e) {\n\t\tif userErr, ok := err.(UserError); ok {\n\t\t\terrStrs = append(errStrs, userErr.UserError())\n\t\t} else {\n\t\t\terrStrs = append(errStrs, err.Error())\n\t\t}\n\t}\n\treturn strings.Join(errStrs, \"\\n\\n\")\n}\n\ntype decryptKeyError struct {\n\tkeyName string\n\terrs    []error\n}\n\nfunc (e *decryptKeyError) isSuccessful() bool {\n\tfor _, err := range e.errs {\n\t\tif err == nil {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc (e *decryptKeyError) Error() string {\n\treturn fmt.Sprintf(\"error decrypting key %s: %s\", e.keyName, e.errs)\n}\n\nfunc (e *decryptKeyError) UserError() string {\n\tvar status string\n\tif e.isSuccessful() {\n\t\tstatus = statusSuccess\n\t} else {\n\t\tstatus = statusFailed\n\t}\n\theader := fmt.Sprintf(\"%s: %s\", e.keyName, status)\n\tif e.isSuccessful() {\n\t\treturn header\n\t}\n\tvar errMessages []string\n\tfor _, err := range e.errs {\n\t\twrappedErr := wordwrap.WrapString(err.Error(), 60)\n\t\treader := prefixer.New(strings.NewReader(wrappedErr), \"  | \")\n\t\t// Safe to ignore this error, as reading from a strings.Reader can't fail\n\t\terrMsg, _ := io.ReadAll(reader)\n\t\terrMsg[0] = '-'\n\t\terrMessages = append(errMessages, string(errMsg))\n\t}\n\tjoinedMsgs := strings.Join(errMessages, \"\\n\\n\")\n\treader := prefixer.New(strings.NewReader(joinedMsgs), \"  \")\n\terrMsg, _ := io.ReadAll(reader)\n\treturn fmt.Sprintf(\"%s\\n%s\", header, string(errMsg))\n}\n"
        },
        {
          "name": "version",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}