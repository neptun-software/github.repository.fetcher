{
  "metadata": {
    "timestamp": 1736568107554,
    "page": 245,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjI0OA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "claudiodangelis/qrcp",
      "stars": 10058,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "qr-filetransfer\nqrcp\ndist\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 2.0400390625,
          "content": "before:\n  hooks:\n    - go mod download\nbuilds:\n- env:\n  - CGO_ENABLED=0\n  ldflags:\n  - -s -w -X github.com/claudiodangelis/qrcp/version.version={{.Version}} -X github.com/claudiodangelis/qrcp/version.date={{.Date}}\n  goos:\n  - linux\n  - darwin\n  - windows\n  goarch:\n  - 386\n  - amd64\n  - arm\n  - arm64\n  goarm:\n  - 7\n  ignore:\n  - goos: darwin\n    goarch: 386\n  - goos: darwin\n    goarch: arm64\n  - goos: windows\n    goarch: arm64\narchives:\n# - replacements:\n#     darwin: macOS\n#     windows: Windows\n#     386: i386\n#     amd64: x86_64\nchecksum:\n  name_template: 'checksums.txt'\nsnapshot:\n  name_template: \"{{ .Tag }}-next\"\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n    - '^docs:'\n    - '^test:'\n    - '^chore:'\nrelease:\n  footer: |\n    ## Downloads\n    | Platform | Download link                                                                                                                 |\n    |----------|-------------------------------------------------------------------------------------------------------------------------------|\n    | Linux    | [deb package](https://github.com/claudiodangelis/qrcp/releases/download/{{ .Tag }}/qrcp_{{ .Tag }}_linux_x86_64.deb)          |\n    | Linux    | [RPM package](https://github.com/claudiodangelis/qrcp/releases/download/{{ .Tag }}/qrcp_{{ .Tag }}_linux_x86_64.rpm)          |\n    | macOS    | [macOS package](https://github.com/claudiodangelis/qrcp/releases/download/{{ .Tag }}/qrcp_{{ .Tag }}_macOS_x86_64.tar.gz)     |\n    | Windows  | [Windows package](https://github.com/claudiodangelis/qrcp/releases/download/{{ .Tag }}/qrcp_{{ .Tag }}_Windows_x86_64.tar.gz) |\n\n    Refer to the list of assets below for all supported platform.\nnfpms:\n  # - replacements:\n  #     darwin: macOS\n  #     windows: Windows\n  #     386: i386\n  #     amd64: x86_64\n  - homepage: https://qrcp.sh\n    maintainer: Claudio d'Angelis <claudiodangelis@gmail.com>\n    description: Transfer files over wifi from your computer to your mobile device by scanning a QR code without leaving the terminal.\n    license: MIT\n    formats:\n      - deb\n      - rpm\n"
        },
        {
          "name": "DEVELOPMENT.md",
          "type": "blob",
          "size": 0.65234375,
          "content": "# Development\n\n## Versioning\n\n`qrcp` uses [semver](https://semver.org) for releases.\n\nVersion number is defined in `cmd/version.go`.\n\n## Releases\n\nWe are using [goreleases](https://goreleaser.com/), [nfpm](https://nfpm.goreleaser.com/) and [Github Actions](https://github.com/features/actions) to build, package and release `qrcp`.\n\nThe relevant files are:\n\n- .goreleases.yml\n- .github/workflows/main.yml\n\nThe release action is triggered when a tag is pushed to the master branch.\n\n## Development workflow\n\n1. Open a PR\n2. Let someone review it\n3. Squash commits and merge to master\n4. When ready to release, add a tag\n5. Wait for Github Action to process the release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2025 Claudio d'Angelis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.3212890625,
          "content": "![Logo](docs/img/logo.svg)\n\n# $ qrcp\n\nTransfer files over Wi-Fi from your computer to a mobile device by scanning a QR code without leaving the terminal.\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/claudiodangelis/qrcp)](https://goreportcard.com/report/github.com/claudiodangelis/qrcp)\n\nYou can support development by donating with  [![Buy Me A Coffee](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/claudiodangelis).\n\nJoin the **Telegram channel** [qrcp_dev](https://t.me/qrcp_dev) or the [@qrcp_dev](https://twitter.com/qrcp_dev) **Twitter account** for news about the development.\n\n\n## How does it work?\n![Screenshot](docs/img/screenshot.png)\n\n`qrcp` binds a web server to the address of your Wi-Fi network interface on a random port and creates a handler for it. The default handler serves the content and exits the program when the transfer is complete. When used to receive files, `qrcp` serves an upload page and handles the transfer.\n\nThe tool prints a QR code that encodes the text:\n\n```\nhttp://{address}:{port}/{random_path}\n```\n\n\nMost QR apps can detect URLs in decoded text and act accordingly (i.e. open the decoded URL with the default browser), so when the QR code is scanned the content will begin downloading by the mobile browser.\n\nSend files to mobile:\n\n![screenshot](docs/img/demo.gif)\n\nReceive files from mobile:\n\n![Screenshot](docs/img/mobile-demo.gif)\n\n## Tutorials\n\n- [Secure transfers with mkcert](https://qrcp.sh/tutorials/secure-transfers-with-mkcert)\n\n# Installation\n\n## Install the latest development version with Go\n\n_Note: it requires go 1.18_\n\n    go install github.com/claudiodangelis/qrcp@latest\n\n## Linux\n\nDownload the latest Linux .tar.gz archive from the [Releases](https://github.com/claudiodangelis/qrcp/releases) page, extract it, move the binary to the proper directory, then set execution permissions.\n\n```sh\n# Extract the archive\ntar xf qrcp_0.5.0_linux_x86_64.tar.gz\n# Copy the binary\nsudo mv qrcp /usr/local/bin\n# Set execution permissions\nsudo chmod +x /usr/local/bin/qrcp\n```\n\n### Raspberry Pi\n\nThe following ARM releases are available in the [Releases](https://github.com/claudiodangelis/qrcp/releases) page:\n\n- `armv7`\n- `arm64`\n\n\n### Using a package manager\n\n#### ArchLinux\n\nPackages available on AUR:\n-  [qrcp-bin](https://aur.archlinux.org/packages/qrcp-bin)\n-  [qrcp](https://aur.archlinux.org/packages/qrcp)\n\n#### Deb packages (Ubuntu, Debian, etc)\n\nDownload the latest .deb package from the [Releases page](https://github.com/claudiodangelis/qrcp/releases), then run `dpkg`:\n\n```sh\nsudo dpkg -i qrcp_0.5.0_linux_x86_64.deb\n# Confirm it's working:\nqrcp version\n```\n\n#### RPM packages (CentOS, Fedora, etc)\n\nDownload the latest .rpm package from the [Releases page](https://github.com/claudiodangelis/qrcp/releases), then run `rpm`:\n\n```sh\nsudo rpm -i qrcp_0.5.0_linux_x86_64.rpm\n# Confirm it's working:\nqrcp --help\n```\n\n## Windows\n\nDownload the latest Windows .tar.gz archive from the [Releases page](https://github.com/claudiodangelis/qrcp/releases) and extract the EXE file.\n\n### Scoop\n\nIf you use [Scoop](https://scoop.sh/) for package management on Windows, you can install qrcp with the following one-liner:\n\n```\nscoop install qrcp\n```\n### Chocolatey\n\nIf you use [Chocolatey](https://community.chocolatey.org/packages/qrcp) for package management on Windows, you can install qrcp with the following one-liner:\n\n```\nchoco install qrcp\n```\n\n## MacOS\n\nDownload the latest macOS .tar.gz archive from the [Releases page](https://github.com/claudiodangelis/qrcp/releases), extract it, move the binary to the proper directory, then set execution permissions.\n\n```sh\n# Extract the archive\ntar xf qrcp_0.5.0_macOS_x86_64.tar.gz\n# Copy the binary\nsudo mv qrcp /usr/local/bin\n# Set execution permissions\nsudo chmod +x /usr/local/bin/qrcp\n# Confirm it's working:\nqrcp --help\n```\n\n### Homebrew\n\nIf you use [Homebrew](https://brew.sh) for package management on macOS, you can install qrcp with the following one-liner:\n\n```\nbrew install qrcp\n```\n\n# Usage\n\n## Send files\n\n### Send a file\n\n```sh\nqrcp MyDocument.pdf\n```\n\n### Send multiple files at once\n\nWhen sending multiple files at once, `qrcp` creates a zip archive of the files or folders you want to transfer, and deletes the zip archive once the transfer is complete.\n\n```sh\n# Multiple files\nqrcp MyDocument.pdf IMG0001.jpg\n```\n\n```sh\n# A whole folder\nqrcp Documents/\n```\n\n\n### Zip a file before transferring it\nYou can choose to zip a file before transferring it.\n\n```sh\nqrcp --zip LongVideo.avi\n```\n\n\n## Receive files\n\nWhen receiving files, `qrcp` serves an \"upload page\" through which you can choose files from your mobile.\n\n### Receive files to the current directory\n\n```\nqrcp receive\n```\n\n### Receive files to a specific directory\n\n```sh\n# Note: the folder must exist\nqrcp receive --output=/tmp/dir\n```\n\n\n## Configuration\n\n`qrcp` works without any prior configuration, however, you can choose to configure to use specific values.\n\nTo configure `qrcp` you can create a configuration file inside `$XDG_CONFIG_HOME/qrcp`.\n\n> Note: On Linux, the `$XDG_CONFIG_HOME` is `.config` under user home directory.\n> So, for example, on Linux the configuration file will be `$HOME/.config/qrcp/config.yml`.\n> On MacOS, it defaults to `$HOME/Library/Application Support/qrcp/config.yml``\n\n> Note: Starting from version 0.10.0, qrcp uses a YAML configuration file instead of the old JSON one. You can automatically migrate the legacy JSON format to the new YAML format by running `qrcp config migrate`.\n\n| Key         | Type    | Notes                                                                                                                                                                                  |\n|-------------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `interface` | String  | This value is automatically discovered during the first launch of `qrcp`, you can set it to override the default. You can use the `any` interface to bind the web server to `0.0.0.0`. |\n| `bind`      | String  | This value is used by qrcp to bind the web server to. Note: if this value is set, the `interface` parameter is ignored.                                                                |\n| `port`      | Integer | When this value is not set, `qrcp` will pick a random port at any launch.                                                                                                              |\n| `path`      | String  | When this value is not set, `qrcp` will add a random string at the end of URL.                                                                                                         |\n| `output`    | String  | Default directory to receive files to. If empty, the current working directory is used.                                                                                                |\n| `fqdn`      | String  | When this value is set, `qrcp` will use it to replace the IP address in the generated URL.                                                                                             |\n| `keepAlive` | Bool    | Controls whether `qrcp` should quit after transferring the file. Defaults to `false`.                                                                                                  |\n| `secure`    | Bool    | Controls whether `qrcp` should use HTTPS instead of HTTP. Defaults to `false`                                                                                                          |\n| `tls-cert`  | String  | Path to the TLS certificate. It's only used when `secure: true`.                                                                                                                       |\n| `tls-key`   | String  | Path to the TLS key. It's only used when `secure: true`.                                                                                                                               |\n| `reversed`  | Bool    | Reverse QR code (black text on white background)?\" true`.                                                                                                                               |\n\n\nAll the configuration parameters can be controlled via environment variables prefixed with `QRCP_`, for example:\n- `$QRCP_INTERFACE`\n- `$QRCP_PORT`\n- `$QRCP_KEEPALIVE`\n- _etc_\n\n### Config Wizard\n\nThe `config` command launches a wizard that lets you configure parameters like interface, port, fully-qualified domain name and keep alive.\n\n```sh\nqrcp config\n```\n\nNote: if some network interfaces are not showing up, use the `--list-all-interfaces` flag to suppress the interfaces' filter.\n\n```sh\nqrcp --list-all-interfaces config\n```\n\n\n### Configuration File\n\nThe default configuration file is stored in $XDG_CONFIG_HOME/qrcp/config.yml, however, you can specify the location of the config file by passing the `--config` flag:\n\n```sh\nqrcp --config /tmp/qrcp.yml MyDocument.pdf\n```\n\n### Port\n\nBy default `qrcp` listens on a random port. Set the `QRCP_PORT` environment variable or pass the `--port` (or `-p`) flag to choose a specific one:\n\n```sh\nexport QRCP_PORT=8080\nqrcp MyDocument\n```\n\nOr:\n\n```sh\nqrcp --port 8080 MyDocument.pdf\n```\n\n### Network Interface\n\n`qrcp` will try to automatically find the suitable network interface to use for the transfers. If more than one suitable interface is found, it asks you to choose one.\n\nIf you want to use a specific interface, pass the `--interface` (or `-i`) flag:\n\n\n\n```sh\n# The webserver will be visible by\n# all computers on the tun0's interface network\nqrcp -i tun0 MyDocument.dpf\n```\n\n\nYou can also use a special interface name, `any`, which binds the web server to `0.0.0.0`, making the web server visible by everyone on any network, even from an external network.\n\nThis is useful when you want to transfer files from your Amazon EC2, Digital Ocean Droplet, Google Cloud Platform Compute Instance or any other VPS.\n\n```sh\nqrcp -i any MyDocument.pdf\n```\n\n### Bind\n\nAlternatively to choosing the interface, you can directly specify the address you want `qrcp` to bind the webserver to.\n\n```sh\nqrcp --bind 10.20.30.40 MyDocument.pdf\n```\n\n### URL\n\n`qrcp` uses two patterns for the URLs:\n\n- send: `http://{ip address}:{port}/send/{random path}`\n- receive: `http://{ip address}:{port}/receive/{random path}`\n\nA few options are available that override these patterns.\n\n\nPass the `--path` flag to use a specific path for URLs, for example:\n\n```sh\n# The resulting URL will be\n# http://{ip address}:{port}/send/x\nqrcp --path=x MyDocument.pdf\n```\n\nPass the `--fqdn` (or `-d`) to use a fully qualified domain name instead of the IP. This is useful in combination with `-i any` you are using it from a remote location:\n\n```sh\n# The resulting URL will be\n# http://example.com:8080/send/xYz9\nqrcp --fqdn example.com -i any -p 8080 MyRemoteDocument.pdf\n```\n\n### HTTPS\n\n**qrcp** supports secure file transfers with HTTPS. To enable secure transfers you need a TLS certificate and the associated key.\n\nYou can choose the path to the TLS certificate and keys from the `qrcp config` wizard, or, if you want, you can pass the `--tls-cert` and `--tls-key`:\n\n```sh\nqrcp --tls-cert /path/to/cert.pem --tls-key /path/to/cert.key MyDocument\n```\n\nA `--secure` flag is available too, you can use it to override the default value.\n\n### Default output directory\n\n### Open in browser\n\nIf you need a QR to be printed outside your terminal, you can pass the `--browser` flag. With this flag, `qrcp` will still print the QR code to the terminal, but it will also open a new window of your default browser to show the QR code.\n\n```\nqrcp --browser MyDocument.pdf\n```\n\n### Keep the server alive\n\nIt can be useful to keep the server alive after transferring the file, for example, when you want to transfer the same file to multiple devices. You can use the `--keep-alive` flag for that:\n\n```sh\n# The server will not shutdown automatically\n# after the first transfer\nqrcp --keep-alive MyDocument.pdf\n```\n\n## Shell completion scripts\n\n`qrcp` comes with a built-in `completion` command that generates shell completion scripts.\n\n### Bash:\n\n    $ source <(qrcp completion bash)\n\nTo load completions for each session, execute once:\n\nLinux:\n\n    $ qrcp completion bash > /etc/bash_completion.d/qrcp\n\n_Note: if you don't want to install completion scripts system-wide, refer to [Bash Completion FAQ](https://github.com/scop/bash-completion/blob/master/README.md)_.\n\nMacOS:\n\n    $ qrcp completion bash > /usr/local/etc/bash_completion.d/qrcp\n\n### Zsh:\n\nIf shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:\n\n    $ echo \"autoload -U compinit; compinit\" >> ~/.zshrc\n\nTo load completions for each session, execute once:\n\n    $ qrcp completion zsh > \"${fpath[1]}/_qrcp\"\n\nYou will need to start a new shell for this setup to take effect.\n\n### Fish:\n\n    $ qrcp completion fish | source\n\nTo load completions for each session, execute once:\n\n    $ qrcp completion fish > ~/.config/fish/completions/qrcp.fish\n\n\n## Authors\n\n**qrcp**, originally called **qr-filetransfer**, started from an idea of [Claudio d'Angelis](claudiodangelis@gmail.com) ([@claudiodangelis](https://t.me/claudiodangelis) on Telegram), the current maintainer, and it's [developed by the community](https://github.com/claudiodangelis/qrcp/graphs/contributors).\n\n\n[Join us!](https://github.com/claudiodangelis/qrcp/fork)\n\n## Credits\n\nLogo is provided by [@arasatasaygin](https://github.com/arasatasaygin) as part of the [openlogos](https://github.com/arasatasaygin/openlogos) initiative, a collection of free logos for open source projects.\n\nCheck out the rules to claim one: [rules of openlogos](https://github.com/arasatasaygin/openlogos#rules).\n\nReleases are handled with [goreleaser](https://goreleaser.com).\n\n## Clones and Similar Projects\n\n- [qr-fileshare](https://github.com/shivensinha4/qr-fileshare) - A similar idea executed in NodeJS with a React interface.\n- [instant-file-transfer](https://github.com/maximumdata/instant-file-transfer) _(Uncredited)_ - Node.js project similar to this\n- [qr-filetransfer](https://github.com/sdushantha/qr-filetransfer) - Python clone of this project\n- [qr-filetransfer](https://github.com/svenkatreddy/qr-filetransfer) - Another Node.js clone of this project\n- [qr-transfer-node](https://github.com/codezoned/qr-transfer-node) - Another Node.js clone of this project\n- [QRDELIVER](https://github.com/realdennis/qrdeliver) - Node.js project similar to this\n- [qrfile](https://github.com/sgbj/qrfile) - Transfer files by scanning a QR code\n- [quick-transfer](https://github.com/CodeMan99/quick-transfer) - Node.js clone of this project\n- [share-file-qr](https://github.com/pwalch/share-file-qr) - Python re-implementation of this project\n- [share-files](https://github.com/antoaravinth/share-files) _(Uncredited)_  - Yet another Node.js clone of this project\n- [ezshare](https://github.com/mifi/ezshare) - Another Node.js two way file sharing tool supporting folders and multiple files\n- [local_file_share](https://github.com/woshimanong1990/local_file_share)  - _\"share local file to other people, OR smartphone download files which is in pc\"_\n- [qrcp](https://github.com/pearl2201/qrcp) - a desktop app clone of `qrcp`, writing with C# and .NET Core, work for Windows.\n- [swift_file](https://github.com/mateoradman/swift_file) - Rust project inspired by `qrcp`.\n- [qrcp-android](https://github.com/ianfixes/qrcp-android) - Android app inspired by `qrcp`.\n\n## License\n\nMIT. See [LICENSE](LICENSE).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.31640625,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| > 0.8.0   | :white_check_mark: |\n| < 0.8.0   | :x: |\n \n\n## Reporting a Vulnerability\n\nIf you have found a security issue, please immediately contact the main maintainer of the project at claudiodangelis@gmail.com.\n"
        },
        {
          "name": "application",
          "type": "tree",
          "content": null
        },
        {
          "name": "body",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.58984375,
          "content": "module github.com/claudiodangelis/qrcp\n\ngo 1.18\n\nrequire (\n\tgithub.com/adrg/xdg v0.5.3\n\tgithub.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496\n\tgithub.com/eiannone/keyboard v0.0.0-20200508000154-caf4b762e807\n\tgithub.com/glendc/go-external-ip v0.1.0\n\tgithub.com/jhoonb/archivex v0.0.0-20180718040744-0488e4ce1681\n\tgithub.com/manifoldco/promptui v0.9.0\n\tgithub.com/skip2/go-qrcode v0.0.0-20191027152451-9434209cb086\n\tgithub.com/spf13/cobra v1.8.1\n\tgithub.com/spf13/viper v1.19.0\n\tgopkg.in/cheggaaa/pb.v1 v1.0.28\n\tgopkg.in/yaml.v2 v2.4.0\n)\n\nrequire (\n\tgithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e // indirect\n\tgithub.com/fsnotify/fsnotify v1.7.0 // indirect\n\tgithub.com/hashicorp/hcl v1.0.0 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/magiconair/properties v1.8.7 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.9 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.2.2 // indirect\n\tgithub.com/sagikazarmark/locafero v0.4.0 // indirect\n\tgithub.com/sagikazarmark/slog-shim v0.1.0 // indirect\n\tgithub.com/sourcegraph/conc v0.3.0 // indirect\n\tgithub.com/spf13/afero v1.11.0 // indirect\n\tgithub.com/spf13/cast v1.6.0 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/subosito/gotenv v1.6.0 // indirect\n\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/multierr v1.9.0 // indirect\n\tgolang.org/x/exp v0.0.0-20230905200255-921286631fa9 // indirect\n\tgolang.org/x/sys v0.26.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n\tgopkg.in/ini.v1 v1.67.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 8.7333984375,
          "content": "github.com/adrg/xdg v0.5.3 h1:xRnxJXne7+oWDatRhR1JLnvuccuIeCoBu2rtuLqQB78=\ngithub.com/adrg/xdg v0.5.3/go.mod h1:nlTsY+NNiCBGCK2tpm09vRqfVzrc2fLmXGpBLF0zlTQ=\ngithub.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496 h1:zV3ejI06GQ59hwDQAvmK1qxOQGB3WuVTRoY0okPTAv0=\ngithub.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496/go.mod h1:oGkLhpf+kjZl6xBf758TQhh5XrAeiJv/7FRz/2spLIg=\ngithub.com/chzyer/logex v1.1.10 h1:Swpa1K6QvQznwJRcfTfQJmTE72DqScAa40E+fbHEXEE=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e h1:fY5BOSpyZCqRo5OhCuC+XN+r/bBCmeuuJtjz+bCNIf8=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1 h1:q763qf9huN11kDQavWsoZXJNW3xEE4JJyHa5Q25/sd8=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/eiannone/keyboard v0.0.0-20200508000154-caf4b762e807 h1:jdjd5e68T4R/j4PWxfZqcKY8KtT9oo8IPNVuV4bSXDQ=\ngithub.com/eiannone/keyboard v0.0.0-20200508000154-caf4b762e807/go.mod h1:Xoiu5VdKMvbRgHuY7+z64lhu/7lvax/22nzASF6GrO8=\ngithub.com/fatih/color v1.14.1 h1:qfhVLaG5s+nCROl1zJsZRxFeYrHLqWroPOQ8BWiNb4w=\ngithub.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/glendc/go-external-ip v0.1.0 h1:iX3xQ2Q26atAmLTbd++nUce2P5ht5P4uD4V7caSY/xg=\ngithub.com/glendc/go-external-ip v0.1.0/go.mod h1:CNx312s2FLAJoWNdJWZ2Fpf5O4oLsMFwuYviHjS4uJE=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/jhoonb/archivex v0.0.0-20180718040744-0488e4ce1681 h1:EiEjLram6Y0WXygV4WyzKmTr3XaR4CD3tvjdTrsk3cU=\ngithub.com/jhoonb/archivex v0.0.0-20180718040744-0488e4ce1681/go.mod h1:GN1Mg/uXQ6qwXA0HypnUO3xlcQJS9/y68EsHNeuuRa4=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=\ngithub.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/manifoldco/promptui v0.9.0 h1:3V4HzJk1TtXW1MTZMP7mdlwbBpIinw3HztaIlYthEiA=\ngithub.com/manifoldco/promptui v0.9.0/go.mod h1:ka04sppxSGFAtxX0qhlYQjISsg9mR4GWtQEhdbn6Pgg=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-isatty v0.0.17 h1:BTarxUcIeDqL27Mc+vyvdWYSL28zpIhv3RoTdsLMPng=\ngithub.com/mattn/go-runewidth v0.0.9 h1:Lm995f3rfxdpd6TSmuVCHVb/QhupuXlYr8sCI/QdE+0=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=\ngithub.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sagikazarmark/locafero v0.4.0 h1:HApY1R9zGo4DBgr7dqsTH/JJxLTTsOt7u6keLGt6kNQ=\ngithub.com/sagikazarmark/locafero v0.4.0/go.mod h1:Pe1W6UlPYUk/+wc/6KFhbORCfqzgYEpgQ3O5fPuL3H4=\ngithub.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=\ngithub.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=\ngithub.com/skip2/go-qrcode v0.0.0-20191027152451-9434209cb086 h1:RYiqpb2ii2Z6J4x0wxK46kvPBbFuZcdhS+CIztmYgZs=\ngithub.com/skip2/go-qrcode v0.0.0-20191027152451-9434209cb086/go.mod h1:PLPIyL7ikehBD1OAjmKKiOEhbvWyHGaNDjquXMcYABo=\ngithub.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=\ngithub.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=\ngithub.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=\ngithub.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=\ngithub.com/spf13/cast v1.6.0 h1:GEiTHELF+vaR5dhz3VqZfFSzZjYbgeKDpBxQVS4GYJ0=\ngithub.com/spf13/cast v1.6.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v1.19.0 h1:RWq5SEjt8o25SROyN3z2OrDB9l7RPd3lwTWU8EcEdcI=\ngithub.com/spf13/viper v1.19.0/go.mod h1:GQUN9bilAbhU/jgc1bKs99f/suXKeUMct8Adx5+Ntkg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=\ngithub.com/subosito/gotenv v1.6.0/go.mod h1:Dk4QP5c2W3ibzajGcXpNraDfq2IrhjMIvMSWPKKo0FU=\ngo.uber.org/atomic v1.9.0 h1:ECmE8Bn/WFTYwEW/bpKD3M8VtR/zQVbavAoalC1PYyE=\ngo.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/multierr v1.9.0 h1:7fIwc/ZtS0q++VgcfqFDxSBZVv/Xo49/SYnDFupUwlI=\ngo.uber.org/multierr v1.9.0/go.mod h1:X2jQV1h+kxSjClGpnseKVIxpmcjrj7MNnI0bnlfKTVQ=\ngolang.org/x/exp v0.0.0-20230905200255-921286631fa9 h1:GoHiUyI/Tp2nVkLI2mCxVkOjsbSXD66ic0XW0js0R9g=\ngolang.org/x/exp v0.0.0-20230905200255-921286631fa9/go.mod h1:S2oDrQGGwySpoQPVqRShND87VCbxmc6bL1Yd2oYrm6k=\ngolang.org/x/sys v0.0.0-20181122145206-62eef0e2fa9b/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=\ngolang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/cheggaaa/pb.v1 v1.0.28 h1:n1tBJnnK2r7g9OW2btFH91V92STTUevLXYFb8gy9EMk=\ngopkg.in/cheggaaa/pb.v1 v1.0.28/go.mod h1:V/YB90LKu/1FcN3WVnfiiE5oMCibMjukxqG/qStrOgw=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "logger",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.1396484375,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\t\"github.com/claudiodangelis/qrcp/cmd\"\n)\n\nfunc main() {\n\tif err := cmd.Execute(); err != nil {\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "pages",
          "type": "tree",
          "content": null
        },
        {
          "name": "qr",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}