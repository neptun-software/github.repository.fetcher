{
  "metadata": {
    "timestamp": 1736567907425,
    "page": 54,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "charmbracelet/gum",
      "stars": 18577,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0986328125,
          "content": "# Files\ntest\n.DS_Store\n\n# Binaries\ngum\ndist\ntestdata\n\n# Folders\ncompletions/\nmanpages/\n\n# nix\nresult\n"
        },
        {
          "name": ".golangci-soft.yml",
          "type": "blob",
          "size": 0.5556640625,
          "content": "run:\n  tests: false\n\nissues:\n  include:\n    - EXC0001\n    - EXC0005\n    - EXC0011\n    - EXC0012\n    - EXC0013\n\n  max-issues-per-linter: 0\n  max-same-issues: 0\n\nlinters:\n  enable:\n    - exhaustive\n    - goconst\n    - godot\n    - godox\n    - mnd\n    - gomoddirectives\n    - goprintffuncname\n    - misspell\n    - nakedret\n    - nestif\n    - noctx\n    - nolintlint\n    - prealloc\n\n  # disable default linters, they are already enabled in .golangci.yml\n  disable:\n    - wrapcheck\n    - errcheck\n    - gosimple\n    - govet\n    - ineffassign\n    - staticcheck\n    - typecheck\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.3603515625,
          "content": "run:\n  tests: false\n\nissues:\n  include:\n    - EXC0001\n    - EXC0005\n    - EXC0011\n    - EXC0012\n    - EXC0013\n\n  max-issues-per-linter: 0\n  max-same-issues: 0\n\nlinters:\n  enable:\n    - bodyclose\n    - goimports\n    - gosec\n    - nilerr\n    - predeclared\n    - revive\n    - rowserrcheck\n    - sqlclosecheck\n    - tparallel\n    - unconvert\n    - unparam\n    - whitespace\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 0.470703125,
          "content": "# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json\n\nversion: 2\n\nincludes:\n  - from_url:\n      url: charmbracelet/meta/main/goreleaser-full.yaml\n\nvariables:\n  main: \".\"\n  scoop_name: charm-gum\n  description: \"A tool for glamorous shell scripts\"\n  github_url: \"https://github.com/charmbracelet/gum\"\n  maintainer: \"Maas Lalani <maas@charm.sh>\"\n  brew_commit_author_name: \"Maas Lalani\"\n  brew_commit_author_email: \"maas@charm.sh\"\n\nmilestones:\n  - close: true\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.091796875,
          "content": "FROM gcr.io/distroless/static\nCOPY gum /usr/local/bin/gum\nENTRYPOINT [ \"/usr/local/bin/gum\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "MIT License\n\nCopyright (c) 2022-2024 Charmbracelet, Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.1455078125,
          "content": "# Gum\n\n<p>\n    <a href=\"https://stuff.charm.sh/gum/nutritional-information.png\" target=\"_blank\"><img src=\"https://stuff.charm.sh/gum/gum.png\" alt=\"Gum Image\" width=\"450\" /></a>\n    <br><br>\n    <a href=\"https://github.com/charmbracelet/gum/releases\"><img src=\"https://img.shields.io/github/release/charmbracelet/gum.svg\" alt=\"Latest Release\"></a>\n    <a href=\"https://pkg.go.dev/github.com/charmbracelet/gum?tab=doc\"><img src=\"https://godoc.org/github.com/golang/gddo?status.svg\" alt=\"Go Docs\"></a>\n    <a href=\"https://github.com/charmbracelet/gum/actions\"><img src=\"https://github.com/charmbracelet/gum/workflows/build/badge.svg\" alt=\"Build Status\"></a>\n</p>\n\nA tool for glamorous shell scripts. Leverage the power of\n[Bubbles](https://github.com/charmbracelet/bubbles) and [Lip\nGloss](https://github.com/charmbracelet/lipgloss) in your scripts and aliases\nwithout writing any Go code!\n\n<img alt=\"Shell running the ./demo.sh script\" width=\"600\" src=\"https://vhs.charm.sh/vhs-1qY57RrQlXCuydsEgDp68G.gif\">\n\nThe above example is running from a single shell script ([source](./examples/demo.sh)).\n\n## Tutorial\n\nGum provides highly configurable, ready-to-use utilities to help you write\nuseful shell scripts and dotfiles aliases with just a few lines of code.\nLet's build a simple script to help you write\n[Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/#summary)\nfor your dotfiles.\n\nAsk for the commit type with gum choose:\n\n```bash\ngum choose \"fix\" \"feat\" \"docs\" \"style\" \"refactor\" \"test\" \"chore\" \"revert\"\n```\n\n> [!NOTE]\n> This command itself will print to stdout which is not all that useful. To make use of the command later on you can save the stdout to a `$VARIABLE` or `file.txt`.\n\nPrompt for the scope of these changes:\n\n```bash\ngum input --placeholder \"scope\"\n```\n\nPrompt for the summary and description of changes:\n\n```bash\ngum input --value \"$TYPE$SCOPE: \" --placeholder \"Summary of this change\"\ngum write --placeholder \"Details of this change\"\n```\n\nConfirm before committing:\n\n```bash\ngum confirm \"Commit changes?\" && git commit -m \"$SUMMARY\" -m \"$DESCRIPTION\"\n```\n\nCheck out the [complete example](https://github.com/charmbracelet/gum/blob/main/examples/commit.sh) for combining these commands in a single script.\n\n<img alt=\"Running the ./examples/commit.sh script to commit to git\" width=\"600\" src=\"https://vhs.charm.sh/vhs-7rRq3LsEuJVwhwr0xf6Er7.gif\">\n\n## Installation\n\nUse a package manager:\n\n```bash\n# macOS or Linux\nbrew install gum\n\n# Arch Linux (btw)\npacman -S gum\n\n# Nix\nnix-env -iA nixpkgs.gum\n\n# Flox\nflox install gum\n\n# Windows (via WinGet or Scoop)\nwinget install charmbracelet.gum\nscoop install charm-gum\n```\n\n<details>\n<summary>Debian/Ubuntu</summary>\n\n```bash\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg\necho \"deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *\" | sudo tee /etc/apt/sources.list.d/charm.list\nsudo apt update && sudo apt install gum\n```\n\n</details>\n\n<details>\n<summary>Fedora/RHEL/OpenSuse</summary>\n\n```bash\necho '[charm]\nname=Charm\nbaseurl=https://repo.charm.sh/yum/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.charm.sh/yum/gpg.key' | sudo tee /etc/yum.repos.d/charm.repo\nsudo rpm --import https://repo.charm.sh/yum/gpg.key\n\n# yum\nsudo yum install gum\n\n# zypper\nsudo zypper refresh\nsudo zypper install gum\n```\n\n</details>\n\nOr download it:\n\n- [Packages][releases] are available in Debian, RPM, and Alpine formats\n- [Binaries][releases] are available for Linux, macOS, Windows, FreeBSD, OpenBSD, and NetBSD\n\nOr just install it with `go`:\n\n```bash\ngo install github.com/charmbracelet/gum@latest\n```\n\n[releases]: https://github.com/charmbracelet/gum/releases\n\n## Commands\n\n- [`choose`](#choose): Choose an option from a list of choices\n- [`confirm`](#confirm): Ask a user to confirm an action\n- [`file`](#file): Pick a file from a folder\n- [`filter`](#filter): Filter items from a list\n- [`format`](#format): Format a string using a template\n- [`input`](#input): Prompt for some input\n- [`join`](#join): Join text vertically or horizontally\n- [`pager`](#pager): Scroll through a file\n- [`spin`](#spin): Display spinner while running a command\n- [`style`](#style): Apply coloring, borders, spacing to text\n- [`table`](#table): Render a table of data\n- [`write`](#write): Prompt for long-form text\n- [`log`](#log): Log messages to output\n\n## Customization\n\nYou can customize `gum` options and styles with `--flags` and `$ENVIRONMENT_VARIABLES`.\nSee `gum <command> --help` for a full view of each command's customization and configuration options.\n\nCustomize with `--flags`:\n\n```bash\n\ngum input --cursor.foreground \"#FF0\" \\\n          --prompt.foreground \"#0FF\" \\\n          --placeholder \"What's up?\" \\\n          --prompt \"* \" \\\n          --width 80 \\\n          --value \"Not much, hby?\"\n```\n\nCustomize with `ENVIRONMENT_VARIABLES`:\n\n```bash\nexport GUM_INPUT_CURSOR_FOREGROUND=\"#FF0\"\nexport GUM_INPUT_PROMPT_FOREGROUND=\"#0FF\"\nexport GUM_INPUT_PLACEHOLDER=\"What's up?\"\nexport GUM_INPUT_PROMPT=\"* \"\nexport GUM_INPUT_WIDTH=80\n\n# --flags can override values set with environment\ngum input\n```\n\n<img alt=\"Gum input displaying most customization options\" width=\"600\" src=\"https://vhs.charm.sh/vhs-5zb9DlQYA70aL9ZpYLTwKv.gif\">\n\n## Input\n\nPrompt for input with a simple command.\n\n```bash\ngum input > answer.txt\ngum input --password > password.txt\n```\n\n<img src=\"https://vhs.charm.sh/vhs-1nScrStFI3BMlCp5yrLtyg.gif\" width=\"600\" alt=\"Shell running gum input typing Not much, you?\" />\n\n## Write\n\nPrompt for some multi-line text (`ctrl+d` to complete text entry).\n\n```bash\ngum write > story.txt\n```\n\n<img src=\"https://vhs.charm.sh/vhs-7abdKKrUEukgx9aJj8O5GX.gif\" width=\"600\" alt=\"Shell running gum write typing a story\" />\n\n## Filter\n\nFilter a list of values with fuzzy matching:\n\n```bash\necho Strawberry >> flavors.txt\necho Banana >> flavors.txt\necho Cherry >> flavors.txt\ngum filter < flavors.txt > selection.txt\n```\n\n<img src=\"https://vhs.charm.sh/vhs-61euOQtKPtQVD7nDpHQhzr.gif\" width=\"600\" alt=\"Shell running gum filter on different bubble gum flavors\" />\n\nSelect multiple options with the `--limit` flag or `--no-limit` flag. Use `tab` or `ctrl+space` to select, `enter` to confirm.\n\n```bash\ncat flavors.txt | gum filter --limit 2\ncat flavors.txt | gum filter --no-limit\n```\n\n## Choose\n\nChoose an option from a list of choices.\n\n```bash\necho \"Pick a card, any card...\"\nCARD=$(gum choose --height 15 {{A,K,Q,J},{10..2}}\" \"{♠,♥,♣,♦})\necho \"Was your card the $CARD?\"\n```\n\nYou can also select multiple items with the `--limit` or `--no-limit` flag, which determines\nthe maximum of items that can be chosen.\n\n```bash\ncat songs.txt | gum choose --limit 5\ncat foods.txt | gum choose --no-limit --header \"Grocery Shopping\"\n```\n\n<img src=\"https://vhs.charm.sh/vhs-3zV1LvofA6Cbn5vBu1NHHl.gif\" width=\"600\" alt=\"Shell running gum choose with numbers and gum flavors\" />\n\n## Confirm\n\nConfirm whether to perform an action. Exits with code `0` (affirmative) or `1`\n(negative) depending on selection.\n\n```bash\ngum confirm && rm file.txt || echo \"File not removed\"\n```\n\n<img src=\"https://vhs.charm.sh/vhs-3xRFvbeQ4lqGerbHY7y3q2.gif\" width=\"600\" alt=\"Shell running gum confirm\" />\n\n## File\n\nPrompt the user to select a file from the file tree.\n\n```bash\nEDITOR $(gum file $HOME)\n```\n\n<img src=\"https://vhs.charm.sh/vhs-2RMRqmnOPneneIgVJJ3mI1.gif\" width=\"600\" alt=\"Shell running gum file\" />\n\n## Pager\n\nScroll through a long document with line numbers and a fully customizable viewport.\n\n```bash\ngum pager < README.md\n```\n\n<img src=\"https://vhs.charm.sh/vhs-3iMDpgOLmbYr0jrYEGbk7p.gif\" width=\"600\" alt=\"Shell running gum pager\" />\n\n## Spin\n\nDisplay a spinner while running a script or command. The spinner will\nautomatically stop after the given command exits.\n\nTo view or pipe the command's output, use the `--show-output` flag.\n\n```bash\ngum spin --spinner dot --title \"Buying Bubble Gum...\" -- sleep 5\n```\n\n<img src=\"https://vhs.charm.sh/vhs-3YFswCmoY4o3Q7MyzWl6sS.gif\" width=\"600\" alt=\"Shell running gum spin while sleeping for 5 seconds\" />\n\nAvailable spinner types include: `line`, `dot`, `minidot`, `jump`, `pulse`, `points`, `globe`, `moon`, `monkey`, `meter`, `hamburger`.\n\n## Table\n\nSelect a row from some tabular data.\n\n```bash\ngum table < flavors.csv | cut -d ',' -f 1\n```\n\n<!-- <img src=\"https://stuff.charm.sh/gum/table.gif\" width=\"600\" alt=\"Shell running gum table\" /> -->\n\n## Style\n\nPretty print any string with any layout with one command.\n\n```bash\ngum style \\\n\t--foreground 212 --border-foreground 212 --border double \\\n\t--align center --width 50 --margin \"1 2\" --padding \"2 4\" \\\n\t'Bubble Gum (1¢)' 'So sweet and so fresh!'\n```\n\n<img src=\"https://github.com/charmbracelet/gum/assets/42545625/67468acf-b3e0-4e78-bd89-360739eb44fa\" width=\"600\" alt=\"Bubble Gum, So sweet and so fresh!\" />\n\n## Join\n\nCombine text vertically or horizontally. Use this command with `gum style` to\nbuild layouts and pretty output.\n\nTip: Always wrap the output of `gum style` in quotes to preserve newlines\n(`\\n`) when using it as an argument in the `join` command.\n\n```bash\nI=$(gum style --padding \"1 5\" --border double --border-foreground 212 \"I\")\nLOVE=$(gum style --padding \"1 4\" --border double --border-foreground 57 \"LOVE\")\nBUBBLE=$(gum style --padding \"1 8\" --border double --border-foreground 255 \"Bubble\")\nGUM=$(gum style --padding \"1 5\" --border double --border-foreground 240 \"Gum\")\n\nI_LOVE=$(gum join \"$I\" \"$LOVE\")\nBUBBLE_GUM=$(gum join \"$BUBBLE\" \"$GUM\")\ngum join --align center --vertical \"$I_LOVE\" \"$BUBBLE_GUM\"\n```\n\n<img src=\"https://github.com/charmbracelet/gum/assets/42545625/68f7a25d-b495-48dd-982a-cee0c8ea5786\" width=\"600\" alt=\"I LOVE Bubble Gum written out in four boxes with double borders around them.\" />\n\n## Format\n\n`format` processes and formats bodies of text. `gum format` can parse markdown,\ntemplate strings, and named emojis.\n\n```bash\n# Format some markdown\ngum format -- \"# Gum Formats\" \"- Markdown\" \"- Code\" \"- Template\" \"- Emoji\"\necho \"# Gum Formats\\n- Markdown\\n- Code\\n- Template\\n- Emoji\" | gum format\n\n# Syntax highlight some code\ncat main.go | gum format -t code\n\n# Render text any way you want with templates\necho '{{ Bold \"Tasty\" }} {{ Italic \"Bubble\" }} {{ Color \"99\" \"0\" \" Gum \" }}' \\\n    | gum format -t template\n\n# Display your favorite emojis!\necho 'I :heart: Bubble Gum :candy:' | gum format -t emoji\n```\n\nFor more information on template helpers, see the [Termenv\ndocs](https://github.com/muesli/termenv#template-helpers). For a full list of\nnamed emojis see the [GitHub API](https://api.github.com/emojis).\n\n<img src=\"https://github.com/charmbracelet/gum/assets/42545625/5cfbb0c8-0022-460d-841b-fec37527ca66\" width=\"300\" alt=\"Running gum format for different types of formats\" />\n\n## Log\n\n`log` logs messages to the terminal at using different levels and styling using\nthe [`charmbracelet/log`](https://github.com/charmbracelet/log) library.\n\n```bash\n# Log some debug information.\ngum log --structured --level debug \"Creating file...\" name file.txt\n# DEBUG Unable to create file. name=temp.txt\n\n# Log some error.\ngum log --structured --level error \"Unable to create file.\" name file.txt\n# ERROR Unable to create file. name=temp.txt\n\n# Include a timestamp.\ngum log --time rfc822 --level error \"Unable to create file.\"\n```\n\nSee the Go [`time` package](https://pkg.go.dev/time#pkg-constants) for acceptable `--time` formats.\n\nSee [`charmbracelet/log`](https://github.com/charmbracelet/log) for more usage.\n\n<img src=\"https://vhs.charm.sh/vhs-6jupuFM0s2fXiUrBE0I1vU.gif\" width=\"600\" alt=\"Running gum log with debug and error levels\" />\n\n## Examples\n\nHow to use `gum` in your daily workflows:\n\nSee the [examples](./examples/) directory for more real world use cases.\n\n- Write a commit message:\n\n```bash\ngit commit -m \"$(gum input --width 50 --placeholder \"Summary of changes\")\" \\\n           -m \"$(gum write --width 80 --placeholder \"Details of changes\")\"\n```\n\n- Open files in your `$EDITOR`\n\n```bash\n$EDITOR $(gum filter)\n```\n\n- Connect to a `tmux` session\n\n```bash\nSESSION=$(tmux list-sessions -F \\#S | gum filter --placeholder \"Pick session...\")\ntmux switch-client -t \"$SESSION\" || tmux attach -t \"$SESSION\"\n```\n\n- Pick a commit hash from `git` history\n\n```bash\ngit log --oneline | gum filter | cut -d' ' -f1 # | copy\n```\n\n- Simple [`skate`](https://github.com/charmbracelet/skate) password selector.\n\n```\nskate list -k | gum filter | xargs skate get\n```\n\n- Uninstall packages\n\n```bash\nbrew list | gum choose --no-limit | xargs brew uninstall\n```\n\n- Clean up `git` branches\n\n```bash\ngit branch | cut -c 3- | gum choose --no-limit | xargs git branch -D\n```\n\n- Checkout GitHub pull requests with [`gh`](https://cli.github.com/)\n\n```bash\ngh pr list | cut -f1,2 | gum choose | cut -f1 | xargs gh pr checkout\n```\n\n- Copy command from shell history\n\n```bash\ngum filter < $HISTFILE --height 20\n```\n\n- `sudo` replacement\n\n```bash\nalias please=\"gum input --password | sudo -nS\"\n```\n\n## Feedback\n\nWe’d love to hear your thoughts on this project. Feel free to drop us a note!\n\n- [Twitter](https://twitter.com/charmcli)\n- [The Fediverse](https://mastodon.social/@charmcli)\n- [Discord](https://charm.sh/chat)\n\n## License\n\n[MIT](https://github.com/charmbracelet/gum/raw/main/LICENSE)\n\n---\n\nPart of [Charm](https://charm.sh).\n\n<a href=\"https://charm.sh/\"><img alt=\"The Charm logo\" src=\"https://stuff.charm.sh/charm-badge.jpg\" width=\"400\" /></a>\n\nCharm热爱开源 • Charm loves open source\n"
        },
        {
          "name": "choose",
          "type": "tree",
          "content": null
        },
        {
          "name": "completion",
          "type": "tree",
          "content": null
        },
        {
          "name": "confirm",
          "type": "tree",
          "content": null
        },
        {
          "name": "cursor",
          "type": "tree",
          "content": null
        },
        {
          "name": "default.nix",
          "type": "blob",
          "size": 0.2138671875,
          "content": "{ pkgs }:\n\npkgs.buildGoModule rec {\n  pname = \"gum\";\n  version = \"0.14.0\";\n\n  src = ./.;\n\n  vendorHash = \"sha256-UNBDVIz2VEizkhelCjadkzd2S2yTYXecTFUpCf+XtxY=\";\n\n  ldflags = [ \"-s\" \"-w\" \"-X=main.Version=${version}\" ];\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "file",
          "type": "tree",
          "content": null
        },
        {
          "name": "filter",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.4619140625,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1710146030,\n        \"narHash\": \"sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"b1d9ab70662946ef0850d488da1c9019f3a9752a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1715447595,\n        \"narHash\": \"sha256-VsVAUQOj/cS1LCOmMjAGeRksXIAdPnFIjCQ0XLkCsT0=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"062ca2a9370a27a35c524dc82d540e6e9824b652\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.533203125,
          "content": "{\n  description = \"A tool for glamorous shell scripts\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs = { self, nixpkgs, flake-utils }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let pkgs = import nixpkgs { inherit system; }; in\n      rec {\n        packages.default = import ./default.nix { inherit pkgs; };\n      }) // {\n        overlays.default = final: prev: { \n          gum = import ./default.nix { pkgs = final; };\n        };\n      };\n}\n"
        },
        {
          "name": "format",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.9775390625,
          "content": "module github.com/charmbracelet/gum\n\ngo 1.23.0\n\nrequire (\n\tgithub.com/Masterminds/semver/v3 v3.3.1\n\tgithub.com/alecthomas/kong v1.6.1\n\tgithub.com/alecthomas/mango-kong v0.1.0\n\tgithub.com/charmbracelet/bubbles v0.20.0\n\tgithub.com/charmbracelet/bubbletea v1.2.5-0.20241207142916-e0515bc22ad1\n\tgithub.com/charmbracelet/glamour v0.8.0\n\tgithub.com/charmbracelet/lipgloss v1.0.0\n\tgithub.com/charmbracelet/log v0.4.0\n\tgithub.com/charmbracelet/x/ansi v0.6.1-0.20250107110353-48b574af22a5\n\tgithub.com/charmbracelet/x/editor v0.1.0\n\tgithub.com/charmbracelet/x/term v0.2.1\n\tgithub.com/muesli/reflow v0.3.0\n\tgithub.com/muesli/roff v0.1.0\n\tgithub.com/muesli/termenv v0.15.3-0.20241211131612-0d230cb6eb15\n\tgithub.com/sahilm/fuzzy v0.1.1\n\tgolang.org/x/text v0.21.0\n)\n\nrequire (\n\tgithub.com/alecthomas/chroma/v2 v2.14.0 // indirect\n\tgithub.com/atotto/clipboard v0.1.4 // indirect\n\tgithub.com/aymanbagabas/go-osc52/v2 v2.0.1 // indirect\n\tgithub.com/aymerick/douceur v0.2.0 // indirect\n\tgithub.com/dlclark/regexp2 v1.11.0 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/erikgeiser/coninput v0.0.0-20211004153227-1c3628e74d0f // indirect\n\tgithub.com/go-logfmt/logfmt v0.6.0 // indirect\n\tgithub.com/gorilla/css v1.0.1 // indirect\n\tgithub.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mattn/go-localereader v0.0.1 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.16 // indirect\n\tgithub.com/microcosm-cc/bluemonday v1.0.27 // indirect\n\tgithub.com/muesli/ansi v0.0.0-20230316100256-276c6243b2f6 // indirect\n\tgithub.com/muesli/cancelreader v0.2.2 // indirect\n\tgithub.com/muesli/mango v0.2.0 // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgithub.com/yuin/goldmark v1.7.4 // indirect\n\tgithub.com/yuin/goldmark-emoji v1.0.4 // indirect\n\tgolang.org/x/exp v0.0.0-20240613232115-7f521ea00fb8 // indirect\n\tgolang.org/x/net v0.27.0 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/term v0.22.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 9.736328125,
          "content": "github.com/MakeNowJust/heredoc v1.0.0 h1:cXCdzVdstXyiTqTvfqk9SDHpKNjxuom+DOlyEeQ4pzQ=\ngithub.com/MakeNowJust/heredoc v1.0.0/go.mod h1:mG5amYoWBHf8vpLOuehzbGGw0EHxpZZ6lCpQ4fNJ8LE=\ngithub.com/Masterminds/semver/v3 v3.3.1 h1:QtNSWtVZ3nBfk8mAOu/B6v7FMJ+NHTIgUPi7rj+4nv4=\ngithub.com/Masterminds/semver/v3 v3.3.1/go.mod h1:4V+yj/TJE1HU9XfppCwVMZq3I84lprf4nC11bSS5beM=\ngithub.com/alecthomas/assert/v2 v2.11.0 h1:2Q9r3ki8+JYXvGsDyBXwH3LcJ+WK5D0gc5E8vS6K3D0=\ngithub.com/alecthomas/assert/v2 v2.11.0/go.mod h1:Bze95FyfUr7x34QZrjL+XP+0qgp/zg8yS+TtBj1WA3k=\ngithub.com/alecthomas/chroma/v2 v2.14.0 h1:R3+wzpnUArGcQz7fCETQBzO5n9IMNi13iIs46aU4V9E=\ngithub.com/alecthomas/chroma/v2 v2.14.0/go.mod h1:QolEbTfmUHIMVpBqxeDnNBj2uoeI4EbYP4i6n68SG4I=\ngithub.com/alecthomas/kong v1.6.1 h1:/7bVimARU3uxPD0hbryPE8qWrS3Oz3kPQoxA/H2NKG8=\ngithub.com/alecthomas/kong v1.6.1/go.mod h1:p2vqieVMeTAnaC83txKtXe8FLke2X07aruPWXyMPQrU=\ngithub.com/alecthomas/mango-kong v0.1.0 h1:iFVfP1k1K4qpml3JUQmD5I8MCQYfIvsD9mRdrw7jJC4=\ngithub.com/alecthomas/mango-kong v0.1.0/go.mod h1:t+TYVdsONUolf/BwVcm+15eqcdAj15h4Qe9MMFAwwT4=\ngithub.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=\ngithub.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=\ngithub.com/atotto/clipboard v0.1.4 h1:EH0zSVneZPSuFR11BlR9YppQTVDbh5+16AmcJi4g1z4=\ngithub.com/atotto/clipboard v0.1.4/go.mod h1:ZY9tmq7sm5xIbd9bOK4onWV4S6X0u6GY7Vn0Yu86PYI=\ngithub.com/aymanbagabas/go-osc52/v2 v2.0.1 h1:HwpRHbFMcZLEVr42D4p7XBqjyuxQH5SMiErDT4WkJ2k=\ngithub.com/aymanbagabas/go-osc52/v2 v2.0.1/go.mod h1:uYgXzlJ7ZpABp8OJ+exZzJJhRNQ2ASbcXHWsFqH8hp8=\ngithub.com/aymanbagabas/go-udiff v0.2.0 h1:TK0fH4MteXUDspT88n8CKzvK0X9O2xu9yQjWpi6yML8=\ngithub.com/aymanbagabas/go-udiff v0.2.0/go.mod h1:RE4Ex0qsGkTAJoQdQQCA0uG+nAzJO/pI/QwceO5fgrA=\ngithub.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=\ngithub.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=\ngithub.com/charmbracelet/bubbles v0.20.0 h1:jSZu6qD8cRQ6k9OMfR1WlM+ruM8fkPWkHvQWD9LIutE=\ngithub.com/charmbracelet/bubbles v0.20.0/go.mod h1:39slydyswPy+uVOHZ5x/GjwVAFkCsV8IIVy+4MhzwwU=\ngithub.com/charmbracelet/bubbletea v1.2.5-0.20241207142916-e0515bc22ad1 h1:osd3dk14DEriOrqJBWzeDE9eN2Yd00BkKzFAiLXxkS8=\ngithub.com/charmbracelet/bubbletea v1.2.5-0.20241207142916-e0515bc22ad1/go.mod h1:Hbk5+oE4a7cDyjfdPi4sHZ42aGTMYcmHnVDhsRswn7A=\ngithub.com/charmbracelet/glamour v0.8.0 h1:tPrjL3aRcQbn++7t18wOpgLyl8wrOHUEDS7IZ68QtZs=\ngithub.com/charmbracelet/glamour v0.8.0/go.mod h1:ViRgmKkf3u5S7uakt2czJ272WSg2ZenlYEZXT2x7Bjw=\ngithub.com/charmbracelet/lipgloss v1.0.0 h1:O7VkGDvqEdGi93X+DeqsQ7PKHDgtQfF8j8/O2qFMQNg=\ngithub.com/charmbracelet/lipgloss v1.0.0/go.mod h1:U5fy9Z+C38obMs+T+tJqst9VGzlOYGj4ri9reL3qUlo=\ngithub.com/charmbracelet/log v0.4.0 h1:G9bQAcx8rWA2T3pWvx7YtPTPwgqpk7D68BX21IRW8ZM=\ngithub.com/charmbracelet/log v0.4.0/go.mod h1:63bXt/djrizTec0l11H20t8FDSvA4CRZJ1KH22MdptM=\ngithub.com/charmbracelet/x/ansi v0.6.1-0.20250107110353-48b574af22a5 h1:TSjbA80sXnABV/Vxhnb67Ho7p8bEYqz6NIdhLAx+1yg=\ngithub.com/charmbracelet/x/ansi v0.6.1-0.20250107110353-48b574af22a5/go.mod h1:KBUFw1la39nl0dLl10l5ORDAqGXaeurTQmwyyVKse/Q=\ngithub.com/charmbracelet/x/editor v0.1.0 h1:p69/dpvlwRTs9uYiPeAWruwsHqTFzHhTvQOd/WVSX98=\ngithub.com/charmbracelet/x/editor v0.1.0/go.mod h1:oivrEbcP/AYt/Hpvk5pwDXXrQ933gQS6UzL6fxqAGSA=\ngithub.com/charmbracelet/x/exp/golden v0.0.0-20240815200342-61de596daa2b h1:MnAMdlwSltxJyULnrYbkZpp4k58Co7Tah3ciKhSNo0Q=\ngithub.com/charmbracelet/x/exp/golden v0.0.0-20240815200342-61de596daa2b/go.mod h1:wDlXFlCrmJ8J+swcL/MnGUuYnqgQdW9rhSD61oNMb6U=\ngithub.com/charmbracelet/x/term v0.2.1 h1:AQeHeLZ1OqSXhrAWpYUtZyX1T3zVxfpZuEQMIQaGIAQ=\ngithub.com/charmbracelet/x/term v0.2.1/go.mod h1:oQ4enTYFV7QN4m0i9mzHrViD7TQKvNEEkHUMCmsxdUg=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dlclark/regexp2 v1.11.0 h1:G/nrcoOa7ZXlpoa/91N3X7mM3r8eIlMBBJZvsz/mxKI=\ngithub.com/dlclark/regexp2 v1.11.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/erikgeiser/coninput v0.0.0-20211004153227-1c3628e74d0f h1:Y/CXytFA4m6baUTXGLOoWe4PQhGxaX0KpnayAqC48p4=\ngithub.com/erikgeiser/coninput v0.0.0-20211004153227-1c3628e74d0f/go.mod h1:vw97MGsxSvLiUE2X8qFplwetxpGLQrlU1Q9AUEIzCaM=\ngithub.com/go-logfmt/logfmt v0.6.0 h1:wGYYu3uicYdqXVgoYbvnkrPVXkuLM1p1ifugDMEdRi4=\ngithub.com/go-logfmt/logfmt v0.6.0/go.mod h1:WYhtIu8zTZfxdn5+rREduYbwxfcBr/Vr6KEVveWlfTs=\ngithub.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=\ngithub.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=\ngithub.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=\ngithub.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-localereader v0.0.1 h1:ygSAOl7ZXTx4RdPYinUpg6W99U8jWvWi9Ye2JC/oIi4=\ngithub.com/mattn/go-localereader v0.0.1/go.mod h1:8fBrzywKY7BI3czFoHkuzRoWE9C+EiG4R1k4Cjx5p88=\ngithub.com/mattn/go-runewidth v0.0.12/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=\ngithub.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=\ngithub.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/microcosm-cc/bluemonday v1.0.27 h1:MpEUotklkwCSLeH+Qdx1VJgNqLlpY2KXwXFM08ygZfk=\ngithub.com/microcosm-cc/bluemonday v1.0.27/go.mod h1:jFi9vgW+H7c3V0lb6nR74Ib/DIB5OBs92Dimizgw2cA=\ngithub.com/muesli/ansi v0.0.0-20230316100256-276c6243b2f6 h1:ZK8zHtRHOkbHy6Mmr5D264iyp3TiX5OmNcI5cIARiQI=\ngithub.com/muesli/ansi v0.0.0-20230316100256-276c6243b2f6/go.mod h1:CJlz5H+gyd6CUWT45Oy4q24RdLyn7Md9Vj2/ldJBSIo=\ngithub.com/muesli/cancelreader v0.2.2 h1:3I4Kt4BQjOR54NavqnDogx/MIoWBFa0StPA8ELUXHmA=\ngithub.com/muesli/cancelreader v0.2.2/go.mod h1:3XuTXfFS2VjM+HTLZY9Ak0l6eUKfijIfMUZ4EgX0QYo=\ngithub.com/muesli/mango v0.2.0 h1:iNNc0c5VLQ6fsMgAqGQofByNUBH2Q2nEbD6TaI+5yyQ=\ngithub.com/muesli/mango v0.2.0/go.mod h1:5XFpbC8jY5UUv89YQciiXNlbi+iJgt29VDC5xbzrLL4=\ngithub.com/muesli/reflow v0.3.0 h1:IFsN6K9NfGtjeggFP+68I4chLZV2yIKsXJFNZ+eWh6s=\ngithub.com/muesli/reflow v0.3.0/go.mod h1:pbwTDkVPibjO2kyvBQRBxTWEEGDGq0FlB1BIKtnHY/8=\ngithub.com/muesli/roff v0.1.0 h1:YD0lalCotmYuF5HhZliKWlIx7IEhiXeSfq7hNjFqGF8=\ngithub.com/muesli/roff v0.1.0/go.mod h1:pjAHQM9hdUUwm/krAfrLGgJkXJ+YuhtsfZ42kieB2Ig=\ngithub.com/muesli/termenv v0.15.3-0.20241211131612-0d230cb6eb15 h1:XGrI/sVwKFHXvDVSGfan37w1AFt14RLDqBqY0ThTgk0=\ngithub.com/muesli/termenv v0.15.3-0.20241211131612-0d230cb6eb15/go.mod h1:hxSnBBYLK21Vtq/PHd0S2FYCxBXzBua8ov5s1RobyRQ=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.1.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/sahilm/fuzzy v0.1.1 h1:ceu5RHF8DGgoi+/dR5PsECjCDH1BE3Fnmpo7aVXOdRA=\ngithub.com/sahilm/fuzzy v0.1.1/go.mod h1:VFvziUEIMCrT6A6tw2RFIXPXXmzXbOsSHF0DOI8ZK9Y=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/yuin/goldmark v1.7.1/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=\ngithub.com/yuin/goldmark v1.7.4 h1:BDXOHExt+A7gwPCJgPIIq7ENvceR7we7rOS9TNoLZeg=\ngithub.com/yuin/goldmark v1.7.4/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=\ngithub.com/yuin/goldmark-emoji v1.0.4 h1:vCwMkPZSNefSUnOW2ZKRUjBSD5Ok3W78IXhGxxAEF90=\ngithub.com/yuin/goldmark-emoji v1.0.4/go.mod h1:tTkZEbwu5wkPmgTcitqddVxY9osFZiavD+r4AzQrh1U=\ngolang.org/x/exp v0.0.0-20240613232115-7f521ea00fb8 h1:yixxcjnhBmY0nkL253HFVIm0JsFHwrHdT3Yh6szTnfY=\ngolang.org/x/exp v0.0.0-20240613232115-7f521ea00fb8/go.mod h1:jj3sYF3dwk5D+ghuXyeI3r5MFf+NT2An6/9dOA95KSI=\ngolang.org/x/net v0.27.0 h1:5K3Njcw06/l2y9vpGCSdcxWOYHOUk3dVNGDXN+FvAys=\ngolang.org/x/net v0.27.0/go.mod h1:dDi0PyhWNoiUOrAS8uXv/vnScO4wnHQO4mj9fn/RytE=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20210809222454-d867a43fc93e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.22.0 h1:BbsgPEJULsl2fV/AT3v15Mjva5yXKQDyKf+TbDz7QJk=\ngolang.org/x/term v0.22.0/go.mod h1:F3qCibpT5AMpCRfhfT53vVJwhLtIVHhB9XDjfFvnMI4=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "gum.go",
          "type": "blob",
          "size": 9.0166015625,
          "content": "package main\n\nimport (\n\t\"github.com/alecthomas/kong\"\n\n\t\"github.com/charmbracelet/gum/choose\"\n\t\"github.com/charmbracelet/gum/completion\"\n\t\"github.com/charmbracelet/gum/confirm\"\n\t\"github.com/charmbracelet/gum/file\"\n\t\"github.com/charmbracelet/gum/filter\"\n\t\"github.com/charmbracelet/gum/format\"\n\t\"github.com/charmbracelet/gum/input\"\n\t\"github.com/charmbracelet/gum/join\"\n\t\"github.com/charmbracelet/gum/log\"\n\t\"github.com/charmbracelet/gum/man\"\n\t\"github.com/charmbracelet/gum/pager\"\n\t\"github.com/charmbracelet/gum/spin\"\n\t\"github.com/charmbracelet/gum/style\"\n\t\"github.com/charmbracelet/gum/table\"\n\t\"github.com/charmbracelet/gum/version\"\n\t\"github.com/charmbracelet/gum/write\"\n)\n\n// Gum is the command-line interface for Gum.\ntype Gum struct {\n\t// Version is a flag that can be used to display the version number.\n\tVersion kong.VersionFlag `short:\"v\" help:\"Print the version number\"`\n\n\t// Completion generates Gum shell completion scripts.\n\tCompletion completion.Completion `cmd:\"\" hidden:\"\" help:\"Request shell completion\"`\n\n\t// Man is a hidden command that generates Gum man pages.\n\tMan man.Man `cmd:\"\" hidden:\"\" help:\"Generate man pages\"`\n\n\t// Choose provides an interface to choose one option from a given list of\n\t// options. The options can be provided as (new-line separated) stdin or a\n\t// list of arguments.\n\t//\n\t// It is different from the filter command as it does not provide a fuzzy\n\t// finding input, so it is best used for smaller lists of options.\n\t//\n\t// Let's pick from a list of gum flavors:\n\t//\n\t// $ gum choose \"Strawberry\" \"Banana\" \"Cherry\"\n\t//\n\tChoose choose.Options `cmd:\"\" help:\"Choose an option from a list of choices\"`\n\n\t// Confirm provides an interface to ask a user to confirm an action.\n\t// The user is provided with an interface to choose an affirmative or\n\t// negative answer, which is then reflected in the exit code for use in\n\t// scripting.\n\t//\n\t// If the user selects the affirmative answer, the program exits with 0.\n\t// If the user selects the negative answer, the program exits with 1.\n\t//\n\t// I.e. confirm if the user wants to delete a file\n\t//\n\t// $ gum confirm \"Are you sure?\" && rm file.txt\n\t//\n\tConfirm confirm.Options `cmd:\"\" help:\"Ask a user to confirm an action\"`\n\n\t// File provides an interface to pick a file from a folder (tree).\n\t// The user is provided a file manager-like interface to navigate, to\n\t// select a file.\n\t//\n\t// Let's pick a file from the current directory:\n\t//\n\t// $ gum file\n\t// $ gum file .\n\t//\n\t// Let's pick a file from the home directory:\n\t//\n\t// $ gum file $HOME\n\tFile file.Options `cmd:\"\" help:\"Pick a file from a folder\"`\n\n\t// Filter provides a fuzzy searching text input to allow filtering a list of\n\t// options to select one option.\n\t//\n\t// By default it will list all the files (recursively) in the current directory\n\t// for the user to choose one, but the script (or user) can provide different\n\t// new-line separated options to choose from.\n\t//\n\t// I.e. let's pick from a list of gum flavors:\n\t//\n\t// $ cat flavors.text | gum filter\n\t//\n\tFilter filter.Options `cmd:\"\" help:\"Filter items from a list\"`\n\n\t// Format allows you to render styled text from `markdown`, `code`,\n\t// `template` strings, or embedded `emoji` strings.\n\t// For more information see the format/README.md file.\n\tFormat format.Options `cmd:\"\" help:\"Format a string using a template\"`\n\n\t// Input provides a shell script interface for the text input bubble.\n\t// https://github.com/charmbracelet/bubbles/tree/master/textinput\n\t//\n\t// It can be used to prompt the user for some input. The text the user\n\t// entered will be sent to stdout.\n\t//\n\t// $ gum input --placeholder \"What's your favorite gum?\" > answer.text\n\t//\n\tInput input.Options `cmd:\"\" help:\"Prompt for some input\"`\n\n\t// Join provides a shell script interface for the lipgloss JoinHorizontal\n\t// and JoinVertical commands. It allows you to join multi-line text to\n\t// build different layouts.\n\t//\n\t// For example, you can place two bordered boxes next to each other:\n\t// Note: We wrap the variable in quotes to ensure the new lines are part of a\n\t// single argument. Otherwise, the command won't work as expected.\n\t//\n\t// $ gum join --horizontal \"$BUBBLE_BOX\" \"$GUM_BOX\"\n\t//\n\t//   ╔══════════════════════╗╔═════════════╗\n\t//   ║                      ║║             ║\n\t//   ║        Bubble        ║║     Gum     ║\n\t//   ║                      ║║             ║\n\t//   ╚══════════════════════╝╚═════════════╝\n\t//\n\tJoin join.Options `cmd:\"\" help:\"Join text vertically or horizontally\"`\n\n\t// Pager provides a shell script interface for the viewport bubble.\n\t// https://github.com/charmbracelet/bubbles/tree/master/viewport\n\t//\n\t// It allows the user to scroll through content like a pager.\n\t//\n\t// ╭────────────────────────────────────────────────╮\n\t// │    1 │ Gum Pager                               │\n\t// │    2 │ =========                               │\n\t// │    3 │                                         │\n\t// │    4 │ ```                                     │\n\t// │    5 │ gum pager --height 10 --width 25 < text │\n\t// │    6 │ ```                                     │\n\t// │    7 │                                         │\n\t// │    8 │                                         │\n\t// ╰────────────────────────────────────────────────╯\n\t//  ↓↑: navigate • q: quit\n\t//\n\tPager pager.Options `cmd:\"\" help:\"Scroll through a file\"`\n\n\t// Spin provides a shell script interface for the spinner bubble.\n\t// https://github.com/charmbracelet/bubbles/tree/master/spinner\n\t//\n\t// It is useful for displaying that some task is running in the background\n\t// while consuming it's output so that it is not shown to the user.\n\t//\n\t// For example, let's do a long running task: $ sleep 5\n\t//\n\t// We can simply prepend a spinner to this task to show it to the user,\n\t// while performing the task / command in the background.\n\t//\n\t// $ gum spin -t \"Taking a nap...\" -- sleep 5\n\t//\n\t// The spinner will automatically exit when the task is complete.\n\t//\n\tSpin spin.Options `cmd:\"\" help:\"Display spinner while running a command\"`\n\n\t// Style provides a shell script interface for Lip Gloss.\n\t// https://github.com/charmbracelet/lipgloss\n\t//\n\t// It allows you to use Lip Gloss to style text without needing to use Go.\n\t// All of the styling options are available as flags.\n\t//\n\t// Let's make some text glamorous using bash:\n\t//\n\t// $ gum style \\\n\t//  \t--foreground 212 --border double --align center \\\n\t//  \t--width 50 --margin 2 --padding \"2 4\" \\\n\t//  \t\"Bubble Gum (1¢)\" \"So sweet and so fresh\\!\"\n\t//\n\t//\n\t//    ╔══════════════════════════════════════════════════╗\n\t//    ║                                                  ║\n\t//    ║                                                  ║\n\t//    ║                 Bubble Gum (1¢)                  ║\n\t//    ║              So sweet and so fresh!              ║\n\t//    ║                                                  ║\n\t//    ║                                                  ║\n\t//    ╚══════════════════════════════════════════════════╝\n\t//\n\tStyle style.Options `cmd:\"\" help:\"Apply coloring, borders, spacing to text\"`\n\n\t// Table provides a shell script interface for the table bubble.\n\t// https://github.com/charmbracelet/bubbles/tree/master/table\n\t//\n\t// It is useful to render tabular (CSV) data in a terminal and allows\n\t// the user to select a row from the table.\n\t//\n\t// Let's render a table of gum flavors:\n\t//\n\t// $ gum table <<< \"Flavor,Price\\nStrawberry,$0.50\\nBanana,$0.99\\nCherry,$0.75\"\n\t//\n\t//  Flavor      Price\n\t//  Strawberry  $0.50\n\t//  Banana      $0.99\n\t//  Cherry      $0.75\n\t//\n\tTable table.Options `cmd:\"\" help:\"Render a table of data\"`\n\n\t// Write provides a shell script interface for the text area bubble.\n\t// https://github.com/charmbracelet/bubbles/tree/master/textarea\n\t//\n\t// It can be used to ask the user to write some long form of text\n\t// (multi-line) input. The text the user entered will be sent to stdout.\n\t//\n\t// $ gum write > output.text\n\t//\n\tWrite write.Options `cmd:\"\" help:\"Prompt for long-form text\"`\n\n\t// Log provides a shell script interface for logging using Log.\n\t// https://github.com/charmbracelet/log\n\t//\n\t// It can be used to log messages to output.\n\t//\n\t// $ gum log --level info \"Hello, world!\"\n\t//\n\tLog log.Options `cmd:\"\" help:\"Log messages to output\"`\n\n\t// VersionCheck provides a command that checks if the current gum version\n\t// matches a given semantic version constraint.\n\t//\n\t// It can be used to check that a minimum gum version is installed in a\n\t// script.\n\t//\n\t// $ gum version-check '~> 0.15'\n\t//\n\tVersionCheck version.Options `cmd:\"\" help:\"Semver check current gum version\"`\n}\n"
        },
        {
          "name": "input",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "join",
          "type": "tree",
          "content": null
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 2.2431640625,
          "content": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n\t\"runtime/debug\"\n\n\t\"github.com/alecthomas/kong\"\n\ttea \"github.com/charmbracelet/bubbletea\"\n\t\"github.com/charmbracelet/gum/internal/exit\"\n\t\"github.com/charmbracelet/lipgloss\"\n\t\"github.com/muesli/termenv\"\n)\n\nconst shaLen = 7\n\nvar (\n\t// Version contains the application version number. It's set via ldflags\n\t// when building.\n\tVersion = \"\"\n\n\t// CommitSHA contains the SHA of the commit that this application was built\n\t// against. It's set via ldflags when building.\n\tCommitSHA = \"\"\n)\n\nvar bubbleGumPink = lipgloss.NewStyle().Foreground(lipgloss.Color(\"212\"))\n\nfunc main() {\n\tlipgloss.SetColorProfile(termenv.NewOutput(os.Stderr).Profile)\n\n\tif Version == \"\" {\n\t\tif info, ok := debug.ReadBuildInfo(); ok && info.Main.Sum != \"\" {\n\t\t\tVersion = info.Main.Version\n\t\t} else {\n\t\t\tVersion = \"unknown (built from source)\"\n\t\t}\n\t}\n\tversion := fmt.Sprintf(\"gum version %s\", Version)\n\tif len(CommitSHA) >= shaLen {\n\t\tversion += \" (\" + CommitSHA[:shaLen] + \")\"\n\t}\n\n\tgum := &Gum{}\n\tctx := kong.Parse(\n\t\tgum,\n\t\tkong.Description(fmt.Sprintf(\"A tool for %s shell scripts.\", bubbleGumPink.Render(\"glamorous\"))),\n\t\tkong.UsageOnError(),\n\t\tkong.ConfigureHelp(kong.HelpOptions{\n\t\t\tCompact:             true,\n\t\t\tSummary:             false,\n\t\t\tNoExpandSubcommands: true,\n\t\t}),\n\t\tkong.Vars{\n\t\t\t\"version\":                 version,\n\t\t\t\"versionNumber\":           Version,\n\t\t\t\"defaultHeight\":           \"0\",\n\t\t\t\"defaultWidth\":            \"0\",\n\t\t\t\"defaultAlign\":            \"left\",\n\t\t\t\"defaultBorder\":           \"none\",\n\t\t\t\"defaultBorderForeground\": \"\",\n\t\t\t\"defaultBorderBackground\": \"\",\n\t\t\t\"defaultBackground\":       \"\",\n\t\t\t\"defaultForeground\":       \"\",\n\t\t\t\"defaultMargin\":           \"0 0\",\n\t\t\t\"defaultPadding\":          \"0 0\",\n\t\t\t\"defaultUnderline\":        \"false\",\n\t\t\t\"defaultBold\":             \"false\",\n\t\t\t\"defaultFaint\":            \"false\",\n\t\t\t\"defaultItalic\":           \"false\",\n\t\t\t\"defaultStrikethrough\":    \"false\",\n\t\t},\n\t)\n\tif err := ctx.Run(); err != nil {\n\t\tvar ex exit.ErrExit\n\t\tif errors.As(err, &ex) {\n\t\t\tos.Exit(int(ex))\n\t\t}\n\t\tif errors.Is(err, tea.ErrProgramKilled) {\n\t\t\tfmt.Fprintln(os.Stderr, \"timed out\")\n\t\t\tos.Exit(exit.StatusTimeout)\n\t\t}\n\t\tif errors.Is(err, tea.ErrInterrupted) {\n\t\t\tos.Exit(exit.StatusAborted)\n\t\t}\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "pager",
          "type": "tree",
          "content": null
        },
        {
          "name": "spin",
          "type": "tree",
          "content": null
        },
        {
          "name": "style",
          "type": "tree",
          "content": null
        },
        {
          "name": "table",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "tree",
          "content": null
        },
        {
          "name": "write",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}