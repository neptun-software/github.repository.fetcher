{
  "metadata": {
    "timestamp": 1736567966012,
    "page": 107,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "greyireland/algorithm-pattern",
      "stars": 15276,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.009765625,
          "content": ".DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2023 greyireland\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0341796875,
          "content": "# 算法模板\n\n![来刷题了](https://img.fuiboom.com/img/title.png)\n\n算法模板，最科学的刷题方式，最快速的刷题路径，一个月从入门到 offer，你值得拥有 🐶~\n\n算法模板顾名思义就是刷题的套路模板，掌握了刷题模板之后，刷题也变得好玩起来了~\n\n> 此项目是自己找工作时，从 0 开始刷 LeetCode 的心得记录，通过各种刷题文章、专栏、视频等总结了一套自己的刷题模板。\n>\n> 这个模板主要是介绍了一些通用的刷题模板，以及一些常见问题，如到底要刷多少题，按什么顺序来刷题，如何提高刷题效率等。\n\n## 在线文档\n\n在线文档 Gitbook：[算法模板 🔥](https://greyireland.gitbook.io/algorithm-pattern/)\n\n## 核心内容\n\n### 入门篇 🐶\n\n- [go 语言入门](./introduction/golang.md)\n- [算法快速入门](./introduction/quickstart.md)\n\n### 数据结构篇 🐰\n\n- [二叉树](./data_structure/binary_tree.md)\n- [链表](./data_structure/linked_list.md)\n- [栈和队列](./data_structure/stack_queue.md)\n- [二进制](./data_structure/binary_op.md)\n\n### 基础算法篇 🐮\n\n- [二分搜索](./basic_algorithm/binary_search.md)\n- [排序算法](./basic_algorithm/sort.md)\n- [动态规划](./basic_algorithm/dp.md)\n\n### 算法思维 🦁\n\n- [递归思维](./advanced_algorithm/recursion.md)\n- [滑动窗口思想](./advanced_algorithm/slide_window.md)\n- [二叉搜索树](./advanced_algorithm/binary_search_tree.md)\n- [回溯法](./advanced_algorithm/backtrack.md)\n\n## 心得体会\n\n文章大部分是对题目的思路介绍，和一些问题的解析，有了思路还是需要自己手动写写的，所以每篇文章最后都有对应的练习题\n\n刷完这些练习题，基本对数据结构和算法有自己的认识体会，基本大部分面试题都能写得出来，国内的 BAT、TMD 应该都不是问题\n\n从 4 月份找工作开始，从 0 开始刷 LeetCode，中间大概花了一个半月(6 周)左右时间刷完 240 题。\n\n![一个半月刷完240题](https://img.fuiboom.com/img/leetcode_time.png)\n\n![刷题记录](https://img.fuiboom.com/img/leetcode_record.png)\n\n开始刷题时，确实是无从下手，因为从序号开始刷，刷到几道题就遇到 hard 的题型，会卡住很久，后面去评论区看别人怎么刷题，也去 Google 搜索最好的刷题方式，发现按题型刷题会舒服很多，基本一个类型的题目，一天能做很多，慢慢刷题也不再枯燥，做起来也很有意思，最后也收到不错的 offer（最后去了宇宙系）。\n\n回到最开始的问题，面试到底要刷多少题，其实这个取决于你想进什么样公司，你定的目标如果是国内一线大厂，个人感觉大概 200 至 300 题基本就满足大部分面试需要了。第二个问题是按什么顺序刷及如何提高效率，这个也是本 repo 的目的，给你指定了一个刷题的顺序，以及刷题的模板，有了方向和技巧后，就去动手吧~ 希望刷完之后，你也能自己总结一套属于自己的刷题模板，有所收获，有所成长~\n\n## 推荐的刷题路径\n\n按此 repo 目录刷一遍，如果中间有题目卡住了先跳过，然后刷题一遍 LeetCode 探索基础卡片，最后快要面试时刷题一遍剑指 offer。\n\n为什么这么要这么刷，因为 repo 里面的题目是按类型归类，都是一些常见的高频题，很有代表性，大部分都是可以用模板加一点变形做出来，刷完后对大部分题目有基本的认识。然后刷一遍探索卡片，巩固一下一些基础知识点，总结这些知识点。最后剑指 offer 是大部分公司的出题源头，刷完面试中基本会遇到现题或者变形题，基本刷完这三部分，大部分国内公司的面试题应该就没什么问题了~\n\n1、 [algorithm-pattern 练习题](https://greyireland.gitbook.io/algorithm-pattern/)\n\n![练习题](https://img.fuiboom.com/img/repo_practice.png)\n\n2、 [LeetCode 卡片](https://leetcode-cn.com/explore/)\n\n![探索卡片](https://img.fuiboom.com/img/leetcode_explore.png)\n\n3、 [剑指 offer](https://leetcode-cn.com/problemset/lcof/)\n\n![剑指offer](https://img.fuiboom.com/img/leetcode_jzoffer.png)\n\n刷题时间可以合理分配，如果打算准备面试了，建议前面两部分 一个半月 （6 周）时间刷完，最后剑指 offer 半个月刷完，边刷可以边投简历进行面试，遇到不会的不用着急，往模板上套就对了，如果面试管给你提示，那就好好做，不要错过这大好机会~\n\n> 注意点：如果为了找工作刷题，遇到 hard 的题如果有思路就做，没思路先跳过，先把基础打好，再来刷 hard 可能效果会更好~\n\n## 面试资源\n\n分享一些计算机的经典书籍，大部分对面试应该都有帮助，强烈推荐 🌝\n\n[我看过的 100 本书](https://github.com/greyireland/awesome-programming-books-1)\n\n## 更新计划\n\n持续更新中，觉得还可以的话点个 **star** 收藏呀 ⭐️~\n\n【 Github 】[https://github.com/greyireland/algorithm-pattern](https://github.com/greyireland/algorithm-pattern) ⭐️\n\n## 完成打卡\n\n完成计划之后，可以提交 Pull requests，在下面添加自己的项目仓库，完成自己的算法模板打卡呀~\n\n| 完成 | 用户                                              | 项目地址                                                            |\n| ---- | ------------------------------------------------- | ------------------------------------------------------------------- |\n| ✅   | [easyui](https://github.com/easyui/) | [algorithm-pattern-swift(Swift 实现)](https://github.com/easyui/algorithm-pattern-swift),[在线文档 Gitbook](https://zyj.gitbook.io/algorithm-pattern-swift/) |\n| ✅   | [wardseptember](https://github.com/wardseptember) | [notes(Java 实现)](https://github.com/wardseptember/notes)          |\n| ✅   | [dashidhy](https://github.com/dashidhy) | [algorithm-pattern-python(Python 实现)](https://github.com/dashidhy/algorithm-pattern-python) |\n| ✅   | [binzi56](https://github.com/binzi56) | [algorithm-pattern-c(c++ 实现)](https://github.com/binzi56/algorithm-pattern-c) |\n| ✅   | [lvseouren](https://github.com/lvseouren) | [algorithm-study-record(c++ 实现)](https://github.com/lvseouren/algorithm-study-record) |\n| ✅   | [chienmy](https://github.com/chienmy) | [algorithm-pattern-java(Java 实现)](https://github.com/chienmy/algorithm-pattern-java), [在线文档 Gitbook](https://chienmy.gitbook.io/algorithm-pattern-java/) |\n| ✅ | [ligecarryme](https://github.com/ligecarryme) | [algorithm-pattern-JavaScript(JS+TS实现)](https://github.com/ligecarryme/algorithm-pattern-JavaScript) |\n| ✅ | [Esdeath](https://github.com/Esdeath) | [algorithm-pattern-dart(dart实现)](https://github.com/Esdeath/algorithm-pattern-dart),[在线文档 Gitbook](https://ayaseeri.gitbook.io/algorithm-pattern-dart/) |\n| ✅ | [longpi1](https://github.com/longpi1) | [algorithm-pattern-golang(golang实现)](https://github.com/longpi1/algorithm-pattern)\n| ✅ | [tpxxn](https://github.com/tpxxn) | [algorithm-pattern-CSharp(C# 实现)](https://github.com/tpxxn/algorithm-pattern-CSharp)"
        },
        {
          "name": "SUMMARY.md",
          "type": "blob",
          "size": 0.697265625,
          "content": "# 算法模板\n\n## 入门篇\n\n- [go 语言入门](introduction/golang.md)\n- [算法快速入门](introduction/quickstart.md)\n\n## 数据结构篇\n\n- [二叉树](data_structure/binary_tree.md)\n- [链表](data_structure/linked_list.md)\n- [栈和队列](data_structure/stack_queue.md)\n- [二进制](data_structure/binary_op.md)\n\n## 基础算法篇\n\n- [二分搜索](basic_algorithm/binary_search.md)\n- [排序算法](basic_algorithm/sort.md)\n- [动态规划](basic_algorithm/dp.md)\n\n## 算法思维\n\n- [递归思维](advanced_algorithm/recursion.md)\n- [滑动窗口思想](advanced_algorithm/slide_window.md)\n- [二叉搜索树](advanced_algorithm/binary_search_tree.md)\n- [回溯法](advanced_algorithm/backtrack.md)\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 0.123046875,
          "content": "# 计划\n\n## v1\n\n- [ ] 完善文档细节\n- [ ] 工程实现用到的算法解析\n- [ ] 周赛计划\n- [ ] 面试体系计划\n"
        },
        {
          "name": "advanced_algorithm",
          "type": "tree",
          "content": null
        },
        {
          "name": "basic_algorithm",
          "type": "tree",
          "content": null
        },
        {
          "name": "data_structure",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "introduction",
          "type": "tree",
          "content": null
        },
        {
          "name": "practice_algorithm",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}