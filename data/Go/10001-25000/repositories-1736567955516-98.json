{
  "metadata": {
    "timestamp": 1736567955516,
    "page": 98,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bcicen/ctop",
      "stars": 15706,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0244140625,
          "content": "ctop\n.idea\n/vendor/\n*.log"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2666015625,
          "content": "FROM quay.io/vektorcloud/go:1.18\n\nRUN apk add --no-cache make\n\nWORKDIR /app\nCOPY go.mod .\nRUN go mod download\n\nCOPY . .\nRUN make build && \\\n    mkdir -p /go/bin && \\\n    mv -v ctop /go/bin/\n\nFROM scratch\nENV TERM=linux\nCOPY --from=0 /go/bin/ctop /ctop\nENTRYPOINT [\"/ctop\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 VektorLab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.369140625,
          "content": "NAME=ctop\nVERSION=$(shell cat VERSION)\nBUILD=$(shell git rev-parse --short HEAD)\nLD_FLAGS=\"-w -X main.version=$(VERSION) -X main.build=$(BUILD)\"\n\nclean:\n\trm -rf _build/ release/\n\nbuild:\n\tgo mod download\n\tCGO_ENABLED=0 go build -tags release -ldflags $(LD_FLAGS) -o ctop\n\nbuild-all:\n\tmkdir -p _build\n\tGOOS=darwin  GOARCH=amd64   CGO_ENABLED=0 go build -tags release -ldflags $(LD_FLAGS) -o _build/ctop-$(VERSION)-darwin-amd64\n\tGOOS=linux   GOARCH=amd64   CGO_ENABLED=0 go build -tags release -ldflags $(LD_FLAGS) -o _build/ctop-$(VERSION)-linux-amd64\n\tGOOS=linux   GOARCH=arm     CGO_ENABLED=0 go build -tags release -ldflags $(LD_FLAGS) -o _build/ctop-$(VERSION)-linux-arm\n\tGOOS=linux   GOARCH=arm64   CGO_ENABLED=0 go build -tags release -ldflags $(LD_FLAGS) -o _build/ctop-$(VERSION)-linux-arm64\n\tGOOS=linux   GOARCH=ppc64le CGO_ENABLED=0 go build -tags release -ldflags $(LD_FLAGS) -o _build/ctop-$(VERSION)-linux-ppc64le\n\tGOOS=windows GOARCH=amd64   CGO_ENABLED=0 go build -tags release -ldflags $(LD_FLAGS) -o _build/ctop-$(VERSION)-windows-amd64\n\tcd _build; sha256sum * > sha256sums.txt\n\nrun-dev:\n\trm -f ctop.sock ctop\n\tgo build -ldflags $(LD_FLAGS) -o ctop\n\tCTOP_DEBUG=1 ./ctop\n\nimage:\n\tdocker build -t ctop -f Dockerfile .\n\nrelease:\n\tmkdir release\n\tcp _build/* release\n\tcd release; sha256sum --quiet --check sha256sums.txt && \\\n\tgh release create v$(VERSION) -d -t v$(VERSION) *\n\n.PHONY: build\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6298828125,
          "content": "<p align=\"center\"><img width=\"200px\" src=\"/_docs/img/logo.png\" alt=\"ctop\"/></p>\n\n#\n\n![release][release] ![homebrew][homebrew] ![macports][macports] ![scoop][scoop]\n\nTop-like interface for container metrics\n\n`ctop` provides a concise and condensed overview of real-time metrics for multiple containers:\n<p align=\"center\"><img src=\"_docs/img/grid.gif\" alt=\"ctop\"/></p>\n\nas well as a [single container view][single_view] for inspecting a specific container.\n\n`ctop` comes with built-in support for Docker and runC; connectors for other container and cluster systems are planned for future releases.\n\n## Install\n\nFetch the [latest release](https://github.com/bcicen/ctop/releases) for your platform:\n\n#### Debian/Ubuntu\n\nMaintained by a [third party](https://packages.azlux.fr/)\n```bash\nsudo apt-get install ca-certificates curl gnupg lsb-release\ncurl -fsSL https://azlux.fr/repo.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/azlux-archive-keyring.gpg\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/azlux-archive-keyring.gpg] http://packages.azlux.fr/debian \\\n  $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/azlux.list >/dev/null\nsudo apt-get update\nsudo apt-get install docker-ctop\n```\n\n#### Arch\n\n```bash\nsudo pacman -S ctop\n```\n\n_`ctop` is also available for Arch in the [AUR](https://aur.archlinux.org/packages/ctop-bin/)_\n\n\n#### Linux (Generic)\n\n```bash\nsudo wget https://github.com/bcicen/ctop/releases/download/v0.7.7/ctop-0.7.7-linux-amd64 -O /usr/local/bin/ctop\nsudo chmod +x /usr/local/bin/ctop\n```\n\n#### OS X\n\n```bash\nbrew install ctop\n```\nor\n```bash\nsudo port install ctop\n```\nor\n```bash\nsudo curl -Lo /usr/local/bin/ctop https://github.com/bcicen/ctop/releases/download/v0.7.7/ctop-0.7.7-darwin-amd64\nsudo chmod +x /usr/local/bin/ctop\n```\n\n#### Windows\n\n`ctop` is available in [scoop](https://scoop.sh/):\n\n```powershell\nscoop install ctop\n```\n\n#### Docker\n\n```bash\ndocker run --rm -ti \\\n  --name=ctop \\\n  --volume /var/run/docker.sock:/var/run/docker.sock:ro \\\n  quay.io/vektorlab/ctop:latest\n```\n\n## Building\n\nBuild steps can be found [here][build].\n\n## Usage\n\n`ctop` requires no arguments and uses Docker host variables by default. See [connectors][connectors] for further configuration options.\n\n### Config file\n\nWhile running, use `S` to save the current filters, sort field, and other options to a default config path (`~/.config/ctop/config` on XDG systems, else `~/.ctop`).\n\nConfig file values will be loaded and applied the next time `ctop` is started.\n\n### Options\n\nOption | Description\n--- | ---\n`-a`\t| show active containers only\n`-f <string>` | set an initial filter string\n`-h`\t| display help dialog\n`-i`  | invert default colors\n`-r`\t| reverse container sort order\n`-s`  | select initial container sort field\n`-v`\t| output version information and exit\n\n### Keybindings\n\n|           Key            | Action                                                     |\n| :----------------------: | ---------------------------------------------------------- |\n| <kbd>&lt;ENTER&gt;</kbd> | Open container menu                                        |\n|       <kbd>a</kbd>       | Toggle display of all (running and non-running) containers |\n|       <kbd>f</kbd>       | Filter displayed containers (`esc` to clear when open)     |\n|       <kbd>H</kbd>       | Toggle ctop header                                         |\n|       <kbd>h</kbd>       | Open help dialog                                           |\n|       <kbd>s</kbd>       | Select container sort field                                |\n|       <kbd>r</kbd>       | Reverse container sort order                               |\n|       <kbd>o</kbd>       | Open single view                                           |\n|       <kbd>l</kbd>       | View container logs (`t` to toggle timestamp when open)    |\n|       <kbd>e</kbd>       | Exec Shell                                                 |\n|       <kbd>c</kbd>       | Configure columns                                          |\n|       <kbd>S</kbd>       | Save current configuration to file                         |\n|       <kbd>q</kbd>       | Quit ctop                                                  |\n\n[build]: _docs/build.md\n[connectors]: _docs/connectors.md\n[single_view]: _docs/single.md\n[release]: https://img.shields.io/github/release/bcicen/ctop.svg \"ctop\"\n[homebrew]: https://img.shields.io/homebrew/v/ctop.svg \"ctop\"\n[macports]: https://repology.org/badge/version-for-repo/macports/ctop.svg?header=macports \"ctop\"\n[scoop]: https://img.shields.io/scoop/v/ctop?bucket=main \"ctop\"\n\n## Alternatives\n\nSee [Awesome Docker list](https://github.com/veggiemonk/awesome-docker/blob/master/README.md#terminal) for similar tools to work with Docker. \n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "0.7.7\n"
        },
        {
          "name": "_docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "colors.go",
          "type": "blob",
          "size": 1.5107421875,
          "content": "package main\n\nimport (\n\t\"regexp\"\n\n\tui \"github.com/gizak/termui\"\n)\n\n/*\nValid colors:\n\tui.ColorDefault\n\tui.ColorBlack\n\tui.ColorRed\n\tui.ColorGreen\n\tui.ColorYellow\n\tui.ColorBlue\n\tui.ColorMagenta\n\tui.ColorCyan\n\tui.ColorWhite\n*/\n\nvar ColorMap = map[string]ui.Attribute{\n\t\"fg\":                 ui.ColorWhite,\n\t\"bg\":                 ui.ColorDefault,\n\t\"block.bg\":           ui.ColorDefault,\n\t\"border.bg\":          ui.ColorDefault,\n\t\"border.fg\":          ui.ColorWhite,\n\t\"label.bg\":           ui.ColorDefault,\n\t\"label.fg\":           ui.ColorGreen,\n\t\"menu.text.fg\":       ui.ColorWhite,\n\t\"menu.text.bg\":       ui.ColorDefault,\n\t\"menu.border.fg\":     ui.ColorCyan,\n\t\"menu.label.fg\":      ui.ColorGreen,\n\t\"header.fg\":          ui.ColorBlack,\n\t\"header.bg\":          ui.ColorWhite,\n\t\"gauge.bar.bg\":       ui.ColorGreen,\n\t\"gauge.percent.fg\":   ui.ColorWhite,\n\t\"linechart.axes.fg\":  ui.ColorDefault,\n\t\"linechart.line.fg\":  ui.ColorGreen,\n\t\"mbarchart.bar.bg\":   ui.ColorGreen,\n\t\"mbarchart.num.fg\":   ui.ColorWhite,\n\t\"mbarchart.text.fg\":  ui.ColorWhite,\n\t\"par.text.fg\":        ui.ColorWhite,\n\t\"par.text.bg\":        ui.ColorDefault,\n\t\"par.text.hi\":        ui.ColorBlack,\n\t\"sparkline.line.fg\":  ui.ColorGreen,\n\t\"sparkline.title.fg\": ui.ColorWhite,\n\t\"status.ok\":          ui.ColorGreen,\n\t\"status.warn\":        ui.ColorYellow,\n\t\"status.danger\":      ui.ColorRed,\n}\n\nfunc InvertColorMap() {\n\tre := regexp.MustCompile(\".*.fg\")\n\tfor k := range ColorMap {\n\t\tif re.FindAllString(k, 1) != nil {\n\t\t\tColorMap[k] = ui.ColorBlack\n\t\t}\n\t}\n\tColorMap[\"par.text.hi\"] = ui.ColorWhite\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "connector",
          "type": "tree",
          "content": null
        },
        {
          "name": "container",
          "type": "tree",
          "content": null
        },
        {
          "name": "cursor.go",
          "type": "blob",
          "size": 3.7001953125,
          "content": "package main\n\nimport (\n\t\"math\"\n\n\t\"github.com/bcicen/ctop/connector\"\n\t\"github.com/bcicen/ctop/container\"\n\tui \"github.com/gizak/termui\"\n)\n\ntype GridCursor struct {\n\tselectedID  string // id of currently selected container\n\tfiltered    container.Containers\n\tcSuper      *connector.ConnectorSuper\n\tisScrolling bool // toggled when actively scrolling\n}\n\nfunc (gc *GridCursor) Len() int { return len(gc.filtered) }\n\nfunc (gc *GridCursor) Selected() *container.Container {\n\tidx := gc.Idx()\n\tif idx < gc.Len() {\n\t\treturn gc.filtered[idx]\n\t}\n\treturn nil\n}\n\n// Refresh containers from source, returning whether the quantity of\n// containers has changed and any error\nfunc (gc *GridCursor) RefreshContainers() (bool, error) {\n\toldLen := gc.Len()\n\tgc.filtered = container.Containers{}\n\n\tcSource, err := gc.cSuper.Get()\n\tif err != nil {\n\t\treturn true, err\n\t}\n\n\t// filter Containers by display bool\n\tvar cursorVisible bool\n\tfor _, c := range cSource.All() {\n\t\tif c.Display {\n\t\t\tif c.Id == gc.selectedID {\n\t\t\t\tcursorVisible = true\n\t\t\t}\n\t\t\tgc.filtered = append(gc.filtered, c)\n\t\t}\n\t}\n\n\tif !cursorVisible || gc.selectedID == \"\" {\n\t\tgc.Reset()\n\t}\n\n\treturn oldLen != gc.Len(), nil\n}\n\n// Set an initial cursor position, if possible\nfunc (gc *GridCursor) Reset() {\n\tcSource, err := gc.cSuper.Get()\n\tif err != nil {\n\t\treturn\n\t}\n\n\tfor _, c := range cSource.All() {\n\t\tc.Widgets.UnHighlight()\n\t}\n\tif gc.Len() > 0 {\n\t\tgc.selectedID = gc.filtered[0].Id\n\t\tgc.filtered[0].Widgets.Highlight()\n\t}\n}\n\n// Idx returns current cursor index\nfunc (gc *GridCursor) Idx() int {\n\tfor n, c := range gc.filtered {\n\t\tif c.Id == gc.selectedID {\n\t\t\treturn n\n\t\t}\n\t}\n\tgc.Reset()\n\treturn 0\n}\n\nfunc (gc *GridCursor) ScrollPage() {\n\t// skip scroll if no need to page\n\tif gc.Len() < cGrid.MaxRows() {\n\t\tcGrid.Offset = 0\n\t\treturn\n\t}\n\n\tidx := gc.Idx()\n\n\t// page down\n\tif idx >= cGrid.Offset+cGrid.MaxRows() {\n\t\tcGrid.Offset++\n\t\tcGrid.Align()\n\t}\n\t// page up\n\tif idx < cGrid.Offset {\n\t\tcGrid.Offset--\n\t\tcGrid.Align()\n\t}\n\n}\n\nfunc (gc *GridCursor) Up() {\n\tgc.isScrolling = true\n\tdefer func() { gc.isScrolling = false }()\n\n\tidx := gc.Idx()\n\tif idx <= 0 { // already at top\n\t\treturn\n\t}\n\tactive := gc.filtered[idx]\n\tnext := gc.filtered[idx-1]\n\n\tactive.Widgets.UnHighlight()\n\tgc.selectedID = next.Id\n\tnext.Widgets.Highlight()\n\n\tgc.ScrollPage()\n\tui.Render(cGrid)\n}\n\nfunc (gc *GridCursor) Down() {\n\tgc.isScrolling = true\n\tdefer func() { gc.isScrolling = false }()\n\n\tidx := gc.Idx()\n\tif idx >= gc.Len()-1 { // already at bottom\n\t\treturn\n\t}\n\tactive := gc.filtered[idx]\n\tnext := gc.filtered[idx+1]\n\n\tactive.Widgets.UnHighlight()\n\tgc.selectedID = next.Id\n\tnext.Widgets.Highlight()\n\n\tgc.ScrollPage()\n\tui.Render(cGrid)\n}\n\nfunc (gc *GridCursor) PgUp() {\n\tidx := gc.Idx()\n\tif idx <= 0 { // already at top\n\t\treturn\n\t}\n\n\tnextidx := int(math.Max(0.0, float64(idx-cGrid.MaxRows())))\n\tif gc.pgCount() > 0 {\n\t\tcGrid.Offset = int(math.Max(float64(cGrid.Offset-cGrid.MaxRows()),\n\t\t\tfloat64(0)))\n\t}\n\n\tactive := gc.filtered[idx]\n\tnext := gc.filtered[nextidx]\n\n\tactive.Widgets.UnHighlight()\n\tgc.selectedID = next.Id\n\tnext.Widgets.Highlight()\n\n\tcGrid.Align()\n\tui.Render(cGrid)\n}\n\nfunc (gc *GridCursor) PgDown() {\n\tidx := gc.Idx()\n\tif idx >= gc.Len()-1 { // already at bottom\n\t\treturn\n\t}\n\n\tnextidx := int(math.Min(float64(gc.Len()-1), float64(idx+cGrid.MaxRows())))\n\tif gc.pgCount() > 0 {\n\t\tcGrid.Offset = int(math.Min(float64(cGrid.Offset+cGrid.MaxRows()),\n\t\t\tfloat64(gc.Len()-cGrid.MaxRows())))\n\t}\n\n\tactive := gc.filtered[idx]\n\tnext := gc.filtered[nextidx]\n\n\tactive.Widgets.UnHighlight()\n\tgc.selectedID = next.Id\n\tnext.Widgets.Highlight()\n\n\tcGrid.Align()\n\tui.Render(cGrid)\n}\n\n// number of pages at current row count and term height\nfunc (gc *GridCursor) pgCount() int {\n\tpages := gc.Len() / cGrid.MaxRows()\n\tif gc.Len()%cGrid.MaxRows() > 0 {\n\t\tpages++\n\t}\n\treturn pages\n}\n"
        },
        {
          "name": "cwidgets",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug.go",
          "type": "blob",
          "size": 1.625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"runtime\"\n\n\t\"github.com/bcicen/ctop/container\"\n\tui \"github.com/gizak/termui\"\n)\n\nvar mstats = &runtime.MemStats{}\n\nfunc logEvent(e ui.Event) {\n\t// skip timer events e.g. /timer/1s\n\tif e.From == \"timer\" {\n\t\treturn\n\t}\n\tvar s string\n\ts += fmt.Sprintf(\"Type=%s\", quote(e.Type))\n\ts += fmt.Sprintf(\" Path=%s\", quote(e.Path))\n\ts += fmt.Sprintf(\" From=%s\", quote(e.From))\n\tif e.To != \"\" {\n\t\ts += fmt.Sprintf(\" To=%s\", quote(e.To))\n\t}\n\tlog.Debugf(\"new event: %s\", s)\n}\n\nfunc runtimeStats() {\n\tvar msg string\n\tmsg += fmt.Sprintf(\"cgo calls=%v\", runtime.NumCgoCall())\n\tmsg += fmt.Sprintf(\" routines=%v\", runtime.NumGoroutine())\n\truntime.ReadMemStats(mstats)\n\tmsg += fmt.Sprintf(\" numgc=%v\", mstats.NumGC)\n\tmsg += fmt.Sprintf(\" alloc=%v\", mstats.Alloc)\n\tlog.Debugf(\"runtime: %v\", msg)\n}\n\nfunc runtimeStack() {\n\tbuf := make([]byte, 32768)\n\tbuf = buf[:runtime.Stack(buf, true)]\n\tlog.Infof(fmt.Sprintf(\"stack:\\n%v\", string(buf)))\n}\n\n// log container, metrics, and widget state\nfunc dumpContainer(c *container.Container) {\n\tmsg := fmt.Sprintf(\"logging state for container: %s\\n\", c.Id)\n\tfor k, v := range c.Meta {\n\t\tmsg += fmt.Sprintf(\"Meta.%s = %s\\n\", k, v)\n\t}\n\tmsg += inspect(&c.Metrics)\n\tlog.Infof(msg)\n}\n\nfunc inspect(i interface{}) (s string) {\n\tval := reflect.ValueOf(i)\n\telem := val.Type().Elem()\n\n\teName := elem.String()\n\tfor i := 0; i < elem.NumField(); i++ {\n\t\tfield := elem.Field(i)\n\t\tfieldVal := reflect.Indirect(val).FieldByName(field.Name)\n\t\ts += fmt.Sprintf(\"%s.%s = \", eName, field.Name)\n\t\ts += fmt.Sprintf(\"%v (%s)\\n\", fieldVal, field.Type)\n\t}\n\treturn s\n}\n\nfunc quote(s string) string {\n\treturn fmt.Sprintf(\"\\\"%s\\\"\", s)\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 3.1376953125,
          "content": "module github.com/bcicen/ctop\n\nrequire (\n\tgithub.com/BurntSushi/toml v0.3.1\n\tgithub.com/c9s/goprocinfo v0.0.0-20170609001544-b34328d6e0cd\n\tgithub.com/fsouza/go-dockerclient v1.7.0\n\tgithub.com/gizak/termui v2.3.1-0.20180817033724-8d4faad06196+incompatible\n\tgithub.com/hako/durafmt v0.0.0-20210608085754-5c1018a4e16b // indirect\n\tgithub.com/jgautheron/codename-generator v0.0.0-20150829203204-16d037c7cc3c\n\tgithub.com/mattn/go-runewidth v0.0.2\n\tgithub.com/nsf/termbox-go v0.0.0-20190121233118-02980233997d\n\tgithub.com/nu7hatch/gouuid v0.0.0-20131221200532-179d4d0c4d8d\n\tgithub.com/op/go-logging v0.0.0-20160211212156-b2cb9fa56473\n\tgithub.com/opencontainers/runc v1.1.0\n\tgithub.com/pkg/browser v0.0.0-20201207095918-0426ae3fba23\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/stretchr/testify v1.4.0\n)\n\nrequire (\n\tgithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78 // indirect\n\tgithub.com/Microsoft/go-winio v0.4.16 // indirect\n\tgithub.com/Microsoft/hcsshim v0.8.10 // indirect\n\tgithub.com/checkpoint-restore/go-criu/v5 v5.3.0 // indirect\n\tgithub.com/cilium/ebpf v0.7.0 // indirect\n\tgithub.com/containerd/cgroups v0.0.0-20200531161412-0dbf7f05ba59 // indirect\n\tgithub.com/containerd/console v1.0.3 // indirect\n\tgithub.com/containerd/containerd v1.4.1 // indirect\n\tgithub.com/containerd/continuity v0.0.0-20200928162600-f2cc35102c2a // indirect\n\tgithub.com/coreos/go-systemd/v22 v22.3.2 // indirect\n\tgithub.com/cyphar/filepath-securejoin v0.2.3 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/docker/docker v20.10.0-beta1.0.20201113105859-b6bfff2a628f+incompatible // indirect\n\tgithub.com/docker/go-connections v0.4.0 // indirect\n\tgithub.com/docker/go-units v0.4.0 // indirect\n\tgithub.com/godbus/dbus/v5 v5.0.6 // indirect\n\tgithub.com/gogo/protobuf v1.3.1 // indirect\n\tgithub.com/hashicorp/golang-lru v0.5.1 // indirect\n\tgithub.com/maruel/panicparse v1.6.1 // indirect\n\tgithub.com/mitchellh/go-wordwrap v0.0.0-20150314170334-ad45545899c7 // indirect\n\tgithub.com/moby/sys/mount v0.2.0 // indirect\n\tgithub.com/moby/sys/mountinfo v0.5.0 // indirect\n\tgithub.com/moby/term v0.0.0-20201110203204-bea5bbe245bf // indirect\n\tgithub.com/morikuni/aec v1.0.0 // indirect\n\tgithub.com/mrunalp/fileutils v0.5.0 // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.0.1 // indirect\n\tgithub.com/opencontainers/runtime-spec v1.0.3-0.20210326190908-1c3f411f0417 // indirect\n\tgithub.com/opencontainers/selinux v1.10.0 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/seccomp/libseccomp-golang v0.9.2-0.20210429002308-3879420cc921 // indirect\n\tgithub.com/sirupsen/logrus v1.8.1 // indirect\n\tgithub.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635 // indirect\n\tgithub.com/vishvananda/netlink v1.1.0 // indirect\n\tgithub.com/vishvananda/netns v0.0.0-20191106174202-0a2b9b5464df // indirect\n\tgo.opencensus.io v0.22.0 // indirect\n\tgolang.org/x/net v0.0.0-20201224014010-6772e930b67b // indirect\n\tgolang.org/x/sync v0.0.0-20190423024810-112230192c58 // indirect\n\tgolang.org/x/sys v0.0.0-20211116061358-0a5406a5449c // indirect\n\tgoogle.golang.org/protobuf v1.27.1 // indirect\n\tgopkg.in/yaml.v2 v2.2.8 // indirect\n)\n\ngo 1.18\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 24.74609375,
          "content": "bazil.org/fuse v0.0.0-20160811212531-371fbbdaa898/go.mod h1:Xbm+BRKSBEpa4q4hTSxohYNQpsxXPbPry4JJWOB3LB8=\ncloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78 h1:w+iIsaOQNcT7OZ575w+acHgRric5iCyQh+xv+KJ4HB8=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=\ngithub.com/BurntSushi/toml v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/Microsoft/go-winio v0.4.15-0.20200908182639-5b44b70ab3ab/go.mod h1:tTuCMEN+UleMWgg9dVx4Hu52b1bJo+59jBh3ajtinzw=\ngithub.com/Microsoft/go-winio v0.4.16 h1:FtSW/jqD+l4ba5iPBj9CODVtgfYAD8w2wS923g/cFDk=\ngithub.com/Microsoft/go-winio v0.4.16/go.mod h1:XB6nPKklQyQ7GC9LdcBEcBl8PF76WugXOPRXwdLnMv0=\ngithub.com/Microsoft/hcsshim v0.8.10 h1:k5wTrpnVU2/xv8ZuzGkbXVd3js5zJ8RnumPo5RxiIxU=\ngithub.com/Microsoft/hcsshim v0.8.10/go.mod h1:g5uw8EV2mAlzqe94tfNBNdr89fnbD/n3HV0OhsddkmM=\ngithub.com/c9s/goprocinfo v0.0.0-20170609001544-b34328d6e0cd h1:xqaBnULC8wEnQpRDXAsDgXkU/STqoluz1REOoegSfNU=\ngithub.com/c9s/goprocinfo v0.0.0-20170609001544-b34328d6e0cd/go.mod h1:uEyr4WpAH4hio6LFriaPkL938XnrvLpNPmQHBdrmbIE=\ngithub.com/checkpoint-restore/go-criu/v5 v5.3.0 h1:wpFFOoomK3389ue2lAb0Boag6XPht5QYpipxmSNL4d8=\ngithub.com/checkpoint-restore/go-criu/v5 v5.3.0/go.mod h1:E/eQpaFtUKGOOSEBZgmKAcn+zUUwWxqcaKZlF54wK8E=\ngithub.com/cilium/ebpf v0.0.0-20200110133405-4032b1d8aae3/go.mod h1:MA5e5Lr8slmEg9bt0VpxxWqJlO4iwu3FBdHUzV7wQVg=\ngithub.com/cilium/ebpf v0.7.0 h1:1k/q3ATgxSXRdrmPfH8d7YK0GfqVsEKZAX9dQZvs56k=\ngithub.com/cilium/ebpf v0.7.0/go.mod h1:/oI2+1shJiTGAMgl6/RgJr36Eo1jzrRcAWbcXO2usCA=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/containerd/cgroups v0.0.0-20200531161412-0dbf7f05ba59 h1:qWj4qVYZ95vLWwqyNJCQg7rDsG5wPdze0UaPolH7DUk=\ngithub.com/containerd/cgroups v0.0.0-20200531161412-0dbf7f05ba59/go.mod h1:pA0z1pT8KYB3TCXK/ocprsh7MAkoW8bZVzPdih9snmM=\ngithub.com/containerd/console v0.0.0-20180822173158-c12b1e7919c1/go.mod h1:Tj/on1eG8kiEhd0+fhSDzsPAFESxzBBvdyEgyryXffw=\ngithub.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=\ngithub.com/containerd/console v1.0.3/go.mod h1:7LqA/THxQ86k76b8c/EMSiaJ3h1eZkMkXar0TQ1gf3U=\ngithub.com/containerd/containerd v1.3.2/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=\ngithub.com/containerd/containerd v1.4.1 h1:pASeJT3R3YyVn+94qEPk0SnU1OQ20Jd/T+SPKy9xehY=\ngithub.com/containerd/containerd v1.4.1/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=\ngithub.com/containerd/continuity v0.0.0-20190426062206-aaeac12a7ffc/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=\ngithub.com/containerd/continuity v0.0.0-20200928162600-f2cc35102c2a h1:jEIoR0aA5GogXZ8pP3DUzE+zrhaF6/1rYZy+7KkYEWM=\ngithub.com/containerd/continuity v0.0.0-20200928162600-f2cc35102c2a/go.mod h1:W0qIOTD7mp2He++YVq+kgfXezRYqzP1uDuMVH1bITDY=\ngithub.com/containerd/fifo v0.0.0-20190226154929-a9fb20d87448/go.mod h1:ODA38xgv3Kuk8dQz2ZQXpnv/UZZUHUCL7pnLehbXgQI=\ngithub.com/containerd/go-runc v0.0.0-20180907222934-5a6d9f37cfa3/go.mod h1:IV7qH3hrUgRmyYrtgEeGWJfWbgcHL9CSRruz2Vqcph0=\ngithub.com/containerd/ttrpc v0.0.0-20190828154514-0e0f228740de/go.mod h1:PvCDdDGpgqzQIzDW1TphrGLssLDZp2GuS+X5DkEJB8o=\ngithub.com/containerd/typeurl v0.0.0-20180627222232-a93fcdb778cd/go.mod h1:Cm3kwCdlkCfMSHURc+r6fwoGH6/F1hH3S4sg0rLFWPc=\ngithub.com/coreos/go-systemd/v22 v22.0.0/go.mod h1:xO0FLkIi5MaZafQlIrOotqXZ90ih+1atmu1JpKERPPk=\ngithub.com/coreos/go-systemd/v22 v22.3.2 h1:D9/bQk5vlXQFZ6Kwuu6zaiXJ9oTPe68++AzAJc1DzSI=\ngithub.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/creack/pty v1.1.11 h1:07n33Z8lZxZ2qwegKbObQohDhXDQxiMMz1NOUGYlesw=\ngithub.com/creack/pty v1.1.11/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/cyphar/filepath-securejoin v0.2.3 h1:YX6ebbZCZP7VkM3scTTokDgBL2TY741X51MTk3ycuNI=\ngithub.com/cyphar/filepath-securejoin v0.2.3/go.mod h1:aPGpWjXOXUn2NCNjFvBE6aRxGGx79pTxQpKOJNYHHl4=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/docker/docker v20.10.0-beta1.0.20201113105859-b6bfff2a628f+incompatible h1:lwpV3629md5omgAKjxPWX17shI7vMRpE3nyb9WHn8pA=\ngithub.com/docker/docker v20.10.0-beta1.0.20201113105859-b6bfff2a628f+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=\ngithub.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-units v0.4.0 h1:3uh0PgVws3nIA0Q+MwDC8yjEPf9zjRfZZWXZYDct3Tw=\ngithub.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/frankban/quicktest v1.11.3 h1:8sXhOn0uLys67V8EsXLc6eszDs8VXWxL3iRvebPhedY=\ngithub.com/frankban/quicktest v1.11.3/go.mod h1:wRf/ReqHper53s+kmmSZizM8NamnL3IM0I9ntUbOk+k=\ngithub.com/fsouza/go-dockerclient v1.7.0 h1:Ie1/8pAnBHNyCbSIDnYKBdXUEobk4AeJhWZz7k6rWfc=\ngithub.com/fsouza/go-dockerclient v1.7.0/go.mod h1:Ny0LfP7OOsYu9nAi4339E4Ifor6nGBFO2M8lnd2nR+c=\ngithub.com/gizak/termui v2.3.1-0.20180817033724-8d4faad06196+incompatible h1:pUbrySwhNIu18YXjMTCt/Z3kr8eYQ8hRDs4BeR/crmA=\ngithub.com/gizak/termui v2.3.1-0.20180817033724-8d4faad06196+incompatible/go.mod h1:PkJoWUt/zacQKysNfQtcw1RW+eK2SxkieVBtl+4ovLA=\ngithub.com/godbus/dbus/v5 v5.0.3/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/godbus/dbus/v5 v5.0.6 h1:mkgN1ofwASrYnJ5W6U/BxG15eXXXjirgZc7CLqkcaro=\ngithub.com/godbus/dbus/v5 v5.0.6/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gogo/protobuf v1.3.1 h1:DqDEcV5aeaTmdFBePNpYsp3FlcVH/2ISVVM9Qf8PSls=\ngithub.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.5.0 h1:LUVKkCeviFUMKqHa4tXIIij/lbhnMbP7Fn5wKdKkRh4=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/hako/durafmt v0.0.0-20210608085754-5c1018a4e16b h1:wDUNC2eKiL35DbLvsDhiblTUXHxcOPwQSCzi7xpQUN4=\ngithub.com/hako/durafmt v0.0.0-20210608085754-5c1018a4e16b/go.mod h1:VzxiSdG6j1pi7rwGm/xYI5RbtpBgM8sARDXlvEvxlu0=\ngithub.com/hashicorp/golang-lru v0.5.1 h1:0hERBMJE1eitiLkihrMvRVBYAkpHzc/J3QdDN+dAcgU=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\ngithub.com/jgautheron/codename-generator v0.0.0-20150829203204-16d037c7cc3c h1:/hc+TxW4Q1v6aqNPHE5jiaNF2xEK0CzWTgo25RQhQ+U=\ngithub.com/jgautheron/codename-generator v0.0.0-20150829203204-16d037c7cc3c/go.mod h1:FJRkXmPrkHw0WDjB/LXMUhjWJ112Y6JUYnIVBOy8oH8=\ngithub.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.1 h1:Fmg33tUaq4/8ym9TJN1x7sLJnHVwhP33CNkpYV/7rwI=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/maruel/panicparse v1.6.1 h1:803MjBzGcUgE1vYgg3UMNq3G1oyYeKkMu3t6hBS97x0=\ngithub.com/maruel/panicparse v1.6.1/go.mod h1:uoxI4w9gJL6XahaYPMq/z9uadrdr1SyHuQwV2q80Mm0=\ngithub.com/maruel/panicparse/v2 v2.1.1/go.mod h1:AeTWdCE4lcq8OKsLb6cHSj1RWHVSnV9HBCk7sKLF4Jg=\ngithub.com/mattn/go-colorable v0.1.7/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-runewidth v0.0.2 h1:UnlwIPBGaTZfPQ6T1IGzPI0EkYAQmT9fAEJ/poFC63o=\ngithub.com/mattn/go-runewidth v0.0.2/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d/go.mod h1:01TrycV0kFyexm33Z7vhZRXopbI8J3TDReVlkTgMUxE=\ngithub.com/mitchellh/go-wordwrap v0.0.0-20150314170334-ad45545899c7 h1:DpOJ2HYzCv8LZP15IdmG+YdwD2luVPHITV96TkirNBM=\ngithub.com/mitchellh/go-wordwrap v0.0.0-20150314170334-ad45545899c7/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\ngithub.com/moby/sys/mount v0.2.0 h1:WhCW5B355jtxndN5ovugJlMFJawbUODuW8fSnEH6SSM=\ngithub.com/moby/sys/mount v0.2.0/go.mod h1:aAivFE2LB3W4bACsUXChRHQ0qKWsetY4Y9V7sxOougM=\ngithub.com/moby/sys/mountinfo v0.4.0/go.mod h1:rEr8tzG/lsIZHBtN/JjGG+LMYx9eXgW2JI+6q0qou+A=\ngithub.com/moby/sys/mountinfo v0.5.0 h1:2Ks8/r6lopsxWi9m58nlwjaeSzUX9iiL1vj5qB/9ObI=\ngithub.com/moby/sys/mountinfo v0.5.0/go.mod h1:3bMD3Rg+zkqx8MRYPi7Pyb0Ie97QEBmdxbhnCLlSvSU=\ngithub.com/moby/term v0.0.0-20201110203204-bea5bbe245bf h1:Un6PNx5oMK6CCwO3QTUyPiK2mtZnPrpDl5UnZ64eCkw=\ngithub.com/moby/term v0.0.0-20201110203204-bea5bbe245bf/go.mod h1:FBS0z0QWA44HXygs7VXDUOGoN/1TV3RuWkLO04am3wc=\ngithub.com/morikuni/aec v1.0.0 h1:nP9CBfwrvYnBRgY6qfDQkygYDmYwOilePFkwzv4dU8A=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/mrunalp/fileutils v0.5.0 h1:NKzVxiH7eSk+OQ4M+ZYW1K6h27RUV3MI6NUTsHhU6Z4=\ngithub.com/mrunalp/fileutils v0.5.0/go.mod h1:M1WthSahJixYnrXQl/DFQuteStB1weuxD2QJNHXfbSQ=\ngithub.com/nsf/termbox-go v0.0.0-20190121233118-02980233997d h1:x3S6kxmy49zXVVyhcnrFqxvNVCBPb2KZ9hV2RBdS840=\ngithub.com/nsf/termbox-go v0.0.0-20190121233118-02980233997d/go.mod h1:IuKpRQcYE1Tfu+oAQqaLisqDeXgjyyltCfsaoYN18NQ=\ngithub.com/nu7hatch/gouuid v0.0.0-20131221200532-179d4d0c4d8d h1:VhgPp6v9qf9Agr/56bj7Y/xa04UccTW04VP0Qed4vnQ=\ngithub.com/nu7hatch/gouuid v0.0.0-20131221200532-179d4d0c4d8d/go.mod h1:YUTz3bUH2ZwIWBy3CJBeOBEugqcmXREj14T+iG/4k4U=\ngithub.com/op/go-logging v0.0.0-20160211212156-b2cb9fa56473 h1:J1QZwDXgZ4dJD2s19iqR9+U00OWM2kDzbf1O/fmvCWg=\ngithub.com/op/go-logging v0.0.0-20160211212156-b2cb9fa56473/go.mod h1:HzydrMdWErDVzsI23lYNej1Htcns9BCg93Dk0bBINWk=\ngithub.com/opencontainers/go-digest v0.0.0-20180430190053-c9281466c8b2/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.0.1 h1:JMemWkRwHx4Zj+fVxWoMCFm/8sYGGrUVojFA6h/TRcI=\ngithub.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=\ngithub.com/opencontainers/runc v0.0.0-20190115041553-12f6a991201f/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=\ngithub.com/opencontainers/runc v0.1.1/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=\ngithub.com/opencontainers/runc v1.1.0 h1:O9+X96OcDjkmmZyfaG996kV7yq8HsoU2h1XRRQcefG8=\ngithub.com/opencontainers/runc v1.1.0/go.mod h1:Tj1hFw6eFWp/o33uxGf5yF2BX5yz2Z6iptFpuvbbKqc=\ngithub.com/opencontainers/runtime-spec v1.0.2/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=\ngithub.com/opencontainers/runtime-spec v1.0.3-0.20210326190908-1c3f411f0417 h1:3snG66yBm59tKhhSPQrQ/0bCrv1LQbKt40LnUPiUxdc=\ngithub.com/opencontainers/runtime-spec v1.0.3-0.20210326190908-1c3f411f0417/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=\ngithub.com/opencontainers/selinux v1.10.0 h1:rAiKF8hTcgLI3w0DHm6i0ylVVcOrlgR1kK99DRLDhyU=\ngithub.com/opencontainers/selinux v1.10.0/go.mod h1:2i0OySw99QjzBBQByd1Gr9gSjvuho1lHsJxIJ3gGbJI=\ngithub.com/pkg/browser v0.0.0-20201207095918-0426ae3fba23 h1:dofHuld+js7eKSemxqTVIo8yRlpRw+H1SdpzZxWruBc=\ngithub.com/pkg/browser v0.0.0-20201207095918-0426ae3fba23/go.mod h1:N6UoU20jOqggOuDwUaBQpluzLNDqif3kq9z2wpdYEfQ=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/procfs v0.0.0-20180125133057-cb4147076ac7/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/seccomp/libseccomp-golang v0.9.2-0.20210429002308-3879420cc921 h1:58EBmR2dMNL2n/FnbQewK3D14nXr0V9CObDSvMJLq+Y=\ngithub.com/seccomp/libseccomp-golang v0.9.2-0.20210429002308-3879420cc921/go.mod h1:JA8cRccbGaA1s33RQf7Y1+q9gHmZX1yB/z9WDN1C6fg=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.6.0/go.mod h1:7uNnSEd1DgxDLC74fIahvMZmmYsHGZGEOFrfsX/uA88=\ngithub.com/sirupsen/logrus v1.8.1 h1:dJKuHgqk1NNQlqoA6BTlM1Wf9DOH3NBjQyu0h9+AZZE=\ngithub.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/spf13/cobra v0.0.2-0.20171109065643-2da4a54c5cee/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=\ngithub.com/spf13/pflag v1.0.1-0.20171106142849-4c012f6dcd95/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.4.0 h1:2E4SXV/wtOkTonXsotYi4li6zVWxYlZuYNCXe9XRJyk=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635 h1:kdXcSzyDtseVEc4yCz2qF8ZrQvIDBJLl4S1c3GCXmoI=\ngithub.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635/go.mod h1:hkRG7XYTFWNJGYcbNJQlaLq0fg1yr4J4t/NcTQtrfww=\ngithub.com/urfave/cli v1.22.1/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/urfave/cli v1.22.2/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/vishvananda/netlink v1.1.0 h1:1iyaYNBLmP6L0220aDnYQpo1QEV4t4hJ+xEEhhJH8j0=\ngithub.com/vishvananda/netlink v1.1.0/go.mod h1:cTgwzPIzzgDAYoQrMm0EdrjRUBkTqKYppBueQtXaqoE=\ngithub.com/vishvananda/netns v0.0.0-20191106174202-0a2b9b5464df h1:OviZH7qLw/7ZovXvuNyL3XQl8UFofeikI1NW1Gypu7k=\ngithub.com/vishvananda/netns v0.0.0-20191106174202-0a2b9b5464df/go.mod h1:JP3t17pCcGlemwknint6hfoeCVQrEMVwxRLRjXpq+BU=\ngo.opencensus.io v0.22.0 h1:C9hSCOW830chIVkdja34wa6Ky+IzWllkUinR+BtRZd4=\ngo.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20191004110552-13f9640d40b9/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201224014010-6772e930b67b h1:iFwSg7t5GZmB/Q5TjiEAsdoLDrdJRC1RiF2WhuV29Qw=\ngolang.org/x/net v0.0.0-20201224014010-6772e930b67b/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58 h1:8gQV6CLnAEikrhgkHFbMAEhagSSnXWGV915qUMm9mrU=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190606203320-7fc4e5ec1444/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191022100944-742c48ecaeb7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191115151921-52ab43148777/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200120151820-655fe14d7479/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200724161237-0e2f3a69832c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200831180312-196b9ba8737a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200909081042-eff7692f9009/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200922070232-aee5d888a860/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210906170528-6f6e22806c34/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211025201205-69cdffdb9359/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211116061358-0a5406a5449c h1:DHcbWVXeY+0Y8HHKR+rbLwnoh2F4tNCY7rTiHJ30RmA=\ngolang.org/x/sys v0.0.0-20211116061358-0a5406a5449c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201113234701-d7a72108b828/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1 h1:v+OssWQX+hTHEmOBgwxdZxK4zHq3yOs8F9J7mk0PY8E=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.23.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.27.1 h1:SnqbnDw1V7RiZcXPx5MEeqPv2s79L9i7BJUlG/+RurQ=\ngoogle.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngotest.tools v2.2.0+incompatible h1:VsBPFP1AI068pPrMxtb/S8Zkgf9xEmTLJjfM+P5UIEo=\ngotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=\ngotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=\ngotest.tools/v3 v3.0.3 h1:4AuOwCGf4lLR9u3YOe2awrHygurzhO/HeQ6laiA6Sx0=\ngotest.tools/v3 v3.0.3/go.mod h1:Z7Lb0S5l+klDB31fvDQX8ss/FlKDxtlFlw3Oa8Ymbl8=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\n"
        },
        {
          "name": "grid.go",
          "type": "blob",
          "size": 4.6474609375,
          "content": "package main\n\nimport (\n\t\"github.com/bcicen/ctop/config\"\n\t\"github.com/bcicen/ctop/cwidgets/single\"\n\tui \"github.com/gizak/termui\"\n)\n\nfunc ShowConnError(err error) (exit bool) {\n\tui.Clear()\n\tui.DefaultEvtStream.ResetHandlers()\n\tdefer ui.DefaultEvtStream.ResetHandlers()\n\n\tsetErr := func(err error) {\n\t\terrView.Append(err.Error())\n\t\terrView.Append(\"attempting to reconnect...\")\n\t\tui.Render(errView)\n\t}\n\n\tHandleKeys(\"exit\", func() {\n\t\texit = true\n\t\tui.StopLoop()\n\t})\n\n\tui.Handle(\"/timer/1s\", func(ui.Event) {\n\t\t_, err := cursor.RefreshContainers()\n\t\tif err == nil {\n\t\t\tui.StopLoop()\n\t\t\treturn\n\t\t}\n\t\tsetErr(err)\n\t})\n\n\tui.Handle(\"/sys/wnd/resize\", func(e ui.Event) {\n\t\terrView.Resize()\n\t\tui.Clear()\n\t\tui.Render(errView)\n\t\tlog.Infof(\"RESIZE\")\n\t})\n\n\terrView.Resize()\n\tsetErr(err)\n\tui.Loop()\n\treturn exit\n}\n\nfunc RedrawRows(clr bool) {\n\t// reinit body rows\n\tcGrid.Clear()\n\n\t// build layout\n\ty := 1\n\tif config.GetSwitchVal(\"enableHeader\") {\n\t\theader.SetCount(cursor.Len())\n\t\theader.SetFilter(config.GetVal(\"filterStr\"))\n\t\ty += header.Height()\n\t}\n\n\tcGrid.SetY(y)\n\n\tfor _, c := range cursor.filtered {\n\t\tcGrid.AddRows(c.Widgets)\n\t}\n\n\tif clr {\n\t\tui.Clear()\n\t\tlog.Debugf(\"screen cleared\")\n\t}\n\tif config.GetSwitchVal(\"enableHeader\") {\n\t\tui.Render(header)\n\t}\n\tcGrid.Align()\n\tui.Render(cGrid)\n}\n\nfunc SingleView() MenuFn {\n\tc := cursor.Selected()\n\tif c == nil {\n\t\treturn nil\n\t}\n\n\tui.Clear()\n\tui.DefaultEvtStream.ResetHandlers()\n\tdefer ui.DefaultEvtStream.ResetHandlers()\n\n\tex := single.NewSingle()\n\tc.SetUpdater(ex)\n\n\tex.Align()\n\tui.Render(ex)\n\n\tHandleKeys(\"up\", ex.Up)\n\tHandleKeys(\"down\", ex.Down)\n\tui.Handle(\"/sys/kbd/\", func(ui.Event) { ui.StopLoop() })\n\n\tui.Handle(\"/timer/1s\", func(ui.Event) { ui.Render(ex) })\n\tui.Handle(\"/sys/wnd/resize\", func(e ui.Event) {\n\t\tex.SetWidth(ui.TermWidth())\n\t\tex.Align()\n\t\tlog.Infof(\"resize: width=%v max-rows=%v\", ex.Width, cGrid.MaxRows())\n\t})\n\n\tui.Loop()\n\tc.SetUpdater(c.Widgets)\n\treturn nil\n}\n\nfunc RefreshDisplay() error {\n\t// skip display refresh during scroll\n\tif !cursor.isScrolling {\n\t\tneedsClear, err := cursor.RefreshContainers()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tRedrawRows(needsClear)\n\t}\n\treturn nil\n}\n\nfunc Display() bool {\n\tvar menu MenuFn\n\tvar connErr error\n\n\tcGrid.SetWidth(ui.TermWidth())\n\tui.DefaultEvtStream.Hook(logEvent)\n\n\t// initial draw\n\theader.Align()\n\tstatus.Align()\n\tcursor.RefreshContainers()\n\tRedrawRows(true)\n\n\tHandleKeys(\"up\", cursor.Up)\n\tHandleKeys(\"down\", cursor.Down)\n\n\tHandleKeys(\"pgup\", cursor.PgUp)\n\tHandleKeys(\"pgdown\", cursor.PgDown)\n\n\tHandleKeys(\"exit\", ui.StopLoop)\n\tHandleKeys(\"help\", func() {\n\t\tmenu = HelpMenu\n\t\tui.StopLoop()\n\t})\n\n\tui.Handle(\"/sys/kbd/<enter>\", func(ui.Event) {\n\t\tmenu = ContainerMenu\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/<left>\", func(ui.Event) {\n\t\tmenu = LogMenu\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/<right>\", func(ui.Event) {\n\t\tmenu = SingleView\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/l\", func(ui.Event) {\n\t\tmenu = LogMenu\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/e\", func(ui.Event) {\n\t\tmenu = ExecShell\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/w\", func(ui.Event) {\n\t\tmenu = OpenInBrowser()\n\t})\n\tui.Handle(\"/sys/kbd/o\", func(ui.Event) {\n\t\tmenu = SingleView\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/a\", func(ui.Event) {\n\t\tconfig.Toggle(\"allContainers\")\n\t\tconnErr = RefreshDisplay()\n\t\tif connErr != nil {\n\t\t\tui.StopLoop()\n\t\t}\n\t})\n\tui.Handle(\"/sys/kbd/D\", func(ui.Event) {\n\t\tdumpContainer(cursor.Selected())\n\t})\n\tui.Handle(\"/sys/kbd/f\", func(ui.Event) {\n\t\tmenu = FilterMenu\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/H\", func(ui.Event) {\n\t\tconfig.Toggle(\"enableHeader\")\n\t\tRedrawRows(true)\n\t})\n\tui.Handle(\"/sys/kbd/r\", func(e ui.Event) {\n\t\tconfig.Toggle(\"sortReversed\")\n\t})\n\tui.Handle(\"/sys/kbd/s\", func(ui.Event) {\n\t\tmenu = SortMenu\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/c\", func(ui.Event) {\n\t\tmenu = ColumnsMenu\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/S\", func(ui.Event) {\n\t\tpath, err := config.Write()\n\t\tif err == nil {\n\t\t\tlog.Statusf(\"wrote config to %s\", path)\n\t\t} else {\n\t\t\tlog.StatusErr(err)\n\t\t}\n\t\tui.StopLoop()\n\t})\n\n\tui.Handle(\"/timer/1s\", func(e ui.Event) {\n\t\tif log.StatusQueued() {\n\t\t\tui.StopLoop()\n\t\t}\n\t\tconnErr = RefreshDisplay()\n\t\tif connErr != nil {\n\t\t\tui.StopLoop()\n\t\t}\n\t})\n\n\tui.Handle(\"/sys/wnd/resize\", func(e ui.Event) {\n\t\theader.Align()\n\t\tstatus.Align()\n\t\tcursor.ScrollPage()\n\t\tcGrid.SetWidth(ui.TermWidth())\n\t\tlog.Infof(\"resize: width=%v max-rows=%v\", cGrid.Width, cGrid.MaxRows())\n\t\tRedrawRows(true)\n\t})\n\n\tui.Loop()\n\n\tif connErr != nil {\n\t\treturn ShowConnError(connErr)\n\t}\n\n\tif log.StatusQueued() {\n\t\tfor sm := range log.FlushStatus() {\n\t\t\tif sm.IsError {\n\t\t\t\tstatus.ShowErr(sm.Text)\n\t\t\t} else {\n\t\t\t\tstatus.Show(sm.Text)\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\tif menu != nil {\n\t\tfor menu != nil {\n\t\t\tmenu = menu()\n\t\t}\n\t\treturn false\n\t}\n\n\treturn true\n}\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 1.9765625,
          "content": "#!/usr/bin/env bash\n# a simple install script for ctop\n\nKERNEL=$(uname -s)\n\nfunction output() { echo -e \"\\033[32mctop-install\\033[0m $@\"; }\n\nfunction command_exists() {\n  command -v \"$@\" > /dev/null 2>&1\n}\n\n# extract github download url matching pattern\nfunction extract_url() {\n  match=$1; shift\n  echo \"$@\" | while read line; do\n    case $line in\n      *browser_download_url*${match}*)\n        url=$(echo $line | sed -e 's/^.*\"browser_download_url\":[ ]*\"//' -e 's/\".*//;s/\\ //g')\n        echo $url\n        break\n      ;;\n    esac\n  done\n}\n\ncase $KERNEL in\n  Linux) MATCH_BUILD=\"linux-amd64\" ;;\n  Darwin) MATCH_BUILD=\"darwin-amd64\" ;;\n  *)\n    echo \"platform not supported by this install script\"\n    exit 1\n    ;;\nesac\n\nfor req in curl wget; do\n  command_exists $req || {\n    output \"missing required $req binary\"\n    req_failed=1\n  }\ndone\n[ \"$req_failed\" == 1 ] && exit 1\n\nsh_c='sh -c'\nif [ \"$CURRENT_USER\" != 'root' ]; then\n  if command_exists sudo; then\n    sh_c='sudo -E sh -c'\n  elif command_exists su; then\n    sh_c='su -c'\n  else\n    output \"Error: this installer needs the ability to run commands as root. We are unable to find either \"sudo\" or \"su\" available to make this happen.\"\n    exit 1\n  fi\nfi\n\nTMP=$(mktemp -d \"${TMPDIR:-/tmp}/ctop.XXXXX\")\ncd ${TMP}\n\noutput \"fetching latest release info\"\nresp=$(curl -s https://api.github.com/repos/bcicen/ctop/releases/latest)\n\noutput \"fetching release checksums\"\nchecksum_url=$(extract_url sha256sums.txt \"$resp\")\nwget -q $checksum_url -O sha256sums.txt\n\n# skip if latest already installed\ncur_ctop=$(which ctop 2> /dev/null)\nif [[ -n \"$cur_ctop\" ]]; then\n  cur_sum=$(sha256sum $cur_ctop | sed 's/ .*//')\n  (grep -q $cur_sum sha256sums.txt) && {\n    output \"already up-to-date\"\n    exit 0\n  }\nfi\n\noutput \"fetching latest ctop\"\nurl=$(extract_url $MATCH_BUILD \"$resp\")\nwget -q --show-progress $url\n(sha256sum -c --quiet --ignore-missing sha256sums.txt) || exit 1\n\noutput \"installing to /usr/local/bin\"\nchmod +x ctop-*\n$sh_c \"mv ctop-* /usr/local/bin/ctop\"\n\noutput \"done!\"\n"
        },
        {
          "name": "keys.go",
          "type": "blob",
          "size": 0.6611328125,
          "content": "package main\n\nimport (\n\tui \"github.com/gizak/termui\"\n)\n\n// Common action keybindings\nvar keyMap = map[string][]string{\n\t\"up\": []string{\n\t\t\"/sys/kbd/<up>\",\n\t\t\"/sys/kbd/k\",\n\t},\n\t\"down\": []string{\n\t\t\"/sys/kbd/<down>\",\n\t\t\"/sys/kbd/j\",\n\t},\n\t\"pgup\": []string{\n\t\t\"/sys/kbd/<previous>\",\n\t\t\"/sys/kbd/C-<up>\",\n\t},\n\t\"pgdown\": []string{\n\t\t\"/sys/kbd/<next>\",\n\t\t\"/sys/kbd/C-<down>\",\n\t},\n\t\"exit\": []string{\n\t\t\"/sys/kbd/q\",\n\t\t\"/sys/kbd/C-c\",\n\t\t\"/sys/kbd/<escape>\",\n\t},\n\t\"help\": []string{\n\t\t\"/sys/kbd/h\",\n\t\t\"/sys/kbd/?\",\n\t},\n}\n\n// Apply a common handler function to all given keys\nfunc HandleKeys(i string, f func()) {\n\tfor _, k := range keyMap[i] {\n\t\tui.Handle(k, func(ui.Event) { f() })\n\t}\n}\n"
        },
        {
          "name": "logging",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 3.1240234375,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"runtime\"\n\t\"strings\"\n\n\t\"github.com/bcicen/ctop/config\"\n\t\"github.com/bcicen/ctop/connector\"\n\t\"github.com/bcicen/ctop/container\"\n\t\"github.com/bcicen/ctop/cwidgets/compact\"\n\t\"github.com/bcicen/ctop/logging\"\n\t\"github.com/bcicen/ctop/widgets\"\n\tui \"github.com/gizak/termui\"\n\ttm \"github.com/nsf/termbox-go\"\n)\n\nvar (\n\tbuild     = \"none\"\n\tversion   = \"dev-build\"\n\tgoVersion = runtime.Version()\n\n\tlog     *logging.CTopLogger\n\tcursor  *GridCursor\n\tcGrid   *compact.CompactGrid\n\theader  *widgets.CTopHeader\n\tstatus  *widgets.StatusLine\n\terrView *widgets.ErrorView\n\n\tversionStr = fmt.Sprintf(\"ctop version %v, build %v %v\", version, build, goVersion)\n)\n\nfunc main() {\n\tdefer panicExit()\n\n\t// parse command line arguments\n\tvar (\n\t\tversionFlag     = flag.Bool(\"v\", false, \"output version information and exit\")\n\t\thelpFlag        = flag.Bool(\"h\", false, \"display this help dialog\")\n\t\tfilterFlag      = flag.String(\"f\", \"\", \"filter containers\")\n\t\tactiveOnlyFlag  = flag.Bool(\"a\", false, \"show active containers only\")\n\t\tsortFieldFlag   = flag.String(\"s\", \"\", \"select container sort field\")\n\t\treverseSortFlag = flag.Bool(\"r\", false, \"reverse container sort order\")\n\t\tinvertFlag      = flag.Bool(\"i\", false, \"invert default colors\")\n\t\tconnectorFlag   = flag.String(\"connector\", \"docker\", \"container connector to use\")\n\t)\n\tflag.Parse()\n\n\tif *versionFlag {\n\t\tfmt.Println(versionStr)\n\t\tos.Exit(0)\n\t}\n\n\tif *helpFlag {\n\t\tprintHelp()\n\t\tos.Exit(0)\n\t}\n\n\t// init logger\n\tlog = logging.Init()\n\n\t// init global config and read config file if exists\n\tconfig.Init()\n\tif err := config.Read(); err != nil {\n\t\tlog.Warningf(\"reading config: %s\", err)\n\t}\n\n\t// override default config values with command line flags\n\tif *filterFlag != \"\" {\n\t\tconfig.Update(\"filterStr\", *filterFlag)\n\t}\n\n\tif *activeOnlyFlag {\n\t\tconfig.Toggle(\"allContainers\")\n\t}\n\n\tif *sortFieldFlag != \"\" {\n\t\tvalidSort(*sortFieldFlag)\n\t\tconfig.Update(\"sortField\", *sortFieldFlag)\n\t}\n\n\tif *reverseSortFlag {\n\t\tconfig.Toggle(\"sortReversed\")\n\t}\n\n\t// init ui\n\tif *invertFlag {\n\t\tInvertColorMap()\n\t}\n\tui.ColorMap = ColorMap // override default colormap\n\tif err := ui.Init(); err != nil {\n\t\tpanic(err)\n\t}\n\ttm.SetInputMode(tm.InputAlt)\n\n\tdefer Shutdown()\n\t// init grid, cursor, header\n\tcSuper, err := connector.ByName(*connectorFlag)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcursor = &GridCursor{cSuper: cSuper}\n\tcGrid = compact.NewCompactGrid()\n\theader = widgets.NewCTopHeader()\n\tstatus = widgets.NewStatusLine()\n\terrView = widgets.NewErrorView()\n\n\tfor {\n\t\texit := Display()\n\t\tif exit {\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc Shutdown() {\n\tlog.Notice(\"shutting down\")\n\tlog.Exit()\n\tif tm.IsInit {\n\t\tui.Close()\n\t}\n}\n\n// ensure a given sort field is valid\nfunc validSort(s string) {\n\tif _, ok := container.Sorters[s]; !ok {\n\t\tfmt.Printf(\"invalid sort field: %s\\n\", s)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc panicExit() {\n\tif r := recover(); r != nil {\n\t\tShutdown()\n\t\tpanic(r)\n\t\tfmt.Printf(\"error: %s\\n\", r)\n\t\tos.Exit(1)\n\t}\n}\n\nvar helpMsg = `ctop - interactive container viewer\n\nusage: ctop [options]\n\noptions:\n`\n\nfunc printHelp() {\n\tfmt.Println(helpMsg)\n\tflag.PrintDefaults()\n\tfmt.Printf(\"\\navailable connectors: \")\n\tfmt.Println(strings.Join(connector.Enabled(), \", \"))\n}\n"
        },
        {
          "name": "menus.go",
          "type": "blob",
          "size": 10.65234375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/bcicen/ctop/config\"\n\t\"github.com/bcicen/ctop/container\"\n\t\"github.com/bcicen/ctop/widgets\"\n\t\"github.com/bcicen/ctop/widgets/menu\"\n\tui \"github.com/gizak/termui\"\n\t\"github.com/pkg/browser\"\n)\n\n// MenuFn executes a menu window, returning the next menu or nil\ntype MenuFn func() MenuFn\n\nvar helpDialog = []menu.Item{\n\t{\"<enter> - open container menu\", \"\"},\n\t{\"\", \"\"},\n\t{\"[a] - toggle display of all containers\", \"\"},\n\t{\"[f] - filter displayed containers\", \"\"},\n\t{\"[h] - open this help dialog\", \"\"},\n\t{\"[H] - toggle ctop header\", \"\"},\n\t{\"[s] - select container sort field\", \"\"},\n\t{\"[r] - reverse container sort order\", \"\"},\n\t{\"[o] - open single view\", \"\"},\n\t{\"[l] - view container logs ([t] to toggle timestamp when open)\", \"\"},\n\t{\"[e] - exec shell\", \"\"},\n\t{\"[w] - open browser (first port is http)\", \"\"},\n\t{\"[c] - configure columns\", \"\"},\n\t{\"[S] - save current configuration to file\", \"\"},\n\t{\"[q] - exit ctop\", \"\"},\n}\n\nfunc HelpMenu() MenuFn {\n\tui.Clear()\n\tui.DefaultEvtStream.ResetHandlers()\n\tdefer ui.DefaultEvtStream.ResetHandlers()\n\n\tm := menu.NewMenu()\n\tm.BorderLabel = \"Help\"\n\tm.AddItems(helpDialog...)\n\tui.Handle(\"/sys/wnd/resize\", func(e ui.Event) {\n\t\tui.Clear()\n\t\tui.Render(m)\n\t})\n\tui.Handle(\"/sys/kbd/\", func(ui.Event) {\n\t\tui.StopLoop()\n\t})\n\tui.Loop()\n\treturn nil\n}\n\nfunc FilterMenu() MenuFn {\n\tui.DefaultEvtStream.ResetHandlers()\n\tdefer ui.DefaultEvtStream.ResetHandlers()\n\n\ti := widgets.NewInput()\n\ti.BorderLabel = \"Filter\"\n\ti.SetY(ui.TermHeight() - i.Height)\n\ti.Data = config.GetVal(\"filterStr\")\n\tui.Render(i)\n\n\t// refresh container rows on input\n\tstream := i.Stream()\n\tgo func() {\n\t\tfor s := range stream {\n\t\t\tconfig.Update(\"filterStr\", s)\n\t\t\tRefreshDisplay()\n\t\t\tui.Render(i)\n\t\t}\n\t}()\n\n\ti.InputHandlers()\n\tui.Handle(\"/sys/kbd/<escape>\", func(ui.Event) {\n\t\tconfig.Update(\"filterStr\", \"\")\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/<enter>\", func(ui.Event) {\n\t\tconfig.Update(\"filterStr\", i.Data)\n\t\tui.StopLoop()\n\t})\n\tui.Loop()\n\treturn nil\n}\n\nfunc SortMenu() MenuFn {\n\tui.Clear()\n\tui.DefaultEvtStream.ResetHandlers()\n\tdefer ui.DefaultEvtStream.ResetHandlers()\n\n\tm := menu.NewMenu()\n\tm.Selectable = true\n\tm.SortItems = true\n\tm.BorderLabel = \"Sort Field\"\n\n\tfor _, field := range container.SortFields() {\n\t\tm.AddItems(menu.Item{field, \"\"})\n\t}\n\n\t// set cursor position to current sort field\n\tm.SetCursor(config.GetVal(\"sortField\"))\n\n\tHandleKeys(\"up\", m.Up)\n\tHandleKeys(\"down\", m.Down)\n\tHandleKeys(\"exit\", ui.StopLoop)\n\n\tui.Handle(\"/sys/kbd/<enter>\", func(ui.Event) {\n\t\tconfig.Update(\"sortField\", m.SelectedValue())\n\t\tui.StopLoop()\n\t})\n\n\tui.Render(m)\n\tui.Loop()\n\treturn nil\n}\n\nfunc ColumnsMenu() MenuFn {\n\tconst (\n\t\tenabledStr  = \"[X]\"\n\t\tdisabledStr = \"[ ]\"\n\t\tpadding     = 2\n\t)\n\n\tui.Clear()\n\tui.DefaultEvtStream.ResetHandlers()\n\tdefer ui.DefaultEvtStream.ResetHandlers()\n\n\tm := menu.NewMenu()\n\tm.Selectable = true\n\tm.SortItems = false\n\tm.BorderLabel = \"Columns\"\n\tm.SubText = \"Re-order: <Page Up> / <Page Down>\"\n\n\trebuild := func() {\n\t\t// get padding for right alignment of enabled status\n\t\tvar maxLen int\n\t\tfor _, col := range config.GlobalColumns {\n\t\t\tif len(col.Label) > maxLen {\n\t\t\t\tmaxLen = len(col.Label)\n\t\t\t}\n\t\t}\n\t\tmaxLen += padding\n\n\t\t// rebuild menu items\n\t\tm.ClearItems()\n\t\tfor _, col := range config.GlobalColumns {\n\t\t\ttxt := col.Label + strings.Repeat(\" \", maxLen-len(col.Label))\n\t\t\tif col.Enabled {\n\t\t\t\ttxt += enabledStr\n\t\t\t} else {\n\t\t\t\ttxt += disabledStr\n\t\t\t}\n\t\t\tm.AddItems(menu.Item{col.Name, txt})\n\t\t}\n\t}\n\n\tupFn := func() {\n\t\tconfig.ColumnLeft(m.SelectedValue())\n\t\tm.Up()\n\t\trebuild()\n\t}\n\n\tdownFn := func() {\n\t\tconfig.ColumnRight(m.SelectedValue())\n\t\tm.Down()\n\t\trebuild()\n\t}\n\n\ttoggleFn := func() {\n\t\tconfig.ColumnToggle(m.SelectedValue())\n\t\trebuild()\n\t}\n\n\trebuild()\n\n\tHandleKeys(\"up\", m.Up)\n\tHandleKeys(\"down\", m.Down)\n\tHandleKeys(\"enter\", toggleFn)\n\tHandleKeys(\"pgup\", upFn)\n\tHandleKeys(\"pgdown\", downFn)\n\n\tui.Handle(\"/sys/kbd/x\", func(ui.Event) { toggleFn() })\n\tui.Handle(\"/sys/kbd/<enter>\", func(ui.Event) { toggleFn() })\n\n\tHandleKeys(\"exit\", func() {\n\t\tcSource, err := cursor.cSuper.Get()\n\t\tif err == nil {\n\t\t\tfor _, c := range cSource.All() {\n\t\t\t\tc.RecreateWidgets()\n\t\t\t}\n\t\t}\n\t\tui.StopLoop()\n\t})\n\n\tui.Render(m)\n\tui.Loop()\n\treturn nil\n}\n\nfunc ContainerMenu() MenuFn {\n\tc := cursor.Selected()\n\tif c == nil {\n\t\treturn nil\n\t}\n\n\tui.DefaultEvtStream.ResetHandlers()\n\tdefer ui.DefaultEvtStream.ResetHandlers()\n\n\tm := menu.NewMenu()\n\tm.Selectable = true\n\tm.BorderLabel = \"Menu\"\n\n\titems := []menu.Item{\n\t\tmenu.Item{Val: \"single\", Label: \"[o] single view\"},\n\t\tmenu.Item{Val: \"logs\", Label: \"[l] log view\"},\n\t}\n\n\tif c.Meta[\"state\"] == \"running\" {\n\t\titems = append(items, menu.Item{Val: \"stop\", Label: \"[s] stop\"})\n\t\titems = append(items, menu.Item{Val: \"pause\", Label: \"[p] pause\"})\n\t\titems = append(items, menu.Item{Val: \"restart\", Label: \"[r] restart\"})\n\t\titems = append(items, menu.Item{Val: \"exec\", Label: \"[e] exec shell\"})\n\t\tif c.Meta[\"Web Port\"] != \"\" {\n\t\t\titems = append(items, menu.Item{Val: \"browser\", Label: \"[w] open in browser\"})\n\t\t}\n\t}\n\tif c.Meta[\"state\"] == \"exited\" || c.Meta[\"state\"] == \"created\" {\n\t\titems = append(items, menu.Item{Val: \"start\", Label: \"[s] start\"})\n\t\titems = append(items, menu.Item{Val: \"remove\", Label: \"[R] remove\"})\n\t}\n\tif c.Meta[\"state\"] == \"paused\" {\n\t\titems = append(items, menu.Item{Val: \"unpause\", Label: \"[p] unpause\"})\n\t}\n\titems = append(items, menu.Item{Val: \"cancel\", Label: \"[c] cancel\"})\n\n\tm.AddItems(items...)\n\tui.Render(m)\n\n\tHandleKeys(\"up\", m.Up)\n\tHandleKeys(\"down\", m.Down)\n\n\tvar selected string\n\n\t// shortcuts\n\tui.Handle(\"/sys/kbd/o\", func(ui.Event) {\n\t\tselected = \"single\"\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/l\", func(ui.Event) {\n\t\tselected = \"logs\"\n\t\tui.StopLoop()\n\t})\n\tif c.Meta[\"state\"] != \"paused\" {\n\t\tui.Handle(\"/sys/kbd/s\", func(ui.Event) {\n\t\t\tif c.Meta[\"state\"] == \"running\" {\n\t\t\t\tselected = \"stop\"\n\t\t\t} else {\n\t\t\t\tselected = \"start\"\n\t\t\t}\n\t\t\tui.StopLoop()\n\t\t})\n\t}\n\tif c.Meta[\"state\"] != \"exited\" && c.Meta[\"state\"] != \"created\" {\n\t\tui.Handle(\"/sys/kbd/p\", func(ui.Event) {\n\t\t\tif c.Meta[\"state\"] == \"paused\" {\n\t\t\t\tselected = \"unpause\"\n\t\t\t} else {\n\t\t\t\tselected = \"pause\"\n\t\t\t}\n\t\t\tui.StopLoop()\n\t\t})\n\t}\n\tif c.Meta[\"state\"] == \"running\" {\n\t\tui.Handle(\"/sys/kbd/e\", func(ui.Event) {\n\t\t\tselected = \"exec\"\n\t\t\tui.StopLoop()\n\t\t})\n\t\tui.Handle(\"/sys/kbd/r\", func(ui.Event) {\n\t\t\tselected = \"restart\"\n\t\t\tui.StopLoop()\n\t\t})\n\t\tif c.Meta[\"Web Port\"] != \"\" {\n\t\t\tui.Handle(\"/sys/kbd/w\", func(ui.Event) {\n\t\t\t\tselected = \"browser\"\n\t\t\t})\n\t\t}\n\t}\n\tui.Handle(\"/sys/kbd/R\", func(ui.Event) {\n\t\tselected = \"remove\"\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/c\", func(ui.Event) {\n\t\tui.StopLoop()\n\t})\n\n\tui.Handle(\"/sys/kbd/<enter>\", func(ui.Event) {\n\t\tselected = m.SelectedValue()\n\t\tui.StopLoop()\n\t})\n\tui.Handle(\"/sys/kbd/\", func(ui.Event) {\n\t\tui.StopLoop()\n\t})\n\tui.Loop()\n\n\tvar nextMenu MenuFn\n\tswitch selected {\n\tcase \"single\":\n\t\tnextMenu = SingleView\n\tcase \"logs\":\n\t\tnextMenu = LogMenu\n\tcase \"exec\":\n\t\tnextMenu = ExecShell\n\tcase \"browser\":\n\t\tnextMenu = OpenInBrowser\n\tcase \"start\":\n\t\tnextMenu = Confirm(confirmTxt(\"start\", c.GetMeta(\"name\")), c.Start)\n\tcase \"stop\":\n\t\tnextMenu = Confirm(confirmTxt(\"stop\", c.GetMeta(\"name\")), c.Stop)\n\tcase \"remove\":\n\t\tnextMenu = Confirm(confirmTxt(\"remove\", c.GetMeta(\"name\")), c.Remove)\n\tcase \"pause\":\n\t\tnextMenu = Confirm(confirmTxt(\"pause\", c.GetMeta(\"name\")), c.Pause)\n\tcase \"unpause\":\n\t\tnextMenu = Confirm(confirmTxt(\"unpause\", c.GetMeta(\"name\")), c.Unpause)\n\tcase \"restart\":\n\t\tnextMenu = Confirm(confirmTxt(\"restart\", c.GetMeta(\"name\")), c.Restart)\n\t}\n\n\treturn nextMenu\n}\n\nfunc LogMenu() MenuFn {\n\n\tc := cursor.Selected()\n\tif c == nil {\n\t\treturn nil\n\t}\n\n\tui.DefaultEvtStream.ResetHandlers()\n\tdefer ui.DefaultEvtStream.ResetHandlers()\n\n\tlogs, quit := logReader(c)\n\tm := widgets.NewTextView(logs)\n\tm.BorderLabel = fmt.Sprintf(\"Logs [%s]\", c.GetMeta(\"name\"))\n\tui.Render(m)\n\n\tui.Handle(\"/sys/wnd/resize\", func(e ui.Event) {\n\t\tm.Resize()\n\t})\n\tui.Handle(\"/sys/kbd/t\", func(ui.Event) {\n\t\tm.Toggle()\n\t})\n\tui.Handle(\"/sys/kbd/\", func(ui.Event) {\n\t\tquit <- true\n\t\tui.StopLoop()\n\t})\n\tui.Loop()\n\treturn nil\n}\n\nfunc ExecShell() MenuFn {\n\tc := cursor.Selected()\n\n\tif c == nil {\n\t\treturn nil\n\t}\n\n\tui.DefaultEvtStream.ResetHandlers()\n\tdefer ui.DefaultEvtStream.ResetHandlers()\n\t// Detect and execute default shell in container.\n\t// Execute Ash shell command: /bin/sh -c\n\t// Reset colors: printf '\\e[0m\\e[?25h'\n\t// Clear screen\n\t// Run default shell for the user. It's configured in /etc/passwd and looks like root:x:0:0:root:/root:/bin/bash:\n\t//  1. Get current user id: id -un\n\t//  2. Find user's line in /etc/passwd by grep\n\t//  3. Extract default user's shell by cutting seven's column separated by :\n\t//  4. Execute the shell path with eval\n\tif err := c.Exec([]string{\"/bin/sh\", \"-c\", \"printf '\\\\e[0m\\\\e[?25h' && clear && eval `grep ^$(id -un): /etc/passwd | cut -d : -f 7-`\"}); err != nil {\n\t\tlog.StatusErr(err)\n\t}\n\n\treturn nil\n}\n\nfunc OpenInBrowser() MenuFn {\n\tc := cursor.Selected()\n\tif c == nil {\n\t\treturn nil\n\t}\n\n\twebPort := c.Meta.Get(\"Web Port\")\n\tif webPort == \"\" {\n\t\treturn nil\n\t}\n\tlink := \"http://\" + webPort + \"/\"\n\tbrowser.OpenURL(link)\n\treturn nil\n}\n\n// Create a confirmation dialog with a given description string and\n// func to perform if confirmed\nfunc Confirm(txt string, fn func()) MenuFn {\n\tmenu := func() MenuFn {\n\t\tui.DefaultEvtStream.ResetHandlers()\n\t\tdefer ui.DefaultEvtStream.ResetHandlers()\n\n\t\tm := menu.NewMenu()\n\t\tm.Selectable = true\n\t\tm.BorderLabel = \"Confirm\"\n\t\tm.SubText = txt\n\n\t\titems := []menu.Item{\n\t\t\tmenu.Item{Val: \"cancel\", Label: \"[c]ancel\"},\n\t\t\tmenu.Item{Val: \"yes\", Label: \"[y]es\"},\n\t\t}\n\n\t\tvar response bool\n\n\t\tm.AddItems(items...)\n\t\tui.Render(m)\n\n\t\tyes := func() {\n\t\t\tresponse = true\n\t\t\tui.StopLoop()\n\t\t}\n\n\t\tno := func() {\n\t\t\tresponse = false\n\t\t\tui.StopLoop()\n\t\t}\n\n\t\tHandleKeys(\"up\", m.Up)\n\t\tHandleKeys(\"down\", m.Down)\n\t\tHandleKeys(\"exit\", no)\n\t\tui.Handle(\"/sys/kbd/c\", func(ui.Event) { no() })\n\t\tui.Handle(\"/sys/kbd/y\", func(ui.Event) { yes() })\n\n\t\tui.Handle(\"/sys/kbd/<enter>\", func(ui.Event) {\n\t\t\tswitch m.SelectedValue() {\n\t\t\tcase \"cancel\":\n\t\t\t\tno()\n\t\t\tcase \"yes\":\n\t\t\t\tyes()\n\t\t\t}\n\t\t})\n\n\t\tui.Loop()\n\t\tif response {\n\t\t\tfn()\n\t\t}\n\t\treturn nil\n\t}\n\treturn menu\n}\n\ntype toggleLog struct {\n\ttimestamp time.Time\n\tmessage   string\n}\n\nfunc (t *toggleLog) Toggle(on bool) string {\n\tif on {\n\t\treturn fmt.Sprintf(\"%s %s\", t.timestamp.Format(\"2006-01-02T15:04:05.999Z07:00\"), t.message)\n\t}\n\treturn t.message\n}\n\nfunc logReader(container *container.Container) (logs chan widgets.ToggleText, quit chan bool) {\n\n\tlogCollector := container.Logs()\n\tstream := logCollector.Stream()\n\tlogs = make(chan widgets.ToggleText)\n\tquit = make(chan bool)\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase log := <-stream:\n\t\t\t\tlogs <- &toggleLog{timestamp: log.Timestamp, message: log.Message}\n\t\t\tcase <-quit:\n\t\t\t\tlogCollector.Stop()\n\t\t\t\tclose(logs)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\treturn\n}\n\nfunc confirmTxt(a, n string) string { return fmt.Sprintf(\"%s container %s?\", a, n) }\n"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "widgets",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}