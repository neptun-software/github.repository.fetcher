{
  "metadata": {
    "timestamp": 1736568013396,
    "page": 148,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "git-lfs/git-lfs",
      "stars": 13150,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.03515625,
          "content": "* text=auto\n* eol=lf\n*.bat eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3955078125,
          "content": "bin/\nbenchmark/\nout/\nresource.syso\n\nman/*\n\n*.test\ntmp\nt/remote\nt/scutiger\nt/test_count\nt/test_count.lock\n\ndebian/git-lfs/\ndebian/*.log\ndebian/files\ndebian/*.substvars\ndebian/debhelper-build-stamp\ndebian/.debhelper\n/.pc\nobj-*\n\nrpm/BUILD*\nrpm/*RPMS\nrpm/*.log\nrpm/SOURCES\n\nrepos\ndocker/*.key\n\nsrc\ncommands/mancontent_gen.go\n\npo/build\npo/i-reverse.po\n*.mo\n*.pot\ntr/tr_gen.go\n\nlfstest-*\n!lfstest-*.go\n\nvendor/\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 1.3466796875,
          "content": "Andy Neff <andyneff@users.noreply.github.com> <andrew.neff@visionsystemsinc.com>\nArtem V. Navrotskiy <bozaro@yandex.ru> a.navrotskiy <navrotskiy@corp.mail.ru>\nArtem V. Navrotskiy <bozaro@yandex.ru> <bozaro@users.noreply.github.com>\nBrandon Keepers <bkeepers@github.com> <brandon@opensoul.org>\nDavid Pursehouse <dpursehouse@collab.net> <david.pursehouse@gmail.com>\nEvan Priestley <epriestley@javelinjs.com> <git@epriestley.com>\nJosh Vera <josh@joshvera.com> <vera@github.com>\nLars Schneider <larsxschneider@gmail.com> <lars.schneider@autodesk.com>\nLee Reilly <lee@leereilly.net> <lee@github.com>\nNoam Y. Tenne <noam@10ne.org> noamt <noam@10ne.org>\nRick Olson <technoweenie@gmail.com> rick <technoweenie@gmail.com>\nRick Olson <technoweenie@gmail.com> risk danger olson <technoweenie@gmail.com>\nRick Olson <technoweenie@gmail.com> Your Name <you@example.com>\nRiku Lääkkölä <riku.laakkola@iki.fi> <riku.laakkola@coriant.com>\nRyan Simmen <ryan.simmen@gmail.com> <ryansim@microsoft.com>\nScott Barron <scott@barron.io> rubyist <scott.barron@github.com>\nScott Barron <scott@barron.io> Scott Barron <scott.barron@github.com>\nScott Richmond <s.t.richmond@gmail.com> <Scott Richmond>\nSebastian Schuberth <sschuberth@gmail.com> <sschuberth@users.noreply.github.com>\nTaylor Blau <me@ttaylorr.com> <ttaylorr@github.com>\nWilliam Hipschman <willhi@microsoft.com> Will <willhi@microsoft.com>\n"
        },
        {
          "name": ".ruby-version",
          "type": "blob",
          "size": 0.005859375,
          "content": "3.1.2\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 117.93359375,
          "content": "# Git LFS Changelog\n\n## 3.6.0 (20 November 2024)\n\nThis release is a feature release which includes support for multi-stage\nauthentication with Git credential helpers (requires Git 2.46.0) and\nrelative worktree paths (requires Git 2.48.0), a new object transfer batch\nsize configuration option, better path handling when installing on Windows,\nmore POSIX-compliant hook scripts, and improved performance with sparse\ncheckouts, partial clones, and Git remotes with large numbers of tags.\n\nNote that the 3.6.x series of Git LFS releases will be the last releases\nfor which we provide packages or support for versions of any Linux\ndistribution based on either Red Hat Enterprise Linux 7 (RHEL 7) or\nSUSE Linux Enterprise Server 12 (SLES 12).\n\nNote also that the 3.6.x series of Git LFS releases may be the last\nreleases for which we provide packages or support for versions of any\nLinux distribution based on Debian 10 (\"buster\").\n\nThis release is built using Go v1.23 and therefore on macOS systems\nrequires macOS 11 (Big Sur) or later, and on Windows systems requires\nat least Windows 10 or Windows Server 2016 (although Windows 8.1 may\nsuffice).\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @blanet for fixing a crash bug when handling HTTP 429 responses\n* @bogomolets-owl for implementing a batch size configuration option\n* @ConcurrentCrab for preventing hung SSH transfer protocol connections\n* @jochenhz for ensuring files with Unicode names are not accidentally pruned\n* @pastelsky for optimizing performance of our pre-push hook\n* @rustfix for correcting some code comments\n* @rusttech for fixing an array size allocation bug\n* @xdavidwu for improving the portability of our tests and hooks\n\n### Features\n\n* git: improve sparse checkout support #5796 (@bk2204)\n* hook: fix newlines in command missing message #5886 (@xdavidwu)\n* Add batch size config value and use it everywhere #5876 (@bogomolets-owl)\n* Support relative paths to linked working trees #5898 (@chrisd8088)\n* git-lfs: omit tags in ls-remote; optimize pre-push #5863 (@pastelsky)\n* Support multistage authentication with a Git credential helper #5803 (@bk2204)\n* Support arbitrary HTTP credential schemes for authentication #5779 (@bk2204)\n* Optimize performance for scanning trees in partial clones #5699 (@bk2204)\n* Use lower-case file extensions in Windows installer path checks #5688 (@chrisd8088)\n* Match `PATH` case insensitively in Windows installer #5680 (@bk2204)\n\n### Bugs\n\n* Fix crash during pure SSH object transfer with multiple objects #5905 (@chrisd8088)\n* ssh: fix connection creation \"leaking\" connections #5816 (@ConcurrentCrab)\n* fix: fix slice init length #5874 (@rusttech)\n* Fix panic caused by accessing non-existent header #5804 (@blanet)\n* Avoid deadlocking on log scanning with lots of output on stderr #5738 (@bk2204)\n* checkout: gracefully handle files deleted from the index #5698 (@bk2204)\n* Fix logScanner fails to parse pointer file containing unicode chars #5655 (@jochenhz)\n\n### Misc\n\n* Fix improper negated test expressions and refine TLS client certificate tests #5914 (@chrisd8088)\n* Always capture clone logs in tests and remove or update stale workarounds #5906 (@chrisd8088)\n* Update Linux distribution package list for v3.6.0 release #5911 (@chrisd8088)\n* doc: mention the pointer size constraint #5900 (@bk2204)\n* Repair and restore all tests of cloning over TLS #5882 (@chrisd8088)\n* t: increase portability #5887 (@xdavidwu)\n* script/build-git: update Ubuntu 24.04 APT sources #5889 (@chrisd8088)\n* Run tests in parallel on Windows and always cleanup test directories #5879 (@chrisd8088)\n* Update release workflow to use Windows Trusted Signing Action #5873 (@chrisd8088)\n* Upgrade to Go 1.23 #5872 (@chrisd8088)\n* Use custom random data generator for all test objects and filenames #5868 (@chrisd8088)\n* Always build Git against custom libcurl in CI workflows on macOS #5866 (@chrisd8088)\n* Use expected version of Git on macOS in CI jobs #5813 (@chrisd8088)\n* Move @bk2204 to alumni #5808 (@bk2204)\n* docs/api: note API clients may send `charset` parameter in `Content-Type` header #5778 (@chrisd8088)\n* issue template: add more information we'd want to see #5728 (@bk2204)\n* .github/workflows: use actions/setup-go everywhere #5729 (@bk2204)\n* build(deps): bump golang.org/x/net from 0.17.0 to 0.23.0 #5718 (@dependabot[bot])\n* chore: fix function names in comment #5709 (@rustfix)\n* Include remote error when pure SSH protocol fails #5674 (@bk2204)\n* Build release assets with 1.22 #5673 (@bk2204)\n* Build release assets with Go 1.21 #5668 (@bk2204)\n* script/packagecloud: instantiate distro map properly #5662 (@bk2204)\n* Install msgfmt on Windows in CI and release workflows #5666 (@chrisd8088)\n\n## 3.5.0 (28 February 2024)\n\nThis release is a feature release which includes support for LoongArch and\nRISC-V Linux binary tarballs, `FETCH_HEAD` as a remote source (from a plain\n`git fetch`), better support for detection of the system gitattributes file,\nand configuration options for the SSH protocol.  In this release, the\n`FETCH_HEAD` support is experimental and subject to change.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @jochenhz for improvements to `git lfs prune`\n* @murez for improvements to our installation script\n* @qiangxuhui for tooling to build 64-bit LoongArch packages\n* @AaronDewes for tooling to build 64-bit RISC-V packages\n* @b-camacho for allowing `FETCH_HEAD` as a fallback remote source\n* @tigsikram for fixing some broken links\n* @aymanbagabas for fixing our SSH protocol documentation\n* @KyleFromKitware for improvements to the pure SSH protocol\n* @Juneezee for several code cleanups\n* @cmaves for improving performance of our progress indications\n* @QuLogic for improving completions and updating docs\n* @philip-peterson for helping detect invalid refs in `git lfs push`\n* @bogomolets-owl for helping include the reference specified in unlock requests\n\n### Features\n\n* Add --verify-unreachable option to LFS prune #5648 (@jochenhz)\n* attribute: warn if config exists after uninstalling #5635 (@bk2204)\n* Initialize sessions lazily #5634 (@bk2204)\n* Add a `--local` argument to install.sh #5618 (@murez)\n* Provide loong64 Binary Support #5607 (@qiangxuhui)\n* Improve locking performance #5561 (@bk2204)\n* Allow configuring the SSH protocol #5555 (@bk2204)\n* Add `FETCH_HEAD` as fallback remote source #5357 (@b-camacho)\n* Use `git var` to find system gitattributes file #5412 (@bk2204)\n* Add RISC-V support #5438 (@AaronDewes)\n\n### Bugs\n\n* Add support for homedir expansion in SSL key and cert paths #5657 (@bk2204)\n* Display correct status information when `git lfs ls-files` run in subdirectory #5653 (@chrisd8088)\n* Fix git lfs prune is deleting staged files in the index #5637 (@jochenhz)\n* Report invalid ref in `git lfs push` command #5639 (@chrisd8088)\n* Always close open files when cloning and spooling #5617 (@chrisd8088)\n* Fix git-scm.com links #5589 (@tigsikram)\n* doc: update ssh_adapter.md #5560 (@aymanbagabas)\n* track: don't modify `.gitattributes` with `--dry-run` #5559 (@bk2204)\n* Update project home page URL in Linux builds and remove unused spec files #5551 (@chrisd8088)\n* Retrieve endpoint URL only once when checking standalone transfer adapter configurations #5550 (@chrisd8088)\n* ssh: Specifically designate a master multiplex connection #5537 (@KyleFromKitware)\n* Include reference specifier in unlock requests #5538 (@chrisd8088)\n* tq/transfer: copy Id and Token #5534 (@KyleFromKitware)\n* Mock time in copy callback log file test #5524 (@chrisd8088)\n* track: reject attempts to modify `.gitattributes` #5515 (@bk2204)\n* Fix a panic in the credential code #5490 (@bk2204)\n* Avoid modifying the mtime of empty files #5491 (@bk2204)\n* Make track handle backslashes correctly on Unix #5482 (@bk2204)\n* Print an error when pushing with no refs #5437 (@bk2204)\n\n### Misc\n\n* workflows: update to Go 1.22 #5650 (@bk2204)\n* Distro updates for v3.5 #5647 (@bk2204)\n* Use Azure Code Signing for Windows release binaries #5630 (@bk2204)\n* Fix flaky test `t-credentials.sh` #5616 (@bk2204)\n* t: pipe random data to `base64(1)` to be compatible with macOS #5614 (@chrisd8088)\n* Replace deprecated `io/ioutil` functions #5595 (@Juneezee)\n* t/t-path.sh: avoid flaky test setup failure on Windows due to new Go path security checks #5611 (@chrisd8088)\n* build(deps): bump golang.org/x/crypto from 0.14.0 to 0.17.0 #5591 (@dependabot[bot])\n* Update release documentation and changelog summary script for patch releases #5590 (@chrisd8088)\n* Update notarization to use `notarytool` #5554 (@bk2204)\n* lfs: avoid unnecessary byte/string conversion #5552 (@Juneezee)\n* build(deps): bump golang.org/x/net from 0.7.0 to 0.17.0 #5541 (@dependabot[bot])\n* Limit CopyCallbackFile to print every 200 ms #5504 (@cmaves)\n* Update to Go 1.21 #5487 (@chrisd8088)\n* Add installation note about restarting shells on Windows for PATH changes #5507 (@chrisd8088)\n* Remove unused Docker scripts and update README #5506 (@chrisd8088)\n* Remove old and unused release script #5500 (@chrisd8088)\n* Update and expand documentation of the Git LFS release process #5452 (@chrisd8088)\n* Update cobra to 1.7.0 #5444 (@QuLogic)\n* Add FAQ entries for TLS data #5446 (@bk2204)\n* Remove vendoring instructions from contributing docs #5443 (@QuLogic)\n* FAQ: add an entry about proxies #5445 (@bk2204)\n* tq/transfer_test.go: enable and fix all tests #5442 (@chrisd8088)\n* Add a single source of truth for distro info #5439 (@bk2204)\n\n## 3.4.0 (26 July 2023)\n\nThis release is a feature release which includes support for generating\nshell scripts for command-line tab-completion of Git LFS commands with\nthe new `git-lfs-completion(1)` command, providing multiple headers to Git\ncredential helpers (a new feature as of Git 2.41), and installing Git LFS\nwith a Git configuration file stored under the XDG configuration path.\n\nNote that this release will be made by a different member of the core\nteam than the person who performed many of the past releases, and thus\nthis release will be signed with a different OpenPGP key.  Please follow\n[the steps in the README to download all of the keys for the core\nteam](https://github.com/git-lfs/git-lfs#verifying-releases) to verify\nthis release.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @anihm136 for implementing shell completion script generation\n* @aymanbagabas for multiple fixes to our SSH and transfer queue code\n* @dscho for ensuring our Windows installer works on 32-bit systems\n* @dyrone for correcting an erroneous file name in our documentation\n* @jlosito for making sure our CI job actions are up to date\n* @nfgferreira for speeding up the track command on Windows\n* @ry167 for improving our Ubuntu installation instructions\n* @salvorizza for fixing a JSON bug in our unlock command\n* @slonopotamus for cleaning up accommodations for legacy Go versions\n* @steffen for improving our installation documentation\n\n### Features\n\n* Add support for `wwwauth[]` to credential helpers #5381 (@bk2204)\n* Add a `--file` option to install and uninstall #5355 (@bk2204)\n* Add shell completion generation #5311 (@anihm136)\n\n### Bugs\n\n* Handle local paths with trailing slashes #5402 (@bk2204)\n* Unlock by ID with JSON Flag returns empty array #5385 (@salvorizza)\n* Refactor macro attribute handling to prevent crashes with `--fixup` migration option #5382 (@chrisd8088)\n* locks: print warning about locking API to standard error #5350 (@bk2204)\n* Avoid needlessly spawning SSH connections with `git archive` #5309 (@bk2204)\n* standalone: print an error if the destination isn't a Git repository #5283 (@bk2204)\n* locks: ensure local locks are synced on error #5284 (@bk2204)\n* installer: let it work on 32-bit Windows again #5266 (@dscho)\n* fix(ssh): use /tmp to place control dir on darwin #5223 (@aymanbagabas)\n* commands: avoid remote connections in checkout #5226 (@bk2204)\n* fix(tq): stop adding transfers to queue after abort #5230 (@aymanbagabas)\n* fix: pure SSH list lock command name #5219 (@aymanbagabas)\n* git: match patterns, not file names, for tracked files #5423 (@bk2204)\n* Resolve git-lfs track slowness on Windows due to unneeded user lookup #5431 (@nfgferreira)\n\n### Misc\n\n* Update distributions #5392 (@bk2204)\n* workflows: remove refreshenv #5393 (@bk2204)\n* Refactor `GitScanner` and simplify implementation #5389 (@chrisd8088)\n* Ensure all logging tasks are closed and simplify log task dispatching #5375 (@chrisd8088)\n* FAQ: add entry on archiving subdirectories #5349 (@bk2204)\n* Drop pre-1.13 Go compatibility code #5364 (@slonopotamus)\n* Fix CI by enabling Git protocol v2 #5353 (@bk2204)\n* Clarify `git lfs migrate` handling of local and remote references #5327 (@chrisd8088)\n* Update to Go version 1.20 #5326 (@chrisd8088)\n* Remove stale video link #5325 (@chrisd8088)\n* Fix Windows CI with Go 1.20 #5317 (@bk2204)\n* Update Windows signing certificate hash #5300 (@chrisd8088)\n* t: avoid incorrect negated commands #5282 (@bk2204)\n* Update golang.org/x/text #5290 (@bk2204)\n* Improve error handling for pure SSH protocol #5063 (@bk2204)\n* workflow: use `choco install` #5281 (@bk2204)\n* Update Linux releases in Packagecloud publication script #5276 (@chrisd8088)\n* Simplify and deduplicate installation instructions #5260 (@steffen)\n* Make hooks refer to `core.hookspath` #5245 (@bk2204)\n* Update INSTALLING.md to fix ubuntu derivative command and allow easy install for some distros #5014 (@ry167)\n* Check for github action updates monthly #5228 (@jlosito)\n* Upgrade workflows to latest Ubuntu and Actions versions #5243 (@chrisd8088)\n* Upgrade GitHub Actions workflows to use `ruby/setup-ruby@v1` #5236 (@chrisd8088)\n* Add `git lfs migrate export` command examples to manual page #5239 (@chrisd8088)\n* Unset `GIT_TRACE` environment variable for Git commands in `Makefile` #5240 (@chrisd8088)\n* Clean up RPM builds and fix i686 RPM file names #5241 (@chrisd8088)\n* Add a FAQ entry on Jenkins problems #5177 (@bk2204)\n* Fix missing parameter in git lfs logs manual page #5414 (@chrisd8088)\n* proposals: fix filename typo #5425 (@dyrone)\n* Update shell tab-completion script support and add manual page #5429 (@chrisd8088)\n\n## 3.3.0 (30 November 2022)\n\nThis release is a feature release which includes package support for Red Hat\nEnterprise Linux 9 and compatible OSes, experimental support for multiple\nremotes, and some command-line helpers for `git lfs push`.\n\nIn this release, we no longer include vendored versions of our dependencies in\nthe repository or the tarballs.  These were a source of noise and bloat, and\nusers can easily download the required dependencies with Go itself.  Users who\nneed to continue to vendor the dependencies can use the `make vendor` target.\n\nIn addition, we've also switched the documentation to AsciiDoc from\nronn-flavoured Markdown and included the FAQ in the repository.  This means that\nthe manual pages now render properly in the GitHub web interface and it's also\nmuch easier to create additional formats, such as PDF, by leveraging the ability\nof Asciidoctor to convert to DocBook.\n\nIt should also be noted that `git lfs migrate import --everything` now processes\nall refs that aren't special to Git instead of just branches and tags.  This is\nwhat it was documented to do, but didn't, so we've fixed it.\n\nFinally, please note that future releases may be done by a different member of\nthe core team than many of the past releases, and thus may be signed by a\ndifferent OpenPGP key.  Please follow [the steps in the README to download all\nof the keys for the core\nteam](https://github.com/git-lfs/git-lfs#verifying-releases) to verify releases\nsuccessfully in the future.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @dhiwakarK for fixing a broken link\n* @dscho for improving our installer\n* @Leo1690 for speeding things up with sparse checkout\n* @pratap043 for proposing an extension to locking\n* @rcoup for fixing our Makefile and adding scripting features to `git lfs push`\n* @srohmen for adding support for alternative remotes\n* @WhatTheFuzz for improving our error messages\n* @wuhaochen for fixing a long-standing bug with `git lfs migrate import`\n\n### Features\n\n* Add the FAQ in the repository #5167 (@bk2204)\n* Add support for Rocky Linux 9 #5144 (@bk2204)\n* push: add ability to read refs/oids from stdin #5086 (@rcoup)\n* Allow alternative remotes to be handled by LFS #5066 (@srohmen)\n* Switch documentation to AsciiDoc #5054 (@bk2204)\n\n### Bugs\n\n* Handle macro attribute references with unspecified flag #5168 (@chrisd8088)\n* Fixed broken link for git-lfs-migrate #5153 (@dhiwakarK)\n* ssh: disable concurrent transfers if no multiplexing #5136 (@bk2204)\n* Fix setting commit & vendor variables via make #5141 (@rcoup)\n* ssh: don't leak resources when falling back to legacy protocol #5137 (@bk2204)\n* Bump gitobj to v2.1.1 #5130 (@bk2204)\n* tools: don't match MINGW as Cygwin #5106 (@bk2204)\n* installer: handle `BashOnly` Git for Windows gracefully #5048 (@dscho)\n* Change git-lfs migrate import --everything to migrate everything except for special git refs #5045 (@wuhaochen)\n\n### Misc\n\n* Use --sparse parameter for ls-files for performance optimization #5187 (@Leo1690)\n* Add information to ambiguous error message. #5172 (@WhatTheFuzz)\n* Distro update for v3.3.0 #5169 (@bk2204)\n* docs/man: clarify Git LFS setup instructions #5166 (@larsxschneider)\n* Update more stale comments relating to object scanning #5164 (@chrisd8088)\n* Update stale comments relating to object scanning and uploading #5163 (@chrisd8088)\n* script/cibuild: exclude icons from whitespace check #5142 (@bk2204)\n* Update to Go version 1.19 #5126 (@chrisd8088)\n* Drop vendoring #4903 (@bk2204)\n* Adding locking_notes.md #5079 (@pratap043)\n* t: set init.defaultBranch #5082 (@bk2204)\n* go.mod: require gopkg.in/yaml.v3 v3.0.1 #5033 (@bk2204)\n* script/upload: improve readability of asset verification #5032 (@bk2204)\n\n## 3.2.0 (25 May 2022)\n\nThis release is a feature release which includes support for machine-readable\nformats for a couple more commands, plus the ability to automatically merge\nLFS-based text files from the command-line.  It's likely that the merge driver\nwill see future improvements, but if you have feedback on the design, please use\nthe discussions feature.\n\nNote that our binary release archives no longer unpack into the current\ndirectory, and now contain a top-level directory just like the source archives\ndo.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @bbodenmiller for fixing the formatting in our manual pages\n* @breyed for fixing a typo in our manual pages\n* @btoll for improving our README\n* @rcoup for fixing our Accept header syntax\n* @vtbassmatt for documenting our deprecation of NTLM\n\n### Features\n\n* ls-files: add a --json option #5007 (@bk2204)\n* Add --json output for git lfs track #5006 (@bk2204)\n* Add a merge driver #4970 (@bk2204)\n* lfs: don't write hooks when they haven't changed #4935 (@bk2204)\n* Tarballs, not tarbombs #4980 (@bk2204)\n\n### Bugs\n\n* Apply several Makefile fixes for Windows #5016 (@bk2204)\n* git: don't panic on pkt-line without equals #4982 (@bk2204)\n* lfshttp: fix invalid Accept header syntax #4996 (@rcoup)\n* Grammar fix #4981 (@breyed)\n* Use `gitignore`-style path matching for additional commands #4951 (@chrisd8088)\n* Avoid pruning when identical files both match and do not match `lfs.fetchexclude` #4973 (@chrisd8088)\n* Apply `lfs.fetchexclude` filter to previous commits when pruning #4968 (@chrisd8088)\n* Update and correct several error message strings #4943 (@chrisd8088)\n* script/upload: correct RHEL 8 package repo #4936 (@bk2204)\n* lfs: add old hook content to the list of old hooks #4878 (@bk2204)\n* .github/workflows: install packagecloud gem #4873 (@bk2204)\n\n### Misc\n\n* Update distros for packagecloud.io #5010 (@bk2204)\n* lfshttp: log the Negotiate error on failure #5000 (@bk2204)\n* Build CI on Windows 2022 #4997 (@chrisd8088)\n* workflows: use ronn-ng #4992 (@bk2204)\n* Multiple hash support #4971 (@bk2204)\n* note deprecation of NTLM #4987 (@vtbassmatt)\n* Update to Go 1.18, drop older Go version support, and update modules and dependencies #4963 (@chrisd8088)\n* Update tests to check `prune` command excludes `lfs.fetchexclude` paths #4964 (@chrisd8088)\n* Add test to check `prune` command retains tagged unpushed objects #4962 (@chrisd8088)\n* Adjust test helpers and tests related to path filtering #4960 (@chrisd8088)\n* Include shell path in restricted `PATH` in credential helper path test #4959 (@chrisd8088)\n* Build test helper commands with `.exe` file extension on Windows #4954 (@chrisd8088)\n* Update Windows signing certificate SHA hash in `Makefile` #4946 (@chrisd8088)\n* remove unused `Pipe[Media]Command()` functions #4942 (@chrisd8088)\n* Makefile: remove legacy trimpath code #4938 (@bk2204)\n* add Inno Setup check of Git install paths and remove old uninstaller checks #4925 (@chrisd8088)\n* note `git lfs push --all` only pushes local refs in man page #4898 (@chrisd8088)\n* Build man pages into per-section subdirectories #4890 (@chrisd8088)\n* Call out destructive command in README #4880 (@btoll)\n* Improve formatting #4863 (@bbodenmiller)\n* docs/howto: remind core team member to check Actions workflows #4868 (@bk2204)\n* .github: fix syntax error in release workflow #4866 (@bk2204)\n\n## 3.1.4 (19 Apr 2022)\n\nThis release is a bugfix release to fix some problems during the build of\nv3.1.3.  There are otherwise no substantial changes from v3.1.3.\n\n### Misc\n\n* Use only Windows Server 2019 runners for CI in GitHub Actions #4883 (@chrisd8088)\n* remove unused `Pipe[Media]Command()` functions #4942 (@chrisd8088)\n\n## 3.1.3 (19 Apr 2022)\n\nThis release introduces a security fix for Windows systems, which has been\nassigned CVE-2022-24826.\n\nOn Windows, if Git LFS operates on a malicious repository with a `..exe` file as\nwell as a file named `git.exe`, and `git.exe` is not found in PATH, the `..exe`\nprogram will be executed, permitting the attacker to execute arbitrary code.\nSimilarly, if the malicious repository contains files named `..exe` and\n`cygpath.exe`, and `cygpath.exe` is not found in PATH, the `..exe` program will\nbe executed when certain Git LFS commands are run.\n\nThis security problem does not affect Unix systems.  This is the same issue as\nCVE-2020-27955 and CVE-2021-21237, but the fix for those issue was incomplete\nand certain options can still cause the problem to occur.\n\nThis occurs because on Windows, Go includes (and prefers) the current directory\nwhen the name of a command run does not contain a directory separator, and it\ncontinues to search for programs even when the specified program name is empty.\nThis has been solved by failing if the path is empty or not found.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @yuske for reporting this to us responsibly\n\n### Bugs\n\n* Report errors when finding executables and revise PATH search tests (@chrisd8088)\n\n### Misc\n\n* Update Windows signing certificate SHA hash in Makefile (@chrisd8088)\n\n## 3.1.2 (16 Feb 2022)\n\nThis is a bugfix release which fixes a bug in `git lfs install` and some issues\nin our CI release processes, including one that prevented arm64 packages for\nDebian 11 from being uploaded.\n\n### Bugs\n\n* lfs: add old hook content to the list of old hooks #4878 (@bk2204)\n\n### Misc\n\n* Revert \"Merge pull request #4795 from bk2204/actions-checkout-v2\" #4877 (@bk2204)\n* .github/workflows: install packagecloud gem #4873 (@bk2204)\n\n## 3.1.1 (14 Feb 2022)\n\nThis is a bugfix release which fixes a syntax error in the release workflow.\n\n### Misc\n\n* .github: fix syntax error in release workflow #4866 (@bk2204)\n\n## 3.1.0 (14 Feb 2022)\n\nThis release is a feature release which includes support for fallback from\nNegotiate to Basic authentication, new ARM64 packages for Debian 11, a new\nlocalization infrastructure, and improved netrc support, in addition to various\nbug fixes.  In addition, we've addressed a performance regression for `git lfs\nmigrate import` that was introduced in v3.0.2.\n\nAt the moment, there are no translations available, but if you are interested in\ncontributing to one, please reach out in an issue.  For compatibility with\nWindows and to retain the ability to have a single relocatable binary, the\ntranslations are included in the binary at build time.\n\nWe would like to extend a special thanks to the following open source\ncontributors:\n\n* @donno2048 for improving our error checking\n* @howardlyliao for improved netrc support\n* @HermannDppes for improving our large file warning on Windows\n* @rex4539 for fixing various typos throughout our codebase\n\n### Features\n\n* Fall back from Negotiate to Basic #4815 (@bk2204)\n* Add basic support for localization #4729 (@bk2204)\n* Add support for ARM64 Debian packages #4728 (@bk2204)\n* netrc: consider same machine may have different login names #4726 (@howardlyliao)\n\n### Bugs\n\n* smudge: honor GIT_LFS_SKIP_SMUDGE with checkout-index #4860 (@bk2204)\n* fix `git lfs fsck --objects A..B` handling and drop all left/right ref terminology #4859 (@chrisd8088)\n* halt migration when `.gitattributes` symbolic link encountered #4849 (@chrisd8088)\n* fix merging of `.gitattributes` with execute file mode during migration #4835 (@chrisd8088)\n* Fix migrate import speed regression #4813 (@bk2204)\n* Fix typos #4806 (@rex4539)\n* Move `err` checking to before the value was used #4776 (@donno2048)\n* migrate import: don't allow path filters with --above #4771 (@bk2204)\n* avoid panic on checkout with `--to` but no path, and update checkout manual #4766 (@chrisd8088)\n* creds: gracefully handle lack of askpass helper #4759 (@bk2204)\n* post-checkout: don't modify permissions of untracked files #4760 (@bk2204)\n* use gitattributes filepath matching for migrate filter options #4758 (@chrisd8088)\n* Avoid errors in git lfs env #4713 (@bk2204)\n* fs: specify a file as existing if it's empty #4654 (@bk2204)\n* Fix bound for largefilewarning #4633 (@HermannDppes)\n\n### Misc\n\n* build missing man pages and correct HTML renderings #4851 (@chrisd8088)\n* Update and mark message strings for translation #4846 (@chrisd8088)\n* Mark almost all strings for translation #4781 (@bk2204)\n* .github/workflows: switch to actions/checkout@v2 #4795 (@bk2204)\n* script/packagecloud: update for latest distros #4794 (@bk2204)\n* filter-process: don't print large file warning on fixed versions #4768 (@bk2204)\n* ssh: avoid using -- where possible #4741 (@bk2204)\n* vendor,go.*: update x/crypto and dependencies #4738 (@chrisd8088)\n* Stop supporting Go older than 1.13 #4641 (@bk2204)\n\n## 3.0.2 (28 Oct 2021)\n\nThis release is a bugfix release which fixes a variety of problems seen since\n3.0.0, including problems with empty files, `git lfs fsck --pointers`, and\nthe testsuite.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @fh1ch for patches to make things work better on Alpine Linux\n* @pyckle for fixing our handling of filenames in `git lfs migrate import`\n* @ycongal-smile for fixing `git lfs migrate import` with similarly named files\n\n### Bugs\n\n* Fix two types of misdetection in git lfs fsck #4697 (@bk2204)\n* lfs: don't flag non-LFS files as invalid pointers #4691 (@bk2204)\n* git: honor GIT_OBJECT_DIRECTORY #4686 (@bk2204)\n* migrate: properly escape blob filenames #4683 (@pyckle)\n* ls-files: don't process empty files as pointers #4681 (@bk2204)\n* Call migrate() BlobFn on every blob #4671 (@ycongal-smile)\n* Correct t-lock regular expression to be musl compatible #4673 (@fh1ch)\n\n### Misc\n\n* Allow git-lfs-transfer integration tests to be skipped #4677 (@fh1ch)\n* Make CI environment GIT prefix grep more specific #4678 (@fh1ch)\n\n## 3.0.1 (28 Sep 2021)\n\nThis release is a bugfix release which fixes the Windows ARM64 build process and\naddresses a regression in support for empty files in pull and fetch.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @dennisameling for fixing support for Windows on ARM64\n\n### Bugs\n\n* Fix Windows arm64 release #4647 (@dennisameling)\n* fs: specify a file as existing if it's empty #4654 (@bk2204)\n\n## 3.0.0 (24 Sep 2021)\n\nThis release is a major new release and introduces several new features, such as\na pure SSH-based protocol, packages for several new OS versions, support for\nARM64 Windows, Git-compatible pattern matching, and locking multiple files on\nthe command line, among other items.\n\nWhen connecting over SSH, the first attempt will be made to use\n`git-lfs-transfer`, the pure SSH protocol, and if it fails, Git LFS will fall\nback to the hybrid protocol using `git-lfs-authenticate`.  Note that no major\nforges are known to support the pure SSH protocol at this time.\n\nBecause it is a major release, we've made some backwards-incompatible changes.\nA (possibly incomplete) list of them is as follows:\n\n* NTLM support has been completely removed, since nobody volunteered to fix\n  issues in it.  Users are advised to use Kerberos or Basic authentication\n  instead.\n* When using an SSH URL (that is, the syntax starting with `ssh://`), the\n  leading slash is not stripped off when invoking `git-lfs-authenticate` or\n  `git-lfs-transfer`.  This is compatible with the behavior of Git when invoking\n  commands over SSH.\n* `git lfs fsck` now additionally checks that pointers are canonical and that\n  files that are supposed to be LFS files actually are.  It also exits nonzero\n  if any problem is found.\n* Pattern matching should be stricter and should either match the behavior of\n  `.gitattributes` or `.gitignore`, as appropriate.  Deviations from Git's\n  behavior will henceforth be treated as bugs and fixed accordingly.\n* Git LFS will now write a Git LFS repository format version into the\n  repository.  This is designed to allow future extension with incompatible\n  changes.  Repositories without this version will be assumed to be version 0.\n  Note that this is different from, but modeled on, Git's repository format\n  version.\n* `git lfs lock` and `git lfs unlock` now handle multiple pathname arguments and\n  the JSON format has changed to handle multiple responses.\n* The Go package name now contains a version number.  This should have no effect\n  on users because we don't provide a stable Go ABI.\n* Empty components in `PATH` are no longer treated as the current directory on\n  Windows because unintentionally having such empty components is common and the\n  behavior was surprising.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @codykrieger for ensuring that we process includes correctly\n* @corngood for fixing a hang in prune\n* @dennisameling for adding support for Windows on ARM64\n* @fh1ch for fixing our 429 handling\n* @geki-yaba for fixing problems with askpass on Cygwin\n* @gison93 for fixing a bug in our documentation\n* @jvimr for ensuring our Debian packages are built properly\n* @opohorel for ensuring our copyright notices were up to date\n* @rhansen for fixing systems where / is a repository\n* @sergiou87 for improving support for cross builds\n* @slonopotamus for improving our error handling\n* @stanhu for improving our handling of invalid OIDs\n* @Timmmm for improving our support of .lfsconfig\n* @tklauser for avoiding the need for cgo on macOS\n\n### Features\n\n* Advertise hash algorithm supported in batch request #4624 (@bk2204)\n* Bump package version to v3 #4611 (@bk2204)\n* Update OS versions #4610 (@bk2204)\n* Add support for Debian 11 #4592 (@bk2204)\n* Support for locking and unlocking multiple files #4604 (@bk2204)\n* Add support for Windows ARM64 #4586 (@dennisameling)\n* LFS repository format version #4552 (@bk2204)\n* Pure SSH-based protocol #4446 (@bk2204)\n* Make fsck able to check for invalid pointers #4525 (@bk2204)\n* Add --fixup option to migrate info command #4501 (@chrisd8088)\n* Allow reporting of LFS pointers separately in migrate info command #4436 (@chrisd8088)\n* Add config variables for default remotes #4469 (@bk2204)\n* Make lfshttp package builds more portable #4476 (@bk2204)\n* Mark skipdownloaderrors as safe #4468 (@Timmmm)\n* Make migrate commands default to preserving uncommitted changes #4454 (@chrisd8088)\n* Darwin ARM64 support #4437 (@bk2204)\n* tools: implement cloneFileSyscall on darwin without cgo #4387 (@tklauser)\n* prune: add options to be more aggressive about pruning #4368 (@bk2204)\n\n### Bugs\n\n* corrected debian 11 & 12 derived variants #4622 (@jvimr)\n* urlconfig: anchor regexp for key matching #4598 (@bk2204)\n* filepathfilter: always use Git-compatible pattern matching #4556 (@bk2204)\n* debian and rpm: Pass `--skip-repo` to `install` and `uninstall` #4594 (@rhansen)\n* Fix hang in prune #4557 (@corngood)\n* Disable ANSI color codes while log parsing and anchor diff regular expressions #4585 (@chrisd8088)\n* Fix 429 retry-after handling for LFS batch API endpoint #4573 (@fh1ch)\n* go.mod: bump gitobj to v2.0.2 #4555 (@bk2204)\n* Fix locking with multiple paths and absolute paths #4535 (@bk2204)\n* locking: avoid nil pointer dereference with invalid response #4509 (@bk2204)\n* migrate import: make --above affect only individual files #4512 (@bk2204)\n* fs: be a little less aggressive with cleanup #4490 (@bk2204)\n* Fix downloadFile in gitfilter_smudge.go to actually propagate all errors #4478 (@slonopotamus)\n* Translate Cygwin path patches for askpass helper and cert dir/file #4473 (@geki-yaba)\n* Avoid panic on SIGINT by skipping cleanup when config uninitialized #4463 (@chrisd8088)\n* Parse stash log entries parsimonously in prune command #4449 (@chrisd8088)\n* docs: note that -I and -X override configuration settings #4442 (@bk2204)\n* Make all checks of blobSizeCutoff consistent #4435 (@chrisd8088)\n* Fix up handling of the \"migrate info\" command's --top option #4434 (@chrisd8088)\n* Tighten LFS pointer regexp #4421 (@stanhu)\n* invoke git-config with --includes to ensure it always evaluates `include.*` directives #4420 (@codykrieger)\n* Canonicalize Windows paths like Git does #4418 (@bk2204)\n* lfsapi: don't warn about duplicate but identical aliases #4413 (@bk2204)\n* lfs: don't invoke diff drivers when pruning repositories #4407 (@bk2204)\n* Consider scheme of request URL, not proxy URL, when choosing proxy #4396 (@bk2204)\n* Makefile: allow make release to be run twice in a row #4344 (@bk2204)\n* Makefile: don't fail the second time macOS builds are built #4341 (@bk2204)\n\n### Misc\n\n* subprocess: don't treat empty PATH component as . on Windows #4603 (@bk2204)\n* Switch from which to command -v #4591 (@bk2204)\n* Bump Go to 1.17 #4584 (@dennisameling)\n* Add cautions about unstable Go API and fix GPG key link #4582 (@chrisd8088)\n* Update go.mod module path with explicit v2 #4575 (@chrisd8088)\n* Drop unused ClearTempStorage() transfer adapter method and tune stale comments #4554 (@chrisd8088)\n* README: improve steps for building from source #4527 (@bk2204)\n* Update license year #4513 (@opohorel)\n* docs/man: add note re post-import use of checkout #4504 (@chrisd8088)\n* Bump transitive dependencies #4502 (@bk2204)\n* script/packagecloud: update distros #4494 (@bk2204)\n* Use host architecture and OS when running `go generate` #4492 (@sergiou87)\n* Bump go-spnego to the latest version #4482 (@bk2204)\n* Update git-lfs-migrate man page and add description section #4458 (@chrisd8088)\n* update x/text and dependencies #4455 (@opohorel)\n* Use blobSizeCutoff in clean pointer buffer length check #4433 (@chrisd8088)\n* tools: unset XDG_CONFIG_HOME for filetools test #4432 (@chrisd8088)\n* vendor,go.{mod,sum}: update x/net and dependencies #4398 (@chrisd8088)\n* Remove NTLM #4384 (@bk2204)\n* gitobj 2.0.1 #4348 (@bk2204)\n* Fix numbered list in git lfs examples #4347 (@gison93)\n* Add test for download gzip transport compression #4345 (@bk2204)\n\n## 2.13.3 (26 Mar 2021)\n\nThis release fixes two bugs that caused `git lfs prune` to hang, updates some\ndependencies to versions which lack a security issue (which did not affect Git\nLFS), and adds support for ARM64 builds on macOS.\n\n### Bugs\n\n* lfs: don't invoke diff drivers when pruning repositories #4407 (@bk2204)\n* Parse stash log entries parsimonously in prune command #4449 (@chrisd8088)\n\n### Misc\n\n* Darwin ARM64 support #4437 (@bk2204)\n* vendor,go.{mod,sum}: update x/net and dependencies #4398 (@chrisd8088)\n\n## 2.13.2 (13 Jan 2021)\n\nThis release introduces a security fix for Windows systems, which has been\nassigned CVE-2021-21237.\n\nOn Windows, if Git LFS operates on a malicious repository with a git.bat or\ngit.exe file in the current directory, that program is executed, permitting the\nattacker to execute arbitrary code.  This security problem does not affect Unix\nsystems.  This is the same issue as CVE-2020-27955, but the fix for that issue\nwas incomplete and certain options can still cause the problem to occur.\n\nThis occurs because on Windows, Go includes (and prefers) the current directory\nwhen the name of a command run does not contain a directory separator.  This has\nbeen solved by always using PATH to pre-resolve paths before handing them to Go.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @Ry0taK for reporting this to us responsibly\n\n### Bugs\n\n* Use subprocess for invoking all commands (@bk2204)\n\n## 2.13.1 (11 Dec 2020)\n\nThis release fixes a bug in our build tooling that prevents our release process\nfrom working properly.  This release is otherwise identical to 2.13.0.\n\n### Misc\n\n* Makefile: don't fail the second time macOS builds are built #4341 (@bk2204)\n\n## 2.13.0 (10 Dec 2020)\n\nThis release introduces several new features, such as the `--above` option to\n`git lfs migrate import` and support for `socks5h` proxies.  In addition, many\nbugs have been fixed and several miscellaneous fixes have been included.\n\nUnless someone steps up to fix and maintain NTLM support, this will be the last\nGit LFS release to support NTLM.  See #4247 for more details.  Note that Git LFS\nsupports Kerberos as well, which is far more secure and may be a viable\nreplacement in many situations.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @EliRibble for adding support for the `--above` option to `git lfs migrate import`\n* @andrewshadura for adding support for the `GIT_LFS_SKIP_PUSH` environment variable\n* @sinbad for fixing problems with retaining objects used by stashes\n* @tklauser for cleaning up our use of error constants in the code\n\n### Features\n\n* Add --above parameter to 'migrate import'. #4276 (@EliRibble)\n* Add GIT_LFS_SKIP_PUSH to allow skipping the pre-push hook #4202 (@andrewshadura)\n* lfshttp: add support for socks5h proxies #4259 (@bk2204)\n* Add manual pages to release assets #4230 (@bk2204)\n* Honor GIT_WORK_TREE #4269 (@bk2204)\n\n### Bugs\n\n* Make git lfs migrate import handle missing extensions #4318 (@bk2204)\n* fs: don't panic when using a too-short object ID to push #4307 (@bk2204)\n* Fix pattern matching for .gitattributes #4301 (@bk2204)\n* config: map missing port to default for HTTP key lookups #4282 (@bk2204)\n* tools: use IoctlFileClone from golang.org/x/sys/unix #4261 (@tklauser)\n* tools/util_darwin.go: Remove use of direct syscalls #4251 (@stanhu)\n* tools: always force a UTF-8 locale for cygpath #4231 (@bk2204)\n* prune: fix deleting objects referred to by stashes #4209 (@sinbad)\n\n### Misc\n\n* migrate import: warn about refs on case insensitive file systems #4332 (@larsxschneider)\n* Drop obsolete OS support #4328 (@bk2204)\n* tools: use ERROR_SHARING_VIOLATION const from golang.org/x/sys/windows #4291 (@tklauser)\n* pull: gracefully handle merge conflicts #4289 (@bk2204)\n* script/upload: avoid using Ruby's URI.escape #4266 (@bk2204)\n* add documentation of security bug report process #4244 (@chrisd8088)\n\n## 2.12.1 (4 Nov 2020)\n\nThis release introduces a security fix for Windows systems, which has been\nassigned CVE-2020-27955.\n\nOn Windows, if Git LFS operates on a malicious repository with a git.bat or\ngit.exe file in the current directory, that program is executed, permitting the\nattacker to execute arbitrary code.  This security problem does not affect Unix\nsystems.\n\nThis occurs because on Windows, Go includes (and prefers) the current directory\nwhen the name of a command run does not contain a directory separator.  This has\nbeen solved by always using PATH to pre-resolve paths before handing them to Go.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @dawidgolunski for reporting this to us responsibly\n\n### Bugs\n\n* subprocess: avoid using relative program names (@bk2204)\n\n## 2.12.0 (1 Sep 2020)\n\nThis release introduces several new features, such as support for the SHA-256\nrepositories coming in a future version of Git, restored support for Go 1.11,\nthe ability to read the contents of .lfsconfig from the repository, signed and\nnotarized binaries on macOS, and pre-built 32-bit ARM binaries on Linux.  In\naddition, several bugs have been fixed and miscellaneous fixes included.\n\nNote that macOS releases are now shipped as zip files, not tarballs, since it is\nnot possible to notarize tarballs.  macOS releases are now also built on macOS,\nso `git lfs dedup` should now function.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @saracen for adding support for ARM binaries\n* @mversluys for improving locking support\n* @cccfeng for updating our documentation to make it more readable\n* @bluekeyes for improving performance and tracing\n* @gertcuykens for adding missing parts of our documentation\n\n### Features\n\n* config: optionally read .lfsconfig from the repository #4200 (@bk2204)\n* Support SHA-256 repositories #4186 (@bk2204)\n* allow Go 1.11 builds by using WaitStatus.ExitStatus() #4183 (@chrisd8088)\n* add --worktree option to install and uninstall commands #4159 (@chrisd8088)\n* Sign and notarize binaries on macOS #4143 (@bk2204)\n* Makefile: add linux arm build and release targets #4126 (@saracen)\n* Allow locking and unlocking non-existent files #3992 (@mversluys)\n\n### Bugs\n\n* docs/api/locking: add an explicit <br> #4208 (@cccfeng)\n* Fix hang when the user lacks permissions #4207 (@bk2204)\n* Don't mark unlocked files that aren't lockable as read-only #4171 (@bk2204)\n* locking: make patterns with slashes work on Windows #4139 (@bk2204)\n* git: consider full refspec when determining seen refs #4133 (@bk2204)\n\n### Misc\n\n* Fix Windows CI #4199 (@bk2204)\n* Fix testsuite when working with non-master default branch #4174 (@bk2204)\n* git: improve performance of remote ref listing #4176 (@bluekeyes)\n* subprocess: trace all command execution #4175 (@bluekeyes)\n* Update git-lfs-migrate.1.ronn #3869 (@gertcuykens)\n* t: use repo v1 with extensions #4177 (@bk2204)\n* Makefile: ensure temp Go modules can be deleted #4157 (@chrisd8088)\n* Improve test suite robustness via environment #4132 (@bk2204)\n\n## 2.11.0 (8 May 2020)\n\nThis release introduces several new features, such as better support for unnamed\nlocal paths and URLs as remotes, support for `submodule.recurse`, exponential\nbackoff on failure, and support for renegotiation.  In addition, numerous bugs\nhave been fixed and miscellaneous issues have been addressed.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @bluekeyes for adding support for exponential backoff\n* @pluehne for adding support for `submodule.recurse`\n* @Electric26 for fixing the default behavior of a prompt\n* @nataliechen1 for fixing certain upload retry failures\n* @shalashik for fixing a panic during cherry-pick\n* @swisspol for updating our documentation to reflect supported `.lfsconfig`\n  keys\n* @dan2468 for updating the copyright year\n\n### Features\n\n* Allow literal local paths as remotes #4119 (@bk2204)\n* pre-push: find named remote for URL if possible #4103 (@bk2204)\n* tq: add exponential backoff for retries #4097 (@bluekeyes)\n* migrate import: set text to unspecified for excluded fields #4068 (@bk2204)\n* Update list of distros for packagecloud.io #4080 (@bk2204)\n* lfshttp: allow renegotiation #4066 (@bk2204)\n* Support submodule.recurse = true #4063 (@pluehne)\n* add man page for the post-commit hook command #4052 (@chrisd8088)\n* Add an option to control warning about files larger than 4 GiB #4009 (@bk2204)\n\n### Bugs\n\n* commands/command_migrate.go: fix bug #4116 (@Electric26)\n* git: avoid \"bad object\" messages when force-pushing #4102 (@bk2204)\n* git: avoid trying to rewrite remote tags as remote branches #4096 (@bk2204)\n* make Go tests run consistently using local binary #4084 (@chrisd8088)\n* commands: don't honor lfs.fetch* for ls-files #4083 (@bk2204)\n* commands: print help output with --help #4059 (@bk2204)\n* fail dedup command with explanation when LFS extensions configured #4045 (@chrisd8088)\n* fix upload retry 'file already closed' issue' #4042 (@nataliechen1)\n* commands/command_filter_process: cherry-pick of several commits cause panic error #4017 (@shalashik)\n* Check error when creating local storage directory #4016 (@bk2204)\n* track: detect duplicate patterns with --filename #4000 (@bk2204)\n\n### Misc\n\n* Removed lfs.extension.* from list of supported keys for .lfsconfig #4044 (@swisspol)\n* Tidy modules #4035 (@bk2204)\n* README: explain how to verify releases #4022 (@bk2204)\n* docs: document git lfs migrate --yes #4023 (@bk2204)\n* Stop using cgo on amd64 Linux #4026 (@bk2204)\n* updated copyright year #3995 (@dan2468)\n\n## 2.10.0 (21 January 2020)\n\nThis release introduces several new features, such as support for local paths in\nremotes, Kerberos support, and official binaries for S390x and little-endian\n64-bit PowerPC systems.  In addition, numerous bugs have been fixed and\nmiscellaneous issues have been addressed.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @ganadist for fixing a bug in the output of `git lfs env`\n* @exceed-alae for fixing a possible nil pointer dereference\n* @slonopotamus for improvements to Windows support and code cleanups\n* @nataliechen1 for fixing a data race\n* @ssgelm for writing and updating the code to use a new cookie jar parser\n* @austintraver for improving the output of `git lfs status`\n* @nikola-sh for improving option parity with Git\n* @alrs for fixing several error checks in the testsuite\n* @pluehne for improving our support for uncommon references\n\n### Features\n\n* Optimize pushes for multiple refs #3978 (@bk2204)\n* Include ppc64le and s390x Linux builds in releases #3983 (@bk2204)\n* Kerberos (SPNEGO) support for HTTP #3941 (@bk2204)\n* Add support for local paths #3918 (@bk2204)\n* Allow specifying HTTP version to use #3887 (@bk2204)\n\n### Bugs\n\n* t-duplicate-oids: use correct awk indexing #3981 (@bk2204)\n* Improved proxy support #3972 (@bk2204)\n* install: don't print error if run outside repository #3969 (@bk2204)\n* debian: bump version of golang-go #3959 (@bk2204)\n* lfshttp: Set valid default value for lfs.concurrenttransfers #3949 (@ganadist)\n* Add nil-check on defer block of DoTransfer() #3936 (@exceed-alae)\n* Retry batch failures #3930 (@bk2204)\n* rpm: use old setup code on CentOS 7 #3938 (@bk2204)\n* Interpret relative hook paths as relative to working tree #3926 (@bk2204)\n* Handle missing cygpath gracefully #3910 (@bk2204)\n* Update index before showing status #3921 (@bk2204)\n* Honor lfs.url when deciding on transfer adapters #3905 (@bk2204)\n* Implement retry logic to fix LFS storage race conditions on Windows #3890 (@slonopotamus)\n* Avoid hang when using git hash-object --stdin --path #3902 (@bk2204)\n* synchronize access to netrcCredentialHelper.skip #3896 (@nataliechen1)\n\n### Misc\n\n* Improve license files #3973 (@bk2204)\n* Add CI link to CI badge in README #3960 (@slonopotamus)\n* Clarify output shown by `git lfs status` #3953 (@austintraver)\n* Revert \"ci: force Windows Git version to 2.22.0\" #3903 (@bk2204)\n* Better document pointer format constraints #3944 (@bk2204)\n* Don't abort with newer Git when in a bare repo #3940 (@bk2204)\n* Fix more Linux package issues #3932 (@bk2204)\n* docs: explain shell metacharacters better #3920 (@bk2204)\n* Reset the text attribute on export #3913 (@bk2204)\n* Support schannel ssl backend #3868 (@nikola-sh)\n* Allow migrate export to handle non-pointer files gracefully #3911 (@bk2204)\n* git/gitattr: fix dropped test errors #3904 (@alrs)\n* Accept all local references with git lfs push #3876 (@pluehne)\n* Drop pre-1.6 Go compatibility code #3897 (@slonopotamus)\n* tools/kv: Fix dropped test error #3882 (@alrs)\n* Use different parser for cookiejar files #3886 (@ssgelm)\n* Stop replacing files in LFS storage when downloading them concurrently on Windows #3880 (@slonopotamus)\n* Fix error strings to follow Go guidelines #3871 (@slonopotamus)\n* Miscellaneous release fixes #3866 (@bk2204)\n\n## 2.9.2 (12 December 2019)\n\nThis release fixes a few regressions, such as a possible nil pointer\ndereference, a failure to retry batch requests, and a bug where repositories\ncould fail to be detected on Windows.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @exceed-alae for fixing a possible nil pointer dereference\n\n### Bugs\n\n* Add nil-check on defer block of DoTransfer() #3936 (@exceed-alae)\n* Retry batch failures #3930 (@bk2204)\n* rpm: use old setup code on CentOS 7 #3938 (@bk2204)\n* Handle missing cygpath gracefully #3910 (@bk2204)\n\n### Misc\n\n* Don't abort with newer Git when in a bare repo #3940 (@bk2204)\n* Fix more Linux package issues #3932 (@bk2204)\n\n## 2.9.1 (25 November 2019)\n\nThis release fixes a few regressions, such as the ability to use HTTP/1.1 when\nrequired, addresses a race condition, and switches the cookie jar parser to\nsomething that's easier for distributions to package.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @nataliechen1 for fixing a data race\n* @ssgelm for writing and updating the code to use a new cookie jar parser\n\n### Features\n\n* Allow specifying HTTP version to use #3887 (@bk2204)\n\n### Bugs\n\n* synchronize access to netrcCredentialHelper.skip #3896 (@nataliechen1)\n* Fix several causes of CI problems #3878 (@bk2204)\n* Miscellaneous release fixes #3866 (@bk2204)\n\n### Misc\n\n* Build artifacts during CI for easier testing #3892 (@bk2204)\n* Use different parser for cookiejar files #3886 (@ssgelm)\n\n## 2.9.0 (17 October 2019)\n\nThis release adds support for DragonFly BSD, adds a new `git lfs dedup` command\nto save space if the file system supports it, adds support for file URLs,\nimproves the performance when walking the repository, contains improvements\nto use HTTP/2 when available and cookies when required, and numerous other bug\nfixes, features, and modifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @pluehne for adding support for fetching the history of specific refs\n* @kupson for adding cookie support\n* @liweitianux for adding Dragonfly BSD support\n* @kazuki-ma for implementing de-duplication support\n* @dvdveer for adding range support to ls-files\n* @dyrone, @pmeerw, @yamiacat, and @kittenking for cleaning up some documentation issues\n* @slonopotamus for improving concurrent downloads\n* @nataliechen1 for fixing remote names with dots\n* @jw3 for removing excessive logging\n* @SeamusConnor for significantly improving performance when walking the repository\n\n### Features\n\n* Support fetching entire history of specific refs #3849 (@pluehne)\n* Add support for CentOS 8 #3854 (@bk2204)\n* Let git-lfs HTTPS transport send cookies #3825 (@kupson)\n* Support DragonFly BSD #3837 (@liweitianux)\n* HTTP/2 protocol support #3793 (@PastelMobileSuit)\n* Add clonefile on Windows over ReFS support. #3790 (@kazuki-ma)\n* Add new command `git lfs dedup` for file system level de-duplication. #3753 (@kazuki-ma)\n* Support GIT_ALTERNATE_OBJECT_DIRECTORIES #3765 (@bk2204)\n* ls-files: add support for reference range #3764 (@dvdveer)\n* Add several additional distros for packagecloud.io #3751 (@bk2204)\n* Provide an option to track to handle paths literally #3756 (@bk2204)\n* Optimize traversal of Git objects with URL remotes #3755 (@bk2204)\n* Support for file URLs #3748 (@bk2204)\n* Add clone file on MacOS X (darwin). #3745 (@kazuki-ma)\n\n### Bugs\n\n* Fix JSON comma problems in docs #3851 (@dyrone)\n* Remove redundant comma in batch.md #3841 (@dyrone)\n* More robust handling of parallel attempts to download the same file #3826 (@slonopotamus)\n* Update wildmatch to v1.0.4 #3820 (@bk2204)\n* Update to gitobj v1.4.1 #3815 (@bk2204)\n* Fix build error when cross-compiling #3817 (@bk2204)\n* Do not fail when multiple processes download the same lfs file #3813 (@slonopotamus)\n* Fix Remote Name Parsing Bug #3812 (@nataliechen1)\n* status: gracefully handle files replaced by directories #3768 (@bk2204)\n* Avoid deadlock when transfer queue fails #3800 (@bk2204)\n* Avoid a hang when Git is slow to provide us data #3806 (@bk2204)\n* tasklog/log.go: print \"done\" messages with a trailing period #3789 (@ttaylorr)\n* track: make --filename work with spaces #3785 (@bk2204)\n* Fix couple of 'the the' typos #3786 (@pmeerw)\n* Use an absolute path for smudging #3780 (@bk2204)\n* Fix URL parsing with Go 1.12.8 #3771 (@bk2204)\n* Fix remote autoselection when not on a branch #3759 (@bk2204)\n* Replace deprecated SEEK_SET, SEEK_CUR usage. #3739 (@kazuki-ma)\n* Do not log skipped checkouts to file #3736 (@jw3)\n* Fix typos across git-lfs repository #3728 (@kittenking)\n* Accept legacy Git SSH URLs #3713 (@bk2204)\n\n### Misc\n\n* ls-files --all man patch #3859 (@yamiacat)\n* Reworked to use git ls-files in some circumstances instead of FastWalkGitRepo #3823 (@SeamusConnor)\n* Clean up go.mod for Go 1.13 #3807 (@bk2204)\n* Use FICLONE instead of BTRFS_IOC_CLONE. #3796 (@kazuki-ma)\n* Remove unused pty code #3737 (@bk2204)\n\n## 2.8.0 (23 July 2019)\n\nThis release adds support for SOCKS proxies and Windows junctions, adds native\npackages for Debian 10 and similar distributions, reduces the number of\nsituations in which running `git lfs fetch --all` is required, improves\ncompatibility with Cygwin, and numerous other bug fixes and modifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @mstrap for adding support for listing lock owners\n* @h-hirokawa for adding support for rewriting object URLs\n* @slonopotamus for helping get our specs and implementation in sync\n* @ssgelm for improving our Debian packaging\n* @TBK for fixing a test\n* @hartzell for improving the compatibility of our Makefile\n* @AJH16 for implementing support for NTLM SSO\n\n### Features\n\n* Don't fail if we lack objects the server has #3634 (@bk2204)\n* Add support for Debian 10 #3697 (@bk2204)\n* Migrate tags pointing to other tags #3690 (@bk2204)\n* Add support for SOCKS proxies #3677 (@bk2204)\n* Allow vendors to customize the version info #3636 (@bk2204)\n* Wrap credential data to allow late credential prompting and update NTLM/SSPI to attempt SSPI login prior to prompting for credentials. #3617 (@AJH16)\n* git-lfs locks should optionally denote own locks #3569 (@mstrap)\n* tq/adapterbase: support rewriting href #3590 (@h-hirokawa)\n* Handle Windows junctions properly #3560 (@bk2204)\n* Allow specifying multiple insteadOf aliases #3550 (@bk2204)\n\n### Bugs\n\n* Make API documentation lock creation example less confusing #3648 (@bk2204)\n* Use a download token when searching locks #3715 (@bk2204)\n* Copy mode from original file when rewriting objects #3694 (@bk2204)\n* Don't recurse into submodules when walking repository #3686 (@bk2204)\n* Be more precise about what timestamps we accept #3680 (@bk2204)\n* Canonicalize common directory paths on Cygwin #3671 (@bk2204)\n* Ensure we always use correct Content-Type and Accept headers #3663 (@bk2204)\n* Fix 'owner' lock field not documented as optional #3651 (@slonopotamus)\n* Improve error handling in git lfs install #3624 (@bk2204)\n* Properly handle config options for URLs with upper case letters #3584 (@bk2204)\n* Detect Cygwin-style pipe TTYs as TTYs #3582 (@bk2204)\n* Set push remote for pre-push #3579 (@bk2204)\n* Switch from manually running go generate to using dh-golang to run it #3549 (@ssgelm)\n* Install worktree hooks in the proper directory #3547 (@bk2204)\n* Avoid nil pointer dereference on download failure #3537 (@bk2204)\n* Avoid nil pointer dereference on unexpected failure #3534 (@bk2204)\n\n### Misc\n\n* Update gitobj to v1.3.1 #3716 (@bk2204)\n* Use default line endings for core.autocrlf=input #3712 (@bk2204)\n* Fix CircleCI #3710 (@bk2204)\n* Vendor in gitobj v1.3.0 #3685 (@bk2204)\n* Update CONTRIBUTING #3673 (@bk2204)\n* Fix typo in t-locks.sh #3666 (@TBK)\n* Make 'locked_at' required in JSON schema #3655 (@slonopotamus)\n* Document a new batch error code #3639 (@bk2204)\n* Fix invalid JSON in LFS locking API documentation #3650 (@slonopotamus)\n* Fix invalid JSON in locking protocol docs #3644 (@slonopotamus)\n* Various release updates #3623 (@bk2204)\n* tq/adapterbase: fix typo enableHrefRerite to enableHrefRewrite #3594 (@h-hirokawa)\n* Use git-lfs version of go-ntlm #3588 (@bk2204)\n* Log test server standard error to log file #3577 (@bk2204)\n* Don't set -extldflags unless LDFLAGS has a value #3545 (@hartzell)\n* Retry on oversize file #3518 (@bk2204)\n* Fix asset uploading during releases #3538 (@bk2204)\n\n## 2.7.0 (15 February 2019)\n\nThis release adds better support for large files on 32-bit systems, adds\nattribute macros, fixes several file descriptor leaks, improves compatibility\nwith Git's configuration parsing, and includes numerous other bug fixes and\nmodifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @andyneff and @torbjoernk for updating our release targets\n* @zkry for work on rate-limiting\n* @Foxboron for work on reproducible builds\n* @mstrap for adding a release target for Linux arm64\n* @keiko713, @Erwyn, and @mloskot for improving our documentation\n* @QuLogic for fixing our tests under SELinux\n* @saracen and @steffengodskesen for improving our output handling\n* @mbsulliv for finding and fixing a bug where we ran out of file descriptors\n\n### Features\n\n* Add sles 15 support #1055 #3515 (@andyneff)\n* docs/man/git-lfs-config.5.ronn: document GIT_LFS_SKIP_SMUDGE #3509 (@ttaylorr)\n* commands/command_pointer.go: introduce `--check` option #3501 (@ttaylorr)\n* Makefile additions for reproducible builds and asmflags #3444 (@Foxboron)\n* locking: add flag to control modification of ignored files #3409 (@bk2204)\n* build package for Ubuntu 18.10 aka Cosmic #3402 (@torbjoernk)\n* Add support for retries with delays (ex. rate limiting) #3449 (@zkry)\n* Trim embedded paths out of binaries #3443 (@bk2204)\n* Ensure 32-bit Git LFS binaries can handle files larger than 4 GiB #3426 (@bk2204)\n* Support attribute macros #3391 (@bk2204)\n* tasklog: don't log progress status when stdout is not a tty #3349 (@steffengodskesen)\n* locking: cache JSON response from server #3253 (@mstrap)\n* tq: enable transfer debugging when GIT_CURL_VERBOSE is set #3341 (@bk2204)\n\n### Bugs\n\n* .circleci: don't use 'brew prune' #3514 (@ttaylorr)\n* t/t-smudge.sh: remove unnecessary test #3513 (@ttaylorr)\n* docs/man: fix inconsistency in 'git-lfs-ls-files(1)' #3496 (@ttaylorr)\n* lfshttp: close body on redirect #3479 (@bk2204)\n* status: handle deleted files gracefully #3482 (@bk2204)\n* Fix hang in prune with too few file descriptors #3460 (@bk2204)\n* Fix parameter name on List Locks API Documentation #3477 (@Erwyn)\n* TST: Trim security context when checking permissions. #3476 (@QuLogic)\n* command/env: ensure we honor lfs.url #3470 (@bk2204)\n* Fix swapped case sensitivity in patterns #3433 (@bk2204)\n* core.sharedRepository improvements for directories #3417 (@bk2204)\n* Update the doc of whitelisted .lfsconfig keys #3423 (@keiko713)\n* Rewrite URL config-matching #3392 (@PastelMobileSuit)\n* git: close blob objects when finished #3379 (@bk2204)\n* Avoid hang in repos cloned with --shared or --reference #3383 (@bk2204)\n* commands/command_status.go: require a working copy #3378 (@ttaylorr)\n* Fix test server API #3377 (@bk2204)\n* vendor: don't remove necessary dependencies #3356 (@ttaylorr)\n* filepathfilter: don't say file is both accepted and rejected #3360 (@bk2204)\n* Support pushInsteadOf aliases when determining endpoints #3353 (@bk2204)\n* Close attributes file #3347 (@mbsulliv)\n* Fix humanize's FormatByteRate() to work with 0s duration #3340 (@saracen)\n\n### Misc\n\n* Release automation #3510 (@bk2204)\n* docs/man: update `git-lfs-fetch(1)` manpage #3488 (@ttaylorr)\n* Update Cobra #3483 (@bk2204)\n* Run go generate only on Windows #3480 (@bk2204)\n* docs/man/git-lfs-migrate: make examples less confusing #3424 (@bk2204)\n* Modify logic of 'migrate info' to process extensionless files #3458 (@zkry)\n* Improve error message on missing object #3398 (@bk2204)\n* docs/man: suggest using Git configuration for LFS keys #3394 (@bk2204)\n* Document default value of migrate info --top=<n> #3387 (@mloskot)\n* Clarify minimum git version #3327 (@carlwgeorge)\n\n## 2.6.1 (3 December 2018)\n\nThis release contains miscellaneous bug fixes since v2.6.0. Most notably,\nrelease v2.6.1 restores support for alternate repositories, which was\naccidentally broken in v2.6.0.\n\n### Bugs\n\n* git: close blob objects when finished #3379 (@bk2204)\n* Avoid hang in repos cloned with --shared or --reference #3383 (@bk2204)\n* vendor: don't remove necessary dependencies #3356 (@ttaylorr)\n\n## 2.6.0 (1 November, 2018)\n\nThis release adds better support for redirecting network calls from a Git LFS\nAPI server to one that requires a different authentication mode, builds Git LFS\non Go 1.11, and numerous other bug fixes and modifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @andyneff for updating our release targets\n* @gtsiolis: for removing the deprecated `git lfs clone` from the listing of\n  supported Git LFS commands\n* @jsantell for fixing a formatting issue in the INCLUDE AND EXCLUDE man page\n  section\n* @mmlb for adding a release target for Linux arm64\n* @skashyap7 for adding the 'git lfs track -n'\n* @Villemoes: for modernizing the Git LFS installation procedure on Debian.\n\n### Features\n\n* commands: list explicitly excluded patterns separately #3320 (@bk2204)\n* Uninstall improvements #3326 (@bk2204)\n* config: honor GIT_AUTHOR_DATE and GIT_COMMITTER_DATE #3314 (@bk2204)\n* Add new `.netrc` credential helper #3307 (@PastelMobileSuit)\n* Honor umask and core.sharedRepository #3304 (@bk2204)\n* Support listing only filename tracked by git lfs using --name (-n) option\n  #3271 (@skashyap7)\n* all: use Go 1.11.1 in CI #3298 (@ttaylorr)\n* lfsapi/tq: Have DoWithAuth() caller determine URL Access Mode #3293\n  (@PastelMobileSuit)\n* commands: undeprecate checkout #3303 (@bk2204)\n* Checkout options for conflicts #3296 (@bk2204)\n* Makefile: build source tarballs for release #3283 (@bk2204)\n* Encrypted SSL key support #3270 (@bk2204)\n* Add support for core.sshCommand #3235 (@bk2204)\n* gitobj-based Object Scanner #3236 (@bk2204)\n* README.md: new core team members #3217 (@ttaylorr)\n* Add build and releases for linux arm64 #3196 (@mmlb)\n* Update packagecloud.rb #3210 (@andyneff)\n* all: use Go modules instead of Glide #3208 (@ttaylorr)\n* all: use Go 1.11 in CI #3203 (@ttaylorr)\n\n### Bugs\n\n* Fix formatting of INCLUDE AND EXCLUDE (REFS) #3330 (@jsantell)\n* go.sum: add missing entries #3319 (@bk2204)\n* Ensure correct syntax for commit headers in lfs migrate import #3313 (@bk2204)\n* Clean up trailing whitespace #3299 (@bk2204)\n* commands: unambiguously resolve remote references #3285 (@ttaylorr)\n* Expand custom transfer args by using the shell #3259 (@bk2204)\n* Canonicalize paths properly on Windows #3277 (@bk2204)\n* debian/prerm: add --system flag #3272 (@Villemoes)\n* t: make testsuite run under git rebase -x #3262 (@bk2204)\n* git/gitattr: parse 'set' attributes #3255 (@ttaylorr)\n* t: avoid panic in lfstest-customadapter #3243 (@bk2204)\n* t: avoid using shell variables in printf's first argument #3242 (@bk2204)\n* lfsapi: handle SSH hostnames and aliases without users #3230 (@bk2204)\n* commands/command_ls_files.go: ignore index with argument #3219 (@ttaylorr)\n* commands/command_migrate_import.go: install hooks #3227 (@ttaylorr)\n* t: mark test sources as .PHONY #3228 (@ttaylorr)\n* Pass GIT_SSH_COMMAND to the shell #3199 (@bk2204)\n* Tidy misformatted files #3202 (@bk2204)\n* config: expand core.hooksPath #3212 (@ttaylorr)\n* locks: manage write permissions of ignored files #3190 (@ttaylorr)\n\n### Misc\n\n* CONTRIBUTING.md: :nail_care: #3325 (@ttaylorr)\n* Update CONTRIBUTING #3317 (@bk2204)\n* go.mod: depend on tagged gitobj #3311 (@ttaylorr)\n* RFC: SSH protocol #3290 (@bk2204)\n* Remove `git lfs clone` command from man #3301 (@gtsiolis)\n* ROADMAP.md: use GitHub issues instead #3286 (@ttaylorr)\n* docs: add note about closing release milestone #3274 (@bk2204)\n* CI improvements #3268 (@bk2204)\n* docs/howto: document our release process #3261 (@ttaylorr)\n* Create new lfshttp package #3244 (@PastelMobileSuit)\n* CONTRIBUTING: update required go version #3232 (@PastelMobileSuit)\n* go.mod: use latest github.com/olekukonko/ts #3223 (@ttaylorr)\n* go.mod: pin github.com/git-lfs/wildmatch to v1.0.0 #3218 (@ttaylorr)\n* Update README.md #3193 (@srl295)\n\n## 2.5.2 (17 September, 2018)\n\n### Bugs\n\n* config: Treat [host:port]:path URLs correctly #3226 (@saschpe)\n* tq: Always provide a Content-Type when uploading files #3201 (@bk2204)\n* commands/track: Properly `lfs track` files with escaped characters in their\n  name #3192 (@leonid-s-usov)\n\n### Misc\n\n* packagecloud.rb: remove older versions #3210 (@andyneff)\n\n## 2.5.1 (2 August, 2018)\n\nThis release contains miscellaneous bug fixes since v2.5.0. Most notably,\nrelease v2.5.1 allows a user to disable automatic Content-Type detection\n(released in v2.5.0) via `git config lfs.contenttype false` for hosts that do\nnot support it.\n\n### Features\n\n* tq: make Content-Type detection disable-able #3163 (@ttaylorr)\n\n### Bugs\n\n* Makefile: add explicit rule for commands/mancontent_gen.go #3160 (@jj1bdx)\n* script/install.sh: mark as executable #3155 (@ttaylorr)\n* config: add origin to remote list #3152 (@PastelMobileSuit)\n\n### Misc\n\n* docs/man/mangen.go: don't show non-fatal output without --verbose #3168\n  (@ttaylorr)\n* LICENSE.md: update copyright year #3156 (@IMJ355)\n* Makefile: silence some output #3164 (@ttaylorr)\n* Makefile: list prerequisites for resource.syso #3153 (@ttaylorr)\n\n## 2.5.0 (26 July, 2018)\n\nThis release adds three new migration modes, updated developer ergonomics, and\na handful of bug fixes to Git LFS.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @calavera for fixing a broken Go test and adding support for custom\n  Content-Type headers in #3137 and #3138.\n* @cbuehlmann for adding support for encoded character names in filepaths via\n  #3093.\n* @larsxschneider for changing the default value of lfs.allowincompletepush in\n  #3109.\n* @NoEffex for supporting TTL in SSH-based authentication tokens via #2867.\n* @ssgelm for adding 'go generate' to our Debian packages via #3083.\n\n### Features\n\n* Makefile: replace many scripts with make targets #3144 (@ttaylorr)\n* {.travis,appveyor}.yml: upgrade to Go 1.10.3 #3146 (@ttaylorr)\n* t: run tests using prove #3125 (@ttaylorr)\n* commands/migrate: infer wildmatches with --fixup #3114 (@ttaylorr)\n* Retry SSH resolution 5 times #2934 (@stanhu)\n* Implement `migrate export` subcommand #3084 (@PastelMobileSuit)\n* Add `--no-rewrite` flag to `migrate import` command #3029 (@PastelMobileSuit)\n\n### Bugs\n\n* t: fix contains_same_elements() fn #3145 (@PastelMobileSuit)\n* commands: warn if working copy is dirty #3124 (@ttaylorr)\n* Ensure provided remote takes precedence over configured pushRemote #3139 (@PastelMobileSuit)\n* Fix proxy unit tests. #3138 (@calavera)\n* commands/command_migrate.go: loosen meaning of '--everything' #3121 (@ttaylorr)\n* lfsapi: don't query askpass for given creds #3126 (@PastelMobileSuit)\n* config/git_fetcher.go: mark 'lfs.allowincompletepush' as safe #3113 (@ttaylorr)\n* fs: support multiple object alternates #3116 (@ttaylorr)\n* commands/checkout: checkout over read-only files #3120 (@ttaylorr)\n* test/testhelpers.sh: look for 64 character SHA-256's #3119 (@ttaylorr)\n* config/config.go: case-insensitive error search #3098 (@ttaylorr)\n* Encoded characters in pathnames #3093 (@cbuehlmann)\n* Support default TTL for authentication tokens acquired via SSH #2867 (@NoEffex)\n* commands/status.go: relative paths outside of root #3080 (@ttaylorr)\n* Run `go generate` on commands in deb build #3083 (@ssgelm)\n* lfsapi: prefer proxying from gitconfig before environment #3062 (@ttaylorr)\n* commands/track: respect global- and system-level gitattributes #3076 (@ttaylorr)\n* git/git.go: pass --multiple to git-fetch(1) when appropriate #3063 (@ttaylorr)\n* commands/checkout: fix inaccurate messaging #3055 (@ttaylorr)\n* commands/migrate: do not migrate empty commits #3054 (@ttaylorr)\n* git/odb: retain trailing newlines in commit messages #3053 (@ttaylorr)\n\n### Misc\n\n* Set original file content type on basic upload. #3137 (@calavera)\n* README.md: Git for Windows ships LFS by default #3112 (@larsxschneider)\n* change lfs.allowincompletepush default from true to false  #3109 (@larsxschneider)\n* *: replace git/odb with vendored copy #3108 (@ttaylorr)\n* test/test-ls-files.sh: skip on CircleCI #3101 (@ttaylorr)\n* lfsapi/ssh.go: use zero-value sentinels #3099 (@ttaylorr)\n* README.md: add link to installation wiki page #3075 (@ttaylorr)\n* docs/man/git-lfs.1.ronn: update casing and missing commands #3059 (@ttaylorr)\n* commands/checkout: mark 'git lfs checkout' as deprecated #3056 (@ttaylorr)\n\n## 2.4.2 (28 May, 2018)\n\n### Bugs\n\n* lfsapi: re-authenticate HTTP redirects when needed #3028 (@ttaylorr)\n* lfsapi: allow unknown keywords in netrc file(s) #3027 (@ttaylorr)\n\n## 2.4.1 (18 May, 2018)\n\nThis release fixes a handful of bugs found and fixed since v2.4.0. In\nparticular, Git LFS no longer panic()'s after invalid API responses, can\ncorrectly run 'fetch' on SHAs instead of references, migrates symbolic links\ncorrectly, and avoids writing to `$HOME/.gitconfig` more than is necessary.\n\nWe would like to extend a \"thank you\" to the following contributors for their\ngracious patches:\n\n- @QuLogic fixed an issue with running tests that require credentials\n- @patrickmarlier made it possible for 'git lfs migrate import' to work\n  correctly with symbolic links.\n- @zackse fixed an inconsistency in `CONTRIBUTING.md`\n- @zanglang fixed an inconsistency in `README.md`\n\nGit LFS would not be possible without generous contributions from the\nopen-source community. For these, and many more: thank you!\n\n### Features\n\n* script/packagecloud.rb: release on Ubuntu Bionic #2961 (@ttaylorr)\n\n### Bugs\n\n* lfsapi: canonicalize extra HTTP headers #3010 (@ttaylorr)\n* commands/lock: follow symlinks before locking #2996 (@ttaylorr)\n* lfs/attribute.go: remove default value from upgradeables #2994 (@ttaylorr)\n* git: include SHA1 in ref-less revisions #2982 (@ttaylorr)\n* Do not migrate the symlinks to LFS objects. #2983 (@patrickmarlier)\n* commands/uninstall: do not log about global hooks with --local #2976 (@ttaylorr)\n* commands/run.go: exit 127 on unknown sub-command #2969 (@ttaylorr)\n* commands/{un,}track: perform \"prefix-agnostic\" comparisons #2955 (@ttaylorr)\n* commands/migrate: escape paths before .gitattributes  #2933 (@ttaylorr)\n* commands/ls-files: do not accept '--all' after '--' #2932 (@ttaylorr)\n* tq: prevent uint64 underflow with invalid API response #2902 (@ttaylorr)\n\n### Misc\n\n* test/test-env: skip comparing GIT_EXEC_PATH #3015 (@ttaylorr)\n* remove reference to CLA from contributor's guide #2997 (@zackse)\n* .gitattributes link is broken #2985 (@zanglang)\n* commands: make --version a synonym for 'version' #2968, #3017 (@ttaylorr)\n* test: ensure that git-mergetool(1) works with large files #2939 (@ttaylorr)\n* README.md: note the correct PackageCloud URL #2960 (@ttaylorr)\n* README.md: mention note about `git lfs track` retroactively #2948 (@ttaylorr)\n* README.md: reorganize into Core Team, Alumni #2941 (@ttaylorr)\n* README.md: :nail_care: #2942 (@ttaylorr)\n* circle.yml: upgrade to 'version: 2' syntax #2928 (@ttaylorr)\n* Use unique repo name for tests that require credentials. #2901 (@QuLogic)\n\n## 2.4.0 (2 March, 2018)\n\nThis release introduces a rewrite of the underlying file matching engine,\nexpands the API to include relevant refspecs for individual requests,\nstandardizes the progress output among commands, and more.\n\nPlease note: in the next MAJOR release (v3.0.0) the semantic meaning behind\n`--include` and `--exclude` flags will change. As the details of exactly which\nexisting patterns will no longer function as previously are known, we will\nindicate them here. Any `--include` or `--exclude` patterns used in v2.3.0 or\nearlier are expected to work as previously in this release.\n\nThis release would not be possible without the open-source community.\nSpecifically, we would like to thank:\n\n- @larsxschneider: for contributing fixes to the filter operation in `git lfs\n  fsck`, and `git lfs prune`, as well as the bug report leading to the\n  filepathfilter changes.\n- @yfronto: for adding new Linux release targets.\n- @stffabi: for adding support for NTLM with SSPI on Windows.\n- @jeffreydwalter: for fixing memory alignment issues with `sync/atomic` on\n  32-bit architectures.\n- @b4mboo: for adding a LFS configuration key to the list of safe configuration\n  options.\n\nWithout the aforementioned indviduals, this release would not have been\npossible. Thank you!\n\n### Features\n\n* __Support wildmatch-compliant options in `--include`, `--exclude`__\n  * filepathfilter: implement using wildmatch #2875 (@ttaylorr)\n  * test: add wildmatch migration tests #2888 (@larsxschneider, @ttaylorr)\n* __Expand the specification to include relevant refspecs__\n  * verify locks against each ref being pushed #2706 (@technoweenie)\n  * Batch send refspec take 2 #2809 (@technoweenie)\n  * Run 1 TransferQueue per uploaded ref #2806 (@technoweenie)\n  * Locks/verify: full refspec #2722 (@technoweenie)\n  * send remote refspec for the other lock commands #2773 (@technoweenie)\n* __Standardize progress meter output and implementation__\n  * tq: standardized progress meter formatting #2811 (@ttaylorr)\n  * commands/fetch: unify formatting #2758 (@ttaylorr)\n  * commands/prune: unify formatting #2757 (@ttaylorr)\n  * progress: use git/githistory/log package for formatting #2732 (@ttaylorr)\n  * progress: remove `*progress.Meter` #2762 (@ttaylorr)\n  * tasklog: teach `*Logger` how to enqueue new `*SimpleTask`'s #2767 (@ttaylorr)\n  * progress: remove spinner.go #2759 (@ttaylorr)\n* __Teach new flags, functionality to `git lfs ls-files`__\n  * commands: teach '--all' to `git lfs ls-files` #2796 (@ttaylorr)\n  * commands/ls-files: show cached, tree-less LFS objects #2795 (@ttaylorr)\n  * commands/ls-files: add --include, --exclude #2793 (@ttaylorr)\n  * commands/ls-files: add '--size' flag #2764 (@ttaylorr)\n* __Add new flags, functionality to `git lfs migrate`__\n  * commands/migrate: support '^'-prefix refspec in arguments #2785 (@ttaylorr)\n  * commands/migrate: add '--skip-fetch' for offline migrations #2738 (@ttaylorr)\n  * git: prefer sending revisions over STDIN than arguments #2739 (@ttaylorr)\n* __Release to new operating systems__\n  * release lfs for ubuntu/artful too #2704 (@technoweenie)\n  * Adding Mint Sylvia to packagecloud.rb script #2829 (@yfronto)\n* __New functionality in package `lfsapi`__\n  * NTLM authentication with SSPI on windows #2871 (@stffabi)\n  * lfsapi/auth: teach DoWithAuth to respect http.extraHeaders #2733 (@ttaylorr)\n  * add support for url-specific proxies #2651 (@technoweenie)\n* __Code cleanup in git.Config, package `localstorage`__\n  * Tracked remote #2700 (@technoweenie)\n  * Replace git.Config #2692 (@technoweenie)\n  * Replace localstorage #2689 (@technoweenie)\n  * Remove last global config #2687 (@technoweenie)\n  * Git config refactor #2676 (@technoweenie)\n\n### Bugs\n\n* all: fix 32-bit alignment issues with `sync/atomic` #2883 (@ttaylorr)\n* all: memory alignment issues on 32-bit systems. #2880 (@jeffreydwalter)\n* command/migrate: don't migrate remote references in bare repositories #2769 (@ttaylorr)\n* commands/ls-files: behave correctly before initial commit #2794 (@ttaylorr)\n* commands/migrate: allow for ambiguous references in migrations #2734 (@ttaylorr)\n* commands: fill in missing printf arg #2678 (@technoweenie)\n* config: Add `lfs.locksverify` to safe keys. #2797 (@b4mboo)\n* don't replace pointers with objects if clean filter is not configured #2626 (@technoweenie)\n* fsck: attach a filter to exclude unfetched items from fsck #2847 (@larsxschneider)\n* git/githistory: copy entries from cache, elsewhere #2884 (@ttaylorr)\n* git/githistory: migrate annotated tags correctly #2780 (@ttaylorr)\n* git/odb: don't print extra newline after commit message #2784 (@ttaylorr)\n* git/odb: extract identifiers from commits verbatim #2751 (@wsprent)\n* git/odb: implement parsing for annotated `*Tag`'s #2778 (@ttaylorr)\n* git/odb: retain newlines when parsing commit messages #2786 (@ttaylorr)\n* lfs: PointerScanner is nil after error, so don't close #2699 (@technoweenie)\n* lfsapi: Cred helper improvements #2695 (@technoweenie)\n* lfsapi: retry requests changing access from none IF Auth header is empty #2621 (@technoweenie)\n* prune: always prune excluded paths #2851 (@larsxschneider)\n* status: fix incorrect formatting with unpushed objects #2746 (@ttaylorr)\n* tasklog: don't drop updates in PercentageTask #2755 (@ttaylorr)\n* test: Fix integration test early exit #2735 (@technoweenie)\n* test: generate random repo names with fs-safe characters #2698 (@technoweenie)\n\n### Misc\n\n* all: Nitpicks #2821 (@technoweenie)\n* all: introduce package 'tlog' #2747 (@ttaylorr)\n* all: remove CLA #2870 (@MikeMcQuaid)\n* build: Specify the embedded Windows icon as part of versioninfo.json #2770 (@sschuberth)\n* config,test: Testlib no global config #2709 (@mathstuf)\n* config: add PushRemote() for checking `branch.*.pushRemote` and `remote.pushDefault` first #2715 (@technoweenie)\n* docs: Added documentation for git-lfs-ls-files' `*/-` output. #2719 (@bilke)\n* docs: Uninstall man page improvements #2730 (@dpursehouse)\n* docs: Update usage info for post-checkout #2830 (@proinsias)\n* docs: add 'git lfs prune' to main man page #2849 (@larsxschneider)\n* docs: use consistent casing for Git #2850 (@larsxschneider)\n* git/githistory: have `*RefUpdater` hold `*odb.ObjectDatabase` reference #2779 (@ttaylorr)\n* progress: move CopyCallback (& related) to package 'tools' #2749 (@ttaylorr)\n* progress: move `*progressLogger` implementation to package 'tools' #2750 (@ttaylorr)\n* refspec docs #2820 (@technoweenie)\n* script/test: run 'go tool vet' during testing #2788 (@ttaylorr)\n* tasklog: introduce `*SimpleTask` #2756 (@ttaylorr)\n* test: Ignore comment attr lines #2708 (@mathstuf)\n* test: Wait longer for test lfs server to start. #2716 (@QuLogic)\n* test: ensure commented attr lines are ignored #2736 (@ttaylorr)\n* tools/humanize: add 'FormatByteRate' to format transfer speed #2810 (@ttaylorr)\n* vendor: update 'xeipuuv/gojsonpointer' #2846 (@ttaylorr)\n\n## 2.3.4 (18 October, 2017)\n\n### Features\n\n* 'git lfs install' updates filters with 'skip-smudge' option #2673 (@technoweenie)\n\n### Bugs\n\n* FastWalkGitRepo: limit number of concurrent goroutines #2672 (@technoweenie)\n* handle scenario where multiple configuration values exist in ~/.gitconfig #2659 (@shiftkey)\n\n## 2.3.3 (9 October, 2017)\n\n### Bugs\n\n* invoke lfs for 'git update-index', fixing 'status' issues #2647 (@technoweenie)\n* cache http credential helper output by default #2648 (@technoweenie)\n\n## 2.3.2 (3 October, 2017)\n\n### Features\n\n* bump default activity timeout from 10s -> 30s #2632 (@technoweenie)\n\n### Bugs\n\n* ensure files are marked readonly after unlocking by ID #2642 (@technoweenie)\n* add files to index with path relative to current dir #2641 (@technoweenie)\n* better Netrc errors #2633 (@technoweenie)\n* only use askpass if credential.helper is not configured #2637 (@technoweenie)\n* convert backslash to slash when writing to .gitattributes #2625 (@technoweenie)\n\n### Misc\n\n* only copy req headers if there are git-configured extra headers #2622 (@technoweenie)\n* update tracerx to add timestamps #2620 (@rubyist)\n\n## 2.3.1 (27 September, 2017)\n\n### Features\n\n* add support for SSH_ASKPASS #2609 (@technoweenie)\n* `git lfs migrate --verbose` option #2610 (@technoweenie)\n* Support standalone custom transfer based on API URL prefix match #2590 (@sprohaska)\n\n### Bugs\n\n* Improve invalid URL error messages #2614 (@technoweenie)\n* Fix double counting progress bug #2608 (@technoweenie)\n* trim whitespace from GIT_ASKPASS provided passwords #2607 (@technoweenie)\n* remove mmap usage in Packfile reader #2600 (@technoweenie)\n* `git lfs clone`: don't fetch for unborn repositories #2598 (@shiftkey)\n\n### Misc\n\n* Windows Installer fixes:\n  * Show proper icon in add/remove programs list #2585 (@shiftkey)\n  * Make the Inno Setup installer script explicitly check for the binaries #2588 (@sschuberth)\n  * Improve compile-win-installer-unsigned.bat a bit #2586 (@sschuberth)\n* Update migrate docs example for multiple file types #2596 (@technoweenie)\n\n## 2.3.0 (14 September, 2017)\n\nGit LFS v2.3.0 includes performance optimizations for the `git-lfs-migrate(1)`\nand `git-clone(1)` commands, new features, bug-fixes, and more.\n\nThis release was made possible by contributors to Git LFS. Specifically:\n\n- @aleb: added support for \"standalone\" transfer agents, for using `rsync(1)`\n  and similar with Git LFS.\n- @bozaro: added support for custom `.git/lfs/objects` directories via the\n  `lfs.storage` configuration option.\n- @larsxschneider: fixed a recursive process leak when shelling out to Git,\n  added new features to `git lfs ls-files`, extra information in error\n  messages used for debugging, documentation changes and more.\n- @mathstuf: contributed a documentation change clarifying LFS's handling of\n  empty pointer files.\n- @rudineirk and @andyneff: updated our release process to build packages for\n  fedora/26.\n- @ssgelm: ensured that LFS is able to be released on Ubuntu Universe.\n\nTo everyone who has contributed to this or previous releases of Git LFS: Thank\nyou!\n\n### Features\n\n* git/odb/pack: improve `git lfs migrate` performance\n  * git/odb/pack: introduce packed object reassembly #2550 #2551 #2552 #2553 #2554 (@ttaylorr)\n  * git/odb/pack: teach packfile index entry lookups #2420 #2421 #2422 #2423 #2437 #2441 #2461 (@ttaylorr)\n  * git/{odb,githistory}: don't write unchanged objects #2541 (@ttaylorr)\n* commands: improve `git clone` performance with 'delay' capability #2511 #2469 #2468 #2471 #2467 #2476 #2483 (@ttaylorr)\n  * commands: mark `git lfs clone` as deprecated #2526 (@ttaylorr)\n* commands: enable `lfs.allowincompletepush` by default #2574 (@technoweenie)\n* commands: teach '--everything' to `git lfs migrate` #2558 (@ttaylorr)\n* commands: teach `git lfs ls-files` a '--debug' option #2540 (@larsxschneider)\n* commands,lfs: warn on 4gb size conversion during clean #2510 #2507 #2459 (@ttaylorr)\n* lfsapi/creds: teach about GIT_ASKPASS and core.askpass #2500 #2578 (@ttaylorr)\n* commands/status: indicate missing objects #2438 (@ttaylorr)\n* Allow using custom transfer agents directly #2429 (@aleb)\n* Add `lfs.storage` parameter for overriding LFS storage location #2023 (@bozaro)\n* lfsapi: enable credential caching by default #2508 (@ttaylorr)\n* commands/install: teach `--manual` to `git-lfs-install(1)` #2410 (@ttaylorr)\n\n### Bugs\n\n* migrate: fix migrations with subdirectories in '--include' or '--exclude' #2485 (@ttaylorr)\n* commands/migrate: fix hardlinking issue when different filesystem is mounted at `/tmp` #2566 (@ttaylorr)\n* commands: make `git lfs migrate` fetch ref updates before migrating #2538 (@ttaylorr)\n* commands: remove '--above=1mb' default from `git lfs migrate info` #2460 (@ttaylorr)\n* filepathfilter: fix `HasPrefix()` when no '--include' filters present #2579 (@technoweenie)\n* git/githistory/log: fix race condition with `git/githistory/log` tests #2495 (@ttaylorr)\n* git/odb: fix closing object database test #2457 (@ttaylorr)\n* git/githistory: only update local refs after migrations #2559 (@ttaylorr)\n* locking: fix unlocking files not removing write flag #2514 (@ttaylorr)\n* locks: fix unlocking files in a symlinked directory #2505 (@ttaylorr)\n* commands: teach `git lfs unlock` to ignore status errs in appropriate conditions #2475 (@ttaylorr)\n* git: expand `GetAttributePaths` check to include non-LFS lockables #2528 (@ttaylorr)\n* fix multiple `git update-index` invocations #2531 (@larsxschneider)\n* tools: fix SSH credential cacher expiration #2530 (@ttaylorr)\n* lfsapi: fix read/write race condition in credential cacher #2493 (@ttaylorr)\n* lfs: fix cleaning contents larger than 1024 bytes over stdin #2488 (@ttaylorr)\n* fsck only scans current version of objects #2049 (@TheJare)\n* progress: fix writing updates to `$GIT_LFS_PROGRESS` #2465 (@ttaylorr)\n* commands/track: resolve symlinks before comparing attr paths #2463 (@ttaylorr)\n* test: ensure that empty pointers are empty #2458 (@ttaylorr)\n* git/githistory/log: prevent 'NaN' showing up in `*PercentageTask` #2455 (@ttaylorr)\n* tq: teach Batch() API to retry itself after io.EOF's #2516 (@ttaylorr)\n\n### Misc\n\n* script/packagecloud: release LFS on Fedora/26 #2443 #2509 (@rudineirk, @andyneff)\n* git/githistory: change \"Rewriting commits\" when not updating refs #2577 (@ttaylorr)\n* commands: print IP addresses in error logs #2570 (@larsxschneider)\n* commands: print current time in UTC to error logs #2571 (@larsxschneider)\n* commands: Disable lock verification when using a standalone custom-tr… #2499 (@aleb)\n* docs/man: update `git lfs migrate` documentation with EXAMPLES #2580 (@technoweenie)\n* docs/man: recommend global per-host locking config #2546 (@larsxschneider)\n* commands: use transfer queue's batch size instead of constant #2529 (@ttaylorr)\n* add function to invoke Git with disabled LFS filters #2453 (@larsxschneider)\n* config: warn on unsafe keys in `.lfsconfig` #2502 (@ttaylorr)\n* glide: remove unused dependencies #2501 (@ttaylorr)\n* script/build: pass '-{ld,gc}flags' to compiler, if given #2462 (@ttaylorr)\n* spec: mention that an empty file is its own LFS pointer #2449 (@mathstuf)\n* Update to latest version of github.com/pkg/errors #2426 (@ssgelm)\n* Update gitignore to add some temp files that get created when building debs #2425 (@ssgelm)\n* lfs: indent contents of `git lfs install`, `update` #2392 (@ttaylorr)\n* tq: increase default `lfs.concurrenttransfers` to 8 #2506 (@ttaylorr)\n\n## 2.2.1 (10 July, 2017)\n\n### Bugs\n\n* git lfs status --json only includes lfs files #2374 (@asottile)\n* git/odb: remove temporary files after migration #2388 (@ttaylorr)\n* git/githistory: fix hanging on empty set of commits #2383 (@ttaylorr)\n* migrate: don't checkout HEAD on bare repositories #2389 (@ttaylorr)\n* git/odb: prevent cross-volume link error when saving objects #2382 (@ttaylorr)\n* commands: only pass --jobs to `git clone` if set #2369 (@technoweenie)\n\n### Misc\n\n* lfs: trace hook install, uninstall, upgrade #2393 (@ttaylorr)\n* vendor: remove github.com/cheggaaa/pb #2386 (@ttaylorr)\n* Use FormatBytes from git-lfs/tools/humanize instead of cheggaaa/pb #2377 (@ssgelm)\n\n\n## 2.2.0 (27 June, 2017)\n\nGit LFS v2.2.0 includes bug fixes, minor features, and a brand new `migrate`\ncommand. The `migrate` command rewrites commits, converting large files from\nGit blobs to LFS objects. The most common use case will fix a git push rejected\nfor having large blobs:\n\n```\n$ git push origin master\n# ...\nremote: error: file a.psd is 1.2 gb; this exceeds github's file size limit of 100.00 mb\nto github.com:ttaylorr/demo.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to 'git@github.com:ttaylorr/demo.git'\n\n$ git lfs migrate info\n*.psd   1.2 GB   27/27 files(s)  100%\n\n$ git lfs migrate import --include=\"*.psd\"\nmigrate: Sorting commits: ..., done\nmigrate: Rewriting commits: 100% (810/810), done\n  master        f18bb746d44e8ea5065fc779bb1acdf3cdae7ed8 -> 35b0fe0a7bf3ae6952ec9584895a7fb6ebcd498b\nmigrate: Updating refs: ..., done\n\n$ git push origin\nGit LFS: (1 of 1 files) 1.2 GB / 1.2 GB\n# ...\nTo github.com:ttaylorr/demo.git\n * [new branch]      master -> master\n```\n\nThe `migrate` command has detailed options described in the `git-lfs-migrate(1)`\nman page. Keep in mind that this is the first pass at such a command, so we\nexpect there to be bugs and performance issues (especially on long git histories).\nFuture updates to the command will be focused on improvements to allow full\nLFS transitions on large repositories.\n\n### Features\n\n* commands: add git-lfs-migrate(1) 'import' subcommand #2353 (@ttaylorr)\n* commands: add git-lfs-migrate(1) 'info' subcommand #2313 (@ttaylorr)\n* Implement status --json #2311 (@asottile)\n* commands/uploader: allow incomplete pushes #2199 (@ttaylorr)\n\n### Bugs\n\n* Retry on timeout or temporary errors #2312 (@jakub-m)\n* commands/uploader: don't verify locks if verification is disabled #2278 (@ttaylorr)\n* Fix tools.TranslateCygwinPath() on MSYS #2277 (@raleksandar)\n* commands/clone: add new flags since Git 2.9 #2251, #2252 (@ttaylorr)\n* Make pull return non-zero error code when some downloads failed #2237 (@seth2810)\n* tq/basic_download: guard against nil HTTP response #2227 (@ttaylorr)\n* Bugfix: cannot push to scp style URL #2198 (@jiangxin)\n* support lfs.<url>.* values where url does not include .git #2192 (@technoweenie)\n* commands: fix logged error not interpolating format qualifiers #2228 (@ttaylorr)\n* commands/help: print helptext to stdout for consistency with Git #2210 (@ttaylorr)\n\n### Misc\n\n* Minor cleanups in help index #2248 (@dpursehouse)\n* Add git-lfs-lock and git-lfs-unlock to help index #2232 (@dpursehouse)\n* packagecloud: add Debian 9 entry to formatted list #2211 (@ttaylorr)\n* Update Xenial is to use stretch packages #2212 (@andyneff)\n\n## 2.1.1 (19 May, 2017)\n\nGit LFS v2.1.1 ships with bug fixes and a security patch fixing a remote code\nexecution vulnerability exploitable by setting a SSH remote via your\nrepository's `.lfsconfig` to contain the string \"-oProxyCommand\". This\nvulnerability is only exploitable if an attacker has write access to your\nrepository, or you clone a repository with a `.lfsconfig` file containing that\nstring.\n\n### Bugs\n\n* Make pull return non-zero error code when some downloads failed #2245 (@seth2810, @technoweenie)\n* lfsapi: support cross-scheme redirection #2243 (@ttaylorr)\n* sanitize ssh options parsed from ssh:// url #2242 (@technoweenie)\n* filepathfilter: interpret as .gitignore syntax #2238 (@technoweenie)\n* tq/basic_download: guard against nil HTTP response #2229 (@ttaylorr)\n* commands: fix logged error not interpolating format qualifiers #2230 (@ttaylorr)\n\n### Misc\n\n* release: backport Debian 9-related changes #2244 (@ssgelm, @andyneff, @ttaylorr)\n* Add git-lfs-lock and git-lfs-unlock to help index #2240 (@dpursehouse)\n* config: allow multiple environments when calling config.Unmarshal #2224 (@ttaylorr)\n\n## 2.1.0 (28 April, 2017)\n\n### Features\n\n* commands/track: teach --no-modify-attrs #2175 (@ttaylorr)\n* commands/status: add blob info to each entry #2070 (@ttaylorr)\n* lfsapi: improve HTTP request/response stats #2184 (@technoweenie)\n* all: support URL-style configuration lookups (@ttaylorr)\n  * commands: support URL-style lookups for `lfs.{url}.locksverify` #2162 (@ttaylorr)\n  * lfsapi: support URL-style lookups for `lfs.{url}.access` #2161 (@ttaylorr)\n  * lfsapi/certs: use `*config.URLConfig` to do per-host config lookup #2160 (@ttaylorr)\n  * lfsapi: support for http.<url>.extraHeader #2159 (@ttaylorr)\n  * config: add prefix to URLConfig type #2158 (@ttaylorr)\n  * config: remove dependency on lfsapi package #2156 (@ttaylorr)\n  * config: support multi-value lookup on URLConfig #2154 (@ttaylorr)\n  * lfsapi: initial httpconfig type #1912 (@technoweenie, @ttaylorr)\n* lfsapi,tq: relative expiration support #2130 (@ttaylorr)\n\n### Bugs\n\n* commands: include error in `LoggedError()` #2179 (@ttaylorr)\n* commands: cross-platform log formatting to files #2178 (@ttaylorr)\n* locks: cross-platform path normalization #2139 (@ttaylorr)\n* commands,locking: don't disable locking for auth errors during verify #2110 (@ttaylorr)\n* commands/status: show partially staged files twice #2067 (@ttaylorr)\n\n### Misc\n\n* all: build on Go 1.8.1 #2145 (@ttaylorr)\n* Polish custom-transfers.md #2171 (@sprohaska)\n* commands/push: Fix typo in comment #2170 (@sprohaska)\n* config: support multi-valued config entries #2152 (@ttaylorr)\n* smudge: use localstorage temp directory, not system #2140 (@ttaylorr)\n* locking: send locks limit to server #2107 (@ttaylorr)\n* lfs: extract `DiffIndexScanner` #2035 (@ttaylorr)\n* status: use DiffIndexScanner to populate results #2042 (@ttaylorr)\n\n## 2.0.2 (29 March, 2017)\n\n### Features\n\n* ssh auth and credential helper caching #2094 (@ttaylorr)\n* commands,tq: specialized logging for missing/corrupt objects #2085 (@ttaylorr)\n* commands/clone: install repo-level hooks after `git lfs clone` #2074\n* (@ttaylorr)\n* debian: Support building on armhf and arm64 #2089 (@p12tic)\n\n### Bugs\n\n* commands,locking: don't disable locking for auth errors during verify #2111\n* (@ttaylorr)\n* commands: show real error while cleaning #2096 (@ttaylorr)\n* lfsapi/auth: optionally prepend an empty scheme to Git remote URLs #2092\n* (@ttaylorr)\n* tq/verify: authenticate verify requests if required #2084 (@ttaylorr)\n* commands/{,un}track: correctly escape '#' and ' ' characters #2079 (@ttaylorr)\n* tq: use initialized lfsapi.Client instances in transfer adapters #2048\n* (@ttaylorr)\n\n### Misc\n\n* locking: send locks limit to server #2109 (@ttaylorr)\n* docs: update configuration documentation #2097 #2019 #2102 (@terrorobe)\n* docs: update locking API documentation #2099 #2101 (@dpursehouse)\n* fixed table markdown in README.md #2095 (@ZaninAndrea)\n* remove the the duplicate work #2098 (@grimreaper)\n\n## 2.0.1 (6 March, 2017)\n\n### Misc\n\n* tq: fallback to `_links` if present #2007 (@ttaylorr)\n\n## 2.0.0 (1 March, 2017)\n\nGit LFS v2.0.0 brings a number of important bug fixes, some new features, and\na lot of internal refactoring. It also completely removes old APIs that were\ndeprecated in Git LFS v0.6.\n\n### Locking\n\nFile Locking is a brand new feature that lets teams communicate when they are\nworking on files that are difficult to merge. Users are not able to edit or push\nchanges to any files that are locked by other users. While the feature has been\nin discussion for a year, we are releasing a basic Locking implementation to\nsolicit feedback from the community.\n\n### Transfer Queue\n\nLFS 2.0 introduces a new Git Scanner, which walks a range of Git commits looking\nfor LFS objects to transfer. The Git Scanner is now asynchronous, initiating\nlarge uploads or downloads in the Transfer Queue immediately once an LFS object\nis found. Previously, the Transfer Queue waited until all of the Git commits\nhave been scanned before initiating the transfer. The Transfer Queue also\nautomatically retries failed uploads and downloads more often.\n\n### Deprecations\n\nGit LFS v2.0.0 also drops support for the legacy API in v0.5.0. If you're still\nusing LFS servers on the old API, you'll have to stick to v1.5.6.\n\n### Features\n\n* Mid-stage locking support #1769 (@sinbad)\n* Define lockable files, make read-only in working copy #1870 (@sinbad)\n* Check that files are not uncommitted before unlock #1896 (@sinbad)\n* Fix `lfs unlock --force` on a missing file #1927 (@technoweenie)\n* locking: teach pre-push hook to check for locks #1815 (@ttaylorr)\n* locking: add `--json` flag #1814 (@ttaylorr)\n* Implement local lock cache, support querying it #1760 (@sinbad)\n* support for client certificates pt 2 #1893 (@technoweenie)\n* Fix clash between progress meter and credential helper #1886 (@technoweenie)\n* Teach uninstall cmd about --local and --system #1887 (@technoweenie)\n* Add `--skip-repo` option to `git lfs install` & use in tests #1868 (@sinbad)\n* commands: convert push, pre-push to use async gitscanner #1812 (@ttaylorr)\n* tq: prioritize transferring retries before new items #1758 (@ttaylorr)\n\n### Bugs\n\n* ensure you're in the correct directory when installing #1793 (@technoweenie)\n* locking: make API requests relative to repository, not root #1818 (@ttaylorr)\n* Teach 'track' about CRLF #1914 (@technoweenie)\n* Teach 'track' how to handle empty lines in .gitattributes #1921 (@technoweenie)\n* Closing stdout pipe before function return #1861 (@monitorjbl)\n* Custom transfer terminate #1847 (@sinbad)\n* Fix Install in root problems #1727 (@technoweenie)\n* cat-file batch: read all of the bytes #1680 (@technoweenie)\n* Fixed file paths on cygwin. #1820, #1965 (@creste, @ttaylorr)\n* tq: decrement uploaded bytes in basic_upload before retry #1958 (@ttaylorr)\n* progress: fix never reading bytes with sufficiently small files #1955 (@ttaylorr)\n* tools: fix truncating string fields between balanced quotes in GIT_SSH_COMMAND #1962 (@ttaylorr)\n* commands/smudge: treat empty pointers as empty files #1954 (@ttaylorr)\n\n### Misc\n\n* all: build using Go 1.8 #1952 (@ttaylorr)\n* Embed the version information into the Windows executable #1689 (@sschuberth)\n* Add more meta-data to the Windows installer executable #1752 (@sschuberth)\n* docs/api: object size must be positive #1779 (@ttaylorr)\n* build: omit DWARF tables by default #1937 (@ttaylorr)\n* Add test to prove set operator [] works in filter matching #1768 (@sinbad)\n* test: add ntlm integration test #1840 (@technoweenie)\n* lfs/tq: completely remove legacy support #1686 (@ttaylorr)\n* remove deprecated features #1679 (@technoweenie)\n* remove legacy api support #1629 (@technoweenie)\n\n## 1.5.6 (16 February, 2017)\n\n## Bugs\n\n* Spool malformed pointers to avoid deadlock #1932 (@ttaylorr)\n\n## 1.5.5 (12 January, 2017)\n\n### Bugs\n\n* lfs: only buffer first 1k when creating a CleanPointerError #1856 (@ttaylorr)\n\n## 1.5.4 (27 December, 2016)\n\n### Bugs\n\n* progress: guard negative padding width, panic in `strings.Repeat` #1807 (@ttaylorr)\n* commands,lfs: handle malformed pointers #1805 (@ttaylorr)\n\n### Misc\n\n* script/packagecloud: release LFS on fedora/25 #1798 (@ttaylorr)\n* backport filepathfilter to v1.5.x #1782 (@technoweenie)\n\n## 1.5.3 (5 December, 2016)\n\n### Bugs\n\n* Support LFS installations at filesystem root #1732 (@technoweenie)\n* git: parse filter process header values containing '=' properly #1733 (@larsxschneider)\n* Fix SSH endpoint parsing #1738 (@technoweenie)\n\n### Misc\n\n* build: release on Go 1.7.4 #1741 (@ttaylorr)\n\n## 1.5.2 (22 November, 2016)\n\n### Features\n\n* Release LFS on Fedora 24 #1685 (@technoweenie)\n\n### Bugs\n\n* filter-process: fix reading 1024 byte files #1708 (@ttaylorr)\n* Support long paths on Windows #1705 (@technoweenie)\n\n### Misc\n\n* filter-process: exit with error if we detect an unknown command from Git #1707 (@ttaylorr)\n* vendor: remove contentaddressable lib #1706 (@technoweenie)\n\n## 1.5.1 (18 November, 2016)\n\n### Bugs\n\n* cat-file --batch parser errors on non-lfs git blobs #1680 (@technoweenie)\n\n## 1.5.0 (17 November, 2016)\n\n### Features\n\n* Filter Protocol Support #1617 (@ttaylorr, @larsxschneider)\n* Fast directory walk #1616 (@sinbad)\n* Allow usage of proxies even when contacting localhost #1605 (@chalstrick)\n\n### Bugs\n\n* start reading off the Watch() channel before sending any input #1671 (@technoweenie)\n* wait for remote ref commands to exit before returning #1656 (@jjgod, @technoweenie)\n\n### Misc\n\n* rewrite new catfilebatch implementation for upcoming gitscanner pkg #1650 (@technoweenie)\n* refactor testutils.FileInput so it's a little more clear #1666 (@technoweenie)\n* Update the lfs track docs #1642 (@technoweenie)\n* Pre push tracing #1638 (@technoweenie)\n* Remove `AllGitConfig()` #1634 (@technoweenie)\n* README: set minimal required Git version to 1.8.5 #1636 (@larsxschneider)\n* 'smudge --info' is deprecated in favor of 'ls-files' #1631 (@technoweenie)\n* travis-ci: test GitLFS with ancient Git version #1626 (@larsxschneider)\n\n## 1.4.4 (24 October, 2016)\n\n### Bugs\n\n* transfer: more descriptive \"expired at\" errors #1603 (@ttaylorr)\n* commands,lfs/tq: Only send unique OIDs to the Transfer Queue #1600 (@ttaylorr)\n* Expose the result message in case of an SSH authentication error #1599 (@sschuberth)\n\n### Misc\n\n* AppVeyor: Do not build branches with open pull requests #1594 (@sschuberth)\n* Update .mailmap #1593 (@dpursehouse)\n\n## 1.4.3 (17 October, 2016)\n\n### Bugs\n\n* lfs/tq: use extra arguments given to tracerx.Printf #1583 (@ttaylorr)\n* api: correctly print legacy API warning to Stderr #1582 (@ttaylorr)\n\n### Misc\n\n* Test storage retries #1585 (@ttaylorr)\n* Test legacy check retries behavior #1584 (@ttaylorr)\n* docs: Fix a link to the legacy API #1579 (@sschuberth)\n* Add a .mailmap file #1577 (@sschuberth)\n* Add a large wizard image to the Windows installer #1575 (@sschuberth)\n* Appveyor badge #1574 (@ttaylorr)\n\n## 1.4.2 (10 October, 2016)\n\nv1.4.2 brings a number of bug fixes and usability improvements to LFS. This\nrelease also adds support for multiple retries within the transfer queue, making\ntransfers much more reliable. To enable this feature, see the documentation for\n`lfs.transfer.maxretries` in `git-lfs-config(5)`.\n\nWe'd also like to extend a special thank-you to @sschuberth who undertook the\nprocess of making LFS's test run on Windows through AppVeyor. Now all pull\nrequests run tests on macOS, Linux, and Windows.\n\n### Features\n\n* lfs: warn on usage of the legacy API #1564 (@ttaylorr)\n* use filepath.Clean() when comparing filenames to include/exclude patterns #1565 (@technoweenie)\n* lfs/transfer_queue: support multiple retries per object #1505, #1528, #1535, #1545 (@ttaylorr)\n* Automatically upgrade old filters instead of requiring —force #1497 (@sinbad)\n* Allow lfs.pushurl in .lfsconfig #1489 (@technoweenie)\n\n### Bugs\n\n* Use \"sha256sum\" on Windows  #1566 (@sschuberth)\n* git: ignore non-root wildcards #1563 (@ttaylorr)\n* Teach status to recognize multiple files with identical contents #1550 (@ttaylorr)\n* Status initial commit #1540 (@sinbad)\n* Make path comparison robust against Windows short / long path issues #1523 (@sschuberth)\n* Allow fetch to run without a remote configured #1507 (@sschuberth)\n\n### Misc\n\n* travis: run tests on Go 1.7.1 #1568 (@ttaylorr)\n* Enable running tests on AppVeyor CI #1567 (@sschuberth)\n* Travis: Only install git if not installed yet #1557 (@sschuberth)\n* Windows test framework fixes #1522 (@sschuberth)\n* Simplify getting the absolute Git root directory #1518 (@sschuberth)\n* Add icons to the Windows installer #1504 (@sschuberth)\n* docs/man: reference git-lfs-pointer(1) in clean documentation #1503 (@ttaylorr)\n* Make AppVeyor CI for Windows work again #1506 (@sschuberth)\n* commands: try out RegisterCommand() #1495 (@technoweenie)\n\n## 1.4.1 (26 August, 2016)\n\n### Features\n\n* retry if file download failed #1454 (@larsxschneider)\n* Support wrapped clone in current directory #1478 (@ttaylorr)\n\n### Misc\n\n* Test `RetriableReader` #1482 (@ttaylorr)\n\n## 1.4.0 (19 August, 2016)\n\n### Features\n\n* Install LFS at the system level when packaged #1460 (@javabrett)\n* Fetch remote urls #1451 (@technoweenie)\n* add object Authenticated property #1452 (@technoweenie)\n* add support for `url.*.insteadof` in git config #1117, #1443 (@artagnon, @technoweenie)\n\n### Bugs\n\n* fix --include bug when multiple files have same lfs content #1458 (@technoweenie)\n* check the git version is ok in some key commands #1461 (@technoweenie)\n* fix duplicate error reporting #1445, #1453 (@dpursehouse, @technoweenie)\n* transfer/custom: encode \"event\" as lowercase #1441 (@ttaylorr)\n\n### Misc\n\n* docs/man: note GIT_LFS_PROGRESS #1469 (@ttaylorr)\n* Reword the description of HTTP 509 status #1467 (@dpursehouse)\n* Update fetch include/exclude docs for pattern matching #1455 (@ralfthewise)\n* config-next: API changes to the `config` package #1425 (@ttaylorr)\n* errors-next: Contextualize error messages #1463 (@ttaylorr, @technoweenie)\n* scope commands to not leak instances of themselves #1434 (@technoweenie)\n* Transfer manifest #1430 (@technoweenie)\n\n## 1.3.1 (2 August 2016)\n\n### Features\n\n* lfs/hook: teach `lfs.Hook` about `core.hooksPath` #1409 (@ttaylorr)\n\n### Bugs\n\n* distinguish between empty include/exclude paths #1411 (@technoweenie)\n* Fix sslCAInfo config lookup when host in config doesn't have a trailing slash #1404 (@dakotahawkins)\n\n### Misc\n\n* Use commands.Config instead of config.Config #1390 (@technoweenie)\n\n## 1.3.0 (21 July 2016)\n\n### Features\n\n* use proxy from git config #1173, #1358 (@jonmagic, @LizzHale, @technoweenie)\n* Enhanced upload/download of LFS content: #1265 #1279 #1297 #1303 #1367 (@sinbad)\n  * Resumable downloads using HTTP range headers\n  * Resumable uploads using [tus.io protocol](http://tus.io)\n  * Pluggable [custom transfer adapters](https://github.com/git-lfs/git-lfs/blob/master/docs/custom-transfers.md)\n* In git 2.9+, run \"git lfs pull\" in submodules after \"git lfs clone\" #1373 (@sinbad)\n* cmd,doc,test: teach `git lfs track --{no-touch,verbose,dry-run}` #1344 (@ttaylorr)\n* ⏳ Retry transfers with expired actions #1350 (@ttaylorr)\n* Safe track patterns #1346 (@ttaylorr)\n* Add checkout --unstaged flag #1262 (@orivej)\n* cmd/clone: add include/exclude via flags and config #1321 (@ttaylorr)\n* Improve progress reporting when files skipped #1296 (@sinbad)\n* Experimental file locking commands #1236, #1259, #1256, #1386 (@ttaylorr)\n* Implement support for GIT_SSH_COMMAND #1260 (@pdf)\n* Recognize include/exclude filters from config #1257 (@ttaylorr)\n\n### Bugs\n\n* Fix bug in Windows installer under Win32. #1200 (@teo-tsirpanis)\n* Updated request.GetAuthType to handle multi-value auth headers #1379 (@VladimirKhvostov)\n* Windows fixes #1374 (@sinbad)\n* Handle artifactory responses #1371 (@ttaylorr)\n* use `git rev-list --stdin` instead of passing each remote ref #1359 (@technoweenie)\n* docs/man: move \"logs\" subcommands from OPTIONS to COMMANDS #1335 (@ttaylorr)\n* test/zero-len: update test for git v2.9.1 #1369 (@ttaylorr)\n* Unbreak building httputil on OpenBSD #1360 (@jasperla)\n* WIP transferqueue race fix #1255 (@technoweenie)\n* Safety check to `comands.requireStdin` #1349 (@ttaylorr)\n* Removed CentOS 5 from dockers. Fixed #1295. #1298 (@javabrett)\n* Fix 'git lfs fetch' with a sha1 ref #1323 (@omonnier)\n* Ignore HEAD ref when fetching with --all #1310 (@ttaylorr)\n* Return a fully remote ref to reduce chances of ref clashes #1248 (@technoweenie)\n* Fix reporting of `git update-index` errors in `git lfs checkout` and `git lfs pull` #1400 (@technoweenie)\n\n### Misc\n\n* Added Linux Mint Sarah to package cloud script #1384 (@andyneff)\n* travis-ci: require successful tests against upcoming Git core release #1372 (@larsxschneider)\n* travis-ci: add a build job to test against upcoming versions of Git #1361 (@larsxschneider)\n* Create Makefiles for building with gccgo #1222 (@zeldin)\n* README: add @ttaylorr to core team #1332 (@ttaylorr)\n* Enforced a minimum gem version of 1.0.4 for packagecloud-ruby #1292 (@javabrett)\n* I think this should be \"Once installed\" and not \"One installed\", but … #1305 (@GabLeRoux)\n* script/test: propagate extra args to go test #1324 (@omonnier)\n* Add `lfs.basictransfersonly` option to disable non-basic transfer adapters #1299 (@sinbad)\n* Debian build vendor test excludes #1291 (@javabrett)\n* gitignore: ignore lfstest-\\* files #1271 (@ttaylorr)\n* Disable gojsonschema test, causes failures when firewalls block it #1274 (@sinbad)\n* test: use noop credential helper for auth tests #1267 (@ttaylorr)\n* get git tests passing when run outside of repository #1229 (@technoweenie)\n* Package refactor no.1 #1226 (@sinbad)\n* vendor: vendor dependencies in vendor/ using Glide #1243 (@ttaylorr)\n\n## 1.2.1 (2 June 2016)\n\n### Features\n\n* Add missing config details to `env` command #1217 (@sinbad)\n* Allow smudge filter to return 0 on download failure #1213 (@sinbad)\n* Add `git lfs update --manual` option & promote it on hook install fail #1182 (@sinbad)\n* Pass `git lfs clone` flags through to `git clone` correctly, respect some options #1160 (@sinbad)\n\n### Bugs\n\n* Clean trailing `/` from include/exclude paths #1278 (@ttaylorr)\n* Fix problems with user prompts in `git lfs clone` #1185 (@sinbad)\n* Fix failure to return non-zero exit code when lfs install/update fails to install hooks #1178 (@sinbad)\n* Fix missing man page #1149 (@javabrett)\n* fix concurrent map read and map write #1179 (@technoweenie)\n\n### Misc\n\n* Allow additional fields on request & response schema #1276 (@sinbad)\n* Fix installer error on win32. #1198 (@teo-tsirpanis)\n* Applied same -ldflags -X name value -> name=value fix #1193 (@javabrett)\n* add instructions to install from MacPorts #1186 (@skymoo)\n* Add xenial repo #1170 (@graingert)\n\n## 1.2.0 (14 April 2016)\n\n### Features\n\n* netrc support #715 (@rubyist)\n* `git lfs clone` command #988 (@sinbad)\n* Support self-signed certs #1067 (@sinbad)\n* Support sslverify option for specific hosts #1081 (@sinbad)\n* Stop transferring duplicate objects on major push or fetch operations on multiple refs. #1128 (@technoweenie)\n* Touch existing git tracked files when tracked in LFS so they are flagged as modified #1104 (@sinbad)\n* Support for git reference clones #1007 (@jlehtnie)\n\n### Bugs\n\n* Fix clean/smudge filter string for files starting with - #1083 (@epriestley)\n* Fix silent failure to push LFS objects when ref matches a filename in the working copy #1096 (@epriestley)\n* Fix problems with using LFS in symlinked folders #818 (@sinbad)\n* Fix git lfs push silently misbehaving on ambiguous refs; fail like git push instead #1118 (@sinbad)\n* Whitelist `lfs.*.access` config in local ~/.lfsconfig #1122 (@rjbell4)\n* Only write the encoded pointer information to Stdout #1105 (@sschuberth)\n* Use hardcoded auth from remote or lfs config when accessing the storage api #1136 (@technoweenie, @jonmagic)\n* SSH should be called more strictly with command as one argument #1134 (@sinbad)\n\n## 1.1.2 (1 March, 2016)\n\n* Fix Base64 issues with `?` #989 (@technoweenie)\n* Fix zombie git proc issue #1012 (@rlaakkol)\n* Fix problems with files containing unicode characters #1016 (@technoweenie)\n* Fix panic in `git cat-file` parser #1006 (@technoweenie)\n* Display error messages in non-fatal errors #1028 #1039 #1042 (@technoweenie)\n* Fix concurrent map access in progress meter (@technoweenie)\n\n## 1.1.1 (4 February, 2016)\n\n### Features\n\n* Add copy-on-write support for Linux BTRFS filesystem #952 (@bozaro)\n* convert `git://` remotes to LFS servers automatically #964 (@technoweenie)\n* Fix `git lfs track` handling of absolute paths. #975  (@technoweenie)\n* Allow tunable http client timeouts #977 (@technoweenie)\n\n### Bugs\n\n* Suppress git config warnings for non-LFS keys #861 (@technoweenie)\n* Fix fallthrough when `git-lfs-authenticate` returns an error #909 (@sinbad)\n* Fix progress bar issue #883 (@pokehanai)\n* Support `remote.name.pushurl` config #949 (@sinbad)\n* Fix handling of `GIT_DIR` and `GIT_WORK_TREE` #963, #971 (@technoweenie)\n* Fix handling of zero length files #966 (@nathanhi)\n* Guard against invalid remotes passed to `push` and `pre-push` #974 (@technoweenie)\n* Fix race condition in `git lfs pull` #972 (@technoweenie)\n\n### Extra\n\n* Add server API test tool #868 (@sinbad)\n* Redo windows installer with innosetup #875 (@strich)\n* Pre-built packages are built with Go v1.5.3\n\n## 1.1.0 (18 November, 2015)\n\n* NTLM auth support #820 (@WillHipschman, @technoweenie)\n* Add `prune` command #742 (@sinbad)\n* Use .lfsconfig instead of .gitconfig #837 (@technoweenie)\n* Rename \"init\" command #838 (@technoweenie)\n* Raise error if credentials are needed #842 (@technoweenie)\n* Support git repos in symlinked directories #818 (@sinbad, @difro, @jiangxin)\n* Fix \"git lfs env\" to show correct SSH remote info #828 (@jiangxin)\n\n## 1.0.2 (28 October, 2015)\n\n* Fix issue with 'git lfs smudge' and the batch API. #795 (@technoweenie)\n* Fix race condition in the git scanning code. #801 (@technoweenie)\n\n## 1.0.1 (23 October, 2015)\n\n* Downcase git config keys (prevents Auth loop) #690 (@WillHipschman)\n* Show more info for unexpected http responses #710 (@rubyist)\n* Use separate stdout/stderr buffers for `git-lfs-authenticate` #718 (@bozaro)\n* Use LoggedError instead of Panic if update-index fails in checkout #735 (@sinbad)\n* `smudge` command exits with non-zero if the download fails #732 (@rubyist)\n* Use `git rev-parse` to find the git working dir #692 (@sinbad)\n* Improved default remote behaviour & validation for fetch/pull #713 (@sinbad)\n* Make fetch return error code when 1+ downloads failed #734 (@sinbad)\n* Improve lfs.InRepo() detection in `init`/`update` #756 (@technoweenie)\n* Teach smudge to use the batch api #711 (@rubyist)\n* Fix not setting global attribute when needed to b/c of local state #765 (@sinbad)\n* Fix clone fail when fetch is excluded globally #770 (@sinbad)\n* Fix for partial downloads problem #763 (@technoweenie)\n* Get integration tests passing on Windows #771 (@sinbad)\n\n### Security\n\n* Whitelist the valid keys read from .gitconfig #760 (@technoweenie)\n\nThis prevents unsafe git configuration values from being used by Git LFS.\n\n## v1.0 (1 October, 2015)\n\n* Manual reference is integrated into the \"help\" options #665 @sinbad\n* Fix `ls-files` when run from an empty repository #668 @Aorjoa\n* Support listing duplicate files in `ls-files` #681 @Aorjoa @technoweenie\n* `update` and `init` commands can install the pre-push hook in bare repositories #671 @technoweenie\n* Add `GIT_LFS_SKIP_SMUDGE` and `init --skip-smudge` #679 @technoweenie\n\n## v0.6.0 (10 September, 2015)\n\nThis is the first release that uses the new Batch API by default, while still\nfalling back to the Legacy API automatically. Also, new fetch/checkout/push\ncommands have been added.\n\nRun `git lfs update` in any local repositories to make sure all config settings\nare updated.\n\n### Fetch\n\n* Rename old `git lfs fetch` command to `git lfs pull`. #527 (@sinbad)\n* Add `git lfs checkout` #527 #543 #551 #566 (@sinbad)\n* Add `git lfs fetch` for _just_ downloading objects. #527 (@sinbad)\n  * Add `remote` arg, and default to tracking remote instead of \"origin\". #583 (@sinbad)\n  * Support fetching multiple refs #542 (@sinbad)\n  * Add `--include` and `--exclude` flag for `git lfs fetch` #573 (@sinbad)\n  * Add `--recent` flag for downloading recent files outside of the current\n    checkout. #610 (@sinbad)\n  * Add `--all` option for download all objects from the server. #633 (@sinbad)\n* Fix error handling while `git update-index` is running. #570 (@rubyist)\n\nSee [git-lfs-fetch(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-fetch.1.ronn),\n[git-lfs-checkout(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-checkout.1.ronn),\nand [git-lfs-pull(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-pull.1.ronn)\n for details.\n\n### Push\n\n* Support pushing multiple branches in the pre-push hook. #635 (@sinbad)\n* Fix pushing objects from a branch that's not HEAD. #608 (@sinbad)\n* Check server for objects before failing push because local is missing. #581 (@sinbad)\n* Filter out commits from remote refs when pushing. #578 (@billygor)\n* Support pushing all objects to the server, regardless of the remote ref. #646 (@technoweenie)\n* Fix case where pre-push git hook exits with 0. #582 (@sinbad)\n\nSee [git-lfs-push(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-push.1.ronn) for details.\n\n### API Clients\n\n* Fix some race conditions in the Batch API client. #577 #637 (@sinbad, @rubyist)\n* Support retries in the Batch API client. #595 (@rubyist)\n* Fix hanging batch client in certain error conditions. #594 (@rubyist)\n* Treat 401 responses as errors in the Legacy API client. #634 (@rubyist)\n* Fix bug in the Legacy API client when the object already exists on the server. #572 (@billygor)\n\n### Credentials\n\n* Fix how git credentials are checked in certain edge cases. #611 #650 #652 (@technoweenie)\n* Send URI user to git credentials. #626 (@sinbad)\n* Support git credentials with useHttpPath enabled. #554 (@clareliguori)\n\n### Installation\n\n* Docker images and scripts for building and testing linux packages. #511 #526 #555 #603 (@andyneff, @ssgelm)\n* Create Windows GUI installer. #642 (@technoweenie)\n* Binary releases use Go 1.5, which includes fix for Authorization when the\n  request URL includes just the username. [golang/go#11399](https://github.com/golang/go/issues/11399)\n\n### Misc\n\n* Documented Git config values used by Git LFS in [git-lfs-config(5)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-config.5.ronn). #610 (@sinbad)\n* Experimental support for Git worktrees (in Git 2.5+) #546 (@sinbad)\n* Experimental extension support. #486 (@ryansimmen)\n\n## v0.5.4 (30 July, 2015)\n\n* Ensure `git lfs uninit` cleans your git config thoroughly. #530 (@technoweenie)\n* Fix issue with asking `git-credentials` for auth details after getting them\nfrom the SSH command. #534 (@technoweenie)\n\n## v0.5.3 (23 July, 2015)\n\n* `git lfs fetch` bugs #429 (@rubyist)\n* Push can crash on 32 bit architectures #450 (@rubyist)\n* Improved SSH support #404, #464 (@sinbad, @technoweenie)\n* Support 307 redirects with relative url #442 (@sinbad)\n* Fix `init` issues when upgrading #446 #451 #452 #465 (@technoweenie, @rubyist)\n* Support chunked Transfer-Encoding #386 (@ryansimmen)\n* Fix issue with pushing deleted objects #461 (@technoweenie)\n* Teach `git lfs push` how to send specific objects #449 (@larsxschneider)\n* Update error message when attempting to push objects that don't exist in `.git/lfs/objects` #447 (@technoweenie)\n* Fix bug in HTTP client when response body is nil #472 #488 (@rubyist, @technoweenie)\n* `-crlf` flag in gitattributes is deprecated #475 (@technoweenie)\n* Improvements to the CentOS and Debian build and package scripts (@andyneff, @ssgelm)\n\n## v0.5.2 (19 June, 2015)\n\n* Add `git lfs fetch` command for downloading objects. #285 (@rubyist)\n* Fix `git lfs track` issues when run outside of a git repository #312, #323 (@michael-k, @Aorjoa)\n* Fix `git lfs track` for paths with spaces in them #327 (@technoweenie)\n* Fix `git lfs track` by writing relative paths to .gitattributes #356 (@michael-k)\n* Fix `git lfs untrack` so it doesn't remove entries incorrectly from .gitattributes #398 (@michael-k)\n* Fix `git lfs clean` bug with zero length files #346 (@technoweenie)\n* Add `git lfs fsck` #373 (@zeroshirts, @michael-k)\n* The Git pre-push warns if Git LFS is not installed #339 (@rubyist)\n* Fix Content-Type header sent by the HTTP client #329 (@joerg)\n* Improve performance tracing while scanning refs #311 (@michael-k)\n* Fix detection of LocalGitDir and LocalWorkingDir #312 #354 #361 (@michael-k)\n* Fix inconsistent file mode bits for directories created by Git LFS #364 (@michael-k)\n* Optimize shell execs #377, #382, #391 (@bozaro)\n* Collect HTTP transfer stats #366, #400 (@rubyist)\n* Support GIT_DIR and GIT_WORK_TREE #370 (@michael-k)\n* Hide Git application window in Windows #381 (@bozaro)\n* Add support for configured URLs containing credentials per RFC1738 #408 (@ewbankkit, @technoweenie)\n* Add experimental support for batch API calls #285 (@rubyist)\n* Improve linux build instructions for CentOS and Debian. #299 #309 #313 #332 (@jsh, @ssgelm, @andyneff)\n\n## v0.5.1 (30 April, 2015)\n\n* Fix Windows install.bat script.  #223 (@PeterDaveHello)\n* Fix bug where `git lfs clean` will clean Git LFS pointers too #271 (@technoweenie)\n* Better timeouts for the HTTP client #215 (@Mistobaan)\n* Concurrent uploads through `git lfs push` #258 (@rubyist)\n* Fix `git lfs smudge` behavior with zero-length file in `.git/lfs/objects` #267 (@technoweenie)\n* Separate out pre-push hook behavior from `git lfs push` #263 (@technoweenie)\n* Add diff/merge properties to .gitattributes #265 (@technoweenie)\n* Respect `GIT_TERMINAL_PROMPT ` #257 (@technoweenie)\n* Fix CLI progress bar output #185 (@technoweenie)\n* Fail fast in `clean` and `smudge` commands when run without STDIN #264 (@technoweenie)\n* Fix shell quoting in pre-push hook.  #235 (@mhagger)\n* Fix progress bar output during file uploads.  #185 (@technoweenie)\n* Change `remote.{name}.lfs_url` to `remote.{name}.lfsurl` #237 (@technoweenie)\n* Swap `git config` order.  #245 (@technoweenie)\n* New `git lfs pointer` command for generating and comparing pointers #246 (@technoweenie)\n* Follow optional \"href\" property from git-lfs-authenticate SSH command #247 (@technoweenie)\n* `.git/lfs/objects` spec clarifications: #212 (@rtyley), #244 (@technoweenie)\n* man page updates: #228 (@mhagger)\n* pointer spec clarifications: #246 (@technoweenie)\n* Code comments for the untrack command: #225 (@thekafkaf)\n\n## v0.5.0 (10 April, 2015)\n\n* Initial public release\n"
        },
        {
          "name": "CODE-OF-CONDUCT.md",
          "type": "blob",
          "size": 7.1865234375,
          "content": "# Git LFS Code of Conduct\n\nThis code of conduct outlines our expectations for participants within the Git LFS community, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Anyone who violates this code of conduct may be banned from the community.\n\nOur open source community strives to:\n\n* **Be friendly and patient.**\n* **Be welcoming**: We strive to be a community that welcomes and supports people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, colour, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability.\n* **Be considerate**: Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language.\n* **Be respectful**:  Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It’s important to remember that a community where people feel uncomfortable or threatened is not a productive one.\n* **Be careful in the words that we choose**: we are a community of professionals, and we conduct ourselves professionally. Be kind to others. Do not insult or put down other participants. Harassment and other exclusionary behavior aren't acceptable.\n* **Try to understand why we disagree**: Disagreements, both social and technical, happen all the time. It is important that we resolve disagreements and differing views constructively. Remember that we’re different. The strength of our community comes from its diversity, people from a wide range of backgrounds. Different people have different perspectives on issues. Being unable to understand why someone holds a viewpoint doesn’t mean that they’re wrong. Don’t forget that it is human to err and blaming each other doesn’t get us anywhere. Instead, focus on helping to resolve issues and learning from mistakes.\n\n## Definitions\n\nHarassment includes, but is not limited to:\n\n- Offensive comments related to gender, gender identity and expression, sexual orientation, disability, mental illness, neuro(a)typicality, physical appearance, body size, race, age, regional discrimination, political or religious affiliation\n- Unwelcome comments regarding a person’s lifestyle choices and practices, including those related to food, health, parenting, drugs, and employment\n- Deliberate misgendering. This includes deadnaming or persistently using a pronoun that does not correctly reflect a person's gender identity. You must address people by the name they give you when not addressing them by their username or handle\n- Physical contact and simulated physical contact (eg, textual descriptions like “*hug*” or “*backrub*”) without consent or after a request to stop\n- Threats of violence, both physical and psychological\n- Incitement of violence towards any individual, including encouraging a person to commit suicide or to engage in self-harm\n- Deliberate intimidation\n- Stalking or following\n- Harassing photography or recording, including logging online activity for harassment purposes\n- Sustained disruption of discussion\n- Unwelcome sexual attention, including gratuitous or off-topic sexual images or behaviour\n- Pattern of inappropriate social contact, such as requesting/assuming inappropriate levels of intimacy with others\n- Continued one-on-one communication after requests to cease\n- Deliberate “outing” of any aspect of a person’s identity without their consent except as necessary to protect others from intentional abuse\n- Publication of non-harassing private communication\n\nOur open source community prioritizes marginalized people’s safety over privileged people’s comfort. We will not act on complaints regarding:\n\n- ‘Reverse’ -isms, including ‘reverse racism,’ ‘reverse sexism,’ and ‘cisphobia’\n- Reasonable communication of boundaries, such as “leave me alone,” “go away,” or “I’m not discussing this with you”\n- Refusal to explain or debate social justice concepts\n- Communicating in a ‘tone’ you don’t find congenial\n- Criticizing racist, sexist, cissexist, or otherwise oppressive behavior or assumptions\n\n### Diversity Statement\n\nWe encourage everyone to participate and are committed to building a community for all. Although we will fail at times, we seek to treat everyone both as fairly and equally as possible. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong.\n\nAlthough this list cannot be exhaustive, we explicitly honor diversity in age, gender, gender identity or expression, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected\ncharacteristics above, including participants with disabilities.\n\n### Reporting Issues\n\nIf you experience or witness unacceptable behavior—or have any other concerns—please report it by contacting us via opensource@github.com. All reports will be handled with discretion. In your report please include:\n\n- Your contact information.\n- Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please\ninclude them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link.\n- Any additional information that may be helpful.\n\nAfter filing a report, a representative will contact you personally, review the incident, follow up with any additional questions, and make a decision as to how to respond. If the person who is harassing you is part of the response team, they will recuse themselves from handling your incident. If the complaint originates from a member of the response team, it will be handled by a different member of the response team. We will respect confidentiality requests for the purpose of protecting victims of abuse.\n\n### Attribution & Acknowledgements\n\nWe all stand on the shoulders of giants across many open source communities.  We'd like to thank the communities and projects that established code of conducts and diversity statements as our inspiration:\n\n* [Django](https://www.djangoproject.com/conduct/reporting/)\n* [Python](https://www.python.org/community/diversity/)\n* [Ubuntu](http://www.ubuntu.com/about/about-ubuntu/conduct)\n* [Contributor Covenant](http://contributor-covenant.org/)\n* [Geek Feminism](http://geekfeminism.org/about/code-of-conduct/)\n* [Citizen Code of Conduct](http://citizencodeofconduct.org/)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.5927734375,
          "content": "## Contributing to Git Large File Storage\n\nHi there! We're thrilled that you'd like to contribute to this project. Your\nhelp is essential for making it the best it can be.\n\nContributions to this project are [released](https://help.github.com/articles/github-terms-of-service/#6-contributions-under-repository-license) to the public under the [project's open source license](LICENSE.md).\n\nThis project adheres to the [Open Code of Conduct](./CODE-OF-CONDUCT.md). By participating, you are expected to uphold this code.\n\n## Feature Requests\n\nFeature requests are welcome, but will have a much better chance of being\naccepted if they meet the first principles for the project. Git LFS is intended\nfor end users, not Git experts. It should fit into the standard workflow as\nmuch as possible, and require little client configuration.\n\n* Large objects are pushed to Git LFS servers during git push.\n* Large objects are downloaded during git checkout.\n* Git LFS servers are linked to Git remotes by default. Git hosts can support\nusers without requiring them to set up anything extra. Users can access\ndifferent Git LFS servers like they can with different Git remotes.\n* Upload and download requests should use the same form of authentication built\ninto Git: SSH through public keys, and HTTPS through Git credential helpers.\n* Git LFS servers use a JSON API designed around progressive enhancement.\nServers can simply host off cloud storage, or implement more efficient methods\nof transferring data.\n\nSince the focus for the project is on end users, we're generally hesitant about\nintroducing new features that make data loss easy or are prone to misuse.\nHowever, we're not necessarily opposed to adding generally applicable\ncustomizability or features for advanced users if they don't conflict with other\nproject goals.\n\n## Project Management\n\nThe Git LFS project is managed completely through this open source project. The\n[milestones][] show the high level items that are prioritized for future work.\nSuggestions for major features should be submitted as a pull request that adds a\nmarkdown file to `docs/proposals` discussing the feature. This gives the\ncommunity time to discuss it before a lot of code has been written.\n\n[milestones]: https://github.com/git-lfs/git-lfs/milestones\n\nThe Git LFS teams mark issues and pull requests with the following labels:\n\n* `bug` - An issue describing a bug.\n* `enhancement` - An issue for a possible new feature.\n* `review` - A pull request ready to be reviewed.\n* `release` - A checklist issue showing items marked for an upcoming release.\n\n## Branching strategy\n\nIn general, contributors should develop on branches based off of `main` and pull requests should be to `main`.\n\n## Submitting a pull request\n\n1. [Fork][] and clone the repository\n1. Configure and install the dependencies: `make`\n1. Make sure the tests pass on your machine: `make test`\n1. Create a new branch based on `main`: `git checkout -b <my-branch-name> main`\n1. Make your change, add tests, and make sure the tests still pass\n1. Push to your fork and [submit a pull request][pr] from your branch to `main`\n1. Pat yourself on the back and wait for your pull request to be reviewed\n\nHere are a few things you can do that will increase the likelihood of your pull request being accepted:\n\n* Follow the [style guide][style] where possible.\n* Write tests.\n* Update documentation as necessary.  Commands have [man pages](./docs/man).\n* Keep your change as focused as possible. If there are multiple changes you\nwould like to make that are not dependent upon each other, consider submitting\nthem as separate pull requests.\n* Write a [good commit message](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).\n* Explain the rationale for your change in the pull request. You can often use\n  part of a good commit message as a starting point.\n\n## Discussions\n\n[Our discussions](https://github.com/git-lfs/git-lfs/discussions) are the\nperfect place to ask a question if you're not sure on something, provide\nfeedback that isn't a bug report or feature request, or learn about use cases or\nbest practices with Git LFS.  There's even a search box to help you see if\nsomeone has already answered your question!\n\nYou can also check [the FAQ](https://github.com/git-lfs/git-lfs/blob/main/docs/man/git-lfs-faq.adoc)\nto see if your question is well known and already has an easy answer.\n\n## Issues\n\nIf you think you've found a bug or have an issue, we'd love to hear about it!\nHere are some tips for getting your question answered as quickly as possible:\n\n* It's helpful if your issue includes the output of `git lfs env`, plus any\n  relevant information about platform or configuration (e.g., container or CI\n  usage, Cygwin, WSL, or non-Basic authentication).\n* Take a look at the\n  [troubleshooting](https://github.com/git-lfs/git-lfs/wiki/Troubleshooting) and\n  [FAQ](https://github.com/git-lfs/git-lfs/wiki/FAQ) pages on the wiki. We\n  update them from time to time with information on how to track down problems.\n  If it seems relevant, include any information you've learned by following\n  those steps.\n* If you're having problems with GitHub's server-side LFS support, it's best to\n  reach out to [GitHub's support team](https://github.com/contact) to get help.\n  We aren't able to address GitHub-specific issues in this project, but the\n  GitHub support team will do their best to help you out.\n* If you see an old issue that's closed as fixed, but you're still experiencing\n  the problem on your system, please open a new issue. The problem you're seeing\n  is likely different, at least in the way it works internally, and we can help\n  best when we have a new issue with all the information.\n\n## Building\n\n### Prerequisites\n\nGit LFS depends on having a working Go development environment.  We officially\nsupport the latest version of Go, although we try not to break backwards\ncompatibility with older versions if it's possible to avoid doing so.\n\nOn RHEL etc. e.g. Red Hat Enterprise Linux Server release 7.2 (Maipo), you will need the minimum packages installed to build Git LFS:\n\n```ShellSession\n$ sudo yum install gcc\n$ sudo yum install perl-Digest-SHA\n```\n\nIn order to run the RPM build `rpm/build_rpms.bsh` you will also need to:\n\n```ShellSession\n$ sudo yum install ruby-devel\n```\n\n(note on an AWS instance you may first need to `sudo yum-config-manager --enable rhui-REGION-rhel-server-optional`)\n\n### Building Git LFS\n\nThe easiest way to download Git LFS for making changes is `git clone`:\n\n```ShellSession\n$ git clone git@github.com:git-lfs/git-lfs.git\n$ cd git-lfs\n```\n\nFrom here, run `make` to build Git LFS in the `./bin` directory. Before\nsubmitting changes, be sure to run the Go tests and the shell integration\ntests:\n\n```ShellSession\n$ make test          # runs just the Go tests\n$ cd t && make test  # runs the shell tests in ./test\n$ script/cibuild     # runs everything, with verbose debug output\n```\n\n## Updating 3rd party packages\n\n1. Update `go.mod` and `go.sum`. You can ensure the latter is up-to-date by\n   using Go tools instead of manually editing `go.mod` (e.g., `go get\n   gopath@version`) or by running `go mod tidy` or `make go.sum`.\n1. Commit the change.\n1. Submit a pull request.\n\n## Releasing\n\nIf you are the current maintainer, see\n[the release howto](./docs/howto/release-git-lfs.md) for how to perform a release.\n\n## Resources\n\n- [Contributing to Open Source on GitHub](https://guides.github.com/activities/contributing-to-open-source/)\n- [Using Pull Requests](https://help.github.com/articles/using-pull-requests/)\n- [GitHub Help](https://help.github.com)\n\n[fork]: https://github.com/git-lfs/git-lfs/fork\n[pr]: https://github.com/git-lfs/git-lfs/compare\n[style]: https://github.com/golang/go/wiki/CodeReviewComments\n"
        },
        {
          "name": "INSTALLING.md",
          "type": "blob",
          "size": 2.9951171875,
          "content": "# Installing on Linux using packagecloud\n\n[packagecloud](https://packagecloud.io) hosts [`git-lfs` packages](https://packagecloud.io/github/git-lfs) for popular Linux distributions with apt/deb and yum/rpm based package-managers.  Installing from packagecloud is reasonably straightforward and involves two steps:\n\n## 1. Adding the packagecloud repository\n\npackagecloud provides scripts to automate the process of configuring the package repository on your system, importing signing-keys etc.  These scripts must be run sudo root, and you should review them first.  The scripts are:\n\n* apt/deb repositories: https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh\n* yum/rpm repositories: https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh\n\nThe scripts check your Linux distribution and version, and use those parameters to create the best repository URL.  If you are running one of the distributions listed for the latest version of Git LFS listed at [packagecloud](https://packagecloud.io/github/git-lfs) e.g `debian/jessie`, `el/7`, you can run the script without parameters:\n\napt/deb repos:\n`curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash`\n\nyum/rpm repos:\n`curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | sudo bash`\n\nIf you are running a distribution which does not match exactly a repository uploaded for Git LFS, but for which there is a repository for a compatible upstream distribution, you can either run the script with some additional parameters, or run it and then manually-correct the resulting repository URLs.  See [#1074](https://github.com/git-lfs/git-lfs/issues/1074) for details.\n\nIf you are running LinuxMint 17.1 Rebecca, which is downstream of Ubuntu Trusty and Debian Jessie, you can run:\n\n`curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | os=debian dist=jessie sudo -E bash`\n\nThe `os` and `dist` variables passed-in will override what would be detected for your system and force the selection of the upstream distribution's repository.\n\nYou may also be able to run the following to automatically detect the dist for Ubuntu based distributions such as Pop!_OS:\n```\n(. /etc/lsb-release &&\ncurl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh |\nsudo env os=ubuntu dist=\"${DISTRIB_CODENAME}\" bash)\n```\n\n## 2. Installing packages\n\nWith the packagecloud repository configured for your system, you can install Git LFS:\n\n* apt/deb: `sudo apt-get install git-lfs`\n* yum/rpm: `sudo yum install git-lfs`\n\n## A note about proxies\n\nSeveral of the commands above assume internet access and use `sudo`. If your host is behind a proxy-server that is required for internet access, you may depend on environment-variables `http_proxy` or `https_proxy` being set, and these might not survive the switch to root with `sudo`, which resets environment by-default.  To get around this, you can run `sudo` with the `-E` switch, `sudo -E ...`, which retains environment variables.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 2.751953125,
          "content": "MIT License\n\nCopyright (c) 2014- GitHub, Inc. and Git LFS contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nPortions of the subprocess and tools directories are copied from Go and are\nunder the following license:\n\nCopyright (c) 2009,2010 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nNote that Git LFS uses components from other Go modules, which are under\ndifferent licenses.  See those LICENSE files for details.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 27.1025390625,
          "content": "# GIT_LFS_SHA is the '--short'-form SHA1 of the current revision of Git LFS.\nGIT_LFS_SHA ?= $(shell env -u GIT_TRACE git rev-parse --short HEAD)\n# VERSION is the longer-form describe output of the current revision of Git LFS,\n# used for identifying intermediate releases.\n#\n# If Git LFS is being built for a published release, VERSION and GIT_LFS_SHA\n# should be identical.\nVERSION ?= $(shell env -u GIT_TRACE git describe HEAD)\n\n# PREFIX is VERSION without the leading v, for use in archive prefixes.\nPREFIX ?= $(patsubst v%,git-lfs-%,$(VERSION))\n\n# GO is the name of the 'go' binary used to compile Git LFS.\nGO ?= go\n\n# GOTOOLCHAIN is an environment variable which, when set to 'local',\n# prevents Go from downloading and running non-local versions of itself.\nexport GOTOOLCHAIN = local\n\n# GO_TEST_EXTRA_ARGS are extra arguments given to invocations of 'go test'.\n#\n# Examples include:\n#\n# \tmake test GO_TEST_EXTRA_ARGS=-v\n# \tmake test GO_TEST_EXTRA_ARGS='-run TestMyExample'\nGO_TEST_EXTRA_ARGS =\n\n# BUILTIN_LD_FLAGS are the internal flags used to pass to the linker. By default\n# the config.GitCommit variable is always set via this variable, and\n# DWARF-stripping is enabled unless DWARF=YesPlease.\nBUILTIN_LD_FLAGS =\nifneq (\"$(VENDOR)\",\"\")\nBUILTIN_LD_FLAGS += -X 'github.com/git-lfs/git-lfs/v3/config.Vendor=$(VENDOR)'\nendif\nBUILTIN_LD_FLAGS += -X github.com/git-lfs/git-lfs/v3/config.GitCommit=$(GIT_LFS_SHA)\nifneq (\"$(DWARF)\",\"YesPlease\")\nBUILTIN_LD_FLAGS += -s\nBUILTIN_LD_FLAGS += -w\nendif\n# EXTRA_LD_FLAGS are given by the caller, and are passed to the Go linker after\n# BUILTIN_LD_FLAGS are processed. By default the system LDFLAGS are passed.\nifdef LDFLAGS\nEXTRA_LD_FLAGS ?= -extldflags ${LDFLAGS}\nendif\n# LD_FLAGS is the union of the above two BUILTIN_LD_FLAGS and EXTRA_LD_FLAGS.\nLD_FLAGS = $(BUILTIN_LD_FLAGS) $(EXTRA_LD_FLAGS)\n\n# BUILTIN_GC_FLAGS are the internal flags used to pass compiler.\nBUILTIN_GC_FLAGS =\n# EXTRA_GC_FLAGS are the caller-provided flags to pass to the compiler.\nEXTRA_GC_FLAGS =\n# GC_FLAGS are the union of the above two BUILTIN_GC_FLAGS and EXTRA_GC_FLAGS.\nGC_FLAGS = $(BUILTIN_GC_FLAGS) $(EXTRA_GC_FLAGS)\n\n# RONN is the name of the 'ronn' program used to generate man pages.\nRONN ?= ronn\n# RONN_EXTRA_ARGS are extra arguments given to the $(RONN) program when invoked.\nRONN_EXTRA_ARGS ?=\n\n# ASCIIDOCTOR is the name of the 'asciidoctor' program used to generate man pages.\nASCIIDOCTOR ?= asciidoctor\n# ASCIIDOCTOR_EXTRA_ARGS are extra arguments given to the $(ASCIIDOCTOR) program when invoked.\nASCIIDOCTOR_EXTRA_ARGS ?= -a reproducible\n\n# GREP is the name of the program used for regular expression matching, or\n# 'grep' if unset.\nGREP ?= grep\n# XARGS is the name of the program used to turn stdin into program arguments, or\n# 'xargs' if unset.\nXARGS ?= xargs\n\n# GOIMPORTS is the name of the program formatter used before compiling.\nGOIMPORTS ?= goimports\n# GOIMPORTS_EXTRA_OPTS are the default options given to the $(GOIMPORTS)\n# program.\nGOIMPORTS_EXTRA_OPTS ?= -w -l\n\n# TAR is the tar command, either GNU or BSD (libarchive) tar.\nTAR ?= tar\n\nTAR_XFORM_ARG ?= $(shell $(TAR) --version | grep -q 'GNU tar' && echo '--xform' || echo '-s')\nTAR_XFORM_CMD ?= $(shell $(TAR) --version | grep -q 'GNU tar' && echo 's')\n\n# CERT_SHA1 is the SHA-1 hash of the Windows code-signing cert to use.  The\n# actual signature is made with SHA-256.\nCERT_SHA1 ?= 30a531ed3a246d3d07a4273adaef31552bf6473a\n\n# CERT_FILE is the PKCS#12 file holding the certificate.\nCERT_FILE ?=\n\n# CERT_PASS is the password for the certificate.  It must not contain\n# double-quotes.\nCERT_PASS ?=\n\n# CERT_ARGS are additional arguments to pass when signing Windows binaries.\nifneq (\"$(CERT_FILE)$(CERT_PASS)\",\"\")\nCERT_ARGS ?= -f \"$(CERT_FILE)\" -p \"$(CERT_PASS)\"\nelse\nCERT_ARGS ?= -sha1 $(CERT_SHA1)\nendif\n\n# DARWIN_CERT_ID is a portion of the common name of the signing certificatee.\nDARWIN_CERT_ID ?=\n\n# DARWIN_KEYCHAIN_ID is the name of the keychain (with suffix) where the\n# certificate is located.\nDARWIN_KEYCHAIN_ID ?= CI.keychain\n\nexport DARWIN_DEV_USER DARWIN_DEV_PASS DARWIN_DEV_TEAM\n\n# SOURCES is a listing of all .go files in this and child directories, excluding\n# that in vendor.\nSOURCES = $(shell find . -type f -name '*.go' | grep -v vendor)\n\n# MSGFMT is the GNU gettext msgfmt binary.\nMSGFMT ?= msgfmt\n\n# PO is a list of all the po (gettext source) files.\nPO = $(wildcard po/*.po)\n\n# MO is a list of all the mo (gettext compiled) files to be built.\nMO = $(patsubst po/%.po,po/build/%.mo,$(PO))\n\n# XGOTEXT is the string extractor for gotext.\nXGOTEXT ?= xgotext\n\n# CODESIGN is the macOS signing tool.\nCODESIGN ?= codesign\n\n# SIGNTOOL is the Windows signing tool.\nSIGNTOOL ?= signtool.exe\n\n# FORCE_LOCALIZE forces localization to be run if set to non-empty.\nFORCE_LOCALIZE ?=\n\n# PKGS is a listing of packages that are considered to be a part of Git LFS, and\n# are used in package-specific commands, such as the 'make test' targets. For\n# example:\n#\n# \tmake test                               # run 'go test' in all packages\n# \tmake PKGS='config git/githistory' test  # run 'go test' in config and\n# \t                                        # git/githistory\n#\n# By default, it is a listing of all packages in Git LFS. When new packages (or\n# sub-packages) are created, they should be added here.\nifndef PKGS\nPKGS =\nPKGS += commands\nPKGS += config\nPKGS += creds\nPKGS += errors\nPKGS += filepathfilter\nPKGS += fs\nPKGS += git\nPKGS += git/gitattr\nPKGS += git/githistory\nPKGS += git\nPKGS += lfs\nPKGS += lfsapi\nPKGS += lfshttp\nPKGS += locking\nPKGS += ssh\nPKGS += subprocess\nPKGS += tasklog\nPKGS += tools\nPKGS += tools/humanize\nPKGS += tools/kv\nPKGS += tr\nPKGS += tq\nendif\n\n# X is the platform-specific extension for Git LFS binaries. It is automatically\n# set to .exe on Windows, and the empty string on all other platforms. It may be\n# overridden.\n#\n# BUILD_MAIN is the main \".go\" file that contains func main() for Git LFS. On\n# macOS and other non-Windows platforms, it is required that a specific\n# entrypoint be given, hence the below conditional. On Windows, it is required\n# that an entrypoint not be given so that goversioninfo can successfully embed\n# the resource.syso file (for more, see below).\n#\n# BSDTAR is BSD (libarchive) tar.\nifeq ($(OS),Windows_NT)\nX ?= .exe\nBUILD_MAIN ?=\nBSDTAR ?= C:/Windows/system32/tar.exe\nelse\nX ?=\nBUILD_MAIN ?= ./git-lfs.go\nBSDTAR ?= $(shell $(TAR) --version | grep -q 'GNU tar' && echo bsdtar || echo $(TAR))\nendif\n\n# BUILD is a macro used to build a single binary of Git LFS using the above\n# LD_FLAGS and GC_FLAGS.\n#\n# It takes three arguments:\n#\n# \t$(1) - a valid GOOS value, or empty-string\n# \t$(2) - a valid GOARCH value, or empty-string\n# \t$(3) - an optional program extension. If $(3) is given as '-foo', then the\n# \t       program will be written to bin/git-lfs-foo.\n#\n# It uses BUILD_MAIN as defined above to specify the entrypoint for building Git\n# LFS.\nBUILD = GOOS=$(1) GOARCH=$(2) \\\n\t$(GO) build \\\n\t-ldflags=\"$(LD_FLAGS)\" \\\n\t-gcflags=\"$(GC_FLAGS)\" \\\n\t-trimpath \\\n\t-o ./bin/git-lfs$(3) $(BUILD_MAIN)\n\n# BUILD_TARGETS is the set of all platforms and architectures that Git LFS is\n# built for.\nBUILD_TARGETS = \\\n\tbin/git-lfs-darwin-amd64 \\\n\tbin/git-lfs-darwin-arm64 \\\n\tbin/git-lfs-linux-arm \\\n\tbin/git-lfs-linux-arm64 \\\n\tbin/git-lfs-linux-amd64 \\\n\tbin/git-lfs-linux-ppc64le \\\n\tbin/git-lfs-linux-riscv64 \\\n\tbin/git-lfs-linux-s390x \\\n\tbin/git-lfs-linux-loong64 \\\n\tbin/git-lfs-linux-386 \\\n\tbin/git-lfs-freebsd-amd64 \\\n\tbin/git-lfs-freebsd-386 \\\n\tbin/git-lfs-windows-amd64.exe \\\n\tbin/git-lfs-windows-386.exe \\\n\tbin/git-lfs-windows-arm64.exe\n\n# mangen is a shorthand for ensuring that commands/mancontent_gen.go is kept\n# up-to-date with the contents of docs/man/*.ronn.\n.PHONY : mangen\nmangen : commands/mancontent_gen.go\n\n# commands/mancontent_gen.go is generated by running 'go generate' on package\n# 'commands' of Git LFS. It depends upon the contents of the 'docs' directory\n# and converts those manpages into code.\ncommands/mancontent_gen.go : $(wildcard docs/man/*.adoc)\n\tGOOS= GOARCH= $(GO) generate github.com/git-lfs/git-lfs/v3/commands\n\n# trgen is a shorthand for ensuring that tr/tr_gen.go is kept up-to-date with\n# the contents of po/build/*.mo.\n.PHONY : trgen\ntrgen : tr/tr_gen.go\n\n# tr/tr_gen.go is generated by running 'go generate' on package\n# 'tr' of Git LFS. It depends upon the contents of the 'po' directory\n# and converts the .mo files.\ntr/tr_gen.go : $(MO)\n\tGOOS= GOARCH= $(GO) generate github.com/git-lfs/git-lfs/v3/tr\n\npo/build:\n\tmkdir -p po/build\n\n# These targets build the MO files.\npo/build/%.mo: po/%.po po/build\nifeq ($(FORCE_LOCALIZE),)\n\tif command -v $(MSGFMT) >/dev/null 2>&1; \\\n\tthen \\\n\t\t$(MSGFMT) -o $@ $<; \\\n\tfi\nelse\n\t$(MSGFMT) -o $@ $<\nendif\n\npo/i-reverse.po: po/default.pot\n\tscript/gen-i-reverse $< $@\n\npo/default.pot:\n\tif command -v $(XGOTEXT) >/dev/null 2>&1; \\\n\tthen \\\n\t\t$(XGOTEXT) -in . -exclude .git,.github,vendor -out po -v; \\\n\tfi\n\n# Targets 'all' and 'build' build binaries of Git LFS for the above release\n# matrix.\n.PHONY : all build\nall build : $(BUILD_TARGETS)\n\n# The following bin/git-lfs-% targets make a single binary compilation of Git\n# LFS for a specific operating system and architecture pair.\n#\n# They function by translating target names into arguments for the above BUILD\n# builtin, and appending the appropriate suffix to the build target.\n#\n# On Windows, they also depend on the resource.syso target, which installs and\n# embeds the versioninfo into the binary.\nbin/git-lfs-darwin-amd64 : $(SOURCES) mangen trgen\n\t$(call BUILD,darwin,amd64,-darwin-amd64)\nbin/git-lfs-darwin-arm64 : $(SOURCES) mangen trgen\n\t$(call BUILD,darwin,arm64,-darwin-arm64)\nbin/git-lfs-linux-arm : $(SOURCES) mangen trgen\n\tGOARM=5 $(call BUILD,linux,arm,-linux-arm)\nbin/git-lfs-linux-arm64 : $(SOURCES) mangen trgen\n\t$(call BUILD,linux,arm64,-linux-arm64)\nbin/git-lfs-linux-amd64 : $(SOURCES) mangen trgen\n\t$(call BUILD,linux,amd64,-linux-amd64)\nbin/git-lfs-linux-ppc64le : $(SOURCES) mangen trgen\n\t$(call BUILD,linux,ppc64le,-linux-ppc64le)\nbin/git-lfs-linux-riscv64 : $(SOURCES) mangen trgen\n\t$(call BUILD,linux,riscv64,-linux-riscv64)\nbin/git-lfs-linux-loong64 : $(SOURCES) mangen trgen\n\t$(call BUILD,linux,loong64,-linux-loong64)\nbin/git-lfs-linux-s390x : $(SOURCES) mangen trgen\n\t$(call BUILD,linux,s390x,-linux-s390x)\nbin/git-lfs-linux-386 : $(SOURCES) mangen trgen\n\t$(call BUILD,linux,386,-linux-386)\nbin/git-lfs-freebsd-amd64 : $(SOURCES) mangen trgen\n\t$(call BUILD,freebsd,amd64,-freebsd-amd64)\nbin/git-lfs-freebsd-386 : $(SOURCES) mangen trgen\n\t$(call BUILD,freebsd,386,-freebsd-386)\nbin/git-lfs-windows-amd64.exe : resource.syso $(SOURCES) mangen trgen\n\t$(call BUILD,windows,amd64,-windows-amd64.exe)\nbin/git-lfs-windows-386.exe : resource.syso $(SOURCES) mangen trgen\n\t$(call BUILD,windows,386,-windows-386.exe)\nbin/git-lfs-windows-arm64.exe : resource.syso $(SOURCES) mangen trgen\n\t$(call BUILD,windows,arm64,-windows-arm64.exe)\n\n# .DEFAULT_GOAL sets the operating system-appropriate Git LFS binary as the\n# default output of 'make'.\n.DEFAULT_GOAL := bin/git-lfs$(X)\n\n# bin/git-lfs targets the default output of Git LFS on non-Windows operating\n# systems, and respects the build knobs as above.\nbin/git-lfs : $(SOURCES) fmt mangen trgen\n\t$(call BUILD,$(GOOS),$(GOARCH),)\n\n# bin/git-lfs.exe targets the default output of Git LFS on Windows systems, and\n# respects the build knobs as above.\nbin/git-lfs.exe : $(SOURCES) resource.syso mangen trgen\n\t$(call BUILD,$(GOOS),$(GOARCH),.exe)\n\n# resource.syso installs the 'goversioninfo' command and uses it in order to\n# generate a binary that has information included necessary to create the\n# Windows installer.\n#\n# Generating a new resource.syso is a pure function of the contents in the\n# prerequisites listed below.\nresource.syso : \\\nversioninfo.json script/windows-installer/git-lfs-logo.bmp \\\nscript/windows-installer/git-lfs-logo.ico \\\nscript/windows-installer/git-lfs-wizard-image.bmp\n\t$(GO) generate\n\n# RELEASE_TARGETS is the set of all release artifacts that we generate over a\n# particular release. They each have a corresponding entry in BUILD_TARGETS as\n# above.\n#\n# Unlike BUILD_TARGETS above, each of the below create a compressed directory\n# containing the matching binary, as well as the contents of RELEASE_INCLUDES\n# below.\n#\n# To build a specific release, execute the following:\n#\n# \tmake bin/releases/git-lfs-darwin-amd64-$(git describe HEAD).tar.gz\n#\n# To build a specific release with a custom VERSION suffix, run the following:\n#\n# \tmake VERSION=my-version bin/releases/git-lfs-darwin-amd64-my-version.tar.gz\nRELEASE_TARGETS = \\\n\tbin/releases/git-lfs-darwin-amd64-$(VERSION).zip \\\n\tbin/releases/git-lfs-darwin-arm64-$(VERSION).zip \\\n\tbin/releases/git-lfs-linux-arm-$(VERSION).tar.gz \\\n\tbin/releases/git-lfs-linux-arm64-$(VERSION).tar.gz \\\n\tbin/releases/git-lfs-linux-amd64-$(VERSION).tar.gz \\\n\tbin/releases/git-lfs-linux-ppc64le-$(VERSION).tar.gz \\\n\tbin/releases/git-lfs-linux-riscv64-$(VERSION).tar.gz \\\n\tbin/releases/git-lfs-linux-s390x-$(VERSION).tar.gz \\\n\tbin/releases/git-lfs-linux-loong64-$(VERSION).tar.gz \\\n\tbin/releases/git-lfs-linux-386-$(VERSION).tar.gz \\\n\tbin/releases/git-lfs-freebsd-amd64-$(VERSION).tar.gz \\\n\tbin/releases/git-lfs-freebsd-386-$(VERSION).tar.gz \\\n\tbin/releases/git-lfs-windows-amd64-$(VERSION).zip \\\n\tbin/releases/git-lfs-windows-386-$(VERSION).zip \\\n\tbin/releases/git-lfs-windows-arm64-$(VERSION).zip \\\n\tbin/releases/git-lfs-$(VERSION).tar.gz\n\n# RELEASE_INCLUDES are the names of additional files that are added to each\n# release artifact.\nRELEASE_INCLUDES = README.md CHANGELOG.md man\n\n# release is a phony target that builds all of the release artifacts, and then\n# shows the SHA 256 signature of each.\n#\n# To build all of the release binaries for a given Git LFS release:\n#\n# \tmake release\n.PHONY : release\nrelease : $(RELEASE_TARGETS)\n\tshasum -a 256 $(RELEASE_TARGETS)\n\n# bin/releases/git-lfs-%-$(VERSION).tar.gz generates a gzip-compressed TAR of\n# the non-Windows and non-macOS release artifacts.\n#\n# It includes all of RELEASE_INCLUDES, as well as script/install.sh.\nbin/releases/git-lfs-%-$(VERSION).tar.gz : \\\n$(RELEASE_INCLUDES) bin/git-lfs-% script/install.sh\n\t@mkdir -p bin/releases\n\t$(TAR) $(TAR_XFORM_ARG) '$(TAR_XFORM_CMD)!bin/git-lfs-.*!$(PREFIX)/git-lfs!' \\\n\t\t$(TAR_XFORM_ARG) '$(TAR_XFORM_CMD)!script/!$(PREFIX)/!' \\\n\t\t$(TAR_XFORM_ARG) '$(TAR_XFORM_CMD)!\\(.*\\)\\.md!$(PREFIX)/\\1.md!' \\\n\t\t$(TAR_XFORM_ARG) '$(TAR_XFORM_CMD)!man!$(PREFIX)/man!' \\\n\t\t--posix -czf $@ $^\n\n# bin/releases/git-lfs-darwin-$(VERSION).zip generates a ZIP compression of all\n# of the macOS release artifacts.\n#\n# It includes all of the RELEASE_INCLUDES, as well as script/install.sh.\nbin/releases/git-lfs-darwin-%-$(VERSION).zip : \\\n$(RELEASE_INCLUDES) bin/git-lfs-darwin-% script/install.sh\n\t@mkdir -p bin/releases\n\t$(BSDTAR) --format zip \\\n\t\t-s '!bin/git-lfs-.*!$(PREFIX)/git-lfs!' \\\n\t\t-s '!script/!$(PREFIX)/!' \\\n\t\t-s '!\\(.*\\)\\.md!$(PREFIX)/\\1.md!' \\\n\t\t-s '!man!$(PREFIX)/man!' \\\n\t\t-cf $@ $^\n\n# bin/releases/git-lfs-windows-$(VERSION).zip generates a ZIP compression of all\n# of the Windows release artifacts.\n#\n# It includes all of the RELEASE_INCLUDES, and converts LF-style line endings to\n# CRLF in the non-binary components of the artifact.\nbin/releases/git-lfs-windows-%-$(VERSION).zip : $(RELEASE_INCLUDES) bin/git-lfs-windows-%.exe\n\t@mkdir -p bin/releases\n\t# Windows's bsdtar doesn't support -s, so do the same thing as for Darwin, but\n\t# by hand.\n\ttemp=$$(mktemp -d); \\\n\tfile=\"$$PWD/$@\" && \\\n\tmkdir -p \"$$temp/$(PREFIX)/man\" && \\\n\tcp -r $^ \"$$temp/$(PREFIX)\" && \\\n\t(cd \"$$temp\" && $(BSDTAR) --format zip -cf \"$$file\" $(PREFIX)) && \\\n\t$(RM) -r \"$$temp\"\n\n# bin/releases/git-lfs-$(VERSION).tar.gz generates a tarball of the source code.\n#\n# This is useful for third parties who wish to have a bit-for-bit identical\n# source archive to download and verify cryptographically.\nbin/releases/git-lfs-$(VERSION).tar.gz :\n\tgit archive -o $@ --prefix=$(PREFIX)/ --format tar.gz $(VERSION)\n\n# release-linux is a target that builds Linux packages. It must be run on a\n# system with Docker that can run Linux containers.\n.PHONY : release-linux\nrelease-linux:\n\t./docker/run_dockers.bsh\n\n# release-windows-stage-1 is a target that builds the Windows Git LFS binaries\n# and prepares them for signing.  It must be run on a Windows machine under Git\n# Bash.\n.PHONY : release-windows-stage-1\nrelease-windows-stage-1: tmp/stage1\n\n# After this stage completes, the binaries in this directory will be signed.\ntmp/stage1:\n\t$(RM) -r tmp/stage1\n\t@mkdir -p tmp/stage1\n\t@# Using these particular filenames is required for the Inno Setup script to\n\t@# work properly.\n\t$(MAKE) -B GOOS=windows X=.exe GOARCH=amd64 && cp ./bin/git-lfs.exe ./git-lfs-x64.exe\n\t$(MAKE) -B GOOS=windows X=.exe GOARCH=386 && cp ./bin/git-lfs.exe ./git-lfs-x86.exe\n\t$(MAKE) -B GOOS=windows X=.exe GOARCH=arm64 && cp ./bin/git-lfs.exe ./git-lfs-arm64.exe\n\tmv git-lfs-x64.exe git-lfs-x86.exe git-lfs-arm64.exe tmp/stage1\n\n# release-windows-stage-2 is a target that builds the InnoSetup installer and\n# prepares it for signing.  It must be run on a Windows machine under Git Bash.\n.PHONY : release-windows-stage-2\nrelease-windows-stage-2: tmp/stage2\n\n# After this stage completes, the binaries in tmp/stage2 will be signed.\ntmp/stage2: tmp/stage1\n\tcp tmp/stage1/*.exe .\n\t@# The git-lfs-windows-*.exe file will be named according to the version\n\t@# number in the versioninfo.json, not according to $(VERSION).\n\tiscc.exe script/windows-installer/inno-setup-git-lfs-installer.iss\n\tmv git-lfs-windows-*.exe git-lfs-windows.exe\n\t$(RM) -r tmp/stage2\n\t@mkdir -p tmp/stage2\n\tcp git-lfs-windows.exe tmp/stage2\n\n# release-windows-stage-3 is a target that produces an archive from signed\n# Windows binaries from the previous stages.  It must be run on a Windows\n# machine under Git Bash.\n.PHONY : release-windows-stage-3\nrelease-windows-stage-3: bin/releases/git-lfs-windows-assets-$(VERSION).tar.gz\n\nbin/releases/git-lfs-windows-assets-$(VERSION).tar.gz : tmp/stage1 tmp/stage2\n\tmv tmp/stage1/git-lfs-x64.exe git-lfs-windows-amd64.exe\n\tmv tmp/stage1/git-lfs-x86.exe git-lfs-windows-386.exe\n\tmv tmp/stage1/git-lfs-arm64.exe git-lfs-windows-arm64.exe\n\tmv tmp/stage2/git-lfs-windows.exe git-lfs-windows.exe\n\t@# We use tar because Git Bash doesn't include zip.\n\t$(TAR) -czf $@ git-lfs-windows-amd64.exe git-lfs-windows-386.exe git-lfs-windows-arm64.exe git-lfs-windows.exe\n\t$(RM) git-lfs-windows-amd64.exe git-lfs-windows-386.exe git-lfs-windows-arm64.exe git-lfs-windows.exe\n\n# release-windows-rebuild takes the archive produced by release-windows and\n# incorporates the signed binaries into the existing zip archives.\n.PHONY : release-windows-rebuild\nrelease-windows-rebuild: bin/releases/git-lfs-windows-assets-$(VERSION).tar.gz\n\ttemp=$$(mktemp -d); \\\n\tfile=\"$$PWD/$^\"; \\\n\troot=\"$$PWD\" && \\\n\t\t( \\\n\t\t\ttar -C \"$$temp\" -xzf \"$$file\" && \\\n\t\t\tfor i in 386 amd64 arm64; do \\\n\t\t\t\ttemp2=\"$$(mktemp -d)\" && \\\n\t\t\t\t$(BSDTAR) -C \"$$temp2\" -xf \"$$root/bin/releases/git-lfs-windows-$$i-$(VERSION).zip\" && \\\n\t\t\t\trm -f \"$$temp2/$(PREFIX)/\"git-lfs*.exe && \\\n\t\t\t\tcp \"$$temp/git-lfs-windows-$$i.exe\" \"$$temp2/$(PREFIX)/git-lfs.exe\" && \\\n\t\t\t\t(cd \"$$temp2\" && $(BSDTAR) --format=zip -cf \"$$root/bin/releases/git-lfs-windows-$$i-$(VERSION).zip\" $(PREFIX)) && \\\n\t\t\t\trm -fr \"$$temp2\"; \\\n\t\t\tdone && \\\n\t\t\tcp \"$$temp/git-lfs-windows.exe\" bin/releases/git-lfs-windows-$(VERSION).exe \\\n\t\t); \\\n\t\tstatus=\"$$?\"; [ -n \"$$temp\" ] && $(RM) -r \"$$temp\"; exit \"$$status\"\n\n# release-darwin is a target that builds and signs Darwin (macOS) binaries.  It must\n# be run on a macOS machine with a suitable version of XCode.\n#\n# You may sign with a different certificate by specifying DARWIN_CERT_ID.\n.PHONY : release-darwin\nrelease-darwin: bin/releases/git-lfs-darwin-amd64-$(VERSION).zip bin/releases/git-lfs-darwin-arm64-$(VERSION).zip\n\tfor i in $^; do \\\n\t\ttemp=$$(mktemp -d) && \\\n\t\troot=$$(pwd -P) && \\\n\t\t( \\\n\t\t\t$(BSDTAR) -C \"$$temp\" -xf \"$$i\" && \\\n\t\t\t$(CODESIGN) --keychain $(DARWIN_KEYCHAIN_ID) -s \"$(DARWIN_CERT_ID)\" --force --timestamp -vvvv --options runtime \"$$temp/$(PREFIX)/git-lfs\" && \\\n\t\t\t$(CODESIGN) -dvvv \"$$temp/$(PREFIX)/git-lfs\" && \\\n\t\t\t(cd \"$$temp\" && $(BSDTAR) --format zip -cf \"$$root/$$i\" \"$(PREFIX)\") && \\\n\t\t\t$(CODESIGN) --keychain $(DARWIN_KEYCHAIN_ID) -s \"$(DARWIN_CERT_ID)\" --force --timestamp -vvvv --options runtime \"$$i\" && \\\n\t\t\t$(CODESIGN) -dvvv \"$$i\" && \\\n\t\t\tjq -e \".notarize.path = \\\"$$i\\\" | .apple_id.username = \\\"$(DARWIN_DEV_USER)\\\"\" script/macos/manifest.json > \"$$temp/manifest.json\"; \\\n\t\t\tfor j in 1 2 3; \\\n\t\t\tdo \\\n\t\t\t\tscript/notarize \"$$i\" && break; \\\n\t\t\tdone; \\\n\t\t); \\\n\t\tstatus=\"$$?\"; [ -n \"$$temp\" ] && $(RM) -r \"$$temp\"; [ \"$$status\" -eq 0 ] || exit \"$$status\"; \\\n\tdone\n\n.PHONY : release-write-certificate\nrelease-write-certificate:\n\t@echo \"Writing certificate to $(CERT_FILE)\"\n\t@echo \"$$CERT_CONTENTS\" | base64 --decode >\"$$CERT_FILE\"\n\t@printf 'Wrote %d bytes (SHA256 %s) to certificate file\\n' $$(wc -c <\"$$CERT_FILE\") $$(shasum -ba 256 \"$$CERT_FILE\" | cut -d' ' -f1)\n\n# release-import-certificate imports the given certificate into the macOS\n# keychain \"CI\".  It is not generally recommended to run this on a user system,\n# since it creates a new keychain and modifies the keychain search path.\n.PHONY : release-import-certificate\nrelease-import-certificate:\n\t@[ -n \"$(CI)\" ] || { echo \"Don't run this target by hand.\" >&2; false; }\n\t@echo \"Creating CI keychain\"\n\tsecurity create-keychain -p default CI.keychain\n\tsecurity set-keychain-settings CI.keychain\n\tsecurity unlock-keychain -p default CI.keychain\n\t@echo \"Importing certificate from $(CERT_FILE)\"\n\t@security import \"$$CERT_FILE\" -f pkcs12 -k CI.keychain -P \"$$CERT_PASS\" -A\n\t@echo \"Verifying import and setting permissions\"\n\tsecurity list-keychains -s CI.keychain\n\tsecurity default-keychain -s CI.keychain\n\tsecurity set-key-partition-list -S apple-tool:,apple:,codesign: -s -k default CI.keychain\n\tsecurity find-identity -vp codesigning CI.keychain\n\n# TEST_TARGETS is a list of all phony test targets. Each one of them corresponds\n# to a specific kind or subset of tests to run.\nTEST_TARGETS := test-bench test-verbose test-race\n.PHONY : $(TEST_TARGETS) test\n$(TEST_TARGETS) : test\n\n# test-bench runs all Go benchmark tests, and nothing more.\ntest-bench : GO_TEST_EXTRA_ARGS=-run=__nothing__ -bench=.\n# test-verbose runs all Go tests in verbose mode.\ntest-verbose : GO_TEST_EXTRA_ARGS=-v\n# test-race runs all Go tests in race-detection mode.\ntest-race : GO_TEST_EXTRA_ARGS=-race\n\n# test runs the Go tests with GO_TEST_EXTRA_ARGS in all specified packages,\n# given by the PKGS variable.\n#\n# For example, a caller can invoke the race-detection tests in just the config\n# package by running:\n#\n# \t\tmake PKGS=config test-race\n#\n# Or in a series of packages, like:\n#\n# \t\tmake PKGS=\"config lfsapi tools/kv\" test-race\n#\n# And so on.\ntest : fmt $(.DEFAULT_GOAL)\n\t( \\\n\t\tunset GIT_DIR; unset GIT_WORK_TREE; unset XDG_CONFIG_HOME; unset XDG_RUNTIME_DIR; \\\n\t\ttempdir=\"$$(mktemp -d)\"; \\\n\t\texport HOME=\"$$tempdir\"; \\\n\t\texport GIT_CONFIG_NOSYSTEM=1; \\\n\t\t$(GO) test -count=1 $(GO_TEST_EXTRA_ARGS) $(addprefix ./,$(PKGS)); \\\n\t\tRET=$$?; \\\n\t\tchmod -R u+w \"$$tempdir\"; \\\n\t\trm -fr \"$$tempdir\"; \\\n\t\texit $$RET; \\\n\t)\n\n# integration is a shorthand for running 'make' in the 't' directory.\n.PHONY : integration\nintegration : bin/git-lfs$(X)\n\tmake -C t test\n\n# go.sum is a lockfile based on the contents of go.mod.\ngo.sum : go.mod\n\t$(GO) mod verify >/dev/null\n\n# vendor updates the go.sum-file, and installs vendored dependencies into\n# the vendor/ sub-tree, removing sub-packages (listed below) that are unused by\n# Git LFS as well as test code.\n.PHONY : vendor\nvendor : go.mod\n\t$(GO) mod vendor -v\n\n# fmt runs goimports over all files in Git LFS (as defined by $(SOURCES) above),\n# and replaces their contents with a formatted one in-place.\n#\n# If $(GOIMPORTS) does not exist, or isn't otherwise executable, this recipe\n# still performs the linting sequence, but gracefully skips over running a\n# non-existent command.\n.PHONY : fmt\nifeq ($(shell test -x \"`command -v $(GOIMPORTS)`\"; echo $$?),0)\nfmt : $(SOURCES) | lint\n\t@$(GOIMPORTS) $(GOIMPORTS_EXTRA_OPTS) $?;\nelse\nfmt : $(SOURCES) | lint\n\t@echo \"git-lfs: skipping fmt, no goimports found at \\`$(GOIMPORTS)\\` ...\"\nendif\n\n# lint ensures that there are all dependencies outside of the standard library\n# are vendored in via vendor (see: above).\n.PHONY : lint\nlint : $(SOURCES)\n\t@! $(GO) list -f '{{ join .Deps \"\\n\" }}' . \\\n\t| $(XARGS) $(GO) list -f \\\n\t\t'{{ if and (not .Standard) (not .Module) }} \\\n\t\t\t{{ .ImportPath }} \\\n\t\t{{ end }}' \\\n\t| $(GREP) -v \"github.com/git-lfs/git-lfs\" \\\n\t| $(GREP) \".\"\n\n# MAN_ROFF_TARGETS is a list of all ROFF-style targets in the man pages.\nMAN_ROFF_TARGETS = man/man1/git-lfs-checkout.1 \\\n  man/man1/git-lfs-clean.1 \\\n  man/man1/git-lfs-clone.1 \\\n  man/man1/git-lfs-completion.1 \\\n  man/man5/git-lfs-config.5 \\\n  man/man1/git-lfs-dedup.1 \\\n  man/man1/git-lfs-env.1 \\\n  man/man1/git-lfs-ext.1 \\\n  man/man7/git-lfs-faq.7 \\\n  man/man1/git-lfs-fetch.1 \\\n  man/man1/git-lfs-filter-process.1 \\\n  man/man1/git-lfs-fsck.1 \\\n  man/man1/git-lfs-install.1 \\\n  man/man1/git-lfs-lock.1 \\\n  man/man1/git-lfs-locks.1 \\\n  man/man1/git-lfs-logs.1 \\\n  man/man1/git-lfs-ls-files.1 \\\n  man/man1/git-lfs-merge-driver.1 \\\n  man/man1/git-lfs-migrate.1 \\\n  man/man1/git-lfs-pointer.1 \\\n  man/man1/git-lfs-post-checkout.1 \\\n  man/man1/git-lfs-post-commit.1 \\\n  man/man1/git-lfs-post-merge.1 \\\n  man/man1/git-lfs-pre-push.1 \\\n  man/man1/git-lfs-prune.1 \\\n  man/man1/git-lfs-pull.1 \\\n  man/man1/git-lfs-push.1 \\\n  man/man1/git-lfs-smudge.1 \\\n  man/man1/git-lfs-standalone-file.1 \\\n  man/man1/git-lfs-status.1 \\\n  man/man1/git-lfs-track.1 \\\n  man/man1/git-lfs-uninstall.1 \\\n  man/man1/git-lfs-unlock.1 \\\n  man/man1/git-lfs-untrack.1 \\\n  man/man1/git-lfs-update.1 \\\n  man/man1/git-lfs.1\n\n# MAN_HTML_TARGETS is a list of all HTML-style targets in the man pages.\nMAN_HTML_TARGETS = man/html/git-lfs-checkout.1.html \\\n  man/html/git-lfs-clean.1.html \\\n  man/html/git-lfs-clone.1.html \\\n  man/html/git-lfs-completion.1.html \\\n  man/html/git-lfs-config.5.html \\\n  man/html/git-lfs-dedup.1.html \\\n  man/html/git-lfs-env.1.html \\\n  man/html/git-lfs-ext.1.html \\\n  man/html/git-lfs-faq.7.html \\\n  man/html/git-lfs-fetch.1.html \\\n  man/html/git-lfs-filter-process.1.html \\\n  man/html/git-lfs-fsck.1.html \\\n  man/html/git-lfs-install.1.html \\\n  man/html/git-lfs-lock.1.html \\\n  man/html/git-lfs-locks.1.html \\\n  man/html/git-lfs-logs.1.html \\\n  man/html/git-lfs-ls-files.1.html \\\n  man/html/git-lfs-merge-driver.1.html \\\n  man/html/git-lfs-migrate.1.html \\\n  man/html/git-lfs-pointer.1.html \\\n  man/html/git-lfs-post-checkout.1.html \\\n  man/html/git-lfs-post-commit.1.html \\\n  man/html/git-lfs-post-merge.1.html \\\n  man/html/git-lfs-pre-push.1.html \\\n  man/html/git-lfs-prune.1.html \\\n  man/html/git-lfs-pull.1.html \\\n  man/html/git-lfs-push.1.html \\\n  man/html/git-lfs-smudge.1.html \\\n  man/html/git-lfs-standalone-file.1.html \\\n  man/html/git-lfs-status.1.html \\\n  man/html/git-lfs-track.1.html \\\n  man/html/git-lfs-uninstall.1.html \\\n  man/html/git-lfs-unlock.1.html \\\n  man/html/git-lfs-untrack.1.html \\\n  man/html/git-lfs-update.1.html \\\n  man/html/git-lfs.1.html\n\n# man generates all ROFF- and HTML-style manpage targets.\n.PHONY : man\nman : $(MAN_ROFF_TARGETS) $(MAN_HTML_TARGETS)\n\n# man/% generates ROFF-style man pages from the corresponding .ronn file.\nman/man1/%.1 man/man5/%.5 man/man7/%.7 : docs/man/%.adoc\n\t@mkdir -p man/man1 man/man5\n\t$(ASCIIDOCTOR) $(ASCIIDOCTOR_EXTRA_ARGS) -b manpage -o $@ $^\n\n# man/%.html generates HTML-style man pages from the corresponding .ronn file.\nman/html/%.1.html man/html/%.5.html man/html/%.7.html : docs/man/%.adoc\n\t@mkdir -p man/html\n\t$(ASCIIDOCTOR) $(ASCIIDOCTOR_EXTRA_ARGS) -b html5 -o $@ $^\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.90625,
          "content": "# Git Large File Storage\n\n[![CI status][ci_badge]][ci_url]\n\n[ci_badge]: https://github.com/git-lfs/git-lfs/workflows/CI/badge.svg\n[ci_url]: https://github.com/git-lfs/git-lfs/actions?query=workflow%3ACI\n\n[Git LFS](https://git-lfs.github.com) is a command line extension and\n[specification](docs/spec.md) for managing large files with Git.\n\nThe client is written in Go, with pre-compiled binaries available for Mac,\nWindows, Linux, and FreeBSD. Check out the [website](http://git-lfs.github.com)\nfor an overview of features.\n\n## Getting Started\n\n### Installing\n\n#### On Linux\n\nDebian and RPM packages are available from packagecloud, see the [Linux installation instructions](INSTALLING.md).\n\n#### On macOS\n\n[Homebrew](https://brew.sh) bottles are distributed and can be installed via `brew install git-lfs`.\n\n#### On Windows\n\nGit LFS is included in the distribution of [Git for Windows](https://gitforwindows.org/).\nAlternatively, you can install a recent version of Git LFS from the [Chocolatey](https://chocolatey.org/) package manager.\n\n#### From binary\n\n[Binary packages](https://github.com/git-lfs/git-lfs/releases) are\navailable for Linux, macOS, Windows, and FreeBSD.\nThe binary packages include a script which will:\n\n- Install Git LFS binaries onto the system `$PATH`.  On Windows in particular, you may need to restart your command shell so any change to `$PATH` will take effect and Git can locate the Git LFS binary.\n- Run `git lfs install` to perform required global configuration changes.\n\n```ShellSession\n$ ./install.sh\n```\n\nNote that Debian and RPM packages are built for multiple Linux distributions and versions for both amd64 and i386.\nFor arm64, only Debian packages are built and only for recent versions due to the cost of building in emulation.\n\n#### From source\n\n- Ensure you have the latest version of Go, GNU make, and a standard Unix-compatible build environment installed.\n- On Windows, install `goversioninfo` with `go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@latest`.\n- Run `make`.\n- Place the `git-lfs` binary, which can be found in `bin`, on your system’s executable `$PATH` or equivalent.\n- Git LFS requires global configuration changes once per-machine. This can be done by\nrunning: `git lfs install`\n\n#### Verifying releases\n\nReleases are signed with the OpenPGP key of one of the core team members.  To\nget these keys, you can run the following command, which will print them to\nstandard output:\n\n```ShellSession\n$ curl -L https://api.github.com/repos/git-lfs/git-lfs/tarball/core-gpg-keys | tar -Ozxf -\n```\n\nOnce you have the keys, you can download the `sha256sums.asc` file and verify\nthe file you want like so:\n\n```ShellSession\n$ gpg -d sha256sums.asc | grep git-lfs-linux-amd64-v2.10.0.tar.gz | shasum -a 256 -c\n```\n\nFor the convenience of distributors, we also provide a wider variety of signed\nhashes in the `hashes.asc` file.  Those hashes are in the tagged BSD format, but\ncan be verified with Perl's `shasum` or the GNU hash utilities, just like the\nones in `sha256sums.asc`.\n\n## Example Usage\n\nTo begin using Git LFS within a Git repository that is not already configured\nfor Git LFS, you can indicate which files you would like Git LFS to manage.\nThis can be done by running the following _from within a Git repository_:\n\n```bash\n$ git lfs track \"*.psd\"\n```\n\n(Where `*.psd` is the pattern of filenames that you wish to track. You can read\nmore about this pattern syntax\n[here](https://git-scm.com/docs/gitattributes)).\n\n> *Note:* the quotation marks surrounding the pattern are important to\n> prevent the glob pattern from being expanded by the shell.\n\nAfter any invocation of `git-lfs-track(1)` or `git-lfs-untrack(1)`, you _must\ncommit changes to your `.gitattributes` file_. This can be done by running:\n\n```bash\n$ git add .gitattributes\n$ git commit -m \"track *.psd files using Git LFS\"\n```\n\nYou can now interact with your Git repository as usual, and Git LFS will take\ncare of managing your large files. For example, changing a file named `my.psd`\n(tracked above via `*.psd`):\n\n```bash\n$ git add my.psd\n$ git commit -m \"add psd\"\n```\n\n> _Tip:_ if you have large files already in your repository's history, `git lfs\n> track` will _not_ track them retroactively. To migrate existing large files\n> in your history to use Git LFS, use `git lfs migrate`. For example:\n>\n> ```\n> $ git lfs migrate import --include=\"*.psd\" --everything\n> ```\n>\n> **Note that this will rewrite history and change all of the Git object IDs in your\n> repository, just like the export version of this command.**\n>\n> For more information, read [`git-lfs-migrate(1)`](https://github.com/git-lfs/git-lfs/blob/main/docs/man/git-lfs-migrate.adoc).\n\nYou can confirm that Git LFS is managing your PSD file:\n\n```bash\n$ git lfs ls-files\n3c2f7aedfb * my.psd\n```\n\nOnce you've made your commits, push your files to the Git remote:\n\n```bash\n$ git push origin main\nUploading LFS objects: 100% (1/1), 810 B, 1.2 KB/s\n# ...\nTo https://github.com/git-lfs/git-lfs-test\n   67fcf6a..47b2002  main -> main\n```\n\n### Uninstalling\n\nIf you've decided that Git LFS isn't right for you, you can convert your\nrepository back to a plain Git repository with `git lfs migrate` as well.  For\nexample:\n\n```ShellSession\n$ git lfs migrate export --include=\"*.psd\" --everything\n```\n\n**Note that this will rewrite history and change all of the Git object IDs in your\nrepository, just like the import version of this command.**\n\nIf there's some reason that things aren't working out for you, please let us\nknow in an issue, and we'll definitely try to help or get it fixed.\n\n## Limitations\n\nGit LFS maintains a list of currently known limitations, which you can find and\nedit [here](https://github.com/git-lfs/git-lfs/wiki/Limitations).\n\nCurrent releases of Git LFS will work with Git versions as early as\nGit 2.0.0.  However, for best performance, using a recent version of Git\nis highly recommended.\n\nGit LFS source code utilizes Go modules in its build system, and therefore this\nproject contains a `go.mod` file with a defined Go module path.  However, we\ndo not maintain a stable Go language API or ABI, as Git LFS is intended to be\nused solely as a compiled binary utility.  Please do not import the `git-lfs`\nmodule into other Go code and do not rely on it as a source code dependency.\n\n## Need Help?\n\nYou can get help on specific commands directly:\n\n```bash\n$ git lfs help <subcommand>\n```\n\nThe [official documentation](docs) has command references and specifications for\nthe tool.  There's also a [FAQ](https://github.com/git-lfs/git-lfs/blob/main/docs/man/git-lfs-faq.adoc)\nshipped with Git LFS which answers some common questions.\n\nIf you have a question on how to use Git LFS, aren't sure about something, or\nare looking for input from others on tips about best practices or use cases,\nfeel free to\n[start a discussion](https://github.com/git-lfs/git-lfs/discussions).\n\nYou can always [open an issue](https://github.com/git-lfs/git-lfs/issues), and\none of the Core Team members will respond to you. Please be sure to include:\n\n1. The output of `git lfs env`, which displays helpful information about your\n   Git repository useful in debugging.\n2. Any failed commands re-run with `GIT_TRACE=1` in the environment, which\n   displays additional information pertaining to why a command crashed.\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for info on working on Git LFS and\nsending patches. Related projects are listed on the [Implementations wiki\npage](https://github.com/git-lfs/git-lfs/wiki/Implementations).\n\nSee also [SECURITY.md](SECURITY.md) for info on how to submit reports\nof security vulnerabilities.\n\n## Core Team\n\nThese are the humans that form the Git LFS core team, which runs the project.\n\nIn alphabetical order:\n\n| [@chrisd8088][chrisd8088-user] | [@larsxschneider][larsxschneider-user] |\n| :---: | :---: |\n| [![][chrisd8088-img]][chrisd8088-user] | [![][larsxschneider-img]][larsxschneider-user] |\n| [PGP 088335A9][chrisd8088-pgp] | [PGP A5795889][larsxschneider-pgp] |\n\n[chrisd8088-img]: https://avatars1.githubusercontent.com/u/28857117?s=100&v=4\n[larsxschneider-img]: https://avatars1.githubusercontent.com/u/477434?s=100&v=4\n[chrisd8088-user]: https://github.com/chrisd8088\n[larsxschneider-user]: https://github.com/larsxschneider\n[chrisd8088-pgp]: https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x86cd3297749375bcf8206715f54fe648088335a9\n[larsxschneider-pgp]: https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xaa3b3450295830d2de6db90caba67be5a5795889\n\n### Alumni\n\nThese are the humans that have in the past formed the Git LFS core team, or\nhave otherwise contributed a significant amount to the project. Git LFS would\nnot be possible without them.\n\nIn alphabetical order:\n\n| [@andyneff][andyneff-user] | [@bk2204][bk2204-user] | [@PastelMobileSuit][PastelMobileSuit-user] | [@rubyist][rubyist-user] | [@sinbad][sinbad-user] | [@technoweenie][technoweenie-user] | [@ttaylorr][ttaylorr-user] |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [![][andyneff-img]][andyneff-user] | [![][bk2204-img]][bk2204-user] | [![][PastelMobileSuit-img]][PastelMobileSuit-user] | [![][rubyist-img]][rubyist-user] | [![][sinbad-img]][sinbad-user] | [![][technoweenie-img]][technoweenie-user] | [![][ttaylorr-img]][ttaylorr-user] |\n\n[andyneff-img]: https://avatars1.githubusercontent.com/u/7596961?v=3&s=100\n[bk2204-img]: https://avatars1.githubusercontent.com/u/497054?s=100&v=4\n[PastelMobileSuit-img]: https://avatars2.githubusercontent.com/u/37254014?s=100&v=4\n[rubyist-img]: https://avatars1.githubusercontent.com/u/143?v=3&s=100\n[sinbad-img]: https://avatars1.githubusercontent.com/u/142735?v=3&s=100\n[technoweenie-img]: https://avatars3.githubusercontent.com/u/21?v=3&s=100\n[ttaylorr-img]: https://avatars2.githubusercontent.com/u/443245?s=100&v=4\n[andyneff-user]: https://github.com/andyneff\n[bk2204-user]: https://github.com/bk2204\n[PastelMobileSuit-user]: https://github.com/PastelMobileSuit\n[sinbad-user]: https://github.com/sinbad\n[rubyist-user]: https://github.com/rubyist\n[technoweenie-user]: https://github.com/technoweenie\n[ttaylorr-user]: https://github.com/ttaylorr\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.84375,
          "content": "## Security\n\nGit LFS is a public, open-source project supported by GitHub and a\nbroad community of other organizations and individual contributors.\nThe Git LFS community takes the security of our project seriously,\nincluding the all of source code repositories managed through\nour GitHub [organization](https://github.com/git-lfs).\n\nIf you believe you have found a security vulnerability in any Git LFS\nclient software repository, please report it to us as described below.\n\nIf you believe you have found a security vulnerability in a Git LFS API\nservice, please report it to the relevant hosting company (e.g., Atlassian,\nGitLab, GitHub, etc.) by following their preferred security report process.\n\n## Reporting Security Issues\n\n*Please do not report security vulnerabilities through public GitHub issues.*\n\nIf you believe you have found a security vulnerability in the Git LFS\nclient software, including any of our Go modules such as\n[gitobj](https://github.com/git-lfs/gitobj) or\n[pktline](https://github.com/git-lfs/pktline), please report it\nby email to one of the Git LFS [core team members](https://github.com/git-lfs/git-lfs#core-team).\n\nEmail addresses for core team members may be found either on their\npersonal GitHub pages or simply by searching through the Git history\nfor this project; all commits from core team members should have their\nemail address in the `Author` Git log field.\n\nIf possible, encrypt your message with the core team member's PGP key.\nThese may be located by searching a public keyserver or from the\nteam member [list](https://github.com/git-lfs/git-lfs#core-team)\non our home page.\n\nIf you do not receive a timely response (generally within 24 hours of the\nfirst working day after your submission), please follow up by email\nwith them and another core team member as well.\n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nWe also recommend reviewing our [guidelines](CONTRIBUTING.md) for\ncontributors and our [Open Code of Conduct](CODE-OF-CONDUCT.md).\n\nNote that because the Git LFS client is a public open-source project,\nit is not enrolled in any bug bounty programs; however, implementations\nof the Git LFS API service may be, depending on the hosting provider.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n"
        },
        {
          "name": "commands",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "creds",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "errors",
          "type": "tree",
          "content": null
        },
        {
          "name": "filepathfilter",
          "type": "tree",
          "content": null
        },
        {
          "name": "fs",
          "type": "tree",
          "content": null
        },
        {
          "name": "git-lfs.go",
          "type": "blob",
          "size": 0.5908203125,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"sync\"\n\t\"syscall\"\n\n\t\"github.com/git-lfs/git-lfs/v3/commands\"\n\t\"github.com/git-lfs/git-lfs/v3/tr\"\n)\n\nfunc main() {\n\tc := make(chan os.Signal)\n\tsignal.Notify(c, os.Interrupt, os.Kill)\n\n\tvar once sync.Once\n\n\tgo func() {\n\t\tfor {\n\t\t\tsig := <-c\n\t\t\tonce.Do(commands.Cleanup)\n\t\t\tfmt.Fprintf(os.Stderr, \"\\n%s\\n\", tr.Tr.Get(\"Exiting because of %q signal.\", sig))\n\n\t\t\texitCode := 1\n\t\t\tif sysSig, ok := sig.(syscall.Signal); ok {\n\t\t\t\texitCode = int(sysSig)\n\t\t\t}\n\t\t\tos.Exit(exitCode + 128)\n\t\t}\n\t}()\n\n\tcode := commands.Run()\n\tonce.Do(commands.Cleanup)\n\tos.Exit(code)\n}\n"
        },
        {
          "name": "git-lfs_windows.go",
          "type": "blob",
          "size": 0.0947265625,
          "content": "//go:build windows && !arm64\n// +build windows,!arm64\n\n//go:generate goversioninfo\n\npackage main\n"
        },
        {
          "name": "git-lfs_windows_arm64.go",
          "type": "blob",
          "size": 0.111328125,
          "content": "//go:build windows && arm64\n// +build windows,arm64\n\n//go:generate goversioninfo -arm=true -64=true\n\npackage main\n"
        },
        {
          "name": "git",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.94921875,
          "content": "// The Git LFS project does not maintain a stable API or ABI for this module.\n// Please do not import this module outside of the Git LFS project.\nmodule github.com/git-lfs/git-lfs/v3\n\nrequire (\n\tgithub.com/avast/retry-go v2.4.2+incompatible\n\tgithub.com/dpotapov/go-spnego v0.0.0-20210315154721-298b63a54430\n\tgithub.com/git-lfs/gitobj/v2 v2.1.1\n\tgithub.com/git-lfs/go-netrc v0.0.0-20210914205454-f0c862dd687a\n\tgithub.com/git-lfs/pktline v0.0.0-20210330133718-06e9096e2825\n\tgithub.com/git-lfs/wildmatch/v2 v2.0.1\n\tgithub.com/jmhodges/clock v1.2.0\n\tgithub.com/leonelquinteros/gotext v1.5.0\n\tgithub.com/mattn/go-isatty v0.0.4\n\tgithub.com/olekukonko/ts v0.0.0-20171002115256-78ecb04241c0\n\tgithub.com/pkg/errors v0.0.0-20170505043639-c605e284fe17\n\tgithub.com/rubyist/tracerx v0.0.0-20170927163412-787959303086\n\tgithub.com/spf13/cobra v1.7.0\n\tgithub.com/ssgelm/cookiejarparser v1.0.1\n\tgithub.com/stretchr/testify v1.6.1\n\tgithub.com/xeipuuv/gojsonschema v0.0.0-20170210233622-6b67b3fab74d\n\tgolang.org/x/net v0.33.0\n\tgolang.org/x/sync v0.10.0\n\tgolang.org/x/sys v0.28.0\n)\n\nrequire (\n\tgithub.com/alexbrainman/sspi v0.0.0-20210105120005-909beea2cc74 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/hashicorp/go-uuid v1.0.2 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/jcmturner/aescts/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/dnsutils/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/gofork v1.0.0 // indirect\n\tgithub.com/jcmturner/goidentity/v6 v6.0.1 // indirect\n\tgithub.com/jcmturner/gokrb5/v8 v8.4.2 // indirect\n\tgithub.com/jcmturner/rpc/v2 v2.0.3 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f // indirect\n\tgithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 // indirect\n\tgolang.org/x/crypto v0.31.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n\ngo 1.21.0\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 9.9921875,
          "content": "github.com/alexbrainman/sspi v0.0.0-20210105120005-909beea2cc74 h1:Kk6a4nehpJ3UuJRqlA3JxYxBZEqCeOmATOvrbT4p9RA=\ngithub.com/alexbrainman/sspi v0.0.0-20210105120005-909beea2cc74/go.mod h1:cEWa1LVoE5KvSD9ONXsZrj0z6KqySlCCNKHlLzbqAt4=\ngithub.com/avast/retry-go v2.4.2+incompatible h1:+ZjCypQT/CyP0kyJO2EcU4d/ZEJWSbP8NENI578cPmA=\ngithub.com/avast/retry-go v2.4.2+incompatible/go.mod h1:XtSnn+n/sHqQIpZ10K1qAevBhOOCWBLXXy3hyiqqBrY=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dpotapov/go-spnego v0.0.0-20210315154721-298b63a54430 h1:oempk9HjNt6rVKyKmpdnoN7XABQv3SXLWu3pxUI7Vlk=\ngithub.com/dpotapov/go-spnego v0.0.0-20210315154721-298b63a54430/go.mod h1:AVSs/gZKt1bOd2AhkhbS7Qh56Hv7klde22yXVbwYJhc=\ngithub.com/git-lfs/gitobj/v2 v2.1.1 h1:tf/VU6zL1kxa3he+nf6FO/syX+LGkm6WGDsMpfuXV7Q=\ngithub.com/git-lfs/gitobj/v2 v2.1.1/go.mod h1:q6aqxl6Uu3gWsip5GEKpw+7459F97er8COmU45ncAxw=\ngithub.com/git-lfs/go-netrc v0.0.0-20210914205454-f0c862dd687a h1:6pskVZacdMUL93pCpMAYnMDLjH1yDFhssPYGe32sjdk=\ngithub.com/git-lfs/go-netrc v0.0.0-20210914205454-f0c862dd687a/go.mod h1:70O4NAtvWn1jW8V8V+OKrJJYcxDLTmIozfi2fmSz5SI=\ngithub.com/git-lfs/pktline v0.0.0-20210330133718-06e9096e2825 h1:riQhgheTL7tMF4d5raz9t3+IzoR1i1wqxE1kZC6dY+U=\ngithub.com/git-lfs/pktline v0.0.0-20210330133718-06e9096e2825/go.mod h1:fenKRzpXDjNpsIBhuhUzvjCKlDjKam0boRAenTE0Q6A=\ngithub.com/git-lfs/wildmatch/v2 v2.0.1 h1:Ds+aobrV5bK0wStILUOn9irllPyf9qrFETbKzwzoER8=\ngithub.com/git-lfs/wildmatch/v2 v2.0.1/go.mod h1:EVqonpk9mXbREP3N8UkwoWdrF249uHpCUo5CPXY81gw=\ngithub.com/gorilla/securecookie v1.1.1 h1:miw7JPhV+b/lAHSXz4qd/nN9jRiAFV5FwjeKyCS8BvQ=\ngithub.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+HVt/4epWDjd4=\ngithub.com/gorilla/sessions v1.2.1 h1:DHd3rPN5lE3Ts3D8rKkQ8x/0kqfeNmBAaiSi+o7FsgI=\ngithub.com/gorilla/sessions v1.2.1/go.mod h1:dk2InVEVJ0sfLlnXv9EAgkf6ecYs/i80K/zI+bUmuGM=\ngithub.com/hashicorp/go-uuid v1.0.2 h1:cfejS+Tpcp13yd5nYHWDI6qVCny6wyX2Mt5SGur2IGE=\ngithub.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/jcmturner/aescts/v2 v2.0.0 h1:9YKLH6ey7H4eDBXW8khjYslgyqG2xZikXP0EQFKrle8=\ngithub.com/jcmturner/aescts/v2 v2.0.0/go.mod h1:AiaICIRyfYg35RUkr8yESTqvSy7csK90qZ5xfvvsoNs=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0 h1:lltnkeZGL0wILNvrNiVCR6Ro5PGU/SeBvVO/8c/iPbo=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0/go.mod h1:b0TnjGOvI/n42bZa+hmXL+kFJZsFT7G4t3HTlQ184QM=\ngithub.com/jcmturner/gofork v1.0.0 h1:J7uCkflzTEhUZ64xqKnkDxq3kzc96ajM1Gli5ktUem8=\ngithub.com/jcmturner/gofork v1.0.0/go.mod h1:MK8+TM0La+2rjBD4jE12Kj1pCCxK7d2LK/UM3ncEo0o=\ngithub.com/jcmturner/goidentity/v6 v6.0.1 h1:VKnZd2oEIMorCTsFBnJWbExfNN7yZr3EhJAxwOkZg6o=\ngithub.com/jcmturner/goidentity/v6 v6.0.1/go.mod h1:X1YW3bgtvwAXju7V3LCIMpY0Gbxyjn/mY9zx4tFonSg=\ngithub.com/jcmturner/gokrb5/v8 v8.4.2 h1:6ZIM6b/JJN0X8UM43ZOM6Z4SJzla+a/u7scXFJzodkA=\ngithub.com/jcmturner/gokrb5/v8 v8.4.2/go.mod h1:sb+Xq/fTY5yktf/VxLsE3wlfPqQjp0aWNYyvBVK62bc=\ngithub.com/jcmturner/rpc/v2 v2.0.3 h1:7FXXj8Ti1IaVFpSAziCZWNzbNuZmnvw/i6CqLNdWfZY=\ngithub.com/jcmturner/rpc/v2 v2.0.3/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=\ngithub.com/jmhodges/clock v1.2.0 h1:eq4kys+NI0PLngzaHEe7AmPT90XMGIEySD1JfV1PDIs=\ngithub.com/jmhodges/clock v1.2.0/go.mod h1:qKjhA7x7u/lQpPB1XAqX1b1lCI/w3/fNuYpI/ZjLynI=\ngithub.com/leonelquinteros/gotext v1.5.0 h1:ODY7LzLpZWWSJdAHnzhreOr6cwLXTAmc914FOauSkBM=\ngithub.com/leonelquinteros/gotext v1.5.0/go.mod h1:OCiUVHuhP9LGFBQ1oAmdtNCHJCiHiQA8lf4nAifHkr0=\ngithub.com/mattn/go-isatty v0.0.4 h1:bnP0vzxcAdeI1zdubAl5PjU6zsERjGZb7raWodagDYs=\ngithub.com/mattn/go-isatty v0.0.4/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/olekukonko/ts v0.0.0-20171002115256-78ecb04241c0 h1:LiZB1h0GIcudcDci2bxbqI6DXV8bF8POAnArqvRrIyw=\ngithub.com/olekukonko/ts v0.0.0-20171002115256-78ecb04241c0/go.mod h1:F/7q8/HZz+TXjlsoZQQKVYvXTZaFH4QRa3y+j1p7MS0=\ngithub.com/pkg/errors v0.0.0-20170505043639-c605e284fe17 h1:chPfVn+gpAM5CTpTyVU9j8J+xgRGwmoDlNDLjKnJiYo=\ngithub.com/pkg/errors v0.0.0-20170505043639-c605e284fe17/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rubyist/tracerx v0.0.0-20170927163412-787959303086 h1:mncRSDOqYCng7jOD+Y6+IivdRI6Kzv2BLWYkWkdQfu0=\ngithub.com/rubyist/tracerx v0.0.0-20170927163412-787959303086/go.mod h1:YpdgDXpumPB/+EGmGTYHeiW/0QVFRzBYTNFaxWfPDk4=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/spf13/cobra v1.7.0 h1:hyqWnYt1ZQShIddO5kBpj3vu05/++x6tJ6dg8EC572I=\ngithub.com/spf13/cobra v1.7.0/go.mod h1:uLxZILRyS/50WlhOIKD7W6V5bgeIt+4sICxh6uRMrb0=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/ssgelm/cookiejarparser v1.0.1 h1:cRdXauUbOTFzTPJFaeiWbHnQ+tRGlpKKzvIK9PUekE4=\ngithub.com/ssgelm/cookiejarparser v1.0.1/go.mod h1:DUfC0mpjIzlDN7DzKjXpHj0qMI5m9VrZuz3wSlI+OEI=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.6.1 h1:hDPOHmpOpP40lSULcqw7IrRb/u7w6RpDC9399XyoNd0=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f h1:J9EGpcZtP0E/raorCMxlFGSTBrsSlaDGf3jU/qvAE2c=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 h1:EzJWgHovont7NscjpAxXsDA8S8BMYve8Y5+7cuRE7R0=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=\ngithub.com/xeipuuv/gojsonschema v0.0.0-20170210233622-6b67b3fab74d h1:BJPiQVOMMtJsJIkrF4T6K3RKbzqr7rkaybMk33dlGUo=\ngithub.com/xeipuuv/gojsonschema v0.0.0-20170210233622-6b67b3fab74d/go.mod h1:5yf86TLmAcydyeJq5YvxkGPE2fm/u4myDekKRoLuqhs=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201112155050-0c6587e931a9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191027093000-83d349e8ac1a/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.23.0 h1:7EYJ93RZ9vYSZAIb2x3lnuvqO5zneoD6IvWjuhfxjTs=\ngolang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20200221224223-e1da425f72fd/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "lfs",
          "type": "tree",
          "content": null
        },
        {
          "name": "lfsapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "lfshttp",
          "type": "tree",
          "content": null
        },
        {
          "name": "locking",
          "type": "tree",
          "content": null
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "rpm",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "ssh",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprocess",
          "type": "tree",
          "content": null
        },
        {
          "name": "t",
          "type": "tree",
          "content": null
        },
        {
          "name": "tasklog",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tq",
          "type": "tree",
          "content": null
        },
        {
          "name": "tr",
          "type": "tree",
          "content": null
        },
        {
          "name": "versioninfo.json",
          "type": "blob",
          "size": 0.35546875,
          "content": "{\n\t\"FixedFileInfo\":\n\t{\n\t\t\"FileVersion\": {\n\t\t\t\"Major\": 3,\n\t\t\t\"Minor\": 6,\n\t\t\t\"Patch\": 0,\n\t\t\t\"Build\": 0\n\t\t}\n\t},\n\t\"StringFileInfo\":\n\t{\n\t\t\"FileDescription\": \"Git LFS\",\n\t\t\"LegalCopyright\": \"GitHub, Inc. and Git LFS contributors\",\n\t\t\"ProductName\": \"Git Large File Storage (LFS)\",\n\t\t\"ProductVersion\": \"3.6.0\"\n\t},\n\t\"IconPath\": \"script/windows-installer/git-lfs-logo.ico\"\n}\n"
        }
      ]
    }
  ]
}