{
  "metadata": {
    "timestamp": 1736568087176,
    "page": 226,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "adnanh/webhook",
      "stars": 10564,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0556640625,
          "content": ".idea\r\n.cover\r\ncoverage\r\nwebhook\r\n/test/hookecho\r\nbuild\r\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.34375,
          "content": "language: go\n\ngo:\n  - 1.14.x\n  - master\n\nos:\n  - linux\n  - osx\n  - windows\n\narch:\n  - amd64\n  - arm64\n\nmatrix:\n  fast_finish: true\n  allow_failures:\n    - go: master\n  exclude:\n    - os: windows\n      go: master\n    - os: windows\n      arch: arm64\n    - os: osx\n      arch: arm64\n\ninstall:\n  - go get -d -v -t ./...\n\nscript:\n  - go test -v -race ./...\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.3720703125,
          "content": "# Contribute\n\n## Introduction\n\nFirst, thank you for considering contributing to webhook! It's people like you that make the open source community such a great community! ðŸ˜Š\n\nWe welcome any type of contribution, not only code. You can help with \n- **QA**: file bug reports, the more details you can give the better (e.g. screenshots with the console open)\n- **Marketing**: writing blog posts, howto's, printing stickers, ...\n- **Community**: presenting the project at meetups, organizing a dedicated meetup for the local community, ...\n- **Code**: take a look at the [open issues](issues). Even if you can't write code, commenting on them, showing that you care about a given issue matters. It helps us triage them.\n- **Money**: we welcome financial contributions in full transparency on our [open collective](https://opencollective.com/webhook).\n\n## Your First Contribution\n\nWorking on your first Pull Request? You can learn how from this *free* series, [How to Contribute to an Open Source Project on GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github).\n\n## Submitting code\n\nAny code change should be submitted as a pull request. The description should explain what the code does and give steps to execute it. The pull request should also contain tests.\n\n## Code review process\n\nThe bigger the pull request, the longer it will take to review and merge. Try to break down large pull requests in smaller chunks that are easier to review and merge.\nIt is also always helpful to have some context for your pull request. What was the purpose? Why does it matter to you?\n\n## Financial contributions\n\nWe also welcome financial contributions in full transparency on our [open collective](https://opencollective.com/webhook).\nAnyone can file an expense. If the expense makes sense for the development of the community, it will be \"merged\" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.\n\n## Questions\n\nIf you have any questions, create an [issue](issue) (protip: do a quick search first to see if someone else didn't ask the same question before!).\nYou can also reach us at hello@webhook.opencollective.com.\n\n## Credits\n\n### Contributors\n\nThank you to all the people who have already contributed to webhook!\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/webhook/contributors.svg?width=890\" /></a>\n\n\n### Backers\n\nThank you to all our backers! [[Become a backer](https://opencollective.com/webhook#backer)]\n\n<a href=\"https://opencollective.com/webhook#backers\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/backers.svg?width=890\"></a>\n\n\n### Sponsors\n\nThank you to all our sponsors! (please ask your company to also support this open source project by [becoming a sponsor](https://opencollective.com/webhook#sponsor))\n\n<a href=\"https://opencollective.com/webhook/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webhook/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webhook/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webhook/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webhook/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webhook/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webhook/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webhook/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webhook/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webhook/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/9/avatar.svg\"></a>\n\n<!-- This `CONTRIBUTING.md` is based on @nayafia's template https://github.com/nayafia/contributing-template -->"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.076171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Adnan Hajdarevic <adnanh@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.1943359375,
          "content": "OS = darwin freebsd linux openbsd\nARCHS = 386 arm amd64 arm64\n\n.DEFAULT_GOAL := help\n\n.PHONY: help\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-16s\\033[0m %s\\n\", $$1, $$2}'\n\nall: build release release-windows\n\nbuild: deps ## Build the project\n\tgo build\n\nrelease: clean deps ## Generate releases for unix systems\n\t@for arch in $(ARCHS);\\\n\tdo \\\n\t\tfor os in $(OS);\\\n\t\tdo \\\n\t\t\techo \"Building $$os-$$arch\"; \\\n\t\t\tmkdir -p build/webhook-$$os-$$arch/; \\\n\t\t\tCGO_ENABLED=0 GOOS=$$os GOARCH=$$arch go build -o build/webhook-$$os-$$arch/webhook; \\\n\t\t\ttar cz -C build -f build/webhook-$$os-$$arch.tar.gz webhook-$$os-$$arch; \\\n\t\tdone \\\n\tdone\n\nrelease-windows: clean deps ## Generate release for windows\n\t@for arch in $(ARCHS);\\\n\tdo \\\n\t\techo \"Building windows-$$arch\"; \\\n\t\tmkdir -p build/webhook-windows-$$arch/; \\\n\t\tGOOS=windows GOARCH=$$arch go build -o build/webhook-windows-$$arch/webhook.exe; \\\n\t\ttar cz -C build -f build/webhook-windows-$$arch.tar.gz webhook-windows-$$arch; \\\n\tdone\n\ntest: deps ## Execute tests\n\tgo test ./...\n\ndeps: ## Install dependencies using go get\n\tgo get -d -v -t ./...\n\nclean: ## Remove building artifacts\n\trm -rf build\n\trm -f webhook\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.322265625,
          "content": "# What is webhook? ![build-status][badge]\r\n\r\n <img src=\"https://github.com/adnanh/webhook/raw/development/docs/logo/logo-128x128.png\" alt=\"Webhook\" align=\"left\" />\r\n \r\n [webhook][w] is a lightweight configurable tool written in Go, that allows you to easily create HTTP endpoints (hooks) on your server, which you can use to execute configured commands. You can also pass data from the HTTP request (such as headers, payload or query variables) to your commands. [webhook][w] also allows you to specify rules which have to be satisfied in order for the hook to be triggered.\r\n\r\nFor example, if you're using Github or Bitbucket, you can use [webhook][w] to set up a hook that runs a redeploy script for your project on your staging server, whenever you push changes to the master branch of your project.\r\n\r\nIf you use Mattermost or Slack, you can set up an \"Outgoing webhook integration\" or \"Slash command\" to run various commands on your server, which can then report back directly to you or your channels using the \"Incoming webhook integrations\", or the appropriate response body.\r\n\r\n[webhook][w] aims to do nothing more than it should do, and that is:\r\n 1. receive the request,\r\n 2. parse the headers, payload and query variables,\r\n 3. check if the specified rules for the hook are satisfied,\r\n 3. and finally, pass the specified arguments to the specified command via\r\n    command line arguments or via environment variables.\r\n\r\nEverything else is the responsibility of the command's author.\r\n\r\n## Not what you're looking for?\r\n| <a href=\"https://www.hookdoo.com/?github\"><img src=\"https://hookdoo.com/img/Hookdoo_Logo_1.png\" height=\"48\" alt=\"hookdoo\" /></a> | <picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"images/hookdeck-white.svg\"><img height=\"36\" alt=\"hookdeck\" src=\"images/hookdeck-black.svg\"></picture></a> |\r\n| :-: | :-: |\r\n| Scriptable webhook gateway to safely run your custom builds, deploys, and proxy scripts on your servers.                                      | An event gateway to reliably ingest, verify, queue, transform, filter, inspect, monitor, and replay webhooks. |\r\n \r\n\r\n# Getting started\r\n## Installation\r\n### Building from source\r\nTo get started, first make sure you've properly set up your [Go](http://golang.org/doc/install) 1.21 or newer environment and then run\r\n```bash\r\n$ go build github.com/adnanh/webhook\r\n```\r\nto build the latest version of the [webhook][w].\r\n\r\n### Using package manager\r\n#### Snap store\r\n[![Get it from the Snap Store](https://snapcraft.io/static/images/badges/en/snap-store-white.svg)](https://snapcraft.io/webhook)\r\n\r\n#### Ubuntu\r\nIf you are using Ubuntu linux (17.04 or later), you can install webhook using `sudo apt-get install webhook` which will install community packaged version.\r\n\r\n#### Debian\r\nIf you are using Debian linux (\"stretch\" or later), you can install webhook using `sudo apt-get install webhook` which will install community packaged version (thanks [@freeekanayaka](https://github.com/freeekanayaka)) from https://packages.debian.org/sid/webhook\r\n\r\n#### FreeBSD\r\nIf you are using FreeBSD, you can install webhook using `pkg install webhook`.\r\n\r\n### Download prebuilt binaries\r\nPrebuilt binaries for different architectures are available at [GitHub Releases](https://github.com/adnanh/webhook/releases).\r\n\r\n## Configuration\r\nNext step is to define some hooks you want [webhook][w] to serve.\r\n[webhook][w] supports JSON or YAML configuration files, but we'll focus primarily on JSON in the following example.\r\nBegin by creating an empty file named `hooks.json`. This file will contain an array of hooks the [webhook][w] will serve. Check [Hook definition page](docs/Hook-Definition.md) to see the detailed description of what properties a hook can contain, and how to use them.\r\n\r\nLet's define a simple hook named `redeploy-webhook` that will run a redeploy script located in `/var/scripts/redeploy.sh`. Make sure that your bash script has `#!/bin/sh` shebang on top.\r\n\r\nOur `hooks.json` file will now look like this:\r\n```json\r\n[\r\n  {\r\n    \"id\": \"redeploy-webhook\",\r\n    \"execute-command\": \"/var/scripts/redeploy.sh\",\r\n    \"command-working-directory\": \"/var/webhook\"\r\n  }\r\n]\r\n```\r\n\r\n**NOTE:** If you prefer YAML, the equivalent `hooks.yaml` file would be:\r\n```yaml\r\n- id: redeploy-webhook\r\n  execute-command: \"/var/scripts/redeploy.sh\"\r\n  command-working-directory: \"/var/webhook\"\r\n```\r\n\r\nYou can now run [webhook][w] using\r\n```bash\r\n$ /path/to/webhook -hooks hooks.json -verbose\r\n```\r\n\r\nIt will start up on default port 9000 and will provide you with one HTTP endpoint\r\n```http\r\nhttp://yourserver:9000/hooks/redeploy-webhook\r\n```\r\n\r\nCheck [webhook parameters page](docs/Webhook-Parameters.md) to see how to override the ip, port and other settings such as hook hotreload, verbose output, etc, when starting the [webhook][w].\r\n\r\nBy performing a simple HTTP GET or POST request to that endpoint, your specified redeploy script would be executed. Neat!\r\n\r\nHowever, hook defined like that could pose a security threat to your system, because anyone who knows your endpoint, can send a request and execute your command. To prevent that, you can use the `\"trigger-rule\"` property for your hook, to specify the exact circumstances under which the hook would be triggered. For example, you can use them to add a secret that you must supply as a parameter in order to successfully trigger the hook. Please check out the [Hook rules page](docs/Hook-Rules.md) for detailed list of available rules and their  usage.\r\n\r\n## Multipart Form Data\r\n[webhook][w] provides limited support the parsing of multipart form data.\r\nMultipart form data can contain two types of parts: values and files.\r\nAll form _values_ are automatically added to the `payload` scope.\r\nUse the `parse-parameters-as-json` settings to parse a given value as JSON.\r\nAll files are ignored unless they match one of the following criteria:\r\n\r\n1. The `Content-Type` header is `application/json`.\r\n1. The part is named in the `parse-parameters-as-json` setting.\r\n\r\nIn either case, the given file part will be parsed as JSON and added to the `payload` map.\r\n\r\n## Templates\r\n[webhook][w] can parse the hooks configuration file as a Go template when given the `-template` [CLI parameter](docs/Webhook-Parameters.md). See the [Templates page](docs/Templates.md) for more details on template usage.\r\n\r\n## Using HTTPS\r\n[webhook][w] by default serves hooks using http. If you want [webhook][w] to serve secure content using https, you can use the `-secure` flag while starting [webhook][w]. Files containing a certificate and matching private key for the server must be provided using the `-cert /path/to/cert.pem` and `-key /path/to/key.pem` flags. If the certificate is signed by a certificate authority, the cert file should be the concatenation of the server's certificate followed by the CA's certificate.\r\n\r\nTLS version and cipher suite selection flags are available from the command line. To list available cipher suites, use the `-list-cipher-suites` flag.  The `-tls-min-version` flag can be used with `-list-cipher-suites`.\r\n\r\n## Running behind a reverse proxy\r\n[webhook][w] may be run behind a \"reverse proxy\" - another web-facing server such as [Apache httpd](https://httpd.apache.org) or [Nginx](https://nginx.org) that accepts requests from clients and forwards them on to [webhook][h].  You can have [webhook][w] listen on a regular TCP port or on a Unix domain socket (with the `-socket` flag), then configure your proxy to send requests for a specific host name or sub-path over that port or socket to [webhook][w].\r\n\r\nNote that when running in this mode the [`ip-whitelist`](docs/Hook-Rules.md#match-whitelisted-ip-range) trigger rule will not work as expected, since it will be checking the address of the _proxy_, not the _client_.  Client IP restrictions will need to be enforced within the proxy, before it decides whether to forward the request to [webhook][w].\r\n\r\n## CORS Headers\r\nIf you want to set CORS headers, you can use the `-header name=value` flag while starting [webhook][w] to set the appropriate CORS headers that will be returned with each response.\r\n\r\n## Running under `systemd`\r\nOn platforms that use [systemd](https://systemd.io), [webhook][w] supports the _socket activation_ mechanism.  If [webhook][w] detects that it has been launched from a systemd-managed socket it will automatically use that instead of opening its own listening port.  See [the systemd page](docs/Systemd-Activation.md) for full details.\r\n\r\n## Interested in running webhook inside of a Docker container?\r\nYou can use one of the following Docker images, or create your own (please read [this discussion](https://github.com/adnanh/webhook/issues/63)):\r\n- [almir/webhook](https://github.com/almir/docker-webhook)\r\n- [roxedus/webhook](https://github.com/Roxedus/docker-webhook)\r\n- [thecatlady/webhook](https://github.com/thecatlady/docker-webhook)\r\n- [lwlook/webhook](https://hub.docker.com/r/lwlook/webhook) - This setup allows direct access to the Docker host, providing a streamlined and efficient way to manage webhooks.\r\n\r\n## Examples\r\nCheck out [Hook examples page](docs/Hook-Examples.md) for more complex examples of hooks.\r\n\r\n### Guides featuring webhook\r\n - [Plex 2 Telegram](https://gitlab.com/-/snippets/1972594) by [@psyhomb](https://github.com/psyhomb)\r\n - [Webhook & JIRA](https://sites.google.com/site/mrxpalmeiras/more/jira-webhooks) by [@perfecto25](https://github.com/perfecto25)\r\n - [Trigger Ansible AWX job runs on SCM (e.g. git) commit](http://jpmens.net/2017/10/23/trigger-awx-job-runs-on-scm-commit/) by [@jpmens](http://mens.de/)\r\n - [Deploy using GitHub webhooks](https://davidauthier.wearemd.com/blog/deploy-using-github-webhooks.html) by [@awea](https://davidauthier.wearemd.com)\r\n - [Setting up Automatic Deployment and Builds Using Webhooks](https://willbrowning.me/setting-up-automatic-deployment-and-builds-using-webhooks/) by [Will Browning](https://willbrowning.me/about/)\r\n - [Auto deploy your Node.js app on push to GitHub in 3 simple steps](https://webhookrelay.com/blog/2018/07/17/auto-deploy-on-git-push/) by Karolis Rusenas\r\n - [Automate Static Site Deployments with Salt, Git, and Webhooks](https://www.linode.com/docs/applications/configuration-management/automate-a-static-site-deployment-with-salt/) by [Linode](https://www.linode.com)\r\n - [Using Prometheus to Automatically Scale WebLogic Clusters on Kubernetes](https://blogs.oracle.com/weblogicserver/using-prometheus-to-automatically-scale-weblogic-clusters-on-kubernetes-v5) by [Marina Kogan](https://blogs.oracle.com/author/9a4fe754-1cc2-4c64-95fc-360642b62927)\r\n - [Github Pages and Jekyll - A New Platform for LACNIC Labs](https://labs.lacnic.net/a-new-platform-for-lacniclabs/) by [Carlos MartÃ­nez Cagnazzo](https://twitter.com/carlosm3011)\r\n - [How to Deploy React Apps Using Webhooks and Integrating Slack on Ubuntu](https://www.alibabacloud.com/blog/how-to-deploy-react-apps-using-webhooks-and-integrating-slack-on-ubuntu_594116) by Arslan Ud Din Shafiq\r\n - [Private webhooks](https://ihateithe.re/2018/01/private-webhooks/) by [Thomas](https://ihateithe.re/colophon/)\r\n - [Adventures in webhooks](https://medium.com/@draketech/adventures-in-webhooks-2d6584501c62) by [Drake](https://medium.com/@draketech)\r\n - [GitHub pro tips](http://notes.spencerlyon.com/2016/01/04/github-pro-tips/) by [Spencer Lyon](http://notes.spencerlyon.com/)\r\n - [XiaoMi Vacuum + Amazon Button = Dash Cleaning](https://www.instructables.com/id/XiaoMi-Vacuum-Amazon-Button-Dash-Cleaning/) by [c0mmensal](https://www.instructables.com/member/c0mmensal/)\r\n - [Set up Automated Deployments From Github With Webhook](https://maximorlov.com/automated-deployments-from-github-with-webhook/) by [Maxim Orlov](https://twitter.com/_maximization)\r\n - [Kick Me Now with Webhooks](https://freebsdfoundation.org/kick-me-now-with-webhooks/) By Dave Cottlehuber\r\n - VIDEO: [Gitlab CI/CD configuration using Docker and adnanh/webhook to deploy on VPS - Tutorial #1](https://www.youtube.com/watch?v=Qhn-lXjyrZA&feature=youtu.be) by [Yes! Let's Learn Software Engineering](https://www.youtube.com/channel/UCH4XJf2BZ_52fbf8fOBMF3w)\r\n - [Integrate automatic deployment in 20 minutes using webhooks + Nginx setup](https://anksus.me/blog/integrate-automatic-deployment-in-20-minutes-using-webhooks) by [Anksus](https://github.com/Anksus)\r\n - [Automatically redeploy your static blog with Gitea, Uberspace & Webhook](https://by.arran.nz/posts/code/webhook-deploy/) by [Arran](https://arran.nz)\r\n- [Automatically Updating My Zola Site Using a Webhook](https://osc.garden/blog/updating-site-with-webhook/) by [Ã“scar FernÃ¡ndez](https://osc.garden/)\r\n - ...\r\n - Want to add your own? Open an Issue or create a PR :-)\r\n \r\n## Community Contributions\r\nSee the [webhook-contrib][wc] repository for a collections of tools and helpers related to [webhook][w] that have been contributed by the [webhook][w] community.\r\n\r\n## Need help?\r\nCheck out [existing issues](https://github.com/adnanh/webhook/issues) to see if someone else also had the same problem, or [open a new one](https://github.com/adnanh/webhook/issues/new).\r\n\r\n# Support active development\r\n\r\n## Sponsors\r\n## <a href=\"https://www.digitalocean.com/?ref=webhook\"><img src=\"http://www.hajdarevic.net/DO_Logo_Horizontal_Blue.png\" alt=\"DigitalOcean\" width=\"250\"/></a>\r\n[DigitalOcean](https://www.digitalocean.com/?ref=webhook) is a simple and robust cloud computing platform, designed for developers.\r\n\r\n\r\n## <a href=\"https://www.browserstack.com/?ref=webhook\"><img src=\"http://www.hajdarevic.net/browserstack.svg\" alt=\"BrowserStack\" width=\"250\"/></a>\r\n[BrowserStack](https://www.browserstack.com/?ref=webhook) is a cloud-based cross-browser testing tool that enables developers to test their websites across various browsers on different operating systems and mobile devices, without requiring users to install virtual machines, devices or emulators.\r\n\r\n---\r\n\r\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website.\r\n\r\n<a href=\"https://opencollective.com/webhook/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/0/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/webhook/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/1/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/webhook/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/2/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/webhook/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/3/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/webhook/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/4/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/webhook/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/5/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/webhook/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/6/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/webhook/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/7/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/webhook/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/8/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/webhook/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/sponsor/9/avatar.svg\"></a>\r\n\r\n## By contributing\r\n\r\nThis project exists thanks to all the people who contribute. [Contribute!](CONTRIBUTING.md).\r\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/webhook/contributors.svg?width=890\" /></a>\r\n\r\n## By giving money\r\n\r\n - [OpenCollective Backer](https://opencollective.com/webhook#backer)\r\n - [OpenCollective Sponsor](https://opencollective.com/webhook#sponsor)\r\n - [PayPal](https://paypal.me/hookdoo)\r\n - [Patreon](https://www.patreon.com/webhook)\r\n - [Faircode](https://faircode.io/product/webhook?utm_source=badge&utm_medium=badgelarge&utm_campaign=webhook)\r\n - [Flattr](https://flattr.com/submit/auto?user_id=adnanh&url=https%3A%2F%2Fwww.github.com%2Fadnanh%2Fwebhook)\r\n\r\n---\r\n\r\nThank you to all our backers!\r\n\r\n<a href=\"https://opencollective.com/webhook#backers\" target=\"_blank\"><img src=\"https://opencollective.com/webhook/backers.svg?width=890\"></a>\r\n\r\n# License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Adnan Hajdarevic <adnanh@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n\r\n[w]: https://github.com/adnanh/webhook\r\n[wc]: https://github.com/adnanh/webhook-contrib\r\n[badge]: https://github.com/adnanh/webhook/workflows/build/badge.svg\r\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "droppriv_nope.go",
          "type": "blob",
          "size": 0.1787109375,
          "content": "// +build windows\n\npackage main\n\nimport (\n\t\"errors\"\n\t\"runtime\"\n)\n\nfunc dropPrivileges(uid, gid int) error {\n\treturn errors.New(\"setuid and setgid not supported on \" + runtime.GOOS)\n}\n"
        },
        {
          "name": "droppriv_unix.go",
          "type": "blob",
          "size": 0.302734375,
          "content": "// +build linux !windows\n\npackage main\n\nimport (\n\t\"syscall\"\n)\n\nfunc dropPrivileges(uid, gid int) error {\n\terr := syscall.Setgroups([]int{})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = syscall.Setgid(gid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = syscall.Setuid(uid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.6083984375,
          "content": "module github.com/adnanh/webhook\n\ngo 1.21\n\ntoolchain go1.22.0\n\nrequire (\n\tgithub.com/Microsoft/go-winio v0.6.2\n\tgithub.com/clbanning/mxj/v2 v2.7.0\n\tgithub.com/coreos/go-systemd/v22 v22.5.0\n\tgithub.com/dustin/go-humanize v1.0.1\n\tgithub.com/fsnotify/fsnotify v1.7.0\n\tgithub.com/ghodss/yaml v1.0.0\n\tgithub.com/go-chi/chi/v5 v5.0.12\n\tgithub.com/gofrs/uuid/v5 v5.0.0\n\tgithub.com/gorilla/mux v1.8.1\n\tgolang.org/x/sys v0.18.0\n)\n\nrequire (\n\tgithub.com/google/go-cmp v0.6.0 // indirect\n\tgithub.com/kr/pretty v0.1.0 // indirect\n\tgopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 2.7529296875,
          "content": "github.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=\ngithub.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=\ngithub.com/clbanning/mxj/v2 v2.7.0 h1:WA/La7UGCanFe5NpHF0Q3DNtnCsVoxbPKuyBNHWRyME=\ngithub.com/clbanning/mxj/v2 v2.7.0/go.mod h1:hNiWqW14h+kc+MdF9C6/YoRfjEJoR3ou6tn/Qo+ve2s=\ngithub.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=\ngithub.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/ghodss/yaml v1.0.0 h1:wQHKEahhL6wmXdzwWG11gIVCkOv05bNOh+Rxn0yngAk=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/go-chi/chi/v5 v5.0.12 h1:9euLV5sTrTNTRUU9POmDUvfxyj6LAABLUcEWO+JJb4s=\ngithub.com/go-chi/chi/v5 v5.0.12/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gofrs/uuid/v5 v5.0.0 h1:p544++a97kEL+svbcFbCQVM9KFu0Yo25UoISXGNNH9M=\ngithub.com/gofrs/uuid/v5 v5.0.0/go.mod h1:CDOjlDMVAtN56jqyRUZh58JT31Tiw7/oQyEXZV+9bD8=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=\ngithub.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngolang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\n"
        },
        {
          "name": "hooks.json.example",
          "type": "blob",
          "size": 1.138671875,
          "content": "[\n  {\n    \"id\": \"webhook\",\n    \"execute-command\": \"/home/adnan/redeploy-go-webhook.sh\",\n    \"command-working-directory\": \"/home/adnan/go\",\n    \"response-message\": \"I got the payload!\",\n    \"response-headers\":\n    [\n      {\n        \"name\": \"Access-Control-Allow-Origin\",\n        \"value\": \"*\"\n      }\n    ],\n    \"pass-arguments-to-command\":\n    [\n      {\n        \"source\": \"payload\",\n        \"name\": \"head_commit.id\"\n      },\n      {\n        \"source\": \"payload\",\n        \"name\": \"pusher.name\"\n      },\n      {\n        \"source\": \"payload\",\n        \"name\": \"pusher.email\"\n      }\n    ],\n    \"trigger-rule\":\n    {\n      \"and\":\n      [\n        {\n          \"match\":\n          {\n            \"type\": \"payload-hmac-sha1\",\n            \"secret\": \"mysecret\",\n            \"parameter\":\n            {\n              \"source\": \"header\",\n              \"name\": \"X-Hub-Signature\"\n            }\n          }\n        },\n        {\n          \"match\":\n          {\n            \"type\": \"value\",\n            \"value\": \"refs/heads/master\",\n            \"parameter\":\n            {\n              \"source\": \"payload\",\n              \"name\": \"ref\"\n            }\n          }\n        }\n      ]\n    }\n  }\n]\n"
        },
        {
          "name": "hooks.json.tmpl.example",
          "type": "blob",
          "size": 1.1640625,
          "content": "[\n  {\n    \"id\": \"webhook\",\n    \"execute-command\": \"/home/adnan/redeploy-go-webhook.sh\",\n    \"command-working-directory\": \"/home/adnan/go\",\n    \"response-message\": \"I got the payload!\",\n    \"response-headers\":\n    [\n      {\n        \"name\": \"Access-Control-Allow-Origin\",\n        \"value\": \"*\"\n      }\n    ],\n    \"pass-arguments-to-command\":\n    [\n      {\n        \"source\": \"payload\",\n        \"name\": \"head_commit.id\"\n      },\n      {\n        \"source\": \"payload\",\n        \"name\": \"pusher.name\"\n      },\n      {\n        \"source\": \"payload\",\n        \"name\": \"pusher.email\"\n      }\n    ],\n    \"trigger-rule\":\n    {\n      \"and\":\n      [\n        {\n          \"match\":\n          {\n            \"type\": \"payload-hmac-sha1\",\n            \"secret\": \"{{ getenv \"XXXTEST_SECRET\" | js }}\",\n            \"parameter\":\n            {\n              \"source\": \"header\",\n              \"name\": \"X-Hub-Signature\"\n            }\n          }\n        },\n        {\n          \"match\":\n          {\n            \"type\": \"value\",\n            \"value\": \"refs/heads/master\",\n            \"parameter\":\n            {\n              \"source\": \"payload\",\n              \"name\": \"ref\"\n            }\n          }\n        }\n      ]\n    }\n  }\n]\n"
        },
        {
          "name": "hooks.yaml.example",
          "type": "blob",
          "size": 0.6689453125,
          "content": "- id: webhook\n  execute-command: /home/adnan/redeploy-go-webhook.sh\n  command-working-directory: /home/adnan/go\n  response-message: I got the payload!\n  response-headers:\n  - name: Access-Control-Allow-Origin\n    value: '*'\n  pass-arguments-to-command:\n  - source: payload\n    name: head_commit.id\n  - source: payload\n    name: pusher.name\n  - source: payload\n    name: pusher.email\n  trigger-rule:\n    and:\n    - match:\n        type: payload-hmac-sha1\n        secret: mysecret\n        parameter:\n          source: header\n          name: X-Hub-Signature\n    - match:\n        type: value\n        value: refs/heads/master\n        parameter:\n          source: payload\n          name: ref\n"
        },
        {
          "name": "hooks.yaml.tmpl.example",
          "type": "blob",
          "size": 0.6962890625,
          "content": "- id: webhook\n  execute-command: /home/adnan/redeploy-go-webhook.sh\n  command-working-directory: /home/adnan/go\n  response-message: I got the payload!\n  response-headers:\n  - name: Access-Control-Allow-Origin\n    value: '*'\n  pass-arguments-to-command:\n  - source: payload\n    name: head_commit.id\n  - source: payload\n    name: pusher.name\n  - source: payload\n    name: pusher.email\n  trigger-rule:\n    and:\n    - match:\n        type: payload-hmac-sha1\n        secret: \"{{ getenv \"XXXTEST_SECRET\" | js }}\"\n        parameter:\n          source: header\n          name: X-Hub-Signature\n    - match:\n        type: value\n        value: refs/heads/master\n        parameter:\n          source: payload\n          name: ref\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "platform_unix.go",
          "type": "blob",
          "size": 1.6484375,
          "content": "//go:build !windows\n// +build !windows\n\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"github.com/coreos/go-systemd/v22/activation\"\n\t\"net\"\n)\n\nfunc platformFlags() {\n\tflag.StringVar(&socket, \"socket\", \"\", \"path to a Unix socket (e.g. /tmp/webhook.sock) to use instead of listening on an ip and port; if specified, the ip and port options are ignored\")\n\tflag.IntVar(&setGID, \"setgid\", 0, \"set group ID after opening listening port; must be used with setuid, not permitted with -socket\")\n\tflag.IntVar(&setUID, \"setuid\", 0, \"set user ID after opening listening port; must be used with setgid, not permitted with -socket\")\n}\n\nfunc trySocketListener() (net.Listener, error) {\n\t// first check whether we have any sockets from systemd\n\tlisteners, err := activation.Listeners()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to retrieve sockets from systemd: %w\", err)\n\t}\n\tnumListeners := len(listeners)\n\tif numListeners > 1 {\n\t\treturn nil, fmt.Errorf(\"received %d sockets from systemd, but only 1 is supported\", numListeners)\n\t}\n\tif numListeners == 1 {\n\t\tsockAddr := listeners[0].Addr()\n\t\tif sockAddr.Network() == \"tcp\" {\n\t\t\taddr = sockAddr.String()\n\t\t} else {\n\t\t\taddr = fmt.Sprintf(\"{%s:%s}\", sockAddr.Network(), sockAddr.String())\n\t\t}\n\t\treturn listeners[0], nil\n\t}\n\t// if we get to here, we got no sockets from systemd, so check -socket flag\n\tif socket != \"\" {\n\t\tif setGID != 0 || setUID != 0 {\n\t\t\treturn nil, fmt.Errorf(\"-setuid and -setgid options are not compatible with -socket.  If you need to bind a socket as root but run webhook as a different user, consider using systemd activation\")\n\t\t}\n\t\taddr = fmt.Sprintf(\"{unix:%s}\", socket)\n\t\treturn net.Listen(\"unix\", socket)\n\t}\n\treturn nil, nil\n}\n"
        },
        {
          "name": "platform_windows.go",
          "type": "blob",
          "size": 0.5,
          "content": "//go:build windows\n// +build windows\n\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"github.com/Microsoft/go-winio\"\n\t\"net\"\n)\n\nfunc platformFlags() {\n\tflag.StringVar(&socket, \"socket\", \"\", \"path to a Windows named pipe (e.g. \\\\\\\\.\\\\pipe\\\\webhook) to use instead of listening on an ip and port; if specified, the ip and port options are ignored\")\n}\n\nfunc trySocketListener() (net.Listener, error) {\n\tif socket != \"\" {\n\t\taddr = fmt.Sprintf(\"{pipe:%s}\", socket)\n\t\treturn winio.ListenPipe(socket, nil)\n\t}\n\treturn nil, nil\n}\n"
        },
        {
          "name": "signals.go",
          "type": "blob",
          "size": 1.2470703125,
          "content": "//go:build !windows\n// +build !windows\n\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\t\"syscall\"\n)\n\nfunc setupSignals() {\n\tlog.Printf(\"setting up os signal watcher\\n\")\n\n\tsignals = make(chan os.Signal, 1)\n\tsignal.Notify(signals, syscall.SIGUSR1)\n\tsignal.Notify(signals, syscall.SIGHUP)\n\tsignal.Notify(signals, syscall.SIGTERM)\n\tsignal.Notify(signals, os.Interrupt)\n\n\tgo watchForSignals()\n}\n\nfunc watchForSignals() {\n\tlog.Println(\"os signal watcher ready\")\n\n\tfor {\n\t\tsig := <-signals\n\t\tswitch sig {\n\t\tcase syscall.SIGUSR1:\n\t\t\tlog.Println(\"caught USR1 signal\")\n\t\t\treloadAllHooks()\n\n\t\tcase syscall.SIGHUP:\n\t\t\tlog.Println(\"caught HUP signal\")\n\t\t\treloadAllHooks()\n\n\t\tcase os.Interrupt, syscall.SIGTERM:\n\t\t\tlog.Printf(\"caught %s signal; exiting\\n\", sig)\n\t\t\tif pidFile != nil {\n\t\t\t\terr := pidFile.Remove()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Print(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif socket != \"\" && !strings.HasPrefix(socket, \"@\") {\n\t\t\t\t// we've been listening on a named Unix socket, delete it\n\t\t\t\t// before we exit so subsequent runs can re-bind the same\n\t\t\t\t// socket path\n\t\t\t\terr := os.Remove(socket)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"Failed to remove socket file %s: %v\", socket, err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tos.Exit(0)\n\n\t\tdefault:\n\t\t\tlog.Printf(\"caught unhandled signal %+v\\n\", sig)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "signals_windows.go",
          "type": "blob",
          "size": 0.123046875,
          "content": "// +build windows\n\npackage main\n\nfunc setupSignals() {\n\t// NOOP: Windows doesn't have signals equivalent to the Unix world.\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "testutils.go",
          "type": "blob",
          "size": 0.6494140625,
          "content": "//go:build !windows\n// +build !windows\n\npackage main\n\nimport (\n\t\"context\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n)\n\nfunc prepareTestSocket(_ string) (socketPath string, transport *http.Transport, cleanup func(), err error) {\n\ttmp, err := ioutil.TempDir(\"\", \"webhook-socket-\")\n\tif err != nil {\n\t\treturn \"\", nil, nil, err\n\t}\n\tcleanup = func() { os.RemoveAll(tmp) }\n\tsocketPath = path.Join(tmp, \"webhook.sock\")\n\tsocketDialer := &net.Dialer{}\n\ttransport = &http.Transport{\n\t\tDialContext: func(ctx context.Context, _, _ string) (net.Conn, error) {\n\t\t\treturn socketDialer.DialContext(ctx, \"unix\", socketPath)\n\t\t},\n\t}\n\n\treturn socketPath, transport, cleanup, nil\n}\n"
        },
        {
          "name": "testutils_windows.go",
          "type": "blob",
          "size": 0.484375,
          "content": "//go:build windows\n// +build windows\n\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/Microsoft/go-winio\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc prepareTestSocket(hookTmpl string) (socketPath string, transport *http.Transport, cleanup func(), err error) {\n\tsocketPath = \"\\\\\\\\.\\\\pipe\\\\webhook-\" + hookTmpl\n\ttransport = &http.Transport{\n\t\tDialContext: func(ctx context.Context, _, _ string) (net.Conn, error) {\n\t\t\treturn winio.DialPipeContext(ctx, socketPath)\n\t\t},\n\t}\n\n\treturn socketPath, transport, nil, nil\n}\n"
        },
        {
          "name": "tls.go",
          "type": "blob",
          "size": 1.423828125,
          "content": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"io\"\n\t\"log\"\n\t\"strings\"\n)\n\nfunc writeTLSSupportedCipherStrings(w io.Writer, min uint16) error {\n\tfor _, c := range tls.CipherSuites() {\n\t\tvar found bool\n\n\t\tfor _, v := range c.SupportedVersions {\n\t\t\tif v >= min {\n\t\t\t\tfound = true\n\t\t\t}\n\t\t}\n\n\t\tif !found {\n\t\t\tcontinue\n\t\t}\n\n\t\t_, err := w.Write([]byte(c.Name + \"\\n\"))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// getTLSMinVersion converts a version string into a TLS version ID.\nfunc getTLSMinVersion(v string) uint16 {\n\tswitch v {\n\tcase \"1.0\":\n\t\treturn tls.VersionTLS10\n\tcase \"1.1\":\n\t\treturn tls.VersionTLS11\n\tcase \"1.2\", \"\":\n\t\treturn tls.VersionTLS12\n\tcase \"1.3\":\n\t\treturn tls.VersionTLS13\n\tdefault:\n\t\tlog.Fatalln(\"error: unknown minimum TLS version:\", v)\n\t\treturn 0\n\t}\n}\n\n// getTLSCipherSuites converts a comma separated list of cipher suites into a\n// slice of TLS cipher suite IDs.\nfunc getTLSCipherSuites(v string) []uint16 {\n\tsupported := tls.CipherSuites()\n\n\tif v == \"\" {\n\t\tsuites := make([]uint16, len(supported))\n\n\t\tfor _, cs := range supported {\n\t\t\tsuites = append(suites, cs.ID)\n\t\t}\n\n\t\treturn suites\n\t}\n\n\tvar found bool\n\ttxts := strings.Split(v, \",\")\n\tsuites := make([]uint16, len(txts))\n\n\tfor _, want := range txts {\n\t\tfound = false\n\n\t\tfor _, cs := range supported {\n\t\t\tif want == cs.Name {\n\t\t\t\tsuites = append(suites, cs.ID)\n\t\t\t\tfound = true\n\t\t\t}\n\t\t}\n\n\t\tif !found {\n\t\t\tlog.Fatalln(\"error: unknown TLS cipher suite:\", want)\n\t\t}\n\t}\n\n\treturn suites\n}\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "webhook.go",
          "type": "blob",
          "size": 22.828125,
          "content": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/adnanh/webhook/internal/hook\"\n\t\"github.com/adnanh/webhook/internal/middleware\"\n\t\"github.com/adnanh/webhook/internal/pidfile\"\n\n\t\"github.com/fsnotify/fsnotify\"\n\tchimiddleware \"github.com/go-chi/chi/v5/middleware\"\n\t\"github.com/gorilla/mux\"\n)\n\nconst (\n\tversion = \"2.8.2\"\n)\n\nvar (\n\tip                 = flag.String(\"ip\", \"0.0.0.0\", \"ip the webhook should serve hooks on\")\n\tport               = flag.Int(\"port\", 9000, \"port the webhook should serve hooks on\")\n\tverbose            = flag.Bool(\"verbose\", false, \"show verbose output\")\n\tlogPath            = flag.String(\"logfile\", \"\", \"send log output to a file; implicitly enables verbose logging\")\n\tdebug              = flag.Bool(\"debug\", false, \"show debug output\")\n\tnoPanic            = flag.Bool(\"nopanic\", false, \"do not panic if hooks cannot be loaded when webhook is not running in verbose mode\")\n\thotReload          = flag.Bool(\"hotreload\", false, \"watch hooks file for changes and reload them automatically\")\n\thooksURLPrefix     = flag.String(\"urlprefix\", \"hooks\", \"url prefix to use for served hooks (protocol://yourserver:port/PREFIX/:hook-id)\")\n\tsecure             = flag.Bool(\"secure\", false, \"use HTTPS instead of HTTP\")\n\tasTemplate         = flag.Bool(\"template\", false, \"parse hooks file as a Go template\")\n\tcert               = flag.String(\"cert\", \"cert.pem\", \"path to the HTTPS certificate pem file\")\n\tkey                = flag.String(\"key\", \"key.pem\", \"path to the HTTPS certificate private key pem file\")\n\tjustDisplayVersion = flag.Bool(\"version\", false, \"display webhook version and quit\")\n\tjustListCiphers    = flag.Bool(\"list-cipher-suites\", false, \"list available TLS cipher suites\")\n\ttlsMinVersion      = flag.String(\"tls-min-version\", \"1.2\", \"minimum TLS version (1.0, 1.1, 1.2, 1.3)\")\n\ttlsCipherSuites    = flag.String(\"cipher-suites\", \"\", \"comma-separated list of supported TLS cipher suites\")\n\tuseXRequestID      = flag.Bool(\"x-request-id\", false, \"use X-Request-Id header, if present, as request ID\")\n\txRequestIDLimit    = flag.Int(\"x-request-id-limit\", 0, \"truncate X-Request-Id header to limit; default no limit\")\n\tmaxMultipartMem    = flag.Int64(\"max-multipart-mem\", 1<<20, \"maximum memory in bytes for parsing multipart form data before disk caching\")\n\thttpMethods        = flag.String(\"http-methods\", \"\", `set default allowed HTTP methods (ie. \"POST\"); separate methods with comma`)\n\tpidPath            = flag.String(\"pidfile\", \"\", \"create PID file at the given path\")\n\n\tresponseHeaders hook.ResponseHeaders\n\thooksFiles      hook.HooksFiles\n\n\tloadedHooksFromFiles = make(map[string]hook.Hooks)\n\n\twatcher *fsnotify.Watcher\n\tsignals chan os.Signal\n\tpidFile *pidfile.PIDFile\n\tsetUID  = 0\n\tsetGID  = 0\n\tsocket  = \"\"\n\taddr    = \"\"\n)\n\nfunc matchLoadedHook(id string) *hook.Hook {\n\tfor _, hooks := range loadedHooksFromFiles {\n\t\tif hook := hooks.Match(id); hook != nil {\n\t\t\treturn hook\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc lenLoadedHooks() int {\n\tsum := 0\n\tfor _, hooks := range loadedHooksFromFiles {\n\t\tsum += len(hooks)\n\t}\n\n\treturn sum\n}\n\nfunc main() {\n\tflag.Var(&hooksFiles, \"hooks\", \"path to the json file containing defined hooks the webhook should serve, use multiple times to load from different files\")\n\tflag.Var(&responseHeaders, \"header\", \"response header to return, specified in format name=value, use multiple times to set multiple headers\")\n\n\t// register platform-specific flags\n\tplatformFlags()\n\n\tflag.Parse()\n\n\tif *justDisplayVersion {\n\t\tfmt.Println(\"webhook version \" + version)\n\t\tos.Exit(0)\n\t}\n\n\tif *justListCiphers {\n\t\terr := writeTLSSupportedCipherStrings(os.Stdout, getTLSMinVersion(*tlsMinVersion))\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tos.Exit(0)\n\t}\n\n\tif (setUID != 0 || setGID != 0) && (setUID == 0 || setGID == 0) {\n\t\tfmt.Println(\"error: setuid and setgid options must be used together\")\n\t\tos.Exit(1)\n\t}\n\n\tif *debug || *logPath != \"\" {\n\t\t*verbose = true\n\t}\n\n\tif len(hooksFiles) == 0 {\n\t\thooksFiles = append(hooksFiles, \"hooks.json\")\n\t}\n\n\t// logQueue is a queue for log messages encountered during startup. We need\n\t// to queue the messages so that we can handle any privilege dropping and\n\t// log file opening prior to writing our first log message.\n\tvar logQueue []string\n\n\t// by default the listen address is ip:port (default 0.0.0.0:9000), but\n\t// this may be modified by trySocketListener\n\taddr = fmt.Sprintf(\"%s:%d\", *ip, *port)\n\n\tln, err := trySocketListener()\n\tif err != nil {\n\t\tlogQueue = append(logQueue, fmt.Sprintf(\"error listening on socket: %s\", err))\n\t\t// we'll bail out below\n\t} else if ln == nil {\n\t\t// Open listener early so we can drop privileges.\n\t\tln, err = net.Listen(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\tlogQueue = append(logQueue, fmt.Sprintf(\"error listening on port: %s\", err))\n\t\t\t// we'll bail out below\n\t\t}\n\t}\n\n\tif setUID != 0 {\n\t\terr := dropPrivileges(setUID, setGID)\n\t\tif err != nil {\n\t\t\tlogQueue = append(logQueue, fmt.Sprintf(\"error dropping privileges: %s\", err))\n\t\t\t// we'll bail out below\n\t\t}\n\t}\n\n\tif *logPath != \"\" {\n\t\tfile, err := os.OpenFile(*logPath, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0o666)\n\t\tif err != nil {\n\t\t\tlogQueue = append(logQueue, fmt.Sprintf(\"error opening log file %q: %v\", *logPath, err))\n\t\t\t// we'll bail out below\n\t\t} else {\n\t\t\tlog.SetOutput(file)\n\t\t}\n\t}\n\n\tlog.SetPrefix(\"[webhook] \")\n\tlog.SetFlags(log.Ldate | log.Ltime)\n\n\tif len(logQueue) != 0 {\n\t\tfor i := range logQueue {\n\t\t\tlog.Println(logQueue[i])\n\t\t}\n\n\t\tos.Exit(1)\n\t}\n\n\tif !*verbose {\n\t\tlog.SetOutput(ioutil.Discard)\n\t}\n\n\t// Create pidfile\n\tif *pidPath != \"\" {\n\t\tvar err error\n\n\t\tpidFile, err = pidfile.New(*pidPath)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error creating pidfile: %v\", err)\n\t\t}\n\n\t\tdefer func() {\n\t\t\t// NOTE(moorereason): my testing shows that this doesn't work with\n\t\t\t// ^C, so we also do a Remove in the signal handler elsewhere.\n\t\t\tif nerr := pidFile.Remove(); nerr != nil {\n\t\t\t\tlog.Print(nerr)\n\t\t\t}\n\t\t}()\n\t}\n\n\tlog.Println(\"version \" + version + \" starting\")\n\n\t// set os signal watcher\n\tsetupSignals()\n\n\t// load and parse hooks\n\tfor _, hooksFilePath := range hooksFiles {\n\t\tlog.Printf(\"attempting to load hooks from %s\\n\", hooksFilePath)\n\n\t\tnewHooks := hook.Hooks{}\n\n\t\terr := newHooks.LoadFromFile(hooksFilePath, *asTemplate)\n\n\t\tif err != nil {\n\t\t\tlog.Printf(\"couldn't load hooks from file! %+v\\n\", err)\n\t\t} else {\n\t\t\tlog.Printf(\"found %d hook(s) in file\\n\", len(newHooks))\n\n\t\t\tfor _, hook := range newHooks {\n\t\t\t\tif matchLoadedHook(hook.ID) != nil {\n\t\t\t\t\tlog.Fatalf(\"error: hook with the id %s has already been loaded!\\nplease check your hooks file for duplicate hooks ids!\\n\", hook.ID)\n\t\t\t\t}\n\t\t\t\tlog.Printf(\"\\tloaded: %s\\n\", hook.ID)\n\t\t\t}\n\n\t\t\tloadedHooksFromFiles[hooksFilePath] = newHooks\n\t\t}\n\t}\n\n\tnewHooksFiles := hooksFiles[:0]\n\tfor _, filePath := range hooksFiles {\n\t\tif _, ok := loadedHooksFromFiles[filePath]; ok {\n\t\t\tnewHooksFiles = append(newHooksFiles, filePath)\n\t\t}\n\t}\n\n\thooksFiles = newHooksFiles\n\n\tif !*verbose && !*noPanic && lenLoadedHooks() == 0 {\n\t\tlog.SetOutput(os.Stdout)\n\t\tlog.Fatalln(\"couldn't load any hooks from file!\\naborting webhook execution since the -verbose flag is set to false.\\nIf, for some reason, you want webhook to start without the hooks, either use -verbose flag, or -nopanic\")\n\t}\n\n\tif *hotReload {\n\t\tvar err error\n\n\t\twatcher, err = fsnotify.NewWatcher()\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"error creating file watcher instance\\n\", err)\n\t\t}\n\t\tdefer watcher.Close()\n\n\t\tfor _, hooksFilePath := range hooksFiles {\n\t\t\t// set up file watcher\n\t\t\tlog.Printf(\"setting up file watcher for %s\\n\", hooksFilePath)\n\n\t\t\terr = watcher.Add(hooksFilePath)\n\t\t\tif err != nil {\n\t\t\t\tlog.Print(\"error adding hooks file to the watcher\\n\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tgo watchForFileChange()\n\t}\n\n\tr := mux.NewRouter()\n\n\tr.Use(middleware.RequestID(\n\t\tmiddleware.UseXRequestIDHeaderOption(*useXRequestID),\n\t\tmiddleware.XRequestIDLimitOption(*xRequestIDLimit),\n\t))\n\tr.Use(middleware.NewLogger())\n\tr.Use(chimiddleware.Recoverer)\n\n\tif *debug {\n\t\tr.Use(middleware.Dumper(log.Writer()))\n\t}\n\n\t// Clean up input\n\t*httpMethods = strings.ToUpper(strings.ReplaceAll(*httpMethods, \" \", \"\"))\n\n\thooksURL := makeRoutePattern(hooksURLPrefix)\n\n\tr.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tfor _, responseHeader := range responseHeaders {\n\t\t\tw.Header().Set(responseHeader.Name, responseHeader.Value)\n\t\t}\n\n\t\tfmt.Fprint(w, \"OK\")\n\t})\n\n\tr.HandleFunc(hooksURL, hookHandler)\n\n\t// Create common HTTP server settings\n\tsvr := &http.Server{\n\t\tHandler: r,\n\t}\n\n\t// Serve HTTP\n\tif !*secure {\n\t\tlog.Printf(\"serving hooks on http://%s%s\", addr, makeHumanPattern(hooksURLPrefix))\n\t\tlog.Print(svr.Serve(ln))\n\n\t\treturn\n\t}\n\n\t// Server HTTPS\n\tsvr.TLSConfig = &tls.Config{\n\t\tCipherSuites:             getTLSCipherSuites(*tlsCipherSuites),\n\t\tCurvePreferences:         []tls.CurveID{tls.CurveP521, tls.CurveP384, tls.CurveP256},\n\t\tMinVersion:               getTLSMinVersion(*tlsMinVersion),\n\t\tPreferServerCipherSuites: true,\n\t}\n\tsvr.TLSNextProto = make(map[string]func(*http.Server, *tls.Conn, http.Handler)) // disable http/2\n\n\tlog.Printf(\"serving hooks on https://%s%s\", addr, makeHumanPattern(hooksURLPrefix))\n\tlog.Print(svr.ServeTLS(ln, *cert, *key))\n}\n\nfunc hookHandler(w http.ResponseWriter, r *http.Request) {\n\treq := &hook.Request{\n\t\tID:         middleware.GetReqID(r.Context()),\n\t\tRawRequest: r,\n\t}\n\n\tlog.Printf(\"[%s] incoming HTTP %s request from %s\\n\", req.ID, r.Method, r.RemoteAddr)\n\n\t// TODO: rename this to avoid confusion with Request.ID\n\tid := mux.Vars(r)[\"id\"]\n\n\tmatchedHook := matchLoadedHook(id)\n\tif matchedHook == nil {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\tfmt.Fprint(w, \"Hook not found.\")\n\t\treturn\n\t}\n\n\t// Check for allowed methods\n\tvar allowedMethod bool\n\n\tswitch {\n\tcase len(matchedHook.HTTPMethods) != 0:\n\t\tfor i := range matchedHook.HTTPMethods {\n\t\t\t// TODO(moorereason): refactor config loading and reloading to\n\t\t\t// sanitize these methods once at load time.\n\t\t\tif r.Method == strings.ToUpper(strings.TrimSpace(matchedHook.HTTPMethods[i])) {\n\t\t\t\tallowedMethod = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\tcase *httpMethods != \"\":\n\t\tfor _, v := range strings.Split(*httpMethods, \",\") {\n\t\t\tif r.Method == v {\n\t\t\t\tallowedMethod = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\tdefault:\n\t\tallowedMethod = true\n\t}\n\n\tif !allowedMethod {\n\t\tw.WriteHeader(http.StatusMethodNotAllowed)\n\t\tlog.Printf(\"[%s] HTTP %s method not allowed for hook %q\", req.ID, r.Method, id)\n\n\t\treturn\n\t}\n\n\tlog.Printf(\"[%s] %s got matched\\n\", req.ID, id)\n\n\tfor _, responseHeader := range responseHeaders {\n\t\tw.Header().Set(responseHeader.Name, responseHeader.Value)\n\t}\n\n\tvar err error\n\n\t// set contentType to IncomingPayloadContentType or header value\n\treq.ContentType = r.Header.Get(\"Content-Type\")\n\tif len(matchedHook.IncomingPayloadContentType) != 0 {\n\t\treq.ContentType = matchedHook.IncomingPayloadContentType\n\t}\n\n\tisMultipart := strings.HasPrefix(req.ContentType, \"multipart/form-data;\")\n\n\tif !isMultipart {\n\t\treq.Body, err = ioutil.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[%s] error reading the request body: %+v\\n\", req.ID, err)\n\t\t}\n\t}\n\n\treq.ParseHeaders(r.Header)\n\treq.ParseQuery(r.URL.Query())\n\n\tswitch {\n\tcase strings.Contains(req.ContentType, \"json\"):\n\t\terr = req.ParseJSONPayload()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[%s] %s\", req.ID, err)\n\t\t}\n\n\tcase strings.Contains(req.ContentType, \"x-www-form-urlencoded\"):\n\t\terr = req.ParseFormPayload()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[%s] %s\", req.ID, err)\n\t\t}\n\n\tcase strings.Contains(req.ContentType, \"xml\"):\n\t\terr = req.ParseXMLPayload()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[%s] %s\", req.ID, err)\n\t\t}\n\n\tcase isMultipart:\n\t\terr = r.ParseMultipartForm(*maxMultipartMem)\n\t\tif err != nil {\n\t\t\tmsg := fmt.Sprintf(\"[%s] error parsing multipart form: %+v\\n\", req.ID, err)\n\t\t\tlog.Println(msg)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\tfmt.Fprint(w, \"Error occurred while parsing multipart form.\")\n\t\t\treturn\n\t\t}\n\n\t\tfor k, v := range r.MultipartForm.Value {\n\t\t\tlog.Printf(\"[%s] found multipart form value %q\", req.ID, k)\n\n\t\t\tif req.Payload == nil {\n\t\t\t\treq.Payload = make(map[string]interface{})\n\t\t\t}\n\n\t\t\t// TODO(moorereason): support duplicate, named values\n\t\t\treq.Payload[k] = v[0]\n\t\t}\n\n\t\tfor k, v := range r.MultipartForm.File {\n\t\t\t// Force parsing as JSON regardless of Content-Type.\n\t\t\tvar parseAsJSON bool\n\t\t\tfor _, j := range matchedHook.JSONStringParameters {\n\t\t\t\tif j.Source == \"payload\" && j.Name == k {\n\t\t\t\t\tparseAsJSON = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TODO(moorereason): we need to support multiple parts\n\t\t\t// with the same name instead of just processing the first\n\t\t\t// one. Will need #215 resolved first.\n\n\t\t\t// MIME encoding can contain duplicate headers, so check them\n\t\t\t// all.\n\t\t\tif !parseAsJSON && len(v[0].Header[\"Content-Type\"]) > 0 {\n\t\t\t\tfor _, j := range v[0].Header[\"Content-Type\"] {\n\t\t\t\t\tif j == \"application/json\" {\n\t\t\t\t\t\tparseAsJSON = true\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif parseAsJSON {\n\t\t\t\tlog.Printf(\"[%s] parsing multipart form file %q as JSON\\n\", req.ID, k)\n\n\t\t\t\tf, err := v[0].Open()\n\t\t\t\tif err != nil {\n\t\t\t\t\tmsg := fmt.Sprintf(\"[%s] error parsing multipart form file: %+v\\n\", req.ID, err)\n\t\t\t\t\tlog.Println(msg)\n\t\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t\tfmt.Fprint(w, \"Error occurred while parsing multipart form file.\")\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tdecoder := json.NewDecoder(f)\n\t\t\t\tdecoder.UseNumber()\n\n\t\t\t\tvar part map[string]interface{}\n\t\t\t\terr = decoder.Decode(&part)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"[%s] error parsing JSON payload file: %+v\\n\", req.ID, err)\n\t\t\t\t}\n\n\t\t\t\tif req.Payload == nil {\n\t\t\t\t\treq.Payload = make(map[string]interface{})\n\t\t\t\t}\n\t\t\t\treq.Payload[k] = part\n\t\t\t}\n\t\t}\n\n\tdefault:\n\t\tlog.Printf(\"[%s] error parsing body payload due to unsupported content type header: %s\\n\", req.ID, req.ContentType)\n\t}\n\n\t// handle hook\n\terrors := matchedHook.ParseJSONParameters(req)\n\tfor _, err := range errors {\n\t\tlog.Printf(\"[%s] error parsing JSON parameters: %s\\n\", req.ID, err)\n\t}\n\n\tvar ok bool\n\n\tif matchedHook.TriggerRule == nil {\n\t\tok = true\n\t} else {\n\t\t// Save signature soft failures option in request for evaluators\n\t\treq.AllowSignatureErrors = matchedHook.TriggerSignatureSoftFailures\n\n\t\tok, err = matchedHook.TriggerRule.Evaluate(req)\n\t\tif err != nil {\n\t\t\tif !hook.IsParameterNodeError(err) {\n\t\t\t\tmsg := fmt.Sprintf(\"[%s] error evaluating hook: %s\", req.ID, err)\n\t\t\t\tlog.Println(msg)\n\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\tfmt.Fprint(w, \"Error occurred while evaluating hook rules.\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlog.Printf(\"[%s] %v\", req.ID, err)\n\t\t}\n\t}\n\n\tif ok {\n\t\tlog.Printf(\"[%s] %s hook triggered successfully\\n\", req.ID, matchedHook.ID)\n\n\t\tfor _, responseHeader := range matchedHook.ResponseHeaders {\n\t\t\tw.Header().Set(responseHeader.Name, responseHeader.Value)\n\t\t}\n\n\t\tif matchedHook.CaptureCommandOutput {\n\t\t\tresponse, err := handleHook(matchedHook, req)\n\n\t\t\tif err != nil {\n\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\tif matchedHook.CaptureCommandOutputOnError {\n\t\t\t\t\tfmt.Fprint(w, response)\n\t\t\t\t} else {\n\t\t\t\t\tw.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")\n\t\t\t\t\tfmt.Fprint(w, \"Error occurred while executing the hook's command. Please check your logs for more details.\")\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Check if a success return code is configured for the hook\n\t\t\t\tif matchedHook.SuccessHttpResponseCode != 0 {\n\t\t\t\t\twriteHttpResponseCode(w, req.ID, matchedHook.ID, matchedHook.SuccessHttpResponseCode)\n\t\t\t\t}\n\t\t\t\tfmt.Fprint(w, response)\n\t\t\t}\n\t\t} else {\n\t\t\tgo handleHook(matchedHook, req)\n\n\t\t\t// Check if a success return code is configured for the hook\n\t\t\tif matchedHook.SuccessHttpResponseCode != 0 {\n\t\t\t\twriteHttpResponseCode(w, req.ID, matchedHook.ID, matchedHook.SuccessHttpResponseCode)\n\t\t\t}\n\n\t\t\tfmt.Fprint(w, matchedHook.ResponseMessage)\n\t\t}\n\t\treturn\n\t}\n\n\t// Check if a return code is configured for the hook\n\tif matchedHook.TriggerRuleMismatchHttpResponseCode != 0 {\n\t\twriteHttpResponseCode(w, req.ID, matchedHook.ID, matchedHook.TriggerRuleMismatchHttpResponseCode)\n\t}\n\n\t// if none of the hooks got triggered\n\tlog.Printf(\"[%s] %s got matched, but didn't get triggered because the trigger rules were not satisfied\\n\", req.ID, matchedHook.ID)\n\n\tfmt.Fprint(w, \"Hook rules were not satisfied.\")\n}\n\nfunc handleHook(h *hook.Hook, r *hook.Request) (string, error) {\n\tvar errors []error\n\n\t// check the command exists\n\tvar lookpath string\n\tif filepath.IsAbs(h.ExecuteCommand) || h.CommandWorkingDirectory == \"\" {\n\t\tlookpath = h.ExecuteCommand\n\t} else {\n\t\tlookpath = filepath.Join(h.CommandWorkingDirectory, h.ExecuteCommand)\n\t}\n\n\tcmdPath, err := exec.LookPath(lookpath)\n\tif err != nil {\n\t\tlog.Printf(\"[%s] error in %s\", r.ID, err)\n\n\t\t// check if parameters specified in execute-command by mistake\n\t\tif strings.IndexByte(h.ExecuteCommand, ' ') != -1 {\n\t\t\ts := strings.Fields(h.ExecuteCommand)[0]\n\t\t\tlog.Printf(\"[%s] use 'pass-arguments-to-command' to specify args for '%s'\", r.ID, s)\n\t\t}\n\n\t\treturn \"\", err\n\t}\n\n\tcmd := exec.Command(cmdPath)\n\tcmd.Dir = h.CommandWorkingDirectory\n\n\tcmd.Args, errors = h.ExtractCommandArguments(r)\n\tfor _, err := range errors {\n\t\tlog.Printf(\"[%s] error extracting command arguments: %s\\n\", r.ID, err)\n\t}\n\n\tvar envs []string\n\tenvs, errors = h.ExtractCommandArgumentsForEnv(r)\n\n\tfor _, err := range errors {\n\t\tlog.Printf(\"[%s] error extracting command arguments for environment: %s\\n\", r.ID, err)\n\t}\n\n\tfiles, errors := h.ExtractCommandArgumentsForFile(r)\n\n\tfor _, err := range errors {\n\t\tlog.Printf(\"[%s] error extracting command arguments for file: %s\\n\", r.ID, err)\n\t}\n\n\tfor i := range files {\n\t\ttmpfile, err := ioutil.TempFile(h.CommandWorkingDirectory, files[i].EnvName)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[%s] error creating temp file [%s]\", r.ID, err)\n\t\t\tcontinue\n\t\t}\n\t\tlog.Printf(\"[%s] writing env %s file %s\", r.ID, files[i].EnvName, tmpfile.Name())\n\t\tif _, err := tmpfile.Write(files[i].Data); err != nil {\n\t\t\tlog.Printf(\"[%s] error writing file %s [%s]\", r.ID, tmpfile.Name(), err)\n\t\t\tcontinue\n\t\t}\n\t\tif err := tmpfile.Close(); err != nil {\n\t\t\tlog.Printf(\"[%s] error closing file %s [%s]\", r.ID, tmpfile.Name(), err)\n\t\t\tcontinue\n\t\t}\n\n\t\tfiles[i].File = tmpfile\n\t\tenvs = append(envs, files[i].EnvName+\"=\"+tmpfile.Name())\n\t}\n\n\tcmd.Env = append(os.Environ(), envs...)\n\n\tlog.Printf(\"[%s] executing %s (%s) with arguments %q and environment %s using %s as cwd\\n\", r.ID, h.ExecuteCommand, cmd.Path, cmd.Args, envs, cmd.Dir)\n\n\tout, err := cmd.CombinedOutput()\n\n\tlog.Printf(\"[%s] command output: %s\\n\", r.ID, out)\n\n\tif err != nil {\n\t\tlog.Printf(\"[%s] error occurred: %+v\\n\", r.ID, err)\n\t}\n\n\tfor i := range files {\n\t\tif files[i].File != nil {\n\t\t\tlog.Printf(\"[%s] removing file %s\\n\", r.ID, files[i].File.Name())\n\t\t\terr := os.Remove(files[i].File.Name())\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"[%s] error removing file %s [%s]\", r.ID, files[i].File.Name(), err)\n\t\t\t}\n\t\t}\n\t}\n\n\tlog.Printf(\"[%s] finished handling %s\\n\", r.ID, h.ID)\n\n\treturn string(out), err\n}\n\nfunc writeHttpResponseCode(w http.ResponseWriter, rid, hookId string, responseCode int) {\n\t// Check if the given return code is supported by the http package\n\t// by testing if there is a StatusText for this code.\n\tif len(http.StatusText(responseCode)) > 0 {\n\t\tw.WriteHeader(responseCode)\n\t} else {\n\t\tlog.Printf(\"[%s] %s got matched, but the configured return code %d is unknown - defaulting to 200\\n\", rid, hookId, responseCode)\n\t}\n}\n\nfunc reloadHooks(hooksFilePath string) {\n\thooksInFile := hook.Hooks{}\n\n\t// parse and swap\n\tlog.Printf(\"attempting to reload hooks from %s\\n\", hooksFilePath)\n\n\terr := hooksInFile.LoadFromFile(hooksFilePath, *asTemplate)\n\n\tif err != nil {\n\t\tlog.Printf(\"couldn't load hooks from file! %+v\\n\", err)\n\t} else {\n\t\tseenHooksIds := make(map[string]bool)\n\n\t\tlog.Printf(\"found %d hook(s) in file\\n\", len(hooksInFile))\n\n\t\tfor _, hook := range hooksInFile {\n\t\t\twasHookIDAlreadyLoaded := false\n\n\t\t\tfor _, loadedHook := range loadedHooksFromFiles[hooksFilePath] {\n\t\t\t\tif loadedHook.ID == hook.ID {\n\t\t\t\t\twasHookIDAlreadyLoaded = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (matchLoadedHook(hook.ID) != nil && !wasHookIDAlreadyLoaded) || seenHooksIds[hook.ID] {\n\t\t\t\tlog.Printf(\"error: hook with the id %s has already been loaded!\\nplease check your hooks file for duplicate hooks ids!\", hook.ID)\n\t\t\t\tlog.Println(\"reverting hooks back to the previous configuration\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tseenHooksIds[hook.ID] = true\n\t\t\tlog.Printf(\"\\tloaded: %s\\n\", hook.ID)\n\t\t}\n\n\t\tloadedHooksFromFiles[hooksFilePath] = hooksInFile\n\t}\n}\n\nfunc reloadAllHooks() {\n\tfor _, hooksFilePath := range hooksFiles {\n\t\treloadHooks(hooksFilePath)\n\t}\n}\n\nfunc removeHooks(hooksFilePath string) {\n\tfor _, hook := range loadedHooksFromFiles[hooksFilePath] {\n\t\tlog.Printf(\"\\tremoving: %s\\n\", hook.ID)\n\t}\n\n\tnewHooksFiles := hooksFiles[:0]\n\tfor _, filePath := range hooksFiles {\n\t\tif filePath != hooksFilePath {\n\t\t\tnewHooksFiles = append(newHooksFiles, filePath)\n\t\t}\n\t}\n\n\thooksFiles = newHooksFiles\n\n\tremovedHooksCount := len(loadedHooksFromFiles[hooksFilePath])\n\n\tdelete(loadedHooksFromFiles, hooksFilePath)\n\n\tlog.Printf(\"removed %d hook(s) that were loaded from file %s\\n\", removedHooksCount, hooksFilePath)\n\n\tif !*verbose && !*noPanic && lenLoadedHooks() == 0 {\n\t\tlog.SetOutput(os.Stdout)\n\t\tlog.Fatalln(\"couldn't load any hooks from file!\\naborting webhook execution since the -verbose flag is set to false.\\nIf, for some reason, you want webhook to run without the hooks, either use -verbose flag, or -nopanic\")\n\t}\n}\n\nfunc watchForFileChange() {\n\tfor {\n\t\tselect {\n\t\tcase event := <-(*watcher).Events:\n\t\t\tif event.Op&fsnotify.Write == fsnotify.Write {\n\t\t\t\tlog.Printf(\"hooks file %s modified\\n\", event.Name)\n\t\t\t\treloadHooks(event.Name)\n\t\t\t} else if event.Op&fsnotify.Remove == fsnotify.Remove {\n\t\t\t\tif _, err := os.Stat(event.Name); os.IsNotExist(err) {\n\t\t\t\t\tlog.Printf(\"hooks file %s removed, no longer watching this file for changes, removing hooks that were loaded from it\\n\", event.Name)\n\t\t\t\t\t(*watcher).Remove(event.Name)\n\t\t\t\t\tremoveHooks(event.Name)\n\t\t\t\t}\n\t\t\t} else if event.Op&fsnotify.Rename == fsnotify.Rename {\n\t\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t\t\tif _, err := os.Stat(event.Name); os.IsNotExist(err) {\n\t\t\t\t\t// file was removed\n\t\t\t\t\tlog.Printf(\"hooks file %s removed, no longer watching this file for changes, and removing hooks that were loaded from it\\n\", event.Name)\n\t\t\t\t\t(*watcher).Remove(event.Name)\n\t\t\t\t\tremoveHooks(event.Name)\n\t\t\t\t} else {\n\t\t\t\t\t// file was overwritten\n\t\t\t\t\tlog.Printf(\"hooks file %s overwritten\\n\", event.Name)\n\t\t\t\t\treloadHooks(event.Name)\n\t\t\t\t\t(*watcher).Remove(event.Name)\n\t\t\t\t\t(*watcher).Add(event.Name)\n\t\t\t\t}\n\t\t\t}\n\t\tcase err := <-(*watcher).Errors:\n\t\t\tlog.Println(\"watcher error:\", err)\n\t\t}\n\t}\n}\n\n// valuesToMap converts map[string][]string to a map[string]string object\nfunc valuesToMap(values map[string][]string) map[string]interface{} {\n\tret := make(map[string]interface{})\n\n\tfor key, value := range values {\n\t\tif len(value) > 0 {\n\t\t\tret[key] = value[0]\n\t\t}\n\t}\n\n\treturn ret\n}\n\n// makeRoutePattern builds a pattern matching URL for the mux.\nfunc makeRoutePattern(prefix *string) string {\n\treturn makeBaseURL(prefix) + \"/{id:.*}\"\n}\n\n// makeHumanPattern builds a human-friendly URL for display.\nfunc makeHumanPattern(prefix *string) string {\n\treturn makeBaseURL(prefix) + \"/{id}\"\n}\n\n// makeBaseURL creates the base URL before any mux pattern matching.\nfunc makeBaseURL(prefix *string) string {\n\tif prefix == nil || *prefix == \"\" {\n\t\treturn \"\"\n\t}\n\n\treturn \"/\" + *prefix\n}\n"
        },
        {
          "name": "webhook_test.go",
          "type": "blob",
          "size": 29.8369140625,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"runtime\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\t\"text/template\"\n\t\"time\"\n\n\t\"github.com/adnanh/webhook/internal/hook\"\n)\n\nfunc TestStaticParams(t *testing.T) {\n\t// FIXME(moorereason): incorporate this test into TestWebhook.\n\t//   Need to be able to execute a binary with a space in the filename.\n\tif runtime.GOOS == \"windows\" {\n\t\tt.Skip(\"Skipping on Windows\")\n\t}\n\n\tspHeaders := make(map[string]interface{})\n\tspHeaders[\"User-Agent\"] = \"curl/7.54.0\"\n\tspHeaders[\"Accept\"] = \"*/*\"\n\n\t// case 2: binary with spaces in its name\n\td1 := []byte(\"#!/bin/sh\\n/bin/echo\\n\")\n\terr := ioutil.WriteFile(\"/tmp/with space\", d1, 0755)\n\tif err != nil {\n\t\tt.Fatalf(\"%v\", err)\n\t}\n\tdefer os.Remove(\"/tmp/with space\")\n\n\tspHook := &hook.Hook{\n\t\tID:                      \"static-params-name-space\",\n\t\tExecuteCommand:          \"/tmp/with space\",\n\t\tCommandWorkingDirectory: \"/tmp\",\n\t\tResponseMessage:         \"success\",\n\t\tCaptureCommandOutput:    true,\n\t\tPassArgumentsToCommand: []hook.Argument{\n\t\t\thook.Argument{Source: \"string\", Name: \"passed\"},\n\t\t},\n\t}\n\n\tb := &bytes.Buffer{}\n\tlog.SetOutput(b)\n\n\tr := &hook.Request{\n\t\tID:      \"test\",\n\t\tHeaders: spHeaders,\n\t}\n\t_, err = handleHook(spHook, r)\n\tif err != nil {\n\t\tt.Fatalf(\"Unexpected error: %v\\n\", err)\n\t}\n\tmatched, _ := regexp.MatchString(\"(?s)command output: .*static-params-name-space\", b.String())\n\tif !matched {\n\t\tt.Fatalf(\"Unexpected log output:\\n%sn\", b)\n\t}\n}\n\nfunc TestWebhook(t *testing.T) {\n\thookecho, cleanupHookecho := buildHookecho(t)\n\tdefer cleanupHookecho()\n\n\twebhook, cleanupWebhookFn := buildWebhook(t)\n\tdefer cleanupWebhookFn()\n\n\tfor _, hookTmpl := range []string{\"test/hooks.json.tmpl\", \"test/hooks.yaml.tmpl\"} {\n\t\tconfigPath, cleanupConfigFn := genConfig(t, hookecho, hookTmpl)\n\t\tdefer cleanupConfigFn()\n\n\t\trunTest := func(t *testing.T, tt hookHandlerTest, authority string, bindArgs []string, httpClient *http.Client) {\n\t\t\targs := []string{fmt.Sprintf(\"-hooks=%s\", configPath), \"-debug\"}\n\t\t\targs = append(args, bindArgs...)\n\n\t\t\tif len(tt.cliMethods) != 0 {\n\t\t\t\targs = append(args, \"-http-methods=\"+strings.Join(tt.cliMethods, \",\"))\n\t\t\t}\n\n\t\t\t// Setup a buffer for capturing webhook logs for later evaluation\n\t\t\tb := &buffer{}\n\n\t\t\tcmd := exec.Command(webhook, args...)\n\t\t\tcmd.Stderr = b\n\t\t\tcmd.Env = webhookEnv()\n\t\t\tcmd.Args[0] = \"webhook\"\n\t\t\tif err := cmd.Start(); err != nil {\n\t\t\t\tt.Fatalf(\"failed to start webhook: %s\", err)\n\t\t\t}\n\t\t\tdefer killAndWait(cmd)\n\n\t\t\twaitForServerReady(t, authority, httpClient)\n\n\t\t\turl := fmt.Sprintf(\"http://%s/hooks/%s\", authority, tt.id)\n\n\t\t\treq, err := http.NewRequest(tt.method, url, ioutil.NopCloser(strings.NewReader(tt.body)))\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"New request failed: %s\", err)\n\t\t\t}\n\n\t\t\tfor k, v := range tt.headers {\n\t\t\t\treq.Header.Add(k, v)\n\t\t\t}\n\n\t\t\tvar res *http.Response\n\n\t\t\treq.Header.Add(\"Content-Type\", tt.contentType)\n\t\t\treq.ContentLength = int64(len(tt.body))\n\n\t\t\tres, err = httpClient.Do(req)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"client.Do failed: %s\", err)\n\t\t\t}\n\n\t\t\tbody, err := ioutil.ReadAll(res.Body)\n\t\t\tres.Body.Close()\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"POST %q: failed to ready body: %s\", tt.desc, err)\n\t\t\t}\n\n\t\t\t// Test body\n\t\t\t{\n\t\t\t\tvar bodyFailed bool\n\n\t\t\t\tif tt.bodyIsRE {\n\t\t\t\t\tbodyFailed = string(body) == tt.respBody\n\t\t\t\t} else {\n\t\t\t\t\tr := regexp.MustCompile(tt.respBody)\n\t\t\t\t\tbodyFailed = !r.Match(body)\n\t\t\t\t}\n\n\t\t\t\tif res.StatusCode != tt.respStatus || bodyFailed {\n\t\t\t\t\tt.Errorf(\"failed %q (id: %s):\\nexpected status: %#v, response: %s\\ngot status: %#v, response: %s\\ncommand output:\\n%s\\n\", tt.desc, tt.id, tt.respStatus, tt.respBody, res.StatusCode, body, b)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif tt.logMatch == \"\" {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// There's the potential for a race condition below where we\n\t\t\t// try to read the logs buffer b before the logs have been\n\t\t\t// flushed by the webhook process. Kill the process to flush\n\t\t\t// the logs.\n\t\t\tkillAndWait(cmd)\n\n\t\t\tmatched, _ := regexp.MatchString(tt.logMatch, b.String())\n\t\t\tif !matched {\n\t\t\t\tt.Errorf(\"failed log match for %q (id: %s):\\nmatch pattern: %q\\ngot:\\n%s\", tt.desc, tt.id, tt.logMatch, b)\n\t\t\t}\n\t\t}\n\t\tfor _, tt := range hookHandlerTests {\n\t\t\tip, port := serverAddress(t)\n\n\t\t\tt.Run(tt.desc+\"@\"+hookTmpl, func(t *testing.T) {\n\t\t\t\trunTest(t, tt, fmt.Sprintf(\"%s:%s\", ip, port),\n\t\t\t\t\t[]string{\n\t\t\t\t\t\tfmt.Sprintf(\"-ip=%s\", ip),\n\t\t\t\t\t\tfmt.Sprintf(\"-port=%s\", port),\n\t\t\t\t\t},\n\t\t\t\t\t&http.Client{},\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\n\t\t// run a single test using socket rather than TCP binding - wrap in an\n\t\t// anonymous function so the deferred cleanup happens at the right time\n\t\tfunc() {\n\t\t\tsocketPath, transport, cleanup, err := prepareTestSocket(hookTmpl)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif cleanup != nil {\n\t\t\t\tdefer cleanup()\n\t\t\t}\n\n\t\t\ttt := hookHandlerTests[0]\n\t\t\tt.Run(tt.desc+\":socket@\"+hookTmpl, func(t *testing.T) {\n\t\t\t\trunTest(t, tt, \"socket\",\n\t\t\t\t\t[]string{\n\t\t\t\t\t\tfmt.Sprintf(\"-socket=%s\", socketPath),\n\t\t\t\t\t},\n\t\t\t\t\t&http.Client{\n\t\t\t\t\t\tTransport: transport,\n\t\t\t\t\t})\n\t\t\t})\n\t\t}()\n\t}\n}\n\nfunc buildHookecho(t *testing.T) (binPath string, cleanupFn func()) {\n\ttmp, err := ioutil.TempDir(\"\", \"hookecho-test-\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer func() {\n\t\tif cleanupFn == nil {\n\t\t\tos.RemoveAll(tmp)\n\t\t}\n\t}()\n\n\tbinPath = filepath.Join(tmp, \"hookecho\")\n\tif runtime.GOOS == \"windows\" {\n\t\tbinPath += \".exe\"\n\t}\n\n\tgobin := filepath.Join(runtime.GOROOT(), \"bin\", \"go\")\n\tcmd := exec.Command(gobin, \"build\", \"-o\", binPath, \"test/hookecho.go\")\n\tif err := cmd.Run(); err != nil {\n\t\tt.Fatalf(\"Building hookecho: %v\", err)\n\t}\n\n\treturn binPath, func() { os.RemoveAll(tmp) }\n}\n\nfunc genConfig(t *testing.T, bin, hookTemplate string) (configPath string, cleanupFn func()) {\n\ttmpl := template.Must(template.ParseFiles(hookTemplate))\n\n\ttmp, err := ioutil.TempDir(\"\", \"webhook-config-\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer func() {\n\t\tif cleanupFn == nil {\n\t\t\tos.RemoveAll(tmp)\n\t\t}\n\t}()\n\n\toutputBaseName := filepath.Ext(filepath.Ext(hookTemplate))\n\n\tpath := filepath.Join(tmp, outputBaseName)\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\tt.Fatalf(\"Creating config template: %v\", err)\n\t}\n\tdefer file.Close()\n\n\tdata := struct{ Hookecho string }{filepath.FromSlash(bin)}\n\tif runtime.GOOS == \"windows\" {\n\t\t// Simulate escaped backslashes on Windows.\n\t\tdata.Hookecho = strings.Replace(data.Hookecho, `\\`, `\\\\`, -1)\n\t}\n\tif err := tmpl.Execute(file, data); err != nil {\n\t\tt.Fatalf(\"Executing template: %v\", err)\n\t}\n\n\treturn path, func() { os.RemoveAll(tmp) }\n}\n\nfunc buildWebhook(t *testing.T) (binPath string, cleanupFn func()) {\n\ttmp, err := ioutil.TempDir(\"\", \"webhook-test-\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer func() {\n\t\tif cleanupFn == nil {\n\t\t\tos.RemoveAll(tmp)\n\t\t}\n\t}()\n\n\tbinPath = filepath.Join(tmp, \"webhook\")\n\tif runtime.GOOS == \"windows\" {\n\t\tbinPath += \".exe\"\n\t}\n\n\tgobin := filepath.Join(runtime.GOROOT(), \"bin\", \"go\")\n\tcmd := exec.Command(gobin, \"build\", \"-o\", binPath)\n\tif err := cmd.Run(); err != nil {\n\t\tt.Fatalf(\"Building webhook: %v\", err)\n\t}\n\n\treturn binPath, func() { os.RemoveAll(tmp) }\n}\n\nfunc serverAddress(t *testing.T) (string, string) {\n\tln, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\n\tif err != nil {\n\t\tln, err = net.Listen(\"tcp6\", \"[::1]:0\")\n\t}\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer ln.Close()\n\thost, port, err := net.SplitHostPort(ln.Addr().String())\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to split network address: %v\", err)\n\t}\n\treturn host, port\n}\n\nfunc waitForServerReady(t *testing.T, authority string, httpClient *http.Client) {\n\twaitForServer(t,\n\t\thttpClient,\n\t\tfmt.Sprintf(\"http://%s/\", authority),\n\t\thttp.StatusOK,\n\t\t5*time.Second)\n}\n\nconst pollInterval = 200 * time.Millisecond\n\nfunc waitForServer(t *testing.T, httpClient *http.Client, url string, status int, timeout time.Duration) {\n\tdeadline := time.Now().Add(timeout)\n\tfor time.Now().Before(deadline) {\n\t\ttime.Sleep(pollInterval)\n\t\tres, err := httpClient.Get(url)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif res.StatusCode == status {\n\t\t\treturn\n\t\t}\n\t}\n\tt.Fatalf(\"Server failed to respond in %v\", timeout)\n}\n\nfunc killAndWait(cmd *exec.Cmd) {\n\tif cmd == nil || cmd.ProcessState != nil && cmd.ProcessState.Exited() {\n\t\treturn\n\t}\n\n\tcmd.Process.Kill()\n\tcmd.Wait()\n}\n\n// webhookEnv returns the process environment without any existing hook\n// namespace variables.\nfunc webhookEnv() (env []string) {\n\tfor _, v := range os.Environ() {\n\t\tif strings.HasPrefix(v, hook.EnvNamespace) {\n\t\t\tcontinue\n\t\t}\n\t\tenv = append(env, v)\n\t}\n\treturn\n}\n\ntype hookHandlerTest struct {\n\tdesc        string\n\tid          string\n\tcliMethods  []string\n\tmethod      string\n\theaders     map[string]string\n\tcontentType string\n\tbody        string\n\tbodyIsRE    bool\n\n\trespStatus int\n\trespBody   string\n\tlogMatch   string\n}\n\nvar hookHandlerTests = []hookHandlerTest{\n\t{\n\t\t\"github\",\n\t\t\"github\",\n\t\tnil,\n\t\t\"POST\",\n\t\tmap[string]string{\"X-Hub-Signature\": \"f68df0375d7b03e3eb29b4cf9f9ec12e08f42ff8\"},\n\t\t\"application/json\",\n\t\t`{\n\t\t\t\"after\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\"before\":\"17c497ccc7cca9c2f735aa07e9e3813060ce9a6a\",\n\t\t\t\"commits\":[\n\t\t\t\t{\n\t\t\t\t\t\"added\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"author\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"committer\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"distinct\":true,\n\t\t\t\t\t\"id\":\"c441029cf673f84c8b7db52d0a5944ee5c52ff89\",\n\t\t\t\t\t\"message\":\"Test\",\n\t\t\t\t\t\"modified\":[\n\t\t\t\t\t\t\"README.md\"\n\t\t\t\t\t],\n\t\t\t\t\t\"removed\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"timestamp\":\"2013-02-22T13:50:07-08:00\",\n\t\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/c441029cf673f84c8b7db52d0a5944ee5c52ff89\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"added\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"author\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"committer\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"distinct\":true,\n\t\t\t\t\t\"id\":\"36c5f2243ed24de58284a96f2a643bed8c028658\",\n\t\t\t\t\t\"message\":\"This is me testing the windows client.\",\n\t\t\t\t\t\"modified\":[\n\t\t\t\t\t\t\"README.md\"\n\t\t\t\t\t],\n\t\t\t\t\t\"removed\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"timestamp\":\"2013-02-22T14:07:13-08:00\",\n\t\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/36c5f2243ed24de58284a96f2a643bed8c028658\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"added\":[\n\t\t\t\t\t\t\"words/madame-bovary.txt\"\n\t\t\t\t\t],\n\t\t\t\t\t\"author\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"committer\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"distinct\":true,\n\t\t\t\t\t\"id\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\t\t\"message\":\"Rename madame-bovary.txt to words/madame-bovary.txt\",\n\t\t\t\t\t\"modified\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"removed\":[\n\t\t\t\t\t\t\"madame-bovary.txt\"\n\t\t\t\t\t],\n\t\t\t\t\t\"timestamp\":\"2013-03-12T08:14:29-07:00\",\n\t\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/1481a2de7b2a7d02428ad93446ab166be7793fbb\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"compare\":\"https://github.com/octokitty/testing/compare/17c497ccc7cc...1481a2de7b2a\",\n\t\t\t\"created\":false,\n\t\t\t\"deleted\":false,\n\t\t\t\"forced\":false,\n\t\t\t\"head_commit\":{\n\t\t\t\t\"added\":[\n\t\t\t\t\t\"words/madame-bovary.txt\"\n\t\t\t\t],\n\t\t\t\t\"author\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"committer\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"distinct\":true,\n\t\t\t\t\"id\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\t\"message\":\"Rename madame-bovary.txt to words/madame-bovary.txt\",\n\t\t\t\t\"modified\":[\n\n\t\t\t\t],\n\t\t\t\t\"removed\":[\n\t\t\t\t\t\"madame-bovary.txt\"\n\t\t\t\t],\n\t\t\t\t\"timestamp\":\"2013-03-12T08:14:29-07:00\",\n\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/1481a2de7b2a7d02428ad93446ab166be7793fbb\"\n\t\t\t},\n\t\t\t\"pusher\":{\n\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\"name\":\"Garen Torikian\"\n\t\t\t},\n\t\t\t\"ref\":\"refs/heads/master\",\n\t\t\t\"repository\":{\n\t\t\t\t\"created_at\":1332977768,\n\t\t\t\t\"description\":\"\",\n\t\t\t\t\"fork\":false,\n\t\t\t\t\"forks\":0,\n\t\t\t\t\"has_downloads\":true,\n\t\t\t\t\"has_issues\":true,\n\t\t\t\t\"has_wiki\":true,\n\t\t\t\t\"homepage\":\"\",\n\t\t\t\t\"id\":3860742,\n\t\t\t\t\"language\":\"Ruby\",\n\t\t\t\t\"master_branch\":\"master\",\n\t\t\t\t\"name\":\"testing\",\n\t\t\t\t\"open_issues\":2,\n\t\t\t\t\"owner\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"private\":false,\n\t\t\t\t\"pushed_at\":1363295520,\n\t\t\t\t\"size\":2156,\n\t\t\t\t\"stargazers\":1,\n\t\t\t\t\"url\":\"https://github.com/octokitty/testing\",\n\t\t\t\t\"watchers\":1\n\t\t\t}\n\t\t}`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`arg: 1481a2de7b2a7d02428ad93446ab166be7793fbb lolwut@noway.biz\nenv: HOOK_head_commit.timestamp=2013-03-12T08:14:29-07:00\n`,\n\t\t``,\n\t},\n\t{\n\t\t\"github-multi-sig\",\n\t\t\"github-multi-sig\",\n\t\tnil,\n\t\t\"POST\",\n\t\tmap[string]string{\"X-Hub-Signature\": \"f68df0375d7b03e3eb29b4cf9f9ec12e08f42ff8\"},\n\t\t\"application/json\",\n\t\t`{\n\t\t\t\"after\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\"before\":\"17c497ccc7cca9c2f735aa07e9e3813060ce9a6a\",\n\t\t\t\"commits\":[\n\t\t\t\t{\n\t\t\t\t\t\"added\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"author\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"committer\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"distinct\":true,\n\t\t\t\t\t\"id\":\"c441029cf673f84c8b7db52d0a5944ee5c52ff89\",\n\t\t\t\t\t\"message\":\"Test\",\n\t\t\t\t\t\"modified\":[\n\t\t\t\t\t\t\"README.md\"\n\t\t\t\t\t],\n\t\t\t\t\t\"removed\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"timestamp\":\"2013-02-22T13:50:07-08:00\",\n\t\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/c441029cf673f84c8b7db52d0a5944ee5c52ff89\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"added\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"author\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"committer\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"distinct\":true,\n\t\t\t\t\t\"id\":\"36c5f2243ed24de58284a96f2a643bed8c028658\",\n\t\t\t\t\t\"message\":\"This is me testing the windows client.\",\n\t\t\t\t\t\"modified\":[\n\t\t\t\t\t\t\"README.md\"\n\t\t\t\t\t],\n\t\t\t\t\t\"removed\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"timestamp\":\"2013-02-22T14:07:13-08:00\",\n\t\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/36c5f2243ed24de58284a96f2a643bed8c028658\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"added\":[\n\t\t\t\t\t\t\"words/madame-bovary.txt\"\n\t\t\t\t\t],\n\t\t\t\t\t\"author\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"committer\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"distinct\":true,\n\t\t\t\t\t\"id\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\t\t\"message\":\"Rename madame-bovary.txt to words/madame-bovary.txt\",\n\t\t\t\t\t\"modified\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"removed\":[\n\t\t\t\t\t\t\"madame-bovary.txt\"\n\t\t\t\t\t],\n\t\t\t\t\t\"timestamp\":\"2013-03-12T08:14:29-07:00\",\n\t\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/1481a2de7b2a7d02428ad93446ab166be7793fbb\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"compare\":\"https://github.com/octokitty/testing/compare/17c497ccc7cc...1481a2de7b2a\",\n\t\t\t\"created\":false,\n\t\t\t\"deleted\":false,\n\t\t\t\"forced\":false,\n\t\t\t\"head_commit\":{\n\t\t\t\t\"added\":[\n\t\t\t\t\t\"words/madame-bovary.txt\"\n\t\t\t\t],\n\t\t\t\t\"author\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"committer\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"distinct\":true,\n\t\t\t\t\"id\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\t\"message\":\"Rename madame-bovary.txt to words/madame-bovary.txt\",\n\t\t\t\t\"modified\":[\n\n\t\t\t\t],\n\t\t\t\t\"removed\":[\n\t\t\t\t\t\"madame-bovary.txt\"\n\t\t\t\t],\n\t\t\t\t\"timestamp\":\"2013-03-12T08:14:29-07:00\",\n\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/1481a2de7b2a7d02428ad93446ab166be7793fbb\"\n\t\t\t},\n\t\t\t\"pusher\":{\n\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\"name\":\"Garen Torikian\"\n\t\t\t},\n\t\t\t\"ref\":\"refs/heads/master\",\n\t\t\t\"repository\":{\n\t\t\t\t\"created_at\":1332977768,\n\t\t\t\t\"description\":\"\",\n\t\t\t\t\"fork\":false,\n\t\t\t\t\"forks\":0,\n\t\t\t\t\"has_downloads\":true,\n\t\t\t\t\"has_issues\":true,\n\t\t\t\t\"has_wiki\":true,\n\t\t\t\t\"homepage\":\"\",\n\t\t\t\t\"id\":3860742,\n\t\t\t\t\"language\":\"Ruby\",\n\t\t\t\t\"master_branch\":\"master\",\n\t\t\t\t\"name\":\"testing\",\n\t\t\t\t\"open_issues\":2,\n\t\t\t\t\"owner\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"private\":false,\n\t\t\t\t\"pushed_at\":1363295520,\n\t\t\t\t\"size\":2156,\n\t\t\t\t\"stargazers\":1,\n\t\t\t\t\"url\":\"https://github.com/octokitty/testing\",\n\t\t\t\t\"watchers\":1\n\t\t\t}\n\t\t}`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`arg: 1481a2de7b2a7d02428ad93446ab166be7793fbb lolwut@noway.biz\nenv: HOOK_head_commit.timestamp=2013-03-12T08:14:29-07:00\n`,\n\t\t``,\n\t},\n\t{\n\t\t\"github-multi-sig-fail\",\n\t\t\"github-multi-sig-fail\",\n\t\tnil,\n\t\t\"POST\",\n\t\tmap[string]string{\"X-Hub-Signature\": \"f68df0375d7b03e3eb29b4cf9f9ec12e08f42ff8\"},\n\t\t\"application/json\",\n\t\t`{\n\t\t\t\"after\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\"before\":\"17c497ccc7cca9c2f735aa07e9e3813060ce9a6a\",\n\t\t\t\"commits\":[\n\t\t\t\t{\n\t\t\t\t\t\"added\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"author\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"committer\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"distinct\":true,\n\t\t\t\t\t\"id\":\"c441029cf673f84c8b7db52d0a5944ee5c52ff89\",\n\t\t\t\t\t\"message\":\"Test\",\n\t\t\t\t\t\"modified\":[\n\t\t\t\t\t\t\"README.md\"\n\t\t\t\t\t],\n\t\t\t\t\t\"removed\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"timestamp\":\"2013-02-22T13:50:07-08:00\",\n\t\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/c441029cf673f84c8b7db52d0a5944ee5c52ff89\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"added\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"author\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"committer\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"distinct\":true,\n\t\t\t\t\t\"id\":\"36c5f2243ed24de58284a96f2a643bed8c028658\",\n\t\t\t\t\t\"message\":\"This is me testing the windows client.\",\n\t\t\t\t\t\"modified\":[\n\t\t\t\t\t\t\"README.md\"\n\t\t\t\t\t],\n\t\t\t\t\t\"removed\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"timestamp\":\"2013-02-22T14:07:13-08:00\",\n\t\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/36c5f2243ed24de58284a96f2a643bed8c028658\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"added\":[\n\t\t\t\t\t\t\"words/madame-bovary.txt\"\n\t\t\t\t\t],\n\t\t\t\t\t\"author\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"committer\":{\n\t\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t\t},\n\t\t\t\t\t\"distinct\":true,\n\t\t\t\t\t\"id\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\t\t\"message\":\"Rename madame-bovary.txt to words/madame-bovary.txt\",\n\t\t\t\t\t\"modified\":[\n\n\t\t\t\t\t],\n\t\t\t\t\t\"removed\":[\n\t\t\t\t\t\t\"madame-bovary.txt\"\n\t\t\t\t\t],\n\t\t\t\t\t\"timestamp\":\"2013-03-12T08:14:29-07:00\",\n\t\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/1481a2de7b2a7d02428ad93446ab166be7793fbb\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"compare\":\"https://github.com/octokitty/testing/compare/17c497ccc7cc...1481a2de7b2a\",\n\t\t\t\"created\":false,\n\t\t\t\"deleted\":false,\n\t\t\t\"forced\":false,\n\t\t\t\"head_commit\":{\n\t\t\t\t\"added\":[\n\t\t\t\t\t\"words/madame-bovary.txt\"\n\t\t\t\t],\n\t\t\t\t\"author\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"committer\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"distinct\":true,\n\t\t\t\t\"id\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\t\"message\":\"Rename madame-bovary.txt to words/madame-bovary.txt\",\n\t\t\t\t\"modified\":[\n\n\t\t\t\t],\n\t\t\t\t\"removed\":[\n\t\t\t\t\t\"madame-bovary.txt\"\n\t\t\t\t],\n\t\t\t\t\"timestamp\":\"2013-03-12T08:14:29-07:00\",\n\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/1481a2de7b2a7d02428ad93446ab166be7793fbb\"\n\t\t\t},\n\t\t\t\"pusher\":{\n\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\"name\":\"Garen Torikian\"\n\t\t\t},\n\t\t\t\"ref\":\"refs/heads/master\",\n\t\t\t\"repository\":{\n\t\t\t\t\"created_at\":1332977768,\n\t\t\t\t\"description\":\"\",\n\t\t\t\t\"fork\":false,\n\t\t\t\t\"forks\":0,\n\t\t\t\t\"has_downloads\":true,\n\t\t\t\t\"has_issues\":true,\n\t\t\t\t\"has_wiki\":true,\n\t\t\t\t\"homepage\":\"\",\n\t\t\t\t\"id\":3860742,\n\t\t\t\t\"language\":\"Ruby\",\n\t\t\t\t\"master_branch\":\"master\",\n\t\t\t\t\"name\":\"testing\",\n\t\t\t\t\"open_issues\":2,\n\t\t\t\t\"owner\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"private\":false,\n\t\t\t\t\"pushed_at\":1363295520,\n\t\t\t\t\"size\":2156,\n\t\t\t\t\"stargazers\":1,\n\t\t\t\t\"url\":\"https://github.com/octokitty/testing\",\n\t\t\t\t\"watchers\":1\n\t\t\t}\n\t\t}`,\n\t\tfalse,\n\t\thttp.StatusInternalServerError,\n\t\t`Error occurred while evaluating hook rules.`,\n\t\t``,\n\t},\n\t{\n\t\t\"bitbucket\", // bitbucket sends their payload using uriencoded params.\n\t\t\"bitbucket\",\n\t\tnil,\n\t\t\"POST\",\n\t\tnil,\n\t\t\"application/x-www-form-urlencoded\",\n\t\t`payload={\"canon_url\": \"https://bitbucket.org\",\"commits\": [{\"author\": \"marcus\",\"branch\": \"master\",\"files\": [{\"file\": \"somefile.py\",\"type\": \"modified\"}],\"message\": \"Added some more things to somefile.py\\n\",\"node\": \"620ade18607a\",\"parents\": [\"702c70160afc\"],\"raw_author\": \"Marcus Bertrand <marcus@somedomain.com>\",\"raw_node\": \"620ade18607ac42d872b568bb92acaa9a28620e9\",\"revision\": null,\"size\": -1,\"timestamp\": \"2012-05-30 05:58:56\",\"utctimestamp\": \"2014-11-07 15:19:02+00:00\"}],\"repository\": {\"absolute_url\": \"/webhook/testing/\",\"fork\": false,\"is_private\": true,\"name\": \"Project X\",\"owner\": \"marcus\",\"scm\": \"git\",\"slug\": \"project-x\",\"website\": \"https://atlassian.com/\"},\"user\": \"marcus\"}`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`success`,\n\t\t``,\n\t},\n\t{\n\t\t\"gitlab\",\n\t\t\"gitlab\",\n\t\tnil,\n\t\t\"POST\",\n\t\tmap[string]string{\"X-Gitlab-Event\": \"Push Hook\"},\n\t\t\"application/json\",\n\t\t`{\n\t\t\t\"object_kind\": \"push\",\n\t\t\t\"before\": \"95790bf891e76fee5e1747ab589903a6a1f80f22\",\n\t\t\t\"after\": \"da1560886d4f094c3e6c9ef40349f7d38b5d27d7\",\n\t\t\t\"ref\": \"refs/heads/master\",\n\t\t\t\"user_id\": 4,\n\t\t\t\"user_name\": \"John Smith\",\n\t\t\t\"user_email\": \"john@example.com\",\n\t\t\t\"project_id\": 15,\n\t\t\t\"repository\": {\n\t\t\t\t\"name\": \"Diaspora\",\n\t\t\t\t\"url\": \"git@example.com:mike/diasporadiaspora.git\",\n\t\t\t\t\"description\": \"\",\n\t\t\t\t\"homepage\": \"http://example.com/mike/diaspora\",\n\t\t\t\t\"git_http_url\":\"http://example.com/mike/diaspora.git\",\n\t\t\t\t\"git_ssh_url\":\"git@example.com:mike/diaspora.git\",\n\t\t\t\t\"visibility_level\":0\n\t\t\t},\n\t\t\t\"commits\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327\",\n\t\t\t\t\t\"message\": \"Update Catalan translation to e38cb41.\",\n\t\t\t\t\t\"timestamp\": \"2011-12-12T14:27:31+02:00\",\n\t\t\t\t\t\"url\": \"http://example.com/mike/diaspora/commit/b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327\",\n\t\t\t\t\t\"author\": {\n\t\t\t\t\t\t\"name\": \"Jordi Mallach\",\n\t\t\t\t\t\t\"email\": \"jordi@softcatala.org\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"da1560886d4f094c3e6c9ef40349f7d38b5d27d7\",\n\t\t\t\t\t\"message\": \"fixed readme\",\n\t\t\t\t\t\"timestamp\": \"2012-01-03T23:36:29+02:00\",\n\t\t\t\t\t\"url\": \"http://example.com/mike/diaspora/commit/da1560886d4f094c3e6c9ef40349f7d38b5d27d7\",\n\t\t\t\t\t\"author\": {\n\t\t\t\t\t\t\"name\": \"GitLab dev user\",\n\t\t\t\t\t\t\"email\": \"gitlabdev@dv6700.(none)\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"total_commits_count\": 4\n\t\t}`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`arg: b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327 John Smith john@example.com\n`,\n\t\t``,\n\t},\n\t{\n\t\t\"xml\",\n\t\t\"xml\",\n\t\tnil,\n\t\t\"POST\",\n\t\tmap[string]string{\"Content-Type\": \"application/xml\"},\n\t\t\"application/xml\",\n\t\t`<app>\n   <users>\n     <user id=\"1\" name=\"Jeff\" />\n     <user id=\"2\" name=\"Sally\" />\n   </users>\n   <messages>\n     <message id=\"1\" from_user=\"1\" to_user=\"2\">Hello!!</message>\n   </messages>\n</app>`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`success`,\n\t\t``,\n\t},\n\t{\n\t\t\"txt-raw\",\n\t\t\"txt-raw\",\n\t\tnil,\n\t\t\"POST\",\n\t\tmap[string]string{\"Content-Type\": \"text/plain\"},\n\t\t\"text/plain\",\n\t\t`# FOO\n\nblah\nblah`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`# FOO\n\nblah\nblah`,\n\t\t``,\n\t},\n\t{\n\t\t\"payload-json-array\",\n\t\t\"sendgrid\",\n\t\tnil,\n\t\t\"POST\",\n\t\tnil,\n\t\t\"application/json\",\n\t\t`[\n  {\n    \"email\": \"example@test.com\",\n    \"timestamp\": 1513299569,\n    \"smtp-id\": \"<14c5d75ce93.dfd.64b469@ismtpd-555>\",\n    \"event\": \"processed\",\n    \"category\": \"cat facts\",\n    \"sg_event_id\": \"sg_event_id\",\n    \"sg_message_id\": \"sg_message_id\"\n  }\n]`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`success`,\n\t\t``,\n\t},\n\t{\n\t\t\"slash-in-hook-id\",\n\t\t\"sendgrid/dir\",\n\t\tnil,\n\t\t\"POST\",\n\t\tnil,\n\t\t\"application/json\",\n\t\t`[\n  {\n    \"email\": \"example@test.com\",\n    \"timestamp\": 1513299569,\n    \"smtp-id\": \"<14c5d75ce93.dfd.64b469@ismtpd-555>\",\n    \"event\": \"it worked!\",\n    \"category\": \"cat facts\",\n    \"sg_event_id\": \"sg_event_id\",\n    \"sg_message_id\": \"sg_message_id\"\n  }\n]`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`success`,\n\t\t``,\n\t},\n\t{\n\t\t\"multipart\",\n\t\t\"plex\",\n\t\tnil,\n\t\t\"POST\",\n\t\tnil,\n\t\t\"multipart/form-data; boundary=xxx\",\n\t\t`--xxx\nContent-Disposition: form-data; name=\"payload\"\n\n{\n   \"event\": \"media.play\",\n   \"user\": true,\n   \"owner\": true,\n   \"Account\": {\n      \"id\": 1,\n      \"thumb\": \"https://plex.tv/users/1022b120ffbaa/avatar?c=1465525047\",\n      \"title\": \"elan\"\n   }\n}\n\n--xxx\nContent-Disposition: form-data; name=\"thumb\"; filename=\"thumb.jpg\"\nContent-Type: application/octet-stream\nContent-Transfer-Encoding: binary\n\nbinary data\n--xxx--`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`success`,\n\t\t``,\n\t},\n\n\t{\n\t\t\"issue-471\",\n\t\t\"issue-471\",\n\t\tnil,\n\t\t\"POST\",\n\t\tnil,\n\t\t\"application/json\",\n\t\t`{\"exists\": 1}`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`success`,\n\t\t``,\n\t},\n\n\t{\n\t\t\"issue-471-and\",\n\t\t\"issue-471-and\",\n\t\tnil,\n\t\t\"POST\",\n\t\tnil,\n\t\t\"application/json\",\n\t\t`{\"exists\": 1}`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`Hook rules were not satisfied.`,\n\t\t`parameter node not found`,\n\t},\n\n\t{\n\t\t\"missing-cmd-arg\", // missing head_commit.author.email\n\t\t\"github\",\n\t\tnil,\n\t\t\"POST\",\n\t\tmap[string]string{\"X-Hub-Signature\": \"ab03955b9377f530aa298b1b6d273ae9a47e1e40\"},\n\t\t\"application/json\",\n\t\t`{\n\t\t\t\"head_commit\":{\n\t\t\t\t\"added\":[\n\t\t\t\t\t\"words/madame-bovary.txt\"\n\t\t\t\t],\n\t\t\t\t\"author\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"committer\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"distinct\":true,\n\t\t\t\t\"id\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\t\"message\":\"Rename madame-bovary.txt to words/madame-bovary.txt\",\n\t\t\t\t\"modified\":[\n\n\t\t\t\t],\n\t\t\t\t\"removed\":[\n\t\t\t\t\t\"madame-bovary.txt\"\n\t\t\t\t],\n\t\t\t\t\"timestamp\":\"2013-03-12T08:14:29-07:00\",\n\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/1481a2de7b2a7d02428ad93446ab166be7793fbb\"\n\t\t\t},\n\t\t\t\"ref\":\"refs/heads/master\"\n\t\t}`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`arg: 1481a2de7b2a7d02428ad93446ab166be7793fbb lolwut@noway.biz\nenv: HOOK_head_commit.timestamp=2013-03-12T08:14:29-07:00\n`,\n\t\t``,\n\t},\n\n\t{\n\t\t\"missing-env-arg\", // missing head_commit.timestamp\n\t\t\"github\",\n\t\tnil,\n\t\t\"POST\",\n\t\tmap[string]string{\"X-Hub-Signature\": \"2cf8b878cb6b74a25090a140fa4a474be04b97fa\"},\n\t\t\"application/json\",\n\t\t`{\n\t\t\t\"head_commit\":{\n\t\t\t\t\"added\":[\n\t\t\t\t\t\"words/madame-bovary.txt\"\n\t\t\t\t],\n\t\t\t\t\"author\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"committer\":{\n\t\t\t\t\t\"email\":\"lolwut@noway.biz\",\n\t\t\t\t\t\"name\":\"Garen Torikian\",\n\t\t\t\t\t\"username\":\"octokitty\"\n\t\t\t\t},\n\t\t\t\t\"distinct\":true,\n\t\t\t\t\"id\":\"1481a2de7b2a7d02428ad93446ab166be7793fbb\",\n\t\t\t\t\"message\":\"Rename madame-bovary.txt to words/madame-bovary.txt\",\n\t\t\t\t\"modified\":[\n\n\t\t\t\t],\n\t\t\t\t\"removed\":[\n\t\t\t\t\t\"madame-bovary.txt\"\n\t\t\t\t],\n\t\t\t\t\"url\":\"https://github.com/octokitty/testing/commit/1481a2de7b2a7d02428ad93446ab166be7793fbb\"\n\t\t\t},\n\t\t\t\"ref\":\"refs/heads/master\"\n\t\t}`,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t`arg: 1481a2de7b2a7d02428ad93446ab166be7793fbb lolwut@noway.biz\n`,\n\t\t``,\n\t},\n\n\t{\n\t\t\"empty-payload-signature\", // allow empty payload signature validation\n\t\t\"empty-payload-signature\",\n\t\tnil,\n\t\t\"POST\",\n\t\tmap[string]string{\"X-Hub-Signature\": \"33f9d709782f62b8b4a0178586c65ab098a39fe2\"},\n\t\t\"application/json\",\n\t\t``,\n\t\tfalse,\n\t\thttp.StatusOK,\n\t\t``,\n\t\t``,\n\t},\n\n\t{\n\t\t\"request-source\",\n\t\t\"request-source\",\n\t\tnil,\n\t\t\"POST\",\n\t\tmap[string]string{\"X-Hub-Signature\": \"33f9d709782f62b8b4a0178586c65ab098a39fe2\"},\n\t\t\"application/json\",\n\t\t`{}`,\n\t\ttrue,\n\t\thttp.StatusOK,\n\t\t`arg: POST 127.0.0.1:.*\n`,\n\t\t``,\n\t},\n\n\t// test with disallowed global HTTP method\n\t{\"global disallowed method\", \"bitbucket\", []string{\"Post \"}, \"GET\", nil, `{}`, \"application/json\", false, http.StatusMethodNotAllowed, ``, ``},\n\t// test with disallowed HTTP method\n\t{\"disallowed method\", \"github\", nil, \"Get\", nil, `{}`, \"application/json\", false, http.StatusMethodNotAllowed, ``, ``},\n\t// test with custom return code\n\t{\"empty payload\", \"github\", nil, \"POST\", nil, \"application/json\", `{}`, false, http.StatusBadRequest, `Hook rules were not satisfied.`, ``},\n\t// test with custom invalid http code, should default to 200 OK\n\t{\"empty payload\", \"bitbucket\", nil, \"POST\", nil, \"application/json\", `{}`, false, http.StatusOK, `Hook rules were not satisfied.`, ``},\n\t// test with no configured http return code, should default to 200 OK\n\t{\"empty payload\", \"gitlab\", nil, \"POST\", nil, \"application/json\", `{}`, false, http.StatusOK, `Hook rules were not satisfied.`, ``},\n\n\t// test capturing command output\n\t{\"don't capture output on success by default\", \"capture-command-output-on-success-not-by-default\", nil, \"POST\", nil, \"application/json\", `{}`, false, http.StatusOK, ``, ``},\n\t{\"capture output on success with flag set\", \"capture-command-output-on-success-yes-with-flag\", nil, \"POST\", nil, \"application/json\", `{}`, false, http.StatusOK, `arg: exit=0\n`, ``},\n\t{\"don't capture output on error by default\", \"capture-command-output-on-error-not-by-default\", nil, \"POST\", nil, \"application/json\", `{}`, false, http.StatusInternalServerError, `Error occurred while executing the hook's command. Please check your logs for more details.`, ``},\n\t{\"capture output on error with extra flag set\", \"capture-command-output-on-error-yes-with-extra-flag\", nil, \"POST\", nil, \"application/json\", `{}`, false, http.StatusInternalServerError, `arg: exit=1\n`, ``},\n\n\t// Check logs\n\t{\"static params should pass\", \"static-params-ok\", nil, \"POST\", nil, \"application/json\", `{}`, false, http.StatusOK, \"arg: passed\\n\", `(?s)command output: arg: passed`},\n\t{\"command with space logs warning\", \"warn-on-space\", nil, \"POST\", nil, \"application/json\", `{}`, false, http.StatusInternalServerError, \"Error occurred while executing the hook's command. Please check your logs for more details.\", `(?s)error in exec:.*use 'pass[-]arguments[-]to[-]command' to specify args`},\n\t{\"unsupported content type error\", \"github\", nil, \"POST\", map[string]string{\"Content-Type\": \"nonexistent/format\"}, \"application/json\", `{}`, false, http.StatusBadRequest, `Hook rules were not satisfied.`, `(?s)error parsing body payload due to unsupported content type header:`},\n}\n\n// buffer provides a concurrency-safe bytes.Buffer to tests above.\ntype buffer struct {\n\tb bytes.Buffer\n\tm sync.Mutex\n}\n\nfunc (b *buffer) Read(p []byte) (n int, err error) {\n\tb.m.Lock()\n\tdefer b.m.Unlock()\n\treturn b.b.Read(p)\n}\n\nfunc (b *buffer) Write(p []byte) (n int, err error) {\n\tb.m.Lock()\n\tdefer b.m.Unlock()\n\treturn b.b.Write(p)\n}\n\nfunc (b *buffer) String() string {\n\tb.m.Lock()\n\tdefer b.m.Unlock()\n\treturn b.b.String()\n}\n\nfunc (b *buffer) Reset() {\n\tb.m.Lock()\n\tdefer b.m.Unlock()\n\tb.b.Reset()\n}\n"
        }
      ]
    }
  ]
}