{
  "metadata": {
    "timestamp": 1736567386368,
    "page": 993,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cockroachdb/errors",
      "stars": 2142,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1875,
          "content": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile.update-protos",
          "type": "blob",
          "size": 2.0419921875,
          "content": "# This makefile can be used to-regenerate the protobuf files.\n#\n# Prerequisites:\n#   \"protoc\" from https://github.com/protocolbuffers/protobuf\n#   go get github.com/cockroachdb/protoc-gen-gogoroach\n#   go get github.com/gogo/protobuf/types\n#   go get github.com/gogo/protobuf/protoc-gen-gogo\n#\n# Note: as of 2021-04-13, we like to use a custom protoc-gen-gogo\n# with additional options, to stabilize the marshalled\n# encoding of objects (so that they are deterministic\n# across marshal/unmarshal cycles) and reduce the memory footprint\n# of objects:\n#\n#\tvanity.TurnOnStable_MarshalerAll,\n#\tvanity.TurnOffGoUnrecognizedAll,\n#\tvanity.TurnOffGoUnkeyedAll,\n#\tvanity.TurnOffGoSizecacheAll,\n#\n# Until this is resolved, the \"go get\" commands above are not\n# adequate; instead:\n#\n# 1. set the PATH env var to point to CockroachDB's `bin`\n#    sub-directory (after a successful CockroachDB build), where a\n#    suitable version of protoc-gen-gogoroach is provided.\n#\n# 2. run `make -f Makefile.update-protos` with this PATH active.\n\nexport SHELL := env PWD=$(CURDIR) bash\n\nPROTOS := $(wildcard \\\n\terrbase/internal/*.proto \\\n\terrorspb/*.proto \\\n\textgrpc/*.proto \\\n\texthttp/*.proto \\\n\tgrpc/*.proto \\\n\tmarkers/internal/*.proto \\\n)\nGO_SOURCES = $(PROTOS:.proto=.pb.go)\n\nSED = sed\nSED_INPLACE := $(shell $(SED) --version 2>&1 | grep -q GNU && echo -i || echo \"-i ''\")\n\nall: $(PROTOS)\n\tset -e; for dir in $(sort $(dir $(PROTOS))); do \\\n\t\tprotoc \\\n\t\t\t-I. \\\n\t\t\t-I$$GOPATH/src/ \\\n\t\t\t-I$$GOPATH/src/github.com \\\n\t\t\t-I$$GOPATH/src/github.com/cockroachdb/errors \\\n\t\t\t-I$$GOPATH/src/github.com/gogo/protobuf \\\n\t\t\t-I$$GOPATH/src/github.com/gogo/protobuf/protobuf \\\n\t\t\t--gogoroach_out=Mgoogle/protobuf/any.proto=github.com/gogo/protobuf/types,plugins=grpc,import_prefix=:. \\\n\t\t\t$$dir/*.proto; \\\n\tdone\n\t$(SED) $(SED_INPLACE) -E \\\n\t\t-e '/import _ /d' \\\n\t\t-e 's!import (fmt|math) \"github.com/(fmt|math)\"! !g' \\\n\t\t-e 's!github.com/((bytes|encoding/binary|errors|fmt|io|math|github\\.com|(google\\.)?golang\\.org)([^a-z]|$$))!\\1!g' \\\n\t\t-e 's!golang.org/x/net/context!context!g' \\\n\t\t$(GO_SOURCES)\n\tgofmt -s -w $(GO_SOURCES)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 36.74609375,
          "content": "# cockroachdb/errors: Go errors with network portability\n\nThis library aims to be used as a drop-in replacement to\n`github.com/pkg/errors` and Go's standard `errors` package.  It also\nprovides *network portability* of error objects, in ways suitable for\ndistributed systems with mixed-version software compatibility.\n\nIt also provides native and comprehensive support for [PII](https://en.wikipedia.org/wiki/Personal_data)-free details\nand an opt-in [Sentry.io](https://sentry.io/) reporting mechanism that\nautomatically formats error details and strips them of PII.\n\nSee also [the design RFC](https://github.com/cockroachdb/cockroach/blob/master/docs/RFCS/20190318_error_handling.md).\n\n![Build Status](https://github.com/cockroachdb/errors/actions/workflows/ci.yaml/badge.svg?branch=master)\n[![Go Reference](https://pkg.go.dev/badge/github.com/cockroachdb/errors.svg)](https://pkg.go.dev/github.com/cockroachdb/errors)\n\nTable of contents:\n\n- [Features](#Features)\n- [How to use](#How-to-use)\n- [What comes out of an error?](#What-comes-out-of-an-error)\n- [Available error leaves](#Available-error-leaves)\n- [Available wrapper constructors](#Available-wrapper-constructors)\n- [Providing PII-free details](#Providing-PII-free-details)\n- [Building your own error types](#Building-your-own-error-types)\n- [Error composition (summary)](#Error-composition-summary)\n- [API (not constructing error objects)](#API-not-constructing-error-objects)\n\n## Features\n\n| Feature                                                                                               | Go's <1.13 `errors` | `github.com/pkg/errors` | Go 1.13 `errors`/`xerrors` | `cockroachdb/errors` |\n|-------------------------------------------------------------------------------------------------------|---------------------|-------------------------|----------------------------|----------------------|\n| error constructors (`New`, `Errorf` etc)                                                              | ✔                   | ✔                       | ✔                          | ✔                    |\n| error causes (`Cause` / `Unwrap`)                                                                     |                     | ✔                       | ✔                          | ✔                    |\n| cause barriers (`Opaque` / `Handled`)                                                                 |                     |                         | ✔                          | ✔                    |\n| `errors.As()`, `errors.Is()`                                                                          |                     |                         | ✔                          | ✔                    |\n| automatic error wrap when format ends with `: %w`                                                     |                     |                         | ✔                          | ✔                    |\n| standard wrappers with efficient stack trace capture                                                  |                     | ✔                       |                            | ✔                    |\n| **transparent protobuf encode/decode with forward compatibility**                                     |                     |                         |                            | ✔                    |\n| **`errors.Is()` recognizes errors across the network**                                                |                     |                         |                            | ✔                    |\n| **comprehensive support for PII-free reportable strings**                                             |                     |                         |                            | ✔                    |\n| support for both `Cause()` and `Unwrap()` [go#31778](https://github.com/golang/go/issues/31778)       |                     |                         |                            | ✔                    |\n| standard error reports to Sentry.io                                                                   |                     |                         |                            | ✔                    |\n| wrappers to denote assertion failures                                                                 |                     |                         |                            | ✔                    |\n| wrappers with issue tracker references                                                                |                     |                         |                            | ✔                    |\n| wrappers for user-facing hints and details                                                            |                     |                         |                            | ✔                    |\n| wrappers to attach secondary causes                                                                   |                     |                         |                            | ✔                    |\n| wrappers to attach [`logtags`](https://github.com/cockroachdb/logtags) details from `context.Context` |                     |                         |                            | ✔                    |\n| `errors.FormatError()`, `Formatter`, `Printer`                                                        |                     |                         | (under construction)       | ✔                    |\n| `errors.SafeFormatError()`, `SafeFormatter`                                                           |                     |                         |                            | ✔                    |\n| wrapper-aware `IsPermission()`, `IsTimeout()`, `IsExist()`, `IsNotExist()`                            |                     |                         |                            | ✔                    |\n\n\"Forward compatibility\" above refers to the ability of this library to\nrecognize and properly handle network communication of error types it\ndoes not know about, for example when a more recent version of a\nsoftware package sends a new error object to another system running an\nolder version of the package.\n\n## How to use\n\n- construct errors with `errors.New()`, etc as usual, but also see the other [error leaf constructors](#Available-error-leaves) below.\n- wrap errors with `errors.Wrap()` as usual, but also see the [other wrappers](#Available-wrapper-constructors) below.\n- test error identity with `errors.Is()` as usual.\n  **Unique in this library**: this works even if the error has traversed the network!\n  Also, `errors.IsAny()` to recognize two or more reference errors.\n- replace uses of `os.IsPermission()`, `os.IsTimeout()`, `os.IsExist()` and `os.IsNotExist()` by their analog in sub-package `oserror` so\n  that they can peek through layers of wrapping.\n- access error causes with `errors.UnwrapOnce()` / `errors.UnwrapAll()` (note: `errors.Cause()` and `errors.Unwrap()` also provided for compatibility with other error packages).\n- encode/decode errors to protobuf with `errors.EncodeError()` / `errors.DecodeError()`.\n- extract **PII-free safe details** with `errors.GetSafeDetails()`.\n- extract human-facing hints and details with `errors.GetAllHints()`/`errors.GetAllDetails()` or `errors.FlattenHints()`/`errors.FlattenDetails()`.\n- produce detailed Sentry.io reports with `errors.BuildSentryReport()` / `errors.ReportError()`.\n- implement your own error leaf types and wrapper types:\n  - implement the `error` and `errors.Wrapper` interfaces as usual.\n  - register encode/decode functions: call `errors.Register{Leaf,Wrapper}{Encoder,Decoder}()` in a `init()` function in your package.\n  - implement `Format()` that redirects to `errors.FormatError()`.\n  - see the section [Building your own error types](#Building-your-own-error-types) below.\n\n## What comes out of an error?\n\n| Error detail                                                    | `Error()` and format `%s`/`%q`/`%v` | format `%+v` | `GetSafeDetails()`            | Sentry report via `ReportError()` |\n|-----------------------------------------------------------------|-------------------------------------|--------------|-------------------------------|-----------------------------------|\n| main message, eg `New()`                                        | visible                             | visible      | yes (CHANGED IN v1.6)         | full (CHANGED IN v1.6)            |\n| wrap prefix, eg `WithMessage()`                                 | visible (as prefix)                 | visible      | yes (CHANGED IN v1.6)         | full (CHANGED IN v1.6)            |\n| stack trace, eg `WithStack()`                                   | not visible                         | simplified   | yes                           | full                              |\n| hint , eg `WithHint()`                                          | not visible                         | visible      | no                            | type only                         |\n| detail, eg `WithDetail()`                                       | not visible                         | visible      | no                            | type only                         |\n| assertion failure annotation, eg `WithAssertionFailure()`       | not visible                         | visible      | no                            | type only                         |\n| issue links, eg `WithIssueLink()`, `UnimplementedError()`       | not visible                         | visible      | yes                           | full                              |\n| safe details, eg `WithSafeDetails()`                            | not visible                         | not visible  | yes                           | full                              |\n| telemetry keys, eg. `WithTelemetryKey()`                        | not visible                         | visible      | yes                           | full                              |\n| secondary errors, eg. `WithSecondaryError()`, `CombineErrors()` | not visible                         | visible      | redacted, recursively         | redacted, recursively             |\n| barrier origins, eg. `Handled()`                                | not visible                         | visible      | redacted, recursively         | redacted, recursively             |\n| error domain, eg. `WithDomain()`                                | not visible                         | visible      | yes                           | full                              |\n| context tags, eg. `WithContextTags()`                           | not visible                         | visible      | keys visible, values redacted | keys visible, values redacted     |\n\n## Available error leaves\n\nAn error *leaf* is an object that implements the `error` interface,\nbut does not refer to another error via a `Unwrap()` or `Cause()`\nmethod.\n\n- `New(string) error`, `Newf(string, ...interface{}) error`, `Errorf(string, ...interface{}) error`: leaf errors with message\n  - **when to use: common error cases.**\n  - what it does: also captures the stack trace at point of call and redacts the provided message for safe reporting.\n  - how to access the detail: `Error()`, regular Go formatting. **Details in Sentry report.**\n  - see also: Section [Error composition](#Error-composition-summary) below. `errors.NewWithDepth()` variants to customize at which call depth the stack trace is captured.\n\n- `AssertionFailedf(string, ...interface{}) error`, `NewAssertionFailureWithWrappedErrf(error, string, ...interface{}) error`: signals an assertion failure / programming error.\n  - **when to use: when an invariant is violated; when an unreachable code path is reached.**\n  - what it does: also captures the stack trace at point of call, redacts the provided strings for safe reporting, prepares a hint to inform a human user.\n  - how to access the detail: `IsAssertionFailure()`/`HasAssertionFailure()`, format with `%+v`, Safe details included in Sentry reports.\n  - see also: Section [Error composition](#Error-composition-summary) below. `errors.AssertionFailedWithDepthf()` variant to customize at which call depth the stack trace is captured.\n\n- `Handled(error) error`, `Opaque(error) error`, `HandledWithMessage(error, string) error`: captures an error cause but make it invisible to `Unwrap()` / `Is()`.\n  - **when to use: when a new error occurs while handling an error, and the original error must be \"hidden\".**\n  - what it does: captures the cause in a hidden field. The error message is preserved unless the `...WithMessage()` variant is used.\n  - how to access the detail: format with `%+v`, redacted details reported in Sentry reports.\n\n- `UnimplementedError(IssueLink, string) error`: captures a message string and a URL reference to an external resource to denote a feature that was not yet implemented.\n  - **when to use: to inform (human) users that some feature is not implemented yet and refer them to some external resource.**\n  - what it does: captures the message, URL and detail in a wrapper. The URL and detail are considered safe for reporting.\n  - how to access the detail: `errors.GetAllHints()`, `errors.FlattenHints()`, format with `%+v`, URL and detail included in Sentry report (not the message).\n  - see also: `errors.WithIssueLink()` below for errors that are not specifically about unimplemented features.\n\n## Available wrapper constructors\n\nAn error *wrapper* is an object that implements the `error` interface,\nand also refers to another error via an `Unwrap()` (preferred) and/or\n`Cause()` method.\n\nAll wrapper constructors can be applied safely to a `nil` `error`:\nthey behave as no-ops in this case:\n\n```go\n// The following:\n// if err := foo(); err != nil {\n//    return errors.Wrap(err, \"foo\")\n// }\n// return nil\n//\n// is not needed. Instead, you can use this:\nreturn errors.Wrap(foo(), \"foo\")\n```\n\n- `Wrap(error, string) error`, `Wrapf(error, string, ...interface{}) error`:\n  - **when to use: on error return paths.**\n  - what it does: combines `WithMessage()`, `WithStack()`, `WithSafeDetails()`.\n  - how to access the details: `Error()`, regular Go formatting. **Details in Sentry report.**\n  - see also: Section [Error composition](#Error-composition-summary) below. `WrapWithDepth()` variants to customize at which depth the stack trace is captured.\n\n- `WithSecondaryError(error, error) error`: annotate an error with a secondary error.\n  - **when to use: when an additional error occurs in the code that is handling a primary error.** Consider using `errors.CombineErrors()` instead (see below).\n  - what it does: it captures the secondary error but hides it from `errors.Is()`.\n  - how to access the detail: format with `%+v`, redacted recursively in Sentry reports.\n  - see also: `errors.CombineErrors()`\n\n- `CombineErrors(error, error) error`: combines two errors into one.\n  - **when to use: when two operations occur concurrently and either can return an error, and only one final error must be returned.**\n  - what it does: returns either of its arguments if the other is `nil`, otherwise calls `WithSecondaryError()`.\n  - how to access the detail: see `WithSecondaryError()` above.\n\n- `Mark(error, error) error`: gives the identity of one error to another error.\n  - **when to use: when a caller expects to recognize a sentinel error with `errors.Is()` but the callee provides a diversity of error messages.**\n  - what it does: it overrides the \"error mark\" used internally by `errors.Is()`.\n  - how to access the detail: format with `%+v`, Sentry reports.\n\n- `WithStack(error) error`: annotate with stack trace\n  - **when to use:** usually not needed, use `errors.Wrap()`/`errors.Wrapf()` instead.\n\n    **Special cases:**\n\n    - when returning a sentinel, for example:\n\n      ```go\n      var myErr = errors.New(\"foo\")\n\n      func myFunc() error {\n        if ... {\n           return errors.WithStack(myErr)\n        }\n      }\n      ```\n\n    - on error return paths, when not trivial but also not warranting a wrap. For example:\n\n      ```go\n      err := foo()\n      if err != nil {\n        doSomething()\n        if !somecond {\n           return errors.WithStack(err)\n        }\n      }\n        ```\n\n  - what it does: captures (efficiently) a stack trace.\n  - how to access the details: format with `%+v`, `errors.GetSafeDetails()`, Sentry reports. The stack trace is considered safe for reporting.\n  - see also: `WithStackDepth()` to customize the call depth at which the stack trace is captured.\n\n- `WithSafeDetails(error, string, ...interface{}) error`: safe details for reporting.\n  - when to use: probably never. Use `errors.Wrap()`/`errors.Wrapf()` instead.\n  - what it does: saves some strings for safe reporting.\n  - how to access the detail: format with `%+v`, `errors.GetSafeDetails()`, Sentry report.\n\n- `WithMessage(error, string) error`, `WithMessagef(error, string, ...interface{}) error`: message prefix.\n  - when to use: probably never. Use `errors.Wrap()`/`errors.Wrapf()` instead.\n  - what it does: adds a message prefix.\n  - how to access the detail: `Error()`, regular Go formatting, Sentry Report.\n\n- `WithDetail(error, string) error`, `WithDetailf(error, string, ...interface{}) error`, user-facing detail with contextual information.\n  - **when to use: need to embark a message string to output when the error is presented to a developer.**\n  - what it does: captures detail strings.\n  - how to access the detail: `errors.GetAllDetails()`, `errors.FlattenDetails()` (all details are preserved), format with `%+v`. Not included in Sentry reports.\n\n- `WithHint(error, string) error`, `WithHintf(error, string, ...interface{}) error`: user-facing detail with suggestion for action to take.\n  - **when to use: need to embark a message string to output when the error is presented to an end user.**\n  - what it does: captures hint strings.\n  - how to access the detail: `errors.GetAllHints()`, `errors.FlattenHints()` (hints are de-duplicated), format with `%+v`. Not included in Sentry reports.\n\n- `WithIssueLink(error, IssueLink) error`: annotate an error with an URL and arbitrary string.\n  - **when to use: to refer (human) users to some external resources.**\n  - what it does: captures the URL and detail in a wrapper. Both are considered safe for reporting.\n  - how to access the detail: `errors.GetAllHints()`, `errors.FlattenHints()`,  `errors.GetSafeDetails()`, format with `%+v`, Sentry report.\n  - see also: `errors.UnimplementedError()` to construct leaves (see previous section).\n\n- `WithTelemetry(error, string) error`: annotate an error with a key suitable for telemetry.\n  - **when to use: to gather strings during error handling, for capture in the telemetry sub-system of a server package.**\n  - what it does: captures the string. The telemetry key is considered safe for reporting.\n  - how to access the detail: `errors.GetTelemetryKeys()`,  `errors.GetSafeDetails()`, format with `%+v`, Sentry report.\n\n- `WithDomain(error, Domain) error`, `HandledInDomain(error, Domain) error`, `HandledInDomainWithMessage(error, Domain, string) error` **(experimental)**: annotate an error with an origin package.\n  - **when to use: at package boundaries.**\n  - what it does: captures the identity of the error domain. Can be asserted with `errors.EnsureNotInDomain()`, `errors.NotInDomain()`.\n  - how to access the detail: format with `%+v`, Sentry report.\n\n- `WithAssertionFailure(error) error`: annotate an error as being an assertion failure.\n  - when to use: probably never. Use `errors.AssertionFailedf()` and variants.\n  - what it does: wraps the error with a special type. Triggers an auto-generated hint.\n  - how to access the detail: `IsAssertionFailure()`/`HasAssertionFailure()`, `errors.GetAllHints()`, `errors.FlattenHints()`, format with `%+v`, Sentry report.\n\n- `WithContextTags(error, context.Context) error`: annotate an error with the k/v pairs attached to a `context.Context` instance with the [`logtags`](https://github.com/cockroachdb/logtags) package.\n  - **when to use: when capturing/producing an error and a `context.Context` is available.**\n  - what it does: it captures the `logtags.Buffer` object in the wrapper.\n  - how to access the detail: `errors.GetContextTags()`, format with `%+v`, Sentry reports.\n\n## Providing PII-free details\n\nThe library support PII-free strings essentially as follows:\n\n- by default, many strings included in an error object are considered\n  to be PII-unsafe, and are stripped out when building a Sentry\n  report.\n- some fields in the library are assumed to be PII-safe by default.\n- you can opt additional strings in to Sentry reports.\n\nThe following strings from this library are considered to be PII-free,\nand thus included in Sentry reports automatically:\n\n- the *type* of error objects,\n- stack traces (containing only file paths, line numbers, function names - arguments are not included),\n- issue tracker links (including URL and detail field),\n- telemetry keys,\n- error domains,\n- context tag keys,\n- the `format string` argument of `Newf`, `AssertionFailedf`, etc (the constructors ending with `...f()`),\n- the *type* of the additional arguments passed to the `...f()` constructors,\n- the *value of specific argument types* passed to the `...f()` constructors, when known to be PII-safe.\n  For details of which arguments are considered PII-free, see the [`redact` package](https://github.com/cockroachdb/redact).\n\nIt is possible to opt additional in to Sentry reporting, using either of the following methods:\n\n- implement the `errors.SafeDetailer` interface, providing the\n  `SafeDetails() []string` method on your error type.\n\n- enclose additional arguments passed to the `...f()` constructors with `errors.Safe()`. For example:\n  `err := errors.Newf(\"my code: %d\", errors.Safe(123))`\n  — in this example, the value 123 will be included when a Sentry report is constructed.\n  - it also makes it available via `errors.GetSafeDetails()`/`GetAllSafeDetails()`.\n  - the value 123 is also part of the main error message returned by `Error()`.\n\n- attach additional arbitrary strings with `errors.WithSafeDetails(error, string, ...interface{}) error` and\n  also use `errors.Safe()`.\n  For example: `err = errors.WithSafeDetails(err, \"additional data: %s\", errors.Safe(\"hello\"))`.\n  - in this example, the string \"hello\" will be included in Sentry reports.\n  - however, it is not part of the main error message returned by `Error()`.\n\nFor more details on how Sentry reports are built, see the [`report`](report) sub-package.\n\n## Building your own error types\n\nYou can create an error type as usual in Go: implement the `error`\ninterface, and, if your type is also a wrapper, the `errors.Wrapper`\ninterface (an `Unwrap()` method). You may also want to implement the\n`Cause()` method for backward compatibility with\n`github.com/pkg/errors`, if your project also uses that.\n\nIf your error type is a wrapper, you should implement a `Format()`\nmethod that redirects to `errors.FormatError()`, otherwise `%+v` will\nnot work. Additionally, if your type has a payload not otherwise\nvisible via `Error()`, you may want to implement\n`errors.SafeFormatter`. See [making `%+v` work with your\ntype](#Making-v-work-with-your-type) below for details.\n\nFinally, you may want your new error type to be portable across\nthe network.\n\nIf your error type is a leaf, and already implements `proto.Message`\n(from [gogoproto](https://github.com/gogo/protobuf)), you are all set\nand the errors library will use that automatically. If you do not or\ncannot implement `proto.Message`, or your error type is a wrapper,\nread on.\n\nAt a minimum, you will need a *decoder function*: while\n`cockroachdb/errors` already does a bunch of encoding/decoding work on\nnew types automatically, the one thing it really cannot do on its own\nis instantiate a Go object using your new type.\n\nHere is the simplest decode function for a new leaf error type and a\nnew wrapper type:\n\n```go\n// note: we use the gogoproto `proto` sub-package.\nfunc yourDecode(_ string, _ []string, _ proto.Message) error {\n   return &yourType{}\n}\n\nfunc init() {\n   errors.RegisterLeafEncoder((*yourType)(nil), yourDecodeFunc)\n}\n\nfunc yourDecodeWrapper(cause error, _ string, _ []string, _ proto.Message) error {\n   // Note: the library already takes care of encoding/decoding the cause.\n   return &yourWrapperType{cause: cause}\n}\n\nfunc init() {\n   errors.RegisterWrapperDecoder((*yourWrapperType)(nil), yourDecodeWrapper)\n}\n```\n\nIn the case where your type does not have any other field (empty\nstruct for leafs, just a cause for wrappers), this is all you have to\ndo.\n\n(See the type `withAssertionFailure` in\n[`assert/assert.go`](assert/assert.go) for an example of this simple\ncase.)\n\nIf your type does have additional fields, you *may* still not need a\ncustom encoder.  This is because the library automatically\nencodes/decodes the main error message and any safe strings that your\nerror types makes available via the `errors.SafeDetailer` interface\n(the `SafeDetails()` method).\n\nSay, for example, you have the following leaf type:\n\n```go\ntype myLeaf struct {\n   code int\n}\n\nfunc (m *myLeaf) Error() string { return fmt.Sprintf(\"my error: %d\" + m.code }\n```\n\nIn that case, the library will automatically encode the result of\ncalling `Error()`. This string will then be passed back to your\ndecoder function as the first argument. This makes it possible\nto decode the `code` field exactly:\n\n```go\nfunc myLeafDecoder(msg string, _ []string, _ proto.Message) error {\n\tcodeS := strings.TrimPrefix(msg, \"my error: \")\n\tcode, _ := strconv.Atoi(codeS)\n\t// Note: error handling for strconv is omitted here to simplify\n\t// the explanation. If your decoder function should fail, simply\n\t// return a `nil` error object (not another unrelated error!).\n\treturn &myLeaf{code: code}\n}\n```\n\nLikewise, if your fields are PII-free, they are safe to expose via the\n`errors.SafeDetailer` interface. Those strings also get encoded\nautomatically, and get passed to the decoder function as the second\nargument.\n\nFor example, say you have the following leaf type:\n\n```go\ntype myLeaf struct {\n   // both fields are PII-free.\n   code int\n   tag string\n}\n\nfunc (m *myLeaf) Error() string { ... }\n```\n\nThen you can expose the fields as safe details as follows:\n\n```go\nfunc (m *myLeaf) SafeDetails() []string {\n  return []string{fmt.Sprintf(\"%d\", m.code), m.tag}\n}\n```\n\n(If the data is PII-free, then it is good to do this in any case: it\nenables any network system that receives an error of your type, but\ndoes not know about it, to still produce useful Sentry reports.)\n\nOnce you have this, the decode function receives the strings and you\ncan use them to re-construct the error:\n\n```go\nfunc myLeafDecoder(_ string, details []string, _ proto.Message) error {\n    // Note: you may want to test the length of the details slice\n\t// is correct.\n    code, _ := strconv.Atoi(details[0])\n    tag := details[1]\n\treturn &myLeaf{code: code, tag: tag}\n}\n```\n\n(For an example, see the `withTelemetry` type in [`telemetry/with_telemetry.go`](telemetry/with_telemetry.go).)\n\n__The only case where you need a custom encoder is when your error\ntype contains some fields that are not reflected in the error message\n(so you can't extract them back from there), and are not PII-free and\nthus cannot be reported as \"safe details\".__\n\nTo take inspiration from examples, see the following types in the\nlibrary that need a custom encoder:\n\n- Hints/details in [`hintdetail/with_hint.go`](hintdetail/with_hint.go) and [`hintdetail/with_detail.go`](hintdetail/with_detail.go).\n- Secondary error wrappers in [`secondary/with_secondary.go`](secondary/with_secondary.go).\n- Marker error wrappers at the end of [`markers/markers.go`](markers/markers.go).\n\n### Making `%+v` work with your type\n\nIn short:\n\n- When in doubt, you should always implement the `fmt.Formatter`\n  interface (`Format(fmt.State, rune)`) on your custom error types,\n  exactly as follows:\n\n  ```go\n  func (e *yourType) Format(s *fmt.State, verb rune) { errors.FormatError(e, s, verb) }\n  ```\n\n  (If you do not provide this redirection for your own custom wrapper\n  type, this will disable the recursive application of the `%+v` flag\n  to the causes chained from your wrapper.)\n\n- You may optionally implement the `errors.SafeFormatter` interface:\n  `SafeFormatError(p errors.Printer) (next error)`.  This is optional, but\n  should be done when some details are not included by `Error()` and\n  should be emitted upon `%+v`.\n\nThe example `withHTTPCode` wrapper [included in the source tree](exthttp/ext_http.go)\nachieves this as follows:\n\n```go\n// Format() implements fmt.Formatter, is required until Go knows about FormatError.\nfunc (w *withHTTPCode) Format(s fmt.State, verb rune) { errors.FormatError(w, s, verb) }\n\n// FormatError() formats the error.\nfunc (w *withHTTPCode) SafeFormatError(p errors.Printer) (next error) {\n\t// Note: no need to print out the cause here!\n\t// FormatError() knows how to do this automatically.\n\tif p.Detail() {\n\t\tp.Printf(\"http code: %d\", errors.Safe(w.code))\n\t}\n\treturn w.cause\n}\n\n```\n\nTechnical details follow:\n\n- The errors library follows [the Go 2\nproposal](https://go.googlesource.com/proposal/+/master/design/29934-error-values.md).\n\n- At some point in the future, Go's standard `fmt` library will learn\n  [how to recognize error wrappers, and how to use the `errors.Formatter`\n  interface automatically](https://github.com/golang/go/issues/29934).  Until\n  then, you must ensure that you also implement a `Format()` method\n  (from `fmt.Formatter`) that redirects to `errors.FormatError`.\n\n  Note: you may implement `fmt.Formatter` (`Format()` method) in this\n  way without implementing `errors.Formatter` (a `FormatError()`\n  method). In that case, `errors.FormatError` will use a separate code\n  path that does \"the right thing\", even for wrappers.\n\n- The library provides an implementation of `errors.FormatError()`,\n  modeled after the same function in Go 2. This is responsible for\n  printing out error details, and knows how to present a chain of\n  causes in a semi-structured format upon formatting with `%+v`.\n\n### Ensuring `errors.Is` works when errors/packages are renamed\n\nIf a Go package containing a custom error type is renamed, or the\nerror type itself is renamed, and errors of this type are transported\nover the network, then another system with a different code layout\n(e.g. running a different version of the software) may not be able to\nrecognize the error any more via `errors.Is`.\n\nTo ensure that network portability continues to work across multiple\nsoftware versions, in the case error types get renamed or Go packages\nget moved / renamed / etc, the server code must call\n`errors.RegisterTypeMigration()` from e.g. an `init()` function.\n\nExample use:\n\n```go\n previousPath := \"github.com/old/path/to/error/package\"\n previousTypeName := \"oldpackage.oldErrorName\"\n newErrorInstance := &newTypeName{...}\n errors.RegisterTypeMigration(previousPath, previousTypeName, newErrorInstance)\n```\n\n## Error composition (summary)\n\n| Constructor                        | Composes                                                                          |\n|------------------------------------|-----------------------------------------------------------------------------------|\n| `New`                              | `NewWithDepth` (see below)                                                        |\n| `Errorf`                           | = `Newf`                                                                          |\n| `Newf`                             | `NewWithDepthf` (see below)                                                       |\n| `WithMessage`                      | custom wrapper with message prefix and knowledge of safe strings                  |\n| `Wrap`                             | `WrapWithDepth` (see below)                                                       |\n| `Wrapf`                            | `WrapWithDepthf` (see below)                                                      |\n| `AssertionFailed`                  | `AssertionFailedWithDepthf` (see below)                                           |\n| `NewWithDepth`                     | custom leaf with knowledge of safe strings + `WithStackDepth` (see below)         |\n| `NewWithDepthf`                    | custom leaf with knowledge of safe strings + `WithSafeDetails` + `WithStackDepth` |\n| `WithMessagef`                     | custom wrapper with message prefix and knowledge of safe strings                  |\n| `WrapWithDepth`                    | `WithMessage` + `WithStackDepth`                                                  |\n| `WrapWithDepthf`                   | `WithMessagef` + `WithStackDepth`                                                 |\n| `AssertionFailedWithDepthf`        | `NewWithDepthf` + `WithAssertionFailure`                                          |\n| `NewAssertionErrorWithWrappedErrf` | `HandledWithMessagef` (barrier) + `WrapWithDepthf` +  `WithAssertionFailure`      |\n| `Join`                             | `JoinWithDepth` (see below)                                                       |\n| `JoinWithDepth`                    | multi-cause wrapper + `WithStackDepth`                                            |\n## API (not constructing error objects)\n\nThe following is a summary of the non-constructor API functions, grouped by category.\nDetailed documentation can be found at: https://pkg.go.dev/github.com/cockroachdb/errors\n\n```go\n// Access causes.\nfunc UnwrapAll(err error) error\nfunc UnwrapOnce(err error) error\nfunc Cause(err error) error // compatibility\nfunc Unwrap(err error) error // compatibility\ntype Wrapper interface { ... } // compatibility\n\n// Error formatting.\ntype Formatter interface { ... } // compatibility, not recommended\ntype SafeFormatter interface { ... }\ntype Printer interface { ... }\nfunc FormatError(err error, s fmt.State, verb rune)\nfunc Formattable(err error) fmt.Formatter\n\n// Identify errors.\nfunc Is(err, reference error) bool\nfunc IsAny(err error, references ...error) bool\nfunc If(err error, pred func(err error) (interface{}, bool)) (interface{}, bool)\nfunc As(err error, target interface{}) bool\n\n// Encode/decode errors.\ntype EncodedError // this is protobuf-encodable\nfunc EncodeError(ctx context.Context, err error) EncodedError\nfunc DecodeError(ctx context.Context, enc EncodedError) error\n\n// Register encode/decode functions for custom/new error types.\nfunc RegisterLeafDecoder(typeName TypeKey, decoder LeafDecoder)\nfunc RegisterLeafEncoder(typeName TypeKey, encoder LeafEncoder)\nfunc RegisterWrapperDecoder(typeName TypeKey, decoder WrapperDecoder)\nfunc RegisterWrapperEncoder(typeName TypeKey, encoder WrapperEncoder)\nfunc RegisterWrapperEncoderWithMessageOverride (typeName TypeKey, encoder WrapperEncoderWithMessageOverride)\nfunc RegisterMultiCauseEncoder(theType TypeKey, encoder MultiCauseEncoder)\nfunc RegisterMultiCauseDecoder(theType TypeKey, decoder MultiCauseDecoder)\ntype LeafEncoder = func(ctx context.Context, err error) (msg string, safeDetails []string, payload proto.Message)\ntype LeafDecoder = func(ctx context.Context, msg string, safeDetails []string, payload proto.Message) error\ntype WrapperEncoder = func(ctx context.Context, err error) (msgPrefix string, safeDetails []string, payload proto.Message)\ntype WrapperEncoderWithMessageOverride = func(ctx context.Context, err error) (msgPrefix string, safeDetails []string, payload proto.Message, overrideError bool)\ntype WrapperDecoder = func(ctx context.Context, cause error, msgPrefix string, safeDetails []string, payload proto.Message) error\ntype MultiCauseEncoder = func(ctx context.Context, err error) (msg string, safeDetails []string, payload proto.Message)\ntype MultiCauseDecoder = func(ctx context.Context, causes []error, msgPrefix string, safeDetails []string, payload proto.Message) error\n\n// Registering package renames for custom error types.\nfunc RegisterTypeMigration(previousPkgPath, previousTypeName string, newType error)\n\n// Sentry reports.\nfunc BuildSentryReport(err error) (*sentry.Event, map[string]interface{})\nfunc ReportError(err error) (string)\n\n// Stack trace captures.\nfunc GetOneLineSource(err error) (file string, line int, fn string, ok bool)\ntype ReportableStackTrace = sentry.StackTrace\nfunc GetReportableStackTrace(err error) *ReportableStackTrace\n\n// Safe (PII-free) details.\ntype SafeDetailPayload struct { ... }\nfunc GetAllSafeDetails(err error) []SafeDetailPayload\nfunc GetSafeDetails(err error) (payload SafeDetailPayload)\n\n// Obsolete APIs.\ntype SafeMessager interface { ... }\nfunc Redact(r interface{}) string\n\n// Aliases redact.Safe.\nfunc Safe(v interface{}) SafeMessager\n\n// Assertion failures.\nfunc HasAssertionFailure(err error) bool\nfunc IsAssertionFailure(err error) bool\n\n// User-facing details and hints.\nfunc GetAllDetails(err error) []string\nfunc FlattenDetails(err error) string\nfunc GetAllHints(err error) []string\nfunc FlattenHints(err error) string\n\n// Issue links / URL wrappers.\nfunc HasIssueLink(err error) bool\nfunc IsIssueLink(err error) bool\nfunc GetAllIssueLinks(err error) (issues []IssueLink)\n\n// Unimplemented errors.\nfunc HasUnimplementedError(err error) bool\nfunc IsUnimplementedError(err error) bool\n\n// Telemetry keys.\nfunc GetTelemetryKeys(err error) []string\n\n// Domain errors.\ntype Domain\nconst NoDomain Domain\nfunc GetDomain(err error) Domain\nfunc NamedDomain(domainName string) Domain\nfunc PackageDomain() Domain\nfunc PackageDomainAtDepth(depth int) Domain\nfunc EnsureNotInDomain(err error, constructor DomainOverrideFn, forbiddenDomains ...Domain) error\nfunc NotInDomain(err error, doms ...Domain) bool\n\n// Context tags.\nfunc GetContextTags(err error) []*logtags.Buffer\n```\n"
        },
        {
          "name": "assert",
          "type": "tree",
          "content": null
        },
        {
          "name": "assert_api.go",
          "type": "blob",
          "size": 1.4404296875,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport \"github.com/cockroachdb/errors/assert\"\n\n// WithAssertionFailure decorates the error with an assertion failure marker.\n// This is not intended to be used directly (see AssertionFailed() for\n// further decoration).\n//\n// Detail is shown:\n// - when formatting with `%+v`.\n// - in Sentry reports.\nfunc WithAssertionFailure(err error) error { return assert.WithAssertionFailure(err) }\n\n// HasAssertionFailure returns true if the error or any of its causes\n// is an assertion failure annotation.\nfunc HasAssertionFailure(err error) bool { return assert.HasAssertionFailure(err) }\n\n// IsAssertionFailure returns true if the error (not its causes) is an\n// assertion failure annotation. Consider using markers.If or\n// HasAssertionFailure to test both the error and its causes.\nfunc IsAssertionFailure(err error) bool { return assert.IsAssertionFailure(err) }\n"
        },
        {
          "name": "barriers",
          "type": "tree",
          "content": null
        },
        {
          "name": "barriers_api.go",
          "type": "blob",
          "size": 1.4306640625,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport \"github.com/cockroachdb/errors/barriers\"\n\n// Handled swallows the provided error and hides it from the\n// Cause()/Unwrap() interface, and thus the Is() facility that\n// identifies causes. However, it retains it for the purpose of\n// printing the error out (e.g. for troubleshooting). The error\n// message is preserved in full.\n//\n// Detail is shown:\n// - via `errors.GetSafeDetails()`, shows details from hidden error.\n// - when formatting with `%+v`.\n// - in Sentry reports.\nfunc Handled(err error) error { return barriers.Handled(err) }\n\n// HandledWithMessage is like Handled except the message is overridden.\n// This can be used e.g. to hide message details or to prevent\n// downstream code to make assertions on the message's contents.\nfunc HandledWithMessage(err error, msg string) error { return barriers.HandledWithMessage(err, msg) }\n"
        },
        {
          "name": "contexttags",
          "type": "tree",
          "content": null
        },
        {
          "name": "contexttags_api.go",
          "type": "blob",
          "size": 1.8154296875,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport (\n\t\"context\"\n\n\t\"github.com/cockroachdb/errors/contexttags\"\n\t\"github.com/cockroachdb/logtags\"\n)\n\n// WithContextTags captures the k/v pairs stored in the context via the\n// `logtags` package and annotates them on the error.\n//\n// Only the strong representation of values remains available. This is\n// because the library cannot guarantee that the underlying value is\n// preserved across the network. To avoid creating a stateful interface\n// (where the user code needs to know whether an error has traveled\n// through the network or not), the library restricts access to the\n// value part as strings. See GetContextTags() below.\n//\n// Detail is shown:\n// - via `errors.GetSafeDetails()`.\n// - via `GetContextTags()` below.\n// - when formatting with `%+v`.\n// - in Sentry reports.\nfunc WithContextTags(err error, ctx context.Context) error {\n\treturn contexttags.WithContextTags(err, ctx)\n}\n\n// GetContextTags retrieves the k/v pairs stored in the error.\n// The sets are returned from outermost to innermost level of cause.\n// The returned logtags.Buffer only know about the string\n// representation of the values originally captured by the error.\nfunc GetContextTags(err error) []*logtags.Buffer { return contexttags.GetContextTags(err) }\n"
        },
        {
          "name": "domains",
          "type": "tree",
          "content": null
        },
        {
          "name": "domains_api.go",
          "type": "blob",
          "size": 3.3134765625,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport \"github.com/cockroachdb/errors/domains\"\n\n// Domain is the type of a domain annotation.\ntype Domain = domains.Domain\n\n// NoDomain is the domain of errors that don't originate\n// from a barrier.\nconst NoDomain Domain = domains.NoDomain\n\n// NamedDomain returns an error domain identified by the given string.\nfunc NamedDomain(domainName string) Domain { return domains.NamedDomain(domainName) }\n\n// PackageDomain returns an error domain that represents the\n// package of its caller.\nfunc PackageDomain() Domain { return domains.PackageDomainAtDepth(1) }\n\n// PackageDomainAtDepth returns an error domain that describes the\n// package at the given call depth.\nfunc PackageDomainAtDepth(depth int) Domain { return domains.PackageDomainAtDepth(depth) }\n\n// WithDomain wraps an error so that it appears to come from the given domain.\n//\n// Domain is shown:\n// - via `errors.GetSafeDetails()`.\n// - when formatting with `%+v`.\n// - in Sentry reports.\nfunc WithDomain(err error, domain Domain) error { return domains.WithDomain(err, domain) }\n\n// NotInDomain returns true if and only if the error's\n// domain is not one of the specified domains.\nfunc NotInDomain(err error, doms ...Domain) bool { return domains.NotInDomain(err, doms...) }\n\n// EnsureNotInDomain checks whether the error is in the given domain(s).\n// If it is, the given constructor if provided is called to construct\n// an alternate error. If no error constructor is provided,\n// a new barrier is constructed automatically using the first\n// provided domain as new domain. The original error message\n// is preserved.\nfunc EnsureNotInDomain(err error, constructor DomainOverrideFn, forbiddenDomains ...Domain) error {\n\treturn domains.EnsureNotInDomain(err, constructor, forbiddenDomains...)\n}\n\n// DomainOverrideFn is the type of the callback function passed to EnsureNotInDomain().\ntype DomainOverrideFn = func(originalDomain Domain, err error) error\n\n// HandledInDomain creates an error in the given domain and retains\n// the details of the given original error as context for\n// debugging. The original error is hidden and does not become a\n// \"cause\" for the new error. The original's error _message_\n// is preserved.\n//\n// See the documentation of `WithDomain()` and `errors.Handled()` for details.\nfunc HandledInDomain(err error, domain Domain) error { return domains.HandledInDomain(err, domain) }\n\n// HandledInDomainWithMessage is like HandledWithMessage but with a domain.\nfunc HandledInDomainWithMessage(err error, domain Domain, msg string) error {\n\treturn domains.HandledInDomainWithMessage(err, domain, msg)\n}\n\n// GetDomain extracts the domain of the given error, or NoDomain if\n// the error's cause does not have a domain annotation.\nfunc GetDomain(err error) Domain { return domains.GetDomain(err) }\n"
        },
        {
          "name": "errbase",
          "type": "tree",
          "content": null
        },
        {
          "name": "errbase_api.go",
          "type": "blob",
          "size": 11.0068359375,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/cockroachdb/errors/errbase\"\n)\n\n// UnwrapOnce accesses the direct cause of the error if any, otherwise\n// returns nil.\n//\n// It supports both errors implementing causer (`Cause()` method, from\n// github.com/pkg/errors) and `Wrapper` (`Unwrap()` method, from the\n// Go 2 error proposal).\nfunc UnwrapOnce(err error) error { return errbase.UnwrapOnce(err) }\n\n// UnwrapAll accesses the root cause object of the error.\n// If the error has no cause (leaf error), it is returned directly.\nfunc UnwrapAll(err error) error { return errbase.UnwrapAll(err) }\n\n// EncodedError is the type of an encoded (and protobuf-encodable) error.\ntype EncodedError = errbase.EncodedError\n\n// EncodeError encodes an error.\nfunc EncodeError(ctx context.Context, err error) EncodedError { return errbase.EncodeError(ctx, err) }\n\n// DecodeError decodes an error.\nfunc DecodeError(ctx context.Context, enc EncodedError) error { return errbase.DecodeError(ctx, enc) }\n\n// SafeDetailer is an interface that can be implemented by errors that\n// can provide PII-free additional strings suitable for reporting or\n// telemetry.\ntype SafeDetailer = errbase.SafeDetailer\n\n// GetAllSafeDetails collects the safe details from the given error object\n// and all its causes.\n// The details are collected from outermost to innermost level of cause.\nfunc GetAllSafeDetails(err error) []SafeDetailPayload { return errbase.GetAllSafeDetails(err) }\n\n// GetSafeDetails collects the safe details from the given error\n// object. If it is a wrapper, only the details from the wrapper are\n// returned.\nfunc GetSafeDetails(err error) (payload SafeDetailPayload) { return errbase.GetSafeDetails(err) }\n\n// SafeDetailPayload captures the safe strings for one\n// level of wrapping.\ntype SafeDetailPayload = errbase.SafeDetailPayload\n\n// RegisterLeafDecoder can be used to register new leaf error types to\n// the library. Registered types will be decoded using their own\n// Go type when an error is decoded. Wrappers that have not been\n// registered will be decoded using the opaqueLeaf type.\n//\n// Note: if the error type has been migrated from a previous location\n// or a different type, ensure that RegisterTypeMigration() was called\n// prior to RegisterLeafDecoder().\nfunc RegisterLeafDecoder(typeName TypeKey, decoder LeafDecoder) {\n\terrbase.RegisterLeafDecoder(typeName, decoder)\n}\n\n// TypeKey identifies an error for the purpose of looking up decoders.\n// It is equivalent to the \"family name\" in ErrorTypeMarker.\ntype TypeKey = errbase.TypeKey\n\n// GetTypeKey retrieve the type key for a given error object. This\n// is meant for use in combination with the Register functions.\nfunc GetTypeKey(err error) TypeKey { return errbase.GetTypeKey(err) }\n\n// LeafDecoder is to be provided (via RegisterLeafDecoder above)\n// by additional wrapper types not yet known to this library.\n// A nil return indicates that decoding was not successful.\ntype LeafDecoder = errbase.LeafDecoder\n\n// MultiCauseDecoder is to be provided (via RegisterMultiCauseDecoder\n// above) by additional multi-cause wrapper types not yet known by the\n// library. A nil return indicates that decoding was not successful.\ntype MultiCauseDecoder = errbase.MultiCauseDecoder\n\n// RegisterMultiCauseDecoder can be used to register new multi-cause\n// wrapper types to the library. Registered wrappers will be decoded\n// using their own Go type when an error is decoded. Multi-cause\n// wrappers that have not been registered will be decoded using the\n// opaqueWrapper type.\nfunc RegisterMultiCauseDecoder(theType TypeKey, decoder MultiCauseDecoder) {\n\terrbase.RegisterMultiCauseDecoder(theType, decoder)\n}\n\n// RegisterWrapperDecoder can be used to register new wrapper types to\n// the library. Registered wrappers will be decoded using their own\n// Go type when an error is decoded. Wrappers that have not been\n// registered will be decoded using the opaqueWrapper type.\n//\n// Note: if the error type has been migrated from a previous location\n// or a different type, ensure that RegisterTypeMigration() was called\n// prior to RegisterWrapperDecoder().\nfunc RegisterWrapperDecoder(typeName TypeKey, decoder WrapperDecoder) {\n\terrbase.RegisterWrapperDecoder(typeName, decoder)\n}\n\n// WrapperDecoder is to be provided (via RegisterWrapperDecoder above)\n// by additional wrapper types not yet known to this library.\n// A nil return indicates that decoding was not successful.\ntype WrapperDecoder = errbase.WrapperDecoder\n\n// RegisterLeafEncoder can be used to register new leaf error types to\n// the library. Registered types will be encoded using their own\n// Go type when an error is encoded. Wrappers that have not been\n// registered will be encoded using the opaqueLeaf type.\n//\n// Note: if the error type has been migrated from a previous location\n// or a different type, ensure that RegisterTypeMigration() was called\n// prior to RegisterLeafEncoder().\nfunc RegisterLeafEncoder(typeName TypeKey, encoder LeafEncoder) {\n\terrbase.RegisterLeafEncoder(typeName, encoder)\n}\n\n// LeafEncoder is to be provided (via RegisterLeafEncoder above)\n// by additional wrapper types not yet known to this library.\ntype LeafEncoder = errbase.LeafEncoder\n\n// RegisterWrapperEncoder can be used to register new wrapper types to\n// the library. Registered wrappers will be encoded using their own\n// Go type when an error is encoded. Wrappers that have not been\n// registered will be encoded using the opaqueWrapper type.\n//\n// Note: if the error type has been migrated from a previous location\n// or a different type, ensure that RegisterTypeMigration() was called\n// prior to RegisterWrapperEncoder().\nfunc RegisterWrapperEncoder(typeName TypeKey, encoder WrapperEncoder) {\n\terrbase.RegisterWrapperEncoder(typeName, encoder)\n}\n\n// WrapperEncoder is to be provided (via RegisterWrapperEncoder above)\n// by additional wrapper types not yet known to this library.\ntype WrapperEncoder = errbase.WrapperEncoder\n\n// RegisterWrapperEncoderWithMessageType can be used to register new wrapper\n// types to the library. These wrappers can optionally override the child error\n// messages with their own error string instead of relying on iterative\n// concatenation. Registered wrappers will be encoded using their own Go type\n// when an error is encoded. Wrappers that have not been registered will be\n// encoded using the opaqueWrapper type.\n//\n// Note: if the error type has been migrated from a previous location\n// or a different type, ensure that RegisterTypeMigration() was called\n// prior to RegisterWrapperEncoder().\nfunc RegisterWrapperEncoderWithMessageType(typeName TypeKey, encoder WrapperEncoderWithMessageType) {\n\terrbase.RegisterWrapperEncoderWithMessageType(typeName, encoder)\n}\n\n// WrapperEncoderWithMessageType is to be provided (via\n// RegisterWrapperEncoderWithMessageType) by additional wrapper\n// types not yet known to this library.\ntype WrapperEncoderWithMessageType = errbase.WrapperEncoderWithMessageType\n\n// RegisterMultiCauseEncoder can be used to register new multi-cause\n// error types to the library. Registered types will be encoded using\n// their own Go type when an error is encoded. Multi-cause wrappers\n// that have not been registered will be encoded using the\n// opaqueWrapper type.\nfunc RegisterMultiCauseEncoder(typeName TypeKey, encoder MultiCauseEncoder) {\n\terrbase.RegisterMultiCauseEncoder(typeName, encoder)\n}\n\n// MultiCauseEncoder is to be provided (via RegisterMultiCauseEncoder\n// above) by additional multi-cause wrapper types not yet known to this\n// library. The encoder will automatically extract and encode the\n// causes of this error by calling `Unwrap()` and expecting a slice of\n// errors.\ntype MultiCauseEncoder = errbase.MultiCauseEncoder\n\n// SetWarningFn enables configuration of the warning function.\nfunc SetWarningFn(fn func(context.Context, string, ...interface{})) { errbase.SetWarningFn(fn) }\n\n// A Formatter formats error messages.\n//\n// NB: Consider implementing SafeFormatter instead. This will ensure\n// that error displays can distinguish bits that are PII-safe.\ntype Formatter = errbase.Formatter\n\n// SafeFormatter is implemented by error leaf or wrapper types that want\n// to separate safe and non-safe information when printed out.\n//\n// When multiple errors are chained (e.g. via errors.Wrap), intermediate\n// layers in the error that do not implement SafeError are considered\n// “unsafe”\ntype SafeFormatter = errbase.SafeFormatter\n\n// A Printer formats error messages.\n//\n// The most common implementation of Printer is the one provided by package fmt\n// during Printf (as of Go 1.13). Localization packages such as golang.org/x/text/message\n// typically provide their own implementations.\ntype Printer = errbase.Printer\n\n// FormatError formats an error according to s and verb.\n// This is a helper meant for use when implementing the fmt.Formatter\n// interface on custom error objects.\n//\n// If the error implements errors.Formatter, FormatError calls its\n// FormatError method of f with an errors.Printer configured according\n// to s and verb, and writes the result to s.\n//\n// Otherwise, if it is a wrapper, FormatError prints out its error prefix,\n// then recurses on its cause.\n//\n// Otherwise, its Error() text is printed.\nfunc FormatError(err error, s fmt.State, verb rune) { errbase.FormatError(err, s, verb) }\n\n// Formattable wraps an error into a fmt.Formatter which\n// will provide \"smart\" formatting even if the outer layer\n// of the error does not implement the Formatter interface.\nfunc Formattable(err error) fmt.Formatter { return errbase.Formattable(err) }\n\n// RegisterTypeMigration tells the library that the type of the error\n// given as 3rd argument was previously known with type\n// previousTypeName, located at previousPkgPath.\n//\n// The value of previousTypeName must be the result of calling\n// reflect.TypeOf(err).String() on the original error object.\n// This is usually composed as follows:\n//\n//\t[*]<shortpackage>.<errortype>\n//\n// For example, Go's standard error type has name \"*errors.errorString\".\n// The asterisk indicates that `errorString` implements the `error`\n// interface via pointer receiver.\n//\n// Meanwhile, the singleton error type context.DeadlineExceeded\n// has name \"context.deadlineExceededError\", without asterisk\n// because the type implements `error` by value.\n//\n// Remember that the short package name inside the error type name and\n// the last component of the package path can be different. This is\n// why they must be specified separately.\nfunc RegisterTypeMigration(previousPkgPath, previousTypeName string, newType error) {\n\terrbase.RegisterTypeMigration(previousPkgPath, previousTypeName, newType)\n}\n"
        },
        {
          "name": "errorspb",
          "type": "tree",
          "content": null
        },
        {
          "name": "errutil",
          "type": "tree",
          "content": null
        },
        {
          "name": "errutil_api.go",
          "type": "blob",
          "size": 8.6044921875,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport (\n\t\"github.com/cockroachdb/errors/barriers\"\n\t\"github.com/cockroachdb/errors/errbase\"\n\t\"github.com/cockroachdb/errors/errutil\"\n)\n\n// New creates an error with a simple error message.\n// A stack trace is retained.\n//\n// Note: the message string is assumed to not contain\n// PII and is included in Sentry reports.\n// Use errors.Newf(\"%s\", <unsafestring>) for errors\n// strings that may contain PII information.\n//\n// Detail output:\n// - message via `Error()` and formatting using `%v`/`%s`/`%q`.\n// - everything when formatting with `%+v`.\n// - stack trace and message via `errors.GetSafeDetails()`.\n// - stack trace and message in Sentry reports.\nfunc New(msg string) error { return errutil.NewWithDepth(1, msg) }\n\n// NewWithDepth is like New() except the depth to capture the stack\n// trace is configurable.\n// See the doc of `New()` for more details.\nfunc NewWithDepth(depth int, msg string) error { return errutil.NewWithDepth(depth+1, msg) }\n\n// Newf creates an error with a formatted error message.\n// A stack trace is retained.\n//\n// Note: the format string is assumed to not contain\n// PII and is included in Sentry reports.\n// Use errors.Newf(\"%s\", <unsafestring>) for errors\n// strings that may contain PII information.\n//\n// See the doc of `New()` for more details.\nfunc Newf(format string, args ...interface{}) error { return errutil.NewWithDepthf(1, format, args...) }\n\n// NewWithDepthf is like Newf() except the depth to capture the stack\n// trace is configurable.\n// See the doc of `New()` for more details.\nfunc NewWithDepthf(depth int, format string, args ...interface{}) error {\n\treturn errutil.NewWithDepthf(depth+1, format, args...)\n}\n\n// Errorf aliases Newf().\nfunc Errorf(format string, args ...interface{}) error {\n\treturn errutil.NewWithDepthf(1, format, args...)\n}\n\n// Cause aliases UnwrapAll() for compatibility with github.com/pkg/errors.\nfunc Cause(err error) error { return errbase.UnwrapAll(err) }\n\n// Unwrap aliases UnwrapOnce() for compatibility with xerrors.\nfunc Unwrap(err error) error { return errbase.UnwrapOnce(err) }\n\n// Wrapper is the type of an error wrapper.\ntype Wrapper interface {\n\tUnwrap() error\n}\n\n// Opaque aliases barrier.Handled(), for compatibility with xerrors.\nfunc Opaque(err error) error { return barriers.Handled(err) }\n\n// WithMessage annotates err with a new message.\n// If err is nil, WithMessage returns nil.\n// The message is considered safe for reporting\n// and is included in Sentry reports.\nfunc WithMessage(err error, msg string) error { return errutil.WithMessage(err, msg) }\n\n// WithMessagef annotates err with the format specifier.\n// If err is nil, WithMessagef returns nil.\n// The message is formatted as per redact.Sprintf,\n// to separate safe and unsafe strings for Sentry reporting.\nfunc WithMessagef(err error, format string, args ...interface{}) error {\n\treturn errutil.WithMessagef(err, format, args...)\n}\n\n// Wrap wraps an error with a message prefix.\n// A stack trace is retained.\n//\n// Note: the prefix string is assumed to not contain\n// PII and is included in Sentry reports.\n// Use errors.Wrapf(err, \"%s\", <unsafestring>) for errors\n// strings that may contain PII information.\n//\n// Detail output:\n// - original error message + prefix via `Error()` and formatting using `%v`/`%s`/`%q`.\n// - everything when formatting with `%+v`.\n// - stack trace and message via `errors.GetSafeDetails()`.\n// - stack trace and message in Sentry reports.\nfunc Wrap(err error, msg string) error { return errutil.WrapWithDepth(1, err, msg) }\n\n// WrapWithDepth is like Wrap except the depth to capture the stack\n// trace is configurable.\n// The the doc of `Wrap()` for more details.\nfunc WrapWithDepth(depth int, err error, msg string) error {\n\treturn errutil.WrapWithDepth(depth+1, err, msg)\n}\n\n// Wrapf wraps an error with a formatted message prefix. A stack\n// trace is also retained. If the format is empty, no prefix is added,\n// but the extra arguments are still processed for reportable strings.\n//\n// Note: the format string is assumed to not contain\n// PII and is included in Sentry reports.\n// Use errors.Wrapf(err, \"%s\", <unsafestring>) for errors\n// strings that may contain PII information.\n//\n// Detail output:\n// - original error message + prefix via `Error()` and formatting using `%v`/`%s`/`%q`.\n// - everything when formatting with `%+v`.\n// - stack trace, format, and redacted details via `errors.GetSafeDetails()`.\n// - stack trace, format, and redacted details in Sentry reports.\nfunc Wrapf(err error, format string, args ...interface{}) error {\n\treturn errutil.WrapWithDepthf(1, err, format, args...)\n}\n\n// WrapWithDepthf is like Wrapf except the depth to capture the stack\n// trace is configurable.\n// The the doc of `Wrapf()` for more details.\nfunc WrapWithDepthf(depth int, err error, format string, args ...interface{}) error {\n\treturn errutil.WrapWithDepthf(depth+1, err, format, args...)\n}\n\n// AssertionFailedf creates an internal error.\n//\n// Detail is shown:\n// - via `errors.GetSafeDetails()`, shows redacted strings.\n// - when formatting with `%+v`.\n// - in Sentry reports.\nfunc AssertionFailedf(format string, args ...interface{}) error {\n\treturn errutil.AssertionFailedWithDepthf(1, format, args...)\n}\n\n// AssertionFailedWithDepthf creates an internal error\n// with a stack trace collected at the specified depth.\n// See the doc of `AssertionFailedf()` for more details.\nfunc AssertionFailedWithDepthf(depth int, format string, args ...interface{}) error {\n\treturn errutil.AssertionFailedWithDepthf(depth+1, format, args...)\n}\n\n// NewAssertionErrorWithWrappedErrf wraps an error and turns it into\n// an assertion error. Both details from the original error and the\n// context of the caller are preserved. The original error is not\n// visible as cause any more. The original error message is preserved.\n// See the doc of `AssertionFailedf()` for more details.\nfunc NewAssertionErrorWithWrappedErrf(origErr error, format string, args ...interface{}) error {\n\treturn errutil.NewAssertionErrorWithWrappedErrDepthf(1, origErr, format, args...)\n}\n\n// HandleAsAssertionFailure hides an error and turns it into\n// an assertion failure. Both details from the original error and the\n// context of the caller are preserved. The original error is not\n// visible as cause any more. The original error message is preserved.\n// See the doc of `AssertionFailedf()` for more details.\nfunc HandleAsAssertionFailure(origErr error) error {\n\treturn errutil.HandleAsAssertionFailureDepth(1, origErr)\n}\n\n// HandleAsAssertionFailureDepth is like HandleAsAssertionFailure but\n// the depth at which the call stack is captured can be specified.\nfunc HandleAsAssertionFailureDepth(depth int, origErr error) error {\n\treturn errutil.HandleAsAssertionFailureDepth(1+depth, origErr)\n}\n\n// As finds the first error in err's chain that matches the type to which target\n// points, and if so, sets the target to its value and returns true. An error\n// matches a type if it is assignable to the target type, or if it has a method\n// As(interface{}) bool such that As(target) returns true. As will panic if target\n// is not a non-nil pointer to a type which implements error or is of interface type.\n//\n// The As method should set the target to its value and return true if err\n// matches the type to which target points.\n//\n// Note: this implementation differs from that of xerrors as follows:\n// - it also supports recursing through causes with Cause().\n// - if it detects an API use error, its panic object is a valid error.\nfunc As(err error, target interface{}) bool { return errutil.As(err, target) }\n\n// Join returns an error that wraps the given errors.\n// Any nil error values are discarded.\n// Join returns nil if errs contains no non-nil values.\n// The error formats as the concatenation of the strings obtained\n// by calling the Error method of each element of errs, with a newline\n// between each string. A stack trace is also retained.\nfunc Join(errs ...error) error {\n\treturn errutil.JoinWithDepth(1, errs...)\n}\n\n// JoinWithDepth is like Join but the depth at which the call stack is\n// captured can be specified.\nfunc JoinWithDepth(depth int, errs ...error) error {\n\treturn errutil.JoinWithDepth(depth+1, errs...)\n}\n"
        },
        {
          "name": "errutil_api_test.go",
          "type": "blob",
          "size": 0.9130859375,
          "content": "package errors_test\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/cockroachdb/errors\"\n\t\"github.com/cockroachdb/errors/testutils\"\n)\n\nfunc TestUnwrap(t *testing.T) {\n\ttt := testutils.T{t}\n\n\te := fmt.Errorf(\"foo %w %w\", fmt.Errorf(\"bar\"), fmt.Errorf(\"baz\"))\n\n\t// Compatibility with go 1.20: Unwrap() on a multierror returns nil\n\t// (per API documentation)\n\ttt.Check(errors.Unwrap(e) == nil)\n}\n\n// More detailed testing of Join is in datadriven_test.go. Here we make\n// sure that the public API includes the stacktrace wrapper.\nfunc TestJoin(t *testing.T) {\n\te := errors.Join(errors.New(\"abc123\"), errors.New(\"def456\"))\n\tprinted := fmt.Sprintf(\"%+v\", e)\n\texpected := `Error types: (1) *withstack.withStack (2) *join.joinError (3) *withstack.withStack (4) *errutil.leafError (5) *withstack.withStack (6) *errutil.leafError`\n\tif !strings.Contains(printed, expected) {\n\t\tt.Errorf(\"Expected: %s to contain: %s\", printed, expected)\n\t}\n}\n"
        },
        {
          "name": "extgrpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "exthttp",
          "type": "tree",
          "content": null
        },
        {
          "name": "fmttests",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.1025390625,
          "content": "module github.com/cockroachdb/errors\n\ngo 1.19\n\nrequire (\n\tgithub.com/cockroachdb/datadriven v1.0.2\n\tgithub.com/cockroachdb/logtags v0.0.0-20230118201751-21c54148d20b\n\tgithub.com/cockroachdb/redact v1.1.5\n\tgithub.com/getsentry/sentry-go v0.27.0\n\tgithub.com/gogo/googleapis v1.4.1 // gogoproto 1.2-compatible, for CRDB\n\tgithub.com/gogo/protobuf v1.3.2\n\tgithub.com/gogo/status v1.1.0\n\tgithub.com/hydrogen18/memlistener v1.0.0\n\tgithub.com/kr/pretty v0.3.1\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/stretchr/testify v1.8.2\n\tgoogle.golang.org/grpc v1.56.3\n\tgoogle.golang.org/protobuf v1.33.0\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/golang/protobuf v1.5.3 // indirect\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/rogpeppe/go-internal v1.9.0 // indirect\n\tgolang.org/x/net v0.23.0 // indirect\n\tgolang.org/x/sys v0.18.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20230410155749-daa745c078e1 // indirect\n\tgopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 9.3212890625,
          "content": "github.com/cockroachdb/datadriven v1.0.2 h1:H9MtNqVoVhvd9nCBwOyDjUEdZCREqbIdCJD93PBm/jA=\ngithub.com/cockroachdb/datadriven v1.0.2/go.mod h1:a9RdTaap04u637JoCzcUoIcDmvwSUtcUFtT/C3kJlTU=\ngithub.com/cockroachdb/logtags v0.0.0-20230118201751-21c54148d20b h1:r6VH0faHjZeQy818SGhaone5OnYfxFR/+AzdY3sf5aE=\ngithub.com/cockroachdb/logtags v0.0.0-20230118201751-21c54148d20b/go.mod h1:Vz9DsVWQQhf3vs21MhPMZpMGSht7O/2vFW2xusFUVOs=\ngithub.com/cockroachdb/redact v1.1.5 h1:u1PMllDkdFfPWaNGMyLD1+so+aq3uUItthCFqzwPJ30=\ngithub.com/cockroachdb/redact v1.1.5/go.mod h1:BVNblN9mBWFyMyqK1k3AAiSxhvhfK2oOZZ2lK+dpvRg=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/getsentry/sentry-go v0.27.0 h1:Pv98CIbtB3LkMWmXi4Joa5OOcwbmnX88sF5qbK3r3Ps=\ngithub.com/getsentry/sentry-go v0.27.0/go.mod h1:lc76E2QywIyW8WuBnwl8Lc4bkmQH4+w1gwTf25trprY=\ngithub.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=\ngithub.com/gogo/googleapis v0.0.0-20180223154316-0cd9801be74a/go.mod h1:gf4bu3Q80BeJ6H1S1vYPm8/ELATdvryBaNFGgqEef3s=\ngithub.com/gogo/googleapis v1.4.1 h1:1Yx4Myt7BxzvUr5ldGSbwYiZG6t9wGBZ+8/fX3Wvtq0=\ngithub.com/gogo/googleapis v1.4.1/go.mod h1:2lpHqI5OcWCtVElxXnPt+s8oJvMpySlOyM6xDCrzib4=\ngithub.com/gogo/protobuf v1.2.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/gogo/status v1.1.0 h1:+eIkrewn5q6b30y+g/BJINVVdi2xH7je5MPJ3ZPK3JA=\ngithub.com/gogo/status v1.1.0/go.mod h1:BFv9nrluPLmrS0EmGVvLaPNmRosr9KapBYd5/hpY1WM=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/hydrogen18/memlistener v1.0.0 h1:JR7eDj8HD6eXrc5fWLbSUnfcQFL06PYvCc0DKQnWfaU=\ngithub.com/hydrogen18/memlistener v1.0.0/go.mod h1:qEIFzExnS6016fRpRfxrExeVn2gbClQA99gQhnIcdhE=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.2 h1:+h33VjcLVPDHtOdpUCuF+7gSuG3yGIftsP1YvFihtJ8=\ngithub.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.23.0 h1:7EYJ93RZ9vYSZAIb2x3lnuvqO5zneoD6IvWjuhfxjTs=\ngolang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/genproto v0.0.0-20180518175338-11a468237815/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20230410155749-daa745c078e1 h1:KpwkzHKEF7B9Zxg18WzOa7djJ+Ha5DzthMyZYQfEn2A=\ngoogle.golang.org/genproto v0.0.0-20230410155749-daa745c078e1/go.mod h1:nKE/iIaLqn2bQwXBg8f1g2Ylh6r5MN5CmZvuzZCgsCU=\ngoogle.golang.org/grpc v1.12.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=\ngoogle.golang.org/grpc v1.56.3 h1:8I4C0Yq1EjstUzUJzpcRVbuYA2mODtEmpWiQoN/b2nc=\ngoogle.golang.org/grpc v1.56.3/go.mod h1:I9bI3vqKfayGqPUAwGdOSu7kt6oIJLixfffKrpXqQ9s=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "grpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "hintdetail",
          "type": "tree",
          "content": null
        },
        {
          "name": "hintdetail_api.go",
          "type": "blob",
          "size": 3.33203125,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport \"github.com/cockroachdb/errors/hintdetail\"\n\n// ErrorHinter is implemented by types that can provide\n// user-informing detail strings. This is implemented by withHint\n// here, withIssueLink, assertionFailure and pgerror.Error.\ntype ErrorHinter = hintdetail.ErrorHinter\n\n// ErrorDetailer is implemented by types that can provide\n// user-informing detail strings.\ntype ErrorDetailer = hintdetail.ErrorDetailer\n\n// WithHint decorates an error with a textual hint.\n// The hint may contain PII and thus will not reportable.\n// The suggested use case for hint is to relay information to end users.\n//\n// Hint is shown:\n// - when formatting with `%+v`.\n// - with `GetAllHints()` / `FlattenHints()` below.\n//\n// Note: the hint does not appear in the main error message returned\n// with Error(). Use GetAllHints() or FlattenHints() to retrieve it.\nfunc WithHint(err error, msg string) error { return hintdetail.WithHint(err, msg) }\n\n// WithHintf is a helper that formats the hint.\n// See the documentation of WithHint() for details.\nfunc WithHintf(err error, format string, args ...interface{}) error {\n\treturn hintdetail.WithHintf(err, format, args...)\n}\n\n// WithDetail decorates an error with a textual detail.\n// The detail may contain PII and thus will not reportable.\n// The suggested use case for detail is to augment errors with information\n// useful for debugging.\n//\n// Detail is shown:\n// - when formatting with `%+v`.\n// - with `GetAllDetails()` / `FlattenDetails()` below.\n//\n// Note: the detail does not appear in the main error message returned\n// with Error(). Use GetAllDetails() or FlattenDetails() to retrieve\n// it.\nfunc WithDetail(err error, msg string) error { return hintdetail.WithDetail(err, msg) }\n\n// WithDetailf is a helper that formats the detail string.\n// See the documentation of WithDetail() for details.\nfunc WithDetailf(err error, format string, args ...interface{}) error {\n\treturn hintdetail.WithDetailf(err, format, args...)\n}\n\n// GetAllHints retrieves the hints from the error using in post-order\n// traversal. The hints are de-duplicated. Assertion failures, issue\n// links and unimplemented errors are detected and receive standard\n// hints.\nfunc GetAllHints(err error) []string { return hintdetail.GetAllHints(err) }\n\n// FlattenHints retrieves the hints as per GetAllHints() and\n// concatenates them into a single string.\nfunc FlattenHints(err error) string { return hintdetail.FlattenHints(err) }\n\n// GetAllDetails retrieves the details from the error using in post-order\n// traversal.\nfunc GetAllDetails(err error) []string { return hintdetail.GetAllDetails(err) }\n\n// FlattenDetails retrieves the details as per GetAllDetails() and\n// concatenates them into a single string.\nfunc FlattenDetails(err error) string { return hintdetail.FlattenDetails(err) }\n"
        },
        {
          "name": "issuelink",
          "type": "tree",
          "content": null
        },
        {
          "name": "issuelink_api.go",
          "type": "blob",
          "size": 2.8330078125,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport \"github.com/cockroachdb/errors/issuelink\"\n\n// WithIssueLink adds an annotation to a know issue\n// on a web issue tracker.\n//\n// The url and detail strings may contain PII and will\n// be considered reportable.\n//\n// Detail is shown:\n// - via `errors.GetSafeDetails()`\n// - when formatting with `%+v`.\n// - in Sentry reports.\n// - via `errors.GetAllHints()` / `errors.FlattenHints()`\nfunc WithIssueLink(err error, issue IssueLink) error { return issuelink.WithIssueLink(err, issue) }\n\n// IssueLink is the payload for a linked issue annotation.\ntype IssueLink = issuelink.IssueLink\n\n// UnimplementedError creates a new leaf error that indicates that\n// some feature was not (yet) implemented.\n//\n// Detail is shown:\n// - via `errors.GetSafeDetails()`\n// - when formatting with `%+v`.\n// - in Sentry reports.\n// - via `errors.GetAllHints()` / `errors.FlattenHints()`\nfunc UnimplementedError(issueLink IssueLink, msg string) error {\n\treturn issuelink.UnimplementedError(issueLink, msg)\n}\n\n// UnimplementedErrorf creates a new leaf error that indicates that\n// some feature was not (yet) implemented. The message is formatted.\nfunc UnimplementedErrorf(issueLink IssueLink, format string, args ...interface{}) error {\n\treturn issuelink.UnimplementedErrorf(issueLink, format, args...)\n}\n\n// GetAllIssueLinks retrieves the linked issue carried\n// by the error or its direct causes.\nfunc GetAllIssueLinks(err error) (issues []IssueLink) { return issuelink.GetAllIssueLinks(err) }\n\n// HasIssueLink returns true iff the error or one of its\n// causes has a linked issue payload.\nfunc HasIssueLink(err error) bool { return issuelink.HasIssueLink(err) }\n\n// IsIssueLink returns true iff the error (not its\n// causes) has a linked issue payload.\nfunc IsIssueLink(err error) bool { return issuelink.IsIssueLink(err) }\n\n// HasUnimplementedError returns iff if err or its cause is an\n// unimplemented error.\nfunc HasUnimplementedError(err error) bool { return issuelink.HasUnimplementedError(err) }\n\n// IsUnimplementedError returns iff if err is an unimplemented error.\nfunc IsUnimplementedError(err error) bool { return issuelink.IsUnimplementedError(err) }\n\n// UnimplementedErrorHint is the hint emitted upon unimplemented errors.\nconst UnimplementedErrorHint = issuelink.UnimplementedErrorHint\n"
        },
        {
          "name": "join",
          "type": "tree",
          "content": null
        },
        {
          "name": "markers",
          "type": "tree",
          "content": null
        },
        {
          "name": "markers_api.go",
          "type": "blob",
          "size": 3.181640625,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport \"github.com/cockroachdb/errors/markers\"\n\n// Is determines whether one of the causes of the given error or any\n// of its causes is equivalent to some reference error.\n//\n// As in the Go standard library, an error is considered to match a\n// reference error if it is equal to that target or if it implements a\n// method Is(error) bool such that Is(reference) returns true.\n//\n// Note: the inverse is not true - making an Is(reference) method\n// return false does not imply that errors.Is() also returns\n// false. Errors can be equal because their network equality marker is\n// the same. To force errors to appear different to Is(), use\n// errors.Mark().\n//\n// Note: if any of the error types has been migrated from a previous\n// package location or a different type, ensure that\n// RegisterTypeMigration() was called prior to Is().\nfunc Is(err, reference error) bool { return markers.Is(err, reference) }\n\n// HasType returns true iff err contains an error whose concrete type\n// matches that of referenceType.\nfunc HasType(err, referenceType error) bool { return markers.HasType(err, referenceType) }\n\n// HasInterface returns true if err contains an error which implements the\n// interface pointed to by referenceInterface. The type of referenceInterface\n// must be a pointer to an interface type. If referenceInterface is not a\n// pointer to an interface, this function will panic.\nfunc HasInterface(err error, referenceInterface interface{}) bool {\n\treturn markers.HasInterface(err, referenceInterface)\n}\n\n// If iterates on the error's causal chain and returns a predicate's\n// return value the first time the predicate returns true.\n//\n// Note: if any of the error types has been migrated from a previous\n// package location or a different type, ensure that\n// RegisterTypeMigration() was called prior to If().\nfunc If(err error, pred func(err error) (interface{}, bool)) (interface{}, bool) {\n\treturn markers.If(err, pred)\n}\n\n// IsAny is like Is except that multiple references are compared.\n//\n// Note: if any of the error types has been migrated from a previous\n// package location or a different type, ensure that\n// RegisterTypeMigration() was called prior to IsAny().\nfunc IsAny(err error, references ...error) bool { return markers.IsAny(err, references...) }\n\n// Mark creates an explicit mark for the given error, using\n// the same mark as some reference error.\n//\n// Note: if any of the error types has been migrated from a previous\n// package location or a different type, ensure that\n// RegisterTypeMigration() was called prior to Mark().\nfunc Mark(err error, reference error) error { return markers.Mark(err, reference) }\n"
        },
        {
          "name": "oserror",
          "type": "tree",
          "content": null
        },
        {
          "name": "report",
          "type": "tree",
          "content": null
        },
        {
          "name": "report_api.go",
          "type": "blob",
          "size": 4.09375,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport (\n\t\"github.com/cockroachdb/errors/report\"\n\t\"github.com/getsentry/sentry-go\"\n)\n\n// BuildSentryReport builds the components of a sentry report.  This\n// can be used instead of ReportError() below to use additional custom\n// conditions in the reporting or add additional reporting tags.\n//\n// The Sentry Event is populated for maximal utility when exploited in\n// the Sentry.io web interface and database.\n//\n// A Sentry report is displayed visually in the Sentry UI as follows:\n//\n////////////////\n// Title: (1) some prefix in bold (2) one line for a stack trace\n// (3) a single-line subtitle\n//\n// (4) the tags, as a tag soup (concatenated in a single paragraph,\n// unsorted)\n//\n// (5) a \"message\"\n//\n// (6) zero or more \"exceptions\", each composed of:\n//    (7) a bold title\n//    (8) some freeform text\n//    (9) a stack trace\n//\n// (10) metadata fields: environment, arch, etc\n//\n// (11) \"Additional data\" fields\n//\n// (12) SDK version\n/////////////////\n//\n// These visual items map to the Sentry Event object as follows:\n//\n// (1) the Type field of the 1st Exception object, if any\n//     otherwise the Message field\n// (2) the topmost entry from the Stacktrace field of the 1st Exception object, if any\n// (3) the Value field of the 1st Exception object, if any, unwrapped as a single line\n// (4) the Tags field\n// (5) the Message field\n// (7) the Type field (same as (1) for 1st exception)\n// (8) the Value field (same as (3) for 1st exception)\n// (9) the Stacktrace field (input to (2) on 1st exception)\n// (10) the other fields on the Event object\n// (11) the Extra field\n//\n// (Note how the top-level title fields (1) (3) are unrelated to the\n// Message field in the event, which is surprising!)\n//\n// Given this mapping, an error object is decomposed as follows:\n//\n// (1)/(7): <filename>:<lineno> (<functionname>)\n// (3)/(8): <error type>: <first safe detail line, if any>\n// (4): not populated in this function, caller is to manage this\n// (5): detailed structure of the entire error object, with references to \"additional data\"\n//      and additional \"exception\" objects\n// (9): generated from innermost stack trace\n// (6): every exception object after the 1st reports additional stack trace contexts\n// (11): \"additional data\" populated from safe detail payloads\n//\n// If there is no stack trace in the error, a synthetic Exception\n// object is still produced to provide visual detail in the Sentry UI.\n//\n// Note that if a layer in the error has both a stack trace (ie\n// provides the `StackTrace()` interface) and also safe details\n// (`SafeDetails()`) other than the stack trace, only the stack trace\n// is included in the Sentry report. This does not affect error types\n// provided by the library, but could impact error types defined by\n// 3rd parties. This limitation may be lifted in a later version.\n//\nfunc BuildSentryReport(err error) (*sentry.Event, map[string]interface{}) {\n\treturn report.BuildSentryReport(err)\n}\n\n// ReportError reports the given error to Sentry. The caller is responsible for\n// checking whether telemetry is enabled, and calling the sentry.Flush()\n// function to wait for the report to be uploaded. (By default,\n// Sentry submits reports asynchronously.)\n//\n// Note: an empty 'eventID' can be returned which signifies that the error was\n// not reported. This can occur when Sentry client hasn't been properly\n// configured or Sentry client decided to not report the error (due to\n// configured sampling rate, callbacks, Sentry's event processors, etc).\nfunc ReportError(err error) string { return report.ReportError(err) }\n"
        },
        {
          "name": "safedetails",
          "type": "tree",
          "content": null
        },
        {
          "name": "safedetails_api.go",
          "type": "blob",
          "size": 2.03125,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport (\n\t\"github.com/cockroachdb/errors/safedetails\"\n\t\"github.com/cockroachdb/redact\"\n)\n\n// WithSafeDetails annotates an error with the given reportable details.\n// The format is made available as a PII-free string, alongside\n// with a PII-free representation of every additional argument.\n// Arguments can be reported as-is (without redaction) by wrapping\n// them using the Safe() function.\n//\n// If the format is empty and there are no arguments, the\n// error argument is returned unchanged.\n//\n// Detail is shown:\n// - via `errors.GetSafeDetails()`\n// - when formatting with `%+v`.\n// - in Sentry reports.\nfunc WithSafeDetails(err error, format string, args ...interface{}) error {\n\treturn safedetails.WithSafeDetails(err, format, args...)\n}\n\n// SafeMessager aliases redact.SafeMessager.\n//\n// NB: this is obsolete. Use redact.SafeFormatter or\n// errors.SafeFormatter instead.\ntype SafeMessager = redact.SafeMessager\n\n// Safe wraps the given object into an opaque struct that implements\n// SafeMessager: its contents can be included as-is in PII-free\n// strings in error objects and reports.\n//\n// NB: this is obsolete. Use redact.Safe instead.\nfunc Safe(v interface{}) redact.SafeValue { return safedetails.Safe(v) }\n\n// Redact returns a redacted version of the supplied item that is safe to use in\n// anonymized reporting.\n//\n// NB: this interface is obsolete. Use redact.Sprint() directly.\nfunc Redact(r interface{}) string { return safedetails.Redact(r) }\n"
        },
        {
          "name": "secondary",
          "type": "tree",
          "content": null
        },
        {
          "name": "secondary_api.go",
          "type": "blob",
          "size": 1.634765625,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport \"github.com/cockroachdb/errors/secondary\"\n\n// WithSecondaryError enhances the error given as first argument with\n// an annotation that carries the error given as second argument.  The\n// second error does not participate in cause analysis (Is, etc) and\n// is only revealed when printing out the error or collecting safe\n// (PII-free) details for reporting.\n//\n// If additionalErr is nil, the first error is returned as-is.\n//\n// Tip: consider using CombineErrors() below in the general case.\n//\n// Detail is shown:\n// - via `errors.GetSafeDetails()`, shows details from secondary error.\n// - when formatting with `%+v`.\n// - in Sentry reports.\nfunc WithSecondaryError(err error, additionalErr error) error {\n\treturn secondary.WithSecondaryError(err, additionalErr)\n}\n\n// CombineErrors returns err, or, if err is nil, otherErr.\n// if err is non-nil, otherErr is attached as secondary error.\n// See the documentation of `WithSecondaryError()` for details.\nfunc CombineErrors(err, otherErr error) error {\n\treturn secondary.CombineErrors(err, otherErr)\n}\n"
        },
        {
          "name": "stdstrings",
          "type": "tree",
          "content": null
        },
        {
          "name": "telemetrykeys",
          "type": "tree",
          "content": null
        },
        {
          "name": "telemetrykeys_api.go",
          "type": "blob",
          "size": 1.2509765625,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport \"github.com/cockroachdb/errors/telemetrykeys\"\n\n// WithTelemetry annotates err with the given telemetry key(s).\n// The telemetry keys must be PII-free.\n//\n// Detail is shown:\n// - via `errors.GetSafeDetails()`.\n// - via `GetTelemetryKeys()` below.\n// - when formatting with `%+v`.\n// - in Sentry reports.\nfunc WithTelemetry(err error, keys ...string) error { return telemetrykeys.WithTelemetry(err, keys...) }\n\n// GetTelemetryKeys retrieves the (de-duplicated) set of\n// all telemetry keys present in the direct causal chain\n// of the error. The keys may not be sorted.\nfunc GetTelemetryKeys(err error) []string { return telemetrykeys.GetTelemetryKeys(err) }\n"
        },
        {
          "name": "testutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "withstack",
          "type": "tree",
          "content": null
        },
        {
          "name": "withstack_api.go",
          "type": "blob",
          "size": 2.7998046875,
          "content": "// Copyright 2019 The Cockroach Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied. See the License for the specific language governing\n// permissions and limitations under the License.\n\npackage errors\n\nimport \"github.com/cockroachdb/errors/withstack\"\n\n// This file mirrors the WithStack functionality from\n// github.com/pkg/errors. We would prefer to reuse the withStack\n// struct from that package directly (the library recognizes it well)\n// unfortunately github.com/pkg/errors does not enable client code to\n// customize the depth at which the stack trace is captured.\n\n// WithStack annotates err with a stack trace at the point WithStack was called.\n//\n// Detail is shown:\n// - via `errors.GetSafeDetails()`\n// - when formatting with `%+v`.\n// - in Sentry reports.\n// - when innermost stack capture, with `errors.GetOneLineSource()`.\nfunc WithStack(err error) error { return withstack.WithStackDepth(err, 1) }\n\n// WithStackDepth annotates err with a stack trace starting from the\n// given call depth. The value zero identifies the caller\n// of WithStackDepth itself.\n// See the documentation of WithStack() for more details.\nfunc WithStackDepth(err error, depth int) error { return withstack.WithStackDepth(err, depth+1) }\n\n// ReportableStackTrace aliases the type of the same name in the sentry\n// package. This is used by SendReport().\ntype ReportableStackTrace = withstack.ReportableStackTrace\n\n// GetOneLineSource extracts the file/line/function information\n// of the topmost caller in the innermost recorded stack trace.\n// The filename is simplified to remove the path prefix.\n//\n// This is used e.g. to populate the \"source\" field in\n// PostgreSQL errors in CockroachDB.\nfunc GetOneLineSource(err error) (file string, line int, fn string, ok bool) {\n\treturn withstack.GetOneLineSource(err)\n}\n\n// GetReportableStackTrace extracts a stack trace embedded in the\n// given error in the format suitable for Sentry reporting.\n//\n// This supports:\n// - errors generated by github.com/pkg/errors (either generated\n//   locally or after transfer through the network),\n// - errors generated with WithStack() in this package,\n// - any other error that implements a StackTrace() method\n//   returning a StackTrace from github.com/pkg/errors.\n//\n// Note: Sentry wants the oldest call frame first, so\n// the entries are reversed in the result.\nfunc GetReportableStackTrace(err error) *ReportableStackTrace {\n\treturn withstack.GetReportableStackTrace(err)\n}\n"
        }
      ]
    }
  ]
}