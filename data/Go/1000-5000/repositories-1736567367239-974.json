{
  "metadata": {
    "timestamp": 1736567367239,
    "page": 974,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rexray/rexray",
      "stars": 2173,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".docker",
          "type": "tree",
          "content": null
        },
        {
          "name": ".docs-themes",
          "type": "tree",
          "content": null
        },
        {
          "name": ".docs",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.17578125,
          "content": "/dep\n/.dep/\n/rexray.linux\n/rexray.darwin\n/glide\n.gist/\nmd5sum.txt\nuname.txt\nfiles.txt\n/core/semver/semver\nsemver.mk\nsemver.env\n.pkg/\n/rexray-*\n.glide.yaml.tmp\n.ls.tar.gz\n.Dockerfile.tmp\n/sio-alpine.sh\n*.*-e\n.*-e\n*-e\n/rexray\n/rexray-client\n/rexray-agent\n/rexray-controller\n*.a\n*.d\n*.out\n*.tar.gz\n*.tgz\n*.rpm\n*.deb\nbintray-*.json\n.site/\nsite/\n.vagrant/\n.site/\nsite/\n.build/*/\n.build/*-filtered.json\n.project\ncore/core_generated.go\n/scripts/scripts/test.sh\n\n# Created by https://www.gitignore.io\n\n### Windows ###\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n\n### OSX ###\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n\n### Eclipse ###\n*.pydevproject\n.metadata\n.gradle\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.settings/\n.loadpath\n\n# Eclipse Core\n.project\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# JDT-specific (Eclipse Java Development Tools)\n.classpath\n\n# PDT-specific\n.buildpath\n\n# sbteclipse plugin\n.target\n\n# TeXlipse plugin\n.texlipse\n\n\n### Go ###\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n\n### SublimeText ###\n# cache files for sublime text\n*.tmlanguage.cache\n*.tmPreferences.cache\n*.stTheme.cache\n\n# workspace files are user-specific\n*.sublime-workspace\n\n# project files should be checked into the repository, unless a significant\n# proportion of contributors will probably not be using SublimeText\n# *.sublime-project\n\n# sftp configuration file\nsftp-config.json\n\n\n### VisualStudio ###\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studo 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n*.[Cc]ache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\nbower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n\n### Maven ###\ntarget/\npom.xml.tag\npom.xml.releaseBackup\npom.xml.versionsBackup\npom.xml.next\nrelease.properties\ndependency-reduced-pom.xml\nbuildNumber.properties\n\n\n### Java ###\n*.class\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.ear\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n\n### Intellij ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm\n\n*.iml\n\n## Directory-based project format:\n.idea/\n# if you remove the above rule, at least ignore the following:\n\n# User-specific stuff:\n# .idea/workspace.xml\n# .idea/tasks.xml\n# .idea/dictionaries\n\n# Sensitive or high-churn files:\n# .idea/dataSources.ids\n# .idea/dataSources.xml\n# .idea/sqlDataSources.xml\n# .idea/dynamic.xml\n# .idea/uiDesigner.xml\n\n# Gradle:\n# .idea/gradle.xml\n# .idea/libraries\n\n# Mongo Explorer plugin:\n# .idea/mongoSettings.xml\n\n## File-based project format:\n*.ipr\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\n/out/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\n"
        },
        {
          "name": ".hound.yml",
          "type": "blob",
          "size": 0.0439453125,
          "content": "go:\n  enabled: true\nfail_on_violations: true\n"
        },
        {
          "name": ".puml",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 6.66796875,
          "content": "os:   linux\ndist: trusty\n\nenv:\n  global:\n    - PROG=rexray\n\njobs:\n  include:\n\n    # the first stage builds all of the binaries possible, searching\n    # for any build errors that could possibly occur. this prevents\n    # the subsequent stages from wasting time enqueued for available vms\n    - &build-stage\n      stage:          build\n      language:       go\n      go:             1.9.1\n      go_import_path: github.com/rexray/rexray\n      env:            PROG=rexray\n      before_script:\n        - git fetch --unshallow --tags\n      script:\n        - export GOARCH=${XGOARCH:-amd64}\n        - make\n        - md5sum $PROG\n        - ls -al $PROG\n        - if [ \"$GOARCH\" = \"amd64\" ]; then ./$PROG version; else file $PROG; fi\n\n    - <<: *build-stage\n      env: PROG=rexray XGOARCH=arm\n    - <<: *build-stage\n      env: PROG=rexray XGOARCH=arm64\n\n    - <<: *build-stage\n      env: PROG=rexray-agent       TYPE=agent\n    - <<: *build-stage\n      env: PROG=rexray-controller  TYPE=controller\n\n    - <<: *build-stage\n      env: DRIVER=azureud\n    - <<: *build-stage\n      env: DRIVER=cinder\n    - <<: *build-stage\n      env: DRIVER=csi-nfs\n    - <<: *build-stage\n      env: DRIVER=dobs\n    - <<: *build-stage\n      env: DRIVER=ebs\n    - <<: *build-stage\n      env: DRIVER=efs\n    - <<: *build-stage\n      env: DRIVER=gcepd\n    - <<: *build-stage\n      env: DRIVER=isilon\n    - <<: *build-stage\n      env: DRIVER=rbd\n    - <<: *build-stage\n      env: DRIVER=s3fs\n    - <<: *build-stage\n      env: DRIVER=scaleio\n\n    # the second stage builds all of the tests, executes the framework\n    # tests using the vfs driver, and uploads the resulting coverage\n    # results to codecov.io\n    - stage:          test\n      language:       go\n      go:             1.9.1\n      go_import_path: github.com/rexray/rexray\n      before_script:\n        - git fetch --unshallow --tags\n        - go run core/semver/semver.go -f json\n      script:\n        - make test\n        - make cover\n\n    # the third stage is responsible for producing the rexray stand-alone,\n    # agent, client, and controller binaries as well as packaging the\n    # binaries and uploading them to bintray\n    - &deploy-stage\n      stage:          deploy\n      language:       c\n      env:            PROG=rexray\n      services:       docker\n      sudo:           required\n      before_install:\n        - gem install gist\n        - sudo apt-get update\n        - sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce\n        - docker --version\n      install:\n        - sudo apt-get -y install rpm debhelper dpkg dpkg-dev fakeroot alien\n      before_script:\n        - git fetch --unshallow --tags\n      script:\n        - export GOARCH=${XGOARCH:-amd64}\n        - make\n        - md5sum $PROG\n        - ls -al $PROG\n        - if [ \"$GOARCH\" = \"amd64\" ]; then ./$PROG version; else file $PROG; fi\n        - make tgz\n        - if [ \"$GOARCH\" = \"amd64\" ]; then make rpm; fi\n        - if [ \"$GOARCH\" = \"amd64\" ]; then make deb; fi\n        - make bintray\n      after_success:\n        - make create-gist\n      after_failure:\n        - make create-gist\n      deploy:\n        - &deploy-to-bintray\n          provider:       bintray\n          file:           bintray-unstable.json\n          user:           $BINTRAY_USER\n          key:            $BINTRAY_KEY\n          skip_cleanup:   true\n          on:\n            all_branches: true\n            condition:    $DEPLOY_BINTRAY != 0 && $TRAVIS_TAG =~ ^$ && ($TRAVIS_REPO_SLUG = 'rexray/rexray' || $IGNORE_REPO_SLUG_CONDITION = true) && ($TRAVIS_BRANCH = master || $IGNORE_BRANCH_CONDITION = true)\n        - <<: *deploy-to-bintray\n          file:           bintray-staged.json\n          on:\n            all_branches: true\n            condition:    $DEPLOY_BINTRAY != 0 && $TRAVIS_TAG =~ -rc[[:digit:]]+$ && ($TRAVIS_REPO_SLUG = 'rexray/rexray' || $IGNORE_REPO_SLUG_CONDITION = true)\n        - <<: *deploy-to-bintray\n          file:           bintray-stable.json\n          on:\n            all_branches: true\n            condition:    $DEPLOY_BINTRAY != 0 && $TRAVIS_TAG =~ ^v?[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]$ && ($TRAVIS_REPO_SLUG = 'rexray/rexray' || $IGNORE_REPO_SLUG_CONDITION = true)\n\n    - <<: *deploy-stage\n      env: PROG=rexray XGOARCH=arm\n    - <<: *deploy-stage\n      env: PROG=rexray XGOARCH=arm64\n\n    - <<: *deploy-stage\n      env: PROG=rexray-agent      TYPE=agent\n    - <<: *deploy-stage\n      env: PROG=rexray-client     TYPE=client\n    - <<: *deploy-stage\n      env: PROG=rexray-controller TYPE=controller\n\n    # the final stage is responsible for building the docker managed\n    # storage plug-ins using driver-specific versions of the stand-alone\n    # rex-ray binaries\n    - &docker-stage\n      stage:          docker\n      language:       c\n      env:            DRIVER=azureud\n      services:       docker\n      sudo:           required\n      before_install:\n        - gem install gist\n        - sudo apt-get update\n        - sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce\n        - docker --version\n      before_script:\n        - git fetch --unshallow --tags\n      script:\n        - make\n        - md5sum $PROG\n        - ls -al $PROG\n        - ./$PROG version\n        - make build-docker-plugin\n      after_success:\n        - make create-gist\n      after_failure:\n        - make create-gist\n      deploy:\n        - &deploy-docker\n          provider: script\n          script: ./make.sh push-docker-plugin unstable\n          skip_cleanup: true\n          on:\n            all_branches: true\n            condition: $DEPLOY_DOCKER != 0 && $TRAVIS_TAG =~ ^$ && ($TRAVIS_REPO_SLUG = 'rexray/rexray' || $IGNORE_REPO_SLUG_CONDITION = true) && ($TRAVIS_BRANCH = master || $IGNORE_BRANCH_CONDITION = true)\n\n        - <<: *deploy-docker\n          script: ./make.sh push-docker-plugin staged\n          on:\n            all_branches: true\n            condition: $DEPLOY_DOCKER != 0 && $TRAVIS_TAG =~ -rc[[:digit:]]+$ && ($TRAVIS_REPO_SLUG = 'rexray/rexray' || $IGNORE_REPO_SLUG_CONDITION = true)\n\n        - <<: *deploy-docker\n          script: ./make.sh push-docker-plugin stable\n          on:\n            all_branches: true\n            condition: $DEPLOY_DOCKER != 0 && $TRAVIS_TAG =~ ^v?[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]$ && ($TRAVIS_REPO_SLUG = 'rexray/rexray' || $IGNORE_REPO_SLUG_CONDITION = true)\n\n    - <<: *docker-stage\n      env: DRIVER=cinder\n    - <<: *docker-stage\n      env: DRIVER=csi-nfs\n    - <<: *docker-stage\n      env: DRIVER=dobs\n    - <<: *docker-stage\n      env: DRIVER=ebs\n    - <<: *docker-stage\n      env: DRIVER=efs\n    - <<: *docker-stage\n      env: DRIVER=gcepd\n    - <<: *docker-stage\n      env: DRIVER=isilon\n    - <<: *docker-stage\n      env: DRIVER=rbd\n    - <<: *docker-stage\n      env: DRIVER=s3fs\n    - <<: *docker-stage\n      env: DRIVER=scaleio\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 0.197265625,
          "content": "# REX-Ray Maintainers\n\n* [Andrew Kutz, @akutz](https://github.com/akutz)\n* [Clinton Kitson, @clintkitson](https://github.com/clintkitson)\n* [Travis Rhoden, @codenrhoden](https://github.com/codenrhoden)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.7138671875,
          "content": "# Contributing to REX-Ray\nThe REX-Ray project welcomes, and depends, on contributions from developers and\nusers in the open source community. Contributions can be made in a number of\nways, a few examples are:\n\n- Code patches via pull requests\n- Documentation improvements\n- Bug reports and patch reviews\n- OS, Storage, and Volume Drivers\n- A distributed server/client model with profile support\n\n## Reporting an Issue\nPlease include as much detail as you can. This includes:\n\n  * The OS type and version\n  * The REX-Ray version\n  * The storage system in question\n  * A set of logs with debug-logging enabled that show the problem\n\n## Testing the Development Version\nIf you want to just install and try out the latest development version of\nREX-Ray you can do so with the following command. This can be useful if you\nwant to provide feedback for a new feature or want to confirm if a bug you\nhave encountered is fixed in the git master. It is **strongly** recommended\nthat you do this within a virtual environment.\n\n```bash\ngo get github.com/rexray/rexray\n```\n\n## Installing for Development\nFirst you'll need to fork and clone the repository. Once you have a local\ncopy, run the following command.\n\n```bash\ngo get github.com/rexray/rexray\n```\n\nThis will install REX-Ray into your `GOPATH` and you'll be able to make changes\nlocally, test them, and commit ideas and fixes back to your fork of the\nrepository.\n\n## Running the tests\nTo run the tests, run the following commands:\n\n```bash\nmake test\n```\n\n## Submitting Pull Requests\nOnce you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.\n"
        },
        {
          "name": "Gopkg.lock",
          "type": "blob",
          "size": 14.45703125,
          "content": "# This file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.\n\n\n[[projects]]\n  name = \"cloud.google.com/go\"\n  packages = [\"compute/metadata\"]\n  revision = \"0f0b8420cb699ac4ce059c63bac263f4301fe95b\"\n  version = \"v0.12.0\"\n\n[[projects]]\n  name = \"github.com/Azure/azure-sdk-for-go\"\n  packages = [\n    \"arm/compute\",\n    \"storage\"\n  ]\n  revision = \"0984e0641ae43b89283223034574d6465be93bf4\"\n  version = \"v7.0.1-beta\"\n\n[[projects]]\n  name = \"github.com/Azure/go-autorest\"\n  packages = [\n    \"autorest\",\n    \"autorest/azure\",\n    \"autorest/date\",\n    \"autorest/to\",\n    \"autorest/validation\"\n  ]\n  revision = \"92e199ed6a4b8b81c5d7536915af3616c2cd9fff\"\n  version = \"v7.2.5\"\n\n[[projects]]\n  name = \"github.com/Microsoft/go-winio\"\n  packages = [\".\"]\n  revision = \"78439966b38d69bf38227fbf57ac8a6fee70f69a\"\n  version = \"v0.4.5\"\n\n[[projects]]\n  name = \"github.com/SermoDigital/jose\"\n  packages = [\n    \".\",\n    \"crypto\",\n    \"jws\",\n    \"jwt\"\n  ]\n  revision = \"f6df55f235c24f236d11dbcf665249a59ac2021f\"\n  version = \"1.1\"\n\n[[projects]]\n  name = \"github.com/akutz/gofig\"\n  packages = [\n    \".\",\n    \"types\"\n  ]\n  revision = \"624e27bb99f9093d70f57d61ad4c472d09aacb18\"\n  version = \"v0.1.9\"\n\n[[projects]]\n  name = \"github.com/akutz/golf\"\n  packages = [\n    \".\",\n    \"logrus\"\n  ]\n  revision = \"8b7106fd98bcc77f397917bcc8944229e9e4ec66\"\n  version = \"v0.1.3\"\n\n[[projects]]\n  name = \"github.com/akutz/goof\"\n  packages = [\".\"]\n  revision = \"2321ba37c3513692d6f799d91fa66f28d11c7d7a\"\n  version = \"v0.1.2\"\n\n[[projects]]\n  name = \"github.com/akutz/gotil\"\n  packages = [\".\"]\n  revision = \"6fa2e80bd3ac40f15788cfc3d12ebba49a0add92\"\n  version = \"v0.1.0\"\n\n[[projects]]\n  name = \"github.com/akutz/gournal\"\n  packages = [\n    \".\",\n    \"logrus\"\n  ]\n  revision = \"f6e56fa29076290418175a5105fd0223c66ad1bc\"\n  version = \"v0.5.0\"\n\n[[projects]]\n  name = \"github.com/appropriate/go-virtualboxclient\"\n  packages = [\n    \"vboxwebsrv\",\n    \"virtualboxclient\"\n  ]\n  revision = \"e0978ab2ed407095400a69d5933958dd260058cd\"\n  source = \"https://github.com/clintonskitson/go-virtualboxclient\"\n\n[[projects]]\n  name = \"github.com/asaskevich/govalidator\"\n  packages = [\".\"]\n  revision = \"4918b99a7cb949bb295f3c7bbaf24b577d806e35\"\n  version = \"v6\"\n\n[[projects]]\n  name = \"github.com/aws/aws-sdk-go\"\n  packages = [\n    \"aws\",\n    \"aws/awserr\",\n    \"aws/awsutil\",\n    \"aws/client\",\n    \"aws/client/metadata\",\n    \"aws/corehandlers\",\n    \"aws/credentials\",\n    \"aws/credentials/ec2rolecreds\",\n    \"aws/credentials/endpointcreds\",\n    \"aws/credentials/stscreds\",\n    \"aws/defaults\",\n    \"aws/ec2metadata\",\n    \"aws/endpoints\",\n    \"aws/request\",\n    \"aws/session\",\n    \"aws/signer/v4\",\n    \"internal/shareddefaults\",\n    \"private/protocol\",\n    \"private/protocol/ec2query\",\n    \"private/protocol/json/jsonutil\",\n    \"private/protocol/jsonrpc\",\n    \"private/protocol/query\",\n    \"private/protocol/query/queryutil\",\n    \"private/protocol/rest\",\n    \"private/protocol/restjson\",\n    \"private/protocol/restxml\",\n    \"private/protocol/xml/xmlutil\",\n    \"service/ec2\",\n    \"service/efs\",\n    \"service/s3\",\n    \"service/sts\"\n  ]\n  revision = \"25ef42b41b82230caae56ab23d872c81fb5c0eae\"\n  version = \"v1.12.46\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/cesanta/ucl\"\n  packages = [\".\"]\n  revision = \"97c016fce90e6af1b14558563ac46852167e6a76\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/cesanta/validate-json\"\n  packages = [\"schema\"]\n  revision = \"2f16017c76fc2403d143e93cea1e1b9526a01148\"\n\n[[projects]]\n  name = \"github.com/coreos/go-systemd\"\n  packages = [\"activation\"]\n  revision = \"d2196463941895ee908e13531a23a39feb9e1243\"\n  version = \"v15\"\n\n[[projects]]\n  name = \"github.com/davecgh/go-spew\"\n  packages = [\"spew\"]\n  revision = \"346938d642f2ec3594ed81d874461961cd0faa76\"\n  version = \"v1.1.0\"\n\n[[projects]]\n  name = \"github.com/dgrijalva/jwt-go\"\n  packages = [\".\"]\n  revision = \"d2709f9f1f31ebcda9651b03077758c1f3a0018c\"\n  version = \"v3.0.0\"\n\n[[projects]]\n  name = \"github.com/digitalocean/godo\"\n  packages = [\".\"]\n  revision = \"970b46ffe46bacda668dd58a8a1aba9d775b8895\"\n  version = \"v1.2.0\"\n\n[[projects]]\n  name = \"github.com/docker/go-connections\"\n  packages = [\"sockets\"]\n  revision = \"3ede32e2033de7505e6500d6c868c2b9ed9f169d\"\n  version = \"v0.3.0\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/docker/go-plugins-helpers\"\n  packages = [\n    \"sdk\",\n    \"volume\"\n  ]\n  revision = \"a9ef19c479cb60e751efa55f7f2b265776af1abf\"\n\n[[projects]]\n  name = \"github.com/fsnotify/fsnotify\"\n  packages = [\".\"]\n  revision = \"629574ca2a5df945712d3079857300b5e4da0236\"\n  version = \"v1.4.2\"\n\n[[projects]]\n  name = \"github.com/go-ini/ini\"\n  packages = [\".\"]\n  revision = \"20b96f641a5ea98f2f8619ff4f3e061cff4833bd\"\n  version = \"v1.28.2\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/golang/protobuf\"\n  packages = [\n    \"proto\",\n    \"ptypes\",\n    \"ptypes/any\",\n    \"ptypes/duration\",\n    \"ptypes/timestamp\"\n  ]\n  revision = \"17ce1425424ab154092bbb43af630bd647f3bb0d\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/google/go-querystring\"\n  packages = [\"query\"]\n  revision = \"53e6ce116135b80d037921a7fdd5138cf32d7a8a\"\n\n[[projects]]\n  name = \"github.com/gophercloud/gophercloud\"\n  packages = [\n    \".\",\n    \"openstack\",\n    \"openstack/blockstorage/extensions/volumeactions\",\n    \"openstack/blockstorage/v1/snapshots\",\n    \"openstack/blockstorage/v1/volumes\",\n    \"openstack/blockstorage/v2/volumes\",\n    \"openstack/compute/v2/extensions/volumeattach\",\n    \"openstack/identity/v2/tenants\",\n    \"openstack/identity/v2/tokens\",\n    \"openstack/identity/v3/extensions/trusts\",\n    \"openstack/identity/v3/tokens\",\n    \"openstack/utils\",\n    \"pagination\"\n  ]\n  revision = \"b4c2377fa77951a0e08163f52dc9b3e206355194\"\n\n[[projects]]\n  name = \"github.com/gorilla/context\"\n  packages = [\".\"]\n  revision = \"1ea25387ff6f684839d82767c1733ff4d4d15d0a\"\n  version = \"v1.1\"\n\n[[projects]]\n  name = \"github.com/gorilla/mux\"\n  packages = [\".\"]\n  revision = \"bcd8bc72b08df0f70df986b97f95590779502d31\"\n  version = \"v1.4.0\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/hashicorp/hcl\"\n  packages = [\n    \".\",\n    \"hcl/ast\",\n    \"hcl/parser\",\n    \"hcl/scanner\",\n    \"hcl/strconv\",\n    \"hcl/token\",\n    \"json/parser\",\n    \"json/scanner\",\n    \"json/token\"\n  ]\n  revision = \"8f6b1344a92ff8877cf24a5de9177bf7d0a2a187\"\n\n[[projects]]\n  name = \"github.com/inconshreveable/mousetrap\"\n  packages = [\".\"]\n  revision = \"76626ae9c91c4f2a10f34cad8ce83ea42c93bb75\"\n  version = \"v1.0\"\n\n[[projects]]\n  name = \"github.com/jmespath/go-jmespath\"\n  packages = [\".\"]\n  revision = \"0b12d6b5\"\n\n[[projects]]\n  name = \"github.com/jteeuwen/go-bindata\"\n  packages = [\".\"]\n  revision = \"1dd44b25b79c4d9060e582e90798e4d72537818c\"\n  source = \"https://github.com/akutz/go-bindata\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/kardianos/osext\"\n  packages = [\".\"]\n  revision = \"ae77be60afb1dcacde03767a8c37337fad28ac14\"\n\n[[projects]]\n  name = \"github.com/magiconair/properties\"\n  packages = [\".\"]\n  revision = \"be5ece7dd465ab0765a9682137865547526d1dfb\"\n  version = \"v1.7.3\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/mitchellh/mapstructure\"\n  packages = [\".\"]\n  revision = \"d0303fe809921458f417bcf828397a65db30a7e4\"\n\n[[projects]]\n  name = \"github.com/onsi/ginkgo\"\n  packages = [\n    \".\",\n    \"config\",\n    \"internal/codelocation\",\n    \"internal/containernode\",\n    \"internal/failer\",\n    \"internal/leafnodes\",\n    \"internal/remote\",\n    \"internal/spec\",\n    \"internal/spec_iterator\",\n    \"internal/specrunner\",\n    \"internal/suite\",\n    \"internal/testingtproxy\",\n    \"internal/writer\",\n    \"reporters\",\n    \"reporters/stenographer\",\n    \"reporters/stenographer/support/go-colorable\",\n    \"reporters/stenographer/support/go-isatty\",\n    \"types\"\n  ]\n  revision = \"9eda700730cba42af70d53180f9dcce9266bc2bc\"\n  version = \"v1.4.0\"\n\n[[projects]]\n  name = \"github.com/onsi/gomega\"\n  packages = [\n    \".\",\n    \"format\",\n    \"internal/assertion\",\n    \"internal/asyncassertion\",\n    \"internal/oraclematcher\",\n    \"internal/testingtsupport\",\n    \"matchers\",\n    \"matchers/support/goraph/bipartitegraph\",\n    \"matchers/support/goraph/edge\",\n    \"matchers/support/goraph/node\",\n    \"matchers/support/goraph/util\",\n    \"types\"\n  ]\n  revision = \"c893efa28eb45626cdaa76c9f653b62488858837\"\n  version = \"v1.2.0\"\n\n[[projects]]\n  name = \"github.com/pelletier/go-buffruneio\"\n  packages = [\".\"]\n  revision = \"c37440a7cf42ac63b919c752ca73a85067e05992\"\n  version = \"v0.2.0\"\n\n[[projects]]\n  name = \"github.com/pelletier/go-toml\"\n  packages = [\".\"]\n  revision = \"5ccdfb18c776b740aecaf085c4d9a2779199c279\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  name = \"github.com/pmezard/go-difflib\"\n  packages = [\"difflib\"]\n  revision = \"792786c7400a136282c1664665ae0a8db921c6c2\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  name = \"github.com/rubiojr/go-vhd\"\n  packages = [\"vhd\"]\n  revision = \"96a0db67ea8209453cfa694bdf03de202d6dd8f8\"\n  source = \"https://github.com/codenrhoden/go-vhd\"\n\n[[projects]]\n  name = \"github.com/sirupsen/logrus\"\n  packages = [\".\"]\n  revision = \"d842de504ca841f97533764c59d3166afd70ddb9\"\n  source = \"https://github.com/akutz/logrus\"\n\n[[projects]]\n  name = \"github.com/soheilhy/cmux\"\n  packages = [\".\"]\n  revision = \"bb79a83465015a27a175925ebd155e660f55e9f1\"\n  version = \"v0.1.3\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/spf13/afero\"\n  packages = [\n    \".\",\n    \"mem\"\n  ]\n  revision = \"ee1bd8ee15a1306d1f9201acc41ef39cd9f99a1b\"\n\n[[projects]]\n  name = \"github.com/spf13/cast\"\n  packages = [\".\"]\n  revision = \"acbeb36b902d72a7a4c18e8f3241075e7ab763e4\"\n  version = \"v1.1.0\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/spf13/cobra\"\n  packages = [\".\"]\n  revision = \"b78744579491c1ceeaaa3b40205e56b0591b93a3\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/spf13/jwalterweatherman\"\n  packages = [\".\"]\n  revision = \"12bd96e66386c1960ab0f74ced1362f66f552f7b\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/spf13/pflag\"\n  packages = [\".\"]\n  revision = \"7aff26db30c1be810f9de5038ec5ef96ac41fd7c\"\n\n[[projects]]\n  name = \"github.com/spf13/viper\"\n  packages = [\".\"]\n  revision = \"25b30aa063fc18e48662b86996252eabdcf2f0c7\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/stretchr/testify\"\n  packages = [\"assert\"]\n  revision = \"890a5c3458b43e6104ff5da8dfa139d013d77544\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/tent/http-link-go\"\n  packages = [\".\"]\n  revision = \"ac974c61c2f990f4115b119354b5e0b47550e888\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/thecodeteam/csi-blockdevices\"\n  packages = [\n    \"block\",\n    \"provider\",\n    \"services\"\n  ]\n  revision = \"70757e2170eb0919d1771ca06ee20fd1dcf3a367\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/thecodeteam/csi-nfs\"\n  packages = [\n    \"nfs\",\n    \"provider\",\n    \"services\"\n  ]\n  revision = \"d2e5dceda9b159f121112f6d4dbc49b196fe9d09\"\n\n[[projects]]\n  name = \"github.com/thecodeteam/csi-vfs\"\n  packages = [\n    \"provider\",\n    \"service\"\n  ]\n  revision = \"c26ae3536e8028f818f6a92dcef3567ed96d324e\"\n  version = \"v0.2.0\"\n\n[[projects]]\n  name = \"github.com/thecodeteam/gocsi\"\n  packages = [\n    \".\",\n    \"csi\",\n    \"mount\"\n  ]\n  revision = \"83f15105815b4bdc0d4f52796a458d2ce9e588fe\"\n\n[[projects]]\n  name = \"github.com/thecodeteam/goioc\"\n  packages = [\".\"]\n  revision = \"bcc5c533363c5bb3eb0651a1413889ec71822200\"\n  version = \"v0.2.0\"\n\n[[projects]]\n  name = \"github.com/thecodeteam/goisilon\"\n  packages = [\n    \".\",\n    \"api\",\n    \"api/json\",\n    \"api/v1\",\n    \"api/v2\"\n  ]\n  revision = \"6d93e6f106b7831c250f9984f3a18f8898034cd4\"\n  version = \"v1.7.0\"\n\n[[projects]]\n  branch = \"support/tls-sio-gw-2.0.0.2\"\n  name = \"github.com/thecodeteam/goscaleio\"\n  packages = [\n    \".\",\n    \"tls\",\n    \"types/v1\"\n  ]\n  revision = \"35ca2e98889acebca32ca3c8f0b434d88968070e\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/crypto\"\n  packages = [\n    \"pkcs12\",\n    \"pkcs12/internal/rc2\",\n    \"ssh/terminal\"\n  ]\n  revision = \"81e90905daefcd6fd217b62423c0908922eadb30\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/net\"\n  packages = [\n    \"context\",\n    \"context/ctxhttp\",\n    \"html\",\n    \"html/atom\",\n    \"html/charset\",\n    \"http2\",\n    \"http2/hpack\",\n    \"idna\",\n    \"internal/timeseries\",\n    \"lex/httplex\",\n    \"proxy\",\n    \"trace\"\n  ]\n  revision = \"66aacef3dd8a676686c7ae3716979581e8b03c47\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/oauth2\"\n  packages = [\n    \".\",\n    \"google\",\n    \"internal\",\n    \"jws\",\n    \"jwt\"\n  ]\n  revision = \"d89af98d7c6bba047c5a2622f36bc14b8766df85\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/sys\"\n  packages = [\n    \"unix\",\n    \"windows\"\n  ]\n  revision = \"9aade4d3a3b7e6d876cd3823ad20ec45fc035402\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/text\"\n  packages = [\n    \"encoding\",\n    \"encoding/charmap\",\n    \"encoding/htmlindex\",\n    \"encoding/internal\",\n    \"encoding/internal/identifier\",\n    \"encoding/japanese\",\n    \"encoding/korean\",\n    \"encoding/simplifiedchinese\",\n    \"encoding/traditionalchinese\",\n    \"encoding/unicode\",\n    \"internal/gen\",\n    \"internal/tag\",\n    \"internal/triegen\",\n    \"internal/ucd\",\n    \"internal/utf8internal\",\n    \"language\",\n    \"runes\",\n    \"secure/bidirule\",\n    \"transform\",\n    \"unicode/bidi\",\n    \"unicode/cldr\",\n    \"unicode/norm\",\n    \"unicode/rangetable\"\n  ]\n  revision = \"bd91bbf73e9a4a801adbfb97133c992678533126\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"google.golang.org/api\"\n  packages = [\n    \"compute/v0.beta\",\n    \"gensupport\",\n    \"googleapi\",\n    \"googleapi/internal/uritemplates\"\n  ]\n  revision = \"38eaa396bab4275c0aedee767d0d674ef2b50994\"\n\n[[projects]]\n  name = \"google.golang.org/appengine\"\n  packages = [\n    \".\",\n    \"internal\",\n    \"internal/app_identity\",\n    \"internal/base\",\n    \"internal/datastore\",\n    \"internal/log\",\n    \"internal/modules\",\n    \"internal/remote_api\",\n    \"internal/urlfetch\",\n    \"urlfetch\"\n  ]\n  revision = \"150dc57a1b433e64154302bdc40b6bb8aefa313a\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"google.golang.org/genproto\"\n  packages = [\"googleapis/rpc/status\"]\n  revision = \"595979c8a7bf586b2d293fb42246bf91a0b893d9\"\n\n[[projects]]\n  name = \"google.golang.org/grpc\"\n  packages = [\n    \".\",\n    \"codes\",\n    \"connectivity\",\n    \"credentials\",\n    \"grpclb/grpc_lb_v1/messages\",\n    \"grpclog\",\n    \"internal\",\n    \"keepalive\",\n    \"metadata\",\n    \"naming\",\n    \"peer\",\n    \"stats\",\n    \"status\",\n    \"tap\",\n    \"transport\"\n  ]\n  revision = \"f92cdcd7dcdc69e81b2d7b338479a19a8723cfa3\"\n  version = \"v1.6.0\"\n\n[[projects]]\n  name = \"gopkg.in/yaml.v2\"\n  packages = [\".\"]\n  revision = \"bc35f417f8a7664a73d46c9def2933417c03019f\"\n  source = \"https://github.com/akutz/yaml.git\"\n\n[solve-meta]\n  analyzer-name = \"dep\"\n  analyzer-version = 1\n  inputs-digest = \"318b3eaf6d9d27db67e0aa615ca36eec575bd1e8e691b9aafc39baba02f5ffcc\"\n  solver-name = \"gps-cdcl\"\n  solver-version = 1\n"
        },
        {
          "name": "Gopkg.toml",
          "type": "blob",
          "size": 4.6279296875,
          "content": "# Refer to https://github.com/golang/dep/blob/master/docs/Gopkg.toml.md\n# for detailed Gopkg.toml documentation.\n#\n# Refer to https://github.com/toml-lang/toml for detailed TOML docs.\n\nrequired = [\n  \"github.com/jteeuwen/go-bindata\",\n]\n\n################################################################################\n##                           Framework Dependencies                           ##\n################################################################################\n\n[[constraint]]\n  name = \"github.com/akutz/gofig\"\n  version = \"0.1.9\"\n\n[[constraint]]\n  name = \"github.com/akutz/golf\"\n  version = \"0.1.3\"\n\n[[constraint]]\n  name = \"github.com/akutz/goof\"\n  version = \"0.1.2\"\n\n[[constraint]]\n  name = \"github.com/akutz/gotil\"\n  version = \"0.1.0\"\n\n[[constraint]]\n  name = \"github.com/akutz/gournal\"\n  version = \"0.5.0\"\n\n[[constraint]]\n  name = \"github.com/SermoDigital/jose\"\n  version = \"1.1.0\"\n\n[[override]]\n  name = \"github.com/sirupsen/logrus\"\n  source = \"https://github.com/akutz/logrus\"\n  revision = \"d842de504ca841f97533764c59d3166afd70ddb9\"\n\n[[constraint]]\n  name = \"github.com/spf13/cobra\"\n  branch = \"master\"\n[[constraint]]\n  name = \"github.com/spf13/pflag\"\n  branch = \"master\"\n\n\n################################################################################\n##                              Golang/X                                      ##\n################################################################################\n\n[[constraint]]\n  name = \"golang.org/x/crypto\"\n  branch = \"master\"\n\n################################################################################\n##                              CSI Dependencies                              ##\n################################################################################\n\n[[override]]\n  name = \"github.com/thecodeteam/gocsi\"\n  revision = \"83f15105815b4bdc0d4f52796a458d2ce9e588fe\"\n\n[[constraint]]\n  name = \"github.com/thecodeteam/csi-blockdevices\"\n  branch = \"master\"\n\n[[constraint]]\n  name = \"github.com/thecodeteam/csi-nfs\"\n  branch = \"master\"\n\n[[constraint]]\n  name = \"github.com/thecodeteam/csi-vfs\"\n  version = \"0.2.0\"\n\n\n################################################################################\n##                         Storage Driver Dependencies                        ##\n################################################################################\n\n### Amazon\n[[constraint]]\n  name = \"github.com/aws/aws-sdk-go\"\n  version = \"1.10.34\"\n\n### Azure\n[[constraint]]\n  name = \"github.com/Azure/azure-sdk-for-go\"\n  version = \"~7.0.1-beta\"\n[[constraint]]\n  name = \"github.com/Azure/go-autorest\"\n  version = \"~7.2.2\"\n[[constraint]]\n  name = \"github.com/rubiojr/go-vhd\"\n  revision = \"96a0db67ea8209453cfa694bdf03de202d6dd8f8\"\n  source = \"https://github.com/codenrhoden/go-vhd\"\n\n### Cinder\n[[constraint]]\n  name = \"github.com/gophercloud/gophercloud\"\n  revision = \"b4c2377fa77951a0e08163f52dc9b3e206355194\"\n\n### DigitalOcean\n[[constraint]]\n  name = \"github.com/digitalocean/godo\"\n  version = \"1.2.0\"\n\n### GCE\n[[constraint]]\n  name = \"google.golang.org/api\"\n  branch = \"master\"\n\n### Isilon\n[[constraint]]\n  name = \"github.com/thecodeteam/goisilon\"\n  version = \"1.7.0\"\n\n### ScaleIO\n[[constraint]]\n  name = \"github.com/thecodeteam/goscaleio\"\n  branch = \"support/tls-sio-gw-2.0.0.2\"\n\n### VirtualBox\n[[constraint]]\n  name = \"github.com/appropriate/go-virtualboxclient\"\n  revision = \"e0978ab2ed407095400a69d5933958dd260058cd\"\n  source = \"https://github.com/clintonskitson/go-virtualboxclient\"\n\n\n################################################################################\n##                                  Tools                                     ##\n################################################################################\n\n[[constraint]]\n  name = \"github.com/jteeuwen/go-bindata\"\n  source = \"https://github.com/akutz/go-bindata\"\n  revision = \"1dd44b25b79c4d9060e582e90798e4d72537818c\"\n\n\n################################################################################\n##                                  Go-YAML                                   ##\n################################################################################\n\n[[constraint]]\n  name = \"gopkg.in/yaml.v2\"\n  source = \"https://github.com/akutz/yaml.git\"\n  revision = \"bc35f417f8a7664a73d46c9def2933417c03019f\"\n\n\n################################################################################\n##                                 Testing                                    ##\n################################################################################\n\n[[constraint]]\n  name = \"github.com/onsi/ginkgo\"\n  version = \"1.4.0\"\n\n[[constraint]]\n  name = \"github.com/onsi/gomega\"\n  version = \"1.2.0\"\n\n[[constraint]]\n  name = \"github.com/stretchr/testify\"\n  branch = \"master\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0595703125,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 15.49609375,
          "content": "export SHELL := $(shell env which bash)\n\n# if PROG is not defined then set it to rexray\nifeq (,$(strip $(PROG)))\nPROG := rexray\nendif\n\n# this makefile's default target is PROG\nall: $(PROG)\nbuild: $(PROG)\n\n# a flag indicating whether or not to use docker for the builds. if\n# set to 1 then docker will be used, otherwise go is used\nifeq (,$(strip $(DOCKER)))\nDOCKER := $(shell docker version > /dev/null 2>&1 && echo 1)\nendif\n\n# store the current directory\nPWD := $(shell pwd)\n\n# if GO_VERSION is not defined then parse it from the .travis.yml file\nifeq (,$(strip $(GO_VERSION)))\nGO_VERSION := $(shell grep \"go:\" .travis.yml | head -n 1 | awk '{print $$2}')\nendif\n\n# if GO_IMPORT_PATH is not defined then parse it from the .travis.yml file\nifeq (,$(strip $(GO_IMPORT_PATH)))\nGO_IMPORT_PATH := $(shell grep \"go_import_path:\" .travis.yml | head -n 1 | awk '{print $$2}')\nendif\n# the import path less the github.com/ at the front\nGO_IMPORT_PATH_SLUG := $(subst github.com/,,$(GO_IMPORT_PATH))\n\n\n################################################################################\n##                                BUILD                                       ##\n################################################################################\nifneq (,$(strip $(DRIVER)))\nBUILD_TAGS += $(subst -,,$(DRIVER))\nendif\n\nifneq (,$(strip $(TYPE)))\nBUILD_TAGS += $(TYPE)\nendif\n\nGOBUILD := build\nifneq (,$(strip $(BUILD_TAGS)))\nGOBUILD += -tags '$(BUILD_TAGS)'\nendif\n\n# if docker is avaialble then default to using it to build REX-Ray,\n# otherwise check to see if go is available. if neither are\n# available then print an error\n$(PROG):\nifeq (1,$(DOCKER))\n\tdocker run -it \\\n\t  -v \"$(PWD)\":\"/go/src/$(GO_IMPORT_PATH)\" golang:$(GO_VERSION) \\\n\t  bash -c \"cd \\\"src/$(GO_IMPORT_PATH)\\\" && \\\n\t  XGOOS=$(GOOS) XGOARCH=$(GOARCH) GOOS= GOARCH= go generate && \\\n\t  GOOS=$(GOOS) GOARCH=$(GOARCH) go $(GOBUILD) -o \\\"$(PROG)\\\"\"\nelse\n\tXGOOS=$(GOOS) XGOARCH=$(GOARCH) GOOS= GOARCH= go generate\n\tGOOS=$(GOOS) GOARCH=$(GOARCH) go $(GOBUILD) -o \"$(PROG)\"\nendif\n\nclean-build:\n\trm -f rexray rexray-client rexray-agent rexray-controller\nclean: clean-build\n\nbuild-all:\n\t$(MAKE) build\n\tPROG=$(PROG)-agent BUILD_TAGS=agent $(MAKE) build\n\tPROG=$(PROG)-client BUILD_TAGS=client $(MAKE) build\n\tPROG=$(PROG)-controller BUILD_TAGS=controller $(MAKE) build\n\n.PHONY: $(PROG) clean-build build-all\n\n\n################################################################################\n##                                SEMVER                                      ##\n################################################################################\n# the path to the semver.env file that all non-build targets use in\n# order to ensure that they have access to the version-related data\n# generated by `go generate`\nSEMVER_MK := semver.mk\n\nifneq (true,$(TRAVIS))\n$(SEMVER_MK): .git\nendif\n\n$(SEMVER_MK):\nifeq (1,$(DOCKER))\n\tdocker run -it \\\n\t  -v \"$(PWD)\":\"/go/src/$(GO_IMPORT_PATH)\" golang:$(GO_VERSION) \\\n\t  bash -c \"cd \\\"src/$(GO_IMPORT_PATH)\\\" && \\\n\t  XGOOS=$(GOOS) XGOARCH=$(GOARCH) GOOS= GOARCH= go run core/semver/semver.go -f mk -o $@\"\nelse\n\tXGOOS=$(GOOS) XGOARCH=$(GOARCH) GOOS= GOARCH= go run core/semver/semver.go -f mk -o $@\nendif\n\ninclude $(SEMVER_MK)\n\n\n################################################################################\n##                                TGZ                                         ##\n################################################################################\nTGZ := $(PROG)-$(OS)-$(ARCH)-$(SEMVER).tar.gz\ntgz: $(TGZ)\n$(TGZ): $(PROG)\n\ttar -czf $@ $<\nclean-tgz:\n\trm -fr $(TGZ)\nclean: clean-tgz\n.PHONY: clean-tgz\n\n\n################################################################################\n##                                RPM                                         ##\n################################################################################\nRPMDIR := .rpm\nRPM := $(PROG)-$(SEMVER_RPM)-1.$(ARCH).rpm\nrpm: $(RPM)\n$(RPM): $(PROG)\n\trm -fr $(RPMDIR)\n\tmkdir -p $(RPMDIR)/BUILD \\\n\t\t\t $(RPMDIR)/RPMS \\\n\t\t\t $(RPMDIR)/SRPMS \\\n\t\t\t $(RPMDIR)/SPECS \\\n\t\t\t $(RPMDIR)/SOURCES \\\n\t\t\t $(RPMDIR)/tmp\n\tcp rpm.spec $(RPMDIR)/SPECS/$(<F).spec\n\tcd $(RPMDIR) && \\\n\t\tsetarch $(ARCH) rpmbuild -ba \\\n\t\t\t-D \"rpmbuild $(abspath $(RPMDIR))\" \\\n\t\t\t-D \"v_semver $(SEMVER_RPM)\" \\\n\t\t\t-D \"v_arch $(ARCH)\" \\\n\t\t\t-D \"prog_name $(<F)\" \\\n\t\t\t-D \"prog_path $(abspath $<)\" \\\n\t\t\tSPECS/$(<F).spec\n\tmv $(RPMDIR)/RPMS/$(ARCH)/$(RPM) $@\nclean-rpm:\n\trm -fr $(RPM)\nclean: clean-rpm\n.PHONY: clean-rpm\n\n\n################################################################################\n##                                DEB                                         ##\n################################################################################\nDEB := $(PROG)_$(SEMVER_RPM)-1_$(GOARCH).deb\ndeb: $(DEB)\n$(DEB): $(RPM)\n\tfakeroot alien -k -c --bump=0 $<\nclean-deb:\n\trm -fr $(DEB)\nclean: clean-deb\n.PHONY: clean-deb\n\n\n################################################################################\n##                              BINTRAY                                      ##\n################################################################################\nBINTRAY_FILES := $(foreach r,unstable staged stable,bintray-$r.json)\nifeq (,$(strip $(BINTRAY_SUBJ)))\nBINTRAY_SUBJ := rexray\nendif\n\ndefine BINTRAY_GENERATED_JSON\n{\n   \"package\": {\n        \"name\":     \"$${REPO}\",\n        \"repo\":     \"rexray\",\n        \"subject\":  \"$(BINTRAY_SUBJ)\"\n    },\n    \"version\": {\n        \"name\":     \"$(SEMVER)\",\n        \"desc\":     \"$(SEMVER).Sha.$(SHA32)\",\n        \"released\": \"$(RELEASE_DATE)\",\n        \"vcs_tag\":  \"v$(SEMVER)\",\n        \"gpgSign\":  false\n    },\n    \"files\": [{\n        \"includePattern\": \"./($(PROG).*?\\.(?:gz|rpm|deb))\",\n        \"excludePattern\": \"./.*/.*\",\n        \"uploadPattern\":  \"$${REPO}/$(SEMVER)/$$1\"\n    }],\n    \"publish\": true\n}\nendef\nexport BINTRAY_GENERATED_JSON\n\nbintray: $(BINTRAY_FILES)\n$(BINTRAY_FILES): $(SEMVER_MK)\n\t@echo generating $@\n\t@echo \"$$BINTRAY_GENERATED_JSON\" | \\\n\tsed -e 's/$${REPO}/$(@F:bintray-%.json=%)/g' > $@\n\nclean-bintray:\n\trm -f $(BINTRAY_FILES)\nclean: clean-bintray\n\n.PHONY: clean-bintray\n\n\n################################################################################\n##                                   TEST                                     ##\n################################################################################\ntest:\n\t$(MAKE) -C libstorage test\n\n.PHONY: test\n\n\n################################################################################\n##                                  COVERAGE                                  ##\n################################################################################\nCOVERAGE_IMPORTS := github.com/onsi/gomega \\\n  github.com/onsi/ginkgo \\\n  golang.org/x/tools/cmd/cover\n\nCOVERAGE_IMPORTS_PATHS := $(addprefix $(GOPATH)/src/,$(COVERAGE_IMPORTS))\n\n$(COVERAGE_IMPORTS_PATHS):\n\tgo get $(subst $(GOPATH)/src/,,$@)\n\ncoverage.out:\n\tprintf \"mode: set\\n\" > coverage.out\n\tfor f in $$(find libstorage -name \"*.test.out\" -type f); do \\\n\t  grep -v \"mode :set\" $$f >> coverage.out; \\\n\tdone\n\ncover: coverage.out | $(COVERAGE_IMPORTS_PATHS)\n\tcurl -sSL https://codecov.io/bash | bash -s -- -f $<\n\n.PHONY: coverage.out cover\n\n\n################################################################################\n##                                  DOCKER                                    ##\n################################################################################\nEMPTY :=\nSPACE := $(EMPTY) $(EMPTY)\nSPACE6 := $(SPACE)$(SPACE)$(SPACE)$(SPACE)$(SPACE)$(SPACE)\nSPACE8 := $(SPACE6)$(SPACE)$(SPACE)\n\nDOCKER_SEMVER := $(subst +,-,$(SEMVER))\nDOCKER_DRIVER := $(DRIVER)\n\nifeq (undefined,$(origin DOCKER_PLUGIN_ROOT))\nDOCKER_PLUGIN_ROOT := $(PROG)\nendif\nDOCKER_PLUGIN_NAME := $(DOCKER_PLUGIN_ROOT)/$(DOCKER_DRIVER):$(DOCKER_SEMVER)\nDOCKER_PLUGIN_NAME_UNSTABLE := $(DOCKER_PLUGIN_ROOT)/$(DOCKER_DRIVER):edge\nDOCKER_PLUGIN_NAME_STAGED := $(DOCKER_PLUGIN_NAME)\nDOCKER_PLUGIN_NAME_STABLE := $(DOCKER_PLUGIN_ROOT)/$(DOCKER_DRIVER):latest\n\nDOCKER_PLUGIN_BUILD_PATH := .docker/plugins/$(DOCKER_DRIVER)\n\nDOCKER_PLUGIN_DOCKERFILE := $(DOCKER_PLUGIN_BUILD_PATH)/.Dockerfile\nifeq (,$(strip $(wildcard $(DOCKER_PLUGIN_DOCKERFILE))))\nDOCKER_PLUGIN_DOCKERFILE := .docker/plugins/Dockerfile\nendif\nDOCKER_PLUGIN_DOCKERFILE_TGT := $(DOCKER_PLUGIN_BUILD_PATH)/Dockerfile\n$(DOCKER_PLUGIN_DOCKERFILE_TGT): $(DOCKER_PLUGIN_DOCKERFILE)\n\tcp -f $? $@\n\nDOCKER_PLUGIN_ENTRYPOINT := $(DOCKER_PLUGIN_BUILD_PATH)/.rexray.sh\nifeq (,$(strip $(wildcard $(DOCKER_PLUGIN_ENTRYPOINT))))\nDOCKER_PLUGIN_ENTRYPOINT := .docker/plugins/rexray.sh\nendif\nDOCKER_PLUGIN_ENTRYPOINT_TGT := $(DOCKER_PLUGIN_BUILD_PATH)/$(PROG).sh\n$(DOCKER_PLUGIN_ENTRYPOINT_TGT): $(DOCKER_PLUGIN_ENTRYPOINT)\n\tcp -f $? $@\n\nDOCKER_PLUGIN_CONFIGFILE := $(DOCKER_PLUGIN_BUILD_PATH)/.rexray.yml\nDOCKER_PLUGIN_CONFIGFILE_TGT := $(DOCKER_PLUGIN_BUILD_PATH)/$(PROG).yml\nifeq (,$(strip $(wildcard $(DOCKER_PLUGIN_CONFIGFILE))))\nDOCKER_PLUGIN_CONFIGFILE := .docker/plugins/rexray.yml\n$(DOCKER_PLUGIN_CONFIGFILE_TGT): $(DOCKER_PLUGIN_CONFIGFILE)\n\tsed -e 's/$${DRIVER}/$(DRIVER)/g' $? > $@\nelse\n$(DOCKER_PLUGIN_CONFIGFILE_TGT): $(DOCKER_PLUGIN_CONFIGFILE)\n\tcp -f $? $@\nendif\n\nDOCKER_PLUGIN_REXRAYFILE := $(PROG)\nDOCKER_PLUGIN_REXRAYFILE_TGT := $(DOCKER_PLUGIN_BUILD_PATH)/$(PROG)\n$(DOCKER_PLUGIN_REXRAYFILE_TGT): $(DOCKER_PLUGIN_REXRAYFILE)\n\tcp -f $? $@\n\nDOCKER_PLUGIN_CONFIGJSON_TGT := $(DOCKER_PLUGIN_BUILD_PATH)/config.json\n\nDOCKER_PLUGIN_ENTRYPOINT_ROOTFS_TGT := $(DOCKER_PLUGIN_BUILD_PATH)/rootfs/$(PROG).sh\ndocker-build-plugin: build-docker-plugin\nbuild-docker-plugin: $(DOCKER_PLUGIN_ENTRYPOINT_ROOTFS_TGT)\n$(DOCKER_PLUGIN_ENTRYPOINT_ROOTFS_TGT): $(DOCKER_PLUGIN_CONFIGJSON_TGT) \\\n\t\t\t\t\t\t\t\t\t\t$(DOCKER_PLUGIN_DOCKERFILE_TGT) \\\n\t\t\t\t\t\t\t\t\t\t$(DOCKER_PLUGIN_ENTRYPOINT_TGT) \\\n\t\t\t\t\t\t\t\t\t\t$(DOCKER_PLUGIN_CONFIGFILE_TGT) \\\n\t\t\t\t\t\t\t\t\t\t$(DOCKER_PLUGIN_REXRAYFILE_TGT)\n\tdocker plugin rm $(DOCKER_PLUGIN_NAME) 2> /dev/null || true\n\tsudo rm -fr $(@D)\n\tdocker build \\\n\t  --label `driver=\"$(DRIVER)\"` \\\n\t  --label `semver=\"$(SEMVER)\"` \\\n\t  -t rootfsimage $(<D) && \\\n\t  id=$$(docker create rootfsimage true) && \\\n\t  sudo mkdir -p $(@D) && \\\n\t  sudo docker export \"$$id\" | sudo tar -x -C $(@D) && \\\n\t  docker rm -vf \"$$id\" && \\\n\t  docker rmi rootfsimage\n\tsudo docker plugin create $(DOCKER_PLUGIN_NAME) $(<D)\n\tdocker plugin ls\n\npush-docker-plugin:\nifeq (1,$(DOCKER_PLUGIN_$(DOCKER_DRIVER)_NOPUSH))\n\techo \"docker plugin push disabled\"\nelse\n\t@docker login -u $(DOCKER_USER) -p $(DOCKER_PASS)\nifeq (unstable,$(DOCKER_PLUGIN_TYPE))\n\tsudo docker plugin create $(DOCKER_PLUGIN_NAME_UNSTABLE) $(DOCKER_PLUGIN_BUILD_PATH)\n\tdocker plugin push $(DOCKER_PLUGIN_NAME_UNSTABLE)\nendif\nifeq (staged,$(DOCKER_PLUGIN_TYPE))\n\tdocker plugin push $(DOCKER_PLUGIN_NAME_STAGED)\nendif\nifeq (stable,$(DOCKER_PLUGIN_TYPE))\n\tdocker plugin push $(DOCKER_PLUGIN_NAME)\n\tsudo docker plugin create $(DOCKER_PLUGIN_NAME_UNSTABLE) $(DOCKER_PLUGIN_BUILD_PATH)\n\tdocker plugin push $(DOCKER_PLUGIN_NAME_UNSTABLE)\n\tsudo docker plugin create $(DOCKER_PLUGIN_NAME_STABLE) $(DOCKER_PLUGIN_BUILD_PATH)\n\tdocker plugin push $(DOCKER_PLUGIN_NAME_STABLE)\nendif\nifeq (,$(DOCKER_PLUGIN_TYPE))\n\tdocker plugin push $(DOCKER_PLUGIN_NAME)\nendif\nendif\n\n.PHONY: docker-build-plugin build-docker-plugin push-docker-plugin\n\n\n################################################################################\n##                                   DEP                                      ##\n################################################################################\nDEP := ./dep\nDEP_VER ?= 0.3.0\nDEP_ZIP := dep-$$GOHOSTOS-$$GOHOSTARCH.zip\nDEP_URL := https://github.com/golang/dep/releases/download/v$(DEP_VER)/$$DEP_ZIP\n\n$(DEP):\n\tGOVERSION=$$(go version | awk '{print $$4}') && \\\n\tGOHOSTOS=$$(echo $$GOVERSION | awk -F/ '{print $$1}') && \\\n\tGOHOSTARCH=$$(echo $$GOVERSION | awk -F/ '{print $$2}') && \\\n\tDEP_ZIP=\"$(DEP_ZIP)\" && \\\n\tDEP_URL=\"$(DEP_URL)\" && \\\n\tmkdir -p .dep && \\\n\tcd .dep && \\\n\tcurl -sSLO $$DEP_URL && \\\n\tunzip \"$$DEP_ZIP\" && \\\n\tmv $(@F) ../ && \\\n\tcd ../ && \\\n\trm -fr .dep\nifneq (./dep,$(DEP))\ndep: $(DEP)\nendif\n\ndep-update: | $(DEP)\n\t$(DEP) ensure -v\n\ndep-install: | $(DEP)\n\t$(DEP) ensure -v -vendor-only\n\n.PHONY: dep-update dep-install\n\n################################################################################\n##                                   GIST                                     ##\n################################################################################\nTRAVIS_BUILD_URL := https://travis-ci.org/$(TRAVIS_REPO_SLUG)/builds/$(TRAVIS_BUILD_ID)\nTRAVIS_JOB_URL := https://travis-ci.org/$(TRAVIS_REPO_SLUG)/jobs/$(TRAVIS_JOB_ID)\nGIST_FILES := $(BINTRAY_FILES) semver.env\nifneq (,$(strip $(DRIVER)))\nGIST_DRIVER := .docker/plugins/$(DRIVER)\nifneq (,$(wildcard $(GIST_DRIVER)))\nGIST_FILES += $(shell find \"$(GIST_DRIVER)\" -d 1 -type f \\\n\t-not -name \"rexray\" \\\n\t-not -name \".gitignore\" \\\n\t-not -name \"README.md\")\nendif\nendif\n\nUNAME_TXT := uname.txt\n$(UNAME_TXT):\n\tuname -a > $@\nGIST_FILES += $(UNAME_TXT)\n\nFILES_TXT := files.txt\n$(FILES_TXT):\n\tls -al > $@\n.PHONY: $(FILES_TXT)\nGIST_FILES += $(FILES_TXT)\n\nMD5SUM_TXT := md5sum.txt\n$(MD5SUM_TXT): $(PROG)\n\tmd5sum $< > $@\nGIST_FILES += $(MD5SUM_TXT)\n\nDOCKER_OUT_DIR := /tmp/rexray\nDOCKER_GIT_DIR := /go/src/$(GO_IMPORT_PATH)\n\nifneq (,$(strip $(DRIVER)))\ndefine GIST_README_CONTENT_DRIVER\n\n| **Driver** | `$(DRIVER)` |\nendef\nendif\n\n# built from GO_IMPORT_PATH_SLUG\nifeq ($(GO_IMPORT_PATH_SLUG),$(TRAVIS_REPO_SLUG))\n# built from GO_IMPORT_PATH_SLUG AND pull request\nifneq (false,$(TRAVIS_PULL_REQUEST))\ndefine GIST_GIT_FETCH\n\n    git fetch origin +refs/pull/$(TRAVIS_PULL_REQUEST)/merge: &&\n    git fetch --tags origin &&\nendef\nelse\n# built from GO_IMPORT_PATH_SLUG and NOT pull request\ndefine GIST_GIT_FETCH\n\n    git fetch --tags origin &&\nendef\nendif\n# built from NOT GO_IMPORT_PATH_SLUG\nelse\n# built from NOT GO_IMPORT_PATH_SLUG AND pull request\nifneq (false,$(TRAVIS_PULL_REQUEST))\ndefine GIST_GIT_FETCH\n\n    git fetch origin +refs/pull/$(TRAVIS_PULL_REQUEST)/merge: &&\n    git remote add upstream https://$(GO_IMPORT_PATH) &&\n    git fetch --tags upstream &&\nendef\nelse\n# built from NOT GO_IMPORT_PATH_SLUG AND NOT pull request\ndefine GIST_GIT_FETCH\n\n    git remote add upstream https://$(GO_IMPORT_PATH) &&\n    git fetch --tags upstream &&\nendef\nendif\nendif\n\ndefine GIST_README_CONTENT\n# REX-Ray Build [$(TRAVIS_JOB_ID)]($(TRAVIS_JOB_URL))\nThis gist contains information about REX-Ray build\n[$(TRAVIS_BUILD_ID)]($(TRAVIS_BUILD_URL)), job\n[$(TRAVIS_JOB_ID)]($(TRAVIS_JOB_URL)).\n\n| Key | Value |\n|-----|-------|\n| **Binary** | `$(PROG)` |\n| **MD5Sum** | `$${MD5SUM}` |\n| **SemVer** | `$(SEMVER)` |$(GIST_README_CONTENT_DRIVER)\n\nA REX-Ray binary with a matching checksum can be created\nlocally using Docker:\n\n```\n$$ docker run -it \\\\\n  -v \"$$(pwd)\":\"$(DOCKER_OUT_DIR)\" \\\\\n  golang:$(GO_VERSION) \\\\\n  bash -c \"git clone https://github.com/$(TRAVIS_REPO_SLUG) \\\\\n      \\\"$(DOCKER_GIT_DIR)\\\" &&\n    cd \\\"$(DOCKER_GIT_DIR)\\\" && $(GIST_GIT_FETCH)\n    git checkout -b $(SHA7) $(SHA32) &&\n    XGOOS=$(GOOS) XGOARCH=$(GOARCH) GOOS= GOARCH= go generate &&\n    GOOS=$(GOOS) GOARCH=$(GOARCH) go $(GOBUILD) -o \\\"$(PROG)\\\" &&\n    cp -f \\\"$(PROG)\\\" \\\"$(DOCKER_OUT_DIR)\\\"\" && \\\\\n  md5sum \"$(PROG)\" && \\\\\n  ls -al \"$(PROG)\"\n```\nendef\nexport GIST_README_CONTENT\n\nGIST_README := .gist/README.md\n$(GIST_README): $(MD5SUM_TXT)\n\t@echo generating $@ && mkdir -p $(@D)\n\t@echo \"$$GIST_README_CONTENT\" | sed \\\n\t  -e 's/$${MD5SUM}/'\"$$(cat $< | awk '{print $$1}')\"'/g' \\\n\t  -e 's/\\\\\\\\/\\\\/g' \\\n\t  > $@\n.PHONY: $(GIST_README)\nGIST_FILES += $(GIST_README)\n\ncreate-gist: $(GIST_FILES)\n\t@echo create gist\n\t-gist -d \"$(TRAVIS_JOB_URL)\" $^\n.PHONY: create-gist\n\n\n################################################################################\n##                                   CLEAN                                    ##\n################################################################################\nclean:\n\n.PHONY: all clean\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4150390625,
          "content": "# REX-Ray [![GoDoc](https://godoc.org/github.com/rexray/rexray?status.svg)](http://godoc.org/github.com/rexray/rexray) [![Build Status](http://travis-ci.org/rexray/rexray.svg?branch=master)](https://travis-ci.org/rexray/rexray) [![Go Report Card](http://goreportcard.com/badge/rexray/rexray)](http://goreportcard.com/report/rexray/rexray) [![codecov.io](https://codecov.io/github/rexray/rexray/coverage.svg?branch=master)](https://codecov.io/github/rexray/rexray?branch=master) [ ![Download](http://api.bintray.com/packages/rexray/rexray/stable/images/download.svg) ](https://dl.bintray.com/rexray/rexray/stable/latest/)\n\n---\n\n![info](https://cdn.rawgit.com/akutz/741a53ec8cd1348753556e8bd4d2836a/raw/399cb9e5b39436d119d77a893dd991db0a7b6f9f/info-circle.svg \"info-circle\") **Note:** _All hosted `unstable` and `staged` binaries older than `0.11.2-rc1` have\nbeen pruned due to quota restrictions._\n\n---\n\nThe long-term goal of the REX-Ray project is to enable collaboration between\norganizations  focused on creating enterprise-grade storage plugins for the\nContainer Storage Interface (CSI). As a rapidly changing specification, CSI\nsupport within REX-Ray will be planned when CSI reaches version 1.0, currently\nprojected for a late 2018 release. In the interim, there remains active\nengagement with the project to support the community.\n\nREX-Ray provides a vendor agnostic storage orchestration engine.  The primary\ndesign goal is to provide persistent storage for `Docker`, `Kubernetes`, and `Mesos`.\n\nIt is additionally available as a Go package, CLI tool, and Linux service which\nenables it to be used for additional use cases.\n\n## Documentation [![Docs](https://readthedocs.org/projects/rexray/badge/?version=stable)](http://rexray.readthedocs.org/en/stable/)\nYou will find complete documentation for REX-Ray at [rexray.readthedocs.org](http://rexray.readthedocs.org/en/stable/), including\n[licensing](http://rexray.readthedocs.org/en/stable/about/license/) and\n[support](http://rexray.readthedocs.org/en/stable/#getting-help) information.\nDocumentation provided at RTD is based on the latest stable build.  The `/.docs`\ndirectory in this repo will refer to the latest or specific commit.\n\n## Architecture\nREX-Ray is available as a standalone process today and as a distributed\nmodel of client-server.  The `client` performs a level abstraction of local\nhost processes (request for volume attachment, discovery, format, and mounting\nof devices) while the `server` provides the necessary abstraction of the\ncontrol plane for multiple storage platforms/\n\n### Storage Provider Support\nThe following storage providers and platforms are supported by REX-Ray.\n\n| Provider              | Storage Platform  | <center>[Docker](https://docs.docker.com/engine/extend/plugins_volume/)</center> | <center>Containerized</center> |\n|-----------------------|----------------------|:---:|:---:|\n| Amazon EC2 | [EBS](.docs/user-guide/storage-providers/aws.md#aws-ebs) | ✓ | ✓ |\n| | [EFS](.docs/user-guide/storage-providers/aws.md#aws-efs) | ✓ | ✓ |\n| | [S3FS](.docs/user-guide/storage-providers/aws.md#aws-s3fs) | ✓ | ✓ |\n| Ceph | [RBD](.docs/user-guide/storage-providers/ceph.md#ceph-rbd) | ✓ | ✓ |\n| Dell EMC | [Isilon](.docs/user-guide/storage-providers/dellemc.md#dell-emc-isilon) | ✓ | ✓ |\n| | [ScaleIO](.docs/user-guide/storage-providers/dellemc.md#dell-emc-scaleio) | ✓ | ✓ |\n| DigitalOcean | [Block Storage](.docs/user-guide/storage-providers/digitalocean.md#do-block-storage) | ✓ | ✓ |\n| FittedCloud | [EBS Optimizer](.docs/user-guide/storage-providers/fittedcloud.md#ebs-optimizer) | ✓ | |\n| Google | [GCE Persistent Disk](.docs/user-guide/storage-providers/google.md#gce-persistent-disk) | ✓ | ✓ |\n| Microsoft | [Azure Unmanaged Disk](.docs/user-guide/storage-providers/microsoft.md#azure-ud) | ✓ | ✓ |\n| OpenStack | [Cinder](.docs/user-guide/storage-providers/openstack.md#cinder) | ✓ | ✓ |\n| VirtualBox | [Virtual Media](.docs/user-guide/storage-providers/virtualbox.md#virtualbox) | ✓ | |\n\n### Operating System Support\nThe following operating systems are supported by REX-Ray:\n\n| OS             | <center>Command Line</center> | <center>Service</center> |\n|---------------|:---:|:---:|\n| Ubuntu 12+     | ✓          | ✓ |\n| Debian 6+      | ✓          | ✓ |\n| RedHat         | ✓          | ✓ |\n| CentOS 6+      | ✓          | ✓ |\n| CoreOS         | ✓          | ✓ |\n| TinyLinux (boot2docker)| ✓  | ✓ |\n| OS X Yosemite+ | ✓          |  |\n| Windows        |            |  |\n\n## Installation\nThe following command will install the REX-Ray client-server tool.  If using\n`CentOS`, `Debian`, `RHEL`, or `Ubuntu` the necessary service manager is used\nto bootstrap the process on startup\n\n`curl -sSL https://rexray.io/install | sh -`\n\n## Runtime - CLI\nREX-Ray can be run as an interactive CLI to perform volume management\ncapabilities.\n\n```bash\n$ export REXRAY_SERVICE=ebs\n$ export EBS_ACCESSKEY=access_key\n$ export EBS_SECRETKEY=secret_key\n$ rexray volume ls\nID            Name  Status    Size\nvol-6ac6c7d6        attached  8\n```\n\n## Runtime - Service (Docker)\nAdditionally, it can be run as a service to support `Docker`, `Mesos`, and other\n platforms that can communicate through `HTTP/JSON`.\n\n```bash\n$ export REXRAY_SERVICE=ebs\n$ export EBS_ACCESSKEY=access_key\n$ export EBS_SECRETKEY=secret_key\n$ rexray service start\nStarting REX-Ray...SUCCESS!\n\n  The REX-Ray daemon is now running at PID XX. To\n  shutdown the daemon execute the following command:\n\n    sudo /usr/bin/rexray stop\n\n$ docker run -ti --volume-driver=rexray -v test:/test busybox\n$ df -h /test\n```\n\n## Runtime - Docker Plugin\nStarting with Docker 1.13, Docker now supports a new plugin architecture in\nwhich plugins can be installed as containers.\n\n```bash\n$ docker plugin install rexray/ebs EBS_ACCESSKEY=access_key EBS_SECRETKEY=secret_key\nPlugin \"rexray/ebs:latest\" is requesting the following privileges:\n - network: [host]\n - mount: [/dev]\n - allow-all-devices: [true]\n - capabilities: [CAP_SYS_ADMIN]\nDo you grant the above permissions? [y/N] y\nlatest: Pulling from rexray/ebs\n2ef3a0b3d192: Download complete\nDigest: sha256:86a3bf7fdab857c955d7ef3fb94c01e350e34ba0f7fd3d0bd485e45f1592e1c2\nStatus: Downloaded newer image for rexray/ebs:latest\nInstalled plugin rexray/ebs:latest\n\n$ docker plugin ls\nID                  NAME                   DESCRIPTION              ENABLED\n450420731dc3        rexray/ebs:latest      REX-Ray for Amazon EBS   true\n\n$ docker run -ti --volume-driver=rexray/ebs -v test:/test busybox\n$ df -h /test\n```\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "0.12.0"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 9.6669921875,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\nrequire 'fileutils'\nrequire 'shellwords'\n\n# ensure that the authentication module for the VirtualBox web server has\n# been disabled and that the web server is online\nif ARGV[0] == \"up\"\n  unless `ps alx | grep [v]boxwebsrv` != \"\"\n    printf \"starting virtualbox web server\\n\"\n    print `VBoxManage setproperty websrvauthlibrary null && vboxwebsrv --background`\n  end\nend\n\n# node info\n$node0_name = \"node0\"\n$node0_ip   = \"192.168.56.10\"\n$node0_mem  = \"1024\"\n\n$node1_name = \"node1\"\n$node1_ip   = \"192.168.56.11\"\n$node1_mem  = \"512\"\n\n# Golang information\n$goos   = \"linux\"\n$goarch = \"amd64\"\n$gover  = \"1.7.4\"\n$gotgz  = \"go#{$gover}.#{$goos}-#{$goarch}.tar.gz\"\n$gourl  = \"https://storage.googleapis.com/golang/#{$gotgz}\"\n$gopath = \"/opt/go\"\n\n# the script to provision golang\n$provision_golang = <<SCRIPT\necho installing go#{$gover}.#{$goos}-#{$goarch}\nwget -q #{$gourl.shellescape}\ntar -C /usr/local -xzf #{$gotgz.shellescape}\nmkdir -p #{$gopath.shellescape}\nrm -f #{$gotgz.shellescape}\nSCRIPT\n\n# the script to provision docker\n$provision_docker = <<SCRIPT\napt-get update\napt-get install apt-transport-https ca-certificates\napt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 \\\n            --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\necho 'deb https://apt.dockerproject.org/repo ubuntu-trusty main' > \\\n     /etc/apt/sources.list.d/docker.list\napt-get update\napt-get purge lxc-docker\napt-get install linux-image-extra-$(uname -r)\napt-get install apparmor\napt-get update\napt-get install -y docker-engine\nusermod -a -G docker vagrant\nservice docker start\ndocker run hello-world\nSCRIPT\n\n# go-bindata info\n$go_bindata_dir = \"#{$gopath}/src/github.com/jteeuwen/go-bindata\"\n$go_bindata_url = \"https://github.com/akutz/go-bindata\"\n$go_bindata_ref = \"feature/md5checksum\"\n\n# the script to build go-bindata\n$build_go_bindata = <<SCRIPT\nmkdir -p #{$go_bindata_dir.shellescape}\ncd #{$go_bindata_dir.shellescape}\ngit clone #{$go_bindata_url.shellescape} .\ngit checkout #{$go_bindata_ref.shellescape}\ngo get ./...\ngo install ./...\nSCRIPT\n\n# rex-ray repo and branch information\n$rexray_dir = \"#{$gopath}/src/github.com/codedellemc/rexray\"\n$rexray_url = \"https://github.com/codedellemc/rexray\"\n$rexray_ref = \"master\"\n$rexray_bin = \"/usr/bin/rexray\"\n$rexray_cfg = \"/etc/rexray/config.yml\"\n\n# the script to build rex-ray\n$build_rexray = <<SCRIPT\nmkdir -p #{$rexray_dir.shellescape}\ncd #{$rexray_dir.shellescape}\ngit clone #{$rexray_url.shellescape} .\ngit checkout #{$rexray_ref.shellescape}\nmake deps\nmake build\nSCRIPT\n\n# volume_path is a valid directory path on the local, host system for storing\n# virtualbox volumes. ensure it exists as well\n$volume_path = \"#{File.dirname(__FILE__)}/.vagrant/volumes\"\nFileUtils::mkdir_p $volume_path\n\n# the script to write node0's rex-ray config file. the 'virtualbox.volumePath'\n# property should be replaced with a valid directory path on the virtualbox\n# host system\n$write_rexray_config_node0 = <<SCRIPT\nmkdir -p #{File.dirname($rexray_cfg).shellescape}\ncat << EOF > #{$rexray_cfg.shellescape}\nrexray:\n  logLevel: warn\nlibstorage:\n  host:     tcp://127.0.0.1:7979\n  embedded: true\n  service:  virtualbox\n  server:\n    endpoints:\n      public:\n        address: tcp://:7979\n    services:\n      virtualbox:\n        driver: virtualbox\nvirtualbox:\n  volumePath: #{$volume_path.shellescape}\nEOF\nSCRIPT\n\n# the script to write node1's rex-ray config file. the 'virtualbox.volumePath'\n# property should be replaced with a valid directory path on the virtualbox\n# host system\n$write_rexray_config_node1 = <<SCRIPT\nmkdir -p #{File.dirname($rexray_cfg).shellescape}\ncat << EOF > #{$rexray_cfg.shellescape}\nrexray:\n  logLevel: warn\nlibstorage:\n  host:    tcp://#{$node0_ip}:7979\n  service: virtualbox\nEOF\nSCRIPT\n\n# init the environment variables used when building go source\n$build_env_vars = Hash[\n    \"GOPATH\" => $gopath.shellescape,\n    \"PATH\" => \"#{$gopath.shellescape}/bin:/usr/local/go/bin:#{ENV['PATH']}\"\n]\n\n# node_dir returns the directory for a given node\ndef node_dir(name)\n    return \"#{File.dirname(__FILE__)}/.vagrant/machines/#{name}\"\nend\n\n# is_first_up returns a flag indicating whether or not this is the first time\n# 'vagrant up' has been called on a specific node\ndef is_first_up(name)\n  return Dir.glob(\"#{node_dir(name)}/*/id\").empty?\nend\n\n# init_node initializes the node information\ndef init_node(node, name, ip)\n  node.vm.box = \"ubuntu/trusty64\"\n  node.vm.hostname = name\n  node.vm.network :private_network, ip: ip\nend\n\n# init_virtualbox initializes the virtualbox settings for a VM\ndef init_virtualbox(vb, ram)\n  # set the VM's RAM size. must be at least 1GB.\n  # see https://github.com/beego/wetalk/issues/32\n  # https://groups.google.com/forum/#!topic/golang-nuts/0qUdADqqsDs\n  vb.memory = ram\n\n  # renamed the SATA controller to be the default name for a VirtualBox\n  # SATA controller, `SATA`\n  vb.customize [\"storagectl\", :id, \"--name\", \"SATAController\", \"--rename\", \"SATA\"]\n\n  # set the SATA controller's port count so it's greater than 1. if this\n  # step is omitted it is not possible to attach new volumes to this VM.\n  vb.customize [\"storagectl\", :id, \"--name\", \"SATA\", \"--portcount\", \"25\"]\n\n  # enable NAT DNS\n  vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n\n  # make sure the first NIC has a \"random\" MAC address to ensure it is not\n  # the same MAC address as the other node\n  vb.customize [\"modifyvm\", :id, \"--macaddress1\", \"auto\"]\n\nend\n\nVagrant.configure(\"2\") do |config|\n\n  # configure node0\n  config.vm.define $node0_name do |node|\n\n    # initialize the node information\n    init_node node, $node0_name, $node0_ip\n\n    # only proceed if this is the first time 'vagrant up' has been called\n    # on this node\n    if is_first_up node.vm.hostname\n\n      # initialize virtualbox\n      node.vm.provider :virtualbox do |vb|\n        init_virtualbox vb, $node0_mem\n      end\n\n      # provision docker - don't use docker provisioner - see\n      # https://github.com/mitchellh/vagrant/issues/7161\n      node.vm.provision \"shell\" do |s|\n        s.name =   \"docker\"\n        s.inline = $provision_docker\n      end\n\n      # provision golang\n      node.vm.provision \"shell\" do |s|\n        s.name   = \"golang\"\n        s.inline = $provision_golang\n      end\n\n       # build go-bindata\n       node.vm.provision \"shell\" do |s|\n         s.name   = \"go-bindata\"\n         s.env    = $build_env_vars\n         s.inline = $build_go_bindata\n       end\n\n      # build rex-ray\n      node.vm.provision \"shell\" do |s|\n        s.name   = \"build rex-ray\"\n        s.env    = $build_env_vars\n        s.inline = $build_rexray\n      end\n\n      # copy rex-ray to /usr/bin\n      node.vm.provision \"shell\" do |s|\n        s.name   = \"copy rex-ray\"\n        s.inline = \"cp #{$gopath.shellescape}/bin/rexray \" +\n                   \"#{$rexray_bin.shellescape}\"\n      end\n\n      # write rex-ray config file\n      node.vm.provision \"shell\" do |s|\n        s.name       = \"config rex-ray\"\n        s.inline     = $write_rexray_config_node0\n      end\n\n      # install rex-ray\n      node.vm.provision \"shell\" do |s|\n        s.name   = \"rex-ray install\"\n        s.inline = \"rexray install\"\n      end\n\n      # start rex-ray as a service\n      node.vm.provision \"shell\" do |s|\n        s.name   = \"start rex-ray\"\n        s.inline = \"/etc/init.d/rexray start\"\n      end\n\n    end # if is_first_up node.vm.hostname\n\n    # list volume mapping with rex-ray to verify configuration\n    node.vm.provision \"shell\", run: \"always\" do |s|\n      s.name       = \"rex-ray volume map\"\n      s.privileged = false\n      s.inline     = \"rexray volume ls\"\n    end\n\n  end # configure node0\n\n  # configure node1\n  config.vm.define $node1_name do |node|\n\n    # initialize the node information\n    init_node node, $node1_name, $node1_ip\n\n    # only proceed if this is the first time 'vagrant up' has been called\n    # on this node\n    if is_first_up node.vm.hostname\n\n      # initialize virtualbox\n      node.vm.provider :virtualbox do |vb|\n        init_virtualbox vb, $node1_mem\n      end\n\n      # provision docker - don't use docker provisioner - see\n      # https://github.com/mitchellh/vagrant/issues/7161\n      node.vm.provision \"shell\" do |s|\n        s.name =   \"docker\"\n        s.inline = $provision_docker\n      end\n\n      # copy node0's private ssh key to node1 so node1 can ssh to node0 without\n      # being prompted for a password\n      node.vm.provision              \"file\",\n                        source:      \"#{node_dir($node0_name)}\" +\n                                     \"/virtualbox/private_key\".shellescape,\n                        destination: '\"$HOME\"/.ssh' +\n                                     \"/#{$node0_name.shellescape}.key\"\n\n      # scp rex-ray from node0 to node1\n      node.vm.provision \"shell\" do |s|\n        s.name =   \"scp rexray\"\n        s.inline = \"scp -q -i \" +\n                   \"/home/vagrant/.ssh/#{$node0_name}.key\".shellescape + \" \" +\n                   \"-o StrictHostKeyChecking=no \" +\n                   \"vagrant@#{$node0_ip}:#{$rexray_bin.shellescape} \" +\n                   \"#{$rexray_bin.shellescape}\"\n      end\n\n      # write rex-ray config file\n      node.vm.provision \"shell\" do |s|\n        s.name       = \"config rex-ray\"\n        s.inline     = $write_rexray_config_node1\n      end\n\n      # install rex-ray\n      node.vm.provision \"shell\" do |s|\n        s.name   = \"rex-ray install\"\n        s.inline = \"rexray install\"\n      end\n\n      # start rex-ray as a service\n      node.vm.provision \"shell\" do |s|\n        s.name   = \"start rex-ray\"\n        s.inline = \"/etc/init.d/rexray start\"\n      end\n\n    end # if is_first_up node.vm.hostname\n\n    # list volume mapping with rex-ray to verify configuration\n    node.vm.provision \"shell\", run: \"always\" do |s|\n      s.name       = \"rex-ray volume map\"\n      s.privileged = false\n      s.inline     = \"rexray volume ls\"\n    end\n\n  end # configure node1\n\nend\n"
        },
        {
          "name": "agent",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "install",
          "type": "blob",
          "size": 5.552734375,
          "content": "#!/bin/sh\n\n# the name of the program/product this curl-bash script lists/installs using\n# Bintray as the online repository\nPROG=rexray\n\n##\n# this curl-install script supports the installation of the latest\n# version of $PROG for CentOS, Ubuntu, CoreOS, and Darwin using\n# RPMs, DEBs, and tarballs.\n#\n# to install the latest version of $PROG simply execute:\n#\n#  curl -sSL https://rexray.io/install | sh\n#\n# however, this script will also allow users to install specific\n# versions of $PROG and even supports the discovery of those versions.\n# for example, to list the available $PROG packages use the \"list\"\n# command like so:\n#\n#  curl -sSL https://rexray.io/install | sh -s -- list\n#\n# this will emit the following curl commands to demonstrate how to\n# install one or more of the available packages, \"unstable\", \"staged\",\n# and \"stable\".\n#\n#    curl -sSL https://rexray.io/install | sh -s -- unstable\n#    curl -sSL https://rexray.io/install | sh -s -- staged\n#    curl -sSL https://rexray.io/install | sh -s -- stable\n#\n# again, the \"list\" command outputs the curl commands to perform\n# installations, not how to traverse deeper into the package structure.\n# however, it's not hard to do that traversal. for example, to list the\n# contents of the \"stable\" package we'd execute:\n#\n#  curl -sSL https://rexray.io/install | sh -s -- list stable\n#\n# the above command would emit somthing similar to:\n#\n#    curl -sSL https://rexray.io/install | sh -s -- stable 0.2.0\n#    curl -sSL https://rexray.io/install | sh -s -- stable latest\n#\n# as you can see, to traverse the structure, we simply insert the\n# command \"list\" as the first argument after the \"-s\" flag.\n##\n\nREPO=$PROG\nBIN_NAME=$PROG\n\nBINTRAY_URL=https://dl.bintray.com/rexray\nURL=$BINTRAY_URL/$REPO\n\nSCRIPT_URL=https://rexray.io/install\nSCRIPT_CMD=\"curl -sSL $SCRIPT_URL | sh -s\"\n\nif [ \"$INSECURE\" = \"1\" ]; then\n    INSECURE=-k\nfi\n\nsudo() {\n    if [ \"$(id -u)\" -eq \"0\" ]; then $@; else $SUDO $@; fi\n}\n\nis_coreos() {\n    grep DISTRIB_ID /etc/lsb-release 2> /dev/null | grep CoreOS 2> /dev/null\n}\n\nlist() {\n    if [ -z \"$PKG\" ]; then\n        echo \"$SCRIPT_CMD -- list unstable\"\n        echo \"$SCRIPT_CMD -- list staged\"\n        echo \"$SCRIPT_CMD -- list stable\"\n    else\n        for v in $(curl $INSECURE -sSL \"$URL/$PKG/\" | \\\n            grep -o '[[:digit:]]\\+\\.[[:digit:]]\\+\\.[[:digit:]]\\+\\(-[^+/]\\+\\)\\{0,1\\}\\(\\+[[:digit:]]\\+\\)\\{0,1\\}' | \\\n            sort -uV); do\n            echo \"$SCRIPT_CMD -- $PKG $v\"\n        done\n    fi\n}\n\ninstall() {\n\n    ARCH=$(uname -m)\n\n    if echo $ARCH | grep -iq armv7; then\n      ARCH=ARMv7\n    elif echo $ARCH | grep -iq armv; then\n      ARCH=ARMv8\n    fi\n\n    case $ARCH in\n    ARMv7)\n      ;;\n    ARMv8)\n      ;;\n    x86_64)\n      ;;\n    *)\n      echo \"$PROG is not supported on $ARCH platforms\"\n      exit 1\n      ;;\n    esac\n\n    if [ \"$VERSION\" = \"latest\" ]; then\n        VERSION=$(curl $INSECURE -sSL $URL/$PKG/ | \\\n            grep -o '[[:digit:]]\\+\\.[[:digit:]]\\+\\.[[:digit:]]\\+\\(-[^+/]\\+\\)\\{0,1\\}\\(\\+[[:digit:]]\\+\\)\\{0,1\\}' | \\\n            sort -uV | \\\n            tail -n 1)\n    fi\n\n    OS=$(uname -s)\n    URL=$URL/$PKG/$VERSION\n    SUDO=$(which sudo)\n    BIN_DIR=/usr/bin\n    BIN_FILE=$BIN_DIR/$BIN_NAME\n    IS_COREOS=$(is_coreos)\n\n    # how to detect the linux distro was taken from http://bit.ly/1JkNwWx\n    if [ -e \"/etc/redhat-release\" -o -e \"/etc/redhat-version\" ]; then\n\n        FVERSION=$(echo $VERSION | tr '-' '+')\n        FILE_NAME=$BIN_NAME-$FVERSION-1.$ARCH.rpm\n        URL=$URL/$FILE_NAME\n\n        curl $INSECURE -o $FILE_NAME -sSL $URL\n        if [ \"$?\" -ne \"0\" ]; then exit $?; fi\n\n        sudo rpm -U --quiet $FILE_NAME > /dev/null\n        if [ \"$?\" -ne \"0\" ]; then ec=$?; rm -f $FILE_NAME; exit $ec; fi\n\n        rm -f $FILE_NAME\n\n    elif [ \"$ARCH\" = \"x86_64\" -a -z \"$IS_COREOS\" ] && \\\n         [ -e \"/etc/debian-release\" -o \\\n           -e \"/etc/debian-version\" -o \\\n           -e \"/etc/lsb-release\" ]; then\n\n        ARCH=amd64\n\n        FVERSION=$(echo $VERSION | tr '-' '+')\n        FILE_NAME=${BIN_NAME}_${FVERSION}-1_${ARCH}.deb\n        URL=$URL/$FILE_NAME\n\n        curl $INSECURE -o $FILE_NAME -sSL $URL\n        if [ \"$?\" -ne \"0\" ]; then exit $?; fi\n\n        sudo dpkg -i $FILE_NAME\n        if [ \"$?\" -ne \"0\" ]; then ec=$?; rm -f $FILE_NAME; exit $ec; fi\n\n        rm -f $FILE_NAME\n\n    else\n        if [ -n \"$IS_COREOS\" ]; then\n            BIN_DIR=/opt/bin\n            BIN_FILE=$BIN_DIR/$BIN_NAME\n        elif [ \"$OS\" = \"Darwin\" ]; then\n            BIN_DIR=/usr/local/bin\n            BIN_FILE=$BIN_DIR/$BIN_NAME\n        fi\n\n        if [ -z \"$FILE_NAME\" ]; then\n            FILE_NAME=$BIN_NAME-$OS-$ARCH-$VERSION.tar.gz\n            URL=$URL/$FILE_NAME\n        fi\n\n        sudo mkdir -p $BIN_DIR\n        if [ \"$?\" -ne \"0\" ]; then exit $?; fi\n\n        curl $INSECURE -o $FILE_NAME -sSL $URL\n        if [ \"$?\" -ne \"0\" ]; then exit $?; fi\n\n        sudo tar xzf $FILE_NAME -C $BIN_DIR\n        if [ \"$?\" -ne \"0\" ]; then ec=$?; rm -f $FILE_NAME; exit $ec; fi\n\n        rm -f $FILE_NAME\n\n        if [ ! -e \"$BIN_FILE\" ]; then\n            echo \"$BIN_FILE does not exist!\"\n            exit 1\n        fi\n\n        sudo chmod 0755 $BIN_FILE && \\\n            sudo chown 0 $BIN_FILE && \\\n            sudo chgrp 0 $BIN_FILE\n        if [ \"$?\" -ne \"0\" ]; then exit $?; fi\n\n        sudo $BIN_FILE install\n        if [ \"$?\" -ne \"0\" ]; then exit $?; fi\n    fi\n\n    echo\n    echo \"$PROG has been installed to $BIN_FILE\"\n    echo\n    $BIN_FILE version\n    echo\n}\n\nCMD=$1\nif [ \"$CMD\" = \"list\" ] || [ \"$CMD\" = \"install\" ]; then\n    shift\nfi\n\nif [ \"$CMD\" = \"list\" ]; then\n    PKG=$1\n    VERSION=$2\n    list\nelse\n    PKG=${1:-stable}\n    VERSION=${2:-latest}\n    FILE_NAME=$3\n    install\nfi\n"
        },
        {
          "name": "libstorage",
          "type": "tree",
          "content": null
        },
        {
          "name": "make.sh",
          "type": "blob",
          "size": 0.259765625,
          "content": "#!/bin/sh\n\n# this file exists because of a requirement from Travis-CI regarding\n# how a deploy script must be called\n\nif [ \"$1\" = \"push-docker-plugin\" ]; then\n    echo \"pushing docker plugin\"\n    DOCKER_PLUGIN_TYPE=$2 exec make push-docker-plugin\nfi\n\nexec make \"$@\"\n"
        },
        {
          "name": "mkdocs.txt",
          "type": "blob",
          "size": 0.05078125,
          "content": "mkdocs >= 0.16.3, < 0.17\nmkdocs-bootswatch >= 0.4.0\n"
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 2.65625,
          "content": "site_name: REX-Ray\nsite_url: https://github.com/rexray/rexray\nrepo_url: https://github.com/rexray/rexray.git\ndocs_dir: .docs\nsite_dir: .site\ntheme_dir: .docs-themes/yeti\nsite_favicon: favicon.png\nextra_css:\n  - css/rexray.css\n  - css/rexray-font.css\n  - css/anchor.css\n  - css/hX.css\n  - css/first-of-type.css\n  - css/hide-rtd-footer.css\n  - css/dropdown.css\nextra_javascript:\n  - js/anchor.js\nmarkdown_extensions:\n  - admonition\npages:\n  - Home: index.md\n  - User Guide:\n      - Installation: user-guide/installation.md\n      - Configuration: user-guide/config.md\n      - Storage Providers:\n        - Overview: user-guide/storage-providers.md\n        - Amazon Web Services (AWS): user-guide/storage-providers/aws.md\n        - Ceph: user-guide/storage-providers/ceph.md\n        - Dell EMC: user-guide/storage-providers/dellemc.md\n        - DigitalOcean: user-guide/storage-providers/digitalocean.md\n        - FittedCloud: user-guide/storage-providers/fittedcloud.md\n        - Google: user-guide/storage-providers/google.md\n        - Microsoft Azure: user-guide/storage-providers/microsoft.md\n        - OpenStack: user-guide/storage-providers/openstack.md\n        - VirtualBox: user-guide/storage-providers/virtualbox.md\n      - Servers:\n        - libStorage: user-guide/servers/libstorage.md\n      - Schedulers:\n        - Overview: user-guide/schedulers.md\n        - Docker:\n          - Getting Started: user-guide/schedulers/docker.md\n          - Plug-ins:\n            - Getting Started: user-guide/schedulers/docker/plug-ins.md\n            - Amazon Web Services (AWS): user-guide/schedulers/docker/plug-ins/aws.md\n            - Ceph: user-guide/schedulers/docker/plug-ins/ceph.md\n            - Dell EMC: user-guide/schedulers/docker/plug-ins/dellemc.md\n            - DigitalOcean: user-guide/schedulers/docker/plug-ins/digitalocean.md\n            - Google: user-guide/schedulers/docker/plug-ins/google.md\n            - Microsoft Azure: user-guide/schedulers/docker/plug-ins/microsoft.md\n            - OpenStack: user-guide/schedulers/docker/plug-ins/openstack.md\n        - Kubernetes: user-guide/schedulers/kubernetes.md\n        - Mesos: user-guide/schedulers/mesos.md\n      - Examples:\n        - Apps: user-guide/examples/apps.md\n        - Demo: user-guide/examples/demo.md\n      - Help:\n        - Troubleshooting: user-guide/help/troubleshooting.md\n        - Usage: user-guide/help/usage.md\n  - Developers Guide:\n      - Project Guidelines: dev-guide/project-guidelines.md\n      - Build Reference: dev-guide/build-reference.md\n      - Release Process: dev-guide/release-process.md\n  - About:\n      - Contributing: about/contributing.md\n      - License: about/license.md\n      - Release Notes: about/release-notes.md\n"
        },
        {
          "name": "rexray.go",
          "type": "blob",
          "size": 8.30078125,
          "content": "//go:generate go generate ./core\n//go:generate go run core/semver/semver.go -f mk -o semver.mk\n//go:generate go run core/semver/semver.go -f env -o semver.env -x\n\npackage main\n\nimport (\n\t\"fmt\"\n\tgolog \"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"runtime/pprof\"\n\t\"runtime/trace\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\n\tgofigCore \"github.com/akutz/gofig\"\n\tgofig \"github.com/akutz/gofig/types\"\n\t\"github.com/akutz/gotil\"\n\tlog \"github.com/sirupsen/logrus\"\n\n\t\"github.com/rexray/rexray/cli\"\n\t\"github.com/rexray/rexray/core\"\n\t\"github.com/rexray/rexray/libstorage/api/context\"\n\t\"github.com/rexray/rexray/libstorage/api/registry\"\n\tapitypes \"github.com/rexray/rexray/libstorage/api/types\"\n\t\"github.com/rexray/rexray/libstorage/api/utils\"\n\trrutils \"github.com/rexray/rexray/util\"\n\n\t// import the libstorage config package\n\t_ \"github.com/rexray/rexray/libstorage/imports/config\"\n\n\t// load the profiler\n\t_ \"net/http/pprof\"\n)\n\nfunc main() {\n\t// If X_CSI_NATIVE is set to a truthy value then disable libStorage.\n\tif v := os.Getenv(\"X_CSI_NATIVE\"); v != \"\" {\n\t\tif ok, _ := strconv.ParseBool(v); ok {\n\t\t\tos.Setenv(\"LIBSTORAGE\", \"false\")\n\t\t}\n\t}\n\n\t// Brand libStorage's path structure with \"rexray\"\n\tif v := os.Getenv(\"LIBSTORAGE_APPTOKEN\"); v == \"\" {\n\t\tos.Setenv(\"LIBSTORAGE_APPTOKEN\", \"rexray\")\n\t}\n\n\t// Update REXRAY_HOME and LIBSTORAGE_HOME from the other if\n\t// one is set and the other is not.\n\trrHome := os.Getenv(\"REXRAY_HOME\")\n\tlsHome := os.Getenv(\"LIBSTORAGE_HOME\")\n\tif rrHome != \"\" && lsHome == \"\" {\n\t\tos.Setenv(\"LIBSTORAGE_HOME\", rrHome)\n\t} else if rrHome == \"\" && lsHome != \"\" {\n\t\tos.Setenv(\"REXRAY_HOME\", lsHome)\n\t}\n\n\t// Since flags are not parsed yet, manually check to see if a\n\t// -l or --logLevel were provided via the command line's arguments.\n\tif v, _ := rrutils.FindFlagVal(\n\t\t\"-l\", os.Args...); v != \"\" {\n\t\tos.Setenv(\"REXRAY_LOGLEVEL\", v)\n\t\tos.Setenv(\"LIBSTORAGE_LOGGING_LEVEL\", v)\n\t} else if v, _ := rrutils.FindFlagVal(\n\t\t\"--loglevel\", os.Args...); v != \"\" {\n\t\tos.Setenv(\"REXRAY_LOGLEVEL\", v)\n\t\tos.Setenv(\"LIBSTORAGE_LOGGING_LEVEL\", v)\n\t}\n\n\t// Since flags are not parsed yet, manually check to see if a\n\t// -c or --config were provided via the command line's arguments.\n\tvar configFile string\n\tif v, _ := rrutils.FindFlagVal(\n\t\t\"-c\", os.Args...); v != \"\" {\n\t\tconfigFile = v\n\t} else if v, _ := rrutils.FindFlagVal(\n\t\t\"--config\", os.Args...); v != \"\" {\n\t\tconfigFile = v\n\t}\n\n\t// Register REX-Ray's global config options.\n\tregisterConfig()\n\n\t// Create a new context and process registration configs.\n\tctx := context.Background()\n\tpathConfig := utils.NewPathConfig()\n\tctx = ctx.WithValue(\n\t\tcontext.PathConfigKey, pathConfig)\n\tregistry.ProcessRegisteredConfigs(ctx)\n\n\t// If the configFile value is empty then configure Gofig's global\n\t// search locations.\n\tvar config gofig.Config\n\tif configFile == \"\" {\n\t\tgofigCore.SetGlobalConfigPath(pathConfig.Etc)\n\t\tgofigCore.SetUserConfigPath(pathConfig.Home)\n\t} else if !gotil.FileExists(configFile) {\n\t\tfmt.Fprintf(os.Stderr,\n\t\t\t\"error: invalid config file: %s\\n\", configFile)\n\t\tos.Exit(1)\n\t} else {\n\t\trrutils.ValidateConfig(configFile)\n\t\tconfig = gofigCore.New()\n\t\tif err := config.ReadConfigFile(configFile); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr,\n\t\t\t\t\"error: invalid config file: %s: %v\\n\", configFile, err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tconfig = config.Scope(\"rexray\")\n\t}\n\n\t// Update the log level after it's been parsed from every possible\n\t// location.\n\tcontext.SetLogLevel(ctx, updateLogLevel(config))\n\n\t// Get the context logger and update Go's standard log facility so that\n\t// it emits logs using the context logger.\n\tgolog.SetFlags(0)\n\tgolog.SetOutput(rrutils.NewWriterFor(ctx.Infof))\n\n\t// Print the status of DockerLegacyMode.\n\tctx.WithField(\"enabled\", core.DockerLegacyMode).Info(\"DockerLegacyMode\")\n\n\tif config != nil {\n\t\tctx.WithField(\"path\", configFile).Info(\"loaded custom config\")\n\t}\n\n\tvar (\n\t\terr          error\n\t\ttraceProfile *os.File\n\t\tcpuProfile   *os.File\n\t\texit         sync.Once\n\t)\n\n\tcreateUserKnownHostsFile(ctx, pathConfig)\n\n\tonExit := func() {\n\t\tif traceProfile != nil {\n\t\t\tctx.Info(\"stopping trace profile\")\n\t\t\ttrace.Stop()\n\t\t\ttraceProfile.Close()\n\t\t\tctx.Debug(\"stopped trace profile\")\n\t\t}\n\n\t\tif cpuProfile != nil {\n\t\t\tctx.Info(\"stopping cpu profile\")\n\t\t\tpprof.StopCPUProfile()\n\t\t\tcpuProfile.Close()\n\t\t\tctx.Debug(\"stopped cpu profile\")\n\t\t}\n\n\t\tctx.Info(\"exiting process\")\n\t}\n\n\tvar waitForExit chan int\n\n\tcore.RegisterSignalHandler(func(ctx apitypes.Context, s os.Signal) {\n\t\tif ok, _ := core.IsExitSignal(s); ok {\n\t\t\twaitForExit = make(chan int)\n\t\t\tctx.Info(\"received exit signal\")\n\t\t\texit.Do(onExit)\n\t\t}\n\t})\n\n\tif p := os.Getenv(\"REXRAY_TRACE_PROFILE\"); p != \"\" {\n\t\tif traceProfile, err = os.Create(p); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tif err = trace.Start(traceProfile); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tctx.WithField(\"path\", traceProfile.Name()).Info(\"trace profile enabled\")\n\t}\n\n\tif p := os.Getenv(\"REXRAY_CPU_PROFILE\"); p != \"\" {\n\t\tif cpuProfile, err = os.Create(p); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tif err = pprof.StartCPUProfile(cpuProfile); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tctx.WithField(\"path\", cpuProfile.Name()).Info(\"cpu profile enabled\")\n\t}\n\n\tif p := os.Getenv(\"REXRAY_PROFILE_ADDR\"); p != \"\" {\n\t\tgo http.ListenAndServe(p, http.DefaultServeMux)\n\t\tctx.WithField(\"address\", p).Info(\"http pprof enabled\")\n\t}\n\n\tcore.TrapSignals(ctx)\n\tctx.Debug(\"trapped signals\")\n\n\tcli.Execute(ctx, config)\n\tctx.Debug(\"completed cli execution\")\n\n\texit.Do(onExit)\n\tctx.Debug(\"completed onExit at end of program\")\n\n\t// If an exit signal was received then just block until the\n\t// handler exits the process.\n\tif waitForExit != nil {\n\t\t<-waitForExit\n\t}\n}\n\nconst (\n\tconfigRR   = \"rexray\"\n\tconfigRRLL = configRR + \".loglevel\"\n)\n\nfunc setConfigLogLevel(config gofig.Config, k1, k2 string, level string) {\n\tv, ok := config.Get(k1).(map[string]interface{})\n\tif ok {\n\t\tv[strings.Replace(k2, k1+\".\", \"\", 1)] = level\n\t} else {\n\t\tconfig.Set(k2, level)\n\t}\n}\n\nfunc updateLogLevel(config gofig.Config) (level log.Level) {\n\tdefer func() {\n\t\tif config == nil {\n\t\t\treturn\n\t\t}\n\t\tszl := level.String()\n\t\tsetConfigLogLevel(\n\t\t\tconfig, configRR, configRRLL, szl)\n\t\tsetConfigLogLevel(\n\t\t\tconfig, apitypes.ConfigLogging, apitypes.ConfigLogLevel, szl)\n\t}()\n\n\tif ok, _ := strconv.ParseBool(os.Getenv(\"REXRAY_DEBUG\")); ok {\n\t\tenableDebugMode()\n\t\treturn log.DebugLevel\n\t}\n\n\tif ok, _ := strconv.ParseBool(os.Getenv(\"LIBSTORAGE_DEBUG\")); ok {\n\t\tenableDebugMode()\n\t\treturn log.DebugLevel\n\t}\n\n\tif ll := os.Getenv(\"REXRAY_LOGLEVEL\"); ll != \"\" {\n\t\tif lvl, err := log.ParseLevel(ll); err == nil {\n\t\t\tif lvl == log.DebugLevel {\n\t\t\t\tenableDebugMode()\n\t\t\t} else {\n\t\t\t\tsetLogLevels(lvl)\n\t\t\t}\n\t\t\treturn lvl\n\t\t}\n\t}\n\n\tif ll := os.Getenv(\"LIBSTORAGE_LOGGING_LEVEL\"); ll != \"\" {\n\t\tif lvl, err := log.ParseLevel(ll); err == nil {\n\t\t\tif lvl == log.DebugLevel {\n\t\t\t\tenableDebugMode()\n\t\t\t} else {\n\t\t\t\tsetLogLevels(lvl)\n\t\t\t}\n\t\t\treturn lvl\n\t\t}\n\t}\n\n\tif config != nil {\n\t\tif ll := config.GetString(configRRLL); ll != \"\" {\n\t\t\tif lvl, err := log.ParseLevel(ll); err == nil {\n\t\t\t\tif lvl == log.DebugLevel {\n\t\t\t\t\tenableDebugMode()\n\t\t\t\t} else {\n\t\t\t\t\tsetLogLevels(lvl)\n\t\t\t\t}\n\t\t\t\treturn lvl\n\t\t\t}\n\t\t}\n\t\tif ll := config.GetString(apitypes.ConfigLogLevel); ll != \"\" {\n\t\t\tif lvl, err := log.ParseLevel(ll); err == nil {\n\t\t\t\tif lvl == log.DebugLevel {\n\t\t\t\t\tenableDebugMode()\n\t\t\t\t} else {\n\t\t\t\t\tsetLogLevels(lvl)\n\t\t\t\t}\n\t\t\t\treturn lvl\n\t\t\t}\n\t\t}\n\t}\n\n\treturn log.WarnLevel\n}\n\nfunc enableDebugMode() {\n\tcore.Debug = true\n\tapitypes.Debug = true\n\tos.Setenv(\"REXRAY_DEBUG\", \"true\")\n\tos.Setenv(\"LIBSTORAGE_DEBUG\", \"true\")\n\tsetLogLevels(log.DebugLevel)\n\tlog.SetLevel(log.DebugLevel)\n}\n\nfunc setLogLevels(lvl log.Level) {\n\tos.Setenv(\"REXRAY_LOGLEVEL\", lvl.String())\n\tos.Setenv(\"LIBSTORAGE_LOGGING_LEVEL\", lvl.String())\n}\n\nfunc createUserKnownHostsFile(\n\tctx apitypes.Context,\n\tpathConfig *apitypes.PathConfig) {\n\n\tkhPath := pathConfig.UserDefaultTLSKnownHosts\n\n\tif gotil.FileExists(khPath) {\n\t\treturn\n\t}\n\n\tkhDirPath := filepath.Dir(khPath)\n\tos.MkdirAll(khDirPath, 0755)\n\tkhFile, err := os.Create(khPath)\n\tif err != nil {\n\t\tctx.WithField(\"path\", khPath).Fatal(\n\t\t\t\"failed to create known_hosts\")\n\t}\n\tdefer khFile.Close()\n}\n\nfunc registerConfig() {\n\tr := gofigCore.NewRegistration(\"Global\")\n\tr.SetYAML(`\nrexray:\n    logLevel: warn\n`)\n\tr.Key(gofig.String, \"h\", \"\",\n\t\t\"The libStorage host.\", \"rexray.host\",\n\t\t\"host\")\n\tr.Key(gofig.String, \"s\", \"\",\n\t\t\"The libStorage service.\", \"rexray.service\",\n\t\t\"service\")\n\tr.Key(gofig.String, \"l\", \"warn\",\n\t\t\"The log level (error, warn, info, debug)\", \"rexray.logLevel\",\n\t\t\"logLevel\")\n\tgofigCore.Register(r)\n}\n"
        },
        {
          "name": "rexray_docs.go",
          "type": "blob",
          "size": 0.12109375,
          "content": "// REX-Ray is a container storage orchestration engine that enables\n// persistence for cloud-native workloads.\npackage main\n"
        },
        {
          "name": "rexray_std_agent.go",
          "type": "blob",
          "size": 0.3876953125,
          "content": "// +build !client\n// +build !controller\n\npackage main\n\nimport (\n\t// Load the agent's modules\n\t_ \"github.com/rexray/rexray/agent/csi\"\n\n\t// Load the in-tree CSI plug-ins\n\t_ \"github.com/rexray/rexray/agent/csi/libstorage\"\n\n\t// Load vendored CSI plug-ins\n\t_ \"github.com/thecodeteam/csi-blockdevices/provider\"\n\t_ \"github.com/thecodeteam/csi-nfs/provider\"\n\t_ \"github.com/thecodeteam/csi-vfs/provider\"\n)\n"
        },
        {
          "name": "rexray_std_client_agent.go",
          "type": "blob",
          "size": 0.13671875,
          "content": "// +build !controller\n\npackage main\n\nimport (\n\t// load the libstorage packages\n\t_ \"github.com/rexray/rexray/libstorage/imports/executors\"\n)\n"
        },
        {
          "name": "rexray_std_controller.go",
          "type": "blob",
          "size": 0.1474609375,
          "content": "// +build !client\n// +build !agent\n\npackage main\n\nimport (\n\t// load the libstorage packages\n\t_ \"github.com/rexray/rexray/libstorage/imports/storage\"\n)\n"
        },
        {
          "name": "rpm.spec",
          "type": "blob",
          "size": 0.884765625,
          "content": "%define        _topdir  %{rpmbuild}\n%define        _tmppath %{_topdir}/tmp\n\nSummary: Tool for managing remote & local storage.\nName: %{prog_name}\nVersion: %{v_semver}\nRelease: 1\nLicense: Apache License\nGroup: Applications/Storage\n#Source: https://github.com/thecodeteam/rexray/archive/master.zip\nURL: https://github.com/thecodeteam/rexray\nVendor: {code} by Dell EMC\nPackager: Andrew Kutz <sakutz@gmail.com>\nBuildArch: %{v_arch}\nBuildRoot: %{_tmppath}/%{prog_name}-%{version}-%{release}\n\n%description\nA guest based storage introspection tool that\nallows local visibility and management from cloud\nand storage platforms.\n\n%prep\n\n%build\n\n%install\ninstall -D %{prog_path} $RPM_BUILD_ROOT/usr/bin/%{prog_name}\n\n%post\n/usr/bin/%{prog_name} install 1> /dev/null\n\n%preun\n/usr/bin/%{prog_name} uninstall --package 1> /dev/null\n\n%clean\n#rm -rf \"$RPM_BUILD_ROOT\"\n\n%files\n%attr(0755, root, root) /usr/bin/%{prog_name}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}