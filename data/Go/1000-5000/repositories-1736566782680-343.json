{
  "metadata": {
    "timestamp": 1736566782680,
    "page": 343,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "upper/db",
      "stars": 3550,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03125,
          "content": "*.sw?\n*.db\n*.tmp\ngenerated_*.go\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.083984375,
          "content": "Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.86328125,
          "content": "SHELL                 ?= bash\nCPU_CORES             ?= $(shell nproc)\n\nPARALLEL_FLAGS        ?= --halt-on-error 2 --jobs=$(CPU_CORES) -v -u\n\nTEST_FLAGS            ?= -v -failfast -race -timeout 20m\n\nUPPER_DB_LOG          ?= WARN\n\nexport TEST_FLAGS\nexport PARALLEL_FLAGS\nexport UPPER_DB_LOG\n\ntest: go-test-internal test-adapters\n\nbenchmark: go-benchmark-internal\n\ngo-benchmark-%:\n\tgo test -v -benchtime=500ms -bench=. ./$*/...\n\ngo-test-%:\n\tgo test -v ./$*/...\n\ntest-adapters: \\\n\ttest-adapter-postgresql \\\n\ttest-adapter-cockroachdb \\\n\ttest-adapter-mysql \\\n\ttest-adapter-mssql \\\n\ttest-adapter-sqlite \\\n\ttest-adapter-ql \\\n\ttest-adapter-mongo\n\ntest-adapter-%:\n\t($(MAKE) -C adapter/$* test-extended || exit 1)\n\ntest-generic:\n\texport TEST_FLAGS=\"-run TestGeneric\"; \\\n\t$(MAKE) test-adapters\n\ngoimports:\n\tfor FILE in $$(find -name \"*.go\" | grep -v vendor); do \\\n\t\tgoimports -w $$FILE; \\\n\tdone\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.193359375,
          "content": "<p align=\"center\">\n  <img src=\"https://upper.io/img/gopher.svg\" width=\"256\">\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/upper/db/actions?query=workflow%3Aunit-tests\"><img alt=\"upper/db unit tests status\" src=\"https://github.com/upper/db/workflows/unit-tests/badge.svg\"></a>\n</p>\n\n# upper/db\n\n`upper/db` is a productive data access layer (DAL) for [Go](https://golang.org)\nthat provides agnostic tools to work with different data sources, such as:\n\n* [PostgreSQL](https://upper.io/v4/adapter/postgresql)\n* [MySQL](https://upper.io/v4/adapter/mysql)\n* [MSSQL](https://upper.io/v4/adapter/mssql)\n* [CockroachDB](https://upper.io/v4/adapter/cockroachdb)\n* [MongoDB](https://upper.io/v4/adapter/mongo)\n* [QL](https://upper.io/v4/adapter/ql)\n* [SQLite](https://upper.io/v4/adapter/sqlite)\n\nSee [upper.io/v4](//upper.io/v4) for documentation and code samples.\n\n## The tour\n\n![tour](https://user-images.githubusercontent.com/385670/91495824-c6fabb00-e880-11ea-925b-a30b94474610.png)\n\nTake the [tour](https://tour.upper.io) to see real live examples in your\nbrowser.\n\n## License\n\nLicensed under [MIT License](./LICENSE)\n\n## Contributors\n\nSee the [list of contributors](https://github.com/upper/db/graphs/contributors).\n"
        },
        {
          "name": "adapter.go",
          "type": "blob",
          "size": 2.3212890625,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nvar (\n\tadapterMap   = make(map[string]Adapter)\n\tadapterMapMu sync.RWMutex\n)\n\n// Adapter interface defines an adapter\ntype Adapter interface {\n\tOpen(ConnectionURL) (Session, error)\n}\n\ntype missingAdapter struct {\n\tname string\n}\n\nfunc (ma *missingAdapter) Open(ConnectionURL) (Session, error) {\n\treturn nil, fmt.Errorf(\"upper: Missing adapter %q, did you forget to import it?\", ma.name)\n}\n\n// RegisterAdapter registers a generic database adapter.\nfunc RegisterAdapter(name string, adapter Adapter) {\n\tadapterMapMu.Lock()\n\tdefer adapterMapMu.Unlock()\n\n\tif name == \"\" {\n\t\tpanic(`Missing adapter name`)\n\t}\n\tif _, ok := adapterMap[name]; ok {\n\t\tpanic(`db.RegisterAdapter() called twice for adapter: ` + name)\n\t}\n\tadapterMap[name] = adapter\n}\n\n// LookupAdapter returns a previously registered adapter by name.\nfunc LookupAdapter(name string) Adapter {\n\tadapterMapMu.RLock()\n\tdefer adapterMapMu.RUnlock()\n\n\tif adapter, ok := adapterMap[name]; ok {\n\t\treturn adapter\n\t}\n\treturn &missingAdapter{name: name}\n}\n\n// Open attempts to stablish a connection with a database.\nfunc Open(adapterName string, settings ConnectionURL) (Session, error) {\n\treturn LookupAdapter(adapterName).Open(settings)\n}\n"
        },
        {
          "name": "adapter",
          "type": "tree",
          "content": null
        },
        {
          "name": "clauses.go",
          "type": "blob",
          "size": 15.1494140625,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"context\"\n\t\"fmt\"\n)\n\n// Selector represents a SELECT statement.\ntype Selector interface {\n\t// Columns defines which columns to retrive.\n\t//\n\t// You should call From() after Columns() if you want to query data from an\n\t// specific table.\n\t//\n\t//   s.Columns(\"name\", \"last_name\").From(...)\n\t//\n\t// It is also possible to use an alias for the column, this could be handy if\n\t// you plan to use the alias later, use the \"AS\" keyword to denote an alias.\n\t//\n\t//   s.Columns(\"name AS n\")\n\t//\n\t// or the shortcut:\n\t//\n\t//   s.Columns(\"name n\")\n\t//\n\t// If you don't want the column to be escaped use the db.Raw\n\t// function.\n\t//\n\t//   s.Columns(db.Raw(\"MAX(id)\"))\n\t//\n\t// The above statement is equivalent to:\n\t//\n\t//   s.Columns(db.Func(\"MAX\", \"id\"))\n\tColumns(columns ...interface{}) Selector\n\n\t// From represents a FROM clause and is tipically used after Columns().\n\t//\n\t// FROM defines from which table data is going to be retrieved\n\t//\n\t//   s.Columns(...).From(\"people\")\n\t//\n\t// It is also possible to use an alias for the table, this could be handy if\n\t// you plan to use the alias later:\n\t//\n\t//   s.Columns(...).From(\"people AS p\").Where(\"p.name = ?\", ...)\n\t//\n\t// Or with the shortcut:\n\t//\n\t//   s.Columns(...).From(\"people p\").Where(\"p.name = ?\", ...)\n\tFrom(tables ...interface{}) Selector\n\n\t// Distict represents a DISTINCT clause\n\t//\n\t// DISTINCT is used to ask the database to return only values that are\n\t// different.\n\tDistinct(columns ...interface{}) Selector\n\n\t// As defines an alias for a table.\n\tAs(string) Selector\n\n\t// Where specifies the conditions that columns must match in order to be\n\t// retrieved.\n\t//\n\t// Where accepts raw strings and fmt.Stringer to define conditions and\n\t// interface{} to specify parameters. Be careful not to embed any parameters\n\t// within the SQL part as that could lead to security problems. You can use\n\t// que question mark (?) as placeholder for parameters.\n\t//\n\t//   s.Where(\"name = ?\", \"max\")\n\t//\n\t//   s.Where(\"name = ? AND last_name = ?\", \"Mary\", \"Doe\")\n\t//\n\t//   s.Where(\"last_name IS NULL\")\n\t//\n\t// You can also use other types of parameters besides only strings, like:\n\t//\n\t//   s.Where(\"online = ? AND last_logged <= ?\", true, time.Now())\n\t//\n\t// and Where() will transform them into strings before feeding them to the\n\t// database.\n\t//\n\t// When an unknown type is provided, Where() will first try to match it with\n\t// the Marshaler interface, then with fmt.Stringer and finally, if the\n\t// argument does not satisfy any of those interfaces Where() will use\n\t// fmt.Sprintf(\"%v\", arg) to transform the type into a string.\n\t//\n\t// Subsequent calls to Where() will overwrite previously set conditions, if\n\t// you want these new conditions to be appended use And() instead.\n\tWhere(conds ...interface{}) Selector\n\n\t// And appends more constraints to the WHERE clause without overwriting\n\t// conditions that have been already set.\n\tAnd(conds ...interface{}) Selector\n\n\t// GroupBy represents a GROUP BY statement.\n\t//\n\t// GROUP BY defines which columns should be used to aggregate and group\n\t// results.\n\t//\n\t//   s.GroupBy(\"country_id\")\n\t//\n\t// GroupBy accepts more than one column:\n\t//\n\t//   s.GroupBy(\"country_id\", \"city_id\")\n\tGroupBy(columns ...interface{}) Selector\n\n\t// Having(...interface{}) Selector\n\n\t// OrderBy represents a ORDER BY statement.\n\t//\n\t// ORDER BY is used to define which columns are going to be used to sort\n\t// results.\n\t//\n\t// Use the column name to sort results in ascendent order.\n\t//\n\t//   // \"last_name\" ASC\n\t//   s.OrderBy(\"last_name\")\n\t//\n\t// Prefix the column name with the minus sign (-) to sort results in\n\t// descendent order.\n\t//\n\t//   // \"last_name\" DESC\n\t//   s.OrderBy(\"-last_name\")\n\t//\n\t// If you would rather be very explicit, you can also use ASC and DESC.\n\t//\n\t//   s.OrderBy(\"last_name ASC\")\n\t//\n\t//   s.OrderBy(\"last_name DESC\", \"name ASC\")\n\tOrderBy(columns ...interface{}) Selector\n\n\t// Join represents a JOIN statement.\n\t//\n\t// JOIN statements are used to define external tables that the user wants to\n\t// include as part of the result.\n\t//\n\t// You can use the On() method after Join() to define the conditions of the\n\t// join.\n\t//\n\t//   s.Join(\"author\").On(\"author.id = book.author_id\")\n\t//\n\t// If you don't specify conditions for the join, a NATURAL JOIN will be used.\n\t//\n\t// On() accepts the same arguments as Where()\n\t//\n\t// You can also use Using() after Join().\n\t//\n\t//   s.Join(\"employee\").Using(\"department_id\")\n\tJoin(table ...interface{}) Selector\n\n\t// FullJoin is like Join() but with FULL JOIN.\n\tFullJoin(...interface{}) Selector\n\n\t// CrossJoin is like Join() but with CROSS JOIN.\n\tCrossJoin(...interface{}) Selector\n\n\t// RightJoin is like Join() but with RIGHT JOIN.\n\tRightJoin(...interface{}) Selector\n\n\t// LeftJoin is like Join() but with LEFT JOIN.\n\tLeftJoin(...interface{}) Selector\n\n\t// Using represents the USING clause.\n\t//\n\t// USING is used to specifiy columns to join results.\n\t//\n\t//   s.LeftJoin(...).Using(\"country_id\")\n\tUsing(...interface{}) Selector\n\n\t// On represents the ON clause.\n\t//\n\t// ON is used to define conditions on a join.\n\t//\n\t//   s.Join(...).On(\"b.author_id = a.id\")\n\tOn(...interface{}) Selector\n\n\t// Limit represents the LIMIT parameter.\n\t//\n\t// LIMIT defines the maximum number of rows to return from the table.  A\n\t// negative limit cancels any previous limit settings.\n\t//\n\t//  s.Limit(42)\n\tLimit(int) Selector\n\n\t// Offset represents the OFFSET parameter.\n\t//\n\t// OFFSET defines how many results are going to be skipped before starting to\n\t// return results. A negative offset cancels any previous offset settings.\n\t//\n\t// s.Offset(56)\n\tOffset(int) Selector\n\n\t// Amend lets you alter the query's text just before sending it to the\n\t// database server.\n\tAmend(func(queryIn string) (queryOut string)) Selector\n\n\t// Paginate returns a paginator that can display a paginated lists of items.\n\t// Paginators ignore previous Offset and Limit settings. Page numbering\n\t// starts at 1.\n\tPaginate(uint) Paginator\n\n\t// Iterator provides methods to iterate over the results returned by the\n\t// Selector.\n\tIterator() Iterator\n\n\t// IteratorContext provides methods to iterate over the results returned by\n\t// the Selector.\n\tIteratorContext(ctx context.Context) Iterator\n\n\t// SQLPreparer provides methods for creating prepared statements.\n\tSQLPreparer\n\n\t// SQLGetter provides methods to compile and execute a query that returns\n\t// results.\n\tSQLGetter\n\n\t// ResultMapper provides methods to retrieve and map results.\n\tResultMapper\n\n\t// fmt.Stringer provides `String() string`, you can use `String()` to compile\n\t// the `Selector` into a string.\n\tfmt.Stringer\n\n\t// Arguments returns the arguments that are prepared for this query.\n\tArguments() []interface{}\n}\n\n// Inserter represents an INSERT statement.\ntype Inserter interface {\n\t// Columns represents the COLUMNS clause.\n\t//\n\t// COLUMNS defines the columns that we are going to provide values for.\n\t//\n\t//   i.Columns(\"name\", \"last_name\").Values(...)\n\tColumns(...string) Inserter\n\n\t// Values represents the VALUES clause.\n\t//\n\t// VALUES defines the values of the columns.\n\t//\n\t//   i.Columns(...).Values(\"María\", \"Méndez\")\n\t//\n\t//   i.Values(map[string][string]{\"name\": \"María\"})\n\tValues(...interface{}) Inserter\n\n\t// Arguments returns the arguments that are prepared for this query.\n\tArguments() []interface{}\n\n\t// Returning represents a RETURNING clause.\n\t//\n\t// RETURNING specifies which columns should be returned after INSERT.\n\t//\n\t// RETURNING may not be supported by all SQL databases.\n\tReturning(columns ...string) Inserter\n\n\t// Iterator provides methods to iterate over the results returned by the\n\t// Inserter. This is only possible when using Returning().\n\tIterator() Iterator\n\n\t// IteratorContext provides methods to iterate over the results returned by\n\t// the Inserter. This is only possible when using Returning().\n\tIteratorContext(ctx context.Context) Iterator\n\n\t// Amend lets you alter the query's text just before sending it to the\n\t// database server.\n\tAmend(func(queryIn string) (queryOut string)) Inserter\n\n\t// Batch provies a BatchInserter that can be used to insert many elements at\n\t// once by issuing several calls to Values(). It accepts a size parameter\n\t// which defines the batch size. If size is < 1, the batch size is set to 1.\n\tBatch(size int) BatchInserter\n\n\t// SQLExecer provides the Exec method.\n\tSQLExecer\n\n\t// SQLPreparer provides methods for creating prepared statements.\n\tSQLPreparer\n\n\t// SQLGetter provides methods to return query results from INSERT statements\n\t// that support such feature (e.g.: queries with Returning).\n\tSQLGetter\n\n\t// fmt.Stringer provides `String() string`, you can use `String()` to compile\n\t// the `Inserter` into a string.\n\tfmt.Stringer\n}\n\n// Deleter represents a DELETE statement.\ntype Deleter interface {\n\t// Where represents the WHERE clause.\n\t//\n\t// See Selector.Where for documentation and usage examples.\n\tWhere(...interface{}) Deleter\n\n\t// And appends more constraints to the WHERE clause without overwriting\n\t// conditions that have been already set.\n\tAnd(conds ...interface{}) Deleter\n\n\t// Limit represents the LIMIT clause.\n\t//\n\t// See Selector.Limit for documentation and usage examples.\n\tLimit(int) Deleter\n\n\t// Amend lets you alter the query's text just before sending it to the\n\t// database server.\n\tAmend(func(queryIn string) (queryOut string)) Deleter\n\n\t// SQLPreparer provides methods for creating prepared statements.\n\tSQLPreparer\n\n\t// SQLExecer provides the Exec method.\n\tSQLExecer\n\n\t// fmt.Stringer provides `String() string`, you can use `String()` to compile\n\t// the `Inserter` into a string.\n\tfmt.Stringer\n\n\t// Arguments returns the arguments that are prepared for this query.\n\tArguments() []interface{}\n}\n\n// Updater represents an UPDATE statement.\ntype Updater interface {\n\t// Set represents the SET clause.\n\tSet(...interface{}) Updater\n\n\t// Where represents the WHERE clause.\n\t//\n\t// See Selector.Where for documentation and usage examples.\n\tWhere(...interface{}) Updater\n\n\t// And appends more constraints to the WHERE clause without overwriting\n\t// conditions that have been already set.\n\tAnd(conds ...interface{}) Updater\n\n\t// Limit represents the LIMIT parameter.\n\t//\n\t// See Selector.Limit for documentation and usage examples.\n\tLimit(int) Updater\n\n\t// SQLPreparer provides methods for creating prepared statements.\n\tSQLPreparer\n\n\t// SQLExecer provides the Exec method.\n\tSQLExecer\n\n\t// fmt.Stringer provides `String() string`, you can use `String()` to compile\n\t// the `Inserter` into a string.\n\tfmt.Stringer\n\n\t// Arguments returns the arguments that are prepared for this query.\n\tArguments() []interface{}\n\n\t// Amend lets you alter the query's text just before sending it to the\n\t// database server.\n\tAmend(func(queryIn string) (queryOut string)) Updater\n}\n\n// Paginator provides tools for splitting the results of a query into chunks\n// containing a fixed number of items.\ntype Paginator interface {\n\t// Page sets the page number.\n\tPage(uint) Paginator\n\n\t// Cursor defines the column that is going to be taken as basis for\n\t// cursor-based pagination.\n\t//\n\t// Example:\n\t//\n\t//   a = q.Paginate(10).Cursor(\"id\")\n\t//\t b = q.Paginate(12).Cursor(\"-id\")\n\t//\n\t// You can set \"\" as cursorColumn to disable cursors.\n\tCursor(cursorColumn string) Paginator\n\n\t// NextPage returns the next page according to the cursor. It expects a\n\t// cursorValue, which is the value the cursor column has on the last item of\n\t// the current result set (lower bound).\n\t//\n\t// Example:\n\t//\n\t//   p = q.NextPage(items[len(items)-1].ID)\n\tNextPage(cursorValue interface{}) Paginator\n\n\t// PrevPage returns the previous page according to the cursor. It expects a\n\t// cursorValue, which is the value the cursor column has on the fist item of\n\t// the current result set (upper bound).\n\t//\n\t// Example:\n\t//\n\t//   p = q.PrevPage(items[0].ID)\n\tPrevPage(cursorValue interface{}) Paginator\n\n\t// TotalPages returns the total number of pages in the query.\n\tTotalPages() (uint, error)\n\n\t// TotalEntries returns the total number of entries in the query.\n\tTotalEntries() (uint64, error)\n\n\t// SQLPreparer provides methods for creating prepared statements.\n\tSQLPreparer\n\n\t// SQLGetter provides methods to compile and execute a query that returns\n\t// results.\n\tSQLGetter\n\n\t// Iterator provides methods to iterate over the results returned by the\n\t// Selector.\n\tIterator() Iterator\n\n\t// IteratorContext provides methods to iterate over the results returned by\n\t// the Selector.\n\tIteratorContext(ctx context.Context) Iterator\n\n\t// ResultMapper provides methods to retrieve and map results.\n\tResultMapper\n\n\t// fmt.Stringer provides `String() string`, you can use `String()` to compile\n\t// the `Selector` into a string.\n\tfmt.Stringer\n\n\t// Arguments returns the arguments that are prepared for this query.\n\tArguments() []interface{}\n}\n\n// ResultMapper defined methods for a result mapper.\ntype ResultMapper interface {\n\t// All dumps all the results into the given slice, All() expects a pointer to\n\t// slice of maps or structs.\n\t//\n\t// The behaviour of One() extends to each one of the results.\n\tAll(destSlice interface{}) error\n\n\t// One maps the row that is in the current query cursor into the\n\t// given interface, which can be a pointer to either a map or a\n\t// struct.\n\t//\n\t// If dest is a pointer to map, each one of the columns will create a new map\n\t// key and the values of the result will be set as values for the keys.\n\t//\n\t// Depending on the type of map key and value, the results columns and values\n\t// may need to be transformed.\n\t//\n\t// If dest if a pointer to struct, each one of the fields will be tested for\n\t// a `db` tag which defines the column mapping. The value of the result will\n\t// be set as the value of the field.\n\tOne(dest interface{}) error\n}\n\n// BatchInserter provides an interface to do massive insertions in batches.\ntype BatchInserter interface {\n\t// Values pushes column values to be inserted as part of the batch.\n\tValues(...interface{}) BatchInserter\n\n\t// NextResult dumps the next slice of results to dst, which can mean having\n\t// the IDs of all inserted elements in the batch.\n\tNextResult(dst interface{}) bool\n\n\t// Done signals that no more elements are going to be added.\n\tDone()\n\n\t// Wait blocks until the whole batch is executed.\n\tWait() error\n\n\t// Err returns the last error that happened while executing the batch (or nil\n\t// if no error happened).\n\tErr() error\n}\n"
        },
        {
          "name": "collection.go",
          "type": "blob",
          "size": 2.8095703125,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\n// Collection defines methods to work with database tables or collections.\ntype Collection interface {\n\n\t// Name returns the name of the collection.\n\tName() string\n\n\t// Session returns the Session that was used to create the collection\n\t// reference.\n\tSession() Session\n\n\t// Find defines a new result set.\n\tFind(...interface{}) Result\n\n\tCount() (uint64, error)\n\n\t// Insert inserts a new item into the collection, the type of this item could\n\t// be a map, a struct or pointer to either of them. If the call succeeds and\n\t// if the collection has a primary key, Insert returns the ID of the newly\n\t// added element as an `interface{}`. The underlying type of this ID depends\n\t// on both the database adapter and the column storing the ID.  The ID\n\t// returned by Insert() could be passed directly to Find() to retrieve the\n\t// newly added element.\n\tInsert(interface{}) (InsertResult, error)\n\n\t// InsertReturning is like Insert() but it takes a pointer to map or struct\n\t// and, if the operation succeeds, updates it with data from the newly\n\t// inserted row. If the database does not support transactions this method\n\t// returns db.ErrUnsupported.\n\tInsertReturning(interface{}) error\n\n\t// UpdateReturning takes a pointer to a map or struct and tries to update the\n\t// row the item is refering to. If the element is updated sucessfully,\n\t// UpdateReturning will fetch the row and update the fields of the passed\n\t// item.  If the database does not support transactions this method returns\n\t// db.ErrUnsupported\n\tUpdateReturning(interface{}) error\n\n\t// Exists returns true if the collection exists, false otherwise.\n\tExists() (bool, error)\n\n\t// Truncate removes all elements on the collection.\n\tTruncate() error\n}\n"
        },
        {
          "name": "comparison.go",
          "type": "blob",
          "size": 7.0341796875,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"reflect\"\n\t\"time\"\n\n\t\"github.com/upper/db/v4/internal/adapter\"\n)\n\n// Comparison represents a relationship between values.\ntype Comparison struct {\n\t*adapter.Comparison\n}\n\n// Gte is a comparison that means: is greater than or equal to value.\nfunc Gte(value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorGreaterThanOrEqualTo, value)}\n}\n\n// Lte is a comparison that means: is less than or equal to value.\nfunc Lte(value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorLessThanOrEqualTo, value)}\n}\n\n// Eq is a comparison that means: is equal to value.\nfunc Eq(value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorEqual, value)}\n}\n\n// NotEq is a comparison that means: is not equal to value.\nfunc NotEq(value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorNotEqual, value)}\n}\n\n// Gt is a comparison that means: is greater than value.\nfunc Gt(value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorGreaterThan, value)}\n}\n\n// Lt is a comparison that means: is less than value.\nfunc Lt(value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorLessThan, value)}\n}\n\n// In is a comparison that means: is any of the values.\nfunc In(value ...interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorIn, toInterfaceArray(value))}\n}\n\n// AnyOf is a comparison that means: is any of the values of the slice.\nfunc AnyOf(value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorIn, toInterfaceArray(value))}\n}\n\n// NotIn is a comparison that means: is none of the values.\nfunc NotIn(value ...interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorNotIn, toInterfaceArray(value))}\n}\n\n// NotAnyOf is a comparison that means: is none of the values of the slice.\nfunc NotAnyOf(value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorNotIn, toInterfaceArray(value))}\n}\n\n// After is a comparison that means: is after the (time.Time) value.\nfunc After(value time.Time) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorGreaterThan, value)}\n}\n\n// Before is a comparison that means: is before the (time.Time) value.\nfunc Before(value time.Time) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorLessThan, value)}\n}\n\n// OnOrAfter is a comparison that means: is on or after the (time.Time) value.\nfunc OnOrAfter(value time.Time) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorGreaterThanOrEqualTo, value)}\n}\n\n// OnOrBefore is a comparison that means: is on or before the (time.Time) value.\nfunc OnOrBefore(value time.Time) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorLessThanOrEqualTo, value)}\n}\n\n// Between is a comparison that means: is between lowerBound and upperBound.\nfunc Between(lowerBound interface{}, upperBound interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorBetween, []interface{}{lowerBound, upperBound})}\n}\n\n// NotBetween is a comparison that means: is not between lowerBound and upperBound.\nfunc NotBetween(lowerBound interface{}, upperBound interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorNotBetween, []interface{}{lowerBound, upperBound})}\n}\n\n// Is is a comparison that means: is equivalent to nil, true or false.\nfunc Is(value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorIs, value)}\n}\n\n// IsNot is a comparison that means: is not equivalent to nil, true nor false.\nfunc IsNot(value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorIsNot, value)}\n}\n\n// IsNull is a comparison that means: is equivalent to nil.\nfunc IsNull() *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorIs, nil)}\n}\n\n// IsNotNull is a comparison that means: is not equivalent to nil.\nfunc IsNotNull() *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorIsNot, nil)}\n}\n\n// Like is a comparison that checks whether the reference matches the wildcard\n// value.\nfunc Like(value string) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorLike, value)}\n}\n\n// NotLike is a comparison that checks whether the reference does not match the\n// wildcard value.\nfunc NotLike(value string) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorNotLike, value)}\n}\n\n// RegExp is a comparison that checks whether the reference matches the regular\n// expression.\nfunc RegExp(value string) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorRegExp, value)}\n}\n\n// NotRegExp is a comparison that checks whether the reference does not match\n// the regular expression.\nfunc NotRegExp(value string) *Comparison {\n\treturn &Comparison{adapter.NewComparisonOperator(adapter.ComparisonOperatorNotRegExp, value)}\n}\n\n// Op returns a custom comparison operator.\nfunc Op(customOperator string, value interface{}) *Comparison {\n\treturn &Comparison{adapter.NewCustomComparisonOperator(customOperator, value)}\n}\n\nfunc toInterfaceArray(value interface{}) []interface{} {\n\trv := reflect.ValueOf(value)\n\tswitch rv.Type().Kind() {\n\tcase reflect.Ptr:\n\t\treturn toInterfaceArray(rv.Elem().Interface())\n\tcase reflect.Slice:\n\t\telems := rv.Len()\n\t\targs := make([]interface{}, elems)\n\t\tfor i := 0; i < elems; i++ {\n\t\t\targs[i] = rv.Index(i).Interface()\n\t\t}\n\t\treturn args\n\t}\n\treturn []interface{}{value}\n}\n"
        },
        {
          "name": "comparison_test.go",
          "type": "blob",
          "size": 3.8193359375,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/upper/db/v4/internal/adapter\"\n)\n\nfunc TestComparisonOperators(t *testing.T) {\n\ttestTimeVal := time.Now()\n\n\ttestCases := []struct {\n\t\texpects *adapter.Comparison\n\t\tresult  *Comparison\n\t}{\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorGreaterThanOrEqualTo, 1),\n\t\t\tGte(1),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorLessThanOrEqualTo, 22),\n\t\t\tLte(22),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorEqual, 6),\n\t\t\tEq(6),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorNotEqual, 67),\n\t\t\tNotEq(67),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorGreaterThan, 4),\n\t\t\tGt(4),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorLessThan, 47),\n\t\t\tLt(47),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorIn, []interface{}{1, 22, 34}),\n\t\t\tIn(1, 22, 34),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorGreaterThan, testTimeVal),\n\t\t\tAfter(testTimeVal),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorLessThan, testTimeVal),\n\t\t\tBefore(testTimeVal),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorGreaterThanOrEqualTo, testTimeVal),\n\t\t\tOnOrAfter(testTimeVal),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorLessThanOrEqualTo, testTimeVal),\n\t\t\tOnOrBefore(testTimeVal),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorBetween, []interface{}{11, 35}),\n\t\t\tBetween(11, 35),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorNotBetween, []interface{}{11, 35}),\n\t\t\tNotBetween(11, 35),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorIs, 178),\n\t\t\tIs(178),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorIsNot, 32),\n\t\t\tIsNot(32),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorIs, nil),\n\t\t\tIsNull(),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorIsNot, nil),\n\t\t\tIsNotNull(),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorLike, \"%a%\"),\n\t\t\tLike(\"%a%\"),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorNotLike, \"%z%\"),\n\t\t\tNotLike(\"%z%\"),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorRegExp, \".*\"),\n\t\t\tRegExp(\".*\"),\n\t\t},\n\t\t{\n\t\t\tadapter.NewComparisonOperator(adapter.ComparisonOperatorNotRegExp, \".*\"),\n\t\t\tNotRegExp(\".*\"),\n\t\t},\n\t\t{\n\t\t\tadapter.NewCustomComparisonOperator(\"~\", 56),\n\t\t\tOp(\"~\", 56),\n\t\t},\n\t}\n\n\tfor i := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Case %02d\", i), func(t *testing.T) {\n\t\t\tassert.Equal(t, testCases[i].expects, testCases[i].result.Comparison)\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "cond.go",
          "type": "blob",
          "size": 3.455078125,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n\n\t\"github.com/upper/db/v4/internal/adapter\"\n)\n\n// LogicalExpr represents an expression to be used in logical statements.\ntype LogicalExpr = adapter.LogicalExpr\n\n// LogicalOperator represents a logical operation.\ntype LogicalOperator = adapter.LogicalOperator\n\n// Cond is a map that defines conditions for a query.\n//\n// Each entry of the map represents a condition (a column-value relation bound\n// by a comparison Operator). The comparison can be specified after the column\n// name, if no comparison operator is provided the equality operator is used as\n// default.\n//\n// Examples:\n//\n//\t// Age equals 18.\n//\tdb.Cond{\"age\": 18}\n//\n//\t// Age is greater than or equal to 18.\n//\tdb.Cond{\"age >=\": 18}\n//\n//\t// id is any of the values 1, 2 or 3.\n//\tdb.Cond{\"id IN\": []{1, 2, 3}}\n//\n//\t// Age is lower than 18 (MongoDB syntax)\n//\tdb.Cond{\"age $lt\": 18}\n//\n//\t// age > 32 and age < 35\n//\tdb.Cond{\"age >\": 32, \"age <\": 35}\ntype Cond map[interface{}]interface{}\n\n// Empty returns false if there are no conditions.\nfunc (c Cond) Empty() bool {\n\tfor range c {\n\t\treturn false\n\t}\n\treturn true\n}\n\n// Constraints returns each one of the Cond map entires as a constraint.\nfunc (c Cond) Constraints() []adapter.Constraint {\n\tz := make([]adapter.Constraint, 0, len(c))\n\tfor _, k := range c.keys() {\n\t\tz = append(z, adapter.NewConstraint(k, c[k]))\n\t}\n\treturn z\n}\n\n// Operator returns the equality operator.\nfunc (c Cond) Operator() LogicalOperator {\n\treturn adapter.DefaultLogicalOperator\n}\n\nfunc (c Cond) keys() []interface{} {\n\tkeys := make(condKeys, 0, len(c))\n\tfor k := range c {\n\t\tkeys = append(keys, k)\n\t}\n\tif len(c) > 1 {\n\t\tsort.Sort(keys)\n\t}\n\treturn keys\n}\n\n// Expressions returns all the expressions contained in the condition.\nfunc (c Cond) Expressions() []LogicalExpr {\n\tz := make([]LogicalExpr, 0, len(c))\n\tfor _, k := range c.keys() {\n\t\tz = append(z, Cond{k: c[k]})\n\t}\n\treturn z\n}\n\ntype condKeys []interface{}\n\nfunc (ck condKeys) Len() int {\n\treturn len(ck)\n}\n\nfunc (ck condKeys) Less(i, j int) bool {\n\treturn fmt.Sprintf(\"%v\", ck[i]) < fmt.Sprintf(\"%v\", ck[j])\n}\n\nfunc (ck condKeys) Swap(i, j int) {\n\tck[i], ck[j] = ck[j], ck[i]\n}\n\nfunc defaultJoin(in ...adapter.LogicalExpr) []adapter.LogicalExpr {\n\tfor i := range in {\n\t\tcond, ok := in[i].(Cond)\n\t\tif ok && !cond.Empty() {\n\t\t\tin[i] = And(cond)\n\t\t}\n\t}\n\treturn in\n}\n\nvar (\n\t_ = LogicalExpr(Cond{})\n)\n"
        },
        {
          "name": "cond_test.go",
          "type": "blob",
          "size": 0.814453125,
          "content": "package db\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCond(t *testing.T) {\n\tt.Run(\"Base\", func(t *testing.T) {\n\t\tvar c Cond\n\n\t\tc = Cond{}\n\t\tassert.True(t, c.Empty())\n\n\t\tc = Cond{\"id\": 1}\n\t\tassert.False(t, c.Empty())\n\t})\n\n\tt.Run(\"And\", func(t *testing.T) {\n\t\tvar a *AndExpr\n\n\t\ta = And()\n\t\tassert.True(t, a.Empty())\n\n\t\t_ = a.And(Cond{\"id\": 1})\n\t\tassert.True(t, a.Empty(), \"conditions are immutable\")\n\n\t\ta = a.And(Cond{\"name\": \"Ana\"})\n\t\tassert.False(t, a.Empty())\n\n\t\ta = a.And().And()\n\t\tassert.False(t, a.Empty())\n\t})\n\n\tt.Run(\"Or\", func(t *testing.T) {\n\t\tvar a *OrExpr\n\n\t\ta = Or()\n\t\tassert.True(t, a.Empty())\n\n\t\t_ = a.Or(Cond{\"id\": 1})\n\t\tassert.True(t, a.Empty(), \"conditions are immutable\")\n\n\t\ta = a.Or(Cond{\"name\": \"Ana\"})\n\t\tassert.False(t, a.Empty())\n\n\t\ta = a.Or().Or()\n\t\tassert.False(t, a.Empty())\n\t})\n}\n"
        },
        {
          "name": "connection_url.go",
          "type": "blob",
          "size": 1.3271484375,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\n// ConnectionURL represents a data source name (DSN).\ntype ConnectionURL interface {\n\t// String returns the connection string that is going to be passed to the\n\t// adapter.\n\tString() string\n}\n"
        },
        {
          "name": "context.go",
          "type": "blob",
          "size": 0.0341796875,
          "content": "package db\n\ntype ContextKey string\n"
        },
        {
          "name": "db.go",
          "type": "blob",
          "size": 2.1826171875,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Package db (or upper/db) provides an agnostic data access layer to work with\n// different databases.\n//\n// Install upper/db:\n//\n//\tgo get github.com/upper/db\n//\n// Usage\n//\n//\tpackage main\n//\n//\timport (\n//\t\t\"log\"\n//\n//\t\t\"github.com/upper/db/v4/adapter/postgresql\" // Imports the postgresql adapter.\n//\t)\n//\n//\tvar settings = postgresql.ConnectionURL{\n//\t\tDatabase: `booktown`,\n//\t\tHost:     `demo.upper.io`,\n//\t\tUser:     `demouser`,\n//\t\tPassword: `demop4ss`,\n//\t}\n//\n//\t// Book represents a book.\n//\ttype Book struct {\n//\t\tID        uint   `db:\"id\"`\n//\t\tTitle     string `db:\"title\"`\n//\t\tAuthorID  uint   `db:\"author_id\"`\n//\t\tSubjectID uint   `db:\"subject_id\"`\n//\t}\n//\n//\tfunc main() {\n//\t\tsess, err := postgresql.Open(settings)\n//\t\tif err != nil {\n//\t\t\tlog.Fatal(err)\n//\t\t}\n//\t\tdefer sess.Close()\n//\n//\t\tvar books []Book\n//\t\tif err := sess.Collection(\"books\").Find().OrderBy(\"title\").All(&books); err != nil {\n//\t\t\tlog.Fatal(err)\n//\t\t}\n//\n//\t\tlog.Println(\"Books:\")\n//\t\tfor _, book := range books {\n//\t\t\tlog.Printf(\"%q (ID: %d)\\n\", book.Title, book.ID)\n//\t\t}\n//\t}\npackage db\n"
        },
        {
          "name": "errors.go",
          "type": "blob",
          "size": 3.87890625,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"errors\"\n)\n\n// Error messages\nvar (\n\tErrMissingAdapter           = errors.New(`upper: missing adapter`)\n\tErrAlreadyWithinTransaction = errors.New(`upper: already within a transaction`)\n\tErrCollectionDoesNotExist   = errors.New(`upper: collection does not exist`)\n\tErrExpectingNonNilModel     = errors.New(`upper: expecting non nil model`)\n\tErrExpectingPointerToStruct = errors.New(`upper: expecting pointer to struct`)\n\tErrGivingUpTryingToConnect  = errors.New(`upper: giving up trying to connect: too many clients`)\n\tErrInvalidCollection        = errors.New(`upper: invalid collection`)\n\tErrMissingCollectionName    = errors.New(`upper: missing collection name`)\n\tErrMissingConditions        = errors.New(`upper: missing selector conditions`)\n\tErrMissingConnURL           = errors.New(`upper: missing DSN`)\n\tErrMissingDatabaseName      = errors.New(`upper: missing database name`)\n\tErrNoMoreRows               = errors.New(`upper: no more rows in this result set`)\n\tErrNotConnected             = errors.New(`upper: not connected to a database`)\n\tErrNotImplemented           = errors.New(`upper: call not implemented`)\n\tErrQueryIsPending           = errors.New(`upper: can't execute this instruction while the result set is still open`)\n\tErrQueryLimitParam          = errors.New(`upper: a query can accept only one limit parameter`)\n\tErrQueryOffsetParam         = errors.New(`upper: a query can accept only one offset parameter`)\n\tErrQuerySortParam           = errors.New(`upper: a query can accept only one order-by parameter`)\n\tErrSockerOrHost             = errors.New(`upper: you may connect either to a UNIX socket or a TCP address, but not both`)\n\tErrTooManyClients           = errors.New(`upper: can't connect to database server: too many clients`)\n\tErrUndefined                = errors.New(`upper: value is undefined`)\n\tErrUnknownConditionType     = errors.New(`upper: arguments of type %T can't be used as constraints`)\n\tErrUnsupported              = errors.New(`upper: action is not supported by the DBMS`)\n\tErrUnsupportedDestination   = errors.New(`upper: unsupported destination type`)\n\tErrUnsupportedType          = errors.New(`upper: type does not support marshaling`)\n\tErrUnsupportedValue         = errors.New(`upper: value does not support unmarshaling`)\n\tErrNilRecord                = errors.New(`upper: invalid item (nil)`)\n\tErrRecordIDIsZero           = errors.New(`upper: item ID is not defined`)\n\tErrMissingPrimaryKeys       = errors.New(`upper: collection %q has no primary keys`)\n\tErrWarnSlowQuery            = errors.New(`upper: slow query`)\n\tErrTransactionAborted       = errors.New(`upper: transaction was aborted`)\n\tErrNotWithinTransaction     = errors.New(`upper: not within transaction`)\n\tErrNotSupportedByAdapter    = errors.New(`upper: not supported by adapter`)\n)\n"
        },
        {
          "name": "function.go",
          "type": "blob",
          "size": 1.61328125,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"github.com/upper/db/v4/internal/adapter\"\n)\n\n// FuncExpr represents functions.\ntype FuncExpr = adapter.FuncExpr\n\n// Func returns a database function expression.\n//\n// Examples:\n//\n//\t// MOD(29, 9)\n//\tdb.Func(\"MOD\", 29, 9)\n//\n//\t// CONCAT(\"foo\", \"bar\")\n//\tdb.Func(\"CONCAT\", \"foo\", \"bar\")\n//\n//\t// NOW()\n//\tdb.Func(\"NOW\")\n//\n//\t// RTRIM(\"Hello  \")\n//\tdb.Func(\"RTRIM\", \"Hello  \")\nfunc Func(name string, args ...interface{}) *FuncExpr {\n\treturn adapter.NewFuncExpr(name, args)\n}\n"
        },
        {
          "name": "function_test.go",
          "type": "blob",
          "size": 1.4072265625,
          "content": "package db\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCustomFunctions(t *testing.T) {\n\tt.Run(\"Nil arguments\", func(t *testing.T) {\n\t\tfn := Func(\"HELLO\")\n\t\tassert.Equal(t, \"HELLO\", fn.Name())\n\t\tassert.Equal(t, []interface{}(nil), fn.Arguments())\n\t})\n\n\tt.Run(\"Single argument\", func(t *testing.T) {\n\t\tfn := Func(\"CONCAT\", \"a\")\n\t\tassert.Equal(t, \"CONCAT\", fn.Name())\n\t\tassert.Equal(t, []interface{}{\"a\"}, fn.Arguments())\n\t})\n\n\tt.Run(\"Two arguments\", func(t *testing.T) {\n\t\tfn := Func(\"MOD\", 29, 9)\n\t\tassert.Equal(t, \"MOD\", fn.Name())\n\t\tassert.Equal(t, []interface{}{29, 9}, fn.Arguments())\n\t})\n\n\tt.Run(\"Multiple arguments\", func(t *testing.T) {\n\t\tfn := Func(\"CONCAT\", \"a\", \"b\", \"c\")\n\t\tassert.Equal(t, \"CONCAT\", fn.Name())\n\t\tassert.Equal(t, []interface{}{\"a\", \"b\", \"c\"}, fn.Arguments())\n\t})\n\n\tt.Run(\"Slice argument\", func(t *testing.T) {\n\t\tfn := Func(\"IN\", []interface{}{\"a\", \"b\", \"c\"})\n\t\tassert.Equal(t, \"IN\", fn.Name())\n\t\tassert.Equal(t, []interface{}{[]interface{}{\"a\", \"b\", \"c\"}}, fn.Arguments())\n\t})\n\n\tt.Run(\"Slice argument with one element\", func(t *testing.T) {\n\t\tfn := Func(\"IN\", []interface{}{\"a\"})\n\t\tassert.Equal(t, \"IN\", fn.Name())\n\t\tassert.Equal(t, []interface{}{[]interface{}{\"a\"}}, fn.Arguments())\n\t})\n\n\tt.Run(\"Nil slice argument\", func(t *testing.T) {\n\t\tfn := Func(\"IN\", []interface{}(nil))\n\t\tassert.Equal(t, \"IN\", fn.Name())\n\t\tassert.Equal(t, []interface{}{[]interface{}(nil)}, fn.Arguments())\n\t})\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.03515625,
          "content": "module github.com/upper/db/v4\n\ngo 1.15\n\nrequire (\n\tgithub.com/denisenkom/go-mssqldb v0.12.3\n\tgithub.com/go-sql-driver/mysql v1.8.1\n\tgithub.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9 // indirect\n\tgithub.com/google/uuid v1.1.1\n\tgithub.com/ipfs/go-detect-race v0.0.1\n\tgithub.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 // indirect\n\tgithub.com/jackc/pgtype v1.14.3\n\tgithub.com/jackc/pgx/v4 v4.18.3\n\tgithub.com/jackc/pgx/v5 v5.6.0 // indirect\n\tgithub.com/lib/pq v1.10.9\n\tgithub.com/mattn/go-sqlite3 v1.14.22\n\tgithub.com/segmentio/fasthash v1.0.3\n\tgithub.com/sirupsen/logrus v1.9.3\n\tgithub.com/stretchr/testify v1.9.0\n\tgolang.org/x/crypto v0.24.0 // indirect\n\tgopkg.in/mgo.v2 v2.0.0-20190816093944-a6b53ec6cb22\n\tmodernc.org/b v1.1.0 // indirect\n\tmodernc.org/db v1.0.10 // indirect\n\tmodernc.org/file v1.0.8 // indirect\n\tmodernc.org/fileutil v1.3.0 // indirect\n\tmodernc.org/golex v1.1.0 // indirect\n\tmodernc.org/lldb v1.0.8 // indirect\n\tmodernc.org/ql v1.4.7\n\tmodernc.org/sortutil v1.2.0 // indirect\n\tmodernc.org/zappy v1.1.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 34.6806640625,
          "content": "filippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=\nfilippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore v0.19.0/go.mod h1:h6H6c8enJmmocHUbLiiGY6sx7f9i+X3m1CHdd5c6Rdw=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity v0.11.0/go.mod h1:HcM1YX14R7CJcghJGOYCgdezslRSVzqwLf/q+4Y2r/0=\ngithub.com/Azure/azure-sdk-for-go/sdk/internal v0.7.0/go.mod h1:yqy467j36fJxcRV2TzfVZ1pCb5vxm4BtZPUdYWe/Xo8=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/Masterminds/semver/v3 v3.1.1 h1:hLg3sBzpNErnxhQtUy/mmLR2I9foDujNK030IGemrRc=\ngithub.com/Masterminds/semver/v3 v3.1.1/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=\ngithub.com/cockroachdb/apd v1.1.0 h1:3LFP3629v+1aKXU5Q37mxmRxX/pIu1nijXydLShEq5I=\ngithub.com/cockroachdb/apd v1.1.0/go.mod h1:8Sl8LxpKi29FqWXR16WEFZRNSz3SoPzUzeMeY4+DwBQ=\ngithub.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd v0.0.0-20190719114852-fd7a80b32e1f/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/creack/pty v1.1.7/go.mod h1:lj5s0c3V2DBrqTV7llrYr5NG6My20zk30Fl46Y7DoTY=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/denisenkom/go-mssqldb v0.12.3 h1:pBSGx9Tq67pBOTLmxNuirNTeB8Vjmf886Kx+8Y+8shw=\ngithub.com/denisenkom/go-mssqldb v0.12.3/go.mod h1:k0mtMFOnU+AihqFxPMiF05rtiDrorD1Vrm1KEz5hxDo=\ngithub.com/dnaeon/go-vcr v1.2.0/go.mod h1:R4UdLID7HZT3taECzJs4YgbbH6PIGXB6W/sc5OLb6RQ=\ngithub.com/edsrzf/mmap-go v1.1.0 h1:6EUwBLQ/Mcr1EYLE4Tn1VdW1A4ckqCQWZBw8Hr0kjpQ=\ngithub.com/edsrzf/mmap-go v1.1.0/go.mod h1:19H/e8pUPLicwkyNgOykDXkJ9F0MHE+Z52B8EIth78Q=\ngithub.com/go-kit/log v0.1.0/go.mod h1:zbhenjAZHb184qTLMA9ZjW7ThYL0H2mk7Q6pNt4vbaY=\ngithub.com/go-logfmt/logfmt v0.5.0/go.mod h1:wCYkCAKZfumFQihp8CzCvQ3paCTfi41vtzG1KdI/P7A=\ngithub.com/go-sql-driver/mysql v1.7.1 h1:lUIinVbN1DY0xBg0eMOzmmtGoHwWBbvnWubQUrtU8EI=\ngithub.com/go-sql-driver/mysql v1.7.1/go.mod h1:OXbVy3sEdcQ2Doequ6Z5BW6fXNQTmx+9S1MCJN5yJMI=\ngithub.com/go-sql-driver/mysql v1.8.1 h1:LedoTUt/eveggdHS9qUFC1EFSa8bU2+1pZjSRpvNJ1Y=\ngithub.com/go-sql-driver/mysql v1.8.1/go.mod h1:wEBSXgmK//2ZFJyE+qWnIsVGmvmEKlqwuVSjsCm7DZg=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/gofrs/uuid v4.0.0+incompatible h1:1SD/1F5pU8p29ybwgQSwpQk+mwdRrXCYuPhW6m+TnJw=\ngithub.com/gofrs/uuid v4.0.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\ngithub.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9 h1:au07oEsX2xN0ktxqI+Sida1w446QrXBRJ0nee3SNZlA=\ngithub.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\ngithub.com/golang-sql/sqlexp v0.1.0 h1:ZCD6MBpcuOVfGVqsEmY5/4FtYiKz6tSyUv9LPEDei6A=\ngithub.com/golang-sql/sqlexp v0.1.0/go.mod h1:J4ad9Vo8ZCWQ2GMrC4UCQy1JpCbwU9m3EOqtpKwwwHI=\ngithub.com/golang/snappy v0.0.3 h1:fHPg5GQYlCeLIPB9BZqMVR5nR9A+IM5zcgeTdjMYmLA=\ngithub.com/golang/snappy v0.0.3/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=\ngithub.com/google/uuid v1.1.1 h1:Gkbcsh/GbpXz7lPftLA3P6TYMwjCLYm83jiFQZF/3gY=\ngithub.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/ipfs/go-detect-race v0.0.1 h1:qX/xay2W3E4Q1U7d9lNs1sU9nvguX0a7319XbyQ6cOk=\ngithub.com/ipfs/go-detect-race v0.0.1/go.mod h1:8BNT7shDZPo99Q74BpGMK+4D8Mn4j46UU0LZ723meps=\ngithub.com/jackc/chunkreader v1.0.0 h1:4s39bBR8ByfqH+DKm8rQA3E1LHZWB9XWcrz8fqaZbe0=\ngithub.com/jackc/chunkreader v1.0.0/go.mod h1:RT6O25fNZIuasFJRyZ4R/Y2BbhasbmZXF9QQ7T3kePo=\ngithub.com/jackc/chunkreader/v2 v2.0.0/go.mod h1:odVSm741yZoC3dpHEUXIqA9tQRhFrgOHwnPIn9lDKlk=\ngithub.com/jackc/chunkreader/v2 v2.0.1 h1:i+RDz65UE+mmpjTfyz0MoVTnzeYxroil2G82ki7MGG8=\ngithub.com/jackc/chunkreader/v2 v2.0.1/go.mod h1:odVSm741yZoC3dpHEUXIqA9tQRhFrgOHwnPIn9lDKlk=\ngithub.com/jackc/pgconn v0.0.0-20190420214824-7e0022ef6ba3/go.mod h1:jkELnwuX+w9qN5YIfX0fl88Ehu4XC3keFuOJJk9pcnA=\ngithub.com/jackc/pgconn v0.0.0-20190824142844-760dd75542eb/go.mod h1:lLjNuW/+OfW9/pnVKPazfWOgNfH2aPem8YQ7ilXGvJE=\ngithub.com/jackc/pgconn v0.0.0-20190831204454-2fabfa3c18b7/go.mod h1:ZJKsE/KZfsUgOEh9hBm+xYTstcNHg7UPMVJqRfQxq4s=\ngithub.com/jackc/pgconn v1.8.0/go.mod h1:1C2Pb36bGIP9QHGBYCjnyhqu7Rv3sGshaQUvmfGIB/o=\ngithub.com/jackc/pgconn v1.9.0/go.mod h1:YctiPyvzfU11JFxoXokUOOKQXQmDMoJL9vJzHH8/2JY=\ngithub.com/jackc/pgconn v1.9.1-0.20210724152538-d89c8390a530/go.mod h1:4z2w8XhRbP1hYxkpTuBjTS3ne3J48K83+u0zoyvg2pI=\ngithub.com/jackc/pgconn v1.14.0/go.mod h1:9mBNlny0UvkgJdCDvdVHYSjI+8tD2rnKK69Wz8ti++E=\ngithub.com/jackc/pgconn v1.14.1 h1:smbxIaZA08n6YuxEX1sDyjV/qkbtUtkH20qLkR9MUR4=\ngithub.com/jackc/pgconn v1.14.1/go.mod h1:9mBNlny0UvkgJdCDvdVHYSjI+8tD2rnKK69Wz8ti++E=\ngithub.com/jackc/pgconn v1.14.3 h1:bVoTr12EGANZz66nZPkMInAV/KHD2TxH9npjXXgiB3w=\ngithub.com/jackc/pgconn v1.14.3/go.mod h1:RZbme4uasqzybK2RK5c65VsHxoyaml09lx3tXOcO/VM=\ngithub.com/jackc/pgio v1.0.0 h1:g12B9UwVnzGhueNavwioyEEpAmqMe1E/BN9ES+8ovkE=\ngithub.com/jackc/pgio v1.0.0/go.mod h1:oP+2QK2wFfUWgr+gxjoBH9KGBb31Eio69xUb0w5bYf8=\ngithub.com/jackc/pgmock v0.0.0-20190831213851-13a1b77aafa2/go.mod h1:fGZlG77KXmcq05nJLRkk0+p82V8B8Dw8KN2/V9c/OAE=\ngithub.com/jackc/pgmock v0.0.0-20201204152224-4fe30f7445fd/go.mod h1:hrBW0Enj2AZTNpt/7Y5rr2xe/9Mn757Wtb2xeBzPv2c=\ngithub.com/jackc/pgmock v0.0.0-20210724152146-4ad1a8207f65 h1:DadwsjnMwFjfWc9y5Wi/+Zz7xoE5ALHsRQlOctkOiHc=\ngithub.com/jackc/pgmock v0.0.0-20210724152146-4ad1a8207f65/go.mod h1:5R2h2EEX+qri8jOWMbJCtaPWkrrNc7OHwsp2TCqp7ak=\ngithub.com/jackc/pgpassfile v1.0.0 h1:/6Hmqy13Ss2zCq62VdNG8tM1wchn8zjSGOBJ6icpsIM=\ngithub.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=\ngithub.com/jackc/pgproto3 v1.1.0 h1:FYYE4yRw+AgI8wXIinMlNjBbp/UitDJwfj5LqqewP1A=\ngithub.com/jackc/pgproto3 v1.1.0/go.mod h1:eR5FA3leWg7p9aeAqi37XOTgTIbkABlvcPB3E5rlc78=\ngithub.com/jackc/pgproto3/v2 v2.0.0-alpha1.0.20190420180111-c116219b62db/go.mod h1:bhq50y+xrl9n5mRYyCBFKkpRVTLYJVWeCc+mEAI3yXA=\ngithub.com/jackc/pgproto3/v2 v2.0.0-alpha1.0.20190609003834-432c2951c711/go.mod h1:uH0AWtUmuShn0bcesswc4aBTWGvw0cAxIJp+6OB//Wg=\ngithub.com/jackc/pgproto3/v2 v2.0.0-rc3/go.mod h1:ryONWYqW6dqSg1Lw6vXNMXoBJhpzvWKnT95C46ckYeM=\ngithub.com/jackc/pgproto3/v2 v2.0.0-rc3.0.20190831210041-4c03ce451f29/go.mod h1:ryONWYqW6dqSg1Lw6vXNMXoBJhpzvWKnT95C46ckYeM=\ngithub.com/jackc/pgproto3/v2 v2.0.6/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgproto3/v2 v2.1.1/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgproto3/v2 v2.3.2 h1:7eY55bdBeCz1F2fTzSz69QC+pG46jYq9/jtSPiJ5nn0=\ngithub.com/jackc/pgproto3/v2 v2.3.2/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgproto3/v2 v2.3.3 h1:1HLSx5H+tXR9pW3in3zaztoEwQYRC9SQaYUHjTSUOag=\ngithub.com/jackc/pgproto3/v2 v2.3.3/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b/go.mod h1:vsD4gTJCa9TptPL8sPkXrLZ+hDuNrZCnj29CQpr4X1E=\ngithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a h1:bbPeKD0xmW/Y25WS6cokEszi5g+S0QxI/d45PkRi7Nk=\ngithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a/go.mod h1:5TJZWKEWniPve33vlWYSoGYefn3gLQRzjfDlhSJ9ZKM=\ngithub.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 h1:iCEnooe7UlwOQYpKFhBabPMi4aNAfoODPEFNiAnClxo=\ngithub.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761/go.mod h1:5TJZWKEWniPve33vlWYSoGYefn3gLQRzjfDlhSJ9ZKM=\ngithub.com/jackc/pgtype v0.0.0-20190421001408-4ed0de4755e0/go.mod h1:hdSHsc1V01CGwFsrv11mJRHWJ6aifDLfdV3aVjFF0zg=\ngithub.com/jackc/pgtype v0.0.0-20190824184912-ab885b375b90/go.mod h1:KcahbBH1nCMSo2DXpzsoWOAfFkdEtEJpPbVLq8eE+mc=\ngithub.com/jackc/pgtype v0.0.0-20190828014616-a8802b16cc59/go.mod h1:MWlu30kVJrUS8lot6TQqcg7mtthZ9T0EoIBFiJcmcyw=\ngithub.com/jackc/pgtype v1.8.1-0.20210724151600-32e20a603178/go.mod h1:C516IlIV9NKqfsMCXTdChteoXmwgUceqaLfjg2e3NlM=\ngithub.com/jackc/pgtype v1.14.0 h1:y+xUdabmyMkJLyApYuPj38mW+aAIqCe5uuBB51rH3Vw=\ngithub.com/jackc/pgtype v1.14.0/go.mod h1:LUMuVrfsFfdKGLw+AFFVv6KtHOFMwRgDDzBt76IqCA4=\ngithub.com/jackc/pgtype v1.14.3 h1:h6W9cPuHsRWQFTWUZMAKMgG5jSwQI0Zurzdvlx3Plus=\ngithub.com/jackc/pgtype v1.14.3/go.mod h1:aKeozOde08iifGosdJpz9MBZonJOUJxqNpPBcMJTlVA=\ngithub.com/jackc/pgx/v4 v4.0.0-20190420224344-cc3461e65d96/go.mod h1:mdxmSJJuR08CZQyj1PVQBHy9XOp5p8/SHH6a0psbY9Y=\ngithub.com/jackc/pgx/v4 v4.0.0-20190421002000-1b8f0016e912/go.mod h1:no/Y67Jkk/9WuGR0JG/JseM9irFbnEPbuWV2EELPNuM=\ngithub.com/jackc/pgx/v4 v4.0.0-pre1.0.20190824185557-6972a5742186/go.mod h1:X+GQnOEnf1dqHGpw7JmHqHc1NxDoalibchSk9/RWuDc=\ngithub.com/jackc/pgx/v4 v4.12.1-0.20210724153913-640aa07df17c/go.mod h1:1QD0+tgSXP7iUjYm9C1NxKhny7lq6ee99u/z+IHFcgs=\ngithub.com/jackc/pgx/v4 v4.18.1 h1:YP7G1KABtKpB5IHrO9vYwSrCOhs7p3uqhvhhQBptya0=\ngithub.com/jackc/pgx/v4 v4.18.1/go.mod h1:FydWkUyadDmdNH/mHnGob881GawxeEm7TcMCzkb+qQE=\ngithub.com/jackc/pgx/v4 v4.18.2/go.mod h1:Ey4Oru5tH5sB6tV7hDmfWFahwF15Eb7DNXlRKx2CkVw=\ngithub.com/jackc/pgx/v4 v4.18.3 h1:dE2/TrEsGX3RBprb3qryqSV9Y60iZN1C6i8IrmW9/BA=\ngithub.com/jackc/pgx/v4 v4.18.3/go.mod h1:Ey4Oru5tH5sB6tV7hDmfWFahwF15Eb7DNXlRKx2CkVw=\ngithub.com/jackc/pgx/v5 v5.6.0 h1:SWJzexBzPL5jb0GEsrPMLIsi/3jOo7RHlzTjcAeDrPY=\ngithub.com/jackc/pgx/v5 v5.6.0/go.mod h1:DNZ/vlrUnhWCoFGxHAG8U2ljioxukquj7utPDgtQdTw=\ngithub.com/jackc/puddle v0.0.0-20190413234325-e4ced69a3a2b/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v0.0.0-20190608224051-11cab39313c9/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v1.1.3/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v1.3.0 h1:eHK/5clGOatcjX3oWGBO/MpxpbHzSwud5EWTSCI+MX0=\ngithub.com/jackc/puddle v1.3.0/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle/v2 v2.2.1 h1:RhxXJtFG022u4ibrCSMSiu5aOq1i77R3OHKNJj77OAk=\ngithub.com/jackc/puddle/v2 v2.2.1/go.mod h1:vriiEXHvEE654aYKXXjOvZM39qJ0q+azkZFrfEOc3H4=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.0 h1:WgNl7dwNpEZ6jJ9k1snq4pZsg7DOEN8hP9Xw0Tsjwk0=\ngithub.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/pty v1.1.8/go.mod h1:O1sed60cT9XZ5uDucP5qwvh+TE3NnUj51EiZO/lmSfw=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.1.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.10.2/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=\ngithub.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/mattn/go-colorable v0.1.1/go.mod h1:FuOcm+DKB9mbwrcAfNl7/TZVBZ6rcnceauSikq3lYCQ=\ngithub.com/mattn/go-colorable v0.1.6/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-isatty v0.0.5/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.7/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-sqlite3 v1.14.18 h1:JL0eqdCOq6DJVNPSvArO/bIV9/P7fbGrV00LZHc+5aI=\ngithub.com/mattn/go-sqlite3 v1.14.18/go.mod h1:2eHXhiwb8IkHr+BDWZGa96P6+rkvnG63S2DGjv9HUNg=\ngithub.com/mattn/go-sqlite3 v1.14.22 h1:2gZY6PC6kBnID23Tichd1K+Z0oS6nE/XwU+Vz/5o4kU=\ngithub.com/mattn/go-sqlite3 v1.14.22/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=\ngithub.com/modocache/gover v0.0.0-20171022184752-b58185e213c5/go.mod h1:caMODM3PzxT8aQXRPkAt8xlV/e7d7w8GM5g0fa5F0D8=\ngithub.com/pkg/browser v0.0.0-20180916011732-0a3d74bf9ce4/go.mod h1:4OwLy04Bl9Ef3GJJCoec+30X3LQs/0/m4HFRt/2LUSA=\ngithub.com/pkg/errors v0.8.1 h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/remyoudompheng/bigfft v0.0.0-20190728182440-6a916e37a237/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=\ngithub.com/remyoudompheng/bigfft v0.0.0-20200410134404-eec4a21b6bb0/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=\ngithub.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec h1:W09IVJc94icq4NjY3clb7Lk8O1qJ8BdBEF8z0ibU0rE=\ngithub.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=\ngithub.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=\ngithub.com/rs/xid v1.2.1/go.mod h1:+uKXf+4Djp6Md1KODXJxgGQPKngRmWyn10oCKFzNHOQ=\ngithub.com/rs/zerolog v1.13.0/go.mod h1:YbFCdg8HfsridGWAh22vktObvhZbQsZXe4/zB0OKkWU=\ngithub.com/rs/zerolog v1.15.0/go.mod h1:xYTKnLHcpfU2225ny5qZjxnj9NvkumZYjJHlAThCjNc=\ngithub.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=\ngithub.com/segmentio/fasthash v1.0.3 h1:EI9+KE1EwvMLBWwjpRDc+fEM+prwxDYbslddQGtrmhM=\ngithub.com/segmentio/fasthash v1.0.3/go.mod h1:waKX8l2N8yckOgmSsXJi7x1ZfdKZ4x7KRMzBtS3oedY=\ngithub.com/shopspring/decimal v0.0.0-20180709203117-cd690d0c9e24/go.mod h1:M+9NzErvs504Cn4c5DxATwIqPbtswREoFCre64PpcG4=\ngithub.com/shopspring/decimal v1.2.0 h1:abSATXmQEYyShuxI4/vyW3tV1MrKAJzCZ/0zLUXYbsQ=\ngithub.com/shopspring/decimal v1.2.0/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.2.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/zenazn/goji v0.9.0/go.mod h1:7S9M489iMyHBNxwZnk9/EHS098H4/F6TATF2mIxtB1Q=\ngo.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/atomic v1.5.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/atomic v1.6.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=\ngo.uber.org/multierr v1.3.0/go.mod h1:VgVr7evmIr6uPjLBxg28wmKNXyqE9akIJ5XnfpiKl+4=\ngo.uber.org/multierr v1.5.0/go.mod h1:FeouvMocqHpRaaGuG9EjoKcStLC43Zu/fmqdUMPcKYU=\ngo.uber.org/tools v0.0.0-20190618225709-2cfd321de3ee/go.mod h1:vJERXedbb3MVM5f9Ejo0C68/HhF8uaILCdgjnY+goOA=\ngo.uber.org/zap v1.9.1/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.13.0/go.mod h1:zwrFLgMcdUuIBviXEYEH1YKNaOBnKXsx2IPda5bBwHM=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190411191339-88737f569e3a/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190820162420-60c769a6c586/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201016220609-9e8e0b390897/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201203163018-be400aefbc4c/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/crypto v0.0.0-20210616213533-5ff15b29337e/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20220622213112-05595931fe9d/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.6.0/go.mod h1:OFC/31mSvZgRz0V1QTNCzfAI1aIRzbiufJtkMIlEp58=\ngolang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=\ngolang.org/x/crypto v0.14.0 h1:wBqGXzWJW6m1XrIKlAH0Hs1JJ7+9KBwnIO8v66Q9cHc=\ngolang.org/x/crypto v0.14.0/go.mod h1:MVFd36DqK4CsrnJYDkBA3VC4m2GkXAM0PvzMCn4JQf4=\ngolang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=\ngolang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\ngolang.org/x/crypto v0.20.0/go.mod h1:Xwo95rrVNIoSMx9wa1JroENMToLWn3RNVrTBpLHgZPQ=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/crypto v0.24.0 h1:mnl8DM0o513X8fdIkmyFE/5hTYxbwYOjDS/+rK6qpRI=\ngolang.org/x/crypto v0.24.0/go.mod h1:Z1PMYSOR5nyMcyAVAIQSKCDwalqy85Aqn1x3Ws4L5DM=\ngolang.org/x/exp v0.0.0-20181106170214-d68db9428509/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190813141303-74dc4d7220e7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210610132358-84b48f89b13b/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\ngolang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.7.0 h1:YsImfSBoP9QPYL0xyKJPq0gcaJdG3rInoqxTWbfQu9M=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190403152447-81d4e9dc473e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.13.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.14.0 h1:Vz7Qs629MkJkGyHxUlRHizWJRG2j8fbQKjELVSNhy7Q=\ngolang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.21.0 h1:rF+pYz3DAGSQAxAu1CbC7catZg4ebC4UIeIhKxBZvws=\ngolang.org/x/sys v0.21.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=\ngolang.org/x/term v0.0.0-20201117132131-f5c789dd3221/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=\ngolang.org/x/term v0.13.0/go.mod h1:LTmsnFJwVN6bCy1rVCoS+qHT1HhALEFxKncY3WNNh4U=\ngolang.org/x/term v0.15.0/go.mod h1:BDl952bC7+uMoWR75FIrCDx79TPU9oHkTZ9yRbYOrX0=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=\ngolang.org/x/term v0.21.0/go.mod h1:ooXLefLobQVslOqselCNF4SxFAaoS6KujMbsGzSDmX0=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.16.0 h1:a94ExnEXNtEwYLGJSIUxnWoxoRz/ZcCsV63ROupILh4=\ngolang.org/x/text v0.16.0/go.mod h1:GhwF1Be+LQoKShO3cGOHzqOgRrGaYc9AvblQOmPVHnI=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190425163242-31fd60d6bfdc/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190823170909-c4a336ef6a2f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200103221440-774c71fcf114/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/xerrors v0.0.0-20190410155217-1f06c39b4373/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20190513163551-3ee3066db522/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/inconshreveable/log15.v2 v2.0.0-20180818164646-67afb5ed74ec/go.mod h1:aPpfJ7XW+gOuirDoZ8gHhLh3kZ1B08FtV2bbmy7Jv3s=\ngopkg.in/mgo.v2 v2.0.0-20190816093944-a6b53ec6cb22 h1:VpOs+IwYnYBaFnrNAeB8UUWtL3vEUnzSCL1nVjPhqrw=\ngopkg.in/mgo.v2 v2.0.0-20190816093944-a6b53ec6cb22/go.mod h1:yeKp02qBN3iKW1OzL3MGk2IdtZzaj7SFntXj72NppTA=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=\nmodernc.org/b v1.0.4/go.mod h1:Oqc2xtmGT0tvBUsPZIanirLhxBCQZhM7Lu3TlzBj9w8=\nmodernc.org/b v1.1.0 h1:sFmr2MlofAtx5R0NC0btblNww5dqIHxXyT0SEiaTSIk=\nmodernc.org/b v1.1.0/go.mod h1:yF+wmBAFjebNdVqZNTeNfmnLaLqq91wozvDLcuXz+ck=\nmodernc.org/db v1.0.8/go.mod h1:L8Az96H46DF2+BGeaS6+WiEqLORR2sjp0yBn6LA/lAQ=\nmodernc.org/db v1.0.10 h1:Vy2Db368/WfWxQWzS8MECgEOZ5c0gtUHfVny4JleMsk=\nmodernc.org/db v1.0.10/go.mod h1:P4R9V+DHFTxL0JYYdGhXkVCxEFS2mA4d7cWzl6Zy7Cs=\nmodernc.org/file v1.0.6/go.mod h1:obrJncmei0Gqizt7w2+/jVB+IQ62GFXO4ZxJ36irXwM=\nmodernc.org/file v1.0.7/go.mod h1:5Mjdj8xZ/eaNok4AIU6yDeFzVJycCzCNRY4tAFDGOpI=\nmodernc.org/file v1.0.8 h1:xt7OV1pn+KNBb46KzV497Igx94wlH+bt4Hb+VR1mto0=\nmodernc.org/file v1.0.8/go.mod h1:v0ae8/gLTK8QR+eyuV504kYZ/nsoe5JRDcHZFZecfxM=\nmodernc.org/fileutil v1.0.0/go.mod h1:JHsWpkrk/CnVV1H/eGlFf85BEpfkrp56ro8nojIq9Q8=\nmodernc.org/fileutil v1.1.1/go.mod h1:HdjlliqRHrMAI4nVOvvpYVzVgvRSK7WnoCiG0GUWJNo=\nmodernc.org/fileutil v1.1.2/go.mod h1:HdjlliqRHrMAI4nVOvvpYVzVgvRSK7WnoCiG0GUWJNo=\nmodernc.org/fileutil v1.2.0 h1:c7fsfzHf9WfUFXvv/RY9sStAr+VAKXYGKiAhBQQNoT4=\nmodernc.org/fileutil v1.2.0/go.mod h1:0rLMFc17WSz6Bm/GtHeme7TOX8pNRhFN2NkfBlOZhrQ=\nmodernc.org/fileutil v1.3.0 h1:gQ5SIzK3H9kdfai/5x41oQiKValumqNTDXMvKo62HvE=\nmodernc.org/fileutil v1.3.0/go.mod h1:XatxS8fZi3pS8/hKG2GH/ArUogfxjpEKs3Ku3aK4JyQ=\nmodernc.org/golex v1.0.5/go.mod h1:pTY7KKjdvZbv2ROjfp6FFX5BXMM9QWZEnmCsl60aCfI=\nmodernc.org/golex v1.1.0 h1:dmSaksHMd+y6NkBsRsCShNPRaSNCNH+abrVm5/gZic8=\nmodernc.org/golex v1.1.0/go.mod h1:2pVlfqApurXhR1m0N+WDYu6Twnc4QuvO4+U8HnwoiRA=\nmodernc.org/internal v1.0.3/go.mod h1:dvHFQEGEd33HZar0OdSYIm6yen/77eukCqffWSAwQUc=\nmodernc.org/internal v1.0.4/go.mod h1:dvHFQEGEd33HZar0OdSYIm6yen/77eukCqffWSAwQUc=\nmodernc.org/internal v1.0.6/go.mod h1:9cJQ3k3JLgx7shbFOm7zJvMqaqCbV7+FD2GunADpCWU=\nmodernc.org/internal v1.0.7/go.mod h1:CUocFmERLLCOQogxq8ZQl5MSO97yGh3qb4QvVg6ltkM=\nmodernc.org/internal v1.0.8/go.mod h1:km71QBJPWkc1+LUldg2U9TJsKT6Q2QKHIykdEeCy/jw=\nmodernc.org/internal v1.1.0 h1:hYRxTXjPPzzqxXaFyC9UALxi0+v1jgwZAktvZwwgnTE=\nmodernc.org/internal v1.1.0/go.mod h1:IFhfxUE81NbN8Riy+oHylA3PIYgAvIQ5eMufNzg7/QU=\nmodernc.org/lex v1.1.1/go.mod h1:6r8o8DLJkAnOsQaGi8fMoi+Vt6LTbDaCrkUK729D8xM=\nmodernc.org/lexer v1.0.4/go.mod h1:tOajb8S4sdfOYitzCgXDFmbVJ/LE0v1fNJ7annTw36U=\nmodernc.org/lexer v1.0.5/go.mod h1:8npHn3u/NxCEtlC/tRSY77x5+WB3HvHMzMVElQ76ayI=\nmodernc.org/lldb v1.0.4/go.mod h1:AKDI6wUJk7iJS8nRX54St8rq9wUIi3o5YGN3rlejR5o=\nmodernc.org/lldb v1.0.8 h1:gM0Lpmgtw0h/ylWQSxABvzJ++TZKhf1Q/uPAGBAM6aU=\nmodernc.org/lldb v1.0.8/go.mod h1:ybOcsZ/RNZo3q8fiGadQFRnD+1Jc+RWGcTPdeilCnUk=\nmodernc.org/mathutil v1.0.0/go.mod h1:wU0vUrJsVWBZ4P6e7xtFJEhFSNsfRLJ8H458uRjg03k=\nmodernc.org/mathutil v1.4.1/go.mod h1:mZW8CKdRPY1v87qxC/wUdX5O1qDzXMP5TH3wjfpga6E=\nmodernc.org/mathutil v1.5.0/go.mod h1:mZW8CKdRPY1v87qxC/wUdX5O1qDzXMP5TH3wjfpga6E=\nmodernc.org/mathutil v1.6.0 h1:fRe9+AmYlaej+64JsEEhoWuAYBkOtQiMEU7n/XgfYi4=\nmodernc.org/mathutil v1.6.0/go.mod h1:Ui5Q9q1TR2gFm0AQRqQUaBWFLAhQpCwNcuhBOSedWPo=\nmodernc.org/ql v1.4.7 h1:dnGGGL5tHmPwVhMAylnLlwrnIrtk8PPb5KRfMvfgJzE=\nmodernc.org/ql v1.4.7/go.mod h1:I900l6z8ckpPy1y9VR0gu4pZ9hl9AhmQla4F8KERzdc=\nmodernc.org/sortutil v1.1.0/go.mod h1:ZyL98OQHJgH9IEfN71VsamvJgrtRX9Dj2gX+vH86L1k=\nmodernc.org/sortutil v1.1.1/go.mod h1:DTj/8BqjEBLZFVPYvEGDfFFg94SsfPxQ70R+SQJ98qA=\nmodernc.org/sortutil v1.2.0 h1:jQiD3PfS2REGJNzNCMMaLSp/wdMNieTbKX920Cqdgqc=\nmodernc.org/sortutil v1.2.0/go.mod h1:TKU2s7kJMf1AE84OoiGppNHJwvB753OYfNl2WRb++Ss=\nmodernc.org/strutil v1.1.3/go.mod h1:MEHNA7PdEnEwLvspRMtWTNnp2nnyvMfkimT1NKNAGbw=\nmodernc.org/strutil v1.2.0 h1:agBi9dp1I+eOnxXeiZawM8F4LawKv4NzGWSaLfyeNZA=\nmodernc.org/strutil v1.2.0/go.mod h1:/mdcBmfOibveCTBxUl5B5l6W+TTH1FXPLHZE6bTosX0=\nmodernc.org/zappy v1.0.5/go.mod h1:Q5T4ra3/JJNORGK16oe8rRAti7kWtRW4Z93fzin2gBc=\nmodernc.org/zappy v1.0.9/go.mod h1:y2c4Hv5jzyBP179SxNmx5H/BM6cVgNIXPQv2bCeR6IM=\nmodernc.org/zappy v1.1.0 h1:cAf9HrymATNo2hYMc9c37y0tiZJYuKM2xa1ZAP8THUw=\nmodernc.org/zappy v1.1.0/go.mod h1:cxC0dWAgZuyMsJ+KL3ZBgo3twyKGBB/0By/umSZE2bQ=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "intersection.go",
          "type": "blob",
          "size": 2.3720703125,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"github.com/upper/db/v4/internal/adapter\"\n)\n\n// AndExpr represents an expression joined by a logical conjuction (AND).\ntype AndExpr struct {\n\t*adapter.LogicalExprGroup\n}\n\n// And adds more expressions to the group.\nfunc (a *AndExpr) And(andConds ...LogicalExpr) *AndExpr {\n\tvar fn func(*[]LogicalExpr) error\n\tif len(andConds) > 0 {\n\t\tfn = func(in *[]LogicalExpr) error {\n\t\t\t*in = append(*in, andConds...)\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn &AndExpr{a.LogicalExprGroup.Frame(fn)}\n}\n\n// Empty returns false if the expressions has zero conditions.\nfunc (a *AndExpr) Empty() bool {\n\treturn a.LogicalExprGroup.Empty()\n}\n\n// And joins conditions under logical conjunction. Conditions can be\n// represented by `db.Cond{}`, `db.Or()` or `db.And()`.\n//\n// Examples:\n//\n//\t// name = \"Peter\" AND last_name = \"Parker\"\n//\tdb.And(\n//\t\tdb.Cond{\"name\": \"Peter\"},\n//\t\tdb.Cond{\"last_name\": \"Parker \"},\n//\t)\n//\n//\t// (name = \"Peter\" OR name = \"Mickey\") AND last_name = \"Mouse\"\n//\tdb.And(\n//\t\tdb.Or(\n//\t\t\tdb.Cond{\"name\": \"Peter\"},\n//\t\t\tdb.Cond{\"name\": \"Mickey\"},\n//\t\t),\n//\t\tdb.Cond{\"last_name\": \"Mouse\"},\n//\t)\nfunc And(conds ...LogicalExpr) *AndExpr {\n\treturn &AndExpr{adapter.NewLogicalExprGroup(adapter.LogicalOperatorAnd, conds...)}\n}\n\nvar _ = adapter.LogicalExpr(&AndExpr{})\n"
        },
        {
          "name": "iterator.go",
          "type": "blob",
          "size": 1.896484375,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\n// Iterator provides methods for iterating over query results.\ntype Iterator interface {\n\t// ResultMapper provides methods to retrieve and map results.\n\tResultMapper\n\n\t// Scan dumps the current result into the given pointer variable pointers.\n\tScan(dest ...interface{}) error\n\n\t// NextScan advances the iterator and performs Scan.\n\tNextScan(dest ...interface{}) error\n\n\t// ScanOne advances the iterator, performs Scan and closes the iterator.\n\tScanOne(dest ...interface{}) error\n\n\t// Next dumps the current element into the given destination, which could be\n\t// a pointer to either a map or a struct.\n\tNext(dest ...interface{}) bool\n\n\t// Err returns the last error produced by the cursor.\n\tErr() error\n\n\t// Close closes the iterator and frees up the cursor.\n\tClose() error\n}\n"
        },
        {
          "name": "logger.go",
          "type": "blob",
          "size": 8.6474609375,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"regexp\"\n\t\"runtime\"\n\t\"strings\"\n\t\"time\"\n)\n\nconst (\n\tfmtLogSessID       = `Session ID:     %05d`\n\tfmtLogTxID         = `Transaction ID: %05d`\n\tfmtLogQuery        = `Query:          %s`\n\tfmtLogArgs         = `Arguments:      %#v`\n\tfmtLogRowsAffected = `Rows affected:  %d`\n\tfmtLogLastInsertID = `Last insert ID: %d`\n\tfmtLogError        = `Error:          %v`\n\tfmtLogStack        = `Stack:          %v`\n\tfmtLogTimeTaken    = `Time taken:     %0.5fs`\n\tfmtLogContext      = `Context:        %v`\n)\n\nconst (\n\tmaxFrames  = 30\n\tskipFrames = 3\n)\n\nvar (\n\treInvisibleChars = regexp.MustCompile(`[\\s\\r\\n\\t]+`)\n)\n\n// LogLevel represents a verbosity level for logs\ntype LogLevel int8\n\n// Log levels\nconst (\n\tLogLevelTrace LogLevel = -1\n\n\tLogLevelDebug LogLevel = iota\n\tLogLevelInfo\n\tLogLevelWarn\n\tLogLevelError\n\tLogLevelFatal\n\tLogLevelPanic\n)\n\nvar logLevels = map[LogLevel]string{\n\tLogLevelTrace: \"TRACE\",\n\tLogLevelDebug: \"DEBUG\",\n\tLogLevelInfo:  \"INFO\",\n\tLogLevelWarn:  \"WARNING\",\n\tLogLevelError: \"ERROR\",\n\tLogLevelFatal: \"FATAL\",\n\tLogLevelPanic: \"PANIC\",\n}\n\nfunc (ll LogLevel) String() string {\n\treturn logLevels[ll]\n}\n\nconst (\n\tdefaultLogLevel LogLevel = LogLevelWarn\n)\n\nvar defaultLogger Logger = log.New(os.Stdout, \"\", log.LstdFlags)\n\n// Logger represents a logging interface that is compatible with the standard\n// \"log\" and with many other logging libraries.\ntype Logger interface {\n\tFatal(v ...interface{})\n\tFatalf(format string, v ...interface{})\n\n\tPrint(v ...interface{})\n\tPrintf(format string, v ...interface{})\n\n\tPanic(v ...interface{})\n\tPanicf(format string, v ...interface{})\n}\n\n// LoggingCollector provides different methods for collecting and classifying\n// log messages.\ntype LoggingCollector interface {\n\tEnabled(LogLevel) bool\n\n\tLevel() LogLevel\n\n\tSetLogger(Logger)\n\tSetLevel(LogLevel)\n\n\tTrace(v ...interface{})\n\tTracef(format string, v ...interface{})\n\n\tDebug(v ...interface{})\n\tDebugf(format string, v ...interface{})\n\n\tInfo(v ...interface{})\n\tInfof(format string, v ...interface{})\n\n\tWarn(v ...interface{})\n\tWarnf(format string, v ...interface{})\n\n\tError(v ...interface{})\n\tErrorf(format string, v ...interface{})\n\n\tFatal(v ...interface{})\n\tFatalf(format string, v ...interface{})\n\n\tPanic(v ...interface{})\n\tPanicf(format string, v ...interface{})\n}\n\ntype loggingCollector struct {\n\tlevel  LogLevel\n\tlogger Logger\n}\n\nfunc (c *loggingCollector) Enabled(level LogLevel) bool {\n\treturn level >= c.level\n}\n\nfunc (c *loggingCollector) SetLevel(level LogLevel) {\n\tc.level = level\n}\n\nfunc (c *loggingCollector) Level() LogLevel {\n\treturn c.level\n}\n\nfunc (c *loggingCollector) Logger() Logger {\n\tif c.logger == nil {\n\t\treturn defaultLogger\n\t}\n\treturn c.logger\n}\n\nfunc (c *loggingCollector) SetLogger(logger Logger) {\n\tc.logger = logger\n}\n\nfunc (c *loggingCollector) logf(level LogLevel, f string, v ...interface{}) {\n\tif level >= LogLevelPanic {\n\t\tc.Logger().Panicf(f, v...)\n\t}\n\tif level >= LogLevelFatal {\n\t\tc.Logger().Fatalf(f, v...)\n\t}\n\tif c.Enabled(level) {\n\t\tc.Logger().Printf(f, v...)\n\t}\n}\n\nfunc (c *loggingCollector) log(level LogLevel, v ...interface{}) {\n\tif level >= LogLevelPanic {\n\t\tc.Logger().Panic(v...)\n\t}\n\tif level >= LogLevelFatal {\n\t\tc.Logger().Fatal(v...)\n\t}\n\tif c.Enabled(level) {\n\t\tc.Logger().Print(v...)\n\t}\n}\n\nfunc (c *loggingCollector) Debugf(format string, v ...interface{}) {\n\tc.logf(LogLevelDebug, format, v...)\n}\nfunc (c *loggingCollector) Debug(v ...interface{}) {\n\tc.log(LogLevelDebug, v...)\n}\n\nfunc (c *loggingCollector) Tracef(format string, v ...interface{}) {\n\tc.logf(LogLevelTrace, format, v...)\n}\nfunc (c *loggingCollector) Trace(v ...interface{}) {\n\tc.log(LogLevelDebug, v...)\n}\n\nfunc (c *loggingCollector) Infof(format string, v ...interface{}) {\n\tc.logf(LogLevelInfo, format, v...)\n}\nfunc (c *loggingCollector) Info(v ...interface{}) {\n\tc.log(LogLevelInfo, v...)\n}\n\nfunc (c *loggingCollector) Warnf(format string, v ...interface{}) {\n\tc.logf(LogLevelWarn, format, v...)\n}\nfunc (c *loggingCollector) Warn(v ...interface{}) {\n\tc.log(LogLevelWarn, v...)\n}\n\nfunc (c *loggingCollector) Errorf(format string, v ...interface{}) {\n\tc.logf(LogLevelError, format, v...)\n}\nfunc (c *loggingCollector) Error(v ...interface{}) {\n\tc.log(LogLevelError, v...)\n}\n\nfunc (c *loggingCollector) Fatalf(format string, v ...interface{}) {\n\tc.logf(LogLevelFatal, format, v...)\n}\nfunc (c *loggingCollector) Fatal(v ...interface{}) {\n\tc.log(LogLevelFatal, v...)\n}\n\nfunc (c *loggingCollector) Panicf(format string, v ...interface{}) {\n\tc.logf(LogLevelPanic, format, v...)\n}\nfunc (c *loggingCollector) Panic(v ...interface{}) {\n\tc.log(LogLevelPanic, v...)\n}\n\nvar defaultLoggingCollector LoggingCollector = &loggingCollector{\n\tlevel:  defaultLogLevel,\n\tlogger: defaultLogger,\n}\n\n// QueryStatus represents the status of a query after being executed.\ntype QueryStatus struct {\n\tSessID uint64\n\tTxID   uint64\n\n\tRowsAffected *int64\n\tLastInsertID *int64\n\n\tRawQuery string\n\tArgs     []interface{}\n\n\tErr error\n\n\tStart time.Time\n\tEnd   time.Time\n\n\tContext context.Context\n}\n\nfunc (q *QueryStatus) Query() string {\n\tquery := reInvisibleChars.ReplaceAllString(q.RawQuery, \" \")\n\tquery = strings.TrimSpace(query)\n\treturn query\n}\n\nfunc (q *QueryStatus) Stack() []string {\n\tframes := collectFrames()\n\tlines := make([]string, 0, len(frames))\n\n\tfor _, frame := range frames {\n\t\tlines = append(lines, fmt.Sprintf(\"%s@%s:%d\", frame.Function, frame.File, frame.Line))\n\t}\n\treturn lines\n}\n\n// String returns a formatted log message.\nfunc (q *QueryStatus) String() string {\n\tlines := make([]string, 0, 8)\n\n\tif q.SessID > 0 {\n\t\tlines = append(lines, fmt.Sprintf(fmtLogSessID, q.SessID))\n\t}\n\n\tif q.TxID > 0 {\n\t\tlines = append(lines, fmt.Sprintf(fmtLogTxID, q.TxID))\n\t}\n\n\tif query := q.RawQuery; query != \"\" {\n\t\tlines = append(lines, fmt.Sprintf(fmtLogQuery, q.Query()))\n\t}\n\n\tif len(q.Args) > 0 {\n\t\tlines = append(lines, fmt.Sprintf(fmtLogArgs, q.Args))\n\t}\n\n\tif stack := q.Stack(); len(stack) > 0 {\n\t\tlines = append(lines, fmt.Sprintf(fmtLogStack, \"\\n\\t\"+strings.Join(stack, \"\\n\\t\")))\n\t}\n\n\tif q.RowsAffected != nil {\n\t\tlines = append(lines, fmt.Sprintf(fmtLogRowsAffected, *q.RowsAffected))\n\t}\n\tif q.LastInsertID != nil {\n\t\tlines = append(lines, fmt.Sprintf(fmtLogLastInsertID, *q.LastInsertID))\n\t}\n\n\tif q.Err != nil {\n\t\tlines = append(lines, fmt.Sprintf(fmtLogError, q.Err))\n\t}\n\n\tlines = append(lines, fmt.Sprintf(fmtLogTimeTaken, float64(q.End.UnixNano()-q.Start.UnixNano())/float64(1e9)))\n\n\tif q.Context != nil {\n\t\tlines = append(lines, fmt.Sprintf(fmtLogContext, q.Context))\n\t}\n\n\treturn \"\\t\" + strings.Replace(strings.Join(lines, \"\\n\"), \"\\n\", \"\\n\\t\", -1) + \"\\n\\n\"\n}\n\n// LC returns the logging collector.\nfunc LC() LoggingCollector {\n\treturn defaultLoggingCollector\n}\n\nfunc init() {\n\tif logLevel := strings.ToUpper(os.Getenv(\"UPPER_DB_LOG\")); logLevel != \"\" {\n\t\tfor ll := range logLevels {\n\t\t\tif ll.String() == logLevel {\n\t\t\t\tLC().SetLevel(ll)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc collectFrames() []runtime.Frame {\n\tpc := make([]uintptr, maxFrames)\n\tn := runtime.Callers(skipFrames, pc)\n\tif n == 0 {\n\t\treturn nil\n\t}\n\n\tpc = pc[:n]\n\tframes := runtime.CallersFrames(pc)\n\n\tcollectedFrames := make([]runtime.Frame, 0, maxFrames)\n\tdiscardedFrames := make([]runtime.Frame, 0, maxFrames)\n\tfor {\n\t\tframe, more := frames.Next()\n\n\t\t// collect all frames except those from upper/db and runtime stack\n\t\tif (strings.Contains(frame.Function, \"upper/db\") || strings.Contains(frame.Function, \"/go/src/\")) && !strings.Contains(frame.Function, \"test\") {\n\t\t\tdiscardedFrames = append(discardedFrames, frame)\n\t\t} else {\n\t\t\tcollectedFrames = append(collectedFrames, frame)\n\t\t}\n\n\t\tif !more {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif len(collectedFrames) < 1 {\n\t\treturn discardedFrames\n\t}\n\n\treturn collectedFrames\n}\n"
        },
        {
          "name": "marshal.go",
          "type": "blob",
          "size": 1.703125,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\n// Marshaler is the interface implemented by struct fields that can transform\n// themselves into values to be stored in a database.\ntype Marshaler interface {\n\t// MarshalDB returns the internal database representation of the Go value.\n\tMarshalDB() (interface{}, error)\n}\n\n// Unmarshaler is the interface implemented by struct fields that can transform\n// themselves from database values into Go values.\ntype Unmarshaler interface {\n\t// UnmarshalDB receives an internal database representation of a value and\n\t// transforms it into a Go value.\n\tUnmarshalDB(interface{}) error\n}\n"
        },
        {
          "name": "raw.go",
          "type": "blob",
          "size": 1.5546875,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"github.com/upper/db/v4/internal/adapter\"\n)\n\n// RawExpr represents a raw (non-filtered) expression.\ntype RawExpr = adapter.RawExpr\n\n// Raw marks chunks of data as protected, so they pass directly to the query\n// without any filtering. Use with care.\n//\n// Example:\n//\n//\t// SOUNDEX('Hello')\n//\tRaw(\"SOUNDEX('Hello')\")\nfunc Raw(value string, args ...interface{}) *RawExpr {\n\treturn adapter.NewRawExpr(value, args)\n}\n"
        },
        {
          "name": "record.go",
          "type": "blob",
          "size": 3.275390625,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n\npackage db\n\n// Record is the equivalence between concrete database schemas and Go values.\ntype Record interface {\n\tStore(sess Session) Store\n}\n\n// HasConstraints is an interface for records that defines a Constraints method\n// that returns the record's own constraints.\ntype HasConstraints interface {\n\tConstraints() Cond\n}\n\n// Validator is an interface for records that defines an (optional) Validate\n// method that is called before persisting a record (creating or updating).  If\n// Validate returns an error the current operation is cancelled and rolled\n// back.\ntype Validator interface {\n\tValidate() error\n}\n\n// BeforeCreateHook is an interface for records that defines an BeforeCreate\n// method that is called before creating a record. If BeforeCreate returns an\n// error the create process is cancelled and rolled back.\ntype BeforeCreateHook interface {\n\tBeforeCreate(Session) error\n}\n\n// AfterCreateHook is an interface for records that defines an AfterCreate\n// method that is called after creating a record. If AfterCreate returns an\n// error the create process is cancelled and rolled back.\ntype AfterCreateHook interface {\n\tAfterCreate(Session) error\n}\n\n// BeforeUpdateHook is an interface for records that defines a BeforeUpdate\n// method that is called before updating a record. If BeforeUpdate returns an\n// error the update process is cancelled and rolled back.\ntype BeforeUpdateHook interface {\n\tBeforeUpdate(Session) error\n}\n\n// AfterUpdateHook is an interface for records that defines an AfterUpdate\n// method that is called after updating a record. If AfterUpdate returns an\n// error the update process is cancelled and rolled back.\ntype AfterUpdateHook interface {\n\tAfterUpdate(Session) error\n}\n\n// BeforeDeleteHook is an interface for records that defines a BeforeDelete\n// method that is called before removing a record. If BeforeDelete returns an\n// error the delete process is cancelled and rolled back.\ntype BeforeDeleteHook interface {\n\tBeforeDelete(Session) error\n}\n\n// AfterDeleteHook is an interface for records that defines a AfterDelete\n// method that is called after removing a record. If AfterDelete returns an\n// error the delete process is cancelled and rolled back.\ntype AfterDeleteHook interface {\n\tAfterDelete(Session) error\n}\n"
        },
        {
          "name": "result.go",
          "type": "blob",
          "size": 7.1279296875,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"database/sql/driver\"\n)\n\n// Result is an interface that defines methods for result sets.\ntype Result interface {\n\n\t// String returns the SQL statement to be used in the query.\n\tString() string\n\n\t// Limit defines the maximum number of results for this set. It only has\n\t// effect on `One()`, `All()` and `Next()`. A negative limit cancels any\n\t// previous limit settings.\n\tLimit(int) Result\n\n\t// Offset ignores the first n results. It only has effect on `One()`, `All()`\n\t// and `Next()`. A negative offset cancels any previous offset settings.\n\tOffset(int) Result\n\n\t// OrderBy receives one or more field names that define the order in which\n\t// elements will be returned in a query, field names may be prefixed with a\n\t// minus sign (-) indicating descending order, ascending order will be used\n\t// otherwise.\n\tOrderBy(...interface{}) Result\n\n\t// Select defines specific columns to be fetched on every column in the\n\t// result set.\n\tSelect(...interface{}) Result\n\n\t// And adds more filtering conditions on top of the existing constraints.\n\t//\n\t//   res := col.Find(...).And(...)\n\tAnd(...interface{}) Result\n\n\t// GroupBy is used to group results that have the same value in the same column\n\t// or columns.\n\tGroupBy(...interface{}) Result\n\n\t// Delete deletes all items within the result set. `Offset()` and `Limit()`\n\t// are not honoured by `Delete()`.\n\tDelete() error\n\n\t// Update modifies all items within the result set. `Offset()` and `Limit()`\n\t// are not honoured by `Update()`.\n\tUpdate(interface{}) error\n\n\t// Count returns the number of items that match the set conditions.\n\t// `Offset()` and `Limit()` are not honoured by `Count()`\n\tCount() (uint64, error)\n\n\t// Exists returns true if at least one item on the collection exists. False\n\t// otherwise.\n\tExists() (bool, error)\n\n\t// Next fetches the next result within the result set and dumps it into the\n\t// given pointer to struct or pointer to map. You must call\n\t// `Close()` after finishing using `Next()`.\n\tNext(ptrToStruct interface{}) bool\n\n\t// Err returns the last error that has happened with the result set, nil\n\t// otherwise.\n\tErr() error\n\n\t// One fetches the first result within the result set and dumps it into the\n\t// given pointer to struct or pointer to map. The result set is automatically\n\t// closed after picking the element, so there is no need to call Close()\n\t// after using One().\n\tOne(ptrToStruct interface{}) error\n\n\t// All fetches all results within the result set and dumps them into the\n\t// given pointer to slice of maps or structs.  The result set is\n\t// automatically closed, so there is no need to call Close() after\n\t// using All().\n\tAll(sliceOfStructs interface{}) error\n\n\t// Paginate splits the results of the query into pages containing pageSize\n\t// items. When using pagination previous settings for `Limit()` and\n\t// `Offset()` are ignored. Page numbering starts at 1.\n\t//\n\t// Use `Page()` to define the specific page to get results from.\n\t//\n\t// Example:\n\t//\n\t//   r = q.Paginate(12)\n\t//\n\t// You can provide constraints an order settings when using pagination:\n\t//\n\t// Example:\n\t//\n\t//   res := q.Where(conds).OrderBy(\"-id\").Paginate(12)\n\t//   err := res.Page(4).All(&items)\n\tPaginate(pageSize uint) Result\n\n\t// Page makes the result set return results only from the page identified by\n\t// pageNumber. Page numbering starts from 1.\n\t//\n\t// Example:\n\t//\n\t//   r = q.Paginate(12).Page(4)\n\tPage(pageNumber uint) Result\n\n\t// Cursor defines the column that is going to be taken as basis for\n\t// cursor-based pagination.\n\t//\n\t// Example:\n\t//\n\t//   a = q.Paginate(10).Cursor(\"id\")\n\t//   b = q.Paginate(12).Cursor(\"-id\")\n\t//\n\t// You can set \"\" as cursorColumn to disable cursors.\n\tCursor(cursorColumn string) Result\n\n\t// NextPage returns the next results page according to the cursor. It expects\n\t// a cursorValue, which is the value the cursor column had on the last item\n\t// of the current result set (lower bound).\n\t//\n\t// Example:\n\t//\n\t//   cursor = q.Paginate(12).Cursor(\"id\")\n\t//   res = cursor.NextPage(items[len(items)-1].ID)\n\t//\n\t// Note that `NextPage()` requires a cursor, any column with an absolute\n\t// order (given two values one always precedes the other) can be a cursor.\n\t//\n\t// You can define the pagination order and add constraints to your result:\n\t//\n\t//\t cursor = q.Where(...).OrderBy(\"id\").Paginate(10).Cursor(\"id\")\n\t//   res = cursor.NextPage(lowerBound)\n\tNextPage(cursorValue interface{}) Result\n\n\t// PrevPage returns the previous results page according to the cursor. It\n\t// expects a cursorValue, which is the value the cursor column had on the\n\t// fist item of the current result set.\n\t//\n\t// Example:\n\t//\n\t//   current = current.PrevPage(items[0].ID)\n\t//\n\t// Note that PrevPage requires a cursor, any column with an absolute order\n\t// (given two values one always precedes the other) can be a cursor.\n\t//\n\t// You can define the pagination order and add constraints to your result:\n\t//\n\t//   cursor = q.Where(...).OrderBy(\"id\").Paginate(10).Cursor(\"id\")\n\t//   res = cursor.PrevPage(upperBound)\n\tPrevPage(cursorValue interface{}) Result\n\n\t// TotalPages returns the total number of pages the result set could produce.\n\t// If no pagination parameters have been set this value equals 1.\n\tTotalPages() (uint, error)\n\n\t// TotalEntries returns the total number of matching items in the result set.\n\tTotalEntries() (uint64, error)\n\n\t// Close closes the result set and frees all locked resources.\n\tClose() error\n}\n\n// InsertResult provides infomation about an insert operation.\ntype InsertResult interface {\n\t// ID returns the ID of the newly inserted record.\n\tID() ID\n}\n\ntype insertResult struct {\n\tid interface{}\n}\n\nfunc (r *insertResult) ID() ID {\n\treturn r.id\n}\n\n// ConstraintValue satisfies adapter.ConstraintValuer\nfunc (r *insertResult) ConstraintValue() interface{} {\n\treturn r.id\n}\n\n// Value satisfies driver.Valuer\nfunc (r *insertResult) Value() (driver.Value, error) {\n\treturn r.id, nil\n}\n\n// NewInsertResult creates an InsertResult\nfunc NewInsertResult(id interface{}) InsertResult {\n\treturn &insertResult{id: id}\n}\n\n// ID represents a record ID\ntype ID interface{}\n\nvar _ = driver.Valuer(&insertResult{})\n"
        },
        {
          "name": "session.go",
          "type": "blob",
          "size": 3.626953125,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n)\n\n// Session is an interface that defines methods for database adapters.\ntype Session interface {\n\t// ConnectionURL returns the DSN that was used to set up the adapter.\n\tConnectionURL() ConnectionURL\n\n\t// Name returns the name of the database.\n\tName() string\n\n\t// Ping returns an error if the DBMS could not be reached.\n\tPing() error\n\n\t// Collection receives a table name and returns a collection reference. The\n\t// information retrieved from a collection is cached.\n\tCollection(name string) Collection\n\n\t// Collections returns a collection reference of all non system tables on the\n\t// database.\n\tCollections() ([]Collection, error)\n\n\t// Save creates or updates a record.\n\tSave(record Record) error\n\n\t// Get retrieves a record that matches the given condition.\n\tGet(record Record, cond interface{}) error\n\n\t// Delete deletes a record.\n\tDelete(record Record) error\n\n\t// Reset resets all the caching mechanisms the adapter is using.\n\tReset()\n\n\t// Close terminates the currently active connection to the DBMS and clears\n\t// all caches.\n\tClose() error\n\n\t// Driver returns the underlying driver of the adapter as an interface.\n\t//\n\t// In order to actually use the driver, the `interface{}` value needs to be\n\t// casted into the appropriate type.\n\t//\n\t// Example:\n\t//  internalSQLDriver := sess.Driver().(*sql.DB)\n\tDriver() interface{}\n\n\t// SQL returns a special interface for SQL databases.\n\tSQL() SQL\n\n\t// Tx creates a transaction block on the default database context and passes\n\t// it to the function fn. If fn returns no error the transaction is commited,\n\t// else the transaction is rolled back. After being commited or rolled back\n\t// the transaction is closed automatically.\n\tTx(fn func(sess Session) error) error\n\n\t// TxContext creates a transaction block on the given context and passes it to\n\t// the function fn. If fn returns no error the transaction is commited, else\n\t// the transaction is rolled back. After being commited or rolled back the\n\t// transaction is closed automatically.\n\tTxContext(ctx context.Context, fn func(sess Session) error, opts *sql.TxOptions) error\n\n\t// Context returns the context used as default for queries on this session\n\t// and for new transactions.  If no context has been set, a default\n\t// context.Background() is returned.\n\tContext() context.Context\n\n\t// WithContext returns the same session on a different default context. The\n\t// session is identical to the original one in all ways except for the\n\t// context.\n\tWithContext(ctx context.Context) Session\n\n\tSettings\n}\n"
        },
        {
          "name": "settings.go",
          "type": "blob",
          "size": 5.3466796875,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\n// Settings defines methods to get or set configuration values.\ntype Settings interface {\n\t// SetPreparedStatementCache enables or disables the prepared statement\n\t// cache.\n\tSetPreparedStatementCache(bool)\n\n\t// PreparedStatementCacheEnabled returns true if the prepared statement cache\n\t// is enabled, false otherwise.\n\tPreparedStatementCacheEnabled() bool\n\n\t// SetConnMaxLifetime sets the default maximum amount of time a connection\n\t// may be reused.\n\tSetConnMaxLifetime(time.Duration)\n\n\t// ConnMaxLifetime returns the default maximum amount of time a connection\n\t// may be reused.\n\tConnMaxLifetime() time.Duration\n\n\t// SetConnMaxIdleTime sets the default maximum amount of time a connection\n\t// may remain idle.\n\tSetConnMaxIdleTime(time.Duration)\n\n\t// ConnMaxIdleTime returns the default maximum amount of time a connection\n\t// may remain idle.\n\tConnMaxIdleTime() time.Duration\n\n\t// SetMaxIdleConns sets the default maximum number of connections in the idle\n\t// connection pool.\n\tSetMaxIdleConns(int)\n\n\t// MaxIdleConns returns the default maximum number of connections in the idle\n\t// connection pool.\n\tMaxIdleConns() int\n\n\t// SetMaxOpenConns sets the default maximum number of open connections to the\n\t// database.\n\tSetMaxOpenConns(int)\n\n\t// MaxOpenConns returns the default maximum number of open connections to the\n\t// database.\n\tMaxOpenConns() int\n\n\t// SetMaxTransactionRetries sets the number of times a transaction can\n\t// be retried.\n\tSetMaxTransactionRetries(int)\n\n\t// MaxTransactionRetries returns the maximum number of times a\n\t// transaction can be retried.\n\tMaxTransactionRetries() int\n}\n\ntype settings struct {\n\tsync.RWMutex\n\n\tpreparedStatementCacheEnabled uint32\n\n\tconnMaxLifetime time.Duration\n\tconnMaxIdleTime time.Duration\n\tmaxOpenConns    int\n\tmaxIdleConns    int\n\n\tmaxTransactionRetries int\n}\n\nfunc (c *settings) binaryOption(opt *uint32) bool {\n\treturn atomic.LoadUint32(opt) == 1\n}\n\nfunc (c *settings) setBinaryOption(opt *uint32, value bool) {\n\tif value {\n\t\tatomic.StoreUint32(opt, 1)\n\t\treturn\n\t}\n\tatomic.StoreUint32(opt, 0)\n}\n\nfunc (c *settings) SetPreparedStatementCache(value bool) {\n\tc.setBinaryOption(&c.preparedStatementCacheEnabled, value)\n}\n\nfunc (c *settings) PreparedStatementCacheEnabled() bool {\n\treturn c.binaryOption(&c.preparedStatementCacheEnabled)\n}\n\nfunc (c *settings) SetConnMaxLifetime(t time.Duration) {\n\tc.Lock()\n\tc.connMaxLifetime = t\n\tc.Unlock()\n}\n\nfunc (c *settings) ConnMaxLifetime() time.Duration {\n\tc.RLock()\n\tdefer c.RUnlock()\n\treturn c.connMaxLifetime\n}\n\nfunc (c *settings) SetConnMaxIdleTime(t time.Duration) {\n\tc.Lock()\n\tc.connMaxIdleTime = t\n\tc.Unlock()\n}\n\nfunc (c *settings) ConnMaxIdleTime() time.Duration {\n\tc.RLock()\n\tdefer c.RUnlock()\n\treturn c.connMaxIdleTime\n}\n\nfunc (c *settings) SetMaxIdleConns(n int) {\n\tc.Lock()\n\tc.maxIdleConns = n\n\tc.Unlock()\n}\n\nfunc (c *settings) MaxIdleConns() int {\n\tc.RLock()\n\tdefer c.RUnlock()\n\treturn c.maxIdleConns\n}\n\nfunc (c *settings) SetMaxTransactionRetries(n int) {\n\tc.Lock()\n\tc.maxTransactionRetries = n\n\tc.Unlock()\n}\n\nfunc (c *settings) MaxTransactionRetries() int {\n\tc.RLock()\n\tdefer c.RUnlock()\n\tif c.maxTransactionRetries < 1 {\n\t\treturn 1\n\t}\n\treturn c.maxTransactionRetries\n}\n\nfunc (c *settings) SetMaxOpenConns(n int) {\n\tc.Lock()\n\tc.maxOpenConns = n\n\tc.Unlock()\n}\n\nfunc (c *settings) MaxOpenConns() int {\n\tc.RLock()\n\tdefer c.RUnlock()\n\treturn c.maxOpenConns\n}\n\n// NewSettings returns a new settings value prefilled with the current default\n// settings.\nfunc NewSettings() Settings {\n\tdef := DefaultSettings.(*settings)\n\treturn &settings{\n\t\tpreparedStatementCacheEnabled: def.preparedStatementCacheEnabled,\n\t\tconnMaxLifetime:               def.connMaxLifetime,\n\t\tconnMaxIdleTime:               def.connMaxIdleTime,\n\t\tmaxIdleConns:                  def.maxIdleConns,\n\t\tmaxOpenConns:                  def.maxOpenConns,\n\t\tmaxTransactionRetries:         def.maxTransactionRetries,\n\t}\n}\n\n// DefaultSettings provides default global configuration settings for database\n// sessions.\nvar DefaultSettings Settings = &settings{\n\tpreparedStatementCacheEnabled: 0,\n\tconnMaxLifetime:               time.Duration(0),\n\tconnMaxIdleTime:               time.Duration(0),\n\tmaxIdleConns:                  10,\n\tmaxOpenConns:                  0,\n\tmaxTransactionRetries:         1,\n}\n"
        },
        {
          "name": "sql.go",
          "type": "blob",
          "size": 7.55078125,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n)\n\n// SQL defines methods that can be used to build a SQL query with chainable\n// method calls.\n//\n// Queries are immutable, so every call to any method will return a new\n// pointer, if you want to build a query using variables you need to reassign\n// them, like this:\n//\n//\ta = builder.Select(\"name\").From(\"foo\") // \"a\" is created\n//\n//\ta.Where(...) // No effect, the value returned from Where is ignored.\n//\n//\ta = a.Where(...) // \"a\" is reassigned and points to a different address.\ntype SQL interface {\n\n\t// Select initializes and returns a Selector, it accepts column names as\n\t// parameters.\n\t//\n\t// The returned Selector does not initially point to any table, a call to\n\t// From() is required after Select() to complete a valid query.\n\t//\n\t// Example:\n\t//\n\t//  q := sqlbuilder.Select(\"first_name\", \"last_name\").From(\"people\").Where(...)\n\tSelect(columns ...interface{}) Selector\n\n\t// SelectFrom creates a Selector that selects all columns (like SELECT *)\n\t// from the given table.\n\t//\n\t// Example:\n\t//\n\t//  q := sqlbuilder.SelectFrom(\"people\").Where(...)\n\tSelectFrom(table ...interface{}) Selector\n\n\t// InsertInto prepares and returns an Inserter targeted at the given table.\n\t//\n\t// Example:\n\t//\n\t//   q := sqlbuilder.InsertInto(\"books\").Columns(...).Values(...)\n\tInsertInto(table string) Inserter\n\n\t// DeleteFrom prepares a Deleter targeted at the given table.\n\t//\n\t// Example:\n\t//\n\t//  q := sqlbuilder.DeleteFrom(\"tasks\").Where(...)\n\tDeleteFrom(table string) Deleter\n\n\t// Update prepares and returns an Updater targeted at the given table.\n\t//\n\t// Example:\n\t//\n\t//  q := sqlbuilder.Update(\"profile\").Set(...).Where(...)\n\tUpdate(table string) Updater\n\n\t// Exec executes a SQL query that does not return any rows, like sql.Exec.\n\t// Queries can be either strings or upper-db statements.\n\t//\n\t// Example:\n\t//\n\t//  sqlbuilder.Exec(`INSERT INTO books (title) VALUES(\"La Ciudad y los Perros\")`)\n\tExec(query interface{}, args ...interface{}) (sql.Result, error)\n\n\t// ExecContext executes a SQL query that does not return any rows, like sql.ExecContext.\n\t// Queries can be either strings or upper-db statements.\n\t//\n\t// Example:\n\t//\n\t//  sqlbuilder.ExecContext(ctx, `INSERT INTO books (title) VALUES(?)`, \"La Ciudad y los Perros\")\n\tExecContext(ctx context.Context, query interface{}, args ...interface{}) (sql.Result, error)\n\n\t// Prepare creates a prepared statement for later queries or executions. The\n\t// caller must call the statement's Close method when the statement is no\n\t// longer needed.\n\tPrepare(query interface{}) (*sql.Stmt, error)\n\n\t// Prepare creates a prepared statement on the guiven context for later\n\t// queries or executions. The caller must call the statement's Close method\n\t// when the statement is no longer needed.\n\tPrepareContext(ctx context.Context, query interface{}) (*sql.Stmt, error)\n\n\t// Query executes a SQL query that returns rows, like sql.Query.  Queries can\n\t// be either strings or upper-db statements.\n\t//\n\t// Example:\n\t//\n\t//  sqlbuilder.Query(`SELECT * FROM people WHERE name = \"Mateo\"`)\n\tQuery(query interface{}, args ...interface{}) (*sql.Rows, error)\n\n\t// QueryContext executes a SQL query that returns rows, like\n\t// sql.QueryContext.  Queries can be either strings or upper-db statements.\n\t//\n\t// Example:\n\t//\n\t//  sqlbuilder.QueryContext(ctx, `SELECT * FROM people WHERE name = ?`, \"Mateo\")\n\tQueryContext(ctx context.Context, query interface{}, args ...interface{}) (*sql.Rows, error)\n\n\t// QueryRow executes a SQL query that returns one row, like sql.QueryRow.\n\t// Queries can be either strings or upper-db statements.\n\t//\n\t// Example:\n\t//\n\t//  sqlbuilder.QueryRow(`SELECT * FROM people WHERE name = \"Haruki\" AND last_name = \"Murakami\" LIMIT 1`)\n\tQueryRow(query interface{}, args ...interface{}) (*sql.Row, error)\n\n\t// QueryRowContext executes a SQL query that returns one row, like\n\t// sql.QueryRowContext.  Queries can be either strings or upper-db statements.\n\t//\n\t// Example:\n\t//\n\t//  sqlbuilder.QueryRowContext(ctx, `SELECT * FROM people WHERE name = \"Haruki\" AND last_name = \"Murakami\" LIMIT 1`)\n\tQueryRowContext(ctx context.Context, query interface{}, args ...interface{}) (*sql.Row, error)\n\n\t// Iterator executes a SQL query that returns rows and creates an Iterator\n\t// with it.\n\t//\n\t// Example:\n\t//\n\t//  sqlbuilder.Iterator(`SELECT * FROM people WHERE name LIKE \"M%\"`)\n\tIterator(query interface{}, args ...interface{}) Iterator\n\n\t// IteratorContext executes a SQL query that returns rows and creates an Iterator\n\t// with it.\n\t//\n\t// Example:\n\t//\n\t//  sqlbuilder.IteratorContext(ctx, `SELECT * FROM people WHERE name LIKE \"M%\"`)\n\tIteratorContext(ctx context.Context, query interface{}, args ...interface{}) Iterator\n\n\t// NewIterator converts a *sql.Rows value into an Iterator.\n\tNewIterator(rows *sql.Rows) Iterator\n\n\t// NewIteratorContext converts a *sql.Rows value into an Iterator.\n\tNewIteratorContext(ctx context.Context, rows *sql.Rows) Iterator\n}\n\n// SQLExecer provides methods for executing statements that do not return\n// results.\ntype SQLExecer interface {\n\t// Exec executes a statement and returns sql.Result.\n\tExec() (sql.Result, error)\n\n\t// ExecContext executes a statement and returns sql.Result.\n\tExecContext(context.Context) (sql.Result, error)\n}\n\n// SQLPreparer provides the Prepare and PrepareContext methods for creating\n// prepared statements.\ntype SQLPreparer interface {\n\t// Prepare creates a prepared statement.\n\tPrepare() (*sql.Stmt, error)\n\n\t// PrepareContext creates a prepared statement.\n\tPrepareContext(context.Context) (*sql.Stmt, error)\n}\n\n// SQLGetter provides methods for executing statements that return results.\ntype SQLGetter interface {\n\t// Query returns *sql.Rows.\n\tQuery() (*sql.Rows, error)\n\n\t// QueryContext returns *sql.Rows.\n\tQueryContext(context.Context) (*sql.Rows, error)\n\n\t// QueryRow returns only one row.\n\tQueryRow() (*sql.Row, error)\n\n\t// QueryRowContext returns only one row.\n\tQueryRowContext(ctx context.Context) (*sql.Row, error)\n}\n\n// SQLEngine represents a SQL engine that can execute SQL queries. This is\n// compatible with *sql.DB.\ntype SQLEngine interface {\n\tExec(string, ...interface{}) (sql.Result, error)\n\tPrepare(string) (*sql.Stmt, error)\n\tQuery(string, ...interface{}) (*sql.Rows, error)\n\tQueryRow(string, ...interface{}) *sql.Row\n\n\tExecContext(context.Context, string, ...interface{}) (sql.Result, error)\n\tPrepareContext(context.Context, string) (*sql.Stmt, error)\n\tQueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)\n\tQueryRowContext(context.Context, string, ...interface{}) *sql.Row\n}\n"
        },
        {
          "name": "store.go",
          "type": "blob",
          "size": 2.10546875,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\n// Store represents a data store.\ntype Store interface {\n\tCollection\n}\n\n// StoreSaver is an interface for data stores that defines a Save method that\n// has the task of persisting a record.\ntype StoreSaver interface {\n\tSave(record Record) error\n}\n\n// StoreCreator is an interface for data stores that defines a Create method\n// that has the task of creating a new record.\ntype StoreCreator interface {\n\tCreate(record Record) error\n}\n\n// StoreDeleter is an interface for data stores that defines a Delete method\n// that has the task of removing a record.\ntype StoreDeleter interface {\n\tDelete(record Record) error\n}\n\n// StoreUpdater is an interface for data stores that defines a Update method\n// that has the task of updating a record.\ntype StoreUpdater interface {\n\tUpdate(record Record) error\n}\n\n// StoreGetter is an interface for data stores that defines a Get method that\n// has the task of retrieving a record.\ntype StoreGetter interface {\n\tGet(record Record, id interface{}) error\n}\n"
        },
        {
          "name": "union.go",
          "type": "blob",
          "size": 2.15234375,
          "content": "// Copyright (c) 2012-present The upper.io/db authors. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npackage db\n\nimport (\n\t\"github.com/upper/db/v4/internal/adapter\"\n)\n\n// OrExpr represents a logical expression joined by logical disjunction (OR).\ntype OrExpr struct {\n\t*adapter.LogicalExprGroup\n}\n\n// Or adds more expressions to the group.\nfunc (o *OrExpr) Or(orConds ...LogicalExpr) *OrExpr {\n\tvar fn func(*[]LogicalExpr) error\n\tif len(orConds) > 0 {\n\t\tfn = func(in *[]LogicalExpr) error {\n\t\t\t*in = append(*in, orConds...)\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn &OrExpr{o.LogicalExprGroup.Frame(fn)}\n}\n\n// Empty returns false if the expressions has zero conditions.\nfunc (o *OrExpr) Empty() bool {\n\treturn o.LogicalExprGroup.Empty()\n}\n\n// Or joins conditions under logical disjunction. Conditions can be represented\n// by `db.Cond{}`, `db.Or()` or `db.And()`.\n//\n// Example:\n//\n//\t// year = 2012 OR year = 1987\n//\tdb.Or(\n//\t\tdb.Cond{\"year\": 2012},\n//\t\tdb.Cond{\"year\": 1987},\n//\t)\nfunc Or(conds ...LogicalExpr) *OrExpr {\n\treturn &OrExpr{adapter.NewLogicalExprGroup(adapter.LogicalOperatorOr, defaultJoin(conds...)...)}\n}\n\nvar _ = adapter.LogicalExpr(&OrExpr{})\n"
        }
      ]
    }
  ]
}