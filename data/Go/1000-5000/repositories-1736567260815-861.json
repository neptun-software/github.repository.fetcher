{
  "metadata": {
    "timestamp": 1736567260815,
    "page": 861,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cucumber/godog",
      "stars": 2353,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1103515625,
          "content": "/cmd/godog/godog\n/example/example\n**/vendor/*\nGopkg.lock\nGopkg.toml\n\n.DS_Store\n.idea\n.vscode\n\n_artifacts\n\nvendor\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 21.1884765625,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThis project adheres to [Semantic Versioning](http://semver.org).\n\nThis document is formatted according to the principles of [Keep A CHANGELOG](http://keepachangelog.com).\n\n## Unreleased\n\n### Added\n- Step text is added to \"step is undefined\" error - ([669](https://github.com/cucumber/godog/pull/669) - [vearutop](https://github.com/vearutop))\n\n### Fixed\n- fix(formatter): On concurrent execution, execute formatter at end of Scenario - ([645](https://github.com/cucumber/godog/pull/645) - [tigh-latte](https://github.com/tigh-latte))\n\n## [v0.15.0]\n\n### Added\n- Improved the type checking of step return types and improved the error messages - ([647](https://github.com/cucumber/godog/pull/647) - [johnlon](https://github.com/johnlon))\n- Ambiguous step definitions will now be detected when strict mode is activated - ([636](https://github.com/cucumber/godog/pull/636)/([648](https://github.com/cucumber/godog/pull/648) - [johnlon](https://github.com/johnlon))\n- Provide support for attachments / embeddings including a new example in the examples dir - ([623](https://github.com/cucumber/godog/pull/623) - [johnlon](https://github.com/johnlon))\n\n### Changed\n- Formatters now have a `Close` method and associated `io.Writer` changed to `io.WriteCloser`.\n\n## [v0.14.1]\n\n### Added\n- Provide testing.T-compatible interface on test context, allowing usage of assertion libraries such as testify's assert/require - ([571](https://github.com/cucumber/godog/pull/571) - [mrsheepuk](https://github.com/mrsheepuk))\n- Created releasing guidelines - ([608](https://github.com/cucumber/godog/pull/608) - [glibas](https://github.com/glibas))\n\n### Fixed\n- Step duration calculation - ([616](https://github.com/cucumber/godog/pull/616) - [iaroslav-ciupin](https://github.com/iaroslav-ciupin))\n- Invalid memory address or nil pointer dereference in RetrieveFeatures - ([566](https://github.com/cucumber/godog/pull/566) - [corneldamian](https://github.com/corneldamian))\n\n## [v0.14.0]\n### Added\n- Improve ErrSkip handling, add test for Summary and operations order ([584](https://github.com/cucumber/godog/pull/584) - [vearutop](https://github.com/vearutop))\n\n### Fixed\n- Remove line overwriting for scenario outlines in cucumber formatter ([605](https://github.com/cucumber/godog/pull/605) - [glibas](https://github.com/glibas))\n- Remove duplicate warning message ([590](https://github.com/cucumber/godog/pull/590) - [vearutop](https://github.com/vearutop))\n- updated base formatter to set a scenario as passed unless there exist ([582](https://github.com/cucumber/godog/pull/582) - [roskee](https://github.com/roskee))\n\n### Changed\n- Update test.yml ([583](https://github.com/cucumber/godog/pull/583) - [vearutop](https://github.com/vearutop))\n\n## [v0.13.0]\n### Added\n- Support for reading feature files from an `fs.FS` ([550](https://github.com/cucumber/godog/pull/550) - [tigh-latte](https://github.com/tigh-latte))\n- Added keyword functions. ([509](https://github.com/cucumber/godog/pull/509) - [otrava7](https://github.com/otrava7))\n- Prefer go test to use of godog cli in README ([548](https://github.com/cucumber/godog/pull/548) - [danielhelfand](https://github.com/danielhelfand))\n- Use `fs.FS` abstraction for filesystem ([550](https://github.com/cucumber/godog/pull/550) - [tigh-latte](https://github.com/tigh-latte))\n- Cancel context for each scenario ([514](https://github.com/cucumber/godog/pull/514) - [draganm](https://github.com/draganm))\n\n### Fixed\n- Improve hooks invocation flow ([568](https://github.com/cucumber/godog/pull/568) - [vearutop](https://github.com/vearutop))\n- Result of testing.T respect strict option ([539](https://github.com/cucumber/godog/pull/539) - [eiel](https://github.com/eiel))\n\n### Changed\n- BREAKING CHANGE, upgraded cucumber and messages dependencies = ([515](https://github.com/cucumber/godog/pull/515) - [otrava7](https://github.com/otrava7))\n\n## [v0.12.6]\n### Changed\n- Each scenario is run with a cancellable `context.Context` which is cancelled at the end of the scenario. ([514](https://github.com/cucumber/godog/pull/514) - [draganm](https://github.com/draganm))\n- README example is updated with `context.Context` and `go test` usage. ([477](https://github.com/cucumber/godog/pull/477) - [vearutop](https://github.com/vearutop))\n- Removed deprecation of `godog.BindFlags`. ([498](https://github.com/cucumber/godog/pull/498) - [vearutop](https://github.com/vearutop))\n- Pretty Print when using rules. ([480](https://github.com/cucumber/godog/pull/480) - [dumpsterfireproject](https://github.com/dumpsterfireproject))\n\n### Fixed\n- Fixed a bug which would ignore the context returned from a substep.([488](https://github.com/cucumber/godog/pull/488) - [wichert](https://github.com/wichert))\n- Fixed a bug which would cause a panic when using the pretty formatter with a feature that contained a rule. ([480](https://github.com/cucumber/godog/pull/480) - [dumpsterfireproject](https://github.com/dumpsterfireproject))\n- Multiple invocations of AfterScenario hooks in case of undefined steps. ([494](https://github.com/cucumber/godog/pull/494) - [vearutop](https://github.com/vearutop))\n- Add a check for missing test files and raise a more helpful error. ([468](https://github.com/cucumber/godog/pull/468) - [ALCooper12](https://github.com/ALCooper12))\n- Fix version subcommand. Do not print usage if run subcommand fails. ([475](https://github.com/cucumber/godog/pull/475) - [coopernurse](https://github.com/coopernurse))\n\n### Added\n- Add new option for created features with parsing from byte slices. ([476](https://github.com/cucumber/godog/pull/476) - [akaswenwilk](https://github.com/akaswenwilk))\n\n### Deprecated\n- `godog` CLI tool prints deprecation warning. ([489](https://github.com/cucumber/godog/pull/489) - [vearutop](https://github.com/vearutop))\n\n## [v0.12.5]\n### Changed\n- Changed underlying cobra command setup to return errors instead of calling `os.Exit` directly to enable simpler testing. ([454](https://github.com/cucumber/godog/pull/454) - [mxygem](https://github.com/mxygem))\n- Remove use of deprecated methods from `_examples`. ([460](https://github.com/cucumber/godog/pull/460) - [ricardogarfe](https://github.com/ricardogarfe))\n\n### Fixed\n- Support for go1.18 in `godog` cli mode ([466](https://github.com/cucumber/godog/pull/466) - [vearutop](https://github.com/vearutop))\n\n## [v0.12.4]\n### Added\n- Allow suite-level configuration of steps and hooks ([453](https://github.com/cucumber/godog/pull/453) - [vearutop](https://github.com/vearutop))\n\n## [v0.12.3]\n### Added\n- Automated binary releases with GitHub Actions ([437](https://github.com/cucumber/godog/pull/437) - [vearutop](https://github.com/vearutop))\n- Automated binary versioning with `go install` ([437](https://github.com/cucumber/godog/pull/437) - [vearutop](https://github.com/vearutop))\n- Module with local replace in examples ([437](https://github.com/cucumber/godog/pull/437) - [vearutop](https://github.com/vearutop))\n\n### Changed\n- suggest to use `go install` instead of the deprecated `go get` to install the `godog` binary ([449](https://github.com/cucumber/godog/pull/449) - [dmitris](https://github.com/dmitris))\n\n### Fixed\n- After Scenario hook is called before After Step ([444](https://github.com/cucumber/godog/pull/444) - [vearutop](https://github.com/vearutop))\n- `check-go-version` in Makefile to run on WSL. ([443](https://github.com/cucumber/godog/pull/443) - [mxygem](https://github.com/mxygem))\n\n## [v0.12.2]\n### Fixed\n- Error in `go mod tidy` with `GO111MODULE=off` ([436](https://github.com/cucumber/godog/pull/436) - [vearutop](https://github.com/vearutop))\n\n## [v0.12.1]\n### Fixed\n- Unintended change of behavior in before step hook ([424](https://github.com/cucumber/godog/pull/424) - [nhatthm](https://github.com/nhatthm))\n\n## [v0.12.0]\n### Added\n- Support for step definitions without return ([364](https://github.com/cucumber/godog/pull/364) - [titouanfreville](https://github.com/titouanfreville))\n- Contextualized hooks for scenarios and steps ([409](https://github.com/cucumber/godog/pull/409) - [vearutop](https://github.com/vearutop))\n- Step result status in After hook ([409](https://github.com/cucumber/godog/pull/409) - [vearutop](https://github.com/vearutop))\n- Support auto converting doc strings to plain strings ([380](https://github.com/cucumber/godog/pull/380) - [chirino](https://github.com/chirino))\n- Use multiple formatters in the same test run ([392](https://github.com/cucumber/godog/pull/392) - [vearutop](https://github.com/vearutop))\n- Added `RetrieveFeatures()` method to `godog.TestSuite` ([276](https://github.com/cucumber/godog/pull/276) - [radtriste](https://github.com/radtriste))\n- Added support to create custom formatters ([372](https://github.com/cucumber/godog/pull/372) - [leviable](https://github.com/leviable))\n\n### Changed\n- Upgraded gherkin-go to v19 and messages-go to v16 ([402](https://github.com/cucumber/godog/pull/402) - [mbow](https://github.com/mbow))\n- Generate simpler snippets that use *godog.DocString and *godog.Table ([379](https://github.com/cucumber/godog/pull/379) - [chirino](https://github.com/chirino))\n\n### Deprecated\n- `ScenarioContext.BeforeScenario`, use `ScenarioContext.Before` ([409](https://github.com/cucumber/godog/pull/409)) - [vearutop](https://github.com/vearutop))\n- `ScenarioContext.AfterScenario`, use `ScenarioContext.After` ([409](https://github.com/cucumber/godog/pull/409)) - [vearutop](https://github.com/vearutop))\n- `ScenarioContext.BeforeStep`, use `ScenarioContext.StepContext().Before` ([409](https://github.com/cucumber/godog/pull/409)) - [vearutop](https://github.com/vearutop))\n- `ScenarioContext.AfterStep`, use `ScenarioContext.StepContext().After` ([409](https://github.com/cucumber/godog/pull/409)) - [vearutop](https://github.com/vearutop))\n\n### Fixed\n- Incorrect step definition output for Data Tables ([411](https://github.com/cucumber/godog/pull/411) - [karfrank](https://github.com/karfrank))\n- `ScenarioContext.AfterStep` not invoked after a failed case ([409](https://github.com/cucumber/godog/pull/409) - [vearutop](https://github.com/vearutop)))\n- Can't execute multiple specific scenarios in the same feature file ([414](https://github.com/cucumber/godog/pull/414) - [vearutop](https://github.com/vearutop)))\n\n## [v0.11.0]\n### Added\n- Created a simple example for a custom formatter ([330](https://github.com/cucumber/godog/pull/330) - [lonnblad](https://github.com/lonnblad))\n- --format junit:result.xml will now write to result.xml ([331](https://github.com/cucumber/godog/pull/331) - [lonnblad](https://github.com/lonnblad))\n- Added make commands to create artifacts and upload them to a github release ([333](https://github.com/cucumber/godog/pull/333) - [lonnblad](https://github.com/lonnblad))\n- Created release notes and changelog for v0.11.0 ([355](https://github.com/cucumber/godog/pull/355) - [lonnblad](https://github.com/lonnblad))\n- Created v0.11.0-rc2 ([362](https://github.com/cucumber/godog/pull/362) - [lonnblad](https://github.com/lonnblad))\n\n### Changed\n- Added Cobra for the Command Line Interface ([321](https://github.com/cucumber/godog/pull/321) - [lonnblad](https://github.com/lonnblad))\n- Added internal packages for formatters, storage and models ([323](https://github.com/cucumber/godog/pull/323) - [lonnblad](https://github.com/lonnblad))\n- Added an internal package for tags filtering ([326](https://github.com/cucumber/godog/pull/326) - [lonnblad](https://github.com/lonnblad))\n- Added an internal pkg for the builder ([327](https://github.com/cucumber/godog/pull/327) - [lonnblad](https://github.com/lonnblad))\n- Moved the parser code to a new internal pkg ([329](https://github.com/cucumber/godog/pull/329) - [lonnblad](https://github.com/lonnblad))\n- Moved StepDefinition to the formatters pkg ([332](https://github.com/cucumber/godog/pull/332) - [lonnblad](https://github.com/lonnblad))\n- Removed go1.12 and added go1.15 to CI config ([356](https://github.com/cucumber/godog/pull/356) - [lonnblad](https://github.com/lonnblad))\n\n### Fixed\n- Improved the help text of the formatter flag in the run command ([347](https://github.com/cucumber/godog/pull/347) - [lonnblad](https://github.com/lonnblad))\n- Removed $GOPATH from the README.md and updated the example ([349](https://github.com/cucumber/godog/pull/349) - [lonnblad](https://github.com/lonnblad))\n- Fixed the undefined step definitions help ([350](https://github.com/cucumber/godog/pull/350) - [lonnblad](https://github.com/lonnblad))\n- Added a comment regarding running the examples within the $GOPATH ([352](https://github.com/cucumber/godog/pull/352) - [lonnblad](https://github.com/lonnblad))\n- doc(FAQ/TestMain): `testing.M.Run()` is optional ([353](https://github.com/cucumber/godog/pull/353) - [hansbogert](https://github.com/hansbogert))\n- Made a fix for the unstable Randomize Run tests ([354](https://github.com/cucumber/godog/pull/354) - [lonnblad](https://github.com/lonnblad))\n- Fixed an issue when go test is parsing command-line flags ([359](https://github.com/cucumber/godog/pull/359) - [lonnblad](https://github.com/lonnblad))\n- Make pickleStepIDs unique accross multiple paths ([366](https://github.com/cucumber/godog/pull/366) - [rickardenglund](https://github.com/rickardenglund))\n\n### Removed\n- Removed deprecated code ([322](https://github.com/cucumber/godog/pull/322) - [lonnblad](https://github.com/lonnblad))\n\n## [v0.10.0]\n### Added\n- Added concurrency support to the pretty formatter ([275](https://github.com/cucumber/godog/pull/275) - [lonnblad](https://github.com/lonnblad))\n- Added concurrency support to the events formatter ([274](https://github.com/cucumber/godog/pull/274) - [lonnblad](https://github.com/lonnblad))\n- Added concurrency support to the cucumber formatter ([273](https://github.com/cucumber/godog/pull/273) - [lonnblad](https://github.com/lonnblad))\n- Added an example for how to use assertion pkgs like testify with godog ([289](https://github.com/cucumber/godog/pull/289) - [lonnblad](https://github.com/lonnblad))\n- Added the new TestSuiteInitializer and ScenarioInitializer ([294](https://github.com/cucumber/godog/pull/294) - [lonnblad](https://github.com/lonnblad))\n- Added an in-mem storage for pickles ([304](https://github.com/cucumber/godog/pull/304) - [lonnblad](https://github.com/lonnblad))\n- Added Pickle and PickleStep results to the in-mem storage ([305](https://github.com/cucumber/godog/pull/305) - [lonnblad](https://github.com/lonnblad))\n- Added features to the in-mem storage ([306](https://github.com/cucumber/godog/pull/306) - [lonnblad](https://github.com/lonnblad))\n- Broke out some code from massive files into new files ([307](https://github.com/cucumber/godog/pull/307) - [lonnblad](https://github.com/lonnblad))\n- Added support for concurrent scenarios ([311](https://github.com/cucumber/godog/pull/311) - [lonnblad](https://github.com/lonnblad))\n\n### Changed\n- Broke out snippets gen and added sorting on method name ([271](https://github.com/cucumber/godog/pull/271) - [lonnblad](https://github.com/lonnblad))\n- Updated so that we run all tests concurrent now ([278](https://github.com/cucumber/godog/pull/278) - [lonnblad](https://github.com/lonnblad))\n- Moved fmt tests to a godog_test pkg and restructured the fmt output tests ([295](https://github.com/cucumber/godog/pull/295) - [lonnblad](https://github.com/lonnblad))\n- Moved builder tests to a godog_test pkg ([296](https://github.com/cucumber/godog/pull/296) - [lonnblad](https://github.com/lonnblad))\n- Made the builder tests run in parallel ([298](https://github.com/cucumber/godog/pull/298) - [lonnblad](https://github.com/lonnblad))\n- Refactored suite_context.go ([300](https://github.com/cucumber/godog/pull/300) - [lonnblad](https://github.com/lonnblad))\n- Added better testing of the Context Initializers and TestSuite{}.Run() ([301](https://github.com/cucumber/godog/pull/301) - [lonnblad](https://github.com/lonnblad))\n- Updated the README.md ([302](https://github.com/cucumber/godog/pull/302) - [lonnblad](https://github.com/lonnblad))\n- Unexported some exported properties in unexported structs ([303](https://github.com/cucumber/godog/pull/303) - [lonnblad](https://github.com/lonnblad))\n- Refactored some states in the formatters and feature struct ([310](https://github.com/cucumber/godog/pull/310) - [lonnblad](https://github.com/lonnblad))\n\n### Deprecated\n- Deprecated SuiteContext and ConcurrentFormatter ([314](https://github.com/cucumber/godog/pull/314) - [lonnblad](https://github.com/lonnblad))\n\n### Fixed\n- Fixed failing builder tests due to the v0.9.0 change ([lonnblad](https://github.com/lonnblad))\n- Update paths to screenshots for examples ([270](https://github.com/cucumber/godog/pull/270) - [leviable](https://github.com/leviable))\n- Made progress formatter verification a bit more accurate ([lonnblad](https://github.com/lonnblad))\n- Added comparison between single and multi threaded runs ([272](https://github.com/cucumber/godog/pull/272) - [lonnblad](https://github.com/lonnblad))\n- Fixed issue with empty feature file causing nil pointer deref ([288](https://github.com/cucumber/godog/pull/288) - [lonnblad](https://github.com/lonnblad))\n- Updated linting checks in circleci config and fixed linting issues ([290](https://github.com/cucumber/godog/pull/290) - [lonnblad](https://github.com/lonnblad))\n- Readded some legacy doc for FeatureContext ([297](https://github.com/cucumber/godog/pull/297) - [lonnblad](https://github.com/lonnblad))\n- Fixed an issue with calculating time for junit testsuite ([308](https://github.com/cucumber/godog/pull/308) - [lonnblad](https://github.com/lonnblad))\n- Fixed so that we don't execute features with zero scenarios ([315](https://github.com/cucumber/godog/pull/315) - [lonnblad](https://github.com/lonnblad))\n- Fixed the broken --random flag ([317](https://github.com/cucumber/godog/pull/317) - [lonnblad](https://github.com/lonnblad))\n\n### Removed\n- Removed pre go112 build code ([293](https://github.com/cucumber/godog/pull/293) - [lonnblad](https://github.com/lonnblad))\n- Removed the deprecated feature hooks ([312](https://github.com/cucumber/godog/pull/312) - [lonnblad](https://github.com/lonnblad))\n\n## [0.9.0]\n### Changed\n- Run godog features in CircleCI in strict mode ([mxygem](https://github.com/mxygem))\n- Removed TestMain call in `suite_test.go` for CI. ([mxygem](https://github.com/mxygem))\n- Migrated to [gherkin-go - v11.0.0](https://github.com/cucumber/gherkin-go/releases/tag/v11.0.0). ([240](https://github.com/cucumber/godog/pull/240) - [lonnblad](https://github.com/lonnblad))\n\n### Fixed\n- Fixed the time attributes in the JUnit formatter. ([232](https://github.com/cucumber/godog/pull/232) - [lonnblad](https://github.com/lonnblad))\n- Re enable custom formatters. ([238](https://github.com/cucumber/godog/pull/238) - [ericmcbride](https://github.com/ericmcbride))\n- Added back suite_test.go ([mxygem](https://github.com/mxygem))\n- Normalise module paths for use on Windows ([242](https://github.com/cucumber/godog/pull/242) - [gjtaylor](https://github.com/gjtaylor))\n- Fixed panic in indenting function `s` ([247](https://github.com/cucumber/godog/pull/247) - [titouanfreville](https://github.com/titouanfreville))\n- Fixed wrong version in API example ([263](https://github.com/cucumber/godog/pull/263) - [denis-trofimov](https://github.com/denis-trofimov))\n\n## [0.8.1]\n### Added\n- Link in Readme to the Slack community. ([210](https://github.com/cucumber/godog/pull/210) - [smikulcik](https://github.com/smikulcik))\n- Added run tests for Cucumber formatting. ([214](https://github.com/cucumber/godog/pull/214), [216](https://github.com/cucumber/godog/pull/216) - [lonnblad](https://github.com/lonnblad))\n\n### Changed\n- Renamed the `examples` directory to `_examples`, removing dependencies from the Go module ([218](https://github.com/cucumber/godog/pull/218) - [axw](https://github.com/axw))\n\n### Fixed\n- Find/Replaced references to DATA-DOG/godog -> cucumber/godog for docs. ([209](https://github.com/cucumber/godog/pull/209) - [smikulcik](https://github.com/smikulcik))\n- Fixed missing links in changelog to be correctly included! ([mxygem](https://github.com/mxygem))\n\n## [0.8.0]\n### Added\n- Added initial CircleCI config. ([mxygem](https://github.com/mxygem))\n- Added concurrency support for JUnit formatting ([lonnblad](https://github.com/lonnblad))\n\n### Changed\n- Changed code references to DATA-DOG/godog to cucumber/godog to help get things building correctly. ([mxygem](https://github.com/mxygem))\n\n[v0.15.0]: https://github.com/cucumber/godog/compare/v0.14.1...v0.15.0\n[v0.14.1]: https://github.com/cucumber/godog/compare/v0.14.0...v0.14.1\n[v0.14.0]: https://github.com/cucumber/godog/compare/v0.13.0...v0.14.0\n[v0.13.0]: https://github.com/cucumber/godog/compare/v0.12.6...v0.13.0\n[v0.12.6]: https://github.com/cucumber/godog/compare/v0.12.5...v0.12.6\n[v0.12.5]: https://github.com/cucumber/godog/compare/v0.12.4...v0.12.5\n[v0.12.4]: https://github.com/cucumber/godog/compare/v0.12.3...v0.12.4\n[v0.12.3]: https://github.com/cucumber/godog/compare/v0.12.2...v0.12.3\n[v0.12.2]: https://github.com/cucumber/godog/compare/v0.12.1...v0.12.2\n[v0.12.1]: https://github.com/cucumber/godog/compare/v0.12.0...v0.12.1\n[v0.12.0]: https://github.com/cucumber/godog/compare/v0.11.0...v0.12.0\n[v0.11.0]: https://github.com/cucumber/godog/compare/v0.10.0...v0.11.0\n[v0.10.0]: https://github.com/cucumber/godog/compare/v0.9.0...v0.10.0\n[0.9.0]: https://github.com/cucumber/godog/compare/v0.8.1...v0.9.0\n[0.8.1]: https://github.com/cucumber/godog/compare/v0.8.0...v0.8.1\n[0.8.0]: https://github.com/cucumber/godog/compare/v0.7.13...v0.8.0\n"
        },
        {
          "name": "CHANGELOG_OLD.md",
          "type": "blob",
          "size": 4.8330078125,
          "content": "# Change LOG\n\n**2020-02-06**\n- move to new [CHANGELOG.md](CHANGELOG.md)\n\n**2020-01-31**\n- change license to MIT and moving project repository to **cucumber**\n  organization.\n\n**2018-11-16**\n- added formatter output test suite, currently mainly pretty format\n  tested.\n- these tests, helped to identify some output format issues.\n\n**2018-11-12**\n- proper go module support added for `godog` command build.\n- added build tests.\n\n**2018-10-27**\n- support go1.11 new compiler and linker changes for **godog** command.\n- support go1.11 modules and `go mod` builds.\n- `BindFlags` now has a prefix option for flags, so that `go test` command\n  can avoid flag name collisions.\n- `BindFlags` respect default options provided for binding, so that it\n  does not override predefined options when flags are bind, see #144.\n- Minor patch to support tag filters on example tables for\n  ScenarioOutline.\n- Minor patch for pretty printer, when scenario has no steps, comment\n  possition computation was in panic.\n\n**2018-03-04**\n- support go1.10 new compiler and linker changes for **godog** command.\n\n**2017-08-31**\n- added **BeforeFeature** and **AfterFeature** hooks.\n- failed multistep error is now prepended with a parent step text in order\n  to determine failed nested step.\n- pretty format now removes the step definition location package name in\n  comment next to step if the step definition matches tested package. If\n  step definition is imported from other package, full package name will\n  be printed.\n\n**2017-05-04**\n- added **--strict** option in order to fail suite when there are pending\n  or undefined steps. By default, suite passes and treats pending or\n  undefined steps as TODOs.\n\n**2017-04-29** - **v0.7.0**\n- added support for nested steps. From now on, it is possible to return\n  **godog.Steps** instead of an **error** in the step definition func.\n  This change introduced few minor changes in **Formatter** interface. Be\n  sure to adapt the changes if you have custom formatters.\n\n**2017-04-27**\n- added an option to randomize scenario execution order, so we could\n  ensure that scenarios do not depend on global state.\n- godog was manually sorting feature files by name. Now it just runs them\n  in given order, you may sort them anyway you like. For example `godog\n  $(find . -name '*.feature' | sort)`\n\n**2016-10-30** - **v0.6.0**\n- added experimental **events** format, this might be used for unified\n  cucumber formats. But should be not adapted widely, since it is highly\n  possible that specification will change.\n- added **RunWithOptions** method which allows to easily run godog from\n  **TestMain** without needing to simulate flag arguments. These options\n  now allows to configure output writer.\n- added flag **-o, --output=runner.binary** which only compiles the test\n  runner executable, but does not execute it.\n- **FlagSet** initialization now takes io.Writer as output for help text\n  output. It was not showing nice colors on windows before.\n  **--no-colors** option only applies to test run output.\n\n**2016-06-14** - **v0.5.0**\n- godog now uses **go tool compile** and **go tool link** to support\n  vendor directory dependencies. It also compiles test executable the same\n  way as standard **go test** utility. With this change, only go\n  versions from **1.5** are now supported.\n\n**2016-06-01**\n- parse flags in main command, to show version and help without needing\n  to compile test package and buildable go sources.\n\n**2016-05-28**\n- show nicely formatted called step func name and file path\n\n**2016-05-26**\n- pack gherkin dependency in a subpackage to prevent compatibility\n  conflicts in the future. If recently upgraded, probably you will need to\n  reference gherkin as `github.com/DATA-DOG/godog/gherkin` instead.\n\n**2016-05-25**\n- refactored test suite build tooling in order to use standard **go test**\n  tool. Which allows to compile package with godog runner script in **go**\n  idiomatic way. It also supports all build environment options as usual.\n- **godog.Run** now returns an **int** exit status. It was not returning\n  anything before, so there is no compatibility breaks.\n\n**2016-03-04**\n- added **junit** compatible output formatter, which prints **xml**\n  results to **os.Stdout**\n- fixed #14 which skipped printing background steps when there was\n  scenario outline in feature.\n\n**2015-07-03**\n- changed **godog.Suite** from interface to struct. Context registration should be updated accordingly. The reason\nfor change: since it exports the same methods and there is no need to mock a function in tests, there is no\nobvious reason to keep an interface.\n- in order to support running suite concurrently, needed to refactor an entry point of application. The **Run** method\nnow is a func of godog package which initializes and run the suite (or more suites). Method **New** is removed. This\nchange made godog a little cleaner.\n- renamed **RegisterFormatter** func to **Format** to be more consistent.\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.61328125,
          "content": "# Welcome 💖\n\nBefore anything else, thank you for taking some of your precious time to help this project move forward. ❤️\n\nIf you're new to open source and feeling a bit nervous 😳, we understand! We recommend watching [this excellent guide](https://egghead.io/talks/git-how-to-make-your-first-open-source-contribution)\nto give you a grounding in some of the basic concepts. You could also watch [this talk](https://www.youtube.com/watch?v=tuSk6dMoTIs) from our very own wonderful [Marit van Dijk](https://github.com/mlvandijk) on her experiences contributing to Cucumber.\n\nWe want you to feel safe to make mistakes, and ask questions. If anything in this guide or anywhere else in the codebase doesn't make sense to you, please let us know! It's through your feedback that we can make this codebase more welcoming, so we'll be glad to hear thoughts.\n\nYou can chat with us in the `#committers` channel in our [community Discord](https://cucumber.io/docs/community/get-in-touch/#discord), or feel free to [raise an issue] if you're experiencing any friction trying make your contribution.\n\n## Setup\n\nTo get your development environment set up, you'll need to [install Go]. We're currently using version 1.17 for development.\n\nOnce that's done, try running the tests:\n\n    make test\n\nIf everything passes, you're ready to hack!\n\n[install go]: https://golang.org/doc/install\n[community Discord]: https://cucumber.io/community#discord\n[raise an issue]: https://github.com/cucumber/godog/issues/new/choose\n\n## Changing dependencies\n\nIf dependencies have changed, you will also need to update the _examples module. `go mod tidy` should be sufficient."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "The MIT License (MIT)\n\nCopyright (c) SmartBear\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.916015625,
          "content": ".PHONY: test gherkin bump cover\n\nVERS ?= $(shell git symbolic-ref -q --short HEAD || git describe --tags --exact-match)\n\nGO_MAJOR_VERSION = $(shell go version | cut -c 14- | cut -d' ' -f1 | cut -d'.' -f1)\nGO_MINOR_VERSION = $(shell go version | cut -c 14- | cut -d' ' -f1 | cut -d'.' -f2)\nMINIMUM_SUPPORTED_GO_MAJOR_VERSION = 1\nMINIMUM_SUPPORTED_GO_MINOR_VERSION = 16\nGO_VERSION_VALIDATION_ERR_MSG = Go version $(GO_MAJOR_VERSION).$(GO_MINOR_VERSION) is not supported, please update to at least $(MINIMUM_SUPPORTED_GO_MAJOR_VERSION).$(MINIMUM_SUPPORTED_GO_MINOR_VERSION)\n\n.PHONY: check-go-version\ncheck-go-version:\n\t@if [ $(GO_MAJOR_VERSION) -gt $(MINIMUM_SUPPORTED_GO_MAJOR_VERSION) ]; then \\\n\t\texit 0 ;\\\n\telif [ $(GO_MAJOR_VERSION) -lt $(MINIMUM_SUPPORTED_GO_MAJOR_VERSION) ]; then \\\n\t\techo '$(GO_VERSION_VALIDATION_ERR_MSG)';\\\n\t\texit 1; \\\n\telif [ $(GO_MINOR_VERSION) -lt $(MINIMUM_SUPPORTED_GO_MINOR_VERSION) ] ; then \\\n\t\techo '$(GO_VERSION_VALIDATION_ERR_MSG)';\\\n\t\texit 1; \\\n\tfi\n\ntest: check-go-version\n\t@echo \"running all tests\"\n\t@go fmt ./...\n\t@go run honnef.co/go/tools/cmd/staticcheck@v0.5.1 github.com/cucumber/godog\n\t@go run honnef.co/go/tools/cmd/staticcheck@v0.5.1 github.com/cucumber/godog/cmd/godog\n\tgo vet ./...\n\tgo test -race ./...\n\tgo run ./cmd/godog -f progress -c 4\n\ngherkin:\n\t@if [ -z \"$(VERS)\" ]; then echo \"Provide gherkin version like: 'VERS=commit-hash'\"; exit 1; fi\n\t@rm -rf gherkin\n\t@mkdir gherkin\n\t@curl -s -L https://github.com/cucumber/gherkin-go/tarball/$(VERS) | tar -C gherkin -zx --strip-components 1\n\t@rm -rf gherkin/{.travis.yml,.gitignore,*_test.go,gherkin-generate*,*.razor,*.jq,Makefile,CONTRIBUTING.md}\n\nbump:\n\t@if [ -z \"$(VERSION)\" ]; then echo \"Provide version like: 'VERSION=$(VERS) make bump'\"; exit 1; fi\n\t@echo \"bumping version from: $(VERS) to $(VERSION)\"\n\t@sed -i.bak 's/$(VERS)/$(VERSION)/g' godog.go\n\t@sed -i.bak 's/$(VERS)/$(VERSION)/g' _examples/api/features/version.feature\n\t@find . -name '*.bak' | xargs rm\n\ncover:\n\tgo test -race -coverprofile=coverage.txt\n\tgo tool cover -html=coverage.txt\n\trm coverage.txt\n\nARTIFACT_DIR := _artifacts\n\n# To upload artifacts for the current version;\n# execute: make upload\n#\n# Check https://github.com/tcnksm/ghr for usage of ghr\nupload: artifacts\n\tghr -replace $(VERS) $(ARTIFACT_DIR)\n\n# To build artifacts for the current version;\n# execute: make artifacts\nartifacts: \n\trm -rf $(ARTIFACT_DIR)\n\tmkdir $(ARTIFACT_DIR)\n\n\t$(call _build,darwin,amd64)\n\t$(call _build,linux,amd64)\n\t$(call _build,linux,arm64)\n\ndefine _build\n\tmkdir $(ARTIFACT_DIR)/godog-$(VERS)-$1-$2\n\tenv GOOS=$1 GOARCH=$2 go build -ldflags \"-X github.com/cucumber/godog.Version=$(VERS)\" -o $(ARTIFACT_DIR)/godog-$(VERS)-$1-$2/godog ./cmd/godog\n\tcp README.md $(ARTIFACT_DIR)/godog-$(VERS)-$1-$2/README.md\n\tcp LICENSE $(ARTIFACT_DIR)/godog-$(VERS)-$1-$2/LICENSE\n\tcd $(ARTIFACT_DIR) && tar -c --use-compress-program=\"pigz --fast\" -f godog-$(VERS)-$1-$2.tar.gz godog-$(VERS)-$1-$2 && cd ..\n\trm -rf $(ARTIFACT_DIR)/godog-$(VERS)-$1-$2\nendef\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.1083984375,
          "content": "[![#StandWithUkraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://vshymanskyy.github.io/StandWithUkraine)\n[![Build Status](https://github.com/cucumber/godog/workflows/test/badge.svg)](https://github.com/cucumber/godog/actions?query=branch%main+workflow%3Atest)\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/cucumber/godog)](https://pkg.go.dev/github.com/cucumber/godog)\n[![codecov](https://codecov.io/gh/cucumber/godog/branch/master/graph/badge.svg)](https://codecov.io/gh/cucumber/godog)\n[![pull requests](https://oselvar.com/api/badge?label=pull%20requests&csvUrl=https%3A%2F%2Fraw.githubusercontent.com%2Fcucumber%2Foselvar-github-metrics%2Fmain%2Fdata%2Fcucumber%2Fgodog%2FpullRequests.csv)](https://oselvar.com/github/cucumber/oselvar-github-metrics/main/cucumber/godog)\n[![issues](https://oselvar.com/api/badge?label=issues&csvUrl=https%3A%2F%2Fraw.githubusercontent.com%2Fcucumber%2Foselvar-github-metrics%2Fmain%2Fdata%2Fcucumber%2Fgodog%2Fissues.csv)](https://oselvar.com/github/cucumber/oselvar-github-metrics/main/cucumber/godog)\n\n# Godog\n\n<p align=\"center\"><img src=\"logo.png\" alt=\"Godog logo\" style=\"width:250px;\" /></p>\n\n**The API is likely to change a few times before we reach 1.0.0**\n\nPlease read the full README, you may find it very useful. And do not forget to peek into the [Release Notes](https://github.com/cucumber/godog/blob/master/release-notes) and the [CHANGELOG](https://github.com/cucumber/godog/blob/master/CHANGELOG.md) from time to time.\n\nPackage godog is the official Cucumber BDD framework for Golang, it merges specification and test documentation into one cohesive whole, using Gherkin formatted scenarios in the format of Given, When, Then.\n\nThe project was inspired by [behat][behat] and [cucumber][cucumber].\n\n## Why Godog/Cucumber\n\n### A single source of truth\n\nGodog merges specification and test documentation into one cohesive whole.\n\n### Living documentation\n\nBecause they're automatically tested by Godog, your specifications are\nalways bang up-to-date.\n\n### Focus on the customer\n\nBusiness and IT don't always understand each other. Godog's executable specifications encourage closer collaboration, helping teams keep the business goal in mind at all times.\n\n### Less rework\n\nWhen automated testing is this much fun, teams can easily protect themselves from costly regressions.\n\n### Read more\n- [Behaviour-Driven Development](https://cucumber.io/docs/bdd/)\n- [Gherkin Reference](https://cucumber.io/docs/gherkin/reference/)\n\n## Contributions\n\nGodog is a community driven Open Source Project within the Cucumber organization. We [welcome contributions from everyone](https://cucumber.io/blog/open-source/tackling-structural-racism-(and-sexism)-in-open-so/), and we're ready to support you if you have the enthusiasm to contribute.\n\nSee the [contributing guide] for more detail on how to get started.\n\nSee the [releasing guide] for release flow details.\n\n## Getting help\n\nWe have a [community Discord](https://cucumber.io/docs/community/get-in-touch/#discord) where you can chat with other users, developers, and BDD practitioners.\n\n## Examples\n\nYou can find a few examples [here](/_examples).\n\n**Note** that if you want to execute any of the examples and have the Git repository checked out in the `$GOPATH`, you need to use: `GO111MODULE=off`. [Issue](https://github.com/cucumber/godog/issues/344) for reference.\n\n### Godogs\n\nThe following example can be [found here](/_examples/godogs).\n\n#### Step 1 - Setup a go module\n\nCreate a new go module named **godogs** in your go workspace by running `mkdir godogs`\n\nFrom now on, use **godogs** as your working directory by running `cd godogs`\n\nInitiate the go module inside the **godogs** directory by running `go mod init godogs`\n\n#### Step 2 - Create gherkin feature\n\nImagine we have a **godog cart** to serve godogs for lunch.\n\nFirst of all, we describe our feature in plain text:\n\n``` gherkin\nFeature: eat godogs\n  In order to be happy\n  As a hungry gopher\n  I need to be able to eat godogs\n\n  Scenario: Eat 5 out of 12\n    Given there are 12 godogs\n    When I eat 5\n    Then there should be 7 remaining\n```\n\nRun `vim features/godogs.feature` and add the text above into the vim editor and save the file.\n\n#### Step 3 - Create godog step definitions\n\n**NOTE:** Same as **go test**, godog respects package level isolation. All your step definitions should be in your tested package root directory. In this case: **godogs**.\n\nCreate and copy the step definitions below into a new file by running `vim godogs_test.go`:\n``` go\npackage main\n\nimport \"github.com/cucumber/godog\"\n\nfunc iEat(arg1 int) error {\n        return godog.ErrPending\n}\n\nfunc thereAreGodogs(arg1 int) error {\n        return godog.ErrPending\n}\n\nfunc thereShouldBeRemaining(arg1 int) error {\n        return godog.ErrPending\n}\n\nfunc InitializeScenario(ctx *godog.ScenarioContext) {\n        ctx.Step(`^there are (\\d+) godogs$`, thereAreGodogs)\n        ctx.Step(`^I eat (\\d+)$`, iEat)\n        ctx.Step(`^there should be (\\d+) remaining$`, thereShouldBeRemaining)\n}\n```\n\nAlternatively, you can also specify the keyword (Given, When, Then...) when creating the step definitions:\n``` go\nfunc InitializeScenario(ctx *godog.ScenarioContext) {\n        ctx.Given(`^there are (\\d+) godogs$`, thereAreGodogs)\n        ctx.When(`^I eat (\\d+)$`, iEat)\n        ctx.Then(`^there should be (\\d+) remaining$`, thereShouldBeRemaining)\n}\n```\n\nOur module should now look like this:\n```\ngodogs\n- features\n  - godogs.feature\n- go.mod\n- go.sum\n- godogs_test.go\n```\n\nRun `go test` in the **godogs** directory to run the steps you have defined. You should now see that the scenario runs \nwith a warning stating there are no tests to run. \n```\ntesting: warning: no tests to run\nPASS\nok      godogs  0.225s\n```\n\nBy adding some logic to these steps, you will be able to thoroughly test the feature you just defined.\n\n#### Step 4 - Create the main program to test\n\nLet's keep it simple by only requiring an amount of **godogs** for now.\n\nCreate and copy the code below into a new file by running `vim godogs.go`\n```go\npackage main\n\n// Godogs available to eat\nvar Godogs int\n\nfunc main() { /* usual main func */ }\n```\n\nOur module should now look like this:\n```\ngodogs\n- features\n  - godogs.feature\n- go.mod\n- go.sum\n- godogs.go\n- godogs_test.go\n```\n\n#### Step 5 - Add some logic to the step definitions\n\nNow lets implement our step definitions to test our feature requirements.\n\nReplace the contents of `godogs_test.go` with the code below by running `vim godogs_test.go`.\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"errors\"\n  \"fmt\"\n  \"testing\"\n\n  \"github.com/cucumber/godog\"\n)\n\n// godogsCtxKey is the key used to store the available godogs in the context.Context.\ntype godogsCtxKey struct{}\n\nfunc thereAreGodogs(ctx context.Context, available int) (context.Context, error) {\n  return context.WithValue(ctx, godogsCtxKey{}, available), nil\n}\n\nfunc iEat(ctx context.Context, num int) (context.Context, error) {\n  available, ok := ctx.Value(godogsCtxKey{}).(int)\n  if !ok {\n    return ctx, errors.New(\"there are no godogs available\")\n  }\n\n  if available < num {\n    return ctx, fmt.Errorf(\"you cannot eat %d godogs, there are %d available\", num, available)\n  }\n\n  available -= num\n\n  return context.WithValue(ctx, godogsCtxKey{}, available), nil\n}\n\nfunc thereShouldBeRemaining(ctx context.Context, remaining int) error {\n  available, ok := ctx.Value(godogsCtxKey{}).(int)\n  if !ok {\n    return errors.New(\"there are no godogs available\")\n  }\n\n  if available != remaining {\n    return fmt.Errorf(\"expected %d godogs to be remaining, but there is %d\", remaining, available)\n  }\n\n  return nil\n}\n\nfunc TestFeatures(t *testing.T) {\n  suite := godog.TestSuite{\n    ScenarioInitializer: InitializeScenario,\n    Options: &godog.Options{\n      Format:   \"pretty\",\n      Paths:    []string{\"features\"},\n      TestingT: t, // Testing instance that will run subtests.\n    },\n  }\n\n  if suite.Run() != 0 {\n    t.Fatal(\"non-zero status returned, failed to run feature tests\")\n  }\n}\n\nfunc InitializeScenario(sc *godog.ScenarioContext) {\n  sc.Step(`^there are (\\d+) godogs$`, thereAreGodogs)\n  sc.Step(`^I eat (\\d+)$`, iEat)\n  sc.Step(`^there should be (\\d+) remaining$`, thereShouldBeRemaining)\n}\n```\n\nIn this example, we are using `context.Context` to pass the state between the steps. \nEvery scenario starts with an empty context and then steps and hooks can add relevant information to it.\nInstrumented context is chained through the steps and hooks and is safe to use when multiple scenarios are running concurrently.\n\nWhen you run godog again with `go test -v godogs_test.go`, you should see a passing run:\n```\n=== RUN   TestFeatures\nFeature: eat godogs\n  In order to be happy\n  As a hungry gopher\n  I need to be able to eat godogs\n=== RUN   TestFeatures/Eat_5_out_of_12\n\n  Scenario: Eat 5 out of 12          # features/godogs.feature:6\n    Given there are 12 godogs        # godog_test.go:15 -> command-line-arguments.thereAreGodogs\n    When I eat 5                     # godog_test.go:19 -> command-line-arguments.iEat\n    Then there should be 7 remaining # godog_test.go:34 -> command-line-arguments.thereShouldBeRemaining\n\n1 scenarios (1 passed)\n3 steps (3 passed)\n279.917µs\n--- PASS: TestFeatures (0.00s)\n    --- PASS: TestFeatures/Eat_5_out_of_12 (0.00s)\nPASS\nok      command-line-arguments  0.164s\n```\n\nYou may hook to `ScenarioContext` **Before** event in order to reset or pre-seed the application state before each scenario. \nYou may hook into more events, like `sc.StepContext()` **After** to print all state in case of an error. \nOr **BeforeSuite** to prepare a database.\n\nBy now, you should have figured out, how to use **godog**. Another piece of advice is to make steps orthogonal, small and simple to read for a user. \nWhether the user is a dumb website user or an API developer, who may understand a little more technical context - it should target that user.\n\nWhen steps are orthogonal and small, you can combine them just like you do with Unix tools. Look how to simplify or remove ones, which can be composed.\n\n`TestFeatures` acts as a regular Go test, so you can leverage your IDE facilities to run and debug it.\n\n### Attachments\n\nAn example showing how to make attachments (aka embeddings) to the results is shown in [_examples/attachments](/_examples/attachments/)\n\n## Code of Conduct\n\nEveryone interacting in this codebase and issue tracker is expected to follow the Cucumber [code of conduct](https://github.com/cucumber/cucumber/blob/master/CODE_OF_CONDUCT.md).\n\n## References and Tutorials\n\n- [cucumber-html-reporter](https://github.com/gkushang/cucumber-html-reporter),\n  may be used in order to generate **html** reports together with **cucumber** output formatter. See the [following docker image](https://github.com/myie/cucumber-html-reporter) for usage details.\n- [how to use godog by semaphoreci](https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go)\n- see [examples](https://github.com/cucumber/godog/tree/master/_examples)\n- see extension [AssistDog](https://github.com/hellomd/assistdog),\n  which may have useful **gherkin.DataTable** transformations or comparison methods for assertions.\n\n## Documentation\n\nSee [pkg documentation][godoc] for general API details.\nSee **[Circle Config](/.circleci/config.yml)** for supported **go** versions.\nSee `godog -h` for general command options.\n\nSee implementation examples:\n\n- [rest API server](/_examples/api)\n- [rest API with Database](/_examples/db)\n- [godogs](/_examples/godogs)\n\n## FAQ\n\n### Running Godog with go test\n\nYou may integrate running **godog** in your **go test** command. \n\n#### Subtests of *testing.T\n\nYou can run test suite using go [Subtests](https://pkg.go.dev/testing#hdr-Subtests_and_Sub_benchmarks).\nIn this case it is not necessary to have **godog** command installed. See the following example.\n\n```go\npackage main_test\n\nimport (\n\t\"testing\"\n\n\t\"github.com/cucumber/godog\"\n)\n\nfunc TestFeatures(t *testing.T) {\n  suite := godog.TestSuite{\n    ScenarioInitializer: func(s *godog.ScenarioContext) {\n      // Add step definitions here.\n    },\n    Options: &godog.Options{\n      Format:   \"pretty\",\n      Paths:    []string{\"features\"},\n      TestingT: t, // Testing instance that will run subtests.\n    },\n  }\n\n  if suite.Run() != 0 {\n    t.Fatal(\"non-zero status returned, failed to run feature tests\")\n  }\n}\n```\n\nThen you can run suite.\n```\ngo test -test.v -test.run ^TestFeatures$\n```\n\nOr a particular scenario.\n```\ngo test -test.v -test.run ^TestFeatures$/^my_scenario$\n```\n\n#### TestMain\n\nYou can run test suite using go [TestMain](https://golang.org/pkg/testing/#hdr-Main) func available since **go 1.4**. \nIn this case it is not necessary to have **godog** command installed. See the following examples.\n\nThe following example binds **godog** flags with specified prefix `godog` in order to prevent flag collisions.\n\n```go\npackage main\n\nimport (\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/cucumber/godog\"\n\t\"github.com/cucumber/godog/colors\"\n\t\"github.com/spf13/pflag\" // godog v0.11.0 and later\n)\n\nvar opts = godog.Options{\n\tOutput: colors.Colored(os.Stdout),\n\tFormat: \"progress\", // can define default values\n}\n\nfunc init() {\n\tgodog.BindFlags(\"godog.\", pflag.CommandLine, &opts) // godog v0.10.0 and earlier\n\tgodog.BindCommandLineFlags(\"godog.\", &opts)        // godog v0.11.0 and later\n}\n\nfunc TestMain(m *testing.M) {\n\tpflag.Parse()\n\topts.Paths = pflag.Args()\n\n\tstatus := godog.TestSuite{\n\t\tName: \"godogs\",\n\t\tTestSuiteInitializer: InitializeTestSuite,\n\t\tScenarioInitializer:  InitializeScenario,\n\t\tOptions: &opts,\n\t}.Run()\n\n\t// Optional: Run `testing` package's logic besides godog.\n\tif st := m.Run(); st > status {\n\t\tstatus = st\n\t}\n\n\tos.Exit(status)\n}\n```\n\nThen you may run tests with by specifying flags in order to filter features.\n\n```\ngo test -v --godog.random --godog.tags=wip\ngo test -v --godog.format=pretty --godog.random -race -coverprofile=coverage.txt -covermode=atomic\n```\n\nThe following example does not bind godog flags, instead manually configuring needed options.\n\n```go\nfunc TestMain(m *testing.M) {\n\topts := godog.Options{\n\t\tFormat:    \"progress\",\n\t\tPaths:     []string{\"features\"},\n\t\tRandomize: time.Now().UTC().UnixNano(), // randomize scenario execution order\n\t}\n\n\tstatus := godog.TestSuite{\n\t\tName: \"godogs\",\n\t\tTestSuiteInitializer: InitializeTestSuite,\n\t\tScenarioInitializer:  InitializeScenario,\n\t\tOptions: &opts,\n\t}.Run()\n\n\t// Optional: Run `testing` package's logic besides godog.\n\tif st := m.Run(); st > status {\n\t\tstatus = st\n\t}\n\n\tos.Exit(status)\n}\n```\n\nYou can even go one step further and reuse **go test** flags, like **verbose** mode in order to switch godog **format**. See the following example:\n\n```go\nfunc TestMain(m *testing.M) {\n\tformat := \"progress\"\n\tfor _, arg := range os.Args[1:] {\n\t\tif arg == \"-test.v=true\" { // go test transforms -v option\n\t\t\tformat = \"pretty\"\n\t\t\tbreak\n\t\t}\n\t}\n\n\topts := godog.Options{\n\t\tFormat: format,\n\t\tPaths:     []string{\"features\"},\n\t}\n\n\tstatus := godog.TestSuite{\n\t\tName: \"godogs\",\n\t\tTestSuiteInitializer: InitializeTestSuite,\n\t\tScenarioInitializer:  InitializeScenario,\n\t\tOptions: &opts,\n\t}.Run()\n\n\t// Optional: Run `testing` package's logic besides godog.\n\tif st := m.Run(); st > status {\n\t\tstatus = st\n\t}\n\n\tos.Exit(status)\n}\n```\n\nNow when running `go test -v` it will use **pretty** format.\n\n### Tags\n\nIf you want to filter scenarios by tags, you can use the `-t=<expression>` or `--tags=<expression>` where `<expression>` is one of the following:\n\n- `@wip` - run all scenarios with wip tag\n- `~@wip` - exclude all scenarios with wip tag\n- `@wip && ~@new` - run wip scenarios, but exclude new\n- `@wip,@undone` - run wip or undone scenarios\n\n### Using assertion packages like testify with Godog\nA more extensive example can be [found here](/_examples/assert-godogs).\n\n```go\nfunc thereShouldBeRemaining(ctx context.Context, remaining int) error {\n\tassert.Equal(\n    godog.T(ctx), Godogs, remaining, \n    \"Expected %d godogs to be remaining, but there is %d\", remaining, Godogs,\n  )\n\treturn nil\n}\n```\n\n### Embeds\n\nIf you're looking to compile your test binary in advance of running, you can compile the feature files into the binary via `go:embed`:\n\n```go\n\n//go:embed features/*\nvar features embed.FS\n\nvar opts = godog.Options{\n\tPaths: []string{\"features\"},\n\tFS:    features,\n}\n```\n\nNow, the test binary can be compiled with all feature files embedded, and can be ran independently from the feature files:\n\n```sh\n> go test -c ./test/integration/integration_test.go\n> mv integration.test /some/random/dir\n> cd /some/random/dir\n> ./integration.test\n```\n\n**NOTE:** `godog.Options.FS` is as `fs.FS`, so custom filesystem loaders can be used.\n\n## CLI Mode\n\n**NOTE:** The [`godog` CLI has been deprecated](https://github.com/cucumber/godog/discussions/478). It is recommended to use `go test` instead.  \n\nAnother way to use `godog` is to run it in CLI mode.\n\nIn this mode `godog` CLI will use `go` under the hood to compile and run your test suite.\n\n**Godog** does not intervene with the standard **go test** command behavior. You can leverage both frameworks to functionally test your application while maintaining all test related source code in **_test.go** files.\n\n**Godog** acts similar compared to **go test** command, by using go compiler and linker tool in order to produce test executable. Godog contexts need to be exported the same way as **Test** functions for go tests. Note, that if you use **godog** command tool, it will use `go` executable to determine compiler and linker.\n\n### Install\n```\ngo install github.com/cucumber/godog/cmd/godog@latest\n```\nAdding `@v0.12.0` will install v0.12.0 specifically instead of master.\n\nWith `go` version prior to 1.17, use `go get github.com/cucumber/godog/cmd/godog@v0.12.0`.\nRunning `within the $GOPATH`, you would also need to set `GO111MODULE=on`, like this:\n```\nGO111MODULE=on go get github.com/cucumber/godog/cmd/godog@v0.12.0\n```\n\n### Configure common options for godog CLI\n\nThere are no global options or configuration files. Alias your common or project based commands: `alias godog-wip=\"godog --format=progress --tags=@wip\"`\n\n## Concurrency\n\nWhen concurrency is configured in options, godog will execute the scenarios concurrently, which is supported by all supplied formatters.\n\nIn order to support concurrency well, you should reset the state and isolate each scenario. They should not share any state. It is suggested to run the suite concurrently in order to make sure there is no state corruption or race conditions in the application.\n\nIt is also useful to randomize the order of scenario execution, which you can now do with `--random` command option or `godog.Options.Randomize` setting.\n\n### Building your own custom formatter\nA simple example can be [found here](/_examples/custom-formatter).\n\n## License\n**Godog** and **Gherkin** are licensed under the [MIT][license] and developed as a part of the [cucumber project][cucumber]\n\n[godoc]: https://pkg.go.dev/github.com/cucumber/godog \"Documentation on godog\"\n[golang]: https://golang.org/  \"GO programming language\"\n[behat]: http://docs.behat.org/ \"Behavior driven development framework for PHP\"\n[cucumber]: https://cucumber.io/ \"Behavior driven development framework\"\n[license]: https://en.wikipedia.org/wiki/MIT_License \"The MIT license\"\n[contributing guide]: https://github.com/cucumber/godog/blob/main/CONTRIBUTING.md\n[releasing guide]: https://github.com/cucumber/godog/blob/main/RELEASING.md\n[community Discord]: https://cucumber.io/community#discord\n\n\n\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 2.6787109375,
          "content": "# Releasing Guidelines for Cucumber Godog\n\nThis document provides guidelines for releasing new versions of Cucumber Godog. Follow these steps to ensure a smooth and consistent release process.\n\n## Versioning\n\nCucumber Godog follows [Semantic Versioning]. Version numbers are in the format `MAJOR.MINOR.PATCH`.\n\n### Current (for v0.MINOR.PATCH)\n\n- **MINOR**: Incompatible API changes.\n- **PATCH**: Backward-compatible new features and bug fixes.\n\n### After v1.X.X release\n\n- **MAJOR**: Incompatible API changes.\n- **MINOR**: Backward-compatible new features.\n- **PATCH**: Backward-compatible bug fixes.\n\n## Release Process\n\n1. **Update Changelog:**\n    - Open `CHANGELOG.md` and add an entry for the upcoming release formatting according to the principles of [Keep A CHANGELOG].\n    - Include details about new features, enhancements, and bug fixes.\n\n2. **Run Tests:**\n    - Run the test suite to ensure all existing features are working as expected.\n\n3. **Manual Testing for Backwards Compatibility:**\n    - Manually test the new release with external libraries that depend on Cucumber Godog.\n    - Look for any potential backwards compatibility issues, especially with widely-used libraries.\n    - Address any identified issues before proceeding.\n\n4. **Create Release on GitHub:**\n    - Go to the [Releases] page on GitHub.\n    - Click on \"Draft a new release.\"\n    - Tag version should be set to the new tag vMAJOR.MINOR.PATCH\n    - Title the release using the version number (e.g., \"vMAJOR.MINOR.PATCH\").\n    - Click 'Generate release notes'\n\n5. **Publish Release:**\n    - Click \"Publish release\" to make the release public.\n\n6. **Announce the Release:**\n    - Make an announcement on relevant communication channels (e.g., [community Discord]) about the new release.\n\n## Additional Considerations\n\n- **Documentation:**\n    - Update the project documentation on the [website], if applicable.\n\n- **Deprecation Notices:**\n    - If any features are deprecated, clearly document them in the release notes and provide guidance on migration.\n\n- **Compatibility:**\n    - Clearly state any compatibility requirements or changes in the release notes.\n\n- **Feedback:**\n    - Encourage users to provide feedback and report any issues with the new release.\n\nFollowing these guidelines, including manual testing with external libraries, will help ensure a thorough release process for Cucumber Godog, allowing detection and resolution of potential backwards compatibility issues before tagging the release.\n\n[community Discord]: https://cucumber.io/community#discord\n[website]: https://cucumber.github.io/godog/\n[Releases]: https://github.com/cucumber/godog/releases\n[Semantic Versioning]: http://semver.org\n[Keep A CHANGELOG]: http://keepachangelog.com"
        },
        {
          "name": "_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "attachment_test.go",
          "type": "blob",
          "size": 0.748046875,
          "content": "package godog\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestAttach(t *testing.T) {\n\n\tctx := context.Background()\n\n\tctx = Attach(ctx, Attachment{Body: []byte(\"body1\"), FileName: \"fileName1\", MediaType: \"mediaType1\"})\n\tctx = Attach(ctx, Attachment{Body: []byte(\"body2\"), FileName: \"fileName2\", MediaType: \"mediaType2\"})\n\n\tattachments := Attachments(ctx)\n\n\tassert.Equal(t, 2, len(attachments))\n\n\tassert.Equal(t, []byte(\"body1\"), attachments[0].Body)\n\tassert.Equal(t, \"fileName1\", attachments[0].FileName)\n\tassert.Equal(t, \"mediaType1\", attachments[0].MediaType)\n\n\tassert.Equal(t, []byte(\"body2\"), attachments[1].Body)\n\tassert.Equal(t, \"fileName2\", attachments[1].FileName)\n\tassert.Equal(t, \"mediaType2\", attachments[1].MediaType)\n}\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.119140625,
          "content": "coverage:\n  status:\n    project:\n      default:\n        threshold: 0.5%\n    patch:\n      default:\n        threshold: 0.5%\n"
        },
        {
          "name": "colors",
          "type": "tree",
          "content": null
        },
        {
          "name": "example_subtests_test.go",
          "type": "blob",
          "size": 0.986328125,
          "content": "package godog_test\n\nimport (\n\t\"testing\"\n\n\t\"github.com/cucumber/godog\"\n)\n\nfunc ExampleTestSuite_Run_subtests() {\n\tvar t *testing.T // Comes from your test function, e.g. func TestFeatures(t *testing.T).\n\n\tsuite := godog.TestSuite{\n\t\tScenarioInitializer: func(s *godog.ScenarioContext) {\n\t\t\t// Add step definitions here.\n\t\t},\n\t\tOptions: &godog.Options{\n\t\t\tFormat:   \"pretty\",\n\t\t\tPaths:    []string{\"features\"},\n\t\t\tTestingT: t, // Testing instance that will run subtests.\n\t\t},\n\t}\n\n\tif suite.Run() != 0 {\n\t\tt.Fatal(\"non-zero status returned, failed to run feature tests\")\n\t}\n}\n\nfunc TestFeatures(t *testing.T) {\n\tsuite := godog.TestSuite{\n\t\tScenarioInitializer: func(s *godog.ScenarioContext) {\n\t\t\tgodog.InitializeScenario(s)\n\n\t\t\t// Add step definitions here.\n\t\t},\n\t\tOptions: &godog.Options{\n\t\t\tFormat:   \"pretty\",\n\t\t\tPaths:    []string{\"features\"},\n\t\t\tTestingT: t, // Testing instance that will run subtests.\n\t\t},\n\t}\n\n\tif suite.Run() != 0 {\n\t\tt.Fatal(\"non-zero status returned, failed to run feature tests\")\n\t}\n}\n"
        },
        {
          "name": "features",
          "type": "tree",
          "content": null
        },
        {
          "name": "flags.go",
          "type": "blob",
          "size": 7.146484375,
          "content": "package godog\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/cucumber/godog/colors\"\n\t\"github.com/cucumber/godog/internal/utils\"\n)\n\n// repeats a space n times\nvar s = utils.S\n\nvar descFeaturesArgument = \"Optional feature(s) to run. Can be:\\n\" +\n\ts(4) + \"- dir \" + colors.Yellow(\"(features/)\") + \"\\n\" +\n\ts(4) + \"- feature \" + colors.Yellow(\"(*.feature)\") + \"\\n\" +\n\ts(4) + \"- scenario at specific line \" + colors.Yellow(\"(*.feature:10)\") + \"\\n\" +\n\t\"If no feature paths are listed, suite tries \" + colors.Yellow(\"features\") + \" path by default.\\n\" +\n\t\"Multiple comma-separated values can be provided.\\n\"\n\nvar descConcurrencyOption = \"Run the test suite with concurrency level:\\n\" +\n\ts(4) + \"- \" + colors.Yellow(`= 1`) + \": supports all types of formats.\\n\" +\n\ts(4) + \"- \" + colors.Yellow(`>= 2`) + \": only supports \" + colors.Yellow(\"progress\") + \". Note, that\\n\" +\n\ts(4) + \"your context needs to support parallel execution.\"\n\nvar descTagsOption = \"Filter scenarios by tags. Expression can be:\\n\" +\n\ts(4) + \"- \" + colors.Yellow(`\"@wip\"`) + \": run all scenarios with wip tag\\n\" +\n\ts(4) + \"- \" + colors.Yellow(`\"~@wip\"`) + \": exclude all scenarios with wip tag\\n\" +\n\ts(4) + \"- \" + colors.Yellow(`\"@wip && ~@new\"`) + \": run wip scenarios, but exclude new\\n\" +\n\ts(4) + \"- \" + colors.Yellow(`\"@wip,@undone\"`) + \": run wip or undone scenarios\"\n\nvar descRandomOption = \"Randomly shuffle the scenario execution order.\\n\" +\n\t\"Specify SEED to reproduce the shuffling from a previous run.\\n\" +\n\ts(4) + `e.g. ` + colors.Yellow(`--random`) + \" or \" + colors.Yellow(`--random=5738`)\n\n// FlagSet allows to manage flags by external suite runner\n// builds flag.FlagSet with godog flags binded\n//\n// Deprecated:\nfunc FlagSet(opt *Options) *flag.FlagSet {\n\tset := flag.NewFlagSet(\"godog\", flag.ExitOnError)\n\tBindFlags(\"\", set, opt)\n\tset.Usage = usage(set, opt.Output)\n\treturn set\n}\n\n// BindFlags binds godog flags to given flag set prefixed\n// by given prefix, without overriding usage\nfunc BindFlags(prefix string, set *flag.FlagSet, opt *Options) {\n\tset.Usage = usage(set, set.Output())\n\n\tdescFormatOption := \"How to format tests output. Built-in formats:\\n\"\n\n\ttype fm struct {\n\t\tname string\n\t\tdesc string\n\t}\n\tvar fms []fm\n\tfor name, desc := range AvailableFormatters() {\n\t\tfms = append(fms, fm{\n\t\t\tname: name,\n\t\t\tdesc: desc,\n\t\t})\n\t}\n\tsort.Slice(fms, func(i, j int) bool {\n\t\treturn fms[i].name < fms[j].name\n\t})\n\n\tfor _, fm := range fms {\n\t\tdescFormatOption += s(4) + \"- \" + colors.Yellow(fm.name) + \": \" + fm.desc + \"\\n\"\n\t}\n\n\tdescFormatOption = strings.TrimSpace(descFormatOption)\n\n\t// override flag defaults if any corresponding properties were supplied on the incoming `opt`\n\tdefFormatOption := \"pretty\"\n\tif opt.Format != \"\" {\n\t\tdefFormatOption = opt.Format\n\t}\n\n\tdefTagsOption := \"\"\n\tif opt.Tags != \"\" {\n\t\tdefTagsOption = opt.Tags\n\t}\n\n\tdefConcurrencyOption := 1\n\tif opt.Concurrency != 0 {\n\t\tdefConcurrencyOption = opt.Concurrency\n\t}\n\n\tdefShowStepDefinitions := false\n\tif opt.ShowStepDefinitions {\n\t\tdefShowStepDefinitions = opt.ShowStepDefinitions\n\t}\n\n\tdefStopOnFailure := false\n\tif opt.StopOnFailure {\n\t\tdefStopOnFailure = opt.StopOnFailure\n\t}\n\n\tdefStrict := false\n\tif opt.Strict {\n\t\tdefStrict = opt.Strict\n\t}\n\n\tdefNoColors := false\n\tif opt.NoColors {\n\t\tdefNoColors = opt.NoColors\n\t}\n\n\tset.StringVar(&opt.Format, prefix+\"format\", defFormatOption, descFormatOption)\n\tset.StringVar(&opt.Format, prefix+\"f\", defFormatOption, descFormatOption)\n\tset.StringVar(&opt.Tags, prefix+\"tags\", defTagsOption, descTagsOption)\n\tset.StringVar(&opt.Tags, prefix+\"t\", defTagsOption, descTagsOption)\n\tset.IntVar(&opt.Concurrency, prefix+\"concurrency\", defConcurrencyOption, descConcurrencyOption)\n\tset.IntVar(&opt.Concurrency, prefix+\"c\", defConcurrencyOption, descConcurrencyOption)\n\tset.BoolVar(&opt.ShowStepDefinitions, prefix+\"definitions\", defShowStepDefinitions, \"Print all available step definitions.\")\n\tset.BoolVar(&opt.ShowStepDefinitions, prefix+\"d\", defShowStepDefinitions, \"Print all available step definitions.\")\n\tset.BoolVar(&opt.StopOnFailure, prefix+\"stop-on-failure\", defStopOnFailure, \"Stop processing on first failed scenario.\")\n\tset.BoolVar(&opt.Strict, prefix+\"strict\", defStrict, \"Fail suite when there are pending or undefined or ambiguous steps.\")\n\tset.BoolVar(&opt.NoColors, prefix+\"no-colors\", defNoColors, \"Disable ansi colors.\")\n\tset.Var(&randomSeed{&opt.Randomize}, prefix+\"random\", descRandomOption)\n\tset.BoolVar(&opt.ShowHelp, \"godog.help\", false, \"Show usage help.\")\n\tset.Func(prefix+\"paths\", descFeaturesArgument, func(paths string) error {\n\t\tif paths != \"\" {\n\t\t\topt.Paths = strings.Split(paths, \",\")\n\t\t}\n\n\t\treturn nil\n\t})\n}\n\ntype flagged struct {\n\tshort, long, descr, dflt string\n}\n\nfunc (f *flagged) name() string {\n\tvar name string\n\tswitch {\n\tcase len(f.short) > 0 && len(f.long) > 0:\n\t\tname = fmt.Sprintf(\"-%s, --%s\", f.short, f.long)\n\tcase len(f.long) > 0:\n\t\tname = fmt.Sprintf(\"--%s\", f.long)\n\tcase len(f.short) > 0:\n\t\tname = fmt.Sprintf(\"-%s\", f.short)\n\t}\n\n\tif f.long == \"random\" {\n\t\t// `random` is special in that we will later assign it randomly\n\t\t// if the user specifies `--random` without specifying one,\n\t\t// so mask the \"default\" value here to avoid UI confusion about\n\t\t// what the value will end up being.\n\t\tname += \"[=SEED]\"\n\t} else if f.dflt != \"true\" && f.dflt != \"false\" {\n\t\tname += \"=\" + f.dflt\n\t}\n\treturn name\n}\n\nfunc usage(set *flag.FlagSet, w io.Writer) func() {\n\treturn func() {\n\t\tvar list []*flagged\n\t\tvar longest int\n\t\tset.VisitAll(func(f *flag.Flag) {\n\t\t\tvar fl *flagged\n\t\t\tfor _, flg := range list {\n\t\t\t\tif flg.descr == f.Usage {\n\t\t\t\t\tfl = flg\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif nil == fl {\n\t\t\t\tfl = &flagged{\n\t\t\t\t\tdflt:  f.DefValue,\n\t\t\t\t\tdescr: f.Usage,\n\t\t\t\t}\n\t\t\t\tlist = append(list, fl)\n\t\t\t}\n\t\t\tif len(f.Name) > 2 {\n\t\t\t\tfl.long = f.Name\n\t\t\t} else {\n\t\t\t\tfl.short = f.Name\n\t\t\t}\n\t\t})\n\n\t\tfor _, f := range list {\n\t\t\tif len(f.name()) > longest {\n\t\t\t\tlongest = len(f.name())\n\t\t\t}\n\t\t}\n\n\t\t// prints an option or argument with a description, or only description\n\t\topt := func(name, desc string) string {\n\t\t\tvar ret []string\n\t\t\tlines := strings.Split(desc, \"\\n\")\n\t\t\tret = append(ret, s(2)+colors.Green(name)+s(longest+2-len(name))+lines[0])\n\t\t\tif len(lines) > 1 {\n\t\t\t\tfor _, ln := range lines[1:] {\n\t\t\t\t\tret = append(ret, s(2)+s(longest+2)+ln)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn strings.Join(ret, \"\\n\")\n\t\t}\n\n\t\t// --- GENERAL ---\n\t\tfmt.Fprintln(w, colors.Yellow(\"Usage:\"))\n\t\tfmt.Fprintf(w, s(2)+\"go test [options]\\n\\n\")\n\n\t\t// --- OPTIONS ---\n\t\tfmt.Fprintln(w, colors.Yellow(\"Options:\"))\n\t\tfor _, f := range list {\n\t\t\tfmt.Fprintln(w, opt(f.name(), f.descr))\n\t\t}\n\t\tfmt.Fprintln(w, \"\")\n\t}\n}\n\n// randomSeed implements `flag.Value`, see https://golang.org/pkg/flag/#Value\ntype randomSeed struct {\n\tref *int64\n}\n\nfunc (rs *randomSeed) Set(s string) error {\n\tif s == \"true\" {\n\t\t*rs.ref = makeRandomSeed()\n\t\treturn nil\n\t}\n\n\tif s == \"false\" {\n\t\t*rs.ref = 0\n\t\treturn nil\n\t}\n\n\ti, err := strconv.ParseInt(s, 10, 64)\n\t*rs.ref = i\n\treturn err\n}\n\nfunc (rs *randomSeed) String() string {\n\tif rs.ref == nil {\n\t\treturn \"0\"\n\t}\n\treturn strconv.FormatInt(*rs.ref, 10)\n}\n\n// If a Value has an IsBoolFlag() bool method returning true, the command-line\n// parser makes -name equivalent to -name=true rather than using the next\n// command-line argument.\nfunc (rs *randomSeed) IsBoolFlag() bool {\n\treturn *rs.ref == 0\n}\n"
        },
        {
          "name": "flags_test.go",
          "type": "blob",
          "size": 5.35546875,
          "content": "package godog\n\nimport (\n\t\"bytes\"\n\t\"flag\"\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/cucumber/godog/colors\"\n\t\"github.com/cucumber/godog/internal/formatters\"\n)\n\nfunc TestFlagsShouldRandomizeAndGenerateSeed(t *testing.T) {\n\tvar opt Options\n\tflags := FlagSet(&opt)\n\tif err := flags.Parse([]string{\"--random\"}); err != nil {\n\t\tt.Fatalf(\"unable to parse flags: %v\", err)\n\t}\n\n\tif opt.Randomize <= 0 {\n\t\tt.Fatal(\"should have generated random seed\")\n\t}\n}\n\nfunc TestFlagsShouldRandomizeByGivenSeed(t *testing.T) {\n\tvar opt Options\n\tflags := FlagSet(&opt)\n\tif err := flags.Parse([]string{\"--random=123\"}); err != nil {\n\t\tt.Fatalf(\"unable to parse flags: %v\", err)\n\t}\n\n\tif opt.Randomize != 123 {\n\t\tt.Fatalf(\"expected random seed to be: 123, but it was: %d\", opt.Randomize)\n\t}\n}\n\nfunc TestFlagsShouldParseFormat(t *testing.T) {\n\tcases := map[string][]string{\n\t\t\"pretty\":   {},\n\t\t\"progress\": {\"-f\", \"progress\"},\n\t\t\"junit\":    {\"-f=junit\"},\n\t\t\"custom\":   {\"--format\", \"custom\"},\n\t\t\"cust\":     {\"--format=cust\"},\n\t}\n\n\tfor format, args := range cases {\n\t\tvar opt Options\n\t\tflags := FlagSet(&opt)\n\t\tif err := flags.Parse(args); err != nil {\n\t\t\tt.Fatalf(\"unable to parse flags: %v\", err)\n\t\t}\n\n\t\tif opt.Format != format {\n\t\t\tt.Fatalf(\"expected format: %s, but it was: %s\", format, opt.Format)\n\t\t}\n\t}\n}\n\nfunc TestFlagsUsageShouldIncludeFormatDescriptons(t *testing.T) {\n\tvar buf bytes.Buffer\n\toutput := colors.Uncolored(&buf)\n\n\t// register some custom formatter\n\tFormat(\"custom\", \"custom format description\", formatters.JUnitFormatterFunc)\n\n\tvar opt Options\n\tflags := FlagSet(&opt)\n\tusage(flags, output)()\n\n\tout := buf.String()\n\n\tfor name, desc := range AvailableFormatters() {\n\t\tmatch := fmt.Sprintf(\"%s: %s\\n\", name, desc)\n\t\tif idx := strings.Index(out, match); idx == -1 {\n\t\t\tt.Fatalf(\"could not locate format: %s description in flag usage\", name)\n\t\t}\n\t}\n}\n\nfunc TestBindFlagsShouldRespectFlagDefaults(t *testing.T) {\n\topts := Options{}\n\n\tBindFlags(\"flagDefaults.\", flag.CommandLine, &opts)\n\n\tif opts.Format != \"pretty\" {\n\t\tt.Fatalf(\"expected Format: pretty, but it was: %s\", opts.Format)\n\t}\n\tif opts.Tags != \"\" {\n\t\tt.Fatalf(\"expected Tags: '', but it was: %s\", opts.Tags)\n\t}\n\tif opts.Concurrency != 1 {\n\t\tt.Fatalf(\"expected Concurrency: 1, but it was: %d\", opts.Concurrency)\n\t}\n\tif opts.ShowStepDefinitions {\n\t\tt.Fatalf(\"expected ShowStepDefinitions: false, but it was: %t\", opts.ShowStepDefinitions)\n\t}\n\tif opts.StopOnFailure {\n\t\tt.Fatalf(\"expected StopOnFailure: false, but it was: %t\", opts.StopOnFailure)\n\t}\n\tif opts.Strict {\n\t\tt.Fatalf(\"expected Strict: false, but it was: %t\", opts.Strict)\n\t}\n\tif opts.NoColors {\n\t\tt.Fatalf(\"expected NoColors: false, but it was: %t\", opts.NoColors)\n\t}\n\tif opts.Randomize != 0 {\n\t\tt.Fatalf(\"expected Randomize: 0, but it was: %d\", opts.Randomize)\n\t}\n}\n\nfunc TestBindFlagsShouldRespectOptDefaults(t *testing.T) {\n\topts := Options{\n\t\tFormat:              \"progress\",\n\t\tTags:                \"test\",\n\t\tConcurrency:         2,\n\t\tShowStepDefinitions: true,\n\t\tStopOnFailure:       true,\n\t\tStrict:              true,\n\t\tNoColors:            true,\n\t\tRandomize:           int64(7),\n\t}\n\n\tflagSet := flag.FlagSet{}\n\n\tBindFlags(\"optDefaults.\", &flagSet, &opts)\n\n\tif opts.Format != \"progress\" {\n\t\tt.Fatalf(\"expected Format: progress, but it was: %s\", opts.Format)\n\t}\n\tif opts.Tags != \"test\" {\n\t\tt.Fatalf(\"expected Tags: 'test', but it was: %s\", opts.Tags)\n\t}\n\tif opts.Concurrency != 2 {\n\t\tt.Fatalf(\"expected Concurrency: 2, but it was: %d\", opts.Concurrency)\n\t}\n\tif !opts.ShowStepDefinitions {\n\t\tt.Fatalf(\"expected ShowStepDefinitions: true, but it was: %t\", opts.ShowStepDefinitions)\n\t}\n\tif !opts.StopOnFailure {\n\t\tt.Fatalf(\"expected StopOnFailure: true, but it was: %t\", opts.StopOnFailure)\n\t}\n\tif !opts.Strict {\n\t\tt.Fatalf(\"expected Strict: true, but it was: %t\", opts.Strict)\n\t}\n\tif !opts.NoColors {\n\t\tt.Fatalf(\"expected NoColors: true, but it was: %t\", opts.NoColors)\n\t}\n\tif opts.Randomize != 7 {\n\t\tt.Fatalf(\"expected Randomize: 7, but it was: %d\", opts.Randomize)\n\t}\n}\n\nfunc TestBindFlagsShouldRespectFlagOverrides(t *testing.T) {\n\topts := Options{\n\t\tFormat:              \"progress\",\n\t\tTags:                \"test\",\n\t\tConcurrency:         2,\n\t\tShowStepDefinitions: true,\n\t\tStopOnFailure:       true,\n\t\tStrict:              true,\n\t\tNoColors:            true,\n\t\tRandomize:           11,\n\t}\n\tflagSet := flag.FlagSet{}\n\n\tBindFlags(\"optOverrides.\", &flagSet, &opts)\n\n\tflagSet.Parse([]string{\n\t\t\"--optOverrides.format=junit\",\n\t\t\"--optOverrides.tags=test2\",\n\t\t\"--optOverrides.concurrency=3\",\n\t\t\"--optOverrides.definitions=false\",\n\t\t\"--optOverrides.stop-on-failure=false\",\n\t\t\"--optOverrides.strict=false\",\n\t\t\"--optOverrides.no-colors=false\",\n\t\t\"--optOverrides.random=2\",\n\t})\n\n\tif opts.Format != \"junit\" {\n\t\tt.Fatalf(\"expected Format: junit, but it was: %s\", opts.Format)\n\t}\n\tif opts.Tags != \"test2\" {\n\t\tt.Fatalf(\"expected Tags: 'test2', but it was: %s\", opts.Tags)\n\t}\n\tif opts.Concurrency != 3 {\n\t\tt.Fatalf(\"expected Concurrency: 3, but it was: %d\", opts.Concurrency)\n\t}\n\tif opts.ShowStepDefinitions {\n\t\tt.Fatalf(\"expected ShowStepDefinitions: true, but it was: %t\", opts.ShowStepDefinitions)\n\t}\n\tif opts.StopOnFailure {\n\t\tt.Fatalf(\"expected StopOnFailure: true, but it was: %t\", opts.StopOnFailure)\n\t}\n\tif opts.Strict {\n\t\tt.Fatalf(\"expected Strict: true, but it was: %t\", opts.Strict)\n\t}\n\tif opts.NoColors {\n\t\tt.Fatalf(\"expected NoColors: true, but it was: %t\", opts.NoColors)\n\t}\n\tif opts.Randomize != 2 {\n\t\tt.Fatalf(\"expected Randomize: 2, but it was: %d\", opts.Randomize)\n\t}\n}\n"
        },
        {
          "name": "flags_v0110.go",
          "type": "blob",
          "size": 0.87890625,
          "content": "package godog\n\nimport (\n\t\"errors\"\n\t\"flag\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/spf13/pflag\"\n\n\t\"github.com/cucumber/godog/internal/flags\"\n)\n\n// Choose randomly assigns a convenient pseudo-random seed value.\n// The resulting seed will be between `1-99999` for later ease of specification.\nfunc makeRandomSeed() int64 {\n\treturn rand.New(rand.NewSource(time.Now().UTC().UnixNano())).Int63n(99998) + 1\n}\n\nfunc flagSet(opt *Options) *pflag.FlagSet {\n\tset := pflag.NewFlagSet(\"godog\", pflag.ExitOnError)\n\tflags.BindRunCmdFlags(\"\", set, opt)\n\tpflag.ErrHelp = errors.New(\"godog: help requested\")\n\treturn set\n}\n\n// BindCommandLineFlags binds godog flags to given flag set prefixed\n// by given prefix, without overriding usage\nfunc BindCommandLineFlags(prefix string, opts *Options) {\n\tflagSet := pflag.CommandLine\n\tflags.BindRunCmdFlags(prefix, flagSet, opts)\n\tpflag.CommandLine.AddGoFlagSet(flag.CommandLine)\n}\n"
        },
        {
          "name": "flags_v0110_test.go",
          "type": "blob",
          "size": 0.5390625,
          "content": "package godog\n\nimport (\n\t\"testing\"\n\n\t\"github.com/cucumber/godog/internal/flags\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc Test_BindFlagsShouldRespectFlagDefaults(t *testing.T) {\n\topts := flags.Options{}\n\n\tBindCommandLineFlags(\"flagDefaults.\", &opts)\n\n\tassert.Equal(t, \"pretty\", opts.Format)\n\tassert.Equal(t, \"\", opts.Tags)\n\tassert.Equal(t, 1, opts.Concurrency)\n\tassert.False(t, opts.ShowStepDefinitions)\n\tassert.False(t, opts.StopOnFailure)\n\tassert.False(t, opts.Strict)\n\tassert.False(t, opts.NoColors)\n\tassert.Equal(t, int64(0), opts.Randomize)\n}\n"
        },
        {
          "name": "fmt.go",
          "type": "blob",
          "size": 3.421875,
          "content": "package godog\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"strings\"\n\t\"unicode/utf8\"\n\n\t\"github.com/cucumber/godog/colors\"\n\t\"github.com/cucumber/godog/formatters\"\n\tinternal_fmt \"github.com/cucumber/godog/internal/formatters\"\n\t\"github.com/cucumber/godog/internal/models\"\n\t\"github.com/cucumber/godog/internal/storage\"\n)\n\n// FindFmt searches available formatters registered\n// and returns FormaterFunc matched by given\n// format name or nil otherwise\nfunc FindFmt(name string) FormatterFunc {\n\treturn formatters.FindFmt(name)\n}\n\n// Format registers a feature suite output\n// formatter by given name, description and\n// FormatterFunc constructor function, to initialize\n// formatter with the output recorder.\nfunc Format(name, description string, f FormatterFunc) {\n\tformatters.Format(name, description, f)\n}\n\n// AvailableFormatters gives a map of all\n// formatters registered with their name as key\n// and description as value\nfunc AvailableFormatters() map[string]string {\n\treturn formatters.AvailableFormatters()\n}\n\n// Formatter is an interface for feature runner\n// output summary presentation.\n//\n// New formatters may be created to represent\n// suite results in different ways. These new\n// formatters needs to be registered with a\n// godog.Format function call\ntype Formatter = formatters.Formatter\n\ntype storageFormatter interface {\n\tSetStorage(*storage.Storage)\n}\n\n// FormatterFunc builds a formatter with given\n// suite name and io.Writer to record output\ntype FormatterFunc = formatters.FormatterFunc\n\nfunc printStepDefinitions(steps []*models.StepDefinition, w io.Writer) {\n\tvar longest int\n\tfor _, def := range steps {\n\t\tn := utf8.RuneCountInString(def.Expr.String())\n\t\tif longest < n {\n\t\t\tlongest = n\n\t\t}\n\t}\n\n\tfor _, def := range steps {\n\t\tn := utf8.RuneCountInString(def.Expr.String())\n\t\tlocation := internal_fmt.DefinitionID(def)\n\t\tspaces := strings.Repeat(\" \", longest-n)\n\t\tfmt.Fprintln(w,\n\t\t\tcolors.Yellow(def.Expr.String())+spaces,\n\t\t\tcolors.Bold(colors.Black)(\"# \"+location))\n\t}\n\n\tif len(steps) == 0 {\n\t\tfmt.Fprintln(w, \"there were no contexts registered, could not find any step definition..\")\n\t}\n}\n\n// NewBaseFmt creates a new base formatter.\nfunc NewBaseFmt(suite string, out io.Writer) *BaseFmt {\n\treturn internal_fmt.NewBase(suite, out)\n}\n\n// NewProgressFmt creates a new progress formatter.\nfunc NewProgressFmt(suite string, out io.Writer) *ProgressFmt {\n\treturn internal_fmt.NewProgress(suite, out)\n}\n\n// NewPrettyFmt creates a new pretty formatter.\nfunc NewPrettyFmt(suite string, out io.Writer) *PrettyFmt {\n\treturn &PrettyFmt{Base: NewBaseFmt(suite, out)}\n}\n\n// NewEventsFmt creates a new event streaming formatter.\nfunc NewEventsFmt(suite string, out io.Writer) *EventsFmt {\n\treturn &EventsFmt{Base: NewBaseFmt(suite, out)}\n}\n\n// NewCukeFmt creates a new Cucumber JSON formatter.\nfunc NewCukeFmt(suite string, out io.Writer) *CukeFmt {\n\treturn &CukeFmt{Base: NewBaseFmt(suite, out)}\n}\n\n// NewJUnitFmt creates a new JUnit formatter.\nfunc NewJUnitFmt(suite string, out io.Writer) *JUnitFmt {\n\treturn &JUnitFmt{Base: NewBaseFmt(suite, out)}\n}\n\n// BaseFmt exports Base formatter.\ntype BaseFmt = internal_fmt.Base\n\n// ProgressFmt exports Progress formatter.\ntype ProgressFmt = internal_fmt.Progress\n\n// PrettyFmt exports Pretty formatter.\ntype PrettyFmt = internal_fmt.Pretty\n\n// EventsFmt exports Events formatter.\ntype EventsFmt = internal_fmt.Events\n\n// CukeFmt exports Cucumber JSON formatter.\ntype CukeFmt = internal_fmt.Cuke\n\n// JUnitFmt exports JUnit formatter.\ntype JUnitFmt = internal_fmt.JUnit\n"
        },
        {
          "name": "fmt_test.go",
          "type": "blob",
          "size": 1.548828125,
          "content": "package godog_test\n\nimport (\n\t\"io\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/cucumber/godog\"\n)\n\nfunc Test_FindFmt(t *testing.T) {\n\tcases := map[string]bool{\n\t\t\"cucumber\": true,\n\t\t\"custom\":   true, // is available for test purposes only\n\t\t\"events\":   true,\n\t\t\"junit\":    true,\n\t\t\"pretty\":   true,\n\t\t\"progress\": true,\n\t\t\"unknown\":  false,\n\t\t\"undef\":    false,\n\t}\n\n\tfor name, expected := range cases {\n\t\tt.Run(\n\t\t\tname,\n\t\t\tfunc(t *testing.T) {\n\t\t\t\tactual := godog.FindFmt(name)\n\n\t\t\t\tif expected {\n\t\t\t\t\tassert.NotNilf(t, actual, \"expected %s formatter should be available\", name)\n\t\t\t\t} else {\n\t\t\t\t\tassert.Nilf(t, actual, \"expected %s formatter should be available\", name)\n\t\t\t\t}\n\t\t\t},\n\t\t)\n\t}\n}\n\nfunc Test_AvailableFormatters(t *testing.T) {\n\texpected := map[string]string{\n\t\t\"cucumber\": \"Produces cucumber JSON format output.\",\n\t\t\"custom\":   \"custom format description\", // is available for test purposes only\n\t\t\"events\":   \"Produces JSON event stream, based on spec: 0.1.0.\",\n\t\t\"junit\":    \"Prints junit compatible xml to stdout\",\n\t\t\"pretty\":   \"Prints every feature with runtime statuses.\",\n\t\t\"progress\": \"Prints a character per step.\",\n\t}\n\n\tactual := godog.AvailableFormatters()\n\tassert.Equal(t, expected, actual)\n}\n\nfunc Test_Format(t *testing.T) {\n\tactual := godog.FindFmt(\"Test_Format\")\n\trequire.Nil(t, actual)\n\n\tgodog.Format(\"Test_Format\", \"...\", testFormatterFunc)\n\tactual = godog.FindFmt(\"Test_Format\")\n\n\tassert.NotNil(t, actual)\n}\n\nfunc testFormatterFunc(suiteName string, out io.Writer) godog.Formatter {\n\treturn nil\n}\n"
        },
        {
          "name": "formatters",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.45703125,
          "content": "module github.com/cucumber/godog\n\ngo 1.16\n\nrequire (\n\tgithub.com/cucumber/gherkin/go/v26 v26.2.0\n\tgithub.com/hashicorp/go-memdb v1.3.4\n\tgithub.com/spf13/cobra v1.7.0\n\tgithub.com/spf13/pflag v1.0.5\n\tgithub.com/stretchr/testify v1.8.2\n)\n\nrequire (\n\tgithub.com/cucumber/messages/go/v21 v21.0.1\n\tgithub.com/hashicorp/go-immutable-radix v1.3.1 // indirect\n\tgithub.com/hashicorp/go-uuid v1.0.2 // indirect\n\tgopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 4.4912109375,
          "content": "github.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/cucumber/gherkin/go/v26 v26.2.0 h1:EgIjePLWiPeslwIWmNQ3XHcypPsWAHoMCz/YEBKP4GI=\ngithub.com/cucumber/gherkin/go/v26 v26.2.0/go.mod h1:t2GAPnB8maCT4lkHL99BDCVNzCh1d7dBhCLt150Nr/0=\ngithub.com/cucumber/messages/go/v21 v21.0.1 h1:wzA0LxwjlWQYZd32VTlAVDTkW6inOFmSM+RuOwHZiMI=\ngithub.com/cucumber/messages/go/v21 v21.0.1/go.mod h1:zheH/2HS9JLVFukdrsPWoPdmUtmYQAQPLk7w5vWsk5s=\ngithub.com/cucumber/messages/go/v22 v22.0.0/go.mod h1:aZipXTKc0JnjCsXrJnuZpWhtay93k7Rn3Dee7iyPJjs=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/gofrs/uuid v4.2.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/gofrs/uuid v4.3.1+incompatible h1:0/KbAdpx3UXAx1kEOWHJeOkpbgRFGHVgv+CFIY7dBJI=\ngithub.com/gofrs/uuid v4.3.1+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/hashicorp/go-immutable-radix v1.3.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-immutable-radix v1.3.1 h1:DKHmCUm2hRBK510BaiZlwvpD40f8bJFeZnpfm2KLowc=\ngithub.com/hashicorp/go-immutable-radix v1.3.1/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-memdb v1.3.4 h1:XSL3NR682X/cVk2IeV0d70N4DZ9ljI885xAEU8IoK3c=\ngithub.com/hashicorp/go-memdb v1.3.4/go.mod h1:uBTr1oQbtuMgd1SSGoR8YV27eT3sBHbYiNm53bMpgSg=\ngithub.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.2 h1:cfejS+Tpcp13yd5nYHWDI6qVCny6wyX2Mt5SGur2IGE=\ngithub.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=\ngithub.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/kr/pretty v0.2.1 h1:Fmg33tUaq4/8ym9TJN1x7sLJnHVwhP33CNkpYV/7rwI=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/spf13/cobra v1.7.0 h1:hyqWnYt1ZQShIddO5kBpj3vu05/++x6tJ6dg8EC572I=\ngithub.com/spf13/cobra v1.7.0/go.mod h1:uLxZILRyS/50WlhOIKD7W6V5bgeIt+4sICxh6uRMrb0=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.2 h1:+h33VjcLVPDHtOdpUCuF+7gSuG3yGIftsP1YvFihtJ8=\ngithub.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "godog.go",
          "type": "blob",
          "size": 1.48828125,
          "content": "/*\nPackage godog is the official Cucumber BDD framework for Golang, it merges specification\nand test documentation into one cohesive whole.\n\nGodog does not intervene with the standard \"go test\" command and it's behavior.\nYou can leverage both frameworks to functionally test your application while\nmaintaining all test related source code in *_test.go files.\n\nGodog acts similar compared to go test command. It uses go\ncompiler and linker tool in order to produce test executable. Godog\ncontexts needs to be exported same as Test functions for go test.\n\nFor example, imagine you're about to create the famous UNIX ls command.\nBefore you begin, you describe how the feature should work, see the example below..\n\nExample:\n\n\tFeature: ls\n\t  In order to see the directory structure\n\t  As a UNIX user\n\t  I need to be able to list the current directory's contents\n\n\t  Scenario:\n\t\tGiven I am in a directory \"test\"\n\t\tAnd I have a file named \"foo\"\n\t\tAnd I have a file named \"bar\"\n\t\tWhen I run ls\n\t\tThen I should get output:\n\t\t  \"\"\"\n\t\t  bar\n\t\t  foo\n\t\t  \"\"\"\n\nNow, wouldn't it be cool if something could read this sentence and use it to actually\nrun a test against the ls command? Hey, that's exactly what this package does!\nAs you'll see, Godog is easy to learn, quick to use, and will put the fun back into tests.\n\nGodog was inspired by Behat and Cucumber the above description is taken from it's documentation.\n*/\npackage godog\n\n// Version of package - based on Semantic Versioning 2.0.0 http://semver.org/\nvar Version = \"v0.0.0-dev\"\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 41.11328125,
          "content": null
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 91.2412109375,
          "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1000\" height=\"800\" viewBox=\"0 0 10000 8000\">\n  <metadata><?xpacket begin=\"﻿\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"Adobe XMP Core 5.6-c140 79.160451, 2017/05/06-01:08:21        \">\n   <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n      <rdf:Description rdf:about=\"\"/>\n   </rdf:RDF>\n</x:xmpmeta>\n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                           \n<?xpacket end=\"w\"?></metadata>\n<defs>\n    <style>\n      .cls-1 {\n        fill: #d0b698;\n      }\n\n      .cls-1, .cls-2, .cls-3, .cls-4, .cls-5, .cls-6, .cls-7 {\n        fill-rule: evenodd;\n      }\n\n      .cls-2 {\n        fill: #ffe2c3;\n      }\n\n      .cls-3 {\n        fill: #ffc183;\n        stroke: #ffc183;\n        stroke-width: 13px;\n      }\n\n      .cls-3, .cls-7 {\n        stroke-linejoin: round;\n      }\n\n      .cls-4 {\n        fill: #ffa144;\n      }\n\n      .cls-5 {\n        fill: #fff;\n      }\n\n      .cls-6 {\n        fill: #ac967b;\n      }\n\n      .cls-7 {\n        stroke: #000;\n        stroke-width: 18px;\n      }\n    </style>\n  </defs>\n  <path class=\"cls-1\" d=\"M4211,961c216.48-3.468,341.33,136.42,405,285,19.52,45.56,48.2,112.37,52,169h-1c-59.07-25.41-126.1-41.94-193-59l-91-18c-7.34-5.68-3.96-37.68-4-50-0.08-29.61-3.35-56.89-17-73-10.46-12.35-26.45-22.45-38-34-56.93-56.93-85.36-79.04-176-39q-18,7.995-36,16c-24.26,17.94-40.51,56.44-56,83q-7.995,15.495-16,31-69.495-24-139-48c6.86-48.99,41.9-162.14,71-185,32.08-25.2,94.3-46.683,137-60l70-15Zm-567,273c121.74-2.55,213.27,29.35,300,63,54.4,21.11,111.55,36.94,171,52,75.92,19.24,159.96,21.53,239,38,106.56,22.2,205.19,42.91,296,79,270.15,107.37,503.99,286.46,718,453q98.985,84.495,198,169c132.28,100.22,285.16,183.66,427,273,143.11,90.13,270.52,197.63,400,301q51.495,48,103,96c37.6,30.35,75.65,69.38,106,107l93,102q86.49,109.485,173,219,78.495,98.49,157,197c112.74,148.86,227.94,295.04,337,448,204.91,287.41,404.81,579.77,548,929a1528.261,1528.261,0,0,1,80,256c7.33,33.59,7.37,66.27,13,103,5.41,35.3,6.02,82.2,0,118-16.31,97.02-26.4,187.77-52,273-71.48,237.97-173.31,442.48-302,623-35.87,50.32-77.68,95.29-116,143q-21.495,22.5-43,45c-48.77,60.41-112.66,117.23-174,165a1153.358,1153.358,0,0,1-110,76Q7193,6570,7180,6578q-11.505-7.5-23-15-22.005-4.995-44-10c-21.24-4.37-49.74,3.59-73-3-39.16-11.1-110.24-24.37-149-1-33.28,20.07-44.58,54.79-60,93-123.85,1.46-248.36-11.18-345-41-42.9-13.24-87.9-27.96-112-60-52.33-69.57-73.73-272.6-50-396,6.04-31.4,15.89-54.06,24-81q10.995-48.495,22-97c12.09-54.75,14.28-112.33,24-170q1.5-25.995,3-52c7.07-45.41,5-110.35-4-151-15.95-72.02-49.66-142.49-89-193-81.92-105.17-188.09-195.75-294-277-173.37-133-351.39-261.13-536-384-246.82-164.27-495.93-327.07-737-497-203.39-143.37-400.12-294.9-597-444-159.54-120.82-313.66-250.66-454-391q-72-72.495-144-145l2-2q9.495-13.995,19-28c9.39-15.9,14.74-37.81,19-58,6.95-32.94-.4-73.39-6-103-15.14-80.1-21.02-155.43-48-222-28.64-70.66-77.46-118.47-127-168-47.12-47.11-98.42-93.72-156-130-23.08-14.54-48.63-23.8-73-38-34-19.81-71.37-38.6-112-51-31.68-9.67-70.15-8.36-106-15-62.85-11.65-133.86-19.68-198-8-49.61-92.37-131.41-175.42-229-220,5.69-30.35,22.64-60.21,34-87,31.22-73.64,64.11-143.45,103-209,151.64-255.61,337.95-481.68,621-605,69.83-30.42,144.01-53.19,227-71l91-12Q3623.505,1234.995,3644,1234Zm-104,96q-25.995,1.995-52,4c-35.16,6.32-69.2,11.05-101,21-140.17,43.86-227.15,127.98-282,257-18.6,43.75-29.77,93.27-41,144-18.38,83.04-13.91,197.94,9,271,20,63.8,60.8,108.49,98,155,79.41,99.28,205.37,195.74,329,250,36.36,15.96,74.99,30.16,118,41,94.93,23.92,262.53,16.45,340-14,95.83-37.66,224.87-125.49,265-217,16.35-37.27,22.84-75.75,31-123,5.14-29.76,8.48-73.65,3-107q-5.505-48-11-96c-9.48-49.37-7.5-109.38-25-152-30.33-73.86-104.27-152.77-163-200C3912.68,1447.12,3805.92,1329.55,3540,1330Zm1657,152,15,9C5205.95,1490.02,5199.17,1487.11,5197,1482Zm17,9,9,6c-2.33-1-4.67-2-7-3C5213.96,1492.2,5215.29,1493.98,5214,1491Zm11,6c15.25,7.75,38.26,18.24,49,31h-3C5260.85,1515.02,5232.04,1511.83,5225,1497Zm50,31q7.5,5.505,15,11h-3C5283.44,1534.42,5277.64,1533.57,5275,1528Zm16,11q46.5,30.99,93,62l179,112q79.995,46.5,160,93c-26.23-5.49-78.56-43.46-102-58-76.74-47.59-153.25-93.04-228-141C5375.93,1596.05,5296.96,1551.63,5291,1539Zm434,267q6.495,4.005,13,8C5732.25,1813.08,5727.04,1810.85,5725,1806Zm17,9q18.495,9,37,18v2C5769.63,1833.26,5745.56,1822.94,5742,1815Zm43,22c2.33,0.67,4.67,1.33,7,2v2C5787.69,1840.15,5787.08,1839.93,5785,1837Zm11,5h3v1c-1,.33-2,0.67-3,1v-2Zm5,2c1.67,0.33,3.33.67,5,1v2C5802.11,1846,5803,1846.61,5801,1844Zm7,3c9.71,2.87,22.11,9.89,28,17h-3C5826.93,1856.12,5813.85,1854.86,5808,1847Zm29,17,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,4,4C5844.8,1872.46,5846.55,1874.18,5845,1870Zm5,4,4,4C5849.8,1876.46,5851.55,1878.18,5850,1874Zm6,5,4,4C5855.8,1881.46,5857.55,1883.18,5856,1879Zm6,5,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm7,6,6,6-6-3v-3Zm9,8,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm12,11,11,11A14.922,14.922,0,0,1,5890,1909Zm21,20,27,27C5929.42,1953.42,5913.62,1937.56,5911,1929Zm39,40,13,13A19.488,19.488,0,0,1,5950,1969Zm17,18,10,10C5971.53,1995.57,5968.46,1992.44,5967,1987Zm-422,11c4.5,1.39,3.6.52,5,5Zm436,4,8,8q-4.005-2.505-8-5v-3Zm-429,2c4.5,1.39,3.6.52,5,5Zm7,6c4.2,1.54,2.45-.18,4,4Zm432,3,8,8q-4.005-2.505-8-5v-3Zm-426,2c4.2,1.54,2.45-.18,4,4Zm6,5c4.2,1.54,2.45-.18,4,4Zm430,4,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm-424,1c4.2,1.54,2.45-.18,4,4Zm5,4c4.2,1.54,2.45-.18,4,4Zm5,4c4.2,1.54,2.45-.18,4,4Zm423,1,6,6-6-3v-3Zm-418,3c4.2,1.54,2.45-.18,4,4Zm5,4c4.2,1.54,2.45-.18,4,4Zm421,2,6,6-6-3v-3Zm-416,2c4.2,1.54,2.45-.18,4,4Zm5,4c4.2,1.54,2.45-.18,4,4Zm419,3,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-414,1h3v3Zm4,3c4.2,1.54,2.45-.18,4,4Zm5,4h3v3Zm412,0,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-408,3c4.59,1.21,6.53,2.56,8,7Q5629,2066.505,5625,2063Zm414,4,6,6-6-3v-3Zm-405,3c2,0.67,4,1.33,6,2v3c-1-.33-2-0.67-3-1C5636,2072.67,5635,2071.33,5634,2070Zm7,5,12,6v3Zm405,0,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm5,6,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-397,3q41.49,26.49,83,53c74.01,47.17,152.11,86.4,224,136,23.02,15.88,47.61,29.83,71,46,11.04,7.64,22.48,19.49,36,24v3q-45.99-30.495-92-61l-177-110q-50.49-30.99-101-62C5683.83,2104.12,5664.62,2096.49,5654,2084Zm403,4,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm6,7,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm6,7,4,4C6068.8,2104.46,6070.55,2106.18,6069,2102Zm5,6,4,4C6073.8,2110.46,6075.55,2112.18,6074,2108Zm5,6,4,4C6078.8,2116.46,6080.55,2118.18,6079,2114Zm5,6,4,4C6083.8,2122.46,6085.55,2124.18,6084,2120Zm5,6,4,4C6088.8,2128.46,6090.55,2130.18,6089,2126Zm5,6,4,4C6093.8,2134.46,6095.55,2136.18,6094,2132Zm4,5,4,4C6097.8,2139.46,6099.55,2141.18,6098,2137Zm5,6,4,4C6102.8,2145.46,6104.55,2147.18,6103,2143Zm4,5,4,4C6106.8,2150.46,6108.55,2152.18,6107,2148Zm5,6,4,4C6111.8,2156.46,6113.55,2158.18,6112,2154Zm4,5,4,4C6115.8,2161.46,6117.55,2163.18,6116,2159Zm4,5,4,4C6119.8,2166.46,6121.55,2168.18,6120,2164Zm4,5,4,4C6123.8,2171.46,6125.55,2173.18,6124,2169Zm4,5,4,4C6127.8,2176.46,6129.55,2178.18,6128,2174Zm4,5,4,4C6131.8,2181.46,6133.55,2183.18,6132,2179Zm4,5,4,4C6135.8,2186.46,6137.55,2188.18,6136,2184Zm4,5,4,4C6139.8,2191.46,6141.55,2193.18,6140,2189Zm4,5,4,4C6143.8,2196.46,6145.55,2198.18,6144,2194Zm4,5,3,3h-3v-3Zm3,4,4,4C6150.8,2205.46,6152.55,2207.18,6151,2203Zm4,5,3,3h-3v-3Zm3,4,4,4C6157.8,2214.46,6159.55,2216.18,6158,2212Zm4,5,3,3h-3v-3Zm3,4q3.495,4.005,7,8c-4.2-1.54-2.45.18-4-4C6164.97,2223.07,6166.38,2224.8,6165,2221Zm7,9,3,3h-3v-3Zm3,4,4,4C6174.8,2236.46,6176.55,2238.18,6175,2234Zm4,5,3,3h-3v-3Zm3,4,3,3h-3v-3Zm3,4,3,3h-3v-3Zm-3798,2c2,0.33,4,.67,6,1v1h-6v-2Zm36,0c1.67,0.33,3.33.67,5,1v1C2423.99,2250.42,2425.01,2251.05,2423,2249Zm-48,1c1.67,0.33,3.33.67,5,1v1C2375.99,2251.42,2377.01,2252.05,2375,2250Zm59,0h4v2C2434.35,2251.09,2435.96,2252.04,2434,2250Zm-69,1c1.67,0.33,3.33.67,5,1v1C2365.99,2252.42,2367.01,2253.05,2365,2251Zm77,0h3v1c-1,.33-2,0.67-3,1v-2Zm3746,0,3,3h-3v-3Zm-3832,1h4v2C2356.35,2253.09,2357.96,2254.04,2356,2252Zm92,0h4v2C2448.35,2253.09,2449.96,2254.04,2448,2252Zm-101,1h4v2C2347.35,2254.09,2348.96,2255.04,2347,2253Zm107,0h3v1c-1,.33-2,0.67-3,1v-2Zm-115,1h4v2C2339.35,2255.09,2340.96,2256.04,2339,2254Zm120,0c2,0.33,4,.67,6,1v2c-2-.33-4-0.67-6-1v-2Zm-127,1h4v2C2332.35,2256.09,2333.96,2257.04,2332,2255Zm3859,0,3,3h-3v-3Zm-3866,1h4v2C2325.35,2257.09,2326.96,2258.04,2325,2256Zm141,0,21,6v2l-21-6v-2Zm-148,1h4v2C2318.35,2258.09,2319.96,2259.04,2318,2257Zm-7,1h4v2C2311.35,2259.09,2312.96,2260.04,2311,2258Zm-5,1h3v1c-1,.33-2,0.67-3,1v-2Zm3888,0,3,3h-3v-3Zm-3894,1h3v1c-1,.33-2,0.67-3,1v-2Zm-6,1h3v1c-1,.33-2,0.67-3,1v-2Zm-6,1h4v2C2288.35,2263.09,2289.96,2264.04,2288,2262Zm-5,1h3v1c-1,.33-2,0.67-3,1v-2Zm3914,0,3,3h-3v-3Zm-3919,1h3v1c-1,.33-2,0.67-3,1v-2Zm211,0c2.67,0.67,5.33,1.33,8,2v2C2494.33,2266.67,2491.67,2265.33,2489,2264Zm-216,1h3v1c-1,.33-2,0.67-3,1v-2Zm-5,1h3v1c-1,.33-2,0.67-3,1v-2Zm-5,1h3v1c-1,.33-2,0.67-3,1v-2Zm3937,0,3,3h-3v-3Zm-3942,1h3v1c-1,.33-2,0.67-3,1v-2Zm241,0c1.67,0.33,3.33.67,5,1v2C2500.11,2270,2501,2270.61,2499,2268Zm-245,1h3v1c-1,.33-2,0.67-3,1v-2Zm-4,1h3v1c-1,.33-2,0.67-3,1v-2Zm-5,1h3v1c-1,.33-2,0.67-3,1v-2Zm3958,0,3,3h-3v-3Zm-3962,1h3v1c-1,.33-2,0.67-3,1v-2Zm267,0c15.73,4.74,40.22,17.29,50,29h-3C2544.15,2287.23,2518.28,2285.9,2508,2272Zm-271,1h3v2h-6C2235,2274.33,2236,2273.67,2237,2273Zm-7,2h3v1c-1,.33-2,0.67-3,1v-2Zm3976,0,3,3h-3v-3Zm-3980,1h3v1c-1,.33-2,0.67-3,1v-2Zm-4,1h3v2h-6C2220,2278.33,2221,2277.67,2222,2277Zm-7,2h3v2h-6C2213,2280.33,2214,2279.67,2215,2279Zm3994,0,3,3h-3v-3Zm-4001,2h3v2c-3,.67-6,1.33-9,2v-2C2204,2282.33,2206,2281.67,2208,2281Zm4004,2c1.67,2,3.33,4,5,6h-3v-3C6211.96,2284.2,6213.29,2285.98,6212,2283Zm-4017,2h3v2q-15,4.005-30,8v-1Zm4022,5,3,3h-3v-3Zm3,4c1.67,2,3.33,4,5,6h-3v-3C6219.96,2295.2,6221.29,2296.98,6220,2294Zm-4060,3h3v2h-6C2158,2298.33,2159,2297.67,2160,2297Zm-8,3h3v2c-2,.33-4,0.67-6,1,0.33-.67.67-1.33,1-2C2150.67,2300.67,2151.33,2300.33,2152,2300Zm407,1c2,1.67,4,3.33,6,5h-3C2560.49,2303.39,2560.29,2304.25,2559,2301Zm3666,0,3,3h-3v-3Zm-4081,2h3v1c-1,.33-2,0.67-3,1v-2Zm-5,2h3v1c-1,.33-2,0.67-3,1v-2Zm4089,0c1.67,2,3.33,4,5,6h-3v-3C6227.96,2306.2,6229.29,2307.98,6228,2305Zm-3662,1,3,3h-3v-3Zm-432,1h3v1c-1,.33-2,0.67-3,1v-2Zm-4,2c0.67,0.33,1.33.67,2,1-1.67.67-3.33,1.33-5,2v-1C2128,2310.33,2129,2309.67,2130,2309Zm440,0,3,3h-3v-3Zm-448,3h3v1c-1,.33-2,0.67-3,1v-2Zm452,0,4,4C2573.8,2314.46,2575.55,2316.18,2574,2312Zm3659,0c1.67,2,3.33,4,5,6h-3v-3C6232.96,2313.2,6234.29,2314.98,6233,2312Zm-4117,3c0.67,0.33,1.33.67,2,1-1.67.67-3.33,1.33-5,2v-1C2114,2316.33,2115,2315.67,2116,2315Zm463,1,4,4C2578.8,2318.46,2580.55,2320.18,2579,2316Zm-472,3c0.67,0.33,1.33.67,2,1q-4.5,1.995-9,4v-2C2102.33,2321,2104.67,2320,2107,2319Zm4131,0c1.67,2,3.33,4,5,6h-3v-3C6237.96,2320.2,6239.29,2321.98,6238,2319Zm-3654,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-492,6c0.67,0.33,1.33.67,2,1q-9.495,4.5-19,9c0.33-.67.67-1.33,1-2Q2084,2330,2092,2326Zm499,0,6,6-6-3v-3Zm3652,0q3.495,4.5,7,9h-3v-3C6244.37,2330.1,6244.14,2329.56,6243,2326Zm-3643,8,9,9C2603.72,2341.64,2601.39,2339.25,2600,2334Zm3650,2,9,12h-3v-3C6252.86,2342.81,6251.24,2340.13,6250,2336Zm-4180,1c0.33,1,.67,2,1,3q-5.505,1.995-11,4c0.33-.67.67-1.33,1-2Q2065.5,2339.5,2070,2337Zm-13,7c0.33,1,.67,2,1,3q-22.995,13.005-46,26c0.67-1,1.33-2,2-3Q2035.5,2357,2057,2344Zm4012,2q12,7.005,24,14v3Q6081,2354.5,6069,2346Zm190,3q5.505,7.5,11,15h-3v-3C6263.31,2358.41,6260.45,2353.78,6259,2349Zm-3631,13,9,9C2631.72,2369.64,2629.39,2367.25,2628,2362Zm3466,1q7.5,4.005,15,8v3Q6101.5,2368.5,6094,2363Zm176,2q13.005,19.5,26,39c17.2,27.33,35.21,54.78,51,84h-3c-9.63-30.81-38.61-68.94-56-96C6282.4,2383.28,6273.6,2375.66,6270,2365Zm-4260,8c0.33,1,.67,2,1,3q-7.5,4.005-15,8Zm4100,1q4.5,1.995,9,4v3Q6114.5,2377.505,6110,2374Zm-3470,1,6,6-6-3v-3Zm3480,6,12,6v3Zm-3473,2,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm5,6,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3481,1c2,0.67,4,1.33,6,2v3c-1-.33-2-0.67-3-1C6135,2392.67,6134,2391.33,6133,2390Zm-3476,5,4,4C2656.8,2397.46,2658.55,2399.18,2657,2395Zm3483,0q4.5,1.995,9,4v3Q6144.5,2398.505,6140,2395Zm-3479,5,4,4C2660.8,2402.46,2662.55,2404.18,2661,2400Zm3489,2c2,0.67,4,1.33,6,2v3c-1-.33-2-0.67-3-1C6152,2404.67,6151,2403.33,6150,2402Zm-3485,3,4,4C2664.8,2407.46,2666.55,2409.18,2665,2405Zm3492,2c2,0.67,4,1.33,6,2v3c-1-.33-2-0.67-3-1C6159,2409.67,6158,2408.33,6157,2407Zm-3488,3,3,3h-3v-3Zm3495,2c2,0.67,4,1.33,6,2v3c-1-.33-2-0.67-3-1C6166,2414.67,6165,2413.33,6164,2412Zm-3492,2,3,3h-3v-3Zm3499,3h3v3Zm-3496,1c1.67,2,3.33,4,5,6h-3v-3C2674.96,2419.2,2676.29,2420.98,2675,2418Zm3500,2c2,0.67,4,1.33,6,2v3c-1-.33-2-0.67-3-1C6177,2422.67,6176,2421.33,6175,2420Zm-3495,5c1.67,2,3.33,4,5,6h-3v-3C2679.96,2426.2,2681.29,2427.98,2680,2425Zm3502,0c2,0.67,4,1.33,6,2v3c-1-.33-2-0.67-3-1C6184,2427.67,6183,2426.33,6182,2425Zm7,5h3v3Zm-3504,2c15.46,13.56,27.37,40.15,37,59h-3C2711.89,2468.38,2692.37,2453.41,2685,2432Zm3508,1h3v3Zm4,3c2,0.67,4,1.33,6,2v3c-1-.33-2-0.67-3-1C6199,2438.67,6198,2437.33,6197,2436Zm7,5h3v3Zm4,3h3v3Zm4,3h3v3Zm4,3q7.005,4.005,14,8v3Zm15,11h3v3Zm4,3h3v3Zm4,3c5.88,1.63,13.98,7.37,16,13Zm17,13h3v3Zm4,3h3v3Zm4,3c4.59,1.21,6.53,2.56,8,7Q6268,2489.505,6264,2486Zm84,6,3,6c-1,.67-2,1.33-3,2v-8Zm-75,1h3v3Zm4,3c4.59,1.21,6.53,2.56,8,7Q6281,2499.505,6277,2496Zm67,4h3l-3,3v-3Zm-58,3c4.2,1.54,2.45-.18,4,4Zm54,0h3l-3,3v-3Zm-3612,2q4.5,6.495,9,13h-3v-3C2730.69,2512.73,2729.03,2509.59,2728,2505Zm3608,1h3l-3,3v-3Zm-45,1h3v3Zm41,2h3l-3,3v-3Zm-37,1c4.2,1.54,2.45-.18,4,4Zm33,2h3l-3,3v-3Zm-28,2h3v3Zm24,1h3l-3,3v-3Zm-20,2c4.2,1.54,2.45-.18,4,4Zm-3567,2c1.67,2,3.33,4,5,6h-3v-3C2736.96,2520.2,2738.29,2521.98,2737,2519Zm3582,0h3l-3,3v-3Zm-10,2c4.2,1.54,2.45-.18,4,4Zm6,1h3l-3,3v-3Zm-3573,4,3,3h-3v-3Zm3,4q3.495,4.005,7,8c-4.2-1.54-2.45.18-4-4C2744.97,2532.07,2746.38,2533.8,2745,2530Zm7,9,4,4C2751.8,2541.46,2753.55,2543.18,2752,2539Zm4,5,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm5,6,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm5,6,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm6,7,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm1295,2-46,9c-26.45,8.37-44.6,24.02-64,39q-27-1.005-54-2-21.495-10.005-43-20c-38.05-12.75-108.08-9.28-139,4-40.86,17.55-58.04,57.31-80,94-16.59,27.72-41.24,50.99-54,82-18.28,44.43-2.47,125.06,12,158,13.61,30.98,25.07,30.17,52,46q17.505,12,35,24c-15.83,32.13-21.9,76.15-13,122,6.94,35.77,10.27,67.85,23,97,18.91,43.33,91.33,89.79,137,108,107.29,42.78,194.54-26.96,219-110l56,53c39.53,31.81,75.09,68.02,115,100,27.63,22.14,52.04,53.84,92,63,80.69,18.49,130.84-46.48,158-87,19.13-28.55,36.45-52.5,11-87,38.9-2.19,111.25-63.28,122-93,5.75-15.9-1.75-34.34-8-45-45.58-77.82-117.5-134.99-200-176-25.01-12.43-130.89-41.64-94-69,11.15-22.81,31.51-37.96,40-66,12.34-40.77,3.23-92.04-10-124C4291,2581.15,4211.38,2564.67,4067,2565Zm-1288,6,6,6-6-3v-3Zm7,8,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm9,10,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm10,11,8,8q-4.005-2.505-8-5v-3Zm11,12,9,9C2819.72,2619.64,2817.39,2617.25,2816,2612Zm13,14,11,11A14.922,14.922,0,0,1,2829,2626Zm16,17,13,13A19.488,19.488,0,0,1,2845,2643Zm19,20,16,16C2873.4,2677.13,2865.91,2669.56,2864,2663Zm26,27,20,20C2902.68,2707.87,2892.17,2697.29,2890,2690Zm35,36,32,32C2947.52,2755.11,2927.93,2735.47,2925,2726Zm68,69,142,142c-13.56-4.41-25.43-23.43-35-33l-81-81C3011.11,2815.11,2996.7,2806.34,2993,2795Zm200,199,72,72C3256.29,3063.22,3195.8,3002.72,3193,2994Zm120,119,84,84C3387.79,3194.05,3315.97,3122.22,3313,3113Zm214,214,60,60C3578.8,3384.41,3529.62,3335.2,3527,3327Zm80,81,66,66C3664.54,3471.31,3609.71,3416.46,3607,3408Zm76,75,13,13A19.488,19.488,0,0,1,3683,3483Zm20,19,10,10C3707.53,3510.57,3704.46,3507.44,3703,3502Zm16,15,8,8q-4.005-2.505-8-5v-3Zm2278,0c-26.59,10.13-60.35,10-87,18-48.21,14.47-91.23,32.57-134,51-19.12,8.24-58.45,17.76-67,36-6.62,14.11,21.32,62.85,27,74,8.72,17.11,18.39,35.45,30,50,11.01,13.79,29.1,23.26,36,41q7.005,42.495,14,85c5.94,19.42,18.74,27.92,27,44-13.32,27.61-41.51,63.33-33,104,2,1.67,4,3.33,6,5,3-.33,6-0.67,9-1,11.5-5.93,12.98-29.62,18-42,11.31-27.87,24.18-57.38,49-72,39.7-23.37,84.03-49.12,136-58,36.11-6.17,69.64,23.6,118,16,21.64-3.4,44.59-5.98,60-16,19.3-12.55,58.21-64.31,44-100-4.74-11.9-14.87-20.3-22-30,63.98-6.01,20.59-69.83,0-89q-32.49-24.495-65-49C6114.75,3548.76,6084.07,3516.3,5997,3517Zm-2266,11,9,9C3734.72,3535.64,3732.39,3533.25,3731,3528Zm3475,0c1.67,1,3.33,2,5,3-0.33.67-.67,1.33-1,2C7208.67,3531.33,7207.33,3529.67,7206,3528Zm6,4c2.13,2.33,1.87.65,1,3v2l-3-3h2v-2Zm4,3,3,3h-3v-3Zm-3,3h2q2.505,4.005,5,8h-1Q7216,3542,7213,3538Zm7,0c2,1.67,4,3.33,6,5h-3C7221.49,3540.39,7221.29,3541.25,7220,3538Zm-3477,1,8,8q-4.005-2.505-8-5v-3Zm3484,4,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C7232.49,3548.39,7232.29,3549.25,7231,3546Zm-11,1h3v3Zm-3465,3,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm3468,1h3v3Zm15,0,3,3h-3v-3Zm4,3,3,3h-3v-3Zm-16,1h3v3Zm20,2c2,1.67,4,3.33,6,5h-3C7247.49,3559.39,7247.29,3560.25,7246,3557Zm-3481,2,7,7C3767.1,3564.71,3766.31,3563.88,3765,3559Zm3464,0h3v3Zm24,3,3,3h-3v-3Zm-21,1c5.07,1.76,8.51,6.78,10,12h-1Zm25,2,3,3h-3v-3Zm-3483,2,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm3487,1c2,1.67,4,3.33,6,5h-3C7262.49,3570.39,7262.29,3571.25,7261,3568Zm7,5,3,3h-3v-3Zm-3485,2,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm3459,1h3v3Zm30,0,3,3h-3v-3Zm4,3,3,3h-3v-3Zm-31,1h3v3Zm35,2c2,1.67,4,3.33,6,5h-3C7281.49,3584.39,7281.29,3585.25,7280,3582Zm-3488,1,6,6-6-3v-3Zm3456,1h3v3Zm39,3,3,3h-3v-3Zm-36,1h3v3Zm40,2,3,3h-3v-3Zm-3490,1,6,6-6-3v-3Zm3453,1h3v3Zm41,1,3,3h-3v-3Zm-38,3h3v3Zm42,0,3,3h-3v-3Zm-3490,2,6,6-6-3v-3Zm3494,1,3,3h-3v-3Zm-43,1h3v3Zm47,2,3,3h-3v-3Zm-44,2h3v3Zm-3446,1,6,6C3818.29,3609.7,3818.32,3609.69,3817,3605Zm3494,0c2,1.67,4,3.33,6,5h-3C7312.49,3607.39,7312.29,3608.25,7311,3605Zm-45,3h3v3Zm52,2,3,3h-3v-3Zm-3493,2,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3444,0c6.35,2.33,13.01,12.38,15,19Q7276.5,3621.505,7269,3612Zm53,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm-3494,2,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3498,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm-3495,2,6,6C3840.29,3628.7,3840.32,3628.69,3839,3624Zm3499,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm-3496,2,6,6C3847.29,3634.7,3847.32,3634.69,3846,3630Zm3500,1,3,3h-3v-3Zm-62,1h3v3Zm66,2q23.505,16.995,47,34v2C7389.25,3667.62,7352.92,3640.54,7350,3634Zm-3497,2,6,6C3854.29,3640.7,3854.32,3640.69,3853,3636Zm3434,0h3v3Zm3,4h3v3Zm-3430,2,6,6C3861.29,3646.7,3861.32,3646.69,3860,3642Zm3433,2h3v3Zm-3426,4,6,6C3868.29,3652.7,3868.32,3652.69,3867,3648Zm3429,0h3v3Zm3,4h3v3Zm-3425,2,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3428,2h3v3Zm-3421,4,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3424,0h3v3Zm3,4h3v3Zm-3421,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3424,3h3v3Zm-3418,2,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3505,0,3,3h-3v-3Zm-84,2h3v3Zm88,1,3,3h-3v-3Zm-3502,3,4,4C3899.8,3678.46,3901.55,3680.18,3900,3676Zm3417,0c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7317.67,3678,7317.33,3677,7317,3676Zm89,0,3,3h-3v-3Zm4,3,3,3h-3v-3Zm-3504,2,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3508,1,3,3h-3v-3Zm-92,1h3v3Zm96,2q6,4.995,12,10C7424.78,3693.6,7419.76,3690.01,7418,3685Zm-3506,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3413,1h3v3Zm-3407,4,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3410,0h3v3Zm3,4h3v3Zm100,0,3,3h-3v-3Zm-3507,1,4,4C3923.8,3698.46,3925.55,3700.18,3924,3696Zm3511,2,3,3h-3v-3Zm-101,1c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7334.67,3701,7334.33,3700,7334,3699Zm-3404,2,4,4C3929.8,3703.46,3931.55,3705.18,3930,3701Zm3509,0,3,3h-3v-3Zm4,3,3,3h-3v-3Zm-3507,2,4,4C3935.8,3708.46,3937.55,3710.18,3936,3706Zm3403,0h3v3Zm108,1,3,3h-3v-3Zm-3506,3,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3401,0h3v3Zm109,0q4.005,3.495,8,7C7454.41,3715.79,7452.47,3714.44,7451,3710Zm-106,4h3v3Zm-3398,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3513,2,3,3h-3v-3Zm-112,1c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7348.67,3720,7348.33,3719,7348,3718Zm-3395,2,4,4C3952.8,3722.46,3954.55,3724.18,3953,3720Zm3511,0,3,3h-3v-3Zm4,3,4,4C7467.8,3725.46,7469.55,3727.18,7468,3723Zm-3510,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3395,1h3v3Zm120,2,3,3h-3v-3Zm-3509,2,4,4C3963.8,3731.46,3965.55,3733.18,3964,3729Zm3392,0h3v3Zm121,1,3,3h-3v-3Zm-3508,3,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3390,0c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7359.67,3735,7359.33,3734,7359,3733Zm122,0,4,4C7480.8,3735.46,7482.55,3737.18,7481,3733Zm5,4,3,3h-3v-3Zm-3511,1,4,4C3974.8,3740.46,3976.55,3742.18,3975,3738Zm3389,2h3v3Zm126,0,3,3h-3v-3Zm-3510,2,4,4C3979.8,3744.46,3981.55,3746.18,3980,3742Zm3514,1q4.005,3.495,8,7C7497.41,3748.79,7495.47,3747.44,7494,3743Zm-127,1h3v3Zm-3381,3,4,4C3985.8,3749.46,3987.55,3751.18,3986,3747Zm3384,1c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7370.67,3750,7370.33,3749,7370,3748Zm133,2,3,3h-3v-3Zm-3512,1,4,4C3990.8,3753.46,3992.55,3755.18,3991,3751Zm3516,2,3,3h-3v-3Zm-3511,2,4,4C3995.8,3757.46,3997.55,3759.18,3996,3755Zm3379,0h3v3Zm136,1,4,4C7510.8,3758.46,7512.55,3760.18,7511,3756Zm-3510,3,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm3377,0c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7378.67,3761,7378.33,3760,7378,3759Zm138,1,3,3h-3v-3Zm4,3,4,4C7519.8,3765.46,7521.55,3767.18,7520,3763Zm-3513,1,4,4C4006.8,3766.46,4008.55,3768.18,4007,3764Zm3376,2h3v3Zm142,1,3,3h-3v-3Zm-3513,1,4,4C4011.8,3770.46,4013.55,3772.18,4012,3768Zm3374,2c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7386.67,3772,7386.33,3771,7386,3770Zm143,0,3,3h-3v-3Zm-3512,2,4,4C4016.8,3774.46,4018.55,3776.18,4017,3772Zm3516,1,4,4C7532.8,3775.46,7534.55,3777.18,7533,3773Zm-3511,3,4,4C4021.8,3778.46,4023.55,3780.18,4022,3776Zm3369,1h3v3Zm147,0,3,3h-3v-3Zm-3511,3,4,4C4026.8,3782.46,4028.55,3784.18,4027,3780Zm3515,0,4,4C7541.8,3782.46,7543.55,3784.18,7542,3780Zm-148,1c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7394.67,3783,7394.33,3782,7394,3781Zm-3362,3,4,4C4031.8,3786.46,4033.55,3788.18,4032,3784Zm3515,0,3,3h-3v-3Zm4,3,4,4C7550.8,3789.46,7552.55,3791.18,7551,3787Zm-3514,1,4,4C4036.8,3790.46,4038.55,3792.18,4037,3788Zm3362,0c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7399.67,3790,7399.33,3789,7399,3788Zm157,3,3,3h-3v-3Zm-3514,1,4,4C4041.8,3794.46,4043.55,3796.18,4042,3792Zm3518,2,4,4C7559.8,3796.46,7561.55,3798.18,7560,3794Zm-156,1h3v3Zm-3357,1,4,4C4046.8,3798.46,4048.55,3800.18,4047,3796Zm3518,2q4.005,3.495,8,7C7568.41,3803.79,7566.47,3802.44,7565,3798Zm-158,1c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7407.67,3801,7407.33,3800,7407,3799Zm-3355,1,4,4C4051.8,3802.46,4053.55,3804.18,4052,3800Zm5,4,4,4C4056.8,3806.46,4058.55,3808.18,4057,3804Zm3517,1,4,4C7573.8,3807.46,7575.55,3809.18,7574,3805Zm-162,1c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7412.67,3808,7412.33,3807,7412,3806Zm-3350,2,4,4C4061.8,3810.46,4063.55,3812.18,4062,3808Zm3517,1,3,3h-3v-3Zm-3512,3,3,3h-3v-3Zm3516,0,4,4C7582.8,3814.46,7584.55,3816.18,7583,3812Zm-166,1c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7417.67,3815,7417.33,3814,7417,3813Zm-3346,2,4,4C4070.8,3817.46,4072.55,3819.18,4071,3815Zm3517,1,4,4C7587.8,3818.46,7589.55,3820.18,7588,3816Zm-3512,3,4,4C4075.8,3821.46,4077.55,3823.18,4076,3819Zm3346,1c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7422.67,3822,7422.33,3821,7422,3820Zm171,0,3,3h-3v-3Zm-3512,3,4,4C4080.8,3825.46,4082.55,3827.18,4081,3823Zm3516,0,4,4C7596.8,3825.46,7598.55,3827.18,7597,3823Zm-3511,4q4.005,3.495,8,7C4089.41,3832.79,4087.47,3831.44,4086,3827Zm3341,0h3v3Zm175,0,4,4C7601.8,3829.46,7603.55,3831.18,7602,3827Zm-172,4c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7430.67,3833,7430.33,3832,7430,3831Zm177,0,4,4C7606.8,3833.46,7608.55,3835.18,7607,3831Zm-3512,3,4,4C4094.8,3836.46,4096.55,3838.18,4095,3834Zm3517,1,3,3h-3v-3Zm-3512,3,4,4C4099.8,3840.46,4101.55,3842.18,4100,3838Zm3335,0c4.16,1.71,5.77,4.48,7,9-1.33-1-2.67-2-4-3Zm181,0,4,4C7615.8,3840.46,7617.55,3842.18,7616,3838Zm-3511,4,3,3h-3v-3Zm3516,0,4,4C7620.8,3844.46,7622.55,3846.18,7621,3842Zm-3512,3,4,4C4108.8,3847.46,4110.55,3849.18,4109,3845Zm3517,1,4,4C7625.8,3848.46,7627.55,3850.18,7626,3846Zm-184,2c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7442.67,3850,7442.33,3849,7442,3848Zm-3328,1,3,3h-3v-3Zm3517,1,4,4C7630.8,3852.46,7632.55,3854.18,7631,3850Zm-3513,2,4,4C4117.8,3854.46,4119.55,3856.18,4118,3852Zm3518,2,3,3h-3v-3Zm-189,1c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7447.67,3857,7447.33,3856,7447,3855Zm-3324,1,4,4C4122.8,3858.46,4124.55,3860.18,4123,3856Zm3518,2,3,3h-3v-3Zm-3513,2,3,3h-3v-3Zm3517,1,4,4C7644.8,3863.46,7646.55,3865.18,7645,3861Zm-193,1c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7452.67,3864,7452.33,3863,7452,3862Zm-3320,1q4.005,3.495,8,7C4135.41,3868.79,4133.47,3867.44,4132,3863Zm3518,2,4,4C7649.8,3867.46,7651.55,3869.18,7650,3865Zm-193,4c4.16,1.71,5.77,4.48,7,9-1.33-1-2.67-2-4-3Zm198,0,4,4C7654.8,3871.46,7656.55,3873.18,7655,3869Zm-3514,1,3,3h-3v-3Zm4,3,4,4C4144.8,3875.46,4146.55,3877.18,4145,3873Zm3515,0,4,4C7659.8,3875.46,7661.55,3877.18,7660,3873Zm-3510,4,3,3h-3v-3Zm3515,0,4,4C7664.8,3879.46,7666.55,3881.18,7665,3877Zm-201,2c3.8,1.59,3.77,1.91,5,6-1.33-1-2.67-2-4-3C7464.67,3881,7464.33,3880,7464,3879Zm-3310,1,4,4C4153.8,3882.46,4155.55,3884.18,4154,3880Zm3516,1,4,4C7669.8,3883.46,7671.55,3885.18,7670,3881Zm-3511,3,3,3h-3v-3Zm3310,2c4.16,1.71,5.77,4.48,7,9-1.33-1-2.67-2-4-3Zm207,0,4,4C7675.8,3888.46,7677.55,3890.18,7676,3886Zm-3513,1,4,4C4162.8,3889.46,4164.55,3891.18,4163,3887Zm3518,3,4,4C7680.8,3892.46,7682.55,3894.18,7681,3890Zm-3513,1,3,3h-3v-3Zm4,3,4,4C4171.8,3896.46,4173.55,3898.18,4172,3894Zm3514,0,4,4C7685.8,3896.46,7687.55,3898.18,7686,3894Zm-210,2c4.16,1.71,5.77,4.48,7,9-1.33-1-2.67-2-4-3Zm-3299,2,3,3h-3v-3Zm3514,0,4,4C7690.8,3900.46,7692.55,3902.18,7691,3898Zm-3510,3,3,3h-3v-3Zm3515,1,4,4C7695.8,3904.46,7697.55,3906.18,7696,3902Zm-3511,2q4.005,3.495,8,7C4188.41,3909.79,4186.47,3908.44,4185,3904Zm3298,2c4.16,1.71,5.77,4.48,7,9-1.33-1-2.67-2-4-3Zm219,1,4,4C7701.8,3909.46,7703.55,3911.18,7702,3907Zm-3508,4,3,3h-3v-3Zm3513,0,4,4C7706.8,3913.46,7708.55,3915.18,7707,3911Zm-3509,3,3,3h-3v-3Zm3514,1,4,4C7711.8,3917.46,7713.55,3919.18,7712,3915Zm-222,1c4.66,2,7.53,6.94,9,12Zm-3288,1,4,4C4201.8,3919.46,4203.55,3921.18,4202,3917Zm3516,3,4,4C7717.8,3922.46,7719.55,3924.18,7718,3920Zm-3511,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3512,0,4,4C7722.8,3926.46,7724.55,3928.18,7723,3924Zm-3508,3,4,4C4214.8,3929.46,4216.55,3931.18,4215,3927Zm3513,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-229,1c4.16,1.71,5.77,4.48,7,9-1.33-1-2.67-2-4-3Zm-3279,2,3,3h-3v-3Zm3514,2,4,4C7733.8,3935.46,7735.55,3937.18,7734,3933Zm-3510,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3511,0,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-233,2c4.66,2,7.53,6.94,9,12Zm-3274,1,3,3h-3v-3Zm3513,2,4,4C7744.8,3944.46,7746.55,3946.18,7745,3942Zm-3509,1q4.005,3.495,8,7-4.005-2.505-8-5v-2Zm3515,4,4,4C7750.8,3949.46,7752.55,3951.18,7751,3947Zm-3506,3,3,3h-3v-3Zm3511,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-241,1c5.63,2.52,11.14,11.85,13,18Q7521.505,3961,7515,3952Zm-3266,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3509,0,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3505,3,3,3h-3v-3Zm3511,2,4,4C7767.8,3963.46,7769.55,3965.18,7768,3961Zm-3507,1q6,4.995,12,10C4267.78,3970.6,4262.76,3967.01,4261,3962Zm3513,4,4,4C7773.8,3968.46,7775.55,3970.18,7774,3966Zm-246,5c5.63,2.52,11.14,11.85,13,18Q7534.505,3980,7528,3971Zm252,0,4,4C7779.8,3973.46,7781.55,3975.18,7780,3971Zm-3506,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3508,1,4,4C7785.8,3978.46,7787.55,3980.18,7786,3976Zm-3504,2,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3506,0,4,4C7791.8,3983.46,7793.55,3985.18,7792,3981Zm-3502,3,3,3h-3v-3Zm3508,2,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3504,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3243,0c7.67,3.58,18.35,21.6,21,30Zm263,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3502,2,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3504,0,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3500,3,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3503,0,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3499,3,3,3h-3v-3Zm3505,2,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3501,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3504,2,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3500,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3502,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3498,2,3,3h-3v-3Zm3224,1c13.54,6.8,58.4,86.94,70,105,27.87,43.4,55.73,89.1,85,132,23.26,34.08,39.1,71.65,61,107,15.91,25.68,52.12,77.88,59,107-0.67-.33-1.33-0.67-2-1q-12-22.005-24-44-24-42.495-48-85c-39.93-66.51-78.14-132.04-119-197Q7603.005,4083.005,7562,4021Zm-3220,2,3,3h-3v-3Zm3501,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3497,2,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3500,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3496,2q4.995,4.005,10,8h-3Q4357.505,4036,4354,4032Zm3503,4,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3492,4,3,3h-3v-3Zm3499,2,6,6C7865.29,4046.7,7865.32,4046.69,7864,4042Zm-3495,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3495,0,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3491,3,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4386.49,4057.39,4386.29,4058.25,4385,4055Zm3494,0,6,6-6-3v-3Zm-3487,5,3,3h-3v-3Zm3495,2,6,6C7888.29,4066.7,7888.32,4066.69,7887,4062Zm-3491,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3491,0,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3487,3c2,1.67,4,3.33,6,5h-3C4409.49,4074.39,4409.29,4075.25,4408,4072Zm3495,4,6,6-6-3v-3Zm-3488,1,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,3,3h-3v-3Zm3488,0,6,6-6-3v-3Zm-3484,3c2,1.67,4,3.33,6,5h-3C4428.49,4088.39,4428.29,4089.25,4427,4086Zm7,5,3,3h-3v-3Zm3486,0,6,6-6-3v-3Zm-3482,3,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4443.49,4099.39,4443.29,4100.25,4442,4097Zm3487,2,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm-3480,3,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4458.49,4110.39,4458.29,4111.25,4457,4108Zm3482,0,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm-3475,5,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4469.49,4118.39,4469.29,4119.25,4468,4116Zm3481,1,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm-3474,4,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4484.49,4129.39,4484.29,4130.25,4483,4127Zm3477,0,8,8q-4.005-2.505-8-5v-3Zm-3470,5,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4495.49,4137.39,4495.29,4138.25,4494,4135Zm3477,2,9,9C7974.72,4144.64,7972.39,4142.25,7971,4137Zm-3470,3,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4506.49,4145.39,4506.29,4146.25,4505,4143Zm7,5,3,3h-3v-3Zm3472,1,10,10C7988.53,4157.57,7985.46,4154.44,7984,4149Zm-3468,2c2,1.67,4,3.33,6,5h-3C4517.49,4153.39,4517.29,4154.25,4516,4151Zm7,5,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4528.49,4161.39,4528.29,4162.25,4527,4159Zm3471,3,11,11A14.922,14.922,0,0,1,7998,4162Zm-3464,2c2,1.67,4,3.33,6,5h-3C4535.49,4166.39,4535.29,4167.25,4534,4164Zm7,5,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4546.49,4174.39,4546.29,4175.25,4545,4172Zm7,5c2,1.67,4,3.33,6,5h-3C4553.49,4179.39,4553.29,4180.25,4552,4177Zm3464,2,14,14C8023.76,4191.27,8017.78,4185.2,8016,4179Zm-3457,3,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4564.49,4187.39,4564.29,4188.25,4563,4185Zm7,5c2,1.67,4,3.33,6,5h-3C4571.49,4192.39,4571.29,4193.25,4570,4190Zm7,5c2,1.67,4,3.33,6,5h-3C4578.49,4197.39,4578.29,4198.25,4577,4195Zm7,5,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C4589.49,4205.39,4589.29,4206.25,4588,4203Zm3454,1,46,46C8080.43,4247.64,8044.39,4211.57,8042,4204Zm-3447,4c2,1.67,4,3.33,6,5h-3C4596.49,4210.39,4596.29,4211.25,4595,4208Zm7,5c2,1.67,4,3.33,6,5h-3C4603.49,4215.39,4603.29,4216.25,4602,4213Zm7,5c2,1.67,4,3.33,6,5h-3C4610.49,4220.39,4610.29,4221.25,4609,4218Zm7,5c2,1.67,4,3.33,6,5h-3C4617.49,4225.39,4617.29,4226.25,4616,4223Zm7,5c2,1.67,4,3.33,6,5h-3C4624.49,4230.39,4624.29,4231.25,4623,4228Zm7,5c2,1.67,4,3.33,6,5h-3C4631.49,4235.39,4631.29,4236.25,4630,4233Zm7,5c2,1.67,4,3.33,6,5h-3C4638.49,4240.39,4638.29,4241.25,4637,4238Zm7,5c2,1.67,4,3.33,6,5h-3C4645.49,4245.39,4645.29,4246.25,4644,4243Zm7,5c2,1.67,4,3.33,6,5h-3C4652.49,4250.39,4652.29,4251.25,4651,4248Zm7,5c2,1.67,4,3.33,6,5h-3C4659.49,4255.39,4659.29,4256.25,4658,4253Zm7,5q4.5,3.495,9,7h-3Q4668,4261.505,4665,4258Zm3434,4,12,12A17.117,17.117,0,0,1,8099,4262Zm-3424,3c2,1.67,4,3.33,6,5h-3C4676.49,4267.39,4676.29,4268.25,4675,4265Zm7,5c2,1.67,4,3.33,6,5h-3C4683.49,4272.39,4683.29,4273.25,4682,4270Zm7,5c2,1.67,4,3.33,6,5h-3C4690.49,4277.39,4690.29,4278.25,4689,4275Zm7,5q4.5,3.495,9,7h-3Q4699,4283.505,4696,4280Zm3420,0,9,9C8119.72,4287.64,8117.39,4285.25,8116,4280Zm-3410,7c2,1.67,4,3.33,6,5h-3C4707.49,4289.39,4707.29,4290.25,4706,4287Zm7,5q4.5,3.495,9,7h-3Q4716,4295.505,4713,4292Zm3414,0,8,8q-4.005-2.505-8-5v-3Zm-3404,7q4.5,3.495,9,7h-3Q4726,4302.505,4723,4299Zm3414,4,6,6-6-3v-3Zm-3404,3c2,1.67,4,3.33,6,5h-3C4734.49,4308.39,4734.29,4309.25,4733,4306Zm7,5q4.5,3.495,9,7h-3Q4743,4314.505,4740,4311Zm3404,0,6,6-6-3v-3Zm-3394,7q4.5,3.495,9,7h-3Q4753,4321.505,4750,4318Zm3401,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3391,6c2,1.67,4,3.33,6,5h-3C4761.49,4327.39,4761.29,4328.25,4760,4325Zm3397,1,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm-3390,4q4.5,3.495,9,7h-3Q4770,4333.505,4767,4330Zm3396,3,4,4C8162.8,4335.46,8164.55,4337.18,8163,4333Zm-3386,4q4.5,3.495,9,7h-3Q4780,4340.505,4777,4337Zm3391,2,4,4C8167.8,4341.46,8169.55,4343.18,8168,4339Zm-3381,5q4.5,3.495,9,7h-3Q4790,4347.505,4787,4344Zm3385,0,4,4C8171.8,4346.46,8173.55,4348.18,8172,4344Zm4,5,4,4C8175.8,4351.46,8177.55,4353.18,8176,4349Zm-3379,2q4.5,3.495,9,7h-3Q4800,4354.505,4797,4351Zm3383,3,4,4C8179.8,4356.46,8181.55,4358.18,8180,4354Zm-3373,4q4.5,3.495,9,7h-3Q4810,4361.505,4807,4358Zm3377,1q3.495,4.005,7,8c-4.2-1.54-2.45.18-4-4C8183.97,4361.07,8185.38,4362.8,8184,4359Zm-3367,6,12,9h-3C4823.08,4370.21,4819.2,4369.69,4817,4365Zm3374,3,3,3h-3v-3Zm3,4c1.67,2,3.33,4,5,6h-3v-3C8193.96,4373.2,8195.29,4374.98,8194,4372Zm-3364,2q4.5,3.495,9,7h-3Q4833,4377.505,4830,4374Zm3369,5c1.67,2,3.33,4,5,6h-3v-3C8198.96,4380.2,8200.29,4381.98,8199,4379Zm-3359,2q4.5,3.495,9,7h-3Q4843,4384.505,4840,4381Zm3364,5c11.22,9.78,20.05,28.31,27,42h-3Zm-3354,2,12,9h-3C4856.08,4393.21,4852.2,4392.69,4850,4388Zm13,9q4.5,3.495,9,7h-3Q4866,4400.505,4863,4397Zm10,7,12,9h-3C4879.08,4409.21,4875.2,4408.69,4873,4404Zm13,9q7.5,5.505,15,11h-3C4894.44,4419.42,4888.64,4418.57,4886,4413Zm16,11,12,9h-3C4908.08,4429.21,4904.2,4428.69,4902,4424Zm3330,8c1.33,2.33,2.67,4.67,4,7h-1c-0.33-.67-0.67-1.33-1-2C8233.33,4435.33,8232.67,4433.67,8232,4432Zm-3317,1,12,9h-3C4921.08,4438.21,4917.2,4437.69,4915,4433Zm13,9q7.5,5.505,15,11h-3C4936.44,4448.42,4930.64,4447.57,4928,4442Zm3310,3c2.2,1.81,1.92,1.89,3,5h-1c-0.33-.67-0.67-1.33-1-2C8238.67,4447,8238.33,4446,8238,4445Zm3,7c3.44,2.84,5.16,8.67,6,14h-2Q8243.005,4459,8241,4452Zm-3297,1q9,6.495,18,13h-3C4954.81,4460.62,4947.08,4459.48,4944,4453Zm19,13,30,21h-3C4983.31,4478.39,4967.82,4476.11,4963,4466Zm3283,1c2.04,1.8.71,0.02,2,3h-2v-3Zm1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm-409,5c5.19,2.22,7.9,8.9,9,15-0.67-.33-1.33-0.67-2-1Q7841.505,4483,7838,4476Zm410,0c2.04,1.8.71,0.02,2,3h-2v-3Zm1,5c2.07,1.96,1.04.37,2,4h-1C8249.67,4483.67,8249.33,4482.33,8249,4481Zm-3255,6q228.975,151.98,458,304h-3l-345-230C5085.92,4548.55,5000.24,4500.36,4994,4487Zm3256,0c2.04,1.8.71,0.02,2,3h-2v-3Zm1,6c2.04,1.8.71,0.02,2,3h-2v-3Zm-403,2c6.02,2.7,10.6,13.92,12,21-0.67-.33-1.33-0.67-2-1Q7853.005,4505,7848,4495Zm404,4c2.04,1.8.71,0.02,2,3h-2v-3Zm1,6c2.04,1.8.71,0.02,2,3h-2v-3Zm1,6c2.07,1.96,1.04.37,2,4h-1C8254.67,4513.67,8254.33,4512.33,8254,4511Zm1,7c2.07,1.96,1.04.37,2,4h-1C8255.67,4520.67,8255.33,4519.33,8255,4518Zm1,7c2.07,1.96,1.04.37,2,4h-1C8256.67,4527.67,8256.33,4526.33,8256,4525Zm1,8c2.07,1.96,1.04.37,2,4h-1C8257.67,4535.67,8257.33,4534.33,8257,4533Zm1,9c2.07,1.96,1.04.37,2,4h-1C8258.67,4544.67,8258.33,4543.33,8258,4542Zm1,9c2.07,1.96,1.04.37,2,4h-1C8259.67,4553.67,8259.33,4552.33,8259,4551Zm1,10c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-374,8c5.13,3.69,9.54,13.96,11,21h-1c-0.33-.67-0.67-1.33-1-2Q7890.5,4578.505,7886,4569Zm375,4c2.15,2.21,1.98,1.94,1,5h-1v-5Zm1,14c2.1,2.05,1.64,1.76,2,6h-2v-6Zm-363,9c3.55,2.43,5.06,5.96,6,11h-1c-0.33-.67-0.67-1.33-1-2Q7901.005,4600.5,7899,4596Zm364,10c2.16,2.12,1.99,3.44,2,8h-2v-8Zm-356,7c3.25,2.22,4.12,4.34,5,9h-1c-0.33-.67-0.67-1.33-1-2C7909,4617.67,7908,4615.33,7907,4613Zm6,13c2.97,2.07,3.11,2.71,4,7h-2C7914.33,4630.67,7913.67,4628.33,7913,4626Zm350,48c2.16,2.12,1.99,3.44,2,8h-2v-8Zm-1,21c2.12,2.08,1.84,2.59,2,7h-2v-7Zm-1,15c2.1,2.05,1.64,1.76,2,6h-2v-6Zm-1,13c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-1,10c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-1,10c2.07,1.96,1.04.37,2,4h-1C8258.67,4745.67,8258.33,4744.33,8258,4743Zm-1,9c2.07,1.96,1.04.37,2,4h-1C8257.67,4754.67,8257.33,4753.33,8257,4752Zm-1,8c2.07,1.96,1.04.37,2,4h-1C8256.67,4762.67,8256.33,4761.33,8256,4760Zm-1,8c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,7c2.07,1.96,1.04.37,2,4h-1C8254.67,4777.67,8254.33,4776.33,8254,4775Zm-1,7c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,6c2.07,1.96,1.04.37,2,4h-1C8252.67,4790.67,8252.33,4789.33,8252,4788Zm-2799,3q27,18.495,54,37h-3C5492.29,4812.9,5461.31,4808.4,5453,4791Zm2798,3c2.07,1.96,1.04.37,2,4h-1C8251.67,4796.67,8251.33,4795.33,8251,4794Zm-1,7c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.07,1.96,1.04.37,2,4h-1C8249.67,4808.67,8249.33,4807.33,8249,4806Zm-1,6c2.07,1.96,1.04.37,2,4h-1C8248.67,4814.67,8248.33,4813.33,8248,4812Zm-1,6c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-2738,5,30,21h-3C5528.31,4840.39,5512.82,4838.11,5508,4828Zm2737,0c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.07,1.96,1.04.37,2,4h-1C8244.67,4835.67,8244.33,4834.33,8244,4833Zm-1,5c2.07,1.96,1.04.37,2,4h-1C8243.67,4840.67,8243.33,4839.33,8243,4838Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-97,5c1.67,0.33,3.33.67,5,1v1C8145.99,4849.42,8147.01,4850.05,8145,4848Zm17,0c2.33,0.33,4.67.67,7,1v1h-7v-2Zm79,0c2.04,1.8.71,0.02,2,3h-2v-3Zm-2702,1q12,8.505,24,17h-3C5554.56,4859.01,5542.95,4857.29,5539,4849Zm2600,0h3v1c-1,.33-2,0.67-3,1v-2Zm36,0c1.67,0.33,3.33.67,5,1v1C8175.99,4850.42,8177.01,4851.05,8175,4849Zm-41,1h4v2C8134.35,4851.09,8135.96,4852.04,8134,4850Zm50,0h4v2C8184.35,4851.09,8185.96,4852.04,8184,4850Zm-55,1h3v1c-1,.33-2,0.67-3,1v-2Zm62,0h4v2C8191.35,4852.09,8192.96,4853.04,8191,4851Zm-69,1h4v2C8122.35,4853.09,8123.96,4854.04,8122,4852Zm76,0h3v1c-1,.33-2,0.67-3,1v-2Zm-82,1h3v1c-1,.33-2,0.67-3,1v-2Zm87,0h4v2C8203.35,4854.09,8204.96,4855.04,8203,4853Zm37,0c2.04,1.8.71,0.02,2,3h-2v-3Zm-131,1h4v2C8109.35,4855.09,8110.96,4856.04,8109,4854Zm100,0h3v1c-1,.33-2,0.67-3,1v-2Zm-106,1h3v1c-1,.33-2,0.67-3,1v-2Zm111,0h3v1c-1,.33-2,0.67-3,1v-2Zm-118,1h4v2C8096.35,4857.09,8097.96,4858.04,8096,4856Zm122,0h3v1c-1,.33-2,0.67-3,1v-2Zm-128,1h3v1c-1,.33-2,0.67-3,1v-2Zm133,0h3v1c-1,.33-2,0.67-3,1v-2Zm16,0c2.04,1.8.71,0.02,2,3h-2v-3Zm-12,1h3v1c-1,.33-2,0.67-3,1v-2Zm4,1h3v1c-1,.33-2,0.67-3,1v-2Zm7,2h2l-2,2v-2Zm-2674,5q9,6.495,18,13h-3C5574.81,4873.62,5567.08,4872.48,5564,4866Zm19,13q7.5,5.505,15,11h-3C5591.44,4885.42,5585.64,4884.57,5583,4879Zm16,11q7.5,5.505,15,11h-3C5607.44,4896.42,5601.64,4895.57,5599,4890Zm16,11,12,9h-3C5621.08,4906.21,5617.2,4905.69,5615,4901Zm13,9,12,9h-3C5634.08,4915.21,5630.2,4914.69,5628,4910Zm13,9q4.5,3.495,9,7h-3Q5644,4922.505,5641,4919Zm10,7,12,9h-3C5657.08,4931.21,5653.2,4930.69,5651,4926Zm13,9q4.5,3.495,9,7h-3Q5667,4938.505,5664,4935Zm10,7c2,1.67,4,3.33,6,5h-3C5675.49,4944.39,5675.29,4945.25,5674,4942Zm7,5q4.5,3.495,9,7h-3Q5684,4950.505,5681,4947Zm10,7q4.5,3.495,9,7h-3Q5694,4957.505,5691,4954Zm10,7q4.5,3.495,9,7h-3Q5704,4964.505,5701,4961Zm10,7c2,1.67,4,3.33,6,5h-3C5712.49,4970.39,5712.29,4971.25,5711,4968Zm7,5c2,1.67,4,3.33,6,5h-3C5719.49,4975.39,5719.29,4976.25,5718,4973Zm7,5c2,1.67,4,3.33,6,5h-3C5726.49,4980.39,5726.29,4981.25,5725,4978Zm7,5c2,1.67,4,3.33,6,5h-3C5733.49,4985.39,5733.29,4986.25,5732,4983Zm7,5c2,1.67,4,3.33,6,5h-3C5740.49,4990.39,5740.29,4991.25,5739,4988Zm7,5c2,1.67,4,3.33,6,5h-3C5747.49,4995.39,5747.29,4996.25,5746,4993Zm7,5c2,1.67,4,3.33,6,5h-3C5754.49,5000.39,5754.29,5001.25,5753,4998Zm7,5c2,1.67,4,3.33,6,5h-3C5761.49,5005.39,5761.29,5006.25,5760,5003Zm7,5,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C5772.49,5013.39,5772.29,5014.25,5771,5011Zm7,5c2,1.67,4,3.33,6,5h-3C5779.49,5018.39,5779.29,5019.25,5778,5016Zm7,5,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C5790.49,5026.39,5790.29,5027.25,5789,5024Zm7,5,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C5801.49,5034.39,5801.29,5035.25,5800,5032Zm7,5,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3c2,1.67,4,3.33,6,5h-3C5816.49,5045.39,5816.29,5046.25,5815,5043Zm7,5,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,43,31v2C5873.56,5090.73,5840.82,5066.33,5838,5060Zm44,33,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,4,4C5897.8,5107.46,5899.55,5109.18,5898,5105Zm5,4,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,4,4C5910.8,5117.46,5912.55,5119.18,5911,5115Zm5,4,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,4,4C5923.8,5127.46,5925.55,5129.18,5924,5125Zm5,4,3,3h-3v-3Zm4,3,4,4C5932.8,5134.46,5934.55,5136.18,5933,5132Zm5,4q4.005,3.495,8,7C5941.41,5141.79,5939.47,5140.44,5938,5136Zm9,7,4,4C5946.8,5145.46,5948.55,5147.18,5947,5143Zm5,4,4,4C5951.8,5149.46,5953.55,5151.18,5952,5147Zm5,4,3,3h-3v-3Zm4,3,4,4C5960.8,5156.46,5962.55,5158.18,5961,5154Zm5,4,4,4C5965.8,5160.46,5967.55,5162.18,5966,5158Zm5,4,4,4C5970.8,5164.46,5972.55,5166.18,5971,5162Zm2242,3,3,3h-3v-3Zm-2237,1,4,4C5975.8,5168.46,5977.55,5170.18,5976,5166Zm2242,1,3,3h-3v-3Zm-2237,3,4,4C5980.8,5172.46,5982.55,5174.18,5981,5170Zm5,4,4,4C5985.8,5176.46,5987.55,5178.18,5986,5174Zm2234,1c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-2228,4,4,4C5991.8,5181.46,5993.55,5183.18,5992,5179Zm5,4,4,4C5996.8,5185.46,5998.55,5187.18,5997,5183Zm5,4,4,4C6001.8,5189.46,6003.55,5191.18,6002,5187Zm2219,1c2.1,2.05,1.64,1.76,2,6h-2v-6Zm-2213,4,4,4C6007.8,5194.46,6009.55,5196.18,6008,5192Zm5,4,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm6,5,4,4C6018.8,5203.46,6020.55,5205.18,6019,5201Zm2203,3c2.1,2.05,1.64,1.76,2,6h-2v-6Zm-2197,2,4,4C6024.8,5208.46,6026.55,5210.18,6025,5206Zm6,5,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm6,5,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm6,5,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm2180,0c2.12,2.08,1.84,2.59,2,7h-2v-7Zm-2173,6,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm7,6,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm7,6,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm2160,2c2.16,2.12,1.99,3.44,2,8h-2v-8Zm-2153,4,6,6C6072.29,5249.7,6072.32,5249.69,6071,5245Zm8,7,6,6C6080.29,5256.7,6080.32,5256.69,6079,5252Zm8,7,6,6-6-3v-3Zm9,8,6,6-6-3v-3Zm2129,3c2.57,2.39,2.87,10.36,1,14h-1v-14Zm-2120,5,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm11,10,8,8q-4.005-2.505-8-5v-3Zm12,11,11,11A14.922,14.922,0,0,1,6128,5296Zm17,16,16,16C6154.4,5326.13,6146.91,5318.56,6145,5312Zm2080,6c2.57,2.39,2.87,10.36,1,14h-1v-14Zm-1,31c2.1,2.05,1.64,1.76,2,6h-2v-6Zm-2038,4,16,16C6195.4,5367.13,6187.91,5359.56,6186,5353Zm2037,11c2.1,2.05,1.64,1.76,2,6h-2v-6Zm-2016,11,8,8q-4.005-2.505-8-5v-3Zm11,12,7,7c-2.33-1.33-4.67-2.67-7-4v-3Zm9,10,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm6,7,6,6-6-3v-3Zm7,8,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm6,7,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm6,7,4,4C6251.8,5428.46,6253.55,5430.18,6252,5426Zm5,6,4,4C6256.8,5434.46,6258.55,5436.18,6257,5432Zm4,5,4,4C6260.8,5439.46,6262.55,5441.18,6261,5437Zm5,6,4,4C6265.8,5445.46,6267.55,5447.18,6266,5443Zm4,5,3,3h-3v-3Zm3,4c6.46,5.03,11.06,13.55,15,21h-3Zm15,23c1.33,2.33,2.67,4.67,4,7h-1c-0.33-.67-0.67-1.33-1-2C6289.33,5478.33,6288.67,5476.67,6288,5475Zm5,11c2.2,1.81,1.92,1.89,3,5h-1c-0.33-.67-0.67-1.33-1-2C6293.67,5488,6293.33,5487,6293,5486Zm3,7c2.04,1.8.71,0.02,2,3h-2v-3Zm2,5c2.04,1.8.71,0.02,2,3h-2v-3Zm2,5c2.04,1.8.71,0.02,2,3h-2v-3Zm2,5c2.04,1.8.71,0.02,2,3h-2v-3Zm2,5c2.04,1.8.71,0.02,2,3h-2v-3Zm2,5c2.04,1.8.71,0.02,2,3h-2v-3Zm2,5c2.04,1.8.71,0.02,2,3h-2v-3Zm2,5c2.04,1.8.71,0.02,2,3h-2v-3Zm2,5c2.2,1.81,1.92,1.89,3,5h-1c-0.33-.67-0.67-1.33-1-2C6312.67,5535,6312.33,5534,6312,5533Zm3,7c2.2,1.81,1.92,1.89,3,5h-1c-0.33-.67-0.67-1.33-1-2C6315.67,5542,6315.33,5541,6315,5540Zm3,7c2.2,1.81,1.92,1.89,3,5h-1c-0.33-.67-0.67-1.33-1-2C6318.67,5549,6318.33,5548,6318,5547Zm3,7c2.78,2.02,2.96,3.2,4,7h-1c-0.33-.67-0.67-1.33-1-2C6322.33,5557.33,6321.67,5555.67,6321,5554Zm5,11c1.33,2.33,2.67,4.67,4,7h-1c-0.33-.67-0.67-1.33-1-2C6327.33,5568.33,6326.67,5566.67,6326,5565Zm4,9c2.04,1.8.71,0.02,2,3h-2v-3Zm2,5c2.75,2.23,3.34,4.62,4,9h-2C6333.33,5585,6332.67,5582,6332,5579Zm3,10c2.04,1.8.71,0.02,2,3h-2v-3Zm1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm1,5c2.07,1.96,1.04.37,2,4h-1C6337.67,5601.67,6337.33,5600.33,6337,5599Zm1,6c2.07,1.96,1.04.37,2,4h-1C6338.67,5607.67,6338.33,5606.33,6338,5605Zm1,8c2.07,1.96,1.04.37,2,4h-1C6339.67,5615.67,6339.33,5614.33,6339,5613Zm1,8c2.15,2.21,1.98,1.94,1,5h-1v-5Zm1,11c2.1,2.05,1.64,1.76,2,6h-2v-6Zm1,16c2.12,2.08,1.84,2.59,2,7h-2v-7Zm0,67c2.34,2.15,2.59,5.75,1,9h-1v-9Zm-1,23c2.12,2.08,1.84,2.59,2,7h-2v-7Zm-1,17c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-1,14c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-1,12c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-1,11c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-1,11c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-1,10c2.07,1.96,1.04.37,2,4h-1C6335.67,5815.67,6335.33,5814.33,6335,5813Zm-1,9c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-1,9c2.07,1.96,1.04.37,2,4h-1C6333.67,5833.67,6333.33,5832.33,6333,5831Zm-1,9c2.07,1.96,1.04.37,2,4h-1C6332.67,5842.67,6332.33,5841.33,6332,5840Zm-1,8c2.07,1.96,1.04.37,2,4h-1C6331.67,5850.67,6331.33,5849.33,6331,5848Zm-1,8c2.07,1.96,1.04.37,2,4h-1C6330.67,5858.67,6330.33,5857.33,6330,5856Zm-1,8c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,7c2.07,1.96,1.04.37,2,4h-1C6328.67,5873.67,6328.33,5872.33,6328,5871Zm-1,7c2.07,1.96,1.04.37,2,4h-1C6327.67,5880.67,6327.33,5879.33,6327,5878Zm-1,7c2.07,1.96,1.04.37,2,4h-1C6326.67,5887.67,6326.33,5886.33,6326,5885Zm-1,7c2.07,1.96,1.04.37,2,4h-1C6325.67,5894.67,6325.33,5893.33,6325,5892Zm-1,7c2.07,1.96,1.04.37,2,4h-1C6324.67,5901.67,6324.33,5900.33,6324,5899Zm-1,7c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,6c2.07,1.96,1.04.37,2,4h-1C6322.67,5914.67,6322.33,5913.33,6322,5912Zm-1,6c2.07,1.96,1.04.37,2,4h-1C6321.67,5920.67,6321.33,5919.33,6321,5918Zm-1,6c2.07,1.96,1.04.37,2,4h-1C6320.67,5926.67,6320.33,5925.33,6320,5924Zm-1,6c2.07,1.96,1.04.37,2,4h-1C6319.67,5932.67,6319.33,5931.33,6319,5930Zm-1,6c2.07,1.96,1.04.37,2,4h-1C6318.67,5938.67,6318.33,5937.33,6318,5936Zm-1,6c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,6c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.07,1.96,1.04.37,2,4h-1C6315.67,5955.67,6315.33,5954.33,6315,5953Zm-1,6c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.07,1.96,1.04.37,2,4h-1C6312.67,5971.67,6312.33,5970.33,6312,5969Zm-1,6c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.07,1.96,1.04.37,2,4h-1C6308.67,5991.67,6308.33,5990.33,6308,5989Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.32,2.65,1.3,1.47,1,6h-2C6298.33,6033,6298.67,6031,6299,6029Zm-2,7c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.32,2.65,1.3,1.47,1,6h-2C6295.33,6044,6295.67,6042,6296,6040Zm-4,13c2.32,2.65,1.3,1.47,1,6h-2C6291.33,6057,6291.67,6055,6292,6053Zm-3,8h2c-0.67,2.67-1.33,5.33-2,8h-2C6287.67,6066.33,6288.33,6063.67,6289,6061Zm-4,10h2q-1.5,5.505-3,11h-2Q6283.5,6076.5,6285,6071Zm-5,14c2.32,2.65,1.3,1.47,1,6h-2C6279.33,6089,6279.67,6087,6280,6085Zm-2,7c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,4c2.07,1.96,1.04.37,2,4h-1C6273.67,6115.67,6273.33,6114.33,6273,6113Zm-1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,5c2.07,1.96,1.04.37,2,4h-1C6271.67,6125.67,6271.33,6124.33,6271,6123Zm-1,6c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,6c2.07,1.96,1.04.37,2,4h-1C6269.67,6137.67,6269.33,6136.33,6269,6135Zm-1,6c2.07,1.96,1.04.37,2,4h-1C6268.67,6143.67,6268.33,6142.33,6268,6141Zm-1,8c2.04,1.8.71,0.02,2,3h-2v-3Zm-1,7c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-1,9c2.07,1.96,1.04.37,2,4h-1C6265.67,6167.67,6265.33,6166.33,6265,6165Zm-1,10c2.07,1.96,1.04.37,2,4h-1C6264.67,6177.67,6264.33,6176.33,6264,6175Zm-1,11c2.15,2.21,1.98,1.94,1,5h-1v-5Zm-1,13c2.1,2.05,1.64,1.76,2,6h-2v-6Zm-1,17c2.12,2.08,1.84,2.59,2,7h-2v-7Zm-1,28c2.83,2.72,3.06,14.88,1,19h-1v-19Zm0,25c3.06,3.01,3.2,18.48,1,23h-1v-23Zm1,43c2.12,2.08,1.84,2.59,2,7h-2v-7Zm1,19c2.15,2.21,1.98,1.94,1,5h-1v-5Zm1,13c2.1,2.05,1.64,1.76,2,6h-2v-6Zm1,12c2.15,2.21,1.98,1.94,1,5h-1v-5Zm1,10c2.15,2.21,1.98,1.94,1,5h-1v-5Zm1,9c2.07,1.96,1.04.37,2,4h-1C6266.67,6377.67,6266.33,6376.33,6266,6375Zm1,9c2.07,1.96,1.04.37,2,4h-1C6267.67,6386.67,6267.33,6385.33,6267,6384Zm1,7c2.07,1.96,1.04.37,2,4h-1C6268.67,6393.67,6268.33,6392.33,6268,6391Zm1,7c2.07,1.96,1.04.37,2,4h-1C6269.67,6400.67,6269.33,6399.33,6269,6398Zm1,7c2.04,1.8.71,0.02,2,3h-2v-3Zm1,6c2.07,1.96,1.04.37,2,4h-1C6271.67,6413.67,6271.33,6412.33,6271,6411Zm1,6c2.04,1.8.71,0.02,2,3h-2v-3Zm1,5c2.07,1.96,1.04.37,2,4h-1C6273.67,6424.67,6273.33,6423.33,6273,6422Zm1,6c2.04,1.8.71,0.02,2,3h-2v-3Zm1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm1,4c2.07,1.96,1.04.37,2,4h-1C6276.67,6439.67,6276.33,6438.33,6276,6437Zm1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm1,5c2.04,1.8.71,0.02,2,3h-2v-3Zm1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm1,5c2.41,2,2.21,2.13,3,6h-2C6282.67,6468,6282.33,6466,6282,6464Zm2,7c2.04,1.8.71,0.02,2,3h-2v-3Zm1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm1,4c2.04,1.8.71,0.02,2,3h-2v-3Zm2,7c2.41,2,2.21,2.13,3,6h-2C6288.67,6490,6288.33,6488,6288,6486Zm4,13c2.04,1.8.71,0.02,2,3h-2v-3Zm3,8c2.41,2,2.21,2.13,3,6h-2C6295.67,6511,6295.33,6509,6295,6507Zm3,8c1.33,2.67,2.67,5.33,4,8h-1c-0.33-.67-0.67-1.33-1-2C6299.33,6519,6298.67,6517,6298,6515Zm4,10c2.2,1.81,1.92,1.89,3,5h-1c-0.33-.67-0.67-1.33-1-2C6302.67,6527,6302.33,6526,6302,6525Zm3,7q9.495,16.005,19,32h-3Q6313.005,6548,6305,6532Zm19,33c1.67,2,3.33,4,5,6h-3v-3C6323.96,6566.2,6325.29,6567.98,6324,6565Zm5,7,3,3h-3v-3Zm3,4,3,3h-3v-3Zm3,4,5,5c-1.67-.67-3.33-1.33-5-2v-3Zm13,13,6,6C6349.29,6597.7,6349.32,6597.69,6348,6593Zm7,6,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3,3,3h-3v-3Zm4,3q10.5,7.005,21,14C6380.72,6620.6,6369.71,6614.14,6367,6608Zm23,14q7.5,3.495,15,7v2C6398.95,6630.02,6392.17,6627.11,6390,6622Zm17,9c2.33,0.67,4.67,1.33,7,2v2C6409.69,6634.15,6409.08,6633.93,6407,6631Zm9,4h3v1c-1,.33-2,0.67-3,1v-2Zm5,2h3v1c-1,.33-2,0.67-3,1v-2Zm5,2h3v1c-1,.33-2,0.67-3,1v-2Zm5,2,30,9v2l-30-9v-2Zm31,10c2,0.33,4,.67,6,1v2c-2-.33-4-0.67-6-1v-2Zm10,3h3v1c-1,.33-2,0.67-3,1v-2Zm4,1h3v1c-1,.33-2,0.67-3,1v-2Zm7,2h3v1c-1,.33-2,0.67-3,1v-2Zm4,1h3v1c-1,.33-2,0.67-3,1v-2Zm4,1h3v1c-1,.33-2,0.67-3,1v-2Zm4,1h3v1c-1,.33-2,0.67-3,1v-2Zm5,1h3v1c-1,.33-2,0.67-3,1v-2Zm4,1h3v1c-1,.33-2,0.67-3,1v-2Zm4,1h3v1c-1,.33-2,0.67-3,1v-2Zm4,1h3v1c-1,.33-2,0.67-3,1v-2Zm5,1h3v1c-1,.33-2,0.67-3,1v-2Zm4,1h3v1c-1,.33-2,0.67-3,1v-2Zm5,1h3v1c-1,.33-2,0.67-3,1v-2Zm4,1h4v2C6530.35,6669.09,6531.96,6670.04,6530,6668Zm5,1h4v2C6535.35,6670.09,6536.96,6671.04,6535,6669Zm5,1h4v2C6540.35,6671.09,6541.96,6672.04,6540,6670Zm5,1h4v2C6545.35,6672.09,6546.96,6673.04,6545,6671Zm6,1h3v1c-1,.33-2,0.67-3,1v-2Zm5,1h4v2C6556.35,6674.09,6557.96,6675.04,6556,6673Zm6,1h3v1c-1,.33-2,0.67-3,1v-2Zm5,1h4v2C6567.35,6676.09,6568.96,6677.04,6567,6675Zm6,1h4v2C6573.35,6677.09,6574.96,6678.04,6573,6676Zm6,1h4v2C6579.35,6678.09,6580.96,6679.04,6579,6677Zm7,1h4v2C6586.35,6679.09,6587.96,6680.04,6586,6678Zm7,1h3v1c-1,.33-2,0.67-3,1v-2Zm6,1h4v2C6599.35,6681.09,6600.96,6682.04,6599,6680Zm7,1h4v2C6606.35,6682.09,6607.96,6683.04,6606,6681Zm8,1h4v2C6614.35,6683.09,6615.96,6684.04,6614,6682Zm8,1h4v2C6622.35,6684.09,6623.96,6685.04,6622,6683Zm8,1h4v2C6630.35,6685.09,6631.96,6686.04,6630,6684Zm8,1h4v2C6638.35,6686.09,6639.96,6687.04,6638,6685Zm9,1c1.67,0.33,3.33.67,5,1v1C6647.99,6687.42,6649.01,6688.05,6647,6686Zm9,1c1.67,0.33,3.33.67,5,1v1C6656.99,6688.42,6658.01,6689.05,6656,6687Zm10,1c1.67,0.33,3.33.67,5,1v1C6666.99,6689.42,6668.01,6690.05,6666,6688Zm11,1c1.67,0.33,3.33.67,5,1v1C6677.99,6690.42,6679.01,6691.05,6677,6689Zm11,1c1.67,0.33,3.33.67,5,1v1C6688.99,6691.42,6690.01,6692.05,6688,6690Zm12,1c2,0.33,4,.67,6,1v1h-6v-2Zm14,1c1.67,0.33,3.33.67,5,1v1C6714.99,6693.42,6716.01,6694.05,6714,6692Zm15,1c2,0.33,4,.67,6,1v1h-6v-2Zm17,1c2,0.33,4,.67,6,1v1h-6v-2Zm19,1c3,0.33,6,.67,9,1v1h-9v-2Zm26,1q6,0.495,12,1v1C6797.88,6698.3,6793.39,6698.39,6791,6696Zm29,2c2.04,1.8.71,0.02,2,3h-2v-3Zm2,5,3,6h-2C6822.67,6707,6822.33,6705,6822,6703Zm3,8c2.04,1.8.71,0.02,2,3h-2v-3Z\"/>\n  <path class=\"cls-2\" d=\"M5202,1487c13.51,1.91,22.3,12.12,33,19q15,7.005,30,14,21.495,16.5,43,33,101.985,64.5,204,129c60.26,37.7,121.36,75.21,182,111,39.05,23.05,101.08,40.66,144,71l73,64q7.995,10.005,16,20c35.87,27.8,62.03,65.26,93,98,60.23,63.67,115.77,133.56,168,205,41.09,56.2,82.39,111.69,120,172,13.41,21.51,37.38,48.34,43,75l-36,27h-3l-54-42c-38.41-28.37-75.82-57.82-116-85-76.66-51.87-152.7-107.5-232-157-82.41-51.44-170.36-94.18-249-150-31.58-22.41-60.86-48.34-91-72l-29-23q-19.5-45.495-39-91c-31.32-71.33-66.08-142.86-109-203-36.05-50.51-80.53-93.21-119-141Q5238,1524.01,5202,1487ZM2387,2249h41c25.93-.96,56.72,10.7,76,20,67.37,32.5,147.73,102.24,184,165,28.25,48.87,55.47,100.24,93,140q137.265,145.395,277,285c43.93,43.92,79.19,88.05,128,127q16.5,18.495,33,37,49.995,47.49,100,95c15.59,19.63,33.5,41.4,53,57,30.51,24.42,59.05,56.05,88,85,31.84,31.84,65.13,62.19,94,97q18,16.005,36,32c65.62,81.79,152.33,147.95,229,219l123,102c65.8,56.49,134.18,110.65,204,163q107.49,82.485,215,165c154.02,110.11,306.83,222.46,462,332,339.13,239.4,703.35,453.1,1031,704,66.65,51.04,134.1,98.52,197,153l78,69q12.495,13.5,25,27a316.447,316.447,0,0,1,48,45c29.58,34.12,57.8,68.08,86,104q13.5,33.495,27,67c9.11,21.65,19.41,40.43,25,67,9.57,45.51,7.67,122.09,0,165q-1.5,22.995-3,46c-10.63,59.76-13.18,119.73-27,176-11.26,45.85-26.06,83.07-37,128-18.88,77.56-17.02,212.74,0,290,12.27,55.71,19.64,111.28,48,151,78.67,110.2,325.17,135.45,500,135l6,18h-2l-70,3-208,6c-184.97.01-334.29-9.28-450-77-16.55-9.69-71.92-37.02-80-50q-22.005-81.495-44-163c-34.29-115.39-66.84-233.84-88-359v-71c-8.7-56.84-11.19-155.32,4-205,12.71-41.55,49.43-62.84,70-98,42.18-72.11-6.72-145.91-52-182-43.74-34.87-92.73-63.5-139-96q-125.49-85.995-251-172c-211.6-148.63-426.14-296.01-652-429-79.96-47.08-165.54-82.6-245-129-285.64-166.82-577.35-324.66-828-526-27.06-21.73-51.19-50.96-73-78-26.78-33.2-62.76-67.18-96-94l-79-76q-80.49-73.995-161-148c-41.49-33.49-75.76-75.71-117-109-30.28-24.45-53.97-56.76-84-81-27.51-22.2-54.81-50.5-77-78-25.68-31.83-58.42-58.71-84-91-54.31-68.57-108-137.77-162-206q-90.99-102.495-182-205l-67-70c-45.36-56.18-106.18-101.47-151-157l-79-79-54-54c-36.98-29.86-71-62.43-109-92-72.53-56.44-136.4-119.94-223-163,1-1.33,2-2.67,3-4q30-19.005,60-38c31.98-22.42,80.01-40.59,119-53,43.27-13.77,87.34-23.01,135-33ZM7209,3530q36.99,27.495,74,55c73.15,52.34,143.59,108.11,215,162,174.81,131.94,349.26,268.55,504,421,83.24,82.01,204,179.93,246,299q4.995,33.495,10,67c20.43,115.15-1.53,226.03-18,329h-1c-19.01-7.15-43.35-9.36-63-13h-36c-12.29,4.1-39.17,11.33-53,8q-13.005-20.505-26-41c-30.79-48.77-65.81-91.91-101-136l-45-48q-10.995-25.995-22-52c-14.56-33.79-35.08-70.71-54-102q-11.505-25.5-23-51-165.915-279.915-347-543-94.995-130.98-190-262C7265.46,3602.98,7212.35,3548.37,7209,3530ZM8210,5165c17.68,3.28,11.02,21.94,13,39,1.68,14.49,10.1,100.61,3,118h-1C8225.52,5265.41,8217.4,5214.66,8210,5165Zm14,166h3q-1.005,10.5-2,21h-1v-21Zm0,23c1.41,1.55,1.95,9.14,0,13h-1Q8223.495,5360.505,8224,5354Z\"/>\n  <path class=\"cls-3\" d=\"M5240,1526l5,5Zm15,16,3,3Zm11,11,4,4Zm8,9,2,2Zm8,8,3,3Zm5,6,3,3Zm7,7,2,2Zm4,5,2,2Zm5,5,3,3Zm4,5,2,2Zm5,5,2,2Zm3,4,2,2Zm4,4,3,3Zm3,4,2,2Zm4,4,2,2Zm3,4,2,2Zm4,4,2,2Zm5,6,2,2Zm2,3,2,2Zm4,4c1,1.33,2,2.67,3,4C5346,1642.67,5345,1641.33,5344,1640Zm4,5,2,2Zm2,3,2,2Zm3,3,2,2Zm4,5,2,2Zm2,3,2,2Zm3,3c1,1.33,2,2.67,3,4C5364,1664.67,5363,1663.33,5362,1662Zm4,5c0.67,1,1.33,2,2,3C5367.33,1669,5366.67,1668,5366,1667Zm3,4c1,1.33,2,2.67,3,4C5371,1673.67,5370,1672.33,5369,1671Zm4,5c1,1.33,2,2.67,3,4C5375,1678.67,5374,1677.33,5373,1676Zm3,4c1,1.33,2,2.67,3,4C5378,1682.67,5377,1681.33,5376,1680Zm4,5c0.67,1,1.33,2,2,3C5381.33,1687,5380.67,1686,5380,1685Zm3,4c0.67,1,1.33,2,2,3C5384.33,1691,5383.67,1690,5383,1689Zm3,4c0.67,1,1.33,2,2,3C5387.33,1695,5386.67,1694,5386,1693Zm3,4c0.67,1,1.33,2,2,3C5390.33,1699,5389.67,1698,5389,1697Zm2,3c1,1.33,2,2.67,3,4C5393,1702.67,5392,1701.33,5391,1700Zm3,4c0.67,1,1.33,2,2,3C5395.33,1706,5394.67,1705,5394,1704Zm3,4c0.67,1,1.33,2,2,3C5398.33,1710,5397.67,1709,5397,1708Zm2,3c0.67,1,1.33,2,2,3C5400.33,1713,5399.67,1712,5399,1711Zm2,3c1,1.33,2,2.67,3,4C5403,1716.67,5402,1715.33,5401,1714Zm3,4c0.67,1,1.33,2,2,3C5405.33,1720,5404.67,1719,5404,1718Zm2,3c0.67,1,1.33,2,2,3C5407.33,1723,5406.67,1722,5406,1721Zm2,3c0.67,1,1.33,2,2,3C5409.33,1726,5408.67,1725,5408,1724Zm2,3c0.67,1,1.33,2,2,3C5411.33,1729,5410.67,1728,5410,1727Zm2,3c0.67,1,1.33,2,2,3C5413.33,1732,5412.67,1731,5412,1730Zm2,3c0.67,1,1.33,2,2,3C5415.33,1735,5414.67,1734,5414,1733Zm2,3c0.67,1,1.33,2,2,3C5417.33,1738,5416.67,1737,5416,1736Zm2,3c0.67,1,1.33,2,2,3C5419.33,1741,5418.67,1740,5418,1739Zm2,3c0.33,0.67.67,1.33,1,2C5420.67,1743.33,5420.33,1742.67,5420,1742Zm1,2c0.67,1,1.33,2,2,3C5422.33,1746,5421.67,1745,5421,1744Zm2,3c0.67,1,1.33,2,2,3C5424.33,1749,5423.67,1748,5423,1747Zm2,3c0.33,0.67.67,1.33,1,2C5425.67,1751.33,5425.33,1750.67,5425,1750Zm1,2c0.67,1,1.33,2,2,3C5427.33,1754,5426.67,1753,5426,1752Zm2,3c0.33,0.67.67,1.33,1,2C5428.67,1756.33,5428.33,1755.67,5428,1755Zm1,2c0.67,1,1.33,2,2,3C5430.33,1759,5429.67,1758,5429,1757Zm2,3c0.33,0.67.67,1.33,1,2C5431.67,1761.33,5431.33,1760.67,5431,1760Zm1,2c0.67,1,1.33,2,2,3C5433.33,1764,5432.67,1763,5432,1762Zm2,3c0.33,0.67.67,1.33,1,2C5434.67,1766.33,5434.33,1765.67,5434,1765Zm1,2c0.33,0.67.67,1.33,1,2C5435.67,1768.33,5435.33,1767.67,5435,1767Zm1,2c1,1.67,2,3.33,3,5-0.67-.33-1.33-0.67-2-1C5436.67,1771.67,5436.33,1770.33,5436,1769Zm3,5c0.33,0.67.67,1.33,1,2C5439.67,1775.33,5439.33,1774.67,5439,1774Zm1,2c0.33,0.67.67,1.33,1,2C5440.67,1777.33,5440.33,1776.67,5440,1776Zm1,2c0.33,0.67.67,1.33,1,2C5441.67,1779.33,5441.33,1778.67,5441,1778Zm1,2c0.33,0.67.67,1.33,1,2C5442.67,1781.33,5442.33,1780.67,5442,1780Zm1,2,15,30h-1v-2Q5450,1796.005,5443,1782Zm15,30c0.33,0.67.67,1.33,1,2C5458.67,1813.33,5458.33,1812.67,5458,1812Zm1,2c0.33,0.67.67,1.33,1,2C5459.67,1815.33,5459.33,1814.67,5459,1814Zm1,2c0.33,0.67.67,1.33,1,2C5460.67,1817.33,5460.33,1816.67,5460,1816Zm1,2c0.33,0.67.67,1.33,1,2C5461.67,1819.33,5461.33,1818.67,5461,1818Zm1,2c0.33,0.67.67,1.33,1,2C5462.67,1821.33,5462.33,1820.67,5462,1820Zm1,2c0.33,0.67.67,1.33,1,2C5463.67,1823.33,5463.33,1822.67,5463,1822Zm1,2c0.33,0.67.67,1.33,1,2C5464.67,1825.33,5464.33,1824.67,5464,1824Zm1,2c0.33,0.67.67,1.33,1,2C5465.67,1827.33,5465.33,1826.67,5465,1826Zm1,2c0.33,0.67.67,1.33,1,2C5466.67,1829.33,5466.33,1828.67,5466,1828Zm1,2q1.995,4.5,4,9h-1v-2C5469,1834.67,5468,1832.33,5467,1830Zm4,9c0.33,0.67.67,1.33,1,2C5471.67,1840.33,5471.33,1839.67,5471,1839Zm1,2c0.33,0.67.67,1.33,1,2C5472.67,1842.33,5472.33,1841.67,5472,1841Zm1,2c0.33,0.67.67,1.33,1,2C5473.67,1844.33,5473.33,1843.67,5473,1843Zm1,2c0.33,0.67.67,1.33,1,2C5474.67,1846.33,5474.33,1845.67,5474,1845Zm1,2q1.995,4.5,4,9h-1v-2C5477,1851.67,5476,1849.33,5475,1847Zm4,9c0.33,0.67.67,1.33,1,2C5479.67,1857.33,5479.33,1856.67,5479,1856Zm1,2c0.33,0.67.67,1.33,1,2C5480.67,1859.33,5480.33,1858.67,5480,1858Zm1,2c0.33,0.67.67,1.33,1,2C5481.67,1861.33,5481.33,1860.67,5481,1860Zm1,2c0.33,0.67.67,1.33,1,2C5482.67,1863.33,5482.33,1862.67,5482,1862Zm1,2c1,2.33,2,4.67,3,7h-1v-2C5484.33,1867.33,5483.67,1865.67,5483,1864Zm3,7c0.33,0.67.67,1.33,1,2C5486.67,1872.33,5486.33,1871.67,5486,1871Zm1,2c0.33,0.67.67,1.33,1,2C5487.67,1874.33,5487.33,1873.67,5487,1873Zm1,2c0.33,0.67.67,1.33,1,2C5488.67,1876.33,5488.33,1875.67,5488,1875Zm1,2c1,2.33,2,4.67,3,7h-1v-2C5490.33,1880.33,5489.67,1878.67,5489,1877Zm3,7c0.33,0.67.67,1.33,1,2C5492.67,1885.33,5492.33,1884.67,5492,1884Zm1,2c0.33,0.67.67,1.33,1,2C5493.67,1887.33,5493.33,1886.67,5493,1886Zm1,2c1,2.33,2,4.67,3,7h-1v-2C5495.33,1891.33,5494.67,1889.67,5494,1888Zm3,7c0.33,0.67.67,1.33,1,2C5497.67,1896.33,5497.33,1895.67,5497,1895Zm1,2c0.33,0.67.67,1.33,1,2C5498.67,1898.33,5498.33,1897.67,5498,1897Zm1,2c0.67,1.67,1.33,3.33,2,5h-1v-2C5499.67,1901,5499.33,1900,5499,1899Zm2,5c0.33,0.67.67,1.33,1,2C5501.67,1905.33,5501.33,1904.67,5501,1904Zm1,2c0.33,0.67.67,1.33,1,2C5502.67,1907.33,5502.33,1906.67,5502,1906Zm1,2c1,2.33,2,4.67,3,7h-1v-2C5504.33,1911.33,5503.67,1909.67,5503,1908Zm3,7c0.33,0.67.67,1.33,1,2C5506.67,1916.33,5506.33,1915.67,5506,1915Zm1,2c0.33,0.67.67,1.33,1,2C5507.67,1918.33,5507.33,1917.67,5507,1917Zm1,2c0.67,1.67,1.33,3.33,2,5h-1v-2C5508.67,1921,5508.33,1920,5508,1919Zm2,5c0.33,0.67.67,1.33,1,2C5510.67,1925.33,5510.33,1924.67,5510,1924Zm1,2c0.33,0.67.67,1.33,1,2C5511.67,1927.33,5511.33,1926.67,5511,1926Zm1,2c0.67,1.67,1.33,3.33,2,5h-1v-2C5512.67,1930,5512.33,1929,5512,1928Zm2,5c0.33,0.67.67,1.33,1,2C5514.67,1934.33,5514.33,1933.67,5514,1933Zm1,2c0.33,0.67.67,1.33,1,2C5515.67,1936.33,5515.33,1935.67,5515,1935Zm1,2c0.67,1.67,1.33,3.33,2,5h-1v-2C5516.67,1939,5516.33,1938,5516,1937Zm2,5c0.33,0.67.67,1.33,1,2C5518.67,1943.33,5518.33,1942.67,5518,1942Zm1,2c0.33,0.67.67,1.33,1,2C5519.67,1945.33,5519.33,1944.67,5519,1944Zm1,2c0.67,1.67,1.33,3.33,2,5h-1v-2C5520.67,1948,5520.33,1947,5520,1946Zm2,5c0.33,0.67.67,1.33,1,2C5522.67,1952.33,5522.33,1951.67,5522,1951Zm1,2c0.67,1.67,1.33,3.33,2,5h-1v-2C5523.67,1955,5523.33,1954,5523,1953Zm2,5c0.33,0.67.67,1.33,1,2C5525.67,1959.33,5525.33,1958.67,5525,1958Zm1,2c0.33,0.67.67,1.33,1,2C5526.67,1961.33,5526.33,1960.67,5526,1960Zm1,2c0.67,1.67,1.33,3.33,2,5h-1v-2C5527.67,1964,5527.33,1963,5527,1962Zm2,5c0.33,0.67.67,1.33,1,2C5529.67,1968.33,5529.33,1967.67,5529,1967Zm1,2c0.67,1.67,1.33,3.33,2,5h-1v-2C5530.67,1971,5530.33,1970,5530,1969Zm2,5c0.33,0.67.67,1.33,1,2C5532.67,1975.33,5532.33,1974.67,5532,1974Zm1,2c0.33,0.67.67,1.33,1,2C5533.67,1977.33,5533.33,1976.67,5533,1976Zm1,2c0.67,1.67,1.33,3.33,2,5h-1v-2C5534.67,1980,5534.33,1979,5534,1978Zm2,5c0.33,0.67.67,1.33,1,2C5536.67,1984.33,5536.33,1983.67,5536,1983Zm1,2c0.67,1.67,1.33,3.33,2,5h-1v-2C5537.67,1987,5537.33,1986,5537,1985Zm2,5c0.33,0.67.67,1.33,1,2C5539.67,1991.33,5539.33,1990.67,5539,1990Zm1,2c0.33,0.67.67,1.33,1,2C5540.67,1993.33,5540.33,1992.67,5540,1992ZM1995,2386c1.67,1,3.33,2,5,3C1998.33,2388,1996.67,2387,1995,2386Zm5,3h0Zm2,1h0Zm2,1c1.67,1,3.33,2,5,3C2007.33,2393,2005.67,2392,2004,2391Zm5,3h0Zm2,1h0Zm2,1c1,0.67,2,1.33,3,2C2015,2397.33,2014,2396.67,2013,2396Zm3,2h0Zm2,1h0Zm2,1c1,0.67,2,1.33,3,2C2022,2401.33,2021,2400.67,2020,2400Zm3,2h0Zm2,1h0Zm2,1c1,0.67,2,1.33,3,2C2029,2405.33,2028,2404.67,2027,2404Zm3,2h0Zm2,1c1,0.67,2,1.33,3,2C2034,2408.33,2033,2407.67,2032,2407Zm3,2h0Zm2,1c1,0.67,2,1.33,3,2C2039,2411.33,2038,2410.67,2037,2410Zm3,2h0Zm2,1c1,0.67,2,1.33,3,2C2044,2414.33,2043,2413.67,2042,2413Zm3,2h0Zm2,1c1,0.67,2,1.33,3,2C2049,2417.33,2048,2416.67,2047,2416Zm3,2h0Zm2,1c1,0.67,2,1.33,3,2C2054,2420.33,2053,2419.67,2052,2419Zm3,2c1,0.67,2,1.33,3,2C2057,2422.33,2056,2421.67,2055,2421Zm3,2h0Zm2,1c1,0.67,2,1.33,3,2C2062,2425.33,2061,2424.67,2060,2424Zm3,2c1,0.67,2,1.33,3,2C2065,2427.33,2064,2426.67,2063,2426Zm3,2h0Zm3,2h0Zm2,1c1,0.67,2,1.33,3,2C2073,2432.33,2072,2431.67,2071,2431Zm3,2c1,0.67,2,1.33,3,2C2076,2434.33,2075,2433.67,2074,2433Zm3,2c1,0.67,2,1.33,3,2C2079,2436.33,2078,2435.67,2077,2435Zm3,2c1,0.67,2,1.33,3,2C2082,2438.33,2081,2437.67,2080,2437Zm3,2c1,0.67,2,1.33,3,2C2085,2440.33,2084,2439.67,2083,2439Zm3,2c1,0.67,2,1.33,3,2C2088,2442.33,2087,2441.67,2086,2441Zm3,2c1,0.67,2,1.33,3,2C2091,2444.33,2090,2443.67,2089,2443Zm3,2,31,25,112,91c63.23,48.52,118.18,104.18,174,160q42,42.495,84,85,16.005,15.495,32,31l124,133q24,24.99,48,50,80.985,91.485,162,183c55.63,70.23,111.14,141.41,167,212,29.08,36.75,66.77,66.81,96,103l79,79,72,69c40.52,32.7,74.22,74.11,115,107l148,136q27.99,27,56,54c60.42,48.79,118.21,109.5,167,170,30.57,37.91,86.69,77.18,127,106,223.43,159.77,467.19,295.67,709,438q146.49,77.985,293,156c186.89,111.71,366.97,233.19,543,357q175.98,120.495,352,241c60.13,42.28,133.69,77.14,173,140,40.65,65,13.1,124.57-24,171q-15.495,16.5-31,33c-18.13,29.79-26.87,112.29-19,163,8.1,52.19-1.72,115.14,9,164,24.73,112.74,49.89,222.21,82,330Q5996,6515,6019,6598q-19.005-15-38-30-55.995,16.995-112,34c-61.71,18.59-121.42,27.59-192,39-39.59,6.4-88.56-.16-122-6-77.91-13.62-151.03-20.39-222-38-168.65-41.85-334.5-72.61-494-123-70.86-22.39-137.76-51.25-203-80-98.65-43.47-192.52-97.37-282-151-162.61-97.45-314.44-202.28-464-312-73.13-53.65-141.86-113.54-213-169-105.85-82.51-200.13-177.33-304-261l-116-110c-35.4-28.56-62.85-66.65-98-95-37.33-30.11-85.86-79.61-116-117l-49-49q-91.995-100.485-184-201-79.995-94.485-160-189c-120.07-154.08-240.98-308.75-347-477-108.85-172.75-204.64-354.87-285-557-28.56-71.84-49.04-147.92-72-225-27.99-93.96-34.44-193.98-52-301-5.39-32.83-9.21-94.26-4-127v-47q4.005-51,8-102c21.82-122.82,42.16-234.56,95-325,21.57-36.92,66.47-110.91,101-131C2093.33,2447,2092.67,2446,2092,2445ZM7917,4634l3,3Zm8,9,2,2Zm6,6,3,3Zm5,6,2,2Zm6,6,2,2Zm3,4,2,2Zm5,5,2,2Zm3,4,2,2Zm4,4,2,2Zm2,3,2,2Zm4,4,2,2Zm2,3,2,2Zm4,4,2,2Zm2,3,2,2Zm3,3,2,2Zm2,3,2,2Zm3,3c1,1.33,2,2.67,3,4C7981,4706.67,7980,4705.33,7979,4704Zm4,5,2,2Zm4,5,2,2Zm2,3,2,2Zm3,3c1,1.33,2,2.67,3,4C7994,4722.67,7993,4721.33,7992,4720Zm3,4,2,2Zm4,5c1,1.33,2,2.67,3,4C8001,4731.67,8000,4730.33,7999,4729Zm7,9c1,1.33,2,2.67,3,4C8008,4740.67,8007,4739.33,8006,4738Zm3,4c1,1.33,2,2.67,3,4C8011,4744.67,8010,4743.33,8009,4742Zm3,4c1,1.33,2,2.67,3,4C8014,4748.67,8013,4747.33,8012,4746Zm3,4c1,1.33,2,2.67,3,4C8017,4752.67,8016,4751.33,8015,4750Zm3,4c1,1.33,2,2.67,3,4C8020,4756.67,8019,4755.33,8018,4754Zm3,4c1,1.33,2,2.67,3,4C8023,4760.67,8022,4759.33,8021,4758Zm3,4c0.67,1,1.33,2,2,3C8025.33,4764,8024.67,4763,8024,4762Zm3,4c0.67,1,1.33,2,2,3C8028.33,4768,8027.67,4767,8027,4766Zm2,3c1,1.33,2,2.67,3,4C8031,4771.67,8030,4770.33,8029,4769Zm3,4c0.67,1,1.33,2,2,3C8033.33,4775,8032.67,4774,8032,4773Zm2,3c1,1.33,2,2.67,3,4C8036,4778.67,8035,4777.33,8034,4776Zm3,4c0.67,1,1.33,2,2,3C8038.33,4782,8037.67,4781,8037,4780Zm2,3c0.67,1,1.33,2,2,3C8040.33,4785,8039.67,4784,8039,4783Zm3,4c0.67,1,1.33,2,2,3C8043.33,4789,8042.67,4788,8042,4787Zm2,3c0.67,1,1.33,2,2,3C8045.33,4792,8044.67,4791,8044,4790Zm2,3c0.67,1,1.33,2,2,3C8047.33,4795,8046.67,4794,8046,4793Zm2,3c0.67,1,1.33,2,2,3C8049.33,4798,8048.67,4797,8048,4796Zm2,3c0.67,1,1.33,2,2,3C8051.33,4801,8050.67,4800,8050,4799Zm2,3c0.67,1,1.33,2,2,3C8053.33,4804,8052.67,4803,8052,4802Zm3,4c0.33,0.67.67,1.33,1,2C8055.67,4807.33,8055.33,4806.67,8055,4806Zm2,3c0.33,0.67.67,1.33,1,2C8057.67,4810.33,8057.33,4809.67,8057,4809Zm2,3c0.33,0.67.67,1.33,1,2C8059.67,4813.33,8059.33,4812.67,8059,4812Zm1,2c0.67,1,1.33,2,2,3C8061.33,4816,8060.67,4815,8060,4814Zm2,3c0.67,1,1.33,2,2,3C8063.33,4819,8062.67,4818,8062,4817Zm2,3c0.67,1,1.33,2,2,3C8065.33,4822,8064.67,4821,8064,4820Zm2,3c0.67,1,1.33,2,2,3C8067.33,4825,8066.67,4824,8066,4823Zm2,3c0.67,1,1.33,2,2,3C8069.33,4828,8068.67,4827,8068,4826Zm2,3c0.33,0.67.67,1.33,1,2C8070.67,4830.33,8070.33,4829.67,8070,4829Zm1,2c0.67,1,1.33,2,2,3C8072.33,4833,8071.67,4832,8071,4831Zm2,3c0.67,1,1.33,2,2,3C8074.33,4836,8073.67,4835,8073,4834Zm2,3c1,1.67,2,3.33,3,5-0.67-.33-1.33-0.67-2-1C8075.67,4839.67,8075.33,4838.33,8075,4837Zm3,5c0.67,1,1.33,2,2,3C8079.33,4844,8078.67,4843,8078,4842Zm2,3c0.33,0.67.67,1.33,1,2C8080.67,4846.33,8080.33,4845.67,8080,4845Zm1,2c0.67,1,1.33,2,2,3C8082.33,4849,8081.67,4848,8081,4847Zm2,3c1,1.67,2,3.33,3,5-0.67-.33-1.33-0.67-2-1C8083.67,4852.67,8083.33,4851.33,8083,4850Zm3,5c1,1.33,2,2.67,3,4C8086.59,4857.25,8087.33,4857.97,8086,4855Zm124,310v0Zm1,5v0Zm1,5v0Zm1,6v0Zm1,6v0Zm1,6v0Zm1,6v0Zm1,7v0Zm1,7v0Zm1,8v0Zm1,8v0Zm1,9v0Zm1,11v0Zm1,13v0Zm1,18v0Zm0,51v0Zm-1,38v0ZM6019,6598c1,0.67,2,1.33,3,2C6021,6599.33,6020,6598.67,6019,6598Zm4,3c1,0.67,2,1.33,3,2C6025,6602.33,6024,6601.67,6023,6601Zm3,2c1,0.67,2,1.33,3,2C6028,6604.33,6027,6603.67,6026,6603Zm4,3c1,0.67,2,1.33,3,2C6032,6607.33,6031,6606.67,6030,6606Zm3,2c1,0.67,2,1.33,3,2C6035,6609.33,6034,6608.67,6033,6608Zm3,2c1,0.67,2,1.33,3,2C6038,6611.33,6037,6610.67,6036,6610Zm3,2c1,0.67,2,1.33,3,2C6041,6613.33,6040,6612.67,6039,6612Zm3,2c1,0.67,2,1.33,3,2C6044,6615.33,6043,6614.67,6042,6614Zm3,2c1,0.67,2,1.33,3,2C6047,6617.33,6046,6616.67,6045,6616Zm3,2c1,0.67,2,1.33,3,2C6050,6619.33,6049,6618.67,6048,6618Zm3,2c1,0.67,2,1.33,3,2C6053,6621.33,6052,6620.67,6051,6620Zm3,2c1,0.67,2,1.33,3,2C6056,6623.33,6055,6622.67,6054,6622Zm3,2c1,0.67,2,1.33,3,2C6059,6625.33,6058,6624.67,6057,6624Zm3,2h0Zm2,1c1,0.67,2,1.33,3,2C6064,6628.33,6063,6627.67,6062,6627Zm3,2h0Zm2,1c1,0.67,2,1.33,3,2C6069,6631.33,6068,6630.67,6067,6630Zm3,2c1.67,1,3.33,2,5,3C6073.33,6634,6071.67,6633,6070,6632Zm5,3h0Zm2,1c1,0.67,2,1.33,3,2C6079,6637.33,6078,6636.67,6077,6636Zm3,2h0Zm2,1c1.67,1,3.33,2,5,3C6085.33,6641,6083.67,6640,6082,6639Zm5,3h0Zm2,1c2.33,1.33,4.67,2.67,7,4C6093.67,6645.67,6091.33,6644.33,6089,6643Zm7,4h0Zm2,1h0Zm2,1q5.505,3,11,6Q6105.5,6652,6100,6649Zm11,6h0Zm2,1h0Zm2,1h0Zm2,1h0Zm2,1h0Zm2,1h0Zm2,1h0Zm2,1c2.33,0.67,4.67,1.33,7,2v1C6129.67,6664,6127.33,6663,6125,6662Zm7,3h0Zm2,1h0Zm2,1h0Zm2,1c1.67,0.33,3.33.67,5,1v1C6141.33,6669.33,6139.67,6668.67,6138,6668Zm5,2h0Zm2,1h0Zm2,1c1.67,0.33,3.33.67,5,1v1C6150.33,6673.33,6148.67,6672.67,6147,6672Zm5,2h0Zm2,1h0Zm3,1h0Zm2,1c1.67,0.33,3.33.67,5,1v1C6162.33,6678.33,6160.67,6677.67,6159,6677Zm5,2c1.67,0.33,3.33.67,5,1v1C6167.33,6680.33,6165.67,6679.67,6164,6679Zm5,2h0Zm3,1h0Zm2,1h0Zm3,1h0Zm3,1c2.67,0.67,5.33,1.33,8,2v1C6185.33,6687,6182.67,6686,6180,6685Zm8,3h0Zm3,1h0Zm3,1h0Zm3,1h0Zm3,1c2.33,0.33,4.67.67,7,1v1C6204.67,6693.33,6202.33,6692.67,6200,6692Zm7,2h0Zm3,1c2.33,0.33,4.67.67,7,1v1C6214.67,6696.33,6212.33,6695.67,6210,6695Zm7,2c2.33,0.33,4.67.67,7,1v1C6221.67,6698.33,6219.33,6697.67,6217,6697Zm7,2h4v1C6226.67,6699.67,6225.33,6699.33,6224,6699Zm4,1h4v1C6230.67,6700.67,6229.33,6700.33,6228,6700Zm4,1h4v1C6234.67,6701.67,6233.33,6701.33,6232,6701Zm4,1h4v1C6238.67,6702.67,6237.33,6702.33,6236,6702Zm5,1h4v1C6243.67,6703.67,6242.33,6703.33,6241,6703Zm4,1c1.67,0.33,3.33.67,5,1C6248.33,6704.67,6246.67,6704.33,6245,6704Zm5,1h4v1C6252.67,6705.67,6251.33,6705.33,6250,6705Zm5,1c1.67,0.33,3.33.67,5,1C6258.33,6706.67,6256.67,6706.33,6255,6706Zm5,1c1.67,0.33,3.33.67,5,1C6263.33,6707.67,6261.67,6707.33,6260,6707Zm6,1c1.67,0.33,3.33.67,5,1C6269.33,6708.67,6267.67,6708.33,6266,6708Zm6,1c2,0.33,4,.67,6,1C6276,6709.67,6274,6709.33,6272,6709Zm7,1c1.67,0.33,3.33.67,5,1C6282.33,6710.67,6280.67,6710.33,6279,6710Zm7,1c1.67,0.33,3.33.67,5,1C6289.33,6711.67,6287.67,6711.33,6286,6711Zm7,1c2,0.33,4,.67,6,1C6297,6712.67,6295,6712.33,6293,6712Zm8,1c2,0.33,4,.67,6,1C6305,6713.67,6303,6713.33,6301,6713Zm9,1c2,0.33,4,.67,6,1C6314,6714.67,6312,6714.33,6310,6714Zm9,1c2.33,0.33,4.67.67,7,1C6323.67,6715.67,6321.33,6715.33,6319,6715Zm493,0q6.495,0.495,13,1Q6818.505,6715.505,6812,6715Zm-483,1c2.67,0.33,5.33.67,8,1C6334.33,6716.67,6331.67,6716.33,6329,6716Zm460,0q7.005,0.495,14,1Q6796,6716.505,6789,6716Zm-449,1c3,0.33,6,.67,9,1C6346,6717.67,6343,6717.33,6340,6717Zm425,0q7.005,0.495,14,1Q6772,6717.505,6765,6717Zm-412,1c3,0.33,6,.67,9,1C6359,6718.67,6356,6718.33,6353,6718Zm388,0q7.5,0.495,15,1Q6748.5,6718.505,6741,6718Zm-374,1c3.67,0.33,7.33.67,11,1C6374.33,6719.67,6370.67,6719.33,6367,6719Zm347,0q7.995,0.495,16,1Q6722.005,6719.505,6714,6719Zm-330,1q6,0.495,12,1Q6390,6720.505,6384,6720Zm301,0q9,0.495,18,1Q6694,6720.505,6685,6720Zm-281,1q7.5,0.495,15,1Q6411.5,6721.505,6404,6721Zm247,0q10.5,0.495,21,1Q6661.5,6721.505,6651,6721Zm-221,1q10.5,0.495,21,1Q6440.5,6722.505,6430,6722Zm180,0q12.495,0.495,25,1Q6622.505,6722.505,6610,6722Zm-138,1q55.5,0.495,111,1Q6527.5,6723.505,6472,6723Z\"/>\n  <path class=\"cls-4\" d=\"M4692,1344c149.32-2.45,270.17,37.66,376,81,41.9,17.16,95.92,33.19,131,58q29.49,30.495,59,61,25.5,26.49,51,53c39.33,48.87,79.79,94.34,114,149,32.9,52.58,59.02,112.46,85,172,10.28,23.55,29.04,49.84,33,77q-83.985-70.995-168-142c-131.09-99.32-264.29-196.38-406-285-62.07-38.82-126.04-77.2-196-108l-60-27C4709.27,1400.98,4697.26,1373.37,4692,1344ZM1993,2385c36.11,7.57,69.28,46.25,102,60v4c-30.15,23.34-52.7,58.75-75,90-57.8,81.02-86.01,186.35-111,301q-5.505,43.995-11,88c-7.36,44.41-13.91,120.5-6,170,7.6,47.57,1.12,92.64,9,137,15.03,84.58,23.2,166.53,46,243,22.77,76.37,42.94,151.76,71,223,80.8,205.13,177.46,392.5,290,566,126.48,194.99,267.59,372.27,409,551q74.49,85.485,149,171l52,55,118,127q18.495,18,37,36,33,33.495,66,67,38.49,37.5,77,75c61.06,49.23,110.72,113.61,172,163q62.49,55.5,125,111c97.84,78.17,190.39,162.04,291,238,281.95,212.87,569.08,420.39,917,568,120.67,51.2,259.32,78.54,395,116,119.26,32.92,241.07,53.72,370,79,49.07,9.62,139.7,24.43,198,15,70.13-11.34,130.94-22.41,193-41q52.5-16.005,105-32c12.71,15.84,33.26,27.14,50,39,65.36,46.28,137.89,81.77,230,102,45.91,10.08,94.11,4.91,145,13l117,3h57q123.495-4.005,247-8,1.995,7.5,4,15-29.49,16.005-59,32-67.5,30.495-135,61c-117.13,48.2-242.84,78.2-382,106-206.57,41.27-467.47,18.66-649-27-86.16-21.67-168.49-38.57-250-64-250.47-78.14-486.13-167.66-713-267-411.13-180.02-789.67-394.77-1135-641-104.82-74.74-201.49-158.38-301-238-56.24-44.99-102.27-103.04-158-148l-81-81c-28.06-34.8-64.71-62.9-93-98q-30-31.995-60-64-79.485-92.985-159-186c-137.12-175.8-271.47-352.38-397-541-85.55-128.54-166.36-261.83-246-397-35.89-60.92-64.06-125.25-100-187-29.58-50.82-54.67-105.79-79-161-39.07-88.67-81.31-177.5-107-280q-10.5-70.995-21-142c-42.06-220.86-29.49-485.94,40-665,39.42-101.59,82.21-186.88,144-264C1920.22,2441.53,1961.56,2418.07,1993,2385ZM7916,4634c14.42,4.85,40.92,42.32,51,55,42.6,53.61,88.27,106.51,122,169-0.33.67-.67,1.33-1,2q-39.99,6.495-80,13-13.5-39.99-27-80C7959.74,4738.18,7941.43,4684.4,7916,4634Zm283,529c5.6,0.01,9.71.48,12,4,11.48,24.23,7.28,58.4,12,88,9.36,58.72,5.95,145.58-12,191-7.62,19.29-20.57,35.44-31,52q-27.495,43.995-55,88c-100.11,151.26-199.6,303.71-293,461l-63,123c-68.78,117.7-142.59,235.2-259,305-26.68,16-55.75,24.9-87,37q-45.495,15.495-91,31c1-1.33,2-2.67,3-4,24-10.78,43.07-36.03,63-52,50.98-40.84,102.01-89.19,143-140q25.995-27.99,52-56c34.44-42.98,70.74-84.81,103-130,124.97-175.04,225.7-373.39,297-602,24.78-79.44,39.32-163.08,56-251q5.505-49.5,11-99,0.495-16.005,1-32c46.03,23.2,75.38,8.36,116-9Q8188,5165.5,8199,5163Z\"/>\n  <path class=\"cls-5\" d=\"M3533,1370c247.48-4.29,354.86,106.95,488,214,59.71,48.01,132.43,122.4,164,197,16.65,39.33,13.42,96.05,22,141q4.995,42.99,10,86c4.57,27.43,3.37,67.23-1,93-6.43,37.91-7.05,69.55-19,100-39,99.37-149.22,179.53-248,219-75.99,30.36-238.88,36.51-332,13-41.67-10.52-80.33-26.3-115-44-116.54-59.5-223.77-136.11-302-234-31.98-40.02-65.53-77.99-86-130-26.94-68.44-27.64-189.47-10-270,10.29-46.97,21.74-90.76,39-131,50.17-116.97,129.88-191.89,257-232,26.88-8.48,56.05-12.59,86-18Q3509.505,1372.005,3533,1370Zm311,136q-20.505,4.005-41,8c-48.39,14.73-86.1,41.87-105,86-14.11,32.95-16.87,99.16,0,133,8.47,17,23.87,27.92,35,42q9,13.995,18,28c9.56,12.31,25.09,17.91,38,27,18.7,13.17,39.36,29.33,64,36,43.48,11.76,114.27-9.24,144-22,36.43-15.64,78.07-102.75,57-157-23.77-61.2-56.27-90.72-100-131-11.22-10.33-17.58-25.86-31-34C3903.25,1510.02,3875.39,1505.8,3844,1506Zm39,40c3.67,0.33,7.33.67,11,1l6,6c-0.47,5.95-1.64,6.53-4,10q-6,1.005-12,2c-5.66-2.59-8.46-4-9-12Q3879.005,1549.505,3883,1546Zm60,76c51.41-2.17,54.6,60.26,14,69-29.87,6.43-53.11-27.08-38-52C3924.43,1630.04,3933.25,1626.86,3943,1622Zm2623,785c68.24,4.83,129.57,29.35,164,69l-3,18c-16.69-2.37-62.7-27.89-73-8-11.08,24.54,25.82,19.88,40,27,38.46,19.3,78.39,52.42,86,102,3.32,21.62-20.26,32.24-32,40-21.71,14.36-48.92,29.97-78,36-21.78,4.51-47.23-1.33-66,6q-28.995,16.005-58,32-28.5-26.49-57-53-48.99-43.995-98-88-28.5-23.505-57-47h2c12.74-15.46,34.5-26.3,51-38,41.68-29.54,84.77-61.47,134-83C6535.11,2413.83,6550.2,2413.36,6566,2407Zm-3775,65c63.14-1.04,118.16,6.81,172,17,26.85,5.08,56.71,2.55,81,10,69.03,21.17,155.74,68.28,210,107,36.56,26.09,66.62,59.32,101,87,59.39,47.82,109.9,107.55,140,185,22.28,57.32,28.24,122.54,41,192,5.52,30.05,13.53,72.33,6,106-5.4,24.14-17.56,40.68-28,59l-154-154-138-135v-1l1-1c85.24,0.21,87.57-31.12,112-91,5.77-14.15,19.86-27.72,16-51-3.95-23.85-13.92-46.21-23-67-15.36-35.17-40.02-48.88-68-71q-19.5-21.495-39-43c-16.25-12.79-49.03-23.91-71-29-22.69-5.26-43.7,5.08-59,11-60.91,23.57-89.78,35.09-116,94q-13.995-13.5-28-27-15-15.495-30-31c-35.3-43.7-78.08-80.53-113-125-9.37-11.93-23.48-22.57-28-39h2Zm383,158c13.78-.52,19.71,2.39,26,9-0.46,21.94-31.43,15.54-40,6C3160.56,2633.49,3166.25,2633.91,3174,2630Zm54,76c54.25-2.27,58.94,59.77,15,69-31.79,6.68-57.17-27.47-40-53C3208.78,2713.4,3218.14,2710.76,3228,2706Zm1035,206c19.18,5.39,43.39,32.31,64,42q25.995,9.495,52,19c79.72,34.87,159.21,99.11,195,178-13.73,27.7-82.6,92-131,68-15.97-34.92-57.54-51.63-90-71q-63.99-39.99-128-80-21-22.005-42-44c-8-11.51-9.89-21.73-21-30,1-1.33,2-2.67,3-4q11.505-10.5,23-21Zm-143,126c36.69,17.06,62.12,44.25,95,65q57,35.49,114,71,24,13.005,48,26c19.38,14.8,31.04,32.56,46,52q20.505,18,41,36c-6.7,41.71-80.47,127.46-145,110-32.65-8.83-56.97-42.74-81-62-42.52-34.08-79.17-74.2-121-108q-24.99-23.505-50-47c-0.36-19.79-6.38-61.76,1-80Q4094,3069.5,4120,3038Zm1889,503c84.35-1.52,137.25,60.47,186,98,12.51,9.63,51.46,36.83,39,56-49.52,17.2-93.31-73.53-122-43,0.73,21.75,20.82,27.6,34,37,19.66,14.01,75.49,51.29,82,74,7.41,25.87-30.7,67.11-45,73-23.6,9.72-71.67,10.34-99,3-15.66-4.21-30.44-15.69-53-12-70.82,11.59-114.14,48.35-169,73-6.03-14.9-18.76-21.62-24-39q-7.005-42.495-14-85c-8.19-20.42-27.36-31.14-40-47q-10.5-16.995-21-34c-4.84-8.3-29.65-59.1-27-63,12.51-11.75,34.29-16.83,51-24,50.83-21.81,102.54-43.11,162-58ZM8150,4874c52.07-.82,86.64,16.24,122,30,11.55,4.5,22.62,2.93,36,7,19.38,5.9,37.07,24.43,52,36,5.79,4.49,54.13,40.1,40,52-21.72,18.3-55.68-32.32-80-27-2.88,3.69-7.13,8.26-5,14,5.03,29.42,70.34,51.42,95,66q-0.495,27-1,54,7.005,10.5,14,21-2.505,12-5,24c-10.11,28.82-30.63,57.69-74,49-53.23-10.67-82.65-51.11-134-61-56.26-10.84-98.97,61.25-150,7-1.55-94.64-30.42-170.05-44-249Q8082.99,4885.5,8150,4874ZM6944,6560c24.05-.07,53.44-0.12,74,6q11.505,4.5,23,9,14.505-.495,29-1c31.77,5.1,78.07,1.23,93,23,20.22,29.49,16.71,103.18,9,145-3.2,17.36-9.86,41.69-6,63,3.6,19.83,15.45,28.15,22,44,6.99,16.91,1.52,37.33,6,57,12.32,54.06,38.45,91.74-14,127-11.47,7.71-24.42,17.74-40,21-29.21,6.11-43.38-16.21-57-27-26.08-20.66-54.5-37.63-89-50-10.55,3.09-13.79,8.08-11,19,29.07,37.6,88.8,52.85,112,95-0.33,1.33-.67,2.67-1,4-92.95,29.77-164.37-33.66-181-109-9.97-45.18-.18-101.64-9-146-17.92-90.17-86.26-168.16-22-251,9.4-12.12,25.75-23.04,43-27Q6934.5,6561,6944,6560Z\"/>\n  <path class=\"cls-6\" d=\"M4079,2599c29.23-.36,57.86,2.06,83,7q26.49,2.505,53,5c44.57,11.23,71.68,48.93,88,89,13.83,33.97,18.06,87.78-1,120-25.84,43.7-69.71,73.55-110,103-54.15,39.58-113.03,86.71-149,144-17.82,28.37-8.4,77.77-17,117-15.24,69.56-75.53,144.41-167,115-43.07-13.85-109.69-56.13-130-92-14.25-25.18-16.03-57.51-22-91-7.42-41.63-5.88-86.21,15-112q16.995-8.505,34-17,21.495-16.5,43-33c30.42-19.05,63.32-27.4,82-58,10.04-16.45,11.11-36.34,19-56,10.38-25.87,20.21-39.91,23-78,0.93-12.67,9.58-40.96,3-53q9.495-12,19-24c23.79-33.31,43.69-62.01,85-78C4043.99,2601.58,4063.67,2605.35,4079,2599Z\"/>\n  <path class=\"cls-7\" d=\"M4231,920c187.47,13.528,279.71,90.17,362,207,32.95,46.78,65.51,97.62,82,161,168.87-3.05,304.87,40.92,424,90,57.82,23.82,113.84,46.41,165,77q91.485,60.495,183,121c89.75,56.55,180.89,110.73,273,165,54.16,31.91,118.37,53.74,167,91,67.81,51.95,140.53,131.99,194,199,36.09,45.24,76.85,87.59,112,134,72.75,96.05,140.36,192.71,204,299h1c37.47-32.52,105.55-71.6,163-82,50.56-9.15,154.47,41.86,177,64,16.93,16.64,23.82,48.38,4,68,0.33,0.67.67,1.33,1,2,21.72,8.85,31.58,26.28,42,47q8.505,17.505,17,35c11.78,38.54-12.51,59.19-34,74-27.34,18.83-58.65,35.17-96,44h-39c-23.83,4.03-51.41,17.51-66,32l47,47q34.5,36.99,69,74c46.05,57.16,96.44,111.16,141,170q131.49,167.985,263,336,46.5,32.49,93,65,99.495,72.99,199,146c159.38,113.81,307.63,242.33,460,363q66.99,57,134,114l55,52c52.45,42.3,108.79,99.41,151,152,42.62,53.1,96.74,103.41,119,176,11.5,37.5,13.02,80.11,20,122q1.005,24.99,2,50c4.41,28.34,3.52,68.01-1,96l-9,78q-9.495,46.995-19,94,16.005,3.495,32,7c34.14,16.2,143.45,88.04,85,133h2c19.15,11.82,29.36,20.86,25,56q-1.005,9.495-2,19c2.67,9.02,12.73,14.29,15,26,3.13,16.19-5.59,34.37-10,45-27.61,66.59-98.28,69.24-159,32,2.07,85.79,8.85,181.85-13,253-17.84,58.07-58.89,103.29-89,151q-83.49,129.48-167,259-69,112.485-138,225-27,53.49-54,107c-71.11,121.82-147.32,238.88-263,316-97.77,65.18-233.79,85.23-355,127,2.51,28.32,4.03,63.14-1,91-3.5,19.39-11.71,47.72-8,70,3.06,18.41,16.55,27.26,22,44,5.83,17.9,1.32,37.38,6,60q7.995,25.5,16,51c14.83,58.54-21.45,87.7-55,108-16.13,9.76-37.83,20.18-63,15v1c17.56,39.4-41.8,56.85-82,50-41.75-7.11-66.43-22.72-93-44-32.82-26.29-48.14-66.29-57-117-6.92-39.6,1.71-81.76-5-119-4.77-26.49-12.2-48.72-21-71-71.73,36.08-144.46,73.61-223,105-115.58,46.19-241.67,73.55-377,101-173.26,35.14-408.5,26.23-571-10-80.23-17.89-157.45-29.46-233-52-208.89-62.32-407.97-125.58-599-202-486.02-194.43-931.57-429.46-1331-711-119.58-84.28-230.91-176.87-344-267q-76.485-69.99-153-140-19.995-20.505-40-41c-27.74-22.32-55.7-51.27-78-79-30.97-38.51-70.79-70.15-102-109q-25.995-27.99-52-56l-163-193c-157.05-201.6-310.38-406.45-449-627-107.69-171.34-210.37-346-305-532-58.82-115.62-114.57-235.33-155-369-14.27-47.18-16.7-99.46-27-152-28.56-145.69-49.04-363.7-15-519,25.91-118.2,57.73-221.56,101-320,83.34-189.59,245.73-314.43,456-378,60.15-18.19,123.97-22.42,193-34,19.89-3.34,80.19,9.36,83,7q19.5-50.49,39-101c28.13-66.29,59.48-132.54,95-193,168.39-286.59,377.12-528.88,704-657,68.78-26.96,144.69-45.32,226-61q36.495-3.495,73-7c29.89-4.49,71.57-4.79,102,0l79,12,70,18,1-1c1.97-30.68,14.73-63.65,24-90,14.2-40.35,26.97-75.31,51-105,23.7-29.278,124.77-63.8,169-77,26.84-8.012,55.47-11.054,85-16Zm-13,41-37,3q-35.49,7.5-71,15c-35.81,11.218-126.3,43.9-145,68-34.32,44.22-49.69,114.19-64,177q51.495,17.505,103,35c7.93,2.79,31.01,15.17,37,11,26.46-35.18,36.63-87.13,72-113,28.12-20.57,100.44-49.03,145-30,30.86,13.18,50.9,38.9,73,61,12.96,12.96,33.45,24.21,41,42,12.02,28.33.94,76.81,11,108q41.49,8.505,83,17c71.69,17.79,139.49,33.51,202,60-13.16-99.61-56.51-191.48-104-259C4488.54,1048.73,4400.7,961.207,4218,961Zm-595,274-104,12c-72.97,15.92-140.58,32.58-203,59-283.15,119.83-475.3,326.73-628,577-47.95,78.58-87.04,161.9-127,250-4.83,10.64-35.38,82.14-32,87q22.995,12.495,46,25c35.97,22.5,74.77,53.47,101,86q27.495,34.5,55,69,13.005,19.995,26,40c49.07-19.5,142.27-2.42,192,7q34.995,4.005,70,8c66.84,12.77,110.74,36.83,162,63,84.78,43.28,177.24,107.47,234,178,28.26,35.11,64.71,63.45,89,103,16.05,26.13,26.52,57.64,37,89,19.55,58.53,23.96,121.92,36,189,4.75,26.49,11.85,62.32,6,93-7.62,39.97-21.48,66.24-41,93q71.49,72,143,144c136.13,136.12,285.2,262.91,440,380,92.85,70.23,182.91,146,278,214,175.94,125.81,351.44,253.01,529,378q287.475,191.475,575,383c104.19,73.33,209.89,142.48,313,216,85.95,61.29,166.98,129.08,249,194,85.22,67.46,169.15,144.26,236,230,39.96,51.25,73,122.59,89,196,9.27,42.56,10.37,106.25,3,152q-2.505,34.995-5,70Q6380.5,5897,6369,5974q-10.5,45.495-21,91c-7.62,25.02-17.26,46.16-23,75-25.78,129.44-3.15,335.09,54,407,36.34,45.72,129.38,59.64,199,74,41.33,8.52,87.67,8.79,132,16q24.495,1.005,49,2c17.39,2.72,58.33,7.66,73,1,19.86-102.07,103.16-120.78,209-90q15.495-.495,31-1c42.1,6.65,83.45,5.6,108,29q36.495-22.5,73-45c40.66-28.59,77.6-61.23,116-92,60.86-48.76,129.1-121.83,178-183,38.42-48.07,79.96-93.93,116-145,134.27-190.28,239.09-411.17,305-669,18.01-70.44,23.2-144.29,36-222,7.72-46.87,1.46-107.62-6-148-22.18-119.98-48.64-218.16-89-316-146.9-356.11-351.52-652.87-561-946-114.05-159.59-235.38-311.46-353-467q-63.99-79.995-128-160-86.49-109.485-173-219l-93-102c-29.47-36.58-66.43-74.55-103-104q-51.99-48.495-104-97c-133.23-106.41-264.75-216.09-412-309q-107.985-67.5-216-135c-61.5-38.38-124.23-73.22-181-116-75.61-56.98-141.57-125-216-183-213.09-166.06-432.06-332.34-697-445-98.71-41.97-207.58-65.11-326-89-81.64-16.47-167.78-20.34-245-40C3937.07,1304.26,3833.01,1234.88,3623,1235Zm-90,95c256.74-4.48,372.6,109.94,511,221,63.55,51,142.19,131.05,176,210,18.1,42.27,16.64,102.94,26,153q5.505,46.995,11,94c4.55,27.31,3.32,67.31-1,93-7.65,45.46-9.58,83.27-24,120-41.49,105.66-162.67,193.92-268,236-87.59,34.99-250.73,40.84-356,14-41.18-10.5-77.97-25.52-113-41-122.68-54.2-248.32-151.91-327-251-35.95-45.27-75.56-89.23-95-151-23.79-75.56-26.76-194.26-8-279,10.94-49.44,22.9-97.3,41-140,53.96-127.3,141.91-210.64,280-254,31.53-9.9,65.18-14.57,100-21Q3509.505,1332.005,3533,1330Zm1159,14q10.005,44.49,20,89c29.33,8.54,57.91,25.66,84,39,70.65,36.12,136.33,74.24,201,115,145.56,91.74,282.39,194.02,416,298q88.485,75.99,177,152c117.32,90.16,252.79,163.95,380,244,120.05,75.55,230.11,162.35,343,244,11.63-3.31,30.68-19.13,38-28-11.33-36.93-41.39-70.95-61-102-44.02-69.71-94.22-132.59-143-197-39.32-51.93-82.53-99.52-123-150q-30-31.995-60-64c-35.98-44.64-82.99-89.66-130-123-31.5-22.34-73.39-33.42-107-53-74.94-43.66-150-85.51-223-131q-81.495-51.99-163-104c-62.69-41.72-124.05-84.82-197-117C5014.24,1398.76,4876.92,1344.29,4692,1344Zm-1154,26-42,3c-32.11,5.6-63.42,9.09-92,18-128.29,39.98-209.46,113.48-260,231-16.92,39.34-28.89,82.31-39,128-16.88,76.23-18.23,189.4,4,260,20.4,64.78,62.23,108,100,155,70.81,88.13,195.76,181.62,306,230,31.96,14.03,65.63,28.56,103,38,90.56,22.87,253.53,17.59,328-12,92.62-36.81,205.14-112.97,244-203,15.53-35.98,18.44-72.22,26-119,4.01-24.81,5.33-61.57,1-88q-4.995-43.995-10-88c-8.87-46.19-6.03-103.97-23-144-30.82-72.69-103.65-147.17-162-194C3885.54,1475.47,3787.92,1369.53,3538,1370Zm304,136c33.47-.32,62.65,3.76,83,17l30,33q30.99,28.995,62,58,5.505,13.005,11,26,12.495,22.005,25,44c21.33,52.22-17.05,143.43-53,159-31.4,13.6-105.75,35.87-151,22-22.37-6.86-41.31-21.99-59-34-13.69-9.3-30.18-15.94-40-29q-10.5-15.495-21-31c-9.7-12.06-21.99-21.92-30-36-17.98-31.63-15.96-100.38-2-133,18.7-43.69,54.44-72.14,102-87Zm42,40q-4.5,3.495-9,7c0.33,1.67.67,3.33,1,5,3.45,7.78,11.72,7.54,20,5,1.33-2,2.67-4,4-6-0.71-5.26-1.81-5.76-4-9Q3890,1547,3884,1546Zm61,76c-8.99,3.92-17.63,5.7-23,13-16.6,22.59.09,62.44,33,56C3995.89,1683,3993.51,1620.51,3945,1622ZM2386,2249l-54,6c-41.4,7.99-82.33,13.27-120,25-150.32,46.83-271.9,124.16-354,239-84.09,117.63-131.39,265.25-165,434-26.25,131.78-9.38,331.63,14,453q10.995,73.5,22,147c28.51,113.11,77.72,210.15,121,308,37.74,85.33,79.83,168.98,126,248,63.24,108.23,123.97,216.92,190,322,90.68,144.31,188.1,282.89,286,420,81.38,113.97,172.69,219.91,259,329q40.995,46.5,82,93c45.03,56.11,101.71,104.09,146,159,30.39,37.68,73.34,81.64,111,112,55.74,44.94,101.79,102.98,158,148q88.995,72.99,178,146c88.55,66.84,179.6,130.66,271,195,92.32,64.99,190.89,121.32,289,180,292.11,174.73,606.72,323.66,938,460,210.98,86.83,433.93,157.82,670,218l148,30c154.95,33.68,382.02,41.92,547,9,102.1-20.37,198.16-39.72,287-71,75.14-26.46,143.81-55.87,212-86,23.83-10.53,68.49-27.71,85-45q-6-15.495-12-31c-127.11,1.26-253.47-14.5-353-45-51.84-15.88-103.57-33.89-133-72-40.93-53-53.6-124-68-205q-1.995-32.49-4-65v-84l6-81c11.69-60.94,30.78-107.16,44-167,15.39-69.66,15.99-140.38,28-217,6.66-42.49,7.73-106.53,0-149-5.76-31.63-17.3-52.81-28-78-11.2-26.36-18.53-54.16-34-76q-27-32.49-54-65c-39.02-48.59-90.27-95.02-139-134q-49.5-42.495-99-85c-71.3-55.56-142.84-110.12-217-163-310.82-221.61-640.67-425.69-954-646-241.86-170.06-477.91-345.94-712-523-105.02-79.44-201.74-169-304-251q-58.5-54.495-117-109l-92-92q-84.99-84.495-170-169-58.5-57.99-117-116l-242-242q-74.985-75.99-150-152-26.49-27.495-53-55c-34.28-42.53-77.72-77.96-111-122-19.41-25.69-32.58-57.3-50-85C2638.51,2354.4,2540.59,2248.67,2386,2249Zm4171,159q-19.005,6.495-38,13c-35.46,15.51-70.27,37.42-101,59q-42,30.495-84,61c1,1.33,2,2.67,3,4q19.995,16.5,40,33,57,48.99,114,98,27.495,26.49,55,53l60-33c19.66-6.98,39.52-.15,63-5,29.05-6,55.12-21.22,77-35,13.64-8.59,39.53-19.38,33-47-10.17-42.99-37.79-64.32-71-85q-8.505-6-17-12c-17.65-5.89-26.52-3.93-38-14-0.33-3-.67-6-1-9q2.505-4.005,5-8c23.41-7.03,47.96,8.52,70,13,0.33-.67.67-1.33,1-2,4.79-25.38-13.72-33.13-30-43C6660.84,2426.48,6615.97,2407.87,6557,2408Zm-3763,64-18,3v1c11.68,24.07,31.17,40.27,47,60l95,104q27.99,28.5,56,57c0.67-.33,1.33-0.67,2-1,4.15-54.56,99.09-95.93,153-105,20.71-3.48,57.07,11.39,73,18,24.6,10.2,36.86,35.12,55,52q17.505,12,35,24c27.88,21.65,45.93,67.45,57,105,8.6,29.16-8.28,47.22-15,66-24.6,68.71-28.59,78.85-112,89l292,289c16.81-2.46,34.24-80.91,29-112-17.6-104.41-22.07-213.79-67-291-33.03-56.78-84.95-110.67-135-151-28.12-22.65-53.23-49.71-83-71-37.36-26.72-79.56-43.9-121-68-26.11-15.18-56.22-30.35-87-40-26-8.15-58.32-6.56-88-12C2909,2479.29,2855.53,2472.05,2794,2472Zm1285,92c32.34-.41,63.08,3.04,91,8q24.99,2.505,50,5c45.53,11.42,77.09,40.03,99,75,48.17,76.91,38.79,185.39-28,235,1.67,2,3.33,4,5,6,19.42,8.31,35.53,25.16,56,34q20.505,7.005,41,14c78.31,34.28,145.23,91.63,192,158,8.29,11.77,26.9,35.09,24,55-5.08,34.8-84.4,102.49-124,104,5.1,8.56,16.11,19.09,14,34-6.98,49.37-76.24,124.79-120,138-16.29,4.92-45.51,6.74-65,2-42.12-10.24-67.59-44.37-97-68-35.67-28.66-67.69-60.5-103-89l-62-59c-3.75,21.58-18.01,39-29,54-38.7,52.8-100.45,91.61-186,58-47.29-18.58-121.11-64.74-141-109-11.94-26.58-15.61-56.37-22-89-4.45-22.71-11.87-58.99-6-85,3.67-16.25,10.36-31.46,17-45-29.22-33.59-66.06-24.49-88-75-13.51-31.1-27.42-109.96-11-152,12.18-31.18,36.36-53.96,53-81,28.17-45.77,44.97-86.6,102-104,26.82-8.18,93.05-6.46,120,3q21.495,10.005,43,20c12.25,3.12,50.8,3.74,56-2,17.63-8.21,31.04-24.16,51-32q22.005-5.505,44-11Q4067,2565,4079,2564Zm-10,36c-17.01,6.71-35.13,5.59-50,12-35.42,15.26-53.85,45.35-75,75q-8.505,10.5-17,21v24q-3.495,32.49-7,65c-3.58,17.58-14.6,29.43-20,44-7.15,19.31-8.38,38.1-18,54-19.15,31.68-52.39,40.62-84,60q-22.995,17.505-46,35-14.505,6.495-29,13c-22.73,21.57-22.23,78.48-15,117,6.4,34.09,8.63,66.24,24,91,21.87,35.24,87.87,75.4,132,89,88.79,27.35,148.56-53.59,162-119,7.36-35.82-1.92-83.5,14-110,36.26-60.36,97.96-108.86,154-150,39.64-29.1,82.76-58.7,108-102,18.76-32.19,13.75-87.11,0-120C4264.46,2609.17,4193.42,2599.51,4069,2600Zm-894,30q-6.495,3-13,6c-0.67,2.67-1.33,5.33-2,8,1.33,2,2.67,4,4,6,12.29,4.24,23.57,4.52,34-2,0.67-2.67,1.33-5.33,2-8-1.33-2-2.67-4-4-6C3189.42,2631.91,3184.6,2630.04,3175,2630Zm55,76c-10.6,4.59-19.75,6.39-26,15-17.49,24.07,5.41,60.19,37,54C3284.77,2766.42,3281.41,2704.28,3230,2706Zm1033,206c-26.98,32.96-74.13,47.56-100,82,21.29,23.29,36.07,53.45,61,73,71.34,55.96,163.96,84.78,222,154,12.89,1.08,33.38,5.22,47,1,15.88-4.91,77.9-56.65,80-73-38.35-78.89-115.5-141.42-197-177q-20.505-7.005-41-14-24.495-14.505-49-29Zm-143,127q-25.995,30.99-52,62c-7.09,16.85-1.12,61.07-1,81l58,55c40.64,32.75,76.92,70.09,118,103,22.65,18.15,45.7,50.19,77,58,62.2,15.52,100.2-39.47,121-68,6.23-8.54,26.1-28.81,21-43-7.89-15.83-29.61-22.12-40-36-15.18-20.28-27.89-37.9-48-53q-24.495-13.005-49-26-51.99-32.49-104-65C4188.45,3085.36,4158.9,3051.96,4120,3039Zm1888,477c70.7-1.43,102.34,29.62,142,58q36.99,27.495,74,55c15.31,13.52,59.9,59.52,28,84q-11.505,4.995-23,10l8,8c4.96,10.47,13.21,17.57,16,31,6.86,32.99-30.89,80.7-50,92-13.96,8.26-34.35,10.98-53,14-52.35,8.48-87.72-22.9-127-15-50.19,10.1-94.78,35.65-134,59-23.11,13.76-35.38,44.98-46,71-4.59,11.23-6.13,33.98-16,40-2.35,2.1-5.1,3.11-8,2-5.18-.72-5.97-1.25-8-5-16.59-20.33,25.28-91.02,32-104-21.2-27.76-27.6-44.85-36-87q-2.505-20.505-5-41c-6.93-19.38-27.23-30.1-39-45q-14.505-25.005-29-50c-6.52-12.73-32.93-58.89-24-73,11.54-18.24,49.05-27.12,70-36,43.24-18.32,87.04-36.44,136-51q31.5-7.005,63-14Zm1197,11Q7306,3662.48,7407,3798c129.33,181.12,252.21,366.82,368,562,64.35,108.47,122.08,224.65,173,345q23.505,61.995,47,124l15,45c71.61-15.11,157.21-35.87,230-11,14.01-95.31,38.13-218.68,18-330-4.95-27.4-4.91-54.89-14-78-33.2-84.41-100.66-136.17-153-201-37.07-45.93-86.03-89.95-132-127-51-41.1-96.44-90.16-148-131-142.7-113.04-283.59-227.7-430-338Q7293.01,3592.51,7205,3527Zm-1209,15q-16.005,2.505-32,5l-70,18c-57.2,18.05-107.24,46.12-160,67,6.96,26.83,30.35,71.09,46,92,13.47,18,34.79,29.64,44,52q3.495,22.005,7,44c7.05,36.66,13.04,57.34,32,80,47.02-31.46,100.74-61.05,166-73,26.95-4.93,45.4,9.58,66,14,67.23,14.42,121.2-13.12,133-61,8.02-32.53-66.28-79.63-85-93-13.74-9.81-39.46-20.04-27-41,39.62-13.07,74.53,76.66,121,46-1.51-29.79-36.25-48.85-55-63C6127.51,3587.89,6093,3541.87,5996,3542ZM8143,4875c-28.86,12.72-106.14,7.61-127,24,18.8,53.12,26.89,112.91,38,173,2.58,13.99,1.39,67.61,8,75,45.27,52.66,98-19.44,149-8,50.82,11.4,80.32,50.68,134,61,44.88,8.63,63.42-21.91,73-50,1.77-5.19,6.99-16.25,4-25-3.15-9.23-13.64-14.33-15-27-1.54-14.31,5.01-31.49,2-47-31.07-13.78-56.54-27.75-81-47-8.99-7.07-22.5-24.76-5-33,26.83-7.66,43.29,46.66,78,26-0.45-26-29.27-41.22-45-53-13.96-10.45-28.76-25.45-46-32-13.96-5.3-28.37-4.06-41-9C8231.68,4888.42,8199.14,4875.09,8143,4875Zm59,288-20,3c-43.14,16.99-71.28,35.52-121,11-6.8,151.05-36.9,280.43-75,401-88.53,280.14-223.31,501.13-386,705-29.48,36.94-67.53,67.44-97,104-24.17,29.98-56.05,60.89-86,85q-42.495,35.49-85,71c219.92-47.49,327.91-186.92,427-355q39.99-76.485,80-153c93.39-156.19,195.71-305.31,292-458,27.17-43.09,68.22-92.58,84-143,9.45-30.22,5.19-62.78,11-99v-70c-5.41-32.72,3-68.19-6-97Q8211,5165.5,8202,5163ZM6933,6561c-21.18,8.7-37.22,10.72-50,27-66.5,84.73,4.15,164.42,22,257,16.39,85.03-8.59,146.14,38,205,21.89,27.65,64.63,61.64,119,52,12.94-2.29,25.46-1.62,33-9-9.45-32.73-92.51-65.82-114-102,0.71-5.81,1.76-8.67,6-11,11.37-8.83,51.58,16.99,61,23,38.54,24.59,65.78,70.54,121,37,12.92-7.85,26.75-15.64,35-28,22.25-33.35-5.25-79.41-11-111-3.26-17.9,1.37-35.24-4-49l-21-36c-6.93-22.53.19-54.73,4-75,7.41-39.43,8.57-103.66-5-136-10.57-25.18-48.41-24.97-79-30h-48q-13.5-4.995-27-10C6989.29,6559.31,6960.88,6560.9,6933,6561Z\"/>\n</svg>\n"
        },
        {
          "name": "mod_version.go",
          "type": "blob",
          "size": 0.2509765625,
          "content": "//go:build go1.12\n// +build go1.12\n\npackage godog\n\nimport (\n\t\"runtime/debug\"\n)\n\nfunc init() {\n\tif info, available := debug.ReadBuildInfo(); available {\n\t\tif Version == \"v0.0.0-dev\" && info.Main.Version != \"(devel)\" {\n\t\t\tVersion = info.Main.Version\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "options.go",
          "type": "blob",
          "size": 0.3017578125,
          "content": "package godog\n\nimport \"github.com/cucumber/godog/internal/flags\"\n\n// Options are suite run options\n// flags are mapped to these options.\n//\n// It can also be used together with godog.RunWithOptions\n// to run test suite from go source directly\n//\n// See the flags for more details\ntype Options = flags.Options\n"
        },
        {
          "name": "release-notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "run.go",
          "type": "blob",
          "size": 9.029296875,
          "content": "package godog\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"go/build\"\n\t\"io\"\n\t\"io/fs\"\n\t\"math/rand\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\n\tmessages \"github.com/cucumber/messages/go/v21\"\n\n\t\"github.com/cucumber/godog/colors\"\n\t\"github.com/cucumber/godog/formatters\"\n\tifmt \"github.com/cucumber/godog/internal/formatters\"\n\t\"github.com/cucumber/godog/internal/models\"\n\t\"github.com/cucumber/godog/internal/parser\"\n\t\"github.com/cucumber/godog/internal/storage\"\n\t\"github.com/cucumber/godog/internal/utils\"\n)\n\nconst (\n\texitSuccess int = iota\n\texitFailure\n\texitOptionError\n)\n\ntype (\n\ttestSuiteInitializer func(*TestSuiteContext)\n\tscenarioInitializer  func(*ScenarioContext)\n)\n\ntype runner struct {\n\trandomSeed            int64\n\tstopOnFailure, strict bool\n\n\tdefaultContext context.Context\n\ttestingT       *testing.T\n\n\tfeatures []*models.Feature\n\n\ttestSuiteInitializer testSuiteInitializer\n\tscenarioInitializer  scenarioInitializer\n\n\tstorage *storage.Storage\n\tfmt     Formatter\n}\n\nfunc (r *runner) concurrent(rate int) (failed bool) {\n\tvar copyLock sync.Mutex\n\n\tif fmt, ok := r.fmt.(storageFormatter); ok {\n\t\tfmt.SetStorage(r.storage)\n\t}\n\n\ttestSuiteContext := TestSuiteContext{\n\t\tsuite: &suite{\n\t\t\tfmt:            r.fmt,\n\t\t\trandomSeed:     r.randomSeed,\n\t\t\tstrict:         r.strict,\n\t\t\tstorage:        r.storage,\n\t\t\tdefaultContext: r.defaultContext,\n\t\t\ttestingT:       r.testingT,\n\t\t},\n\t}\n\tif r.testSuiteInitializer != nil {\n\t\tr.testSuiteInitializer(&testSuiteContext)\n\t}\n\n\ttestRunStarted := models.TestRunStarted{StartedAt: utils.TimeNowFunc()}\n\tr.storage.MustInsertTestRunStarted(testRunStarted)\n\tr.fmt.TestRunStarted()\n\n\t// run before suite handlers\n\tfor _, f := range testSuiteContext.beforeSuiteHandlers {\n\t\tf()\n\t}\n\n\tqueue := make(chan int, rate)\n\tfor _, ft := range r.features {\n\t\tpickles := make([]*messages.Pickle, len(ft.Pickles))\n\t\tif r.randomSeed != 0 {\n\t\t\tr := rand.New(rand.NewSource(r.randomSeed))\n\t\t\tperm := r.Perm(len(ft.Pickles))\n\t\t\tfor i, v := range perm {\n\t\t\t\tpickles[v] = ft.Pickles[i]\n\t\t\t}\n\t\t} else {\n\t\t\tcopy(pickles, ft.Pickles)\n\t\t}\n\n\t\tfor i, p := range pickles {\n\t\t\tpickle := *p\n\n\t\t\tqueue <- i // reserve space in queue\n\n\t\t\tif i == 0 {\n\t\t\t\tr.fmt.Feature(ft.GherkinDocument, ft.Uri, ft.Content)\n\t\t\t}\n\n\t\t\trunPickle := func(fail *bool, pickle *messages.Pickle) {\n\t\t\t\tdefer func() {\n\t\t\t\t\t<-queue // free a space in queue\n\t\t\t\t}()\n\n\t\t\t\tif r.stopOnFailure && *fail {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Copy base suite.\n\t\t\t\tsuite := *testSuiteContext.suite\n\t\t\t\tif rate > 1 {\n\t\t\t\t\t// if running concurrently, only print at end of scenario to keep\n\t\t\t\t\t// scenario logs segregated\n\t\t\t\t\tffmt := ifmt.WrapOnFlush(testSuiteContext.suite.fmt)\n\t\t\t\t\tsuite.fmt = ffmt\n\t\t\t\t\tdefer ffmt.Flush()\n\t\t\t\t}\n\n\t\t\t\tif r.scenarioInitializer != nil {\n\t\t\t\t\tsc := ScenarioContext{suite: &suite}\n\t\t\t\t\tr.scenarioInitializer(&sc)\n\t\t\t\t}\n\n\t\t\t\terr := suite.runPickle(pickle)\n\t\t\t\tif suite.shouldFail(err) {\n\t\t\t\t\tcopyLock.Lock()\n\t\t\t\t\t*fail = true\n\t\t\t\t\tcopyLock.Unlock()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif rate == 1 {\n\t\t\t\t// Running within the same goroutine for concurrency 1\n\t\t\t\t// to preserve original stacks and simplify debugging.\n\t\t\t\trunPickle(&failed, &pickle)\n\t\t\t} else {\n\t\t\t\tgo runPickle(&failed, &pickle)\n\t\t\t}\n\t\t}\n\t}\n\n\t// wait until last are processed\n\tfor i := 0; i < rate; i++ {\n\t\tqueue <- i\n\t}\n\n\tclose(queue)\n\n\t// run after suite handlers\n\tfor _, f := range testSuiteContext.afterSuiteHandlers {\n\t\tf()\n\t}\n\n\t// print summary\n\tr.fmt.Summary()\n\treturn\n}\n\nfunc runWithOptions(suiteName string, runner runner, opt Options) int {\n\tvar output io.Writer = os.Stdout\n\tif nil != opt.Output {\n\t\toutput = opt.Output\n\t}\n\n\tmultiFmt := ifmt.MultiFormatter{}\n\n\tfor _, formatter := range strings.Split(opt.Format, \",\") {\n\t\tout := output\n\t\tformatterParts := strings.SplitN(formatter, \":\", 2)\n\n\t\tif len(formatterParts) > 1 {\n\t\t\tf, err := os.Create(formatterParts[1])\n\t\t\tif err != nil {\n\t\t\t\terr = fmt.Errorf(\n\t\t\t\t\t`couldn't create file with name: \"%s\", error: %s`,\n\t\t\t\t\tformatterParts[1], err.Error(),\n\t\t\t\t)\n\t\t\t\tfmt.Fprintln(os.Stderr, err)\n\n\t\t\t\treturn exitOptionError\n\t\t\t}\n\n\t\t\tdefer f.Close()\n\n\t\t\tout = f\n\t\t}\n\n\t\tif opt.NoColors {\n\t\t\tout = colors.Uncolored(out)\n\t\t} else {\n\t\t\tout = colors.Colored(out)\n\t\t}\n\n\t\tif nil == formatters.FindFmt(formatterParts[0]) {\n\t\t\tvar names []string\n\t\t\tfor name := range formatters.AvailableFormatters() {\n\t\t\t\tnames = append(names, name)\n\t\t\t}\n\t\t\tfmt.Fprintln(os.Stderr, fmt.Errorf(\n\t\t\t\t`unregistered formatter name: \"%s\", use one of: %s`,\n\t\t\t\topt.Format,\n\t\t\t\tstrings.Join(names, \", \"),\n\t\t\t))\n\t\t\treturn exitOptionError\n\t\t}\n\n\t\tmultiFmt.Add(formatterParts[0], out)\n\t}\n\n\tif opt.ShowStepDefinitions {\n\t\ts := suite{}\n\t\tsc := ScenarioContext{suite: &s}\n\t\trunner.scenarioInitializer(&sc)\n\t\tprintStepDefinitions(s.steps, output)\n\t\treturn exitOptionError\n\t}\n\n\tif len(opt.Paths) == 0 && len(opt.FeatureContents) == 0 {\n\t\tinf, err := func() (fs.FileInfo, error) {\n\t\t\tfile, err := opt.FS.Open(\"features\")\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tdefer file.Close()\n\n\t\t\treturn file.Stat()\n\t\t}()\n\t\tif err == nil && inf.IsDir() {\n\t\t\topt.Paths = []string{\"features\"}\n\t\t}\n\t}\n\n\tif opt.Concurrency < 1 {\n\t\topt.Concurrency = 1\n\t}\n\n\trunner.fmt = multiFmt.FormatterFunc(suiteName, output)\n\topt.FS = storage.FS{FS: opt.FS}\n\n\tif len(opt.FeatureContents) > 0 {\n\t\tfeatures, err := parser.ParseFromBytes(opt.Tags, opt.Dialect, opt.FeatureContents)\n\t\tif err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, err)\n\t\t\treturn exitOptionError\n\t\t}\n\t\trunner.features = append(runner.features, features...)\n\t}\n\n\tif len(opt.Paths) > 0 {\n\t\tfeatures, err := parser.ParseFeatures(opt.FS, opt.Tags, opt.Dialect, opt.Paths)\n\t\tif err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, err)\n\t\t\treturn exitOptionError\n\t\t}\n\t\trunner.features = append(runner.features, features...)\n\t}\n\n\trunner.storage = storage.NewStorage()\n\tfor _, feat := range runner.features {\n\t\trunner.storage.MustInsertFeature(feat)\n\n\t\tfor _, pickle := range feat.Pickles {\n\t\t\trunner.storage.MustInsertPickle(pickle)\n\t\t}\n\t}\n\n\t// user may have specified -1 option to create random seed\n\trunner.randomSeed = opt.Randomize\n\tif runner.randomSeed == -1 {\n\t\trunner.randomSeed = makeRandomSeed()\n\t}\n\n\trunner.stopOnFailure = opt.StopOnFailure\n\trunner.strict = opt.Strict\n\trunner.defaultContext = opt.DefaultContext\n\trunner.testingT = opt.TestingT\n\n\t// store chosen seed in environment, so it could be seen in formatter summary report\n\tos.Setenv(\"GODOG_SEED\", strconv.FormatInt(runner.randomSeed, 10))\n\t// determine tested package\n\t_, filename, _, _ := runtime.Caller(1)\n\tos.Setenv(\"GODOG_TESTED_PACKAGE\", runsFromPackage(filename))\n\n\tfailed := runner.concurrent(opt.Concurrency)\n\n\t// @TODO: should prevent from having these\n\tos.Setenv(\"GODOG_SEED\", \"\")\n\tos.Setenv(\"GODOG_TESTED_PACKAGE\", \"\")\n\tif failed && opt.Format != \"events\" {\n\t\treturn exitFailure\n\t}\n\treturn exitSuccess\n}\n\nfunc runsFromPackage(fp string) string {\n\tdir := filepath.Dir(fp)\n\n\tgopaths := filepath.SplitList(build.Default.GOPATH)\n\tfor _, gp := range gopaths {\n\t\tgp = filepath.Join(gp, \"src\")\n\t\tif strings.Index(dir, gp) == 0 {\n\t\t\treturn strings.TrimLeft(strings.Replace(dir, gp, \"\", 1), string(filepath.Separator))\n\t\t}\n\t}\n\treturn dir\n}\n\n// TestSuite allows for configuration\n// of the Test Suite Execution\ntype TestSuite struct {\n\tName                 string\n\tTestSuiteInitializer func(*TestSuiteContext)\n\tScenarioInitializer  func(*ScenarioContext)\n\tOptions              *Options\n}\n\n// Run will execute the test suite.\n//\n// If options are not set, it will reads\n// all configuration options from flags.\n//\n// The exit codes may vary from:\n//\n//\t0 - success\n//\t1 - failed\n//\t2 - command line usage error\n//\t128 - or higher, os signal related error exit codes\n//\n// If there are flag related errors they will be directed to os.Stderr\nfunc (ts TestSuite) Run() int {\n\tif ts.Options == nil {\n\t\tvar err error\n\t\tts.Options, err = getDefaultOptions()\n\t\tif err != nil {\n\t\t\treturn exitOptionError\n\t\t}\n\t}\n\tif ts.Options.FS == nil {\n\t\tts.Options.FS = storage.FS{}\n\t}\n\tif ts.Options.ShowHelp {\n\t\tflag.CommandLine.Usage()\n\n\t\treturn 0\n\t}\n\n\tr := runner{testSuiteInitializer: ts.TestSuiteInitializer, scenarioInitializer: ts.ScenarioInitializer}\n\treturn runWithOptions(ts.Name, r, *ts.Options)\n}\n\n// RetrieveFeatures will parse and return the features based on test suite option\n// Any modification on the parsed features will not have any impact on the next Run of the Test Suite\nfunc (ts TestSuite) RetrieveFeatures() ([]*models.Feature, error) {\n\topt := ts.Options\n\n\tif opt == nil {\n\t\tvar err error\n\t\topt, err = getDefaultOptions()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif ts.Options.FS == nil {\n\t\tts.Options.FS = storage.FS{}\n\t}\n\n\tif len(opt.Paths) == 0 {\n\t\tinf, err := func() (fs.FileInfo, error) {\n\t\t\tfile, err := opt.FS.Open(\"features\")\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tdefer file.Close()\n\n\t\t\treturn file.Stat()\n\t\t}()\n\t\tif err == nil && inf.IsDir() {\n\t\t\topt.Paths = []string{\"features\"}\n\t\t}\n\t}\n\n\treturn parser.ParseFeatures(opt.FS, opt.Tags, opt.Dialect, opt.Paths)\n}\n\nfunc getDefaultOptions() (*Options, error) {\n\topt := &Options{}\n\topt.Output = colors.Colored(os.Stdout)\n\n\tflagSet := flagSet(opt)\n\tif err := flagSet.Parse(os.Args[1:]); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\treturn nil, err\n\t}\n\n\topt.Paths = flagSet.Args()\n\topt.FS = storage.FS{}\n\n\treturn opt, nil\n}\n"
        },
        {
          "name": "run_progress_test.go",
          "type": "blob",
          "size": 6.6103515625,
          "content": "package godog\n\nimport (\n\t\"bytes\"\n\t\"strings\"\n\t\"testing\"\n\n\tmessages \"github.com/cucumber/messages/go/v21\"\n\n\tgherkin \"github.com/cucumber/gherkin/go/v26\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/cucumber/godog/colors\"\n\t\"github.com/cucumber/godog/internal/formatters\"\n\t\"github.com/cucumber/godog/internal/models\"\n\t\"github.com/cucumber/godog/internal/storage\"\n)\n\nvar basicGherkinFeature = `\nFeature: basic\n\n  Scenario: passing scenario\n\tWhen one\n\tThen two\n`\n\nfunc Test_ProgressFormatterWhenStepPanics(t *testing.T) {\n\tconst path = \"any.feature\"\n\n\tgd, err := gherkin.ParseGherkinDocument(strings.NewReader(basicGherkinFeature), (&messages.Incrementing{}).NewId)\n\trequire.NoError(t, err)\n\n\tgd.Uri = path\n\tft := models.Feature{GherkinDocument: gd}\n\tft.Pickles = gherkin.Pickles(*gd, path, (&messages.Incrementing{}).NewId)\n\n\tvar buf bytes.Buffer\n\tw := colors.Uncolored(&buf)\n\tr := runner{\n\t\tfmt:      formatters.ProgressFormatterFunc(\"progress\", w),\n\t\tfeatures: []*models.Feature{&ft},\n\t\tscenarioInitializer: func(ctx *ScenarioContext) {\n\t\t\tctx.Step(`^one$`, func() error { return nil })\n\t\t\tctx.Step(`^two$`, func() error { panic(\"omg\") })\n\t\t},\n\t}\n\n\tr.storage = storage.NewStorage()\n\tr.storage.MustInsertFeature(&ft)\n\tfor _, pickle := range ft.Pickles {\n\t\tr.storage.MustInsertPickle(pickle)\n\t}\n\n\tfailed := r.concurrent(1)\n\trequire.True(t, failed)\n\n\tactual := buf.String()\n\tassert.Contains(t, actual, \"run_progress_test.go:\")\n}\n\nfunc Test_ProgressFormatterWithPanicInMultistep(t *testing.T) {\n\tconst path = \"any.feature\"\n\n\tgd, err := gherkin.ParseGherkinDocument(strings.NewReader(basicGherkinFeature), (&messages.Incrementing{}).NewId)\n\trequire.NoError(t, err)\n\n\tgd.Uri = path\n\tft := models.Feature{GherkinDocument: gd}\n\tft.Pickles = gherkin.Pickles(*gd, path, (&messages.Incrementing{}).NewId)\n\n\tvar buf bytes.Buffer\n\tw := colors.Uncolored(&buf)\n\tr := runner{\n\t\tfmt:      formatters.ProgressFormatterFunc(\"progress\", w),\n\t\tfeatures: []*models.Feature{&ft},\n\t\tscenarioInitializer: func(ctx *ScenarioContext) {\n\t\t\tctx.Step(`^sub1$`, func() error { panic(\"DELIBERATE FAILURE\") })\n\t\t\tctx.Step(`^sub-sub$`, func() error { return nil })\n\t\t\tctx.Step(`^sub2$`, func() Steps { return Steps{\"sub-sub\", \"sub1\", \"one\"} })\n\t\t\tctx.Step(`^one$`, func() error { return nil })\n\t\t\tctx.Step(`^two$`, func() Steps { return []string{\"sub1\", \"sub2\"} })\n\t\t},\n\t}\n\n\tr.storage = storage.NewStorage()\n\tr.storage.MustInsertFeature(&ft)\n\tfor _, pickle := range ft.Pickles {\n\t\tr.storage.MustInsertPickle(pickle)\n\t}\n\n\tfailed := r.concurrent(1)\n\trequire.True(t, failed)\n}\n\nfunc Test_ProgressFormatterMultistepTemplates(t *testing.T) {\n\tconst path = \"any.feature\"\n\n\tgd, err := gherkin.ParseGherkinDocument(strings.NewReader(basicGherkinFeature), (&messages.Incrementing{}).NewId)\n\trequire.NoError(t, err)\n\n\tgd.Uri = path\n\tft := models.Feature{GherkinDocument: gd}\n\tft.Pickles = gherkin.Pickles(*gd, path, (&messages.Incrementing{}).NewId)\n\n\tvar buf bytes.Buffer\n\tw := colors.Uncolored(&buf)\n\tr := runner{\n\t\tfmt:      formatters.ProgressFormatterFunc(\"progress\", w),\n\t\tfeatures: []*models.Feature{&ft},\n\t\tscenarioInitializer: func(ctx *ScenarioContext) {\n\t\t\tctx.Step(`^sub-sub$`, func() error { return nil })\n\t\t\tctx.Step(`^substep$`, func() Steps { return Steps{\"sub-sub\", `unavailable \"John\" cost 5`, \"one\", \"three\"} })\n\t\t\tctx.Step(`^one$`, func() error { return nil })\n\t\t\tctx.Step(`^(t)wo$`, func(s string) Steps { return Steps{\"undef\", \"substep\"} })\n\t\t},\n\t}\n\n\tr.storage = storage.NewStorage()\n\tr.storage.MustInsertFeature(&ft)\n\tfor _, pickle := range ft.Pickles {\n\t\tr.storage.MustInsertPickle(pickle)\n\t}\n\n\tfailed := r.concurrent(1)\n\trequire.False(t, failed)\n\n\texpected := `.U 2\n\n\n1 scenarios (1 undefined)\n2 steps (1 passed, 1 undefined)\n0s\n\nYou can implement step definitions for undefined steps with these snippets:\n\nfunc three() error {\n\treturn godog.ErrPending\n}\n\nfunc unavailableCost(arg1 string, arg2 int) error {\n\treturn godog.ErrPending\n}\n\nfunc undef() error {\n\treturn godog.ErrPending\n}\n\nfunc InitializeScenario(ctx *godog.ScenarioContext) {\n\tctx.Step(` + \"`^three$`\" + `, three)\n\tctx.Step(` + \"`^unavailable \\\"([^\\\"]*)\\\" cost (\\\\d+)$`\" + `, unavailableCost)\n\tctx.Step(` + \"`^undef$`\" + `, undef)\n}\n\n`\n\n\tactual := buf.String()\n\tassert.Equal(t, expected, actual)\n}\n\nfunc Test_ProgressFormatterWhenMultiStepHasArgument(t *testing.T) {\n\tconst path = \"any.feature\"\n\n\tvar featureSource = `\nFeature: basic\n\n  Scenario: passing scenario\n\tWhen one\n\tThen two:\n\t\"\"\"\n\ttext\n\t\"\"\"\n`\n\n\tgd, err := gherkin.ParseGherkinDocument(strings.NewReader(featureSource), (&messages.Incrementing{}).NewId)\n\trequire.NoError(t, err)\n\n\tgd.Uri = path\n\tft := models.Feature{GherkinDocument: gd}\n\tft.Pickles = gherkin.Pickles(*gd, path, (&messages.Incrementing{}).NewId)\n\n\tvar buf bytes.Buffer\n\tw := colors.Uncolored(&buf)\n\tr := runner{\n\t\tfmt:      formatters.ProgressFormatterFunc(\"progress\", w),\n\t\tfeatures: []*models.Feature{&ft},\n\t\tscenarioInitializer: func(ctx *ScenarioContext) {\n\t\t\tctx.Step(`^one$`, func() error { return nil })\n\t\t\tctx.Step(`^two:$`, func(doc *messages.PickleDocString) Steps { return Steps{\"one\"} })\n\t\t},\n\t}\n\n\tr.storage = storage.NewStorage()\n\tr.storage.MustInsertFeature(&ft)\n\tfor _, pickle := range ft.Pickles {\n\t\tr.storage.MustInsertPickle(pickle)\n\t}\n\n\tfailed := r.concurrent(1)\n\n\trequire.False(t, failed)\n}\n\nfunc Test_ProgressFormatterWhenMultiStepHasStepWithArgument(t *testing.T) {\n\tconst path = \"any.feature\"\n\n\tvar featureSource = `\nFeature: basic\n\n  Scenario: passing scenario\n\tWhen one\n\tThen two`\n\n\tgd, err := gherkin.ParseGherkinDocument(strings.NewReader(featureSource), (&messages.Incrementing{}).NewId)\n\trequire.NoError(t, err)\n\n\tgd.Uri = path\n\tft := models.Feature{GherkinDocument: gd}\n\tft.Pickles = gherkin.Pickles(*gd, path, (&messages.Incrementing{}).NewId)\n\n\tvar subStep = `three:\n\t\"\"\"\n\tcontent\n\t\"\"\"`\n\n\tvar buf bytes.Buffer\n\tw := colors.Uncolored(&buf)\n\tr := runner{\n\t\tfmt:      formatters.ProgressFormatterFunc(\"progress\", w),\n\t\tfeatures: []*models.Feature{&ft},\n\t\tscenarioInitializer: func(ctx *ScenarioContext) {\n\t\t\tctx.Step(`^one$`, func() error { return nil })\n\t\t\tctx.Step(`^two$`, func() Steps { return Steps{subStep} })\n\t\t\tctx.Step(`^three:$`, func(doc *messages.PickleDocString) error { return nil })\n\t\t},\n\t}\n\n\tr.storage = storage.NewStorage()\n\tr.storage.MustInsertFeature(&ft)\n\tfor _, pickle := range ft.Pickles {\n\t\tr.storage.MustInsertPickle(pickle)\n\t}\n\n\tfailed := r.concurrent(1)\n\trequire.True(t, failed)\n\n\texpected := `.F 2\n\n\n--- Failed steps:\n\n  Scenario: passing scenario # any.feature:4\n    Then two # any.feature:6\n      Error: nested steps cannot be multiline and have table or content body argument\n\n\n1 scenarios (1 failed)\n2 steps (1 passed, 1 failed)\n0s\n`\n\n\tactual := buf.String()\n\tassert.Equal(t, expected, actual)\n}\n"
        },
        {
          "name": "run_test.go",
          "type": "blob",
          "size": 20.677734375,
          "content": "package godog\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/fs\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n\t\"testing/fstest\"\n\n\tgherkin \"github.com/cucumber/gherkin/go/v26\"\n\tmessages \"github.com/cucumber/messages/go/v21\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/cucumber/godog/colors\"\n\t\"github.com/cucumber/godog/internal/formatters\"\n\t\"github.com/cucumber/godog/internal/models\"\n\t\"github.com/cucumber/godog/internal/storage\"\n)\n\nfunc okStep() error {\n\treturn nil\n}\n\nfunc TestPrintsStepDefinitions(t *testing.T) {\n\tvar buf bytes.Buffer\n\tw := colors.Uncolored(&buf)\n\ts := suite{}\n\tctx := ScenarioContext{suite: &s}\n\n\tsteps := []string{\n\t\t\"^passing step$\",\n\t\t`^with name \"([^\"])\"`,\n\t}\n\n\tfor _, step := range steps {\n\t\tctx.Step(step, okStep)\n\t}\n\n\tprintStepDefinitions(s.steps, w)\n\n\tout := buf.String()\n\tref := `okStep`\n\tfor i, def := range strings.Split(strings.TrimSpace(out), \"\\n\") {\n\t\tif idx := strings.Index(def, steps[i]); idx == -1 {\n\t\t\tt.Fatalf(`step \"%s\" was not found in output`, steps[i])\n\t\t}\n\t\tif idx := strings.Index(def, ref); idx == -1 {\n\t\t\tt.Fatalf(`step definition reference \"%s\" was not found in output: \"%s\"`, ref, def)\n\t\t}\n\t}\n}\n\nfunc TestPrintsNoStepDefinitionsIfNoneFound(t *testing.T) {\n\tvar buf bytes.Buffer\n\tw := colors.Uncolored(&buf)\n\ts := &suite{}\n\n\tprintStepDefinitions(s.steps, w)\n\n\tout := strings.TrimSpace(buf.String())\n\tassert.Equal(t, \"there were no contexts registered, could not find any step definition..\", out)\n}\n\nfunc Test_FailsOrPassesBasedOnStrictModeWhenHasPendingSteps(t *testing.T) {\n\tconst path = \"any.feature\"\n\n\tgd, err := gherkin.ParseGherkinDocument(strings.NewReader(basicGherkinFeature), (&messages.Incrementing{}).NewId)\n\trequire.NoError(t, err)\n\n\tgd.Uri = path\n\tft := models.Feature{GherkinDocument: gd}\n\tft.Pickles = gherkin.Pickles(*gd, path, (&messages.Incrementing{}).NewId)\n\n\tvar beforeScenarioFired, afterScenarioFired int\n\n\tr := runner{\n\t\tfmt:      formatters.ProgressFormatterFunc(\"progress\", ioutil.Discard),\n\t\tfeatures: []*models.Feature{&ft},\n\t\ttestSuiteInitializer: func(ctx *TestSuiteContext) {\n\t\t\tctx.ScenarioContext().Before(func(ctx context.Context, sc *Scenario) (context.Context, error) {\n\t\t\t\tbeforeScenarioFired++\n\t\t\t\treturn ctx, nil\n\t\t\t})\n\n\t\t\tctx.ScenarioContext().After(func(ctx context.Context, sc *Scenario, err error) (context.Context, error) {\n\t\t\t\tafterScenarioFired++\n\t\t\t\treturn ctx, nil\n\t\t\t})\n\t\t},\n\t\tscenarioInitializer: func(ctx *ScenarioContext) {\n\t\t\tctx.Step(`^one$`, func() error { return nil })\n\t\t\tctx.Step(`^two$`, func() error { return ErrPending })\n\t\t},\n\t\ttestingT: t,\n\t}\n\n\tr.storage = storage.NewStorage()\n\tr.storage.MustInsertFeature(&ft)\n\tfor _, pickle := range ft.Pickles {\n\t\tr.storage.MustInsertPickle(pickle)\n\t}\n\n\tfailed := r.concurrent(1)\n\trequire.False(t, r.testingT.Failed())\n\trequire.False(t, failed)\n\tassert.Equal(t, 1, beforeScenarioFired)\n\tassert.Equal(t, 1, afterScenarioFired)\n\n\t// avoid t is Failed because this testcase Failed\n\tr.testingT = nil\n\tr.strict = true\n\tfailed = r.concurrent(1)\n\trequire.True(t, failed)\n\tassert.Equal(t, 2, beforeScenarioFired)\n\tassert.Equal(t, 2, afterScenarioFired)\n}\n\nfunc Test_FailsOrPassesBasedOnStrictModeWhenHasUndefinedSteps(t *testing.T) {\n\tconst path = \"any.feature\"\n\n\tgd, err := gherkin.ParseGherkinDocument(strings.NewReader(basicGherkinFeature), (&messages.Incrementing{}).NewId)\n\trequire.NoError(t, err)\n\n\tgd.Uri = path\n\tft := models.Feature{GherkinDocument: gd}\n\tft.Pickles = gherkin.Pickles(*gd, path, (&messages.Incrementing{}).NewId)\n\n\tr := runner{\n\t\tfmt:      formatters.ProgressFormatterFunc(\"progress\", ioutil.Discard),\n\t\tfeatures: []*models.Feature{&ft},\n\t\tscenarioInitializer: func(ctx *ScenarioContext) {\n\t\t\tctx.Step(`^one$`, func() error { return nil })\n\t\t\t// two - is undefined\n\t\t},\n\t}\n\n\tr.storage = storage.NewStorage()\n\tr.storage.MustInsertFeature(&ft)\n\tfor _, pickle := range ft.Pickles {\n\t\tr.storage.MustInsertPickle(pickle)\n\t}\n\n\tfailed := r.concurrent(1)\n\trequire.False(t, failed)\n\n\tr.strict = true\n\tfailed = r.concurrent(1)\n\trequire.True(t, failed)\n}\n\nfunc Test_ShouldFailOnError(t *testing.T) {\n\tconst path = \"any.feature\"\n\n\tgd, err := gherkin.ParseGherkinDocument(strings.NewReader(basicGherkinFeature), (&messages.Incrementing{}).NewId)\n\trequire.NoError(t, err)\n\n\tgd.Uri = path\n\tft := models.Feature{GherkinDocument: gd}\n\tft.Pickles = gherkin.Pickles(*gd, path, (&messages.Incrementing{}).NewId)\n\n\tr := runner{\n\t\tfmt:      formatters.ProgressFormatterFunc(\"progress\", ioutil.Discard),\n\t\tfeatures: []*models.Feature{&ft},\n\t\tscenarioInitializer: func(ctx *ScenarioContext) {\n\t\t\tctx.Step(`^two$`, func() error { return fmt.Errorf(\"error\") })\n\t\t\tctx.Step(`^one$`, func() error { return nil })\n\t\t},\n\t}\n\n\tr.storage = storage.NewStorage()\n\tr.storage.MustInsertFeature(&ft)\n\tfor _, pickle := range ft.Pickles {\n\t\tr.storage.MustInsertPickle(pickle)\n\t}\n\n\tfailed := r.concurrent(1)\n\trequire.True(t, failed)\n}\n\nfunc Test_FailsWithUnknownFormatterOptionError(t *testing.T) {\n\tstderr, closer := bufErrorPipe(t)\n\tdefer closer()\n\tdefer stderr.Close()\n\n\topts := Options{\n\t\tFormat: \"unknown\",\n\t\tPaths:  []string{\"features/load:6\"},\n\t\tOutput: ioutil.Discard,\n\t}\n\n\tstatus := TestSuite{\n\t\tName:                \"fails\",\n\t\tScenarioInitializer: func(_ *ScenarioContext) {},\n\t\tOptions:             &opts,\n\t}.Run()\n\n\trequire.Equal(t, exitOptionError, status)\n\n\tcloser()\n\n\tb, err := ioutil.ReadAll(stderr)\n\trequire.NoError(t, err)\n\n\tout := strings.TrimSpace(string(b))\n\tassert.Contains(t, out, `unregistered formatter name: \"unknown\", use one of`)\n}\n\nfunc Test_FailsWithOptionErrorWhenLookingForFeaturesInUnavailablePath(t *testing.T) {\n\tstderr, closer := bufErrorPipe(t)\n\tdefer closer()\n\tdefer stderr.Close()\n\n\topts := Options{\n\t\tFormat: \"progress\",\n\t\tPaths:  []string{\"unavailable\"},\n\t\tOutput: ioutil.Discard,\n\t}\n\n\tstatus := TestSuite{\n\t\tName:                \"fails\",\n\t\tScenarioInitializer: func(_ *ScenarioContext) {},\n\t\tOptions:             &opts,\n\t}.Run()\n\n\trequire.Equal(t, exitOptionError, status)\n\n\tcloser()\n\n\tb, err := ioutil.ReadAll(stderr)\n\trequire.NoError(t, err)\n\n\tout := strings.TrimSpace(string(b))\n\tassert.Equal(t, `feature path \"unavailable\" is not available`, out)\n}\n\nfunc Test_ByDefaultRunsFeaturesPath(t *testing.T) {\n\topts := Options{\n\t\tFormat: \"progress\",\n\t\tOutput: ioutil.Discard,\n\t\tStrict: true,\n\t}\n\n\tstatus := TestSuite{\n\t\tName:                \"fails\",\n\t\tScenarioInitializer: func(_ *ScenarioContext) {},\n\t\tOptions:             &opts,\n\t}.Run()\n\n\t// should fail in strict mode due to undefined steps\n\tassert.Equal(t, exitFailure, status)\n\n\topts.Strict = false\n\tstatus = TestSuite{\n\t\tName:                \"succeeds\",\n\t\tScenarioInitializer: func(_ *ScenarioContext) {},\n\t\tOptions:             &opts,\n\t}.Run()\n\n\t// should succeed in non strict mode due to undefined steps\n\tassert.Equal(t, exitSuccess, status)\n}\n\nfunc Test_RunsWithFeatureContentsOption(t *testing.T) {\n\titems, err := ioutil.ReadDir(\"./features\")\n\trequire.NoError(t, err)\n\n\tvar featureContents []Feature\n\tfor _, item := range items {\n\t\tif !item.IsDir() && strings.Contains(item.Name(), \".feature\") {\n\t\t\tcontents, err := os.ReadFile(\"./features/\" + item.Name())\n\t\t\trequire.NoError(t, err)\n\t\t\tfeatureContents = append(featureContents, Feature{\n\t\t\t\tName:     item.Name(),\n\t\t\t\tContents: contents,\n\t\t\t})\n\t\t}\n\t}\n\n\topts := Options{\n\t\tFormat:          \"progress\",\n\t\tOutput:          ioutil.Discard,\n\t\tStrict:          true,\n\t\tFeatureContents: featureContents,\n\t}\n\n\tstatus := TestSuite{\n\t\tName:                \"fails\",\n\t\tScenarioInitializer: func(_ *ScenarioContext) {},\n\t\tOptions:             &opts,\n\t}.Run()\n\n\t// should fail in strict mode due to undefined steps\n\tassert.Equal(t, exitFailure, status)\n\n\topts.Strict = false\n\tstatus = TestSuite{\n\t\tName:                \"succeeds\",\n\t\tScenarioInitializer: func(_ *ScenarioContext) {},\n\t\tOptions:             &opts,\n\t}.Run()\n\n\t// should succeed in non strict mode due to undefined steps\n\tassert.Equal(t, exitSuccess, status)\n}\n\nfunc Test_RunsWithFeatureContentsAndPathsOptions(t *testing.T) {\n\tfeatureContents := []Feature{\n\t\t{\n\t\t\tName: \"MySuperCoolFeature\",\n\t\t\tContents: []byte(`\nFeature: run features from bytes\n  Scenario: should run a normal feature\n    Given a feature \"normal.feature\" file:\n      \"\"\"\n      Feature: normal feature\n\n        Scenario: parse a scenario\n          Given a feature path \"features/load.feature:6\"\n          When I parse features\n          Then I should have 1 scenario registered\n      \"\"\"\n    When I run feature suite\n    Then the suite should have passed\n    And the following steps should be passed:\n      \"\"\"\n      a feature path \"features/load.feature:6\"\n      I parse features\n      I should have 1 scenario registered\n      \"\"\"`),\n\t\t},\n\t}\n\n\topts := Options{\n\t\tFormat:          \"progress\",\n\t\tOutput:          ioutil.Discard,\n\t\tPaths:           []string{\"./features\"},\n\t\tFeatureContents: featureContents,\n\t}\n\n\tstatus := TestSuite{\n\t\tName:                \"succeeds\",\n\t\tScenarioInitializer: func(_ *ScenarioContext) {},\n\t\tOptions:             &opts,\n\t}.Run()\n\n\tassert.Equal(t, exitSuccess, status)\n}\n\nfunc bufErrorPipe(t *testing.T) (io.ReadCloser, func()) {\n\tstderr := os.Stderr\n\tr, w, err := os.Pipe()\n\trequire.NoError(t, err)\n\n\tos.Stderr = w\n\treturn r, func() {\n\t\tw.Close()\n\t\tos.Stderr = stderr\n\t}\n}\n\nfunc Test_RandomizeRun_WithStaticSeed(t *testing.T) {\n\tconst noRandomFlag = 0\n\tconst noConcurrencyFlag = 1\n\tconst formatter = \"pretty\"\n\tconst featurePath = \"internal/formatters/formatter-tests/features/with_few_empty_scenarios.feature\"\n\n\tfmtOutputScenarioInitializer := func(ctx *ScenarioContext) {\n\t\tctx.Step(`^(?:a )?failing step`, failingStepDef)\n\t\tctx.Step(`^(?:a )?pending step$`, pendingStepDef)\n\t\tctx.Step(`^(?:a )?passing step$`, passingStepDef)\n\t\tctx.Step(`^odd (\\d+) and even (\\d+) number$`, oddEvenStepDef)\n\t}\n\n\texpectedStatus, expectedOutput := testRun(t,\n\t\tfmtOutputScenarioInitializer,\n\t\tformatter, noConcurrencyFlag,\n\t\tnoRandomFlag, []string{featurePath},\n\t)\n\n\tconst staticSeed int64 = 1\n\tactualStatus, actualOutput := testRun(t,\n\t\tfmtOutputScenarioInitializer,\n\t\tformatter, noConcurrencyFlag,\n\t\tstaticSeed, []string{featurePath},\n\t)\n\n\tactualSeed := parseSeed(actualOutput)\n\tassert.Equal(t, staticSeed, actualSeed)\n\n\t// Removes \"Randomized with seed: <seed>\" part of the output\n\tactualOutputSplit := strings.Split(actualOutput, \"\\n\")\n\tactualOutputSplit = actualOutputSplit[:len(actualOutputSplit)-2]\n\tactualOutputReduced := strings.Join(actualOutputSplit, \"\\n\")\n\n\tassert.Equal(t, expectedStatus, actualStatus)\n\tassert.NotEqual(t, expectedOutput, actualOutputReduced)\n\tassertOutput(t, formatter, expectedOutput, actualOutputReduced)\n}\n\nfunc Test_RandomizeRun_RerunWithSeed(t *testing.T) {\n\tconst createRandomSeedFlag = -1\n\tconst noConcurrencyFlag = 1\n\tconst formatter = \"pretty\"\n\tconst featurePath = \"internal/formatters/formatter-tests/features/with_few_empty_scenarios.feature\"\n\n\tfmtOutputScenarioInitializer := func(ctx *ScenarioContext) {\n\t\tctx.Step(`^(?:a )?failing step`, failingStepDef)\n\t\tctx.Step(`^(?:a )?pending step$`, pendingStepDef)\n\t\tctx.Step(`^(?:a )?passing step$`, passingStepDef)\n\t\tctx.Step(`^odd (\\d+) and even (\\d+) number$`, oddEvenStepDef)\n\t}\n\n\texpectedStatus, expectedOutput := testRun(t,\n\t\tfmtOutputScenarioInitializer,\n\t\tformatter, noConcurrencyFlag,\n\t\tcreateRandomSeedFlag, []string{featurePath},\n\t)\n\n\texpectedSeed := parseSeed(expectedOutput)\n\tassert.NotZero(t, expectedSeed)\n\n\tactualStatus, actualOutput := testRun(t,\n\t\tfmtOutputScenarioInitializer,\n\t\tformatter, noConcurrencyFlag,\n\t\texpectedSeed, []string{featurePath},\n\t)\n\n\tactualSeed := parseSeed(actualOutput)\n\n\tassert.Equal(t, expectedSeed, actualSeed)\n\tassert.Equal(t, expectedStatus, actualStatus)\n\tassert.Equal(t, expectedOutput, actualOutput)\n}\n\nfunc Test_FormatOutputRun(t *testing.T) {\n\tconst noRandomFlag = 0\n\tconst noConcurrencyFlag = 1\n\tconst formatter = \"junit\"\n\tconst featurePath = \"internal/formatters/formatter-tests/features/with_few_empty_scenarios.feature\"\n\n\tfmtOutputScenarioInitializer := func(ctx *ScenarioContext) {\n\t\tctx.Step(`^(?:a )?failing step`, failingStepDef)\n\t\tctx.Step(`^(?:a )?pending step$`, pendingStepDef)\n\t\tctx.Step(`^(?:a )?passing step$`, passingStepDef)\n\t\tctx.Step(`^odd (\\d+) and even (\\d+) number$`, oddEvenStepDef)\n\t}\n\n\texpectedStatus, expectedOutput := testRun(t,\n\t\tfmtOutputScenarioInitializer,\n\t\tformatter, noConcurrencyFlag,\n\t\tnoRandomFlag, []string{featurePath},\n\t)\n\n\tdir := filepath.Join(os.TempDir(), t.Name())\n\terr := os.MkdirAll(dir, 0755)\n\trequire.NoError(t, err)\n\n\tdefer os.RemoveAll(dir)\n\n\tfile := filepath.Join(dir, \"result.xml\")\n\n\tactualStatus, actualOutput := testRun(t,\n\t\tfmtOutputScenarioInitializer,\n\t\tformatter+\":\"+file, noConcurrencyFlag,\n\t\tnoRandomFlag, []string{featurePath},\n\t)\n\n\tresult, err := ioutil.ReadFile(file)\n\trequire.NoError(t, err)\n\tactualOutputFromFile := string(result)\n\n\tassert.Equal(t, expectedStatus, actualStatus)\n\tassert.Empty(t, actualOutput)\n\tassert.Equal(t, expectedOutput, actualOutputFromFile)\n}\n\nfunc Test_FormatOutputRun_Error(t *testing.T) {\n\tconst noRandomFlag = 0\n\tconst noConcurrencyFlag = 1\n\tconst formatter = \"junit\"\n\tconst featurePath = \"internal/formatters/formatter-tests/features/with_few_empty_scenarios.feature\"\n\n\tfmtOutputScenarioInitializer := func(ctx *ScenarioContext) {\n\t\tctx.Step(`^(?:a )?failing step`, failingStepDef)\n\t\tctx.Step(`^(?:a )?pending step$`, pendingStepDef)\n\t\tctx.Step(`^(?:a )?passing step$`, passingStepDef)\n\t\tctx.Step(`^odd (\\d+) and even (\\d+) number$`, oddEvenStepDef)\n\t}\n\n\texpectedStatus, expectedOutput := exitOptionError, \"\"\n\n\tdir := filepath.Join(os.TempDir(), t.Name())\n\tfile := filepath.Join(dir, \"result.xml\")\n\n\t// next test is expected to log: couldn't create file with name: )\n\tactualStatus, actualOutput := testRun(t,\n\t\tfmtOutputScenarioInitializer,\n\t\tformatter+\":\"+file, noConcurrencyFlag,\n\t\tnoRandomFlag, []string{featurePath},\n\t)\n\n\tassert.Equal(t, expectedStatus, actualStatus)\n\tassert.Equal(t, expectedOutput, actualOutput)\n\n\t_, err := ioutil.ReadFile(file)\n\tassert.Error(t, err)\n}\n\nfunc Test_AllFeaturesRun(t *testing.T) {\n\tconst concurrency = 100\n\tconst noRandomFlag = 0\n\tconst format = \"progress\"\n\n\tconst expected = `...................................................................... 70\n...................................................................... 140\n...................................................................... 210\n...................................................................... 280\n...................................................................... 350\n...................................................................... 420\n...                                                                    423\n\n\n108 scenarios (108 passed)\n423 steps (423 passed)\n0s\n`\n\n\tactualStatus, actualOutput := testRun(t,\n\t\tInitializeScenario,\n\t\tformat, concurrency,\n\t\tnoRandomFlag, []string{\"features\"},\n\t)\n\n\tassert.Equal(t, exitSuccess, actualStatus)\n\tassert.Equal(t, expected, actualOutput)\n}\n\nfunc Test_AllFeaturesRunAsSubtests(t *testing.T) {\n\tconst concurrency = 100\n\tconst noRandomFlag = 0\n\tconst format = \"progress\"\n\n\tconst expected = `...................................................................... 70\n...................................................................... 140\n...................................................................... 210\n...................................................................... 280\n...................................................................... 350\n...................................................................... 420\n...                                                                    423\n\n\n108 scenarios (108 passed)\n423 steps (423 passed)\n0s\n`\n\n\tactualStatus, actualOutput := testRunWithOptions(\n\t\tt,\n\t\tOptions{\n\t\t\tFormat:      format,\n\t\t\tConcurrency: concurrency,\n\t\t\tPaths:       []string{\"features\"},\n\t\t\tRandomize:   noRandomFlag,\n\t\t\tTestingT:    t,\n\t\t},\n\t\tInitializeScenario,\n\t)\n\n\tassert.Equal(t, exitSuccess, actualStatus)\n\tassert.Equal(t, expected, actualOutput)\n}\n\nfunc Test_FormatterConcurrencyRun(t *testing.T) {\n\tformatters := []string{\n\t\t\"progress\",\n\t\t\"junit\",\n\t\t\"pretty\",\n\t\t\"events\",\n\t\t\"cucumber\",\n\t}\n\n\tfeaturePaths := []string{\"internal/formatters/formatter-tests/features\"}\n\n\tconst concurrency = 100\n\tconst noRandomFlag = 0\n\tconst noConcurrency = 1\n\n\tfmtOutputScenarioInitializer := func(ctx *ScenarioContext) {\n\t\tctx.Step(`^(?:a )?failing step`, failingStepDef)\n\t\tctx.Step(`^(?:a )?pending step$`, pendingStepDef)\n\t\tctx.Step(`^(?:a )?passing step$`, passingStepDef)\n\t\tctx.Step(`^odd (\\d+) and even (\\d+) number$`, oddEvenStepDef)\n\t}\n\n\tfor _, formatter := range formatters {\n\t\tt.Run(\n\t\t\tfmt.Sprintf(\"%s/concurrency/%d\", formatter, concurrency),\n\t\t\tfunc(t *testing.T) {\n\t\t\t\texpectedStatus, expectedOutput := testRun(t,\n\t\t\t\t\tfmtOutputScenarioInitializer,\n\t\t\t\t\tformatter, noConcurrency,\n\t\t\t\t\tnoRandomFlag, featurePaths,\n\t\t\t\t)\n\t\t\t\tactualStatus, actualOutput := testRun(t,\n\t\t\t\t\tfmtOutputScenarioInitializer,\n\t\t\t\t\tformatter, concurrency,\n\t\t\t\t\tnoRandomFlag, featurePaths,\n\t\t\t\t)\n\n\t\t\t\tassert.Equal(t, expectedStatus, actualStatus)\n\t\t\t\tassertOutput(t, formatter, expectedOutput, actualOutput)\n\t\t\t},\n\t\t)\n\t}\n}\n\nfunc testRun(\n\tt *testing.T,\n\tscenarioInitializer func(*ScenarioContext),\n\tformat string,\n\tconcurrency int,\n\trandomSeed int64,\n\tfeaturePaths []string,\n) (int, string) {\n\tt.Helper()\n\n\topts := Options{\n\t\tFormat:      format,\n\t\tPaths:       featurePaths,\n\t\tConcurrency: concurrency,\n\t\tRandomize:   randomSeed,\n\t}\n\n\treturn testRunWithOptions(t, opts, scenarioInitializer)\n}\n\nfunc testRunWithOptions(\n\tt *testing.T,\n\topts Options,\n\tscenarioInitializer func(*ScenarioContext),\n) (int, string) {\n\tt.Helper()\n\n\toutput := new(bytes.Buffer)\n\n\topts.Output = output\n\topts.NoColors = true\n\n\tstatus := TestSuite{\n\t\tName:                \"succeed\",\n\t\tScenarioInitializer: scenarioInitializer,\n\t\tOptions:             &opts,\n\t}.Run()\n\n\tactual, err := ioutil.ReadAll(output)\n\trequire.NoError(t, err)\n\n\treturn status, string(actual)\n}\n\nfunc assertOutput(t *testing.T, formatter string, expected, actual string) {\n\tswitch formatter {\n\tcase \"cucumber\", \"junit\", \"pretty\", \"events\":\n\t\texpectedRows := strings.Split(expected, \"\\n\")\n\t\tactualRows := strings.Split(actual, \"\\n\")\n\t\tassert.ElementsMatch(t, expectedRows, actualRows)\n\tcase \"progress\":\n\t\texpectedOutput := parseProgressOutput(expected)\n\t\tactualOutput := parseProgressOutput(actual)\n\n\t\tassert.Equal(t, expectedOutput.passed, actualOutput.passed)\n\t\tassert.Equal(t, expectedOutput.skipped, actualOutput.skipped)\n\t\tassert.Equal(t, expectedOutput.failed, actualOutput.failed)\n\t\tassert.Equal(t, expectedOutput.undefined, actualOutput.undefined)\n\t\tassert.Equal(t, expectedOutput.pending, actualOutput.pending)\n\t\tassert.Equal(t, expectedOutput.noOfStepsPerRow, actualOutput.noOfStepsPerRow)\n\t\tassert.ElementsMatch(t, expectedOutput.bottomRows, actualOutput.bottomRows)\n\t}\n}\n\nfunc parseProgressOutput(output string) (parsed progressOutput) {\n\tmainParts := strings.Split(output, \"\\n\\n\\n\")\n\n\ttopRows := strings.Split(mainParts[0], \"\\n\")\n\tparsed.bottomRows = strings.Split(mainParts[1], \"\\n\")\n\n\tparsed.noOfStepsPerRow = make([]string, len(topRows))\n\tfor idx, row := range topRows {\n\t\trowParts := strings.Split(row, \" \")\n\t\tstepResults := strings.Split(rowParts[0], \"\")\n\t\tparsed.noOfStepsPerRow[idx] = rowParts[1]\n\n\t\tfor _, stepResult := range stepResults {\n\t\t\tswitch stepResult {\n\t\t\tcase \".\":\n\t\t\t\tparsed.passed++\n\t\t\tcase \"-\":\n\t\t\t\tparsed.skipped++\n\t\t\tcase \"F\":\n\t\t\t\tparsed.failed++\n\t\t\tcase \"U\":\n\t\t\t\tparsed.undefined++\n\t\t\tcase \"P\":\n\t\t\t\tparsed.pending++\n\t\t\t}\n\t\t}\n\t}\n\n\treturn parsed\n}\n\ntype progressOutput struct {\n\tpassed          int\n\tskipped         int\n\tfailed          int\n\tundefined       int\n\tpending         int\n\tnoOfStepsPerRow []string\n\tbottomRows      []string\n}\n\nfunc passingStepDef() error { return nil }\n\nfunc oddEvenStepDef(odd, even int) error { return oddOrEven(odd, even) }\n\nfunc oddOrEven(odd, even int) error {\n\tif odd%2 == 0 {\n\t\treturn fmt.Errorf(\"%d is not odd\", odd)\n\t}\n\tif even%2 != 0 {\n\t\treturn fmt.Errorf(\"%d is not even\", even)\n\t}\n\treturn nil\n}\n\nfunc pendingStepDef() error { return ErrPending }\n\nfunc failingStepDef() error { return fmt.Errorf(\"step failed\") }\n\nfunc parseSeed(str string) (seed int64) {\n\tre := regexp.MustCompile(`Randomized with seed: (\\d*)`)\n\tmatch := re.FindStringSubmatch(str)\n\n\tif len(match) > 0 {\n\t\tvar err error\n\t\tif seed, err = strconv.ParseInt(match[1], 10, 64); err != nil {\n\t\t\tseed = 0\n\t\t}\n\t}\n\n\treturn\n}\n\nfunc Test_TestSuite_RetreiveFeatures(t *testing.T) {\n\ttests := map[string]struct {\n\t\tfsys fs.FS\n\n\t\texpFeatures int\n\t}{\n\t\t\"standard features\": {\n\t\t\tfsys: fstest.MapFS{\n\t\t\t\t\"features/test.feature\": {\n\t\t\t\t\tData: []byte(`Feature: test retrieve features\n  To test the feature\n  I must use this feature\n\n  Scenario: Test function RetrieveFeatures\n    Given I create a TestSuite\n\tWhen I call TestSuite.RetrieveFeatures\n\tThen I should have one feature`),\n\t\t\t\t},\n\t\t\t},\n\t\t\texpFeatures: 1,\n\t\t},\n\t}\n\n\tfor name, test := range tests {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tfeatures, err := TestSuite{\n\t\t\t\tName:    \"succeed\",\n\t\t\t\tOptions: &Options{FS: test.fsys},\n\t\t\t}.RetrieveFeatures()\n\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.Equal(t, test.expFeatures, len(features))\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "stacktrace.go",
          "type": "blob",
          "size": 2.900390625,
          "content": "package godog\n\nimport (\n\t\"fmt\"\n\t\"go/build\"\n\t\"io\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"strings\"\n)\n\n// Frame represents a program counter inside a stack frame.\ntype stackFrame uintptr\n\n// pc returns the program counter for this frame;\n// multiple frames may have the same PC value.\nfunc (f stackFrame) pc() uintptr { return uintptr(f) - 1 }\n\n// file returns the full path to the file that contains the\n// function for this Frame's pc.\nfunc (f stackFrame) file() string {\n\tfn := runtime.FuncForPC(f.pc())\n\tif fn == nil {\n\t\treturn \"unknown\"\n\t}\n\tfile, _ := fn.FileLine(f.pc())\n\treturn file\n}\n\nfunc trimGoPath(file string) string {\n\tfor _, p := range filepath.SplitList(build.Default.GOPATH) {\n\t\tfile = strings.Replace(file, filepath.Join(p, \"src\")+string(filepath.Separator), \"\", 1)\n\t}\n\treturn file\n}\n\n// line returns the line number of source code of the\n// function for this Frame's pc.\nfunc (f stackFrame) line() int {\n\tfn := runtime.FuncForPC(f.pc())\n\tif fn == nil {\n\t\treturn 0\n\t}\n\t_, line := fn.FileLine(f.pc())\n\treturn line\n}\n\n// Format formats the frame according to the fmt.Formatter interface.\n//\n//\t%s    source file\n//\t%d    source line\n//\t%n    function name\n//\t%v    equivalent to %s:%d\n//\n// Format accepts flags that alter the printing of some verbs, as follows:\n//\n//\t%+s   path of source file relative to the compile time GOPATH\n//\t%+v   equivalent to %+s:%d\nfunc (f stackFrame) Format(s fmt.State, verb rune) {\n\tfuncname := func(name string) string {\n\t\ti := strings.LastIndex(name, \"/\")\n\t\tname = name[i+1:]\n\t\ti = strings.Index(name, \".\")\n\t\treturn name[i+1:]\n\t}\n\n\tswitch verb {\n\tcase 's':\n\t\tswitch {\n\t\tcase s.Flag('+'):\n\t\t\tpc := f.pc()\n\t\t\tfn := runtime.FuncForPC(pc)\n\t\t\tif fn == nil {\n\t\t\t\tio.WriteString(s, \"unknown\")\n\t\t\t} else {\n\t\t\t\tfile, _ := fn.FileLine(pc)\n\t\t\t\tfmt.Fprintf(s, \"%s\\n\\t%s\", fn.Name(), trimGoPath(file))\n\t\t\t}\n\t\tdefault:\n\t\t\tio.WriteString(s, path.Base(f.file()))\n\t\t}\n\tcase 'd':\n\t\tfmt.Fprintf(s, \"%d\", f.line())\n\tcase 'n':\n\t\tname := runtime.FuncForPC(f.pc()).Name()\n\t\tio.WriteString(s, funcname(name))\n\tcase 'v':\n\t\tf.Format(s, 's')\n\t\tio.WriteString(s, \":\")\n\t\tf.Format(s, 'd')\n\t}\n}\n\n// stack represents a stack of program counters.\ntype stack []uintptr\n\nfunc (s *stack) Format(st fmt.State, verb rune) {\n\tswitch verb {\n\tcase 'v':\n\t\tswitch {\n\t\tcase st.Flag('+'):\n\t\t\tfor _, pc := range *s {\n\t\t\t\tf := stackFrame(pc)\n\t\t\t\tfmt.Fprintf(st, \"\\n%+v\", f)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc callStack() *stack {\n\tconst depth = 32\n\tvar pcs [depth]uintptr\n\tn := runtime.Callers(3, pcs[:])\n\tvar st stack = pcs[0:n]\n\treturn &st\n}\n\n// fundamental is an error that has a message and a stack, but no caller.\ntype traceError struct {\n\tmsg string\n\t*stack\n}\n\nfunc (f *traceError) Error() string { return f.msg }\n\nfunc (f *traceError) Format(s fmt.State, verb rune) {\n\tswitch verb {\n\tcase 'v':\n\t\tif s.Flag('+') {\n\t\t\tio.WriteString(s, f.msg)\n\t\t\tf.stack.Format(s, verb)\n\t\t\treturn\n\t\t}\n\t\tfallthrough\n\tcase 's':\n\t\tio.WriteString(s, f.msg)\n\tcase 'q':\n\t\tfmt.Fprintf(s, \"%q\", f.msg)\n\t}\n}\n"
        },
        {
          "name": "stacktrace_test.go",
          "type": "blob",
          "size": 0.5771484375,
          "content": "package godog\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc callstack1() *stack {\n\treturn callstack2()\n}\n\nfunc callstack2() *stack {\n\treturn callstack3()\n}\n\nfunc callstack3() *stack {\n\tconst depth = 4\n\tvar pcs [depth]uintptr\n\tn := runtime.Callers(1, pcs[:])\n\tvar st stack = pcs[0:n]\n\treturn &st\n}\n\nfunc Test_Stacktrace(t *testing.T) {\n\terr := &traceError{\n\t\tmsg:   \"err msg\",\n\t\tstack: callstack1(),\n\t}\n\n\texpected := \"err msg\"\n\tactual := fmt.Sprintf(\"%s\", err)\n\n\tassert.Equal(t, expected, actual)\n\tassert.NotContains(t, actual, \"stacktrace_test.go\")\n}\n"
        },
        {
          "name": "suite.go",
          "type": "blob",
          "size": 15.994140625,
          "content": "package godog\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"strings\"\n\t\"testing\"\n\n\tmessages \"github.com/cucumber/messages/go/v21\"\n\n\t\"github.com/cucumber/godog/formatters\"\n\t\"github.com/cucumber/godog/internal/models\"\n\t\"github.com/cucumber/godog/internal/storage\"\n\t\"github.com/cucumber/godog/internal/utils\"\n)\n\nvar (\n\terrorInterface   = reflect.TypeOf((*error)(nil)).Elem()\n\tcontextInterface = reflect.TypeOf((*context.Context)(nil)).Elem()\n)\n\n// more than one regex matched the step text\nvar ErrAmbiguous = fmt.Errorf(\"ambiguous step definition\")\n\n// ErrUndefined is returned in case if step definition was not found\nvar ErrUndefined = fmt.Errorf(\"step is undefined\")\n\n// ErrPending should be returned by step definition if\n// step implementation is pending\nvar ErrPending = fmt.Errorf(\"step implementation is pending\")\n\n// ErrSkip should be returned by step definition or a hook if scenario and further steps are to be skipped.\nvar ErrSkip = fmt.Errorf(\"skipped\")\n\n// StepResultStatus describes step result.\ntype StepResultStatus = models.StepResultStatus\n\nconst (\n\t// StepPassed indicates step that passed.\n\tStepPassed StepResultStatus = models.Passed\n\t// StepFailed indicates step that failed.\n\tStepFailed = models.Failed\n\t// StepSkipped indicates step that was skipped.\n\tStepSkipped = models.Skipped\n\t// StepUndefined indicates undefined step.\n\tStepUndefined = models.Undefined\n\t// StepPending indicates step with pending implementation.\n\tStepPending = models.Pending\n\t// StepAmbiguous indicates step text matches more than one step def\n\tStepAmbiguous = models.Ambiguous\n)\n\ntype suite struct {\n\tsteps []*models.StepDefinition\n\n\tfmt     Formatter\n\tstorage *storage.Storage\n\n\tfailed        bool\n\trandomSeed    int64\n\tstopOnFailure bool\n\tstrict        bool\n\n\tdefaultContext context.Context\n\ttestingT       *testing.T\n\n\t// suite event handlers\n\tbeforeScenarioHandlers []BeforeScenarioHook\n\tbeforeStepHandlers     []BeforeStepHook\n\tafterStepHandlers      []AfterStepHook\n\tafterScenarioHandlers  []AfterScenarioHook\n}\n\ntype Attachment struct {\n\tBody      []byte\n\tFileName  string\n\tMediaType string\n}\n\ntype attachmentKey struct{}\n\nfunc Attach(ctx context.Context, attachments ...Attachment) context.Context {\n\texisting := Attachments(ctx)\n\tupdated := append(existing, attachments...)\n\treturn context.WithValue(ctx, attachmentKey{}, updated)\n}\n\nfunc Attachments(ctx context.Context) []Attachment {\n\tv := ctx.Value(attachmentKey{})\n\n\tif v == nil {\n\t\treturn []Attachment{}\n\t}\n\treturn v.([]Attachment)\n}\n\nfunc clearAttach(ctx context.Context) context.Context {\n\treturn context.WithValue(ctx, attachmentKey{}, nil)\n}\n\nfunc pickleAttachments(ctx context.Context) []models.PickleAttachment {\n\n\tpickledAttachments := []models.PickleAttachment{}\n\tattachments := Attachments(ctx)\n\n\tfor _, a := range attachments {\n\t\tpickledAttachments = append(pickledAttachments, models.PickleAttachment{\n\t\t\tName:     a.FileName,\n\t\t\tData:     a.Body,\n\t\t\tMimeType: a.MediaType,\n\t\t})\n\t}\n\n\treturn pickledAttachments\n}\n\nfunc (s *suite) matchStep(step *messages.PickleStep) (*models.StepDefinition, error) {\n\tdef, err := s.matchStepTextAndType(step.Text, step.Type)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif def != nil && step.Argument != nil {\n\t\tdef.Args = append(def.Args, step.Argument)\n\t}\n\treturn def, nil\n}\n\nfunc (s *suite) runStep(ctx context.Context, pickle *Scenario, step *Step, scenarioErr error, isFirst, isLast bool) (rctx context.Context, err error) {\n\tvar match *models.StepDefinition\n\n\trctx = ctx\n\n\t// user multistep definitions may panic\n\tdefer func() {\n\t\tif e := recover(); e != nil {\n\t\t\tpe, isErr := e.(error)\n\t\t\tswitch {\n\t\t\tcase isErr && errors.Is(pe, errStopNow):\n\t\t\t\t// FailNow or SkipNow called on dogTestingT, so clear the error to let the normal\n\t\t\t\t// below getTestingT(ctx).isFailed() call handle the reasons.\n\t\t\t\terr = nil\n\t\t\tcase err != nil:\n\t\t\t\terr = &traceError{\n\t\t\t\t\tmsg:   fmt.Sprintf(\"%s: %v\", err.Error(), e),\n\t\t\t\t\tstack: callStack(),\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\terr = &traceError{\n\t\t\t\t\tmsg:   fmt.Sprintf(\"%v\", e),\n\t\t\t\t\tstack: callStack(),\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tearlyReturn := scenarioErr != nil || errors.Is(err, ErrUndefined)\n\n\t\t// Check for any calls to Fail on dogT\n\t\tif err == nil {\n\t\t\terr = getTestingT(ctx).isFailed()\n\t\t}\n\n\t\tstatus := StepUndefined\n\n\t\tswitch {\n\t\tcase errors.Is(err, ErrAmbiguous):\n\t\t\tstatus = StepAmbiguous\n\t\tcase errors.Is(err, ErrPending):\n\t\t\tstatus = StepPending\n\t\tcase errors.Is(err, ErrSkip), err == nil && scenarioErr != nil:\n\t\t\tstatus = StepSkipped\n\t\tcase errors.Is(err, ErrUndefined):\n\t\t\tstatus = StepUndefined\n\t\tcase err != nil:\n\t\t\tstatus = StepFailed\n\t\tcase err == nil && scenarioErr == nil:\n\t\t\tstatus = StepPassed\n\t\t}\n\n\t\t// Run after step handlers.\n\t\trctx, err = s.runAfterStepHooks(ctx, step, status, err)\n\n\t\t// Trigger after scenario on failing or last step to attach possible hook error to step.\n\t\tif !s.shouldFail(scenarioErr) && (isLast || s.shouldFail(err)) {\n\t\t\trctx, err = s.runAfterScenarioHooks(rctx, pickle, err)\n\t\t}\n\n\t\t// extract any accumulated attachments and clear them\n\t\tpickledAttachments := pickleAttachments(rctx)\n\t\trctx = clearAttach(rctx)\n\n\t\tif earlyReturn {\n\t\t\treturn\n\t\t}\n\n\t\tswitch {\n\t\tcase err == nil:\n\t\t\tsr := models.NewStepResult(models.Passed, pickle.Id, step.Id, match, pickledAttachments, nil)\n\t\t\ts.storage.MustInsertPickleStepResult(sr)\n\t\t\ts.fmt.Passed(pickle, step, match.GetInternalStepDefinition())\n\t\tcase errors.Is(err, ErrPending):\n\t\t\tsr := models.NewStepResult(models.Pending, pickle.Id, step.Id, match, pickledAttachments, nil)\n\t\t\ts.storage.MustInsertPickleStepResult(sr)\n\t\t\ts.fmt.Pending(pickle, step, match.GetInternalStepDefinition())\n\t\tcase errors.Is(err, ErrSkip):\n\t\t\tsr := models.NewStepResult(models.Skipped, pickle.Id, step.Id, match, pickledAttachments, nil)\n\t\t\ts.storage.MustInsertPickleStepResult(sr)\n\t\t\ts.fmt.Skipped(pickle, step, match.GetInternalStepDefinition())\n\t\tcase errors.Is(err, ErrAmbiguous):\n\t\t\tsr := models.NewStepResult(models.Ambiguous, pickle.Id, step.Id, match, pickledAttachments, err)\n\t\t\ts.storage.MustInsertPickleStepResult(sr)\n\t\t\ts.fmt.Ambiguous(pickle, step, match.GetInternalStepDefinition(), err)\n\t\tdefault:\n\t\t\tsr := models.NewStepResult(models.Failed, pickle.Id, step.Id, match, pickledAttachments, err)\n\t\t\ts.storage.MustInsertPickleStepResult(sr)\n\t\t\ts.fmt.Failed(pickle, step, match.GetInternalStepDefinition(), err)\n\t\t}\n\t}()\n\n\t// run before scenario handlers\n\tif isFirst {\n\t\tctx, err = s.runBeforeScenarioHooks(ctx, pickle)\n\t}\n\n\t// run before step handlers\n\tctx, err = s.runBeforeStepHooks(ctx, step, err)\n\n\tvar matchError error\n\tmatch, matchError = s.matchStep(step)\n\n\ts.storage.MustInsertStepDefintionMatch(step.AstNodeIds[0], match)\n\ts.fmt.Defined(pickle, step, match.GetInternalStepDefinition())\n\n\tif err != nil {\n\t\tpickledAttachments := pickleAttachments(ctx)\n\t\tctx = clearAttach(ctx)\n\n\t\tsr := models.NewStepResult(models.Failed, pickle.Id, step.Id, match, pickledAttachments, nil)\n\t\ts.storage.MustInsertPickleStepResult(sr)\n\t\treturn ctx, err\n\t}\n\n\tif matchError != nil {\n\t\treturn ctx, matchError\n\t}\n\n\tif ctx, undef, err := s.maybeUndefined(ctx, step.Text, step.Argument, step.Type); err != nil {\n\t\treturn ctx, err\n\t} else if len(undef) > 0 {\n\t\tif match != nil {\n\t\t\tmatch = &models.StepDefinition{\n\t\t\t\tStepDefinition: formatters.StepDefinition{\n\t\t\t\t\tExpr:    match.Expr,\n\t\t\t\t\tHandler: match.Handler,\n\t\t\t\t\tKeyword: match.Keyword,\n\t\t\t\t},\n\t\t\t\tArgs:         match.Args,\n\t\t\t\tHandlerValue: match.HandlerValue,\n\t\t\t\tNested:       match.Nested,\n\t\t\t\tUndefined:    undef,\n\t\t\t}\n\t\t}\n\n\t\tpickledAttachments := pickleAttachments(ctx)\n\t\tctx = clearAttach(ctx)\n\n\t\tsr := models.NewStepResult(models.Undefined, pickle.Id, step.Id, match, pickledAttachments, nil)\n\t\ts.storage.MustInsertPickleStepResult(sr)\n\n\t\ts.fmt.Undefined(pickle, step, match.GetInternalStepDefinition())\n\t\treturn ctx, fmt.Errorf(\"%w: %s\", ErrUndefined, step.Text)\n\t}\n\n\tif scenarioErr != nil {\n\t\tpickledAttachments := pickleAttachments(ctx)\n\t\tctx = clearAttach(ctx)\n\n\t\tsr := models.NewStepResult(models.Skipped, pickle.Id, step.Id, match, pickledAttachments, nil)\n\t\ts.storage.MustInsertPickleStepResult(sr)\n\n\t\ts.fmt.Skipped(pickle, step, match.GetInternalStepDefinition())\n\t\treturn ctx, nil\n\t}\n\n\tctx, err = s.maybeSubSteps(match.Run(ctx))\n\n\treturn ctx, err\n}\n\nfunc (s *suite) runBeforeStepHooks(ctx context.Context, step *Step, err error) (context.Context, error) {\n\thooksFailed := false\n\n\tfor _, f := range s.beforeStepHandlers {\n\t\thctx, herr := f(ctx, step)\n\t\tif herr != nil {\n\t\t\thooksFailed = true\n\n\t\t\tif err == nil {\n\t\t\t\terr = herr\n\t\t\t} else {\n\t\t\t\terr = fmt.Errorf(\"%v, %w\", herr, err)\n\t\t\t}\n\t\t}\n\n\t\tif hctx != nil {\n\t\t\tctx = hctx\n\t\t}\n\t}\n\n\tif hooksFailed {\n\t\terr = fmt.Errorf(\"before step hook failed: %w\", err)\n\t}\n\n\treturn ctx, err\n}\n\nfunc (s *suite) runAfterStepHooks(ctx context.Context, step *Step, status StepResultStatus, err error) (context.Context, error) {\n\tfor _, f := range s.afterStepHandlers {\n\t\thctx, herr := f(ctx, step, status, err)\n\n\t\t// Adding hook error to resulting error without breaking hooks loop.\n\t\tif herr != nil {\n\t\t\tif err == nil {\n\t\t\t\terr = herr\n\t\t\t} else {\n\t\t\t\terr = fmt.Errorf(\"%v, %w\", herr, err)\n\t\t\t}\n\t\t}\n\n\t\tif hctx != nil {\n\t\t\tctx = hctx\n\t\t}\n\t}\n\n\treturn ctx, err\n}\n\nfunc (s *suite) runBeforeScenarioHooks(ctx context.Context, pickle *messages.Pickle) (context.Context, error) {\n\tvar err error\n\n\t// run before scenario handlers\n\tfor _, f := range s.beforeScenarioHandlers {\n\t\thctx, herr := f(ctx, pickle)\n\t\tif herr != nil {\n\t\t\tif err == nil {\n\t\t\t\terr = herr\n\t\t\t} else {\n\t\t\t\terr = fmt.Errorf(\"%v, %w\", herr, err)\n\t\t\t}\n\t\t}\n\n\t\tif hctx != nil {\n\t\t\tctx = hctx\n\t\t}\n\t}\n\n\tif err != nil {\n\t\terr = fmt.Errorf(\"before scenario hook failed: %w\", err)\n\t}\n\n\treturn ctx, err\n}\n\nfunc (s *suite) runAfterScenarioHooks(ctx context.Context, pickle *messages.Pickle, lastStepErr error) (context.Context, error) {\n\terr := lastStepErr\n\n\thooksFailed := false\n\tisStepErr := true\n\n\t// run after scenario handlers\n\tfor _, f := range s.afterScenarioHandlers {\n\t\thctx, herr := f(ctx, pickle, err)\n\n\t\t// Adding hook error to resulting error without breaking hooks loop.\n\t\tif herr != nil {\n\t\t\thooksFailed = true\n\n\t\t\tif err == nil {\n\t\t\t\tisStepErr = false\n\t\t\t\terr = herr\n\t\t\t} else {\n\t\t\t\tif isStepErr {\n\t\t\t\t\terr = fmt.Errorf(\"step error: %w\", err)\n\t\t\t\t\tisStepErr = false\n\t\t\t\t}\n\t\t\t\terr = fmt.Errorf(\"%v, %w\", herr, err)\n\t\t\t}\n\t\t}\n\n\t\tif hctx != nil {\n\t\t\tctx = hctx\n\t\t}\n\t}\n\n\tif hooksFailed {\n\t\terr = fmt.Errorf(\"after scenario hook failed: %w\", err)\n\t}\n\n\treturn ctx, err\n}\n\nfunc (s *suite) maybeUndefined(ctx context.Context, text string, arg interface{}, stepType messages.PickleStepType) (context.Context, []string, error) {\n\tvar undefined []string\n\tstep, err := s.matchStepTextAndType(text, stepType)\n\tif err != nil {\n\t\treturn ctx, undefined, err\n\t}\n\n\tif nil == step {\n\t\treturn ctx, []string{text}, nil\n\t}\n\n\tif !step.Nested {\n\t\treturn ctx, undefined, nil\n\t}\n\n\tif arg != nil {\n\t\tstep.Args = append(step.Args, arg)\n\t}\n\n\tctx, steps := step.Run(ctx)\n\n\tfor _, next := range steps.(Steps) {\n\t\tlines := strings.Split(next, \"\\n\")\n\t\t// @TODO: we cannot currently parse table or content body from nested steps\n\t\tif len(lines) > 1 {\n\t\t\treturn ctx, undefined, fmt.Errorf(\"nested steps cannot be multiline and have table or content body argument\")\n\t\t}\n\t\tif len(lines[0]) > 0 && lines[0][len(lines[0])-1] == ':' {\n\t\t\treturn ctx, undefined, fmt.Errorf(\"nested steps cannot be multiline and have table or content body argument\")\n\t\t}\n\t\tctx, undef, err := s.maybeUndefined(ctx, next, nil, messages.PickleStepType_UNKNOWN)\n\t\tif err != nil {\n\t\t\treturn ctx, undefined, err\n\t\t}\n\t\tundefined = append(undefined, undef...)\n\t}\n\treturn ctx, undefined, nil\n}\n\nfunc (s *suite) maybeSubSteps(ctx context.Context, result interface{}) (context.Context, error) {\n\tif nil == result {\n\t\treturn ctx, nil\n\t}\n\n\tif err, ok := result.(error); ok {\n\t\treturn ctx, err\n\t}\n\n\tsteps, ok := result.(Steps)\n\tif !ok {\n\t\treturn ctx, fmt.Errorf(\"unexpected error, should have been godog.Steps: %T - %+v\", result, result)\n\t}\n\n\tfor _, text := range steps {\n\t\tdef, err := s.matchStepTextAndType(text, messages.PickleStepType_UNKNOWN)\n\t\tif err != nil {\n\t\t\treturn ctx, err\n\t\t}\n\n\t\tif def == nil {\n\t\t\treturn ctx, fmt.Errorf(\"%w: %s\", ErrUndefined, text)\n\t\t} else {\n\t\t\tctx, err = s.runSubStep(ctx, text, def)\n\t\t\tif err != nil {\n\t\t\t\treturn ctx, err\n\t\t\t}\n\t\t}\n\t}\n\treturn ctx, nil\n}\n\nfunc (s *suite) runSubStep(ctx context.Context, text string, def *models.StepDefinition) (_ context.Context, err error) {\n\tst := &Step{}\n\tst.Text = text\n\tst.Type = messages.PickleStepType_ACTION\n\n\tdefer func() {\n\t\tstatus := StepPassed\n\n\t\tswitch {\n\t\tcase errors.Is(err, ErrUndefined):\n\t\t\tstatus = StepUndefined\n\t\tcase errors.Is(err, ErrPending):\n\t\t\tstatus = StepPending\n\t\tcase err != nil:\n\t\t\tstatus = StepFailed\n\t\t}\n\n\t\tctx, err = s.runAfterStepHooks(ctx, st, status, err)\n\t}()\n\n\tctx, err = s.runBeforeStepHooks(ctx, st, nil)\n\tif err != nil {\n\t\treturn ctx, fmt.Errorf(\"%s: %+v\", text, err)\n\t}\n\n\tif ctx, err = s.maybeSubSteps(def.Run(ctx)); err != nil {\n\t\treturn ctx, fmt.Errorf(\"%s: %+v\", text, err)\n\t}\n\n\treturn ctx, nil\n}\n\nfunc (s *suite) matchStepTextAndType(text string, stepType messages.PickleStepType) (*models.StepDefinition, error) {\n\tvar first *models.StepDefinition\n\tmatchingExpressions := make([]string, 0)\n\n\tfor _, h := range s.steps {\n\t\tif m := h.Expr.FindStringSubmatch(text); len(m) > 0 {\n\t\t\tif !keywordMatches(h.Keyword, stepType) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar args []interface{}\n\t\t\tfor _, m := range m[1:] {\n\t\t\t\targs = append(args, m)\n\t\t\t}\n\n\t\t\tmatchingExpressions = append(matchingExpressions, h.Expr.String())\n\n\t\t\t// since we need to assign arguments\n\t\t\t// better to copy the step definition\n\t\t\tmatch := &models.StepDefinition{\n\t\t\t\tStepDefinition: formatters.StepDefinition{\n\t\t\t\t\tExpr:    h.Expr,\n\t\t\t\t\tHandler: h.Handler,\n\t\t\t\t\tKeyword: h.Keyword,\n\t\t\t\t},\n\t\t\t\tArgs:         args,\n\t\t\t\tHandlerValue: h.HandlerValue,\n\t\t\t\tNested:       h.Nested,\n\t\t\t}\n\n\t\t\tif first == nil {\n\t\t\t\tfirst = match\n\t\t\t}\n\t\t}\n\t}\n\n\tif s.strict {\n\t\tif len(matchingExpressions) > 1 {\n\t\t\terrs := \"\\n        \" + strings.Join(matchingExpressions, \"\\n        \")\n\t\t\treturn nil, fmt.Errorf(\"%w, step text: %s\\n    matches:%s\", ErrAmbiguous, text, errs)\n\t\t}\n\t}\n\n\treturn first, nil\n}\n\nfunc keywordMatches(k formatters.Keyword, stepType messages.PickleStepType) bool {\n\tif k == formatters.None {\n\t\treturn true\n\t}\n\tswitch stepType {\n\tcase messages.PickleStepType_CONTEXT:\n\t\treturn k == formatters.Given\n\tcase messages.PickleStepType_ACTION:\n\t\treturn k == formatters.When\n\tcase messages.PickleStepType_OUTCOME:\n\t\treturn k == formatters.Then\n\tdefault:\n\t\treturn true\n\t}\n}\n\nfunc (s *suite) runSteps(ctx context.Context, pickle *Scenario, steps []*Step) (context.Context, error) {\n\tvar (\n\t\tstepErr, scenarioErr error\n\t)\n\n\tfor i, step := range steps {\n\t\tisLast := i == len(steps)-1\n\t\tisFirst := i == 0\n\t\tctx, stepErr = s.runStep(ctx, pickle, step, scenarioErr, isFirst, isLast)\n\t\tif scenarioErr == nil || s.shouldFail(stepErr) {\n\t\t\tscenarioErr = stepErr\n\t\t}\n\t}\n\n\treturn ctx, scenarioErr\n}\n\nfunc (s *suite) shouldFail(err error) bool {\n\tif err == nil || errors.Is(err, ErrSkip) {\n\t\treturn false\n\t}\n\n\tif errors.Is(err, ErrUndefined) || errors.Is(err, ErrPending) {\n\t\treturn s.strict\n\t}\n\n\treturn true\n}\n\nfunc (s *suite) runPickle(pickle *messages.Pickle) (err error) {\n\tctx := s.defaultContext\n\tif ctx == nil {\n\t\tctx = context.Background()\n\t}\n\n\tctx, cancel := context.WithCancel(ctx)\n\n\tdefer cancel()\n\n\tif len(pickle.Steps) == 0 {\n\t\tpr := models.PickleResult{PickleID: pickle.Id, StartedAt: utils.TimeNowFunc()}\n\t\ts.storage.MustInsertPickleResult(pr)\n\n\t\ts.fmt.Pickle(pickle)\n\t\treturn fmt.Errorf(\"%w: no steps in scenario\", ErrUndefined)\n\t}\n\n\t// Before scenario hooks are called in context of first evaluated step\n\t// so that error from handler can be added to step.\n\n\tpr := models.PickleResult{PickleID: pickle.Id, StartedAt: utils.TimeNowFunc()}\n\ts.storage.MustInsertPickleResult(pr)\n\n\ts.fmt.Pickle(pickle)\n\n\tdt := &testingT{\n\t\tname: pickle.Name,\n\t}\n\tctx = setContextTestingT(ctx, dt)\n\t// scenario\n\tif s.testingT != nil {\n\t\t// Running scenario as a subtest.\n\t\ts.testingT.Run(pickle.Name, func(t *testing.T) {\n\t\t\tdt.t = t\n\t\t\tctx, err = s.runSteps(ctx, pickle, pickle.Steps)\n\t\t\tif s.shouldFail(err) {\n\t\t\t\tt.Errorf(\"%+v\", err)\n\t\t\t}\n\t\t})\n\t} else {\n\t\tctx, err = s.runSteps(ctx, pickle, pickle.Steps)\n\t}\n\n\t// After scenario handlers are called in context of last evaluated step\n\t// so that error from handler can be added to step.\n\n\treturn err\n}\n"
        },
        {
          "name": "suite_context_test.go",
          "type": "blob",
          "size": 37.42578125,
          "content": "package godog\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"encoding/xml\"\n\t\"errors\"\n\t\"fmt\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\tgherkin \"github.com/cucumber/gherkin/go/v26\"\n\tmessages \"github.com/cucumber/messages/go/v21\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/cucumber/godog/colors\"\n\t\"github.com/cucumber/godog/internal/formatters\"\n\t\"github.com/cucumber/godog/internal/models\"\n\t\"github.com/cucumber/godog/internal/parser\"\n\t\"github.com/cucumber/godog/internal/storage\"\n\t\"github.com/cucumber/godog/internal/tags\"\n\t\"github.com/cucumber/godog/internal/utils\"\n)\n\n// InitializeScenario provides steps for godog suite execution and\n// can be used for meta-testing of godog features/steps themselves.\n//\n// Beware, steps or their definitions might change without backward\n// compatibility guarantees. A typical user of the godog library should never\n// need this, rather it is provided for those developing add-on libraries for godog.\n//\n// For an example of how to use, see godog's own `features/` and `suite_test.go`.\nfunc InitializeScenario(ctx *ScenarioContext) {\n\ttc := &godogFeaturesScenario{}\n\n\tctx.Before(tc.ResetBeforeEachScenario)\n\n\tctx.Step(`^(?:a )?feature path \"([^\"]*)\"$`, tc.featurePath)\n\tctx.Step(`^I parse features$`, tc.parseFeatures)\n\tctx.Step(`^I'm listening to suite events$`, tc.iAmListeningToSuiteEvents)\n\tctx.Step(`^I run feature suite$`, tc.iRunFeatureSuite)\n\tctx.Step(`^I run feature suite with tags \"([^\"]*)\"$`, tc.iRunFeatureSuiteWithTags)\n\tctx.Step(`^I run feature suite with formatter \"([^\"]*)\"$`, tc.iRunFeatureSuiteWithFormatter)\n\tctx.Step(`^(?:I )(allow|disable) variable injection`, tc.iSetVariableInjectionTo)\n\tctx.Step(`^(?:a )?feature \"([^\"]*)\"(?: file)?:$`, tc.aFeatureFile)\n\tctx.Step(`^the suite should have (passed|failed)$`, tc.theSuiteShouldHave)\n\n\tctx.Step(`^I should have ([\\d]+) features? files?:$`, tc.iShouldHaveNumFeatureFiles)\n\tctx.Step(`^I should have ([\\d]+) scenarios? registered$`, tc.numScenariosRegistered)\n\tctx.Step(`^there (was|were) ([\\d]+) \"([^\"]*)\" events? fired$`, tc.thereWereNumEventsFired)\n\tctx.Step(`^there was event triggered before scenario \"([^\"]*)\"$`, tc.thereWasEventTriggeredBeforeScenario)\n\tctx.Step(`^these events had to be fired for a number of times:$`, tc.theseEventsHadToBeFiredForNumberOfTimes)\n\n\tctx.Step(`^(?:a )?failing step`, tc.aFailingStep)\n\tctx.Step(`^this step should fail`, tc.aFailingStep)\n\tctx.Step(`^the following steps? should be (passed|failed|skipped|undefined|pending):`, tc.followingStepsShouldHave)\n\tctx.Step(`^the undefined step snippets should be:$`, tc.theUndefinedStepSnippetsShouldBe)\n\n\t// event stream\n\tctx.Step(`^the following events should be fired:$`, tc.thereShouldBeEventsFired)\n\n\t// lt\n\tctx.Step(`^savybių aplankas \"([^\"]*)\"$`, tc.featurePath)\n\tctx.Step(`^aš išskaitau savybes$`, tc.parseFeatures)\n\tctx.Step(`^aš turėčiau turėti ([\\d]+) savybių failus:$`, tc.iShouldHaveNumFeatureFiles)\n\n\tctx.Step(`^(?:a )?pending step$`, func() error {\n\t\treturn ErrPending\n\t})\n\tctx.Step(`^(?:a )?passing step$`, func() error {\n\t\treturn nil\n\t})\n\tctx.Given(`^(?:a )?given step$`, func() error {\n\t\treturn nil\n\t})\n\tctx.When(`^(?:a )?when step$`, func() error {\n\t\treturn nil\n\t})\n\tctx.Then(`^(?:a )?then step$`, func() error {\n\t\treturn nil\n\t})\n\n\t// Introduced to test formatter/cucumber.feature\n\tctx.Step(`^the rendered json will be as follows:$`, tc.theRenderJSONWillBe)\n\n\t// Introduced to test formatter/pretty.feature\n\tctx.Step(`^the rendered output will be as follows:$`, tc.theRenderOutputWillBe)\n\n\t// Introduced to test formatter/junit.feature\n\tctx.Step(`^the rendered xml will be as follows:$`, tc.theRenderXMLWillBe)\n\n\tctx.Step(`^(?:a )?failing multistep$`, func() Steps {\n\t\treturn Steps{\"passing step\", \"failing step\"}\n\t})\n\n\tctx.Step(`^(?:a |an )?undefined multistep$`, func() Steps {\n\t\treturn Steps{\"passing step\", \"undefined step\", \"passing step\"}\n\t})\n\n\tctx.Then(`^(?:a |an )?undefined multistep using 'then' function$`, func() Steps {\n\t\treturn Steps{\"given step\", \"undefined step\", \"then step\"}\n\t})\n\n\tctx.Step(`^(?:a )?passing multistep$`, func() Steps {\n\t\treturn Steps{\"passing step\", \"passing step\", \"passing step\"}\n\t})\n\n\tctx.Then(`^(?:a )?passing multistep using 'then' function$`, func() Steps {\n\t\treturn Steps{\"given step\", \"when step\", \"then step\"}\n\t})\n\n\tctx.Step(`^(?:a )?failing nested multistep$`, func() Steps {\n\t\treturn Steps{\"passing step\", \"passing multistep\", \"failing multistep\"}\n\t})\n\t// Default recovery step\n\tctx.Step(`Ignore.*`, func() error {\n\t\treturn nil\n\t})\n\n\tctx.Step(`^call func\\(\\*godog\\.DocString\\) with:$`, func(arg *DocString) error {\n\t\treturn nil\n\t})\n\tctx.Step(`^call func\\(string\\) with:$`, func(arg string) error {\n\t\treturn nil\n\t})\n\n\tctx.Step(`^passing step without return$`, func() {})\n\n\tctx.Step(`^having correct context$`, func(ctx context.Context) (context.Context, error) {\n\t\tif ctx.Value(ctxKey(\"BeforeScenario\")) == nil {\n\t\t\treturn ctx, errors.New(\"missing BeforeScenario in context\")\n\t\t}\n\n\t\tif ctx.Value(ctxKey(\"BeforeStep\")) == nil {\n\t\t\treturn ctx, errors.New(\"missing BeforeStep in context\")\n\t\t}\n\n\t\tif ctx.Value(ctxKey(\"StepState\")) == nil {\n\t\t\treturn ctx, errors.New(\"missing StepState in context\")\n\t\t}\n\n\t\treturn context.WithValue(ctx, ctxKey(\"Step\"), true), nil\n\t})\n\n\tctx.Step(`^adding step state to context$`, func(ctx context.Context) context.Context {\n\t\treturn context.WithValue(ctx, ctxKey(\"StepState\"), true)\n\t})\n\n\tctx.Step(`^I return a context from a step$`, tc.iReturnAContextFromAStep)\n\tctx.Step(`^I should see the context in the next step$`, tc.iShouldSeeTheContextInTheNextStep)\n\tctx.Step(`^I can see contexts passed in multisteps$`, func() Steps {\n\t\treturn Steps{\n\t\t\t\"I return a context from a step\",\n\t\t\t\"I should see the context in the next step\",\n\t\t}\n\t})\n\n\t// introduced to test testingT\n\tctx.Step(`^my step (?:fails|skips) the test by calling (FailNow|Fail|SkipNow|Skip) on testing T$`, tc.myStepCallsTFailErrorSkip)\n\tctx.Step(`^my step fails the test by calling (Fatal|Error) on testing T with message \"([^\"]*)\"$`, tc.myStepCallsTErrorFatal)\n\tctx.Step(`^my step fails the test by calling (Fatalf|Errorf) on testing T with message \"([^\"]*)\" and argument \"([^\"]*)\"$`, tc.myStepCallsTErrorfFatalf)\n\tctx.Step(`^my step calls Log on testing T with message \"([^\"]*)\"$`, tc.myStepCallsTLog)\n\tctx.Step(`^my step calls Logf on testing T with message \"([^\"]*)\" and argument \"([^\"]*)\"$`, tc.myStepCallsTLogf)\n\tctx.Step(`^my step calls testify's assert.Equal with expected \"([^\"]*)\" and actual \"([^\"]*)\"$`, tc.myStepCallsTestifyAssertEqual)\n\tctx.Step(`^my step calls testify's require.Equal with expected \"([^\"]*)\" and actual \"([^\"]*)\"$`, tc.myStepCallsTestifyRequireEqual)\n\tctx.Step(`^my step calls testify's assert.Equal ([0-9]+) times(| with match)$`, tc.myStepCallsTestifyAssertEqualMultipleTimes)\n\tctx.Step(`^my step calls godog.Log with message \"([^\"]*)\"$`, tc.myStepCallsDogLog)\n\tctx.Step(`^my step calls godog.Logf with message \"([^\"]*)\" and argument \"([^\"]*)\"$`, tc.myStepCallsDogLogf)\n\tctx.Step(`^the logged messages should include \"([^\"]*)\"$`, tc.theLoggedMessagesShouldInclude)\n\n\tctx.StepContext().Before(tc.inject)\n}\n\ntype ctxKey string\n\nfunc (tc *godogFeaturesScenario) inject(ctx context.Context, step *Step) (context.Context, error) {\n\tif !tc.allowInjection {\n\t\treturn ctx, nil\n\t}\n\n\tstep.Text = injectAll(step.Text)\n\n\tif step.Argument == nil {\n\t\treturn ctx, nil\n\t}\n\n\tif table := step.Argument.DataTable; table != nil {\n\t\tfor i := 0; i < len(table.Rows); i++ {\n\t\t\tfor n, cell := range table.Rows[i].Cells {\n\t\t\t\ttable.Rows[i].Cells[n].Value = injectAll(cell.Value)\n\t\t\t}\n\t\t}\n\t}\n\n\tif doc := step.Argument.DocString; doc != nil {\n\t\tdoc.Content = injectAll(doc.Content)\n\t}\n\n\treturn ctx, nil\n}\n\nfunc injectAll(src string) string {\n\tre := regexp.MustCompile(`{{[^{}]+}}`)\n\treturn re.ReplaceAllStringFunc(\n\t\tsrc,\n\t\tfunc(key string) string {\n\t\t\tinjectRegex := regexp.MustCompile(`^{{.+}}$`)\n\n\t\t\tif injectRegex.MatchString(key) {\n\t\t\t\treturn \"someverylonginjectionsoweacanbesureitsurpasstheinitiallongeststeplenghtanditwillhelptestsmethodsafety\"\n\t\t\t}\n\n\t\t\treturn key\n\t\t},\n\t)\n}\n\ntype firedEvent struct {\n\tname string\n\targs []interface{}\n}\n\ntype godogFeaturesScenario struct {\n\tpaths            []string\n\tfeatures         []*models.Feature\n\ttestedSuite      *suite\n\ttestSuiteContext TestSuiteContext\n\tevents           []*firedEvent\n\tout              bytes.Buffer\n\tallowInjection   bool\n}\n\nfunc (tc *godogFeaturesScenario) ResetBeforeEachScenario(ctx context.Context, sc *Scenario) (context.Context, error) {\n\t// reset whole suite with the state\n\ttc.out.Reset()\n\ttc.paths = []string{}\n\n\ttc.features = []*models.Feature{}\n\ttc.testedSuite = &suite{}\n\ttc.testSuiteContext = TestSuiteContext{}\n\n\t// reset all fired events\n\ttc.events = []*firedEvent{}\n\ttc.allowInjection = false\n\n\treturn ctx, nil\n}\n\nfunc (tc *godogFeaturesScenario) iSetVariableInjectionTo(to string) error {\n\ttc.allowInjection = to == \"allow\"\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) iRunFeatureSuiteWithTags(tags string) error {\n\treturn tc.iRunFeatureSuiteWithTagsAndFormatter(tags, formatters.BaseFormatterFunc)\n}\n\nfunc (tc *godogFeaturesScenario) iRunFeatureSuiteWithFormatter(name string) error {\n\tf := FindFmt(name)\n\tif f == nil {\n\t\treturn fmt.Errorf(`formatter \"%s\" is not available`, name)\n\t}\n\n\treturn tc.iRunFeatureSuiteWithTagsAndFormatter(\"\", f)\n}\n\nfunc (tc *godogFeaturesScenario) iRunFeatureSuiteWithTagsAndFormatter(filter string, fmtFunc FormatterFunc) error {\n\tif err := tc.parseFeatures(); err != nil {\n\t\treturn err\n\t}\n\n\tfor _, feat := range tc.features {\n\t\tfeat.Pickles = tags.ApplyTagFilter(filter, feat.Pickles)\n\t}\n\n\ttc.testedSuite.storage = storage.NewStorage()\n\tfor _, feat := range tc.features {\n\t\ttc.testedSuite.storage.MustInsertFeature(feat)\n\n\t\tfor _, pickle := range feat.Pickles {\n\t\t\ttc.testedSuite.storage.MustInsertPickle(pickle)\n\t\t}\n\t}\n\n\ttc.testedSuite.fmt = fmtFunc(\"godog\", colors.Uncolored(&tc.out))\n\tif fmt, ok := tc.testedSuite.fmt.(storageFormatter); ok {\n\t\tfmt.SetStorage(tc.testedSuite.storage)\n\t}\n\n\ttestRunStarted := models.TestRunStarted{StartedAt: utils.TimeNowFunc()}\n\ttc.testedSuite.storage.MustInsertTestRunStarted(testRunStarted)\n\ttc.testedSuite.fmt.TestRunStarted()\n\n\tfor _, f := range tc.testSuiteContext.beforeSuiteHandlers {\n\t\tf()\n\t}\n\n\tfor _, ft := range tc.features {\n\t\ttc.testedSuite.fmt.Feature(ft.GherkinDocument, ft.Uri, ft.Content)\n\n\t\tfor _, pickle := range ft.Pickles {\n\t\t\tif tc.testedSuite.stopOnFailure && tc.testedSuite.failed {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tsc := ScenarioContext{suite: tc.testedSuite}\n\t\t\tInitializeScenario(&sc)\n\n\t\t\terr := tc.testedSuite.runPickle(pickle)\n\t\t\tif tc.testedSuite.shouldFail(err) {\n\t\t\t\ttc.testedSuite.failed = true\n\t\t\t}\n\t\t}\n\t}\n\n\tfor _, f := range tc.testSuiteContext.afterSuiteHandlers {\n\t\tf()\n\t}\n\n\ttc.testedSuite.fmt.Summary()\n\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) thereShouldBeEventsFired(doc *DocString) error {\n\tactual := strings.Split(strings.TrimSpace(tc.out.String()), \"\\n\")\n\texpect := strings.Split(strings.TrimSpace(doc.Content), \"\\n\")\n\n\tif len(expect) != len(actual) {\n\t\treturn fmt.Errorf(\"expected %d events, but got %d\", len(expect), len(actual))\n\t}\n\n\ttype ev struct {\n\t\tEvent string\n\t}\n\n\tfor i, event := range actual {\n\t\texp := strings.TrimSpace(expect[i])\n\t\tvar act ev\n\n\t\tif err := json.Unmarshal([]byte(event), &act); err != nil {\n\t\t\treturn fmt.Errorf(\"failed to read event data: %v\", err)\n\t\t}\n\n\t\tif act.Event != exp {\n\t\t\treturn fmt.Errorf(`expected event: \"%s\" at position: %d, but actual was \"%s\"`, exp, i, act.Event)\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) cleanupSnippet(snip string) string {\n\tlines := strings.Split(strings.TrimSpace(snip), \"\\n\")\n\tfor i := 0; i < len(lines); i++ {\n\t\tlines[i] = strings.TrimSpace(lines[i])\n\t}\n\n\treturn strings.Join(lines, \"\\n\")\n}\n\nfunc (tc *godogFeaturesScenario) theUndefinedStepSnippetsShouldBe(body *DocString) error {\n\tf, ok := tc.testedSuite.fmt.(*formatters.Base)\n\tif !ok {\n\t\treturn fmt.Errorf(\"this step requires *formatters.Base, but there is: %T\", tc.testedSuite.fmt)\n\t}\n\n\tactual := tc.cleanupSnippet(f.Snippets())\n\texpected := tc.cleanupSnippet(body.Content)\n\n\tif actual != expected {\n\t\treturn fmt.Errorf(\"snippets do not match actual: %s\", f.Snippets())\n\t}\n\n\treturn nil\n}\n\ntype multiContextKey struct{}\n\nfunc (tc *godogFeaturesScenario) iReturnAContextFromAStep(ctx context.Context) (context.Context, error) {\n\treturn context.WithValue(ctx, multiContextKey{}, \"value\"), nil\n}\n\nfunc (tc *godogFeaturesScenario) iShouldSeeTheContextInTheNextStep(ctx context.Context) error {\n\tvalue, ok := ctx.Value(multiContextKey{}).(string)\n\tif !ok {\n\t\treturn errors.New(\"context does not contain our key\")\n\t}\n\tif value != \"value\" {\n\t\treturn errors.New(\"context has the wrong value for our key\")\n\t}\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) myStepCallsTFailErrorSkip(ctx context.Context, op string) error {\n\tswitch op {\n\tcase \"FailNow\":\n\t\tT(ctx).FailNow()\n\tcase \"Fail\":\n\t\tT(ctx).Fail()\n\tcase \"SkipNow\":\n\t\tT(ctx).SkipNow()\n\tcase \"Skip\":\n\t\tT(ctx).Skip()\n\tdefault:\n\t\treturn fmt.Errorf(\"operation %s not supported by iCallTFailErrorSkip\", op)\n\t}\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) myStepCallsTErrorFatal(ctx context.Context, op string, message string) error {\n\tswitch op {\n\tcase \"Error\":\n\t\tT(ctx).Error(message)\n\tcase \"Fatal\":\n\t\tT(ctx).Fatal(message)\n\tdefault:\n\t\treturn fmt.Errorf(\"operation %s not supported by iCallTErrorFatal\", op)\n\t}\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) myStepCallsTErrorfFatalf(ctx context.Context, op string, message string, arg string) error {\n\tswitch op {\n\tcase \"Errorf\":\n\t\tT(ctx).Errorf(message, arg)\n\tcase \"Fatalf\":\n\t\tT(ctx).Fatalf(message, arg)\n\tdefault:\n\t\treturn fmt.Errorf(\"operation %s not supported by iCallTErrorfFatalf\", op)\n\t}\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) myStepCallsTestifyAssertEqual(ctx context.Context, a string, b string) error {\n\tassert.Equal(T(ctx), a, b)\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) myStepCallsTestifyAssertEqualMultipleTimes(ctx context.Context, times string, withMatch string) error {\n\ttimesInt, err := strconv.Atoi(times)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"test step has invalid times value %s: %w\", times, err)\n\t}\n\tfor i := 0; i < timesInt; i++ {\n\t\tif withMatch == \" with match\" {\n\t\t\tassert.Equal(T(ctx), fmt.Sprintf(\"exp%v\", i), fmt.Sprintf(\"exp%v\", i))\n\t\t} else {\n\t\t\tassert.Equal(T(ctx), \"exp\", fmt.Sprintf(\"notexp%v\", i))\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) myStepCallsTestifyRequireEqual(ctx context.Context, a string, b string) error {\n\trequire.Equal(T(ctx), a, b)\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) myStepCallsTLog(ctx context.Context, message string) error {\n\tT(ctx).Log(message)\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) myStepCallsTLogf(ctx context.Context, message string, arg string) error {\n\tT(ctx).Logf(message, arg)\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) myStepCallsDogLog(ctx context.Context, message string) error {\n\tLog(ctx, message)\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) myStepCallsDogLogf(ctx context.Context, message string, arg string) error {\n\tLogf(ctx, message, arg)\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) theLoggedMessagesShouldInclude(ctx context.Context, message string) error {\n\tmessages := LoggedMessages(ctx)\n\tfor _, m := range messages {\n\t\tif strings.Contains(m, message) {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"the message %q was not logged (logged messages: %v)\", message, messages)\n}\n\nfunc (tc *godogFeaturesScenario) followingStepsShouldHave(status string, steps *DocString) error {\n\texpected := strings.Split(steps.Content, \"\\n\")\n\tvar actual, unmatched, matched []string\n\n\tstorage := tc.testedSuite.storage\n\n\tswitch status {\n\tcase \"passed\":\n\t\tfor _, st := range storage.MustGetPickleStepResultsByStatus(models.Passed) {\n\t\t\tpickleStep := storage.MustGetPickleStep(st.PickleStepID)\n\t\t\tactual = append(actual, pickleStep.Text)\n\t\t}\n\tcase \"failed\":\n\t\tfor _, st := range storage.MustGetPickleStepResultsByStatus(models.Failed) {\n\t\t\tpickleStep := storage.MustGetPickleStep(st.PickleStepID)\n\t\t\tactual = append(actual, pickleStep.Text)\n\t\t}\n\tcase \"skipped\":\n\t\tfor _, st := range storage.MustGetPickleStepResultsByStatus(models.Skipped) {\n\t\t\tpickleStep := storage.MustGetPickleStep(st.PickleStepID)\n\t\t\tactual = append(actual, pickleStep.Text)\n\t\t}\n\tcase \"undefined\":\n\t\tfor _, st := range storage.MustGetPickleStepResultsByStatus(models.Undefined) {\n\t\t\tpickleStep := storage.MustGetPickleStep(st.PickleStepID)\n\t\t\tactual = append(actual, pickleStep.Text)\n\t\t}\n\tcase \"pending\":\n\t\tfor _, st := range storage.MustGetPickleStepResultsByStatus(models.Pending) {\n\t\t\tpickleStep := storage.MustGetPickleStep(st.PickleStepID)\n\t\t\tactual = append(actual, pickleStep.Text)\n\t\t}\n\tdefault:\n\t\treturn fmt.Errorf(\"unexpected step status wanted: %s\", status)\n\t}\n\n\tif len(expected) > len(actual) {\n\t\treturn fmt.Errorf(\"number of expected %s steps: %d is less than actual %s steps: %d\", status, len(expected), status, len(actual))\n\t}\n\n\tfor _, a := range actual {\n\t\tfor _, e := range expected {\n\t\t\tif a == e {\n\t\t\t\tmatched = append(matched, e)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tif len(matched) >= len(expected) {\n\t\treturn nil\n\t}\n\n\tfor _, s := range expected {\n\t\tvar found bool\n\t\tfor _, m := range matched {\n\t\t\tif s == m {\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif !found {\n\t\t\tunmatched = append(unmatched, s)\n\t\t}\n\t}\n\n\treturn fmt.Errorf(\"the steps: %s - are not %s\", strings.Join(unmatched, \", \"), status)\n}\n\nfunc (tc *godogFeaturesScenario) iAmListeningToSuiteEvents() error {\n\ttc.testSuiteContext.BeforeSuite(func() {\n\t\ttc.events = append(tc.events, &firedEvent{\"BeforeSuite\", []interface{}{}})\n\t})\n\n\ttc.testSuiteContext.AfterSuite(func() {\n\t\ttc.events = append(tc.events, &firedEvent{\"AfterSuite\", []interface{}{}})\n\t})\n\n\tscenarioContext := ScenarioContext{suite: tc.testedSuite}\n\n\tscenarioContext.Before(func(ctx context.Context, pickle *Scenario) (context.Context, error) {\n\t\ttc.events = append(tc.events, &firedEvent{\"BeforeScenario\", []interface{}{pickle}})\n\n\t\tif ctx.Value(ctxKey(\"BeforeScenario\")) != nil {\n\t\t\treturn ctx, errors.New(\"unexpected BeforeScenario in context (double invocation)\")\n\t\t}\n\n\t\treturn context.WithValue(ctx, ctxKey(\"BeforeScenario\"), pickle.Name), nil\n\t})\n\n\tscenarioContext.Before(func(ctx context.Context, sc *Scenario) (context.Context, error) {\n\t\tif sc.Name == \"failing before and after scenario\" || sc.Name == \"failing before scenario\" {\n\t\t\treturn context.WithValue(ctx, ctxKey(\"AfterStep\"), sc.Name), errors.New(\"failed in before scenario hook\")\n\t\t}\n\n\t\treturn ctx, nil\n\t})\n\n\tscenarioContext.After(func(ctx context.Context, sc *Scenario, err error) (context.Context, error) {\n\t\tif sc.Name == \"failing before and after scenario\" || sc.Name == \"failing after scenario\" {\n\t\t\treturn ctx, errors.New(\"failed in after scenario hook\")\n\t\t}\n\n\t\treturn ctx, nil\n\t})\n\n\tscenarioContext.After(func(ctx context.Context, pickle *Scenario, err error) (context.Context, error) {\n\t\ttc.events = append(tc.events, &firedEvent{\"AfterScenario\", []interface{}{pickle, err}})\n\n\t\tif ctx.Value(ctxKey(\"BeforeScenario\")) == nil {\n\t\t\treturn ctx, errors.New(\"missing BeforeScenario in context\")\n\t\t}\n\n\t\tif ctx.Value(ctxKey(\"AfterStep\")) == nil {\n\t\t\treturn ctx, errors.New(\"missing AfterStep in context\")\n\t\t}\n\n\t\treturn context.WithValue(ctx, ctxKey(\"AfterScenario\"), pickle.Name), nil\n\t})\n\n\tscenarioContext.StepContext().Before(func(ctx context.Context, step *Step) (context.Context, error) {\n\t\ttc.events = append(tc.events, &firedEvent{\"BeforeStep\", []interface{}{step}})\n\n\t\tif ctx.Value(ctxKey(\"BeforeScenario\")) == nil {\n\t\t\treturn ctx, errors.New(\"missing BeforeScenario in context\")\n\t\t}\n\n\t\treturn context.WithValue(ctx, ctxKey(\"BeforeStep\"), step.Text), nil\n\t})\n\n\tscenarioContext.StepContext().After(func(ctx context.Context, step *Step, status StepResultStatus, err error) (context.Context, error) {\n\t\ttc.events = append(tc.events, &firedEvent{\"AfterStep\", []interface{}{step, err}})\n\n\t\tif ctx.Value(ctxKey(\"BeforeScenario\")) == nil {\n\t\t\treturn ctx, errors.New(\"missing BeforeScenario in context\")\n\t\t}\n\n\t\tif ctx.Value(ctxKey(\"AfterScenario\")) != nil && status != models.Skipped {\n\t\t\tpanic(\"unexpected premature AfterScenario during AfterStep: \" + ctx.Value(ctxKey(\"AfterScenario\")).(string))\n\t\t}\n\n\t\tif ctx.Value(ctxKey(\"BeforeStep\")) == nil {\n\t\t\treturn ctx, errors.New(\"missing BeforeStep in context\")\n\t\t}\n\n\t\tif step.Text == \"having correct context\" && ctx.Value(ctxKey(\"Step\")) == nil {\n\t\t\tif status != StepSkipped {\n\t\t\t\treturn ctx, fmt.Errorf(\"unexpected step result status: %s\", status)\n\t\t\t}\n\n\t\t\treturn ctx, errors.New(\"missing Step in context\")\n\t\t}\n\n\t\treturn context.WithValue(ctx, ctxKey(\"AfterStep\"), step.Text), nil\n\t})\n\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) aFailingStep() error {\n\treturn fmt.Errorf(\"intentional failure\")\n}\n\n// parse a given feature file body as a feature\nfunc (tc *godogFeaturesScenario) aFeatureFile(path string, body *DocString) error {\n\tgd, err := gherkin.ParseGherkinDocument(strings.NewReader(body.Content), (&messages.Incrementing{}).NewId)\n\tgd.Uri = path\n\n\tpickles := gherkin.Pickles(*gd, path, (&messages.Incrementing{}).NewId)\n\ttc.features = append(tc.features, &models.Feature{GherkinDocument: gd, Pickles: pickles})\n\n\treturn err\n}\n\nfunc (tc *godogFeaturesScenario) featurePath(path string) {\n\ttc.paths = append(tc.paths, path)\n}\n\nfunc (tc *godogFeaturesScenario) parseFeatures() error {\n\tfts, err := parser.ParseFeatures(storage.FS{}, \"\", \"\", tc.paths)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttc.features = append(tc.features, fts...)\n\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) theSuiteShouldHave(state string) error {\n\tif tc.testedSuite.failed && state == \"passed\" {\n\t\treturn fmt.Errorf(\"the feature suite has failed\")\n\t}\n\n\tif !tc.testedSuite.failed && state == \"failed\" {\n\t\treturn fmt.Errorf(\"the feature suite has passed\")\n\t}\n\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) iShouldHaveNumFeatureFiles(num int, files *DocString) error {\n\tif len(tc.features) != num {\n\t\treturn fmt.Errorf(\"expected %d features to be parsed, but have %d\", num, len(tc.features))\n\t}\n\n\texpected := strings.Split(files.Content, \"\\n\")\n\n\tvar actual []string\n\n\tfor _, ft := range tc.features {\n\t\tactual = append(actual, ft.Uri)\n\t}\n\n\tif len(expected) != len(actual) {\n\t\treturn fmt.Errorf(\"expected %d feature paths to be parsed, but have %d\", len(expected), len(actual))\n\t}\n\n\tfor i := 0; i < len(expected); i++ {\n\t\tvar matched bool\n\t\tsplit := strings.Split(expected[i], \"/\")\n\t\texp := filepath.Join(split...)\n\n\t\tfor j := 0; j < len(actual); j++ {\n\t\t\tsplit = strings.Split(actual[j], \"/\")\n\t\t\tact := filepath.Join(split...)\n\n\t\t\tif exp == act {\n\t\t\t\tmatched = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif !matched {\n\t\t\treturn fmt.Errorf(`expected feature path \"%s\" at position: %d, was not parsed, actual are %+v`, exp, i, actual)\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) iRunFeatureSuite() error {\n\treturn tc.iRunFeatureSuiteWithTags(\"\")\n}\n\nfunc (tc *godogFeaturesScenario) numScenariosRegistered(expected int) (err error) {\n\tvar num int\n\tfor _, ft := range tc.features {\n\t\tnum += len(ft.Pickles)\n\t}\n\n\tif num != expected {\n\t\terr = fmt.Errorf(\"expected %d scenarios to be registered, but got %d\", expected, num)\n\t}\n\n\treturn\n}\n\nfunc (tc *godogFeaturesScenario) thereWereNumEventsFired(_ string, expected int, typ string) error {\n\tvar num int\n\tfor _, event := range tc.events {\n\t\tif event.name == typ {\n\t\t\tnum++\n\t\t}\n\t}\n\n\tif num != expected {\n\t\tif typ == \"BeforeFeature\" || typ == \"AfterFeature\" {\n\t\t\treturn nil\n\t\t}\n\n\t\treturn fmt.Errorf(\"expected %d %s events to be fired, but got %d\", expected, typ, num)\n\t}\n\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) thereWasEventTriggeredBeforeScenario(expected string) error {\n\tvar found []string\n\tfor _, event := range tc.events {\n\t\tif event.name != \"BeforeScenario\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tvar name string\n\t\tswitch t := event.args[0].(type) {\n\t\tcase *Scenario:\n\t\t\tname = t.Name\n\t\t}\n\n\t\tif name == expected {\n\t\t\treturn nil\n\t\t}\n\n\t\tfound = append(found, name)\n\t}\n\n\tif len(found) == 0 {\n\t\treturn fmt.Errorf(\"before scenario event was never triggered or listened\")\n\t}\n\n\treturn fmt.Errorf(`expected \"%s\" scenario, but got these fired %s`, expected, `\"`+strings.Join(found, `\", \"`)+`\"`)\n}\n\nfunc (tc *godogFeaturesScenario) theseEventsHadToBeFiredForNumberOfTimes(tbl *Table) error {\n\tif len(tbl.Rows[0].Cells) != 2 {\n\t\treturn fmt.Errorf(\"expected two columns for event table row, got: %d\", len(tbl.Rows[0].Cells))\n\t}\n\n\tfor _, row := range tbl.Rows {\n\t\tnum, err := strconv.ParseInt(row.Cells[1].Value, 10, 0)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := tc.thereWereNumEventsFired(\"\", int(num), row.Cells[0].Value); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (tc *godogFeaturesScenario) theRenderJSONWillBe(docstring *DocString) error {\n\texpectedSuiteCtxReg := regexp.MustCompile(`suite_context.go:\\d+`)\n\tactualSuiteCtxReg := regexp.MustCompile(`(suite_context_test\\.go|\\\\u003cautogenerated\\\\u003e):\\d+`)\n\n\texpectedString := docstring.Content\n\texpectedString = expectedSuiteCtxReg.ReplaceAllString(expectedString, `<autogenerated>:0`)\n\n\tactualString := tc.out.String()\n\tactualString = actualSuiteCtxReg.ReplaceAllString(actualString, `<autogenerated>:0`)\n\n\tvar expected []formatters.CukeFeatureJSON\n\tif err := json.Unmarshal([]byte(expectedString), &expected); err != nil {\n\t\treturn err\n\t}\n\n\tvar actual []formatters.CukeFeatureJSON\n\tif err := json.Unmarshal([]byte(actualString), &actual); err != nil {\n\t\treturn err\n\t}\n\n\treturn assertExpectedAndActual(assert.Equal, expected, actual)\n}\n\nfunc (tc *godogFeaturesScenario) theRenderOutputWillBe(docstring *DocString) error {\n\texpectedSuiteCtxReg := regexp.MustCompile(`(suite_context\\.go|suite_context_test\\.go):\\d+`)\n\tactualSuiteCtxReg := regexp.MustCompile(`(suite_context_test\\.go|\\<autogenerated\\>):\\d+`)\n\n\texpectedSuiteCtxFuncReg := regexp.MustCompile(`SuiteContext.func(\\d+)`)\n\tactualSuiteCtxFuncReg := regexp.MustCompile(`github.com/cucumber/godog.InitializeScenario.func(\\d+)`)\n\n\tsuiteCtxPtrReg := regexp.MustCompile(`\\*suiteContext`)\n\n\texpected := docstring.Content\n\texpected = trimAllLines(expected)\n\texpected = expectedSuiteCtxReg.ReplaceAllString(expected, \"<autogenerated>:0\")\n\texpected = expectedSuiteCtxFuncReg.ReplaceAllString(expected, \"InitializeScenario.func$1\")\n\texpected = suiteCtxPtrReg.ReplaceAllString(expected, \"*godogFeaturesScenario\")\n\n\tactual := tc.out.String()\n\tactual = actualSuiteCtxReg.ReplaceAllString(actual, \"<autogenerated>:0\")\n\tactual = actualSuiteCtxFuncReg.ReplaceAllString(actual, \"InitializeScenario.func$1\")\n\tactualTrimmed := actual\n\tactual = trimAllLines(actual)\n\n\treturn assertExpectedAndActual(assert.Equal, expected, actual, actualTrimmed)\n}\n\nfunc (tc *godogFeaturesScenario) theRenderXMLWillBe(docstring *DocString) error {\n\texpectedString := docstring.Content\n\tactualString := tc.out.String()\n\n\tvar expected formatters.JunitPackageSuite\n\tif err := xml.Unmarshal([]byte(expectedString), &expected); err != nil {\n\t\treturn err\n\t}\n\n\tvar actual formatters.JunitPackageSuite\n\tif err := xml.Unmarshal([]byte(actualString), &actual); err != nil {\n\t\treturn err\n\t}\n\n\treturn assertExpectedAndActual(assert.Equal, expected, actual)\n}\n\nfunc assertExpectedAndActual(a expectedAndActualAssertion, expected, actual interface{}, msgAndArgs ...interface{}) error {\n\tvar t asserter\n\ta(&t, expected, actual, msgAndArgs...)\n\n\tif t.err != nil {\n\t\treturn t.err\n\t}\n\n\treturn t.err\n}\n\ntype expectedAndActualAssertion func(t assert.TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool\n\ntype asserter struct {\n\terr error\n}\n\nfunc (a *asserter) Errorf(format string, args ...interface{}) {\n\ta.err = fmt.Errorf(format, args...)\n}\n\nfunc trimAllLines(s string) string {\n\tvar lines []string\n\tfor _, ln := range strings.Split(strings.TrimSpace(s), \"\\n\") {\n\t\tlines = append(lines, strings.TrimSpace(ln))\n\t}\n\treturn strings.Join(lines, \"\\n\")\n}\n\nfunc TestScenarioContext_After_cancelled(t *testing.T) {\n\tctxDone := make(chan struct{})\n\tsuite := TestSuite{\n\t\tScenarioInitializer: func(scenarioContext *ScenarioContext) {\n\t\t\tscenarioContext.When(`^foo$`, func() {})\n\t\t\tscenarioContext.After(func(ctx context.Context, sc *Scenario, err error) (context.Context, error) {\n\t\t\t\tgo func() {\n\t\t\t\t\t<-ctx.Done()\n\t\t\t\t\tclose(ctxDone)\n\t\t\t\t}()\n\n\t\t\t\treturn ctx, nil\n\t\t\t})\n\t\t},\n\t\tOptions: &Options{\n\t\t\tFormat:   \"pretty\",\n\t\t\tTestingT: t,\n\t\t\tFeatureContents: []Feature{\n\t\t\t\t{\n\t\t\t\t\tName: \"Scenario Context Cancellation\",\n\t\t\t\t\tContents: []byte(`\nFeature: dummy\n  Scenario: Context should be cancelled by the end of scenario\n    When foo\n`),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\trequire.Equal(t, 0, suite.Run(), \"non-zero status returned, failed to run feature tests\")\n\n\tselect {\n\tcase <-ctxDone:\n\t\treturn\n\tcase <-time.After(5 * time.Second):\n\t\tassert.Fail(t, \"failed to wait for context cancellation\")\n\t}\n}\n\nfunc TestTestSuite_Run(t *testing.T) {\n\tfor _, tc := range []struct {\n\t\tname          string\n\t\tbody          string\n\t\tafterStepCnt  int\n\t\tbeforeStepCnt int\n\t\tlog           string\n\t\tnoStrict      bool\n\t\tsuitePasses   bool\n\t}{\n\t\t{\n\t\t\tname: \"fail_then_pass_fails_scenario\", afterStepCnt: 2, beforeStepCnt: 2,\n\t\t\tbody: `\n\t\t\t\t\tWhen step fails\n\t\t\t\t\tThen step passes`,\n\t\t\tlog: `\n\t\t\t\t\t>>>> Before suite\n\t\t\t\t\t>> Before scenario \"test\"\n\t\t\t\t\tBefore step \"step fails\"\n\t\t\t\t\tAfter step \"step fails\", error: oops, status: failed\n\t\t\t\t\t<< After scenario \"test\", error: oops\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: skipped\n\t\t\t\t\t<<<< After suite`,\n\t\t},\n\t\t{\n\t\t\tname: \"pending_then_pass_fails_scenario\", afterStepCnt: 2, beforeStepCnt: 2,\n\t\t\tbody: `\n\t\t\t\t\tWhen step is pending\n\t\t\t\t\tThen step passes`,\n\t\t\tlog: `\n\t\t\t\t\t>>>> Before suite\n\t\t\t\t\t>> Before scenario \"test\"\n\t\t\t\t\tBefore step \"step is pending\"\n\t\t\t\t\tAfter step \"step is pending\", error: step implementation is pending, status: pending\n\t\t\t\t\t<< After scenario \"test\", error: step implementation is pending\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: skipped\n\t\t\t\t\t<<<< After suite`,\n\t\t},\n\t\t{\n\t\t\tname: \"pending_then_pass_no_strict_doesnt_fail_scenario\", afterStepCnt: 2, beforeStepCnt: 2, noStrict: true, suitePasses: true,\n\t\t\tbody: `\n\t\t\t\t\tWhen step is pending\n\t\t\t\t\tThen step passes`,\n\t\t\tlog: `\n\t\t\t\t\t>>>> Before suite\n\t\t\t\t\t>> Before scenario \"test\"\n\t\t\t\t\tBefore step \"step is pending\"\n\t\t\t\t\tAfter step \"step is pending\", error: step implementation is pending, status: pending\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: skipped\n\t\t\t\t\t<< After scenario \"test\", error: <nil>\n\t\t\t\t\t<<<< After suite`,\n\t\t},\n\t\t{\n\t\t\tname: \"undefined_then_pass_no_strict_doesnt_fail_scenario\", afterStepCnt: 2, beforeStepCnt: 2, noStrict: true, suitePasses: true,\n\t\t\tbody: `\n\t\t\t\t\tWhen something unknown happens\n\t\t\t\t\tThen step passes`,\n\t\t\tlog: `\n\t\t\t\t\t>>>> Before suite\n\t\t\t\t\t>> Before scenario \"test\"\n\t\t\t\t\tBefore step \"something unknown happens\"\n\t\t\t\t\tAfter step \"something unknown happens\", error: step is undefined: something unknown happens, status: undefined\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: skipped\n\t\t\t\t\t<< After scenario \"test\", error: <nil>\n\t\t\t\t\t<<<< After suite`,\n\t\t},\n\t\t{\n\t\t\tname: \"undefined_then_pass_fails_scenario\", afterStepCnt: 2, beforeStepCnt: 2,\n\t\t\tbody: `\n\t\t\t\t\tWhen something unknown happens\n\t\t\t\t\tThen step passes`,\n\t\t\tlog: `\n\t\t\t\t\t>>>> Before suite\n\t\t\t\t\t>> Before scenario \"test\"\n\t\t\t\t\tBefore step \"something unknown happens\"\n\t\t\t\t\tAfter step \"something unknown happens\", error: step is undefined: something unknown happens, status: undefined\n\t\t\t\t\t<< After scenario \"test\", error: step is undefined: something unknown happens\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: skipped\n\t\t\t\t\t<<<< After suite`,\n\t\t},\n\t\t{\n\t\t\tname: \"fail_then_undefined_fails_scenario\", afterStepCnt: 2, beforeStepCnt: 2,\n\t\t\tbody: `\n\t\t\t\t\tWhen step fails\n\t\t\t\t\tThen something unknown happens`,\n\t\t\tlog: `\n\t\t\t\t\t>>>> Before suite\n\t\t\t\t\t>> Before scenario \"test\"\n\t\t\t\t\tBefore step \"step fails\"\n\t\t\t\t\tAfter step \"step fails\", error: oops, status: failed\n\t\t\t\t\t<< After scenario \"test\", error: oops\n\t\t\t\t\tBefore step \"something unknown happens\"\n\t\t\t\t\tAfter step \"something unknown happens\", error: step is undefined: something unknown happens, status: undefined\n\t\t\t\t\t<<<< After suite`,\n\t\t},\n\t\t{\n\t\t\tname: \"passes\", afterStepCnt: 2, beforeStepCnt: 2,\n\t\t\tbody: `\n\t\t\t\t\tWhen step passes\n\t\t\t\t\tThen step passes`,\n\t\t\tsuitePasses: true,\n\t\t\tlog: `\n\t\t\t\t\t>>>> Before suite\n\t\t\t\t\t>> Before scenario \"test\"\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\t<step action>\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: passed\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\t<step action>\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: passed\n\t\t\t\t\t<< After scenario \"test\", error: <nil>\n\t\t\t\t\t<<<< After suite`,\n\t\t},\n\t\t{\n\t\t\tname: \"skip_does_not_fail_scenario\", afterStepCnt: 2, beforeStepCnt: 2,\n\t\t\tbody: `\n\t\t\t\t\tWhen step skips scenario\n\t\t\t\t\tThen step fails`,\n\t\t\tsuitePasses: true,\n\t\t\tlog: `\n\t\t\t\t\t>>>> Before suite\n\t\t\t\t\t>> Before scenario \"test\"\n\t\t\t\t\tBefore step \"step skips scenario\"\n\t\t\t\t\tAfter step \"step skips scenario\", error: skipped, status: skipped\n\t\t\t\t\tBefore step \"step fails\"\n\t\t\t\t\tAfter step \"step fails\", error: <nil>, status: skipped\n\t\t\t\t\t<< After scenario \"test\", error: <nil>\n\t\t\t\t\t<<<< After suite`,\n\t\t},\n\t\t{\n\t\t\tname: \"multistep_passes\", afterStepCnt: 6, beforeStepCnt: 6,\n\t\t\tbody: `\n\t\t\t\t\tWhen multistep passes\n\t\t\t\t\tThen multistep passes`,\n\t\t\tsuitePasses: true,\n\t\t\tlog: `\n\t\t\t\t\t>>>> Before suite\n\t\t\t\t\t>> Before scenario \"test\"\n\t\t\t\t\tBefore step \"multistep passes\"\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\t<step action>\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: passed\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\t<step action>\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: passed\n\t\t\t\t\tAfter step \"multistep passes\", error: <nil>, status: passed\n\t\t\t\t\tBefore step \"multistep passes\"\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\t<step action>\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: passed\n\t\t\t\t\tBefore step \"step passes\"\n\t\t\t\t\t<step action>\n\t\t\t\t\tAfter step \"step passes\", error: <nil>, status: passed\n\t\t\t\t\tAfter step \"multistep passes\", error: <nil>, status: passed\n\t\t\t\t\t<< After scenario \"test\", error: <nil>\n\t\t\t\t\t<<<< After suite`,\n\t\t},\n\t\t{\n\t\t\tname: \"ambiguous\", afterStepCnt: 1, beforeStepCnt: 1,\n\t\t\tbody: `\n\t\t\t\t\tThen step is ambiguous`,\n\t\t\tlog: `\n\t\t\t\t\t>>>> Before suite\n\t\t\t\t\t>> Before scenario \"test\"\n\t\t\t\t\tBefore step \"step is ambiguous\"\n\t\t\t\t\tAfter step \"step is ambiguous\", error: ambiguous step definition, step text: step is ambiguous\n\t\t        \t            \t\tmatches:\n\t\t        \t            \t\t\t^step is ambiguous$\n\t\t        \t            \t\t\t^step is ambiguous$, status: ambiguous\n\t\t\t\t\t<< After scenario \"test\", error: ambiguous step definition, step text: step is ambiguous\n\t\t        \t            \t\tmatches:\n\t\t        \t            \t\t\t^step is ambiguous$\n\t\t        \t            \t\t\t^step is ambiguous$\n\t\t\t\t\t<<<< After suite`,\n\t\t},\n\t\t{\n\t\t\tname: \"ambiguous nested steps\", afterStepCnt: 1, beforeStepCnt: 1,\n\t\t\tbody: `\n\t\t\t\tThen multistep has ambiguous`,\n\t\t\tlog: `\n\t\t\t\t>>>> Before suite\n\t\t\t\t>> Before scenario \"test\"\n\t\t\t\tBefore step \"multistep has ambiguous\"\n\t\t\t\tAfter step \"multistep has ambiguous\", error: ambiguous step definition, step text: step is ambiguous\n            \t            \t\tmatches:\n            \t            \t\t\t^step is ambiguous$\n            \t            \t\t\t^step is ambiguous$, status: ambiguous\n\t\t\t\t<< After scenario \"test\", error: ambiguous step definition, step text: step is ambiguous\n            \t            \t\tmatches:\n            \t            \t\t\t^step is ambiguous$\n            \t            \t\t\t^step is ambiguous$\n\t\t\t\t<<<< After suite`,\n\t\t},\n\t} {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tafterScenarioCnt := 0\n\t\t\tbeforeScenarioCnt := 0\n\n\t\t\tafterStepCnt := 0\n\t\t\tbeforeStepCnt := 0\n\n\t\t\tvar log string\n\n\t\t\tsuite := TestSuite{\n\t\t\t\tTestSuiteInitializer: func(suiteContext *TestSuiteContext) {\n\t\t\t\t\tsuiteContext.BeforeSuite(func() {\n\t\t\t\t\t\tlog += fmt.Sprintln(\">>>> Before suite\")\n\t\t\t\t\t})\n\n\t\t\t\t\tsuiteContext.AfterSuite(func() {\n\t\t\t\t\t\tlog += fmt.Sprintln(\"<<<< After suite\")\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\tScenarioInitializer: func(s *ScenarioContext) {\n\t\t\t\t\ts.Before(func(ctx context.Context, sc *Scenario) (context.Context, error) {\n\t\t\t\t\t\tlog += fmt.Sprintf(\">> Before scenario %q\\n\", sc.Name)\n\t\t\t\t\t\tbeforeScenarioCnt++\n\n\t\t\t\t\t\treturn ctx, nil\n\t\t\t\t\t})\n\n\t\t\t\t\ts.After(func(ctx context.Context, sc *Scenario, err error) (context.Context, error) {\n\t\t\t\t\t\tlog += fmt.Sprintf(\"<< After scenario %q, error: %v\\n\", sc.Name, err)\n\t\t\t\t\t\tafterScenarioCnt++\n\n\t\t\t\t\t\treturn ctx, nil\n\t\t\t\t\t})\n\n\t\t\t\t\ts.StepContext().Before(func(ctx context.Context, st *Step) (context.Context, error) {\n\t\t\t\t\t\tlog += fmt.Sprintf(\"Before step %q\\n\", st.Text)\n\t\t\t\t\t\tbeforeStepCnt++\n\n\t\t\t\t\t\treturn ctx, nil\n\t\t\t\t\t})\n\n\t\t\t\t\ts.StepContext().After(func(ctx context.Context, st *Step, status StepResultStatus, err error) (context.Context, error) {\n\t\t\t\t\t\tlog += fmt.Sprintf(\"After step %q, error: %v, status: %s\\n\", st.Text, err, status.String())\n\t\t\t\t\t\tafterStepCnt++\n\n\t\t\t\t\t\treturn ctx, nil\n\t\t\t\t\t})\n\n\t\t\t\t\ts.Step(\"^step fails$\", func() error {\n\t\t\t\t\t\treturn errors.New(\"oops\")\n\t\t\t\t\t})\n\n\t\t\t\t\ts.Step(\"^step skips scenario$\", func() error {\n\t\t\t\t\t\treturn ErrSkip\n\t\t\t\t\t})\n\n\t\t\t\t\ts.Step(\"^step passes$\", func() {\n\t\t\t\t\t\tlog += \"<step action>\\n\"\n\t\t\t\t\t})\n\n\t\t\t\t\ts.Step(\"^multistep passes$\", func() Steps {\n\t\t\t\t\t\treturn Steps{\"step passes\", \"step passes\"}\n\t\t\t\t\t})\n\n\t\t\t\t\ts.Step(\"pending\", func() error {\n\t\t\t\t\t\treturn ErrPending\n\t\t\t\t\t})\n\n\t\t\t\t\ts.Step(\"^step is ambiguous$\", func() {\n\t\t\t\t\t\tlog += \"<step action>\\n\"\n\t\t\t\t\t})\n\t\t\t\t\ts.Step(\"^step is ambiguous$\", func() {\n\t\t\t\t\t\tlog += \"<step action>\\n\"\n\t\t\t\t\t})\n\t\t\t\t\ts.Step(\"^multistep has ambiguous$\", func() Steps {\n\t\t\t\t\t\treturn Steps{\"step is ambiguous\"}\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\tOptions: &Options{\n\t\t\t\t\tFormat:   \"pretty\",\n\t\t\t\t\tStrict:   !tc.noStrict,\n\t\t\t\t\tNoColors: true,\n\t\t\t\t\tFeatureContents: []Feature{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: tc.name,\n\t\t\t\t\t\t\tContents: []byte(trimAllLines(`\n\t\t\t\t\t\t\t\tFeature: test\n\t\t\t\t\t\t\t\tScenario: test\n\t\t\t\t\t\t\t\t` + tc.body)),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\n\t\t\tsuitePasses := suite.Run() == 0\n\t\t\tassert.Equal(t, tc.suitePasses, suitePasses)\n\t\t\tassert.Equal(t, 1, afterScenarioCnt)\n\t\t\tassert.Equal(t, 1, beforeScenarioCnt)\n\t\t\tassert.Equal(t, tc.afterStepCnt, afterStepCnt)\n\t\t\tassert.Equal(t, tc.beforeStepCnt, beforeStepCnt)\n\t\t\tassert.Equal(t, trimAllLines(tc.log), trimAllLines(log), log)\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "test_context.go",
          "type": "blob",
          "size": 11.2978515625,
          "content": "package godog\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"regexp\"\n\n\t\"github.com/cucumber/godog/formatters\"\n\t\"github.com/cucumber/godog/internal/builder\"\n\t\"github.com/cucumber/godog/internal/flags\"\n\t\"github.com/cucumber/godog/internal/models\"\n\tmessages \"github.com/cucumber/messages/go/v21\"\n)\n\n// GherkinDocument represents gherkin document.\ntype GherkinDocument = messages.GherkinDocument\n\n// Scenario represents the executed scenario\ntype Scenario = messages.Pickle\n\n// Step represents the executed step\ntype Step = messages.PickleStep\n\n// Steps allows to nest steps\n// instead of returning an error in step func\n// it is possible to return combined steps:\n//\n//\tfunc multistep(name string) godog.Steps {\n//\t  return godog.Steps{\n//\t    fmt.Sprintf(`an user named \"%s\"`, name),\n//\t    fmt.Sprintf(`user \"%s\" is authenticated`, name),\n//\t  }\n//\t}\n//\n// These steps will be matched and executed in\n// sequential order. The first one which fails\n// will result in main step failure.\ntype Steps []string\n\n// StepDefinition is a registered step definition\n// contains a StepHandler and regexp which\n// is used to match a step. Args which\n// were matched by last executed step\n//\n// This structure is passed to the formatter\n// when step is matched and is either failed\n// or successful\ntype StepDefinition = formatters.StepDefinition\n\n// DocString represents the DocString argument made to a step definition\ntype DocString = messages.PickleDocString\n\n// Table represents the Table argument made to a step definition\ntype Table = messages.PickleTable\n\n// TestSuiteContext allows various contexts\n// to register event handlers.\n//\n// When running a test suite, the instance of TestSuiteContext\n// is passed to all functions (contexts), which\n// have it as a first and only argument.\n//\n// Note that all event hooks does not catch panic errors\n// in order to have a trace information\ntype TestSuiteContext struct {\n\tbeforeSuiteHandlers []func()\n\tafterSuiteHandlers  []func()\n\n\tsuite *suite\n}\n\n// BeforeSuite registers a function or method\n// to be run once before suite runner.\n//\n// Use it to prepare the test suite for a spin.\n// Connect and prepare database for instance...\nfunc (ctx *TestSuiteContext) BeforeSuite(fn func()) {\n\tctx.beforeSuiteHandlers = append(ctx.beforeSuiteHandlers, fn)\n}\n\n// AfterSuite registers a function or method\n// to be run once after suite runner\nfunc (ctx *TestSuiteContext) AfterSuite(fn func()) {\n\tctx.afterSuiteHandlers = append(ctx.afterSuiteHandlers, fn)\n}\n\n// ScenarioContext allows registering scenario hooks.\nfunc (ctx *TestSuiteContext) ScenarioContext() *ScenarioContext {\n\treturn &ScenarioContext{\n\t\tsuite: ctx.suite,\n\t}\n}\n\n// ScenarioContext allows various contexts\n// to register steps and event handlers.\n//\n// When running a scenario, the instance of ScenarioContext\n// is passed to all functions (contexts), which\n// have it as a first and only argument.\n//\n// Note that all event hooks does not catch panic errors\n// in order to have a trace information. Only step\n// executions are catching panic error since it may\n// be a context specific error.\ntype ScenarioContext struct {\n\tsuite *suite\n}\n\n// StepContext allows registering step hooks.\ntype StepContext struct {\n\tsuite *suite\n}\n\n// Before registers a function or method\n// to be run before every scenario.\n//\n// It is a good practice to restore the default state\n// before every scenario, so it would be isolated from\n// any kind of state.\nfunc (ctx ScenarioContext) Before(h BeforeScenarioHook) {\n\tctx.suite.beforeScenarioHandlers = append(ctx.suite.beforeScenarioHandlers, h)\n}\n\n// BeforeScenarioHook defines a hook before scenario.\ntype BeforeScenarioHook func(ctx context.Context, sc *Scenario) (context.Context, error)\n\n// After registers a function or method\n// to be run after every scenario.\nfunc (ctx ScenarioContext) After(h AfterScenarioHook) {\n\tctx.suite.afterScenarioHandlers = append(ctx.suite.afterScenarioHandlers, h)\n}\n\n// AfterScenarioHook defines a hook after scenario.\ntype AfterScenarioHook func(ctx context.Context, sc *Scenario, err error) (context.Context, error)\n\n// StepContext exposes StepContext of a scenario.\nfunc (ctx ScenarioContext) StepContext() StepContext {\n\treturn StepContext(ctx)\n}\n\n// Before registers a function or method\n// to be run before every step.\nfunc (ctx StepContext) Before(h BeforeStepHook) {\n\tctx.suite.beforeStepHandlers = append(ctx.suite.beforeStepHandlers, h)\n}\n\n// BeforeStepHook defines a hook before step.\ntype BeforeStepHook func(ctx context.Context, st *Step) (context.Context, error)\n\n// After registers a function or method\n// to be run after every step.\n//\n// It may be convenient to return a different kind of error\n// in order to print more state details which may help\n// in case of step failure\n//\n// In some cases, for example when running a headless\n// browser, to take a screenshot after failure.\nfunc (ctx StepContext) After(h AfterStepHook) {\n\tctx.suite.afterStepHandlers = append(ctx.suite.afterStepHandlers, h)\n}\n\n// AfterStepHook defines a hook after step.\ntype AfterStepHook func(ctx context.Context, st *Step, status StepResultStatus, err error) (context.Context, error)\n\n// BeforeScenario registers a function or method\n// to be run before every scenario.\n//\n// It is a good practice to restore the default state\n// before every scenario, so it would be isolated from\n// any kind of state.\n//\n// Deprecated: use Before.\nfunc (ctx ScenarioContext) BeforeScenario(fn func(sc *Scenario)) {\n\tctx.Before(func(ctx context.Context, sc *Scenario) (context.Context, error) {\n\t\tfn(sc)\n\n\t\treturn ctx, nil\n\t})\n}\n\n// AfterScenario registers a function or method\n// to be run after every scenario.\n//\n// Deprecated: use After.\nfunc (ctx ScenarioContext) AfterScenario(fn func(sc *Scenario, err error)) {\n\tctx.After(func(ctx context.Context, sc *Scenario, err error) (context.Context, error) {\n\t\tfn(sc, err)\n\n\t\treturn ctx, nil\n\t})\n}\n\n// BeforeStep registers a function or method\n// to be run before every step.\n//\n// Deprecated: use ScenarioContext.StepContext() and StepContext.Before.\nfunc (ctx ScenarioContext) BeforeStep(fn func(st *Step)) {\n\tctx.StepContext().Before(func(ctx context.Context, st *Step) (context.Context, error) {\n\t\tfn(st)\n\n\t\treturn ctx, nil\n\t})\n}\n\n// AfterStep registers a function or method\n// to be run after every step.\n//\n// It may be convenient to return a different kind of error\n// in order to print more state details which may help\n// in case of step failure\n//\n// In some cases, for example when running a headless\n// browser, to take a screenshot after failure.\n//\n// Deprecated: use ScenarioContext.StepContext() and StepContext.After.\nfunc (ctx ScenarioContext) AfterStep(fn func(st *Step, err error)) {\n\tctx.StepContext().After(func(ctx context.Context, st *Step, status StepResultStatus, err error) (context.Context, error) {\n\t\tfn(st, err)\n\n\t\treturn ctx, nil\n\t})\n}\n\n// Step allows to register a *StepDefinition in the\n// Godog feature suite, the definition will be applied\n// to all steps matching the given Regexp expr.\n//\n// It will panic if expr is not a valid regular\n// expression or stepFunc is not a valid step\n// handler.\n//\n// The expression can be of type: *regexp.Regexp, string or []byte\n//\n// The stepFunc may accept one or several arguments of type:\n// - int, int8, int16, int32, int64\n// - float32, float64\n// - string\n// - []byte\n// - *godog.DocString\n// - *godog.Table\n//\n// The stepFunc need to return either an error or []string for multistep\n//\n// Note that if there are two definitions which may match\n// the same step, then only the first matched handler\n// will be applied.\n//\n// If none of the *StepDefinition is matched, then\n// ErrUndefined error will be returned when\n// running steps.\nfunc (ctx ScenarioContext) Step(expr, stepFunc interface{}) {\n\tctx.stepWithKeyword(expr, stepFunc, formatters.None)\n}\n\n// Given functions identically to Step, but the *StepDefinition\n// will only be matched if the step starts with \"Given\". \"And\"\n// and \"But\" keywords copy the keyword of the last step for the\n// purpose of matching.\nfunc (ctx ScenarioContext) Given(expr, stepFunc interface{}) {\n\tctx.stepWithKeyword(expr, stepFunc, formatters.Given)\n}\n\n// When functions identically to Step, but the *StepDefinition\n// will only be matched if the step starts with \"When\". \"And\"\n// and \"But\" keywords copy the keyword of the last step for the\n// purpose of matching.\nfunc (ctx ScenarioContext) When(expr, stepFunc interface{}) {\n\tctx.stepWithKeyword(expr, stepFunc, formatters.When)\n}\n\n// Then functions identically to Step, but the *StepDefinition\n// will only be matched if the step starts with \"Then\". \"And\"\n// and \"But\" keywords copy the keyword of the last step for the\n// purpose of matching.\nfunc (ctx ScenarioContext) Then(expr, stepFunc interface{}) {\n\tctx.stepWithKeyword(expr, stepFunc, formatters.Then)\n}\n\nfunc (ctx ScenarioContext) stepWithKeyword(expr interface{}, stepFunc interface{}, keyword formatters.Keyword) {\n\tvar regex *regexp.Regexp\n\n\t// Validate the first input param is regex compatible\n\tswitch t := expr.(type) {\n\tcase *regexp.Regexp:\n\t\tregex = t\n\tcase string:\n\t\tregex = regexp.MustCompile(t)\n\tcase []byte:\n\t\tregex = regexp.MustCompile(string(t))\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"expecting expr to be a *regexp.Regexp or a string or []byte, got type: %T\", expr))\n\t}\n\n\t// Validate that the handler is a function.\n\thandlerType := reflect.TypeOf(stepFunc)\n\tif handlerType.Kind() != reflect.Func {\n\t\tpanic(fmt.Sprintf(\"expected handler to be func, but got: %T\", stepFunc))\n\t}\n\n\t// FIXME = Validate the handler function param types here so\n\t// that any errors are discovered early.\n\t// StepDefinition.Run defines the supported types but fails at run time not registration time\n\n\t// Validate the function's return types.\n\thelpPrefix := \"expected handler to return one of error or context.Context or godog.Steps or (context.Context, error)\"\n\tisNested := false\n\n\tnumOut := handlerType.NumOut()\n\tswitch numOut {\n\tcase 0:\n\t\t// No return values.\n\tcase 1:\n\t\t// One return value: should be error, Steps, or context.Context.\n\t\toutType := handlerType.Out(0)\n\t\tif outType == reflect.TypeOf(Steps{}) {\n\t\t\tisNested = true\n\t\t} else {\n\t\t\tif outType != errorInterface && outType != contextInterface {\n\t\t\t\tpanic(fmt.Sprintf(\"%s, but got: %v\", helpPrefix, outType))\n\t\t\t}\n\t\t}\n\tcase 2:\n\t\t// Two return values: should be (context.Context, error).\n\t\tif handlerType.Out(0) != contextInterface || handlerType.Out(1) != errorInterface {\n\t\t\tpanic(fmt.Sprintf(\"%s, but got: %v, %v\", helpPrefix, handlerType.Out(0), handlerType.Out(1)))\n\t\t}\n\tdefault:\n\t\t// More than two return values.\n\t\tpanic(fmt.Sprintf(\"expected handler to return either zero, one or two values, but it has: %d\", numOut))\n\t}\n\n\t// Register the handler\n\tdef := &models.StepDefinition{\n\t\tStepDefinition: formatters.StepDefinition{\n\t\t\tHandler: stepFunc,\n\t\t\tExpr:    regex,\n\t\t\tKeyword: keyword,\n\t\t},\n\t\tHandlerValue: reflect.ValueOf(stepFunc),\n\t\tNested:       isNested,\n\t}\n\n\t// stash the step\n\tctx.suite.steps = append(ctx.suite.steps, def)\n}\n\n// Build creates a test package like go test command at given target path.\n// If there are no go files in tested directory, then\n// it simply builds a godog executable to scan features.\n//\n// If there are go test files, it first builds a test\n// package with standard go test command.\n//\n// Finally, it generates godog suite executable which\n// registers exported godog contexts from the test files\n// of tested package.\n//\n// Returns the path to generated executable\nfunc Build(bin string) error {\n\treturn builder.Build(bin)\n}\n\ntype Feature = flags.Feature\n"
        },
        {
          "name": "test_context_test.go",
          "type": "blob",
          "size": 4.087890625,
          "content": "package godog\n\nimport (\n\t\"context\"\n\t\"regexp\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestScenarioContext_Step(t *testing.T) {\n\tctx := ScenarioContext{suite: &suite{}}\n\tre := `(?:it is a test)?.{10}x*`\n\n\ttype tc struct {\n\t\tf func()\n\t\tn string\n\t\tp interface{}\n\t}\n\n\tfor _, c := range []tc{\n\t\t{n: \"ScenarioContext should accept steps defined with regexp.Regexp\",\n\t\t\tf: func() { ctx.Step(regexp.MustCompile(re), okVoidResult) }},\n\t\t{n: \"ScenarioContext should accept steps defined with bytes slice\",\n\t\t\tf: func() { ctx.Step([]byte(re), okVoidResult) }},\n\n\t\t{n: \"ScenarioContext should accept steps handler with no return\",\n\t\t\tf: func() { ctx.Step(\".*\", okVoidResult) }},\n\t\t{n: \"ScenarioContext should accept steps handler with error return\",\n\t\t\tf: func() { ctx.Step(\".*\", okErrorResult) }},\n\t\t{n: \"ScenarioContext should accept steps handler with godog.Steps return\",\n\t\t\tf: func() { ctx.Step(\".*\", okStepsResult) }},\n\t\t{n: \"ScenarioContext should accept steps handler with (Context, error) return\",\n\t\t\tf: func() { ctx.Step(\".*\", okContextErrorResult) }},\n\t} {\n\t\tt.Run(c.n, func(t *testing.T) {\n\t\t\tassert.NotPanics(t, c.f)\n\t\t})\n\t}\n\n\tfor _, c := range []tc{\n\t\t{n: \"ScenarioContext should panic if step expression is neither a string, regex or byte slice\",\n\t\t\tp: \"expecting expr to be a *regexp.Regexp or a string or []byte, got type: int\",\n\t\t\tf: func() { ctx.Step(1251, okVoidResult) }},\n\t\t{n: \"ScenarioContext should panic if step handler is not a function\",\n\t\t\tp: \"expected handler to be func, but got: int\",\n\t\t\tf: func() { ctx.Step(\".*\", 124) }},\n\t\t{n: \"ScenarioContext should panic if step handler has more than 2 return values\",\n\t\t\tp: \"expected handler to return either zero, one or two values, but it has: 3\",\n\t\t\tf: func() { ctx.Step(\".*\", nokLimitCase3) }},\n\t\t{n: \"ScenarioContext should panic if step handler has more than 2 return values (5)\",\n\t\t\tp: \"expected handler to return either zero, one or two values, but it has: 5\",\n\t\t\tf: func() { ctx.Step(\".*\", nokLimitCase5) }},\n\n\t\t{n: \"ScenarioContext should panic if step expression is neither a string, regex or byte slice\",\n\t\t\tp: \"expecting expr to be a *regexp.Regexp or a string or []byte, got type: int\",\n\t\t\tf: func() { ctx.Step(1251, okVoidResult) }},\n\n\t\t{n: \"ScenarioContext should panic if step return type is []string\",\n\t\t\tp: \"expected handler to return one of error or context.Context or godog.Steps or (context.Context, error), but got: []string\",\n\t\t\tf: func() { ctx.Step(\".*\", nokSliceStringResult) }},\n\t\t{n: \"ScenarioContext should panic if step handler return type is not an error or string slice or void (interface)\",\n\t\t\tp: \"expected handler to return one of error or context.Context or godog.Steps or (context.Context, error), but got: interface {}\",\n\t\t\tf: func() { ctx.Step(\".*\", nokInvalidReturnInterfaceType) }},\n\t\t{n: \"ScenarioContext should panic if step handler return type is not an error or string slice or void (slice)\",\n\t\t\tp: \"expected handler to return one of error or context.Context or godog.Steps or (context.Context, error), but got: []int\",\n\t\t\tf: func() { ctx.Step(\".*\", nokInvalidReturnSliceType) }},\n\t\t{n: \"ScenarioContext should panic if step handler return type is not an error or string slice or void (other)\",\n\t\t\tp: \"expected handler to return one of error or context.Context or godog.Steps or (context.Context, error), but got: chan int\",\n\t\t\tf: func() { ctx.Step(\".*\", nokInvalidReturnOtherType) }},\n\t} {\n\t\tt.Run(c.n, func(t *testing.T) {\n\t\t\tassert.PanicsWithValue(t, c.p, c.f)\n\t\t})\n\t}\n}\n\nfunc okVoidResult()                                  {}\nfunc okErrorResult() error                           { return nil }\nfunc okStepsResult() Steps                           { return nil }\nfunc okContextErrorResult() (context.Context, error) { return nil, nil }\nfunc nokSliceStringResult() []string                 { return nil }\nfunc nokLimitCase3() (string, int, error)            { return \"\", 0, nil }\nfunc nokLimitCase5() (int, int, int, int, error)     { return 0, 0, 0, 0, nil }\nfunc nokInvalidReturnInterfaceType() interface{}     { return 0 }\nfunc nokInvalidReturnSliceType() []int               { return nil }\nfunc nokInvalidReturnOtherType() chan int            { return nil }\n"
        },
        {
          "name": "testingt.go",
          "type": "blob",
          "size": 5.6318359375,
          "content": "package godog\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n)\n\n// T returns a TestingT compatible interface from the current test context. It will return nil if\n// called outside the context of a test. This can be used with (for example) testify's assert and\n// require packages.\nfunc T(ctx context.Context) TestingT {\n\treturn getTestingT(ctx)\n}\n\n// TestingT is a subset of the public methods implemented by go's testing.T. It allows assertion\n// libraries to be used with godog, provided they depend only on this subset of methods.\ntype TestingT interface {\n\t// Name returns the name of the current pickle under test\n\tName() string\n\t// Log will log to the current testing.T log if set, otherwise it will log to stdout\n\tLog(args ...interface{})\n\t// Logf will log a formatted string to the current testing.T log if set, otherwise it will log\n\t// to stdout\n\tLogf(format string, args ...interface{})\n\t// Error fails the current test and logs the provided arguments. Equivalent to calling Log then\n\t// Fail.\n\tError(args ...interface{})\n\t// Errorf fails the current test and logs the formatted message. Equivalent to calling Logf then\n\t// Fail.\n\tErrorf(format string, args ...interface{})\n\t// Fail marks the current test as failed, but does not halt execution of the step.\n\tFail()\n\t// FailNow marks the current test as failed and halts execution of the step.\n\tFailNow()\n\t// Fatal logs the provided arguments, marks the test as failed and halts execution of the step.\n\tFatal(args ...interface{})\n\t// Fatal logs the formatted message, marks the test as failed and halts execution of the step.\n\tFatalf(format string, args ...interface{})\n\t// Skip logs the provided arguments and marks the test as skipped but does not halt execution\n\t// of the step.\n\tSkip(args ...interface{})\n\t// Skipf logs the formatted message and marks the test as skipped but does not halt execution\n\t// of the step.\n\tSkipf(format string, args ...interface{})\n\t// SkipNow marks the current test as skipped and halts execution of the step.\n\tSkipNow()\n\t// Skipped returns true if the test has been marked as skipped.\n\tSkipped() bool\n}\n\n// Logf will log test output. If called in the context of a test and testing.T has been registered,\n// this will log using the step's testing.T, else it will simply log to stdout.\nfunc Logf(ctx context.Context, format string, args ...interface{}) {\n\tif t := getTestingT(ctx); t != nil {\n\t\tt.Logf(format, args...)\n\t\treturn\n\t}\n\tfmt.Printf(format+\"\\n\", args...)\n}\n\n// Log will log test output. If called in the context of a test and testing.T has been registered,\n// this will log using the step's testing.T, else it will simply log to stdout.\nfunc Log(ctx context.Context, args ...interface{}) {\n\tif t := getTestingT(ctx); t != nil {\n\t\tt.Log(args...)\n\t\treturn\n\t}\n\tfmt.Println(args...)\n}\n\n// LoggedMessages returns an array of any logged messages that have been recorded during the test\n// through calls to godog.Log / godog.Logf or via operations against godog.T(ctx)\nfunc LoggedMessages(ctx context.Context) []string {\n\tif t := getTestingT(ctx); t != nil {\n\t\treturn t.logMessages\n\t}\n\treturn nil\n}\n\n// errStopNow should be returned inside a panic within the test to immediately halt execution of that\n// test\nvar errStopNow = fmt.Errorf(\"FailNow or SkipNow called\")\n\ntype testingT struct {\n\tname         string\n\tt            *testing.T\n\tfailed       bool\n\tskipped      bool\n\tfailMessages []string\n\tlogMessages  []string\n}\n\n// check interface against our testingT and the upstream testing.B/F/T:\nvar (\n\t_ TestingT = &testingT{}\n\t_ TestingT = (*testing.T)(nil)\n)\n\nfunc (dt *testingT) Name() string {\n\tif dt.t != nil {\n\t\treturn dt.t.Name()\n\t}\n\treturn dt.name\n}\n\nfunc (dt *testingT) Log(args ...interface{}) {\n\tdt.logMessages = append(dt.logMessages, fmt.Sprint(args...))\n\tif dt.t != nil {\n\t\tdt.t.Log(args...)\n\t\treturn\n\t}\n\tfmt.Println(args...)\n}\n\nfunc (dt *testingT) Logf(format string, args ...interface{}) {\n\tdt.logMessages = append(dt.logMessages, fmt.Sprintf(format, args...))\n\tif dt.t != nil {\n\t\tdt.t.Logf(format, args...)\n\t\treturn\n\t}\n\tfmt.Printf(format+\"\\n\", args...)\n}\n\nfunc (dt *testingT) Error(args ...interface{}) {\n\tdt.Log(args...)\n\tdt.failMessages = append(dt.failMessages, fmt.Sprintln(args...))\n\tdt.Fail()\n}\n\nfunc (dt *testingT) Errorf(format string, args ...interface{}) {\n\tdt.Logf(format, args...)\n\tdt.failMessages = append(dt.failMessages, fmt.Sprintf(format, args...))\n\tdt.Fail()\n}\n\nfunc (dt *testingT) Fail() {\n\tdt.failed = true\n}\n\nfunc (dt *testingT) FailNow() {\n\tdt.Fail()\n\tpanic(errStopNow)\n}\n\nfunc (dt *testingT) Fatal(args ...interface{}) {\n\tdt.Log(args...)\n\tdt.FailNow()\n}\n\nfunc (dt *testingT) Fatalf(format string, args ...interface{}) {\n\tdt.Logf(format, args...)\n\tdt.FailNow()\n}\n\nfunc (dt *testingT) Skip(args ...interface{}) {\n\tdt.Log(args...)\n\tdt.skipped = true\n}\n\nfunc (dt *testingT) Skipf(format string, args ...interface{}) {\n\tdt.Logf(format, args...)\n\tdt.skipped = true\n}\n\nfunc (dt *testingT) SkipNow() {\n\tdt.skipped = true\n\tpanic(errStopNow)\n}\n\nfunc (dt *testingT) Skipped() bool {\n\treturn dt.skipped\n}\n\n// isFailed will return an error representing the calls to Fail made during this test\nfunc (dt *testingT) isFailed() error {\n\tif dt.skipped {\n\t\treturn ErrSkip\n\t}\n\tif !dt.failed {\n\t\treturn nil\n\t}\n\tswitch len(dt.failMessages) {\n\tcase 0:\n\t\treturn fmt.Errorf(\"fail called on TestingT\")\n\tcase 1:\n\t\treturn fmt.Errorf(dt.failMessages[0])\n\tdefault:\n\t\treturn fmt.Errorf(\"checks failed:\\n* %s\", strings.Join(dt.failMessages, \"\\n* \"))\n\t}\n}\n\ntype testingTCtxVal struct{}\n\nfunc setContextTestingT(ctx context.Context, dt *testingT) context.Context {\n\treturn context.WithValue(ctx, testingTCtxVal{}, dt)\n}\n\nfunc getTestingT(ctx context.Context) *testingT {\n\tdt, ok := ctx.Value(testingTCtxVal{}).(*testingT)\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn dt\n}\n"
        },
        {
          "name": "utils_test.go",
          "type": "blob",
          "size": 0.4658203125,
          "content": "package godog\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/cucumber/godog/internal/utils\"\n)\n\n// this zeroes the time throughout whole test suite\n// and makes it easier to assert output\n// activated only when godog tests are being run\nfunc init() {\n\tutils.TimeNowFunc = func() time.Time {\n\t\treturn time.Time{}\n\t}\n}\n\nfunc TestTimeNowFunc(t *testing.T) {\n\tnow := utils.TimeNowFunc()\n\tif !now.IsZero() {\n\t\tt.Fatalf(\"expected zeroed time, but got: %s\", now.Format(time.RFC3339))\n\t}\n}\n"
        }
      ]
    }
  ]
}