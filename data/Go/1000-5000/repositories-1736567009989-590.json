{
  "metadata": {
    "timestamp": 1736567009989,
    "page": 590,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "link1st/gowebsocket",
      "stars": 2903,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2587890625,
          "content": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n.idea/\n*.swp\n*.log\n.DS_Store\nconfig/app.yaml\nmain\nmain_linux\ngowebsocket"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.53125,
          "content": "Copyright 2019 link1st\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.0322265625,
          "content": ".PHONY: run\nrun:\n\tgo run main.go\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 39.0302734375,
          "content": "# 基于websocket单台机器支持百万连接分布式聊天(IM)系统\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/link1st/gowebsocket)](https://pkg.go.dev/github.com/link1st/gowebsocket/v2)\n[![Release](https://img.shields.io/github/v/release/link1st/gowebsocket)](https://github.com/link1st/gowebsocket/releases)\n[![Go Report Card](https://goreportcard.com/badge/github.com/link1st/gowebsocket/v2)](https://goreportcard.com/report/github.com/link1st/gowebsocket/v2)\n[![OpenIssue](https://img.shields.io/github/issues/link1st/gowebsocket)](https://github.com/link1st/gowebsocket/issues)\n[![ClosedIssue](https://img.shields.io/github/issues-closed/link1st/gowebsocket)](https://github.com/link1st/gowebsocket/issues?q=is%3Aissue+is%3Aclosed)\n![Stars](https://img.shields.io/github/stars/link1st/gowebsocket)\n![Forks](https://img.shields.io/github/forks/link1st/gowebsocket)\n[![Stargazers over time](https://starchart.cc/link1st/gowebsocket.svg?variant=adaptive)](https://starchart.cc/link1st/gowebsocket)\n\n本文将介绍如何实现一个基于websocket分布式聊天(IM)系统。\n\n使用golang实现websocket通讯，单机可以支持百万连接，使用gin框架、nginx负载、可以水平部署、程序内部相互通讯、使用grpc通讯协议。\n\n本文内容比较长，如果直接想clone项目体验直接进入[项目体验](#12-项目体验) [goWebSocket项目下载](#4goWebSocket-项目) ,文本从介绍webSocket是什么开始，然后开始介绍这个项目，以及在Nginx中配置域名做webSocket的转发，然后介绍如何搭建一个分布式系统。\n\n\n## 目录\n- [1、项目说明](#1项目说明)\n    - [1.1 goWebSocket](#11-goWebSocket)\n    - [1.2 项目体验](#12-项目体验)\n- [2、介绍webSocket](#2介绍webSocket)\n    - [2.1 webSocket 是什么](#21-webSocket-是什么)\n    - [2.2 webSocket的兼容性](#22-webSocket的兼容性)\n    - [2.3 为什么要用webSocket](#23-为什么要用webSocket)\n    - [2.4 webSocket建立过程](#24-webSocket建立过程)\n- [3、如何实现基于webSocket的长连接系统](#3如何实现基于webSocket的长连接系统)\n    - [3.1 使用go实现webSocket服务端](#31-使用go实现webSocket服务端)\n        - [3.1.1 启动端口监听](#311-启动端口监听)\n        - [3.1.2 升级协议](#312-升级协议)\n        - [3.1.3 客户端连接的管理](#313-客户端连接的管理)\n        - [3.1.4 注册客户端的socket的写的异步处理程序](#314-注册客户端的socket的写的异步处理程序)\n        - [3.1.5 注册客户端的socket的读的异步处理程序](#315-注册客户端的socket的读的异步处理程序)\n        - [3.1.6 接收客户端数据并处理](#316-接收客户端数据并处理)\n        - [3.1.7 使用路由的方式处理客户端的请求数据](#317-使用路由的方式处理客户端的请求数据)\n        - [3.1.8 防止内存溢出和Goroutine不回收](#318-防止内存溢出和Goroutine不回收)\n    - [3.2 使用javaScript实现webSocket客户端](#32-使用javaScript实现webSocket客户端)\n        - [3.2.1 启动并注册监听程序](#321-启动并注册监听程序)\n        - [3.2.2 发送数据](#322-发送数据)\n    - [3.3 发送消息](#33-发送消息)\n        - [3.3.1 文本消息](#331-文本消息)\n        - [3.3.2 图片和语言消息](#332-图片和语言消息)\n- [4、goWebSocket 项目](#4goWebSocket-项目)\n    - [4.1 项目说明](#41-项目说明)\n    - [4.2 项目依赖](#42-项目依赖)\n    - [4.3 项目启动](#43-项目启动)\n    - [4.4 接口文档](#44-接口文档)\n        - [4.4.1 HTTP接口文档](#441-HTTP接口文档)\n            - [4.4.1.1 接口说明](#4411-接口说明)\n            - [4.4.1.2 聊天页面](#4412-聊天页面)\n            - [4.4.1.3 获取房间用户列表](#4413-获取房间用户列表)\n            - [4.4.1.4 查询用户是否在线](#4414-查询用户是否在线)\n            - [4.4.1.5 给用户发送消息](#4415-给用户发送消息)\n            - [4.4.1.6 给全员用户发送消息](#4416-给全员用户发送消息)\n        - [4.4.2 RPC接口文档](#442-RPC接口文档)\n            - [4.4.2.1 接口说明](#4421-接口说明)\n            - [4.4.2.2 查询用户是否在线](#4422-查询用户是否在线)\n            - [4.4.2.3 发送消息](#4423-发送消息)\n            - [4.4.2.4 给指定房间所有用户发送消息](#4424-给指定房间所有用户发送消息)\n            - [4.4.2.5 获取房间内全部用户](#4425-获取房间内全部用户)\n- [5、webSocket项目Nginx配置](#5webSocket项目Nginx配置)\n    - [5.1 为什么要配置Nginx](#51-为什么要配置Nginx)\n    - [5.2 nginx配置](#52-nginx配置)\n    - [5.3 问题处理](#53-问题处理)\n- [6、压测](#6压测)\n    - [6.1 Linux内核优化](#61-Linux内核优化)\n    - [6.2 压测准备](#62-压测准备)\n    - [6.3 压测数据](#63-压测数据)\n- [7、如何基于webSocket实现一个分布式Im](#7如何基于webSocket实现一个分布式Im)\n    - [7.1 说明](#71-说明)\n    - [7.2 架构](#72-架构)\n    - [7.3 分布式系统部署](#73-分布式系统部署)\n- [8、回顾和反思](#8回顾和反思)\n    - [8.1 在其它系统应用](#81-在其它系统应用)\n    - [8.2 需要完善、优化](#82-需要完善优化)\n    - [8.3 总结](#83-总结)\n- [9、参考文献](#9参考文献)\n\n\n## 1、项目说明\n#### 1.1 goWebSocket\n\n本文将介绍如何实现一个基于websocket聊天(IM)分布式系统。\n\n使用golang实现websocket通讯，单机支持百万连接，使用gin框架、nginx负载、可以水平部署、程序内部相互通讯、使用grpc通讯协议。\n\n- 一般项目中webSocket使用的架构图\n![网站架构图](img/%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n#### 1.2 项目体验\n- [项目地址 gowebsocket](https://github.com/link1st/gowebsocket)\n- [IM-聊天首页](http://im.91vh.com/home/index) 或者在新的窗口打开 http://im.91vh.com/home/index\n- 打开连接以后进入聊天界面\n- 多人群聊可以同时打开两个窗口\n\n## 2、介绍webSocket\n### 2.1 webSocket 是什么\nWebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。\n\n它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。\n\n- HTTP和WebSocket在通讯过程的比较\n![HTTP协议和WebSocket比较](img/HTTP%E5%8D%8F%E8%AE%AE%E5%92%8CWebSocket%E6%AF%94%E8%BE%83.png)\n\n- HTTP和webSocket都支持配置证书，`ws://` 无证书 `wss://` 配置证书的协议标识\n![HTTP协议和WebSocket比较](img/HTTP%E5%8D%8F%E8%AE%AE%E5%92%8CWebSocket%E6%AF%94%E8%BE%83.jpeg)\n\n### 2.2 webSocket的兼容性\n- 浏览器的兼容性，开始支持webSocket的版本\n\n![浏览器开始支持webSocket的版本](img/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%A7%8B%E6%94%AF%E6%8C%81webSocket%E7%9A%84%E7%89%88%E6%9C%AC.jpeg)\n\n- 服务端的支持\n\ngolang、java、php、node.js、python、nginx 都有不错的支持\n\n- Android和IOS的支持\n\nAndroid可以使用java-webSocket对webSocket支持\n\niOS 4.2及更高版本具有WebSockets支持\n\n### 2.3 为什么要用webSocket\n- 1. 从业务上出发，需要一个主动通达客户端的能力\n> 目前大多数的请求都是使用HTTP，都是由客户端发起一个请求，有服务端处理，然后返回结果，不可以服务端主动向某一个客户端主动发送数据 \n\n![服务端处理一个请求](img/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82.jpeg)\n- 2. 大多数场景我们需要主动通知用户，如:聊天系统、用户完成任务主动告诉用户、一些运营活动需要通知到在线的用户\n- 3. 可以获取用户在线状态\n- 4. 在没有长连接的时候通过客户端主动轮询获取数据\n- 5. 可以通过一种方式实现，多种不同平台(H5/Android/IOS)去使用\n\n### 2.4 webSocket建立过程\n- 1. 客户端先发起升级协议的请求\n\n客户端发起升级协议的请求，采用标准的HTTP报文格式，在报文中添加头部信息 \n\n`Connection: Upgrade`表明连接需要升级\n\n`Upgrade: websocket`需要升级到 websocket协议\n\n`Sec-WebSocket-Version: 13` 协议的版本为13\n\n`Sec-WebSocket-Key: I6qjdEaqYljv3+9x+GrhqA==` 这个是base64 encode 的值，是浏览器随机生成的，与服务器响应的 `Sec-WebSocket-Accept`对应\n\n```\n# Request Headers\nConnection: Upgrade\nHost: im.91vh.com\nOrigin: http://im.91vh.com\nPragma: no-cache\nSec-WebSocket-Extensions: permessage-deflate; client_max_window_bits\nSec-WebSocket-Key: I6qjdEaqYljv3+9x+GrhqA==\nSec-WebSocket-Version: 13\nUpgrade: websocket\n```\n\n![浏览器 Network](img/%E6%B5%8F%E8%A7%88%E5%99%A8%20Network.png)\n\n- 2. 服务器响应升级协议\n\n服务端接收到升级协议的请求，如果服务端支持升级协议会做如下响应\n\n返回: \n\n`Status Code: 101 Switching Protocols` 表示支持切换协议\n\n```\n# Response Headers\nConnection: upgrade\nDate: Fri, 09 Aug 2019 07:36:59 GMT\nSec-WebSocket-Accept: mB5emvxi2jwTUhDdlRtADuBax9E=\nServer: nginx/1.12.1\nUpgrade: websocket\n```\n\n- 3. 升级协议完成以后，客户端和服务器就可以相互发送数据\n\n![websocket接收和发送数据](img/websocket%E6%8E%A5%E6%94%B6%E5%92%8C%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE.png)\n\n## 3、如何实现基于webSocket的长连接系统\n\n### 3.1 使用go实现webSocket服务端\n\n#### 3.1.1 启动端口监听\n- websocket需要监听端口，所以需要在`golang` 程序的 `main` 函数中用协程的方式去启动程序\n- **main.go** 实现启动\n\n```\ngo websocket.StartWebSocket()\n```\n- **init_acc.go** 启动程序\n\n```\n// 启动程序\nfunc StartWebSocket() {\n\thttp.HandleFunc(\"/acc\", wsPage)\n\thttp.ListenAndServe(\":8089\", nil)\n}\n```\n\n#### 3.1.2 升级协议\n- 客户端是通过http请求发送到服务端，我们需要对http协议进行升级为websocket协议\n- 对http请求协议进行升级 golang 库[gorilla/websocket](https://github.com/gorilla/websocket) 已经做得很好了，我们直接使用就可以了\n- 在实际使用的时候，建议每个连接使用两个协程处理客户端请求数据和向客户端发送数据，虽然开启协程会占用一些内存，但是读取分离，减少收发数据堵塞的可能\n- **init_acc.go**\n\n```\nfunc wsPage(w http.ResponseWriter, req *http.Request) {\n\n\t// 升级协议\n\tconn, err := (&websocket.Upgrader{CheckOrigin: func(r *http.Request) bool {\n\t\tfmt.Println(\"升级协议\", \"ua:\", r.Header[\"User-Agent\"], \"referer:\", r.Header[\"Referer\"])\n\n\t\treturn true\n\t}}).Upgrade(w, req, nil)\n\tif err != nil {\n\t\thttp.NotFound(w, req)\n\n\t\treturn\n\t}\n\n\tfmt.Println(\"webSocket 建立连接:\", conn.RemoteAddr().String())\n\n\tcurrentTime := uint64(time.Now().Unix())\n\tclient := NewClient(conn.RemoteAddr().String(), conn, currentTime)\n\n\tgo client.read()\n\tgo client.write()\n\n\t// 用户连接事件\n\tclientManager.Register <- client\n}\n```\n\n#### 3.1.3 客户端连接的管理\n- 当前程序有多少用户连接，还需要对用户广播的需要，这里我们就需要一个管理者(clientManager)，处理这些事件:\n- 记录全部的连接、登录用户的可以通过 **appID+uuid** 查到用户连接\n- 使用map存储，就涉及到多协程并发读写的问题，所以需要加读写锁\n- 定义四个channel ，分别处理客户端建立连接、用户登录、断开连接、全员广播事件\n\n```\n// 连接管理\ntype ClientManager struct {\n\tClients     map[*Client]bool   // 全部的连接\n\tClientsLock sync.RWMutex       // 读写锁\n\tUsers       map[string]*Client // 登录的用户 // appID+uuid\n\tUserLock    sync.RWMutex       // 读写锁\n\tRegister    chan *Client       // 连接连接处理\n\tLogin       chan *login        // 用户登录处理\n\tUnregister  chan *Client       // 断开连接处理程序\n\tBroadcast   chan []byte        // 广播 向全部成员发送数据\n}\n\n// 初始化\nfunc NewClientManager() (clientManager *ClientManager) {\n\tclientManager = &ClientManager{\n\t\tClients:    make(map[*Client]bool),\n\t\tUsers:      make(map[string]*Client),\n\t\tRegister:   make(chan *Client, 1000),\n\t\tLogin:      make(chan *login, 1000),\n\t\tUnregister: make(chan *Client, 1000),\n\t\tBroadcast:  make(chan []byte, 1000),\n\t}\n\n\treturn\n}\n```\n\n#### 3.1.4 注册客户端的socket的写的异步处理程序\n- 防止发生程序崩溃，所以需要捕获异常\n- 为了显示异常崩溃位置这里使用`string(debug.Stack())`打印调用堆栈信息\n- 如果写入数据失败了，可能连接有问题，就关闭连接\n- **client.go**\n\n```\n// 向客户端写数据\nfunc (c *Client) write() {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tfmt.Println(\"write stop\", string(debug.Stack()), r)\n\n\t\t}\n\t}()\n\n\tdefer func() {\n\t\tclientManager.Unregister <- c\n\t\tc.Socket.Close()\n\t\tfmt.Println(\"Client发送数据 defer\", c)\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase message, ok := <-c.Send:\n\t\t\tif !ok {\n\t\t\t\t// 发送数据错误 关闭连接\n\t\t\t\tfmt.Println(\"Client发送数据 关闭连接\", c.Addr, \"ok\", ok)\n\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tc.Socket.WriteMessage(websocket.TextMessage, message)\n\t\t}\n\t}\n}\n```\n\n#### 3.1.5 注册客户端的socket的读的异步处理程序\n- 循环读取客户端发送的数据并处理\n- 如果读取数据失败了，关闭channel\n- **client.go**\n\n```\n// 读取客户端数据\nfunc (c *Client) read() {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tfmt.Println(\"write stop\", string(debug.Stack()), r)\n\t\t}\n\t}()\n\n\tdefer func() {\n\t\tfmt.Println(\"读取客户端数据 关闭send\", c)\n\t\tclose(c.Send)\n\t}()\n\n\tfor {\n\t\t_, message, err := c.Socket.ReadMessage()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"读取客户端数据 错误\", c.Addr, err)\n\n\t\t\treturn\n\t\t}\n\n\t\t// 处理程序\n\t\tfmt.Println(\"读取客户端数据 处理:\", string(message))\n\t\tProcessData(c, message)\n\t}\n}\n```\n\n#### 3.1.6 接收客户端数据并处理\n- 约定发送和接收请求数据格式，为了js处理方便，采用了`json`的数据格式发送和接收数据(人类可以阅读的格式在工作开发中使用是比较方便的)\n\n- 登录发送数据示例:\n```\n{\"seq\":\"1565336219141-266129\",\"cmd\":\"login\",\"data\":{\"userID\":\"马远\",\"appID\":101}}\n```\n- 登录响应数据示例:\n```\n{\"seq\":\"1565336219141-266129\",\"cmd\":\"login\",\"response\":{\"code\":200,\"codeMsg\":\"Success\",\"data\":null}}\n```\n- websocket是双向的数据通讯，可以连续发送，如果发送的数据需要服务端回复，就需要一个**seq**来确定服务端的响应是回复哪一次的请求数据\n- cmd 是用来确定动作，websocket没有类似于http的url,所以规定 cmd 是什么动作\n- 目前的动作有:login/heartbeat 用来发送登录请求和连接保活(长时间没有数据发送的长连接容易被浏览器、移动中间商、nginx、服务端程序断开)\n- 为什么需要AppID,UserID是表示用户的唯一字段，设计的时候为了做成通用性，设计AppID用来表示用户在哪个平台登录的(web、app、ios等)，方便后续扩展\n\n- **request_model.go** 约定的请求数据格式\n\n```\n/************************  请求数据  **************************/\n// 通用请求数据格式\ntype Request struct {\n\tSeq  string      `json:\"seq\"`            // 消息的唯一ID\n\tCmd  string      `json:\"cmd\"`            // 请求命令字\n\tData interface{} `json:\"data,omitempty\"` // 数据 json\n}\n\n// 登录请求数据\ntype Login struct {\n\tServiceToken string `json:\"serviceToken\"` // 验证用户是否登录\n\tAppID        uint32 `json:\"appID,omitempty\"`\n\tUserID       string `json:\"userID,omitempty\"`\n}\n\n// 心跳请求数据\ntype HeartBeat struct {\n\tUserID string `json:\"userID,omitempty\"`\n}\n```\n\n- **response_model.go**\n\n```\n/************************  响应数据  **************************/\ntype Head struct {\n\tSeq      string    `json:\"seq\"`      // 消息的ID\n\tCmd      string    `json:\"cmd\"`      // 消息的cmd 动作\n\tResponse *Response `json:\"response\"` // 消息体\n}\n\ntype Response struct {\n\tCode    uint32      `json:\"code\"`\n\tCodeMsg string      `json:\"codeMsg\"`\n\tData    interface{} `json:\"data\"` // 数据 json\n}\n\n```\n\n\n#### 3.1.7 使用路由的方式处理客户端的请求数据\n\n- 使用路由的方式处理由客户端发送过来的请求数据\n- 以后添加请求类型以后就可以用类是用http相类似的方式(router-controller)去处理\n- **acc_routers.go**\n\n```\n// Websocket 路由\nfunc WebsocketInit() {\n\twebsocket.Register(\"login\", websocket.LoginController)\n\twebsocket.Register(\"heartbeat\", websocket.HeartbeatController)\n}\n```\n\n#### 3.1.8 防止内存溢出和Goroutine不回收\n- 1. 定时任务清除超时连接\n没有登录的连接和登录的连接6分钟没有心跳则断开连接\n\n**client_manager.go**\n\n```\n// 定时清理超时连接\nfunc ClearTimeoutConnections() {\n    currentTime := uint64(time.Now().Unix())\n\n    for client := range clientManager.Clients {\n        if client.IsHeartbeatTimeout(currentTime) {\n            fmt.Println(\"心跳时间超时 关闭连接\", client.Addr, client.UserID, client.LoginTime, client.HeartbeatTime)\n\n            client.Socket.Close()\n        }\n    }\n}\n```\n\n- 2. 读写的Goroutine有一个失败，则相互关闭\n`write()`Goroutine写入数据失败，关闭`c.Socket.Close()`连接，会关闭`read()`Goroutine\n`read()`Goroutine读取数据失败，关闭`close(c.Send)`连接，会关闭`write()`Goroutine\n\n- 3. 客户端主动关闭\n关闭读写的Goroutine\n从`ClientManager`删除连接\n\n- 4. 监控用户连接、Goroutine数\n十个内存溢出有九个和Goroutine有关\n添加一个http的接口，可以查看系统的状态，防止Goroutine不回收\n[查看系统状态](http://im.91vh.com/system/state?isDebug=true)\n\n- 5. Nginx 配置不活跃的连接释放时间，防止忘记关闭的连接\n\n- 6. 使用 pprof 分析性能、耗时\n\n### 3.2 使用javaScript实现webSocket客户端\n#### 3.2.1 启动并注册监听程序\n- js 建立连接，并处理连接成功、收到数据、断开连接的事件处理\n\n```\nws = new WebSocket(\"ws://127.0.0.1:8089/acc\");\n\n \nws.onopen = function(evt) {\n  console.log(\"Connection open ...\");\n};\n \nws.onmessage = function(evt) {\n  console.log( \"Received Message: \" + evt.data);\n  data_array = JSON.parse(evt.data);\n  console.log( data_array);\n};\n \nws.onclose = function(evt) {\n  console.log(\"Connection closed.\");\n};\n\n```\n\n\n#### 3.2.2 发送数据\n- 需要注意:连接建立成功以后才可以发送数据\n- 建立连接以后由客户端向服务器发送数据示例\n\n```\n登录:\nws.send('{\"seq\":\"2323\",\"cmd\":\"login\",\"data\":{\"userID\":\"11\",\"appID\":101}}');\n\n心跳:\nws.send('{\"seq\":\"2324\",\"cmd\":\"heartbeat\",\"data\":{}}');\n\nping 查看服务是否正常:\nws.send('{\"seq\":\"2325\",\"cmd\":\"ping\",\"data\":{}}');\n\n关闭连接:\nws.close();\n```\n\n## 3.3 发送消息\n### 3.3.1 文本消息\n\n客户端只要知道发送用户是谁，还有内容就可以显示文本消息，这里我们重点关注一下数据部分\n\ntarget：定义接收的目标，目前未设置\n\ntype：消息的类型，text 文本消息 img 图片消息 \n\nmsg：文本消息内容\n\nfrom：消息的发送者\n\n文本消息的结构:\n\n```json\n{\n  \"seq\": \"1569080188418-747717\",\n  \"cmd\": \"msg\",\n  \"response\": {\n    \"code\": 200,\n    \"codeMsg\": \"Ok\",\n    \"data\": {\n      \"target\": \"\",\n      \"type\": \"text\",\n      \"msg\": \"hello\",\n      \"from\": \"马超\"\n    }\n  }\n}\n```\n\n这样一个文本消息的结构就设计完成了，客户端在接收到消息内容就可以展现到 IM 界面上\n\n### 3.3.2 图片和语言消息\n\n发送图片消息，发送消息者的客户端需要先把图片上传到文件服务器，上传成功以后获得图片访问的 URL，然后由发送消息者的客户端需要将图片 URL 发送到 gowebsocket，gowebsocket 图片的消息格式发送给目标客户端，消息接收者客户端接收到图片的 URL 就可以显示图片消息。\n\n图片消息的结构:\n\n```\n{\n  \"type\": \"img\",\n  \"from\": \"马超\",\n  \"url\": \"http://91vh.com/images/home_logo.png\",\n  \"secret\": \"消息鉴权 secret\",\n  \"size\": {\n    \"width\": 480,\n    \"height\": 720\n  }\n}\n```\n\n语言消息、和视频消息和图片消息类似，都是先把文件上传服务器，然后通过 gowebsocket 传递文件的 URL，需要注意的是部分消息涉及到隐私的文件，文件访问的时候需要做好鉴权信息，不能让非接收用户也能查看到别人的消息内容。\n\n## 4、goWebSocket 项目\n### 4.1 项目说明\n- 本项目是基于webSocket实现的分布式IM系统\n- 客户端随机分配用户名，所有人进入一个聊天室，实现群聊的功能\n- 单台机器(24核128G内存)支持百万客户端连接\n- 支持水平部署，部署的机器之间可以相互通讯\n\n- 项目架构图\n![网站架构图](img/%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n### 4.2 项目依赖\n\n- 本项目只需要使用 redis 和 golang \n- 本项目使用govendor管理依赖，克隆本项目就可以直接使用\n\n```\n# 主要使用到的包\ngithub.com/gin-gonic/gin@v1.4.0\ngithub.com/redis/go-redis/v9\ngithub.com/gorilla/websocket\ngithub.com/spf13/viper\ngoogle.golang.org/grpc\ngithub.com/golang/protobuf\n```\n\n\n### 4.3 项目启动 \n- 克隆项目\n\n```\ngit clone git@github.com:link1st/gowebsocket.git\n# 或\ngit clone https://github.com/link1st/gowebsocket.git\n```\n- 修改项目配置\n\n```\ncd gowebsocket\ncd config\nmv app.yaml.example app.yaml\n# 修改项目监听端口，redis连接等(默认127.0.0.1:3306)\nvim app.yaml\n# 返回项目目录，为以后启动做准备\ncd ..\n```\n- 配置文件说明\n\n```\napp:\n  logFile: log/gin.log # 日志文件位置\n  httpPort: 8080 # http端口\n  webSocketPort: 8089 # webSocket端口\n  rpcPort: 9001 # 分布式部署程序内部通讯端口\n  httpUrl: 127.0.0.1:8080\n  webSocketUrl:  127.0.0.1:8089\n\n\nredis:\n  addr: \"localhost:6379\"\n  password: \"\"\n  DB: 0\n  poolSize: 30\n  minIDleConns: 30\n```\n\n- 启动项目\n\n```\ngo run main.go\n```\n\n- 进入IM聊天地址\n[http://127.0.0.1:8080/home/index](http://127.0.0.1:8080/home/index)\n- 到这里，就可以体验到基于webSocket的IM系统\n\n#### 4.4 接口文档 \n###### 4.4.1.1 接口说明\n##### 4.4.1 HTTP接口文档\n- 在接口开发和接口文档使用的过程中，规范开发流程，减少沟通成本，所以约定一下接口开发流程和文档说明\n- 接口地址\n\n 线上:http://im.91vh.com\n\n 测试:http://im.91vh.com\n\n\n###### 4.4.1.2 聊天页面\n- 地址:/home/index\n- 请求方式:GET\n- 接口说明:聊天页面\n- 请求参数:\n\n|  参数   |  必填   |  类型  |  说明   |  示例   |\n| :----: | :----: | :----: | :----: | :----: |\n| appID   |   是    | uint32 | appID/房间ID |   101      |\n\n- 返回参数:\n无\n\n\n###### 4.4.1.3 获取房间用户列表\n- 地址:/user/list\n- 请求方式:GET/POST\n- 接口说明:获取房间用户列表\n- 请求参数:\n\n|  参数   |  必填   |  类型  |  说明   |  示例   |\n| :----: | :----: | :----: | :----: | :----: |\n| appID   |   是    | uint32 | appID/房间ID |   101      |\n\n- 返回参数:\n\n|  参数   |  必填   |  类型  |  说明   |  示例   |\n| :----: | :----: | :----: | :----: | :----: |\n| code   |   是    | int   | 错误码  |   200  |\n| msg    |   是    | string| 错误信息 |Success |\n| data   |   是    | array | 返回数据 |        |\n| userCount   |   是    | int   | 房间内用户总数  |   1    |\n| userList| 是 | list  | 用户列表 |        |\n\n- 示例:\n\n```json\n{\n    \"code\": 200,\n    \"msg\": \"Success\",\n    \"data\": {\n        \"userCount\": 1,\n        \"userList\": [\n            \"黄帝\"\n        ]\n    }\n}\n```\n\n###### 4.4.1.4 查询用户是否在线\n- 地址:/user/online\n- 请求方式:GET/POST\n- 接口说明:查询用户是否在线\n- 请求参数:\n\n|  参数   |  必填   |  类型  |  说明   |  示例   |\n| :----: | :----: | :----: | :----: | :----: |\n| appID   |   是    | uint32 | appID/房间ID |   101      |\n| userID   |   是    | string | 用户ID |   黄帝     |\n\n- 返回参数:\n\n|  参数   |  必填   |  类型  |  说明   |  示例   |\n| :----: | :----: | :----: | :----: | :----: |\n| code   |   是    | int   | 错误码  |   200  |\n| msg    |   是    | string| 错误信息 |Success |\n| data   |   是    | array | 返回数据 |        |\n| online   |   是    | bool   | 发送结果 true:在线 false:不在线  |   true    |\n| userID   |   是    | string | 用户ID |   黄帝     |\n\n- 示例:\n\n```json\n{\n    \"code\": 200,\n    \"msg\": \"Success\",\n    \"data\": {\n        \"online\": true,\n        \"userID\": \"黄帝\"\n    }\n}\n```\n\n###### 4.4.1.5 给用户发送消息\n- 地址:/user/sendMessage\n- 请求方式:GET/POST\n- 接口说明:给用户发送消息\n- 请求参数:\n\n|  参数   |  必填   |  类型  |  说明   |  示例   |\n| :----: | :----: | :----: | :----: | :----: |\n| appID   |   是    | uint32 | appID/房间ID |   101      |\n| userID   |   是    | string | 用户id |   黄帝      |\n| msgID   |   是    | string | 消息ID |   避免重复发送      |\n| message   |   是    | string | 消息内容 |   hello      |\n\n- 返回参数:\n\n|  参数   |  必填   |  类型  |  说明   |  示例   |\n| :----: | :----: | :----: | :----: | :----: |\n| code   |   是    | int   | 错误码  |   200  |\n| msg    |   是    | string| 错误信息 |Success |\n| data   |   是    | array | 返回数据 |        |\n| sendResults   |   是    | bool   | 发送结果 true:成功 false:失败  |   true    |\n\n- 示例:\n\n```json\n{\n    \"code\": 200,\n    \"msg\": \"Success\",\n    \"data\": {\n        \"sendResults\": true\n    }\n}\n```\n\n###### 4.4.1.6 给全员用户发送消息\n- 地址:/user/sendMessageAll\n- 请求方式:GET/POST\n- 接口说明:给全员用户发送消息\n- 请求参数:\n\n|  参数   |  必填   |  类型  |  说明   |  示例   |\n| :----: | :----: | :----: | :----: | :----: |\n| appID   |   是    | uint32 | appID/房间ID |   101      |\n| userID   |   是    | string | 用户id |   黄帝      |\n| msgID   |   是    | string | 消息ID |   避免重复发送      |\n| message   |   是    | string | 消息内容 |   hello      |\n\n- 返回参数:\n\n|  参数   |  必填   |  类型  |  说明   |  示例   |\n| :----: | :----: | :----: | :----: | :----: |\n| code   |   是    | int   | 错误码  |   200  |\n| msg    |   是    | string| 错误信息 |Success |\n| data   |   是    | array | 返回数据 |        |\n| sendResults   |   是    | bool   | 发送结果 true:成功 false:失败  |   true    |\n\n- 示例:\n\n```json\n{\n    \"code\": 200,\n    \"msg\": \"Success\",\n    \"data\": {\n        \"sendResults\": true\n    }\n}\n```\n\n##### 4.4.2 RPC接口文档\n###### 4.4.2.1 接口说明\n- 接口协议结构体\n```proto\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\noption java_package = \"io.grpc.examples.protobuf\";\noption java_outer_classname = \"ProtobufProto\";\n\n\npackage protobuf;\n\n// The AccServer service definition.\nservice AccServer {\n    // 查询用户是否在线\n    rpc QueryUsersOnline (QueryUsersOnlineReq) returns (QueryUsersOnlineRsp) {\n    }\n    // 发送消息\n    rpc SendMsg (SendMsgReq) returns (SendMsgRsp) {\n    }\n    // 给这台机器的房间内所有用户发送消息\n    rpc SendMsgAll (SendMsgAllReq) returns (SendMsgAllRsp) {\n    }\n    // 获取用户列表\n    rpc GetUserList (GetUserListReq) returns (GetUserListRsp) {\n    }\n}\n\n// 查询用户是否在线\nmessage QueryUsersOnlineReq {\n    uint32 appID = 1; // AppID\n    string userID = 2; // 用户ID\n}\n\nmessage QueryUsersOnlineRsp {\n    uint32 retCode = 1;\n    string errMsg = 2;\n    bool online = 3;\n}\n\n// 发送消息\nmessage SendMsgReq {\n    string seq = 1; // 序列号\n    uint32 appID = 2; // appID/房间ID\n    string userID = 3; // 用户ID\n    string cms = 4; // cms 动作: msg/enter/exit\n    string type = 5; // type 消息类型，默认是 text\n    string msg = 6; // msg\n    bool isLocal = 7; // 是否查询本机 acc内部调用为:true(本机查询不到即结束)\n}\n\nmessage SendMsgRsp {\n    uint32 retCode = 1;\n    string errMsg = 2;\n    string sendMsgID = 3;\n}\n\n// 给这台机器的房间内所有用户发送消息\nmessage SendMsgAllReq {\n    string seq = 1; // 序列号\n    uint32 appID = 2; // appID/房间ID\n    string userID = 3; // 不发送的用户ID\n    string cms = 4; // cms 动作: msg/enter/exit\n    string type = 5; // type 消息类型，默认是 text\n    string msg = 6; // msg\n}\n\nmessage SendMsgAllRsp {\n    uint32 retCode = 1;\n    string errMsg = 2;\n    string sendMsgID = 3;\n}\n\n// 获取用户列表\nmessage GetUserListReq {\n    uint32 appID = 1;\n}\n\nmessage GetUserListRsp {\n    uint32 retCode = 1;\n    string errMsg = 2;\n    repeated string userID = 3;\n}\n```\n\n###### 4.4.2.2 查询用户是否在线\n- 参考上述协议结构体\n\n###### 4.4.2.3 发送消息\n###### 4.4.2.4 给指定房间所有用户发送消息\n###### 4.4.2.5 获取房间内全部用户\n\n## 5、webSocket项目Nginx配置\n### 5.1 为什么要配置Nginx\n- 使用nginx实现内外网分离，对外只暴露Nginx的Ip(一般的互联网企业会在nginx之前加一层LVS做负载均衡)，减少入侵的可能\n- 支持配置 ssl 证书，使用 `wss` 的方式实现数据加密，减少数据被抓包和篡改的可能性\n- 使用Nginx可以利用Nginx的负载功能，前端再使用的时候只需要连接固定的域名，通过Nginx将流量分发了到不同的机器\n- 同时我们也可以使用Nginx的不同的负载策略(轮询、weight、ip_hash)\n\n### 5.2 nginx配置\n- 使用域名 **im.91vh.com** 为示例，参考配置\n- 一级目录**im.91vh.com/acc** 是给webSocket使用，是用nginx stream转发功能(nginx 1.3.31 开始支持，使用Tengine配置也是相同的)，转发到golang 8089 端口处理\n- 其它目录是给HTTP使用，转发到golang 8080 端口处理\n\n```\nupstream  go-im\n{\n    server 127.0.0.1:8080 weight=1 max_fails=2 fail_timeout=10s;\n    keepalive 16;\n}\n\nupstream  go-acc\n{\n    server 127.0.0.1:8089 weight=1 max_fails=2 fail_timeout=10s;\n    keepalive 16;\n}\n\n\nserver {\n    listen       80 ;\n    server_name  im.91vh.com;\n    index index.html index.htm ;\n\n\n    location /acc {\n        proxy_set_header Host $host;\n        proxy_pass http://go-acc;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_set_header Connection \"\";\n        proxy_redirect off;\n        proxy_intercept_errors on;\n        client_max_body_size 10m;\n    }\n\n    location /\n    {\n        proxy_set_header Host $host;\n        proxy_pass http://go-im;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        proxy_redirect off;\n        proxy_intercept_errors on;\n        client_max_body_size 30m;\n    }\n\n    access_log  /link/log/nginx/access/im.log;\n    error_log   /link/log/nginx/access/im.error.log;\n}\n```\n\n### 5.3 问题处理\n- 运行nginx测试命令，查看配置文件是否正确\n\n```\n/link/server/tengine/sbin/nginx -t\n\n```\n\n- 如果出现错误\n\n```\nnginx: [emerg] unknown \"connection_upgrade\" variable\nconfiguration file /link/server/tengine/conf/nginx.conf test failed\n```\n\n- 处理方法\n- 在**nginx.com**添加\n\n```\nhttp{\n\tfastcgi_temp_file_write_size 128k;\n..... # 需要添加的内容\n\n    #support websocket\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        ''      close;\n    }\n\n.....\n    gzip on;\n    \n}\n\n```\n\n- 原因:Nginx代理webSocket的时候就会遇到Nginx的设计问题 **End-to-end and Hop-by-hop Headers** \n\n\n## 6、压测\n### 6.1 Linux内核优化\n- 设置文件打开句柄数\n\n被压测服务器需要保持100W长连接，客户和服务器端是通过socket通讯的，每个连接需要建立一个socket，程序需要保持100W长连接就需要单个程序能打开100W个文件句柄\n\n```\n# 查看系统默认的值\nulimit -n\n# 设置最大打开文件数\nulimit -n 1000000\n```\n\n通过修改配置文件的方式修改程序最大打开句柄数\n\n```\nroot soft nofile 1040000\nroot hard nofile 1040000\n\nroot soft nofile 1040000\nroot hard nproc 1040000\n\nroot soft core unlimited\nroot hard core unlimited\n\n* soft nofile 1040000\n* hard nofile 1040000\n\n* soft nofile 1040000\n* hard nproc 1040000\n\n* soft core unlimited\n* hard core unlimited\n```\n\n修改完成以后需要重启机器配置才能生效\n\n- 修改系统级别文件句柄数量\n\nfile-max的值需要大于limits设置的值\n\n```\n# file-max 设置的值参考\ncat /proc/sys/fs/file-max\n12553500\n```\n\n- 设置sockets连接参数\n\n`vim /etc/sysctl.conf` \n\n```\n# 配置参考\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_tw_recycle = 0\nnet.ipv4.ip_local_port_range = 1024 65000\nnet.ipv4.tcp_mem = 786432 2097152 3145728\nnet.ipv4.tcp_rmem = 4096 4096 16777216\nnet.ipv4.tcp_wmem = 4096 4096 16777216\n```\n\n`sysctl -p` 修改配置以后使得配置生效命令\n\n### 6.2 压测准备\n- 待压测，如果大家有压测的结果欢迎补充\n- 后续会出专门的教程,从申请机器、写压测用例、内核优化、得出压测数据\n\n- **关于压测请移步**\n- [go实现的压测工具【单台机器100w连接压测实战】](https://github.com/link1st/go-stress-testing)\n- 用go语言实现一款压测工具，然后对本项目进行压测，实现单台机器100W长连接\n\n### 6.3 压测数据\n- 项目在实际使用的时候，每个连接约占 27Kb内存\n- 支持百万连接需要25G内存，单台机器实现百万长连接是可以实现的\n\n- 记录内存使用情况，分别记录了1W到100W连接数内存使用情况\n\n| 连接数      |  内存 |\n| :----:     | :----:|\n|   10000    | 281M  |\n|   100000   | 2.7g  |\n|   200000   | 5.4g  |\n|   500000   | 13.1g |\n|   1000000  | 25.8g |\n\n- [压测详细数据](https://github.com/link1st/go-stress-testing#65-%E5%8E%8B%E6%B5%8B%E6%95%B0%E6%8D%AE)\n\n## 7、如何基于webSocket实现一个分布式Im\n### 7.1 说明\n- 参考本项目源码\n- [gowebsocket v1.0.0 单机版Im系统](https://github.com/link1st/gowebsocket/tree/v1.0.0)\n- [gowebsocket v2.0.0 分布式Im系统](https://github.com/link1st/gowebsocket/tree/v2.0.0)\n\n- 为了方便演示，IM系统和webSocket(acc)系统合并在一个系统中\n- IM系统接口:\n获取全部在线的用户，查询当前服务的全部用户+集群中服务的全部用户\n发送消息，这里采用的是http接口发送(微信网页版发送消息也是http接口)，这里考虑主要是两点:\n1.服务分离，让acc系统尽量的简单一点，不掺杂其它业务逻辑\n2.发送消息是走http接口，不使用webSocket连接，采用收和发送数据分离的方式，可以加快收发数据的效率\n\n### 7.2 架构\n\n- 项目启动注册和用户连接时序图\n\n![用户连接时序图](img/%E7%94%A8%E6%88%B7%E8%BF%9E%E6%8E%A5%E6%97%B6%E5%BA%8F%E5%9B%BE.png)\n\n- 其它系统(IM、任务)向webSocket(acc)系统连接的用户发送消息时序图\n\n![分布是系统随机给用户发送消息](img/%E5%88%86%E5%B8%83%E6%98%AF%E7%B3%BB%E7%BB%9F%E9%9A%8F%E6%9C%BA%E7%BB%99%E7%94%A8%E6%88%B7%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF.png)\n\n### 7.3 分布式系统部署\n- 用水平部署两个项目(gowebsocket和gowebsocket1)演示分部署\n- 项目之间如何相互通讯:项目启动以后将项目Ip、rpcPort注册到redis中，让其它项目可以发现，需要通讯的时候使用gRpc进行通讯\n- gowebsocket\n\n```\n# app.yaml 配置文件信息\napp:\n  logFile: log/gin.log\n  httpPort: 8080\n  webSocketPort: 8089\n  rpcPort: 9001\n  httpUrl: im.91vh.com\n  webSocketUrl:  im.91vh.com\n\n# 在启动项目\ngo run main.go \n\n```\n\n- gowebsocket1 \n\n```\n# 将第一个项目拷贝一份\ncp -rf gowebsocket gowebsocket1\n# app.yaml 修改配置文件\napp:\n  logFile: log/gin.log\n  httpPort: 8081\n  webSocketPort: 8090\n  rpcPort: 9002\n  httpUrl: im.91vh.com\n  webSocketUrl:  im.91vh.com\n\n# 在启动第二个项目\ngo run main.go \n```\n\n- Nginx配置\n\n在之前Nginx配置项中添加第二台机器的Ip和端口\n\n```\nupstream  go-im\n{\n    server 127.0.0.1:8080 weight=1 max_fails=2 fail_timeout=10s;\n    server 127.0.0.1:8081 weight=1 max_fails=2 fail_timeout=10s;\n    keepalive 16;\n}\n\nupstream  go-acc\n{\n    server 127.0.0.1:8089 weight=1 max_fails=2 fail_timeout=10s;\n    server 127.0.0.1:8090 weight=1 max_fails=2 fail_timeout=10s;\n    keepalive 16;\n}\n```\n\n- 配置完成以后重启Nginx\n- 重启以后请求，验证是否符合预期:\n\n 查看请求是否落在两个项目上\n 实验两个用户分别连接不同的项目(gowebsocket和gowebsocket1)是否也可以相互发送消息\n\n- 关于分布式部署\n\n 本项目只是演示了这个项目如何分布式部署，以及分布式部署以后模块如何进行相互通讯\n 完全解决系统没有单点的故障，还需 Nginx集群、redis cluster等\n\n\n## 8、回顾和反思\n### 8.1 在其它系统应用\n- 本系统设计的初衷就是:和客户端保持一个长连接、对外部系统两个接口(查询用户是否在线、给在线的用户推送消息)，实现业务的分离\n- 只有和业务分离可，才可以供多个业务使用，而不是每个业务都建立一个长连接\n\n#### 8.2 已经实现的功能\n\n- gin log日志(请求日志+debug日志)\n- 读取配置文件 完成\n- 定时脚本，清理过期未心跳连接 完成\n- http接口，获取登录、连接数量 完成\n- http接口，发送push、查询有多少人在线 完成\n- grpc 程序内部通讯，发送消息 完成\n- appIDs 一个用户在多个平台登录\n- 界面，把所有在线的人拉倒一个群里面，发送消息 完成\n- ~~单聊~~、群聊 完成\n- 实现分布式，水平扩张 完成\n- 压测脚本\n- 文档整理\n- 文档目录、百万长连接的实现、为什么要实现一个IM、怎么实现一个Im \n- 架构图以及扩展\n\nIM实现细节:\n\n- 定义文本消息结构 完成\n- html发送文本消息 完成\n- 接口接收文本消息并发送给全体 完成\n- html接收到消息 显示到界面 完成\n- 界面优化 需要持续优化\n- 有人加入以后广播全体 完成\n- 定义加入聊天室的消息结构 完成\n- 引入机器人 待定\n\n### 8.2 需要完善、优化\n- 登录，使用微信登录 获取昵称、头像等\n- 有账号系统、资料系统\n- 界面优化、适配手机端\n- 消息 文本消息(支持表情)、图片、语音、视频消息\n- 微服务注册、发现、熔断等\n- 添加配置项，单台机器最大连接数量\n\n### 8.3 总结\n- 虽然实现了一个分布式在聊天的IM，但是有很多细节没有处理(登录没有鉴权、界面还待优化等)，但是可以通过这个示例可以了解到:通过WebSocket解决很多业务上需求\n- 本文虽然号称单台机器能有百万长连接(内存上能满足)，但是实际在场景远比这个复杂(cpu有些压力)，当然了如果你有这么大的业务量可以购买更多的机器更好的去支撑你的业务，本程序只是演示如何在实际工作用使用webSocket.\n- 参考本文，你可以实现出来符合你需要的程序\n\n### 9、参考文献\n\n[维基百科 WebSocket](https://zh.wikipedia.org/wiki/WebSocket)\n\n[阮一峰 WebSocket教程](http://www.ruanyifeng.com/blog/2017/05/websocket.html)\n\n[WebSocket协议：5分钟从入门到精通](https://www.cnblogs.com/chyingp/p/websocket-deep-in.html)\n\n[go-stress-testing 单台机器100w连接压测实战](https://github.com/link1st/go-stress-testing)\n\ngithub 搜:link1st 查看项目 gowebsocket\n\n[https://github.com/link1st/gowebsocket](https://github.com/link1st/gowebsocket)\n\n### 意见反馈\n\n- 在项目中遇到问题可以直接在这里找找答案或者提问 [issues](https://github.com/link1st/gowebsocket/issues)\n- 也可以添加我的微信(申请信息填写:公司、姓名，我好备注下)，直接反馈给我\n<br/>\n<p align=\"center\">\n     <img border=\"0\" src=\"img/微信二维码.jpeg\" alt=\"添加link1st的微信\" width=\"200\"/>\n</p>\n\n### 赞助商\n\n- 感谢[JetBrains](https://www.jetbrains.com/?from=gowebsocket)对本项目的支持！\n<br/>\n<p align=\"center\">\n    <a href=\"https://www.jetbrains.com/?from=gowebsocket\">\n        <img border=\"0\" src=\"img/jetbrains_logo.png\" width=\"200\"/>\n    </a>\n</p>\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "controllers",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.3310546875,
          "content": "module github.com/link1st/gowebsocket/v2\n\ngo 1.18\n\nrequire (\n\tgithub.com/gin-gonic/gin v1.9.1\n\tgithub.com/golang/protobuf v1.5.3\n\tgithub.com/gorilla/websocket v1.4.2\n\tgithub.com/redis/go-redis/v9 v9.0.3\n\tgithub.com/spf13/viper v1.4.1-0.20190728125013-1b33e8258e07\n\tgoogle.golang.org/grpc v1.56.3\n\tgoogle.golang.org/protobuf v1.33.0\n)\n\nrequire (\n\tgithub.com/bytedance/sonic v1.9.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.2.0 // indirect\n\tgithub.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect\n\tgithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect\n\tgithub.com/fsnotify/fsnotify v1.4.8-0.20190312181446-1485a34d5d57 // indirect\n\tgithub.com/gabriel-vasile/mimetype v1.4.2 // indirect\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\n\tgithub.com/go-playground/locales v0.14.1 // indirect\n\tgithub.com/go-playground/universal-translator v0.18.1 // indirect\n\tgithub.com/go-playground/validator/v10 v10.14.0 // indirect\n\tgithub.com/goccy/go-json v0.10.2 // indirect\n\tgithub.com/hashicorp/hcl v1.0.1-0.20190611123218-cf7d376da96d // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.4 // indirect\n\tgithub.com/leodido/go-urn v1.2.4 // indirect\n\tgithub.com/magiconair/properties v1.8.1 // indirect\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgithub.com/mitchellh/mapstructure v1.1.2 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/pelletier/go-toml v1.4.1-0.20190725070617-84da2c4a25c5 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.0.8 // indirect\n\tgithub.com/spf13/afero v1.1.2 // indirect\n\tgithub.com/spf13/cast v1.3.1-0.20190531093228-c01685bb8421 // indirect\n\tgithub.com/spf13/jwalterweatherman v1.1.0 // indirect\n\tgithub.com/spf13/pflag v1.0.4-0.20181223182923-24fa6976df40 // indirect\n\tgithub.com/subosito/gotenv v1.1.1 // indirect\n\tgithub.com/twitchyliquid64/golang-asm v0.15.1 // indirect\n\tgithub.com/ugorji/go/codec v1.2.11 // indirect\n\tgolang.org/x/arch v0.3.0 // indirect\n\tgolang.org/x/crypto v0.31.0 // indirect\n\tgolang.org/x/net v0.23.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20230410155749-daa745c078e1 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 22.296875,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ngithub.com/BurntSushi/toml v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/OneOfOne/xxhash v1.2.2/go.mod h1:HSdplMjZKSmBqAxg5vPj2TmRDmfkzw+cTzAElWljhcU=\ngithub.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=\ngithub.com/bsm/ginkgo/v2 v2.7.0 h1:ItPMPH90RbmZJt5GtkcNvIRuGEdwlBItdNVoyzaNQao=\ngithub.com/bsm/gomega v1.26.0 h1:LhQm+AFcgV2M0WyKroMASzAzCAJVpAxQXv4SaI9a69Y=\ngithub.com/bytedance/sonic v1.5.0/go.mod h1:ED5hyg4y6t3/9Ku1R6dU/4KyJ48DZ4jPhfY1O2AihPM=\ngithub.com/bytedance/sonic v1.9.1 h1:6iJ6NqdoxCDr6mbY8h18oSO+cShGSMRGCEo7F2h0x8s=\ngithub.com/bytedance/sonic v1.9.1/go.mod h1:i736AoUSYt75HyZLoJW9ERYxcy6eaN6h4BZXU064P/U=\ngithub.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=\ngithub.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=\ngithub.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/chenzhuoyu/base64x v0.0.0-20211019084208-fb5309c8db06/go.mod h1:DH46F32mSOjUmXrMHnKwZdA8wcEefY7UVqBKYGjpdQY=\ngithub.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 h1:qSGYFH7+jGhDF8vLC+iwCD4WpbV1EBDSzWkJODFLams=\ngithub.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311/go.mod h1:b583jCggY9gE99b6G5LEC39OIiVsWj+R97kbl5odCEk=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/coreos/bbolt v1.3.2/go.mod h1:iRUV2dpdMOn7Bo10OQBFzIJO9kkE559Wcmn+qkEiiKk=\ngithub.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=\ngithub.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f h1:lO4WD4F/rVNCu3HqELle0jiPLLBs70cWOduZpkS1E78=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f/go.mod h1:cuUVRXasLTGF7a8hSLbxyZXjz+1KgoB3wDUb6vlszIc=\ngithub.com/dgryski/go-sip13 v0.0.0-20181026042036-e10d5fee7954/go.mod h1:vAd38F8PWV+bWy6jNmig1y/TA+kYO4g3RSRF0IAv0no=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/fsnotify/fsnotify v1.4.8-0.20190312181446-1485a34d5d57 h1:r+AdyYQnMjCqabCiXfAES7u0tbaqXlLXuZ5FT+5OEQs=\ngithub.com/fsnotify/fsnotify v1.4.8-0.20190312181446-1485a34d5d57/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/gabriel-vasile/mimetype v1.4.2 h1:w5qFW6JKBz9Y393Y4q372O9A7cUSequkh1Q7OhCmWKU=\ngithub.com/gabriel-vasile/mimetype v1.4.2/go.mod h1:zApsH/mKG4w07erKIaJPFiX0Tsq9BFQgN3qGY5GnNgA=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=\ngithub.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=\ngithub.com/gin-gonic/gin v1.9.1 h1:4idEAncQnU5cB7BeOkPtxjfCSye0AAm1R0RVIqJ+Jmg=\ngithub.com/gin-gonic/gin v1.9.1/go.mod h1:hPrL7YrpYKXt5YId3A/Tnip5kqbEAP+KLuI3SUcPTeU=\ngithub.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=\ngithub.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=\ngithub.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=\ngithub.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=\ngithub.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=\ngithub.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=\ngithub.com/go-playground/validator/v10 v10.14.0 h1:vgvQWe3XCz3gIeFDm/HnTIbj6UGmg/+t63MyGU2n5js=\ngithub.com/go-playground/validator/v10 v10.14.0/go.mod h1:9iXMNT7sEkjXb0I+enO7QXmzG6QCsPWY4zveKFVRSyU=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=\ngithub.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20190129154638-5b532d6fd5ef/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/gorilla/websocket v1.4.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=\ngithub.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\ngithub.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/grpc-ecosystem/go-grpc-middleware v1.0.0/go.mod h1:FiyG127CGDf3tlThmgyCl78X/SZQqEOJBCDaAfeWzPs=\ngithub.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=\ngithub.com/grpc-ecosystem/grpc-gateway v1.9.0/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/hashicorp/hcl v1.0.1-0.20190611123218-cf7d376da96d h1:r4iSf+UX1tNxFJZ64FsUoOfysT7TePSbRNz4/mYGUIE=\ngithub.com/hashicorp/hcl v1.0.1-0.20190611123218-cf7d376da96d/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/jonboulle/clockwork v0.1.0/go.mod h1:Ii8DK3G1RaLaWxj9trq07+26W01tbo22gdxWY5EU2bo=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=\ngithub.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.2.4 h1:acbojRNwl3o09bUq+yDCtZFc1aiwaAAxtcn8YkZXnvk=\ngithub.com/klauspost/cpuid/v2 v2.2.4/go.mod h1:RVVoqg1df56z8g3pUjL/3lE5UfnlrJX8tyFgg4nqhuY=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/leodido/go-urn v1.2.4 h1:XlAE/cm/ms7TE/VMVoduSpNBoyc2dOxHs5MZSwAN63Q=\ngithub.com/leodido/go-urn v1.2.4/go.mod h1:7ZrI8mTSeBSHl/UaRyKQW1qZeMgak41ANeCNaVckg+4=\ngithub.com/magiconair/properties v1.8.1 h1:ZC2Vc7/ZFkGmsVC9KvOjumD+G5lXy2RtTKyzRKO2BQ4=\ngithub.com/magiconair/properties v1.8.1/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/mattn/go-isatty v0.0.19 h1:JITubQf0MOLdlGRuRq+jtsDlekdYPia9ZFsB8h/APPA=\ngithub.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/mitchellh/mapstructure v1.1.2 h1:fmNYVwqnSfB9mZU6OS2O6GsXM+wcskZDuKQzvN1EDeE=\ngithub.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/oklog/ulid v1.3.1/go.mod h1:CirwcVhetQ6Lv90oh/F+FBtV6XMibvdAFo93nm5qn4U=\ngithub.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=\ngithub.com/pelletier/go-toml v1.4.1-0.20190725070617-84da2c4a25c5 h1:rW9pqjOLUVvikJFWrF53GlhmZNTFtsjjNA0LD2sYLvg=\ngithub.com/pelletier/go-toml v1.4.1-0.20190725070617-84da2c4a25c5/go.mod h1:PN7xzY2wHTK0K9p34ErDQMlFxa51Fk0OUruD3k1mMwo=\ngithub.com/pelletier/go-toml/v2 v2.0.8 h1:0ctb6s9mE31h0/lhu+J6OPmVeDxJn+kYnJc2jZR9tGQ=\ngithub.com/pelletier/go-toml/v2 v2.0.8/go.mod h1:vuYfssBdrU2XDZ9bYydBu6t+6a6PYNcZljzZR9VXg+4=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v0.9.3/go.mod h1:/TN21ttK/J9q6uSwhBd54HahCDft0ttaMvbicHlPoso=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/common v0.0.0-20181113130724-41aa239b4cce/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/common v0.4.0/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20190507164030-5867b95ac084/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/tsdb v0.7.1/go.mod h1:qhTCs0VvXwvX/y3TZrWD7rabWM+ijKTux40TwIPHuXU=\ngithub.com/redis/go-redis/v9 v9.0.3 h1:+7mmR26M0IvyLxGZUHxu4GiBkJkVDid0Un+j4ScYu4k=\ngithub.com/redis/go-redis/v9 v9.0.3/go.mod h1:WqMKv5vnQbRuZstUwxQI195wHy+t4PuXDOjzMvcuQHk=\ngithub.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af/go.mod h1:XWv6SoW27p1b0cqNHllgS5HIMJraePCO15w5zCzIWYg=\ngithub.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=\ngithub.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spf13/afero v1.1.2 h1:m8/z1t7/fwjysjQRYbP0RD+bUIF/8tJwPdEZsI83ACI=\ngithub.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=\ngithub.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cast v1.3.1-0.20190531093228-c01685bb8421 h1:s+WESDalIlUupImv6znWrHX6XIRXuVTBsX633p7Ymms=\ngithub.com/spf13/cast v1.3.1-0.20190531093228-c01685bb8421/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=\ngithub.com/spf13/jwalterweatherman v1.1.0 h1:ue6voC5bR5F8YxI5S67j9i582FU4Qvo2bmqnqMYADFk=\ngithub.com/spf13/jwalterweatherman v1.1.0/go.mod h1:aNWZUN0dPAAO/Ljvb5BEdw96iTZ0EXowPYD95IqWIGo=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.4-0.20181223182923-24fa6976df40 h1:2gwxRRQ5I+FcDbxGtkIC9kWD7EFBewHjQqD8rDQAVQA=\ngithub.com/spf13/pflag v1.0.4-0.20181223182923-24fa6976df40/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/viper v1.4.1-0.20190728125013-1b33e8258e07 h1:Bxzp40S+I62o0BB0Jd23i3OYDtIP2Gs8NtP+Sv6rYHg=\ngithub.com/spf13/viper v1.4.1-0.20190728125013-1b33e8258e07/go.mod h1:LLu5zwCkRPEBY0VPcRMqh58VtcO8Lp1DgqwstU7rYlk=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.3 h1:RP3t2pwF7cMEbC1dqtB6poj3niw/9gnV4Cjg5oW5gtY=\ngithub.com/stretchr/testify v1.8.3/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/subosito/gotenv v1.1.1 h1:TWxckSF6WVKWbo2M3tMqCtWa9NFUgqM1SSynxmYONOI=\ngithub.com/subosito/gotenv v1.1.1/go.mod h1:N0PQaV/YGNqwC0u51sEeR/aUtSLEXKX9iv69rRypqCw=\ngithub.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=\ngithub.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=\ngithub.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=\ngithub.com/ugorji/go v1.1.4/go.mod h1:uQMGLiO92mf5W77hV/PUCpI3pbzQx3CRekS0kk+RGrc=\ngithub.com/ugorji/go/codec v1.2.11 h1:BMaWp1Bb6fHwEtbplGBGJ498wD+LKlNSl25MjdZY4dU=\ngithub.com/ugorji/go/codec v1.2.11/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=\ngithub.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=\ngithub.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=\ngo.etcd.io/bbolt v1.3.2/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=\ngo.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=\ngo.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngolang.org/x/arch v0.0.0-20210923205945-b76863e36670/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=\ngolang.org/x/arch v0.3.0 h1:02VY4/ZcO/gBOH6PUaoiptASxtXU10jazRCP865E97k=\ngolang.org/x/arch v0.3.0/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.23.0 h1:7EYJ93RZ9vYSZAIb2x3lnuvqO5zneoD6IvWjuhfxjTs=\ngolang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20220704084225-05e143d24a9e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20230410155749-daa745c078e1 h1:KpwkzHKEF7B9Zxg18WzOa7djJ+Ha5DzthMyZYQfEn2A=\ngoogle.golang.org/genproto v0.0.0-20230410155749-daa745c078e1/go.mod h1:nKE/iIaLqn2bQwXBg8f1g2Ylh6r5MN5CmZvuzZCgsCU=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.21.0/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.56.3 h1:8I4C0Yq1EjstUzUJzpcRVbuYA2mODtEmpWiQoN/b2nc=\ngoogle.golang.org/grpc v1.56.3/go.mod h1:I9bI3vqKfayGqPUAwGdOSu7kt6oIJLixfffKrpXqQ9s=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=\ngopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7/go.mod h1:JAlM8MvJe8wmxCU4Bli9HhUf9+ttbYbLASfIpnQbh74=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nrsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=\n"
        },
        {
          "name": "helper",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 1.6796875,
          "content": "// Package main 实现一个基于websocket分布式聊天(IM)系统。\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/viper\"\n\n\t\"github.com/link1st/gowebsocket/v2/lib/redislib\"\n\t\"github.com/link1st/gowebsocket/v2/routers\"\n\t\"github.com/link1st/gowebsocket/v2/servers/grpcserver\"\n\t\"github.com/link1st/gowebsocket/v2/servers/task\"\n\t\"github.com/link1st/gowebsocket/v2/servers/websocket\"\n)\n\nfunc main() {\n\tinitConfig()\n\tinitFile()\n\tinitRedis()\n\trouter := gin.Default()\n\n\t// 初始化路由\n\trouters.Init(router)\n\trouters.WebsocketInit()\n\n\t// 定时任务\n\ttask.Init()\n\n\t// 服务注册\n\ttask.ServerInit()\n\tgo websocket.StartWebSocket()\n\n\t// grpc\n\tgo grpcserver.Init()\n\tgo open()\n\thttpPort := viper.GetString(\"app.httpPort\")\n\t_ = http.ListenAndServe(\":\"+httpPort, router)\n}\n\n// initFile 初始化日志\nfunc initFile() {\n\t// Disable Console Color, you don't need console color when writing the logs to file.\n\tgin.DisableConsoleColor()\n\n\t// Logging to a file.\n\tlogFile := viper.GetString(\"app.logFile\")\n\tf, _ := os.Create(logFile)\n\tgin.DefaultWriter = io.MultiWriter(f)\n}\n\nfunc initConfig() {\n\tviper.SetConfigName(\"config/app\")\n\tviper.AddConfigPath(\".\")\n\terr := viper.ReadInConfig()\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"Fatal error config file: %s \\n\", err))\n\t}\n\tfmt.Println(\"config app:\", viper.Get(\"app\"))\n\tfmt.Println(\"config redis:\", viper.Get(\"redis\"))\n\n}\n\nfunc initRedis() {\n\tredislib.NewClient()\n}\n\nfunc open() {\n\ttime.Sleep(1000 * time.Millisecond)\n\thttpUrl := viper.GetString(\"app.httpUrl\")\n\thttpUrl = \"http://\" + httpUrl + \"/home/index\"\n\tfmt.Println(\"访问页面体验:\", httpUrl)\n\tcmd := exec.Command(\"open\", httpUrl)\n\t_, _ = cmd.Output()\n}\n"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "protobuf",
          "type": "tree",
          "content": null
        },
        {
          "name": "routers",
          "type": "tree",
          "content": null
        },
        {
          "name": "servers",
          "type": "tree",
          "content": null
        },
        {
          "name": "views",
          "type": "tree",
          "content": null
        },
        {
          "name": "目录.md",
          "type": "blob",
          "size": 1.953125,
          "content": "## 目录\n- 1、项目说明\n    - 1.1 goWebSocket\n    - 1.2 项目体验\n- 2、介绍webSocket\n    - 2.1 webSocket 是什么\n    - 2.2 webSocket的兼容性\n    - 2.3 为什么要用webSocket\n    - 2.4 webSocket建立过程\n- 3、如何实现基于webSocket的长连接系统\n    - 3.1 使用go实现webSocket服务端\n        - 3.1.1 启动端口监听\n        - 3.1.2 升级协议\n        - 3.1.3 客户端连接的管理\n        - 3.1.4 注册客户端的socket的写的异步处理程序\n        - 3.1.5 注册客户端的socket的读的异步处理程序\n        - 3.1.6 接收客户端数据并处理\n        - 3.1.7 使用路由的方式处理客户端的请求数据\n        - 3.1.8 防止内存溢出和Goroutine不回收\n    - 3.2 使用javaScript实现webSocket客户端\n        - 3.2.1 启动并注册监听程序\n        - 3.2.2 发送数据\n    - 3.3 发送消息\n        - 3.3.1 文本消息\n        - 3.3.2 图片和语言消息\n- 4、goWebSocket 项目\n    - 4.1 项目说明\n    - 4.2 项目依赖\n    - 4.3 项目启动\n    - 4.4 接口文档\n    - 4.4.1 HTTP接口文档\n        - 4.4.1.1 接口说明\n        - 4.4.1.2 聊天页面\n        - 4.4.1.3 获取房间用户列表\n        - 4.4.1.4 查询用户是否在线\n        - 4.4.1.5 给用户发送消息\n        - 4.4.1.6 给全员用户发送消息\n    - 4.4.2 RPC接口文档\n        - 4.4.2.1 接口说明\n        - 4.4.2.2 查询用户是否在线\n        - 4.4.2.3 发送消息\n        - 4.4.2.4 给指定房间所有用户发送消息\n        - 4.4.2.5 获取房间内全部用户\n- 5、webSocket项目Nginx配置\n    - 5.1 为什么要配置Nginx\n    - 5.2 nginx配置\n    - 5.3 问题处理\n- 6、压测\n    - 6.1 Linux内核优化\n    - 6.2 压测准备\n    - 6.3 压测数据\n- 7、如何基于webSocket实现一个分布式Im\n    - 7.1 说明\n    - 7.2 架构\n    - 7.3 分布式系统部署\n- 8、回顾和反思\n    - 8.1 在其它系统应用\n    - 8.2 需要完善、优化\n    - 8.3 总结\n- 9、参考文献"
        }
      ]
    }
  ]
}