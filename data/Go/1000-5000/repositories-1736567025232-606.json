{
  "metadata": {
    "timestamp": 1736567025232,
    "page": 606,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "matcornic/hermes",
      "stars": 2843,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2978515625,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n.DS_Store\ncoverage.txt\nvendor/\n.idea/\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.220703125,
          "content": "linters-settings:\n  lll:\n    line-length: 150\n\nlinters:\n  enable-all: true\n\nissues:\n  max-same: 0 # Disable maximum count of issues with the same text.\n  exclude:\n  - G104 # Duplicate of errcheck\n\n  exclude-use-default: false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.17578125,
          "content": "language: go\n\ngo:\n  - 1.13\n\nscript:\n- go test -race -coverprofile=coverage.txt -covermode=atomic\n\nafter_success:\n- bash <(curl -s https://codecov.io/bash)\n\nenv:\n  - GO111MODULE=on\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 12.234375,
          "content": "# Contributing\n\nThanks so much for wanting to help! We really appreciate it.\n\n* Have an idea for a new feature?\n* Want to add a new built-in theme?\n\nExcellent! You've come to the right place.\n\n1. If you find a bug or wish to suggest a new feature, please create an issue first\n2. Make sure your code & comment conventions are in-line with the project's style (execute gometalinter as in [.travis.yml](.travis.yml) file)\n3. Make your commits and PRs as tiny as possible - one feature or bugfix at a time\n4. Write detailed commit messages, in-line with the project's commit naming conventions\n\n## Theming Instructions\n\nThis file contains instructions on adding themes to Hermes:\n\n* [Using a Custom Theme](#using-a-custom-theme)\n* [Creating a Built-In Theme](#creating-a-built-in-theme)\n\n> We use Golang templates under the hood to inject the e-mail body into themes.\n> - [Official guide](https://golang.org/pkg/text/template/)\n> - [Tutorial](https://astaxie.gitbooks.io/build-web-application-with-golang/en/07.4.html)\n> - [Hugo guide](https://gohugo.io/templates/go-templates/)\n\n### Using a Custom Theme\n\nIf you want to supply your own **custom theme** for Hermes to use (but don't want it included with Hermes):\n\n1. Create a new struct implementing `Theme` interface ([hermes.go](hermes.go)). A real-life example is in [default.go](default.go)\n2. Supply your new theme at hermes creation\n\n```go\n\ntype MyCustomTheme struct{}\n\nfunc (dt *MyCustomTheme) Name() string {\n\treturn \"mycustomthem\"\n}\n\nfunc (dt *MyCustomTheme) HTMLTemplate() string {\n    // Get the template from a file (if you want to be able to change the template live without retstarting your application)\n    // Or write the template by returning pure string here (if you want embbeded template and do not bother with external dependencies)\n    return \"<A go html template with wanted information>\" \n}\n\nfunc (dt *MyCustomTheme) PlainTextTemplate() string {\n    // Get the template from a file (if you want to be able to change the template live without retstarting your application)\n    // Or write the template by returning pure string here (if you want embbeded template and do not bother with external dependencies)\n    return \"<A go plaintext template with wanter information>\"\n}\n\nh := hermes.Hermes{\n    Theme: new(MyCustomTheme) // Set your fresh new theme here\n    Product: hermes.Product{\n        Name: \"Hermes\",\n        Link: \"https://example-hermes.com/\",\n    },\n}\n\n// ...\n// Continue with the rest as usual, create your email and generate the content.\n// ...\n```\n\n3. That's it.\n\n### Creating a Built-In Theme\n\nIf you want to create a new **built-in** Hermes theme:\n\n1. Fork the repository to your GitHub account and clone it to your computer\n2. Create a new Go file named after your new theme\n3. Copy content of [default.go](default.go) file in new file and make any necessary changes\n4. Scroll down to the [injection snippets](#injection-snippets) and copy and paste each code snippet into the relevant area of your template markup\n5. Test the theme by adding the theme to slice of tested themes (see [hermes_test.go](hermes_test.go)). A set of tests will be run to check that your theme follows features of Hermes.\n6. Create examples in new folder for your theme in `examples` folder and run `go run *.go`. It will generate the different `html` and `plaintext` emails for your different examples. Follow the same examples as default theme (3 examples: Welcome, Reset and Receipt)\n7. Add the theme name, credit, and screenshots to the `README.md` file's [Supported Themes](README.md#supported-themes) section (copy one of the existing themes' markup and modify it accordingly)\n8. Submit a pull request with your changes and we'll let you know if anything's missing!\n\nThanks again for your contribution!\n\n# Injection Snippets\n\n## Product Branding Injection\n\nThe following will inject either the product logo or name into the template.\n\n```html\n<a href=\"{{.Hermes.Product.Link}}\" target=\"_blank\">\n        {{ if .Hermes.Product.Logo }}\n            <img src=\"{{.Hermes.Product.Logo}}\" class=\"email-logo\" />\n        {{ else }}\n            {{ .Hermes.Product.Name }}\n        {{ end }}\n</a>\n```\n\nIt's a good idea to add the following CSS declaration to set `max-height: 50px` for the logo:\n\n```css\n.email-logo {\n    max-height: 50px;\n}\n```\n\n## Title Injection\n\nThe following will inject the e-mail title (Hi John Appleseed,) or a custom title provided by the user:\n\n```html\n<h1>{{if .Email.Body.Title }}{{ .Email.Body.Title }}{{ else }}{{ .Email.Body.Greeting }} {{ .Email.Body.Name }},{{ end }}</h1>\n```\n\n## Intro Injection\n\nThe following will inject the intro text (string or array) into the e-mail:\n\n```html\n{{ with .Email.Body.Intros }}\n    {{ if gt (len .) 0 }}\n        {{ range $line := . }}\n            <p>{{ $line }}</p>\n        {{ end }}\n    {{ end }}\n{{ end }}\n```\n\n## Dictionary Injection\n\nThe following will inject a `<dl>` of key-value pairs into the e-mail:\n\n```html\n{{ with .Email.Body.Dictionary }} \n    {{ if gt (len .) 0 }}\n        <dl class=\"body-dictionary\">\n        {{ range $entry := . }}\n            <dt>{{ $entry.Key }}:</dt>\n            <dd>{{ $entry.Value }}</dd>\n        {{ end }}\n        </dl>\n    {{ end }}\n{{ end }}\n```\n\nIt's a good idea to add this to the top of the template to improve the styling of the dictionary:\n\n```css\n/* Dictionary */\n.dictionary {\n    width: 100%;\n    overflow: hidden;\n    margin: 0 auto;\n    padding: 0;\n}\n.dictionary dt {\n    clear: both;\n    color: #000;\n    font-weight: bold;\n    margin-right: 4px;\n}\n.dictionary dd {\n    margin: 0 0 10px 0;\n}\n```\n\n## Table Injection\n\nThe following will inject the table into the e-mail:\n\n```html\n<!-- Table -->\n{{ with .Email.Body.Table }}\n{{ $data := .Data }}\n{{ $columns := .Columns }}\n    {{ if gt (len $data) 0 }}\n    <table class=\"data-wrapper\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n        <tr>\n        <td colspan=\"2\">\n            <table class=\"data-table\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n            <tr>\n                {{ $col := index $data 0 }}\n                {{ range $entry := $col }}\n                <th\n                    {{ with $columns }}\n                        {{ $width := index .CustomWidth $entry.Key }}\n                        {{ with $width }}\n                        width=\"{{ . }}\"\n                        {{ end }}\n                        {{ $align := index .CustomAlignment $entry.Key }}\n                        {{ with $align }}\n                        style=\"text-align:{{ . }}\"\n                        {{ end }}\n                    {{ end }}\n                >\n                    <p>{{ $entry.Key }}</p>\n                </th>\n                {{ end }}\n            </tr>\n            {{ range $row := $data }}\n            <tr>\n                {{ range $cell := $row }}\n                <td\n                    {{ with $columns }}\n                        {{ $align := index .CustomAlignment $cell.Key }}\n                        {{ with $align }}\n                        style=\"text-align:{{ . }}\"\n                        {{ end }}\n                    {{ end }}\n                >\n                {{ $cell.Value }}\n                </td>\n                {{ end }}\n            </tr>\n            {{ end }}\n            </table>\n        </td>\n        </tr>\n    </table>\n    {{ end }}\n{{ end }}\n```\n\nIt's a good idea to add this to the top of the template to improve the styling of the table:\n\n```css\n/* Table */\n.data-wrapper {\n    width: 100%;\n    margin: 0;\n    padding: 35px 0;\n}\n.data-table {\n    width: 100%;\n    margin: 0;\n}\n.data-table th {\n    text-align: left;\n    padding: 0px 5px;\n    padding-bottom: 8px;\n    border-bottom: 1px solid #DEDEDE;\n}\n.data-table th p {\n    margin: 0;\n    font-size: 12px;\n}\n.data-table td {\n    text-align: left;\n    padding: 10px 5px;\n    font-size: 15px;\n    line-height: 18px;\n}\n```\n\n## Action Injection\n\nThe following will inject the action link (or button) into the e-mail:\n\n```html\n{{ with .Email.Body.Actions }}\n    {{ if gt (len .) 0 }}\n        {{ range $action := . }}\n        <p>{{ $action.Instructions }}</p>\n        <table class=\"body-action\" align=\"center\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n            <tr>\n                <td align=\"center\">\n                <div>\n                    <a href=\"{{ $action.Button.Link }}\" class=\"button\" style=\"background-color: {{ $action.Button.Color }}\" target=\"_blank\">{{ $action.Button.Text }}</a>\n                </div>\n                </td>\n            </tr>\n        </table>\n        {{ end }}\n    {{ end }}\n{{ end }}\n```\n\nA good practice is to describe action in footer in case of problem when displaying button and CSS. The text for the description is provided through the `TroubleText` field of the `Product` struct. The text may contain a placeholder `{ACTION}` which is expected to be replaced with the text of the button. The default value of `TroubleText` is `If you’re having trouble with the button '{ACTION}', copy and paste the URL below into your web browser.`\n\n```html\n{{ with .Email.Body.Actions }}\n<table class=\"body-sub\">\n    <tbody><tr>\n    {{ range $action := . }}\n    <td>\n        <p class=\"sub\">{{$.Hermes.Product.TroubleText | replace \"{ACTION}\" $action.Button.Text}}</p>\n        <p class=\"sub\"><a href=\"{{ $action.Button.Link }}\">{{ $action.Button.Link }}</a></p>\n    </td>\n    {{ end }}\n    </tr>\n    </tbody>\n</table>\n{{ end }}\n```\n\nBe aware that Outlook HTML engine is very old and is not compatible with many CSS features.\nIt means, if you want to create a button, the best solution is to create a case only for Outlook. For example, in flat theme, the following code is used to create a button which is a Microsoft VML rectangle. It will not be as perfect as pure CSS interpreted by recent engines, but it will do the work.\n\n```\n{{safe \"<!--[if mso]>\" }}\n<div style=\"margin: 30px auto\">\n    <v:roundrect xmlns:v=\"urn:schemas-microsoft-com:vml\" \n    xmlns:w=\"urn:schemas-microsoft-com:office:word\" \n    href=\"{{ $action.Button.Link }}\" \n    style=\"height:45px;v-text-anchor:middle;width:570px;background-color:{{ if $action.Button.Color }}{{ $action.Button.Color }}{{else}}#00948D{{ end }};\"\n    arcsize=\"0%\" \n    {{ if $action.Button.Color }}strokecolor=\"{{ $action.Button.Color }}\" fillcolor=\"{{ $action.Button.Color }}\"{{ else }}strokecolor=\"#00948D\" fillcolor=\"#00948D\"{{ end }}\n    >\n    <w:anchorlock/>\n    <center style=\"color: {{ if $action.Button.TextColor }}{{ $action.Button.TextColor }}{{else}}#FFFFFF{{ end }};font-size: 15px;text-align: center;font-family:sans-serif;font-weight:bold;\">\n        {{ $action.Button.Text }}\n    </center>\n    </v:roundrect>\n</div>\n{{safe \"<![endif]-->\" }}\n```\n\nWhen the action is an invite code, use this kind of code:\n\n```html\n{{ if $action.InviteCode }}\n    <div style=\"margin-top:30px;margin-bottom:30px\">\n        <table class=\"body-action\" align=\"center\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n        <tr>\n            <td align=\"center\">\n            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" style=\"padding:0;text-align:center\">\n                <tr>\n                <td style=\"display:inline-block;border-radius:3px;font-family:Consolas, monaco, monospace;font-size:28px;text-align:center;letter-spacing:8px;color:#555;background-color:#eee;padding:20px\">\n                    {{ $action.InviteCode }}\n                </td>\n                </tr>\n            </table>\n            </td>\n        </tr>\n        </table>\n    </div>\n{{ end }}   \n```\n\n## Outro Injection\n\nThe following will inject the outro text (string or array) into the e-mail:\n\n```html\n{{ with .Email.Body.Outros }} \n    {{ if gt (len .) 0 }}\n        {{ range $line := . }}\n        <p>{{ $line }}</p>\n        {{ end }}\n    {{ end }}\n{{ end }}\n```\n\n## Signature Injection\n\nThe following will inject the signature phrase (e.g. Yours truly) along with the product name into the e-mail:\n\n```html\n{{.Email.Body.Signature}},\n<br>\n{{.Hermes.Product.Name}}\n```\n\n## Copyright Injection\n\nThe following will inject the copyright notice into the e-mail:\n\n```html\n{{.Hermes.Product.Copyright}}\n```\n\n## Text Direction Injection\n\nIn order to support generating RTL e-mails, inject the `textDirection` variable into the `<body>` tag:\n\n```html\n<body dir=\"{{.Hermes.TextDirection}}\">\n```\n\n## FreeMarkdown Injection\n\nIn order to support Markdown free content, inject the following code:\n\n````html\n{{ if (ne .Email.Body.FreeMarkdown \"\") }}\n    {{ .Email.Body.FreeMarkdown.ToHTML }}\n{{ else }}\n    [... Here is the templating for dictionary, table and actions]\n{{ end }}\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0869140625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 Hermes - Mathieu Cornic\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.7587890625,
          "content": "# Hermes\n\n[![Build Status](https://travis-ci.org/matcornic/hermes.svg?branch=master)](https://travis-ci.org/matcornic/hermes)\n[![Go Report Card](https://goreportcard.com/badge/github.com/matcornic/hermes)](https://goreportcard.com/report/github.com/matcornic/hermes)\n[![Go Coverage](https://codecov.io/github/matcornic/hermes/coverage.svg)](https://codecov.io/github/matcornic/hermes/)\n[![Godoc](https://godoc.org/github.com/matcornic/hermes?status.svg)](https://godoc.org/github.com/matcornic/hermes)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fmatcornic%2Fhermes.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fmatcornic%2Fhermes?ref=badge_shield)\n\nHermes is the Go port of the great [mailgen](https://github.com/eladnava/mailgen) engine for Node.js. Check their work, it's awesome!\nIt's a package that generates clean, responsive HTML e-mails for sending transactional e-mails (welcome e-mails, reset password e-mails, receipt e-mails and so on), and associated plain text fallback.\n\n# Demo\n\n<img src=\"screens/default/welcome.png\" height=\"400\" /> <img src=\"screens/default/reset.png\" height=\"400\" /> <img src=\"screens/default/receipt.png\" height=\"400\" />\n\n# Usage\n\nFirst install the package:\n\n```\ngo get -u github.com/matcornic/hermes/v2\n```\n\n> Starting from release *v2.0.0*, Hermes uses [Go modules](https://github.com/golang/go/wiki/Modules). The latest version of Hermes requires at least Go 1.11 with gomodules enabled.\n> You can still use an Hermes release compatible with prior Go versions by using *v1.2.0* release\n\nThen, start using the package by importing and configuring it:\n\n```go\n// Configure hermes by setting a theme and your product info\nh := hermes.Hermes{\n    // Optional Theme\n    // Theme: new(Default) \n    Product: hermes.Product{\n        // Appears in header & footer of e-mails\n        Name: \"Hermes\",\n        Link: \"https://example-hermes.com/\",\n        // Optional product logo\n        Logo: \"http://www.duchess-france.org/wp-content/uploads/2016/01/gopher.png\",\n    },\n}\n```\n\nNext, generate an e-mail using the following code:\n\n```go\nemail := hermes.Email{\n    Body: hermes.Body{\n        Name: \"Jon Snow\",\n        Intros: []string{\n            \"Welcome to Hermes! We're very excited to have you on board.\",\n        },\n        Actions: []hermes.Action{\n            {\n                Instructions: \"To get started with Hermes, please click here:\",\n                Button: hermes.Button{\n                    Color: \"#22BC66\", // Optional action button color\n                    Text:  \"Confirm your account\",\n                    Link:  \"https://hermes-example.com/confirm?token=d9729feb74992cc3482b350163a1a010\",\n                },\n            },\n        },\n        Outros: []string{\n            \"Need help, or have questions? Just reply to this email, we'd love to help.\",\n        },\n    },\n}\n\n// Generate an HTML email with the provided contents (for modern clients)\nemailBody, err := h.GenerateHTML(email)\nif err != nil {\n    panic(err) // Tip: Handle error with something else than a panic ;)\n}\n\n// Generate the plaintext version of the e-mail (for clients that do not support xHTML)\nemailText, err := h.GeneratePlainText(email)\nif err != nil {\n    panic(err) // Tip: Handle error with something else than a panic ;)\n}\n\n// Optionally, preview the generated HTML e-mail by writing it to a local file\nerr = ioutil.WriteFile(\"preview.html\", []byte(emailBody), 0644)\nif err != nil {\n    panic(err) // Tip: Handle error with something else than a panic ;)\n}\n```\n\nThis code would output the following HTML template:\n\n<img src=\"screens/demo.png\" height=\"400\" />\n\nAnd the following plain text:\n\n```\n\n------------\nHi Jon Snow,\n------------\n\nWelcome to Hermes! We're very excited to have you on board.\n\nTo get started with Hermes, please click here: https://hermes-example.com/confirm?token=d9729feb74992cc3482b350163a1a010\n\nNeed help, or have questions? Just reply to this email, we'd love to help.\n\nYours truly,\nHermes - https://example-hermes.com/\n\nCopyright © 2017 Hermes. All rights reserved.\n```\n\n> Theme templates will be embedded in your application binary. If you want to use external templates (for configuration), use your own theme by implementing `hermes.Theme` interface with code searching for your files.\n\n## More Examples\n\n* [Welcome with button](examples/welcome.go)\n* [Welcome with invite code](examples/invite_code.go)\n* [Receipt](examples/receipt.go)\n* [Password Reset](examples/reset.go)\n* [Maintenance](examples/maintenance.go)\n\nTo run the examples, go to `examples` folder, then run `go run -a *.go`. HTML and Plaintext example should be created in given theme folders.\n\nOptionaly you can set the following variables to send automatically the emails to one your mailbox. Nice for testing template in real email clients.\n\n* `HERMES_SEND_EMAILS=true`\n* `HERMES_SMTP_SERVER=<smtp_server>` : for Gmail it's `smtp.gmail.com`\n* `HERMES_SMTP_PORT=<smtp_port>` : for Gmail it's `465`\n* `HERMES_SENDER_EMAIL=<your_sender_email>`\n* `HERMES_SENDER_IDENTITY=<the sender name>`\n* `HERMES_SMTP_USER=<smtp user>` : usually the same than `HERMES_SENDER_EMAIL`\n* `HERMES_TO=<recipients emails>`: split by commas like `myadress@test.com,somethingelse@gmail.com`\n\nThe program will ask for your SMTP password. If needed, you can set it with `HERMES_SMTP_PASSWORD` variable (but be careful where you put this information !)\n\n## Plaintext E-mails\n\nTo generate a [plaintext version of the e-mail](https://litmus.com/blog/best-practices-for-plain-text-emails-a-look-at-why-theyre-important), simply call `GeneratePlainText` function:\n\n```go\n// Generate plaintext email using hermes\nemailText, err := h.GeneratePlainText(email)\nif err != nil {\n    panic(err) // Tip: Handle error with something else than a panic ;)\n}\n```\n\n## Supported Themes\n\nThe following open-source themes are bundled with this package:\n\n* `default` by [Postmark Transactional Email Templates](https://github.com/wildbit/postmark-templates)\n\n<img src=\"screens/default/welcome.png\" height=\"200\" /> <img src=\"screens/default/reset.png\" height=\"200\" /> <img src=\"screens/default/receipt.png\" height=\"200\" />\n\n* `flat`, slightly modified from [Postmark Transactional Email Templates](https://github.com/wildbit/postmark-templates)\n\n<img src=\"screens/flat/welcome.png\" height=\"200\" /> <img src=\"screens/flat/reset.png\" height=\"200\" /> <img src=\"screens/flat/receipt.png\" height=\"200\" />\n\n## RTL Support\n\nTo change the default text direction (left-to-right), simply override it as follows:\n\n```go\n// Configure hermes by setting a theme and your product info\nh := hermes.Hermes {\n    // Custom text direction\n    TextDirection: hermes.TDRightToLeft,\n}\n```\n\n## Language Customizations\n\nTo customize the e-mail's greeting (\"Hi\") or signature (\"Yours truly\"), supply custom strings within the e-mail's `Body`:\n\n```go\nemail := hermes.Email{\n    Body: hermes.Body{\n        Greeting: \"Dear\",\n        Signature: \"Sincerely\",\n    },\n}\n```\n\nTo use a custom title string rather than a greeting/name introduction, provide it instead of `Name`:\n\n```go\nemail := hermes.Email{\n    Body: hermes.Body{\n        // Title will override `Name`\n        Title: \"Welcome to Hermes\",\n    },\n}\n```\n\nTo customize the `Copyright`, override it when initializing `Hermes` within your `Product` as follows:\n\n```go\n// Configure hermes by setting a theme and your product info\nh := hermes.Hermes{\n    // Optional Theme\n    // Theme: new(Default)\n    Product: hermes.Product{\n        // Appears in header & footer of e-mails\n        Name: \"Hermes\",\n        Link: \"https://example-hermes.com/\",\n        // Custom copyright notice\n        Copyright: \"Copyright © 2017 Dharma Initiative. All rights reserved.\"\n    },\n}\n```\n\nTo use a custom fallback text at the end of the email, change the `TroubleText` field of the `hermes.Product` struct. The default value is `If you’re having trouble with the button '{ACTION}', copy and paste the URL below into your web browser.`. The `{ACTION}` placeholder will be replaced with the corresponding text of the supplied action button:\n\n```go\n// Configure hermes by setting a theme and your product info\nh := hermes.Hermes{\n    // Optional Theme\n    // Theme: new(Default)\n    Product: hermes.Product{\n        // Custom trouble text\n        TroubleText: \"If the {ACTION}-button is not working for you, just copy and paste the URL below into your web browser.\"\n    },\n}\n```\n\nSince `v2.1.0`, Hermes is automatically inlining all CSS to improve compatibility with email clients, thanks to [Premailer](https://github.com/vanng822/go-premailer/premailer).\nYou can disable this feature by setting `DisableCSSInlining` of `Hermes` struct to `true`.\n\n```go\nh := hermes.Hermes{\n    ...\n    DisableCSSInlining: true,\n}\n```\n\n## Elements\n\nHermes supports injecting custom elements such as dictionaries, tables and action buttons into e-mails.\n\n### Action\n\nTo inject an action button in to the e-mail, supply the `Actions` object as follows:\n\n```go\nemail := hermes.Email{\n    Body: hermes.Body{\n        Actions: []hermes.Action{\n            {\n                Instructions: \"To get started with Hermes, please click here:\",\n                Button: hermes.Button{\n                    Color: \"#22BC66\", // Optional action button color\n                    Text:  \"Confirm your account\",\n                    Link:  \"https://hermes-example.com/confirm?token=d9729feb74992cc3482b350163a1a010\",\n                },\n            },\n        },\n    },\n}\n```\n\nAlternatively, instead of having a button, an action can be an invite code as follows:\n\n```go\nemail := hermes.Email{\n    Body: hermes.Body{\n        Actions: []hermes.Action{\n            {\n                Instructions: \"To get started with Hermes, please use the invite code:\",\n                InviteCode: \"123456\",\n            },\n        },\n    },\n}\n```\n\nTo inject multiple action buttons in to the e-mail, supply another struct in Actions slice `Action`.\n\n### Table\n\nTo inject a table into the e-mail, supply the `Table` object as follows:\n\n```go\nemail := hermes.Email{\n    Body: hermes.Body{\n        Table: hermes.Table{\n            Data: [][]hermes.Entry{\n                // List of rows\n                {   \n                    // Key is the column name, Value is the cell value\n                    // First object defines what columns will be displayed\n                    {Key: \"Item\", Value: \"Golang\"},\n                    {Key: \"Description\", Value: \"Open source programming language that makes it easy to build simple, reliable, and efficient software\"},\n                    {Key: \"Price\", Value: \"$10.99\"},\n                },\n                {\n                    {Key: \"Item\", Value: \"Hermes\"},\n                    {Key: \"Description\", Value: \"Programmatically create beautiful e-mails using Golang.\"},\n                    {Key: \"Price\", Value: \"$1.99\"},\n                },\n            },\n            Columns: hermes.Columns{\n                // Custom style for each rows\n                CustomWidth: map[string]string{\n                    \"Item\":  \"20%\",\n                    \"Price\": \"15%\",\n                },\n                CustomAlignment: map[string]string{\n                    \"Price\": \"right\",\n                },\n            },\n        },\n    },\n}\n```\n\n### Dictionary\n\nTo inject key-value pairs of data into the e-mail, supply the `Dictionary` object as follows:\n\n```go\nemail := hermes.Email{\n    Body: hermes.Body{\n        Dictionary: []hermes.Entry{\n            {Key: \"Date\", Value: \"20 November 1887\"},\n            {Key: \"Address\", Value: \"221B Baker Street, London\"},\n        },\n    },\n}\n```\n\n### Free Markdown\n\nIf you need more flexibility in the content of your generated e-mail, while keeping the same format than any other e-mail, use Markdown content. Supply the `FreeMarkdown` object as follows:\n\n```go\nemail := hermes.Email{\n\t\tBody: hermes.Body{\n\t\t\tFreeMarkdown: `\n> _Hermes_ service will shutdown the **1st August 2017** for maintenance operations. \n\nServices will be unavailable based on the following schedule:\n\n| Services | Downtime |\n| :------:| :-----------: |\n| Service A | 2AM to 3AM |\n| Service B | 4AM to 5AM |\n| Service C | 5AM to 6AM |\n\n---\n\nFeel free to contact us for any question regarding this matter at [support@hermes-example.com](mailto:support@hermes-example.com) or in our [Gitter](https://gitter.im/)\n\n`,\n\t\t},\n\t}\n}\n```\n\nThis code would output the following HTML template:\n\n<img src=\"screens/free-markdown.png\" height=\"400\" />\n\nAnd the following plaintext:\n\n```\n------------\nHi Jon Snow,\n------------\n\n> \n> \n> \n> Hermes service will shutdown the *1st August 2017* for maintenance\n> operations.\n> \n> \n\nServices will be unavailable based on the following schedule:\n\n+-----------+------------+\n| SERVICES  |  DOWNTIME  |\n+-----------+------------+\n| Service A | 2AM to 3AM |\n| Service B | 4AM to 5AM |\n| Service C | 5AM to 6AM |\n+-----------+------------+\n\nFeel free to contact us for any question regarding this matter at support@hermes-example.com ( support@hermes-example.com ) or in our Gitter ( https://gitter.im/ )\n\nYours truly,\nHermes - https://example-hermes.com/\n\nCopyright © 2017 Hermes. All rights reserved.\n```\n\nBe aware that this content will replace existing tables, dictionary and actions. Only intros, outros, header and footer will be kept.\n\nThis is helpful when your application needs sending e-mails, wrote on-the-fly by adminstrators.\n\n> Markdown is rendered with [Blackfriday](https://github.com/russross/blackfriday), so every thing Blackfriday can do, Hermes can do it as well.\n\n## Troubleshooting\n\n1. After sending multiple e-mails to the same Gmail / Inbox address, they become grouped and truncated since they contain similar text, breaking the responsive e-mail layout.\n\n> Simply sending the `X-Entity-Ref-ID` header with your e-mails will prevent grouping / truncation.\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\nApache 2.0\n\n\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fmatcornic%2Fhermes.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fmatcornic%2Fhermes?ref=badge_large)"
        },
        {
          "name": "default.go",
          "type": "blob",
          "size": 18.74609375,
          "content": "package hermes\n\n// Default is the theme by default\ntype Default struct{}\n\n// Name returns the name of the default theme\nfunc (dt *Default) Name() string {\n\treturn \"default\"\n}\n\n// HTMLTemplate returns a Golang template that will generate an HTML email.\nfunc (dt *Default) HTMLTemplate() string {\n\treturn `\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <style type=\"text/css\" rel=\"stylesheet\" media=\"all\">\n    /* Base ------------------------------ */\n    *:not(br):not(tr):not(html) {\n      font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;\n      -webkit-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n    body {\n      width: 100% !important;\n      height: 100%;\n      margin: 0;\n      line-height: 1.4;\n      background-color: #F2F4F6;\n      color: #74787E;\n      -webkit-text-size-adjust: none;\n    }\n    a {\n      color: #3869D4;\n    }\n    /* Layout ------------------------------ */\n    .email-wrapper {\n      width: 100%;\n      margin: 0;\n      padding: 0;\n      background-color: #F2F4F6;\n    }\n    .email-content {\n      width: 100%;\n      margin: 0;\n      padding: 0;\n    }\n    /* Masthead ----------------------- */\n    .email-masthead {\n      padding: 25px 0;\n      text-align: center;\n    }\n    .email-masthead_logo {\n      max-width: 400px;\n      border: 0;\n    }\n    .email-masthead_name {\n      font-size: 16px;\n      font-weight: bold;\n      color: #2F3133;\n      text-decoration: none;\n      text-shadow: 0 1px 0 white;\n    }\n    .email-logo {\n      max-height: 50px;\n    }\n    /* Body ------------------------------ */\n    .email-body {\n      width: 100%;\n      margin: 0;\n      padding: 0;\n      border-top: 1px solid #EDEFF2;\n      border-bottom: 1px solid #EDEFF2;\n      background-color: #FFF;\n    }\n    .email-body_inner {\n      width: 570px;\n      margin: 0 auto;\n      padding: 0;\n    }\n    .email-footer {\n      width: 570px;\n      margin: 0 auto;\n      padding: 0;\n      text-align: center;\n    }\n    .email-footer p {\n      color: #AEAEAE;\n    }\n    .body-action {\n      width: 100%;\n      margin: 30px auto;\n      padding: 0;\n      text-align: center;\n    }\n    .body-dictionary {\n      width: 100%;\n      overflow: hidden;\n      margin: 20px auto 10px;\n      padding: 0;\n    }\n    .body-dictionary dd {\n      margin: 0 0 10px 0;\n    }\n    .body-dictionary dt {\n      clear: both;\n      color: #000;\n      font-weight: bold;\n    }\n    .body-dictionary dd {\n      margin-left: 0;\n      margin-bottom: 10px;\n    }\n    .body-sub {\n      margin-top: 25px;\n      padding-top: 25px;\n      border-top: 1px solid #EDEFF2;\n      table-layout: fixed;\n    }\n    .body-sub a {\n      word-break: break-all;\n    }\n    .content-cell {\n      padding: 35px;\n    }\n    .align-right {\n      text-align: right;\n    }\n    /* Type ------------------------------ */\n    h1 {\n      margin-top: 0;\n      color: #2F3133;\n      font-size: 19px;\n      font-weight: bold;\n    }\n    h2 {\n      margin-top: 0;\n      color: #2F3133;\n      font-size: 16px;\n      font-weight: bold;\n    }\n    h3 {\n      margin-top: 0;\n      color: #2F3133;\n      font-size: 14px;\n      font-weight: bold;\n    }\n    blockquote {\n      margin: 25px 0;\n      padding-left: 10px;\n      border-left: 10px solid #F0F2F4;\n    }\n    blockquote p {\n        font-size: 1.1rem;\n        color: #999;\n    }\n    blockquote cite {\n        display: block;\n        text-align: right;\n        color: #666;\n        font-size: 1.2rem;\n    }\n    cite {\n      display: block;\n      font-size: 0.925rem; \n    }\n    cite:before {\n      content: \"\\2014 \\0020\";\n    }\n    p {\n      margin-top: 0;\n      color: #74787E;\n      font-size: 16px;\n      line-height: 1.5em;\n    }\n    p.sub {\n      font-size: 12px;\n    }\n    p.center {\n      text-align: center;\n    }\n    table {\n      width: 100%;\n    }\n    th {\n      padding: 0px 5px;\n      padding-bottom: 8px;\n      border-bottom: 1px solid #EDEFF2;\n    }\n    th p {\n      margin: 0;\n      color: #9BA2AB;\n      font-size: 12px;\n    }\n    td {\n      padding: 10px 5px;\n      color: #74787E;\n      font-size: 15px;\n      line-height: 18px;\n    }\n    .content {\n      align: center;\n      padding: 0;\n    }\n    /* Data table ------------------------------ */\n    .data-wrapper {\n      width: 100%;\n      margin: 0;\n      padding: 35px 0;\n    }\n    .data-table {\n      width: 100%;\n      margin: 0;\n    }\n    .data-table th {\n      text-align: left;\n      padding: 0px 5px;\n      padding-bottom: 8px;\n      border-bottom: 1px solid #EDEFF2;\n    }\n    .data-table th p {\n      margin: 0;\n      color: #9BA2AB;\n      font-size: 12px;\n    }\n    .data-table td {\n      padding: 10px 5px;\n      color: #74787E;\n      font-size: 15px;\n      line-height: 18px;\n    }\n    /* Invite Code ------------------------------ */\n    .invite-code {\n      display: inline-block;\n      padding-top: 20px;\n      padding-right: 36px;\n      padding-bottom: 16px;\n      padding-left: 36px;\n      border-radius: 3px;\n      font-family: Consolas, monaco, monospace;\n      font-size: 28px;\n      text-align: center;\n      letter-spacing: 8px;\n      color: #555;\n      background-color: #eee;\n    }\n    /* Buttons ------------------------------ */\n    .button {\n      display: inline-block;\n      background-color: #3869D4;\n      border-radius: 3px;\n      color: #ffffff !important;\n      font-size: 15px;\n      line-height: 45px;\n      text-align: center;\n      text-decoration: none;\n      -webkit-text-size-adjust: none;\n      mso-hide: all;\n    }\n    /*Media Queries ------------------------------ */\n    @media only screen and (max-width: 600px) {\n      .email-body_inner,\n      .email-footer {\n        width: 100% !important;\n      }\n    }\n    @media only screen and (max-width: 500px) {\n      .button {\n        width: 100% !important;\n      }\n    }\n  </style>\n</head>\n<body dir=\"{{.Hermes.TextDirection}}\">\n  <table class=\"email-wrapper\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n    <tr>\n      <td class=\"content\">\n        <table class=\"email-content\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n          <!-- Logo -->\n          <tr>\n            <td class=\"email-masthead\">\n              <a class=\"email-masthead_name\" href=\"{{.Hermes.Product.Link}}\" target=\"_blank\">\n                {{ if .Hermes.Product.Logo }}\n                  <img src=\"{{.Hermes.Product.Logo | url }}\" class=\"email-logo\" />\n                {{ else }}\n                  {{ .Hermes.Product.Name }}\n                {{ end }}\n                </a>\n            </td>\n          </tr>\n\n          <!-- Email Body -->\n          <tr>\n            <td class=\"email-body\" width=\"100%\">\n              <table class=\"email-body_inner\" align=\"center\" width=\"570\" cellpadding=\"0\" cellspacing=\"0\">\n                <!-- Body content -->\n                <tr>\n                  <td class=\"content-cell\">\n                    <h1>{{if .Email.Body.Title }}{{ .Email.Body.Title }}{{ else }}{{ .Email.Body.Greeting }} {{ .Email.Body.Name }},{{ end }}</h1>\n                    {{ with .Email.Body.Intros }}\n                        {{ if gt (len .) 0 }}\n                          {{ range $line := . }}\n                            <p>{{ $line }}</p>\n                          {{ end }}\n                        {{ end }}\n                    {{ end }}\n                    {{ if (ne .Email.Body.FreeMarkdown \"\") }}\n                      {{ .Email.Body.FreeMarkdown.ToHTML }}\n                    {{ else }}\n\n                      {{ with .Email.Body.Dictionary }} \n                        {{ if gt (len .) 0 }}\n                          <dl class=\"body-dictionary\">\n                            {{ range $entry := . }}\n                              <dt>{{ $entry.Key }}:</dt>\n                              <dd>{{ $entry.Value }}</dd>\n                            {{ end }}\n                          </dl>\n                        {{ end }}\n                      {{ end }}\n\n                      <!-- Table -->\n                      {{ with .Email.Body.Table }}\n                        {{ $data := .Data }}\n                        {{ $columns := .Columns }}\n                        {{ if gt (len $data) 0 }}\n                          <table class=\"data-wrapper\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                              <td colspan=\"2\">\n                                <table class=\"data-table\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n                                  <tr>\n                                    {{ $col := index $data 0 }}\n                                    {{ range $entry := $col }}\n                                      <th\n                                        {{ with $columns }}\n                                          {{ $width := index .CustomWidth $entry.Key }}\n                                          {{ with $width }}\n                                            width=\"{{ . }}\"\n                                          {{ end }}\n                                          {{ $align := index .CustomAlignment $entry.Key }}\n                                          {{ with $align }}\n                                            style=\"text-align:{{ . }}\"\n                                          {{ end }}\n                                        {{ end }}\n                                      >\n                                        <p>{{ $entry.Key }}</p>\n                                      </th>\n                                    {{ end }}\n                                  </tr>\n                                  {{ range $row := $data }}\n                                    <tr>\n                                      {{ range $cell := $row }}\n                                        <td\n                                          {{ with $columns }}\n                                            {{ $align := index .CustomAlignment $cell.Key }}\n                                            {{ with $align }}\n                                              style=\"text-align:{{ . }}\"\n                                            {{ end }}\n                                          {{ end }}\n                                        >\n                                          {{ $cell.Value }}\n                                        </td>\n                                      {{ end }}\n                                    </tr>\n                                  {{ end }}\n                                </table>\n                              </td>\n                            </tr>\n                          </table>\n                        {{ end }}\n                      {{ end }}\n\n                      <!-- Action -->\n                      {{ with .Email.Body.Actions }}\n                        {{ if gt (len .) 0 }}\n                          {{ range $action := . }}\n                            <p>{{ $action.Instructions }}</p>\n                            {{ $length := len $action.Button.Text }}\n                            {{ $width := add (mul $length 9) 20 }}\n                            {{if (lt $width 200)}}{{$width = 200}}{{else if (gt $width 570)}}{{$width = 570}}{{else}}{{end}}\n                              {{safe \"<!--[if mso]>\" }}\n                              {{ if $action.Button.Text }}\n                                <div style=\"margin: 30px auto;v-text-anchor:middle;text-align:center\">\n                                  <v:roundrect xmlns:v=\"urn:schemas-microsoft-com:vml\" \n                                    xmlns:w=\"urn:schemas-microsoft-com:office:word\" \n                                    href=\"{{ $action.Button.Link }}\" \n                                    style=\"height:45px;v-text-anchor:middle;width:{{$width}}px;background-color:{{ if $action.Button.Color }}{{ $action.Button.Color }}{{ else }}#3869D4{{ end }};\"\n                                    arcsize=\"10%\" \n                                    {{ if $action.Button.Color }}strokecolor=\"{{ $action.Button.Color }}\" fillcolor=\"{{ $action.Button.Color }}\"{{ else }}strokecolor=\"#3869D4\" fillcolor=\"#3869D4\"{{ end }}\n                                    >\n                                    <w:anchorlock/>\n                                    <center style=\"color: {{ if $action.Button.TextColor }}{{ $action.Button.TextColor }}{{else}}#FFFFFF{{ end }};font-size: 15px;text-align: center;font-family:sans-serif;font-weight:bold;\">\n                                      {{ $action.Button.Text }}\n                                    </center>\n                                  </v:roundrect>\n                                </div>\n                              {{ end }}\n                              {{ if $action.InviteCode }}\n                                <div style=\"margin-top:30px;margin-bottom:30px\">\n                                  <table class=\"body-action\" align=\"center\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n                                    <tr>\n                                      <td align=\"center\">\n                                        <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" style=\"padding:0;text-align:center\">\n                                          <tr>\n                                            <td style=\"display:inline-block;border-radius:3px;font-family:Consolas, monaco, monospace;font-size:28px;text-align:center;letter-spacing:8px;color:#555;background-color:#eee;padding:20px\">\n                                              {{ $action.InviteCode }}\n                                            </td>\n                                          </tr>\n                                        </table>\n                                      </td>\n                                    </tr>\n                                  </table>\n                                </div>\n                              {{ end }}   \n                              {{safe \"<![endif]-->\" }}\n                              {{safe \"<!--[if !mso]><!-- -->\"}}\n                              <table class=\"body-action\" align=\"center\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tr>\n                                  <td align=\"center\">\n                                    <div>\n                                      {{ if $action.Button.Text }}\n                                        <a href=\"{{ $action.Button.Link }}\" class=\"button\" style=\"{{ with $action.Button.Color }}background-color: {{ . }};{{ end }} {{ with $action.Button.TextColor }}color: {{ . }};{{ end }} width: {{$width}}px;\" target=\"_blank\">\n                                          {{ $action.Button.Text }}\n                                        </a>\n                                      {{end}}\n                                      {{ if $action.InviteCode }}\n                                        <span class=\"invite-code\">{{ $action.InviteCode }}</span>\n                                      {{end}}\n                                    </div>\n                                  </td>\n                                </tr>\n                              </table>\n                              {{safe \"<![endif]-->\" }}\n                          {{ end }}\n                        {{ end }}\n                      {{ end }}\n\n                    {{ end }}\n                    {{ with .Email.Body.Outros }} \n                        {{ if gt (len .) 0 }}\n                          {{ range $line := . }}\n                            <p>{{ $line }}</p>\n                          {{ end }}\n                        {{ end }}\n                      {{ end }}\n\n                    <p>\n                      {{.Email.Body.Signature}},\n                      <br />\n                      {{.Hermes.Product.Name}}\n                    </p>\n\n                    {{ if (eq .Email.Body.FreeMarkdown \"\") }}\n                      {{ with .Email.Body.Actions }} \n                        <table class=\"body-sub\">\n                          <tbody>\n                              {{ range $action := . }}\n                                {{if $action.Button.Text}}\n                                <tr>\n                                  <td>\n                                    <p class=\"sub\">{{$.Hermes.Product.TroubleText | replace \"{ACTION}\" $action.Button.Text}}</p>\n                                    <p class=\"sub\"><a href=\"{{ $action.Button.Link }}\">{{ $action.Button.Link }}</a></p>\n                                  </td>\n                                </tr>\n                                {{ end }}\n                              {{ end }}\n                          </tbody>\n                        </table>\n                      {{ end }}\n                    {{ end }}\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <table class=\"email-footer\" align=\"center\" width=\"570\" cellpadding=\"0\" cellspacing=\"0\">\n                <tr>\n                  <td class=\"content-cell\">\n                    <p class=\"sub center\">\n                      {{.Hermes.Product.Copyright}}\n                    </p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>\n`\n}\n\n// PlainTextTemplate returns a Golang template that will generate an plain text email.\nfunc (dt *Default) PlainTextTemplate() string {\n\treturn `<h2>{{if .Email.Body.Title }}{{ .Email.Body.Title }}{{ else }}{{ .Email.Body.Greeting }} {{ .Email.Body.Name }},{{ end }}</h2>\n{{ with .Email.Body.Intros }}\n  {{ range $line := . }}\n    <p>{{ $line }}</p>\n  {{ end }}\n{{ end }}\n{{ if (ne .Email.Body.FreeMarkdown \"\") }}\n  {{ .Email.Body.FreeMarkdown.ToHTML }}\n{{ else }}\n  {{ with .Email.Body.Dictionary }}\n    <ul>\n    {{ range $entry := . }}\n      <li>{{ $entry.Key }}: {{ $entry.Value }}</li>\n    {{ end }}\n    </ul>\n  {{ end }}\n  {{ with .Email.Body.Table }}\n    {{ $data := .Data }}\n    {{ $columns := .Columns }}\n    {{ if gt (len $data) 0 }}\n      <table class=\"data-table\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n        <tr>\n          {{ $col := index $data 0 }}\n          {{ range $entry := $col }}\n            <th>{{ $entry.Key }} </th>\n          {{ end }}\n        </tr>\n        {{ range $row := $data }}\n          <tr>\n            {{ range $cell := $row }}\n              <td>\n                {{ $cell.Value }}\n              </td>\n            {{ end }}\n          </tr>\n        {{ end }}\n      </table>\n    {{ end }}\n  {{ end }}\n  {{ with .Email.Body.Actions }} \n    {{ range $action := . }}\n      <p>\n        {{ $action.Instructions }} \n        {{ if $action.InviteCode }}\n          {{ $action.InviteCode }}\n        {{ end }}\n        {{ if $action.Button.Link }}\n          {{ $action.Button.Link }}\n        {{ end }}\n      </p> \n    {{ end }}\n  {{ end }}\n{{ end }}\n{{ with .Email.Body.Outros }} \n  {{ range $line := . }}\n    <p>{{ $line }}<p>\n  {{ end }}\n{{ end }}\n<p>{{.Email.Body.Signature}},<br>{{.Hermes.Product.Name}} - {{.Hermes.Product.Link}}</p>\n\n<p>{{.Hermes.Product.Copyright}}</p>\n`\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "flat.go",
          "type": "blob",
          "size": 18.1767578125,
          "content": "package hermes\n\n// Flat is a theme\ntype Flat struct{}\n\n// Name returns the name of the flat theme\nfunc (dt *Flat) Name() string {\n\treturn \"flat\"\n}\n\n// HTMLTemplate returns a Golang template that will generate an HTML email.\nfunc (dt *Flat) HTMLTemplate() string {\n\treturn `\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <style type=\"text/css\" rel=\"stylesheet\" media=\"all\">\n    /* Base ------------------------------ */\n    *:not(br):not(tr):not(html) {\n      font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;\n      -webkit-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n    body {\n      width: 100% !important;\n      height: 100%;\n      margin: 0;\n      line-height: 1.4;\n      background-color: #2c3e50;\n      color: #74787E;\n      -webkit-text-size-adjust: none;\n    }\n    a {\n      color: #3869D4;\n    }\n\n    /* Layout ------------------------------ */\n    .email-wrapper {\n      width: 100%;\n      margin: 0;\n      padding: 0;\n      background-color: #2c3e50;\n    }\n    .email-content {\n      width: 100%;\n      margin: 0;\n      padding: 0;\n    }\n    /* Masthead ----------------------- */\n    .email-masthead {\n      padding: 25px 0;\n      text-align: center;\n    }\n    .email-masthead_logo {\n      max-width: 400px;\n      border: 0;\n    }\n    .email-masthead_name {\n      font-size: 16px;\n      font-weight: bold;\n      color: #2F3133;\n      text-decoration: none;\n      text-shadow: 0 1px 0 white;\n    }\n    .email-logo {\n      max-height: 50px;\n    }\n    /* Body ------------------------------ */\n    .email-body {\n      width: 100%;\n      margin: 0;\n      padding: 0;\n      border-top: 1px solid #EDEFF2;\n      border-bottom: 1px solid #EDEFF2;\n      background-color: #FFF;\n    }\n    .email-body_inner {\n      width: 570px;\n      margin: 0 auto;\n      padding: 0;\n    }\n    .email-footer {\n      width: 570px;\n      margin: 0 auto;\n      padding: 0;\n      text-align: center;\n    }\n    .email-footer p {\n      color: #eaeaea;\n    }\n    .body-action {\n      width: 100%;\n      margin: 30px auto;\n      padding: 0;\n      text-align: center;\n    }\n\n    .body-dictionary {\n      width: 100%;\n      overflow: hidden;\n      margin: 20px auto 20px;\n      padding: 0;\n    }\n    .body-dictionary dt {\n      clear: both;\n      color: #000;\n      font-weight: bold;\n      float: left;\n      width: 50%;\n      padding: 0;\n      margin: 0;\n      margin-bottom: 0.3em;\n    }\n    .body-dictionary dd {\n      float: left;\n      width: 50%;\n      padding: 0;\n      margin: 0;\n    }\n    .body-sub {\n      margin-top: 25px;\n      padding-top: 25px;\n      border-top: 1px solid #EDEFF2;\n      table-layout: fixed;\n    }\n    .body-sub a {\n      word-break: break-all;\n    }\n    .content-cell {\n      padding: 35px;\n    }\n    .align-right {\n      text-align: right;\n    }\n    /* Type ------------------------------ */\n    h1 {\n      margin-top: 0;\n      color: #2F3133;\n      font-size: 19px;\n      font-weight: bold;\n    }\n    h2 {\n      margin-top: 0;\n      color: #2F3133;\n      font-size: 16px;\n      font-weight: bold;\n    }\n    h3 {\n      margin-top: 0;\n      color: #2F3133;\n      font-size: 14px;\n      font-weight: bold;\n    }\n    blockquote {\n      margin: 25px 0;\n      padding-left: 10px;\n      border-left: 10px solid #F0F2F4;\n    }\n    blockquote p {\n        font-size: 1.1rem;\n        color: #999;\n    }\n    blockquote cite {\n        display: block;\n        text-align: right;\n        color: #666;\n        font-size: 1.2rem;\n    }\n    cite {\n      display: block;\n      font-size: 0.925rem; \n    }\n    cite:before {\n      content: \"\\2014 \\0020\";\n    }\n    p {\n      margin-top: 0;\n      color: #74787E;\n      font-size: 16px;\n      line-height: 1.5em;\n    }\n    p.sub {\n      font-size: 12px;\n    }\n    p.center {\n      text-align: center;\n    }\n    table {\n      width: 100%;\n    }\n    th {\n      padding: 0px 5px;\n      padding-bottom: 8px;\n      border-bottom: 1px solid #EDEFF2;\n    }\n    th p {\n      margin: 0;\n      color: #9BA2AB;\n      font-size: 12px;\n    }\n    td {\n      padding: 10px 5px;\n      color: #74787E;\n      font-size: 15px;\n      line-height: 18px;\n    }\n    .content {\n      align: center;\n      padding: 0;\n    }\n    /* Data table ------------------------------ */\n    .data-wrapper {\n      width: 100%;\n      margin: 0;\n      padding: 35px 0;\n    }\n    .data-table {\n      width: 100%;\n      margin: 0;\n    }\n    .data-table th {\n      text-align: left;\n      padding: 0px 5px;\n      padding-bottom: 8px;\n      border-bottom: 1px solid #EDEFF2;\n    }\n    .data-table th p {\n      margin: 0;\n      color: #9BA2AB;\n      font-size: 12px;\n    }\n    .data-table td {\n      padding: 10px 5px;\n      color: #74787E;\n      font-size: 15px;\n      line-height: 18px;\n    }\n    /* Invite Code ------------------------------ */\n    .invite-code {\n      display: inline-block;\n      padding-top: 20px;\n      padding-right: 36px;\n      padding-bottom: 16px;\n      padding-left: 36px;\n      border-radius: 3px;\n      font-family: Consolas, monaco, monospace;\n      font-size: 28px;\n      text-align: center;\n      letter-spacing: 8px;\n      color: #555;\n      background-color: #eee;\n    }\n    /* Buttons ------------------------------ */\n    .button {\n      display: inline-block;\n      width: 100%;\n      background-color: #00948d;\n      color: #ffffff !important;\n      font-size: 15px;\n      line-height: 45px;\n      text-align: center;\n      text-decoration: none;\n      -webkit-text-size-adjust: none;\n      mso-hide: all;\n    }\n    /*Media Queries ------------------------------ */\n    @media only screen and (max-width: 600px) {\n      .email-body_inner,\n      .email-footer {\n        width: 100% !important;\n      }\n    }\n  </style>\n</head>\n<body dir=\"{{.Hermes.TextDirection}}\">\n  <table class=\"email-wrapper\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n    <tr>\n      <td class=\"content\">\n        <table class=\"email-content\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n          <!-- Logo -->\n          <tr>\n            <td class=\"email-masthead\">\n              <a class=\"email-masthead_name\" href=\"{{.Hermes.Product.Link}}\" target=\"_blank\">\n                {{ if .Hermes.Product.Logo }}\n                  <img src=\"{{.Hermes.Product.Logo | url }}\" class=\"email-logo\" />\n                {{ else }}\n                  {{ .Hermes.Product.Name }}\n                {{ end }}\n                </a>\n            </td>\n          </tr>\n\n          <!-- Email Body -->\n          <tr>\n            <td class=\"email-body\" width=\"100%\">\n              <table class=\"email-body_inner\" align=\"center\" width=\"570\" cellpadding=\"0\" cellspacing=\"0\">\n                <!-- Body content -->\n                <tr>\n                  <td class=\"content-cell\">\n                    <h1>{{if .Email.Body.Title }}{{ .Email.Body.Title }}{{ else }}{{ .Email.Body.Greeting }} {{ .Email.Body.Name }},{{ end }}</h1>\n                    {{ with .Email.Body.Intros }}\n                        {{ if gt (len .) 0 }}\n                          {{ range $line := . }}\n                            <p>{{ $line }}</p>\n                          {{ end }}\n                        {{ end }}\n                    {{ end }}\n                    {{ if (ne .Email.Body.FreeMarkdown \"\") }}\n                      {{ .Email.Body.FreeMarkdown.ToHTML }}\n                    {{ else }}\n\n                      {{ with .Email.Body.Dictionary }} \n                        {{ if gt (len .) 0 }}\n                          <dl class=\"body-dictionary\">\n                            {{ range $entry := . }}\n                              <dt>{{ $entry.Key }}:</dt>\n                              <dd>{{ $entry.Value }}</dd>\n                            {{ end }}\n                          </dl>\n                        {{ end }}\n                      {{ end }}\n\n                      <!-- Table -->\n                      {{ with .Email.Body.Table }}\n                        {{ $data := .Data }}\n                        {{ $columns := .Columns }}\n                        {{ if gt (len $data) 0 }}\n                          <table class=\"data-wrapper\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                              <td colspan=\"2\">\n                                <table class=\"data-table\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n                                  <tr>\n                                    {{ $col := index $data 0 }}\n                                    {{ range $entry := $col }}\n                                      <th\n                                        {{ with $columns }}\n                                          {{ $width := index .CustomWidth $entry.Key }}\n                                          {{ with $width }}\n                                            width=\"{{ . }}\"\n                                          {{ end }}\n                                          {{ $align := index .CustomAlignment $entry.Key }}\n                                          {{ with $align }}\n                                            style=\"text-align:{{ . }}\"\n                                          {{ end }}\n                                        {{ end }}\n                                      >\n                                        <p>{{ $entry.Key }}</p>\n                                      </th>\n                                    {{ end }}\n                                  </tr>\n                                  {{ range $row := $data }}\n                                    <tr>\n                                      {{ range $cell := $row }}\n                                        <td\n                                          {{ with $columns }}\n                                            {{ $align := index .CustomAlignment $cell.Key }}\n                                            {{ with $align }}\n                                              style=\"text-align:{{ . }}\"\n                                            {{ end }}\n                                          {{ end }}\n                                        >\n                                          {{ $cell.Value }}\n                                        </td>\n                                      {{ end }}\n                                    </tr>\n                                  {{ end }}\n                                </table>\n                              </td>\n                            </tr>\n                          </table>\n                        {{ end }}\n                      {{ end }}\n\n                      <!-- Action -->\n                      {{ with .Email.Body.Actions }}\n                        {{ if gt (len .) 0 }}\n                          {{ range $action := . }}\n                            <p>{{ $action.Instructions }}</p>\n                            {{safe \"<!--[if mso]>\" }}\n                            {{ if $action.Button.Text }}\n                            <div style=\"margin: 30px auto\">\n                              <v:roundrect xmlns:v=\"urn:schemas-microsoft-com:vml\" \n                                xmlns:w=\"urn:schemas-microsoft-com:office:word\" \n                                href=\"{{ $action.Button.Link }}\" \n                                style=\"height:45px;v-text-anchor:middle;width:570px;background-color:{{ if $action.Button.Color }}{{ $action.Button.Color }}{{else}}#00948D{{ end }};\"\n                                arcsize=\"0%\" \n                                {{ if $action.Button.Color }}strokecolor=\"{{ $action.Button.Color }}\" fillcolor=\"{{ $action.Button.Color }}\"{{ else }}strokecolor=\"#00948D\" fillcolor=\"#00948D\"{{ end }}\n                                >\n                                <w:anchorlock/>\n                                <center style=\"color: {{ if $action.Button.TextColor }}{{ $action.Button.TextColor }}{{else}}#FFFFFF{{ end }};font-size: 15px;text-align: center;font-family:sans-serif;font-weight:bold;\">\n                                  {{ $action.Button.Text }}\n                                </center>\n                              </v:roundrect>\n                            </div>\n                            {{ end }}\n                            {{ if $action.InviteCode }}\n                            <div style=\"margin-top:30px;margin-bottom:30px\">\n                              <table class=\"body-action\" align=\"center\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tr>\n                                  <td align=\"center\">\n                                    <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" style=\"padding:0;text-align:center\">\n                                      <tr>\n                                        <td style=\"display:inline-block;border-radius:3px;font-family:Consolas, monaco, monospace;font-size:28px;text-align:center;letter-spacing:8px;color:#555;background-color:#eee;padding:20px\">\n                                          {{ $action.InviteCode }}\n                                        </td>\n                                      </tr>\n                                    </table>\n                                  </td>\n                                </tr>\n                              </table>\n                            </div>\n                            {{ end }} \n                            {{safe \"<![endif]-->\" }}\n                            {{safe \"<!--[if !mso]><!-- -->\"}}\n                            <table class=\"body-action\" align=\"center\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n                              <tr>\n                                <td align=\"center\">\n                                  <div>\n                                    {{ if $action.Button.Text }}\n                                      <a href=\"{{ $action.Button.Link }}\" class=\"button\" style=\"{{ with $action.Button.Color }}background-color: {{ . }};{{ end }} {{ with $action.Button.TextColor }}color: {{ . }};{{ end }}\" target=\"_blank\">\n                                        {{ $action.Button.Text }}\n                                      </a>\n                                    {{end}}\n                                    {{ if $action.InviteCode }}\n                                      <span class=\"invite-code\">{{ $action.InviteCode }}</span>\n                                    {{end}}\n                                  </div>\n                                </td>\n                              </tr>\n                            </table>\n                            {{safe \"<![endif]-->\" }}\n                            {{ end }}\n                        {{ end }}\n                      {{ end }}\n\n                    {{ end }}\n                    {{ with .Email.Body.Outros }} \n                        {{ if gt (len .) 0 }}\n                          {{ range $line := . }}\n                            <p>{{ $line }}</p>\n                          {{ end }}\n                        {{ end }}\n                      {{ end }}\n\n                    <p>\n                      {{.Email.Body.Signature}},\n                      <br />\n                      {{.Hermes.Product.Name}}\n                    </p>\n\n                    {{ if (eq .Email.Body.FreeMarkdown \"\") }}\n                      {{ with .Email.Body.Actions }} \n                        <table class=\"body-sub\">\n                          <tbody>\n                              {{ range $action := . }}\n                              {{if $action.Button.Text}}\n                                <tr>\n                                  <td>\n                                    <p class=\"sub\">{{$.Hermes.Product.TroubleText | replace \"{ACTION}\" $action.Button.Text}}</p>\n                                    <p class=\"sub\"><a href=\"{{ $action.Button.Link }}\">{{ $action.Button.Link }}</a></p>\n                                  </td>\n                                </tr>\n                              {{ end }}\n                              {{ end }}\n                          </tbody>\n                        </table>\n                      {{ end }}\n                    {{ end }}\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <table class=\"email-footer\" align=\"center\" width=\"570\" cellpadding=\"0\" cellspacing=\"0\">\n                <tr>\n                  <td class=\"content-cell\">\n                    <p class=\"sub center\">\n                      {{.Hermes.Product.Copyright}}\n                    </p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>\n`\n}\n\n// PlainTextTemplate returns a Golang template that will generate an plain text email.\nfunc (dt *Flat) PlainTextTemplate() string {\n\treturn `<h2>{{if .Email.Body.Title }}{{ .Email.Body.Title }}{{ else }}{{ .Email.Body.Greeting }} {{ .Email.Body.Name }}{{ end }},</h2>\n{{ with .Email.Body.Intros }}\n  {{ range $line := . }}\n    <p>{{ $line }}</p>\n  {{ end }}\n{{ end }}\n{{ if (ne .Email.Body.FreeMarkdown \"\") }}\n  {{ .Email.Body.FreeMarkdown.ToHTML }}\n{{ else }}\n  {{ with .Email.Body.Dictionary }}\n    <ul>\n    {{ range $entry := . }}\n      <li>{{ $entry.Key }}: {{ $entry.Value }}</li>\n    {{ end }}\n    </ul>\n  {{ end }}\n  {{ with .Email.Body.Table }}\n    {{ $data := .Data }}\n    {{ $columns := .Columns }}\n    {{ if gt (len $data) 0 }}\n      <table class=\"data-table\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n        <tr>\n          {{ $col := index $data 0 }}\n          {{ range $entry := $col }}\n            <th>{{ $entry.Key }} </th>\n          {{ end }}\n        </tr>\n        {{ range $row := $data }}\n          <tr>\n            {{ range $cell := $row }}\n              <td>\n                {{ $cell.Value }}\n              </td>\n            {{ end }}\n          </tr>\n        {{ end }}\n      </table>\n    {{ end }}\n  {{ end }}\n  {{ with .Email.Body.Actions }} \n    {{ range $action := . }}\n      <p>\n        {{ $action.Instructions }} \n        {{ if $action.InviteCode }}\n          {{ $action.InviteCode }}\n        {{ end }}\n        {{ if $action.Button.Link }}\n          {{ $action.Button.Link }}\n        {{ end }}\n      </p> \n    {{ end }}\n  {{ end }}\n{{ end }}\n{{ with .Email.Body.Outros }} \n  {{ range $line := . }}\n    <p>{{ $line }}<p>\n  {{ end }}\n{{ end }}\n<p>{{.Email.Body.Signature}},<br>{{.Hermes.Product.Name}} - {{.Hermes.Product.Link}}</p>\n\n<p>{{.Hermes.Product.Copyright}}</p>\n`\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.4306640625,
          "content": "module github.com/matcornic/hermes/v2\n\nrequire (\n\tgithub.com/Masterminds/semver v1.4.2 // indirect\n\tgithub.com/Masterminds/sprig v2.16.0+incompatible\n\tgithub.com/PuerkitoBio/goquery v1.5.0 // indirect\n\tgithub.com/aokoli/goutils v1.0.1 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/go-gomail/gomail v0.0.0-20160411212932-81ebce5c23df\n\tgithub.com/google/uuid v1.0.0 // indirect\n\tgithub.com/gorilla/css v1.0.0 // indirect\n\tgithub.com/huandu/xstrings v1.2.0 // indirect\n\tgithub.com/imdario/mergo v0.3.6\n\tgithub.com/jaytaylor/html2text v0.0.0-20180606194806-57d518f124b0\n\tgithub.com/kr/pretty v0.1.0 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.3 // indirect\n\tgithub.com/olekukonko/tablewriter v0.0.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.0.1\n\tgithub.com/shurcooL/sanitized_anchor_name v1.0.0 // indirect\n\tgithub.com/ssor/bom v0.0.0-20170718123548-6386211fdfcf // indirect\n\tgithub.com/stretchr/testify v1.2.2\n\tgithub.com/vanng822/css v0.0.0-20190504095207-a21e860bcd04 // indirect\n\tgithub.com/vanng822/go-premailer v0.0.0-20191214114701-be27abe028fe\n\tgolang.org/x/crypto v0.0.0-20181029175232-7e6ffbd03851\n\tgolang.org/x/sys v0.0.0-20190225065934-cc5685c2db12 // indirect\n\tgopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 // indirect\n\tgopkg.in/yaml.v2 v2.2.1 // indirect\n)\n\nreplace gopkg.in/russross/blackfriday.v2 v2.0.1 => github.com/russross/blackfriday/v2 v2.0.1\n\ngo 1.13\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.7470703125,
          "content": "github.com/Masterminds/semver v1.4.2 h1:WBLTQ37jOCzSLtXNdoo8bNM8876KhNqOKvrlGITgsTc=\ngithub.com/Masterminds/semver v1.4.2/go.mod h1:MB6lktGJrhw8PrUyiEoblNEGEQ+RzHPF078ddwwvV3Y=\ngithub.com/Masterminds/sprig v2.16.0+incompatible h1:QZbMUPxRQ50EKAq3LFMnxddMu88/EUUG3qmxwtDmPsY=\ngithub.com/Masterminds/sprig v2.16.0+incompatible/go.mod h1:y6hNFY5UBTIWBxnzTeuNhlNS5hqE0NB0E6fgfo2Br3o=\ngithub.com/PuerkitoBio/goquery v1.5.0 h1:uGvmFXOA73IKluu/F84Xd1tt/z07GYm8X49XKHP7EJk=\ngithub.com/PuerkitoBio/goquery v1.5.0/go.mod h1:qD2PgZ9lccMbQlc7eEOjaeRlFQON7xY8kdmcsrnKqMg=\ngithub.com/andybalholm/cascadia v1.0.0 h1:hOCXnnZ5A+3eVDX8pvgl4kofXv2ELss0bKcqRySc45o=\ngithub.com/andybalholm/cascadia v1.0.0/go.mod h1:GsXiBklL0woXo1j/WYWtSYYC4ouU9PqHO0sqidkEA4Y=\ngithub.com/aokoli/goutils v1.0.1 h1:7fpzNGoJ3VA8qcrm++XEE1QUe0mIwNeLa02Nwq7RDkg=\ngithub.com/aokoli/goutils v1.0.1/go.mod h1:SijmP0QR8LtwsmDs8Yii5Z/S4trXFGFC2oO5g9DP+DQ=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-gomail/gomail v0.0.0-20160411212932-81ebce5c23df h1:Bao6dhmbTA1KFVxmJ6nBoMuOJit2yjEgLJpIMYpop0E=\ngithub.com/go-gomail/gomail v0.0.0-20160411212932-81ebce5c23df/go.mod h1:GJr+FCSXshIwgHBtLglIg9M2l2kQSi6QjVAngtzI08Y=\ngithub.com/google/uuid v1.0.0 h1:b4Gk+7WdP/d3HZH8EJsZpvV7EtDOgaZLtnaNGIu1adA=\ngithub.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/css v1.0.0 h1:BQqNyPTi50JCFMTw/b67hByjMVXZRwGha6wxVGkeihY=\ngithub.com/gorilla/css v1.0.0/go.mod h1:Dn721qIggHpt4+EFCcTLTU/vk5ySda2ReITrtgBl60c=\ngithub.com/huandu/xstrings v1.2.0 h1:yPeWdRnmynF7p+lLYz0H2tthW9lqhMJrQV/U7yy4wX0=\ngithub.com/huandu/xstrings v1.2.0/go.mod h1:DvyZB1rfVYsBIigL8HwpZgxHwXozlTgGqn63UyNX5k4=\ngithub.com/imdario/mergo v0.3.6 h1:xTNEAn+kxVO7dTZGu0CegyqKZmoWFI0rF8UxjlB2d28=\ngithub.com/imdario/mergo v0.3.6/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/jaytaylor/html2text v0.0.0-20180606194806-57d518f124b0 h1:xqgexXAGQgY3HAjNPSaCqn5Aahbo5TKsmhp8VRfr1iQ=\ngithub.com/jaytaylor/html2text v0.0.0-20180606194806-57d518f124b0/go.mod h1:CVKlgaMiht+LXvHG173ujK6JUhZXKb2u/BQtjPDIvyk=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/mattn/go-runewidth v0.0.3 h1:a+kO+98RDGEfo6asOGMmpodZq4FNtnGP54yps8BzLR4=\ngithub.com/mattn/go-runewidth v0.0.3/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/olekukonko/tablewriter v0.0.1 h1:b3iUnf1v+ppJiOfNX4yxxqfWKMQPZR5yoh8urCTFX88=\ngithub.com/olekukonko/tablewriter v0.0.1/go.mod h1:vsDQFd/mU46D+Z4whnwzcISnGGzXWMclvtLoiIKAKIo=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/russross/blackfriday/v2 v2.0.1 h1:lPqVAte+HuHNfhJ/0LC98ESWRz8afy9tM/0RK8m9o+Q=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0 h1:PdmoCO6wvbs+7yrJyMORt4/BmY5IYyJwS/kOiWx8mHo=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/ssor/bom v0.0.0-20170718123548-6386211fdfcf h1:pvbZ0lM0XWPBqUKqFU8cmavspvIl9nulOYwdy6IFRRo=\ngithub.com/ssor/bom v0.0.0-20170718123548-6386211fdfcf/go.mod h1:RJID2RhlZKId02nZ62WenDCkgHFerpIOmW0iT7GKmXM=\ngithub.com/stretchr/testify v1.2.2 h1:bSDNvY7ZPG5RlJ8otE/7V6gMiyenm9RtJ7IUVIAoJ1w=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/vanng822/css v0.0.0-20190504095207-a21e860bcd04 h1:L0rPdfzq43+NV8rfIx2kA4iSSLRj2jN5ijYHoeXRwvQ=\ngithub.com/vanng822/css v0.0.0-20190504095207-a21e860bcd04/go.mod h1:tcnB1voG49QhCrwq1W0w5hhGasvOg+VQp9i9H1rCM1w=\ngithub.com/vanng822/go-premailer v0.0.0-20191214114701-be27abe028fe h1:9YnI5plmy+ad6BM+JCLJb2ZV7/TNiE5l7SNKfumYKgc=\ngithub.com/vanng822/go-premailer v0.0.0-20191214114701-be27abe028fe/go.mod h1:JTFJA/t820uFDoyPpErFQ3rb3amdZoPtxcKervG0OE4=\ngolang.org/x/crypto v0.0.0-20181029175232-7e6ffbd03851 h1:I3xmTQr7a0n8SA6urVBFKB7hsVRLLN2LBITNbXPj1/w=\ngolang.org/x/crypto v0.0.0-20181029175232-7e6ffbd03851/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/net v0.0.0-20180218175443-cbe0f9307d01/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181029044818-c44066c5c816 h1:mVFkLpejdFLXVUv9E42f3XJVfMdqd0IVLVIVLjZWn5o=\ngolang.org/x/net v0.0.0-20181029044818-c44066c5c816/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a h1:gOpx8G595UYyvj8UK4+OFyY4rx037g3fmfhe5SasG3U=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/sys v0.0.0-20190225065934-cc5685c2db12 h1:Zw7eRv6INHGfu15LVRN1vrrwusJbnfJjAZn3D1VkQIE=\ngolang.org/x/sys v0.0.0-20190225065934-cc5685c2db12/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.1 h1:mUhvW9EsL+naU5Q3cakzfE91YhliOondGd6ZrsDBHQE=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n"
        },
        {
          "name": "hermes.go",
          "type": "blob",
          "size": 6.6474609375,
          "content": "package hermes\n\nimport (\n\t\"bytes\"\n\t\"html/template\"\n\n\t\"github.com/Masterminds/sprig\"\n\t\"github.com/imdario/mergo\"\n\t\"github.com/jaytaylor/html2text\"\n\t\"github.com/russross/blackfriday/v2\"\n\t\"github.com/vanng822/go-premailer/premailer\"\n)\n\n// Hermes is an instance of the hermes email generator\ntype Hermes struct {\n\tTheme              Theme\n\tTextDirection      TextDirection\n\tProduct            Product\n\tDisableCSSInlining bool\n}\n\n// Theme is an interface to implement when creating a new theme\ntype Theme interface {\n\tName() string              // The name of the theme\n\tHTMLTemplate() string      // The golang template for HTML emails\n\tPlainTextTemplate() string // The golang templte for plain text emails (can be basic HTML)\n}\n\n// TextDirection of the text in HTML email\ntype TextDirection string\n\nvar templateFuncs = template.FuncMap{\n\t\"url\": func(s string) template.URL {\n\t\treturn template.URL(s)\n\t},\n}\n\n// TDLeftToRight is the text direction from left to right (default)\nconst TDLeftToRight TextDirection = \"ltr\"\n\n// TDRightToLeft is the text direction from right to left\nconst TDRightToLeft TextDirection = \"rtl\"\n\n// Product represents your company product (brand)\n// Appears in header & footer of e-mails\ntype Product struct {\n\tName        string\n\tLink        string // e.g. https://matcornic.github.io\n\tLogo        string // e.g. https://matcornic.github.io/img/logo.png\n\tCopyright   string // Copyright © 2019 Hermes. All rights reserved.\n\tTroubleText string // TroubleText is the sentence at the end of the email for users having trouble with the button (default to `If you’re having trouble with the button '{ACTION}', copy and paste the URL below into your web browser.`)\n}\n\n// Email is the email containing a body\ntype Email struct {\n\tBody Body\n}\n\n// Markdown is a HTML template (a string) representing Markdown content\n// https://en.wikipedia.org/wiki/Markdown\ntype Markdown template.HTML\n\n// Body is the body of the email, containing all interesting data\ntype Body struct {\n\tName         string   // The name of the contacted person\n\tIntros       []string // Intro sentences, first displayed in the email\n\tDictionary   []Entry  // A list of key+value (useful for displaying parameters/settings/personal info)\n\tTable        Table    // Table is an table where you can put data (pricing grid, a bill, and so on)\n\tActions      []Action // Actions are a list of actions that the user will be able to execute via a button click\n\tOutros       []string // Outro sentences, last displayed in the email\n\tGreeting     string   // Greeting for the contacted person (default to 'Hi')\n\tSignature    string   // Signature for the contacted person (default to 'Yours truly')\n\tTitle        string   // Title replaces the greeting+name when set\n\tFreeMarkdown Markdown // Free markdown content that replaces all content other than header and footer\n}\n\n// ToHTML converts Markdown to HTML\nfunc (c Markdown) ToHTML() template.HTML {\n\treturn template.HTML(blackfriday.Run([]byte(string(c))))\n}\n\n// Entry is a simple entry of a map\n// Allows using a slice of entries instead of a map\n// Because Golang maps are not ordered\ntype Entry struct {\n\tKey   string\n\tValue string\n}\n\n// Table is an table where you can put data (pricing grid, a bill, and so on)\ntype Table struct {\n\tData    [][]Entry // Contains data\n\tColumns Columns   // Contains meta-data for display purpose (width, alignement)\n}\n\n// Columns contains meta-data for the different columns\ntype Columns struct {\n\tCustomWidth     map[string]string\n\tCustomAlignment map[string]string\n}\n\n// Action is anything the user can act on (i.e., click on a button, view an invite code)\ntype Action struct {\n\tInstructions string\n\tButton       Button\n\tInviteCode   string\n}\n\n// Button defines an action to launch\ntype Button struct {\n\tColor     string\n\tTextColor string\n\tText      string\n\tLink      string\n}\n\n// Template is the struct given to Golang templating\n// Root object in a template is this struct\ntype Template struct {\n\tHermes Hermes\n\tEmail  Email\n}\n\nfunc setDefaultEmailValues(e *Email) error {\n\t// Default values of an email\n\tdefaultEmail := Email{\n\t\tBody: Body{\n\t\t\tIntros:     []string{},\n\t\t\tDictionary: []Entry{},\n\t\t\tOutros:     []string{},\n\t\t\tSignature:  \"Yours truly\",\n\t\t\tGreeting:   \"Hi\",\n\t\t},\n\t}\n\t// Merge the given email with default one\n\t// Default one overrides all zero values\n\treturn mergo.Merge(e, defaultEmail)\n}\n\n// default values of the engine\nfunc setDefaultHermesValues(h *Hermes) error {\n\tdefaultTextDirection := TDLeftToRight\n\tdefaultHermes := Hermes{\n\t\tTheme:         new(Default),\n\t\tTextDirection: defaultTextDirection,\n\t\tProduct: Product{\n\t\t\tName:        \"Hermes\",\n\t\t\tCopyright:   \"Copyright © 2020 Hermes. All rights reserved.\",\n\t\t\tTroubleText: \"If you’re having trouble with the button '{ACTION}', copy and paste the URL below into your web browser.\",\n\t\t},\n\t}\n\t// Merge the given hermes engine configuration with default one\n\t// Default one overrides all zero values\n\terr := mergo.Merge(h, defaultHermes)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif h.TextDirection != TDLeftToRight && h.TextDirection != TDRightToLeft {\n\t\th.TextDirection = defaultTextDirection\n\t}\n\treturn nil\n}\n\n// GenerateHTML generates the email body from data to an HTML Reader\n// This is for modern email clients\nfunc (h *Hermes) GenerateHTML(email Email) (string, error) {\n\terr := setDefaultHermesValues(h)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn h.generateTemplate(email, h.Theme.HTMLTemplate())\n}\n\n// GeneratePlainText generates the email body from data\n// This is for old email clients\nfunc (h *Hermes) GeneratePlainText(email Email) (string, error) {\n\terr := setDefaultHermesValues(h)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\ttemplate, err := h.generateTemplate(email, h.Theme.PlainTextTemplate())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn html2text.FromString(template, html2text.Options{PrettyTables: true})\n}\n\nfunc (h *Hermes) generateTemplate(email Email, tplt string) (string, error) {\n\n\terr := setDefaultEmailValues(&email)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\t// Generate the email from Golang template\n\t// Allow usage of simple function from sprig : https://github.com/Masterminds/sprig\n\tt, err := template.New(\"hermes\").Funcs(sprig.FuncMap()).Funcs(templateFuncs).Funcs(template.FuncMap{\n\t\t\"safe\": func(s string) template.HTML { return template.HTML(s) }, // Used for keeping comments in generated template\n\t}).Parse(tplt)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tvar b bytes.Buffer\n\terr = t.Execute(&b, Template{*h, email})\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tres := b.String()\n\tif h.DisableCSSInlining {\n\t\treturn res, nil\n\t}\n\n\t// Inlining CSS\n\tprem, err := premailer.NewPremailerFromString(res, premailer.NewOptions())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\thtml, err := prem.Transform()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn html, nil\n}\n"
        },
        {
          "name": "hermes_test.go",
          "type": "blob",
          "size": 17.029296875,
          "content": "package hermes\n\nimport (\n\t\"github.com/stretchr/testify/assert\"\n\t\"testing\"\n)\n\nvar testedThemes = []Theme{\n\t// Insert your new theme here\n\tnew(Default),\n\tnew(Flat),\n}\n\n/////////////////////////////////////////////////////\n// Every theme should display the same information //\n// Find below the tests to check that              //\n/////////////////////////////////////////////////////\n\n// Implement this interface when creating a new example checking a common feature of all themes\ntype Example interface {\n\t// Create the hermes example with data\n\t// Represents the \"Given\" step in Given/When/Then Workflow\n\tgetExample() (h Hermes, email Email)\n\t// Checks the content of the generated HTML email by asserting content presence or not\n\tassertHTMLContent(t *testing.T, s string)\n\t// Checks the content of the generated Plaintext email by asserting content presence or not\n\tassertPlainTextContent(t *testing.T, s string)\n}\n\n// Scenario\ntype SimpleExample struct {\n\ttheme Theme\n}\n\nfunc (ed *SimpleExample) getExample() (Hermes, Email) {\n\th := Hermes{\n\t\tTheme: ed.theme,\n\t\tProduct: Product{\n\t\t\tName:      \"HermesName\",\n\t\t\tLink:      \"http://hermes-link.com\",\n\t\t\tCopyright: \"Copyright © Hermes-Test\",\n\t\t\tLogo:      \"http://www.duchess-france.org/wp-content/uploads/2016/01/gopher.png\",\n\t\t},\n\t\tTextDirection:      TDLeftToRight,\n\t\tDisableCSSInlining: true,\n\t}\n\n\temail := Email{\n\t\tBody{\n\t\t\tName: \"Jon Snow\",\n\t\t\tIntros: []string{\n\t\t\t\t\"Welcome to Hermes! We're very excited to have you on board.\",\n\t\t\t},\n\t\t\tDictionary: []Entry{\n\t\t\t\t{\"Firstname\", \"Jon\"},\n\t\t\t\t{\"Lastname\", \"Snow\"},\n\t\t\t\t{\"Birthday\", \"01/01/283\"},\n\t\t\t},\n\t\t\tTable: Table{\n\t\t\t\tData: [][]Entry{\n\t\t\t\t\t{\n\t\t\t\t\t\t{Key: \"Item\", Value: \"Golang\"},\n\t\t\t\t\t\t{Key: \"Description\", Value: \"Open source programming language that makes it easy to build simple, reliable, and efficient software\"},\n\t\t\t\t\t\t{Key: \"Price\", Value: \"$10.99\"},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t{Key: \"Item\", Value: \"Hermes\"},\n\t\t\t\t\t\t{Key: \"Description\", Value: \"Programmatically create beautiful e-mails using Golang.\"},\n\t\t\t\t\t\t{Key: \"Price\", Value: \"$1.99\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tColumns: Columns{\n\t\t\t\t\tCustomWidth: map[string]string{\n\t\t\t\t\t\t\"Item\":  \"20%\",\n\t\t\t\t\t\t\"Price\": \"15%\",\n\t\t\t\t\t},\n\t\t\t\t\tCustomAlignment: map[string]string{\n\t\t\t\t\t\t\"Price\": \"right\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: []Action{\n\t\t\t\t{\n\t\t\t\t\tInstructions: \"To get started with Hermes, please click here:\",\n\t\t\t\t\tButton: Button{\n\t\t\t\t\t\tColor: \"#22BC66\",\n\t\t\t\t\t\tText:  \"Confirm your account\",\n\t\t\t\t\t\tLink:  \"https://hermes-example.com/confirm?token=d9729feb74992cc3482b350163a1a010\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutros: []string{\n\t\t\t\t\"Need help, or have questions? Just reply to this email, we'd love to help.\",\n\t\t\t},\n\t\t},\n\t}\n\treturn h, email\n}\n\nfunc (ed *SimpleExample) assertHTMLContent(t *testing.T, r string) {\n\n\t// Assert on product\n\tassert.Contains(t, r, \"HermesName\", \"Product: Should find the name of the product in email\")\n\tassert.Contains(t, r, \"http://hermes-link.com\", \"Product: Should find the link of the product in email\")\n\tassert.Contains(t, r, \"Copyright © Hermes-Test\", \"Product: Should find the Copyright of the product in email\")\n\tassert.Contains(t, r, \"http://www.duchess-france.org/wp-content/uploads/2016/01/gopher.png\", \"Product: Should find the logo of the product in email\")\n\tassert.Contains(t, r, \"If you’re having trouble with the button &#39;Confirm your account&#39;, copy and paste the URL below into your web browser.\", \"Product: Should find the trouble text in email\")\n\t// Assert on email body\n\tassert.Contains(t, r, \"Hi Jon Snow\", \"Name: Should find the name of the person\")\n\tassert.Contains(t, r, \"Welcome to Hermes\", \"Intro: Should have intro\")\n\tassert.Contains(t, r, \"Birthday\", \"Dictionary: Should have dictionary\")\n\tassert.Contains(t, r, \"Open source programming language\", \"Table: Should have table with first row and first column\")\n\tassert.Contains(t, r, \"Programmatically create beautiful e-mails using Golang\", \"Table: Should have table with second row and first column\")\n\tassert.Contains(t, r, \"$10.99\", \"Table: Should have table with first row and second column\")\n\tassert.Contains(t, r, \"$1.99\", \"Table: Should have table with second row and second column\")\n\tassert.Contains(t, r, \"started with Hermes\", \"Action: Should have instruction\")\n\tassert.Contains(t, r, \"Confirm your account\", \"Action: Should have button of action\")\n\tassert.Contains(t, r, \"#22BC66\", \"Action: Button should have given color\")\n\tassert.Contains(t, r, \"https://hermes-example.com/confirm?token=d9729feb74992cc3482b350163a1a010\", \"Action: Button should have link\")\n\tassert.Contains(t, r, \"Need help, or have questions\", \"Outro: Should have outro\")\n}\n\nfunc (ed *SimpleExample) assertPlainTextContent(t *testing.T, r string) {\n\n\t// Assert on product\n\tassert.Contains(t, r, \"HermesName\", \"Product: Should find the name of the product in email\")\n\tassert.Contains(t, r, \"http://hermes-link.com\", \"Product: Should find the link of the product in email\")\n\tassert.Contains(t, r, \"Copyright © Hermes-Test\", \"Product: Should find the Copyright of the product in email\")\n\tassert.NotContains(t, r, \"http://www.duchess-france.org/wp-content/uploads/2016/01/gopher.png\", \"Product: Should not find any logo in plain text\")\n\n\t// Assert on email body\n\tassert.Contains(t, r, \"Hi Jon Snow\", \"Name: Should find the name of the person\")\n\tassert.Contains(t, r, \"Welcome to Hermes\", \"Intro: Should have intro\")\n\tassert.Contains(t, r, \"Birthday\", \"Dictionary: Should have dictionary\")\n\tassert.Contains(t, r, \"Open source\", \"Table: Should have table content\")\n\tassert.Contains(t, r, `+--------+--------------------------------+--------+\n|  ITEM  |          DESCRIPTION           | PRICE  |\n+--------+--------------------------------+--------+\n| Golang | Open source programming        | $10.99 |\n|        | language that makes it easy    |        |\n|        | to build simple, reliable, and |        |\n|        | efficient software             |        |\n| Hermes | Programmatically create        | $1.99  |\n|        | beautiful e-mails using        |        |\n|        | Golang.                        |        |\n+--------+--------------------------------+--------`, \"Table: Should have pretty table content\")\n\tassert.Contains(t, r, \"started with Hermes\", \"Action: Should have instruction\")\n\tassert.NotContains(t, r, \"Confirm your account\", \"Action: Should not have button of action in plain text\")\n\tassert.NotContains(t, r, \"#22BC66\", \"Action: Button should not have color in plain text\")\n\tassert.Contains(t, r, \"https://hermes-example.com/confirm?token=d9729feb74992cc3482b350163a1a010\", \"Action: Even if button is not possible in plain text, it should have the link\")\n\tassert.Contains(t, r, \"Need help, or have questions\", \"Outro: Should have outro\")\n}\n\ntype WithTitleInsteadOfNameExample struct {\n\ttheme Theme\n}\n\nfunc (ed *WithTitleInsteadOfNameExample) getExample() (Hermes, Email) {\n\th := Hermes{\n\t\tTheme: ed.theme,\n\t\tProduct: Product{\n\t\t\tName: \"Hermes\",\n\t\t\tLink: \"http://hermes.com\",\n\t\t},\n\t\tDisableCSSInlining: true,\n\t}\n\n\temail := Email{\n\t\tBody{\n\t\t\tName:  \"Jon Snow\",\n\t\t\tTitle: \"A new e-mail\",\n\t\t},\n\t}\n\treturn h, email\n}\n\nfunc (ed *WithTitleInsteadOfNameExample) assertHTMLContent(t *testing.T, r string) {\n\tassert.NotContains(t, r, \"Hi Jon Snow\", \"Name: should not find greetings from Jon Snow because title should be used\")\n\tassert.Contains(t, r, \"A new e-mail\", \"Title should be used instead of name\")\n}\n\nfunc (ed *WithTitleInsteadOfNameExample) assertPlainTextContent(t *testing.T, r string) {\n\tassert.NotContains(t, r, \"Hi Jon Snow\", \"Name: should not find greetings from Jon Snow because title should be used\")\n\tassert.Contains(t, r, \"A new e-mail\", \"Title shoud be used instead of name\")\n}\n\ntype WithGreetingDifferentThanDefault struct {\n\ttheme Theme\n}\n\nfunc (ed *WithGreetingDifferentThanDefault) getExample() (Hermes, Email) {\n\th := Hermes{\n\t\tTheme: ed.theme,\n\t\tProduct: Product{\n\t\t\tName: \"Hermes\",\n\t\t\tLink: \"http://hermes.com\",\n\t\t},\n\t\tDisableCSSInlining: true,\n\t}\n\n\temail := Email{\n\t\tBody{\n\t\t\tGreeting: \"Dear\",\n\t\t\tName:     \"Jon Snow\",\n\t\t},\n\t}\n\treturn h, email\n}\n\nfunc (ed *WithGreetingDifferentThanDefault) assertHTMLContent(t *testing.T, r string) {\n\tassert.NotContains(t, r, \"Hi Jon Snow\", \"Should not find greetings with 'Hi' which is default\")\n\tassert.Contains(t, r, \"Dear Jon Snow\", \"Should have greeting with Dear\")\n}\n\nfunc (ed *WithGreetingDifferentThanDefault) assertPlainTextContent(t *testing.T, r string) {\n\tassert.NotContains(t, r, \"Hi Jon Snow\", \"Should not find greetings with 'Hi' which is default\")\n\tassert.Contains(t, r, \"Dear Jon Snow\", \"Should have greeting with Dear\")\n}\n\ntype WithSignatureDifferentThanDefault struct {\n\ttheme Theme\n}\n\nfunc (ed *WithSignatureDifferentThanDefault) getExample() (Hermes, Email) {\n\th := Hermes{\n\t\tTheme: ed.theme,\n\t\tProduct: Product{\n\t\t\tName: \"Hermes\",\n\t\t\tLink: \"http://hermes.com\",\n\t\t},\n\t\tDisableCSSInlining: true,\n\t}\n\n\temail := Email{\n\t\tBody{\n\t\t\tName:      \"Jon Snow\",\n\t\t\tSignature: \"Best regards\",\n\t\t},\n\t}\n\treturn h, email\n}\n\nfunc (ed *WithSignatureDifferentThanDefault) assertHTMLContent(t *testing.T, r string) {\n\tassert.NotContains(t, r, \"Yours truly\", \"Should not find signature with 'Yours truly' which is default\")\n\tassert.Contains(t, r, \"Best regards\", \"Should have greeting with Dear\")\n}\n\nfunc (ed *WithSignatureDifferentThanDefault) assertPlainTextContent(t *testing.T, r string) {\n\tassert.NotContains(t, r, \"Yours truly\", \"Should not find signature with 'Yours truly' which is default\")\n\tassert.Contains(t, r, \"Best regards\", \"Should have greeting with Dear\")\n}\n\ntype WithInviteCode struct {\n\ttheme Theme\n}\n\nfunc (ed *WithInviteCode) getExample() (Hermes, Email) {\n\th := Hermes{\n\t\tTheme: ed.theme,\n\t\tProduct: Product{\n\t\t\tName: \"Hermes\",\n\t\t\tLink: \"http://hermes.com\",\n\t\t},\n\t\tDisableCSSInlining: true,\n\t}\n\n\temail := Email{\n\t\tBody{\n\t\t\tName:      \"Jon Snow\",\n\t\t\tActions: []Action{\n\t\t\t\t{\n\t\t\t\t\tInstructions: \"Here is your invite code:\",\n\t\t\t\t\tInviteCode: \"123456\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\treturn h, email\n}\n\nfunc (ed *WithInviteCode) assertHTMLContent(t *testing.T, r string) {\n\tassert.Contains(t, r, \"Here is your invite code\", \"Should contains the instruction\")\n\tassert.Contains(t, r, \"123456\", \"Should contain the short code\")\n}\n\nfunc (ed *WithInviteCode) assertPlainTextContent(t *testing.T, r string) {\n\tassert.Contains(t, r, \"Here is your invite code\", \"Should contains the instruction\")\n\tassert.Contains(t, r, \"123456\", \"Should contain the short code\")\n}\n\ntype WithFreeMarkdownContent struct {\n\ttheme Theme\n}\n\nfunc (ed *WithFreeMarkdownContent) getExample() (Hermes, Email) {\n\th := Hermes{\n\t\tTheme: ed.theme,\n\t\tProduct: Product{\n\t\t\tName: \"Hermes\",\n\t\t\tLink: \"http://hermes.com\",\n\t\t},\n\t\tDisableCSSInlining: true,\n\t}\n\n\temail := Email{\n\t\tBody{\n\t\t\tName: \"Jon Snow\",\n\t\t\tFreeMarkdown: `\n> _Hermes_ service will shutdown the **1st August 2017** for maintenance operations. \n\nServices will be unavailable based on the following schedule:\n\n| Services | Downtime |\n| :------:| :-----------: |\n| Service A | 2AM to 3AM |\n| Service B | 4AM to 5AM |\n| Service C | 5AM to 6AM |\n\n---\n\nFeel free to contact us for any question regarding this matter at [support@hermes-example.com](mailto:support@hermes-example.com) or in our [Gitter](https://gitter.im/)\n\n`,\n\t\t\tIntros: []string{\n\t\t\t\t\"An intro that should be kept even with FreeMarkdown\",\n\t\t\t},\n\t\t\tDictionary: []Entry{\n\t\t\t\t{\"Dictionary that should not be displayed\", \"Because of FreeMarkdown\"},\n\t\t\t},\n\t\t\tTable: Table{\n\t\t\t\tData: [][]Entry{\n\t\t\t\t\t{\n\t\t\t\t\t\t{Key: \"Item\", Value: \"Golang\"},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t{Key: \"Item\", Value: \"Hermes\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: []Action{\n\t\t\t\t{\n\t\t\t\t\tInstructions: \"Action that should not be displayed, because of FreeMarkdown:\",\n\t\t\t\t\tButton: Button{\n\t\t\t\t\t\tColor: \"#22BC66\",\n\t\t\t\t\t\tText:  \"Button\",\n\t\t\t\t\t\tLink:  \"https://hermes-example.com/confirm?token=d9729feb74992cc3482b350163a1a010\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutros: []string{\n\t\t\t\t\"An outro that should be kept even with FreeMarkdown\",\n\t\t\t},\n\t\t},\n\t}\n\treturn h, email\n}\n\nfunc (ed *WithFreeMarkdownContent) assertHTMLContent(t *testing.T, r string) {\n\tassert.Contains(t, r, \"Yours truly\", \"Should find signature with 'Yours truly' which is default\")\n\tassert.Contains(t, r, \"Jon Snow\", \"Should find title with 'Jon Snow'\")\n\tassert.Contains(t, r, \"<em>Hermes</em> service will shutdown\", \"Should find quote as HTML formatted content\")\n\tassert.Contains(t, r, \"<td align=\\\"center\\\">2AM to 3AM</td>\", \"Should find cell content as HTML formatted content\")\n\tassert.Contains(t, r, \"<a href=\\\"mailto:support@hermes-example.com\\\">support@hermes-example.com</a>\", \"Should find link of mailto as HTML formatted content\")\n\tassert.Contains(t, r, \"An intro that should be kept even with FreeMarkdown\", \"Should find intro even with FreeMarkdown\")\n\tassert.Contains(t, r, \"An outro that should be kept even with FreeMarkdown\", \"Should find outro even with FreeMarkdown\")\n\tassert.NotContains(t, r, \"should not be displayed\", \"Should find any other content that the one from FreeMarkdown object\")\n}\n\nfunc (ed *WithFreeMarkdownContent) assertPlainTextContent(t *testing.T, r string) {\n\tassert.Contains(t, r, \"Yours truly\", \"Should find signature with 'Yours truly' which is default\")\n\tassert.Contains(t, r, \"Jon Snow\", \"Should find title with 'Jon Snow'\")\n\tassert.Contains(t, r, \"> Hermes service will shutdown\", \"Should find quote as plain text with quote emphaze on sentence\")\n\tassert.Contains(t, r, \"2AM to 3AM\", \"Should find cell content as plain text\")\n\tassert.Contains(t, r, `+-----------+------------+\n| SERVICES  |  DOWNTIME  |\n+-----------+------------+\n| Service A | 2AM to 3AM |\n| Service B | 4AM to 5AM |\n| Service C | 5AM to 6AM |\n+-----------+------------+`, \"Should find pretty table as plain text\")\n\tassert.Contains(t, r, \"support@hermes-example.com\", \"Should find link of mailto as plain text\")\n\tassert.NotContains(t, r, \"<table>\", \"Should not find html table tags\")\n\tassert.NotContains(t, r, \"<tr>\", \"Should not find html tr tags\")\n\tassert.NotContains(t, r, \"<a>\", \"Should not find html link tags\")\n\tassert.NotContains(t, r, \"should not be displayed\", \"Should find any other content that the one from FreeMarkdown object\")\n\n}\n\n// Test all the themes for the features\n\nfunc TestThemeSimple(t *testing.T) {\n\tfor _, theme := range testedThemes {\n\t\tcheckExample(t, &SimpleExample{theme})\n\t}\n}\n\nfunc TestThemeWithTitleInsteadOfName(t *testing.T) {\n\tfor _, theme := range testedThemes {\n\t\tcheckExample(t, &WithTitleInsteadOfNameExample{theme})\n\t}\n}\n\nfunc TestThemeWithGreetingDifferentThanDefault(t *testing.T) {\n\tfor _, theme := range testedThemes {\n\t\tcheckExample(t, &WithGreetingDifferentThanDefault{theme})\n\t}\n}\n\nfunc TestThemeWithGreetingDiffrentThanDefault(t *testing.T) {\n\tfor _, theme := range testedThemes {\n\t\tcheckExample(t, &WithSignatureDifferentThanDefault{theme})\n\t}\n}\n\nfunc TestThemeWithFreeMarkdownContent(t *testing.T) {\n\tfor _, theme := range testedThemes {\n\t\tcheckExample(t, &WithFreeMarkdownContent{theme})\n\t}\n}\n\nfunc TestThemeWithInviteCode(t *testing.T) {\n\tfor _, theme := range testedThemes {\n\t\tcheckExample(t, &WithInviteCode{theme})\n\t}\n}\n\nfunc checkExample(t *testing.T, ex Example) {\n\t// Given an example\n\th, email := ex.getExample()\n\n\t// When generating HTML template\n\tr, err := h.GenerateHTML(email)\n\tt.Log(r)\n\tassert.Nil(t, err)\n\tassert.NotEmpty(t, r)\n\n\t// Then asserting HTML is OK\n\tex.assertHTMLContent(t, r)\n\n\t// When generating plain text template\n\tr, err = h.GeneratePlainText(email)\n\tt.Log(r)\n\tassert.Nil(t, err)\n\tassert.NotEmpty(t, r)\n\n\t// Then asserting plain text is OK\n\tex.assertPlainTextContent(t, r)\n}\n\n////////////////////////////////////////////\n// Tests on default values for all themes //\n// It does not check email content        //\n////////////////////////////////////////////\n\nfunc TestHermes_TextDirectionAsDefault(t *testing.T) {\n\th := Hermes{\n\t\tProduct: Product{\n\t\t\tName: \"Hermes\",\n\t\t\tLink: \"http://hermes.com\",\n\t\t},\n\t\tTextDirection:      \"not-existing\", // Wrong text-direction\n\t\tDisableCSSInlining: true,\n\t}\n\n\temail := Email{\n\t\tBody{\n\t\t\tName: \"Jon Snow\",\n\t\t\tIntros: []string{\n\t\t\t\t\"Welcome to Hermes! We're very excited to have you on board.\",\n\t\t\t},\n\t\t\tActions: []Action{\n\t\t\t\t{\n\t\t\t\t\tInstructions: \"To get started with Hermes, please click here:\",\n\t\t\t\t\tButton: Button{\n\t\t\t\t\t\tColor: \"#22BC66\",\n\t\t\t\t\t\tText:  \"Confirm your account\",\n\t\t\t\t\t\tLink:  \"https://hermes-example.com/confirm?token=d9729feb74992cc3482b350163a1a010\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutros: []string{\n\t\t\t\t\"Need help, or have questions? Just reply to this email, we'd love to help.\",\n\t\t\t},\n\t\t},\n\t}\n\n\t_, err := h.GenerateHTML(email)\n\tassert.Nil(t, err)\n\tassert.Equal(t, h.TextDirection, TDLeftToRight)\n\tassert.Equal(t, h.Theme.Name(), \"default\")\n}\n\nfunc TestHermes_Default(t *testing.T) {\n\th := Hermes{}\n\tsetDefaultHermesValues(&h)\n\temail := Email{}\n\tsetDefaultEmailValues(&email)\n\n\tassert.Equal(t, h.TextDirection, TDLeftToRight)\n\tassert.Equal(t, h.Theme, new(Default))\n\tassert.Equal(t, h.Product.Name, \"Hermes\")\n\tassert.Equal(t, h.Product.Copyright, \"Copyright © 2020 Hermes. All rights reserved.\")\n\n\tassert.Empty(t, email.Body.Actions)\n\tassert.Empty(t, email.Body.Dictionary)\n\tassert.Empty(t, email.Body.Intros)\n\tassert.Empty(t, email.Body.Outros)\n\tassert.Empty(t, email.Body.Table.Data)\n\tassert.Empty(t, email.Body.Table.Columns.CustomWidth)\n\tassert.Empty(t, email.Body.Table.Columns.CustomAlignment)\n\tassert.Empty(t, string(email.Body.FreeMarkdown))\n\n\tassert.Equal(t, email.Body.Greeting, \"Hi\")\n\tassert.Equal(t, email.Body.Signature, \"Yours truly\")\n\tassert.Empty(t, email.Body.Title)\n}\n"
        },
        {
          "name": "screens",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}