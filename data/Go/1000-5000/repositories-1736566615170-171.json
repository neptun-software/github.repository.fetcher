{
  "metadata": {
    "timestamp": 1736566615170,
    "page": 171,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "magefile/mage",
      "stars": 4209,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0546875,
          "content": "site/* linguist-documentation\nvendor/* linguist-vendored"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4580078125,
          "content": "# Binaries for programs and plugins\n*.exe\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Project-local glide cache, RE: https://github.com/Masterminds/glide/issues/736\n.glide/\n\n# Magefile output\nmage_output_file.go\n\n# VScode\n.vscode\n\n# stupid osx\n.DS_Store\n\n# Goland\n.idea\n*.iml\n\n# Vim\n*.sw[op]\nSession.vim\n*~\n\n# GNU Screen\n.screenrc\n\n# Hugo build lock\n.hugo_build.lock\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.0322265625,
          "content": "project_name: mage\nrelease:\n  github:\n    owner: magefile\n    name: mage\n  draft: true\nbuild:\n  binary: mage\n  main: .\n  ldflags: -s -w -X github.com/magefile/mage/mage.timestamp={{.Date}} -X github.com/magefile/mage/mage.commitHash={{.Commit}} -X github.com/magefile/mage/mage.gitTag={{.Version}}\n  goos:\n    - darwin\n    - linux\n    - windows\n    - freebsd\n    - netbsd\n    - openbsd\n    - dragonfly\n  goarch:\n    - amd64\n    - arm\n    - arm64\n  ignore:\n    - goos: openbsd\n      goarch: arm\n      goarm: 6\n  env:\n    - CGO_ENABLED=0\narchives:\n- \n  name_template: \"{{.Binary}}_{{.Version}}_{{.Os}}-{{.Arch}}\"\n  replacements:\n    amd64: 64bit\n    386: 32bit\n    arm: ARM\n    arm64: ARM64\n    darwin: macOS\n    linux: Linux\n    windows: Windows\n    openbsd: OpenBSD\n    netbsd: NetBSD\n    freebsd: FreeBSD\n    dragonfly: DragonFlyBSD\n  format: tar.gz\n  format_overrides:\n    - goos: windows\n      format: zip\n  files:\n  - LICENSE\nsnapshot:\n  name_template: SNAPSHOT-{{ .Commit }}\nchecksum:\n  name_template: '{{ .ProjectName }}_{{ .Version }}_checksums.txt'\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 7.908203125,
          "content": "# Mage Community Code of Conduct\n\nThis is a copy of the [go code of conduct](https://golang.org/conduct). It applies to all areas of the magefile github organization, the #mage and #mage-dev slack channels on gopher slack, and the mage google group (https://groups.google.com/forum/#!forum/magefile).\n\nReports may be directed to Nate Finch, the Mage Project Steward at nate.finch@gmail.com, or Carmen Andoh and Van Riper, the Go Project Stewards at conduct@golang.org.\n\n## About\nOnline communities include people from many different backgrounds. The Go contributors are committed to providing a friendly, safe and welcoming environment for all, regardless of gender identity and expression, sexual orientation, disabilities, neurodiversity, physical appearance, body size, ethnicity, nationality, race, age, religion, or similar personal characteristics.\n\nThe first goal of the Code of Conduct is to specify a baseline standard of behavior so that people with different social values and communication styles can talk about Go effectively, productively, and respectfully.\n\nThe second goal is to provide a mechanism for resolving conflicts in the community when they arise.\n\nThe third goal of the Code of Conduct is to make our community welcoming to people from different backgrounds. Diversity is critical to the project; for Go to be successful, it needs contributors and users from all backgrounds. (See Go, Open Source, Community.)\n\nWe believe that healthy debate and disagreement are essential to a healthy project and community. However, it is never ok to be disrespectful. We value diverse opinions, but we value respectful behavior more.\n\n## Gopher values\nThese are the values to which people in the Go community (“Gophers”) should aspire.\n\n## Be friendly and welcoming\n* Be patient\n  * Remember that people have varying communication styles and that not everyone is using their native language. (Meaning and tone can be lost in translation.)\n* Be thoughtful\n  * Productive communication requires effort. Think about how your words will be interpreted.\n  * Remember that sometimes it is best to refrain entirely from commenting.\n* Be respectful\n  * In particular, respect differences of opinion.\n* Be charitable\n  * Interpret the arguments of others in good faith, do not seek to disagree.\n  * When we do disagree, try to understand why.\n* Avoid destructive behavior:\n  * Derailing: stay on topic; if you want to talk about something else, start a new conversation.\n  * Unconstructive criticism: don't merely decry the current state of affairs; offer—or at least solicit—suggestions as to how things may be improved.\n  * Snarking (pithy, unproductive, sniping comments)\n  * Discussing potentially offensive or sensitive issues; this all too often leads to unnecessary conflict.\n  * Microaggressions: brief and commonplace verbal, behavioral and environmental indignities that communicate hostile, derogatory or negative slights and insults to a person or group.\nPeople are complicated. You should expect to be misunderstood and to misunderstand others; when this inevitably occurs, resist the urge to be defensive or assign blame. Try not to take offense where no offense was intended. Give people the benefit of the doubt. Even if the intent was to provoke, do not rise to it. It is the responsibility of all parties to de-escalate conflict when it arises.\n\n## Code of Conduct\n### Our Pledge\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n### Our Standards\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n### Scope\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nThis Code of Conduct also applies outside the project spaces when the Project Stewards have a reasonable belief that an individual’s behavior may have a negative impact on the project or its community.\n\n### Conflict Resolution\nWe do not believe that all conflict is bad; healthy debate and disagreement often yield positive results. However, it is never okay to be disrespectful or to engage in behavior that violates the project’s code of conduct.\n\nIf you see someone violating the code of conduct, you are encouraged to address the behavior directly with those involved. Many issues can be resolved quickly and easily, and this gives people more control over the outcome of their dispute. If you are unable to resolve the matter for any reason, or if the behavior is threatening or harassing, report it. We are dedicated to providing an environment where participants feel welcome and safe.\n\nReports should be directed to Carmen Andoh and Van Riper, the Go Project Stewards, at conduct@golang.org \\[or Nate Finch at nate.finch@gmail.com\\]. It is the Project Stewards’ duty to receive and address reported violations of the code of conduct. They will then work with a committee consisting of representatives from the Open Source Programs Office and the Google Open Source Strategy team. If for any reason you are uncomfortable reaching out the Project Stewards, please email the Google Open Source Programs Office at opensource@google.com.\n\nWe will investigate every complaint, but you may not receive a direct response. We will use our discretion in determining when and how to follow up on reported incidents, which may range from not taking action to permanent expulsion from the project and project-sponsored spaces. We will notify the accused of the report and provide them an opportunity to discuss it before any action is taken. The identity of the reporter will be omitted from the details of the report supplied to the accused. In potentially harmful situations, such as ongoing harassment or threats to anyone’s safety, we may take action without notice.\n\n### Attribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n## Summary\n* Treat everyone with respect and kindness.\n* Be thoughtful in how you communicate.\n* Don’t be destructive or inflammatory.\n* If you encounter an issue, please mail conduct@golang.org.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.34375,
          "content": "# Contributing\n\nOf course, contributions are more than welcome. Please read these guidelines for\nmaking the process as painless as possible.\n\n## Discussion\n\nDevelopment discussion should take place on the #mage channel of [gopher\nslack](https://gophers.slack.com/).\n\nThere is a separate #mage-dev channel that has the github app to post github\nactivity to the channel, to make it easy to follow.\n\n## Issues\n\nIf there's an issue you'd like to work on, please comment on it, so we can\ndiscuss approach, etc. and make sure no one else is currently working on that\nissue.\n\nPlease always create an issue before sending a PR unless it's an obvious typo\nor other trivial change.\n\n## Dependency Management\n\nCurrently mage has no dependencies(!) outside the standard libary.  Let's keep\nit that way.  Since it's likely that mage will be vendored into a project,\nadding dependencies to mage adds dependencies to every project that uses mage.\n\n## Versions\n\nPlease avoid using features of go and the stdlib that prevent mage from being\nbuildable with older versions of Go.  The CI tests currently check that mage is\nbuildable with go 1.7 and later.  You may build with whatever version you like,\nbut CI has the final say.\n\n## Testing\n\nPlease write tests for any new features.  Tests must use the normal go testing\npackage.\n\nTests must pass the race detector (run `go test -race ./...`).\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.080078125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 the Mage authors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.521484375,
          "content": "[![Built with Mage](https://magefile.org/badge.svg)](https://magefile.org)\n[![Build Status](https://travis-ci.org/magefile/mage.svg?branch=master)](https://travis-ci.org/magefile/mage) [![Build status](https://ci.appveyor.com/api/projects/status/n6h146y79xgxkidl/branch/master?svg=true)](https://ci.appveyor.com/project/natefinch/mage/branch/master)\n\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/3185864/32058716-5ee9b512-ba38-11e7-978a-287eb2a62743.png\"/></p>\n\n## About\n\nMage is a make-like build tool using Go.  You write plain-old go functions,\nand Mage automatically uses them as Makefile-like runnable targets.\n\n## Installation\n\nMage has no dependencies outside the Go standard library, and builds with Go 1.7\nand above (possibly even lower versions, but they're not regularly tested).\n\n**Using GOPATH with go version < 1.17**\n\n```\ngo get -u -d github.com/magefile/mage\ncd $GOPATH/src/github.com/magefile/mage\ngo run bootstrap.go\n```\n\n**Using Go Install with go version >= 1.18**\n\n```\ngo install github.com/magefile/mage@latest\nmage -init\n```\n\nInstead of the @latest tag, you can specify the desired version, for example:\n\n```\ngo install github.com/magefile/mage@v1.15.0\n```\n\n**Using Go Modules**\n\n```\ngit clone https://github.com/magefile/mage\ncd mage\ngo run bootstrap.go\n```\n\nThis will download the code and then run the bootstrap script to build mage with\nversion infomation embedded in it.  A normal `go get` (without -d) or `go\ninstall` will build the binary correctly, but no version info will be embedded.\nIf you've done this, no worries, just go to `$GOPATH/src/github.com/magefile/mage`\nand run `mage install` or `go run bootstrap.go` and a new binary will be created\nwith the correct version information.\n\nThe mage binary will be created in your $GOPATH/bin directory.\n\nYou may also install a binary release from our\n[releases](https://github.com/magefile/mage/releases) page.\n\n## Demo\n\n[![Mage Demo](https://img.youtube.com/vi/GOqbD0lF-iA/maxresdefault.jpg)](https://www.youtube.com/watch?v=GOqbD0lF-iA)\n\n## Discussion\n\nJoin the `#mage` channel on [gophers slack](https://gophers.slack.com/messages/general/)\nor post on the [magefile google group](https://groups.google.com/forum/#!forum/magefile)\nfor discussion of usage, development, etc.\n\n# Documentation\n\nSee [magefile.org](https://magefile.org) for full documentation.\n\nSee [pkg.go.dev/github.com/magefile/mage/mage](https://pkg.go.dev/github.com/magefile/mage/mage)\nfor instructions on how to use Mage as a library.\n\n# Why?\n\nMakefiles are hard to read and hard to write.  Mostly because makefiles are\nessentially fancy bash scripts with significant white space and additional\nmake-related syntax.\n\nMage lets you have multiple magefiles, name your magefiles whatever you want,\nand they're easy to customize for multiple operating systems.  Mage has no\ndependencies (aside from go) and runs just fine on all major operating systems,\nwhereas make generally uses bash which is not well supported on Windows. Go is\nsuperior to bash for any non-trivial task involving branching, looping, anything\nthat's not just straight line execution of commands.  And if your project is\nwritten in Go, why introduce another language as idiosyncratic as bash?  Why not\nuse the language your contributors are already comfortable with?\n\n# Thanks\n\nIf you use mage and like it, or any of my other software, and you'd like to show your appreciation, you can do so on my patreon:\n\n[<img src=https://user-images.githubusercontent.com/3185864/49846051-64eddf80-fd97-11e8-9f59-d09f5652d214.png>](https://www.patreon.com/join/natefinch?)\n\n"
        },
        {
          "name": "bootstrap.go",
          "type": "blob",
          "size": 0.37109375,
          "content": "//go:build ignore\n// +build ignore\n\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/magefile/mage/mage\"\n)\n\n// This is a bootstrap builder, to build mage when you don't already *have* mage.\n// Run it like\n// go run bootstrap.go\n// and it will install mage with all the right flags created for you.\n\nfunc main() {\n\tos.Args = []string{os.Args[0], \"-v\", \"install\"}\n\tos.Exit(mage.Main())\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0400390625,
          "content": "module github.com/magefile/mage\n\ngo 1.12\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "install_test.go",
          "type": "blob",
          "size": 0.6552734375,
          "content": "//go:build CI\n// +build CI\n\npackage main\n\nimport (\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"testing\"\n)\n\nfunc TestBootstrap(t *testing.T) {\n\tdir, err := ioutil.TempDir(\"\", \"\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer os.RemoveAll(dir)\n\n\ts, err := run(\"go\", \"run\", \"bootstrap.go\")\n\tif err != nil {\n\t\tt.Fatal(s)\n\t}\n\tname := \"mage\"\n\tif runtime.GOOS == \"windows\" {\n\t\tname += \".exe\"\n\t}\n\tif _, err := os.Stat(filepath.Join(os.Getenv(\"GOPATH\"), \"bin\", name)); err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\nfunc run(cmd string, args ...string) (string, error) {\n\tc := exec.Command(cmd, args...)\n\tc.Env = os.Environ()\n\tb, err := c.CombinedOutput()\n\treturn string(b), err\n}\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "mage",
          "type": "tree",
          "content": null
        },
        {
          "name": "magefile.go",
          "type": "blob",
          "size": 3.3349609375,
          "content": "//go:build mage\n// +build mage\n\n// This is the build script for Mage. The install target is all you really need.\n// The release target is for generating official releases and is really only\n// useful to project admins.\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"runtime\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/magefile/mage/mg\"\n\t\"github.com/magefile/mage/sh\"\n)\n\nvar Aliases = map[string]interface{}{\n\t\"Speak\": Say,\n}\n\n// Say says something.\nfunc Say(msg string, i int, b bool, d time.Duration) error {\n\t_, err := fmt.Printf(\"%v(%T) %v(%T) %v(%T) %v(%T)\\n\", msg, msg, i, i, b, b, d, d)\n\treturn err\n}\n\n// Runs \"go install\" for mage.  This generates the version info the binary.\nfunc Install() error {\n\tname := \"mage\"\n\tif runtime.GOOS == \"windows\" {\n\t\tname += \".exe\"\n\t}\n\n\tgocmd := mg.GoCmd()\n\t// use GOBIN if set in the environment, otherwise fall back to first path\n\t// in GOPATH environment string\n\tbin, err := sh.Output(gocmd, \"env\", \"GOBIN\")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"can't determine GOBIN: %v\", err)\n\t}\n\tif bin == \"\" {\n\t\tgopath, err := sh.Output(gocmd, \"env\", \"GOPATH\")\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"can't determine GOPATH: %v\", err)\n\t\t}\n\t\tpaths := strings.Split(gopath, string([]rune{os.PathListSeparator}))\n\t\tbin = filepath.Join(paths[0], \"bin\")\n\t}\n\t// specifically don't mkdirall, if you have an invalid gopath in the first\n\t// place, that's not on us to fix.\n\tif err := os.Mkdir(bin, 0700); err != nil && !os.IsExist(err) {\n\t\treturn fmt.Errorf(\"failed to create %q: %v\", bin, err)\n\t}\n\tpath := filepath.Join(bin, name)\n\n\t// we use go build here because if someone built with go get, then `go\n\t// install` turns into a no-op, and `go install -a` fails on people's\n\t// machines that have go installed in a non-writeable directory (such as\n\t// normal OS installs in /usr/bin)\n\treturn sh.RunV(gocmd, \"build\", \"-o\", path, \"-ldflags=\"+flags(), \"github.com/magefile/mage\")\n}\n\nvar releaseTag = regexp.MustCompile(`^v1\\.[0-9]+\\.[0-9]+$`)\n\n// Generates a new release. Expects a version tag in v1.x.x format.\nfunc Release(tag string) (err error) {\n\tif _, err := exec.LookPath(\"goreleaser\"); err != nil {\n\t\treturn fmt.Errorf(\"can't find goreleaser: %w\", err)\n\t}\n\tif !releaseTag.MatchString(tag) {\n\t\treturn errors.New(\"TAG environment variable must be in semver v1.x.x format, but was \" + tag)\n\t}\n\n\tif err := sh.RunV(\"git\", \"tag\", \"-a\", tag, \"-m\", tag); err != nil {\n\t\treturn err\n\t}\n\tif err := sh.RunV(\"git\", \"push\", \"origin\", tag); err != nil {\n\t\treturn err\n\t}\n\tdefer func() {\n\t\tif err != nil {\n\t\t\tsh.RunV(\"git\", \"tag\", \"--delete\", tag)\n\t\t\tsh.RunV(\"git\", \"push\", \"--delete\", \"origin\", tag)\n\t\t}\n\t}()\n\treturn sh.RunV(\"goreleaser\")\n}\n\n// Remove the temporarily generated files from Release.\nfunc Clean() error {\n\treturn sh.Rm(\"dist\")\n}\n\nfunc flags() string {\n\ttimestamp := time.Now().Format(time.RFC3339)\n\thash := hash()\n\ttag := tag()\n\tif tag == \"\" {\n\t\ttag = \"dev\"\n\t}\n\treturn fmt.Sprintf(`-X \"github.com/magefile/mage/mage.timestamp=%s\" -X \"github.com/magefile/mage/mage.commitHash=%s\" -X \"github.com/magefile/mage/mage.gitTag=%s\"`, timestamp, hash, tag)\n}\n\n// tag returns the git tag for the current branch or \"\" if none.\nfunc tag() string {\n\ts, _ := sh.Output(\"git\", \"describe\", \"--tags\")\n\treturn s\n}\n\n// hash returns the git hash for the current repo or \"\" if none.\nfunc hash() string {\n\thash, _ := sh.Output(\"git\", \"rev-parse\", \"--short\", \"HEAD\")\n\treturn hash\n}\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.1015625,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\t\"github.com/magefile/mage/mage\"\n)\n\nfunc main() {\n\tos.Exit(mage.Main())\n}\n"
        },
        {
          "name": "mg",
          "type": "tree",
          "content": null
        },
        {
          "name": "parse",
          "type": "tree",
          "content": null
        },
        {
          "name": "sh",
          "type": "tree",
          "content": null
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "target",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}