{
  "metadata": {
    "timestamp": 1736566835520,
    "page": 403,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fortio/fortio",
      "stars": 3400,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.345703125,
          "content": "# linter config now comes from shared workflows\n.golangci.yml\ncoverage.out*\ntmp/\ncoverage.txt\n*.bak\n*.json\ntest.profile.*\n# binary, in case of go build .\nfortio\n.DS_Store\n# Avoid accidental changes to vendor or Gopkg.*:\nvendor\nGopkg.*\n.idea\n# certs for testing\ncert-tmp/\n# brew binary bottles create a .brew_home/ dir in source tree\n.brew_home/\n.vscode/\n"
        },
        {
          "name": ".testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.3876953125,
          "content": "# Contributing to Fortio\n\nContributions whether through issues, documentation, bug fixes, or new features\nare most welcome !\n\nPlease also see [Contributing to Istio](https://github.com/istio/community/blob/master/CONTRIBUTING.md#contributing-to-istio)\nand [Getting started contributing to Fortio](https://github.com/fortio/fortio/wiki/FAQ#how-do-i-get-started-contributing-to-fortio) in the FAQ.\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.0185546875,
          "content": "# Build the binaries in larger image\nFROM docker.io/fortio/fortio.build:v77@sha256:03af2e7202d5364fb3424c9ef28f372702081ee809b7f8dfbb2a1b649b0b4c2c as build\nWORKDIR /build\nCOPY --chown=build:build . fortio\nARG MODE=install\n# We moved a lot of the logic into the Makefile so it can be reused in brew\n# but that also couples the 2, this expects to find binaries in the right place etc\nRUN make -C fortio official-build-version BUILD_DIR=/build MODE=${MODE}\n\n# Minimal image with just the binary and certs\nFROM scratch as release\n# We don't need to copy certs anymore since cli 1.6.0\n# COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=build /build/result/fortio /usr/bin/fortio\nEXPOSE 8078\nEXPOSE 8079\nEXPOSE 8080\nEXPOSE 8081\n# configmap (dynamic flags)\nVOLUME /etc/fortio\n# data files etc\nVOLUME /var/lib/fortio\nWORKDIR /var/lib/fortio\nENTRYPOINT [\"/usr/bin/fortio\"]\n# start the server mode (grpc ping on 8079, http echo and UI on 8080, redirector on 8081) by default\nCMD [\"server\", \"-config-dir\", \"/etc/fortio\"]\n"
        },
        {
          "name": "Dockerfile.build",
          "type": "blob",
          "size": 1.4033203125,
          "content": "# Dependencies and linters for build:\nFROM golang:1.23.3@sha256:8956c08c8129598db36e92680d6afda0079b6b32b93c2c08260bf6fa75524e07\n# Need gcc for -race test (and some linters though those work with CGO_ENABLED=0)\nRUN apt-get -y update && \\\n  apt-get --no-install-recommends -y upgrade && \\\n  DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install libc6-dev apt-transport-https ssh \\\n  ruby-dev build-essential rpm gnupg zip netcat-traditional\n\n# Install FPM\nRUN gem install --no-document fpm\nRUN go version # check it's indeed the version we expect\n\n# golangci-lint\nRUN curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin\nRUN golangci-lint version\n\n# Docker:\nRUN set -x; if [ x\"$(dpkg --print-architecture)\" != x\"s390x\" ]; then \\\n  curl -fsSL \"https://download.docker.com/linux/debian/gpg\" | apt-key add; \\\n  echo \"deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/debian bullseye stable\" > /etc/apt/sources.list.d/docker.list && \\\n  apt-get -y update && apt-get install --no-install-recommends -y docker-ce docker-buildx-plugin; \\\n  fi\n\n# govulncheck\nRUN go install golang.org/x/vuln/cmd/govulncheck@latest\nWORKDIR /build\nADD https://raw.githubusercontent.com/fortio/workflows/main/golangci.yml .golangci.yml\nVOLUME /build\nRUN useradd -m build -d /build\nRUN chown -R build:build /build\nRUN chown -R build:build /go\nUSER build\n"
        },
        {
          "name": "Dockerfile.echosrv",
          "type": "blob",
          "size": 0.427734375,
          "content": "# Build the binaries in larger image\nFROM docker.io/fortio/fortio.build:v77@sha256:03af2e7202d5364fb3424c9ef28f372702081ee809b7f8dfbb2a1b649b0b4c2c as build\nWORKDIR /build\nCOPY . fortio\nRUN make -C fortio official-build-version BUILD_DIR=/build OFFICIAL_TARGET=fortio.org/fortio/echosrv\n# Minimal image with just the binary\nFROM scratch\nCOPY --from=build /build/result/echosrv /usr/bin/echosrv\nEXPOSE 8080\nENTRYPOINT [\"/usr/bin/echosrv\"]\n"
        },
        {
          "name": "Dockerfile.fcurl",
          "type": "blob",
          "size": 0.4853515625,
          "content": "# Build the binaries in larger image\nFROM docker.io/fortio/fortio.build:v77@sha256:03af2e7202d5364fb3424c9ef28f372702081ee809b7f8dfbb2a1b649b0b4c2c as build\nWORKDIR /build\nCOPY . fortio\nRUN make -C fortio official-build-version BUILD_DIR=/build OFFICIAL_TARGET=fortio.org/fortio/fcurl\n# Minimal image with just the binary and certs\nFROM scratch\nCOPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=build /build/result/fcurl /usr/bin/fcurl\nENTRYPOINT [\"/usr/bin/fcurl\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1533203125,
          "content": "\n                                Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2016 Fortio Authors\n   Copyright 2018 Fortio Authors\n   Copyright 2015 Michal Witkowski (dflag/)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 9.7724609375,
          "content": "# Makefile to build fortio's docker images as well as short cut\n# for local test/install\n#\n# See also release/README.md\n#\n\nIMAGES=echosrv fcurl # plus the combo image / Dockerfile without ext.\n\nDOCKER_PREFIX := docker.io/fortio/fortio\nBUILD_IMAGE_TAG := v77@sha256:03af2e7202d5364fb3424c9ef28f372702081ee809b7f8dfbb2a1b649b0b4c2c\nBUILDX_PLATFORMS := linux/amd64,linux/arm64,linux/ppc64le,linux/s390x\nBUILDX_POSTFIX :=\nifeq '$(shell echo $(BUILDX_PLATFORMS) | awk -F \",\" \"{print NF-1}\")' '0'\n\tBUILDX_POSTFIX = --load\nendif\nBUILD_IMAGE := $(DOCKER_PREFIX).build:$(BUILD_IMAGE_TAG)\n\nTAG:=$(USER)$(shell date +%y%m%d_%H%M%S)\n\nDOCKER_TAG = $(DOCKER_PREFIX)$(IMAGE):$(TAG)\n\nCERT_TEMP_DIR := ./cert-tmp/\n\n# go test ./... and others run in vendor/ and cause problems (!)\n# so to avoid `can't load package: package fortio.org/fortio/...: no Go files in ...`\n# note that only go1.8 needs the grep -v vendor but we are compatible with 1.8\n# ps: can't use go list (and get packages as canonical fortio.org/fortio/x)\n# as somehow that makes gometaliner silently not find/report errors...\nPACKAGES ?= $(shell go list ./...)\n# from fortio 1.4 we use go 1.14 (from go 1.8 up to fortio 1.3) and switched to go modules (from vendor)\n\n# Local targets:\ngo-install:\n\tgo install $(PACKAGES)\n\n# Run/test dependencies\ndependencies: certs\n\n# Only generate certs if needed\ncerts: $(CERT_TEMP_DIR)/server.cert\n\n# Generate certs for unit and release tests.\n$(CERT_TEMP_DIR)/server.cert: cert-gen\n\t@echo \"OS='$(OS)'\"\n\t./cert-gen\n\n# Remove certificates\ncerts-clean:\n\trm -rf $(CERT_TEMP_DIR)\n\nTEST_TIMEOUT:=90s\n\nOS:=$(shell go env GOOS)\n\n# Local test\nifeq ($(OS),windows)\ntest:\n\t@echo \"Skipping most tests on Windows until we can get cert-gen to work there.\"\n\tgo test ./stats\nelse\ntest: dependencies\n\tgo test -tags netgo -timeout $(TEST_TIMEOUT) -race $(PACKAGES)\nendif\n\n# To debug strange linter errors, uncomment\n# DEBUG_LINTERS=\"--debug\"\n\n.golangci.yml: Makefile\n\tcurl -fsS -o .golangci.yml https://raw.githubusercontent.com/fortio/workflows/main/golangci.yml\n\nlocal-lint: .golangci.yml\n\tgovulncheck $(LINT_PACKAGES)\n\tgolangci-lint version\n\tgolangci-lint --timeout 120s $(DEBUG_LINTERS) run $(LINT_PACKAGES)\n\n# Lint everything by default but ok to \"make lint LINT_PACKAGES=./fhttp\"\nLINT_PACKAGES:=./...\nlint: .golangci.yml\n\tdocker run -v $(CURDIR):/build/fortio $(BUILD_IMAGE) bash -c \\\n\t\t\"cd /build/fortio; chown build:build . \\\n\t\t&& time make local-lint DEBUG_LINTERS=\\\"$(DEBUG_LINTERS)\\\" LINT_PACKAGES=\\\"$(LINT_PACKAGES)\\\"\"\n\ndocker-test:\n\tdocker run -v $(CURDIR):/build/fortio $(BUILD_IMAGE) bash -c \\\n\t\t\"cd /build/fortio \\\n\t\t&& time make test\"\n\nshell:\n\tdocker run -ti -v $(CURDIR):/build/fortio $(BUILD_IMAGE)\n\n# This really also tests the release process and build on windows,mac,linux\n# and the Docker images, not just \"web\" (UI) stuff that it also exercises.\nrelease-test: docker-version\n\t./Webtest.sh\n\n# old name for release-test\nwebtest: release-test\n\ncoverage: dependencies\n\tgo test -race -coverprofile=coverage.out -covermode=atomic ./...\n\n# Short cut for pulling/updating to latest of the current branch\npull:\n\tgit pull\n\n\n# Docker: Pushes the combo image and the smaller image(s)\nall: test go-install lint docker-version docker-push-internal\n\t@for img in $(IMAGES); do \\\n\t\t$(MAKE) docker-push-internal IMAGE=.$$img TAG=$(TAG); \\\n\tdone\n\n# When changing the build image, this Makefile should be edited first\n# (bump BUILD_IMAGE_TAG), also change this list if the image is used in\n# more places.\nFILES_WITH_IMAGE:= .circleci/config.yml Dockerfile Dockerfile.echosrv \\\n\tDockerfile.fcurl release/Dockerfile.in Webtest.sh\n# then run make update-build-image and check the diff, etc... see release/README.md\nupdate-build-image:\n\tdocker buildx create --use\n\t$(MAKE) docker-push-internal IMAGE=.build TAG=$(BUILD_IMAGE_TAG)\n\n# Get the sha (use after newly building a new build image) to put it back in BUILD_IMAGE_TAG\nbuild-image-sha:\n\tdocker pull $(BUILD_IMAGE)\n\tdocker inspect $(BUILD_IMAGE) | jq -r '.[0].RepoDigests[0]' | sed -e \"s/^.*@/$(BUILD_IMAGE_TAG)@/\"\n\nSED:=sed\nupdate-build-image-tag:\n\t@echo 'Need to use gnu sed (brew install gnu-sed; make update-build-image-tag SED=gsed)'\n\t$(SED) --in-place=.bak -E -e 's!$(DOCKER_PREFIX).build:v[^ ]+!$(BUILD_IMAGE)!g' $(FILES_WITH_IMAGE)\n\ndocker-default-platform:\n\t@docker buildx --builder default inspect | awk '/Platforms:/ {print $$2}' | sed -e 's/,//g'\n\ndocker-version:\n\t@echo \"### Docker is `which docker`\"\n\t@docker version\n\ndocker-internal: dependencies\n\t@echo \"### Now building $(DOCKER_TAG)\"\n\tdocker buildx build --platform $(BUILDX_PLATFORMS) --build-arg MODE=$(MODE) -f Dockerfile$(IMAGE) -t $(DOCKER_TAG) $(BUILDX_POSTFIX) .\n\ndocker-push-internal: docker-internal docker-buildx-push\n\ndocker-buildx-push:\n\t@echo \"### Now pushing $(DOCKER_TAG)\"\n\tdocker buildx build --push --platform $(BUILDX_PLATFORMS) -f Dockerfile$(IMAGE) -t $(DOCKER_TAG) .\n\nrelease: dist\n\trelease/release.sh\n\n.PHONY: all docker-internal docker-push-internal docker-version test dependencies\n\n.PHONY: go-install lint install-linters coverage webtest release-test update-build-image build-image-sha\n\n.PHONY: local-lint update-build-image-tag release pull certs certs-clean\n\n# Targets used for official builds (initially from Dockerfile)\nBUILD_DIR := /tmp/fortio_build\nBUILD_DIR_ABS := $(abspath $(BUILD_DIR))\nBUILD_DIR_BIN := $(BUILD_DIR_ABS)/bin\nOFFICIAL_EXE ?= $(notdir $(OFFICIAL_TARGET))\nOFFICIAL_BIN ?= $(BUILD_DIR)/result/$(OFFICIAL_EXE)\nOFFICIAL_DIR ?= $(dir $(OFFICIAL_BIN))\n\nGOOS :=\nGO_BIN := go\nGIT_TAG ?= $(shell git describe --tags --match 'v*' --dirty)\nDIST_VERSION ?= $(shell echo $(GIT_TAG) | sed -e \"s/^v//\")\nGIT_SHA ?= $(shell git rev-parse HEAD)\n# Main/default binary to build: (can be changed to build fcurl or echosrv instead)\nOFFICIAL_TARGET := fortio.org/fortio\nMODE ?= install\n\ndebug-tags:\n\t@echo \"GIT_TAG=$(GIT_TAG)\"\n\t@echo \"DIST_VERSION=$(DIST_VERSION)\"\n\necho-version:\n\t@echo \"$(DIST_VERSION)\"\n\n# FPM (for rpm...) converts - to _\necho-package-version:\n\t@echo \"$(DIST_VERSION)\" | sed -e \"s/-/_/g\"\n\n$(BUILD_DIR):\n\tmkdir -p $(BUILD_DIR)\n\n$(OFFICIAL_DIR):\n\tmkdir -p $(OFFICIAL_DIR)\n\n.PHONY: official-build official-build-internal official-build-version official-build-clean\n\nofficial-build: official-build-internal\n\nofficial-build-internal: $(BUILD_DIR) $(OFFICIAL_DIR)\n\t@echo \"Building OFFICIAL_EXE=$(OFFICIAL_EXE) BUILD_DIR=$(BUILD_DIR) BUILD_DIR_BIN=$(BUILD_DIR_BIN) MODE=$(MODE)\"\n\t@echo \"OFFICIAL_BIN=$(OFFICIAL_BIN) OFFICIAL_DIR=$(OFFICIAL_DIR) OFFICIAL_TARGET=$(OFFICIAL_TARGET)\"\n\t$(GO_BIN) version\nifeq ($(MODE),install)\n\tGOPATH=$(BUILD_DIR_ABS) CGO_ENABLED=0 GOOS=$(GOOS) $(GO_BIN) install -a -ldflags -s $(OFFICIAL_TARGET)@v$(DIST_VERSION)\n\t# rename when building cross architecture (on windows it has .exe suffix thus the *)\n\tls -lR $(BUILD_DIR_BIN)\n\t-mv -f $(BUILD_DIR_BIN)/*_*/$(OFFICIAL_EXE)* $(BUILD_DIR_BIN)\n\t-rmdir $(BUILD_DIR_BIN)/*_*\n\tmv -f $(BUILD_DIR_BIN)/$(OFFICIAL_EXE)* $(OFFICIAL_DIR)\nelse\n\tCGO_ENABLED=0 GOOS=$(GOOS) $(GO_BIN) build -a -ldflags -s -o $(OFFICIAL_BIN) $(OFFICIAL_TARGET)\nendif\n\nofficial-build-version: official-build\n\t$(OFFICIAL_BIN) version\n\nofficial-build-clean:\n\t-$(RM) $(OFFICIAL_BIN) release/Makefile\n\n# Create a complete source tree with naming matching Debian package conventions\nTAR ?= tar # on macOS need gtar to get --owner\nDIST_PATH:=release/fortio_$(DIST_VERSION).orig.tar\n\n.PHONY: dist dist-sign distclean\n\nrelease/Makefile: release/Makefile.dist\n\techo \"GIT_TAG := $(GIT_TAG)\" > $@\n\techo \"GIT_SHA := $(GIT_SHA)\" >> $@\n\tcat $< >> $@\n\ndist: release/Makefile\n\t# put the source files where they can be used as gopath by go,\n\t# except leave the debian dir where it needs to be (below the version dir)\n\tgit ls-files \\\n\t\t| awk '{printf(\"fortio/%s\\n\", $$0)}' \\\n\t\t| (cd ../ ; $(TAR) \\\n\t\t--xform=\"s|^fortio/|fortio-$(DIST_VERSION)/src/fortio.org/fortio/|;s|^.*debian/|fortio-$(DIST_VERSION)/debian/|\" \\\n\t\t--owner=0 --group=0 -c -f - -T -) > $(DIST_PATH)\n\t# move the release/Makefile at the top (after the version dir)\n\t$(TAR) --xform=\"s|^release/|fortio-$(DIST_VERSION)/|\" \\\n\t\t--owner=0 --group=0 -r -f $(DIST_PATH) release/Makefile\n\tgzip -f $(DIST_PATH)\n\t@echo \"Created $(CURDIR)/$(DIST_PATH).gz\"\n\ndist-sign:\n\tgpg --armor --detach-sign $(DIST_PATH)\n\ndistclean: official-build-clean\n\t-rm -f *.profile.* */*.profile.*\n\t-rm -rf $(CERT_TEMP_DIR)\n\n# Install target more compatible with standard gnu/debian practices. Uses DESTDIR as staging prefix\n\ninstall: official-install\n\n.PHONY: install official-install\n\nBIN_INSTALL_DIR = $(DESTDIR)/usr/bin\nMAN_INSTALL_DIR = $(DESTDIR)/usr/share/man/man1\nBIN_INSTALL_EXEC = fortio\n\nofficial-install: official-build-clean official-build-version\n\t-mkdir -p $(BIN_INSTALL_DIR) $(MAN_INSTALL_DIR)\n\tcp $(OFFICIAL_BIN) $(BIN_INSTALL_DIR)/$(BIN_INSTALL_EXEC)\n\tcp docs/fortio.1 $(MAN_INSTALL_DIR)\n\n# Test distribution (only used by maintainer)\n\n.PHONY: debian-dist-common debian-dist-test debian-dist debian-sbuild\n\n# warning, will be cleaned\nTMP_DIST_DIR:=~/tmp/fortio-dist\n\n# debian getting version from debian/changelog while we get it from git tags\n# doesn't help making this simple: (TODO: unify or autoupdate the 3 versions)\n\ndebian-dist-common:\n\t$(MAKE) dist TAR=tar\n\t-mkdir -p $(TMP_DIST_DIR)\n\trm -rf $(TMP_DIST_DIR)/fortio*\n\tcp $(CURDIR)/$(DIST_PATH).gz $(TMP_DIST_DIR)\n\tcd $(TMP_DIST_DIR); tar xfz *.tar.gz\n\t-cd $(TMP_DIST_DIR);\\\n\t\tln -s *.tar.gz fortio_`cd fortio-$(DIST_VERSION); dpkg-parsechangelog -S Version | sed -e \"s/-.*//\"`.orig.tar.gz\n\ndebian-dist-test: debian-dist-common\n\tcd $(TMP_DIST_DIR)/fortio-$(DIST_VERSION); FORTIO_SKIP_TESTS=Y dpkg-buildpackage -us -uc\n\tcd $(TMP_DIST_DIR)/fortio-$(DIST_VERSION); lintian\n\ndebian-dist: distclean debian-dist-common\n\tcd $(TMP_DIST_DIR)/fortio-$(DIST_VERSION); FORTIO_SKIP_TESTS=N dpkg-buildpackage -ap\n\tcd $(TMP_DIST_DIR)/fortio-$(DIST_VERSION); lintian\n\n# assumes you ran one of the previous 2 target first\ndebian-sbuild:\n\tcd $(TMP_DIST_DIR)/fortio-$(DIST_VERSION); sbuild\n\ninfo:\n\t@echo \"GIT_SHA=$(GIT_SHA)\"\n\t@echo \"GIT_TAG=$(GIT_TAG)\"\n\tpwd\n\tls -la\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 52.6552734375,
          "content": "<!-- 1.67.1 -->\n# Fortio\n\n[![Awesome Go](https://fortio.org/mentioned-badge.svg)](https://github.com/avelino/awesome-go#networking)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/6054/badge)](https://bestpractices.coreinfrastructure.org/projects/6054)\n[![Go Report Card](https://goreportcard.com/badge/fortio.org/fortio)](https://goreportcard.com/report/fortio.org/fortio)\n[![GoDoc](https://godoc.org/fortio.org/fortio?status.svg)](https://godoc.org/fortio.org/fortio)\n[![codecov](https://codecov.io/gh/fortio/fortio/branch/master/graph/badge.svg)](https://codecov.io/gh/fortio/fortio)\n[![CircleCI](https://circleci.com/gh/fortio/fortio.svg?style=shield)](https://circleci.com/gh/fortio/fortio)\n[![Docker Pulls](https://img.shields.io/docker/pulls/fortio/fortio.svg)](https://hub.docker.com/r/fortio/fortio)\n<img src=\"./ui/static/img/fortio-logo-gradient-no-bg.svg\" height=109 width=167 align=right />\n\nFortio (Φορτίο) started as, and is, [Istio](https://istio.io/)'s load testing tool and later (2018) graduated to be its own project.\n\nFortio is also used by, among others, [Meshery](https://docs.meshery.io/extensibility/load-generators).\n\nFortio runs at a specified query per second (qps) and records a histogram of execution time\nand calculates percentiles (e.g., p99 i.e., the response time such as 99% of the requests take less than that number (in seconds, SI unit)).\nIt can run for a set duration, for a fixed number of calls, or until interrupted (at a constant target QPS, or max speed/load per connection/thread).\n\nThe name fortio comes from Greek [φορτίο](https://fortio.org/fortio.mp3) which means load/burden.\n\nFortio is a fast, small (4Mb Docker image, minimal dependencies), reusable, embeddable go library as well as a command line tool and server process,\nthe server includes a simple web UI and REST API to trigger run and see graphical representation of the results (both a single latency graph and a multiple results comparative min, max, avg, qps and percentiles graphs).\n\nFortio also includes a set of server side features (similar to httpbin) to help debugging and testing: request echo back including headers, adding latency or error codes with a probability distribution, TCP echoing, TCP proxying, HTTP fan out/scatter and gather proxy server, gRPC echo/health in addition to HTTP, etc...\n\nFortio is quite mature and very stable with no known major bugs (lots of possible improvements if you want to contribute though!),\nand when bugs are found they are fixed quickly, so after 1 year of development and 42 incremental releases, we reached 1.0 in June 2018.\n\nFortio components can be used a library even for unrelated projects, for instance the `stats`, or `fhttp` utilities both client and server.\nA recent addition is the new `jrpc` JSON Remote Procedure Calls library package ([docs](https://pkg.go.dev/fortio.org/fortio/jrpc)).\n\nWe also have moved some of the library to their own toplevel package, like:\n- Dynamic flags: [fortio.org/dflag](https://github.com/fortio/dflag#fortio-dynamic-flags)\n- Logger: [fortio.org/log](https://github.com/fortio/log#log) - now using structured JSON logs for servers (vs text for CLIs) since fortio 1.55 / log 1.4. In color since fortio 1.57 / log 1.6.\n- Version helper: [fortio.org/version](https://github.com/fortio/version#version)\n- CLI helpers integrating the above to reduce toil making new tools [fortio.org/cli](https://github.com/fortio/cli#cli) and servers [fortio.org/scli](https://github.com/fortio/scli#scli) for arguments, flags, usage, dynamic config, etc...\n\nIf you want to connect to fortio using HTTPS and fortio to provide real TLS certificates, or to multiplex gRPC and regular HTTP behind a single port, check out [Fortio Proxy](https://github.com/fortio/proxy#fortio-proxy).\n\nIf you want fortio to generate detailed Open Telemetry traces use [Fortiotel](https://github.com/fortio/fortiotel#fortiotel).\n\n## Installation\n\nWe publish a multi architecture Docker image (linux/amd64, linux/arm64, linux/ppc64le, linux/s390x) `fortio/fortio`.\n\nFor instance:\n```shell\ndocker run -p 8080:8080 -p 8079:8079 fortio/fortio server & # For the server\ndocker run fortio/fortio load -logger-force-color http://www.google.com/ # For a test run, forcing color instead of JSON log output\n```\n\nYou can install from source:\n\n1. [Install go](https://golang.org/doc/install) (golang 1.18 or later)\n2. `go install fortio.org/fortio@latest`\n3. you can now run `fortio` (from your gopath bin/ directory, usually `~/go/bin`)\n\nThe [releases](https://github.com/fortio/fortio/releases) page has binaries for many OS/architecture combinations (see assets):\n\n```shell\ncurl -L https://github.com/fortio/fortio/releases/download/v1.67.1/fortio-linux_amd64-1.67.1.tgz \\\n | sudo tar -C / -xvzpf -\n# or the debian package\nwget https://github.com/fortio/fortio/releases/download/v1.67.1/fortio_1.67.1_amd64.deb\ndpkg -i fortio_1.67.1_amd64.deb\n# or the rpm\nrpm -i https://github.com/fortio/fortio/releases/download/v1.67.1/fortio-1.67.1-1.x86_64.rpm\n# and more, see assets in release page\n```\n\nOn macOS you can also install Fortio using [Homebrew](https://brew.sh/):\n\n```shell\nbrew install fortio\n```\n\nOn Windows, download https://github.com/fortio/fortio/releases/download/v1.67.1/fortio_win_1.67.1.zip and extract `fortio.exe` to any location, then using the Windows Command Prompt:\n```\nfortio.exe server\n```\n(at the prompt, allow the Windows firewall to let connections in)\n\nOnce `fortio server` is running, you can visit its web UI at [http://localhost:8080/fortio/](http://localhost:8080/fortio/)\n\nYou can get a preview of the reporting/graphing UI at [https://demo.fortio.org](https://demo.fortio.org)\n<!--\nand on [istio.io/docs/performance-and-scalability/synthetic-benchmarks/](https://istio.io/docs/performance-and-scalability/synthetic-benchmarks/)\n-->\n\n## Command line arguments\n\nFortio can be a HTTP or gRPC load generator, gathering statistics using the `load` subcommand,\nor start simple HTTP and gRPC ping servers, as well as a basic web UI, result graphing, TCP/UDP echo, proxies, https redirector,\nwith the `server` command or issue gRPC ping messages using the `grpcping` command.\nIt can also fetch a single URL's for debugging when using the `curl` command (or the `-curl` flag to the load command).\nLikewise you can establish a single TCP (or Unix domain or UDP (use `udp://` prefix)) connection using the `nc` command (like the standalone netcat package).\nYou can run just the redirector with `redirect` or just the TCP echo with `tcp-echo`.\nIf you saved JSON results (using the web UI or directly from the command line), you can browse and graph those results using the `report` command.\nThe `version` command will print the short print version. `fortio buildinfo` will print the full\nbuild information.\nLastly, you can learn which flags are available using `help` command.\n\nMost important flags for HTTP load generation:\n\n| Flag         | Description, example |\n| -------------|----------------------|\n| `-qps rate` | Total Queries Per Seconds across all connections/threads or 0 for no wait/max qps |\n| `-nocatchup` | Do not try to reach the target qps by going faster when the service falls behind and then recovers. Makes QPS an absolute ceiling even if the service has some spikes in latency, fortio will not compensate (but also won't stress the target more than the set qps). Recommended to use jointly with `-uniform`. |\n| `-c connections` | Number of parallel simultaneous connections (and matching go routine) |\n| `-t duration` | How long to run the test (for instance `-t 30m` for 30 minutes) or 0 to run until ^C, example (default 5s) |\n| `-n numcalls` | Run for exactly this number of calls instead of duration. Default (0) is to use duration (-t). |\n| `-payload str` or `-payload-file fname` | Switch to using POST with the given payload (see also `-payload-size` for random payload)|\n| `-uniform` | Spread the calls in time across threads for a more uniform call distribution. Works even better in conjunction with `-nocatchup`. |\n| `-r resolution` | Resolution of the histogram lowest buckets in seconds (default 0.001 i.e, 1ms), use 1/10th of your expected typical latency |\n| `-H \"header: value\"` | Can be specified multiple times to add headers (including Host:) |\n| `-a`     |  Automatically save JSON result with filename based on labels and timestamp |\n| `-json filename` | Filename or `-` for stdout to output JSON result (relative to `-data-dir` by default, should end with .json if you want `fortio report` to show them; using `-a` is typically a better option)|\n| `-labels \"l1 l2 ...\"` |  Additional config data/labels to add to the resulting JSON, defaults to target URL and hostname|\n| `-h2` |  Client calls will attempt to negotiate HTTP/2 instead of HTTP/1.1, implies `-stdclient`|\n| `-X method` | Change HTTP method to the one specified instead of automatic HTTP GET or POST based on `-payload-*` or `-content-type`|\n| `-logger-force-color` | For interactive runs for color instead of JSON output|\n| `-logger-no-color` | Force JSON output even when run from terminal|\n\nChanging the HTTP options like the TLS options `-cert`, `-key`, `-cacert` when launching an echo/UI/rapi server will make these options the default for runs initiated from that server (or fetches/proxies etc.).\n\nFull list of command line flags (`fortio help`):\n<details>\n<!-- use release/updateFlags.sh to update this section -->\n<pre>\n<!-- USAGE_START -->\nΦορτίο 1.67.1 usage:\n        fortio command [flags] target\nwhere command is one of: load (load testing), server (starts ui, rest api,\n http-echo, redirect, proxies, tcp-echo, udp-echo and grpc ping servers),\n tcp-echo (only the tcp-echo server), udp-echo (only udp-echo server),\n report (report only UI server), redirect (only the redirect server),\n proxies (only the -M and -P configured proxies), grpcping (gRPC client),\n or curl (single URL debug), or nc (single tcp or udp:// connection),\n or version (prints the full version and build details).\nwhere target is a URL (http load tests) or host:port (grpc health test),\n or tcp://host:port (tcp load test), or udp://host:port (udp load test).\nor 1 of the special arguments\n        fortio {help|envhelp|version|buildinfo}\nflags:\n  -H key:value\n        Additional HTTP header(s) or gRPC metadata. Multiple key:value pairs can be\npassed using multiple -H.\n  -L    Follow redirects (implies -std-client) - do not use for load test\n  -M value\n        HTTP multi proxy to run, e.g -M \"localport1 baseDestURL1 baseDestURL2\" -M ...\n  -P value\n        TCP proxies to run, e.g -P \"localport1 dest_host1:dest_port1\" -P \"[::1]:0\nwww.google.com:443\" ...\n  -X string\n        HTTP method to use instead of GET/POST depending on payload/content-type\n  -a    Automatically save JSON result with filename based on labels & timestamp\n  -abort-on int\n        HTTP status code that if encountered aborts the run. e.g., 503 or -1 for socket\nerrors.\n  -access-log-file path\n        file path to log all requests to. Maybe have performance impacts\n  -access-log-format format\n        format for access log. Supported values: [json, influx] (default \"json\")\n  -allow-initial-errors\n        Allow and don't abort on initial warmup errors\n  -base-url URL\n        base URL used as prefix for data/index.tsv generation. (when empty, the URL from\nthe first request is used)\n  -c int\n        Number of connections/goroutine/threads (default 4)\n  -cacert Path\n        Path to a custom CA certificate file to be used for the TLS client connections,\nif empty, use https:// prefix for standard internet/system CAs\n  -calc-qps\n        Calculate the qps based on number of requests (-n) and duration (-t)\n  -cert Path\n        Path to the certificate file to be used for client or server TLS\n  -compression\n        Enable HTTP compression\n  -config-dir directory\n        Config directory to watch for dynamic flag changes\n  -config-port port\n        Config port to open for dynamic flag UI/api\n  -connection-reuse min:max\n        Range min:max for the max number of connections to reuse for each thread, default\nto unlimited. e.g. 10:30 means randomly choose a max connection reuse threshold between\n10 and 30 requests.\n  -content-type string\n        Sets HTTP content type. Setting this value switches the request method from GET\nto POST.\n  -curl\n        Just fetch the content once\n  -curl-stdout-headers\n        Restore pre 1.22 behavior where HTTP headers of the fast client are output to\nstdout in curl mode. now stderr by default.\n  -data-dir Directory\n        Directory where JSON results are stored/read (default \".\")\n  -dns-method method\n        When a name resolves to multiple ip, which method to pick: cached-rr for cached\nround-robin, rnd for random, first for first answer (pre 1.30 behavior), rr for\nround-robin. (default cached-rr)\n  -echo-debug-path URI\n        http echo server URI for debug, empty turns off that part (more secure) (default\n\"/debug\")\n  -echo-server-default-params value\n        Default parameters/querystring to use if there isn't one provided explicitly. E.g\n\"status=404&delay=3s\"\n  -gomaxprocs int\n        Setting for runtime.GOMAXPROCS, &lt; 1 doesn't change the default\n  -grpc\n        Use gRPC (health check by default, add -ping for ping) for load testing\n  -grpc-compression\n        Enable gRPC compression\n  -grpc-max-streams uint\n        MaxConcurrentStreams for the gRPC server. Default (0) is to leave the option\nunset.\n  -grpc-ping-delay duration\n        gRPC ping delay in response\n  -grpc-port port\n        grpc server port. Can be in the form of host:port, ip:port or port or\n/unix/domain/path or \"disabled\" to not start the gRPC server. (default \"8079\")\n  -h2\n        Attempt to use HTTP/2.0 / h2 (instead of HTTP/1.1) for both TLS and h2c\n  -halfclose\n        When not keepalive, whether to half close the connection (only for fast http)\n  -health\n        gRPC ping client mode: use health instead of ping\n  -healthservice string\n        which service string to pass to health check\n  -http-port port\n        http-echo server port. Can be in the form of host:port, ip:port, port or\n/unix/domain/path or \"disabled\". (default \"8080\")\n  -http1.0\n        Use HTTP/1.0 (instead of HTTP/1.1)\n  -httpbufferkb kbytes\n        Size of the buffer (max data size) for the optimized HTTP client in kbytes\n(default 128)\n  -httpccch\n        Check for Connection: Close Header\n  -https-insecure\n        Long form of the -k flag\n  -jitter\n        set to true to de-synchronize parallel clients' by 10%\n  -json path\n        JSON output to provided file path or '-' for stdout (empty = no json output,\nunless -a is used)\n  -k    Do not verify certs in HTTPS/TLS/gRPC connections\n  -keepalive\n        Keep connection alive (only for fast HTTP/1.1) (default true)\n  -key Path\n        Path to the key file matching the -cert\n  -labels string\n        Additional config data/labels to add to the resulting JSON, defaults to target\nURL and hostname\n  -log-errors\n        Log HTTP non-2xx/418 status codes as they occur (default true)\n  -logger-file-line\n        Filename and line numbers emitted in JSON logs, use -logger-file-line=false to\ndisable (default true)\n  -logger-force-color\n        Force color output even if stderr isn't a terminal\n  -logger-goroutine\n        GoroutineID emitted in JSON/color logs, use -logger-goroutine=false to disable\n(default true)\n  -logger-json\n        Log in JSON format, use -logger-json=false to disable (default true)\n  -logger-no-color\n        Prevent colorized output even if stderr is a terminal\n  -logger-timestamp\n        Timestamps emitted in JSON logs, use -logger-timestamp=false to disable (default\ntrue)\n  -loglevel level\n        log level, one of [Debug Verbose Info Warning Error Critical Fatal] (default Info)\n  -max-echo-delay value\n        Maximum sleep time for delay= echo server parameter. dynamic flag. (default 1.5s)\n  -maxpayloadsizekb Kbytes\n        MaxPayloadSize is the maximum size of payload to be generated by the EchoHandler\nsize= argument. In Kbytes. (default 256)\n  -mtls\n        Require client certificate signed by -cacert for client connections\n  -multi-mirror-origin\n        Mirror the request URL to the target for multi proxies (-M) (default true)\n  -multi-serial-mode\n        Multi server (-M) requests one at a time instead of parallel mode\n  -n int\n        Run for exactly this number of calls instead of duration. Default (0) is to use\nduration (-t). Default is 1 when used as gRPC ping count.\n  -nc-dont-stop-on-eof\n        in netcat (nc) mode, don't abort as soon as remote side closes\n  -no-reresolve\n        Keep the initial DNS resolution and don't re-resolve when making new connections\n(because of error or reuse limit reached)\n  -nocatchup\n        set to exact fixed qps and prevent fortio from trying to catchup when the target\nfails to keep up temporarily\n  -offset duration\n        Offset of the histogram data\n  -p string\n        List of pXX to calculate (default \"50,75,90,99,99.9\")\n  -payload string\n        Payload string to send along\n  -payload-file path\n        File path to be use as payload (POST for HTTP), replaces -payload when set.\n  -payload-size int\n        Additional random payload size, replaces -payload when set > 0, must be smaller\nthan -maxpayloadsizekb. Setting this switches HTTP to POST.\n  -ping\n        gRPC load test: use ping instead of health\n  -pprof\n        Enable pprof HTTP endpoint in the Web UI handler server\n  -profile file\n        write .cpu and .mem profiles to file\n  -proxy-all-headers\n        Determines if only tracing or all headers (and cookies) are copied from request\non the fetch2 ui/server endpoint (default true)\n  -qps float\n        Queries Per Seconds or 0 for no wait/max qps (default 8)\n  -quiet\n        Quiet mode, sets loglevel to Error (quietly) to reduces the output\n  -r float\n        Resolution of the histogram lowest buckets in seconds (default 0.001)\n  -redirect-port port\n        Redirect all incoming traffic to https:// URL (need ingress to work properly).\nCan be in the form of host:port, ip:port, port or \"disabled\" to disable the feature.\n(default \"8081\")\n  -resolve IP\n        Resolve host name to this IP\n  -resolve-ip-type type\n        Resolve type: ip4 for ipv4, ip6 for ipv6 only, use ip for both (default ip4)\n  -runid int\n        Optional RunID to add to JSON result and auto save filename, to match server mode\n  -s int\n        Number of streams per gRPC connection (default 1)\n  -sequential-warmup\n        http(s) runner warmup done sequentially instead of parallel. When set, restores\npre 1.21 behavior\n  -server-idle-timeout value\n        Default IdleTimeout for servers (default 30s)\n  -static-dir path\n        Deprecated/unused path.\n  -stdclient\n        Use the slower net/http standard client (slower but supports h2/h2c)\n  -stream\n        Stream payload from stdin (only for fortio curl mode)\n  -sync URL\n        index.tsv or s3/gcs bucket XML URL to fetch at startup for server modes.\n  -sync-interval duration\n        Refresh the URL every given interval (default, no refresh)\n  -t duration\n        How long to run the test or 0 to run until ^C (default 5s)\n  -tcp-port port\n        tcp-echo server port. Can be in the form of host:port, ip:port, port or\n/unix/domain/path or \"disabled\". (default \"8078\")\n  -timeout duration\n        Connection and read timeout value (for HTTP) (default 3s)\n  -udp-async\n        if true, udp echo server will use separate go routine to reply\n  -udp-port port\n        udp-echo server port. Can be in the form of host:port, ip:port, port or\n\"disabled\". (default \"8078\")\n  -udp-timeout duration\n        Udp timeout (default 750ms)\n  -ui-path URI\n        HTTP server URI for UI, empty turns off that part (more secure) (default\n\"/fortio/\")\n  -uniform\n        set to true to de-synchronize parallel clients' requests uniformly\n  -unix-socket path\n        Unix domain socket path to use for physical connection\n  -user user:password\n        User credentials for basic authentication (for HTTP). Input data format should be\nuser:password\n<!-- USAGE_END -->\n</pre>\n</details>\n\nSee also the FAQ entry about [fortio flags for best results](https://github.com/fortio/fortio/wiki/FAQ#i-want-to-get-the-best-results-what-flags-should-i-pass).\n\n## Server URLs and features\n\nFortio `server` has the following feature for the HTTP listening on 8080 (all paths and ports are configurable through flags above):\n\n* A simple echo server which will echo back posted data (for any path not mentioned below).\n\n  For instance `curl -d abcdef http://localhost:8080/` returns `abcdef` back. It supports the following optional query argument parameters:\n\n| Parameter | Usage, example |\n|-----------|----------------|\n| delay     | duration to delay the response by. Can be a single value or a comma separated list of probabilities, e.g, `delay=150us:10,2ms:5,0.5s:1` for 10% of chance of a 150 us delay, 5% of a 2ms delay and 1% of a 1/2 second delay |\n| status    | HTTP status to return instead of 200. Can be a single value or a comma separated list of probabilities, e.g, `status=404:10,503:5,429:1` for 10% of chance of a 404 status, 5% of a 503 status and 1% of a 429 status |\n| size      | size of the payload to reply instead of echoing input. Also works as probabilities list. `size=1024:10,512:5` 10% of response will be 1k and 5% will be 512 bytes payload and the REST defaults to echoing back. |\n| close     | close the socket after answering e.g, `close=true` to close after all requests or `close=5.3` to close after approximately 5.3% of requests|\n| header    | header(s) to add to the reply e.g., `&header=Foo:Bar&header=X:Y` |\n| gzip      | If `Accept-Encoding: gzip` is passed in headers by the caller/client; and `gzip=true` is in the query args, all response will be gzipped; or if `gzip=42.7` is passed, approximately 42.7% will|\n\n`delay`, `close` and `header` query arguments are also supported for the `debug` endpoint which echoes back the request (gzip is always done if `Accept-Encoding: gzip` is present, status is always 200, and the payload is the echo back debug information).\n\nYou can set a default value for all these by passing `-echo-server-default-params` to the server command line, for instance:\n`fortio server -echo-server-default-params=\"delay=0.5s:50,1s:40&status=418\"` will make the server respond with HTTP 418 and a delay of either 0.5s half of the time, 1s 40% and no delay in 10% of the calls; unless any `?` query args is passed by the client. Note that the quotes (&quot;) are for the shell to escape the ampersand (&amp;) but should not be put in a YAML nor the dynamic flag URL for instance.\n\n* `/debug` will echo back the request in plain text for human debugging.\n\n* `/fortio/` A UI to\n  * Run/Trigger tests and graph the results.\n  * A UI to browse saved results and single graph or multi graph them (comparative graph of min, avg, median, p75, p99, p99.9 and max).\n  * Proxy/fetch other URLs.\n  * `/fortio/data/index.tsv` a tab separated value file conforming to Google cloud storage [URL list data transfer format](https://cloud.google.com/storage/transfer/create-url-list) so you can export/backup local results to the cloud.\n  * Download/sync peer to peer JSON results files from other Fortio servers (using their `index.tsv` URLs).\n  * Download/sync from an Amazon S3 or Google Cloud compatible bucket listings [XML URLs](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGET.html).\n\n* API to trigger and cancel runs from the running server (like the form UI, but more directly and with `async=on` option)\n  * `/fortio/rest/run` starts a run; the arguments are either from the command line or from POSTed JSON; `jsonPath` can be provided to look for in a subset of the JSON object, for instance `jsonPath=metadata` allows using the flagger webhook metadata for fortio run parameters (see [Remote Triggered load test section below](#remote-triggered-load-test-server-mode-rest-api)).\n  * `/fortio/rest/stop` stops all current run or by run ID (passing `runid=` query argument).\n  * `/fortio/rest/status` lists the current runs (or the options of a single one if `runid` is passed).\n\n* DNS API for troubleshooting latency based records / view of the DNS where fortio server is running. `/fortio/rest/dns?name=x` resolves all the IPs for `x`.\n\nThe `report` mode is a read-only subset of the above directly on `/`.\n\nThere is also the gRPC health and ping servers, as well as the HTTP->HTTPS redirector.\n\n## Example use and output\n\nNote that recent versions of fortio, when run on the console, have colorized output (and JSON when ran in server environment). What's below is plain text from older versions.\n\n### Start the internal servers\n\n```Shell\n$ fortio server &\nFortio X.Y.Z tcp-echo server listening on tcp [::]:8078\nFortio X.Y.Z udp-echo server listening on udp [::]:8078\nFortio X.Y.Z grpc 'ping' server listening on tcp [::]:8079\nFortio X.Y.Z https redirector server listening on tcp [::]:8081\nFortio X.Y.Z http-echo server listening on tcp [::]:8080\nData directory is /Users/ldemailly/dev/fortio\nREST API on /fortio/rest/run, /fortio/rest/status, /fortio/rest/stop, /fortio/rest/dns\nDebug endpoint on /debug, Additional Echo on /debug/echo/, Flags on /fortio/flags, and Metrics on /debug/metrics\n\t UI started - visit:\n\t\thttp://localhost:8080/fortio/\n\t (or any host/ip reachable on this server)\nI fortio_main.go:285> Note: not using dynamic flag watching (use -config to set watch directory)\nI fortio_main.go:293> All fortio X.Y.Z  goM.m.p arm64 darwin servers started!\n```\n\n### Sample of the graphing UI\n\nWith the 2 histograms - total and errors overlaid:\n\n![Graphical result](https://user-images.githubusercontent.com/3664595/165001248-33e180d5-fd6b-4389-b73e-79a21e76d5b0.png)\n\n\n### Change the port / binding address\n\nBy default, Fortio's web/echo servers listen on port 8080 on all interfaces.\nUse the `-http-port` flag to change this behavior:\n\n```Shell\n$ fortio server -http-port 10.10.10.10:8088\nUI starting - visit:\nhttp://10.10.10.10:8088/fortio/\nhttps redirector running on :8081\nFortio X.Y.Z grpc ping server listening on port :8079\nFortio X.Y.Z echo server listening on port 10.10.10.10:8088\n```\n\n### Unix domain sockets\n\nYou can use Unix domain socket for any server/client:\n\n```Shell\n$ fortio server --http-port /tmp/fortio-uds-http &\nFortio X.Y.Z grpc 'ping' server listening on [::]:8079\nFortio X.Y.Z https redirector server listening on [::]:8081\nFortio X.Y.Z echo server listening on /tmp/fortio-uds-http\nUI started - visit:\nfortio curl -unix-socket=/tmp/fortio-uds-http http://localhost/fortio/\n14:58:45 I fortio_main.go:217> All fortio X.Y.Z unknown goM.m.p servers started!\n$ fortio curl -unix-socket=/tmp/fortio-uds-http http://foo.bar/debug\n15:00:48 I http_client.go:428> Using unix domain socket /tmp/fortio-uds-http instead of foo.bar http\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=UTF-8\nDate: Wed, 08 Aug 2018 22:00:48 GMT\nContent-Length: 231\n\nΦορτίο version X.Y.Z unknown goM.m.p echo debug server up for 2m3.4s on ldemailly-macbookpro - request from\n\nGET /debug HTTP/1.1\n\nheaders:\n\nHost: foo.bar\nUser-Agent: fortio.org/fortio-X.Y.Z\n\nbody:\n```\n\n### TCP\nStart the echo-server alone and run a load (use `tcp://` prefix for the load test to be for tcp echo server):\n```Shell\n$ fortio tcp-echo &\nFortio X.Y.Z tcp-echo TCP server listening on [::]:8078\n19:45:30 I fortio_main.go:238> All fortio X.Y.Z release goM.m.p servers started!\n$ fortio load -qps -1 -n 100000 tcp://localhost:8078\nFortio X.Y.Z running at -1 queries per second, 16->16 procs, for 100000 calls: tcp://localhost:8078\n20:01:31 I tcprunner.go:218> Starting tcp test for tcp://localhost:8078 with 4 threads at -1.0 qps\nStarting at max qps with 4 thread(s) [gomax 16] for exactly 100000 calls (25000 per thread + 0)\n20:01:32 I periodic.go:558> T003 ended after 1.240585427s : 25000 calls. qps=20151.77629520873\n20:01:32 I periodic.go:558> T002 ended after 1.241141084s : 25000 calls. qps=20142.75437521493\n20:01:32 I periodic.go:558> T001 ended after 1.242066385s : 25000 calls. qps=20127.7486468648\n20:01:32 I periodic.go:558> T000 ended after 1.24227731s : 25000 calls. qps=20124.331176909283\nEnded after 1.242312567s : 100000 calls. qps=80495\nAggregated Function Time : count 100000 avg 4.9404876e-05 +/- 1.145e-05 min 2.7697e-05 max 0.000887051 sum 4.94048763\n# range, mid point, percentile, count\n>= 2.7697e-05 <= 0.000887051 , 0.000457374 , 100.00, 100000\n# target 50% 0.00045737\n# target 75% 0.00067221\n# target 90% 0.000801115\n# target 99% 0.000878457\n# target 99.9% 0.000886192\nSockets used: 4 (for perfect no error run, would be 4)\nTotal Bytes sent: 2400000, received: 2400000\ntcp OK : 100000 (100.0 %)\nAll done 100000 calls (plus 0 warmup) 0.049 ms avg, 80495.0 qps\n```\n\n### UDP\nStart the udp-echo server alone and run a load (use `udp://` prefix for the load test to be for udp echo server):\n```\n$ fortio udp-echo &\nFortio X.Y.Z udp-echo UDP server listening on [::]:8078\n21:54:52 I fortio_main.go:273> Note: not using dynamic flag watching (use -config to set watch directory)\n21:54:52 I fortio_main.go:281> All fortio X.Y.Z release goM.m.p servers started!\n$ fortio load -qps -1 -n 100000 udp://localhost:8078/\nFortio X.Y.Z running at -1 queries per second, 16->16 procs, for 100000 calls: udp://localhost:8078/\n21:56:48 I udprunner.go:222> Starting udp test for udp://localhost:8078/ with 4 threads at -1.0 qps\nStarting at max qps with 4 thread(s) [gomax 16] for exactly 100000 calls (25000 per thread + 0)\n21:56:49 I periodic.go:558> T003 ended after 969.635695ms : 25000 calls. qps=25782.879208051432\n21:56:49 I periodic.go:558> T000 ended after 969.906228ms : 25000 calls. qps=25775.687667818544\n21:56:49 I periodic.go:558> T002 ended after 970.543935ms : 25000 calls. qps=25758.751457243405\n21:56:49 I periodic.go:558> T001 ended after 970.737665ms : 25000 calls. qps=25753.610786287973\nEnded after 970.755702ms : 100000 calls. qps=1.0301e+05\nAggregated Function Time : count 100000 avg 3.8532238e-05 +/- 1.7e-05 min 2.0053e-05 max 0.000881827 sum 3.85322376\n# range, mid point, percentile, count\n>= 2.0053e-05 <= 0.000881827 , 0.00045094 , 100.00, 100000\n# target 50% 0.000450936\n# target 75% 0.000666381\n# target 90% 0.000795649\n# target 99% 0.000873209\n# target 99.9% 0.000880965\nSockets used: 4 (for perfect no error run, would be 4)\nTotal Bytes sent: 2400000, received: 2400000\nudp OK : 100000 (100.0 %)\nAll done 100000 calls (plus 0 warmup) 0.039 ms avg, 103012.5 qps\n```\n\n### gRPC\n\n#### Simple gRPC ping\n\n```Shell\n$ fortio grpcping -n 5 localhost\n22:36:55 I pingsrv.go:150> Ping RTT 212000 (avg of 259000, 217000, 160000 ns) clock skew -10500\n22:36:55 I pingsrv.go:150> Ping RTT 134333 (avg of 170000, 124000, 109000 ns) clock skew 5000\n22:36:55 I pingsrv.go:150> Ping RTT 112000 (avg of 111000, 122000, 103000 ns) clock skew 5000\n22:36:55 I pingsrv.go:150> Ping RTT 157000 (avg of 136000, 158000, 177000 ns) clock skew 6000\n22:36:55 I pingsrv.go:150> Ping RTT 108333 (avg of 118000, 106000, 101000 ns) clock skew 1000\nClock skew histogram usec : count 5 avg 1.3 +/- 6.145 min -10.5 max 6 sum 6.5\n# range, mid point, percentile, count\n>= -10.5 <= -10 , -10.25 , 20.00, 1\n> 0 <= 2 , 1 , 40.00, 1\n> 4 <= 6 , 5 , 100.00, 3\n# target 50% 4.33333\nRTT histogram usec : count 15 avg 144.73333 +/- 44.48 min 101 max 259 sum 2171\n# range, mid point, percentile, count\n>= 101 <= 110 , 105.5 , 26.67, 4\n> 110 <= 120 , 115 , 40.00, 2\n> 120 <= 140 , 130 , 60.00, 3\n> 140 <= 160 , 150 , 73.33, 2\n> 160 <= 180 , 170 , 86.67, 2\n> 200 <= 250 , 225 , 93.33, 1\n> 250 <= 259 , 254.5 , 100.00, 1\n# target 50% 130\n```\n\n#### Change the target port for gRPC\n\nThe value of `-grpc-port` (default 8079) is used when specifying a hostname or an IP address in `grpcping`. Add `:port` to the `grpcping` destination to\nchange this behavior:\n\n```Shell\n$ fortio grpcping 10.10.10.100:8078 # Connects to gRPC server 10.10.10.100 listening on port 8078\n02:29:27 I pingsrv.go:116> Ping RTT 305334 (avg of 342970, 293515, 279517 ns) clock skew -2137\nClock skew histogram usec : count 1 avg -2.137 +/- 0 min -2.137 max -2.137 sum -2.137\n# range, mid point, percentile, count\n>= -4 < -2 , -3 , 100.00, 1\n# target 50% -2.137\nRTT histogram usec : count 3 avg 305.334 +/- 27.22 min 279.517 max 342.97 sum 916.002\n# range, mid point, percentile, count\n>= 250 < 300 , 275 , 66.67, 2\n>= 300 < 350 , 325 , 100.00, 1\n# target 50% 294.879\n```\n\n#### `grpcping` using TLS\n\nNote that since 1.40 the same applies to the main HTTP server port, it will listen on TLS if `-cert` and `-key` flags are provided.\n\nFor testing use `make certs` to generate self signed test certificates.\n\n* First, start Fortio server with the `-cert` and `-key` flags:\n\n`/path/to/fortio/server.crt` and `/path/to/fortio/server.key` are paths to the TLS certificate and key that\nyou must provide:\n\n```Shell\n$ fortio server -cert /path/to/fortio/server.crt -key /path/to/fortio/server.key\nUI starting - visit:\nhttp://localhost:8080/fortio/\nhttps redirector running on :8081\nFortio X.Y.Z grpc ping server listening on port :8079\nFortio X.Y.Z echo server listening on port localhost:8080\nUsing server certificate /path/to/fortio/server.crt to construct TLS credentials\nUsing server key /path/to/fortio/server.key to construct TLS credentials\n```\n\n* Next, use `grpcping` with the `-cacert` flag:\n\n`/path/to/fortio/ca.crt` is the path to the CA certificate\nthat issued the server certificate for `localhost`. In our example, the server certificate is\n`/path/to/fortio/server.crt`:\n\n```Shell\n$ fortio grpcping -cacert /path/to/fortio/ca.crt localhost\nUsing server certificate /path/to/fortio/ca.crt to construct TLS credentials\n16:00:10 I pingsrv.go:129> Ping RTT 501452 (avg of 595441, 537088, 371828 ns) clock skew 31094\nClock skew histogram usec : count 1 avg 31.094 +/- 0 min 31.094 max 31.094 sum 31.094\n# range, mid point, percentile, count\n>= 31.094 <= 31.094 , 31.094 , 100.00, 1\n# target 50% 31.094\nRTT histogram usec : count 3 avg 501.45233 +/- 94.7 min 371.828 max 595.441 sum 1504.357\n# range, mid point, percentile, count\n>= 371.828 <= 400 , 385.914 , 33.33, 1\n> 500 <= 595.441 , 547.721 , 100.00, 2\n# target 50% 523.86\n```\n\n#### gRPC to standard HTTPS service\n\n`grpcping` can connect to a non-fortio TLS server by prefacing the destination with `https://`:\n\n```Shell\n$ fortio grpcping https://grpc.fortio.org\n13:48:20 I grpcrunner.go:276> stripping https scheme. grpc destination: grpc.fortio.org. grpc port: 443\n13:48:26 I pingsrv.go:152> Ping RTT 63101562 (avg of 63577000, 63192688, 62535000 ns) clock skew 32021375\nClock skew histogram usec : count 1 avg 32021.375 +/- 0 min 32021.375 max 32021.375 sum 32021.375\n# range, mid point, percentile, count\n>= 32021.4 <= 32021.4 , 32021.4 , 100.00, 1\n# target 50% 32021.4\nRTT histogram usec : count 3 avg 63101.563 +/- 430.2 min 62535 max 63577 sum 189304.688\n# range, mid point, percentile, count\n>= 62535 <= 63577 , 63056 , 100.00, 3\n# target 50% 62795.5\n```\n\n### Simple load test\n\nLoad (low default qps/threading) test:\n\n```Shell\n$ fortio load http://www.google.com\nFortio X.Y.Z running at 8 queries per second, 8->8 procs, for 5s: http://www.google.com\n19:10:33 I httprunner.go:84> Starting http test for http://www.google.com with 4 threads at 8.0 qps\nStarting at 8 qps with 4 thread(s) [gomax 8] for 5s : 10 calls each (total 40)\n19:10:39 I periodic.go:314> T002 ended after 5.056753279s : 10 calls. qps=1.9775534712220633\n19:10:39 I periodic.go:314> T001 ended after 5.058085991s : 10 calls. qps=1.9770324224999916\n19:10:39 I periodic.go:314> T000 ended after 5.058796046s : 10 calls. qps=1.9767549252963101\n19:10:39 I periodic.go:314> T003 ended after 5.059557593s : 10 calls. qps=1.9764573910247019\nEnded after 5.059691387s : 40 calls. qps=7.9056\nSleep times : count 36 avg 0.49175757 +/- 0.007217 min 0.463508712 max 0.502087879 sum 17.7032725\nAggregated Function Time : count 40 avg 0.060587641 +/- 0.006564 min 0.052549016 max 0.089893269 sum 2.42350566\n# range, mid point, percentile, count\n>= 0.052549 < 0.06 , 0.0562745 , 47.50, 19\n>= 0.06 < 0.07 , 0.065 , 92.50, 18\n>= 0.07 < 0.08 , 0.075 , 97.50, 2\n>= 0.08 <= 0.0898933 , 0.0849466 , 100.00, 1\n# target 50% 0.0605556\n# target 75% 0.0661111\n# target 99% 0.085936\n# target 99.9% 0.0894975\nCode 200 : 40\nResponse Header Sizes : count 40 avg 690.475 +/- 15.77 min 592 max 693 sum 27619\nResponse Body/Total Sizes : count 40 avg 12565.2 +/- 301.9 min 12319 max 13665 sum 502608\nAll done 40 calls (plus 4 warmup) 60.588 ms avg, 7.9 qps\n```\n\n\n### Remote triggered load test (server mode REST API)\n\nNew since 1.18 the server has a `fortio/rest/run` endpoint similar to what the form UI submit in `fortio/` to start a run.\n  - plus `async` query arg or JSON value `\"on\"` will make the run asynchronous (returns just the runid of the run instead of waiting for the result);\n  - plus read all the run configuration from either query args or JSONPath POSTed info;\n  - compatible with [flagger](https://github.com/fluxcd/flagger) and other webhooks;\n  - New in 1.22: use `headers` JSON array to send headers (or multiple `&H=` query args).\n\nExamples:\n\n```shell\n$ curl -v -d '{\"metadata\": {\"url\":\"localhost:8080\", \"c\":\"1\", \"n\":\"1\", \"async\":\"on\", \"save\":\"on\"}}' \\\n     \"localhost:8080/fortio/rest/run?jsonPath=.metadata\"\n{\"started\": 3}\n```\nmakes a 1 connection 1 query run for localhost:8080 URL asynchronously and saves results\n\nor minimally:\n```shell\ncurl -s -d '{\"url\":\"localhost:8080\"}' \"localhost:8080/fortio/rest/run\" | jq\n```\n\nMore complete example:\n\nWith sample.json (all values must be strings, even the numbers):\n```json\n{\n    \"metadata\": {\n        \"url\": \"localhost:8080\",\n        \"payload\": \"foo\",\n        \"qps\": \"40\",\n        \"c\": \"2\",\n        \"t\": \"0.1s\",\n        \"headers\": [\n            \"Foo:Bar\",\n            \"X-Blah: Something else\"\n        ],\n        \"save\": \"on\"\n    }\n}\n```\nYou can run:\n```shell\n$ fortio curl -stdclient -payload-file sample.json \"http://localhost:8080/fortio/rest/run?jsonPath=.metadata\" > result.json\n```\nwhich makes requests like this:\n```\nPOST / HTTP/1.1\nHost: localhost:8080\nContent-Length: 3\nContent-Type: application/octet-stream\nFoo: Bar\nX-Blah: Something else\nX-On-Behalf-Of: [::1]:62629\n\nfoo\n```\n\nand you get in result.json:\n```json\n{\n  \"RunType\": \"HTTP\",\n  \"Labels\": \"\",\n  \"StartTime\": \"2022-03-19T15:34:23.279389-07:00\",\n  \"RequestedQPS\": \"40\",\n  \"RequestedDuration\": \"100ms\",\n  \"ActualQPS\": 38.44836361217263,\n  \"ActualDuration\": 104035637,\n  \"NumThreads\": 2,\n  \"Version\": \"X.Y.Z\",\n  \"DurationHistogram\": {\n    \"Count\": 4,\n    \"Min\": 0.00027292,\n    \"Max\": 0.000930407,\n    \"Sum\": 0.002332047,\n    \"Avg\": 0.00058301175,\n    \"StdDev\": 0.00028491034912527755,\n    \"Data\": [\n      {\n        \"Start\": 0.00027292,\n        \"End\": 0.000930407,\n        \"Percent\": 100,\n        \"Count\": 4\n      }\n    ],\n    \"Percentiles\": [\n      {\n        \"Percentile\": 50,\n        \"Value\": 0.0004920823333333334\n      },\n      {\n        \"Percentile\": 75,\n        \"Value\": 0.0007112446666666667\n      },\n      {\n        \"Percentile\": 90,\n        \"Value\": 0.0008427420666666666\n      },\n      {\n        \"Percentile\": 99,\n        \"Value\": 0.0009216405066666668\n      },\n      {\n        \"Percentile\": 99.9,\n        \"Value\": 0.0009295303506666667\n      }\n    ]\n  },\n  \"Exactly\": 0,\n  \"Jitter\": false,\n  \"Uniform\": false,\n  \"RunID\": 7,\n  \"AccessLoggerInfo\": \"\",\n  \"RetCodes\": {\n    \"200\": 4\n  },\n  \"URL\": \"http://localhost:8080\",\n  \"NumConnections\": 1,\n  \"Compression\": false,\n  \"DisableFastClient\": false,\n  \"HTTP10\": false,\n  \"DisableKeepAlive\": false,\n  \"AllowHalfClose\": false,\n  \"Insecure\": false,\n  \"FollowRedirects\": false,\n  \"CACert\": \"\",\n  \"Cert\": \"\",\n  \"Key\": \"\",\n  \"Resolve\": \"\",\n  \"HTTPReqTimeOut\": 3000000000,\n  \"UserCredentials\": \"\",\n  \"ContentType\": \"\",\n  \"Payload\": \"Zm9v\",\n  \"UnixDomainSocket\": \"\",\n  \"LogErrors\": false,\n  \"ID\": 0,\n  \"SequentialWarmup\": false,\n  \"Sizes\": {\n    \"Count\": 4,\n    \"Min\": 118,\n    \"Max\": 118,\n    \"Sum\": 472,\n    \"Avg\": 118,\n    \"StdDev\": 0,\n    \"Data\": [\n      {\n        \"Start\": 118,\n        \"End\": 118,\n        \"Percent\": 100,\n        \"Count\": 4\n      }\n    ],\n    \"Percentiles\": null\n  },\n  \"HeaderSizes\": {\n    \"Count\": 4,\n    \"Min\": 115,\n    \"Max\": 115,\n    \"Sum\": 460,\n    \"Avg\": 115,\n    \"StdDev\": 0,\n    \"Data\": [\n      {\n        \"Start\": 115,\n        \"End\": 115,\n        \"Percent\": 100,\n        \"Count\": 4\n      }\n    ],\n    \"Percentiles\": null\n  },\n  \"SocketCount\": 2,\n  \"AbortOn\": 0\n}\n```\n\n- There is also the `fortio/rest/stop` endpoint to stop a run by its id or all runs if not specified.\n\n### DNS REST API example\n\n```bash\n$ curl -s localhost:8080/fortio/rest/dns?name=debug.fortio.org | jq\n```\nReturns\n```json\n{\n  \"Name\": \"debug.fortio.org\",\n  \"IPv4\": [\n    \"18.222.136.83\",\n    \"192.9.142.5\",\n    \"192.9.227.83\"\n  ],\n  \"IPv6\": [\n    \"2600:1f16:9c6:b400:282c:a766:6cab:4e82\",\n    \"2603:c024:c00a:d144:7cd0:4951:7106:96b8\",\n    \"2603:c024:c00a:d144:6663:5896:7efb:fbf3\"\n  ]\n}\n```\n\n### GRPC load test\n\nUses `-s` to use multiple (h2/gRPC) streams per connection (`-c`), request to hit the fortio ping gRPC endpoint with a delay in replies of 0.25s and an extra payload for 10 bytes and auto save the JSON result:\n\n```bash\n$ fortio load -a -grpc -ping -grpc-ping-delay 0.25s -payload \"01234567890\" -c 2 -s 4 https://fortio-stage.istio.io\nFortio X.Y.Z running at 8 queries per second, 8->8 procs, for 5s: https://fortio-stage.istio.io\n16:32:56 I grpcrunner.go:139> Starting GRPC Ping Delay=250ms PayloadLength=11 test for https://fortio-stage.istio.io with 4*2 threads at 8.0 qps\n16:32:56 I grpcrunner.go:261> stripping https scheme. grpc destination: fortio-stage.istio.io. grpc port: 443\n16:32:57 I grpcrunner.go:261> stripping https scheme. grpc destination: fortio-stage.istio.io. grpc port: 443\nStarting at 8 qps with 8 thread(s) [gomax 8] for 5s : 5 calls each (total 40)\n16:33:04 I periodic.go:533> T005 ended after 5.283227589s : 5 calls. qps=0.9463911814835126\n[...]\nEnded after 5.28514474s : 40 calls. qps=7.5684\nSleep times : count 32 avg 0.97034752 +/- 0.002338 min 0.967323561 max 0.974838789 sum 31.0511206\nAggregated Function Time : count 40 avg 0.27731944 +/- 0.001606 min 0.2741372 max 0.280604967 sum 11.0927778\n# range, mid point, percentile, count\n>= 0.274137 <= 0.280605 , 0.277371 , 100.00, 40\n# target 50% 0.277288\n# target 75% 0.278947\n# target 90% 0.279942\n# target 99% 0.280539\n# target 99.9% 0.280598\nPing SERVING : 40\nAll done 40 calls (plus 2 warmup) 277.319 ms avg, 7.6 qps\nSuccessfully wrote 1210 bytes of Json data to 2018-04-03-163258_fortio_stage_istio_io_ldemailly_macbookpro.json\n```\n\nAnd the JSON saved is\n<details>\n<pre>\n{\n  \"RunType\": \"GRPC Ping Delay=250ms PayloadLength=11\",\n  \"Labels\": \"fortio-stage.istio.io , ldemailly-macbookpro\",\n  \"StartTime\": \"2018-04-03T16:32:58.895472681-07:00\",\n  \"RequestedQPS\": \"8\",\n  \"RequestedDuration\": \"5s\",\n  \"ActualQPS\": 7.568383075162479,\n  \"ActualDuration\": 5285144740,\n  \"NumThreads\": 8,\n  \"Version\": \"0.9.0\",\n  \"DurationHistogram\": {\n    \"Count\": 40,\n    \"Min\": 0.2741372,\n    \"Max\": 0.280604967,\n    \"Sum\": 11.092777797,\n    \"Avg\": 0.277319444925,\n    \"StdDev\": 0.0016060870789948905,\n    \"Data\": [\n      {\n        \"Start\": 0.2741372,\n        \"End\": 0.280604967,\n        \"Percent\": 100,\n        \"Count\": 40\n      }\n    ],\n    \"Percentiles\": [\n      {\n        \"Percentile\": 50,\n        \"Value\": 0.2772881634102564\n      },\n      {\n        \"Percentile\": 75,\n        \"Value\": 0.27894656520512817\n      },\n      {\n        \"Percentile\": 90,\n        \"Value\": 0.2799416062820513\n      },\n      {\n        \"Percentile\": 99,\n        \"Value\": 0.28053863092820513\n      },\n      {\n        \"Percentile\": 99.9,\n        \"Value\": 0.2805983333928205\n      }\n    ]\n  },\n  \"Exactly\": 0,\n  \"RetCodes\": {\n    \"1\": 40\n  },\n  \"Destination\": \"https://fortio-stage.istio.io\",\n  \"Streams\": 4,\n  \"Ping\": true\n}\n</pre></details>\n\n* Load test using gRPC and TLS security. First, start Fortio server with the `-cert` and `-key` flags:\n\n```Shell\nfortio server -cert /etc/ssl/certs/server.crt -key /etc/ssl/certs/server.key\n```\n\nNext, run the `load` command with the `-cacert` flag:\n\n```Shell\nfortio load -cacert /etc/ssl/certs/ca.crt -grpc localhost:8079\n```\n\n### cURL like (single request) mode\n\n```Shell\n$ fortio load -curl -H Foo:Bar http://localhost:8080/debug\n14:26:26 I http.go:133> Setting regular extra header Foo: Bar\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=UTF-8\nDate: Mon, 08 Jan 2018 22:26:26 GMT\nContent-Length: 230\n\nΦορτίο version X.Y.Z echo debug server up for 39s on ldemailly-macbookpro - request from [::1]:65055\n\nGET /debug HTTP/1.1\n\nheaders:\n\nHost: localhost:8080\nUser-Agent: fortio.org/fortio-X.Y.Z\nFoo: Bar\n\nbody:\n\n```\n\nNote: if you do not want the default fortio User-Agent to be sent pass `-H user-agent:`. If you want to send a present yet empty User-Agent: header, pass `-H \"user-agent: \"` (i.e., only whitespace sends empty one, empty value doesn't send any).\n\n### Report only UI\n\nIf you have JSON files saved from running the full UI or downloaded, using the `-sync` option, from an Amazon or Google Cloud storage bucket or from a peer fortio server (to synchronize from a peer fortio, use `http://`_peer_`:8080/data/index.tsv` as the sync URL). You can then serve just the reports:\n\n```Shell\n$ fortio report -sync-interval 15m -sync \"https://storage.googleapis.com/fortio-data?prefix=fortio.istio.io/\"\nBrowse only UI starting - visit:\nhttp://localhost:8080/\nhttps redirector running on :8081\n```\n\n### Using the HTTP fan out / multi proxy feature\n\nExample listen on 1 extra port and every request sent to that 1 port is forward to 2:\n```Shell\n# in one window or &\n$ fortio server -M \"5554 http://localhost:8080 http://localhost:8080\"\n[...]\nFortio X.Y.Z Multi on 5554 server listening on [::]:5554\n10:09:56 I http_forwarder.go:152> Multi-server on [::]:5554 running with &{Targets:[{Destination:http://localhost:8080 MirrorOrigin:true} {Destination:http://localhost:8080 MirrorOrigin:true}] Name:Multi on [::]:5554 client:0xc0001ccc00}\n```\nCall the debug endpoint on both:\n```Shell\n# in new window\n$ fortio curl -payload \"a test\" http://localhost:5554/debug\nHTTP/1.1 200 OK\nDate: Wed, 07 Oct 2020 17:11:06 GMT\nContent-Length: 684\nContent-Type: text/plain; charset=utf-8\n\nΦορτίο version X.Y.Z unknown goM.m.p echo debug server up for 1m9.3s on C02C77BHMD6R - request from [::1]:51020\n\nPOST /debug HTTP/1.1\n\nheaders:\n\nHost: localhost:8080\nAccept-Encoding: gzip\nContent-Type: application/octet-stream\nUser-Agent: fortio.org/fortio-X.Y.Z\nX-Fortio-Multi-Id: 1\nX-On-Behalf-Of: [::1]:51019\n\nbody:\n\na test\nΦορτίο version X.Y.Z unknown goM.m.p echo debug server up for 1m9.3s on C02C77BHMD6R - request from [::1]:51020\n\nPOST /debug HTTP/1.1\n\nheaders:\n\nHost: localhost:8080\nAccept-Encoding: gzip\nContent-Type: application/octet-stream\nUser-Agent: fortio.org/fortio-X.Y.Z\nX-Fortio-Multi-Id: 2\nX-On-Behalf-Of: [::1]:51019\n\nbody:\n\na test\n```\nThere are 2 flags to further control the behavior of the multi-server proxies:\n\n- pass `-mirrorOriginFlag=false` to not mirror all headers and request type to targets.\n- pass `-multi-serial-mode` to stream request response serially instead of fetching in parallel and writing combined data after completion.\n\nAlso remember you can pass multiple `-M`.\n\n### Using the TCP proxy server(s) feature\n\nExample: open 2 additional listening ports and forward all requests received on 8888 and 8889 (IPv6) to 8080 (regular HTTP server)\n\n```Shell\n$ fortio server -P \"8888 [::1]:8080\" -P \"[::1]:8889 [::1]:8080\"\nFortio X.Y.Z grpc 'ping' server listening on [::]:8079\nFortio X.Y.Z https redirector server listening on [::]:8081\nFortio X.Y.Z echo server listening on [::]:8080\nData directory is /home/dl\nUI started - visit:\nhttp://localhost:8080/fortio/\n(or any host/ip reachable on this server)\nFortio X.Y.Z proxy for [::1]:8080 server listening on [::]:8888\nFortio X.Y.Z proxy for [::1]:8080 server listening on [::1]:8889\n```\n\n## Implementation details\n\nFortio is written in the [Go](https://golang.org) language and includes a scalable semi log histogram in [stats.go](stats/stats.go) and a periodic runner engine in [periodic.go](periodic/periodic.go) with specializations for [HTTP](fhttp/httprunner.go) and [gRPC](fgrpc/grpcrunner.go).\nThe [fhttp/](fhttp/) package includes a very high performance specialized HTTP 1.1 client.\nYou may find fortio's [logger](log/logger.go) useful as well.\n\nYou can run the histogram code standalone as a command line in [histogram/](histogram/), a basic echo HTTP server in [echosrv/](echosrv/), or both the HTTP echo and gRPC ping server through `fortio server`, the fortio command line interface lives in this top level directory [fortio_main.go](fortio_main.go)\n\nThere is also [fcurl/](fcurl/) which is the `fortio curl` part of the code (if you need a light HTTP client without gRPC or server side).\nA matching tiny (2Mb compressed) Docker image is [fortio/fortio.fcurl](https://hub.docker.com/r/fortio/fortio.fcurl/tags/).\n\n## More examples\n\nYou can get the data on the console, for instance, with 5k qps: (includes envoy and mixer in the calls)\n<details><pre>\n$ time fortio load -qps 5000 -t 60s -c 8 -r 0.0001 -H \"Host: perf-cluster\" http://benchmark-2:9090/echo\n2017/07/09 02:31:05 Will be setting special Host header to perf-cluster\nFortio running at 5000 queries per second for 1m0s: http://benchmark-2:9090/echo\nStarting at 5000 qps with 8 thread(s) [gomax 4] for 1m0s : 37500 calls each (total 300000)\n2017/07/09 02:32:05 T004 ended after 1m0.000907812s : 37500 calls. qps=624.9905437680746\n2017/07/09 02:32:05 T000 ended after 1m0.000922222s : 37500 calls. qps=624.9903936684861\n2017/07/09 02:32:05 T005 ended after 1m0.00094454s : 37500 calls. qps=624.9901611965524\n2017/07/09 02:32:05 T006 ended after 1m0.000944816s : 37500 calls. qps=624.9901583216429\n2017/07/09 02:32:05 T001 ended after 1m0.00102094s : 37500 calls. qps=624.9893653892883\n2017/07/09 02:32:05 T007 ended after 1m0.001096292s : 37500 calls. qps=624.9885805003184\n2017/07/09 02:32:05 T003 ended after 1m0.001045342s : 37500 calls. qps=624.9891112105419\n2017/07/09 02:32:05 T002 ended after 1m0.001044416s : 37500 calls. qps=624.9891208560392\nEnded after 1m0.00112695s : 300000 calls. qps=4999.9\nAggregated Sleep Time : count 299992 avg 8.8889218e-05 +/- 0.002326 min -0.03490402 max 0.001006041 sum 26.6660543\n# range, mid point, percentile, count\n< 0 , 0 , 8.58, 25726\n>= 0 < 0.001 , 0.0005 , 100.00, 274265\n>= 0.001 < 0.002 , 0.0015 , 100.00, 1\n# target 50% 0.000453102\nWARNING 8.58% of sleep were falling behind\nAggregated Function Time : count 300000 avg 0.00094608764 +/- 0.0007901 min 0.000510522 max 0.029267604 sum 283.826292\n# range, mid point, percentile, count\n>= 0.0005 < 0.0006 , 0.00055 , 0.15, 456\n>= 0.0006 < 0.0007 , 0.00065 , 3.25, 9295\n>= 0.0007 < 0.0008 , 0.00075 , 24.23, 62926\n>= 0.0008 < 0.0009 , 0.00085 , 62.73, 115519\n>= 0.0009 < 0.001 , 0.00095 , 85.68, 68854\n>= 0.001 < 0.0011 , 0.00105 , 93.11, 22293\n>= 0.0011 < 0.0012 , 0.00115 , 95.38, 6792\n>= 0.0012 < 0.0014 , 0.0013 , 97.18, 5404\n>= 0.0014 < 0.0016 , 0.0015 , 97.94, 2275\n>= 0.0016 < 0.0018 , 0.0017 , 98.34, 1198\n>= 0.0018 < 0.002 , 0.0019 , 98.60, 775\n>= 0.002 < 0.0025 , 0.00225 , 98.98, 1161\n>= 0.0025 < 0.003 , 0.00275 , 99.21, 671\n>= 0.003 < 0.0035 , 0.00325 , 99.36, 449\n>= 0.0035 < 0.004 , 0.00375 , 99.47, 351\n>= 0.004 < 0.0045 , 0.00425 , 99.57, 290\n>= 0.0045 < 0.005 , 0.00475 , 99.66, 280\n>= 0.005 < 0.006 , 0.0055 , 99.79, 380\n>= 0.006 < 0.007 , 0.0065 , 99.82, 92\n>= 0.007 < 0.008 , 0.0075 , 99.83, 15\n>= 0.008 < 0.009 , 0.0085 , 99.83, 5\n>= 0.009 < 0.01 , 0.0095 , 99.83, 1\n>= 0.01 < 0.012 , 0.011 , 99.83, 8\n>= 0.012 < 0.014 , 0.013 , 99.84, 35\n>= 0.014 < 0.016 , 0.015 , 99.92, 231\n>= 0.016 < 0.018 , 0.017 , 99.94, 65\n>= 0.018 < 0.02 , 0.019 , 99.95, 26\n>= 0.02 < 0.025 , 0.0225 , 100.00, 139\n>= 0.025 < 0.03 , 0.0275 , 100.00, 14\n# target 50% 0.000866935\n# target 75% 0.000953452\n# target 99% 0.00253875\n# target 99.9% 0.0155152\nCode 200 : 300000\nResponse Body Sizes : count 300000 avg 0 +/- 0 min 0 max 0 sum 0\n</pre></details>\n\nOr you can get the data in [JSON format](https://github.com/fortio/fortio/wiki/Sample-JSON-output) (using `-json result.json`).\n\n### Web/Graphical UI\n\nOr graphically (through the [http://localhost:8080/fortio/](http://localhost:8080/fortio/) web UI):\n\nSimple form/UI:\n\nSample requests with responses delayed by 250us and 0.5% of 503 and 1.5% of 429 simulated HTTP errors:\n\n![Web UI form screenshot](https://user-images.githubusercontent.com/3664595/41430618-53d911d4-6fc5-11e8-8e35-d4f5fea4426a.png)\n\nRun result:\n\n![Graphical result](https://user-images.githubusercontent.com/3664595/41430735-bb95eb3a-6fc5-11e8-8174-be4a6251058f.png)\n\n```Shell\nCode 200 : 2929 (97.6 %)\nCode 429 : 56 (1.9 %)\nCode 503 : 15 (0.5 %)\n```\n\nThere are live examples on [https://demo.fortio.org](https://demo.fortio.org/)\n\n## Contributing\n\nContributions whether through issues, documentation, bug fixes, or new features\nare most welcome !\n\nPlease also see [Contributing to Istio](https://github.com/istio/community/blob/master/CONTRIBUTING.md#contributing-to-istio)\nand [Getting started contributing to Fortio](https://github.com/fortio/fortio/wiki/FAQ#how-do-i-get-started-contributing-to-fortio) in the FAQ.\n\nIf you are not using the binary releases, please do `make pull` to pull/update to the latest of the current branch.\n\nAnd make sure to go strict format (`go get mvdan.cc/gofumpt` and `gofumpt -w *.go`) and run those commands successfully before sending your PRs:\n\n```Shell\nmake test\nmake lint\nmake release-test\n```\n\nWhen modifying JavaScript, check with [standard](https://github.com/standard/standard):\n\n```Shell\nstandard --fix ui/static/js/fortio_chart.js\n```\n\nNew features and bug fixes should include a test.\n\n## See also\n\nOur wiki and the [Fortio FAQ](https://github.com/fortio/fortio/wiki/FAQ) (including for instance differences between `fortio` and `wrk` or `httpbin`).\n\n## Disclaimer\n\nThis is not an officially supported Google product.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.27734375,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.23.x   | :white_check_mark: |\n\n\n## Reporting a Vulnerability\n\nPlease open in Issue or contact the main author directly at ldemailly at gmail\nor techs_product_0e@icloud.com\n"
        },
        {
          "name": "Webtest.sh",
          "type": "blob",
          "size": 8.7783203125,
          "content": "#! /bin/bash\n# Copyright 2017 Fortio Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nset -x\n# Check we can build the image\nNATIVE_PLATFORM=$(docker buildx --builder default inspect | awk '/Platforms:/ {print $2}' | sed -e 's/,//g')\necho \"Building for $NATIVE_PLATFORM\"\nmake docker-internal TAG=webtest BUILDX_PLATFORMS=\"$NATIVE_PLATFORM\" MODE=dev || exit 1\nFORTIO_UI_PREFIX=/newprefix/ # test the non default prefix (not /fortio/)\nFILE_LIMIT=25 # must be low to detect leaks, go 1.14 seems to need more than go1.8 (!)\nLOGLEVEL=info # change to debug to debug\nMAXPAYLOAD=8 # Max Payload size for echo?size= in kb\nTIMEOUT=10s # need to be higher than test duration done through fetch\n#CERT=/etc/ssl/certs/ca-certificates.crt\nTEST_CERT_VOL=/etc/ssl/certs/fortio\nDOCKERNAME=fortio_server\nDOCKERSECNAME=fortio_secure_server\nDOCKERSECVOLNAME=fortio_certs\nFORTIO_BIN_PATH=fortio # /usr/bin/fortio is the full path but isn't needed\n\n# Unresolvable should error out - #653\ndocker run fortio/fortio:webtest curl http://doesnt.exist.google.com/\nif [[ $? == 0 ]]; then\n  echo \"Error in curl should show up in status\"\n  exit 1\nfi\n\n# Expect error with extra args: (timeout (brew install coreutils) returns 124\n# for timeout) - #652\ntimeout 3 docker run fortio/fortio:webtest server -loglevel debug extra-arg\nif [[ $? == 124 || $? == 0 ]]; then\n  echo \"Unrecognized extra args/typo in flags should error out immediately\"\n  exit 1\nfi\n\nDOCKERID=$(docker run -d --ulimit nofile=$FILE_LIMIT --net host --name $DOCKERNAME fortio/fortio:webtest server -ui-path $FORTIO_UI_PREFIX -loglevel $LOGLEVEL -maxpayloadsizekb $MAXPAYLOAD -timeout=$TIMEOUT -pprof)\nfunction cleanup {\n  set +e # errors are ok during cleanup\n#  docker logs \"$DOCKERID\" # uncomment to debug\n  docker stop \"$DOCKERID\"\n  docker rm -f $DOCKERNAME\n  docker stop \"$DOCKERSECID\" # may not be set yet, it's ok\n  docker rm -f $DOCKERSECNAME\n  docker stop \"$DOCKERCURLID\"\n  docker rm -f $DOCKERSECVOLNAME\n}\ntrap cleanup EXIT\nset -e\nset -o pipefail\ndocker ps\nBASE_URL=\"http://localhost:8080\"\nBASE_FORTIO=\"$BASE_URL$FORTIO_UI_PREFIX\"\nLOGO=fortio-logo-gradient-no-bg.svg\nCURL=\"docker exec $DOCKERNAME $FORTIO_BIN_PATH curl -loglevel $LOGLEVEL -timeout $TIMEOUT\"\n# Check https works (certs are in the image) - also tests autoswitch to std client for https\n$CURL https://www.google.com/robots.txt > /dev/null\n\n# Check that quiet is quiet. Issue #385.\nQUIETCURLTEST=\"docker exec $DOCKERNAME $FORTIO_BIN_PATH curl -quiet -curl-stdout-headers www.google.com\"\nif [ \"$($QUIETCURLTEST 2>&1 > /dev/null  | wc -l)\" -ne 0 ]; then\n  echo \"Error, -quiet still outputs logs\"\n  $QUIETCURLTEST > /dev/null\n  exit 1\nfi\n\n# Check we can connect, and run a http QPS test against ourselves through fetch\n$CURL \"${BASE_FORTIO}fetch/localhost:8080$FORTIO_UI_PREFIX?url=http://localhost:8080/debug&load=Start&qps=-1&json=on\" | grep ActualQPS\n# Check we can do it twice despite ulimit - check we get all 200s (exactly 80 of them (default is 8 connections->16 fds + a few))\n$CURL \"${BASE_FORTIO}fetch/localhost:8080$FORTIO_UI_PREFIX?url=http://localhost:8080/debug&load=Start&n=80&qps=-1&json=on\" | grep '\"200\": 80'\n# Same but using the rest api instead\n$CURL \"${BASE_FORTIO}fetch/localhost:8080${FORTIO_UI_PREFIX}rest/run?url=http://localhost:8080/debug&n=80&qps=-1\" | grep '\"200\": 80'\n# Check we can connect, and run a grpc QPS test against ourselves through fetch\n$CURL \"${BASE_FORTIO}fetch/localhost:8080$FORTIO_UI_PREFIX?url=localhost:8079&load=Start&qps=-1&json=on&n=100&runner=grpc\" | grep '\"SERVING\": 100'\n# Check we get the logo (need to remove the CR from raw headers)\nVERSION=$(docker exec $DOCKERNAME $FORTIO_BIN_PATH version)\nLOGO_TYPE=$($CURL \"${BASE_FORTIO}${VERSION}/static/img/${LOGO}\" 2>&1 >/dev/null | grep -i Content-Type: | tr -d '\\r'| awk '{print $2}')\nif [ \"$LOGO_TYPE\" != \"image/svg+xml\" ]; then\n  echo \"Unexpected content type for the logo: $LOGO_TYPE\"\n  exit 1\nfi\n# Check we can get the JS file through the proxy and it's > 50k\nSIZE=$($CURL \"${BASE_FORTIO}fetch/localhost:8080${FORTIO_UI_PREFIX}${VERSION}/static/js/Chart.min.js\" |wc -c)\nif [ \"$SIZE\" -lt 50000 ]; then\n  echo \"Too small fetch for js: $SIZE\"\n  exit 1\nfi\n# Check if max payload set to value passed in cmd line parameter -maxpayloadsizekb\nSIZE=$($CURL \"${BASE_URL}/echo?size=1048576\" |wc -c)\n# Payload is 8192 but between content chunking and headers fast client can return up to 8300 or so\nif [ \"$SIZE\" -lt 8191 ] || [ \"$SIZE\" -gt 8400 ]; then\n  echo \"-maxpayloadsizekb not working as expected\"\n  exit 1\nfi\n\n# Check main, sync, browse pages\nLOGOPATH=\"${VERSION}/static/img/${LOGO}\"\nfor p in \"\" browse sync; do\n  # Check the page doesn't 404s\n  $CURL ${BASE_FORTIO}${p}\n  # Check that page includes the logo\n  LOGOS=$($CURL ${BASE_FORTIO}${p} | { grep -c \"$LOGOPATH\" || true; })\n  if [ \"$LOGOS\" -ne 1 ]; then\n    echo \"*** Expected to find logo $LOGOPATH in the ${BASE_FORTIO}${p} page\"\n    exit 1\n  fi\ndone\n\n# Do a small http load using std client\ndocker exec $DOCKERNAME $FORTIO_BIN_PATH load -stdclient -qps 1 -t 2s -c 1 https://www.google.com/\n# and with normal and with custom headers\ndocker exec $DOCKERNAME $FORTIO_BIN_PATH load -H Foo:Bar -H Blah:Blah -qps 1 -t 2s -c 2 http://www.google.com/\n# Do a grpcping\ndocker exec $DOCKERNAME $FORTIO_BIN_PATH grpcping localhost\n# Do a grpcping to a scheme-prefixed destination. Fortio should append port number\n# Do a TLS grpcping. Fortio.org should use valid cert.\ndocker exec $DOCKERNAME $FORTIO_BIN_PATH grpcping https://grpc.fortio.org\ndocker exec $DOCKERNAME $FORTIO_BIN_PATH grpcping grpc.fortio.org # uses default non tls 8079\n# Do a local grpcping. Fortio should append default grpc port number to destination\ndocker exec $DOCKERNAME $FORTIO_BIN_PATH grpcping localhost\n# Do a local health ping\ndocker exec $DOCKERNAME $FORTIO_BIN_PATH grpcping -health localhost\ndocker exec $DOCKERNAME $FORTIO_BIN_PATH grpcping -health -healthservice ping localhost\n# Do a failing on purpose check\nif docker exec $DOCKERNAME $FORTIO_BIN_PATH grpcping -health -healthservice ping_down localhost; then\n  echo \"*** Expecting grpcping -health to ping_down have exit with error/non zero status\"\n  exit 1\nfi\n# pprof should be there, no 404/error\nPPROF_URL=\"$BASE_URL/debug/pprof/heap?debug=1\"\n$CURL \"$PPROF_URL\" | grep -i TotalAlloc # should find this in memory profile\n# creating dummy container to hold a volume for test certs due to remote docker bind mount limitation.\nDOCKERCURLID=$(docker run -d -v $TEST_CERT_VOL --net host --name $DOCKERSECVOLNAME docker.io/fortio/fortio.build:v77@sha256:03af2e7202d5364fb3424c9ef28f372702081ee809b7f8dfbb2a1b649b0b4c2c sleep 120)\n# while we have something with actual curl binary do\n# Test for h2c upgrade (#562)\ndocker exec $DOCKERSECVOLNAME /usr/bin/curl -v --http2 -m 10 -d foo42 http://localhost:8080/debug | tee >(cat 1>&2) | grep foo42\n# then resume the self signed CA tests\n# copying cert files into the certs volume of the dummy container\nfor f in ca.crt server.crt server.key; do docker cp \"$PWD/cert-tmp/$f\" \"$DOCKERSECVOLNAME:$TEST_CERT_VOL/$f\"; done\n# start server in secure grpc mode. uses non-default ports to avoid conflicts with fortio_server container.\n# mounts certs volume from dummy container.\nDOCKERSECID=$(docker run -d --ulimit nofile=$FILE_LIMIT --name $DOCKERSECNAME --volumes-from $DOCKERSECVOLNAME fortio/fortio:webtest server -cacert $TEST_CERT_VOL/ca.crt -cert $TEST_CERT_VOL/server.crt -key $TEST_CERT_VOL/server.key -grpc-port 8097 -http-port 8098 -redirect-port 8090 -loglevel $LOGLEVEL)\n# run secure grpcping and load tests\ndocker exec $DOCKERSECNAME $FORTIO_BIN_PATH grpcping -cacert $TEST_CERT_VOL/ca.crt localhost:8097\ndocker exec $DOCKERSECNAME $FORTIO_BIN_PATH load -grpc -cacert $TEST_CERT_VOL/ca.crt localhost:8097\n# switch to report mode\ndocker stop \"$DOCKERID\"\ndocker rm $DOCKERNAME\nDOCKERNAME=fortio_report\n# Even with pprof the report mode won't have pprof endpoint\nDOCKERID=$(docker run -d --ulimit nofile=$FILE_LIMIT --name $DOCKERNAME fortio/fortio:webtest report -loglevel $LOGLEVEL -pprof)\ndocker ps\nCURL=\"docker exec $DOCKERNAME $FORTIO_BIN_PATH curl -loglevel $LOGLEVEL\"\nif $CURL \"$PPROF_URL\" ; then\n  echo \"pprof should 404 on report mode!\"\n  exit 1\nelse\n  echo \"expected pprof failure to access in report mode - good !\"\nfi\n# base url should serve report only UI in report mode\n$CURL $BASE_URL | grep \"report only limited UI\"\n# we should get the tsv without error\n$CURL $BASE_URL/data/index.tsv\n# cleanup() will clean everything left even on success\n"
        },
        {
          "name": "bincommon",
          "type": "tree",
          "content": null
        },
        {
          "name": "cert-gen",
          "type": "blob",
          "size": 4.744140625,
          "content": "#!/usr/bin/env bash\n# note: Script uses -batch and -subj, instead of interactive prompts.\n# default environment variable values\nCERT_TEMP_DIR=./cert-tmp\nCA_CERT=$CERT_TEMP_DIR/ca.crt\nSVR_CERT=$CERT_TEMP_DIR/server.crt\nSVR_KEY=$CERT_TEMP_DIR/server.key\n# Use a different CA for client so we can test CA mismatch\nCLI_CA_CERT=$CERT_TEMP_DIR/clica.crt\nCLI_CERT=$CERT_TEMP_DIR/client.crt\nCLI_KEY=$CERT_TEMP_DIR/client.key\nSAN=DNS.1:localhost,IP.1:127.0.0.1\n\nset -e\n\n# Skip cert creation if the certs already exist\nif [ -d $CERT_TEMP_DIR ]\nthen\n    echo \"Certificate directory $CERT_TEMP_DIR exists. Skipping certificate creation.\"\n    exit\nfi\n\necho \"Creating test CA cert and client and server cert/key...\"\n\n# create cert directory and files\nmkdir -p $CERT_TEMP_DIR\ntouch index.txt\ntouch index.txt.attr\necho 1000 > serial\ncat <<EOF >$CERT_TEMP_DIR/openssl.conf\n[ ca ]\ndefault_ca = CA_default\n\n[ CA_default ]\ndir               = .\ncerts             = $CERT_TEMP_DIR\ncrl_dir           = $CERT_TEMP_DIR\nnew_certs_dir     = $CERT_TEMP_DIR\ndatabase          = ./index.txt\nserial            = ./serial\ncrlnumber         = ./crlnumber\ncrl               = ./crl/intermediate-ca.crl\ncrl_extensions    = crl_ext\ndefault_crl_days  = 30\ndefault_md        = sha256\n\nname_opt          = ca_default\ncert_opt          = ca_default\ndefault_days      = 375\npreserve          = no\npolicy            = policy_loose\n\n[ policy_loose ]\ncountryName             = optional\nstateOrProvinceName     = optional\nlocalityName            = optional\norganizationName        = optional\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[ req ]\ndefault_bits        = 4096\ndistinguished_name  = req_distinguished_name\nstring_mask         = utf8only\ndefault_md          = sha256\n\n[ req_distinguished_name ]\ncountryName                    = Country Name (2 letter code)\nstateOrProvinceName            = State or Province Name\nlocalityName                   = Locality Name\n0.organizationName             = Organization Name\norganizationalUnitName         = Organizational Unit Name\ncommonName                     = Common Name\n\n[ v3_ca ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true, pathlen:0\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[ usr_cert ]\nbasicConstraints = CA:FALSE\nnsCertType = client\nnsComment = \"OpenSSL Generated Client Certificate\"\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth\n\n[ server_cert ]\nbasicConstraints = CA:FALSE\nnsCertType = server\nnsComment = \"OpenSSL Generated Server Certificate\"\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer:always\nkeyUsage = critical, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = DNS.1:localhost,IP.1:127.0.0.1\nEOF\n\n# CA private key (unencrypted)\nopenssl genrsa -out $CERT_TEMP_DIR/ca.key 4096\n# Certificate Authority (self-signed certificate)\nopenssl req -config $CERT_TEMP_DIR/openssl.conf -new -x509 -days 3650 -sha256 -key $CERT_TEMP_DIR/ca.key -extensions v3_ca -out $CA_CERT -subj \"/CN=fake-server-ca\"\n\n# Server private key (unencrypted)\nopenssl genrsa -out $SVR_KEY 2048\n# Server certificate signing request (CSR)\nopenssl req -config $CERT_TEMP_DIR/openssl.conf -new -sha256 -key $SVR_KEY -out $CERT_TEMP_DIR/server.csr -subj \"/CN=fake-server\"\n# Certificate Authority signs CSR to grant a certificate\nopenssl ca -batch -config $CERT_TEMP_DIR/openssl.conf -extensions server_cert -days 365 -notext -md sha256 -in $CERT_TEMP_DIR/server.csr -out $SVR_CERT -cert $CA_CERT -keyfile $CERT_TEMP_DIR/ca.key\n\n# Client CA private key (unencrypted)\nopenssl genrsa -out $CERT_TEMP_DIR/clica.key 4096\n# Certificate Authority (self-signed certificate)\nopenssl req -config $CERT_TEMP_DIR/openssl.conf -new -x509 -days 3650 -sha256 -key $CERT_TEMP_DIR/clica.key -extensions v3_ca -out $CLI_CA_CERT -subj \"/CN=fake-client-ca\"\n\n# Client private key (unencrypted)\nopenssl genrsa -out $CLI_KEY 2048\n# Client certificate signing request (CSR)\nopenssl req -config $CERT_TEMP_DIR/openssl.conf -new -sha256 -key $CLI_KEY -out $CERT_TEMP_DIR/client.csr -subj \"/CN=fake-client\"\n# Certificate Authority signs CSR to grant a certificate\nopenssl ca -batch -config $CERT_TEMP_DIR/openssl.conf -extensions usr_cert -days 365 -notext -md sha256 -in $CERT_TEMP_DIR/client.csr -out $CLI_CERT -cert $CLI_CA_CERT -keyfile $CERT_TEMP_DIR/clica.key\n\n# Remove unneeded files\nrm -f index.* serial* $CERT_TEMP_DIR/*ca.key $CERT_TEMP_DIR/*.csr $CERT_TEMP_DIR/*.pem $CERT_TEMP_DIR/openssl.conf\n\necho \"*******************************************************************\"\necho \"WARNING: Generated credentials are self-signed and should be used for testing purposes only.\"\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli_test.go",
          "type": "blob",
          "size": 0.33984375,
          "content": "package main\n\nimport (\n\t\"os\"\n\t\"testing\"\n\n\t\"fortio.org/testscript\"\n)\n\nfunc TestMain(m *testing.M) {\n\t// Runs the cli_test.txtar (https://github.com/fortio/testscript#testscript) tests.\n\tos.Exit(testscript.RunMain(m, map[string]func() int{\n\t\t\"fortio\": Main,\n\t}))\n}\n\nfunc TestDNSPing(t *testing.T) {\n\ttestscript.Run(t, testscript.Params{Dir: \"./\"})\n}\n"
        },
        {
          "name": "cli_test.txtar",
          "type": "blob",
          "size": 0.640625,
          "content": "# testscript framework tests for fortio's main binary / command line\n# Eventually we can convert most of Webtest.sh to here (except parts specifically about testing the Docker image)\n\n# Basic usage test\n!fortio\n!stdout .\nstderr 'Missing command argument'\n\n# (short) version\nfortio version\nstdout '^dev$'\n!stderr .\n\n# (long) version\nfortio buildinfo\nstdout '^dev  go'\nstdout 'path\tfortio.org/fortio'\n!stderr .\n\n# Content-Type override through headers\nfortio curl -H 'content-TYPE: foo/bar' -H 'xyz: bar blah' https://debug.fortio.org/test-path\nstderr 'HTTP/1.1 200 OK'\nstdout 'Xyz: bar blah'\nstdout 'Content-Type: foo/bar'\nstdout 'POST /test-path HTTP/1.1'\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.271484375,
          "content": "coverage:\n  range: 60..99\n  precision: 1         # how many decimal places to display in the UI: 0 <= value <= 4\n  round: nearest       # how coverage is rounded: down/up/nearest\n  ignore:              # files and folders that will be removed during processing\n    - \"**.pb.go\"\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "dflag",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "echosrv",
          "type": "tree",
          "content": null
        },
        {
          "name": "fcurl",
          "type": "tree",
          "content": null
        },
        {
          "name": "fgrpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fhttp",
          "type": "tree",
          "content": null
        },
        {
          "name": "fnet",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.7978515625,
          "content": "module fortio.org/fortio\n\n// As a library the current version of fortio works with 1.18 (first version with generics) but tests use 1.19 features\n// And we're started to use the new features in 1.22 and 1.23\n// (in part forced by grpc). we force 1.22.3 because 1.23.2 has pretty severe bug (macos) even though I think \"1.23\" with\n// no patch level would be better for the go.mod file.\ngo 1.23.3\n\n// When needed, ie to force download of July 2nd 2024 go security and bug fix release,\n// as 1.22.5 docker images were not there yet and ditto for action/setup-go\n// toolchain go1.22.5\n// But see also https://github.com/golang/go/issues/66175#issuecomment-2010343876\n\nrequire (\n\tfortio.org/assert v1.2.1\n\tfortio.org/cli v1.9.2\n\tfortio.org/dflag v1.7.3\n\tfortio.org/log v1.17.1\n\tfortio.org/safecast v1.0.0\n\tfortio.org/scli v1.15.3\n\tfortio.org/sets v1.2.0\n\tfortio.org/testscript v0.3.2\n\tfortio.org/version v1.0.4\n\tgithub.com/golang/protobuf v1.5.4\n\tgithub.com/google/uuid v1.6.0\n\tgolang.org/x/net v0.31.0\n\tgoogle.golang.org/grpc v1.68.0\n)\n\n// Local dev of dependencies changes\n//replace (\n//\tfortio.org/assert => ../assert\n// \tfortio.org/cli => ../cli\n// \tfortio.org/dflag => ../dflag\n// \tfortio.org/log => ../log\n// \tfortio.org/scli => ../scli\n// \tfortio.org/version => ../version\n//)\n\nrequire (\n\tfortio.org/struct2env v0.4.1 // indirect\n\tgithub.com/fsnotify/fsnotify v1.7.0 // indirect\n\tgithub.com/kortschak/goroutine v1.1.2 // indirect\n\tgolang.org/x/crypto/x509roots/fallback v0.0.0-20240904212608-c9da6b9a4008 // indirect\n\tgolang.org/x/exp v0.0.0-20240904232852-e7e105dedf7e // indirect\n\tgolang.org/x/sys v0.27.0 // indirect\n\tgolang.org/x/text v0.20.0 // indirect\n\tgolang.org/x/tools v0.24.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 // indirect\n\tgoogle.golang.org/protobuf v1.34.2 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.96484375,
          "content": "fortio.org/assert v1.2.1 h1:48I39urpeDj65RP1KguF7akCjILNeu6vICiYMEysR7Q=\nfortio.org/assert v1.2.1/go.mod h1:039mG+/iYDPO8Ibx8TrNuJCm2T2SuhwRI3uL9nHTTls=\nfortio.org/cli v1.9.2 h1:17eJ8QZPjXHcLBpeCe0QMO/0fj5Bw0ZTxVgL7V9jOqc=\nfortio.org/cli v1.9.2/go.mod h1:7r55OoTV8NXcTvJT4boWk8s3I2LP6TMZh/0LLMJEYw0=\nfortio.org/dflag v1.7.3 h1:yws+v+/fJ67bYgrgcWpLtgdZPEWkYuwdfqz/WyQ8UXo=\nfortio.org/dflag v1.7.3/go.mod h1:O1Pk4lKRolw9wwAGyjTo8IsNyqqNRQGKxPOfpOElMqM=\nfortio.org/log v1.17.1 h1:YQoGyZBnXTVIs77/nZw7BppwSOIamP3I092PGBenBZs=\nfortio.org/log v1.17.1/go.mod h1:t58Spg9njjymvRioh5F6qKGSupEsnMjXLGWIS1i3khE=\nfortio.org/safecast v1.0.0 h1:dr3131WPX8iS1pTf76+39WeXbTrerDYLvi9s7Oi3wiY=\nfortio.org/safecast v1.0.0/go.mod h1:xZmcPk3vi4kuUFf+tq4SvnlVdwViqf6ZSZl91Jr9Jdg=\nfortio.org/scli v1.15.3 h1:XZYONPupGOd1Q68G4aq0vWg9obw0M57sC4snkyiab9w=\nfortio.org/scli v1.15.3/go.mod h1:cWJJbXObkF+GsbtPqxE60GFctllOANYS+Yp9PJK0xK8=\nfortio.org/sets v1.2.0 h1:FBfC7R2xrOJtkcioUbY6WqEzdujuBoZRbSdp1fYF4Kk=\nfortio.org/sets v1.2.0/go.mod h1:J2BwIxNOLWsSU7IMZUg541kh3Au4JEKHrghVwXs68tE=\nfortio.org/struct2env v0.4.1 h1:rJludAMO5eBvpWplWEQNqoVDFZr4RWMQX7RUapgZyc0=\nfortio.org/struct2env v0.4.1/go.mod h1:lENUe70UwA1zDUCX+8AsO663QCFqYaprk5lnPhjD410=\nfortio.org/testscript v0.3.2 h1:ks5V+Y6H6nmeGqnVlZuLdiFwpqXemDkEnyGgCZa/ZNA=\nfortio.org/testscript v0.3.2/go.mod h1:Z2kUvEDHYETV8FLxsdA6zwSZ8sZUiTNJh2Dw5c4a3Pg=\nfortio.org/version v1.0.4 h1:FWUMpJ+hVTNc4RhvvOJzb0xesrlRmG/a+D6bjbQ4+5U=\nfortio.org/version v1.0.4/go.mod h1:2JQp9Ax+tm6QKiGuzR5nJY63kFeANcgrZ0osoQFDVm0=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/kortschak/goroutine v1.1.2 h1:lhllcCuERxMIK5cYr8yohZZScL1na+JM5JYPRclWjck=\ngithub.com/kortschak/goroutine v1.1.2/go.mod h1:zKpXs1FWN/6mXasDQzfl7g0LrGFIOiA6cLs9eXKyaMY=\ngolang.org/x/crypto/x509roots/fallback v0.0.0-20240904212608-c9da6b9a4008 h1:vKHSxFhPLnBEYu9R8DcQ4gXq9EqU0VVhC9pq9wmtYsg=\ngolang.org/x/crypto/x509roots/fallback v0.0.0-20240904212608-c9da6b9a4008/go.mod h1:kNa9WdvYnzFwC79zRpLRMJbdEFlhyM5RPFBBZp/wWH8=\ngolang.org/x/exp v0.0.0-20240904232852-e7e105dedf7e h1:I88y4caeGeuDQxgdoFPUq097j7kNfw6uvuiNxUBfcBk=\ngolang.org/x/exp v0.0.0-20240904232852-e7e105dedf7e/go.mod h1:akd2r19cwCdwSwWeIdzYQGa/EZZyqcOdwWiwj5L5eKQ=\ngolang.org/x/net v0.31.0 h1:68CPQngjLL0r2AlUKiSxtQFKvzRVbnzLwMUn5SzcLHo=\ngolang.org/x/net v0.31.0/go.mod h1:P4fl1q7dY2hnZFxEk4pPSkDHF+QqjitcnDjUQyMM+pM=\ngolang.org/x/sys v0.27.0 h1:wBqf8DvsY9Y/2P8gAfPDEYNuS30J4lPHJxXSb/nJZ+s=\ngolang.org/x/sys v0.27.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.20.0 h1:gK/Kv2otX8gz+wn7Rmb3vT96ZwuoxnQlY+HlJVj7Qug=\ngolang.org/x/text v0.20.0/go.mod h1:D4IsuqiFMhST5bX19pQ9ikHC2GsaKyk/oF+pn3ducp4=\ngolang.org/x/tools v0.24.0 h1:J1shsA93PJUEVaUSaay7UXAyE8aimq3GW0pjlolpa24=\ngolang.org/x/tools v0.24.0/go.mod h1:YhNqVBIfWHdzvTLs0d8LCuMhkKUgSUKldakyV7W/WDQ=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 h1:pPJltXNxVzT4pK9yD8vR9X75DaWYYmLGMsEvBfFQZzQ=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:UqMtugtsSgubUsoxbuAoiCXvqvErP7Gf0so0mK9tHxU=\ngoogle.golang.org/grpc v1.68.0 h1:aHQeeJbo8zAkAa3pRzrVjZlbz6uSfeOXlJNQM0RAbz0=\ngoogle.golang.org/grpc v1.68.0/go.mod h1:fmSPC5AsjSBCK54MyHRx48kpOti1/jRfOlwEWywNjWA=\ngoogle.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=\ngoogle.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=\n"
        },
        {
          "name": "histogram",
          "type": "tree",
          "content": null
        },
        {
          "name": "jrpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.9384765625,
          "content": "// Copyright 2022 Fortio Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage main\n\nimport \"fortio.org/fortio/cli\"\n\n// This file content moved to cli/fortio_main.go so it can be reused in variants of fortio\n// like fortiotel (fortio with opentelemetry)\n\nfunc main() {\n\tcli.FortioMain(nil /* no hook needed */)\n}\n\n// Same as real above but for testscript/txtar tests.\nfunc Main() int {\n\tcli.FortioMain(nil /* no hook needed */)\n\treturn 0\n}\n"
        },
        {
          "name": "metrics",
          "type": "tree",
          "content": null
        },
        {
          "name": "periodic",
          "type": "tree",
          "content": null
        },
        {
          "name": "rapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "tree",
          "content": null
        },
        {
          "name": "stats",
          "type": "tree",
          "content": null
        },
        {
          "name": "tcprunner",
          "type": "tree",
          "content": null
        },
        {
          "name": "udprunner",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}