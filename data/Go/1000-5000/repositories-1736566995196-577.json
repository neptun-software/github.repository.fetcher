{
  "metadata": {
    "timestamp": 1736566995196,
    "page": 577,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lonng/nano",
      "stars": 2922,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2998046875,
          "content": "# Binaries for programs and plugins\r\n*.exe\r\n*.dll\r\n*.so\r\n*.dylib\r\n\r\n# Test binary, build with `go test -c`\r\n*.test\r\n\r\n# Output of the go coverage tool, specifically when used with LiteIDE\r\n*.out\r\n\r\n# Project-local glide cache, RE: https://github.com/Masterminds/glide/issues/736\r\n.glide/\r\n\r\n.idea/\r\n.vscode/"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.9296875,
          "content": "# How to contribute\n\nThis document outlines some of the conventions on development workflow, commit\nmessage formatting, contact points and other resources to make it easier to get\nyour contribution accepted.\n\n## Getting started\n\n- Fork the repository on GitHub.\n- Read the README.md for build instructions.\n- Play with the project, submit bugs, submit patches!\n\n## Building Nano\n\nDeveloping Nano requires:\n\n* [Go 1.12](http://golang.org/doc/code.html)\n* An internet connection to download the dependencies\n\nSimply run `make` to build the program.\n\n```sh\nmake\n```\n\n### Running tests\n\nThis project contains unit tests and integration tests with coverage collection.\nSee [tests/README.md](./tests/README.md) for how to execute and add tests.\n\n### Updating dependencies\n\nFailpoint manages dependencies using [Go module](https://github.com/golang/go/wiki/Modules).\nTo add or update a dependency, either\n\n* Use the `go mod edit` command to change the dependency, or\n* Edit `go.mod` and then run `make update` to update the checksum.\n\n## Contribution flow\n\nThis is a rough outline of what a contributor's workflow looks like:\n\n- Create a topic branch from where you want to base your work. This is usually `master`.\n- Make commits of logical units and add test case if the change fixes a bug or adds new functionality.\n- Run tests and make sure all the tests are passed.\n- Make sure your commit messages are in the proper format (see below).\n- Push your changes to a topic branch in your fork of the repository.\n- Submit a pull request.\n- Your PR must receive LGTMs from two maintainers.\n\nThanks for your contributions!\n\n### Code style\n\nThe coding style suggested by the Golang community is used in `failpoint`.\nSee the [style doc](https://github.com/golang/go/wiki/CodeReviewComments) for details.\n\nPlease follow this style to makeg `failpoint` easy to review, maintain and develop.\n\n### Format of the Commit Message\n\nWe follow a rough convention for commit messages that is designed to answer two\nquestions: what changed and why. The subject line should feature the what and\nthe body of the commit should describe the why.\n\n```\nrestore: add comment for variable declaration\n\nImprove documentation.\n```\n\nThe format can be described more formally as follows:\n\n```\n<subsystem>: <what changed>\n<BLANK LINE>\n<why this change was made>\n<BLANK LINE>\n<footer>(optional)\n```\n\nThe first line is the subject and should be no longer than 70 characters, the\nsecond line is always blank, and other lines should be wrapped at 80 characters.\nThis allows the message to be easier to read on GitHub as well as in various\ngit tools.\n\nIf the change affects more than one subsystem, you can use comma to separate them like `code,examples:`.\n\nIf the change affects many subsystems, you can use ```*``` instead, like ```*:```.\n\nFor the why part, if no specific reason for the change,\nyou can use one of some generic reasons like \"Improve documentation.\",\n\"Improve performance.\", \"Improve robustness.\", \"Improve test coverage.\"\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "Copyright (c) 2017 nano Authors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE."
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 0.16796875,
          "content": "# Maintainers\n\nThis file lists who are the core maintainers of the nano project.\n\n## Project Lead\n\n* [Lonng](https://github.com/lonng)\n\n## Other Core Maintainers\n\n* None\n\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2998046875,
          "content": "### Makefile for nano\nGO        := GO111MODULE=on go\nGOBUILD   := GO111MODULE=on CGO_ENABLED=0 $(GO) build\n\nARCH      := \"`uname -s`\"\nLINUX     := \"Linux\"\nMAC       := \"Darwin\"\n\n\n.PHONY: test proto\n\ntest:\n\tgo test -v ./...\n\nproto:\n\t@cd ./cluster/clusterpb/proto/ && protoc --go_out=plugins=grpc:../ *.proto\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4541015625,
          "content": "# Nano [![Build Status][1]][2] [![GoDoc][3]][4] [![Go Report Card][5]][6] [![MIT licensed][7]][8] \n\n[1]: https://github.com/lonng/nano/actions/workflows/go.yml/badge.svg?branch=master\n[2]: https://github.com/lonng/nano/actions/workflows/go.yml\n[3]: https://godoc.org/github.com/lonng/nano?status.svg\n[4]: https://godoc.org/github.com/lonng/nano\n[5]: https://goreportcard.com/badge/github.com/lonng/nano\n[6]: https://goreportcard.com/report/github.com/lonng/nano\n[7]: https://img.shields.io/badge/license-MIT-blue.svg\n[8]: LICENSE\n\nNano is an easy to use, fast, lightweight game server networking library for Go.\nIt provides a core network architecture and a series of tools and libraries that\ncan help developers eliminate boring duplicate work for common underlying logic.\nThe goal of nano is to improve development efficiency by eliminating the need to\nspend time on repetitious network related programming.\n\nNano was designed for server-side applications like real-time games, social games,\nmobile games, etc of all sizes.\n\nJoin to Discord: [Nano Community](https://discord.gg/eHEDrBH5PV) \n\n## How to build a system with `Nano`\n\n#### What does a `Nano` application look like?\n\nThe simplest \"nano\" application as shown in the following figure, you can make powerful applications by combining different components.\n\n![Application](media/application.png)\n\nIn fact, the `nano` application is a collection of  [Component ](./docs/get_started.md#component) , and a component is a bundle of  [Handler](./docs/get_started.md#handler), once you register a component to nano, nano will register all methods that can be converted to `Handler` to nano service container. Service was accessed by `Component.Handler`, and the handler will be called while client request. The handler will receive two parameters while handling a message:\n  - `*session.Session`: corresponding a client that apply this request or notify.\n  - `*protocol.FooBar`: the payload of the request.\n\nWhile you had processed your logic, you can response or push message to the client by `session.Response(payload)` and `session.Push('eventName', payload)`, or returns error when some unexpected data received.\n\n#### How to build distributed system with `Nano`\n\nNano contains built-in distributed system solution, and make you creating a distributed game server easily.\n\nSee: [The distributed chat demo](https://github.com/lonng/nano/tree/master/examples/cluster)\n\nThe Nano will remain simple, but you can perform any operations in the component and get the desired goals. You can startup a group of `Nano` application as agent to dispatch message to backend servers.\n\n#### How to execute the asynchronous task\n\n```golang\nfunc (manager *PlayerManager) Login(s *session.Session, msg *ReqPlayerLogin) error {\n    var onDBResult = func(player *Player) {\n        manager.players = append(manager.players, player)\n        s.Push(\"PlayerSystem.LoginSuccess\", &ResPlayerLogin)\n    }\n    \n    // run slow task in new gorontine\n    go func() {\n        player, err := db.QueryPlayer(msg.PlayerId) // ignore error in demo\n        // handle result in main logical gorontine\n        nano.Invoke(func(){ onDBResult(player) })\n    }\n    return nil\n}\n```\n\n## Documents\n\n- English\n    + [How to build your first nano application](./docs/get_started.md)\n    + [Route compression](./docs/route_compression.md)\n    + [Communication protocol](./docs/communication_protocol.md)\n    + [Design patterns](./docs/design_patterns.md)\n    + [API Reference(Server)](https://godoc.org/github.com/lonnng/nano)\n    + [How to integrate `Lua` into `Nano` component(incomplete)](.)\n\n- 简体中文\n    + [如何构建你的第一个nano应用](./docs/get_started_zh_CN.md)\n    + [路由压缩](./docs/route_compression_zh_CN.md)\n    + [通信协议](./docs/communication_protocol_zh_CN.md)\n    + [API参考(服务器)](https://godoc.org/github.com/lonnng/nano)\n    + [如何将`lua`脚本集成到`nano`组件中(未完成)](.)\n\n## Resources\n\n- Javascript\n  + [nano-websocket-client](https://github.com/lonnng/nano-websocket-client)\n  + [nano-egret-client](https://github.com/lonnng/nano-egret-client)\n\n- Typescript/cocos-creator\n  + [nano-client-ts](https://github.com/adoontheway/nano-client-ts)\n\n- Demo\n  + [Implement a chat room in 100 lines with nano and WebSocket](./examples/demo/chat)\n  + [Tadpole demo](./examples/demo/tadpole)\n  + [四川麻将, 血战到底(三人模式/四人模式)完整项目实例](https://github.com/lonnng/nanoserver)\n\n## Community\n\n- QQGroup: [289680347](https://jq.qq.com/?_wv=1027&k=4EMMaha)\n- Reddit: [nanolabs](https://www.reddit.com/r/nanolabs/)\n\n## Successful cases\n\n- [空来血战](https://fir.im/tios)\n\n## Go version\n\n`> go1.8`\n\n## Installation\n\n```bash\ngo get github.com/lonng/nano\n\n# dependencies\ngo get -u github.com/pingcap/check\ngo get -u github.com/pingcap/errors\ngo get -u github.com/urfave/cli\n\ngo get -u google.golang.org/protobuf/proto\ngo get -u github.com/gorilla/websocket\ngo get -u google.golang.org/grpc\n```\n\n## Protocol Buffers\n```bash\n# protoc\n# download form: https://github.com/protocolbuffers/protobuf/releases\n# protoc-gen-go\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n# delve\ngo install github.com/go-delve/delve/cmd/dlv@latest\n```\n\n## Test\n```bash\ngo test -v ./...\n```\n\n## Benchmark\n\n```bash\n# Case:   PingPong\n# OS:     Windows 10\n# Device: i5-6500 3.2GHz 4 Core/1000-Concurrent   => IOPS 11W(Average)\n# Other:  ...\n\ncd ./benchmark/io\ngo test -v -tags \"benchmark\"\n```\n\n## License\n\n[MIT License](./LICENSE)\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cluster",
          "type": "tree",
          "content": null
        },
        {
          "name": "component",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "errors.go",
          "type": "blob",
          "size": 1.44921875,
          "content": "// Copyright (c) nano Authors. All Rights Reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npackage nano\n\nimport \"errors\"\n\n// Errors that could be occurred during message handling.\nvar (\n\tErrCloseClosedGroup   = errors.New(\"close closed group\")\n\tErrClosedGroup        = errors.New(\"group closed\")\n\tErrMemberNotFound     = errors.New(\"member not found in the group\")\n\tErrSessionDuplication = errors.New(\"session has existed in the current group\")\n)\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.96484375,
          "content": "module github.com/lonng/nano\n\ngo 1.12\n\nrequire (\n\tgithub.com/bwmarrin/snowflake v0.3.0 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.0 // indirect\n\tgithub.com/google/uuid v1.2.0 // indirect\n\tgithub.com/gorilla/websocket v1.4.2 // indirect\n\tgithub.com/pingcap/check v0.0.0-20200212061837-5e12011dc712 // indirect\n\tgithub.com/pingcap/errors v0.11.4 // indirect\n\tgithub.com/pingcap/log v0.0.0-20210625125904-98ed8e2eb1c7 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/urfave/cli v1.22.5 // indirect\n\tgo.uber.org/atomic v1.8.0 // indirect\n\tgo.uber.org/multierr v1.7.0 // indirect\n\tgo.uber.org/zap v1.18.1 // indirect\n\tgolang.org/x/net v0.0.0-20210614182718-04defd469f4e // indirect\n\tgolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c // indirect\n\tgoogle.golang.org/genproto v0.0.0-20210630183607-d20f26d13c79 // indirect\n\tgoogle.golang.org/grpc v1.39.0 // indirect\n\tgoogle.golang.org/protobuf v1.27.1 // indirect\n\thonnef.co/go/tools v0.2.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 21.7705078125,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ngithub.com/BurntSushi/toml v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=\ngithub.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=\ngithub.com/bwmarrin/snowflake v0.3.0 h1:xm67bEhkKh6ij1790JB83OujPR5CzNe8QuQqAgISZN0=\ngithub.com/bwmarrin/snowflake v0.3.0/go.mod h1:NdZxfVWX+oR6y2K0o6qAYv6gIOP9rjG0/E9WsDpxqwE=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\ngithub.com/cncf/xds/go v0.0.0-20210312221358-fbca930ec8ed/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0 h1:EoUDS0afbrsXAZ9YQ9jdu/mZ2sXgT1/2yyNng4PGlyM=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20201210154907-fd9021fe5dad/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20210217033140-668b12f5399d/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20210512163311-63b5d3c536b0/go.mod h1:hliV/p42l8fGbc6Y9bQ70uLwIvmJyVE5k4iMKlh8wCQ=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.2.0 h1:qJYtXnJRWmpe7m/3XlyhrsLrEURqHRM2kxzoxXqyUDs=\ngithub.com/google/uuid v1.2.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\ngithub.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/pingcap/check v0.0.0-20190102082844-67f458068fc8/go.mod h1:B1+S9LNcuMyLH/4HMTViQOJevkGiik3wW2AN9zb2fNQ=\ngithub.com/pingcap/check v0.0.0-20200212061837-5e12011dc712 h1:R8gStypOBmpnHEx1qi//SaqxJVI4inOqljg/Aj5/390=\ngithub.com/pingcap/check v0.0.0-20200212061837-5e12011dc712/go.mod h1:PYMCGwN0JHjoqGr3HrZoD+b8Tgx8bKnArhSq8YVzUMc=\ngithub.com/pingcap/errors v0.11.0/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=\ngithub.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=\ngithub.com/pingcap/errors v0.11.4/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=\ngithub.com/pingcap/log v0.0.0-20191012051959-b742a5d432e9 h1:AJD9pZYm72vMgPcQDww9rkZ1DnWfl0pXV3BOWlkYIjA=\ngithub.com/pingcap/log v0.0.0-20191012051959-b742a5d432e9/go.mod h1:4rbK1p9ILyIfb6hU7OG2CiWSqMXnp3JMbiaVJ6mvoY8=\ngithub.com/pingcap/log v0.0.0-20210625125904-98ed8e2eb1c7 h1:k2BbABz9+TNpYRwsCCFS8pEEnFVOdbgEjL/kTlLuzZQ=\ngithub.com/pingcap/log v0.0.0-20210625125904-98ed8e2eb1c7/go.mod h1:8AanEdAHATuRurdGxZXBz0At+9avep+ub7U1AGYLIMM=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=\ngithub.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0 h1:PdmoCO6wvbs+7yrJyMORt4/BmY5IYyJwS/kOiWx8mHo=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/urfave/cli v1.22.5 h1:lNq9sAHXK2qfdI8W+GRItjCEkI+2oR4d+MEHy1CKXoU=\ngithub.com/urfave/cli v1.22.5/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngo.opentelemetry.io/proto/otlp v0.7.0/go.mod h1:PqfVotwruBrMGOCsRd/89rSnXhoiJIqeYNgFYFoEGnI=\ngo.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/atomic v1.5.0 h1:OI5t8sDa1Or+q8AeE+yKeB/SDYioSHAgcVljj9JIETY=\ngo.uber.org/atomic v1.5.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/atomic v1.7.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/atomic v1.8.0 h1:CUhrE4N1rqSE6FM9ecihEjRkLQu8cDfgDyoOs83mEY4=\ngo.uber.org/atomic v1.8.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/goleak v1.1.10/go.mod h1:8a7PlsEVH3e/a/GLqe5IIrQx6GzcnRmZEufDUTk4A7A=\ngo.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=\ngo.uber.org/multierr v1.3.0/go.mod h1:VgVr7evmIr6uPjLBxg28wmKNXyqE9akIJ5XnfpiKl+4=\ngo.uber.org/multierr v1.4.0 h1:f3WCSC2KzAcBXGATIxAB1E2XuCpNU255wNKZ505qi3E=\ngo.uber.org/multierr v1.4.0/go.mod h1:VgVr7evmIr6uPjLBxg28wmKNXyqE9akIJ5XnfpiKl+4=\ngo.uber.org/multierr v1.6.0/go.mod h1:cdWPpRnG4AhwMwsgIHip0KRBQjJy5kYEpYjJxpXp9iU=\ngo.uber.org/multierr v1.7.0 h1:zaiO/rmgFjbmCXdSYJWQcdvOCsthmdaHfr3Gm2Kx4Ec=\ngo.uber.org/multierr v1.7.0/go.mod h1:7EAYxJLBy9rStEaz58O2t4Uvip6FSURkq8/ppBp95ak=\ngo.uber.org/tools v0.0.0-20190618225709-2cfd321de3ee h1:0mgffUl7nfd+FpvXMVz4IDEaUSmT1ysygQC7qYo7sG4=\ngo.uber.org/tools v0.0.0-20190618225709-2cfd321de3ee/go.mod h1:vJERXedbb3MVM5f9Ejo0C68/HhF8uaILCdgjnY+goOA=\ngo.uber.org/zap v1.9.1/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.12.0 h1:dySoUQPFBGj6xwjmBzageVL8jGi8uxc6bEmJQjA06bw=\ngo.uber.org/zap v1.12.0/go.mod h1:zwrFLgMcdUuIBviXEYEH1YKNaOBnKXsx2IPda5bBwHM=\ngo.uber.org/zap v1.18.1 h1:CSUJ2mjFszzEWt4CdKISEuChVIXGBn3lAPwkRGyVrc4=\ngo.uber.org/zap v1.18.1/go.mod h1:xg/QME4nWcxGxrpdeYfq7UvYrLh66cuVKdrbD1XF/NI=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20210508222113-6edffad5e616 h1:VLliZ0d+/avPrXXH+OakdXhpJuEoBZuwh1m2j7U6Iug=\ngolang.org/x/lint v0.0.0-20210508222113-6edffad5e616/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.0.0-20210614182718-04defd469f4e h1:XpT3nA5TvE525Ne3hInMh6+GETgn27Zfm9dxsThnX2Q=\ngolang.org/x/net v0.0.0-20210614182718-04defd469f4e/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c h1:F1jZWGFhYfh0Ci55sIpILtKKK8p3i2/krTr0H1rg74I=\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6 h1:aRYxNxv6iGQlyVaZmk6ZgYEDa+Jg18DxebPSrd6bg1M=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191107010934-f79515f33823/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191108193012-7d206e10da11/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=\ngolang.org/x/tools v0.1.4 h1:cVngSRcfgyZCzys3KYOpCFa+4dqX/Oub9tAq00ttGVs=\ngolang.org/x/tools v0.1.4/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/genproto v0.0.0-20210630183607-d20f26d13c79 h1:s1jFTXJryg4a1mew7xv03VZD8N9XjxFhk1o4Js4WvPQ=\ngoogle.golang.org/genproto v0.0.0-20210630183607-d20f26d13c79/go.mod h1:yiaVoXHpRzHGyxV3o4DktVWY4mSUErTKaeEOq6C3t3U=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=\ngoogle.golang.org/grpc v1.36.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.38.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=\ngoogle.golang.org/grpc v1.39.0 h1:Klz8I9kdtkIN6EpHHUOMLCYhTn/2WAe5a0s1hcBkdTI=\ngoogle.golang.org/grpc v1.39.0/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnDzfrE=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.27.1 h1:SnqbnDw1V7RiZcXPx5MEeqPv2s79L9i7BJUlG/+RurQ=\ngoogle.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/natefinch/lumberjack.v2 v2.0.0 h1:1Lc07Kr7qY4U2YPouBjpCLxpiyxIVoxqXgkXLknAOE8=\ngopkg.in/natefinch/lumberjack.v2 v2.0.0/go.mod h1:l0ndWWf7gzL7RNwBG7wST/UCcT4T24xpD6X8LsfU/+k=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.1-2019.2.3 h1:3JgtbtFHMiCmsznwGVTUWbgGov+pVqnlf1dEJTNAXeM=\nhonnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=\nhonnef.co/go/tools v0.2.0 h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\nhonnef.co/go/tools v0.2.0/go.mod h1:lPVVZ2BS5TfnjLyizF7o7hv7j9/L+8cZY2hLyjP9cGY=\n"
        },
        {
          "name": "group.go",
          "type": "blob",
          "size": 5.6103515625,
          "content": "// Copyright (c) nano Authors. All Rights Reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npackage nano\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\t\"github.com/lonng/nano/internal/env\"\n\t\"github.com/lonng/nano/internal/log\"\n\t\"github.com/lonng/nano/internal/message\"\n\t\"github.com/lonng/nano/session\"\n)\n\nconst (\n\tgroupStatusWorking = 0\n\tgroupStatusClosed  = 1\n)\n\n// SessionFilter represents a filter which was used to filter session when Multicast,\n// the session will receive the message while filter returns true.\ntype SessionFilter func(*session.Session) bool\n\n// Group represents a session group which used to manage a number of\n// sessions, data send to the group will send to all session in it.\ntype Group struct {\n\tmu       sync.RWMutex\n\tstatus   int32                      // channel current status\n\tname     string                     // channel name\n\tsessions map[int64]*session.Session // session id map to session instance\n}\n\n// NewGroup returns a new group instance\nfunc NewGroup(n string) *Group {\n\treturn &Group{\n\t\tstatus:   groupStatusWorking,\n\t\tname:     n,\n\t\tsessions: make(map[int64]*session.Session),\n\t}\n}\n\n// FindMember Find a member with customer filter\nfunc (c *Group) FindMember(filter func(ses *session.Session) bool) (*session.Session, error) {\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\tfor _, s := range c.sessions {\n\t\tif filter(s) {\n\t\t\treturn s, nil\n\t\t}\n\t}\n\n\treturn nil, ErrMemberNotFound\n}\n\n// Member returns specified UID's session\nfunc (c *Group) Member(uid int64) (*session.Session, error) {\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\tfor _, s := range c.sessions {\n\t\tif s.UID() == uid {\n\t\t\treturn s, nil\n\t\t}\n\t}\n\n\treturn nil, ErrMemberNotFound\n}\n\n// Members returns all member's UID in current group\nfunc (c *Group) Members() []int64 {\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\tvar members []int64\n\tfor _, s := range c.sessions {\n\t\tmembers = append(members, s.UID())\n\t}\n\n\treturn members\n}\n\n// Multicast  push  the message to the filtered clients\nfunc (c *Group) Multicast(route string, v interface{}, filter SessionFilter) error {\n\tif c.isClosed() {\n\t\treturn ErrClosedGroup\n\t}\n\n\tdata, err := message.Serialize(v)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif env.Debug {\n\t\tlog.Println(fmt.Sprintf(\"Multicast %s, Data=%+v\", route, v))\n\t}\n\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\tfor _, s := range c.sessions {\n\t\tif !filter(s) {\n\t\t\tcontinue\n\t\t}\n\t\tif err = s.Push(route, data); err != nil {\n\t\t\tlog.Println(err.Error())\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// Broadcast push  the message(s) to  all members\nfunc (c *Group) Broadcast(route string, v interface{}) error {\n\tif c.isClosed() {\n\t\treturn ErrClosedGroup\n\t}\n\n\tdata, err := message.Serialize(v)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif env.Debug {\n\t\tlog.Println(fmt.Sprintf(\"Broadcast %s, Data=%+v\", route, v))\n\t}\n\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\tfor _, s := range c.sessions {\n\t\tif err = s.Push(route, data); err != nil {\n\t\t\tlog.Println(fmt.Sprintf(\"Session push message error, ID=%d, UID=%d, Error=%s\", s.ID(), s.UID(), err.Error()))\n\t\t}\n\t}\n\n\treturn err\n}\n\n// Contains check whether a UID is contained in current group or not\nfunc (c *Group) Contains(uid int64) bool {\n\t_, err := c.Member(uid)\n\treturn err == nil\n}\n\n// Add add session to group\nfunc (c *Group) Add(session *session.Session) error {\n\tif c.isClosed() {\n\t\treturn ErrClosedGroup\n\t}\n\n\tif env.Debug {\n\t\tlog.Println(fmt.Sprintf(\"Add session to group %s, ID=%d, UID=%d\", c.name, session.ID(), session.UID()))\n\t}\n\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tid := session.ID()\n\t_, ok := c.sessions[session.ID()]\n\tif ok {\n\t\treturn ErrSessionDuplication\n\t}\n\n\tc.sessions[id] = session\n\treturn nil\n}\n\n// Leave remove specified UID related session from group\nfunc (c *Group) Leave(s *session.Session) error {\n\tif c.isClosed() {\n\t\treturn ErrClosedGroup\n\t}\n\n\tif env.Debug {\n\t\tlog.Println(fmt.Sprintf(\"Remove session from group %s, UID=%d\", c.name, s.UID()))\n\t}\n\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tdelete(c.sessions, s.ID())\n\treturn nil\n}\n\n// LeaveAll clear all sessions in the group\nfunc (c *Group) LeaveAll() error {\n\tif c.isClosed() {\n\t\treturn ErrClosedGroup\n\t}\n\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tc.sessions = make(map[int64]*session.Session)\n\treturn nil\n}\n\n// Count get current member amount in the group\nfunc (c *Group) Count() int {\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\treturn len(c.sessions)\n}\n\nfunc (c *Group) isClosed() bool {\n\tif atomic.LoadInt32(&c.status) == groupStatusClosed {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// Close destroy group, which will release all resource in the group\nfunc (c *Group) Close() error {\n\tif c.isClosed() {\n\t\treturn ErrCloseClosedGroup\n\t}\n\n\tatomic.StoreInt32(&c.status, groupStatusClosed)\n\n\t// release all reference\n\tc.sessions = make(map[int64]*session.Session)\n\treturn nil\n}\n"
        },
        {
          "name": "group_test.go",
          "type": "blob",
          "size": 0.6044921875,
          "content": "package nano\n\nimport (\n\t\"math/rand\"\n\t\"testing\"\n\n\t\"github.com/lonng/nano/session\"\n)\n\nfunc TestChannel_Add(t *testing.T) {\n\tc := NewGroup(\"test_add\")\n\n\tvar paraCount = 100\n\tw := make(chan bool, paraCount)\n\tfor i := 0; i < paraCount; i++ {\n\t\tgo func(id int) {\n\t\t\ts := session.New(nil)\n\t\t\ts.Bind(int64(id + 1))\n\t\t\tc.Add(s)\n\t\t\tw <- true\n\t\t}(i)\n\t}\n\n\tfor i := 0; i < paraCount; i++ {\n\t\t<-w\n\t}\n\n\tif c.Count() != paraCount {\n\t\tt.Fatalf(\"count expect: %d, got: %d\", paraCount, c.Count())\n\t}\n\n\tn := rand.Int63n(int64(paraCount)) + 1\n\tif !c.Contains(n) {\n\t\tt.Fail()\n\t}\n\n\t// leave\n\tc.LeaveAll()\n\tif c.Count() != 0 {\n\t\tt.Fail()\n\t}\n}\n"
        },
        {
          "name": "interface.go",
          "type": "blob",
          "size": 3.607421875,
          "content": "// Copyright (c) nano Authors. All Rights Reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npackage nano\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync/atomic\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/lonng/nano/cluster\"\n\t\"github.com/lonng/nano/component\"\n\t\"github.com/lonng/nano/internal/env\"\n\t\"github.com/lonng/nano/internal/log\"\n\t\"github.com/lonng/nano/internal/runtime\"\n\t\"github.com/lonng/nano/scheduler\"\n)\n\nvar running int32\n\n// VERSION returns current nano version\nvar VERSION = \"0.5.0\"\n\nvar (\n\t// app represents the current server process\n\tapp = &struct {\n\t\tname    string    // current application name\n\t\tstartAt time.Time // startup time\n\t}{}\n)\n\n// Listen listens on the TCP network address addr\n// and then calls Serve with handler to handle requests\n// on incoming connections.\nfunc Listen(addr string, opts ...Option) {\n\tif atomic.AddInt32(&running, 1) != 1 {\n\t\tlog.Println(\"Nano has running\")\n\t\treturn\n\t}\n\n\t// application initialize\n\tapp.name = strings.TrimLeft(filepath.Base(os.Args[0]), \"/\")\n\tapp.startAt = time.Now()\n\n\t// environment initialize\n\tif wd, err := os.Getwd(); err != nil {\n\t\tpanic(err)\n\t} else {\n\t\tenv.Wd, _ = filepath.Abs(wd)\n\t}\n\n\topt := cluster.Options{\n\t\tComponents: &component.Components{},\n\t}\n\tfor _, option := range opts {\n\t\toption(&opt)\n\t}\n\n\t// Use listen address as client address in non-cluster mode\n\tif !opt.IsMaster && opt.AdvertiseAddr == \"\" && opt.ClientAddr == \"\" {\n\t\tlog.Println(\"The current server running in singleton mode\")\n\t\topt.ClientAddr = addr\n\t}\n\n\t// Set the retry interval to 3 secondes if doesn't set by user\n\tif opt.RetryInterval == 0 {\n\t\topt.RetryInterval = time.Second * 3\n\t}\n\n\tnode := &cluster.Node{\n\t\tOptions:     opt,\n\t\tServiceAddr: addr,\n\t}\n\terr := node.Startup()\n\tif err != nil {\n\t\tlog.Fatalf(\"Node startup failed: %v\", err)\n\t}\n\truntime.CurrentNode = node\n\n\tif node.ClientAddr != \"\" {\n\t\tlog.Println(fmt.Sprintf(\"Startup *Nano gate server* %s, client address: %v, service address: %s\",\n\t\t\tapp.name, node.ClientAddr, node.ServiceAddr))\n\t} else {\n\t\tlog.Println(fmt.Sprintf(\"Startup *Nano backend server* %s, service address %s\",\n\t\t\tapp.name, node.ServiceAddr))\n\t}\n\n\tgo scheduler.Sched()\n\tsg := make(chan os.Signal)\n\tsignal.Notify(sg, syscall.SIGINT, syscall.SIGQUIT, syscall.SIGKILL, syscall.SIGTERM)\n\n\tselect {\n\tcase <-env.Die:\n\t\tlog.Println(\"The app will shutdown in a few seconds\")\n\tcase s := <-sg:\n\t\tlog.Println(\"Nano server got signal\", s)\n\t}\n\n\tlog.Println(\"Nano server is stopping...\")\n\n\tnode.Shutdown()\n\truntime.CurrentNode = nil\n\tscheduler.Close()\n\tatomic.StoreInt32(&running, 0)\n}\n\n// Shutdown send a signal to let 'nano' shutdown itself.\nfunc Shutdown() {\n\tclose(env.Die)\n}\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "mock",
          "type": "tree",
          "content": null
        },
        {
          "name": "options.go",
          "type": "blob",
          "size": 4.62109375,
          "content": "package nano\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/lonng/nano/cluster\"\n\t\"github.com/lonng/nano/component\"\n\t\"github.com/lonng/nano/internal/env\"\n\t\"github.com/lonng/nano/internal/log\"\n\t\"github.com/lonng/nano/internal/message\"\n\t\"github.com/lonng/nano/pipeline\"\n\t\"github.com/lonng/nano/serialize\"\n\t\"github.com/lonng/nano/service\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Option func(*cluster.Options)\n\nfunc WithPipeline(pipeline pipeline.Pipeline) Option {\n\treturn func(opt *cluster.Options) {\n\t\topt.Pipeline = pipeline\n\t}\n}\n\n// WithCustomerRemoteServiceRoute register remote service route\nfunc WithCustomerRemoteServiceRoute(route cluster.CustomerRemoteServiceRoute) Option {\n\treturn func(opt *cluster.Options) {\n\t\topt.RemoteServiceRoute = route\n\t}\n}\n\n// WithAdvertiseAddr sets the advertise address option, it will be the listen address in\n// master node and an advertise address which cluster member to connect\nfunc WithAdvertiseAddr(addr string, retryInterval ...time.Duration) Option {\n\treturn func(opt *cluster.Options) {\n\t\topt.AdvertiseAddr = addr\n\t\tif len(retryInterval) > 0 {\n\t\t\topt.RetryInterval = retryInterval[0]\n\t\t}\n\t}\n}\n\n// WithMemberAddr sets the listen address which is used to establish connection between\n// cluster members. Will select an available port automatically if no member address\n// setting and panic if no available port\nfunc WithClientAddr(addr string) Option {\n\treturn func(opt *cluster.Options) {\n\t\topt.ClientAddr = addr\n\t}\n}\n\n// WithMaster sets the option to indicate whether the current node is master node\nfunc WithMaster() Option {\n\treturn func(opt *cluster.Options) {\n\t\topt.IsMaster = true\n\t}\n}\n\n// WithGrpcOptions sets the grpc dial options\nfunc WithGrpcOptions(opts ...grpc.DialOption) Option {\n\treturn func(_ *cluster.Options) {\n\t\tenv.GrpcOptions = append(env.GrpcOptions, opts...)\n\t}\n}\n\n// WithComponents sets the Components\nfunc WithComponents(components *component.Components) Option {\n\treturn func(opt *cluster.Options) {\n\t\topt.Components = components\n\t}\n}\n\n// WithHeartbeatInterval sets Heartbeat time interval\nfunc WithHeartbeatInterval(d time.Duration) Option {\n\treturn func(_ *cluster.Options) {\n\t\tenv.Heartbeat = d\n\t}\n}\n\n// WithCheckOriginFunc sets the function that check `Origin` in http headers\nfunc WithCheckOriginFunc(fn func(*http.Request) bool) Option {\n\treturn func(opt *cluster.Options) {\n\t\tenv.CheckOrigin = fn\n\t}\n}\n\n// WithDebugMode let 'nano' to run under Debug mode.\nfunc WithDebugMode() Option {\n\treturn func(_ *cluster.Options) {\n\t\tenv.Debug = true\n\t}\n}\n\n// SetDictionary sets routes map\nfunc WithDictionary(dict map[string]uint16) Option {\n\treturn func(_ *cluster.Options) {\n\t\tmessage.SetDictionary(dict)\n\t}\n}\n\nfunc WithWSPath(path string) Option {\n\treturn func(_ *cluster.Options) {\n\t\tenv.WSPath = path\n\t}\n}\n\n// SetTimerPrecision sets the ticker precision, and time precision can not less\n// than a Millisecond, and can not change after application running. The default\n// precision is time.Second\nfunc WithTimerPrecision(precision time.Duration) Option {\n\tif precision < time.Millisecond {\n\t\tpanic(\"time precision can not less than a Millisecond\")\n\t}\n\treturn func(_ *cluster.Options) {\n\t\tenv.TimerPrecision = precision\n\t}\n}\n\n// WithSerializer customizes application serializer, which automatically Marshal\n// and UnMarshal handler payload\nfunc WithSerializer(serializer serialize.Serializer) Option {\n\treturn func(opt *cluster.Options) {\n\t\tenv.Serializer = serializer\n\t}\n}\n\n// WithLabel sets the current node label in cluster\nfunc WithLabel(label string) Option {\n\treturn func(opt *cluster.Options) {\n\t\topt.Label = label\n\t}\n}\n\n// WithIsWebsocket indicates whether current node WebSocket is enabled\nfunc WithIsWebsocket(enableWs bool) Option {\n\treturn func(opt *cluster.Options) {\n\t\topt.IsWebsocket = enableWs\n\t}\n}\n\n// WithTSLConfig sets the `key` and `certificate` of TSL\nfunc WithTSLConfig(certificate, key string) Option {\n\treturn func(opt *cluster.Options) {\n\t\topt.TSLCertificate = certificate\n\t\topt.TSLKey = key\n\t}\n}\n\n// WithLogger overrides the default logger\nfunc WithLogger(l log.Logger) Option {\n\treturn func(opt *cluster.Options) {\n\t\tlog.SetLogger(l)\n\t}\n}\n\n// WithHandshakeValidator sets the function that Verify `handshake` data\nfunc WithHandshakeValidator(fn func([]byte) error) Option {\n\treturn func(opt *cluster.Options) {\n\t\tenv.HandshakeValidator = fn\n\t}\n}\n\n// WithNodeId set nodeId use snowflake nodeId generate sessionId, default: pid\nfunc WithNodeId(nodeId uint64) Option {\n\treturn func(opt *cluster.Options) {\n\t\tservice.ResetNodeId(nodeId)\n\t}\n}\n\n// WithUnregisterCallback master unregister member event call fn\nfunc WithUnregisterCallback(fn func(member cluster.Member)) Option {\n\treturn func(opt *cluster.Options) {\n\t\topt.UnregisterCallback = fn\n\t}\n}\n"
        },
        {
          "name": "pipeline",
          "type": "tree",
          "content": null
        },
        {
          "name": "scheduler",
          "type": "tree",
          "content": null
        },
        {
          "name": "serialize",
          "type": "tree",
          "content": null
        },
        {
          "name": "service",
          "type": "tree",
          "content": null
        },
        {
          "name": "session",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}