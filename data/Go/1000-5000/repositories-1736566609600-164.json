{
  "metadata": {
    "timestamp": 1736566609600,
    "page": 164,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nikolaydubina/go-recipes",
      "stars": 4255,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2021 Nikolay Dubina\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 173.654296875,
          "content": "<h1 align=\"center\">🦩 Go Recipes</h1>\n<p align=\"center\">Handy well-known and <i>lesser</i>-known tools for Go projects</p>\n\n> _Know some cool tool or one-liner? Have a feature request or an idea?_  \n> _Feel free to edit this page or create an Issue!_  \n\n[![Hits](https://hits.sh/github.com/nikolaydubina/go-recipes.svg?view=today-total&extraCount=64309)](https://hits.sh/github.com/nikolaydubina/go-recipes/)\n[![go-recipes](https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/badge.svg?raw=true)](https://github.com/nikolaydubina/go-recipes)\n\n## Contents\n\n - AI Tools\n   + [ Advanced autocompletion with `Copilot`](#-advanced-autocompletion-with-copilot)\n   + [ Code analysis and recommendations with `charmbracelet/mods`](#-code-analysis-and-recommendations-with-charmbraceletmods)\n   + [ Pull request recommendations with `gpt-pullrequest-updater`](#-pull-request-recommendations-with-gpt-pullrequest-updater)\n   + [ Commit message recommendation with `charmbracelet/mods`](#-commit-message-recommendation-with-charmbraceletmods)\n   + [ Test case recommendation with `charmbracelet/mods`](#-test-case-recommendation-with-charmbraceletmods)\n   + [ Time complexity estimate with `charmbracelet/mods`](#-time-complexity-estimate-with-charmbraceletmods)\n - Test\n   + [ :fire: Continuous Tests Monitoring with `codecov.io`](#-fire-continuous-tests-monitoring-with-codecovio)\n   + [ Make treemap of coverage with `go-cover-treemap`](#-make-treemap-of-coverage-with-go-cover-treemap)\n   + [ Browse coverage](#-browse-coverage)\n   + [ Browse coverage with `gocov-html`](#-browse-coverage-with-gocov-html)\n   + [ :fire: Browse coverage with `xgo`](#-fire-browse-coverage-with-xgo)\n   + [ Browse coverage in terminal with `gocovsh`](#-browse-coverage-in-terminal-with-gocovsh)\n   + [ Pretty print coverage in terminal with `nikandfor/cover`](#-pretty-print-coverage-in-terminal-with-nikandforcover)\n   + [ Run coverage collector server with `goc`](#-run-coverage-collector-server-with-goc)\n   + [ Visualize live coverage in VSCode with `goc`](#-visualize-live-coverage-in-vscode-with-goc)\n   + [ :fire: Detect drops in coverage with `go-test-coverage`](#-fire-detect-drops-in-coverage-with-go-test-coverage)\n   + [ Shuffle tests](#-shuffle-tests)\n   + [ Run tests sequentially](#-run-tests-sequentially)\n   + [ Run tests in parallel](#-run-tests-in-parallel)\n   + [ Run all Fuzz tests](#-run-all-fuzz-tests)\n   + [ Detect goroutine leaks with `goleak`](#-detect-goroutine-leaks-with-goleak)\n   + [ Detect goroutine leaks with `leaktest`](#-detect-goroutine-leaks-with-leaktest)\n   + [ :fire: Visualize test runs with `vgt`](#-fire-visualize-test-runs-with-vgt)\n   + [ Summarize `go test` with `tparse`](#-summarize-go-test-with-tparse)\n   + [ Decorate `go test` with `richgo`](#-decorate-go-test-with-richgo)\n   + [ Decorate `go test` with `gotest`](#-decorate-go-test-with-gotest)\n   + [ Decorate `go test` with `gotestsum`](#-decorate-go-test-with-gotestsum)\n   + [ Format `go test` results as documentation with `gotestdox`](#-format-go-test-results-as-documentation-with-gotestdox)\n   + [ Get slowest tests with `gotestsum`](#-get-slowest-tests-with-gotestsum)\n   + [ Auto-Instrument skipping slowest tests with `gotestsum`](#-auto-instrument-skipping-slowest-tests-with-gotestsum)\n   + [ Automatically re-run failed tests with `gotestsum`](#-automatically-re-run-failed-tests-with-gotestsum)\n   + [ Make `JSUnit` test report with `gotestsum`](#-make-jsunit-test-report-with-gotestsum)\n   + [ Make `JSUnit` test report with `go-junit-report`](#-make-jsunit-test-report-with-go-junit-report)\n   + [ Get packages without tests](#-get-packages-without-tests)\n   + [ Perform Mutation Testing with `ooze`](#-perform-mutation-testing-with-ooze)\n   + [ Perform Mutation Testing with `avito-tech/go-mutesting`](#-perform-mutation-testing-with-avito-techgo-mutesting)\n   + [ Perform Mutation Testing with `go-mutesting`](#-perform-mutation-testing-with-go-mutesting)\n   + [ Trace tests with `go-test-trace`](#-trace-tests-with-go-test-trace)\n   + [ Speedup tests for large codebases](#-speedup-tests-for-large-codebases)\n - Dependencies\n   + [ Get Go version of current module](#-get-go-version-of-current-module)\n   + [ Get Go versions of upstream modules](#-get-go-versions-of-upstream-modules)\n   + [ Get directly dependent modules that can be upgraded](#-get-directly-dependent-modules-that-can-be-upgraded)\n   + [ Get upstream modules without Go version](#-get-upstream-modules-without-go-version)\n   + [ Get available module versions](#-get-available-module-versions)\n   + [ :fire: Get go module libyear, number of releases, version delta with `go-libyear`](#-fire-get-go-module-libyear-number-of-releases-version-delta-with-go-libyear)\n   + [ Make graph of upstream modules with `modgraphviz`](#-make-graph-of-upstream-modules-with-modgraphviz)\n   + [ Make graph of upstream packages with `import-graph`](#-make-graph-of-upstream-packages-with-import-graph)\n   + [ Scrape details about upstream modules and make graph with `import-graph`](#-scrape-details-about-upstream-modules-and-make-graph-with-import-graph)\n   + [ Scrape licenses of upstream dependencies with `go-licenses`](#-scrape-licenses-of-upstream-dependencies-with-go-licenses)\n   + [ Explore dependencies with `goda`](#-explore-dependencies-with-goda)\n   + [ Explore dependencies interactively with `spaghetti`](#-explore-dependencies-interactively-with-spaghetti)\n   + [ :fire: Explore dependencies graph interactively with `modview`](#-fire-explore-dependencies-graph-interactively-with-modview)\n   + [ :fire: Enforce Go code architecture with `go-arch-lint`](#-fire-enforce-go-code-architecture-with-go-arch-lint)\n   + [ :fire: Check Clean Architecture with `go-cleanarch`](#-fire-check-clean-architecture-with-go-cleanarch)\n   + [ Use `go mod` directives](#-use-go-mod-directives)\n   + [ :fire: Locally patch dependency with ``replace``](#-fire-locally-patch-dependency-with-replace)\n   + [ :fire: Locally patch dependency with ``go.work``](#-fire-locally-patch-dependency-with-gowork)\n - Code Visualization\n   + [ Make C4 diagram with `go-structurizr`](#-make-c4-diagram-with-go-structurizr)\n   + [ Make graph of function calls with `callgraph`](#-make-graph-of-function-calls-with-callgraph)\n   + [ Make graph of function calls in package with `go-callvis`](#-make-graph-of-function-calls-in-package-with-go-callvis)\n   + [ Make PlantUML diagram with `goplantuml`](#-make-plantuml-diagram-with-goplantuml)\n   + [ Make PlantUML diagram with `go-plantuml`](#-make-plantuml-diagram-with-go-plantuml)\n   + [ :fire: Visualize the entropy of a code base with a 3D force-directed graph with `dep-tree`](#-fire-visualize-the-entropy-of-a-code-base-with-a-3d-force-directed-graph-with-dep-tree)\n   + [ Make 3D chart of Go codebase with `gocity`](#-make-3d-chart-of-go-codebase-with-gocity)\n   + [ Make histogram of Go files per package](#-make-histogram-of-go-files-per-package)\n   + [ Explore Go code in browser powered by `go-guru` with `pythia`](#-explore-go-code-in-browser-powered-by-go-guru-with-pythia)\n   + [ Interactively visualize packages with `goexplorer`](#-interactively-visualize-packages-with-goexplorer)\n   + [ Make D2 graph of architecture and dependencies with `go-arch-lint graph`](#-make-d2-graph-of-architecture-and-dependencies-with-go-arch-lint-graph)\n - Code Generation\n   + [ Run `go:generate` in parallel](#-run-gogenerate-in-parallel)\n   + [ Generate `String` method for enum types](#-generate-string-method-for-enum-types)\n   + [ :fire: Generate enums encoding with `go-enum-encoding`](#-fire-generate-enums-encoding-with-go-enum-encoding)\n   + [ :fire: Generate enums with `goenums`](#-fire-generate-enums-with-goenums)\n   + [ Generate data types from JSON Schema with `go-jsonschema`](#-generate-data-types-from-json-schema-with-go-jsonschema)\n   + [ Generate constructor for a struct with `gonstructor`](#-generate-constructor-for-a-struct-with-gonstructor)\n   + [ Generate Table Driven Tests with `gotests`](#-generate-table-driven-tests-with-gotests)\n   + [ Generate mocks with `mockgen`](#-generate-mocks-with-mockgen)\n   + [ Generate interface for a struct with `ifacemaker`](#-generate-interface-for-a-struct-with-ifacemaker)\n   + [ Generate interface for a struct with `interfacer`](#-generate-interface-for-a-struct-with-interfacer)\n   + [ Generate interface for a struct with `struct2interface`](#-generate-interface-for-a-struct-with-struct2interface)\n   + [ Generate interface for `CSV` file with `structer`](#-generate-interface-for-csv-file-with-structer)\n   + [ :fire: Generate decorator for interface with `gowrap`](#-fire-generate-decorator-for-interface-with-gowrap)\n   + [ Modify struct field tags with `gomodifytags`](#-modify-struct-field-tags-with-gomodifytags)\n   + [ :fire: Generate code from OpenAPI 3 specification with `oapi-codegen`](#-fire-generate-code-from-openapi-3-specification-with-oapi-codegen)\n   + [ :fire: Generate C-Go Bindings with `c-for-go`](#-fire-generate-c-go-bindings-with-c-for-go)\n - Generics\n   + [ :fire: Enum via generics with `enum`](#-fire-enum-via-generics-with-enum)\n - Refactor\n   + [ Replace symbol with `gofmt`](#-replace-symbol-with-gofmt)\n   + [ Apply refactoring patches with `gopatch`](#-apply-refactoring-patches-with-gopatch)\n   + [ Keep consistent ordering of imports with `goimports`](#-keep-consistent-ordering-of-imports-with-goimports)\n   + [ Keep consistent ordering of imports with `gci`](#-keep-consistent-ordering-of-imports-with-gci)\n   + [ Keep consistent ordering of imports with `goimportx`](#-keep-consistent-ordering-of-imports-with-goimportx)\n - Errors\n   + [ Errors with return traces with `errtrace`](#-errors-with-return-traces-with-errtrace)\n   + [ Errors with stack traces and source fragments with `tracerr`](#-errors-with-stack-traces-and-source-fragments-with-tracerr)\n   + [ Pretty print `panic` messages with `panicparse`](#-pretty-print-panic-messages-with-panicparse)\n - Build\n   + [ :fire: Fetch private dependencies in CI](#-fire-fetch-private-dependencies-in-ci)\n   + [ Show compiler optimization decisions on heap and inlining](#-show-compiler-optimization-decisions-on-heap-and-inlining)\n   + [ Disable inlining](#-disable-inlining)\n   + [ Aggressive inlining](#-aggressive-inlining)\n   + [ Profile-guided optimization](#-profile-guided-optimization)\n   + [ Manually disable or enable `cgo`](#-manually-disable-or-enable-cgo)\n   + [ Include metadata in binary during compilation with `ldflags`](#-include-metadata-in-binary-during-compilation-with-ldflags)\n   + [ :fire: Check if symbol or package is included in binary](#-fire-check-if-symbol-or-package-is-included-in-binary)\n   + [ :fire: Build for Raspberry Pi, Virtual Machine, embedded or normal PC with `gokrazy`](#-fire-build-for-raspberry-pi-virtual-machine-embedded-or-normal-pc-with-gokrazy)\n   + [ :fire: Visualise dependencies size in compiled binaries with `go-size-analyzer`](#-fire-visualise-dependencies-size-in-compiled-binaries-with-go-size-analyzer)\n   + [ Make treemap breakdown of Go executable binary with `go-binsize-treemap`](#-make-treemap-breakdown-of-go-executable-binary-with-go-binsize-treemap)\n   + [ Custom import path](#-custom-import-path)\n   + [ Custom import path with `govanityurls`](#-custom-import-path-with-govanityurls)\n   + [ Custom import path with `sally`](#-custom-import-path-with-sally)\n   + [ Custom import path with `kkn.fi/vanity`](#-custom-import-path-with-kknfivanity)\n   + [ Custom import path enforcement](#-custom-import-path-enforcement)\n   + [ Manage multiple Go versions with `Goenv`](#-manage-multiple-go-versions-with-goenv)\n   + [ :fire: Transpile C to Go with `cxgo`](#-fire-transpile-c-to-go-with-cxgo)\n   + [ :fire: Transpile Go to Javascript with `gopherjs`](#-fire-transpile-go-to-javascript-with-gopherjs)\n   + [ :fire: Run compile-time function evaluation with `prep`](#-fire-run-compile-time-function-evaluation-with-prep)\n - Assembly\n   + [ Get assembly of Go code snippets online](#-get-assembly-of-go-code-snippets-online)\n   + [ Get Go SSA intermediary representation with `ssaplayground`](#-get-go-ssa-intermediary-representation-with-ssaplayground)\n   + [ View Go assembly interactively with `lensm`](#-view-go-assembly-interactively-with-lensm)\n   + [ View Go assembly with color annotation with `pat/disfunc`](#-view-go-assembly-with-color-annotation-with-patdisfunc)\n   + [ Generate Go assembly in Go with `avo`](#-generate-go-assembly-in-go-with-avo)\n   + [ Generate AST for code snippets with `go/ast`](#-generate-ast-for-code-snippets-with-goast)\n   + [ Generate AST for code snippets with `go2ast`](#-generate-ast-for-code-snippets-with-go2ast)\n   + [ Visualize Go SSA function using Graphviz with `go-ssaviz`](#-visualize-go-ssa-function-using-graphviz-with-go-ssaviz)\n   + [ Make graph of AST with `astgraph`](#-make-graph-of-ast-with-astgraph)\n   + [ Convert C assembly to Go assembly with `c2goasm`](#-convert-c-assembly-to-go-assembly-with-c2goasm)\n - Execution\n   + [ :fire: Embed Go Playground to your blog with `codapi`](#-fire-embed-go-playground-to-your-blog-with-codapi)\n   + [ Embed Go Playground to your blog with `goplay`](#-embed-go-playground-to-your-blog-with-goplay)\n   + [ Run alternative Go Playground with `goplay.tools`](#-run-alternative-go-playground-with-goplaytools)\n   + [ :fire: Use TinyGo Playground with `tinygo`](#-fire-use-tinygo-playground-with-tinygo)\n   + [ Run interactive Go kernels in Jupyter Notebook with `gophernotes`](#-run-interactive-go-kernels-in-jupyter-notebook-with-gophernotes)\n   + [ Run interactive Go interpreter with `yaegi`](#-run-interactive-go-interpreter-with-yaegi)\n   + [ Run interactive Go interpreter with `gomacro`](#-run-interactive-go-interpreter-with-gomacro)\n   + [ Run Go function in shell with `gorram`](#-run-go-function-in-shell-with-gorram)\n   + [ Run Go function in shell with `gosh`](#-run-go-function-in-shell-with-gosh)\n   + [ Run simple fileserver with `net/http`](#-run-simple-fileserver-with-nethttp)\n   + [ Create 3D visualization of concurrency traces with `gotrace`](#-create-3d-visualization-of-concurrency-traces-with-gotrace)\n   + [ Wrap command with `os/exec`](#-wrap-command-with-osexec)\n   + [ Capture output of command to file with `os/exec`](#-capture-output-of-command-to-file-with-osexec)\n   + [ Capture output of command and process it with `os/exec`](#-capture-output-of-command-and-process-it-with-osexec)\n   + [ Piping between processes with `os/exec`](#-piping-between-processes-with-osexec)\n   + [ `errgroup` and CommandContext with `os/exec`](#-errgroup-and-commandcontext-with-osexec)\n - Monitor\n   + [ :fire: Monitor Go Runtime metrics with `opentelemetry`](#-fire-monitor-go-runtime-metrics-with-opentelemetry)\n   + [ Monitor goroutines with `grmon`](#-monitor-goroutines-with-grmon)\n   + [ Monitor Go processes with `gops`](#-monitor-go-processes-with-gops)\n   + [ :fire: Monitor Go runtime metrics in browser with `live-pprof`](#-fire-monitor-go-runtime-metrics-in-browser-with-live-pprof)\n   + [ Monitor Go runtime metrics in browser with `statsviz`](#-monitor-go-runtime-metrics-in-browser-with-statsviz)\n   + [ Auto-Instrument all functions with `go-instrument`](#-auto-instrument-all-functions-with-go-instrument)\n   + [ Auto-Instrument all functions with `otelinji`](#-auto-instrument-all-functions-with-otelinji)\n   + [ Auto-Instrument functions for DataDog with `orchestrion`](#-auto-instrument-functions-for-datadog-with-orchestrion)\n   + [ Continuous Profiling with `Pyroscope`](#-continuous-profiling-with-pyroscope)\n - Benchmark\n   + [ Run benchmarks](#-run-benchmarks)\n   + [ Table-driven benchmarks](#-table-driven-benchmarks)\n   + [ :fire: Align benchmark output](#-fire-align-benchmark-output)\n   + [ Generate benchmak CPU and Memory profiles with `go test`](#-generate-benchmak-cpu-and-memory-profiles-with-go-test)\n   + [ Visualize callgraph of profiles with `pprof`](#-visualize-callgraph-of-profiles-with-pprof)\n   + [ Visualize flamegraphs of profiles with `pprof`](#-visualize-flamegraphs-of-profiles-with-pprof)\n   + [ Visualize profiles online](#-visualize-profiles-online)\n   + [ Get delta between two benchmarks with `benchstat`](#-get-delta-between-two-benchmarks-with-benchstat)\n   + [ Get summary of benchmarks with `benchstat`](#-get-summary-of-benchmarks-with-benchstat)\n   + [ Benchmark against git commit with `pat/ba`](#-benchmark-against-git-commit-with-patba)\n   + [ Continuous benchmarking](#-continuous-benchmarking)\n   + [ Continuous benchmarking with `gobenchdata`](#-continuous-benchmarking-with-gobenchdata)\n   + [ Continuous benchmarking with `benchdiff`](#-continuous-benchmarking-with-benchdiff)\n   + [ Continuous benchmarking with `cob`](#-continuous-benchmarking-with-cob)\n   + [ Generate live traces with `net/http/trace`](#-generate-live-traces-with-nethttptrace)\n   + [ Generate traces with `go test`](#-generate-traces-with-go-test)\n   + [ View traces with `go tool trace`](#-view-traces-with-go-tool-trace)\n   + [ :fire: View traces with `gotraceui`](#-fire-view-traces-with-gotraceui)\n   + [ View in-process traces with `trc`](#-view-in-process-traces-with-trc)\n   + [ View wallclock traces with `fgtrace`](#-view-wallclock-traces-with-fgtrace)\n   + [ Get on/off CPU profiles with `fgprof`](#-get-onoff-cpu-profiles-with-fgprof)\n - Document\n   + [ Make alternative documentation with `golds`](#-make-alternative-documentation-with-golds)\n   + [ Read Go binary documentation in `man` format with `goman`](#-read-go-binary-documentation-in-man-format-with-goman)\n   + [ Generate badge with `gobadge`](#-generate-badge-with-gobadge)\n   + [ :fire: Generate README.md based on GoDoc comments with `goreadme`](#-fire-generate-readmemd-based-on-godoc-comments-with-goreadme)\n - Education\n   + [ Run Turtle Graphics online with `goplay.space`](#-run-turtle-graphics-online-with-goplayspace)\n - Style Guide\n   + [ Google](#style-guide)\n   + [ Uber](#style-guide)\n   + [ Go Code Review Comments](#style-guide)\n - Security\n   + [ Run official vulnerability check with `govulncheck`](#-run-official-vulnerability-check-with-govulncheck)\n   + [ :fire: Detect escalated privileges in dependencies with `capslock`](#-fire-detect-escalated-privileges-in-dependencies-with-capslock)\n   + [ :fire: Run static analysis with `gosec`](#-fire-run-static-analysis-with-gosec)\n   + [ Perform Taint Analysis with `taint`](#-perform-taint-analysis-with-taint)\n   + [ :fire: Use Microsoft Go compiler with `microsoft/go`](#-fire-use-microsoft-go-compiler-with-microsoftgo)\n - Static Analysis\n   + [ Run default static analysis with `go vet`](#-run-default-static-analysis-with-go-vet)\n   + [ Run custom static analysis tool with `go vet`](#-run-custom-static-analysis-tool-with-go-vet)\n   + [ Run official static analyzers not included in `go vet`](#-run-official-static-analyzers-not-included-in-go-vet)\n   + [ Detect most common issues with `staticcheck`](#-detect-most-common-issues-with-staticcheck)\n   + [ Detect potential Nil panics with `nilaway`](#-detect-potential-nil-panics-with-nilaway)\n   + [ Detect most common issues with `go-critic`](#-detect-most-common-issues-with-go-critic)\n   + [ Reference and run common linters with `golangci-lint`](#-reference-and-run-common-linters-with-golangci-lint)\n   + [ Detect non-exhaustive switch and map with `exhaustive`](#-detect-non-exhaustive-switch-and-map-with-exhaustive)\n   + [ Detect structs with uninitialized fields with `go-exhaustruct`](#-detect-structs-with-uninitialized-fields-with-go-exhaustruct)\n   + [ :fire: Detect unreachable functions with `deadcode`](#-fire-detect-unreachable-functions-with-deadcode)\n   + [ Detect unsafe code with `go-safer`](#-detect-unsafe-code-with-go-safer)\n   + [ :fire: Detect `panic` without explaining comment with `panic-linter`](#-fire-detect-panic-without-explaining-comment-with-panic-linter)\n   + [ Detect unnecessary type conversions with `unconvert`](#-detect-unnecessary-type-conversions-with-unconvert)\n   + [ Detect global variables with `gochecknoglobals`](#-detect-global-variables-with-gochecknoglobals)\n   + [ Detect slices that could be preallocated with `prealloc`](#-detect-slices-that-could-be-preallocated-with-prealloc)\n   + [ Detect unnecessary import aliases with `unimport`](#-detect-unnecessary-import-aliases-with-unimport)\n   + [ Detect unexpected import aliases with `importas`](#-detect-unexpected-import-aliases-with-importas)\n   + [ Detect inconsistent import aliases with `consistentimports`](#-detect-inconsistent-import-aliases-with-consistentimports)\n   + [ Detect naked returns with `nakedret`](#-detect-naked-returns-with-nakedret)\n   + [ Detect mixing pointer and value method receivers with `smrcptr`](#-detect-mixing-pointer-and-value-method-receivers-with-smrcptr)\n   + [ Detect vertical function ordering with `vertfn`](#-detect-vertical-function-ordering-with-vertfn)\n   + [ Detect vertical symbol ordering with `refdir`](#-detect-vertical-symbol-ordering-with-refdir)\n   + [ Detect tests with wrong `t.Parallel()` usage with `paralleltest`](#-detect-tests-with-wrong-tparallel-usage-with-paralleltest)\n   + [ Detect tests with wrong `t.Parallel()` usage with `tparallel`](#-detect-tests-with-wrong-tparallel-usage-with-tparallel)\n   + [ Detect magic numbers with `mnd`](#-detect-magic-numbers-with-mnd)\n   + [ Detect magic strings with `goconst`](#-detect-magic-strings-with-goconst)\n   + [ Detect bound checks with `pat/boundcheck`](#-detect-bound-checks-with-patboundcheck)\n   + [ Calculate Cognitive Complexity with `gocognit`](#-calculate-cognitive-complexity-with-gocognit)\n   + [ Calculate Cyclomatic Complexity with `gocyclo`](#-calculate-cyclomatic-complexity-with-gocyclo)\n   + [ Calculate Cyclomatic Complexity with `cyclop`](#-calculate-cyclomatic-complexity-with-cyclop)\n   + [ Calculate age of comments with `go-commentage`](#-calculate-age-of-comments-with-go-commentage)\n   + [ Ensure `if` statements using short assignment with `ifshort`](#-ensure-if-statements-using-short-assignment-with-ifshort)\n   + [ :fire: Detect sub-optimal struct layout with `betteralign`](#-fire-detect-sub-optimal-struct-layout-with-betteralign)\n   + [ :fire: Detect sub-optimal struct layout with `structlayout-optimize`](#-fire-detect-sub-optimal-struct-layout-with-structlayout-optimize)\n   + [ Visualize struct layout with `structlayout`](#-visualize-struct-layout-with-structlayout)\n   + [ Rely on compiler for stricter Enums](#-rely-on-compiler-for-stricter-enums)\n   + [ Analyze function callsites with `go-callsite-stats`](#-analyze-function-callsites-with-go-callsite-stats)\n\n## AI Tools\n\n### [⏫](#contents) Advanced autocompletion with [Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)\n\nStart typing and after few seconds you will get autocompletion suggestion. Some useful ways to interact with it listed below.\n\n\n```\ngiven a function signature and docstring, it will suggest function body\ngiven a function body, it will suggest docstring\n```\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/37570492/212964557-8d832278-61bb-4288-a8a7-47f35859e868.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nVSCode\nGitHub account\n```\n\n### [⏫](#contents) Code analysis and recommendations with [charmbracelet/mods](https://github.com/charmbracelet/mods)\n\nThis is a nice looking CLI wrapper for major LLM APIs from [Charm](https://github.com/charmbracelet) team. It supports OpenAI and [LocalAI](https://github.com/go-skynet/LocalAI). It passes arbitrary human language command string and concatenated with STDIN input. Multiple useful commands are possible.\n\n\n```\nmods -f \"what are your thoughts on improving this code?\" < main.go | glow\nmods -f \"you are an expert Go programmer. find potential bugs in following Go code.\" < my_class.go | glow\n```\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/25087/237975943-738fe969-1c9f-4849-af8a-cde38156ce92.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# OpenAI token or LocalAI model and server\ngo install github.com/charmbracelet/glow@latest\ngo install github.com/charmbracelet/mods@latest\n```\n\n### [⏫](#contents) Pull request recommendations with [gpt-pullrequest-updater](https://github.com/ravilushqa/gpt-pullrequest-updater)\n\nThis tool generates GitHub pull request description and review using OpenAI ChatGPT. There is also GitHub Action available. — [@ravilushqa](https://github.com/ravilushqa)\n\n<div align=\"center\"><img src=\"./img/gpt-pullrequest-updater-example.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# OpenAI token\n# GitHub token\ngo install github.com/ravilushqa/gpt-pullrequest-updater/cmd/description@latest\ngo install github.com/ravilushqa/gpt-pullrequest-updater/cmd/review@latest\n```\n\n### [⏫](#contents) Commit message recommendation with [charmbracelet/mods](https://github.com/charmbracelet/mods)\n\nShort summaries of changes usually work well.\n\n\n```\ngit diff | mods \"summarize following git diff into short git commit message.\"\ngit diff | mods \"you are expert Go programmer. you are owner of this codebase. think through step by step. summarize following git diff into short git commit message under 10 words.\"\n```\n\nExample\n```\nAdd new entries for Using AI in Go projects, including Advanced autocompletion with Copilot and Code analysis and recommendations with charmbracelet/mod. Update page.yaml accordingly.\n```\n\nRequirements\n```\n# OpenAI token or LocalAI model and server\ngo install github.com/charmbracelet/mods@latest\n```\n\n### [⏫](#contents) Test case recommendation with [charmbracelet/mods](https://github.com/charmbracelet/mods)\n\nConcatenate two files and ask to recommend missing test cases. It is not precise, has high false positive and high false negative rate. Often can not detect that tests cases are present at all. However, it can give a fresh perspective on your code. Best results are produced when asking succinct short replies. Example outputs below.\n\n\n```\ncat fpdecimal.go fpdecimal_test.go | head -c 3600 | mods -f \"you are an expert Go programmer. investigate supplied Go program and associated test suite. think through this step by step. make sure you get the right answer. recommend missing test cases. write very succinctly. under 100 words.\" | glow\ncat fpdecimal.go fpdecimal_test.go | head -c 4000 | mods -f \"investigate supplied Go program and associated test suite. recommend missing test cases.\" | glow\n```\n\nExample\n```\nFor additional test cases, consider adding tests for negative float values, positive and negative infinity, unsigned\nintegers, zero divided by a number greater than zero, and division with only zeros.                       \n------------------\n  Test cases:                                                                                                                                                                                                                             \n  • Test for unmarshalling JSON into Decimal                                                                          \n  • Test for marshalling Decimal to JSON                                                                              \n  • Test for multiplication with zero                                                                                 \n  • Test for multiplication identity                                                                                  \n  • Test for division with zero                                                                                       \n  • Test for all comparison operations for the Decimal struct.                                                        \n------------------\nMissing test cases for the  fpdecimal  Go program include those for testing the  DivMod  and  FromString  functions.\nAdditionally, there should be tests checking that zero division is not allowed, and tests that ensure the           \nFractionDigits  value does not change during the program's runtime. Important test cases include comparing decimals \nfor equality, as well as testing the commutativity, associativity, and identity properties of addition and          \nmultiplication. Finally, the program should have a test that verifies the  MarshalJSON  and  UnmarshalJSON          \nfunctions.\n```\n\n\n### [⏫](#contents) Time complexity estimate with [charmbracelet/mods](https://github.com/charmbracelet/mods)\n\nThis is one of recommended use cases by OpenAI website. It can produce fairly good estimations. However, in its direct form usefulness is questionable, since complex cases are not handled precisely enough, educational potential is limited, and simple cases do not require this. Perhaps, this will be utilized in future work on using models in compiler and programming. Copy function and pipe it to model with prompt asking for time complexity estimation. Below is an example.\n\n\n```\npbpaste | mods -f \"calculate time complexity of following Go code function.\" | glow\n```\n\n```go\nfunc AppendFixedPointDecimal(b []byte, v int64, p int) []byte {\n  if v == 0 {\n    return append(b, '0')\n  }\n\n  if p == 0 {\n    return strconv.AppendInt(b, v, 10)\n  }\n\n  if v < 0 {\n    v = -v\n    b = append(b, '-')\n  }\n\n  s := len(b)\n  b = strconv.AppendInt(b, v, 10)\n\n  if len(b)-s > p {\n    i := len(b) - p\n    b = append(b, 0)\n    copy(b[i+1:], b[i:])\n    b[i] = '.'\n  } else {\n    i := 2 + p - (len(b) - s)\n    for j := 0; j < i; j++ {\n      b = append(b, 0)\n    }\n    copy(b[s+i:], b[s:])\n    copy(b[s:], []byte(zeroPrefix[:i]))\n  }\n\n  return b\n}\n```\n\nExample\n```\nThe time complexity of the AppendFixedPointDecimal function is O(N), where N is the length of the input byte slice  \nb. This is because the function performs a constant number of operations for each byte in b, and the largest        \noperation within the function is the loop that appends zeros to the byte slice, which has a length proportional to  \nthe input. Other operations, such as integer conversions and comparisons, are considered constant time since the    \ninput size is fixed.                 \n------------------\nThe time complexity of the function depends on the input values  v  and  p .    \n• The first three if statements before the main computation take constant time, \nso they don't contribute to the overall time complexity.                        \n• The  strconv.AppendInt  function used twice has a time complexity of          \nO(log(v)), where v is the integer being converted to a string representation in \nbase 10.                                                                        \n• The condition  len(b)-s > p  has a constant time complexity.                  \n• The  append  and  copy  operations inside the if and else blocks take linear  \ntime proportional to  p .                                                       \n• The  for  loop has a constant number of iterations, specifically 2 +  p  - (  \nlen(b)-s ). The  append  and  copy  operations inside the loop also take linear \ntime proportional to  p .                                                       \nTherefore, the overall time complexity of the function is O(log(v) + p).\n```\n\n\n## Test\n\n### [⏫](#contents) :fire: Continuous Tests Monitoring with [codecov.io](https://app.codecov.io)\n\nTrack tests duration, errors, flackiness. Run JUnit test output converter and submit result to codecov.io via GitHub Action. — https://codecov.io\n\n\n```\ngo test -coverprofile=coverage.out -cover -json ./... | gotestsum --junitfile tests.xml\n```\n\n<div align=\"center\"><img src=\"./img/codecov-tests.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [⏫](#contents) Make treemap of coverage with [go-cover-treemap](https://github.com/nikolaydubina/go-cover-treemap)\n\nVisualize distribution of code coverage in your project. This helps to identify code areas with high and low coverage. Useful when you have large project with lots of files and packages. This 2D \"image-hash\" of your project should be more representative than a single number. Also available at https://go-cover-treemap.io. — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo test -coverprofile cover.out ./...\ngo-cover-treemap -coverprofile cover.out > out.svg\n```\n\n<div align=\"center\"><img src=\"./img/hugo-code-coverage.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/nikolaydubina/go-cover-treemap@latest\n```\n\n### [⏫](#contents) Browse coverage\n\nThis is very helpful tool from the official Go toolchain. Similar visualization is integrated into VSCode and Goland, but can be used separately.\n\n\n```\ngo test -coverprofile cover.out ./...\ngo tool cover -html=cover.out\n```\n\n<div align=\"center\"><img src=\"./img/tool-cover-html.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Browse coverage with [gocov-html](https://github.com/matm/gocov-html)\n\nBrowse code coverage in statically generated HTML page. Multiple styles are supported. You may need to convert coverage report into `gocov` format. — [@matm](https://github.com/matm)\n\n\n```\ngocov test strings | gocov-html -t golang > strings.html\ngocov test encoding/csv strings | gocov-html -t kit > strings.html\ngocov test strings|./gocov-html -cmax 90 > strings.html # show functions with <90% coverage\n```\n\n<div align=\"center\"><img src=\"./img/gocov-html.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/axw/gocov/gocov@latest\ngo install github.com/matm/gocov-html/cmd/gocov-html@latest\n```\n\n### [⏫](#contents) :fire: Browse coverage with [xgo](https://github.com/xhd2015/xgo)\n\nThe displayed coverage is a combination of coverage and git diff. By default, only modified lines were shown. This helps to quickly locate changes that were not covered, and add tests for them incrementally. — [@xhd2015](https://github.com/xhd2015)\n\n\n```\nxgo tool coverage serve cover.out\n```\n\n<div align=\"center\"><img src=\"https://github.com/xhd2015/xgo/raw/master/doc/img/coverage.jpg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/xhd2015/xgo/cmd/xgo@latest\n```\n\n### [⏫](#contents) Browse coverage in terminal with [gocovsh](https://github.com/orlangure/gocovsh)\n\nBrowse code coverage similarly to HTML provided by official Go toolchain, but in terminal. Other notable features are package level statistics, coverage only for changed files. — [@orlangure](https://github.com/orlangure)\n\n\n```\ngo test -cover -coverprofile coverage.out\ngocovsh                        # show all files from coverage report\ngit diff --name-only | gocovsh # only show changed files\ngit diff | gocovsh             # show coverage on top of current diff\ngocovsh --profile profile.out  # for other coverage profile names\n```\n\n<div align=\"center\"><img src=\"https://github.com/orlangure/gocovsh/raw/master/examples/general.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/orlangure/gocovsh@latest\n```\n\n### [⏫](#contents) Pretty print coverage in terminal with [nikandfor/cover](https://github.com/nikandfor/cover)\n\nIt is similar to `go tool cover -html=cover.out` but in terminal. You can filter by functions, packages, minimum coverage, and more. — [@nikandfor](https://github.com/nikandfor)\n\n\n```\ncover\n```\n\n<div align=\"center\"><img src=\"img/cover.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/nikandfor/cover@latest\n```\n\n### [⏫](#contents) Run coverage collector server with [goc](https://github.com/qiniu/goc)\n\nThis tool allows to collect coverage as soon as code is executed. — [@qiniu](https://github.com/qiniu)\n\n\n```\ngoc server\ngoc build\ngoc profile\n```\n\n<div align=\"center\"><img src=\"https://github.com/qiniu/goc/raw/master/docs/images/intro.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/qiniu/goc@latest\n```\n\n### [⏫](#contents) Visualize live coverage in VSCode with [goc](https://github.com/qiniu/goc)\n\nOfficial Go VSCode plugin already has coverage highlighting. In addition to that, this tool shows covered lines as soon as they are executed. This can be useful for running manual integration or system tests or debugging. — [@qiniu](https://github.com/qiniu)\n\n<div align=\"center\"><img src=\"https://github.com/qiniu/goc/raw/master/docs/images/goc-vscode.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/qiniu/goc@latest\n```\n\n### [⏫](#contents) :fire: Detect drops in coverage with [go-test-coverage](https://github.com/vladopajic/go-test-coverage)\n\nThis tool designed to report issues when test coverage falls below a specified threshold. Likely you would want to use it in the CI. — [@vladopajic](https://github.com/vladopajic)\n\n\n```\ngo-test-coverage --config=./.testcoverage.yml\n```\n\nRequirements\n```\ngo install github.com/vladopajic/go-test-coverage/v2@latest\n```\n\n### [⏫](#contents) Shuffle tests\n\nThis is less known option that is disabled by default. However, for robust test suite it is beneficial. More test flags and full description is available at `go help testflag`.\n\n\n```\ngo test -shuffle=on\n```\n\n\n### [⏫](#contents) Run tests sequentially\n\nUse when you need to synchronize tests, for example in integration tests that share environment. [Official documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags).\n\n\n```\ngo test -p 1 -parallel 1 ./...\n```\n\n\n### [⏫](#contents) Run tests in parallel\n\nAdd `t.Parallel` to your tests case function bodies. As per documentation, by default `-p=GOMAXPROCS` and `-parallel=GOMAXPROCS` when you run `go test`. Different packages by default run in parallel, and tests within package can be enforced to run in parallel too. Make sure to copy test case data to new variable, why explained [here](https://gist.github.com/posener/92a55c4cd441fc5e5e85f27bca008721). [Official documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags).\n\n```go\n...\nfor _, tc := range tests {\n    tc := tc\n    t.Run(tc.name, func(t *testing.T) {\n        t.Parallel()\n        ...\n```\n\n\n### [⏫](#contents) Run all Fuzz tests\n\nStandard tool runs only single fuzz test. Use following to run all fuzz tests in a package.\n\n\n```\ngo test -list . | grep Fuzz | xargs -P 8 -I {} go test -fuzz {} -fuzztime 5s .\n```\n\n\n### [⏫](#contents) Detect goroutine leaks with [goleak](https://github.com/uber-go/goleak)\n\nInstrument your test cases with verification call. Alternatively, you can add single call in `TestMain`. This tool was recommended by Pyroscope in [blog](https://grafana.com/blog/2023/04/19/how-to-troubleshoot-memory-leaks-in-go-with-grafana-pyroscope/). — Uber\n\n```go\nfunc TestA(t *testing.T) {\n  defer goleak.VerifyNone(t)\n  ...\n}\n```\n\nRequirements\n```\ngo get -u go.uber.org/goleak\n```\n\n### [⏫](#contents) Detect goroutine leaks with [leaktest](https://github.com/fortytw2/leaktest)\n\nRefactored, tested variant of the goroutine leak detector found in both `net/http` tests and the cockroachdb source tree. You have to call this library in your tests. — [@fortytw2](https://github.com/fortytw2)\n\n```\nfunc TestPoolContext(t *testing.T) {\n  ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n  defer cancel()\n  defer leaktest.CheckContext(ctx, t)()\n\n  go func() {\n    for {\n      time.Sleep(time.Second)\n    }\n  }()\n}\n```\n\n\n### [⏫](#contents) :fire: Visualize test runs with [vgt](https://github.com/roblaszczak/vgt)\n\nThis tool visualizes Go test results in a browser. It's helpful with understanding parallelism of tests and identifying slow tests. More information can be found in our blog post about optimizing Go tests parallelism. — [@roblaszczak](https://github.com/roblaszczak)\n\n\n```\ngo test -json ./... | vgt\n```\n\n<div align=\"center\"><img src=\"https://github.com/roblaszczak/vgt/raw/main/docs/img3.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/roblaszczak/vgt@latest\n```\n\n### [⏫](#contents) Summarize `go test` with [tparse](https://github.com/mfridman/tparse)\n\nThis lightweight wrapper around STDOUT of JSON of `go test` will nicely render colorized test status, details of failures, duration, coverage, and package summary. — [@mfridman](https://github.com/mfridman)\n\n\n```\nset -o pipefail && go test ./... -json | tparse -all\n```\n\n<div align=\"center\"><img src=\"./img/tparse.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/mfridman/tparse@latest\n```\n\n### [⏫](#contents) Decorate `go test` with [richgo](https://github.com/kyoh86/richgo)\n\nAdd colors and enrich `go test` output. It can be used in CI pipeline and has lots of alternative visualizations and options. — [@kyoh86](https://github.com/kyoh86)\n\n\n```\nrichgo test ./...\n```\n\n<div align=\"center\"><img src=\"https://asciinema.org/a/99810.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/kyoh86/richgo@latest\n```\n\n### [⏫](#contents) Decorate `go test` with [gotest](https://github.com/rakyll/gotest)\n\nAdd colors to `go test` output. Very lightweight wrapper around `go test` STDOUT. — [@rakyll](https://github.com/rakyll)\n\n\n```\ngotest ./...\n```\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/jonasbn/go-test-demo/1.0.0/gotest-go-test-demo.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/rakyll/gotest@latest\n```\n\n### [⏫](#contents) Decorate `go test` with [gotestsum](https://github.com/gotestyourself/gotestsum)\n\nThis wrapper around `go test` renders test output in easy to read format. Also supports JUnit, JSON output, skipping slow tests, running custom binary. — [@dnephin](https://github.com/dnephin)\n\n\n```\ngotestsum --format dots\n```\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/442180/182284939-e08a0aa5-4504-4e30-9e88-207ef47f4537.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [⏫](#contents) Format `go test` results as documentation with [gotestdox](https://github.com/bitfield/gotestdox)\n\nDecorates `go test` results by converting CamelCaseTestNames into readable sentences. — [@bitfield](https://github.com/bitfield)\n\n\n```\ngotestdox ./...\n```\n\n<div align=\"center\"><img src=\"https://github.com/bitfield/gotestdox/raw/main/img/demo.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/bitfield/gotestdox/cmd/gotestdox@latest\n```\n\n### [⏫](#contents) Get slowest tests with [gotestsum](https://github.com/gotestyourself/gotestsum)\n\nThis is subcommand of `gotestsum` that processes JSON output of `go test` to find slowest tests. — [@dnephin](https://github.com/dnephin)\n\n\n```\ngo test -json -short ./... | gotestsum tool slowest --threshold 500ms\n```\n\nExample\n```\ngotest.tools/example TestSomething 1.34s\ngotest.tools/example TestSomethingElse 810ms\n```\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [⏫](#contents) Auto-Instrument skipping slowest tests with [gotestsum](https://github.com/gotestyourself/gotestsum)\n\nThis is subcommand of `gotestsum` that processes JSON output of `go test` to find slowest tests and instruments test cases to skip them with `t.Skip()` statements. — [@dnephin](https://github.com/dnephin)\n\n\n```\ngo test -json ./... | gotestsum tool slowest --skip-stmt \"testing.Short\" --threshold 200ms\n```\n\nExample\n```\ngotest.tools/example TestSomething 1.34s\ngotest.tools/example TestSomethingElse 810ms\n```\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [⏫](#contents) Automatically re-run failed tests with [gotestsum](https://github.com/gotestyourself/gotestsum)\n\nOther useful option of `gotestsum` is to re-run failed tests. For example, if you have flaky tests that are idempotent, then re-running them may be a quick fix. — [@dnephin](https://github.com/dnephin)\n\n\n```\ngotestsum --rerun-fails --packages=\"./...\"\n```\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [⏫](#contents) Make `JSUnit` test report with [gotestsum](https://github.com/gotestyourself/gotestsum)\n\nJUnit is widely used format for test reporting. — [@dnephin](https://github.com/dnephin)\n\n\n```\ngo test -json ./... | gotestsum --junitfile unit-tests.xml\n```\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [⏫](#contents) Make `JSUnit` test report with [go-junit-report](https://github.com/jstemmer/go-junit-report)\n\nJUnit is widely used format for test reporting. Go benchmark output is also supported. — [@jstemmer](https://github.com/jstemmer)\n\n\n```\ngo test -v 2>&1 ./... | go-junit-report -set-exit-code > report.xml\n```\n\nRequirements\n```\ngo install github.com/jstemmer/go-junit-report/v2@latest\n```\n\n### [⏫](#contents) Get packages without tests\n\nIf code coverage does not report packages without tests. For example for CI or quality control.\n\n\n```\ngo list -json ./... | jq -rc 'select((.TestGoFiles | length)==0) | .ImportPath'\n```\n\nExample\n```\ngithub.com/gin-gonic/gin/ginS\ngithub.com/gin-gonic/gin/internal/json\n```\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\n```\n\n### [⏫](#contents) Perform Mutation Testing with [ooze](https://github.com/gtramontina/ooze)\n\nMutation testing is a technique used to assess the quality and coverage of test suites. It involves introducing controlled changes to the code base, simulating common programming mistakes. These changes are, then, put to test against the test suites. A failing test suite is a good sign. It indicates that the tests are identifying mutations in the code—it \"killed the mutant\". If all tests pass, we have a surviving mutant. This highlights an area with weak coverage. It is an opportunity for improvement. — [@gtramontina](https://github.com/gtramontina)\n\n\n```\ngo test -v -tags=mutation\n```\n\n<div align=\"center\"><img src=\"https://github.com/gtramontina/ooze/blob/main/.assets/report.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo get github.com/gtramontina/ooze\n```\n\n### [⏫](#contents) Perform Mutation Testing with [avito-tech/go-mutesting](https://github.com/avito-tech/go-mutesting)\n\nThis is fork of [zimmski/go-mutesting](https://github.com/zimmski/go-mutesting). It has more mutators and latest updates. — [@vasiliyyudin](https://github.com/vasiliyyudin)\n\n\n```\ngo-mutesting ./...\n```\n\n```go\nfor _, d := range opts.Mutator.DisableMutators {\n  pattern := strings.HasSuffix(d, \"*\")\n\n-\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || (!pattern && name == d) {\n+\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || false {\n    continue MUTATOR\n  }\n}\n```\n\nRequirements\n```\ngo install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest\n```\n\n### [⏫](#contents) Perform Mutation Testing with [go-mutesting](https://github.com/zimmski/go-mutesting)\n\nFind common bugs source code that would pass tests. This is earliest tool for mutation testing in Go. More functions and permutations were added in other mutation Go tools it inspired. — [@zimmski](https://github.com/zimmski)\n\n\n```\ngo-mutesting ./...\n```\n\n```go\nfor _, d := range opts.Mutator.DisableMutators {\n  pattern := strings.HasSuffix(d, \"*\")\n\n-\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || (!pattern && name == d) {\n+\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || false {\n    continue MUTATOR\n  }\n}\n```\n\nRequirements\n```\ngo install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest\n```\n\n### [⏫](#contents) Trace tests with [go-test-trace](https://github.com/rakyll/go-test-trace)\n\nCollect test execution as distributed traces. This is useful for tracking test duration, failures, flakiness. You distributed tracing storage, search, UI, exploration, dashboards, alarms — all will automatically become test status collection. If you run integration tests in your CI, then it is particularly handy to investigate your integration tests same way as real requests, such as Go processes, databases, etc. However, if you do not have distributed traces, it is still useful for adhoc investigations. This tool processes STDOUT of `go test`. No automatic instrumentation is done. — [@rakyll](https://github.com/rakyll)\n\n\n```\ngo-test-trace ./...\n```\n\n<div align=\"center\"><img src=\"https://i.imgur.com/E18PYk4.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# open telemetry collector\n# traces UI (Datadog, Jaeger, Honeycomb, NewRelic)\ngo install github.com/rakyll/go-test-trace@latest\n```\n\n### [⏫](#contents) Speedup tests for large codebases\n\nAs of 2023-12-11, large codebases may be slow to run tests by default commands. Compiling package test binaries first and executing them later can lead to significant overall speedup.\n\n\n```\ngo test -c ./pkg/mypackage -o my_pkg_test_binary.bin\n./my_pkg_test_binary.bin | ... # normal test output post processing\n```\n\n\n## Dependencies\n\n### [⏫](#contents) Get Go version of current module\n\nFor example, setup correct Go version automatically from `go.mod` in CI.\n\n\n```\ngo mod edit -json | jq -r .Go\n```\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\n```\n\n### [⏫](#contents) Get Go versions of upstream modules\n\nUse this when upgrading version of Go or finding old modules.\n\n\n```\ngo list -deps -json ./... | jq -rc 'select(.Standard!=true and .Module.GoVersion!=null) | [.Module.GoVersion,.Module.Path] | join(\" \")' | sort -V | uniq\n```\n\nExample\n```\n1.11 github.com/ugorji/go/codec\n1.11 golang.org/x/crypto\n1.12 github.com/golang/protobuf\n```\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\n```\n\n### [⏫](#contents) Get directly dependent modules that can be upgraded\n\nKeep your modules updated. Similar function is integrated in VSCode official Go plugin and GoLand.\n\n\n```\ngo list -u -m $(go list -m -f '{{.Indirect}} {{.}}' all | grep '^false' | cut -d ' ' -f2) | grep '\\['\n```\n\nExample\n```\ngithub.com/goccy/go-json v0.5.1 [v0.7.3]\ngithub.com/golang/protobuf v1.3.3 [v1.5.2]\ngithub.com/json-iterator/go v1.1.9 [v1.1.11]\n```\n\n\n### [⏫](#contents) Get upstream modules without Go version\n\nFind outdated modules or imports that you need to upgrade.\n\n\n```\ngo list -deps -json ./... | jq -rc 'select(.Standard!=true and .Module.GoVersion==null) | .Module.Path' | sort -u\n```\n\nExample\n```\ngithub.com/facebookgo/clock\ngolang.org/x/text\ngopkg.in/yaml.v2\n```\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\n```\n\n### [⏫](#contents) Get available module versions\n\nThis works even if you did not download or install module locally. This is useful to check to which version you can upgrade to, what is the latest version, and whether there are v2+ major versions recognized by Go toolchain.\n\n\n```\ngo list -m -versions github.com/google/gofuzz\n```\n\n\n### [⏫](#contents) :fire: Get go module libyear, number of releases, version delta with [go-libyear](https://github.com/nieomylnieja/go-libyear)\n\n[libyear](https://libyear.com) is a simple measure of software dependency freshness. It is a single number telling you how up-to-date your dependencies are. For example Rails 5.0.0 (June 2016) is 1 libyear behind 5.1.2 (June 2017). This tool can also compute number of releases, and version number delta. — [@nieomylnieja](https://github.com/nieomylnieja)\n\n\n```\ngo-libyear /path/to/go.mod\n```\n\nExample\n```\npackage                             version  date        latest   latest_date  libyear\ngithub.com/nieomylnieja/go-libyear           2023-11-06                        2.41\ngithub.com/pkg/errors               v0.8.1   2019-01-03  v0.9.1   2020-01-14   1.03\ngithub.com/urfave/cli/v2            v2.20.0  2022-10-14  v2.25.7  2023-06-14   0.67\ngolang.org/x/mod                    v0.12.0  2023-06-21  v0.14.0  2023-10-25   0.35\ngolang.org/x/sync                   v0.3.0   2023-06-01  v0.5.0   2023-10-11   0.36\n```\n\nRequirements\n```\ngo install github.com/nieomylnieja/go-libyear/cmd/go-libyear@latest\n```\n\n### [⏫](#contents) Make graph of upstream modules with [modgraphviz](https://golang.org/x/exp/cmd/modgraphviz)\n\nFor each module, the node representing the greatest version (i.e., the version chosen by Go's minimal version selection algorithm) is colored green. Other nodes, which aren't in the final build list, are colored grey. — official Go team\n\n\n```\ngo mod graph | modgraphviz | dot -Tsvg -o mod-graph.svg\n```\n\n<div align=\"center\"><img src=\"./img/modgraphviz-go-featureprocessing.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nhttps://graphviz.org/download/\ngo install golang.org/x/exp/cmd/modgraphviz@latest\n```\n\n### [⏫](#contents) Make graph of upstream packages with [import-graph](https://github.com/nikolaydubina/import-graph)\n\nFind unexpected dependencies or visualize project. Works best for small number of packages, for large projects use `grep` to narrow down subgraph. Without `-deps` only for current module. — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo list -deps -json ./... | jq -c 'select(.Standard!=true) | {from: .ImportPath, to: .Imports[]}' | jsonl-graph | dot -Tsvg > package-graph.svg\n```\n\n<div align=\"center\"><img src=\"./img/packages-graph.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\nhttps://graphviz.org/download/\ngo install github.com/nikolaydubina/import-graph@latest\ngo install github.com/nikolaydubina/jsonl-graph@latest\n```\n\n### [⏫](#contents) Scrape details about upstream modules and make graph with [import-graph](https://github.com/nikolaydubina/import-graph)\n\nFind low quality or unmaintained dependencies. — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo mod graph | import-graph -i=gomod | jsonl-graph -color-scheme=file://$PWD/basic.json | dot -Tsvg > output.svg\n```\n\n<div align=\"center\"><img src=\"./img/gin-mod-graph-collected.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nhttps://graphviz.org/download/\ngo install github.com/nikolaydubina/import-graph@latest\ngo install github.com/nikolaydubina/jsonl-graph@latest\n```\n\n### [⏫](#contents) Scrape licenses of upstream dependencies with [go-licenses](https://github.com/google/go-licenses)\n\nCollect all the licenses for checking if you can use the project, for example in proprietary or commercial environment. — Google\n\n\n```\ngo-licenses csv github.com/gohugoio/hugo\n```\n\nExample\n```\ngithub.com/cli/safeexec,https://github.com/cli/safeexec/blob/master/LICENSE,BSD-2-Clause\ngithub.com/bep/tmc,https://github.com/bep/tmc/blob/master/LICENSE,MIT\ngithub.com/aws/aws-sdk-go,https://github.com/aws/aws-sdk-go/blob/master/LICENSE.txt,Apache-2.0\ngithub.com/jmespath/go-jmespath,https://github.com/jmespath/go-jmespath/blob/master/LICENSE,Apache-2.0\ngithub.com/gorilla/websocket,https://github.com/gorilla/websocket/blob/master/LICENSE,BSD-2-Clause\ngithub.com/pelletier/go-toml/v2,https://github.com/pelletier/go-toml/blob/master/v2/LICENSE,MIT\ngithub.com/spf13/cobra,https://github.com/spf13/cobra/blob/master/LICENSE.txt,Apache-2.0\ngithub.com/kyokomi/emoji/v2,https://github.com/kyokomi/emoji/blob/master/v2/LICENSE,MIT\ngo.opencensus.io,Unknown,Apache-2.0\ngithub.com/Azure/azure-storage-blob-go/azblob,https://github.com/Azure/azure-storage-blob-go/blob/master/azblob/LICENSE,MIT\ngithub.com/yuin/goldmark-highlighting,https://github.com/yuin/goldmark-highlighting/blob/master/LICENSE,MIT\n```\n\nRequirements\n```\ngo install github.com/google/go-licenses@latest\n```\n\n### [⏫](#contents) Explore dependencies with [goda](https://github.com/loov/goda)\n\nThis tool has extensive syntax for filtering dependencies graphs. It can work with packages and modules. — [Egon Elbre](egonelbre@gmail.com)\n\n\n```\ngoda graph . | dot -Tsvg -o graph.svg\ngoda graph -cluster -short \"github.com/nikolaydubina/go-cover-treemap:all\" | dot -Tsvg -o graph.svg\n```\n\n<div align=\"center\"><img src=\"https://github.com/loov/goda/raw/master/graph.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nhttps://graphviz.org/download/\ngo install github.com/loov/goda@latest\n```\n\n### [⏫](#contents) Explore dependencies interactively with [spaghetti](https://github.com/adonovan/spaghetti)\n\nUseful in large refactorings, dependency breaking, physical layout changes. — [Alan Donovan](https://github.com/adonovan), official Go team\n\n<div align=\"center\"><img src=\"https://github.com/adonovan/spaghetti/blob/main/screenshot.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/adonovan/spaghetti@latest\n```\n\n### [⏫](#contents) :fire: Explore dependencies graph interactively with [modview](https://github.com/bayraktugrul/modview)\n\nTransform your Go project's dependency graph into a dynamic, interactive visualization with modview. This powerful tool takes the complexity out of your module graph, offering a clear and explorable view of your project's dependencies. — [@bayraktugrul](https://github.com/bayraktugrul)\n\n\n```\nmodview --open\n```\n\n<div align=\"center\"><img src=\"https://github.com/bayraktugrul/modview/raw/main/modview-opt.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/bayraktugrul/modview@latest\n```\n\n### [⏫](#contents) :fire: Enforce Go code architecture with [go-arch-lint](https://github.com/fe3dback/go-arch-lint)\n\nArchitecture linter. Will check all project import path and compare with arch rules defined in yml file. Useful for hexagonal / onion / ddd / mvc / etc patterns. — [@fe3dback](https://github.com/fe3dback)\n\n\n```\ngo-arch-lint\n```\n\n<div align=\"center\"><img src=\"https://github.com/fe3dback/go-arch-lint/blob/master/docs/images/check-example.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/fe3dback/go-arch-lint@latest\n```\n\n### [⏫](#contents) :fire: Check Clean Architecture with [go-cleanarch](https://github.com/roblaszczak/go-cleanarch)\n\nClean architecture validator for go, like a The Dependency Rule and interaction between packages in your Go projects. — [@roblaszczak](https://github.com/roblaszczak)\n\n\n```\ngo-cleanarch\n```\n\nRequirements\n```\ngo install github.com/roblaszczak/go-cleanarch@latest\n```\n\n### [⏫](#contents) Use `go mod` directives\n\nTell Go compiler which versions of upstreams to include in your build. Tell all users of your module how to deal with versions of your module.\n\n```\n// Deprecated: use example.com/mod/v2 instead.\nmodule example.com/mod\n\ngo 1.16\n\nrequire example.com/other/thing v1.0.2\nrequire example.com/new/thing/v2 v2.3.4\nexclude example.com/old/thing v1.2.3\nreplace example.com/bad/thing v1.4.5 => example.com/good/thing v1.4.5\nretract [v1.9.0, v1.9.5]\n```\n\n\n### [⏫](#contents) :fire: Locally patch dependency with ``replace``\n\nThis can be useful for development. First appeared on [blog](https://eli.thegreenplace.net/2024/locally-patching-dependencies-in-go).\n\n\n```\n# clone your dependency to $DEP folder\n# make changes\ngo mod edit -replace github.com/google/go-cmp=$DEP\n```\n\n\n### [⏫](#contents) :fire: Locally patch dependency with ``go.work``\n\nThis is an alternative version may be more robust to accidental mistakes. First appeared on [blog](https://eli.thegreenplace.net/2024/locally-patching-dependencies-in-go).\n\n\n```\n# clone your dependency to $DEP folder\n# make changes\ngo work init\ngo work use . $DEP\n```\n\n\n## Code Visualization\n\n### [⏫](#contents) Make C4 diagram with [go-structurizr](https://github.com/krzysztofreczek/go-structurizr)\n\nThis library provides tools to generate [C4](https://c4model.com) diagrams. The process is a bit involved, however you get diagram generated from real Go code automatically. Steps are outlined in [blog](https://threedots.tech/post/auto-generated-c4-architecture-diagrams-in-go/). — [@krzysztofreczek](https://github.com/krzysztofreczek)\n\n<div align=\"center\"><img src=\"https://threedots.tech/post/auto-generated-c4-architecture-diagrams-in-go/tdl-go_structurizr_1_2.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nmanually defining Go main.go script to invoke library\ngraphviz\nmanual coloring spec (DB, classes)\n```\n\n### [⏫](#contents) Make graph of function calls with [callgraph](https://golang.org/x/tools/cmd/callgraph)\n\nVisualize complex or new project quickly or to study project. Requires `main.go` in module. Supports Graphviz output format. Has many options for filtering and formatting. — official Go team\n\n\n```\ncallgraph -format graphviz . | dot -Tsvg -o graph.svg\nrecommend: grep <package/class/func of interest>\nrecommend: grep -v Error since many packages report error\nrecommend: adding `rankdir=LR;` to graphviz file for denser graph\nrecommend: you would have to manually fix graphviz file first and last line\n```\n\n<div align=\"center\"><img src=\"img/callgraph.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install golang.org/x/tools/cmd/callgraph@latest\n```\n\n### [⏫](#contents) Make graph of function calls in package with [go-callvis](https://github.com/ofabry/go-callvis)\n\nQuickly track which packages current package is calling and why. — [@ofabry](https://github.com/ofabry)\n\n\n```\ngo-callvis .\n```\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/ofabry/go-callvis/master/images/syncthing.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/ofabry/go-callvis\n```\n\n### [⏫](#contents) Make PlantUML diagram with [goplantuml](https://github.com/jfeliu007/goplantuml)\n\nGenerates class diagram in widely used format with the information on structs, interfaces and their relationships. Render `.puml` files in for example [planttext.com](https://www.planttext.com). — [@jfeliu007](https://github.com/jfeliu007)\n\n\n```\ngoplantuml -recursive path/to/gofiles path/to/gofiles2\n```\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/jfeliu007/goplantuml/master/example/example.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo get github.com/jfeliu007/goplantuml/parser\ngo install github.com/jfeliu007/goplantuml/cmd/goplantuml@latest\n```\n\n### [⏫](#contents) Make PlantUML diagram with [go-plantuml](https://github.com/bykof/go-plantuml)\n\nAutomatically generate visualization of classes and interfaces for go packages. Recommend recursive option. Render `.puml` files in for example [planttext.com](https://www.planttext.com). — [@bykof](https://github.com/bykof)\n\n\n```\ngo-plantuml generate -d . -r -o graph.puml\n```\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/bykof/go-plantuml/master/docs/assets/graph.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/bykof/go-plantuml@latest\n```\n\n### [⏫](#contents) :fire: Visualize the entropy of a code base with a 3D force-directed graph with [dep-tree](https://github.com/gabotechs/dep-tree)\n\nThis excellent interactive visualisation tool lets you explore code base as 3D graph. The more decoupled and modular a code base is, the more spread and clustered the graph will look like. — [@gabotechs](https://github.com/gabotechs)\n\n<div align=\"center\"><img src=\"https://github.com/gabotechs/dep-tree/blob/main/docs/demo.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Make 3D chart of Go codebase with [gocity](https://github.com/rodrigo-brito/gocity)\n\nFresh artistic perspective on Go codebase. `GoCity` is an implementation of the Code City metaphor for visualizing source code - folders are districts; files are buildings; structs are buildings on the top of their files. This project has research paper \"[GoCity Code City for Go](https://homepages.dcc.ufmg.br/~mtov/pub/2019-saner-gocity.pdf)\" at SANER'19. Also available at [go-city.github.io](https://go-city.github.io). — [@rodrigo-brito](https://github.com/rodrigo-brito)\n\n<div align=\"center\"><img src=\"img/gocity.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/rodrigo-brito/gocity@latest\n```\n\n### [⏫](#contents) Make histogram of Go files per package\n\nFind when package is too big or too small. Adjust histogram length to maximum value.\n\n\n```\ngo list -json ./... | jq -rc '[.ImportPath, (.GoFiles | length | tostring)] | join(\" \")' | perl -lane 'print (\" \" x (20 - $F[1]), \"=\" x $F[1], \" \", $F[1], \"\\t\", $F[0])'\n```\n\nExample\n```\n================== 18\tgithub.com/gin-gonic/gin\n     ============= 13\tgithub.com/gin-gonic/gin/binding\n                 = 1\tgithub.com/gin-gonic/gin/internal/bytesconv\n                 = 1\tgithub.com/gin-gonic/gin/internal/json\n       =========== 11\tgithub.com/gin-gonic/gin/render\n```\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\n```\n\n### [⏫](#contents) Explore Go code in browser powered by `go-guru` with [pythia](https://github.com/fzipp/pythia)\n\nExplore Go source code in browser. It provides exported symbols summary for navigation. It answers questions like: definition; callers; implementers. It is browser frontend based on [go-guru](https://docs.google.com/document/d/1_Y9xCEMj5S-7rv2ooHpZNH15JgRT5iM742gJkw5LtmQ/edit), which was developed by Go core team from Google. — [@fzipp](https://github.com/fzipp)\n\n\n```\npythia net/http\n```\n\n<div align=\"center\"><img src=\"https://camo.githubusercontent.com/a7baec2bada145869272edf97d1123d1717ed68922c159b027d261bd6e1faeff/68747470733a2f2f7261772e6769746875622e636f6d2f667a6970702f7079746869612f67682d70616765732f696d616765732f7079746869615f73637265656e73686f742e706e67\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/fzipp/pythia@latest\ngo install golang.org/x/tools/cmd/guru@latest\n```\n\n### [⏫](#contents) Interactively visualize packages with [goexplorer](https://github.com/ofabry/goexplorer)\n\nBased on `go-callvis`, this tool is an interactive package explorer of packages. This tool have not been updated for a long time. — [@ofabry](https://github.com/ofabry)\n\n<div align=\"center\"><img src=\"https://github.com/ofabry/goexplorer/raw/master/images/screen.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Make D2 graph of architecture and dependencies with [go-arch-lint graph](https://github.com/fe3dback/go-arch-lint)\n\nCan include vendors or not, and be of type 'flow' or 'di'. — [@fe3dback](https://github.com/fe3dback)\n\n\n```\ngo-arch-lint graph\n```\n\n<div align=\"center\"><img src=\"https://github.com/fe3dback/go-arch-lint/blob/master/docs/images/graph-example.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/fe3dback/go-arch-lint@latest\n```\n\n## Code Generation\n\n### [⏫](#contents) Run `go:generate` in parallel\n\nOfficial Go team [encourages](https://github.com/golang/go/issues/20520) to run sequentially. However, in certain situations, such as lots of mocks, parallelization helps a lot, albeit, you should consider including your generated files in git. The solution below spawns multiple processes, each per pkg.\n\n\n```\ngrep -rnw \"go:generate\" -E -l \"${1:-*.go}\" . | xargs -L1 dirname | sort -u | xargs -P 8 -I{} go generate {}\n```\n\n\n### [⏫](#contents) Generate `String` method for enum types\n\nThis is an official tool for generating `String` for enums. It supports overrides via comments. — official Go team\n\n```go\npackage painkiller\n\n//go:generate stringer -type=Pill -linecomment\n\ntype Pill int\n\nconst (\n  Placebo Pill = iota\n  Ibuprofen\n  Paracetamol\n  PillAspirin   // Aspirin\n  Acetaminophen = Paracetamol\n)\n\n// \"Acetaminophen\"\nvar s string = Acetaminophen.String()\n```\n\nRequirements\n```\ngo install golang.org/x/tools/cmd/stringer@latest\n```\n\n### [⏫](#contents) :fire: Generate enums encoding with [go-enum-encoding](https://github.com/nikolaydubina/go-enum-encoding)\n\nGenerate encoding code for enums. This follows json struct tag notation. — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo generate ./...\n```\n\n```go\ntype Color struct{ c uint }\n\n//go:generate go-enum-encoding -type=Color\nvar (\n  Undefined = Color{}  // json:\"-\"\n  Red       = Color{1} // json:\"red\"\n  Green     = Color{2} // json:\"green\"\n  Blue      = Color{3} // json:\"blue\"\n)\n```\n\nRequirements\n```\ngo install github.com/nikolaydubina/go-enum-encoding@latest\n```\n\n### [⏫](#contents) :fire: Generate enums with [goenums](https://github.com/zarldev/goenums)\n\nGenerate strict and fast enums. Generated code is much more tightly typed than just iota defined enums. You will get JSON decoder and encoder as well. This tool allows to generate extra fields and default values in enum structs. — [@zarldev](https://github.com/zarldev)\n\n\n```\ngoenums <file-with-iota.go>\n```\n\n```go\npackage milkyway\n\ntype planet int // Gravity[float64],RadiusKm[float64],MassKg[float64],OrbitKm[float64],OrbitDays[float64],SurfacePressureBars[float64],Moons[int],Rings[bool]\n\n//go:generate goenums planets.go\nconst (\n  unknown planet = iota // invalid\n  mercury               // Mercury 0.378,2439.7,3.3e23,57910000,88,0.0000000001,0,false\n  venus                 // Venus 0.907,6051.8,4.87e24,108200000,225,92,0,false\n  earth                 // Earth 1,6378.1,5.97e24,149600000,365,1,1,false\n  mars                  // Mars 0.377,3389.5,6.42e23,227900000,687,0.01,2,false\n  jupiter               // Jupiter 2.36,69911,1.90e27,778600000,4333,20,4,true\n  saturn                // Saturn 0.916,58232,5.68e26,1433500000,10759,1,7,true\n  uranus                // Uranus 0.889,25362,8.68e25,2872500000,30687,1.3,13,true\n  neptune               // Neptune 1.12,24622,1.02e26,4495100000,60190,1.5,2,true\n)\n```\n\nRequirements\n```\ngo install github.com/zarldev/goenums@latest\n```\n\n### [⏫](#contents) Generate data types from JSON Schema with [go-jsonschema](https://github.com/omissis/go-jsonschema)\n\nJSON Schema is widely used standard for definition of structured data types. This tool will generate Go struct, decoder and validation based on JSON Schema spec. — [@omissis](https://github.com/omissis)\n\n\n```\ngo-jsonschema -p main myschema.jsonschema\n```\n\n```go\n// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.\n\npackage main\n\nimport \"encoding/json\"\nimport \"fmt\"\n\ntype Veggie struct {\n        // Do I like this vegetable?\n        VeggieLike bool `json:\"veggieLike\" yaml:\"veggieLike\" mapstructure:\"veggieLike\"`\n\n        // The name of the vegetable.\n        VeggieName string `json:\"veggieName\" yaml:\"veggieName\" mapstructure:\"veggieName\"`\n}\n\n// UnmarshalJSON implements json.Unmarshaler.\nfunc (j *Veggie) UnmarshalJSON(b []byte) error {\n        var raw map[string]interface{}\n        if err := json.Unmarshal(b, &raw); err != nil {\n                return err\n        }\n        if v, ok := raw[\"veggieLike\"]; !ok || v == nil {\n                return fmt.Errorf(\"field veggieLike in Veggie: required\")\n        }\n        if v, ok := raw[\"veggieName\"]; !ok || v == nil {\n                return fmt.Errorf(\"field veggieName in Veggie: required\")\n        }\n        type Plain Veggie\n        var plain Plain\n        if err := json.Unmarshal(b, &plain); err != nil {\n                return err\n        }\n        *j = Veggie(plain)\n        return nil\n}\n\n// A representation of a person, company, organization, or place\ntype A2Schema struct {\n        // Fruits corresponds to the JSON schema field \"fruits\".\n        Fruits []string `json:\"fruits,omitempty\" yaml:\"fruits,omitempty\" mapstructure:\"fruits,omitempty\"`\n\n        // Vegetables corresponds to the JSON schema field \"vegetables\".\n        Vegetables []Veggie `json:\"vegetables,omitempty\" yaml:\"vegetables,omitempty\" mapstructure:\"vegetables,omitempty\"`\n}\n```\n\nExample\n```\n{\n      \"$id\": \"https://example.com/arrays.schema.json\",\n      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n      \"description\": \"A representation of a person, company, organization, or place\",\n      \"type\": \"object\",\n      \"properties\": {\n            \"fruits\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                        \"type\": \"string\"\n                  }\n            },\n            \"vegetables\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                        \"$ref\": \"#/$defs/veggie\"\n                  }\n            }\n      },\n      \"$defs\": {\n            \"veggie\": {\n                  \"type\": \"object\",\n                  \"required\": [\n                        \"veggieName\",\n                        \"veggieLike\"\n                  ],\n                  \"properties\": {\n                        \"veggieName\": {\n                              \"type\": \"string\",\n                              \"description\": \"The name of the vegetable.\"\n                        },\n                        \"veggieLike\": {\n                              \"type\": \"boolean\",\n                              \"description\": \"Do I like this vegetable?\"\n                        }\n                  }\n            }\n      }\n}\n```\n\nRequirements\n```\ngo get github.com/atombender/go-jsonschema/...\ngo install github.com/atombender/go-jsonschema@latest\n```\n\n### [⏫](#contents) Generate constructor for a struct with [gonstructor](https://github.com/moznion/gonstructor)\n\nConstructor is a widely used useful pattern. This tool generates basic version of it that passes arguments to struct. It also supports initializer method. — [@moznion](https://github.com/moznion)\n\n```go\n//go:generate gonstructor --type=Structure --constructorTypes=allArgs\ntype Structure struct {\n  foo string\n  bar io.Reader\n  Buz chan interface{}\n}\n```\n\nRequirements\n```\ngo install golang.org/x/tools/cmd/goimports@latest\ngo install github.com/moznion/gonstructor/cmd/gonstructor@latest\n```\n\n### [⏫](#contents) Generate Table Driven Tests with [gotests](https://github.com/cweill/gotests)\n\nThis tool generates basic test placeholder. It is included into official Go plugin in VSCode and other major code editors. — [@cweill](https://github.com/cweill)\n\n<div align=\"center\"><img src=\"https://github.com/cweill/GoTests-Sublime/raw/master/gotests.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Generate mocks with [mockgen](https://github.com/golang/mock)\n\nThis mocking framework integrates well with Go `testing` package. — Go Core team\n\n\n```\nmockgen . Conn,Driver\n```\n\n```go\n# foo.go\ntype Foo interface {\n  Bar(x int) int\n}\n\nfunc SUT(f Foo) {\n// ...\n}\n# foo_test.go\nfunc TestFoo(t *testing.T) {\n  ctrl := gomock.NewController(t)\n  defer ctrl.Finish()\n\n  m := NewMockFoo(ctrl)\n\n  // Does not make any assertions. Executes the anonymous functions and returns\n  // its result when Bar is invoked with 99.\n  m.\n    EXPECT().\n    Bar(gomock.Eq(99)).\n    DoAndReturn(func(_ int) int {\n      time.Sleep(1*time.Second)\n      return 101\n    }).\n    AnyTimes()\n\n  // Does not make any assertions. Returns 103 when Bar is invoked with 101.\n  m.\n    EXPECT().\n    Bar(gomock.Eq(101)).\n    Return(103).\n    AnyTimes()\n\n  SUT(m)\n}\n```\n\nRequirements\n```\ngo install github.com/golang/mock/mockgen@v1.6.0\n```\n\n### [⏫](#contents) Generate interface for a struct with [ifacemaker](https://github.com/vburenin/ifacemaker)\n\nThis is a development helper program that generates a Golang interface by inspecting the structure methods of an existing .go file. The primary use case is to generate interfaces for [gomock](https://github.com/golang/mock), so that [gomock](https://github.com/golang/mock) can generate mocks from those interfaces. This makes unit testing easier. — [@vburenin](https://github.com/vburenin)\n\n\n```\nifacemaker -f human.go -s Human -i HumanIface -p humantest -y \"HumanIface makes human interaction easy\" -c \"DONT EDIT: Auto generated\"\n```\n\n```go\n# human.go\npackage main\n\nimport \"fmt\"\n\ntype Human struct {\n  name string\n  age  int\n}\n\n// Returns the name of our Human.\nfunc (h *Human) GetName() string {\n  return h.name\n}\n\n// Our Human just had a birthday! Increase its age.\nfunc (h *Human) Birthday() {\n  h.age += 1\n  fmt.Printf(\"I am now %d years old!\\n\", h.age)\n}\n\n// Make the Human say hello.\nfunc (h *Human) SayHello() {\n  fmt.Printf(\"Hello, my name is %s, and I am %d years old.\\n\", h.name, h.age)\n}\n\nfunc main() {\n  human := &Human{name: \"Bob\", age: 30}\n  human.GetName()\n  human.SayHello()\n  human.Birthday()\n}\n\n# human_interface.go\n// DONT EDIT: Auto generated\npackage humantest\n\n// HumanIface makes human interaction easy\ntype HumanIface interface {\n  // Returns the name of our Human.\n  GetName() string\n  // Our Human just had a birthday! Increase its age.\n  Birthday()\n  // Make the Human say hello.\n  SayHello()\n}\n```\n\nRequirements\n```\ngo install github.com/vburenin/ifacemaker@latest\n```\n\n### [⏫](#contents) Generate interface for a struct with [interfacer](https://github.com/rjeczalik/interfaces)\n\nThis tool generates interface for a struct. Can be invoked in `go:generate`. — [@rjeczalik](https://github.com/rjeczalik)\n\n\n```\ninterfacer -for os.File -as mock.File\n```\n\n```go\n// Created by interfacer; DO NOT EDIT\n\npackage mock\n\nimport (\n        \"os\"\n)\n\n// File is an interface generated for \"os\".File.\ntype File interface {\n        Chdir() error\n        Chmod(os.FileMode) error\n        Chown(int, int) error\n        Close() error\n        Fd() uintptr\n        Name() string\n        Read([]byte) (int, error)\n        ReadAt([]byte, int64) (int, error)\n        Readdir(int) ([]os.FileInfo, error)\n        Readdirnames(int) ([]string, error)\n        Seek(int64, int) (int64, error)\n        Stat() (os.FileInfo, error)\n        Sync() error\n        Truncate(int64) error\n        Write([]byte) (int, error)\n        WriteAt([]byte, int64) (int, error)\n        WriteString(string) (int, error)\n}\n```\n\nRequirements\n```\ngo install github.com/rjeczalik/interfaces/cmd/interfacer@latest\n```\n\n### [⏫](#contents) Generate interface for a struct with [struct2interface](https://github.com/reflog/struct2interface)\n\nThis is alternative tool for interface generation that is aimed to be faster and leaner. It generates only pointer method receiver methods for a struct. — [@reflog](https://github.com/reflog)\n\n\n```\nstruct2interface -f . -i IDecimal -p fpdecimal -s Decimal -o idecimal.go\n```\n\nRequirements\n```\ngo install github.com/reflog/struct2interface@latest\n```\n\n### [⏫](#contents) Generate interface for `CSV` file with [structer](https://github.com/rjeczalik/interfaces)\n\nThis tool generates struct that can read and write `CSV` file of this struct. Order of fields is hardcoded. — [@rjeczalik](https://github.com/rjeczalik)\n\n\n```\nstructer -f aws-billing.csv -tag json -as billing.Record\n```\n\n```go\n# aws-billing.csv\n# \"InvoiceID\",\"PayerAccountId\",\"LinkedAccountId\",\"RecordType\",\"RecordID\",\"BillingPeriodStartDate\",\"BillingPeriodEndDate\",\"InvoiceDate\"\n# \"Estimated\",\"123456\",\"\",\"PayerLineItem\",\"5433212345\",\"2016/01/01 00:00:00\",\"2016/01/31 23:59:59\",\"2016/01/21 19:19:06\"          \n\n# record.go\n// Record is a struct generated from \"aws-billing.csv\" file.\ntype Record struct {\n        InvoiceID              string    `json:\"invoiceID\"`\n        PayerAccountID         int64     `json:\"payerAccountID\"`\n        LinkedAccountID        string    `json:\"linkedAccountID\"`\n        RecordType             string    `json:\"recordType\"`\n        RecordID               int64     `json:\"recordID\"`\n        BillingPeriodStartDate time.Time `json:\"billingPeriodStartDate\"`\n        BillingPeriodEndDate   time.Time `json:\"billingPeriodEndDate\"`\n        InvoiceDate            time.Time `json:\"invoiceDate\"`\n}\n\n// MarshalCSV encodes r as a single CSV record.\nfunc (r *Record) MarshalCSV() ([]string, error) {\n    ...\n}\n\n// UnmarshalCSV decodes a single CSV record into r.\nfunc (r *Record) UnmarshalCSV(record []string) error {\n    ...\n}\n```\n\nRequirements\n```\ngo install github.com/rjeczalik/interfaces/cmd/structer@latest\n```\n\n### [⏫](#contents) :fire: Generate decorator for interface with [gowrap](https://github.com/hexdigest/gowrap)\n\nGoWrap is a command line tool that generates decorators for Go interface types using simple templates. With GoWrap you can easily add metrics, tracing, fallbacks, pools, and many other features into your existing code in a few seconds. — [@hexdigest](https://github.com/hexdigest)\n\n\n```\ngowrap gen -p io -i Reader -t prometheus -o reader_with_metrics.go\n```\n\n<div align=\"center\"><img src=\"https://github.com/hexdigest/gowrap/blob/master/gowrap.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/hexdigest/gowrap/cmd/gowrap@latest\n```\n\n### [⏫](#contents) Modify struct field tags with [gomodifytags](https://github.com/fatih/gomodifytags)\n\nThis tool makes it easy to update, add or delete the tags and options in a struct field. You can add new tags, update existing tags (such as appending a new key, i.e: db, xml, etc..) or remove existing tags. It's intended to be used by an editor, but also has modes to run it from the terminal. — [@fatih](https://github.com/fatih)\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/438920/32691304-a1c7e47c-c716-11e7-977c-f4d0f8c616be.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/fatih/gomodifytags@latest\n```\n\n### [⏫](#contents) :fire: Generate code from OpenAPI 3 specification with [oapi-codegen](https://github.com/oapi-codegen/oapi-codegen)\n\nGenerate Go client and server boilerplate from OpenAPI 3 specifications. — [@deepmap](https://github.com/deepmap)\n\n\n```\noapi-codegen --config=config.yaml api.yaml\n```\n\nRequirements\n```\ngo install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest\n```\n\n### [⏫](#contents) :fire: Generate C-Go Bindings with [c-for-go](https://github.com/xlab/c-for-go?tab=readme-ov-file)\n\nThis project allows to reuse existing C/C++ libraries in your Go applications, by automatically creating c-go bindings for a given set of C headers and the manifest file. We believe in component-based software engineering and think that reusing C/C++ code in Go applications could bring a huge boost to developer's productivity and system's performance. Read more about the motivation: top reasons to use bindings. — [@xlab](https://github.com/xlab)\n\n<div align=\"center\"><img src=\"https://github.com/xlab/c-for-go/raw/master/docs/overview.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n## Generics\n\n### [⏫](#contents) :fire: Enum via generics with [enum](https://github.com/orsinium-labs/enum)\n\nType safe enums for Go without code generation or reflection. — [@orsinium](https://github.com/orsinium)\n\n```go\ntype Color enum.Member[string]\n\nvar (\n  Red    = Color{\"red\"}\n  Green  = Color{\"green\"}\n  Blue   = Color{\"blue\"}\n  Colors = enum.New(Red, Green, Blue)\n)\n```\n\n\n## Refactor\n\n### [⏫](#contents) Replace symbol with `gofmt`\n\nI found this in announcement [notice](https://github.com/golang/go/commit/2580d0e08d5e9f979b943758d3c49877fb2324cb) of Go 1.18 for changes to `interface{}` to `any`. This can be useful for other refactorings too.\n\n\n```\ngofmt -w -r 'interface{} -> any' .\n```\n\n\n### [⏫](#contents) Apply refactoring patches with [gopatch](https://github.com/uber-go/gopatch)\n\nWith this tool it is very easy to perform refactorings. It is also possible to organize and maintain your refactoring procedures through patches. — Uber\n\n```go\n@@\n@@\n-import \"errors\"\n\n-errors.New(fmt.Sprintf(...))\n+fmt.Errorf(...)\n```\n\nExample\n```\nreturn errors.New(fmt.Sprintf(\"invalid port: %v\", err))\n// becomes\nreturn fmt.Errorf(\"invalid port: %v\", err)\n```\n\n\n### [⏫](#contents) Keep consistent ordering of imports with [goimports](https://pkg.go.dev/golang.org/x/tools/cmd/goimports)\n\nThis is official tool for for grouping and sorting imports. However, it has only basic grouping functionality. — Go Core team\n\n\n```\ngoimports -w -local .\n```\n\nRequirements\n```\ngo install golang.org/x/tools/cmd/goimports@latest\n```\n\n### [⏫](#contents) Keep consistent ordering of imports with [gci](https://github.com/daixiang0/gci)\n\nThis tool splits all import blocks into different sections, now support five section types: standard (e.g. 'fmt'); custom; default; blank; dot. It will keep each section sorted and keep ordering of sections consistent. — [@daixiang0](https://github.com/daixiang0)\n\n\n```\ngci write -s standard -s default -s \"prefix(github.com/daixiang0/gci)\" main.go\n```\n\n```go\n// before\npackage main\nimport (\n  \"golang.org/x/tools\"\n  \n  \"fmt\"\n  \n  \"github.com/daixiang0/gci\"\n)\n\n// after\npackage main\nimport (\n    \"fmt\"\n\n    \"golang.org/x/tools\"\n\n    \"github.com/daixiang0/gci\"\n)\n```\n\nRequirements\n```\ngo install github.com/daixiang0/gci@latest\n```\n\n### [⏫](#contents) Keep consistent ordering of imports with [goimportx](https://github.com/anqiansong/goimportx/tree/main)\n\nThis tool groups and sorts imports within groups. It keeps consistent ordering of groups. Detection of groups may be not always accurate. — [@anqiansong](https://github.com/anqiansong)\n\n\n```\ngoimportx --file /path/to/file.go --group \"system,local,third\"\n```\n\n```go\npackage main\n\nimport (\n  \"flag\"\n  \"io\"\n  \"log\"\n  \"os\"\n\n  \"github.com/nikolaydubina/mdpage/page\"\n  \"github.com/nikolaydubina/mdpage/render\"\n  yaml \"gopkg.in/yaml.v3\"\n)\n```\n\nRequirements\n```\ngo install github.com/anqiansong/goimportx@latest\n```\n\n## Errors\n\n### [⏫](#contents) Errors with return traces with [errtrace](https://github.com/bracesdev/errtrace)\n\nReturn trace is the path that error took to return to user. This can be more illustrative than typical stack trace that produced the error. This tool have convenience automatic instrumentation CLI to update your code. — [@bracesdev](https://github.com/bracesdev)\n\n\n```\ngit ls-files -- '*.go' | xargs errtrace -w\n```\n\nRequirements\n```\nuse package \"braces.dev/errtrace\"\ninstrument code by wrapping errors through all functions with this library\n```\n\n### [⏫](#contents) Errors with stack traces and source fragments with [tracerr](https://github.com/ztrue/tracerr)\n\nThis library collects stack traces and pretty prints code fragments. Stack traces induce performance penalty. — [@ztrue](https://github.com/ztrue)\n\n```go\npackage main\n\nimport (\n  \"io/ioutil\"\n\n  \"github.com/ztrue/tracerr\"\n)\n\nfunc main() {\n  if err := read(); err != nil {\n    tracerr.PrintSourceColor(err)\n  }\n}\n\nfunc read() error {\n  return readNonExistent()\n}\n\nfunc readNonExistent() error {\n  _, err := ioutil.ReadFile(\"/tmp/non_existent_file\")\n  // Add stack trace to existing error, no matter if it's nil.\n  return tracerr.Wrap(err)\n}\n```\n\n<div align=\"center\"><img src=\"https://github.com/ztrue/tracerr/raw/master/output.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Pretty print `panic` messages with [panicparse](https://github.com/maruel/panicparse)\n\nRead `panic` messages easier. Need to redirect STDERR to this tool with `panic` stack traces. The tool has HTML output and does lots of deduplication and enhancements. Refer to examples in original repo. — [@maruel](https://github.com/maruel)\n\n\n```\ngo test -v |& pp\n```\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/wiki/maruel/panicparse/parse.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/maruel/panicparse/v2/cmd/pp@latest\n```\n\n## Build\n\n### [⏫](#contents) :fire: Fetch private dependencies in CI\n\nIf you are building in CI (e.g. GitHub Actions), you need to download private repositories. Common way to accomplish this is with job like below.\n\n```yaml\nname: go private modules\nenv:\n  USER: ${{ secrets.USER }}\n  TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}\nrun: git config --global url.\"https://${USER}:${TOKEN}@github.com\".insteadOf \"https://github.com\"\n```\n\n\n### [⏫](#contents) Show compiler optimization decisions on heap and inlining\n\nBuilding with `-m` flag will show decisions of compiler on inlining and heap escape. This can help you to validate your understanding of your code and optimize it.\n\n\n```\ngo build -gcflags=\"-m -m\" . 2>&1 | grep inline\n```\n\nExample\n```\n...\n./passengerfp.go:25:6: cannot inline (*PassengerFeatureTransformer).Fit: function too complex: cost 496 exceeds budget 80\n...\n./passengerfp.go:192:6: can inline (*PassengerFeatureTransformer).NumFeatures with cost 35 as: method(*PassengerFeatureTransformer) func() int { if e == nil { return 0 }; count := 6; count += (*transformers.OneHotEncoder).NumFeatures(e.Sex); count += (*transformers.OneHotEncoder).NumFeatures(e.Embarked); return count }\n...\n./passengerfp.go:238:43: inlining call to transformers.(*OneHotEncoder).FeatureNames\n./passengerfp.go:238:43: inlining call to transformers.(*OneHotEncoder).NumFeatures\n...\n./passengerfp.go:151:7: parameter e leaks to {heap} with derefs=0:\n./passengerfp.go:43:11: make(map[string]uint) escapes to heap\n```\n\n\n### [⏫](#contents) Disable inlining\n\nUsually you may not need it, but can reduce binary size and even improve performance.\n\n\n```\ngo build -gcflags=\"-l\" .\n```\n\n\n### [⏫](#contents) Aggressive inlining\n\nUsually you may not need it, but can improve performance. This includes mid-stack inlining.\n\n\n```\ngo build -gcflags=\"-l -l -l -l\" .\n```\n\n\n### [⏫](#contents) Profile-guided optimization\n\nStarting go 1.20 compiler supports Profile-guided optimization. You need to collect profiles and then supply in computation to compiler. You can get improvement in performance by around 4%. Official [guideline](https://go.dev/doc/pgo).\n\n\n```\n1. store a `pprof` CPU profile with filename default.pgo in the main package directory of the profiled binary\n2. build with `go build -pgo=auto``, which will pick up `default.pgo` files automatically.\n```\n\n\n### [⏫](#contents) Manually disable or enable `cgo`\n\nDisable `cgo` with `CGO_ENABLED=0` and enable with `CGO_ENABLED=1`. If you don't, `cgo` may end-up being enabled or code dynamically linked if, for example, you use some `net` or `os` packages. You may want to disable `cgo` to improve performance, since compiler and runtime would have easier job optimizing code. This also should reduce your image size, as you can have alpine image with less shared libraries.\n\n\n### [⏫](#contents) Include metadata in binary during compilation with `ldflags`\n\nYou can pass metadata through compiler to your binary. This is useful for including things like git commit, database schema version, integrity hashes. Variables can only be strings.\n\n\n```\ngo build -v -ldflags=\"-X 'main.Version=v1.0.0'\"\ngo build -v -ldflags=\"-X 'my/pkg/here.Variable=some-string'\"\n```\n\n```go\npackage main\n\nvar Version string\n\nfunc main() {\n  // Version here has some value\n  ...\n}\n```\n\n\n### [⏫](#contents) :fire: Check if symbol or package is included in binary\n\nThis is useful for investigations during performance optimization, security, or compiler work. First spotted in [blog](https://rednafi.com/go/omit_dev_dependencies_in_binaries/).\n\n\n```\ngo tool nm main | grep -Ei '<symbol A>|<symbol B>|...'\ngo tool nm main | grep -Ei 'golangci-lint|gofumpt'\n```\n\n\n### [⏫](#contents) :fire: Build for Raspberry Pi, Virtual Machine, embedded or normal PC with [gokrazy](https://github.com/gokrazy/gokrazy)\n\nTurn your Go program(s) into an appliance running on the Raspberry Pi 3, Pi 4, Pi 5, Pi Zero 2 W, or amd64 PCs! [gokrazy.org](https://gokrazy.org/). The surface area for security vulnerabilities is drastically reduced. gokrazy uses its own minimal Go userland instead of a traditional Linux distribution base. The root filesystem is entirely read-only (making persistent malware installation hard) and new versions of the system are installed by overwriting the root file system with the new version. No default shell access: There is neither xz nor OpenSSH on a gokrazy system. Interactive access for debugging is possible, but needs to be explicitly started. — [@stapelberg](https://github.com/stapelberg)\n\n\n```\nfollow instructions at: https://gokrazy.org/quickstart/\n```\n\nRequirements\n```\ngo install github.com/gokrazy/tools/cmd/gok@main\n```\n\n### [⏫](#contents) :fire: Visualise dependencies size in compiled binaries with [go-size-analyzer](https://github.com/Zxilly/go-size-analyzer)\n\nA tool for analyzing the dependencies in compiled Golang binaries, providing insight into their impact on the final build. WebAssembly demo: [https://gsa.zxilly.dev](https://gsa.zxilly.dev). — [@Zxilly](https://github.com/Zxilly)\n\n\n```\ngsa --web target_binary\n```\n\n<div align=\"center\"><img src=\"https://github.com/Zxilly/go-size-analyzer/assets/31370133/e69583ce-b189-4a0d-b108-c3b7d5c33a82\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/Zxilly/go-size-analyzer/cmd/gsa@latest\n```\n\n### [⏫](#contents) Make treemap breakdown of Go executable binary with [go-binsize-treemap](https://github.com/nikolaydubina/go-binsize-treemap)\n\nUseful for studying Go compiler, large projects, projects with C/C++ and `cgo`, 3rd party dependencies, embedding. However, total size may not be something to worry about for your executable. — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo tool nm -size <binary finename> | go-binsize-treemap > binsize.svg\n```\n\n<div align=\"center\"><img src=\"https://github.com/nikolaydubina/go-binsize-treemap/blob/main/docs/hugo.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/nikolaydubina/go-binsize-treemap@latest\n```\n\n### [⏫](#contents) Custom import path\n\nGo can automatically fetch from custom http/https servers using `<meta>` tag to discover how to fetch code. There are multiple tools that can help set this up. This can help for security and analytics. This is also known as vanity URLs. [documentation](https://pkg.go.dev/cmd/go#hdr-Remote_import_paths).\n\n```\n# some notable examples\ngolang.org/x/exp\ngo.uber.org/multierr\nhonnef.co/go/tools/cmd/staticcheck\n```\n\n\n### [⏫](#contents) Custom import path with [govanityurls](https://github.com/GoogleCloudPlatform/govanityurls)\n\nSimple HTTP server that lets you host custom import paths for your Go packages. — Google\n\n\n```\ngovanityurls\n```\n\nRequirements\n```\ngo install github.com/GoogleCloudPlatform/govanityurls@latest\n```\n\n### [⏫](#contents) Custom import path with [sally](https://github.com/uber-go/sally)\n\nSimple HTTP server that lets you host custom import paths for your Go packages. — Uber\n\n\n```\nsally\n```\n\nRequirements\n```\ngo install go.uber.org/sally@latest\n```\n\n### [⏫](#contents) Custom import path with [kkn.fi/vanity](https://kkn.fi/vanity)\n\nSimple HTTP server that lets you host custom import paths for your Go packages. — [@kare](https://github.com/kare)\n\n\n```\nvanity\n```\n\nRequirements\n```\ngo get kkn.fi/vanity\n```\n\n### [⏫](#contents) Custom import path enforcement\n\nWhen import path is using custom domain, it is possible to block code from compilation unless it is used. This can help ensure security and prevent breaking changes. [documentation](https://pkg.go.dev/cmd/go#hdr-Import_path_checking).\n\n```go\npackage pdf // import \"rsc.io/pdf\"\n```\n\n\n### [⏫](#contents) Manage multiple Go versions with [Goenv](https://github.com/Norwik/Goenv)\n\nThis tool makes it easier for managing multiple Go versions on same host. This works through intercepting Go commands and directing them to the right Go version bin and directory. Official Go [documentation](https://go.dev/doc/manage-install) on this topic. — [@clivern](https://github.com/clivern)\n\n<div align=\"center\"><img src=\"https://github.com/Norwik/Goenv/raw/main/static/screenshot-1.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) :fire: Transpile C to Go with [cxgo](https://github.com/gotranspile/cxgo)\n\nCxGo is a tool for translating C source code to Go (aka transpiler, source-to-source compiler). It uses cc v3 for preprocessing and parsing C (no clang/gcc dependencies!) and a custom type-checker and AST translation layer to make the best output possible. — [@dennwc](https://github.com/dennwc)\n\n\n```\ncxgo file main.c\n```\n\nRequirements\n```\ngo install github.com/gotranspile/cxgo/cmd/cxgo@latest\n```\n\n### [⏫](#contents) :fire: Transpile Go to Javascript with [gopherjs](https://github.com/gopherjs/gopherjs)\n\nGopherJS compiles Go code (go.dev) to pure JavaScript code. Its main purpose is to give you the opportunity to write front-end code in Go which will still run in all browsers. — [@neelance](https://github.com/neelance)\n\n\n```\ngopherjs build <package>\n```\n\nRequirements\n```\ngo install github.com/gopherjs/gopherjs@v1.19.0-beta1\n```\n\n### [⏫](#contents) :fire: Run compile-time function evaluation with [prep](https://github.com/pijng/prep)\n\nBy using prep.Comptime, you can evaluate functions at compile time, replacing them with their computed results. — [@pijng](https://github.com/pijng)\n\n\n```\ngo build -a -toolexec=\"prep\" main.go\n```\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n  \"github.com/pijng/prep\"\n)\n\nfunc main() {\n  // This will be evaluated at compile-time\n  result := prep.Comptime(fibonacci(300))\n\n  fmt.Println(\"Result:\", result)\n}\n\nfunc fibonacci(n int) int {\n  fmt.Printf(\"calculating fibonacci for %d\\n\", n)\n\n  if n <= 1 {\n    return n\n  }\n  a, b := 0, 1\n  for i := 2; i <= n; i++ {\n    a, b = b, a+b\n  }\n  return b\n}\n```\n\nRequirements\n```\ngo install github.com/pijng/prep/cmd/prep@latest\n```\n\n## Assembly\n\n### [⏫](#contents) Get assembly of Go code snippets online\n\nUse [godbolt.org](https://godbolt.org) to compile and see assembly of short Go code. You can check different platforms and compilers including `cgo`. This tool is commonly used by C++ community. — [@mattgodbolt](https://github.com/mattgodbolt)\n\n<div align=\"center\"><img src=\"./img/godbolt.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Get Go SSA intermediary representation with [ssaplayground](https://github.com/golang-design/ssaplayground)\n\nCheck what does Go compiler do. Might be useful if you trying to optimize some code or learn more about compiler. https://golang.design/gossa. — [@changkun](https://github.com/changkun)\n\n<div align=\"center\"><img src=\"https://github.com/golang-design/ssaplayground/blob/main/public/assets/screen.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) View Go assembly interactively with [lensm](https://github.com/loov/lensm)\n\nUnderstand how Go is compiled better. — [@egonelbre](https://github.com/egonelbre)\n\n<div align=\"center\"><img src=\"https://github.com/loov/lensm/raw/main/screenshot.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install loov.dev/lensm@main\n```\n\n### [⏫](#contents) View Go assembly with color annotation with [pat/disfunc](https://github.com/maruel/pat)\n\nThis tool shows assembly of functions and what lines mean by color. — [@maruel](https://github.com/maruel)\n\n\n```\ndisfunc -f 'nin\\.CanonicalizePath$' -pkg ./cmd/nin | less -R\n```\n\n<div align=\"center\"><img src=\"https://github.com/maruel/pat/wiki/disfunc.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/maruel/pat/cmd/...@latest\n```\n\n### [⏫](#contents) Generate Go assembly in Go with [avo](https://github.com/mmcloughlin/avo)\n\nWrite better quality Go assembly quicker in Go language itself. This tool conveniently generates stub for Go code to call your generated assembly. Used by Go core. — [@mmcloughlin](https://github.com/mmcloughlin)\n\n```go\n//go:build ignore\n// +build ignore\n\npackage main\n\nimport . \"github.com/mmcloughlin/avo/build\"\n\nfunc main() {\n  TEXT(\"Add\", NOSPLIT, \"func(x, y uint64) uint64\")\n  Doc(\"Add adds x and y.\")\n  x := Load(Param(\"x\"), GP64())\n  y := Load(Param(\"y\"), GP64())\n  ADDQ(x, y)\n  Store(y, ReturnIndex(0))\n  RET()\n  Generate()\n}\n```\n\n\n### [⏫](#contents) Generate AST for code snippets with `go/ast`\n\nAccess Go core AST mechanism to generate AST.\n\n```go\npackage main\n\nimport (\n  \"go/ast\"\n  \"go/parser\"\n  \"go/token\"\n)\n\nfunc main() {\n  fs := token.NewFileSet()\n  tr, _ := parser.ParseExpr(\"(3-1) * 5\")\n  ast.Print(fs, tr)\n}\n```\n\nExample\n```\n0  *ast.BinaryExpr {\n1  .  X: *ast.ParenExpr {\n2  .  .  Lparen: -\n3  .  .  X: *ast.BinaryExpr {\n4  .  .  .  X: *ast.BasicLit {\n5  .  .  .  .  ValuePos: -\n6  .  .  .  .  Kind: INT\n7  .  .  .  .  Value: \"3\"\n8  .  .  .  }\n9  .  .  .  OpPos: -\n10  .  .  .  Op: -\n11  .  .  .  Y: *ast.BasicLit {\n12  .  .  .  .  ValuePos: -\n13  .  .  .  .  Kind: INT\n14  .  .  .  .  Value: \"1\"\n15  .  .  .  }\n16  .  .  }\n17  .  .  Rparen: -\n18  .  }\n19  .  OpPos: -\n20  .  Op: *\n21  .  Y: *ast.BasicLit {\n22  .  .  ValuePos: -\n23  .  .  Kind: INT\n24  .  .  Value: \"5\"\n25  .  }\n26  }\n```\n\n\n### [⏫](#contents) Generate AST for code snippets with [go2ast](https://github.com/reflog/go2ast)\n\nThis is a wrapper around `go/ast` machinery that makes generating `AST` easier. — [@reflog](https://github.com/reflog)\n\n\n```\necho \"a := 1\" | go2ast\n```\n\nExample\n```\n[]ast.Stmt {\n  &ast.AssignStmt {\n    Lhs: []ast.Expr {\n      &ast.Ident {\n        Name: \"a\",\n      },\n    },\n    Tok: :=,\n    Rhs: []ast.Expr {\n      &ast.BasicLit {\n        ValuePos: 32,\n        Kind: INT,\n        Value: \"1\",\n      },\n    },\n  },\n}\n```\n\nRequirements\n```\ngo install github.com/reflog/go2ast@latest\n```\n\n### [⏫](#contents) Visualize Go SSA function using Graphviz with [go-ssaviz](https://github.com/SilverRainZ/go-ssaviz)\n\nThis tool provides a visual overview of Go SSA function using Graphviz. This is especially useful in SSA-based static analysis. This tool generates an HTML page that is easy to navigate. [demo](https://silverrainz.me/go-ssaviz/). — [@SilverRainZ](https://github.com/SilverRainZ)\n\n\n```\ngo-ssaviz ./...\n```\n\n<div align=\"center\"><img src=\"./img/go-ssaviz.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# get graphviz\ngo install github.com/SilverRainZ/go-ssaviz@latest\n```\n\n### [⏫](#contents) Make graph of AST with [astgraph](https://github.com/xiazemin/ast_graph)\n\nThis tool visualizes AST as graph, which may be useful to navigate and understand Go AST. This tool has not been maintained for a while. — [@xiazemin](https://github.com/xiazemin)\n\n<div align=\"center\"><img src=\"https://github.com/xiazemin/ast_graph/raw/master/tree.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngraphviz\n```\n\n### [⏫](#contents) Convert C assembly to Go assembly with [c2goasm](https://github.com/minio/c2goasm)\n\nThis tool can convert C assembly `.s` into Go assbmely `.s` files. This is useful for reusing compiler optimizations such as SIMD or loop unrolling in C, which can lead to 10x speedups. However, project has been archived 4+ years ago. — [@fwessels](https://github.com/fwessels)\n\n\n```\ngcc -O3 -march=native -S -o c_code.s c_code.c\nc2goasm -a c_code.s go_c_code.s\ngo build -o go_c_code.o -gcflags=\"-S\" go_c_code.s\n```\n\nRequirements\n```\ngo install github.com/minio/c2goasm@latest\n```\n\n## Execution\n\n### [⏫](#contents) :fire: Embed Go Playground to your blog with [codapi](https://github.com/nalgeon/codapi)\n\nCodapi is a platform for embedding interactive code snippets directly into your product documentation, online course or blog post. [example](https://antonz.org/go-1-22/). — [@nalgeon](https://github.com/nalgeon)\n\n```\n'''go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}\n'''\n\n<codapi-snippet sandbox=\"go\" editor=\"basic\">\n</codapi-snippet>\n```\n\n<div align=\"center\"><img src=\"img/codapi.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ndeploy sandbox\nembed javascript in your blog\nmarkdown go code blocks will turn into runnable snippets\n```\n\n### [⏫](#contents) Embed Go Playground to your blog with [goplay](https://github.com/ggicci/goplay)\n\nEmbed interactive Go Playground component into your blog. [Hugo](https://gohugo.io), [Docusaurus](https://docusaurus.io), [Ghost](https://ghost.org) are supported. There is also another tool [soksan](https://github.com/bbalet/soksan), however it is discontinued. Live [demo](https://ggicci.me/goplay-embed-go-playground-on-your-website/) with guideline. Other resources — GitLab considering to add it in [issue](https://gitlab.com/gitlab-org/gitlab/-/issues/212769); alternative implementation [guideline](https://hrishikeshpathak.com/blog/golang-code-playground/). — [@ggicci](https://github.com/ggicci)\n\n```\n## Sample Code\n\n{{% goplay %}}\n'''go\npackage main\n\nfunc main() {\n  println(\"hello world\")\n}\n'''\n{{% /goplay %}}\n```\n\nRequirements\n```\nreverse proxy server to https://play.golang.org\nbloging platform with support for embedding javascript\n```\n\n### [⏫](#contents) Run alternative Go Playground with [goplay.tools](https://github.com/x1unix/go-playground)\n\nImproved Go Playground featuring dark theme, code autocomplete, vim mode, WebAssembly. Available at [https://goplay.tools/](https://goplay.tools/). — [@x1unix](https://github.com/x1unix)\n\n<div align=\"center\"><img src=\"https://github.com/x1unix/go-playground/raw/master/docs/img/demo.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) :fire: Use TinyGo Playground with [tinygo](https://play.tinygo.org)\n\nTinyGo is an alternative Go compiler that focuses on embedded devices, and WASM. There are some Go constructs and packages that not supported. In this online playground you can verify your code.\n\n<div align=\"center\"><img src=\"img/tinygo-playground.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Run interactive Go kernels in Jupyter Notebook with [gophernotes](https://github.com/gopherdata/gophernotes)\n\nRun interactive Go interpreter in Jupyter Notebook browser. As of `2023-06-04`, it is using `gomacro` interpreter and can have issues with loading 3rd party packages. — [@gopherdata](https://github.com/gopherdata)\n\n<div align=\"center\"><img src=\"https://github.com/gopherdata/gophernotes/raw/master/files/jupyter.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# jupyter notebook\ngo install github.com/gopherdata/gophernotes@v0.7.5\n# more instructions on how to install Jupyter Notebook Go kernel in original repo\n```\n\n### [⏫](#contents) Run interactive Go interpreter with [yaegi](https://github.com/traefik/yaegi)\n\nThis interpreter works with 3rd party packages located in `$GOPATH/src`. It can also be triggered within Go programmatically via `Eval()`. Works everywhere Go works. — [@traefik](https://github.com/traefik)\n\n\n```\nyaegi\n```\n\nExample\n```\n$ yaegi\n> import \"github.com/nikolaydubina/fpdecimal\"\n: 0x140000faaf0\n> a, _ := fpdecimal.FromString(\"10.12\") \n: {0}\n> b, _ := fpdecimal.FromString(\"5.38\")\n: {0}\n> c := a.Add(b)   \n: {15500}\n> c.String()\n: 15.500\n>\n```\n\nRequirements\n```\ngo install github.com/traefik/yaegi@latest\n```\n\n### [⏫](#contents) Run interactive Go interpreter with [gomacro](https://github.com/cosmos72/gomacro)\n\nThis is interactive Go interpreter and debugger with REPL, Eval, generics and Lisp-like macros. You can run functions, import 3rd patry packages. Can be useful for learning and experimentation. Some nice features: autocomplete; constant expressions arithmetics. As of `2023-06-02`, issues with importing 3rd paty package are possible. — [@cosmos72](https://github.com/cosmos72)\n\n\n```\ngomacro\n```\n\nExample\n```\n$ gomacro\ngomacro> import \"fmt\"\ngomacro> fmt.Println(\"hello, world!\")\nhello, world!\n14      // int\n<nil>   // error\ngomacro>\n```\n\nRequirements\n```\ngo install github.com/cosmos72/gomacro@latest\n```\n\n### [⏫](#contents) Run Go function in shell with [gorram](https://github.com/natefinch/gorram)\n\nRun Go one-liners. This tool will print to STDOUT the return of a function call. — [@natefinch](https://github.com/natefinch)\n\n\n```\ncat README.md | gorram crypto/sha1 Sum\necho 12345 | gorram encoding/base64 StdEncoding.EncodeToString\ngorram net/http Get https://google.com\n```\n\nRequirements\n```\ngo install github.com/natefinch/gorram@latest\n```\n\n### [⏫](#contents) Run Go function in shell with [gosh](https://github.com/nickwells/utilities/blob/master/gosh/_gosh.DOC.md)\n\nRun Go functions in shell. You can also pass parameters directly from shell. — [@nickwells](https://github.com/nickwells)\n\n\n```\ngosh -pln '\"Hello, World!\"'\ngosh -pln 'math.Pi'\ngosh -n -b 'count := 0' -e 'count++' -a-pln 'count'\ngosh -http-handler 'http.FileServer(http.Dir(\"/tmp/xxx\"))'\ngosh -n -b-p '\"Radius: \"' -e 'r, err := strconv.ParseFloat(_l.Text(), 64)' -e-s iferr -pf '\"Area: %9.2f\n\", r*r*math.Pi' -p '\"Radius:\"'\n```\n\nRequirements\n```\ngo install github.com/nickwells/utilities/gosh@latest\n```\n\n### [⏫](#contents) Run simple fileserver with `net/http`\n\nIt takes one line to run HTTP file server in Go. Akin to famous oneliner in Python `python3 -m http.server` and `python -m SimpleHTTPServer`. Run this file as usually `go run <filename>`.\n\n```go\npackage main\n\nimport \"net/http\"\n\nfunc main() { http.ListenAndServe(\":9000\", http.FileServer(http.Dir(\".\"))) }\n```\n\n<div align=\"center\"><img src=\"./img/simple-fs.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Create 3D visualization of concurrency traces with [gotrace](https://github.com/divan/gotrace)\n\nFresh artistic perspective on coroutines execution. There is no advanced functions and it is hard to analyze production systems. However, it could be interesting for educational purposes. — [@divan](https://github.com/divan)\n\n<div align=\"center\"><img src=\"https://github.com/divan/gotrace/blob/master/images/demo.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/divan/gotrace@latest\npatch Go compiler, available via Docker\nmore instructions in original repo\n```\n\n### [⏫](#contents) Wrap command with `os/exec`\n\nOriginally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/).\n\n```go\ncmd := exec.Command(\"ls\", \"/usr/local/bin\")\ncmd.Stdout = os.Stdout\ncmd.Stderr = os.Stderr\nreturn cmd.Run()\n```\n\n\n### [⏫](#contents) Capture output of command to file with `os/exec`\n\nOriginally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/). — Aaron Son\n\n```go\nlog, err := os.Create(\"output.log\")\nif err != nil {\n  return err\n}\ndefer log.Close()\ncmd := exec.Command(\"ls\", \"/usr/local/bin\")\ncmd.Stdout = log\ncmd.Stderr = log\nreturn cmd.Run()\n```\n\n\n### [⏫](#contents) Capture output of command and process it with `os/exec`\n\nOriginally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/). — Aaron Son\n\n```go\ncmd := exec.Command(\"ls\", \"/usr/local/bin\")\nstdout, err := cmd.StdoutPipe()\nif err != nil {\n  return err\n}\nscanner := bufio.NewScanner(stdout)\nerr = cmd.Start()\nif err != nil {\n  return err\n}\nfor scanner.Scan() {\n  // Do something with the line here.\n  ProcessLine(scanner.Text())\n}\nif scanner.Err() != nil {\n  cmd.Process.Kill()\n  cmd.Wait()\n  return scanner.Err()\n}\nreturn cmd.Wait()\n```\n\n\n### [⏫](#contents) Piping between processes with `os/exec`\n\n`ls /usr/local/bin | grep pip`. Originally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/). — Aaron Son\n\n```go\nr, w, err := os.Pipe()\nif err != nil {\n  return err\n}\ndefer r.Close()\n\nls := exec.Command(\"ls\", \"/usr/local/bin\")\nls.Stdout = w\nerr = ls.Start()\nif err != nil {\n  return err\n}\ndefer ls.Wait()\nw.Close()\n\ngrep := exec.Command(\"grep\", \"pip\")\ngrep.Stdin = r\ngrep.Stdout = os.Stdout\nreturn grep.Run()\n```\n\n\n### [⏫](#contents) `errgroup` and CommandContext with `os/exec`\n\nOriginally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/). — Aaron Son\n\n```go\neg, ctx := errgroup.WithContext(context.Background())\nsleeps := make([]*exec.Cmd, 3)\nsleeps[0] = exec.CommandContext(ctx, \"sleep\", \"100\")\nsleeps[1] = exec.CommandContext(ctx, \"sleep\", \"100\")\nsleeps[2] = exec.CommandContext(ctx, \"sleep\", \"notanumber\")\nfor _, s := range sleeps {\n  s := s\n  eg.Do(func() error {\n    return s.Run()\n  })\n}\nreturn eg.Wait()\n```\n\n\n## Monitor\n\n### [⏫](#contents) :fire: Monitor Go Runtime metrics with [opentelemetry](https://pkg.go.dev/go.opentelemetry.io/contrib/instrumentation/runtime)\n\nThese are standard metrics for Go runtime exposed in OpenTelemetry format. Grafana [dashboard](https://github.com/nikolaydubina/grafana-otel-go-runtime). — Google, (dashboard by @nikolaydubina)\n\n```go\nimport \"go.opentelemetry.io/contrib/instrumentation/runtime\"\n...\nruntime.Start()\n```\n\n<div align=\"center\"><img src=\"https://github.com/nikolaydubina/grafana-otel-go-runtime/raw/master/example.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nopentelemetry collector\nmetrics backend (e.g. prometheus)\ndashboard (e.g. grafana)\n```\n\n### [⏫](#contents) Monitor goroutines with [grmon](https://github.com/bcicen/grmon)\n\nCommand line monitoring for goroutines. — [@bcicen](https://github.com/bcicen)\n\n\n```\ngrmon\n```\n\n<div align=\"center\"><img src=\"https://bradley.codes/static/img/grmon.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# start pprof server or grmon in your Go process\ngo install github.com/bcicen/grmon@latest\n```\n\n### [⏫](#contents) Monitor Go processes with [gops](https://github.com/google/gops)\n\nMonitoring memory of Go processes, forcing GC, getting version of Go of processes. — Google\n\n\n```\ngops\n```\n\nExample\n```\n983   980    uplink-soecks  go1.9   /usr/local/bin/uplink-soecks\n52697 52695  gops           go1.10  /Users/jbd/bin/gops\n4132  4130   foops        * go1.9   /Users/jbd/bin/foops\n51130 51128  gocode         go1.9.2 /Users/jbd/bin/gocode\n```\n\nRequirements\n```\ngo install github.com/google/gops@latest\n```\n\n### [⏫](#contents) :fire: Monitor Go runtime metrics in browser with [live-pprof](https://github.com/moderato-app/live-pprof)\n\nThis is minimal single binary tool that lets you monitor Go app performance. This can be an attractive alternative for local development to avoid operations overhead of full monitoring setup (e.g. Prometheus, Grafana). — [@clement2026](https://github.com/clement2026)\n\n\n```\nlive-pprof 6060\n```\n\n<div align=\"center\"><img src=\"img/live-pprof.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/moderato-app/live-pprof@v1\n```\n\n### [⏫](#contents) Monitor Go runtime metrics in browser with [statsviz](https://github.com/arl/statsviz)\n\nThis tool exposes HTTP endpoint with charts for Go runtime such as heap, objects, goroutines, GC pauses, scheduler. This is useful drop-in solution for visualization of Go runtime. — [@arl](https://github.com/arl)\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/arl/statsviz/readme-docs/window.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo get github.com/arl/statsviz@latest\n```\n\n### [⏫](#contents) Auto-Instrument all functions with [go-instrument](https://github.com/nikolaydubina/go-instrument)\n\nAutomatically instrument all functions with Open Telemetry Spans by code generation. Inserts errors into Spans. — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\nfind . -name \"*.go\" | xargs -I{} go-instrument -app my-service -w -filename {}\n```\n\n<div align=\"center\"><img src=\"https://github.com/nikolaydubina/go-instrument/raw/master/docs/fib-error.png?raw=true\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/nikolaydubina/go-instrument@latest\n```\n\n### [⏫](#contents) Auto-Instrument all functions with [otelinji](https://github.com/hedhyw/otelinji)\n\nAutomatically instrument all functions with Open Telemetry Spans by code generation. Inserts errors into Spans. Supports custom templates and can be used for Open Tracing or any custom insertions. — [@hedhyw](https://github.com/hedhyw)\n\n\n```\notelinji -w -filename input_file.go\notelinji -filename input_file.go > input_file.go\nfind . -name \"*.go\" | grep -v \"vendor/\\|.git/\\|_test.go\" | xargs -n 1 -t otelinji -w -filename\n```\n\n<div align=\"center\"><img src=\"https://github.com/hedhyw/otelinji/blob/main/assets/diff.png?raw=true\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/hedhyw/otelinji/cmd/otelinji@latest\n```\n\n### [⏫](#contents) Auto-Instrument functions for DataDog with [orchestrion](https://github.com/DataDog/orchestrion)\n\nThis is official Datadog tool for automatic instrumentation of code. It has very convenient compiler directives for instrumentation. — [@DataDog](https://github.com/DataDog)\n\n\n```\norchestrion -w ./\n```\n\n```go\n//dd:span my:tag\nfunc GetSomeData(ctx context.Context) ([]byte, error) {\n  ...\n```\n\nRequirements\n```\ngo install github.com/datadog/orchestrion@latest\n```\n\n### [⏫](#contents) Continuous Profiling with [Pyroscope](https://github.com/grafana/pyroscope)\n\nThis tool allows to ingest profiling data from your application. You would need to add integration in your main file that will sample in-process data and send it to Pyroscope. Here are useful resources [blog-go-memory-leaks](https://grafana.com/blog/2023/04/19/how-to-troubleshoot-memory-leaks-in-go-with-grafana-pyroscope/). — Grafana Labs\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/23323466/143324845-16ff72df-231e-412d-bd0a-38ef2e09cba8.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n## Benchmark\n\n### [⏫](#contents) Run benchmarks\n\nStart here. This is the standard tool for benchmarking. It can also do advanced features like mutex profiles. More flags are in Go [documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags) and `go help testflag`.\n\n\n```\ngo test -bench=. -benchmem -benchtime=10s ./...\n```\n\nExample\n```\ngoos: darwin\ngoarch: arm64\npkg: github.com/nikolaydubina/fpmoney\nBenchmarkArithmetic/add_x1-10                     1000000000             0.5 ns/op           0 B/op           0 allocs/op\nBenchmarkArithmetic/add_x100-10                     18430124            64.6 ns/op           0 B/op           0 allocs/op\nBenchmarkJSONUnmarshal/small-10                      3531835           340.7 ns/op         198 B/op           3 allocs/op\nBenchmarkJSONUnmarshal/large-10                      2791712           426.9 ns/op         216 B/op           3 allocs/op\nBenchmarkJSONMarshal/small-10                        4379685           274.4 ns/op         144 B/op           4 allocs/op\nBenchmarkJSONMarshal/large-10                        3321205           345.8 ns/op         192 B/op           5 allocs/op\nPASS\nok      github.com/nikolaydubina/fpmoney    62.744s\n```\n\n\n### [⏫](#contents) Table-driven benchmarks\n\nSimilar to tests, Go supports table-driven benchmarks, which is very helpful for fine gradation of meta-parameters. More details in the Go [blog](https://go.dev/blog/subtests).\n\n```\nfunc benchIteratorSelector(b *testing.B, n int) {\n  // ... setup here\n  b.ResetTimer()\n  for n := 0; n < b.N; n++ {\n    err := myExpensiveFunc()\n    if err != nil {\n      b.Error(err)\n    }\n  }\n}\n\nfunc BenchmarkIteratorSelector(b *testing.B) {\n  for _, q := range []int{100, 1000, 10000, 100000} {\n    b.Run(fmt.Sprintf(\"n=%d\", q), func(b *testing.B) {\n      benchIteratorSelector(b, q)\n    })\n  }\n}\n```\n\nExample\n```\nBenchmarkIteratorSelector/n=100-10    \t  297792\t      4265 ns/op\t    5400 B/op\t      13 allocs/op\nBenchmarkIteratorSelector/n=1000-10   \t   31400\t     38182 ns/op\t    9752 B/op\t      16 allocs/op\nBenchmarkIteratorSelector/n=10000-10  \t    3134\t    380777 ns/op\t   89112 B/op\t      24 allocs/op\nBenchmarkIteratorSelector/n=100000-10 \t     310\t   3827292 ns/op\t  912410 B/op\t      32 allocs/op\n```\n\n\n### [⏫](#contents) :fire: Align benchmark output\n\nGo aligns benchmarks names to longest seen so far. Create file with name that is lexicographically first and has noop benchmark like following.\n\n```go\nfunc BenchmarkNoop(b *testing.B) { b.Run(\"--------------------------------\", func(b *testing.B) {}) }\n```\n\nExample\n```\n$ go test -bench .\ngoos: darwin\ngoarch: arm64\npkg: github.com/nikolaydubina/go-hackers-delight\nBenchmarkNoop/---------------------------------16         \t1000000000\t         0.0000001 ns/op\nBenchmarkAbs/basic-16                                     \t1000000000\t         0.9826 ns/op\nBenchmarkAbs/Abs-16                                       \t1000000000\t         0.9647 ns/op\nBenchmarkAbs/Abs2-16                                      \t1000000000\t         0.9943 ns/op\nBenchmarkAbs/Abs3-16                                      \t1000000000\t         0.9819 ns/op\nBenchmarkAbs/Abs4-16                                      \t1000000000\t         1.003 ns/op\nBenchmarkAbs/AbsFastMul-16                                \t1000000000\t         0.9598 ns/op\nBenchmarkAvg/basic-16                                     \t973716225\t         2.045 ns/op\nBenchmarkAvg/AvgFloor-16                                  \t602586224\t         2.050 ns/op\nBenchmarkAvg/AvgCeil-16                                   \t582029594\t         2.054 ns/op\nBenchmarkCycleThree/basic-16                              \t767160418\t         1.560 ns/op\nBenchmarkCycleThree/CycleThreeValues-16                   \t438818894\t         2.729 ns/op\nBenchmarkLeadingZeros/uint32/basic-16                     \t1000000000\t         0.9419 ns/op\n```\n\n\n### [⏫](#contents) Generate benchmak CPU and Memory profiles with `go test`\n\nThis is useful for identifying most time or memory consuming parts. Recommended to run for single benchmark at a time and with `-count` or `-benchtime` for better accuracy.\n\n\n```\ngo test -bench=<my-benchmark-name> -cpuprofile cpu.out -memprofile mem.out ./...\n```\n\n\n### [⏫](#contents) Visualize callgraph of profiles with `pprof`\n\nOnce you generate profiles, visualize them with `pprof`. Both memory and CPU profiles are supported. Many options are available. Refer to the link you get in SVG to how to interpret this graph. More official documentation [blog](https://go.dev/blog/pprof), [pkg-doc](https://pkg.go.dev/net/http/pprof). — official Go team\n\n\n```\ngo tool pprof -svg cpu.out > cpu.svg\ngo tool pprof -svg mem.out > mem.svg\n```\n\n<div align=\"center\"><img src=\"img/pprof_callgraph_cpu.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Visualize flamegraphs of profiles with `pprof`\n\nLatest versions of `pprof` can also render [Flamegraphs](https://www.brendangregg.com/flamegraphs.html) for profiles. Make sure you set `-http` to start webserver. Then it is available in \"View > Graph\" in at http://0.0.0.0:80. — Google\n\n\n```\npprof -http=0.0.0.0:80 cpu.out\n```\n\n<div align=\"center\"><img src=\"img/pprof_flamegraph_cpu.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/google/pprof@latest\n```\n\n### [⏫](#contents) Visualize profiles online\n\nYou can also visualize profiles with online tools are aloso available https://www.speedscope.app (cpu).\n\n<div align=\"center\"><img src=\"img/speedscope_cpu_profile.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Get delta between two benchmarks with [benchstat](https://golang.org/x/perf/cmd/benchstat)\n\nThis is standard way to compare two benchmark outputs. Names of benchmarks should be the same. Generate benchmarks as per usual. You would get multiple tables per dimension. If no output, then pass `-split=\"XYZ\"`. If you do not see `delta`, then pass `-count=2` or more in benchmark generation. It is recommended to have alternative implementations in different packages, to keep benchmark names the same. — official Go team\n\n\n```\nbenchstat -split=\"XYZ\" old.txt new.txt\n```\n\nExample\n```\nname                    old time/op    new time/op    delta\nJSONUnmarshal/small-10     502ns ± 0%     331ns ± 0%   -33.99%  (p=0.008 n=5+5)\nJSONUnmarshal/large-10     572ns ± 0%     414ns ± 0%   -27.64%  (p=0.008 n=5+5)\nJSONMarshal/small-10       189ns ± 0%     273ns ± 0%   +44.20%  (p=0.008 n=5+5)\nJSONMarshal/large-10       176ns ± 0%     340ns ± 0%   +93.29%  (p=0.008 n=5+5)\n\nname                    old alloc/op   new alloc/op   delta\nJSONUnmarshal/small-10      271B ± 0%      198B ± 0%   -26.94%  (p=0.008 n=5+5)\nJSONUnmarshal/large-10      312B ± 0%      216B ± 0%   -30.77%  (p=0.008 n=5+5)\nJSONMarshal/small-10       66.0B ± 0%    144.0B ± 0%  +118.18%  (p=0.008 n=5+5)\nJSONMarshal/large-10       72.0B ± 0%    192.0B ± 0%  +166.67%  (p=0.008 n=5+5)\n\nname                    old allocs/op  new allocs/op  delta\nJSONUnmarshal/small-10      6.00 ± 0%      3.00 ± 0%   -50.00%  (p=0.008 n=5+5)\nJSONUnmarshal/large-10      7.00 ± 0%      3.00 ± 0%   -57.14%  (p=0.008 n=5+5)\nJSONMarshal/small-10        2.00 ± 0%      4.00 ± 0%  +100.00%  (p=0.008 n=5+5)\nJSONMarshal/large-10        2.00 ± 0%      5.00 ± 0%  +150.00%  (p=0.008 n=5+5)\n```\n\nRequirements\n```\ngo install golang.org/x/perf/cmd/benchstat@latest\n```\n\n### [⏫](#contents) Get summary of benchmarks with [benchstat](https://golang.org/x/perf/cmd/benchstat)\n\nCompare multiple benchmarks. Names of benchmarks should be the same. Generate benchmarks as per usual. You would get multiple tables per dimension. If no output, then pass `-split=\"XYZ\"`. It is recommended to have alternative implementations in different packages, to keep benchmark names the same. — official Go team\n\n\n```\nbenchstat -split=\"XYZ\" int.txt float32.txt fpmoney.txt\n```\n\nExample\n```\nname \\ time/op          int.bench   float32.bench  fpmoney.bench\nJSONUnmarshal/small-10  481ns ± 2%     502ns ± 0%     331ns ± 0%\nJSONUnmarshal/large-10  530ns ± 1%     572ns ± 0%     414ns ± 0%\nJSONMarshal/small-10    140ns ± 1%     189ns ± 0%     273ns ± 0%\nJSONMarshal/large-10    145ns ± 0%     176ns ± 0%     340ns ± 0%\n\nname \\ alloc/op         int.bench   float32.bench  fpmoney.bench\nJSONUnmarshal/small-10   269B ± 0%      271B ± 0%      198B ± 0%\nJSONUnmarshal/large-10   288B ± 0%      312B ± 0%      216B ± 0%\nJSONMarshal/small-10    57.0B ± 0%     66.0B ± 0%    144.0B ± 0%\nJSONMarshal/large-10    72.0B ± 0%     72.0B ± 0%    192.0B ± 0%\n\nname \\ allocs/op        int.bench   float32.bench  fpmoney.bench\nJSONUnmarshal/small-10   6.00 ± 0%      6.00 ± 0%      3.00 ± 0%\nJSONUnmarshal/large-10   7.00 ± 0%      7.00 ± 0%      3.00 ± 0%\nJSONMarshal/small-10     2.00 ± 0%      2.00 ± 0%      4.00 ± 0%\nJSONMarshal/large-10     2.00 ± 0%      2.00 ± 0%      5.00 ± 0%\n```\n\nRequirements\n```\ngo install golang.org/x/perf/cmd/benchstat@latest\n```\n\n### [⏫](#contents) Benchmark against git commit with [pat/ba](https://github.com/maruel/pat)\n\nThis tool runs benchmarks and shows delta between git commits. It can also be useful in GitHub Actions. — [@maruel](https://github.com/maruel)\n\nExample\n```\n$ ba -against HEAD~1\nwarming up\ngo test -bench . -benchtime 100ms -count 1 -run ^$ -cpu 1 ./...\ngit checkout HEAD~1\ngo test -bench . -benchtime 100ms -count 1 -run ^$ -cpu 1 ./...\ngit checkout 02152d698f7d548c\n02152d698f7d548c...HEAD~1 (1 commits), 100ms x 2 times/batch, batch repeated 3 times.\ngo test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\ngit checkout HEAD~1\ngo test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\ngit checkout 02152d698f7d548c\ngo test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\ngit checkout HEAD~1\ngo test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\ngit checkout 02152d698f7d548c\ngo test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\ngit checkout HEAD~1\ngo test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\ngit checkout 02152d698f7d548c\nname                  old time/op    new time/op    delta\nHashCommand             69.0ns ± 2%    67.7ns ± 2%  -1.91%  (p=0.041 n=6+6)\nCLParser                 281µs ± 1%     281µs ± 1%    ~     (p=0.699 n=6+6)\nLoadManifest             437ms ± 7%     430ms ± 3%    ~     (p=0.937 n=6+6)\nCanonicalizePathBits    85.9ns ± 1%    86.2ns ± 0%    ~     (p=1.000 n=6+6)\nCanonicalizePath        83.9ns ± 1%    84.6ns ± 0%    ~     (p=0.058 n=6+6)\n\nname                  old alloc/op   new alloc/op   delta\nHashCommand              0.00B          0.00B         ~     (all equal)\nCLParser                 164kB ± 0%     164kB ± 0%    ~     (all equal)\nLoadManifest             298MB ± 0%     295MB ± 0%  -0.78%  (p=0.002 n=6+6)\nCanonicalizePathBits     80.0B ± 0%     80.0B ± 0%    ~     (all equal)\nCanonicalizePath         80.0B ± 0%     80.0B ± 0%    ~     (all equal)\n\nname                  old allocs/op  new allocs/op  delta\nHashCommand               0.00           0.00         ~     (all equal)\nCLParser                 1.64k ± 0%     1.64k ± 0%    ~     (all equal)\nLoadManifest             2.61M ± 0%     2.57M ± 0%  -1.71%  (p=0.002 n=6+6)\nCanonicalizePathBits      1.00 ± 0%      1.00 ± 0%    ~     (all equal)\nCanonicalizePath          1.00 ± 0%      1.00 ± 0%    ~     (all equal)\n```\n\nRequirements\n```\ngo install github.com/maruel/pat/cmd/...@latest\n```\n\n### [⏫](#contents) Continuous benchmarking\n\nTrack how benchmarks change in codebase over time. This is accomplished by running benchmarks for git commits, storing results, and visualizing difference. Running benchmarks can be in GitHub Actions or locally, storage can be in same repository `master` or dedicated branch, or standalone servers. It should be straightforward to setup this manually. Example of GitHub Action [spec](https://github.com/swaggest/rest/blob/master/.github/workflows/bench.yml) and [blog](https://dev.to/vearutop/continuous-benchmarking-with-go-and-github-actions-41ok) from [@vearutop](https://github.com/vearutop), and an example on how it produces a PR [comment](https://github.com/swaggest/rest/pull/88#issuecomment-1271540878).\n\n<div align=\"center\"><img src=\"img/cont-bench-vearutop.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Continuous benchmarking with [gobenchdata](https://github.com/bobheadxi/gobenchdata)\n\nThis tool uses `go test -bench` data in GitHub. It runs benchmarks, and uploads it as GitHub Pages for visualization. It is available as GitHub Action [gobenchdata](https://github.com/marketplace/actions/continuous-benchmarking-for-go). This is useful to see benchmark trends. — [@bobheadxi](https://github.com/bobheadxi)\n\n<div align=\"center\"><img src=\"https://github.com/bobheadxi/gobenchdata/raw/main/.static/demo-chart.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install go.bobheadxi.dev/gobenchdata@latest\n```\n\n### [⏫](#contents) Continuous benchmarking with [benchdiff](https://github.com/willabides/benchdiff)\n\nAutomates comparing benchmarks with `benchstat` of two git references. It is available as GitHub Action [benchdiff](https://github.com/marketplace/actions/benchdiff) which runs `benchstat` of HEAD vs base branch. This is useful to see how benchmarks change with PRs in CI. — [@WillAbides](https://github.com/WillAbides)\n\n<div align=\"center\"><img src=\"img/cont-bench-willabides.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/willabides/benchdiff/cmd/benchdiff\n```\n\n### [⏫](#contents) Continuous benchmarking with [cob](https://github.com/knqyf263/cob)\n\nAutomate comparing benchmarks with `benchstat` between `HEAD` and `HEAD^1`. It can be used to block CI pipelines if benchmarks deteriorate. It reports output as text in CLI. This cane be useful in CI or in local development. — [@knqyf263](https://github.com/knqyf263)\n\n<div align=\"center\"><img src=\"https://github.com/knqyf263/cob/raw/master/img/usage.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/knqyf263/cob@latest\n```\n\n### [⏫](#contents) Generate live traces with `net/http/trace`\n\nThis will add endpoints to your your server. If you don't have server running already in your process, you can start one. Then you can point `pprof` tool to this data. For production, hide this endpoint in separate port and path. More details in documentation [trace](https://pkg.go.dev/cmd/trace), [net/http/pprof](https://pkg.go.dev/net/http/pprof).\n\n```\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n  \"net/http/pprof\"\n)\n\nfunc main() {\n  mux := http.NewServeMux()\n  mux.HandleFunc(\"/custom_debug_path/profile\", pprof.Profile)\n  log.Fatal(http.ListenAndServe(\":7777\", mux))\n}\n```\n\nExample\n```\ngo tool pprof http://localhost:6060/debug/pprof/heap\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=30\ncurl -o trace.out http://localhost:6060/debug/pprof/trace?seconds=5\n```\n\n\n### [⏫](#contents) Generate traces with `go test`\n\nProduce a trace of execution of tests in package.\n\n\n```\ngo test -trace trace.out .\n```\n\n\n### [⏫](#contents) View traces with `go tool trace`\n\nYou can view traces interactively in browser with standard Go tooling. This web tool also shows network blocking profile, synchronization blocking profile, syscall blocking profile, scheduler latency profile.\n\n\n```\ngo tool trace trace.out\n```\n\n<div align=\"center\"><img src=\"img/go_tool_trace_web.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) :fire: View traces with [gotraceui](https://github.com/dominikh/gotraceui)\n\nGotraceui is a tool for visualizing and analyzing Go execution traces. It is meant to be a faster, more accessible, and more powerful alternative to go tool trace. Unlike go tool trace, Gotraceui doesn't use deprecated browser APIs (or a browser at all), and its UI is tuned specifically to the unique characteristics of Go traces. This tool also recommend by official Go team from Google in their [blog](https://go.dev/blog/execution-traces-2024). — [@dominikh](https://github.com/dominikh)\n\n\n```\ngo tool trace trace.out\n```\n\n<div align=\"center\"><img src=\"https://gotraceui.dev/img/screenshot.webp\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nrefer to guideline for requirements for GUI\ngo install honnef.co/go/gotraceui/cmd/gotraceui@latest\n```\n\n### [⏫](#contents) View in-process traces with [trc](https://github.com/peterbourgon/trc)\n\nThis experimental approach illustrates collection of traces, intsrumentation, and visualization. It does not handle distributed traces. Likely useful for special cases or educational or research purposes. — [@peterbourgon](https://github.com/peterbourgon)\n\n<div align=\"center\"><img src=\"https://github.com/peterbourgon/trc/raw/main/ui.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ninstrument your code with `trc` package\nstart UI server at port within same process\n```\n\n### [⏫](#contents) View wallclock traces with [fgtrace](https://github.com/felixge/fgtrace)\n\nThis tool can be more illustrative of Go traces than standard Go traces. — [@felixge](https://github.com/felixge)\n\n```go\npackage main\n\nimport (\n  \"net/http\"\n\n  \"github.com/felixge/fgtrace\"\n)\n\nfunc main() {\n  http.DefaultServeMux.Handle(\"/debug/fgtrace\", fgtrace.Config{})\n  http.ListenAndServe(\":1234\", nil)\n}\n```\n\n<div align=\"center\"><img src=\"https://github.com/felixge/fgtrace/raw/main/assets/fgtrace-example.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [⏫](#contents) Get on/off CPU profiles with [fgprof](https://github.com/felixge/fgprof)\n\nThis tool can be more illustrative of Go profiles than standard Go profiling. — [@felixge](https://github.com/felixge)\n\n```go\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n  _ \"net/http/pprof\"\n\n  \"github.com/felixge/fgprof\"\n)\n\nfunc main() {\n  http.DefaultServeMux.Handle(\"/debug/fgprof\", fgprof.Handler())\n  go func() {\n    log.Println(http.ListenAndServe(\":6060\", nil))\n  }()\n\n  // <code to profile>\n}\n```\n\n<div align=\"center\"><img src=\"https://github.com/felixge/fgprof/raw/master/assets/fgprof_pprof.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n## Document\n\n### [⏫](#contents) Make alternative documentation with [golds](https://github.com/go101/golds)\n\nIt has additional information like implementations of interface; promoted methods. The tool has nice minimalistic aesthetics. — [Tapir Liu](https://www.tapirgames.com)\n\n\n```\ngolds ./...\n```\n\n<div align=\"center\"><img src=\"img/golds.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install go101.org/golds@latest\n```\n\n### [⏫](#contents) Read Go binary documentation in `man` format with [goman](https://github.com/appliedgocode/goman)\n\nThis tool fetches the repo's readme as a man page replacement. — [@christophberger](https://github.com/christophberger)\n\n\n```\ngoman <mypackage>\n```\n\n<div align=\"center\"><img src=\"https://github.com/appliedgocode/goman/raw/master/goman.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/appliedgocode/goman@latest\n```\n\n### [⏫](#contents) Generate badge with [gobadge](https://github.com/AlexBeauchemin/gobadge)\n\nThis tool will generate instructions for [shields.io](https://shields.io) to generate badge. It can read `coverprofile`. There is also GitHub Action that utilizes it and stores badge in the same repo, [coverage-badge-go](https://github.com/tj-actions/coverage-badge-go). — [@AlexBeauchemin](https://github.com/AlexBeauchemin)\n\n\n```\ngobadge -filename=coverage.out\ngobadge -label=\"Go Coverage\" -value=55.6% -color=blue -target=OTHER_README.md\ngobadge -yellow=60 -green=80\ngobadge -color=ff69b4\ngobadge -link=https://github.com/project/repo/actions/workflows/test.yml\n```\n\n<div align=\"center\"><img src=\"https://camo.githubusercontent.com/641e107dce1dc01655110b327ff8c95121ad34dd9e5c8a33b4c03aff109a6038/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f7665726167652d37362e352532352d627269676874677265656e\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/AlexBeauchemin/gobadge@latest\n```\n\n### [⏫](#contents) :fire: Generate README.md based on GoDoc comments with [goreadme](https://github.com/posener/goreadme)\n\nIt can be used as a command line tool, as Github action, or as a pre-commit hook. — [@posener](https://github.com/posener)\n\n\n```\ngoreadme\ngoreadme -variables -functions -methods -badge-godoc\ngoreadme -badge-godoc -constants -functions -methods -recursive -types -variables > README.md\n```\n\nRequirements\n```\ngo install github.com/posener/goreadme/cmd/goreadme@latest\n```\n\n## Education\n\n### [⏫](#contents) Run Turtle Graphics online with [goplay.space](https://goplay.space/#wT_eZWJT69)\n\nThis absolutely adorable visualization is an excellent online resource to learn programming. — [@iafan](https://github.com/iafan)\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n)\n\nfunc main() {\n  fmt.Println(`\n    draw mode\n    \n    say Let's start...\n    right 18\n    color red\n\n    forward 7\n    say One...\n    right 144\n\n    forward 7\n    say Two...\n    right 144\n\n    forward 7\n    say Three...\n    right 144\n\n    forward 7\n    say Four...\n    right 144\n\n    forward 7\n    say We've got a star!\n    right 144\n  `)\n}\n```\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/1728158/29108287-12dfd26a-7c93-11e7-966d-713356bce3d3.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n## Style Guide\n\n- [Google](https://google.github.io/styleguide/go)\n\n- [Uber](https://github.com/uber-go/guide)\n\n- [Go Code Review Comments](https://go.dev/wiki/CodeReviewComments)\n\n## Security\n\n### [⏫](#contents) Run official vulnerability check with [govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck)\n\nIt uses static analysis of source code or a binary's symbol table to narrow down reports to only those that could affect the application. By default, govulncheck makes requests to the Go vulnerability database at https://vuln.go.dev. Requests to the vulnerability database contain only module paths, not code or other properties of your program. See https://vuln.go.dev/privacy.html for more. — Go Core team\n\n\n```\ngovulncheck ./...\n```\n\nExample\n```\nvulnerability data from https://vuln.go.dev (last modified 2023-06-01 21:27:40 +0000 UTC).\n\nScanning your code and 1952 packages across 202 dependent modules for known vulnerabilities...\nYour code is affected by 2 vulnerabilities from 1 module.\n\nVulnerability #1: GO-2023-1571\n  A maliciously crafted HTTP/2 stream could cause excessive CPU\n  consumption in the HPACK decoder, sufficient to cause a denial\n  of service from a small number of small requests.\n\n  More info: https://pkg.go.dev/vuln/GO-2023-1571\n\n  Module: golang.org/x/net\n    Found in: golang.org/x/net@v0.1.1-0.20221027164007-c63010009c80\n    Fixed in: golang.org/x/net@v0.7.0\n\n    Call stacks in your code:\n      cmd/kube-controller-manager/app/controllermanager.go:216:40: k8s.io/kubernetes/cmd/kube-controller-manager/app.Run calls k8s.io/apiserver/pkg/server.SecureServingInfo.Serve, which eventually calls golang.org/x/net/http2.ConfigureServer\n        requirements:\n          - go install golang.org/x/vuln/cmd/govulncheck@latest\n```\n\n\n### [⏫](#contents) :fire: Detect escalated privileges in dependencies with [capslock](https://github.com/google/capslock)\n\nCapslock is a capability analysis CLI for Go packages that informs users of which privileged operations a given package can access. This works by classifying the capabilities of Go packages by following transitive calls to privileged standard library operations. The recent increase in supply chain attacks targeting open source software has highlighted that third party dependencies should not be inherently trusted. Capabilities indicate what permissions a package has access to, and can be used in conjunction with other security signals to indicate which code requires additional scrutiny before it can be considered trusted. — Google\n\n\n```\ncapslock -packages=./...\n```\n\nExample\n```\n...\nCAPABILITY_ARBITRARY_EXECUTION: 317 references\nCAPABILITY_EXEC: 317 references\nCAPABILITY_FILES: 318 references\nCAPABILITY_MODIFY_SYSTEM_STATE: 20 references\nCAPABILITY_NETWORK: 317 references\nCAPABILITY_OPERATING_SYSTEM: 124 references\nCAPABILITY_READ_SYSTEM_STATE: 317 references\nCAPABILITY_REFLECT: 348 references\nCAPABILITY_RUNTIME: 317 references\nCAPABILITY_SYSTEM_CALLS: 12 references\nCAPABILITY_UNANALYZED: 332 references\nCAPABILITY_UNSAFE_POINTER: 335 references\n```\n\nRequirements\n```\ngo install github.com/google/capslock/cmd/capslock@latest\n```\n\n### [⏫](#contents) :fire: Run static analysis with [gosec](https://github.com/securego/gosec)\n\nThis tool inspects source code for security problems by scanning the Go AST and SSA code representation. There are numerous rules it checks. — [@ccojocar](https://github.com/ccojocar)\n\n\n```\ngosec ./...\n```\n\nRequirements\n```\ngo install github.com/securego/gosec/v2/cmd/gosec@latest\n```\n\n### [⏫](#contents) Perform Taint Analysis with [taint](https://github.com/picatz/taint)\n\nTaint analysis is a technique for identifying the flow of sensitive data through a program. It can be used to identify potential security vulnerabilities, such as SQL injection or cross-site scripting (XSS) attacks, by understanding how this data is used and transformed as it flows through the code. This package provides tools to performs such analysis. Included tool is performing SQL injection taint analysis. — [@picatz](https://github.com/picatz)\n\n\n```\nsqli main.go\n```\n\n```go\npackage main\n\nimport (\n        \"database/sql\"\n        \"net/http\"\n)\n\nfunc business(db *sql.DB, q string) {\n        db.Query(q) // potential sql injection\n}\n\nfunc run() {\n        db, _ := sql.Open(\"sqlite3\", \":memory:\")\n\n        mux := http.NewServeMux()\n\n        mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n                business(db, r.URL.Query().Get(\"sql-query\"))\n        })\n\n        http.ListenAndServe(\":8080\", mux)\n}\n\nfunc main() {\n        run()\n}\n```\n\nExample\n```\n./sql/injection/testdata/src/example/main.go:9:10: potential sql injection\n```\n\nRequirements\n```\ngo install github.com/picatz/taint/cmd/sqli@latest\n```\n\n### [⏫](#contents) :fire: Use Microsoft Go compiler with [microsoft/go](https://github.com/microsoft/go)\n\nThis is modified version of Go that can be used to build FIPS 140-2 compliant applications. — [@microsoft](https://github.com/microsoft)\n\n\n## Static Analysis\n\n### [⏫](#contents) Run default static analysis with `go vet`\n\nOfficial tool for static analysis of Go programs, with 27+ static analyzers. — official Go team\n\n\n```\ngo vet ./...\n```\n\n\n### [⏫](#contents) Run custom static analysis tool with `go vet`\n\nStandard `go vet` can be used to run custom analyzers binaries. Third party analyzers are supported. Lots of official analyzers not included by default into `go vet`. Analyzer has to satisfy interface and command described here https://pkg.go.dev/golang.org/x/tools/go/analysis. Refer for https://pkg.go.dev/golang.org/x/tools/go/analysis/passes for full list of official Go analyzers. — official Go team\n\n\n```\ngo install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow\ngo vet -vettool=$(which shadow)\n```\n\n\n### [⏫](#contents) Run official static analyzers not included in `go vet`\n\nThere are many analyzers not included in `go vet`. These tools are experimental and may not work as expected (e.g. `usesgenerics` does not work). Refer to for full list https://pkg.go.dev/golang.org/x/tools/go/analysis. — official Go team\n\n```go\npackage main\n\nimport (\n  \"golang.org/x/tools/go/analysis/multichecker\"\n\n  \"golang.org/x/tools/go/analysis/passes/atomicalign\"\n  \"golang.org/x/tools/go/analysis/passes/deepequalerrors\"\n  \"golang.org/x/tools/go/analysis/passes/fieldalignment\"\n  \"golang.org/x/tools/go/analysis/passes/nilness\"\n  \"golang.org/x/tools/go/analysis/passes/reflectvaluecompare\"\n  \"golang.org/x/tools/go/analysis/passes/shadow\"\n  \"golang.org/x/tools/go/analysis/passes/sortslice\"\n  \"golang.org/x/tools/go/analysis/passes/unusedwrite\"\n  \"golang.org/x/tools/go/analysis/passes/usesgenerics\"\n)\n\nfunc main() {\n  multichecker.Main(\n    atomicalign.Analyzer,         // checks for non-64-bit-aligned arguments to sync/atomic functions\n    deepequalerrors.Analyzer,     // checks for the use of reflect.DeepEqual with error values\n    fieldalignment.Analyzer,      // detects structs that would use less memory if their fields were sorted\n    nilness.Analyzer,             // inspects the control-flow graph of an SSA function and reports errors such as nil pointer dereferences and degenerate nil pointer comparisons\n    reflectvaluecompare.Analyzer, // checks for accidentally using == or reflect.DeepEqual to compare reflect.Value values\n    shadow.Analyzer,              // checks for shadowed variables\n    sortslice.Analyzer,           // checks for calls to sort.Slice that do not use a slice type as first argument\n    unusedwrite.Analyzer,         // checks for unused writes to the elements of a struct or array object\n    usesgenerics.Analyzer,        // checks for usage of generic features added in Go 1.18\n  )\n}\n```\n\n\n### [⏫](#contents) Detect most common issues with [staticcheck](https://github.com/dominikh/go-tools)\n\nStart custom linters with this well-known linter. It contains 150+ high quality low false positive rate linters. It is widely adopted by Open Source and tech companies. [staticcheck.io](https://staticcheck.io/). — [@dominikh](https://github.com/dominikh)\n\n\n```\nstaticcheck ./...\n```\n\nRequirements\n```\ngo install honnef.co/go/tools/cmd/staticcheck@latest\n```\n\n### [⏫](#contents) Detect potential Nil panics with [nilaway](https://github.com/uber-go/nilaway)\n\nThis tool employs sophisticated static analysis techniques to catch Nil dereferences. More details in [blog](https://www.uber.com/en-IN/blog/nilaway-practical-nil-panic-detection-for-go/). — Uber\n\n\n```\nnilaway ./...\n```\n\n<div align=\"center\"><img src=\"https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2023/11/figure_4.jpg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install go.uber.org/nilaway/cmd/nilaway@latest\n```\n\n### [⏫](#contents) Detect most common issues with [go-critic](https://github.com/go-critic/go-critic)\n\nThis linting aggregator and runner is similar to staticcheck. It has 100+ linting rules. It is based on Go [Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments) style guide that is used in core Go project itself. It has styling, security, performance rules. It has minimal dependencies and implements rules itself. It exports all analysers into `golang.org/x/tools/go/analysis` toolchain. — [@quasilyte](https://github.com/quasilyte)\n\n\n```\ngocritic check ./...\n```\n\nRequirements\n```\ngo install -v github.com/go-critic/go-critic/cmd/gocritic@latest\n```\n\n### [⏫](#contents) Reference and run common linters with [golangci-lint](https://golangci-lint.run)\n\nThis tool has comprehensive list of linters. Owners of this aggregator keep track of active linters, their versions, and optimal configs. It contains many optimizations to make linters run fast by parallelism, distributing binaries and Docker images, utilising `golang.org/x/tools/go/analysis` toolchain.\n\n\n```\ngolangci-lint run\n```\n\nExample\n```\nserver/web/filter/opentracing/filter.go:21:2: import-alias-naming: import name (logKit) must match the regular expression: ^[a-z][a-z0-9]{0,}$ (revive)\ncore/utils/pagination/paginator.go:65:3: G104: Errors unhandled. (gosec)\ncore/utils/pagination/utils.go:33:2: bare-return: avoid using bare returns, please add return expressions (revive)\nserver/web/grace/server.go:358:3: exitAfterDefer: log.Fatalf will exit, and `defer regLock.Unlock()` will not run (gocritic)\nserver/web/filter/prometheus/filter.go:90:40: \"2006-01-02 15:04:05\" can be replaced by time.DateTime (usestdlibvars)\ncore/utils/slice.go:47:20: builtinShadow: shadowing of predeclared identifier: min (gocritic)\ncore/utils/utils.go:54:3: ifElseChain: rewrite if-else to switch statement (gocritic)\nclient/orm/hints/db_hints_test.go:95:2: expected-actual: need to reverse actual and expected values (testifylint)\ncore/config/env/env.go:95:15: fmt.Errorf can be replaced with errors.New (perfsprint)\n```\n\nRequirements\n```\ncurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest\n```\n\n### [⏫](#contents) Detect non-exhaustive switch and map with [exhaustive](https://github.com/nishanths/exhaustive)\n\nThis `go vet` compatible analyzer checks for exhaustive switch statements and map literals. It works for enums with underlying integer, float, or string types (struct based enums are not supported). — [@nishanths](https://github.com/nishanths)\n\n\n```\nexhaustive ./...\n```\n\n```go\npackage token\n\ntype Token int\n\nconst (\n  Add Token = iota\n  Subtract\n  Multiply\n  Quotient\n  Remainder\n)\n\npackage calc\n\nimport \"token\"\n\nfunc f(t token.Token) {\n  switch t {\n  case token.Add:\n  case token.Subtract:\n  case token.Multiply:\n  default:\n  }\n}\n\nfunc g(t token.Token) string {\n  return map[token.Token]string{\n    token.Add:      \"add\",\n    token.Subtract: \"subtract\",\n    token.Multiply: \"multiply\",\n  }[t]\n}\n```\n\nExample\n```\ncalc.go:6:2: missing cases in switch of type token.Token: Quotient, Remainder\ncalc.go:15:9: missing map keys of type token.Token: Quotient, Remainder\n```\n\nRequirements\n```\ngo install github.com/nishanths/exhaustive/cmd/exhaustive@latest\n```\n\n### [⏫](#contents) Detect structs with uninitialized fields with [go-exhaustruct](https://github.com/GaijinEntertainment/go-exhaustruct)\n\nThis tool finds instantiations of structs with zero values. It supports struct tags to mark fields as optional. This may help to prevent unexpected zero values. — [@xobotyi](https://github.com/xobotyi)\n\n\n```\nexhaustruct ./...\n```\n\n```go\ntype Shape struct {\n  Length int\n  Width  int\n  volume    int\n  Perimeter int `exhaustruct:\"optional\"`\n}\n\n// valid\nvar a Shape = Shape{\n  Length: 5,\n  Width:  3,\n  volume: 5,\n}\n\n// invalid, `volume` is missing\nvar b Shape = Shape{\n  Length: 5,\n  Width:  3,\n}\n```\n\nRequirements\n```\ngo get -u github.com/GaijinEntertainment/go-exhaustruct/v3/cmd/exhaustruct\n```\n\n### [⏫](#contents) :fire: Detect unreachable functions with [deadcode](https://pkg.go.dev/golang.org/x/tools/cmd/deadcode)\n\nThis static analysis tool detects when functions can not be reached in any execution. There is also `-test` mode that shows if function is reachable by any of tests. — [Alan Donovan](https://github.com/adonovan), official Go team\n\n\n```\ndeadcode .\n```\n\nExample\n```\ngreet.go:23: unreachable func: goodbye\ngreet.go:20: unreachable func: Goodbyer.Greet\n```\n\nRequirements\n```\ngo install golang.org/x/tools/cmd/deadcode@latest\n```\n\n### [⏫](#contents) Detect unsafe code with [go-safer](https://github.com/jlauinger/go-safer)\n\nFind incorrect uses of `reflect.SliceHeader`, `reflect.StringHeader`, and unsafe casts between structs with architecture-sized fields. Research paper [\"Uncovering the Hidden Dangers Finding Unsafe Go Code in the Wild\"](https://arxiv.org/abs/2010.11242) presented at 19th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2020). — [@jlauinger](https://github.com/jlauinger)\n\n\n```\ngo-safer ./...\n```\n\nExample\n```\n# github.com/jlauinger/go-safer/passes/sliceheader/testdata/src/bad/composite_literal\ncomposite_literal/composite_literal.go:10:9: reflect header composite literal found\ncomposite_literal/composite_literal.go:10:9: reflect header composite literal found\n# github.com/jlauinger/go-safer/passes/sliceheader/testdata/src/bad/header_in_struct\nheader_in_struct/header_in_struct.go:16:2: assigning to reflect header object\n```\n\nRequirements\n```\ngo install github.com/jlauinger/go-safer@latest\n```\n\n### [⏫](#contents) :fire: Detect `panic` without explaining comment with [panic-linter](https://github.com/ldemailly/panic-linter)\n\nPanic should only be used very sparingly, for catching bugs basically, and thus deserve a comment to confirm that that's indeed the case. — [@ldemailly](https://github.com/ldemailly)\n\n```go\n# bad\npanic(\"catch this\")\n\n# good\npanic(\"catch this\") // does not happen unless byte is not 8 bits anymore\n```\n\n\n### [⏫](#contents) Detect unnecessary type conversions with [unconvert](https://github.com/mdempsky/unconvert)\n\nIdentify expressions like `T(x)` where `x` is already has type `T`. This tool can identify conversions that force intermediate rounding. It also can overwrite files with fix. This tool is not using `golang.org/x/tools/go/analysis` toolchain. — [@mdempsky](https://github.com/mdempsky)\n\n\n```\nunconvert ./...\n```\n\n```\n$ unconvert -v bytes fmt\nGOROOT/src/bytes/reader.go:117:14: unnecessary conversion\n                abs = int64(r.i) + offset\n                          ^\nGOROOT/src/fmt/print.go:411:21: unnecessary conversion\n        p.fmt.integer(int64(v), 16, unsigned, udigits)\n                          ^\n```\n\nRequirements\n```\ngo install github.com/mdempsky/unconvert@latest\n```\n\n### [⏫](#contents) Detect global variables with [gochecknoglobals](https://github.com/leighmcculloch/gochecknoglobals)\n\nGlobal variables are an input to functions that is not visible in the functions signature, complicate testing, reduces readability and increase the complexity of code. However, sometimes global variables make sense. This tool skips such common scenarios. This tool can be used in CI, albeit it is very strict. This tool is useful for investigations. — [@leighmcculloch](https://github.com/leighmcculloch)\n\n\n```\ngochecknoglobals ./...\n```\n\nExample\n```\n/Users/nikolaydubina/Workspace/hugo/common/paths/path.go:64:5: fpb is a global variable\n/Users/nikolaydubina/Workspace/hugo/common/paths/url.go:50:5: pb is a global variable\n/Users/nikolaydubina/Workspace/hugo/common/text/position.go:52:5: positionStringFormatfunc is a global variable\n/Users/nikolaydubina/Workspace/hugo/common/text/transform.go:26:5: accentTransformerPool is a global variable\n/Users/nikolaydubina/Workspace/hugo/common/herrors/error_locator.go:40:5: SimpleLineMatcher is a global variable\n```\n\nRequirements\n```\ngo install 4d63.com/gochecknoglobals@latest\n```\n\n### [⏫](#contents) Detect slices that could be preallocated with [prealloc](https://github.com/alexkohler/prealloc)\n\nPreallocating slices can sometimes significantly improve performance. This tool detects common scenarios where preallocating can be beneficial. This tool is not using `golang.org/x/tools/go/analysis` toolchain. — [@alexkohler](https://github.com/alexkohler)\n\n\n```\nprealloc ./...\n```\n\nExample\n```\ntools/gopls/internal/lsp/source/completion/completion.go:1484 Consider preallocating paths\ntools/gopls/internal/lsp/source/completion/package.go:54 Consider preallocating items\ntools/gopls/internal/lsp/template/symbols.go:205 Consider preallocating ans\ntools/gopls/internal/lsp/template/completion.go:199 Consider preallocating working\ntools/gopls/internal/lsp/tests/util.go:32 Consider preallocating notePositions\ntools/gopls/internal/lsp/tests/util.go:240 Consider preallocating paramParts\ntools/gopls/internal/lsp/tests/util.go:282 Consider preallocating result\ntools/gopls/internal/lsp/tests/util.go:309 Consider preallocating got\n```\n\nRequirements\n```\ngo install github.com/alexkohler/prealloc@latest\n```\n\n### [⏫](#contents) Detect unnecessary import aliases with [unimport](https://github.com/alexkohler/unimport)\n\nIt is common guideline to avoid renaming imports unless there are collisions. This tool detects where original package name would not collide. This tool is useful for investigations. This tool is not using `golang.org/x/tools/go/analysis` toolchain. — [@alexkohler](https://github.com/alexkohler)\n\n\n```\nunimport ./...\n```\n\nExample\n```\npkg/apis/apiserverinternal/v1alpha1/zz_generated.conversion.go:29 unnecessary import alias runtime\npkg/apis/apiserverinternal/v1alpha1/zz_generated.conversion.go:30 unnecessary import alias apiserverinternal\npkg/apis/apps/v1/zz_generated.conversion.go:25 unnecessary import alias unsafe\npkg/apis/apps/v1/zz_generated.conversion.go:30 unnecessary import alias conversion\npkg/apis/apps/v1/zz_generated.conversion.go:31 unnecessary import alias runtime\npkg/apis/apps/v1/zz_generated.conversion.go:32 unnecessary import alias intstr\npkg/apis/apps/v1/zz_generated.conversion.go:33 unnecessary import alias apps\npkg/apis/apps/v1/zz_generated.conversion.go:34 unnecessary import alias core\npkg/apis/apps/v1beta1/zz_generated.conversion.go:25 unnecessary import alias unsafe\npkg/apis/apps/v1beta1/zz_generated.conversion.go:27 unnecessary import alias v1beta1\npkg/apis/apps/v1beta1/zz_generated.conversion.go:30 unnecessary import alias conversion\npkg/apis/apps/v1beta1/zz_generated.conversion.go:31 unnecessary import alias runtime\n```\n\nRequirements\n```\ngo install github.com/alexkohler/unimport@latest\n```\n\n### [⏫](#contents) Detect unexpected import aliases with [importas](https://github.com/julz/importas)\n\nEnsure that import aliases take one of the allowed values. — [@julz](https://github.com/julz)\n\n\n```\nimportas -alias knative.dev/serving/pkg/apis/autoscaling/v1alpha1:autoscalingv1alpha1 -alias knative.dev/serving/pkg/apis/serving/v1:servingv1 ./...\n```\n\n```go\npackage main\n\nimport (\n  v1alpha1 \"knative.dev/serving/pkg/apis/autoscaling/v1alpha1\" // want `import \"knative.dev/serving/pkg/apis/autoscaling/v1alpha1\" imported as \"v1alpha1\" but must be \"autoscalingv1alpha1\" according to config`\n  v1 \"knative.dev/serving/pkg/apis/serving/v1\"                 // want `import \"knative.dev/serving/pkg/apis/serving/v1\" imported as \"v1\" but must be \"servingv1\" according to config`\n)\n\nfunc main() {\n...\n```\n\nRequirements\n```\ngo install github.com/julz/importas/cmd/importas@latest\n```\n\n### [⏫](#contents) Detect inconsistent import aliases with [consistentimports](https://github.com/nikolaydubina/consistentimports)\n\nIt greatly helps to navigate large codebases when imports have the same aliases. — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\nconsistentimports ./...\n```\n\nExample\n```\n-: \"k8s.io/utils/net\" netutils:4 netutil:1\n-: \"k8s.io/client-go/listers/core/v1\" corelisters:1 listersv1:1 v1listers:1\n-: \"k8s.io/client-go/informers/core/v1\" coreinformers:1 informers:1\n-: \"k8s.io/api/rbac/v1\" rbacv1:4 v1:2\n-: \"k8s.io/apimachinery/pkg/runtime\" runtime:3 kruntime:1\n-: \"k8s.io/api/imagepolicy/v1alpha1\" imagepolicyv1alpha1:1 v1alpha1:1\n-: \"k8s.io/kubernetes/plugin/pkg/admission/podtolerationrestriction/apis\n```\n\nRequirements\n```\ngo install github.com/nikolaydubina/consistentimports@latest\n```\n\n### [⏫](#contents) Detect naked returns with [nakedret](https://github.com/alexkohler/nakedret)\n\nIt is common guideline to avoid [naked returns](https://github.com/golang/go/wiki/CodeReviewComments#named-result-parameters). Naked return is when function has named return, and return statement does not specify value. This tool is useful for investigations. — [@alexkohler](https://github.com/alexkohler)\n\n\n```\nnakedret ./...\n```\n\nExample\n```\n/kubernetes/pkg/controller/podautoscaler/replica_calculator.go:421:2: naked return in func `groupPods` with 44 lines of code\n/kubernetes/pkg/kubelet/container/helpers.go:374:2: naked return in func `MakePortMappings` with 36 lines of code\n/kubernetes/pkg/kubelet/config/config.go:350:2: naked return in func `filterInvalidPods` with 17 lines of code\n/kubernetes/pkg/kubelet/config/config.go:449:3: naked return in func `checkAndUpdatePod` with 38 lines of code\n/kubernetes/pkg/kubelet/config/config.go:471:2: naked return in func `checkAndUpdatePod` with 38 lines of code\n/kubernetes/cmd/kube-controller-manager/app/controllermanager.go:717:2: naked return in func `createClientBuilders` with 19 lines of code\n/kubernetes/pkg/proxy/topology.go:77:3: naked return in func `CategorizeEndpoints` with 98 lines of code\n/kubernetes/pkg/proxy/topology.go:111:3: naked return in func `CategorizeEndpoints` with 98 lines of code\n/kubernetes/pkg/proxy/topology.go:119:3: naked return in func `CategorizeEndpoints` with 98 lines of code\n/kubernetes/pkg/proxy/topology.go:137:2: naked return in func `CategorizeEndpoints` with 98 lines of code\n```\n\nRequirements\n```\ngo install github.com/alexkohler/nakedret/cmd/nakedret@latest\n```\n\n### [⏫](#contents) Detect mixing pointer and value method receivers with [smrcptr](https://github.com/nikolaydubina/smrcptr)\n\nMixing pointer and value method receivers for the same type is discouraged, as per commong guideline [Go wiki](https://github.com/golang/go/wiki/CodeReviewComments#receiver-type) and [Google Go style guide](https://google.github.io/styleguide/go/decisions#receiver-type). — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\nsmrcptr ./...\n```\n\n```go\ntype Pancake struct{}\n\nfunc NewPancake() Pancake { return Pancake{} }\n\nfunc (s *Pancake) Fry() {}\n\nfunc (s Pancake) Bake() {}\n```\n\nExample\n```\nsmrcptr/internal/bakery/pancake.go:7:1: Pancake.Fry uses pointer\nsmrcptr/internal/bakery/pancake.go:9:1: Pancake.Bake uses value\n```\n\nRequirements\n```\ngo install github.com/nikolaydubina/smrcptr@latest\n```\n\n### [⏫](#contents) Detect vertical function ordering with [vertfn](https://github.com/nikolaydubina/vertfn)\n\nVertical function ordering is declaring functions before they are used. Based on 'Clean Code' by Robert.C.Martin. — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\nvertfn --verbose ./...\n```\n\n<div align=\"center\"><img src=\"https://github.com/nikolaydubina/vertfn/blob/master/doc/code-dep-viz.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/nikolaydubina/vertfn@latest\n```\n\n### [⏫](#contents) Detect vertical symbol ordering with [refdir](https://github.com/devnev/refdir)\n\nThis tool goes beyond just vertical ordering of function declarations, it also tracks many other types of symbols. — [@devnev](https://github.com/devnev)\n\n\n```\nrefdir --verbose ./...\n```\n\n<div align=\"center\"><img src=\"https://github.com/devnev/refdir/raw/main/doc/code-dep-viz.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/devnev/refdir@latest\n```\n\n### [⏫](#contents) Detect tests with wrong `t.Parallel()` usage with [paralleltest](https://github.com/kunwardeep/paralleltest)\n\nThis linter checks for incorrect usage of `t.Parallel()` calls. It will detect if `t.Parallel()` is missing. — [@kunwardeep](https://github.com/kunwardeep)\n\n\n```\nparalleltest ./...\n```\n\nExample\n```\n/kubernetes/pkg/scheduler/framework/plugins/nodeunschedulable/node_unschedulable_test.go:28:1: Function TestNodeUnschedulable missing the call to method parallel\n/kubernetes/pkg/scheduler/framework/plugins/nodevolumelimits/csi_test.go:68:1: Function TestCSILimits missing the call to method parallel\n/kubernetes/pkg/scheduler/framework/plugins/nodevolumelimits/csi_test.go:480:2: Range statement for test TestCSILimits missing the call to method parallel in test Run\n/kubernetes/pkg/scheduler/framework/plugins/nodevolumelimits/non_csi_test.go:81:1: Function TestEphemeralLimits missing the call to method parallel\n```\n\nRequirements\n```\ngo install github.com/kunwardeep/paralleltest@latest\n```\n\n### [⏫](#contents) Detect tests with wrong `t.Parallel()` usage with [tparallel](https://github.com/moricho/tparallel)\n\nThis linter checks for incorrect usage of `t.Parallel()` calls. — [@moricho](https://github.com/moricho)\n\n\n```\ngo vet -vettool=`which tparallel` ./...\n```\n\nExample\n```\ntestdata/src/sample/table_test.go:7:6: Test_Table1 should use t.Cleanup\ntestdata/src/sample/table_test.go:7:6: Test_Table1 should call t.Parallel on the top level as well as its subtests\ntestdata/src/sample/table_test.go:30:6: Test_Table2's subtests should call t.Parallel\n```\n\nRequirements\n```\ngo install github.com/moricho/tparallel/cmd/tparallel@latest\n```\n\n### [⏫](#contents) Detect magic numbers with [mnd](https://github.com/tommy-muehle/go-mnd)\n\nThis tool has heuristics to detect magic numbers. — [@tommy-muehle](https://github.com/tommy-muehle)\n\n\n```\nmnd ./...\n```\n\nExample\n```\n/go-mnd/examples/bad/main.go:18:23: Magic number: 200, in <condition> detected\n/go-mnd/examples/bad/main.go:11:12: Magic number: 2, in <assign> detected\n```\n\nRequirements\n```\ngo install github.com/tommy-muehle/go-mnd/v2/cmd/mnd@latest\n```\n\n### [⏫](#contents) Detect magic strings with [goconst](https://github.com/jgautheron/goconst)\n\nThis tool detects repeated strings. — [@jgautheron](https://github.com/jgautheron)\n\n\n```\ngoconst -min-occurrences 5 -output json ./... | jq\n```\n\nExample\n```\n\"not reached\": [                                                                                                                                          \n  {                                                                                                                                                       \n    \"Filename\": \"tpl/internal/go_templates/texttemplate/hugo_template.go\",                                                                                \n    \"Offset\": 7916,\n    \"Line\": 267,\n    \"Column\": 8\n  },\n  {\n    \"Filename\": \"tpl/internal/go_templates/texttemplate/exec.go\",\n    \"Offset\": 15056,\n    \"Line\": 525,\n    \"Column\": 8\n  },\n  {\n    \"Filename\": \"tpl/internal/go_templates/texttemplate/exec.go\",\n    \"Offset\": 21354,\n    \"Line\": 699,\n    \"Column\": 8\n  },\n  {\n    \"Filename\": \"tpl/internal/go_templates/texttemplate/exec.go\",\n    \"Offset\": 28145,\n    \"Line\": 903,\n    \"Column\": 8\n  },\n  ...\n```\n\nRequirements\n```\ngo install github.com/jgautheron/goconst/cmd/goconst@latest\n```\n\n### [⏫](#contents) Detect bound checks with [pat/boundcheck](https://github.com/maruel/pat)\n\nThis tool detects bound checks in source code by analysing compiled code. This is useful for audit. — [@maruel](https://github.com/maruel)\n\n\n```\nboundcheck -pkg ./cmd/nin | less -R\n```\n\n<div align=\"center\"><img src=\"https://github.com/maruel/pat/wiki/boundcheck.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/maruel/pat/cmd/...@latest\n```\n\n### [⏫](#contents) Calculate Cognitive Complexity with [gocognit](https://github.com/uudashr/gocognit)\n\nCognitive Complexity as defined in this tool can be more illustrative than Cyclometric Complexity. Research paper [\"Cognitive Complexity - a new way of measuring understandability\"](https://www.sonarsource.com/docs/CognitiveComplexity.pdf), 2021. — [@uudashr](https://github.com/uudashr)\n\n\n```\ngocognit .\n```\n\n```go\n// Complexity Cyclomatic=4 Cognitive=7\n// Cognitive complexity give higher score compare to cyclomatic complexity.\nfunc SumOfPrimes(max int) int {         // +1\n    var total int\n    for i := 1; i < max; i++ {          // +1 (cognitive +1, nesting)\n        for j := 2; j < i; j++ {        // +1 (cognitive +2, nesting)\n            if i%j == 0 {               // +1\n                continue OUT\n            }\n        }\n        total += i\n    }\n    return total\n}\n\n// Complexity Cyclomatic=4 Cognitive=1\n// Cognitive complexity give lower score compare to cyclomatic complexity.\nfunc GetWords(number int) string {      // +1\n    switch number {\n        case 1:                         // +1 (cognitive 0)\n            return \"one\"\n        case 2:                         // +1 (cognitive 0)\n            return \"a couple\"\n        case 3:                         // +1 (cognitive 0)\n            return \"a few\"\n        default:\n            return \"lots\"\n    }\n}\n```\n\nExample\n```\n21 main (BasicSymtabConverter).SymtabFileToTreemap basic_converter.go:23:1\n12 symtab parseGoSymtabLine symtab/go_symtab_parser.go:37:1\n11 main main main.go:30:1\n8 symtab EqSymbolName symtab/symbol_name_parser.go:12:1\n7 symtab ParseSymbolName symtab/symbol_name_parser.go:32:1\n7 symtab Test_parseGoSymtabLine symtab/go_symtab_parser_private_test.go:5:1\n4 symtab Test_ParseSymbolName symtab/symbol_name_parser_private_test.go:5:1\n3 main updateNodeNamesWithByteSize main.go:99:1\n3 main unique basic_converter.go:119:1\n3 symtab (GoSymtabParser).ParseSymtab symtab/go_symtab_parser.go:14:1\n2 fmtbytecount ByteCountIEC fmtbytecount/format_bytecount.go:3:1\n```\n\nRequirements\n```\ngo install github.com/uudashr/gocognit/cmd/gocognit@latest\n```\n\n### [⏫](#contents) Calculate Cyclomatic Complexity with [gocyclo](https://github.com/fzipp/gocyclo)\n\nCyclomatic complexity is a code quality metric which can be used to identify code that needs refactoring. It measures the number of linearly independent paths through a function's source code. For example, excessive usage of nested `if` and `for` leads to increased cyclomatic complexity. This tool can report `top-N` and `over`, which makes it suitable for CI as a linter and manual investigation. — [@fzipp](https://github.com/fzipp)\n\n\n```\ngocyclo .\n```\n\nExample\n```\n$ gocyclo -over=5 .\n34 examplemodule (*With32FieldsFeatureTransformer).Fit cmd/generate/tests/with32fieldsfp.go:48:1\n24 main parseCode cmd/generate/parser.go:83:1\n13 examplemodule (*AllTransformersFeatureTransformer).Fit cmd/generate/tests/alltransformersfp.go:27:1\n12 examplemodule (*EmployeeFeatureTransformer).Fit cmd/generate/tests/employeefp.go:26:1\n11 transformers (*CountVectorizer).TransformInplace transformers/textprocesors.go:84:1\n11 structtransformer (*StructTransformer).Transform structtransformer/structtransformer.go:38:1\n11 examplemodule (*LargeMemoryTransformerFeatureTransformer).Fit cmd/generate/tests/largememorytransformerfp.go:25:1\n10 examplemodule (*WeirdTagsFeatureTransformer).Fit cmd/generate/tests/weirdtagsfp.go:24:1\n8 transformers (*SampleNormalizerL2).TransformInplace transformers/samplenormalizers.go:58:1\n```\n\nRequirements\n```\ngo install github.com/fzipp/gocyclo/cmd/gocyclo@latest\n```\n\n### [⏫](#contents) Calculate Cyclomatic Complexity with [cyclop](https://github.com/bkielbasa/cyclop)\n\nThis linter calculates cyclomatic complexity of functions or packages. It can select minimum complexity and act as blocking linter in CI pipelines. The key offering from this linter is that it can calculate avg cyclomatic complexity on package. — [@bkielbasa](https://github.com/bkielbasa)\n\n\n```\ncyclop ./...\n# to find packages with avg cyclomatic complexity above maximum\ncyclop -packageAverage 5 -maxComplexity 10000 ./...\n```\n\nExample\n```\n/kubernetes/test/integration/scheduler/scoring/priorities_test.go:17:1: the average complexity for the package scoring is 6.100000, max is 5.000000\n/kubernetes/test/integration/serviceaccount/service_account_test.go:17:1: the average complexity for the package serviceaccount is 10.666667, max is 5.000000\n/kubernetes/test/integration/volume/persistent_volumes_test.go:17:1: the average complexity for the package volume is 6.157895, max is 5.000000\n/kubernetes/test/list/main_test.go:17:1: the average complexity for the package main is 5.461538, max is 5.000000\n/kubernetes/test/typecheck/main_test.go:17:1: the average complexity for the package main is 5.916667, max is 5.000000\n/kubernetes/third_party/forked/golang/net/dnsclient_test.go:10:1: the average complexity for the package net is 5.333333, max is 5.000000\n```\n\nRequirements\n```\ngo install github.com/bkielbasa/cyclop@latest\n```\n\n### [⏫](#contents) Calculate age of comments with [go-commentage](https://github.com/nikolaydubina/go-commentage)\n\nThis go vet compatible tool analyses AST and git and collects details on how far comments drift from code they describe. — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo-commentage -min-days-behind 360 ./...\n```\n\nExample\n```\nkubernetes/pkg/util/ipset/ipset.go:283:1: \"CreateSet\": doc_last_updated_behind_days(1336.83)\nkubernetes/pkg/util/ipset/ipset.go:296:1: \"createSet\": doc_last_updated_behind_days(1603.17)\nkubernetes/pkg/util/ipset/ipset.go:320:1: \"AddEntry\": doc_last_updated_behind_days(1578.10)\nkubernetes/pkg/util/ipset/ipset.go:332:1: \"DelEntry\": doc_last_updated_behind_days(1578.10)\nkubernetes/pkg/util/ipset/ipset.go:340:1: \"TestEntry\": doc_last_updated_behind_days(450.07)\n```\n\nRequirements\n```\n# get latest version of git\ngo install github.com/nikolaydubina/go-commentage@latest\n```\n\n### [⏫](#contents) Ensure `if` statements using short assignment with [ifshort](https://github.com/esimonov/ifshort)\n\nLinter for checking that your code uses short syntax for `if` statements whenever possible. However, as of `2023-05-26`, it is not maitaned and is not working. — [@esimonov](https://github.com/esimonov)\n\n\n```\nifshort ./...\n```\n\n```go\n// bad\nfunc someFunc(k string, m map[string]interface{}) {\n  _, ok := m[k]\n  if !ok {\n    return\n  }\n\n  err := otherFunc1()\n  if err != nil {\n    otherFunc2(err)\n  }\n}\n\n// good\nfunc someFunc(k string, m map[string]interface{}) {\n  if _, ok := m[k]; !ok {\n    return\n  }\n\n  if err := otherFunc1(); err != nil {\n    otherFunc2(err)\n  }\n}\n```\n\nRequirements\n```\ngo install github.com/esimonov/ifshort@latest\n```\n\n### [⏫](#contents) :fire: Detect sub-optimal struct layout with [betteralign](https://github.com/dkorunic/betteralign)\n\nThis tool detect structs that would use less memory if their fields were sorted and optionally sort such fields. — [@dkorunic](https://github.com/dkorunic)\n\n\n```\nbetteralign -apply ./...\n```\n\nRequirements\n```\ngo install github.com/dkorunic/betteralign/cmd/betteralign@latest\n```\n\n### [⏫](#contents) :fire: Detect sub-optimal struct layout with [structlayout-optimize](https://github.com/dominikh/go-tools/blob/master/cmd/structlayout-optimize)\n\nThis tool reorders struct fields to minimize the amount of padding. — [@dominikh](https://github.com/dominikh)\n\nRequirements\n```\ngo install https://github.com/dominikh/go-tools/blob/master/cmd/structlayout-optimize@latest\n```\n\n### [⏫](#contents) Visualize struct layout with [structlayout](https://github.com/dominikh/go-tools/tree/master/cmd/structlayout)\n\nDisplay the byte offset and size of each field, respecting alignment/padding. — [@dominikh](https://github.com/dominikh)\n\n\n```\nstructlayout -json bytes Buffer | structlayout-svg -t \"bytes.Buffer\" > /tmp/struct.svg\n```\n\n<div align=\"center\"><img src=\"https://github.com/dominikh/go-tools/blob/master/images/screenshots/struct.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/ajstarks/svgo/structlayout-svg@latest\ngo install honnef.co/go/tools/cmd/structlayout@latest\n```\n\n### [⏫](#contents) Rely on compiler for stricter Enums\n\nFor compile time blocking of: accidental arithmetics; implicit cast of untyped constants; all operators except `==` and `!=`; — simply wrap into a struct in separate package and do not export field. [example](http://github.com/nikolaydubina/go-enum-example).\n\n```go\npackage color\n\ntype Color struct{ c uint }\n\nvar (\n  Undefined = Color{}\n  Red       = Color{1}\n  Green     = Color{2}\n  Blue      = Color{3}\n)\n```\n\n\n### [⏫](#contents) Analyze function callsites with [go-callsite-stats](https://github.com/nikolaydubina/go-callsite-stats)\n\nScrape callsite information about functions to learn better how functions are beinn used. This can help in refactoring, naming, OOP. This tool calculates frequency of names on assignments in returns and frequency of names in arguments. This can be used to detect ignored returns as well. — [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo-callsite-stats ./...\n```\n\n```\nx16:       (no assignments)                  = execHostnameTest(serviceAddress:7)\n                                                              (nodePortAddress:3)\n                                                              (nodePortAddress0:3)\n                                                              (nodePortAddress1:2)\n                                                              (clusterIPAddress:1)\nx16:       pod:10, err:12                    = CreatePod(client:11, namespace:10, nil:9, pvclaims:6, false:7, execCommand:2)\n          clientPod:1                                  (c:2, ns:2, podCount:2, true:3)\n          _:1                                          (pod:1, pod:1, pvclaims:2, false:2)\n          err:1                                        (ctx:1, nil:1, createdClaims:1, pvcClaims:1)\n                                                        (namespace:1, nameSpace:1, podTemplate:1)\n                                                        (, basePod:1)\nx16:       (no assignments)                  = GET()\nx16:       deployment:11, err:14             = UpdateDeploymentWithRetries(c:14, ns:14, deploymentName:3, applyUpdate:1, poll:1,pollShortTimeout:1)                                                         \n          _:2                                                            (client:1, namespace:1, pollTimeout:1)\n          deploymentWithUpdatedReplicas:1                                (applyUpdate:1, pollInterval:1, name:1)\nx16:       err:16                            = waitForDefinition(schemaFoo:12\n                                                                (schemaWaldo:3)\n                                                                (expect:1)\n```\n\nRequirements\n```\ngo install github.com/nikolaydubina/go-callsite-stats@latest\n```\n\n\n"
        },
        {
          "name": "badge.svg",
          "type": "blob",
          "size": 1.099609375,
          "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"72\" height=\"20\" role=\"img\" aria-label=\"go: recipes\"><title>go: recipes</title><linearGradient id=\"s\" x2=\"0\" y2=\"100%\"><stop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/><stop offset=\"1\" stop-opacity=\".1\"/></linearGradient><clipPath id=\"r\"><rect width=\"72\" height=\"20\" rx=\"3\" fill=\"#fff\"/></clipPath><g clip-path=\"url(#r)\"><rect width=\"23\" height=\"20\" fill=\"#555\"/><rect x=\"23\" width=\"49\" height=\"20\" fill=\"#ff69b4\"/><rect width=\"72\" height=\"20\" fill=\"url(#s)\"/></g><g fill=\"#fff\" text-anchor=\"middle\" font-family=\"Verdana,Geneva,DejaVu Sans,sans-serif\" text-rendering=\"geometricPrecision\" font-size=\"110\"><text aria-hidden=\"true\" x=\"125\" y=\"150\" fill=\"#010101\" fill-opacity=\".3\" transform=\"scale(.1)\" textLength=\"130\">go</text><text x=\"125\" y=\"140\" transform=\"scale(.1)\" fill=\"#fff\" textLength=\"130\">go</text><text aria-hidden=\"true\" x=\"465\" y=\"150\" fill=\"#010101\" fill-opacity=\".3\" transform=\"scale(.1)\" textLength=\"390\">recipes</text><text x=\"465\" y=\"140\" transform=\"scale(.1)\" fill=\"#fff\" textLength=\"390\">recipes</text></g></svg>"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.150390625,
          "content": "module github.com/nikolaydubina/go-recpies\n\ngo 1.23\n\nrequire (\n\tgithub.com/nikolaydubina/mdpage v1.7.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.4296875,
          "content": "github.com/nikolaydubina/mdpage v1.7.0 h1:whMG+jYWvTE59/ncZXw0n2Dr58jExCD2TBDZTPSoU+w=\ngithub.com/nikolaydubina/mdpage v1.7.0/go.mod h1:RJhbUZIlRBVQRMkLYFgDehxqkRSXSPYhiBwQWtwIlAo=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.125,
          "content": "package main\n\n//go:generate go run github.com/nikolaydubina/mdpage -page page.yaml -o README.md\n\nfunc main() { /* 👋🏻 */ }\n"
        },
        {
          "name": "page.yaml",
          "type": "blob",
          "size": 175.009765625,
          "content": "header: |\n  <h1 align=\"center\">🦩 Go Recipes</h1>\n  <p align=\"center\">Handy well-known and <i>lesser</i>-known tools for Go projects</p>\n\n  > _Know some cool tool or one-liner? Have a feature request or an idea?_  \n  > _Feel free to edit this page or create an Issue!_  \n\n  [![Hits](https://hits.sh/github.com/nikolaydubina/go-recipes.svg?view=today-total&extraCount=64309)](https://hits.sh/github.com/nikolaydubina/go-recipes/)\n  [![go-recipes](https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/badge.svg?raw=true)](https://github.com/nikolaydubina/go-recipes)\ncontents:\n  title: Contents\nentry:\n  back: ⏫\n  requirements:\n    title: Requirements\n  example:\n    title: Example\ngroups:\n  - title: AI Tools\n    entries:\n      - title: Advanced autocompletion\n        name: Copilot\n        description: Start typing and after few seconds you will get autocompletion suggestion. Some useful ways to interact with it listed below.\n        url: https://marketplace.visualstudio.com/items?itemName=GitHub.copilot\n        example_image_url: https://user-images.githubusercontent.com/37570492/212964557-8d832278-61bb-4288-a8a7-47f35859e868.gif\n        commands:\n          - given a function signature and docstring, it will suggest function body\n          - given a function body, it will suggest docstring\n        requirements:\n          - VSCode\n          - GitHub account\n      - title: Code analysis and recommendations\n        name: charmbracelet/mods\n        description: This is a nice looking CLI wrapper for major LLM APIs from [Charm](https://github.com/charmbracelet) team. It supports OpenAI and [LocalAI](https://github.com/go-skynet/LocalAI). It passes arbitrary human language command string and concatenated with STDIN input. Multiple useful commands are possible.\n        url: https://github.com/charmbracelet/mods\n        commands:\n          - mods -f \"what are your thoughts on improving this code?\" < main.go | glow\n          - mods -f \"you are an expert Go programmer. find potential bugs in following Go code.\" < my_class.go | glow\n        example_image_url: https://user-images.githubusercontent.com/25087/237975943-738fe969-1c9f-4849-af8a-cde38156ce92.gif\n        requirements:\n          - \"# OpenAI token or LocalAI model and server\"\n          - go install github.com/charmbracelet/glow@latest\n          - go install github.com/charmbracelet/mods@latest\n      - title: Pull request recommendations\n        name: gpt-pullrequest-updater\n        description: This tool generates GitHub pull request description and review using OpenAI ChatGPT. There is also GitHub Action available.\n        url: https://github.com/ravilushqa/gpt-pullrequest-updater\n        author: https://github.com/ravilushqa\n        example_image_url: ./img/gpt-pullrequest-updater-example.png\n        requirements:\n          - \"# OpenAI token\"\n          - \"# GitHub token\"\n          - go install github.com/ravilushqa/gpt-pullrequest-updater/cmd/description@latest\n          - go install github.com/ravilushqa/gpt-pullrequest-updater/cmd/review@latest\n      - title: Commit message recommendation\n        description: Short summaries of changes usually work well.\n        name: charmbracelet/mods\n        url: https://github.com/charmbracelet/mods\n        commands:\n          - git diff | mods \"summarize following git diff into short git commit message.\"\n          - git diff | mods \"you are expert Go programmer. you are owner of this codebase. think through step by step. summarize following git diff into short git commit message under 10 words.\"\n        example_output: |\n          Add new entries for Using AI in Go projects, including Advanced autocompletion with Copilot and Code analysis and recommendations with charmbracelet/mod. Update page.yaml accordingly.\n        requirements:\n          - \"# OpenAI token or LocalAI model and server\"\n          - go install github.com/charmbracelet/mods@latest\n      - title: Test case recommendation\n        name: charmbracelet/mods\n        url: https://github.com/charmbracelet/mods\n        description: Concatenate two files and ask to recommend missing test cases. It is not precise, has high false positive and high false negative rate. Often can not detect that tests cases are present at all. However, it can give a fresh perspective on your code. Best results are produced when asking succinct short replies. Example outputs below.\n        commands:\n          - cat fpdecimal.go fpdecimal_test.go | head -c 3600 | mods -f \"you are an expert Go programmer. investigate supplied Go program and associated test suite. think through this step by step. make sure you get the right answer. recommend missing test cases. write very succinctly. under 100 words.\" | glow\n          - cat fpdecimal.go fpdecimal_test.go | head -c 4000 | mods -f \"investigate supplied Go program and associated test suite. recommend missing test cases.\" | glow\n        example_output: |\n          For additional test cases, consider adding tests for negative float values, positive and negative infinity, unsigned\n          integers, zero divided by a number greater than zero, and division with only zeros.                       \n          ------------------\n            Test cases:                                                                                                                                                                                                                             \n            • Test for unmarshalling JSON into Decimal                                                                          \n            • Test for marshalling Decimal to JSON                                                                              \n            • Test for multiplication with zero                                                                                 \n            • Test for multiplication identity                                                                                  \n            • Test for division with zero                                                                                       \n            • Test for all comparison operations for the Decimal struct.                                                        \n          ------------------\n          Missing test cases for the  fpdecimal  Go program include those for testing the  DivMod  and  FromString  functions.\n          Additionally, there should be tests checking that zero division is not allowed, and tests that ensure the           \n          FractionDigits  value does not change during the program's runtime. Important test cases include comparing decimals \n          for equality, as well as testing the commutativity, associativity, and identity properties of addition and          \n          multiplication. Finally, the program should have a test that verifies the  MarshalJSON  and  UnmarshalJSON          \n          functions.\n      - title: Time complexity estimate\n        name: charmbracelet/mods\n        url: https://github.com/charmbracelet/mods\n        description: This is one of recommended use cases by OpenAI website. It can produce fairly good estimations. However, in its direct form usefulness is questionable, since complex cases are not handled precisely enough, educational potential is limited, and simple cases do not require this. Perhaps, this will be utilized in future work on using models in compiler and programming. Copy function and pipe it to model with prompt asking for time complexity estimation. Below is an example.\n        commands:\n          - pbpaste | mods -f \"calculate time complexity of following Go code function.\" | glow\n        example_content_ext: go\n        example_content: |\n          func AppendFixedPointDecimal(b []byte, v int64, p int) []byte {\n            if v == 0 {\n              return append(b, '0')\n            }\n\n            if p == 0 {\n              return strconv.AppendInt(b, v, 10)\n            }\n\n            if v < 0 {\n              v = -v\n              b = append(b, '-')\n            }\n\n            s := len(b)\n            b = strconv.AppendInt(b, v, 10)\n\n            if len(b)-s > p {\n              i := len(b) - p\n              b = append(b, 0)\n              copy(b[i+1:], b[i:])\n              b[i] = '.'\n            } else {\n              i := 2 + p - (len(b) - s)\n              for j := 0; j < i; j++ {\n                b = append(b, 0)\n              }\n              copy(b[s+i:], b[s:])\n              copy(b[s:], []byte(zeroPrefix[:i]))\n            }\n\n            return b\n          }\n        example_output: |\n          The time complexity of the AppendFixedPointDecimal function is O(N), where N is the length of the input byte slice  \n          b. This is because the function performs a constant number of operations for each byte in b, and the largest        \n          operation within the function is the loop that appends zeros to the byte slice, which has a length proportional to  \n          the input. Other operations, such as integer conversions and comparisons, are considered constant time since the    \n          input size is fixed.                 \n          ------------------\n          The time complexity of the function depends on the input values  v  and  p .    \n          • The first three if statements before the main computation take constant time, \n          so they don't contribute to the overall time complexity.                        \n          • The  strconv.AppendInt  function used twice has a time complexity of          \n          O(log(v)), where v is the integer being converted to a string representation in \n          base 10.                                                                        \n          • The condition  len(b)-s > p  has a constant time complexity.                  \n          • The  append  and  copy  operations inside the if and else blocks take linear  \n          time proportional to  p .                                                       \n          • The  for  loop has a constant number of iterations, specifically 2 +  p  - (  \n          len(b)-s ). The  append  and  copy  operations inside the loop also take linear \n          time proportional to  p .                                                       \n          Therefore, the overall time complexity of the function is O(log(v) + p).\n  - title: Test\n    entries:\n      - title: \":fire: Continuous Tests Monitoring\"\n        description: Track tests duration, errors, flackiness. Run JUnit test output converter and submit result to codecov.io via GitHub Action.\n        name: codecov.io\n        url: https://app.codecov.io\n        author: https://codecov.io\n        example_image_url: ./img/codecov-tests.png\n        requirements:\n          - go install gotest.tools/gotestsum@latest\n        commands:\n          - go test -coverprofile=coverage.out -cover -json ./... | gotestsum --junitfile tests.xml\n      - title: Make treemap of coverage\n        description: Visualize distribution of code coverage in your project. This helps to identify code areas with high and low coverage. Useful when you have large project with lots of files and packages. This 2D \"image-hash\" of your project should be more representative than a single number. Also available at https://go-cover-treemap.io.\n        example_image_url: ./img/hugo-code-coverage.svg\n        name: go-cover-treemap\n        url: https://github.com/nikolaydubina/go-cover-treemap\n        author: https://github.com/nikolaydubina\n        requirements:\n          - go install github.com/nikolaydubina/go-cover-treemap@latest\n        commands:\n          - go test -coverprofile cover.out ./...\n          - go-cover-treemap -coverprofile cover.out > out.svg\n      - title: Browse coverage\n        description: This is very helpful tool from the official Go toolchain. Similar visualization is integrated into VSCode and Goland, but can be used separately.\n        example_image_url: ./img/tool-cover-html.png\n        commands:\n          - go test -coverprofile cover.out ./...\n          - go tool cover -html=cover.out\n      - title: Browse coverage\n        name: gocov-html\n        url: https://github.com/matm/gocov-html\n        author: https://github.com/matm\n        description: Browse code coverage in statically generated HTML page. Multiple styles are supported. You may need to convert coverage report into `gocov` format.\n        example_image_url: ./img/gocov-html.png\n        commands:\n          - gocov test strings | gocov-html -t golang > strings.html\n          - gocov test encoding/csv strings | gocov-html -t kit > strings.html\n          - \"gocov test strings|./gocov-html -cmax 90 > strings.html # show functions with <90% coverage\"\n        requirements:\n          - go install github.com/axw/gocov/gocov@latest\n          - go install github.com/matm/gocov-html/cmd/gocov-html@latest\n      - title: \":fire: Browse coverage\"\n        name: xgo\n        description: \"The displayed coverage is a combination of coverage and git diff. By default, only modified lines were shown. This helps to quickly locate changes that were not covered, and add tests for them incrementally.\"\n        url: https://github.com/xhd2015/xgo\n        author: https://github.com/xhd2015\n        example_image_url: https://github.com/xhd2015/xgo/raw/master/doc/img/coverage.jpg\n        commands:\n          - xgo tool coverage serve cover.out\n        requirements:\n          - go install github.com/xhd2015/xgo/cmd/xgo@latest\n      - title: Browse coverage in terminal\n        description: Browse code coverage similarly to HTML provided by official Go toolchain, but in terminal. Other notable features are package level statistics, coverage only for changed files.\n        name: gocovsh\n        url: https://github.com/orlangure/gocovsh\n        author: https://github.com/orlangure\n        example_image_url: https://github.com/orlangure/gocovsh/raw/master/examples/general.gif\n        commands:\n          - go test -cover -coverprofile coverage.out\n          - \"gocovsh                        # show all files from coverage report\"\n          - \"git diff --name-only | gocovsh # only show changed files\"\n          - \"git diff | gocovsh             # show coverage on top of current diff\"\n          - \"gocovsh --profile profile.out  # for other coverage profile names\"\n        requirements:\n          - go install github.com/orlangure/gocovsh@latest\n      - title: Pretty print coverage in terminal\n        description: It is similar to `go tool cover -html=cover.out` but in terminal. You can filter by functions, packages, minimum coverage, and more.\n        name: nikandfor/cover\n        url: https://github.com/nikandfor/cover\n        author: https://github.com/nikandfor\n        commands:\n          - cover\n        requirements:\n          - go install github.com/nikandfor/cover@latest\n        example_image_url: img/cover.png\n      - title: Run coverage collector server\n        description: This tool allows to collect coverage as soon as code is executed.\n        url: https://github.com/qiniu/goc\n        author: https://github.com/qiniu\n        example_image_url: https://github.com/qiniu/goc/raw/master/docs/images/intro.gif\n        name: goc\n        commands:\n          - goc server\n          - goc build\n          - goc profile\n        requirements:\n          - go install github.com/qiniu/goc@latest\n      - title: Visualize live coverage in VSCode\n        description: Official Go VSCode plugin already has coverage highlighting. In addition to that, this tool shows covered lines as soon as they are executed. This can be useful for running manual integration or system tests or debugging.\n        url: https://github.com/qiniu/goc\n        author: https://github.com/qiniu\n        example_image_url: https://github.com/qiniu/goc/raw/master/docs/images/goc-vscode.gif\n        name: goc\n        requirements:\n          - go install github.com/qiniu/goc@latest\n      - title: \":fire: Detect drops in coverage\"\n        name: go-test-coverage\n        description: This tool designed to report issues when test coverage falls below a specified threshold. Likely you would want to use it in the CI.\n        url: https://github.com/vladopajic/go-test-coverage\n        author: https://github.com/vladopajic\n        requirements:\n          - go install github.com/vladopajic/go-test-coverage/v2@latest\n        commands:\n          - go-test-coverage --config=./.testcoverage.yml\n      - title: Shuffle tests\n        description: This is less known option that is disabled by default. However, for robust test suite it is beneficial. More test flags and full description is available at `go help testflag`.\n        commands:\n          - go test -shuffle=on\n      - title: Run tests sequentially\n        description: Use when you need to synchronize tests, for example in integration tests that share environment. [Official documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags).\n        commands:\n          - go test -p 1 -parallel 1 ./...\n      - title: Run tests in parallel\n        description: Add `t.Parallel` to your tests case function bodies. As per documentation, by default `-p=GOMAXPROCS` and `-parallel=GOMAXPROCS` when you run `go test`. Different packages by default run in parallel, and tests within package can be enforced to run in parallel too. Make sure to copy test case data to new variable, why explained [here](https://gist.github.com/posener/92a55c4cd441fc5e5e85f27bca008721). [Official documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags).\n        example_content_ext: go\n        example_content: |\n          ...\n          for _, tc := range tests {\n              tc := tc\n              t.Run(tc.name, func(t *testing.T) {\n                  t.Parallel()\n                  ...\n      - title: Run all Fuzz tests\n        description: Standard tool runs only single fuzz test. Use following to run all fuzz tests in a package.\n        commands:\n          - go test -list . | grep Fuzz | xargs -P 8 -I {} go test -fuzz {} -fuzztime 5s .\n      - title: Detect goroutine leaks\n        description: Instrument your test cases with verification call. Alternatively, you can add single call in `TestMain`. This tool was recommended by Pyroscope in [blog](https://grafana.com/blog/2023/04/19/how-to-troubleshoot-memory-leaks-in-go-with-grafana-pyroscope/).\n        url: https://github.com/uber-go/goleak\n        author: Uber\n        name: goleak\n        example_content_ext: go\n        example_content: |\n          func TestA(t *testing.T) {\n            defer goleak.VerifyNone(t)\n            ...\n          }\n        requirements:\n          - go get -u go.uber.org/goleak\n      - title: \"Detect goroutine leaks\"\n        description: Refactored, tested variant of the goroutine leak detector found in both `net/http` tests and the cockroachdb source tree. You have to call this library in your tests.\n        name: leaktest\n        url: https://github.com/fortytw2/leaktest\n        author: https://github.com/fortytw2\n        example_content: |\n          func TestPoolContext(t *testing.T) {\n            ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n            defer cancel()\n            defer leaktest.CheckContext(ctx, t)()\n\n            go func() {\n              for {\n                time.Sleep(time.Second)\n              }\n            }()\n          }\n      - title: \":fire: Visualize test runs\"\n        description: This tool visualizes Go test results in a browser. It's helpful with understanding parallelism of tests and identifying slow tests. More information can be found in our blog post about optimizing Go tests parallelism.\n        name: vgt\n        url: https://github.com/roblaszczak/vgt\n        author: https://github.com/roblaszczak\n        example_image_url: https://github.com/roblaszczak/vgt/raw/main/docs/img3.png\n        commands:\n          - go test -json ./... | vgt\n        requirements:\n          - go install github.com/roblaszczak/vgt@latest\n      - title: Summarize `go test`\n        description: This lightweight wrapper around STDOUT of JSON of `go test` will nicely render colorized test status, details of failures, duration, coverage, and package summary.\n        name: tparse\n        url: https://github.com/mfridman/tparse\n        author: https://github.com/mfridman\n        example_image_url: ./img/tparse.png\n        commands:\n          - set -o pipefail && go test ./... -json | tparse -all\n        requirements:\n          - go install github.com/mfridman/tparse@latest\n      - title: Decorate `go test`\n        description: Add colors and enrich `go test` output. It can be used in CI pipeline and has lots of alternative visualizations and options.\n        name: richgo\n        url: https://github.com/kyoh86/richgo\n        author: https://github.com/kyoh86\n        commands:\n          - richgo test ./...\n        example_image_url: https://asciinema.org/a/99810.png\n        requirements:\n          - go install github.com/kyoh86/richgo@latest\n      - title: \"Decorate `go test`\"\n        description: Add colors to `go test` output. Very lightweight wrapper around `go test` STDOUT.\n        name: gotest\n        url: https://github.com/rakyll/gotest\n        author: https://github.com/rakyll\n        example_image_url: https://raw.githubusercontent.com/jonasbn/go-test-demo/1.0.0/gotest-go-test-demo.png\n        commands:\n          - gotest ./...\n        requirements:\n          - go install github.com/rakyll/gotest@latest\n      - title: Decorate `go test`\n        description: This wrapper around `go test` renders test output in easy to read format. Also supports JUnit, JSON output, skipping slow tests, running custom binary.\n        name: gotestsum\n        url: https://github.com/gotestyourself/gotestsum\n        author: https://github.com/dnephin\n        commands:\n          - gotestsum --format dots\n        example_image_url: https://user-images.githubusercontent.com/442180/182284939-e08a0aa5-4504-4e30-9e88-207ef47f4537.gif\n        requirements:\n          - go install gotest.tools/gotestsum@latest\n      - title: Format `go test` results as documentation\n        name: gotestdox\n        description: Decorates `go test` results by converting CamelCaseTestNames into readable sentences.\n        url: https://github.com/bitfield/gotestdox\n        author: https://github.com/bitfield\n        example_image_url: https://github.com/bitfield/gotestdox/raw/main/img/demo.gif\n        commands:\n          - gotestdox ./...\n        requirements:\n          - go install github.com/bitfield/gotestdox/cmd/gotestdox@latest\n      - title: Get slowest tests\n        description: This is subcommand of `gotestsum` that processes JSON output of `go test` to find slowest tests.\n        name: gotestsum\n        url: https://github.com/gotestyourself/gotestsum\n        author: https://github.com/dnephin\n        commands:\n          - go test -json -short ./... | gotestsum tool slowest --threshold 500ms\n        example_output: |\n          gotest.tools/example TestSomething 1.34s\n          gotest.tools/example TestSomethingElse 810ms\n        requirements:\n          - go install gotest.tools/gotestsum@latest\n      - title: Auto-Instrument skipping slowest tests\n        description: This is subcommand of `gotestsum` that processes JSON output of `go test` to find slowest tests and instruments test cases to skip them with `t.Skip()` statements.\n        name: gotestsum\n        url: https://github.com/gotestyourself/gotestsum\n        author: https://github.com/dnephin\n        commands:\n          - go test -json ./... | gotestsum tool slowest --skip-stmt \"testing.Short\" --threshold 200ms\n        example_output: |\n          gotest.tools/example TestSomething 1.34s\n          gotest.tools/example TestSomethingElse 810ms\n        requirements:\n          - go install gotest.tools/gotestsum@latest\n      - title: Automatically re-run failed tests\n        description: Other useful option of `gotestsum` is to re-run failed tests. For example, if you have flaky tests that are idempotent, then re-running them may be a quick fix.\n        name: gotestsum\n        url: https://github.com/gotestyourself/gotestsum\n        author: https://github.com/dnephin\n        commands:\n          - gotestsum --rerun-fails --packages=\"./...\"\n        requirements:\n          - go install gotest.tools/gotestsum@latest\n      - title: Make `JSUnit` test report\n        description: JUnit is widely used format for test reporting.\n        name: gotestsum\n        url: https://github.com/gotestyourself/gotestsum\n        author: https://github.com/dnephin\n        commands:\n          - go test -json ./... | gotestsum --junitfile unit-tests.xml\n        requirements:\n          - go install gotest.tools/gotestsum@latest\n      - title: \"Make `JSUnit` test report\"\n        description: JUnit is widely used format for test reporting. Go benchmark output is also supported.\n        url: https://github.com/jstemmer/go-junit-report\n        name: go-junit-report\n        author: https://github.com/jstemmer\n        commands:\n          - go test -v 2>&1 ./... | go-junit-report -set-exit-code > report.xml\n        requirements:\n          - go install github.com/jstemmer/go-junit-report/v2@latest\n      - title: Get packages without tests\n        description: If code coverage does not report packages without tests. For example for CI or quality control.\n        requirements:\n          - https://stedolan.github.io/jq/download/\n        commands:\n          - go list -json ./... | jq -rc 'select((.TestGoFiles | length)==0) | .ImportPath'\n        example_output: |\n          github.com/gin-gonic/gin/ginS\n          github.com/gin-gonic/gin/internal/json\n      - title: Perform Mutation Testing\n        description: Mutation testing is a technique used to assess the quality and coverage of test suites. It involves introducing controlled changes to the code base, simulating common programming mistakes. These changes are, then, put to test against the test suites. A failing test suite is a good sign. It indicates that the tests are identifying mutations in the code—it \"killed the mutant\". If all tests pass, we have a surviving mutant. This highlights an area with weak coverage. It is an opportunity for improvement.\n        url: https://github.com/gtramontina/ooze\n        name: ooze\n        author: https://github.com/gtramontina\n        requirements:\n          - go get github.com/gtramontina/ooze\n        commands:\n          - go test -v -tags=mutation\n        example_image_url: https://github.com/gtramontina/ooze/blob/main/.assets/report.png\n      - title: \"Perform Mutation Testing\"\n        description: This is fork of [zimmski/go-mutesting](https://github.com/zimmski/go-mutesting). It has more mutators and latest updates.\n        name: \"avito-tech/go-mutesting\"\n        url: https://github.com/avito-tech/go-mutesting\n        author: https://github.com/vasiliyyudin\n        requirements:\n          - go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest\n        commands:\n          - go-mutesting ./...\n        example_content_ext: go\n        example_content: |\n          for _, d := range opts.Mutator.DisableMutators {\n            pattern := strings.HasSuffix(d, \"*\")\n\n          -\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || (!pattern && name == d) {\n          +\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || false {\n              continue MUTATOR\n            }\n          }\n      - title: \"Perform Mutation Testing\"\n        description: Find common bugs source code that would pass tests. This is earliest tool for mutation testing in Go. More functions and permutations were added in other mutation Go tools it inspired.\n        name: go-mutesting\n        url: https://github.com/zimmski/go-mutesting\n        author: https://github.com/zimmski\n        requirements:\n          - go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest\n        commands:\n          - go-mutesting ./...\n        example_content_ext: go\n        example_content: |\n          for _, d := range opts.Mutator.DisableMutators {\n            pattern := strings.HasSuffix(d, \"*\")\n\n          -\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || (!pattern && name == d) {\n          +\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || false {\n              continue MUTATOR\n            }\n          }\n      - title: \"Trace tests\"\n        description: Collect test execution as distributed traces. This is useful for tracking test duration, failures, flakiness. You distributed tracing storage, search, UI, exploration, dashboards, alarms — all will automatically become test status collection. If you run integration tests in your CI, then it is particularly handy to investigate your integration tests same way as real requests, such as Go processes, databases, etc. However, if you do not have distributed traces, it is still useful for adhoc investigations. This tool processes STDOUT of `go test`. No automatic instrumentation is done.\n        name: go-test-trace\n        url: https://github.com/rakyll/go-test-trace\n        author: https://github.com/rakyll\n        example_image_url: https://i.imgur.com/E18PYk4.png\n        commands:\n          - go-test-trace ./...\n        requirements:\n          - \"# open telemetry collector\"\n          - \"# traces UI (Datadog, Jaeger, Honeycomb, NewRelic)\"\n          - go install github.com/rakyll/go-test-trace@latest\n      - title: Speedup tests for large codebases\n        description: As of 2023-12-11, large codebases may be slow to run tests by default commands. Compiling package test binaries first and executing them later can lead to significant overall speedup.\n        commands:\n          - go test -c ./pkg/mypackage -o my_pkg_test_binary.bin\n          - \"./my_pkg_test_binary.bin | ... # normal test output post processing\"\n  - title: Dependencies\n    entries:\n      - title: Get Go version of current module\n        description: For example, setup correct Go version automatically from `go.mod` in CI.\n        requirements:\n          - https://stedolan.github.io/jq/download/\n        commands:\n          - go mod edit -json | jq -r .Go\n        example-output: 1.16\n      - title: Get Go versions of upstream modules\n        description: Use this when upgrading version of Go or finding old modules.\n        requirements:\n          - https://stedolan.github.io/jq/download/\n        commands:\n          - go list -deps -json ./... | jq -rc 'select(.Standard!=true and .Module.GoVersion!=null) | [.Module.GoVersion,.Module.Path] | join(\" \")' | sort -V | uniq\n        example_output: |\n          1.11 github.com/ugorji/go/codec\n          1.11 golang.org/x/crypto\n          1.12 github.com/golang/protobuf\n      - title: Get directly dependent modules that can be upgraded\n        description: Keep your modules updated. Similar function is integrated in VSCode official Go plugin and GoLand.\n        commands:\n          - go list -u -m $(go list -m -f '{{.Indirect}} {{.}}' all | grep '^false' | cut -d ' ' -f2) | grep '\\['\n        example_output: |\n          github.com/goccy/go-json v0.5.1 [v0.7.3]\n          github.com/golang/protobuf v1.3.3 [v1.5.2]\n          github.com/json-iterator/go v1.1.9 [v1.1.11]\n      - title: Get upstream modules without Go version\n        description: Find outdated modules or imports that you need to upgrade.\n        commands:\n          - go list -deps -json ./... | jq -rc 'select(.Standard!=true and .Module.GoVersion==null) | .Module.Path' | sort -u\n        requirements:\n          - https://stedolan.github.io/jq/download/\n        example_output: |\n          github.com/facebookgo/clock\n          golang.org/x/text\n          gopkg.in/yaml.v2\n      - title: Get available module versions\n        description: This works even if you did not download or install module locally. This is useful to check to which version you can upgrade to, what is the latest version, and whether there are v2+ major versions recognized by Go toolchain.\n        commands:\n          - go list -m -versions github.com/google/gofuzz\n        example-output: github.com/google/gofuzz v1.0.0 v1.1.0 v1.2.0\n      - title: \":fire: Get go module libyear, number of releases, version delta\"\n        description: \"[libyear](https://libyear.com) is a simple measure of software dependency freshness. It is a single number telling you how up-to-date your dependencies are. For example Rails 5.0.0 (June 2016) is 1 libyear behind 5.1.2 (June 2017). This tool can also compute number of releases, and version number delta.\"\n        name: go-libyear\n        url: https://github.com/nieomylnieja/go-libyear\n        author: https://github.com/nieomylnieja\n        commands:\n          - go-libyear /path/to/go.mod\n        example_output: |\n          package                             version  date        latest   latest_date  libyear\n          github.com/nieomylnieja/go-libyear           2023-11-06                        2.41\n          github.com/pkg/errors               v0.8.1   2019-01-03  v0.9.1   2020-01-14   1.03\n          github.com/urfave/cli/v2            v2.20.0  2022-10-14  v2.25.7  2023-06-14   0.67\n          golang.org/x/mod                    v0.12.0  2023-06-21  v0.14.0  2023-10-25   0.35\n          golang.org/x/sync                   v0.3.0   2023-06-01  v0.5.0   2023-10-11   0.36\n        requirements:\n          - go install github.com/nieomylnieja/go-libyear/cmd/go-libyear@latest\n      - title: Make graph of upstream modules\n        description: For each module, the node representing the greatest version (i.e., the version chosen by Go's minimal version selection algorithm) is colored green. Other nodes, which aren't in the final build list, are colored grey.\n        name: modgraphviz\n        url: https://golang.org/x/exp/cmd/modgraphviz\n        author: official Go team\n        commands:\n          - go mod graph | modgraphviz | dot -Tsvg -o mod-graph.svg\n        example_image_url: ./img/modgraphviz-go-featureprocessing.svg\n        requirements:\n          - https://graphviz.org/download/\n          - go install golang.org/x/exp/cmd/modgraphviz@latest\n      - title: \"Make graph of upstream packages\"\n        description: Find unexpected dependencies or visualize project. Works best for small number of packages, for large projects use `grep` to narrow down subgraph. Without `-deps` only for current module.\n        commands:\n          - \"go list -deps -json ./... | jq -c 'select(.Standard!=true) | {from: .ImportPath, to: .Imports[]}' | jsonl-graph | dot -Tsvg > package-graph.svg\"\n        example_image_url: ./img/packages-graph.svg\n        name: import-graph\n        url: https://github.com/nikolaydubina/import-graph\n        author: https://github.com/nikolaydubina\n        requirements:\n          - https://stedolan.github.io/jq/download/\n          - https://graphviz.org/download/\n          - go install github.com/nikolaydubina/import-graph@latest\n          - go install github.com/nikolaydubina/jsonl-graph@latest\n      - title: \"Scrape details about upstream modules and make graph\"\n        description: Find low quality or unmaintained dependencies.\n        commands:\n          - go mod graph | import-graph -i=gomod | jsonl-graph -color-scheme=file://$PWD/basic.json | dot -Tsvg > output.svg\n        example_image_url: ./img/gin-mod-graph-collected.svg\n        name: import-graph\n        url: https://github.com/nikolaydubina/import-graph\n        author: https://github.com/nikolaydubina\n        requirements:\n          - https://graphviz.org/download/\n          - go install github.com/nikolaydubina/import-graph@latest\n          - go install github.com/nikolaydubina/jsonl-graph@latest\n      - title: Scrape licenses of upstream dependencies\n        description: Collect all the licenses for checking if you can use the project, for example in proprietary or commercial environment.\n        name: go-licenses\n        url: https://github.com/google/go-licenses\n        author: Google\n        example_output: |\n          github.com/cli/safeexec,https://github.com/cli/safeexec/blob/master/LICENSE,BSD-2-Clause\n          github.com/bep/tmc,https://github.com/bep/tmc/blob/master/LICENSE,MIT\n          github.com/aws/aws-sdk-go,https://github.com/aws/aws-sdk-go/blob/master/LICENSE.txt,Apache-2.0\n          github.com/jmespath/go-jmespath,https://github.com/jmespath/go-jmespath/blob/master/LICENSE,Apache-2.0\n          github.com/gorilla/websocket,https://github.com/gorilla/websocket/blob/master/LICENSE,BSD-2-Clause\n          github.com/pelletier/go-toml/v2,https://github.com/pelletier/go-toml/blob/master/v2/LICENSE,MIT\n          github.com/spf13/cobra,https://github.com/spf13/cobra/blob/master/LICENSE.txt,Apache-2.0\n          github.com/kyokomi/emoji/v2,https://github.com/kyokomi/emoji/blob/master/v2/LICENSE,MIT\n          go.opencensus.io,Unknown,Apache-2.0\n          github.com/Azure/azure-storage-blob-go/azblob,https://github.com/Azure/azure-storage-blob-go/blob/master/azblob/LICENSE,MIT\n          github.com/yuin/goldmark-highlighting,https://github.com/yuin/goldmark-highlighting/blob/master/LICENSE,MIT\n        commands:\n          - go-licenses csv github.com/gohugoio/hugo\n        requirements:\n          - go install github.com/google/go-licenses@latest\n      - title: Explore dependencies\n        description: This tool has extensive syntax for filtering dependencies graphs. It can work with packages and modules.\n        name: goda\n        url: https://github.com/loov/goda\n        author: \"[Egon Elbre](egonelbre@gmail.com)\"\n        commands:\n          - goda graph . | dot -Tsvg -o graph.svg\n          - goda graph -cluster -short \"github.com/nikolaydubina/go-cover-treemap:all\" | dot -Tsvg -o graph.svg\n        requirements:\n          - https://graphviz.org/download/\n          - go install github.com/loov/goda@latest\n        example_image_url: https://github.com/loov/goda/raw/master/graph.svg\n      - title: Explore dependencies interactively\n        description: Useful in large refactorings, dependency breaking, physical layout changes.\n        name: spaghetti\n        url: https://github.com/adonovan/spaghetti\n        author: \"[Alan Donovan](https://github.com/adonovan), official Go team\"\n        example_image_url: https://github.com/adonovan/spaghetti/blob/main/screenshot.png\n        requirements:\n          - go install github.com/adonovan/spaghetti@latest\n      - title: \":fire: Explore dependencies graph interactively\"\n        description: Transform your Go project's dependency graph into a dynamic, interactive visualization with modview. This powerful tool takes the complexity out of your module graph, offering a clear and explorable view of your project's dependencies.\n        name: modview\n        url: https://github.com/bayraktugrul/modview\n        author: https://github.com/bayraktugrul\n        example_image_url: https://github.com/bayraktugrul/modview/raw/main/modview-opt.gif\n        commands:\n          - modview --open\n        requirements:\n          - go install github.com/bayraktugrul/modview@latest\n      - title: \":fire: Enforce Go code architecture\"\n        description: \"Architecture linter. Will check all project import path and compare with arch rules defined in yml file. Useful for hexagonal / onion / ddd / mvc / etc patterns.\"\n        name: go-arch-lint\n        url: https://github.com/fe3dback/go-arch-lint\n        author: https://github.com/fe3dback\n        example_image_url: https://github.com/fe3dback/go-arch-lint/blob/master/docs/images/check-example.png\n        requirements:\n          - go install github.com/fe3dback/go-arch-lint@latest\n        commands:\n          - go-arch-lint\n      - title: \":fire: Check Clean Architecture\"\n        description: Clean architecture validator for go, like a The Dependency Rule and interaction between packages in your Go projects.\n        author: https://github.com/roblaszczak\n        url: https://github.com/roblaszczak/go-cleanarch\n        name: go-cleanarch\n        commands:\n          - go-cleanarch\n        requirements:\n          - go install github.com/roblaszczak/go-cleanarch@latest\n      - title: Use `go mod` directives\n        description: Tell Go compiler which versions of upstreams to include in your build. Tell all users of your module how to deal with versions of your module.\n        example_content: |\n          // Deprecated: use example.com/mod/v2 instead.\n          module example.com/mod\n\n          go 1.16\n\n          require example.com/other/thing v1.0.2\n          require example.com/new/thing/v2 v2.3.4\n          exclude example.com/old/thing v1.2.3\n          replace example.com/bad/thing v1.4.5 => example.com/good/thing v1.4.5\n          retract [v1.9.0, v1.9.5]\n      - title: \":fire: Locally patch dependency\"\n        name: \"`replace`\"\n        description: \"This can be useful for development. First appeared on [blog](https://eli.thegreenplace.net/2024/locally-patching-dependencies-in-go).\"\n        commands:\n          - \"# clone your dependency to $DEP folder\"\n          - \"# make changes\"\n          - go mod edit -replace github.com/google/go-cmp=$DEP\n      - title: \":fire: Locally patch dependency\"\n        name: \"`go.work`\"\n        description: \"This is an alternative version may be more robust to accidental mistakes. First appeared on [blog](https://eli.thegreenplace.net/2024/locally-patching-dependencies-in-go).\"\n        commands:\n          - \"# clone your dependency to $DEP folder\"\n          - \"# make changes\"\n          - go work init\n          - go work use . $DEP\n  - title: Code Visualization\n    entries:\n      - title: Make C4 diagram\n        description: This library provides tools to generate [C4](https://c4model.com) diagrams. The process is a bit involved, however you get diagram generated from real Go code automatically. Steps are outlined in [blog](https://threedots.tech/post/auto-generated-c4-architecture-diagrams-in-go/).\n        url: https://github.com/krzysztofreczek/go-structurizr\n        author: https://github.com/krzysztofreczek\n        name: go-structurizr\n        example_image_url: https://threedots.tech/post/auto-generated-c4-architecture-diagrams-in-go/tdl-go_structurizr_1_2.png\n        requirements:\n          - manually defining Go main.go script to invoke library\n          - graphviz\n          - manual coloring spec (DB, classes)\n      - title: Make graph of function calls\n        description: Visualize complex or new project quickly or to study project. Requires `main.go` in module. Supports Graphviz output format. Has many options for filtering and formatting.\n        name: callgraph\n        url: https://golang.org/x/tools/cmd/callgraph\n        author: official Go team\n        example_image_url: img/callgraph.svg\n        commands:\n          - callgraph -format graphviz . | dot -Tsvg -o graph.svg\n          - \"recommend: grep <package/class/func of interest>\"\n          - \"recommend: grep -v Error since many packages report error\"\n          - \"recommend: adding `rankdir=LR;` to graphviz file for denser graph\"\n          - \"recommend: you would have to manually fix graphviz file first and last line\"\n        requirements:\n          - go install golang.org/x/tools/cmd/callgraph@latest\n      - title: Make graph of function calls in package\n        description: Quickly track which packages current package is calling and why.\n        name: go-callvis\n        url: https://github.com/ofabry/go-callvis\n        author: https://github.com/ofabry\n        commands:\n          - go-callvis .\n        example_image_url: https://raw.githubusercontent.com/ofabry/go-callvis/master/images/syncthing.png\n        requirements:\n          - go install github.com/ofabry/go-callvis\n      - title: Make PlantUML diagram\n        description: Generates class diagram in widely used format with the information on structs, interfaces and their relationships. Render `.puml` files in for example [planttext.com](https://www.planttext.com).\n        name: goplantuml\n        url: https://github.com/jfeliu007/goplantuml\n        author: https://github.com/jfeliu007\n        commands:\n          - goplantuml -recursive path/to/gofiles path/to/gofiles2\n        requirements:\n          - go get github.com/jfeliu007/goplantuml/parser\n          - go install github.com/jfeliu007/goplantuml/cmd/goplantuml@latest\n        example_image_url: https://raw.githubusercontent.com/jfeliu007/goplantuml/master/example/example.png\n      - title: Make PlantUML diagram\n        description: Automatically generate visualization of classes and interfaces for go packages. Recommend recursive option. Render `.puml` files in for example [planttext.com](https://www.planttext.com).\n        name: go-plantuml\n        url: https://github.com/bykof/go-plantuml\n        author: https://github.com/bykof\n        commands:\n          - go-plantuml generate -d . -r -o graph.puml\n        example_image_url: https://raw.githubusercontent.com/bykof/go-plantuml/master/docs/assets/graph.svg\n        requirements:\n          - go install github.com/bykof/go-plantuml@latest\n      - title: \":fire: Visualize the entropy of a code base with a 3D force-directed graph\"\n        description: This excellent interactive visualisation tool lets you explore code base as 3D graph. The more decoupled and modular a code base is, the more spread and clustered the graph will look like.\n        name: dep-tree\n        url: https://github.com/gabotechs/dep-tree\n        author: https://github.com/gabotechs\n        example_image_url: https://github.com/gabotechs/dep-tree/blob/main/docs/demo.gif\n      - title: Make 3D chart of Go codebase\n        description: Fresh artistic perspective on Go codebase. `GoCity` is an implementation of the Code City metaphor for visualizing source code - folders are districts; files are buildings; structs are buildings on the top of their files. This project has research paper \"[GoCity Code City for Go](https://homepages.dcc.ufmg.br/~mtov/pub/2019-saner-gocity.pdf)\" at SANER'19. Also available at [go-city.github.io](https://go-city.github.io).\n        example_image_url: img/gocity.png\n        name: gocity\n        url: https://github.com/rodrigo-brito/gocity\n        author: https://github.com/rodrigo-brito\n        requirements:\n          - go install github.com/rodrigo-brito/gocity@latest\n      - title: Make histogram of Go files per package\n        description: Find when package is too big or too small. Adjust histogram length to maximum value.\n        requirements:\n          - https://stedolan.github.io/jq/download/\n        commands:\n          - go list -json ./... | jq -rc '[.ImportPath, (.GoFiles | length | tostring)] | join(\" \")' | perl -lane 'print (\" \" x (20 - $F[1]), \"=\" x $F[1], \" \", $F[1], \"\\t\", $F[0])'\n        example_output: |\n          ================== 18\tgithub.com/gin-gonic/gin\n               ============= 13\tgithub.com/gin-gonic/gin/binding\n                           = 1\tgithub.com/gin-gonic/gin/internal/bytesconv\n                           = 1\tgithub.com/gin-gonic/gin/internal/json\n                 =========== 11\tgithub.com/gin-gonic/gin/render\n      - title: Explore Go code in browser powered by `go-guru`\n        description: \"Explore Go source code in browser. It provides exported symbols summary for navigation. It answers questions like: definition; callers; implementers. It is browser frontend based on [go-guru](https://docs.google.com/document/d/1_Y9xCEMj5S-7rv2ooHpZNH15JgRT5iM742gJkw5LtmQ/edit), which was developed by Go core team from Google.\"\n        url: https://github.com/fzipp/pythia\n        name: pythia\n        author: https://github.com/fzipp\n        example_image_url: https://camo.githubusercontent.com/a7baec2bada145869272edf97d1123d1717ed68922c159b027d261bd6e1faeff/68747470733a2f2f7261772e6769746875622e636f6d2f667a6970702f7079746869612f67682d70616765732f696d616765732f7079746869615f73637265656e73686f742e706e67\n        commands:\n          - pythia net/http\n        requirements:\n          - go install github.com/fzipp/pythia@latest\n          - go install golang.org/x/tools/cmd/guru@latest\n      - title: \"Interactively visualize packages\"\n        description: Based on `go-callvis`, this tool is an interactive package explorer of packages. This tool have not been updated for a long time.\n        url: https://github.com/ofabry/goexplorer\n        name: goexplorer\n        author: https://github.com/ofabry\n        example_image_url: https://github.com/ofabry/goexplorer/raw/master/images/screen.png\n      - title: Make D2 graph of architecture and dependencies\n        description: \"Can include vendors or not, and be of type 'flow' or 'di'.\"\n        name: go-arch-lint graph\n        url: https://github.com/fe3dback/go-arch-lint\n        author: https://github.com/fe3dback\n        example_image_url: https://github.com/fe3dback/go-arch-lint/blob/master/docs/images/graph-example.png\n        requirements:\n          - go install github.com/fe3dback/go-arch-lint@latest\n        commands:\n          - go-arch-lint graph\n  - title: Code Generation\n    entries:\n      - title: Run `go:generate` in parallel\n        description: Official Go team [encourages](https://github.com/golang/go/issues/20520) to run sequentially. However, in certain situations, such as lots of mocks, parallelization helps a lot, albeit, you should consider including your generated files in git. The solution below spawns multiple processes, each per pkg.\n        commands:\n          - grep -rnw \"go:generate\" -E -l \"${1:-*.go}\" . | xargs -L1 dirname | sort -u | xargs -P 8 -I{} go generate {}\n      - title: Generate `String` method for enum types\n        description: This is an official tool for generating `String` for enums. It supports overrides via comments.\n        author: official Go team\n        example_content_ext: go\n        example_content: |\n          package painkiller\n\n          //go:generate stringer -type=Pill -linecomment\n\n          type Pill int\n\n          const (\n            Placebo Pill = iota\n            Ibuprofen\n            Paracetamol\n            PillAspirin   // Aspirin\n            Acetaminophen = Paracetamol\n          )\n\n          // \"Acetaminophen\"\n          var s string = Acetaminophen.String()\n        requirements:\n          - go install golang.org/x/tools/cmd/stringer@latest\n      - title: \":fire: Generate enums encoding\"\n        name: go-enum-encoding\n        description: Generate encoding code for enums. This follows json struct tag notation.\n        author: https://github.com/nikolaydubina\n        url: https://github.com/nikolaydubina/go-enum-encoding\n        commands:\n          - go generate ./...\n        example_content_ext: go\n        example_content: |\n          type Color struct{ c uint }\n\n          //go:generate go-enum-encoding -type=Color\n          var (\n            Undefined = Color{}  // json:\"-\"\n            Red       = Color{1} // json:\"red\"\n            Green     = Color{2} // json:\"green\"\n            Blue      = Color{3} // json:\"blue\"\n          )\n        requirements:\n          - go install github.com/nikolaydubina/go-enum-encoding@latest\n      - title: \":fire: Generate enums\"\n        name: goenums\n        description: Generate strict and fast enums. Generated code is much more tightly typed than just iota defined enums. You will get JSON decoder and encoder as well. This tool allows to generate extra fields and default values in enum structs.\n        author: https://github.com/zarldev\n        url: https://github.com/zarldev/goenums\n        commands:\n          - goenums <file-with-iota.go>\n        example_content_ext: go\n        requirements:\n          - go install github.com/zarldev/goenums@latest\n        example_content: |\n          package milkyway\n\n          type planet int // Gravity[float64],RadiusKm[float64],MassKg[float64],OrbitKm[float64],OrbitDays[float64],SurfacePressureBars[float64],Moons[int],Rings[bool]\n\n          //go:generate goenums planets.go\n          const (\n            unknown planet = iota // invalid\n            mercury               // Mercury 0.378,2439.7,3.3e23,57910000,88,0.0000000001,0,false\n            venus                 // Venus 0.907,6051.8,4.87e24,108200000,225,92,0,false\n            earth                 // Earth 1,6378.1,5.97e24,149600000,365,1,1,false\n            mars                  // Mars 0.377,3389.5,6.42e23,227900000,687,0.01,2,false\n            jupiter               // Jupiter 2.36,69911,1.90e27,778600000,4333,20,4,true\n            saturn                // Saturn 0.916,58232,5.68e26,1433500000,10759,1,7,true\n            uranus                // Uranus 0.889,25362,8.68e25,2872500000,30687,1.3,13,true\n            neptune               // Neptune 1.12,24622,1.02e26,4495100000,60190,1.5,2,true\n          )\n      - title: \"Generate data types from JSON Schema\"\n        url: https://github.com/omissis/go-jsonschema\n        author: https://github.com/omissis\n        name: go-jsonschema\n        requirements:\n          - go get github.com/atombender/go-jsonschema/...\n          - go install github.com/atombender/go-jsonschema@latest\n        description: JSON Schema is widely used standard for definition of structured data types. This tool will generate Go struct, decoder and validation based on JSON Schema spec.\n        commands:\n          - go-jsonschema -p main myschema.jsonschema\n        example_output: |\n          {\n                \"$id\": \"https://example.com/arrays.schema.json\",\n                \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n                \"description\": \"A representation of a person, company, organization, or place\",\n                \"type\": \"object\",\n                \"properties\": {\n                      \"fruits\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                  \"type\": \"string\"\n                            }\n                      },\n                      \"vegetables\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                  \"$ref\": \"#/$defs/veggie\"\n                            }\n                      }\n                },\n                \"$defs\": {\n                      \"veggie\": {\n                            \"type\": \"object\",\n                            \"required\": [\n                                  \"veggieName\",\n                                  \"veggieLike\"\n                            ],\n                            \"properties\": {\n                                  \"veggieName\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"The name of the vegetable.\"\n                                  },\n                                  \"veggieLike\": {\n                                        \"type\": \"boolean\",\n                                        \"description\": \"Do I like this vegetable?\"\n                                  }\n                            }\n                      }\n                }\n          }\n        example_content_ext: go\n        example_content: |\n          // Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.\n\n          package main\n\n          import \"encoding/json\"\n          import \"fmt\"\n\n          type Veggie struct {\n                  // Do I like this vegetable?\n                  VeggieLike bool `json:\"veggieLike\" yaml:\"veggieLike\" mapstructure:\"veggieLike\"`\n\n                  // The name of the vegetable.\n                  VeggieName string `json:\"veggieName\" yaml:\"veggieName\" mapstructure:\"veggieName\"`\n          }\n\n          // UnmarshalJSON implements json.Unmarshaler.\n          func (j *Veggie) UnmarshalJSON(b []byte) error {\n                  var raw map[string]interface{}\n                  if err := json.Unmarshal(b, &raw); err != nil {\n                          return err\n                  }\n                  if v, ok := raw[\"veggieLike\"]; !ok || v == nil {\n                          return fmt.Errorf(\"field veggieLike in Veggie: required\")\n                  }\n                  if v, ok := raw[\"veggieName\"]; !ok || v == nil {\n                          return fmt.Errorf(\"field veggieName in Veggie: required\")\n                  }\n                  type Plain Veggie\n                  var plain Plain\n                  if err := json.Unmarshal(b, &plain); err != nil {\n                          return err\n                  }\n                  *j = Veggie(plain)\n                  return nil\n          }\n\n          // A representation of a person, company, organization, or place\n          type A2Schema struct {\n                  // Fruits corresponds to the JSON schema field \"fruits\".\n                  Fruits []string `json:\"fruits,omitempty\" yaml:\"fruits,omitempty\" mapstructure:\"fruits,omitempty\"`\n\n                  // Vegetables corresponds to the JSON schema field \"vegetables\".\n                  Vegetables []Veggie `json:\"vegetables,omitempty\" yaml:\"vegetables,omitempty\" mapstructure:\"vegetables,omitempty\"`\n          }\n      - title: \"Generate constructor for a struct\"\n        description: Constructor is a widely used useful pattern. This tool generates basic version of it that passes arguments to struct. It also supports initializer method.\n        url: https://github.com/moznion/gonstructor\n        name: gonstructor\n        author: https://github.com/moznion\n        example_content_ext: go\n        example_content: |\n          //go:generate gonstructor --type=Structure --constructorTypes=allArgs\n          type Structure struct {\n            foo string\n            bar io.Reader\n            Buz chan interface{}\n          }\n        example-output: |\n          func NewStructure(foo string, bar io.Reader, buz chan interface{}) *Structure {\n            return &Structure{foo: foo, bar: bar, Buz: buz}\n          }\n        requirements:\n          - go install golang.org/x/tools/cmd/goimports@latest\n          - go install github.com/moznion/gonstructor/cmd/gonstructor@latest\n      - title: Generate Table Driven Tests\n        description: This tool generates basic test placeholder. It is included into official Go plugin in VSCode and other major code editors.\n        name: gotests\n        url: https://github.com/cweill/gotests\n        author: https://github.com/cweill\n        example_image_url: https://github.com/cweill/GoTests-Sublime/raw/master/gotests.gif\n      - title: Generate mocks\n        description: This mocking framework integrates well with Go `testing` package.\n        author: Go Core team\n        name: mockgen\n        url: https://github.com/golang/mock\n        commands:\n          - mockgen . Conn,Driver\n        example_content_ext: go\n        example_content: |\n          # foo.go\n          type Foo interface {\n            Bar(x int) int\n          }\n\n          func SUT(f Foo) {\n          // ...\n          }\n          # foo_test.go\n          func TestFoo(t *testing.T) {\n            ctrl := gomock.NewController(t)\n            defer ctrl.Finish()\n\n            m := NewMockFoo(ctrl)\n\n            // Does not make any assertions. Executes the anonymous functions and returns\n            // its result when Bar is invoked with 99.\n            m.\n              EXPECT().\n              Bar(gomock.Eq(99)).\n              DoAndReturn(func(_ int) int {\n                time.Sleep(1*time.Second)\n                return 101\n              }).\n              AnyTimes()\n\n            // Does not make any assertions. Returns 103 when Bar is invoked with 101.\n            m.\n              EXPECT().\n              Bar(gomock.Eq(101)).\n              Return(103).\n              AnyTimes()\n\n            SUT(m)\n          }\n        requirements:\n          - go install github.com/golang/mock/mockgen@v1.6.0\n      - title: Generate interface for a struct\n        description: This is a development helper program that generates a Golang interface by inspecting the structure methods of an existing .go file. The primary use case is to generate interfaces for [gomock](https://github.com/golang/mock), so that [gomock](https://github.com/golang/mock) can generate mocks from those interfaces. This makes unit testing easier.\n        url: https://github.com/vburenin/ifacemaker\n        name: ifacemaker\n        author: https://github.com/vburenin\n        commands:\n          - 'ifacemaker -f human.go -s Human -i HumanIface -p humantest -y \"HumanIface makes human interaction easy\" -c \"DONT EDIT: Auto generated\"'\n        example_content_ext: go\n        example_content: |\n          # human.go\n          package main\n\n          import \"fmt\"\n\n          type Human struct {\n            name string\n            age  int\n          }\n\n          // Returns the name of our Human.\n          func (h *Human) GetName() string {\n            return h.name\n          }\n\n          // Our Human just had a birthday! Increase its age.\n          func (h *Human) Birthday() {\n            h.age += 1\n            fmt.Printf(\"I am now %d years old!\\n\", h.age)\n          }\n\n          // Make the Human say hello.\n          func (h *Human) SayHello() {\n            fmt.Printf(\"Hello, my name is %s, and I am %d years old.\\n\", h.name, h.age)\n          }\n\n          func main() {\n            human := &Human{name: \"Bob\", age: 30}\n            human.GetName()\n            human.SayHello()\n            human.Birthday()\n          }\n\n          # human_interface.go\n          // DONT EDIT: Auto generated\n          package humantest\n\n          // HumanIface makes human interaction easy\n          type HumanIface interface {\n            // Returns the name of our Human.\n            GetName() string\n            // Our Human just had a birthday! Increase its age.\n            Birthday()\n            // Make the Human say hello.\n            SayHello()\n          }\n        requirements:\n          - go install github.com/vburenin/ifacemaker@latest\n      - title: Generate interface for a struct\n        description: This tool generates interface for a struct. Can be invoked in `go:generate`.\n        url: https://github.com/rjeczalik/interfaces\n        name: interfacer\n        author: https://github.com/rjeczalik\n        commands:\n          - interfacer -for os.File -as mock.File\n        example_content_ext: go\n        example_content: |\n          // Created by interfacer; DO NOT EDIT\n\n          package mock\n\n          import (\n                  \"os\"\n          )\n\n          // File is an interface generated for \"os\".File.\n          type File interface {\n                  Chdir() error\n                  Chmod(os.FileMode) error\n                  Chown(int, int) error\n                  Close() error\n                  Fd() uintptr\n                  Name() string\n                  Read([]byte) (int, error)\n                  ReadAt([]byte, int64) (int, error)\n                  Readdir(int) ([]os.FileInfo, error)\n                  Readdirnames(int) ([]string, error)\n                  Seek(int64, int) (int64, error)\n                  Stat() (os.FileInfo, error)\n                  Sync() error\n                  Truncate(int64) error\n                  Write([]byte) (int, error)\n                  WriteAt([]byte, int64) (int, error)\n                  WriteString(string) (int, error)\n          }\n        requirements:\n          - go install github.com/rjeczalik/interfaces/cmd/interfacer@latest\n      - title: Generate interface for a struct\n        description: This is alternative tool for interface generation that is aimed to be faster and leaner. It generates only pointer method receiver methods for a struct.\n        url: https://github.com/reflog/struct2interface\n        author: https://github.com/reflog\n        name: struct2interface\n        commands:\n          - struct2interface -f . -i IDecimal -p fpdecimal -s Decimal -o idecimal.go\n        requirements:\n          - go install github.com/reflog/struct2interface@latest\n      - title: Generate interface for `CSV` file\n        description: This tool generates struct that can read and write `CSV` file of this struct. Order of fields is hardcoded.\n        url: https://github.com/rjeczalik/interfaces\n        name: structer\n        author: https://github.com/rjeczalik\n        commands:\n          - structer -f aws-billing.csv -tag json -as billing.Record\n        example_content_ext: go\n        example_content: |\n          # aws-billing.csv\n          # \"InvoiceID\",\"PayerAccountId\",\"LinkedAccountId\",\"RecordType\",\"RecordID\",\"BillingPeriodStartDate\",\"BillingPeriodEndDate\",\"InvoiceDate\"\n          # \"Estimated\",\"123456\",\"\",\"PayerLineItem\",\"5433212345\",\"2016/01/01 00:00:00\",\"2016/01/31 23:59:59\",\"2016/01/21 19:19:06\"          \n\n          # record.go\n          // Record is a struct generated from \"aws-billing.csv\" file.\n          type Record struct {\n                  InvoiceID              string    `json:\"invoiceID\"`\n                  PayerAccountID         int64     `json:\"payerAccountID\"`\n                  LinkedAccountID        string    `json:\"linkedAccountID\"`\n                  RecordType             string    `json:\"recordType\"`\n                  RecordID               int64     `json:\"recordID\"`\n                  BillingPeriodStartDate time.Time `json:\"billingPeriodStartDate\"`\n                  BillingPeriodEndDate   time.Time `json:\"billingPeriodEndDate\"`\n                  InvoiceDate            time.Time `json:\"invoiceDate\"`\n          }\n\n          // MarshalCSV encodes r as a single CSV record.\n          func (r *Record) MarshalCSV() ([]string, error) {\n              ...\n          }\n\n          // UnmarshalCSV decodes a single CSV record into r.\n          func (r *Record) UnmarshalCSV(record []string) error {\n              ...\n          }\n        requirements:\n          - go install github.com/rjeczalik/interfaces/cmd/structer@latest\n      - title: \":fire: Generate decorator for interface\"\n        description: GoWrap is a command line tool that generates decorators for Go interface types using simple templates. With GoWrap you can easily add metrics, tracing, fallbacks, pools, and many other features into your existing code in a few seconds.\n        url: https://github.com/hexdigest/gowrap\n        author: https://github.com/hexdigest\n        name: gowrap\n        commands:\n          - gowrap gen -p io -i Reader -t prometheus -o reader_with_metrics.go\n        requirements:\n          - go install github.com/hexdigest/gowrap/cmd/gowrap@latest\n        example_image_url: https://github.com/hexdigest/gowrap/blob/master/gowrap.gif\n      - title: Modify struct field tags\n        description: \"This tool makes it easy to update, add or delete the tags and options in a struct field. You can add new tags, update existing tags (such as appending a new key, i.e: db, xml, etc..) or remove existing tags. It's intended to be used by an editor, but also has modes to run it from the terminal.\"\n        name: gomodifytags\n        author: https://github.com/fatih\n        url: https://github.com/fatih/gomodifytags\n        example_image_url: https://user-images.githubusercontent.com/438920/32691304-a1c7e47c-c716-11e7-977c-f4d0f8c616be.gif\n        requirements:\n          - go install github.com/fatih/gomodifytags@latest\n      - title: \":fire: Generate code from OpenAPI 3 specification\"\n        description: \"Generate Go client and server boilerplate from OpenAPI 3 specifications.\"\n        name: oapi-codegen\n        author: https://github.com/deepmap\n        url: https://github.com/oapi-codegen/oapi-codegen\n        commands:\n          - oapi-codegen --config=config.yaml api.yaml\n        requirements:\n          - go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest\n      - title: \":fire: Generate C-Go Bindings\"\n        description: \"This project allows to reuse existing C/C++ libraries in your Go applications, by automatically creating c-go bindings for a given set of C headers and the manifest file. We believe in component-based software engineering and think that reusing C/C++ code in Go applications could bring a huge boost to developer's productivity and system's performance. Read more about the motivation: top reasons to use bindings.\"\n        name: c-for-go\n        author: https://github.com/xlab\n        url: https://github.com/xlab/c-for-go?tab=readme-ov-file\n        example_image_url: https://github.com/xlab/c-for-go/raw/master/docs/overview.png\n  - title: Generics\n    entries:\n      - title: \":fire: Enum via generics\"\n        name: enum\n        description: Type safe enums for Go without code generation or reflection.\n        url: https://github.com/orsinium-labs/enum\n        author: https://github.com/orsinium\n        example_content_ext: go\n        example_content: |\n          type Color enum.Member[string]\n\n          var (\n            Red    = Color{\"red\"}\n            Green  = Color{\"green\"}\n            Blue   = Color{\"blue\"}\n            Colors = enum.New(Red, Green, Blue)\n          )\n  - title: Refactor\n    entries:\n      - title: Replace symbol\n        description: I found this in announcement [notice](https://github.com/golang/go/commit/2580d0e08d5e9f979b943758d3c49877fb2324cb) of Go 1.18 for changes to `interface{}` to `any`. This can be useful for other refactorings too.\n        name: gofmt\n        commands:\n          - gofmt -w -r 'interface{} -> any' .\n      - title: \"Apply refactoring patches\"\n        description: With this tool it is very easy to perform refactorings. It is also possible to organize and maintain your refactoring procedures through patches.\n        url: https://github.com/uber-go/gopatch\n        author: Uber\n        name: gopatch\n        example_content_ext: go\n        example_content: |\n          @@\n          @@\n          -import \"errors\"\n\n          -errors.New(fmt.Sprintf(...))\n          +fmt.Errorf(...)\n        example_output: |\n          return errors.New(fmt.Sprintf(\"invalid port: %v\", err))\n          // becomes\n          return fmt.Errorf(\"invalid port: %v\", err)\n      - title: Keep consistent ordering of imports\n        description: This is official tool for for grouping and sorting imports. However, it has only basic grouping functionality.\n        url: https://pkg.go.dev/golang.org/x/tools/cmd/goimports\n        name: goimports\n        author: Go Core team\n        commands:\n          - goimports -w -local .\n        requirements:\n          - go install golang.org/x/tools/cmd/goimports@latest\n      - title: Keep consistent ordering of imports\n        description: \"This tool splits all import blocks into different sections, now support five section types: standard (e.g. 'fmt'); custom; default; blank; dot. It will keep each section sorted and keep ordering of sections consistent.\"\n        name: gci\n        author: https://github.com/daixiang0\n        url: https://github.com/daixiang0/gci\n        commands:\n          - gci write -s standard -s default -s \"prefix(github.com/daixiang0/gci)\" main.go\n        example_content_ext: go\n        example_content: |\n          // before\n          package main\n          import (\n            \"golang.org/x/tools\"\n            \n            \"fmt\"\n            \n            \"github.com/daixiang0/gci\"\n          )\n\n          // after\n          package main\n          import (\n              \"fmt\"\n\n              \"golang.org/x/tools\"\n\n              \"github.com/daixiang0/gci\"\n          )\n        requirements:\n          - go install github.com/daixiang0/gci@latest\n      - title: Keep consistent ordering of imports\n        description: This tool groups and sorts imports within groups. It keeps consistent ordering of groups. Detection of groups may be not always accurate.\n        name: goimportx\n        author: https://github.com/anqiansong\n        url: https://github.com/anqiansong/goimportx/tree/main\n        commands:\n          - goimportx --file /path/to/file.go --group \"system,local,third\"\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import (\n            \"flag\"\n            \"io\"\n            \"log\"\n            \"os\"\n\n            \"github.com/nikolaydubina/mdpage/page\"\n            \"github.com/nikolaydubina/mdpage/render\"\n            yaml \"gopkg.in/yaml.v3\"\n          )\n        requirements:\n          - go install github.com/anqiansong/goimportx@latest\n  - title: Errors\n    entries:\n      - title: \"Errors with return traces\"\n        description: Return trace is the path that error took to return to user. This can be more illustrative than typical stack trace that produced the error. This tool have convenience automatic instrumentation CLI to update your code.\n        url: https://github.com/bracesdev/errtrace\n        name: errtrace\n        author: https://github.com/bracesdev\n        commands:\n          - git ls-files -- '*.go' | xargs errtrace -w\n        requirements:\n          - use package \"braces.dev/errtrace\"\n          - instrument code by wrapping errors through all functions with this library\n      - title: Errors with stack traces and source fragments\n        description: This library collects stack traces and pretty prints code fragments. Stack traces induce performance penalty.\n        url: https://github.com/ztrue/tracerr\n        name: tracerr\n        author: https://github.com/ztrue\n        example_image_url: https://github.com/ztrue/tracerr/raw/master/output.png\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import (\n            \"io/ioutil\"\n\n            \"github.com/ztrue/tracerr\"\n          )\n\n          func main() {\n            if err := read(); err != nil {\n              tracerr.PrintSourceColor(err)\n            }\n          }\n\n          func read() error {\n            return readNonExistent()\n          }\n\n          func readNonExistent() error {\n            _, err := ioutil.ReadFile(\"/tmp/non_existent_file\")\n            // Add stack trace to existing error, no matter if it's nil.\n            return tracerr.Wrap(err)\n          }\n      - title: Pretty print `panic` messages\n        description: Read `panic` messages easier. Need to redirect STDERR to this tool with `panic` stack traces. The tool has HTML output and does lots of deduplication and enhancements. Refer to examples in original repo.\n        name: panicparse\n        url: https://github.com/maruel/panicparse\n        author: https://github.com/maruel\n        commands:\n          - go test -v |& pp\n        example_image_url: https://raw.githubusercontent.com/wiki/maruel/panicparse/parse.gif\n        requirements:\n          - go install github.com/maruel/panicparse/v2/cmd/pp@latest\n  - title: Build\n    entries:\n      - title: \":fire: Fetch private dependencies in CI\"\n        description: If you are building in CI (e.g. GitHub Actions), you need to download private repositories. Common way to accomplish this is with job like below.\n        example_content_ext: yaml\n        example_content: |\n          name: go private modules\n          env:\n            USER: ${{ secrets.USER }}\n            TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}\n          run: git config --global url.\"https://${USER}:${TOKEN}@github.com\".insteadOf \"https://github.com\"\n      - title: Show compiler optimization decisions on heap and inlining\n        description: Building with `-m` flag will show decisions of compiler on inlining and heap escape. This can help you to validate your understanding of your code and optimize it.\n        commands:\n          - go build -gcflags=\"-m -m\" . 2>&1 | grep inline\n        example_output: |\n          ...\n          ./passengerfp.go:25:6: cannot inline (*PassengerFeatureTransformer).Fit: function too complex: cost 496 exceeds budget 80\n          ...\n          ./passengerfp.go:192:6: can inline (*PassengerFeatureTransformer).NumFeatures with cost 35 as: method(*PassengerFeatureTransformer) func() int { if e == nil { return 0 }; count := 6; count += (*transformers.OneHotEncoder).NumFeatures(e.Sex); count += (*transformers.OneHotEncoder).NumFeatures(e.Embarked); return count }\n          ...\n          ./passengerfp.go:238:43: inlining call to transformers.(*OneHotEncoder).FeatureNames\n          ./passengerfp.go:238:43: inlining call to transformers.(*OneHotEncoder).NumFeatures\n          ...\n          ./passengerfp.go:151:7: parameter e leaks to {heap} with derefs=0:\n          ./passengerfp.go:43:11: make(map[string]uint) escapes to heap\n      - title: Disable inlining\n        description: Usually you may not need it, but can reduce binary size and even improve performance.\n        commands:\n          - go build -gcflags=\"-l\" .\n      - title: Aggressive inlining\n        description: Usually you may not need it, but can improve performance. This includes mid-stack inlining.\n        commands:\n          - go build -gcflags=\"-l -l -l -l\" .\n      - title: Profile-guided optimization\n        description: Starting go 1.20 compiler supports Profile-guided optimization. You need to collect profiles and then supply in computation to compiler. You can get improvement in performance by around 4%. Official [guideline](https://go.dev/doc/pgo).\n        commands:\n          - 1. store a `pprof` CPU profile with filename default.pgo in the main package directory of the profiled binary\n          - 2. build with `go build -pgo=auto``, which will pick up `default.pgo` files automatically.\n      - title: Manually disable or enable `cgo`\n        description: Disable `cgo` with `CGO_ENABLED=0` and enable with `CGO_ENABLED=1`. If you don't, `cgo` may end-up being enabled or code dynamically linked if, for example, you use some `net` or `os` packages. You may want to disable `cgo` to improve performance, since compiler and runtime would have easier job optimizing code. This also should reduce your image size, as you can have alpine image with less shared libraries.\n      - title: Include metadata in binary during compilation with `ldflags`\n        description: You can pass metadata through compiler to your binary. This is useful for including things like git commit, database schema version, integrity hashes. Variables can only be strings.\n        commands:\n          - go build -v -ldflags=\"-X 'main.Version=v1.0.0'\"\n          - go build -v -ldflags=\"-X 'my/pkg/here.Variable=some-string'\"\n        example_content_ext: go\n        example_content: |\n          package main\n\n          var Version string\n\n          func main() {\n            // Version here has some value\n            ...\n          }\n      - title: \":fire: Check if symbol or package is included in binary\"\n        description: This is useful for investigations during performance optimization, security, or compiler work. First spotted in [blog](https://rednafi.com/go/omit_dev_dependencies_in_binaries/).\n        commands:\n          - \"go tool nm main | grep -Ei '<symbol A>|<symbol B>|...'\"\n          - \"go tool nm main | grep -Ei 'golangci-lint|gofumpt'\"\n      - title: \":fire: Build for Raspberry Pi, Virtual Machine, embedded or normal PC\"\n        description: \"Turn your Go program(s) into an appliance running on the Raspberry Pi 3, Pi 4, Pi 5, Pi Zero 2 W, or amd64 PCs! [gokrazy.org](https://gokrazy.org/). The surface area for security vulnerabilities is drastically reduced. gokrazy uses its own minimal Go userland instead of a traditional Linux distribution base. The root filesystem is entirely read-only (making persistent malware installation hard) and new versions of the system are installed by overwriting the root file system with the new version. No default shell access: There is neither xz nor OpenSSH on a gokrazy system. Interactive access for debugging is possible, but needs to be explicitly started.\"\n        name: gokrazy\n        url: https://github.com/gokrazy/gokrazy\n        author: https://github.com/stapelberg\n        requirements:\n          - go install github.com/gokrazy/tools/cmd/gok@main\n        commands:\n          - \"follow instructions at: https://gokrazy.org/quickstart/\"\n      - title: \":fire: Visualise dependencies size in compiled binaries\"\n        description: \"A tool for analyzing the dependencies in compiled Golang binaries, providing insight into their impact on the final build. WebAssembly demo: [https://gsa.zxilly.dev](https://gsa.zxilly.dev).\"\n        name: go-size-analyzer\n        url: https://github.com/Zxilly/go-size-analyzer\n        author: https://github.com/Zxilly\n        example_image_url: https://github.com/Zxilly/go-size-analyzer/assets/31370133/e69583ce-b189-4a0d-b108-c3b7d5c33a82\n        requirements:\n          - go install github.com/Zxilly/go-size-analyzer/cmd/gsa@latest\n        commands:\n          - gsa --web target_binary\n      - title: Make treemap breakdown of Go executable binary\n        description: Useful for studying Go compiler, large projects, projects with C/C++ and `cgo`, 3rd party dependencies, embedding. However, total size may not be something to worry about for your executable.\n        name: go-binsize-treemap\n        url: https://github.com/nikolaydubina/go-binsize-treemap\n        author: https://github.com/nikolaydubina\n        commands:\n          - go tool nm -size <binary finename> | go-binsize-treemap > binsize.svg\n        example_image_url: https://github.com/nikolaydubina/go-binsize-treemap/blob/main/docs/hugo.svg\n        requirements:\n          - go install github.com/nikolaydubina/go-binsize-treemap@latest\n      - title: Custom import path\n        description: \"Go can automatically fetch from custom http/https servers using `<meta>` tag to discover how to fetch code. There are multiple tools that can help set this up. This can help for security and analytics. This is also known as vanity URLs. [documentation](https://pkg.go.dev/cmd/go#hdr-Remote_import_paths).\"\n        example_content: |\n          # some notable examples\n          golang.org/x/exp\n          go.uber.org/multierr\n          honnef.co/go/tools/cmd/staticcheck\n      - title: Custom import path\n        name: govanityurls\n        description: Simple HTTP server that lets you host custom import paths for your Go packages.\n        url: https://github.com/GoogleCloudPlatform/govanityurls\n        author: Google\n        commands:\n          - govanityurls\n        requirements:\n          - go install github.com/GoogleCloudPlatform/govanityurls@latest\n      - title: Custom import path\n        name: sally\n        description: Simple HTTP server that lets you host custom import paths for your Go packages.\n        url: https://github.com/uber-go/sally\n        author: Uber\n        commands:\n          - sally\n        requirements:\n          - go install go.uber.org/sally@latest\n      - title: Custom import path\n        name: \"kkn.fi/vanity\"\n        description: Simple HTTP server that lets you host custom import paths for your Go packages.\n        url: https://kkn.fi/vanity\n        author: https://github.com/kare\n        commands:\n          - vanity\n        requirements:\n          - go get kkn.fi/vanity\n      - title: Custom import path enforcement\n        description: \"When import path is using custom domain, it is possible to block code from compilation unless it is used. This can help ensure security and prevent breaking changes. [documentation](https://pkg.go.dev/cmd/go#hdr-Import_path_checking).\"\n        example_content_ext: go\n        example_content: |\n          package pdf // import \"rsc.io/pdf\"\n      - title: \"Manage multiple Go versions\"\n        description: This tool makes it easier for managing multiple Go versions on same host. This works through intercepting Go commands and directing them to the right Go version bin and directory. Official Go [documentation](https://go.dev/doc/manage-install) on this topic.\n        url: https://github.com/Norwik/Goenv\n        author: https://github.com/clivern\n        name: Goenv\n        example_image_url: https://github.com/Norwik/Goenv/raw/main/static/screenshot-1.png\n      - title: \":fire: Transpile C to Go\"\n        description: CxGo is a tool for translating C source code to Go (aka transpiler, source-to-source compiler). It uses cc v3 for preprocessing and parsing C (no clang/gcc dependencies!) and a custom type-checker and AST translation layer to make the best output possible.\n        url: https://github.com/gotranspile/cxgo\n        author: https://github.com/dennwc\n        name: cxgo\n        requirements:\n          - go install github.com/gotranspile/cxgo/cmd/cxgo@latest\n        commands:\n          - cxgo file main.c\n      - title: \":fire: Transpile Go to Javascript\"\n        description: GopherJS compiles Go code (go.dev) to pure JavaScript code. Its main purpose is to give you the opportunity to write front-end code in Go which will still run in all browsers.\n        url: https://github.com/gopherjs/gopherjs\n        author: https://github.com/neelance\n        name: gopherjs\n        requirements:\n          - go install github.com/gopherjs/gopherjs@v1.19.0-beta1\n        commands:\n          - gopherjs build <package>\n      - title: \":fire: Run compile-time function evaluation\"\n        name: prep\n        description: By using prep.Comptime, you can evaluate functions at compile time, replacing them with their computed results.\n        url: https://github.com/pijng/prep\n        author: https://github.com/pijng\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import (\n            \"fmt\"\n            \"github.com/pijng/prep\"\n          )\n\n          func main() {\n            // This will be evaluated at compile-time\n            result := prep.Comptime(fibonacci(300))\n\n            fmt.Println(\"Result:\", result)\n          }\n\n          func fibonacci(n int) int {\n            fmt.Printf(\"calculating fibonacci for %d\\n\", n)\n\n            if n <= 1 {\n              return n\n            }\n            a, b := 0, 1\n            for i := 2; i <= n; i++ {\n              a, b = b, a+b\n            }\n            return b\n          }\n        requirements:\n          - go install github.com/pijng/prep/cmd/prep@latest\n        commands:\n          - go build -a -toolexec=\"prep\" main.go\n  - title: Assembly\n    entries:\n      - title: Get assembly of Go code snippets online\n        description: Use [godbolt.org](https://godbolt.org) to compile and see assembly of short Go code. You can check different platforms and compilers including `cgo`. This tool is commonly used by C++ community.\n        example_image_url: ./img/godbolt.png\n        author: https://github.com/mattgodbolt\n      - title: Get Go SSA intermediary representation\n        description: Check what does Go compiler do. Might be useful if you trying to optimize some code or learn more about compiler. https://golang.design/gossa.\n        name: ssaplayground\n        url: https://github.com/golang-design/ssaplayground\n        example_image_url: https://github.com/golang-design/ssaplayground/blob/main/public/assets/screen.png\n        author: https://github.com/changkun\n      - title: View Go assembly interactively\n        description: Understand how Go is compiled better.\n        name: lensm\n        url: https://github.com/loov/lensm\n        author: https://github.com/egonelbre\n        example_image_url: https://github.com/loov/lensm/raw/main/screenshot.gif\n        requirements:\n          - go install loov.dev/lensm@main\n      - title: \"View Go assembly with color annotation\"\n        url: https://github.com/maruel/pat\n        author: https://github.com/maruel\n        name: pat/disfunc\n        requirements:\n          - go install github.com/maruel/pat/cmd/...@latest\n        description: This tool shows assembly of functions and what lines mean by color.\n        example_image_url: https://github.com/maruel/pat/wiki/disfunc.png\n        commands:\n          - disfunc -f 'nin\\.CanonicalizePath$' -pkg ./cmd/nin | less -R\n      - title: Generate Go assembly in Go\n        description: Write better quality Go assembly quicker in Go language itself. This tool conveniently generates stub for Go code to call your generated assembly. Used by Go core.\n        name: avo\n        url: https://github.com/mmcloughlin/avo\n        author: https://github.com/mmcloughlin\n        example_content_ext: go\n        example_content: |\n          //go:build ignore\n          // +build ignore\n\n          package main\n\n          import . \"github.com/mmcloughlin/avo/build\"\n\n          func main() {\n            TEXT(\"Add\", NOSPLIT, \"func(x, y uint64) uint64\")\n            Doc(\"Add adds x and y.\")\n            x := Load(Param(\"x\"), GP64())\n            y := Load(Param(\"y\"), GP64())\n            ADDQ(x, y)\n            Store(y, ReturnIndex(0))\n            RET()\n            Generate()\n          }\n      - title: Generate AST for code snippets\n        description: Access Go core AST mechanism to generate AST.\n        name: go/ast\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import (\n            \"go/ast\"\n            \"go/parser\"\n            \"go/token\"\n          )\n\n          func main() {\n            fs := token.NewFileSet()\n            tr, _ := parser.ParseExpr(\"(3-1) * 5\")\n            ast.Print(fs, tr)\n          }\n        example_output: |\n          0  *ast.BinaryExpr {\n          1  .  X: *ast.ParenExpr {\n          2  .  .  Lparen: -\n          3  .  .  X: *ast.BinaryExpr {\n          4  .  .  .  X: *ast.BasicLit {\n          5  .  .  .  .  ValuePos: -\n          6  .  .  .  .  Kind: INT\n          7  .  .  .  .  Value: \"3\"\n          8  .  .  .  }\n          9  .  .  .  OpPos: -\n          10  .  .  .  Op: -\n          11  .  .  .  Y: *ast.BasicLit {\n          12  .  .  .  .  ValuePos: -\n          13  .  .  .  .  Kind: INT\n          14  .  .  .  .  Value: \"1\"\n          15  .  .  .  }\n          16  .  .  }\n          17  .  .  Rparen: -\n          18  .  }\n          19  .  OpPos: -\n          20  .  Op: *\n          21  .  Y: *ast.BasicLit {\n          22  .  .  ValuePos: -\n          23  .  .  Kind: INT\n          24  .  .  Value: \"5\"\n          25  .  }\n          26  }\n      - title: Generate AST for code snippets\n        description: This is a wrapper around `go/ast` machinery that makes generating `AST` easier.\n        url: https://github.com/reflog/go2ast\n        author: https://github.com/reflog\n        name: go2ast\n        commands:\n          - echo \"a := 1\" | go2ast\n        example_output: |\n          []ast.Stmt {\n            &ast.AssignStmt {\n              Lhs: []ast.Expr {\n                &ast.Ident {\n                  Name: \"a\",\n                },\n              },\n              Tok: :=,\n              Rhs: []ast.Expr {\n                &ast.BasicLit {\n                  ValuePos: 32,\n                  Kind: INT,\n                  Value: \"1\",\n                },\n              },\n            },\n          }\n        requirements:\n          - go install github.com/reflog/go2ast@latest\n      - title: Visualize Go SSA function using Graphviz\n        description: \"This tool provides a visual overview of Go SSA function using Graphviz. This is especially useful in SSA-based static analysis. This tool generates an HTML page that is easy to navigate. [demo](https://silverrainz.me/go-ssaviz/).\"\n        name: go-ssaviz\n        author: https://github.com/SilverRainZ\n        url: https://github.com/SilverRainZ/go-ssaviz\n        commands:\n          - go-ssaviz ./...\n        example_image_url: ./img/go-ssaviz.png\n        requirements:\n          - \"# get graphviz\"\n          - go install github.com/SilverRainZ/go-ssaviz@latest\n      - title: \"Make graph of AST\"\n        description: This tool visualizes AST as graph, which may be useful to navigate and understand Go AST. This tool has not been maintained for a while.\n        name: astgraph\n        author: https://github.com/xiazemin\n        url: https://github.com/xiazemin/ast_graph\n        example_image_url: https://github.com/xiazemin/ast_graph/raw/master/tree.svg\n        requirements:\n          - graphviz\n      - title: \"Convert C assembly to Go assembly\"\n        url: https://github.com/minio/c2goasm\n        author: https://github.com/fwessels\n        name: c2goasm\n        description: This tool can convert C assembly `.s` into Go assbmely `.s` files. This is useful for reusing compiler optimizations such as SIMD or loop unrolling in C, which can lead to 10x speedups. However, project has been archived 4+ years ago.\n        requirements:\n          - go install github.com/minio/c2goasm@latest\n        commands:\n          - gcc -O3 -march=native -S -o c_code.s c_code.c\n          - c2goasm -a c_code.s go_c_code.s\n          - go build -o go_c_code.o -gcflags=\"-S\" go_c_code.s\n  - title: Execution\n    entries:\n      - title: \":fire: Embed Go Playground to your blog\"\n        description: \"Codapi is a platform for embedding interactive code snippets directly into your product documentation, online course or blog post. [example](https://antonz.org/go-1-22/).\"\n        name: codapi\n        url: https://github.com/nalgeon/codapi\n        author: https://github.com/nalgeon\n        example_image_url: img/codapi.png\n        example_content: |\n          '''go\n          package main\n\n          import \"fmt\"\n\n          func main() {\n              fmt.Println(\"Hello, World!\")\n          }\n          '''\n\n          <codapi-snippet sandbox=\"go\" editor=\"basic\">\n          </codapi-snippet>\n        requirements:\n          - deploy sandbox\n          - embed javascript in your blog\n          - markdown go code blocks will turn into runnable snippets\n      - title: Embed Go Playground to your blog\n        description: \"Embed interactive Go Playground component into your blog. [Hugo](https://gohugo.io), [Docusaurus](https://docusaurus.io), [Ghost](https://ghost.org) are supported. There is also another tool [soksan](https://github.com/bbalet/soksan), however it is discontinued. Live [demo](https://ggicci.me/goplay-embed-go-playground-on-your-website/) with guideline. Other resources — GitLab considering to add it in [issue](https://gitlab.com/gitlab-org/gitlab/-/issues/212769); alternative implementation [guideline](https://hrishikeshpathak.com/blog/golang-code-playground/).\"\n        name: goplay\n        url: https://github.com/ggicci/goplay\n        author: https://github.com/ggicci\n        example_content: |\n          ## Sample Code\n\n          {{% goplay %}}\n          '''go\n          package main\n\n          func main() {\n            println(\"hello world\")\n          }\n          '''\n          {{% /goplay %}}\n        requirements:\n          - reverse proxy server to https://play.golang.org\n          - bloging platform with support for embedding javascript\n      - title: Run alternative Go Playground\n        description: Improved Go Playground featuring dark theme, code autocomplete, vim mode, WebAssembly. Available at [https://goplay.tools/](https://goplay.tools/).\n        name: goplay.tools\n        url: https://github.com/x1unix/go-playground\n        author: https://github.com/x1unix\n        example_image_url: https://github.com/x1unix/go-playground/raw/master/docs/img/demo.gif\n      - title: \":fire: Use TinyGo Playground\"\n        description: TinyGo is an alternative Go compiler that focuses on embedded devices, and WASM. There are some Go constructs and packages that not supported. In this online playground you can verify your code.\n        name: tinygo\n        url: https://play.tinygo.org\n        example_image_url: img/tinygo-playground.png\n      - title: Run interactive Go kernels in Jupyter Notebook\n        description: Run interactive Go interpreter in Jupyter Notebook browser. As of `2023-06-04`, it is using `gomacro` interpreter and can have issues with loading 3rd party packages.\n        url: https://github.com/gopherdata/gophernotes\n        name: gophernotes\n        author: https://github.com/gopherdata\n        example_image_url: https://github.com/gopherdata/gophernotes/raw/master/files/jupyter.gif\n        requirements:\n          - \"# jupyter notebook\"\n          - go install github.com/gopherdata/gophernotes@v0.7.5\n          - \"# more instructions on how to install Jupyter Notebook Go kernel in original repo\"\n      - title: Run interactive Go interpreter\n        description: This interpreter works with 3rd party packages located in `$GOPATH/src`. It can also be triggered within Go programmatically via `Eval()`. Works everywhere Go works.\n        url: https://github.com/traefik/yaegi\n        name: yaegi\n        author: https://github.com/traefik\n        commands:\n          - yaegi\n        example_output: |\n          $ yaegi\n          > import \"github.com/nikolaydubina/fpdecimal\"\n          : 0x140000faaf0\n          > a, _ := fpdecimal.FromString(\"10.12\") \n          : {0}\n          > b, _ := fpdecimal.FromString(\"5.38\")\n          : {0}\n          > c := a.Add(b)   \n          : {15500}\n          > c.String()\n          : 15.500\n          >\n        requirements:\n          - go install github.com/traefik/yaegi@latest\n      - title: Run interactive Go interpreter\n        description: \"This is interactive Go interpreter and debugger with REPL, Eval, generics and Lisp-like macros. You can run functions, import 3rd patry packages. Can be useful for learning and experimentation. Some nice features: autocomplete; constant expressions arithmetics. As of `2023-06-02`, issues with importing 3rd paty package are possible.\"\n        url: https://github.com/cosmos72/gomacro\n        name: gomacro\n        author: https://github.com/cosmos72\n        commands:\n          - gomacro\n        example_output: |\n          $ gomacro\n          gomacro> import \"fmt\"\n          gomacro> fmt.Println(\"hello, world!\")\n          hello, world!\n          14      // int\n          <nil>   // error\n          gomacro>\n        requirements:\n          - go install github.com/cosmos72/gomacro@latest\n      - title: Run Go function in shell\n        description: Run Go one-liners. This tool will print to STDOUT the return of a function call.\n        name: gorram\n        url: https://github.com/natefinch/gorram\n        author: https://github.com/natefinch\n        requirements:\n          - go install github.com/natefinch/gorram@latest\n        commands:\n          - cat README.md | gorram crypto/sha1 Sum\n          - echo 12345 | gorram encoding/base64 StdEncoding.EncodeToString\n          - gorram net/http Get https://google.com\n      - title: Run Go function in shell\n        description: Run Go functions in shell. You can also pass parameters directly from shell.\n        name: gosh\n        url: https://github.com/nickwells/utilities/blob/master/gosh/_gosh.DOC.md\n        author: https://github.com/nickwells\n        requirements:\n          - go install github.com/nickwells/utilities/gosh@latest\n        commands:\n          - gosh -pln '\"Hello, World!\"'\n          - gosh -pln 'math.Pi'\n          - gosh -n -b 'count := 0' -e 'count++' -a-pln 'count'\n          - 'gosh -http-handler ''http.FileServer(http.Dir(\"/tmp/xxx\"))'''\n          - \"gosh -n -b-p '\\\"Radius: \\\"' -e 'r, err := strconv.ParseFloat(_l.Text(), 64)' -e-s iferr -pf '\\\"Area: %9.2f\\n\\\", r*r*math.Pi' -p '\\\"Radius:\\\"'\"\n      - title: Run simple fileserver\n        name: net/http\n        description: It takes one line to run HTTP file server in Go. Akin to famous oneliner in Python `python3 -m http.server` and `python -m SimpleHTTPServer`. Run this file as usually `go run <filename>`.\n        example_image_url: ./img/simple-fs.png\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import \"net/http\"\n\n          func main() { http.ListenAndServe(\":9000\", http.FileServer(http.Dir(\".\"))) }\n      - title: Create 3D visualization of concurrency traces\n        description: Fresh artistic perspective on coroutines execution. There is no advanced functions and it is hard to analyze production systems. However, it could be interesting for educational purposes.\n        name: gotrace\n        url: https://github.com/divan/gotrace\n        author: https://github.com/divan\n        example_image_url: https://github.com/divan/gotrace/blob/master/images/demo.png\n        requirements:\n          - go install github.com/divan/gotrace@latest\n          - patch Go compiler, available via Docker\n          - more instructions in original repo\n      - title: Wrap command\n        name: os/exec\n        description: Originally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/).\n        example_content_ext: go\n        example_content: |\n          cmd := exec.Command(\"ls\", \"/usr/local/bin\")\n          cmd.Stdout = os.Stdout\n          cmd.Stderr = os.Stderr\n          return cmd.Run()\n      - title: Capture output of command to file\n        description: Originally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/).\n        author: Aaron Son\n        name: os/exec\n        example_content_ext: go\n        example_content: |\n          log, err := os.Create(\"output.log\")\n          if err != nil {\n            return err\n          }\n          defer log.Close()\n          cmd := exec.Command(\"ls\", \"/usr/local/bin\")\n          cmd.Stdout = log\n          cmd.Stderr = log\n          return cmd.Run()\n      - title: Capture output of command and process it\n        description: Originally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/).\n        author: Aaron Son\n        name: os/exec\n        example_content_ext: go\n        example_content: |\n          cmd := exec.Command(\"ls\", \"/usr/local/bin\")\n          stdout, err := cmd.StdoutPipe()\n          if err != nil {\n            return err\n          }\n          scanner := bufio.NewScanner(stdout)\n          err = cmd.Start()\n          if err != nil {\n            return err\n          }\n          for scanner.Scan() {\n            // Do something with the line here.\n            ProcessLine(scanner.Text())\n          }\n          if scanner.Err() != nil {\n            cmd.Process.Kill()\n            cmd.Wait()\n            return scanner.Err()\n          }\n          return cmd.Wait()\n      - title: Piping between processes\n        description: \"`ls /usr/local/bin | grep pip`. Originally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/).\"\n        author: Aaron Son\n        name: os/exec\n        example_content_ext: go\n        example_content: |\n          r, w, err := os.Pipe()\n          if err != nil {\n            return err\n          }\n          defer r.Close()\n\n          ls := exec.Command(\"ls\", \"/usr/local/bin\")\n          ls.Stdout = w\n          err = ls.Start()\n          if err != nil {\n            return err\n          }\n          defer ls.Wait()\n          w.Close()\n\n          grep := exec.Command(\"grep\", \"pip\")\n          grep.Stdin = r\n          grep.Stdout = os.Stdout\n          return grep.Run()\n      - title: \"`errgroup` and CommandContext\"\n        description: Originally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/).\n        author: Aaron Son\n        name: os/exec\n        example_content_ext: go\n        example_content: |\n          eg, ctx := errgroup.WithContext(context.Background())\n          sleeps := make([]*exec.Cmd, 3)\n          sleeps[0] = exec.CommandContext(ctx, \"sleep\", \"100\")\n          sleeps[1] = exec.CommandContext(ctx, \"sleep\", \"100\")\n          sleeps[2] = exec.CommandContext(ctx, \"sleep\", \"notanumber\")\n          for _, s := range sleeps {\n            s := s\n            eg.Do(func() error {\n              return s.Run()\n            })\n          }\n          return eg.Wait()\n  - title: Monitor\n    entries:\n      - title: \":fire: Monitor Go Runtime metrics\"\n        description: These are standard metrics for Go runtime exposed in OpenTelemetry format. Grafana [dashboard](https://github.com/nikolaydubina/grafana-otel-go-runtime).\n        url: https://pkg.go.dev/go.opentelemetry.io/contrib/instrumentation/runtime\n        name: opentelemetry\n        author: \"Google, (dashboard by @nikolaydubina)\"\n        example_image_url: https://github.com/nikolaydubina/grafana-otel-go-runtime/raw/master/example.png\n        example_content_ext: go\n        example_content: |\n          import \"go.opentelemetry.io/contrib/instrumentation/runtime\"\n          ...\n          runtime.Start()\n        requirements:\n          - opentelemetry collector\n          - metrics backend (e.g. prometheus)\n          - dashboard (e.g. grafana)\n      - title: Monitor goroutines\n        description: Command line monitoring for goroutines.\n        url: https://github.com/bcicen/grmon\n        author: https://github.com/bcicen\n        name: grmon\n        example_image_url: https://bradley.codes/static/img/grmon.gif\n        commands:\n          - grmon\n        requirements:\n          - \"# start pprof server or grmon in your Go process\"\n          - go install github.com/bcicen/grmon@latest\n      - title: Monitor Go processes\n        description: Monitoring memory of Go processes, forcing GC, getting version of Go of processes.\n        name: gops\n        url: https://github.com/google/gops\n        author: Google\n        requirements:\n          - go install github.com/google/gops@latest\n        commands:\n          - gops\n        example_output: |\n          983   980    uplink-soecks  go1.9   /usr/local/bin/uplink-soecks\n          52697 52695  gops           go1.10  /Users/jbd/bin/gops\n          4132  4130   foops        * go1.9   /Users/jbd/bin/foops\n          51130 51128  gocode         go1.9.2 /Users/jbd/bin/gocode\n      - title: \":fire: Monitor Go runtime metrics in browser\"\n        name: live-pprof\n        description: This is minimal single binary tool that lets you monitor Go app performance. This can be an attractive alternative for local development to avoid operations overhead of full monitoring setup (e.g. Prometheus, Grafana).\n        url: https://github.com/moderato-app/live-pprof\n        author: https://github.com/clement2026\n        example_image_url: img/live-pprof.png\n        requirements:\n          - go install github.com/moderato-app/live-pprof@v1\n        commands:\n          - live-pprof 6060\n      - title: Monitor Go runtime metrics in browser\n        description: This tool exposes HTTP endpoint with charts for Go runtime such as heap, objects, goroutines, GC pauses, scheduler. This is useful drop-in solution for visualization of Go runtime.\n        url: https://github.com/arl/statsviz\n        author: https://github.com/arl\n        name: statsviz\n        example_image_url: https://raw.githubusercontent.com/arl/statsviz/readme-docs/window.png\n        requirements:\n          - go get github.com/arl/statsviz@latest\n      - title: Auto-Instrument all functions\n        description: Automatically instrument all functions with Open Telemetry Spans by code generation. Inserts errors into Spans.\n        name: go-instrument\n        url: https://github.com/nikolaydubina/go-instrument\n        author: https://github.com/nikolaydubina\n        example_image_url: https://github.com/nikolaydubina/go-instrument/raw/master/docs/fib-error.png?raw=true\n        commands:\n          - find . -name \"*.go\" | xargs -I{} go-instrument -app my-service -w -filename {}\n        requirements:\n          - go install github.com/nikolaydubina/go-instrument@latest\n      - title: Auto-Instrument all functions\n        description: Automatically instrument all functions with Open Telemetry Spans by code generation. Inserts errors into Spans. Supports custom templates and can be used for Open Tracing or any custom insertions.\n        name: otelinji\n        url: https://github.com/hedhyw/otelinji\n        author: https://github.com/hedhyw\n        example_image_url: https://github.com/hedhyw/otelinji/blob/main/assets/diff.png?raw=true\n        commands:\n          - otelinji -w -filename input_file.go\n          - otelinji -filename input_file.go > input_file.go\n          - find . -name \"*.go\" | grep -v \"vendor/\\|.git/\\|_test.go\" | xargs -n 1 -t otelinji -w -filename\n        requirements:\n          - go install github.com/hedhyw/otelinji/cmd/otelinji@latest\n      - title: \"Auto-Instrument functions for DataDog\"\n        description: This is official Datadog tool for automatic instrumentation of code. It has very convenient compiler directives for instrumentation.\n        author: https://github.com/DataDog\n        name: orchestrion\n        url: https://github.com/DataDog/orchestrion\n        requirements:\n          - go install github.com/datadog/orchestrion@latest\n        commands:\n          - orchestrion -w ./\n        example_content_ext: go\n        example_content: |\n          //dd:span my:tag\n          func GetSomeData(ctx context.Context) ([]byte, error) {\n            ...\n      - title: Continuous Profiling\n        name: Pyroscope\n        description: This tool allows to ingest profiling data from your application. You would need to add integration in your main file that will sample in-process data and send it to Pyroscope. Here are useful resources [blog-go-memory-leaks](https://grafana.com/blog/2023/04/19/how-to-troubleshoot-memory-leaks-in-go-with-grafana-pyroscope/).\n        url: https://github.com/grafana/pyroscope\n        author: Grafana Labs\n        example_image_url: https://user-images.githubusercontent.com/23323466/143324845-16ff72df-231e-412d-bd0a-38ef2e09cba8.gif\n  - title: Benchmark\n    entries:\n      - title: Run benchmarks\n        description: Start here. This is the standard tool for benchmarking. It can also do advanced features like mutex profiles. More flags are in Go [documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags) and `go help testflag`.\n        commands:\n          - go test -bench=. -benchmem -benchtime=10s ./...\n        example_output: |\n          goos: darwin\n          goarch: arm64\n          pkg: github.com/nikolaydubina/fpmoney\n          BenchmarkArithmetic/add_x1-10                     1000000000             0.5 ns/op           0 B/op           0 allocs/op\n          BenchmarkArithmetic/add_x100-10                     18430124            64.6 ns/op           0 B/op           0 allocs/op\n          BenchmarkJSONUnmarshal/small-10                      3531835           340.7 ns/op         198 B/op           3 allocs/op\n          BenchmarkJSONUnmarshal/large-10                      2791712           426.9 ns/op         216 B/op           3 allocs/op\n          BenchmarkJSONMarshal/small-10                        4379685           274.4 ns/op         144 B/op           4 allocs/op\n          BenchmarkJSONMarshal/large-10                        3321205           345.8 ns/op         192 B/op           5 allocs/op\n          PASS\n          ok      github.com/nikolaydubina/fpmoney    62.744s\n      - title: Table-driven benchmarks\n        description: Similar to tests, Go supports table-driven benchmarks, which is very helpful for fine gradation of meta-parameters. More details in the Go [blog](https://go.dev/blog/subtests).\n        example_content: |\n          func benchIteratorSelector(b *testing.B, n int) {\n            // ... setup here\n            b.ResetTimer()\n            for n := 0; n < b.N; n++ {\n              err := myExpensiveFunc()\n              if err != nil {\n                b.Error(err)\n              }\n            }\n          }\n\n          func BenchmarkIteratorSelector(b *testing.B) {\n            for _, q := range []int{100, 1000, 10000, 100000} {\n              b.Run(fmt.Sprintf(\"n=%d\", q), func(b *testing.B) {\n                benchIteratorSelector(b, q)\n              })\n            }\n          }\n        example_output: |\n          BenchmarkIteratorSelector/n=100-10    \t  297792\t      4265 ns/op\t    5400 B/op\t      13 allocs/op\n          BenchmarkIteratorSelector/n=1000-10   \t   31400\t     38182 ns/op\t    9752 B/op\t      16 allocs/op\n          BenchmarkIteratorSelector/n=10000-10  \t    3134\t    380777 ns/op\t   89112 B/op\t      24 allocs/op\n          BenchmarkIteratorSelector/n=100000-10 \t     310\t   3827292 ns/op\t  912410 B/op\t      32 allocs/op\n      - title: \":fire: Align benchmark output\"\n        description: Go aligns benchmarks names to longest seen so far. Create file with name that is lexicographically first and has noop benchmark like following.\n        example_content_ext: go\n        example_content: |\n          func BenchmarkNoop(b *testing.B) { b.Run(\"--------------------------------\", func(b *testing.B) {}) }\n        example_output: |\n          $ go test -bench .\n          goos: darwin\n          goarch: arm64\n          pkg: github.com/nikolaydubina/go-hackers-delight\n          BenchmarkNoop/---------------------------------16         \t1000000000\t         0.0000001 ns/op\n          BenchmarkAbs/basic-16                                     \t1000000000\t         0.9826 ns/op\n          BenchmarkAbs/Abs-16                                       \t1000000000\t         0.9647 ns/op\n          BenchmarkAbs/Abs2-16                                      \t1000000000\t         0.9943 ns/op\n          BenchmarkAbs/Abs3-16                                      \t1000000000\t         0.9819 ns/op\n          BenchmarkAbs/Abs4-16                                      \t1000000000\t         1.003 ns/op\n          BenchmarkAbs/AbsFastMul-16                                \t1000000000\t         0.9598 ns/op\n          BenchmarkAvg/basic-16                                     \t973716225\t         2.045 ns/op\n          BenchmarkAvg/AvgFloor-16                                  \t602586224\t         2.050 ns/op\n          BenchmarkAvg/AvgCeil-16                                   \t582029594\t         2.054 ns/op\n          BenchmarkCycleThree/basic-16                              \t767160418\t         1.560 ns/op\n          BenchmarkCycleThree/CycleThreeValues-16                   \t438818894\t         2.729 ns/op\n          BenchmarkLeadingZeros/uint32/basic-16                     \t1000000000\t         0.9419 ns/op\n      - title: Generate benchmak CPU and Memory profiles\n        description: This is useful for identifying most time or memory consuming parts. Recommended to run for single benchmark at a time and with `-count` or `-benchtime` for better accuracy.\n        name: go test\n        commands:\n          - go test -bench=<my-benchmark-name> -cpuprofile cpu.out -memprofile mem.out ./...\n      - title: Visualize callgraph of profiles\n        description: Once you generate profiles, visualize them with `pprof`. Both memory and CPU profiles are supported. Many options are available. Refer to the link you get in SVG to how to interpret this graph. More official documentation [blog](https://go.dev/blog/pprof), [pkg-doc](https://pkg.go.dev/net/http/pprof).\n        name: pprof\n        author: official Go team\n        commands:\n          - go tool pprof -svg cpu.out > cpu.svg\n          - go tool pprof -svg mem.out > mem.svg\n        example_image_url: img/pprof_callgraph_cpu.png\n      - title: Visualize flamegraphs of profiles\n        description: Latest versions of `pprof` can also render [Flamegraphs](https://www.brendangregg.com/flamegraphs.html) for profiles. Make sure you set `-http` to start webserver. Then it is available in \"View > Graph\" in at http://0.0.0.0:80.\n        name: pprof\n        author: Google\n        commands:\n          - pprof -http=0.0.0.0:80 cpu.out\n        example_image_url: img/pprof_flamegraph_cpu.png\n        requirements:\n          - go install github.com/google/pprof@latest\n      - title: Visualize profiles online\n        description: You can also visualize profiles with online tools are aloso available https://www.speedscope.app (cpu).\n        example_image_url: img/speedscope_cpu_profile.png\n      - title: Get delta between two benchmarks\n        description: This is standard way to compare two benchmark outputs. Names of benchmarks should be the same. Generate benchmarks as per usual. You would get multiple tables per dimension. If no output, then pass `-split=\"XYZ\"`. If you do not see `delta`, then pass `-count=2` or more in benchmark generation. It is recommended to have alternative implementations in different packages, to keep benchmark names the same.\n        name: benchstat\n        url: https://golang.org/x/perf/cmd/benchstat\n        author: official Go team\n        commands:\n          - benchstat -split=\"XYZ\" old.txt new.txt\n        example_output: |\n          name                    old time/op    new time/op    delta\n          JSONUnmarshal/small-10     502ns ± 0%     331ns ± 0%   -33.99%  (p=0.008 n=5+5)\n          JSONUnmarshal/large-10     572ns ± 0%     414ns ± 0%   -27.64%  (p=0.008 n=5+5)\n          JSONMarshal/small-10       189ns ± 0%     273ns ± 0%   +44.20%  (p=0.008 n=5+5)\n          JSONMarshal/large-10       176ns ± 0%     340ns ± 0%   +93.29%  (p=0.008 n=5+5)\n\n          name                    old alloc/op   new alloc/op   delta\n          JSONUnmarshal/small-10      271B ± 0%      198B ± 0%   -26.94%  (p=0.008 n=5+5)\n          JSONUnmarshal/large-10      312B ± 0%      216B ± 0%   -30.77%  (p=0.008 n=5+5)\n          JSONMarshal/small-10       66.0B ± 0%    144.0B ± 0%  +118.18%  (p=0.008 n=5+5)\n          JSONMarshal/large-10       72.0B ± 0%    192.0B ± 0%  +166.67%  (p=0.008 n=5+5)\n\n          name                    old allocs/op  new allocs/op  delta\n          JSONUnmarshal/small-10      6.00 ± 0%      3.00 ± 0%   -50.00%  (p=0.008 n=5+5)\n          JSONUnmarshal/large-10      7.00 ± 0%      3.00 ± 0%   -57.14%  (p=0.008 n=5+5)\n          JSONMarshal/small-10        2.00 ± 0%      4.00 ± 0%  +100.00%  (p=0.008 n=5+5)\n          JSONMarshal/large-10        2.00 ± 0%      5.00 ± 0%  +150.00%  (p=0.008 n=5+5)\n        requirements:\n          - go install golang.org/x/perf/cmd/benchstat@latest\n      - title: Get summary of benchmarks\n        description: Compare multiple benchmarks. Names of benchmarks should be the same. Generate benchmarks as per usual. You would get multiple tables per dimension. If no output, then pass `-split=\"XYZ\"`. It is recommended to have alternative implementations in different packages, to keep benchmark names the same.\n        name: benchstat\n        url: https://golang.org/x/perf/cmd/benchstat\n        author: official Go team\n        commands:\n          - benchstat -split=\"XYZ\" int.txt float32.txt fpmoney.txt\n        example_output: |\n          name \\ time/op          int.bench   float32.bench  fpmoney.bench\n          JSONUnmarshal/small-10  481ns ± 2%     502ns ± 0%     331ns ± 0%\n          JSONUnmarshal/large-10  530ns ± 1%     572ns ± 0%     414ns ± 0%\n          JSONMarshal/small-10    140ns ± 1%     189ns ± 0%     273ns ± 0%\n          JSONMarshal/large-10    145ns ± 0%     176ns ± 0%     340ns ± 0%\n\n          name \\ alloc/op         int.bench   float32.bench  fpmoney.bench\n          JSONUnmarshal/small-10   269B ± 0%      271B ± 0%      198B ± 0%\n          JSONUnmarshal/large-10   288B ± 0%      312B ± 0%      216B ± 0%\n          JSONMarshal/small-10    57.0B ± 0%     66.0B ± 0%    144.0B ± 0%\n          JSONMarshal/large-10    72.0B ± 0%     72.0B ± 0%    192.0B ± 0%\n\n          name \\ allocs/op        int.bench   float32.bench  fpmoney.bench\n          JSONUnmarshal/small-10   6.00 ± 0%      6.00 ± 0%      3.00 ± 0%\n          JSONUnmarshal/large-10   7.00 ± 0%      7.00 ± 0%      3.00 ± 0%\n          JSONMarshal/small-10     2.00 ± 0%      2.00 ± 0%      4.00 ± 0%\n          JSONMarshal/large-10     2.00 ± 0%      2.00 ± 0%      5.00 ± 0%\n        requirements:\n          - go install golang.org/x/perf/cmd/benchstat@latest\n      - title: \"Benchmark against git commit\"\n        url: https://github.com/maruel/pat\n        author: https://github.com/maruel\n        name: pat/ba\n        requirements:\n          - go install github.com/maruel/pat/cmd/...@latest\n        description: This tool runs benchmarks and shows delta between git commits. It can also be useful in GitHub Actions.\n        example_output: |\n          $ ba -against HEAD~1\n          warming up\n          go test -bench . -benchtime 100ms -count 1 -run ^$ -cpu 1 ./...\n          git checkout HEAD~1\n          go test -bench . -benchtime 100ms -count 1 -run ^$ -cpu 1 ./...\n          git checkout 02152d698f7d548c\n          02152d698f7d548c...HEAD~1 (1 commits), 100ms x 2 times/batch, batch repeated 3 times.\n          go test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\n          git checkout HEAD~1\n          go test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\n          git checkout 02152d698f7d548c\n          go test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\n          git checkout HEAD~1\n          go test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\n          git checkout 02152d698f7d548c\n          go test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\n          git checkout HEAD~1\n          go test -bench . -benchtime 100ms -count 2 -run ^$ -cpu 1 ./...\n          git checkout 02152d698f7d548c\n          name                  old time/op    new time/op    delta\n          HashCommand             69.0ns ± 2%    67.7ns ± 2%  -1.91%  (p=0.041 n=6+6)\n          CLParser                 281µs ± 1%     281µs ± 1%    ~     (p=0.699 n=6+6)\n          LoadManifest             437ms ± 7%     430ms ± 3%    ~     (p=0.937 n=6+6)\n          CanonicalizePathBits    85.9ns ± 1%    86.2ns ± 0%    ~     (p=1.000 n=6+6)\n          CanonicalizePath        83.9ns ± 1%    84.6ns ± 0%    ~     (p=0.058 n=6+6)\n\n          name                  old alloc/op   new alloc/op   delta\n          HashCommand              0.00B          0.00B         ~     (all equal)\n          CLParser                 164kB ± 0%     164kB ± 0%    ~     (all equal)\n          LoadManifest             298MB ± 0%     295MB ± 0%  -0.78%  (p=0.002 n=6+6)\n          CanonicalizePathBits     80.0B ± 0%     80.0B ± 0%    ~     (all equal)\n          CanonicalizePath         80.0B ± 0%     80.0B ± 0%    ~     (all equal)\n\n          name                  old allocs/op  new allocs/op  delta\n          HashCommand               0.00           0.00         ~     (all equal)\n          CLParser                 1.64k ± 0%     1.64k ± 0%    ~     (all equal)\n          LoadManifest             2.61M ± 0%     2.57M ± 0%  -1.71%  (p=0.002 n=6+6)\n          CanonicalizePathBits      1.00 ± 0%      1.00 ± 0%    ~     (all equal)\n          CanonicalizePath          1.00 ± 0%      1.00 ± 0%    ~     (all equal)\n      - title: Continuous benchmarking\n        description: Track how benchmarks change in codebase over time. This is accomplished by running benchmarks for git commits, storing results, and visualizing difference. Running benchmarks can be in GitHub Actions or locally, storage can be in same repository `master` or dedicated branch, or standalone servers. It should be straightforward to setup this manually. Example of GitHub Action [spec](https://github.com/swaggest/rest/blob/master/.github/workflows/bench.yml) and [blog](https://dev.to/vearutop/continuous-benchmarking-with-go-and-github-actions-41ok) from [@vearutop](https://github.com/vearutop), and an example on how it produces a PR [comment](https://github.com/swaggest/rest/pull/88#issuecomment-1271540878).\n        example_image_url: img/cont-bench-vearutop.png\n      - title: Continuous benchmarking\n        description: This tool uses `go test -bench` data in GitHub. It runs benchmarks, and uploads it as GitHub Pages for visualization. It is available as GitHub Action [gobenchdata](https://github.com/marketplace/actions/continuous-benchmarking-for-go). This is useful to see benchmark trends.\n        example_image_url: https://github.com/bobheadxi/gobenchdata/raw/main/.static/demo-chart.png\n        name: gobenchdata\n        url: https://github.com/bobheadxi/gobenchdata\n        author: https://github.com/bobheadxi\n        requirements:\n          - go install go.bobheadxi.dev/gobenchdata@latest\n      - title: Continuous benchmarking\n        description: Automates comparing benchmarks with `benchstat` of two git references. It is available as GitHub Action [benchdiff](https://github.com/marketplace/actions/benchdiff) which runs `benchstat` of HEAD vs base branch. This is useful to see how benchmarks change with PRs in CI.\n        name: benchdiff\n        url: https://github.com/willabides/benchdiff\n        author: https://github.com/WillAbides\n        example_image_url: img/cont-bench-willabides.png\n        requirements:\n          - go install github.com/willabides/benchdiff/cmd/benchdiff\n      - title: Continuous benchmarking\n        description: Automate comparing benchmarks with `benchstat` between `HEAD` and `HEAD^1`. It can be used to block CI pipelines if benchmarks deteriorate. It reports output as text in CLI. This cane be useful in CI or in local development.\n        name: cob\n        url: https://github.com/knqyf263/cob\n        example_image_url: https://github.com/knqyf263/cob/raw/master/img/usage.png\n        author: https://github.com/knqyf263\n        requirements:\n          - go install github.com/knqyf263/cob@latest\n      - title: Generate live traces\n        description: This will add endpoints to your your server. If you don't have server running already in your process, you can start one. Then you can point `pprof` tool to this data. For production, hide this endpoint in separate port and path. More details in documentation [trace](https://pkg.go.dev/cmd/trace), [net/http/pprof](https://pkg.go.dev/net/http/pprof).\n        name: net/http/trace\n        example_content: |\n          package main\n\n          import (\n            \"log\"\n            \"net/http\"\n            \"net/http/pprof\"\n          )\n\n          func main() {\n            mux := http.NewServeMux()\n            mux.HandleFunc(\"/custom_debug_path/profile\", pprof.Profile)\n            log.Fatal(http.ListenAndServe(\":7777\", mux))\n          }\n        example_output: |\n          go tool pprof http://localhost:6060/debug/pprof/heap\n          go tool pprof http://localhost:6060/debug/pprof/profile?seconds=30\n          curl -o trace.out http://localhost:6060/debug/pprof/trace?seconds=5\n      - title: Generate traces\n        description: Produce a trace of execution of tests in package.\n        name: \"go test\"\n        commands:\n          - go test -trace trace.out .\n      - title: View traces\n        description: You can view traces interactively in browser with standard Go tooling. This web tool also shows network blocking profile, synchronization blocking profile, syscall blocking profile, scheduler latency profile.\n        name: \"go tool trace\"\n        commands:\n          - go tool trace trace.out\n        example_image_url: img/go_tool_trace_web.png\n      - title: \":fire: View traces\"\n        description: Gotraceui is a tool for visualizing and analyzing Go execution traces. It is meant to be a faster, more accessible, and more powerful alternative to go tool trace. Unlike go tool trace, Gotraceui doesn't use deprecated browser APIs (or a browser at all), and its UI is tuned specifically to the unique characteristics of Go traces. This tool also recommend by official Go team from Google in their [blog](https://go.dev/blog/execution-traces-2024).\n        name: gotraceui\n        url: https://github.com/dominikh/gotraceui\n        author: https://github.com/dominikh\n        example_image_url: https://gotraceui.dev/img/screenshot.webp\n        commands:\n          - go tool trace trace.out\n        requirements:\n          - refer to guideline for requirements for GUI\n          - go install honnef.co/go/gotraceui/cmd/gotraceui@latest\n      - title: View in-process traces\n        description: This experimental approach illustrates collection of traces, intsrumentation, and visualization. It does not handle distributed traces. Likely useful for special cases or educational or research purposes.\n        url: https://github.com/peterbourgon/trc\n        name: trc\n        author: https://github.com/peterbourgon\n        example_image_url: https://github.com/peterbourgon/trc/raw/main/ui.png\n        requirements:\n          - instrument your code with `trc` package\n          - start UI server at port within same process\n      - title: View wallclock traces\n        description: This tool can be more illustrative of Go traces than standard Go traces.\n        name: fgtrace\n        url: https://github.com/felixge/fgtrace\n        author: https://github.com/felixge\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import (\n            \"net/http\"\n\n            \"github.com/felixge/fgtrace\"\n          )\n\n          func main() {\n            http.DefaultServeMux.Handle(\"/debug/fgtrace\", fgtrace.Config{})\n            http.ListenAndServe(\":1234\", nil)\n          }\n        example_image_url: https://github.com/felixge/fgtrace/raw/main/assets/fgtrace-example.png\n      - title: Get on/off CPU profiles\n        description: This tool can be more illustrative of Go profiles than standard Go profiling.\n        author: https://github.com/felixge\n        name: fgprof\n        url: https://github.com/felixge/fgprof\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import (\n            \"log\"\n            \"net/http\"\n            _ \"net/http/pprof\"\n\n            \"github.com/felixge/fgprof\"\n          )\n\n          func main() {\n            http.DefaultServeMux.Handle(\"/debug/fgprof\", fgprof.Handler())\n            go func() {\n              log.Println(http.ListenAndServe(\":6060\", nil))\n            }()\n\n            // <code to profile>\n          }\n        example_image_url: https://github.com/felixge/fgprof/raw/master/assets/fgprof_pprof.png\n  - title: Document\n    entries:\n      - title: Make alternative documentation\n        description: It has additional information like implementations of interface; promoted methods. The tool has nice minimalistic aesthetics.\n        name: golds\n        url: https://github.com/go101/golds\n        author: \"[Tapir Liu](https://www.tapirgames.com)\"\n        commands:\n          - golds ./...\n        example_image_url: img/golds.png\n        requirements:\n          - go install go101.org/golds@latest\n      - title: Read Go binary documentation in `man` format\n        description: This tool fetches the repo's readme as a man page replacement.\n        name: goman\n        url: https://github.com/appliedgocode/goman\n        example_image_url: https://github.com/appliedgocode/goman/raw/master/goman.gif\n        commands:\n          - goman <mypackage>\n        author: https://github.com/christophberger\n        requirements:\n          - go install github.com/appliedgocode/goman@latest\n      - title: Generate badge\n        description: This tool will generate instructions for [shields.io](https://shields.io) to generate badge. It can read `coverprofile`. There is also GitHub Action that utilizes it and stores badge in the same repo, [coverage-badge-go](https://github.com/tj-actions/coverage-badge-go).\n        url: https://github.com/AlexBeauchemin/gobadge\n        name: gobadge\n        author: https://github.com/AlexBeauchemin\n        example_image_url: https://camo.githubusercontent.com/641e107dce1dc01655110b327ff8c95121ad34dd9e5c8a33b4c03aff109a6038/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f7665726167652d37362e352532352d627269676874677265656e\n        commands:\n          - gobadge -filename=coverage.out\n          - gobadge -label=\"Go Coverage\" -value=55.6% -color=blue -target=OTHER_README.md\n          - gobadge -yellow=60 -green=80\n          - gobadge -color=ff69b4\n          - gobadge -link=https://github.com/project/repo/actions/workflows/test.yml\n        requirements:\n          - go install github.com/AlexBeauchemin/gobadge@latest\n      - title: \":fire: Generate README.md based on GoDoc comments\"\n        description: It can be used as a command line tool, as Github action, or as a pre-commit hook.\n        url: https://github.com/posener/goreadme\n        name: goreadme\n        author: https://github.com/posener\n        commands:\n          - goreadme\n          - goreadme -variables -functions -methods -badge-godoc\n          - goreadme -badge-godoc -constants -functions -methods -recursive -types -variables > README.md\n        requirements:\n          - go install github.com/posener/goreadme/cmd/goreadme@latest\n  - title: Education\n    entries:\n      - title: Run Turtle Graphics online\n        description: This absolutely adorable visualization is an excellent online resource to learn programming.\n        url: https://goplay.space/#wT_eZWJT69\n        author: https://github.com/iafan\n        name: goplay.space\n        example_image_url: https://user-images.githubusercontent.com/1728158/29108287-12dfd26a-7c93-11e7-966d-713356bce3d3.gif\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import (\n            \"fmt\"\n          )\n\n          func main() {\n            fmt.Println(`\n              draw mode\n              \n              say Let's start...\n              right 18\n              color red\n\n              forward 7\n              say One...\n              right 144\n\n              forward 7\n              say Two...\n              right 144\n\n              forward 7\n              say Three...\n              right 144\n\n              forward 7\n              say Four...\n              right 144\n\n              forward 7\n              say We've got a star!\n              right 144\n            `)\n          }\n  - title: Style Guide\n    type: md-list\n    entries:\n      - title: Google\n        url: https://google.github.io/styleguide/go\n      - title: Uber\n        url: https://github.com/uber-go/guide\n      - title: Go Code Review Comments\n        url: https://go.dev/wiki/CodeReviewComments\n  - title: Security\n    entries:\n      - title: Run official vulnerability check\n        description: It uses static analysis of source code or a binary's symbol table to narrow down reports to only those that could affect the application. By default, govulncheck makes requests to the Go vulnerability database at https://vuln.go.dev. Requests to the vulnerability database contain only module paths, not code or other properties of your program. See https://vuln.go.dev/privacy.html for more.\n        name: govulncheck\n        author: Go Core team\n        url: https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck\n        commands:\n          - govulncheck ./...\n        example_output: |\n          vulnerability data from https://vuln.go.dev (last modified 2023-06-01 21:27:40 +0000 UTC).\n\n          Scanning your code and 1952 packages across 202 dependent modules for known vulnerabilities...\n          Your code is affected by 2 vulnerabilities from 1 module.\n\n          Vulnerability #1: GO-2023-1571\n            A maliciously crafted HTTP/2 stream could cause excessive CPU\n            consumption in the HPACK decoder, sufficient to cause a denial\n            of service from a small number of small requests.\n\n            More info: https://pkg.go.dev/vuln/GO-2023-1571\n\n            Module: golang.org/x/net\n              Found in: golang.org/x/net@v0.1.1-0.20221027164007-c63010009c80\n              Fixed in: golang.org/x/net@v0.7.0\n\n              Call stacks in your code:\n                cmd/kube-controller-manager/app/controllermanager.go:216:40: k8s.io/kubernetes/cmd/kube-controller-manager/app.Run calls k8s.io/apiserver/pkg/server.SecureServingInfo.Serve, which eventually calls golang.org/x/net/http2.ConfigureServer\n                  requirements:\n                    - go install golang.org/x/vuln/cmd/govulncheck@latest\n      - title: \":fire: Detect escalated privileges in dependencies\"\n        description: Capslock is a capability analysis CLI for Go packages that informs users of which privileged operations a given package can access. This works by classifying the capabilities of Go packages by following transitive calls to privileged standard library operations. The recent increase in supply chain attacks targeting open source software has highlighted that third party dependencies should not be inherently trusted. Capabilities indicate what permissions a package has access to, and can be used in conjunction with other security signals to indicate which code requires additional scrutiny before it can be considered trusted.\n        url: https://github.com/google/capslock\n        author: Google\n        name: capslock\n        requirements:\n          - go install github.com/google/capslock/cmd/capslock@latest\n        commands:\n          - capslock -packages=./...\n        example_output: |\n          ...\n          CAPABILITY_ARBITRARY_EXECUTION: 317 references\n          CAPABILITY_EXEC: 317 references\n          CAPABILITY_FILES: 318 references\n          CAPABILITY_MODIFY_SYSTEM_STATE: 20 references\n          CAPABILITY_NETWORK: 317 references\n          CAPABILITY_OPERATING_SYSTEM: 124 references\n          CAPABILITY_READ_SYSTEM_STATE: 317 references\n          CAPABILITY_REFLECT: 348 references\n          CAPABILITY_RUNTIME: 317 references\n          CAPABILITY_SYSTEM_CALLS: 12 references\n          CAPABILITY_UNANALYZED: 332 references\n          CAPABILITY_UNSAFE_POINTER: 335 references\n      - title: \":fire: Run static analysis\"\n        description: This tool inspects source code for security problems by scanning the Go AST and SSA code representation. There are numerous rules it checks.\n        url: https://github.com/securego/gosec\n        author: https://github.com/ccojocar\n        name: gosec\n        requirements:\n          - go install github.com/securego/gosec/v2/cmd/gosec@latest\n        commands:\n          - gosec ./...\n      - title: Perform Taint Analysis\n        description: Taint analysis is a technique for identifying the flow of sensitive data through a program. It can be used to identify potential security vulnerabilities, such as SQL injection or cross-site scripting (XSS) attacks, by understanding how this data is used and transformed as it flows through the code. This package provides tools to performs such analysis. Included tool is performing SQL injection taint analysis.\n        url: https://github.com/picatz/taint\n        author: https://github.com/picatz\n        name: taint\n        requirements:\n          - go install github.com/picatz/taint/cmd/sqli@latest\n        commands:\n          - sqli main.go\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import (\n                  \"database/sql\"\n                  \"net/http\"\n          )\n\n          func business(db *sql.DB, q string) {\n                  db.Query(q) // potential sql injection\n          }\n\n          func run() {\n                  db, _ := sql.Open(\"sqlite3\", \":memory:\")\n\n                  mux := http.NewServeMux()\n\n                  mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n                          business(db, r.URL.Query().Get(\"sql-query\"))\n                  })\n\n                  http.ListenAndServe(\":8080\", mux)\n          }\n\n          func main() {\n                  run()\n          }\n        example_output: |\n          ./sql/injection/testdata/src/example/main.go:9:10: potential sql injection\n      - title: \":fire: Use Microsoft Go compiler\"\n        description: This is modified version of Go that can be used to build FIPS 140-2 compliant applications.\n        url: https://github.com/microsoft/go\n        name: microsoft/go\n        author: https://github.com/microsoft\n  - title: Static Analysis\n    entries:\n      - title: Run default static analysis\n        description: Official tool for static analysis of Go programs, with 27+ static analyzers.\n        author: official Go team\n        name: \"go vet\"\n        commands:\n          - go vet ./...\n      - title: Run custom static analysis tool\n        description: Standard `go vet` can be used to run custom analyzers binaries. Third party analyzers are supported. Lots of official analyzers not included by default into `go vet`. Analyzer has to satisfy interface and command described here https://pkg.go.dev/golang.org/x/tools/go/analysis. Refer for https://pkg.go.dev/golang.org/x/tools/go/analysis/passes for full list of official Go analyzers.\n        author: official Go team\n        name: \"go vet\"\n        commands:\n          - go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow\n          - go vet -vettool=$(which shadow)\n      - title: Run official static analyzers not included in `go vet`\n        description: There are many analyzers not included in `go vet`. These tools are experimental and may not work as expected (e.g. `usesgenerics` does not work). Refer to for full list https://pkg.go.dev/golang.org/x/tools/go/analysis.\n        author: official Go team\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import (\n            \"golang.org/x/tools/go/analysis/multichecker\"\n\n            \"golang.org/x/tools/go/analysis/passes/atomicalign\"\n            \"golang.org/x/tools/go/analysis/passes/deepequalerrors\"\n            \"golang.org/x/tools/go/analysis/passes/fieldalignment\"\n            \"golang.org/x/tools/go/analysis/passes/nilness\"\n            \"golang.org/x/tools/go/analysis/passes/reflectvaluecompare\"\n            \"golang.org/x/tools/go/analysis/passes/shadow\"\n            \"golang.org/x/tools/go/analysis/passes/sortslice\"\n            \"golang.org/x/tools/go/analysis/passes/unusedwrite\"\n            \"golang.org/x/tools/go/analysis/passes/usesgenerics\"\n          )\n\n          func main() {\n            multichecker.Main(\n              atomicalign.Analyzer,         // checks for non-64-bit-aligned arguments to sync/atomic functions\n              deepequalerrors.Analyzer,     // checks for the use of reflect.DeepEqual with error values\n              fieldalignment.Analyzer,      // detects structs that would use less memory if their fields were sorted\n              nilness.Analyzer,             // inspects the control-flow graph of an SSA function and reports errors such as nil pointer dereferences and degenerate nil pointer comparisons\n              reflectvaluecompare.Analyzer, // checks for accidentally using == or reflect.DeepEqual to compare reflect.Value values\n              shadow.Analyzer,              // checks for shadowed variables\n              sortslice.Analyzer,           // checks for calls to sort.Slice that do not use a slice type as first argument\n              unusedwrite.Analyzer,         // checks for unused writes to the elements of a struct or array object\n              usesgenerics.Analyzer,        // checks for usage of generic features added in Go 1.18\n            )\n          }\n      - title: Detect most common issues\n        description: Start custom linters with this well-known linter. It contains 150+ high quality low false positive rate linters. It is widely adopted by Open Source and tech companies. [staticcheck.io](https://staticcheck.io/).\n        url: https://github.com/dominikh/go-tools\n        name: staticcheck\n        author: https://github.com/dominikh\n        commands:\n          - staticcheck ./...\n        requirements:\n          - go install honnef.co/go/tools/cmd/staticcheck@latest\n      - title: \"Detect potential Nil panics\"\n        description: This tool employs sophisticated static analysis techniques to catch Nil dereferences. More details in [blog](https://www.uber.com/en-IN/blog/nilaway-practical-nil-panic-detection-for-go/).\n        url: https://github.com/uber-go/nilaway\n        author: Uber\n        name: nilaway\n        commands:\n          - nilaway ./...\n        example_image_url: https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2023/11/figure_4.jpg\n        requirements:\n          - go install go.uber.org/nilaway/cmd/nilaway@latest\n      - title: Detect most common issues\n        description: This linting aggregator and runner is similar to staticcheck. It has 100+ linting rules. It is based on Go [Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments) style guide that is used in core Go project itself. It has styling, security, performance rules. It has minimal dependencies and implements rules itself. It exports all analysers into `golang.org/x/tools/go/analysis` toolchain.\n        url: https://github.com/go-critic/go-critic\n        author: https://github.com/quasilyte\n        name: go-critic\n        commands:\n          - gocritic check ./...\n        requirements:\n          - go install -v github.com/go-critic/go-critic/cmd/gocritic@latest\n      - title: Reference and run common linters\n        description: This tool has comprehensive list of linters. Owners of this aggregator keep track of active linters, their versions, and optimal configs. It contains many optimizations to make linters run fast by parallelism, distributing binaries and Docker images, utilising `golang.org/x/tools/go/analysis` toolchain.\n        url: https://golangci-lint.run\n        name: golangci-lint\n        commands:\n          - golangci-lint run\n        requirements:\n          - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest\n        example_output: |\n          server/web/filter/opentracing/filter.go:21:2: import-alias-naming: import name (logKit) must match the regular expression: ^[a-z][a-z0-9]{0,}$ (revive)\n          core/utils/pagination/paginator.go:65:3: G104: Errors unhandled. (gosec)\n          core/utils/pagination/utils.go:33:2: bare-return: avoid using bare returns, please add return expressions (revive)\n          server/web/grace/server.go:358:3: exitAfterDefer: log.Fatalf will exit, and `defer regLock.Unlock()` will not run (gocritic)\n          server/web/filter/prometheus/filter.go:90:40: \"2006-01-02 15:04:05\" can be replaced by time.DateTime (usestdlibvars)\n          core/utils/slice.go:47:20: builtinShadow: shadowing of predeclared identifier: min (gocritic)\n          core/utils/utils.go:54:3: ifElseChain: rewrite if-else to switch statement (gocritic)\n          client/orm/hints/db_hints_test.go:95:2: expected-actual: need to reverse actual and expected values (testifylint)\n          core/config/env/env.go:95:15: fmt.Errorf can be replaced with errors.New (perfsprint)\n      - title: Detect non-exhaustive switch and map\n        description: This `go vet` compatible analyzer checks for exhaustive switch statements and map literals. It works for enums with underlying integer, float, or string types (struct based enums are not supported).\n        name: exhaustive\n        url: https://github.com/nishanths/exhaustive\n        author: https://github.com/nishanths\n        commands:\n          - exhaustive ./...\n        example_content_ext: go\n        example_content: |\n          package token\n\n          type Token int\n\n          const (\n            Add Token = iota\n            Subtract\n            Multiply\n            Quotient\n            Remainder\n          )\n\n          package calc\n\n          import \"token\"\n\n          func f(t token.Token) {\n            switch t {\n            case token.Add:\n            case token.Subtract:\n            case token.Multiply:\n            default:\n            }\n          }\n\n          func g(t token.Token) string {\n            return map[token.Token]string{\n              token.Add:      \"add\",\n              token.Subtract: \"subtract\",\n              token.Multiply: \"multiply\",\n            }[t]\n          }\n        example_output: |\n          calc.go:6:2: missing cases in switch of type token.Token: Quotient, Remainder\n          calc.go:15:9: missing map keys of type token.Token: Quotient, Remainder\n        requirements:\n          - go install github.com/nishanths/exhaustive/cmd/exhaustive@latest\n      - title: Detect structs with uninitialized fields\n        description: This tool finds instantiations of structs with zero values. It supports struct tags to mark fields as optional. This may help to prevent unexpected zero values.\n        url: https://github.com/GaijinEntertainment/go-exhaustruct\n        name: go-exhaustruct\n        author: https://github.com/xobotyi\n        commands:\n          - exhaustruct ./...\n        example_content_ext: go\n        example_content: |\n          type Shape struct {\n            Length int\n            Width  int\n            volume    int\n            Perimeter int `exhaustruct:\"optional\"`\n          }\n\n          // valid\n          var a Shape = Shape{\n            Length: 5,\n            Width:  3,\n            volume: 5,\n          }\n\n          // invalid, `volume` is missing\n          var b Shape = Shape{\n            Length: 5,\n            Width:  3,\n          }\n        requirements:\n          - go get -u github.com/GaijinEntertainment/go-exhaustruct/v3/cmd/exhaustruct\n      - title: \":fire: Detect unreachable functions\"\n        description: This static analysis tool detects when functions can not be reached in any execution. There is also `-test` mode that shows if function is reachable by any of tests.\n        name: deadcode\n        url: https://pkg.go.dev/golang.org/x/tools/cmd/deadcode\n        author: \"[Alan Donovan](https://github.com/adonovan), official Go team\"\n        commands:\n          - deadcode .\n        example_output: |\n          greet.go:23: unreachable func: goodbye\n          greet.go:20: unreachable func: Goodbyer.Greet\n        requirements:\n          - go install golang.org/x/tools/cmd/deadcode@latest\n      - title: Detect unsafe code\n        description: Find incorrect uses of `reflect.SliceHeader`, `reflect.StringHeader`, and unsafe casts between structs with architecture-sized fields. Research paper [\"Uncovering the Hidden Dangers Finding Unsafe Go Code in the Wild\"](https://arxiv.org/abs/2010.11242) presented at 19th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2020).\n        name: go-safer\n        url: https://github.com/jlauinger/go-safer\n        author: https://github.com/jlauinger\n        commands:\n          - go-safer ./...\n        example_output: |\n          # github.com/jlauinger/go-safer/passes/sliceheader/testdata/src/bad/composite_literal\n          composite_literal/composite_literal.go:10:9: reflect header composite literal found\n          composite_literal/composite_literal.go:10:9: reflect header composite literal found\n          # github.com/jlauinger/go-safer/passes/sliceheader/testdata/src/bad/header_in_struct\n          header_in_struct/header_in_struct.go:16:2: assigning to reflect header object\n        requirements:\n          - go install github.com/jlauinger/go-safer@latest\n      - title: \":fire: Detect `panic` without explaining comment\"\n        description: Panic should only be used very sparingly, for catching bugs basically, and thus deserve a comment to confirm that that's indeed the case.\n        name: panic-linter\n        url: https://github.com/ldemailly/panic-linter\n        author: https://github.com/ldemailly\n        example_content_ext: go\n        example_content: |\n          # bad\n          panic(\"catch this\")\n\n          # good\n          panic(\"catch this\") // does not happen unless byte is not 8 bits anymore\n      - title: Detect unnecessary type conversions\n        description: Identify expressions like `T(x)` where `x` is already has type `T`. This tool can identify conversions that force intermediate rounding. It also can overwrite files with fix. This tool is not using `golang.org/x/tools/go/analysis` toolchain.\n        name: unconvert\n        author: https://github.com/mdempsky\n        url: https://github.com/mdempsky/unconvert\n        example_content: |\n          $ unconvert -v bytes fmt\n          GOROOT/src/bytes/reader.go:117:14: unnecessary conversion\n                          abs = int64(r.i) + offset\n                                    ^\n          GOROOT/src/fmt/print.go:411:21: unnecessary conversion\n                  p.fmt.integer(int64(v), 16, unsigned, udigits)\n                                    ^\n        commands:\n          - unconvert ./...\n        requirements:\n          - go install github.com/mdempsky/unconvert@latest\n      - title: Detect global variables\n        description: Global variables are an input to functions that is not visible in the functions signature, complicate testing, reduces readability and increase the complexity of code. However, sometimes global variables make sense. This tool skips such common scenarios. This tool can be used in CI, albeit it is very strict. This tool is useful for investigations.\n        name: gochecknoglobals\n        url: https://github.com/leighmcculloch/gochecknoglobals\n        author: https://github.com/leighmcculloch\n        commands:\n          - gochecknoglobals ./...\n        example_output: |\n          /Users/nikolaydubina/Workspace/hugo/common/paths/path.go:64:5: fpb is a global variable\n          /Users/nikolaydubina/Workspace/hugo/common/paths/url.go:50:5: pb is a global variable\n          /Users/nikolaydubina/Workspace/hugo/common/text/position.go:52:5: positionStringFormatfunc is a global variable\n          /Users/nikolaydubina/Workspace/hugo/common/text/transform.go:26:5: accentTransformerPool is a global variable\n          /Users/nikolaydubina/Workspace/hugo/common/herrors/error_locator.go:40:5: SimpleLineMatcher is a global variable\n        requirements:\n          - go install 4d63.com/gochecknoglobals@latest\n      - title: Detect slices that could be preallocated\n        description: Preallocating slices can sometimes significantly improve performance. This tool detects common scenarios where preallocating can be beneficial. This tool is not using `golang.org/x/tools/go/analysis` toolchain.\n        url: https://github.com/alexkohler/prealloc\n        author: https://github.com/alexkohler\n        name: prealloc\n        commands:\n          - prealloc ./...\n        example_output: |\n          tools/gopls/internal/lsp/source/completion/completion.go:1484 Consider preallocating paths\n          tools/gopls/internal/lsp/source/completion/package.go:54 Consider preallocating items\n          tools/gopls/internal/lsp/template/symbols.go:205 Consider preallocating ans\n          tools/gopls/internal/lsp/template/completion.go:199 Consider preallocating working\n          tools/gopls/internal/lsp/tests/util.go:32 Consider preallocating notePositions\n          tools/gopls/internal/lsp/tests/util.go:240 Consider preallocating paramParts\n          tools/gopls/internal/lsp/tests/util.go:282 Consider preallocating result\n          tools/gopls/internal/lsp/tests/util.go:309 Consider preallocating got\n        requirements:\n          - go install github.com/alexkohler/prealloc@latest\n      - title: Detect unnecessary import aliases\n        description: It is common guideline to avoid renaming imports unless there are collisions. This tool detects where original package name would not collide. This tool is useful for investigations. This tool is not using `golang.org/x/tools/go/analysis` toolchain.\n        url: https://github.com/alexkohler/unimport\n        author: https://github.com/alexkohler\n        name: unimport\n        commands:\n          - unimport ./...\n        example_output: |\n          pkg/apis/apiserverinternal/v1alpha1/zz_generated.conversion.go:29 unnecessary import alias runtime\n          pkg/apis/apiserverinternal/v1alpha1/zz_generated.conversion.go:30 unnecessary import alias apiserverinternal\n          pkg/apis/apps/v1/zz_generated.conversion.go:25 unnecessary import alias unsafe\n          pkg/apis/apps/v1/zz_generated.conversion.go:30 unnecessary import alias conversion\n          pkg/apis/apps/v1/zz_generated.conversion.go:31 unnecessary import alias runtime\n          pkg/apis/apps/v1/zz_generated.conversion.go:32 unnecessary import alias intstr\n          pkg/apis/apps/v1/zz_generated.conversion.go:33 unnecessary import alias apps\n          pkg/apis/apps/v1/zz_generated.conversion.go:34 unnecessary import alias core\n          pkg/apis/apps/v1beta1/zz_generated.conversion.go:25 unnecessary import alias unsafe\n          pkg/apis/apps/v1beta1/zz_generated.conversion.go:27 unnecessary import alias v1beta1\n          pkg/apis/apps/v1beta1/zz_generated.conversion.go:30 unnecessary import alias conversion\n          pkg/apis/apps/v1beta1/zz_generated.conversion.go:31 unnecessary import alias runtime\n        requirements:\n          - go install github.com/alexkohler/unimport@latest\n      - title: Detect unexpected import aliases\n        description: Ensure that import aliases take one of the allowed values.\n        url: https://github.com/julz/importas\n        name: importas\n        author: https://github.com/julz\n        example_content_ext: go\n        example_content: |\n          package main\n\n          import (\n            v1alpha1 \"knative.dev/serving/pkg/apis/autoscaling/v1alpha1\" // want `import \"knative.dev/serving/pkg/apis/autoscaling/v1alpha1\" imported as \"v1alpha1\" but must be \"autoscalingv1alpha1\" according to config`\n            v1 \"knative.dev/serving/pkg/apis/serving/v1\"                 // want `import \"knative.dev/serving/pkg/apis/serving/v1\" imported as \"v1\" but must be \"servingv1\" according to config`\n          )\n\n          func main() {\n          ...\n        commands:\n          - importas -alias knative.dev/serving/pkg/apis/autoscaling/v1alpha1:autoscalingv1alpha1 -alias knative.dev/serving/pkg/apis/serving/v1:servingv1 ./...\n        requirements:\n          - go install github.com/julz/importas/cmd/importas@latest\n      - title: Detect inconsistent import aliases\n        description: It greatly helps to navigate large codebases when imports have the same aliases.\n        name: consistentimports\n        url: https://github.com/nikolaydubina/consistentimports\n        author: https://github.com/nikolaydubina\n        commands:\n          - consistentimports ./...\n        example_output: |\n          -: \"k8s.io/utils/net\" netutils:4 netutil:1\n          -: \"k8s.io/client-go/listers/core/v1\" corelisters:1 listersv1:1 v1listers:1\n          -: \"k8s.io/client-go/informers/core/v1\" coreinformers:1 informers:1\n          -: \"k8s.io/api/rbac/v1\" rbacv1:4 v1:2\n          -: \"k8s.io/apimachinery/pkg/runtime\" runtime:3 kruntime:1\n          -: \"k8s.io/api/imagepolicy/v1alpha1\" imagepolicyv1alpha1:1 v1alpha1:1\n          -: \"k8s.io/kubernetes/plugin/pkg/admission/podtolerationrestriction/apis\n        requirements:\n          - go install github.com/nikolaydubina/consistentimports@latest\n      - title: Detect naked returns\n        description: \"It is common guideline to avoid [naked returns](https://github.com/golang/go/wiki/CodeReviewComments#named-result-parameters). Naked return is when function has named return, and return statement does not specify value. This tool is useful for investigations.\"\n        url: https://github.com/alexkohler/nakedret\n        author: https://github.com/alexkohler\n        name: nakedret\n        commands:\n          - nakedret ./...\n        example_output: |\n          /kubernetes/pkg/controller/podautoscaler/replica_calculator.go:421:2: naked return in func `groupPods` with 44 lines of code\n          /kubernetes/pkg/kubelet/container/helpers.go:374:2: naked return in func `MakePortMappings` with 36 lines of code\n          /kubernetes/pkg/kubelet/config/config.go:350:2: naked return in func `filterInvalidPods` with 17 lines of code\n          /kubernetes/pkg/kubelet/config/config.go:449:3: naked return in func `checkAndUpdatePod` with 38 lines of code\n          /kubernetes/pkg/kubelet/config/config.go:471:2: naked return in func `checkAndUpdatePod` with 38 lines of code\n          /kubernetes/cmd/kube-controller-manager/app/controllermanager.go:717:2: naked return in func `createClientBuilders` with 19 lines of code\n          /kubernetes/pkg/proxy/topology.go:77:3: naked return in func `CategorizeEndpoints` with 98 lines of code\n          /kubernetes/pkg/proxy/topology.go:111:3: naked return in func `CategorizeEndpoints` with 98 lines of code\n          /kubernetes/pkg/proxy/topology.go:119:3: naked return in func `CategorizeEndpoints` with 98 lines of code\n          /kubernetes/pkg/proxy/topology.go:137:2: naked return in func `CategorizeEndpoints` with 98 lines of code\n        requirements:\n          - go install github.com/alexkohler/nakedret/cmd/nakedret@latest\n      - title: Detect mixing pointer and value method receivers\n        description: \"Mixing pointer and value method receivers for the same type is discouraged, as per commong guideline [Go wiki](https://github.com/golang/go/wiki/CodeReviewComments#receiver-type) and [Google Go style guide](https://google.github.io/styleguide/go/decisions#receiver-type).\"\n        name: smrcptr\n        url: https://github.com/nikolaydubina/smrcptr\n        author: https://github.com/nikolaydubina\n        commands:\n          - smrcptr ./...\n        example_content_ext: go\n        example_content: |\n          type Pancake struct{}\n\n          func NewPancake() Pancake { return Pancake{} }\n\n          func (s *Pancake) Fry() {}\n\n          func (s Pancake) Bake() {}\n        example_output: |\n          smrcptr/internal/bakery/pancake.go:7:1: Pancake.Fry uses pointer\n          smrcptr/internal/bakery/pancake.go:9:1: Pancake.Bake uses value\n        requirements:\n          - go install github.com/nikolaydubina/smrcptr@latest\n      - title: Detect vertical function ordering\n        description: Vertical function ordering is declaring functions before they are used. Based on 'Clean Code' by Robert.C.Martin.\n        name: vertfn\n        url: https://github.com/nikolaydubina/vertfn\n        author: https://github.com/nikolaydubina\n        commands:\n          - vertfn --verbose ./...\n        example_image_url: https://github.com/nikolaydubina/vertfn/blob/master/doc/code-dep-viz.png\n        requirements:\n          - go install github.com/nikolaydubina/vertfn@latest\n      - title: Detect vertical symbol ordering\n        description: This tool goes beyond just vertical ordering of function declarations, it also tracks many other types of symbols.\n        name: refdir\n        url: https://github.com/devnev/refdir\n        author: https://github.com/devnev\n        commands:\n          - refdir --verbose ./...\n        example_image_url: https://github.com/devnev/refdir/raw/main/doc/code-dep-viz.png\n        requirements:\n          - go install github.com/devnev/refdir@latest\n      - title: Detect tests with wrong `t.Parallel()` usage\n        description: This linter checks for incorrect usage of `t.Parallel()` calls. It will detect if `t.Parallel()` is missing.\n        url: https://github.com/kunwardeep/paralleltest\n        name: paralleltest\n        author: https://github.com/kunwardeep\n        commands:\n          - paralleltest ./...\n        example_output: |\n          /kubernetes/pkg/scheduler/framework/plugins/nodeunschedulable/node_unschedulable_test.go:28:1: Function TestNodeUnschedulable missing the call to method parallel\n          /kubernetes/pkg/scheduler/framework/plugins/nodevolumelimits/csi_test.go:68:1: Function TestCSILimits missing the call to method parallel\n          /kubernetes/pkg/scheduler/framework/plugins/nodevolumelimits/csi_test.go:480:2: Range statement for test TestCSILimits missing the call to method parallel in test Run\n          /kubernetes/pkg/scheduler/framework/plugins/nodevolumelimits/non_csi_test.go:81:1: Function TestEphemeralLimits missing the call to method parallel\n        requirements:\n          - go install github.com/kunwardeep/paralleltest@latest\n      - title: Detect tests with wrong `t.Parallel()` usage\n        description: This linter checks for incorrect usage of `t.Parallel()` calls.\n        url: https://github.com/moricho/tparallel\n        name: tparallel\n        author: https://github.com/moricho\n        commands:\n          - go vet -vettool=`which tparallel` ./...\n        example_output: |\n          testdata/src/sample/table_test.go:7:6: Test_Table1 should use t.Cleanup\n          testdata/src/sample/table_test.go:7:6: Test_Table1 should call t.Parallel on the top level as well as its subtests\n          testdata/src/sample/table_test.go:30:6: Test_Table2's subtests should call t.Parallel\n        requirements:\n          - go install github.com/moricho/tparallel/cmd/tparallel@latest\n      - title: Detect magic numbers\n        description: This tool has heuristics to detect magic numbers.\n        name: mnd\n        url: https://github.com/tommy-muehle/go-mnd\n        author: https://github.com/tommy-muehle\n        commands:\n          - mnd ./...\n        example_output: |\n          /go-mnd/examples/bad/main.go:18:23: Magic number: 200, in <condition> detected\n          /go-mnd/examples/bad/main.go:11:12: Magic number: 2, in <assign> detected\n        requirements:\n          - go install github.com/tommy-muehle/go-mnd/v2/cmd/mnd@latest\n      - title: \"Detect magic strings\"\n        description: This tool detects repeated strings.\n        name: goconst\n        url: https://github.com/jgautheron/goconst\n        author: https://github.com/jgautheron\n        commands:\n          - goconst -min-occurrences 5 -output json ./... | jq\n        example_output: |\n          \"not reached\": [                                                                                                                                          \n            {                                                                                                                                                       \n              \"Filename\": \"tpl/internal/go_templates/texttemplate/hugo_template.go\",                                                                                \n              \"Offset\": 7916,\n              \"Line\": 267,\n              \"Column\": 8\n            },\n            {\n              \"Filename\": \"tpl/internal/go_templates/texttemplate/exec.go\",\n              \"Offset\": 15056,\n              \"Line\": 525,\n              \"Column\": 8\n            },\n            {\n              \"Filename\": \"tpl/internal/go_templates/texttemplate/exec.go\",\n              \"Offset\": 21354,\n              \"Line\": 699,\n              \"Column\": 8\n            },\n            {\n              \"Filename\": \"tpl/internal/go_templates/texttemplate/exec.go\",\n              \"Offset\": 28145,\n              \"Line\": 903,\n              \"Column\": 8\n            },\n            ...\n        requirements:\n          - go install github.com/jgautheron/goconst/cmd/goconst@latest\n      - title: \"Detect bound checks\"\n        url: https://github.com/maruel/pat\n        author: https://github.com/maruel\n        name: pat/boundcheck\n        requirements:\n          - go install github.com/maruel/pat/cmd/...@latest\n        description: This tool detects bound checks in source code by analysing compiled code. This is useful for audit.\n        example_image_url: https://github.com/maruel/pat/wiki/boundcheck.png\n        commands:\n          - boundcheck -pkg ./cmd/nin | less -R\n      - title: Calculate Cognitive Complexity\n        description: Cognitive Complexity as defined in this tool can be more illustrative than Cyclometric Complexity. Research paper [\"Cognitive Complexity - a new way of measuring understandability\"](https://www.sonarsource.com/docs/CognitiveComplexity.pdf), 2021.\n        name: gocognit\n        url: https://github.com/uudashr/gocognit\n        author: https://github.com/uudashr\n        commands:\n          - gocognit .\n        example_content_ext: go\n        example_content: |\n          // Complexity Cyclomatic=4 Cognitive=7\n          // Cognitive complexity give higher score compare to cyclomatic complexity.\n          func SumOfPrimes(max int) int {         // +1\n              var total int\n              for i := 1; i < max; i++ {          // +1 (cognitive +1, nesting)\n                  for j := 2; j < i; j++ {        // +1 (cognitive +2, nesting)\n                      if i%j == 0 {               // +1\n                          continue OUT\n                      }\n                  }\n                  total += i\n              }\n              return total\n          }\n\n          // Complexity Cyclomatic=4 Cognitive=1\n          // Cognitive complexity give lower score compare to cyclomatic complexity.\n          func GetWords(number int) string {      // +1\n              switch number {\n                  case 1:                         // +1 (cognitive 0)\n                      return \"one\"\n                  case 2:                         // +1 (cognitive 0)\n                      return \"a couple\"\n                  case 3:                         // +1 (cognitive 0)\n                      return \"a few\"\n                  default:\n                      return \"lots\"\n              }\n          }\n        example_output: |\n          21 main (BasicSymtabConverter).SymtabFileToTreemap basic_converter.go:23:1\n          12 symtab parseGoSymtabLine symtab/go_symtab_parser.go:37:1\n          11 main main main.go:30:1\n          8 symtab EqSymbolName symtab/symbol_name_parser.go:12:1\n          7 symtab ParseSymbolName symtab/symbol_name_parser.go:32:1\n          7 symtab Test_parseGoSymtabLine symtab/go_symtab_parser_private_test.go:5:1\n          4 symtab Test_ParseSymbolName symtab/symbol_name_parser_private_test.go:5:1\n          3 main updateNodeNamesWithByteSize main.go:99:1\n          3 main unique basic_converter.go:119:1\n          3 symtab (GoSymtabParser).ParseSymtab symtab/go_symtab_parser.go:14:1\n          2 fmtbytecount ByteCountIEC fmtbytecount/format_bytecount.go:3:1\n        requirements:\n          - go install github.com/uudashr/gocognit/cmd/gocognit@latest\n      - title: Calculate Cyclomatic Complexity\n        description: Cyclomatic complexity is a code quality metric which can be used to identify code that needs refactoring. It measures the number of linearly independent paths through a function's source code. For example, excessive usage of nested `if` and `for` leads to increased cyclomatic complexity. This tool can report `top-N` and `over`, which makes it suitable for CI as a linter and manual investigation.\n        name: gocyclo\n        author: https://github.com/fzipp\n        url: https://github.com/fzipp/gocyclo\n        commands:\n          - gocyclo .\n        example_output: |\n          $ gocyclo -over=5 .\n          34 examplemodule (*With32FieldsFeatureTransformer).Fit cmd/generate/tests/with32fieldsfp.go:48:1\n          24 main parseCode cmd/generate/parser.go:83:1\n          13 examplemodule (*AllTransformersFeatureTransformer).Fit cmd/generate/tests/alltransformersfp.go:27:1\n          12 examplemodule (*EmployeeFeatureTransformer).Fit cmd/generate/tests/employeefp.go:26:1\n          11 transformers (*CountVectorizer).TransformInplace transformers/textprocesors.go:84:1\n          11 structtransformer (*StructTransformer).Transform structtransformer/structtransformer.go:38:1\n          11 examplemodule (*LargeMemoryTransformerFeatureTransformer).Fit cmd/generate/tests/largememorytransformerfp.go:25:1\n          10 examplemodule (*WeirdTagsFeatureTransformer).Fit cmd/generate/tests/weirdtagsfp.go:24:1\n          8 transformers (*SampleNormalizerL2).TransformInplace transformers/samplenormalizers.go:58:1\n        requirements:\n          - go install github.com/fzipp/gocyclo/cmd/gocyclo@latest\n      - title: Calculate Cyclomatic Complexity\n        description: This linter calculates cyclomatic complexity of functions or packages. It can select minimum complexity and act as blocking linter in CI pipelines. The key offering from this linter is that it can calculate avg cyclomatic complexity on package.\n        url: https://github.com/bkielbasa/cyclop\n        name: cyclop\n        author: https://github.com/bkielbasa\n        commands:\n          - cyclop ./...\n          - \"# to find packages with avg cyclomatic complexity above maximum\"\n          - cyclop -packageAverage 5 -maxComplexity 10000 ./...\n        example_output: |\n          /kubernetes/test/integration/scheduler/scoring/priorities_test.go:17:1: the average complexity for the package scoring is 6.100000, max is 5.000000\n          /kubernetes/test/integration/serviceaccount/service_account_test.go:17:1: the average complexity for the package serviceaccount is 10.666667, max is 5.000000\n          /kubernetes/test/integration/volume/persistent_volumes_test.go:17:1: the average complexity for the package volume is 6.157895, max is 5.000000\n          /kubernetes/test/list/main_test.go:17:1: the average complexity for the package main is 5.461538, max is 5.000000\n          /kubernetes/test/typecheck/main_test.go:17:1: the average complexity for the package main is 5.916667, max is 5.000000\n          /kubernetes/third_party/forked/golang/net/dnsclient_test.go:10:1: the average complexity for the package net is 5.333333, max is 5.000000\n        requirements:\n          - go install github.com/bkielbasa/cyclop@latest\n      - title: Calculate age of comments\n        description: This go vet compatible tool analyses AST and git and collects details on how far comments drift from code they describe.\n        name: go-commentage\n        url: https://github.com/nikolaydubina/go-commentage\n        author: https://github.com/nikolaydubina\n        commands:\n          - go-commentage -min-days-behind 360 ./...\n        example_output: |\n          kubernetes/pkg/util/ipset/ipset.go:283:1: \"CreateSet\": doc_last_updated_behind_days(1336.83)\n          kubernetes/pkg/util/ipset/ipset.go:296:1: \"createSet\": doc_last_updated_behind_days(1603.17)\n          kubernetes/pkg/util/ipset/ipset.go:320:1: \"AddEntry\": doc_last_updated_behind_days(1578.10)\n          kubernetes/pkg/util/ipset/ipset.go:332:1: \"DelEntry\": doc_last_updated_behind_days(1578.10)\n          kubernetes/pkg/util/ipset/ipset.go:340:1: \"TestEntry\": doc_last_updated_behind_days(450.07)\n        requirements:\n          - \"# get latest version of git\"\n          - go install github.com/nikolaydubina/go-commentage@latest\n      - title: \"Ensure `if` statements using short assignment\"\n        name: ifshort\n        author: https://github.com/esimonov\n        status: archive-not-working\n        url: https://github.com/esimonov/ifshort\n        description: Linter for checking that your code uses short syntax for `if` statements whenever possible. However, as of `2023-05-26`, it is not maitaned and is not working.\n        commands:\n          - ifshort ./...\n        example_content_ext: go\n        example_content: |\n          // bad\n          func someFunc(k string, m map[string]interface{}) {\n            _, ok := m[k]\n            if !ok {\n              return\n            }\n\n            err := otherFunc1()\n            if err != nil {\n              otherFunc2(err)\n            }\n          }\n\n          // good\n          func someFunc(k string, m map[string]interface{}) {\n            if _, ok := m[k]; !ok {\n              return\n            }\n\n            if err := otherFunc1(); err != nil {\n              otherFunc2(err)\n            }\n          }\n        requirements:\n          - go install github.com/esimonov/ifshort@latest\n      - title: \":fire: Detect sub-optimal struct layout\"\n        description: This tool detect structs that would use less memory if their fields were sorted and optionally sort such fields.\n        name: betteralign\n        url: https://github.com/dkorunic/betteralign\n        author: https://github.com/dkorunic\n        commands:\n          - betteralign -apply ./...\n        requirements:\n          - go install github.com/dkorunic/betteralign/cmd/betteralign@latest\n      - title: \":fire: Detect sub-optimal struct layout\"\n        description: This tool reorders struct fields to minimize the amount of padding.\n        name: structlayout-optimize\n        url: https://github.com/dominikh/go-tools/blob/master/cmd/structlayout-optimize\n        author: https://github.com/dominikh\n        requirements:\n          - go install https://github.com/dominikh/go-tools/blob/master/cmd/structlayout-optimize@latest\n      - title: Visualize struct layout\n        description: Display the byte offset and size of each field, respecting alignment/padding.\n        name: structlayout\n        url: https://github.com/dominikh/go-tools/tree/master/cmd/structlayout\n        author: https://github.com/dominikh\n        commands:\n          - structlayout -json bytes Buffer | structlayout-svg -t \"bytes.Buffer\" > /tmp/struct.svg\n        example_image_url: https://github.com/dominikh/go-tools/blob/master/images/screenshots/struct.png\n        requirements:\n          - go install github.com/ajstarks/svgo/structlayout-svg@latest\n          - go install honnef.co/go/tools/cmd/structlayout@latest\n      - title: Rely on compiler for stricter Enums\n        description: \"For compile time blocking of: accidental arithmetics; implicit cast of untyped constants; all operators except `==` and `!=`; — simply wrap into a struct in separate package and do not export field. [example](http://github.com/nikolaydubina/go-enum-example).\"\n        example_content_ext: go\n        example_content: |\n          package color\n\n          type Color struct{ c uint }\n\n          var (\n            Undefined = Color{}\n            Red       = Color{1}\n            Green     = Color{2}\n            Blue      = Color{3}\n          )\n      - title: Analyze function callsites\n        description: Scrape callsite information about functions to learn better how functions are beinn used. This can help in refactoring, naming, OOP. This tool calculates frequency of names on assignments in returns and frequency of names in arguments. This can be used to detect ignored returns as well.\n        author: https://github.com/nikolaydubina\n        url: https://github.com/nikolaydubina/go-callsite-stats\n        name: go-callsite-stats\n        commands:\n          - go-callsite-stats ./...\n        requirements:\n          - go install github.com/nikolaydubina/go-callsite-stats@latest\n        example_content: |\n          x16:       (no assignments)                  = execHostnameTest(serviceAddress:7)\n                                                                        (nodePortAddress:3)\n                                                                        (nodePortAddress0:3)\n                                                                        (nodePortAddress1:2)\n                                                                        (clusterIPAddress:1)\n          x16:       pod:10, err:12                    = CreatePod(client:11, namespace:10, nil:9, pvclaims:6, false:7, execCommand:2)\n                    clientPod:1                                  (c:2, ns:2, podCount:2, true:3)\n                    _:1                                          (pod:1, pod:1, pvclaims:2, false:2)\n                    err:1                                        (ctx:1, nil:1, createdClaims:1, pvcClaims:1)\n                                                                  (namespace:1, nameSpace:1, podTemplate:1)\n                                                                  (, basePod:1)\n          x16:       (no assignments)                  = GET()\n          x16:       deployment:11, err:14             = UpdateDeploymentWithRetries(c:14, ns:14, deploymentName:3, applyUpdate:1, poll:1,pollShortTimeout:1)                                                         \n                    _:2                                                            (client:1, namespace:1, pollTimeout:1)\n                    deploymentWithUpdatedReplicas:1                                (applyUpdate:1, pollInterval:1, name:1)\n          x16:       err:16                            = waitForDefinition(schemaFoo:12\n                                                                          (schemaWaldo:3)\n                                                                          (expect:1)\n"
        }
      ]
    }
  ]
}