{
  "metadata": {
    "timestamp": 1736567043243,
    "page": 625,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "peak/s5cmd",
      "stars": 2811,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0498046875,
          "content": ".idea/\n.vscode/\n/s5cmd\n/s5cmd.exe\n/*.iml\n.DS_Store\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.66796875,
          "content": "before:\n  hooks:\n    - make build\nbuilds:\n  -\n    binary: s5cmd\n    ldflags: -s -w -X github.com/peak/s5cmd/v2/version.Version={{.Tag}} -X github.com/peak/s5cmd/v2/version.GitCommit={{ .ShortCommit }}\n    env:\n      - CGO_ENABLED=0\n    goos:\n      - darwin\n      - linux\n      - windows\n    goarch:\n      - 386\n      - amd64\n      - arm\n      - arm64\n      - ppc64le\n    ignore:\n      - goos: darwin\n        goarch: 386\n\narchives:\n  - name_template: '{{ .ProjectName }}_{{ .Version }}_{{ .Os }}-{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'\n    replacements:\n      darwin: macOS\n      linux: Linux\n      windows: Windows\n      386: 32bit\n      amd64: 64bit\n    format_overrides:\n      - goos: windows\n        format: zip\n\nchecksum:\n  name_template: '{{ .ProjectName }}_checksums.txt'\n\nsnapshot:\n  name_template: \"{{ .Tag }}\"\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - '^docs:'\n      - '^test:'\n      - Merge pull request\n      - Merge branch\n\nbrews:\n  - tap:\n      owner: peak\n      name: homebrew-tap\n    folder: Formula\n    name: s5cmd\n    description: Parallel S3 and local filesystem execution tool\n    homepage: https://github.com/peak/s5cmd\n    license: MIT\n    test: |\n      system \"#{bin}/s5cmd version\"\n\nnfpms:\n  -\n    vendor: Peak\n    homepage: https://github.com/peak/s5cmd\n    license: MIT\n    maintainer: Peak <packaging@peak.com>\n    description: |-\n      Very fast S3 and local filesystem execution tool. It comes with support\n      for a multitude of operations including tab completion and wildcard\n      support for files, which can be very handy for your object storage\n      workflow while working with large number of files.\n    formats:\n      - deb\n\nrelease:\n  draft: true\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 23.9599609375,
          "content": "# Changelog\n## v2.3.0 - 16 Dec 2024\n\n#### Breaking changes\n- Changed the exit code from 1 to 0 for `ls` when used with an empty bucket. Exits with 1 if the bucket is non-existent. ([#722](https://github.com/peak/s5cmd/issues/722)) [@Z9n2JktHlZDmlhSvqc9X2MmL3BwQG7tk](https://github.com/Z9n2JktHlZDmlhSvqc9X2MmL3BwQG7tk)\n\n#### Features\n- Added prefix and wildcard support to `cat` command. ([#716](https://github.com/peak/s5cmd/issues/716)) [@occasionallydavid](https://github.com/occasionallydavid)\n- Added `head` command. ([#682](https://github.com/peak/s5cmd/issues/682)) [@yitzhaklevi](https://github.com/yitzhaklevi)\n- Added go 1.22 support. ([#764](https://github.com/peak/s5cmd/pull/764)) [@lizzzcai](https://github.com/lizzzcai)\n- Added `meta-directive` flag to `cp` command. ([#666](https://github.com/peak/s5cmd/issues/666) [#711](https://github.com/peak/s5cmd/issues/711)) [@GordonGustafson](https://github.com/GordonGustafson) [@arosu](https://github.com/arosu)\n\n#### Improvements\n- Upgraded alpine base image to 3.18. ([#661](https://github.com/peak/s5cmd/pull/661)) [@embik](https://github.com/embik)\n- Upgraded aws-sdk-go to v1.44.298. ([#684](https://github.com/peak/s5cmd/pull/684)) [@matan129](https://github.com/matan129)\n- Upgraded lanrat/extsort to v1.0.2 ([#717](https://github.com/peak/s5cmd/issues/717)) [@gkowarzyk](https://github.com/gkowarzyk)\n- Changed signaling channels by replacing `chan bool` with `chan struct{}` for efficiency. ([#733](https://github.com/peak/s5cmd/pull/733))\n\n#### Bugfixes\n- Fixed the `cp` command to work with the `--content-type` flag when performing a copy operation from S3 to S3. ([#738](https://github.com/peak/s5cmd/issues/738))\n- Fixed a bug in `sync` command where objects in Glacier storage at the destination were being overwritten during synchronization ([#712](https://github.com/peak/s5cmd/issues/712)) [@stevenmcastano](https://github.com/stevenmcastano)\n- Fixed a bug in `sync` command where source objects with absolute paths failed to match destination paths, causing unnecessary copying during each sync operation.([#676](https://github.com/peak/s5cmd/issues/676)) [@bounlu](https://github.com/bounlu)\n\n## v2.2.2 - 13 Sep 2023\n\n#### Bugfixes\n- Fixed `cp` and `pipe` to not omit some of the metadata flags. ([#657](https://github.com/peak/s5cmd/issues/657))\n## v2.2.1 - 23 Aug 2023\n\n#### Bugfixes\n- Fixed incorrect `s5cmd version` output ([#650](https://github.com/peak/s5cmd/pull/650))\n## v2.2.0 - 21 Aug 2023\n\n#### Features\n- Added `pipe` command. ([#182](https://github.com/peak/s5cmd/issues/182))\n- Added `presign` command. ([#634](https://github.com/peak/s5cmd/pull/634)) [@zemul](https://github.com/zemul)\n- Added file types to `select` queries with more range of options to set during the query. ([#494](https://github.com/peak/s5cmd/issues/494))\n- Added `--content-disposition` flag to `cp` command. ([#569](https://github.com/peak/s5cmd/issues/569))\n- Added `--show-fullpath` flag to `ls` command. ([#596](https://github.com/peak/s5cmd/issues/596))\n- Added `--show-progress` flag to `cp` command. ([#51](https://github.com/peak/s5cmd/issues/51))\n- Added `--metadata` flag to `cp` and `pipe` commands to set arbitrary metadata for the objects. ([#537](https://github.com/peak/s5cmd/issues/537))\n- Added `--include` flag to `cp`, `rm`, and `sync` commands. ([#516](https://github.com/peak/s5cmd/issues/516))\n- Added `--content-disposition` flag to `cp` command. ([#569](https://github.com/peak/s5cmd/issues/569))\n\n\n#### Improvements\n- Implemented concurrent multipart download support for `cat` command. ([#245](https://github.com/peak/s5cmd/issues/245))\n- Upgraded minimum required Go version to 1.19. ([#583](https://github.com/peak/s5cmd/pull/583))\n- `ListObjectsV2` S3 API is enabled for Google Cloud Storage. ([#617](https://github.com/peak/s5cmd/pull/617))\n- Added installation instructions for FreeBSD. ([#573](https://github.com/peak/s5cmd/pull/573)) [@ehaupt](https://github.com/ehaupt)\n- Added `ppc64le` support. ([#552](https://github.com/peak/s5cmd/pull/552)) [@mgiessing](https://github.com/mgiessing)\n\n#### Bugfixes\n- Fixed a bug that causes `sync` command with whitespaced flag value to fail. ([#541](https://github.com/peak/s5cmd/issues/541)) [ataberkgrl](https://github.com/ataberkgrl)\n- Fixed a bug introduced with `external sort` support in `sync` command which prevents `sync` to an empty destination with `--delete` option. ([#576](https://github.com/peak/s5cmd/issues/576))\n- Fixed a bug in `sync` command, which previously caused the command to continue running even if an error was received from the destination bucket. ([#564](https://github.com/peak/s5cmd/issues/564))\n- Fixed a bug that causes local files to be lost if downloads fail. ([#479](https://github.com/peak/s5cmd/issues/479))\n- Fixed a bug where `cp` command could not upload a non-regular file to remote destination. ([#618](https://github.com/peak/s5cmd/pull/618))\n- Fixed a crash where a file or a remote object is removed or renamed after it is listed to be operated on. ([#620](https://github.com/peak/s5cmd/pull/620))\n\n## v2.1.0 - 19 Jun 2023\n\n#### Breaking changes\n- Adjacent slashes in key are no longer removed when uploading to remote. Before `s5cmd cp file.txt s3://bucket/a//b///c/` would copy to `s3://bucket/a/b/c/file.txt` but now to `s3://bucket/a//b///c/file.txt`.([#459](https://github.com/peak/s5cmd/pull/459))\n- `--endpoint-url` will not accept URLs without scheme such as `example.com`. Instead, it will give an error and ask for an url with a scheme; either `http://example.com` or `https://example.com` ([#496](https://github.com/peak/s5cmd/pull/496)).\n\n#### Features\n- Added `--content-type` and `--content-encoding` flags to `cp` command. ([#264](https://github.com/peak/s5cmd/issues/264))\n- Added `--profile` flag to allow users to specify a [named profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html). ([#353](https://github.com/peak/s5cmd/issues/353))\n- Added `--credentials-file` flag to allow users to specify path for the AWS credentials file instead of using the [default location](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html#cli-configure-files-where).\n- Added `--all-versions` flag to `ls`, `rm`, `du` and `select` subcommands to apply operation on(/over) all versions of the objects. ([#475](https://github.com/peak/s5cmd/pull/475))\n- Added `--version-id` flag to `cat`, `cp`/`mv`, `rm`, `du`  and `select` subcommands to apply operation on(/over) a specific versions of the object. ([#475](https://github.com/peak/s5cmd/pull/475))\n- Added `bucket-version` command to configure bucket versioning. Bucket name alone returns the bucket versioning status of the bucket. Bucket versioning can be configured with `set` flag. ([#475](https://github.com/peak/s5cmd/pull/475))\n- Added `--raw` flag to `cat` and `select` subcommands. It disables the wildcard operations. ([#475](https://github.com/peak/s5cmd/pull/475))\n- Added `bench.py` script under new `benchmark` folder to compare performances of two different builds of s5cmd. ([#471](https://github.com/peak/s5cmd/pull/471))\n\n#### Improvements\n- Disable AWS SDK logger if log level is not `trace`. ([#460](https://github.com/peak/s5cmd/pull/460))\n- Allow adjacent slashes to be used as keys when uploading to remote. ([#459](https://github.com/peak/s5cmd/pull/459))\n- Debian packages are provided on [releases page](https://github.com/peak/s5cmd/releases) ([#380](https://github.com/peak/s5cmd/issues/380))\n- Upgraded minimum required Go version to 1.17.\n- The sync command uses `external sort` instead of `internal` sort. This change\n reduces RAM usage from ~10 GB to ~1.5 GB for `sync` operation of a directory containing\n 1,000,000 files at a cost of speed (20% slower for 1,000,000 objects). For smaller\n directories (~50,000 files) there is no significant change in speed.  ([#483](https://github.com/peak/s5cmd/pull/483))\n- Improve auto-completion support of s5cmd for `zsh` and `bash`, start supporting `pwsh` and stop the support for `fish`. Now s5cmd can complete bucket names, s3 keys in a bucket and the local files. However, `install-completion` flag no longer _installs_ the completion script to `*rc` files instead it merely gives instructions to install autocompletion and provides the autocompletion script ([#500](https://github.com/peak/s5cmd/pull/500)).\n\n#### Bugfixes\n- Fixed a bug where (`--stat`) prints unnecessarily when used with help and version commands ([#452](https://github.com/peak/s5cmd/issues/452))\n- Changed cp error message to be more precise. \"given object not found\" error message now will also include absolute path of the file. ([#463](https://github.com/peak/s5cmd/pull/463))\n- Fixed a bug where some part of the destination path is removed by `cp` and `sync` subcommands ([#360](https://github.com/peak/s5cmd/issues/360))\n- Fixed a bug where proxy is not being used when `--no-verify-ssl` flag is used. ([#445](https://github.com/peak/s5cmd/issues/445))\n- Fixed `unknown url format` error when object key also includes `s3://` e.g. `s5cmd ls s3://foo/bar/s3://baz` ([#449](https://github.com/peak/s5cmd/issues/449))\n- Fixed a bug where the local file created for the download operation was not deleted if the download fails in Windows. ([#348](https://github.com/peak/s5cmd/issues/348))\n\n## v2.0.0 - 4 Jul 2022\n\n#### Breaking changes\n- Dropped inline comment feature for `run` command. Previously s5cmd supported a command with an inline comment like `ls s3://bucket/object.gz  # inline comment`. ([#309](https://github.com/peak/s5cmd/issues/309))\n- Changed homebrew installation command on macOS. Users can install s5cmd via `brew install peak/tap/s5cmd`. ([#356](https://github.com/peak/s5cmd/issues/356))\n- Print usage errors to stderr instead of stdout and do not show help text on usage error. ([#399](https://github.com/peak/s5cmd/issues/399))\n- Working directory of the Docker image changed to `/aws` from `/`. ([#412](https://github.com/peak/s5cmd/pull/412))\n\n#### Features\n- Added `sync` command to synchronize two given buckets, prefixes, or objects. ([#3](https://github.com/peak/s5cmd/issues/3))\n- Added AWS Single Sign-On (SSO) profiles support. ([#385](https://github.com/peak/s5cmd/issues/385))\n- Added `--force-glacier-transfer` flag to `select` command. ([#346](https://github.com/peak/s5cmd/issues/346))\n- Added `--ignore-glacier-warnings` flag to `cp`, `mv` and `select` commands. ([#346](https://github.com/peak/s5cmd/issues/346))\n- Added `--request-payer` flag to include `x-amz-request-payer` in header while sending GET, POST and HEAD requests. ([#297](https://github.com/peak/s5cmd/issues/297)) [@Kirill888](https://github.com/Kirill888)\n- Added `--use-list-objects-v1` flag to force using S3 ListObjects API instead of ListObjectsV2 API. ([#405](https://github.com/peak/s5cmd/issues/405)) [@greenpau](https://github.com/greenpau)\n- Added trace log level(`--log=trace`) which enables SDK debug logs.([#363](https://github.com/peak/s5cmd/issues/363))\n\n#### Improvements\n- Upgraded minimum required Go version to 1.16.\n\n#### Bugfixes\n- Fixed a bug about precedence of region detection, which auto region detection would always override region defined in environment or profile. ([#325](https://github.com/peak/s5cmd/issues/325))\n- Fixed a bug where errors did not result a non-zero exit code. ([#304](https://github.com/peak/s5cmd/issues/304))\n- Print error if the commands file of `run` command is not accessible. ([#410](https://github.com/peak/s5cmd/pull/410))\n- Updated region detection call to use current session's address resolving method ([#314](https://github.com/peak/s5cmd/issues/314))\n- Fixed a bug where lines with large tokens fail in `run` command. `sync` was failing when it finds multiple files to remove. ([#435](https://github.com/peak/s5cmd/issues/435), [#436](https://github.com/peak/s5cmd/issues/436))\n- Print usage error if given log level(`--log`) is not valid. ([#430](https://github.com/peak/s5cmd/pull/430))\n- Fixed a bug where (`--stat`) is ignored when log level is error. ([#359](https://github.com/peak/s5cmd/issues/359))\n\n## v1.4.0 - 21 Sep 2021\n\n#### Features\n\n- Added `select` command. It allows to select JSON records from objects using SQL expressions. ([#299](https://github.com/peak/s5cmd/issues/299)) [@skeggse](https://github.com/skeggse)\n- Added `rb` command to remove buckets. ([#303](https://github.com/peak/s5cmd/issues/303))\n- Added `--exclude` flag to `cp`, `rm`, `ls`, `du` and `select` commands. This flag allows users to exclude objects with given pattern. ([#266](https://github.com/peak/s5cmd/issues/266))\n- Added `--raw` flag to `cp` and `rm` commands. It disables the wildcard operations. It is useful when an object contains glob characters which interfers with glob expansion logic. ([#235](https://github.com/peak/s5cmd/issues/235))\n- Added `--cache-control` and `--expires` flags to `cp` and `mv` commands. It adds support for setting cache control and expires header to S3 objects. ([#318](https://github.com/peak/s5cmd/pull/318)) [@tombokombo](https://github.com/tombokombo)\n- Added `--force-glacier-transfer` flag to `cp` command. It forces a transfer request on all Glacier objects. ([#206](https://github.com/peak/s5cmd/issues/206))\n- Added `--source-region` and `destination-region` flags to `cp` command. It allows overriding bucket region. ([#262](https://github.com/peak/s5cmd/issues/262)) [@kemege](https://github.com/kemege)\n\n#### Improvements\n\n- Added `MacPorts` installation option. ([#311](https://github.com/peak/s5cmd/pull/311)) [@manojkarthick](https://github.com/manojkarthick)\n- Added `S3_ENDPOINT_URL` environment variable ([#343](https://github.com/peak/s5cmd/pull/343)) [@Dexus](https://github.com/Dexus)\n- Prevent retries if a token related error is received ([#337](https://github.com/peak/s5cmd/pull/337))\n\n#### Bugfixes\n\n- Change the order of precedence in URL expansion in file system. Glob (*) expansion have precedence over directory expansion. ([#322](https://github.com/peak/s5cmd/pull/322))\n- Fixed data race for concurrent writes for expand ([#330](https://github.com/peak/s5cmd/pull/330))\n- Fixed concurrent writes to the flags list of run command ([#335](https://github.com/peak/s5cmd/pull/335))\n- Fixed options usage on mv command ([#338](https://github.com/peak/s5cmd/pull/338))\n\n## v1.3.0 - 1 Jul 2021\n\n#### Features\n\n- Added global `--no-sign-request` flag. API requests won't be signed and credentials won't be used if this option is provided. It is useful for accessing public buckets. ([#285](https://github.com/peak/s5cmd/issues/285))\n\n#### Improvements\n\n- If retryable errors are received during command execution, users now can see what's happening under the hood. ([#261](https://github.com/peak/s5cmd/pull/261))\n- Update documentation about the AWS_PROFILE environment variable. ([#275](https://github.com/peak/s5cmd/pull/275)) [@davebiffuk](https://github.com/davebiffuk)\n\n#### Bugfixes\n\n- Fixed a bug where write-bit was required to upload a file. ([#258](https://github.com/peak/s5cmd/issues/258))\n- Fixed a bug where object could not be found if S3 key contains certain special characters. ([#279](https://github.com/peak/s5cmd/issues/279)) [@khacminh](https://github.com/khacminh)\n- `s5cmd` exits with code `1` if given command is not found. It was `0` before. ([#295](https://github.com/peak/s5cmd/issues/295))\n\n\n## v1.2.1 - 3 Dec 2020\n\n#### Improvements\n\n- Statically link `s5cmd` in Docker image ([#250](https://github.com/peak/s5cmd/issues/250))\n\n#### Bugfixes\n\n- Fixed a bug where HeadBucket request fails during region information retrieval. ([#251](https://github.com/peak/s5cmd/issues/251), [#252](https://github.com/peak/s5cmd/issues/252))\n\n\n## v1.2.0 - 5 Nov 2020\n\nWith this release, `s5cmd` automatically determines region information of destination buckets.\n\n#### Features\n\n- Added global `--dry-run` option. It displays which command(s) will be executed without actually having a side effect. ([#90](https://github.com/peak/s5cmd/issues/90))\n- Added `--stat` option for `s5cmd` and it displays program execution statistics before the end of the program output. ([#148](https://github.com/peak/s5cmd/issues/148))\n- Added cross-region transfer support. Bucket regions are inferred, thus, supporting cross-region transfers and multiple regions in batch mode. ([#155](https://github.com/peak/s5cmd/issues/155))\n\n#### Bugfixes\n\n- Fixed incorrect MIME type inference for `cp`, give priority to file extension for type inference. ([#214](https://github.com/peak/s5cmd/issues/214))\n- Fixed error reporting issue, where some errors from the `ls` operation were not printed.\n\n#### Improvements\n\n- Requests to different buckets not allowed in `rm` batch operation, i.e., throw an error.\n- AWS S3 `RequestTimeTooSkewed` request error was not retryable before, it is now. ([205](https://github.com/peak/s5cmd/issues/205))\n- For some operations errors were printed at the end of the program execution. Now, errors are displayed immediately after being detected. ([#136](https://github.com/peak/s5cmd/issues/136))\n- From now on, docker images will be published on Docker Hub. ([#238](https://github.com/peak/s5cmd/issues/238))\n- Changed misleading 'mirroring' examples in the help text of `cp`. ([#213](https://github.com/peak/s5cmd/issues/213))\n\n\n## v1.1.0 - 22 Jul 2020\n\nWith this release, Windows is supported.\n\n#### Breaking changes\n\n- Dropped storage class short codes display from default behaviour of `ls` operation. Instead, use `-s` flag with `ls`\nto see full names of the storage classes when listing objects.\n\n\n#### Features\n\n- Added Server-side Encryption (SSE) support for mv/cp operations. It uses customer master keys (CMKs) managed by AWS Key Management Service. ([#18](https://github.com/peak/s5cmd/issues/18))\n- Added an option to show full form of [storage class](https://aws.amazon.com/s3/storage-classes/) when listing objects. ([#165](https://github.com/peak/s5cmd/issues/165))\n- Add [access control lists (ACLs)](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html)\nsupport to enable managing access to buckets and objects. ([#26](https://github.com/peak/s5cmd/issues/26))\n\n\n#### Bugfixes\n\n- Fixed infinite repetition issue on mv/cp operations which would occur\n if the destination matched the source wildcard. ([#168](https://github.com/peak/s5cmd/issues/168))\n- Fixed windows filepath issue, where backslashes should be treated as the path delimiter. ([#178](https://github.com/peak/s5cmd/issues/178))\n- All tests pass on windows, by converting and treating file paths to UNIX filepath format.\n- Fixed a transfer issue where the object path contains particular regex metacharacters. ([#111](https://github.com/peak/s5cmd/pull/111)) [@brendan-matroid](https://github.com/brendan-matroid)\n- Correctly parse object paths that contain whitespaces in run-mode. ([#111](https://github.com/peak/s5cmd/pull/111)) [@brendan-matroid](https://github.com/brendan-matroid)\n\n\n#### Improvements\n\n- Retry when connection closed by S3 unexpectedly. ([#189](https://github.com/peak/s5cmd/pull/189)) [@eminugurkenar](https://github.com/eminugurkenar)\n\n## v1.0.0 - 1 Apr 2020\n\nThis is a major release with many breaking changes.\n\n#### Breaking changes\n\n- Dropped `get` command. Users could get the same effect with `s5cmd cp <src> .`.\n- Dropped `nested command` support.\n- Dropped `!` command. It was used to execute shell commands and was used in\n  conjunction with nested commands.\n- `s5cmd -f` and `s5cmd -f -` usage has changed to `s5cmd run`. `run` command\n  accepts a file. If not provided, it'll listen for commands from stdin.\n- Exit code for errors was `127`. It is `1` now.\n- Dropped `exit` command. It was used to change the shell exit code and usually\n  a part of the nested command usage.\n- Dropped local->local copy and move support. ([#118](https://github.com/peak/s5cmd/issues/118))\n- All error messages are sent to stderr now.\n- `-version` flag is changed to `version` command.\n- Dropped `batch-rm` command. It was not listed in the help output. Now that we\n  support variadic arguments, users can remove multiple objects by providing\n  wildcards or multiple arguments to `s5cmd rm` command. ([#106](https://github.com/peak/s5cmd/pull/106))\n- [Virtual host style bucket name\n  resolving](https://aws.amazon.com/blogs/aws/amazon-s3-path-deprecation-plan-the-rest-of-the-story/)\n  is enabled by default for S3 and GCS. If you provide a custom endpoint via\n  `--endpoint-url` flag (other than GCS and S3 transfer acceleration), `s5cmd`\n  will fall back to the `path-style`. ([#92](https://github.com/peak/s5cmd/pull/92))\n- Listing a non-existent object will return exit code `1`, instead of `0`. ([#23](https://github.com/peak/s5cmd/issues/23))\n- `-ds`, `-dw`, `-us` and `-uw` global flags are no longer available. Multipart\n  concurrency and part size flags are now part of the `cp/mv` command. New\n  replacement flags are `--concurrency | -c` and `--part-size | -p`. ([#110](https://github.com/peak/s5cmd/pull/110))\n- s5cmd `cp` command follows symbolic links by default (only when uploading to\n  s3 from local filesystem). Use `--no-follow-symlinks` flag to disable this\n  feature. ([#17](https://github.com/peak/s5cmd/issues/17))\n- Dropped `-parents` flag from copy command. Copy behaviour has changed to\n  preserve the directory hierarchy as a default. Optional `-flatten` flag is\n  added to flatten directory structure. ([#107](https://github.com/peak/s5cmd/issues/107))\n- Dropped `-vv` verbosity flag. `--log` flag is introduced.\n\n#### Features\n\n- Added `mb` command to make buckets. ([#25](https://github.com/peak/s5cmd/issues/25))\n- Added `--json` flag for JSON logging. ([#22](https://github.com/peak/s5cmd/issues/22))\n- Added [S3 transfer acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) support. ([#40](https://github.com/peak/s5cmd/issues/40))\n- Added [Google Cloud Storage](https://github.com/peak/s5cmd#google-cloud-storage-support) support. ([#81](https://github.com/peak/s5cmd/issues/81))\n- Added `cat` command to print remote object contents to stdout ([#20](https://github.com/peak/s5cmd/issues/20))\n\n#### Bugfixes\n\n- Correctly set `Content-Type` of a file on upload operations. ([#33](https://github.com/peak/s5cmd/issues/33))\n- Fixed a bug where workers are unable to consume job if there are too many\n  outstanding wildcard expansion requests. ([#12](https://github.com/peak/s5cmd/issues/12), [#58](https://github.com/peak/s5cmd/issues/58))\n\n#### Improvements\n\n- Pre-compiled binaries are provided on [releases page](https://github.com/peak/s5cmd/releases) ([#21](https://github.com/peak/s5cmd/issues/21))\n- AWS Go SDK is updated to support IAM role for service accounts. ([#32](https://github.com/peak/s5cmd/issues/32))\n- For copy/move operations, `s5cmd` now creates destination directory if missing.\n- Increase the soft limit of open files to 1000 and exits immediately when it encounters `too many open files` error. ([#52](https://github.com/peak/s5cmd/issues/52))\n\n## v0.7.0 - 27 Jan 2020\n\n- Use go modules.\n- Update minimum required Go version to 1.13.\n\n## v0.6.2 - 24 Jan 2020\n\n- Fix bug in brew install.\n- Update travis configuration.\n\n## v0.6.1 - 9 Jan 2020\n\n- Integrate Travis CI.\n- Add option to disable SSL verification.\n- Add endpoint url flag to support S3 compatible services.\n- Use client's endpoint in GetSessionForBucket.\n- Upgrade minimum required Go version to 1.7.\n\n## v0.6.0 - 30 Mar 2018\n\n- Use 50mb chunks by default.\n- Add human-readable output option -H.\n- Implement \"command -h\".\n\n## v0.5.8 - 15 Mar 2018\n\n- Refactor retryable error handling.\n- Autodetect bucket region in command completion.\n- Add HomeBrew formula.\n\n## v0.5.7 - 16 Aug 2017\n\n- Add -s and -u options to overwrite files if sizes differ or files are lastly modified.\n- Use constructor for *JobArgument.\n\n## v0.5.6 - 15 Jun 2017\n\n- Add -dlw, -dlp and -ulw configuration options for worker pool.\n\n## v0.5.5 - 29 May 2017\n- Fix get/cp without 2nd param or exact destination filename.\n\n## v0.5.4 - 23 May 2017\n\n- Implement shell auto completion.\n- Add context support for batch AWS requests.\n- Implement \"s5cmd get\".\n- Reduce idle-timer values.\n- Add option -vv to log parser errors verbosely.\n- Implement \"du -g\" to group by storage class.\n\n## v0.5.3 - 9 Mar 2017\n\n- Use Go bool type instead of aws.Bool on recoverer.\n\n## v0.5.2 - 9 Mar 2017\n\n- Make RequestError retryable.\n\n## v0.5.1 - 8 Mar 2017\n\n- Implement verbose output (-vv flag).\n- Add godoc for error types.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0703125,
          "content": "# Contributing to `s5cmd`\n\nA big welcome 👋 and thank you for considering contributing to `s5cmd` open source project.\n\n  1. [About this document](#about-this-document)\n  2. [Getting the code](#getting-the-code)\n  3. [Testing](#testing)\n  4. [Submitting a Pull Request](#submitting-a-pull-request)\n\n\n## About this document\n\nThis document is a guide for developers interested in contributing to `s5cmd`.\n\n## Getting the code\n\nTo download the source code of `s5cmd` you will need `git`. There are multiple ways of installing `git` depending on your operating system. This [document](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) is a good starting point if you don't have `git` installed already.\n\nBefore proposing a change you first need to fork the `s5cmd` Github repository. For a detailed overview on forking, please take a look at the [Github documentation on forking](https://docs.github.com/en/get-started/quickstart/fork-a-repo). In short you need to:\n - fork the `peak/s5cmd` repository\n - clone your fork to your local development environment\n - checkout a new git branch for your proposed changes\n - push changes to your fork\n - open a pull request to `peak/s5cmd`\n\n\n## Testing\n\n### Running the tests\n\n`s5cmd` has both unit tests and integration tests. Unit tests are used to verify the correctness of units (ie functions), integration tests are used to prevent regressions.\n\nWhile running integration tests `s5cmd` is built and is ran against a fake (in memory) s3 implementation.\n\nWe strongly encourage you to write tests for your proposed changes. You can run the tests with the following command:\n\n```\nmake test\n```\n\n### Running static code analysis tools\n\nHere are the list of tools that are used to check the sanity of the code at compile time:\n - [go vet](https://pkg.go.dev/cmd/vet) \n - [gofmt](https://blog.golang.org/gofmt) go code formatter\n - [staticcheck](https://staticcheck.io/) go linter\n - [unparam](https://github.com/mvdan/unparam) finds unused parameters\n\n`make check` command runs all the checks.\n\n### Performance\n\nWhile adding your changes and testing your changes, it would be good to remember that `s5cmd`'s goal is to be the fastest s3 client with a rich set of functionality. Here are some important things to keep in mind:\n\n- Avoid making unnecessary s3 api calls.\n- If your workload can be made faster by concurrent execution of several tasks use concurrency constructs.\n\n\n## Submitting a Pull Request\n\nOnce you add your changes and all the tests/checks pass, you can submit your pull request to the `peak/s5cmd` repository. Github will trigger automated tests in Github Actions. All tests and checks will be run on different operating systems including `linux`, `macos` and `windows`. \n\nAn `s5cmd` maintainer will review your pull request. They may suggest updates for clarity and style, or request additional unit or integration tests. \n\nOnce all the tests are green and your pull request has been approved, an `s5cmd` maintainer will merge your changes into the `master` branch. And your changes will be released with the next release of `s5cmd`.\n\nThat's it. \n\n🎉 Happy coding! 🎉\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.21484375,
          "content": "FROM golang:1.22-alpine AS build\nCOPY . /s5cmd/\nRUN apk add --no-cache git make && \\\n    cd /s5cmd/ && \\\n    CGO_ENABLED=0 make build\n\nFROM alpine:3.20\nCOPY --from=build /s5cmd/s5cmd .\nWORKDIR /aws\nENTRYPOINT [\"/s5cmd\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "MIT License\n\nCopyright (c) 2020 Peak\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.02734375,
          "content": "default: all\n\n.PHONY: all\nall: clean build check test\n\nVERSION := `git describe --abbrev=0 --tags || echo \"0.0.0\"`\nBUILD := `git rev-parse --short HEAD`\nLDFLAGS=-ldflags \"-X=github.com/peak/s5cmd/v2/version.Version=$(VERSION) -X=github.com/peak/s5cmd/v2/version.GitCommit=$(BUILD)\"\n\nTEST_TYPE:=test_with_race\nifeq ($(OS),Windows_NT)\n\tTEST_TYPE=test_without_race\nendif\n\nsemgrep ?= -\nifeq (,$(shell which semgrep))\n\tsemgrep=echo \"-- Running inside Docker --\"; docker run --rm -v $$(pwd):/src returntocorp/semgrep:1.65.0 semgrep\nelse\n\tsemgrep=semgrep\nendif\n\n.PHONY: build\nbuild:\n\t@go build ${GCFLAGS} ${LDFLAGS} -mod=vendor .\n\n.PHONY: test\ntest: $(TEST_TYPE)\n\n.PHONY: test_with_race\ntest_with_race:\n\t@S5CMD_BUILD_BINARY_WITHOUT_RACE_FLAG=0 go test -mod=vendor -count=1 -race ./...\n\n.PHONY: test_without_race\ntest_without_race:\n\t@S5CMD_BUILD_BINARY_WITHOUT_RACE_FLAG=1 go test -mod=vendor -count=1 ./...\n\n##@ Bootstrap\n# See following issues for why errors are ignored with `-e` flag:\n# \t* https://github.com/golang/go/issues/61857\n# \t* https://github.com/golang/go/issues/59186\n.PHONY: bootstrap\nbootstrap: ## Install tooling\n\t@go install $$(go list -e -f '{{join .Imports \" \"}}' ./internal/tools/tools.go)\n\n.PHONY: check\ncheck: vet staticcheck unparam semgrep check-fmt check-codegen check-gomod\n\n.PHONY: staticcheck\nstaticcheck:\n\t@staticcheck -checks 'all,-ST1000' ./...\n\n.PHONY: unparam\nunparam:\n\t@unparam ./...\n\n.PHONY: semgrep\nsemgrep: ## Run semgrep\n\t@$(semgrep) --quiet --metrics=off --error --config=\"r/dgryski.semgrep-go\" --config .github/semgrep-rules.yaml .\n\n.PHONY: vet\nvet:\n\t@go vet -mod=vendor ./...\n\n.PHONY: check-fmt\ncheck-fmt:\n\t@if [ $$(go fmt -mod=vendor ./...) ]; then\\\n\t\techo \"Go code is not formatted\";\\\n\t\texit 1;\\\n\tfi\n\n.PHONY: check-codegen\ncheck-codegen: gogenerate ## Check generated code is up-to-date\n\t@git diff --exit-code --\n\n.PHONY: check-gomod\ncheck-gomod: ## Check go.mod file\n\t@go mod tidy\n\t@git diff --exit-code -- go.sum go.mod\n\n.PHONY: gogenerate\ngogenerate:\n\t@go generate -mod vendor ./...\n\n.PHONY: clean\nclean:\n\t@rm -f ./s5cmd\n\n.NOTPARALLEL:\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.2490234375,
          "content": "[![Go Report](https://goreportcard.com/badge/github.com/peak/s5cmd/v2)](https://goreportcard.com/report/github.com/peak/s5cmd/v2) ![Github Actions Status](https://github.com/peak/s5cmd/actions/workflows/ci.yml/badge.svg)\n\n![](./doc/s5cmd_header.jpg)\n\n\n## Overview\n`s5cmd` is a very fast S3 and local filesystem execution tool. It comes with support\nfor a multitude of operations including tab completion and wildcard support\nfor files, which can be very handy for your object storage workflow while working\nwith large number of files.\n\nThere are already other utilities to work with S3 and similar object storage\nservices, thus it is natural to wonder what `s5cmd` has to offer that others don't.\n\nIn short, *`s5cmd` offers a very fast speed.*\nThanks to [Joshua Robinson](https://github.com/joshuarobinson) for his\nstudy and experimentation on `s5cmd;` to quote his medium [post](https://medium.com/@joshua_robinson/s5cmd-for-high-performance-object-storage-7071352cc09d):\n> For uploads, s5cmd is 32x faster than s3cmd and 12x faster than aws-cli.\n>For downloads, s5cmd can saturate a 40Gbps link (~4.3 GB/s), whereas s3cmd\n>and aws-cli can only reach 85 MB/s and 375 MB/s respectively.\n\nIf you would like to know more about performance of `s5cmd` and the\nreasons for its fast speed, refer to [benchmarks](./README.md#Benchmarks) section\n## Features\n![](./doc/usage.png)\n\n`s5cmd` supports wide range of object management tasks both for cloud\nstorage services and local filesystems.\n\n- List buckets and objects\n- Upload, download or delete objects\n- Move, copy or rename objects\n- Set Server Side Encryption using AWS Key Management Service (KMS)\n- Set Access Control List (ACL) for objects/files on the upload, copy, move.\n- Print object contents to stdout\n- Select JSON records from objects using SQL expressions\n- Create or remove buckets\n- Summarize objects sizes, grouping by storage class\n- Wildcard support for all operations\n- Multiple arguments support for delete operation\n- Command file support to run commands in batches at very high execution speeds\n- Dry run support\n- [S3 Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) support\n- Google Cloud Storage (and any other S3 API compatible service) support\n- Structured logging for querying command outputs\n- Shell auto-completion\n- S3 ListObjects API backward compatibility\n\n## Installation\n\n### Official Releases\n\n#### Binaries\n\nThe [Releases](https://github.com/peak/s5cmd/releases) page provides pre-built\nbinaries for Linux, macOS and Windows.\n\n#### Homebrew\n\nFor macOS, a [homebrew](https://brew.sh) tap is provided:\n\n    brew install peak/tap/s5cmd\n\n### Unofficial Releases (by Community)\n[![Packaging status](https://repology.org/badge/tiny-repos/s5cmd.svg)](https://repology.org/project/s5cmd/versions)\n> **Warning**\n> These releases are maintained by the community. They might be out of date compared to the official releases.\n\n#### MacPorts\nYou can also install `s5cmd` from [MacPorts](https://ports.macports.org/port/s5cmd/summary) on macOS:\n\n    sudo port selfupdate\n    sudo port install s5cmd\n\n#### Conda\n`s5cmd` is [included](https://anaconda.org/conda-forge/s5cmd ) in the [conda-forge]( https://conda-forge.org ) channel, and it can be downloaded through the [Conda](https://docs.conda.io/).\n\n> Installing `s5cmd` from the `conda-forge` channel can be achieved by adding `conda-forge` to your channels with:\n> ```\n> conda config --add channels conda-forge\n> conda config --set channel_priority strict\n> ```\n> \n> Once the `conda-forge` channel has been enabled, `s5cmd` can be installed with `conda`:\n> \n> ```\n> conda install s5cmd\n> ```\nps.  Quoted from [s5cmd feedstock](https://github.com/conda-forge/s5cmd-feedstock). You can also find further instructions on its [README](https://github.com/conda-forge/s5cmd-feedstock/blob/main/README.md).\n\n#### FreeBSD\n\nOn FreeBSD you can install s5cmd as a package:\n\n```\npkg install s5cmd\n```\n\nor via ports:\n\n```\ncd /usr/ports/net/s5cmd\nmake install clean\n```\n\n### Build from source\n\nYou can build `s5cmd` from source if you have [Go](https://golang.org/dl/) 1.19+\ninstalled.\n\n    go install github.com/peak/s5cmd/v2@master\n\n⚠️ Please note that building from `master` is not guaranteed to be stable since\ndevelopment happens on `master` branch.\n\n### Docker\n\n#### Hub\n    $ docker pull peakcom/s5cmd\n    $ docker run --rm -v ~/.aws:/root/.aws peakcom/s5cmd <S3 operation>\n\nℹ️ `/aws` directory is the working directory of the image. Mounting your current working directory to it allows you to run `s5cmd` as if it was installed in your system;\n\n    docker run --rm -v $(pwd):/aws -v ~/.aws:/root/.aws peakcom/s5cmd <S3 operation>\n\n#### Build\n    $ git clone https://github.com/peak/s5cmd && cd s5cmd\n    $ docker build -t s5cmd .\n    $ docker run --rm -v ~/.aws:/root/.aws s5cmd <S3 operation>\n\n## Usage\n\n`s5cmd` supports multiple-level wildcards for all S3 operations. This is\nachieved by listing all S3 objects with the prefix up to the first wildcard,\nthen filtering the results in-memory. For example, for the following command;\n\n    s5cmd cp 's3://bucket/logs/2020/03/*' .\n\nfirst a `ListObjects` request is send, then the copy operation will be executed\nagainst each matching object, in parallel.\n\n\n### Specifying credentials\n\n`s5cmd` uses official AWS SDK to access S3. SDK requires credentials to sign\nrequests to AWS. Credentials can be provided in a [variety of ways](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html):\n\n- Command line options `--profile` to use a named profile, `--credentials-file` flag to use the specified credentials file\n\n    ```sh\n    # Use your company profile in AWS default credential file\n    s5cmd --profile my-work-profile ls s3://my-company-bucket/\n\n    # Use your company profile in your own credential file\n    s5cmd --credentials-file ~/.your-credentials-file --profile my-work-profile ls s3://my-company-bucket/\n    ```\n\n- Environment variables\n\n    ```sh\n    # Export your AWS access key and secret pair\n    export AWS_ACCESS_KEY_ID='<your-access-key-id>'\n    export AWS_SECRET_ACCESS_KEY='<your-secret-access-key>'\n    export AWS_PROFILE='<your-profile-name>'\n    export AWS_REGION='<your-bucket-region>'\n\n    s5cmd ls s3://your-bucket/\n    ```\n\n- If `s5cmd` runs on an Amazon EC2 instance, EC2 IAM role\n- If `s5cmd` runs on EKS, Kube IAM role\n- Or, you can send requests anonymously with `--no-sign-request` option\n\n    ```sh\n    # List objects in a public bucket\n    s5cmd --no-sign-request ls s3://public-bucket/\n    ```\n\n### Region detection\n\nWhile executing the commands, `s5cmd` detects the region according to the following order of priority:\n\n1. `--source-region` or `--destination-region` flags of `cp` command.\n2. `AWS_REGION` environment variable.\n3. Region section of AWS profile.\n4. Auto detection from bucket region (via `HeadBucket` API call).\n5. `us-east-1` as default region.\n\n### Examples\n\n#### Check if a bucket exists\n\n    s5cmd head s3://bucket/\n\n#### Print a remote object's metadata\n\n    s5cmd head s3://bucket/object.gz\n\n#### Download a single S3 object\n\n    s5cmd cp s3://bucket/object.gz .\n\n#### Download multiple S3 objects\n\nSuppose we have the following objects:\n```\ns3://bucket/logs/2020/03/18/file1.gz\ns3://bucket/logs/2020/03/19/file2.gz\ns3://bucket/logs/2020/03/19/originals/file3.gz\n```\n\n    s5cmd cp 's3://bucket/logs/2020/03/*' logs/\n\n\n`s5cmd` will match the given wildcards and arguments by doing an efficient\nsearch against the given prefixes. All matching objects will be downloaded in\nparallel. `s5cmd` will create the destination directory if it is missing.\n\n`logs/` directory content will look like:\n\n```\n$ tree\n.\n└── logs\n    ├── 18\n    │   └── file1.gz\n    └── 19\n        ├── file2.gz\n        └── originals\n            └── file3.gz\n\n4 directories, 3 files\n```\n\nℹ️ `s5cmd` preserves the source directory structure by default. If you want to\nflatten the source directory structure, use the `--flatten` flag.\n\n    s5cmd cp --flatten 's3://bucket/logs/2020/03/*' logs/\n\n`logs/` directory content will look like:\n\n```\n$ tree\n.\n└── logs\n    ├── file1.gz\n    ├── file2.gz\n    └── file3.gz\n\n1 directory, 3 files\n```\n\n#### Upload a file to S3\n\n    s5cmd cp object.gz s3://bucket/\n\n by setting server side encryption (*aws kms*) of the file:\n\n    s5cmd cp -sse aws:kms -sse-kms-key-id <your-kms-key-id> object.gz s3://bucket/\n\n by setting Access Control List (*acl*) policy of the object:\n\n    s5cmd cp -acl bucket-owner-full-control object.gz s3://bucket/\n\n#### Upload multiple files to S3\n\n    s5cmd cp directory/ s3://bucket/\n\nWill upload all files at given directory to S3 while keeping the folder hierarchy\nof the source.\n\n#### Stream stdin to S3\nYou can upload remote objects by piping stdin to `s5cmd`:\n\n    curl https://github.com/peak/s5cmd/ | s5cmd pipe s3://bucket/s5cmd.html\n\nOr you can compress the data before uploading:\n\n    gzip -c file | s5cmd pipe s3://bucket/file.gz\n\n#### Delete an S3 object\n\n    s5cmd rm s3://bucket/logs/2020/03/18/file1.gz\n\n#### Delete multiple S3 objects\n\n    s5cmd rm s3://bucket/logs/2020/03/19/*\n\nWill remove all matching objects:\n\n```\ns3://bucket/logs/2020/03/19/file2.gz\ns3://bucket/logs/2020/03/19/originals/file3.gz\n```\n\n`s5cmd` utilizes S3 delete batch API. If matching objects are up to 1000,\nthey'll be deleted in a single request. However, it should be noted that commands such as\n\n    s5cmd rm s3://bucket-foo/object s3://bucket-bar/object\n\nare not supported by `s5cmd` and result in error (since we have 2 different buckets), as it is in odds with the benefit of performing batch delete requests. Thus, if in need, one can use `s5cmd run` mode for this case, i.e,\n\n    $ s5cmd run\n    rm s3://bucket-foo/object\n    rm s3://bucket-bar/object\n\nmore details and examples on `s5cmd run` are presented in a [later section](./README.md#L293).\n\n#### Copy objects from S3 to S3\n\n`s5cmd` supports copying objects on the server side as well.\n\n    s5cmd cp 's3://bucket/logs/2020/*' s3://bucket/logs/backup/\n\nWill copy all the matching objects to the given S3 prefix, respecting the source\nfolder hierarchy.\n\n⚠️ Copying objects (from S3 to S3) larger than 5GB is not supported yet. We have\nan [open ticket](https://github.com/peak/s5cmd/issues/29) to track the issue.\n\n#### Using Exclude and Include Filters\n`s5cmd` supports the `--exclude` and `--include` flags, which can be used to specify patterns for objects to be excluded or included in commands. \n\n- The `--exclude` flag specifies objects that should be excluded from the operation. Any object that matches the pattern will be skipped.\n- The `--include` flag specifies objects that should be included in the operation. Only objects that match the pattern will be handled.\n- If both flags are used, `--exclude` has precedence over `--include`. This means that if an object URL matches any of the `--exclude` patterns, the object will be skipped, even if it also matches one of the `--include` patterns.\n- The order of the flags does not affect the results (unlike `aws-cli`).\n\nThe command below will delete only objects that end with `.log`.\n\n    s5cmd rm --include \"*.log\" 's3://bucket/logs/2020/*'\n\nThe command below will delete all objects except those that end with `.log` or `.txt`.\n\n    s5cmd rm --exclude \"*.log\" --exclude \"*.txt\" 's3://bucket/logs/2020/*'\n\nIf you wish, you can use multiple flags, like below. It will download objects that start with `request` or end with `.log`.\n\n    s5cmd cp --include \"*.log\" --include \"request*\" 's3://bucket/logs/2020/*' .\n\nUsing a combination of `--include` and `--exclude` also possible. The command below will only sync objects that end with `.log` or `.txt` but exclude those that start with `access_`. For example, `request.log`, and `license.txt` will be included, while `access_log.txt`, and `readme.md` are excluded.\n\n    s5cmd sync --include \"*.log\" --exclude \"access_*\" --include \"*.txt\" 's3://bucket/logs/*' .\n#### Select JSON object content using SQL\n\n`s5cmd` supports the `SelectObjectContent` S3 operation, and will run your\n[SQL query](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-glacier-select-sql-reference.html)\nagainst objects matching normal wildcard syntax and emit matching JSON records via stdout. Records\nfrom multiple objects will be interleaved, and order of the records is not guaranteed (though it's\nlikely that the records from a single object will arrive in-order, even if interleaved with other\nrecords).\n\n    $ s5cmd select --compression GZIP \\\n      --query \"SELECT s.timestamp, s.hostname FROM S3Object s WHERE s.ip_address LIKE '10.%' OR s.application='unprivileged'\" \\\n      s3://bucket-foo/object/2021/*\n    {\"timestamp\":\"2021-07-08T18:24:06.665Z\",\"hostname\":\"application.internal\"}\n    {\"timestamp\":\"2021-07-08T18:24:16.095Z\",\"hostname\":\"api.github.com\"}\n\nAt the moment this operation _only_ supports JSON records selected with SQL. S3 calls this\nlines-type JSON, but it seems that it works even if the records aren't line-delineated. YMMV.\n\n#### Count objects and determine total size\n\n    $ s5cmd du --humanize 's3://bucket/2020/*'\n\n    30.8M bytes in 3 objects: s3://bucket/2020/*\n\n#### Run multiple commands in parallel\n\nThe most powerful feature of `s5cmd` is the commands file. Thousands of S3 and\nfilesystem commands are declared in a file (or simply piped in from another\nprocess) and they are executed using multiple parallel workers. Since only one\nprogram is launched, thousands of unnecessary fork-exec calls are avoided. This\nway S3 execution times can reach a few thousand operations per second.\n\n    s5cmd run commands.txt\n\nor\n\n    cat commands.txt | s5cmd run\n\n`commands.txt` content could look like:\n\n```\ncp s3://bucket/2020/03/* logs/2020/03/\n\n# line comments are supported\nrm s3://bucket/2020/03/19/file2.gz\n\n# empty lines are OK too like above\n\n# rename an S3 object\nmv s3://bucket/2020/03/18/file1.gz s3://bucket/2020/03/18/original/file.gz\n```\n\n#### Sync\n`sync` command synchronizes S3 buckets, prefixes, directories and files between S3 buckets and prefixes as well.\nIt compares files between source and destination, taking source files as **source-of-truth**;\n\n* copies files those do not exist in destination\n* copies files those exist in both locations if the comparison made with sync strategy allows it so\n\nIt makes a one way synchronization from source to destination without modifying any of the source files and deleting any of the destination files (unless `--delete` flag has passed).\n\nSuppose we have following files;\n```\n   -  29 Sep 10:00 .\n5000  29 Sep 11:00 ├── favicon.ico\n 300  29 Sep 10:00 ├── index.html\n  50  29 Sep 10:00 ├── readme.md\n  80  29 Sep 11:30 └── styles.css\n```\n\n```\ns5cmd ls s3://bucket/static/\n2021/09/29 10:00:01               300 index.html\n2021/09/29 11:10:01                10 readme.md\n2021/09/29 10:00:01                90 styles.css\n2021/09/29 11:10:01                10 test.html\n```\nrunning would;\n* copy `favicon.ico`\n  * file does not exist in destination.\n* copy `styles.css`\n  * source file is newer than to remote counterpart.\n* copy `readme.md`\n  * even though the source one is older, it's size differs from the destination one; assuming source file is the source of truth.\n```\ns5cmd sync . s3://bucket/static/\n\ncp favicon.ico s3://bucket/static/favicon.ico\ncp styles.css s3://bucket/static/styles.css\ncp readme.md s3://bucket/static/readme.md\n```\n\nRunning with `--delete` flag would delete files those do not exist in the source;\n```\ns5cmd sync --delete . s3://bucket/static/\n\nrm s3://bucket/test.html\ncp favicon.ico s3://bucket/static/favicon.ico\ncp styles.css s3://bucket/static/styles.css\ncp readme.md s3://bucket/static/readme.md\n```\n\nIt's also possible to use wildcards to sync only a subset of files.\n\nTo sync only `.html` files in S3 bucket above to same local file system;\n\n```\ns5cmd sync 's3://bucket/static/*.html' .\n\ncp s3://bucket/prefix/index.html index.html\ncp s3://bucket/prefix/test.html test.html\n```\n\nWe don't support syncing between 2 storage endpoints out of the box. The current solution is to sync remote objects to your local disk first, then sync your local files to the target remote storage. For example, if you'd like to sync S3 and Google Cloud Storage:\n\n```\ns5cmd sync 's3://s3-bucket/path/*' download_folder/\n\ns5cmd --endpoint-url <gcs-endpoint> sync 'download_folder/*' s3://gcs-bucket/path/\n```\n\n##### Strategy\n###### Default\nBy default `s5cmd` compares files' both size **and** modification times, treating source files as **source of truth**. Any difference in size or modification time would cause `s5cmd` to copy source object to destination.\n\nmod time    |  size        |  should sync\n------------|--------------|-------------\nsrc > dst   |  src != dst  |  ✅\nsrc > dst   |  src == dst  |  ✅\nsrc <= dst  |  src != dst  |  ✅\nsrc <= dst  |  src == dst  |  ❌\n\n###### Size only\nWith `--size-only` flag, it's possible to use the strategy that would only compare file sizes. Source treated as **source of truth** and any difference in sizes would cause `s5cmd` to copy source object to destination.\n\nmod time   |  size        |  should sync\n-----------|--------------|-------------\nsrc > dst  |  src != dst  |  ✅\nsrc > dst  |  src = dst   |  ❌\nsrc <= dst  |  src != dst  |  ✅\nsrc <= dst  |  src == dst  |  ❌\n\n### Dry run\n`--dry-run` flag will output what operations will be performed without actually\ncarrying out those operations.\n\n    s3://bucket/pre/file1.gz\n    ...\n    s3://bucket/last.txt\n\nrunning\n\n    s5cmd --dry-run cp s3://bucket/pre/* s3://another-bucket/\n\nwill output\n\n    cp s3://bucket/pre/file1.gz s3://another-bucket/file1.gz\n    ...\n    cp s3://bucket/pre/last.txt s3://anohter-bucket/last.txt\n\nhowever, those copy operations will not be performed. It is displaying what\n`s5cmd` will do when ran without `--dry-run`\n\nNote that `--dry-run` can be used with any operation that has a side effect, i.e.,\ncp, mv, rm, mb ...\n\n### S3 ListObjects API Backward Compatibility\n\nThe `--use-list-objects-v1` flag will force using S3 ListObjectsV1 API. This\nflag is useful for services that do not support ListObjectsV2 API.\n\n```\ns5cmd --use-list-objects-v1 ls s3://bucket/\n```\n\n\n### Shell auto-completion\n\nShell completion is supported for bash, pwsh (PowerShell) and zsh.\n\nRun `s5cmd --install-completion` to obtain the appropriate auto-completion script for your shell, note that `install-completion` does not install the auto-completion but merely gives the instructions to install. The name is kept as it is for backward compatibility.\n\nTo actually enable auto-completion:\n####  in bash and zsh:\n you should add auto-completion script to `.bashrc` and `.zshrc` file.\n#### in pwsh:\nyou should save the autocompletion script to a file named `s5cmd.ps1` and add the full path of \"s5cmd.ps1\" file to profile file (which you can locate with `$profile`)\n\n\nFinally, restart your shell to activate the changes.\n\n> **Note**\nThe environment variable `SHELL` must be accurate for the autocompletion to function properly. That is it should point to `bash` binary in bash, to `zsh` binary in zsh and to `pwsh` binary in PowerShell.\n\n\n> **Note**\nThe autocompletion is tested with following versions of the shells: \\\n***zsh*** 5.8.1 (x86_64-apple-darwin21.0) \\\nGNU ***bash***, version 5.1.16(1)-release (x86_64-apple-darwin21.1.0) \\\n***PowerShell*** 7.2.6 \n\n### Google Cloud Storage support\n\n`s5cmd` supports S3 API compatible services, such as GCS, Minio or your favorite\nobject storage.\n\n    s5cmd --endpoint-url https://storage.googleapis.com ls\n\nor an alternative with environment variable\n\n    S3_ENDPOINT_URL=\"https://storage.googleapis.com\" s5cmd ls\n\n    # or\n\n    export S3_ENDPOINT_URL=\"https://storage.googleapis.com\"\n    s5cmd ls\n\nall variants will return your GCS buckets.\n\n`s5cmd` reads `.aws/credentials` to access Google Cloud Storage. Populate the `aws_access_key_id` and `aws_secret_access_key` fields in `.aws/credentials` with an HMAC key created using this [procedure](https://cloud.google.com/storage/docs/authentication/managing-hmackeys#create).\n\n`s5cmd` will use virtual-host style bucket resolving for S3, S3 transfer\nacceleration and GCS. If a custom endpoint is provided, it'll fallback to\npath-style.\n\n### Retry logic\n\n`s5cmd` uses an exponential backoff retry mechanism for transient or potential\nserver-side throttling errors. Non-retriable errors, such as `invalid\ncredentials`, `authorization errors` etc, will not be retried. By default,\n`s5cmd` will retry 10 times for up to a minute. Number of retries are adjustable\nvia `--retry-count` flag.\n\nℹ️ Enable debug level logging for displaying retryable errors.\n\n### Integrity Verification\n`s5cmd` verifies the integrity of files uploaded to Amazon S3 by checking the `Content-MD5` and `X-Amz-Content-Sha256` headers. These headers are added by the AWS SDK for both standard and multipart uploads.\n\n* `Content-MD5` is a checksum of the file's contents, calculated using the `MD5` algorithm.\n* `X-Amz-Content-Sha256` is a checksum of the file's contents, calculated using the `SHA256` algorithm.\n\nIf the checksums in these headers do not match the checksum of the file that was actually uploaded, then `s5cmd` will fail the upload. This helps to ensure that the file was not corrupted during transmission.\n\nIf the checksum calculated by S3 does not match the checksums provided in the `Content-MD5` and `X-Amz-Content-Sha256` headers, S3 will not store the object. Instead, it will return an error message to `s5cmd` with the error code `InvalidDigest` for an `MD5` mismatch or `XAmzContentSHA256Mismatch` for a `SHA256` mismatch.\n\n| Error Code | Description |\n|---|---|\n| `InvalidDigest` | The checksum provided in the `Content-MD5` header does not match the checksum calculated by S3. |\n| `XAmzContentSHA256Mismatch` | The checksum provided in the `X-Amz-Content-Sha256` header does not match the checksum calculated by S3. |\n\nIf `s5cmd` receives either of these error codes, it will not retry to upload the object again and exit code will be `1`.\n\nIf the `MD5` checksum mismatches, you will see an error like the one below.\n\n    ERROR \"cp file.log s3://bucket/file.log\": InvalidDigest: The Content-MD5 you specified was invalid. status code: 400, request id: S3TR4P2E0A2K3JMH7, host id: XTeMYKd2KECOHWk5S\n\nIf the `SHA256` checksum mismatches, you will see an error like the one below.\n\n    ERROR \"cp file.log s3://bucket/file.log\": XAmzContentSHA256Mismatch: The provided 'x-amz-content-sha256' header does not match what was computed. status code: 400, request id: S3TR4P2E0A2K3JMH7, host id: XTeMYKd2KECOHWk5S\n\n`aws-cli` and `s5cmd` are both command-line tools that can be used to interact with Amazon S3. However, there are some differences between the two tools in terms of how they verify the integrity of data uploaded to S3.\n\n* **Number of retries:** `aws-cli` will retry up to five times to upload a file, while `s5cmd` will not retry.\n* **Checksums:** If you enable `Signature Version 4` in your `~/.aws/config` file, `aws-cli` will only check the `SHA256` checksum of a file  while `s5cmd` will check both the `MD5` and `SHA256` checksums.\n\n**Sources:**\n- [AWS Go SDK](https://github.com/aws/aws-sdk-go/blob/b75b2a7b3cb40ece5774ed07dde44903481a2d4d/service/s3/customizations.go#L56)\n- [AWS CLI Docs](https://docs.aws.amazon.com/cli/latest/topic/s3-faq.html)\n- [AWS S3 Docs](https://aws.amazon.com/getting-started/hands-on/amazon-s3-with-additional-checksums/)\n\n## Using wildcards\n\nOn some shells, like zsh, the `*` character gets treated as a file globbing\nwildcard, which causes unexpected results for `s5cmd`. You might see an output\nlike:\n\n```\nzsh: no matches found\n```\n\nIf that happens, you need to wrap your wildcard expression in single quotes, like:\n\n```\ns5cmd cp '*.gz' s3://bucket/\n```\n\n## Output\n\n`s5cmd` supports both structured and unstructured outputs.\n* unstructured output\n\n```shell\n$ s5cmd cp s3://bucket/testfile .\n\ncp s3://bucket/testfile testfile\n```\n\n```shell\n$ s5cmd cp --no-clobber s3://somebucket/file.txt file.txt\n\nERROR \"cp s3://somebucket/file.txt file.txt\": object already exists\n```\n\n* If `--json` flag is provided:\n\n```json\n{\n    \"operation\": \"cp\",\n    \"success\": true,\n    \"source\": \"s3://bucket/testfile\",\n    \"destination\": \"testfile\",\n    \"object\": \"[object]\"\n}\n{\n    \"operation\": \"cp\",\n    \"job\": \"cp s3://somebucket/file.txt file.txt\",\n    \"error\": \"'cp s3://somebucket/file.txt file.txt': object already exists\"\n}\n```\n\n## Configuring Concurrency\n\n### numworkers\n\n`numworkers` is a global option that sets the size of the global worker pool. Default value of `numworkers` is [256](https://github.com/peak/s5cmd/blob/master/command/app.go#L18).\nCommands such as `cp`, `select` and `run`, which can benefit from parallelism use this worker pool to execute tasks. A task can be an upload, a download or anything in a [`run` file](https://github.com/peak/s5cmd/blob/master/command/app.go#L18).\n\nFor example, if you are uploading 100 files to an S3 bucket and the `--numworkers` is set to 10, then `s5cmd` will limit the number of files concurrently uploaded to 10.\n\n```\ns5cmd --numworkers 10 cp '/Users/foo/bar/*' s3://mybucket/foo/bar/\n```\n\n### concurrency\n\n`concurrency` is a `cp` command option. It sets the number of parts that will be uploaded or downloaded in parallel for a single file.\nThis parameter is used by the AWS Go SDK. Default value of `concurrency` is `5`.\n\n`numworkers` and `concurrency` options can be used together:\n\n```\ns5cmd --numworkers 10 cp --concurrency 10 '/Users/foo/bar/*' s3://mybucket/foo/bar/\n```\n\nIf you have a few, large files to download, setting `--numworkers` to a very high value will not affect download speed. In this scenario setting `--concurrency` to a higher value may have a better impact on the download speed.\n\n## Benchmarks\nSome benchmarks regarding the performance of `s5cmd` are introduced below. For more\ndetails refer to this [post](https://medium.com/@joshua_robinson/s5cmd-for-high-performance-object-storage-7071352cc09d)\nwhich is the source of the benchmarks to be presented.\n\n*Upload/download of single large file*\n\n<img src=\"./doc/benchmark1.png\" alt=\"get/put performance graph\" height=\"75%\" width=\"75%\">\n\n*Uploading large number of small-sized files*\n\n<img src=\"./doc/benchmark2.png\" alt=\"multi-object upload performance graph\" height=\"75%\" width=\"75%\">\n\n*Performance comparison on different hardware*\n\n<img src=\"./doc/benchmark3.png\" alt=\"s3 upload speed graph\" height=\"75%\" width=\"75%\">\n\n*So, where does all this speed come from?*\n\nThere are mainly two reasons for this:\n- It is written in Go, a statically compiled language designed to make development\nof concurrent systems easy and make full utilization of multi-core processors.\n- *Parallelization.* `s5cmd` starts out with concurrent worker pools and parallelizes\nworkloads as much as possible while trying to achieve maximum throughput.\n\n## performance regression tests\n\n[`bench.py`](benchmark/bench.py) script can be used to compare performance of two different s5cmd builds. Refer to this [readme](benchmark/README.md) file for further details.\n\n# Advanced Usage\n\nSome of the advanced usage patterns provided below are inspired by the following [article](https://medium.com/@joshua_robinson/s5cmd-hits-v1-0-and-intro-to-advanced-usage-37ad02f7e895) (thank you! [@joshuarobinson](https://github.com/joshuarobinson))\n\n## Integrate s5cmd operations with Unix commands\nAssume we have a set of objects on S3, and we would like to list them in sorted fashion according to object names.\n\n    $ s5cmd ls s3://bucket/reports/ | sort -k 4\n    2020/08/17 09:34:33              1364 antalya.csv\n    2020/08/17 09:34:33                 0 batman.csv\n    2020/08/17 09:34:33             23114 istanbul.csv\n    2020/08/17 09:34:33             26154 izmir.csv\n    2020/08/17 09:34:33               112 samsun.csv\n    2020/08/17 09:34:33             12552 van.csv\n\nFor a more practical scenario, let's say we have an [avocado prices](https://www.kaggle.com/neuromusic/avocado-prices) dataset, and we would like to take a peek at the few lines of the data by fetching only the necessary bytes.\n\n    $ s5cmd cat s3://bucket/avocado.csv.gz | gunzip | xsv slice --len 5 | xsv table\n        Date        AveragePrice  Total Volume  4046     4225       4770   Total Bags  Small Bags  Large Bags  XLarge Bags  type          year  region\n    0   2015-12-27  1.33          64236.62      1036.74  54454.85   48.16  8696.87     8603.62     93.25       0.0          conventional  2015  Albany\n    1   2015-12-20  1.35          54876.98      674.28   44638.81   58.33  9505.56     9408.07     97.49       0.0          conventional  2015  Albany\n    2   2015-12-13  0.93          118220.22     794.7    109149.67  130.5  8145.35     8042.21     103.14      0.0          conventional  2015  Albany\n    3   2015-12-06  1.08          78992.15      1132.0   71976.41   72.58  5811.16     5677.4      133.76      0.0          conventional  2015  Albany\n    4   2015-11-29  1.28          51039.6       941.48   43838.39   75.78  6183.95     5986.26     197.69      0.0          conventional  2015  Albany\n\n\n## Beast Mode s5cmd\n\n`s5cmd` allows to pass in some file, containing list of operations to be performed, as an argument to the `run` command as illustrated in the [above](./README.md#L293) example. Alternatively, one can pipe in commands into\nthe `run:`\n\n    BUCKET=s5cmd-test; s5cmd ls s3://$BUCKET/*test | grep -v DIR | awk ‘{print $NF}’\n    | xargs -I {} echo “cp s3://$BUCKET/{} /local/directory/” | s5cmd run\n\nThe above command performs two `s5cmd` invocations; first, searches for files with *test* suffix and then creates a *copy to local directory* command for each matching file and finally, pipes in those into the ` run.`\n\nLet's examine another usage instance, where we migrate files older than\n30 days to a cloud object storage:\n\n    find /mnt/joshua/nachos/ -type f -mtime +30 | awk '{print \"mv \"$1\" s3://joshuarobinson/backup/\"$1}'\n    | s5cmd run\n\nIt is worth to mention that, `run` command should not be considered as a *silver bullet* for all operations. For example, assume we want to remove the following objects:\n\n    s3://bucket/prefix/2020/03/object1.gz\n    s3://bucket/prefix/2020/04/object1.gz\n    ...\n    s3://bucket/prefix/2020/09/object77.gz\n\nRather than executing\n\n    rm s3://bucket/prefix/2020/03/object1.gz\n    rm s3://bucket/prefix/2020/04/object1.gz\n    ...\n    rm s3://bucket/prefix/2020/09/object77.gz\n\nwith `run` command, it is better to just use\n\n    rm s3://bucket/prefix/2020/0*/object*.gz\n\nthe latter sends single delete request per thousand objects, whereas using the former approach\nsends a separate delete request for each subcommand provided to `run.` Thus, there can be a\nsignificant runtime difference between those two approaches.\n\n# LICENSE\n\nMIT. See [LICENSE](https://github.com/peak/s5cmd/blob/master/LICENSE).\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "command",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e",
          "type": "tree",
          "content": null
        },
        {
          "name": "error",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.9404296875,
          "content": "module github.com/peak/s5cmd/v2\n\ngo 1.20\n\nrequire (\n\tgithub.com/aws/aws-sdk-go v1.44.298\n\tgithub.com/cheggaaa/pb/v3 v3.1.4\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/hashicorp/go-multierror v1.1.1\n\tgithub.com/iancoleman/strcase v0.0.0-20191112232945-16388991a334\n\tgithub.com/igungor/gofakes3 v0.0.18\n\tgithub.com/karrick/godirwalk v1.15.3\n\tgithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51\n\tgithub.com/lanrat/extsort v1.0.2\n\tgithub.com/termie/go-shutil v0.0.0-20140729215957-bcacb06fecae\n\tgithub.com/urfave/cli/v2 v2.11.2\n\tgo.uber.org/mock v0.4.0\n\tgotest.tools/v3 v3.0.3\n\thonnef.co/go/tools v0.4.7\n\tmvdan.cc/unparam v0.0.0-20230312165513-e84e2d14e3b8\n)\n\nrequire (\n\tgithub.com/BurntSushi/toml v1.2.1 // indirect\n\tgithub.com/VividCortex/ewma v1.2.0 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/fatih/color v1.15.0 // indirect\n\tgithub.com/hashicorp/errwrap v1.0.0 // indirect\n\tgithub.com/jmespath/go-jmespath v0.4.0 // indirect\n\tgithub.com/kr/pretty v0.3.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.14 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/rivo/uniseg v0.2.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/ryszard/goskiplist v0.0.0-20150312221310-2dfbae5fcf46 // indirect\n\tgithub.com/shabbyrobe/gocovmerge v0.0.0-20190829150210-3e036491d500 // indirect\n\tgithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 // indirect\n\tgo.etcd.io/bbolt v1.3.6 // indirect\n\tgolang.org/x/exp/typeparams v0.0.0-20221208152030-732eee02a75a // indirect\n\tgolang.org/x/mod v0.17.0 // indirect\n\tgolang.org/x/sync v0.7.0 // indirect\n\tgolang.org/x/sys v0.20.0 // indirect\n\tgolang.org/x/tools v0.21.0 // indirect\n\tgopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 // indirect\n\tgopkg.in/mgo.v2 v2.0.0-20180705113604-9856a29383ce // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 13.736328125,
          "content": "github.com/BurntSushi/toml v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\ngithub.com/BurntSushi/toml v1.2.1/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=\ngithub.com/VividCortex/ewma v1.2.0 h1:f58SaIzcDXrSy3kWaHNvuJgJ3Nmz59Zji6XoJR/q1ow=\ngithub.com/VividCortex/ewma v1.2.0/go.mod h1:nz4BbCtbLyFDeC9SUHbtcT5644juEuWfUAUnGx7j5l4=\ngithub.com/aws/aws-sdk-go v1.44.256/go.mod h1:aVsgQcEevwlmQ7qHE9I3h+dtQgpqhFB+i8Phjh7fkwI=\ngithub.com/aws/aws-sdk-go v1.44.298 h1:5qTxdubgV7PptZJmp/2qDwD2JL187ePL7VOxsSh1i3g=\ngithub.com/aws/aws-sdk-go v1.44.298/go.mod h1:aVsgQcEevwlmQ7qHE9I3h+dtQgpqhFB+i8Phjh7fkwI=\ngithub.com/cheggaaa/pb/v3 v3.1.4 h1:DN8j4TVVdKu3WxVwcRKu0sG00IIU6FewoABZzXbRQeo=\ngithub.com/cheggaaa/pb/v3 v3.1.4/go.mod h1:6wVjILNBaXMs8c21qRiaUM8BR82erfgau1DQ4iUXmSA=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2 h1:p1EgwI/C7NhT0JmVkwCD2ZBK8j4aeHQX2pMHHBfMQ6w=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fatih/color v1.15.0 h1:kOqh6YHBtK8aywxGerMG2Eq3H6Qgoqeo13Bk2Mv/nBs=\ngithub.com/fatih/color v1.15.0/go.mod h1:0h5ZqXfHYED7Bhv2ZJamyIOUej9KtShiJESRwBDUSsw=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/hashicorp/errwrap v1.0.0 h1:hLrqtEDnRye3+sgx6z4qVLNuviH3MR5aQ0ykNJa/UYA=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\ngithub.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\ngithub.com/iancoleman/strcase v0.0.0-20191112232945-16388991a334 h1:VHgatEHNcBFEB7inlalqfNqw65aNkM1lGX2yt3NmbS8=\ngithub.com/iancoleman/strcase v0.0.0-20191112232945-16388991a334/go.mod h1:SK73tn/9oHe+/Y0h39VT4UCxmurVJkR5NA7kMEAOgSE=\ngithub.com/igungor/gofakes3 v0.0.18 h1:LTJV11PrTJ6DGEiCEKXh75wFZtwv773Nof0FB9Ef5qc=\ngithub.com/igungor/gofakes3 v0.0.18/go.mod h1:+rwAKRO9RTGCIeE8SRvRPLSj7PVhaMBLlm1zPXzu7Cs=\ngithub.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=\ngithub.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\ngithub.com/karrick/godirwalk v1.15.3 h1:0a2pXOgtB16CqIqXTiT7+K9L73f74n/aNQUnH6Ortew=\ngithub.com/karrick/godirwalk v1.15.3/go.mod h1:j4mkqPuvaLI8mp1DroR3P6ad7cyYd4c1qeJ3RV7ULlk=\ngithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 h1:Z9n2FFNUXsshfwJMBgNA0RU6/i7WVaAegv3PtuIHPMs=\ngithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51/go.mod h1:CzGEWj7cYgsdH8dAjBGEr58BoE7ScuLd+fwFZ44+/x8=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.0 h1:WgNl7dwNpEZ6jJ9k1snq4pZsg7DOEN8hP9Xw0Tsjwk0=\ngithub.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lanrat/extsort v1.0.2 h1:p3MLVpQEPwEGPzeLBb+1eSErzRl6Bgjgr+qnIs2RxrU=\ngithub.com/lanrat/extsort v1.0.2/go.mod h1:ivzsdLm8Tv+88qbdpMElV6Z15StlzPUtZSKsGb51hnQ=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.19 h1:JITubQf0MOLdlGRuRq+jtsDlekdYPia9ZFsB8h/APPA=\ngithub.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.14 h1:+xnbZSEeDbOIg5/mE6JF0w6n9duR1l3/WmbinWVwUuU=\ngithub.com/mattn/go-runewidth v0.0.14/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e h1:aoZm08cpOy4WuID//EZDgcC4zIxODThtZNPirFr42+A=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/ryszard/goskiplist v0.0.0-20150312221310-2dfbae5fcf46 h1:GHRpF1pTW19a8tTFrMLUcfWwyC0pnifVo2ClaLq+hP8=\ngithub.com/ryszard/goskiplist v0.0.0-20150312221310-2dfbae5fcf46/go.mod h1:uAQ5PCi+MFsC7HjREoAz1BU+Mq60+05gifQSsHSDG/8=\ngithub.com/shabbyrobe/gocovmerge v0.0.0-20190829150210-3e036491d500 h1:WnNuhiq+FOY3jNj6JXFT+eLN3CQ/oPIsDPRanvwsmbI=\ngithub.com/shabbyrobe/gocovmerge v0.0.0-20190829150210-3e036491d500/go.mod h1:+njLrG5wSeoG4Ds61rFgEzKvenR2UHbjMoDHsczxly0=\ngithub.com/spf13/afero v1.2.1/go.mod h1:9ZxEEn6pIJ8Rxe320qSDBk6AsU0r9pR7Q4OcevTdifk=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/termie/go-shutil v0.0.0-20140729215957-bcacb06fecae h1:vgGSvdW5Lqg+I1aZOlG32uyE6xHpLdKhZzcTEktz5wM=\ngithub.com/termie/go-shutil v0.0.0-20140729215957-bcacb06fecae/go.mod h1:quDq6Se6jlGwiIKia/itDZxqC5rj6/8OdFyMMAwTxCs=\ngithub.com/urfave/cli/v2 v2.11.2 h1:FVfNg4m3vbjbBpLYxW//WjxUoHvJ9TlppXcqY9Q9ZfA=\ngithub.com/urfave/cli/v2 v2.11.2/go.mod h1:f8iq5LtQ/bLxafbdBSLPPNsgaW0l/2fYYEHhAyPlwvo=\ngithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 h1:bAn7/zixMGCfxrRTfdpNzjtPYqr8smhKouy9mxVdGPU=\ngithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673/go.mod h1:N3UwUGtsrSj3ccvlPHLoLsHnpR27oXr4ZE984MbSER8=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngo.etcd.io/bbolt v1.3.6 h1:/ecaJf0sk1l4l6V4awd65v2C3ILy7MSj+s/x1ADCIMU=\ngo.etcd.io/bbolt v1.3.6/go.mod h1:qXsaaIqmgQH0T+OPdb99Bf+PKfBBQVAdyD6TY9G8XM4=\ngo.uber.org/mock v0.4.0 h1:VcM4ZOtdbR4f6VXfiOpwpVJDL6lCReaZ6mw31wqh7KU=\ngo.uber.org/mock v0.4.0/go.mod h1:a6FSlNadKUHUa9IP5Vyt1zh4fC7uAwxMutEAscFbkZc=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/exp/typeparams v0.0.0-20221208152030-732eee02a75a h1:Jw5wfR+h9mnIYH+OtGT2im5wV1YGGDora5vTv/aa5bE=\ngolang.org/x/exp/typeparams v0.0.0-20221208152030-732eee02a75a/go.mod h1:AbB0pIl9nAr9wVwH+Z2ZpaocVmF5I4GyWCDIsVjR0bk=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.10.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.17.0 h1:zY54UmvipHiNd+pm+m0x9KhZ9hl1/7QNMyxXbc6ICqA=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.1.0/go.mod h1:Cx3nUiGt4eDBEyega/BKRp+/AlGL8hYe7U9odMt2Cco=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=\ngolang.org/x/net v0.25.0 h1:d/OCCoBEUq33pjydKrGQhw7IlUPI2Oylr+8qLx49kac=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.7.0 h1:YsImfSBoP9QPYL0xyKJPq0gcaJdG3rInoqxTWbfQu9M=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20200923182605-d9f96fdee20d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.20.0 h1:Od9JTbYCk261bKm4M/mw7AklTlFYIa0bIp9BgSm1S8Y=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.1.0/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.7.0/go.mod h1:P32HKFT3hSsZrRxla30E9HqToFYAQPCMs/zFMBUFqPY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0 h1:2sjJmO8cDvYveuX97RDLsxlyUxLl+GHoLxBiRdHllBE=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190829051458-42f498d34c4d/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.8.0/go.mod h1:JxBZ99ISMI5ViVkT1tr6tdNmXeTrcpVSD3vZ1RsRdN4=\ngolang.org/x/tools v0.21.0 h1:qc0xYgIbsSDt9EyWz05J5wfa7LOVW0YTLOXrqdLAWIw=\ngolang.org/x/tools v0.21.0/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/mgo.v2 v2.0.0-20180705113604-9856a29383ce h1:xcEWjVhvbDy+nHP67nPDDpbYrY+ILlfndk4bRioVHaU=\ngopkg.in/mgo.v2 v2.0.0-20180705113604-9856a29383ce/go.mod h1:yeKp02qBN3iKW1OzL3MGk2IdtZzaj7SFntXj72NppTA=\ngopkg.in/yaml.v2 v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngotest.tools/v3 v3.0.3 h1:4AuOwCGf4lLR9u3YOe2awrHygurzhO/HeQ6laiA6Sx0=\ngotest.tools/v3 v3.0.3/go.mod h1:Z7Lb0S5l+klDB31fvDQX8ss/FlKDxtlFlw3Oa8Ymbl8=\nhonnef.co/go/tools v0.4.7 h1:9MDAWxMoSnB6QoSqiVr7P5mtkT9pOc1kSxchzPCnqJs=\nhonnef.co/go/tools v0.4.7/go.mod h1:+rnGS1THNh8zMwnd2oVOTL9QF6vmfyG6ZXBULae2uc0=\nmvdan.cc/unparam v0.0.0-20230312165513-e84e2d14e3b8 h1:VuJo4Mt0EVPychre4fNlDWDuE5AjXtPJpRUWqZDQhaI=\nmvdan.cc/unparam v0.0.0-20230312165513-e84e2d14e3b8/go.mod h1:Oh/d7dEtzsNHGOq1Cdv8aMm3KdKhVvPbRQcM8WFpBR8=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.2880859375,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"github.com/peak/s5cmd/v2/command\"\n)\n\nfunc main() {\n\tctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)\n\tdefer cancel()\n\n\tif err := command.Main(ctx, os.Args); err != nil {\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "orderedwriter",
          "type": "tree",
          "content": null
        },
        {
          "name": "parallel",
          "type": "tree",
          "content": null
        },
        {
          "name": "progressbar",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "strutil",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}