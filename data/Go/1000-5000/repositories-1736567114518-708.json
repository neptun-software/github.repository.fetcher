{
  "metadata": {
    "timestamp": 1736567114518,
    "page": 708,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gojek/heimdall",
      "stars": 2641,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.04296875,
          "content": "/vendor/\n/out/\n*.log\n.idea/\n*.out\n.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0693359375,
          "content": "language: go\n\ngo:\n - 1.14.x\n\ninstall:\n  - make setup\n\nscript:\n  - make\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 0.2451171875,
          "content": "# Heimdall - Authors\n\nFor people who've contributed to [Heimdall](https://github.com/gojek/heimdall),\n_please checkout [Contributors Graphs](https://github.com/gojek/heimdall/graphs/contributors) \non [GO-JEK Tech's GitHub](https://github.com/gojek)._\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.0986328125,
          "content": "# Heimdall - Changelog\n\n## v0.0.1 (2018-JAN-19)\n\n- initial fork commit\n- open-source stepping stones\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6845703125,
          "content": "# Heimdall - Contributing\n\nHeimdall `github.com/gojek/heimdall` is an open-source project. \nIt is licensed using the [Apache License 2.0][1]. \nWe appreciate pull requests; here are our guidelines:\n\n1.  [File an issue][2] \n    (if there isn't one already). If your patch\n    is going to be large it might be a good idea to get the\n    discussion started early.  We are happy to discuss it in a\n    new issue beforehand, and you can always email\n    <tech+heimdall@go-jek.com> about future work.\n\n2.  Please use [Effective Go Community Guidelines][3].\n\n3.  We ask that you squash all the commits together before\n    pushing and that your commit message references the bug.\n\n## Issue Reporting\n- Check that the issue has not already been reported.\n- Be clear, concise and precise in your description of the problem.\n- Open an issue with a descriptive title and a summary in grammatically correct,\n  complete sentences.\n- Include any relevant code to the issue summary.\n\n## Pull Requests\n- Please read this [how to GitHub][4] blog post.\n- Use a topic branch to easily amend a pull request later, if necessary.\n- Write [good commit messages][5].\n- Use the same coding conventions as the rest of the project.\n- Open a [pull request][6] that relates to *only* one subject with a clear title\n  and description in grammatically correct, complete sentences.\n\nMuch Thanks! ❤❤❤\n\nGO-JEK Tech\n\n[1]: http://www.apache.org/licenses/LICENSE-2.0\n[2]: https://github.com/gojek/heimdall/issues\n[3]: https://golang.org/doc/effective_go.html\n[4]: http://gun.io/blog/how-to-github-fork-branch-and-pull-request\n[5]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n[6]: https://help.github.com/articles/using-pull-requests\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.7607421875,
          "content": ".PHONYthub.com/mattn/goveralls: all\nall: build test coverage\n\nALL_PACKAGES=$(shell go list ./... | grep -v \"vendor\")\n\nsetup:\n\tmkdir -p $(GOPATH)/bin\n\tgo get -u golang.org/x/lint/golint\n\tgo get github.com/mattn/goveralls\n\ncompile:\n\tmkdir -p out/\n\tgo build -race ./...\n\nbuild: compile fmt vet lint\n\nfmt:\n\tgo fmt ./...\n\nvet:\n\tgo vet ./...\n\nlint:\n\tgolint -set_exit_status $(ALL_PACKAGES)\n\ntest: fmt vet build\n\tENVIRONMENT=test go test -race ./...\n\ncoverage:\n\tENVIRONMENT=test goveralls -service=travis-ci\n\ntest-cover-html:\n\t@echo \"mode: count\" > coverage-all.out\n\n\t$(foreach pkg, $(ALL_PACKAGES),\\\n\tENVIRONMENT=test go test -coverprofile=coverage.out -covermode=count $(pkg);\\\n\ttail -n +2 coverage.out >> coverage-all.out;)\n\tgo tool cover -html=coverage-all.out -o out/coverage.html\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.1630859375,
          "content": "# Heimdall\n\n<p align=\"center\"><img src=\"doc/heimdall-logo.png\" width=\"360\"></p>\n<p align=\"center\">\n  <a href=\"https://travis-ci.com/gojek/heimdall\"><img src=\"https://travis-ci.com/gojek/heimdall.svg?branch=master\" alt=\"Build Status\"></img></a>\n  <a href=\"https://goreportcard.com/report/github.com/gojek/heimdall\"><img src=\"https://goreportcard.com/badge/github.com/gojek/heimdall\"></img></a>\n  <a href=\"https://golangci.com\"><img src=\"https://golangci.com/badges/github.com/gojek/heimdall.svg\"></img></a>\n  <a href=\"https://coveralls.io/github/gojek/heimdall?branch=master\"><img src=\"https://coveralls.io/repos/github/gojek/heimdall/badge.svg?branch=master\"></img></a>\n</p>\n\n* [Description](#description)\n* [Installation](#installation)\n* [Usage](#usage)\n  + [Making a simple `GET` request](#making-a-simple-get-request)\n  + [Creating a hystrix-like circuit breaker](#creating-a-hystrix-like-circuit-breaker)\n  + [Creating a hystrix-like circuit breaker with fallbacks](#creating-a-hystrix-like-circuit-breaker-with-fallbacks)\n  + [Creating an HTTP client with a retry mechanism](#creating-an-http-client-with-a-retry-mechanism)\n  + [Custom retry mechanisms](#custom-retry-mechanisms)\n  + [Custom HTTP clients](#custom-http-clients)\n* [Plugins](#plugins)\n* [Documentation](#documentation)\n* [FAQ](#faq)\n* [License](#license)\n\n## Description\n\nHeimdall is an HTTP client that helps your application make a large number of requests, at scale. With Heimdall, you can:\n- Use a [hystrix-like](https://github.com/afex/hystrix-go) circuit breaker to control failing requests\n- Add synchronous in-memory retries to each request, with the option of setting your own retrier strategy\n- Create clients with different timeouts for every request\n\nAll HTTP methods are exposed as a fluent interface.\n\n## Installation\n```\ngo get -u github.com/gojek/heimdall/v7\n```\n\n## Usage\n\n### Importing the package\n\nThis package can be used by adding the following import statement to your `.go` files.\n\n```go\nimport \"github.com/gojek/heimdall/v7/httpclient\" \n```\n\n### Making a simple `GET` request\nThe below example will print the contents of the google home page:\n\n```go\n// Create a new HTTP client with a default timeout\ntimeout := 1000 * time.Millisecond\nclient := httpclient.NewClient(httpclient.WithHTTPTimeout(timeout))\n\n// Use the clients GET method to create and execute the request\nres, err := client.Get(\"http://google.com\", nil)\nif err != nil{\n\tpanic(err)\n}\n\n// Heimdall returns the standard *http.Response object\nbody, err := ioutil.ReadAll(res.Body)\nfmt.Println(string(body))\n```\n\nYou can also use the `*http.Request` object with the `http.Do` interface :\n\n```go\ntimeout := 1000 * time.Millisecond\nclient := httpclient.NewClient(httpclient.WithHTTPTimeout(timeout))\n\n// Create an http.Request instance\nreq, _ := http.NewRequest(http.MethodGet, \"http://google.com\", nil)\n// Call the `Do` method, which has a similar interface to the `http.Do` method\nres, err := client.Do(req)\nif err != nil {\n\tpanic(err)\n}\n\nbody, err := ioutil.ReadAll(res.Body)\nfmt.Println(string(body))\n```\n\n### Creating a hystrix-like circuit breaker\n\nTo import hystrix package of heimdall.\n\n```go\nimport \"github.com/gojek/heimdall/v7/hystrix\"\n```\n\nYou can use the `hystrix.NewClient` function to create a client wrapped in a hystrix-like circuit breaker:\n\n```go\n// Create a new hystrix-wrapped HTTP client with the command name, along with other required options\nclient := hystrix.NewClient(\n\thystrix.WithHTTPTimeout(10 * time.Millisecond),\n\thystrix.WithCommandName(\"google_get_request\"),\n\thystrix.WithHystrixTimeout(1000 * time.Millisecond),\n\thystrix.WithMaxConcurrentRequests(30),\n\thystrix.WithErrorPercentThreshold(20),\n\thystrix.WithStatsDCollector(\"localhost:8125\", \"myapp.hystrix\"),\n)\n\n// The rest is the same as the previous example\n```\n\nIn the above example, there are two timeout values used: one for the hystrix configuration, and one for the HTTP client configuration. The former determines the time at which hystrix should register an error, while the latter determines when the client itself should return a timeout error. Unless you have any special requirements, both of these would have the same values.\n\nYou can choose to export hystrix metrics to a statsD collector with the `hystrix.WithStatsDCollector(<statsd addr>, <metrics-prefix>)` option when initializing the client as shown above.\n\n### Creating a hystrix-like circuit breaker with fallbacks\n\nYou can use the `hystrix.NewClient` function to create a client wrapped in a hystrix-like circuit breaker by passing in your own custom fallbacks:\n\nThe fallback function will trigger when your code returns an error, or whenever it is unable to complete based on a variety of [health checks](https://github.com/Netflix/Hystrix/wiki/How-it-Works).\n\n**How your fallback function should look like**\nyou should pass in a function whose signature looks like following\n\n```go\nfunc(err error) error {\n    // your logic for handling the error/outage condition\n    return err\n}\n```\n\n\n**Example**\n\n```go\n// Create a new fallback function\nfallbackFn := func(err error) error {\n    _, err := http.Post(\"post_to_channel_two\")\n    return err\n}\n\ntimeout := 10 * time.Millisecond\n\n// Create a new hystrix-wrapped HTTP client with the fallbackFunc as fall-back function\nclient := hystrix.NewClient(\n\thystrix.WithHTTPTimeout(timeout),\n\thystrix.WithCommandName(\"MyCommand\"),\n\thystrix.WithHystrixTimeout(1100 * time.Millisecond),\n\thystrix.WithMaxConcurrentRequests(100),\n\thystrix.WithErrorPercentThreshold(20),\n\thystrix.WithSleepWindow(10),\n\thystrix.WithRequestVolumeThreshold(10),\n\thystrix.WithFallbackFunc(fallbackFn),\n})\n\n// The rest is the same as the previous example\n```\n\nIn the above example, the `fallbackFunc` is a function which posts to channel two in case posting to channel one fails.\n\n### Creating an HTTP client with a retry mechanism\n\n```go\n// First set a backoff mechanism. Constant backoff increases the backoff at a constant rate\nbackoffInterval := 2 * time.Millisecond\n// Define a maximum jitter interval. It must be more than 1*time.Millisecond\nmaximumJitterInterval := 5 * time.Millisecond\n\nbackoff := heimdall.NewConstantBackoff(backoffInterval, maximumJitterInterval)\n\n// Create a new retry mechanism with the backoff\nretrier := heimdall.NewRetrier(backoff)\n\ntimeout := 1000 * time.Millisecond\n// Create a new client, sets the retry mechanism, and the number of times you would like to retry\nclient := httpclient.NewClient(\n\thttpclient.WithHTTPTimeout(timeout),\n\thttpclient.WithRetrier(retrier),\n\thttpclient.WithRetryCount(4),\n)\n\n// The rest is the same as the first example\n```\nOr create client with exponential backoff\n\n```go\n// First set a backoff mechanism. Exponential Backoff increases the backoff at a exponential rate\n\ninitalTimeout := 2*time.Millisecond            // Inital timeout\nmaxTimeout := 9*time.Millisecond               // Max time out\nexponentFactor := 2                            // Multiplier\nmaximumJitterInterval := 2*time.Millisecond    // Max jitter interval. It must be more than 1*time.Millisecond\n\nbackoff := heimdall.NewExponentialBackoff(initalTimeout, maxTimeout, exponentFactor, maximumJitterInterval)\n\n// Create a new retry mechanism with the backoff\nretrier := heimdall.NewRetrier(backoff)\n\ntimeout := 1000 * time.Millisecond\n// Create a new client, sets the retry mechanism, and the number of times you would like to retry\nclient := httpclient.NewClient(\n\thttpclient.WithHTTPTimeout(timeout),\n\thttpclient.WithRetrier(retrier),\n\thttpclient.WithRetryCount(4),\n)\n\n// The rest is the same as the first example\n```\n\nThis will create an HTTP client which will retry every `500` milliseconds incase the request fails. The library also comes with an [Exponential Backoff](https://pkg.go.dev/github.com/gojek/heimdall#NewExponentialBackoff)\n\n### Custom retry mechanisms\n\nHeimdall supports custom retry strategies. To do this, you will have to implement the `Backoff` interface:\n\n```go\ntype Backoff interface {\n\tNext(retry int) time.Duration\n}\n```\n\nLet's see an example of creating a client with a linearly increasing backoff time:\n\nFirst, create the backoff mechanism:\n\n```go\ntype linearBackoff struct {\n\tbackoffInterval int\n}\n\nfunc (lb *linearBackoff) Next(retry int) time.Duration{\n\tif retry <= 0 {\n\t\treturn 0 * time.Millisecond\n\t}\n\treturn time.Duration(retry * lb.backoffInterval) * time.Millisecond\n}\n```\n\nThis will create a backoff mechanism, where the retry time will increase linearly for each retry attempt. We can use this to create the client, just like the last example:\n\n```go\nbackoff := &linearBackoff{100}\nretrier := heimdall.NewRetrier(backoff)\n\ntimeout := 1000 * time.Millisecond\n// Create a new client, sets the retry mechanism, and the number of times you would like to retry\nclient := httpclient.NewClient(\n\thttpclient.WithHTTPTimeout(timeout),\n\thttpclient.WithRetrier(retrier),\n\thttpclient.WithRetryCount(4),\n)\n\n// The rest is the same as the first example\n```\n\nHeimdall also allows you to simply pass a function that returns the retry timeout. This can be used to create the client, like:\n```go\nlinearRetrier := NewRetrierFunc(func(retry int) time.Duration {\n\tif retry <= 0 {\n\t\treturn 0 * time.Millisecond\n\t}\n\treturn time.Duration(retry) * time.Millisecond\n})\n\ntimeout := 1000 * time.Millisecond\nclient := httpclient.NewClient(\n\thttpclient.WithHTTPTimeout(timeout),\n\thttpclient.WithRetrier(linearRetrier),\n\thttpclient.WithRetryCount(4),\n)\n```\n\n### Custom HTTP clients\n\nHeimdall supports custom HTTP clients. This is useful if you are using a client imported from another library and/or wish to implement custom logging, cookies, headers etc for each request that you make with your client.\n\nUnder the hood, the `httpClient` struct now accepts `Doer`, which is the standard interface implemented by HTTP clients (including the standard library's `net/*http.Client`)\n\nLet's say we wish to add authorization headers to all our requests.\n\nWe can define our client `myHTTPClient`\n\n```go\ntype myHTTPClient struct {\n\tclient http.Client\n}\n\nfunc (c *myHTTPClient) Do(request *http.Request) (*http.Response, error) {\n\trequest.SetBasicAuth(\"username\", \"passwd\")\n\treturn c.client.Do(request)\n}\n```\n\nAnd set this with `httpclient.NewClient(httpclient.WithHTTPClient(&myHTTPClient{client: http.DefaultClient}))`\n\nNow, each sent request will have the `Authorization` header to use HTTP basic authentication with the provided username and password.\n\nThis can be done for the hystrix client as well\n\n```go\nclient := httpclient.NewClient(\n\thttpclient.WithHTTPClient(&myHTTPClient{\n\t\tclient: http.Client{Timeout: 25 * time.Millisecond},\n\t}),\n)\n\n// The rest is the same as the first example\n```\n\n## Plugins\n\nTo add a plugin to an existing client, use the `AddPlugin` method of the client. \n\nAn example, with the [request logger plugin](/plugins/request_logger.go):\n\n```go\n// import \"github.com/gojek/heimdall/v7/plugins\"\n\nclient := heimdall.NewHTTPClient(timeout)\nrequestLogger := plugins.NewRequestLogger(nil, nil)\nclient.AddPlugin(requestLogger)\n// use the client as before\n\nreq, _ := http.NewRequest(http.MethodGet, \"http://google.com\", nil)\nres, err := client.Do(req)\nif err != nil {\n\tpanic(err)\n}\n// This will log:\n//23/Jun/2018 12:48:04 GET http://google.com 200 [412ms]\n// to STDOUT\n```\n\nA plugin is an interface whose methods get called during key events in a requests lifecycle:\n\n- `OnRequestStart` is called just before the request is made\n- `OnRequestEnd` is called once the request has successfully executed\n- `OnError` is called is the request failed\n\nEach method is called with the request object as an argument, with `OnRequestEnd`, and `OnError` additionally being called with the response and error instances respectively.\nFor a simple example on how to write plugins, look at the [request logger plugin](/plugins/request_logger.go).\n\n## Documentation\n\nFurther documentation can be found on [pkg.go.dev](https://pkg.go.dev/github.com/gojek/heimdall/v7)\n\n## FAQ\n\n**Can I replace the standard Go HTTP client with Heimdall?**\n\nYes, you can. Heimdall implements the standard [HTTP Do](https://golang.org/pkg/net/http/#Client.Do) method, along with [useful wrapper methods](https://golang.org/pkg/net/http/#Client.Do) that provide all the functionality that a regular Go HTTP client provides.\n\n---\n\n**When should I use Heimdall?**\n\nIf you are making a large number of HTTP requests, or if you make requests among multiple distributed nodes, and wish to make your systems more fault tolerant, then Heimdall was made for you.\n\nHeimdall makes use of [multiple mechanisms](https://medium.com/@sohamkamani/how-to-handle-microservice-communication-at-scale-a6fb0ee0ed7) to make HTTP requests more fault tolerant:\n1. Retries - If a request fails, Heimdall retries behind the scenes, and returns the result if one of the retries are successful.\n2. Circuit breaking - If Heimdall detects that too many of your requests are failing, or that the number of requests sent are above a configured threshold, then it \"opens the circuit\" for a short period of time, which prevents any more requests from being made. _This gives your downstream systems time to recover._\n\n---\n\n**So does this mean that I shouldn't use Heimdall for small scale applications?**\n\nAlthough Heimdall was made keeping large scale systems in mind, it's interface is simple enough to be used for any type of systems. In fact, we use it for our pet projects as well. Even if you don't require retries or circuit breaking features, the [simpler HTTP client](https://github.com/gojek/heimdall#making-a-simple-get-request) provides sensible defaults with a simpler interface, and can be upgraded easily should the need arise.\n\n---\n\n**Can I contribute to make Heimdall better?**\n\n[Please do!](https://github.com/gojek/heimdall/blob/master/CONTRIBUTING.md) We are looking for any kind of contribution to improve Heimdalls core funtionality and documentation. When in doubt, make a PR!\n\n## License\n\n```\nCopyright 2018-2020, GO-JEK Tech (http://gojek.tech)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
        },
        {
          "name": "backoff.go",
          "type": "blob",
          "size": 2.10546875,
          "content": "package heimdall\n\nimport (\n\t\"math\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// Backoff interface defines contract for backoff strategies\ntype Backoff interface {\n\tNext(retry int) time.Duration\n}\n\ntype constantBackoff struct {\n\tbackoffInterval       int64\n\tmaximumJitterInterval int64\n}\n\nfunc init() {\n\trand.Seed(time.Now().UnixNano())\n}\n\n// NewConstantBackoff returns an instance of ConstantBackoff\nfunc NewConstantBackoff(backoffInterval, maximumJitterInterval time.Duration) Backoff {\n\t// protect against panic when generating random jitter\n\tif maximumJitterInterval < 0 {\n\t\tmaximumJitterInterval = 0\n\t}\n\n\treturn &constantBackoff{\n\t\tbackoffInterval:       int64(backoffInterval / time.Millisecond),\n\t\tmaximumJitterInterval: int64(maximumJitterInterval / time.Millisecond),\n\t}\n}\n\n// Next returns next time for retrying operation with constant strategy\nfunc (cb *constantBackoff) Next(retry int) time.Duration {\n\treturn (time.Duration(cb.backoffInterval) * time.Millisecond) + (time.Duration(rand.Int63n(cb.maximumJitterInterval+1)) * time.Millisecond)\n}\n\ntype exponentialBackoff struct {\n\texponentFactor        float64\n\tinitialTimeout        float64\n\tmaxTimeout            float64\n\tmaximumJitterInterval int64\n}\n\n// NewExponentialBackoff returns an instance of ExponentialBackoff\nfunc NewExponentialBackoff(initialTimeout, maxTimeout time.Duration, exponentFactor float64, maximumJitterInterval time.Duration) Backoff {\n\t// protect against panic when generating random jitter\n\tif maximumJitterInterval < 0 {\n\t\tmaximumJitterInterval = 0\n\t}\n\n\treturn &exponentialBackoff{\n\t\texponentFactor:        exponentFactor,\n\t\tinitialTimeout:        float64(initialTimeout / time.Millisecond),\n\t\tmaxTimeout:            float64(maxTimeout / time.Millisecond),\n\t\tmaximumJitterInterval: int64(maximumJitterInterval / time.Millisecond),\n\t}\n}\n\n// Next returns next time for retrying operation with exponential strategy\nfunc (eb *exponentialBackoff) Next(retry int) time.Duration {\n\tif retry < 0 {\n\t\tretry = 0\n\t}\n\treturn time.Duration(math.Min(eb.initialTimeout*math.Pow(eb.exponentFactor, float64(retry)), eb.maxTimeout)+float64(rand.Int63n(eb.maximumJitterInterval+1))) * time.Millisecond\n}\n"
        },
        {
          "name": "backoff_test.go",
          "type": "blob",
          "size": 4.3427734375,
          "content": "package heimdall\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestExponentialBackoffNextTime(t *testing.T) {\n\texponentialBackoff := NewExponentialBackoff(100*time.Millisecond, 1000*time.Millisecond, 2.0, 0*time.Millisecond)\n\n\tassert.Equal(t, 100*time.Millisecond, exponentialBackoff.Next(0))\n\tassert.Equal(t, 200*time.Millisecond, exponentialBackoff.Next(1))\n\tassert.Equal(t, 400*time.Millisecond, exponentialBackoff.Next(2))\n\tassert.Equal(t, 800*time.Millisecond, exponentialBackoff.Next(3))\n}\n\nfunc TestExponentialBackoffWithInvalidJitter(t *testing.T) {\n\texponentialBackoff := NewExponentialBackoff(100*time.Millisecond, 1000*time.Millisecond, 2.0, -1*time.Millisecond)\n\n\tassert.Equal(t, 100*time.Millisecond, exponentialBackoff.Next(0))\n\tassert.Equal(t, 200*time.Millisecond, exponentialBackoff.Next(1))\n\tassert.Equal(t, 400*time.Millisecond, exponentialBackoff.Next(2))\n\tassert.Equal(t, 800*time.Millisecond, exponentialBackoff.Next(3))\n}\n\nfunc TestExponentialBackoffMaxTimeoutCrossed(t *testing.T) {\n\texponentialBackoff := NewExponentialBackoff(100*time.Millisecond, 1000*time.Millisecond, 2.0, 0*time.Millisecond)\n\n\tassert.Equal(t, 1000*time.Millisecond, exponentialBackoff.Next(4))\n}\n\nfunc TestExponentialBackoffMaxTimeoutReached(t *testing.T) {\n\texponentialBackoff := NewExponentialBackoff(100*time.Millisecond, 1600*time.Millisecond, 2.0, 0*time.Millisecond)\n\n\tassert.Equal(t, 1600*time.Millisecond, exponentialBackoff.Next(4))\n}\n\nfunc TestExponentialBackoffWhenRetryIsLessThanZero(t *testing.T) {\n\texponentialBackoff := NewExponentialBackoff(100*time.Millisecond, 1000*time.Millisecond, 2.0, 0*time.Millisecond)\n\n\tassert.Equal(t, 100*time.Millisecond, exponentialBackoff.Next(-1))\n}\n\nfunc TestExponentialBackoffJitter0(t *testing.T) {\n\texponentialBackoff := NewExponentialBackoff(100*time.Millisecond, 1000*time.Millisecond, 2.0, 0*time.Millisecond)\n\tfor i := 0; i < 10000; i++ {\n\t\tassert.Equal(t, 200*time.Millisecond, exponentialBackoff.Next(1))\n\t}\n}\n\nfunc TestExponentialBackoffJitter1(t *testing.T) {\n\texponentialBackoff := NewExponentialBackoff(100*time.Millisecond, 1000*time.Millisecond, 2.0, 1*time.Millisecond)\n\tfor i := 0; i < 10000; i++ {\n\t\tassert.True(t, 200*time.Millisecond <= exponentialBackoff.Next(1) && exponentialBackoff.Next(1) <= 201*time.Millisecond)\n\t}\n}\n\nfunc TestExponentialBackoffJitter50(t *testing.T) {\n\texponentialBackoff := NewExponentialBackoff(100*time.Millisecond, 1000*time.Millisecond, 2.0, 50*time.Millisecond)\n\tfor i := 0; i < 10000; i++ {\n\t\tassert.True(t, 200*time.Millisecond <= exponentialBackoff.Next(1) && exponentialBackoff.Next(1) <= 250*time.Millisecond)\n\t}\n}\n\nfunc TestConstantBackoffNextTime(t *testing.T) {\n\tconstantBackoff := NewConstantBackoff(100*time.Millisecond, 0*time.Millisecond)\n\n\tassert.Equal(t, 100*time.Millisecond, constantBackoff.Next(0))\n\tassert.Equal(t, 100*time.Millisecond, constantBackoff.Next(1))\n\tassert.Equal(t, 100*time.Millisecond, constantBackoff.Next(2))\n\tassert.Equal(t, 100*time.Millisecond, constantBackoff.Next(3))\n}\n\nfunc TestConstantBackoffWithInvalidJitter(t *testing.T) {\n\tconstantBackoff := NewConstantBackoff(100*time.Millisecond, -1*time.Millisecond)\n\n\tassert.Equal(t, 100*time.Millisecond, constantBackoff.Next(0))\n\tassert.Equal(t, 100*time.Millisecond, constantBackoff.Next(1))\n\tassert.Equal(t, 100*time.Millisecond, constantBackoff.Next(2))\n\tassert.Equal(t, 100*time.Millisecond, constantBackoff.Next(3))\n}\n\nfunc TestConstantBackoffWhenRetryIsLessThanZero(t *testing.T) {\n\tconstantBackoff := NewConstantBackoff(100*time.Millisecond, 0*time.Millisecond)\n\n\tassert.Equal(t, 100*time.Millisecond, constantBackoff.Next(-1))\n}\n\nfunc TestConstantBackoffJitter0(t *testing.T) {\n\tconstantBackoff := NewConstantBackoff(100*time.Millisecond, 0*time.Millisecond)\n\tfor i := 0; i < 10000; i++ {\n\t\tassert.Equal(t, 100*time.Millisecond, constantBackoff.Next(i))\n\t}\n}\n\nfunc TestConstantBackoffJitter1(t *testing.T) {\n\tconstantBackoff := NewConstantBackoff(100*time.Millisecond, 1*time.Millisecond)\n\tfor i := 0; i < 10000; i++ {\n\t\tassert.True(t, 100*time.Millisecond <= constantBackoff.Next(i) && constantBackoff.Next(1) <= 101*time.Millisecond)\n\t}\n}\n\nfunc TestConstantBackoffJitter50(t *testing.T) {\n\tconstantBackoff := NewConstantBackoff(100*time.Millisecond, 50*time.Millisecond)\n\tfor i := 0; i < 10000; i++ {\n\t\tassert.True(t, 100*time.Millisecond <= constantBackoff.Next(i) && constantBackoff.Next(1) <= 150*time.Millisecond)\n\t}\n}\n"
        },
        {
          "name": "client.go",
          "type": "blob",
          "size": 0.7353515625,
          "content": "package heimdall\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\n// Doer interface has the method required to use a type as custom http client.\n// The net/*http.Client type satisfies this interface.\ntype Doer interface {\n\tDo(*http.Request) (*http.Response, error)\n}\n\n// Client Is a generic HTTP client interface\ntype Client interface {\n\tGet(url string, headers http.Header) (*http.Response, error)\n\tPost(url string, body io.Reader, headers http.Header) (*http.Response, error)\n\tPut(url string, body io.Reader, headers http.Header) (*http.Response, error)\n\tPatch(url string, body io.Reader, headers http.Header) (*http.Response, error)\n\tDelete(url string, headers http.Header) (*http.Response, error)\n\tDo(req *http.Request) (*http.Response, error)\n\tAddPlugin(p Plugin)\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.56640625,
          "content": "module github.com/gojek/heimdall/v7\n\ngo 1.14\n\nrequire (\n\tgithub.com/DataDog/datadog-go v3.7.1+incompatible // indirect\n\tgithub.com/afex/hystrix-go v0.0.0-20180502004556-fa1af6a1f4f5\n\tgithub.com/cactus/go-statsd-client/statsd v0.0.0-20200423205355-cb0885a1018c // indirect\n\tgithub.com/gojek/valkyrie v0.0.0-20180215180059-6aee720afcdf\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect\n\tgithub.com/smartystreets/goconvey v1.6.4 // indirect\n\tgithub.com/stretchr/objx v0.3.0 // indirect\n\tgithub.com/stretchr/testify v1.3.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.5322265625,
          "content": "github.com/DataDog/datadog-go v3.7.1+incompatible h1:HmA9qHVrHIAqpSvoCYJ+c6qst0lgqEhNW6/KwfkHbS8=\ngithub.com/DataDog/datadog-go v3.7.1+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=\ngithub.com/afex/hystrix-go v0.0.0-20180502004556-fa1af6a1f4f5 h1:rFw4nCn9iMW+Vajsk51NtYIcwSTkXr+JGrMd36kTDJw=\ngithub.com/afex/hystrix-go v0.0.0-20180502004556-fa1af6a1f4f5/go.mod h1:SkGFH1ia65gfNATL8TAiHDNxPzPdmEL5uirI2Uyuz6c=\ngithub.com/cactus/go-statsd-client/statsd v0.0.0-20200423205355-cb0885a1018c h1:HIGF0r/56+7fuIZw2V4isE22MK6xpxWx7BbV8dJ290w=\ngithub.com/cactus/go-statsd-client/statsd v0.0.0-20200423205355-cb0885a1018c/go.mod h1:l/bIBLeOl9eX+wxJAzxS4TveKRtAqlyDpHjhkfO0MEI=\ngithub.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/gojek/valkyrie v0.0.0-20180215180059-6aee720afcdf h1:5xRGbUdOmZKoDXkGx5evVLehuCMpuO1hl701bEQqXOM=\ngithub.com/gojek/valkyrie v0.0.0-20180215180059-6aee720afcdf/go.mod h1:QzhUKaYKJmcbTnCYCAVQrroCOY7vOOI8cSQ4NbuhYf0=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1 h1:EGx4pi6eqNxGaHF6qqu48+N2wcFQ5qg5FXgOdqsJ5d8=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 h1:N/ElC8H3+5XpJzTSTfLsJV/mx9Q9g7kxmchpfZyxgzM=\ngithub.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d h1:zE9ykElWQ6/NYmHa3jpm/yHnI4xSofP+UP6SpjHcSeM=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/goconvey v1.6.4 h1:fv0U8FUIMPNf1L9lnHLvLhgicrIVChEkdzIKYqbNC9s=\ngithub.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.3.0 h1:NGXK3lHquSN08v5vWalVI/L8XU9hdzE/G6xsrze47As=\ngithub.com/stretchr/objx v0.3.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=\ngithub.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\n"
        },
        {
          "name": "httpclient",
          "type": "tree",
          "content": null
        },
        {
          "name": "hystrix",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin.go",
          "type": "blob",
          "size": 0.306640625,
          "content": "package heimdall\n\nimport (\n\t\"net/http\"\n)\n\n// Plugin defines the interface that a Heimdall plugin must have\n// plugins can be added to a Heimdall client using the `AddPlugin` method\ntype Plugin interface {\n\tOnRequestStart(*http.Request)\n\tOnRequestEnd(*http.Request, *http.Response)\n\tOnError(*http.Request, error)\n}\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "retry.go",
          "type": "blob",
          "size": 1.1142578125,
          "content": "package heimdall\n\nimport \"time\"\n\n// Retriable defines contract for retriers to implement\ntype Retriable interface {\n\tNextInterval(retry int) time.Duration\n}\n\n// RetriableFunc is an adapter to allow the use of ordinary functions\n// as a Retriable\ntype RetriableFunc func(retry int) time.Duration\n\n// NextInterval calls f(retry)\nfunc (f RetriableFunc) NextInterval(retry int) time.Duration {\n\treturn f(retry)\n}\n\ntype retrier struct {\n\tbackoff Backoff\n}\n\n// NewRetrier returns retrier with some backoff strategy\nfunc NewRetrier(backoff Backoff) Retriable {\n\treturn &retrier{\n\t\tbackoff: backoff,\n\t}\n}\n\n// NewRetrierFunc returns a retrier with a retry function defined\nfunc NewRetrierFunc(f RetriableFunc) Retriable {\n\treturn f\n}\n\n// NextInterval returns next retriable time\nfunc (r *retrier) NextInterval(retry int) time.Duration {\n\treturn r.backoff.Next(retry)\n}\n\ntype noRetrier struct {\n}\n\n// NewNoRetrier returns a null object for retriable\nfunc NewNoRetrier() Retriable {\n\treturn &noRetrier{}\n}\n\n// NextInterval returns next retriable time, always 0\nfunc (r *noRetrier) NextInterval(retry int) time.Duration {\n\treturn 0 * time.Millisecond\n}\n"
        },
        {
          "name": "retry_test.go",
          "type": "blob",
          "size": 1.1416015625,
          "content": "package heimdall\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestRetrierWithExponentialBackoff(t *testing.T) {\n\n\texponentialBackoff := NewExponentialBackoff(2*time.Millisecond, 10*time.Millisecond, 2.0, 1*time.Millisecond)\n\texponentialRetrier := NewRetrier(exponentialBackoff)\n\n\tassert.True(t, 4*time.Millisecond <= exponentialRetrier.NextInterval(1))\n}\n\nfunc TestRetrierWithConstantBackoff(t *testing.T) {\n\tbackoffInterval := 2 * time.Millisecond\n\tmaximumJitterInterval := 1 * time.Millisecond\n\n\tconstantBackoff := NewConstantBackoff(backoffInterval, maximumJitterInterval)\n\tconstantRetrier := NewRetrier(constantBackoff)\n\n\tassert.True(t, 2*time.Millisecond <= constantRetrier.NextInterval(1))\n}\n\nfunc TestRetrierFunc(t *testing.T) {\n\tlinearRetrier := NewRetrierFunc(func(retry int) time.Duration {\n\t\tif retry <= 0 {\n\t\t\treturn 0 * time.Millisecond\n\t\t}\n\t\treturn time.Duration(retry) * time.Millisecond\n\t})\n\n\tassert.True(t, 3*time.Millisecond <= linearRetrier.NextInterval(4))\n}\n\nfunc TestNoRetrier(t *testing.T) {\n\tnoRetrier := NewNoRetrier()\n\tnextInterval := noRetrier.NextInterval(1)\n\tassert.Equal(t, time.Duration(0), nextInterval)\n}\n"
        }
      ]
    }
  ]
}