{
  "metadata": {
    "timestamp": 1736567137200,
    "page": 734,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gopher-os/gopher-os",
      "stars": 2587,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2841796875,
          "content": "# Binaries for programs and plugins\n*.exe\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# pkg folder when using pwd as a Go workspace\npkg/\n\n# build folders and vagrant data dir\nbuild/\n.vagrant\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.515625,
          "content": "language: go\nsudo: required\naddons:\n  apt:\n    packages:\n    - nasm\n    - binutils-2.26\n# Compile kernel with various go versions\ngo:\n  - 1.7.x\n  - 1.8.x\n  - 1.9.x\n  - 1.10.x\n  - 1.x\nstage: build kernel\nbefore_install:\n  - export PATH=/usr/lib/binutils-2.26/bin:${PATH}\nscript: make kernel\n\n# Run the tests against the latest go version\njobs:\n  include:\n    - stage: run tests\n      go: 1.x\n      script:\n        - make lint\n        - make collect-coverage\n      after_success:\n        - bash <(curl -s https://codecov.io/bash)\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 3.46875,
          "content": "## Building running and debugging gopher-os\n\nThe project Makefile contains targets for building either the kernel image or \na bootable ISO while running on Linux or OSX.\n\n## Building on Linux\n\nTo compile gopher-os wheh running on Linux you need a fairly recent version of:\n- binutils (>= 2.26.0)\n- xorriso\n- grub\n- nasm \n- gcc (for GNU ld)\n- go 1.7+\n\nThe above dependencies can be installed using the appropriate package manager \nfor each particular Linux distribution.\n\n## Building on OSX\n\nTo properly link the kernel object files so that the bootloader can pick up the \nmulti-boot signature we need to be able to control the linker configuration. For\nthe time being this is only possible when using GNU ld ([lld](https://lld.llvm.org/) \nis a potential alternative but doesn't yet fully support linker scripts).\n\nYou can still build the kernel using [vagrant](https://www.vagrantup.com/). For\nthis purpose, a Vagrantfile is provided so all you need to do is just install \nvagrant on your machine and run `vagrant up` before running any of the following \nmake commands.\n\n## Supported Makefile build targets \n\nThe project Makefile will work on both Linux and OSX (using vagrant) targets.\nWhen running under OSX, the Makefile will ensure that all build-related commands\nactually run inside the vagrant box. The following build targets are\nsupported:\n- `kernel`: compile the code into an elf binary.\n- `iso`: compile the code and build a bootable ISO using grub as the\n  bootloader.\n\n## Booting the gopher-os ISO file \n\nOnce the kernel ISO is successfully built, either [qemu](http://www.qemu-project.org/) or\n[virtualbox](https://www.virtualbox.org/) can be used to boot it. The Makefile \nprovides handy targets for doing this:\n- `make run-qemu` \n- `make run-vbox`\n\n## Supported kernel command line options \n\nTo apply any of the following command line arguments there are two options:\n1) patch [grub.cfg](src/arch/x86_64/script/grub.cfg) before building the kernel image and \n   append the required command line arguments at the end of the lines starting with `multiboot2`\n2) alternatively, you can boot the ISO, wait for the grub menu to appear and press `e`. This \n   will bring up an editor where you can modify the command line before booting the kernel.\n\nThe following command line options are currently supported:\n\n| Command | Description \n|-----------------------|-------------\n|consoleFont=$fontName  | use a particular font name (e.g terminus10x18). This option is only used by console drivers supporting bitmap fonts. The set of built-in fonts is located [here](src/gopheros/device/video/console/font). If this option is not specified, the console driver will pick the best font size for the console resolution\n|consoleLogo=off        | disable the console logo. This option is only valid for console drivers that support logos.\n\n## Debugging the kernel \n\nIf you wish to debug the kernel, you need to install gdb. Unfortunately the \ngdb version that ships with most Linux distributions (and also the one that \ncan be installed with `brew` on OSX) has a bug which prevents gdb from properly \nhandling CPU switches from 32-bit protected to 64-bit long mode. This causes \nproblems when trying to debug the kernel while it is running on qemu. The \nsolution to this problem is to manually compile and install a patched gdb version which is \navailable [here](https://github.com/phil-opp/binutils-gdb).\n\nThe Makefile provides a `gdb` target which compiles the kernel, builds the ISO \nfile, launches qemu and attaches an interactive gdb session to it.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0224609375,
          "content": "# Contributing Guide\n\n## Getting Started\n\n- Make sure you have a [GitHub Account](https://github.com/signup/free).\n- Make sure you have [Git](http://git-scm.com/) installed on your system.\n- [Fork](https://help.github.com/articles/fork-a-repo) the [repository](https://github.com/achilleasa/gopher-os) on GitHub.\n\n## Making Changes\n\n - [Create a branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository) for your changes.\n - [Commit your code](http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository) for each logical change (see [tips for creating better commit messages](http://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message)).\n - [Push your change](https://help.github.com/articles/pushing-to-a-remote) to your fork.\n - [Create a Pull Request](https://help.github.com/articles/creating-a-pull-request) on GitHub for your change.\n\nThe PR description should be as detailed as possible. This makes reviewing\nmuch easier while at the same time serves as additional documentation that can \nbe referenced by future commits/PRs.\n\nThis project treats the root folder of the repository as a Go [workspace](https://golang.org/doc/code.html#Workspaces). This\napproach has several benefits:\n- it keeps import paths short (no github.com/... prefix)\n- it makes forking and merging easier\n- it simplifies debugging (more compact symbol names)\n\nTo develop for gopher-os you need to tweak your GOPATH so that the repository\nfolder is listed before any other GOPATH entry. This allows tools like\n`goimports` to figure out the correct (short) import path for any gopher-os\npackage that your code imports. A simple way to do this would be by running the \nfollowing command: ```export GOPATH=`pwd`:$GOPATH```.\n\n## Unit tests and code linting\n\nBefore submitting a PR make sure:\n- that your code passes all lint checks: `make lint`\n- you provide the appropriate unit-tests to ensure that the coverage does not \n  drop below the existing value (currently 100%). Otherwise, when you submit the \n  PR, the CI builder ([travis-ci](https://travis-ci.org)) will flag the build as \n  broken.\n\nReaching 100% coverage is quite hard and requires the code to be designed with\ntestability in mind. This can get quite tricky if the code you are testing\nrelies on code that cannot be executed while running the tests. For example, if\nthe code you are currently working on needs to map some pages to virtual memory\nthen any call to the vmm package from your test code will cause the `go test`\nto segfault.\n\nIn cases like this, you need to design the code so calls to such packages can\nbe easily mocked while testing. If you are looking for inspiration here are\nsome examples that follow this approach: \n- [bitmap allocator tests](https://github.com/achilleasa/gopher-os/blob/d804b17ed8651705f098d01bda65d8f0ded2c88e/src/gopheros/kernel/mem/pmm/allocator/bitmap_allocator_test.go#L15)\n- [text console driver tests](https://github.com/achilleasa/gopher-os/blob/4b25971cef4bfd01877e3b5e948ee07a8f219608/src/gopheros/device/video/console/vga_text_test.go#L276)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "MIT License\n\nCopyright (c) 2017 Achilleas Anagnostopoulos\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 8.2646484375,
          "content": "export SHELL := /bin/bash -o pipefail\n\nOS = $(shell uname -s)\nBUILD_DIR := build\nBUILD_ABS_DIR := $(CURDIR)/$(BUILD_DIR)\n\nVBOX_VM_NAME := gopher-os\nQEMU ?= qemu-system-x86_64\n\n# If your go is called something else set it on the commandline, like this: make run GO=go1.8\nGO ?= go\nGOARCH := amd64\nGOROOT := $(shell $(GO) env GOROOT)\n\n# Prepend build path to GOPATH so the compiled packages and linter dependencies\n# end up inside the build folder\nGOPATH := $(BUILD_ABS_DIR):$(shell pwd):$(GOPATH)\n\nLD := ld\nLD_FLAGS := -n -T $(BUILD_DIR)/linker.ld -static --no-ld-generated-unwind-info\n\nAS := nasm\nAS_FLAGS := -g -f elf64 -F dwarf -I $(BUILD_DIR)/ -I src/arch/$(GOARCH)/rt0/ \\\n\t    -dNUM_REDIRECTS=$(shell GOPATH=$(GOPATH) $(GO) run tools/redirects/redirects.go count)\n\nGC_FLAGS ?=\n\nkernel_target :=$(BUILD_DIR)/kernel-$(GOARCH).bin\niso_target := $(BUILD_DIR)/kernel-$(ARCH).iso\n\nFUZZ_PKG_LIST := src/gopheros/device/acpi/aml\n# To append more entries to the above list use the following syntax\n# FUZZ_PKG_LIST += path-to-pkg\n\nifeq ($(OS), Linux)\nGOOS := linux\n\nMIN_OBJCOPY_VERSION := 2.26.0\nHAVE_VALID_OBJCOPY := $(shell objcopy -V | head -1 | awk -F ' ' '{print \"$(MIN_OBJCOPY_VERSION)\\n\" $$NF}' | sort -ct. -k1,1n -k2,2n && echo \"y\")\n\nasm_src_files := $(wildcard src/arch/$(GOARCH)/rt0/*.s)\nasm_obj_files := $(patsubst src/arch/$(GOARCH)/rt0/%.s, $(BUILD_DIR)/arch/$(GOARCH)/rt0/%.o, $(asm_src_files))\n\n.PHONY: kernel iso clean binutils_version_check\n\nkernel: binutils_version_check kernel_image\n\nkernel_image: $(kernel_target)\n\t@echo \"[tools:redirects] populating kernel image redirect table\"\n\t@GOPATH=$(GOPATH) $(GO) run tools/redirects/redirects.go populate-table $(kernel_target)\n\n$(kernel_target): asm_files linker_script go.o\n\t@echo \"[$(LD)] linking kernel-$(GOARCH).bin\"\n\t@$(LD) $(LD_FLAGS) -o $(kernel_target) $(asm_obj_files) $(BUILD_DIR)/go.o\n\ngo.o:\n\t@mkdir -p $(BUILD_DIR)\n\n\t@echo \"[go] compiling go sources into a standalone .o file\"\n\t@GOARCH=$(GOARCH) GOOS=$(GOOS) GOPATH=$(GOPATH) $(GO) build -gcflags '$(GC_FLAGS)' -n gopheros 2>&1 | sed \\\n\t    -e \"1s|^|set -e\\n|\" \\\n\t    -e \"1s|^|export GOOS=$(GOOS)\\n|\" \\\n\t    -e \"1s|^|export GOARCH=$(GOARCH)\\n|\" \\\n\t    -e \"1s|^|export GOROOT=$(GOROOT)\\n|\" \\\n\t    -e \"1s|^|export CGO_ENABLED=0\\n|\" \\\n\t    -e \"1s|^|alias pack='$(GO) tool pack'\\n|\" \\\n\t    -e \"/^mv/d\" \\\n\t    -e \"/\\/buildid/d\" \\\n\t    -e \"s|-extld|-tmpdir='$(BUILD_ABS_DIR)' -linkmode=external -extldflags='-nostartfiles -nodefaultlibs -nostdlib -r' -extld|g\" \\\n\t    -e 's|$$WORK|$(BUILD_ABS_DIR)|g' \\\n            | sh 2>&1 |  sed -e \"s/^/  | /g\"\n\n\t@# build/go.o is a elf32 object file but all go symbols are unexported. Our\n\t@# asm entrypoint code needs to know the address to 'main.main' so we use\n\t@# objcopy to make that symbol exportable. Since nasm does not support externs\n\t@# with slashes we create a global symbol alias for kernel.Kmain\n\t@echo \"[objcopy] create kernel.Kmain alias to gopheros/kernel/kmain.Kmain\"\n\t@echo \"[objcopy] globalizing symbols {runtime.g0/m0/physPageSize}\"\n\t@objcopy \\\n\t\t--add-symbol kernel.Kmain=.text:0x`nm $(BUILD_DIR)/go.o | grep \"kmain.Kmain$$\" | cut -d' ' -f1` \\\n\t\t--globalize-symbol runtime.g0 \\\n\t\t--globalize-symbol runtime.m0 \\\n\t\t--globalize-symbol runtime.physPageSize \\\n\t\t $(BUILD_DIR)/go.o $(BUILD_DIR)/go.o\n\nbinutils_version_check:\n\t@echo \"[binutils] checking that installed objcopy version is >= $(MIN_OBJCOPY_VERSION)\"\n\t@if [ \"$(HAVE_VALID_OBJCOPY)\" != \"y\" ]; then echo \"[binutils] error: a more up to date binutils installation is required\" ; exit 1 ; fi\n\niso_prereq: xorriso_check grub-mkrescue_check\n\nxorriso_check:\n\t@if xorriso --version >/dev/null 2>&1; then exit 0; else echo \"Install xorriso via 'sudo apt install xorriso'.\" ; exit 1 ; fi\n\ngrub-mkrescue_check:\n\t@if grub-mkrescue --version >/dev/null 2>&1; then exit 0; else echo \"Install package grub-pc-bin via 'sudo apt install grub-pc-bin'.\"; exit 1; fi\n\nlinker_script:\n\t@echo \"[sed] extracting LMA and VMA from constants.inc\"\n\t@echo \"[gcc] pre-processing arch/$(GOARCH)/script/linker.ld.in\"\n\t@gcc `cat src/arch/$(GOARCH)/rt0/constants.inc | sed -e \"/^$$/d; /^;/d; s/^/-D/g; s/\\s*equ\\s*/=/g;\" | tr '\\n' ' '` \\\n\t\t-E -x \\\n\t\tc src/arch/$(GOARCH)/script/linker.ld.in | grep -v \"^#\" > $(BUILD_DIR)/linker.ld\n\n$(BUILD_DIR)/go_asm_offsets.inc:\n\t@mkdir -p $(BUILD_DIR)\n\n\t@echo \"[tools:offsets] calculating OS/arch-specific offsets for g, m and stack structs\"\n\t@GOROOT=$(GOROOT) GOPATH=$(GOPATH) $(GO) run tools/offsets/offsets.go -target-os $(GOOS) -target-arch $(GOARCH) -go-binary $(GO) -out $@\n\n$(BUILD_DIR)/arch/$(GOARCH)/rt0/%.o: src/arch/$(GOARCH)/rt0/%.s\n\t@mkdir -p $(shell dirname $@)\n\t@echo \"[$(AS)] $<\"\n\t@$(AS) $(AS_FLAGS) $< -o $@\n\nasm_files: $(BUILD_DIR)/go_asm_offsets.inc $(asm_obj_files)\n\niso: $(iso_target)\n\n$(iso_target): iso_prereq kernel_image\n\t@echo \"[grub] building ISO kernel-$(GOARCH).iso\"\n\n\t@mkdir -p $(BUILD_DIR)/isofiles/boot/grub\n\t@cp $(kernel_target) $(BUILD_DIR)/isofiles/boot/kernel.bin\n\t@cp src/arch/$(GOARCH)/script/grub.cfg $(BUILD_DIR)/isofiles/boot/grub\n\t@grub-mkrescue -o $(iso_target) $(BUILD_DIR)/isofiles 2>&1 | sed -e \"s/^/  | /g\"\n\t@rm -r $(BUILD_DIR)/isofiles\n\nelse\nVAGRANT_SRC_FOLDER = /home/vagrant/workspace\n\n.PHONY: kernel iso vagrant-up vagrant-down vagrant-ssh run gdb clean lint lint-check-deps test collect-coverage\n\nkernel:\n\tvagrant ssh -c 'cd $(VAGRANT_SRC_FOLDER); make GC_FLAGS=\"$(GC_FLAGS)\" kernel'\n\niso:\n\tvagrant ssh -c 'cd $(VAGRANT_SRC_FOLDER); make GC_FLAGS=\"$(GC_FLAGS)\" iso'\n\nendif\n\nrun-qemu: GC_FLAGS += -B\nrun-qemu: iso\n\t$(QEMU) -cdrom $(iso_target) -vga std -d int,cpu_reset -no-reboot\n\nrun-vbox: iso\n\tVBoxManage createvm --name $(VBOX_VM_NAME) --ostype \"Linux_64\" --register || true\n\tVBoxManage storagectl $(VBOX_VM_NAME) --name \"IDE Controller\" --add ide || true\n\tVBoxManage storageattach $(VBOX_VM_NAME) --storagectl \"IDE Controller\" --port 0 --device 0 --type dvddrive \\\n\t\t--medium $(iso_target) || true\n\tVBoxManage startvm $(VBOX_VM_NAME)\n\n# When building gdb target disable optimizations (-N) and inlining (l) of Go code\ngdb: GC_FLAGS += -N -l\ngdb: iso\n\t$(QEMU) -M accel=tcg -vga std -s -S -cdrom $(iso_target) &\n\tsleep 1\n\tgdb \\\n\t    -ex 'add-auto-load-safe-path $(pwd)' \\\n\t    -ex 'set disassembly-flavor intel' \\\n\t    -ex 'layout split' \\\n\t    -ex 'set arch i386:intel' \\\n\t    -ex 'file $(kernel_target)' \\\n\t    -ex 'target remote localhost:1234' \\\n\t    -ex 'set arch i386:x86-64:intel' \\\n\t    -ex 'source $(GOROOT)/src/runtime/runtime-gdb.py' \\\n\t    -ex 'set substitute-path $(VAGRANT_SRC_FOLDER) $(shell pwd)'\n\t@killall $(QEMU) || true\n\nclean:\n\t@test -d $(BUILD_DIR) && rm -rf $(BUILD_DIR) || true\n\nlint: lint-check-deps\n\t@echo \"[gometalinter] linting sources\"\n\t@GOCACHE=off GOPATH=$(GOPATH) PATH=$(BUILD_ABS_DIR)/bin:$(PATH) gometalinter.v1 \\\n\t\t--disable-all \\\n\t\t--enable=deadcode \\\n\t\t--enable=errcheck \\\n\t\t--enable=gosimple \\\n\t\t--enable=ineffassign \\\n\t\t--enable=misspell \\\n\t\t--enable=staticcheck \\\n\t\t--enable=vet \\\n\t\t--enable=vetshadow \\\n\t\t--enable=unconvert \\\n\t\t--enable=varcheck \\\n\t\t--enable=golint \\\n\t\t--enable=gofmt \\\n\t\t--deadline 300s \\\n\t\t--exclude 'possible misuse of unsafe.Pointer' \\\n\t\t--exclude 'x \\^ 0 always equals x' \\\n\t\t--exclude 'dispatchInterrupt is unused' \\\n\t\t--exclude 'interruptGateEntries is unused' \\\n\t\t--exclude 'yieldFn is unused' \\\n\t\tsrc/...\n\nlint-check-deps:\n\t@echo [go get] installing linter dependencies\n\t@GOPATH=$(GOPATH) $(GO) get -u -t gopkg.in/alecthomas/gometalinter.v1\n\t@GOPATH=$(GOPATH) PATH=$(BUILD_ABS_DIR)/bin:$(PATH) gometalinter.v1 --install >/dev/null\n\ntest:\n\tGOCACHE=off GOPATH=$(GOPATH) $(GO) test -cover gopheros/...\n\nfuzz-deps:\n\t@mkdir -p $(BUILD_DIR)/fuzz\n\t@echo [go get] installing go-fuzz dependencies\n\t@GOPATH=$(GOPATH) $(GO) get -u github.com/dvyukov/go-fuzz/...\n\n%.fuzzpkg: %\n\t@echo [go-fuzz] fuzzing: $<\n\t@GOPATH=$(GOPATH) PATH=$(BUILD_ABS_DIR)/bin:$(PATH) go-fuzz-build -o $(BUILD_ABS_DIR)/fuzz/$(subst /,_,$<).zip $(subst src/,,$<)\n\t@mkdir -p $(BUILD_ABS_DIR)/fuzz/corpus/$(subst /,_,$<)/corpus\n\t@echo [go-fuzz] + grepping for corpus file hints in $<\n\t@grep \"go-fuzz-corpus+=\" $</*fuzz.go | cut -d'=' -f2 | tr '\\n' '\\0' | xargs -0 -I@ sh -c 'export F=\"@\"; cp $$F $(BUILD_ABS_DIR)/fuzz/corpus/$(subst /,_,$<)/corpus/ && echo \"[go fuzz]   + copy extra corpus file: $$F\"'\n\t@go-fuzz -bin=$(BUILD_ABS_DIR)/fuzz/$(subst /,_,$<).zip -workdir=$(BUILD_ABS_DIR)/fuzz/corpus/$(subst /,_,$<) 2>&1 | sed -e \"s/^/  | /g\"\n\ntest-fuzz: fuzz-deps $(addsuffix .fuzzpkg,$(FUZZ_PKG_LIST))\n\ncollect-coverage:\n\tGOPATH=$(GOPATH) sh coverage.sh\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.0703125,
          "content": "# gopher-os [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)\n\n| Tests / Coverage                                                       | Go 1.7.x            | Go 1.8.x            | Go 1.9.x            | Go 1.10.x            | Go 1.x            |\n|------------------------------------------------------------------------|---------------------|---------------------|---------------------|----------------------|-------------------|\n| [![Build Status][0]][6] [![Coverage][7]][8] [![Go Report Card][9]][10] | [![go 1.7.x][1]][6] | [![go 1.8.x][2]][6] | [![Go 1.9.x][3]][6] | [![go 1.10.x][4]][6] | [![go 1.x][5]][6] |\n\n[0]: https://travis-ci.org/achilleasa/gopher-os.svg?branch=master\n[1]: https://travis-matrix-badges.herokuapp.com/repos/achilleasa/gopher-os/branches/master/1\n[2]: https://travis-matrix-badges.herokuapp.com/repos/achilleasa/gopher-os/branches/master/2\n[3]: https://travis-matrix-badges.herokuapp.com/repos/achilleasa/gopher-os/branches/master/3\n[4]: https://travis-matrix-badges.herokuapp.com/repos/achilleasa/gopher-os/branches/master/4\n[5]: https://travis-matrix-badges.herokuapp.com/repos/achilleasa/gopher-os/branches/master/5\n[6]: https://travis-ci.org/achilleasa/gopher-os\n[7]: https://codecov.io/gh/achilleasa/gopher-os/branch/master/graph/badge.svg\n[8]: https://codecov.io/gh/achilleasa/gopher-os\n[9]: https://goreportcard.com/badge/github.com/achilleasa/gopher-os\n[10]: https://goreportcard.com/report/github.com/achilleasa/gopher-os\n\nThe goal of this project is to build a 64-bit POSIX-compliant tick-less kernel\nwith a Linux-compatible syscall implementation using [Go](https://golang.org). \n\nThis project is not about building yet another OS but rather exists to serve as\nproof that Go is indeed a suitable tool for writing low level code that runs\nat ring-0.\n\n**Note**: This project is still in the early stages of development and is not yet\nin a usable state. In fact, if you build the ISO and boot it, the kernel will \neventually panic with a `Kmain returned` error.\n\nTo find out more about the current project status and feature roadmap take a\nlook at the [status](STATUS.md) page.\n\n## Building and running gopher-os \n\nTLDR version: `make run-qemu` or `make run-vbox`. \n\nA detailed guide about building, running and debugging gopher-os on\nLinux/OSX as well as the list of supported boot command line options are\navailable [here](BUILD.md).\n\n## How does it look?\n\n80x25 (stadard 8x16 font): ![80x25 with standard 8x16 font][cons-80x25]\n\n1024x768 (10x18 font): ![1024x768x32 with 10x18 font][cons-1024x768]\n\n2560x1600 (14x28 font): ![retina mode (2560x1600) with 14x28 font][cons-2560x1600]\n\n[cons-80x25]: https://drive.google.com/uc?export=download&id=0Bz9Vk3E_v2HBb3NHY1JtTFFZckU\n[cons-1024x768]: https://drive.google.com/uc?export=download&id=0Bz9Vk3E_v2HBZ1M3MTNjc3NaOXM\n[cons-2560x1600]: https://drive.google.com/uc?export=download&id=0Bz9Vk3E_v2HBbjBNSEJlTmJTelE\n\n## Contributing\n\ngopher-os is Open Source. Feel free to contribute! To get started take a look \nat the contributing [guide](CONTRIBUTING.md).\n\n## Licence\n\ngopher-os is distributed under the [MIT](LICENSE) license.\n"
        },
        {
          "name": "STATUS.md",
          "type": "blob",
          "size": 1.685546875,
          "content": "## Current project status \n\nHere is the list of features currently working as well as some of the next \nsteps in the project roadmap.\n\n#### Core kernel features \n- Bootloader-related\n\t- [x] Multboot structure parsing (boot cmdline, memory maps, framebuffer and kernel image details)\n- CPU \n\t- [x] CPUID wrapper\n\t- [x] Port R/W abstraction\n- Memory management\n\t- [x] Physical frame allocators (bootmem-based, bitmap allocator)\n\t- [x] VMM system (page table management, virtual address space reservations, page RW/NX bits, page walk/translation helpers and copy-on-write pages)\n- Exception handling\n\t- [x] Page fault handling (also used to implement CoW)\n\t- [x] GPF handling \n- Hardware detection/abstraction layer\n\t- [x] Multiboot-based HW detection \n\t- [ ] ACPI-based HW detection\n\n#### Supported Go language features:\n- [x] Go allocator \n- [x] Maps \n- [x] Interfaces \n- [x] Package init() functions\n- [x] Defer\n- [x] Panic\n- [ ] GC\n- [ ] Go-routines\n\n#### Device drivers\n- Console\n\t- [x] Text-mode console \n\t- [x] Vesa-fb (15, 16, 24 and 32 bpp) console with support for bitmap fonts and (optional) logo\n- TTY\n\t- [x] Simple VT\n- ACPI 6.2 support (**in progress**)\n\t- [x] ACPI table detection and parsing \n\t- [x] AML parser\n\t- [ ] AML interpreter/VM\n- Interrupt handling chip drivers\n\t- [ ] APIC\n- Timer and time-keeping drivers\n\t- [ ] APM timer \n\t- [ ] APIC timer \n\t- [ ] HPET\n\t- [ ] RTC\n- Timekeeping system \n\t- [ ] Monotonic clock (configurable timer implementation)\n### Feature roadmap \n\nHere is a list of features planned for the future:\n- RAMDISK support (tar/bz2)\n- Loadable modules (using a mechanism analogous to Go plugins)\n- Tasks and scheduling \n- Network device drivers\n- Hypervisor support\n- POSIX-compliant VFS\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 1.08984375,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant.configure(\"2\") do |config|\n  config.vm.define \"gopheros-build\" do |v|\n  end\n\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.customize [\"modifyvm\", :id, \"--usb\", \"on\"]\n    vb.customize [\"modifyvm\", :id, \"--usbehci\", \"off\"]\n    vb.customize [\"modifyvm\", :id, \"--cableconnected1\", \"on\"]\n  end\n\n  config.vm.box = \"minimal/xenial64\"\n\n  config.vm.synced_folder \"./\", \"/home/vagrant/workspace\"\n\n  config.vm.provision \"shell\", inline: <<-SHELL\n    apt-get update\n    apt-get install -y nasm make xorriso binutils gcc\n    [ ! -d \"/usr/local/go\" ] && wget -qO- https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz | tar xz -C /usr/local\n    mkdir -p /home/vagrant/go/src\n    mkdir -p /home/vagrant/go/bin\n    mkdir -p /home/vagrant/go/pkg\n    chown -R vagrant:vagrant /home/vagrant/go\n    echo \"export GOROOT=/usr/local/go\" > /etc/profile.d/go.sh\n    echo \"export GOBIN=/usr/local/go/bin\" >> /etc/profile.d/go.sh\n    echo \"export GOPATH=/home/vagrant/go\" >> /etc/profile.d/go.sh\n    echo \"export PATH=$PATH:/usr/local/go/bin\" >> /etc/profile.d/go.sh\n  SHELL\nend\n"
        },
        {
          "name": "coverage.sh",
          "type": "blob",
          "size": 0.2666015625,
          "content": "#!/usr/bin/env bash\nset -e\n\necho \"\" > coverage.txt\n\nfor d in $(go list ./... | grep gopheros); do\n    go test -v -race -coverprofile=profile.out -covermode=atomic $d\n    if [ -f profile.out ]; then\n        cat profile.out >> coverage.txt\n        rm profile.out\n    fi\ndone\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}