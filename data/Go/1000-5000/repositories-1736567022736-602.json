{
  "metadata": {
    "timestamp": 1736567022736,
    "page": 602,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xyproto/algernon",
      "stars": 2861,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".algernon",
          "type": "blob",
          "size": 0.03515625,
          "content": "[main]\ntitle = \"--=[ Algernon ]=--\"\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0654296875,
          "content": ".git\n.gitignore\nalg2docker\napps\neditors\nimg\nsystem\ndesktop\nregtest\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.40234375,
          "content": "*.bak\n*.bak\n*.cpu\n*.exe\n*.exe~\n*.log\n*.mem\n*.o\n*.orig\n*.out\n*.prof\n*.rej\n*.swp\n*.tmp\n.DS_Store\n.vscode/\n_vendor-*/\nalg2docker/Dockerfile\nalgernon\nalgernon.1.gz\nalgernon.debug\nalgernon.log\napps/first\napps/withplugins\nbolt.db\ncomments.json\ndump.rdb\nexamples/a\nhttp2.log\ninclude.txt\noutput.b64\nplugins/cpp/main\nplugins/go/go\nregtest/issue13/large-file\nrelease/\nsamples/flush\nsamples/getip/ip.md\ntest.json\ntrace.out\n"
        },
        {
          "name": ".ignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "vendor\n"
        },
        {
          "name": "ChangeLog.md",
          "type": "blob",
          "size": 21.7587890625,
          "content": "# Changelog\n\nChanges from 1.17.0 to 1.17.1\n=============================\n\n* Patch the `pingcap/tidb` dependency so that Algernon still compiles for ARM 6 and ARM 7.\n* Add the `oc:distance()` Lua method for finding the distance between two LLM prompts.\n* Let the `embeddedDistance` Lua function take a 3rd argument: `euclidean`, `manhattan`, `chebyshev`, `hamming` or `cosine`.\n* Improve the image description example.\n* Improve how images are served when serving a single Markdown document.\n* Fix the double opening of the browser when both `-m` and `-o` are specified.\n* Also cache `.webp` images, if caching of images is enabled.\n* Update dependencies.\n* Update documentation.\n\nChanges from 1.16.0 to 1.17.0\n=============================\n\n* Add three Ollama-related functions: `base64EncodeFile`, `describeImage` and `embeddedDistance`.\n* Add an example for uploading and describing images with Ollama and the `llava-llama3` model.\n* Add a `base64` method to `UploadedFile` objects.\n* Update the Teal example.\n* Improve the \"pretty error page\" that appears if there is an error in a Lua script.\n* Let some variables be constants instead.\n* Avoid using `runtime.GOOS` and detect most features at compile time instead.\n* Use two `atomic.Bool` variables instead of a mutex for keeping track of how data is being served.\n* Import `logrus` as \"logrus\" instead of as \"log\".\n* Use `strconf.FormatInt` instead of `fmt.Sprintf` whenever possible.\n* Use `github.com/pkg/browser` for opening URLs in a browser.\n* Fix an issue with inserting JS into HTML.\n* Serve HTTP with `fasthttp´ (ref #4)\n* Improve how favicons are handled.\n* Make it possible to ignore files in a directory listing (ref #149).\n* Add a `sanhtml` function for sanitizing HTML.\n* Add experimental support for mathematical formulas in Markdown using MathJax (ref #150).\n* Add an example that renders mathematical formulas.\n* Remove `GOEXPERIMENT=loopvar` since it is no longer needed.\n* Follow the advice of `golint`.\n* Update documentation.\n* Update dependencies.\n\nChanges from 1.15.5 to 1.16.0\n=============================\n\n* Make it possible to clear the AI cache with `ClearCache()`.\n* Add support for using AI/LLMs (Ollama) from Lua.\n* Add support for `.prompt` files that contains a content-type, a model name, a blank line and a prompt.\n* Make small changes to the built-in themes.\n* Update CI configuration.\n* Require Go 1.21 or later, mostly because of the QUIC dependency.\n* Update the year in the license file.\n* Minor changes to the `alg2docker` script.\n* Update the react jsonfile example.\n* Update the TODO list example to the latest version of React.\n* Update the React + JSX + database example.\n* Add the loopvar feature to the dockerfiles.\n* Use LABEL maintainer in the Dockerfiles.\n* Combine several build and run scripts related to docker.\n* Add a simple tutorial.\n* Remove some unused code.\n* Update documentation.\n* Update dependencies.\n\nChanges from 1.15.4 to 1.15.5\n=============================\n\n* Make the Makefile clearer.\n* Update the form/registration example.\n* Update dependencies.\n\nChanges from 1.15.3 to 1.15.4\n=============================\n\n* Improve field alignment using `dkorunic/betteralign`.\n* Update dependencies.\n\nChanges from 1.15.2 to 1.15.3\n=============================\n\n* Set `GOEXPERIMENT=loopvar` and adjust the build flags.\n* Enable profile-guided optimization.\n* Update the benchmark script.\n* Check the arguments for the `servedir` Lua function.\n* Update the GH action for Homebrew.\n* Make the prefixmatch tests pass.\n* Remove the `github.com/bmizerany/assert` dependency.\n* Update the CI configuration.\n* Move two functions to `github.com/xyproto/files`.\n* Minor changes to the welcome script.\n* Minor changes to a test.\n* Minor changes to the Teal example.\n* Update dependencies.\n\nChanges from 1.15.1 to 1.15.2\n=============================\n\n* Serve `.json` files a tiny bit faster.\n* Serve Algernon web applications (`.alg` files) from memory, ref #132 (thanks Dialga / @Dialga).\n* Remove a duplicate word from the `README.md` file (thanks Philipp Gillé / @philippgille).\n* Update dependencies.\n\nChanges from 1.15.0 to 1.15.1\n=============================\n\n* Switch from `blackfriday` to `gomarkdown/markdown`.\n* Add a simple example that uses the `markdown` function.\n* Update the CI configuration.\n* Update dependencies.\n* Update documentation.\n\nChanges from 1.14.0 to 1.15.0\n=============================\n\n* Compile the release binaries with Go 1.20.4.\n* Add a `close()` function, ref #124 (thanks Malcolm Ke Win / @diyism).\n* Add a shell linter to the CI configuration, ref #120 (thanks Jan Macku / @jamacku).\n* Support reverse proxies, ref #131 (thanks Mohamed Abdel Maksoud / @mohamed--abdel-maksoud).\n* Look for `handler.lua` in parent directories, ref #95, #112 and #130 (thanks Giulio Lunati / @giuliolunati).\n* Add initial support for JWT tokens.\n* Use `os` and `io`instead of the deprecated `ioutil` package.\n* Use `any` instead of `interface{}`.\n* Use the new `unix` build constraint.\n* Use `strings.ReplaceAll` and `bytes.ReplaceAll`.\n* Use `simpleredis/v2`.\n* Use `math.Round`.\n* Add an `ulimit` check to the `welcome.sh` script that also works on macOS Ventura.\n* Format/lint the code with `gofumpt`, `golint` and `staticcheck`.\n* Use the `betteralign` tool, to improve struct field alignment.\n* Make the code debug/tracing/profiling features optional at compile time, using build tags.\n* Fix a typo in one of the examples.\n* Update the CI configuration.\n* Update dependencies.\n* Update documentation.\n\nChanges from 1.13.0 to 1.14.0\n=============================\n\n* Compile the release binaries with Go 1.19.\n* Improve the documentation (thanks Matt Mc / @tooolbox ).\n* Add support for Teal together with a Teal sample (thanks Matt Mc / @tooolbox).\n* Fix an issue with how Lua tables were pretty printed in the REPL.\n* Fix an issue with conversion from Lua tables to JSON, ref #107, #108 (thanks @linkerlin).\n* Fix an issue with the generated directory listing pages, where `%2F` would appear in the URL instead of `/`, ref #117.\n* Follow the advice of these utilities: `go fmt`, `golint`, `staticcheck` and to some extent `fieldalignment`.\n* Update dependencies.\n\nChanges from 1.12.14 to 1.13.0\n==============================\n\n* Add a flag for serving domains with CertMagic and Let's Encrypt\n* Add a flag for redirecting from HTTP to HTTPS\n* Use `req.Context` since `CloseNotifier` has been deprecated\n* Switch to Go 1.18\n* Switch from the MIT license to BSD-3\n* Fix double drawn frames around syntax highlighted code in Markdown documents\n* URL encode links when listing directories\n* Use the same directory as the pongo2 template when importing macros, ref #84\n* Let plugins continue to run if an optional argument is passed in, ref #64 (otherwise close them)\n* Switch from jvatic/goja-babel to wvanw/esbuild, ref #77 (#91)\n* Improve JSX-related error messages\n* Use yuin/gopher-lua and yuin/gluamapper\n* Use a context when running Lua functions and use the background context when creating the Lua pool\n* Update the alg2docker and benchmark scripts\n* Update the `--help` output\n* Fix a typo in the \"single.alg\" example Algernon application\n* Update example service and Dockerfiles\n* Add a base URL flag for the directory listing (#90 ?)\n* Follow the advice of the \"fieldalignment\" and \"staticcheck\" utilies\n* Fix the `serve2` function so that the registration form example works\n* Update tests, dependencies, examples and documentation\n\nChanges from 1.12.13 to 1.12.14\n===============================\n\n* Downgrade fsnotify to v1.4.9 so that building with GOOS=freebsd works again\n\nChanges from 1.12.12 to 1.12.13\n===============================\n\n* Fix a typo in the documentation (thanks Felix Yan)\n* Add support for simple MSSQL queries, ref #57\n* Improve MSSQL support (thanks Matt Mc)\n* Improvements to table mappings in Lua, including changes to gluamapper (thanks Matt Mc)\n* Support headers in buffered responses, ref #75 (thanks Matt Mc)\n* Improvements to the file upload functionality (thanks Matt Mc)\n* Various minor fixes and improvements (thanks Matt Mc)\n* Add three new repl commands: `pwd`, `serverdir` and `serverfile`\n* Add nicer help output for built-in commands to the repl\n* Add a `ServerDir` function for the server configuration Lua script\n* Fix wasm mimetype issue, ref #82\n* Fix the Babl plugin configuration after updating the Babl dependency\n* Various improvements to the samples and to the \"Welcome\" page\n* Follow the advice of `go vet`, `golint` and `staticcheck`\n* Support Go 1.16 and Go 1.17 only, for now\n* Update CI configuration\n* Update dependencies\n* Update documentation\n\nChanges from 1.12.11 to 1.12.12\n===============================\n\n* Only include QUIC support on supported platforms. This should let Algernon build for the Apple M1 CPU.\n\nChanges from 1.12.10 to 1.12.11\n===============================\n\n* Remove OpenBSD support while waiting for [pkg/term](https://github.com/pkg/term) to support it.\n\nChanges from 1.12.9 to 1.12.10\n==============================\n\n* Use a specific commit of [pkg/term](https://github.com/pkg/term) so that it also compiles for FreeBSD.\n\nChanges from 1.12.8 to 1.12.9\n=============================\n\n* Improve the man page.\n* Minor improvements for the help and completion functionality in the REPL.\n* Let several `algernon --lua` instances not use the same temporary database.\n* Let `.mk`, `.ts` and `.tsx` be served as `text/plain;charset=utf-8`.\n* Initial support for rendering `.frm` and `.form` files written in SimpleForm.\n* Fix for making it possible to use `.` together with `--autorefresh`.\n* Minor fixes to the docker example files.\n* Correct a typo in a comment (thanks Felix Yan).\n* Update the Travis CI configuration (thanks Rui Chen).\n* Follow the advice of the very useful `staticcheck` utility.\n* Update documentation.\n* Update dependencies.\n\nChanges from 1.12.7 to 1.12.8\n=============================\n\n* Update documentation.\n* Improve CI config and Homebrew release process (thanks Rui Chen!).\n* Update supplied systemd configuration.\n* Remove mentions of nacl.\n* Remove the `mitchellh/colorstring` dependency.\n* Update dependencies.\n* Use `algernon_history.txt` as the REPL history filename on Windows.\n* Don't output raw color codes on Windows, use ANSI colors or disable the color.\n* Remove symlinks from the \"welcome\" sample.\n* Update the release script to also build with GOARM=7 for Raspberry Pi 2, 3 and 4.\n\nChanges from 1.12.6 to 1.12.7\n=============================\n\n* Issues with bolt db, simplebolt and `gccgo` are resolved. Algernon now also supports `gccgo`.\n* Now requires Go 1.11 or later.\n* Respect `TMPDIR`, for improved Termux support.\n* Fix issue #42, when `--dir` is used together with a trailing slash.\n* Don't force the use of the bolt database when in development mode.\n* Update dependencies.\n\nChanges from 1.12.5 to 1.12.6\n=============================\n\n* Now using a fork of the quic package, since there were build issues with it (could not build with `gccgo` and issue #41).\n* Updated dependencies.\n* There are still issues with compiling simplebolt with gccgo, which is why Algernon can not be compiled with gccgo in a way where simplebolt works, yet. This is related to different behavior between go and gccgo and will be worked around in simplebolt. See: golang/go#36430\n* The autorefresh feature (-a or --autorefresh) may now follow symlinks to diretories, to make the ./welcome.sh script and example more user-friendly when live editing for instance samples/greetings/index.md.\n* The file-search backend of the autofresh feature is now also concurrent.\n* Tested with the latest version of Go (1.13.5) on 64-bit Arch Linux.\n\nChanges from 1.12.4 to 1.12.5\n=============================\n\n* Tested with Go 1.13.\n* Adds support for PostgreSQL queries with the PQ function, from Lua.\n* Updated dependencies, especially with QUIC and HTTP/2 in mind.\n* Updated the JSX sample to use the latest version of React.\n* The static executable for Linux is now built with `-trimpath`.\n* New HTTP client functionality from Lua, using GET or HTTPClient.\n* `CookieSecret` and `SetCookieSecret` can now be used to get and set the secure cookie secret from Lua, or it can be set with the `--cookiesecret` flag.\n\nChanges from 1.12.3 to 1.12.4\n=============================\n\n* Fix #26, an issue with using Lua tables together with Pongo2 and the serve2 function.\n* Update dependencies.\n* Improved help function on the Lua prompt.\n* Support the `IGNOREEOF` environment variable.\n* Update documentation.\n\nChanges from 1.12.2 to 1.12.3\n=============================\n\n* Fix #25, where an attack with vegeta could make Algernon crash.\n* Update dependencies (boltdb has a new home, TLS 1.3 has further improvements).\n\nChanges from 1.12.0 to 1.12.2\n=============================\n\n* Update dependencies.\n* Better output to stdout when loading configuration files (lists the names of all loaded configuration files).\n* A timestamp is added to the command line output when starting Algernon.\n* Slightly modified console text colors.\n* Minor changes to recognized filename extensions.\n* Update documentation to mention welcome.sh (fixes issue #23).\n* Minor updates to javascript libraries used by two of the samples.\n* Improved support for streaming large files (fixes issue #13).\n* Added two new flags:\n  * `--timeout=N` for setting a timeout in seconds, when serving large files (but there is range support, so if a download times out, the client can continue where it left).\n  * `--largesize=N` for setting a threshold for when a file is too large to be read into memory (the default is 42 MiB).\n\nChanges from 1.11.0 to 1.12.0\n=============================\n\n* Favicon support when serving Markdown files.\n* More minimal `--lua` mode.\n* Using the new `strings.Builder` in Go.\n* Better Markdown keyword handling.\n* Update vendored dependencies.\n* Include transmitted bytes in the access log.\n* Detect `style.css` in addition to `style.gcss`.\n* Better Markdown checkbox support.\n* Some refactoring and linting.\n\nChanges from 1.10.1 to 1.11.0\n=============================\n\n* Using the `go mod` system that came with Go 1.11.\n* Experimental support for simple logging to a NCSA and/or a Combined access log, with two new commandline flags.\n* Minor improvements to the help text and status messages.\n* No external resources are required by Algernon, not even external fonts, ref #17.\n* Refactoring: moved the event server to the recwatch package.\n* Remove an unneeded space when setting `Content-Type`.\n* Better keyword handling in Markdown documents.\n* Set a mimetype for configuration files starting with a `.`.\n* Add a flag for clearing the default path prefixes used by the permissions subsystem.\n* Update test script.\n* Minor changes to documentation and samples.\n\nChanges from 1.10 to 1.10.1\n===========================\n\n* Workaround for a problem with the MINGW64 terminal + readline, on Windows.\n* Let Lua handlers also configure the server.\n* Release the Windows executable together with the samples.\n\nChanges from 1.9 to 1.10\n========================\n\n* Syntax highlighting by using [chroma](https://github.com/alecthomas/chroma) instead of [highlight.js](https://highlightjs.org/).\n* No external dependencies, ref issue #17.\n* Add a mode for only using the Lua REPL with `-l` or `--lua`.\n* New logo for the webpage, and new ANSI banner on the command line.\n* Minor fix for closing `</head>` tags.\n* Update vendored dependencies.\n\nChanges from 1.8 to 1.9\n=======================\n\n* Improve error messages.\n* Better support for giving a single Lua fila with handlers as an argument.\n* Update documentation and samples.\n* Add list:json() to make it easier to return JSON from a List. See `samples/react_db`.\n* Better handling of opening documents in the browser if no certs are given.\n* Update the default handling of files (view/download) based on mime type or extension.\n* Add support for \"go tool trace\".\n* Update vendored dependencies.\n\nChanges from 1.7 to 1.8\n=======================\n\n* Fix an issue with `curl` + `algernon` that was not present with `wget` + `algernon`, related to HTTP headers and compression.\n* Some refactoring and linting of the code.\n* Less strict HTTP headers by default.\n* Update vendored dependencies.\n\nChanges from 1.6 to 1.7\n=======================\n\n* Experimental support for the QUIC protocol (HTTP over UDP, faster than HTTP/2).\n* Improvements toward compiling Algernon with GCC (`gcc-go`).\n* Update HyperApp support and samples to work with the latest version (0.15.1).\n* Update dockerfiles and scripts.\n* Add \"material\" and \"neon\" themes.\n* Updated the documentation.\n* Add support for `.algernon` files for configuring directory listings (set a theme and title).\n* Support for having a port number as the only argument.\n* Add a `--nodb` flag, for not using any database backend (same as `--boltdb=/dev/null`).\n* Some refactoring.\n* Update vendored dependencies.\n\nChanges from 1.5.1 to 1.6\n=========================\n\n* Fix for excessive memory usage when serving and caching large files. Needs more testing.\n* Should now be possible to compile with gccgo.\n* Revert the refactoring to a separate \"kinnian\" package, for easier development and dependency handling.\n* Update vendored dependencies.\n\nChanges from 1.5 to 1.5.1\n=========================\n\n* Add the `.hyper.js` and `.hyper.jsx` extensions for HyperApp applications\n* Style HyperApp applications if no style/theme/`style.gcss` is provided\n* Also support HyperApp applications when using the `--theme=...` flag\n* Add the `hprint` Lua function, for combining HyperApp and Lua\n\nChanges from 1.4.5 to 1.5\n=========================\n\n* Switch JSX rendering engine to one that uses [goja](https://github.com/dop251/goja)\n* Add support for HyperApp JSX apps with the `.happ` or `.hyper` extension\n\nChanges from 1.4.4 to 1.4.5\n===========================\n\n* Performance improvements when rendering Markdown and directory listings\n* Refactoring out code to the `kinnian` package\n* Update samples.\n* Update vendored dependencies.\n\nChanges from 1.4.3 to 1.4.4\n===========================\n\n* Refactor code into packages.\n* Update tests and documentation.\n\nChanges from 1.4.2 to 1.4.3\n===========================\n\n* Update dependencies and the dependency configuration.\n\nChanges from 1.4.1 to 1.4.2\n===========================\n\n* Minor improvements to the code.\n* Minor improvements to the documentation.\n* Update dependencies.\n\nChanges from 1.4 to 1.4.1\n=========================\n\n* Update the Markdown styling: tables, colors and &lt;code&gt; tags\n* Split out file caching to a separate package: [datablock](https://github.com/xyproto/datablock)\n* Add an [example](https://github.com/xyproto/algernon/tree/main/samples/structure) for structuring a web site.\n* Add a Lua `preload()` function, for caching files before they are needed.\n* Let the Lua `render()` and ` serve()` functions take an optional filename.\n* Fallback for the log filename.\n* Add `-V` flag for \"verbose\".\n* Add `--ctrld` flag for having to press `ctrl-d` twice to exit the REPL.\n* Use BoltDB by default instead of Redis.\n* Add script for testing functionality (HTTP server + curl) that is ran by the CI system.\n* Fix issue when running some `.alg` files.\n* Refactor.\n\nChanges from 1.3.2 to 1.4\n=========================\n\n* Improve autocomplete in the REPL.\n* Only add syntax highlighting to rendered HTML when needed.\n* Some refactoring: made the code simpler.\n* Move error checks before defer statements whenever possible.\n* Set headers so that browsers will download the most common binary formats instead of displaying them.\n* Update vendored dependencies.\n\nChanges from 1.3.1 to 1.3.2\n===========================\n\n* Remove the dependency on readline. No external C dependencies left.\n* The beginnings of better completion in the REPL.\n* Update dependencies using Glide.\n\nChanges from 1.3 to 1.3.1\n=========================\n\n* Less strict headers when using the auto-refresh feature.\n\nChanges from 1.2.1 to 1.3\n=========================\n\n* Support for streaming large files (HTTP range).\n* Minor improvements to the samples.\n\nChanges from 1.2 to 1.2.1\n=========================\n\n* Improve the REPL and the pprint function.\n* Fix a race issue when setting up a handle function from Lua.\n* Add a \"Host\" header to the header table.\n\nChanges from 1.1 to 1.2\n=======================\n\n* Add support for SCSS (Sass).\n* Fix the Pongo2 + Lua data race issue with a Mutex.\n* Vendor all dependencies and add a Glide YAML file.\n* Render `* [ ]`, `* [x]` and `* [X]` in Markdown as checkboxes.\n* Add support for different images per Markdown theme, using the `replace_with_theme` keyword.\n* Add support for custom CSS from Markdown, using the `css` keyword.\n* Add another built-in Markdown theme: redbox.\n* Remove unused variables.\n\nChanges from 1.0 to 1.1\n=======================\n\nGeneral\n-------\n\n* Tested with Go 1.7\n* Added PostgreSQL >= 9.1 support (with the HSTORE feature).\n* Added two built-in themes for error pages, directory listings and Markdown.\n* Added a `--theme` flag for selecting a theme.\n* Added a `--nocache` flag for disabling caching.\n* Added default HTTP headers, for security.\n* Algernon servers now get A+ at https://securityheaders.io/.\n* Added a `--noheader` flag for disabling security-related HTTP headers.\n* Switched back to the official pongo2 repo after a pull request was merged.\n\nLua\n---\n\n* Added a `pprint` function for slightly prettier printing.\n* Added a `ppstr` function for slightly prettier printing, but to a string.\n* Let `redirect` take an optional HTTP status code.\n* Added a `permanent_redirect` function which only takes an URL.\n* Let `dofile` search the directory of the Lua file that is running.\n* Fixed an issue with returning HTTP status codes from Lua in Debug mode.\n* Renamed `toJSON` to just `JSON`. Both are still present and still work.\n\nMarkdown\n--------\n\n* Can now select a built-in theme with `theme:`.\n* Can now select the highlight.js theme with `code_style:`.\n\nREPL\n----\n\n* More graceful shutdown upon SIGHUP on Linux.\n\nDeployment\n----------\n\n* Minor improvements to the `alg2docker` script.\n\nSamples and documentation\n-------------------------\n\n* Fixed several minor typos.\n* Added an URL location check in the \"bob\" sample.\n\n1.0\n===\n\n* Release.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.431640625,
          "content": "Copyright 2025 Alexander F. Rødseth\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.5390625,
          "content": ".PHONY: clean install install-doc\n\nPROJECT ?= algernon\n\nGOBUILD := go build -mod=vendor -v\n\n# macOS and FreeBSD detection\nUNAME_S := $(shell uname -s)\nifeq ($(UNAME_S),Darwin)\n  PREFIX ?= /usr/local\n  MAKE ?= make\nelse ifeq ($(UNAME_S),FreeBSD)\n  PREFIX ?= /usr/local\n  MAKE ?= gmake\nelse\n  PREFIX ?= /usr\n  MAKE ?= make\nendif\n\nMANDIR ?= $(PREFIX)/share/man/man1\n\nUNAME_R ?= $(shell uname -r)\nifneq (,$(findstring arch,$(UNAME_R)))\n# Arch Linux\nLDFLAGS ?= -Wl,-O2,--sort-common,--as-needed,-z,relro,-z,now\nBUILDFLAGS ?= -mod=vendor -buildmode=pie -trimpath -ldflags \"-s -w -linkmode=external -extldflags $(LDFLAGS)\"\nelse\n# Default settings\nBUILDFLAGS ?= -mod=vendor -trimpath\nendif\n\nalgernon:\n\t$(GOBUILD) $(BUILDFLAGS)\n\nalgernon.1.gz: algernon.1\n\tgzip -f -k -v algernon.1\n\ninstall: algernon desktop/mdview\n\tmkdir -p \"$(DESTDIR)$(PREFIX)/bin\"\n\tinstall -m755 algernon \"$(DESTDIR)$(PREFIX)/bin/algernon\"\n\tinstall -m755 desktop/mdview \"$(DESTDIR)$(PREFIX)/bin/mdview\"\n\ninstall-doc: algernon.1.gz welcome.sh samples README.md\n\tmkdir -p \"$(DESTDIR)$(MANDIR)\"\n\tinstall -m644 algernon.1.gz \"$(DESTDIR)$(MANDIR)/algernon.1.gz\"\n\tmkdir -p \"$(DESTDIR)$(PREFIX)/usr/share/algernon\"\n\tcp -r samples \"$(DESTDIR)$(PREFIX)/usr/share/algernon\"\n\tsed 's/\\.\\/algernon/algernon/g' welcome.sh > welcome_install.sh\n\tinstall -m755 welcome_install.sh \"$(DESTDIR)$(PREFIX)/usr/share/algernon/welcome.sh\"\n\trm -f welcome_install.sh\n\tmkdir -p \"$(DESTDIR)$(PREFIX)/usr/share/doc/algernon\"\n\tinstall -Dm644 README.md \"$(DESTDIR)$(PREFIX)/usr/share/doc/algernon/README.md\"\n\nclean:\n\trm -f algernon algernon.1.gz\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 52.041015625,
          "content": "<!--\ntitle: Algernon\ndescription: Web server with built-in support for Lua, Teal, Markdown, Pongo2, Amber, Sass, SCSS, GCSS, JSX, Bolt, PostgreSQL, SQLite, Redis, MariaDB/MySQL, MSSQL, Tollbooth, Pie, Graceful, Permissions2, users and permissions\nkeywords: web server, QUIC, lua, teal, markdown, pongo2, application server, http, http2, HTTP/2, go, golang, algernon, JSX, React, BoltDB, Bolt, PostgreSQL, SQLite, Redis, MariaDB, MySQL, Three.js\ntheme: material\n-->\n\n<!--<a href=\"https://github.com/xyproto/algernon\"><img src=\"https://algernon.roboticoverlords.org/img/algernon_logo.png\" style=\"margin-left: 2em\"></a>-->\n![Algernon](img/algernon_logo.png)\n\n[![Build](https://github.com/xyproto/algernon/actions/workflows/build.yml/badge.svg)](https://github.com/xyproto/algernon/actions/workflows/build.yml) [![GoDoc](https://godoc.org/github.com/xyproto/algernon?status.svg)](https://godoc.org/github.com/xyproto/algernon) [![License](https://img.shields.io/badge/license-BSD-green.svg?style=flat)](https://raw.githubusercontent.com/xyproto/algernon/main/LICENSE) [![Go Report Card](https://goreportcard.com/badge/github.com/xyproto/algernon)](https://goreportcard.com/report/github.com/xyproto/algernon) [![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fxyproto%2Falgernon.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fxyproto%2Falgernon?ref=badge_shield) [![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://stand-with-ukraine.pp.ua)\n\nWeb server with built-in support for QUIC, HTTP/2, Lua, Teal, Markdown, Pongo2, HyperApp, Amber, Sass(SCSS), GCSS, JSX, Ollama (LLMs), BoltDB (built-in, stores the database in a file, like SQLite), Redis, PostgreSQL, SQLite, MariaDB/MySQL, MSSQL, rate limiting, graceful shutdown, plugins, users and permissions.\n\nAll in one small self-contained executable.\n\nDistro Packages\n---------------\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/algernon.svg)](https://repology.org/project/algernon/versions)\n\nQuick installation (development version)\n----------------------------------------\n\nRequires Go 1.21 or later.\n\n    go install github.com/xyproto/algernon@latest\n\nOr manually:\n\n```\ngit clone https://github.com/xyproto/algernon\ncd algernon\ngo build -mod=vendor\n./welcome.sh\n```\n\nReleases and pre-built images\n-----------------------------\n\nSee the [release](https://github.com/xyproto/algernon/releases/latest) page for releases for a variety of platforms and architectures.\n\n\nGetting Started\n---------------\n\nSee [TUTORIAL.md](TUTORIAL.md).\n\nDocker\n------\n\nThe [Docker image](https://hub.docker.com/r/xyproto/algernon/tags) is less than 12MB and can be tried out (on x86_64) with:\n\n```\nmkdir localhost\necho 'hi!' > localhost/index.md\ndocker run -it -p4000:4000 -v .:/srv/algernon xyproto/algernon\n```\n\nAnd then visiting `http://localhost:4000` in a browser.\n\nTechnologies\n------------\n\nWritten in [Go](https://golang.org). Uses [Bolt](https://github.com/coreos/bbolt) (built-in), [MySQL](https://github.com/go-sql-driver/mysql), [PostgreSQL](https://www.postgresql.org/), SQLite or [Redis](https://redis.io) (recommended) for the database backend, [permissions2](https://github.com/xyproto/permissions2) for handling users and permissions, [gopher-lua](https://github.com/yuin/gopher-lua) for interpreting and running Lua, optional [Teal](https://github.com/teal-language/tl) for type-safe Lua scripting, [http2](https://github.com/bradfitz/http2) for serving HTTP/2, [QUIC](https://github.com/xyproto/quic) for serving over QUIC, [gomarkdown/markdown](https://github.com/gomarkdown/markdown) for Markdown rendering, [amber](https://github.com/eknkc/amber) for Amber templates, [Pongo2](https://github.com/flosch/pongo2) for Pongo2 templates, [Sass](https://github.com/wellington/sass)(SCSS) and [GCSS](https://github.com/yosssi/gcss) for CSS preprocessing. [logrus](https://github.com/Sirupsen/logrus) is used for logging, [goja-babel](github.com/jvatic/goja-babel) for converting from JSX to JavaScript, [tollbooth](https://github.com/didip/tollbooth) for rate limiting, [pie](https://github.com/natefinch/pie) for plugins and [graceful](https://github.com/tylerb/graceful) for graceful shutdowns.\n\nDesign decisions\n----------------\n\n* HTTP/2 over SSL/TLS (https) is used by default, if a certificate and key is given.\n  * If not, regular HTTP is used.\n* QUIC (\"HTTP over UDP\", HTTP/3) can be enabled with a flag.\n* /data and /repos have user permissions, /admin has admin permissions and / is public, by default. This is configurable.\n* The following filenames are special, in prioritized order:\n    * index.lua is Lua code that is interpreted as a handler function for the current directory.\n    * index.html is HTML that is outputted with the correct Content-Type.\n    * index.md is Markdown code that is rendered as HTML.\n    * index.txt is plain text that is outputted with the correct Content-Type.\n    * index.pongo2, index.po2 or index.tmpl is Pongo2 code that is rendered as HTML.\n    * index.amber is Amber code that is rendered as HTML.\n    * index.hyper.js or index.hyper.jsx is JSX+HyperApp code that is rendered as HTML\n    * index.tl is Teal code that is interpreted as a handler function for the current directory.\n    * index.prompt is a content-type, an Ollama model, a blank line and a prompt, for generating content with LLMs.\n    * data.lua is Lua code, where the functions and variables are made available for Pongo2, Amber and Markdown pages in the same directory.\n    * If a single Lua script is given as a command line argument, it will be used as a standalone server. It can be used for setting up handlers or serving files and directories for specific URL prefixes.\n    * style.gcss is GCSS code that is used as the style for all Pongo2, Amber and Markdown pages in the same directory.\n* The following filename extensions are handled by Algernon:\n    * Markdown: .md (rendered as HTML)\n    * Pongo2: .po2, .pongo2 or .tpl (rendered as any text, typically HTML)\n    * Amber: .amber (rendered as HTML)\n    * Sass: .scss (rendered as CSS)\n    * GCSS: .gcss (rendered as CSS)\n    * JSX: .jsx (rendered as JavaScript/ECMAScript)\n    * Lua: .lua (a script that provides its own output and content type)\n    * Teal: .tl (same as .lua but with type safety)\n    * HyperApp: .hyper.js or .hyper.jsx (rendered as HTML)\n* Other files are given a mimetype based on the extension.\n* Directories without an index file are shown as a directory listing, where the design is hard coded.\n* UTF-8 is used whenever possible.\n* The server can be configured by command line flags or with a lua script, but no configuration should be needed for getting started.\n\nFeatures and limitations\n------------------------\n\n* Supports HTTP/2, with or without HTTPS (browsers may require HTTPS when using HTTP/2).\n* Also supports QUIC and regular HTTP.\n* Can use Lua scripts as handlers for HTTP requests.\n* The Algernon executable is compiled to native and is reasonably fast.\n* Works on Linux, macOS and 64-bit Windows.\n* The [Lua interpreter](https://github.com/yuin/gopher-lua) is compiled into the executable.\n* The [Teal typechecker](https://github.com/teal-language/tl) is loaded into the Lua VM.\n* Live editing/preview when using the auto-refresh feature.\n* The use of Lua allows for short development cycles, where code is interpreted when the page is refreshed (or when the Lua file is modified, if using auto-refresh).\n* Self-contained Algernon applications can be zipped into an archive (ending with `.zip` or `.alg`) and be loaded at start.\n* Built-in support for [Markdown](https://github.com/gomarkdown/markdown), [Pongo2](https://github.com/flosch/pongo2), [Amber](https://github.com/eknkc/amber), [Sass](https://github.com/wellington/sass)(SCSS), [GCSS](https://github.com/yosssi/gcss) and [JSX](https://github.com/mamaar/risotto).\n* Redis is used for the database backend, by default.\n* Algernon will fall back to the built-in Bolt database if no Redis server is available.\n* The HTML title for a rendered Markdown page can be provided by the first line specifying the title, like this: `title: Title goes here`. This is a subset of MultiMarkdown.\n* No file converters needs to run in the background (like for SASS). Files are converted on the fly.\n* If `-autorefresh` is enabled, the browser will automatically refresh pages when the source files are changed. Works for Markdown, Lua error pages and Amber (including Sass, GCSS and *data.lua*). This only works on Linux and macOS, for now. If listening for changes on too many files, the OS limit for the number of open files may be reached.\n* Includes an interactive REPL.\n* If only given a Markdown filename as the first argument, it will be served on port 3000, without using any database, as regular HTTP. Handy for viewing `README.md` files locally.\n* Full multi-threading. All available CPUs will be used.\n* Supports rate limiting, by using [tollbooth](https://github.com/didip/tollbooth).\n* The `help` command is available at the Lua REPL, for a quick overview of the available Lua functions.\n* Can load plugins written in any language. Plugins must offer the `Lua.Code` and `Lua.Help` functions and talk JSON-RPC over stderr+stdin. See [pie](https://github.com/natefinch/pie) for more information. Sample plugins for Go and Python are in the `plugins` directory.\n* Thread-safe file caching is built-in, with several available cache modes (for only caching images, for example).\n* Can read from and save to JSON documents. Supports simple JSON path expressions (like a simple version of XPath, but for JSON).\n* If cache compression is enabled, files that are stored in the cache can be sent directly from the cache to the client, without decompressing.\n* Files that are sent to the client are compressed with [gzip](https://golang.org/pkg/compress/gzip/#BestSpeed), unless they are under 4096 bytes.\n* When using PostgreSQL, the HSTORE key/value type is used (available in PostgreSQL version 9.1 or later).\n* No external dependencies, only pure Go.\n* Requires Go >= 1.21 or a version of GCC/`gccgo` that supports Go 1.21.\n* The Lua implementation used in Algernon (gopherlua) does not support `package.loadlib`.\n\nQ&A\n---\n\nQ:\n\n> What is the benefit of using this? In what scenario would this excel? Thanks. -- [mtw@HN](https://news.ycombinator.com/item?id=19583144).\n\nA:\n\n> Good question. I'm not sure if it excels in any scenario. There are specialized web servers that excel at caching or at raw performance. There are dedicated backends for popular front-end toolkits like Vue or React. There are dedicated editors that excel at editing and previewing Markdown, or HTML.\n>\n> I guess the main benefit is that Algernon covers a lot of ground, with a minimum of configuration, while being powerful enough to have a plugin system and support for programming in Lua. There is an auto-refresh feature that uses Server Sent Events, when editing Markdown or web pages. There is also support for the latest in Web technologies, like HTTP/2, QUIC and TLS 1.3. The caching system is decent. And the use of Go ensures that also smaller platforms like NetBSD and systems like Raspberry Pi are covered. There are no external dependencies, so Algernon can run on any system that Go can support.\n>\n> The main benefit is that is is versatile, fresh, and covers many platforms and use cases.\n>\n> For a more specific description of a potential benefit, a more specific use case would be needed.\n\nInstallation\n------------------\n\n##### macOS\n\n* Install [Homebrew](https://brew.sh), if needed.\n* `brew install algernon`\n\n##### Arch Linux\n\n* `pacman -S algernon`\n\n##### Any system where Go is available\n\nThis method is using the latest commit from the main branch:\n\n    go install github.com/xyproto/algernon@main\n\nIf neeed, add `~/go/bin` to the path. For example: `export PATH=$PATH:$HOME/go/bin`.\n\nUtilities\n---------\n* Comes with the `alg2docker` utility, for creating Docker images from Algernon web applications (`.alg` files).\n* [http2check](https://github.com/xyproto/http2check) can be used for checking if a web server is offering [HTTP/2](https://tools.ietf.org/html/rfc7540).\n\nOverview\n--------\n\nRunning Algernon:\n\n<img src=\"https://raw.github.com/xyproto/algernon/main/img/algernon_gopher.png\">\n\nScreenshot of an earlier version:\n\n<img src=\"https://raw.github.com/xyproto/algernon/main/img/algernon_redis_054.png\">\n\n---\n\nThe idea is that web pages can be written in Markdown, Pongo2, Amber, HTML or JSX (+React or HyperApp), depending on the need, and styled with CSS, Sass(SCSS) or GCSS, while data can be provided by a Lua or Teal script that talks to Redis, BoltDB, PostgreSQL, MSQL or MariaDB/MySQL.\n\nAmber and GCSS is a good combination for static pages, that allows for more clarity and less repetition than HTML and CSS. It˙s also easy to use Lua for providing data for the Amber templates, which helps separate model, controller and view.\n\nPongo2, Sass and Lua or Teal also combines well. Pongo2 is more flexible than Amber.\n\nThe auto-refresh feature is supported when using Markdown, Pongo2 or Amber, and is useful to get an instant preview when developing.\n\nThe JSX to JavaScript (ECMAscript) transpiler is built-in.\n\nRedis is fast, scalable and offers good [data persistence](https://redis.io/topics/persistence). This should be the preferred backend.\n\nBolt is a [pure key/value store](https://github.com/coreos/bbolt), written in Go. It makes it easy to run Algernon without having to set up a database host first.\nMariaDB/MySQL support is included because of its widespread availability.\n\nPostgreSQL is a solid and fast database that is also supported.\n\nScreenshots\n-----------\n\n<img src=\"https://raw.github.com/xyproto/algernon/main/img/algernon_markdown.png\">\n\n*Markdown can easily be styled with Sass or GCSS.*\n\n---\n\n<img src=\"https://raw.github.com/xyproto/algernon/main/img/algernon_lua_error.png\">\n\n*This is how errors in Lua scripts are handled, when Debug mode is enabled.*\n\n---\n\n<img src=\"https://raw.github.com/xyproto/algernon/main/img/algernon_threejs.png\">\n\n*One of the poems of Algernon Charles Swinburne, with three rotating tori in the background.*\n*Uses CSS3 for the Gaussian blur and [three.js](https://threejs.org) for the 3D graphics.*\n\n---\n\n<img src=\"https://raw.github.com/xyproto/algernon/main/img/prettify.png\">\n\n*Screenshot of the <strong>prettify</strong> sample. Served from a single Lua script.*\n\n---\n\n<img src=\"https://raw.github.com/xyproto/algernon/main/img/algernon_react.png\">\n\n*JSX transforms are built-in. Using [React](https://facebook.github.io/react/) together with Algernon is easy.*\n\nSamples\n-------\n\nThe sample collection can be downloaded from the `samples` directory in this repository, or here: [samplepack.zip](https://algernon.roboticoverlords.org/samplepack.zip).\n\n\nGetting started\n---------------\n\n##### Run Algernon in \"dev\" mode\n\nThis enables debug mode, uses the internal Bolt database, uses regular HTTP instead of HTTPS+HTTP/2 and enables caching for all files except: Pongo2, Amber, Lua, Teal, Sass, GCSS, Markdown and JSX.\n\n* `algernon -e`\n\nThen try creating an `index.lua` file with `print(\"Hello, World!\")` and visit the served web page in a browser.\n\n##### Enable HTTP/2 in the browser (for older browsers)\n\n* Chrome: go to `chrome://flags/#enable-spdy4`, enable, save and restart the browser.\n* Firefox: go to `about:config`, set `network.http.spdy.enabled.http2draft` to `true`. You might need the nightly version of Firefox.\n\n##### Configure the required ports for local use\n\n* You may need to change the firewall settings for port 3000, if you wish to use the default port for exploring the samples.\n* For the auto-refresh feature to work, port 5553 must be available (or another host/port of your choosing, if configured otherwise).\n\n##### Prepare for running the samples\n\n    git clone https://github.com/xyproto/algernon\n    make -C algernon\n\n##### Launch the \"welcome\" page\n\n* Run `./welcome.sh` to start serving the \"welcome\" sample.\n* Visit `http://localhost:3000/`\n\n##### Create your own Algernon application, for regular HTTP\n\n* `mkdir mypage`\n* `cd mypage`\n* Create a file named `index.lua`, with the following contents:\n  `print(\"Hello, Algernon\")`\n* Start `algernon --httponly --autorefresh`.\n* Visit `http://localhost:3000/`.\n* Edit `index.lua` and refresh the browser to see the new result.\n* If there were errors, the page will automatically refresh when `index.lua` is changed.\n* Markdown, Pongo2 and Amber pages will also refresh automatically, as long as `-autorefresh` is used.\n\n##### Create your own Algernon application, for HTTP/2 + HTTPS\n\n* `mkdir mypage`\n* `cd mypage`\n* Create a file named `index.lua`, with the following contents:\n  `print(\"Hello, Algernon\")`\n* Create a self-signed certificate, just for testing:\n * `openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 3000 -nodes`\n * Press return at all the prompts, but enter `localhost` at *Common Name*.\n * For production, store the keys in a directory with as strict permissions as possible, then specify them with the `--cert` and `--key` flags.\n* Start `algernon`.\n* Visit `https://localhost:3000/`.\n* If you have not imported the certificates into the browser, nor used certificates that are signed by trusted certificate authorities, perform the necessary clicks to confirm that you wish to visit this page.\n* Edit `index.lua` and refresh the browser to see the result (or a Lua error message, if the script had a problem).\n\nThere is also a small [tutorial](TUTORIAL.md).\n\nUsing AI / LLMs / Ollama\n------------------------\n\n* The `ollama` server must be running locally, or a `host:port` must be set in the `OLLAMA_HOST` environment variable.\n\nFor example, using the default `tinyllama` model (will be downloaded at first use, the size is 637 MiB and it should run anywhere).\n\n```\nlua> ollama()\nAutumn leaves, crisp air, poetry flowing - this is what comes to mind when I think of Algernon.\n\nlua> ollama(\"Write a haiku about software developers\")\nThe software developer,\nIn silence, tapping at keys,\nCreating digital worlds.\n```\n\nUsing `OllamaClient` and the `mixtral` model (will be downloaded at first use, the size is 26 GiB and it might require quite a bit of RAM and also a fast CPU and/or GPU).\n\n```\nlua> oc = OllamaClient(\"mixtral\")\nlua> oc:ask(\"Write a quicksort function in OCaml\")\nSure! Here's an implementation of the quicksort algorithm in OCaml:\n\nlet rec qsort = function\n  | [] -> []\n  | pivot :: rest ->\n      let smaller, greater = List.partition (fun x -> x < pivot) rest in\n      qsort smaller @ [pivot] @ qsort greater\n\nThis function takes a list as input and returns a new list with the same elements but sorted in ascending order using the quicksort algorithm. The `qsort` funct.\n\nHere are some examples of using the `qsort` function:\n\n# qsort [5; 2; 9; 1; 3];;\n- : int list = [1; 2; 3; 5; 9]\n\n# qsort [\"apple\"; \"banana\"; \"cherry\"];;\n- : string list = [\"apple\"; \"banana\"; \"cherry\"]\n\n# qsort [3.14; 2.718; 1.618];;\n- : float list = [1.618; 2.718; 3.14]\n\nI hope this helps! Let me know if you have any questions or need further clarification.\n```\n\nExample use of finding the distance between how the LLM models interpret the prompts:\n\n```\nlua> oc = OllamaClient(\"llama3\")\nlua> oc:distance(\"cat\", \"dog\")\n0.3629187146002938\nlua> oc:distance(\"cat\", \"kitten\")\n0.3584441305547792\nlua> oc:distance(\"dog\", \"puppy\")\n0.2825554473355113\nlua> oc:distance(\"dog\", \"kraken\", \"manhattan\")\n7945.885516248905\nlua> oc:distance(\"dog\", \"kraken\", \"cosine\")\n0.5277307399621305\n```\n\nAs you can tell, according to Llama3, \"dog\" is closer to \"puppy\" (0.28) than \"cat\" is to \"kitten\" (0.36) and \"dog\" is very different from \"kraken\" (0.53).\n\nThe available distance measurement algorithms are: `cosine`, `euclidean`, `manhattan`, `chebyshev` and `hamming`. The default metric is `cosine`.\n\nAvailable Ollama models are available here: [Ollama Library](https://ollama.com/library).\n\nThere is also support for `.prompt` files that can generate contents, such as HTML pages, in a reproducible way. The results will be cached for as long as Algernon is running.\n\nExample `index.prompt` file:\n\n```\ntext/html\ngemma\n\nGenerate a fun and over the top web page that demonstrates the use of CSS animations and JavaScript.\nEverything should be inline in one HTML document. Only output the full and complete HTML document.\n```\n\nThe experimental `prompt` format is very simple:\n\n* The first line is the `content-type`.\n* The second line is the Ollama model, such as `tinyllama:latest` or just `tinyllama`.\n* The third line is blank.\n* The rest of the lines are the prompt that will be passed to the large language model.\n\nNote that the Ollama server must be fast enough to reply within 10 seconds for this to work!\n`tinyllama` or `gemma` should be more than fast enough with a good GPU or on an M1/M2/M3 processor.\n\nFor more fine-grained control, try using the Ollama-related Lua functions instead, and please create a PR or issue if something central is missing.\n\nThe `ClearCache()` function can be used at the Algernon Lua prompt to also clear the AI cache.\n\nBasic Lua functions\n-------------------\n\n~~~c\n// Return the version string for the server.\nversion() -> string\n\n// Sleep the given number of seconds (can be a float).\nsleep(number)\n\n// Log the given strings as information. Takes a variable number of strings.\nlog(...)\n\n// Log the given strings as a warning. Takes a variable number of strings.\nwarn(...)\n\n// Log the given strings as an error. Takes a variable number of strings.\nerr(...)\n\n// Return the number of nanoseconds from 1970 (\"Unix time\")\nunixnano() -> number\n\n// Convert Markdown to HTML\nmarkdown(string) -> string\n\n// Sanitize HTML\nsanhtml(string) -> string\n\n// Return the directory where the REPL or script is running. If a filename (optional) is given, then the path to where the script is running, joined with a path separator and the given filename, is returned.\nscriptdir([string]) -> string\n\n// Read a glob, ie. \"*.md\" in the current script directory, or the given directory (optional). The contents of all found files are reeturned as a table.\nreadglob(string[, string]) -> table\n\n// Return the directory where the server is running. If a filename (optional) is given, then the path to where the server is running, joined with a path separator and the given filename, is returned.\nserverdir([string]) -> string\n~~~\n\n\nLua functions for handling requests\n-----------------------------------\n\n~~~c\n// Set the Content-Type for a page.\ncontent(string)\n\n// Return the requested HTTP method (GET, POST etc).\nmethod() -> string\n\n// Output text to the browser/client. Takes a variable number of strings.\nprint(...)\n\n// Return the requested URL path.\nurlpath() -> string\n\n// Return the HTTP header in the request, for a given key, or an empty string.\nheader(string) -> string\n\n// Set an HTTP header given a key and a value.\nsetheader(string, string)\n\n// Return the HTTP headers, as a table.\nheaders() -> table\n\n// Return the HTTP body in the request (will only read the body once, since it's streamed).\nbody() -> string\n\n// Set a HTTP status code (like 200 or 404). Must be used before other functions that writes to the client!\nstatus(number)\n\n// Set a HTTP status code and output a message (optional).\nerror(number[, string])\n\n// Serve a file that exists in the same directory as the script. Takes a filename.\nserve(string)\n\n// Serve a Pongo2 template file, with an optional table with template key/values.\nserve2(string[, table)\n\n// Return the rendered contents of a file that exists in the same directory as the script. Takes a filename.\nrender(string) -> string\n\n// Return a table with keys and values as given in a posted form, or as given in the URL.\nformdata() -> table\n\n// Return a table with keys and values as given in the request URL, or in the given URL (`/some/page?x=7` makes the key `x` with the value `7` available).\nurldata([string]) -> table\n\n// Redirect to an absolute or relative URL. May take an HTTP status code that will be used when redirecting.\nredirect(string[, number])\n\n// Permanent redirect to an absolute or relative URL. Uses status code 302.\npermanent_redirect(string)\n\n// Send \"Connection: close\" as a header to the client, flush the body and also\n// stop Lua functions from writing more data to the HTTP body.\nclose()\n\n// Transmit what has been outputted so far, to the client.\nflush()\n~~~\n\n\nLua functions for formatted output\n----------------------------------\n\n~~~c\n// Output rendered Markdown to the browser/client. The given text is converted from Markdown to HTML. Takes a variable number of strings.\nmprint(...)\n\n// Output rendered Amber to the browser/client. The given text is converted from Amber to HTML. Takes a variable number of strings.\naprint(...)\n\n// Output rendered GCSS to the browser/client. The given text is converted from GCSS to CSS. Takes a variable number of strings.\ngprint(...)\n\n// Output rendered HyperApp JSX to the browser/client. The given text is converted from JSX to JavaScript. Takes a variable number of strings.\nhprint(...)\n\n// Output rendered React JSX to the browser/client. The given text is converted from JSX to JavaScript. Takes a variable number of strings.\njprint(...)\n\n// Output rendered HTML to the browser/client. The given text is converted from Pongo2 to HTML. The first argument is the Pongo2 template and the second argument is a table. The keys in the table can be referred to in the template.\npoprint(string[, table])\n\n// Output a simple HTML page with a message, title and theme.\n// The title and theme are optional.\nmsgpage(string[, string][, string])\n~~~\n\n\nLua functions related to JSON\n-----------------------------\n\nTips:\n\n* Use `JFile(`*filename*`)` to use or store a JSON document in the same directory as the Lua script.\n* A JSON path is on the form `x.mapkey.listname[2].mapkey`, where `[`, `]` and `.` have special meaning. It can be used for pinpointing a specific place within a JSON document. It's a bit like a simple version of XPath, but for JSON.\n* Use `tostring(userdata)` to fetch the JSON string from the JFile object.\n\n~~~c\n// Use, or create, a JSON document/file.\nJFile(filename) -> userdata\n\n// Takes a JSON path. Returns a string value, or an empty string.\njfile:getstring(string) -> string\n\n// Takes a JSON path. Returns a JNode or nil.\njfile:getnode(string) -> userdata\n\n// Takes a JSON path. Returns a value or nil.\njfile:get(string) -> value\n\n// Takes a JSON path (optional) and JSON data to be added to the list.\n// The JSON path must point to a list, if given, unless the JSON file is empty.\n// \"x\" is the default JSON path. Returns true on success.\njfile:add([string, ]string) -> bool\n\n// Take a JSON path and a string value. Changes the entry. Returns true on success.\njfile:set(string, string) -> bool\n\n// Remove a key in a map. Takes a JSON path, returns true on success.\njfile:delkey(string) -> bool\n\n// Convert a Lua table, where keys are strings and values are strings or numbers, to JSON.\n// Takes an optional number of spaces to indent the JSON data.\n// (Note that keys in JSON maps are always strings, ref. the JSON standard).\njson(table[, number]) -> string\n\n// Create a JSON document node.\nJNode() -> userdata\n\n// Add JSON data to a node. The first argument is an optional JSON path.\n// The second argument is a JSON data string. Returns true on success.\n// \"x\" is the default JSON path.\njnode:add([string, ]string) -> bool\n\n// Given a JSON path, retrieves a JSON node.\njnode:get(string) -> userdata\n\n// Given a JSON path, retrieves a JSON string.\njnode:getstring(string) -> string\n\n// Given a JSON path and a JSON string, set the value.\njnode:set(string, string)\n\n// Given a JSON path, remove a key from a map.\njnode:delkey(string) -> bool\n\n// Return the JSON data, nicely formatted.\njnode:pretty() -> string\n\n// Return the JSON data, as a compact string.\njnode:compact() -> string\n\n// Sends JSON data to the given URL. Returns the HTTP status code as a string.\n// The content type is set to \"application/json; charset=utf-8\".\n// The second argument is an optional authentication token that is used for the\n// Authorization header field.\njnode:POST(string[, string]) -> string\n\n// Alias for jnode:POST\njnode:send(string[, string]) -> string\n\n// Same as jnode:POST, but sends HTTP PUT instead.\njnode:PUT(string[, string]) -> string\n\n// Fetches JSON over HTTP given an URL that starts with http or https.\n// The JSON data is placed in the JNode. Returns the HTTP status code as a string.\njnode:GET(string) -> string\n\n// Alias for jnode:GET\njnode:receive(string) -> string\n\n// Convert from a simple Lua table to a JSON string\nJSON(table) -> string\n~~~\n\nLua functions for making HTTP requests\n--------------------------------------\n\nQuick example: `GET(\"http://ix.io/1FTw\")`\n\n~~~c\n// Create a new HTTP Client object\nHTTPClient() -> userdata\n\n// Select Accept-Language (ie. \"en-us\")\nhc:SetLanguage(string)\n\n// Set the request timeout (in milliseconds)\nhc:SetTimeout(number)\n\n// Set a cookie (name and value)\nhc:SetCookie(string, string)\n\n// Set the user agent (ie. \"curl\")\nhc:SetUserAgent(string)\n\n// Perform a HTTP GET request. First comes the URL, then an optional table with\n// URL parameters, then an optional table with HTTP headers.\nhc:Get(string, [table], [table]) -> string\n\n// Perform a HTTP POST request. It's the same arguments as for `Get`, except\n// the fourth optional argument is the POST body.\nhc:Post(string, [table], [table], [string]) -> string\n\n// Like `Get`, except the first argument is the HTTP method (like \"PUT\")\nhc:Do(string, string, [table], [table]) -> string\n\n// Shorthand for HTTPClient():Get()\nGET(string, [table], [table]) -> string\n\n// Shorthand for HTTPClient():Post()\nPOST(string, [table], [table], [string]) -> string\n\n// Shorthand for HTTPClient():Do()\nDO(string, string, [table], [table]) -> string\n~~~\n\n\nLua functions for AI\n--------------------\n\n~~~c\n// Connect to the local Ollama server and use either the `tinyllama` model, or the supplied model string (like ie. mixtral:latest).\n// Also takes an optional host address.\nOllamaClient([string], [string]) -> userdata\n\n// Download the required model, if needed. This may take a while if the model is large.\noc:pull()\n\n// Pass a prompt to Ollama and return the reproducible generated output. If no prompt is given, it will request a poem about Algernon.\n// Can also take an optional model name, which will trigger a download if the model is missing.\noc:ask([string], [string]) -> string\n\n// Pass a prompt to Ollama and return the generated output that will differ every time.\n// Can also take an optional model name, which will trigger a download if the model is missing.\noc:creative([string], [string]) -> string\n\n// Check if the given model name is downloaded and ready\noc:has(string)\n\n// List all models that are downloaded and ready\noc:list()\n\n// Get or set the currently active model name, but does not pull anything\noc:model([string])\n\n// Get the size of the given model name as a human-friendly string\noc:size(string) -> string\n\n// Get the size of the given model name, in bytes\noc:bytesize(string) -> number\n\n// Given two prompts, return how similar they are.\n// The first optional string is the algorithm for measuring the distance: cosine, euclidean, manhattan, chebyshev or hamming.\n// Only the two first letters of the algorithm name are needed, so \"co\" or \"ma\" are also valid. The default is cosine.\n// The second optional string is the model name.\noc:distance(string, string, [string], [string]) -> number\n\n// Convenience function for the local Ollama server that takes an optional prompt and an optional model name.\n// Generates a poem with the `tinyllama` model by default.\nollama([string], [string]) -> string\n\n// Convenience function for Base64-encoding the given file\nbase64EncodeFile(string) -> string\n\n// Describe the given base64-encoded image using Ollama (and the `llava-llama3` model, by default)\ndescribeImage(string, [string]) -> string\n\n// Given two embeddings (tables of floats, representing text or data), return how similar they are.\n// The optional string is the algorithm for measuring the distance: cosine, euclidean, manhattan, chebyshev or hamming.\n// Only the two first letters of the algorithm name are needed, so \"co\" or \"ma\" are also valid. The default is cosine.\nembeddedDistance(table, table, [string]) -> number\n~~~\n\n\nLua functions for plugins\n-------------------------\n\n~~~c\n// Load a plugin given the path to an executable. Returns true on success. Will return the plugin help text if called on the Lua prompt.\n// Pass in true as the second argument to keep it running.\nPlugin(string, [bool])\n\n// Returns the Lua code as returned by the Lua.Code function in the plugin, given a plugin path. May return an empty string.\n// Pass in true as the second argument to keep it running.\nPluginCode(string, [bool]) -> string\n\n// Takes a plugin path, function name and arguments. Returns an empty string if the function call fails, or the results as a JSON string if successful.\nCallPlugin(string, string, ...) -> string\n~~~\n\n\nLua functions for code libraries\n--------------------------------\n\nThese functions can be used in combination with the plugin functions for storing Lua code returned by plugins when serverconf.lua is loaded, then retrieve the Lua code later, when handling requests. The code is stored in the database.\n\n~~~c\n// Create or uses a code library object. Optionally takes a data structure name as the first parameter.\nCodeLib([string]) -> userdata\n\n// Given a namespace and Lua code, add the given code to the namespace. Returns true on success.\ncodelib:add(string, string) -> bool\n\n// Given a namespace and Lua code, set the given code as the only code in the namespace. Returns true on success.\ncodelib:set(string, string) -> bool\n\n// Given a namespace, return Lua code, or an empty string.\ncodelib:get(string) -> string\n\n// Import (eval) code from the given namespace into the current Lua state. Returns true on success.\ncodelib:import(string) -> bool\n\n// Completely clear the code library. Returns true on success.\ncodelib:clear() -> bool\n~~~\n\n\nLua functions for file uploads\n------------------------------\n\n~~~c\n// Creates a file upload object. Takes a form ID (from a POST request) as the first parameter.\n// Takes an optional maximum upload size (in MiB) as the second parameter.\n// Returns nil and an error string on failure, or userdata and an empty string on success.\nUploadedFile(string[, number]) -> userdata, string\n\n// Return the uploaded filename, as specified by the client\nuploadedfile:filename() -> string\n\n// Return the size of the data that has been received\nuploadedfile:size() -> number\n\n// Return the mime type of the uploaded file, as specified by the client\nuploadedfile:mimetype() -> string\n\n// Return the full textual content of the uploaded file\nuploadedfile:content() -> string\n\n// Save the uploaded data locally. Takes an optional filename. Returns true on success.\nuploadedfile:save([string]) -> bool\n\n// Save the uploaded data as the client-provided filename, in the specified directory.\n// Takes a relative or absolute path. Returns true on success.\nuploadedfile:savein(string)  -> bool\n\n// Return the uploaded data as a base64-encoded string\nuploadedfile:base64() -> string\n~~~\n\n\nLua functions for the file cache\n--------------------------------\n\n~~~c\n// Return information about the file cache.\nCacheInfo() -> string\n\n// Clear the file cache.\nClearCache()\n\n// Load a file into the cache, returns true on success.\npreload(string) -> bool\n~~~\n\nLua functions for data structures\n---------------------------------\n\n##### Set\n\n~~~c\n// Get or create a database-backed Set (takes a name, returns a set object)\nSet(string) -> userdata\n\n// Add an element to the set\nset:add(string)\n\n// Remove an element from the set\nset:del(string)\n\n// Check if a set contains a value\n// Returns true only if the value exists and there were no errors.\nset:has(string) -> bool\n\n// Get all members of the set\nset:getall() -> table\n\n// Remove the set itself. Returns true on success.\nset:remove() -> bool\n\n// Clear the set\nset:clear() -> bool\n~~~\n\n##### List\n\n~~~c\n// Get or create a database-backed List (takes a name, returns a list object)\nList(string) -> userdata\n\n// Add an element to the list\nlist:add(string)\n\n// Get all members of the list\nlist:getall() -> table\n\n// Get the last element of the list\n// The returned value can be empty\nlist:getlast() -> string\n\n// Get the N last elements of the list\nlist:getlastn(number) -> table\n\n// Remove the list itself. Returns true on success.\nlist:remove() -> bool\n\n// Clear the list. Returns true on success.\nlist:clear() -> bool\n\n// Return all list elements (expected to be JSON strings) as a JSON list\nlist:json() -> string\n~~~\n\n##### HashMap\n\n~~~c\n// Get or create a database-backed HashMap (takes a name, returns a hash map object)\nHashMap(string) -> userdata\n\n// For a given element id (for instance a user id), set a key\n// (for instance \"password\") and a value.\n// Returns true on success.\nhash:set(string, string, string) -> bool\n\n// For a given element id (for instance a user id), and a key\n// (for instance \"password\"), return a value.\n// Returns a value only if they key was found and if there were no errors.\nhash:get(string, string) -> string\n\n// For a given element id (for instance a user id), and a key\n// (for instance \"password\"), check if the key exists in the hash map.\n// Returns true only if it exists and there were no errors.\nhash:has(string, string) -> bool\n\n// For a given element id (for instance a user id), check if it exists.\n// Returns true only if it exists and there were no errors.\nhash:exists(string) -> bool\n\n// Get all keys of the hash map\nhash:getall() -> table\n\n// Remove a key for an entry in a hash map\n// (for instance the email field for a user)\n// Returns true on success\nhash:delkey(string, string) -> bool\n\n// Remove an element (for instance a user)\n// Returns true on success\nhash:del(string) -> bool\n\n// Remove the hash map itself. Returns true on success.\nhash:remove() -> bool\n\n// Clear the hash map. Returns true on success.\nhash:clear() -> bool\n~~~\n\n##### KeyValue\n\n~~~c\n// Get or create a database-backed KeyValue collection (takes a name, returns a key/value object)\nKeyValue(string) -> userdata\n\n// Set a key and value. Returns true on success.\nkv:set(string, string) -> bool\n\n// Takes a key, returns a value.\n// Returns an empty string if the function fails.\nkv:get(string) -> string\n\n// Takes a key, returns the value+1.\n// Creates a key/value and returns \"1\" if it did not already exist.\n// Returns an empty string if the function fails.\nkv:inc(string) -> string\n\n// Remove a key. Returns true on success.\nkv:del(string) -> bool\n\n// Remove the KeyValue itself. Returns true on success.\nkv:remove() -> bool\n\n// Clear the KeyValue. Returns true on success.\nkv:clear() -> bool\n~~~\n\nLua functions for external databases\n------------------------------------\n\n~~~c\n// Query a PostgreSQL database with a SQL query and a connection string\nPQ([string], [string]) -> table\n~~~\n\nThe default connection string is `host=localhost port=5432 user=postgres dbname=test sslmode=disable` and the default SQL query is `SELECT version()`. Database connections are re-used if they still answer to `.Ping()`, for the same connection string.\n\n~~~c\n// Query a MSSQL database with SQL, a connection string, and a parameter table\nMSSQL([string], [string], [table]) -> table\n~~~\n\n- The default connection string is `server=localhost;user=sa;password=Password123,port=1433` and the default SQL query is `\"SELECT @@VERSION`. Database connections are re-used if they still answer to `.Ping()`, for the same connection string.\n- If the param table is numerically indexed, positional placeholders are expected: `MSSQL(\"SELECT * FROM users WHERE first = @p1 AND last = @p2\", conn, {\"John\", \"Smith\"})`\n- If the param table is keyed with strings, named placeholders are expected: `MSSQL(\"SELECT * FROM users WHERE first = @first AND last = @last\", conn, {first = \"John\", last = \"Smith\"})`\n\n\nLua functions for handling users and permissions\n------------------------------------------------\n\n~~~c\n// Check if the current user has \"user\" rights\nUserRights() -> bool\n\n// Check if the given username exists (does not look at the list of unconfirmed users)\nHasUser(string) -> bool\n\n// Check if the given username exists in the list of unconfirmed users\nHasUnconfirmedUser(string) -> bool\n\n// Get the value from the given boolean field\n// Takes a username and field name\nBooleanField(string, string) -> bool\n\n// Save a value as a boolean field\n// Takes a username, field name and boolean value\nSetBooleanField(string, string, bool)\n\n// Check if a given username is confirmed\nIsConfirmed(string) -> bool\n\n// Check if a given username is logged in\nIsLoggedIn(string) -> bool\n\n// Check if the current user has \"admin rights\"\nAdminRights() -> bool\n\n// Check if a given username is an admin\nIsAdmin(string) -> bool\n\n// Get the username stored in a cookie, or an empty string\nUsernameCookie() -> string\n\n// Store the username in a cookie, returns true on success\nSetUsernameCookie(string) -> bool\n\n// Clear the login cookie\nClearCookie()\n\n// Get a table containing all usernames\nAllUsernames() -> table\n\n// Get the email for a given username, or an empty string\nEmail(string) -> string\n\n// Get the password hash for a given username, or an empty string\nPasswordHash(string) -> string\n\n// Get all unconfirmed usernames\nAllUnconfirmedUsernames() -> table\n\n// Get the existing confirmation code for a given user,\n// or an empty string. Takes a username.\nConfirmationCode(string) -> string\n\n// Add a user to the list of unconfirmed users\n// Takes a username and a confirmation code\n// Remember to also add a user, when registering new users.\nAddUnconfirmed(string, string)\n\n// Remove a user from the list of unconfirmed users\n// Takes a username\nRemoveUnconfirmed(string)\n\n// Mark a user as confirmed\n// Takes a username\nMarkConfirmed(string)\n\n// Removes a user\n// Takes a username\nRemoveUser(string)\n\n// Make a user an admin\n// Takes a username\nSetAdminStatus(string)\n\n// Make an admin user a regular user\n// Takes a username\nRemoveAdminStatus(string)\n\n// Add a user\n// Takes a username, password and email\nAddUser(string, string, string)\n\n// Set a user as logged in on the server (not cookie)\n// Takes a username\nSetLoggedIn(string)\n\n// Set a user as logged out on the server (not cookie)\n// Takes a username\nSetLoggedOut(string)\n\n// Log in a user, both on the server and with a cookie\n// Takes a username\nLogin(string)\n\n// Log out a user, on the server (which is enough)\n// Takes a username\nLogout(string)\n\n// Get the current username, from the cookie\nUsername() -> string\n\n// Get the current cookie timeout\n// Takes a username\nCookieTimeout(string) -> number\n\n// Set the current cookie timeout\n// Takes a timeout number, measured in seconds\nSetCookieTimeout(number)\n\n// Get the current server-wide cookie secret. This is used when setting\n// and getting browser cookies when users log in.\nCookieSecret() -> string\n\n// Set the current server-side cookie secret. This is used when setting\n// and getting browser cookies when users log in. Using the same secret\n// makes browser cookies usable across server restarts.\nSetCookieSecret(string)\n\n// Get the current password hashing algorithm (bcrypt, bcrypt+ or sha256)\nPasswordAlgo() -> string\n\n// Set the current password hashing algorithm (bcrypt, bcrypt+ or sha256)\n// ‘bcrypt+‘ accepts bcrypt or sha256 for old passwords, but will only use\n// bcrypt for new passwords.\nSetPasswordAlgo(string)\n\n// Hash the password\n// Takes a username and password (username can be used for salting sha256)\nHashPassword(string, string) -> string\n\n// Change the password for a user, given a username and a new password\nSetPassword(string, string)\n\n// Check if a given username and password is correct\n// Takes a username and password\nCorrectPassword(string, string) -> bool\n\n// Checks if a confirmation code is already in use\n// Takes a confirmation code\nAlreadyHasConfirmationCode(string) -> bool\n\n// Find a username based on a given confirmation code,\n// or returns an empty string. Takes a confirmation code\nFindUserByConfirmationCode(string) -> string\n\n// Mark a user as confirmed\n// Takes a username\nConfirm(string)\n\n// Mark a user as confirmed, returns true on success\n// Takes a confirmation code\nConfirmUserByConfirmationCode(string) -> bool\n\n// Set the minimum confirmation code length\n// Takes the minimum number of characters\nSetMinimumConfirmationCodeLength(number)\n\n// Generates a unique confirmation code, or an empty string\nGenerateUniqueConfirmationCode() -> string\n~~~\n\n\nLua functions that are available for server configuration files\n---------------------------------------------------------------\n\n~~~c\n// Set the default address for the server on the form [host][:port].\n// May be useful in Algernon application bundles (.alg or .zip files).\nSetAddr(string)\n\n// Reset the URL prefixes and make everything *public*.\nClearPermissions()\n\n// Add an URL prefix that will have *admin* rights.\nAddAdminPrefix(string)\n\n// Add a reverse proxy given a path prefix and an endpoint URL\n// For example: \"/api\" and \"http://localhost:8080\"\nAddReverseProxy(string, string)\n\n// Add an URL prefix that will have *user* rights.\nAddUserPrefix(string)\n\n// Provide a lua function that will be used as the permission denied handler.\nDenyHandler(function)\n\n// Return a string with various server information.\nServerInfo() -> string\n\n// Direct the logging to the given filename. If the filename is an empty\n// string, direct logging to stderr. Returns true on success.\nLogTo(string) -> bool\n\n// Returns the version string for the server.\nversion() -> string\n\n// Logs the given strings as INFO. Takes a variable number of strings.\nlog(...)\n\n// Logs the given strings as WARN. Takes a variable number of strings.\nwarn(...)\n\n// Logs the given string as ERROR. Takes a variable number of strings.\nerr(...)\n\n// Provide a lua function that will be run once, when the server is ready to start serving.\nOnReady(function)\n\n// Use a Lua file for setting up HTTP handlers instead of using the directory structure.\nServerFile(string) -> bool\n\n// Serve files from this directory.\nServerDir(string) -> bool\n\n// Get the cookie secret from the server configuration.\nCookieSecret() -> string\n\n// Set the cookie secret that will be used when setting and getting browser cookies.\nSetCookieSecret(string)\n~~~\n\nFunctions that are only available for Lua server files\n------------------------------------------------------\n\nThis function is only available when a Lua script is used instead of a server directory, or from Lua files that are specified with the `ServerFile` function in the server configuration.\n\n~~~c\n// Given an URL path prefix (like \"/\") and a Lua function, set up an HTTP handler.\n// The given Lua function should take no arguments, but can use all the Lua functions for handling requests, like `content` and `print`.\nhandle(string, function)\n\n// Given an URL prefix (like \"/\") and a directory, serve the files and directories.\nservedir(string, string)\n~~~\n\nCommands that are only available in the REPL\n--------------------------------------------\n\n* `help` displays a syntax highlighted overview of most functions.\n* `webhelp` displays a syntax highlighted overview of functions related to handling requests.\n* `confighelp` displays a syntax highlighted overview of functions related to server configuration.\n\nExtra Lua functions\n-------------------\n\n~~~c\n// Pretty print. Outputs the values in, or a description of, the given Lua value(s).\npprint(...)\n\n// Takes a Python filename, executes the script with the `python` binary in the Path.\n// Returns the output as a Lua table, where each line is an entry.\npy(string) -> table\n\n// Takes one or more system commands (possibly separated by `;`) and runs them.\n// Returns the output lines as a table.\nrun(string) -> table\n\n// Lists the keys and values of a Lua table. Returns a string.\n// Lists the contents of the global namespace `_G` if no arguments are given.\ndir([table]) -> string\n~~~\n\nMarkdown\n--------\n\nAlgernon can be used as a quick Markdown viewer with the `-m` flag.\n\nTry `algernon -m README.md` to view `README.md` in the browser, serving the file once on a port >3000.\n\nIn addition to the regular Markdown syntax, Algernon supports setting the page title and syntax highlight style with a header comment like this at the top of a Markdown file:\n\n    <!--\n    title: Page title\n    theme: dark\n    code_style: lovelace\n    replace_with_theme: default_theme\n    -->\n\nCode is highlighted with [highlight.js](https://highlightjs.org/) and [several styles](https://highlightjs.org/static/demo/) are available.\n\nThe string that follows `replace_with_theme` will be used for replacing the current theme string (like `dark`) with the given string. This makes it possible to use one image (like `logo_default_theme.png`) for one theme and another image (`logo_dark.png`) for the dark theme.\n\nThe theme can be `light`, `dark`, `redbox`, `bw`, `github`, `wing`, `material`, `neon`, `default`, `werc`, `setconf` or a path to a CSS file. Or `style.gcss` can exist in the same directory.\n\nAn overview of available syntax highlighting styles can be found at the [Chroma Style Gallery](https://xyproto.github.io/splash/docs/).\n\n\nHTTPS certificates with Let's Encrypt and Algernon\n--------------------------------------------------\n\n#### Method 1\n\nFollow the guide at [certbot.eff.org](https://certbot.eff.org/) for the \"None of the above\" web server, then start `algernon` with `--cert=/etc/letsencrypt/live/myhappydomain.com/cert.pem --key=/etc/letsencrypt/live/myhappydomain.com/privkey.pem` where `myhappydomain.com` is replaced with your own domain name.\n\nFirst make Algernon serve a directory for the domain, like `/srv/myhappydomain.com`, then use that as the webroot when configuring `certbot` with the `certbot certonly` command.\n\nRemember to set up a cron-job or something similar to run `certbot renew` every once in a while (every 12 hours is suggested by [certbot.eff.org](https://certbot.eff.org/)). Also remember to restart the algernon service after updating the certificates.\n\n#### Method 2\n\nUse the `--letsencrypt` flag together with the `--domain` flag to automatically fetch and use certificates from Let's Encrypt.\n\nFor instance, if `/srv/myhappydomain.com` exists, then `algernon --letsencrypt --domain /srv` can be used to serve `myhappydomain.com` if it points to this server, and fetch certificates from Let's Encrypt.\n\nWhen `--letsencrypt` is used, it will try to serve on port 443 and 80 (which redirects to 443).\n\nReleases\n--------\n\n* [Arch Linux package](https://aur.archlinux.org/packages/algernon) in the AUR.\n* [Windows executable](https://github.com/xyproto/algernon/releases/tag/v1.0-win8-64).\n* [macOS homebrew package](https://raw.githubusercontent.com/xyproto/algernon/main/system/homebrew/algernon.rb)\n* [Algernon Tray Launcher for macOS, in App Store](https://itunes.apple.com/no/app/algernon-server/id1030394926?l=nb&mt=12)\n* Source releases are tagged with a version number at release.\n\n\nRequirements\n------------\n\n* `go 1.21` or later is a requirement for building Algernon.\n* For `go 1.10`, `1.11`, `1.12`, `1.13`, `1.14`, '1.15`, `1.16` + `gcc-go <10` version `1.12.7` of Algernon is the last supported version.\n\nAccess logs\n-----------\n\nCan log to a Combined Log Format access log with the `--accesslog` flag. This works nicely together with [goaccess](https://goaccess.io/).\n\n### Example usage\n\nServe files in one directory:\n\n    algernon --accesslog=access.log -x\n\nThen visit the web page once, to create one entry in the access.log.\n\nThe wonderful [goaccess](https://goaccess.io) utility can then be used to view the access log, while it is being filled:\n\n    goaccess --no-global-config --log-format=COMBINED access.log\n\nIf you have goaccess setup correctly, running goaccess without any flags should work too:\n\n    goaccess access.log\n\n`.alg` files\n------------\n\n`.alg` files are just renamed `.zip` files, that can be served by Algernon. There is an example application here: [wercstyle](https://github.com/xyproto/wercstyle).\n\nLogo license\n------------\n\nThanks to [Egon Elbre](https://twitter.com/egonelbre) for the two SVG drawings that I remixed into the current logo ([CC0](https://creativecommons.org/publicdomain/zero/1.0/) licensed).\n\nListening to port 80 without running as root\n--------------------------------------------\n\nFor Linux:\n\n    sudo setcap cap_net_bind_service=+ep /usr/bin/algernon\n\nOther resources\n---------------\n\n* [Algernon on Docker Hub](https://hub.docker.com/r/xyproto/algernon/)\n\nGeneral information\n-------------------\n\n* Version: 1.17.1\n* License: BSD-3\n* Alexander F. Rødseth &lt;xyproto@archlinux.org&gt;\n\nStargazers over time\n--------------------\n\n[![Stargazers over time](https://starchart.cc/xyproto/algernon.svg)](https://starchart.cc/xyproto/algernon)\n\n<a href=\"https://algernon.roboticoverlords.org\"><img alt=\"0-0\" src=\"img/gophereyes.png\" align=\"right\"></a>\n\nThe jump in stargazers happened when Algernon reached the front page of Hacker News:\n\n* [Self-Contained Pure-Go Web Server with Lua, MD, HTTP/2, QUIC, Redis Support](https://news.ycombinator.com/item?id=19578351)\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 16.6630859375,
          "content": "# Plans\n\nGeneral\n-------\n\n- [ ] Check if fasthttp supports flush() and close() and then switch handlers over to fasthttp, or remove fasthttp.\n- [ ] Create an example application for people that are learning to create HTML, where they can log in and then drag and drop to upload files.\n- [ ] Fix the issue in the splash package so that both MathJax and applying syntax highlighting to code can be used at the same time (engine/rendering.go).\n- [ ] When the -m flag is used, if the file is not found, exit with an error.\n- [ ] Add a built-in SSH3 server that can be configured with a flag.\n- [ ] Let USR1 or USR2 signals clear the cache.\n- [ ] Add a Go function for adding a Lua function that can handle websocket requests to `/ws`.\n- [ ] Add a flag for redirecting all `http://` traffic to `https://`.\n- [ ] Add a smoother way than `CodeLib()` to define site-wide Lua values.\n- [ ] Create a video like the one at [vim-livedown](https://github.com/shime/vim-livedown), that demonstrates live editing of Markdown.\n- [ ] When `-m` is given, scan the given Markdown file for images that will also need to be served, then wait until those are served before exiting.\n- [ ] Add support for [metatar](https://github.com/xyproto/metatar) in Lua, to be able to offer a whole Arch Linux package repository from just a single `.lua` file, and a collection of `PKGBUILD` files.\n- [ ] Integrate [boltBrowser](https://github.com/ShoshinNikita/boltBrowser).\n- [ ] Make it possible to send the access log to the database.\n- [ ] Make it possible to send the error log to the database.\n- [ ] User management interface + web REPL + stats + logs + import/export data .alg launcher.\n- [ ] Make most methods in [onthefly](https://github.com/xyproto/onthefly) available to Algernon/Lua.\n- [ ] Present directories with media files with a built-in page.\n- [ ] Make the behavior per file extension or mime type configurable: \"raw view\", \"pretty view\" or \"download\"\n- [ ] Add a Lua function for upgrading a handler to a WebSocket handler, also using concurrency in Lua.\n- [ ] Add support for pushing from emacs \"writefreely mode\" to Algernon with this [API](https://developers.write.as/docs/api/).\n- [ ] Parse options with [docopt](https://github.com/docopt/docopt.go) or [cli](https://github.com/urfave/cli).\n- [ ] Use [configparser](https://github.com/alyu/configparser) for a configuration file with port, host, keys etc.\n\nLanguages other than Lua\n------------------------\n\n- [ ] Add support for [zygomys](https://github.com/glycerine/zygomys) on equal footing with Lua.\n- [ ] Embed the [Fennel](https://github.com/bakpakin/Fennel) package (compiles to Lua) so that Fennel can be used on equal footing with Lua for Algernon projects.\n\nCommunity\n---------\n\n- [ ] Add links to various chat pages and forums in the `README.md` file.\n- [ ] Create a web page for uploading, reviewing, previewing and downloading Algernon Applications (`.alg` files).\n\nPerformance and memory usage\n----------------------------\n\n- [ ] Make calling Lua scripts thread safe without using a mutex, either by modifying gopher-lua or by creating a way of calling Lua over channels.\n- [ ] Profile the startup process and make it even faster.\n- [ ] Add a flag for caching to the database backend instead of to memory.\n- [ ] Add an option for using **brotly** compression instead of **gzip**.\n- [ ] Use fasthttp (or something equally performant) when using regular HTTP: [switching to fasthttp](https://github.com/valyala/fasthttp#switching-from-nethttp-to-fasthttp).\n- [ ] When requests are handled, spawn each switch/case as a Go routine. Benchmark to see if there is a difference.\n\nStyles and themes\n-----------------\n\n- [ ] Port the layout and concept of [werc](http://werc.cat-v.org/) to Algernon. See also [gowerc](https://bitbucket.org/mischief/gowerc/src).\n- [ ] Add a flag for dumping the currently used Markdown theme to a CSS file and exit.\n- [ ] Add a Markdown style similar to this one: [style.css](https://hyperapp.glitch.me/style.css)\n- [ ] Add a Markdown style similar to this one: [setconf](http://setconf.roboticoverlords.org/)\n- [ ] Add support for [Ghost](https://ghost.org) and/or [Hugo](https://github.com/gohugoio/hugoThemes) themes.\n\nDocumentation/tutorials\n-----------------------\n\n- [ ] Add sample for using Vue.js + Algernon.\n- [ ] Look into using [slate](https://github.com/lord/slate) for documentation.\n- [ ] Add sample for HyperApp + database usage.\n- [ ] Terminal recording of Lua tutorial using `algernon --lua`.\n- [ ] Terminal recording demonstrating creating a simple register+login site.\n- [ ] Update the book to be more similar to the python Flask documentation.\n- [ ] Video tutorials and screencasts.\n- [ ] Document what the \"current directory\" is for various Lua functions that deals with files.\n- [ ] Document better the order of output calls when modifying the header to redirect.\n- [ ] Document how to read JSON from one place and output processed data somewhere else.\n- [ ] Create a docker image that comes with all the samples.\n- [ ] Create a sample TODOMVC application.\n- [ ] Port [niltalk](https://github.com/knadh/niltalk) to Algernon, in a separate repository.\n- [ ] Create a sample chat application.\n- [ ] Document possible MultiMarkdown keywords somewhere (in a separate document).\n- [ ] Add a sample for bricklayer https://github.com/ademilter/bricklayer\n\nVarious\n-------\n\n- [ ] Add a C++ plugin example.\n- [ ] Check behavior of ctrl-c/ctrl-d on macOS vs Linux vs Windows.\n- [ ] Add a theme that looks like [huytd.github.io](https://huytd.github.io).\n- [ ] Add fastcgi support, for connecting to fastcgi servers and use them for serving content?\n- [ ] Write a module for caching that can cache chunks of files and stream files that does not fit in memory directly from disk.\n- [ ] Add support for systemd reload, not just restart.\n- [ ] Render JavaScript server-side by using [Goja](https://github.com/dop251/goja)\n- [ ] Use [cfilter](https://github.com/irfansharif/cfilter) for potentially faster cache lookups.\n- [ ] Support [HAML](https://github.com/travissimon/ghaml)?\n- [ ] Introduce a separate package for dealing with Lua pools, Lua states and\n      adding custom functions to some Lua states. All without using mutexes.\n- [ ] Support for websockets (port a small multiplayer game to test).\n- [ ] Add support for Handlebars: [raymond](https://github.com/aymerick/raymond)\n- [ ] Server side support for [sw-delta](https://github.com/gmetais/sw-delta)\n- [ ] Add a flag to minify all transmitted CSS/HTML/JS/JSON/SVG/XML files\n      https://github.com/tdewolff/minify\n- [ ] Draw inspiration from https://github.com/olebedev/go-starter-kit\n- [ ] Draw inspiration from https://github.com/disintegration/bebop\n- [ ] Provide a Lua sample/command for listing files and directories with dates and sizes.\n- [ ] Find a way to redirect while preserving headers and/or use a mux package.\n- [ ] Implement a documentation server that can convert files with pandoc.\n- [ ] Make it easy to apply patches on the fly, when GET-ting the resulting file\n- [ ] Built in support for running the Lua REPL in the browser (possibly by using \"gotty\", either as a package or wrapped in a script).\n- [ ] Create a sample that is inspired by this design: http://codepen.io/KtorZ/pen/ZOzdqG\n- [ ] Add Markdown themes from: https://github.com/mixu/markdown-styles\n- [ ] Add a similar boilerplate as Jekyll to megaboilerplate.com\n- [ ] Describe how to set up a system a bit similar to a wiki, but more lightweight, using git + git hooks + algernon.\n- [ ] Add a flag for listing and selecting styles for Markdown and directory listings.\n- [ ] Specify if rate limiting is per user/ip/handler\n- [ ] Add a flag for serving with fasthttp: https://github.com/valyala/fasthttp\n- [ ] Create alg2systemd-nspawn and alg2runc.\n- [ ] Create a site generator for Algernon. Draw inspiration from http://nanoc.ws/doc/tutorial/\n- [ ] Draw inspiration from https://lwan.ws/\n- [ ] Check out https://github.com/peterh/liner\n- [ ] Support SASS and HAML. Maybe.\n- [ ] Port Pastecat to Algernon (https://github.com/mvdan/pastecat)\n- [ ] Argon2 hashing algorithm support (https://godoc.org/github.com/magical/argon2)\n- [ ] Add config Function for adding a directory listing title to a certain path regex (and/or a title.txt or common.md file).\n- [ ] Add a lua function for presenting an executable as a web application, like gotty does. Create a password protected example application.\n- [ ] Web application for browsing the database.\n- [ ] Document the case sensitivity or add case insensitivity support.\n- [ ] Create a tool that pretends to upload a file of size 128 bytes\n      (Content-Length), but continues to stream data. Test with Algernon.\n- [ ] Lua plugin that is not via the database\n- [ ] File upload while handling gzip\n- [ ] Cache os.Stat also when serving directory listings\n- [ ] Implement https://github.com/labstack/echo/tree/master/examples as Algernon applications\n- [ ] Look into github.com/jessevdk/go-flags/\n- [ ] pprint should output text to the browser when not running in the repl (or be disabled)\n- [ ] Graph of visitors over time\n- [ ] See if the HTTP headers from the client + country of origin + mouse\n      movement patterns can become some sort of pseudo ID. Combine with a\n      neural net. Can be used for storing non-critical data like preferred\n      themes, font sizes etc. Time of day may also be an input.\n- [ ] Add editor syntax highlight files.\n- [ ] Support for pretty URLs and/or routing in serverconf.lua (/position/x/2/y/4).\n- [ ] Command line utilities for editing users, permissions, databases and Lua functions in databases.\n- [ ] Add a lua function for running a lua function periodically.\n- [ ] Add a cache mode for caching binary files only.\n- [ ] MSI installer.\n- [ ] deb/ppa\n- [ ] Consider using https://github.com/sbinet/igo instead of readline.\n- [ ] Create a utility for creating and running new projects, ala Meteor.\n- [ ] Add Lua functions for BSON and ION?\n- [ ] Add simpleredis/simplebolt/simplemaria functions for exporting/importing data to JSON and offer these.\n\nEvents\n------\n\n- [ ] Better 404 page not found page for users visiting \"/\".\n- [ ] Consider only listening for changes after a file has been visited, then stop watching it after a while.\n- [ ] Use a regexp or a JavaScript minification package instead of replacing strings in insertAutoRefresh.\n- [ ] In genFileChangeEvents, check for CloseNotify for more graceful timeouts.\n\nServer configuration\n--------------------\n- [ ] Prefer environment variables and flags over lua server configuration.\n\nRouting\n-------\n- [ ] Server(\"host:port\", \"/srv/http/somedirectory\", \"/var/log/algernon/logfile.log\")\n- [ ] Redirect(\"host/path:port\", \":port/path\")\n- [ ] Rewrite(\"host:port\", \"host:port/path\")\n- [ ] RewritePrefix(\"www.\", \"\")\n- [ ] RewritePort(\"host\", 443, 80)\n\nREPL\n----\n\n- [/] Make `help` work a bit like in Python.\n- [/] Make `dir` work a bit like in Python.\n\nPlugins\n-------\n\n- [ ] Unmarshal the CallPlugin reply into appropriate Lua structures instead of returning a JSON string.\n- [ ] If a plugin ends with `.go`, check if go is installed and run it with \"go run\" (if a binary of the same name has not been provided for the current platform).\n- [ ] Add a function for loading all plugins in a \"plugins\" directory.\n\nSecurity-related\n----------------\n\n- [ ] Consider using [secure](https://github.com/unrolled/secure).\n- [ ] HTTP Basic Auth using the permissions2 usernames and passwords, for selected URL prefixes. Use code from \"scoreserver\".\n- [ ] Check that HTTP reads not only times out, but has a deadline.\n- [ ] Flag for disabling directory listings entirely.\n- [ ] OAuth 1\n- [ ] OAuth 2\n- [ ] The ability to set headers and do HTTP Basic Auth manually.\n- [ ] Check if `*` or the server host should be used as parameter to the EventServer function.\n- [ ] Implement a warning when using cookies over regular HTTP.\n\nConsole output\n--------------\n- [ ] Check the terminal capabilities and terminal width. Display a smaller logo if the width is smaller. Or no logo.\n\nLua\n---\n- [ ] Add a function named \"sort\" for quickly sorting tables by key or by value, numerical or lexical.\n- [ ] Add a Lua function ForEach that takes a data structure and a function\n      that takes a key and a value.\n- [ ] Wrap JNode in the same way as JFile.\n- [ ] Change the \"JSON\" function and create some sort of JSON object that returns the string by default.\n- [ ] Add a function for sanitizing HTML, possibly with bluemonday.\n- [ ] Create an import function for importing online lua libraries.\n      (Like `require`, but over http). (possibly luarocks packages).\n- [ ] In runLuaString, check if L.Close() really is needed instead of\n      luapool.Put(L)\n- [ ] Way to load parts of a page asynchronously (with gopher-lua channels?)\n- [ ] Way to use Lua libraries for adding ie. SQLite support.\n\nPerformance\n-----------\n\n- [ ] Minify CSS, JS and HTML (as enabled by default, but can be disabled)\n- [ ] Find a reliable way of measuring speed and emulating users.\n      gor? https://github.com/buger/gor\n- [ ] Cache compiled templates as well, not just the final result.\n\nUnusual features\n----------------\n\n- [ ] A function for specifying png images by using ` `, `-` and `*` for\n      pixels inside a `[[``]]` block, while specifying a main color. This can\n      be used as an alternative way to serve favicon.ico files or specify icon\n      graphics. Same thing could be used for svg, but by specifying numbered\n      vertices in a polygon. Update: Someone else has made a format for this!\n      https://github.com/cparnot/ASCIImage\n\nMaybe\n-----\n\n- [ ] Add support for both SASS and SCSS (Perhaps https://github.com/c9s/c6)\n- [ ] Add configurable log hooks for the systems logrus supports.\n      See: https://github.com/Sirupsen/logrus\n- [ ] When searching files and directories, do it in parallel, like [wallutils](https://github.com/xyproto/wallutils).\n- [ ] Add a Lua function for outputting Lua tables to the client.\n- [ ] Add a Lua function for fetching a value from a table, or a blank string.\n- [ ] Add a Lua function for checking if a file exists.\n- [ ] Mention the `jpath` package in the README.\n- [ ] Support for plugins written in BF.\n- [ ] A flag to store the Bolt database inside the given zip file?\n- [ ] Keep all configuration settings in Redis. Use an external package for\n      handling configuration.\n- [ ] Support for the [onthefly](https://github.com/xyproto/onthefly) package,\n      as a virtual DOM.\n- [ ] WebRTC? Three.js? Web components?\n- [ ] Use the goroutine functionality provided by gopher-lua to provide\n      \"trigger functions\" that sends 1 on a channel when the function\n      triggers, perhaps when a file is changed. Combine this with javascript\n      somehow to make it possible to change the parts of a page when an\n      event happens.\n- [ ] User functions shared by many lua pages should not be placed in\n      `app.lua`, nor in a place related to the server, but be imported where\n      they are needed. Either by importing a lua file, by importing a lua\n      file by url or by connecting to a Lua Function Server.\n- [ ] Make it possible to toggle the pretty error view on or off in\n      `serverconf.lua`, for temporary debugging.\n- [ ] Find a good way to store errors.\n- [ ] Implement a page, with admin rights, that displays the last error\n      together with the sourcecode, in a pretty way.\n- [ ] Add a flag for specifying a different default set of URL prefixes with\n      admin, user or public rights.\n- [ ] Add a flag for detailed debug information at errors, or not.\n- [ ] If a symbolic link to a directory is made, for instance /chat -> /data,\n      then algernon should also apply user permissions to the symbolic link.\n- [ ] Add a function for calling EVAL on the redis server, while sending Lua\n      code to the server for evaluation.\n- [ ] Re-run the Lua server script if changed. Restart the server if the addr\n      or port is changed.\n- [ ] Add a function tprint(\"file.tmpl\", table) for github.com/unrolled/render.\n- [ ] Read zip files directly instead of decompressing when given as the\n      first argument (downside: some Amber functions look for files in the\n      same directory).\n- [ ] Utilities to lint and package .alg archives.\n- [ ] Whitelist and blacklist for which file extensions to cache\n- [ ] Use golang/pkg/net/rpc/#Client.Go for calling plugins asynchronously.\n      Let Lua provide a callback function.\n- [ ] Configuration function for whitelisting URL prefixes.\n- [ ] Functions for adding URL prefixes to the whitelist\n- [ ] Lua function for reading the contents of a file in the script dir,\n      but in a cached way. Timestamp, filename and data are stored in Redis,\n      if timestamp changes, data is re-read.\n- [ ] Add a Lua function for removing all cache entries without a hit.\n- [ ] Support the LuaPage format (\".lp\", HTML with <% %> and <%= %> for Lua code).\n- [ ] Add Lua functions for HTTP PUT without using JSON? (for etcd, but might be a bad idea in the first place).\n- [ ] Rewrite in C++23 and rename the project to \"FnuFnu\".\n"
        },
        {
          "name": "TUTORIAL.md",
          "type": "blob",
          "size": 6.0166015625,
          "content": "# Algernon Tutorial\n\n## \"Hello\"\n\n### Goal\n\nDisplay `Hello Algernon!` in your browser.\n\n### Steps\n\n#### Create `hello.lua`\n\nCreate a `hello.lua` file that looks like this:\n\n```lua\nhandle(\"/\", function()\n  content(\"text/plain\")\n  print(\"Hello Algernon!\")\nend)\n```\n\n* `handle` is a built-in function that can serve an endpoint with a given function.\n* `function() [...] end` is an anonymous Lua function.\n* `content` is a built-in function for settting the content type / MIME type, such as `text/plain`, `text/html` or `image/png`.\n* `print` is a built-in function for outputting text to the HTTP client (typically a browser) that is visiting this page.\n\n#### Start Algernon:\n\nRun `algernon hello.lua`\n\n#### View the result\n\nVisit `http://localhost:3000` in your favorite browser.\n\n## \"Simple\"\n\n### Goal\n\nUse a directory structure instead of a single Lua file with handlers.\n\n### Steps\n\n#### Create and enter a directory\n\n```bash\nmkdir simple\ncd simple\n```\n\n#### Create an `index.lua` file\n\nCreate an `index.lua` file that looks like this:\n\n```lua\nprint(\"the light\")\n```\n\n#### Serve the current directory\n\nServe the current directory with Algernon:\n\n```bash\nalgernon .\n```\n\n#### View the result\n\nVisit `http://localhost:3000` in a browser and see `\"the light\"`.\n\n## \"Eyes\"\n\n### Goal\n\nServe an image by printing it from Lua, and then use it within an HTML page.\n\n### Steps\n\n#### Create and enter a directory\n\n```bash\nmkdir eyes\ncd eyes\n```\n\n#### Create `eye.lua`\n\nCreate an `eye.lua` file that looks like this:\n\n```lua\ncontent(\"image/svg+xml\")\n\nprint [[\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n  <circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"white\" stroke=\"black\" stroke-width=\"2\" />\n  <circle cx=\"38\" cy=\"50\" r=\"20\" fill=\"black\" />\n  <circle cx=\"28\" cy=\"42\" r=\"5\" fill=\"white\" />\n</svg>\n]]\n```\n\nThis outputs an `SVG` image.\n\n#### Create `index.lua`\n\nCreate an `index.lua` file that looks like this:\n\n```lua\ncontent(\"text/html\")\n\nprint [[\n<!doctype html><html><body>\n<img src=\"eye.lua\" width=\"25em\">\n<img src=\"eye.lua\" width=\"25em\">\n]]\n```\n\nThis is the main/default handler for this directory, and outputs a simple `HTML` page that displays two images.\n\nThe browser does not care if the images end with an unusual file extension such as `.lua`, because the content-type / MIME type regulates this.\n\n#### Serve the current directory\n\n```bash\nalgernon -e .\n```\n\nNote that the `-e` flag is for \"development mode\", where error messages may appear directly in the browser, and pages are not cached.\n\n#### View the result\n\n* Visit `http://localhost:3000/eye.lua` in a browser and observe the result of serving an SVG image.\n* Visit `http://localhost:3000/` in a browser and observe the result of serving the HTML document (which uses `eye.lua`, twice).\n\n#### Examine the network traffic\n\n* In ie. Firefox, press `F12` (or `fn`+`F12` on macOS). Select the `Network` tab and then reload the page.\n* Click the `200 | GET | localhost:3000 | eye.lua | ...` row.\n* On the right hand side, observe that `Content-Type` is `image/svg+xml` and that the `Server` is `Algernon` and a version number.\n* There are also various security-related headers that have been set (that can be turned off with the `--no-headers` flag).\n\n## \"Auto-Refresh\"\n\n### Goal\n\nStyle a `HTML` page with `CSS` and try out the auto-refresh feature.\n\n### Steps\n\n#### Create and enter a directory\n\n```bash\nmkdir style\ncd style\n```\n\n#### Create the `eye.svg` image\n\nCreate an `eye.svg` file that looks like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n  <circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"white\" stroke=\"black\" stroke-width=\"4\" />\n  <circle cx=\"38\" cy=\"50\" r=\"20\" fill=\"black\" />\n  <circle cx=\"28\" cy=\"42\" r=\"5\" fill=\"white\" />\n</svg>\n```\n\n#### Create the `mouth.svg` image\n\nCreate a `mouth.svg` file that looks like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"50\" viewBox=\"0 0 100 50\">\n  <path d=\"M 10,25 Q 50,50 90,25 Q 50,0 10,25 Z\" fill=\"white\" stroke=\"black\" stroke-width=\"2\"/>\n</svg>\n```\n\n#### Create the HTML document\n\nCreate an `index.html` file that looks like this:\n\n```\n<!doctype html>\n<html>\n  <head>\n    <title>Face</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <div id=\"face\">\n      <img src=\"eye.svg\" id=\"left_eye\">\n      <img src=\"eye.svg\" id=\"right_eye\">\n      <img src=\"mouth.svg\" id=\"mouth\">\n    </div>\n  </body>\n</html>\n```\n\n#### Style the document with CSS\n\nCreate a `style.css` file that looks like this:\n\n```\n#face {\n  position: relative;\n  top: 4em;\n  left: 4em;\n  width: 12.5em;\n  height: 12.5em;\n  background: lightblue;\n  border-radius: 1.25em;\n}\n\n#left_eye, #right_eye, #mouth {\n  position: absolute;\n}\n\n#left_eye, #right_eye {\n  animation: rotate 16s linear infinite;\n}\n\n#left_eye {\n  top: 2em;\n  left: 0.75em;\n  width: 5.625em;\n}\n\n#right_eye {\n  top: 2em;\n  left: 6.125em;\n  width: 5.625em;\n}\n\n#mouth {\n  top: 7em;\n  left: 3.125em;\n  width: 6.25em;\n}\n\n@keyframes rotate {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n```\n\n#### Serve the page\n\nServe the page with:\n\n```bash\nalgernon -a -e --no-headers .\n```\n\n* Note that serving with `algernon -a -e` and visiting `http://127.0.0.1:3000` instead of using `--no-headers` and visiting `http://localhost:3000` also works.\n\n#### View the result\n\nVisit `http://localhost:3000` to see an animated page.\n\n#### Auto-refresh\n\nAlgernon comes with an auto-refresh feature that inserts a tiny bit of JavaScript into a page, watches files for changes and also serves file changed events as SSE (server sent events).\n\nHere's one way to try it out (requires the `-a` flag):\n\n* While still serving the page, and displaying it in the browser, change the numbers in `style.css`, save the file and observe that the page in the browser instantly changes.\n* Also try changing numbers in `eye.svg` and `mouth.svg`, save the file and watch the page instantly being updated.\n\n## Next step\n\nWhat should the next step in this tutorial be? Please submit an issue with a suggestion. Thanks for reading! :)\n"
        },
        {
          "name": "alg2docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "algernon.1",
          "type": "blob",
          "size": 3.7421875,
          "content": ".\\\"             -*-Nroff-*-\n.\\\"\n.TH \"algernon\" 1 \"13 Jul 2024\" \"\" \"\"\n.SH NAME\nalgernon \\- web server\n.sp\n.SH SYNOPSIS\n.B algernon\n[\\fBflags\\fR]\n[\\fBfile or directory\\fR]\n[\\fBhost\\fR][\\fB:port\\fR]\n.sp\n.SH DESCRIPTION\nServe the given file or directory, with an optional \\fB:port\\fP and \\fBhostname\\fP.\n.sp\n.SH OPTIONS\n.sp\n.TP\n.B \\-a or \\-\\-autorefresh\nInject JavaScript that refreshes the served web pages when they receive\nserver-sent events (SSE), when a file or directory has changed.\n.TP\n.B \\-v or \\-\\-version\nDisplay the current version number.\n.TP\n.B \\-h or \\-\\-help\nDisplay usage information. Includes a few flags that are not listed here.\n.TP\n.B \\-\\-noheaders\nDon't use the security-related HTTP headers.\n.TP\n.B \\-\\-stricter\nStricter HTTP headers (same origin policy).\n.TP\n.B \\-n or \\-\\-nobanner\nDon't display a colorful banner at start.\n.TP\n.B \\-\\-cert=FILENAME\nProvide a TLS certificate, for using HTTPS.\n.TP\n.B \\-\\-key=FILENAME\nProvide a TLS key, for using HTTPS.\n.TP\n.B \\-\\-boltdb=FILENAME\nProvide a Bolt database filename, instead of using \\fB/tmp/algernon.db\\fP.\n.TP\n.B \\-t or \\-\\-httponly\nOnly serve regular HTTP.\n.TP\n.B \\-\\-http2only\nOnly serve HTTP/2, without HTTPS.\n.TP\n.B \\-u\nServe QUIC aka HTTP/3.\n.TP\n.B \\-\\-limit=N\nLimit clients to N request per second (the default is 10).\n.TP\n.B \\-\\-nodb\nDon't use a database backend. Some Lua functions might not work.\n.TP\n.B \\-\\-timeout=N\nTimeout when serving files, in seconds.\n.TP\n.B \\-\\-largesize=N\nThreshold for not reading static files into memory, in bytes.\n.TP\n.B \\-\\-lua\nDon't serve anything, just present an interactive Lua prompt (REPL).\n.TP\n.B \\-\\-server\nDisable debug + interactive mode. Is unrelated to if anything is served or not.\n.TP\n.B \\-q or \\-\\-quiet\nDon't output anything to stdout or stderr.\n.TP\n.B \\-\\-servername=NAME\nCustom HTTP header value for the \\fBServer\\fP field.\n.TP\n.B \\-o or \\-\\-open=COMMAND\nOpen the served URL with \\fBxdg-open\\fP, or with the given application.\n.TP\n.B \\-z or \\-\\-quit\nQuit after the first request has been served.\n.TP\n.B \\-m\nView the given Markdown file in the browser.\nQuit after the file has been served once.\nThis is equivalent to \\fB\\-q \\-o \\-z\\fP.\n.TP\n.B \\-c or \\-\\-statcache\nSpeed up responses by caching \\fBos.Stat\\fP.\nOnly use if served files will never be removed!\n.TP\n.B \\-\\-accesslog=FILENAME\nFilename for where to log requests in the Combined Log Format (CLF).\n.TP\n.B \\-\\-ncsa=FILENAME\nFilename for where to log requests in the Common Log Format (NCSA).\n.TP\n.B \\-\\-domain\nServe files from the subdirectory with the same name as the requested domain,\nfor instance \\fB/srv/algernon/mydomain.com\\fP and \\fB/srv/algernon/otherweb.com\\fP,\ndepending on if HTTP requests are using \\fBhttps://mydomain.com\\fP or\n\\fBhttps://otherweb.com\\fP.\n.TP\n.B \\-x or \\-\\-simple\nSimple mode. Serve the current directory over regular HTTP, disable debug mode,\ninteractive mode, request limits and all features that require a database.\n.TP\n.PP\n.SH \"ENV\"\n.sp\nThe \\fBNO_COLOR\\fP environment variable can be set to 1 to turn off all colors.\n.sp\n.SH \"WHY\"\n.sp\nWeb development with few dependencies and a decent caching system.\n.SH \"EXAMPLE USAGE\"\n.sp\n.TP\nFor auto-refreshing a webpage while developing:\n\\fBalgernon --dev --httponly --debug --autorefresh --bolt --server . :4000\\fP\n.TP\nServe /srv/mydomain.com and /srv/otherweb.com over HTTP and HTTPS + HTTP/2:\n\\fBalgernon -c --domain --server --cachesize 67108864 --prod /srv\\fP\n.TP\nServe the current dir over QUIC, port 7000, no banner:\n\\fBalgernon -s -u -n . :7000\\fP\n.TP\nServe the current directory over HTTP, port 3000. No limits, cache, permissions\nor database connections:\n\\fBalgernon -x\\fP\n.SH \"SEE ALSO\"\n.BR caddy (1)\n.BR nginx (1)\n.SH BUGS\nThis man page is a work in progress.\n.SH VERSION\n1.17.1\n.SH AUTHOR\n.B algernon\nwas written by Alexander F. Rødseth <xyproto@archlinux.org>\n"
        },
        {
          "name": "api_test.go",
          "type": "blob",
          "size": 2.0439453125,
          "content": "// API version number check\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/xyproto/algernon/engine\"\n\t\"github.com/xyproto/permissionbolt/v2\"\n\t\"github.com/xyproto/permissions\"\n\t\"github.com/xyproto/pinterface\"\n\t\"github.com/xyproto/simplebolt\"\n\t\"github.com/xyproto/simpleredis/v2\"\n\t//\"github.com/xyproto/permissionsql\"\n\t//\"github.com/xyproto/pstore\"\n\t//\"github.com/xyproto/simplehstore\"\n\t//\"github.com/xyproto/simplemaria\"\n)\n\n// VersionInfo helps to keep track of package names and versions\ntype VersionInfo struct {\n\tname    string\n\tcurrent float64\n\ttarget  float64\n}\n\n// New takes the name of the go package, the current and the desired version\nfunc New(name string, current, target float64) *VersionInfo {\n\treturn &VersionInfo{name, current, target}\n}\n\n// Check compares the current and target version\nfunc (v *VersionInfo) Check() error {\n\tif v.current != v.target {\n\t\treturn fmt.Errorf(\"is %.1f, needs version %.1f\", v.current, v.target)\n\t}\n\treturn nil\n}\n\nfunc TestAPI(t *testing.T) {\n\tif err := New(\"simplebolt\", simplebolt.Version, 5.1).Check(); err != nil {\n\t\tt.Error(err)\n\t}\n\tif err := New(\"permissionbolt\", permissionbolt.Version, 2.6).Check(); err != nil {\n\t\tt.Error(err)\n\t}\n\tif err := New(\"simpleredis\", simpleredis.Version, 2.8).Check(); err != nil {\n\t\tt.Error(err)\n\t}\n\tif !strings.HasPrefix(permissions.VersionString, \"1.\") {\n\t\tt.Error(fmt.Errorf(\"permissions is %q, requires %q\", permissions.VersionString, \"1.*\"))\n\t}\n\tif err := New(\"pinterface\", pinterface.Version, 5.3).Check(); err != nil {\n\t\tt.Error(err)\n\t}\n\tif err := New(\"engine\", engine.Version, 2.0).Check(); err != nil {\n\t\tt.Error(err)\n\t}\n\n\t// These adds many dependencies when testing\n\t// if err := New(\"simplemaria\", simplemaria.Version, 3.0).Check(); err != nil {\n\t// \tt.Error(err)\n\t// }\n\t// if err := New(\"permissionsql\", permissionsql.Version, 2.0).Check(); err != nil {\n\t// \tt.Error(err)\n\t// }\n\t// if err := New(\"simplehstore\", simplehstore.Version, 2.3).Check(); err != nil {\n\t// \tt.Error(err)\n\t// }\n\t// if err := New(\"pstore\", pstore.Version, 3.1).Check(); err != nil {\n\t// \tt.Error(err)\n\t// }\n}\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "cachemode",
          "type": "tree",
          "content": null
        },
        {
          "name": "cert.pem",
          "type": "blob",
          "size": 0.0126953125,
          "content": "keys/cert.pem"
        },
        {
          "name": "console",
          "type": "tree",
          "content": null
        },
        {
          "name": "default.pgo",
          "type": "blob",
          "size": 252.8984375,
          "content": null
        },
        {
          "name": "desktop",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "form_example.sh",
          "type": "blob",
          "size": 0.1552734375,
          "content": "#!/bin/sh\n# serving the registration form sample\n./algernon --dev --conf serverconf.lua --dir samples/regform --httponly --debug --autorefresh --bolt --server\n"
        },
        {
          "name": "gencert.sh",
          "type": "blob",
          "size": 0.20703125,
          "content": "#!/bin/sh\n# For generating SSL certs, for testing.\n# Just press return at all the prompts, but enter \"localhost\" at Common Name.\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 3000 -nodes\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 5.6162109375,
          "content": "module github.com/xyproto/algernon\n\ngo 1.23.1\n\nrequire (\n\tgithub.com/caddyserver/certmagic v0.21.6\n\tgithub.com/chzyer/readline v1.5.1\n\tgithub.com/ddliu/go-httpclient v0.7.1\n\tgithub.com/denisenkom/go-mssqldb v0.12.3\n\tgithub.com/didip/tollbooth v4.0.2+incompatible\n\tgithub.com/dustin/go-humanize v1.0.1\n\tgithub.com/eknkc/amber v0.0.0-20171010120322-cdade1c07385\n\tgithub.com/evanw/esbuild v0.24.2\n\tgithub.com/felixge/fgtrace v0.2.0\n\tgithub.com/flosch/pongo2/v6 v6.0.0\n\tgithub.com/go-gcfg/gcfg v1.2.3\n\tgithub.com/gomarkdown/markdown v0.0.0-20241205020045-f7e15b2f3e62\n\tgithub.com/lib/pq v1.10.9\n\tgithub.com/microcosm-cc/bluemonday v1.0.27\n\tgithub.com/mitchellh/go-homedir v1.1.0\n\tgithub.com/natefinch/pie v0.0.0-20170715172608-9a0d72014007\n\tgithub.com/orsinium-labs/enum v1.4.0\n\tgithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c\n\tgithub.com/quic-go/quic-go v0.48.2\n\tgithub.com/sirupsen/logrus v1.9.3\n\tgithub.com/terminar/permissionsqlite/v2 v2.0.0-20240814235136-eff14bb4cea9\n\tgithub.com/tylerb/graceful v1.2.15\n\tgithub.com/wellington/sass v0.0.0-20160911051022-cab90b3986d6\n\tgithub.com/xyproto/ask v1.1.0\n\tgithub.com/xyproto/datablock v1.2.0\n\tgithub.com/xyproto/env/v2 v2.5.2\n\tgithub.com/xyproto/files v1.9.0\n\tgithub.com/xyproto/gluamapper v1.2.1\n\tgithub.com/xyproto/gopher-lua v1.0.2\n\tgithub.com/xyproto/jpath v0.6.1\n\tgithub.com/xyproto/mime v0.0.0-20210817202956-28bafd7b06b4\n\tgithub.com/xyproto/ollamaclient/v2 v2.7.0\n\tgithub.com/xyproto/onthefly v1.2.3\n\tgithub.com/xyproto/permissionbolt/v2 v2.6.3\n\tgithub.com/xyproto/permissions v1.0.0\n\tgithub.com/xyproto/permissionsql/v2 v2.1.2\n\tgithub.com/xyproto/pinterface v1.5.4\n\tgithub.com/xyproto/pstore v1.3.3\n\tgithub.com/xyproto/recwatch v1.1.0\n\tgithub.com/xyproto/sheepcounter v1.6.2\n\tgithub.com/xyproto/simplebolt v1.5.2\n\tgithub.com/xyproto/simpleform v0.2.0\n\tgithub.com/xyproto/simplejwt v1.2.0\n\tgithub.com/xyproto/simpleredis/v2 v2.8.1\n\tgithub.com/xyproto/splash v1.1.7-0.20240319004143-dbbd0f5afd74\n\tgithub.com/xyproto/textoutput v1.17.1\n\tgithub.com/xyproto/tinysvg v1.1.1\n\tgithub.com/xyproto/unzip v1.0.0\n\tgithub.com/yosssi/gcss v0.1.0\n\tgolang.org/x/net v0.34.0\n)\n\nrequire (\n\tgithub.com/DataDog/gostackparse v0.7.0 // indirect\n\tgithub.com/Masterminds/semver v1.5.0 // indirect\n\tgithub.com/alecthomas/chroma/v2 v2.15.0 // indirect\n\tgithub.com/allegro/bigcache/v3 v3.1.1-0.20240229143509-9455da01a1ae // indirect\n\tgithub.com/aymerick/douceur v0.2.0 // indirect\n\tgithub.com/caddyserver/zerossl v0.1.3 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/dlclark/regexp2 v1.11.4 // indirect\n\tgithub.com/fsnotify/fsnotify v1.8.0 // indirect\n\tgithub.com/go-mysql-org/go-mysql v1.10.0 // indirect\n\tgithub.com/go-task/slim-sprig/v3 v3.0.0 // indirect\n\tgithub.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9 // indirect\n\tgithub.com/golang-sql/sqlexp v0.1.0 // indirect\n\tgithub.com/gomodule/redigo v1.9.2 // indirect\n\tgithub.com/google/pprof v0.0.0-20241210010833-40e02aabc2ad // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/gorilla/css v1.0.1 // indirect\n\tgithub.com/klauspost/compress v1.17.11 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.9 // indirect\n\tgithub.com/libdns/libdns v0.2.2 // indirect\n\tgithub.com/mattetti/filebuffer v1.0.1 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mattn/go-sqlite3 v1.14.24 // indirect\n\tgithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d // indirect\n\tgithub.com/mholt/acmez/v3 v3.0.0 // indirect\n\tgithub.com/miekg/dns v1.1.62 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/nathan-fiscaletti/consolesize-go v0.0.0-20220204101620-317176b6684d // indirect\n\tgithub.com/onsi/ginkgo/v2 v2.22.2 // indirect\n\tgithub.com/patrickmn/go-cache v2.1.0+incompatible // indirect\n\tgithub.com/pingcap/errors v0.11.5-0.20240318064555-6bd07397691f // indirect\n\tgithub.com/pingcap/log v1.1.1-0.20240314023424-862ccc32f18d // indirect\n\tgithub.com/pingcap/tidb/pkg/parser v0.0.0-20250109121328-0da20ee5e690 // indirect\n\tgithub.com/pkg/term v1.2.0-beta.2.0.20210419004637-f749b98bd0ba // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/quic-go/qpack v0.5.1 // indirect\n\tgithub.com/rogpeppe/go-internal v1.12.0 // indirect\n\tgithub.com/shopspring/decimal v1.4.0 // indirect\n\tgithub.com/siddontang/go v0.0.0-20180604090527-bdc77568d726 // indirect\n\tgithub.com/siddontang/go-log v0.0.0-20190221022429-1e957dd83bed // indirect\n\tgithub.com/terminar/simplesqlite v0.0.0-20240811163019-f2a6c3cbea17 // indirect\n\tgithub.com/xyproto/binary v1.3.3 // indirect\n\tgithub.com/xyproto/burnfont v1.2.3 // indirect\n\tgithub.com/xyproto/cookie/v2 v2.2.6 // indirect\n\tgithub.com/xyproto/randomstring v1.2.0 // indirect\n\tgithub.com/xyproto/simplehstore v1.8.3 // indirect\n\tgithub.com/xyproto/simplemaria v1.3.4 // indirect\n\tgithub.com/xyproto/symwalk v1.1.1 // indirect\n\tgithub.com/xyproto/vt100 v1.16.11 // indirect\n\tgithub.com/zeebo/blake3 v0.2.4 // indirect\n\tgo.etcd.io/bbolt v1.3.11 // indirect\n\tgo.uber.org/atomic v1.11.0 // indirect\n\tgo.uber.org/mock v0.5.0 // indirect\n\tgo.uber.org/multierr v1.11.0 // indirect\n\tgo.uber.org/zap v1.27.0 // indirect\n\tgo.uber.org/zap/exp v0.3.0 // indirect\n\tgolang.org/x/crypto v0.32.0 // indirect\n\tgolang.org/x/exp v0.0.0-20250106191152-7588d65b2ba8 // indirect\n\tgolang.org/x/mod v0.22.0 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/sys v0.29.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgolang.org/x/time v0.9.0 // indirect\n\tgolang.org/x/tools v0.29.0 // indirect\n\tgopkg.in/gcfg.v1 v1.2.3 // indirect\n\tgopkg.in/natefinch/lumberjack.v2 v2.2.1 // indirect\n\tgopkg.in/warnings.v0 v0.1.2 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 39.375,
          "content": "github.com/Azure/azure-sdk-for-go/sdk/azcore v0.19.0/go.mod h1:h6H6c8enJmmocHUbLiiGY6sx7f9i+X3m1CHdd5c6Rdw=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity v0.11.0/go.mod h1:HcM1YX14R7CJcghJGOYCgdezslRSVzqwLf/q+4Y2r/0=\ngithub.com/Azure/azure-sdk-for-go/sdk/internal v0.7.0/go.mod h1:yqy467j36fJxcRV2TzfVZ1pCb5vxm4BtZPUdYWe/Xo8=\ngithub.com/DataDog/gostackparse v0.7.0 h1:i7dLkXHvYzHV308hnkvVGDL3BR4FWl7IsXNPz/IGQh4=\ngithub.com/DataDog/gostackparse v0.7.0/go.mod h1:lTfqcJKqS9KnXQGnyQMCugq3u1FP6UZMfWR0aitKFMM=\ngithub.com/Masterminds/semver v1.5.0 h1:H65muMkzWKEuNDnfl9d70GUjFniHKHRbFPGBuZ3QEww=\ngithub.com/Masterminds/semver v1.5.0/go.mod h1:MB6lktGJrhw8PrUyiEoblNEGEQ+RzHPF078ddwwvV3Y=\ngithub.com/alecthomas/assert/v2 v2.6.0/go.mod h1:Bze95FyfUr7x34QZrjL+XP+0qgp/zg8yS+TtBj1WA3k=\ngithub.com/alecthomas/assert/v2 v2.11.0 h1:2Q9r3ki8+JYXvGsDyBXwH3LcJ+WK5D0gc5E8vS6K3D0=\ngithub.com/alecthomas/assert/v2 v2.11.0/go.mod h1:Bze95FyfUr7x34QZrjL+XP+0qgp/zg8yS+TtBj1WA3k=\ngithub.com/alecthomas/chroma/v2 v2.13.1-0.20240318041031-32c053f50168/go.mod h1:BUGjjsD+ndS6eX37YgTchSEG+Jg9Jv1GiZs9sqPqztk=\ngithub.com/alecthomas/chroma/v2 v2.15.0 h1:LxXTQHFoYrstG2nnV9y2X5O94sOBzf0CIUpSTbpxvMc=\ngithub.com/alecthomas/chroma/v2 v2.15.0/go.mod h1:gUhVLrPDXPtp/f+L1jo9xepo9gL4eLwRuGAunSZMkio=\ngithub.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=\ngithub.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=\ngithub.com/allegro/bigcache/v3 v3.1.1-0.20240229143509-9455da01a1ae h1:bxpX/pcXKxGLYVbgDyrWUO7IoTIuW0HpTBnT4FywxD8=\ngithub.com/allegro/bigcache/v3 v3.1.1-0.20240229143509-9455da01a1ae/go.mod h1:aPyh7jEvrog9zAwx5N7+JUQX5dZTSGpxF1LAR4dr35I=\ngithub.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=\ngithub.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=\ngithub.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869 h1:DDGfHa7BWjL4YnC6+E63dPcxHo2sUxDIu8g3QgEJdRY=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869/go.mod h1:Ekp36dRnpXw/yCqJaO+ZrUyxD+3VXMFFr56k5XYrpB4=\ngithub.com/caddyserver/certmagic v0.21.6 h1:1th6GfprVfsAtFNOu4StNMF5IxK5XiaI0yZhAHlZFPE=\ngithub.com/caddyserver/certmagic v0.21.6/go.mod h1:n1sCo7zV1Ez2j+89wrzDxo4N/T1Ws/Vx8u5NvuBFabw=\ngithub.com/caddyserver/zerossl v0.1.3 h1:onS+pxp3M8HnHpN5MMbOMyNjmTheJyWRaZYwn+YTAyA=\ngithub.com/caddyserver/zerossl v0.1.3/go.mod h1:CxA0acn7oEGO6//4rtrRjYgEoa4MFw/XofZnrYwGqG4=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/logex v1.2.1 h1:XHDu3E6q+gdHgsdTPH6ImJMIp436vR6MPtH8gP05QzM=\ngithub.com/chzyer/logex v1.2.1/go.mod h1:JLbx6lG2kDbNRFnfkgvh4eRJRPX1QCoOIWomwysCBrQ=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/readline v1.5.1 h1:upd/6fQk4src78LMRzh5vItIt361/o4uq553V8B5sGI=\ngithub.com/chzyer/readline v1.5.1/go.mod h1:Eh+b79XXUwfKfcPLepksvw2tcLE/Ct21YObkaSkeBlk=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/chzyer/test v1.0.0 h1:p3BQDXSxOhOG0P9z6/hGnII4LGiEPOYBhs8asl/fC04=\ngithub.com/chzyer/test v1.0.0/go.mod h1:2JlltgoNkt4TW/z9V/IzDdFaMTM2JPIi26O1pF38GC8=\ngithub.com/codegangsta/inject v0.0.0-20150114235600-33e0aa1cb7c0/go.mod h1:4Zcjuz89kmFXt9morQgcfYZAYZ5n8WHjt81YYWIwtTM=\ngithub.com/codegangsta/negroni v1.0.0/go.mod h1:v0y3T5G7Y1UlFfyxFn/QLRU4a2EuNau2iZY63YTKWo0=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/ddliu/go-httpclient v0.7.1 h1:COWYBalfbaFNe6e0eQU38++vCD5kzLh1H1RFs3xcn9g=\ngithub.com/ddliu/go-httpclient v0.7.1/go.mod h1:uwipe9x9SYGk4JhBemO7+dD87QbiY224y0DLB9OY0Ik=\ngithub.com/denisenkom/go-mssqldb v0.12.3 h1:pBSGx9Tq67pBOTLmxNuirNTeB8Vjmf886Kx+8Y+8shw=\ngithub.com/denisenkom/go-mssqldb v0.12.3/go.mod h1:k0mtMFOnU+AihqFxPMiF05rtiDrorD1Vrm1KEz5hxDo=\ngithub.com/didip/tollbooth v4.0.2+incompatible h1:fVSa33JzSz0hoh2NxpwZtksAzAgd7zjmGO20HCZtF4M=\ngithub.com/didip/tollbooth v4.0.2+incompatible/go.mod h1:A9b0665CE6l1KmzpDws2++elm/CsuWBMa5Jv4WY0PEY=\ngithub.com/dlclark/regexp2 v1.11.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\ngithub.com/dlclark/regexp2 v1.11.4 h1:rPYF9/LECdNymJufQKmri9gV604RvvABwgOA8un7yAo=\ngithub.com/dlclark/regexp2 v1.11.4/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\ngithub.com/dnaeon/go-vcr v1.2.0/go.mod h1:R4UdLID7HZT3taECzJs4YgbbH6PIGXB6W/sc5OLb6RQ=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/eknkc/amber v0.0.0-20171010120322-cdade1c07385 h1:clC1lXBpe2kTj2VHdaIu9ajZQe4kcEY9j0NsnDDBZ3o=\ngithub.com/eknkc/amber v0.0.0-20171010120322-cdade1c07385/go.mod h1:0vRUJqYpeSZifjYj7uP3BG/gKcuzL9xWVV/Y+cK33KM=\ngithub.com/evanw/esbuild v0.24.2 h1:PQExybVBrjHjN6/JJiShRGIXh1hWVm6NepVnhZhrt0A=\ngithub.com/evanw/esbuild v0.24.2/go.mod h1:D2vIQZqV/vIf/VRHtViaUtViZmG7o+kKmlBfVQuRi48=\ngithub.com/felixge/fgtrace v0.2.0 h1:lq7RO6ELjR+S74+eD+ai/vhYvsjno7Vb84yzU6RPSeU=\ngithub.com/felixge/fgtrace v0.2.0/go.mod h1:q9vMuItthu3CRfNhirTCTwzBcJ8atUFkrJUhgQbjg8c=\ngithub.com/flosch/pongo2/v6 v6.0.0 h1:lsGru8IAzHgIAw6H2m4PCyleO58I40ow6apih0WprMU=\ngithub.com/flosch/pongo2/v6 v6.0.0/go.mod h1:CuDpFm47R0uGGE7z13/tTlt1Y6zdxvr2RLT5LJhsHEU=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=\ngithub.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=\ngithub.com/go-gcfg/gcfg v1.2.3 h1:8X/LtK7rOSSGqvh4gHqR9wpWOIsq3tGCH2t0R2mgEUU=\ngithub.com/go-gcfg/gcfg v1.2.3/go.mod h1:D+YdKk714qkU4V0pntcxhDsrHgQDmI91IEbXXqwRZqA=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-martini/martini v0.0.0-20170121215854-22fa46961aab/go.mod h1:/P9AEU963A2AYjv4d1V5eVL1CQbEJq6aCNHDDjibzu8=\ngithub.com/go-mysql-org/go-mysql v1.10.0 h1:9iEPrZdHKq6EepUuPONrBA+wc3aL1WLhbUm5w8ryDFg=\ngithub.com/go-mysql-org/go-mysql v1.10.0/go.mod h1:GzFQAI+FqbYAPtsannL0hmZH6zcLzCQbwqopT9bgTt0=\ngithub.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=\ngithub.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=\ngithub.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=\ngithub.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\ngithub.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9 h1:au07oEsX2xN0ktxqI+Sida1w446QrXBRJ0nee3SNZlA=\ngithub.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\ngithub.com/golang-sql/sqlexp v0.1.0 h1:ZCD6MBpcuOVfGVqsEmY5/4FtYiKz6tSyUv9LPEDei6A=\ngithub.com/golang-sql/sqlexp v0.1.0/go.mod h1:J4ad9Vo8ZCWQ2GMrC4UCQy1JpCbwU9m3EOqtpKwwwHI=\ngithub.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=\ngithub.com/gomarkdown/markdown v0.0.0-20241205020045-f7e15b2f3e62 h1:pbAFUZisjG4s6sxvRJvf2N7vhpCvx2Oxb3PmS6pDO1g=\ngithub.com/gomarkdown/markdown v0.0.0-20241205020045-f7e15b2f3e62/go.mod h1:JDGcbDT52eL4fju3sZ4TeHGsQwhG9nbDV21aMyhwPoA=\ngithub.com/gomodule/redigo v1.9.2 h1:HrutZBLhSIU8abiSfW8pj8mPhOyMYjZT/wcA4/L9L9s=\ngithub.com/gomodule/redigo v1.9.2/go.mod h1:KsU3hiK/Ay8U42qpaJk+kuNa3C+spxapWpM+ywhcgtw=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/pprof v0.0.0-20241210010833-40e02aabc2ad h1:a6HEuzUHeKH6hwfN/ZoQgRgVIWFJljSWa/zetS2WTvg=\ngithub.com/google/pprof v0.0.0-20241210010833-40e02aabc2ad/go.mod h1:vavhavw2zAxS5dIdcRluK6cSGGPlZynqzFM8NdvU144=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=\ngithub.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=\ngithub.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=\ngithub.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=\ngithub.com/jmoiron/sqlx v1.3.3 h1:j82X0bf7oQ27XeqxicSZsTU5suPwKElg3oyxNn43iTk=\ngithub.com/jmoiron/sqlx v1.3.3/go.mod h1:2BljVx/86SuTyjE+aPYlHCTNvZrnJXghYGpNiXLBMCQ=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/klauspost/cpuid/v2 v2.2.9 h1:66ze0taIn2H33fBvCkXuv9BmCwDfafmiIVpKV9kKGuY=\ngithub.com/klauspost/cpuid/v2 v2.2.9/go.mod h1:rqkxqrZ1EhYM9G+hXH7YdowN5R5RGN6NK4QwQ3WMXF8=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=\ngithub.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/libdns/libdns v0.2.2 h1:O6ws7bAfRPaBsgAYt8MDe2HcNBGC29hkZ9MX2eUSX3s=\ngithub.com/libdns/libdns v0.2.2/go.mod h1:4Bj9+5CQiNMVGf87wjX4CY3HQJypUHRuLvlsfsZqLWQ=\ngithub.com/matryer/is v1.4.1 h1:55ehd8zaGABKLXQUe2awZ99BD/PTc2ls+KV/dXphgEQ=\ngithub.com/matryer/is v1.4.1/go.mod h1:8I/i5uYgLzgsgEloJE1U6xx5HkBQpAZvepWuujKwMRU=\ngithub.com/mattetti/filebuffer v1.0.1 h1:gG7pyfnSIZCxdoKq+cPa8T0hhYtD9NxCdI4D7PTjRLM=\ngithub.com/mattetti/filebuffer v1.0.1/go.mod h1:YdMURNDOttIiruleeVr6f56OrMc+MydEnTcXwtkxNVs=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-sqlite3 v1.14.24 h1:tpSp2G2KyMnnQu99ngJ47EIkWVmliIizyZBfPrBWDRM=\ngithub.com/mattn/go-sqlite3 v1.14.24/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=\ngithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d h1:5PJl274Y63IEHC+7izoQE9x6ikvDFZS2mDVS3drnohI=\ngithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d/go.mod h1:01TrycV0kFyexm33Z7vhZRXopbI8J3TDReVlkTgMUxE=\ngithub.com/mholt/acmez/v3 v3.0.0 h1:r1NcjuWR0VaKP2BTjDK9LRFBw/WvURx3jlaEUl9Ht8E=\ngithub.com/mholt/acmez/v3 v3.0.0/go.mod h1:L1wOU06KKvq7tswuMDwKdcHeKpFFgkppZy/y0DFxagQ=\ngithub.com/microcosm-cc/bluemonday v1.0.27 h1:MpEUotklkwCSLeH+Qdx1VJgNqLlpY2KXwXFM08ygZfk=\ngithub.com/microcosm-cc/bluemonday v1.0.27/go.mod h1:jFi9vgW+H7c3V0lb6nR74Ib/DIB5OBs92Dimizgw2cA=\ngithub.com/miekg/dns v1.1.62 h1:cN8OuEF1/x5Rq6Np+h1epln8OiyPWV+lROx9LxcGgIQ=\ngithub.com/miekg/dns v1.1.62/go.mod h1:mvDlcItzm+br7MToIKqkglaGhlFMHJ9DTNNWONWXbNQ=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/mapstructure v1.4.1/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/modocache/gover v0.0.0-20171022184752-b58185e213c5/go.mod h1:caMODM3PzxT8aQXRPkAt8xlV/e7d7w8GM5g0fa5F0D8=\ngithub.com/natefinch/pie v0.0.0-20170715172608-9a0d72014007 h1:Ohgj9L0EYOgXxkDp+bczlMBiulwmqYzQpvQNUdtt3oc=\ngithub.com/natefinch/pie v0.0.0-20170715172608-9a0d72014007/go.mod h1:wKCOWMb6iNlvKiOToY2cNuaovSXvIiv1zDi9QDR7aGQ=\ngithub.com/nathan-fiscaletti/consolesize-go v0.0.0-20220204101620-317176b6684d h1:NqRhLdNVlozULwM1B3VaHhcXYSgrOAv8V5BE65om+1Q=\ngithub.com/nathan-fiscaletti/consolesize-go v0.0.0-20220204101620-317176b6684d/go.mod h1:cxIIfNMTwff8f/ZvRouvWYF6wOoO7nj99neWSx2q/Es=\ngithub.com/onsi/ginkgo/v2 v2.22.2 h1:/3X8Panh8/WwhU/3Ssa6rCKqPLuAkVY2I0RoyDLySlU=\ngithub.com/onsi/ginkgo/v2 v2.22.2/go.mod h1:oeMosUL+8LtarXBHu/c0bx2D/K9zyQ6uX3cTyztHwsk=\ngithub.com/onsi/gomega v1.36.2 h1:koNYke6TVk6ZmnyHrCXba/T/MoLBXFjeC1PtvYgw0A8=\ngithub.com/onsi/gomega v1.36.2/go.mod h1:DdwyADRjrc825LhMEkD76cHR5+pUnjhUN8GlHlRPHzY=\ngithub.com/orsinium-labs/enum v1.4.0 h1:3NInlfV76kuAg0kq2FFUondmg3WO7gMEgrPPrlzLDUM=\ngithub.com/orsinium-labs/enum v1.4.0/go.mod h1:Qj5IK2pnElZtkZbGDxZMjpt7SUsn4tqE5vRelmWaBbc=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=\ngithub.com/pingcap/errors v0.11.0/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=\ngithub.com/pingcap/errors v0.11.5-0.20240318064555-6bd07397691f h1:FxA+NgsdHNOv+/hZGxUh8Gb3WuZqgqmxDwztEOiA1v4=\ngithub.com/pingcap/errors v0.11.5-0.20240318064555-6bd07397691f/go.mod h1:X2r9ueLEUZgtx2cIogM0v4Zj5uvvzhuuiu7Pn8HzMPg=\ngithub.com/pingcap/log v1.1.1-0.20240314023424-862ccc32f18d h1:y3EueKVfVykdpTyfUnQGqft0ud+xVFuCdp1XkVL0X1E=\ngithub.com/pingcap/log v1.1.1-0.20240314023424-862ccc32f18d/go.mod h1:ORfBOFp1eteu2odzsyaxI+b8TzJwgjwyQcGhI+9SfEA=\ngithub.com/pingcap/tidb/pkg/parser v0.0.0-20250109121328-0da20ee5e690 h1:lWS0sDg/xAJV8/nVn+4rxUR9Lq2WqOyS7dwk42kqc/M=\ngithub.com/pingcap/tidb/pkg/parser v0.0.0-20250109121328-0da20ee5e690/go.mod h1:Hju1TEWZvrctQKbztTRwXH7rd41Yq0Pgmq4PrEKcq7o=\ngithub.com/pkg/browser v0.0.0-20180916011732-0a3d74bf9ce4/go.mod h1:4OwLy04Bl9Ef3GJJCoec+30X3LQs/0/m4HFRt/2LUSA=\ngithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c h1:+mdjkGKdHQG3305AYmdv1U2eRNDiU2ErMBj1gwrq8eQ=\ngithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c/go.mod h1:7rwL4CYBLnjLxUqIJNnCWiEdr3bn6IUYi15bNlnbCCU=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/term v1.2.0-beta.2.0.20210419004637-f749b98bd0ba h1:KVTuKXe/NMcKMIlgVuOq9cWogO8LkolqY0ienhEEYlY=\ngithub.com/pkg/term v1.2.0-beta.2.0.20210419004637-f749b98bd0ba/go.mod h1:E25nymQcrSllhX42Ok8MRm1+hyBdHY0dCeiKZ9jpNGw=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/quic-go/qpack v0.5.1 h1:giqksBPnT/HDtZ6VhtFKgoLOWmlyo9Ei6u9PqzIMbhI=\ngithub.com/quic-go/qpack v0.5.1/go.mod h1:+PC4XFrEskIVkcLzpEkbLqq1uCoxPhQuvK5rH1ZgaEg=\ngithub.com/quic-go/quic-go v0.48.2 h1:wsKXZPeGWpMpCGSWqOcqpW2wZYic/8T3aqiOID0/KWE=\ngithub.com/quic-go/quic-go v0.48.2/go.mod h1:yBgs3rWBOADpga7F+jJsb6Ybg1LSYiQvwWlLX+/6HMs=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/russross/blackfriday v1.5.3-0.20190616195246-a925a152c144 h1:DSnT5th1+S65UVOwp617oI2lNQ01UFeoArsU8c2b6h0=\ngithub.com/russross/blackfriday v1.5.3-0.20190616195246-a925a152c144/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=\ngithub.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp81k=\ngithub.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=\ngithub.com/siddontang/go v0.0.0-20180604090527-bdc77568d726 h1:xT+JlYxNGqyT+XcU8iUrN18JYed2TvG9yN5ULG2jATM=\ngithub.com/siddontang/go v0.0.0-20180604090527-bdc77568d726/go.mod h1:3yhqj7WBBfRhbBlzyOC3gUxftwsU0u8gqevxwIHQpMw=\ngithub.com/siddontang/go-log v0.0.0-20190221022429-1e957dd83bed h1:KMgQoLJGCq1IoZpLZE3AIffh9veYWoVlsvA4ib55TMM=\ngithub.com/siddontang/go-log v0.0.0-20190221022429-1e957dd83bed/go.mod h1:yFdBgwXP24JziuRl2NMUahT7nGLNOKi1SIiFxMttVD4=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/terminar/permissionsqlite/v2 v2.0.0-20240814235136-eff14bb4cea9 h1:10ma4InD+Jxku1xg3o4oSMn+EJc2fc1YyDLo88bL+QE=\ngithub.com/terminar/permissionsqlite/v2 v2.0.0-20240814235136-eff14bb4cea9/go.mod h1:xkcZ1hsUlpvFAIhVd6hj4wBfGU0LfDLSi5R0ddzEsN8=\ngithub.com/terminar/simplesqlite v0.0.0-20240811163019-f2a6c3cbea17 h1:U0VeWu6VRL89XH3/0HobGgQFaRaHF2MZIj9LMYhZ3Ng=\ngithub.com/terminar/simplesqlite v0.0.0-20240811163019-f2a6c3cbea17/go.mod h1:7E7W7YEEPtLF8gSwgXz4pRxCkqAfY0Om79qABbVZ1NE=\ngithub.com/tylerb/graceful v1.2.15 h1:B0x01Y8fsJpogzZTkDg6BDi6eMf03s01lEKGdrv83oA=\ngithub.com/tylerb/graceful v1.2.15/go.mod h1:LPYTbOYmUTdabwRt0TGhLllQ0MUNbs0Y5q1WXJOI9II=\ngithub.com/urfave/negroni v1.0.0/go.mod h1:Meg73S6kFm/4PpbYdq35yYWoCZ9mS/YSx+lKnmiohz4=\ngithub.com/wellington/sass v0.0.0-20160911051022-cab90b3986d6 h1:qPS12y9iMXyKr2flmOG7RgiyUGkQxQibp1hx7uug9IQ=\ngithub.com/wellington/sass v0.0.0-20160911051022-cab90b3986d6/go.mod h1:ncYBwTYUjmb7N+sZbf8WJYynLivoqFL+U2f8uOX2Yzk=\ngithub.com/xyproto/ask v1.0.0/go.mod h1:GTF2UyZg4J/JFVrY8jrfbk00yljvpDWra9gHiSuwI90=\ngithub.com/xyproto/ask v1.1.0 h1:8zujfw/8kSm6LAN0aZ2fYa0i52pVyB+8bqXg1eYBrlA=\ngithub.com/xyproto/ask v1.1.0/go.mod h1:fHOS3OqThzPYaJUNOH4/ZZDJZhu71bzCMUFnBiq8ELI=\ngithub.com/xyproto/binary v1.3.3 h1:pc33rqTXguiedvsH5nhx4P1Ph7iHb7awqhDscTOTHv4=\ngithub.com/xyproto/binary v1.3.3/go.mod h1:0bRi3JImoPWOFfM7yPYzNVyLZXYGQTBwdNRPs4m3+qQ=\ngithub.com/xyproto/burnfont v1.2.3 h1:4MHSRrmVqZT8i1XmDrEG/5qcg2G1bSEDlOoO3BCl11c=\ngithub.com/xyproto/burnfont v1.2.3/go.mod h1:NlQwt/VHpxq17k8CkHcWvWTGhBim818XB4onh+TeZRo=\ngithub.com/xyproto/cookie v0.0.0-20181220103240-f4de411f45ff h1:G+UgV5480yPnIK9+aaz4Tx0l7hu8lcDuXc9SfTbK1+w=\ngithub.com/xyproto/cookie v0.0.0-20181220103240-f4de411f45ff/go.mod h1:+c0/g8lVJKAi+uZ/kPHqSzf2UsSI2If03smY6xITgtM=\ngithub.com/xyproto/cookie/v2 v2.2.3/go.mod h1:GLwQP/zGrMRVJ++iavGE7jEhSyF8DY2RW3xmlYhOVhA=\ngithub.com/xyproto/cookie/v2 v2.2.6 h1:5fdhSrJAn2xdSM1nobWMaPM00ioFuNbxHo8pIN0bu/M=\ngithub.com/xyproto/cookie/v2 v2.2.6/go.mod h1:lbMjpSwQQIihGrQukzFFwSJp3hC9yPozXUHbouSrpAM=\ngithub.com/xyproto/datablock v1.2.0 h1:BRHolvVGIbrbILKecRCGBWt1pp/bEsOC+m2I3A32tig=\ngithub.com/xyproto/datablock v1.2.0/go.mod h1:hQGlZYTpt2QOXcjPKri4bjwU1mebDvrY9Nlx2hUgQe0=\ngithub.com/xyproto/env/v2 v2.0.0/go.mod h1:n0AhHu2mZjNMK2auKEF6eUAU6LJ/1PQfss8UuT7Jhzc=\ngithub.com/xyproto/env/v2 v2.5.2 h1:y0YomXk91TCIQPo58JUn+hqFBH9LhKws7W3RdhPEarM=\ngithub.com/xyproto/env/v2 v2.5.2/go.mod h1:F81ZEzu15s3TWUZJ1uzBl9iNeq9zcfHvxMkQJaLZUl0=\ngithub.com/xyproto/files v1.9.0 h1:nbSLLEhVTcuN/1qZ17BcNogiVsFnfU+apr3R5XpAv7s=\ngithub.com/xyproto/files v1.9.0/go.mod h1:johy1UtusLfkGuQ98zGJIHkQ1hWPUre5GHQ0GrUzKnk=\ngithub.com/xyproto/gluamapper v1.2.1 h1:7pDNxzX4P1QndBFkZEN7JmixrH0HSc7jKw2xyTZ0OjY=\ngithub.com/xyproto/gluamapper v1.2.1/go.mod h1:uN8tJzpgFmctChbuKGSlLGea/8p5q2v2+5WCnqcUS+8=\ngithub.com/xyproto/gopher-lua v1.0.0/go.mod h1:VCAgqVjLOz4AzuaxCORQNg4/0C3piilmVLcbMrJ9AJw=\ngithub.com/xyproto/gopher-lua v1.0.2 h1:tOtkVygD46OWICSEov9Yf9XheBy8bCSnmhVzLGVAwvo=\ngithub.com/xyproto/gopher-lua v1.0.2/go.mod h1:aoM62BSDxywYkGaMufChYLqnYEmp0PKcPcw0jtxU/x0=\ngithub.com/xyproto/jpath v0.6.1 h1:CmpbtuRgHZKW5fM9tYgdH6wIMpvnSOhnt4UwAYSacpM=\ngithub.com/xyproto/jpath v0.6.1/go.mod h1:bm5t4NVGsu+09lxa0qgsyjpd3kd9Sy2uBpszwAbgeB4=\ngithub.com/xyproto/mime v0.0.0-20210817202956-28bafd7b06b4 h1:fpHb9zxYkydDS3VBjvH6VWCvCrttqzVzj2MjyNCgoko=\ngithub.com/xyproto/mime v0.0.0-20210817202956-28bafd7b06b4/go.mod h1:Vb1NBbNUHAKQGBERkD/s0+W/wW7ZygautwBonIxchuk=\ngithub.com/xyproto/ollamaclient/v2 v2.7.0 h1:mlTOmhACueaqLEsoTnxpE2NAvhxRF4TmYprnMIjUhnU=\ngithub.com/xyproto/ollamaclient/v2 v2.7.0/go.mod h1:o1GmnP7/qLen2lmuTdVk4MO+4EgbdblE3SFvC+rcOvU=\ngithub.com/xyproto/onthefly v1.2.3 h1:91QuXkfqP7l4yFsGTGbN3S+iqYZLLJfVEWo4BFpewnA=\ngithub.com/xyproto/onthefly v1.2.3/go.mod h1:FQNxGnPtw8YSfZMHGbNKMGqtoI5ZZS+66Sw+eDTcTRE=\ngithub.com/xyproto/permissionbolt/v2 v2.6.3 h1:nmdk7fZZ2yBEM/eBqDDRcy34n2UTxbqbeutW4xyOqMM=\ngithub.com/xyproto/permissionbolt/v2 v2.6.3/go.mod h1:Rk1W/BJlq04RT7wl9f1r3AJsHDFGZB89WSwVo3ibuOo=\ngithub.com/xyproto/permissions v1.0.0 h1:BbzytkC6BQ2jHCQ7gzqxFcreegykTtNwPprUvxwwjpA=\ngithub.com/xyproto/permissions v1.0.0/go.mod h1:7Y1g6gqbAp1oZQA0MxBo7wooNbbGCpKPqfpj+CA5zL0=\ngithub.com/xyproto/permissionsql/v2 v2.1.2 h1:WH61SZCdPoMCltPwYYPoOjv6mVmehdriZp/REIGPO9k=\ngithub.com/xyproto/permissionsql/v2 v2.1.2/go.mod h1:p7FIYR5tGXzBoyXEnGaeTTyM25RH0sNQNniqkdFMtjc=\ngithub.com/xyproto/pinterface v1.5.3/go.mod h1:X5B5pKE49ak7SpyDh5QvJvLH9cC9XuZNDcl5hEyYc34=\ngithub.com/xyproto/pinterface v1.5.4 h1:u7bVqjJIlZ5+FDFrVfLmOgL38XGXt7R+xkLsfiSGDEQ=\ngithub.com/xyproto/pinterface v1.5.4/go.mod h1:X5B5pKE49ak7SpyDh5QvJvLH9cC9XuZNDcl5hEyYc34=\ngithub.com/xyproto/pstore v1.3.3 h1:kgKYmKni2lnndBXKJMV1j4iuYQoR6JW2OdiIJwM6DhM=\ngithub.com/xyproto/pstore v1.3.3/go.mod h1:GTjH3//Ke70XQYHjvrsLbELXbPHRug6ETJlGCdZ1OIw=\ngithub.com/xyproto/randomstring v0.0.0-20181220103026-e5e8317e5d67/go.mod h1:HcK1ojGYWgNJz1Rp9UouvxVGIWsMFAtkftDoHZ6DE9k=\ngithub.com/xyproto/randomstring v0.0.0-20181222003104-0f764aabc45a/go.mod h1:HcK1ojGYWgNJz1Rp9UouvxVGIWsMFAtkftDoHZ6DE9k=\ngithub.com/xyproto/randomstring v1.0.5/go.mod h1:rgmS5DeNXLivK7YprL0pY+lTuhNQW3iGxZ18UQApw/E=\ngithub.com/xyproto/randomstring v1.1.0/go.mod h1:rgmS5DeNXLivK7YprL0pY+lTuhNQW3iGxZ18UQApw/E=\ngithub.com/xyproto/randomstring v1.2.0 h1:y7PXAEBM3XlwJjPG2JQg4voxBYZ4+hPgRdGKCfU8wik=\ngithub.com/xyproto/randomstring v1.2.0/go.mod h1:rgmS5DeNXLivK7YprL0pY+lTuhNQW3iGxZ18UQApw/E=\ngithub.com/xyproto/recwatch v1.1.0 h1:M8raxpfOb1HChmMxE+72PmhugC+/LlJ3tPDs2dQjpzc=\ngithub.com/xyproto/recwatch v1.1.0/go.mod h1:L5vSDqREe0dO3awl3+gESUo/5jQTTxPe1TmhFMpBa2w=\ngithub.com/xyproto/sheepcounter v1.6.2 h1:a8M2XZRk+OQ1NktUwzgtgSBkOWfuhAPpsDkjqocVJAo=\ngithub.com/xyproto/sheepcounter v1.6.2/go.mod h1:o2/EM3ibNDo4LjW2S3rG0O+eZ1PQnKRZ5YboGlBJhGM=\ngithub.com/xyproto/simplebolt v1.5.2 h1:Q576fLNHnfzn0HFSlyZyaHmXfdzGC8RAlZLM/0mfDQ0=\ngithub.com/xyproto/simplebolt v1.5.2/go.mod h1:19ub+nPXHfvhde8eqk/5g56zGZNnaYIYLikrkZe+OF0=\ngithub.com/xyproto/simpleform v0.2.0 h1:01YuPkzSUabU8dq3tk+hunoHdA3wYsfXVImimmXX0tU=\ngithub.com/xyproto/simpleform v0.2.0/go.mod h1:Fn69YFlYOIDsfXl/eA1bBCjWGjdTfAEm/0FcuifklFU=\ngithub.com/xyproto/simplehstore v1.8.2/go.mod h1:y+2dmwAAfb6836QAbXMQwjJgoNiSHtXFyG2VS0FjOls=\ngithub.com/xyproto/simplehstore v1.8.3 h1:S+kgaNd0SXaDxDKttkMjjx6fKv3SUDHneFor0sQueqg=\ngithub.com/xyproto/simplehstore v1.8.3/go.mod h1:68qAO67r0vWpkPzGqeV4Ca1a3GSE4wrEXvdBS3Mq6fM=\ngithub.com/xyproto/simplejwt v1.2.0 h1:Oy0xgBhYh47Nfc9Ij9hW9eHfP6QXq0prrM9C+5inqEI=\ngithub.com/xyproto/simplejwt v1.2.0/go.mod h1:qv4jgtIx6X5G+DLQac9NS4BTcSxxtDVhjhp8jasI4ao=\ngithub.com/xyproto/simplemaria v1.3.4 h1:ayTJYiYUGwR/4CLnvUJHN8fwBr4j9cpkSZ/OQX61qdY=\ngithub.com/xyproto/simplemaria v1.3.4/go.mod h1:vvT4KbkBY3KcODvOlytGiMy7xqhpLcqtmBA+/Gsybd8=\ngithub.com/xyproto/simpleredis/v2 v2.8.1 h1:AUdTMtjX8XewUj2ouoH0z/T8Fqy59xr0FPv2/ZJlwbk=\ngithub.com/xyproto/simpleredis/v2 v2.8.1/go.mod h1:ErpU/OaAGxqW8/B65GmOBLoEsHyB++Wkpn+HqGnhkQE=\ngithub.com/xyproto/splash v1.1.7-0.20240319004143-dbbd0f5afd74 h1:9APgc/9+4qwly/0K7RHOwR4XvNBz4PINbwVc/LPqVGM=\ngithub.com/xyproto/splash v1.1.7-0.20240319004143-dbbd0f5afd74/go.mod h1:cEDdxLLscbMEkofdhK0AHHwGWqVzVsPV+Zvhtm1i61I=\ngithub.com/xyproto/symwalk v1.1.1 h1:icxMUiRAOqw8x9q9UWtpNz3rN7fngSYNMRguWzsyiWI=\ngithub.com/xyproto/symwalk v1.1.1/go.mod h1:u40/s1ER3LYv1ibNLeyH1PAR9oX62BPHNRt295/9zQc=\ngithub.com/xyproto/textoutput v1.17.1 h1:BbDHf8eLpAXdTFf+whnbFrsF7yCMZ7suhW9Es4lyltU=\ngithub.com/xyproto/textoutput v1.17.1/go.mod h1:4+ToxX8zW6hvC02WXJRDvA/1jrdl0gfgaFlimbfHYWs=\ngithub.com/xyproto/tinysvg v1.0.1/go.mod h1:DKgmaYuFIvJab9ug4nH4ZG356VtUaKXG2mUU07GIurs=\ngithub.com/xyproto/tinysvg v1.1.1 h1:sO0F71oODDHoZ9KLC4ucGsdVH9xxgaWIonW/fLF7piM=\ngithub.com/xyproto/tinysvg v1.1.1/go.mod h1:DKgmaYuFIvJab9ug4nH4ZG356VtUaKXG2mUU07GIurs=\ngithub.com/xyproto/unzip v1.0.0 h1:Gwk1y7hbvCL8lvCMUgxOyrcofker5UfoyQPcIaY8uqc=\ngithub.com/xyproto/unzip v1.0.0/go.mod h1:6/S2dvAL3XV9Y3HiaFXV7Utl9+IOObDrD6OaFoC63vg=\ngithub.com/xyproto/usermodel v1.1.0 h1:Epa+mfvkucxETaMI9eWpY+y93HlHkHyOg2ZaXkgpadA=\ngithub.com/xyproto/usermodel v1.1.0/go.mod h1:tGwa1it0GhzsROzaf4QQGTmgBTDHQibI72rbIB3R2K0=\ngithub.com/xyproto/vt100 v1.16.11 h1:PLsRhI7v4s4wrp5OkiZpOppnpZIZgK6A+4FJ5zpdVzg=\ngithub.com/xyproto/vt100 v1.16.11/go.mod h1:xm5tWQS/v1/3erzn5l3kEwYeEXiDBOVctPJ+NiAGd64=\ngithub.com/yosssi/gcss v0.1.0 h1:jRuino7qq7kqntBIhT+0xSUI5/sBgCA/zCQ1Tuzd6Gg=\ngithub.com/yosssi/gcss v0.1.0/go.mod h1:M3mTPOWZWjVROkXKZ2AiDzOBOXu2MqQeDXF/nKO44sI=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/zeebo/assert v1.1.0 h1:hU1L1vLTHsnO8x8c9KAR5GmM5QscxHg5RNU5z5qbUWY=\ngithub.com/zeebo/assert v1.1.0/go.mod h1:Pq9JiuJQpG8JLJdtkwrJESF0Foym2/D9XMU5ciN/wJ0=\ngithub.com/zeebo/blake3 v0.2.4 h1:KYQPkhpRtcqh0ssGYcKLG1JYvddkEA8QwCM/yBqhaZI=\ngithub.com/zeebo/blake3 v0.2.4/go.mod h1:7eeQ6d2iXWRGF6npfaxl2CU+xy2Fjo2gxeyZGCRUjcE=\ngithub.com/zeebo/pcg v1.0.1 h1:lyqfGeWiv4ahac6ttHs+I5hwtH/+1mrhlCtVNQM2kHo=\ngithub.com/zeebo/pcg v1.0.1/go.mod h1:09F0S9iiKrwn9rlI5yjLkmrug154/YRW6KnnXVDM/l4=\ngithub.com/zenazn/goji v0.9.0/go.mod h1:7S9M489iMyHBNxwZnk9/EHS098H4/F6TATF2mIxtB1Q=\ngo.etcd.io/bbolt v1.3.6/go.mod h1:qXsaaIqmgQH0T+OPdb99Bf+PKfBBQVAdyD6TY9G8XM4=\ngo.etcd.io/bbolt v1.3.11 h1:yGEzV1wPz2yVCLsD8ZAiGHhHVlczyC9d1rP43/VCRJ0=\ngo.etcd.io/bbolt v1.3.11/go.mod h1:dksAq7YMXoljX0xu6VF5DMZGbhYYoLUalEiSySYAS4I=\ngo.uber.org/atomic v1.6.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/atomic v1.7.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/atomic v1.11.0 h1:ZvwS0R+56ePWxUNi+Atn9dWONBPp/AUETXlHW0DxSjE=\ngo.uber.org/atomic v1.11.0/go.mod h1:LUxbIzbOniOlMKjJjyPfpl4v+PKK2cNJn91OQbhoJI0=\ngo.uber.org/goleak v1.1.10/go.mod h1:8a7PlsEVH3e/a/GLqe5IIrQx6GzcnRmZEufDUTk4A7A=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngo.uber.org/mock v0.5.0 h1:KAMbZvZPyBPWgD14IrIQ38QCyjwpvVVV6K/bHl1IwQU=\ngo.uber.org/mock v0.5.0/go.mod h1:ge71pBPLYDk7QIi1LupWxdAykm7KIEFchiOqd6z7qMM=\ngo.uber.org/multierr v1.6.0/go.mod h1:cdWPpRnG4AhwMwsgIHip0KRBQjJy5kYEpYjJxpXp9iU=\ngo.uber.org/multierr v1.7.0/go.mod h1:7EAYxJLBy9rStEaz58O2t4Uvip6FSURkq8/ppBp95ak=\ngo.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=\ngo.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=\ngo.uber.org/zap v1.19.0/go.mod h1:xg/QME4nWcxGxrpdeYfq7UvYrLh66cuVKdrbD1XF/NI=\ngo.uber.org/zap v1.27.0 h1:aJMhYGrd5QSmlpLMr2MftRKl7t8J8PTZPA732ud/XR8=\ngo.uber.org/zap v1.27.0/go.mod h1:GB2qFLM7cTU87MWRP2mPIjqfIDnGu+VIO4V/SdhGo2E=\ngo.uber.org/zap/exp v0.3.0 h1:6JYzdifzYkGmTdRR59oYH+Ng7k49H9qVpWwNSsGJj3U=\ngo.uber.org/zap/exp v0.3.0/go.mod h1:5I384qq7XGxYyByIhHm6jg5CHkGY0nsTfbDLgDDlgJQ=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20201016220609-9e8e0b390897/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20220622213112-05595931fe9d/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.1.0/go.mod h1:RecgLatLF4+eUMCP1PoPZQb+cVrJcOPbHkTkbkB9sbw=\ngolang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=\ngolang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/crypto v0.29.0/go.mod h1:+F4F4N5hv6v38hfeYwTdx20oUvLLc+QfrE9Ax9HtgRg=\ngolang.org/x/crypto v0.32.0 h1:euUpcYgM8WcP71gNpTqQCn6rC2t6ULUPiOzfWaXVVfc=\ngolang.org/x/crypto v0.32.0/go.mod h1:ZnnJkOaASj8g0AjIduWNlq2NRxL0PlBrbKVyZ6V/Ugc=\ngolang.org/x/exp v0.0.0-20250106191152-7588d65b2ba8 h1:yqrTHse8TCMW1M1ZCP+VAR/l0kKxwaAIqN/il7x4voA=\ngolang.org/x/exp v0.0.0-20250106191152-7588d65b2ba8/go.mod h1:tujkw807nyEEAamNbDrEGzRav+ilXA7PCRAd6xsmwiU=\ngolang.org/x/image v0.10.0/go.mod h1:jtrku+n79PfroUbvDdeUWMAI+heR786BofxrbiSF+J0=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.22.0 h1:D4nJWe9zXqHOmWqj4VMOJhvzj7bEZg4wEYa759z1pH4=\ngolang.org/x/mod v0.22.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210610132358-84b48f89b13b/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.1.0/go.mod h1:Cx3nUiGt4eDBEyega/BKRp+/AlGL8hYe7U9odMt2Cco=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\ngolang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/net v0.34.0 h1:Mb7Mrk043xzHgnRM88suvJFwzVrRfHEHJEl5/71CKw0=\ngolang.org/x/net v0.34.0/go.mod h1:di0qlW3YNM5oh6GqDGQr92MyTozJPmybPK4Ev/Gm31k=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.9.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190219092855-153ac476189d/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200106162015-b016eb3dc98e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200909081042-eff7692f9009/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200923182605-d9f96fdee20d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220114195835-da31bd327af9/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220310020820-b874c991c1a5/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.13.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.27.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.1.0/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=\ngolang.org/x/term v0.26.0/go.mod h1:Si5m1o57C5nBNQo5z1iq+XDijt21BDBDp2bK0QI8e3E=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.11.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.20.0/go.mod h1:D4IsuqiFMhST5bX19pQ9ikHC2GsaKyk/oF+pn3ducp4=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.9.0 h1:EsRrnYcQiGH+5FfbgvV4AP7qEZstoyrHB0DzarOQ4ZY=\ngolang.org/x/time v0.9.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191108193012-7d206e10da11/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/tools v0.29.0 h1:Xx0h3TtM9rzQpQuR4dKLrdglAmCEN5Oi+P74JdhdzXE=\ngolang.org/x/tools v0.29.0/go.mod h1:KMQVMRsVxU6nHCFXrBPhDB8XncLNLM0lIy/F14RP588=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v1.36.1 h1:yBPeRvTftaleIgM3PZ/WBIZ7XM/eEYAaEyCwvyjq/gk=\ngoogle.golang.org/protobuf v1.36.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/gcfg.v1 v1.2.3 h1:m8OOJ4ccYHnx2f4gQwpno8nAX5OGOh7RLaaz0pj3Ogs=\ngopkg.in/gcfg.v1 v1.2.3/go.mod h1:yesOnuUOFQAhST5vPY4nbZsb/huCgGGXlipJsBn0b3o=\ngopkg.in/natefinch/lumberjack.v2 v2.2.1 h1:bBRl1b0OH9s/DuPhuXpNl+VtCaJXFZ5/uEFST95x9zc=\ngopkg.in/natefinch/lumberjack.v2 v2.2.1/go.mod h1:YD8tP3GAjkrDg1eZH7EGmyESg/lsYskCTPBJVb9jqSc=\ngopkg.in/warnings.v0 v0.1.2 h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=\ngopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "key.pem",
          "type": "blob",
          "size": 0.01171875,
          "content": "keys/key.pem"
        },
        {
          "name": "keys",
          "type": "tree",
          "content": null
        },
        {
          "name": "lua",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.7080078125,
          "content": "// QUIC web server with built-in support for Lua, Markdown, Pongo2 and JSX.\npackage main\n\nimport (\n\t\"net/http\"\n\n\tlog \"github.com/sirupsen/logrus\"\n\t\"github.com/xyproto/algernon/engine\"\n)\n\nconst (\n\tversionString = \"Algernon 1.17.1\"\n\tdescription   = \"Web Server\"\n)\n\nfunc main() {\n\t// Create a new Algernon server. Also initialize log files etc.\n\talgernon, err := engine.New(versionString, description)\n\tif err != nil {\n\t\tif err == engine.ErrVersion {\n\t\t\t// Exit with error code 0 if --version was specified\n\t\t\treturn\n\t\t}\n\t\t// Exit if there are problems with the fundamental setup\n\t\tlog.Fatalln(err)\n\t}\n\n\t// Set up a mux\n\tmux := http.NewServeMux()\n\n\t// Serve HTTP, HTTP/2 and/or HTTPS. Quit when done.\n\talgernon.MustServe(mux)\n}\n"
        },
        {
          "name": "platformdep",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "regtest",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 3.1044921875,
          "content": "#!/bin/sh\n#\n# Create release tarballs/zip-files\n#\nname=algernon\nversion=$(grep -i version main.go | head -1 | cut -d' ' -f4 | cut -d'\"' -f1)\necho \"Version $version\"\n\nexport GOBUILD=( go build -mod=vendor -trimpath -ldflags \"-w -s\" -a -o )\nexport CGO_ENABLED=0\n\necho 'Compiling...'\necho '* Linux x86_64'\nexport GOOS=linux\nGOARCH=amd64 \"${GOBUILD[@]}\" $name.linux_x86_64_static\necho '* Linux aarch64'\nexport GOARCH=arm64\n\"${GOBUILD[@]}\" $name.linux_aarch64_static\nexport GOARCH=arm\n# Raspberry Pi A, A+, B, B+ and Zero\necho '* Linux armv6'\nGOARM=6 \"${GOBUILD[@]}\" $name.linux_armv6_static\n# Raspberry Pi 2, 3 and 4\necho '* Linux armv7 (RPI 2/3/4)'\nGOARM=7 \"${GOBUILD[@]}\" $name.linux_armv7_static\nunset GOARM\n\necho '* macOS x86_64'\nexport GOOS=darwin\nGOARCH=amd64 \"${GOBUILD[@]}\" $name.macos_x86_64_static\necho '* macOS aarch64'\nGOARCH=arm64 \"${GOBUILD[@]}\" $name.macos_aarch64_static\n\necho '* FreeBSD x86_64'\nexport GOOS=freebsd\nGOARCH=amd64 \"${GOBUILD[@]}\" $name.freebsd_x86_64_static\necho '* FreeBSD aarch64'\nGOARCH=arm64 \"${GOBUILD[@]}\" $name.freebsd_aarch64_static\nexport GOARCH=arm\necho '* FreeBSD armv6'\nGOARM=6 \"${GOBUILD[@]}\" $name.freebsd_armv6_static\necho '* FreeBSD armv7'\nGOARM=7 \"${GOBUILD[@]}\" $name.freebsd_armv7_static\n\necho '* NetBSD x86_64'\nexport GOOS=netbsd\nGOARCH=amd64 \"${GOBUILD[@]}\" $name.netbsd_x86_64_static\necho '* NetBSD aarch64'\nGOARCH=arm64 \"${GOBUILD[@]}\" $name.netbsd_aarch64_static\nexport GOARCH=arm\necho '* NetBSD armv6'\nGOARM=6 \"${GOBUILD[@]}\" $name.netbsd_armv6_static\necho '* NetBSD armv7'\nGOARM=7 \"${GOBUILD[@]}\" $name.netbsd_armv7_static\n\n# OpenBSD (and Plan9) did not compile: https://github.com/pkg/term/issues/27\n\nexport GOOS=windows\nGOARCH=amd64 \"${GOBUILD[@]}\" $name.exe\n\n# Compress the Linux releases with xz\nfor p in linux_x86_64_static linux_aarch64_static linux_armv6_static linux_armv7_static\ndo\n  echo \"Compressing $name-$version.$p.tar.xz\"\n  mkdir \"$name-$version-$p\"\n  cp $name.1 \"$name-$version-$p/\"\n  gzip \"$name-$version-$p/$name.1\"\n  cp $name.$p \"$name-$version-$p/$name\"\n  cp LICENSE \"$name-$version-$p/\"\n  tar Jcf \"$name-$version-$p.tar.xz\" \"$name-$version-$p/\"\n  rm -r \"$name-$version-$p\"\n  rm $name.$p\ndone\n\n# Compress the other tarballs with gz\nfor p in \\\nmacos_x86_64_static macos_aarch64_static \\\nfreebsd_x86_64_static freebsd_aarch64_static freebsd_armv6_static freebsd_armv7_static \\\nnetbsd_x86_64_static netbsd_aarch64_static netbsd_armv6_static netbsd_armv7_static\ndo\n  echo \"Compressing $name-$version.$p.tar.gz\"\n  mkdir \"$name-$version-$p\"\n  cp $name.1 \"$name-$version-$p/\"\n  gzip \"$name-$version-$p/$name.1\"\n  cp $name.$p \"$name-$version-$p/$name\"\n  cp LICENSE \"$name-$version-$p/\"\n  tar zcf \"$name-$version-$p.tar.gz\" \"$name-$version-$p/\"\n  rm -r \"$name-$version-$p\"\n  rm $name.$p\ndone\n\n# Compress with zip for Windows\n# Compress the Windows release\necho \"Compressing $name-$version-windows.zip\"\nmkdir \"$name-$version-windows_x86_64_static\"\ncp $name.1 LICENSE $name.exe \"$name-$version-windows_x86_64_static/\"\nzip -q -r \"$name-$version-windows_x86_64_static.zip\" \"$name-$version-windows_x86_64_static/\"\nrm -r \"$name-$version-windows_x86_64_static\"\nrm $name.exe\n\nmkdir -p release\nmv -v $name-$version* release\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "serverconf.lua",
          "type": "blob",
          "size": 2.267578125,
          "content": "--- Algernon Server Configuration\n--- For use with the samples\n\n--- Logging (will log to console if an empty string is given)\n--LogTo(\"algernon.log\")\n--LogTo(\"/var/log/algernon.log\")\n\n--- Clear the URL prefixes for the access permissions\n--- (see https://github.com/xyproto/permissions2 for an overview of the default paths)\nClearPermissions()\n\n--- For the \"bob\" example, when running from this directory\nAddAdminPrefix(\"/samples/bob/admin\")\nAddUserPrefix(\"/samples/bob/data\")\n\n--- For the \"bob\" example, when running from the \"bob\" directory\nAddAdminPrefix(\"/admin\")\nAddUserPrefix(\"/data\")\n\n--- For the \"chat\" example, when running from this directory\nAddUserPrefix(\"/samples/chat/chat\")\n\n--- For the \"chat\" example, when running from the \"chat\" directory\nAddUserPrefix(\"/chat\")\n\n--- Reverse proxy examples\nAddReverseProxy(\"/api/\", \"http://localhost:8080\")\nAddReverseProxy(\"/api/auth\", \"http://localhost:8100\")\n\n-- Output server configuration after parsing this file and commandline arguments\nOnReady(function ()\n  print(ServerInfo())\nend)\n\n-- Custom permission denied handler\nDenyHandler(function ()\n  content(\"text/html\")\n  print[[<!doctype html><html><head><title>Permission denied</title><link href='//fonts.googleapis.com/css?family=Lato:300' rel='stylesheet' type='text/css'></head><body style=\"background-color: #f0f0f0; color: #101010; font-family: 'Lato', sans-serif; font-weight: 300; margin: 4em; font-size: 2em;\">]]\n  print(\"<strong>HTTP \"..method()..[[</strong> <font color=\"red\">denied</font> for ]]..urlpath()..\" (based on the current permission settings).\")\n  print([[</body></html>]])\nend)\n\n-- Global configuration\nfields = {\n  sitename = \"Sample Site\",\n}\n\n-- Store global variables as Lua code in the database.\n-- Any other Lua file may load them with: CodeLib():import(\"globals\")\nOnReady(function()\n\n  -- Prepare a CodeLib object and clear the \"globals\" key\n  codelib = CodeLib()\n\n  -- Store the configuration strings as Lua code under the key \"globals\".\n  local first = true\n  for k, v in pairs(fields) do\n    luaCode = k .. \"=\\\"\" .. v .. \"\\\"\"\n    if first then\n      codelib:set(\"globals\", luaCode)\n      first = false\n    else\n      codelib:add(\"globals\", luaCode)\n    end\n  end\n\n  print(codelib:get(\"globals\"))\n\n  --SetCookieSecret(\"asdfasdf\")\n  --print(\"Cookie secret = \" .. CookieSecret())\n\nend)\n"
        },
        {
          "name": "system",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.5009765625,
          "content": "#!/bin/bash\necho -ne 'Launching Algernon...\\t'\n./algernon --quiet --httponly --server --nodb --addr :45678 &\nPID=$!\nfunction finish {\n  echo -ne \"Stopping PID $PID...\\t\"\n  kill $PID 2>/dev/null && echo ok || echo fail\n}\ntrap finish EXIT\necho ok\necho -ne 'Waiting for response...\\t'\nfor i in $(seq 1 30); do curl -sIm3 -o/dev/null http://localhost:45678 && break || sleep 1; done\noutput=$(curl -sIm3 -o- http://localhost:45678)\nif [[ $output == *\"Server: Algernon\"* ]]; then\n  echo ok\nelse\n  echo fail\n  exit 1\nfi\n"
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        },
        {
          "name": "trace.sh",
          "type": "blob",
          "size": 0.2373046875,
          "content": "#!/bin/sh\necho \"Generating trace.out\"\necho \"You can visit http://localhost:3000/ in a couple of seconds\"\n./algernon --dev --conf serverconf.lua --dir samples --httponly --debug --bolt --server -tracefile trace.out \"$@\"\ngo tool trace trace.out\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.sh",
          "type": "blob",
          "size": 1.0390625,
          "content": "#!/bin/sh -e\n#\n# Self-modifying script that updates the version numbers\n#\n# Requires the `setconf` utility.\n#\n\n# The current version goes here, as the default value\nVERSION=${1:-'1.17.1'}\n\nif [ -z \"$1\" ]; then\n  echo \"The current version is $VERSION, pass the new version as the first argument if you wish to change it\"\n  exit 0\nfi\n\necho \"Setting the version to $VERSION\"\n\n# Set the version in various files\nsetconf README.md '* Version' $VERSION\nsetconf main.go versionString \"\\\"Algernon \"$VERSION\"\\\"\"\n\n# Update the date and version in the man page\nd=$(LC_ALL=C date +'%d %b %Y')\n\nif [ \"$(uname)\" = \"Darwin\" ]; then\n    sed -i '' \"s/\\\"[0-9]* [A-Z][a-z]* [0-9]*\\\"/\\\"$d\\\"/g\" algernon.1\n    sed -i '' \"s/[[:digit:]]*\\.[[:digit:]]*\\.[[:digit:]]*/$VERSION/g\" algernon.1\n    sed -i '' \"s/[[:digit:]]*\\.[[:digit:]]*\\.[[:digit:]]*/$VERSION/g\" \"$0\"\nelse\n    sed -i \"s/\\\"[0-9]* [A-Z][a-z]* [0-9]*\\\"/\\\"$d\\\"/g\" algernon.1\n    sed -i \"s/[[:digit:]]*\\.[[:digit:]]*\\.[[:digit:]]*/$VERSION/g\" algernon.1\n    sed -i \"s/[[:digit:]]*\\.[[:digit:]]*\\.[[:digit:]]*/$VERSION/g\" \"$0\"\nfi\n"
        },
        {
          "name": "welcome.bat",
          "type": "blob",
          "size": 0.248046875,
          "content": "@echo off\necho Try editing the markdown file in the \"samples\" directory and see the\necho results instantly in the browser at http://localhost:3000/\n.\\algernon.exe --dev --conf serverconf.lua --dir samples --httponly --debug --autorefresh --bolt --server\n"
        },
        {
          "name": "welcome.sh",
          "type": "blob",
          "size": 1.7119140625,
          "content": "#!/bin/sh\n\nmin_ulimit=512\nulimit=$(ulimit -n 2> /dev/null || echo \"not found\")\n\n# Use \"sysctl kern.maxfiles\" for macOS\nkernmax=$(sysctl kern.maxfiles 2> /dev/null || echo \"not found\")\nkernmax_present=$(echo \"$kernmax\" | grep -qE '^kern\\.maxfiles:'; echo $?)\nkernmax_valid_format=$(echo \"$kernmax\" | grep -qE '^kern\\.maxfiles: [0-9]+$'; echo $?)\n\n# Check if $kernmax is present and not in the valid format\nif [ \"$kernmax_present\" -eq 0 ] && [ \"$kernmax_valid_format\" -ne 0 ]; then\n    echo 'ERROR:'\n    echo \"  'sysctl kern.maxfiles' did not return a valid number\"\n    exit 1\nfi\n\n# If kernmax is present and has a valid format, set that as the ulimit\nif [ \"$kernmax_present\" -eq 0 ]; then\n    kernmax_value=$(echo \"$kernmax\" | awk '{print $2}')\n    ulimit=\"$kernmax_value\"\nfi\n\n# If we have no ulimit number by now, exit with an error message\nif [ \"$ulimit\" = \"not found\" ]; then\n    echo 'NOTE:'\n    echo \"  'ulimit -n' could not be run.\"\n    echo \"  'ulimit -n' returns the number of files that can be open at the same time.\"\n    echo \"  The '--autorefresh' flag will not work if the ulimit is too low.\"\n    exit 1\nfi\n\nif [ \"$ulimit\" -lt \"$min_ulimit\" ]; then\n    echo 'NOTE:'\n    echo \"  'ulimit -n' on your system returns $ulimit.\"\n    echo \"  'ulimit -n' returns the number of files that can be open at the same time.\"\n    echo \"  $ulimit is too low to be able to use the '--autorefresh' flag.\"\n    echo \"  Increase the ulimit on your system to at least $min_ulimit to be able to use it.\"\n    exit 1\nfi\n\necho 'Try editing the markdown file in \"samples\" directory and see the'\necho 'results instantly in the browser at http://localhost:3000/'\n\n./algernon --dev --conf serverconf.lua --dir samples --httponly --debug --autorefresh --bolt --server \"$@\"\n"
        }
      ]
    }
  ]
}