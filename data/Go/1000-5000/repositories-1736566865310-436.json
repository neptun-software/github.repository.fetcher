{
  "metadata": {
    "timestamp": 1736566865310,
    "page": 436,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "esm-dev/esm.sh",
      "stars": 3265,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.041015625,
          "content": "[*.go]\nindent_style = tab\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.07421875,
          "content": ".DS_Store\n.idea/\n.vscode/\n*.log\nconfig.json\nesmd\n.esmd/\nnode_modules/\ndist/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 44.7734375,
          "content": "# Changelog\n\n## v136(Unreleased)\n\n* Add two builtin registries:\n  * [jsr](https://jsr.io) - The open-source package registry for modern JavaScript and TypeScript, created by the Deno team. ([32cd2bd](https://github.com/esm-dev/esm.sh/commit/32cd2bd931f33118cbc96ee89583f20718c58fbf))\n    ```js\n    // example\n    import { encodeBase64 } from \"https://esm.sh/jsr/@std/encoding@1.0.0/base64\";\n    import { Hono } from \"https://esm.sh/jsr/@hono/hono@4\";\n    ```\n  * [pkg.pr.new](https://pkg.pr.new) - Continuous (Preview) Releases for your libraries, created by [StackBlitz Labs](https://github.com/stackblitz-labs) ([#904](https://github.com/esm-dev/esm.sh/pull/904), [#913](https://github.com/esm-dev/esm.sh/pull/913))\n    ```js\n    // Examples\n    import { Bench } from \"https://esm.sh/pr/tinylibs/tinybench/tinybench@a832a55\";\n    import { Bench } from \"https://esm.sh/pr/tinybench@a832a55\"; // --compact\n    ```\n\n* Respect semantic versioning for dependency resolving ([#875](https://github.com/esm-dev/esm.sh/pull/875))\n\n  Previously, dependency resolution used fixed versions, which could cause duplication issues when packages were updated. Starting from v136, we now follow semantic versioning for dependencies.\n\n  ```js\n  // before\n  \"react-dom@19.0.0\" import \"/react@19.0.0/es2022/react.mjs\";\n  // after\n  \"react-dom@19.0.0\" import \"/react@^19.0.0?target=es2022\";\n  ```\n\n* Add built-in npm package manager ([#948](https://github.com/esm-dev/esm.sh/pull/948))\n\n  Implement a built-in npm package manager in Go to replace pnpm. This change reduces the CI test time from 12:15 to 4:30 (**~2.7x faster**) and eliminates the need for `nodejs` and `pnpm` dependencies.\n\n* Split modules by analyzing the dependency tree during the build process ([#959](https://github.com/esm-dev/esm.sh/pull/959))\n\n  To improve build performance and reduce network requests, esm.sh bundles sub-modules of a package by default. However, this can lead to duplicate code in the build. In v136, the server will split the modules by analyzing the dependency tree during the build process if the package's `exports` field is defined.\n\n* Use [@pi0](https://github.com/pi0)'s [unenv](https://github.com/unjs/unenv) as the node runtime compatibility layer ([#914](https://github.com/esm-dev/esm.sh/pull/914))\n\n  unenv provides a collection of Node.js and Web polyfills and mocking utilities with configurable presets for converting JavaScript code and libraries to be platform and runtime agnostic, working in any environment including Browsers, Workers, Node.js, Cloudflare Workers, Deno. unenv is also used by CloudFlare Workers: [blog](https://blog.cloudflare.com/more-npm-packages-on-cloudflare-workers-combining-polyfills-and-native-code/).\n\n  You can also access these `unenv` node runtime modules directly via `/node/[node-builtin-module-name].mjs` path, for example:\n\n  ```js\n  import * from \"https://esm.sh/node/fs.mjs\";\n  ```\n\n* Add [npm-replacements](./server/npm_replacements/src/) that follows [e18e](https://e18e.dev)'s [module-replacements](https://github.com/es-tooling/module-replacements). ([#914](https://github.com/esm-dev/esm.sh/pull/914))\n\n  The `npm-replacements` package replaces certain polyfill packages on NPM with native modern APIs during the build process. For example, the `object-assign` package is replaced with `Object.assign`:\n\n  ```js\n  import assign from \"object-assign\"; // replaced with \"const assign = Object.assign\"\n  ```\n\n* Remove build version prefix from the module path\n\n  The build version prefix of esm.sh was introduced to avoid potential breaking changes caused by updates to the esm.sh server. However, it can lead to duplication issues when updating the server. In v136, we have removed the build version prefix from the module path, and the `?pin` query will be ignored. Paths with the build version prefix will continue to work as before, but the new default will be paths without the build version prefix.\n\n  ```js\n  // before\n  \"react@19.0.0\" -> \"https://esm.sh/v135/react@19.0.0/es2022/react.mjs\";\n  // after\n  \"react@19.0.0\" -> \"https://esm.sh/react@19.0.0/es2022/react.mjs\";\n  ```\n\n* Deprecate the `build` API\n  ```js\n  import { build } from \"https://esm.sh/build\";\n  build() // throws Error: The build API has been deprecated.\n  ```\n\n* Deprecate the Deno CLI script\n\n  Deno now includes its own built-in package manager, which can be used to manage `jsr:` nad `npm:` imports in your deno applications. So we decided to deprecate the Deno CLI script.\n\n  ```bash\n  # use\n  deno add npm:pract jsr:@std/encoding\n  Add npm:preact@10.25.4\n  Add jsr:@std/encoding@1.0.6\n\n  # do not use\n  deno run -A -r https://esm.sh init\n  error: The deno CLI has been deprecated.\n  ```\n\n* Add `npmScopedRegistries` config\n\n  The `npmScopedRegistries` configuration enables you to define the registry, token, user, and password for scoped npm packages. This allows you to import scoped packages using URLs like `https://your-esm-server.com/@scope_name/pkg@version`.\n\n  ```json\n  {\n    \"npmScopedRegistries\": {\n      \"@scope_name\": {\n        \"registry\": \"https://your-registry.com/\",\n        \"token\": \"xxxxxx\",\n        \"user\": \"\",\n        \"password\": \"\"\n      }\n    }\n  }\n  ```\n\n* Experimental Features:\n  * Build `.vue` and `.svelte` files on the fly ([#906](https://github.com/esm-dev/esm.sh/pull/906))\n    ```js\n    import \"https://esm.sh/gh/phosphor-icons/vue@v2.2.0/src/icons/PhAirplay.vue?deps=vue@3.5.8\"\n    ```\n  * https://esm.sh/x - ts/jsx/vue/svelte just works™️ in browser. ([#886](https://github.com/esm-dev/esm.sh/pull/886))\n\n* Other Changes:\n  * Upgrade esbuild to **0.24.2**\n  * Use native [cjs-module-lexer@v1.0.7](https://github.com/esm-dev/cjs-module-lexer/releases/tag/v1.0.7)\n  * Use target `es2022` for browsers by default ([#903](https://github.com/esm-dev/esm.sh/pull/903))\n  * Replace `window` with `globalThis` to make Deno 2 happy ([#964](https://github.com/esm-dev/esm.sh/pull/964))\n  * Use `.mjs` extenstion for sub-module build ([#917](https://github.com/esm-dev/esm.sh/pull/917))\n  * dts-transformer: support `.d` extension\n  * config: Add `corsAllowOrigins` config\n  * config: Add `customLandingPage` config ([#928](https://github.com/esm-dev/esm.sh/pull/928))\n  * config: Add `npmQueryCacheTTL` config ([#921](https://github.com/esm-dev/esm.sh/pull/921))\n  * config: Add npmQueryCacheTTL config ([#921](https://github.com/esm-dev/esm.sh/pull/921))\n  * config: Support **S3-compatible** storage ([#886](https://github.com/esm-dev/esm.sh/pull/886))\n\n## v135\n\n- Introduce https://esm.sh/run\n- worker: Use `raw.esm.sh` hostname for ?raw option\n- Add `?no-bundle` option\n- Support `esm.sh` field in package.json\n- Fix sub-module resolving (close [#754](https://github.com/esm-dev/esm.sh/issues/754), [#743](https://github.com/esm-dev/esm.sh/issues/743))\n- Upgrade esbuild to **0.19.7**\n\n## v134\n\n- Add `transformOnly` option for build api\n- Add `allowList` in config ([#745](https://github.com/esm-dev/esm.sh/pull/745) by @olekenneth)\n- Improved Deno CLI ([#742](https://github.com/esm-dev/esm.sh/pull/742) by @Kyiro)\n- Worker: fix dist version lookup\n- Fix exported names from a dependency (close [#729](https://github.com/esm-dev/esm.sh/issues/729), [#750](https://github.com/esm-dev/esm.sh/issues/750))\n- Fix: write `.npmrc` file if `NpmRegistry` is set (close [#737](https://github.com/esm-dev/esm.sh/pull/737)) ([#751](https://github.com/esm-dev/esm.sh/pull/751) by @edeustace)\n- Upgrade esbuild to **0.19.5**\n\n## v133\n\n- Add `?raw` to support requests for raw package source files ([#731](https://github.com/esm-dev/esm.sh/pull/731) by @johnyanarella)\n- Add global `setMaxListeners` to `node:events` polyfill ([#719](https://github.com/esm-dev/esm.sh/pull/719))\n- cjs-lexer: resolving error now doesn't break build (close [#738](https://github.com/esm-dev/esm.sh/pull/738))\n- Fix `cwd` method of `node:process` polyfill (close [#718](https://github.com/esm-dev/esm.sh/pull/718))\n- Fix `applyConditions` function use `node` condition for browser (close [#732](https://github.com/esm-dev/esm.sh/pull/732))\n- Fix `*.css.js` path (close [#728](https://github.com/esm-dev/esm.sh/pull/728))\n- Fix some invalid _require_ imports (close [#724](https://github.com/esm-dev/esm.sh/pull/724))\n- Fix relative path resolving of `browser` in package.json\n- Upgrade esbuild to **0.19.4**\n\n## v132\n\n- Resolve node internal modules when `?external=*` set (close [#714](https://github.com/esm-dev/esm.sh/pull/714))\n- Fix builds with `bigint` and `top-level-await` for all targets (close [#711](https://github.com/esm-dev/esm.sh/pull/711))\n- Fix `node:process` ployfill module mssing the `hrtime` method\n- Fix docker image missing `git` command\n- esm-worker: add `varyUA` option for polyfill modules\n\n## v131\n\n- Add cache layer for the `/build` API\n- Fix dts transformer resolver ignoring `*.mjs` url\n- fix `?external` option ignoring sub-modules\n- Use raw order of the `exports` in package.json (close [#705](https://github.com/esm-dev/esm.sh/pull/705))\n- Redirect old build path (`.js`) to new build path (`.mjs`) (close [#703](https://github.com/esm-dev/esm.sh/pull/703))\n- Upgrade esbuild to **0.19.2**\n\n## v130\n\n- esm-cjs-lexer: support minified UMD exports ([#689](https://github.com/esm-dev/esm.sh/pull/689))\n- Support sub `.mjs` module (close [#691](https://github.com/esm-dev/esm.sh/pull/691))\n- Fix `?bundle` mode ignores `node_process.js` (close [#694](https://github.com/esm-dev/esm.sh/pull/694))\n- Upgrade `@types/react@18` to **18.2.15**\n- Upgrade esbuild to **0.18.17**\n\n## v129\n\n- BREAKING: Remove `x-esm-deps` header (close [#683](https://github.com/esm-dev/esm.sh/issues/683))\n- Sort `exports` of package.json when looping (close [#683](https://github.com/esm-dev/esm.sh/issues/683))\n- Don't replace `typeof window` for deno target (close [#681](https://github.com/esm-dev/esm.sh/issues/681))\n- Don't replace node global variable for `?target=node`\n- Fix **dts** transformer (close [#670](https://github.com/esm-dev/esm.sh/issues/670))\n- Fix depreacted message with `\"`\n- esm-worker: Fix cacheKey with `x-real-origin` header\n\n## v128\n\n- Add official Docker image: https://ghcr.io/esm-dev/esm.sh\n- Fix missed `?external` of deps\n- Fix duplicate `Access-Control-Expose-Headers` headers\n- Fix dts transform for imports with both default and named imports ([#675](https://github.com/esm-dev/esm.sh/pull/675) by @hayes)\n- Don't bundle dynamic imports\n- Upgrade _stableBuild_ to **v128**\n\n## v127\n\n- Add `preload` imports\n- Add `modern-normalize` to the `cssPackages`\n- Fix subpath not be resovled with `?alias` (close [#671](https://github.com/esm-dev/esm.sh/issues/671))\n- Fix dts transformer for \"*.d\" path imports (close [#660](https://github.com/esm-dev/esm.sh/issues/660))\n- Fix source map mappings (close [#668](https://github.com/esm-dev/esm.sh/issues/668))\n- CLI: Fix update failure caused by gh module ([#661](https://github.com/esm-dev/esm.sh/pull/661) by @lifegpc)\n- Upgrade esbuild to **0.18.10**\n\n## v126\n\n- **breaking**: the `esm` tag function of build API now imorts module\n  ```js\n  import { esm } from \"https://esm.sh/build\";\n  const mod = await esm`\n    export const foo:string = \"bar\"\n  `;\n  console.log(mod.foo); // \"bar\"\n  ```\n- cjs-lexer: support _annotated_ exports (close [#659](https://github.com/esm-dev/esm.sh/issues/659))\n- Add support for basic auth ([#657](https://github.com/esm-dev/esm.sh/pull/657) by @johnpangalos)\n\n## v125\n\n- Fix `node-fetch` import in cjs modules (close [#649](https://github.com/esm-dev/esm.sh/issues/649))\n- Add `node:worker_threads` polyfill(fake) (close [#648](https://github.com/esm-dev/esm.sh/issues/648))\n- Use `denonext` target for Deno >= 1.33.2 (close [#646](https://github.com/esm-dev/esm.sh/issues/646))\n- Fix `.json.js` path (close [#645](https://github.com/esm-dev/esm.sh/issues/645))\n- Fix cache missing content (close [#641](https://github.com/esm-dev/esm.sh/issues/641))\n- Upgrade `deno/std` to **0.177.1**\n\n## v124\n\n- Fix the dts walker (close [#642](https://github.com/esm-dev/esm.sh/issues/642))\n\n## v123\n\n- Add `/server` endpoint for Deno to serve esm.sh locally\n- Add scope to config ([#636](https://github.com/esm-dev/esm.sh/pull/636) by @johnpangalos)\n- Fix `.d.ts` walker (close [#640](https://github.com/esm-dev/esm.sh/issues/640))\n- Fix packages with `v` prefix in `version` (close [#639](https://github.com/esm-dev/esm.sh/issues/639))\n- Fix `findFiles` function (close [#638](https://github.com/esm-dev/esm.sh/issues/638))\n\n## v122\n\n- Use stable imports order\n- Support more asset extnames\n- esm-worker: Use `X-Real-Origin` and `X-Esm-Worker-Version` headers\n- Fix worker `CORS` issue (close [#631](https://github.com/esm-dev/esm.sh/issues/631))\n- Fix sub-module resolving (close [#633](https://github.com/esm-dev/esm.sh/issues/633))\n- Fix undefined content-type header (close [#635](https://github.com/esm-dev/esm.sh/issues/635))\n\n## v121\n\n- Use `browser` field for package main if possible\n  ```json\n  {\n    \"name\": \"pkg\",\n    \"version\": \"1.0.0\",\n    \"main\": \"./index.js\",\n    \"browser\": {\n      \"./index.js\": \"./browser.js\"\n    }\n  }\n  ```\n- Fix redirects for `?css` and `GET /build`\n- Fix `*.js.js` module path (close [#627](https://github.com/esm-dev/esm.sh/issues/627))\n- Fix cjs imports (close [#629](https://github.com/esm-dev/esm.sh/issues/629), [#626](https://github.com/esm-dev/esm.sh/issues/626))\n- Add `pako` to the `requireModeAllowList`\n\n## v120\n\n- build-api: Support types option\n- Open-source the cloudflare worker\n- Support `HEAD` method\n- Fix bare path for css/custom build\n- Fixing type only packages missing the `X-Typescript-Types` header\n- Fix cjs-lexer `exports` resloving\n- Use empty object instead of `null` for browser exclude (close [#613](https://github.com/esm-dev/esm.sh/issues/613))\n- Add `zlib-sync` to nativeNodePackages (close [#621](https://github.com/esm-dev/esm.sh/issues/621))\n- Redirect invalid `*.json` url\n\n## v119\n\n- Fix named import of cjs (close [#620](https://github.com/esm-dev/esm.sh/issues/620))\n- Use `STABKE_VERSION` for dts build of `stableBuild`\n- Upgrade esbuild to **0.17.18**\n\n## v118\n\n- feat: Publish system ([#607](https://github.com/esm-dev/esm.sh/pull/607))\n- **esm-cjs-lexer**: Support `__export(require(\"...\"))` pattern (close [#611](https://github.com/esm-dev/esm.sh/issues/611))\n- Add `Auth` middleware\n- Upgrade `stableBuild` to v118\n- Remove **lit** from `stableBuild`\n- Fix submodule types (close [#606](https://github.com/esm-dev/esm.sh/issues/606))\n- Fix arch for darwin arm64 ([#617](https://github.com/esm-dev/esm.sh/pull/617) by @JLugagne)\n\n## v117\n\n- Fix Buffer polyfill for deno (close [#574](https://github.com/esm-dev/esm.sh/issues/574))\n- Fix dts transformer with submodule (close [#599](https://github.com/esm-dev/esm.sh/issues/599))\n- Fix importing `.json` as a module (close [#601](https://github.com/esm-dev/esm.sh/issues/601))\n- Fix `.wasm` module importing (close [#602](https://github.com/esm-dev/esm.sh/issues/602))\n- Fix path `/v100/PKG/TARGET/index.js`\n\n## v116\n\n- Support modules/assets from Github repo (close [#588](https://github.com/esm-dev/esm.sh/issues/588))\n- Update `nativeNodePackages` (close [#591](https://github.com/esm-dev/esm.sh/issues/591))\n- Fix dep import url of cjs module (close [#592](https://github.com/esm-dev/esm.sh/issues/592))\n- Add support of resolving `typesVersions` (close [#593](https://github.com/esm-dev/esm.sh/issues/593))\n- Fix `exports` glob condition resloving (close [#594](https://github.com/esm-dev/esm.sh/issues/594))\n- Remove shebang (close [#596](https://github.com/esm-dev/esm.sh/issues/596))\n- Fix missed build version of dts files (close [#589](https://github.com/esm-dev/esm.sh/issues/589))\n\n## v115\n\n- Return JavaScript modules for `?module` query with `wasm` files\n- Fix types transformer (close [#581](https://github.com/esm-dev/esm.sh/issues/581))\n- Fix incorrect named import of cjs modules (close [#583](https://github.com/esm-dev/esm.sh/issues/583))\n- Fix sumodule path resolving (close [#584](https://github.com/esm-dev/esm.sh/issues/584))\n- Upgrade `@types/node` to 18\n\n## v114\n\n- Add `?conditions` query as esbuild option\n- Use **pnpm** to install packages instead of yarn (save the server disk space & improve the build performance)\n- Serve static files on local ([#564](https://github.com/esm-dev/esm.sh/pull/564) @Justinidlerz)\n- Support `.d.mts` extension (close [#580](https://github.com/esm-dev/esm.sh/issues/580))\n- Fix cjs transpiling (close [#577](https://github.com/esm-dev/esm.sh/issues/577))\n- Fix types bulid (close [#572](https://github.com/esm-dev/esm.sh/issues/572), [#576](https://github.com/esm-dev/esm.sh/issues/576))\n- Fix invalid type URL if submodule is main entry ([#579](https://github.com/esm-dev/esm.sh/pull/579) @marvinhagemeister)\n- Upgrade esbuild to 0.17.14\n\n## v113\n\n- `express` is working in Deno\n- Fix lost non-mjs-extension module caused by v112 (close [#559](https://github.com/esm-dev/esm.sh/issues/559))\n- Fix exports of `netmask` and `xml2js` ([#561](https://github.com/esm-dev/esm.sh/pull/561) @jcc10)\n- Fix `default` import of deps for cjs (close [#565](https://github.com/esm-dev/esm.sh/issues/565), [#566](https://github.com/esm-dev/esm.sh/issues/566))\n\n## v112\n\n- Use `.mjs` extension for the package main module to resolve subpath conflicts\n- Ignore `?exports` query when importing stable modules\n- Fix npm naming regexp (close [#541](https://github.com/esm-dev/esm.sh/issues/541))\n- Fix node buffer import for denonext target (closed [#556](https://github.com/esm-dev/esm.sh/issues/556))\n- Fix tree shaking (close [#521](https://github.com/esm-dev/esm.sh/issues/521))\n- Fix package nested conditions export ([#546](https://github.com/esm-dev/esm.sh/pull/546) by @Justinidlerz)\n- Fix esm imports in cjs (close [#557](https://github.com/esm-dev/esm.sh/issues/557))\n- Improve server performance ([#543](https://github.com/esm-dev/esm.sh/pull/543) by @Justinidlerz)\n- Update requireModeAllowList (close [#540](https://github.com/esm-dev/esm.sh/issues/540), [#548](https://github.com/esm-dev/esm.sh/issues/548))\n\nFor Deno:\n- Inject `XHR` polyfill for `axios`, `cross-fetch`, `whatwg-fetch` automatically\n- CLI: Use user-specified indent size ([#551](https://github.com/esm-dev/esm.sh/pull/551) by @npg418)\n\n## v111\n\n- Print package `deprecated` message\n- Remove source map url of worker\n- Fix package CSS redirects with `target` option\n- Fix build dead-loop for edge cases\n- Fix CLI `update` command (close [#536](https://github.com/esm-dev/esm.sh/issues/536))\n\n## v110\n\n- Fix `Content-Type` header for dts files\n\n## v109\n\n- Ignore `?external` option for stable builds\n- Fix `react/jsx-runtime` bundles `react` module\n- Remove alias export resolving (close [#530](https://github.com/esm-dev/esm.sh/issues/530))\n\n## v108\n\n- Add `denonext` target to use [deno 1.31 node compatibility layer](https://deno.com/blog/v1.31#compatibility-layer-is-now-part-of-the-runtime)\n- Redirect to css file for css packages\n  ```\n  https://esm.sh/normalize.css -> https://esm.sh/normalize.css/normalize.css\n  ```\n- Fix wasm packages can't get the wasm file.\n  ```js\n  import init, { transform } from \"https://esm.sh/lightningcss-wasm\";\n  // before: you need to specify the wasm file path\n  await init(\"https://esm.sh/lightningcss-wasm/lightningcss_node.wasm\")\n  // after: you don't need to specify it\n  await init()\n  ```\n- Disable `bundle` mode for stable builds\n- Fix alias export (close [#527](https://github.com/esm-dev/esm.sh/issues/527))\n- Update references to reqOrigin to use cdnOrigin ([#529](https://github.com/esm-dev/esm.sh/pull/529) by [@jaredcwhite](https://github.com/jaredcwhite))\n\n## v107\n\n- Add `?cjs-export` query (close [#512](https://github.com/esm-dev/esm.sh/issues/512))<br>\n  If you get an error like `...not provide an export named...`, that means esm.sh can not resolve CJS exports of the module correctly. You can add `?cjs-exports=foo,bar` query to specify the export names:\n  ```javascript\n  import { NinetyRing, NinetyRingWithBg } from \"https://esm.sh/react-svg-spinners@0.3.1?cjs-exports=NinetyRing,NinetyRingWithBg\"\n  ```\n- Update `requireModeAllowList` (close [#520](https://github.com/esm-dev/esm.sh/issues/520))\n- **Remove** `?sourcemap` query, always generate source map as inline url.\n- Default export all members from original module to prevent missing named exports members ([#522](https://github.com/esm-dev/esm.sh/pull/522))\n- Only apply patch if types are missing in preact ([#523](https://github.com/esm-dev/esm.sh/pull/523))\n- Upgrade `esbuild` to **0.17.10**.\n- Upgrade `deno/std` to **0.177.0**\n\n## v106\n\n- Just fix fake module export names resolving (close [#510](https://github.com/esm-dev/esm.sh/issues/510))\n\n## v105\n\n- Check types which is not defined in `package.json`\n- Fix empty module build (close [#483](https://github.com/esm-dev/esm.sh/issues/483))\n- Fix exports field resolving (close [#503](https://github.com/esm-dev/esm.sh/issues/503))\n- Fix deno cli script (close [#505](https://github.com/esm-dev/esm.sh/issues/505))\n- Fix incorrect redirects (close [#508](https://github.com/esm-dev/esm.sh/issues/508))\n- Fix invalid target with `HeadlessChrome/` UA (close [#509](https://github.com/esm-dev/esm.sh/issues/509))\n- Upgrade `deno/std` to **0.175.0**\n\n## v104\n\n- Rewrite `FileSystem` interface of the storage.\n- Fix submodule build with `exports` in package.json (close [#497](https://github.com/esm-dev/esm.sh/issues/497))\n- Fix es5-ext weird `/#/` path (close [#502](https://github.com/esm-dev/esm.sh/issues/502))\n\n## v103\n\n- Add `inject` argument for worker factory\n  ```js\n  import workerFactory from \"https://esm.sh/xxhash-wasm@1.0.2?worker\";\n\n  const workerInject = `\n  self.onmessage = (e) => {\n    // variable 'E' is the xxhash-wasm module default export\n    E().then(hasher => {\n      self.postMessage(hasher.h64ToString(e.data));\n    })\n  }\n  `;\n\n  const worker = workerFactory(workerInject);\n  worker.onmessage = (e) => {\n    console.log(e.data); // 502b0c5fc4a5704c\n  };\n  worker.postMessage(\"Hello\");\n  ```\n- Respect `?external` arg in bundle mode (close [#498](https://github.com/esm-dev/esm.sh/issues/498))\n- Add `require()` syntax support for **dts** transformer\n- Fix import maps scope is not correct by the CLI script (close [#480](https://github.com/esm-dev/esm.sh/issues/480))\n- Fix `basePath` doesn't take effect on redirects (close [#481](https://github.com/esm-dev/esm.sh/issues/481))\n- Fix `X-TypeScript-Types` header not pined for stable builds\n- Fix some bugs related to package path parsing ([#487](https://github.com/esm-dev/esm.sh/pull/487))\n- Upgrade `esbuild` to **0.16.17**\n- Upgrade `deno/std` to **0.173.0**\n\n## v102\n\n- Support `browser` field of **package.json** to improve compatibility with npm packages in browser. For example, the `webtorrent` package will use `memory-chunk-store` instead of `fs-chunk-store` and exclude built-in modules like `fs`, `net`, `os` and so on.\n  ```json\n  {\n    \"name\": \"webtorrent\",\n    \"description\": \"Streaming torrent client\",\n    \"version\": \"1.9.6\",\n    \"browser\": {\n      \"./lib/server.js\": false,\n      \"./lib/conn-pool.js\": false,\n      \"./lib/utp.js\": false,\n      \"bittorrent-dht/client\": false,\n      \"fs\": false,\n      \"fs-chunk-store\": \"memory-chunk-store\",\n      \"load-ip-set\": false,\n      \"net\": false,\n      \"os\": false,\n      \"ut_pex\": false\n    },\n  }\n  ```\n  (Close [#450](https://github.com/esm-dev/esm.sh/issues/450))\n\n## v101\n\n- Fix `?bundle` mode with illegal paths (close [#476](https://github.com/esm-dev/esm.sh/issues/476)).\n- Fix `?worker` mode doesn't support CORS.\n\n## v100\n\n- Improve self-hosting configuration. check [HOSTING.md](./HOSTING.md) for more details.\n- Support `browser` field when it's an es6 module (close [#381](https://github.com/esm-dev/esm.sh/issues/381)).\n- Purge headers from unpkg.com to avoid repeated `Access-Control-Allow-Origin` header (close [#453](https://github.com/esm-dev/esm.sh/issues/453)).\n- Fix content compression (close [#460](https://github.com/esm-dev/esm.sh/issues/460)).\n- Fix alias export (close [#471](https://github.com/esm-dev/esm.sh/issues/471)).\n- Fix cycle importing (close [#464](https://github.com/esm-dev/esm.sh/issues/464)).\n- Fix scenarios where module/es2015 are shims (maps).\n- Fix worker cors issue.\n- Upgrade `esbuild` to **0.16.10**.\n- Upgrade `deno/std` to **0.170.0**.\n\n## v99\n\n- Improve CDN cache performance, now you can get faster response time of `.d.ts`, `.wasm` and other static files.\n- Remove `?deps` purge (close [#420](https://github.com/esm-dev/esm.sh/issues/420))\n- Remove `?export` query of sub build task\n- Upgrade `deno/std` to **0.165.0**.\n\n## v98\n\n- Add **tree-shaking** support for es modules\n  ```js\n  import { __await, __rest } from \"https://esm.sh/tslib\" // 7.3KB\n  import { __await, __rest } from \"https://esm.sh/tslib?exports=__await,__rest\" // 489B\n  ```\n- Add `node-fetch` polyfill for browsers and deno\n- Restart `ns` process when got \"unreachable\" error (close [#448](https://github.com/esm-dev/esm.sh/issues/448))\n- Fix `exports` resolver (close [#422](https://github.com/esm-dev/esm.sh/issues/422))\n- **cjs-lexer**: Update `swc` to latest\n\n## v97\n\n- Add `https://esm.sh/build-target` endpoint to return the build `target` of current browser/runtime by checking `User-Agent` header.\n- Support `--npm-token` option to support private packages ([#435](https://github.com/esm-dev/esm.sh/issues/435)).\n- Update `polyfills/node_process`: replace timeout with `queueMicrotask` ([#444](https://github.com/esm-dev/esm.sh/issues/444)).\n- Upgrade `deno/std` to **0.162.0**.\n\n## v96\n\n- Update the fake node `fs` ployfill for browsers(add `createReadStream` and `createWriteStream` methods)\n- Check package name (close [#424](https://github.com/esm-dev/esm.sh/issues/424))\n- Fix some invalid types bulids\n- Upgrade esbuild to **0.15.9**\n\n## v95\n\n- Fix `web-streams-ponyfill` build (close [#417](https://github.com/esm-dev/esm.sh/issues/417))\n- Fix invalid `?deps` and `?alias` resolving\n- Fix `solid-js/web` build for Deno\n- Add `add react:preact/compat` pattern for the deno CLI\n\n## v94\n\n- Downgrade `deno/std` to **0.153.0**.\n\n## v93\n\n- Fix `@types/react` version (close [#331](https://github.com/esm-dev/esm.sh/issues/331))\n- Fix cjs `__esModule` resolving (close [#410](https://github.com/esm-dev/esm.sh/issues/410))\n- Fix `postcss-selector-parser` cjs exports (close [#411](https://github.com/esm-dev/esm.sh/issues/411))\n- Fix `solid-js/web` of `deno` target\n- Upgrade `deno/std` to **0.154.0**\n\n## v92\n\n- Add `stable` channel for UI libraries like react, to avoid multiple copies of runtime by cache\n  ```\n  https://esm.sh/v92/react@18.2.0/deno/react.js -> https://esm.sh/stable/react@18.2.0/deno/react.js\n  ```\n- Respect `external all` arg in types build\n- Upgrade `deno/std` to **0.152.0**\n\n## v91\n\n- Improved Deno CLI Script:\n  ```bash\n  deno run -A https://esm.sh/v91 init\n  ```\n  After initializing, you can use the `deno task npm:[add/update/remove]` commands to manage the npm packages in the import maps.\n  ```bash\n  deno task npm:add react react-dom # add packages\n  deno task npm:add react@17 react-dom@17 # add packages with specified version\n  deno task npm:update react react-dom # upgrade packages\n  deno task npm:update # update all packages\n  deno task npm:remove react react-dom # remove packages\n  ```\n- Respect `imports` of package.json (close [#400](https://github.com/esm-dev/esm.sh/issues/400))\n- Update `npmNaming` range (close [#401](https://github.com/esm-dev/esm.sh/issues/401))\n\n## v90\n\n- _Experimentally_ add Deno **CLI mode**, it will update the `import_map.json` file in the working directory:\n  ```bash\n  deno install -A -n esm -f https://esm.sh\n  esm add react react-dom # add packages\n  esm add react@17 react-dom@17 # add packages with specified version\n  esm upgrade react react-dom # upgrade packages\n  esm upgrade # upgrade all packages\n  esm remove react react-dom # remove packages\n  ```\n  > Ensure to point the `import_map.json` in your `deno run` command or the `deno.json` file.\n- Support `/v89/*some-package@version` external all pattern, do NOT use directly, use the CLI mode instead.\n- Redirect urls with `/@types/` to the `.d.ts` file instead of build\n- Improve node service stability\n- Fix cjs `__exportStar` not used (close [#389](https://github.com/esm-dev/esm.sh/issues/389))\n- Fix `resolve` package (close [#392](https://github.com/esm-dev/esm.sh/issues/392))\n- Add workaround for `prisma` build\n- Upgrade deno std to **0.151.0**\n\n## v89\n\n- support `?deno-std=$VER` to specify the [deno std](https://deno.land/std) version for deno node polyfills\n- fix missed `__esModule` export\n\n## v88\n\n- Respect `exports.development` conditions in `package.json` (close [#375](https://github.com/esm-dev/esm.sh/issues/375))\n- Fix `solid-js/web?target=deno` strip ssr functions\n- Fix `@types/node` types transforming (close [#363](https://github.com/esm-dev/esm.sh/issues/363))\n- Fix `?external` doesn't support `.dts` files (close [#374](h`ttps://github.com/esm-dev/esm.sh/issues/374))\n- Fix invalid export names of `keycode`, `vscode-oniguruma` & `lru_map` (close [#362](https://github.com/esm-dev/esm.sh/issues/362), [#369](https://github.com/esm-dev/esm.sh/issues/369))\n- Fix esm resolving before build (close [#377](https://github.com/esm-dev/esm.sh/issues/377))\n\n## v87\n\n- Support `?external` query, this will give you better user experience when you are using **import maps**.\n  ```jsonc\n  // import_map.json\n  {\n    \"imports\": {\n      \"preact\": \"https://esm.sh/preact@10.7.2\",\n      \"preact-render-to-string\": \"https://esm.sh/preact-render-to-string@5.2.0?external=preact\",\n    }\n  }\n  ```\n- Support `?no-dts` (equals to `?no-check`) query\n- Add the 'ignore-annotations' option for esbuild ([#349](https://github.com/esm-dev/esm.sh/issues/349))\n- Prevent submodules bundling their local dependencies ([#354](https://github.com/esm-dev/esm.sh/issues/354))\n- Don't panic in Opera\n\n## v86\n\n- Support `?keep-names` query for esbuild (close [#345](https://github.com/esm-dev/esm.sh/issues/345))\n\n## v85\n\n- Fix `fixAliasDeps` function that imports multiple React when using `?deps=react@18,react-dom@18`\n\n## v84\n\n- Fix types version resolving with `?deps` query(close [#338](https://github.com/esm-dev/esm.sh/issues/338))\n- Fix URL redirect with outdated build version prefix\n\n## v83\n\n- Replace `node-fetch` dep to `node-fetch-native` (close [#336](https://github.com/esm-dev/esm.sh/issues/336))\n- Add `--keep-names` option for esbuild by default (close [#335](https://github.com/esm-dev/esm.sh/issues/335))\n- Fix incorrect types with `?alias` query\n\n## v82\n\n- fix types with `?deps` query (close [#333](https://github.com/esm-dev/esm.sh/issues/333))\n\n## v81\n\n- fix `?deps` and `?alias` depth query\n\n## v80\n\n- Fix build error in v79\n\n## v79\n\n- Use `esm.sh` instead of `cdn.esm.sh`\n- User semver versioning for the `x-typescript-types` header\n- Fix aliasing dependencies doesn't affect typescript declaration (close [#102](https://github.com/esm-dev/esm.sh/issues/102))\n- Fix using arguments in arrow function [#322](https://github.com/esm-dev/esm.sh/pull/322)\n- Fix Deno check precluding esm.sh to start [#327](https://github.com/esm-dev/esm.sh/pull/327)\n\n## v78\n\n- Reduce database store structure\n- Fix missed `renderToReadableStream` export of `react/server` in deno\n- Fix `fetchPackageInfo` dead loop (close [#301](https://github.com/esm-dev/esm.sh/issues/301))\n- Upgrade esbuild to **0.14.36**\n\n## v77\n\n- Use the latest version of `deno/std/node` from `cdn.deno.land` automatically\n- Add `es2022` target\n- Upgrade esbuild to **0.14.34**\n\n## v76\n\n- Fix `?deps` mode\n\n## v75\n\n- Fix types build version ignore `?pin` (close [#292](https://github.com/esm-dev/esm.sh/issues/292))\n- Infect `?deps` and `?alias` to dependencies (close [#235](https://github.com/esm-dev/esm.sh/issues/235))\n- Bundle `?worker` by default\n- Upgrade semver to **v3** (close [#297](https://github.com/esm-dev/esm.sh/issues/297))\n- Upgrade esbuild to **0.14.31**\n- Upgrade deno std to **0.133.0** (close [#298](https://github.com/esm-dev/esm.sh/issues/298))\n\n## v74\n\n- Support `?no-require` flag, with this option you can ignore the `require(...)` call in ESM packages. To support logic like below:\n  ```ts\n  // index.mjs\n\n  let depMod;\n  try {\n    depMod = await import(\"/path\")\n  } finally {\n    // `?no-require` will skip next line when resolving\n    depMod = require(\"/path\")\n  }\n  ```\n\n## v73\n\n- Fix types dependency path (close [#287](https://github.com/esm-dev/esm.sh/issues/287))\n\n## v72\n\n- Support `jsx-runtime` with query: `https://esm.sh/react?pin=v72/jsx-runtime` -> `https://esm.sh/react/jsx-runtime?pin=v72`\n- Support pure types package (close [#284](https://github.com/esm-dev/esm.sh/issues/284))\n\n## v71\n\n- Fix version resolving of dts transformer (close [#274](https://github.com/esm-dev/esm.sh/issues/274))\n\n## v70\n\n- Return `bare` code when `target` and `pin` provided to reduce requests\n  ```js\n  // https://esm.sh/react@17.0.2\n  export * from \"https://cdn.esm.sh/v69/react@17.0.2/es2021/react.js\";\n  ```\n  ```js\n  // https://esm.sh/react@17.0.2?target=es2020&pin=v70\n  {content just from https://cdn.esm.sh/v69/react@17.0.2/es2021/react.js}\n  ```\n- Rollback `parseCJSModuleExports` function to v68 (close [#277](https://github.com/esm-dev/esm.sh/issues/277), [#279](https://github.com/esm-dev/esm.sh/issues/279))\n- Fix `exports` resolving in package.json (close [#278](https://github.com/esm-dev/esm.sh/issues/278), [#280](https://github.com/esm-dev/esm.sh/issues/280))\n- Upgrade deno `std/node` to **0.130.0**\n\n## v69\n\n- Force the dependency version of react equals to react-dom's version\n  ```\n  before: react-dom@18-rc.2 -> react@18-rc.2-next.xxxx\n  now: react-dom@18-rc.2 -> react@18-rc.2\n  ```\n- Fix version check for prerelease (can't resolve `react` in `react-dom@rc`)\n- Improve cjs module transform (can handle more edge cases, for example react-18-rc defines non-esm for browsers and deno)\n\n## v68\n\n- Fix `bundle` mode (close [#271](https://github.com/esm-dev/esm.sh/issues/271))\n- Support `jsnext:main` in package.json (close [#272](https://github.com/esm-dev/esm.sh/issues/272))\n- Improve `cjs-esm-exports` to support `UMD` format\n  ```\n  // exports: ['foo']\n  const { exports } = parse('index.cjs', `\n    (function (global, factory) {\n      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n      typeof define === 'function' && define.amd ? define(['exports'], factory) :\n      (factory((global.MMDParser = global.MMDParser || {})));\n    }(this, function (exports) {\n      exports.foo = \"bar\";\n    }))\n  `);\n  ```\n- Upgrade deno node polyfill to **0.128.0**\n\n## v67\n\n- Force `react/jsx-dev-runtime` and `react-refresh` into **dev** mode\n- Replace `typeof window !== undefined` to `typeof document !== undefined` for `deno` target\n- Replace `object-assign` with `Object.assign`\n- Upgrade `esbuild` to **0.14.25**\n\n## v66\n\n- Improve `exports` resloving of `package.json` (close [#179](https://github.com/esm-dev/esm.sh/issues/179))\n\n## v65\n\n- **Feature**: Support `?path` query to specify the `submodule`, this is friendly for **import maps** with options (close [#260](https://github.com/esm-dev/esm.sh/issues/260))\n  ```jsonc\n  // import-map.json\n  {\n    imports: {\n      \"react-dom/\": \"https://esm.sh/react-dom?target=es2015&path=/\"\n    }\n  }\n  ```\n\t```ts\n\t// equals to https://esm.sh/react-dom/server?target=es2015\n\timport { renderToString } from \"react-dom/server\"\n\t```\n- Upgrade `deno.land/std/node` polyfill to **0.125.0**\n- Upgrade `esbuild` to **v0.14.18**\n- bugfixs for [#251](https://github.com/esm-dev/esm.sh/issues/251), [#256](https://github.com/esm-dev/esm.sh/issues/256), [#261](https://github.com/esm-dev/esm.sh/issues/261),[#262](https://github.com/esm-dev/esm.sh/issues/262)\n\n## v64\n\n- Fix Node.js `process` compatibility (close [#253](https://github.com/esm-dev/esm.sh/issues/253))\n- Upgrade `deno.land/std/node` polyfill to **0.122.0**\n\n## v63\n\n- Add fs polyfill(fake) for browsers (close [#250](https://github.com/esm-dev/esm.sh/issues/250))\n- Upgrade `deno.land/std/node` polyfill to **0.121.0**\n\n## v62\n\n- bugfixs for [#240](https://github.com/esm-dev/esm.sh/issues/240), [#242](https://github.com/esm-dev/esm.sh/issues/242), [#248](https://github.com/esm-dev/esm.sh/issues/248)\n\n\n## v61\n\n- Support **React new JSX transforms** in Deno(1.16+) (close [#225](https://github.com/esm-dev/esm.sh/issues/225))\n\n## v60\n\n- bugfixs for [#244](https://github.com/esm-dev/esm.sh/issues/244), [#245](https://github.com/esm-dev/esm.sh/issues/245), [#246](https://github.com/esm-dev/esm.sh/issues/246)\n\n## v59\n\n- improve `cjs-esm-exports` to support some edge cases:\n  ```js\n\tvar foo = exports.foo || (exports.foo = {});\n\t((bar) => { ... })(exports.bar || (exports.bar = {}));\n\t```\n- Fix `@types` verisoning:\n  - `marked` -> `@types/marked@4.0.1`\n  - `marked@2` -> `@types/marked@2.0.5`\n  - `marked?dep=@types/marked@4.0.0` -> `@types/marked@4.0.0`\n- Upgrade `deno.land/std/node` polyfill to **0.119.0**\n- Upgrade `esbuild` to **v0.14.8**\n\n## v58\n\n- Recover the stable queue\n- Filter invalid pathnames like `/wp-admin/login.php`\n- Fix `?pin` mode when build failed (close [#206](https://github.com/esm-dev/esm.sh/issues/206))\n\n## v57\n\n- Add `?pin` mode\n- Improve build stability\n- Fix `marked@4` import\n- Fix invalid types hangs forever (close [#201](https://github.com/esm-dev/esm.sh/issues/201))\n\n## v56\n- `cjs-esm-exports` supports tslib `__exportStar` (close [#197](https://github.com/esm-dev/esm.sh/issues/197))\n- Improve node `perf_hooks` polyfill\n- Fix redeclared process polyfill (close [#195](https://github.com/esm-dev/esm.sh/issues/195))\n- Fix `?worker` mode on deno ([#198](https://github.com/esm-dev/esm.sh/issues/198))\n- Add `he` to `cjs-esm-exports` require mode allow list (close [#200](https://github.com/esm-dev/esm.sh/issues/200))\n- Fix package css redirect link\n- Upgrade **esbuild** to v0.13.12\n\n## v55\n\n- Add playground to write esm app online, try it on https://esm.sh?playground\n- Add a better **cjs exports parser**: [cjs-esm-exports](https://www.npmjs.com/package/cjs-esm-exports)\n- Support web worker\n  ```js\n  import editorWorker from '/monaco-editor/esm/vs/editor/editor.worker?worker'\n\n\tconst worker = new editorWorker()\n\t```\n-\tAdd `queue` interface\n- Support **dataurl**, **.wasm** import\n- Import deno polyfills from https://deno.land/std@0.113.0/node\n- Fix package CSS\n\n## v54\n\n- Update deno polyfills from 0.106.0 to 0.110.0 ([#190](https://github.com/esm-dev/esm.sh/issues/190))\n- Add deno `module` polyfill ([#164](https://github.com/esm-dev/esm.sh/issues/164))\n- Fix (storage/fs_local) file path portability bug ([#158](https://github.com/esm-dev/esm.sh/issues/158))\n\n## v53\n\n- Add `Cache-Tag` header for CDN purge\n- Add **s3** storage support ([#153](https://github.com/esm-dev/esm.sh/issues/153))\n- Fix `require` replacement ([#154](https://github.com/esm-dev/esm.sh/issues/154))\n\n## v52\n\n- Fix types build ([#149](https://github.com/esm-dev/esm.sh/issues/149))\n- Use `stream` and `events` from deno std/node ([#136](https://github.com/esm-dev/esm.sh/issues/148)) @talentlessguy\n- Fix `localLRU` and allow for `memoryLRU` ([#148](https://github.com/esm-dev/esm.sh/issues/148)) @jimisaacs\n\n## v51\n\n- Fix build breaking change in v50 ([#131](https://github.com/esm-dev/esm.sh/issues/131)).\n- Add `localLRU` **FS** layer ([#126](https://github.com/esm-dev/esm.sh/issues/126))\n- Add a `Cache Interface` that is using to store temporary data like npm packages info.\n- Do not try to build `/favicon.ico` ([#132](https://github.com/esm-dev/esm.sh/issues/132))\n- Add lovely `pixi.js`, `three.js` and `@material-ui/core` testing by @jimisaacs ([#134](https://github.com/esm-dev/esm.sh/issues/134), [#139](https://github.com/esm-dev/esm.sh/issuGes/139)).\n\n## v50\n\n- Improve build performance to burn the server CPU cores! Before this, to build a module to ESM which has heavy deps maybe very slow since the single build task only uses one CPU core.\n- Rewrite the **dts transformer** to get better deno types compatibility and faster transpile speed.\n- Add Deno **testing CI** on Github.\n\n## v49\n\n- Improve the build process to fix an edge case reported in [#118](https://github.com/esm-dev/esm.sh/issues/118)\n\t```js\n\tconst Parser = require('htmlparser').Parser;\n\t```\n\tesm (v48) output:\n\t```js\n\timport htmlparser2 from '/v48/htmlparser2@5.0.0/es2021/htmlparser2.js'\n\tconst Parser = htmlparser2.Parser; // parser is undefined\n\t```\n\tthe expected output was fixed in v49:\n\t```js\n\timport { Parser as htmlparser2Parser } from '/v48/htmlparser2@5.0.0/es2021/htmlparser2.js'\n\tconst Parser = htmlparser2Parser; // parser is a class\n\t```\n- Add more polyfills for Deno, huge thanks to @talentlessguy ([#117](https://github.com/esm-dev/esm.sh/issues/117))\n  - path\n  - querystring\n  - url\n  - timers\n-\tBetter self-hosting options improved by @jimisaacs, super! ([#116](https://github.com/esm-dev/esm.sh/issues/116), [#119](https://github.com/esm-dev/esm.sh/issues/116), [#120](https://github.com/esm-dev/esm.sh/issues/120), [#122](https://github.com/esm-dev/esm.sh/issues/122))\n- Add **Unlimted(max 1PB) Storage** to store builds and cache via NFS on esm.sh back server behind Cloudflare\n\n## v48\n\n- Improve **cjs-lexer** service to handle the edge case is shown below:\n\t```js\n\tfunction debounce() {};\n\tdebounce.debounce = debounce;\n\tmodule.exports = debounce;\n\t```\n\tesm output:\n\t```js\n\texport { debounce } // this was missed\n\texport default debounce\n\t```\n- Ignore `?target` in Deno (fix [#109](https://github.com/esm-dev/esm.sh/issues/109))\n- Add **Storage Interface** to store data to anywhere (currently only support [postdb](https://github.com/postui/postdb) + local FS)\n\n## v47\n\n- Improve dts transformer to use cdn domain (fix [#104](https://github.com/esm-dev/esm.sh/issues/104))\n- Update polyfills (fix [#105](https://github.com/esm-dev/esm.sh/issues/105))\n\n## v46\n\n- Split modules based on exports defines (ref [#78](https://github.com/esm-dev/esm.sh/issues/78))\n- Add `cache-folder` config for `yarn add`\n- Improve `resolveVersion` to support format 4.x (fix [#93](https://github.com/esm-dev/esm.sh/issues/93))\n- Import initESM to support bare exports in package.json (fix [#97](https://github.com/esm-dev/esm.sh/issues/97))\n- Bundle mode should respect the extra external (fix [#98](https://github.com/esm-dev/esm.sh/issues/98))\n- Support node:path importing (fix [#100](https://github.com/esm-dev/esm.sh/issues/100))\n- Pass `?alias` and `?deps` to deps (fix [#101](https://github.com/esm-dev/esm.sh/issues/101))\n- Improve `cjs-lexer` sever (fix [#103](https://github.com/esm-dev/esm.sh/issues/103))\n- Upgrade **rex** to **1.4.1**\n- Upgrade **esbuild** to **0.12.24**\n\n## V45\n\n- Improve build performance\n- Filter `cjs-moudle-lexer` server invalid exports output\n- Improve `resolveVersion` function to support format like **4.x** (fix [#93](https://github.com/esm-dev/esm.sh/issues/93))\n- Improve **dts** transform (fix [#95](https://github.com/esm-dev/esm.sh/issues/95))\n\n## V44\n\n- Add `Alias` feature ([#89](https://github.com/esm-dev/esm.sh/issues/89))\n  ```javascript\n  import useSWR from 'https://esm.sh/swr?alias=react:preact/compat'\n  ```\n  in combination with `?deps`:\n  ```javascript\n  import useSWR from 'https://esm.sh/swr?alias=react:preact/compat&deps=preact@10.5.14'\n  ```\n  The origin idea was came from [@lucacasonato](https://github.com/lucacasonato).\n- Add `node` build target ([#84](https://github.com/esm-dev/esm.sh/issues/84))\n- Check `exports` field to get entry point in `package.json`\n- Run cjs-lexer as a server\n- Upgrade **esbuild** to **0.11.18** with `es2021` build target\n- Bugfixs for\n[#90](https://github.com/esm-dev/esm.sh/issues/90),\n[#85](https://github.com/esm-dev/esm.sh/issues/85),\n[#83](https://github.com/esm-dev/esm.sh/issues/83),\n[#77](https://github.com/esm-dev/esm.sh/issues/77),\n[#65](https://github.com/esm-dev/esm.sh/issues/65),\n[#48](https://github.com/esm-dev/esm.sh/issues/48),\n[#41](https://github.com/esm-dev/esm.sh/issues/41).\n\n## V43\n\n- Add `/status.json` api\n- Use previous build instead of waiting/404 (fix [#74](https://github.com/esm-dev/esm.sh/issues/74))\n- Fix deps query ([#71](https://github.com/esm-dev/esm.sh/issues/71))\n\n## V42\n\n- Add `__esModule` reserved word\n- Align require change for esbuild 0.12\n- Fix setImmediate polyfill args ([#75](https://github.com/esm-dev/esm.sh/issues/75))\n- Upgrade **esbuild** to **0.11.12**\n\n## V41\n\n- Add `timeout` (30 seconds) for new build request, or use previous build version instead if it exists\n- Fix `bundle` mode\n- Fix build dead loop\n- Upgrade **esbuild** to **0.11.12**\n\n## V40\n\n- Update polyfills for node builtin modules\n- Upgrade **esbuild** to **0.11.9**\n\n## V39\n\n- Imporve `parseCJSModuleExports` to support json module\n- Pass `NODE_ENV` to `parseCJSModuleExports`\n- Update node buffer polyfill\n- Upgrade postdb to **v0.6.2**\n\n## V38\n\n- Fix build for packages with `module` type ([#48](https://github.com/esm-dev/esm.sh/issues/48))\n- Improve `parseCJSModuleExports` function (use cjs-module-lexer and nodejs eval both to parse cjs exports, and ignore JSON module)\n- Pass `NODE_ENV` to `parseCJSModuleExports` function\n- Upgrade **esbuild** to **0.11.6**\n\n## V37\n\n- Add **bundle** mode\n- Fix module exports parsing\n\n## V36\n\n- Fix esm build for some edge cases\n- Add simple test (thanks @zhoukekestar)\n- Upgrade esbuild to 0.11.5\n\n## V35\n\n- Set build `target` by the `user-agent` of browser automaticlly\n\n## V34\n\n- Remove bundle mode **&middot; Breaking**\n- Add build queue instead of mutex lock\n- Use AST([cjs-module-lexer](https://github.com/guybedford/cjs-module-lexer)) to parse cjs exports\n- Add a testing page at https://esm.sh?test\n- Fix `__setImmediate$` is not defined\n- Support exports define in package.json\n- Support mjs extension\n- Improve NpmPackage resolve (**fix** [#41](https://github.com/esm-dev/esm.sh/issues/41))\n- Upgrade esbuild to **0.11.4**\n- Upgrade rex to **1.3.0**\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6044921875,
          "content": "# Contributing to esm.sh\n\nWelcome, and thank you for taking time in contributing to esm.sh project!\n\n## Development Setup\n\nYou will need [Golang](https://golang.org/)(1.22+) and [Deno](https://deno.land)(1.45+) installed on a macOS or Linux-based machine.\n\n1. Fork this repository to your own GitHub account.\n2. Clone the repository to your local device.\n3. Create a new branch (`git checkout -b BRANCH_NAME`).\n4. Change code then run tests\n5. Push your branch to GitHub after **all tests passed**.\n6. Make a [pull request](https://github.com/esm-dev/esm.sh/pulls).\n7. Merge to master branch by our maintainers.\n\n## Configration\n\nCreate a `config.json` file in the project root directory following the example below:\n\n```jsonc\n// config.json\n{\n  \"port\": 8080,\n  \"workDir\": \".esmd\",\n  \"npmRegistry\": \"https://registry.npmjs.org/\", // change to your own registry if needed\n  \"npmToken\": \"xxxxxx\", // remove this line if you don't have one\n}\n```\n\nMore server options please check [config.exmaple.jsonc](./config.example.jsonc).\n\n## Running the Server from Source Code\n\n```bash\ngo run -tags debug main.go\n# or\nmake dev\n```\n\nThen you can import `React` from \"http://localhost:8080/react\"\n\n## Running Integration Tests\n\nWe use [Deno](https://deno.land) to run all the integration testing cases. Make sure you have Deno installed on your computer.\n\n```bash\n# Run all tests\nmake test\n\n# Run a specific test\nmake test dir=react-18\n```\n\nTo add a new integration test case, copy the [test/_template](./test/_template) directory and rename it to your case name.\n\n```bash\ncp -r test/_template test/new_test\nnvim test/new_test/test.ts\nmake dir=new_test\n```\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.3173828125,
          "content": "# --- build server from source code\nFROM golang:1.23-alpine AS builder\n\nARG SERVER_VERSION=\"v136\"\n\nRUN apk update && apk add --no-cache git\nRUN git clone --branch $SERVER_VERSION --depth 1 https://github.com/esm-dev/esm.sh /tmp/esm.sh\n\nWORKDIR /tmp/esm.sh\nRUN go build -ldflags=\"-s -w -X 'github.com/esm-dev/esm.sh/server.VERSION=${SERVER_VERSION}'\" -o esmd main.go\n# ---\n\nFROM alpine:latest\n\n# install git (use to fetch repo tags from Github)\nRUN apk update && apk add --no-cache git\n\n# add user and working directory\nRUN addgroup -g 1000 esm && adduser -u 1000 -G esm -D esm && mkdir /esmd && chown -R esm:esm /esmd\n\n# copy esmd & deno build\nCOPY --from=builder /tmp/esm.sh/esmd /bin/esmd\nCOPY --from=denoland/deno:bin-2.1.4 --chown=esm:esm /deno /esmd/bin/deno\n\n# deno desn't provider musl build yet, the hack below makes the gnu build working in alpine\n# see https://github.com/denoland/deno_docker/blob/main/alpine.dockerfile\nCOPY --from=gcr.io/distroless/cc --chown=root:root --chmod=755 /lib/*-linux-gnu/* /usr/local/lib/\nCOPY --from=gcr.io/distroless/cc --chown=root:root --chmod=755 /lib/ld-linux-* /lib/\nRUN mkdir /lib64 && ln -s /usr/local/lib/ld-linux-* /lib64/\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\n\n# server configuration\nENV ESMPORT=\"8080\"\nENV ESMDIR=\"/esmd\"\n\n# switch to non-root user\nUSER esm\n\nEXPOSE 8080\nWORKDIR /esmd\nCMD [\"esmd\"]\n"
        },
        {
          "name": "HOSTING.md",
          "type": "blob",
          "size": 3.4326171875,
          "content": "# Self-Hosting\n\n[esm.sh](https://esm.sh) provides a global fast CDN publicly which is powered by [Cloudflare](https://cloudflare.com).\nYou can also host esm.sh service by yourself. To do this, please follow the instructions below.\n\n## Clone the Source Code\n\n```bash\ngit clone https://github.com/esm-dev/esm.sh\ncd esm.sh\n```\n\n## Configuration\n\nTo configure the server, create a `config.json` file then pass it to the server bootstrap command. For example:\n\n```jsonc\n// config.json\n{\n  \"port\": 8080,\n  \"npmRegistry\": \"https://registry.npmjs.org/\",\n  \"npmToken\": \"******\"\n}\n```\n\nYou can find all the server options in [config.example.jsonc](./config.example.jsonc).\n\n## Run the Server Locally\n\nYou will need [Go](https://golang.org/dl) 1.22+ to compile and run the server.\n\n```bash\ngo run main.go --config=config.json\n```\n\nThen you can import `React` from <http://localhost:8080/react>.\n\n## Deploy the Server to a Single Machine\n\nYou can deploy the server to a single machine with the [deploy.sh](./scripts/deploy.sh) script.\n\n```bash\n# first time deploy\n./scripts/deploy.sh --init\n# update the server\n./scripts/deploy.sh\n```\n\nRecommended hosting requirements:\n\n- Linux system (Debian/Ubuntu)\n- 4x CPU cores or more\n- 8GB RAM or more\n- 100GB disk space or more\n\n## Deploy with Docker\n\n[![Docker Image](https://img.shields.io/github/v/tag/esm-dev/esm.sh?label=Docker&display_name=tag&sort=semver&style=flat&colorA=232323&colorB=232323&logo=docker&logoColor=eeeeee)](https://github.com/esm-dev/esm.sh/pkgs/container/esm.sh)\n\nesm.sh provides a Docker image for fast deployment. You can pull the container image from <https://ghcr.io/esm-dev/esm.sh>.\n\n```bash\ndocker pull ghcr.io/esm-dev/esm.sh      # latest version\ndocker pull ghcr.io/esm-dev/esm.sh:v136 # specific version\n```\n\nRun the container:\n\n```bash\ndocker run -p 8080:8080 \\\n  -e NPM_REGISTRY=https://registry.npmjs.org/ \\\n  -e NPM_TOKEN=****** \\\n  -v MY_VOLUME:/esmd \\\n  ghcr.io/esm-dev/esm.sh:latest\n```\n\nAvailable environment variables:\n\n- `COMPRESS`: Compress http responses with gzip/brotli, default is `true`.\n- `CUSTOM_LANDING_PAGE_ORIGIN`: The custom landing page origin, default is empty.\n- `CUSTOM_LANDING_PAGE_ASSETS`: The custom landing page assets separated by comma(,), default is empty.\n- `CORS_ALLOW_ORIGINS`: The CORS allow origins separated by comma(,), default is allow all origins.\n- `LOG_LEVEL`: The log level, available values are [\"debug\", \"info\", \"warn\", \"error\"], default is \"info\".\n- `MINIFY`: Minify the built JS/CSS files, default is `true`.\n- `NPM_QUERY_CACHE_TTL`: The cache TTL for NPM query, default is 10 minutes.\n- `NPM_REGISTRY`: The global NPM registry, default is \"https://registry.npmjs.org/\".\n- `NPM_TOKEN`: The access token for the global NPM registry.\n- `NPM_USER`: The access user for the global NPM registry.\n- `NPM_PASSWORD`: The access password for the global NPM registry.\n- `SOURCEMAP`: Generate source map for built JS/CSS files, default is `true`.\n- `STORAGE_TYPE`: The storage type, available values are [\"fs\", \"s3\"], default is \"fs\".\n- `STORAGE_ENDPOINT`: The storage endpoint, default is \"~/.esmd/storage\".\n- `STORAGE_REGION`: The region for S3 storage.\n- `STORAGE_ACCESS_KEY_ID`: The access key for S3 storage.\n- `STORAGE_SECRET_ACCESS_KEY`: The secret key for S3 storage.\n\nYou can also create your own Dockerfile based on `ghcr.io/esm-dev/esm.sh`:\n\n```dockerfile\nFROM ghcr.io/esm-dev/esm.sh:latest\nADD --chown=esm:esm ./config.json /etc/esmd/config.json\nCMD [\"esmd\", \"--config\", \"/etc/esmd/config.json\"]\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0634765625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2020-2024 Je Xia <i@jex.me>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.20703125,
          "content": "dev/cli:\n\t@go run -tags debug cli/cmd/main.go serve cli/cmd/demo/${app}\n\ndev: config.json\n\t@rm -rf .esmd/storage\n\t@go run -tags debug main.go --config=config.json\n\n.PHONY: test\ntest:\n\t@./test/bootstrap.ts ${dir}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.8076171875,
          "content": "![esm.sh](./server/embed/images/banner.svg)\n\n<p align=\"left\">\n  <a href= \"https://github.com/esm-dev/esm.sh/pkgs/container/esm.sh\"><img src=\"https://img.shields.io/github/v/tag/esm-dev/esm.sh?label=Docker&display_name=tag&style=flat&colorA=232323&colorB=232323&logo=docker&logoColor=eeeeee\" alt=\"Docker\"></a>\n  <a href=\"https://discord.gg/XDbjMeb7pb\"><img src=\"https://img.shields.io/discord/1097820016893763684?style=flat&colorA=232323&colorB=232323&label=Discord&logo=&logoColor=eeeeee\" alt=\"Discord\"></a>\n  <a href=\"https://github.com/sponsors/esm-dev\"><img src=\"https://img.shields.io/github/sponsors/esm-dev?label=Sponsors&style=flat&colorA=232323&colorB=232323&logo=&logoColor=eeeeee\" alt=\"Sponsors\"></a>\n</p>\n\n# esm.sh\n\nA _no-build_ content delivery network(CDN) for modern web development.\n\n## How to Use\n\nesm.sh allows you to import [JavaScript modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) from http URLs, **no installation/build steps needed.**\n\n```js\nimport * as mod from \"https://esm.sh/PKG[@SEMVER][/PATH]\";\n```\n\nWith [import maps](https://github.com/WICG/import-maps), you can even use bare import specifiers intead of URLs:\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"react\": \"https://esm.sh/react@18.2.0\",\n      \"react-dom/\": \"https://esm.sh/react-dom@18.2.0/\"\n    }\n  }\n</script>\n<script type=\"module\">\n  import React from \"react\"; // → https://esm.sh/react@18.2.0\n  import { render } from \"react-dom/client\"; // → https://esm.sh/react-dom@18.2.0/client\n</script>\n```\n\n> More usages about import maps can be found in the [**Using Import Maps**](#using-import-maps) section.\n\n### Supported Registries\n\n- **[NPM](https://npmjs.com)**:\n  ```js\n  // Examples\n  import React from \"https://esm.sh/react\"; // latest\n  import React from \"https://esm.sh/react@17\"; // 17.0.2\n  import React from \"https://esm.sh/react@beta\"; // latest beta\n  import { renderToString } from \"https://esm.sh/react-dom/server\"; // sub-modules\n  ```\n- **[JSR](https://jsr.io)** (starts with `/jsr/`):\n  ```js\n  // Examples\n  import { encodeBase64 } from \"https://esm.sh/jsr/@std/encoding@1.0.0/base64\";\n  import { Hono } from \"https://esm.sh/jsr/@hono/hono@4\";\n  ```\n- **[GitHub](https://github.com)** (starts with `/gh/`):\n  ```js\n  // Examples\n  import tslib from \"https://esm.sh/gh/microsoft/tslib\"; // latest\n  import tslib from \"https://esm.sh/gh/microsoft/tslib@2.6.0\"; // the version '2.6.0' is a git tag\n  ```\n- **[pkg.pr.new](https://pkg.pr.new)** (starts with `/pr/` or `/pkg.pr.new/`):\n  ```js\n  // Examples\n  import { Bench } from \"https://esm.sh/pr/tinylibs/tinybench/tinybench@a832a55\";\n  import { Bench } from \"https://esm.sh/pr/tinybench@a832a55\"; // --compact\n  ```\n\n### Specifying Dependencies\n\nBy default, esm.sh rewrites import specifiers based on the package dependencies. To specify the version of these\ndependencies, you can add `?deps=PACKAGE@VERSION` to the import URL. To specify multiple dependencies, separate them with commas, like this: `?deps=react@17.0.2,react-dom@17.0.2`.\n\n```js\nimport React from \"https://esm.sh/react@17.0.2\";\nimport useSWR from \"https://esm.sh/swr?deps=react@17.0.2\";\n```\n\n### Aliasing Dependencies\n\nYou can also alias dependencies by adding `?alias=PACKAGE:ALIAS` to the import URL. This is useful when you want to use a different package for a dependency.\n\n```js\nimport useSWR from \"https://esm.sh/swr?alias=react:preact/compat\";\n```\n\nin combination with `?deps`:\n\n```js\nimport useSWR from \"https://esm.sh/swr?alias=react:preact/compat&deps=preact@10.5.14\";\n```\n\n### Bundling Strategy\n\nBy default, esm.sh bundles sub-modules of a package that are not shared by entry modules defined in the `exports` field of `package.json`.\n\nBundling sub-modules can reduce the number of network requests, improving performance. However, it may result in repeated bundling of shared modules. In extreme cases, this can break package side effects or alter the `import.meta.url` semantics. To prevent this, you can disable the default bundling behavior by adding `?bundle=false`:\n\n```js\nimport \"https://esm.sh/@pyscript/core?bundle=false\";\n```\n\nFor package authors, it is recommended to define the `exports` field in `package.json`. This specifies the entry modules of the package, allowing esm.sh to accurately analyze the dependency tree and bundle the modules without duplication.\n\n```jsonc\n{\n  \"name\": \"foo\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./index.js\",\n      \"require\": \"./index.cjs\",\n      \"types\": \"./index.d.ts\"\n    },\n    \"./submodule\": {\n      \"import\": \"./submodule.js\",\n      \"require\": \"./submodule.cjs\",\n      \"types\": \"./submodule.d.ts\"\n    }\n  }\n}\n```\n\nOr you can override the bundling strategy by adding the `esm.sh` field to your `package.json`:\n\n```jsonc\n{\n  \"name\": \"foo\",\n  \"esm.sh\": {\n    \"bundle\": false // disables the default bundling behavior\n  }\n}\n```\n\nYou can also use the `?bundle=all` query to bundle the module along with all its external dependencies (excluding those in `peerDependencies`) into a single JavaScript file.\n\n```js\nimport { Button } from \"https://esm.sh/antd?bundle=all\";\n```\n\n### Tree Shaking\n\nBy default, esm.sh exports a module with all its exported members. However, if you want to import only a specific set of\nmembers, you can specify them by adding a `?exports=foo,bar` query to the import statement.\n\n```js\nimport { __await, __rest } from \"https://esm.sh/tslib\"; // 7.3KB\nimport { __await, __rest } from \"https://esm.sh/tslib?exports=__await,__rest\"; // 489B\n```\n\nBy using this feature, you can take advantage of tree shaking with esbuild and achieve a smaller bundle size. **Note,\nthis feature doesn't work with CommonJS modules.**\n\n### Development Mode\n\n```js\nimport React from \"https://esm.sh/react?dev\";\n```\n\nWith the `?dev` option, esm.sh builds a module with `process.env.NODE_ENV` set to `\"development\"` or based on the\ncondition `development` in the `exports` field. This is useful for libraries that have different behavior in development\nand production. For example, React uses a different warning message in development mode.\n\n### ESBuild Options\n\nBy default, esm.sh checks the `User-Agent` header to determine the build target. You can also specify the `target` by\nadding `?target`, available targets are: **es2015** - **es2022**, **esnext**, **deno**, **denonext**, and **node**.\n\n```js\nimport React from \"https://esm.sh/react?target=esnext\";\n```\n\nOther supported options of esbuild:\n\n- [Conditions](https://esbuild.github.io/api/#conditions)\n  ```js\n  import foo from \"https://esm.sh/foo?conditions=custom1,custom2\";\n  ```\n- [Keep names](https://esbuild.github.io/api/#keep-names)\n  ```js\n  import foo from \"https://esm.sh/foo?keep-names\";\n  ```\n- [Ignore annotations](https://esbuild.github.io/api/#ignore-annotations)\n  ```js\n  import foo from \"https://esm.sh/foo?ignore-annotations\";\n  ```\n\n### CSS-In-JS\n\nesm.sh supports importing CSS files in JS directly:\n\n```html\n<link rel=\"stylesheet\" href=\"https://esm.sh/monaco-editor?css\">\n```\n\n> [!IMPORTANT]\n> This only works when the package **imports CSS files in JS** directly.\n\n### Web Worker\n\nesm.sh supports `?worker` query to load the module as a web worker:\n\n```js\nimport createWorker from \"https://esm.sh/monaco-editor/esm/vs/editor/editor.worker?worker\";\n\n// create a worker\nconst worker = createWorker();\n// rename the worker by adding the `name` option for debugging\nconst worker = createWorker({ name: \"editor.worker\" });\n// inject code into the worker\nconst worker = createWorker({ inject: \"self.onmessage = (e) => self.postMessage(e.data)\" });\n```\n\nYou can import any module as a worker from esm.sh with the `?worker` query. Plus, you can access the module's exports in the\n`inject` code. For example, uing the `xxhash-wasm` to hash strings in a worker:\n\n```js\nimport createWorker from \"https://esm.sh/xxhash-wasm@1.0.2?worker\";\n\n// variable '$module' is the imported 'xxhash-wasm' module\nconst inject = `\nconst { default: xxhash } = $module\nself.onmessage = async (e) => {\n  const hasher = await xxhash()\n  self.postMessage(hasher.h64ToString(e.data))\n}\n`;\nconst worker = createWorker({ inject });\nworker.onmessage = (e) => console.log(\"hash is\", e.data);\nworker.postMessage(\"The string that is being hashed\");\n```\n\n> [!IMPORTANT]\n> The `inject` parameter must be a valid JavaScript code, and it will be executed in the worker context.\n\n## Using Import Maps\n\n[**Import Maps**](https://github.com/WICG/import-maps) has been supported by most modern browsers and Deno natively.\nThis allows _**bare import specifiers**_, such as `import React from \"react\"`, to work.\n\nesm.sh introduces the `?external` for specifying external dependencies. By employing this query, esm.sh maintains the import specifier intact, leaving it to the browser/Deno to resolve based on the import map. For example:\n\n```html\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"preact\": \"https://esm.sh/preact@10.7.2\",\n    \"preact/\": \"https://esm.sh/preact@10.7.2/\",\n    \"preact-render-to-string\": \"https://esm.sh/preact-render-to-string@5.2.0?external=preact\"\n  }\n}\n</script>\n<script type=\"module\">\n  import { h } from \"preact\";\n  import { useState } from \"preact/hooks\";\n  import { render } from \"preact-render-to-string\";\n</script>\n```\n\nAlternatively, you can **mark all dependencies as external** by adding a `*` prefix before the package name:\n\n```json\n{\n  \"imports\": {\n    \"preact\": \"https://esm.sh/preact@10.7.2\",\n    \"preact-render-to-string\": \"https://esm.sh/*preact-render-to-string@5.2.0\",\n    \"swr\": \"https://esm.sh/*swr@1.3.0\",\n    \"react\": \"https://esm.sh/preact@10.7.2/compat\"\n  }\n}\n```\n\nImport maps supports [**trailing slash**](https://github.com/WICG/import-maps#packages-via-trailing-slashes) that can\nnot work with URL search params friendly. To fix this issue, esm.sh provides a special format for import URL that allows\nyou to use query params with trailing slash: change the query prefix `?` to `&` and put it after the package version.\n\n```json\n{\n  \"imports\": {\n    \"react-dom\": \"https://esm.sh/react-dom@18.2.0?dev\",\n    \"react-dom/\": \"https://esm.sh/react-dom@18.2.0&dev/\"\n  }\n}\n```\n\n## Escape Hatch: Raw Source Files\n\nIn rare cases, you may want to request JS source files from packages, as-is, without transformation into ES modules. To\ndo so, you need to add a `?raw` query to the request URL.\n\n```html\n<script src=\"https://esm.sh/p5/lib/p5.min.js?raw\"></script>\n```\n\n> [!TIP]\n> You may alternatively use `raw.esm.sh/<PATH>` as the origin, which is equivalent to `esm.sh/<PATH>?raw`,\n> that transitive references in the raw assets will also be raw requests.\n\n## Deno Compatibility\n\nesm.sh is a **Deno-friendly** CDN that resolves Node's built-in modules (such as **fs**, **os**, **net**, etc.), making\nit compatible with Deno.\n\n```js\nimport express from \"https://esm.sh/express\";\n\nconst app = express();\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World\");\n});\napp.listen(3000);\n```\n\nDeno supports type definitions for modules with a `types` field in their `package.json` file through the\n`X-TypeScript-Types` header. This makes it possible to have type checking and auto-completion when using those modules\nin Deno. ([link](https://deno.land/manual/typescript/types#using-x-typescript-types-header)).\n\n![Figure #1](./server/embed/images/fig-x-typescript-types.png)\n\nIn case the type definitions provided by the `X-TypeScript-Types` header is incorrect, you can disable it by adding the\n`?no-dts` query to the module import URL:\n\n```js\nimport unescape from \"https://esm.sh/lodash/unescape?no-dts\";\n```\n\nThis will prevent the `X-TypeScript-Types` header from being included in the network request, and you can manually\nspecify the types for the imported module.\n\n## Supporting Node.js/Bun\n\nesm.sh is not supported by Node.js/Bun currently.\n\n## Global CDN\n\n<img width=\"150\" align=\"right\" src=\"./server/embed/images/cloudflare.svg\" />\n\nThe Global CDN of esm.sh is provided by [Cloudflare](https://cloudflare.com), one of the world's largest and fastest\ncloud network platforms.\n\n## Self-Hosting\n\nTo host esm.sh by yourself, check the [hosting](./HOSTING.md) documentation.\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.example.jsonc",
          "type": "blob",
          "size": 4.14453125,
          "content": "{\n  // The port to listen server on for HTTP requests, default is 80.\n  \"port\": 80,\n\n  // The port to listen server on for HTTPs requests, default is 0 (disabled). Change to 443 if you want to enable it.\n  // You don't need to provide a certificate, the server uses ACME protocol to get a free certificate from Let's Encrypt.\n  // Note: if you are running the server in a docker container, you need to expose port `443:443`.\n  \"tlsPort\": 0,\n\n  // Allowed CORS origins, default is allow all origins.\n  // Note: A valid origin must be a valid URL, including the protocol, domain, and port. e.g. \"https://example.com\".\n  \"corsAllowOrigins\": [],\n\n  // Maximum number of concurrent build process, default equals to the number of CPU cores.\n  \"buildConcurrency\": 0,\n\n  // The wait time for incoming requests to wait for the build process to finish, default is 30 seconds.\n  \"buildWaitTime\": 30,\n\n  // Compress http response body with gzip/brotli, default is true.\n  \"compress\": true,\n\n  // Minify built js/css files, default is true,\n  \"minify\": true,\n\n  // Generate source map for built js/css files, default is true.\n  \"sourceMap\": true,\n\n  // The storage option.\n  // Examples:\n  // - Use local file system as the storage:\n  //   \"storage\": {\n  //     \"type\": \"fs\",\n  //     \"endpoint\": \"/path/to/storage\"\n  //   }\n  // - Use S3-compatible storage:\n  //   \"storage\": {\n  //     \"type\": \"s3\",\n  //     \"endpoint\": \"https://bucket.s3.amazonaws.com\",\n  //     \"region\": \"us-west-1\",\n  //     \"accessKeyID\": \"***\",\n  //     \"secretAccessKey\": \"***\"\n  //   }\n  \"storage\": {\n    // storage type, supported types are [\"fs\", \"s3\"], default is \"fs\".\n    \"type\": \"fs\",\n    // storage endpoint, default is \"~/.esmd/storage\".\n    \"endpoint\": \"~/.esmd/storage\",\n    // storage region for s3.\n    \"region\": \"\",\n    // storage access key id for s3.\n    \"accessKeyID\": \"\",\n    // storage secret access key for s3.\n    \"secretAccessKey\": \"\"\n  },\n\n  // Cache package raw files in the storage, default is false.\n  // The server cleans up npm store periodically, to avoid unnecessary installation when accessing\n  // package raw files, you can enable this option to cache package raw files in the storage.\n  // Note: this option will increase the storage usage, we recommend to enable it if you are using\n  // a S3-compatible storage.\n  \"cacheRawFile\": false,\n\n  // The custom landing page options, default is empty.\n  // The server will proxy the `/` request to the `origin` server if it's provided.\n  // If your custom landing page has own assets, you also need to provide those asset paths in the `assets` field.\n  \"customLandingPage\":  {\n    \"origin\": \"https://example.com\",\n    \"assets\": [\n      \"/favicon.ico\",\n      \"/assets/app.js\",\n      \"/assets/app.css\"\n    ]\n  },\n\n  // The work directory for the build system, default is \"~/.esmd\".\n  \"workDir\": \"~/.esmd\",\n\n  // The log directory, default is \"~/.esmd/log\".\n  \"logDir\": \"~/.esmd/log\",\n\n  // The log level, available values are [\"debug\", \"info\", \"warn\", \"error\"], default is \"info\".\n  \"logLevel\": \"info\",\n\n  // The cache TTL for npm packages query, default is 600 seconds (10 minutes).\n  \"npmQueryCacheTTL\": 600,\n\n  // The global npm registry, default is \"https://registry.npmjs.org/\".\n  \"npmRegistry\": \"https://registry.npmjs.org/\",\n\n  // The npm access token for the global npm registry, default is empty.\n  \"npmToken\": \"\",\n\n  // These two fields are used for basic authentication towards the global npm registry,\n  // default for both is empty.\n  \"npmUser\": \"\",\n  \"npmPassword\": \"\",\n\n  // Registries for scoped packages. This will ensure packages with these scopes get downloaded\n  // from specific registry, default is empty.\n  \"npmScopedRegistries\": {\n    \"@scope_name\": {\n      \"registry\": \"https://your-registry.com/\",\n      \"token\": \"\",\n      \"user\": \"\",\n      \"password\": \"\"\n    }\n  },\n\n  // The list to only allow some packages or scopes, default allow all.\n  \"allowList\": {\n    \"packages\": [\"@scope_name/package_name\"],\n    \"scopes\": [{\n      \"name\": \"@scope_name\"\n    }]\n  },\n\n  // The list to ban some packages or scopes, default no ban.\n  \"banList\": {\n    \"packages\": [\"@scope_name/package_name\"],\n    \"scopes\": [{\n      \"name\": \"@scope_name\",\n      \"excludes\": [\"package_name\"]\n    }]\n  }\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.6650390625,
          "content": "module github.com/esm-dev/esm.sh\n\ngo 1.22\n\nrequire (\n\tgithub.com/Masterminds/semver/v3 v3.3.1\n\tgithub.com/evanw/esbuild v0.24.2\n\tgithub.com/gorilla/websocket v1.5.3\n\tgithub.com/ije/esbuild-internal v0.24.2\n\tgithub.com/ije/gox v0.9.7\n\tgithub.com/ije/rex v1.14.5\n\tgithub.com/mssola/useragent v1.0.0\n\tgithub.com/yuin/goldmark v1.7.8\n\tgithub.com/yuin/goldmark-meta v1.1.0\n\tgolang.org/x/net v0.33.0\n\tgolang.org/x/term v0.27.0\n)\n\nrequire (\n\tgithub.com/andybalholm/brotli v1.1.1 // indirect\n\tgithub.com/rs/cors v1.11.1 // indirect\n\tgolang.org/x/crypto v0.31.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.21875,
          "content": "github.com/Masterminds/semver/v3 v3.3.1 h1:QtNSWtVZ3nBfk8mAOu/B6v7FMJ+NHTIgUPi7rj+4nv4=\ngithub.com/Masterminds/semver/v3 v3.3.1/go.mod h1:4V+yj/TJE1HU9XfppCwVMZq3I84lprf4nC11bSS5beM=\ngithub.com/andybalholm/brotli v1.1.1 h1:PR2pgnyFznKEugtsUo0xLdDop5SKXd5Qf5ysW+7XdTA=\ngithub.com/andybalholm/brotli v1.1.1/go.mod h1:05ib4cKhjx3OQYUY22hTVd34Bc8upXjOLL2rKwwZBoA=\ngithub.com/evanw/esbuild v0.24.2 h1:PQExybVBrjHjN6/JJiShRGIXh1hWVm6NepVnhZhrt0A=\ngithub.com/evanw/esbuild v0.24.2/go.mod h1:D2vIQZqV/vIf/VRHtViaUtViZmG7o+kKmlBfVQuRi48=\ngithub.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=\ngithub.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/ije/esbuild-internal v0.24.2 h1:i1sjIu6suFZ1Arc4w0gWNE8OLLiAhEQ3nhU987uB+5w=\ngithub.com/ije/esbuild-internal v0.24.2/go.mod h1:s7HvKZ4ZGifyzvgWpSwnJOQTr6b+bsgfNBZ8HAEwwSM=\ngithub.com/ije/gox v0.9.7 h1:KfEiWOvk/ZqhJnTxJCWMB8mkBLi3HYhGJrrxQyua204=\ngithub.com/ije/gox v0.9.7/go.mod h1:3GTaK8WXf6oxRbrViLqKNLTNcMR871Dz0zoujFNmG48=\ngithub.com/ije/rex v1.14.5 h1:Db6lqRJOMxqeiSs4cixa8AkIqkldhMg0mO+qdHmrOUE=\ngithub.com/ije/rex v1.14.5/go.mod h1:+ZeiG36LreDX5XrIl4i4feyvjr5kzMcHCO/a6LIoS48=\ngithub.com/mssola/useragent v1.0.0 h1:WRlDpXyxHDNfvZaPEut5Biveq86Ze4o4EMffyMxmH5o=\ngithub.com/mssola/useragent v1.0.0/go.mod h1:hz9Cqz4RXusgg1EdI4Al0INR62kP7aPSRNHnpU+b85Y=\ngithub.com/rs/cors v1.11.1 h1:eU3gRzXLRK57F5rKMGMZURNdIG4EoAmX8k94r9wXWHA=\ngithub.com/rs/cors v1.11.1/go.mod h1:XyqrcTp5zjWr1wsJ8PIRZssZ8b/WMcMf71DJnit4EMU=\ngithub.com/xyproto/randomstring v1.0.5 h1:YtlWPoRdgMu3NZtP45drfy1GKoojuR7hmRcnhZqKjWU=\ngithub.com/xyproto/randomstring v1.0.5/go.mod h1:rgmS5DeNXLivK7YprL0pY+lTuhNQW3iGxZ18UQApw/E=\ngithub.com/yuin/goldmark v1.7.8 h1:iERMLn0/QJeHFhxSt3p6PeN9mGnvIKSpG9YYorDMnic=\ngithub.com/yuin/goldmark v1.7.8/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=\ngithub.com/yuin/goldmark-meta v1.1.0 h1:pWw+JLHGZe8Rk0EGsMVssiNb/AaPMHfSRszZeUeiOUc=\ngithub.com/yuin/goldmark-meta v1.1.0/go.mod h1:U4spWENafuA7Zyg+Lj5RqK/MF+ovMYtBvXi1lBb2VP0=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.091796875,
          "content": "package main\n\nimport (\n\t\"github.com/esm-dev/esm.sh/server\"\n)\n\nfunc main() {\n\tserver.Serve()\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}