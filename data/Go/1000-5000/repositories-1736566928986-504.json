{
  "metadata": {
    "timestamp": 1736566928986,
    "page": 504,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "go-gota/gota",
      "stars": 3098,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05859375,
          "content": "# IntelliJ\n.idea/\n*.iml\n\n# vscode\n.vscode/\n*.code-workspace\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.318359375,
          "content": "language: go\ngo: master\nbefore_script:\n  - echo 'Checking code quality issues.'\n  - go vet ./...\n  - echo 'Checking that gofmt was used.'\n  - diff -u <(echo -n) <(gofmt -d .)\n  - echo 'Checking tidiness of go mod.'\n  - go mod tidy\n  - test -z \"$(git status --porcelain)\"\nscript:\n  - echo 'Running tests.'\n  - go test -v ./...\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.4033203125,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](http://semver.org/).\nThis document follows\n[markdownlint](https://github.com/markdownlint/markdownlint) formatting rules.\n\n## [0.12.0] - 2021-10-10\n\n### Added in 0.12.0\n\n- Add dataframe.GetGroups (@arjunmahishi)\n- Add Series.Slice (@jfussion)\n- Add csv lazy quote (@fredericlemoine)\n\n### Changed in 0.12.0\n\n- series.Err is deprecated; use Error() instead\n- dataframe.Err is deprecated; use Error() instead\n\n### Fixed in 0.12.0\n\n- Fix dataframe.GroupBy issue (@prliu)\n- making series Order stable (@mcolosimo-p4)\n\n## [0.11.0] - 2021-06-27\n\n### Added in 0.11.0\n\n- Rolling window Mean and StdDev\n- GroupBy and Aggregate\n- Numeric column index\n- Read HTML tables\n- extra checks for TravisCI\n- Combining filters with AND\n- User-defined filters\n- Concatination of Dataframes\n\n### Changed in 0.11.0\n\n- Make fixColnames faster\n- Use Go 1.16\n- Update dependencies\n\n### Fixed in 0.11.0\n\n- Linter issues\n- Failing tests\n\n## [0.10.1] - 2019-11-08\n\n### Fixed in 0.10.1\n\n- LoadRecords printing type debug information\n- Missing closing brackets in series.go\n- Fix gonum import path in dataframe_test\n\n## [0.10.0] - 2019-11-08\n\n### Changed in 0.10.0\n\n- Merged dev branch changes from multiple collaborators (Sam Zaydel, Kyle\n  Ellrott, Daniela Petruzalek, Christoph Laaber).\n\n## [0.9.0] - 2016-10-03\n\n### Added in 0.9.0\n\n- Additional method to load arbitrary struct slices to DataFrames (Juan Álvarez)\n- New LoadOption Names to set initial column names (Sander van Harmelen).\n- Parser option for csv delimiter (Kyle Ellrott)\n- New Describe method for reporting summary statistics (Daniela Petruzalek)\n\n### Changed in 0.9.0\n\n- Improve the performance of multiple operations.\n- Code cleanup for better consistency (Sander van Harmelen)\n- Renamed 'Deselect' function to 'Drop' (Ben Marshall)\n\n## [0.8.0] - 2016-12-12\n\n### Added in 0.8.0\n\n- Series.Order method and tests.\n- Series.IsNaN method and tests.\n- DataFrame.Arrange method and tests.\n- DataFrame.Capply method and tests.\n- DataFrame.Rapply method and tests.\n- Benchmarks for several operations on both the `series` and\n  `dataframe` packages.\n- Many optimizations that increase the performance dramatically.\n- New LoadOption where the elements to be parsed as NaN from string\n  can be selected.\n- Gota can now return an implementation of `gonum/mat64.Matrix`\n  interface via `DataFrame.Matrix()` and load a `mat64.Matrix` via\n  `dataframe.LoadMatrix()`.\n\n### Changed in 0.8.0\n\n- elementInterface is now exported as Element.\n- Split element.go into separate files for the implementations of the\n  Element interface.\n- LoadOptions API has been renamed for better documentation via `godoc`.\n- `Series.Set` and `DataFrame.Set` now modify the structure in place\n  for performance considerations. If one wants to use the old\n  behaviour, it is suggested to use `DataFrame.Copy().Set(...)`\n  instead of `DataFrame.Set(...)`.\n- `DataFrame.Dim` has been changed to `DataFrame.Dims` for consistency\n  with the `mat64.Matrix` interface.\n- When printing a large `DataFrame` now the behaviour of the stringer\n  interface is much nicer, showing only the first 10 rows and limiting\n  the number of characters that can be shown by line\n\n### Removed in 0.8.0\n\n- Some unused functions from the helpers.go file.\n\n### Fix in 0.8.0\n\n- Linter errors.\n- stringElement.Float now returns NaN instead of 0 when applicable.\n- Autorenaming column names when `hasHeaders == false` now is\n  consistent with the autorename used with `dataframe.New`\n- Bug where duplicated column names were not been assigned consecutive\n  suffix numbers if the number of duplicates was greater than two.\n\n## [0.7.0] - 2016-11-27\n\n### Added in 0.7.0\n\n- Many more table tests for both `series` and `dataframe`\n- Set method for `Series` and `DataFrame`\n- When loading data from CSV, JSON, or Records, different\n  `LoadOptions` can now be configured. This includes assigning\n  a default type, manually specifying the column types and others.\n- More documentation for previously undocumented functions.\n\n### Changed in 0.7.0\n\n- The project has been restructured on separated `dataframe` and\n  `series` packages.\n- Reviewed entire `Series` codebase for better style and\n  maintainability.\n- `DataFrame.Select` now accepts several types of indexes\n- Error messages are now more consistent.\n- The standard way of checking for errors on both `series` and\n  `dataframe` is to check the `Err` field on each structure.\n- `ReadCSV`/`ReadJSON` and `WriteCSV`/`WriteJSON` now accept\n  `io.Reader` and `io.Writer` respectively.\n- Updated README with the new changes.\n\n### Removed in 0.7.0\n\n- Removed unnecessary abstraction layer on `Series.elements`\n\n## [0.6.0] - 2016-10-29\n\n### Added in 0.6.0\n\n- InnerJoin, CrossJoin, RightJoin, LeftJoin, OuterJoin functions\n\n### Changed in 0.6.0\n\n- More code refactoring for easier maintenance and management\n- Add more documentation to the exported functions\n- Remove unnecessary methods and structures from the exported API\n\n### Removed in 0.6.0\n\n- colnames and coltypes from the DataFrame structure\n\n## [0.5.0] - 2016-08-09\n\n### Added in 0.5.0\n\n- Read and write DataFrames from CSV, JSON, []map[string]interface{},\n  [][]string.\n- New constructor for DataFrame accept Series and NamedSeries as\n  arguments.\n- Subset, Select, Rename, Mutate, Filter, RBind and CBind methods\n- Much Better error handling\n\n### Changed in 0.5.0\n\n- Almost complete rewrite of DataFrame code.\n- Now using Series as first class citizens and building blocks for\n  DataFrames.\n\n### Removed in 0.5.0\n\n- Merge/Join functions have been temporarily removed to be adapted to\n  the new architecture.\n- Cell interface for allowing custom types into the system.\n\n## [0.4.0] - 2016-02-18\n\n### Added in 0.4.0\n\n- Getter methods for nrows and ncols.\n- An InnerJoin function that performs an Inner Merge/Join of two\n  DataFrames by the given keys.\n- An RightJoin and LeftJoin functions that performs outer right/outer\n  left joins of two DataFrames by the given keys.\n- A CrossJoin function that performs an Cross Merge/Join of two\n  DataFrames.\n- Cell interface now have to implement the NA() method that will\n  return a empty cell for the given type.\n- Cell interface now have to implement a Copy method.\n\n### Changed in 0.4.0\n\n- The `cell` interface is now exported: `Cell`.\n- Cell method NA() is now IsNA().\n- The function parseColumn is now a method.\n- A number of fields and methods are now expoted.\n\n### Fixed in 0.4.0\n\n- Now ensuring that generated subsets are in fact new copies entirely,\n  not copying pointers to the same memory address.\n\n## [0.3.0] - 2016-02-18\n\n### Added in 0.3.0\n\n- Getter and setter methods for the column names of a DataFrame\n- Bool column type has been made available\n- New Bool() interface\n- A `column` now can now if any of it's elements is NA and a list of\n  said NA elements ([]bool).\n\n### Changed in 0.3.0\n\n- Renamed `cell` interface elements to be more idiomatic:\n  - ToInteger() is now Int()\n  - ToFloat() is now Float()\n- The `cell` interface has changed. Int() and Float() now\n  return pointers instead of values to prevent future conflicts when\n  returning an error.\n- The `cell` interface has changed. Checksum() [16]byte added.\n- Using cell.Checksum() for identification of unique elements instead\n  of raw strings.\n- The `cell` interface has changed, now also requires ToBool() method.\n- String type now does not contain a string, but a pointer to a string.\n\n### Fixed in 0.3.0\n\n- Bool type constructor function Bools now parses `bool` and `[]bool`\n  elements correctly.\n- Int type constructor function Ints now parses `bool` and `[]bool`\n  elements correctly.\n- Float type constructor function Floats now parses `bool` and `[]bool`\n  elements correctly.\n- String type constructor function Strings now parses `bool` and `[]bool`\n  elements correctly.\n\n## [0.2.1] - 2016-02-14\n\n### Fixed in 0.2.1\n\n- Fixed a bug when the maximum number of characters on a column was\n  not being updated properly when subsetting.\n\n## [0.2.0] - 2016-02-13\n\n### Added in 0.2.0\n\n- Added a lot of unit tests\n\n### Changed in 0.2.0\n\n- The base types are now `df.String`, `df.Int`, and `df.Float`.\n- Restructured the project in different files.\n- Refactored the project so that it will allow columns to be of any\n  type as long as it complies with the necessary interfaces.\n\n## [0.1.0] - 2016-02-06\n\n### Added in 0.1.0\n\n- Load csv data to DataFrame.\n- Parse data to four supported types: `int`, `float64`, `date`\n  & `string`.\n- Row/Column subsetting (Indexing, column names, row numbers, range).\n- Unique/Duplicated row subsetting.\n- DataFrame combinations by rows and columns (cbind/rbind).\n\n[0.1.0]:https://github.com/go-gota/gota/compare/v0.1.0...v0.1.0\n[0.2.0]:https://github.com/go-gota/gota/compare/v0.1.0...v0.2.0\n[0.2.1]:https://github.com/go-gota/gota/compare/v0.2.0...v0.2.1\n[0.3.0]:https://github.com/go-gota/gota/compare/v0.2.1...v0.3.0\n[0.4.0]:https://github.com/go-gota/gota/compare/v0.3.0...v0.4.0\n[0.5.0]:https://github.com/go-gota/gota/compare/v0.4.0...v0.5.0\n[0.6.0]:https://github.com/go-gota/gota/compare/v0.5.0...v0.6.0\n[0.7.0]:https://github.com/go-gota/gota/compare/v0.6.0...v0.7.0\n[0.8.0]:https://github.com/go-gota/gota/compare/v0.7.0...v0.8.0\n[0.9.0]:https://github.com/go-gota/gota/compare/v0.8.0...v0.9.0\n[0.10.0]:https://github.com/go-gota/gota/compare/v0.9.0...v0.10.0\n[0.10.1]:https://github.com/go-gota/gota/compare/v0.10.0...v0.10.1\n[0.11.0]:https://github.com/go-gota/gota/compare/v0.10.1...v0.11.0\n[0.12.0]:https://github.com/go-gota/gota/compare/v0.11.0...v0.12.0\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 9.1494140625,
          "content": "Apache License\n==============\n\n_Version 2.0, January 2004_  \n_<http://www.apache.org/licenses/>_\n\n### Terms and Conditions for use, reproduction, and distribution\n\n#### 1. Definitions\n\n“License” shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\n“Licensor” shall mean the copyright owner or entity authorized by the\ncopyright owner that is granting the License.\n\n“Legal Entity” shall mean the union of the acting entity and all other\nentities that control, are controlled by, or are under common control\nwith that entity.  For the purposes of this definition, “control”\nmeans **(i)** the power, direct or indirect, to cause the direction or\nmanagement of such entity, whether by contract or otherwise, or\n**(ii)** ownership of fifty percent (50%) or more of the outstanding\nshares, or **(iii)** beneficial ownership of such entity.\n\n“You” (or “Your”) shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n“Source” form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\n“Object” form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but not\nlimited to compiled object code, generated documentation, and\nconversions to other media types.\n\n“Work” shall mean the work of authorship, whether in Source or Object\nform, made available under the License, as indicated by a copyright\nnotice that is included in or attached to the work (an example is\nprovided in the Appendix below).\n\n“Derivative Works” shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the\npurposes of this License, Derivative Works shall not include works\nthat remain separable from, or merely link (or bind by name) to the\ninterfaces of, the Work and Derivative Works thereof.\n\n“Contribution” shall mean any work of authorship, including the\noriginal version of the Work and any modifications or additions to\nthat Work or Derivative Works thereof, that is intentionally submitted\nto Licensor for inclusion in the Work by the copyright owner or by an\nindividual or Legal Entity authorized to submit on behalf of the\ncopyright owner. For the purposes of this definition, “submitted”\nmeans any form of electronic, verbal, or written communication sent to\nthe Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control\nsystems, and issue tracking systems that are managed by, or on behalf\nof, the Licensor for the purpose of discussing and improving the Work,\nbut excluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as “Not a Contribution.”\n\n“Contributor” shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\n#### 2. Grant of Copyright License\n\nSubject to the terms and conditions of this License, each Contributor\nhereby grants to You a perpetual, worldwide, non-exclusive, no-charge,\nroyalty-free, irrevocable copyright license to reproduce, prepare\nDerivative Works of, publicly display, publicly perform, sublicense,\nand distribute the Work and such Derivative Works in Source or Object\nform.\n\n#### 3. Grant of Patent License\n\nSubject to the terms and conditions of this License, each Contributor\nhereby grants to You a perpetual, worldwide, non-exclusive, no-charge,\nroyalty-free, irrevocable (except as stated in this section) patent\nlicense to make, have made, use, offer to sell, sell, import, and\notherwise transfer the Work, where such license applies only to those\npatent claims licensable by such Contributor that are necessarily\ninfringed by their Contribution(s) alone or by combination of their\nContribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nthe Work or a Contribution incorporated within the Work constitutes\ndirect or contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate as of\nthe date such litigation is filed.\n\n#### 4. Redistribution\n\nYou may reproduce and distribute copies of the Work or Derivative\nWorks thereof in any medium, with or without modifications, and in\nSource or Object form, provided that You meet the following\nconditions:\n\n* **(a)** You must give any other recipients of the Work or Derivative\n  Works a copy of this License; and\n* **(b)** You must cause any modified files to carry prominent notices\n  stating that You changed the files; and\n* **(c)** You must retain, in the Source form of any Derivative Works\n  that You distribute, all copyright, patent, trademark, and\n  attribution notices from the Source form of the Work, excluding\n  those notices that do not pertain to any part of the Derivative\n  Works; and\n* **(d)** If the Work includes a “NOTICE” text file as part of its\n  distribution, then any Derivative Works that You distribute must\n  include a readable copy of the attribution notices contained within\n  such NOTICE file, excluding those notices that do not pertain to any\n  part of the Derivative Works, in at least one of the following\n  places: within a NOTICE text file distributed as part of the\n  Derivative Works; within the Source form or documentation, if\n  provided along with the Derivative Works; or, within a display\n  generated by the Derivative Works, if and wherever such third-party\n  notices normally appear. The contents of the NOTICE file are for\n  informational purposes only and do not modify the License. You may\n  add Your own attribution notices within Derivative Works that You\n  distribute, alongside or as an addendum to the NOTICE text from the\n  Work, provided that such additional attribution notices cannot be\n  construed as modifying the License.\n\nYou may add Your own copyright statement to Your modifications and may\nprovide additional or different license terms and conditions for use,\nreproduction, or distribution of Your modifications, or for any such\nDerivative Works as a whole, provided Your use, reproduction, and\ndistribution of the Work otherwise complies with the conditions stated\nin this License.\n\n#### 5. Submission of Contributions\n\nUnless You explicitly state otherwise, any Contribution intentionally\nsubmitted for inclusion in the Work by You to the Licensor shall be\nunder the terms and conditions of this License, without any additional\nterms or conditions.  Notwithstanding the above, nothing herein shall\nsupersede or modify the terms of any separate license agreement you\nmay have executed with Licensor regarding such Contributions.\n\n#### 6. Trademarks\n\nThis License does not grant permission to use the trade names,\ntrademarks, service marks, or product names of the Licensor, except as\nrequired for reasonable and customary use in describing the origin of\nthe Work and reproducing the content of the NOTICE file.\n\n#### 7. Disclaimer of Warranty\n\nUnless required by applicable law or agreed to in writing, Licensor\nprovides the Work (and each Contributor provides its Contributions) on\nan “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\nexpress or implied, including, without limitation, any warranties or\nconditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR\nA PARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\n#### 8. Limitation of Liability\n\nIn no event and under no legal theory, whether in tort (including\nnegligence), contract, or otherwise, unless required by applicable law\n(such as deliberate and grossly negligent acts) or agreed to in\nwriting, shall any Contributor be liable to You for damages, including\nany direct, indirect, special, incidental, or consequential damages of\nany character arising as a result of this License or out of the use or\ninability to use the Work (including but not limited to damages for\nloss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such\nContributor has been advised of the possibility of such damages.\n\n#### 9. Accepting Warranty or Additional Liability\n\nWhile redistributing the Work or Derivative Works thereof, You may\nchoose to offer, and charge a fee for, acceptance of support,\nwarranty, indemnity, or other liability obligations and/or rights\nconsistent with this License. However, in accepting such obligations,\nYou may act only on Your own behalf and on Your sole responsibility,\nnot on behalf of any other Contributor, and only if You agree to\nindemnify, defend, and hold each Contributor harmless for any\nliability incurred by, or claims asserted against, such Contributor by\nreason of your accepting any such warranty or additional liability.\n\n_END OF TERMS AND CONDITIONS_\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.283203125,
          "content": "Gota: DataFrames, Series and Data Wrangling for Go\n==================================================\n\nMeet us on Slack: Slack: [gophers.slack.com](https://gophers.slack.com) #go-gota ([invite](https://gophersinvite.herokuapp.com/))\n\nThis is an implementation of DataFrames, Series and data wrangling\nmethods for the Go programming language. The API is still in flux so\n*use at your own risk*.\n\nDataFrame\n---------\n\nThe term DataFrame typically refers to a tabular dataset that can be\nviewed as a two dimensional table. Often the columns of this dataset\nrefers to a list of features, while the rows represent a number of\nmeasurements. As the data on the real world is not perfect, DataFrame\nsupports non measurements or NaN elements.\n\nCommon examples of DataFrames can be found on Excel sheets, CSV files\nor SQL database tables, but this data can come on a variety of other\nformats, like a collection of JSON objects or XML files.\n\nThe utility of DataFrames resides on the ability to subset them, merge\nthem, summarize the data for individual features or apply functions to\nentire rows or columns, all while keeping column type integrity.\n\n### Usage\n#### Loading data\n\nDataFrames can be constructed passing Series to the dataframe.New constructor\nfunction:\n\n```go\ndf := dataframe.New(\n\tseries.New([]string{\"b\", \"a\"}, series.String, \"COL.1\"),\n\tseries.New([]int{1, 2}, series.Int, \"COL.2\"),\n\tseries.New([]float64{3.0, 4.0}, series.Float, \"COL.3\"),\n)\n```\n\nYou can also load the data directly from other formats. \nThe base loading function takes some records in the\nform `[][]string` and returns a new DataFrame from there:\n\n```go\ndf := dataframe.LoadRecords(\n    [][]string{\n        []string{\"A\", \"B\", \"C\", \"D\"},\n        []string{\"a\", \"4\", \"5.1\", \"true\"},\n        []string{\"k\", \"5\", \"7.0\", \"true\"},\n        []string{\"k\", \"4\", \"6.0\", \"true\"},\n        []string{\"a\", \"2\", \"7.1\", \"false\"},\n    },\n)\n```\n\nNow you can also create DataFrames by loading an slice of arbitrary structs:\n\n```go\ntype User struct {\n\tName     string\n\tAge      int\n\tAccuracy float64\n    ignored  bool // ignored since unexported\n}\nusers := []User{\n\t{\"Aram\", 17, 0.2, true},\n\t{\"Juan\", 18, 0.8, true},\n\t{\"Ana\", 22, 0.5, true},\n}\ndf := dataframe.LoadStructs(users)\n```\n\nBy default, the column types will be auto detected but this can be\nconfigured. For example, if we wish the default type to be `Float` but\ncolumns `A` and `D` are `String` and `Bool` respectively:\n\n```go\ndf := dataframe.LoadRecords(\n    [][]string{\n        []string{\"A\", \"B\", \"C\", \"D\"},\n        []string{\"a\", \"4\", \"5.1\", \"true\"},\n        []string{\"k\", \"5\", \"7.0\", \"true\"},\n        []string{\"k\", \"4\", \"6.0\", \"true\"},\n        []string{\"a\", \"2\", \"7.1\", \"false\"},\n    },\n    dataframe.DetectTypes(false),\n    dataframe.DefaultType(series.Float),\n    dataframe.WithTypes(map[string]series.Type{\n        \"A\": series.String,\n        \"D\": series.Bool,\n    }),\n)\n```\n\nSimilarly, you can load the data stored on a `[]map[string]interface{}`:\n\n```go\ndf := dataframe.LoadMaps(\n    []map[string]interface{}{\n        map[string]interface{}{\n            \"A\": \"a\",\n            \"B\": 1,\n            \"C\": true,\n            \"D\": 0,\n        },\n        map[string]interface{}{\n            \"A\": \"b\",\n            \"B\": 2,\n            \"C\": true,\n            \"D\": 0.5,\n        },\n    },\n)\n```\n\nYou can also pass an `io.Reader` to the functions `ReadCSV`/`ReadJSON`\nand it will work as expected given that the data is correct:\n\n```go\ncsvStr := `\nCountry,Date,Age,Amount,Id\n\"United States\",2012-02-01,50,112.1,01234\n\"United States\",2012-02-01,32,321.31,54320\n\"United Kingdom\",2012-02-01,17,18.2,12345\n\"United States\",2012-02-01,32,321.31,54320\n\"United Kingdom\",2012-02-01,NA,18.2,12345\n\"United States\",2012-02-01,32,321.31,54320\n\"United States\",2012-02-01,32,321.31,54320\nSpain,2012-02-01,66,555.42,00241\n`\ndf := dataframe.ReadCSV(strings.NewReader(csvStr))\n```\n\n```go\njsonStr := `[{\"COL.2\":1,\"COL.3\":3},{\"COL.1\":5,\"COL.2\":2,\"COL.3\":2},{\"COL.1\":6,\"COL.2\":3,\"COL.3\":1}]`\ndf := dataframe.ReadJSON(strings.NewReader(jsonStr))\n```\n\n#### Subsetting\n\nWe can subset our DataFrames with the Subset method. For example if we\nwant the first and third rows we can do the following:\n\n```go\nsub := df.Subset([]int{0, 2})\n```\n\n#### Column selection\n\nIf instead of subsetting the rows we want to select specific columns,\nby an index or column name:\n\n```go\nsel1 := df.Select([]int{0, 2})\nsel2 := df.Select([]string{\"A\", \"C\"})\n```\n\n#### Updating values\n\nIn order to update the values of a DataFrame we can use the Set\nmethod:\n\n```go\ndf2 := df.Set(\n    []int{0, 2},\n    dataframe.LoadRecords(\n        [][]string{\n            []string{\"A\", \"B\", \"C\", \"D\"},\n            []string{\"b\", \"4\", \"6.0\", \"true\"},\n            []string{\"c\", \"3\", \"6.0\", \"false\"},\n        },\n    ),\n)\n```\n\n#### Filtering\n\nFor more complex row subsetting we can use the Filter method. For\nexample, if we want the rows where the column \"A\" is equal to \"a\" or\ncolumn \"B\" is greater than 4:\n\n```go\nfil := df.Filter(\n    dataframe.F{\"A\", series.Eq, \"a\"},\n    dataframe.F{\"B\", series.Greater, 4},\n)\n\nfilAlt := df.FilterAggregation(\n    dataframe.Or,\n    dataframe.F{\"A\", series.Eq, \"a\"},\n    dataframe.F{\"B\", series.Greater, 4},\n) \n```\n\nFilters inside Filter are combined as OR operations, alternatively we can use `df.FilterAggragation` with `dataframe.Or`.\n\nIf we want to combine filters with AND operations, we can use `df.FilterAggregation` with `dataframe.And`.\n\n```go\nfil := df.FilterAggregation(\n    dataframe.And, \n    dataframe.F{\"A\", series.Eq, \"a\"},\n    dataframe.F{\"D\", series.Eq, true},\n)\n```\n\nTo combine AND and OR operations, we can use chaining of filters.\n\n```go\n// combine filters with OR\nfil := df.Filter(\n    dataframe.F{\"A\", series.Eq, \"a\"},\n    dataframe.F{\"B\", series.Greater, 4},\n)\n// apply AND for fil and fil2\nfil2 := fil.Filter(\n    dataframe.F{\"D\", series.Eq, true},\n)\n```\n\nFiltering is based on predefined comparison operators: \n* `series.Eq`\n* `series.Neq`\n* `series.Greater`\n* `series.GreaterEq`\n* `series.Less`\n* `series.LessEq`\n* `series.In`\n\nHowever, if these filter operations are not sufficient, we can use user-defined comparators.\nWe use `series.CompFunc` and a user-defined function with the signature `func(series.Element) bool` to provide user-defined filters to `df.Filter` and `df.FilterAggregation`.\n\n```go\nhasPrefix := func(prefix string) func(el series.Element) bool {\n        return func (el series.Element) bool {\n            if el.Type() == String {\n                if val, ok := el.Val().(string); ok {\n                    return strings.HasPrefix(val, prefix)\n                }\n            }\n            return false\n        }\n    }\n\nfil := df.Filter(\n    dataframe.F{\"A\", series.CompFunc, hasPrefix(\"aa\")},\n)\n```\n\nThis example filters rows based on whether they have a cell value starting with `\"aa\"` in column `\"A\"`.\n\n#### GroupBy && Aggregation\n\nGroupBy && Aggregation\n\n```go\ngroups := df.GroupBy(\"key1\", \"key2\") // Group by column \"key1\", and column \"key2\" \naggre := groups.Aggregation([]AggregationType{Aggregation_MAX, Aggregation_MIN}, []string{\"values\", \"values2\"}) // Maximum value in column \"values\",  Minimum value in column \"values2\"\n```\n\n#### Arrange\n\nWith Arrange a DataFrame can be sorted by the given column names:\n\n```go\nsorted := df.Arrange(\n    dataframe.Sort(\"A\"),    // Sort in ascending order\n    dataframe.RevSort(\"B\"), // Sort in descending order\n)\n```\n\n#### Mutate\n\nIf we want to modify a column or add one based on a given Series at\nthe end we can use the Mutate method:\n\n```go\n// Change column C with a new one\nmut := df.Mutate(\n    series.New([]string{\"a\", \"b\", \"c\", \"d\"}, series.String, \"C\"),\n)\n// Add a new column E\nmut2 := df.Mutate(\n    series.New([]string{\"a\", \"b\", \"c\", \"d\"}, series.String, \"E\"),\n)\n```\n\n#### Joins\n\nDifferent Join operations are supported (`InnerJoin`, `LeftJoin`,\n`RightJoin`, `CrossJoin`). In order to use these methods you have to\nspecify which are the keys to be used for joining the DataFrames:\n\n```go\ndf := dataframe.LoadRecords(\n    [][]string{\n        []string{\"A\", \"B\", \"C\", \"D\"},\n        []string{\"a\", \"4\", \"5.1\", \"true\"},\n        []string{\"k\", \"5\", \"7.0\", \"true\"},\n        []string{\"k\", \"4\", \"6.0\", \"true\"},\n        []string{\"a\", \"2\", \"7.1\", \"false\"},\n    },\n)\ndf2 := dataframe.LoadRecords(\n    [][]string{\n        []string{\"A\", \"F\", \"D\"},\n        []string{\"1\", \"1\", \"true\"},\n        []string{\"4\", \"2\", \"false\"},\n        []string{\"2\", \"8\", \"false\"},\n        []string{\"5\", \"9\", \"false\"},\n    },\n)\njoin := df.InnerJoin(df2, \"D\")\n```\n\n#### Function application\n\nFunctions can be applied to the rows or columns of a DataFrame,\ncasting the types as necessary:\n\n```go\nmean := func(s series.Series) series.Series {\n    floats := s.Float()\n    sum := 0.0\n    for _, f := range floats {\n        sum += f\n    }\n    return series.Floats(sum / float64(len(floats)))\n}\ndf.Capply(mean)\ndf.Rapply(mean)\n```\n\n#### Chaining operations\n\nDataFrames support a number of methods for wrangling the data,\nfiltering, subsetting, selecting columns, adding new columns or\nmodifying existing ones. All these methods can be chained one after\nanother and at the end of the procedure check if there has been any\nerrors by the DataFrame Err field. If any of the methods in the chain\nreturns an error, the remaining operations on the chain will become\na no-op.\n\n```go\na = a.Rename(\"Origin\", \"Country\").\n    Filter(dataframe.F{\"Age\", \"<\", 50}).\n    Filter(dataframe.F{\"Origin\", \"==\", \"United States\"}).\n    Select(\"Id\", \"Origin\", \"Date\").\n    Subset([]int{1, 3})\nif a.Err != nil {\n    log.Fatal(\"Oh noes!\")\n}\n```\n\n#### Print to console\n\n```go\nfmt.Println(flights)\n\n> [336776x20] DataFrame\n> \n>     X0    year  month day   dep_time sched_dep_time dep_delay arr_time ...\n>  0: 1     2013  1     1     517      515            2         830      ...\n>  1: 2     2013  1     1     533      529            4         850      ...\n>  2: 3     2013  1     1     542      540            2         923      ...\n>  3: 4     2013  1     1     544      545            -1        1004     ...\n>  4: 5     2013  1     1     554      600            -6        812      ...\n>  5: 6     2013  1     1     554      558            -4        740      ...\n>  6: 7     2013  1     1     555      600            -5        913      ...\n>  7: 8     2013  1     1     557      600            -3        709      ...\n>  8: 9     2013  1     1     557      600            -3        838      ...\n>  9: 10    2013  1     1     558      600            -2        753      ...\n>     ...   ...   ...   ...   ...      ...            ...       ...      ...\n>     <int> <int> <int> <int> <int>    <int>          <int>     <int>    ...\n> \n> Not Showing: sched_arr_time <int>, arr_delay <int>, carrier <string>, flight <int>,\n> tailnum <string>, origin <string>, dest <string>, air_time <int>, distance <int>, hour <int>,\n> minute <int>, time_hour <string>\n```\n\n#### Interfacing with gonum\n\nA `gonum/mat.Matrix` or any object that implements the `dataframe.Matrix`\ninterface can be loaded as a `DataFrame` by using the `LoadMatrix()` method. If\none wants to convert a `DataFrame` to a `mat.Matrix` it is necessary to create\nthe necessary structs and method implementations. Since a `DataFrame` already\nimplements the `Dims() (r, c int)` method, only implementations for the `At` and\n`T` methods are necessary:\n\n```go\ntype matrix struct {\n\tdataframe.DataFrame\n}\n\nfunc (m matrix) At(i, j int) float64 {\n\treturn m.Elem(i, j).Float()\n}\n\nfunc (m matrix) T() mat.Matrix {\n\treturn mat.Transpose{m}\n}\n```\n\nSeries\n------\n\nSeries are essentially vectors of elements of the same type with\nsupport for missing values. Series are the building blocks for\nDataFrame columns.\n\nFour types are currently supported:\n\n```go\nInt\nFloat\nString\nBool\n```\n\nFor more information about the API, make sure to check:\n\n- [dataframe godoc][3]\n- [series godoc][4]\n\nLicense\n-------\nCopyright 2016 Alejandro Sanchez Brotons\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you\nmay not use this file except in compliance with the License.  You may\nobtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n\n[1]: https://github.com/gonum\n[2]: https://github.com/go-gota/gota\n[3]: https://godoc.org/github.com/go-gota/gota/dataframe\n[4]: https://godoc.org/github.com/go-gota/gota/series\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 0.458984375,
          "content": "# ROADMAP\n\n## [0.12.0]\n\n- more functionality of [Pandas](https://pandas.pydata.org/pandas-docs/stable/reference/index.html) (without copying the API)\n- more functional style of the API ([like Scala has](https://www.scala-lang.org/api/current/scala/collection/immutable/List.html))\n- deprecate API parts not fitting the functional style\n\n## [0.13.0]\n\n- maybe Go Generics are in place\n- see, how we can shift towards more typesavety (using interface{} everywhere is ugly)\n"
        },
        {
          "name": "dataframe",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.1298828125,
          "content": "module github.com/go-gota/gota\n\ngo 1.16\n\nrequire (\n\tgolang.org/x/net v0.0.0-20210423184538-5f58ad60dda6\n\tgonum.org/v1/gonum v0.9.1\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 7.1396484375,
          "content": "dmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=\ngioui.org v0.0.0-20210308172011-57750fc8a0a6/go.mod h1:RSH6KIUZ0p2xy5zHDxgAM4zumjgTw83q2ge/PI+yyw8=\ngithub.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=\ngithub.com/ajstarks/svgo v0.0.0-20180226025133-644b8db467af/go.mod h1:K08gAheRH3/J6wwsYMMT4xOr94bZjxIelGM0+d/wbFw=\ngithub.com/boombuler/barcode v1.0.0/go.mod h1:paBWMcWSl3LHKBqUq+rly7CNSldXjb2rDl3JlRe0mD8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fogleman/gg v1.2.1-0.20190220221249-0403632d5b90/go.mod h1:R/bRT+9gY/C5z7JzPU0zXsXHKM4/ayA+zqcVNZzPa1k=\ngithub.com/fogleman/gg v1.3.0/go.mod h1:R/bRT+9gY/C5z7JzPU0zXsXHKM4/ayA+zqcVNZzPa1k=\ngithub.com/go-fonts/dejavu v0.1.0/go.mod h1:4Wt4I4OU2Nq9asgDCteaAaWZOV24E+0/Pwo0gppep4g=\ngithub.com/go-fonts/latin-modern v0.2.0/go.mod h1:rQVLdDMK+mK1xscDwsqM5J8U2jrRa3T0ecnM9pNujks=\ngithub.com/go-fonts/liberation v0.1.1/go.mod h1:K6qoJYypsmfVjWg8KOVDQhLc8UDgIK2HYqyqAO9z7GY=\ngithub.com/go-fonts/stix v0.1.0/go.mod h1:w/c1f0ldAUlJmLBvlbkvVXLAD+tAMqobIIQpmnUIzUY=\ngithub.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=\ngithub.com/go-latex/latex v0.0.0-20210118124228-b3d85cf34e07/go.mod h1:CO1AlKB2CSIqUrmQPqA0gdRIlnLEY0gK5JGjh37zN5U=\ngithub.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0/go.mod h1:E/TSTwGwJL78qG/PmXZO1EjYhfJinVAhrmmHX6Z8B9k=\ngithub.com/jung-kurt/gofpdf v1.0.0/go.mod h1:7Id9E/uU8ce6rXgefFLlgrJj/GYY22cpxn+r32jIOes=\ngithub.com/jung-kurt/gofpdf v1.0.3-0.20190309125859-24315acbbda5/go.mod h1:7Id9E/uU8ce6rXgefFLlgrJj/GYY22cpxn+r32jIOes=\ngithub.com/phpdave11/gofpdf v1.4.2/go.mod h1:zpO6xFn9yxo3YLyMvW8HcKWVdbNqgIfOOp2dXMnm1mY=\ngithub.com/phpdave11/gofpdi v1.0.12/go.mod h1:vBmVV0Do6hSBHC8uKUQ71JGW+ZGQq74llk/7bXwjDoI=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/ruudk/golang-pdf417 v0.0.0-20181029194003-1af4ab5afa58/go.mod h1:6lfFZQK844Gfx8o5WFuvpxWRwnSoipWe/p622j1v06w=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/exp v0.0.0-20180321215751-8460e604b9de/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20180807140117-3d87b88a115f/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190125153040-c74c464bbbf2/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20191002040644-a1355ae1e2c3 h1:n9HxLrNxWWtEb1cA950nuEEj3QnKbtsCJ6KjcgisNUs=\ngolang.org/x/exp v0.0.0-20191002040644-a1355ae1e2c3/go.mod h1:NOZ3BPKG0ec/BKJQgnvsSFpcKLM5xXVWnvZS97DWHgE=\ngolang.org/x/image v0.0.0-20180708004352-c73c2afc3b81/go.mod h1:ux5Hcp/YLpHSI86hEcLt0YII63i6oz57MZXIpbrjZUs=\ngolang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=\ngolang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/image v0.0.0-20190910094157-69e4b8554b2a/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/image v0.0.0-20200119044424-58c23975cae1/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/image v0.0.0-20200430140353-33d19683fad8/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/image v0.0.0-20200618115811-c13761719519/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/image v0.0.0-20201208152932-35266b937fa6/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/image v0.0.0-20210216034530-4410531fe030/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=\ngolang.org/x/mod v0.1.0/go.mod h1:0QHyrYULN0/3qlju5TqG8bIK38QM8yzMo5ekMj3DlcY=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210423184538-5f58ad60dda6 h1:0PC75Fz/kyMGhL0e1QnypqK2kQMqKt9csD1GnMJR+Zk=\ngolang.org/x/net v0.0.0-20210423184538-5f58ad60dda6/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210304124612-50617c2ba197/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180525024113-a5b4c53f6e8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190206041539-40960b6deb8e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190927191325-030b2cf1153e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngonum.org/v1/gonum v0.0.0-20180816165407-929014505bf4/go.mod h1:Y+Yx5eoAFn32cQvJDxZx5Dpnq+c3wtXuadVZAcxbbBo=\ngonum.org/v1/gonum v0.8.2/go.mod h1:oe/vMfY3deqTw+1EZJhuvEW2iwGF1bW9wwu7XCu0+v0=\ngonum.org/v1/gonum v0.9.1 h1:HCWmqqNoELL0RAQeKBXWtkp04mGk8koafcB4He6+uhc=\ngonum.org/v1/gonum v0.9.1/go.mod h1:TZumC3NeyVQskjXqmyWt4S3bINhy7B4eYwW69EbyX+0=\ngonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0 h1:OE9mWmgKkjJyEmDAAtGMPjXu+YNeGvK9VTSHY6+Qihc=\ngonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0/go.mod h1:wa6Ws7BG/ESfp6dHfk7C6KdzKA7wR7u/rKwOGE66zvw=\ngonum.org/v1/plot v0.0.0-20190515093506-e2840ee46a6b/go.mod h1:Wt8AAjI+ypCyYX3nZBvf6cAIx93T+c/OS2HFAYskSZc=\ngonum.org/v1/plot v0.9.0/go.mod h1:3Pcqqmp6RHvJI72kgb8fThyUnav364FOsdDo2aGW5lY=\nrsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=\n"
        },
        {
          "name": "series",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}