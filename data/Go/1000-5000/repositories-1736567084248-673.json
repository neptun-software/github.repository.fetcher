{
  "metadata": {
    "timestamp": 1736567084248,
    "page": 673,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "guptarohit/asciigraph",
      "stars": 2712,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2197265625,
          "content": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# ide\n.idea\n\n# build dirs\n*dist*"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 2.275390625,
          "content": "# Build customization\nbuilds:\n  - env:\n      - CGO_ENABLED=0\n    main: ./cmd/asciigraph/main.go\n    ldflags: '-s -w'\n    # GOOS list to build in.\n    # For more info refer to https://golang.org/doc/install/source#environment\n    goos:\n      - linux\n      - darwin\n      - windows\n    # GOARCH to build in.\n    # For more info refer to https://golang.org/doc/install/source#environment\n    goarch:\n      - 386\n      - amd64\n      - arm\n      - arm64\n    ignore:\n      - goos: darwin\n        goarch: 386\nchecksum:\n  name_template: '{{ .ProjectName }}_{{ .Version }}_sha512-checksums.txt'\n  algorithm: sha512\n# Archive customization\narchives:\n  - id: tar\n    format: tar.gz\n    files:\n      - LICENSE\n      - README.md\n    name_template: >-\n      {{- .ProjectName }}_\n      {{- .Version }}_\n      {{- title .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end -}}\n    format_overrides:\n      - goos: windows\n        format: zip\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - '^docs:'\n      - '^test:'\nrelease:\n  github:\n    owner: guptarohit\n    name: asciigraph\n  # If set to true, will not auto-publish the release.\n  # Default is false.\n  draft: true\ndockers:\n  - image_templates:\n      - 'ghcr.io/guptarohit/asciigraph:{{ .Version }}'\n      - 'ghcr.io/guptarohit/asciigraph:{{ .Tag }}'\n      - 'ghcr.io/guptarohit/asciigraph:v{{ .Major }}'\n      - 'ghcr.io/guptarohit/asciigraph:v{{ .Major }}.{{ .Minor }}'\n      - 'ghcr.io/guptarohit/asciigraph:latest'\n    dockerfile: goreleaser.dockerfile\n    build_flag_templates:\n      - '--label=org.opencontainers.image.title={{ .ProjectName }}'\n      - '--label=org.opencontainers.image.name={{ .ProjectName }}'\n      - '--label=org.opencontainers.image.description=Go package to make lightweight line graphs ╭┈╯ in CLI'\n      - '--label=org.opencontainers.image.url=https://github.com/guptarohit/asciigraph'\n      - '--label=org.opencontainers.image.source=https://github.com/guptarohit/asciigraph'\n      - '--label=org.opencontainers.image.version={{ .Version }}'\n      - '--label=org.opencontainers.image.created={{ .Date }}'\n      - '--label=org.opencontainers.image.revision={{ .FullCommit }}'\n      - '--label=org.opencontainers.image.licenses=BSD-3-Clause'\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.4921875,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n## [0.7.3] - 2024-10-26\n\n### Fixed\n\n- Incorrect plot height calculation for small value ranges (#59)\n\n## [0.7.2] - 2024-08-12\n\n### Fixed\n\n- Unintended modification of input data (#55)\n\n## [0.7.1] - 2024-03-30\n\n### Added\n\n- CLI: Option to specify legends for series (`sl`)\n\n## [0.7.0] - 2024-03-30\n\n### Added\n\n- CLI: Options to specify delimiter (`d`) and number of series (`sn`)\n\n### Changed\n\n- CLI: Option (`sc`) to specify series colors\n\n## [0.6.0] - 2024-03-25\n\n### Added\n\n- Option to add legends for colored graphs\n\n## [0.5.6] - 2023-06-24\n\n### Added\n\n- Options to set upper & lower bound of graph\n\n## [0.5.5] - 2022-05-03\n\n### Added\n\n- Ansi colors support for graphs\n\n## [0.5.4] - 2022-05-03\n\n### Added\n\n- Option to plot multiple series together (#34)\n- Dockerfile file support (#33)\n\n## [0.5.3] - 2022-02-20\n\n### Fixed\n\n- Handled NaN first value (#32)\n- Fixed incorrect y-axis start value tick (#31)\n\n## [0.5.2] - 2021-03-28\n\n### Added\n\n- added support to set custom precision of data point labels along the y-axis\n- added go module support\n\n### Changed\n\n- updated README to markdown format\n\n## [0.5.1] - 2020-09-14\n\n### Added\n\n- added support for NaN values in series\n- added option to control fps of plot rendering via cli for real-time data\n\n### Changed\n\n- removed use of append() method\n- make caption centered\n- removed trailing spaces from plot\n\n## [0.5.0] - 2020-06-28\n\n### Added\n\n- added support for the realtime plot of data points (from stdin) for CLI.\n\n## [0.4.2] - 2020-06-07\n\n### Fixed\n\n- Prevent panics when data is flat. (#8)\n- Prevent BADPREC issue when maximum and minimum values in a series are 0. (#10)\n\n[0.7.2]: https://github.com/guptarohit/asciigraph/releases/tag/v0.7.2\n[0.7.1]: https://github.com/guptarohit/asciigraph/releases/tag/v0.7.1\n[0.7.0]: https://github.com/guptarohit/asciigraph/releases/tag/v0.7.0\n[0.6.0]: https://github.com/guptarohit/asciigraph/releases/tag/v0.6.0\n[0.5.6]: https://github.com/guptarohit/asciigraph/releases/tag/v0.5.6\n[0.5.5]: https://github.com/guptarohit/asciigraph/releases/tag/v0.5.5\n[0.5.4]: https://github.com/guptarohit/asciigraph/releases/tag/v0.5.4\n[0.5.3]: https://github.com/guptarohit/asciigraph/releases/tag/v0.5.3\n[0.5.2]: https://github.com/guptarohit/asciigraph/releases/tag/v0.5.2\n[0.5.1]: https://github.com/guptarohit/asciigraph/releases/tag/v0.5.1\n[0.5.0]: https://github.com/guptarohit/asciigraph/releases/tag/v0.5.0\n[0.4.2]: https://github.com/guptarohit/asciigraph/releases/tag/v0.4.2\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3662109375,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nhttps://github.com/guptarohit.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.271484375,
          "content": "FROM golang:1.23-alpine AS builder\nWORKDIR /app\nCOPY cmd ./cmd\nCOPY go.mod ./\nCOPY *.go ./\nRUN GOOS=linux GOARCH=amd64 go build -ldflags=\"-w -s\" -o /app/asciigraph ./cmd/asciigraph/main.go\n\nFROM scratch\nCOPY --from=builder /app/asciigraph /asciigraph\nENTRYPOINT [\"/asciigraph\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4755859375,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2018, Rohit Gupta\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.3583984375,
          "content": "# asciigraph\n\n[![Build status][]][1] [![Go Report Card][]][2] [![Coverage Status][]][3] [![GoDoc][]][4] [![License][]][5] [![Mentioned in Awesome Go][]][6]\n\nGo package to make lightweight ASCII line graphs ╭┈╯.\n\n![image][]\n\n## Installation\n```bash\ngo get -u github.com/guptarohit/asciigraph@latest\n```\n\n## Usage\n\n### Basic graph\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/guptarohit/asciigraph\"\n)\n\nfunc main() {\n    data := []float64{3, 4, 9, 6, 2, 4, 5, 8, 5, 10, 2, 7, 2, 5, 6}\n    graph := asciigraph.Plot(data)\n\n    fmt.Println(graph)\n}\n```\n\nRunning this example would render the following graph:\n```bash\n  10.00 ┤        ╭╮\n   9.00 ┤ ╭╮     ││\n   8.00 ┤ ││   ╭╮││\n   7.00 ┤ ││   ││││╭╮\n   6.00 ┤ │╰╮  ││││││ ╭\n   5.00 ┤ │ │ ╭╯╰╯│││╭╯\n   4.00 ┤╭╯ │╭╯   ││││\n   3.00 ┼╯  ││    ││││\n   2.00 ┤   ╰╯    ╰╯╰╯\n```\n\n### Multiple Series\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/guptarohit/asciigraph\"\n)\n\nfunc main() {\n\tdata := [][]float64{{0, 1, 2, 3, 3, 3, 2, 0}, {5, 4, 2, 1, 4, 6, 6}}\n\tgraph := asciigraph.PlotMany(data)\n\n\tfmt.Println(graph)\n}\n```\n\nRunning this example would render the following graph:\n```bash\n 6.00 ┤    ╭─\n 5.00 ┼╮   │\n 4.00 ┤╰╮ ╭╯\n 3.00 ┤ │╭│─╮\n 2.00 ┤ ╰╮│ ╰╮\n 1.00 ┤╭╯╰╯  │\n 0.00 ┼╯     ╰\n```\n\n### Colored graphs\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/guptarohit/asciigraph\"\n)\n\nfunc main() {\n\tdata := make([][]float64, 4)\n\n\tfor i := 0; i < 4; i++ {\n\t\tfor x := -20; x <= 20; x++ {\n\t\t\tv := math.NaN()\n\t\t\tif r := 20 - i; x >= -r && x <= r {\n\t\t\t\tv = math.Sqrt(math.Pow(float64(r), 2)-math.Pow(float64(x), 2)) / 2\n\t\t\t}\n\t\t\tdata[i] = append(data[i], v)\n\t\t}\n\t}\n\tgraph := asciigraph.PlotMany(data, asciigraph.Precision(0), asciigraph.SeriesColors(\n\t\tasciigraph.Red,\n\t\tasciigraph.Yellow,\n\t\tasciigraph.Green,\n\t\tasciigraph.Blue,\n\t))\n\n\tfmt.Println(graph)\n}\n```\n\nRunning this example would render the following graph:\n\n![colored_graph_image][]\n\n### Legends for colored graphs\n\nThe graph can include legends for each series, making it easier to interpret.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/guptarohit/asciigraph\"\n\t\"math\"\n)\n\nfunc main() {\n\tdata := make([][]float64, 3)\n\tfor i := 0; i < 3; i++ {\n\t\tfor x := -12; x <= 12; x++ {\n\t\t\tv := math.NaN()\n\t\t\tif r := 12 - i; x >= -r && x <= r {\n\t\t\t\tv = math.Sqrt(math.Pow(float64(r), 2)-math.Pow(float64(x), 2)) / 2\n\t\t\t}\n\t\t\tdata[i] = append(data[i], v)\n\t\t}\n\t}\n\tgraph := asciigraph.PlotMany(data,\n\t\tasciigraph.Precision(0),\n\t\tasciigraph.SeriesColors(asciigraph.Red, asciigraph.Green, asciigraph.Blue),\n\t\tasciigraph.SeriesLegends(\"Red\", \"Green\", \"Blue\"),\n\t\tasciigraph.Caption(\"Series with legends\"))\n\tfmt.Println(graph)\n}\n```\nRunning this example would render the following graph:\n\n![graph_with_legends_image][]\n\n\n## CLI Installation\n\nThis package also brings a small utility for command line usage.\n\nAssuming `$GOPATH/bin` is in your `$PATH`, install CLI with following command:\n```bash\ngo install github.com/guptarohit/asciigraph/cmd/asciigraph@latest\n```\n\nor pull Docker image:\n```bash\ndocker pull ghcr.io/guptarohit/asciigraph:latest\n```\n\nor download binaries from the [releases][] page.\n\n\n## CLI Usage\n\n```bash                                                                                                                ✘ 0|125  16:19:23\n> asciigraph --help\nUsage of asciigraph:\n  asciigraph [options]\nOptions:\n  -ac axis color\n    \ty-axis color of the plot\n  -b buffer\n    \tdata points buffer when realtime graph enabled, default equal to `width`\n  -c caption\n    \tcaption for the graph\n  -cc caption color\n    \tcaption color of the plot\n  -d delimiter\n    \tdata delimiter for splitting data points in the input stream (default \",\")\n  -f fps\n    \tset fps to control how frequently graph to be rendered when realtime graph enabled (default 24)\n  -h height\n    \theight in text rows, 0 for auto-scaling\n  -lb lower bound\n    \tlower bound set the minimum value for the vertical axis (ignored if series contains lower values) (default +Inf)\n  -lc label color\n    \ty-axis label color of the plot\n  -o offset\n    \toffset in columns, for the label (default 3)\n  -p precision\n    \tprecision of data point labels along the y-axis (default 2)\n  -r realtime\n    \tenables realtime graph for data stream\n  -sc series colors\n    \tcomma-separated series colors corresponding to each series\n  -sl series legends\n    \tcomma-separated series legends corresponding to each series\n  -sn number of series\n    \tnumber of series (columns) in the input data (default 1)\n  -ub upper bound\n    \tupper bound set the maximum value for the vertical axis (ignored if series contains larger values) (default -Inf)\n  -w width\n    \twidth in columns, 0 for auto-scaling\nasciigraph expects data points from stdin. Invalid values are logged to stderr.\n```\n\n\nFeed it data points via stdin:\n```bash\nseq 1 72 | asciigraph -h 10 -c \"plot data from stdin\"\n```\n\nor use Docker image:\n```bash\nseq 1 72 | docker run -i --rm ghcr.io/guptarohit/asciigraph -h 10 -c \"plot data from stdin\"\n```\n\nOutput:\n\n```bash\n 72.00 ┤                                                                  ╭────\n 64.90 ┤                                                           ╭──────╯\n 57.80 ┤                                                    ╭──────╯\n 50.70 ┤                                             ╭──────╯\n 43.60 ┤                                      ╭──────╯\n 36.50 ┤                              ╭───────╯\n 29.40 ┤                       ╭──────╯\n 22.30 ┤                ╭──────╯\n 15.20 ┤         ╭──────╯\n  8.10 ┤  ╭──────╯\n  1.00 ┼──╯\n                                  plot data from stdin\n```\n\n\nExample of **real-time graph** for data points stream via stdin:\n\n<a href=\"https://asciinema.org/a/382383\" target=\"_blank\"><img width=\"500\" alt=\"Realtime graph for data points via stdin (google ping) using asciigraph\" src=\"https://asciinema.org/a/382383.svg\" /></a>\n\n<details>\n<summary>command for above graph</summary>\n\n```sh\nping -i.2 google.com | grep -oP '(?<=time=).*(?=ms)' --line-buffered | asciigraph -r -h 10 -w 40 -c \"realtime plot data (google ping in ms) from stdin\"\n```\n</details>\n\n\nExample of **multi-series real-time graph** for data points stream via stdin:\n\n<a href=\"https://asciinema.org/a/649906\" target=\"_blank\"><img width=\"500\" alt=\"Ping latency comparison: Google (Blue) vs. DuckDuckGo (Red) with asciigraph\" src=\"https://asciinema.org/a/649906.svg\" /></a>\n\n<details>\n<summary>command for above graph</summary>\n\n```sh\n{unbuffer paste -d, <(ping -i 0.4 google.com | sed -u -n -E 's/.*time=(.*)ms.*/\\1/p') <(ping -i 0.4 duckduckgo.com | sed -u -n -E 's/.*time=(.*)ms.*/\\1/p') } | asciigraph -r -h 15 -w 60 -sn 2 -sc \"blue,red\" -c \"Ping Latency Comparison\" -sl \"Google, DuckDuckGo\"\n```\n</details>\n\n\n## Acknowledgement\n\nThis package started as golang port of [asciichart][].\n\n\n## Contributing\n\nFeel free to make a pull request! :octocat:\n\n\n[Build status]: https://github.com/guptarohit/asciigraph/actions/workflows/test.yml/badge.svg\n[1]: https://github.com/guptarohit/asciigraph/actions/workflows/test.yml\n[Go Report Card]: https://goreportcard.com/badge/github.com/guptarohit/asciigraph\n[2]: https://goreportcard.com/report/github.com/guptarohit/asciigraph\n[Coverage Status]: https://coveralls.io/repos/github/guptarohit/asciigraph/badge.svg?branch=master\n[3]: https://coveralls.io/github/guptarohit/asciigraph?branch=master\n[GoDoc]: https://godoc.org/github.com/guptarohit/asciigraph?status.svg\n[4]: https://godoc.org/github.com/guptarohit/asciigraph\n[License]: https://img.shields.io/badge/licence-BSD-blue.svg\n[5]: https://github.com/guptarohit/asciigraph/blob/master/LICENSE\n[Mentioned in Awesome Go]: https://awesome.re/mentioned-badge-flat.svg\n[6]: https://github.com/avelino/awesome-go#advanced-console-uis\n[image]: https://user-images.githubusercontent.com/7895001/41509956-b1b2b3d0-7279-11e8-9d19-d7dea17d5e44.png\n[colored_graph_image]: https://user-images.githubusercontent.com/7895001/166443444-40ad8113-2c0f-46d7-9c75-1cf08435ce15.png\n[releases]: https://github.com/guptarohit/asciigraph/releases\n[asciichart]: https://github.com/kroitor/asciichart\n[graph_with_legends_image]: https://github.com/guptarohit/asciigraph/assets/7895001/4066ee95-55ca-42a4-8a03-e73ce20df5d3\n"
        },
        {
          "name": "asciigraph.go",
          "type": "blob",
          "size": 6.0546875,
          "content": "package asciigraph\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"math\"\n\t\"strings\"\n)\n\n// Plot returns ascii graph for a series.\nfunc Plot(series []float64, options ...Option) string {\n\treturn PlotMany([][]float64{series}, options...)\n}\n\n// PlotMany returns ascii graph for multiple series.\nfunc PlotMany(data [][]float64, options ...Option) string {\n\tvar logMaximum float64\n\tconfig := configure(config{\n\t\tOffset:    3,\n\t\tPrecision: 2,\n\t}, options)\n\n\t// Create a deep copy of the input data\n\tdataCopy := make([][]float64, len(data))\n\tfor i, series := range data {\n\t\tdataCopy[i] = make([]float64, len(series))\n\t\tcopy(dataCopy[i], series)\n\t}\n\tdata = dataCopy\n\n\tlenMax := 0\n\tfor i := range data {\n\t\tif l := len(data[i]); l > lenMax {\n\t\t\tlenMax = l\n\t\t}\n\t}\n\n\tif config.Width > 0 {\n\t\tfor i := range data {\n\t\t\tfor j := len(data[i]); j < lenMax; j++ {\n\t\t\t\tdata[i] = append(data[i], math.NaN())\n\t\t\t}\n\t\t\tdata[i] = interpolateArray(data[i], config.Width)\n\t\t}\n\n\t\tlenMax = config.Width\n\t}\n\n\tminimum, maximum := math.Inf(1), math.Inf(-1)\n\tfor i := range data {\n\t\tminVal, maxVal := minMaxFloat64Slice(data[i])\n\t\tif minVal < minimum {\n\t\t\tminimum = minVal\n\t\t}\n\t\tif maxVal > maximum {\n\t\t\tmaximum = maxVal\n\t\t}\n\t}\n\tif config.LowerBound != nil && *config.LowerBound < minimum {\n\t\tminimum = *config.LowerBound\n\t}\n\tif config.UpperBound != nil && *config.UpperBound > maximum {\n\t\tmaximum = *config.UpperBound\n\t}\n\tinterval := math.Abs(maximum - minimum)\n\n\tif config.Height <= 0 {\n\t\tconfig.Height = calculateHeight(interval)\n\t}\n\n\tif config.Offset <= 0 {\n\t\tconfig.Offset = 3\n\t}\n\n\tvar ratio float64\n\tif interval != 0 {\n\t\tratio = float64(config.Height) / interval\n\t} else {\n\t\tratio = 1\n\t}\n\tmin2 := round(minimum * ratio)\n\tmax2 := round(maximum * ratio)\n\n\tintmin2 := int(min2)\n\tintmax2 := int(max2)\n\n\trows := int(math.Abs(float64(intmax2 - intmin2)))\n\twidth := lenMax + config.Offset\n\n\ttype cell struct {\n\t\tText  string\n\t\tColor AnsiColor\n\t}\n\tplot := make([][]cell, rows+1)\n\n\t// initialise empty 2D grid\n\tfor i := 0; i < rows+1; i++ {\n\t\tline := make([]cell, width)\n\t\tfor j := 0; j < width; j++ {\n\t\t\tline[j].Text = \" \"\n\t\t\tline[j].Color = Default\n\t\t}\n\t\tplot[i] = line\n\t}\n\n\tprecision := config.Precision\n\tlogMaximum = math.Log10(math.Max(math.Abs(maximum), math.Abs(minimum))) //to find number of zeros after decimal\n\tif minimum == float64(0) && maximum == float64(0) {\n\t\tlogMaximum = float64(-1)\n\t}\n\n\tif logMaximum < 0 {\n\t\t// negative log\n\t\tif math.Mod(logMaximum, 1) != 0 {\n\t\t\t// non-zero digits after decimal\n\t\t\tprecision += uint(math.Abs(logMaximum))\n\t\t} else {\n\t\t\tprecision += uint(math.Abs(logMaximum) - 1.0)\n\t\t}\n\t} else if logMaximum > 2 {\n\t\tprecision = 0\n\t}\n\n\tmaxNumLength := len(fmt.Sprintf(\"%0.*f\", precision, maximum))\n\tminNumLength := len(fmt.Sprintf(\"%0.*f\", precision, minimum))\n\tmaxWidth := int(math.Max(float64(maxNumLength), float64(minNumLength)))\n\n\t// axis and labels\n\tfor y := intmin2; y < intmax2+1; y++ {\n\t\tvar magnitude float64\n\t\tif rows > 0 {\n\t\t\tmagnitude = maximum - (float64(y-intmin2) * interval / float64(rows))\n\t\t} else {\n\t\t\tmagnitude = float64(y)\n\t\t}\n\n\t\tlabel := fmt.Sprintf(\"%*.*f\", maxWidth+1, precision, magnitude)\n\t\tw := y - intmin2\n\t\th := int(math.Max(float64(config.Offset)-float64(len(label)), 0))\n\n\t\tplot[w][h].Text = label\n\t\tplot[w][h].Color = config.LabelColor\n\t\tplot[w][config.Offset-1].Text = \"┤\"\n\t\tplot[w][config.Offset-1].Color = config.AxisColor\n\t}\n\n\tfor i := range data {\n\t\tseries := data[i]\n\n\t\tcolor := Default\n\t\tif i < len(config.SeriesColors) {\n\t\t\tcolor = config.SeriesColors[i]\n\t\t}\n\n\t\tvar y0, y1 int\n\n\t\tif !math.IsNaN(series[0]) {\n\t\t\ty0 = int(round(series[0]*ratio) - min2)\n\t\t\tplot[rows-y0][config.Offset-1].Text = \"┼\" // first value\n\t\t\tplot[rows-y0][config.Offset-1].Color = config.AxisColor\n\t\t}\n\n\t\tfor x := 0; x < len(series)-1; x++ { // plot the line\n\t\t\td0 := series[x]\n\t\t\td1 := series[x+1]\n\n\t\t\tif math.IsNaN(d0) && math.IsNaN(d1) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif math.IsNaN(d1) && !math.IsNaN(d0) {\n\t\t\t\ty0 = int(round(d0*ratio) - float64(intmin2))\n\t\t\t\tplot[rows-y0][x+config.Offset].Text = \"╴\"\n\t\t\t\tplot[rows-y0][x+config.Offset].Color = color\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif math.IsNaN(d0) && !math.IsNaN(d1) {\n\t\t\t\ty1 = int(round(d1*ratio) - float64(intmin2))\n\t\t\t\tplot[rows-y1][x+config.Offset].Text = \"╶\"\n\t\t\t\tplot[rows-y1][x+config.Offset].Color = color\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ty0 = int(round(d0*ratio) - float64(intmin2))\n\t\t\ty1 = int(round(d1*ratio) - float64(intmin2))\n\n\t\t\tif y0 == y1 {\n\t\t\t\tplot[rows-y0][x+config.Offset].Text = \"─\"\n\t\t\t} else {\n\t\t\t\tif y0 > y1 {\n\t\t\t\t\tplot[rows-y1][x+config.Offset].Text = \"╰\"\n\t\t\t\t\tplot[rows-y0][x+config.Offset].Text = \"╮\"\n\t\t\t\t} else {\n\t\t\t\t\tplot[rows-y1][x+config.Offset].Text = \"╭\"\n\t\t\t\t\tplot[rows-y0][x+config.Offset].Text = \"╯\"\n\t\t\t\t}\n\n\t\t\t\tstart := int(math.Min(float64(y0), float64(y1))) + 1\n\t\t\t\tend := int(math.Max(float64(y0), float64(y1)))\n\t\t\t\tfor y := start; y < end; y++ {\n\t\t\t\t\tplot[rows-y][x+config.Offset].Text = \"│\"\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstart := int(math.Min(float64(y0), float64(y1)))\n\t\t\tend := int(math.Max(float64(y0), float64(y1)))\n\t\t\tfor y := start; y <= end; y++ {\n\t\t\t\tplot[rows-y][x+config.Offset].Color = color\n\t\t\t}\n\t\t}\n\t}\n\n\t// join columns\n\tvar lines bytes.Buffer\n\tfor h, horizontal := range plot {\n\t\tif h != 0 {\n\t\t\tlines.WriteRune('\\n')\n\t\t}\n\n\t\t// remove trailing spaces\n\t\tlastCharIndex := 0\n\t\tfor i := width - 1; i >= 0; i-- {\n\t\t\tif horizontal[i].Text != \" \" {\n\t\t\t\tlastCharIndex = i\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tc := Default\n\t\tfor _, v := range horizontal[:lastCharIndex+1] {\n\t\t\tif v.Color != c {\n\t\t\t\tc = v.Color\n\t\t\t\tlines.WriteString(c.String())\n\t\t\t}\n\n\t\t\tlines.WriteString(v.Text)\n\t\t}\n\t\tif c != Default {\n\t\t\tlines.WriteString(Default.String())\n\t\t}\n\t}\n\n\t// add caption if not empty\n\tif config.Caption != \"\" {\n\t\tlines.WriteRune('\\n')\n\t\tlines.WriteString(strings.Repeat(\" \", config.Offset+maxWidth))\n\t\tif len(config.Caption) < lenMax {\n\t\t\tlines.WriteString(strings.Repeat(\" \", (lenMax-len(config.Caption))/2))\n\t\t}\n\t\tif config.CaptionColor != Default {\n\t\t\tlines.WriteString(config.CaptionColor.String())\n\t\t}\n\t\tlines.WriteString(config.Caption)\n\t\tif config.CaptionColor != Default {\n\t\t\tlines.WriteString(Default.String())\n\t\t}\n\t}\n\n\tif len(config.SeriesLegends) > 0 {\n\t\taddLegends(&lines, config, lenMax, config.Offset+maxWidth)\n\t}\n\n\treturn lines.String()\n}\n"
        },
        {
          "name": "asciigraph_test.go",
          "type": "blob",
          "size": 14.146484375,
          "content": "package asciigraph\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestPlot(t *testing.T) {\n\tcases := []struct {\n\t\tdata     []float64\n\t\topts     []Option\n\t\texpected string\n\t}{\n\t\t{\n\t\t\t[]float64{1, 1, 1, 1, 1},\n\t\t\tnil,\n\t\t\t` 1.00 ┼────`},\n\t\t{\n\t\t\t[]float64{0, 0, 0, 0, 0},\n\t\t\tnil,\n\t\t\t` 0.00 ┼────`},\n\t\t{\n\t\t\t[]float64{2, 1, 1, 2, -2, 5, 7, 11, 3, 7, 1},\n\t\t\tnil,\n\t\t\t`\n 11.00 ┤      ╭╮\n 10.00 ┤      ││\n  9.00 ┤      ││\n  8.00 ┤      ││\n  7.00 ┤     ╭╯│╭╮\n  6.00 ┤     │ │││\n  5.00 ┤    ╭╯ │││\n  4.00 ┤    │  │││\n  3.00 ┤    │  ╰╯│\n  2.00 ┼╮ ╭╮│    │\n  1.00 ┤╰─╯││    ╰\n  0.00 ┤   ││\n -1.00 ┤   ││\n -2.00 ┤   ╰╯`},\n\t\t{\n\t\t\t[]float64{2, 1, 1, 2, -2, 5, 7, 11, 3, 7, 4, 5, 6, 9, 4, 0, 6, 1, 5, 3, 6, 2},\n\t\t\t[]Option{Caption(\"Plot using asciigraph.\")},\n\t\t\t`\n 11.00 ┤      ╭╮\n 10.00 ┤      ││\n  9.00 ┤      ││    ╭╮\n  8.00 ┤      ││    ││\n  7.00 ┤     ╭╯│╭╮  ││\n  6.00 ┤     │ │││ ╭╯│ ╭╮  ╭╮\n  5.00 ┤    ╭╯ │││╭╯ │ ││╭╮││\n  4.00 ┤    │  ││╰╯  ╰╮││││││\n  3.00 ┤    │  ╰╯     ││││╰╯│\n  2.00 ┼╮ ╭╮│         ││││  ╰\n  1.00 ┤╰─╯││         ││╰╯\n  0.00 ┤   ││         ╰╯\n -1.00 ┤   ││\n -2.00 ┤   ╰╯\n        Plot using asciigraph.`},\n\t\t{\n\t\t\t[]float64{.2, .1, .2, 2, -.9, .7, .91, .3, .7, .4, .5},\n\t\t\t[]Option{Caption(\"Plot using asciigraph.\")},\n\t\t\t`\n  2.00 ┤  ╭╮ ╭╮\n  0.55 ┼──╯│╭╯╰───\n -0.90 ┤   ╰╯\n        Plot using asciigraph.`},\n\t\t{\n\t\t\t[]float64{2, 1, 1, 2, -2, 5, 7, 11, 3, 7, 1},\n\t\t\t[]Option{Height(4), Offset(3)},\n\t\t\t`\n 11.00 ┤      ╭╮\n  7.75 ┤    ╭─╯│╭╮\n  4.50 ┼╮ ╭╮│  ╰╯│\n  1.25 ┤╰─╯││    ╰\n -2.00 ┤   ╰╯`},\n\t\t{\n\t\t\t[]float64{.453, .141, .951, .251, .223, .581, .771, .191, .393, .617, .478},\n\t\t\tnil,\n\t\t\t`\n 0.95 ┤ ╭╮\n 0.85 ┤ ││  ╭╮\n 0.75 ┤ ││  ││\n 0.65 ┤ ││ ╭╯│ ╭╮\n 0.55 ┤ ││ │ │ │╰\n 0.44 ┼╮││ │ │╭╯\n 0.34 ┤│││ │ ││\n 0.24 ┤││╰─╯ ╰╯\n 0.14 ┤╰╯`},\n\n\t\t{\n\t\t\t[]float64{.01, .004, .003, .0042, .0083, .0033, 0.0079},\n\t\t\tnil,\n\t\t\t`\n 0.010 ┼╮\n 0.009 ┤│\n 0.008 ┤│  ╭╮╭\n 0.007 ┤│  │││\n 0.006 ┤│  │││\n 0.005 ┤│  │││\n 0.004 ┤╰╮╭╯││\n 0.003 ┤ ╰╯ ╰╯`},\n\n\t\t{\n\t\t\t[]float64{192, 431, 112, 449, -122, 375, 782, 123, 911, 1711, 172},\n\t\t\t[]Option{Height(10)},\n\t\t\t`\n 1711 ┤        ╭╮\n 1528 ┤        ││\n 1344 ┤        ││\n 1161 ┤        ││\n  978 ┤       ╭╯│\n  794 ┤     ╭╮│ │\n  611 ┤     │││ │\n  428 ┤╭╮╭╮╭╯││ │\n  245 ┼╯╰╯││ ╰╯ ╰\n   61 ┤   ││\n -122 ┤   ╰╯`},\n\t\t{\n\t\t\t[]float64{0.3189989805, 0.149949026, 0.30142492354, 0.195129182935, 0.3142492354, 0.1674974513, 0.3142492354, 0.1474974513, 0.3047974513},\n\t\t\t[]Option{Width(30), Height(5), Caption(\"Plot with custom height & width.\")},\n\t\t\t`\n 0.32 ┼╮            ╭─╮     ╭╮     ╭\n 0.29 ┤╰╮    ╭─╮   ╭╯ │    ╭╯│     │\n 0.26 ┤ │   ╭╯ ╰╮ ╭╯  ╰╮  ╭╯ ╰╮   ╭╯\n 0.23 ┤ ╰╮ ╭╯   ╰╮│    ╰╮╭╯   ╰╮ ╭╯\n 0.20 ┤  ╰╮│     ╰╯     ╰╯     │╭╯\n 0.16 ┤   ╰╯                   ╰╯\n       Plot with custom height & width.`},\n\t\t{\n\t\t\t[]float64{\n\t\t\t\t0, 0, 0, 0, 1.5, 0, 0, -0.5, 9, -3, 0, 0, 1, 2, 1, 0, 0, 0, 0,\n\t\t\t\t0, 0, 0, 0, 1.5, 0, 0, -0.5, 8, -3, 0, 0, 1, 2, 1, 0, 0, 0, 0,\n\t\t\t\t0, 0, 0, 0, 1.5, 0, 0, -0.5, 10, -3, 0, 0, 1, 2, 1, 0, 0, 0, 0,\n\t\t\t},\n\t\t\t[]Option{Offset(10), Height(10), Caption(\"I'm a doctor, not an engineer.\")},\n\t\t\t`\n     10.00    ┤                                             ╭╮\n      8.70    ┤       ╭╮                                    ││\n      7.40    ┤       ││                 ╭╮                 ││\n      6.10    ┤       ││                 ││                 ││\n      4.80    ┤       ││                 ││                 ││\n      3.50    ┤       ││                 ││                 ││\n      2.20    ┤       ││   ╭╮            ││   ╭╮            ││   ╭╮\n      0.90    ┤   ╭╮  ││  ╭╯╰╮       ╭╮  ││  ╭╯╰╮       ╭╮  ││  ╭╯╰╮\n     -0.40    ┼───╯╰──╯│╭─╯  ╰───────╯╰──╯│╭─╯  ╰───────╯╰──╯│╭─╯  ╰───\n     -1.70    ┤        ││                 ││                 ││\n     -3.00    ┤        ╰╯                 ╰╯                 ╰╯\n                            I'm a doctor, not an engineer.`},\n\t\t{\n\t\t\t[]float64{-5, -2, -3, -4, 0, -5, -6, -7, -8, 0, -9, -3, -5, -2, -9, -3, -1},\n\t\t\tnil,\n\t\t\t`\n  0.00 ┤   ╭╮   ╭╮\n -1.00 ┤   ││   ││     ╭\n -2.00 ┤╭╮ ││   ││  ╭╮ │\n -3.00 ┤│╰╮││   ││╭╮││╭╯\n -4.00 ┤│ ╰╯│   │││││││\n -5.00 ┼╯   ╰╮  │││╰╯││\n -6.00 ┤     ╰╮ │││  ││\n -7.00 ┤      ╰╮│││  ││\n -8.00 ┤       ╰╯││  ││\n -9.00 ┤         ╰╯  ╰╯`},\n\t\t{\n\t\t\t[]float64{-0.000018527, -0.021, -.00123, .00000021312, -.0434321234, -.032413241234, .0000234234},\n\t\t\t[]Option{Height(5), Width(45)},\n\t\t\t`\n  0.000 ┼─╮           ╭────────╮                    ╭\n -0.008 ┤ ╰──╮     ╭──╯        ╰─╮                ╭─╯\n -0.017 ┤    ╰─────╯             ╰╮             ╭─╯\n -0.025 ┤                         ╰─╮         ╭─╯\n -0.034 ┤                           ╰╮   ╭────╯\n -0.042 ┤                            ╰───╯`},\n\t\t{\n\t\t\t[]float64{57.76, 54.04, 56.31, 57.02, 59.5, 52.63, 52.97, 56.44, 56.75, 52.96, 55.54, 55.09, 58.22, 56.85, 60.61, 59.62, 59.73, 59.93, 56.3, 54.69, 55.32, 54.03, 50.98, 50.48, 54.55, 47.49, 55.3, 46.74, 46, 45.8, 49.6, 48.83, 47.64, 46.61, 54.72, 42.77, 50.3, 42.79, 41.84, 44.19, 43.36, 45.62, 45.09, 44.95, 50.36, 47.21, 47.77, 52.04, 47.46, 44.19, 47.22, 45.55, 40.65, 39.64, 37.26, 40.71, 42.15, 36.45, 39.14, 36.62},\n\t\t\t[]Option{Width(-10), Height(-10), Offset(-1)},\n\t\t\t`\n 60.61 ┤             ╭╮ ╭╮\n 59.60 ┤   ╭╮        │╰─╯│\n 58.60 ┤   ││      ╭╮│   │\n 57.59 ┼╮ ╭╯│      │││   │\n 56.58 ┤│╭╯ │ ╭─╮  │╰╯   ╰╮\n 55.58 ┤││  │ │ │╭─╯      │╭╮    ╭╮\n 54.57 ┤╰╯  │ │ ││        ╰╯╰╮ ╭╮││      ╭╮\n 53.56 ┤    │╭╯ ╰╯           │ ││││      ││\n 52.56 ┤    ╰╯               │ ││││      ││           ╭╮\n 51.55 ┤                     ╰╮││││      ││           ││\n 50.54 ┤                      ╰╯│││      ││╭╮      ╭╮ ││\n 49.54 ┤                        │││  ╭─╮ ││││      ││ ││\n 48.53 ┤                        │││  │ │ ││││      ││ ││\n 47.52 ┤                        ╰╯│  │ ╰╮││││      │╰─╯╰╮╭╮\n 46.52 ┤                          ╰─╮│  ╰╯│││      │    │││\n 45.51 ┤                            ╰╯    │││   ╭──╯    ││╰╮\n 44.50 ┤                                  │││ ╭╮│       ╰╯ │\n 43.50 ┤                                  ││╰╮│╰╯          │\n 42.49 ┤                                  ╰╯ ╰╯            │   ╭╮\n 41.48 ┤                                                   │   ││\n 40.48 ┤                                                   ╰╮ ╭╯│\n 39.47 ┤                                                    ╰╮│ │╭╮\n 38.46 ┤                                                     ││ │││\n 37.46 ┤                                                     ╰╯ │││\n 36.45 ┤                                                        ╰╯╰`},\n\t\t{\n\t\t\t[]float64{2, 1, 1, 2, -2, 5, 7, 11, 3, 7, 4, 5, 6, 9, 4, 0, 6, 1, 5, 3, 6, 2},\n\t\t\t[]Option{LowerBound(-3), UpperBound(13)},\n\t\t\t` 13.00 ┤\n 12.00 ┤\n 11.00 ┤      ╭╮\n 10.00 ┤      ││\n  9.00 ┤      ││    ╭╮\n  8.00 ┤      ││    ││\n  7.00 ┤     ╭╯│╭╮  ││\n  6.00 ┤     │ │││ ╭╯│ ╭╮  ╭╮\n  5.00 ┤    ╭╯ │││╭╯ │ ││╭╮││\n  4.00 ┤    │  ││╰╯  ╰╮││││││\n  3.00 ┤    │  ╰╯     ││││╰╯│\n  2.00 ┼╮ ╭╮│         ││││  ╰\n  1.00 ┤╰─╯││         ││╰╯\n  0.00 ┤   ││         ╰╯\n -1.00 ┤   ││\n -2.00 ┤   ╰╯\n -3.00 ┤`},\n\t\t{\n\t\t\t[]float64{2, 1, 1, 2, -2, 5, 7, 11, 3, 7, 4, 5, 6, 9, 4, 0, 6, 1, 5, 3, 6, 2},\n\t\t\t[]Option{LowerBound(0), UpperBound(3)},\n\t\t\t` 11.00 ┤      ╭╮\n 10.00 ┤      ││\n  9.00 ┤      ││    ╭╮\n  8.00 ┤      ││    ││\n  7.00 ┤     ╭╯│╭╮  ││\n  6.00 ┤     │ │││ ╭╯│ ╭╮  ╭╮\n  5.00 ┤    ╭╯ │││╭╯ │ ││╭╮││\n  4.00 ┤    │  ││╰╯  ╰╮││││││\n  3.00 ┤    │  ╰╯     ││││╰╯│\n  2.00 ┼╮ ╭╮│         ││││  ╰\n  1.00 ┤╰─╯││         ││╰╯\n  0.00 ┤   ││         ╰╯\n -1.00 ┤   ││\n -2.00 ┤   ╰╯`},\n\n\t\t{\n\t\t\t[]float64{1, 1, math.NaN(), 1, 1},\n\t\t\tnil,\n\t\t\t` 1.00 ┼─╴╶─`},\n\t\t{\n\t\t\t[]float64{math.NaN(), 1},\n\t\t\tnil,\n\t\t\t` 1.00 ┤╶`},\n\t\t{\n\t\t\t[]float64{0, 0, 1, 1, math.NaN(), math.NaN(), 3, 3, 4},\n\t\t\tnil,\n\t\t\t`\n 4.00 ┤       ╭\n 3.00 ┤     ╶─╯\n 2.00 ┤\n 1.00 ┤ ╭─╴\n 0.00 ┼─╯`},\n\t\t{\n\t\t\t[]float64{.1, .2, .3, math.NaN(), .5, .6, .7, math.NaN(), math.NaN(), .9, 1},\n\t\t\tnil,\n\t\t\t`\n 1.00 ┤         ╭\n 0.90 ┤        ╶╯\n 0.80 ┤\n 0.70 ┤     ╭╴\n 0.60 ┤    ╭╯\n 0.50 ┤   ╶╯\n 0.40 ┤\n 0.30 ┤ ╭╴\n 0.20 ┤╭╯\n 0.10 ┼╯`},\n\t\t{\n\t\t\t[]float64{-0.000018527, -0.021, -.00123, .00000021312, -.0434321234, -.032413241234, .0000234234},\n\t\t\t[]Option{Height(5), Width(45), Precision(5)},\n\t\t\t`\n  0.000023 ┼─╮           ╭────────╮                    ╭\n -0.008467 ┤ ╰──╮     ╭──╯        ╰─╮                ╭─╯\n -0.016958 ┤    ╰─────╯             ╰╮             ╭─╯\n -0.025449 ┤                         ╰─╮         ╭─╯\n -0.033940 ┤                           ╰╮   ╭────╯\n -0.042430 ┤                            ╰───╯`},\n\n\t\t{\n\t\t\t[]float64{math.NaN(), 1},\n\t\t\t[]Option{Caption(\"color test\"), CaptionColor(Red), AxisColor(Green), LabelColor(Blue)},\n\t\t\t`\n\\x1b[94m 1.00\\x1b[0m \\x1b[32m┤\\x1b[0m╶\n       \\x1b[91mcolor test\\x1b[0m`},\n\t\t{\n\t\t\t[]float64{.02, .03, .02},\n\t\t\tnil,\n\t\t\t`\n 0.030 ┤╭╮\n 0.020 ┼╯╰`},\n\t\t{\n\t\t\t[]float64{.2, .3, .1, .3},\n\t\t\tnil,\n\t\t\t`\n 0.30 ┤╭╮╭\n 0.20 ┼╯││\n 0.10 ┤ ╰╯`},\n\t}\n\n\tfor i := range cases {\n\t\tname := fmt.Sprintf(\"%d\", i)\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tc := cases[i]\n\t\t\texpected := strings.Replace(strings.TrimPrefix(c.expected, \"\\n\"), `\\x1b`, \"\\x1b\", -1)\n\t\t\tactual := Plot(c.data, c.opts...)\n\t\t\tif actual != expected {\n\t\t\t\tconf := configure(config{}, c.opts)\n\t\t\t\tt.Errorf(\"Plot(%f, %#v)\", c.data, conf)\n\t\t\t\tt.Logf(\"expected:\\n%s\\n\", expected)\n\t\t\t}\n\t\t\tt.Logf(\"actual:\\n%s\\n\", actual)\n\t\t})\n\t}\n}\n\nfunc TestPlotMany(t *testing.T) {\n\tcases := []struct {\n\t\tdata     [][]float64\n\t\topts     []Option\n\t\texpected string\n\t}{\n\t\t{\n\t\t\t[][]float64{{0}, {1}, {2}},\n\t\t\tnil,\n\t\t\t`\n 2.00 ┼\n 1.00 ┼\n 0.00 ┼`},\n\t\t{\n\t\t\t[][]float64{{0, 0, 2, 2, math.NaN()}, {1, 1, 1, 1, 1, 1, 1}, {math.NaN(), math.NaN(), math.NaN(), 0, 0, 2, 2}},\n\t\t\tnil,\n\t\t\t`\n 2.00 ┤ ╭─╴╭─\n 1.00 ┼────│─\n 0.00 ┼─╯╶─╯`},\n\t\t{\n\t\t\t[][]float64{{0, 0, 0}, {math.NaN(), 0, 0}, {math.NaN(), math.NaN(), 0}},\n\t\t\tnil,\n\t\t\t` 0.00 ┼╶╶`},\n\t\t{\n\t\t\t[][]float64{{0, 1, 0}, {2, 3, 4, 3, 2}, {4, 5, 6, 7, 6, 5, 4}},\n\t\t\t[]Option{Width(21), Caption(\"interpolation test\")},\n\t\t\t`\n 7.00 ┤        ╭──╮\n 6.00 ┤    ╭───╯  ╰───╮\n 5.00 ┤ ╭──╯          ╰──╮\n 4.00 ┼─╯  ╭───╮         ╰─\n 3.00 ┤ ╭──╯   ╰──╮\n 2.00 ┼─╯         ╰─╴\n 1.00 ┤ ╭───╮\n 0.00 ┼─╯   ╰╴\n        interpolation test`},\n\n\t\t{\n\t\t\t[][]float64{{0, 0}, {math.NaN(), 0}},\n\t\t\t[]Option{SeriesColors(Red)},\n\t\t\t\" 0.00 ┼╶\"},\n\t\t{\n\t\t\t[][]float64{{0, 0}, {math.NaN(), 0}},\n\t\t\t[]Option{SeriesColors(Default, Red)},\n\t\t\t\" 0.00 ┼\\x1b[91m╶\\x1b[0m\"},\n\t\t{\n\t\t\t[][]float64{{math.NaN(), 0, 2}, {0, 2}},\n\t\t\t[]Option{SeriesColors(Red, Red)},\n\t\t\t`\n 2.00 ┤\\x1b[91m╭╭\\x1b[0m\n 1.00 ┤\\x1b[91m││\\x1b[0m\n 0.00 ┼\\x1b[91m╯╯\\x1b[0m`},\n\t\t{\n\t\t\t[][]float64{{0, 1, 0}, {2, 3, 4, 3, 2}},\n\t\t\t[]Option{SeriesColors(Red, Blue), SeriesLegends(\"Red\", \"Blue\"),\n\t\t\t\tCaption(\"legends with caption test\")},\n\t\t\t`\n 4.00 ┤ \u001b[94m╭╮\u001b[0m\n 3.00 ┤\u001b[94m╭╯╰╮\u001b[0m\n 2.00 ┼\u001b[94m╯\u001b[0m  \u001b[94m╰\u001b[0m\n 1.00 ┤\u001b[91m╭╮\u001b[0m\n 0.00 ┼\u001b[91m╯╰\u001b[0m\n       legends with caption test\n\n       \u001b[91m■\u001b[0m Red   \u001b[94m■\u001b[0m Blue`},\n\t}\n\n\tfor i := range cases {\n\t\tname := fmt.Sprintf(\"%d\", i)\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tc := cases[i]\n\t\t\texpected := strings.Replace(strings.TrimPrefix(c.expected, \"\\n\"), `\\x1b`, \"\\x1b\", -1)\n\t\t\tactual := PlotMany(c.data, c.opts...)\n\t\t\tif actual != expected {\n\t\t\t\tconf := configure(config{}, c.opts)\n\t\t\t\tt.Errorf(\"Plot(%f, %#v)\", c.data, conf)\n\t\t\t\tt.Logf(\"expected:\\n%s\\n\", expected)\n\t\t\t}\n\t\t\tt.Logf(\"actual:\\n%s\\n\", actual)\n\t\t})\n\t}\n}\n\nfunc BenchmarkPlot(b *testing.B) {\n\tdata := []float64{2, 1, 1, 2, -2, 5, 7, 11, 3, 7, 1}\n\topts := []Option{Height(4), Offset(3)}\n\n\tfor i := 0; i < b.N; i++ {\n\t\tPlot(data, opts...)\n\t}\n}\n\nfunc BenchmarkPlotMany(b *testing.B) {\n\tdata1 := []float64{2, 1, 1, 2, -2, 5, 7, 11, 3, 7, 1}\n\tdata2 := []float64{5, 3, 2, 7, 1, -2, 9, 4, 3, 2, 1}\n\topts := []Option{Height(4), Offset(3)}\n\tdatasets := [][]float64{data1, data2}\n\n\tfor i := 0; i < b.N; i++ {\n\t\tPlotMany(datasets, opts...)\n\t}\n}\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "color.go",
          "type": "blob",
          "size": 10.5478515625,
          "content": "package asciigraph\n\nimport \"fmt\"\n\ntype AnsiColor byte\n\nvar (\n\tDefault              AnsiColor = 0\n\tAliceBlue            AnsiColor = 255\n\tAntiqueWhite         AnsiColor = 255\n\tAqua                 AnsiColor = 14\n\tAquamarine           AnsiColor = 122\n\tAzure                AnsiColor = 15\n\tBeige                AnsiColor = 230\n\tBisque               AnsiColor = 224\n\tBlack                AnsiColor = 188 // dummy value\n\tBlanchedAlmond       AnsiColor = 230\n\tBlue                 AnsiColor = 12\n\tBlueViolet           AnsiColor = 92\n\tBrown                AnsiColor = 88\n\tBurlyWood            AnsiColor = 180\n\tCadetBlue            AnsiColor = 73\n\tChartreuse           AnsiColor = 118\n\tChocolate            AnsiColor = 166\n\tCoral                AnsiColor = 209\n\tCornflowerBlue       AnsiColor = 68\n\tCornsilk             AnsiColor = 230\n\tCrimson              AnsiColor = 161\n\tCyan                 AnsiColor = 14\n\tDarkBlue             AnsiColor = 18\n\tDarkCyan             AnsiColor = 30\n\tDarkGoldenrod        AnsiColor = 136\n\tDarkGray             AnsiColor = 248\n\tDarkGreen            AnsiColor = 22\n\tDarkKhaki            AnsiColor = 143\n\tDarkMagenta          AnsiColor = 90\n\tDarkOliveGreen       AnsiColor = 59\n\tDarkOrange           AnsiColor = 208\n\tDarkOrchid           AnsiColor = 134\n\tDarkRed              AnsiColor = 88\n\tDarkSalmon           AnsiColor = 173\n\tDarkSeaGreen         AnsiColor = 108\n\tDarkSlateBlue        AnsiColor = 60\n\tDarkSlateGray        AnsiColor = 238\n\tDarkTurquoise        AnsiColor = 44\n\tDarkViolet           AnsiColor = 92\n\tDeepPink             AnsiColor = 198\n\tDeepSkyBlue          AnsiColor = 39\n\tDimGray              AnsiColor = 242\n\tDodgerBlue           AnsiColor = 33\n\tFirebrick            AnsiColor = 124\n\tFloralWhite          AnsiColor = 15\n\tForestGreen          AnsiColor = 28\n\tFuchsia              AnsiColor = 13\n\tGainsboro            AnsiColor = 253\n\tGhostWhite           AnsiColor = 15\n\tGold                 AnsiColor = 220\n\tGoldenrod            AnsiColor = 178\n\tGray                 AnsiColor = 8\n\tGreen                AnsiColor = 2\n\tGreenYellow          AnsiColor = 155\n\tHoneydew             AnsiColor = 15\n\tHotPink              AnsiColor = 205\n\tIndianRed            AnsiColor = 167\n\tIndigo               AnsiColor = 54\n\tIvory                AnsiColor = 15\n\tKhaki                AnsiColor = 222\n\tLavender             AnsiColor = 254\n\tLavenderBlush        AnsiColor = 255\n\tLawnGreen            AnsiColor = 118\n\tLemonChiffon         AnsiColor = 230\n\tLightBlue            AnsiColor = 152\n\tLightCoral           AnsiColor = 210\n\tLightCyan            AnsiColor = 195\n\tLightGoldenrodYellow AnsiColor = 230\n\tLightGray            AnsiColor = 252\n\tLightGreen           AnsiColor = 120\n\tLightPink            AnsiColor = 217\n\tLightSalmon          AnsiColor = 216\n\tLightSeaGreen        AnsiColor = 37\n\tLightSkyBlue         AnsiColor = 117\n\tLightSlateGray       AnsiColor = 103\n\tLightSteelBlue       AnsiColor = 152\n\tLightYellow          AnsiColor = 230\n\tLime                 AnsiColor = 10\n\tLimeGreen            AnsiColor = 77\n\tLinen                AnsiColor = 255\n\tMagenta              AnsiColor = 13\n\tMaroon               AnsiColor = 1\n\tMediumAquamarine     AnsiColor = 79\n\tMediumBlue           AnsiColor = 20\n\tMediumOrchid         AnsiColor = 134\n\tMediumPurple         AnsiColor = 98\n\tMediumSeaGreen       AnsiColor = 72\n\tMediumSlateBlue      AnsiColor = 99\n\tMediumSpringGreen    AnsiColor = 48\n\tMediumTurquoise      AnsiColor = 80\n\tMediumVioletRed      AnsiColor = 162\n\tMidnightBlue         AnsiColor = 17\n\tMintCream            AnsiColor = 15\n\tMistyRose            AnsiColor = 224\n\tMoccasin             AnsiColor = 223\n\tNavajoWhite          AnsiColor = 223\n\tNavy                 AnsiColor = 4\n\tOldLace              AnsiColor = 230\n\tOlive                AnsiColor = 3\n\tOliveDrab            AnsiColor = 64\n\tOrange               AnsiColor = 214\n\tOrangeRed            AnsiColor = 202\n\tOrchid               AnsiColor = 170\n\tPaleGoldenrod        AnsiColor = 223\n\tPaleGreen            AnsiColor = 120\n\tPaleTurquoise        AnsiColor = 159\n\tPaleVioletRed        AnsiColor = 168\n\tPapayaWhip           AnsiColor = 230\n\tPeachPuff            AnsiColor = 223\n\tPeru                 AnsiColor = 173\n\tPink                 AnsiColor = 218\n\tPlum                 AnsiColor = 182\n\tPowderBlue           AnsiColor = 152\n\tPurple               AnsiColor = 5\n\tRed                  AnsiColor = 9\n\tRosyBrown            AnsiColor = 138\n\tRoyalBlue            AnsiColor = 63\n\tSaddleBrown          AnsiColor = 94\n\tSalmon               AnsiColor = 210\n\tSandyBrown           AnsiColor = 215\n\tSeaGreen             AnsiColor = 29\n\tSeaShell             AnsiColor = 15\n\tSienna               AnsiColor = 131\n\tSilver               AnsiColor = 7\n\tSkyBlue              AnsiColor = 117\n\tSlateBlue            AnsiColor = 62\n\tSlateGray            AnsiColor = 66\n\tSnow                 AnsiColor = 15\n\tSpringGreen          AnsiColor = 48\n\tSteelBlue            AnsiColor = 67\n\tTan                  AnsiColor = 180\n\tTeal                 AnsiColor = 6\n\tThistle              AnsiColor = 182\n\tTomato               AnsiColor = 203\n\tTurquoise            AnsiColor = 80\n\tViolet               AnsiColor = 213\n\tWheat                AnsiColor = 223\n\tWhite                AnsiColor = 15\n\tWhiteSmoke           AnsiColor = 255\n\tYellow               AnsiColor = 11\n\tYellowGreen          AnsiColor = 149\n)\n\nvar ColorNames = map[string]AnsiColor{\n\t\"default\":              Default,\n\t\"aliceblue\":            AliceBlue,\n\t\"antiquewhite\":         AntiqueWhite,\n\t\"aqua\":                 Aqua,\n\t\"aquamarine\":           Aquamarine,\n\t\"azure\":                Azure,\n\t\"beige\":                Beige,\n\t\"bisque\":               Bisque,\n\t\"black\":                Black,\n\t\"blanchedalmond\":       BlanchedAlmond,\n\t\"blue\":                 Blue,\n\t\"blueviolet\":           BlueViolet,\n\t\"brown\":                Brown,\n\t\"burlywood\":            BurlyWood,\n\t\"cadetblue\":            CadetBlue,\n\t\"chartreuse\":           Chartreuse,\n\t\"chocolate\":            Chocolate,\n\t\"coral\":                Coral,\n\t\"cornflowerblue\":       CornflowerBlue,\n\t\"cornsilk\":             Cornsilk,\n\t\"crimson\":              Crimson,\n\t\"cyan\":                 Cyan,\n\t\"darkblue\":             DarkBlue,\n\t\"darkcyan\":             DarkCyan,\n\t\"darkgoldenrod\":        DarkGoldenrod,\n\t\"darkgray\":             DarkGray,\n\t\"darkgreen\":            DarkGreen,\n\t\"darkkhaki\":            DarkKhaki,\n\t\"darkmagenta\":          DarkMagenta,\n\t\"darkolivegreen\":       DarkOliveGreen,\n\t\"darkorange\":           DarkOrange,\n\t\"darkorchid\":           DarkOrchid,\n\t\"darkred\":              DarkRed,\n\t\"darksalmon\":           DarkSalmon,\n\t\"darkseagreen\":         DarkSeaGreen,\n\t\"darkslateblue\":        DarkSlateBlue,\n\t\"darkslategray\":        DarkSlateGray,\n\t\"darkturquoise\":        DarkTurquoise,\n\t\"darkviolet\":           DarkViolet,\n\t\"deeppink\":             DeepPink,\n\t\"deepskyblue\":          DeepSkyBlue,\n\t\"dimgray\":              DimGray,\n\t\"dodgerblue\":           DodgerBlue,\n\t\"firebrick\":            Firebrick,\n\t\"floralwhite\":          FloralWhite,\n\t\"forestgreen\":          ForestGreen,\n\t\"fuchsia\":              Fuchsia,\n\t\"gainsboro\":            Gainsboro,\n\t\"ghostwhite\":           GhostWhite,\n\t\"gold\":                 Gold,\n\t\"goldenrod\":            Goldenrod,\n\t\"gray\":                 Gray,\n\t\"green\":                Green,\n\t\"greenyellow\":          GreenYellow,\n\t\"honeydew\":             Honeydew,\n\t\"hotpink\":              HotPink,\n\t\"indianred\":            IndianRed,\n\t\"indigo\":               Indigo,\n\t\"ivory\":                Ivory,\n\t\"khaki\":                Khaki,\n\t\"lavender\":             Lavender,\n\t\"lavenderblush\":        LavenderBlush,\n\t\"lawngreen\":            LawnGreen,\n\t\"lemonchiffon\":         LemonChiffon,\n\t\"lightblue\":            LightBlue,\n\t\"lightcoral\":           LightCoral,\n\t\"lightcyan\":            LightCyan,\n\t\"lightgoldenrodyellow\": LightGoldenrodYellow,\n\t\"lightgray\":            LightGray,\n\t\"lightgreen\":           LightGreen,\n\t\"lightpink\":            LightPink,\n\t\"lightsalmon\":          LightSalmon,\n\t\"lightseagreen\":        LightSeaGreen,\n\t\"lightskyblue\":         LightSkyBlue,\n\t\"lightslategray\":       LightSlateGray,\n\t\"lightsteelblue\":       LightSteelBlue,\n\t\"lightyellow\":          LightYellow,\n\t\"lime\":                 Lime,\n\t\"limegreen\":            LimeGreen,\n\t\"linen\":                Linen,\n\t\"magenta\":              Magenta,\n\t\"maroon\":               Maroon,\n\t\"mediumaquamarine\":     MediumAquamarine,\n\t\"mediumblue\":           MediumBlue,\n\t\"mediumorchid\":         MediumOrchid,\n\t\"mediumpurple\":         MediumPurple,\n\t\"mediumseagreen\":       MediumSeaGreen,\n\t\"mediumslateblue\":      MediumSlateBlue,\n\t\"mediumspringgreen\":    MediumSpringGreen,\n\t\"mediumturquoise\":      MediumTurquoise,\n\t\"mediumvioletred\":      MediumVioletRed,\n\t\"midnightblue\":         MidnightBlue,\n\t\"mintcream\":            MintCream,\n\t\"mistyrose\":            MistyRose,\n\t\"moccasin\":             Moccasin,\n\t\"navajowhite\":          NavajoWhite,\n\t\"navy\":                 Navy,\n\t\"oldlace\":              OldLace,\n\t\"olive\":                Olive,\n\t\"olivedrab\":            OliveDrab,\n\t\"orange\":               Orange,\n\t\"orangered\":            OrangeRed,\n\t\"orchid\":               Orchid,\n\t\"palegoldenrod\":        PaleGoldenrod,\n\t\"palegreen\":            PaleGreen,\n\t\"paleturquoise\":        PaleTurquoise,\n\t\"palevioletred\":        PaleVioletRed,\n\t\"papayawhip\":           PapayaWhip,\n\t\"peachpuff\":            PeachPuff,\n\t\"peru\":                 Peru,\n\t\"pink\":                 Pink,\n\t\"plum\":                 Plum,\n\t\"powderblue\":           PowderBlue,\n\t\"purple\":               Purple,\n\t\"red\":                  Red,\n\t\"rosybrown\":            RosyBrown,\n\t\"royalblue\":            RoyalBlue,\n\t\"saddlebrown\":          SaddleBrown,\n\t\"salmon\":               Salmon,\n\t\"sandybrown\":           SandyBrown,\n\t\"seagreen\":             SeaGreen,\n\t\"seashell\":             SeaShell,\n\t\"sienna\":               Sienna,\n\t\"silver\":               Silver,\n\t\"skyblue\":              SkyBlue,\n\t\"slateblue\":            SlateBlue,\n\t\"slategray\":            SlateGray,\n\t\"snow\":                 Snow,\n\t\"springgreen\":          SpringGreen,\n\t\"steelblue\":            SteelBlue,\n\t\"tan\":                  Tan,\n\t\"teal\":                 Teal,\n\t\"thistle\":              Thistle,\n\t\"tomato\":               Tomato,\n\t\"turquoise\":            Turquoise,\n\t\"violet\":               Violet,\n\t\"wheat\":                Wheat,\n\t\"white\":                White,\n\t\"whitesmoke\":           WhiteSmoke,\n\t\"yellow\":               Yellow,\n\t\"yellowgreen\":          YellowGreen,\n}\n\nfunc (c AnsiColor) String() string {\n\tif c == Default {\n\t\treturn \"\\x1b[0m\"\n\t}\n\tif c == Black {\n\t\tc = 0\n\t}\n\tif c <= Silver {\n\t\t// 3-bit color\n\t\treturn fmt.Sprintf(\"\\x1b[%dm\", 30+byte(c))\n\t}\n\tif c <= White {\n\t\t// 4-bit color\n\t\treturn fmt.Sprintf(\"\\x1b[%dm\", 82+byte(c))\n\t}\n\t// 8-bit color\n\treturn fmt.Sprintf(\"\\x1b[38;5;%dm\", byte(c))\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0478515625,
          "content": "module github.com/guptarohit/asciigraph\n\ngo 1.11\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "goreleaser.dockerfile",
          "type": "blob",
          "size": 0.06640625,
          "content": "FROM scratch\nCOPY asciigraph /asciigraph\nENTRYPOINT [\"/asciigraph\"]\n"
        },
        {
          "name": "legend.go",
          "type": "blob",
          "size": 1.0537109375,
          "content": "package asciigraph\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"strings\"\n\t\"unicode/utf8\"\n)\n\n// Create legend item as a colored box and text\nfunc createLegendItem(text string, color AnsiColor) (string, int) {\n\treturn fmt.Sprintf(\n\t\t\t\"%s■%s %s\",\n\t\t\tcolor.String(),\n\t\t\tDefault.String(),\n\t\t\ttext,\n\t\t),\n\t\t// Can't use len() because of AnsiColor, add 2 for box and space\n\t\tutf8.RuneCountInString(text) + 2\n}\n\n// Add legend for each series added to the graph\nfunc addLegends(lines *bytes.Buffer, config *config, lenMax int, leftPad int) {\n\tlines.WriteString(\"\\n\\n\")\n\tlines.WriteString(strings.Repeat(\" \", leftPad))\n\n\tvar legendsText string\n\tvar legendsTextLen int\n\trightPad := 3\n\tfor i, text := range config.SeriesLegends {\n\t\titem, itemLen := createLegendItem(text, config.SeriesColors[i])\n\t\tlegendsText += item\n\t\tlegendsTextLen += itemLen\n\n\t\tif i < len(config.SeriesLegends)-1 {\n\t\t\tlegendsText += strings.Repeat(\" \", rightPad)\n\t\t\tlegendsTextLen += rightPad\n\t\t}\n\t}\n\n\tif legendsTextLen < lenMax {\n\t\tlines.WriteString(strings.Repeat(\" \", (lenMax-legendsTextLen)/2))\n\t}\n\tlines.WriteString(legendsText)\n}\n"
        },
        {
          "name": "options.go",
          "type": "blob",
          "size": 2.9150390625,
          "content": "package asciigraph\n\nimport (\n\t\"strings\"\n)\n\n// Option represents a configuration setting.\ntype Option interface {\n\tapply(c *config)\n}\n\n// config holds various graph options\ntype config struct {\n\tWidth, Height          int\n\tLowerBound, UpperBound *float64\n\tOffset                 int\n\tCaption                string\n\tPrecision              uint\n\tCaptionColor           AnsiColor\n\tAxisColor              AnsiColor\n\tLabelColor             AnsiColor\n\tSeriesColors           []AnsiColor\n\tSeriesLegends          []string\n}\n\n// An optionFunc applies an option.\ntype optionFunc func(*config)\n\n// apply implements the Option interface.\nfunc (of optionFunc) apply(c *config) { of(c) }\n\nfunc configure(defaults config, options []Option) *config {\n\tfor _, o := range options {\n\t\to.apply(&defaults)\n\t}\n\treturn &defaults\n}\n\n// Width sets the graphs width. By default, the width of the graph is\n// determined by the number of data points. If the value given is a\n// positive number, the data points are interpolated on the x axis.\n// Values <= 0 reset the width to the default value.\nfunc Width(w int) Option {\n\treturn optionFunc(func(c *config) {\n\t\tif w > 0 {\n\t\t\tc.Width = w\n\t\t} else {\n\t\t\tc.Width = 0\n\t\t}\n\t})\n}\n\n// Height sets the graphs height.\nfunc Height(h int) Option {\n\treturn optionFunc(func(c *config) {\n\t\tif h > 0 {\n\t\t\tc.Height = h\n\t\t} else {\n\t\t\tc.Height = 0\n\t\t}\n\t})\n}\n\n// LowerBound sets the graph's minimum value for the vertical axis. It will be ignored\n// if the series contains a lower value.\nfunc LowerBound(min float64) Option {\n\treturn optionFunc(func(c *config) { c.LowerBound = &min })\n}\n\n// UpperBound sets the graph's maximum value for the vertical axis. It will be ignored\n// if the series contains a bigger value.\nfunc UpperBound(max float64) Option {\n\treturn optionFunc(func(c *config) { c.UpperBound = &max })\n}\n\n// Offset sets the graphs offset.\nfunc Offset(o int) Option {\n\treturn optionFunc(func(c *config) { c.Offset = o })\n}\n\n// Precision sets the graphs precision.\nfunc Precision(p uint) Option {\n\treturn optionFunc(func(c *config) { c.Precision = p })\n}\n\n// Caption sets the graphs caption.\nfunc Caption(caption string) Option {\n\treturn optionFunc(func(c *config) {\n\t\tc.Caption = strings.TrimSpace(caption)\n\t})\n}\n\n// CaptionColor sets the caption color.\nfunc CaptionColor(ac AnsiColor) Option {\n\treturn optionFunc(func(c *config) {\n\t\tc.CaptionColor = ac\n\t})\n}\n\n// AxisColor sets the axis color.\nfunc AxisColor(ac AnsiColor) Option {\n\treturn optionFunc(func(c *config) {\n\t\tc.AxisColor = ac\n\t})\n}\n\n// LabelColor sets the axis label color.\nfunc LabelColor(ac AnsiColor) Option {\n\treturn optionFunc(func(c *config) {\n\t\tc.LabelColor = ac\n\t})\n}\n\n// SeriesColors sets the series colors.\nfunc SeriesColors(ac ...AnsiColor) Option {\n\treturn optionFunc(func(c *config) {\n\t\tc.SeriesColors = ac\n\t})\n}\n\n// SeriesLegends sets the legend text for the corresponding series.\nfunc SeriesLegends(text ...string) Option {\n\treturn optionFunc(func(c *config) {\n\t\tc.SeriesLegends = text\n\t})\n}\n"
        },
        {
          "name": "utils.go",
          "type": "blob",
          "size": 1.908203125,
          "content": "package asciigraph\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"math\"\n\t\"os\"\n\t\"os/exec\"\n\t\"runtime\"\n)\n\nfunc minMaxFloat64Slice(v []float64) (min, max float64) {\n\tmin = math.Inf(1)\n\tmax = math.Inf(-1)\n\n\tif len(v) == 0 {\n\t\tpanic(\"Empty slice\")\n\t}\n\n\tfor _, e := range v {\n\t\tif e < min {\n\t\t\tmin = e\n\t\t}\n\t\tif e > max {\n\t\t\tmax = e\n\t\t}\n\t}\n\treturn\n}\n\nfunc round(input float64) float64 {\n\tif math.IsNaN(input) {\n\t\treturn math.NaN()\n\t}\n\tsign := 1.0\n\tif input < 0 {\n\t\tsign = -1\n\t\tinput *= -1\n\t}\n\t_, decimal := math.Modf(input)\n\tvar rounded float64\n\tif decimal >= 0.5 {\n\t\trounded = math.Ceil(input)\n\t} else {\n\t\trounded = math.Floor(input)\n\t}\n\treturn rounded * sign\n}\n\nfunc linearInterpolate(before, after, atPoint float64) float64 {\n\treturn before + (after-before)*atPoint\n}\n\nfunc interpolateArray(data []float64, fitCount int) []float64 {\n\n\tvar interpolatedData []float64\n\n\tspringFactor := float64(len(data)-1) / float64(fitCount-1)\n\tinterpolatedData = append(interpolatedData, data[0])\n\n\tfor i := 1; i < fitCount-1; i++ {\n\t\tspring := float64(i) * springFactor\n\t\tbefore := math.Floor(spring)\n\t\tafter := math.Ceil(spring)\n\t\tatPoint := spring - before\n\t\tinterpolatedData = append(interpolatedData, linearInterpolate(data[int(before)], data[int(after)], atPoint))\n\t}\n\tinterpolatedData = append(interpolatedData, data[len(data)-1])\n\treturn interpolatedData\n}\n\n// clear terminal screen\nvar Clear func()\n\nfunc init() {\n\tplatform := runtime.GOOS\n\n\tif platform == \"windows\" {\n\t\tClear = func() {\n\t\t\tcmd := exec.Command(\"cmd\", \"/c\", \"cls\")\n\t\t\tcmd.Stdout = os.Stdout\n\t\t\tif err := cmd.Run(); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tClear = func() {\n\t\t\tfmt.Print(\"\\033[2J\\033[H\")\n\t\t}\n\t}\n}\n\nfunc calculateHeight(interval float64) int {\n\tif interval >= 1 {\n\t\treturn int(interval)\n\t}\n\n\tscaleFactor := math.Pow(10, math.Floor(math.Log10(interval)))\n\tscaledDelta := interval / scaleFactor\n\n\tif scaledDelta < 2 {\n\t\treturn int(math.Ceil(scaledDelta))\n\t}\n\treturn int(math.Floor(scaledDelta))\n}\n"
        }
      ]
    }
  ]
}