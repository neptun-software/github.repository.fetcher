{
  "metadata": {
    "timestamp": 1736566546849,
    "page": 92,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mitchellh/gox",
      "stars": 4607,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0068359375,
          "content": "* text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.00390625,
          "content": "gox\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.333984375,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.7666015625,
          "content": "# Gox - Simple Go Cross Compilation\n\nGox is a simple, no-frills tool for Go cross compilation that behaves a\nlot like standard `go build`. Gox will parallelize builds for multiple\nplatforms. Gox will also build the cross-compilation toolchain for you.\n\n## Installation\n\nTo install Gox, please use `go get`. We tag versions so feel free to\ncheckout that tag and compile.\n\n```\n$ go install github.com/mitchellh/gox@latest\n...\n$ gox -h\n...\n```\n\n## Usage\n\nIf you know how to use `go build`, then you know how to use Gox. For\nexample, to build the current package, specify no parameters and just\ncall `gox`. Gox will parallelize based on the number of CPUs you have\nby default and build for every platform by default:\n\n```\n$ gox\nNumber of parallel builds: 4\n\n-->      darwin/386: github.com/mitchellh/gox\n-->    darwin/amd64: github.com/mitchellh/gox\n-->       linux/386: github.com/mitchellh/gox\n-->     linux/amd64: github.com/mitchellh/gox\n-->       linux/arm: github.com/mitchellh/gox\n-->     freebsd/386: github.com/mitchellh/gox\n-->   freebsd/amd64: github.com/mitchellh/gox\n-->     openbsd/386: github.com/mitchellh/gox\n-->   openbsd/amd64: github.com/mitchellh/gox\n-->     windows/386: github.com/mitchellh/gox\n-->   windows/amd64: github.com/mitchellh/gox\n-->     freebsd/arm: github.com/mitchellh/gox\n-->      netbsd/386: github.com/mitchellh/gox\n-->    netbsd/amd64: github.com/mitchellh/gox\n-->      netbsd/arm: github.com/mitchellh/gox\n-->       plan9/386: github.com/mitchellh/gox\n```\n\nOr, if you want to build a package and sub-packages:\n\n```\n$ gox ./...\n...\n```\n\nOr, if you want to build multiple distinct packages:\n\n```\n$ gox github.com/mitchellh/gox github.com/hashicorp/serf\n...\n```\n\nOr if you want to just build for linux:\n\n```\n$ gox -os=\"linux\"\n...\n```\n\nOr maybe you just want to build for 64-bit linux:\n\n```\n$ gox -osarch=\"linux/amd64\"\n...\n```\n\nAnd more! Just run `gox -h` for help and additional information.\n\n## Versus Other Cross-Compile Tools\n\nA big thanks to these other options for existing. They each paved the\nway in many aspects to make Go cross-compilation approachable.\n\n* [Dave Cheney's golang-crosscompile](https://github.com/davecheney/golang-crosscompile) -\n  Gox compiles for multiple platforms and can therefore easily run on\n  any platform Go supports, whereas Dave's scripts require a shell. Gox\n  will also parallelize builds. Dave's scripts build sequentially. Gox has\n  much easier to use OS/Arch filtering built in.\n\n* [goxc](https://github.com/laher/goxc) -\n  A very richly featured tool that can even do things such as build system\n  packages, upload binaries, generate download webpages, etc. Gox is a\n  super slim alternative that only cross-compiles binaries. Gox builds packages in parallel, whereas\n  goxc doesn't. Gox doesn't enforce a specific output structure for built\n  binaries.\n\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.2314453125,
          "content": "\nversion: build-{build}.{branch}\n\nclone_folder: C:\\gopath\\src\\github.com\\mitchellh\\gox\nshallow_clone: true\n\nenvironment:\n  GOPATH: C:\\gopath\n\nplatform:\n  - x64\n\ntest_script:\n  - go get ./...\n  - go test -v ./...\n\nbuild: off\n\ndeploy: off\n"
        },
        {
          "name": "env_override.go",
          "type": "blob",
          "size": 0.365234375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// envOverride overrides the given target based on if there is a\n// env var in the format of GOX_{OS}_{ARCH}_{KEY}.\nfunc envOverride(target *string, platform Platform, key string) {\n\tkey = strings.ToUpper(fmt.Sprintf(\n\t\t\"GOX_%s_%s_%s\", platform.OS, platform.Arch, key))\n\tif v := os.Getenv(key); v != \"\" {\n\t\t*target = v\n\t}\n}\n"
        },
        {
          "name": "go.go",
          "type": "blob",
          "size": 5.388671875,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"runtime\"\n\t\"strings\"\n\t\"text/template\"\n)\n\ntype OutputTemplateData struct {\n\tDir  string\n\tOS   string\n\tArch string\n}\n\ntype CompileOpts struct {\n\tPackagePath string\n\tPlatform    Platform\n\tOutputTpl   string\n\tLdflags     string\n\tGcflags     string\n\tAsmflags    string\n\tTags        string\n\tModMode     string\n\tCgo         bool\n\tRebuild     bool\n\tGoCmd       string\n\tRace        bool\n}\n\n// GoCrossCompile\nfunc GoCrossCompile(opts *CompileOpts) error {\n\tenv := append(os.Environ(),\n\t\t\"GOOS=\"+opts.Platform.OS,\n\t\t\"GOARCH=\"+opts.Platform.Arch)\n\n\t// If we're building for our own platform, then enable cgo always. We\n\t// respect the CGO_ENABLED flag if that is explicitly set on the platform.\n\tif !opts.Cgo && os.Getenv(\"CGO_ENABLED\") != \"0\" {\n\t\topts.Cgo = runtime.GOOS == opts.Platform.OS &&\n\t\t\truntime.GOARCH == opts.Platform.Arch\n\t}\n\n\t// If cgo is enabled then set that env var\n\tif opts.Cgo {\n\t\tenv = append(env, \"CGO_ENABLED=1\")\n\t} else {\n\t\tenv = append(env, \"CGO_ENABLED=0\")\n\t}\n\n\tvar outputPath bytes.Buffer\n\ttpl, err := template.New(\"output\").Parse(opts.OutputTpl)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttplData := OutputTemplateData{\n\t\tDir:  filepath.Base(opts.PackagePath),\n\t\tOS:   opts.Platform.OS,\n\t\tArch: opts.Platform.Arch,\n\t}\n\tif err := tpl.Execute(&outputPath, &tplData); err != nil {\n\t\treturn err\n\t}\n\n\tif opts.Platform.OS == \"windows\" {\n\t\toutputPath.WriteString(\".exe\")\n\t}\n\n\t// Determine the full path to the output so that we can change our\n\t// working directory when executing go build.\n\toutputPathReal := outputPath.String()\n\toutputPathReal, err = filepath.Abs(outputPathReal)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Go prefixes the import directory with '_' when it is outside\n\t// the GOPATH.For this, we just drop it since we move to that\n\t// directory to build.\n\tchdir := \"\"\n\tif opts.PackagePath[0] == '_' {\n\t\tif runtime.GOOS == \"windows\" {\n\t\t\t// We have to replace weird paths like this:\n\t\t\t//\n\t\t\t//   _/c_/Users\n\t\t\t//\n\t\t\t// With:\n\t\t\t//\n\t\t\t//   c:\\Users\n\t\t\t//\n\t\t\tre := regexp.MustCompile(\"^/([a-zA-Z])_/\")\n\t\t\tchdir = re.ReplaceAllString(opts.PackagePath[1:], \"$1:\\\\\")\n\t\t\tchdir = strings.Replace(chdir, \"/\", \"\\\\\", -1)\n\t\t} else {\n\t\t\tchdir = opts.PackagePath[1:]\n\t\t}\n\n\t\topts.PackagePath = \"\"\n\t}\n\n\targs := []string{\"build\"}\n\tif opts.Rebuild {\n\t\targs = append(args, \"-a\")\n\t}\n\tif opts.ModMode != \"\" {\n\t\targs = append(args, \"-mod\", opts.ModMode)\n\t}\n\tif opts.Race {\n\t\targs = append(args, \"-race\")\n\t}\n\targs = append(args,\n\t\t\"-gcflags\", opts.Gcflags,\n\t\t\"-ldflags\", opts.Ldflags,\n\t\t\"-asmflags\", opts.Asmflags,\n\t\t\"-tags\", opts.Tags,\n\t\t\"-o\", outputPathReal,\n\t\topts.PackagePath)\n\n\t_, err = execGo(opts.GoCmd, env, chdir, args...)\n\treturn err\n}\n\n// GoMainDirs returns the file paths to the packages that are \"main\"\n// packages, from the list of packages given. The list of packages can\n// include relative paths, the special \"...\" Go keyword, etc.\nfunc GoMainDirs(packages []string, GoCmd string) ([]string, error) {\n\targs := make([]string, 0, len(packages)+3)\n\targs = append(args, \"list\", \"-f\", \"{{.Name}}|{{.ImportPath}}\")\n\targs = append(args, packages...)\n\n\toutput, err := execGo(GoCmd, nil, \"\", args...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresults := make([]string, 0, len(output))\n\tfor _, line := range strings.Split(output, \"\\n\") {\n\t\tif line == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tparts := strings.SplitN(line, \"|\", 2)\n\t\tif len(parts) != 2 {\n\t\t\tlog.Printf(\"Bad line reading packages: %s\", line)\n\t\t\tcontinue\n\t\t}\n\n\t\tif parts[0] == \"main\" {\n\t\t\tresults = append(results, parts[1])\n\t\t}\n\t}\n\n\treturn results, nil\n}\n\n// GoRoot returns the GOROOT value for the compiled `go` binary.\nfunc GoRoot() (string, error) {\n\toutput, err := execGo(\"go\", nil, \"\", \"env\", \"GOROOT\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn strings.TrimSpace(output), nil\n}\n\n// GoVersion reads the version of `go` that is on the PATH. This is done\n// instead of `runtime.Version()` because it is possible to run gox against\n// another Go version.\nfunc GoVersion() (string, error) {\n\t// NOTE: We use `go run` instead of `go version` because the output\n\t// of `go version` might change whereas the source is guaranteed to run\n\t// for some time thanks to Go's compatibility guarantee.\n\n\ttd, err := ioutil.TempDir(\"\", \"gox\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer os.RemoveAll(td)\n\n\t// Write the source code for the program that will generate the version\n\tsourcePath := filepath.Join(td, \"version.go\")\n\tif err := ioutil.WriteFile(sourcePath, []byte(versionSource), 0644); err != nil {\n\t\treturn \"\", err\n\t}\n\n\t// Execute and read the version, which will be the only thing on stdout.\n\treturn execGo(\"go\", nil, \"\", \"run\", sourcePath)\n}\n\n// GoVersionParts parses the version numbers from the version itself\n// into major and minor: 1.5, 1.4, etc.\nfunc GoVersionParts() (result [2]int, err error) {\n\tversion, err := GoVersion()\n\tif err != nil {\n\t\treturn\n\t}\n\n\t_, err = fmt.Sscanf(version, \"go%d.%d\", &result[0], &result[1])\n\treturn\n}\n\nfunc execGo(GoCmd string, env []string, dir string, args ...string) (string, error) {\n\tvar stderr, stdout bytes.Buffer\n\tcmd := exec.Command(GoCmd, args...)\n\tcmd.Stdout = &stdout\n\tcmd.Stderr = &stderr\n\tif env != nil {\n\t\tcmd.Env = env\n\t}\n\tif dir != \"\" {\n\t\tcmd.Dir = dir\n\t}\n\tif err := cmd.Run(); err != nil {\n\t\terr = fmt.Errorf(\"%s\\nStderr: %s\", err, stderr.String())\n\t\treturn \"\", err\n\t}\n\n\treturn stdout.String(), nil\n}\n\nconst versionSource = `package main\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n)\n\nfunc main() {\n\tfmt.Print(runtime.Version())\n}`\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.126953125,
          "content": "module github.com/mitchellh/gox\n\ngo 1.17\n\nrequire (\n\tgithub.com/hashicorp/go-version v1.0.0\n\tgithub.com/mitchellh/iochan v1.0.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.345703125,
          "content": "github.com/hashicorp/go-version v1.0.0 h1:21MVWPKDphxa7ineQQTrCU5brh7OuVVAzGOCnnCPtE8=\ngithub.com/hashicorp/go-version v1.0.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/mitchellh/iochan v1.0.0 h1:C+X3KsSTLFVBr/tK1eYN/vs4rJcvsiLU338UhYPJWeY=\ngithub.com/mitchellh/iochan v1.0.0/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=\n"
        },
        {
          "name": "go_test.go",
          "type": "blob",
          "size": 0.5673828125,
          "content": "package main\n\nimport (\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestGoVersion(t *testing.T) {\n\tv, err := GoVersion()\n\tif err != nil {\n\t\tt.Fatalf(\"err: %s\", err)\n\t}\n\n\tacceptable := []string{\n\t\t\"devel\",\n\t\t\"go1.0\",\n\t\t\"go1.1\",\n\t\t\"go1.2\",\n\t\t\"go1.3\",\n\t\t\"go1.4\",\n\t\t\"go1.5\",\n\t\t\"go1.6\",\n\t\t\"go1.7\",\n\t\t\"go1.8\",\n\t\t\"go1.9\",\n\t\t\"go1.10\",\n\t\t\"go1.11\",\n\t\t\"go1.12\",\n\t\t\"go1.13\",\n\t\t\"go1.14\",\n\t\t\"go1.15\",\n\t\t\"go1.16\",\n\t\t\"go1.17\",\n\t\t\"go1.18\",\n\t}\n\tfound := false\n\tfor _, expected := range acceptable {\n\t\tif strings.HasPrefix(v, expected) {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tt.Fatalf(\"bad: %#v\", v)\n\t}\n}\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 8.4228515625,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"runtime\"\n\t\"strings\"\n\t\"sync\"\n\n\tversion \"github.com/hashicorp/go-version\"\n)\n\nfunc main() {\n\t// Call realMain so that defers work properly, since os.Exit won't\n\t// call defers.\n\tos.Exit(realMain())\n}\n\nfunc realMain() int {\n\tvar buildToolchain bool\n\tvar ldflags string\n\tvar outputTpl string\n\tvar parallel int\n\tvar platformFlag PlatformFlag\n\tvar tags string\n\tvar verbose bool\n\tvar flagGcflags, flagAsmflags string\n\tvar flagCgo, flagRebuild, flagListOSArch, flagRaceFlag bool\n\tvar flagGoCmd string\n\tvar modMode string\n\tflags := flag.NewFlagSet(\"gox\", flag.ExitOnError)\n\tflags.Usage = func() { printUsage() }\n\tflags.Var(platformFlag.ArchFlagValue(), \"arch\", \"arch to build for or skip\")\n\tflags.Var(platformFlag.OSArchFlagValue(), \"osarch\", \"os/arch pairs to build for or skip\")\n\tflags.Var(platformFlag.OSFlagValue(), \"os\", \"os to build for or skip\")\n\tflags.StringVar(&ldflags, \"ldflags\", \"\", \"linker flags\")\n\tflags.StringVar(&tags, \"tags\", \"\", \"go build tags\")\n\tflags.StringVar(&outputTpl, \"output\", \"{{.Dir}}_{{.OS}}_{{.Arch}}\", \"output path\")\n\tflags.IntVar(&parallel, \"parallel\", -1, \"parallelization factor\")\n\tflags.BoolVar(&buildToolchain, \"build-toolchain\", false, \"build toolchain\")\n\tflags.BoolVar(&verbose, \"verbose\", false, \"verbose\")\n\tflags.BoolVar(&flagCgo, \"cgo\", false, \"\")\n\tflags.BoolVar(&flagRebuild, \"rebuild\", false, \"\")\n\tflags.BoolVar(&flagListOSArch, \"osarch-list\", false, \"\")\n\tflags.BoolVar(&flagRaceFlag, \"race\", false, \"\")\n\tflags.StringVar(&flagGcflags, \"gcflags\", \"\", \"\")\n\tflags.StringVar(&flagAsmflags, \"asmflags\", \"\", \"\")\n\tflags.StringVar(&flagGoCmd, \"gocmd\", \"go\", \"\")\n\tflags.StringVar(&modMode, \"mod\", \"\", \"\")\n\tif err := flags.Parse(os.Args[1:]); err != nil {\n\t\tflags.Usage()\n\t\treturn 1\n\t}\n\n\t// Determine what amount of parallelism we want Default to the current\n\t// number of CPUs-1 is <= 0 is specified.\n\tif parallel <= 0 {\n\t\tcpus := runtime.NumCPU()\n\t\tif cpus < 2 {\n\t\t\tparallel = 1\n\t\t} else {\n\t\t\tparallel = cpus - 1\n\t\t}\n\n\t\t// Joyent containers report 48 cores via runtime.NumCPU(), and a\n\t\t// default of 47 parallel builds causes a panic. Default to 3 on\n\t\t// Solaris-derived operating systems unless overridden with the\n\t\t// -parallel flag.\n\t\tif runtime.GOOS == \"solaris\" {\n\t\t\tparallel = 3\n\t\t}\n\t}\n\n\tif buildToolchain {\n\t\treturn mainBuildToolchain(parallel, platformFlag, verbose)\n\t}\n\n\tif _, err := exec.LookPath(flagGoCmd); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"%s executable must be on the PATH\\n\",\n\t\t\tflagGoCmd)\n\t\treturn 1\n\t}\n\n\tversionStr, err := GoVersion()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"error reading Go version: %s\", err)\n\t\treturn 1\n\t}\n\n\tif flagListOSArch {\n\t\treturn mainListOSArch(versionStr)\n\t}\n\n\t// Determine the packages that we want to compile. Default to the\n\t// current directory if none are specified.\n\tpackages := flags.Args()\n\tif len(packages) == 0 {\n\t\tpackages = []string{\".\"}\n\t}\n\n\t// Get the packages that are in the given paths\n\tmainDirs, err := GoMainDirs(packages, flagGoCmd)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error reading packages: %s\", err)\n\t\treturn 1\n\t}\n\n\t// Determine the platforms we're building for\n\tplatforms := platformFlag.Platforms(SupportedPlatforms(versionStr))\n\tif len(platforms) == 0 {\n\t\tfmt.Println(\"No valid platforms to build for. If you specified a value\")\n\t\tfmt.Println(\"for the 'os', 'arch', or 'osarch' flags, make sure you're\")\n\t\tfmt.Println(\"using a valid value.\")\n\t\treturn 1\n\t}\n\n\t// Assume -mod is supported when no version prefix is found\n\tif modMode != \"\" && strings.HasPrefix(versionStr, \"go\") {\n\t\t// go-version only cares about version numbers\n\t\tcurrent, err := version.NewVersion(versionStr[2:])\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Unable to parse current go version: %s\\n%s\", versionStr, err.Error())\n\t\t\treturn 1\n\t\t}\n\n\t\tconstraint, err := version.NewConstraint(\">= 1.11\")\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tif !constraint.Check(current) {\n\t\t\tfmt.Printf(\"Go compiler version %s does not support the -mod flag\\n\", versionStr)\n\t\t\tmodMode = \"\"\n\t\t}\n\t}\n\n\t// Build in parallel!\n\tfmt.Printf(\"Number of parallel builds: %d\\n\\n\", parallel)\n\tvar errorLock sync.Mutex\n\tvar wg sync.WaitGroup\n\terrors := make([]string, 0)\n\tsemaphore := make(chan int, parallel)\n\tfor _, platform := range platforms {\n\t\tfor _, path := range mainDirs {\n\t\t\t// Start the goroutine that will do the actual build\n\t\t\twg.Add(1)\n\t\t\tgo func(path string, platform Platform) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tsemaphore <- 1\n\t\t\t\tfmt.Printf(\"--> %15s: %s\\n\", platform.String(), path)\n\n\t\t\t\topts := &CompileOpts{\n\t\t\t\t\tPackagePath: path,\n\t\t\t\t\tPlatform:    platform,\n\t\t\t\t\tOutputTpl:   outputTpl,\n\t\t\t\t\tLdflags:     ldflags,\n\t\t\t\t\tGcflags:     flagGcflags,\n\t\t\t\t\tAsmflags:    flagAsmflags,\n\t\t\t\t\tTags:        tags,\n\t\t\t\t\tModMode:     modMode,\n\t\t\t\t\tCgo:         flagCgo,\n\t\t\t\t\tRebuild:     flagRebuild,\n\t\t\t\t\tGoCmd:       flagGoCmd,\n\t\t\t\t\tRace:        flagRaceFlag,\n\t\t\t\t}\n\n\t\t\t\t// Determine if we have specific CFLAGS or LDFLAGS for this\n\t\t\t\t// GOOS/GOARCH combo and override the defaults if so.\n\t\t\t\tenvOverride(&opts.Ldflags, platform, \"LDFLAGS\")\n\t\t\t\tenvOverride(&opts.Gcflags, platform, \"GCFLAGS\")\n\t\t\t\tenvOverride(&opts.Asmflags, platform, \"ASMFLAGS\")\n\n\t\t\t\tif err := GoCrossCompile(opts); err != nil {\n\t\t\t\t\terrorLock.Lock()\n\t\t\t\t\tdefer errorLock.Unlock()\n\t\t\t\t\terrors = append(errors,\n\t\t\t\t\t\tfmt.Sprintf(\"%s error: %s\", platform.String(), err))\n\t\t\t\t}\n\t\t\t\t<-semaphore\n\t\t\t}(path, platform)\n\t\t}\n\t}\n\twg.Wait()\n\n\tif len(errors) > 0 {\n\t\tfmt.Fprintf(os.Stderr, \"\\n%d errors occurred:\\n\", len(errors))\n\t\tfor _, err := range errors {\n\t\t\tfmt.Fprintf(os.Stderr, \"--> %s\\n\", err)\n\t\t}\n\t\treturn 1\n\t}\n\n\treturn 0\n}\n\nfunc printUsage() {\n\tfmt.Fprintf(os.Stderr, helpText)\n}\n\nconst helpText = `Usage: gox [options] [packages]\n\n  Gox cross-compiles Go applications in parallel.\n\n  If no specific operating systems or architectures are specified, Gox\n  will build for all pairs supported by your version of Go.\n\nOptions:\n\n  -arch=\"\"            Space-separated list of architectures to build for\n  -build-toolchain    Build cross-compilation toolchain\n  -cgo                Sets CGO_ENABLED=1, requires proper C toolchain (advanced)\n  -gcflags=\"\"         Additional '-gcflags' value to pass to go build\n  -ldflags=\"\"         Additional '-ldflags' value to pass to go build\n  -asmflags=\"\"        Additional '-asmflags' value to pass to go build\n  -tags=\"\"            Additional '-tags' value to pass to go build\n  -mod=\"\"             Additional '-mod' value to pass to go build\n  -os=\"\"              Space-separated list of operating systems to build for\n  -osarch=\"\"          Space-separated list of os/arch pairs to build for\n  -osarch-list        List supported os/arch pairs for your Go version\n  -output=\"foo\"       Output path template. See below for more info\n  -parallel=-1        Amount of parallelism, defaults to number of CPUs\n  -race               Build with the go race detector enabled, requires CGO\n  -gocmd=\"go\"         Build command, defaults to Go\n  -rebuild            Force rebuilding of package that were up to date\n  -verbose            Verbose mode\n\nOutput path template:\n\n  The output path for the compiled binaries is specified with the\n  \"-output\" flag. The value is a string that is a Go text template.\n  The default value is \"{{.Dir}}_{{.OS}}_{{.Arch}}\". The variables and\n  their values should be self-explanatory.\n\nPlatforms (OS/Arch):\n\n  The operating systems and architectures to cross-compile for may be\n  specified with the \"-arch\" and \"-os\" flags. These are space separated lists\n  of valid GOOS/GOARCH values to build for, respectively. You may prefix an\n  OS or Arch with \"!\" to negate and not build for that platform. If the list\n  is made up of only negations, then the negations will come from the default\n  list.\n\n  Additionally, the \"-osarch\" flag may be used to specify complete os/arch\n  pairs that should be built or ignored. The syntax for this is what you would\n  expect: \"darwin/amd64\" would be a valid osarch value. Multiple can be space\n  separated. An os/arch pair can begin with \"!\" to not build for that platform.\n\n  The \"-osarch\" flag has the highest precedent when determing whether to\n  build for a platform. If it is included in the \"-osarch\" list, it will be\n  built even if the specific os and arch is negated in \"-os\" and \"-arch\",\n  respectively.\n\nPlatform Overrides:\n\n  The \"-gcflags\", \"-ldflags\" and \"-asmflags\" options can be overridden per-platform\n  by using environment variables. Gox will look for environment variables\n  in the following format and use those to override values if they exist:\n\n    GOX_[OS]_[ARCH]_GCFLAGS\n    GOX_[OS]_[ARCH]_LDFLAGS\n    GOX_[OS]_[ARCH]_ASMFLAGS\n\n`\n"
        },
        {
          "name": "main_osarch.go",
          "type": "blob",
          "size": 0.49609375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc mainListOSArch(version string) int {\n\tfmt.Printf(\n\t\t\"Supported OS/Arch combinations for %s are shown below. The \\\"default\\\"\\n\"+\n\t\t\t\"boolean means that if you don't specify an OS/Arch, it will be\\n\"+\n\t\t\t\"included by default. If it isn't a default OS/Arch, you must explicitly\\n\"+\n\t\t\t\"specify that OS/Arch combo for Gox to use it.\\n\\n\",\n\t\tversion)\n\tfor _, p := range SupportedPlatforms(version) {\n\t\tfmt.Printf(\"%s\\t(default: %v)\\n\", p.String(), p.Default)\n\t}\n\n\treturn 0\n}\n"
        },
        {
          "name": "platform.go",
          "type": "blob",
          "size": 6.1328125,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\n\tversion \"github.com/hashicorp/go-version\"\n)\n\n// Platform is a combination of OS/arch that can be built against.\ntype Platform struct {\n\tOS   string\n\tArch string\n\n\t// Default, if true, will be included as a default build target\n\t// if no OS/arch is specified. We try to only set as a default popular\n\t// targets or targets that are generally useful. For example, Android\n\t// is not a default because it is quite rare that you're cross-compiling\n\t// something to Android AND something like Linux.\n\tDefault bool\n}\n\nfunc (p *Platform) String() string {\n\treturn fmt.Sprintf(\"%s/%s\", p.OS, p.Arch)\n}\n\n// addDrop appends all of the \"add\" entries and drops the \"drop\" entries, ignoring\n// the \"Default\" parameter.\nfunc addDrop(base []Platform, add []Platform, drop []Platform) []Platform {\n\tnewPlatforms := make([]Platform, len(base)+len(add))\n\tcopy(newPlatforms, base)\n\tcopy(newPlatforms[len(base):], add)\n\n\t// slow, but we only do this during initialization at most once per version\n\tfor _, platform := range drop {\n\t\tfound := -1\n\t\tfor i := range newPlatforms {\n\t\t\tif newPlatforms[i].Arch == platform.Arch && newPlatforms[i].OS == platform.OS {\n\t\t\t\tfound = i\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif found < 0 {\n\t\t\tpanic(fmt.Sprintf(\"Expected to remove %+v but not found in list %+v\", platform, newPlatforms))\n\t\t}\n\t\tif found == len(newPlatforms)-1 {\n\t\t\tnewPlatforms = newPlatforms[:found]\n\t\t} else if found == 0 {\n\t\t\tnewPlatforms = newPlatforms[found:]\n\t\t} else {\n\t\t\tnewPlatforms = append(newPlatforms[:found], newPlatforms[found+1:]...)\n\t\t}\n\t}\n\treturn newPlatforms\n}\n\nvar (\n\tPlatforms_1_0 = []Platform{\n\t\t{\"darwin\", \"386\", true},\n\t\t{\"darwin\", \"amd64\", true},\n\t\t{\"linux\", \"386\", true},\n\t\t{\"linux\", \"amd64\", true},\n\t\t{\"linux\", \"arm\", true},\n\t\t{\"freebsd\", \"386\", true},\n\t\t{\"freebsd\", \"amd64\", true},\n\t\t{\"openbsd\", \"386\", true},\n\t\t{\"openbsd\", \"amd64\", true},\n\t\t{\"windows\", \"386\", true},\n\t\t{\"windows\", \"amd64\", true},\n\t}\n\n\tPlatforms_1_1 = addDrop(Platforms_1_0, []Platform{\n\t\t{\"freebsd\", \"arm\", true},\n\t\t{\"netbsd\", \"386\", true},\n\t\t{\"netbsd\", \"amd64\", true},\n\t\t{\"netbsd\", \"arm\", true},\n\t\t{\"plan9\", \"386\", false},\n\t}, nil)\n\n\tPlatforms_1_3 = addDrop(Platforms_1_1, []Platform{\n\t\t{\"dragonfly\", \"386\", false},\n\t\t{\"dragonfly\", \"amd64\", false},\n\t\t{\"nacl\", \"amd64\", false},\n\t\t{\"nacl\", \"amd64p32\", false},\n\t\t{\"nacl\", \"arm\", false},\n\t\t{\"solaris\", \"amd64\", false},\n\t}, nil)\n\n\tPlatforms_1_4 = addDrop(Platforms_1_3, []Platform{\n\t\t{\"android\", \"arm\", false},\n\t\t{\"plan9\", \"amd64\", false},\n\t}, nil)\n\n\tPlatforms_1_5 = addDrop(Platforms_1_4, []Platform{\n\t\t{\"darwin\", \"arm\", false},\n\t\t{\"darwin\", \"arm64\", false},\n\t\t{\"linux\", \"arm64\", false},\n\t\t{\"linux\", \"ppc64\", false},\n\t\t{\"linux\", \"ppc64le\", false},\n\t}, nil)\n\n\tPlatforms_1_6 = addDrop(Platforms_1_5, []Platform{\n\t\t{\"android\", \"386\", false},\n\t\t{\"android\", \"amd64\", false},\n\t\t{\"linux\", \"mips64\", false},\n\t\t{\"linux\", \"mips64le\", false},\n\t\t{\"nacl\", \"386\", false},\n\t\t{\"openbsd\", \"arm\", true},\n\t}, nil)\n\n\tPlatforms_1_7 = addDrop(Platforms_1_5, []Platform{\n\t\t// While not fully supported s390x is generally useful\n\t\t{\"linux\", \"s390x\", true},\n\t\t{\"plan9\", \"arm\", false},\n\t\t// Add the 1.6 Platforms, but reflect full support for mips64 and mips64le\n\t\t{\"android\", \"386\", false},\n\t\t{\"android\", \"amd64\", false},\n\t\t{\"linux\", \"mips64\", true},\n\t\t{\"linux\", \"mips64le\", true},\n\t\t{\"nacl\", \"386\", false},\n\t\t{\"openbsd\", \"arm\", true},\n\t}, nil)\n\n\tPlatforms_1_8 = addDrop(Platforms_1_7, []Platform{\n\t\t{\"linux\", \"mips\", true},\n\t\t{\"linux\", \"mipsle\", true},\n\t}, nil)\n\n\t// no new platforms in 1.9\n\tPlatforms_1_9 = Platforms_1_8\n\n\t// unannounced, but dropped support for android/amd64\n\tPlatforms_1_10 = addDrop(Platforms_1_9, nil, []Platform{{\"android\", \"amd64\", false}})\n\n\tPlatforms_1_11 = addDrop(Platforms_1_10, []Platform{\n\t\t{\"js\", \"wasm\", true},\n\t}, nil)\n\n\tPlatforms_1_12 = addDrop(Platforms_1_11, []Platform{\n\t\t{\"aix\", \"ppc64\", false},\n\t\t{\"windows\", \"arm\", true},\n\t}, nil)\n\n\tPlatforms_1_13 = addDrop(Platforms_1_12, []Platform{\n\t\t{\"illumos\", \"amd64\", false},\n\t\t{\"netbsd\", \"arm64\", true},\n\t\t{\"openbsd\", \"arm64\", true},\n\t}, nil)\n\n\tPlatforms_1_14 = addDrop(Platforms_1_13, []Platform{\n\t\t{\"freebsd\", \"arm64\", true},\n\t\t{\"linux\", \"riscv64\", true},\n\t}, []Platform{\n\t\t// drop nacl\n\t\t{\"nacl\", \"386\", false},\n\t\t{\"nacl\", \"amd64\", false},\n\t\t{\"nacl\", \"arm\", false},\n\t})\n\n\tPlatforms_1_15 = addDrop(Platforms_1_14, []Platform{\n\t\t{\"android\", \"arm64\", false},\n\t}, []Platform{\n\t\t// drop i386 macos\n\t\t{\"darwin\", \"386\", false},\n\t})\n\n\tPlatforms_1_16 = addDrop(Platforms_1_15, []Platform{\n\t\t{\"android\", \"amd64\", false},\n\t\t{\"darwin\", \"arm64\", true},\n\t\t{\"openbsd\", \"mips64\", false},\n\t}, nil)\n\n\tPlatforms_1_17 = addDrop(Platforms_1_16, []Platform{\n\t\t{\"windows\", \"arm64\", true},\n\t}, nil)\n\n\t// no new platforms in 1.18\n\tPlatforms_1_18 = Platforms_1_17\n\n\tPlatformsLatest = Platforms_1_18\n)\n\n// SupportedPlatforms returns the full list of supported platforms for\n// the version of Go that is\nfunc SupportedPlatforms(v string) []Platform {\n\t// Use latest if we get an unexpected version string\n\tif !strings.HasPrefix(v, \"go\") {\n\t\treturn PlatformsLatest\n\t}\n\t// go-version only cares about version numbers\n\tv = v[2:]\n\n\tcurrent, err := version.NewVersion(v)\n\tif err != nil {\n\t\tlog.Printf(\"Unable to parse current go version: %s\\n%s\", v, err.Error())\n\n\t\t// Default to latest\n\t\treturn PlatformsLatest\n\t}\n\n\tvar platforms = []struct {\n\t\tconstraint string\n\t\tplat       []Platform\n\t}{\n\t\t{\"<= 1.0\", Platforms_1_0},\n\t\t{\">= 1.1, < 1.3\", Platforms_1_1},\n\t\t{\">= 1.3, < 1.4\", Platforms_1_3},\n\t\t{\">= 1.4, < 1.5\", Platforms_1_4},\n\t\t{\">= 1.5, < 1.6\", Platforms_1_5},\n\t\t{\">= 1.6, < 1.7\", Platforms_1_6},\n\t\t{\">= 1.7, < 1.8\", Platforms_1_7},\n\t\t{\">= 1.8, < 1.9\", Platforms_1_8},\n\t\t{\">= 1.9, < 1.10\", Platforms_1_9},\n\t\t{\">= 1.10, < 1.11\", Platforms_1_10},\n\t\t{\">= 1.11, < 1.12\", Platforms_1_11},\n\t\t{\">= 1.12, < 1.13\", Platforms_1_12},\n\t\t{\">= 1.13, < 1.14\", Platforms_1_13},\n\t\t{\">= 1.14, < 1.15\", Platforms_1_14},\n\t\t{\">= 1.15, < 1.16\", Platforms_1_15},\n\t\t{\">= 1.16, < 1.17\", Platforms_1_16},\n\t\t{\">= 1.17, < 1.18\", Platforms_1_17},\n\t\t{\">= 1.18, < 1.19\", Platforms_1_18},\n\t}\n\n\tfor _, p := range platforms {\n\t\tconstraints, err := version.NewConstraint(p.constraint)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tif constraints.Check(current) {\n\t\t\treturn p.plat\n\t\t}\n\t}\n\n\t// Assume latest\n\treturn PlatformsLatest\n}\n"
        },
        {
          "name": "platform_flag.go",
          "type": "blob",
          "size": 6.1923828125,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"strings\"\n)\n\n// PlatformFlag is a flag.Value (and flag.Getter) implementation that\n// is used to track the os/arch flags on the command-line.\ntype PlatformFlag struct {\n\tOS     []string\n\tArch   []string\n\tOSArch []Platform\n}\n\n// Platforms returns the list of platforms that were set by this flag.\n// The default set of platforms must be passed in.\nfunc (p *PlatformFlag) Platforms(supported []Platform) []Platform {\n\t// NOTE: Reading this method alone is a bit hard to understand. It\n\t// is much easier to understand this method if you pair this with the\n\t// table of test cases it has.\n\n\t// Build a list of OS and archs NOT to build\n\tignoreArch := make(map[string]struct{})\n\tincludeArch := make(map[string]struct{})\n\tignoreOS := make(map[string]struct{})\n\tincludeOS := make(map[string]struct{})\n\tignoreOSArch := make(map[string]Platform)\n\tincludeOSArch := make(map[string]Platform)\n\tfor _, v := range p.Arch {\n\t\tif v[0] == '!' {\n\t\t\tignoreArch[v[1:]] = struct{}{}\n\t\t} else {\n\t\t\tincludeArch[v] = struct{}{}\n\t\t}\n\t}\n\tfor _, v := range p.OS {\n\t\tif v[0] == '!' {\n\t\t\tignoreOS[v[1:]] = struct{}{}\n\t\t} else {\n\t\t\tincludeOS[v] = struct{}{}\n\t\t}\n\t}\n\tfor _, v := range p.OSArch {\n\t\tif v.OS[0] == '!' {\n\t\t\tv = Platform{\n\t\t\t\tOS:   v.OS[1:],\n\t\t\t\tArch: v.Arch,\n\t\t\t}\n\n\t\t\tignoreOSArch[v.String()] = v\n\t\t} else {\n\t\t\tincludeOSArch[v.String()] = v\n\t\t}\n\t}\n\n\t// We're building a list of new platforms, so build the list\n\t// based only on the configured OS/arch pairs.\n\tvar prefilter []Platform = nil\n\tif len(includeOSArch) > 0 {\n\t\tprefilter = make([]Platform, 0, len(p.Arch)*len(p.OS)+len(includeOSArch))\n\t\tfor _, v := range includeOSArch {\n\t\t\tprefilter = append(prefilter, v)\n\t\t}\n\t}\n\n\tif len(includeOS) > 0 && len(includeArch) > 0 {\n\t\t// Build up the list of prefiltered by what is specified\n\t\tif prefilter == nil {\n\t\t\tprefilter = make([]Platform, 0, len(p.Arch)*len(p.OS))\n\t\t}\n\n\t\tfor _, os := range p.OS {\n\t\t\tif _, ok := includeOS[os]; !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor _, arch := range p.Arch {\n\t\t\t\tif _, ok := includeArch[arch]; !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tprefilter = append(prefilter, Platform{\n\t\t\t\t\tOS:   os,\n\t\t\t\t\tArch: arch,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t} else if len(includeOS) > 0 {\n\t\t// Build up the list of prefiltered by what is specified\n\t\tif prefilter == nil {\n\t\t\tprefilter = make([]Platform, 0, len(p.Arch)*len(p.OS))\n\t\t}\n\n\t\tfor _, os := range p.OS {\n\t\t\tfor _, platform := range supported {\n\t\t\t\tif platform.OS == os {\n\t\t\t\t\tprefilter = append(prefilter, platform)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif prefilter != nil {\n\t\t// Remove any that aren't supported\n\t\tresult := make([]Platform, 0, len(prefilter))\n\t\tfor _, pending := range prefilter {\n\t\t\tfound := false\n\t\t\tfor _, platform := range supported {\n\t\t\t\tif pending.String() == platform.String() {\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif found {\n\t\t\t\tadd := pending\n\t\t\t\tadd.Default = false\n\t\t\t\tresult = append(result, add)\n\t\t\t}\n\t\t}\n\n\t\tprefilter = result\n\t}\n\n\tif prefilter == nil {\n\t\tprefilter = make([]Platform, 0, len(supported))\n\t\tfor _, v := range supported {\n\t\t\tif v.Default {\n\t\t\t\tadd := v\n\t\t\t\tadd.Default = false\n\t\t\t\tprefilter = append(prefilter, add)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Go through each default platform and filter out the bad ones\n\tresult := make([]Platform, 0, len(prefilter))\n\tfor _, platform := range prefilter {\n\t\tif len(ignoreOSArch) > 0 {\n\t\t\tif _, ok := ignoreOSArch[platform.String()]; ok {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\t// We only want to check the components (OS and Arch) if we didn't\n\t\t// specifically ask to include it via the osarch.\n\t\tcheckComponents := true\n\t\tif len(includeOSArch) > 0 {\n\t\t\tif _, ok := includeOSArch[platform.String()]; ok {\n\t\t\t\tcheckComponents = false\n\t\t\t}\n\t\t}\n\n\t\tif checkComponents {\n\t\t\tif len(ignoreArch) > 0 {\n\t\t\t\tif _, ok := ignoreArch[platform.Arch]; ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t\tif len(ignoreOS) > 0 {\n\t\t\t\tif _, ok := ignoreOS[platform.OS]; ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t\tif len(includeArch) > 0 {\n\t\t\t\tif _, ok := includeArch[platform.Arch]; !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t\tif len(includeOS) > 0 {\n\t\t\t\tif _, ok := includeOS[platform.OS]; !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tresult = append(result, platform)\n\t}\n\n\treturn result\n}\n\n// ArchFlagValue returns a flag.Value that can be used with the flag\n// package to collect the arches for the flag.\nfunc (p *PlatformFlag) ArchFlagValue() flag.Value {\n\treturn (*appendStringValue)(&p.Arch)\n}\n\n// OSFlagValue returns a flag.Value that can be used with the flag\n// package to collect the operating systems for the flag.\nfunc (p *PlatformFlag) OSFlagValue() flag.Value {\n\treturn (*appendStringValue)(&p.OS)\n}\n\n// OSArchFlagValue returns a flag.Value that can be used with the flag\n// package to collect complete os and arch pairs for the flag.\nfunc (p *PlatformFlag) OSArchFlagValue() flag.Value {\n\treturn (*appendPlatformValue)(&p.OSArch)\n}\n\n// appendPlatformValue is a flag.Value that appends a full platform (os/arch)\n// to a list where the values from space-separated lines. This is used to\n// satisfy the -osarch flag.\ntype appendPlatformValue []Platform\n\nfunc (s *appendPlatformValue) String() string {\n\treturn \"\"\n}\n\nfunc (s *appendPlatformValue) Set(value string) error {\n\tif value == \"\" {\n\t\treturn nil\n\t}\n\n\tfor _, v := range strings.Split(value, \" \") {\n\t\tparts := strings.Split(v, \"/\")\n\t\tif len(parts) != 2 {\n\t\t\treturn fmt.Errorf(\n\t\t\t\t\"Invalid platform syntax: %s should be os/arch\", v)\n\t\t}\n\n\t\tplatform := Platform{\n\t\t\tOS:   strings.ToLower(parts[0]),\n\t\t\tArch: strings.ToLower(parts[1]),\n\t\t}\n\n\t\ts.appendIfMissing(&platform)\n\t}\n\n\treturn nil\n}\n\nfunc (s *appendPlatformValue) appendIfMissing(value *Platform) {\n\tfor _, existing := range *s {\n\t\tif existing == *value {\n\t\t\treturn\n\t\t}\n\t}\n\n\t*s = append(*s, *value)\n}\n\n// appendStringValue is a flag.Value that appends values to the list,\n// where the values come from space-separated lines. This is used to\n// satisfy the -os=\"windows linux\" flag to become []string{\"windows\", \"linux\"}\ntype appendStringValue []string\n\nfunc (s *appendStringValue) String() string {\n\treturn strings.Join(*s, \" \")\n}\n\nfunc (s *appendStringValue) Set(value string) error {\n\tfor _, v := range strings.Split(value, \" \") {\n\t\tif v != \"\" {\n\t\t\ts.appendIfMissing(strings.ToLower(v))\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (s *appendStringValue) appendIfMissing(value string) {\n\tfor _, existing := range *s {\n\t\tif existing == value {\n\t\t\treturn\n\t\t}\n\t}\n\n\t*s = append(*s, value)\n}\n"
        },
        {
          "name": "platform_flag_test.go",
          "type": "blob",
          "size": 5.740234375,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestPlatformFlagPlatforms(t *testing.T) {\n\tcases := []struct {\n\t\tOS        []string\n\t\tArch      []string\n\t\tOSArch    []Platform\n\t\tSupported []Platform\n\t\tResult    []Platform\n\t}{\n\t\t// Building a new list of platforms\n\t\t{\n\t\t\t[]string{\"foo\", \"bar\"},\n\t\t\t[]string{\"baz\"},\n\t\t\t[]Platform{},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"baz\", true},\n\t\t\t\t{\"boo\", \"bop\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"baz\", false},\n\t\t\t\t{\"bar\", \"baz\", false},\n\t\t\t},\n\t\t},\n\n\t\t// Skipping platforms\n\t\t{\n\t\t\t[]string{\"!foo\"},\n\t\t\t[]string{},\n\t\t\t[]Platform{},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"bar\", true},\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"bar\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"bar\", \"bar\", false},\n\t\t\t},\n\t\t},\n\n\t\t// Specifying only an OS\n\t\t{\n\t\t\t[]string{\"foo\"},\n\t\t\t[]string{},\n\t\t\t[]Platform{},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"bar\", true},\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"bar\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"bar\", false},\n\t\t\t\t{\"foo\", \"baz\", false},\n\t\t\t},\n\t\t},\n\n\t\t// Building a new list, but with some skips\n\t\t{\n\t\t\t[]string{\"foo\", \"bar\", \"!foo\"},\n\t\t\t[]string{\"baz\"},\n\t\t\t[]Platform{},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"bar\", true},\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"baz\", true},\n\t\t\t\t{\"baz\", \"bar\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"bar\", \"baz\", false},\n\t\t\t},\n\t\t},\n\n\t\t// Unsupported pairs\n\t\t{\n\t\t\t[]string{\"foo\", \"bar\"},\n\t\t\t[]string{\"baz\"},\n\t\t\t[]Platform{},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"what\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"baz\", false},\n\t\t\t},\n\t\t},\n\n\t\t// OSArch basic\n\t\t{\n\t\t\t[]string{},\n\t\t\t[]string{},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"foo\", \"bar\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"what\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"baz\", false},\n\t\t\t},\n\t\t},\n\n\t\t// Negative OSArch\n\t\t{\n\t\t\t[]string{},\n\t\t\t[]string{},\n\t\t\t[]Platform{\n\t\t\t\t{\"!foo\", \"baz\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"what\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"bar\", \"what\", false},\n\t\t\t},\n\t\t},\n\n\t\t// Mix it all\n\t\t{\n\t\t\t[]string{\"foo\", \"bar\"},\n\t\t\t[]string{\"bar\"},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"!bar\", \"bar\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"bar\", true},\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"bar\", true},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"baz\", false},\n\t\t\t\t{\"foo\", \"bar\", false},\n\t\t\t},\n\t\t},\n\n\t\t// Ignores non-default\n\t\t{\n\t\t\t[]string{},\n\t\t\t[]string{},\n\t\t\t[]Platform{},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"bar\", true},\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"bar\", false},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"bar\", false},\n\t\t\t\t{\"foo\", \"baz\", false},\n\t\t\t},\n\t\t},\n\n\t\t// Adds non-default by OS\n\t\t{\n\t\t\t[]string{\"bar\"},\n\t\t\t[]string{},\n\t\t\t[]Platform{},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"bar\", true},\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"bar\", false},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"bar\", \"bar\", false},\n\t\t\t},\n\t\t},\n\n\t\t// Adds non-default by both\n\t\t{\n\t\t\t[]string{\"bar\"},\n\t\t\t[]string{\"bar\"},\n\t\t\t[]Platform{},\n\t\t\t[]Platform{\n\t\t\t\t{\"foo\", \"bar\", true},\n\t\t\t\t{\"foo\", \"baz\", true},\n\t\t\t\t{\"bar\", \"bar\", false},\n\t\t\t},\n\t\t\t[]Platform{\n\t\t\t\t{\"bar\", \"bar\", false},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tf := PlatformFlag{\n\t\t\tOS:     tc.OS,\n\t\t\tArch:   tc.Arch,\n\t\t\tOSArch: tc.OSArch,\n\t\t}\n\n\t\tresult := f.Platforms(tc.Supported)\n\t\tif !reflect.DeepEqual(result, tc.Result) {\n\t\t\tt.Errorf(\"input: %#v\\nresult: %#v\", f, result)\n\t\t}\n\t}\n}\n\nfunc TestPlatformFlagArchFlagValue(t *testing.T) {\n\tvar f PlatformFlag\n\tval := f.ArchFlagValue()\n\tif err := val.Set(\"foo bar\"); err != nil {\n\t\tt.Fatalf(\"err: %s\", err)\n\t}\n\n\texpected := []string{\"foo\", \"bar\"}\n\tif !reflect.DeepEqual(f.Arch, expected) {\n\t\tt.Fatalf(\"bad: %#v\", f.Arch)\n\t}\n}\n\nfunc TestPlatformFlagOSArchFlagValue(t *testing.T) {\n\tvar f PlatformFlag\n\tval := f.OSArchFlagValue()\n\tif err := val.Set(\"foo/bar\"); err != nil {\n\t\tt.Fatalf(\"err: %s\", err)\n\t}\n\n\texpected := []Platform{{\"foo\", \"bar\", false}}\n\tif !reflect.DeepEqual(f.OSArch, expected) {\n\t\tt.Fatalf(\"bad: %#v\", f.OSArch)\n\t}\n}\n\nfunc TestPlatformFlagOSFlagValue(t *testing.T) {\n\tvar f PlatformFlag\n\tval := f.OSFlagValue()\n\tif err := val.Set(\"foo bar\"); err != nil {\n\t\tt.Fatalf(\"err: %s\", err)\n\t}\n\n\texpected := []string{\"foo\", \"bar\"}\n\tif !reflect.DeepEqual(f.OS, expected) {\n\t\tt.Fatalf(\"bad: %#v\", f.OS)\n\t}\n}\n\nfunc TestAppendPlatformValue_impl(t *testing.T) {\n\tvar _ flag.Value = new(appendPlatformValue)\n}\n\nfunc TestAppendPlatformValue(t *testing.T) {\n\tvar value appendPlatformValue\n\n\tif err := value.Set(\"\"); err != nil {\n\t\tt.Fatalf(\"err: %s\", err)\n\t}\n\n\tif len(value) > 0 {\n\t\tt.Fatalf(\"bad: %#v\", value)\n\t}\n\n\tif err := value.Set(\"windows/arm/bad\"); err == nil {\n\t\tt.Fatal(\"should err\")\n\t}\n\n\tif err := value.Set(\"windows\"); err == nil {\n\t\tt.Fatal(\"should err\")\n\t}\n\n\tif err := value.Set(\"windows/arm windows/386\"); err != nil {\n\t\tt.Fatalf(\"err: %s\", err)\n\t}\n\n\texpected := []Platform{\n\t\t{\"windows\", \"arm\", false},\n\t\t{\"windows\", \"386\", false},\n\t}\n\tif !reflect.DeepEqual([]Platform(value), expected) {\n\t\tt.Fatalf(\"bad: %#v\", value)\n\t}\n}\n\nfunc TestAppendStringValue_impl(t *testing.T) {\n\tvar _ flag.Value = new(appendStringValue)\n}\n\nfunc TestAppendStringValue(t *testing.T) {\n\tvar value appendStringValue\n\n\tif err := value.Set(\"\"); err != nil {\n\t\tt.Fatalf(\"err: %s\", err)\n\t}\n\n\tif len(value) > 0 {\n\t\tt.Fatalf(\"bad: %#v\", value)\n\t}\n\n\tif err := value.Set(\"windows LINUX\"); err != nil {\n\t\tt.Fatalf(\"err: %s\", err)\n\t}\n\n\texpected := []string{\"windows\", \"linux\"}\n\tif !reflect.DeepEqual([]string(value), expected) {\n\t\tt.Fatalf(\"bad: %#v\", value)\n\t}\n\n\tif err := value.Set(\"darwin\"); err != nil {\n\t\tt.Fatalf(\"err: %s\", err)\n\t}\n\n\texpected = []string{\"windows\", \"linux\", \"darwin\"}\n\tif !reflect.DeepEqual([]string(value), expected) {\n\t\tt.Fatalf(\"bad: %#v\", value)\n\t}\n\n\tif err := value.Set(\"darwin\"); err != nil {\n\t\tt.Fatalf(\"err: %s\", err)\n\t}\n\n\texpected = []string{\"windows\", \"linux\", \"darwin\"}\n\tif !reflect.DeepEqual([]string(value), expected) {\n\t\tt.Fatalf(\"bad: %#v\", value)\n\t}\n}\n"
        },
        {
          "name": "platform_test.go",
          "type": "blob",
          "size": 3.2529296875,
          "content": "package main\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestSupportedPlatforms(t *testing.T) {\n\tvar ps []Platform\n\n\tps = SupportedPlatforms(\"go1.0\")\n\tif !reflect.DeepEqual(ps, Platforms_1_0) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.1\")\n\tif !reflect.DeepEqual(ps, Platforms_1_1) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.2\")\n\tif !reflect.DeepEqual(ps, Platforms_1_1) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.3\")\n\tif !reflect.DeepEqual(ps, Platforms_1_3) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.4\")\n\tif !reflect.DeepEqual(ps, Platforms_1_4) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.5\")\n\tif !reflect.DeepEqual(ps, Platforms_1_5) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.6\")\n\tif !reflect.DeepEqual(ps, Platforms_1_6) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.7\")\n\tif !reflect.DeepEqual(ps, Platforms_1_7) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.8\")\n\tif !reflect.DeepEqual(ps, Platforms_1_8) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.9\")\n\tif !reflect.DeepEqual(ps, Platforms_1_9) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.10\")\n\tif !reflect.DeepEqual(ps, Platforms_1_10) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.10\")\n\tif !reflect.DeepEqual(ps, Platforms_1_10) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.11\")\n\tif !reflect.DeepEqual(ps, Platforms_1_11) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.12\")\n\tif !reflect.DeepEqual(ps, Platforms_1_12) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.13\")\n\tif !reflect.DeepEqual(ps, Platforms_1_13) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.14\")\n\tif !reflect.DeepEqual(ps, Platforms_1_14) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.15\")\n\tif !reflect.DeepEqual(ps, Platforms_1_15) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.16\")\n\tif !reflect.DeepEqual(ps, Platforms_1_16) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.17\")\n\tif !reflect.DeepEqual(ps, Platforms_1_17) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.18\")\n\tif !reflect.DeepEqual(ps, Platforms_1_18) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\n\tps = SupportedPlatforms(\"go1.10\")\n\tif !reflect.DeepEqual(ps, Platforms_1_10) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n\t// Unknown\n\tps = SupportedPlatforms(\"foo\")\n\tif !reflect.DeepEqual(ps, PlatformsLatest) {\n\t\tt.Fatalf(\"bad: %#v\", ps)\n\t}\n}\n\nfunc TestMIPS(t *testing.T) {\n\tg16 := SupportedPlatforms(\"go1.6\")\n\tfound := false\n\tfor _, p := range g16 {\n\t\tif p.OS == \"linux\" && p.Arch == \"mips64\" && !p.Default {\n\t\t\tfound = true\n\t\t}\n\t\tif p.OS == \"linux\" && p.Arch == \"mips64\" && p.Default {\n\t\t\tt.Fatalf(\"mips64 should not be default for 1.6, but got %+v, %+v\", p, g16)\n\t\t}\n\t}\n\tif !found {\n\t\tt.Fatal(\"Expected to find linux/mips64/false in go1.6 supported platforms\")\n\t}\n\tfound = false\n\n\tg17 := SupportedPlatforms(\"go1.7\")\n\tfor _, p := range g17 {\n\t\tif p.OS == \"linux\" && p.Arch == \"mips64\" && p.Default {\n\t\t\tfound = true\n\t\t}\n\t\tif p.OS == \"linux\" && p.Arch == \"mips64\" && !p.Default {\n\t\t\tt.Fatal(\"mips64 should be default for 1.7\")\n\t\t}\n\t}\n\tif !found {\n\t\tt.Fatal(\"Expected to find linux/mips64/true in go1.7 supported platforms\")\n\t}\n}\n"
        },
        {
          "name": "toolchain.go",
          "type": "blob",
          "size": 3.8076171875,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"sync\"\n\n\t\"github.com/mitchellh/iochan\"\n)\n\n// The \"main\" method for when the toolchain build is requested.\nfunc mainBuildToolchain(parallel int, platformFlag PlatformFlag, verbose bool) int {\n\tif _, err := exec.LookPath(\"go\"); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"You must have Go already built for your native platform\\n\")\n\t\tfmt.Fprintf(os.Stderr, \"and the `go` binary on the PATH to build toolchains.\\n\")\n\t\treturn 1\n\t}\n\n\t// If we're version 1.5 or greater, then we don't need to do this anymore!\n\tversionParts, err := GoVersionParts()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"error reading Go version: %s\", err)\n\t\treturn 1\n\t}\n\tif versionParts[0] >= 1 && versionParts[1] >= 5 {\n\t\tfmt.Fprintf(\n\t\t\tos.Stderr,\n\t\t\t\"-build-toolchain is no longer required for Go 1.5 or later.\\n\"+\n\t\t\t\t\"You can start using Gox immediately!\\n\")\n\t\treturn 1\n\t}\n\n\tversion, err := GoVersion()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"error reading Go version: %s\", err)\n\t\treturn 1\n\t}\n\n\troot, err := GoRoot()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"error finding GOROOT: %s\\n\", err)\n\t\treturn 1\n\t}\n\n\tif verbose {\n\t\tfmt.Println(\"Verbose mode enabled. Output from building each toolchain will be\")\n\t\tfmt.Println(\"outputted to stdout as they are built.\\n \")\n\t}\n\n\t// Determine the platforms we're building the toolchain for.\n\tplatforms := platformFlag.Platforms(SupportedPlatforms(version))\n\n\t// The toolchain build can't be parallelized.\n\tif parallel > 1 {\n\t\tfmt.Println(\"The toolchain build can't be parallelized because compiling a single\")\n\t\tfmt.Println(\"Go source directory can only be done for one platform at a time. Therefore,\")\n\t\tfmt.Println(\"the toolchain for each platform will be built one at a time.\\n \")\n\t}\n\tparallel = 1\n\n\tvar errorLock sync.Mutex\n\tvar wg sync.WaitGroup\n\terrs := make([]error, 0)\n\tsemaphore := make(chan int, parallel)\n\tfor _, platform := range platforms {\n\t\twg.Add(1)\n\t\tgo func(platform Platform) {\n\t\t\terr := buildToolchain(&wg, semaphore, root, platform, verbose)\n\t\t\tif err != nil {\n\t\t\t\terrorLock.Lock()\n\t\t\t\tdefer errorLock.Unlock()\n\t\t\t\terrs = append(errs, fmt.Errorf(\"%s: %s\", platform.String(), err))\n\t\t\t}\n\t\t}(platform)\n\t}\n\twg.Wait()\n\n\tif len(errs) > 0 {\n\t\tfmt.Fprintf(os.Stderr, \"\\n%d errors occurred:\\n\", len(errs))\n\t\tfor _, err := range errs {\n\t\t\tfmt.Fprintf(os.Stderr, \"%s\\n\", err)\n\t\t}\n\t\treturn 1\n\t}\n\n\treturn 0\n}\n\nfunc buildToolchain(wg *sync.WaitGroup, semaphore chan int, root string, platform Platform, verbose bool) error {\n\tdefer wg.Done()\n\tsemaphore <- 1\n\tdefer func() { <-semaphore }()\n\tfmt.Printf(\"--> Toolchain: %s\\n\", platform.String())\n\n\tscriptName := \"make.bash\"\n\tif runtime.GOOS == \"windows\" {\n\t\tscriptName = \"make.bat\"\n\t}\n\n\tvar stderr bytes.Buffer\n\tvar stdout bytes.Buffer\n\tscriptDir := filepath.Join(root, \"src\")\n\tscriptPath := filepath.Join(scriptDir, scriptName)\n\tcmd := exec.Command(scriptPath, \"--no-clean\")\n\tcmd.Dir = scriptDir\n\tcmd.Env = append(os.Environ(),\n\t\t\"GOARCH=\"+platform.Arch,\n\t\t\"GOOS=\"+platform.OS)\n\tcmd.Stderr = &stderr\n\tcmd.Stdout = &stdout\n\n\tif verbose {\n\t\t// In verbose mode, we output all stdout to the console.\n\t\tr, w := io.Pipe()\n\t\tcmd.Stdout = w\n\t\tcmd.Stderr = io.MultiWriter(cmd.Stderr, w)\n\n\t\t// Send all the output to stdout, and also make a done channel\n\t\t// so that this compilation isn't done until we receive all output\n\t\tdoneCh := make(chan struct{})\n\t\tgo func() {\n\t\t\tdefer close(doneCh)\n\t\t\tfor line := range iochan.DelimReader(r, '\\n') {\n\t\t\t\tfmt.Printf(\"%s: %s\", platform.String(), line)\n\t\t\t}\n\t\t}()\n\t\tdefer func() {\n\t\t\tw.Close()\n\t\t\t<-doneCh\n\t\t}()\n\t}\n\n\tif err := cmd.Start(); err != nil {\n\t\treturn fmt.Errorf(\"Error building '%s': %s\", platform.String(), err)\n\t}\n\n\tif err := cmd.Wait(); err != nil {\n\t\treturn fmt.Errorf(\"Error building '%s'.\\n\\nStdout: %s\\n\\nStderr: %s\\n\",\n\t\t\tplatform.String(), stdout.String(), stderr.String())\n\t}\n\n\treturn nil\n}\n"
        }
      ]
    }
  ]
}