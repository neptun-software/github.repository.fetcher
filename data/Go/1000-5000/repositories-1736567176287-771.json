{
  "metadata": {
    "timestamp": 1736567176287,
    "page": 771,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mailgun/godebug",
      "stars": 2493,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.107421875,
          "content": "language: go\n\ngo:\n  - 1.4\n\ninstall: go install\n\nscript: go test -v --parallel-tests=10\n\nos:\n  - linux\n  - osx\n"
        },
        {
          "name": "Godeps",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.017578125,
          "content": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\"submitted\" means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\nYou must cause any modified files to carry prominent notices stating that You\nchanged the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any\nDerivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents of\nthe NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate\nnotice, with the fields enclosed by brackets \"[]\" replaced with your own\nidentifying information. (Don't include the brackets!) The text should be\nenclosed in the appropriate comment syntax for the file format. We also\nrecommend that a file or class name and description of purpose be included on\nthe same \"printed page\" as the copyright notice for easier identification within\nthird-party archives.\n\n   Copyright [2015] [Rackpace]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3984375,
          "content": "### DEPRECATED! There will be no further development. Please use https://github.com/derekparker/delve. But if you want to keep the project going and ready to become its maintaner please contact us and we can make you one.\n\n\ngodebug\n\n-------\n[![Linux Build Status](https://img.shields.io/travis/mailgun/godebug/master.svg?label=linux)](https://travis-ci.org/mailgun/godebug)\n[![Windows Build Status](https://img.shields.io/appveyor/ci/jeremyschlatter/godebug/master.svg?label=windows)](https://ci.appveyor.com/project/jeremyschlatter/godebug/branch/master)\n\n\nA cross-platform debugger for Go.\n\n### How?\n\n`godebug` uses source code generation to instrument your program with debugging calls. [go tool cover](http://blog.golang.org/cover) takes a similar approach to code coverage. When you run `godebug`, it parses your program, instruments function calls, variable declarations, and statement lines, outputs the resulting code somewhere, and runs/compiles it. When this modified code runs, it stops at breakpoints and lets you step through the program and inspect variables.\n\nFor more detail, see the [end of this README](#how-it-works-more-detail).\n\n### Status\n\n`godebug` is still very new. [File an issue](https://github.com/mailgun/godebug/issues/new) or send me an email if you find any rough edges:\n\n![contact](https://s3.amazonaws.com/f.cl.ly/items/1d0i0W2e3F1K0L3K0Y1N/contact.png)\n\n### Installation:\n\n    $ go get github.com/mailgun/godebug\n\n### Getting started:\n\nInsert a breakpoint anywhere in a source file you want to debug:\n\n    _ = \"breakpoint\"\n\nIf the breakpoint is in package main and you don't want to examine any imported packages, you can just run:\n\n    $ godebug run gofiles... [arguments...]\n\nIf you want to trace the program outside of the main package, list the packages to trace in the `-instrument` flag:\n\n    $ godebug run -instrument=pkg1,pkg2,pkg3 gofiles... [arguments...]\n\nIf you are debugging a test, use 'godebug test' like you would use 'go test':\n\n    $ godebug test [-instrument pkgs...] [packages]\n\nFinally, you can [cross-]compile a debugging binary using 'godebug build':\n\n    $ godebug build [-instrument pkgs...] [-o output] [package]\n\nThe compiled binary has no dependencies, so you can build it locally and then debug on i.e. a staging server.\n\nThat's it. See 'godebug help' for the full usage.\n\n### Debugger commands:\n\nThe current commands are:\n\ncommand              | result\n---------------------|------------------------\nh(elp)               | show help message\nn(ext)               | run the next line\ns(tep)               | run for one step\nc(ontinue)           | run until the next breakpoint\nl(ist)               | show the current line in context of the code around it\np(rint) [expression] | print a variable or any other Go expression\nq(uit)               | exit the program\n\n### Caveats\n\nIt is not currently possible to step into standard library packages. (Issue [#12](https://github.com/mailgun/godebug/issues/12))\n\n### How it works (more detail)\n\nConsider this program:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, world!\")\n}\n```\n\nNow let's modify it a bit:\n\n```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    fmt.Println(`-> fmt.Println(\"Hello, world!\")`)\n    bufio.NewScanner(os.Stdin).Scan()\n    fmt.Println(\"Hello, world!\")\n}\n```\n\nWhen we run this modified version, we see:\n\n    -> fmt.Println(\"Hello, world!\")\n\nAnd then the program waits for input before proceeding.\n\nWe have just implemented a debugger for the first program! It may not seem like much, but this program implements two fundamental debugger behaviors: (1) display the current state of the program, and (2) do not proceed until instructed by the user. Furthermore, the changes we made were straightforward and easy to automate:\n\n  * insert import statements for `bufio` and `os`, if not already present.\n  * in `main()`, insert the statement `fmt.Println(<quote next line>)`\n  * in `main()`, insert the statement `bufio.NewScanner(os.Stdin).Scan()`.\n\nWe could do exactly the same thing for any other program with a single-line main function. And it's not hard to see how to generalize this to multiple lines. This, in essence, is what godebug does. Parse source code, insert extra code that implements the behavior of a debugger for that program, output and run the result. godebug handles many more cases than this simple example and implements more interesting debugging behavior, but the principle is exactly the same.\n"
        },
        {
          "name": "cmd.go",
          "type": "blob",
          "size": 19.7578125,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"flag\"\n\t\"fmt\"\n\t\"go/ast\"\n\t\"go/build\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/mailgun/godebug/Godeps/_workspace/src/bitbucket.org/JeremySchlatter/go-atexit\"\n\t\"github.com/mailgun/godebug/Godeps/_workspace/src/github.com/kisielk/gotool\"\n\t\"github.com/mailgun/godebug/Godeps/_workspace/src/golang.org/x/tools/go/loader\"\n\t\"github.com/mailgun/godebug/gen\"\n)\n\nvar (\n\toutputFlags flag.FlagSet\n\tw           = outputFlags.Bool(\"w\", false, \"write result to (source) file instead of stdout\")\n\n\trunFlags   flag.FlagSet\n\tinstrument = runFlags.String(\"instrument\", \"\", \"extra packages to enable for debugging\")\n\twork       = runFlags.Bool(\"godebugwork\", false, \"print the name of the temporary work directory and do not delete it when exiting\")\n\ttags       = runFlags.String(\"tags\", \"\", \"go build tags\")\n\n\tbuildFlags = runFlags\n\to          = buildFlags.String(\"o\", \"\", \"output binary name\")\n\n\ttestFlags = buildFlags\n\tc         = testFlags.Bool(\"c\", false, \"compile the test binary but do not run it\")\n)\n\nfunc init() {\n\t// Hack for godebug's CI system. The CI can't override PATH in its builders,\n\t// but it can set new environment variables.\n\tif p := os.Getenv(\"GODEBUG_GO_PATH\"); p != \"\" {\n\t\tos.Setenv(\"PATH\", p+string(filepath.ListSeparator)+os.Getenv(\"PATH\"))\n\t}\n}\n\nfunc usage() {\n\tlog.Print(\n\t\t`godebug is a tool for debugging Go programs.\n\nUsage:\n\n        godebug command [arguments]\n\nThe commands are:\n\n    build     compile a debug-ready Go program\n    run       compile, run, and debug a Go program\n    test      compile, run, and debug Go package tests\n\nUse \"godebug help [command]\" for more information about a command.\n`)\n\texit(0)\n}\n\nconst commonArgsUsage = `\nBy default, godebug generates debugging code only for the named\nGo source files, and not their dependencies. This means that in\nthe debugging session you will not be able to step into function\ncalls from imported packages. To instrument other packages,\npass the -instrument flag. Packages are comma-separated and\nmust not be relative.\n\nIf -godebugwork is set, godebug will print the name of the\ntemporary work directory and not delete it when exiting.\n\n-tags works like in 'go help build'.\n`\n\nfunc runUsage() {\n\tlog.Print(\n\t\t`usage: godebug run [-godebugwork] [-instrument pkgs...] [-tags 'tag list'] gofiles... [--] [arguments...]\n\nRun emulates 'go run' behavior. It generates debugging code for the\nnamed *.go files and then compiles and executes the result.\n\nLike 'go run' it takes a list of go files which are treated as a\nsingle main package. The rest of the arguments is passed to the\nbinary. Optionally, a '--' argument ends the list of gofiles.\n` + commonArgsUsage)\n}\n\nfunc buildUsage() {\n\tlog.Print(\n\t\t`usage: godebug build [-godebugwork] [-instrument pkgs...] [-tags 'tag list'] [-o output] [package]\n\nBuild is a wrapper around 'go build'. It generates debugging code for\nthe named target and builds the result.\n\nLike 'go build' it takes a single main package. If arguments are a list\nof *.go files they are treated as a single package. Relative packages are\nnot supported - which means you can't leave the package name out, too.\n\nThe output file naming if -o is not passed works like 'go build' (see\n'go help build') with the addition of the suffix '.debug'.\n` + commonArgsUsage)\n}\n\nfunc testUsage() {\n\tlog.Print(\n\t\t`usage: godebug test [-godebugwork] [-instrument pkgs...] [-tags 'tag list'] [-c] [-o output] [packages] [flags for test binary]\n\nTest is a wrapper around 'go test'. It generates debugging code for\nthe tests in the named packages and runs 'go test' on the result.\n\nAs with 'go test', by default godebug test needs no arguments.\n\nFlags parsing, -c and -o work like for 'go test' - see 'go help test'.\nThe default binary name for -c has the suffix '.test.debug'.\n\nSee also: 'go help testflag'. Note that you have to use the 'test.'\nprefix like '-test.v'.\n` + commonArgsUsage)\n}\n\nfunc outputUsage() {\n\tlog.Print(\n\t\t`usage: godebug output [-w] <packages>\n\nOutput outputs debugging code for <packages>.\n\nBy default, output will print the resulting code to stdout.\nIf the -w flag is given, output will overwrite the original\nsource files. Use with caution.\n\n<packages> may take one of two forms:\n\n    1. A list of *.go source files.\n\n       All of the specified files are loaded, parsed and type-checked\n       as a single package.  All the files must belong to the same directory.\n\n    2. A list of import paths, each denoting a package.\n\n       The package's directory is found relative to the $GOROOT and\n       $GOPATH using similar logic to 'go build', and the *.go files in\n       that directory are loaded, parsed and type-checked as a single\n       package.\n\n       In addition, all *_test.go files in the directory are then loaded\n       and parsed.  Those files whose package declaration equals that of\n       the non-*_test.go files are included in the primary package.  Test\n       files whose package declaration ends with \"_test\" are type-checked\n       as another package, the 'external' test package, so that a single\n       import path may denote two packages.\n`)\n}\n\nfunc main() {\n\tlog.SetFlags(0)\n\tatexit.TrapSignals()\n\tdefer atexit.CallExitFuncs()\n\tif len(os.Args) == 1 {\n\t\tusage()\n\t}\n\tswitch os.Args[1] {\n\tcase \"help\":\n\t\tdoHelp(os.Args[2:])\n\tcase \"output\":\n\t\tdoOutput(os.Args[2:])\n\tcase \"run\":\n\t\tdoRun(os.Args[2:])\n\tcase \"build\":\n\t\tdoBuild(os.Args[2:])\n\tcase \"test\":\n\t\tdoTest(os.Args[2:])\n\tdefault:\n\t\tusage()\n\t}\n}\n\nfunc doHelp(args []string) {\n\tif len(args) == 0 {\n\t\tusage()\n\t}\n\tswitch args[0] {\n\tcase \"output\":\n\t\toutputUsage()\n\tcase \"run\":\n\t\trunUsage()\n\tcase \"build\":\n\t\tbuildUsage()\n\tcase \"test\":\n\t\ttestUsage()\n\tdefault:\n\t\tlog.Printf(\"Unknown help topic `%s`. Run 'godebug help'.\\n\", args[0])\n\t}\n}\n\nfunc doBuild(args []string) {\n\texitIfErr(buildFlags.Parse(args))\n\tgoArgs, isPkg := parseBuildArguments(buildFlags.Args())\n\n\tconf := newLoader()\n\tif isPkg {\n\t\tconf.Import(goArgs[0])\n\t} else {\n\t\texitIfErr(conf.CreateFromFilenames(\"main\", goArgs...))\n\t}\n\n\ttmpDir := generateSourceFiles(&conf, \"build\")\n\ttmpFile := filepath.Join(tmpDir, \"godebug.-i.a.out\")\n\n\tif doGopathWorkaround {\n\t\t// Rebuild stale packages, since this version of Go will not do so by default.\n\t\tshellGo(\"\", []string{\"build\", \"-o\", tmpFile, \"-tags\", *tags, \"-i\"}, goArgs)\n\t}\n\n\tif isPkg {\n\t\tgoArgs = mapPkgsToTmpDir(goArgs)\n\t} else {\n\t\tgoArgs = mapToTmpDir(tmpDir, goArgs)\n\t}\n\n\tbin := filepath.Base(strings.TrimSuffix(goArgs[0], \".go\")) + \".debug\"\n\tif *o != \"\" {\n\t\tbin = *o\n\t}\n\n\tshellGo(tmpDir, []string{\"build\", \"-o\", bin, \"-tags\", *tags}, goArgs)\n}\n\nfunc doRun(args []string) {\n\t// Parse arguments.\n\texitIfErr(runFlags.Parse(args))\n\n\t// Separate the .go files from the arguments to the binary we're building.\n\tgofiles, rest := getGoFiles()\n\tif len(gofiles) == 0 {\n\t\tlogFatal(\"godebug run: no go files listed\")\n\t}\n\n\t// Build a loader.Config from the .go files.\n\tconf := newLoader()\n\texitIfErr(conf.CreateFromFilenames(\"main\", gofiles...))\n\n\ttmpDir := generateSourceFiles(&conf, \"run\")\n\n\tif doGopathWorkaround {\n\t\t// Rebuild stale packages, since this version of Go will not do so by default.\n\t\tshellGo(\"\", []string{\"build\", \"-o\", os.DevNull, \"-tags\", *tags, \"-i\"},\n\t\t\tgofiles)\n\t}\n\n\t// Run 'go build', then run the binary.\n\t// We do this rather than invoking 'go run' directly so we can implement\n\t// the '--' argument, which 'go run' does not have.\n\tbin := filepath.Join(tmpDir, \"godebug.a.out\")\n\tshellGo(tmpDir, []string{\"build\", \"-tags\", *tags, \"-o\", bin},\n\t\tmapToTmpDir(tmpDir, gofiles))\n\tshell(\"\", bin, rest...)\n}\n\nfunc doTest(args []string) {\n\t// Parse arguments.\n\tpackages, testFlags := parseTestArguments(args)\n\n\t// Default to the package in the current directory.\n\tif len(packages) == 0 {\n\t\tpackages = []string{\".\"}\n\t}\n\n\t// Expand ...\n\tpackages = gotool.ImportPaths(packages)\n\n\tif len(packages) > 1 && (*c || *o != \"\") {\n\t\tlogFatal(\"godebug test: cannot use -c or -o flag with multiple packages\")\n\t}\n\n\t// Build a loader.Config from the provided packages.\n\tconf := newLoader()\n\tfor _, pkg := range packages {\n\t\texitIfErr(conf.ImportWithTests(pkg))\n\t}\n\n\ttmpDir := generateSourceFiles(&conf, \"test\")\n\twd := getwd()\n\n\t// Run 'go test -i' once without changing the GOPATH.\n\t// This will recompile and install any out-of-date packages.\n\t// When we modify the GOPATH in the next invocation of the go tool,\n\t// it will not check if any of the uninstrumented dependencies are out-of-date.\n\tshellGo(\"\", []string{\"test\", \"-tags\", *tags, \"-i\"}, packages)\n\n\t// The target binary goes to -o if specified, otherwise to the default name\n\t// if -c is specified, otherwise to the temporary directory.\n\tbin := filepath.Join(tmpDir, \"godebug-test-bin.test\")\n\tif *c {\n\t\tbin = filepath.Base(mapPkgsToTmpDir(packages)[0]) + \".test.debug\"\n\t}\n\tif *o != \"\" {\n\t\tbin = abs(*o)\n\t}\n\n\t// First compile the test with -c and then run the binary directly.\n\t// This resolves some issues that came up with running 'go test' directly:\n\t//    (1) 'go test' changes the working directory to that of the source files of the test.\n\t//    (2) 'go test' does not forward stdin to the test binary.\n\t// Do it once for each package since we can't use -c with multiple packages.\n\tfor _, pkg := range mapPkgsToTmpDir(packages) {\n\t\tif len(packages) > 1 {\n\t\t\tfmt.Println(\"===\", pkg)\n\t\t\tos.Remove(bin)\n\t\t}\n\t\tgoArgs := []string{\"test\", \"-tags\", *tags, \"-c\", \"-o\", bin}\n\t\tshellGo(tmpDir, goArgs, []string{pkg})\n\t\t// Skip execution if no binary was generated (no test files) or -c was passed\n\t\tif _, err := os.Stat(bin); err == nil && !*c {\n\t\t\t_, dir := findUnderGopath(wd, pkg)\n\t\t\tos.Chdir(dir)\n\t\t\tshell(\"\", bin, testFlags...)\n\t\t\tos.Chdir(wd)\n\t\t}\n\t}\n}\n\nfunc generateSourceFiles(conf *loader.Config, subcommand string) (tmpDirPath string) {\n\t// Make a temp directory.\n\ttmpDir := makeTmpDir()\n\tif *work {\n\t\t// Print the name of the directory and don't clean it up on exit.\n\t\tfmt.Println(tmpDir)\n\t} else {\n\t\t// Clean up the directory on exit.\n\t\tatexit.Run(func() {\n\t\t\tremoveDir(tmpDir)\n\t\t})\n\t}\n\n\t// Load the whole program from source files. This almost certainly causes more work than we need to do,\n\t// but it's an easy fix for a few problems I've encountered. Deleting this may be a good target for\n\t// future optimization work.\n\tconf.SourceImports = true\n\n\t// Mark the extra packages we want to instrument.\n\tvar pkgs []string\n\t*instrument = strings.Trim(*instrument, \", \")\n\tif *instrument != \"\" {\n\t\tpkgs = strings.Split(*instrument, \",\")\n\t}\n\tall := false\n\tfor _, pkg := range pkgs {\n\t\t// check for the special reserved package names: \"main\", \"all\", and \"std\"\n\t\t// see 'go help packages'\n\t\tswitch pkg {\n\t\tcase \"main\":\n\t\t\tswitch subcommand {\n\t\t\tcase \"run\": // The main package is always instrumented anyway. Carry on.\n\t\t\tcase \"test\":\n\t\t\t\tlogFatal(`godebug test: can't pass reserved name \"main\" in the -instrument flag.`)\n\t\t\t}\n\t\tcase \"all\":\n\t\t\tif !all {\n\t\t\t\tall = true\n\t\t\t\tfmt.Println(`godebug run: heads up: \"all\" means \"all except std\". godebug can't step into the standard library yet.` + \"\\n\")\n\t\t\t}\n\t\tcase \"std\":\n\t\t\tlogFatalf(\"godebug %s: reserved name \\\"std\\\" cannot be passed in the -instrument flag.\"+\n\t\t\t\t\"\\ngodebug cannot currently instrument packages in the standard library.\"+\n\t\t\t\t\"\\nDo you wish it could? Chime in at https://github.com/mailgun/godebug/issues/12\",\n\t\t\t\tsubcommand)\n\t\tdefault:\n\t\t\tfor _, path := range gotool.ImportPaths([]string{pkg}) { // wildcard \"...\" expansion\n\t\t\t\tconf.Import(path)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Load the program.\n\tprog, err := conf.Load()\n\texitIfErr(err)\n\n\t// If we're in \"all\" mode, mark all but the standard library packages and godebug itself for instrumenting.\n\tstdLib := getStdLibPkgs()\n\tif all {\n\t\tmarkAlmostAllPackages(prog, stdLib)\n\t}\n\n\t// Warn the user if they have breakpoints set in files that we are not instrumenting.\n\tcheckForUnusedBreakpoints(subcommand, prog, stdLib)\n\n\t// Generate debugging-enabled source files.\n\twd := getwd()\n\tgen.Generate(prog, ioutil.ReadFile, func(importPath, filename string) io.WriteCloser {\n\t\tif importPath == \"main\" {\n\t\t\tfilename = filepath.Join(tmpDir, filepath.Base(filename))\n\t\t} else {\n\t\t\timportPath, _ = findUnderGopath(wd, importPath)\n\t\t\texitIfErr(os.MkdirAll(filepath.Join(tmpDir, \"src\", importPath), 0770))\n\t\t\tfilename = filepath.Join(tmpDir, \"src\", importPath, filepath.Base(filename))\n\t\t}\n\t\treturn createFileHook(filename, tmpDir)\n\t})\n\treturn tmpDir\n}\n\nfunc newLoader() loader.Config {\n\tvar conf loader.Config\n\tb := build.Default\n\tb.BuildTags = append(b.BuildTags, strings.Split(*tags, \" \")...)\n\tconf.Build = &b\n\treturn conf\n}\n\nfunc checkForUnusedBreakpoints(subcommand string, prog *loader.Program, stdLib map[string]bool) {\n\tinitialPkgs := make(map[*loader.PackageInfo]bool)\n\tfor _, pkg := range prog.InitialPackages() {\n\t\tinitialPkgs[pkg] = true\n\t}\n\t// For now we'll look at all of the non-stdlib-source files.\n\t// As an optimization, we could just look at files that have been changed.\n\tfor _, pkg := range prog.AllPackages {\n\t\tif stdLib[pkg.String()] || initialPkgs[pkg] {\n\t\t\tcontinue\n\t\t}\n\t\tfor _, f := range pkg.Files {\n\t\t\tast.Inspect(f, func(node ast.Node) bool {\n\t\t\t\tif gen.IsBreakpoint(node) {\n\t\t\t\t\tpos := prog.Fset.Position(node.Pos())\n\t\t\t\t\tfmt.Printf(\"godebug %s: Ignoring breakpoint at %s:%d because package %q has not been flagged for instrumentation. See 'godebug help %s'.\\n\\n\",\n\t\t\t\t\t\tsubcommand, filepath.Join(pkg.String(), filepath.Base(pos.Filename)), pos.Line, pkg.Pkg.Name(), subcommand)\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t})\n\t\t}\n\t}\n}\n\nfunc markAlmostAllPackages(prog *loader.Program, stdLib map[string]bool) {\n\tfor _, pkg := range prog.AllPackages {\n\t\tpath := pkg.String()\n\t\tswitch {\n\n\t\t// skip this package if...\n\t\tcase stdLib[path]: // it's part of the standard library\n\t\tcase prog.ImportMap[path] == nil: // it's a Created package\n\t\tcase strings.HasPrefix(path, \"github.com/mailgun/godebug\"):\n\t\t\t// it's the godebug library or one of its dependecies\n\n\t\t// otherwise include it\n\t\tdefault:\n\t\t\tprog.Imported[pkg.String()] = pkg\n\t\t}\n\t}\n}\n\nfunc getGoFiles() (gofiles, rest []string) {\n\tfor i, arg := range runFlags.Args() {\n\t\tif arg == \"--\" {\n\t\t\trest = runFlags.Args()[i+1:]\n\t\t\tbreak\n\t\t}\n\t\tif !strings.HasSuffix(arg, \".go\") {\n\t\t\trest = runFlags.Args()[i:]\n\t\t\tbreak\n\t\t}\n\t\tgofiles = append(gofiles, arg)\n\t}\n\treturn gofiles, rest\n}\n\nfunc shellGo(tmpDir string, goArgs, packages []string) {\n\tshell(tmpDir, \"go\", append(goArgs, packages...)...)\n}\n\nfunc shell(gopath, command string, args ...string) {\n\tcmd := exec.Command(command, args...)\n\tcmd.Stdout = os.Stdout\n\tcmd.Stdin = os.Stdin\n\tcmd.Stderr = os.Stderr\n\tif gopath != \"\" {\n\t\tsetGopath(cmd, gopath)\n\t}\n\terr := cmd.Run()\n\tswitch err.(type) {\n\tcase nil:\n\tcase *exec.ExitError:\n\t\texit(1)\n\tdefault:\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc setGopath(cmd *exec.Cmd, gopath string) {\n\tcmd.Env = os.Environ()\n\tsawGopath := false\n\tfor i := range cmd.Env {\n\t\tkeyVal := strings.SplitN(cmd.Env[i], \"=\", 2)\n\t\tif keyVal[0] == \"GOPATH\" {\n\t\t\tcmd.Env[i] = \"GOPATH=\" + gopath + string(filepath.ListSeparator) + keyVal[1]\n\t\t}\n\t}\n\tif !sawGopath {\n\t\tcmd.Env = append(cmd.Env, \"GOPATH=\"+gopath)\n\t}\n}\n\nfunc getwd() string {\n\tcwd, err := os.Getwd()\n\tif err != nil {\n\t\tlogFatal(\"godebug needs to know the current working directory, but failed to determine it:\", err)\n\t}\n\treturn cwd\n}\n\nfunc abs(s string) string {\n\tres, err := filepath.Abs(s)\n\tif err != nil {\n\t\tlogFatal(\"failed to make output path absolute\")\n\t}\n\treturn res\n}\n\nfunc mapPkgsToTmpDir(pkgs []string) []string {\n\tresult := make([]string, len(pkgs))\n\tcwd := getwd()\n\tfor i, pkg := range pkgs {\n\t\tresult[i], _ = findUnderGopath(cwd, pkg)\n\t}\n\treturn result\n}\n\nfunc findUnderGopath(cwd, pkg string) (string, string) {\n\tfound, err := build.Import(pkg, cwd, build.FindOnly)\n\tif err != nil {\n\t\tlogFatalf(\"Failed to find package %q in findUnderGopath. This is probably a bug -- please report it at https://github.com/mailgun/godebug/issues/new. Thanks!\", pkg)\n\t}\n\tif found.SrcRoot == \"\" || found.ImportPath == \"\" {\n\t\tlogFatalf(\"Looks like package %q is not in a GOPATH workspace. godebug doesn't support it right now, but if you open a ticket at https://github.com/mailgun/godebug/issues/new we'll fix it soon. Thanks!\", pkg)\n\t}\n\treturn found.ImportPath, found.Dir\n}\n\nfunc mapToTmpDir(tmpDir string, gofiles []string) []string {\n\tresult := make([]string, len(gofiles))\n\tfor i := range gofiles {\n\t\tresult[i] = filepath.Join(tmpDir, filepath.Base(gofiles[i]))\n\t}\n\treturn result\n}\n\nfunc makeTmpDir() (dirname string) {\n\ttmp, err := ioutil.TempDir(\"\", \"godebug\")\n\tif err != nil {\n\t\tlogFatal(\"Failed to create temporary directory:\", err)\n\t}\n\treturn tmp\n}\n\nfunc removeDir(dir string) {\n\tif err := os.RemoveAll(dir); err != nil {\n\t\tlog.Print(\"Failed to clean up temporary directory:\", err)\n\t}\n}\n\nfunc doOutput(args []string) {\n\texitIfErr(outputFlags.Parse(args))\n\n\tvar conf loader.Config\n\trest, err := conf.FromArgs(outputFlags.Args(), true)\n\tif len(rest) > 0 {\n\t\tfmt.Fprintf(os.Stderr, \"Unrecognized arguments:\\n%v\\n\\n\", strings.Join(rest, \"\\n\"))\n\t}\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error identifying packages: %v\\n\\n\", err)\n\t}\n\tif len(rest) > 0 || err != nil {\n\t\tusage()\n\t}\n\tconf.SourceImports = true\n\tprog, err := conf.Load()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error loading packages: %v\\n\\n\", err)\n\t\tusage()\n\t}\n\tgen.Generate(prog, ioutil.ReadFile, func(importPath, filename string) io.WriteCloser {\n\t\tif *w {\n\t\t\treturn createFileHook(filename, \"\")\n\t\t}\n\t\treturn nopCloser{os.Stdout}\n\t})\n}\n\nfunc parseBuildArguments(args []string) ([]string, bool) {\n\tif len(args) == 0 {\n\t\treturn []string{\".\"}, true\n\t}\n\tif len(args) == 1 && !strings.HasSuffix(args[0], \".go\") {\n\t\treturn args, true\n\t}\n\tfor _, a := range args {\n\t\tif !strings.HasSuffix(a, \".go\") {\n\t\t\tlogFatal(\"you can only build a set of files or a single package\")\n\t\t}\n\t}\n\treturn args, false\n}\n\nfunc isFlag(arg, name string) bool {\n\treturn arg == name || strings.HasPrefix(arg, name+\"=\")\n}\n\nfunc parseTestArguments(args []string) (packages, otherFlags []string) {\n\t// format: [-godebugwork] [-instrument pkgs...] [-o=...] [-c] [packages] [testFlags]\n\n\t// Find first unrecognized flag.\n\tsep := len(args)\n\tfor i, arg := range args {\n\t\tif strings.HasPrefix(arg, \"--\") {\n\t\t\targ = arg[1:]\n\t\t}\n\t\tif strings.HasPrefix(arg, \"-\") &&\n\t\t\t!isFlag(arg, \"-instrument\") &&\n\t\t\t!isFlag(arg, \"-godebugwork\") &&\n\t\t\t!isFlag(arg, \"-tags\") &&\n\t\t\t!isFlag(arg, \"-o\") &&\n\t\t\t!isFlag(arg, \"-c\") {\n\t\t\tsep = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\texitIfErr(testFlags.Parse(args[:sep]))\n\treturn testFlags.Args(), args[sep:]\n}\n\nvar (\n\t// For communicating with tests.\n\tlogCreatedFiles bool\n\tlogFileEnvVar   = \"GODEBUG_LOG_CREATED_FILES\"\n\tlogFilePrefix   = \"godebug created file: \"\n)\n\nfunc init() {\n\t// This is only intended for tests, and so is not documented anywhere.\n\tif v := os.Getenv(logFileEnvVar); v != \"\" {\n\t\tlogCreatedFiles, _ = strconv.ParseBool(v)\n\t}\n}\n\n// createFileHook is intended to capture all calls to os.Create.\n// When we run under test, the tests can check if we are creating\n// all and only the files we expect to.\nfunc createFileHook(filename, tmpDir string) *os.File {\n\tif logCreatedFiles {\n\t\tif strings.HasPrefix(filename, tmpDir) {\n\t\t\tlog.Println(logFilePrefix + \"$TMP\" + filename[len(tmpDir):])\n\t\t} else {\n\t\t\tlog.Println(logFilePrefix + filename)\n\t\t}\n\t}\n\tfile, err := os.Create(filename)\n\texitIfErr(err)\n\treturn file\n}\n\nfunc getStdLibPkgs() map[string]bool {\n\tvar (\n\t\tpkgs   = make(map[string]bool)\n\t\tcmd    = exec.Command(\"go\", \"list\", \"std\")\n\t\tstdout = bytes.NewBuffer(nil)\n\t\tstderr = bytes.NewBuffer(nil)\n\t)\n\tcmd.Stdout = stdout\n\tcmd.Stderr = stderr\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to identify standard library packages. godebug should still work, but instrumentation might take longer.\\nHere's the error from running 'go list std':\\n%s\\n\", stderr.Bytes())\n\t}\n\tb := bytes.TrimSpace(stdout.Bytes())\n\tfor _, pkg := range bytes.Split(b, []byte{'\\n'}) {\n\t\tpkgs[string(pkg)] = true\n\t}\n\treturn pkgs\n}\n\ntype nopCloser struct {\n\tio.Writer\n}\n\nfunc (nopCloser) Close() error {\n\treturn nil\n}\n\nfunc exitIfErr(err error) {\n\tif err != nil {\n\t\tlogFatal(err)\n\t}\n}\n\nfunc logFatal(v ...interface{}) {\n\tatexit.CallExitFuncs()\n\tlog.Fatal(v...)\n}\n\nfunc logFatalf(format string, v ...interface{}) {\n\tatexit.CallExitFuncs()\n\tlog.Fatalf(format, v...)\n}\n\nfunc exit(n int) {\n\tatexit.CallExitFuncs()\n\tos.Exit(n)\n}\n"
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 0.166015625,
          "content": "/*\nCommand godebug provides debugging for Go packages.\n\nExample Usage\n\nGenerate debugging code for the package in the current directory:\n\n\t$ godebug -w .\n*/\npackage main\n"
        },
        {
          "name": "endtoend_cli_test.go",
          "type": "blob",
          "size": 6.958984375,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"github.com/mailgun/godebug/Godeps/_workspace/src/github.com/kylelemons/godebug/diff\"\n\t\"github.com/mailgun/godebug/Godeps/_workspace/src/gopkg.in/yaml.v2\"\n)\n\nvar parallel = flag.Int(\"parallel-tests\", 40, \"Max number of CLI tests to run in parallel\")\n\n// This file runs tests in the testdata directory, excluding those in testdata/single-file-tests\n\nfunc TestCLISessions(t *testing.T) {\n\tif !flag.Parsed() {\n\t\tflag.Parse()\n\t}\n\n\tgodebug := compileGodebug(t)\n\tdefer os.Remove(godebug)\n\n\t// Read the testdata directory\n\tfd, err := os.Open(\"testdata\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer fd.Close()\n\tnames, err := fd.Readdirnames(-1)\n\tif err != nil {\n\t\tt.Fatal(\"Readdirnames:\", err)\n\t}\n\ttests := make([]string, 0, len(names))\n\tfor _, name := range names {\n\t\tif strings.HasSuffix(name, \".yaml\") {\n\t\t\ttests = append(tests, name)\n\t\t}\n\t}\n\n\t// Run tests in parallel\n\tvar wg sync.WaitGroup\n\t// If we run too many tests at once we can exceed our file descriptor limit.\n\tlim := make(chan bool, *parallel)\n\tfor _, test := range tests {\n\t\tfor _, tt := range parseCases(t, filepath.Join(\"testdata\", test)) {\n\t\t\ts := parseSessionFromBytes([]byte(tt.Transcript))\n\t\t\tfor i := range tt.Invocations {\n\t\t\t\twg.Add(1)\n\t\t\t\tlim <- true\n\t\t\t\tgo func(filename string, s *session, tt testCase, i int) {\n\t\t\t\t\tdefer func() {\n\t\t\t\t\t\t<-lim\n\t\t\t\t\t}()\n\t\t\t\t\tdefer wg.Done()\n\t\t\t\t\trunTest(t, godebug, filename, tt, i, s)\n\t\t\t\t}(test, s, tt, i)\n\t\t\t}\n\t\t}\n\t}\n\twg.Wait()\n}\n\ntype testCase struct {\n\tInvocations []struct {\n\t\tDir, Cmd string\n\t}\n\tDesc, Transcript string\n\tCreates          []string\n\tNonzeroExit      bool `yaml:\"nonzero_exit\"`\n\tGodebugwork      bool\n}\n\nfunc parseCases(t *testing.T, filename string) []testCase {\n\tb, err := ioutil.ReadFile(filename)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tbb := bytes.Split(b, []byte(\"\\n---\\n\"))\n\ttestCases := make([]testCase, len(bb))\n\tfor i := range bb {\n\t\tif err = yaml.Unmarshal(bb[i], &testCases[i]); err != nil {\n\t\t\tfmt.Println(string(bb[i]))\n\t\t\tt.Fatal(err)\n\t\t}\n\t}\n\treturn testCases\n}\n\nfunc runTest(t *testing.T, godebug, filename string, tt testCase, i int, session *session) {\n\tvar buf bytes.Buffer\n\tcommand, dir := tt.Invocations[i].Cmd, tt.Invocations[i].Dir\n\tcmd := exec.Command(godebug, strings.Split(command, \" \")[1:]...)\n\tcmd.Dir = filepath.FromSlash(\"testdata/test-filesystem/\" + dir)\n\tcmd.Stdout = &buf\n\tcmd.Stderr = &buf\n\tcmd.Stdin = bytes.NewReader(session.input)\n\tsetTestGopath(t, cmd)\n\n\t// Show multiple errors if they exist and format them nicely.\n\tvar errs []string\n\tdefer func() {\n\t\tif errs != nil {\n\t\t\tt.Errorf(\"File: %s\\nDescription: %s\\nWorking dir: %s\\nCommand: %s\\nFailures:\\n\\t%v\",\n\t\t\t\tfilename, tt.Desc, dir, command, strings.Join(errs, \"\\n\\t\"))\n\t\t}\n\t}()\n\n\tcmd.Env = append(cmd.Env, logFileEnvVar+\"=true\")\n\terr := cmd.Run()\n\t// Because we set `logFileEnvVar` above, godebug will print the\n\t// files it creates to stdout. Parse those lines and then pretend\n\t// they were not printed.\n\toutput := stripTestPrefix(buf.Bytes())\n\tcreatedFiles, output := recordCreatedFiles(output)\n\n\tswitch err.(type) {\n\tcase nil:\n\t\tif tt.NonzeroExit {\n\t\t\terrs = append(errs, \"got exit code == 0, wanted a nonzero exit code.\")\n\t\t\treturn\n\t\t}\n\tcase *exec.ExitError:\n\t\tif !tt.NonzeroExit {\n\t\t\terrs = append(errs, fmt.Sprintf(\"%q failed to run: %v\\n%s\", command, err, output))\n\t\t\treturn\n\t\t}\n\tdefault:\n\t\terrs = append(errs, fmt.Sprintf(\"%q failed to run: %v\\n%s\", command, err, output))\n\t\treturn\n\t}\n\n\t// Check that we created the files we expected and did not create\n\t// any files we did not expect.\n\terrs = append(errs, checkCreatedFiles(t, createdFiles, tt.Creates)...)\n\n\tif tt.Godebugwork {\n\t\toutput, err = checkGodebugwork(t, session.fullSession, output)\n\t\tif err != nil {\n\t\t\terrs = append(errs, err.Error())\n\t\t}\n\t}\n\n\tgot := interleaveCommands(session.input, output)\n\tif equivalent(got, session.fullSession) {\n\t\treturn\n\t}\n\terrs = append(errs, fmt.Sprintf(\"golden transcript did not match actual transcript. Diff:\\n\\n%v\", diff.Diff(string(session.fullSession), string(got))))\n}\n\nfunc checkGodebugwork(t *testing.T, transcript, output []byte) ([]byte, error) {\n\tif !bytes.HasPrefix(transcript, []byte(\"$TMP\\n\")) {\n\t\treturn output, errors.New(`incorrect test: set \"godebugwork: true\" but did not prepend \"$TMP\\n\" to the output`)\n\t}\n\n\ttmpDir := string(bytes.SplitN(output, newline, 2)[0])\n\tif !strings.HasPrefix(tmpDir, os.TempDir()) {\n\t\treturn output, fmt.Errorf(\"got %q as first line of output, expected a temporary directory\", tmpDir)\n\t}\n\n\t_, err := os.Stat(tmpDir)\n\tif os.IsNotExist(err) {\n\t\treturn output, fmt.Errorf(\"godebug deleted the temporary directory %q when -godebugwork was passed\", tmpDir)\n\t}\n\n\tif err != nil {\n\t\treturn output, fmt.Errorf(\"failed to stat temporary directory %q:  %s\", tmpDir, err)\n\t}\n\n\toutput = append([]byte(\"$TMP\\n\"), output[len(tmpDir)+1:]...)\n\tif err = os.RemoveAll(tmpDir); err != nil {\n\t\treturn output, fmt.Errorf(\"failed to remove temporary directory: %v\", err)\n\t}\n\n\treturn output, nil\n}\n\nfunc checkCreatedFiles(t *testing.T, g, w []string) (errs []string) {\n\tfor i, f := range w {\n\t\tw[i] = filepath.FromSlash(f)\n\t}\n\tgot, want := listToMap(g), listToMap(w)\n\tfor f := range got {\n\t\tif !want[f] {\n\t\t\terrs = append(errs, \"created a file we did not want: \"+f)\n\t\t}\n\t}\n\tfor f := range want {\n\t\tif !got[f] {\n\t\t\terrs = append(errs, \"did not create a file we wanted: \"+f)\n\t\t}\n\t}\n\treturn errs\n}\n\nfunc recordCreatedFiles(b []byte) (files []string, rest []byte) {\n\tbb := bytes.Split(b, newline)\n\n\tfor i := range bb {\n\t\tif bytes.HasPrefix(bb[i], []byte(logFilePrefix)) {\n\t\t\tfiles = append(files, string(bb[i][len(logFilePrefix):]))\n\t\t} else {\n\t\t\trest = append(rest, bb[i]...)\n\t\t\tif i+1 < len(bb) {\n\t\t\t\trest = append(rest, newline...)\n\t\t\t}\n\t\t}\n\t}\n\treturn files, rest\n}\n\nfunc listToMap(list []string) map[string]bool {\n\tm := make(map[string]bool)\n\tfor _, s := range list {\n\t\tm[s] = true\n\t}\n\treturn m\n}\n\n// equivalent does a linewise comparison of a and b.\n// For each line:\n//    got exactly equals want OR\n//    want ends in \" //substr\" and is a substring of got OR\n//    want ends in \" //slashes\" and runtime.GOOS == \"windows\" and got equals want with its slashes swapped for backslashes\n// Otherwise equivalent returns false.\nfunc equivalent(got, want []byte) bool {\n\tvar (\n\t\tgotLines  = bytes.Split(got, newline)\n\t\twantLines = bytes.Split(want, newline)\n\t\tsubstr    = []byte(\" //substr\")\n\t\tslashes   = []byte(\" //slashes\")\n\t\tslash     = []byte{'/'}\n\t\tgg, ww    []byte\n\t)\n\n\tif len(gotLines) != len(wantLines) {\n\t\treturn false\n\t}\n\n\tfor i := range gotLines {\n\t\tgg, ww = gotLines[i], wantLines[i]\n\t\tif bytes.HasSuffix(ww, slashes) {\n\t\t\tww = bytes.Replace(ww[:len(ww)-len(slashes)], slash, []byte{filepath.Separator}, -1)\n\t\t}\n\t\tif !(bytes.Equal(gg, ww) || bytes.HasSuffix(ww, substr) && bytes.Contains(gg, ww[:len(ww)-len(substr)])) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc setTestGopath(t *testing.T, cmd *exec.Cmd) {\n\tcwd, err := os.Getwd()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tsetGopath(cmd, filepath.Join(cwd, \"testdata\", \"test-filesystem\", \"gopath\"))\n}\n"
        },
        {
          "name": "endtoend_test.go",
          "type": "blob",
          "size": 8.205078125,
          "content": "package main\n\n// Partially modeled after golang.org/x/tools/cmd/stringer/endtoendtest.go\n\n// This file runs tests in the testdata/single-file-tests directory\n\nimport (\n\t\"bytes\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"runtime\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"github.com/mailgun/godebug/Godeps/_workspace/src/github.com/kylelemons/godebug/diff\"\n)\n\nvar (\n\tfiles         = flag.String(\"files\", \"\", `Comma-separated list of files in the testdata/single-file-tests directory to check. e.g. \"example,name-conflicts\". If not set, all of them will be checked.`)\n\taccept        = flag.Bool(\"accept\", false, \"Accept the output of the program as the new golden file.\")\n\tacceptSession = flag.Bool(\"accept-session\", false, \"If a *-session.txt file exists for a given test, accept any differences from running a new session and overwrite the file.\")\n)\n\nfunc compileGodebug(t *testing.T) (filename string) {\n\tf, err := ioutil.TempFile(\"\", \"godebug\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tf.Close()\n\tgodebug := f.Name()\n\tvar exe string\n\tif runtime.GOOS == \"windows\" {\n\t\texe = \".exe\"\n\t}\n\tcmd := exec.Command(\"go\", \"build\", \"-o\", godebug+exe, \"-ldflags=\"+buildModeFlag)\n\tcmd.Stderr = os.Stderr\n\terr = cmd.Run()\n\tif err != nil {\n\t\tos.Remove(godebug)\n\t\tt.Fatal(\"failed to build godebug:\", err)\n\t}\n\treturn godebug\n}\n\n// stripTestPrefix removes the note that godebug prints when it is built in test mode.\nfunc stripTestPrefix(b []byte) []byte {\n\tprefix := []byte(\"godebug: test mode build\\n\")\n\tif !bytes.HasPrefix(b, prefix) {\n\t\tpanic(\"Expected test mode note, but did not get one\")\n\t}\n\treturn b[len(prefix):]\n}\n\nfunc readDirNames(t *testing.T, dir string) (names []string) {\n\tfd, err := os.Open(dir)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer fd.Close()\n\tnames, err = fd.Readdirnames(-1)\n\tif err != nil {\n\t\tt.Fatal(\"Readdirnames:\", err)\n\t}\n\treturn\n}\n\nfunc TestGoldenFiles(t *testing.T) {\n\tgodebug := compileGodebug(t)\n\tdefer os.Remove(godebug)\n\n\tdirname := filepath.FromSlash(\"testdata/single-file-tests\")\n\n\ttests := make(map[string]bool)\n\tsessions := make(map[string][]string)\n\tif *files != \"\" {\n\t\tfor _, name := range strings.Split(*files, \",\") {\n\t\t\ttests[name] = true\n\t\t}\n\t}\n\n\tre := regexp.MustCompile(`(.*)-(?:out.go|in.go|(session(?:.*).txt))`)\n\n\tfor _, name := range readDirNames(t, dirname) {\n\t\tif name == \"README.md\" {\n\t\t\tcontinue\n\t\t}\n\t\tgroups := re.FindStringSubmatch(name)\n\t\tif groups == nil {\n\t\t\tt.Fatal(\"Unexpected file in testdata directory:\", name)\n\t\t}\n\t\tprefix, sessionName := groups[1], groups[2]\n\t\tif sessionName != \"\" {\n\t\t\tsessions[prefix] = append(sessions[prefix], name)\n\t\t\tcontinue\n\t\t}\n\t\tif *files == \"\" {\n\t\t\ttests[prefix] = true\n\t\t\tcontinue\n\t\t}\n\t\tif !tests[prefix] {\n\t\t\tfmt.Printf(\"Skipping golden test %q\\n\", prefix)\n\t\t}\n\t}\n\tvar wg sync.WaitGroup\n\twg.Add(len(tests))\n\tfor test := range tests {\n\t\tgo func(test string) {\n\t\t\tdefer wg.Done()\n\t\t\toneTest(t, godebug, test, dirname, sessions[test])\n\t\t}(test)\n\t}\n\twg.Wait()\n}\n\nvar gopherjsAvailable = false\n\nfunc init() {\n\tif _, err := exec.LookPath(\"gopherjs\"); err == nil {\n\t\tgopherjsAvailable = true\n\t} else {\n\t\tfmt.Println(\"gopherjs is not in PATH. Skipping gopherjs tests.\")\n\t}\n}\n\nfunc oneTest(t *testing.T, godebug, test, dirname string, goldenSessions []string) {\n\tcompareGolden(t, godebug, test)\n\tif len(goldenSessions) == 0 {\n\t\trunGolden(t, test, \"go\", nil)\n\t\tif gopherjsAvailable {\n\t\t\trunGolden(t, test, \"gopherjs\", nil)\n\t\t}\n\t}\n\tvar wg sync.WaitGroup\n\twg.Add(len(goldenSessions))\n\tfor _, filename := range goldenSessions {\n\t\tgo func(filename string) {\n\t\t\tdefer wg.Done()\n\t\t\ts := parseSession(t, filepath.Join(dirname, filename))\n\t\t\trunGolden(t, test, \"go\", s)\n\t\t\tif gopherjsAvailable {\n\t\t\t\trunGolden(t, test, \"gopherjs\", s)\n\t\t\t}\n\t\t}(filename)\n\t}\n\twg.Wait()\n}\n\nfunc goldenOutput(testName string) (filename string) {\n\treturn filepath.Join(\"testdata\", \"single-file-tests\", testName+\"-out.go\")\n}\n\nfunc testInput(testName string) (filename string) {\n\treturn filepath.Join(\"testdata\", \"single-file-tests\", testName+\"-in.go\")\n}\n\nfunc compareGolden(t *testing.T, godebug, test string) {\n\tgolden, err := ioutil.ReadFile(goldenOutput(test))\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tgolden = normalizeCRLF(golden)\n\tcmd := exec.Command(godebug, \"output\", testInput(test))\n\tvar buf bytes.Buffer\n\tcmd.Stdout = &buf\n\tcmd.Stderr = os.Stderr\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(buf.String())\n\t\tt.Fatal(err)\n\t}\n\toutput := stripTestPrefix(buf.Bytes())\n\tif !bytes.Equal(output, golden) {\n\t\tif *accept {\n\t\t\tif err = ioutil.WriteFile(goldenOutput(test), output, 0644); err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tt.Errorf(\"%s: want != got. Diff:\\n%s\", test, diff.Diff(string(golden), string(output)))\n\t}\n}\n\ntype session struct {\n\t// The bytes to send to stdin.\n\tinput []byte\n\n\t// A transcript of the session as it would appear if run interactively in a terminal.\n\tfullSession []byte\n\n\t// The filename of this session inside testdata/single-file-tests/.\n\tfilename string\n\n\t// The directory to change to before running cmd.\n\tworkingDir string\n\n\t// The command to run. The first element must be \"godebug\".\n\tcmd []string\n\n\t// A comment at the top of the session file.\n\tcomment string\n}\n\nfunc runGolden(t *testing.T, test, tool string, s *session) {\n\tvar buf bytes.Buffer\n\tcmd := exec.Command(tool, \"run\", goldenOutput(test))\n\tif s != nil {\n\t\tcmd.Stdin = bytes.NewReader(s.input)\n\t}\n\tcmd.Stdout = &buf\n\tcmd.Stderr = &buf\n\tif err := cmd.Run(); err != nil {\n\t\tt.Errorf(\"Golden file %s-out.go failed to run under '%s run': %v\\n%s\", test, tool, err, buf.Bytes())\n\t}\n\tif s != nil {\n\t\tcheckOutput(t, s, tool, buf.Bytes())\n\t}\n}\n\nfunc checkOutput(t *testing.T, want *session, tool string, output []byte) {\n\ttestName := filepath.Base(want.filename)\n\tfmt.Printf(\"checking %s (%s)\\n\", testName, tool)\n\tgot := interleaveCommands(want.input, output)\n\tif bytes.Equal(got, want.fullSession) {\n\t\treturn\n\t}\n\n\tif *acceptSession {\n\t\tif want.comment != \"\" {\n\t\t\tgot = append([]byte(want.comment+\"\\n\"), got...)\n\t\t}\n\t\tif err := ioutil.WriteFile(want.filename, got, 0644); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\treturn\n\t}\n\n\tt.Errorf(\"%s: Session did not match. Tool: %s, Diff:\\n%v\", testName, tool, diff.Diff(string(want.fullSession), string(got)))\n}\n\nvar prompt = []byte(\"(godebug) \")\nvar newline = []byte(\"\\n\")\n\n// interleaveCommands reconstructs what a terminal session would have looked like,\n// given the bytes sent to stdin and the bytes received from stdout. It assumes\n// input only happens after prompts.\nfunc interleaveCommands(input, output []byte) (combined []byte) {\n\tlinesIn := bytes.Split(input, newline)\n\tif len(input) == 0 {\n\t\tlinesIn = nil\n\t} else if input[len(input)-1] == '\\n' {\n\t\tlinesIn = linesIn[:len(linesIn)-1]\n\t}\n\tchunks := bytes.Split(output, prompt)\n\tfor i, chunk := range chunks {\n\t\tcombined = append(combined, chunk...)\n\t\tif i != len(chunks)-1 && len(linesIn) > 0 {\n\t\t\tcombined = append(combined, prompt...)\n\t\t\tcombined = append(combined, linesIn[0]...)\n\t\t\tcombined = append(combined, '\\n')\n\t\t\tlinesIn = linesIn[1:]\n\t\t}\n\t}\n\tfor _, line := range linesIn {\n\t\tcombined = append(combined, line...)\n\t\tcombined = append(combined, '\\n')\n\t}\n\treturn combined\n}\n\nfunc parseSession(t *testing.T, filename string) *session {\n\tb, err := ioutil.ReadFile(filename)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\ts := parseSessionFromBytes(b)\n\ts.filename = filename\n\treturn s\n}\n\nfunc parseSessionFromBytes(b []byte) *session {\n\tvar s session\n\n\tb = normalizeCRLF(b)\n\n\tif bytes.HasSuffix(b, newline) {\n\t\tb = b[:len(b)-1]\n\t}\n\n\tlines := bytes.Split(b, newline)\n\tlines, comment := removeSessionComment(lines)\n\ts.comment = string(bytes.Join(comment, newline))\n\n\tfor _, line := range lines {\n\t\tif bytes.HasSuffix(line, []byte{'\\r'}) { // convert CRLF to LF\n\t\t\tline = line[:len(line)-1]\n\t\t}\n\t\tline = append(line, '\\n')\n\n\t\tif bytes.HasPrefix(line, prompt) {\n\t\t\ts.input = append(s.input, line[len(prompt):]...)\n\t\t}\n\t\ts.fullSession = append(s.fullSession, line...)\n\t}\n\n\treturn &s\n}\n\n// Scan past top of file comment. The top of file comment consists of any number of consecutive\n// lines that are either blank or begin with the string \"//\".\nfunc removeSessionComment(lines [][]byte) (content, comment [][]byte) {\n\tfor i := range lines {\n\t\tif len(lines[i]) > 0 && !bytes.HasPrefix(lines[i], []byte(\"//\")) {\n\t\t\treturn lines[i:], lines[:i]\n\t\t}\n\t}\n\treturn nil, lines\n}\n\nfunc normalizeCRLF(b []byte) []byte {\n\treturn bytes.Replace(b, []byte(\"\\r\\n\"), []byte(\"\\n\"), -1)\n}\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "go_14.go",
          "type": "blob",
          "size": 0.537109375,
          "content": "// +build !go1.5\n\npackage main\n\n// Prior to Go 1.5, the go tool would not rebuild stale package outside of the\n// current GOPATH directory. This is a problem for godebug, because it creates\n// temporary instrumented versions of packages in a separate directory from the\n// user's regular GOPATH. For versions of Go before 1.5, godebug needs to\n// work around this.\n//\n// See https://github.com/golang/go/issues/10509\nconst doGopathWorkaround = true\n\n// Old syntax for -X flag.\nconst buildModeFlag = \"-X github.com/mailgun/godebug/lib.buildMode test\"\n"
        },
        {
          "name": "go_15.go",
          "type": "blob",
          "size": 0.537109375,
          "content": "// +build go1.5\n\npackage main\n\n// Prior to Go 1.5, the go tool would not rebuild stale package outside of the\n// current GOPATH directory. This is a problem for godebug, because it creates\n// temporary instrumented versions of packages in a separate directory from the\n// user's regular GOPATH. For versions of Go before 1.5, godebug needs to\n// work around this.\n//\n// See https://github.com/golang/go/issues/10509\nconst doGopathWorkaround = false\n\n// New syntax for -X flag.\nconst buildModeFlag = \"-X github.com/mailgun/godebug/lib.buildMode=test\"\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc_test.go",
          "type": "blob",
          "size": 6.373046875,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestUpdatedSource(t *testing.T) {\n\t// A note on GOPATH directories.\n\t//\n\t// The $GOPATH environment variable can point to multiple directories.\n\t// When the go tool looks for a package, it checks these directories\n\t// one by one until it finds the package or determines that the package\n\t// is not present in any of the directories.\n\t//\n\t// A fact about this process that surprised me is documented in the\n\t// following comment taken from $GOROOT/src/cmd/go/pkg.go:\n\t//\n\t//     If a package p is not in the same tree as any package named on the\n\t//     command-line, assume [the installed package file] is up-to-date no\n\t//     matter what the modification times on the source files indicate.\n\t//     ...\n\t//     See issue 3149.\n\t//\n\t// godebug sets GOPATH=<godebug-generated-packages>:$GOPATH before\n\t// running the go tool. Since <godebug-generated-packages> includes\n\t// all of the packages named on the command-line, this meant that\n\t// the go tool considered _everything_ in the normal $GOPATH to be\n\t// up-to-date, and didn't recompile any of it.\n\t//\n\t// This behavior has led to some surprising results, where\n\t// non-godebug-instrumented packages would run whatever code was last\n\t// installed rather than the code that was sitting on disk in src/.\n\t//\n\t// This test checks that godebug no longer has that behavior.\n\n\t// The package that will be named on the command-line.\n\tmain := []byte(\n\t\t`package main\n\n\t\timport \"foo\"\n\n\t\tfunc main() { foo.Foo() }\n\t\t`)\n\tmainTest := []byte(\n\t\t`package main\n\n\t\timport (\n\t\t\t\"testing\"\n\n\t\t\t\"foo\"\n\t\t)\n\n\t\tfunc TestFoo(t *testing.T) { foo.Foo() }\n\t\t`)\n\n\t// The old package that will be installed in pkg/.\n\tfoo1 := []byte(\n\t\t`package foo\n\n\t\timport \"fmt\"\n\n\t\tfunc Foo() { fmt.Println(\"foo v1\") }\n\t\t`)\n\n\t// The new package that will be sitting in src/.\n\tfoo2 := []byte(\n\t\t`package foo\n\n\t\timport \"fmt\"\n\n\t\tfunc Foo() { fmt.Println(\"foo v2\") }\n\t\t`)\n\n\t// Initial filesystem state.\n\ttmpDir, err := ioutil.TempDir(\"\", \"godebug-test\")\n\tcheckErr(t, err)\n\tdefer os.RemoveAll(tmpDir)\n\tcheckErr(t, os.MkdirAll(filepath.Join(tmpDir, \"src\", \"foo\"), 0770))\n\tcheckErr(t, os.MkdirAll(filepath.Join(tmpDir, \"src\", \"bar\"), 0770))\n\tcheckErr(t, ioutil.WriteFile(filepath.Join(tmpDir, \"src\", \"bar\", \"main.go\"), main, 0660))\n\tcheckErr(t, ioutil.WriteFile(filepath.Join(tmpDir, \"src\", \"bar\", \"main_test.go\"), mainTest, 0660))\n\tcheckErr(t, ioutil.WriteFile(filepath.Join(tmpDir, \"src\", \"foo\", \"foo.go\"), foo1, 0660))\n\tcopyFiles(t, filepath.Join(tmpDir, \"src\", \"github.com\", \"mailgun\", \"godebug\", \"lib\"), \"lib\")\n\tcopyFiles(t,\n\t\tfilepath.Join(tmpDir, \"src\", \"github.com\", \"mailgun\", \"godebug\", \"Godeps\", \"_workspace\", \"src\", \"github.com\", \"jtolds\", \"gls\"),\n\t\tfilepath.Join(os.Getenv(\"GOPATH\"), \"src\", \"github.com\", \"mailgun\", \"godebug\", \"Godeps\", \"_workspace\", \"src\", \"github.com\", \"jtolds\", \"gls\"))\n\tcopyFiles(t,\n\t\tfilepath.Join(tmpDir, \"src\", \"github.com\", \"mailgun\", \"godebug\", \"Godeps\", \"_workspace\", \"src\", \"github.com\", \"0xfaded\", \"eval\"),\n\t\tfilepath.Join(os.Getenv(\"GOPATH\"), \"src\", \"github.com\", \"mailgun\", \"godebug\", \"Godeps\", \"_workspace\", \"src\", \"github.com\", \"0xfaded\", \"eval\"))\n\tcopyFiles(t,\n\t\tfilepath.Join(tmpDir, \"src\", \"github.com\", \"mailgun\", \"godebug\", \"Godeps\", \"_workspace\", \"src\", \"github.com\", \"peterh\", \"liner\"),\n\t\tfilepath.Join(os.Getenv(\"GOPATH\"), \"src\", \"github.com\", \"mailgun\", \"godebug\", \"Godeps\", \"_workspace\", \"src\", \"github.com\", \"peterh\", \"liner\"))\n\n\t// Install the first version of foo.\n\tcmd := exec.Command(\"go\", \"install\", \"foo\")\n\tcmd.Env = os.Environ()\n\toverrideVar(cmd, \"GOPATH\", tmpDir)\n\tcheckErr(t, cmd.Run())\n\n\t// Save the package file for later. Also serves to verify that it was installed.\n\tpkgFile := filepath.Join(tmpDir, \"pkg\", runtime.GOOS+\"_\"+runtime.GOARCH, \"foo.a\")\n\tpkgBytes, err := ioutil.ReadFile(pkgFile)\n\tcheckErr(t, err)\n\n\t// Update foo.go. Make sure its modtime is later than the installed package file's modtime.\n\tcheckErr(t, ioutil.WriteFile(filepath.Join(tmpDir, \"src\", \"foo\", \"foo.go\"), foo2, 0660))\n\tcheckErr(t, os.Chtimes(pkgFile, time.Now().Add(-time.Hour), time.Now().Add(-time.Hour)))\n\n\t// Check that godebug run uses the new version of foo.\n\tgodebug := compileGodebug(t)\n\tdefer os.Remove(godebug)\n\tcmd = exec.Command(godebug, \"run\", filepath.Join(tmpDir, \"src\", \"bar\", \"main.go\"))\n\tcmd.Env = os.Environ()\n\toverrideVar(cmd, \"GOPATH\", tmpDir)\n\tout, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\tt.Fatalf(\"godebug run failed: %v\\n\\n%s\", err, out)\n\t}\n\tout = stripTestPrefix(out)\n\tif g, w := string(bytes.TrimSpace(out)), \"foo v2\"; g != w {\n\t\tif g == \"foo v1\" {\n\t\t\tt.Error(\"godebug run failed to recompile an out-of-date package\")\n\t\t} else {\n\t\t\tt.Errorf(\"godebug run: got output %q, wanted output %q\", g, w)\n\t\t}\n\t}\n\n\t// Put the old package back with an old modtime, leaving the new source file in place.\n\tcheckErr(t, ioutil.WriteFile(pkgFile, pkgBytes, 0660))\n\tcheckErr(t, os.Chtimes(pkgFile, time.Now().Add(-time.Hour), time.Now().Add(-time.Hour)))\n\n\t// Check that godebug test also uses the new version of foo.\n\tcmd = exec.Command(godebug, \"test\", \"bar\")\n\tcmd.Env = os.Environ()\n\toverrideVar(cmd, \"GOPATH\", tmpDir)\n\tout, err = cmd.CombinedOutput()\n\tif err != nil {\n\t\tt.Fatalf(\"godebug run failed: %v\\n\\n%s\", err, out)\n\t}\n\tout = stripTestPrefix(out)\n\tif g, w := string(bytes.Split(out, newline)[0]), \"foo v2\"; g != w {\n\t\tif g == \"foo v1\" {\n\t\t\tt.Error(\"godebug test failed to recompile an out-of-date package\")\n\t\t} else {\n\t\t\tt.Errorf(\"godebug test: got output %q, wanted output %q\", g, w)\n\t\t}\n\t}\n}\n\nfunc copyFiles(t *testing.T, dst, src string) {\n\tfis, err := ioutil.ReadDir(src)\n\tcheckErr(t, err)\n\tcheckErr(t, os.MkdirAll(dst, 0770))\n\tfor _, fi := range fis {\n\t\tdstName := filepath.Join(dst, fi.Name())\n\t\tsrcName := filepath.Join(src, fi.Name())\n\t\tif fi.IsDir() {\n\t\t\tcheckErr(t, os.Mkdir(dstName, fi.Mode()))\n\t\t\tcopyFiles(t, dstName, srcName)\n\t\t} else {\n\t\t\ts, err := os.Open(srcName)\n\t\t\tcheckErr(t, err)\n\t\t\tdefer s.Close()\n\t\t\td, err := os.Create(dstName)\n\t\t\tcheckErr(t, err)\n\t\t\tdefer d.Close()\n\t\t\t_, err = io.Copy(d, s)\n\t\t\tcheckErr(t, err)\n\t\t}\n\t}\n}\n\nfunc checkErr(t *testing.T, err error) {\n\tif err != nil {\n\t\tbuf := make([]byte, 1024)\n\t\tt.Fatalf(\"%v\\n\\n%s\", err, buf[:runtime.Stack(buf, false)])\n\t}\n}\n\nfunc overrideVar(cmd *exec.Cmd, key, val string) {\n\tfor i, env := range cmd.Env {\n\t\tif strings.SplitN(env, \"=\", 2)[0] == key {\n\t\t\tcmd.Env[i] = key + \"=\" + val\n\t\t\treturn\n\t\t}\n\t}\n\tcmd.Env = append(cmd.Env, key+\"=\"+val)\n}\n"
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "z_test.go",
          "type": "blob",
          "size": 0.2255859375,
          "content": "package main\n\n/*\n\tThis is just here to clean up after the other tests.\n\tIt's named z_test.go so it runs last.\n*/\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestCleanup(t *testing.T) {\n\tos.RemoveAll(\"testdata/test-filesystem/gopath/pkg\")\n}\n"
        }
      ]
    }
  ]
}