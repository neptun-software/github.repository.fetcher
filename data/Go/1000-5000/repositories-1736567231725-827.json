{
  "metadata": {
    "timestamp": 1736567231725,
    "page": 827,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "marcusolsson/goddd",
      "stars": 2406,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3994140625,
          "content": "group: edge\nsudo: required\n\nlanguage: go\ngo:\n  - 1.10.x\n  - 1.11.x\n\nservices:\n  - docker\n\nenv:\n  - GO111MODULE=on\n\ninstall:\n  - go get -u github.com/golang/lint/golint\n\nmatrix:\n  include:\n  - go: \"1.10.x\"\n    script:  go test -v ./...\n  - go: \"1.11.x\"\n    script: go test -v -mod=vendor ./...\n\nafter_success:\n  - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD\n  - make docker-build\n  - make docker-push\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.8134765625,
          "content": "Contributing\n============\n\nSo you want to contribute? Great! This project really is intended for the community.\n\n## Questions\n\nIf you have questions regarding the application, please consider asking it by [creating a new issue](https://github.com/marcusolsson/goddd/issues) so that others can join the discussion.\n\n## Suggesting enhancements\n\nSince this project really is a proof-of-concept I would love to hear your ideas on how to improve it, but even if it is just a gut feeling, let me know!\n\nFeel free to start a discussion by [creating a new issue](https://github.com/marcusolsson/goddd/issues).\n\n## Reporting bugs\n\nIf you find any bugs, it would be very much appreciated if you would let me know by [creating a new issue](https://github.com/marcusolsson/goddd/issues).\n\n## Pull request\n\nPull requests are definitely welcome! \n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5693359375,
          "content": "FROM golang:1.10.3-alpine as build-env\nWORKDIR /go/src/github.com/marcusolsson/goddd/\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o goapp ./cmd/shippingsvc\n\nFROM alpine:3.7\nWORKDIR /app\nCOPY --from=build-env /go/src/github.com/marcusolsson/goddd/booking/docs ./booking/docs\nCOPY --from=build-env /go/src/github.com/marcusolsson/goddd/tracking/docs ./tracking/docs\nCOPY --from=build-env /go/src/github.com/marcusolsson/goddd/handling/docs ./handling/docs\nCOPY --from=build-env /go/src/github.com/marcusolsson/goddd/goapp .\nEXPOSE 8080\nENTRYPOINT [\"./goapp\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Marcus Olsson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.7978515625,
          "content": "BINARY=goddd\n\nDOCKER_IMAGE_NAME=marcusolsson/goddd\n\n.DEFAULT_GOAL := help\n\ncheck: test lint vet ## Runs all tests\n\ntest: ## Run the unit tests\n\tgo test -race -v $(shell go list ./... | grep -v /vendor/)\n\nlint: ## Lint all files\n\tgo list ./... | grep -v /vendor/ | xargs -L1 golint -set_exit_status\n\nvet: ## Run the vet tool\n\tgo vet $(shell go list ./... | grep -v /vendor/)\n\nclean: ## Clean up build artifacts\n\tgo clean\n\ndocker-build: ## Build Docker image\n\tdocker build -t ${DOCKER_IMAGE_NAME} .\n\ndocker-push: ## Push Docker image to registry\n\tdocker push ${DOCKER_IMAGE_NAME}\n\nhelp: ## Display this help message\n\t@cat $(MAKEFILE_LIST) | grep -e \"^[a-zA-Z_\\-]*: *.*## *\" | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\n.SILENT: build test lint vet clean docker-build docker-push help\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.451171875,
          "content": "# GoDDD \r\n\r\n[![Build Status](https://travis-ci.org/marcusolsson/goddd.svg?branch=master)](https://travis-ci.org/marcusolsson/goddd)\r\n[![GoDoc](https://img.shields.io/badge/godoc-reference-blue.svg?style=flat)](https://godoc.org/github.com/marcusolsson/goddd)\r\n[![Go Report Card](https://goreportcard.com/badge/github.com/marcusolsson/goddd)](https://goreportcard.com/report/github.com/marcusolsson/goddd)\r\n[![License MIT](https://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat)](LICENSE)\r\n![stability-unstable](https://img.shields.io/badge/stability-unstable-yellow.svg)\r\n\r\nThis is an attempt to port the [DDD Sample App](https://github.com/citerus/dddsample-core) to idiomatic Go. This project aims to:\r\n\r\n- Demonstrate how the tactical design patterns from Domain Driven Design may be implemented in Go. \r\n- Serve as an example of a modern production-ready enterprise application.\r\n\r\n### Important note\r\n\r\nThis project is intended for inspirational purposes and should **not** be considered a tutorial, guide or best-practice neither how to implement Domain Driven Design nor enterprise applications in Go. Make sure you adapt the code and ideas to the requirements of your own application.\r\n\r\n## Porting from Java\r\n\r\nThe original application is written in Java and much thought has been given to the domain model, code organization and is intended to be an example of what you might find in an enterprise system.\r\n\r\nI started out by first rewriting the original application, as is, in Go. The result was hardly idiomatic Go and I have since tried to refactor towards something that is true to the Go way. This means that you will still find oddities due to the application's Java heritage. If you do, please let me know so that we can weed out the remaining Java.\r\n\r\n## Running the application\r\n\r\nStart the application on port 8080 (or whatever the `PORT` variable is set to).\r\n\r\n```\r\ngo run main.go -inmem\r\n```\r\n\r\nIf you only want to try it out, this is enough. If you are looking for full functionality, you will need to have a [routing service](https://github.com/marcusolsson/pathfinder) running and start the application with `ROUTINGSERVICE_URL` (default: `http://localhost:7878`).\r\n\r\n### Docker\r\n\r\nYou can also run the application using Docker.\r\n\r\n```\r\n# Start routing service\r\ndocker run --name some-pathfinder marcusolsson/pathfinder\r\n\r\n# Start application\r\ndocker run --name some-goddd \\\r\n  --link some-pathfinder:pathfinder \\\r\n  -p 8080:8080 \\\r\n  -e ROUTINGSERVICE_URL=http://pathfinder:8080 \\\r\n  marcusolsson/goddd -inmem\r\n```\r\n\r\n... or if you're using Docker Compose:\r\n\r\n```\r\ndocker-compose up\r\n```\r\n\r\n## Try it!\r\n\r\n```\r\n# Check out the sample cargos\r\ncurl localhost:8080/booking/v1/cargos\r\n\r\n# Book new cargo\r\ncurl localhost:8080/booking/v1/cargos -d '{\"origin\": \"SESTO\", \"destination\": \"FIHEL\", \"arrival_deadline\": \"2016-03-21T19:50:24Z\"}'\r\n\r\n# Request possible routes for sample cargo ABC123\r\ncurl localhost:8080/booking/v1/cargos/ABC123/request_routes\r\n```\r\n\r\n## Contributing\r\n\r\nIf you want to fork the repository, follow these step to avoid having to rewrite the import paths.\r\n\r\n```shell\r\ngo get github.com/marcusolsson/goddd\r\ncd $GOPATH/src/github.com/marcusolsson/goddd\r\ngit remote add fork git://github.com:<yourname>/goddd.git\r\n\r\n# commit your changes\r\n\r\ngit push fork\r\n```\r\n\r\nFor more information, read [this](http://blog.campoy.cat/2014/03/github-and-go-forking-pull-requests-and.html).\r\n\r\n## Additional resources\r\n\r\n### For watching\r\n\r\n- [Building an Enterprise Service in Go](https://www.youtube.com/watch?v=twcDf_Y2gXY) at Golang UK Conference 2016\r\n\r\n### For reading\r\n\r\n- [Domain Driven Design in Go: Part 1](http://www.citerus.se/go-ddd)\r\n- [Domain Driven Design in Go: Part 2](http://www.citerus.se/part-2-domain-driven-design-in-go)\r\n- [Domain Driven Design in Go: Part 3](http://www.citerus.se/part-3-domain-driven-design-in-go)\r\n\r\n### Related projects\r\n\r\nThe original application uses a external routing service to demonstrate the use of _bounded contexts_. For those who are interested, I have ported this service as well:\r\n\r\n[pathfinder](https://github.com/marcusolsson/pathfinder)\r\n\r\nTo accompany this application, there is also an AngularJS-application to demonstrate the intended use-cases.\r\n\r\n[dddelivery-angularjs](https://github.com/marcusolsson/dddelivery-angularjs)\r\n\r\nAlso, if you want to learn more about Domain Driven Design, I encourage you to take a look at the [Domain Driven Design](http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215) book by Eric Evans.\r\n\r\n"
        },
        {
          "name": "booking",
          "type": "tree",
          "content": null
        },
        {
          "name": "cargo.go",
          "type": "blob",
          "size": 3.27734375,
          "content": "// Package shipping contains the heart of the domain model.\npackage shipping\n\nimport (\n\t\"errors\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/pborman/uuid\"\n)\n\n// TrackingID uniquely identifies a particular cargo.\ntype TrackingID string\n\n// Cargo is the central class in the domain model.\ntype Cargo struct {\n\tTrackingID         TrackingID\n\tOrigin             UNLocode\n\tRouteSpecification RouteSpecification\n\tItinerary          Itinerary\n\tDelivery           Delivery\n}\n\n// SpecifyNewRoute specifies a new route for this cargo.\nfunc (c *Cargo) SpecifyNewRoute(rs RouteSpecification) {\n\tc.RouteSpecification = rs\n\tc.Delivery = c.Delivery.UpdateOnRouting(c.RouteSpecification, c.Itinerary)\n}\n\n// AssignToRoute attaches a new itinerary to this cargo.\nfunc (c *Cargo) AssignToRoute(itinerary Itinerary) {\n\tc.Itinerary = itinerary\n\tc.Delivery = c.Delivery.UpdateOnRouting(c.RouteSpecification, c.Itinerary)\n}\n\n// DeriveDeliveryProgress updates all aspects of the cargo aggregate status\n// based on the current route specification, itinerary and handling of the cargo.\nfunc (c *Cargo) DeriveDeliveryProgress(history HandlingHistory) {\n\tc.Delivery = DeriveDeliveryFrom(c.RouteSpecification, c.Itinerary, history)\n}\n\n// NewCargo creates a new, unrouted cargo.\nfunc NewCargo(id TrackingID, rs RouteSpecification) *Cargo {\n\titinerary := Itinerary{}\n\thistory := HandlingHistory{make([]HandlingEvent, 0)}\n\n\treturn &Cargo{\n\t\tTrackingID:         id,\n\t\tOrigin:             rs.Origin,\n\t\tRouteSpecification: rs,\n\t\tDelivery:           DeriveDeliveryFrom(rs, itinerary, history),\n\t}\n}\n\n// CargoRepository provides access a cargo store.\ntype CargoRepository interface {\n\tStore(cargo *Cargo) error\n\tFind(id TrackingID) (*Cargo, error)\n\tFindAll() []*Cargo\n}\n\n// ErrUnknownCargo is used when a cargo could not be found.\nvar ErrUnknownCargo = errors.New(\"unknown cargo\")\n\n// NextTrackingID generates a new tracking ID.\n// TODO: Move to infrastructure(?)\nfunc NextTrackingID() TrackingID {\n\treturn TrackingID(strings.Split(strings.ToUpper(uuid.New()), \"-\")[0])\n}\n\n// RouteSpecification Contains information about a route: its origin,\n// destination and arrival deadline.\ntype RouteSpecification struct {\n\tOrigin          UNLocode\n\tDestination     UNLocode\n\tArrivalDeadline time.Time\n}\n\n// IsSatisfiedBy checks whether provided itinerary satisfies this\n// specification.\nfunc (s RouteSpecification) IsSatisfiedBy(itinerary Itinerary) bool {\n\treturn itinerary.Legs != nil &&\n\t\ts.Origin == itinerary.InitialDepartureLocation() &&\n\t\ts.Destination == itinerary.FinalArrivalLocation()\n}\n\n// RoutingStatus describes status of cargo routing.\ntype RoutingStatus int\n\n// Valid routing statuses.\nconst (\n\tNotRouted RoutingStatus = iota\n\tMisrouted\n\tRouted\n)\n\nfunc (s RoutingStatus) String() string {\n\tswitch s {\n\tcase NotRouted:\n\t\treturn \"Not routed\"\n\tcase Misrouted:\n\t\treturn \"Misrouted\"\n\tcase Routed:\n\t\treturn \"Routed\"\n\t}\n\treturn \"\"\n}\n\n// TransportStatus describes status of cargo transportation.\ntype TransportStatus int\n\n// Valid transport statuses.\nconst (\n\tNotReceived TransportStatus = iota\n\tInPort\n\tOnboardCarrier\n\tClaimed\n\tUnknown\n)\n\nfunc (s TransportStatus) String() string {\n\tswitch s {\n\tcase NotReceived:\n\t\treturn \"Not received\"\n\tcase InPort:\n\t\treturn \"In port\"\n\tcase OnboardCarrier:\n\t\treturn \"Onboard carrier\"\n\tcase Claimed:\n\t\treturn \"Claimed\"\n\tcase Unknown:\n\t\treturn \"Unknown\"\n\t}\n\treturn \"\"\n}\n"
        },
        {
          "name": "cargo_test.go",
          "type": "blob",
          "size": 3.8203125,
          "content": "package shipping\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestConstruction(t *testing.T) {\n\tid := NextTrackingID()\n\tspec := RouteSpecification{\n\t\tOrigin:          SESTO,\n\t\tDestination:     AUMEL,\n\t\tArrivalDeadline: time.Date(2009, time.March, 13, 0, 0, 0, 0, time.UTC),\n\t}\n\n\tc := NewCargo(id, spec)\n\n\tif c.Delivery.RoutingStatus != NotRouted {\n\t\tt.Errorf(\"RoutingStatus = %v; want = %v\",\n\t\t\tc.Delivery.RoutingStatus, NotRouted)\n\t}\n\tif c.Delivery.TransportStatus != NotReceived {\n\t\tt.Errorf(\"TransportStatus = %v; want = %v\",\n\t\t\tc.Delivery.TransportStatus, NotReceived)\n\t}\n\tif c.Delivery.LastKnownLocation != \"\" {\n\t\tt.Errorf(\"LastKnownLocation = %s; want = %s\",\n\t\t\tc.Delivery.LastKnownLocation, \"\")\n\t}\n}\n\nfunc TestRoutingStatus(t *testing.T) {\n\tgood := Itinerary{\n\t\tLegs: []Leg{\n\t\t\t{LoadLocation: SESTO, UnloadLocation: AUMEL},\n\t\t},\n\t}\n\n\tbad := Itinerary{\n\t\tLegs: []Leg{\n\t\t\t{LoadLocation: SESTO, UnloadLocation: CNHKG},\n\t\t},\n\t}\n\n\tacceptOnlyGood := RouteSpecification{\n\t\tOrigin:      SESTO,\n\t\tDestination: AUMEL,\n\t}\n\n\tc := NewCargo(\"ABC\", RouteSpecification{})\n\n\tc.SpecifyNewRoute(acceptOnlyGood)\n\tif c.Delivery.RoutingStatus != NotRouted {\n\t\tt.Errorf(\"RoutingStatus = %v; want = %v\",\n\t\t\tc.Delivery.RoutingStatus, NotRouted)\n\t}\n\n\tc.AssignToRoute(bad)\n\tif c.Delivery.RoutingStatus != Misrouted {\n\t\tt.Errorf(\"RoutingStatus = %v; want = %v\",\n\t\t\tc.Delivery.RoutingStatus, Misrouted)\n\t}\n\n\tc.AssignToRoute(good)\n\tif c.Delivery.RoutingStatus != Routed {\n\t\tt.Errorf(\"RoutingStatus = %v; want = %v\",\n\t\t\tc.Delivery.RoutingStatus, Routed)\n\t}\n}\n\nfunc TestLastKnownLocation_WhenNoEvents(t *testing.T) {\n\tc := NewCargo(\"ABC\", RouteSpecification{\n\t\tOrigin:      SESTO,\n\t\tDestination: CNHKG,\n\t})\n\n\tif c.Delivery.LastKnownLocation != \"\" {\n\t\tt.Errorf(\"should be equal\")\n\t}\n}\n\nfunc TestLastKnownLocation_WhenReceived(t *testing.T) {\n\tc := populateCargoReceivedInStockholm()\n\n\tif c.Delivery.LastKnownLocation != SESTO {\n\t\tt.Errorf(\"LastKnownLocation = %s; want = %s\",\n\t\t\tc.Delivery.LastKnownLocation, SESTO)\n\t}\n}\n\nfunc TestLastKnownLocation_WhenClaimed(t *testing.T) {\n\tc := populateCargoClaimedInMelbourne()\n\n\tif c.Delivery.LastKnownLocation != AUMEL {\n\t\tt.Errorf(\"LastKnownLocation = %s; want = %s\",\n\t\t\tc.Delivery.LastKnownLocation, AUMEL)\n\t}\n}\n\nvar routingStatusTests = []struct {\n\troutingStatus RoutingStatus\n\texpected      string\n}{\n\t{NotRouted, \"Not routed\"},\n\t{Misrouted, \"Misrouted\"},\n\t{Routed, \"Routed\"},\n\t{1000, \"\"},\n}\n\nfunc TestRoutingStatus_Stringer(t *testing.T) {\n\tfor _, tt := range routingStatusTests {\n\t\tif tt.routingStatus.String() != tt.expected {\n\t\t\tt.Errorf(\"routingStatus.String() = %s; want = %s\",\n\t\t\t\ttt.routingStatus.String(), tt.expected)\n\t\t}\n\t}\n}\n\nvar transportStatusTests = []struct {\n\ttransportStatus TransportStatus\n\texpected        string\n}{\n\t{NotReceived, \"Not received\"},\n\t{InPort, \"In port\"},\n\t{OnboardCarrier, \"Onboard carrier\"},\n\t{Claimed, \"Claimed\"},\n\t{Unknown, \"Unknown\"},\n\t{1000, \"\"},\n}\n\nfunc TestTransportStatus_Stringer(t *testing.T) {\n\tfor _, tt := range transportStatusTests {\n\t\tif tt.transportStatus.String() != tt.expected {\n\t\t\tt.Errorf(\"transportStatus.String() = %s; want = %s\",\n\t\t\t\ttt.transportStatus.String(), tt.expected)\n\t\t}\n\t}\n}\n\nfunc populateCargoReceivedInStockholm() *Cargo {\n\tc := NewCargo(\"XYZ\", RouteSpecification{\n\t\tOrigin:      SESTO,\n\t\tDestination: AUMEL,\n\t})\n\n\te := HandlingEvent{\n\t\tTrackingID: c.TrackingID,\n\t\tActivity: HandlingActivity{\n\t\t\tType:     Receive,\n\t\t\tLocation: SESTO,\n\t\t},\n\t}\n\n\thh := HandlingHistory{\n\t\tHandlingEvents: []HandlingEvent{e},\n\t}\n\n\tc.DeriveDeliveryProgress(hh)\n\n\treturn c\n}\n\nfunc populateCargoClaimedInMelbourne() *Cargo {\n\tc := NewCargo(\"XYZ\", RouteSpecification{\n\t\tOrigin:      SESTO,\n\t\tDestination: AUMEL,\n\t})\n\n\te := HandlingEvent{\n\t\tTrackingID: c.TrackingID,\n\t\tActivity: HandlingActivity{\n\t\t\tType:     Claim,\n\t\t\tLocation: AUMEL,\n\t\t},\n\t}\n\n\thh := HandlingHistory{\n\t\tHandlingEvents: []HandlingEvent{e},\n\t}\n\n\tc.DeriveDeliveryProgress(hh)\n\n\treturn c\n}\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "delivery.go",
          "type": "blob",
          "size": 4.9892578125,
          "content": "package shipping\n\nimport (\n\t\"time\"\n)\n\n// Delivery is the actual transportation of the cargo, as opposed to the\n// customer requirement (RouteSpecification) and the plan (Itinerary).\ntype Delivery struct {\n\tItinerary               Itinerary\n\tRouteSpecification      RouteSpecification\n\tRoutingStatus           RoutingStatus\n\tTransportStatus         TransportStatus\n\tNextExpectedActivity    HandlingActivity\n\tLastEvent               HandlingEvent\n\tLastKnownLocation       UNLocode\n\tCurrentVoyage           VoyageNumber\n\tETA                     time.Time\n\tIsMisdirected           bool\n\tIsUnloadedAtDestination bool\n}\n\n// UpdateOnRouting creates a new delivery snapshot to reflect changes in\n// routing, i.e. when the route specification or the itinerary has changed but\n// no additional handling of the cargo has been performed.\nfunc (d Delivery) UpdateOnRouting(rs RouteSpecification, itinerary Itinerary) Delivery {\n\treturn newDelivery(d.LastEvent, itinerary, rs)\n}\n\n// IsOnTrack checks if the delivery is on track.\nfunc (d Delivery) IsOnTrack() bool {\n\treturn d.RoutingStatus == Routed && !d.IsMisdirected\n}\n\n// DeriveDeliveryFrom creates a new delivery snapshot based on the complete\n// handling history of a cargo, as well as its route specification and\n// itinerary.\nfunc DeriveDeliveryFrom(rs RouteSpecification, itinerary Itinerary, history HandlingHistory) Delivery {\n\tlastEvent, _ := history.MostRecentlyCompletedEvent()\n\treturn newDelivery(lastEvent, itinerary, rs)\n}\n\n// newDelivery creates a up-to-date delivery based on an handling event,\n// itinerary and a route specification.\nfunc newDelivery(lastEvent HandlingEvent, itinerary Itinerary, rs RouteSpecification) Delivery {\n\tvar (\n\t\troutingStatus           = calculateRoutingStatus(itinerary, rs)\n\t\ttransportStatus         = calculateTransportStatus(lastEvent)\n\t\tlastKnownLocation       = calculateLastKnownLocation(lastEvent)\n\t\tisMisdirected           = calculateMisdirectedStatus(lastEvent, itinerary)\n\t\tisUnloadedAtDestination = calculateUnloadedAtDestination(lastEvent, rs)\n\t\tcurrentVoyage           = calculateCurrentVoyage(transportStatus, lastEvent)\n\t)\n\n\td := Delivery{\n\t\tLastEvent:               lastEvent,\n\t\tItinerary:               itinerary,\n\t\tRouteSpecification:      rs,\n\t\tRoutingStatus:           routingStatus,\n\t\tTransportStatus:         transportStatus,\n\t\tLastKnownLocation:       lastKnownLocation,\n\t\tIsMisdirected:           isMisdirected,\n\t\tIsUnloadedAtDestination: isUnloadedAtDestination,\n\t\tCurrentVoyage:           currentVoyage,\n\t}\n\n\td.NextExpectedActivity = calculateNextExpectedActivity(d)\n\td.ETA = calculateETA(d)\n\n\treturn d\n}\n\n// Below are internal functions used when creating a new delivery.\n\nfunc calculateRoutingStatus(itinerary Itinerary, rs RouteSpecification) RoutingStatus {\n\tif itinerary.Legs == nil {\n\t\treturn NotRouted\n\t}\n\n\tif rs.IsSatisfiedBy(itinerary) {\n\t\treturn Routed\n\t}\n\n\treturn Misrouted\n}\n\nfunc calculateMisdirectedStatus(event HandlingEvent, itinerary Itinerary) bool {\n\tif event.Activity.Type == NotHandled {\n\t\treturn false\n\t}\n\n\treturn !itinerary.IsExpected(event)\n}\n\nfunc calculateUnloadedAtDestination(event HandlingEvent, rs RouteSpecification) bool {\n\tif event.Activity.Type == NotHandled {\n\t\treturn false\n\t}\n\n\treturn event.Activity.Type == Unload && rs.Destination == event.Activity.Location\n}\n\nfunc calculateTransportStatus(event HandlingEvent) TransportStatus {\n\tswitch event.Activity.Type {\n\tcase NotHandled:\n\t\treturn NotReceived\n\tcase Load:\n\t\treturn OnboardCarrier\n\tcase Unload:\n\t\treturn InPort\n\tcase Receive:\n\t\treturn InPort\n\tcase Customs:\n\t\treturn InPort\n\tcase Claim:\n\t\treturn Claimed\n\t}\n\treturn Unknown\n}\n\nfunc calculateLastKnownLocation(event HandlingEvent) UNLocode {\n\treturn event.Activity.Location\n}\n\nfunc calculateNextExpectedActivity(d Delivery) HandlingActivity {\n\tif !d.IsOnTrack() {\n\t\treturn HandlingActivity{}\n\t}\n\n\tswitch d.LastEvent.Activity.Type {\n\tcase NotHandled:\n\t\treturn HandlingActivity{Type: Receive, Location: d.RouteSpecification.Origin}\n\tcase Receive:\n\t\tl := d.Itinerary.Legs[0]\n\t\treturn HandlingActivity{Type: Load, Location: l.LoadLocation, VoyageNumber: l.VoyageNumber}\n\tcase Load:\n\t\tfor _, l := range d.Itinerary.Legs {\n\t\t\tif l.LoadLocation == d.LastEvent.Activity.Location {\n\t\t\t\treturn HandlingActivity{Type: Unload, Location: l.UnloadLocation, VoyageNumber: l.VoyageNumber}\n\t\t\t}\n\t\t}\n\tcase Unload:\n\t\tfor i, l := range d.Itinerary.Legs {\n\t\t\tif l.UnloadLocation == d.LastEvent.Activity.Location {\n\t\t\t\tif i < len(d.Itinerary.Legs)-1 {\n\t\t\t\t\treturn HandlingActivity{Type: Load, Location: d.Itinerary.Legs[i+1].LoadLocation, VoyageNumber: d.Itinerary.Legs[i+1].VoyageNumber}\n\t\t\t\t}\n\n\t\t\t\treturn HandlingActivity{Type: Claim, Location: l.UnloadLocation}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn HandlingActivity{}\n}\n\nfunc calculateCurrentVoyage(transportStatus TransportStatus, event HandlingEvent) VoyageNumber {\n\tif transportStatus == OnboardCarrier && event.Activity.Type != NotHandled {\n\t\treturn event.Activity.VoyageNumber\n\t}\n\n\treturn VoyageNumber(\"\")\n}\n\nfunc calculateETA(d Delivery) time.Time {\n\tif !d.IsOnTrack() {\n\t\treturn time.Time{}\n\t}\n\n\treturn d.Itinerary.FinalArrivalTime()\n}\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.3154296875,
          "content": "goddd:\n    image: marcusolsson/goddd\n    ports:\n        - 8080:8080\n    environment:\n        ROUTINGSERVICE_URL: http://pathfinder:8080\n        MONGODB_URL: mongodb\n    links:\n        - pathfinder\n        - mongodb\n\npathfinder:\n    image: marcusolsson/pathfinder\n\nmongodb:\n    image: mongo\n    ports:\n        - 27017:27017\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.80859375,
          "content": "module github.com/marcusolsson/goddd\n\nrequire (\n\tgithub.com/VividCortex/gohistogram v1.0.0 // indirect\n\tgithub.com/afex/hystrix-go v0.0.0-20180502004556-fa1af6a1f4f5 // indirect\n\tgithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/go-chi/chi v3.3.3+incompatible\n\tgithub.com/go-kit/kit v0.7.0\n\tgithub.com/go-logfmt/logfmt v0.3.0 // indirect\n\tgithub.com/go-stack/stack v1.8.0 // indirect\n\tgithub.com/golang/protobuf v1.2.0 // indirect\n\tgithub.com/gopherjs/gopherjs v0.0.0-20180825215210-0210a2f0f73c // indirect\n\tgithub.com/jtolds/gls v4.2.1+incompatible // indirect\n\tgithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515 // indirect\n\tgithub.com/kr/pretty v0.1.0 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect\n\tgithub.com/pborman/uuid v0.0.0-20180827223501-4c1ecd6722e8\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/prometheus/client_golang v0.8.0\n\tgithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910 // indirect\n\tgithub.com/prometheus/common v0.0.0-20180801064454-c7de2306084e // indirect\n\tgithub.com/prometheus/procfs v0.0.0-20180725123919-05ee40e3a273 // indirect\n\tgithub.com/smartystreets/assertions v0.0.0-20180820201707-7c9eb446e3cf // indirect\n\tgithub.com/smartystreets/goconvey v0.0.0-20180222194500-ef6db91d284a // indirect\n\tgithub.com/sony/gobreaker v0.0.0-20180905101324-b2a34562d02c // indirect\n\tgithub.com/streadway/handy v0.0.0-20160402200321-f450267a206e // indirect\n\tgithub.com/stretchr/testify v1.2.2 // indirect\n\tgolang.org/x/net v0.0.0-20180826012351-8a410e7b638d // indirect\n\tgolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f // indirect\n\tgopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127\n\tgopkg.in/mgo.v2 v2.0.0-20180705113604-9856a29383ce\n\tgopkg.in/yaml.v2 v2.2.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 9.1533203125,
          "content": "github.com/VividCortex/gohistogram v1.0.0 h1:6+hBz+qvs0JOrrNhhmR7lFxo5sINxBCGXrdtl/UvroE=\ngithub.com/VividCortex/gohistogram v1.0.0/go.mod h1:Pf5mBqqDxYaXu3hDrrU+w6nw50o/4+TcAqDqk/vUH7g=\ngithub.com/afex/hystrix-go v0.0.0-20160615205002-39520ddd07a9 h1:u66crHBFVPAewNQgWzJ+gJmqThmHc3+4qRtPT7NR35A=\ngithub.com/afex/hystrix-go v0.0.0-20160615205002-39520ddd07a9/go.mod h1:SkGFH1ia65gfNATL8TAiHDNxPzPdmEL5uirI2Uyuz6c=\ngithub.com/afex/hystrix-go v0.0.0-20180502004556-fa1af6a1f4f5 h1:rFw4nCn9iMW+Vajsk51NtYIcwSTkXr+JGrMd36kTDJw=\ngithub.com/afex/hystrix-go v0.0.0-20180502004556-fa1af6a1f4f5/go.mod h1:SkGFH1ia65gfNATL8TAiHDNxPzPdmEL5uirI2Uyuz6c=\ngithub.com/beorn7/perks v0.0.0-20160804104726-4c0e84591b9a h1:BtpsbiV638WQZwhA98cEZw2BsbnQJrbd0BI7tsy0W1c=\ngithub.com/beorn7/perks v0.0.0-20160804104726-4c0e84591b9a/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973 h1:xJ4a3vCFaGF/jqvzLMYoU8P317H5OQ+Via4RmuPwCS0=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-chi/chi v3.3.2+incompatible h1:uQNcQN3NsV1j4ANsPh42P4ew4t6rnRbJb8frvpp31qQ=\ngithub.com/go-chi/chi v3.3.2+incompatible/go.mod h1:eB3wogJHnLi3x/kFX2A+IbTBlXxmMeXJVKy9tTv1XzQ=\ngithub.com/go-chi/chi v3.3.3+incompatible h1:KHkmBEMNkwKuK4FdQL7N2wOeB9jnIx7jR5wsuSBEFI8=\ngithub.com/go-chi/chi v3.3.3+incompatible/go.mod h1:eB3wogJHnLi3x/kFX2A+IbTBlXxmMeXJVKy9tTv1XzQ=\ngithub.com/go-kit/kit v0.5.0 h1:SI25KgiIaNiy8GCcvstnkBVXPISD0rJ7LrAwt1PJ8zA=\ngithub.com/go-kit/kit v0.5.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.7.0 h1:ApufNmWF1H6/wUbAG81hZOHmqwd0zRf8mNfLjYj/064=\ngithub.com/go-kit/kit v0.7.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-logfmt/logfmt v0.3.0 h1:8HUsc87TaSWLKwrnumgC8/YconD2fJQsRJAsWaPg2ic=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-stack/stack v1.6.0 h1:MmJCxYVKTJ0SplGKqFVX3SBnmaUhODHZrrFF6jMbpZk=\ngithub.com/go-stack/stack v1.6.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/go-stack/stack v1.8.0 h1:5SgMzNM5HxrEjV0ww2lTmX6E2Izsfxas4+YHWRs3Lsk=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/golang/protobuf v0.0.0-20170726212829-748d386b5c1e h1:lDgkE81VC1S0yetyGVVGW923ICSIlj6zVU/WaOd9QJ0=\ngithub.com/golang/protobuf v0.0.0-20170726212829-748d386b5c1e/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.2.0 h1:P3YflyNX/ehuJFLhxviNdFxQPkGK5cDcApsge1SqnvM=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/gopherjs/gopherjs v0.0.0-20180825215210-0210a2f0f73c h1:16eHWuMGvCjSfgRJKqIzapE78onvvTbdi1rMkU00lZw=\ngithub.com/gopherjs/gopherjs v0.0.0-20180825215210-0210a2f0f73c/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/jtolds/gls v4.2.1+incompatible h1:fSuqC+Gmlu6l/ZYAoZzx2pyucC8Xza35fpRVWLVmUEE=\ngithub.com/jtolds/gls v4.2.1+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515 h1:T+h1c/A9Gawja4Y9mFVWj2vyii2bbUNDw3kt9VxK2EY=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.0 h1:YNOwxxSJzSUARoD9KRZLzM9Y858MNGCOACTvCW9TSAc=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.0/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1 h1:4hp9jkHxhMHkqkrB3Ix0jegS5sx/RkqARlsWZ6pIwiU=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/pborman/uuid v0.0.0-20170612153648-e790cca94e6c h1:MUyE44mTvnI5A0xrxIxaMqoWFzPfQvtE2IWUollMDMs=\ngithub.com/pborman/uuid v0.0.0-20170612153648-e790cca94e6c/go.mod h1:VyrYX9gd7irzKovcSS6BIIEwPRkP2Wm2m9ufcdFSJ34=\ngithub.com/pborman/uuid v0.0.0-20180827223501-4c1ecd6722e8 h1:1ugHtU31mw8H2BNoNjyC6DmLJXnHSlVXOyzpV1/4xGA=\ngithub.com/pborman/uuid v0.0.0-20180827223501-4c1ecd6722e8/go.mod h1:VyrYX9gd7irzKovcSS6BIIEwPRkP2Wm2m9ufcdFSJ34=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v0.8.0 h1:1921Yw9Gc3iSc4VQh3PIoOqgPCZS7G/4xQNVUp8Mda8=\ngithub.com/prometheus/client_golang v0.8.0/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_model v0.0.0-20170216185247-6f3806018612 h1:13pIdM2tpaDi4OVe24fgoIS7ZTqMt0QI+bwQsX5hq+g=\ngithub.com/prometheus/client_model v0.0.0-20170216185247-6f3806018612/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910 h1:idejC8f05m9MGOsuEi1ATq9shN03HrxNkD/luQvxCv8=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/common v0.0.0-20170731114204-61f87aac8082 h1:M/45ksQhBkhxI65UXRNvyuF6sV7A08GMYk39aGZQlJQ=\ngithub.com/prometheus/common v0.0.0-20170731114204-61f87aac8082/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/common v0.0.0-20180801064454-c7de2306084e h1:n/3MEhJQjQxrOUCzh1Y3Re6aJUUWRp2M9+Oc3eVn/54=\ngithub.com/prometheus/common v0.0.0-20180801064454-c7de2306084e/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/procfs v0.0.0-20170703101242-e645f4e5aaa8 h1:uZfczEBIA1FZfOQo4/JWgGnMNd/4HVsM9A+B30wtlkA=\ngithub.com/prometheus/procfs v0.0.0-20170703101242-e645f4e5aaa8/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20180725123919-05ee40e3a273 h1:agujYaXJSxSo18YNX3jzl+4G6Bstwt+kqv47GS12uL0=\ngithub.com/prometheus/procfs v0.0.0-20180725123919-05ee40e3a273/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/smartystreets/assertions v0.0.0-20180820201707-7c9eb446e3cf h1:6V1qxN6Usn4jy8unvggSJz/NC790tefw8Zdy6OZS5co=\ngithub.com/smartystreets/assertions v0.0.0-20180820201707-7c9eb446e3cf/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/goconvey v0.0.0-20180222194500-ef6db91d284a h1:JSvGDIbmil4Ui/dDdFBExb7/cmkNjyX5F97oglmvCDo=\ngithub.com/smartystreets/goconvey v0.0.0-20180222194500-ef6db91d284a/go.mod h1:XDJAKZRPZ1CvBcN2aX5YOUTYGHki24fSF0Iv48Ibg0s=\ngithub.com/sony/gobreaker v0.0.0-20170530031423-e9556a45379e h1:A7yRSd+7ZYlgFchh97XRpoDlDfHOmwG8rtajMkr7tEM=\ngithub.com/sony/gobreaker v0.0.0-20170530031423-e9556a45379e/go.mod h1:XvpJiTD8NibaH7z0NzyfhR1+NQDtR9F/x92xheTwC9k=\ngithub.com/sony/gobreaker v0.0.0-20180905101324-b2a34562d02c h1:7EMc5KMRVlkzEyK5n4YqdPEsmO+6AlAGCJiqnqW6n2Y=\ngithub.com/sony/gobreaker v0.0.0-20180905101324-b2a34562d02c/go.mod h1:XvpJiTD8NibaH7z0NzyfhR1+NQDtR9F/x92xheTwC9k=\ngithub.com/streadway/handy v0.0.0-20160402200321-f450267a206e h1:kMuBo7Qw/VrZq9MrojwJZp8hyeywuc8J+KdnXIeRmMY=\ngithub.com/streadway/handy v0.0.0-20160402200321-f450267a206e/go.mod h1:qNTQ5P5JnDBl6z3cMAg/SywNDC5ABu5ApDIw6lUbRmI=\ngithub.com/stretchr/testify v1.2.2 h1:bSDNvY7ZPG5RlJ8otE/7V6gMiyenm9RtJ7IUVIAoJ1w=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d h1:g9qWBGx4puODJTMVyoPrpoxPFgVGd+z1DZwjfRu4d0I=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f h1:wMNYb4v58l5UBM7MYRLPG6ZhfOqbKu7X5eyFl8ZhKvA=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20161208181325-20d25e280405 h1:829vOVxxusYHC+IqBtkX5mbKtsY9fheQiQn0MZRVLfQ=\ngopkg.in/check.v1 v1.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/mgo.v2 v2.0.0-20160818020120-3f83fa500528 h1:/saqWwm73dLmuzbNhe92F0QsZ/KiFND+esHco2v1hiY=\ngopkg.in/mgo.v2 v2.0.0-20160818020120-3f83fa500528/go.mod h1:yeKp02qBN3iKW1OzL3MGk2IdtZzaj7SFntXj72NppTA=\ngopkg.in/mgo.v2 v2.0.0-20180705113604-9856a29383ce h1:xcEWjVhvbDy+nHP67nPDDpbYrY+ILlfndk4bRioVHaU=\ngopkg.in/mgo.v2 v2.0.0-20180705113604-9856a29383ce/go.mod h1:yeKp02qBN3iKW1OzL3MGk2IdtZzaj7SFntXj72NppTA=\ngopkg.in/yaml.v2 v2.2.1 h1:mUhvW9EsL+naU5Q3cakzfE91YhliOondGd6ZrsDBHQE=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n"
        },
        {
          "name": "handling.go",
          "type": "blob",
          "size": 3.064453125,
          "content": "package shipping\n\n// TODO: It would make sense to have this in its own package. Unfortunately,\n// then there would be a circular dependency between the cargo and handling\n// packages since cargo.Delivery would use handling.HandlingEvent and\n// handling.HandlingEvent would use cargo.TrackingID. Also,\n// HandlingEventFactory depends on the cargo repository.\n//\n// It would make sense not having the cargo package depend on handling.\n\nimport (\n\t\"errors\"\n\t\"time\"\n)\n\n// HandlingActivity represents how and where a cargo can be handled, and can\n// be used to express predictions about what is expected to happen to a cargo\n// in the future.\ntype HandlingActivity struct {\n\tType         HandlingEventType\n\tLocation     UNLocode\n\tVoyageNumber VoyageNumber\n}\n\n// HandlingEvent is used to register the event when, for instance, a cargo is\n// unloaded from a carrier at a some location at a given time.\ntype HandlingEvent struct {\n\tTrackingID TrackingID\n\tActivity   HandlingActivity\n}\n\n// HandlingEventType describes type of a handling event.\ntype HandlingEventType int\n\n// Valid handling event types.\nconst (\n\tNotHandled HandlingEventType = iota\n\tLoad\n\tUnload\n\tReceive\n\tClaim\n\tCustoms\n)\n\nfunc (t HandlingEventType) String() string {\n\tswitch t {\n\tcase NotHandled:\n\t\treturn \"Not Handled\"\n\tcase Load:\n\t\treturn \"Load\"\n\tcase Unload:\n\t\treturn \"Unload\"\n\tcase Receive:\n\t\treturn \"Receive\"\n\tcase Claim:\n\t\treturn \"Claim\"\n\tcase Customs:\n\t\treturn \"Customs\"\n\t}\n\n\treturn \"\"\n}\n\n// HandlingHistory is the handling history of a cargo.\ntype HandlingHistory struct {\n\tHandlingEvents []HandlingEvent\n}\n\n// MostRecentlyCompletedEvent returns most recently completed handling event.\nfunc (h HandlingHistory) MostRecentlyCompletedEvent() (HandlingEvent, error) {\n\tif len(h.HandlingEvents) == 0 {\n\t\treturn HandlingEvent{}, errors.New(\"delivery history is empty\")\n\t}\n\n\treturn h.HandlingEvents[len(h.HandlingEvents)-1], nil\n}\n\n// HandlingEventRepository provides access a handling event store.\ntype HandlingEventRepository interface {\n\tStore(e HandlingEvent)\n\tQueryHandlingHistory(TrackingID) HandlingHistory\n}\n\n// HandlingEventFactory creates handling events.\ntype HandlingEventFactory struct {\n\tCargoRepository    CargoRepository\n\tVoyageRepository   VoyageRepository\n\tLocationRepository LocationRepository\n}\n\n// CreateHandlingEvent creates a validated handling event.\nfunc (f *HandlingEventFactory) CreateHandlingEvent(registered time.Time, completed time.Time, id TrackingID,\n\tvoyageNumber VoyageNumber, unLocode UNLocode, eventType HandlingEventType) (HandlingEvent, error) {\n\n\tif _, err := f.CargoRepository.Find(id); err != nil {\n\t\treturn HandlingEvent{}, err\n\t}\n\n\tif _, err := f.VoyageRepository.Find(voyageNumber); err != nil {\n\t\t// TODO: This is pretty ugly, but when creating a Receive event, the voyage number is not known.\n\t\tif len(voyageNumber) > 0 {\n\t\t\treturn HandlingEvent{}, err\n\t\t}\n\t}\n\n\tif _, err := f.LocationRepository.Find(unLocode); err != nil {\n\t\treturn HandlingEvent{}, err\n\t}\n\n\treturn HandlingEvent{\n\t\tTrackingID: id,\n\t\tActivity: HandlingActivity{\n\t\t\tType:         eventType,\n\t\t\tLocation:     unLocode,\n\t\t\tVoyageNumber: voyageNumber,\n\t\t},\n\t}, nil\n}\n"
        },
        {
          "name": "handling",
          "type": "tree",
          "content": null
        },
        {
          "name": "inmem",
          "type": "tree",
          "content": null
        },
        {
          "name": "inspection",
          "type": "tree",
          "content": null
        },
        {
          "name": "itinerary.go",
          "type": "blob",
          "size": 2.2548828125,
          "content": "package shipping\n\nimport (\n\t\"time\"\n)\n\n// Leg describes the transportation between two locations on a voyage\ntype Leg struct {\n\tVoyageNumber   VoyageNumber `json:\"voyage_number\"`\n\tLoadLocation   UNLocode     `json:\"from\"`\n\tUnloadLocation UNLocode     `json:\"to\"`\n\tLoadTime       time.Time    `json:\"load_time\"`\n\tUnloadTime     time.Time    `json:\"unload_time\"`\n}\n\n// NewLeg creates a new itinerary leg.\nfunc NewLeg(voyageNumber VoyageNumber, loadLocation, unloadLocation UNLocode, loadTime, unloadTime time.Time) Leg {\n\treturn Leg{\n\t\tVoyageNumber:   voyageNumber,\n\t\tLoadLocation:   loadLocation,\n\t\tUnloadLocation: unloadLocation,\n\t\tLoadTime:       loadTime,\n\t\tUnloadTime:     unloadTime,\n\t}\n}\n\n// Itinerary specifies steps required to transport a cargo from its origin to\n// destination.\ntype Itinerary struct {\n\tLegs []Leg `json:\"legs\"`\n}\n\n// InitialDepartureLocation returns the start of the itinerary.\nfunc (i Itinerary) InitialDepartureLocation() UNLocode {\n\tif i.IsEmpty() {\n\t\treturn UNLocode(\"\")\n\t}\n\treturn i.Legs[0].LoadLocation\n}\n\n// FinalArrivalLocation returns the end of the itinerary.\nfunc (i Itinerary) FinalArrivalLocation() UNLocode {\n\tif i.IsEmpty() {\n\t\treturn UNLocode(\"\")\n\t}\n\treturn i.Legs[len(i.Legs)-1].UnloadLocation\n}\n\n// FinalArrivalTime returns the expected arrival time at final destination.\nfunc (i Itinerary) FinalArrivalTime() time.Time {\n\treturn i.Legs[len(i.Legs)-1].UnloadTime\n}\n\n// IsEmpty checks if the itinerary contains at least one leg.\nfunc (i Itinerary) IsEmpty() bool {\n\treturn i.Legs == nil || len(i.Legs) == 0\n}\n\n// IsExpected checks if the given handling event is expected when executing\n// this itinerary.\nfunc (i Itinerary) IsExpected(event HandlingEvent) bool {\n\tif i.IsEmpty() {\n\t\treturn true\n\t}\n\n\tswitch event.Activity.Type {\n\tcase Receive:\n\t\treturn i.InitialDepartureLocation() == event.Activity.Location\n\tcase Load:\n\t\tfor _, l := range i.Legs {\n\t\t\tif l.LoadLocation == event.Activity.Location && l.VoyageNumber == event.Activity.VoyageNumber {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\tcase Unload:\n\t\tfor _, l := range i.Legs {\n\t\t\tif l.UnloadLocation == event.Activity.Location && l.VoyageNumber == event.Activity.VoyageNumber {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\tcase Claim:\n\t\treturn i.FinalArrivalLocation() == event.Activity.Location\n\t}\n\n\treturn true\n}\n"
        },
        {
          "name": "itinerary_test.go",
          "type": "blob",
          "size": 1.7998046875,
          "content": "package shipping\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestItinerary_CreateEmpty(t *testing.T) {\n\ti := Itinerary{}\n\n\tvar legs []Leg\n\n\tif !reflect.DeepEqual(i.Legs, legs) {\n\t\tt.Errorf(\"should be equal\")\n\t}\n\tif i.InitialDepartureLocation() != \"\" {\n\t\tt.Errorf(\"InitialDepartureLocation() = %s; want = %s\",\n\t\t\ti.InitialDepartureLocation(), \"\")\n\t}\n\tif i.FinalArrivalLocation() != \"\" {\n\t\tt.Errorf(\"FinalArrivalLocation() = %s; want = %s\",\n\t\t\ti.FinalArrivalLocation(), \"\")\n\t}\n}\n\nfunc TestItinerary_IsExpected_EmptyItinerary(t *testing.T) {\n\ti := Itinerary{}\n\te := HandlingEvent{}\n\n\tif got, want := i.IsExpected(e), true; got != want {\n\t\tt.Errorf(\"IsExpected() = %v; want = %v\", got, want)\n\t}\n}\n\ntype eventExpectedTest struct {\n\tact HandlingActivity\n\texp bool\n}\n\nvar eventExpectedTests = []eventExpectedTest{\n\t{HandlingActivity{}, true},\n\t{HandlingActivity{Type: Receive, Location: SESTO}, true},\n\t{HandlingActivity{Type: Receive, Location: AUMEL}, false},\n\t{HandlingActivity{Type: Load, Location: AUMEL, VoyageNumber: \"001A\"}, true},\n\t{HandlingActivity{Type: Load, Location: CNHKG, VoyageNumber: \"001A\"}, false},\n\t{HandlingActivity{Type: Unload, Location: CNHKG, VoyageNumber: \"001A\"}, true},\n\t{HandlingActivity{Type: Unload, Location: SESTO, VoyageNumber: \"001A\"}, false},\n\t{HandlingActivity{Type: Claim, Location: CNHKG}, true},\n\t{HandlingActivity{Type: Claim, Location: SESTO}, false},\n}\n\nfunc TestItinerary_IsExpected(t *testing.T) {\n\ti := Itinerary{Legs: []Leg{\n\t\t{\n\t\t\tVoyageNumber:   \"001A\",\n\t\t\tLoadLocation:   SESTO,\n\t\t\tUnloadLocation: AUMEL,\n\t\t},\n\t\t{\n\t\t\tVoyageNumber:   \"001A\",\n\t\t\tLoadLocation:   AUMEL,\n\t\t\tUnloadLocation: CNHKG,\n\t\t},\n\t}}\n\n\tfor _, tt := range eventExpectedTests {\n\t\te := HandlingEvent{\n\t\t\tActivity: tt.act,\n\t\t}\n\n\t\tif got := i.IsExpected(e); got != tt.exp {\n\t\t\tt.Errorf(\"IsExpected() = %v; want = %v\", got, tt.exp)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "location.go",
          "type": "blob",
          "size": 0.7275390625,
          "content": "package shipping\n\nimport \"errors\"\n\n// UNLocode is the United Nations location code that uniquely identifies a\n// particular location.\n//\n// http://www.unece.org/cefact/locode/\n// http://www.unece.org/cefact/locode/DocColumnDescription.htm#LOCODE\ntype UNLocode string\n\n// Location is a location is our model is stops on a journey, such as cargo\n// origin or destination, or carrier movement endpoints.\ntype Location struct {\n\tUNLocode UNLocode\n\tName     string\n}\n\n// ErrUnknownLocation is used when a location could not be found.\nvar ErrUnknownLocation = errors.New(\"unknown location\")\n\n// LocationRepository provides access a location store.\ntype LocationRepository interface {\n\tFind(locode UNLocode) (*Location, error)\n\tFindAll() []*Location\n}\n"
        },
        {
          "name": "mock",
          "type": "tree",
          "content": null
        },
        {
          "name": "mongo",
          "type": "tree",
          "content": null
        },
        {
          "name": "routing.go",
          "type": "blob",
          "size": 0.265625,
          "content": "package shipping\n\n// RoutingService is a domain service for routing cargos.\ntype RoutingService interface {\n\t// FetchRoutesForSpecification finds all possible routes that satisfy a\n\t// given specification.\n\tFetchRoutesForSpecification(rs RouteSpecification) []Itinerary\n}\n"
        },
        {
          "name": "routing",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample_locations.go",
          "type": "blob",
          "size": 0.671875,
          "content": "package shipping\n\n// Sample UN locodes.\nvar (\n\tSESTO UNLocode = \"SESTO\"\n\tAUMEL UNLocode = \"AUMEL\"\n\tCNHKG UNLocode = \"CNHKG\"\n\tUSNYC UNLocode = \"USNYC\"\n\tUSCHI UNLocode = \"USCHI\"\n\tJNTKO UNLocode = \"JNTKO\"\n\tDEHAM UNLocode = \"DEHAM\"\n\tNLRTM UNLocode = \"NLRTM\"\n\tFIHEL UNLocode = \"FIHEL\"\n)\n\n// Sample locations.\nvar (\n\tStockholm = &Location{SESTO, \"Stockholm\"}\n\tMelbourne = &Location{AUMEL, \"Melbourne\"}\n\tHongkong  = &Location{CNHKG, \"Hongkong\"}\n\tNewYork   = &Location{USNYC, \"New York\"}\n\tChicago   = &Location{USCHI, \"Chicago\"}\n\tTokyo     = &Location{JNTKO, \"Tokyo\"}\n\tHamburg   = &Location{DEHAM, \"Hamburg\"}\n\tRotterdam = &Location{NLRTM, \"Rotterdam\"}\n\tHelsinki  = &Location{FIHEL, \"Helsinki\"}\n)\n"
        },
        {
          "name": "sample_voyages.go",
          "type": "blob",
          "size": 1.1171875,
          "content": "package shipping\n\n// A set of sample voyages.\nvar (\n\tV100 = NewVoyage(\"V100\", Schedule{\n\t\t[]CarrierMovement{\n\t\t\t{DepartureLocation: CNHKG, ArrivalLocation: JNTKO},\n\t\t\t{DepartureLocation: JNTKO, ArrivalLocation: USNYC},\n\t\t},\n\t})\n\n\tV300 = NewVoyage(\"V300\", Schedule{\n\t\t[]CarrierMovement{\n\t\t\t{DepartureLocation: JNTKO, ArrivalLocation: NLRTM},\n\t\t\t{DepartureLocation: NLRTM, ArrivalLocation: DEHAM},\n\t\t\t{DepartureLocation: DEHAM, ArrivalLocation: AUMEL},\n\t\t\t{DepartureLocation: AUMEL, ArrivalLocation: JNTKO},\n\t\t},\n\t})\n\n\tV400 = NewVoyage(\"V400\", Schedule{\n\t\t[]CarrierMovement{\n\t\t\t{DepartureLocation: DEHAM, ArrivalLocation: SESTO},\n\t\t\t{DepartureLocation: SESTO, ArrivalLocation: FIHEL},\n\t\t\t{DepartureLocation: FIHEL, ArrivalLocation: DEHAM},\n\t\t},\n\t})\n)\n\n// These voyages are hard-coded into the current pathfinder. Make sure\n// they exist.\nvar (\n\tV0100S = NewVoyage(\"0100S\", Schedule{[]CarrierMovement{}})\n\tV0200T = NewVoyage(\"0200T\", Schedule{[]CarrierMovement{}})\n\tV0300A = NewVoyage(\"0300A\", Schedule{[]CarrierMovement{}})\n\tV0301S = NewVoyage(\"0301S\", Schedule{[]CarrierMovement{}})\n\tV0400S = NewVoyage(\"0400S\", Schedule{[]CarrierMovement{}})\n)\n"
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "tracking",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "voyage.go",
          "type": "blob",
          "size": 0.9833984375,
          "content": "package shipping\n\nimport (\n\t\"errors\"\n\t\"time\"\n)\n\n// VoyageNumber uniquely identifies a particular Voyage.\ntype VoyageNumber string\n\n// Voyage is a uniquely identifiable series of carrier movements.\ntype Voyage struct {\n\tVoyageNumber VoyageNumber\n\tSchedule     Schedule\n}\n\n// NewVoyage creates a voyage with a voyage number and a provided schedule.\nfunc NewVoyage(n VoyageNumber, s Schedule) *Voyage {\n\treturn &Voyage{VoyageNumber: n, Schedule: s}\n}\n\n// Schedule describes a voyage schedule.\ntype Schedule struct {\n\tCarrierMovements []CarrierMovement\n}\n\n// CarrierMovement is a vessel voyage from one location to another.\ntype CarrierMovement struct {\n\tDepartureLocation UNLocode\n\tArrivalLocation   UNLocode\n\tDepartureTime     time.Time\n\tArrivalTime       time.Time\n}\n\n// ErrUnknownVoyage is used when a voyage could not be found.\nvar ErrUnknownVoyage = errors.New(\"unknown voyage\")\n\n// VoyageRepository provides access a voyage store.\ntype VoyageRepository interface {\n\tFind(VoyageNumber) (*Voyage, error)\n}\n"
        }
      ]
    }
  ]
}