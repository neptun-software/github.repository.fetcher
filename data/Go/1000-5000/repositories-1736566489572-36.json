{
  "metadata": {
    "timestamp": 1736566489572,
    "page": 36,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mgechev/revive",
      "stars": 4858,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".docs-deploy-key.pem.enc",
          "type": "blob",
          "size": 1.671875,
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "golinter\nrevive\nvendor\n*.swp\ndist/\n*.log\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 0.634765625,
          "content": "# This is an example goreleaser.yaml file with some sane defaults.\n# Make sure to check the documentation at http://goreleaser.com\n---\nversion: 2\narchives:\n  - id: revive\n    name_template: '{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'\nbefore:\n  hooks:\n    - \"go mod download\"\n    - \"go generate ./...\"\nbuilds:\n  -\n    env:\n      - CGO_ENABLED=0\n      - BUILDER=GoReleaser\n    goos:\n      - linux\n      - darwin\n      - windows\n\nchangelog:\n  filters:\n    exclude:\n      - \"^docs:\"\n      - \"^test:\"\n  sort: asc\nchecksum:\n  name_template: checksums.txt\nsnapshot:\n  version_template: \"{{ .Tag }}-next\"\nproject_name: revive\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.13671875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at minko@gechev.io. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.876953125,
          "content": "# Contributing to revive\n\nPlease contribute to this repository if any of the following is true:\n\n* You are interested in improving the revive source or docs.\n* You have expertise in community development, communication, or education.\n* You want open source communities to be more collaborative and inclusive.\n* You want to help lower the burden to first time contributors.\n\n## How to contribute\n\nPrerequisites:\n\n* Familiarity with [GitHub PRs](https://help.github.com/articles/using-pull-requests) (pull requests) and issues.\n* Knowledge of Go and familiarity with static code analysis, or tech writing.\n\n## Submitting a Pull Request\n\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. See our [developer guide](DEVELOPING.md) for instructions on building the project.\n\nPull requests (fixes, new features, tests) are a great way to contribute to the project and help us make it better. Ideally, try to keep your PRs as focused as possible and keep your commits atomic and readable.\n\nTo avoid disappointment when working on a PR, please ask us first in case someone else is already working on a PR for a change you wished to make. It's always a good idea to file an issue before starting work on a PR unless it's for something minor (such as a typo fix).\n\nWe greatly appreciate any attention to tests. These help us validate that new work continues to function as expected over time.\n\nIn particular, this community seeks the following types of contributions:\n\n* Improvement of the documentation. For example, tutorial on development of a custom rule, or a formatter.\n* Development of new rules for providing an even stricter preset of validations.\n* Development of new formatters for more readable output of the linting process.\n\nThis contribution guide was inspired by others including contributing to\nGoogle open-source, React, Gulp, Babel, Guess.js.\n"
        },
        {
          "name": "DEVELOPING.md",
          "type": "blob",
          "size": 1.0830078125,
          "content": "# Developer's Guide\n\nThis document explains how to build, test, and develop features for revive.\n\n## Installation\n\nClone the project:\n\n```\ngit clone git@github.com:mgechev/revive.git\ncd revive\n```\n\nIn order to fetch all the dependencies run:\n\n```bash\nmake install\n```\n\n## Build\n\nIn order to build the project run:\n\n```bash\nmake build\n```\n\nThe command will produce the `revive` binary in the root of the project.\n\n## Development of rules\n\nIf you want to develop a new rule, follow as an example the already existing rules in the [rule package](https://github.com/mgechev/revive/tree/master/rule).\n\nAll rules should implement the following interface:\n\n```go\ntype Rule interface {\n\tName() string\n\tApply(*File, Arguments) []Failure\n}\n```\n\n## Development of formatters\n\nIf you want to develop a new formatter, follow as an example the already existing formatters in the [formatter package](https://github.com/mgechev/revive/tree/master/formatter).\n\nAll formatters should implement the following interface:\n\n```go\ntype Formatter interface {\n\tFormat(<-chan Failure, RulesConfig) (string, error)\n\tName() string\n}\n```\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5146484375,
          "content": "FROM --platform=$BUILDPLATFORM golang:1.23 AS build\n\nARG VERSION\nARG REVISION\nARG BUILDTIME\nARG BUILDER\n\nARG TARGETOS\nARG TARGETARCH\n\nENV CGO_ENABLED=0\n\nWORKDIR /src\nCOPY . .\n\nRUN GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build \\\n    -ldflags \"-X github.com/mgechev/revive/cli.version=${VERSION} -X github.com/mgechev/revive/cli.commit=${REVISION} -X github.com/mgechev/revive/cli.date=${BUILDTIME} -X github.com/mgechev/revive/cli.builtBy=${BUILDER}\"\n\nFROM scratch\n\nCOPY --from=build /src/revive /revive\n\nENTRYPOINT [\"/revive\"]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2018 Minko Gechev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.548828125,
          "content": ".PHONY: test\n\nexport GO111MODULE=on\n\nGIT_COMMIT ?= $(shell git rev-parse --verify HEAD)\nGIT_VERSION ?= $(shell git describe --tags --always --dirty=\"-dev\")\nDATE ?= $(shell date -u '+%Y-%m-%d %H:%M UTC')\nBUILDER ?= Makefile\nVERSION_FLAGS := -X \"github.com/mgechev/revive/cli.version=$(GIT_VERSION)\" -X \"github.com/mgechev/revive/cli.date=$(DATE)\" -X \"github.com/mgechev/revive/cli.commit=$(GIT_COMMIT)\" -X \"github.com/mgechev/revive/cli.builtBy=$(BUILDER)\"\n\ninstall:\n\t@go mod vendor\n\nbuild:\n\t@go build -ldflags='$(VERSION_FLAGS)'\n\ntest:\n\t@go test -v -race ./...\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 59.794921875,
          "content": "[![Build Status](https://github.com/mgechev/revive/actions/workflows/test.yaml/badge.svg)](https://github.com/mgechev/revive/actions/workflows/test.yaml)\n\n# revive\n\nFast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint. **`Revive` provides a framework for development of custom rules, and lets you define a strict preset for enhancing your development & code review processes**.\n\n<p align=\"center\">\n  <img src=\"./assets/logo.png\" alt=\"\" width=\"300\">\n  <br>\n  Logo by <a href=\"https://github.com/hawkgs\">Georgi Serev</a>\n</p>\n\nHere's how `revive` is different from `golint`:\n\n- Allows to enable or disable rules using a configuration file.\n- Allows to configure the linting rules with a TOML file.\n- 2x faster running the same rules as golint.\n- Provides functionality for disabling a specific rule or the entire linter for a file or a range of lines.\n  - `golint` allows this only for generated files.\n- Optional type checking. Most rules in golint do not require type checking. If you disable them in the config file, revive will run over 6x faster than golint.\n- Provides multiple formatters which let us customize the output.\n- Allows to customize the return code for the entire linter or based on the failure of only some rules.\n- _Everyone can extend it easily with custom rules or formatters._\n- `Revive` provides more rules compared to `golint`.\n\n## Who uses Revive\n\n- [`tidb`](https://github.com/pingcap/tidb) - TiDB is a distributed HTAP database compatible with the MySQL protocol\n- [`grafana`](https://github.com/grafana/grafana) - The tool for beautiful monitoring and metric analytics & dashboards for Graphite, InfluxDB & Prometheus & More\n- [`etcd`](https://github.com/etcd-io/etcd) - Distributed reliable key-value store for the most critical data of a distributed system\n- [`cadence`](https://github.com/uber/cadence) - Cadence is a distributed, scalable, durable, and highly available orchestration engine by Uber to execute asynchronous long-running business logic in a scalable and resilient way\n- [`ferret`](https://github.com/MontFerret/ferret) - Declarative web scraping\n- [`gopass`](https://github.com/gopasspw/gopass) - The slightly more awesome standard unix password manager for teams\n- [`gitea`](https://github.com/go-gitea/gitea) - Git with a cup of tea, painless self-hosted git service\n- [`excelize`](https://github.com/360EntSecGroup-Skylar/excelize) - Go library for reading and writing Microsoft Excel™ (XLSX) files\n- [`aurora`](https://github.com/xuri/aurora) - aurora is a web-based Beanstalk queue server console written in Go\n- [`soar`](https://github.com/XiaoMi/soar) - SQL Optimizer And Rewriter\n- [`pyroscope`](https://github.com/pyroscope-io/pyroscope) - Continuous profiling platform\n- [`gorush`](https://github.com/appleboy/gorush) - A push notification server written in Go (Golang).\n- [`dry`](https://github.com/moncho/dry) - dry - A Docker manager for the terminal.\n- [`go-echarts`](https://github.com/chenjiandongx/go-echarts) - The adorable charts library for Golang\n- [`reviewdog`](https://github.com/reviewdog/reviewdog) - Automated code review tool integrated with any code analysis tools regardless of programming language\n- [`rudder-server`](https://github.com/rudderlabs/rudder-server) - Privacy and Security focused Segment-alternative, in Golang and React.\n- [`sklearn`](https://github.com/pa-m/sklearn) - A partial port of scikit-learn written in Go.\n- [`protoc-gen-doc`](https://github.com/pseudomuto/protoc-gen-doc) - Documentation generator plugin for Google Protocol Buffers.\n- [`llvm`](https://github.com/llir/llvm) - Library for interacting with LLVM IR in pure Go.\n- [`jenkins-library`](https://github.com/SAP/jenkins-library) - Jenkins shared library for Continuous Delivery pipelines by SAP.\n- [`pd`](https://github.com/tikv/pd) - Placement driver for TiKV.\n- [`shellhub`](https://github.com/shellhub-io/shellhub) - ShellHub enables teams to easily access any Linux device behind firewall and NAT.\n- [`lorawan-stack`](https://github.com/TheThingsNetwork/lorawan-stack) - The Things Network Stack for LoRaWAN V3\n- [`gin-jwt`](https://github.com/appleboy/gin-jwt) - This is a JWT middleware for Gin framework.\n- [`gofight`](https://github.com/appleboy/gofight) - Testing API Handler written in Golang.\n- [`Beaver`](https://github.com/Clivern/Beaver) - A Real Time Messaging Server.\n- [`ggz`](https://github.com/go-ggz/ggz) - An URL shortener service written in Golang\n- [`Codeac.io`](https://www.codeac.io?ref=revive) - Automated code review service integrates with GitHub, Bitbucket and GitLab (even self-hosted) and helps you fight technical debt.\n- [`DevLake`](https://github.com/apache/incubator-devlake) - Apache DevLake is an open-source dev data platform to ingest, analyze, and visualize the fragmented data from DevOps tools，which can distill insights to improve engineering productivity.\n- [`checker`](https://github.com/cinar/checker) - Checker helps validating user input through rules defined in struct tags or directly through functions.\n- [`milvus`](https://github.com/milvus-io/milvus) - A cloud-native vector database, storage for next generation AI applications.\n- [`indicator`](https://github.com/cinar/indicator) - Indicator provides various technical analysis indicators, strategies, and a backtesting framework.\n\n*Open a PR to add your project*.\n\n<p align=\"center\">\n  <img src=\"./assets/demo.svg\" alt=\"\" width=\"700\">\n</p>\n\n<!-- TOC -->\n\n- [revive](#revive)\n  - [Who uses Revive](#who-uses-revive)\n  - [Installation](#installation)\n  - [Usage](#usage)\n    - [Docker](#docker)\n    - [Bazel](#bazel)\n    - [Text Editors](#text-editors)\n    - [GitHub Actions](#github-actions)\n    - [Continuous Integration](#continuous-integration)\n    - [Linter aggregators](#linter-aggregators)\n      - [golangci-lint](#golangci-lint)\n    - [Command Line Flags](#command-line-flags)\n    - [Sample Invocations](#sample-invocations)\n    - [Comment Directives](#comment-directives)\n    - [Configuration](#configuration)\n    - [Default Configuration](#default-configuration)\n    - [Custom Configuration](#custom-configuration)\n    - [Recommended Configuration](#recommended-configuration)\n    - [Rule-level file excludes](#rule-level-file-excludes)\n  - [Available Rules](#available-rules)\n  - [Configurable rules](#configurable-rules)\n    - [`var-naming`](#var-naming)\n  - [Available Formatters](#available-formatters)\n    - [Friendly](#friendly)\n    - [Stylish](#stylish)\n    - [Default](#default)\n    - [Plain](#plain)\n    - [Unix](#unix)\n    - [JSON](#json)\n    - [NDJSON](#ndjson)\n    - [Checkstyle](#checkstyle)\n    - [SARIF](#sarif)\n  - [Extensibility](#extensibility)\n    - [Writing a Custom Rule](#writing-a-custom-rule)\n      - [Example](#example)\n      - [Using `revive` as a library](#using-revive-as-a-library)\n    - [Custom Formatter](#custom-formatter)\n  - [Speed Comparison](#speed-comparison)\n    - [golint](#golint)\n    - [revive's speed](#revives-speed)\n  - [Overriding colorization detection](#overriding-colorization-detection)\n  - [Contributors](#contributors)\n  - [License](#license)\n\n<!-- /TOC -->\n\n## Installation\n\n```bash\ngo install github.com/mgechev/revive@latest\n```\n\nor get a released executable from the [Releases](https://github.com/mgechev/revive/releases) page.\n\nYou can install the main branch (including the last commit) with:\n```bash\ngo install github.com/mgechev/revive@master\n```\n\n## Usage\n\nSince the default behavior of `revive` is compatible with `golint`, without providing any additional flags, the only difference you'd notice is faster execution.\n\n`revive` supports a `-config` flag whose value should correspond to a TOML file describing which rules to use for `revive`'s linting. If not provided, `revive` will try to use a global config file (assumed to be located at `$HOME/revive.toml`). Otherwise, if no configuration TOML file is found then `revive` uses a built-in set of default linting rules.\n\n### Docker\n\nA volume must be mounted to share the current repository with the container.\nPlease refer to the [bind mounts Docker documentation](https://docs.docker.com/storage/bind-mounts/)\n\n```bash\ndocker run -v \"$(pwd)\":/var/<repository> ghcr.io/mgechev/revive:v1.3.7 -config /var/<repository>/revive.toml -formatter stylish ./var/kidle/...\n```\n\n- `-v` is for the volume\n- `ghcr.io/mgechev/revive:v1.3.7 ` is the image name and its version corresponds to `revive` command\n- The provided flags are the same as the binary usage.\n\n### Bazel\n\nIf you want to use revive with Bazel, look at the [rules](https://github.com/atlassian/bazel-tools/tree/master/gorevive) that Atlassian maintains.\n\n### Text Editors\n\n- Support for VSCode via [vscode-go](https://code.visualstudio.com/docs/languages/go#_build-and-diagnose) by changing the `go.lintTool` setting to `revive`:\n\n```json\n{\n  \"go.lintTool\": \"revive\",\n}\n```\n\n- Support for GoLand via [File Watchers](https://dev.to/s0xzwasd/configure-revive-go-linter-in-goland-2ggl).\n- Support for vim via [dense-analysis/ale](https://github.com/dense-analysis/ale).\n\n  ```vim\n  let g:ale_linters = {\n  \\   'go': ['revive'],\n  \\}\n  ```\n\n- Support for Neovim via [null-ls.nvim](https://github.com/jose-elias-alvarez/null-ls.nvim).\n\n  ```lua\n  require(\"null-ls\").setup({\n      sources = {\n          require(\"null-ls\").builtins.diagnostics.revive\n      },\n  })\n  ```\n\n### GitHub Actions\n\n- [Revive Action](https://github.com/marketplace/actions/revive-action) with annotation support\n\n### Continuous Integration\n\n[Codeac.io](https://www.codeac.io?ref=revive) - Automated code review service integrates with GitHub, Bitbucket and GitLab (even self-hosted) and helps you fight technical debt. Check your [pull-requests](https://www.codeac.io/documentation/pull-requests.html?ref=revive) with [revive](https://www.codeac.io/documentation/revive-configuration.html?ref=revive) automatically. (free for open-source projects)\n\n### Linter aggregators\n\n#### golangci-lint\n\nTo enable `revive` in `golangci-lint` you need to add `revive` to the list of enabled linters:\n\n```yaml\n# golangci-lint configuration file\nlinters:\n   enable:\n     - revive\n```\nThen `revive` can be configured by adding an entry to the `linters-settings` section of the configuration, for example:\n\n```yaml\n# golangci-lint configuration file\nlinters-settings:\n  revive:\n    ignore-generated-header: true\n    severity: warning\n    rules:\n      - name: atomic\n      - name: line-length-limit\n        severity: error\n        arguments: [80]\n      - name: unhandled-error\n        arguments : [\"fmt.Printf\", \"myFunction\"]\n```\n\nThe above configuration enables three rules of `revive`: _atomic_, _line-length-limit_ and _unhandled-error_ and pass some arguments to the last two.\nThe [Configuration](#configuration) section of this document provides details on how to configure `revive`. Note that while `revive` configuration is in TOML, that of `golangci-lint` is in YAML.\n\nPlease notice that if no particular configuration is provided, `revive` will behave as `go-lint` does, i.e. all `go-lint` rules are enabled (the [Available Rules table](#available-rules) details what are the `go-lint` rules). When a configuration is provided, only rules in the configuration are enabled.\n\n### Command Line Flags\n\n`revive` accepts the following command line parameters:\n\n- `-config [PATH]` - path to the config file in TOML format, defaults to `$HOME/revive.toml` if present.\n- `-exclude [PATTERN]` - pattern for files/directories/packages to be excluded for linting. You can specify the files you want to exclude for linting either as package name (i.e. `github.com/mgechev/revive`), list them as individual files (i.e. `file.go`), directories (i.e. `./foo/...`), or any combination of the three. If no exclusion patterns are specified, `vendor/...` will be excluded by default.\n- `-formatter [NAME]` - formatter to be used for the output. The currently available formatters are:\n\n  - `default` - will output the failures the same way that `golint` does.\n  - `json` - outputs the failures in JSON format.\n  - `ndjson` - outputs the failures as a stream in newline delimited JSON (NDJSON) format.\n  - `friendly` - outputs the failures when found. Shows the summary of all the failures.\n  - `stylish` - formats the failures in a table. Keep in mind that it doesn't stream the output so it might be perceived as slower compared to others.\n  - `checkstyle` - outputs the failures in XML format compatible with that of Java's [Checkstyle](https://checkstyle.org/).\n- `-max_open_files` -  maximum number of open files at the same time. Defaults to unlimited.\n- `-set_exit_status` - set exit status to 1 if any issues are found, overwrites `errorCode` and `warningCode` in config.\n- `-version` - get revive version.\n\n\n### Sample Invocations\n\n```shell\nrevive -config revive.toml -exclude file1.go -exclude file2.go -formatter friendly github.com/mgechev/revive package/...\n```\n\n- The command above will use the configuration from `revive.toml`\n- `revive` will ignore `file1.go` and `file2.go`\n- The output will be formatted with the `friendly` formatter\n- The linter will analyze `github.com/mgechev/revive` and the files in `package`\n\n### Comment Directives\n\nUsing comments, you can disable the linter for the entire file or only a range of lines:\n\n```go\n//revive:disable\n\nfunc Public() {}\n//revive:enable\n```\n\nThe snippet above, will disable `revive` between the `revive:disable` and `revive:enable` comments. If you skip `revive:enable`, the linter will be disabled for the rest of the file.\n\nWith `revive:disable-next-line` and `revive:disable-line` you can disable `revive` on a particular code line.\n\nYou can do the same on a rule level. In case you want to disable only a particular rule, you can use:\n\n```go\n//revive:disable:unexported-return\nfunc Public() private {\n  return private\n}\n//revive:enable:unexported-return\n```\n\nThis way, `revive` will not warn you that you're returning an object of an unexported type, from an exported function.\n\nYou can document why you disable the linter by adding a trailing text in the directive, for example\n\n```go\n//revive:disable Until the code is stable\n```\n\n```go\n//revive:disable:cyclomatic High complexity score but easy to understand\n```\n\nYou can also configure `revive` to enforce documenting linter disabling directives by adding\n\n```toml\n[directive.specify-disable-reason]\n```\n\nin the configuration. You can set the severity (defaults to _warning_) of the violation of this directive\n\n```toml\n[directive.specify-disable-reason]\n    severity = \"error\"\n```\n\n### Configuration\n\n`revive` can be configured with a TOML file. Here's a sample configuration with an explanation of the individual properties:\n\n```toml\n# When set to false, ignores files with \"GENERATED\" header, similar to golint\nignoreGeneratedHeader = true\n\n# Sets the default severity to \"warning\"\nseverity = \"warning\"\n\n# Sets the default failure confidence. This means that linting errors\n# with less than 0.8 confidence will be ignored.\nconfidence = 0.8\n\n# Sets the error code for failures with the \"error\" severity\nerrorCode = 0\n\n# Sets the error code for failures with severity \"warning\"\nwarningCode = 0\n\n# Configuration of the `cyclomatic` rule. Here we specify that\n# the rule should fail if it detects code with higher complexity than 10.\n[rule.cyclomatic]\n  arguments = [10]\n\n# Sets the severity of the `package-comments` rule to \"error\".\n[rule.package-comments]\n  severity = \"error\"\n```\n\nBy default `revive` will enable only the linting rules that are named in the configuration file.\nFor example, the previous configuration file makes `revive` to enable only _cyclomatic_ and _package-comments_ linting rules.\n\nTo enable all available rules you need to add:\n\n```toml\nenableAllRules = true\n```\n\nThis will enable all available rules no matter what rules are named in the configuration file.\n\nTo disable a rule, you simply mark it as disabled in the configuration.\nFor example:\n\n```toml\n[rule.line-length-limit]\n    Disabled = true\n```\n\nWhen enabling all rules you still need/can provide specific configurations for rules.\nThe following file is an example configuration where all rules are enabled, except for those that are explicitly disabled, and some rules are configured with particular arguments:\n\n```toml\nseverity = \"warning\"\nconfidence = 0.8\nerrorCode = 0\nwarningCode = 0\n\n# Enable all available rules\nenableAllRules = true\n\n# Disabled rules\n[rule.blank-imports]\n    Disabled = true\n[rule.file-header]\n    Disabled = true\n[rule.max-public-structs]\n    Disabled = true\n[rule.line-length-limit]\n    Disabled = true\n[rule.function-length]\n    Disabled = true\n[rule.banned-characters]\n    Disabled = true\n\n# Rule tuning\n[rule.argument-limit]\n    Arguments = [5]\n[rule.cyclomatic]\n    Arguments = [10]\n[rule.cognitive-complexity]\n    Arguments = [7]\n[rule.function-result-limit]\n    Arguments = [3]\n[rule.error-strings]\n    Arguments = [\"mypackage.Error\"]\n```\n\n### Default Configuration\n\nThe default configuration of `revive` can be found at `defaults.toml`. This will enable all rules available in `golint` and use their default configuration (i.e. the way they are hardcoded in `golint`).\n\n```shell\nrevive -config defaults.toml github.com/mgechev/revive\n```\n\nThis will use the configuration file `defaults.toml`, the `default` formatter, and will run linting over the `github.com/mgechev/revive` package.\n\n### Custom Configuration\n\n```shell\nrevive -config config.toml -formatter friendly github.com/mgechev/revive\n```\n\nThis will use `config.toml`, the `friendly` formatter, and will run linting over the `github.com/mgechev/revive` package.\n\n### Recommended Configuration\n\nThe following snippet contains the recommended `revive` configuration that you can use in your project:\n\n```toml\nignoreGeneratedHeader = false\nseverity = \"warning\"\nconfidence = 0.8\nerrorCode = 0\nwarningCode = 0\n\n[rule.blank-imports]\n[rule.context-as-argument]\n[rule.context-keys-type]\n[rule.dot-imports]\n[rule.error-return]\n[rule.error-strings]\n[rule.error-naming]\n[rule.exported]\n[rule.increment-decrement]\n[rule.var-naming]\n[rule.var-declaration]\n[rule.package-comments]\n[rule.range]\n[rule.receiver-naming]\n[rule.time-naming]\n[rule.unexported-return]\n[rule.indent-error-flow]\n[rule.errorf]\n[rule.empty-block]\n[rule.superfluous-else]\n[rule.unused-parameter]\n[rule.unreachable-code]\n[rule.redefines-builtin-id]\n```\n\n### Rule-level file excludes\n\nYou also can setup custom excludes for each rule.\n\nIt's an alternative for the global `-exclude` program arg.\n\n```toml\nignoreGeneratedHeader = false\nseverity = \"warning\"\nconfidence = 0.8\nerrorCode = 0\nwarningCode = 0\n\n[rule.blank-imports]\n   Exclude=[\"**/*.pb.go\"]\n[rule.context-as-argument]\n   Exclude=[\"src/somepkg/*.go\", \"TEST\"]\n```\n\nYou can use the following exclude patterns\n\n1. full paths to files `src/pkg/mypkg/some.go`\n2. globs `src/**/*.pb.go`\n3. regexes (should have prefix ~) `~\\.(pb|auto|generated)\\.go$`\n4. well-known `TEST` (same as `**/*_test.go`)\n5. special cases:\n  a. `*` and `~` patterns exclude all files (same effect as disabling the rule)\n  b. `\"\"` (empty) pattern excludes nothing\n\n> NOTE: do not mess with `exclude` that can  be used at the top level of TOML file, that means \"exclude package patterns\", not \"exclude file patterns\"\n\n## Available Rules\n\nList of all available rules. The rules ported from `golint` are left unchanged and indicated in the `golint` column.\n| Name                  | Config | Description                                                      | `golint` | Typed |\n| --------------------- | :----: | :--------------------------------------------------------------- | :------: | :---: |\n| [`context-keys-type`](./RULES_DESCRIPTIONS.md#context-key-types)   |  n/a   | Disallows the usage of basic types in `context.WithValue`.       |   yes    |  yes  |\n| [`time-equal`](./RULES_DESCRIPTIONS.md#time-equal)         |  n/a   | Suggests to use `time.Time.Equal` instead of `==` and `!=` for equality check time.                 |   no    |  yes  |\n| [`time-naming`](./RULES_DESCRIPTIONS.md#time-naming)         |  n/a   | Conventions around the naming of time variables.                 |   yes    |  yes  |\n| [`unchecked-type-assertions`](./RULES_DESCRIPTIONS.md#unchecked-type-assertions)         |  n/a   | Disallows type assertions without checking the result.                 |   no    |  yes  |\n| [`var-declaration`](./RULES_DESCRIPTIONS.md#var-declaration)     |  n/a   | Reduces redundancies around variable declaration.                |   yes    |  yes  |\n| [`unexported-return`](./RULES_DESCRIPTIONS.md#unexported-return)   |  n/a   | Warns when a public return is from unexported type.              |   yes    |  yes  |\n| [`errorf`](./RULES_DESCRIPTIONS.md#errorf)              |  n/a   | Should replace `errors.New(fmt.Sprintf())` with `fmt.Errorf()`   |   yes    |  yes  |\n| [`blank-imports`](./RULES_DESCRIPTIONS.md#blank-imports)       |  n/a   | Disallows blank imports                                          |   yes    |  no   |\n| [`context-as-argument`](./RULES_DESCRIPTIONS.md#context-as-argument) |  n/a   | `context.Context` should be the first argument of a function.    |   yes    |  no   |\n| [`dot-imports`](./RULES_DESCRIPTIONS.md#dot-imports)         |  n/a   | Forbids `.` imports.                                             |   yes    |  no   |\n| [`error-return`](./RULES_DESCRIPTIONS.md#error-return)        |  n/a   | The error return parameter should be last.                       |   yes    |  no   |\n| [`error-strings`](./RULES_DESCRIPTIONS.md#error-strings)       |  []string   | Conventions around error strings.                                |   yes    |  no   |\n| [`error-naming`](./RULES_DESCRIPTIONS.md#error-naming)        |  n/a   | Naming of error variables.                                       |   yes    |  no   |\n| [`exported`](./RULES_DESCRIPTIONS.md#exported)            |  []string   | Naming and commenting conventions on exported symbols.           |   yes    |  no   |\n| [`if-return`](./RULES_DESCRIPTIONS.md#if-return)           |  n/a   | Redundant if when returning an error.                            |   no    |  no   |\n| [`increment-decrement`](./RULES_DESCRIPTIONS.md#increment-decrement) |  n/a   | Use `i++` and `i--` instead of `i += 1` and `i -= 1`.            |   yes    |  no   |\n| [`var-naming`](./RULES_DESCRIPTIONS.md#var-naming)          |  allowlist & blocklist of initialisms   | Naming rules.                                                    |   yes    |  no   |\n| [`package-comments`](./RULES_DESCRIPTIONS.md#package-comments)    |  n/a   | Package commenting conventions.                                  |   yes    |  no   |\n| [`range`](./RULES_DESCRIPTIONS.md#range)               |  n/a   | Prevents redundant variables when iterating over a collection.   |   yes    |  no   |\n| [`receiver-naming`](./RULES_DESCRIPTIONS.md#receiver-naming)     |  map (optional)   | Conventions around the naming of receivers.                      |   yes    |  no   |\n| [`indent-error-flow`](./RULES_DESCRIPTIONS.md#indent-error-flow)   |  []string   | Prevents redundant else statements.                              |   yes    |  no   |\n| [`argument-limit`](./RULES_DESCRIPTIONS.md#argument-limit)      |  int (defaults to 8)  | Specifies the maximum number of arguments a function can receive |    no    |  no   |\n| [`cyclomatic`](./RULES_DESCRIPTIONS.md#cyclomatic)          |  int (defaults to 10)   | Sets restriction for maximum Cyclomatic complexity.              |    no    |  no   |\n| [`max-public-structs`](./RULES_DESCRIPTIONS.md#max-public-structs)  |  int (defaults to 5)  | The maximum number of public structs in a file.                  |    no    |  no   |\n| [`file-header`](./RULES_DESCRIPTIONS.md#file-header)         | string (defaults to none)| Header which each file should have.                              |    no    |  no   |\n| [`empty-block`](./RULES_DESCRIPTIONS.md#empty-block)         |  n/a   | Warns on empty code blocks                                       |    no    |  yes   |\n| [`superfluous-else`](./RULES_DESCRIPTIONS.md#superfluous-else)    |  []string   | Prevents redundant else statements (extends [`indent-error-flow`](./RULES_DESCRIPTIONS.md#indent-error-flow)) |    no    |  no   |\n| [`confusing-naming`](./RULES_DESCRIPTIONS.md#confusing-naming)    |  n/a   | Warns on methods with names that differ only by capitalization   |    no    |  no   |\n| [`get-return`](./RULES_DESCRIPTIONS.md#get-return)          |  n/a   | Warns on getters that do not yield any result                    |    no    |  no   |\n| [`modifies-parameter`](./RULES_DESCRIPTIONS.md#modifies-parameter)  |  n/a   | Warns on assignments to function parameters                      |    no    |  no   |\n| [`confusing-results`](./RULES_DESCRIPTIONS.md#confusing-results)   |  n/a   | Suggests to name potentially confusing function results          |    no    |  no   |\n| [`deep-exit`](./RULES_DESCRIPTIONS.md#deep-exit)           |  n/a   | Looks for program exits in funcs other than `main()` or `init()` |    no    |  no   |\n| [`unused-parameter`](./RULES_DESCRIPTIONS.md#unused-parameter)    |  n/a   | Suggests to rename or remove unused function parameters          |    no    |  no   |\n| [`unreachable-code`](./RULES_DESCRIPTIONS.md#unreachable-code)    |  n/a   | Warns on unreachable code                                        |    no    |  no   |\n| [`add-constant`](./RULES_DESCRIPTIONS.md#add-constant)        |  map   | Suggests using constant for magic numbers and string literals    |    no    |  no   |\n| [`flag-parameter`](./RULES_DESCRIPTIONS.md#flag-parameter)      |  n/a   | Warns on boolean parameters that create a control coupling       |    no    |  no   |\n| [`unnecessary-stmt`](./RULES_DESCRIPTIONS.md#unnecessary-stmt)    |  n/a   | Suggests removing or simplifying unnecessary statements          |    no    |  no   |\n| [`struct-tag`](./RULES_DESCRIPTIONS.md#struct-tag)          |  []string   | Checks common struct tags like `json`, `xml`, `yaml`               |    no    |  no   |\n| [`modifies-value-receiver`](./RULES_DESCRIPTIONS.md#modifies-value-receiver) |  n/a   | Warns on assignments to value-passed method receivers        |    no    |  yes  |\n| [`constant-logical-expr`](./RULES_DESCRIPTIONS.md#constant-logical-expr)   |  n/a   | Warns on constant logical expressions                        |    no    |  no   |\n| [`bool-literal-in-expr`](./RULES_DESCRIPTIONS.md#bool-literal-in-expr)|  n/a   | Suggests removing Boolean literals from logic expressions        |    no    |  no   |\n| [`redefines-builtin-id`](./RULES_DESCRIPTIONS.md#redefines-builtin-id)|  n/a   | Warns on redefinitions of builtin identifiers                    |    no    |  no   |\n| [`function-result-limit`](./RULES_DESCRIPTIONS.md#function-result-limit) |  int (defaults to 3)| Specifies the maximum number of results a function can return    |    no    |  no   |\n| [`imports-blocklist`](./RULES_DESCRIPTIONS.md#imports-blocklist)   | []string | Disallows importing the specified packages                     |    no    |  no   |\n| [`range-val-in-closure`](./RULES_DESCRIPTIONS.md#range-val-in-closure)|  n/a   | Warns if range value is used in a closure dispatched as goroutine|    no    |  no   |\n| [`range-val-address`](./RULES_DESCRIPTIONS.md#range-val-address)|  n/a   | Warns if address of range value is used dangerously |    no    |  yes   |\n| [`waitgroup-by-value`](./RULES_DESCRIPTIONS.md#waitgroup-by-value)  |  n/a   | Warns on functions taking sync.WaitGroup as a by-value parameter |    no    |  no   |\n| [`atomic`](./RULES_DESCRIPTIONS.md#atomic)              |  n/a   | Check for common mistaken usages of the `sync/atomic` package    |    no    |  no   |\n| [`empty-lines`](./RULES_DESCRIPTIONS.md#empty-lines)   | n/a | Warns when there are heading or trailing newlines in a block              |    no    |  no   |\n| [`line-length-limit`](./RULES_DESCRIPTIONS.md#line-length-limit)   | int (defaults to 80) | Specifies the maximum number of characters in a line             |    no    |  no   |\n| [`call-to-gc`](./RULES_DESCRIPTIONS.md#call-to-gc)   | n/a    | Warns on explicit call to the garbage collector    |    no    |  no   |\n| [`duplicated-imports`](./RULES_DESCRIPTIONS.md#duplicated-imports) | n/a  | Looks for packages that are imported two or more times   |    no    |  no   |\n| [`import-shadowing`](./RULES_DESCRIPTIONS.md#import-shadowing)   | n/a    | Spots identifiers that shadow an import    |    no    |  no   |\n| [`bare-return`](./RULES_DESCRIPTIONS.md#bare-return) | n/a  | Warns on bare returns   |    no    |  no   |\n| [`unused-receiver`](./RULES_DESCRIPTIONS.md#unused-receiver)   | n/a    | Suggests to rename or remove unused method receivers    |    no    |  no   |\n| [`unhandled-error`](./RULES_DESCRIPTIONS.md#unhandled-error)   | []string   | Warns on unhandled errors returned by function calls    |    no    |  yes   |\n| [`cognitive-complexity`](./RULES_DESCRIPTIONS.md#cognitive-complexity)          |  int (defaults to 7) | Sets restriction for maximum Cognitive complexity.              |    no    |  no   |\n| [`string-of-int`](./RULES_DESCRIPTIONS.md#string-of-int)          |  n/a   | Warns on suspicious casts from int to string            |    no    |  yes   |\n| [`string-format`](./RULES_DESCRIPTIONS.md#string-format)          |  map   | Warns on specific string literals that fail one or more user-configured regular expressions            |    no    |  no   |\n| [`early-return`](./RULES_DESCRIPTIONS.md#early-return)          | []string   | Spots if-then-else statements where the predicate may be inverted to reduce nesting |    no    |  no   |\n| [`unconditional-recursion`](./RULES_DESCRIPTIONS.md#unconditional-recursion)          |  n/a   | Warns on function calls that will lead to (direct) infinite recursion |    no    |  no   |\n| [`identical-branches`](./RULES_DESCRIPTIONS.md#identical-branches)          |  n/a   | Spots if-then-else statements with identical `then` and `else` branches       |    no    |  no   |\n| [`defer`](./RULES_DESCRIPTIONS.md#defer)          |  map   |  Warns on some [defer gotchas](https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-iii-36a1ab3d6ef1)       |    no    |  no   |\n| [`unexported-naming`](./RULES_DESCRIPTIONS.md#unexported-naming)          |  n/a   |  Warns on wrongly named un-exported symbols       |    no    |  no   |\n| [`function-length`](./RULES_DESCRIPTIONS.md#function-length)          |  int, int (defaults to 50 statements, 75 lines)   |  Warns on functions exceeding the statements or lines max |    no    |  no   |\n| [`nested-structs`](./RULES_DESCRIPTIONS.md#nested-structs)          |  n/a   |  Warns on structs within structs |    no    |  no   |\n| [`useless-break`](./RULES_DESCRIPTIONS.md#useless-break)          |  n/a   |  Warns on useless `break` statements in case clauses |    no    |  no   |\n| [`banned-characters`](./RULES_DESCRIPTIONS.md#banned-characters)          |  []string (defaults to []string{})   |  Checks banned characters in identifiers |    no    |  no   |\n| [`optimize-operands-order`](./RULES_DESCRIPTIONS.md#optimize-operands-order)          |  n/a   |  Checks inefficient conditional expressions |    no    |  no   |\n| [`use-any`](./RULES_DESCRIPTIONS.md#use-any)          |  n/a   |  Proposes to replace `interface{}` with its alias `any` |    no    |  no   |\n| [`datarace`](./RULES_DESCRIPTIONS.md#datarace)          |  n/a   |  Spots potential dataraces |    no    |  no   |\n| [`comment-spacings`](./RULES_DESCRIPTIONS.md#comment-spacings)          |  []string   |  Warns on malformed comments |    no    |  no   |\n| [`redundant-import-alias`](./RULES_DESCRIPTIONS.md#redundant-import-alias)          |  n/a   |  Warns on import aliases matching the imported package name |    no    |  no   |\n| [`import-alias-naming`](./RULES_DESCRIPTIONS.md#import-alias-naming)         | string or map[string]string (defaults to allow regex pattern ^[a-z][a-z0-9]{0,}$) | Conventions around the naming of import aliases.                              |    no    |  no   |\n| [`enforce-map-style`](./RULES_DESCRIPTIONS.md#enforce-map-style) |  string (defaults to \"any\")  |  Enforces consistent usage of `make(map[type]type)` or `map[type]type{}` for map initialization. Does not affect `make(map[type]type, size)` constructions. |    no    |  no   |\n| [`enforce-slice-style`](./RULES_DESCRIPTIONS.md#enforce-slice-style) |  string (defaults to \"any\")  |  Enforces consistent usage of `make([]type, 0)` or `[]type{}` for slice initialization. Does not affect `make(map[type]type, non_zero_len, or_non_zero_cap)` constructions. |    no    |  no   |\n| [`enforce-repeated-arg-type-style`](./RULES_DESCRIPTIONS.md#enforce-repeated-arg-type-style) |  string (defaults to \"any\")  |  Enforces consistent style for repeated argument and/or return value types. |    no    |  no   |\n| [`max-control-nesting`](./RULES_DESCRIPTIONS.md#max-control-nesting) |  int (defaults to 5)  | Sets restriction for maximum nesting of control structures. |    no    |  no   |\n| [`comments-density`](./RULES_DESCRIPTIONS.md#comments-density) |  int (defaults to 0)  | Enforces a minimum comment / code relation |    no    |  no   |\n| [`file-length-limit`](./RULES_DESCRIPTIONS.md#file-length-limit) | map (optional)| Enforces a maximum number of lines per file |    no    |  no   |\n| [`filename-format`](./RULES_DESCRIPTIONS.md#filename-format) | regular expression (optional) | Enforces the formatting of filenames |   no    |  no   |\n| [`redundant-build-tag`](./RULES_DESCRIPTIONS.md#redundant-build-tag) | n/a   | Warns about redundant `// +build` comment lines |   no    |  no   |\n| [`use-errors-new`](./RULES_DESCRIPTIONS.md#use-errors-new) | n/a   | Spots calls to `fmt.Errorf` that can be replaced by `errors.New` |   no    |  no   |\n\n## Configurable rules\n\nHere you can find how you can configure some existing rules:\n\n### `var-naming`\n\nThis rule accepts two slices of strings, an allowlist and a blocklist of initialisms. By default, the rule behaves exactly as the alternative in `golint` but optionally, you can relax it (see [golint/lint/issues/89](https://github.com/golang/lint/issues/89))\n\n```toml\n[rule.var-naming]\n  arguments = [[\"ID\"], [\"VM\"]]\n```\n\nThis way, revive will not warn for an identifier called `customId` but will warn that `customVm` should be called `customVM`.\n\n## Available Formatters\n\nThis section lists all the available formatters and provides a screenshot for each one.\n\n### Friendly\n\n![Friendly formatter](/assets/formatter-friendly.png)\n\n### Stylish\n\n![Stylish formatter](/assets/formatter-stylish.png)\n\n### Default\n\nThe default formatter produces the same output as `golint`.\n\n![Default formatter](/assets/formatter-default.png)\n\n### Plain\n\nThe plain formatter produces the same output as the default formatter and appends the URL to the rule description.\n\n![Plain formatter](/assets/formatter-plain.png)\n\n### Unix\n\nThe unix formatter produces the same output as the default formatter but surrounds the rules in `[]`.\n\n![Unix formatter](/assets/formatter-unix.png)\n\n### JSON\n\nThe `json` formatter produces output in JSON format.\n\n### NDJSON\n\nThe `ndjson` formatter produces output in [`Newline Delimited JSON`](https://github.com/ndjson/ndjson-spec) format.\n\n### Checkstyle\n\nThe `checkstyle` formatter produces output in a [Checkstyle-like](https://checkstyle.sourceforge.io/) format.\n\n### SARIF\n\nThe `sarif`  formatter produces output in SARIF, for _Static Analysis Results Interchange Format_, a standard JSON-based format for the output of static analysis tools defined and promoted by [OASIS](https://www.oasis-open.org/).\n\nCurrent supported version of the standard is [SARIF-v2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/csprd01/sarif-v2.1.0-csprd01.html\n).\n\n## Extensibility\n\nThe tool can be extended with custom rules or formatters. This section contains additional information on how to implement such.\n\nTo extend the linter with a custom rule you can push it to this repository or use `revive` as a library (see below)\n\nTo add a custom formatter you'll have to push it to this repository or fork it. This is due to the limited `-buildmode=plugin` support which [works only on Linux (with known issues)](https://golang.org/pkg/plugin/).\n\n### Writing a Custom Rule\n\nEach rule needs to implement the `lint.Rule` interface:\n\n```go\ntype Rule interface {\n\tName() string\n\tApply(*File, Arguments) []Failure\n}\n```\n\nThe `Arguments` type is an alias of the type `[]interface{}`. The arguments of the rule are passed from the configuration file.\n\n#### Example\n\nLet's suppose we have developed a rule called `BanStructNameRule` which disallow us to name a structure with a given identifier. We can set the banned identifier by using the TOML configuration file:\n\n```toml\n[rule.ban-struct-name]\n  arguments = [\"Foo\"]\n```\n\nWith the snippet above we:\n\n- Enable the rule with the name `ban-struct-name`. The `Name()` method of our rule should return a string that matches `ban-struct-name`.\n- Configure the rule with the argument `Foo`. The list of arguments will be passed to `Apply(*File, Arguments)` together with the target file we're linting currently.\n\nA sample rule implementation can be found [here](/rule/argument_limit.go).\n\n#### Using `revive` as a library\n\nIf a rule is specific to your use case\n(i.e. it is not a good candidate to be added to `revive`'s rule set) you can add it to your linter using `revive` as a linting engine.\n\nThe following code shows how to use `revive` in your application.\nIn the example only one rule is added (`myRule`), of course, you can add as many as you need to.\nYour rules can be configured programmatically or with the standard `revive` configuration file.\nThe full rule set of `revive` is also actionable by your application.\n\n```go\npackage main\n\nimport (\n\t\"github.com/mgechev/revive/cli\"\n\t\"github.com/mgechev/revive/lint\"\n\t\"github.com/mgechev/revive/revivelib\"\n)\n\nfunc main() {\n\tcli.RunRevive(revivelib.NewExtraRule(&myRule{}, lint.RuleConfig{}))\n}\n\ntype myRule struct{}\n\nfunc (f myRule) Name() string {\n\treturn \"myRule\"\n}\n\nfunc (f myRule) Apply(*lint.File, lint.Arguments) []lint.Failure { ... }\n```\n\nYou can still go further and use `revive` without its CLI, as part of your library, or your CLI:\n\n```go\npackage mylib\n\nimport (\n\t\"github.com/mgechev/revive/cli\"\n\t\"github.com/mgechev/revive/revivelib\"\n\t\"github.com/mgechev/revive/lint\"\n)\n\n// Error checking removed for clarity\nfunc LintMyFile(file string) {\n\tconf, _:= config.GetConfig(\"../defaults.toml\")\n\n\trevive, _ := revivelib.New(\n\t\tconf,  // Configuration file\n\t\ttrue,  // Set exit status\n\t\t2048,  // Max open files\n\n\t\t// Then add as many extra rules as you need\n\t\trevivelib.NewExtraRule(&myRule{}, lint.RuleConfig{}),\n\t)\n\n\tfailuresChan, err := revive.Lint(\n \t\trevivelib.Include(file),\n \t\trevivelib.Exclude(\"./fixtures\"),\n \t\t// You can use as many revivelib.Include or revivelib.Exclude as required\n \t)\n  \tif err != nil {\n  \t \tpanic(\"Shouldn't have failed: \" + err.Error())\n  \t}\n\n  \t// Now let's return the formatted errors\n\tfailures, exitCode, _ := revive.Format(\"stylish\", failuresChan)\n\n  \t// failures is the string with all formatted lint error messages\n  \t// exit code is 0 if no errors, 1 if errors (unless config options change it)\n  \t// ... do something with them\n}\n\ntype myRule struct{}\n\nfunc (f myRule) Name() string {\n\treturn \"myRule\"\n}\n\nfunc (f myRule) Apply(*lint.File, lint.Arguments) []lint.Failure { ... }\n```\n\n### Custom Formatter\n\nEach formatter needs to implement the following interface:\n\n```go\ntype Formatter interface {\n\tFormat(<-chan Failure, Config) (string, error)\n\tName() string\n}\n```\n\nThe `Format` method accepts a channel of `Failure` instances and the configuration of the enabled rules. The `Name()` method should return a string different from the names of the already existing rules. This string is used when specifying the formatter when invoking the `revive` CLI tool.\n\nFor a sample formatter, take a look at [this file](/formatter/json.go).\n\n## Speed Comparison\n\nCompared to `golint`, `revive` performs better because it lints the files for each individual rule into a separate goroutine. Here's a basic performance benchmark on MacBook Pro Early 2013 run on Kubernetes:\n\n### golint\n\n```shell\ntime golint kubernetes/... > /dev/null\n\nreal    0m54.837s\nuser    0m57.844s\nsys     0m9.146s\n```\n\n### revive's speed\n\n```shell\n# no type checking\ntime revive -config untyped.toml kubernetes/... > /dev/null\n\nreal    0m8.471s\nuser    0m40.721s\nsys     0m3.262s\n```\n\nKeep in mind that if you use rules that require type checking, the performance may drop to 2x faster than `golint`:\n\n```shell\n# type checking enabled\ntime revive kubernetes/... > /dev/null\n\nreal    0m26.211s\nuser    2m6.708s\nsys     0m17.192s\n```\n\nCurrently, type-checking is enabled by default. If you want to run the linter without type-checking, remove all typed rules from the configuration file.\n\n## Overriding colorization detection\n\nBy default, `revive` determines whether or not to colorize its output based on whether it's connected to a TTY or not.\nThis works for most use cases, but may not behave as expected if you use `revive` in a pipeline of commands,\nwhere STDOUT is being piped to another command.\n\nTo force colorization, add `REVIVE_FORCE_COLOR=1` to the environment you're running in. For example:\n\n```shell\nREVIVE_FORCE_COLOR=1 revive -formatter friendly ./... | tee revive.log\n```\n\n## Contributors\n\n[<img alt=\"mgechev\" src=\"https://avatars.githubusercontent.com/u/455023?v=4&s=117\" width=\"117\">](https://github.com/mgechev) |[<img alt=\"chavacava\" src=\"https://avatars.githubusercontent.com/u/25788468?v=4&s=117\" width=\"117\">](https://github.com/chavacava) |[<img alt=\"denisvmedia\" src=\"https://avatars.githubusercontent.com/u/5462781?v=4&s=117\" width=\"117\">](https://github.com/denisvmedia) |[<img alt=\"mfederowicz\" src=\"https://avatars.githubusercontent.com/u/57678185?v=4&s=117\" width=\"117\">](https://github.com/mfederowicz) |[<img alt=\"xuri\" src=\"https://avatars.githubusercontent.com/u/2809468?v=4&s=117\" width=\"117\">](https://github.com/xuri) |[<img alt=\"alexandear\" src=\"https://avatars.githubusercontent.com/u/3228886?v=4&s=117\" width=\"117\">](https://github.com/alexandear) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[mgechev](https://github.com/mgechev) |[chavacava](https://github.com/chavacava) |[denisvmedia](https://github.com/denisvmedia) |[mfederowicz](https://github.com/mfederowicz) |[xuri](https://github.com/xuri) |[alexandear](https://github.com/alexandear) |\n\n[<img alt=\"ldez\" src=\"https://avatars.githubusercontent.com/u/5674651?v=4&s=117\" width=\"117\">](https://github.com/ldez) |[<img alt=\"doniacld\" src=\"https://avatars.githubusercontent.com/u/19799268?v=4&s=117\" width=\"117\">](https://github.com/doniacld) |[<img alt=\"Clivern\" src=\"https://avatars.githubusercontent.com/u/1634427?v=4&s=117\" width=\"117\">](https://github.com/Clivern) |[<img alt=\"morphy2k\" src=\"https://avatars.githubusercontent.com/u/4280578?v=4&s=117\" width=\"117\">](https://github.com/morphy2k) |[<img alt=\"bernhardreisenberger\" src=\"https://avatars.githubusercontent.com/u/5809300?v=4&s=117\" width=\"117\">](https://github.com/bernhardreisenberger) |[<img alt=\"dshemin\" src=\"https://avatars.githubusercontent.com/u/11780307?v=4&s=117\" width=\"117\">](https://github.com/dshemin) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[ldez](https://github.com/ldez) |[doniacld](https://github.com/doniacld) |[Clivern](https://github.com/Clivern) |[morphy2k](https://github.com/morphy2k) |[bernhardreisenberger](https://github.com/bernhardreisenberger) |[dshemin](https://github.com/dshemin) |\n\n[<img alt=\"butuzov\" src=\"https://avatars.githubusercontent.com/u/651824?v=4&s=117\" width=\"117\">](https://github.com/butuzov) |[<img alt=\"comdiv\" src=\"https://avatars.githubusercontent.com/u/2387862?v=4&s=117\" width=\"117\">](https://github.com/comdiv) |[<img alt=\"heynemann\" src=\"https://avatars.githubusercontent.com/u/60965?v=4&s=117\" width=\"117\">](https://github.com/heynemann) |[<img alt=\"gsamokovarov\" src=\"https://avatars.githubusercontent.com/u/604618?v=4&s=117\" width=\"117\">](https://github.com/gsamokovarov) |[<img alt=\"mdelah\" src=\"https://avatars.githubusercontent.com/u/4904544?v=4&s=117\" width=\"117\">](https://github.com/mdelah) |[<img alt=\"tymonx\" src=\"https://avatars.githubusercontent.com/u/8367378?v=4&s=117\" width=\"117\">](https://github.com/tymonx) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[butuzov](https://github.com/butuzov) |[comdiv](https://github.com/comdiv) |[heynemann](https://github.com/heynemann) |[gsamokovarov](https://github.com/gsamokovarov) |[mdelah](https://github.com/mdelah) |[tymonx](https://github.com/tymonx) |\n\n[<img alt=\"sina-devel\" src=\"https://avatars.githubusercontent.com/u/61763643?v=4&s=117\" width=\"117\">](https://github.com/sina-devel) |[<img alt=\"rawen17\" src=\"https://avatars.githubusercontent.com/u/36483900?v=4&s=117\" width=\"117\">](https://github.com/rawen17) |[<img alt=\"dominiquelefevre\" src=\"https://avatars.githubusercontent.com/u/54854047?v=4&s=117\" width=\"117\">](https://github.com/dominiquelefevre) |[<img alt=\"git-hulk\" src=\"https://avatars.githubusercontent.com/u/4987594?v=4&s=117\" width=\"117\">](https://github.com/git-hulk) |[<img alt=\"shmsr\" src=\"https://avatars.githubusercontent.com/u/51480165?v=4&s=117\" width=\"117\">](https://github.com/shmsr) |[<img alt=\"ytnsym\" src=\"https://avatars.githubusercontent.com/u/57400690?v=4&s=117\" width=\"117\">](https://github.com/ytnsym) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[sina-devel](https://github.com/sina-devel) |[rawen17](https://github.com/rawen17) |[dominiquelefevre](https://github.com/dominiquelefevre) |[git-hulk](https://github.com/git-hulk) |[shmsr](https://github.com/shmsr) |[ytnsym](https://github.com/ytnsym) |\n\n[<img alt=\"zimmski\" src=\"https://avatars.githubusercontent.com/u/1847950?v=4&s=117\" width=\"117\">](https://github.com/zimmski) |[<img alt=\"mapreal19\" src=\"https://avatars.githubusercontent.com/u/3055997?v=4&s=117\" width=\"117\">](https://github.com/mapreal19) |[<img alt=\"cce\" src=\"https://avatars.githubusercontent.com/u/51567?v=4&s=117\" width=\"117\">](https://github.com/cce) |[<img alt=\"skaji\" src=\"https://avatars.githubusercontent.com/u/1589550?v=4&s=117\" width=\"117\">](https://github.com/skaji) |[<img alt=\"ccoVeille\" src=\"https://avatars.githubusercontent.com/u/3875889?v=4&s=117\" width=\"117\">](https://github.com/ccoVeille) |[<img alt=\"tamird\" src=\"https://avatars.githubusercontent.com/u/1535036?v=4&s=117\" width=\"117\">](https://github.com/tamird) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[zimmski](https://github.com/zimmski) |[mapreal19](https://github.com/mapreal19) |[cce](https://github.com/cce) |[skaji](https://github.com/skaji) |[ccoVeille](https://github.com/ccoVeille) |[tamird](https://github.com/tamird) |\n\n[<img alt=\"markelog\" src=\"https://avatars.githubusercontent.com/u/945528?v=4&s=117\" width=\"117\">](https://github.com/markelog) |[<img alt=\"mihaitodor\" src=\"https://avatars.githubusercontent.com/u/788216?v=4&s=117\" width=\"117\">](https://github.com/mihaitodor) |[<img alt=\"dvejmz\" src=\"https://avatars.githubusercontent.com/u/9487006?v=4&s=117\" width=\"117\">](https://github.com/dvejmz) |[<img alt=\"abeltay\" src=\"https://avatars.githubusercontent.com/u/15604207?v=4&s=117\" width=\"117\">](https://github.com/abeltay) |[<img alt=\"damif94\" src=\"https://avatars.githubusercontent.com/u/29461526?v=4&s=117\" width=\"117\">](https://github.com/damif94) |[<img alt=\"Groxx\" src=\"https://avatars.githubusercontent.com/u/77197?v=4&s=117\" width=\"117\">](https://github.com/Groxx) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[markelog](https://github.com/markelog) |[mihaitodor](https://github.com/mihaitodor) |[dvejmz](https://github.com/dvejmz) |[abeltay](https://github.com/abeltay) |[damif94](https://github.com/damif94) |[Groxx](https://github.com/Groxx) |\n\n[<img alt=\"StephenButtolph\" src=\"https://avatars.githubusercontent.com/u/22109487?v=4&s=117\" width=\"117\">](https://github.com/StephenButtolph) |[<img alt=\"StephenBrown2\" src=\"https://avatars.githubusercontent.com/u/1148665?v=4&s=117\" width=\"117\">](https://github.com/StephenBrown2) |[<img alt=\"lsytj0413\" src=\"https://avatars.githubusercontent.com/u/6871552?v=4&s=117\" width=\"117\">](https://github.com/lsytj0413) |[<img alt=\"qascade\" src=\"https://avatars.githubusercontent.com/u/54154054?v=4&s=117\" width=\"117\">](https://github.com/qascade) |[<img alt=\"ridvansumset\" src=\"https://avatars.githubusercontent.com/u/26631560?v=4&s=117\" width=\"117\">](https://github.com/ridvansumset) |[<img alt=\"rliebz\" src=\"https://avatars.githubusercontent.com/u/5321575?v=4&s=117\" width=\"117\">](https://github.com/rliebz) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[StephenButtolph](https://github.com/StephenButtolph) |[StephenBrown2](https://github.com/StephenBrown2) |[lsytj0413](https://github.com/lsytj0413) |[qascade](https://github.com/qascade) |[ridvansumset](https://github.com/ridvansumset) |[rliebz](https://github.com/rliebz) |\n\n[<img alt=\"rdeusser\" src=\"https://avatars.githubusercontent.com/u/5935071?v=4&s=117\" width=\"117\">](https://github.com/rdeusser) |[<img alt=\"rmarku\" src=\"https://avatars.githubusercontent.com/u/1113370?v=4&s=117\" width=\"117\">](https://github.com/rmarku) |[<img alt=\"rnikoopour\" src=\"https://avatars.githubusercontent.com/u/7692789?v=4&s=117\" width=\"117\">](https://github.com/rnikoopour) |[<img alt=\"rafamadriz\" src=\"https://avatars.githubusercontent.com/u/67771985?v=4&s=117\" width=\"117\">](https://github.com/rafamadriz) |[<img alt=\"paco0x\" src=\"https://avatars.githubusercontent.com/u/6123425?v=4&s=117\" width=\"117\">](https://github.com/paco0x) |[<img alt=\"pa-m\" src=\"https://avatars.githubusercontent.com/u/5503106?v=4&s=117\" width=\"117\">](https://github.com/pa-m) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[rdeusser](https://github.com/rdeusser) |[rmarku](https://github.com/rmarku) |[rnikoopour](https://github.com/rnikoopour) |[rafamadriz](https://github.com/rafamadriz) |[paco0x](https://github.com/paco0x) |[pa-m](https://github.com/pa-m) |\n\n[<img alt=\"cinar\" src=\"https://avatars.githubusercontent.com/u/1754092?v=4&s=117\" width=\"117\">](https://github.com/cinar) |[<img alt=\"natefinch\" src=\"https://avatars.githubusercontent.com/u/3185864?v=4&s=117\" width=\"117\">](https://github.com/natefinch) |[<img alt=\"nunnatsa\" src=\"https://avatars.githubusercontent.com/u/60659093?v=4&s=117\" width=\"117\">](https://github.com/nunnatsa) |[<img alt=\"michalhisim\" src=\"https://avatars.githubusercontent.com/u/764249?v=4&s=117\" width=\"117\">](https://github.com/michalhisim) |[<img alt=\"zeripath\" src=\"https://avatars.githubusercontent.com/u/1824502?v=4&s=117\" width=\"117\">](https://github.com/zeripath) |[<img alt=\"y-yagi\" src=\"https://avatars.githubusercontent.com/u/987638?v=4&s=117\" width=\"117\">](https://github.com/y-yagi) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[cinar](https://github.com/cinar) |[natefinch](https://github.com/natefinch) |[nunnatsa](https://github.com/nunnatsa) |[michalhisim](https://github.com/michalhisim) |[zeripath](https://github.com/zeripath) |[y-yagi](https://github.com/y-yagi) |\n\n[<img alt=\"techknowlogick\" src=\"https://avatars.githubusercontent.com/u/164197?v=4&s=117\" width=\"117\">](https://github.com/techknowlogick) |[<img alt=\"okhowang\" src=\"https://avatars.githubusercontent.com/u/3352585?v=4&s=117\" width=\"117\">](https://github.com/okhowang) |[<img alt=\"meanguy\" src=\"https://avatars.githubusercontent.com/u/78570571?v=4&s=117\" width=\"117\">](https://github.com/meanguy) |[<img alt=\"likyh\" src=\"https://avatars.githubusercontent.com/u/3294100?v=4&s=117\" width=\"117\">](https://github.com/likyh) |[<img alt=\"kerneltravel\" src=\"https://avatars.githubusercontent.com/u/437879?v=4&s=117\" width=\"117\">](https://github.com/kerneltravel) |[<img alt=\"jmckenzieark\" src=\"https://avatars.githubusercontent.com/u/70923399?v=4&s=117\" width=\"117\">](https://github.com/jmckenzieark) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[techknowlogick](https://github.com/techknowlogick) |[okhowang](https://github.com/okhowang) |[meanguy](https://github.com/meanguy) |[likyh](https://github.com/likyh) |[kerneltravel](https://github.com/kerneltravel) |[jmckenzieark](https://github.com/jmckenzieark) |\n\n[<img alt=\"haya14busa\" src=\"https://avatars.githubusercontent.com/u/3797062?v=4&s=117\" width=\"117\">](https://github.com/haya14busa) |[<img alt=\"fregin\" src=\"https://avatars.githubusercontent.com/u/23256240?v=4&s=117\" width=\"117\">](https://github.com/fregin) |[<img alt=\"ydah\" src=\"https://avatars.githubusercontent.com/u/13041216?v=4&s=117\" width=\"117\">](https://github.com/ydah) |[<img alt=\"WillAbides\" src=\"https://avatars.githubusercontent.com/u/233500?v=4&s=117\" width=\"117\">](https://github.com/WillAbides) |[<img alt=\"heyvito\" src=\"https://avatars.githubusercontent.com/u/77198?v=4&s=117\" width=\"117\">](https://github.com/heyvito) |[<img alt=\"VincentBaron\" src=\"https://avatars.githubusercontent.com/u/58427099?v=4&s=117\" width=\"117\">](https://github.com/VincentBaron) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[haya14busa](https://github.com/haya14busa) |[fregin](https://github.com/fregin) |[ydah](https://github.com/ydah) |[WillAbides](https://github.com/WillAbides) |[heyvito](https://github.com/heyvito) |[VincentBaron](https://github.com/VincentBaron) |\n\n[<img alt=\"scop\" src=\"https://avatars.githubusercontent.com/u/109152?v=4&s=117\" width=\"117\">](https://github.com/scop) |[<img alt=\"vkrol\" src=\"https://avatars.githubusercontent.com/u/153412?v=4&s=117\" width=\"117\">](https://github.com/vkrol) |[<img alt=\"KirillSluchaev\" src=\"https://avatars.githubusercontent.com/u/58340009?v=4&s=117\" width=\"117\">](https://github.com/KirillSluchaev) |[<img alt=\"Jarema\" src=\"https://avatars.githubusercontent.com/u/7369771?v=4&s=117\" width=\"117\">](https://github.com/Jarema) |[<img alt=\"tartale\" src=\"https://avatars.githubusercontent.com/u/9323250?v=4&s=117\" width=\"117\">](https://github.com/tartale) |[<img alt=\"tmzane\" src=\"https://avatars.githubusercontent.com/u/73077675?v=4&s=117\" width=\"117\">](https://github.com/tmzane) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[scop](https://github.com/scop) |[vkrol](https://github.com/vkrol) |[KirillSluchaev](https://github.com/KirillSluchaev) |[Jarema](https://github.com/Jarema) |[tartale](https://github.com/tartale) |[tmzane](https://github.com/tmzane) |\n\n[<img alt=\"felipedavid\" src=\"https://avatars.githubusercontent.com/u/75049173?v=4&s=117\" width=\"117\">](https://github.com/felipedavid) |[<img alt=\"euank\" src=\"https://avatars.githubusercontent.com/u/2147649?v=4&s=117\" width=\"117\">](https://github.com/euank) |[<img alt=\"Entuazism\" src=\"https://avatars.githubusercontent.com/u/56657856?v=4&s=117\" width=\"117\">](https://github.com/Entuazism) |[<img alt=\"Juneezee\" src=\"https://avatars.githubusercontent.com/u/20135478?v=4&s=117\" width=\"117\">](https://github.com/Juneezee) |[<img alt=\"echoix\" src=\"https://avatars.githubusercontent.com/u/27212526?v=4&s=117\" width=\"117\">](https://github.com/echoix) |[<img alt=\"EXHades\" src=\"https://avatars.githubusercontent.com/u/22260242?v=4&s=117\" width=\"117\">](https://github.com/EXHades) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[felipedavid](https://github.com/felipedavid) |[euank](https://github.com/euank) |[Entuazism](https://github.com/Entuazism) |[Juneezee](https://github.com/Juneezee) |[echoix](https://github.com/echoix) |[EXHades](https://github.com/EXHades) |\n\n[<img alt=\"petethepig\" src=\"https://avatars.githubusercontent.com/u/662636?v=4&s=117\" width=\"117\">](https://github.com/petethepig) |[<img alt=\"Dirk007\" src=\"https://avatars.githubusercontent.com/u/17194484?v=4&s=117\" width=\"117\">](https://github.com/Dirk007) |[<img alt=\"yangdiangzb\" src=\"https://avatars.githubusercontent.com/u/16643665?v=4&s=117\" width=\"117\">](https://github.com/yangdiangzb) |[<img alt=\"derekperkins\" src=\"https://avatars.githubusercontent.com/u/3588778?v=4&s=117\" width=\"117\">](https://github.com/derekperkins) |[<img alt=\"bboreham\" src=\"https://avatars.githubusercontent.com/u/8125524?v=4&s=117\" width=\"117\">](https://github.com/bboreham) |[<img alt=\"attiss\" src=\"https://avatars.githubusercontent.com/u/23562566?v=4&s=117\" width=\"117\">](https://github.com/attiss) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[petethepig](https://github.com/petethepig) |[Dirk007](https://github.com/Dirk007) |[yangdiangzb](https://github.com/yangdiangzb) |[derekperkins](https://github.com/derekperkins) |[bboreham](https://github.com/bboreham) |[attiss](https://github.com/attiss) |\n\n[<img alt=\"hatamiarash7\" src=\"https://avatars.githubusercontent.com/u/16325641?v=4&s=117\" width=\"117\">](https://github.com/hatamiarash7) |[<img alt=\"Aragur\" src=\"https://avatars.githubusercontent.com/u/11004008?v=4&s=117\" width=\"117\">](https://github.com/Aragur) |[<img alt=\"amincheloh\" src=\"https://avatars.githubusercontent.com/u/1217397?v=4&s=117\" width=\"117\">](https://github.com/amincheloh) |[<img alt=\"kulti\" src=\"https://avatars.githubusercontent.com/u/1286683?v=4&s=117\" width=\"117\">](https://github.com/kulti) |[<img alt=\"Abirdcfly\" src=\"https://avatars.githubusercontent.com/u/5100555?v=4&s=117\" width=\"117\">](https://github.com/Abirdcfly) |[<img alt=\"abhinav\" src=\"https://avatars.githubusercontent.com/u/41730?v=4&s=117\" width=\"117\">](https://github.com/abhinav) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[hatamiarash7](https://github.com/hatamiarash7) |[Aragur](https://github.com/Aragur) |[amincheloh](https://github.com/amincheloh) |[kulti](https://github.com/kulti) |[Abirdcfly](https://github.com/Abirdcfly) |[abhinav](https://github.com/abhinav) |\n\n[<img alt=\"r-ricci\" src=\"https://avatars.githubusercontent.com/u/52817765?v=4&s=117\" width=\"117\">](https://github.com/r-ricci) |[<img alt=\"mmcloughlin\" src=\"https://avatars.githubusercontent.com/u/7133685?v=4&s=117\" width=\"117\">](https://github.com/mmcloughlin) |[<img alt=\"mathieu-aubin\" src=\"https://avatars.githubusercontent.com/u/15820228?v=4&s=117\" width=\"117\">](https://github.com/mathieu-aubin) |[<img alt=\"martinsirbe\" src=\"https://avatars.githubusercontent.com/u/13367583?v=4&s=117\" width=\"117\">](https://github.com/martinsirbe) |[<img alt=\"avorima\" src=\"https://avatars.githubusercontent.com/u/15158349?v=4&s=117\" width=\"117\">](https://github.com/avorima) |[<img alt=\"moukoublen\" src=\"https://avatars.githubusercontent.com/u/1380039?v=4&s=117\" width=\"117\">](https://github.com/moukoublen) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[r-ricci](https://github.com/r-ricci) |[mmcloughlin](https://github.com/mmcloughlin) |[mathieu-aubin](https://github.com/mathieu-aubin) |[martinsirbe](https://github.com/martinsirbe) |[avorima](https://github.com/avorima) |[moukoublen](https://github.com/moukoublen) |\n\n[<img alt=\"very-amused\" src=\"https://avatars.githubusercontent.com/u/44382255?v=4&s=117\" width=\"117\">](https://github.com/very-amused) |[<img alt=\"johnrichardrinehart\" src=\"https://avatars.githubusercontent.com/u/6321578?v=4&s=117\" width=\"117\">](https://github.com/johnrichardrinehart) |[<img alt=\"walles\" src=\"https://avatars.githubusercontent.com/u/158201?v=4&s=117\" width=\"117\">](https://github.com/walles) |[<img alt=\"jefersonf\" src=\"https://avatars.githubusercontent.com/u/3049540?v=4&s=117\" width=\"117\">](https://github.com/jefersonf) |[<img alt=\"jamesmaidment\" src=\"https://avatars.githubusercontent.com/u/2050324?v=4&s=117\" width=\"117\">](https://github.com/jamesmaidment) |[<img alt=\"jalaziz\" src=\"https://avatars.githubusercontent.com/u/247849?v=4&s=117\" width=\"117\">](https://github.com/jalaziz) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[very-amused](https://github.com/very-amused) |[johnrichardrinehart](https://github.com/johnrichardrinehart) |[walles](https://github.com/walles) |[jefersonf](https://github.com/jefersonf) |[jamesmaidment](https://github.com/jamesmaidment) |[jalaziz](https://github.com/jalaziz) |\n\n[<img alt=\"grongor\" src=\"https://avatars.githubusercontent.com/u/972493?v=4&s=117\" width=\"117\">](https://github.com/grongor) |[<img alt=\"tie\" src=\"https://avatars.githubusercontent.com/u/14792994?v=4&s=117\" width=\"117\">](https://github.com/tie) |[<img alt=\"quasilyte\" src=\"https://avatars.githubusercontent.com/u/6286655?v=4&s=117\" width=\"117\">](https://github.com/quasilyte) |[<img alt=\"davidhsingyuchen\" src=\"https://avatars.githubusercontent.com/u/17587061?v=4&s=117\" width=\"117\">](https://github.com/davidhsingyuchen) |[<img alt=\"gfariasalves-ionos\" src=\"https://avatars.githubusercontent.com/u/112630064?v=4&s=117\" width=\"117\">](https://github.com/gfariasalves-ionos) |[<img alt=\"gburanov\" src=\"https://avatars.githubusercontent.com/u/2969603?v=4&s=117\" width=\"117\">](https://github.com/gburanov) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[grongor](https://github.com/grongor) |[tie](https://github.com/tie) |[quasilyte](https://github.com/quasilyte) |[davidhsingyuchen](https://github.com/davidhsingyuchen) |[gfariasalves-ionos](https://github.com/gfariasalves-ionos) |[gburanov](https://github.com/gburanov) |\n\n[<img alt=\"ginglis13\" src=\"https://avatars.githubusercontent.com/u/43075615?v=4&s=117\" width=\"117\">](https://github.com/ginglis13) |[<img alt=\"flesser\" src=\"https://avatars.githubusercontent.com/u/510681?v=4&s=117\" width=\"117\">](https://github.com/flesser) |\n:---: |:---: |\n[ginglis13](https://github.com/ginglis13) |[flesser](https://github.com/flesser) |\n\n## License\n\nMIT\n"
        },
        {
          "name": "RULES_DESCRIPTIONS.md",
          "type": "blob",
          "size": 36.8955078125,
          "content": "# Description of available rules\n\nList of all available rules.\n\n\n- [Description of available rules](#description-of-available-rules)\n  - [add-constant](#add-constant)\n  - [argument-limit](#argument-limit)\n  - [atomic](#atomic)\n  - [banned-characters](#banned-characters)\n  - [bare-return](#bare-return)\n  - [blank-imports](#blank-imports)\n  - [bool-literal-in-expr](#bool-literal-in-expr)\n  - [call-to-gc](#call-to-gc)\n  - [cognitive-complexity](#cognitive-complexity)\n  - [comment-spacings](#comment-spacings)\n  - [comments-density](#comments-density)\n  - [confusing-naming](#confusing-naming)\n  - [confusing-results](#confusing-results)\n  - [constant-logical-expr](#constant-logical-expr)\n  - [context-as-argument](#context-as-argument)\n  - [context-keys-type](#context-keys-type)\n  - [cyclomatic](#cyclomatic)\n  - [datarace](#datarace)\n  - [deep-exit](#deep-exit)\n  - [defer](#defer)\n  - [dot-imports](#dot-imports)\n  - [duplicated-imports](#duplicated-imports)\n  - [early-return](#early-return)\n  - [empty-block](#empty-block)\n  - [empty-lines](#empty-lines)\n  - [enforce-map-style](#enforce-map-style)\n  - [enforce-repeated-arg-type-style](#enforce-repeated-arg-type-style)\n  - [enforce-slice-style](#enforce-slice-style)\n  - [error-naming](#error-naming)\n  - [error-return](#error-return)\n  - [error-strings](#error-strings)\n  - [errorf](#errorf)\n  - [exported](#exported)\n  - [file-header](#file-header)\n  - [file-length-limit](#file-length-limit)\n  - [filename-format](#filename-format)\n  - [flag-parameter](#flag-parameter)\n  - [function-length](#function-length)\n  - [function-result-limit](#function-result-limit)\n  - [get-return](#get-return)\n  - [identical-branches](#identical-branches)\n  - [if-return](#if-return)\n  - [import-alias-naming](#import-alias-naming)\n  - [import-shadowing](#import-shadowing)\n  - [imports-blocklist](#imports-blocklist)\n  - [increment-decrement](#increment-decrement)\n  - [indent-error-flow](#indent-error-flow)\n  - [line-length-limit](#line-length-limit)\n  - [max-control-nesting](#max-control-nesting)\n  - [max-public-structs](#max-public-structs)\n  - [modifies-parameter](#modifies-parameter)\n  - [modifies-value-receiver](#modifies-value-receiver)\n  - [nested-structs](#nested-structs)\n  - [optimize-operands-order](#optimize-operands-order)\n  - [package-comments](#package-comments)\n  - [range-val-address](#range-val-address)\n  - [range-val-in-closure](#range-val-in-closure)\n  - [range](#range)\n  - [receiver-naming](#receiver-naming)\n  - [redefines-builtin-id](#redefines-builtin-id)\n  - [redundant-import-alias](#redundant-import-alias)\n  - [redundant-build-tag](#redundant-build-tag)\n  - [string-format](#string-format)\n  - [string-of-int](#string-of-int)\n  - [struct-tag](#struct-tag)\n  - [superfluous-else](#superfluous-else)\n  - [time-equal](#time-equal)\n  - [time-naming](#time-naming)\n  - [unchecked-type-assertion](#unchecked-type-assertion)\n  - [unconditional-recursion](#unconditional-recursion)\n  - [unexported-naming](#unexported-naming)\n  - [unexported-return](#unexported-return)\n  - [unhandled-error](#unhandled-error)\n  - [unnecessary-stmt](#unnecessary-stmt)\n  - [unreachable-code](#unreachable-code)\n  - [unused-parameter](#unused-parameter)\n  - [unused-receiver](#unused-receiver)\n  - [use-any](#use-any)\n  - [use-errors-new](#use-errors-new)\n  - [useless-break](#useless-break)\n  - [var-declaration](#var-declaration)\n  - [var-naming](#var-naming)\n  - [waitgroup-by-value](#waitgroup-by-value)\n\n## add-constant\n\n_Description_: Suggests using constant for [magic numbers](https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants) and string literals.\n\n_Configuration_:\n\n* `maxLitCount` : (string) maximum number of instances of a string literal that are tolerated before warn.\n* `allowStrs`: (string) comma-separated list of allowed string literals\n* `allowInts`: (string) comma-separated list of allowed integers\n* `allowFloats`: (string) comma-separated list of allowed floats\n* `ignoreFuncs`: (string) comma-separated list of function names regexp patterns to exclude\n\nExample:\n\n```toml\n[rule.add-constant]\n  arguments = [{ maxLitCount = \"3\", allowStrs = \"\\\"\\\"\", allowInts = \"0,1,2\", allowFloats = \"0.0,0.,1.0,1.,2.0,2.\", ignoreFuncs = \"os\\\\.*,fmt\\\\.Println,make\" }]\n```\n\n## argument-limit\n\n_Description_: Warns when a function receives more parameters than the maximum set by the rule's configuration.\nEnforcing a maximum number of parameters helps to keep the code readable and maintainable.\n\n_Configuration_: (int) the maximum number of parameters allowed per function.\n\nExample:\n\n```toml\n[rule.argument-limit]\n  arguments = [4]\n```\n\n## atomic\n\n_Description_: Check for commonly mistaken usages of the `sync/atomic` package\n\n_Configuration_: N/A\n\n## banned-characters\n\n_Description_: Checks given banned characters in identifiers(func, var, const). Comments are not checked.\n\n_Configuration_: This rule requires a slice of strings, the characters to ban.\n\nExample:\n\n```toml\n[rule.banned-characters]\n  arguments = [\"Ω\",\"Σ\",\"σ\"]\n```\n\n## bare-return\n\n_Description_: Warns on bare (a.k.a. naked) returns\n\n_Configuration_: N/A\n\n## blank-imports\n\n_Description_: Blank import should be only in a main or test package, or have a comment justifying it.\n\n_Configuration_: N/A\n\n## bool-literal-in-expr\n\n_Description_: Using Boolean literals (`true`, `false`) in logic expressions may make the code less readable. This rule suggests removing Boolean literals from logic expressions.\n\n_Configuration_: N/A\n\n## call-to-gc\n\n_Description_:  Explicitly invoking the garbage collector is, except for specific uses in benchmarking, very dubious.\n\nThe garbage collector can be configured through environment variables as described [here](https://golang.org/pkg/runtime/).\n\n_Configuration_: N/A\n\n## cognitive-complexity\n\n_Description_: [Cognitive complexity](https://www.sonarsource.com/docs/CognitiveComplexity.pdf) is a measure of how hard code is to understand.\nWhile cyclomatic complexity is good to measure \"testability\" of the code, cognitive complexity aims to provide a more precise measure of the difficulty of understanding the code.\nEnforcing a maximum complexity per function helps to keep code readable and maintainable.\n\n_Configuration_: (int) the maximum function complexity\n\nExample:\n\n```toml\n[rule.cognitive-complexity]\n  arguments = [7]\n```\n\n## comment-spacings\n\n_Description_: Spots comments of the form:\n```go\n//This is a malformed comment: no space between // and the start of the sentence\n```\n\n_Configuration_: ([]string) list of exceptions. For example, to accept comments of the form\n```go\n//mypragma: activate something\n//+optional\n```\nYou need to add both `\"mypragma:\"` and `\"+optional\"` in the configuration\n\nExample:\n\n```toml\n[rule.comment-spacings]\n  arguments = [\"mypragma:\", \"+optional\"]\n```\n\n## comments-density\n\n_Description_: Spots files not respecting a minimum value for the [_comments lines density_](https://docs.sonarsource.com/sonarqube/latest/user-guide/metric-definitions/) metric = _comment lines / (lines of code + comment lines) * 100_\n\n_Configuration_: (int) the minimum expected comments lines density.\n\nExample:\n\n```toml\n[rule.comments-density]\n  arguments = [15]\n```\n\n## confusing-naming\n\n_Description_: Methods or fields of `struct` that have names different only by capitalization could be confusing.\n\n_Configuration_: N/A\n\n## confusing-results\n\n_Description_: Function or methods that return multiple, no named, values of the same type could induce error.\n\n_Configuration_: N/A\n\n## constant-logical-expr\n\n_Description_: The rule spots logical expressions that evaluate always to the same value.\n\n_Configuration_: N/A\n\n## context-as-argument\n\n_Description_: By [convention](https://go.dev/wiki/CodeReviewComments#contexts), `context.Context` should be the first parameter of a function. This rule spots function declarations that do not follow the convention.\n\n_Configuration_:\n\n* `allowTypesBefore` : (string) comma-separated list of types that may be before 'context.Context'\n\nExample:\n\n```toml\n[rule.context-as-argument]\n  arguments = [{allowTypesBefore = \"*testing.T,*github.com/user/repo/testing.Harness\"}]\n```\n\n## context-keys-type\n\n_Description_: Basic types should not be used as a key in `context.WithValue`.\n\n_Configuration_: N/A\n\n## cyclomatic\n\n_Description_: [Cyclomatic complexity](https://en.wikipedia.org/wiki/Cyclomatic_complexity) is a measure of code complexity. Enforcing a maximum complexity per function helps to keep code readable and maintainable.\n\n_Configuration_: (int) the maximum function complexity\n\nExample:\n\n```toml\n[rule.cyclomatic]\n  arguments = [3]\n```\n\n## datarace\n\n_Description_: This rule spots potential dataraces caused by go-routines capturing (by-reference) particular identifiers of the function from which go-routines are created. The rule is able to spot two of such cases: go-routines capturing named return values, and capturing `for-range` values.\n\n_Configuration_: N/A\n\n## deep-exit\n\n_Description_: Packages exposing functions that can stop program execution by exiting are hard to reuse. This rule looks for program exits in functions other than `main()` or `init()`.\n\n_Configuration_: N/A\n\n## defer\n\n_Description_: This rule warns on some common mistakes when using `defer` statement. It currently alerts on the following situations:\n\n| name              | description                                                                                                                                                                                     |\n|-------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| call-chain        | even if deferring call-chains of the form `foo()()` is valid, it does not helps code understanding (only the last call is deferred)                                                             |\n| loop              | deferring inside loops can be misleading (deferred functions are not executed at the end of the loop iteration but of the current function) and it could lead to exhausting the execution stack |\n| method-call       | deferring a call to a method can lead to subtle bugs if the method does not have a pointer receiver                                                                                             |\n| recover           | calling `recover` outside a deferred function has no effect                                                                                                                                     |\n| immediate-recover | calling `recover` at the time a defer is registered, rather than as part of the deferred callback.  e.g. `defer recover()` or equivalent.                                                       |\n| return            | returning values form a deferred function has no effect                                                                                                                                         |\n\nThese gotchas are described [here](https://blog.learngoprogramming.com/gotchas-of-defer-in-go-1-8d070894cb01)\n\n_Configuration_: by default all warnings are enabled but it is possible selectively enable them through configuration. For example to enable only `call-chain` and `loop`:\n\n```toml\n[rule.defer]\n  arguments = [[\"call-chain\",\"loop\"]]\n```\n\n## dot-imports\n\n_Description_: Importing with `.` makes the programs much harder to understand because it is unclear whether names belong to the current package or to an imported package.\n\nMore information [here](https://go.dev/wiki/CodeReviewComments#import-dot)\n\n_Configuration_:\n\n* `allowedPackages`: (list of strings) comma-separated list of allowed dot import packages\n\nExample:\n\n```toml\n[rule.dot-imports]\n  arguments = [{ allowedPackages = [\"github.com/onsi/ginkgo/v2\",\"github.com/onsi/gomega\"] }]\n```\n\n## duplicated-imports\n\n_Description_: It is possible to unintentionally import the same package twice. This rule looks for packages that are imported two or more times.\n\n_Configuration_: N/A\n\n## early-return\n\n_Description_: In Go it is idiomatic to minimize nesting statements, a typical example is to avoid if-then-else constructions. This rule spots constructions like\n```go\nif cond {\n  // do something\n} else {\n  // do other thing\n  return ...\n}\n```\nwhere the `if` condition may be inverted in order to reduce nesting:\n```go\nif !cond {\n  // do other thing\n  return ...\n}\n\n// do something\n```\n\n_Configuration_: ([]string) rule flags. Available flags are:\n\n* _preserveScope_: do not suggest refactorings that would increase variable scope\n* _allowJump_: suggest a new jump (`return`, `continue` or `break` statement) if it could unnest multiple statements. By default, only relocation of _existing_ jumps (i.e. from the `else` clause) are suggested.\n\nExample:\n\n```toml\n[rule.early-return]\n  arguments = [\"preserveScope\", \"allowJump\"]\n```\n\n## empty-block\n\n_Description_: Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.\n\n_Configuration_: N/A\n\n## empty-lines\n\n_Description_: Sometimes `gofmt` is not enough to enforce a common formatting of a code-base; this rule warns when there are heading or trailing newlines in code blocks.\n\n_Configuration_: N/A\n\n## enforce-map-style\n\n_Description_: This rule enforces consistent usage of `make(map[type]type)` or `map[type]type{}` for map initialization. It does not affect `make(map[type]type, size)` constructions as well as `map[type]type{k1: v1}`.\n\n_Configuration_: (string) Specifies the enforced style for map initialization. The options are:\n- \"any\": No enforcement (default).\n- \"make\": Enforces the usage of `make(map[type]type)`.\n- \"literal\": Enforces the usage of `map[type]type{}`.\n\nExample:\n\n```toml\n[rule.enforce-map-style]\n  arguments = [\"make\"]\n```\n\n## enforce-repeated-arg-type-style\n\n_Description_: This rule is designed to maintain consistency in the declaration\nof repeated argument and return value types in Go functions. It supports three styles:\n'any', 'short', and 'full'. The 'any' style is lenient and allows any form of type\ndeclaration. The 'short' style encourages omitting repeated types for conciseness,\nwhereas the 'full' style mandates explicitly stating the type for each argument\nand return value, even if they are repeated, promoting clarity.\n\n_Configuration (1)_: (string) as a single string, it configures both argument\nand return value styles. Accepts 'any', 'short', or 'full' (default: 'any').\n\n_Configuration (2)_: (map[string]any) as a map, allows separate configuration\nfor function arguments and return values. Valid keys are \"funcArgStyle\" and\n\"funcRetValStyle\", each accepting 'any', 'short', or 'full'. If a key is not\nspecified, the default value of 'any' is used.\n\n_Note_: The rule applies checks based on the specified styles. For 'full' style,\nit flags instances where types are omitted in repeated arguments or return values.\nFor 'short' style, it highlights opportunities to omit repeated types for brevity.\nIncorrect or unknown configuration values will result in an error.\n\nExample (1):\n\n```toml\n[rule.enforce-repeated-arg-type-style]\n  arguments = [\"short\"]\n```\n\nExample (2):\n\n```toml\n[rule.enforce-repeated-arg-type-style]\n  arguments = [{ funcArgStyle = \"full\", funcRetValStyle = \"short\" }]\n```\n\n## enforce-slice-style\n\n_Description_: This rule enforces consistent usage of `make([]type, 0)`, `[]type{}`, or `var []type` for slice initialization.\nIt does not affect `make([]type, non_zero_len, or_non_zero_cap)` constructions as well as `[]type{v1}`.\nNil slices are always permitted.\n\n_Configuration_: (string) Specifies the enforced style for slice initialization. The options are:\n- \"any\": No enforcement (default).\n- \"make\": Enforces the usage of `make([]type, 0)`.\n- \"literal\": Enforces the usage of `[]type{}`.\n- \"nil\": Enforces the usage of `var []type`.\n\nExample:\n\n```toml\n[rule.enforce-slice-style]\n  arguments = [\"make\"]\n```\n\n## error-naming\n\n_Description_: By convention, for the sake of readability, variables of type `error` must be named with the prefix `err`.\n\n_Configuration_: N/A\n\n## error-return\n\n_Description_: By convention, for the sake of readability, the errors should be last in the list of returned values by a function.\n\n_Configuration_: N/A\n\n## error-strings\n\n_Description_: By convention, for better readability, error messages should not be capitalized or end with punctuation or a newline.\n\nMore information [here](https://go.dev/wiki/CodeReviewComments#error-strings)\n\n_Configuration_: N/A\n\n## errorf\n\n_Description_: It is possible to get a simpler program by replacing `errors.New(fmt.Sprintf())` with `fmt.Errorf()`. This rule spots that kind of simplification opportunities.\n\n_Configuration_: N/A\n\n## exported\n\n_Description_: Exported function and methods should have comments. This warns on undocumented exported functions and methods.\n\nMore information [here](https://go.dev/wiki/CodeReviewComments#doc-comments)\n\n_Configuration_: ([]string) rule flags.\nPlease notice that without configuration, the default behavior of the rule is that of its `golint` counterpart.\nAvailable flags are:\n\n* _checkPrivateReceivers_ enables checking public methods of private types\n* _disableStutteringCheck_ disables checking for method names that stutter with the package name (i.e. avoid failure messages of the form _type name will be used as x.XY by other packages, and that stutters; consider calling this Y_)\n* _sayRepetitiveInsteadOfStutters_ replaces the use of the term _stutters_ by _repetitive_ in failure messages\n* _checkPublicInterface_ enabled checking public method definitions in public interface types\n* _disableChecksOnConstants_ disable all checks on constant declarations\n* _disableChecksOnFunctions_ disable all checks on function declarations\n* _disableChecksOnMethods_ disable all checks on method declarations\n* _disableChecksOnTypes_ disable all checks on type declarations\n* _disableChecksOnVariables_ disable all checks on variable declarations\n\nExample:\n\n```toml\n[rule.exported]\n  arguments = [\"checkPrivateReceivers\", \"disableStutteringCheck\", \"checkPublicInterface\", \"disableChecksOnFunctions\"]\n```\n\n## file-header\n\n_Description_: This rule helps to enforce a common header for all source files in a project by spotting those files that do not have the specified header.\n\n_Configuration_: (string) the header to look for in source files.\n\nExample:\n\n```toml\n[rule.file-header]\n  arguments = [\"This is the text that must appear at the top of source files.\"]\n```\n\n## file-length-limit\n\n_Description_: This rule enforces a maximum number of lines per file, in order to aid in maintainability and reduce complexity.\n\n_Configuration_:\n\n* `max` (int) a maximum number of lines in a file. Must be non-negative integers. 0 means the rule is disabled (default `0`);\n* `skipComments` (bool) if true ignore and do not count lines containing just comments (default `false`);\n* `skipBlankLines` (bool) if true ignore and do not count lines made up purely of whitespace (default `false`).\n\nExample:\n\n```toml\n[rule.file-length-limit]\n  arguments = [{max=100,skipComments=true,skipBlankLines=true}]\n```\n\n## filename-format\n_Description_: enforces conventions on source file names. By default, the rule enforces filenames of the form `^[_A-Za-z0-9][_A-Za-z0-9-]*\\.go$`: Optionally, the rule can be configured to enforce other forms.\n\n_Configuration_: (string) regular expression for source filenames.\n\nExample:\n\n```toml\n[rule.filename-format]\n    arguments=[\"^[_a-z][_a-z0-9]*\\\\.go$\"]\n```\n\n## flag-parameter\n\n_Description_: If a function controls the flow of another by passing it information on what to do, both functions are said to be [control-coupled](https://en.wikipedia.org/wiki/Coupling_(computer_programming)#Procedural_programming).\nCoupling among functions must be minimized for better maintainability of the code.\nThis rule warns on boolean parameters that create a control coupling.\n\n_Configuration_: N/A\n\n## function-length\n\n_Description_: Functions too long (with many statements and/or lines) can be hard to understand.\n\n_Configuration_: (int,int) the maximum allowed statements and lines. Must be non-negative integers. Set to 0 to disable the check\n\nExample:\n\n```toml\n[rule.function-length]\n  arguments = [10, 0]\n```\nWill check for functions exceeding 10 statements and will not check the number of lines of functions\n\n## function-result-limit\n\n_Description_: Functions returning too many results can be hard to understand/use.\n\n_Configuration_: (int) the maximum allowed return values\n\nExample:\n\n```toml\n[rule.function-result-limit]\n  arguments = [3]\n```\n\n## get-return\n\n_Description_: Typically, functions with names prefixed with _Get_ are supposed to return a value.\n\n_Configuration_: N/A\n\n## identical-branches\n\n_Description_: an `if-then-else` conditional with identical implementations in both branches is an error.\n\n_Configuration_: N/A\n\n## if-return\n\n_Description_: Checking if an error is _nil_ to just after return the error or nil is redundant.\n\n_Configuration_: N/A\n\n## import-alias-naming\n\n_Description_: Aligns with Go's naming conventions, as outlined in the official\n[blog post](https://go.dev/blog/package-names). It enforces clear and lowercase import alias names, echoing\nthe principles of good package naming. Users can follow these guidelines by default or define a custom regex rule.\nImportantly, aliases with underscores (\"_\") are always allowed.\n\n_Configuration_ (1): (`string`) as plain string accepts allow regexp pattern for aliases (default: `^[a-z][a-z0-9]{0,}$`).\n\n_Configuration_ (2): (`map[string]string`) as a map accepts two values:\n* for a key \"allowRegex\" accepts allow regexp pattern\n* for a key \"denyRegex deny regexp pattern\n\n_Note_: If both `allowRegex` and `denyRegex` are provided, the alias must comply with both of them.\nIf none are given (i.e. an empty map), the default value `^[a-z][a-z0-9]{0,}$` for allowRegex is used.\nUnknown keys will result in an error.\n\nExample (1):\n\n```toml\n[rule.import-alias-naming]\n  arguments = [\"^[a-z][a-z0-9]{0,}$\"]\n```\n\nExample (2):\n\n```toml\n[rule.import-alias-naming]\n  arguments = [{ allowRegex = \"^[a-z][a-z0-9]{0,}$\", denyRegex = '^v\\d+$' }]\n```\n\n## import-shadowing\n\n_Description_: In Go it is possible to declare identifiers (packages, structs,\ninterfaces, parameters, receivers, variables, constants...) that conflict with the\nname of an imported package. This rule spots identifiers that shadow an import.\n\n_Configuration_: N/A\n\n## imports-blocklist\n\n_Description_: Warns when importing block-listed packages.\n\n_Configuration_: block-list of package names (or regular expression package names).\n\nExample:\n\n```toml\n[rule.imports-blocklist]\n  arguments = [\"crypto/md5\", \"crypto/sha1\", \"crypto/**/pkix\"]\n```\n\n## increment-decrement\n\n_Description_: By convention, for better readability, incrementing an integer variable by 1 is recommended to be done using the `++` operator.\nThis rule spots expressions  like `i += 1` and `i -= 1` and proposes to change them into `i++` and `i--`.\n\n_Configuration_: N/A\n\n## indent-error-flow\n\n_Description_: To improve the readability of code, it is recommended to reduce the indentation as much as possible.\nThis rule highlights redundant _else-blocks_ that can be eliminated from the code.\n\nMore information [here](https://go.dev/wiki/CodeReviewComments#indent-error-flow)\n\n_Configuration_: ([]string) rule flags. Available flags are:\n\n* _preserveScope_: do not suggest refactorings that would increase variable scope\n\nExample:\n\n```toml\n[rule.indent-error-flow]\n  arguments = [\"preserveScope\"]\n```\n\n## line-length-limit\n\n_Description_: Warns in the presence of code lines longer than a configured maximum.\n\n_Configuration_: (int) maximum line length in characters.\n\nExample:\n\n```toml\n[rule.line-length-limit]\n  arguments = [80]\n```\n\n## max-control-nesting\n\n_Description_: Warns if nesting level of control structures (`if-then-else`, `for`, `switch`) exceeds a given maximum.\n\n_Configuration_: (int) maximum accepted nesting level of control structures (defaults to 5)\n\nExample:\n\n```toml\n[rule.max-control-nesting]\n  arguments = [3]\n```\n\n## max-public-structs\n\n_Description_: Packages declaring too many public structs can be hard to understand/use,\nand could be a symptom of bad design.\n\nThis rule warns on files declaring more than a configured, maximum number of public structs.\n\n_Configuration_: (int) the maximum allowed public structs\n\nExample:\n\n```toml\n[rule.max-public-structs]\n  arguments = [3]\n```\n\n## modifies-parameter\n\n_Description_: A function that modifies its parameters can be hard to understand. It can also be misleading if the arguments are passed by value by the caller.\nThis rule warns when a function modifies one or more of its parameters.\n\n_Configuration_: N/A\n\n## modifies-value-receiver\n\n_Description_: A method that modifies its receiver value can have undesired behavior. The modification can be also the root of a bug because the actual value receiver could be a copy of that used at the calling site.\nThis rule warns when a method modifies its receiver.\n\n_Configuration_: N/A\n\n## nested-structs\n\n_Description_: Packages declaring structs that contain other inline struct definitions can be hard to understand/read for other developers.\n\n_Configuration_: N/A\n\n## optimize-operands-order\n\n_Description_: conditional expressions can be written to take advantage of short circuit evaluation and speed up its average evaluation time by forcing the evaluation of less time-consuming terms before more costly ones. This rule spots logical expressions where the order of evaluation of terms seems non optimal. Please notice that confidence of this rule is low and is up to the user to decide if the suggested rewrite of the expression keeps the semantics of the original one.\n\n_Configuration_: N/A\n\nExample:\n\n```go\nif isGenerated(content) && !config.IgnoreGeneratedHeader {\n```\n\nSwap left and right side :\n\n```go\nif !config.IgnoreGeneratedHeader && isGenerated(content) {\n```\n\n## package-comments\n\n_Description_: Packages should have comments. This rule warns on undocumented packages and when packages comments are detached to the `package` keyword.\n\nMore information [here](https://go.dev/wiki/CodeReviewComments#package-comments)\n\n_Configuration_: N/A\n\n## range-val-address\n\n_Description_: Range variables in a loop are reused at each iteration. This rule warns when assigning the address of the variable, passing the address to append() or using it in a map.\n\n_Configuration_: N/A\n\n_Note_: This rule is irrelevant for Go 1.22+.\n\n## range-val-in-closure\n\n_Description_: Range variables in a loop are reused at each iteration; therefore a goroutine created in a loop will point to the range variable with from the upper scope. This way, the goroutine could use the variable with an undesired value.\nThis rule warns when a range value (or index) is used inside a closure\n\n_Configuration_: N/A\n\n_Note_: This rule is irrelevant for Go 1.22+.\n\n## range\n\n_Description_: This rule suggests a shorter way of writing ranges that do not use the second value.\n\n_Configuration_: N/A\n\n## receiver-naming\n\n_Description_: By convention, receiver names in a method should reflect their identity. For example, if the receiver is of type `Parts`, `p` is an adequate name for it. Contrary to other languages, it is not idiomatic to name receivers as `this` or `self`.\n\n_Configuration_: (optional) list of key-value-pair-map (`[]map[string]any`).\n\n- `maxLength` : (int) max length of receiver name\n\n```toml\n[rule.receiver-naming]\n    arguments = [{maxLength=2}]\n```\n\n## redefines-builtin-id\n\n_Description_: Constant names like `false`, `true`, `nil`, function names like `append`, `make`, and basic type names like `bool`, and `byte` are not reserved words of the language; therefore the can be redefined.\nEven if possible, redefining these built in names can lead to bugs very difficult to detect.\n\n_Configuration_: N/A\n\n## redundant-import-alias\n\n_Description_: This rule warns on redundant import aliases. This happens when the alias used on the import statement matches the imported package name.\n\n_Configuration_: N/A\n\n## redundant-build-tag\n\n_Description_: This rule warns about redundant build tag comments `// +build` when `//go:build` is present.\n`gofmt` in Go 1.17+ automatically adds the `//go:build` constraint, making the `// +build` comment unnecessary.\n\n_Configuration_: N/A\n\n## string-format\n\n_Description_: This rule allows you to configure a list of regular expressions that string literals in certain function calls are checked against.\nThis is geared towards user facing applications where string literals are often used for messages that will be presented to users, so it may be desirable to enforce consistent formatting.\n\n_Configuration_: Each argument is a slice containing 2-3 strings: a scope, a regex, and an optional error message.\n\n1. The first string defines a **scope**. This controls which string literals the regex will apply to, and is defined as a function argument. It must contain at least a function name (`core.WriteError`). Scopes may optionally contain a number specifying which argument in the function to check (`core.WriteError[1]`), as well as a struct field (`core.WriteError[1].Message`, only works for top level fields). Function arguments are counted starting at 0, so `[0]` would refer to the first argument, `[1]` would refer to the second, etc. If no argument number is provided, the first argument will be used (same as `[0]`). You can use multiple scopes to one regex. Split them by `,` (`core.WriteError,fmt.Errorf`). \n\n2. The second string is a **regular expression** (beginning and ending with a `/` character), which will be used to check the string literals in the scope. The default semantics is \"_strings matching the regular expression are OK_\". If you need to inverse the semantics you can add a `!` just before the first `/`. Examples:\n\n    * with `\"/^[A-Z].*$/\"` the rule will **accept** strings starting with capital letters\n    * with `\"!/^[A-Z].*$/\"` the rule will a **fail** on strings starting with capital letters\n\n3. The third string (optional) is a **message** containing the purpose for the regex, which will be used in lint errors.\n\nExample:\n\n```toml\n[rule.string-format]\n  arguments = [\n    [\"core.WriteError[1].Message\", \"/^([^A-Z]|$)/\", \"must not start with a capital letter\"],\n    [\"fmt.Errorf[0]\", \"/(^|[^\\\\.!?])$/\", \"must not end in punctuation\"],\n    [\"panic\", \"/^[^\\\\n]*$/\", \"must not contain line breaks\"],\n    [\"fmt.Errorf[0],core.WriteError[1].Message\", \"!/^.*%w.*$/\", \"must not contain '%w'\"],\n  ]\n```\n\n## string-of-int\n\n_Description_:  explicit type conversion `string(i)` where `i` has an integer type other than `rune` might behave not as expected by the developer (e.g. `string(42)` is not `\"42\"`). This rule spot that kind of suspicious conversions.\n\n_Configuration_: N/A\n\n## struct-tag\n\n_Description_: Struct tags are not checked at compile time.\nThis rule, checks and warns if it finds errors in common struct tags types like: asn1, default, json, protobuf, xml, yaml.\n\n_Configuration_: (optional) list of user defined options.\n\nExample:\nTo accept the `inline` option in JSON tags (and `outline` and `gnu` in BSON tags) you must provide the following configuration\n\n```toml\n[rule.struct-tag]\n  arguments = [\"json,inline\", \"bson,outline,gnu\"]\n```\n\n## superfluous-else\n\n_Description_: To improve the readability of code, it is recommended to reduce the indentation as much as possible.\nThis rule highlights redundant _else-blocks_ that can be eliminated from the code.\n\n_Configuration_: ([]string) rule flags. Available flags are:\n\n* _preserveScope_: do not suggest refactorings that would increase variable scope\n\nExample:\n\n```toml\n[rule.superfluous-else]\n  arguments = [\"preserveScope\"]\n```\n\n## time-equal\n\n_Description_: This rule warns when using `==` and `!=` for equality check `time.Time` and suggest to `time.time.Equal` method, for about information follow this [link](https://pkg.go.dev/time#Time)\n\n_Configuration_: N/A\n\n## time-naming\n\n_Description_: Using unit-specific suffix like \"Secs\", \"Mins\", ... when naming variables of type `time.Duration` can be misleading, this rule highlights those cases.\n\n_Configuration_: N/A\n\n## unchecked-type-assertion\n\n_Description_: This rule checks whether a type assertion result is checked (the `ok` value), preventing unexpected `panic`s.\n\n_Configuration_: list of key-value-pair-map (`[]map[string]any`).\n\n- `acceptIgnoredAssertionResult` : (bool) default `false`, set it to `true` to accept ignored type assertion results like this:\n\n```go\nfoo, _ := bar(.*Baz).\n//   ^\n```\n\nExample:\n\n```toml\n[rule.unchecked-type-assertion]\n  arguments = [{acceptIgnoredAssertionResult=true}]\n```\n\n## unconditional-recursion\n\n_Description_: Unconditional recursive calls will produce infinite recursion, thus program stack overflow. This rule detects and warns about unconditional (direct) recursive calls.\n\n_Configuration_: N/A\n\n## unexported-naming\n\n_Description_: this rule warns on wrongly named un-exported symbols, i.e. un-exported symbols whose name start with a capital letter.\n\n_Configuration_: N/A\n\n## unexported-return\n\n_Description_: This rule warns when an exported function or method returns a value of an un-exported type.\n\n_Configuration_: N/A\n\n## unhandled-error\n\n_Description_: This rule warns when errors returned by a function are not explicitly handled on the caller side.\n\n_Configuration_: function names regexp patterns to ignore\n\nExample:\n\n```toml\n[rule.unhandled-error]\n  arguments = [\"os\\.(Create|WriteFile|Chmod)\", \"fmt\\.Print\", \"myFunction\", \"net\\..*\", \"bytes\\.Buffer\\.Write\"]\n```\n\n## unnecessary-stmt\n\n_Description_: This rule suggests to remove redundant statements like a `break` at the end of a case block, for improving the code's readability.\n\n_Configuration_: N/A\n\n## unreachable-code\n\n_Description_: This rule spots and proposes to remove [unreachable code](https://en.wikipedia.org/wiki/Unreachable_code).\n\n_Configuration_: N/A\n\n## unused-parameter\n\n_Description_: This rule warns on unused parameters. Functions or methods with unused parameters can be a symptom of an unfinished refactoring or a bug.\n\n_Configuration_: Supports arguments with single of `map[string]any` with option `allowRegex` to provide additional to `_` mask to allowed unused parameter names, for example:\n\n```toml\n[rule.unused-parameter]\n    arguments = [{ allowRegex = \"^_\" }]\n```\n\nallows any names started with `_`, not just `_` itself:\n\n```go\nfunc SomeFunc(_someObj *MyStruct) {} // matches rule\n```\n\n## unused-receiver\n\n_Description_: This rule warns on unused method receivers. Methods with unused receivers can be a symptom of an unfinished refactoring or a bug.\n\n_Configuration_: Supports arguments with single of `map[string]any` with option `allowRegex` to provide additional to `_` mask to allowed unused receiver names, for example:\n\n```toml\n[rule.unused-receiver]\n    arguments = [{ allowRegex = \"^_\" }]\n```\n\nallows any names started with `_`, not just `_` itself:\n\n```go\nfunc (_my *MyStruct) SomeMethod() {} // matches rule\n```\n\n## use-any\n\n_Description_: Since Go 1.18, `interface{}` has an alias: `any`. This rule proposes to replace instances of `interface{}` with `any`.\n\n_Configuration_: N/A\n\n## use-errors-new\n\n_Description_: This rules identifies calls to `fmt.Errorf` that can be safely replaced by, the more efficient, `errors.New`.\n\n_Configuration_: N/A\n\n\n## useless-break\n\n_Description_: This rule warns on useless `break` statements in case clauses of switch and select statements. Go, unlike other programming languages like C, only executes statements of the selected case while ignoring the subsequent case clauses.\nTherefore, inserting a `break` at the end of a case clause has no effect.\n\nBecause `break` statements are rarely used in case clauses, when switch or select statements are inside a for-loop, the programmer might wrongly assume that a `break` in a case clause will take the control out of the loop.\nThe rule emits a specific warning for such cases.\n\n_Configuration_: N/A\n\n## var-declaration\n\n_Description_: This rule proposes simplifications of variable declarations.\n\n_Configuration_: N/A\n\n## var-naming\n\n_Description_: This rule warns when [initialism](https://go.dev/wiki/CodeReviewComments#initialisms), [variable](https://go.dev/wiki/CodeReviewComments#variable-names) or [package](https://go.dev/wiki/CodeReviewComments#package-names) naming conventions are not followed. It ignores functions starting with `Example`, `Test`, `Benchmark`, and `Fuzz` in test files, preserving `golint` original behavior.\n\n_Configuration_: This rule accepts two slices of strings and one optional slice with single map with named parameters.\n(it's due to TOML hasn't \"slice of any\" and we keep backward compatibility with previous config version)\nFirst slice is an allowlist and second one is a blocklist of initialisms.\nIn map, you can add \"upperCaseConst=true\" parameter to allow `UPPER_CASE` for `const`\nBy default, the rule behaves exactly as the alternative in `golint` but optionally, you can relax it (see [golint/lint/issues/89](https://github.com/golang/lint/issues/89))\n\nExample:\n\n```toml\n[rule.var-naming]\n  arguments = [[\"ID\"], [\"VM\"], [{upperCaseConst=true}]]\n```\n\nYou can also add \"skipPackageNameChecks=true\" to skip package name checks.\n\nExample:\n\n\n```toml\n[rule.var-naming]\n  arguments = [[], [], [{skipPackageNameChecks=true}]]\n```\n\n## waitgroup-by-value\n\n_Description_: Function parameters that are passed by value, are in fact a copy of the original argument. Passing a copy of a `sync.WaitGroup` is usually not what the developer wants to do.\nThis rule warns when a `sync.WaitGroup` expected as a by-value parameter in a function or method.\n\n_Configuration_: N/A\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "defaults.toml",
          "type": "blob",
          "size": 0.583984375,
          "content": "ignoreGeneratedHeader = false\nseverity = \"warning\"\nconfidence = 0.8\nerrorCode = 0\nwarningCode = 0\n\n[rule.blank-imports]\n[rule.context-as-argument]\n[rule.context-keys-type]\n[rule.dot-imports]\n[rule.empty-block]\n[rule.error-naming]\n[rule.error-return]\n[rule.error-strings]\n[rule.errorf]\n[rule.exported]\n[rule.increment-decrement]\n[rule.indent-error-flow]\n[rule.package-comments]\n[rule.range]\n[rule.receiver-naming]\n[rule.redefines-builtin-id]\n[rule.superfluous-else]\n[rule.time-naming]\n[rule.unexported-return]\n[rule.unreachable-code]\n[rule.unused-parameter]\n[rule.var-declaration]\n[rule.var-naming]\n"
        },
        {
          "name": "formatter",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.76171875,
          "content": "module github.com/mgechev/revive\n\ngo 1.22.1\n\nrequire (\n\tgithub.com/BurntSushi/toml v1.4.0\n\tgithub.com/chavacava/garif v0.1.0\n\tgithub.com/fatih/color v1.18.0\n\tgithub.com/fatih/structtag v1.2.0\n\tgithub.com/hashicorp/go-version v1.7.0\n\tgithub.com/mgechev/dots v0.0.0-20210922191527-e955255bf517\n\tgithub.com/olekukonko/tablewriter v0.0.5\n\tgithub.com/spf13/afero v1.11.0\n\tgolang.org/x/mod v0.22.0\n\tgolang.org/x/sync v0.10.0\n\tgolang.org/x/tools v0.29.0\n)\n\nrequire (\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.16 // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgithub.com/stretchr/testify v1.9.0 // indirect\n\tgolang.org/x/sys v0.29.0 // indirect\n\tgolang.org/x/text v0.18.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 4.7431640625,
          "content": "github.com/BurntSushi/toml v1.4.0 h1:kuoIxZQy2WRRk1pttg9asf+WVv6tWQuBNVmK8+nqPr0=\ngithub.com/BurntSushi/toml v1.4.0/go.mod h1:ukJfTF/6rtPPRCnwkur4qwRxa8vTRFBF0uk2lLoLwho=\ngithub.com/chavacava/garif v0.1.0 h1:2JHa3hbYf5D9dsgseMKAmc/MZ109otzgNFk5s87H9Pc=\ngithub.com/chavacava/garif v0.1.0/go.mod h1:XMyYCkEL58DF0oyW4qDjjnPWONs2HBqYKI+UIPD+Gww=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fatih/color v1.18.0 h1:S8gINlzdQ840/4pfAwic/ZE0djQEH3wM94VfqLTZcOM=\ngithub.com/fatih/color v1.18.0/go.mod h1:4FelSpRwEGDpQ12mAdzqdOukCy4u8WUtOY6lkT/6HfU=\ngithub.com/fatih/structtag v1.2.0 h1:/OdNE99OxoI/PqaW/SuSK9uxxT3f/tcSZgon/ssNSx4=\ngithub.com/fatih/structtag v1.2.0/go.mod h1:mBJUNpUnHmRKrKlQQlmCrh5PuhftFbNv8Ys4/aAZl94=\ngithub.com/hashicorp/go-version v1.7.0 h1:5tqGy27NaOTB8yJKUZELlFAS/LTKJkrmONwQKeRZfjY=\ngithub.com/hashicorp/go-version v1.7.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=\ngithub.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mgechev/dots v0.0.0-20210922191527-e955255bf517 h1:zpIH83+oKzcpryru8ceC6BxnoG8TBrhgAvRg8obzup0=\ngithub.com/mgechev/dots v0.0.0-20210922191527-e955255bf517/go.mod h1:KQ7+USdGKfpPjXk4Ga+5XxQM4Lm4e3gAogrreFAYpOg=\ngithub.com/olekukonko/tablewriter v0.0.5 h1:P2Ga83D34wi1o9J6Wh1mRuqd4mF/x/lgBS7N7AbDhec=\ngithub.com/olekukonko/tablewriter v0.0.5/go.mod h1:hPp6KlRPjbx+hW8ykQs1w3UBbZlj6HuIJcUGPhkA7kY=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=\ngithub.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngolang.org/x/mod v0.22.0 h1:D4nJWe9zXqHOmWqj4VMOJhvzj7bEZg4wEYa759z1pH4=\ngolang.org/x/mod v0.22.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.18.0 h1:XvMDiNzPAl0jr17s6W9lcaIhGUfUORdGCNsuLmPG224=\ngolang.org/x/text v0.18.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/tools v0.29.0 h1:Xx0h3TtM9rzQpQuR4dKLrdglAmCEN5Oi+P74JdhdzXE=\ngolang.org/x/tools v0.29.0/go.mod h1:KMQVMRsVxU6nHCFXrBPhDB8XncLNLM0lIy/F14RP588=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "lint",
          "type": "tree",
          "content": null
        },
        {
          "name": "logging",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.1357421875,
          "content": "// Package main is the build entry point of revive.\npackage main\n\nimport \"github.com/mgechev/revive/cli\"\n\nfunc main() {\n\tcli.RunRevive()\n}\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.0400390625,
          "content": "{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n"
        },
        {
          "name": "revive.toml",
          "type": "blob",
          "size": 1.091796875,
          "content": "# This configuration for the revive linter used for linting the revive's codebase itself.\n# See .github/workflows/lint.yaml.\n\nignoreGeneratedHeader = false\nseverity = \"warning\"\nconfidence = 0.8\nerrorCode = 1\nwarningCode = 1\n\n[rule.bare-return]\n[rule.blank-imports]\n[rule.context-as-argument]\n[rule.context-keys-type]\n[rule.dot-imports]\n[rule.empty-block]\n[rule.empty-lines]\n[rule.enforce-map-style]\n    arguments = [\"literal\"]\n[rule.enforce-slice-style]\n    arguments = [\"literal\"]\n[rule.error-naming]\n[rule.error-return]\n[rule.error-strings]\n[rule.errorf]\n[rule.exported]\n[rule.filename-format]\n    # Override the default pattern to forbid .go files with uppercase letters and dashes.\n    arguments=[\"^[_a-z][_a-z0-9]*\\\\.go$\"]\n[rule.increment-decrement]\n[rule.indent-error-flow]\n[rule.line-length-limit]\n    arguments = [200]\n[rule.package-comments]\n[rule.range]\n[rule.receiver-naming]\n[rule.redefines-builtin-id]\n[rule.superfluous-else]\n[rule.time-naming]\n[rule.unexported-naming]\n[rule.unexported-return]\n[rule.unreachable-code]\n[rule.unused-parameter]\n[rule.useless-break]\n[rule.var-declaration]\n[rule.var-naming]\n"
        },
        {
          "name": "revivelib",
          "type": "tree",
          "content": null
        },
        {
          "name": "rule",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "untyped.toml",
          "type": "blob",
          "size": 0.43359375,
          "content": "[rule.blank-imports]\n[rule.context-as-argument]\n[rule.dot-imports]\n[rule.error-return]\n[rule.error-strings]\n[rule.error-naming]\n[rule.exported]\n[rule.if-return]\n[rule.increment-decrement]\n[rule.var-naming]\n[rule.package-comments]\n[rule.range]\n[rule.receiver-naming]\n[rule.indent-error-flow]\n[rule.empty-block]\n[rule.range-val-in-closure]\n[rule.waitgroup-by-value]\n[rule.atomic]\n[rule.empty-lines]\n[rule.line-length-limit]\n    arguments = [200]\n"
        }
      ]
    }
  ]
}