{
  "metadata": {
    "timestamp": 1736567244306,
    "page": 841,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hashicorp/go-multierror",
      "stars": 2386,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.5107421875,
          "content": "# Each line is a file pattern followed by one or more owners.\n# More on CODEOWNERS files: https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners\n\n# Default owner\n* @hashicorp/team-ip-compliance\n\n# Add override rules below. Each line is a file/folder pattern followed by one or more owners.\n# Being an owner means those groups or individuals will be added as reviewers to PRs affecting\n# those areas of the code.\n# Examples:\n# /docs/  @docs-team\n# *.js    @js-team\n# *.go    @go-team"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 15.63671875,
          "content": "Copyright (c) 2014 HashiCorp, Inc.\n\nMozilla Public License, version 2.0\n\n1. Definitions\n\n1.1. “Contributor”\n\n     means each individual or legal entity that creates, contributes to the\n     creation of, or owns Covered Software.\n\n1.2. “Contributor Version”\n\n     means the combination of the Contributions of others (if any) used by a\n     Contributor and that particular Contributor’s Contribution.\n\n1.3. “Contribution”\n\n     means Covered Software of a particular Contributor.\n\n1.4. “Covered Software”\n\n     means Source Code Form to which the initial Contributor has attached the\n     notice in Exhibit A, the Executable Form of such Source Code Form, and\n     Modifications of such Source Code Form, in each case including portions\n     thereof.\n\n1.5. “Incompatible With Secondary Licenses”\n     means\n\n     a. that the initial Contributor has attached the notice described in\n        Exhibit B to the Covered Software; or\n\n     b. that the Covered Software was made available under the terms of version\n        1.1 or earlier of the License, but not also under the terms of a\n        Secondary License.\n\n1.6. “Executable Form”\n\n     means any form of the work other than Source Code Form.\n\n1.7. “Larger Work”\n\n     means a work that combines Covered Software with other material, in a separate\n     file or files, that is not Covered Software.\n\n1.8. “License”\n\n     means this document.\n\n1.9. “Licensable”\n\n     means having the right to grant, to the maximum extent possible, whether at the\n     time of the initial grant or subsequently, any and all of the rights conveyed by\n     this License.\n\n1.10. “Modifications”\n\n     means any of the following:\n\n     a. any file in Source Code Form that results from an addition to, deletion\n        from, or modification of the contents of Covered Software; or\n\n     b. any new file in Source Code Form that contains any Covered Software.\n\n1.11. “Patent Claims” of a Contributor\n\n      means any patent claim(s), including without limitation, method, process,\n      and apparatus claims, in any patent Licensable by such Contributor that\n      would be infringed, but for the grant of the License, by the making,\n      using, selling, offering for sale, having made, import, or transfer of\n      either its Contributions or its Contributor Version.\n\n1.12. “Secondary License”\n\n      means either the GNU General Public License, Version 2.0, the GNU Lesser\n      General Public License, Version 2.1, the GNU Affero General Public\n      License, Version 3.0, or any later versions of those licenses.\n\n1.13. “Source Code Form”\n\n      means the form of the work preferred for making modifications.\n\n1.14. “You” (or “Your”)\n\n      means an individual or a legal entity exercising rights under this\n      License. For legal entities, “You” includes any entity that controls, is\n      controlled by, or is under common control with You. For purposes of this\n      definition, “control” means (a) the power, direct or indirect, to cause\n      the direction or management of such entity, whether by contract or\n      otherwise, or (b) ownership of more than fifty percent (50%) of the\n      outstanding shares or beneficial ownership of such entity.\n\n\n2. License Grants and Conditions\n\n2.1. Grants\n\n     Each Contributor hereby grants You a world-wide, royalty-free,\n     non-exclusive license:\n\n     a. under intellectual property rights (other than patent or trademark)\n        Licensable by such Contributor to use, reproduce, make available,\n        modify, display, perform, distribute, and otherwise exploit its\n        Contributions, either on an unmodified basis, with Modifications, or as\n        part of a Larger Work; and\n\n     b. under Patent Claims of such Contributor to make, use, sell, offer for\n        sale, have made, import, and otherwise transfer either its Contributions\n        or its Contributor Version.\n\n2.2. Effective Date\n\n     The licenses granted in Section 2.1 with respect to any Contribution become\n     effective for each Contribution on the date the Contributor first distributes\n     such Contribution.\n\n2.3. Limitations on Grant Scope\n\n     The licenses granted in this Section 2 are the only rights granted under this\n     License. No additional rights or licenses will be implied from the distribution\n     or licensing of Covered Software under this License. Notwithstanding Section\n     2.1(b) above, no patent license is granted by a Contributor:\n\n     a. for any code that a Contributor has removed from Covered Software; or\n\n     b. for infringements caused by: (i) Your and any other third party’s\n        modifications of Covered Software, or (ii) the combination of its\n        Contributions with other software (except as part of its Contributor\n        Version); or\n\n     c. under Patent Claims infringed by Covered Software in the absence of its\n        Contributions.\n\n     This License does not grant any rights in the trademarks, service marks, or\n     logos of any Contributor (except as may be necessary to comply with the\n     notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\n     No Contributor makes additional grants as a result of Your choice to\n     distribute the Covered Software under a subsequent version of this License\n     (see Section 10.2) or under the terms of a Secondary License (if permitted\n     under the terms of Section 3.3).\n\n2.5. Representation\n\n     Each Contributor represents that the Contributor believes its Contributions\n     are its original creation(s) or it has sufficient rights to grant the\n     rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\n     This License is not intended to limit any rights You have under applicable\n     copyright doctrines of fair use, fair dealing, or other equivalents.\n\n2.7. Conditions\n\n     Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in\n     Section 2.1.\n\n\n3. Responsibilities\n\n3.1. Distribution of Source Form\n\n     All distribution of Covered Software in Source Code Form, including any\n     Modifications that You create or to which You contribute, must be under the\n     terms of this License. You must inform recipients that the Source Code Form\n     of the Covered Software is governed by the terms of this License, and how\n     they can obtain a copy of this License. You may not attempt to alter or\n     restrict the recipients’ rights in the Source Code Form.\n\n3.2. Distribution of Executable Form\n\n     If You distribute Covered Software in Executable Form then:\n\n     a. such Covered Software must also be made available in Source Code Form,\n        as described in Section 3.1, and You must inform recipients of the\n        Executable Form how they can obtain a copy of such Source Code Form by\n        reasonable means in a timely manner, at a charge no more than the cost\n        of distribution to the recipient; and\n\n     b. You may distribute such Executable Form under the terms of this License,\n        or sublicense it under different terms, provided that the license for\n        the Executable Form does not attempt to limit or alter the recipients’\n        rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\n     You may create and distribute a Larger Work under terms of Your choice,\n     provided that You also comply with the requirements of this License for the\n     Covered Software. If the Larger Work is a combination of Covered Software\n     with a work governed by one or more Secondary Licenses, and the Covered\n     Software is not Incompatible With Secondary Licenses, this License permits\n     You to additionally distribute such Covered Software under the terms of\n     such Secondary License(s), so that the recipient of the Larger Work may, at\n     their option, further distribute the Covered Software under the terms of\n     either this License or such Secondary License(s).\n\n3.4. Notices\n\n     You may not remove or alter the substance of any license notices (including\n     copyright notices, patent notices, disclaimers of warranty, or limitations\n     of liability) contained within the Source Code Form of the Covered\n     Software, except that You may alter any license notices to the extent\n     required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\n     You may choose to offer, and to charge a fee for, warranty, support,\n     indemnity or liability obligations to one or more recipients of Covered\n     Software. However, You may do so only on Your own behalf, and not on behalf\n     of any Contributor. You must make it absolutely clear that any such\n     warranty, support, indemnity, or liability obligation is offered by You\n     alone, and You hereby agree to indemnify every Contributor for any\n     liability incurred by such Contributor as a result of warranty, support,\n     indemnity or liability terms You offer. You may include additional\n     disclaimers of warranty and limitations of liability specific to any\n     jurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n\n   If it is impossible for You to comply with any of the terms of this License\n   with respect to some or all of the Covered Software due to statute, judicial\n   order, or regulation then You must: (a) comply with the terms of this License\n   to the maximum extent possible; and (b) describe the limitations and the code\n   they affect. Such description must be placed in a text file included with all\n   distributions of the Covered Software under this License. Except to the\n   extent prohibited by statute or regulation, such description must be\n   sufficiently detailed for a recipient of ordinary skill to be able to\n   understand it.\n\n5. Termination\n\n5.1. The rights granted under this License will terminate automatically if You\n     fail to comply with any of its terms. However, if You become compliant,\n     then the rights granted under this License from a particular Contributor\n     are reinstated (a) provisionally, unless and until such Contributor\n     explicitly and finally terminates Your grants, and (b) on an ongoing basis,\n     if such Contributor fails to notify You of the non-compliance by some\n     reasonable means prior to 60 days after You have come back into compliance.\n     Moreover, Your grants from a particular Contributor are reinstated on an\n     ongoing basis if such Contributor notifies You of the non-compliance by\n     some reasonable means, this is the first time You have received notice of\n     non-compliance with this License from such Contributor, and You become\n     compliant prior to 30 days after Your receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\n     infringement claim (excluding declaratory judgment actions, counter-claims,\n     and cross-claims) alleging that a Contributor Version directly or\n     indirectly infringes any patent, then the rights granted to You by any and\n     all Contributors for the Covered Software under Section 2.1 of this License\n     shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user\n     license agreements (excluding distributors and resellers) which have been\n     validly granted by You or Your distributors under this License prior to\n     termination shall survive termination.\n\n6. Disclaimer of Warranty\n\n   Covered Software is provided under this License on an “as is” basis, without\n   warranty of any kind, either expressed, implied, or statutory, including,\n   without limitation, warranties that the Covered Software is free of defects,\n   merchantable, fit for a particular purpose or non-infringing. The entire\n   risk as to the quality and performance of the Covered Software is with You.\n   Should any Covered Software prove defective in any respect, You (not any\n   Contributor) assume the cost of any necessary servicing, repair, or\n   correction. This disclaimer of warranty constitutes an essential part of this\n   License. No use of  any Covered Software is authorized under this License\n   except under this disclaimer.\n\n7. Limitation of Liability\n\n   Under no circumstances and under no legal theory, whether tort (including\n   negligence), contract, or otherwise, shall any Contributor, or anyone who\n   distributes Covered Software as permitted above, be liable to You for any\n   direct, indirect, special, incidental, or consequential damages of any\n   character including, without limitation, damages for lost profits, loss of\n   goodwill, work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses, even if such party shall have been\n   informed of the possibility of such damages. This limitation of liability\n   shall not apply to liability for death or personal injury resulting from such\n   party’s negligence to the extent applicable law prohibits such limitation.\n   Some jurisdictions do not allow the exclusion or limitation of incidental or\n   consequential damages, so this exclusion and limitation may not apply to You.\n\n8. Litigation\n\n   Any litigation relating to this License may be brought only in the courts of\n   a jurisdiction where the defendant maintains its principal place of business\n   and such litigation shall be governed by laws of that jurisdiction, without\n   reference to its conflict-of-law provisions. Nothing in this Section shall\n   prevent a party’s ability to bring cross-claims or counter-claims.\n\n9. Miscellaneous\n\n   This License represents the complete agreement concerning the subject matter\n   hereof. If any provision of this License is held to be unenforceable, such\n   provision shall be reformed only to the extent necessary to make it\n   enforceable. Any law or regulation which provides that the language of a\n   contract shall be construed against the drafter shall not be used to construe\n   this License against a Contributor.\n\n\n10. Versions of the License\n\n10.1. New Versions\n\n      Mozilla Foundation is the license steward. Except as provided in Section\n      10.3, no one other than the license steward has the right to modify or\n      publish new versions of this License. Each version will be given a\n      distinguishing version number.\n\n10.2. Effect of New Versions\n\n      You may distribute the Covered Software under the terms of the version of\n      the License under which You originally received the Covered Software, or\n      under the terms of any subsequent version published by the license\n      steward.\n\n10.3. Modified Versions\n\n      If you create software not governed by this License, and you want to\n      create a new license for such software, you may create and use a modified\n      version of this License if you rename the license and remove any\n      references to the name of the license steward (except to note that such\n      modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\n      If You choose to distribute Source Code Form that is Incompatible With\n      Secondary Licenses under the terms of this version of the License, the\n      notice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n\n      This Source Code Form is subject to the\n      terms of the Mozilla Public License, v.\n      2.0. If a copy of the MPL was not\n      distributed with this file, You can\n      obtain one at\n      http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then\nYou may include the notice in a location (such as a LICENSE file in a relevant\ndirectory) where a recipient would be likely to look for such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - “Incompatible With Secondary Licenses” Notice\n\n      This Source Code Form is “Incompatible\n      With Secondary Licenses”, as defined by\n      the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8017578125,
          "content": "TEST?=./...\n\ndefault: test\n\n# test runs the test suite and vets the code.\ntest: generate\n\t@echo \"==> Running tests...\"\n\t@go list $(TEST) \\\n\t\t| grep -v \"/vendor/\" \\\n\t\t| xargs -n1 go test -timeout=60s -parallel=10 ${TESTARGS}\n\n# testrace runs the race checker\ntestrace: generate\n\t@echo \"==> Running tests (race)...\"\n\t@go list $(TEST) \\\n\t\t| grep -v \"/vendor/\" \\\n\t\t| xargs -n1 go test -timeout=60s -race ${TESTARGS}\n\n# updatedeps installs all the dependencies needed to run and build.\nupdatedeps:\n\t@sh -c \"'${CURDIR}/scripts/deps.sh' '${NAME}'\"\n\n# generate runs `go generate` to build the dynamically generated source files.\ngenerate:\n\t@echo \"==> Generating...\"\n\t@find . -type f -name '.DS_Store' -delete\n\t@go list ./... \\\n\t\t| grep -v \"/vendor/\" \\\n\t\t| xargs -n1 go generate\n\n.PHONY: default test testrace updatedeps generate\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.646484375,
          "content": "# go-multierror\n\n[![CircleCI](https://img.shields.io/circleci/build/github/hashicorp/go-multierror/master)](https://circleci.com/gh/hashicorp/go-multierror)\n[![Go Reference](https://pkg.go.dev/badge/github.com/hashicorp/go-multierror.svg)](https://pkg.go.dev/github.com/hashicorp/go-multierror)\n![GitHub go.mod Go version](https://img.shields.io/github/go-mod/go-version/hashicorp/go-multierror)\n\n[circleci]: https://app.circleci.com/pipelines/github/hashicorp/go-multierror\n[godocs]: https://pkg.go.dev/github.com/hashicorp/go-multierror\n\n`go-multierror` is a package for Go that provides a mechanism for\nrepresenting a list of `error` values as a single `error`.\n\nThis allows a function in Go to return an `error` that might actually\nbe a list of errors. If the caller knows this, they can unwrap the\nlist and access the errors. If the caller doesn't know, the error\nformats to a nice human-readable format.\n\n`go-multierror` is fully compatible with the Go standard library\n[errors](https://golang.org/pkg/errors/) package, including the\nfunctions `As`, `Is`, and `Unwrap`. This provides a standardized approach\nfor introspecting on error values.\n\n## Installation and Docs\n\nInstall using `go get github.com/hashicorp/go-multierror`.\n\nFull documentation is available at\nhttps://pkg.go.dev/github.com/hashicorp/go-multierror\n\n### Requires go version 1.13 or newer\n\n`go-multierror` requires go version 1.13 or newer. Go 1.13 introduced\n[error wrapping](https://golang.org/doc/go1.13#error_wrapping), which\nthis library takes advantage of.\n\nIf you need to use an earlier version of go, you can use the\n[v1.0.0](https://github.com/hashicorp/go-multierror/tree/v1.0.0)\ntag, which doesn't rely on features in go 1.13.\n\nIf you see compile errors that look like the below, it's likely that\nyou're on an older version of go:\n\n```\n/go/src/github.com/hashicorp/go-multierror/multierror.go:112:9: undefined: errors.As\n/go/src/github.com/hashicorp/go-multierror/multierror.go:117:9: undefined: errors.Is\n```\n\n## Usage\n\ngo-multierror is easy to use and purposely built to be unobtrusive in\nexisting Go applications/libraries that may not be aware of it.\n\n**Building a list of errors**\n\nThe `Append` function is used to create a list of errors. This function\nbehaves a lot like the Go built-in `append` function: it doesn't matter\nif the first argument is nil, a `multierror.Error`, or any other `error`,\nthe function behaves as you would expect.\n\n```go\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n**Customizing the formatting of the errors**\n\nBy specifying a custom `ErrorFormat`, you can customize the format\nof the `Error() string` function:\n\n```go\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n**Accessing the list of errors**\n\n`multierror.Error` implements `error` so if the caller doesn't know about\nmultierror, it will work just fine. But if you're aware a multierror might\nbe returned, you can use type switches to access the list of errors:\n\n```go\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\nYou can also use the standard [`errors.Unwrap`](https://golang.org/pkg/errors/#Unwrap)\nfunction. This will continue to unwrap into subsequent errors until none exist.\n\n**Extracting an error**\n\nThe standard library [`errors.As`](https://golang.org/pkg/errors/#As)\nfunction can be used directly with a multierror to extract a specific error:\n\n```go\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n**Checking for an exact error value**\n\nSome errors are returned as exact errors such as the [`ErrNotExist`](https://golang.org/pkg/os/#pkg-variables)\nerror in the `os` package. You can check if this error is present by using\nthe standard [`errors.Is`](https://golang.org/pkg/errors/#Is) function.\n\n```go\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n**Returning a multierror only if there are errors**\n\nIf you build a `multierror.Error`, you can use the `ErrorOrNil` function\nto return an `error` implementation only if there are errors to return:\n\n```go\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n"
        },
        {
          "name": "append.go",
          "type": "blob",
          "size": 1.1015625,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\n// Append is a helper function that will append more errors\n// onto an Error in order to create a larger multi-error.\n//\n// If err is not a multierror.Error, then it will be turned into\n// one. If any of the errs are multierr.Error, they will be flattened\n// one level into err.\n// Any nil errors within errs will be ignored. If err is nil, a new\n// *Error will be returned.\nfunc Append(err error, errs ...error) *Error {\n\tswitch err := err.(type) {\n\tcase *Error:\n\t\t// Typed nils can reach here, so initialize if we are nil\n\t\tif err == nil {\n\t\t\terr = new(Error)\n\t\t}\n\n\t\t// Go through each error and flatten\n\t\tfor _, e := range errs {\n\t\t\tswitch e := e.(type) {\n\t\t\tcase *Error:\n\t\t\t\tif e != nil {\n\t\t\t\t\terr.Errors = append(err.Errors, e.Errors...)\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tif e != nil {\n\t\t\t\t\terr.Errors = append(err.Errors, e)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn err\n\tdefault:\n\t\tnewErrs := make([]error, 0, len(errs)+1)\n\t\tif err != nil {\n\t\t\tnewErrs = append(newErrs, err)\n\t\t}\n\t\tnewErrs = append(newErrs, errs...)\n\n\t\treturn Append(&Error{}, newErrs...)\n\t}\n}\n"
        },
        {
          "name": "append_test.go",
          "type": "blob",
          "size": 1.8681640625,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport (\n\t\"errors\"\n\t\"testing\"\n)\n\nfunc TestAppend_Error(t *testing.T) {\n\toriginal := &Error{\n\t\tErrors: []error{errors.New(\"foo\")},\n\t}\n\n\tresult := Append(original, errors.New(\"bar\"))\n\tif len(result.Errors) != 2 {\n\t\tt.Fatalf(\"wrong len: %d\", len(result.Errors))\n\t}\n\n\toriginal = &Error{}\n\tresult = Append(original, errors.New(\"bar\"))\n\tif len(result.Errors) != 1 {\n\t\tt.Fatalf(\"wrong len: %d\", len(result.Errors))\n\t}\n\n\t// Test when a typed nil is passed\n\tvar e *Error\n\tresult = Append(e, errors.New(\"baz\"))\n\tif len(result.Errors) != 1 {\n\t\tt.Fatalf(\"wrong len: %d\", len(result.Errors))\n\t}\n\n\t// Test flattening\n\toriginal = &Error{\n\t\tErrors: []error{errors.New(\"foo\")},\n\t}\n\n\tresult = Append(original, Append(nil, errors.New(\"foo\"), errors.New(\"bar\")))\n\tif len(result.Errors) != 3 {\n\t\tt.Fatalf(\"wrong len: %d\", len(result.Errors))\n\t}\n}\n\nfunc TestAppend_NilError(t *testing.T) {\n\tvar err error\n\tresult := Append(err, errors.New(\"bar\"))\n\tif len(result.Errors) != 1 {\n\t\tt.Fatalf(\"wrong len: %d\", len(result.Errors))\n\t}\n}\n\nfunc TestAppend_NilErrorArg(t *testing.T) {\n\tvar err error\n\tvar nilErr *Error\n\tresult := Append(err, nilErr)\n\tif len(result.Errors) != 0 {\n\t\tt.Fatalf(\"wrong len: %d\", len(result.Errors))\n\t}\n}\n\nfunc TestAppend_NilErrorIfaceArg(t *testing.T) {\n\tvar err error\n\tvar nilErr error\n\tresult := Append(err, nilErr)\n\tif len(result.Errors) != 0 {\n\t\tt.Fatalf(\"wrong len: %d\", len(result.Errors))\n\t}\n}\n\nfunc TestAppend_NonError(t *testing.T) {\n\toriginal := errors.New(\"foo\")\n\tresult := Append(original, errors.New(\"bar\"))\n\tif len(result.Errors) != 2 {\n\t\tt.Fatalf(\"wrong len: %d\", len(result.Errors))\n\t}\n}\n\nfunc TestAppend_NonError_Error(t *testing.T) {\n\toriginal := errors.New(\"foo\")\n\tresult := Append(original, Append(nil, errors.New(\"bar\")))\n\tif len(result.Errors) != 2 {\n\t\tt.Fatalf(\"wrong len: %d\", len(result.Errors))\n\t}\n}\n"
        },
        {
          "name": "flatten.go",
          "type": "blob",
          "size": 0.623046875,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\n// Flatten flattens the given error, merging any *Errors together into\n// a single *Error.\nfunc Flatten(err error) error {\n\t// If it isn't an *Error, just return the error as-is\n\tif _, ok := err.(*Error); !ok {\n\t\treturn err\n\t}\n\n\t// Otherwise, make the result and flatten away!\n\tflatErr := new(Error)\n\tflatten(err, flatErr)\n\treturn flatErr\n}\n\nfunc flatten(err error, flatErr *Error) {\n\tswitch err := err.(type) {\n\tcase *Error:\n\t\tfor _, e := range err.Errors {\n\t\t\tflatten(e, flatErr)\n\t\t}\n\tdefault:\n\t\tflatErr.Errors = append(flatErr.Errors, err)\n\t}\n}\n"
        },
        {
          "name": "flatten_test.go",
          "type": "blob",
          "size": 0.736328125,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestFlatten(t *testing.T) {\n\toriginal := &Error{\n\t\tErrors: []error{\n\t\t\terrors.New(\"one\"),\n\t\t\t&Error{\n\t\t\t\tErrors: []error{\n\t\t\t\t\terrors.New(\"two\"),\n\t\t\t\t\t&Error{\n\t\t\t\t\t\tErrors: []error{\n\t\t\t\t\t\t\terrors.New(\"three\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\texpected := `3 errors occurred:\n\t* one\n\t* two\n\t* three\n\n`\n\tactual := fmt.Sprintf(\"%s\", Flatten(original))\n\n\tif expected != actual {\n\t\tt.Fatalf(\"expected: %s, got: %s\", expected, actual)\n\t}\n}\n\nfunc TestFlatten_nonError(t *testing.T) {\n\terr := errors.New(\"foo\")\n\tactual := Flatten(err)\n\tif !reflect.DeepEqual(actual, err) {\n\t\tt.Fatalf(\"bad: %#v\", actual)\n\t}\n}\n"
        },
        {
          "name": "format.go",
          "type": "blob",
          "size": 0.720703125,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// ErrorFormatFunc is a function callback that is called by Error to\n// turn the list of errors into a string.\ntype ErrorFormatFunc func([]error) string\n\n// ListFormatFunc is a basic formatter that outputs the number of errors\n// that occurred along with a bullet point list of the errors.\nfunc ListFormatFunc(es []error) string {\n\tif len(es) == 1 {\n\t\treturn fmt.Sprintf(\"1 error occurred:\\n\\t* %s\\n\\n\", es[0])\n\t}\n\n\tpoints := make([]string, len(es))\n\tfor i, err := range es {\n\t\tpoints[i] = fmt.Sprintf(\"* %s\", err)\n\t}\n\n\treturn fmt.Sprintf(\n\t\t\"%d errors occurred:\\n\\t%s\\n\\n\",\n\t\tlen(es), strings.Join(points, \"\\n\\t\"))\n}\n"
        },
        {
          "name": "format_test.go",
          "type": "blob",
          "size": 0.5986328125,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport (\n\t\"errors\"\n\t\"testing\"\n)\n\nfunc TestListFormatFuncSingle(t *testing.T) {\n\texpected := `1 error occurred:\n\t* foo\n\n`\n\n\terrors := []error{\n\t\terrors.New(\"foo\"),\n\t}\n\n\tactual := ListFormatFunc(errors)\n\tif actual != expected {\n\t\tt.Fatalf(\"bad: %#v\", actual)\n\t}\n}\n\nfunc TestListFormatFuncMultiple(t *testing.T) {\n\texpected := `2 errors occurred:\n\t* foo\n\t* bar\n\n`\n\n\terrors := []error{\n\t\terrors.New(\"foo\"),\n\t\terrors.New(\"bar\"),\n\t}\n\n\tactual := ListFormatFunc(errors)\n\tif actual != expected {\n\t\tt.Fatalf(\"bad: %#v\", actual)\n\t}\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.09375,
          "content": "module github.com/hashicorp/go-multierror\n\ngo 1.13\n\nrequire github.com/hashicorp/errwrap v1.1.0\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.1708984375,
          "content": "github.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=\ngithub.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\n"
        },
        {
          "name": "group.go",
          "type": "blob",
          "size": 0.8095703125,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport \"sync\"\n\n// Group is a collection of goroutines which return errors that need to be\n// coalesced.\ntype Group struct {\n\tmutex sync.Mutex\n\terr   *Error\n\twg    sync.WaitGroup\n}\n\n// Go calls the given function in a new goroutine.\n//\n// If the function returns an error it is added to the group multierror which\n// is returned by Wait.\nfunc (g *Group) Go(f func() error) {\n\tg.wg.Add(1)\n\n\tgo func() {\n\t\tdefer g.wg.Done()\n\n\t\tif err := f(); err != nil {\n\t\t\tg.mutex.Lock()\n\t\t\tg.err = Append(g.err, err)\n\t\t\tg.mutex.Unlock()\n\t\t}\n\t}()\n}\n\n// Wait blocks until all function calls from the Go method have returned, then\n// returns the multierror.\nfunc (g *Group) Wait() *Error {\n\tg.wg.Wait()\n\tg.mutex.Lock()\n\tdefer g.mutex.Unlock()\n\treturn g.err\n}\n"
        },
        {
          "name": "group_test.go",
          "type": "blob",
          "size": 0.9443359375,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport (\n\t\"errors\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestGroup(t *testing.T) {\n\terr1 := errors.New(\"group_test: 1\")\n\terr2 := errors.New(\"group_test: 2\")\n\n\tcases := []struct {\n\t\terrs      []error\n\t\tnilResult bool\n\t}{\n\t\t{errs: []error{}, nilResult: true},\n\t\t{errs: []error{nil}, nilResult: true},\n\t\t{errs: []error{err1}},\n\t\t{errs: []error{err1, nil}},\n\t\t{errs: []error{err1, nil, err2}},\n\t}\n\n\tfor _, tc := range cases {\n\t\tvar g Group\n\n\t\tfor _, err := range tc.errs {\n\t\t\terr := err\n\t\t\tg.Go(func() error { return err })\n\n\t\t}\n\n\t\tgErr := g.Wait()\n\t\tif gErr != nil {\n\t\t\tfor i := range tc.errs {\n\t\t\t\tif tc.errs[i] != nil && !strings.Contains(gErr.Error(), tc.errs[i].Error()) {\n\t\t\t\t\tt.Fatalf(\"expected error to contain %q, actual: %v\", tc.errs[i].Error(), gErr)\n\t\t\t\t}\n\t\t\t}\n\t\t} else if !tc.nilResult {\n\t\t\tt.Fatalf(\"Group.Wait() should not have returned nil for errs: %v\", tc.errs)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "multierror.go",
          "type": "blob",
          "size": 3.439453125,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\n// Error is an error type to track multiple errors. This is used to\n// accumulate errors in cases and return them as a single \"error\".\ntype Error struct {\n\tErrors      []error\n\tErrorFormat ErrorFormatFunc\n}\n\nfunc (e *Error) Error() string {\n\tfn := e.ErrorFormat\n\tif fn == nil {\n\t\tfn = ListFormatFunc\n\t}\n\n\treturn fn(e.Errors)\n}\n\n// ErrorOrNil returns an error interface if this Error represents\n// a list of errors, or returns nil if the list of errors is empty. This\n// function is useful at the end of accumulation to make sure that the value\n// returned represents the existence of errors.\nfunc (e *Error) ErrorOrNil() error {\n\tif e == nil {\n\t\treturn nil\n\t}\n\tif len(e.Errors) == 0 {\n\t\treturn nil\n\t}\n\n\treturn e\n}\n\nfunc (e *Error) GoString() string {\n\treturn fmt.Sprintf(\"*%#v\", *e)\n}\n\n// WrappedErrors returns the list of errors that this Error is wrapping. It is\n// an implementation of the errwrap.Wrapper interface so that multierror.Error\n// can be used with that library.\n//\n// This method is not safe to be called concurrently. Unlike accessing the\n// Errors field directly, this function also checks if the multierror is nil to\n// prevent a null-pointer panic. It satisfies the errwrap.Wrapper interface.\nfunc (e *Error) WrappedErrors() []error {\n\tif e == nil {\n\t\treturn nil\n\t}\n\treturn e.Errors\n}\n\n// Unwrap returns an error from Error (or nil if there are no errors).\n// This error returned will further support Unwrap to get the next error,\n// etc. The order will match the order of Errors in the multierror.Error\n// at the time of calling.\n//\n// The resulting error supports errors.As/Is/Unwrap so you can continue\n// to use the stdlib errors package to introspect further.\n//\n// This will perform a shallow copy of the errors slice. Any errors appended\n// to this error after calling Unwrap will not be available until a new\n// Unwrap is called on the multierror.Error.\nfunc (e *Error) Unwrap() error {\n\t// If we have no errors then we do nothing\n\tif e == nil || len(e.Errors) == 0 {\n\t\treturn nil\n\t}\n\n\t// If we have exactly one error, we can just return that directly.\n\tif len(e.Errors) == 1 {\n\t\treturn e.Errors[0]\n\t}\n\n\t// Shallow copy the slice\n\terrs := make([]error, len(e.Errors))\n\tcopy(errs, e.Errors)\n\treturn chain(errs)\n}\n\n// chain implements the interfaces necessary for errors.Is/As/Unwrap to\n// work in a deterministic way with multierror. A chain tracks a list of\n// errors while accounting for the current represented error. This lets\n// Is/As be meaningful.\n//\n// Unwrap returns the next error. In the cleanest form, Unwrap would return\n// the wrapped error here but we can't do that if we want to properly\n// get access to all the errors. Instead, users are recommended to use\n// Is/As to get the correct error type out.\n//\n// Precondition: []error is non-empty (len > 0)\ntype chain []error\n\n// Error implements the error interface\nfunc (e chain) Error() string {\n\treturn e[0].Error()\n}\n\n// Unwrap implements errors.Unwrap by returning the next error in the\n// chain or nil if there are no more errors.\nfunc (e chain) Unwrap() error {\n\tif len(e) == 1 {\n\t\treturn nil\n\t}\n\n\treturn e[1:]\n}\n\n// As implements errors.As by attempting to map to the current value.\nfunc (e chain) As(target interface{}) bool {\n\treturn errors.As(e[0], target)\n}\n\n// Is implements errors.Is by comparing the current value directly.\nfunc (e chain) Is(target error) bool {\n\treturn errors.Is(e[0], target)\n}\n"
        },
        {
          "name": "multierror_test.go",
          "type": "blob",
          "size": 3.9267578125,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestError_Impl(t *testing.T) {\n\tvar _ error = new(Error)\n}\n\nfunc TestErrorError_custom(t *testing.T) {\n\terrors := []error{\n\t\terrors.New(\"foo\"),\n\t\terrors.New(\"bar\"),\n\t}\n\n\tfn := func(es []error) string {\n\t\treturn \"foo\"\n\t}\n\n\tmulti := &Error{Errors: errors, ErrorFormat: fn}\n\tif multi.Error() != \"foo\" {\n\t\tt.Fatalf(\"bad: %s\", multi.Error())\n\t}\n}\n\nfunc TestErrorError_default(t *testing.T) {\n\texpected := `2 errors occurred:\n\t* foo\n\t* bar\n\n`\n\n\terrors := []error{\n\t\terrors.New(\"foo\"),\n\t\terrors.New(\"bar\"),\n\t}\n\n\tmulti := &Error{Errors: errors}\n\tif multi.Error() != expected {\n\t\tt.Fatalf(\"bad: %s\", multi.Error())\n\t}\n}\n\nfunc TestErrorErrorOrNil(t *testing.T) {\n\terr := new(Error)\n\tif err.ErrorOrNil() != nil {\n\t\tt.Fatalf(\"bad: %#v\", err.ErrorOrNil())\n\t}\n\n\terr.Errors = []error{errors.New(\"foo\")}\n\tif v := err.ErrorOrNil(); v == nil {\n\t\tt.Fatal(\"should not be nil\")\n\t} else if !reflect.DeepEqual(v, err) {\n\t\tt.Fatalf(\"bad: %#v\", v)\n\t}\n}\n\nfunc TestErrorWrappedErrors(t *testing.T) {\n\terrors := []error{\n\t\terrors.New(\"foo\"),\n\t\terrors.New(\"bar\"),\n\t}\n\n\tmulti := &Error{Errors: errors}\n\tif !reflect.DeepEqual(multi.Errors, multi.WrappedErrors()) {\n\t\tt.Fatalf(\"bad: %s\", multi.WrappedErrors())\n\t}\n\n\tmulti = nil\n\tif err := multi.WrappedErrors(); err != nil {\n\t\tt.Fatalf(\"bad: %#v\", multi)\n\t}\n}\n\nfunc TestErrorUnwrap(t *testing.T) {\n\tt.Run(\"with errors\", func(t *testing.T) {\n\t\terr := &Error{Errors: []error{\n\t\t\terrors.New(\"foo\"),\n\t\t\terrors.New(\"bar\"),\n\t\t\terrors.New(\"baz\"),\n\t\t}}\n\n\t\tvar current error = err\n\t\tfor i := 0; i < len(err.Errors); i++ {\n\t\t\tcurrent = errors.Unwrap(current)\n\t\t\tif !errors.Is(current, err.Errors[i]) {\n\t\t\t\tt.Fatal(\"should be next value\")\n\t\t\t}\n\t\t}\n\n\t\tif errors.Unwrap(current) != nil {\n\t\t\tt.Fatal(\"should be nil at the end\")\n\t\t}\n\t})\n\n\tt.Run(\"with no errors\", func(t *testing.T) {\n\t\terr := &Error{Errors: nil}\n\t\tif errors.Unwrap(err) != nil {\n\t\t\tt.Fatal(\"should be nil\")\n\t\t}\n\t})\n\n\tt.Run(\"with nil multierror\", func(t *testing.T) {\n\t\tvar err *Error\n\t\tif errors.Unwrap(err) != nil {\n\t\t\tt.Fatal(\"should be nil\")\n\t\t}\n\t})\n}\n\nfunc TestErrorIs(t *testing.T) {\n\terrBar := errors.New(\"bar\")\n\n\tt.Run(\"with errBar\", func(t *testing.T) {\n\t\terr := &Error{Errors: []error{\n\t\t\terrors.New(\"foo\"),\n\t\t\terrBar,\n\t\t\terrors.New(\"baz\"),\n\t\t}}\n\n\t\tif !errors.Is(err, errBar) {\n\t\t\tt.Fatal(\"should be true\")\n\t\t}\n\t})\n\n\tt.Run(\"with errBar wrapped by fmt.Errorf\", func(t *testing.T) {\n\t\terr := &Error{Errors: []error{\n\t\t\terrors.New(\"foo\"),\n\t\t\tfmt.Errorf(\"errorf: %w\", errBar),\n\t\t\terrors.New(\"baz\"),\n\t\t}}\n\n\t\tif !errors.Is(err, errBar) {\n\t\t\tt.Fatal(\"should be true\")\n\t\t}\n\t})\n\n\tt.Run(\"without errBar\", func(t *testing.T) {\n\t\terr := &Error{Errors: []error{\n\t\t\terrors.New(\"foo\"),\n\t\t\terrors.New(\"baz\"),\n\t\t}}\n\n\t\tif errors.Is(err, errBar) {\n\t\t\tt.Fatal(\"should be false\")\n\t\t}\n\t})\n}\n\nfunc TestErrorAs(t *testing.T) {\n\tmatch := &nestedError{}\n\n\tt.Run(\"with the value\", func(t *testing.T) {\n\t\terr := &Error{Errors: []error{\n\t\t\terrors.New(\"foo\"),\n\t\t\tmatch,\n\t\t\terrors.New(\"baz\"),\n\t\t}}\n\n\t\tvar target *nestedError\n\t\tif !errors.As(err, &target) {\n\t\t\tt.Fatal(\"should be true\")\n\t\t}\n\t\tif target == nil {\n\t\t\tt.Fatal(\"target should not be nil\")\n\t\t}\n\t})\n\n\tt.Run(\"with the value wrapped by fmt.Errorf\", func(t *testing.T) {\n\t\terr := &Error{Errors: []error{\n\t\t\terrors.New(\"foo\"),\n\t\t\tfmt.Errorf(\"errorf: %w\", match),\n\t\t\terrors.New(\"baz\"),\n\t\t}}\n\n\t\tvar target *nestedError\n\t\tif !errors.As(err, &target) {\n\t\t\tt.Fatal(\"should be true\")\n\t\t}\n\t\tif target == nil {\n\t\t\tt.Fatal(\"target should not be nil\")\n\t\t}\n\t})\n\n\tt.Run(\"without the value\", func(t *testing.T) {\n\t\terr := &Error{Errors: []error{\n\t\t\terrors.New(\"foo\"),\n\t\t\terrors.New(\"baz\"),\n\t\t}}\n\n\t\tvar target *nestedError\n\t\tif errors.As(err, &target) {\n\t\t\tt.Fatal(\"should be false\")\n\t\t}\n\t\tif target != nil {\n\t\t\tt.Fatal(\"target should be nil\")\n\t\t}\n\t})\n}\n\n// nestedError implements error and is used for tests.\ntype nestedError struct{}\n\nfunc (*nestedError) Error() string { return \"\" }\n"
        },
        {
          "name": "prefix.go",
          "type": "blob",
          "size": 0.84375,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/hashicorp/errwrap\"\n)\n\n// Prefix is a helper function that will prefix some text\n// to the given error. If the error is a multierror.Error, then\n// it will be prefixed to each wrapped error.\n//\n// This is useful to use when appending multiple multierrors\n// together in order to give better scoping.\nfunc Prefix(err error, prefix string) error {\n\tif err == nil {\n\t\treturn nil\n\t}\n\n\tformat := fmt.Sprintf(\"%s {{err}}\", prefix)\n\tswitch err := err.(type) {\n\tcase *Error:\n\t\t// Typed nils can reach here, so initialize if we are nil\n\t\tif err == nil {\n\t\t\terr = new(Error)\n\t\t}\n\n\t\t// Wrap each of the errors\n\t\tfor i, e := range err.Errors {\n\t\t\terr.Errors[i] = errwrap.Wrapf(format, e)\n\t\t}\n\n\t\treturn err\n\tdefault:\n\t\treturn errwrap.Wrapf(format, err)\n\t}\n}\n"
        },
        {
          "name": "prefix_test.go",
          "type": "blob",
          "size": 0.70703125,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport (\n\t\"errors\"\n\t\"testing\"\n)\n\nfunc TestPrefix_Error(t *testing.T) {\n\toriginal := &Error{\n\t\tErrors: []error{errors.New(\"foo\")},\n\t}\n\n\tresult := Prefix(original, \"bar\")\n\tif result.(*Error).Errors[0].Error() != \"bar foo\" {\n\t\tt.Fatalf(\"bad: %s\", result)\n\t}\n}\n\nfunc TestPrefix_NilError(t *testing.T) {\n\tvar err error\n\tresult := Prefix(err, \"bar\")\n\tif result != nil {\n\t\tt.Fatalf(\"bad: %#v\", result)\n\t}\n}\n\nfunc TestPrefix_NonError(t *testing.T) {\n\toriginal := errors.New(\"foo\")\n\tresult := Prefix(original, \"bar\")\n\tif result == nil {\n\t\tt.Fatal(\"error result was nil\")\n\t}\n\tif result.Error() != \"bar foo\" {\n\t\tt.Fatalf(\"bad: %s\", result)\n\t}\n}\n"
        },
        {
          "name": "sort.go",
          "type": "blob",
          "size": 0.5419921875,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\n// Len implements sort.Interface function for length\nfunc (err *Error) Len() int {\n\tif err == nil {\n\t\treturn 0\n\t}\n\n\treturn len(err.Errors)\n}\n\n// Swap implements sort.Interface function for swapping elements\nfunc (err Error) Swap(i, j int) {\n\terr.Errors[i], err.Errors[j] = err.Errors[j], err.Errors[i]\n}\n\n// Less implements sort.Interface function for determining order\nfunc (err Error) Less(i, j int) bool {\n\treturn err.Errors[i].Error() < err.Errors[j].Error()\n}\n"
        },
        {
          "name": "sort_test.go",
          "type": "blob",
          "size": 0.7333984375,
          "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: MPL-2.0\n\npackage multierror\n\nimport (\n\t\"errors\"\n\t\"reflect\"\n\t\"sort\"\n\t\"testing\"\n)\n\nfunc TestSortSingle(t *testing.T) {\n\terrFoo := errors.New(\"foo\")\n\n\texpected := []error{\n\t\terrFoo,\n\t}\n\n\terr := &Error{\n\t\tErrors: []error{\n\t\t\terrFoo,\n\t\t},\n\t}\n\n\tsort.Sort(err)\n\tif !reflect.DeepEqual(err.Errors, expected) {\n\t\tt.Fatalf(\"bad: %#v\", err)\n\t}\n}\n\nfunc TestSortMultiple(t *testing.T) {\n\terrBar := errors.New(\"bar\")\n\terrBaz := errors.New(\"baz\")\n\terrFoo := errors.New(\"foo\")\n\n\texpected := []error{\n\t\terrBar,\n\t\terrBaz,\n\t\terrFoo,\n\t}\n\n\terr := &Error{\n\t\tErrors: []error{\n\t\t\terrFoo,\n\t\t\terrBar,\n\t\t\terrBaz,\n\t\t},\n\t}\n\n\tsort.Sort(err)\n\tif !reflect.DeepEqual(err.Errors, expected) {\n\t\tt.Fatalf(\"bad: %#v\", err)\n\t}\n}\n"
        }
      ]
    }
  ]
}