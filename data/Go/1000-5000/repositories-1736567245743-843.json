{
  "metadata": {
    "timestamp": 1736567245743,
    "page": 843,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dolthub/go-mysql-server",
      "stars": 2382,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.416015625,
          "content": "enginetest/testdata/test1.txt binary\r\nenginetest/testdata/test2.csv binary\r\nenginetest/testdata/test3.csv binary\r\nenginetest/testdata/test3backwards.csv binary\r\nenginetest/testdata/test4.txt binary\r\nenginetest/testdata/test5.txt binary\r\nenginetest/testdata/test6.csv binary\r\nenginetest/testdata/test7.txt binary\r\nenginetest/testdata/test8.txt binary\r\nenginetest/testdata/test9.txt binary\r\nenginetest/testdata/test10.txt binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4375,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Compiled binaries\n_example/_example\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n# Tpc-h tbl files\nbenchmark/*tbl\nvendor\nMakefile.main\n.ci/\n_example/main\n_example/*.exe\ntest-server\n\n.idea/*\n/.vscode/\n\n# OSX Files\n.DS_Store\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 5.662109375,
          "content": "# Architecture overview\n\nThis document provides an overview of all parts and pieces of the\nproject as well as how they fit together. It is meant to help new\ncontributors understand where things may be, and how changes in some\ncomponents may interact with other components of the system.\n\n## Root package (`sqle`)\n\nThis is where the engine lives. The engine is the piece that\ncoordinates and makes all other pieces work together as well as the\nmain API users of the system will use to create and configure an\nengine and perform queries.\n\n## Engine tests\n\nEngine tests live in the `enginetest` package, and are written in a\nharnessed manner to allow integrators to run them on their own\ndatabase implementation. The `memory_engine_test.go` runs these tests\non the built-in in-memory database implementation in the `memory`\npackage.\n\n### How to add integration tests\n\nMost new features / bug fixes should be tested by adding a new test\nquery and expected results to the list in `queries.go`.\n\n## `sql`\n\nThis package is probably the most important of the project. It has\nseveral main roles:\n- Defines the main interfaces used in the rest of the packages `Node`,\n  `Expression`, ...\n- Provides implementations of components used in the rest of the\n  packages `Row`, `Context`, `ProcessList`, `Catalog`, ...\n- Defines the `information_schema` database, which is a special\n  database and contains some information about the schemas of other\n  tables.\n\n### `sql/analyzer`\n\nThe analyzer is the most complex component of the project. The\nanalyzer takes the parsed query plan and transforms it into an\nexecution plan by running a series of rules. These rules do many\nthings, such as resolve tables and columns, removing redundant data,\noptimizing things for performance, etc.\n\nThere are several phases on the analyzer, because some rules need to\nbe run before others, some need to be executed several times, other\njust once, etc.  Inside `rules.go` are all the default rules and the\nphases in which they're executed.\n\nOn top of that, all available rules are defined in this package. Each\nrule has a specific role in the analyzer. Rules should be as small and\natomic as possible and try to do only one job and always produce a\ntree that is as resolved as the one it received or more.\n\n### `sql/expression`\n\nThis package includes the implementation of all the SQL expressions\navailable in go-mysql-server, except functions. Arithmetic operators,\nlogic operators, conversions, etc are implemented here.\n\nInside `registry.go` there is a registry of all the default functions,\neven if they're not defined here.\n\n### `sql/expression/function`\n\nImplementation of all the functions available in go-mysql-server.\n\n### `sql/expression/function/aggregation`\n\nImplementation of all the aggregation functions available in\ngo-mysql-server.\n\n### `sql/parse`\n\nThis package exposes the `Parse` function, which parses a SQL query\nand translates it into a query plan.\n\nParsing is done using `vitess` parser with a few custom additions for\nnon-standard syntax.\n\n### `sql/plan`\n\nAll the different nodes of the execution plan (except for very\nspecific nodes used in some optimisation rules) are defined here.\n\nFor example, `SELECT foo FROM bar` is translated into the following\nplan:\n\n```\nProject(foo)\n |- Table(bar)\n```\n\nWhich means, the execution plan is a `Project` node projecting `foo`\nand has a `ResolvedTable`, which is `bar` as its children.\n\nEach node inside this package implements at least the `sql.Node`\ninterface, but it can implement more. `sql.Expressioner`, for example.\n\nAlong with the nodes, `Inspect` and `Walk` functions are provided as\nutilities to inspect an execution tree.\n\n## `server`\n\nContains all the code to turn an engine into a runnable server that\ncan communicate using the MySQL wire protocol.\n\n## `auth`\n\nThis package contains all the code related to the audit log,\nauthentication and permission management in go-mysql-server.\n\nThere are two authentication methods:\n- **None:** no authentication needed.\n- **Native:** authentication performed with user and password. Read,\n  write or all permissions can be specified for those users. It can\n  also be configured using a JSON file.\n\n## `internal/similartext`\n\nContains a function to `Find` the most similar name from an array to a\ngiven one using the Levenshtein distance algorithm. Used for\nsuggestions on errors.\n\n## `_integration`\n\nTo ensure compatibility with some clients, there is a small example\nconnecting and querying a go-mysql-server server from those\nclients. Each folder corresponds to a different client.\n\nFor more info about supported clients see\n[SUPPORTED_CLIENTS.md](/SUPPORTED_CLIENTS.md).\n\nThese integrations tests can be run using this command:\n\n```\nmake TEST=${CLIENT FOLDER NAME} integration\n```\n\nIt will take care of setting up the test server and shutting it down.\n\n## `_example`\n\nA small example of how to use go-mysql-server to create a server and\nrun it.\n\n# Connecting the dots\n\n`server` uses the engine defined in `sql`.\n\nEngine uses audit logs and authentication defined in `auth`, parses\nusing `sql/parse` to convert a query into a query plan, with nodes\ndefined in `sql/plan` and expressions defined in `sql/expression`,\n`sql/expression/function` and `sql/expression/function/aggregation`.\n\nAfter parsing, the obtained query plan is analyzed using the analyzer\ndefined in `sql/analyzer` and its rules to resolve tables, fields,\ndatabases, apply optimisation rules, etc.\n\nIf indexes can be used, the analyzer will transform the query so it\nuses indexes (either supplied natively by tables or provided by an\nexternal driver).\n\nOnce the plan is analyzed, it will be executed recursively from the\ntop of the tree to the bottom to obtain the results and they will be\nsent back to the client using the MySQL wire protocol.\n"
        },
        {
          "name": "BACKEND.md",
          "type": "blob",
          "size": 5.9423828125,
          "content": "# Custom backend integration guide\n\nThis is the guide for creating a new backend to query with\n**go-mysql-server**.\n\n## Core interfaces\n\nTo create your own data source implementation you need to implement\nthe following interfaces:\n\n- `sql.DatabaseProvider`. This interface allows the engine to find\n  available databases. You can also unlock addtional functionality by\n  optionally implementing additional interfaces:\n  - `sql.MutableDatabaseProvider` to support creating and dropping\n    databases.\n  - `sql.CollatedDatabaseProvider` to support database-level\n    collations.\n- `sql.Database`. These are returned by your\n  `sql.DatabaseProvider`. The main job of `sql.Database` is to provide\n  tables from your data source. You can also implement other\n  interfaces on your database to unlock additional functionality:\n  - `sql.TableCreator` to support creating new tables\n  - `sql.TableDropper` to support dropping  tables\n  - `sql.TableRenamer` to support renaming tables\n  - `sql.ViewCreator` to support creating persisted views on your tables\n  - `sql.ViewDropper` to support dropping persisted views\n- `sql.Table`. This interface will provide rows of values from your\n  data source. You can also implement other interfaces on your table\n  to unlock additional functionality:\n  - `sql.InsertableTable` to allow your data source to be updated with\n    `INSERT` statements.\n  - `sql.UpdateableTable` to allow your data source to be updated with\n    `UPDATE` statements.\n  - `sql.DeletableTable` to allow your data source to be updated with\n    `DELETE` statements.\n  - `sql.ReplaceableTable` to allow your data source to be updated with\n    `REPLACE` statements.\n  - `sql.AlterableTable` to allow your data source to have its schema\n    modified by adding, dropping, and altering columns.\n  - `sql.IndexedTable` to declare your table's native indexes to speed\n    up query execution.\n  - `sql.IndexAlterableTable` to accept the creation of new native\n    indexes.\n  - `sql.ForeignKeyAlterableTable` to signal your support of foreign\n    key constraints in your table's schema and data.\n  - `sql.ProjectedTable` to return rows that only contain a subset of\n    the columns in the table. This can make query execution faster.\n  - `sql.FilteredTable` to filter the rows returned by your table to\n    those matching a given expression. This can make query execution\n    faster (if your table implementation can filter rows more\n    efficiently than checking an expression on every row in a table).\n    \nThis is not a complete list, but should be enough to get you started\non a full backend implementation. For an example of implementing these\ninterfaces, see the `memory` package.\n\n## Sessions and transactions\n\nMany backend implementations will be able to re-use the\n`sql.BaseSession` object for sessioned access to databases. This\nshould be the case for all read-only database implementations.\nHowever, some backends may need to store session information\nparticular to that backend, e.g. open data files that have yet to be\nwritten. Such integrators should implement their own `sql.Session`\nimplementation, and probably should embed `sql.BaseSession` in it to\nmake that easier.\n\nBackends that want transactional semantics for their queries must also\nimplement `sql.TransactionSession` in their session object and provide\na corresponding `sql.Transaction` implementation. The details of doing\nso are necessarily very specific to a particular backend and are\nbeyond the scope of this guide.\n\n## Native indexes\n\nTables can declare that they support native indexes. The `memory`\npackage contains an example of this behavior, but please note that it\nis only for example purposes and doesn't actually make queries faster\n(although we could change this in the future).\n\nIntegrators should implement the `sql.IndexedTable` interface to\ndeclare which indexes their tables support and provide a means of\nreturning a subset of the rows. The job of your `sql.Index`\nimplementation is to accept or reject combinations of `sql.Range`\nexpressions that it can support, which will be used by the engine to\nconstruct a `sql.IndexLookup` struct to provide to your\n`sql.IndexedTable` implementation.\n\n## Custom index driver implementation\n\nIndex drivers are separate backends for storing and querying indexes,\nwithout the need for a table to store and query its own native\nindexes. To implement a custom index driver you need to implement a\nfew things:\n\n- `sql.IndexDriver` interface, which will be the driver itself. Not\n  that your driver must return an unique ID in the `ID` method. This\n  ID is unique for your driver and should not clash with any other\n  registered driver. It's the driver's responsibility to be fault\n  tolerant and be able to automatically detect and recover from\n  corruption in indexes.\n- `sql.Index` interface, returned by your driver when an index is\n  loaded or created.\n- `sql.IndexValueIter` interface, which will be returned by your\n  `sql.IndexLookup` and should return the values of the index.\n- Don't forget to register the index driver in your `sql.Context`\n  using `context.RegisterIndexDriver(mydriver)` to be able to use it.\n\nTo create indexes using your custom index driver you need to use\nextension syntax `USING driverid` on the index creation statement. For\nexample:\n\n```sql\nCREATE INDEX foo ON table USING driverid (col1, col2)\n```\n\n**go-mysql-server** does not provide a production index driver\nimplementation. We previously provided a pilosa implementation, but\nremoved it due to the difficulty of supporting it on all platforms\n(pilosa doesn't work on Windows).\n\nYou can see an example of a driver implementation in the memory\npackage.\n\n## Testing your backend implementation\n\n**go-mysql-server** provides a suite of engine tests that you can use\nto validate that your implementation works as expected. See the\n`enginetest` package for details and examples.\n\nIt's also possible and encouraged to write engine tests that are\nspecific to your backend. This is especially important when\nimplementing transactions, which the in-memory backend doesn't\nsupport.\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.072265625,
          "content": "# Dolthub Inc. Contributing Guidelines\n\nDolthub Inc. projects accept contributions via GitHub pull requests.\n\n## Support Channel\n\nThe official support channel, for both users and contributors, is\nGitHub issues. You can also talk to engineers on the [Dolt Discord\nserver](https://discord.com/invite/RFwfYpu).\n\n## How to Contribute\n\nPull Requests (PRs) are the exclusive way to contribute code to\ngo-mysql-server. We also welcome new issues with steps to reproduce a\nproblem. We may transfer issues that also affect\n[Dolt](https://github.com/dolthub/dolt) to that repo, since it is our\nprimary backlog.\n\n- PRs should include tests.\n- If the PR is a bug fix, it should include a new unit test that fails\n  before the patch is merged.\n- If the PR is a new feature, should have unit tests of the new\n  functionality.\n- All contributions should include at least one end-to-end test in the\n  `enginetest` package. Typically this is just a new query with\n  expected results added to one of the large files of such queries in\n  the `queries` package.\n  \nIf you're confused, look at merged PRs for examples.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.1357421875,
          "content": "Zach Musgrave <zach@dolthub.com> (@zachmu)\nDaylon Wilkins <daylon@dolthub.com> (@hydrocharged)\nMax Hoffman <max@dolthub.com> (@max-hoffman)"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.5341796875,
          "content": "# Package configuration\nPROJECT = go-mysql-server\nCOMMANDS =\nUNAME_S := $(shell uname -s)\n\n# Including ci Makefile\nCI_REPOSITORY ?= https://github.com/src-d/ci.git\nCI_BRANCH ?= v1\nCI_PATH ?= .ci\nMAKEFILE := $(CI_PATH)/Makefile.main\n$(MAKEFILE):\n\tgit clone --quiet --depth 1 -b $(CI_BRANCH) $(CI_REPOSITORY) $(CI_PATH);\n-include $(MAKEFILE)\n\nintegration:\n\t./_integration/run ${TEST}\n\noniguruma:\nifeq ($(UNAME_S),Linux)\n\t$(shell apt-get install libonig-dev)\nendif\n\nifeq ($(UNAME_S),Darwin)\n\t$(shell brew install oniguruma)\nendif\n\n.PHONY: integration"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.3515625,
          "content": "<img height=\"240\" src=\"./mascot.png\"/>\n\n# A MySQL compatible database engine written in pure Go\n\n**go-mysql-server** is a data-source agnostic SQL engine and server\nwhich runs queries on data sources you provide, using the MySQL\ndialect and wire protocol. A simple in-memory database implementation\nis included, and you can query any data source you want by\nimplementing your own backend.\n\n[Dolt](https://www.doltdb.com), a SQL database with Git-style\nversioning, is the main production database implementation of this\npackage.  [Check\nout](https://docs.dolthub.com/introduction/what-is-dolt) that project\nfor a reference implementation. Or, hop into the Dolt Discord server\n[here](https://discord.com/invite/RFwfYpu) if you want to talk to the\n[core developers](https://www.dolthub.com/team) behind\n**go-mysql-server** and Dolt.\n\n## Compatibility\n\nWith the exception of specific limitations (see below),\n**go-mysql-server** is a drop-in replacement for MySQL. Any client\nlibrary, tool, query, SQL syntax, SQL function, etc. that works with\nMySQL should also work with **go-mysql-server**. If you find a gap in\nfunctionality, please file an issue.\n\nFor full MySQL compatibility documentation, see the [Dolt\ndocs](https://docs.dolthub.com/sql-reference/sql-support) on this\ntopic.\n\n## Scope of this project\n\n- SQL server and engine to query your data sources.\n- In-memory database backend implementation suitable for use in tests.\n- Interfaces you can use to implement new backends to query your own\n  data sources.\n- With a few caveats and using a full database implementation, a\n  drop-in MySQL database replacement.\n\n**go-mysql-server** has two primary uses case:\n\n1. Stand-in for MySQL in a golang test environment, using the built-in\n   `memory` database implementation.\n\n2. Providing access to arbitrary data sources with SQL queries by\n   implementing a handful of interfaces. The most complete real-world\n   implementation is [Dolt](https://github.com/dolthub/dolt).\n\n## Installation\n\nAdd **go-mysql-server** as a dependency to your project. In the\ndirectory with the `go.mod` file, run:\n\n```\ngo get github.com/dolthub/go-mysql-server@latest\n```\n\n## Using the in-memory test server\n\nThe in-memory test server can replace a real MySQL server in\ntests. Start the server using the code in the [_example\ndirectory](_example/main.go), also reproduced below.\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/dolthub/vitess/go/vt/proto/query\"\n\n\tsqle \"github.com/dolthub/go-mysql-server\"\n\t\"github.com/dolthub/go-mysql-server/memory\"\n\t\"github.com/dolthub/go-mysql-server/server\"\n\t\"github.com/dolthub/go-mysql-server/sql\"\n\t\"github.com/dolthub/go-mysql-server/sql/types\"\n)\n\n// This is an example of how to implement a MySQL server.\n// After running the example, you may connect to it using the following:\n//\n// > mysql --host=localhost --port=3306 --user=root mydb --execute=\"SELECT * FROM mytable;\"\n// +----------+-------------------+-------------------------------+----------------------------+\n// | name     | email             | phone_numbers                 | created_at                 |\n// +----------+-------------------+-------------------------------+----------------------------+\n// | Jane Deo | janedeo@gmail.com | [\"556-565-566\",\"777-777-777\"] | 2022-11-01 12:00:00.000001 |\n// | Jane Doe | jane@doe.com      | []                            | 2022-11-01 12:00:00.000001 |\n// | John Doe | john@doe.com      | [\"555-555-555\"]               | 2022-11-01 12:00:00.000001 |\n// | John Doe | johnalt@doe.com   | []                            | 2022-11-01 12:00:00.000001 |\n// +----------+-------------------+-------------------------------+----------------------------+\n//\n// The included MySQL client is used in this example, however any MySQL-compatible client will work.\n\nvar (\n\tdbName    = \"mydb\"\n\ttableName = \"mytable\"\n\taddress   = \"localhost\"\n\tport      = 3306\n)\n\nfunc main() {\n\tpro := createTestDatabase()\n\tengine := sqle.NewDefault(pro)\n\n\tsession := memory.NewSession(sql.NewBaseSession(), pro)\n\tctx := sql.NewContext(context.Background(), sql.WithSession(session))\n\tctx.SetCurrentDatabase(dbName)\n\n\t// This variable may be found in the \"users_example.go\" file. Please refer to that file for a walkthrough on how to\n\t// set up the \"mysql\" database to allow user creation and user checking when establishing connections. This is set\n\t// to false for this example, but feel free to play around with it and see how it works.\n\tif enableUsers {\n\t\tif err := enableUserAccounts(ctx, engine); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n\tconfig := server.Config{\n\t\tProtocol: \"tcp\",\n\t\tAddress:  fmt.Sprintf(\"%s:%d\", address, port),\n\t}\n\ts, err := server.NewServer(config, engine, memory.NewSessionBuilder(pro), nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err = s.Start(); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc createTestDatabase() *memory.DbProvider {\n\tdb := memory.NewDatabase(dbName)\n\tdb.BaseDatabase.EnablePrimaryKeyIndexes()\n\n\tpro := memory.NewDBProvider(db)\n\tsession := memory.NewSession(sql.NewBaseSession(), pro)\n\tctx := sql.NewContext(context.Background(), sql.WithSession(session))\n\n\ttable := memory.NewTable(db, tableName, sql.NewPrimaryKeySchema(sql.Schema{\n\t\t{Name: \"name\", Type: types.Text, Nullable: false, Source: tableName, PrimaryKey: true},\n\t\t{Name: \"email\", Type: types.Text, Nullable: false, Source: tableName, PrimaryKey: true},\n\t\t{Name: \"phone_numbers\", Type: types.JSON, Nullable: false, Source: tableName},\n\t\t{Name: \"created_at\", Type: types.MustCreateDatetimeType(query.Type_DATETIME, 6), Nullable: false, Source: tableName},\n\t}), db.GetForeignKeyCollection())\n\tdb.AddTable(tableName, table)\n\n\tcreationTime := time.Unix(0, 1667304000000001000).UTC()\n\t_ = table.Insert(ctx, sql.NewRow(\"Jane Deo\", \"janedeo@gmail.com\", types.MustJSON(`[\"556-565-566\", \"777-777-777\"]`), creationTime))\n\t_ = table.Insert(ctx, sql.NewRow(\"Jane Doe\", \"jane@doe.com\", types.MustJSON(`[]`), creationTime))\n\t_ = table.Insert(ctx, sql.NewRow(\"John Doe\", \"john@doe.com\", types.MustJSON(`[\"555-555-555\"]`), creationTime))\n\t_ = table.Insert(ctx, sql.NewRow(\"John Doe\", \"johnalt@doe.com\", types.MustJSON(`[]`), creationTime))\n\n\treturn pro\n}\n```\n\nThis example populates the database by creating `memory.Database` and\n`memory.Table` objects via golang code, but you can also populate it\nby issuing `CREATE DATABASE`, `CREATE TABLE`, etc. statements to the\nserver once it's running.\n\nOnce the server is running, connect with any MySQL client, including\nthe golang MySQL connector and the `mysql` shell.\n\n```bash\n> mysql --host=localhost --port=3306 --user=root mydb --execute=\"SELECT * FROM mytable;\"\n+----------+-------------------+-------------------------------+----------------------------+\n| name     | email             | phone_numbers                 | created_at                 |\n+----------+-------------------+-------------------------------+----------------------------+\n| Jane Deo | janedeo@gmail.com | [\"556-565-566\",\"777-777-777\"] | 2022-11-01 12:00:00.000001 |\n| Jane Doe | jane@doe.com      | []                            | 2022-11-01 12:00:00.000001 |\n| John Doe | john@doe.com      | [\"555-555-555\"]               | 2022-11-01 12:00:00.000001 |\n| John Doe | johnalt@doe.com   | []                            | 2022-11-01 12:00:00.000001 |\n+----------+-------------------+-------------------------------+----------------------------+\n```\n\n## Limitations of the in-memory database implementation\n\nThe in-memory database implementation included with this package is\nintended for use in tests. It has specific limitations that we know\nof:\n\n- [Not\n  threadsafe](https://github.com/dolthub/go-mysql-server/issues/1306). To\n  avoid concurrency issues, limit DDL and DML statements (`CREATE\n  TABLE`, `INSERT`, etc.) to a single goroutine.\n- [No transaction\n  support](https://github.com/dolthub/go-mysql-server/issues/1506). Statements\n  like `START TRANSACTION`, `ROLLBACK`, and `COMMIT` are no-ops.\n- [Non-performant index\n  implementation](https://github.com/dolthub/go-mysql-server/issues/1347). Indexed\n  lookups and joins perform full table scans on the underlying tables.\n\n## Custom backend implementations\n\nYou can create your own backend to query your own data sources by\nimplementing some interfaces. For detailed instructions, see the\n[backend guide](./BACKEND.md).\n\n## Technical documentation for contributors and backend developers\n\n- [Architecture](./ARCHITECTURE.md) is an overview of the various\n  packages of the project and how they fit together.\n- [Contribution guide](./CONTRIBUTING.md) for new contributors,\n  including instructions for how to get your PR merged.\n\n## Powered by go-mysql-server\n\n* [dolt](https://github.com/dolthub/dolt)\n* [gitbase](https://github.com/src-d/gitbase) (defunct)\n\nAre you building a database backend using **go-mysql-server**? We\nwould like to hear from you and include you in this list.\n\n## Security Policy\n\n[go-mysql-server's security\npolicy](https://github.com/dolthub/go-mysql-server/blob/main/SECURITY.md) is\nmaintained in this repository. Please follow the disclosure instructions there.\nPlease do not initially report security issues in this repository's public\nGitHub issues.\n\n## Acknowledgements\n\n**go-mysql-server** was originally developed by the `{source-d}`\norganzation, and this repository was originally forked from\n[src-d](https://github.com/src-d/go-mysql-server). We want to thank\nthe entire `{source-d}` development team for their work on this\nproject, especially Miguel Molina (@erizocosmico) and Juanjo Álvarez\nMartinez (@juanjux).\n\n## License\n\nApache License 2.0, see [LICENSE](/LICENSE)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.80859375,
          "content": "# Security Policy\n\n## Supported Versions\n\nThis repository receives periodic releases, but is mostly consumed at specific\nGit commits. By default, the tip of `main` is the release artifact which is\nsupported for all security updates. For impactful security fixes, new released\nversions will also be created. If you need ongoing security support for an\nolder version of go-mysql-server, please [contact\nDoltHub](https://www.dolthub.com/contact), the company behind this project.\n\n## Reporting a Vulnerability\n\nAny security issues with go-mysql-server can be reported to [security@dolthub.com](security@dolthub.com).\n\nReports will be responded to within one business day. The majority of\nour team operates on Pacific Time and on a US holiday schedule.\n\nDoltHub does not currently run a security bounty program for go-mysql-server.\n"
        },
        {
          "name": "SUPPORTED_CLIENTS.md",
          "type": "blob",
          "size": 5.7138671875,
          "content": "# Supported clients\n\nThese are the clients we actively test against to check that they are\ncompatible with go-mysql-server. Other clients may also work, but we\ndon't check on every build if we remain compatible with them.\n\n- Python\n  - [pymysql](#pymysql)\n  - [mysql-connector](#python-mysql-connector)\n  - [sqlalchemy](#python-sqlalchemy)\n- Ruby\n  - [ruby-mysql](#ruby-mysql)\n- [PHP](#php)\n- Node.js\n  - [mysqljs/mysql](#mysqljs)\n- .NET Core\n  - [MysqlConnector](#mysqlconnector)\n- Java/JVM\n  - [mariadb-java-client](#mariadb-java-client)\n- Go\n  - [go-mysql-driver/mysql](#go-sql-drivermysql)\n- C\n  - [mysql-connector-c](#mysql-connector-c)\n- Grafana\n- Tableau Desktop\n\n## Example client usage\n\n### pymysql\n\n```python\nimport pymysql.cursors\n\nconnection = pymysql.connect(host='127.0.0.1',\n                             user='root',\n                             password='',\n                             db='mydb',\n                             cursorclass=pymysql.cursors.DictCursor)\n\ntry:\n    with connection.cursor() as cursor:\n        sql = \"SELECT * FROM mytable LIMIT 1\"\n        cursor.execute(sql)\n        rows = cursor.fetchall()\n\n        # use rows\nfinally:\n    connection.close()\n```\n\n### Python mysql-connector\n\n```python\nimport mysql.connector\n\nconnection = mysql.connector.connect(host='127.0.0.1',\n                                user='root',\n                                passwd='',\n                                port=3306,\n                                database='mydb')\n\ntry:\n    cursor = connection.cursor()\n    sql = \"SELECT * FROM mytable LIMIT 1\"\n    cursor.execute(sql)\n    rows = cursor.fetchall()\n\n    # use rows\nfinally:\n    connection.close()\n```\n\n### Python sqlalchemy\n\n```python\nimport pandas as pd\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine('mysql+pymysql://root:@127.0.0.1:3306/mydb')\nwith engine.connect() as conn:\n     repo_df = pd.read_sql_table(\"mytable\", con=conn)\n     for table_name in repo_df.to_dict():\n        print(table_name)\n```\n\n### ruby-mysql\n\n```ruby\nrequire \"mysql\"\n\nconn = Mysql::new(\"127.0.0.1\", \"root\", \"\", \"mydb\")\nresp = conn.query \"SELECT * FROM mytable LIMIT 1\"\n\n# use resp\n\nconn.close()\n```\n\n### php\n\n```php\ntry {\n    $conn = new PDO(\"mysql:host=127.0.0.1:3306;dbname=mydb\", \"root\", \"\");\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $stmt = $conn->query('SELECT * FROM mytable LIMIT 1');\n    $result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n    // use result\n} catch (PDOException $e) {\n    // handle error\n}\n```\n\n### mysqljs\n\n```js\nimport mysql from 'mysql';\n\nconst connection = mysql.createConnection({\n    host: '127.0.0.1',\n    port: 3306,\n    user: 'root',\n    password: '',\n    database: 'mydb'\n});\nconnection.connect();\n\nconst query = 'SELECT * FROM mytable LIMIT 1';\nconnection.query(query, function (error, results, _) {\n    if (error) throw error;\n\n    // use results\n});\n\nconnection.end();\n```\n\n### MysqlConnector\n\n```csharp\nusing MySql.Data.MySqlClient;\nusing System.Threading.Tasks;\n\nnamespace something\n{\n    public class Something\n    {\n        public async Task DoQuery()\n        {\n            var connectionString = \"server=127.0.0.1;user id=root;password=;port=3306;database=mydb;\";\n\n            using (var conn = new MySqlConnection(connectionString))\n            {\n                await conn.OpenAsync();\n\n                var sql = \"SELECT * FROM mytable LIMIT 1\";\n\n                using (var cmd = new MySqlCommand(sql, conn))\n                using (var reader = await cmd.ExecuteReaderAsync())\n                while (await reader.ReadAsync()) {\n                    // use reader\n                }\n            }\n        }\n    }\n}\n```\n\n### mariadb-java-client\n\n```java\npackage org.testing.mariadbjavaclient;\n\nimport java.sql.*;\n\nclass Main {\n    public static void main(String[] args) {\n        String dbUrl = \"jdbc:mariadb://127.0.0.1:3306/mydb?user=root&password=\";\n        String query = \"SELECT * FROM mytable LIMIT 1\";\n\n        try (Connection connection = DriverManager.getConnection(dbUrl)) {\n            try (PreparedStatement stmt = connection.prepareStatement(query)) {\n                try (ResultSet rs = stmt.executeQuery()) {\n                    while (rs.next()) {\n                        // use rs\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            // handle failure\n        }\n    }\n}\n```\n\n### go-sql-driver/mysql\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n    db, err := sql.Open(\"mysql\", \"root:@tcp(127.0.0.1:3306)/mydb\")\n\tif err != nil {\n\t\t// handle error\n\t}\n\n\trows, err := db.Query(\"SELECT * FROM mytable LIMIT 1\")\n\tif err != nil {\n\t\t// handle error\n    }\n\n    // use rows\n}\n```\n\n### mysql-connector-c\n\n```c\n#include <my_global.h>\n#include <mysql.h>\n\nvoid finish_with_error(MYSQL *con)\n{\n    fprintf(stderr, \"%s\\n\", mysql_error(con));\n    mysql_close(con);\n    exit(1);\n}\n\nint main(int argc, char **argv)\n{\n    MYSQL *con = NULL;\n    MYSQL_RES *result = NULL;\n    int num_fields = 0;\n    MYSQL_ROW row;\n\n    printf(\"MySQL client version: %s\\n\", mysql_get_client_info());\n\n    con = mysql_init(NULL);\n    if (con == NULL) {\n        finish_with_error(con);\n    }\n\n    if (mysql_real_connect(con, \"127.0.0.1\", \"root\", \"\", \"mydb\", 3306, NULL, 0) == NULL) {\n        finish_with_error(con);\n    }\n\n    if (mysql_query(con, \"SELECT name, email, phone_numbers FROM mytable\")) {\n        finish_with_error(con);\n    }\n\n    result = mysql_store_result(con);\n    if (result == NULL) {\n        finish_with_error(con);\n    }\n\n    num_fields = mysql_num_fields(result);\n    while ((row = mysql_fetch_row(result))) {\n        for(int i = 0; i < num_fields; i++) {\n            printf(\"%s \", row[i] ? row[i] : \"NULL\");\n        }\n        printf(\"\\n\");\n    }\n\n    mysql_free_result(result);\n    mysql_close(con);\n\n    return 0;\n}\n```\n"
        },
        {
          "name": "_example",
          "type": "tree",
          "content": null
        },
        {
          "name": "_integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "check_repo.sh",
          "type": "blob",
          "size": 0.8994140625,
          "content": "#!/bin/bash\n\nset -eo pipefail\n\ngo mod download golang.org/x/tools\ngo install golang.org/x/tools/cmd/goimports\n\npaths=`find . -maxdepth 1 -mindepth 1 \\( -name gen -prune -o -type d -print -o -type f -name '*.go' -print \\)`\n\nbad_files=$(goimports -l -local github.com/dolthub/dolt $paths)\nif [ \"$bad_files\" != \"\" ]; then\n    echo \"ERROR: The following files do not match goimports output:\"\n    echo \"$bad_files\"\n    echo\n    echo \"Please format the go code in the repository with 'format_repo.sh'\"\n    exit 1\nfi\n\nbad_files=$(find $paths -name '*.go' | while read f; do\n    if [[ $(awk '/import \\(/{flag=1;next}/\\)/{flag=0}flag' < $f | egrep -c '$^') -gt 2 ]]; then\n        echo $f\n    fi\ndone)\n\nif [ \"$bad_files\" != \"\" ]; then\n    echo \"ERROR: The following files have more than three import groups:\"\n    echo \"$bad_files\"\n    echo\n    echo \"Please format the go code in the repository with 'format_repo.sh'\"\n    exit 1\nfi\n"
        },
        {
          "name": "driver",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine.go",
          "type": "blob",
          "size": 28.017578125,
          "content": "// Copyright 2020-2021 Dolthub, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage sqle\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\t\"github.com/dolthub/vitess/go/sqltypes\"\n\tquerypb \"github.com/dolthub/vitess/go/vt/proto/query\"\n\t\"github.com/dolthub/vitess/go/vt/sqlparser\"\n\t\"github.com/pkg/errors\"\n\n\t\"github.com/dolthub/go-mysql-server/eventscheduler\"\n\t\"github.com/dolthub/go-mysql-server/sql\"\n\t\"github.com/dolthub/go-mysql-server/sql/analyzer\"\n\t\"github.com/dolthub/go-mysql-server/sql/expression\"\n\t\"github.com/dolthub/go-mysql-server/sql/expression/function\"\n\t\"github.com/dolthub/go-mysql-server/sql/plan\"\n\t\"github.com/dolthub/go-mysql-server/sql/planbuilder\"\n\t\"github.com/dolthub/go-mysql-server/sql/rowexec\"\n\t\"github.com/dolthub/go-mysql-server/sql/transform\"\n\t\"github.com/dolthub/go-mysql-server/sql/types\"\n\t\"github.com/dolthub/go-mysql-server/sql/variables\"\n\t_ \"github.com/dolthub/go-mysql-server/sql/variables\"\n)\n\nconst experimentalFlag = \"GMS_EXPERIMENTAL\"\n\nvar ExperimentalGMS bool\n\nfunc init() {\n\tExperimentalGMS = os.Getenv(experimentalFlag) != \"\"\n}\n\n// Config for the Engine.\ntype Config struct {\n\t// VersionPostfix to display with the `VERSION()` UDF.\n\tVersionPostfix string\n\t// IsReadOnly sets the engine to disallow modification queries.\n\tIsReadOnly     bool\n\tIsServerLocked bool\n\t// IncludeRootAccount adds the root account (with no password) to the list of accounts, and also enables\n\t// authentication.\n\tIncludeRootAccount bool\n\t// TemporaryUsers adds any users that should be included when the engine is created. By default, authentication is\n\t// disabled, and including any users here will enable authentication. All users in this list will have full access.\n\t// This field is only temporary, and will be removed as development on users and authentication continues.\n\tTemporaryUsers []TemporaryUser\n}\n\n// TemporaryUser is a user that will be added to the engine. This is for temporary use while the remaining features\n// are implemented. Replaces the old \"auth.New...\" functions for adding a user.\ntype TemporaryUser struct {\n\tUsername string\n\tPassword string\n}\n\n// PreparedDataCache manages all the prepared data for every session for every query for an engine.\n// There are two types of caching supported:\n// 1. Prepared statements for MySQL, which are stored as sqlparser.Statements\n// 2. Prepared statements for Postgres, which are stored as sql.Nodes\n// TODO: move this into the session\ntype PreparedDataCache struct {\n\tstatements map[uint32]map[string]sqlparser.Statement\n\tmu         *sync.Mutex\n}\n\nfunc NewPreparedDataCache() *PreparedDataCache {\n\treturn &PreparedDataCache{\n\t\tstatements: make(map[uint32]map[string]sqlparser.Statement),\n\t\tmu:         &sync.Mutex{},\n\t}\n}\n\n// GetCachedStmt retrieves the prepared statement associated with the ctx.SessionId and query. Returns nil, false if\n// the query does not exist\nfunc (p *PreparedDataCache) GetCachedStmt(sessId uint32, query string) (sqlparser.Statement, bool) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\tif sessData, ok := p.statements[sessId]; ok {\n\t\tdata, ok := sessData[query]\n\t\treturn data, ok\n\t}\n\treturn nil, false\n}\n\n// CachedStatementsForSession returns all the prepared queries for a particular session\nfunc (p *PreparedDataCache) CachedStatementsForSession(sessId uint32) map[string]sqlparser.Statement {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\treturn p.statements[sessId]\n}\n\n// DeleteSessionData clears a session along with all prepared queries for that session\nfunc (p *PreparedDataCache) DeleteSessionData(sessId uint32) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\tdelete(p.statements, sessId)\n}\n\n// CacheStmt saves the parsed statement and associates a ctx.SessionId and query to it\nfunc (p *PreparedDataCache) CacheStmt(sessId uint32, query string, stmt sqlparser.Statement) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\tif _, ok := p.statements[sessId]; !ok {\n\t\tp.statements[sessId] = make(map[string]sqlparser.Statement)\n\t}\n\tp.statements[sessId][query] = stmt\n}\n\n// UncacheStmt removes the prepared node associated with a ctx.SessionId and query to it\nfunc (p *PreparedDataCache) UncacheStmt(sessId uint32, query string) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\tif _, ok := p.statements[sessId]; ok {\n\t\tdelete(p.statements[sessId], query)\n\t}\n}\n\n// Engine is a SQL engine.\ntype Engine struct {\n\tAnalyzer          *analyzer.Analyzer\n\tLS                *sql.LockSubsystem\n\tProcessList       sql.ProcessList\n\tMemoryManager     *sql.MemoryManager\n\tBackgroundThreads *sql.BackgroundThreads\n\tReadOnly          atomic.Bool\n\tIsServerLocked    bool\n\tPreparedDataCache *PreparedDataCache\n\tmu                *sync.Mutex\n\tVersion           sql.AnalyzerVersion\n\tEventScheduler    *eventscheduler.EventScheduler\n\tParser            sql.Parser\n}\n\ntype ColumnWithRawDefault struct {\n\tSqlColumn *sql.Column\n\tDefault   string\n}\n\n// New creates a new Engine with custom configuration. To create an Engine with\n// the default settings use `NewDefault`. Should call Engine.Close() to finalize\n// dependency lifecycles.\nfunc New(a *analyzer.Analyzer, cfg *Config) *Engine {\n\tif cfg == nil {\n\t\tcfg = &Config{}\n\t}\n\n\tif cfg.IncludeRootAccount {\n\t\ta.Catalog.MySQLDb.AddRootAccount()\n\t}\n\n\tls := sql.NewLockSubsystem()\n\n\tvariables.InitStatusVariables()\n\n\temptyCtx := sql.NewEmptyContext()\n\n\tif _, ok := a.Catalog.Function(emptyCtx, \"version\"); !ok {\n\t\ta.Catalog.RegisterFunction(emptyCtx, sql.FunctionN{\n\t\t\tName: \"version\",\n\t\t\tFn:   function.NewVersion(cfg.VersionPostfix),\n\t\t})\n\t}\n\n\ta.Catalog.RegisterFunction(emptyCtx, function.GetLockingFuncs(ls)...)\n\n\tret := &Engine{\n\t\tAnalyzer:          a,\n\t\tMemoryManager:     sql.NewMemoryManager(sql.ProcessMemory),\n\t\tProcessList:       NewProcessList(),\n\t\tLS:                ls,\n\t\tBackgroundThreads: sql.NewBackgroundThreads(),\n\t\tIsServerLocked:    cfg.IsServerLocked,\n\t\tPreparedDataCache: NewPreparedDataCache(),\n\t\tmu:                &sync.Mutex{},\n\t\tEventScheduler:    nil,\n\t\tParser:            sql.GlobalParser,\n\t}\n\tret.ReadOnly.Store(cfg.IsReadOnly)\n\treturn ret\n}\n\n// NewDefault creates a new default Engine.\nfunc NewDefault(pro sql.DatabaseProvider) *Engine {\n\ta := analyzer.NewDefaultWithVersion(pro)\n\treturn New(a, nil)\n}\n\n// AnalyzeQuery analyzes a query and returns its sql.Node\nfunc (e *Engine) AnalyzeQuery(\n\tctx *sql.Context,\n\tquery string,\n) (sql.Node, error) {\n\tbinder := planbuilder.New(ctx, e.Analyzer.Catalog, e.EventScheduler, e.Parser)\n\tparsed, _, _, qFlags, err := binder.Parse(query, nil, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn e.Analyzer.Analyze(ctx, parsed, nil, qFlags)\n}\n\n// PrepareQuery returns a partially analyzed query\nfunc (e *Engine) PrepareQuery(\n\tctx *sql.Context,\n\tquery string,\n) (sql.Node, error) {\n\tquery = sql.RemoveSpaceAndDelimiter(query, ';')\n\tstmt, _, err := e.Parser.ParseOneWithOptions(ctx, query, sql.LoadSqlMode(ctx).ParserOptions())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn e.PrepareParsedQuery(ctx, query, query, stmt)\n}\n\n// PrepareParsedQuery returns a partially analyzed query for the parsed statement provided\nfunc (e *Engine) PrepareParsedQuery(\n\tctx *sql.Context,\n\tstatementKey, query string,\n\tstmt sqlparser.Statement,\n) (sql.Node, error) {\n\tbinder := planbuilder.New(ctx, e.Analyzer.Catalog, e.EventScheduler, e.Parser)\n\tnode, _, err := binder.BindOnly(stmt, query, nil)\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\te.PreparedDataCache.CacheStmt(ctx.Session.ID(), statementKey, stmt)\n\treturn node, nil\n}\n\n// Query executes a query.\nfunc (e *Engine) Query(ctx *sql.Context, query string) (sql.Schema, sql.RowIter, *sql.QueryFlags, error) {\n\treturn e.QueryWithBindings(ctx, query, nil, nil, nil)\n}\n\nfunc clearWarnings(ctx *sql.Context, node sql.Node) {\n\tif ctx == nil || ctx.Session == nil {\n\t\treturn\n\t}\n\n\tswitch n := node.(type) {\n\tcase *plan.Offset, *plan.Limit:\n\t\t// `show warning limit x offset y` is valid, so we need to recurse\n\t\tclearWarnings(ctx, n.Children()[0])\n\tcase plan.ShowWarnings:\n\t\t// ShowWarnings should not clear the warnings, but should still reset the warning count.\n\t\tctx.ClearWarningCount()\n\tdefault:\n\t\tctx.ClearWarnings()\n\t}\n}\n\nfunc bindingsToExprs(bindings map[string]*querypb.BindVariable) (map[string]sql.Expression, error) {\n\tres := make(map[string]sql.Expression, len(bindings))\n\tfor k, v := range bindings {\n\t\tv, err := sqltypes.NewValue(v.Type, v.Value)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tswitch {\n\t\tcase v.Type() == sqltypes.Year:\n\t\t\tv, _, err := types.Year.Convert(string(v.ToBytes()))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tres[k] = expression.NewLiteral(v, types.Year)\n\t\tcase sqltypes.IsSigned(v.Type()):\n\t\t\tv, err := strconv.ParseInt(string(v.ToBytes()), 0, 64)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tt := types.Int64\n\t\t\tc, _, err := t.Convert(v)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tres[k] = expression.NewLiteral(c, t)\n\t\tcase sqltypes.IsUnsigned(v.Type()):\n\t\t\tv, err := strconv.ParseUint(string(v.ToBytes()), 0, 64)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tt := types.Uint64\n\t\t\tc, _, err := t.Convert(v)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tres[k] = expression.NewLiteral(c, t)\n\t\tcase sqltypes.IsFloat(v.Type()):\n\t\t\tv, err := strconv.ParseFloat(string(v.ToBytes()), 64)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tt := types.Float64\n\t\t\tc, _, err := t.Convert(v)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tres[k] = expression.NewLiteral(c, t)\n\t\tcase v.Type() == sqltypes.Decimal:\n\t\t\tv, _, err := types.InternalDecimalType.Convert(string(v.ToBytes()))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tres[k] = expression.NewLiteral(v, types.InternalDecimalType)\n\t\tcase v.Type() == sqltypes.Bit:\n\t\t\tt := types.MustCreateBitType(types.BitTypeMaxBits)\n\t\t\tv, _, err := t.Convert(v.ToBytes())\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tres[k] = expression.NewLiteral(v, t)\n\t\tcase v.Type() == sqltypes.Null:\n\t\t\tres[k] = expression.NewLiteral(nil, types.Null)\n\t\tcase v.Type() == sqltypes.Blob || v.Type() == sqltypes.VarBinary || v.Type() == sqltypes.Binary:\n\t\t\tt, err := types.CreateBinary(v.Type(), int64(len(v.ToBytes())))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tv, _, err := t.Convert(v.ToBytes())\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tres[k] = expression.NewLiteral(v, t)\n\t\tcase v.Type() == sqltypes.Text || v.Type() == sqltypes.VarChar || v.Type() == sqltypes.Char:\n\t\t\tt, err := types.CreateStringWithDefaults(v.Type(), int64(len(v.ToBytes())))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tv, _, err := t.Convert(v.ToBytes())\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tres[k] = expression.NewLiteral(v, t)\n\t\tcase v.Type() == sqltypes.Date || v.Type() == sqltypes.Datetime || v.Type() == sqltypes.Timestamp:\n\t\t\tprecision := 6\n\t\t\tif v.Type() == sqltypes.Date {\n\t\t\t\tprecision = 0\n\t\t\t}\n\t\t\tt, err := types.CreateDatetimeType(v.Type(), precision)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tv, _, err := t.Convert(string(v.ToBytes()))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tres[k] = expression.NewLiteral(v, t)\n\t\tcase v.Type() == sqltypes.Time:\n\t\t\tt := types.Time\n\t\t\tv, _, err := t.Convert(string(v.ToBytes()))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tres[k] = expression.NewLiteral(v, t)\n\t\tdefault:\n\t\t\treturn nil, sql.ErrUnsupportedFeature.New(v.Type().String())\n\t\t}\n\t}\n\treturn res, nil\n}\n\n// QueryWithBindings executes the query given with the bindings provided.\n// If parsed is non-nil, it will be used instead of parsing the query from text.\nfunc (e *Engine) QueryWithBindings(ctx *sql.Context, query string, parsed sqlparser.Statement, bindings map[string]sqlparser.Expr, qFlags *sql.QueryFlags) (sql.Schema, sql.RowIter, *sql.QueryFlags, error) {\n\tsql.IncrementStatusVariable(ctx, \"Questions\", 1)\n\n\tquery = sql.RemoveSpaceAndDelimiter(query, ';')\n\n\tparsed, binder, err := e.preparedStatement(ctx, query, parsed, bindings)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\n\t// Give the integrator a chance to reject the session before proceeding\n\t// TODO: this check doesn't belong here\n\terr = ctx.Session.ValidateSession(ctx)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\n\terr = e.beginTransaction(ctx)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\n\t// planbuilding can produce warnings, so we need to preserve them\n\tnumPrevWarnings := len(ctx.Session.Warnings())\n\tbound, qFlags, err := e.bindQuery(ctx, query, parsed, bindings, binder, qFlags)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\tnewWarnings := ctx.Session.Warnings()[numPrevWarnings:]\n\tclearWarnings(ctx, bound)\n\t// restore new warnings (backwards because they are in reverse order)\n\tfor i := len(newWarnings) - 1; i >= 0; i-- {\n\t\tctx.Session.Warn(newWarnings[i])\n\t}\n\n\tanalyzed, err := e.analyzeNode(ctx, query, bound, qFlags)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\n\tif plan.NodeRepresentsSelect(analyzed) {\n\t\tsql.IncrementStatusVariable(ctx, \"Com_select\", 1)\n\t}\n\n\tif bindCtx := binder.BindCtx(); bindCtx != nil {\n\t\tif unused := bindCtx.UnusedBindings(); len(unused) > 0 {\n\t\t\treturn nil, nil, nil, fmt.Errorf(\"invalid arguments. expected: %d, found: %d\", len(bindCtx.Bindings)-len(unused), len(bindCtx.Bindings))\n\t\t}\n\t}\n\n\terr = e.readOnlyCheck(analyzed)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\n\titer, err := e.Analyzer.ExecBuilder.Build(ctx, analyzed, nil)\n\tif err != nil {\n\t\terr2 := clearAutocommitTransaction(ctx)\n\t\tif err2 != nil {\n\t\t\treturn nil, nil, nil, errors.Wrap(err, \"unable to clear autocommit transaction: \"+err2.Error())\n\t\t}\n\t\treturn nil, nil, nil, err\n\t}\n\n\tvar schema sql.Schema\n\titer, schema = rowexec.FinalizeIters(ctx, analyzed, qFlags, iter)\n\tif err != nil {\n\t\tclearAutocommitErr := clearAutocommitTransaction(ctx)\n\t\tif clearAutocommitErr != nil {\n\t\t\treturn nil, nil, nil, errors.Wrap(err, \"unable to clear autocommit transaction: \"+clearAutocommitErr.Error())\n\t\t}\n\t\treturn nil, nil, nil, err\n\t}\n\n\tif schema == nil {\n\t\tschema = analyzed.Schema()\n\t}\n\n\treturn schema, iter, qFlags, nil\n}\n\n// PrepQueryPlanForExecution prepares a query plan for execution and returns the result schema with a row iterator to\n// begin spooling results\nfunc (e *Engine) PrepQueryPlanForExecution(ctx *sql.Context, _ string, plan sql.Node, qFlags *sql.QueryFlags) (sql.Schema, sql.RowIter, *sql.QueryFlags, error) {\n\t// Give the integrator a chance to reject the session before proceeding\n\t// TODO: this check doesn't belong here\n\terr := ctx.Session.ValidateSession(ctx)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\n\terr = e.beginTransaction(ctx)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\n\terr = e.readOnlyCheck(plan)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\n\titer, err := e.Analyzer.ExecBuilder.Build(ctx, plan, nil)\n\tif err != nil {\n\t\terr2 := clearAutocommitTransaction(ctx)\n\t\tif err2 != nil {\n\t\t\treturn nil, nil, nil, errors.Wrap(err, \"unable to clear autocommit transaction: \"+err2.Error())\n\t\t}\n\t\treturn nil, nil, nil, err\n\t}\n\n\tvar schema sql.Schema\n\titer, schema = rowexec.FinalizeIters(ctx, plan, qFlags, iter)\n\tif err != nil {\n\t\tclearAutocommitErr := clearAutocommitTransaction(ctx)\n\t\tif clearAutocommitErr != nil {\n\t\t\treturn nil, nil, nil, errors.Wrap(err, \"unable to clear autocommit transaction: \"+clearAutocommitErr.Error())\n\t\t}\n\t\treturn nil, nil, nil, err\n\t}\n\n\tif schema == nil {\n\t\tschema = plan.Schema()\n\t}\n\n\treturn schema, iter, qFlags, nil\n}\n\n// BoundQueryPlan returns query plan for the given statement with the given bindings applied\nfunc (e *Engine) BoundQueryPlan(ctx *sql.Context, query string, parsed sqlparser.Statement, bindings map[string]sqlparser.Expr) (sql.Node, error) {\n\tif parsed == nil {\n\t\treturn nil, errors.New(\"parsed statement must not be nil\")\n\t}\n\n\tquery = sql.RemoveSpaceAndDelimiter(query, ';')\n\n\tbinder := planbuilder.New(ctx, e.Analyzer.Catalog, e.EventScheduler, e.Parser)\n\tbinder.SetBindings(bindings)\n\n\t// Begin a transaction if necessary (no-op if one is in flight)\n\terr := e.beginTransaction(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// TODO: we need to be more principled about when to clear auto commit transactions here\n\tbound, qFlags, err := e.bindQuery(ctx, query, parsed, bindings, binder, nil)\n\tif err != nil {\n\t\terr2 := clearAutocommitTransaction(ctx)\n\t\tif err2 != nil {\n\t\t\treturn nil, errors.Wrap(err, \"unable to clear autocommit transaction: \"+err2.Error())\n\t\t}\n\n\t\treturn nil, err\n\t}\n\n\tanalyzed, err := e.analyzeNode(ctx, query, bound, qFlags)\n\tif err != nil {\n\t\terr2 := clearAutocommitTransaction(ctx)\n\t\tif err2 != nil {\n\t\t\treturn nil, errors.Wrap(err, \"unable to clear autocommit transaction: \"+err2.Error())\n\t\t}\n\t\treturn nil, err\n\t}\n\n\tif bindCtx := binder.BindCtx(); bindCtx != nil {\n\t\tif unused := bindCtx.UnusedBindings(); len(unused) > 0 {\n\t\t\treturn nil, fmt.Errorf(\"invalid arguments. expected: %d, found: %d\", len(bindCtx.Bindings)-len(unused), len(bindCtx.Bindings))\n\t\t}\n\t}\n\n\treturn analyzed, nil\n}\n\nfunc (e *Engine) preparedStatement(ctx *sql.Context, query string, parsed sqlparser.Statement, bindings map[string]sqlparser.Expr) (sqlparser.Statement, *planbuilder.Builder, error) {\n\tpreparedAst, preparedDataFound := e.PreparedDataCache.GetCachedStmt(ctx.Session.ID(), query)\n\n\t// This means that we have bindings but no prepared statement cached, which occurs in tests and in the\n\t// dolthub/driver package. We prepare the statement from the query string in this case\n\tif !preparedDataFound && len(bindings) > 0 {\n\t\t// TODO: pull this out into its own method for this specific use case\n\t\tparsed = nil\n\t\t_, err := e.PrepareQuery(ctx, query)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\n\t\tpreparedAst, preparedDataFound = e.PreparedDataCache.GetCachedStmt(ctx.Session.ID(), query)\n\t}\n\n\tbinder := planbuilder.New(ctx, e.Analyzer.Catalog, e.EventScheduler, e.Parser)\n\tif preparedDataFound {\n\t\tparsed = preparedAst\n\t\tbinder.SetBindings(bindings)\n\t}\n\n\treturn parsed, binder, nil\n}\n\nfunc (e *Engine) analyzeNode(ctx *sql.Context, query string, bound sql.Node, qFlags *sql.QueryFlags) (sql.Node, error) {\n\tswitch n := bound.(type) {\n\tcase *plan.PrepareQuery:\n\t\tsqlMode := sql.LoadSqlMode(ctx)\n\n\t\t// we have to name-resolve to check for structural errors, but we do\n\t\t// not to cache the name-bound query yet.\n\t\t// todo(max): improve name resolution so we can cache post name-binding.\n\t\t// this involves expression memoization, which currently screws up aggregation\n\t\t// and order by aliases\n\t\tprepStmt, _, err := e.Parser.ParseOneWithOptions(ctx, query, sqlMode.ParserOptions())\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tprepare, ok := prepStmt.(*sqlparser.Prepare)\n\t\tif !ok {\n\t\t\treturn nil, fmt.Errorf(\"expected *sqlparser.Prepare, found %T\", prepStmt)\n\t\t}\n\t\tcacheStmt, _, err := e.Parser.ParseOneWithOptions(ctx, prepare.Expr, sqlMode.ParserOptions())\n\t\tif err != nil && strings.HasPrefix(prepare.Expr, \"@\") {\n\t\t\tval, err := expression.NewUserVar(strings.TrimPrefix(prepare.Expr, \"@\")).Eval(ctx, nil)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tvalStr, ok := val.(string)\n\t\t\tif !ok {\n\t\t\t\treturn nil, fmt.Errorf(\"expected string, found %T\", val)\n\t\t\t}\n\t\t\tcacheStmt, _, err = e.Parser.ParseOneWithOptions(ctx, valStr, sqlMode.ParserOptions())\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else if err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\te.PreparedDataCache.CacheStmt(ctx.Session.ID(), n.Name, cacheStmt)\n\t\treturn bound, nil\n\tcase *plan.DeallocateQuery:\n\t\tif _, ok := e.PreparedDataCache.GetCachedStmt(ctx.Session.ID(), n.Name); !ok {\n\t\t\treturn nil, sql.ErrUnknownPreparedStatement.New(n.Name)\n\t\t}\n\t\te.PreparedDataCache.UncacheStmt(ctx.Session.ID(), n.Name)\n\t\treturn bound, nil\n\tdefault:\n\t\treturn e.Analyzer.Analyze(ctx, bound, nil, qFlags)\n\t}\n}\n\n// bindQuery binds any bind variables to the plan node or query given and returns it.\n// |parsed| is the parsed AST without bindings applied, if the statement was previously parsed / prepared.\n// If it wasn't (|parsed| is nil), then the query is parsed.\nfunc (e *Engine) bindQuery(ctx *sql.Context, query string, parsed sqlparser.Statement, bindings map[string]sqlparser.Expr, binder *planbuilder.Builder, qFlags *sql.QueryFlags) (sql.Node, *sql.QueryFlags, error) {\n\tvar bound sql.Node\n\tvar err error\n\tif parsed == nil {\n\t\tbound, _, _, qFlags, err = binder.Parse(query, qFlags, false)\n\t\tif err != nil {\n\t\t\tclearAutocommitErr := clearAutocommitTransaction(ctx)\n\t\t\tif clearAutocommitErr != nil {\n\t\t\t\treturn nil, nil, errors.Wrap(err, \"unable to clear autocommit transaction: \"+clearAutocommitErr.Error())\n\t\t\t}\n\t\t\treturn nil, nil, err\n\t\t}\n\t} else {\n\t\tbound, qFlags, err = binder.BindOnly(parsed, query, qFlags)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t}\n\n\t// ExecuteQuery nodes have their own special var binding step\n\teq, ok := bound.(*plan.ExecuteQuery)\n\tif ok {\n\t\tret, err := e.bindExecuteQueryNode(ctx, query, eq, bindings, binder)\n\t\treturn ret, qFlags, err\n\t}\n\n\treturn bound, qFlags, nil\n}\n\n// bindExecuteQueryNode returns the\nfunc (e *Engine) bindExecuteQueryNode(ctx *sql.Context, query string, eq *plan.ExecuteQuery, bindings map[string]sqlparser.Expr, binder *planbuilder.Builder) (sql.Node, error) {\n\tprep, ok := e.PreparedDataCache.GetCachedStmt(ctx.Session.ID(), eq.Name)\n\tif !ok {\n\t\treturn nil, sql.ErrUnknownPreparedStatement.New(eq.Name)\n\t}\n\t// todo validate expected and actual args -- not just count, by name\n\t// if prep.ArgCount() < 1 {\n\t//\treturn nil, nil, fmt.Errorf(\"invalid bind variable count: expected %d, found %d\", prep.ArgCount(), len(bindings))\n\t// }\n\n\t// TODO: overwrite the current binding if bindings are not empty???\n\ttempBindings := make(map[string]sql.Expression)\n\tfor i, name := range eq.BindVars {\n\t\tif strings.HasPrefix(name.String(), \"@\") {\n\t\t\tt, val, err := ctx.GetUserVariable(ctx, strings.TrimPrefix(name.String(), \"@\"))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil\n\t\t\t}\n\t\t\tif t == nil {\n\t\t\t\tt = types.Null\n\t\t\t}\n\t\t\tif val != nil {\n\t\t\t\tval, _, err = t.Promote().Convert(val)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, nil\n\t\t\t\t}\n\t\t\t}\n\t\t\ttempBindings[fmt.Sprintf(\"v%d\", i+1)] = expression.NewLiteral(val, t)\n\t\t} else {\n\t\t\ttempBindings[fmt.Sprintf(\"v%d\", i)] = name\n\t\t}\n\t}\n\n\tif len(tempBindings) == 0 {\n\t\tbinder.SetBindings(bindings)\n\t} else {\n\t\tbinder.SetBindingsWithExpr(tempBindings)\n\t}\n\n\tbound, _, err := binder.BindOnly(prep, query, nil)\n\tif err != nil {\n\t\tclearAutocommitErr := clearAutocommitTransaction(ctx)\n\t\tif clearAutocommitErr != nil {\n\t\t\treturn nil, errors.Wrap(err, \"unable to clear autocommit transaction: \"+clearAutocommitErr.Error())\n\t\t}\n\n\t\treturn nil, err\n\t}\n\n\treturn bound, nil\n}\n\n// clearAutocommitTransaction unsets the transaction from the current session if it is an implicitly\n// created autocommit transaction. This enables the next request to have an autocommit transaction\n// correctly started.\nfunc clearAutocommitTransaction(ctx *sql.Context) error {\n\t// The GetIgnoreAutoCommit property essentially says the current transaction is an explicit,\n\t// user-created transaction and we should not process autocommit. So, if it's set, then we\n\t// don't need to do anything here to clear implicit transaction state.\n\t//\n\t// TODO: This logic would probably read more clearly if we could just ask the session/ctx if the\n\t//       current transaction is automatically created or explicitly created by the caller.\n\tif ctx.GetIgnoreAutoCommit() {\n\t\treturn nil\n\t}\n\n\tautocommit, err := plan.IsSessionAutocommit(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif autocommit {\n\t\tctx.SetTransaction(nil)\n\t}\n\n\treturn nil\n}\n\n// CloseSession deletes session specific prepared statement data\nfunc (e *Engine) CloseSession(connID uint32) {\n\te.mu.Lock()\n\tdefer e.mu.Unlock()\n\te.PreparedDataCache.DeleteSessionData(connID)\n}\n\nfunc (e *Engine) beginTransaction(ctx *sql.Context) error {\n\tif ctx.GetTransaction() != nil {\n\t\treturn nil\n\t}\n\n\tctx.GetLogger().Tracef(\"beginning new transaction\")\n\tts, ok := ctx.Session.(sql.TransactionSession)\n\tif ok {\n\t\ttx, err := ts.StartTransaction(ctx, sql.ReadWrite)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tctx.SetTransaction(tx)\n\t}\n\n\treturn nil\n}\n\nfunc (e *Engine) Close() error {\n\tif e.EventScheduler != nil {\n\t\te.EventScheduler.Close()\n\t}\n\tfor _, p := range e.ProcessList.Processes() {\n\t\te.ProcessList.Kill(p.Connection)\n\t}\n\treturn e.BackgroundThreads.Shutdown()\n}\n\nfunc (e *Engine) WithBackgroundThreads(b *sql.BackgroundThreads) *Engine {\n\te.BackgroundThreads = b\n\treturn e\n}\n\nfunc (e *Engine) IsReadOnly() bool {\n\treturn e.ReadOnly.Load()\n}\n\n// readOnlyCheck checks to see if the query is valid with the modification setting of the engine.\nfunc (e *Engine) readOnlyCheck(node sql.Node) error {\n\t// Note: We only compute plan.IsReadOnly if the server is in one of\n\t// these two modes, since otherwise it is simply wasted work.\n\tif e.IsReadOnly() && !plan.IsReadOnly(node) {\n\t\treturn sql.ErrReadOnly.New()\n\t}\n\tif e.IsServerLocked && !plan.IsReadOnly(node) {\n\t\treturn sql.ErrDatabaseWriteLocked.New()\n\t}\n\treturn nil\n}\n\nfunc (e *Engine) EnginePreparedDataCache() *PreparedDataCache {\n\treturn e.PreparedDataCache\n}\n\nfunc (e *Engine) EngineAnalyzer() *analyzer.Analyzer {\n\treturn e.Analyzer\n}\n\nfunc (e *Engine) EngineEventScheduler() sql.EventScheduler {\n\treturn e.EventScheduler\n}\n\n// InitializeEventScheduler initializes the EventScheduler for the engine with the given sql.Context\n// getter function, |ctxGetterFunc, the EventScheduler |status|, and the |period| for the event scheduler\n// to check for events to execute. If |period| is less than 1, then it is ignored and the default period\n// (30s currently) is used. This function also initializes the EventScheduler of the analyzer of this engine.\nfunc (e *Engine) InitializeEventScheduler(ctxGetterFunc func() (*sql.Context, func() error, error), status eventscheduler.SchedulerStatus, period int) error {\n\tvar err error\n\te.EventScheduler, err = eventscheduler.InitEventScheduler(e.Analyzer, e.BackgroundThreads, ctxGetterFunc, status, e.executeEvent, period)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\n// executeEvent executes an event with this Engine. The event is executed against the |dbName| database, and by the\n// account identified by |username| and |address|. The entire CREATE EVENT statement is passed in as the |createEventStatement|\n// parameter, but only the body of the event is executed. (The CREATE EVENT statement is passed in to support event\n// bodies that contain multiple statements in a BEGIN/END block.) If any problems are encounterd, the error return\n// value will be populated.\nfunc (e *Engine) executeEvent(ctx *sql.Context, dbName, createEventStatement, username, address string) error {\n\t// the event must be executed against the correct database and with the definer's identity\n\tctx.SetCurrentDatabase(dbName)\n\tctx.Session.SetClient(sql.Client{User: username, Address: address})\n\n\t// Analyze the CREATE EVENT statement\n\tplanTree, err := e.AnalyzeQuery(ctx, createEventStatement)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// and pull out the event body/definition\n\tcreateEventNode, err := findCreateEventNode(planTree)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefinitionNode := createEventNode.DefinitionNode\n\n\t// Build an iterator to execute the event body\n\titer, err := e.Analyzer.ExecBuilder.Build(ctx, definitionNode, nil)\n\tif err != nil {\n\t\tclearAutocommitErr := clearAutocommitTransaction(ctx)\n\t\tif clearAutocommitErr != nil {\n\t\t\treturn clearAutocommitErr\n\t\t}\n\t\treturn err\n\t}\n\n\titer, _ = rowexec.FinalizeIters(ctx, definitionNode, nil, iter)\n\n\t// Drain the iterate to execute the event body/definition\n\t// NOTE: No row data is returned for an event; we just need to execute the statements\n\t_, err = sql.RowIterToRows(ctx, iter)\n\treturn err\n}\n\n// findCreateEventNode searches |planTree| for the first plan.CreateEvent node and\n// returns it. If no matching node was found, the returned CreateEvent node will be\n// nil and an error will be populated.\nfunc findCreateEventNode(planTree sql.Node) (*plan.CreateEvent, error) {\n\t// Search through the node to find the first CREATE EVENT node, and then grab its body\n\tvar targetNode sql.Node\n\ttransform.Inspect(planTree, func(node sql.Node) bool {\n\t\tif cen, ok := node.(*plan.CreateEvent); ok {\n\t\t\ttargetNode = cen\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t})\n\n\tif targetNode == nil {\n\t\treturn nil, fmt.Errorf(\"unable to find create event node in plan tree: %v\", planTree)\n\t}\n\n\tcreateEventNode, ok := targetNode.(*plan.CreateEvent)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"unable to find create event node in plan tree: %v\", planTree)\n\t}\n\n\treturn createEventNode, nil\n}\n"
        },
        {
          "name": "engine_test.go",
          "type": "blob",
          "size": 7.6357421875,
          "content": "// Copyright 2023-2024 Dolthub, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage sqle\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/dolthub/vitess/go/vt/proto/query\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/dolthub/go-mysql-server/memory\"\n\t\"github.com/dolthub/go-mysql-server/sql\"\n\t\"github.com/dolthub/go-mysql-server/sql/analyzer\"\n\t\"github.com/dolthub/go-mysql-server/sql/expression\"\n\t\"github.com/dolthub/go-mysql-server/sql/plan\"\n\t\"github.com/dolthub/go-mysql-server/sql/rowexec\"\n\t\"github.com/dolthub/go-mysql-server/sql/types\"\n\t\"github.com/dolthub/go-mysql-server/sql/variables\"\n)\n\nfunc TestBindingsToExprs(t *testing.T) {\n\ttype tc struct {\n\t\tName     string\n\t\tBindings map[string]*query.BindVariable\n\t\tResult   map[string]sql.Expression\n\t\tErr      bool\n\t}\n\n\tcases := []tc{\n\t\t{\n\t\t\t\"Empty\",\n\t\t\tmap[string]*query.BindVariable{},\n\t\t\tmap[string]sql.Expression{},\n\t\t\tfalse,\n\t\t},\n\t\t{\n\t\t\t\"BadInt\",\n\t\t\tmap[string]*query.BindVariable{\n\t\t\t\t\"v1\": &query.BindVariable{Type: query.Type_INT8, Value: []byte(\"axqut\")},\n\t\t\t},\n\t\t\tnil,\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"BadUint\",\n\t\t\tmap[string]*query.BindVariable{\n\t\t\t\t\"v1\": &query.BindVariable{Type: query.Type_UINT8, Value: []byte(\"-12\")},\n\t\t\t},\n\t\t\tnil,\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"BadDecimal\",\n\t\t\tmap[string]*query.BindVariable{\n\t\t\t\t\"v1\": &query.BindVariable{Type: query.Type_DECIMAL, Value: []byte(\"axqut\")},\n\t\t\t},\n\t\t\tnil,\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"BadBit\",\n\t\t\tmap[string]*query.BindVariable{\n\t\t\t\t\"v1\": &query.BindVariable{Type: query.Type_BIT, Value: []byte{byte(0), byte(0), byte(0), byte(0), byte(0), byte(0), byte(0), byte(0), byte(0)}},\n\t\t\t},\n\t\t\tnil,\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"BadDate\",\n\t\t\tmap[string]*query.BindVariable{\n\t\t\t\t\"v1\": &query.BindVariable{Type: query.Type_DATE, Value: []byte(\"00000000\")},\n\t\t\t},\n\t\t\tnil,\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"BadYear\",\n\t\t\tmap[string]*query.BindVariable{\n\t\t\t\t\"v1\": &query.BindVariable{Type: query.Type_YEAR, Value: []byte(\"asdf\")},\n\t\t\t},\n\t\t\tnil,\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"BadDatetime\",\n\t\t\tmap[string]*query.BindVariable{\n\t\t\t\t\"v1\": &query.BindVariable{Type: query.Type_DATETIME, Value: []byte(\"0000\")},\n\t\t\t},\n\t\t\tnil,\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"BadTimestamp\",\n\t\t\tmap[string]*query.BindVariable{\n\t\t\t\t\"v1\": &query.BindVariable{Type: query.Type_TIMESTAMP, Value: []byte(\"0000\")},\n\t\t\t},\n\t\t\tnil,\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"SomeTypes\",\n\t\t\tmap[string]*query.BindVariable{\n\t\t\t\t\"i8\":        &query.BindVariable{Type: query.Type_INT8, Value: []byte(\"12\")},\n\t\t\t\t\"u64\":       &query.BindVariable{Type: query.Type_UINT64, Value: []byte(\"4096\")},\n\t\t\t\t\"bin\":       &query.BindVariable{Type: query.Type_VARBINARY, Value: []byte{byte(0xC0), byte(0x00), byte(0x10)}},\n\t\t\t\t\"text\":      &query.BindVariable{Type: query.Type_TEXT, Value: []byte(\"four score and seven years ago...\")},\n\t\t\t\t\"bit\":       &query.BindVariable{Type: query.Type_BIT, Value: []byte{byte(0x0f)}},\n\t\t\t\t\"date\":      &query.BindVariable{Type: query.Type_DATE, Value: []byte(\"2020-10-20\")},\n\t\t\t\t\"year\":      &query.BindVariable{Type: query.Type_YEAR, Value: []byte(\"2020\")},\n\t\t\t\t\"datetime\":  &query.BindVariable{Type: query.Type_DATETIME, Value: []byte(\"2020-10-20T12:00:00Z\")},\n\t\t\t\t\"timestamp\": &query.BindVariable{Type: query.Type_TIMESTAMP, Value: []byte(\"2020-10-20T12:00:00Z\")},\n\t\t\t},\n\t\t\tmap[string]sql.Expression{\n\t\t\t\t\"i8\":        expression.NewLiteral(int64(12), types.Int64),\n\t\t\t\t\"u64\":       expression.NewLiteral(uint64(4096), types.Uint64),\n\t\t\t\t\"bin\":       expression.NewLiteral([]byte{byte(0xC0), byte(0x00), byte(0x10)}, types.MustCreateBinary(query.Type_VARBINARY, int64(3))),\n\t\t\t\t\"text\":      expression.NewLiteral(\"four score and seven years ago...\", types.MustCreateStringWithDefaults(query.Type_TEXT, 33)),\n\t\t\t\t\"bit\":       expression.NewLiteral(uint64(0x0f), types.MustCreateBitType(types.BitTypeMaxBits)),\n\t\t\t\t\"date\":      expression.NewLiteral(time.Date(2020, time.Month(10), 20, 0, 0, 0, 0, time.UTC), types.Date),\n\t\t\t\t\"year\":      expression.NewLiteral(int16(2020), types.Year),\n\t\t\t\t\"datetime\":  expression.NewLiteral(time.Date(2020, time.Month(10), 20, 12, 0, 0, 0, time.UTC), types.MustCreateDatetimeType(query.Type_DATETIME, 6)),\n\t\t\t\t\"timestamp\": expression.NewLiteral(time.Date(2020, time.Month(10), 20, 12, 0, 0, 0, time.UTC), types.MustCreateDatetimeType(query.Type_TIMESTAMP, 6)),\n\t\t\t},\n\t\t\tfalse,\n\t\t},\n\t}\n\n\tfor _, c := range cases {\n\t\tt.Run(c.Name, func(t *testing.T) {\n\t\t\tres, err := bindingsToExprs(c.Bindings)\n\t\t\tif !c.Err {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.Equal(t, c.Result, res)\n\t\t\t} else {\n\t\t\t\trequire.Error(t, err, \"%v\", res)\n\t\t\t}\n\t\t})\n\t}\n}\n\n// wrapper around sql.Table to make it not indexable\ntype nonIndexableTable struct {\n\t*memory.Table\n}\n\nvar _ memory.MemTable = (*nonIndexableTable)(nil)\n\nfunc (t *nonIndexableTable) IgnoreSessionData() bool {\n\treturn true\n}\n\nfunc getRuleFrom(rules []analyzer.Rule, id analyzer.RuleId) *analyzer.Rule {\n\tfor _, rule := range rules {\n\t\tif rule.Id == id {\n\t\t\treturn &rule\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// TODO: this was an analyzer test, but we don't have a mock process list for it to use, so it has to be here\nfunc TestTrackProcess(t *testing.T) {\n\trequire := require.New(t)\n\tvariables.InitStatusVariables()\n\tdb := memory.NewDatabase(\"db\")\n\tprovider := memory.NewDBProvider(db)\n\ta := analyzer.NewDefault(provider)\n\tsess := memory.NewSession(sql.NewBaseSession(), provider)\n\n\tnode := plan.NewInnerJoin(\n\t\tplan.NewResolvedTable(&nonIndexableTable{memory.NewPartitionedTable(db.BaseDatabase, \"foo\", sql.PrimaryKeySchema{}, nil, 2)}, nil, nil),\n\t\tplan.NewResolvedTable(memory.NewPartitionedTable(db.BaseDatabase, \"bar\", sql.PrimaryKeySchema{}, nil, 4), nil, nil),\n\t\texpression.NewLiteral(int64(1), types.Int64),\n\t)\n\n\tpl := NewProcessList()\n\n\tctx := sql.NewContext(context.Background(), sql.WithPid(1), sql.WithProcessList(pl), sql.WithSession(sess))\n\tpl.AddConnection(ctx.Session.ID(), \"localhost\")\n\tpl.ConnectionReady(ctx.Session)\n\tctx, err := ctx.ProcessList.BeginQuery(ctx, \"SELECT foo\")\n\trequire.NoError(err)\n\n\trule := getRuleFrom(analyzer.OnceAfterAll, analyzer.TrackProcessId)\n\tresult, _, err := rule.Apply(ctx, a, node, nil, analyzer.DefaultRuleSelector, nil)\n\trequire.NoError(err)\n\n\tprocesses := ctx.ProcessList.Processes()\n\trequire.Len(processes, 1)\n\trequire.Equal(\"SELECT foo\", processes[0].Query)\n\trequire.Equal(\n\t\tmap[string]sql.TableProgress{\n\t\t\t\"foo\": {\n\t\t\t\tProgress:           sql.Progress{Name: \"foo\", Done: 0, Total: 2},\n\t\t\t\tPartitionsProgress: map[string]sql.PartitionProgress{},\n\t\t\t},\n\t\t\t\"bar\": {\n\t\t\t\tProgress:           sql.Progress{Name: \"bar\", Done: 0, Total: 4},\n\t\t\t\tPartitionsProgress: map[string]sql.PartitionProgress{},\n\t\t\t},\n\t\t},\n\t\tprocesses[0].Progress)\n\n\tjoin, ok := result.(*plan.JoinNode)\n\trequire.True(ok)\n\trequire.Equal(plan.JoinTypeInner, join.JoinType())\n\n\tlhs, ok := join.Left().(*plan.ResolvedTable)\n\trequire.True(ok)\n\t_, ok = lhs.Table.(*plan.ProcessTable)\n\trequire.True(ok)\n\n\trhs, ok := join.Right().(*plan.ResolvedTable)\n\trequire.True(ok)\n\t_, ok = rhs.Table.(*plan.ProcessTable)\n\trequire.True(ok)\n\n\titer, err := rowexec.DefaultBuilder.Build(ctx, result, nil)\n\trequire.NoError(err)\n\titer, _ = rowexec.FinalizeIters(ctx, result, nil, iter)\n\trequire.NoError(err)\n\t_, err = sql.RowIterToRows(ctx, iter)\n\trequire.NoError(err)\n\n\tprocesses = ctx.ProcessList.Processes()\n\trequire.Len(processes, 1)\n\trequire.Equal(sql.ProcessCommandSleep, processes[0].Command)\n\trequire.Error(ctx.Err())\n}\n"
        },
        {
          "name": "enginetest",
          "type": "tree",
          "content": null
        },
        {
          "name": "eventscheduler",
          "type": "tree",
          "content": null
        },
        {
          "name": "format_repo.sh",
          "type": "blob",
          "size": 1.1826171875,
          "content": "#!/bin/bash\n\n# Copyright 2020-2021 Dolthub, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -eo pipefail\n\npaths=`find . -maxdepth 1 -mindepth 1 \\( -name gen -prune -o -type d -print -o -type f -name '*.go' -print \\)`\n\ngoimports -w -local github.com/dolthub/go-mysql-server $paths\n\nbad_files=$(find $paths -name '*.go' | while read f; do\n    if [[ $(awk '/import \\(/{flag=1;next}/\\)/{flag=0}flag' < $f | egrep -c '$^') -gt 2 ]]; then\n        echo $f\n    fi\ndone)\n\nif [ \"$bad_files\" != \"\" ]; then\n    for f in $bad_files; do\n        awk '/import \\(/{flag=1}/\\)/{flag=0}flag&&!/^$/||!flag' < \"$f\" > \"$f.bak\"\n        mv \"$f.bak\" \"$f\"\n    done\n    goimports -w -local github.com/dolthub/go-mysql-server .\nfi\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.6689453125,
          "content": "module github.com/dolthub/go-mysql-server\n\nrequire (\n\tgithub.com/cespare/xxhash/v2 v2.2.0\n\tgithub.com/dolthub/flatbuffers/v23 v23.3.3-dh.2\n\tgithub.com/dolthub/go-icu-regex v0.0.0-20241215010122-db690dd53c90\n\tgithub.com/dolthub/jsonpath v0.0.2-0.20240227200619-19675ab05c71\n\tgithub.com/dolthub/sqllogictest/go v0.0.0-20201107003712-816f3ae12d81\n\tgithub.com/dolthub/vitess v0.0.0-20241231200706-18992bb25fdc\n\tgithub.com/go-kit/kit v0.10.0\n\tgithub.com/go-sql-driver/mysql v1.7.2-0.20231213112541-0004702b931d\n\tgithub.com/gocraft/dbr/v2 v2.7.2\n\tgithub.com/google/uuid v1.3.0\n\tgithub.com/hashicorp/golang-lru v0.5.4\n\tgithub.com/lestrrat-go/strftime v1.0.4\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/pmezard/go-difflib v1.0.0\n\tgithub.com/shopspring/decimal v1.3.1\n\tgithub.com/sirupsen/logrus v1.8.1\n\tgithub.com/stretchr/testify v1.9.0\n\tgo.opentelemetry.io/otel v1.31.0\n\tgo.opentelemetry.io/otel/trace v1.31.0\n\tgolang.org/x/exp v0.0.0-20230522175609-2e198f4a06a1\n\tgolang.org/x/sync v0.3.0\n\tgolang.org/x/sys v0.12.0\n\tgolang.org/x/text v0.6.0\n\tgolang.org/x/tools v0.13.0\n\tgoogle.golang.org/grpc v1.53.0\n\tgopkg.in/src-d/go-errors.v1 v1.0.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tfilippo.io/edwards25519 v1.1.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/golang/protobuf v1.5.2 // indirect\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e // indirect\n\tgithub.com/tetratelabs/wazero v1.8.2 // indirect\n\tgolang.org/x/mod v0.12.0 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20230110181048-76db0878b65f // indirect\n\tgoogle.golang.org/protobuf v1.28.1 // indirect\n\tgopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b // indirect\n)\n\ngo 1.23.3\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 43.83984375,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\nfilippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=\nfilippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/DATA-DOG/go-sqlmock v1.5.0 h1:Shsta01QNfFxHCfpW6YH2STWB0MudeXXEWMr20OEh60=\ngithub.com/DATA-DOG/go-sqlmock v1.5.0/go.mod h1:f/Ixk793poVmq4qj/V1dPUg2JEAKC73Q5eFN3EC/SaM=\ngithub.com/Knetic/govaluate v3.0.1-0.20171022003610-9aa49832a739+incompatible/go.mod h1:r7JcOSlj0wfOMncg0iLm8Leh48TZaKVeNIfJntJ2wa0=\ngithub.com/Shopify/sarama v1.19.0/go.mod h1:FVkBWblsNy7DGZRfXLU0O9RCGt5g3g3yEuWXgklEdEo=\ngithub.com/Shopify/toxiproxy v2.1.4+incompatible/go.mod h1:OXgGpZ6Cli1/URJOF1DMxUHB2q5Ap20/P/eIdh4G0pI=\ngithub.com/VividCortex/gohistogram v1.0.0 h1:6+hBz+qvs0JOrrNhhmR7lFxo5sINxBCGXrdtl/UvroE=\ngithub.com/VividCortex/gohistogram v1.0.0/go.mod h1:Pf5mBqqDxYaXu3hDrrU+w6nw50o/4+TcAqDqk/vUH7g=\ngithub.com/afex/hystrix-go v0.0.0-20180502004556-fa1af6a1f4f5/go.mod h1:SkGFH1ia65gfNATL8TAiHDNxPzPdmEL5uirI2Uyuz6c=\ngithub.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/apache/thrift v0.12.0/go.mod h1:cp2SuWMxlEZw2r+iP2GNCdIi4C1qmUzdZFSVb+bacwQ=\ngithub.com/apache/thrift v0.13.0/go.mod h1:cp2SuWMxlEZw2r+iP2GNCdIi4C1qmUzdZFSVb+bacwQ=\ngithub.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e/go.mod h1:3U/XgcO3hCbHZ8TKRvWD2dDTCfh9M9ya+I9JpbB7O8o=\ngithub.com/armon/go-metrics v0.0.0-20180917152333-f0300d1749da/go.mod h1:Q73ZrmVTwzkszR9V5SSuryQ31EELlFMUz1kKyl939pY=\ngithub.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=\ngithub.com/aryann/difflib v0.0.0-20170710044230-e206f873d14a/go.mod h1:DAHtR1m6lCRdSC2Tm3DSWRPvIPr6xNKyeHdqDQSQT+A=\ngithub.com/aws/aws-lambda-go v1.13.3/go.mod h1:4UKl9IzQMoD+QF79YdCuzCwp8VbmG4VAQwij/eHl5CU=\ngithub.com/aws/aws-sdk-go v1.27.0/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go-v2 v0.18.0/go.mod h1:JWVYvqSMppoMJC0x5wdwiImzgXTI9FuZwxzkQq9wy+g=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=\ngithub.com/casbin/casbin/v2 v2.1.2/go.mod h1:YcPU1XXisHhLzuxH9coDNf2FbKpjGlbCg3n9yuLkIJQ=\ngithub.com/cenkalti/backoff v2.2.1+incompatible/go.mod h1:90ReRw6GdpyfrHakVjL/QHaoyV4aDUVVkXQJJJ3NXXM=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=\ngithub.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/clbanning/x2j v0.0.0-20191024224557-825249438eec/go.mod h1:jMjuTZXRI4dUb/I5gc9Hdhagfvm9+RyrPryS/auMzxE=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cockroachdb/datadriven v0.0.0-20190809214429-80d97fb3cbaa/go.mod h1:zn76sxSg3SzpJ0PPJaLDCu+Bu0Lg3sKTORVIj19EIF8=\ngithub.com/codahale/hdrhistogram v0.0.0-20161010025455-3a0bb77429bd/go.mod h1:sE/e/2PUdi/liOCUjSTXgM1o87ZssimdTWN964YiIeI=\ngithub.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-systemd v0.0.0-20180511133405-39ca1b05acc7/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/pkg v0.0.0-20160727233714-3ac0863d7acf/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/creack/pty v1.1.7/go.mod h1:lj5s0c3V2DBrqTV7llrYr5NG6My20zk30Fl46Y7DoTY=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/denisenkom/go-mssqldb v0.10.0 h1:QykgLZBorFE95+gO3u9esLd0BmbvpWp0/waNNZfHBM8=\ngithub.com/denisenkom/go-mssqldb v0.10.0/go.mod h1:xbL0rPBG9cCiLr28tMa8zpbdarY27NDyej4t/EjAShU=\ngithub.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=\ngithub.com/dolthub/flatbuffers/v23 v23.3.3-dh.2 h1:u3PMzfF8RkKd3lB9pZ2bfn0qEG+1Gms9599cr0REMww=\ngithub.com/dolthub/flatbuffers/v23 v23.3.3-dh.2/go.mod h1:mIEZOHnFx4ZMQeawhw9rhsj+0zwQj7adVsnBX7t+eKY=\ngithub.com/dolthub/go-icu-regex v0.0.0-20241215010122-db690dd53c90 h1:Sni8jrP0sy/w9ZYXoff4g/ixe+7bFCZlfCqXKJSU+zM=\ngithub.com/dolthub/go-icu-regex v0.0.0-20241215010122-db690dd53c90/go.mod h1:ylU4XjUpsMcvl/BKeRRMXSH7e7WBrPXdSLvnRJYrxEA=\ngithub.com/dolthub/jsonpath v0.0.2-0.20240227200619-19675ab05c71 h1:bMGS25NWAGTEtT5tOBsCuCrlYnLRKpbJVJkDbrTRhwQ=\ngithub.com/dolthub/jsonpath v0.0.2-0.20240227200619-19675ab05c71/go.mod h1:2/2zjLQ/JOOSbbSboojeg+cAwcRV0fDLzIiWch/lhqI=\ngithub.com/dolthub/sqllogictest/go v0.0.0-20201107003712-816f3ae12d81 h1:7/v8q9XGFa6q5Ap4Z/OhNkAMBaK5YeuEzwJt+NZdhiE=\ngithub.com/dolthub/sqllogictest/go v0.0.0-20201107003712-816f3ae12d81/go.mod h1:siLfyv2c92W1eN/R4QqG/+RjjX5W2+gCTRjZxBjI3TY=\ngithub.com/dolthub/vitess v0.0.0-20241220202600-b18f18d0cde7 h1:w130WLeARGGNYWmhGPugsHXzJEelKKimt3kTWg6/Puk=\ngithub.com/dolthub/vitess v0.0.0-20241220202600-b18f18d0cde7/go.mod h1:1gQZs/byeHLMSul3Lvl3MzioMtOW1je79QYGyi2fd70=\ngithub.com/dolthub/vitess v0.0.0-20241231200706-18992bb25fdc h1:3FuwEDwyue/JuHdnwGSbQhE9xKAFM+k1y3uXi58h7Gk=\ngithub.com/dolthub/vitess v0.0.0-20241231200706-18992bb25fdc/go.mod h1:1gQZs/byeHLMSul3Lvl3MzioMtOW1je79QYGyi2fd70=\ngithub.com/dustin/go-humanize v0.0.0-20171111073723-bb3d318650d4/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/eapache/go-resiliency v1.1.0/go.mod h1:kFI+JgMyC7bLPUVY133qvEBtVayf5mFgVsvEsIPBvNs=\ngithub.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21/go.mod h1:+020luEh2TKB4/GOp8oxxtq0Daoen/Cii55CzbTV6DU=\ngithub.com/eapache/queue v1.1.0/go.mod h1:6eCeP0CKFpHLu8blIFXhExK/dRa7WDZfr6jVFPTqq+I=\ngithub.com/edsrzf/mmap-go v1.0.0/go.mod h1:YO35OhQPt3KJa3ryjFM5Bs14WD66h8eGKpfaBNrHW5M=\ngithub.com/envoyproxy/go-control-plane v0.6.9/go.mod h1:SBwIajubJHhxtWwsL9s8ss4safvEdbitLhGGK48rN6g=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=\ngithub.com/franela/goblin v0.0.0-20200105215937-c9ffbefa60db/go.mod h1:7dvUGVsVBjqR7JHJk0brhHOZYGmfBYOrK0ZhYMEtBr4=\ngithub.com/franela/goreq v0.0.0-20171204163338-bcd34c9993f8/go.mod h1:ZhphrRTfi2rbfLwlschooIH4+wKKDR4Pdxhh+TRoA20=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.10.0 h1:dXFJfIHVvUcpSgDOV+Ne6t7jXri8Tfv2uOLHUZ2XNuo=\ngithub.com/go-kit/kit v0.10.0/go.mod h1:xUsJbQ/Fp4kEt7AFgCuvyX4a71u8h9jB8tj/ORgOZ7o=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=\ngithub.com/go-logfmt/logfmt v0.5.0/go.mod h1:wCYkCAKZfumFQihp8CzCvQ3paCTfi41vtzG1KdI/P7A=\ngithub.com/go-sql-driver/mysql v1.4.0/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=\ngithub.com/go-sql-driver/mysql v1.4.1/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=\ngithub.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/go-sql-driver/mysql v1.7.2-0.20231213112541-0004702b931d h1:QQP1nE4qh5aHTGvI1LgOFxZYVxYoGeMfbNHikogPyoA=\ngithub.com/go-sql-driver/mysql v1.7.2-0.20231213112541-0004702b931d/go.mod h1:wEBSXgmK//2ZFJyE+qWnIsVGmvmEKlqwuVSjsCm7DZg=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/gocraft/dbr/v2 v2.7.2 h1:ccUxMuz6RdZvD7VPhMRRMSS/ECF3gytPhPtcavjktHk=\ngithub.com/gocraft/dbr/v2 v2.7.2/go.mod h1:5bCqyIXO5fYn3jEp/L06QF4K1siFdhxChMjdNu6YJrg=\ngithub.com/gogo/googleapis v1.1.0/go.mod h1:gf4bu3Q80BeJ6H1S1vYPm8/ELATdvryBaNFGgqEef3s=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.2.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe h1:lXe2qZdvpiX5WZkZR4hgp4KJVfY3nMkvmwbVkpv1rVY=\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20160516000752-02826c3e7903/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/snappy v0.0.0-20180518054509-2e65f85255db/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=\ngithub.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=\ngithub.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gorilla/context v1.1.1/go.mod h1:kBGZzfjB9CEq2AlWe17Uuf7NDRt0dE0s8S51q0aT7Yg=\ngithub.com/gorilla/mux v1.6.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gorilla/mux v1.7.3/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gorilla/websocket v0.0.0-20170926233335-4201258b820c/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=\ngithub.com/grpc-ecosystem/go-grpc-middleware v1.0.1-0.20190118093823-f849b5445de4/go.mod h1:FiyG127CGDf3tlThmgyCl78X/SZQqEOJBCDaAfeWzPs=\ngithub.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=\ngithub.com/grpc-ecosystem/grpc-gateway v1.9.5/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/hashicorp/consul/api v1.3.0/go.mod h1:MmDNSzIMUjNpY/mQ398R4bk2FnqQLoPndWW5VkKPlCE=\ngithub.com/hashicorp/consul/sdk v0.3.0/go.mod h1:VKf9jXwCTEY1QZP2MOLRhb5i/I/ssyNV1vwHyQBF0x8=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-cleanhttp v0.5.1/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-msgpack v0.5.3/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=\ngithub.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=\ngithub.com/hashicorp/go-rootcerts v1.0.0/go.mod h1:K6zTfqpRlCUIjkwsN4Z+hiSfzSTQa6eBIzfwKfwNnHU=\ngithub.com/hashicorp/go-sockaddr v1.0.0/go.mod h1:7Xibr9yA9JjQq1JpNB2Vw7kxv8xerXegt+ozgdvDeDU=\ngithub.com/hashicorp/go-syslog v1.0.0/go.mod h1:qPfqrKkXGihmCqbJM2mZgkZGvKG1dFdvsLplgctolz4=\ngithub.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.1/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-version v1.2.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/go.net v0.0.1/go.mod h1:hjKkEWcCURg++eb33jQU7oqQcI9XDCnUzHA0oac0k90=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=\ngithub.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=\ngithub.com/hashicorp/mdns v1.0.0/go.mod h1:tL+uN++7HEJ6SQLQ2/p+z2pH24WQKWjBPkE0mNTz8vQ=\ngithub.com/hashicorp/memberlist v0.1.3/go.mod h1:ajVTdAv/9Im8oMAAj5G31PhhMCZJV2pPBoIllUwCN7I=\ngithub.com/hashicorp/serf v0.8.2/go.mod h1:6hOLApaqBFA1NXqRQAsxw9QxuDEvNxSQRwA/JwenrHc=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/hudl/fargo v1.3.0/go.mod h1:y3CKSmjA+wD2gak7sUSXTAoopbhU08POFhmITJgmKTg=\ngithub.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\ngithub.com/influxdata/influxdb1-client v0.0.0-20191209144304-8bf82d3c094d/go.mod h1:qj24IKcXYK6Iy9ceXlo3Tc+vtHo9lIhSX5JddghvEPo=\ngithub.com/jmespath/go-jmespath v0.0.0-20180206201540-c2b33e8439af/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=\ngithub.com/jmoiron/sqlx v1.3.4 h1:wv+0IJZfL5z0uZoUjlpKgHkgaFSYD+r9CfrXjEXsO7w=\ngithub.com/jmoiron/sqlx v1.3.4/go.mod h1:2BljVx/86SuTyjE+aPYlHCTNvZrnJXghYGpNiXLBMCQ=\ngithub.com/jonboulle/clockwork v0.1.0/go.mod h1:Ii8DK3G1RaLaWxj9trq07+26W01tbo22gdxWY5EU2bo=\ngithub.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.8/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=\ngithub.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lestrrat-go/envload v0.0.0-20180220234015-a3eb8ddeffcc h1:RKf14vYWi2ttpEmkA4aQ3j4u9dStX2t4M8UM6qqNsG8=\ngithub.com/lestrrat-go/envload v0.0.0-20180220234015-a3eb8ddeffcc/go.mod h1:kopuH9ugFRkIXf3YoqHKyrJ9YfUFsckUU9S7B+XP+is=\ngithub.com/lestrrat-go/strftime v1.0.4 h1:T1Rb9EPkAhgxKqbcMIPguPq8glqXTA1koF8n9BHElA8=\ngithub.com/lestrrat-go/strftime v1.0.4/go.mod h1:E1nN3pCbtMSu1yjSVeyuRFVm/U0xoR76fd03sz+Qz4g=\ngithub.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.10.0 h1:Zx5DJFEYQXio93kgXnQ09fXNiUKsqv4OUEu2UtGcB1E=\ngithub.com/lib/pq v1.10.0/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/lightstep/lightstep-tracer-common/golang/gogo v0.0.0-20190605223551-bc2310a04743/go.mod h1:qklhhLq1aX+mtWk9cPHPzaBjWImj5ULL6C7HFJtXQMM=\ngithub.com/lightstep/lightstep-tracer-go v0.18.1/go.mod h1:jlF1pusYV4pidLvZ+XD0UBX0ZE6WURAspgAczcDHrL4=\ngithub.com/lyft/protoc-gen-validate v0.0.13/go.mod h1:XbGvPuh87YZc5TdIa2/I4pLk0QoUACkjt2znoq26NVQ=\ngithub.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=\ngithub.com/mattn/go-isatty v0.0.3/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-isatty v0.0.4/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-runewidth v0.0.2/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mattn/go-sqlite3 v1.14.6/go.mod h1:NyWgC/yNuGj7Q9rpYnZvas74GogHl5/Z4A/KQRfk6bU=\ngithub.com/mattn/go-sqlite3 v1.14.7 h1:fxWBnXkxfM6sRiuH3bqJ4CfzZojMOLVc0UTsTglEghA=\ngithub.com/mattn/go-sqlite3 v1.14.7/go.mod h1:NyWgC/yNuGj7Q9rpYnZvas74GogHl5/Z4A/KQRfk6bU=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/miekg/dns v1.0.14/go.mod h1:W1PPwlIAgtquWBMBEV9nkV9Cazfe8ScdGz/Lj7v3Nrg=\ngithub.com/mitchellh/cli v1.0.0/go.mod h1:hNIlj7HEI86fIcpObd7a0FcrxTWetlwJDGcceTlRvqc=\ngithub.com/mitchellh/go-homedir v1.0.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-testing-interface v1.0.0/go.mod h1:kRemZodwjscx+RGhAo8eIhFbs2+BFgRtFPeD/KE+zxI=\ngithub.com/mitchellh/gox v0.4.0/go.mod h1:Sd9lOJ0+aimLBi73mGofS1ycjY8lL3uZM3JPS42BGNg=\ngithub.com/mitchellh/iochan v1.0.0/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=\ngithub.com/mitchellh/mapstructure v0.0.0-20160808181253-ca63d7c062ee/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/nats-io/jwt v0.3.0/go.mod h1:fRYCDE99xlTsqUzISS1Bi75UBJ6ljOJQOAAu5VglpSg=\ngithub.com/nats-io/jwt v0.3.2/go.mod h1:/euKqTS1ZD+zzjYrY7pseZrTtWQSjujC7xjPc8wL6eU=\ngithub.com/nats-io/nats-server/v2 v2.1.2/go.mod h1:Afk+wRZqkMQs/p45uXdrVLuab3gwv3Z8C4HTBu8GD/k=\ngithub.com/nats-io/nats.go v1.9.1/go.mod h1:ZjDU1L/7fJ09jvUSRVBR2e7+RnLiiIQyqyzEE/Zbp4w=\ngithub.com/nats-io/nkeys v0.1.0/go.mod h1:xpnFELMwJABBLVhffcfd1MZx6VsNRFpEugbxziKVo7w=\ngithub.com/nats-io/nkeys v0.1.3/go.mod h1:xpnFELMwJABBLVhffcfd1MZx6VsNRFpEugbxziKVo7w=\ngithub.com/nats-io/nuid v1.0.1/go.mod h1:19wcPz3Ph3q0Jbyiqsd0kePYG7A95tJPxeL+1OSON2c=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e h1:fD57ERR4JtEqsWbfPhv4DMiApHyliiK5xCTNVSPiaAs=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/oklog/oklog v0.3.2/go.mod h1:FCV+B7mhrz4o+ueLpx+KqkyXRGMWOYEvfiXtdGtbWGs=\ngithub.com/oklog/run v1.0.0/go.mod h1:dlhp/R75TPv97u0XWUtDeV/lRKWPKSdTuV0TZvrmrQA=\ngithub.com/olekukonko/tablewriter v0.0.0-20170122224234-a0225b3f23b5/go.mod h1:vsDQFd/mU46D+Z4whnwzcISnGGzXWMclvtLoiIKAKIo=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.7.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/gomega v1.4.3/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/op/go-logging v0.0.0-20160315200505-970db520ece7/go.mod h1:HzydrMdWErDVzsI23lYNej1Htcns9BCg93Dk0bBINWk=\ngithub.com/opentracing-contrib/go-observer v0.0.0-20170622124052-a52f23424492/go.mod h1:Ngi6UdF0k5OKD5t5wlmGhe/EDKPoUM3BXZSSfIuJbis=\ngithub.com/opentracing/basictracer-go v1.0.0/go.mod h1:QfBfYuafItcjQuMwinw9GhYKwFXS9KnPs5lxoYwgW74=\ngithub.com/opentracing/opentracing-go v1.0.2/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/opentracing/opentracing-go v1.1.0/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/opentracing/opentracing-go v1.2.0/go.mod h1:GxEUsuufX4nBwe+T+Wl9TAgYrxe9dPLANfrWvHYVTgc=\ngithub.com/openzipkin-contrib/zipkin-go-opentracing v0.4.5/go.mod h1:/wsWhb9smxSfWAKL3wpBW7V8scJMt8N8gnaMCS9E/cA=\ngithub.com/openzipkin/zipkin-go v0.1.6/go.mod h1:QgAqvLzwWbR/WpD4A3cGpPtJrZXNIiJc5AZX7/PBEpw=\ngithub.com/openzipkin/zipkin-go v0.2.1/go.mod h1:NaW6tEwdmWMaCDZzg8sh+IBNOxHMPnhQw8ySjnjRyN4=\ngithub.com/openzipkin/zipkin-go v0.2.2/go.mod h1:NaW6tEwdmWMaCDZzg8sh+IBNOxHMPnhQw8ySjnjRyN4=\ngithub.com/pact-foundation/pact-go v1.0.4/go.mod h1:uExwJY4kCzNPcHRj+hCR/HBbOOIwwtUjcrb0b5/5kLM=\ngithub.com/pascaldekloe/goe v0.0.0-20180627143212-57f6aae5913c/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=\ngithub.com/pborman/uuid v1.2.0/go.mod h1:X/NO0urCmaxf9VXbdlT7C2Yzkj2IKimNn4k+gtPdI/k=\ngithub.com/performancecopilot/speed v3.0.0+incompatible/go.mod h1:/CLtqpZ5gBg1M9iaPbIdPPGyKcA8hKdoy6hAWba7Yac=\ngithub.com/pierrec/lz4 v1.0.2-0.20190131084431-473cd7ce01a1/go.mod h1:3/3N9NVKO0jef7pBehbT1qWhCMrIgbYNnFAZCqQ5LRc=\ngithub.com/pierrec/lz4 v2.0.5+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/profile v1.2.1/go.mod h1:hJw3o1OdXxsrSjjVksARp5W95eeEaEfptyVZyv6JUPA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=\ngithub.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v0.9.3-0.20190127221311-3c4408c8b829/go.mod h1:p2iRAGwDERtqlqzRXnrOVns+ignqQo//hLXqYxZYVNs=\ngithub.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=\ngithub.com/prometheus/client_golang v1.3.0/go.mod h1:hJaj2vgQTGQmVCsAACORcieXFeDPbaTKGT+JTgUa3og=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190115171406-56726106282f/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.1.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/common v0.2.0/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.7.0/go.mod h1:DjGbpBbp5NYNiECxcL/VnbXCCaQpKd3tt26CguLLsqA=\ngithub.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20190117184657-bf6a532e95b1/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.0.8/go.mod h1:7Qr8sr6344vo1JqZ6HhLceV9o3AJ1Ff+GxbHq6oeK9A=\ngithub.com/rcrowley/go-metrics v0.0.0-20181016184325-3113b8401b8a/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=\ngithub.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af/go.mod h1:XWv6SoW27p1b0cqNHllgS5HIMJraePCO15w5zCzIWYg=\ngithub.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/ryanuber/columnize v0.0.0-20160712163229-9b3edd62028f/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=\ngithub.com/samuel/go-zookeeper v0.0.0-20190923202752-2cc03de413da/go.mod h1:gi+0XIa01GRL2eRQVjQkKGqKF3SF9vZR/HnPullcV2E=\ngithub.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=\ngithub.com/shopspring/decimal v1.3.1 h1:2Usl1nmF/WZucqkFZhnfFYxxxu8LG21F6nPQBE5gKV8=\ngithub.com/shopspring/decimal v1.3.1/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.8.1 h1:dJKuHgqk1NNQlqoA6BTlM1Wf9DOH3NBjQyu0h9+AZZE=\ngithub.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=\ngithub.com/sony/gobreaker v0.4.1/go.mod h1:ZKptC7FHNvhBz7dN2LGjPVBz2sZJmc0/PkyDJOjmxWY=\ngithub.com/spf13/cobra v0.0.3/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=\ngithub.com/spf13/pflag v1.0.1/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/streadway/amqp v0.0.0-20190404075320-75d898a42a94/go.mod h1:AZpEONHx3DKn8O/DFsRAY58/XVQiIPMTMB1SddzLXVw=\ngithub.com/streadway/amqp v0.0.0-20190827072141-edfb9018d271/go.mod h1:AZpEONHx3DKn8O/DFsRAY58/XVQiIPMTMB1SddzLXVw=\ngithub.com/streadway/handy v0.0.0-20190108123426-d5acb3125c2a/go.mod h1:qNTQ5P5JnDBl6z3cMAg/SywNDC5ABu5ApDIw6lUbRmI=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tetratelabs/wazero v1.8.2 h1:yIgLR/b2bN31bjxwXHD8a3d+BogigR952csSDdLYEv4=\ngithub.com/tetratelabs/wazero v1.8.2/go.mod h1:yAI0XTsMBhREkM/YDAK/zNou3GoiAce1P6+rp/wQhjs=\ngithub.com/tmc/grpc-websocket-proxy v0.0.0-20170815181823-89b8d40f7ca8/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=\ngithub.com/urfave/cli v1.20.0/go.mod h1:70zkFmudgCuE/ngEzBv17Jvp/497gISqfk5gWijbERA=\ngithub.com/urfave/cli v1.22.1/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=\ngo.etcd.io/bbolt v1.3.3/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=\ngo.etcd.io/etcd v0.0.0-20191023171146-3cf2f69b5738/go.mod h1:dnLIgRNXwCJa5e+c6mIZCrds/GIG4ncV9HhK5PX7jPg=\ngo.opencensus.io v0.20.1/go.mod h1:6WKK9ahsWS3RSO+PY9ZHZUfv2irvY6gN279GOPZjmmk=\ngo.opencensus.io v0.20.2/go.mod h1:6WKK9ahsWS3RSO+PY9ZHZUfv2irvY6gN279GOPZjmmk=\ngo.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opentelemetry.io/otel v1.31.0 h1:NsJcKPIW0D0H3NgzPDHmo0WW6SptzPdqg/L1zsIm2hY=\ngo.opentelemetry.io/otel v1.31.0/go.mod h1:O0C14Yl9FgkjqcCZAsE053C13OaddMYr/hz6clDkEJE=\ngo.opentelemetry.io/otel/trace v1.31.0 h1:ffjsj1aRouKewfr85U2aGagJ46+MvodynlQ1HYdmJys=\ngo.opentelemetry.io/otel/trace v1.31.0/go.mod h1:TXZkRk7SM2ZQLtR6eoAWQFIHPvzQ06FJAsO1tJg480A=\ngo.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/atomic v1.5.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=\ngo.uber.org/multierr v1.3.0/go.mod h1:VgVr7evmIr6uPjLBxg28wmKNXyqE9akIJ5XnfpiKl+4=\ngo.uber.org/tools v0.0.0-20190618225709-2cfd321de3ee/go.mod h1:vJERXedbb3MVM5f9Ejo0C68/HhF8uaILCdgjnY+goOA=\ngo.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.13.0/go.mod h1:zwrFLgMcdUuIBviXEYEH1YKNaOBnKXsx2IPda5bBwHM=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20181029021203-45a5f77698d3/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190325154230-a5d413f7728c/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550 h1:ObdrDkeb4kJdCP557AjRjq69pTHfNouLtWZG7j9rPN8=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20230522175609-2e198f4a06a1 h1:k/i9J1pBpvlfR+9QsetwPyERsqu1GIbi967PQMq3Ivc=\ngolang.org/x/exp v0.0.0-20230522175609-2e198f4a06a1/go.mod h1:V1LtkGg67GoY2N1AnLN78QLrzxkLyJw7RJb1gzOOz9w=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.12.0 h1:rmsUpXtvNzj340zd98LZ4KntptpfRHwpFOHG188oHXc=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181023162649-9b4f9f5ad519/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181201002055-351d144fa1fc/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190125091013-d26f9f9a57f3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190813141303-74dc4d7220e7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.15.0 h1:ugBLEUaxABaB5AJqW9enI0ACdci2RUd4eP51NTBvuJ8=\ngolang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.3.0 h1:ftCYgMx6zT/asHUrPw8BLLscYtGznsLAnjq5RH9P66E=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181026203630-95b1ffbd15a5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181122145206-62eef0e2fa9b/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190826190057-c7b8b68b1456/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191220142924-d4481acd189f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.12.0 h1:CM0HF96J0hcLAwsHPJZjfdNzs0gftsLfgKt57wWHJ0o=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.6.0 h1:3XmdazWV+ubf7QgHSTWeykHOci5oeekaGJBLkrkaw4k=\ngolang.org/x/text v0.6.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/time v0.0.0-20180412165947-fbb02b2291d2/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180828015842-6cd1fcedba52/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200103221440-774c71fcf114/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.13.0 h1:Iey4qkscZuv0VvIt8E0neZjtPVQFSc870HQ448QgEmQ=\ngolang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/api v0.3.1/go.mod h1:6wY9I6uQWHQ8EM57III9mq/AjF+i8G65rmVagqKMtkk=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.2.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.6.7/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190530194941-fb225487d101/go.mod h1:z3L6/3dTEVtUr6QSP8miRzeRqwQOioJ9I66odjN4I7s=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20230110181048-76db0878b65f h1:BWUVssLB0HVOSY78gIdvk1dTVYtT1y8SBWtPYuTJ/6w=\ngoogle.golang.org/genproto v0.0.0-20230110181048-76db0878b65f/go.mod h1:RGgjbofJ8xD9Sq1VVhDM1Vok1vRONV+rg+CjzG4SZKM=\ngoogle.golang.org/grpc v1.17.0/go.mod h1:6QZJwpn2B+Zp71q/5VxRsJ6NXXVCE5NRUHRo+f3cWCs=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.0/go.mod h1:chYK+tFQF0nDUGJgXMSgLCQk3phJEuONr2DCgLDdAQM=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.21.0/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.22.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.23.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.53.0 h1:LAv2ds7cmFV/XTS3XG1NneeENYrXGmorPxsBbptIjNc=\ngoogle.golang.org/grpc v1.53.0/go.mod h1:OnIrk0ipVdj4N5d9IUoFUx72/VlD7+jUsHwZgwSMQpw=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.28.1 h1:d0NfwRgPtno5B1Wa6L2DAG+KivqkdutMf1UhdNx175w=\ngoogle.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b h1:QRR6H1YWRnHb4Y/HeNFCTJLFVxaq6wH4YuVdsUOr75U=\ngopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/cheggaaa/pb.v1 v1.0.25/go.mod h1:V/YB90LKu/1FcN3WVnfiiE5oMCibMjukxqG/qStrOgw=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/gcfg.v1 v1.2.3/go.mod h1:yesOnuUOFQAhST5vPY4nbZsb/huCgGGXlipJsBn0b3o=\ngopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=\ngopkg.in/src-d/go-errors.v1 v1.0.0 h1:cooGdZnCjYbeS1zb1s6pVAAimTdKceRrpn7aKOnNIfc=\ngopkg.in/src-d/go-errors.v1 v1.0.0/go.mod h1:q1cBlomlw2FnDBDNGlnh6X0jPihy+QxZfMMNxPCbdYg=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7/go.mod h1:JAlM8MvJe8wmxCU4Bli9HhUf9+ttbYbLASfIpnQbh74=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20180728063816-88497007e858/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=\nsigs.k8s.io/yaml v1.1.0/go.mod h1:UJmg0vDUVViEyp3mgSv9WPwZCDxu4rQW1olrI1uml+o=\nsourcegraph.com/sourcegraph/appdash v0.0.0-20190731080439-ebfcffb1b5c0/go.mod h1:hI742Nqp5OhwiqlzhgfbWU4mW4yO10fP+LoT9WOswdU=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "log.go",
          "type": "blob",
          "size": 1.3525390625,
          "content": "// Copyright 2020-2021 Dolthub, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage sqle\n\nimport (\n\tvtlog \"github.com/dolthub/vitess/go/vt/log\"\n\t\"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n\t// Flush ensures any pending I/O is written.\n\tvtlog.Flush = func() {}\n\n\t// Info formats arguments like fmt.Print.\n\tvtlog.Info = logrus.Info\n\t// Infof formats arguments like fmt.Printf.\n\tvtlog.Infof = logrus.Infof\n\n\t// Warning formats arguments like fmt.Print.\n\tvtlog.Warning = logrus.Warning\n\t// Warningf formats arguments like fmt.Printf.\n\tvtlog.Warningf = logrus.Warningf\n\n\t// Error formats arguments like fmt.Print.\n\tvtlog.Error = logrus.Error\n\t// Errorf formats arguments like fmt.Printf.\n\tvtlog.Errorf = logrus.Errorf\n\n\t// Fatal formats arguments like fmt.Print.\n\tvtlog.Fatal = logrus.Fatal\n\t// Fatalf formats arguments like fmt.Printf\n\tvtlog.Fatalf = logrus.Fatalf\n}\n"
        },
        {
          "name": "mascot.png",
          "type": "blob",
          "size": 190.630859375,
          "content": null
        },
        {
          "name": "memory",
          "type": "tree",
          "content": null
        },
        {
          "name": "optgen",
          "type": "tree",
          "content": null
        },
        {
          "name": "processlist.go",
          "type": "blob",
          "size": 8.203125,
          "content": "// Copyright 2021 Dolthub, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage sqle\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/sirupsen/logrus\"\n\n\t\"github.com/dolthub/go-mysql-server/sql\"\n)\n\n// ProcessList is a structure that keeps track of all the processes and their\n// status.\ntype ProcessList struct {\n\tmu         sync.RWMutex\n\tprocs      map[uint32]*sql.Process\n\tbyQueryPid map[uint64]uint32\n}\n\n// NewProcessList creates a new process list.\nfunc NewProcessList() *ProcessList {\n\treturn &ProcessList{\n\t\tprocs:      make(map[uint32]*sql.Process),\n\t\tbyQueryPid: make(map[uint64]uint32),\n\t}\n}\n\n// Processes returns the list of current running processes.\nfunc (pl *ProcessList) Processes() []sql.Process {\n\tpl.mu.RLock()\n\tdefer pl.mu.RUnlock()\n\tvar result = make([]sql.Process, 0, len(pl.procs))\n\n\t// Make a deep copy of all maps to avoid race\n\tfor _, proc := range pl.procs {\n\t\tp := *proc\n\t\tvar progMap = make(map[string]sql.TableProgress, len(p.Progress))\n\t\tfor progName, prog := range p.Progress {\n\t\t\tnewProg := sql.TableProgress{\n\t\t\t\tProgress:           prog.Progress,\n\t\t\t\tPartitionsProgress: make(map[string]sql.PartitionProgress, len(prog.PartitionsProgress)),\n\t\t\t}\n\t\t\tfor partName, partProg := range prog.PartitionsProgress {\n\t\t\t\tnewProg.PartitionsProgress[partName] = partProg\n\t\t\t}\n\t\t\tprogMap[progName] = newProg\n\t\t}\n\t\tp.Progress = progMap\n\t\tresult = append(result, p)\n\t}\n\n\treturn result\n}\n\nfunc (pl *ProcessList) AddConnection(id uint32, addr string) {\n\tsql.StatusVariables.IncrementGlobal(\"Threads_connected\", 1)\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\tpl.procs[id] = &sql.Process{\n\t\tConnection: id,\n\t\tCommand:    sql.ProcessCommandConnect,\n\t\tHost:       addr,\n\t\tUser:       \"unauthenticated user\",\n\t\tStartedAt:  time.Now(),\n\t}\n}\n\nfunc (pl *ProcessList) ConnectionReady(sess sql.Session) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\tpl.procs[sess.ID()] = &sql.Process{\n\t\tConnection: sess.ID(),\n\t\tCommand:    sql.ProcessCommandSleep,\n\t\tHost:       sess.Client().Address,\n\t\tUser:       sess.Client().User,\n\t\tStartedAt:  time.Now(),\n\t\tDatabase:   sess.GetCurrentDatabase(),\n\t}\n}\n\nfunc (pl *ProcessList) RemoveConnection(connID uint32) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\tp := pl.procs[connID]\n\tif p != nil {\n\t\tsql.StatusVariables.IncrementGlobal(\"Threads_connected\", -1)\n\t\tif p.Kill != nil {\n\t\t\tp.Kill()\n\t\t}\n\t\tdelete(pl.byQueryPid, p.QueryPid)\n\t\tdelete(pl.procs, connID)\n\t}\n}\n\nfunc (pl *ProcessList) BeginQuery(\n\tctx *sql.Context,\n\tquery string,\n) (*sql.Context, error) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\n\tsql.StatusVariables.IncrementGlobal(\"Threads_running\", 1)\n\n\tid := ctx.Session.ID()\n\tpid := ctx.Pid()\n\tp := pl.procs[id]\n\tif p == nil {\n\t\treturn nil, errors.New(\"internal error: connection not registered with process list\")\n\t}\n\tif _, ok := pl.byQueryPid[pid]; ok {\n\t\treturn nil, sql.ErrPidAlreadyUsed.New(pid)\n\t}\n\n\tnewCtx, cancel := context.WithCancel(ctx)\n\tctx = ctx.WithContext(newCtx)\n\n\tp.Command = sql.ProcessCommandQuery\n\tp.Query = query\n\tp.QueryPid = pid\n\tp.StartedAt = time.Now()\n\tp.Kill = cancel\n\tp.Progress = make(map[string]sql.TableProgress)\n\n\tpl.byQueryPid[ctx.Pid()] = ctx.Session.ID()\n\n\treturn ctx, nil\n}\n\nfunc (pl *ProcessList) EndQuery(ctx *sql.Context) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\tid := ctx.Session.ID()\n\tpid := ctx.Pid()\n\tdelete(pl.byQueryPid, pid)\n\tp := pl.procs[id]\n\n\tif p != nil && p.QueryPid == pid {\n\t\tprocessTime := time.Now().Sub(p.StartedAt)\n\t\tlongQueryTime := getLongQueryTime()\n\t\tif longQueryTime > 0 && processTime.Seconds() > longQueryTime {\n\t\t\tsql.IncrementStatusVariable(ctx, \"Slow_queries\", 1)\n\t\t}\n\n\t\tsql.StatusVariables.IncrementGlobal(\"Threads_running\", -1)\n\t\tp.Command = sql.ProcessCommandSleep\n\t\tp.Query = \"\"\n\t\tp.StartedAt = time.Now()\n\t\tp.Kill()\n\t\tp.Kill = nil\n\t\tp.QueryPid = 0\n\t\tp.Progress = nil\n\t}\n}\n\n// UpdateTableProgress updates the progress of the table with the given name for the\n// process with the given pid.\nfunc (pl *ProcessList) UpdateTableProgress(pid uint64, name string, delta int64) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\n\tid, ok := pl.byQueryPid[pid]\n\tif !ok {\n\t\treturn\n\t}\n\tp, ok := pl.procs[id]\n\tif !ok {\n\t\treturn\n\t}\n\n\tprogress, ok := p.Progress[name]\n\tif !ok {\n\t\tprogress = sql.NewTableProgress(name, -1)\n\t}\n\n\tprogress.Done += delta\n\tp.Progress[name] = progress\n}\n\n// UpdatePartitionProgress updates the progress of the table partition with the\n// given name for the process with the given pid.\nfunc (pl *ProcessList) UpdatePartitionProgress(pid uint64, tableName, partitionName string, delta int64) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\n\tid, ok := pl.byQueryPid[pid]\n\tif !ok {\n\t\treturn\n\t}\n\tp, ok := pl.procs[id]\n\tif !ok {\n\t\treturn\n\t}\n\n\ttablePg, ok := p.Progress[tableName]\n\tif !ok {\n\t\treturn\n\t}\n\n\tpartitionPg, ok := tablePg.PartitionsProgress[partitionName]\n\tif !ok {\n\t\tpartitionPg = sql.PartitionProgress{Progress: sql.Progress{Name: partitionName, Total: -1}}\n\t}\n\n\tpartitionPg.Done += delta\n\ttablePg.PartitionsProgress[partitionName] = partitionPg\n}\n\n// AddTableProgress adds a new item to track progress from to the process with\n// the given pid. If the pid does not exist, it will do nothing.\nfunc (pl *ProcessList) AddTableProgress(pid uint64, name string, total int64) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\n\tid, ok := pl.byQueryPid[pid]\n\tif !ok {\n\t\treturn\n\t}\n\tp, ok := pl.procs[id]\n\tif !ok {\n\t\treturn\n\t}\n\n\tif pg, ok := p.Progress[name]; ok {\n\t\tpg.Total = total\n\t\tp.Progress[name] = pg\n\t} else {\n\t\tp.Progress[name] = sql.NewTableProgress(name, total)\n\t}\n}\n\n// AddPartitionProgress adds a new item to track progress from to the process with\n// the given pid. If the pid or the table does not exist, it will do nothing.\nfunc (pl *ProcessList) AddPartitionProgress(pid uint64, tableName, partitionName string, total int64) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\n\tid, ok := pl.byQueryPid[pid]\n\tif !ok {\n\t\treturn\n\t}\n\tp, ok := pl.procs[id]\n\tif !ok {\n\t\treturn\n\t}\n\n\ttablePg, ok := p.Progress[tableName]\n\tif !ok {\n\t\treturn\n\t}\n\n\tif pg, ok := tablePg.PartitionsProgress[partitionName]; ok {\n\t\tpg.Total = total\n\t\ttablePg.PartitionsProgress[partitionName] = pg\n\t} else {\n\t\ttablePg.PartitionsProgress[partitionName] =\n\t\t\tsql.PartitionProgress{Progress: sql.Progress{Name: partitionName, Total: total}}\n\t}\n}\n\n// RemoveTableProgress removes an existing item tracking progress from the\n// process with the given pid, if it exists.\nfunc (pl *ProcessList) RemoveTableProgress(pid uint64, name string) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\n\tid, ok := pl.byQueryPid[pid]\n\tif !ok {\n\t\treturn\n\t}\n\tp, ok := pl.procs[id]\n\tif !ok {\n\t\treturn\n\t}\n\n\tdelete(p.Progress, name)\n}\n\n// RemovePartitionProgress removes an existing item tracking progress from the\n// process with the given pid, if it exists.\nfunc (pl *ProcessList) RemovePartitionProgress(pid uint64, tableName, partitionName string) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\n\tid, ok := pl.byQueryPid[pid]\n\tif !ok {\n\t\treturn\n\t}\n\tp, ok := pl.procs[id]\n\tif !ok {\n\t\treturn\n\t}\n\n\ttablePg, ok := p.Progress[tableName]\n\tif !ok {\n\t\treturn\n\t}\n\n\tdelete(tablePg.PartitionsProgress, partitionName)\n}\n\n// Kill terminates all queries for a given connection id.\nfunc (pl *ProcessList) Kill(connID uint32) {\n\tpl.mu.Lock()\n\tdefer pl.mu.Unlock()\n\n\tp := pl.procs[connID]\n\tif p != nil && p.Kill != nil {\n\t\tlogrus.Infof(\"kill query: pid %d\", p.QueryPid)\n\t\tp.Kill()\n\t}\n}\n\n// getLongQueryTime returns the value of the long_query_time system variable. If any errors are encountered loading\n// the value, then an error is logged and 0 is returned.\nfunc getLongQueryTime() float64 {\n\t_, longQueryTimeValue, ok := sql.SystemVariables.GetGlobal(\"long_query_time\")\n\tif !ok {\n\t\tlogrus.Errorf(\"unable to find long_query_time system variable\")\n\t\treturn 0\n\t}\n\tlongQueryTime, ok := longQueryTimeValue.(float64)\n\tif !ok {\n\t\tlogrus.Errorf(fmt.Sprintf(\"unexpected type for value of long_query_time system variable: %T\", longQueryTimeValue))\n\t\treturn 0\n\t}\n\treturn longQueryTime\n}\n"
        },
        {
          "name": "processlist_test.go",
          "type": "blob",
          "size": 5.9267578125,
          "content": "// Copyright 2021 Dolthub, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage sqle\n\nimport (\n\t\"context\"\n\t\"sort\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/dolthub/go-mysql-server/sql\"\n\t\"github.com/dolthub/go-mysql-server/sql/variables\"\n)\n\nfunc TestProcessList(t *testing.T) {\n\trequire := require.New(t)\n\tvariables.InitStatusVariables()\n\n\tclientHostOne := \"127.0.0.1:34567\"\n\tclientHostTwo := \"127.0.0.1:34568\"\n\tp := NewProcessList()\n\tp.AddConnection(1, clientHostOne)\n\tsess := sql.NewBaseSessionWithClientServer(\"0.0.0.0:3306\", sql.Client{Address: clientHostOne, User: \"foo\"}, 1)\n\tsess.SetCurrentDatabase(\"test_db\")\n\tp.ConnectionReady(sess)\n\tctx := sql.NewContext(context.Background(), sql.WithPid(1), sql.WithSession(sess))\n\tctx, err := p.BeginQuery(ctx, \"SELECT foo\")\n\trequire.NoError(err)\n\n\trequire.Equal(uint64(1), ctx.Pid())\n\trequire.Len(p.procs, 1)\n\n\tp.AddTableProgress(ctx.Pid(), \"a\", 5)\n\tp.AddTableProgress(ctx.Pid(), \"b\", 6)\n\n\texpectedProcess := &sql.Process{\n\t\tQueryPid:   1,\n\t\tConnection: 1,\n\t\tHost:       clientHostOne,\n\t\tProgress: map[string]sql.TableProgress{\n\t\t\t\"a\": {sql.Progress{Name: \"a\", Done: 0, Total: 5}, map[string]sql.PartitionProgress{}},\n\t\t\t\"b\": {sql.Progress{Name: \"b\", Done: 0, Total: 6}, map[string]sql.PartitionProgress{}},\n\t\t},\n\t\tUser:      \"foo\",\n\t\tQuery:     \"SELECT foo\",\n\t\tCommand:   sql.ProcessCommandQuery,\n\t\tStartedAt: p.procs[1].StartedAt,\n\t\tDatabase:  \"test_db\",\n\t}\n\trequire.NotNil(p.procs[1].Kill)\n\tp.procs[1].Kill = nil\n\trequire.Equal(expectedProcess, p.procs[1])\n\n\tp.AddPartitionProgress(ctx.Pid(), \"b\", \"b-1\", -1)\n\tp.AddPartitionProgress(ctx.Pid(), \"b\", \"b-2\", -1)\n\tp.AddPartitionProgress(ctx.Pid(), \"b\", \"b-3\", -1)\n\n\tp.UpdatePartitionProgress(ctx.Pid(), \"b\", \"b-2\", 1)\n\n\tp.RemovePartitionProgress(ctx.Pid(), \"b\", \"b-3\")\n\n\texpectedProgress := map[string]sql.TableProgress{\n\t\t\"a\": {sql.Progress{Name: \"a\", Total: 5}, map[string]sql.PartitionProgress{}},\n\t\t\"b\": {sql.Progress{Name: \"b\", Total: 6}, map[string]sql.PartitionProgress{\n\t\t\t\"b-1\": {sql.Progress{Name: \"b-1\", Done: 0, Total: -1}},\n\t\t\t\"b-2\": {sql.Progress{Name: \"b-2\", Done: 1, Total: -1}},\n\t\t}},\n\t}\n\trequire.Equal(expectedProgress, p.procs[1].Progress)\n\n\tp.AddConnection(2, clientHostTwo)\n\tsess = sql.NewBaseSessionWithClientServer(\"0.0.0.0:3306\", sql.Client{Address: clientHostTwo, User: \"foo\"}, 2)\n\tp.ConnectionReady(sess)\n\tctx = sql.NewContext(context.Background(), sql.WithPid(2), sql.WithSession(sess))\n\tctx, err = p.BeginQuery(ctx, \"SELECT bar\")\n\trequire.NoError(err)\n\n\tp.AddTableProgress(ctx.Pid(), \"foo\", 2)\n\n\trequire.Equal(uint64(2), ctx.Pid())\n\trequire.Len(p.procs, 2)\n\n\tp.UpdateTableProgress(1, \"a\", 3)\n\tp.UpdateTableProgress(1, \"a\", 1)\n\tp.UpdateTableProgress(1, \"b\", 2)\n\tp.UpdateTableProgress(2, \"foo\", 1)\n\n\trequire.Equal(int64(4), p.procs[1].Progress[\"a\"].Done)\n\trequire.Equal(int64(2), p.procs[1].Progress[\"b\"].Done)\n\trequire.Equal(int64(1), p.procs[2].Progress[\"foo\"].Done)\n\n\tvar expected []sql.Process\n\tfor _, p := range p.procs {\n\t\tnp := *p\n\t\tnp.Kill = nil\n\t\texpected = append(expected, np)\n\t}\n\n\tresult := p.Processes()\n\tfor i := range result {\n\t\tresult[i].Kill = nil\n\t}\n\n\tsortById(expected)\n\tsortById(result)\n\trequire.Equal(expected, result)\n\n\tp.EndQuery(ctx)\n\n\trequire.Len(p.procs, 2)\n\tproc, ok := p.procs[2]\n\trequire.True(ok)\n\trequire.Equal(sql.ProcessCommandSleep, proc.Command)\n}\n\nfunc sortById(slice []sql.Process) {\n\tsort.Slice(slice, func(i, j int) bool {\n\t\treturn slice[i].Connection < slice[j].Connection\n\t})\n}\n\nfunc TestKillConnection(t *testing.T) {\n\tpl := NewProcessList()\n\n\tpl.AddConnection(1, \"\")\n\tpl.AddConnection(2, \"\")\n\ts1 := sql.NewBaseSessionWithClientServer(\"\", sql.Client{}, 1)\n\ts2 := sql.NewBaseSessionWithClientServer(\"\", sql.Client{}, 2)\n\tpl.ConnectionReady(s1)\n\tpl.ConnectionReady(s2)\n\n\t_, err := pl.BeginQuery(\n\t\tsql.NewContext(context.Background(), sql.WithPid(3), sql.WithSession(s1)),\n\t\t\"foo\",\n\t)\n\trequire.NoError(t, err)\n\n\t_, err = pl.BeginQuery(\n\t\tsql.NewContext(context.Background(), sql.WithPid(4), sql.WithSession(s2)),\n\t\t\"foo\",\n\t)\n\trequire.NoError(t, err)\n\n\tvar killed = make(map[uint64]bool)\n\n\tpl.procs[1].Kill = func() {\n\t\tkilled[1] = true\n\t}\n\tpl.procs[2].Kill = func() {\n\t\tkilled[2] = true\n\t}\n\n\tpl.Kill(1)\n\trequire.Len(t, pl.procs, 2)\n\n\trequire.True(t, killed[1])\n\trequire.False(t, killed[2])\n}\n\n// TestSlowQueryTracking tests that processes that take longer than @@long_query_time increment the\n// Slow_queries status variable.\nfunc TestSlowQueryTracking(t *testing.T) {\n\t_, value, ok := sql.StatusVariables.GetGlobal(\"Slow_queries\")\n\trequire.True(t, ok)\n\trequire.Equal(t, uint64(0), value)\n\n\tp := NewProcessList()\n\tp.AddConnection(1, \"127.0.0.1:34567\")\n\tsess := sql.NewBaseSessionWithClientServer(\"0.0.0.0:3306\",\n\t\tsql.Client{Address: \"127.0.0.1:34567\", User: \"foo\"}, 1)\n\tsess.SetCurrentDatabase(\"test_db\")\n\tp.ConnectionReady(sess)\n\tctx := sql.NewContext(context.Background(), sql.WithPid(1), sql.WithSession(sess))\n\tctx, err := p.BeginQuery(ctx, \"SELECT foo\")\n\trequire.NoError(t, err)\n\n\t// Change @@long_query_time so we don't have to wait for 10 seconds\n\trequire.NoError(t, sql.SystemVariables.SetGlobal(\"long_query_time\", 1))\n\ttime.Sleep(1_500 * time.Millisecond)\n\tp.EndQuery(ctx)\n\n\t// Status variables are updated asynchronously, so try a few times to find the updated value\n\tfound := false\n\tfor range 10 {\n\t\t_, value, ok = sql.StatusVariables.GetGlobal(\"Slow_queries\")\n\t\trequire.True(t, ok)\n\t\tif value == uint64(1) {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\trequire.True(t, found, \"Never found Slow_queries value updated\")\n}\n"
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "sql",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools.go",
          "type": "blob",
          "size": 0.08984375,
          "content": "//go:build tools\n// +build tools\n\npackage sqle\n\nimport _ \"golang.org/x/tools/cmd/goimports\"\n"
        }
      ]
    }
  ]
}