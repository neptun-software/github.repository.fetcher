{
  "metadata": {
    "timestamp": 1736566470633,
    "page": 16,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dromara/carbon",
      "stars": 4929,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.193359375,
          "content": "# http://editorconfig.org\nroot = true\n\n[*]\nindent_style = tab\ncharset = utf-8\ntrim_trailing_whitespace = true\n\n[*.md]\nindent_size = 4\ntrim_trailing_whitespace = false\n\n[lang/*.json]\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 5.6279296875,
          "content": "---\n# golangci-lint configuration file made by @ccoVeille\n# Source: https://github.com/ccoVeille/golangci-lint-config-examples/\n# Author: @ccoVeille\n# License: MIT\n# Variant: 03-safe\n# Version: v1.2.0\n#\nlinters:\n  # some linters are enabled by default\n  # https://golangci-lint.run/usage/linters/\n  #\n  # enable some extra linters\n  enable:\n    # Errcheck is a program for checking for unchecked errors in Go code.\n    - errcheck\n\n    # Linter for Go source code that specializes in simplifying code.\n    - gosimple\n\n    # Vet examines Go source code and reports suspicious constructs.\n    - govet\n\n    # Detects when assignments to existing variables are not used.\n    - ineffassign\n\n    # It's a set of rules from staticcheck. See https://staticcheck.io/\n    - staticcheck\n\n    # Fast, configurable, extensible, flexible, and beautiful linter for Go.\n    # Drop-in replacement of golint.\n    - revive\n\n    # check imports order and makes it always deterministic.\n    - gci\n\n    # make sure to use t.Helper() when needed\n    - thelper\n\n    # mirror suggests rewrites to avoid unnecessary []byte/string conversion\n    - mirror\n\n    # detect the possibility to use variables/constants from the Go standard library.\n    - usestdlibvars\n\n    # Finds commonly misspelled English words.\n    - misspell\n\n    # Checks for duplicate words in the source code.\n    - dupword\n\n    # linter to detect errors invalid key values count\n    - loggercheck\n\n    # detects nested contexts in loops or function literals\n    - fatcontext\n\n    # Checks usage of github.com/stretchr/testify/require\n    - testifylint\n\nlinters-settings:\n  gci:  # define the section orders for imports\n    sections:\n      # Standard section: captures all standard packages.\n      - standard\n      # Default section: catchall that is not standard or custom\n      - default\n      # linters that related to local tool, so they should be separated\n      - localmodule\n\n  revive:\n    rules:\n      # Check for commonly mistaken usages of the sync/atomic package\n      - name: atomic\n\n      # Blank import should be only in a main or test package, or have a comment justifying it.\n      - name: blank-imports\n\n      # Spots comments not starting with a space\n      - name: comment-spacings\n\n      # context.Context() should be the first parameter of a function when provided as argument.\n      - name: context-as-argument\n        arguments:\n          - allowTypesBefore: \"*testing.T\"\n\n      # Basic types should not be used as a key in `context.WithValue`\n      - name: context-keys-type\n\n      # warns on some common mistakes when using defer statement.\n      - name: defer\n\n      # Importing with `.` makes the programs much harder to understand\n      - name: dot-imports\n\n      # suggest to simplify if-then-else constructions when possible\n      - name: early-return\n\n      # Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.\n      - name: empty-block\n\n      # for better readability, variables of type `error` must be named with the prefix `err`.\n      - name: error-naming\n\n      # for better readability, the errors should be last in the list of returned values by a function.\n      - name: error-return\n\n      # for better readability, error messages should not be capitalized or end with punctuation or a newline.\n      - name: error-strings\n\n      # report when replacing `errors.New(fmt.Sprintf())` with `fmt.Errorf()` is possible\n      - name: errorf\n\n      # Checking if an error is nil to just after return the error or nil is redundant.\n      - name: if-return\n\n      # incrementing an integer variable by 1 is recommended to be done using the `++` operator\n      - name: increment-decrement\n\n      # highlights redundant else-blocks that can be eliminated from the code\n      - name: indent-error-flow\n\n      # This rule suggests a shorter way of writing ranges that do not use the second value.\n      - name: range\n\n      # receiver names in a method should reflect the struct name (p for Person, for example)\n      - name: receiver-naming\n\n      # redefining built in names (true, false, append, make) can lead to bugs very difficult to detect.\n      - name: redefines-builtin-id\n\n      # redundant else-blocks that can be eliminated from the code.\n      - name: superfluous-else\n\n      # prevent confusing name for variables when using `time` package\n      - name: time-naming\n\n      # warns when an exported function or method returns a value of an un-exported type.\n      - name: unexported-return\n\n      # spots and proposes to remove unreachable code. also helps to spot errors\n      - name: unreachable-code\n\n      # Functions or methods with unused parameters can be a symptom of an unfinished refactoring or a bug.\n      - name: unused-parameter\n\n      # warns on useless break statements in case clauses of switch and select statements\n      - name: useless-break\n\n      # report when a variable declaration can be simplified\n      - name: var-declaration\n\n      # warns when initialism, variable or package naming conventions are not followed.\n      - name: var-naming\n\n  dupword:\n    # Keywords used to ignore detection.\n    # Default: []\n    ignore:\n    #  - \"blah\" # this will accept \"blah blah …\" as a valid duplicate word\n\n  misspell:\n    # Correct spellings using locale preferences for US or UK.\n    # Setting locale to US will correct the British spelling of 'colour' to 'color'.\n    # Default (\"\") is to use a neutral variety of English.\n    locale: US\n\n    # List of words to ignore\n    # among the one defined in https://github.com/golangci/misspell/blob/master/words.go\n    ignore-words:\n    #  - valor\n    #  - and\n\n    # Extra word corrections.\n    extra-words:\n    #  - typo: \"whattever\"\n    #    correction: \"whatever\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2022 gouguoyin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.cn.md",
          "type": "blob",
          "size": 73.67578125,
          "content": "# Carbon  #\n\n[![Carbon Release](https://img.shields.io/github/release/dromara/carbon.svg)](https://github.com/dromara/carbon/releases)\n[![Go Test](https://github.com/dromara/carbon/actions/workflows/test.yml/badge.svg)](https://github.com/dromara/carbon/actions)\n[![Go Report Card](https://goreportcard.com/badge/github.com/dromara/carbon/v2)](https://goreportcard.com/report/github.com/dromara/carbon/v2)\n[![Go Coverage](https://codecov.io/gh/dromara/carbon/branch/master/graph/badge.svg)](https://codecov.io/gh/dromara/carbon)\n[![Carbon Doc](https://img.shields.io/badge/go.dev-reference-brightgreen?logo=go&logoColor=white&style=flat)](https://pkg.go.dev/github.com/dromara/carbon/v2)\n[![License](https://img.shields.io/github/license/dromara/carbon)](https://github.com/dromara/carbon/blob/master/LICENSE)\n\n简体中文 | [English](README.md) | [日本語](README.jp.md)\n\n#### 项目简介\n\n一个轻量级、语义化、对开发者友好的 `golang` 时间处理库，支持链式调用，已被 [awesome-go](https://github.com/yinggaozhen/awesome-go-cn#日期和时间 \"awesome-go-cn\") 收录，并获得 `gitee` 2024 年最有价值项目（`GVP`）和 `gitcode` 2024 年度开源摘星计划 (`G-Star`) 项目 \n\n#### 仓库地址\n\n[github.com/dromara/carbon](https://github.com/dromara/carbon \"github.com/dromara/carbon\")\n\n[gitee.com/dromara/carbon](https://gitee.com/dromara/carbon \"gitee.com/dromara/carbon\")\n\n[gitcode.com/dromara/carbon](https://gitcode.com/dromara/carbon \"gitcode.com/dromara/carbon\")\n\n#### 安装使用\n\n##### go version >= 1.17\n\n```go\n// 使用 github 库\ngo get -u github.com/dromara/carbon/v2\nimport \"github.com/dromara/carbon/v2\"\n\n// 使用 gitee 库\ngo get -u gitee.com/dromara/carbon/v2\nimport \"gitee.com/dromara/carbon/v2\"\n\n// 使用 gitcode 库\ngo get -u gitcode.com/dromara/carbon/v2\nimport \"gitcode.com/dromara/carbon/v2\"\n```\n\n`Carbon` 已经捐赠给了 [dromara](https://dromara.org/ \"dromara\") 组织，仓库地址发生了改变，如果之前用的路径是 `golang-module/carbon`，请在 `go.mod` 里将原地址更换为新路径，或执行如下命令\n\n```go\ngo mod edit -replace github.com/golang-module/carbon/v2=github.com/dromara/carbon/v2\n```\n\n#### 用法示例\n\n> 假设当前时间为 2020-08-05 13:14:15.999999999 +0800 CST\n\n##### 设置全局默认值\n\n```go\ncarbon.SetDefault(carbon.Default{\n  Layout: carbon.DateTimeLayout,\n  Timezone: carbon.PRC,\n  WeekStartsAt: carbon.Sunday,\n  Locale: \"zh-CN\", // 取值范围：lang 目录下翻译文件名，不包含文件后缀\n})\n```\n> 建议在入口文件如 `main.go` 中设置\n\n##### `Carbon` 和 `time.Time` 互转\n\n```go\n// 将标准 time.Time 转换成 Carbon\ncarbon.CreateFromStdTime(time.Now())\n// 将 Carbon 转换成标准 time.Time\ncarbon.Now().StdTime()\n```\n\n##### 昨天、今天、明天\n\n```go\n// 今天此刻\nfmt.Printf(\"%s\", carbon.Now()) // 2020-08-05 13:14:15\ncarbon.Now().String() // 2020-08-05 13:14:15\ncarbon.Now().ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Now().ToDateTimeString() // 2020-08-05 13:14:15\n// 今天日期\ncarbon.Now().ToDateString() // 2020-08-05\n// 今天时间\ncarbon.Now().ToTimeString() // 13:14:15\n// 指定时区的今天此刻\ncarbon.Now(Carbon.NewYork).ToDateTimeString() // 2020-08-05 14:14:15\n// 今天秒级时间戳\ncarbon.Now().Timestamp() // 1596604455\n// 今天毫秒级时间戳\ncarbon.Now().TimestampMilli() // 1596604455999\n// 今天微秒级时间戳\ncarbon.Now().TimestampMicro() // 1596604455999999\n// 今天纳秒级时间戳\ncarbon.Now().TimestampNano() // 1596604455999999999\n\n// 昨天此刻\nfmt.Printf(\"%s\", carbon.Yesterday()) // 2020-08-04 13:14:15\ncarbon.Yesterday().String() // 2020-08-04 13:14:15\ncarbon.Yesterday().ToString() // 2020-08-04 13:14:15 +0800 CST\ncarbon.Yesterday().ToDateTimeString() // 2020-08-04 13:14:15\n// 昨天日期\ncarbon.Yesterday().ToDateString() // 2020-08-04\n// 昨天时间\ncarbon.Yesterday().ToTimeString() // 13:14:15\n// 指定日期的昨天此刻\ncarbon.Parse(\"2021-01-28 13:14:15\").Yesterday().ToDateTimeString() // 2021-01-27 13:14:15\n// 指定时区的昨天此刻\ncarbon.Yesterday(Carbon.NewYork).ToDateTimeString() // 2020-08-04 14:14:15\n// 昨天秒级时间戳\ncarbon.Yesterday().Timestamp() // 1596518055\n// 昨天毫秒级时间戳\ncarbon.Yesterday().TimestampMilli() // 1596518055999\n// 昨天微秒级时间戳\ncarbon.Yesterday().TimestampMicro() // 1596518055999999\n// 昨天纳秒级时间戳\ncarbon.Yesterday().TimestampNano() // 1596518055999999999\n\n// 明天此刻\nfmt.Printf(\"%s\", carbon.Tomorrow()) // 2020-08-06 13:14:15\ncarbon.Tomorrow().String() // 2020-08-06 13:14:15\ncarbon.Tomorrow().ToString() // 2020-08-06 13:14:15 +0800 CST\ncarbon.Tomorrow().ToDateTimeString() // 2020-08-06 13:14:15\n// 明天日期\ncarbon.Tomorrow().ToDateString() // 2020-08-06\n// 明天时间\ncarbon.Tomorrow().ToTimeString() // 13:14:15\n// 指定日期的明天此刻\ncarbon.Parse(\"2021-01-28 13:14:15\").Tomorrow().ToDateTimeString() // 2021-01-29 13:14:15\n// 指定时区的明天此刻\ncarbon.Tomorrow(Carbon.NewYork).ToDateTimeString() // 2020-08-06 14:14:15\n// 明天秒级时间戳\ncarbon.Tomorrow().Timestamp() // 1596690855\n// 明天毫秒级时间戳\ncarbon.Tomorrow().TimestampMilli() // 1596690855999\n// 明天微秒级时间戳\ncarbon.Tomorrow().TimestampMicro() // 1596690855999999\n// 明天纳秒级时间戳\ncarbon.Tomorrow().TimestampNano() // 1596690855999999999\n```\n\n##### 创建 `Carbon` 实例\n\n```go\n// 从秒级时间戳创建 Carbon 实例\ncarbon.CreateFromTimestamp(-1).ToString() // 1970-01-01 07:59:59 +0800 CST\ncarbon.CreateFromTimestamp(0).ToString() // 1970-01-01 08:00:00 +0800 CST\ncarbon.CreateFromTimestamp(1).ToString() // 1970-01-01 08:00:01 +0800 CST\ncarbon.CreateFromTimestamp(1649735755).ToString() // 2022-04-12 11:55:55 +0800 CST\n// 从毫秒级时间戳创建 Carbon 实例\ncarbon.CreateFromTimestampMilli(1649735755981).ToString() // 2022-04-12 11:55:55.981 +0800 CST\n// 从微秒级时间戳创建 Carbon 实例\ncarbon.CreateFromTimestampMicro(1649735755981566).ToString() // 2022-04-12 11:55:55.981566 +0800 CST\n// 从纳秒级时间戳创建 Carbon 实例\ncarbon.CreateFromTimestampNano(1649735755981566000).ToString() // 2022-04-12 11:55:55.981566 +0800 CST\n\n// 从年月日时分秒创建 Carbon 实例\ncarbon.CreateFromDateTime(2020, 8, 5, 13, 14, 15).ToString() // 2020-08-05 13:14:15 +0800 CST\n// 从年月日时分秒创建 Carbon 实例，包含毫秒\ncarbon.CreateFromDateTimeMilli(2020, 8, 5, 13, 14, 15, 999).ToString() // 2020-08-05 13:14:15.999 +0800 CST\n// 从年月日时分秒创建 Carbon 实例，包含微秒\ncarbon.CreateFromDateTimeMicro(2020, 8, 5, 13, 14, 15, 999999).ToString() // 2020-08-05 13:14:15.999999 +0800 CST\n// 从年月日时分秒创建 Carbon 实例，包含纳秒\ncarbon.CreateFromDateTimeNano(2020, 8, 5, 13, 14, 15, 999999999).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n\n// 从年月日创建 Carbon 实例\ncarbon.CreateFromDate(2020, 8, 5).ToString() // 2020-08-05 00:00:00 +0800 CST\n// 从年月日创建 Carbon 实例，包含毫秒\ncarbon.CreateFromDateMilli(2020, 8, 5, 999).ToString() // 2020-08-05 00:00:00.999 +0800 CST\n// 从年月日创建 Carbon 实例，包含微秒\ncarbon.CreateFromDateMicro(2020, 8, 5, 999999).ToString() // 2020-08-05 00:00:00.999999 +0800 CST\n// 从年月日创建 Carbon 实例，包含纳秒\ncarbon.CreateFromDateNano(2020, 8, 5, 999999999).ToString() // 2020-08-05 00:00:00.999999999 +0800 CST\n\n// 从时分秒创建 Carbon 实例(年月日默认为当前年月日)\ncarbon.CreateFromTime(13, 14, 15).ToString() // 2020-08-05 13:14:15 +0800 CST\n// 从时分秒创建 Carbon 实例(年月日默认为当前年月日)，包含毫秒\ncarbon.CreateFromTimeMilli(13, 14, 15, 999).ToString() // 2020-08-05 13:14:15.999 +0800 CST\n// 从时分秒创建 Carbon 实例(年月日默认为当前年月日)，包含微秒\ncarbon.CreateFromTimeMicro(13, 14, 15, 999999).ToString() // 2020-08-05 13:14:15.999999 +0800 CST\n// 从时分秒创建 Carbon 实例(年月日默认为当前年月日)，包含纳秒\ncarbon.CreateFromTimeNano(13, 14, 15, 999999999).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n```\n\n##### 将 `时间字符串` 解析成 `Carbon` 实例\n\n```go\ncarbon.Parse(\"\").ToDateTimeString() // 空字符串\ncarbon.Parse(\"0\").ToDateTimeString() // 空字符串\ncarbon.Parse(\"00:00:00\").ToDateTimeString() // 空字符串\ncarbon.Parse(\"0000-00-00\").ToDateTimeString() // 空字符串\ncarbon.Parse(\"0000-00-00 00:00:00\").ToDateTimeString() // 空字符串\n\ncarbon.Parse(\"now\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"yesterday\").ToString() // 2020-08-04 13:14:15 +0800 CST\ncarbon.Parse(\"tomorrow\").ToString() // 2020-08-06 13:14:15 +0800 CST\n\ncarbon.Parse(\"2020\").ToString() // 2020-01-01 00:00:00 +0800 CST\ncarbon.Parse(\"2020-8\").ToString() // 2020-08-01 00:00:00 +0800 CST\ncarbon.Parse(\"2020-08\").ToString() // 2020-08-01 00:00:00 +0800 CST\ncarbon.Parse(\"2020-8-5\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"2020-8-05\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"2020-08-05\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"2020-08-05.999\").ToString() // 2020-08-05 00:00:00.999 +0800 CST\ncarbon.Parse(\"2020-08-05.999999\").ToString() // 2020-08-05 00:00:00.999999 +0800 CST\ncarbon.Parse(\"2020-08-05.999999999\").ToString() // 2020-08-05 00:00:00.999999999 +0800 CST\n\ncarbon.Parse(\"2020-8-5 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-8-05 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-5 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15.999\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15.999999\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n\ncarbon.Parse(\"2020-8-5T13:14:15+08:00\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-8-05T13:14:15+08:00\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15+08:00\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15.999+08:00\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15.999999+08:00\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n\ncarbon.Parse(\"20200805\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"20200805131415\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"20200805131415.999\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"20200805131415.999999\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"20200805131415.999999999\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\ncarbon.Parse(\"20200805131415.999+08:00\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"20200805131415.999999+08:00\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"20200805131415.999999999+08:00\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n\n```\n\n##### 通过 `格式模板` 将时间字符串解析成 `Carbon` 实例\n\n> 如果使用的字母与格式模板冲突时，请使用转义符转义该字母\n\n```go\ncarbon.ParseByFormat(\"2020|08|05 13|14|15\", \"Y|m|d H|i|s\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByFormat(\"It is 2020-08-05 13:14:15\", \"\\\\I\\\\t \\\\i\\\\s Y-m-d H:i:s\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByFormat(\"今天是 2020年08月05日13时14分15秒\", \"今天是 Y年m月d日H时i分s秒\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByFormat(\"2020-08-05 13:14:15\", \"Y-m-d H:i:s\", carbon.Tokyo).ToDateTimeString() // 2020-08-05 14:14:15\n```\n\n##### 通过 `布局模板` 将时间字符串解析成 `Carbon` 实例\n\n```go\ncarbon.ParseByLayout(\"2020|08|05 13|14|15\", \"2006|01|02 15|04|05\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByLayout(\"It is 2020-08-05 13:14:15\", \"It is 2006-01-02 15:04:05\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByLayout(\"今天是 2020年08月05日13时14分15秒\", \"今天是 2006年01月02日15时04分05秒\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByLayout(\"2020-08-05 13:14:15\", \"2006-01-02 15:04:05\", carbon.Tokyo).ToDateTimeString() // 2020-08-05 14:14:15\n```\n\n##### 时间边界\n\n```go\n// 本世纪开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfCentury().ToDateTimeString() // 2000-01-01 00:00:00\n// 本世纪结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfCentury().ToDateTimeString() // 2999-12-31 23:59:59\n\n// 本年代开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00\ncarbon.Parse(\"2021-08-05 13:14:15\").StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00\ncarbon.Parse(\"2029-08-05 13:14:15\").StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00\n// 本年代结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59\ncarbon.Parse(\"2021-08-05 13:14:15\").EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59\ncarbon.Parse(\"2029-08-05 13:14:15\").EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59\n\n// 本年开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfYear().ToDateTimeString() // 2020-01-01 00:00:00\n// 本年结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfYear().ToDateTimeString() // 2020-12-31 23:59:59\n\n// 本季度开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfQuarter().ToDateTimeString() // 2020-07-01 00:00:00\n// 本季度结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfQuarter().ToDateTimeString() // 2020-09-30 23:59:59\n\n// 本月开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfMonth().ToDateTimeString() // 2020-08-01 00:00:00\n// 本月结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfMonth().ToDateTimeString() // 2020-08-31 23:59:59\n\n// 本周开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfWeek().ToDateTimeString() // 2020-08-02 00:00:00\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Sunday).StartOfWeek().ToDateTimeString() // 2020-08-02 00:00:00\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Monday).StartOfWeek().ToDateTimeString() // 2020-08-03 00:00:00\n// 本周结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfWeek().ToDateTimeString() // 2020-08-08 23:59:59\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Sunday).EndOfWeek().ToDateTimeString() // 2020-08-08 23:59:59\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Monday).EndOfWeek().ToDateTimeString() // 2020-08-09 23:59:59\n\n// 本日开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfDay().ToDateTimeString() // 2020-08-05 00:00:00\n// 本日结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfDay().ToDateTimeString() // 2020-08-05 23:59:59\n\n// 本小时开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfHour().ToDateTimeString() // 2020-08-05 13:00:00\n// 本小时结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfHour().ToDateTimeString() // 2020-08-05 13:59:59\n\n// 本分钟开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfMinute().ToDateTimeString() // 2020-08-05 13:14:00\n// 本分钟结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfMinute().ToDateTimeString() // 2020-08-05 13:14:59\n\n// 本秒开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfSecond().ToString() // 2020-08-05 13:14:15 +0800 CST\n// 本秒结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfSecond().ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n```\n\n##### 时间旅行\n\n```go\n// 三个世纪后\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCenturies(3).ToDateTimeString() // 2320-02-29 13:14:15\n// 三个世纪后(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCenturiesNoOverflow(3).ToDateTimeString() // 2320-02-29 13:14:15\n// 一个世纪后\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCentury().ToDateTimeString() // 2120-02-29 13:14:15\n// 一个世纪后(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCenturyNoOverflow().ToDateTimeString() // 2120-02-29 13:14:15\n// 三个世纪前\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCenturies(3).ToDateTimeString() // 1720-02-29 13:14:15\n// 三个世纪前(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCenturiesNoOverflow(3).ToDateTimeString() // 1720-02-29 13:14:15\n// 一个世纪前\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCentury().ToDateTimeString() // 1920-02-29 13:14:15\n// 一世纪前(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCenturyNoOverflow().ToDateTimeString() // 1920-02-29 13:14:15\n\n// 三个年代后\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecades(3).ToDateTimeString() // 2050-03-01 13:14:15\n// 三个年代后(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecadesNoOverflow(3).ToDateTimeString() // 2050-02-28 13:14:15\n// 一个年代后\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecade().ToDateTimeString() // 2030-03-01 13:14:15\n// 一个年代后(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecadeNoOverflow().ToDateTimeString() // 2030-02-28 13:14:15\n// 三个年代前\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecades(3).ToDateTimeString() // 1990-03-01 13:14:15\n// 三个年代前(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecadesNoOverflow(3).ToDateTimeString() // 1990-02-28 13:14:15\n// 一个年代前\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecade().ToDateTimeString() // 2010-03-01 13:14:15\n// 一个年代前(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecadeNoOverflow().ToDateTimeString() // 2010-02-28 13:14:15\n\n// 三年后\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYears(3).ToDateTimeString() // 2023-03-01 13:14:15\n// 三年后(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYearsNoOverflow(3).ToDateTimeString() // 2023-02-28 13:14:15\n// 一年后\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYear().ToDateTimeString() // 2021-03-01 13:14:15\n// 一年后(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYearNoOverflow().ToDateTimeString() // 2021-02-28 13:14:15\n// 三年前\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYears(3).ToDateTimeString() // 2017-03-01 13:14:15\n// 三年前(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYearsNoOverflow(3).ToDateTimeString() // 2017-02-28 13:14:15\n// 一年前\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYear().ToDateTimeString() // 2019-03-01 13:14:15\n// 一年前(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYearNoOverflow().ToDateTimeString() // 2019-02-28 13:14:15\n\n// 三个季度后\ncarbon.Parse(\"2019-05-31 13:14:15\").AddQuarters(3).ToDateTimeString() // 2020-03-02 13:14:15\n// 三个季度后(月份不溢出)\ncarbon.Parse(\"2019-05-31 13:14:15\").AddQuartersNoOverflow(3).ToDateTimeString() // 2020-02-29 13:14:15\n// 一个季度后\ncarbon.Parse(\"2019-11-30 13:14:15\").AddQuarter().ToDateTimeString() // 2020-03-01 13:14:15\n// 一个季度后(月份不溢出)\ncarbon.Parse(\"2019-11-30 13:14:15\").AddQuarterNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n// 三个季度前\ncarbon.Parse(\"2019-08-31 13:14:15\").SubQuarters(3).ToDateTimeString() // 2019-03-03 13:14:15\n// 三个季度前(月份不溢出)\ncarbon.Parse(\"2019-08-31 13:14:15\").SubQuartersNoOverflow(3).ToDateTimeString() // 2019-02-28 13:14:15\n// 一个季度前\ncarbon.Parse(\"2020-05-31 13:14:15\").SubQuarter().ToDateTimeString() // 2020-03-02 13:14:15\n// 一个季度前(月份不溢出)\ncarbon.Parse(\"2020-05-31 13:14:15\").SubQuarterNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n\n// 三个月后\ncarbon.Parse(\"2020-02-29 13:14:15\").AddMonths(3).ToDateTimeString() // 2020-05-29 13:14:15\n// 三个月后(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddMonthsNoOverflow(3).ToDateTimeString() // 2020-05-29 13:14:15\n// 一个月后\ncarbon.Parse(\"2020-01-31 13:14:15\").AddMonth().ToDateTimeString() // 2020-03-02 13:14:15\n// 一个月后(月份不溢出)\ncarbon.Parse(\"2020-01-31 13:14:15\").AddMonthNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n// 三个月前\ncarbon.Parse(\"2020-02-29 13:14:15\").SubMonths(3).ToDateTimeString() // 2019-11-29 13:14:15\n// 三个月前(月份不溢出)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubMonthsNoOverflow(3).ToDateTimeString() // 2019-11-29 13:14:15\n// 一个月前\ncarbon.Parse(\"2020-03-31 13:14:15\").SubMonth().ToDateTimeString() // 2020-03-02 13:14:15\n// 一个月前(月份不溢出)\ncarbon.Parse(\"2020-03-31 13:14:15\").SubMonthNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n\n// 三周后\ncarbon.Parse(\"2020-02-29 13:14:15\").AddWeeks(3).ToDateTimeString() // 2020-03-21 13:14:15\n// 一周后\ncarbon.Parse(\"2020-02-29 13:14:15\").AddWeek().ToDateTimeString() // 2020-03-07 13:14:15\n// 三周前\ncarbon.Parse(\"2020-02-29 13:14:15\").SubWeeks(3).ToDateTimeString() // 2020-02-08 13:14:15\n// 一周前\ncarbon.Parse(\"2020-02-29 13:14:15\").SubWeek().ToDateTimeString() // 2020-02-22 13:14:15\n\n// 三天后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDays(3).ToDateTimeString() // 2020-08-08 13:14:15\n// 一天后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDay().ToDateTimeString() // 2020-08-05 13:14:15\n// 三天前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDays(3).ToDateTimeString() // 2020-08-02 13:14:15\n// 一天前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDay().ToDateTimeString() // 2020-08-04 13:14:15\n\n// 三小时后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddHours(3).ToDateTimeString() // 2020-08-05 16:14:15\n// 二小时半后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2.5h\").ToDateTimeString() // 2020-08-05 15:44:15\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2h30m\").ToDateTimeString() // 2020-08-05 15:44:15\n// 一小时后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddHour().ToDateTimeString() // 2020-08-05 14:14:15\n// 三小时前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubHours(3).ToDateTimeString() // 2020-08-05 10:14:15\n// 二小时半前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2.5h\").ToDateTimeString() // 2020-08-05 10:44:15\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2h30m\").ToDateTimeString() // 2020-08-05 10:44:15\n// 一小时前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubHour().ToDateTimeString() // 2020-08-05 12:14:15\n\n// 三分钟后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddMinutes(3).ToDateTimeString() // 2020-08-05 13:17:15\n// 二分钟半后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2.5m\").ToDateTimeString() // 2020-08-05 13:16:45\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2m30s\").ToDateTimeString() // 2020-08-05 13:16:45\n// 一分钟后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddMinute().ToDateTimeString() // 2020-08-05 13:15:15\n// 三分钟前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubMinutes(3).ToDateTimeString() // 2020-08-05 13:11:15\n// 二分钟半前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2.5m\").ToDateTimeString() // 2020-08-05 13:11:45\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2m30s\").ToDateTimeString() // 2020-08-05 13:11:45\n// 一分钟前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubMinute().ToDateTimeString() // 2020-08-05 13:13:15\n\n// 三秒钟后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddSeconds(3).ToDateTimeString() // 2020-08-05 13:14:18\n// 二秒钟半后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2.5s\").ToDateTimeString() // 2020-08-05 13:14:17\n// 一秒钟后\ncarbon.Parse(\"2020-08-05 13:14:15\").AddSecond().ToDateTimeString() // 2020-08-05 13:14:16\n// 三秒钟前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubSeconds(3).ToDateTimeString() // 2020-08-05 13:14:12\n// 二秒钟半前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2.5s\").ToDateTimeString() // 2020-08-05 13:14:12\n// 一秒钟前\ncarbon.Parse(\"2020-08-05 13:14:15\").SubSecond().ToDateTimeString() // 2020-08-05 13:14:14\n\n// 三毫秒后\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMilliseconds(3).ToString() // 2020-08-05 13:14:15.225222222 +0800 CST\n// 一毫秒后\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMillisecond().ToString() // 2020-08-05 13:14:15.223222222 +0800 CST\n// 三毫秒前\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMilliseconds(3).ToString() // 2020-08-05 13:14:15.219222222 +0800 CST\n// 一毫秒前\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMillisecond().ToString() // 2020-08-05 13:14:15.221222222 +0800 CST\n\n// 三微秒后\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMicroseconds(3).ToString() // 2020-08-05 13:14:15.222225222 +0800 CST\n// 一微秒后\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMicrosecond().ToString() // 2020-08-05 13:14:15.222223222 +0800 CST\n// 三微秒前\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMicroseconds(3).ToString() // 2020-08-05 13:14:15.222219222 +0800 CST\n// 一微秒前\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMicrosecond().ToString() // 2020-08-05 13:14:15.222221222 +0800 CST\n\n// 三纳秒后\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddNanoseconds(3).ToString() // 2020-08-05 13:14:15.222222225 +0800 CST\n// 一纳秒后\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddNanosecond().ToString() // 2020-08-05 13:14:15.222222223 +0800 CST\n// 三纳秒前\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubNanoseconds(3).ToString() // 2020-08-05 13:14:15.222222219 +0800 CST\n// 一纳秒前\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubNanosecond().ToString() // 2020-08-05 13:14:15.222222221 +0800 CST\n```\n\n##### 时间差值\n\n```go\n// 相差多少年\ncarbon.Parse(\"2021-08-05 13:14:15\").DiffInYears(carbon.Parse(\"2020-08-05 13:14:15\")) // -1\n// 相差多少年（绝对值）\ncarbon.Parse(\"2021-08-05 13:14:15\").DiffAbsInYears(carbon.Parse(\"2020-08-05 13:14:15\")) // 1\n\n// 相差多少月\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInMonths(carbon.Parse(\"2020-07-05 13:14:15\")) // -1\n// 相差多少月（绝对值）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInMonths(carbon.Parse(\"2020-07-05 13:14:15\")) // 1\n\n// 相差多少周\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInWeeks(carbon.Parse(\"2020-07-28 13:14:15\")) // -1\n// 相差多少周（绝对值）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInWeeks(carbon.Parse(\"2020-07-28 13:14:15\")) // 1\n\n// 相差多少天\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInDays(carbon.Parse(\"2020-08-04 13:14:15\")) // -1\n// 相差多少天（绝对值）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInDays(carbon.Parse(\"2020-08-04 13:14:15\")) // 1\n\n// 相差多少小时\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInHours(carbon.Parse(\"2020-08-05 12:14:15\")) // -1\n// 相差多少小时（绝对值）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInHours(carbon.Parse(\"2020-08-05 12:14:15\")) // 1\n\n// 相差多少分\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInMinutes(carbon.Parse(\"2020-08-05 13:13:15\")) // -1\n// 相差多少分（绝对值）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInMinutes(carbon.Parse(\"2020-08-05 13:13:15\")) // 1\n\n// 相差多少秒\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInSeconds(carbon.Parse(\"2020-08-05 13:14:14\")) // -1\n// 相差多少秒（绝对值）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInSeconds(carbon.Parse(\"2020-08-05 13:14:14\")) // 1\n\n// 相差字符串\ncarbon.Now().DiffInString() // just now\ncarbon.Now().AddYearsNoOverflow(1).DiffInString() // -1 year\ncarbon.Now().SubYearsNoOverflow(1).DiffInString() // 1 year\n// 相差字符串（绝对值）\ncarbon.Now().DiffAbsInString(carbon.Now()) // just now\ncarbon.Now().AddYearsNoOverflow(1).DiffAbsInString(carbon.Now()) // 1 year\ncarbon.Now().SubYearsNoOverflow(1).DiffAbsInString(carbon.Now()) // 1 year\n\n// 相差时长\nnow := carbon.Now()\nnow.DiffInDuration(now).String() // 0s\nnow.AddHour().DiffInDuration(now).String() // 1h0m0s\nnow.SubHour().DiffInDuration(now).String() // -1h0m0s\n// 相差时长（绝对值）\nnow.DiffAbsInDuration(now).String() // 0s\nnow.AddHour().DiffAbsInDuration(now).String() // 1h0m0s\nnow.SubHour().DiffAbsInDuration(now).String() // 1h0m0s\n\n// 对人类友好的可读格式时间差\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffForHumans() // just now\ncarbon.Parse(\"2019-08-05 13:14:15\").DiffForHumans() // 1 year ago\ncarbon.Parse(\"2018-08-05 13:14:15\").DiffForHumans() // 2 years ago\ncarbon.Parse(\"2021-08-05 13:14:15\").DiffForHumans() // 1 year from now\ncarbon.Parse(\"2022-08-05 13:14:15\").DiffForHumans() // 2 years from now\n\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 1 year before\ncarbon.Parse(\"2019-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 2 years before\ncarbon.Parse(\"2018-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 1 year after\ncarbon.Parse(\"2022-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 2 years after\n```\n\n##### 时间极值\n\n```go\nc0 := carbon.Parse(\"2023-04-01\")\nc1 := carbon.Parse(\"2023-03-28\")\nc2 := carbon.Parse(\"2023-04-16\")\n// 返回最近的 Carbon 实例\nc0.Closest(c1, c2) // c1\n// 返回最远的 Carbon 实例\nc0.Farthest(c1, c2) // c2\n\nyesterday := carbon.Yesterday()\ntoday     := carbon.Now()\ntomorrow  := carbon.Tomorrow()\n// 返回最大的 Carbon 实例\ncarbon.Max(yesterday, today, tomorrow) // tomorrow\n// 返回最小的 Carbon 实例\ncarbon.Min(yesterday, today, tomorrow) // yesterday\n\n// 返回 Carbon 的最大值\ncarbon.MaxValue().ToString() // 9999-12-31 23:59:59.999999999 +0000 UTC\n// 返回 Carbon 的最小值\ncarbon.MinValue().ToString() // -9998-01-01 00:00:00 +0000 UTC\n```\n\n##### 时间判断\n\n```go\n// 是否是夏令时\ncarbon.Parse(\"\").IsDST() // false\ncarbon.Parse(\"0\").IsDST() // false\ncarbon.Parse(\"0000-00-00 00:00:00\").IsDST() // false\ncarbon.Parse(\"0000-00-00\").IsDST() // false\ncarbon.Parse(\"00:00:00\").IsDST() // false\ncarbon.Parse(\"2023-01-01\", \"Australia/Brisbane\").IsDST() // false\ncarbon.Parse(\"2023-01-01\", \"Australia/Sydney\").IsDST() // true\n\n// 是否是零值时间(0001-01-01 00:00:00 +0000 UTC)\ncarbon.Parse(\"\").IsZero() // true\ncarbon.Parse(\"0\").IsZero() // true\ncarbon.Parse(\"0000-00-00 00:00:00\").IsZero() // true\ncarbon.Parse(\"0000-00-00\").IsZero() // true\ncarbon.Parse(\"00:00:00\").IsZero() // true\ncarbon.Parse(\"2020-08-05 00:00:00\").IsZero() // false\ncarbon.Parse(\"2020-08-05\").IsZero() // false\ncarbon.Parse(\"2020-08-05\").SetTimezone(\"xxx\").IsZero() // false\n\n// 是否是有效时间\ncarbon.Parse(\"\").IsValid() // false\ncarbon.Parse(\"0\").IsValid() // false\ncarbon.Parse(\"0000-00-00 00:00:00\").IsValid() // false\ncarbon.Parse(\"0000-00-00\").IsValid() // false\ncarbon.Parse(\"00:00:00\").IsValid() // false\ncarbon.Parse(\"2020-08-05 00:00:00\").IsValid() // true\ncarbon.Parse(\"2020-08-05\").IsValid() // true\ncarbon.Parse(\"2020-08-05\").SetTimezone(\"xxx\").IsValid() // false\n\n// 是否是无效时间\ncarbon.Parse(\"\").IsInvalid() // true\ncarbon.Parse(\"0\").IsInvalid() // true\ncarbon.Parse(\"0000-00-00 00:00:00\").IsInvalid() // true\ncarbon.Parse(\"0000-00-00\").IsInvalid() // true\ncarbon.Parse(\"00:00:00\").IsInvalid() // true\ncarbon.Parse(\"2020-08-05 00:00:00\").IsInvalid() // false\ncarbon.Parse(\"2020-08-05\").IsInvalid() // false\ncarbon.Parse(\"2020-08-05\").SetTimezone(\"xxx\").IsInvalid() // true\n\n// 是否是上午\ncarbon.Parse(\"2020-08-05 00:00:00\").IsAM() // true\ncarbon.Parse(\"2020-08-05 08:00:00\").IsAM() // true\ncarbon.Parse(\"2020-08-05 12:00:00\").IsAM() // false\ncarbon.Parse(\"2020-08-05 13:00:00\").IsAM() // false\n// 是否是下午\ncarbon.Parse(\"2020-08-05 00:00:00\").IsPM() // false\ncarbon.Parse(\"2020-08-05 08:00:00\").IsPM() // false\ncarbon.Parse(\"2020-08-05 12:00:00\").IsPM() // true\ncarbon.Parse(\"2020-08-05 13:00:00\").IsPM() // true\n\n// 是否是当前时间\ncarbon.Now().IsNow() // true\n// 是否是未来时间\ncarbon.Tomorrow().IsFuture() // true\n// 是否是过去时间\ncarbon.Yesterday().IsPast() // true\n\n// 是否是闰年\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLeapYear() // true\n// 是否是长年\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLongYear() // true\n\n// 是否是一月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsJanuary() // false\n// 是否是二月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsFebruary() // false\n// 是否是三月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsMarch() // false\n// 是否是四月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsApril()  // false\n// 是否是五月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsMay() // false\n// 是否是六月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsJune() // false\n// 是否是七月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsJuly() // false\n// 是否是八月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAugust() // false\n// 是否是九月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSeptember() // true\n// 是否是十月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsOctober() // false\n// 是否是十一月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsNovember() // false\n// 是否是十二月\ncarbon.Parse(\"2020-08-05 13:14:15\").IsDecember() // false\n\n// 是否是周一\ncarbon.Parse(\"2020-08-05 13:14:15\").IsMonday() // false\n// 是否是周二\ncarbon.Parse(\"2020-08-05 13:14:15\").IsTuesday() // true\n// 是否是周三\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWednesday() // false\n// 是否是周四\ncarbon.Parse(\"2020-08-05 13:14:15\").IsThursday() // false\n// 是否是周五\ncarbon.Parse(\"2020-08-05 13:14:15\").IsFriday() // false\n// 是否是周六\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSaturday() // false\n// 是否是周日\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSunday() // false\n\n// 是否是工作日\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWeekday() // false\n// 是否是周末\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWeekend() // true\n\n// 是否是昨天\ncarbon.Parse(\"2020-08-04 13:14:15\").IsYesterday() // true\ncarbon.Parse(\"2020-08-04 00:00:00\").IsYesterday() // true\ncarbon.Parse(\"2020-08-04\").IsYesterday() // true\n// 是否是今天\ncarbon.Parse(\"2020-08-05 13:14:15\").IsToday() // true\ncarbon.Parse(\"2020-08-05 00:00:00\").IsToday() // true\ncarbon.Parse(\"2020-08-05\").IsToday() // true\n// 是否是明天\ncarbon.Parse(\"2020-08-06 13:14:15\").IsTomorrow() // true\ncarbon.Parse(\"2020-08-06 00:00:00\").IsTomorrow() // true\ncarbon.Parse(\"2020-08-06\").IsTomorrow() // true\n\n// 是否是同一世纪\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameCentury(carbon.Parse(\"3020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameCentury(carbon.Parse(\"2099-08-05 13:14:15\")) // true\n// 是否是同一年代\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameDecade(carbon.Parse(\"2030-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameDecade(carbon.Parse(\"2120-08-05 13:14:15\")) // true\n// 是否是同一年\ncarbon.Parse(\"2020-08-05 00:00:00\").IsSameYear(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameYear(carbon.Parse(\"2020-12-31 13:14:15\")) // true\n// 是否是同一季节\ncarbon.Parse(\"2020-08-05 00:00:00\").IsSameQuarter(carbon.Parse(\"2020-09-05 13:14:15\")) // false\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameQuarter(carbon.Parse(\"2021-01-31 13:14:15\")) // true\n// 是否是同一月\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameMonth(carbon.Parse(\"2021-01-31 13:14:15\")) // false\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameMonth(carbon.Parse(\"2020-01-31 13:14:15\")) // true\n// 是否是同一天\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameDay(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 00:00:00\").IsSameDay(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n// 是否是同一小时\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameHour(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:00:00\").IsSameHour(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n// 是否是同一分钟\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameMinute(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:00\").IsSameMinute(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n// 是否是同一秒\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameSecond(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameSecond(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n\n// 是否大于\ncarbon.Parse(\"2020-08-05 13:14:15\").Gt(carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Gt(carbon.Parse(\"2020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">\", carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">\", carbon.Parse(\"2020-08-05 13:14:15\")) // false\n\n// 是否小于\ncarbon.Parse(\"2020-08-05 13:14:15\").Lt(carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Lt(carbon.Parse(\"2020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<\", carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<\", carbon.Parse(\"2020-08-05 13:14:15\")) // false\n\n// 是否等于\ncarbon.Parse(\"2020-08-05 13:14:15\").Eq(carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Eq(carbon.Parse(\"2020-08-05 13:14:00\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"=\", carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"=\", carbon.Parse(\"2020-08-05 13:14:00\")) // false\n\n// 是否不等于\ncarbon.Parse(\"2020-08-05 13:14:15\").Ne(carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Ne(carbon.Parse(\"2020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"!=\", carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<>\", carbon.Parse(\"2020-08-05 13:14:15\")) // false\n\n// 是否大于等于\ncarbon.Parse(\"2020-08-05 13:14:15\").Gte(carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Gte(carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">=\", carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">=\", carbon.Parse(\"2020-08-05 13:14:15\")) // true\n\n// 是否小于等于\ncarbon.Parse(\"2020-08-05 13:14:15\").Lte(carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Lte(carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<=\", carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<=\", carbon.Parse(\"2020-08-05 13:14:15\")) // true\n\n// 是否在两个时间之间(不包括这两个时间)\ncarbon.Parse(\"2020-08-05 13:14:15\").Between(carbon.Parse(\"2020-08-05 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Between(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\n\n// 是否在两个时间之间(包括开始时间)\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedStart(carbon.Parse(\"2020-08-05 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedStart(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\n\n// 是否在两个时间之间(包括结束时间)\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedEnd(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedEnd(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\n\n// 是否在两个时间之间(包括这两个时间)\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedBoth(carbon.Parse(\"2020-08-05 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedBoth(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-05 13:14:15\")) // true\n```\n\n> 关于长年(LongYear)的定义, 请查看 https://en.wikipedia.org/wiki/ISO_8601#Week_dates\n\n##### 时间设置\n\n```go\n// 设置时区\ncarbon.SetTimezone(carbon.PRC).Now().ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.SetTimezone(carbon.Tokyo).Now().ToDateTimeString() // 2020-08-05 14:14:15\ncarbon.SetTimezone(carbon.Tokyo).Now().SetTimezone(carbon.PRC).ToDateTimeString() // 2020-08-05 12:14:15\n\n// 设置地区\nutc, _ := time.LoadLocation(carbon.UTC)\ncarbon.SetLocation(utc).Now().ToDateTimeString() // 2022-06-28 09:25:38\ntokyo, _ := time.LoadLocation(carbon.Tokyo)\ncarbon.SetLocation(tokyo).Now().ToDateTimeString() // 2022-06-28 18:25:38\n\n// 设置区域\ncarbon.Parse(\"2020-07-05 13:14:15\").SetLocale(\"en\").DiffForHumans() // 1 month ago\ncarbon.Parse(\"2020-07-05 13:14:15\").SetLocale(\"zh-CN\").DiffForHumans() // 1 月前\n\n// 设置年月日时分秒\ncarbon.Parse(\"2020-01-01\").SetDateTime(2019, 2, 2, 13, 14, 15).ToString() // 2019-02-02 13:14:15 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTime(2019, 2, 31, 13, 14, 15).ToString() // 2019-03-03 13:14:15 +0800 CST\n// 设置年月日时分秒毫秒\ncarbon.Parse(\"2020-01-01\").SetDateTimeMilli(2019, 2, 2, 13, 14, 15, 999).ToString() // 2019-02-02 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTimeMilli(2019, 2, 31, 13, 14, 15, 999).ToString() // 2019-03-03 13:14:15.999 +0800 CST\n// 设置年月日时分秒微秒\ncarbon.Parse(\"2020-01-01\").SetDateTimeMicro(2019, 2, 2, 13, 14, 15, 999999).ToString() // 2019-02-02 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTimeMicro(2019, 2, 31, 13, 14, 15, 999999).ToString() // 2019-03-03 13:14:15.999999 +0800 CST\n// 设置年月日时分秒纳秒\ncarbon.Parse(\"2020-01-01\").SetDateTimeNano(2019, 2, 2, 13, 14, 15, 999999999).ToString() // 2019-02-02 13:14:15.999999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTimeNano(2019, 2, 31, 13, 14, 15, 999999999).ToString() // 2019-03-03 13:14:15.999999999 +0800 CST\n\n// 设置年月日\ncarbon.Parse(\"2020-01-01\").SetDate(2019, 2, 2).ToString() // 2019-02-02 00:00:00 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDate(2019, 2, 31).ToString() // 2019-03-03 00:00:00 +0800 CST\n// 设置年月日毫秒\ncarbon.Parse(\"2020-01-01\").SetDateMilli(2019, 2, 2, 999).ToString() // 2019-02-02 00:00:00.999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateMilli(2019, 2, 31, 999).ToString() // 2019-03-03 00:00:00.999 +0800 CST\n// 设置年月日微秒\ncarbon.Parse(\"2020-01-01\").SetDateMicro(2019, 2, 2, 999999).ToString() // 2019-02-02 00:00:00.999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateMicro(2019, 2, 31, 999999).ToString() // 2019-03-03 00:00:00.999999 +0800 CST\n// 设置年月日纳秒\ncarbon.Parse(\"2020-01-01\").SetDateNano(2019, 2, 2, 999999999).ToString() // 2019-02-02 00:00:00.999999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateNano(2019, 2, 31, 999999999).ToString() // 2019-03-03 00:00:00.999999999 +0800 CST\n\n// 设置时分秒\ncarbon.Parse(\"2020-01-01\").SetTime(13, 14, 15).ToString() // 2020-01-01 13:14:15 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTime(13, 14, 90).ToString() // 2020-01-01 13:15:30 +0800 CST\n// 设置时分秒毫秒\ncarbon.Parse(\"2020-01-01\").SetTimeMilli(13, 14, 15, 999).ToString() // 2020-01-01 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTimeMilli(13, 14, 90, 999).ToString() // 2020-01-01 13:15:30.999 +0800 CST\n// 设置时分秒微秒\ncarbon.Parse(\"2020-01-01\").SetTimeMicro(13, 14, 15, 999999).ToString() // 2020-01-01 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTimeMicro(13, 14, 90, 999999).ToString() // 2020-01-01 13:15:30.999999 +0800 CST\n// 设置时分秒纳秒\ncarbon.Parse(\"2020-01-01\").SetTimeNano(13, 14, 15, 999999999).ToString() // 2020-01-01 13:14:15.999999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTimeNano(13, 14, 90, 999999999).ToString() // 2020-01-01 13:15:30.999999999 +0800 CST\n\n// 设置年份\ncarbon.Parse(\"2020-02-29\").SetYear(2021).ToDateString() // 2021-03-01\n// 设置年份(月份不溢出)\ncarbon.Parse(\"2020-02-29\").SetYearNoOverflow(2021).ToDateString() // 2021-02-28\n\n// 设置月份\ncarbon.Parse(\"2020-01-31\").SetMonth(2).ToDateString() // 2020-03-02\n// 设置月份(月份不溢出)\ncarbon.Parse(\"2020-01-31\").SetMonthNoOverflow(2).ToDateString() // 2020-02-29\n\n// 设置一周的开始日期\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Monday).Week() // 6\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Sunday).Week() // 0\n\n// 设置日期\ncarbon.Parse(\"2019-08-05\").SetDay(31).ToDateString() // 2020-08-31\ncarbon.Parse(\"2020-02-01\").SetDay(31).ToDateString() // 2020-03-02\n\n// 设置小时\ncarbon.Parse(\"2020-08-05 13:14:15\").SetHour(10).ToDateTimeString() // 2020-08-05 10:14:15\ncarbon.Parse(\"2020-08-05 13:14:15\").SetHour(24).ToDateTimeString() // 2020-08-06 00:14:15\n\n// 设置分钟\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMinute(10).ToDateTimeString() // 2020-08-05 13:10:15\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMinute(60).ToDateTimeString() // 2020-08-05 14:00:15\n\n// 设置秒\ncarbon.Parse(\"2020-08-05 13:14:15\").SetSecond(10).ToDateTimeString() // 2020-08-05 13:14:10\ncarbon.Parse(\"2020-08-05 13:14:15\").SetSecond(60).ToDateTimeString() // 2020-08-05 13:15:00\n\n// 设置毫秒\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMillisecond(100).Millisecond() // 100\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMillisecond(999).Millisecond() // 999\n\n// 设置微妙\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMicrosecond(100000).Microsecond() // 100000\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMicrosecond(999999).Microsecond() // 999999\n\n// 设置纳秒\ncarbon.Parse(\"2020-08-05 13:14:15\").SetNanosecond(100000000).Nanosecond() // 100000000\ncarbon.Parse(\"2020-08-05 13:14:15\").SetNanosecond(999999999).Nanosecond() // 999999999\n```\n\n##### 时间获取\n\n```go\n// 获取本年总天数\ncarbon.Parse(\"2019-08-05 13:14:15\").DaysInYear() // 365\ncarbon.Parse(\"2020-08-05 13:14:15\").DaysInYear() // 366\n// 获取本月总天数\ncarbon.Parse(\"2020-02-01 13:14:15\").DaysInMonth() // 29\ncarbon.Parse(\"2020-04-01 13:14:15\").DaysInMonth() // 30\ncarbon.Parse(\"2020-08-01 13:14:15\").DaysInMonth() // 31\n\n// 获取本年第几天\ncarbon.Parse(\"2020-08-05 13:14:15\").DayOfYear() // 218\n// 获取本年第几周\ncarbon.Parse(\"2019-12-31 13:14:15\").WeekOfYear() // 1\ncarbon.Parse(\"2020-08-05 13:14:15\").WeekOfYear() // 32\n// 获取本月第几天\ncarbon.Parse(\"2020-08-05 13:14:15\").DayOfMonth() // 5\n// 获取本月第几周\ncarbon.Parse(\"2020-08-05 13:14:15\").WeekOfMonth() // 1\n// 获取本周第几天\ncarbon.Parse(\"2020-08-05 13:14:15\").DayOfWeek() // 3\n\n// 获取当前年月日时分秒\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTime() // 2020,8,5,13,14,15\n// 获取当前年月日时分秒毫秒\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTimeMilli() // 2020,8,5,13,14,15,999\n// 获取当前年月日时分秒微秒\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTimeMicro() // 2020,8,5,13,14,15,999999\n// 获取当前年月日时分秒纳秒\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTimeNano() // 2020,8,5,13,14,15,999999999\n\n// 获取当前年月日\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").Date() // 2020,8,5\n// 获取当前年月日毫秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").DateMilli() // 2020,8,5,999\n// 获取当前年月日微秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").DateMicro() // 2020,8,5,999999\n// 获取当前年月日纳秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").DateNano() // 2020,8,5,999999999\n\n// 获取当前时分秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").Time() // 13,14,15\n// 获取当前时分秒毫秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").TimeMilli() // 13,14,15,999\n// 获取当前时分秒微秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").TimeMicro() // 13,14,15,999999\n// 获取当前时分秒纳秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").TimeNano() // 13,14,15,999999999\n\n// 获取当前世纪\ncarbon.Parse(\"2020-08-05 13:14:15\").Century() // 21\n// 获取当前年代\ncarbon.Parse(\"2019-08-05 13:14:15\").Decade() // 10\ncarbon.Parse(\"2021-08-05 13:14:15\").Decade() // 20\n// 获取当前年份\ncarbon.Parse(\"2020-08-05 13:14:15\").Year() // 2020\n// 获取当前季度\ncarbon.Parse(\"2020-08-05 13:14:15\").Quarter() // 3\n// 获取当前月份\ncarbon.Parse(\"2020-08-05 13:14:15\").Month() // 8\n// 获取当前周(从0开始)\ncarbon.Parse(\"2020-08-02 13:14:15\").Week() // 0\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Sunday).Week() // 0\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Monday).Week() // 6\n// 获取当前天数\ncarbon.Parse(\"2020-08-05 13:14:15\").Day() // 5\n// 获取当前小时\ncarbon.Parse(\"2020-08-05 13:14:15\").Hour() // 13\n// 获取当前分钟\ncarbon.Parse(\"2020-08-05 13:14:15\").Minute() // 14\n// 获取当前秒钟\ncarbon.Parse(\"2020-08-05 13:14:15\").Second() // 15\n// 获取当前毫秒\ncarbon.Parse(\"2020-08-05 13:14:15.999\").Millisecond() // 999\n// 获取当前微秒\ncarbon.Parse(\"2020-08-05 13:14:15.999\").Microsecond() // 999000\n// 获取当前纳秒\ncarbon.Parse(\"2020-08-05 13:14:15.999\").Nanosecond() // 999000000\n\n// 获取秒级时间戳\ncarbon.Parse(\"2020-08-05 13:14:15\").Timestamp() // 1596604455\n// 获取毫秒级时间戳\ncarbon.Parse(\"2020-08-05 13:14:15\").TimestampMilli() // 1596604455000\n// 获取微秒级时间戳\ncarbon.Parse(\"2020-08-05 13:14:15\").TimestampMicro() // 1596604455000000\n// 获取纳秒级时间戳\ncarbon.Parse(\"2020-08-05 13:14:15\").TimestampNano() // 1596604455000000000\n\n// 获取时区\ncarbon.SetTimezone(carbon.PRC).Timezone() // CST\ncarbon.SetTimezone(carbon.Tokyo).Timezone() // JST\n\n// 获取位置\ncarbon.SetTimezone(carbon.PRC).Location() // PRC\ncarbon.SetTimezone(carbon.Tokyo).Location() // Asia/Tokyo\n\n// 获取距离UTC时区的偏移量，单位秒\ncarbon.SetTimezone(carbon.PRC).Offset() // 28800\ncarbon.SetTimezone(carbon.Tokyo).Offset() // 32400\n\n// 获取当前区域\ncarbon.Now().Locale() // en\ncarbon.Now().SetLocale(\"zh-CN\").Locale() // zh-CN\n\n// 获取当前星座\ncarbon.Now().Constellation() // Leo\ncarbon.Now().SetLocale(\"en\").Constellation() // Leo\ncarbon.Now().SetLocale(\"zh-CN\").Constellation() // 狮子座\n\n// 获取当前季节\ncarbon.Now().Season() // Summer\ncarbon.Now().SetLocale(\"en\").Season() // Summer\ncarbon.Now().SetLocale(\"zh-CN\").Season() // 夏季\n\n// 获取年龄\ncarbon.Parse(\"2002-01-01 13:14:15\").Age() // 17\ncarbon.Parse(\"2002-12-31 13:14:15\").Age() // 18\n```\n\n##### 时间输出\n\n```go\n// 输出日期时间字符串\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToDateTimeString() // 2020-08-05 13:14:15\n// 输出日期时间字符串，包含毫秒\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToDateTimeMilliString() // 2020-08-05 13:14:15.999\n// 输出日期时间字符串，包含微秒\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToDateTimeMicroString() // 2020-08-05 13:14:15.999999\n// 输出日期时间字符串，包含纳秒\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToDateTimeNanoString() // 2020-08-05 13:14:15.999999999\n\n// 输出简写日期时间字符串\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeString() // 20200805131415\n// 输出简写日期时间字符串，包含毫秒\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeMilliString() // 20200805131415.999\n// 输出简写日期时间字符串，包含微秒\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeMicroString() // 20200805131415.999999\n// 输出简写日期时间字符串，包含纳秒\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeNanoString() // 20200805131415.999999999\n\n// 输出日期字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateString() // 2020-08-05\n// 输出日期字符串，包含毫秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateMilliString() // 2020-08-05.999\n// 输出日期字符串，包含微秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateMicroString() // 2020-08-05.999999\n// 输出日期字符串，包含纳秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateNanoString() // 2020-08-05.999999999\n\n// 输出简写日期字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateString() // 20200805\n// 输出简写日期字符串，包含毫秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateMilliString() // 20200805.999\n// 输出简写日期字符串，包含微秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateMicroString() // 20200805.999999\n// 输出简写日期字符串，包含纳秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateNanoString() // 20200805.999999999\n\n// 输出时间字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeString() // 13:14:15\n// 输出时间字符串，包含毫秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeMilliString() // 13:14:15.999\n// 输出时间字符串，包含微秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeMicroString() // 13:14:15.999999\n// 输出时间字符串，包含纳秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeNanoString() // 13:14:15.999999999\n\n// 输出简写时间字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeString() // 131415\n// 输出简写时间字符串，包含毫秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeMilliString() // 131415.999\n// 输出简写时间字符串，包含微秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeMicroString() // 131415.999999\n// 输出简写时间字符串，包含纳秒\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeNanoString() // 131415.999999999\n\n// 输出 Ansic 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToAnsicString() // Wed Aug  5 13:14:15 2020\n// 输出 Atom 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToAtomString() // 2020-08-05T13:14:15+08:00\n// 输出 UnixDate 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToUnixDateString() // Wed Aug  5 13:14:15 CST 2020\n// 输出 RubyDate 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRubyDateString() // Wed Aug 05 13:14:15 +0800 2020\n// 输出 Kitchen 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToKitchenString() // 1:14PM\n// 输出 Cookie 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToCookieString() // Wednesday, 05-Aug-2020 13:14:15 CST\n// 输出 DayDateTime 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToDayDateTimeString() // Wed, Aug 5, 2020 1:14 PM\n// 输出 RSS 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRssString() // Wed, 05 Aug 2020 13:14:15 +0800\n// 输出 W3C 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToW3cString() // 2020-08-05T13:14:15+08:00\n\n// 输出 ISO8601 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601String() // 2020-08-05T13:14:15+08:00\n// 输出 ISO8601Milli 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601MilliString() // 2020-08-05T13:14:15.999+08:00\n// 输出 ISO8601Micro 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601MicroString() // 2020-08-05T13:14:15.999999+08:00\n// 输出 ISO8601Nano 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601NanoString() // 2020-08-05T13:14:15.999999999+08:00\n// 输出 ISO8601Zulu 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluString() // 2020-08-05T13:14:15Z\n// 输出 ISO8601ZuluMilli 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluMilliString() // 2020-08-05T13:14:15.999Z\n// 输出 ISO8601ZuluMicro 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluMicroString() // 2020-08-05T13:14:15.999999Z\n// 输出 ISO8601ZuluNano 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluNanoString() // 2020-08-05T13:14:15.999999999Z\n\n// 输出 RFC822 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc822String() // 05 Aug 20 13:14 CST\n// 输出 RFC822Z 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc822zString() // 05 Aug 20 13:14 +0800\n// 输出 RFC850 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc850String() // Wednesday, 05-Aug-20 13:14:15 CST\n// 输出 RFC1036 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc1036String() // Wed, 05 Aug 20 13:14:15 +0800\n// 输出 RFC1123 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc1123String() // Wed, 05 Aug 2020 13:14:15 CST\n// 输出 RFC1123Z 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc1123zString() // Wed, 05 Aug 2020 13:14:15 +0800\n// 输出 RFC2822 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc2822String() // Wed, 05 Aug 2020 13:14:15 +0800\n// 输出 RFC7231 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc7231String() // Wed, 05 Aug 2020 13:14:15 GMT\n\n// 输出 RFC3339 格式字符串\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339String() // 2020-08-05T13:14:15+08:00\n// 输出 RFC3339Milli 格式字符串\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339MilliString() // 2020-08-05T13:14:15.999+08:00\n// 输出 RFC3339Micro 格式字符串\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339MicroString() // 2020-08-05T13:14:15.999999+08:00\n// 输出 RFC3339Nano 格式字符串\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339NanoString() // 2020-08-05T13:14:15.999999999+08:00\n\n// 输出日期时间字符串\nfmt.Printf(\"%s\", carbon.Parse(\"2020-08-05 13:14:15\")) // 2020-08-05 13:14:15\n\n// 输出\"2006-01-02 15:04:05.999999999 -0700 MST\"格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\n\n// 输出 \"Jan 2, 2006\" 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToFormattedDateString() // Aug 5, 2020\n// 输出 \"Mon, Jan 2, 2006\" 格式字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").ToFormattedDayDateString() // Wed, Aug 5, 2020\n\n// 输出指定布局的字符串\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(carbon.ISO8601Layout) // 2020-08-05T13:14:15+08:00\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(\"20060102150405\") // 20200805131415\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(\"2006年01月02日 15时04分05秒\") // 2020年08月05日 13时14分15秒\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(\"It is 2006-01-02 15:04:05\") // It is 2020-08-05 13:14:15\n\n// 输出指定格式的字符串(如果使用的字母与格式化字符冲突时，请使用\\符号转义该字符)\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"YmdHis\") // 20200805131415\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"Y年m月d日 H时i分s秒\") // 2020年08月05日 13时14分15秒\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"l jS \\\\o\\\\f F Y h:i:s A\") // Wednesday 5th of August 2020 01:14:15 PM\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"\\\\I\\\\t \\\\i\\\\s Y-m-d H:i:s\") // It is 2020-08-05 13:14:15\n```\n\n> 更多格式化输出符号请查看附录 <a href=\"#format-sign-table\">格式化符号表</a>\n\n##### 星座\n\n```go\n// 获取星座\ncarbon.Parse(\"2020-08-05 13:14:15\").Constellation() // Leo\n\n// 是否是白羊座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAries() // false\n// 是否是金牛座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsTaurus() // false\n// 是否是双子座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsGemini() // false\n// 是否是巨蟹座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsCancer() // false\n// 是否是狮子座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLeo() // true\n// 是否是处女座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsVirgo() // false\n// 是否是天秤座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLibra() // false\n// 是否是天蝎座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsScorpio() // false\n// 是否是射手座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSagittarius() // false\n// 是否是摩羯座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsCapricorn() // false\n// 是否是水瓶座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAquarius() // false\n// 是否是双鱼座\ncarbon.Parse(\"2020-08-05 13:14:15\").IsPisces() // false\n```\n\n##### 季节\n\n> 按照气象划分，即3-5月为春季，6-8月为夏季，9-11月为秋季，12-2月为冬季\n\n```go\n// 获取季节\ncarbon.Parse(\"2020-08-05 13:14:15\").Season() // Summer\n\n// 本季节开始时间\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfSeason().ToDateTimeString() // 2020-06-01 00:00:00\n// 本季节结束时间\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfSeason().ToDateTimeString() // 2020-08-31 23:59:59\n\n// 是否是春季\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSpring() // false\n// 是否是夏季\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSummer() // true\n// 是否是秋季\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAutumn() // false\n// 是否是冬季\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWinter() // false\n```\n\n##### JSON\n```go\ntype Person struct {\n  Name string `json:\"name\"`\n  Age int `json:\"age\"`\n  Birthday0 carbon.Carbon `json:\"birthday0\"`\n  Birthday1 carbon.DateTime `json:\"birthday1\"`\n  Birthday2 carbon.DateTimeMilli `json:\"birthday2\"`\n  Birthday3 carbon.DateTimeMicro `json:\"birthday3\"`\n  Birthday4 carbon.DateTimeNano `json:\"birthday4\"`\n  GraduatedAt1 carbon.Date `json:\"graduated_at1\"`\n  GraduatedAt2 carbon.DateMilli `json:\"graduated_at2\"`\n  GraduatedAt3 carbon.DateMicro `json:\"graduated_at3\"`\n  GraduatedAt4 carbon.DateNano `json:\"graduated_at4\"`\n  OperatedAt1 carbon.Time `json:\"operated_at1\"`\n  OperatedAt2 carbon.TimeMilli `json:\"operated_at2\"`\n  OperatedAt3 carbon.TimeMicro `json:\"operated_at3\"`\n  OperatedAt4 carbon.TimeNano `json:\"operated_at4\"`\n  CreatedAt1 carbon.Timestamp `json:\"created_at1\"`\n  CreatedAt2 carbon.TimestampMilli `json:\"created_at2\"`\n  CreatedAt3 carbon.TimestampMicro `json:\"created_at3\"`\n  CreatedAt4 carbon.TimestampNano `json:\"created_at4\"`\n}\n\nperson := Person {\n  Name:        \"gouguoyin\",\n  Age:          18,\n  Birthday0:    carbon.Now().SubYears(18),\n  Birthday1:    carbon.NewDateTime(carbon.Now().SubYears(18)),\n  Birthday2:    carbon.NewDateTimeMilli(carbon.Now().SubYears(18)),\n  Birthday3:    carbon.NewDateTimeMicro(carbon.Now().SubYears(18)),\n  Birthday4:    carbon.NewDateTimeNano(carbon.Now().SubYears(18)),\n  GraduatedAt1: carbon.NewDate(carbon.Now()),\n  GraduatedAt2: carbon.NewDateMilli(carbon.Now()),\n  GraduatedAt3: carbon.NewDateMicro(carbon.Now()),\n  GraduatedAt4: carbon.NewDateNano(carbon.Now()),\n  OperatedAt1:  carbon.NewTime(carbon.Now()),\n  OperatedAt2:  carbon.NewTimeMilli(carbon.Now()),\n  OperatedAt3:  carbon.NewTimeMicro(carbon.Now()),\n  OperatedAt4:  carbon.NewTimeNano(carbon.Now()),\n  CreatedAt1:   carbon.NewTimestamp(carbon.Now()),\n  CreatedAt2:   carbon.NewTimestampMilli(carbon.Now()),\n  CreatedAt3:   carbon.NewTimestampMicro(carbon.Now()),\n  CreatedAt4:   carbon.NewTimestampNano(carbon.Now()),\n}\n\ndata, err := json.Marshal(&person)\nif err != nil {\n  // 错误处理\n  log.Fatal(err)\n}\nfmt.Printf(\"%s\", data)\n// 输出\n{\n  \"name\": \"gouguoyin\",\n  \"age\": 18,\n  \"birthday0\": \"2003-07-16 13:14:15\",\n  \"birthday1\": \"2003-07-16 13:14:15\",\n  \"birthday2\": \"2003-07-16 13:14:15.999\",\n  \"birthday3\": \"2003-07-16 13:14:15.999999\",\n  \"birthday4\": \"2003-07-16 13:14:15.999999999\",\n  \"graduated_at1\": \"2020-08-05\",\n  \"graduated_at2\": \"2020-08-05.999\",\n  \"graduated_at3\": \"2020-08-05.999999\",\n  \"graduated_at4\": \"2020-08-05.999999999\",\n  \"operated_at1\": \"13:14:15\",\n  \"operated_at2\": \"13:14:15.999\",\n  \"operated_at3\": \"13:14:15.999999\",\n  \"operated_at4\": \"13:14:15.999999999\",\n  \"created_at1\": 1596604455,\n  \"created_at2\": 1596604455999,\n  \"created_at3\": 1596604455999999,\n  \"created_at4\": 1596604455999999999\n}\n\nerr := json.Unmarshal([]byte(data), &person)\nif err != nil {\n  // 错误处理\n  log.Fatal(err)\n}\n\nperson.Birthday0.String() // 2003-07-16 13:14:15\nperson.Birthday1.String() // 2003-07-16 13:14:15\nperson.Birthday2.String() // 2003-07-16 13:14:15.999\nperson.Birthday3.String() // 2003-07-16 13:14:15.999999\nperson.Birthday4.String() // 2003-07-16 13:14:15.999999999\n\nperson.GraduatedAt1.String() // 2020-08-05\nperson.GraduatedAt2.String() // 2020-08-05.999\nperson.GraduatedAt3.String() // 2020-08-05.999999\nperson.GraduatedAt4.String() // 2020-08-05.999999999\n\nperson.OperatedAt1.String() // 13:14:15\nperson.OperatedAt2.String() // 13:14:15.999\nperson.OperatedAt3.String() // 13:14:15.999999\nperson.OperatedAt4.String() // 13:14:15.999999999\n\nperson.CreatedAt1.String() // \"1596604455\"\nperson.CreatedAt2.String() // \"1596604455999\"\nperson.CreatedAt3.String() // \"1596604455999999\"\nperson.CreatedAt4.String() // \"1596604455999999999\"\n\nperson.CreatedAt1.Int64() // 1596604455\nperson.CreatedAt2.Int64() // 1596604455999\nperson.CreatedAt3.Int64() // 1596604455999999\nperson.CreatedAt4.Int64() // 1596604455999999999\n```\n\n##### 日历\n\n目前支持的日历有\n\n* [儒略日/简化儒略日](./calendar/julian/README.cn.md \"儒略日/简化儒略日\")\n* [中国农历](./calendar/lunar/README.cn.md \"中国农历\")\n* [波斯历/伊朗历](./calendar/persian/README.cn.md \"波斯历/伊朗历\")\n\n##### 国际化\n\n目前支持的语言有\n\n* [简体中文(zh-CN)](./lang/zh-CN.json \"简体中文\"): 由 [gouguoyin](https://github.com/gouguoyin \"gouguoyin\") 翻译\n* [繁体中文(zh-TW)](./lang/zh-TW.json \"繁体中文\"): 由 [gouguoyin](https://github.com/gouguoyin \"gouguoyin\") 翻译\n* [英语(en)](./lang/en.json \"英语\"): 由 [gouguoyin](https://github.com/gouguoyin \"gouguoyin\") 翻译\n* [日语(jp)](./lang/jp.json \"日语\"): 由 [gouguoyin](https://github.com/gouguoyin \"gouguoyin\") 翻译\n* [韩语(kr)](./lang/kr.json \"韩语\"): 由 [nannul](https://github.com/nannul \"nannul\") 翻译\n* [德语(de)](./lang/de.json \"德语\"): 由 [benzammour](https://github.com/benzammour \"benzammour\") 翻译\n* [西班牙语(es)](./lang/es.json \"西班牙语\"): 由 [hgisinger](https://github.com/hgisinger \"hgisinger\") 翻译\n* [土耳其语(tr)](./lang/tr.json \"土耳其语\"): 由 [emresenyuva](https://github.com/emresenyuva \"emresenyuva\") 翻译\n* [葡萄牙语(pt)](./lang/pt.json \"葡萄牙语\"): 由 [felipear89](https://github.com/felipear89 \"felipear89\") 翻译\n* [俄罗斯语(ru)](./lang/ru.json \"俄罗斯语\"): 由 [zemlyak](https://github.com/zemlyak \"zemlyak\") 翻译\n* [乌克兰语(uk)](./lang/uk.json \"乌克兰语\"): 由 [open-git](https://github.com/open-git \"open-git\") 翻译\n* [罗马尼亚语(ro)](./lang/ro.json \"罗马尼亚语\"): 由 [DrOctavius](https://github.com/DrOctavius \"DrOctavius\") 翻译\n* [印度尼西亚语(id)](./lang/id.json \"印度尼西亚语\"): 由 [justpoypoy](https://github.com/justpoypoy \"justpoypoy\") 翻译\n* [意大利语(it)](./lang/it.json \"意大利语\"): 由 [nicoloHevelop](https://github.com/justpoypoy \"nicoloHevelop\") 翻译\n* [马来西亚巴哈马语(ms-MY)](./lang/ms-MY.json \"马来西亚巴哈马语\"): 由 [hollowaykeanho](https://github.com/hollowaykeanho \"hollowaykeanho\") 翻译\n* [法语(fr)](./lang/fr.json \"法语\"): 由 [hollowaykeanho](https://github.com/hollowaykeanho \"hollowaykeanho\") 翻译\n* [泰语(th)](./lang/th.json \"泰语\"): 由 [izcream](https://github.com/izcream \"izcream\") 翻译\n* [瑞典语(se)](./lang/se.json \"瑞典语\"): 由 [jwanglof](https://github.com/jwanglof \"jwanglof\") 翻译\n* [波斯语(fa)](./lang/fa.json \"波斯语\"): 由 [erfanMomeniii](https://github.com/ErfanMomeniii \"ErfanMomeniii\") 翻译\n* [波兰语(nl)](./lang/nl.json \"波兰语\"): 由 [RemcoE33](https://github.com/RemcoE33 \"RemcoE33\") 翻译\n* [越南语(vi)](./lang/vi.json \"越南语\"): 由 [culy247](https://github.com/culy247 \"culy247\") 翻译\n* [印地语(hi)](./lang/hi.json \"印地语\"): 由 [chauhan17nitin](https://github.com/chauhan17nitin \"chauhan17nitin\") 翻译\n* [波兰语(pl)](./lang/pl.json \"波兰语\"): 由 [gouguoyin](https://github.com/gouguoyin \"gouguoyin\") 翻译\n* [保加利亚语(bg)](./lang/bg.json \"保加利亚语\"): 由 [yuksbg](https://github.com/yuksbg \"yuksbg\") 翻译\n* [阿拉伯语(ar)](./lang/bg.json \"阿拉伯语\"): 由 [zumoshi](https://github.com/yuksbg \"zumoshi\") 翻译\n* [匈牙利语(hu)](./lang/hu.json \"匈牙利语\"): 由 [kenlas](https://github.com/kenlas \"kenlas\") 翻译\n* [丹麦语(dk)](./lang/dk.json \"丹麦语\"): 由 [Munk91](https://github.com/Munk91 \"Munk91\") 翻译\n\n目前支持的方法有\n\n* `Constellation()`：获取星座，如 `白羊座`\n* `Season()`：获取季节，如 `夏季`\n* `DiffForHumans()`：获取对人类友好的可读格式时间差，如 `一小时前`\n* `ToMonthString()`：输出完整月份字符串，如 `一月`\n* `ToShortMonthString()`：输出缩写月份字符串，如 `1月`\n* `ToWeekString()`：输出完整星期字符串，如 `星期一`\n* `ToShortWeekString()`：输出缩写星期字符串，如 `周一`\n\n###### 设置区域\n\n```go\nlang := carbon.NewLanguage()\nlang.SetLocale(\"zh-CN\")\n\nc := carbon.SetLanguage(lang)\nif c.Error != nil {\n  // 错误处理\n  log.Fatal(c.Error)\n}\n\nc.Now().AddHours(1).DiffForHumans() // 1 小时后\nc.Now().AddHours(1).ToMonthString() // 八月\nc.Now().AddHours(1).ToShortMonthString() // 8月\nc.Now().AddHours(1).ToWeekString() // 星期二\nc.Now().AddHours(1).ToShortWeekString() // 周二\nc.Now().AddHours(1).Constellation() // 狮子座\nc.Now().AddHours(1).Season() // 夏季\n```\n\n###### 重写部分翻译资源(其余仍然按照指定的 `locale` 文件内容翻译)\n\n```go\nlang := carbon.NewLanguage()\n\nresources := map[string]string {\n  \"hour\": \"%dh\",\n}\nlang.SetLocale(\"en\").SetResources(resources)\n\nc := carbon.SetLanguage(lang)\nif c.Error != nil {\n  // 错误处理\n  log.Fatal(c.Error)\n}\n\nc.Now().AddYears(1).DiffForHumans() // 1 year from now\nc.Now().AddHours(1).DiffForHumans() // 1h from now\nc.Now().ToMonthString() // August\nc.Now().ToShortMonthString() // Aug\nc.Now().ToWeekString() // Tuesday\nc.Now().ToShortWeekString() // Tue\nc.Now().Constellation() // Leo\nc.Now().Season() // Summer\n```\n\n###### 重写全部翻译资源(无需指定 `locale`)\n\n```go\nlang := carbon.NewLanguage()\nresources := map[string]string {\n  \"months\": \"january|february|march|april|may|june|july|august|september|october|november|december\",\n  \"short_months\": \"jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec\",\n  \"weeks\": \"sunday|monday|tuesday|wednesday|thursday|friday|saturday\",\n  \"short_weeks\": \"sun|mon|tue|wed|thu|fri|sat\",\n  \"seasons\": \"spring|summer|autumn|winter\",\n  \"constellations\": \"aries|taurus|gemini|cancer|leo|virgo|libra|scorpio|sagittarius|capricornus|aquarius|pisce\",\n  \"year\": \"1 yr|%d yrs\",\n  \"month\": \"1 mo|%d mos\",\n  \"week\": \"%dw\",\n  \"day\": \"%dd\",\n  \"hour\": \"%dh\",\n  \"minute\": \"%dm\",\n  \"second\": \"%ds\",\n  \"now\": \"just now\",\n  \"ago\": \"%s ago\",\n  \"from_now\": \"in %s\",\n  \"before\": \"%s before\",\n  \"after\": \"%s after\",\n}\nlang.SetResources(resources)\n\nc := carbon.SetLanguage(lang)\nc.Now().AddYears(1).DiffForHumans() // in 1 yr\nc.Now().AddHours(1).DiffForHumans() // in 1h\nc.Now().ToMonthString() // august\nc.Now().ToShortMonthString() // aug\nc.Now().ToWeekString() // tuesday\nc.Now().ToShortWeekString() // tue\nc.Now().Constellation() // leo\nc.Now().Season() // summer\n```\n\n##### 模拟测试\n\n```go\nc := carbon.SetTimezone(carbon.UTC)\n\nc.Now().ToDateString() // 2023-12-27\nc.Now().IsSetTestNow() // false\n\nc.SetTestNow(carbon.Parse(\"2020-08-05\"))\nc.Now().ToDateString() // 2020-08-05\nc.Now().IsSetTestNow() // true\n\nc.UnSetTestNow()\nc.Now().ToDateString() // 2023-12-27\nc.Now().IsSetTestNow() // false\n```\n\n##### 错误处理\n\n> 如果有多个错误发生，只返回第一个错误，前一个错误排除后才返回下一个错误\n\n```go\nc := carbon.SetTimezone(\"xxx\").Parse(\"2020-08-05\")\nif c.Error != nil {\n  // 错误处理\n  log.Fatal(c.Error)\n}\n// 输出\ninvalid timezone \"xxx\", please see the file \"$GOROOT/lib/time/zoneinfo.zip\" for all valid timezones\n```\n\n#### 附录\n\n##### <a id=\"format-sign-table\">格式化符号表</a>\n\n| 符号 | 描述 | 长度 |        范围        | 示例 |\n| :------------: | :------------: |:--------------:|:----------------:| :------------: |\n| d | 月份中的第几天，有前导零 |  2 |      01-31       | 02 |\n| D | 缩写单词表示的周几 |  3 |     Mon-Sun      | Mon |\n| j | 月份中的第几天，没有前导零 |  - |       1-31       | 2 |\n| S | 第几天的英文缩写后缀，一般和j配合使用 |  2 |   st/nd/rd/th    | th |\n| l | 完整单词表示的周几 |  - |  Monday-Sunday   | Monday |\n| F | 完整单词表示的月份 |  - | January-December | January |\n| m | 数字表示的月份，有前导零 |  2 |      01-12       | 01 |\n| M | 缩写单词表示的月份 |  3 |     Jan-Dec      | Jan |\n| n | 数字表示的月份，没有前导零 |  - |       1-12       | 1 |\n| Y | 4 位数字完整表示的年份 |  4 |    0000-9999     | 2006 |\n| y | 2 位数字表示的年份 |  2 |      00-99       | 06 |\n| a | 小写的上午和下午标识 |  2 |      am/pm       | pm |\n| A | 大写的上午和下午标识 |  2 |      AM/PM       | PM |\n| g | 小时，12 小时格式 |  - |       1-12       | 3 |\n| G | 小时，24 小时格式 | - | 0-23 | 15 |\n| h | 小时，12 小时格式 | 2 | 00-11 | 03 |\n| H | 小时，24 小时格式 | 2 | 00-23 | 15 |\n| i | 分钟 | 2 | 01-59 | 04 |\n| s | 秒数 | 2 | 01-59 | 05 |\n| O | 与格林威治时间相差的小时数 | - | - | -0700 |\n| P | 与格林威治时间相差的小时数，小时和分钟之间有冒号分隔 | - | - | -07:00 |\n| T | 时区缩写 | - | - | MST |\n| W | ISO8601 格式数字表示的年份中的第几周 | 2 | 01-52 | 01 |\n| N | ISO8601 格式数字表示的星期中的第几天 | 2 | 01-07 | 02 |\n| L | 是否为闰年，如果是闰年为 1，否则为 0 | 1 | 0-1 | 0 |\n| U | 秒级时间戳 | - | - | 1596604455 |\n| V | 毫级时间戳 | - | - | 1596604455666 |\n| X | 微级时间戳 | - | - | 1596604455666666 |\n| Z | 纳级时间戳 | - | - | 1596604455666666666 |\n| v | 毫秒 | - | 1-999 | 999 |\n| u | 微秒 | - | 1-999999 | 999999 |\n| x | 纳秒 | - | 1-999999999 | 999999999 |\n| w | 数字表示的周几 | 1 | 0-6 | 1 |\n| t | 月份中的总天数 | 2 | 28-31 | 31 |\n| z | 年份中的第几天 | - | 1-365 | 2 |\n| e | 当前位置 | - | - | America/New_York |\n| Q | 当前季节 | 1 | 1-4 | 1 |\n| C | 当前世纪数 | - | 0-99 | 21 |\n\n#### 常见问题\n\n1、v1 和 v2 版本有什么区别？\n> v1 和 v2 版本的 API 没有任何区别，只是 `language.go` 里翻译资源文件内嵌的实现方式不同，v1 版本是由第三方扩展库 [packr](https://github.com/gobuffalo/packr)\n> 实现的，\n> v2 版本是由 `golang1.16` 后内置标准库 [embed](https://pkg.go.dev/embed) 实现的。如果你的 go 版本大于 1.16推荐使用 v2 版本，否则必须使用 v1 版本。\n\n2、window 系统下部署二进制文件时区报错\n\n> window 系统如果没有安装 golang 环境，部署时会报 `GOROOT/lib/time/zoneinfo.zip: no such file or directory` 异常，原因是由于 window\n> 系统没有内置时区文件，只需要手动下载并指定 `zoneinfo.zip` 路径即可，如 `go/lib/time/zoneinfo.zip`\n\n```go\nos.Setenv(\"ZONEINFO\", \"./go/lib/time/zoneinfo.zip\")\n```\n\n3、docker 容器部署二进制文件时区报错\n\n> docker 容器如果没有安装 golang 环境，部署时会报 `open /usr/local/go/lib/time/zoneinfo.zip: no such file or directory`\n> 异常，只需要把 `zoneinfo.zip` 复制到容器中即可，即在 Dockerfile 中加入\n\n```go\nCOPY ./zoneinfo.zip /usr/local/go/lib/time/zoneinfo.zip\n```\n\n#### 参考项目\n\n* [briannesbitt/carbon](https://github.com/briannesbitt/Carbon)\n* [nodatime/nodatime](https://github.com/nodatime/nodatime)\n* [jinzhu/now](https://github.com/jinzhu/now)\n* [goframe/gtime](https://github.com/gogf/gf/tree/master/os/gtime)\n* [jodaOrg/joda-time](https://github.com/jodaOrg/joda-time)\n* [arrow-py/arrow](https://github.com/arrow-py/arrow)\n* [moment/moment](https://github.com/moment/moment)\n* [iamkun/dayjs](https://github.com/iamkun/dayjs)\n\n#### 贡献者\n感谢以下所有为 `Carbon` 做出贡献的人：\n\n<a href=\"https://github.com/dromara/carbon/graphs/contributors\"><img src=\"https://contrib.rocks/image?repo=dromara/carbon&max=100&columns=16\"/></a>\n\n#### 赞助\n\n`Carbon` 是一个非商业开源项目, 如果你想支持 `Carbon`, 你可以为开发者 [购买一杯咖啡](https://www.gouguoyin.com/zanzhu.html)\n\n#### 致谢\n\n`Carbon`已获取免费的 JetBrains 开源许可证，在此表示感谢\n\n<a href=\"https://www.jetbrains.com\"><img src=\"https://foruda.gitee.com/images/1704325523163241662/1bf21f86_544375.png\" height=\"100\" alt=\"JetBrains\"/></a>\n"
        },
        {
          "name": "README.jp.md",
          "type": "blob",
          "size": 76.494140625,
          "content": "# Carbon\n\n[![Carbon Release](https://img.shields.io/github/release/dromara/carbon.svg)](https://github.com/dromara/carbon/releases)\n[![Go Test](https://github.com/dromara/carbon/actions/workflows/test.yml/badge.svg)](https://github.com/dromara/carbon/actions)\n[![Go Report Card](https://goreportcard.com/badge/github.com/dromara/carbon/v2)](https://goreportcard.com/report/github.com/dromara/carbon/v2)\n[![Go Coverage](https://codecov.io/gh/dromara/carbon/branch/master/graph/badge.svg)](https://codecov.io/gh/dromara/carbon)\n[![Carbon Doc](https://img.shields.io/badge/go.dev-reference-brightgreen?logo=go&logoColor=white&style=flat)](https://pkg.go.dev/github.com/dromara/carbon/v2)\n[![License](https://img.shields.io/github/license/dromara/carbon)](https://github.com/dromara/carbon/blob/master/LICENSE)\n\n日本語 | [English](README.md) | [简体中文](README.cn.md)\n\n#### イントロ\n\n軽量、セマンティック、開発者に優しい `golang` 時間処理ライブラリ\n\nCarbon は [awesome-go](https://github.com/avelino/awesome-go#date-and-time \"awesome-go\") に含まれています\n\n#### リポジトリ\n\n[github.com/dromara/carbon](https://github.com/dromara/carbon \"github.com/dromara/carbon\")\n\n[gitee.com/dromara/carbon](https://gitee.com/dromara/carbon \"gitee.com/dromara/carbon\")\n\n[gitcode.com/dromara/carbon](https://gitcode.com/dromara/carbon \"gitcode.com/dromara/carbon\")\n\n#### インストール\n\n##### go version >= 1.17\n\n```go\n// github から使う\ngo get -u github.com/dromara/carbon/v2\nimport \"github.com/dromara/carbon/v2\"\n\n// gitee から使う\ngo get -u gitee.com/dromara/carbon/v2\nimport \"gitee.com/dromara/carbon/v2\"\n\n// gitcode から使う\ngo get -u gitcode.com/dromara/carbon/v2\nimport \"gitcode.com/dromara/carbon/v2\"\n```\n\n`Carbon` は [dromara](https://dromara.org/ \"dromara\") 組織に寄付されたためリポジトリのURLが変更されました。以前のリポジトリ `golang-module/carbon` を使用している場合は`go.mod`で新しいリポジトリURLに変更するか下記コマンドを実行します\n\n```go\ngo mod edit -replace github.com/golang-module/carbon/v2=github.com/dromara/carbon/v2\n```\n\n#### 使い方と例\n\n> 現在時刻が 2020-08-05 13:14:15.999999999 +0800 CST であると仮定します。\n\n##### グローバルのデフォルト値設定\n\n```go\ncarbon.SetDefault(carbon.Default{\n  Layout: carbon.DateTimeLayout,\n  Timezone: carbon.Japan,\n  WeekStartsAt: carbon.Sunday,\n  Locale: \"jp\", // 値の範囲： langディレクトリ下の翻訳ファイル名でファイル拡張子は含まない\n})\n```\n\n>エントリファイル(` main.go `など)に設定することをお勧めします\n\n##### Carbon と time.Time 間の変換\n\n```go\n// time.Time を Carbon に変換\ncarbon.CreateFromStdTime(time.Now())\n// Carbon を time.Time に変換\ncarbon.Now().StdTime()\n```\n\n##### 昨日、現在、明日\n\n```go\n// 現在時刻\nfmt.Printf(\"%s\", carbon.Now()) // 2020-08-05 13:14:15\ncarbon.Now().String() // 2020-08-05 13:14:15\ncarbon.Now().ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Now().ToDateTimeString() // 2020-08-05 13:14:15\n// 現在の日付\ncarbon.Now().ToDateString() // 2020-08-05\n// 現在の時間\ncarbon.Now().ToTimeString() // 13:14:15\n// タイムゾーン指定の現在\ncarbon.Now(Carbon.NewYork).ToDateTimeString() // 2020-08-05 14:14:15\n// 現在の秒タイムスタンプ\ncarbon.Now().Timestamp() // 1596604455\n// 現在のミリ秒タイムスタンプ\ncarbon.Now().TimestampMilli() // 1596604455999\n// 現在のマイクロ秒タイムスタンプ\ncarbon.Now().TimestampMicro() // 1596604455999999\n// 現在のナノ秒タイムスタンプ\ncarbon.Now().TimestampNano() // 1596604455999999999\n\n// 昨日の現在時刻\nfmt.Printf(\"%s\", carbon.Yesterday()) // 2020-08-04 13:14:15\ncarbon.Yesterday().String() // 2020-08-04 13:14:15\ncarbon.Yesterday().ToString() // 2020-08-04 13:14:15 +0800 CST\ncarbon.Yesterday().ToDateTimeString() // 2020-08-04 13:14:15\n// 昨日の日付\ncarbon.Yesterday().ToDateString() // 2020-08-04\n// 昨日の時間\ncarbon.Yesterday().ToTimeString() // 13:14:15\n// 日付指定の昨日\ncarbon.Parse(\"2021-01-28 13:14:15\").Yesterday().ToDateTimeString() // 2021-01-27 13:14:15\n// タイムゾーン指定の昨日\ncarbon.Yesterday(Carbon.NewYork).ToDateTimeString() // 2020-08-04 14:14:15\n// 昨日の秒タイムスタンプ\ncarbon.Yesterday().Timestamp() // 1596518055\n// 昨日のミリ秒タイムスタンプ\ncarbon.Yesterday().TimestampMilli() // 1596518055999\n// 昨日のマイクロ秒タイムスタンプ\ncarbon.Yesterday().TimestampMicro() // 1596518055999999\n// 昨日のナノ秒タイムスタンプ\ncarbon.Yesterday().TimestampNano() // 1596518055999999999\n\n// 明日の現在時刻\nfmt.Printf(\"%s\", carbon.Tomorrow()) // 2020-08-06 13:14:15\ncarbon.Tomorrow().String() // 2020-08-06 13:14:15\ncarbon.Tomorrow().ToString() // 2020-08-06 13:14:15 +0800 CST\ncarbon.Tomorrow().ToDateTimeString() // 2020-08-06 13:14:15\n// 明日の日付\ncarbon.Tomorrow().ToDateString() // 2020-08-06\n// 明日の時間\ncarbon.Tomorrow().ToTimeString() // 13:14:15\n// 日付指定の明日\ncarbon.Parse(\"2021-01-28 13:14:15\").Tomorrow().ToDateTimeString() // 2021-01-29 13:14:15\n// タイムゾーン指定の明日\ncarbon.Tomorrow(Carbon.NewYork).ToDateTimeString() // 2020-08-06 14:14:15\n// 明日の秒タイムスタンプ\ncarbon.Tomorrow().Timestamp() // 1596690855\n// 明日のミリ秒タイムスタンプ\ncarbon.Tomorrow().TimestampMilli() // 1596690855999\n// 明日のマイクロ秒タイムスタンプ\ncarbon.Tomorrow().TimestampMicro() // 1596690855999999\n// 明日のナノ秒タイムスタンプ\ncarbon.Tomorrow().TimestampNano() // 1596690855999999999\n```\n\n##### Carbon インスタンスを作成する\n\n```go\n// 秒タイムスタンプから Carbon インスタンスを作成します\ncarbon.CreateFromTimestamp(-1).ToString() // 1970-01-01 07:59:59 +0800 CST\ncarbon.CreateFromTimestamp(0).ToString() // 1970-01-01 08:00:00 +0800 CST\ncarbon.CreateFromTimestamp(1).ToString() // 1970-01-01 08:00:01 +0800 CST\ncarbon.CreateFromTimestamp(1649735755).ToString() // 2022-04-12 11:55:55 +0800 CST\n// ミリ秒のタイムスタンプから Carbon インスタンスを作成します\ncarbon.CreateFromTimestampMilli(1649735755981).ToString() // 2022-04-12 11:55:55.981 +0800 CST\n// マイクロ秒タイムスタンプから Carbon インスタンスを作成します\ncarbon.CreateFromTimestampMicro(1649735755981566).ToString() // 2022-04-12 11:55:55.981566 +0800 CST\n// ナノタイムスタンプから Carbon インスタンスを作成します\ncarbon.CreateFromTimestampNano(1649735755981566000).ToString() // 2022-04-12 11:55:55.981566 +0800 CST\n\n// 日付と時間から Carbon インスタンスを作成します\ncarbon.CreateFromDateTime(2020, 8, 5, 13, 14, 15).ToDateTimeString() // 2020-08-05 13:14:15\n// 日付と時間、ミリ秒から Carbon インスタンスを作成します\ncarbon.CreateFromDateTimeMilli(2020, 1, 1, 13, 14, 15, 999).ToString() // 2020-01-01 13:14:15.999 +0800 CST\n// 日付と時間、マイクロ秒から Carbon インスタンスを作成します\ncarbon.CreateFromDateTimeMicro(2020, 1, 1, 13, 14, 15, 999999).ToString() // 2020-01-01 13:14:15.999999 +0800 CST\n// 日付と時間、ナノ秒から Carbon インスタンスを作成します\ncarbon.CreateFromDateTimeNano(2020, 1, 1, 13, 14, 15, 999999999).ToString() // 2020-01-01 13:14:15.999999999 +0800 CST\n\n// 日付から Carbon インスタンスを作成します\ncarbon.CreateFromDate(2020, 8, 5).ToString() // 2020-08-05 00:00:00 +0800 CST\n// 日付とミリ秒から Carbon インスタンスを作成します\ncarbon.CreateFromDateMilli(2020, 8, 5, 999).ToString() // 2020-08-05 00:00:00.999 +0800 CST\n// 日付とマイクロ秒から Carbon インスタンスを作成します\ncarbon.CreateFromDateMicro(2020, 8, 5, 999999).ToString() // 2020-08-05 00:00:00.999999 +0800 CST\n// 日付とナノ秒から Carbon インスタンスを作成します\ncarbon.CreateFromDateNano(2020, 8, 5, 999999999).ToString() // 2020-08-05 00:00:00.999999999 +0800 CST\n\n// 時間から Carbon インスタンスを作成します(日付のデフォルトは現在の年月日です)\ncarbon.CreateFromTime(13, 14, 15).ToString() // 2020-08-05 13:14:15 +0800 CST\n// 時間、ミリ秒から Carbon インスタンスを作成します(年月日のデフォルトは現在の年月日です)\ncarbon.CreateFromTimeMilli(13, 14, 15, 999).ToString() // 2020-08-05 13:14:15.999 +0800 CST\n// 時間、マイクロ秒から Carbon インスタンスを作成します(年月日のデフォルトは現在の年月日です)\ncarbon.CreateFromTimeMicro(13, 14, 15, 999999).ToString() // 2020-08-05 13:14:15.999999 +0800 CST\n// 時間、ナノ秒から Carbon インスタンスを作成します(年月日のデフォルトは現在の年月日です)\ncarbon.CreateFromTimeNano(13, 14, 15, 999999999).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n```\n\n##### 時間文字列を Carbon インスタンスにパース\n\n```go\ncarbon.Parse(\"\").ToDateTimeString() // 空の文字列\ncarbon.Parse(\"0\").ToDateTimeString() // 空の文字列\ncarbon.Parse(\"00:00:00\").ToDateTimeString() // 空の文字列\ncarbon.Parse(\"0000-00-00\").ToDateTimeString() // 空の文字列\ncarbon.Parse(\"0000-00-00 00:00:00\").ToDateTimeString() // 空の文字列\n\ncarbon.Parse(\"now\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"yesterday\").ToString() // 2020-08-04 13:14:15 +0800 CST\ncarbon.Parse(\"tomorrow\").ToString() // 2020-08-06 13:14:15 +0800 CST\n\ncarbon.Parse(\"2020\").ToString() // 2020-01-01 00:00:00 +0800 CST\ncarbon.Parse(\"2020-8\").ToString() // 2020-08-01 00:00:00 +0800 CST\ncarbon.Parse(\"2020-08\").ToString() // 2020-08-01 00:00:00 +0800 CST\ncarbon.Parse(\"2020-8-5\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"2020-8-05\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"2020-08-05\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"2020-08-05.999\").ToString() // 2020-08-05 00:00:00.999 +0800 CST\ncarbon.Parse(\"2020-08-05.999999\").ToString() // 2020-08-05 00:00:00.999999 +0800 CST\ncarbon.Parse(\"2020-08-05.999999999\").ToString() // 2020-08-05 00:00:00.999999999 +0800 CST\n\ncarbon.Parse(\"2020-8-5 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-8-05 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-5 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15.999\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15.999999\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n\ncarbon.Parse(\"2020-8-5T13:14:15+08:00\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-8-05T13:14:15+08:00\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15+08:00\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15.999+08:00\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15.999999+08:00\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n\ncarbon.Parse(\"20200805\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"20200805131415\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"20200805131415.999\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"20200805131415.999999\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"20200805131415.999999999\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\ncarbon.Parse(\"20200805131415.999+08:00\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"20200805131415.999999+08:00\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"20200805131415.999999999+08:00\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n```\n\n##### フォーマットして文字列を Carbon インスタンスにパース\n\n```go\ncarbon.ParseByFormat(\"2020|08|05 13|14|15\", \"Y|m|d H|i|s\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByFormat(\"It is 2020-08-05 13:14:15\", \"\\\\I\\\\t \\\\i\\\\s Y-m-d H:i:s\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByFormat(\"今天是 2020年08月05日13时14分15秒\", \"今天是 Y年m月d日H时i分s秒\").ToDateTimeString() // 2020-08-05 13:14:15\n```\n\n##### レイアウトし、文字列を Carbon インスタンスにパース\n\n```go\ncarbon.ParseByLayout(\"2020|08|05 13|14|15\", \"2006|01|02 15|04|05\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByLayout(\"It is 2020-08-05 13:14:15\", \"It is 2006-01-02 15:04:05\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByLayout(\"今天是 2020年08月05日13时14分15秒\", \"今天是 2006年01月02日15时04分05秒\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByLayout(\"2020-08-05 13:14:15\", \"2006-01-02 15:04:05\", carbon.Tokyo).ToDateTimeString() // 2020-08-05 14:14:15\n```\n\n##### 境界\n\n```go\n// 世紀始め\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfCentury().ToDateTimeString() // 2000-01-01 00:00:00\n// 世紀終わり\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfCentury().ToDateTimeString() // 2999-12-31 23:59:59\n\n// 十年紀始め\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00\ncarbon.Parse(\"2021-08-05 13:14:15\").StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00\ncarbon.Parse(\"2029-08-05 13:14:15\").StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00\n// 十年紀終わり\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59\ncarbon.Parse(\"2021-08-05 13:14:15\").EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59\ncarbon.Parse(\"2029-08-05 13:14:15\").EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59\n\n// 今年始め\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfYear().ToDateTimeString() // 2020-01-01 00:00:00\n// 今年終わり\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfYear().ToDateTimeString() // 2020-12-31 23:59:59\n\n// 四半期始め\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfQuarter().ToDateTimeString() // 2020-07-01 00:00:00\n// 四半期終わり\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfQuarter().ToDateTimeString() // 2020-09-30 23:59:59\n\n// 月始め\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfMonth().ToDateTimeString() // 2020-08-01 00:00:00\n// 月終わり\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfMonth().ToDateTimeString() // 2020-08-31 23:59:59\n\n// 周始め\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfWeek().ToDateTimeString() // 2020-08-02 00:00:00\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Sunday).StartOfWeek().ToDateTimeString() // 2020-08-02 00:00:00\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Monday).StartOfWeek().ToDateTimeString() // 2020-08-03 00:00:00\n// 周終わり\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfWeek().ToDateTimeString() // 2020-08-08 23:59:59\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Sunday).EndOfWeek().ToDateTimeString() // 2020-08-08 23:59:59\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Monday).EndOfWeek().ToDateTimeString() // 2020-08-09 23:59:59\n\n// 日始め\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfDay().ToDateTimeString() // 2020-08-05 00:00:00\n// 日終わり\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfDay().ToDateTimeString() // 2020-08-05 23:59:59\n\n// 時間始め\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfHour().ToDateTimeString() // 2020-08-05 13:00:00\n// 時間終わり\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfHour().ToDateTimeString() // 2020-08-05 13:59:59\n\n// 分始め\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfMinute().ToDateTimeString() // 2020-08-05 13:14:00\n// 分終わり\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfMinute().ToDateTimeString() // 2020-08-05 13:14:59\n\n// 秒始め\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfSecond().ToString() // 2020-08-05 13:14:15 +0800 CST\n// 秒終わり\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfSecond().ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n```\n\n##### 大きな時間更新\n\n```go\n// 3世紀追加\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCenturies(3).ToDateTimeString() // 2320-02-29 13:14:15\n// 3世紀追加(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCenturiesNoOverflow(3).ToDateTimeString() // 2320-02-29 13:14:15\n// 1世紀追加\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCentury().ToDateTimeString() // 2120-02-29 13:14:15\n// 1世紀追加(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCenturyNoOverflow().ToDateTimeString() // 2120-02-29 13:14:15\n// 3世紀減らす\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCenturies(3).ToDateTimeString() // 1720-02-29 13:14:15\n// 3世紀減らす(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCenturiesNoOverflow(3).ToDateTimeString() // 1720-02-29 13:14:15\n// 1世紀減らす\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCentury().ToDateTimeString() // 1920-02-29 13:14:15\n// 1世紀減らす(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCenturyNoOverflow().ToDateTimeString() // 1920-02-29 13:14:15\n\n// 30年紀追加\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecades(3).ToDateTimeString() // 2050-03-01 13:14:15\n// 30年紀追加(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecadesNoOverflow(3).ToDateTimeString() // 2050-02-28 13:14:15\n// 10年紀追加\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecade().ToDateTimeString() // 2030-03-01 13:14:15\n// 10年紀追加(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecadeNoOverflow().ToDateTimeString() // 2030-02-28 13:14:15\n// 30年紀減らす\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecades(3).ToDateTimeString() // 1990-03-01 13:14:15\n// 30年紀減らす(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecadesNoOverflow(3).ToDateTimeString() // 1990-02-28 13:14:15\n// 10年紀減らす\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecade().ToDateTimeString() // 2010-03-01 13:14:15\n// 10年紀減らす(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecadeNoOverflow().ToDateTimeString() // 2010-02-28 13:14:15\n\n// 3年追加\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYears(3).ToDateTimeString() // 2023-03-01 13:14:15\n// 3年追加(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYearsNoOverflow(3).ToDateTimeString() // 2023-02-28 13:14:15\n// 1年追加\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYear().ToDateTimeString() // 2021-03-01 13:14:15\n// 1年追加(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYearNoOverflow().ToDateTimeString() // 2021-02-28 13:14:15\n// 3年減らす\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYears(3).ToDateTimeString() // 2017-03-01 13:14:15\n// 3年減らす(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYearsNoOverflow(3).ToDateTimeString() // 2017-02-28 13:14:15\n// 1年減らす\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYear().ToDateTimeString() // 2019-03-01 13:14:15\n// 1年減らす(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYearNoOverflow().ToDateTimeString() // 2019-02-28 13:14:15\n\n// 3四半期追加\ncarbon.Parse(\"2019-05-31 13:14:15\").AddQuarters(3).ToDateTimeString() // 2020-03-02 13:14:15\n// 3四半期追加(オーバーフローなし)\ncarbon.Parse(\"2019-05-31 13:14:15\").AddQuartersNoOverflow(3).ToDateTimeString() // 2020-02-29 13:14:15\n// 1四半期追加\ncarbon.Parse(\"2019-11-30 13:14:15\").AddQuarter().ToDateTimeString() // 2020-03-01 13:14:15\n// 1四半期追加(オーバーフローなし)\ncarbon.Parse(\"2019-11-30 13:14:15\").AddQuarterNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n// 3四半期減らす\ncarbon.Parse(\"2019-08-31 13:14:15\").SubQuarters(3).ToDateTimeString() // 2019-03-03 13:14:15\n// 3四半期減らす(オーバーフローなし)\ncarbon.Parse(\"2019-08-31 13:14:15\").SubQuartersNoOverflow(3).ToDateTimeString() // 2019-02-28 13:14:15\n// 1四半期減らす\ncarbon.Parse(\"2020-05-31 13:14:15\").SubQuarter().ToDateTimeString() // 2020-03-02 13:14:15\n// 1四半期減らす(オーバーフローなし)\ncarbon.Parse(\"2020-05-31 13:14:15\").SubQuarterNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n\n// 3ヶ月追加\ncarbon.Parse(\"2020-02-29 13:14:15\").AddMonths(3).ToDateTimeString() // 2020-05-29 13:14:15\n// 3ヶ月追加(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").AddMonthsNoOverflow(3).ToDateTimeString() // 2020-05-29 13:14:15\n// 1ヶ月追加\ncarbon.Parse(\"2020-01-31 13:14:15\").AddMonth().ToDateTimeString() // 2020-03-02 13:14:15\n// 1ヶ月追加(オーバーフローなし)\ncarbon.Parse(\"2020-01-31 13:14:15\").AddMonthNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n// 3ヶ月減らす\ncarbon.Parse(\"2020-02-29 13:14:15\").SubMonths(3).ToDateTimeString() // 2019-11-29 13:14:15\n// 3ヶ月減らす(オーバーフローなし)\ncarbon.Parse(\"2020-02-29 13:14:15\").SubMonthsNoOverflow(3).ToDateTimeString() // 2019-11-29 13:14:15\n// 1ヶ月減らす\ncarbon.Parse(\"2020-03-31 13:14:15\").SubMonth().ToDateTimeString() // 2020-03-02 13:14:15\n// 1か月減らす(オーバーフローなし)\ncarbon.Parse(\"2020-03-31 13:14:15\").SubMonthNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n\n// 3週間追加\ncarbon.Parse(\"2020-02-29 13:14:15\").AddWeeks(3).ToDateTimeString() // 2020-03-21 13:14:15\n// 1週間追加\ncarbon.Parse(\"2020-02-29 13:14:15\").AddWeek().ToDateTimeString() // 2020-03-07 13:14:15\n// 3週間減らす\ncarbon.Parse(\"2020-02-29 13:14:15\").SubWeeks(3).ToDateTimeString() // 2020-02-08 13:14:15\n// 1週間減らす\ncarbon.Parse(\"2020-02-29 13:14:15\").SubWeek().ToDateTimeString() // 2020-02-22 13:14:15\n\n// 3日追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDays(3).ToDateTimeString() // 2020-08-08 13:14:15\n// 1日追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDay().ToDateTimeString() // 2020-08-05 13:14:15\n// 3日減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDays(3).ToDateTimeString() // 2020-08-02 13:14:15\n// 1日減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDay().ToDateTimeString() // 2020-08-04 13:14:15\n\n// 3時間追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddHours(3).ToDateTimeString() // 2020-08-05 16:14:15\n// 2時間半追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2.5h\").ToDateTimeString() // 2020-08-05 15:44:15\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2h30m\").ToDateTimeString() // 2020-08-05 15:44:15\n// 1時間追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddHour().ToDateTimeString() // 2020-08-05 14:14:15\n// 3時間減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubHours(3).ToDateTimeString() // 2020-08-05 10:14:15\n// 2時間半減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2.5h\").ToDateTimeString() // 2020-08-05 10:44:15\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2h30m\").ToDateTimeString() // 2020-08-05 10:44:15\n// 1時間減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubHour().ToDateTimeString() // 2020-08-05 12:14:15\n\n// 3分追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddMinutes(3).ToDateTimeString() // 2020-08-05 13:17:15\n// 2分半追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2.5m\").ToDateTimeString() // 2020-08-05 13:16:45\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2m30s\").ToDateTimeString() // 2020-08-05 13:16:45\n// 1分追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddMinute().ToDateTimeString() // 2020-08-05 13:15:15\n// 3分減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubMinutes(3).ToDateTimeString() // 2020-08-05 13:11:15\n// 2分半減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2.5m\").ToDateTimeString() // 2020-08-05 13:11:45\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2m30s\").ToDateTimeString() // 2020-08-05 13:11:45\n// 1分減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubMinute().ToDateTimeString() // 2020-08-05 13:13:15\n\n// 3秒追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddSeconds(3).ToDateTimeString() // 2020-08-05 13:14:18\n// 2秒半追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2.5s\").ToDateTimeString() // 2020-08-05 13:14:17\n// 1秒追加\ncarbon.Parse(\"2020-08-05 13:14:15\").AddSecond().ToDateTimeString() // 2020-08-05 13:14:16\n// 3秒減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubSeconds(3).ToDateTimeString() // 2020-08-05 13:14:12\n// 2秒半減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2.5s\").ToDateTimeString() // 2020-08-05 13:14:12\n// 1秒減らす\ncarbon.Parse(\"2020-08-05 13:14:15\").SubSecond().ToDateTimeString() // 2020-08-05 13:14:14\n\n// 3ミリ秒追加\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMilliseconds(3).ToString() // 2020-08-05 13:14:15.225222222 +0800 CST\n// 1ミリ秒追加\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMillisecond().ToString() // 2020-08-05 13:14:15.223222222 +0800 CST\n// 3ミリ秒減らす\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMilliseconds(3).ToString() // 2020-08-05 13:14:15.219222222 +0800 CST\n// 1ミリ秒減らす\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMillisecond().ToString() // 2020-08-05 13:14:15.221222222 +0800 CST\n\n// 3マイクロ秒追加\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMicroseconds(3).ToString() // 2020-08-05 13:14:15.222225222 +0800 CST\n// １マイクロ秒追加\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMicrosecond().ToString() // 2020-08-05 13:14:15.222223222 +0800 CST\n// 3マイクロ秒減らす\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMicroseconds(3).ToString() // 2020-08-05 13:14:15.222219222 +0800 CST\n// １マイクロ秒減らす\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMicrosecond().ToString() // 2020-08-05 13:14:15.222221222 +0800 CST\n\n// 3ナノ秒追加\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddNanoseconds(3).ToString() // 2020-08-05 13:14:15.222222225 +0800 CST\n// 1ナノ秒追加\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddNanosecond().ToString() // 2020-08-05 13:14:15.222222223 +0800 CST\n// 3ナノ秒減らす\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubNanoseconds(3).ToString() // 2020-08-05 13:14:15.222222219 +0800 CST\n// 1ナノ秒減らす\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubNanosecond().ToString() // 2020-08-05 13:14:15.222222221 +0800 CST\n```\n\n##### 時間差分\n\n```go\n// 年差\ncarbon.Parse(\"2021-08-05 13:14:15\").DiffInYears(carbon.Parse(\"2020-08-05 13:14:15\")) // -1\n// 年差（絶対値）\ncarbon.Parse(\"2021-08-05 13:14:15\").DiffAbsInYears(carbon.Parse(\"2020-08-05 13:14:15\")) // 1\n\n// 月差\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInMonths(carbon.Parse(\"2020-07-05 13:14:15\")) // -1\n// 月差（絶対値）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInMonths(carbon.Parse(\"2020-07-05 13:14:15\")) // 1\n\n// 週差\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInWeeks(carbon.Parse(\"2020-07-28 13:14:15\")) // -1\n// 週差（絶対値）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInWeeks(carbon.Parse(\"2020-07-28 13:14:15\")) // 1\n\n// 日差\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInDays(carbon.Parse(\"2020-08-04 13:14:15\")) // -1\n// 日差（絶対値）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInDays(carbon.Parse(\"2020-08-04 13:14:15\")) // 1\n\n// 時間差\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInHours(carbon.Parse(\"2020-08-05 12:14:15\")) // -1\n// 時間差（絶対値）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInHours(carbon.Parse(\"2020-08-05 12:14:15\")) // 1\n\n// 分差\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInMinutes(carbon.Parse(\"2020-08-05 13:13:15\")) // -1\n// 分差（絶対値）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInMinutes(carbon.Parse(\"2020-08-05 13:13:15\")) // 1\n\n// 秒差\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInSeconds(carbon.Parse(\"2020-08-05 13:14:14\")) // -1\n// 秒差（絶対値）\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInSeconds(carbon.Parse(\"2020-08-05 13:14:14\")) // 1\n\n// 時間差を文字列で返す\ncarbon.Now().DiffInString() // just now\ncarbon.Now().AddYearsNoOverflow(1).DiffInString() // -1 year\ncarbon.Now().SubYearsNoOverflow(1).DiffInString() // 1 year\n// 時間差を文字列で返す（絶対値）\ncarbon.Now().DiffAbsInString(carbon.Now()) // just now\ncarbon.Now().AddYearsNoOverflow(1).DiffAbsInString(carbon.Now()) // 1 year\ncarbon.Now().SubYearsNoOverflow(1).DiffAbsInString(carbon.Now()) // 1 year\n\n// 継続時間差\nnow := carbon.Now()\nnow.DiffInDuration(now).String() // 0s\nnow.AddHour().DiffInDuration(now).String() // 1h0m0s\nnow.SubHour().DiffInDuration(now).String() // -1h0m0s\n// 継続時間差（絶対値）\nnow.DiffAbsInDuration(now).String() // 0s\nnow.AddHour().DiffAbsInDuration(now).String() // 1h0m0s\nnow.SubHour().DiffAbsInDuration(now).String() // 1h0m0s\n\n// 人が読みやすいフォーマットで時間差を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffForHumans() // just now\ncarbon.Parse(\"2019-08-05 13:14:15\").DiffForHumans() // 1 year ago\ncarbon.Parse(\"2018-08-05 13:14:15\").DiffForHumans() // 2 years ago\ncarbon.Parse(\"2021-08-05 13:14:15\").DiffForHumans() // 1 year from now\ncarbon.Parse(\"2022-08-05 13:14:15\").DiffForHumans() // 2 years from now\n\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 1 year before\ncarbon.Parse(\"2019-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 2 years before\ncarbon.Parse(\"2018-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 1 year after\ncarbon.Parse(\"2022-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 2 years after\n```\n\n##### 極值\n\n```go\nc0 := carbon.Parse(\"2023-04-01\")\nc1 := carbon.Parse(\"2023-03-28\")\nc2 := carbon.Parse(\"2023-04-16\")\n// 最近のCarbonインスタンスを返す\nc0.Closest(c1, c2) // c1\n// 遠いCarbonインスタンスを返す\nc0.Farthest(c1, c2) // c2\n\nyesterday := carbon.Yesterday()\ntoday     := carbon.Now()\ntomorrow  := carbon.Tomorrow()\n// 最大の Carbon インスタンスを返します\ncarbon.Max(yesterday, today, tomorrow) // tomorrow\n// 最小の Carbon インスタンスを返します\ncarbon.Min(yesterday, today, tomorrow) // yesterday\n\n// Carbonの最大値を戻す\ncarbon.MaxCarbon().ToString() // 9999-12-31 23:59:59.999999999 +0000 UTC\n// Carbonの最小値を戻す\ncarbon.MinCarbon().ToString() // -9998-01-01 00:00:00 +0000 UTC\n```\n\n##### 比較\n\n```go\n// 夏時間かどうか\ncarbon.Parse(\"\").IsDST() // false\ncarbon.Parse(\"0\").IsDST() // false\ncarbon.Parse(\"0000-00-00 00:00:00\").IsDST() // false\ncarbon.Parse(\"0000-00-00\").IsDST() // false\ncarbon.Parse(\"00:00:00\").IsDST() // false\ncarbon.Parse(\"2023-01-01\", \"Australia/Brisbane\").IsDST() // false\ncarbon.Parse(\"2023-01-01\", \"Australia/Sydney\").IsDST() // true\n\n// ゼロ値の時間かどうか(0001-01-01 00:00:00 +0000 UTC)\ncarbon.Parse(\"\").IsZero() // true\ncarbon.Parse(\"0\").IsZero() // true\ncarbon.Parse(\"0000-00-00 00:00:00\").IsZero() // true\ncarbon.Parse(\"0000-00-00\").IsZero() // true\ncarbon.Parse(\"00:00:00\").IsZero() // true\ncarbon.Parse(\"2020-08-05 00:00:00\").IsZero() // false\ncarbon.Parse(\"2020-08-05\").IsZero() // false\ncarbon.Parse(\"2020-08-05\").SetTimezone(\"xxx\").IsZero() // false\n\n// 有効な時間かどうか\ncarbon.Parse(\"\").IsValid() // false\ncarbon.Parse(\"0\").IsValid() // false\ncarbon.Parse(\"0000-00-00 00:00:00\").IsValid() // false\ncarbon.Parse(\"0000-00-00\").IsValid() // false\ncarbon.Parse(\"00:00:00\").IsValid() // false\ncarbon.Parse(\"2020-08-05 00:00:00\").IsValid() // true\ncarbon.Parse(\"2020-08-05\").IsValid() // true\ncarbon.Parse(\"2020-08-05\").SetTimezone(\"xxx\").IsValid() // false\n\n// 無効な時間かどうか\ncarbon.Parse(\"\").IsInvalid() // true\ncarbon.Parse(\"0\").IsInvalid() // true\ncarbon.Parse(\"0000-00-00 00:00:00\").IsInvalid() // true\ncarbon.Parse(\"0000-00-00\").IsInvalid() // true\ncarbon.Parse(\"00:00:00\").IsInvalid() // true\ncarbon.Parse(\"2020-08-05 00:00:00\").IsInvalid() // false\ncarbon.Parse(\"2020-08-05\").IsInvalid() // false\ncarbon.Parse(\"2020-08-05\").SetTimezone(\"xxx\").IsInvalid() // true\n\n// 午前かどうか\ncarbon.Parse(\"2020-08-05 00:00:00\").IsAM() // true\ncarbon.Parse(\"2020-08-05 08:00:00\").IsAM() // true\ncarbon.Parse(\"2020-08-05 12:00:00\").IsAM() // false\ncarbon.Parse(\"2020-08-05 13:00:00\").IsAM() // false\n// 午後かどうか\ncarbon.Parse(\"2020-08-05 00:00:00\").IsPM() // false\ncarbon.Parse(\"2020-08-05 08:00:00\").IsPM() // false\ncarbon.Parse(\"2020-08-05 12:00:00\").IsPM() // true\ncarbon.Parse(\"2020-08-05 13:00:00\").IsPM() // true\n\n// 現在かどうか\ncarbon.Now().IsNow() // true\n// 未来かどうか\ncarbon.Tomorrow().IsFuture() // true\n// 過去かどうか\ncarbon.Yesterday().IsPast() // true\n\n// 閏年かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLeapYear() // true\n// ISO8601で定められたLong Yearかどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLongYear() // true\n\n// 1月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsJanuary() // false\n// 2月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsFebruary() // false\n// 3月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsMarch() // false\n// 4月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsApril()  // false\n// 5月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsMay() // false\n// 6月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsJune() // false\n// 7月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsJuly() // false\n// 8月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAugust() // false\n// 9月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSeptember() // true\n// 10月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsOctober() // false\n// 11月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsNovember() // false\n// 12月かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsDecember() // false\n\n// 月曜日かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsMonday() // false\n// 火曜日かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsTuesday() // true\n// 水曜日かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWednesday() // false\n// 木曜日かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsThursday() // false\n// 金曜日かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsFriday() // false\n// 土曜日かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSaturday() // false\n// 日曜日かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSunday() // false\n\n// 平日かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWeekday() // false\n// 週末かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWeekend() // true\n\n// 昨日かどうか\ncarbon.Parse(\"2020-08-04 13:14:15\").IsYesterday() // true\ncarbon.Parse(\"2020-08-04 00:00:00\").IsYesterday() // true\ncarbon.Parse(\"2020-08-04\").IsYesterday() // true\n// 今日かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsToday() // true\ncarbon.Parse(\"2020-08-05 00:00:00\").IsToday() // true\ncarbon.Parse(\"2020-08-05\").IsToday() // true\n// 明日かどうか\ncarbon.Parse(\"2020-08-06 13:14:15\").IsTomorrow() // true\ncarbon.Parse(\"2020-08-06 00:00:00\").IsTomorrow() // true\ncarbon.Parse(\"2020-08-06\").IsTomorrow() // true\n\n// 同世紀かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameCentury(carbon.Parse(\"3020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameCentury(carbon.Parse(\"2099-08-05 13:14:15\")) // true\n// 同十年紀かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameDecade(carbon.Parse(\"2030-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameDecade(carbon.Parse(\"2120-08-05 13:14:15\")) // true\n// 同年かどうか\ncarbon.Parse(\"2020-08-05 00:00:00\").IsSameYear(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameYear(carbon.Parse(\"2020-12-31 13:14:15\")) // true\n// 同四半期かどうか\ncarbon.Parse(\"2020-08-05 00:00:00\").IsSameQuarter(carbon.Parse(\"2020-09-05 13:14:15\")) // false\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameQuarter(carbon.Parse(\"2021-01-31 13:14:15\")) // true\n// 同月かどうか\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameMonth(carbon.Parse(\"2021-01-31 13:14:15\")) // false\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameMonth(carbon.Parse(\"2020-01-31 13:14:15\")) // true\n// 同日かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameDay(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 00:00:00\").IsSameDay(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n// 同時間かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameHour(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:00:00\").IsSameHour(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n// 同分かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameMinute(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:00\").IsSameMinute(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n// 同秒かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameSecond(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameSecond(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n\n// 超過かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").Gt(carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Gt(carbon.Parse(\"2020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">\", carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">\", carbon.Parse(\"2020-08-05 13:14:15\")) // false\n\n// 未満かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").Lt(carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Lt(carbon.Parse(\"2020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<\", carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<\", carbon.Parse(\"2020-08-05 13:14:15\")) // false\n\n// 等しいかどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").Eq(carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Eq(carbon.Parse(\"2020-08-05 13:14:00\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"=\", carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"=\", carbon.Parse(\"2020-08-05 13:14:00\")) // false\n\n// と等しくないかどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").Ne(carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Ne(carbon.Parse(\"2020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"!=\", carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<>\", carbon.Parse(\"2020-08-05 13:14:15\")) // false\n\n// 以上かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").Gte(carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Gte(carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">=\", carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">=\", carbon.Parse(\"2020-08-05 13:14:15\")) // true\n\n// 以下かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").Lte(carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Lte(carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<=\", carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<=\", carbon.Parse(\"2020-08-05 13:14:15\")) // true\n\n//　二つの Carbon インスタンスの間に含まれているか(開始時間、終了時間を含まない)\ncarbon.Parse(\"2020-08-05 13:14:15\").Between(carbon.Parse(\"2020-08-05 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Between(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\n\n//　二つの Carbon インスタンスの間に含まれているか(開始時間を含む)\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedStart(carbon.Parse(\"2020-08-05 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedStart(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\n\n//　二つの Carbon インスタンスの間に含まれているか(終了時間を含む)\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedEnd(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedEnd(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\n\n//　二つの Carbon インスタンスの間に含まれているか(開始時間、終了時間を含む)\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedBoth(carbon.Parse(\"2020-08-05 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedBoth(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-05 13:14:15\")) // true\n```\n\n> 長年の定義については、読んでください https://en.wikipedia.org/wiki/ISO_8601#Week_dates\n\n##### 設定\n\n```go\n// タイムゾーンを設定\ncarbon.SetTimezone(carbon.PRC).Now().ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.SetTimezone(carbon.Tokyo).Now().ToDateTimeString() // 2020-08-05 14:14:15\ncarbon.SetTimezone(carbon.Tokyo).Now().SetTimezone(carbon.PRC).ToDateTimeString() // 2020-08-05 12:14:15\n\n// リージョンを設定\nutc, _ := time.LoadLocation(carbon.UTC)\ncarbon.SetLocation(utc).Now().ToDateTimeString() // 2022-06-28 09:25:38\ntokyo, _ := time.LoadLocation(carbon.Tokyo)\ncarbon.SetLocation(tokyo).Now().ToDateTimeString() // 2022-06-28 18:25:38\n\n// ロケールを設定\ncarbon.Parse(\"2020-07-05 13:14:15\").SetLocale(\"en\").DiffForHumans()) // 1 month ago\ncarbon.Parse(\"2020-07-05 13:14:15\").SetLocale(\"jp\").DiffForHumans() // 1 ヶ月前\n\n// 年月日時分秒を設定する\ncarbon.Parse(\"2020-01-01\").SetDateTime(2019, 2, 2, 13, 14, 15).ToString() // 2019-02-02 13:14:15 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTime(2019, 2, 31, 13, 14, 15).ToString() // 2019-03-03 13:14:15 +0800 CST\n// 年月日時分秒ミリ秒を設定する\ncarbon.Parse(\"2020-01-01\").SetDateTimeMilli(2019, 2, 2, 13, 14, 15, 999).ToString() // 2019-02-02 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTimeMilli(2019, 2, 31, 13, 14, 15, 999).ToString() // 2019-03-03 13:14:15.999 +0800 CST\n// 年月日時分秒微秒を設定する\ncarbon.Parse(\"2020-01-01\").SetDateTimeMicro(2019, 2, 2, 13, 14, 15, 999999).ToString() // 2019-02-02 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTimeMicro(2019, 2, 31, 13, 14, 15, 999999).ToString() // 2019-03-03 13:14:15.999999 +0800 CST\n// 年月日時分秒ナノ秒を設定する\ncarbon.Parse(\"2020-01-01\").SetDateTimeNano(2019, 2, 2, 13, 14, 15, 999999999).ToString() // 2019-02-02 13:14:15.999999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTimeNano(2019, 2, 31, 13, 14, 15, 999999999).ToString() // 2019-03-03 13:14:15.999999999 +0800 CST\n\n// 年月日を設定する\ncarbon.Parse(\"2020-01-01\").SetDate(2019, 2, 2).ToString() // 2019-02-02 00:00:00 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDate(2019, 2, 31).ToString() // 2019-03-03 00:00:00 +0800 CST\n// 年月日ミリ秒を設定する\ncarbon.Parse(\"2020-01-01\").SetDateMilli(2019, 2, 2, 999).ToString() // 2019-02-02 00:00:00.999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateMilli(2019, 2, 31, 999).ToString() // 2019-03-03 00:00:00.999 +0800 CST\n// 年月日微秒を設定する\ncarbon.Parse(\"2020-01-01\").SetDateMicro(2019, 2, 2, 999999).ToString() // 2019-02-02 00:00:00.999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateMicro(2019, 2, 31, 999999).ToString() // 2019-03-03 00:00:00.999999 +0800 CST\n// 年月日ナノ秒を設定する\ncarbon.Parse(\"2020-01-01\").SetDateNano(2019, 2, 2, 999999999).ToString() // 2019-02-02 00:00:00.999999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateNano(2019, 2, 31, 999999999).ToString() // 2019-03-03 00:00:00.999999999 +0800 CST\n\n// 時分秒を設定する\ncarbon.Parse(\"2020-01-01\").SetTime(13, 14, 15).ToString() // 2020-01-01 13:14:15 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTime(13, 14, 90).ToString() // 2020-01-01 13:15:30 +0800 CST\n// 時分秒ミリ秒を設定する\ncarbon.Parse(\"2020-01-01\").SetTimeMilli(13, 14, 15, 999).ToString() // 2020-01-01 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTimeMilli(13, 14, 90, 999).ToString() // 2020-01-01 13:15:30.999 +0800 CST\n// 時分秒微秒を設定する\ncarbon.Parse(\"2020-01-01\").SetTimeMicro(13, 14, 15, 999999).ToString() // 2020-01-01 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTimeMicro(13, 14, 90, 999999).ToString() // 2020-01-01 13:15:30.999999 +0800 CST\n// 時分秒ナノ秒を設定する\ncarbon.Parse(\"2020-01-01\").SetTimeNano(13, 14, 15, 999999999).ToString() // 2020-01-01 13:14:15.999999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTimeNano(13, 14, 90, 999999999).ToString() // 2020-01-01 13:15:30.999999999 +0800 CST\n\n// 年を設定する\ncarbon.Parse(\"2020-02-29\").SetYear(2021).ToDateString() // 2021-03-01\n// 年を設定する(オーバーフローなし)\ncarbon.Parse(\"2020-02-29\").SetYearNoOverflow(2021).ToDateString() // 2021-02-28\n\n// 月を設定する\ncarbon.Parse(\"2020-01-31\").SetMonth(2).ToDateString() // 2020-03-02\n// 月を設定する(オーバーフローなし)\ncarbon.Parse(\"2020-01-31\").SetMonthNoOverflow(2).ToDateString() // 2020-02-29\n\n// 週の開始日を設定する\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Sunday).Week() // 0\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Monday).Week() // 6\n\n// 日数を設定する\ncarbon.Parse(\"2019-08-05\").SetDay(31).ToDateString() // 2020-08-31\ncarbon.Parse(\"2020-02-01\").SetDay(31).ToDateString() // 2020-03-02\n\n// 時間を設定する\ncarbon.Parse(\"2020-08-05 13:14:15\").SetHour(10).ToDateTimeString() // 2020-08-05 10:14:15\ncarbon.Parse(\"2020-08-05 13:14:15\").SetHour(24).ToDateTimeString() // 2020-08-06 00:14:15\n\n// 分を設定する\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMinute(10).ToDateTimeString() // 2020-08-05 13:10:15\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMinute(60).ToDateTimeString() // 2020-08-05 14:00:15\n\n// 秒を設定する\ncarbon.Parse(\"2020-08-05 13:14:15\").SetSecond(10).ToDateTimeString() // 2020-08-05 13:14:10\ncarbon.Parse(\"2020-08-05 13:14:15\").SetSecond(60).ToDateTimeString() // 2020-08-05 13:15:00\n\n// ミリ秒を設定\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMillisecond(100).Millisecond() // 100\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMillisecond(999).Millisecond() // 999\n\n// 微妙に設定\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMicrosecond(100000).Microsecond() // 100000\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMicrosecond(999999).Microsecond() // 999999\n\n// ナノ秒を設定する\ncarbon.Parse(\"2020-08-05 13:14:15\").SetNanosecond(100000000).Nanosecond() // 100000000\ncarbon.Parse(\"2020-08-05 13:14:15\").SetNanosecond(999999999).Nanosecond() // 999999999\n```\n\n##### 取得\n\n```go\n// 年の総日数を取得\ncarbon.Parse(\"2019-08-05 13:14:15\").DaysInYear() // 365\ncarbon.Parse(\"2020-08-05 13:14:15\").DaysInYear() // 366\n// 月の総日数を取得\ncarbon.Parse(\"2020-02-01 13:14:15\").DaysInMonth() // 29\ncarbon.Parse(\"2020-04-01 13:14:15\").DaysInMonth() // 30\ncarbon.Parse(\"2020-08-01 13:14:15\").DaysInMonth() // 31\n\n// 年間積算日を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").DayOfYear() // 218\n// 本年の何週目かを取得\ncarbon.Parse(\"2019-12-31 13:14:15\").WeekOfYear() // 1\ncarbon.Parse(\"2020-08-05 13:14:15\").WeekOfYear() // 32\n// 今月の何日目（1から）かを取得\ncarbon.Parse(\"2020-08-05 13:14:15\").DayOfMonth() // 5\n// 今月の何週目かを取得\ncarbon.Parse(\"2020-08-05 13:14:15\").WeekOfMonth() // 1\n// 今週の何日目かを取得(1が月曜日)\ncarbon.Parse(\"2020-08-05 13:14:15\").DayOfWeek() // 3\n\n// 現在の年月日時分秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTime() // 2020,8,5,13,14,15\n// 現在の年月日時分秒ミリ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTimeMilli() // 2020,8,5,13,14,15,999\n// 現在の年月日時分秒マイクロ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTimeMicro() // 2020,8,5,13,14,15,999999\n// 現在の年月日時分秒ナノ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTimeNano() // 2020,8,5,13,14,15,999999999\n\n// 現在の年月日を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").Date() // 2020,8,5\n// 現在の年月日ミリ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").DateMilli() // 2020,8,5,999\n// 現在の年月日マイクロ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").DateMicro() // 2020,8,5,999999\n// 現在の年月日ナノ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").DateNano() // 2020,8,5,999999999\n\n// 現在の時分秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").Time() // 13,14,15\n// 現在の時分秒ミリ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").TimeMilli() // 13,14,15,999\n// 現在の時分秒マイクロ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").TimeMicro() // 13,14,15,999999\n// 現在の時分秒ナノ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").TimeNano() // 13,14,15,999999999\n\n// 現在の世紀を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Century() // 21\n// 現在の十年紀を取得\ncarbon.Parse(\"2019-08-05 13:14:15\").Decade() // 10\ncarbon.Parse(\"2021-08-05 13:14:15\").Decade() // 20\n// 現在の年を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Year() // 2020\n// 現在の四半期を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Quarter() // 3\n// 現在の月を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Month() // 8\n// 現在の週を取得(0から開始)\ncarbon.Parse(\"2020-08-02 13:14:15\").Week() // 0\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Sunday).Week() // 0\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Monday).Week() // 6\n// 現在の日数を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Day() // 5\n// 現在の時間を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Hour() // 13\n// 現在の分を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Minute() // 14\n// 現在の秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Second() // 15\n// 現在のミリ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999\").Millisecond() // 999\n// 現在のマイクロ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999\").Microsecond() // 999000\n// 現在のナノ秒を取得\ncarbon.Parse(\"2020-08-05 13:14:15.999\").Nanosecond() // 999000000\n\n// 秒タイムスタンプを取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Timestamp() // 1596604455\n// ミリ秒のタイムスタンプを取得\ncarbon.Parse(\"2020-08-05 13:14:15\").TimestampMilli() // 1596604455000\n// マイクロ秒タイムスタンプを取得\ncarbon.Parse(\"2020-08-05 13:14:15\").TimestampMicro() // 1596604455000000\n// ナノ秒タイムスタンプを取得\ncarbon.Parse(\"2020-08-05 13:14:15\").TimestampNano() // 1596604455000000000\n\n// タイムゾーン名を取得\ncarbon.SetTimezone(carbon.PRC).Timezone() // CST\ncarbon.SetTimezone(carbon.Tokyo).Timezone() // JST\n\n// ロケーション名を取得\ncarbon.SetTimezone(carbon.PRC).Location() // PRC\ncarbon.SetTimezone(carbon.Tokyo).Location() // Asia/Tokyo\n\n// UTCタイムゾーンオフセットの秒を取得\ncarbon.SetTimezone(carbon.PRC).Offset() // 28800\ncarbon.SetTimezone(carbon.Tokyo).Offset() // 32400\n\n// ロケール名を取得\ncarbon.Now().Locale() // en\ncarbon.Now().SetLocale(\"zh-CN\").Locale() // zh-CN\n\n// 星座を取得\ncarbon.Now().Constellation() // Leo\ncarbon.Now().SetLocale(\"en\").Constellation() // Leo\ncarbon.Now().SetLocale(\"jp\").Constellation() // しし座\n\n// 季節を取得\ncarbon.Now().Season() // Summer\ncarbon.Now().SetLocale(\"en\").Season() // Summer\ncarbon.Now().SetLocale(\"jp\").Season() // 夏\n\n// 年齢を取得\ncarbon.Parse(\"2002-01-01 13:14:15\").Age() // 17\ncarbon.Parse(\"2002-12-31 13:14:15\").Age() // 18\n```\n\n##### 出力\n\n```go\n// datetimeを文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToDateTimeString() // 2020-08-05 13:14:15\n// ミリ秒を含むdatetimeを文字列出力\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToDateTimeMilliString() // 2020-08-05 13:14:15.999\n// マイクロ秒を含むdatetimeを文字列出力\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToDateTimeMicroString() // 2020-08-05 13:14:15.999999\n// ナノ秒を含むdatetimeを文字列出力\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToDateTimeNanoString() // 2020-08-05 13:14:15.999999999\n\n// datetimeを略語形式の文字列出力\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeString() // 20200805131415\n// ミリ秒を含むdatetimeを略語形式の文字列出力\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeMilliString() // 20200805131415.999\n// マイクロ秒を含むdatetimeを略語形式の文字列出力\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeMicroString() // 20200805131415.999999\n// ナノ秒を含むdatetimeを略語形式の文字列出力\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeNanoString() // 20200805131415.999999999\n\n// dateを文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateString() // 2020-08-05\n// ミリ秒を含むdateを文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateMilliString() // 2020-08-05.999\n// マイクロ秒を含むdateを文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateMicroString() // 2020-08-05.999999\n// ナノ秒を含むdateを文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateNanoString() // 2020-08-05.999999999\n\n// dateを略語形式の文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateString() // 20200805\n// ミリ秒を含むdateを略語形式の文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateMilliString() // 20200805.999\n// マイクロ秒を含むdateを略語形式の文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateMicroString() // 20200805.999999\n// ナノ秒を含むdateを略語形式の文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateNanoString() // 20200805.999999999\n\n// 時間を文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeString() // 13:14:15\n// ミリ秒を含む時間を文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeMilliString() // 13:14:15.999\n// マイクロ秒を含む時間を文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeMicroString() // 13:14:15.999999\n// ナノ秒を含む時間を文字列出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeNanoString() // 13:14:15.999999999\n\n// 時間を略語形式の出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeString() // 131415\n// ミリ秒を含む時間を略語形式の出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeMilliString() // 131415.999\n// マイクロ秒を含む時間を略語形式の出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeMicroString() // 131415.999999\n// ナノ秒を含む時間を略語形式の出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeNanoString() // 131415.999999999\n\n// Ansic フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToAnsicString() // Wed Aug  5 13:14:15 2020\n// Atom フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToAtomString() // 2020-08-05T13:14:15+08:00\n// UnixDate フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToUnixDateString() // Wed Aug  5 13:14:15 CST 2020\n// RubyDate フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRubyDateString() // Wed Aug 05 13:14:15 +0800 2020\n// Kitchen フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToKitchenString() // 1:14PM\n// Cookie フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToCookieString() // Wednesday, 05-Aug-2020 13:14:15 CST\n// DayDateTime フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToDayDateTimeString() // Wed, Aug 5, 2020 1:14 PM\n// RSS フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRssString() // Wed, 05 Aug 2020 13:14:15 +0800\n// W3C フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToW3cString() // 2020-08-05T13:14:15+08:00\n\n// ISO8601 フォーマット文字列の出力 \ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601String() // 2020-08-05T13:14:15+08:00\n// ISO8601Milli フォーマット文字列の出力 \ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601MilliString() // 2020-08-05T13:14:15.999+08:00\n// ISO8601Micro フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601MicroString() // 2020-08-05T13:14:15.999999+08:00\n// ISO8601Nano フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601NanoString() // 2020-08-05T13:14:15.999999999+08:00\n// ISO8601Zulu フォーマット文字列の出力 \ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluString() // 2020-08-05T13:14:15Z\n// ISO8601ZuluMilli フォーマット文字列の出力 \ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluMilliString() // 2020-08-05T13:14:15.999Z\n// ISO8601ZuluMicro フォーマット文字列の出力 \ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluMicroString() // 2020-08-05T13:14:15.999999Z\n// ISO8601ZuluNano フォーマット文字列の出力 \ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluNanoString() // 2020-08-05T13:14:15.999999999Z\n\n// RFC822 フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc822String() // 05 Aug 20 13:14 CST\n// RFC822Z フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc822zString() // 05 Aug 20 13:14 +0800\n// RFC850 フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc850String() // Wednesday, 05-Aug-20 13:14:15 CST\n// RFC1036 フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc1036String() // Wed, 05 Aug 20 13:14:15 +0800\n// RFC1123 フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc1123String() // Wed, 05 Aug 2020 13:14:15 CST\n// RFC1123Z フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc1123zString() // Wed, 05 Aug 2020 13:14:15 +0800\n// RFC2822 フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc2822String() // Wed, 05 Aug 2020 13:14:15 +0800\n// RFC7231 フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc7231String() // Wed, 05 Aug 2020 13:14:15 GMT\n\n// RFC3339 フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339String() // 2020-08-05T13:14:15+08:00\n// RFC3339 フォーマット文字列の出力(ミリ秒を含む)\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339MilliString() // 2020-08-05T13:14:15.999+08:00\n// RFC3339 フォーマット文字列の出力(マイクロ秒を含む)\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339MicroString() // 2020-08-05T13:14:15.999999+08:00\n// RFC3339 フォーマット文字列の出力(ナノ秒を含む)\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339NanoString() // 2020-08-05T13:14:15.999999999+08:00\n\n// 日付時間文字列の出力\nfmt.Printf(\"%s\", carbon.Parse(\"2020-08-05 13:14:15\")) // 2020-08-05 13:14:15\n\n// \"2006-01-02 15:04:05.999999999 -0700 MST\" フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\n\n// \"Jan 2, 2006\" フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToFormattedDateString() // Aug 5, 2020\n// \"Mon, Jan 2, 2006\" フォーマット文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").ToFormattedDayDateString() // Wed, Aug 5, 2020\n\n// レイアウトを指定する文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(carbon.ISO8601Layout) // 2020-08-05T13:14:15+08:00\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(\"20060102150405\") // 20200805131415\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(\"2006年01月02日 15时04分05秒\") // 2020年08月05日 13时14分15秒\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(\"It is 2006-01-02 15:04:05\") // It is 2020-08-05 13:14:15\n\n// 指定されたフォーマットの文字列の出力\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"YmdHis\") // 20200805131415\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"Y年m月d日 H时i分s秒\") // 2020年08月05日 13时14分15秒\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"l jS \\\\o\\\\f F Y h:i:s A\") // Wednesday 5th of August 2020 01:14:15 PM\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"\\\\I\\\\t \\\\i\\\\s Y-m-d H:i:s\") // It is 2020-08-05 13:14:15\n```\n\n> もっとフォーマットした出力記号は付録を見てください <a href=\"#format-sign-table\">書式設定記号表</a>\n\n##### 星座\n\n```go\n// 星座を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Constellation() // Leo\n\n// おひつじ座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAries() // false\n// おうし座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsTaurus() // false\n// ふたご座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsGemini() // false\n// かに座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsCancer() // false\n// しし座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLeo() // true\n// おとめ座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsVirgo() // false\n// てんびん座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLibra() // false\n// さそり座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsScorpio() // false\n// いて座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSagittarius() // false\n// やぎ座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsCapricorn() // false\n// みずがめ座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAquarius() // false\n// うお座かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsPisces() // false\n```\n\n##### 季節\n\n> 気象区分によると、3-5月は春で、6-8月は夏で、9-11月は秋で、12-2月は冬です\n\n```go\n// 季節を取得\ncarbon.Parse(\"2020-08-05 13:14:15\").Season() // Summer\n\n// この季節の開始日\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfSeason().ToDateTimeString() // 2020-06-01 00:00:00\n// この季節の最終日\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfSeason().ToDateTimeString() // 2020-08-31 23:59:59\n\n// 春かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSpring() // false\n// 夏かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSummer() // true\n// 秋かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAutumn() // false\n// 冬かどうか\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWinter() // false\n```\n\n##### JSON\n\n```go\ntype Person struct {\n  Name string `json:\"name\"`\n  Age int `json:\"age\"`\n  Birthday0 carbon.Carbon `json:\"birthday0\"`\n  Birthday1 carbon.DateTime `json:\"birthday1\"`\n  Birthday2 carbon.DateTimeMilli `json:\"birthday2\"`\n  Birthday3 carbon.DateTimeMicro `json:\"birthday3\"`\n  Birthday4 carbon.DateTimeNano `json:\"birthday4\"`\n  GraduatedAt1 carbon.Date `json:\"graduated_at1\"`\n  GraduatedAt2 carbon.DateMilli `json:\"graduated_at2\"`\n  GraduatedAt3 carbon.DateMicro `json:\"graduated_at3\"`\n  GraduatedAt4 carbon.DateNano `json:\"graduated_at4\"`\n  OperatedAt1 carbon.Time `json:\"operated_at1\"`\n  OperatedAt2 carbon.TimeMilli `json:\"operated_at2\"`\n  OperatedAt3 carbon.TimeMicro `json:\"operated_at3\"`\n  OperatedAt4 carbon.TimeNano `json:\"operated_at4\"`\n  CreatedAt1 carbon.Timestamp `json:\"created_at1\"`\n  CreatedAt2 carbon.TimestampMilli `json:\"created_at2\"`\n  CreatedAt3 carbon.TimestampMicro `json:\"created_at3\"`\n  CreatedAt4 carbon.TimestampNano `json:\"created_at4\"`\n}\n\nperson := Person {\n    Name:        \"gouguoyin\",\n    Age:          18,\n    Birthday0:    carbon.Now().SubYears(18),\n    Birthday1:    carbon.NewDateTime(carbon.Now().SubYears(18)),\n    Birthday2:    carbon.NewDateTimeMilli(carbon.Now().SubYears(18)),\n    Birthday3:    carbon.NewDateTimeMicro(carbon.Now().SubYears(18)),\n    Birthday4:    carbon.NewDateTimeNano(carbon.Now().SubYears(18)),\n    GraduatedAt1: carbon.NewDate(carbon.Now()),\n    GraduatedAt2: carbon.NewDateMilli(carbon.Now()),\n    GraduatedAt3: carbon.NewDateMicro(carbon.Now()),\n    GraduatedAt4: carbon.NewDateNano(carbon.Now()),\n    OperatedAt1:  carbon.NewTime(carbon.Now()),\n    OperatedAt2:  carbon.NewTimeMilli(carbon.Now()),\n    OperatedAt3:  carbon.NewTimeMicro(carbon.Now()),\n    OperatedAt4:  carbon.NewTimeNano(carbon.Now()),\n    CreatedAt1:   carbon.NewTimestamp(carbon.Now()),\n    CreatedAt2:   carbon.NewTimestampMilli(carbon.Now()),\n    CreatedAt3:   carbon.NewTimestampMicro(carbon.Now()),\n    CreatedAt4:   carbon.NewTimestampNano(carbon.Now()),\n}\n\ndata, err := json.Marshal(&person)\nif err != nil {\n  // エラー処理...\n  log.Fatal(err)\n}\nfmt.Printf(\"%s\", data)\n// 出力\n{\n  \"name\": \"gouguoyin\",\n  \"age\": 18,\n  \"birthday0\": \"2003-07-16 13:14:15\",\n  \"birthday1\": \"2003-07-16 13:14:15\",\n  \"birthday2\": \"2003-07-16 13:14:15.999\",\n  \"birthday3\": \"2003-07-16 13:14:15.999999\",\n  \"birthday4\": \"2003-07-16 13:14:15.999999999\",\n  \"graduated_at1\": \"2020-08-05\",\n  \"graduated_at2\": \"2020-08-05.999\",\n  \"graduated_at3\": \"2020-08-05.999999\",\n  \"graduated_at4\": \"2020-08-05.999999999\",\n  \"operated_at1\": \"13:14:15\",\n  \"operated_at2\": \"13:14:15.999\",\n  \"operated_at3\": \"13:14:15.999999\",\n  \"operated_at4\": \"13:14:15.999999999\",\n  \"created_at1\": 1596604455,\n  \"created_at2\": 1596604455999,\n  \"created_at3\": 1596604455999999,\n  \"created_at4\": 1596604455999999999\n}\n\nerr := json.Unmarshal([]byte(data), &person)\nif err != nil {\n  // エラー処理...\n  log.Fatal(err)\n}\n\nperson.Birthday0.String() // 2003-07-16 13:14:15\nperson.Birthday1.String() // 2003-07-16 13:14:15\nperson.Birthday2.String() // 2003-07-16 13:14:15.999\nperson.Birthday3.String() // 2003-07-16 13:14:15.999999\nperson.Birthday4.String() // 2003-07-16 13:14:15.999999999\n\nperson.GraduatedAt1.String() // 2020-08-05\nperson.GraduatedAt2.String() // 2020-08-05.999\nperson.GraduatedAt3.String() // 2020-08-05.999999\nperson.GraduatedAt4.String() // 2020-08-05.999999999\n\nperson.OperatedAt1.String() // 13:14:15\nperson.OperatedAt2.String() // 13:14:15.999\nperson.OperatedAt3.String() // 13:14:15.999999\nperson.OperatedAt4.String() // 13:14:15.999999999\n\nperson.CreatedAt1.String() // \"1596604455\"\nperson.CreatedAt2.String() // \"1596604455999\"\nperson.CreatedAt3.String() // \"1596604455999999\"\nperson.CreatedAt4.String() // \"1596604455999999999\"\n\nperson.CreatedAt1.Int64() // 1596604455\nperson.CreatedAt2.Int64() // 1596604455999\nperson.CreatedAt3.Int64() // 1596604455999999\nperson.CreatedAt4.Int64() // 1596604455999999999\n```\n\n##### カレンダー\n\n現在サポートされているカレンダー\n\n* [儒略の日/簡略化儒略の日](./calendar/julian/README.jp.md \"儒略日/简化儒略日\")\n* [中国の旧暦](./calendar/lunar/README.jp.md \"中国の旧暦\")\n* [ペルシャ暦/イラン暦](./calendar/persian/README.jp.md \"ペルシャ暦/イラン暦\")\n\n##### i18n\n\n現在サポートされている言語\n\n* [简体中国語(zh-CN)](./lang/zh-CN.json \"简体中国語\")：[gouguoyin](https://github.com/gouguoyin \"gouguoyin\") に翻訳\n* [繁体中国語(zh-TW)](./lang/zh-TW.json \"繁体中国語\")：[gouguoyin](https://github.com/gouguoyin \"gouguoyin\") に翻訳\n* [英語(en)](./lang/en.json \"英語\")：[gouguoyin](https://github.com/gouguoyin \"gouguoyin\") に翻訳\n* [日本語(jp)](./lang/jp.json \"日本語\")：[gouguoyin](https://github.com/gouguoyin \"gouguoyin\") に翻訳\n* [韓国語(kr)](./lang/kr.json \"韓国語\")：[benzammour](https://github.com/benzammour \"benzammour\") に翻訳\n* [ドイツ語(de)](./lang/de.json \"ドイツ語\")：[benzammour](https://github.com/benzammour \"benzammour\") に翻訳\n* [スペイン語(es)](./lang/es.json \"スペイン語\")：[hgisinger](https://github.com/hgisinger \"hgisinger\") に翻訳\n* [トルコ語(tr)](./lang/tr.json \"トルコ語\")：[emresenyuva](https://github.com/emresenyuva \"emresenyuva\") に翻訳\n* [ポルトガル語(pt)](./lang/pt.json \"ポルトガル語\")：[felipear89](https://github.com/felipear89 \"felipear89\") に翻訳\n* [ロシア語(ru)](./lang/ru.json \"ロシア語\")：[zemlyak](https://github.com/zemlyak \"zemlyak\") に翻訳\n* [ウクライナ語(uk)](./lang/uk.json \"ウクライナ語\")：[open-git](https://github.com/open-git \"open-git\") に翻訳\n* [ルーマニア語(ro)](./lang/ro.json \"ルーマニア語\"): [DrOctavius](https://github.com/DrOctavius \"DrOctavius\") に翻訳\n* [インドネシア語(id)](./lang/id.json \"インドネシア語\"): [justpoypoy](https://github.com/justpoypoy \"justpoypoy\") に翻訳\n* [イタリア語(it)](./lang/it.json \"イタリア語\"): [nicoloHevelop](https://github.com/hollowaykeanho \"nicoloHevelop\") に翻訳\n* [マレーシアバハマ語(ms-MY)](./lang/ms-MY.json \"マレーシアバハマ語\"): [hollowaykeanho](https://github.com/hollowaykeanho \"hollowaykeanho\") に翻訳\n* [フランス語(fr)](./lang/fr.json \"フランス語\"): [hollowaykeanho](https://github.com/hollowaykeanho \"hollowaykeanho\") に翻訳\n* [タイ語(th)](./lang/th.json \"タイ語\"): [izcream](https://github.com/izcream \"izcream\") に翻訳\n* [スウェーデン語(se)](./lang/se.json \"スウェーデン語\"):  [jwanglof](https://github.com/jwanglof \"jwanglof\") に翻訳\n* [ペルシア語(fa)](./lang/fa.json \"ペルシア語\"):  [Iranian](https://github.com/Iranian \"Iranian\") に翻訳\n* [ポーランド語(nl)](./lang/nl.json \"ポーランド語\"): [RemcoE33](https://github.com/RemcoE33 \"RemcoE33\") に翻訳\n* [ベトナム語(vi)](./lang/vi.json \"ベトナム語\"): [culy247](https://github.com/culy247 \"culy247\") に翻訳\n* [ヒンディー語(hi)](./lang/hi.json \"ヒンディー語\"): [chauhan17nitin](https://github.com/chauhan17nitin \"chauhan17nitin\") に翻訳\n* [ポーランド語(pl)](./lang/pl.json \"ポーランド語\"): [gouguoyin](https://github.com/gouguoyin \"gouguoyin\") に翻訳\n* [ブルガリア語(bg)](./lang/bg.json \"ブルガリア語\"): [yuksbg](https://github.com/yuksbg \"yuksbg\") に翻訳\n* [アラビア語(ar)](./lang/ar.json \"アラビア語\"): [zumoshi](https://github.com/zumoshi \"zumoshi\") に翻訳\n* [ハンガリー語(hu)](./lang/hu.json \"ハンガリー語\"): [kenlas](https://github.com/kenlas \"kenlas\") に翻訳\n* [デンマーク語(dk)](./lang/dk.json \"デンマーク語\"): [Munk91](https://github.com/Munk91 \"Munk91\") に翻訳\n\n現在サポートされている方法\n\n* `Constellation()`：星座を取得，例えば `おひつじ座`\n* `Season()`：シーズンを取得，例えば `春`\n* `DiffForHumans()`：人が読みやすい形の時間差を取得します，例えば `1時間前`\n* `ToMonthString()`：月文字列の出力，例えば `いちがつ`\n* `ToShortMonthString()`：略語月文字列の出力，例えば `1がつ`\n* `ToWeekString()`：週文字列の出力，例えば `日曜日`\n* `ToShortWeekString()`：略語週文字列の出力，例えば `日`\n\n###### エリアの設定\n\n```go\nlang := carbon.NewLanguage()\nlang.SetLocale(\"jp\")\n\nc := carbon.SetLanguage(lang)\nif c.Error != nil {\n  // エラー処理\n  log.Fatal(c.Error)\n}\n\nc.Now().AddHours(1).DiffForHumans() // 1 時間後\nc.Now().AddHours(1).ToMonthString() // はちがつ\nc.Now().AddHours(1).ToShortMonthString() // 8がつ\nc.Now().AddHours(1).ToWeekString() // 日曜日\nc.Now().AddHours(1).ToShortWeekString() // 日\nc.Now().AddHours(1).Constellation() // しし座\nc.Now().AddHours(1).Season() // 夏\n```\n\n###### 翻訳リソースの一部を書き換える(残りはまだ指定された `locale` ファイルの内容によって翻訳されます)\n\n```go\nlang := carbon.NewLanguage()\n\nresources := map[string]string {\n  \"hour\": \"%dh\",\n}\nlang.SetLocale(\"en\").SetResources(resources)\n\nc := carbon.SetLanguage(lang)\nif c.Error != nil {\n  // エラー処理\n  log.Fatal(c.Error)\n}\n\nc.Now().AddYears(1).DiffForHumans() // 1 year from now\nc.Now().AddHours(1).DiffForHumans() // 1h from now\nc.Now().ToMonthString() // August\nc.Now().ToShortMonthString() // Aug\nc.Now().ToWeekString() // Tuesday\nc.Now().ToShortWeekString() // Tue\nc.Now().Constellation() // Leo\nc.Now().Season() // Summer\n```\n\n###### すべての翻訳リソースを書き換える\n\n```go\nlang := carbon.NewLanguage()\nresources := map[string]string {\n  \"months\": \"january|february|march|april|may|june|july|august|september|october|november|december\",\n  \"short_months\": \"jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec\",\n  \"weeks\": \"sunday|monday|tuesday|wednesday|thursday|friday|saturday\",\n  \"short_weeks\": \"sun|mon|tue|wed|thu|fri|sat\",\n  \"seasons\": \"spring|summer|autumn|winter\",\n  \"constellations\": \"aries|taurus|gemini|cancer|leo|virgo|libra|scorpio|sagittarius|capricornus|aquarius|pisce\",\n  \"year\": \"1 yr|%d yrs\",\n  \"month\": \"1 mo|%d mos\",\n  \"week\": \"%dw\",\n  \"day\": \"%dd\",\n  \"hour\": \"%dh\",\n  \"minute\": \"%dm\",\n  \"second\": \"%ds\",\n  \"now\": \"just now\",\n  \"ago\": \"%s ago\",\n  \"from_now\": \"in %s\",\n  \"before\": \"%s before\",\n  \"after\": \"%s after\",\n}\nlang.SetResources(resources)\n\nc := carbon.SetLanguage(lang)\nc.Now().AddYears(1).DiffForHumans() // in 1 yr\nc.Now().AddHours(1).DiffForHumans() // in 1h\nc.Now().ToMonthString() // august\nc.Now().ToShortMonthString() // aug\nc.Now().ToWeekString() // tuesday\nc.Now().ToShortWeekString() // tue\nc.Now().Constellation() // leo\nc.Now().Season() // summer\n```\n\n##### テスト\n\n```go\nc := carbon.SetTimezone(carbon.UTC)\n\nc.Now().ToDateString() // 2023-12-27\nc.Now().IsSetTestNow() // false\n\nc.SetTestNow(carbon.Parse(\"2020-08-05\"))\nc.Now().ToDateString() // 2020-08-05\nc.Now().IsSetTestNow() // true\n\nc.UnSetTestNow()\nc.Now().ToDateString() // 2023-12-27\nc.Now().IsSetTestNow() // false\n```\n\n##### エラー処理\n\n> 複数のエラーが発生した場合は最初のエラーだけを返します。前のエラーは削除された後に次のエラーに戻ります\n\n```go\nc := carbon.SetTimezone(\"xxx\").Parse(\"2020-08-05\")\nif c.Error != nil {\n  // エラー処理...\n  log.Fatal(c.Error)\n}\n// 出力\ninvalid timezone \"xxx\", please see the file \"$GOROOT/lib/time/zoneinfo.zip\" for all valid timezones\n```\n\n#### 付録\n\n##### <a id=\"format-sign-table\">書式設定記号表</a>\n\n|     記号            | 説明            | 長さ | 範囲            |  例            |\n| :------------: | :------------: |:------:|:----------------:| :------------: |\n| d | 月の日(2桁でパディング) | 2 | 01-31 | 02 |\n| D | 略語の曜日 | 3 | Mon-Sun | Mon |\n| j | 月の日(パディングしない) | - | 1-31 | 2 |\n| S | 何日目の英語の略語の接尾語，普通はjと協力して使います | 2 | st/nd/rd/th | th |\n| l | 曜日 | - | Monday-Sunday | Monday |\n| F | 月 | - | January-December | January |\n| m | 月(2桁でパディング) | 2 | 01-12 | 01 |\n| M | 略語の月 | 3 | Jan-Dec | Jan |\n| n | 月(パディングしない) | - | 1-12 | 1 |\n| Y | 年 | 4 | 0000-9999 | 2006 |\n| y | 年(下2桁) | 2 | 00-99 | 06 |\n| a | 小文字の午前と午後 | 2 | am/pm | pm |\n| A | 大文字の午前と午後 | 2 | AM/PM | PM |\n| g | 時間, 12時間のフォーマット | - | 1-12 | 3 |\n| G | 時間, 24時間のフォーマット | - | 0-23 | 15 |\n| h | 時間, 12時間のフォーマット | 2 | 00-11 | 03 |\n| H | 時間, 24時間のフォーマット | 2 | 00-23 | 15 |\n| i | 分 | 2 | 01-59 | 04 |\n| s | 秒 | 2 | 01-59 | 05 |\n| O | グリニッジとの時間差の時間数 | - | - | -0700 |\n| P | グリニッジと時間の差の時間数, 時間と分の間にコロンあり | - | - | -07:00 |\n| T | タイムゾーンの略語 | - | - | MST |\n| W | ISO8601 フォーマットの数字は年の中の第何週(2桁でパディング) | 2 | 1-52 | 01 |\n| N | ISO8601 フォーマットの数字は曜日(2桁でパディング) | 2 | 01-07 | 02 |\n| L | うるう年かどうか, うるう年が1であれば, 0 | 1 | 0-1 | 0 |\n| U | 秒タイムスタンプ | - | - | 1596604455 |\n| V | ミリ秒のタイムスタンプ | - | - | 1596604455666 |\n| X | マイクロ秒タイムスタンプ | - | - | 1596604455666666 |\n| Z | ナノ秒タイムスタンプ | - | - | 1596604455666666666 |\n| v | ミリ秒 | - | 1-999 | 999 |\n| u | マイクロ秒| - | 1-999999 | 999999 |\n| x | ナノ秒 | - | 1-999999999 | 999999999 |\n| w | 数字表示の曜日 | 1 | 0-6 | 1 |\n| t | 月の総日数 | 2 | 28-31 | 31 |\n| z | 年間積算日 | - | 1-365 | 2 |\n| e | リージョン | - | - | America/New_York |\n| Q | 四半期 | 1 | 1-4 | 1 |\n| C | 世紀 | - | 0-99 | 21 |\n\n#### FAQ\n\n1、v1とv2のバージョンの違いは何ですか？\n> APIのv1バージョンとv2バージョンに違いはありませんが `language.go`\n> での翻訳リソースファイルの実装は異なります。v1は、サードパーティの拡張ライブラリ [packr](https://github.com/gobuffalo/packr) によって実装されています，v2は、 `golang1.16`\n> の後に組み込みの標準ライブラリ [embed](https://pkg.go.dev/embed) によって実装されています。goバージョンが1.16より大きい場合は、v2バージョンを使用することをお勧めします。それ以外の場合は、v1バージョンを使用する必要があります。\n\n#### 参考\n\n* [briannesbitt/carbon](https://github.com/briannesbitt/Carbon)\n* [nodatime/nodatime](https://github.com/nodatime/nodatime)\n* [jinzhu/now](https://github.com/jinzhu/now)\n* [goframe/gtime](https://github.com/gogf/gf/tree/master/os/gtime)\n* [jodaOrg/joda-time](https://github.com/jodaOrg/joda-time)\n* [arrow-py/arrow](https://github.com/arrow-py/arrow)\n* [moment/moment](https://github.com/moment/moment)\n* [iamkun/dayjs](https://github.com/iamkun/dayjs)\n\n#### コントリビューター\n`Carbon` に貢献してくれた以下のすべてに感謝します：\n\n<a href=\"https://github.com/dromara/carbon/graphs/contributors\"><img src=\"https://contrib.rocks/image?repo=dromara/carbon&max=100&columns=16\"/></a>\n\n#### スポンサー\n\n`Carbon` は非営利のオープンソースプロジェクトです，`Carbon` をサポートしたい場合は、開発者のために [コーヒーを1杯購入](https://opencollective.com/go-carbon) できます\n\n#### 謝辞\n\n`Carbon` は無料の JetBrains オープンソースライセンスを取得しました，これに感謝します\n\n<a href=\"https://www.jetbrains.com\"><img src=\"https://foruda.gitee.com/images/1704325523163241662/1bf21f86_544375.png\" height=\"100\" alt=\"JetBrains\"/></a>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 78.9375,
          "content": "# Carbon\n\n[![Carbon Release](https://img.shields.io/github/release/dromara/carbon.svg)](https://github.com/dromara/carbon/releases)\n[![Go Test](https://github.com/dromara/carbon/actions/workflows/test.yml/badge.svg)](https://github.com/dromara/carbon/actions)\n[![Go Report Card](https://goreportcard.com/badge/github.com/dromara/carbon/v2)](https://goreportcard.com/report/github.com/dromara/carbon/v2)\n[![Go Coverage](https://codecov.io/gh/dromara/carbon/branch/master/graph/badge.svg)](https://codecov.io/gh/dromara/carbon)\n[![Carbon Doc](https://img.shields.io/badge/go.dev-reference-brightgreen?logo=go&logoColor=white&style=flat)](https://pkg.go.dev/github.com/dromara/carbon/v2)\n[![License](https://img.shields.io/github/license/dromara/carbon)](https://github.com/dromara/carbon/blob/master/LICENSE)\n\nEnglish | [简体中文](README.cn.md) | [日本語](README.jp.md)\n\n#### Introduction\n\nA simple, semantic and developer-friendly time package for `golang`, has been included\nby [awesome-go](https://github.com/avelino/awesome-go#date-and-time \"awesome-go\")\n\n#### Repository\n\n[github.com/dromara/carbon](https://github.com/dromara/carbon \"github.com/dromara/carbon\")\n\n[gitee.com/dromara/carbon](https://gitee.com/dromara/carbon \"gitee.com/dromara/carbon\")\n\n[gitcode.com/dromara/carbon](https://gitcode.com/dromara/carbon \"gitcode.com/dromara/carbon\")\n\n#### Installation\n\n##### go version >= 1.17\n\n```go\n// By github\ngo get -u github.com/dromara/carbon/v2\nimport \"github.com/dromara/carbon/v2\"\n\n// By gitee\ngo get -u gitee.com/dromara/carbon/v2\nimport \"gitee.com/dromara/carbon/v2\"\n\n// By gitcode\ngo get -u gitcode.com/dromara/carbon/v2\nimport \"gitee.com/dromara/gitcode/v2\"\n```\n\n`Carbon` was donated to the [dromara](https://dromara.org/ \"dromara\") organization, the repository URL has changed. If the previous repository used was `golang-module/carbon`, please replace the original repository with the new repository in `go.mod`, or execute the following command:\n\n```go\ngo mod edit -replace github.com/golang-module/carbon/v2=github.com/dromara/carbon/v2\n```\n\n#### Usage and example\n\n> Assuming the current time is 2020-08-05 13:14:15.999999999 +0800 CST\n\n##### Set globally default values\n\n```go\ncarbon.SetDefault(carbon.Default{\n  Layout: carbon.DateTimeLayout,\n  Timezone: carbon.UTC,\n  WeekStartsAt: carbon.Sunday,\n  Locale: \"en\", // value range: translate file name in the lang directory, excluding file suffix\n})\n```\n> Suggest setting in the entry file such as `main.go`\n\n##### Convert between `Carbon` and `time.Time`\n\n```go\n// Convert standard Time.time to Carbon\ncarbon.CreateFromStdTime(time.Now())\n// Convert Carbon to standard Time.time\ncarbon.Now().StdTime()\n```\n\n##### Yesterday, today and tomorrow\n\n```go\n// Return datetime of today\nfmt.Printf(\"%s\", carbon.Now()) // 2020-08-05 13:14:15\ncarbon.Now().String() // 2020-08-05 13:14:15\ncarbon.Now().ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Now().ToDateTimeString() // 2020-08-05 13:14:15\n// Return date of today\ncarbon.Now().ToDateString() // 2020-08-05\n// Return time of today\ncarbon.Now().ToTimeString() // 13:14:15\n// Return datetime of today in a given timezone\ncarbon.Now(Carbon.NewYork).ToDateTimeString() // 2020-08-05 14:14:15\n// Return timestamp with second of today\ncarbon.Now().Timestamp() // 1596604455\n// Return timestamp with millisecond of today\ncarbon.Now().TimestampMilli() // 1596604455999\n// Return timestamp with microsecond of today\ncarbon.Now().TimestampMicro() // 1596604455999999\n// Return timestamp with nanosecond of today\ncarbon.Now().TimestampNano() // 1596604455999999999\n\n// Return datetime of yesterday\nfmt.Printf(\"%s\", carbon.Yesterday()) // 2020-08-04 13:14:15\ncarbon.Yesterday().String() // 2020-08-04 13:14:15\ncarbon.Yesterday().ToString() // 2020-08-04 13:14:15 +0800 CST\ncarbon.Yesterday().ToDateTimeString() // 2020-08-04 13:14:15\n// Return date of yesterday\ncarbon.Yesterday().ToDateString() // 2020-08-04\n// Return time of yesterday\ncarbon.Yesterday().ToTimeString() // 13:14:15\n// Return datetime of yesterday on a given day\ncarbon.Parse(\"2021-01-28 13:14:15\").Yesterday().ToDateTimeString() // 2021-01-27 13:14:15\n// Return datetime of yesterday in a given timezone\ncarbon.Yesterday(Carbon.NewYork).ToDateTimeString() // 2020-08-04 14:14:15\n// Return timestamp with second of yesterday\ncarbon.Yesterday().Timestamp() // 1596518055\n// Return timestamp with millisecond of yesterday\ncarbon.Yesterday().TimestampMilli() // 1596518055999\n// Return timestamp with microsecond of yesterday\ncarbon.Yesterday().TimestampMicro() // 1596518055999999\n// Return timestamp with nanosecond of yesterday\ncarbon.Yesterday().TimestampNano() // 1596518055999999999\n\n// Return datetime of tomorrow\nfmt.Printf(\"%s\", carbon.Tomorrow()) // 2020-08-06 13:14:15\ncarbon.Tomorrow().String() // 2020-08-06 13:14:15\ncarbon.Tomorrow().ToString() // 2020-08-06 13:14:15 +0800 CST\ncarbon.Tomorrow().ToDateTimeString() // 2020-08-06 13:14:15\n// Return date of tomorrow\ncarbon.Tomorrow().ToDateString() // 2020-08-06\n// Return time of tomorrow\ncarbon.Tomorrow().ToTimeString() // 13:14:15\n// Return datetime of tomorrow on a given day\ncarbon.Parse(\"2021-01-28 13:14:15\").Tomorrow().ToDateTimeString() // 2021-01-29 13:14:15\n// Return datetime of tomorrow in a given timezone\ncarbon.Tomorrow(Carbon.NewYork).ToDateTimeString() // 2020-08-06 14:14:15\n// Return timestamp with second of tomorrow\ncarbon.Tomorrow().Timestamp() // 1596690855\n// Return timestamp with millisecond of tomorrow\ncarbon.Tomorrow().TimestampMilli() // 1596690855999\n// Return timestamp with microsecond of tomorrow\ncarbon.Tomorrow().TimestampMicro() // 1596690855999999\n// Return timestamp with nanosecond of tomorrow\ncarbon.Tomorrow().TimestampNano() // 1596690855999999999\n```\n\n##### Create a `Carbon` instance\n\n```go\n// Create a Carbon instance from a given timestamp with second\ncarbon.CreateFromTimestamp(-1).ToString() // 1970-01-01 07:59:59 +0800 CST\ncarbon.CreateFromTimestamp(0).ToString() // 1970-01-01 08:00:00 +0800 CST\ncarbon.CreateFromTimestamp(1).ToString() // 1970-01-01 08:00:01 +0800 CST\ncarbon.CreateFromTimestamp(1649735755).ToString() // 2022-04-12 11:55:55 +0800 CST\n// Create a Carbon instance from a given timestamp with millisecond\ncarbon.CreateFromTimestampMilli(1649735755981).ToString() // 2022-04-12 11:55:55.981 +0800 CST\n// Create a Carbon instance from a given timestamp with microsecond\ncarbon.CreateFromTimestampMicro(1649735755981566).ToString() // 2022-04-12 11:55:55.981566 +0800 CST\n// Create a Carbon instance from a given timestamp with nanosecond\ncarbon.CreateFromTimestampNano(1649735755981566000).ToString() // 2022-04-12 11:55:55.981566 +0800 CST\n\n// Create a Carbon instance from a given date and time\ncarbon.CreateFromDateTime(2020, 8, 5, 13, 14, 15).ToString() // 2020-08-05 13:14:15 +0800 CST\n// Create a Carbon instance from a given date and time with millisecond\ncarbon.CreateFromDateTimeMilli(2020, 8, 5, 13, 14, 15, 999).ToString() // 2020-08-05 13:14:15.999 +0800 CST\n// Create a Carbon instance from a given date and time with microsecond\ncarbon.CreateFromDateTimeMicro(2020, 8, 5, 13, 14, 15, 999999).ToString() // 2020-08-05 13:14:15.999999 +0800 CST\n// Create a Carbon instance from a given date and time with nanosecond\ncarbon.CreateFromDateTimeNano(2020, 8, 5, 13, 14, 15, 999999999).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n\n// Create a Carbon instance from a given year, month and day\ncarbon.CreateFromDate(2020, 8, 5).ToString() // 2020-08-05 00:00:00 +0800 CST\n// Create a Carbon instance from a given year, month and day with millisecond\ncarbon.CreateFromDateMilli(2020, 8, 5, 999).ToString() // 2020-08-05 00:00:00.999 +0800 CST\n// Create a Carbon instance from a given year, month and day with microsecond\ncarbon.CreateFromDateMicro(2020, 8, 5, 999999).ToString() // 2020-08-05 00:00:00.999999 +0800 CST\n// Create a Carbon instance from a given year, month and day with nanosecond\ncarbon.CreateFromDateNano(2020, 8, 5, 999999999).ToString() // 2020-08-05 00:00:00.999999999 +0800 CST\n\n// Create a Carbon instance from a given hour, minute and second\ncarbon.CreateFromTime(13, 14, 15).ToString() // 2020-08-05 13:14:15 +0800 CST\n// Create a Carbon instance from a given hour, minute and second with millisecond\ncarbon.CreateFromTimeMilli(13, 14, 15, 999).ToString() // 2020-08-05 13:14:15.999 +0800 CST\n// Create a Carbon instance from a given hour, minute and second with microsecond\ncarbon.CreateFromTimeMicro(13, 14, 15, 999999).ToString() // 2020-08-05 13:14:15.999999 +0800 CST\n// Create a Carbon instance from a given hour, minute and second with nanosecond\ncarbon.CreateFromTimeNano(13, 14, 15, 999999999).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n```\n\n##### Parse a time string as a `Carbon` instance\n\n```go\ncarbon.Parse(\"\").ToDateTimeString() // empty string\ncarbon.Parse(\"0\").ToDateTimeString() // empty string\ncarbon.Parse(\"00:00:00\").ToDateTimeString() // empty string\ncarbon.Parse(\"0000-00-00\").ToDateTimeString() // empty string\ncarbon.Parse(\"0000-00-00 00:00:00\").ToDateTimeString() // empty string\n\ncarbon.Parse(\"now\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"yesterday\").ToString() // 2020-08-04 13:14:15 +0800 CST\ncarbon.Parse(\"tomorrow\").ToString() // 2020-08-06 13:14:15 +0800 CST\n\ncarbon.Parse(\"2020\").ToString() // 2020-01-01 00:00:00 +0800 CST\ncarbon.Parse(\"2020-8\").ToString() // 2020-08-01 00:00:00 +0800 CST\ncarbon.Parse(\"2020-08\").ToString() // 2020-08-01 00:00:00 +0800 CST\ncarbon.Parse(\"2020-8-5\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"2020-8-05\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"2020-08-05\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"2020-08-05.999\").ToString() // 2020-08-05 00:00:00.999 +0800 CST\ncarbon.Parse(\"2020-08-05.999999\").ToString() // 2020-08-05 00:00:00.999999 +0800 CST\ncarbon.Parse(\"2020-08-05.999999999\").ToString() // 2020-08-05 00:00:00.999999999 +0800 CST\n\ncarbon.Parse(\"2020-8-5 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-8-05 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-5 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15.999\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15.999999\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n\ncarbon.Parse(\"2020-8-5T13:14:15+08:00\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-8-05T13:14:15+08:00\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15+08:00\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15.999+08:00\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15.999999+08:00\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n\ncarbon.Parse(\"20200805\").ToString() // 2020-08-05 00:00:00 +0800 CST\ncarbon.Parse(\"20200805131415\").ToString() // 2020-08-05 13:14:15 +0800 CST\ncarbon.Parse(\"20200805131415.999\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"20200805131415.999999\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"20200805131415.999999999\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\ncarbon.Parse(\"20200805131415.999+08:00\").ToString() // 2020-08-05 13:14:15.999 +0800 CST\ncarbon.Parse(\"20200805131415.999999+08:00\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\ncarbon.Parse(\"20200805131415.999999999+08:00\").ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n```\n\n##### Parse a time string as a `Carbon` instance by format\n\n```go\ncarbon.ParseByFormat(\"2020|08|05 13|14|15\", \"Y|m|d H|i|s\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByFormat(\"It is 2020-08-05 13:14:15\", \"\\\\I\\\\t \\\\i\\\\s Y-m-d H:i:s\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByFormat(\"今天是 2020年08月05日13时14分15秒\", \"今天是 Y年m月d日H时i分s秒\").ToDateTimeString() // 2020-08-05 13:14:15\n```\n\n##### Parse a time string as a `Carbon` instance by layout\n\n```go\ncarbon.ParseByLayout(\"2020|08|05 13|14|15\", \"2006|01|02 15|04|05\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByLayout(\"It is 2020-08-05 13:14:15\", \"It is 2006-01-02 15:04:05\").ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.ParseByLayout(\"今天是 2020年08月05日13时14分15秒\", \"今天是 2006年01月02日15时04分05秒\").ToDateTimeString() // 2020-08-05 13:14:15\n```\n\n##### Boundary\n\n```go\n// Start of the century\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfCentury().ToDateTimeString() // 2000-01-01 00:00:00\n// End of the century\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfCentury().ToDateTimeString() // 2999-12-31 23:59:59\n\n// Start of the decade\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00\ncarbon.Parse(\"2021-08-05 13:14:15\").StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00\ncarbon.Parse(\"2029-08-05 13:14:15\").StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00\n// End of the decade\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59\ncarbon.Parse(\"2021-08-05 13:14:15\").EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59\ncarbon.Parse(\"2029-08-05 13:14:15\").EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59\n\n// Start of the year\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfYear().ToDateTimeString() // 2020-01-01 00:00:00\n// End of the year\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfYear().ToDateTimeString() // 2020-12-31 23:59:59\n\n// Start of the quarter\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfQuarter().ToDateTimeString() // 2020-07-01 00:00:00\n// End of the quarter\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfQuarter().ToDateTimeString() // 2020-09-30 23:59:59\n\n// Start of the month\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfMonth().ToDateTimeString() // 2020-08-01 00:00:00\n// End of the month\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfMonth().ToDateTimeString() // 2020-08-31 23:59:59\n\n// Start of the week\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfWeek().ToDateTimeString() // 2020-08-02 00:00:00\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Sunday).StartOfWeek().ToDateTimeString() // 2020-08-02 00:00:00\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Monday).StartOfWeek().ToDateTimeString() // 2020-08-03 00:00:00\n// End of the week\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfWeek().ToDateTimeString() // 2020-08-08 23:59:59\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Sunday).EndOfWeek().ToDateTimeString() // 2020-08-08 23:59:59\ncarbon.Parse(\"2020-08-05 13:14:15\").SetWeekStartsAt(carbon.Monday).EndOfWeek().ToDateTimeString() // 2020-08-09 23:59:59\n\n// Start of the day\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfDay().ToDateTimeString() // 2020-08-05 00:00:00\n// End of the day\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfDay().ToDateTimeString() // 2020-08-05 23:59:59\n\n// Start of the hour\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfHour().ToDateTimeString() // 2020-08-05 13:00:00\n// End of the hour\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfHour().ToDateTimeString() // 2020-08-05 13:59:59\n\n// Start of the minute\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfMinute().ToDateTimeString() // 2020-08-05 13:14:00\n// End of the minute\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfMinute().ToDateTimeString() // 2020-08-05 13:14:59\n\n// Start of the second\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfSecond().ToString() // 2020-08-05 13:14:15 +0800 CST\n// End of the second\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfSecond().ToString() // 2020-08-05 13:14:15.999999999 +0800 CST\n```\n\n##### Traveler\n\n```go\n// Add three centuries\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCenturies(3).ToDateTimeString() // 2320-02-29 13:14:15\n// Add three centuries without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCenturiesNoOverflow(3).ToDateTimeString() // 2320-02-29 13:14:15\n// Add one century\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCentury().ToDateTimeString() // 2120-02-29 13:14:15\n// Add one century without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").AddCenturyNoOverflow().ToDateTimeString() // 2120-02-29 13:14:15\n// Subtract three centuries\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCenturies(3).ToDateTimeString() // 1720-02-29 13:14:15\n// Subtract three centuries without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCenturiesNoOverflow(3).ToDateTimeString() // 1720-02-29 13:14:15\n// Subtract one century\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCentury().ToDateTimeString() // 1920-02-29 13:14:15\n// Subtract one century without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").SubCenturyNoOverflow().ToDateTimeString() // 1920-02-20 13:14:15\n\n// Add three decades\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecades(3).ToDateTimeString() // 2050-03-01 13:14:15\n// Add three decades without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecadesNoOverflow(3).ToDateTimeString() // 2050-02-28 13:14:15\n// Add one decade\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecade().ToDateTimeString() // 2030-03-01 13:14:15\n// Add one decade without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").AddDecadeNoOverflow().ToDateTimeString() // 2030-02-28 13:14:15\n// Subtract three decades\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecades(3).ToDateTimeString() // 1990-03-01 13:14:15\n// Subtract three decades without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecadesNoOverflow(3).ToDateTimeString() // 1990-02-28 13:14:15\n// Subtract one decade\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecade().ToDateTimeString() // 2010-03-01 13:14:15\n// Subtract one decade without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").SubDecadeNoOverflow().ToDateTimeString() // 2010-02-28 13:14:15\n\n// Add three years\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYears(3).ToDateTimeString() // 2023-03-01 13:14:15\n// Add three years without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYearsNoOverflow(3).ToDateTimeString() // 2023-02-28 13:14:15\n// Add one year\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYear().ToDateTimeString() // 2021-03-01 13:14:15\n// Add one year without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").AddYearNoOverflow().ToDateTimeString() // 2021-02-28 13:14:15\n// Subtract three years\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYears(3).ToDateTimeString() // 2017-03-01 13:14:15\n// Subtract three years without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYearsNoOverflow(3).ToDateTimeString() // 2017-02-28 13:14:15\n// Subtract one year\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYear().ToDateTimeString() // 2019-03-01 13:14:15\n// Subtract one year without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").SubYearNoOverflow().ToDateTimeString() // 2019-02-28 13:14:15\n\n// Add three quarters\ncarbon.Parse(\"2019-05-31 13:14:15\").AddQuarters(3).ToDateTimeString() // 2020-03-02 13:14:15\n// Add three quarters without overflowing month\ncarbon.Parse(\"2019-05-31 13:14:15\").AddQuartersNoOverflow(3).ToDateTimeString() // 2020-02-29 13:14:15\n// Add one quarter\ncarbon.Parse(\"2019-11-30 13:14:15\").AddQuarter().ToDateTimeString() // 2020-03-01 13:14:15\n// Add one quarter without overflowing month\ncarbon.Parse(\"2019-11-30 13:14:15\").AddQuarterNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n// Subtract three quarters\ncarbon.Parse(\"2019-08-31 13:14:15\").SubQuarters(3).ToDateTimeString() // 2019-03-03 13:14:15\n// Subtract three quarters without overflowing month\ncarbon.Parse(\"2019-08-31 13:14:15\").SubQuartersNoOverflow(3).ToDateTimeString() // 2019-02-28 13:14:15\n// Subtract one quarter\ncarbon.Parse(\"2020-05-31 13:14:15\").SubQuarter().ToDateTimeString() // 2020-03-02 13:14:15\n// Subtract one quarter without overflowing month\ncarbon.Parse(\"2020-05-31 13:14:15\").SubQuarterNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n\n// Add three months\ncarbon.Parse(\"2020-02-29 13:14:15\").AddMonths(3).ToDateTimeString() // 2020-05-29 13:14:15\n// Add three months without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").AddMonthsNoOverflow(3).ToDateTimeString() // 2020-05-29 13:14:15\n// Add one month\ncarbon.Parse(\"2020-01-31 13:14:15\").AddMonth().ToDateTimeString() // 2020-03-02 13:14:15\n// Add one month without overflowing month\ncarbon.Parse(\"2020-01-31 13:14:15\").AddMonthNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n// Subtract three months\ncarbon.Parse(\"2020-02-29 13:14:15\").SubMonths(3).ToDateTimeString() // 2019-11-29 13:14:15\n// Subtract three months without overflowing month\ncarbon.Parse(\"2020-02-29 13:14:15\").SubMonthsNoOverflow(3).ToDateTimeString() // 2019-11-29 13:14:15\n// Subtract one month\ncarbon.Parse(\"2020-03-31 13:14:15\").SubMonth().ToDateTimeString() // 2020-03-02 13:14:15\n// Subtract one month without overflowing month\ncarbon.Parse(\"2020-03-31 13:14:15\").SubMonthNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15\n\n// Add three weeks\ncarbon.Parse(\"2020-02-29 13:14:15\").AddWeeks(3).ToDateTimeString() // 2020-03-21 13:14:15\n// Add one week\ncarbon.Parse(\"2020-02-29 13:14:15\").AddWeek().ToDateTimeString() // 2020-03-07 13:14:15\n// Subtract three weeks\ncarbon.Parse(\"2020-02-29 13:14:15\").SubWeeks(3).ToDateTimeString() // 2020-02-08 13:14:15\n// Subtract three week\ncarbon.Parse(\"2020-02-29 13:14:15\").SubWeek().ToDateTimeString() // 2020-02-22 13:14:15\n\n// Add three days\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDays(3).ToDateTimeString() // 2020-08-08 13:14:15\n// Add one day\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDay().ToDateTimeString() // 2020-08-05 13:14:15\n// Subtract three days\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDays(3).ToDateTimeString() // 2020-08-02 13:14:15\n// Subtract one day\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDay().ToDateTimeString() // 2020-08-04 13:14:15\n\n// Add three hours\ncarbon.Parse(\"2020-08-05 13:14:15\").AddHours(3).ToDateTimeString() // 2020-08-05 16:14:15\n// Add two and a half hours\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2.5h\").ToDateTimeString() // 2020-08-05 15:44:15\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2h30m\").ToDateTimeString() // 2020-08-05 15:44:15\n// Add one hour\ncarbon.Parse(\"2020-08-05 13:14:15\").AddHour().ToDateTimeString() // 2020-08-05 14:14:15\n// Subtract three hours\ncarbon.Parse(\"2020-08-05 13:14:15\").SubHours(3).ToDateTimeString() // 2020-08-05 10:14:15\n// Subtract two and a half hours\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2.5h\").ToDateTimeString() // 2020-08-05 10:44:15\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2h30m\").ToDateTimeString() // 2020-08-05 10:44:15\n// Subtract one hour\ncarbon.Parse(\"2020-08-05 13:14:15\").SubHour().ToDateTimeString() // 2020-08-05 12:14:15\n\n// Add three minutes\ncarbon.Parse(\"2020-08-05 13:14:15\").AddMinutes(3).ToDateTimeString() // 2020-08-05 13:17:15\n// Add two and a half minutes\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2.5m\").ToDateTimeString() // 2020-08-05 13:16:45\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2m30s\").ToDateTimeString() // 2020-08-05 13:16:45\n// Add one minute\ncarbon.Parse(\"2020-08-05 13:14:15\").AddMinute().ToDateTimeString() // 2020-08-05 13:15:15\n// Subtract three minutes\ncarbon.Parse(\"2020-08-05 13:14:15\").SubMinutes(3).ToDateTimeString() // 2020-08-05 13:11:15\n// Subtract two and a half minutes\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2.5m\").ToDateTimeString() // 2020-08-05 13:11:45\n// Subtract one minute\ncarbon.Parse(\"2020-08-05 13:14:15\").SubMinute().ToDateTimeString() // 2020-08-05 13:13:15\n\n// Add three seconds\ncarbon.Parse(\"2020-08-05 13:14:15\").AddSeconds(3).ToDateTimeString() // 2020-08-05 13:14:18\n// Add two and a half seconds\ncarbon.Parse(\"2020-08-05 13:14:15\").AddDuration(\"2.5s\").ToDateTimeString() // 2020-08-05 13:14:17\n// Add one second\ncarbon.Parse(\"2020-08-05 13:14:15\").AddSecond().ToDateTimeString() // 2020-08-05 13:14:16\n// Subtract three seconds\ncarbon.Parse(\"2020-08-05 13:14:15\").SubSeconds(3).ToDateTimeString() // 2020-08-05 13:14:12\n// Subtract two and a half seconds\ncarbon.Parse(\"2020-08-05 13:14:15\").SubDuration(\"2.5s\").ToDateTimeString() // 2020-08-05 13:14:12\n// Subtract one second\ncarbon.Parse(\"2020-08-05 13:14:15\").SubSecond().ToDateTimeString() // 2020-08-05 13:14:14\n\n// Add three milliseconds\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMilliseconds(3).ToString() // 2020-08-05 13:14:15.225222222 +0800 CST\n// Add one millisecond\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMillisecond().ToString() // 2020-08-05 13:14:15.223222222 +0800 CST\n// Subtract three milliseconds\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMilliseconds(3).ToString() // 2020-08-05 13:14:15.219222222 +0800 CST\n// Subtract one millisecond\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMillisecond().ToString() // 2020-08-05 13:14:15.221222222 +0800 CST\n\n// Add three microseconds\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMicroseconds(3).ToString() // 2020-08-05 13:14:15.222225222 +0800 CST\n// Add one microsecond\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddMicrosecond().ToString() // 2020-08-05 13:14:15.222223222 +0800 CST\n// Subtract three microseconds\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMicroseconds(3).ToString() // 2020-08-05 13:14:15.222219222 +0800 CST\n// Subtract one microsecond\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubMicrosecond().ToString() // 2020-08-05 13:14:15.222221222 +0800 CST\n\n// Add three nanoseconds\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddNanoseconds(3).ToString() // 2020-08-05 13:14:15.222222225 +0800 CST\n// Add one nanosecond\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").AddNanosecond().ToString() // 2020-08-05 13:14:15.222222223 +0800 CST\n// Subtract three nanoseconds\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubNanoseconds(3).ToString() // 2020-08-05 13:14:15.222222219 +0800 CST\n// Subtract one nanosecond\ncarbon.Parse(\"2020-08-05 13:14:15.222222222\").SubNanosecond().ToString() // 2020-08-05 13:14:15.222222221 +0800 CST\n```\n\n##### Difference\n\n```go\n// Difference in years\ncarbon.Parse(\"2021-08-05 13:14:15\").DiffInYears(carbon.Parse(\"2020-08-05 13:14:15\")) // -1\n// Difference in years with absolute value\ncarbon.Parse(\"2021-08-05 13:14:15\").DiffAbsInYears(carbon.Parse(\"2020-08-05 13:14:15\")) // 1\n\n// Difference in months\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInMonths(carbon.Parse(\"2020-07-05 13:14:15\")) // -1\n// Difference in months with absolute value\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInMonths(carbon.Parse(\"2020-07-05 13:14:15\")) // 1\n\n// Difference in weeks\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInWeeks(carbon.Parse(\"2020-07-28 13:14:15\")) // -1\n// Difference in weeks with absolute value\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInWeeks(carbon.Parse(\"2020-07-28 13:14:15\")) // 1\n\n// Difference in days\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInDays(carbon.Parse(\"2020-08-04 13:14:15\")) // -1\n// Difference in days with absolute value\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInDays(carbon.Parse(\"2020-08-04 13:14:15\")) // 1\n\n// Difference in hours\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInHours(carbon.Parse(\"2020-08-05 12:14:15\")) // -1\n// Difference in hours with absolute value\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInHours(carbon.Parse(\"2020-08-05 12:14:15\")) // 1\n\n// Difference in minutes\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInMinutes(carbon.Parse(\"2020-08-05 13:13:15\")) // -1\n// Difference in minutes with absolute value\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInMinutes(carbon.Parse(\"2020-08-05 13:13:15\")) // 1\n\n// Difference in seconds\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffInSeconds(carbon.Parse(\"2020-08-05 13:14:14\")) // -1\n// Difference in seconds with absolute value\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInSeconds(carbon.Parse(\"2020-08-05 13:14:14\")) // 1\n\n// Difference in string\ncarbon.Now().DiffInString() // just now\ncarbon.Now().AddYearsNoOverflow(1).DiffInString() // -1 year\ncarbon.Now().SubYearsNoOverflow(1).DiffInString() // 1 year\n// Difference in string with absolute value\ncarbon.Now().DiffAbsInString(carbon.Now()) // just now\ncarbon.Now().AddYearsNoOverflow(1).DiffAbsInString(carbon.Now()) // 1 year\ncarbon.Now().SubYearsNoOverflow(1).DiffAbsInString(carbon.Now()) // 1 year\n\n// Difference in duration\nnow := carbon.Now()\nnow.DiffInDuration(now).String() // 0s\nnow.AddHour().DiffInDuration(now).String() // 1h0m0s\nnow.SubHour().DiffInDuration(now).String() // -1h0m0s\n// Difference in duration with absolute value\nnow.DiffAbsInDuration(now).String() // 0s\nnow.AddHour().DiffAbsInDuration(now).String() // 1h0m0s\nnow.SubHour().DiffAbsInDuration(now).String() // 1h0m0s\n\n// Difference in a human-readable format\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffForHumans() // just now\ncarbon.Parse(\"2019-08-05 13:14:15\").DiffForHumans() // 1 year ago\ncarbon.Parse(\"2018-08-05 13:14:15\").DiffForHumans() // 2 years ago\ncarbon.Parse(\"2021-08-05 13:14:15\").DiffForHumans() // 1 year from now\ncarbon.Parse(\"2022-08-05 13:14:15\").DiffForHumans() // 2 years from now\n// Difference in a human-readable format from now time\ncarbon.Parse(\"2020-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 1 year before\ncarbon.Parse(\"2019-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 2 years before\ncarbon.Parse(\"2018-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 1 year after\ncarbon.Parse(\"2022-08-05 13:14:15\").DiffForHumans(carbon.Now()) // 2 years after\n```\n\n##### Extremum\n\n```go\nc0 := carbon.Parse(\"2023-04-01\")\nc1 := carbon.Parse(\"2023-03-28\")\nc2 := carbon.Parse(\"2023-04-16\")\n// Return the closest Carbon instance\nc0.Closest(c1, c2) // c1\n// Return the farthest Carbon instance\nc0.Farthest(c1, c2) // c2\n\nyesterday := carbon.Yesterday()\ntoday     := carbon.Now()\ntomorrow  := carbon.Tomorrow()\n// Return the maximum Carbon instance\ncarbon.Max(yesterday, today, tomorrow) // tomorrow\n// Return the minimum Carbon instance\ncarbon.Min(yesterday, today, tomorrow) // yesterday\n\n// Return a Carbon instance for the greatest supported date\ncarbon.MaxValue().ToString() // 9999-12-31 23:59:59.999999999 +0000 UTC\n// Return a Carbon instance for the lowest supported date\ncarbon.MinValue().ToString() // -9998-01-01 00:00:00 +0000 UTC\n```\n\n##### Comparison\n\n```go\n// Whether is daylight saving time\ncarbon.Parse(\"\").IsDST() // false\ncarbon.Parse(\"0\").IsDST() // false\ncarbon.Parse(\"0000-00-00 00:00:00\").IsDST() // false\ncarbon.Parse(\"0000-00-00\").IsDST() // false\ncarbon.Parse(\"00:00:00\").IsDST() // false\ncarbon.Parse(\"2023-01-01\", \"Australia/Brisbane\").IsDST() // false\ncarbon.Parse(\"2023-01-01\", \"Australia/Sydney\").IsDST() // true\n\n// Whether is zero time(0001-01-01 00:00:00 +0000 UTC)\ncarbon.Parse(\"\").IsZero() // true\ncarbon.Parse(\"0\").IsZero() // true\ncarbon.Parse(\"0000-00-00 00:00:00\").IsZero() // true\ncarbon.Parse(\"0000-00-00\").IsZero() // true\ncarbon.Parse(\"00:00:00\").IsZero() // true\ncarbon.Parse(\"2020-08-05 00:00:00\").IsZero() // false\ncarbon.Parse(\"2020-08-05\").IsZero() // false\ncarbon.Parse(\"2020-08-05\").SetTimezone(\"xxx\").IsZero() // false\n\n// Whether is valid time\ncarbon.Parse(\"\").IsValid() // false\ncarbon.Parse(\"0\").IsValid() // false\ncarbon.Parse(\"0000-00-00 00:00:00\").IsValid() // false\ncarbon.Parse(\"0000-00-00\").IsValid() // false\ncarbon.Parse(\"00:00:00\").IsValid() // false\ncarbon.Parse(\"2020-08-05 00:00:00\").IsValid() // true\ncarbon.Parse(\"2020-08-05\").IsValid() // true\ncarbon.Parse(\"2020-08-05\").SetTimezone(\"xxx\").IsValid() // false\n\n// Whether is invalid time\ncarbon.Parse(\"\").IsInvalid() // true\ncarbon.Parse(\"0\").IsInvalid() // true\ncarbon.Parse(\"0000-00-00 00:00:00\").IsInvalid() // true\ncarbon.Parse(\"0000-00-00\").IsInvalid() // true\ncarbon.Parse(\"00:00:00\").IsInvalid() // true\ncarbon.Parse(\"2020-08-05 00:00:00\").IsInvalid() // false\ncarbon.Parse(\"2020-08-05\").IsInvalid() // false\ncarbon.Parse(\"2020-08-05\").SetTimezone(\"xxx\").IsInvalid() // true\n\n// Whether is before noon\ncarbon.Parse(\"2020-08-05 00:00:00\").IsAM() // true\ncarbon.Parse(\"2020-08-05 08:00:00\").IsAM() // true\ncarbon.Parse(\"2020-08-05 12:00:00\").IsAM() // false\ncarbon.Parse(\"2020-08-05 13:00:00\").IsAM() // false\n// Whether is after noon\ncarbon.Parse(\"2020-08-05 00:00:00\").IsPM() // false\ncarbon.Parse(\"2020-08-05 08:00:00\").IsPM() // false\ncarbon.Parse(\"2020-08-05 12:00:00\").IsPM() // true\ncarbon.Parse(\"2020-08-05 13:00:00\").IsPM() // true\n\n// Whether is now time\ncarbon.Now().IsNow() // true\n// Whether is future time\ncarbon.Tomorrow().IsFuture() // true\n// Whether is pass time\ncarbon.Yesterday().IsPast() // true\n\n// Whether is a leap year\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLeapYear() // true\n// Whether is a long year\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLongYear() // true\n\n// Whether is January\ncarbon.Parse(\"2020-08-05 13:14:15\").IsJanuary() // false\n// Whether is February\ncarbon.Parse(\"2020-08-05 13:14:15\").IsFebruary() // false\n// Whether is March\ncarbon.Parse(\"2020-08-05 13:14:15\").IsMarch() // false\n// Whether is April\ncarbon.Parse(\"2020-08-05 13:14:15\").IsApril()  // false\n// Whether is May\ncarbon.Parse(\"2020-08-05 13:14:15\").IsMay() // false\n// Whether is June\ncarbon.Parse(\"2020-08-05 13:14:15\").IsJune() // false\n// Whether is July\ncarbon.Parse(\"2020-08-05 13:14:15\").IsJuly() // false\n// Whether is August\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAugust() // false\n// Whether is September\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSeptember() // true\n// Whether is October\ncarbon.Parse(\"2020-08-05 13:14:15\").IsOctober() // false\n// Whether is November\ncarbon.Parse(\"2020-08-05 13:14:15\").IsNovember() // false\n// Whether is December\ncarbon.Parse(\"2020-08-05 13:14:15\").IsDecember() // false\n\n// Whether is Monday\ncarbon.Parse(\"2020-08-05 13:14:15\").IsMonday() // false\n// Whether is Tuesday\ncarbon.Parse(\"2020-08-05 13:14:15\").IsTuesday() // true\n// Whether is Wednesday\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWednesday() // false\n// Whether is Thursday\ncarbon.Parse(\"2020-08-05 13:14:15\").IsThursday() // false\n// Whether is Friday\ncarbon.Parse(\"2020-08-05 13:14:15\").IsFriday() // false\n// Whether is Saturday\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSaturday() // false\n// Whether is Sunday\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSunday() // false\n// Whether is weekday\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWeekday() // false\n// Whether is weekend\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWeekend() // true\n\n// Whether is yesterday\ncarbon.Parse(\"2020-08-04 13:14:15\").IsYesterday() // true\ncarbon.Parse(\"2020-08-04 00:00:00\").IsYesterday() // true\ncarbon.Parse(\"2020-08-04\").IsYesterday() // true\n// Whether is today\ncarbon.Parse(\"2020-08-05 13:14:15\").IsToday() // true\ncarbon.Parse(\"2020-08-05 00:00:00\").IsToday() // true\ncarbon.Parse(\"2020-08-05\").IsToday() // true\n// Whether is tomorrow\ncarbon.Parse(\"2020-08-06 13:14:15\").IsTomorrow() // true\ncarbon.Parse(\"2020-08-06 00:00:00\").IsTomorrow() // true\ncarbon.Parse(\"2020-08-06\").IsTomorrow() // true\n\n// Whether is same century\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameCentury(carbon.Parse(\"3020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameCentury(carbon.Parse(\"2099-08-05 13:14:15\")) // true\n// Whether is same decade\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameDecade(carbon.Parse(\"2030-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameDecade(carbon.Parse(\"2120-08-05 13:14:15\")) // true\n// Whether is same year\ncarbon.Parse(\"2020-08-05 00:00:00\").IsSameYear(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameYear(carbon.Parse(\"2020-12-31 13:14:15\")) // true\n// Whether is same quarter\ncarbon.Parse(\"2020-08-05 00:00:00\").IsSameQuarter(carbon.Parse(\"2020-09-05 13:14:15\")) // false\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameQuarter(carbon.Parse(\"2021-01-31 13:14:15\")) // true\n// Whether is same month\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameMonth(carbon.Parse(\"2021-01-31 13:14:15\")) // false\ncarbon.Parse(\"2020-01-01 00:00:00\").IsSameMonth(carbon.Parse(\"2020-01-31 13:14:15\")) // true\n// Whether is same day\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameDay(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 00:00:00\").IsSameDay(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n// Whether is same hour\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameHour(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:00:00\").IsSameHour(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n// Whether is same minute\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameMinute(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:00\").IsSameMinute(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n// Whether is same second\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameSecond(carbon.Parse(\"2021-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSameSecond(carbon.Parse(\"2020-08-05 13:14:15\")) // true\n\n// Whether greater than\ncarbon.Parse(\"2020-08-05 13:14:15\").Gt(carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Gt(carbon.Parse(\"2020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">\", carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">\", carbon.Parse(\"2020-08-05 13:14:15\")) // false\n\n// Whether less than\ncarbon.Parse(\"2020-08-05 13:14:15\").Lt(carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Lt(carbon.Parse(\"2020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<\", carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<\", carbon.Parse(\"2020-08-05 13:14:15\")) // false\n\n// Whether equal\ncarbon.Parse(\"2020-08-05 13:14:15\").Eq(carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Eq(carbon.Parse(\"2020-08-05 13:14:00\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"=\", carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"=\", carbon.Parse(\"2020-08-05 13:14:00\")) // false\n\n// Whether not equal\ncarbon.Parse(\"2020-08-05 13:14:15\").Ne(carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Ne(carbon.Parse(\"2020-08-05 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"!=\", carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<>\", carbon.Parse(\"2020-08-05 13:14:15\")) // false\n\n// Whether greater than or equal\ncarbon.Parse(\"2020-08-05 13:14:15\").Gte(carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Gte(carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">=\", carbon.Parse(\"2020-08-04 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\">=\", carbon.Parse(\"2020-08-05 13:14:15\")) // true\n\n// Whether less than or equal\ncarbon.Parse(\"2020-08-05 13:14:15\").Lte(carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Lte(carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<=\", carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").Compare(\"<=\", carbon.Parse(\"2020-08-05 13:14:15\")) // true\n\n// Whether between two Carbon instances, excluded the start and end Carbon instance\ncarbon.Parse(\"2020-08-05 13:14:15\").Between(carbon.Parse(\"2020-08-05 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // false\ncarbon.Parse(\"2020-08-05 13:14:15\").Between(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\n\n// Whether between two Carbon instances, included the start Carbon instance\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedStart(carbon.Parse(\"2020-08-05 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedStart(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\n\n// Whether between two Carbon instances, included the end Carbon instance\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedEnd(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-05 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedEnd(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\n\n// Whether between two Carbon instances, included the start and end Carbon instance\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedBoth(carbon.Parse(\"2020-08-05 13:14:15\"), carbon.Parse(\"2020-08-06 13:14:15\")) // true\ncarbon.Parse(\"2020-08-05 13:14:15\").BetweenIncludedBoth(carbon.Parse(\"2020-08-04 13:14:15\"), carbon.Parse(\"2020-08-05 13:14:15\")) // true\n```\n\n> For the definition of long year, please see https://en.wikipedia.org/wiki/ISO_8601#Week_dates\n\n##### Setter\n\n```go\n// Set timezone\ncarbon.SetTimezone(carbon.PRC).Now().ToDateTimeString() // 2020-08-05 13:14:15\ncarbon.SetTimezone(carbon.Tokyo).Now().ToDateTimeString() // 2020-08-05 14:14:15\ncarbon.SetTimezone(carbon.Tokyo).Now().SetTimezone(carbon.PRC).ToDateTimeString() // 2020-08-05 12:14:15\n\n// Set location\nutc, _ := time.LoadLocation(carbon.UTC)\ncarbon.SetLocation(utc).Now().ToDateTimeString() // 2022-06-28 09:25:38\ntokyo, _ := time.LoadLocation(carbon.Tokyo)\ncarbon.SetLocation(tokyo).Now().ToDateTimeString() // 2022-06-28 18:25:38\n\n// Set locale\ncarbon.Parse(\"2020-07-05 13:14:15\").SetLocale(\"en\").DiffForHumans() // 1 month before\ncarbon.Parse(\"2020-07-05 13:14:15\").SetLocale(\"zh-CN\").DiffForHumans() // 1 月前\n\n// Set year, month, day, hour, minute and second\ncarbon.Parse(\"2020-01-01\").SetDateTime(2019, 2, 2, 13, 14, 15).ToString() // 2019-02-02 13:14:15 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTime(2019, 2, 31, 13, 14, 15).ToString() // 2019-03-03 13:14:15 +0800 CST\n// Set year, month, day, hour, minute, second and millisecond\ncarbon.Parse(\"2020-01-01\").SetDateTimeMilli(2019, 2, 2, 13, 14, 15, 999).ToString() // 2019-02-02 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTimeMilli(2019, 2, 31, 13, 14, 15, 999).ToString() // 2019-03-03 13:14:15.999 +0800 CST\n// Set year, month, day, hour, minute, second and microsecond\ncarbon.Parse(\"2020-01-01\").SetDateTimeMicro(2019, 2, 2, 13, 14, 15, 999999).ToString() // 2019-02-02 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTimeMicro(2019, 2, 31, 13, 14, 15, 999999).ToString() // 2019-03-03 13:14:15.999999 +0800 CST\n// Set year, month, day, hour, minute, second and nanosecond\ncarbon.Parse(\"2020-01-01\").SetDateTimeNano(2019, 2, 2, 13, 14, 15, 999999999).ToString() // 2019-02-02 13:14:15.999999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateTimeNano(2019, 2, 31, 13, 14, 15, 999999999).ToString() // 2019-03-03 13:14:15.999999999 +0800 CST\n\n// Set year, month and day\ncarbon.Parse(\"2020-01-01\").SetDate(2019, 2, 2).ToString() // 2019-02-02 00:00:00 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDate(2019, 2, 31).ToString() // 2019-03-03 00:00:00 +0800 CST\n// Set year, month, day and millisecond\ncarbon.Parse(\"2020-01-01\").SetDateMilli(2019, 2, 2, 999).ToString() // 2019-02-02 00:00:00.999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateMilli(2019, 2, 31, 999).ToString() // 2019-03-03 00:00:00.999 +0800 CST\n// Set year, month, day and microsecond\ncarbon.Parse(\"2020-01-01\").SetDateMicro(2019, 2, 2, 999999).ToString() // 2019-02-02 00:00:00.999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateMicro(2019, 2, 31, 999999).ToString() // 2019-03-03 00:00:00.999999 +0800 CST\n// Set year, month, day and nanosecond\ncarbon.Parse(\"2020-01-01\").SetDateNano(2019, 2, 2, 999999999).ToString() // 2019-02-02 00:00:00.999999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetDateNano(2019, 2, 31, 999999999).ToString() // 2019-03-03 00:00:00.999999999 +0800 CST\n\n// Set hour, minute and second\ncarbon.Parse(\"2020-01-01\").SetTime(13, 14, 15).ToString() // 2020-01-01 13:14:15 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTime(13, 14, 90).ToString() // 2020-01-01 13:15:30 +0800 CST\n// Set hour, minute, second and millisecond\ncarbon.Parse(\"2020-01-01\").SetTimeMilli(13, 14, 15, 999).ToString() // 2020-01-01 13:14:15.999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTimeMilli(13, 14, 90, 999).ToString() // 2020-01-01 13:15:30.999 +0800 CST\n// Set hour, minute, second and microsecond\ncarbon.Parse(\"2020-01-01\").SetTimeMicro(13, 14, 15, 999999).ToString() // 2020-01-01 13:14:15.999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTimeMicro(13, 14, 90, 999999).ToString() // 2020-01-01 13:15:30.999999 +0800 CST\n// Set hour, minute, second and nanosecond\ncarbon.Parse(\"2020-01-01\").SetTimeNano(13, 14, 15, 999999999).ToString() // 2020-01-01 13:14:15.999999999 +0800 CST\ncarbon.Parse(\"2020-01-01\").SetTimeNano(13, 14, 90, 999999999).ToString() // 2020-01-01 13:15:30.999999999 +0800 CST\n\n// Set year\ncarbon.Parse(\"2020-02-29\").SetYear(2021).ToDateString() // 2021-03-01\n// Set year without overflowing month\ncarbon.Parse(\"2020-02-29\").SetYearNoOverflow(2021).ToDateString() // 2021-02-28\n\n// Set month\ncarbon.Parse(\"2020-01-31\").SetMonth(2).ToDateString() // 2020-03-02\n// Set month without overflowing month\ncarbon.Parse(\"2020-01-31\").SetMonthNoOverflow(2).ToDateString() // 2020-02-29\n\n// Set start day of the week\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Sunday).Week() // 0\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Monday).Week() // 6\n\n// Set day\ncarbon.Parse(\"2019-08-05\").SetDay(31).ToDateString() // 2020-08-31\ncarbon.Parse(\"2020-02-01\").SetDay(31).ToDateString() // 2020-03-02\n\n// Set hour\ncarbon.Parse(\"2020-08-05 13:14:15\").SetHour(10).ToDateTimeString() // 2020-08-05 10:14:15\ncarbon.Parse(\"2020-08-05 13:14:15\").SetHour(24).ToDateTimeString() // 2020-08-06 00:14:15\n\n// Set minute\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMinute(10).ToDateTimeString() // 2020-08-05 13:10:15\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMinute(60).ToDateTimeString() // 2020-08-05 14:00:15\n\n// Set second\ncarbon.Parse(\"2020-08-05 13:14:15\").SetSecond(10).ToDateTimeString() // 2020-08-05 13:14:10\ncarbon.Parse(\"2020-08-05 13:14:15\").SetSecond(60).ToDateTimeString() // 2020-08-05 13:15:00\n\n// Set millisecond\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMillisecond(100).Millisecond() // 100\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMillisecond(999).Millisecond() // 999\n\n// Set microsecond\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMicrosecond(100000).Microsecond() // 100000\ncarbon.Parse(\"2020-08-05 13:14:15\").SetMicrosecond(999999).Microsecond() // 999999\n\n// Set nanosecond\ncarbon.Parse(\"2020-08-05 13:14:15\").SetNanosecond(100000000).Nanosecond() // 100000000\ncarbon.Parse(\"2020-08-05 13:14:15\").SetNanosecond(999999999).Nanosecond() // 999999999\n```\n\n##### Getter\n\n```go\n// Get total days of the year\ncarbon.Parse(\"2019-08-05 13:14:15\").DaysInYear() // 365\ncarbon.Parse(\"2020-08-05 13:14:15\").DaysInYear() // 366\n// Get total days of the month\ncarbon.Parse(\"2020-02-01 13:14:15\").DaysInMonth() // 29\ncarbon.Parse(\"2020-04-01 13:14:15\").DaysInMonth() // 30\ncarbon.Parse(\"2020-08-01 13:14:15\").DaysInMonth() // 31\n\n// Get day of the year\ncarbon.Parse(\"2020-08-05 13:14:15\").DayOfYear() // 218\n// Get week of the year\ncarbon.Parse(\"2020-08-05 13:14:15\").WeekOfYear() // 32\n// Get day of the month\ncarbon.Parse(\"2020-08-05 13:14:15\").DayOfMonth() // 5\n// Get week of the month\ncarbon.Parse(\"2020-08-05 13:14:15\").WeekOfMonth() // 1\n// Get day of the week\ncarbon.Parse(\"2020-08-05 13:14:15\").DayOfWeek() // 3\n\n// Get current year, month, day, hour, minute and second\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTime() // 2020, 8, 5, 13, 14, 15\n// Get current year, month, day, hour, minute, second and millisecond\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTimeMilli() // 2020, 8, 5, 13, 14, 15, 999\n// Get current year, month, day, hour, minute, second and microsecond\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTimeMicro() // 2020, 8, 5, 13, 14, 15, 999999\n// Get current year, month, day, hour, minute, second and nanosecond\ncarbon.Parse(\"2020-08-05 13:14:15\").DateTimeNano() // 2020, 8, 5, 13, 14, 15, 999999999\n\n// Get current year, month and day\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").Date() // 2020, 8, 5\n// Get current year, month, day and millisecond\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").DateMilli() // 2020, 8, 5, 999\n// Get current year, month, day and microsecond\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").DateMicro() // 2020, 8, 5, 999999\n// Get current year, month, day and nanosecond\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").DateNano() // 2020, 8, 5, 999999999\n\n// Get current hour, minute and second\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").Time() // 13, 14, 15\n// Get current hour, minute, second and millisecond\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").TimeMilli() // 13, 14, 15, 999\n// Get current hour, minute, second and microsecond\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").TimeMicro() // 13, 14, 15, 999999\n// Get current hour, minute, second and nanosecond\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").TimeNano() // 13, 14, 15, 999999999\n\n// Get current century\ncarbon.Parse(\"2020-08-05 13:14:15\").Century() // 21\n// Get current decade\ncarbon.Parse(\"2019-08-05 13:14:15\").Decade() // 10\ncarbon.Parse(\"2021-08-05 13:14:15\").Decade() // 20\n// Get current year\ncarbon.Parse(\"2020-08-05 13:14:15\").Year() // 2020\n// Get current quarter\ncarbon.Parse(\"2020-08-05 13:14:15\").Quarter() // 3\n// Get current month\ncarbon.Parse(\"2020-08-05 13:14:15\").Month() // 8\n// Get current week(start from 0)\ncarbon.Parse(\"2020-08-02 13:14:15\").Week() // 0\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Sunday).Week() // 0\ncarbon.Parse(\"2020-08-02\").SetWeekStartsAt(carbon.Monday).Week() // 6\n// Get current day\ncarbon.Parse(\"2020-08-05 13:14:15\").Day() // 5\n// Get current hour\ncarbon.Parse(\"2020-08-05 13:14:15\").Hour() // 13\n// Get current minute\ncarbon.Parse(\"2020-08-05 13:14:15\").Minute() // 14\n// Get current second\ncarbon.Parse(\"2020-08-05 13:14:15\").Second() // 15\n// Get current millisecond\ncarbon.Parse(\"2020-08-05 13:14:15.999\").Millisecond() // 999\n// Get current microsecond\ncarbon.Parse(\"2020-08-05 13:14:15.999\").Microsecond() // 999000\n// Get current nanosecond\ncarbon.Parse(\"2020-08-05 13:14:15.999\").Nanosecond() // 999000000\n\n// Get timestamp with second\ncarbon.Parse(\"2020-08-05 13:14:15\").Timestamp() // 1596604455\n// Get timestamp with millisecond\ncarbon.Parse(\"2020-08-05 13:14:15\").TimestampMilli() // 1596604455000\n// Get timestamp with microsecond\ncarbon.Parse(\"2020-08-05 13:14:15\").TimestampMicro() // 1596604455000000\n// Get timestamp with nanosecond\ncarbon.Parse(\"2020-08-05 13:14:15\").TimestampNano() // 1596604455000000000\n\n// Get timezone name\ncarbon.SetTimezone(carbon.PRC).Timezone() // CST\ncarbon.SetTimezone(carbon.Tokyo).Timezone() // JST\n\n// Get location name\ncarbon.SetTimezone(carbon.PRC).Location() // PRC\ncarbon.SetTimezone(carbon.Tokyo).Location() // Asia/Tokyo\n\n// Get offset seconds from the UTC timezone\ncarbon.SetTimezone(carbon.PRC).Offset() // 28800\ncarbon.SetTimezone(carbon.Tokyo).Offset() // 32400\n\n// Get locale name\ncarbon.Now().SetLocale(\"en\").Locale() // en\ncarbon.Now().SetLocale(\"zh-CN\").Locale() // zh-CN\n\n// Get constellation name\ncarbon.Now().Constellation() // Leo\ncarbon.Now().SetLocale(\"en\").Constellation() // Leo\ncarbon.Now().SetLocale(\"zh-CN\").Constellation() // 狮子座\n\n// Get season name\ncarbon.Now().Season() // Summer\ncarbon.Now().SetLocale(\"en\").Season() // Summer\ncarbon.Now().SetLocale(\"zh-CN\").Season() // 夏季\n\n// Get current age\ncarbon.Parse(\"2002-01-01 13:14:15\").Age() // 17\ncarbon.Parse(\"2002-12-31 13:14:15\").Age() // 18\n```\n\n##### Output\n\n```go\n// Output datetime format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToDateTimeString() // 2020-08-05 13:14:15\n// Output datetime with millisecond format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToDateTimeMilliString() // 2020-08-05 13:14:15.999\n// Output datetime with microsecond format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToDateTimeMicroString() // 2020-08-05 13:14:15.999999\n// Output datetime with nanosecond format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToDateTimeNanoString() // 2020-08-05 13:14:15.999999999\n\n// Output short datetime format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeString() // 20200805131415\n// Output short datetime with millisecond format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeMilliString() // 20200805131415.999\n// Output short datetime with microsecond format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeMicroString() // 20200805131415.999999\n// Output short datetime with nanosecond format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToShortDateTimeNanoString() // 20200805131415.999999999\n\n// Output date format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateString() // 2020-08-05\n// Output date with millisecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateMilliString() // 2020-08-05.999\n// Output date with microsecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateMicroString() // 2020-08-05.999999\n// Output date with nanosecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToDateNanoString() // 2020-08-05.999999999\n\n// Output short date format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateString() // 20200805\n// Output short date with millisecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateMilliString() // 20200805.999\n// Output short date with microsecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateMicroString() // 20200805.999999\n// Output short date with nanosecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortDateNanoString() // 20200805.999999999\n\n// Output time format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeString() // 13:14:15\n// Output time with millisecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeMilliString() // 13:14:15.999\n// Output time with microsecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeMicroString() // 13:14:15.999999\n// Output time with nanosecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToTimeNanoString() // 13:14:15.999999999\n\n// Output short time format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeString() // 131415\n// Output short time with millisecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeMilliString() // 131415.999\n// Output short time with microsecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeMicroString() // 131415.999999\n// Output short time with nanosecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToShortTimeNanoString() // 131415.999999999\n\n// Output Ansic format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToAnsicString() // Wed Aug  5 13:14:15 2020\n// Output Atom format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToAtomString() // 2020-08-05T13:14:15+08:00\n// Output Unix date format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToUnixDateString() // Wed Aug  5 13:14:15 CST 2020\n// Output Ruby date format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRubyDateString() // Wed Aug 05 13:14:15 +0800 2020\n// Output Kitchen format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToKitchenString() // 1:14PM\n// Output Cookie format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToCookieString() // Wednesday, 05-Aug-2020 13:14:15 CST\n// Output day, date and time format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToDayDateTimeString() // Wed, Aug 5, 2020 1:14 PM\n// Output RSS format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRssString() // Wed, 05 Aug 2020 13:14:15 +0800\n// Output W3C format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToW3cString() // 2020-08-05T13:14:15+08:00\n\n// Output ISO8601 format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601String() // 2020-08-05T13:14:15+08:00\n// Output ISO8601 with millisecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601MilliString() // 2020-08-05T13:14:15.999+08:00\n// Output ISO8601 with microsecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601MicroString() // 2020-08-05T13:14:15.999999+08:00\n// Output ISO8601 with nanosecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601NanoString() // 2020-08-05T13:14:15.999999999+08:00\n// Output ISO8601Zulu format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluString() // 2020-08-05T13:14:15Z\n// Output ISO8601Zulu with millisecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluMilliString() // 2020-08-05T13:14:15.999Z\n// Output ISO8601Zulu with microsecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluMicroString() // 2020-08-05T13:14:15.999999Z\n// Output ISO8601Zulu with nanosecond format string\ncarbon.Parse(\"2020-08-05 13:14:15.999999999\").ToIso8601ZuluNanoString() // 2020-08-05T13:14:15.999999999Z\n\n// Output RFC822 format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc822String() // 05 Aug 20 13:14 CST\n// Output RFC822Z format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc822zString() // 05 Aug 20 13:14 +0800\n// Output RFC850 format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc850String() // Wednesday, 05-Aug-20 13:14:15 CST\n// Output RFC1036 format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc1036String() // Wed, 05 Aug 20 13:14:15 +0800\n// Output RFC1123 format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc1123String() // Wed, 05 Aug 2020 13:14:15 CST\n// Output RFC1123Z format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc1123zString() // Wed, 05 Aug 2020 13:14:15 +0800\n// Output RFC2822 format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc2822String() // Wed, 05 Aug 2020 13:14:15 +0800\n// Output RFC7231 format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToRfc7231String() // Wed, 05 Aug 2020 13:14:15 GMT\n\n// Output RFC3339 format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339String() // 2020-08-05T13:14:15+08:00\n// Output RFC3339 with millisecond format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339MilliString() // 2020-08-05T13:14:15.999+08:00\n// Output RFC3339 with microsecond format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339MicroString() // 2020-08-05T13:14:15.999999+08:00\n// Output RFC3339 with nanosecond format string\ncarbon.Parse(\"2020-08-05T13:14:15.999999999+08:00\").ToRfc3339NanoString() // 2020-08-05T13:14:15.999999999+08:00\n\n// Output datetime format string\nfmt.Printf(\"%s\", carbon.Parse(\"2020-08-05 13:14:15\")) // 2020-08-05 13:14:15\n\n// Output \"2006-01-02 15:04:05.999999999 -0700 MST\" format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToString() // 2020-08-05 13:14:15.999999 +0800 CST\n\n// Output \"Jan 2, 2006\" format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToFormattedDateString() // Aug 5, 2020\n// Output \"Mon, Jan 2, 2006\" format string\ncarbon.Parse(\"2020-08-05 13:14:15\").ToFormattedDayDateString() // Wed, Aug 5, 2020\n\n// Output string by layout\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(carbon.ISO8601Layout) // 2020-08-05T13:14:15+08:00\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(\"20060102150405\") // 20200805131415\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(\"2006年01月02日 15时04分05秒\") // 2020年08月05日 13时14分15秒\ncarbon.Parse(\"2020-08-05 13:14:15\").Layout(\"It is 2006-01-02 15:04:05\") // It is 2020-08-05 13:14:15\n\n// Output string by format\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"YmdHis\") // 20200805131415\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"Y年m月d日 H时i分s秒\") // 2020年08月05日 13时14分15秒\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"l jS \\\\o\\\\f F Y h:i:s A\") // Wednesday 5th of August 2020 01:14:15 PM\ncarbon.Parse(\"2020-08-05 13:14:15\").Format(\"\\\\I\\\\t \\\\i\\\\s Y-m-d H:i:s\") // It is 2020-08-05 13:14:15\n```\n\n> For more supported format signs, please see the <a href=\"#format-sign-table\">Format sign table</a>\n\n##### Constellation\n\n```go\n// Get constellation name\ncarbon.Parse(\"2020-08-05 13:14:15\").Constellation() // Leo\n\n// Whether is Aries\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAries() // false\n// Whether is Taurus\ncarbon.Parse(\"2020-08-05 13:14:15\").IsTaurus() // false\n// Whether is Gemini\ncarbon.Parse(\"2020-08-05 13:14:15\").IsGemini() // false\n// Whether is Cancer\ncarbon.Parse(\"2020-08-05 13:14:15\").IsCancer() // false\n// Whether is Leo\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLeo() // true\n// Whether is Virgo\ncarbon.Parse(\"2020-08-05 13:14:15\").IsVirgo() // false\n// Whether is Libra\ncarbon.Parse(\"2020-08-05 13:14:15\").IsLibra() // false\n// Whether is Scorpio\ncarbon.Parse(\"2020-08-05 13:14:15\").IsScorpio() // false\n// Whether is Sagittarius\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSagittarius() // false\n// Whether is Capricorn\ncarbon.Parse(\"2020-08-05 13:14:15\").IsCapricorn() // false\n// Whether is Aquarius\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAquarius() // false\n// Whether is Pisces\ncarbon.Parse(\"2020-08-05 13:14:15\").IsPisces() // false\n```\n\n##### Season\n\n> According to the meteorological division method, March to May is spring, June to August is summer, September to November is autumn, and December to February is winter\n\n```go\n// Get season name\ncarbon.Parse(\"2020-08-05 13:14:15\").Season() // Summer\n\n// Start of the season\ncarbon.Parse(\"2020-08-05 13:14:15\").StartOfSeason().ToDateTimeString() // 2020-06-01 00:00:00\n// End of the season\ncarbon.Parse(\"2020-08-05 13:14:15\").EndOfSeason().ToDateTimeString() // 2020-08-31 23:59:59\n\n// Whether is spring\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSpring() // false\n// Whether is summer\ncarbon.Parse(\"2020-08-05 13:14:15\").IsSummer() // true\n// Whether is autumn\ncarbon.Parse(\"2020-08-05 13:14:15\").IsAutumn() // false\n// Whether is winter\ncarbon.Parse(\"2020-08-05 13:14:15\").IsWinter() // false\n```\n\n##### JSON\n\n```go\ntype Person struct {\n  Name string `json:\"name\"`\n  Age int `json:\"age\"`\n  Birthday0 carbon.Carbon `json:\"birthday0\"`\n  Birthday1 carbon.DateTime `json:\"birthday1\"`\n  Birthday2 carbon.DateTimeMilli `json:\"birthday2\"`\n  Birthday3 carbon.DateTimeMicro `json:\"birthday3\"`\n  Birthday4 carbon.DateTimeNano `json:\"birthday4\"`\n  GraduatedAt1 carbon.Date `json:\"graduated_at1\"`\n  GraduatedAt2 carbon.DateMilli `json:\"graduated_at2\"`\n  GraduatedAt3 carbon.DateMicro `json:\"graduated_at3\"`\n  GraduatedAt4 carbon.DateNano `json:\"graduated_at4\"`\n  OperatedAt1 carbon.Time `json:\"operated_at1\"`\n  OperatedAt2 carbon.TimeMilli `json:\"operated_at2\"`\n  OperatedAt3 carbon.TimeMicro `json:\"operated_at3\"`\n  OperatedAt4 carbon.TimeNano `json:\"operated_at4\"`\n  CreatedAt1 carbon.Timestamp `json:\"created_at1\"`\n  CreatedAt2 carbon.TimestampMilli `json:\"created_at2\"`\n  CreatedAt3 carbon.TimestampMicro `json:\"created_at3\"`\n  CreatedAt4 carbon.TimestampNano `json:\"created_at4\"`\n}\n\nperson := Person {\n  Name:        \"gouguoyin\",\n  Age:          18,\n  Birthday0:    carbon.Now().SubYears(18),\n  Birthday1:    carbon.NewDateTime(carbon.Now().SubYears(18)),\n  Birthday2:    carbon.NewDateTimeMilli(carbon.Now().SubYears(18)),\n  Birthday3:    carbon.NewDateTimeMicro(carbon.Now().SubYears(18)),\n  Birthday4:    carbon.NewDateTimeNano(carbon.Now().SubYears(18)),\n  GraduatedAt1: carbon.NewDate(carbon.Now()),\n  GraduatedAt2: carbon.NewDateMilli(carbon.Now()),\n  GraduatedAt3: carbon.NewDateMicro(carbon.Now()),\n  GraduatedAt4: carbon.NewDateNano(carbon.Now()),\n  OperatedAt1:  carbon.NewTime(carbon.Now()),\n  OperatedAt2:  carbon.NewTimeMilli(carbon.Now()),\n  OperatedAt3:  carbon.NewTimeMicro(carbon.Now()),\n  OperatedAt4:  carbon.NewTimeNano(carbon.Now()),\n  CreatedAt1:   carbon.NewTimestamp(carbon.Now()),\n  CreatedAt2:   carbon.NewTimestampMilli(carbon.Now()),\n  CreatedAt3:   carbon.NewTimestampMicro(carbon.Now()),\n  CreatedAt4:   carbon.NewTimestampNano(carbon.Now()),\n}\n\ndata, err := json.Marshal(&person)\nif err != nil {\n  // Error handle...\n  log.Fatal(err)\n}\nfmt.Printf(\"%s\", data)\n// Output\n{\n  \"name\": \"gouguoyin\",\n  \"age\": 18,\n  \"birthday0\": \"2003-07-16 13:14:15\",\n  \"birthday1\": \"2003-07-16 13:14:15\",\n  \"birthday2\": \"2003-07-16 13:14:15.999\",\n  \"birthday3\": \"2003-07-16 13:14:15.999999\",\n  \"birthday4\": \"2003-07-16 13:14:15.999999999\",\n  \"graduated_at1\": \"2020-08-05\",\n  \"graduated_at2\": \"2020-08-05.999\",\n  \"graduated_at3\": \"2020-08-05.999999\",\n  \"graduated_at4\": \"2020-08-05.999999999\",\n  \"operated_at1\": \"13:14:15\",\n  \"operated_at2\": \"13:14:15.999\",\n  \"operated_at3\": \"13:14:15.999999\",\n  \"operated_at4\": \"13:14:15.999999999\",\n  \"created_at1\": 1596604455,\n  \"created_at2\": 1596604455999,\n  \"created_at3\": 1596604455999999,\n  \"created_at4\": 1596604455999999999\n}\n\nerr := json.Unmarshal([]byte(data), &person)\nif err != nil {\n  // Error handle...\n  log.Fatal(err)\n}\n\nperson.Birthday0.String() // 2003-07-16 13:14:15\nperson.Birthday1.String() // 2003-07-16 13:14:15\nperson.Birthday2.String() // 2003-07-16 13:14:15.999\nperson.Birthday3.String() // 2003-07-16 13:14:15.999999\nperson.Birthday4.String() // 2003-07-16 13:14:15.999999999\n\nperson.GraduatedAt1.String() // 2020-08-05\nperson.GraduatedAt2.String() // 2020-08-05.999\nperson.GraduatedAt3.String() // 2020-08-05.999999\nperson.GraduatedAt4.String() // 2020-08-05.999999999\n\nperson.OperatedAt1.String() // 13:14:15\nperson.OperatedAt2.String() // 13:14:15.999\nperson.OperatedAt3.String() // 13:14:15.999999\nperson.OperatedAt4.String() // 13:14:15.999999999\n\nperson.CreatedAt1.String() // \"1596604455\"\nperson.CreatedAt2.String() // \"1596604455999\"\nperson.CreatedAt3.String() // \"1596604455999999\"\nperson.CreatedAt4.String() // \"1596604455999999999\"\n\nperson.CreatedAt1.Int64() // 1596604455\nperson.CreatedAt2.Int64() // 1596604455999\nperson.CreatedAt3.Int64() // 1596604455999999\nperson.CreatedAt4.Int64() // 1596604455999999999\n```\n\n##### Calendar\n\nThe following calendars are supported\n\n* [Julian Day/Modified Julian Day](./calendar/julian/README.md \"JD/MJD\")\n* [Chinese Lunar](./calendar/lunar/README.md \"Chinese Lunar\")\n* [Persian/Jalaali](./calendar/persian/README.md \"Persian/Jalaali\")\n\n##### i18n\n\nThe following languages are supported\n\n* [Simplified Chinese(zh-CN)](./lang/zh-CN.json \"Simplified Chinese\")：translated\n  by [gouguoyin](https://github.com/gouguoyin \"gouguoyin\")\n* [Traditional Chinese(zh-TW)](./lang/zh-TW.json \"Traditional Chinese\")：translated\n  by [gouguoyin](https://github.com/gouguoyin \"gouguoyin\")\n* [English(en)](./lang/en.json \"English\")：translated\n  by [gouguoyin](https://github.com/gouguoyin \"gouguoyin\")\n* [Japanese(jp)](./lang/jp.json \"Japanese\")：translated\n  by [gouguoyin](https://github.com/gouguoyin \"gouguoyin\")\n* [Korean(kr)](./lang/kr.json \"Korean\")：translated by [nannul](https://github.com/nannul \"nannul\")\n* [German(de)](./lang/de.json \"German\")：translated by [benzammour](https://github.com/benzammour \"benzammour\")\n* [Spanish(es)](./lang/es.json \"Spanish\")：translated by [hgisinger](https://github.com/hgisinger \"hgisinger\")\n* [Turkish(tr)](./lang/tr.json \"Turkish\"): translated by [emresenyuva](https://github.com/emresenyuva \"emresenyuva\")\n* [Portuguese(pt)](./lang/pt.json \"Portuguese\"): translated by [felipear89](https://github.com/felipear89 \"felipear89\")\n* [Russian(ru)](./lang/ru.json \"Russian\"): translated by [zemlyak](https://github.com/zemlyak \"zemlyak\")\n* [Ukrainian(uk)](./lang/uk.json \"Ukrainian\"): translated by [open-git](https://github.com/open-git \"open-git\")\n* [Romanian(ro)](./lang/ro.json \"Romanian\"): translated by [DrOctavius](https://github.com/DrOctavius \"DrOctavius\")\n* [Indonesian(id)](./lang/id.json \"Indonesian\"): translated by [justpoypoy](https://github.com/justpoypoy \"justpoypoy\")\n* [Italian(it)](../blob/master/lang/it.json \"Italian\"): translated by [nicoloHevelop](https://github.com/nicoloHevelop \"nicoloHevelop\")\n* [Bahasa Malaysia(ms-MY)](./lang/ms-MY.json \"Bahasa Malaysia\"): translated\n  by [hollowaykeanho](https://github.com/hollowaykeanho \"hollowaykeanho\")\n* [French(fr)](./lang/fr.json \"French\"): translated\n  by [hollowaykeanho](https://github.com/hollowaykeanho \"hollowaykeanho\")\n* [Thailand(th)](./lang/th.json \"Thailand\"): translated by [izcream](https://github.com/izcream \"izcream\")\n* [Swedish(se)](./lang/se.json \"Swedish\"): translated by [jwanglof](https://github.com/jwanglof \"jwanglof\")\n* [Farsi(fa)](./lang/fa.json \"Farsi\"): translated by [erfanMomeniii](https://github.com/erfanMomeniii \"erfanMomeniii\")\n* [Dutch(nl)](./lang/nl.json \"Dutch\"): translated by [RemcoE33](https://github.com/RemcoE33 \"RemcoE33\")\n* [VietNamese(vi)](./lang/vi.json \"VietNam\"): translated by [culy247](https://github.com/culy247 \"culy247\")\n* [Hindi(hi)](./lang/hi.json \"India\"): translated by [chauhan17nitin](https://github.com/chauhan17nitin \"chauhan17nitin\")\n* [Polish(pl)](./lang/pl.json \"Polish\"): translated by [gouguoyin](https://github.com/gouguoyin \"gouguoyin\")\n* [Bulgarian(bg)](./lang/bg.json \"Bulgarian\"): translated by [yuksbg](https://github.com/yuksbg \"yuksbg\")\n* [Arabic(ar)](./lang/ar.json \"Arabic\"): translated by [zumoshi](https://github.com/zumoshi \"zumoshi\")\n* [Hungarian(hu)](./lang/hu.json \"Hungarian\"): translated by [kenlas](https://github.com/kenlas \"kenlas\")\n* [Dansk(dk)](./lang/dk.json \"Dansk\"): translated by [Munk91](https://github.com/Munk91 \"Munk91\")\n\nThe following methods are supported\n\n* `Constellation()`：get constellation name, like `Aries`\n* `Season()`：get season name, like `Spring`\n* `DiffForHumans()`：get the difference with human-readable format string, like `1 year from now`\n* `ToMonthString()`：output month format string, like `January`\n* `ToShortMonthString()`：output short month format string, like `Jan`\n* `ToWeekString()`：output week format string, like `Sunday`\n* `ToShortWeekString()`：output short week format string, like `Sun`\n\n###### Set locale\n\n```go\nlang := carbon.NewLanguage()\nlang.SetLocale(\"en\")\n\nc := carbon.SetLanguage(lang)\nif c.Error != nil {\n  // Error handle...\n  log.Fatal(c.Error)\n}\n\nc.Now().AddHours(1).DiffForHumans() // 1 hour from now\nc.Now().AddHours(1).ToMonthString() // August\nc.Now().AddHours(1).ToShortMonthString() // Aug\nc.Now().AddHours(1).ToWeekString() // Wednesday\nc.Now().AddHours(1).ToShortWeekString() // Wed\nc.Now().AddHours(1).Constellation() // Leo\nc.Now().AddHours(1).Season() // Summer\n```\n\n###### Reset some resources(the rests still translate from the given locale)\n\n```go\nlang := carbon.NewLanguage()\n\nresources := map[string]string {\n  \"hour\": \"%dh\",\n}\nlang.SetLocale(\"en\").SetResources(resources)\n\nc := carbon.SetLanguage(lang)\nif c.Error != nil {\n  // Error handle...\n  log.Fatal(c.Error)\n}\n\nc.Now().AddYears(1).DiffForHumans() // 1 year from now\nc.Now().AddHours(1).DiffForHumans() // 1h from now\nc.Now().ToMonthString() // August\nc.Now().ToShortMonthString() // Aug\nc.Now().ToWeekString() // Tuesday\nc.Now().ToShortWeekString() // Tue\nc.Now().Constellation() // Leo\nc.Now().Season() // Summer\n```\n\n###### Reset all resources\n\n```go\nlang := carbon.NewLanguage()\nresources := map[string]string {\n  \"months\": \"january|february|march|april|may|june|july|august|september|october|november|december\",\n  \"short_months\": \"jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec\",\n  \"weeks\": \"sunday|monday|tuesday|wednesday|thursday|friday|saturday\",\n  \"short_weeks\": \"sun|mon|tue|wed|thu|fri|sat\",\n  \"seasons\": \"spring|summer|autumn|winter\",\n  \"constellations\": \"aries|taurus|gemini|cancer|leo|virgo|libra|scorpio|sagittarius|capricornus|aquarius|pisce\",\n  \"year\": \"1 yr|%d yrs\",\n  \"month\": \"1 mo|%d mos\",\n  \"week\": \"%dw\",\n  \"day\": \"%dd\",\n  \"hour\": \"%dh\",\n  \"minute\": \"%dm\",\n  \"second\": \"%ds\",\n  \"now\": \"just now\",\n  \"ago\": \"%s ago\",\n  \"from_now\": \"in %s\",\n  \"before\": \"%s before\",\n  \"after\": \"%s after\",\n}\nlang.SetResources(resources)\n\nc := carbon.SetLanguage(lang)\nc.Now().AddYears(1).DiffForHumans() // in 1 yr\nc.Now().AddHours(1).DiffForHumans() // in 1h\nc.Now().ToMonthString() // august\nc.Now().ToShortMonthString() // aug\nc.Now().ToWeekString() // tuesday\nc.Now().ToShortWeekString() // tue\nc.Now().Constellation() // leo\nc.Now().Season() // summer\n```\n\n##### Testing\n\n```go\nc := carbon.SetTimezone(carbon.UTC)\n\nc.Now().ToDateString() // 2023-12-27\nc.Now().IsSetTestNow() // false\n\nc.SetTestNow(carbon.Parse(\"2020-08-05\"))\nc.Now().ToDateString() // 2020-08-05\nc.Now().IsSetTestNow() // true\n\nc.UnSetTestNow()\nc.Now().ToDateString() // 2023-12-27\nc.Now().IsSetTestNow() // false\n```\n\n##### Error\n\n> If more than one error occurs, only the first error is returned\n\n```go\nc := carbon.SetTimezone(\"xxx\").Parse(\"2020-08-05\")\nif c.Error != nil {\n  // Error handle...\n  log.Fatal(c.Error)\n}\n// Output\ninvalid timezone \"xxx\", please see the file \"$GOROOT/lib/time/zoneinfo.zip\" for all valid timezones\n```\n\n#### Appendix\n\n##### <a id=\"format-sign-table\">Format sign table</a>\n\n| sign |                                                  desc                                                  | length |      range       |       example       |\n|:----:|:------------------------------------------------------------------------------------------------------:|:------:|:----------------:|:-------------------:|\n|  d   |                                     Day of the month, padded to 2                                      |   2    |      01-31       |         02          |\n|  D   |                           Day of the week, as an abbreviate localized string                           |   3    |     Mon-Sun      |         Mon         |\n|  j   |                                      Day of the month, no padding                                      |   -    |       1-31       |          2          |\n|  S   | English ordinal suffix for the day of the month, 2 characters. Eg: st, nd, rd or th. Works well with j |   2    |   st/nd/rd/th    |         th          |\n|  l   |                         Day of the week, as an unabbreviated localized string                          |   -    |  Monday-Sunday   |       Monday        |\n|  F   |                               Month as an unabbreviated localized string                               |   -    | January-December |       January       |\n|  m   |                                           Month, padded to 2                                           |   2    |      01-12       |         01          |\n|  M   |                                Month as an abbreviated localized string                                |   3    |     Jan-Dec      |         Jan         |\n|  n   |                                           Month, no padding                                            |   -    |       1-12       |          1          |\n|  Y   |                                            Four-digit year                                             |   4    |    0000-9999     |        2006         |\n|  y   |                                             Two-digit year                                             |   2    |      00-99       |         06          |\n|  a   |                                  Lowercase morning or afternoon sign                                   |   2    |      am/pm       |         pm          |\n|  A   |                                  Uppercase morning or afternoon sign                                   |   2    |      AM/PM       |         PM          |\n|  g   |                                   Hour in 12-hour format, no padding                                   |   -    |       1-12       |          3          |\n|  G   |                                   Hour in 24-hour format, no padding                                   |   -    |       0-23       |         15          |\n|  h   |                                  Hour in 12-hour format, padded to 2                                   |   2    |      00-11       |         03          |\n|  H   |                                  Hour in 24-hour format, padded to 2                                   |   2    |      00-23       |         15          |\n|  i   |                                          Minute, padded to 2                                           |   2    |      01-59       |         04          |\n|  s   |                                          Second, padded to 2                                           |   2    |      01-59       |         05          |\n|  O   |               Difference to Greenwich time (GMT) without colon between hours and minutes               |   -    |        -         |        -0700        |\n|  P   |                Difference to Greenwich time (GMT) with colon between hours and minutes                 |   -    |        -         |       -07:00        |\n|  T   |                                          Abbreviated timezone                                          |   -    |        -         |         MST         |\n|  W   |                                     week of the year, padded to 2                                      |   2    |      01-52       |         01          |\n|  N   |                                      day of the week, padded to 2                                      |   2    |      01-07       |         02          |\n|  L   |                                        Whether it's a leap year                                        |   1    |       0-1        |          0          |\n|  U   |                                      Unix timestamp with seconds                                       |   -    |        -         |     1596604455      |\n|  V   |                                    Unix timestamp with millisecond                                     |   -    |        -         |    1596604455666    |\n|  X   |                                    Unix timestamp with microsecond                                     |   -    |        -         |  1596604455666666   |\n|  Z   |                                    Unix timestamp with nanoseconds                                     |   -    |        -         | 1596604455666666666 |\n|  v   |                                              Millisecond                                               |   -    |      1-999       |         999         |\n|  u   |                                              Microsecond                                               |   -    |     1-999999     |       999999        |\n|  x   |                                               Nanosecond                                               |   -    |   1-999999999    |      999999999      |\n|  w   |                                            Day of the week                                             |   1    |       0-6        |          1          |\n|  t   |                                        Total days of the month                                         |   2    |      28-31       |         31          |\n|  z   |                                            Day of the year                                             |   -    |      1-365       |          2          |\n|  e   |                                                Location                                                |   -    |        -         |  America/New_York   |\n|  Q   |                                                Quarter                                                 |   1    |       1-4        |          1          |\n|  C   |                                                Century                                                 |   -    |       0-99       |         21          |\n\n#### FAQ\n\n1、What is the difference between v1 and v2?\n> There is no difference between v1 and v2 of the API, but the implementation of the translation resource files in `language.go` is different. The v1 is implemented by the third-party extension library [packr](https://github.com/gobuffalo/packr), and the v2 is implemented by the standard library [embed](https://pkg.go.dev/embed) after `golang1.16`. If your golang version is `1.16+`, the v2 is recommended, otherwise, the v1 is required.\n\n#### References\n\n* [briannesbitt/carbon](https://github.com/briannesbitt/Carbon)\n* [nodatime/nodatime](https://github.com/nodatime/nodatime)\n* [jinzhu/now](https://github.com/jinzhu/now)\n* [goframe/gtime](https://github.com/gogf/gf/tree/master/os/gtime)\n* [jodaOrg/joda-time](https://github.com/jodaOrg/joda-time)\n* [arrow-py/arrow](https://github.com/arrow-py/arrow)\n* [moment/moment](https://github.com/moment/moment)\n* [iamkun/dayjs](https://github.com/iamkun/dayjs)\n\n#### Contributors\nThanks to all of the following who contributed to `Carbon`:\n\n<a href=\"https://github.com/dromara/carbon/graphs/contributors\"><img src=\"https://contrib.rocks/image?repo=dromara/carbon&max=100&columns=16\" /></a>\n\n#### Sponsors\n\n`Carbon` is a non-commercial open source project. If you want to support `Carbon`, you can [buy a cup of coffee](https://opencollective.com/go-carbon) for developer.\n\n#### Thanks\n\n`Carbon` had been being developed with GoLand under the free JetBrains Open Source license, I would like to express my\nthanks here.\n\n<a href=\"https://www.jetbrains.com\"><img src=\"https://foruda.gitee.com/images/1704325523163241662/1bf21f86_544375.png\" height=\"100\" alt=\"JetBrains\"/></a>\n"
        },
        {
          "name": "boundary.go",
          "type": "blob",
          "size": 5.1630859375,
          "content": "package carbon\n\n// StartOfCentury returns a Carbon instance for start of the century.\n// 本世纪开始时间\nfunc (c Carbon) StartOfCentury() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.create(c.Year()/YearsPerCentury*YearsPerCentury, 1, 1, 0, 0, 0, 0)\n}\n\n// EndOfCentury returns a Carbon instance for end of the century.\n// 本世纪结束时间\nfunc (c Carbon) EndOfCentury() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.create(c.Year()/YearsPerCentury*YearsPerCentury+99, 12, 31, 23, 59, 59, 999999999)\n}\n\n// StartOfDecade returns a Carbon instance for start of the decade.\n// 本年代开始时间\nfunc (c Carbon) StartOfDecade() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.create(c.Year()/YearsPerDecade*YearsPerDecade, 1, 1, 0, 0, 0, 0)\n}\n\n// EndOfDecade returns a Carbon instance for end of the decade.\n// 本年代结束时间\nfunc (c Carbon) EndOfDecade() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.create(c.Year()/YearsPerDecade*YearsPerDecade+9, 12, 31, 23, 59, 59, 999999999)\n}\n\n// StartOfYear returns a Carbon instance for start of the year.\n// 本年开始时间\nfunc (c Carbon) StartOfYear() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.create(c.Year(), 1, 1, 0, 0, 0, 0)\n}\n\n// EndOfYear returns a Carbon instance for end of the year.\n// 本年结束时间\nfunc (c Carbon) EndOfYear() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.create(c.Year(), 12, 31, 23, 59, 59, 999999999)\n}\n\n// StartOfQuarter returns a Carbon instance for start of the quarter.\n// 本季度开始时间\nfunc (c Carbon) StartOfQuarter() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, quarter, day := c.Year(), c.Quarter(), 1\n\treturn c.create(year, 3*quarter-2, day, 0, 0, 0, 0)\n}\n\n// EndOfQuarter returns a Carbon instance for end of the quarter.\n// 本季度结束时间\nfunc (c Carbon) EndOfQuarter() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, quarter, day := c.Year(), c.Quarter(), 30\n\tswitch quarter {\n\tcase 1, 4:\n\t\tday = 31\n\tcase 2, 3:\n\t\tday = 30\n\t}\n\treturn c.create(year, 3*quarter, day, 23, 59, 59, 999999999)\n}\n\n// StartOfMonth returns a Carbon instance for start of the month.\n// 本月开始时间\nfunc (c Carbon) StartOfMonth() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, _ := c.Date()\n\treturn c.create(year, month, 1, 0, 0, 0, 0)\n}\n\n// EndOfMonth returns a Carbon instance for end of the month.\n// 本月结束时间\nfunc (c Carbon) EndOfMonth() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, _ := c.Date()\n\treturn c.create(year, month+1, 0, 23, 59, 59, 999999999)\n}\n\n// StartOfWeek returns a Carbon instance for start of the week.\n// 本周开始时间\nfunc (c Carbon) StartOfWeek() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tdayOfWeek, weekStartsAt := c.DayOfWeek(), int(c.weekStartsAt)\n\treturn c.SubDays((DaysPerWeek + dayOfWeek - weekStartsAt) % DaysPerWeek).StartOfDay()\n}\n\n// EndOfWeek returns a Carbon instance for end of the week.\n// 本周结束时间\nfunc (c Carbon) EndOfWeek() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tdayOfWeek, weekEndsAt := c.DayOfWeek(), int(c.weekStartsAt)+DaysPerWeek-1\n\treturn c.AddDays((DaysPerWeek - dayOfWeek + weekEndsAt) % DaysPerWeek).EndOfDay()\n}\n\n// StartOfDay returns a Carbon instance for start of the day.\n// 本日开始时间\nfunc (c Carbon) StartOfDay() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day := c.Date()\n\treturn c.create(year, month, day, 0, 0, 0, 0)\n}\n\n// EndOfDay returns a Carbon instance for end of the day.\n// 本日结束时间\nfunc (c Carbon) EndOfDay() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day := c.Date()\n\treturn c.create(year, month, day, 23, 59, 59, 999999999)\n}\n\n// StartOfHour returns a Carbon instance for start of the hour.\n// 小时开始时间\nfunc (c Carbon) StartOfHour() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day := c.Date()\n\treturn c.create(year, month, day, c.Hour(), 0, 0, 0)\n}\n\n// EndOfHour returns a Carbon instance for end of the hour.\n// 小时结束时间\nfunc (c Carbon) EndOfHour() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day := c.Date()\n\treturn c.create(year, month, day, c.Hour(), 59, 59, 999999999)\n}\n\n// StartOfMinute returns a Carbon instance for start of the minute.\n// 分钟开始时间\nfunc (c Carbon) StartOfMinute() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day, hour, minute, _ := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, 0, 0)\n}\n\n// EndOfMinute returns a Carbon instance for end of the minute.\n// 分钟结束时间\nfunc (c Carbon) EndOfMinute() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day, hour, minute, _ := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, 59, 999999999)\n}\n\n// StartOfSecond returns a Carbon instance for start of the second.\n// 秒开始时间\nfunc (c Carbon) StartOfSecond() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day, hour, minute, second := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, 0)\n}\n\n// EndOfSecond returns a Carbon instance for end of the second.\n// 秒结束时间\nfunc (c Carbon) EndOfSecond() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day, hour, minute, second := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, 999999999)\n}\n"
        },
        {
          "name": "boundary_bench_test.go",
          "type": "blob",
          "size": 3.486328125,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n)\n\nfunc BenchmarkCarbon_StartOfCentury(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().StartOfCentury()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfCentury()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfCentury(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().EndOfCentury()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfCentury()\n\t}\n}\n\nfunc BenchmarkCarbon_StartOfDecade(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().StartOfDecade()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfDecade()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfDecade(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().EndOfDecade()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfDecade()\n\t}\n}\n\nfunc BenchmarkCarbon_StartOfYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().StartOfYear()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfYear()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().EndOfYear()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfYear()\n\t}\n}\n\nfunc BenchmarkCarbon_StartOfQuarter(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().StartOfQuarter()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfQuarter()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfQuarter(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().EndOfQuarter()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfQuarter()\n\t}\n}\n\nfunc BenchmarkCarbon_StartOfMonth(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().StartOfMonth()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfMonth()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfMonth(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().EndOfMonth()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfMonth()\n\t}\n}\n\nfunc BenchmarkCarbon_StartOfWeek(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().StartOfWeek()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfWeek()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfWeek(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().EndOfWeek()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfWeek()\n\t}\n}\n\nfunc BenchmarkCarbon_StartOfDay(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().StartOfDay()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfDay()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfDay(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().EndOfDay()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfDay()\n\t}\n}\n\nfunc BenchmarkCarbon_StartOfHour(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().StartOfHour()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfHour()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfHour(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().EndOfHour()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfHour()\n\t}\n}\n\nfunc BenchmarkCarbon_StartOfMinute(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().StartOfMinute()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfMinute()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfMinute(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().EndOfMinute()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfMinute()\n\t}\n}\n\nfunc BenchmarkCarbon_StartOfSecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().StartOfSecond()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfSecond()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfSecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().EndOfSecond()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfSecond()\n\t}\n}\n"
        },
        {
          "name": "boundary_unit_test.go",
          "type": "blob",
          "size": 15.2021484375,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_StartOfCentury(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 00:00:00\"),\n\t\t\twant:   \"2000-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-31 23:59:59\"),\n\t\t\twant:   \"2000-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-01 13:14:15\"),\n\t\t\twant:   \"2000-01-01 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfCentury().ToDateTimeString(), \"StartOfCentury()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfCentury(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 00:00:00\"),\n\t\t\twant:   \"2099-12-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-31 23:59:59\"),\n\t\t\twant:   \"2099-12-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-01 13:14:15\"),\n\t\t\twant:   \"2099-12-31 23:59:59\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfCentury().ToDateTimeString(), \"EndOfCentury()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_StartOfDecade(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31 23:59:59\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2021-01-01 00:00:00\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2029-01-31 23:59:59\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-01 13:14:15\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfDecade().ToDateTimeString(), \"StartOfDecade()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfDecade(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31 23:59:59\"),\n\t\t\twant:   \"2029-12-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2021-01-01 00:00:00\"),\n\t\t\twant:   \"2029-12-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2029-01-31 23:59:59\"),\n\t\t\twant:   \"2029-12-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-01 13:14:15\"),\n\t\t\twant:   \"2029-12-31 23:59:59\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfDecade().ToDateTimeString(), \"EndOfDecade()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_StartOfYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 00:00:00\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-31 23:59:59\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-01 13:14:15\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfYear().ToDateTimeString(), \"StartOfYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 00:00:00\"),\n\t\t\twant:   \"2020-12-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-31 23:59:59\"),\n\t\t\twant:   \"2020-12-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-01 13:14:15\"),\n\t\t\twant:   \"2020-12-31 23:59:59\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfYear().ToDateTimeString(), \"EndOfYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_StartOfQuarter(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfQuarter().ToDateTimeString(), \"StartOfQuarter()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfQuarter(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00\"),\n\t\t\twant:   \"2020-03-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00\"),\n\t\t\twant:   \"2020-03-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00\"),\n\t\t\twant:   \"2020-03-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-04-15 23:59:59\"),\n\t\t\twant:   \"2020-06-30 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-05-15 23:59:59\"),\n\t\t\twant:   \"2020-06-30 23:59:59\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfQuarter().ToDateTimeString(), \"EndOfQuarter()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_StartOfMonth(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00\"),\n\t\t\twant:   \"2020-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00\"),\n\t\t\twant:   \"2020-02-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00\"),\n\t\t\twant:   \"2020-03-01 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfMonth().ToDateTimeString(), \"StartOfMonth()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfMonth(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00\"),\n\t\t\twant:   \"2020-01-31 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00\"),\n\t\t\twant:   \"2020-02-29 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00\"),\n\t\t\twant:   \"2020-03-31 23:59:59\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfMonth().ToDateTimeString(), \"EndOfMonth()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_StartOfWeek(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2021-06-13\"),\n\t\t\twant:   \"2021-06-13 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2021-06-14\"),\n\t\t\twant:   \"2021-06-13 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2021-06-18\"),\n\t\t\twant:   \"2021-06-13 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfWeek().ToDateTimeString(), \"StartOfWeek()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfWeek(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2021-06-13\"),\n\t\t\twant:   \"2021-06-19 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2021-06-14\"),\n\t\t\twant:   \"2021-06-19 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2021-06-18\"),\n\t\t\twant:   \"2021-06-19 23:59:59\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfWeek().ToDateTimeString(), \"EndOfWeek()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_StartOfDay(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00\"),\n\t\t\twant:   \"2020-01-15 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00\"),\n\t\t\twant:   \"2020-02-15 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00\"),\n\t\t\twant:   \"2020-03-15 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfDay().ToDateTimeString(), \"StartOfDay()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfDay(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00\"),\n\t\t\twant:   \"2020-01-15 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00\"),\n\t\t\twant:   \"2020-02-15 23:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00\"),\n\t\t\twant:   \"2020-03-15 23:59:59\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfDay().ToDateTimeString(), \"EndOfDay()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_StartOfHour(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00\"),\n\t\t\twant:   \"2020-01-15 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00\"),\n\t\t\twant:   \"2020-02-15 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00\"),\n\t\t\twant:   \"2020-03-15 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfHour().ToDateTimeString(), \"StartOfHour()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfHour(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00\"),\n\t\t\twant:   \"2020-01-15 00:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00\"),\n\t\t\twant:   \"2020-02-15 00:59:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00\"),\n\t\t\twant:   \"2020-03-15 00:59:59\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfHour().ToDateTimeString(), \"EndOfHour()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_StartOfMinute(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00\"),\n\t\t\twant:   \"2020-01-15 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00\"),\n\t\t\twant:   \"2020-02-15 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00\"),\n\t\t\twant:   \"2020-03-15 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfMinute().ToDateTimeString(), \"StartOfMinute()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfMinute(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00\"),\n\t\t\twant:   \"2020-01-15 00:00:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00\"),\n\t\t\twant:   \"2020-02-15 00:00:59\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00\"),\n\t\t\twant:   \"2020-03-15 00:00:59\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfMinute().ToDateTimeString(), \"EndOfMinute()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_StartOfSecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00.999999999\", PRC),\n\t\t\twant:   \"2020-01-15 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00.999999999\", PRC),\n\t\t\twant:   \"2020-02-15 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00.999999999\", PRC),\n\t\t\twant:   \"2020-03-15 00:00:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfSecond().ToString(), \"StartOfSecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfSecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-15 00:00:00.123\", PRC),\n\t\t\twant:   \"2020-01-15 00:00:00.999999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-15 00:00:00.123\", PRC),\n\t\t\twant:   \"2020-02-15 00:00:00.999999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-15 00:00:00.123\", PRC),\n\t\t\twant:   \"2020-03-15 00:00:00.999999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfSecond().ToString(), \"EndOfSecond()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "calendar.go",
          "type": "blob",
          "size": 1.810546875,
          "content": "package carbon\n\nimport (\n\t\"github.com/dromara/carbon/v2/calendar/julian\"\n\t\"github.com/dromara/carbon/v2/calendar/lunar\"\n\t\"github.com/dromara/carbon/v2/calendar/persian\"\n)\n\n// Lunar converts Carbon instance to Lunar instance.\n// 将 Carbon 实例转化为 Lunar 实例\nfunc (c Carbon) Lunar() (l lunar.Lunar) {\n\tif c.Error != nil {\n\t\tl.Error = c.Error\n\t\treturn\n\t}\n\treturn lunar.FromGregorian(c.StdTime()).ToLunar()\n}\n\n// CreateFromLunar creates a Carbon instance from Lunar date and time.\n// 从 农历日期 创建 Carbon 实例\nfunc CreateFromLunar(year, month, day, hour, minute, second int, isLeapMonth bool) Carbon {\n\tt := lunar.FromLunar(year, month, day, hour, minute, second, isLeapMonth).ToGregorian().Time\n\treturn CreateFromStdTime(t)\n}\n\n// Julian converts Carbon instance to Julian instance.\n// 将 Carbon 实例转化为 Julian 实例\nfunc (c Carbon) Julian() (j julian.Julian) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\treturn julian.FromGregorian(c.StdTime()).ToJulian()\n}\n\n// CreateFromJulian creates a Carbon instance from Julian Day or Modified Julian Day.\n// 从 儒略日/简化儒略日 创建 Carbon 实例\nfunc CreateFromJulian(f float64) Carbon {\n\tt := julian.FromJulian(f).ToGregorian().Time\n\treturn CreateFromStdTime(t)\n}\n\n// Persian converts Carbon instance to Persian instance.\n// 将 Carbon 实例转化为 Persian 实例\nfunc (c Carbon) Persian() (p persian.Persian) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\treturn persian.FromGregorian(c.StdTime()).ToPersian()\n}\n\n// CreateFromPersian creates a Carbon instance from Persian date and time.\n// 从 波斯日期 创建 Carbon 实例\nfunc CreateFromPersian(year, month, day, hour, minute, second int) (c Carbon) {\n\tp := persian.FromPersian(year, month, day, hour, minute, second)\n\tif p.Error != nil {\n\t\tc.Error = p.Error\n\t\treturn\n\t}\n\tt := p.ToGregorian().Time\n\treturn CreateFromStdTime(t)\n}\n"
        },
        {
          "name": "calendar",
          "type": "tree",
          "content": null
        },
        {
          "name": "calendar_bench_test.go",
          "type": "blob",
          "size": 0.71484375,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_Lunar(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Lunar()\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromLunar(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromLunar(2023, 12, 8, 0, 0, 0, false)\n\t}\n}\n\nfunc BenchmarkCarbon_Julian(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Julian()\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromJulian(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromJulian(60332)\n\t}\n}\n\nfunc BenchmarkCarbon_Persian(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Persian()\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromPersian(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromPersian(1455, 1, 1, 0, 0, 0)\n\t}\n}\n"
        },
        {
          "name": "calendar_unit_test.go",
          "type": "blob",
          "size": 4.8447265625,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_Lunar(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\", PRC),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2024-01-18\", PRC),\n\t\t\twant:   \"2023-12-08 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2024-01-21\", PRC),\n\t\t\twant:   \"2023-12-11 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2024-01-24\", PRC),\n\t\t\twant:   \"2023-12-14 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Lunar().String(), \"Lunar()\")\n\t\t})\n\t}\n}\n\nfunc TestCreateFromLunar(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: CreateFromLunar(2023, 12, 11, 0, 0, 0, false),\n\t\t\twant:   \"2024-01-21 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromLunar(2023, 12, 8, 0, 0, 0, false),\n\t\t\twant:   \"2024-01-18 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromLunar(2023, 12, 14, 12, 0, 0, false),\n\t\t\twant:   \"2024-01-24 12:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromLunar(2200, 12, 14, 12, 0, 0, false),\n\t\t\twant:   \"\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(), \"CreateFromLunar()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Julian(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon  Carbon\n\t\twantJD  float64\n\t\twantMJD float64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon:  Parse(\"xxx\"),\n\t\t\twantJD:  0,\n\t\t\twantMJD: 0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon:  Parse(\"2024-01-24 12:00:00\"),\n\t\t\twantJD:  2460334,\n\t\t\twantMJD: 60333.5,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon:  CreateFromJulian(2460334),\n\t\t\twantJD:  2460334,\n\t\t\twantMJD: 60333.5,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon:  CreateFromJulian(60333.5),\n\t\t\twantJD:  2460334,\n\t\t\twantMJD: 60333.5,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.wantJD, tt.carbon.Julian().JD(), \"JD()\")\n\t\t\tassert.Equalf(t, tt.wantMJD, tt.carbon.Julian().MJD(), \"MJD()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromJulian(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: CreateFromJulian(2460334),\n\t\t\twant:   \"2024-01-24 12:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromJulian(60333.5),\n\t\t\twant:   \"2024-01-24 12:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(), \"CreateFromJulian()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Persian(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\", PRC),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"1800-01-01 00:00:00\", PRC),\n\t\t\twant:   \"1178-10-11 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\", PRC),\n\t\t\twant:   \"1399-05-15 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2024-01-01 00:00:00\", PRC),\n\t\t\twant:   \"1402-10-11 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Persian().String(), \"Persian()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromPersian(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: CreateFromPersian(1178, 10, 11, 0, 0, 0),\n\t\t\twant:   \"1800-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromPersian(1402, 10, 11, 0, 0, 0),\n\t\t\twant:   \"2024-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromPersian(1403, 5, 15, 12, 0, 0),\n\t\t\twant:   \"2024-08-05 12:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromPersian(9999, 12, 14, 12, 0, 0),\n\t\t\twant:   \"\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(), \"CreateFromPersian()\")\n\t\t})\n\t}\n}\n\n// https://github.com/dromara/carbon/issues/246\nfunc TestCarbon_Issue246(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"2024-09-21 00:00:00\", PRC),\n\t\t\twant:   \"2024-08-19 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2024-09-21 23:50:00\", PRC),\n\t\t\twant:   \"2024-08-19 23:50:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2024-09-21 23:54:00\", PRC),\n\t\t\twant:   \"2024-08-19 23:54:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2024-09-21 23:55:00\", PRC),\n\t\t\twant:   \"2024-08-19 23:55:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2024-09-21 23:59:00\", PRC),\n\t\t\twant:   \"2024-08-19 23:59:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Lunar().String(), \"Lunar()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "carbon.go",
          "type": "blob",
          "size": 14.009765625,
          "content": "// @Package carbon\n// @Description a simple, semantic and developer-friendly time package for golang\n// @Page github.com/dromara/carbon\n// @Developer gouguoyin\n// @Blog www.gouguoyin.com\n// @Email 245629560@qq.com\n\n// Package carbon is a simple, semantic and developer-friendly time package for golang.\npackage carbon\n\nimport (\n\t\"time\"\n)\n\n// Version current version\n// 当前版本号\nconst Version = \"2.5.3\"\n\n// timezone constants\n// 时区常量\nconst (\n\tLocal = \"Local\" // 本地时间\n\tUTC   = \"UTC\"   // 世界协调时间\n\tGMT   = \"GMT\"   // 格林尼治标准时间\n\tCST   = \"CST\"   // 中国标准时间\n\tEET   = \"EET\"   // 欧洲东部标准时间\n\tWET   = \"WET\"   // 欧洲西部标准时间\n\tCET   = \"CET\"   // 欧洲中部标准时间\n\tEST   = \"EST\"   // 美国东部标准时间\n\tMST   = \"MST\"   // 美国山地标准时间\n\n\tCuba      = \"Cuba\"      // 古巴\n\tEgypt     = \"Egypt\"     // 埃及\n\tEire      = \"Eire\"      // 爱尔兰\n\tGreenwich = \"Greenwich\" // 格林尼治\n\tIceland   = \"Iceland\"   // 冰岛\n\tIran      = \"Iran\"      // 伊朗\n\tIsrael    = \"Israel\"    // 以色列\n\tJamaica   = \"Jamaica\"   // 牙买加\n\tJapan     = \"Japan\"     // 日本\n\tLibya     = \"Libya\"     // 利比亚\n\tPoland    = \"Poland\"    // 波兰\n\tPortugal  = \"Portugal\"  // 葡萄牙\n\tPRC       = \"PRC\"       // 中国\n\tSingapore = \"Singapore\" // 新加坡\n\tTurkey    = \"Turkey\"    // 土耳其\n\n\tShanghai   = \"Asia/Shanghai\"       // 上海\n\tChongqing  = \"Asia/Chongqing\"      // 重庆\n\tHarbin     = \"Asia/Harbin\"         // 哈尔滨\n\tUrumqi     = \"Asia/Urumqi\"         // 乌鲁木齐\n\tHongKong   = \"Asia/Hong_Kong\"      // 香港\n\tMacao      = \"Asia/Macao\"          // 澳门\n\tTaipei     = \"Asia/Taipei\"         // 台北\n\tTokyo      = \"Asia/Tokyo\"          // 东京\n\tHoChiMinh  = \"Asia/Ho_Chi_Minh\"    // 胡志明\n\tHanoi      = \"Asia/Hanoi\"          // 河内\n\tSaigon     = \"Asia/Saigon\"         // 西贡\n\tSeoul      = \"Asia/Seoul\"          // 首尔\n\tPyongyang  = \"Asia/Pyongyang\"      // 平壤\n\tBangkok    = \"Asia/Bangkok\"        // 曼谷\n\tDubai      = \"Asia/Dubai\"          // 迪拜\n\tQatar      = \"Asia/Qatar\"          // 卡塔尔\n\tBangalore  = \"Asia/Bangalore\"      // 班加罗尔\n\tKolkata    = \"Asia/Kolkata\"        // 加尔各答\n\tMumbai     = \"Asia/Mumbai\"         // 孟买\n\tMexicoCity = \"America/Mexico_City\" // 墨西哥\n\tNewYork    = \"America/New_York\"    // 纽约\n\tLosAngeles = \"America/Los_Angeles\" // 洛杉矶\n\tChicago    = \"America/Chicago\"     // 芝加哥\n\tSaoPaulo   = \"America/Sao_Paulo\"   // 圣保罗\n\tMoscow     = \"Europe/Moscow\"       // 莫斯科\n\tLondon     = \"Europe/London\"       // 伦敦\n\tBerlin     = \"Europe/Berlin\"       // 柏林\n\tParis      = \"Europe/Paris\"        // 巴黎\n\tRome       = \"Europe/Rome\"         // 罗马\n\tSydney     = \"Australia/Sydney\"    // 悉尼\n\tMelbourne  = \"Australia/Melbourne\" // 墨尔本\n\tDarwin     = \"Australia/Darwin\"    // 达尔文\n)\n\n// month constants\n// 月份常量\nconst (\n\tJanuary   = \"January\"   // 一月\n\tFebruary  = \"February\"  // 二月\n\tMarch     = \"March\"     // 三月\n\tApril     = \"April\"     // 四月\n\tMay       = \"May\"       // 五月\n\tJune      = \"June\"      // 六月\n\tJuly      = \"July\"      // 七月\n\tAugust    = \"August\"    // 八月\n\tSeptember = \"September\" // 九月\n\tOctober   = \"October\"   // 十月\n\tNovember  = \"November\"  // 十一月\n\tDecember  = \"December\"  // 十二月\n)\n\n// week constants\n// 星期常量\nconst (\n\tMonday    = \"Monday\"    // 周一\n\tTuesday   = \"Tuesday\"   // 周二\n\tWednesday = \"Wednesday\" // 周三\n\tThursday  = \"Thursday\"  // 周四\n\tFriday    = \"Friday\"    // 周五\n\tSaturday  = \"Saturday\"  // 周六\n\tSunday    = \"Sunday\"    // 周日\n)\n\n// number constants\n// 数字常量\nconst (\n\tYearsPerMillennium = 1000   // 每千年1000年\n\tYearsPerCentury    = 100    // 每世纪100年\n\tYearsPerDecade     = 10     // 每十年10年\n\tQuartersPerYear    = 4      // 每年4个季度\n\tMonthsPerYear      = 12     // 每年12月\n\tMonthsPerQuarter   = 3      // 每季度3月\n\tWeeksPerNormalYear = 52     // 每常规年52周\n\tweeksPerLongYear   = 53     // 每长年53周\n\tWeeksPerMonth      = 4      // 每月4周\n\tDaysPerLeapYear    = 366    // 每闰年366天\n\tDaysPerNormalYear  = 365    // 每常规年365天\n\tDaysPerWeek        = 7      // 每周7天\n\tHoursPerWeek       = 168    // 每周168小时\n\tHoursPerDay        = 24     // 每天24小时\n\tMinutesPerDay      = 1440   // 每天1440分钟\n\tMinutesPerHour     = 60     // 每小时60分钟\n\tSecondsPerWeek     = 604800 // 每周604800秒\n\tSecondsPerDay      = 86400  // 每天86400秒\n\tSecondsPerHour     = 3600   // 每小时3600秒\n\tSecondsPerMinute   = 60     // 每分钟60秒\n)\n\n// layout constants\n// 布局模板常量\nconst (\n\tAtomLayout     = RFC3339Layout\n\tANSICLayout    = time.ANSIC\n\tCookieLayout   = \"Monday, 02-Jan-2006 15:04:05 MST\"\n\tKitchenLayout  = time.Kitchen\n\tRssLayout      = time.RFC1123Z\n\tRubyDateLayout = time.RubyDate\n\tUnixDateLayout = time.UnixDate\n\tW3cLayout      = RFC3339Layout\n\n\tRFC1036Layout      = \"Mon, 02 Jan 06 15:04:05 -0700\"\n\tRFC1123Layout      = time.RFC1123\n\tRFC1123ZLayout     = time.RFC1123Z\n\tRFC2822Layout      = time.RFC1123Z\n\tRFC3339Layout      = \"2006-01-02T15:04:05Z07:00\"\n\tRFC3339MilliLayout = \"2006-01-02T15:04:05.999Z07:00\"\n\tRFC3339MicroLayout = \"2006-01-02T15:04:05.999999Z07:00\"\n\tRFC3339NanoLayout  = \"2006-01-02T15:04:05.999999999Z07:00\"\n\tRFC7231Layout      = \"Mon, 02 Jan 2006 15:04:05 MST\"\n\tRFC822Layout       = time.RFC822\n\tRFC822ZLayout      = time.RFC822Z\n\tRFC850Layout       = time.RFC850\n\n\tISO8601Layout      = \"2006-01-02T15:04:05-07:00\"\n\tISO8601MilliLayout = \"2006-01-02T15:04:05.999-07:00\"\n\tISO8601MicroLayout = \"2006-01-02T15:04:05.999999-07:00\"\n\tISO8601NanoLayout  = \"2006-01-02T15:04:05.999999999-07:00\"\n\n\tISO8601ZuluLayout      = \"2006-01-02T15:04:05Z\"\n\tISO8601ZuluMilliLayout = \"2006-01-02T15:04:05.999Z\"\n\tISO8601ZuluMicroLayout = \"2006-01-02T15:04:05.999999Z\"\n\tISO8601ZuluNanoLayout  = \"2006-01-02T15:04:05.999999999Z\"\n\n\tFormattedDateLayout    = \"Jan 2, 2006\"\n\tFormattedDayDateLayout = \"Mon, Jan 2, 2006\"\n\n\tDayDateTimeLayout        = \"Mon, Jan 2, 2006 3:04 PM\"\n\tDateTimeLayout           = \"2006-01-02 15:04:05\"\n\tDateTimeMilliLayout      = \"2006-01-02 15:04:05.999\"\n\tDateTimeMicroLayout      = \"2006-01-02 15:04:05.999999\"\n\tDateTimeNanoLayout       = \"2006-01-02 15:04:05.999999999\"\n\tShortDateTimeLayout      = \"20060102150405\"\n\tShortDateTimeMilliLayout = \"20060102150405.999\"\n\tShortDateTimeMicroLayout = \"20060102150405.999999\"\n\tShortDateTimeNanoLayout  = \"20060102150405.999999999\"\n\n\tDateLayout           = \"2006-01-02\"\n\tDateMilliLayout      = \"2006-01-02.999\"\n\tDateMicroLayout      = \"2006-01-02.999999\"\n\tDateNanoLayout       = \"2006-01-02.999999999\"\n\tShortDateLayout      = \"20060102\"\n\tShortDateMilliLayout = \"20060102.999\"\n\tShortDateMicroLayout = \"20060102.999999\"\n\tShortDateNanoLayout  = \"20060102.999999999\"\n\n\tTimeLayout           = \"15:04:05\"\n\tTimeMilliLayout      = \"15:04:05.999\"\n\tTimeMicroLayout      = \"15:04:05.999999\"\n\tTimeNanoLayout       = \"15:04:05.999999999\"\n\tShortTimeLayout      = \"150405\"\n\tShortTimeMilliLayout = \"150405.999\"\n\tShortTimeMicroLayout = \"150405.999999\"\n\tShortTimeNanoLayout  = \"150405.999999999\"\n)\n\n// format constants\n// 格式模板常量\nconst (\n\tAtomFormat     = \"Y-m-d\\\\TH:i:sP\"\n\tANSICFormat    = \"D M j H:i:s Y\"\n\tCookieFormat   = \"l, d-M-Y H:i:s T\"\n\tKitchenFormat  = \"g:iA\"\n\tRssFormat      = \"D, d M Y H:i:s O\"\n\tRubyDateFormat = \"D M d H:i:s O Y\"\n\tUnixDateFormat = \"D M j H:i:s T Y\"\n\n\tRFC1036Format      = \"D, d M y H:i:s O\"\n\tRFC1123Format      = \"D, d M Y H:i:s T\"\n\tRFC1123ZFormat     = \"D, d M Y H:i:s O\"\n\tRFC2822Format      = \"D, d M Y H:i:s O\"\n\tRFC3339Format      = \"Y-m-d\\\\TH:i:sP\"\n\tRFC3339MilliFormat = \"Y-m-d\\\\TH:i:s.vP\"\n\tRFC3339MicroFormat = \"Y-m-d\\\\TH:i:s.uP\"\n\tRFC3339NanoFormat  = \"Y-m-d\\\\TH:i:s.xP\"\n\tRFC7231Format      = \"D, d M Y H:i:s T\"\n\tRFC822Format       = \"d M y H:i T\"\n\tRFC822ZFormat      = \"d M y H:i O\"\n\tRFC850Format       = \"l, d-M-y H:i:s T\"\n\n\tISO8601Format      = \"Y-m-d\\\\TH:i:sP\"\n\tISO8601MilliFormat = \"Y-m-d\\\\TH:i:s.vP\"\n\tISO8601MicroFormat = \"Y-m-d\\\\TH:i:s.uP\"\n\tISO8601NanoFormat  = \"Y-m-d\\\\TH:i:s.xP\"\n\n\tISO8601ZuluFormat      = \"Y-m-d\\\\TH:i:s\\\\Z\"\n\tISO8601ZuluMilliFormat = \"Y-m-d\\\\TH:i:s.v\\\\Z\"\n\tISO8601ZuluMicroFormat = \"Y-m-d\\\\TH:i:s.u\\\\Z\"\n\tISO8601ZuluNanoFormat  = \"Y-m-d\\\\TH:i:s.x\\\\Z\"\n\n\tFormattedDateFormat    = \"M j, Y\"\n\tFormattedDayDateFormat = \"D, M j, Y\"\n\n\tDayDateTimeFormat        = \"D, M j, Y g:i A\"\n\tDateTimeFormat           = \"Y-m-d H:i:s\"\n\tDateTimeMilliFormat      = \"Y-m-d H:i:s.v\"\n\tDateTimeMicroFormat      = \"Y-m-d H:i:s.u\"\n\tDateTimeNanoFormat       = \"Y-m-d H:i:s.x\"\n\tShortDateTimeFormat      = \"YmdHis\"\n\tShortDateTimeMilliFormat = \"YmdHis.v\"\n\tShortDateTimeMicroFormat = \"YmdHis.u\"\n\tShortDateTimeNanoFormat  = \"YmdHis.x\"\n\n\tDateFormat           = \"Y-m-d\"\n\tDateMilliFormat      = \"Y-m-d.v\"\n\tDateMicroFormat      = \"Y-m-d.u\"\n\tDateNanoFormat       = \"Y-m-d.x\"\n\tShortDateFormat      = \"Ymd\"\n\tShortDateMilliFormat = \"Ymd.v\"\n\tShortDateMicroFormat = \"Ymd.u\"\n\tShortDateNanoFormat  = \"Ymd.x\"\n\n\tTimeFormat           = \"H:i:s\"\n\tTimeMilliFormat      = \"H:i:s.v\"\n\tTimeMicroFormat      = \"H:i:s.u\"\n\tTimeNanoFormat       = \"H:i:s.x\"\n\tShortTimeFormat      = \"His\"\n\tShortTimeMilliFormat = \"His.v\"\n\tShortTimeMicroFormat = \"His.u\"\n\tShortTimeNanoFormat  = \"His.x\"\n)\n\n// Carbon defines a Carbon struct.\n// 定义 Carbon 结构体\ntype Carbon struct {\n\ttime         time.Time\n\ttestNow      int64 // nanosecond timestamp of test now time\n\tlayout       string\n\tweekStartsAt time.Weekday\n\tloc          *time.Location\n\tlang         *Language\n\tError        error\n}\n\n// NewCarbon returns a new Carbon instance.\n// 初始化 Carbon 结构体\nfunc NewCarbon() Carbon {\n\tc := Carbon{lang: NewLanguage()}\n\tc.loc, c.Error = getLocationByTimezone(defaultTimezone)\n\tif weekday, ok := weekdays[defaultWeekStartsAt]; ok {\n\t\tc.weekStartsAt = weekday\n\t}\n\tc.layout = defaultLayout\n\treturn c\n}\n\n// DateTime defines a DateTime struct.\n// 定义 DateTime 结构体\ntype DateTime struct {\n\tCarbon\n}\n\n// NewDateTime returns a new DateTime instance.\n// 初始化 DateTime 结构体\nfunc NewDateTime(carbon Carbon) DateTime {\n\treturn DateTime{Carbon: carbon}\n}\n\n// DateTimeMilli defines a DateTimeMilli struct.\n// 定义 DateTimeMilli 结构体\ntype DateTimeMilli struct {\n\tCarbon\n}\n\n// NewDateTimeMilli returns a new DateTimeMilli instance.\n// 初始化 DateTimeMilli 结构体\nfunc NewDateTimeMilli(carbon Carbon) DateTimeMilli {\n\treturn DateTimeMilli{Carbon: carbon}\n}\n\n// DateTimeMicro defines a DateTimeMicro struct.\n// 定义 DateTimeMicro 结构体\ntype DateTimeMicro struct {\n\tCarbon\n}\n\n// NewDateTimeMicro returns a new DateTimeMicro instance.\n// 初始化 DateTimeMicro 结构体\nfunc NewDateTimeMicro(carbon Carbon) DateTimeMicro {\n\treturn DateTimeMicro{Carbon: carbon}\n}\n\n// DateTimeNano defines a DateTimeNano struct.\n// 定义 DateTimeNano 结构体\ntype DateTimeNano struct {\n\tCarbon\n}\n\n// NewDateTimeNano returns a new DateTimeNano instance.\n// 初始化 DateTimeNano 结构体\nfunc NewDateTimeNano(carbon Carbon) DateTimeNano {\n\treturn DateTimeNano{Carbon: carbon}\n}\n\n// Date defines a Date struct.\n// 定义 Date 结构体\ntype Date struct {\n\tCarbon\n}\n\n// NewDate returns a new Date instance.\n// 初始化 Date 结构体\nfunc NewDate(carbon Carbon) Date {\n\treturn Date{Carbon: carbon}\n}\n\n// DateMilli defines a DateMilli struct.\n// 定义 DateMilli 结构体\ntype DateMilli struct {\n\tCarbon\n}\n\n// NewDateMilli returns a new DateMilli instance.\n// 初始化 DateMilli 结构体\nfunc NewDateMilli(carbon Carbon) DateMilli {\n\treturn DateMilli{Carbon: carbon}\n}\n\n// DateMicro defines a DateMicro struct.\n// 定义 DateMicro 结构体\ntype DateMicro struct {\n\tCarbon\n}\n\n// NewDateMicro returns a new DateMicro instance.\n// 初始化 DateMicro 结构体\nfunc NewDateMicro(carbon Carbon) DateMicro {\n\treturn DateMicro{Carbon: carbon}\n}\n\n// DateNano defines a DateNano struct.\n// 定义 DateNano 结构体\ntype DateNano struct {\n\tCarbon\n}\n\n// NewDateNano returns a new DateNano instance.\n// 初始化 DateNano 结构体\nfunc NewDateNano(carbon Carbon) DateNano {\n\treturn DateNano{Carbon: carbon}\n}\n\n// Time defines a Time struct.\n// 定义 Time 结构体\ntype Time struct {\n\tCarbon\n}\n\n// NewTime returns a new Time instance.\n// 初始化 Time 结构体\nfunc NewTime(carbon Carbon) Time {\n\treturn Time{Carbon: carbon}\n}\n\n// TimeMilli defines a TimeMilli struct.\n// 定义 TimeMilli 结构体\ntype TimeMilli struct {\n\tCarbon\n}\n\n// NewTimeMilli returns a new TimeMilli instance.\n// 初始化 TimeMilli 结构体\nfunc NewTimeMilli(carbon Carbon) TimeMilli {\n\treturn TimeMilli{Carbon: carbon}\n}\n\n// TimeMicro defines a TimeMicro struct.\n// 定义 TimeMicro 结构体\ntype TimeMicro struct {\n\tCarbon\n}\n\n// NewTimeMicro returns a new TimeMicro instance.\n// 初始化 TimeMicro 结构体\nfunc NewTimeMicro(carbon Carbon) TimeMicro {\n\treturn TimeMicro{Carbon: carbon}\n}\n\n// TimeNano defines a TimeNano struct.\n// 定义 TimeNano 结构体\ntype TimeNano struct {\n\tCarbon\n}\n\n// NewTimeNano returns a new TimeNano instance.\n// 初始化 TimeNano 结构体\nfunc NewTimeNano(carbon Carbon) TimeNano {\n\treturn TimeNano{Carbon: carbon}\n}\n\n// Timestamp defines a Timestamp struct.\n// 定义 Timestamp 结构体\ntype Timestamp struct {\n\tCarbon\n}\n\n// NewTimestamp returns a new Timestamp instance.\n// 初始化 Timestamp 结构体\nfunc NewTimestamp(carbon Carbon) Timestamp {\n\treturn Timestamp{Carbon: carbon}\n}\n\n// TimestampMilli defines a TimestampMilli struct.\n// 定义 TimestampMilli 结构体\ntype TimestampMilli struct {\n\tCarbon\n}\n\n// NewTimestampMilli returns a new TimestampMilli instance.\n// 初始化 TimestampMilli 结构体\nfunc NewTimestampMilli(carbon Carbon) TimestampMilli {\n\treturn TimestampMilli{Carbon: carbon}\n}\n\n// TimestampMicro defines a TimestampMicro struct.\n// 定义 TimestampMicro 结构体\ntype TimestampMicro struct {\n\tCarbon\n}\n\n// NewTimestampMicro returns a new TimestampMicro instance.\n// 初始化 TimestampMicro 结构体\nfunc NewTimestampMicro(carbon Carbon) TimestampMicro {\n\treturn TimestampMicro{Carbon: carbon}\n}\n\n// TimestampNano defines a TimestampNano struct.\n// 定义 TimestampNano 结构体\ntype TimestampNano struct {\n\tCarbon\n}\n\n// NewTimestampNano returns a new TimestampNano instance.\n// 初始化 TimestampNano 结构体\nfunc NewTimestampNano(carbon Carbon) TimestampNano {\n\treturn TimestampNano{Carbon: carbon}\n}\n"
        },
        {
          "name": "comparer.go",
          "type": "blob",
          "size": 10.8525390625,
          "content": "package carbon\n\nimport (\n\t\"time\"\n)\n\n// IsDST reports whether is daylight saving time.\n// 是否是夏令时\nfunc (c Carbon) IsDST() bool {\n\treturn c.time.IsDST()\n}\n\n// IsZero reports whether is zero time(0001-01-01 00:00:00 +0000 UTC).\n// 是否是零值时间(0001-01-01 00:00:00 +0000 UTC)\nfunc (c Carbon) IsZero() bool {\n\treturn c.time.IsZero()\n}\n\n// IsValid reports whether is valid time.\n// 是否是有效时间\nfunc (c Carbon) IsValid() bool {\n\tif c.IsZero() {\n\t\treturn false\n\t}\n\tif c.Year() >= MinValue().Year() && c.Year() <= MaxValue().Year() && c.Month() > 0 && c.Day() > 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsInvalid reports whether is invalid time.\n// 是否是无效时间\nfunc (c Carbon) IsInvalid() bool {\n\treturn !c.IsValid()\n}\n\n// IsAM reports whether is before noon.\n// 是否是上午\nfunc (c Carbon) IsAM() bool {\n\treturn c.Format(\"a\") == \"am\"\n}\n\n// IsPM reports whether is after noon.\n// 是否是下午\nfunc (c Carbon) IsPM() bool {\n\treturn c.Format(\"a\") == \"pm\"\n}\n\n// IsNow reports whether is now time.\n// 是否是当前时间\nfunc (c Carbon) IsNow() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Timestamp() == c.Now().Timestamp()\n}\n\n// IsFuture reports whether is future time.\n// 是否是未来时间\nfunc (c Carbon) IsFuture() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Timestamp() > c.Now().Timestamp()\n}\n\n// IsPast reports whether is past time.\n// 是否是过去时间\nfunc (c Carbon) IsPast() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Timestamp() < c.Now().Timestamp()\n}\n\n// IsLeapYear reports whether is a leap year.\n// 是否是闰年\nfunc (c Carbon) IsLeapYear() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\tyear := c.Year()\n\tif year%400 == 0 || (year%4 == 0 && year%100 != 0) {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsLongYear reports whether is a long year, see https://en.wikipedia.org/wiki/ISO_8601#Week_dates.\n// 是否是长年\nfunc (c Carbon) IsLongYear() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\t_, w := time.Date(c.Year(), 12, 31, 0, 0, 0, 0, c.loc).ISOWeek()\n\treturn w == weeksPerLongYear\n}\n\n// IsJanuary reports whether is January.\n// 是否是一月\nfunc (c Carbon) IsJanuary() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.January)\n}\n\n// IsFebruary reports whether is February.\n// 是否是二月\nfunc (c Carbon) IsFebruary() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.February)\n}\n\n// IsMarch reports whether is March.\n// 是否是三月\nfunc (c Carbon) IsMarch() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.March)\n}\n\n// IsApril reports whether is April.\n// 是否是四月\nfunc (c Carbon) IsApril() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.April)\n}\n\n// IsMay reports whether is May.\n// 是否是五月\nfunc (c Carbon) IsMay() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.May)\n}\n\n// IsJune reports whether is June.\n// 是否是六月\nfunc (c Carbon) IsJune() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.June)\n}\n\n// IsJuly reports whether is July.\n// 是否是七月\nfunc (c Carbon) IsJuly() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.July)\n}\n\n// IsAugust reports whether is August.\n// 是否是八月\nfunc (c Carbon) IsAugust() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.August)\n}\n\n// IsSeptember reports whether is September.\n// 是否是九月\nfunc (c Carbon) IsSeptember() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.September)\n}\n\n// IsOctober reports whether is October.\n// 是否是十月\nfunc (c Carbon) IsOctober() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.October)\n}\n\n// IsNovember reports whether is November.\n// 是否是十一月\nfunc (c Carbon) IsNovember() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.November)\n}\n\n// IsDecember reports whether is December.\n// 是否是十二月\nfunc (c Carbon) IsDecember() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Month() == int(time.December)\n}\n\n// IsMonday reports whether is Monday.\n// 是否是周一\nfunc (c Carbon) IsMonday() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.StdTime().Weekday() == time.Monday\n}\n\n// IsTuesday reports whether is Tuesday.\n// 是否是周二\nfunc (c Carbon) IsTuesday() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.StdTime().Weekday() == time.Tuesday\n}\n\n// IsWednesday reports whether is Wednesday.\n// 是否是周三\nfunc (c Carbon) IsWednesday() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.StdTime().Weekday() == time.Wednesday\n}\n\n// IsThursday reports whether is Thursday.\n// 是否是周四\nfunc (c Carbon) IsThursday() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.StdTime().Weekday() == time.Thursday\n}\n\n// IsFriday reports whether is Friday.\n// 是否是周五\nfunc (c Carbon) IsFriday() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.StdTime().Weekday() == time.Friday\n}\n\n// IsSaturday reports whether is Saturday.\n// 是否是周六\nfunc (c Carbon) IsSaturday() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.StdTime().Weekday() == time.Saturday\n}\n\n// IsSunday reports whether is Sunday.\n// 是否是周日\nfunc (c Carbon) IsSunday() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.StdTime().Weekday() == time.Sunday\n}\n\n// IsWeekday reports whether is weekday.\n// 是否是工作日\nfunc (c Carbon) IsWeekday() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn !c.IsSaturday() && !c.IsSunday()\n}\n\n// IsWeekend reports whether is weekend.\n// 是否是周末\nfunc (c Carbon) IsWeekend() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.IsSaturday() || c.IsSunday()\n}\n\n// IsYesterday reports whether is yesterday.\n// 是否是昨天\nfunc (c Carbon) IsYesterday() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.ToDateString() == Yesterday().ToDateString()\n}\n\n// IsToday reports whether is today.\n// 是否是今天\nfunc (c Carbon) IsToday() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.ToDateString() == Now().ToDateString()\n}\n\n// IsTomorrow reports whether is tomorrow.\n// 是否是明天\nfunc (c Carbon) IsTomorrow() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\treturn c.ToDateString() == Tomorrow().ToDateString()\n}\n\n// IsSameCentury reports whether is same century.\n// 是否是同一世纪\nfunc (c Carbon) IsSameCentury(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Century() == t.Century()\n}\n\n// IsSameDecade reports whether is same decade.\n// 是否是同一年代\nfunc (c Carbon) IsSameDecade(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Decade() == t.Decade()\n}\n\n// IsSameYear reports whether is same year.\n// 是否是同一年\nfunc (c Carbon) IsSameYear(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Year() == t.Year()\n}\n\n// IsSameQuarter reports whether is same quarter.\n// 是否是同一季节\nfunc (c Carbon) IsSameQuarter(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Quarter() == t.Quarter()\n}\n\n// IsSameMonth reports whether is same month.\n// 是否是同一月\nfunc (c Carbon) IsSameMonth(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Format(\"Ym\") == t.Format(\"Ym\")\n}\n\n// IsSameDay reports whether is same day.\n// 是否是同一天\nfunc (c Carbon) IsSameDay(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Format(\"Ymd\") == t.Format(\"Ymd\")\n}\n\n// IsSameHour reports whether is same hour.\n// 是否是同一小时\nfunc (c Carbon) IsSameHour(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Format(\"YmdH\") == t.Format(\"YmdH\")\n}\n\n// IsSameMinute reports whether is same minute.\n// 是否是同一分钟\nfunc (c Carbon) IsSameMinute(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Format(\"YmdHi\") == t.Format(\"YmdHi\")\n}\n\n// IsSameSecond reports whether is same second.\n// 是否是同一秒\nfunc (c Carbon) IsSameSecond(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Format(\"YmdHis\") == t.Format(\"YmdHis\")\n\n}\n\n// Compare compares by an operator.\n// 时间比较\nfunc (c Carbon) Compare(operator string, t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\tswitch operator {\n\tcase \"=\":\n\t\treturn c.Eq(t)\n\tcase \"<>\", \"!=\":\n\t\treturn !c.Eq(t)\n\tcase \">\":\n\t\treturn c.Gt(t)\n\tcase \">=\":\n\t\treturn c.Gte(t)\n\tcase \"<\":\n\t\treturn c.Lt(t)\n\tcase \"<=\":\n\t\treturn c.Lte(t)\n\t}\n\treturn false\n}\n\n// Gt reports whether greater than.\n// 是否大于\nfunc (c Carbon) Gt(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.time.After(t.time)\n}\n\n// Lt reports whether less than.\n// 是否小于\nfunc (c Carbon) Lt(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.time.Before(t.time)\n}\n\n// Eq reports whether equal.\n// 是否等于\nfunc (c Carbon) Eq(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.time.Equal(t.time)\n}\n\n// Ne reports whether not equal.\n// 是否不等于\nfunc (c Carbon) Ne(t Carbon) bool {\n\treturn !c.Eq(t)\n}\n\n// Gte reports whether greater than or equal.\n// 是否大于等于\nfunc (c Carbon) Gte(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Gt(t) || c.Eq(t)\n}\n\n// Lte reports whether less than or equal.\n// 是否小于等于\nfunc (c Carbon) Lte(t Carbon) bool {\n\tif c.Error != nil || t.Error != nil {\n\t\treturn false\n\t}\n\treturn c.Lt(t) || c.Eq(t)\n}\n\n// Between reports whether between two times, excluded the start and end time.\n// 是否在两个时间之间(不包括这两个时间)\nfunc (c Carbon) Between(start Carbon, end Carbon) bool {\n\tif c.Error != nil || start.Error != nil || end.Error != nil {\n\t\treturn false\n\t}\n\tif c.Gt(start) && c.Lt(end) {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// BetweenIncludedStart reports whether between two times, included the start time.\n// 是否在两个时间之间(包括开始时间)\nfunc (c Carbon) BetweenIncludedStart(start Carbon, end Carbon) bool {\n\tif c.Error != nil || start.Error != nil || end.Error != nil {\n\t\treturn false\n\t}\n\tif c.Gte(start) && c.Lt(end) {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// BetweenIncludedEnd reports whether between two times, included the end time.\n// 是否在两个时间之间(包括结束时间)\nfunc (c Carbon) BetweenIncludedEnd(start Carbon, end Carbon) bool {\n\tif c.Error != nil || start.Error != nil || end.Error != nil {\n\t\treturn false\n\t}\n\tif c.Gt(start) && c.Lte(end) {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// BetweenIncludedBoth reports whether between two times, included the start and end time.\n// 是否在两个时间之间(包括这两个时间)\nfunc (c Carbon) BetweenIncludedBoth(start Carbon, end Carbon) bool {\n\tif c.Error != nil || start.Error != nil || end.Error != nil {\n\t\treturn false\n\t}\n\tif c.Gte(start) && c.Lte(end) {\n\t\treturn true\n\t}\n\treturn false\n}\n"
        },
        {
          "name": "comparer_bench_test.go",
          "type": "blob",
          "size": 9.5166015625,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_IsDST(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsDST()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsDST()\n\t}\n}\n\nfunc BenchmarkCarbon_IsZero(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsZero()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsZero()\n\t}\n}\n\nfunc BenchmarkCarbon_IsValid(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsZero()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsZero()\n\t}\n}\n\nfunc BenchmarkCarbon_IsInvalid(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsInvalid()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsInvalid()\n\t}\n}\n\nfunc BenchmarkCarbon_IsAM(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsAM()\n\t}\n}\n\nfunc BenchmarkCarbon_IsPM(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsPM()\n\t}\n}\n\nfunc BenchmarkCarbon_IsNow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsNow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsNow()\n\t}\n}\n\nfunc BenchmarkCarbon_IsFuture(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsFuture()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsFuture()\n\t}\n}\n\nfunc BenchmarkCarbon_IsPast(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsPast()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsPast()\n\t}\n}\n\nfunc BenchmarkCarbon_IsLeapYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsLeapYear()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsLeapYear()\n\t}\n}\n\nfunc BenchmarkCarbon_IsLongYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsLongYear()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsLongYear()\n\t}\n}\n\nfunc BenchmarkCarbon_IsJanuary(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsJanuary()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsJanuary()\n\t}\n}\n\nfunc BenchmarkCarbon_IsFebruary(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsFebruary()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsFebruary()\n\t}\n}\n\nfunc BenchmarkCarbon_IsMarch(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsMarch()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsMarch()\n\t}\n}\n\nfunc BenchmarkCarbon_IsApril(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsApril()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsApril()\n\t}\n}\n\nfunc BenchmarkCarbon_IsMay(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsMay()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsMay()\n\t}\n}\n\nfunc BenchmarkCarbon_IsJune(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsJune()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsJune()\n\t}\n}\n\nfunc BenchmarkCarbon_IsJuly(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsJuly()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsJuly()\n\t}\n}\n\nfunc BenchmarkCarbon_IsAugust(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsAugust()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsAugust()\n\t}\n}\n\nfunc BenchmarkCarbon_IsSeptember(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSeptember()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSeptember()\n\t}\n}\n\nfunc BenchmarkCarbon_IsOctober(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsOctober()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsOctober()\n\t}\n}\n\nfunc BenchmarkCarbon_IsNovember(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsNovember()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsNovember()\n\t}\n}\n\nfunc BenchmarkCarbon_IsDecember(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsDecember()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsDecember()\n\t}\n}\n\nfunc BenchmarkCarbon_IsMonday(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsMonday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsMonday()\n\t}\n}\n\nfunc BenchmarkCarbon_IsTuesday(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsTuesday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsTuesday()\n\t}\n}\n\nfunc BenchmarkCarbon_IsWednesday(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsWednesday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsWednesday()\n\t}\n}\n\nfunc BenchmarkCarbon_IsThursday(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsThursday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsThursday()\n\t}\n}\n\nfunc BenchmarkCarbon_IsFriday(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsFriday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsFriday()\n\t}\n}\n\nfunc BenchmarkCarbon_IsSaturday(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSaturday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSaturday()\n\t}\n}\n\nfunc BenchmarkCarbon_IsSunday(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSunday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSunday()\n\t}\n}\n\nfunc BenchmarkCarbon_IsWeekday(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsWeekday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsWeekday()\n\t}\n}\n\nfunc BenchmarkCarbon_IsWeekend(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsWeekend()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsWeekend()\n\t}\n}\n\nfunc BenchmarkCarbon_IsYesterday(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsYesterday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsYesterday()\n\t}\n}\n\nfunc BenchmarkCarbon_IsToday(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsToday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsToday()\n\t}\n}\n\nfunc BenchmarkCarbon_IsTomorrow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsTomorrow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsTomorrow()\n\t}\n}\n\nfunc BenchmarkCarbon_IsSameCentury(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSameCentury(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSameCentury(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_IsSameDecade(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSameDecade(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSameDecade(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_IsSameYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSameYear(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSameYear(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_IsSameQuarter(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSameQuarter(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSameQuarter(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_IsSameMonth(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSameMonth(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSameMonth(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_IsSameDay(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSameDay(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSameDay(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_IsSameHour(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSameHour(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSameHour(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_IsSameMinute(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSameMinute(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSameMinute(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_IsSameSecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSameSecond(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().IsSameSecond(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_Compare(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Compare(\">\", Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().Compare(\">\", Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_Gt(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Gt(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().Gt(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_Lt(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Lt(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().Lt(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_Eq(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Eq(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().Eq(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_Ne(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Ne(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().Ne(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_Gte(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Gte(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().Gte(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_Lte(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Lte(Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().Lte(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_Between(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Between(Tomorrow(), Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().Between(Tomorrow(), Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_BetweenIncludedStart(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.BetweenIncludedStart(Tomorrow(), Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().BetweenIncludedStart(Tomorrow(), Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_BetweenIncludedEnd(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.BetweenIncludedEnd(Tomorrow(), Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().BetweenIncludedEnd(Tomorrow(), Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_BetweenIncludedBoth(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.BetweenIncludedBoth(Tomorrow(), Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().BetweenIncludedBoth(Tomorrow(), Yesterday())\n\t}\n}\n"
        },
        {
          "name": "comparer_unit_test.go",
          "type": "blob",
          "size": 33.193359375,
          "content": "package carbon\n\nimport (\n\t\"github.com/stretchr/testify/assert\"\n\t\"testing\"\n)\n\nfunc TestCarbon_IsDST(t *testing.T) {\n\ttzWithDST, tzWithoutDST := \"Australia/Sydney\", \"Australia/Brisbane\"\n\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: NewCarbon(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"0000-01-01 00:00:00 +0000 UTC\", tzWithDST),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"0001-01-01 00:00:00 +0000 UTC\", tzWithDST),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2009-01-01\", tzWithDST),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2009-01-01\", tzWithoutDST),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsDST(), \"IsDST()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsZero(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: NewCarbon(),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"0000-01-01 00:00:00 +0000 UTC\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"0001-01-01 00:00:00 +0000 UTC\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-08-00 00:00:00\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-00-05 00:00:00\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-00-00 00:00:00\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2020-08-05 00:00:00\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tcarbon: Parse(\"0000-01-01 13:14:15\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsZero(), \"IsZero()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsValid(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: NewCarbon(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2024-00-00 00:00:00 +0000 UTC\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"0000-01-01 00:00:00 +0000 UTC\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"0001-01-01 13:14:15 +0000 UTC\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsValid(), \"IsValid()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsInvalid(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: NewCarbon(),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"0000-01-01 00:00:00 +0000 UTC\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"0001-01-01 13:14:15 +0000 UTC\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsInvalid(), \"IsInvalid()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsAM(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 00:00:00\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 08:00:00\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 12:00:00\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsAM(), \"IsAM()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsPM(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 00:00:00\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 08:00:00\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 12:00:00\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsPM(), \"IsPM()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsNow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Tomorrow(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Yesterday(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Now(),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsNow(), \"IsNow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsFuture(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Tomorrow(),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Yesterday(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Now(),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsFuture(), \"IsFuture()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsPast(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Tomorrow(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Yesterday(),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Now(),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsPast(), \"IsPast()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsLeapYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2015-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2016-01-01\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2017-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsLeapYear(), \"IsLeapYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsLongYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2015-01-01\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2016-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2017-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsLongYear(), \"IsLongYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsJanuary(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-02-01\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsJanuary(), \"IsJanuary()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsFebruary(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-02-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsFebruary(), \"IsFebruary()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsMarch(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-03-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsMarch(), \"IsMarch()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsApril(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-04-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsApril(), \"IsApril()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsMay(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-05-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsMay(), \"IsMay()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsJune(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-06-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsJune(), \"IsJune()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsJuly(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-07-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsJuly(), \"IsJuly()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsAugust(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsAugust(), \"IsAugust()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSeptember(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-09-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsSeptember(), \"IsSeptember()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsOctober(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsOctober(), \"IsOctober()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsNovember(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-11-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsNovember(), \"IsNovember()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsDecember(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-12-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsDecember(), \"IsDecember()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsMonday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-10-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-05\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsMonday(), \"IsMonday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsTuesday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-10-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-06\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsTuesday(), \"IsTuesday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsWednesday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-10-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-07\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsWednesday(), \"IsWednesday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsThursday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-10-05\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-08\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsThursday(), \"IsThursday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsFriday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-10-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-09\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsFriday(), \"IsFriday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSaturday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-10-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-10\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsSaturday(), \"IsSaturday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSunday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-10-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-11\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsSunday(), \"IsSunday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsWeekday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-10-05\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-10\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsWeekday(), \"IsWeekday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsWeekend(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-10-05\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-10\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsWeekend(), \"IsWeekend()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsYesterday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: NewCarbon(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Yesterday(),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Tomorrow(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Now(),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsYesterday(), \"IsYesterday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsToday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: NewCarbon(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Yesterday(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Tomorrow(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Now(),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsToday(), \"IsToday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsTomorrow(t *testing.T) {\n\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: NewCarbon(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Yesterday(),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Tomorrow(),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Now(),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsTomorrow(), \"IsTomorrow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSameCentury(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    bool\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"xxx\"),\n\t\t\tcarbon2: Parse(\"xxx\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05\"),\n\t\t\tcarbon2: Parse(\"3020-08-05\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05\"),\n\t\t\tcarbon2: Parse(\"2099-08-05\"),\n\t\t\twant:    true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.IsSameCentury(tt.carbon2), \"IsSameCentury()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSameDecade(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    bool\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05\"),\n\t\t\tcarbon2: Parse(\"2030-08-05\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05\"),\n\t\t\tcarbon2: Parse(\"2021-08-05\"),\n\t\t\twant:    true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.IsSameDecade(tt.carbon2), \"IsSameDecade()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSameYear(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    bool\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05\"),\n\t\t\tcarbon2: Parse(\"2021-08-05\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-01-01\"),\n\t\t\tcarbon2: Parse(\"2020-12-31\"),\n\t\t\twant:    true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.IsSameYear(tt.carbon2), \"IsSameYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSameQuarter(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    bool\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05\"),\n\t\t\tcarbon2: Parse(\"2020-01-05\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-01-01\"),\n\t\t\tcarbon2: Parse(\"2020-01-31\"),\n\t\t\twant:    true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.IsSameQuarter(tt.carbon2), \"IsSameQuarter()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSameMonth(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    bool\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05\"),\n\t\t\tcarbon2: Parse(\"2021-08-05\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-01-01\"),\n\t\t\tcarbon2: Parse(\"2020-01-31\"),\n\t\t\twant:    true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.IsSameMonth(tt.carbon2), \"IsSameMonth()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSameDay(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    bool\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2021-08-05 13:14:15\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 00:00:00\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.IsSameDay(tt.carbon2), \"IsSameDay()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSameHour(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    bool\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2021-08-05 13:14:15\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:00:00\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.IsSameHour(tt.carbon2), \"IsSameDay()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSameMinute(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    bool\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2021-08-05 13:14:15\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:00\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.IsSameMinute(tt.carbon2), \"IsSameMinute()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSameSecond(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    bool\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2021-08-05 13:14:15\"),\n\t\t\twant:    false,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.IsSameSecond(tt.carbon2), \"IsSameSecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Compare(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").Compare(\">\", Parse(\"2020-08-04\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").Compare(\">\", Parse(\"2020-08-04\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").Compare(\"<\", Parse(\"2020-08-04\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").Compare(\"<\", Parse(\"2020-08-06\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\").Compare(\"=\", Parse(\"2020-08-05\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tactual: Parse(\"2020-08-05\").Compare(\">=\", Parse(\"2020-08-05\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tactual: Parse(\"2020-08-05\").Compare(\"<=\", Parse(\"2020-08-05\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tactual: Parse(\"2020-08-05\").Compare(\"<>\", Parse(\"2020-08-06\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tactual: Parse(\"2020-08-05\").Compare(\"+\", Parse(\"2020-08-06\")),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"Compare()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Gt(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").Gt(Parse(\"2020-08-04\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").Gt(Parse(\"2020-08-04\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").Gt(Parse(\"2020-08-04\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").Gt(Parse(\"2020-08-06\")),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"Gt()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Lt(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").Lt(Parse(\"2020-08-04\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").Lt(Parse(\"2020-08-04\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").Lt(Parse(\"2020-08-04\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").Lt(Parse(\"2020-08-06\")),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"Lt()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Eq(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").Eq(Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").Eq(Parse(\"2020-08-05\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").Eq(Parse(\"2020-08-04\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").Eq(Parse(\"2020-08-06\")),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"Eq()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Ne(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").Ne(Parse(\"2020-08-05\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").Ne(Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").Ne(Parse(\"2020-08-04\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").Ne(Parse(\"2020-08-06\")),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"Ne()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Gte(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").Gte(Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").Gte(Parse(\"2020-08-05\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").Gte(Parse(\"2020-08-04\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").Gte(Parse(\"2020-08-06\")),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"Gte()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Lte(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").Lte(Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").Lte(Parse(\"2020-08-05\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").Lte(Parse(\"2020-08-04\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").Lte(Parse(\"2020-08-06\")),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"Lte()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Between(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").Between(Parse(\"2020-08-05\"), Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").Between(Parse(\"2020-08-05\"), Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").Between(Parse(\"2020-08-05\"), Parse(\"2020-08-06\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").Between(Parse(\"2020-08-05\"), Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\").Between(Parse(\"2020-08-04\"), Parse(\"2020-08-06\")),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"Between()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_BetweenIncludedStart(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").BetweenIncludedStart(Parse(\"2020-08-05\"), Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedStart(Parse(\"2020-08-05\"), Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedStart(Parse(\"2020-08-05\"), Parse(\"2020-08-06\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedStart(Parse(\"2020-08-04\"), Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedStart(Parse(\"2020-08-04\"), Parse(\"2020-08-06\")),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"BetweenIncludedStart()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_BetweenIncludedEnd(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").BetweenIncludedEnd(Parse(\"2020-08-05\"), Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedEnd(Parse(\"2020-08-05\"), Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedEnd(Parse(\"2020-08-05\"), Parse(\"2020-08-06\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedEnd(Parse(\"2020-08-04\"), Parse(\"2020-08-05\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedEnd(Parse(\"2020-08-04\"), Parse(\"2020-08-06\")),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"BetweenIncludedEnd()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_BetweenIncludedBoth(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual bool\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"xxx\").BetweenIncludedBoth(Parse(\"2020-08-05\"), Parse(\"2020-08-05\")),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedBoth(Parse(\"2020-08-05\"), Parse(\"2020-08-05\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedBoth(Parse(\"2020-08-05\"), Parse(\"2020-08-06\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedBoth(Parse(\"2020-08-04\"), Parse(\"2020-08-05\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\").BetweenIncludedBoth(Parse(\"2020-08-06\"), Parse(\"2020-08-06\")),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"BetweenIncludedBoth()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "constellation.go",
          "type": "blob",
          "size": 4.4267578125,
          "content": "package carbon\n\nimport (\n\t\"strings\"\n)\n\nvar constellations = []struct {\n\tstartMonth, startDay int\n\tendMonth, endDay     int\n}{\n\t{3, 21, 4, 19},   // Aries\n\t{4, 20, 5, 20},   // Taurus\n\t{5, 21, 6, 21},   // Gemini\n\t{6, 22, 7, 22},   // Cancer\n\t{7, 23, 8, 22},   // Leo\n\t{8, 23, 9, 22},   // Virgo\n\t{9, 23, 10, 23},  // Libra\n\t{10, 24, 11, 22}, // Scorpio\n\t{11, 23, 12, 21}, // Sagittarius\n\t{12, 22, 1, 19},  // Capricorn\n\t{1, 20, 2, 18},   // Aquarius\n\t{2, 19, 3, 20},   // Pisces\n}\n\n// Constellation gets constellation name like \"Aries\", i18n is supported.\n// 获取星座，支持i18n\nfunc (c Carbon) Constellation() string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(c.lang.resources) == 0 {\n\t\tc.lang.SetLocale(defaultLocale)\n\t}\n\tindex := -1\n\t_, month, day := c.Date()\n\tfor i := 0; i < len(constellations); i++ {\n\t\tconstellation := constellations[i]\n\t\tif month == constellation.startMonth && day >= constellation.startDay {\n\t\t\tindex = i\n\t\t}\n\t\tif month == constellation.endMonth && day <= constellation.endDay {\n\t\t\tindex = i\n\t\t}\n\t}\n\tc.lang.rw.RLock()\n\tdefer c.lang.rw.RUnlock()\n\tif resources, ok := c.lang.resources[\"constellations\"]; ok {\n\t\tslice := strings.Split(resources, \"|\")\n\t\tif len(slice) == MonthsPerYear {\n\t\t\treturn slice[index]\n\t\t}\n\t}\n\treturn \"\"\n}\n\n// IsAries reports whether is Aries.\n// 是否是白羊座\nfunc (c Carbon) IsAries() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 3 && day >= 21 {\n\t\treturn true\n\t}\n\tif month == 4 && day <= 19 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsTaurus reports whether is Taurus.\n// 是否是金牛座\nfunc (c Carbon) IsTaurus() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 4 && day >= 20 {\n\t\treturn true\n\t}\n\tif month == 5 && day <= 20 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsGemini reports whether is Gemini.\n// 是否是双子座\nfunc (c Carbon) IsGemini() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 5 && day >= 21 {\n\t\treturn true\n\t}\n\tif month == 6 && day <= 21 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsCancer reports whether is Cancer.\n// 是否是巨蟹座\nfunc (c Carbon) IsCancer() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 6 && day >= 22 {\n\t\treturn true\n\t}\n\tif month == 7 && day <= 22 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsLeo reports whether is Leo.\n// 是否是狮子座\nfunc (c Carbon) IsLeo() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 7 && day >= 23 {\n\t\treturn true\n\t}\n\tif month == 8 && day <= 22 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsVirgo reports whether is Virgo.\n// 是否是处女座\nfunc (c Carbon) IsVirgo() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 8 && day >= 23 {\n\t\treturn true\n\t}\n\tif month == 9 && day <= 22 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsLibra reports whether is Libra.\n// 是否是天秤座\nfunc (c Carbon) IsLibra() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 9 && day >= 23 {\n\t\treturn true\n\t}\n\tif month == 10 && day <= 23 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsScorpio reports whether is Scorpio.\n// 是否是天蝎座\nfunc (c Carbon) IsScorpio() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 10 && day >= 24 {\n\t\treturn true\n\t}\n\tif month == 11 && day <= 22 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsSagittarius reports whether is Sagittarius.\n// 是否是射手座\nfunc (c Carbon) IsSagittarius() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 11 && day >= 22 {\n\t\treturn true\n\t}\n\tif month == 12 && day <= 21 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsCapricorn reports whether is Capricorn.\n// 是否是摩羯座\nfunc (c Carbon) IsCapricorn() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 12 && day >= 22 {\n\t\treturn true\n\t}\n\tif month == 1 && day <= 19 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsAquarius reports whether is Aquarius.\n// 是否是水瓶座\nfunc (c Carbon) IsAquarius() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 1 && day >= 20 {\n\t\treturn true\n\t}\n\tif month == 2 && day <= 18 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsPisces reports whether is Pisces.\n// 是否是双鱼座\nfunc (c Carbon) IsPisces() bool {\n\tif c.IsInvalid() {\n\t\treturn false\n\t}\n\t_, month, day := c.Date()\n\tif month == 2 && day >= 19 {\n\t\treturn true\n\t}\n\tif month == 3 && day <= 20 {\n\t\treturn true\n\t}\n\treturn false\n}\n"
        },
        {
          "name": "constellation_bench_test.go",
          "type": "blob",
          "size": 1.4609375,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_Constellation(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Constellation()\n\t}\n}\n\nfunc BenchmarkCarbon_IsAries(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsAries()\n\t}\n}\n\nfunc BenchmarkCarbon_IsTaurus(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsTaurus()\n\t}\n}\n\nfunc BenchmarkCarbon_IsGemini(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsGemini()\n\t}\n}\n\nfunc BenchmarkCarbon_IsCancer(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsCancer()\n\t}\n}\n\nfunc BenchmarkCarbon_IsLeo(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsLeo()\n\t}\n}\n\nfunc BenchmarkCarbon_IsVirgo(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsVirgo()\n\t}\n}\n\nfunc BenchmarkCarbon_IsLibra(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsLibra()\n\t}\n}\n\nfunc BenchmarkCarbon_IsScorpio(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsScorpio()\n\t}\n}\n\nfunc BenchmarkCarbon_IsSagittarius(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSagittarius()\n\t}\n}\n\nfunc BenchmarkCarbon_IsCapricorn(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsCapricorn()\n\t}\n}\n\nfunc BenchmarkCarbon_IsAquarius(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsAquarius()\n\t}\n}\n\nfunc BenchmarkCarbon_IsPisces(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsPisces()\n\t}\n}\n"
        },
        {
          "name": "constellation_unit_test.go",
          "type": "blob",
          "size": 8.1455078125,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_Constellation(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-05\"),\n\t\t\twant:   \"Capricorn\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-22\"),\n\t\t\twant:   \"Aquarius\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-05\"),\n\t\t\twant:   \"Aquarius\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-03-05\"),\n\t\t\twant:   \"Pisces\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-04-05\"),\n\t\t\twant:   \"Aries\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-05-05\"),\n\t\t\twant:   \"Taurus\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2020-06-05\"),\n\t\t\twant:   \"Gemini\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tcarbon: Parse(\"2020-07-05\"),\n\t\t\twant:   \"Cancer\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case10\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   \"Leo\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case11\",\n\t\t\tcarbon: Parse(\"2020-09-05\"),\n\t\t\twant:   \"Virgo\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case12\",\n\t\t\tcarbon: Parse(\"2020-10-05\"),\n\t\t\twant:   \"Libra\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case13\",\n\t\t\tcarbon: Parse(\"2020-11-05\"),\n\t\t\twant:   \"Scorpio\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case14\",\n\t\t\tcarbon: Parse(\"2020-12-05\"),\n\t\t\twant:   \"Sagittarius\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case15\",\n\t\t\tcarbon: Parse(\"2020-12-22\"),\n\t\t\twant:   \"Capricorn\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Constellation(), \"Constellation()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsAries(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-03-21\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-04-19\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsAries(), \"IsAries()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsTaurus(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-04-20\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-05-20\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsTaurus(), \"IsTaurus()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsGemini(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-05-21\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-06-21\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsGemini(), \"IsGemini()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsCancer(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-06-22\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-07-22\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsCancer(), \"IsCancer()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsLeo(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-07-23\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-23\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsLeo(), \"IsLeo()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsVirgo(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-23\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-09-22\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsVirgo(), \"IsVirgo()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsLibra(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-09-23\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-10-23\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsLibra(), \"IsLibra()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsScorpio(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-10-24\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-11-22\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsScorpio(), \"IsScorpio()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSagittarius(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-11-23\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-12-21\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsSagittarius(), \"IsSagittarius()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsCapricorn(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-12-22\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-19\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsCapricorn(), \"IsCapricorn()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsAquarius(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-20\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-02-18\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsAquarius(), \"IsAquarius()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsPisces(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-02-19\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-03-20\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsPisces(), \"IsPisces()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "creator.go",
          "type": "blob",
          "size": 12.1953125,
          "content": "package carbon\n\nimport (\n\t\"time\"\n)\n\n// CreateFromStdTime creates a Carbon instance from standard time.Time.\n// 从标准的 time.Time 创建 Carbon 实例\nfunc CreateFromStdTime(tt time.Time, timezone ...string) Carbon {\n\tc := NewCarbon()\n\tc.loc = tt.Location()\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tc.time = tt\n\treturn c\n}\n\n// CreateFromTimestamp creates a Carbon instance from a given timestamp with second.\n// 从给定的秒级时间戳创建 Carbon 实例\nfunc (c Carbon) CreateFromTimestamp(timestamp int64, timezone ...string) Carbon {\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tc.time = time.Unix(timestamp, 0)\n\treturn c\n}\n\n// CreateFromTimestamp creates a Carbon instance from a given timestamp with second.\n// 从给定的秒级时间戳创建 Carbon 实例\nfunc CreateFromTimestamp(timestamp int64, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromTimestamp(timestamp, timezone...)\n}\n\n// CreateFromTimestampMilli creates a Carbon instance from a given timestamp with millisecond.\n// 从给定的毫秒级时间戳创建 Carbon 实例\nfunc (c Carbon) CreateFromTimestampMilli(timestamp int64, timezone ...string) Carbon {\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tc.time = time.Unix(timestamp/1e3, (timestamp%1e3)*1e6)\n\treturn c\n}\n\n// CreateFromTimestampMilli creates a Carbon instance from a given timestamp with millisecond.\n// 从给定的毫秒级时间戳创建 Carbon 实例\nfunc CreateFromTimestampMilli(timestamp int64, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromTimestampMilli(timestamp, timezone...)\n}\n\n// CreateFromTimestampMicro creates a Carbon instance from a given timestamp with microsecond.\n// 从给定的微秒级时间戳创建 Carbon 实例\nfunc (c Carbon) CreateFromTimestampMicro(timestamp int64, timezone ...string) Carbon {\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tc.time = time.Unix(timestamp/1e6, (timestamp%1e6)*1e3)\n\treturn c\n}\n\n// CreateFromTimestampMicro creates a Carbon instance from a given timestamp with microsecond.\n// 从给定的微秒级时间戳创建 Carbon 实例\nfunc CreateFromTimestampMicro(timestamp int64, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromTimestampMicro(timestamp, timezone...)\n}\n\n// CreateFromTimestampNano creates a Carbon instance from a given timestamp with nanosecond.\n// 从给定的纳秒级时间戳创建 Carbon 实例\nfunc (c Carbon) CreateFromTimestampNano(timestamp int64, timezone ...string) Carbon {\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tc.time = time.Unix(timestamp/1e9, timestamp%1e9)\n\treturn c\n}\n\n// CreateFromTimestampNano creates a Carbon instance from a given timestamp with nanosecond.\n// 从给定的纳秒级时间戳创建 Carbon 实例\nfunc CreateFromTimestampNano(timestamp int64, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromTimestampNano(timestamp, timezone...)\n}\n\n// CreateFromDateTime creates a Carbon instance from a given date and time.\n// 从给定的年、月、日、时、分、秒创建 Carbon 实例\nfunc (c Carbon) CreateFromDateTime(year, month, day, hour, minute, second int, timezone ...string) Carbon {\n\treturn c.create(year, month, day, hour, minute, second, 0, timezone...)\n}\n\n// CreateFromDateTime creates a Carbon instance from a given date and time.\n// 从给定的年、月、日、时、分、秒创建 Carbon 实例\nfunc CreateFromDateTime(year, month, day, hour, minute, second int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromDateTime(year, month, day, hour, minute, second, timezone...)\n}\n\n// CreateFromDateTimeMilli creates a Carbon instance from a given date, time and millisecond.\n// 从给定的年、月、日、时、分、秒、毫秒创建 Carbon 实例\nfunc (c Carbon) CreateFromDateTimeMilli(year, month, day, hour, minute, second, millisecond int, timezone ...string) Carbon {\n\treturn c.create(year, month, day, hour, minute, second, millisecond*1e6, timezone...)\n}\n\n// CreateFromDateTimeMilli creates a Carbon instance from a given date, time and millisecond.\n// 从给定的年、月、日、时、分、秒、毫秒创建 Carbon 实例\nfunc CreateFromDateTimeMilli(year, month, day, hour, minute, second, millisecond int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromDateTimeMilli(year, month, day, hour, minute, second, millisecond, timezone...)\n}\n\n// CreateFromDateTimeMicro creates a Carbon instance from a given date, time and microsecond.\n// 从给定的年、月、日、时、分、秒、微秒创建 Carbon 实例\nfunc (c Carbon) CreateFromDateTimeMicro(year, month, day, hour, minute, second, microsecond int, timezone ...string) Carbon {\n\treturn c.create(year, month, day, hour, minute, second, microsecond*1e3, timezone...)\n}\n\n// CreateFromDateTimeMicro creates a Carbon instance from a given date, time and microsecond.\n// 从给定的年、月、日、时、分、秒、微秒创建 Carbon 实例\nfunc CreateFromDateTimeMicro(year, month, day, hour, minute, second, microsecond int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromDateTimeMicro(year, month, day, hour, minute, second, microsecond, timezone...)\n}\n\n// CreateFromDateTimeNano creates a Carbon instance from a given date, time and nanosecond.\n// 从给定的年、月、日、时、分、秒、纳秒创建 Carbon 实例\nfunc (c Carbon) CreateFromDateTimeNano(year, month, day, hour, minute, second, nanosecond int, timezone ...string) Carbon {\n\treturn c.create(year, month, day, hour, minute, second, nanosecond, timezone...)\n}\n\n// CreateFromDateTimeNano creates a Carbon instance from a given date, time and nanosecond.\n// 从给定的年、月、日、时、分、秒、纳秒创建 Carbon 实例\nfunc CreateFromDateTimeNano(year, month, day, hour, minute, second, nanosecond int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromDateTimeNano(year, month, day, hour, minute, second, nanosecond, timezone...)\n}\n\n// CreateFromDate creates a Carbon instance from a given date.\n// 从给定的年、月、日创建 Carbon 实例\nfunc (c Carbon) CreateFromDate(year, month, day int, timezone ...string) Carbon {\n\treturn c.create(year, month, day, 0, 0, 0, 0, timezone...)\n}\n\n// CreateFromDate creates a Carbon instance from a given date.\n// 从给定的年、月、日创建 Carbon 实例\nfunc CreateFromDate(year, month, day int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromDate(year, month, day, timezone...)\n}\n\n// CreateFromDateMilli creates a Carbon instance from a given date and millisecond.\n// 从给定的年、月、日、毫秒创建 Carbon 实例\nfunc (c Carbon) CreateFromDateMilli(year, month, day, millisecond int, timezone ...string) Carbon {\n\treturn c.create(year, month, day, 0, 0, 0, millisecond*1e6, timezone...)\n}\n\n// CreateFromDateMilli creates a Carbon instance from a given date and millisecond.\n// 从给定的年、月、日、毫秒创建 Carbon 实例\nfunc CreateFromDateMilli(year, month, day, millisecond int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromDateMilli(year, month, day, millisecond, timezone...)\n}\n\n// CreateFromDateMicro creates a Carbon instance from a given date and microsecond.\n// 从给定的年、月、日、微秒创建 Carbon 实例\nfunc (c Carbon) CreateFromDateMicro(year, month, day, microsecond int, timezone ...string) Carbon {\n\treturn c.create(year, month, day, 0, 0, 0, microsecond*1e3, timezone...)\n}\n\n// CreateFromDateMicro creates a Carbon instance from a given date and microsecond.\n// 从给定的年、月、日、微秒创建 Carbon 实例\nfunc CreateFromDateMicro(year, month, day, microsecond int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromDateMicro(year, month, day, microsecond, timezone...)\n}\n\n// CreateFromDateNano creates a Carbon instance from a given date and nanosecond.\n// 从给定的年、月、日、纳秒创建 Carbon 实例\nfunc (c Carbon) CreateFromDateNano(year, month, day, nanosecond int, timezone ...string) Carbon {\n\treturn c.create(year, month, day, 0, 0, 0, nanosecond, timezone...)\n}\n\n// CreateFromDateNano creates a Carbon instance from a given date and nanosecond.\n// 从给定的年、月、日、纳秒创建 Carbon 实例\nfunc CreateFromDateNano(year, month, day, nanosecond int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromDateNano(year, month, day, nanosecond, timezone...)\n}\n\n// CreateFromTime creates a Carbon instance from a given time(year, month and day are taken from the current time).\n// 从给定的时、分、秒创建 Carbon 实例(年、月、日取自当前时间)\nfunc (c Carbon) CreateFromTime(hour, minute, second int, timezone ...string) Carbon {\n\tyear, month, day := c.Now(timezone...).Date()\n\treturn c.create(year, month, day, hour, minute, second, 0, timezone...)\n}\n\n// CreateFromTime creates a Carbon instance from a given time(year, month and day are taken from the current time).\n// 从给定的时、分、秒创建 Carbon 实例(年、月、日取自当前时间)\nfunc CreateFromTime(hour, minute, second int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromTime(hour, minute, second, timezone...)\n}\n\n// CreateFromTimeMilli creates a Carbon instance from a given time and millisecond(year, month and day are taken from the current time).\n// 从给定的时、分、秒、毫秒创建 Carbon 实例(年、月、日取自当前时间)\nfunc (c Carbon) CreateFromTimeMilli(hour, minute, second, millisecond int, timezone ...string) Carbon {\n\tyear, month, day := c.Now(timezone...).Date()\n\treturn c.create(year, month, day, hour, minute, second, millisecond*1e6, timezone...)\n}\n\n// CreateFromTimeMilli creates a Carbon instance from a given time and millisecond(year, month and day are taken from the current time).\n// 从给定的时、分、秒、毫秒创建 Carbon 实例(年、月、日取自当前时间)\nfunc CreateFromTimeMilli(hour, minute, second, millisecond int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromTimeMilli(hour, minute, second, millisecond, timezone...)\n}\n\n// CreateFromTimeMicro creates a Carbon instance from a given time and microsecond(year, month and day are taken from the current time).\n// 从给定的时、分、秒、微秒创建 Carbon 实例(年、月、日取自当前时间)\nfunc (c Carbon) CreateFromTimeMicro(hour, minute, second, microsecond int, timezone ...string) Carbon {\n\tyear, month, day := c.Now(timezone...).Date()\n\treturn c.create(year, month, day, hour, minute, second, microsecond*1e3, timezone...)\n}\n\n// CreateFromTimeMicro creates a Carbon instance from a given time and microsecond(year, month and day are taken from the current time).\n// 从给定的时、分、秒、微秒创建 Carbon 实例(年、月、日取自当前时间)\nfunc CreateFromTimeMicro(hour, minute, second, microsecond int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromTimeMicro(hour, minute, second, microsecond, timezone...)\n}\n\n// CreateFromTimeNano creates a Carbon instance from a given time and nanosecond(year, month and day are taken from the current time).\n// 从给定的时、分、秒、纳秒创建 Carbon 实例(年、月、日取自当前时间)\nfunc (c Carbon) CreateFromTimeNano(hour, minute, second, nanosecond int, timezone ...string) Carbon {\n\tyear, month, day := c.Now(timezone...).Date()\n\treturn c.create(year, month, day, hour, minute, second, nanosecond, timezone...)\n}\n\n// CreateFromTimeNano creates a Carbon instance from a given time and nanosecond(year, month and day are taken from the current time).\n// 从给定的时、分、秒、纳秒创建 Carbon 实例(年、月、日取自当前时间)\nfunc CreateFromTimeNano(hour, minute, second, nanosecond int, timezone ...string) Carbon {\n\treturn NewCarbon().CreateFromTimeNano(hour, minute, second, nanosecond, timezone...)\n}\n\n// creates a Carbon instance from a given date, time and nanosecond.\n// 从给定的年、月、日、时、分、秒、纳秒创建 Carbon 实例\nfunc (c Carbon) create(year, month, day, hour, minute, second, nanosecond int, timezone ...string) Carbon {\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tc.time = time.Date(year, time.Month(month), day, hour, minute, second, nanosecond, c.loc)\n\treturn c\n}\n"
        },
        {
          "name": "creator_bench_test.go",
          "type": "blob",
          "size": 3.4931640625,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc BenchmarkCarbon_CreateFromStdTime(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromStdTime(time.Now())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromStdTime(time.Now(), PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromTimestamp(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimestamp(1649735755)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimestamp(1649735755, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromTimestampMilli(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimestampMilli(1649735755981)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimestampMilli(1649735755981, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromTimestampMicro(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimestampMicro(1649735755981566)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimestampMicro(1649735755981566, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromTimestampNano(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimestampNano(1649735755981566000)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimestampNano(1649735755981566000, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromDateTime(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateTime(2020, 8, 5, 13, 14, 15)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateTime(2020, 8, 5, 13, 14, 15, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromDateTimeMilli(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateTimeMilli(2020, 8, 5, 13, 14, 15, 0)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateTimeMilli(2020, 8, 5, 13, 14, 15, 0, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromDateTimeMicro(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateTimeMicro(2020, 8, 5, 13, 14, 15, 0)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateTimeMicro(2020, 8, 5, 13, 14, 15, 0, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromDateTimeNano(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateTimeNano(2020, 8, 5, 13, 14, 15, 0)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateTimeNano(2020, 8, 5, 13, 14, 15, 0, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromDate(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDate(2020, 8, 5)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDate(2020, 8, 5, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromDateMilli(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateMilli(2020, 8, 5, 0)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateMilli(2020, 8, 5, 0, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromDateMicro(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateMicro(2020, 8, 5, 0)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateMicro(2020, 8, 5, 0, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromDateNano(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateNano(2020, 8, 5, 0)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromDateNano(2020, 8, 5, 0, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromTime(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTime(13, 14, 15)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTime(13, 14, 15, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromTimeMilli(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimeMilli(13, 14, 15, 0)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimeMilli(13, 14, 15, 0, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromTimeMicro(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimeMicro(13, 14, 15, 0)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimeMicro(13, 14, 15, 0, PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_CreateFromTimeNano(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimeNano(13, 14, 15, 0)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tCreateFromTimeNano(13, 14, 15, 0, PRC)\n\t}\n}\n"
        },
        {
          "name": "creator_unit_test.go",
          "type": "blob",
          "size": 13.1220703125,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_CreateFromStdTime(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: CreateFromStdTime(time.Now()),\n\t\t\twant:   time.Now().Format(DateTimeLayout),\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromStdTime(time.Now(), PRC),\n\t\t\twant:   time.Now().Format(DateTimeLayout),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(), \"CreateFromStdTime()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromTimestamp(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromTimestamp(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromTimestamp(-1),\n\t\t\twant:   \"1970-01-01 07:59:59 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromTimestamp(0),\n\t\t\twant:   \"1970-01-01 08:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromTimestamp(1),\n\t\t\twant:   \"1970-01-01 08:00:01 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: CreateFromTimestamp(1649735755, PRC),\n\t\t\twant:   \"2022-04-12 11:55:55 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromTimestamp()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromTimestampMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromTimestampMilli(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromTimestampMilli(-1),\n\t\t\twant:   \"1970-01-01 07:59:59.999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromTimestampMilli(0),\n\t\t\twant:   \"1970-01-01 08:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromTimestampMilli(1),\n\t\t\twant:   \"1970-01-01 08:00:00.001 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: CreateFromTimestampMilli(1649735755981, PRC),\n\t\t\twant:   \"2022-04-12 11:55:55.981 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromTimestampMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromTimestampMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromTimestampMicro(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromTimestampMicro(-1),\n\t\t\twant:   \"1970-01-01 07:59:59.999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromTimestampMicro(0),\n\t\t\twant:   \"1970-01-01 08:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromTimestampMicro(1),\n\t\t\twant:   \"1970-01-01 08:00:00.000001 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: CreateFromTimestampMicro(1649735755981566, PRC),\n\t\t\twant:   \"2022-04-12 11:55:55.981566 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromTimestampMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromTimestampNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromTimestampNano(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromTimestampNano(-1),\n\t\t\twant:   \"1970-01-01 07:59:59.999999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromTimestampNano(0),\n\t\t\twant:   \"1970-01-01 08:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromTimestampNano(1, PRC),\n\t\t\twant:   \"1970-01-01 08:00:00.000000001 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromTimestampNano()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromDateTime(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromDateTime(0, 0, 0, 0, 0, 0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromDateTime(2020, 1, 1, 13, 14, 15),\n\t\t\twant:   \"2020-01-01 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromDateTime(2020, 1, 31, 13, 14, 15),\n\t\t\twant:   \"2020-01-31 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromDateTime(2020, 2, 1, 13, 14, 15, PRC),\n\t\t\twant:   \"2020-02-01 13:14:15\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(), \"CreateFromDateTime()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromDateTimeMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromDateTimeMilli(0, 0, 0, 0, 0, 0, 0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromDateTimeMilli(2020, 1, 1, 13, 14, 15, 999),\n\t\t\twant:   \"2020-01-01 13:14:15.999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromDateTimeMilli(2020, 1, 31, 13, 14, 15, 999),\n\t\t\twant:   \"2020-01-31 13:14:15.999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromDateTimeMilli(2020, 2, 1, 13, 14, 15, 999),\n\t\t\twant:   \"2020-02-01 13:14:15.999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromDateTimeMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromDateTimeMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromDateTimeMicro(0, 0, 0, 0, 0, 0, 0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromDateTimeMicro(2020, 1, 1, 13, 14, 15, 999999),\n\t\t\twant:   \"2020-01-01 13:14:15.999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromDateTimeMicro(2020, 1, 31, 13, 14, 15, 999999),\n\t\t\twant:   \"2020-01-31 13:14:15.999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromDateTimeMicro(2020, 2, 1, 13, 14, 15, 999999),\n\t\t\twant:   \"2020-02-01 13:14:15.999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromDateTimeMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromDateTimeNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromDateTimeNano(0, 0, 0, 0, 0, 0, 0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromDateTimeNano(2020, 1, 1, 13, 14, 15, 999999999),\n\t\t\twant:   \"2020-01-01 13:14:15.999999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromDateTimeNano(2020, 1, 31, 13, 14, 15, 999999999),\n\t\t\twant:   \"2020-01-31 13:14:15.999999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromDateTimeNano(2020, 2, 1, 13, 14, 15, 999999999),\n\t\t\twant:   \"2020-02-01 13:14:15.999999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromDateTimeNano()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromDate(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromDate(0, 0, 0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromDate(2020, 1, 1),\n\t\t\twant:   \"2020-01-01 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromDate(2020, 1, 31),\n\t\t\twant:   \"2020-01-31 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromDate(2020, 2, 1),\n\t\t\twant:   \"2020-02-01 00:00:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromDate()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromDateMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromDateMilli(0, 0, 0, 0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromDateMilli(2020, 1, 1, 999),\n\t\t\twant:   \"2020-01-01 00:00:00.999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromDateMilli(2020, 1, 31, 999),\n\t\t\twant:   \"2020-01-31 00:00:00.999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromDateMilli(2020, 2, 1, 999),\n\t\t\twant:   \"2020-02-01 00:00:00.999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromDateMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromDateMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromDateMicro(0, 0, 0, 0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromDateMicro(2020, 1, 1, 999999),\n\t\t\twant:   \"2020-01-01 00:00:00.999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromDateMicro(2020, 1, 31, 999999),\n\t\t\twant:   \"2020-01-31 00:00:00.999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromDateMicro(2020, 2, 1, 999999),\n\t\t\twant:   \"2020-02-01 00:00:00.999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromDateMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromDateNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"xxx\").CreateFromDateNano(0, 0, 0, 0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromDateNano(2020, 1, 1, 999999999),\n\t\t\twant:   \"2020-01-01 00:00:00.999999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromDateNano(2020, 1, 31, 999999999),\n\t\t\twant:   \"2020-01-31 00:00:00.999999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromDateNano(2020, 2, 1, 999999999),\n\t\t\twant:   \"2020-02-01 00:00:00.999999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"CreateFromDateNano()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromTime(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   Carbon\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: CreateFromTime(0, 0, 0),\n\t\t\twant:   Now().SetTime(0, 0, 0),\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromTime(0, 0, 15),\n\t\t\twant:   Now().SetTime(0, 0, 15),\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromTime(0, 14, 15),\n\t\t\twant:   Now().SetTime(0, 14, 15),\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromTime(13, 14, 15),\n\t\t\twant:   Now().SetTime(13, 14, 15),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want.ToTimeString(), tt.carbon.ToTimeString(), \"CreateFromTime()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromTimeMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   Carbon\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: CreateFromTimeMilli(0, 0, 0, 999),\n\t\t\twant:   Now().SetTimeMilli(0, 0, 0, 999),\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromTimeMilli(0, 0, 15, 999),\n\t\t\twant:   Now().SetTimeMilli(0, 0, 15, 999),\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromTimeMilli(0, 14, 15, 999),\n\t\t\twant:   Now().SetTimeMilli(0, 14, 15, 999),\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromTimeMilli(13, 14, 15, 999),\n\t\t\twant:   Now().SetTimeMilli(13, 14, 15, 999),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want.ToTimeMilliString(), tt.carbon.ToTimeMilliString(), \"CreateFromTimeMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromTimeMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   Carbon\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: CreateFromTimeMicro(0, 0, 0, 999999),\n\t\t\twant:   Now().SetTimeMicro(0, 0, 0, 999999),\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromTimeMicro(0, 0, 15, 999999),\n\t\t\twant:   Now().SetTimeMicro(0, 0, 15, 999999),\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromTimeMicro(0, 14, 15, 999999),\n\t\t\twant:   Now().SetTimeMicro(0, 14, 15, 999999),\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromTimeMicro(13, 14, 15, 999999),\n\t\t\twant:   Now().SetTimeMicro(13, 14, 15, 999999),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want.ToTimeMilliString(), tt.carbon.ToTimeMilliString(), \"CreateFromTimeMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_CreateFromTimeNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   Carbon\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: CreateFromTimeNano(0, 0, 0, 999999999),\n\t\t\twant:   Now().SetTimeNano(0, 0, 0, 999999999),\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: CreateFromTimeNano(0, 0, 15, 999999999),\n\t\t\twant:   Now().SetTimeNano(0, 0, 15, 999999999),\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: CreateFromTimeNano(0, 14, 15, 999999999),\n\t\t\twant:   Now().SetTimeNano(0, 14, 15, 999999999),\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: CreateFromTimeNano(13, 14, 15, 999999999),\n\t\t\twant:   Now().SetTimeNano(13, 14, 15, 999999999),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want.ToTimeNanoString(), tt.carbon.ToTimeNanoString(), \"CreateFromTimeMicro()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "database.go",
          "type": "blob",
          "size": 23.8681640625,
          "content": "package carbon\n\nimport (\n\t\"bytes\"\n\t\"database/sql/driver\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"time\"\n)\n\n// returns a failed scan error.\n// 失败的扫描错误\nvar failedScanError = func(src interface{}) error {\n\treturn fmt.Errorf(\"failed to scan value: %v\", src)\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (c *Carbon) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*c = Parse(string(v))\n\tcase string:\n\t\t*c = Parse(v)\n\tcase time.Time:\n\t\t*c = CreateFromStdTime(v)\n\t}\n\tif c.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (c Carbon) Value() (driver.Value, error) {\n\tif c.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn c.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for Carbon struct.\n// 实现 json.Marshaler 接口\nfunc (c Carbon) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, c.Layout(c.layout))), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for Carbon struct.\n// 实现 json.Unmarshaler 接口\nfunc (c *Carbon) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\t*c = ParseByLayout(value, c.layout)\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *DateTime) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewDateTime(Parse(string(v)))\n\tcase string:\n\t\t*t = NewDateTime(Parse(v))\n\tcase time.Time:\n\t\t*t = NewDateTime(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t DateTime) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for DateTime struct.\n// 实现 MarshalJSON 接口\nfunc (t DateTime) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToDateTimeString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for DateTime struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *DateTime) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tc := ParseByLayout(value, DateTimeLayout)\n\tif c.Error == nil {\n\t\t*t = NewDateTime(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *DateTimeMilli) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewDateTimeMilli(Parse(string(v)))\n\tcase string:\n\t\t*t = NewDateTimeMilli(Parse(v))\n\tcase time.Time:\n\t\t*t = NewDateTimeMilli(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t DateTimeMilli) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for DateTimeMilli struct.\n// 实现 MarshalJSON 接口\nfunc (t DateTimeMilli) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToDateTimeMilliString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for DateTimeMilli struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *DateTimeMilli) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tc := ParseByLayout(value, DateTimeMilliLayout)\n\tif c.Error == nil {\n\t\t*t = NewDateTimeMilli(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *DateTimeMicro) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewDateTimeMicro(Parse(string(v)))\n\tcase string:\n\t\t*t = NewDateTimeMicro(Parse(v))\n\tcase time.Time:\n\t\t*t = NewDateTimeMicro(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t DateTimeMicro) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for DateTimeMicro struct.\n// 实现 MarshalJSON 接口\nfunc (t DateTimeMicro) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToDateTimeMicroString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for DateTimeMicro struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *DateTimeMicro) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tc := ParseByLayout(value, DateTimeMicroLayout)\n\tif c.Error == nil {\n\t\t*t = NewDateTimeMicro(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *DateTimeNano) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewDateTimeNano(Parse(string(v)))\n\tcase string:\n\t\t*t = NewDateTimeNano(Parse(v))\n\tcase time.Time:\n\t\t*t = NewDateTimeNano(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t DateTimeNano) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for DateTimeNano struct.\n// 实现 MarshalJSON 接口\nfunc (t DateTimeNano) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToDateTimeNanoString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for DateTimeNano struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *DateTimeNano) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tc := ParseByLayout(value, DateTimeNanoLayout)\n\tif c.Error == nil {\n\t\t*t = NewDateTimeNano(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *Date) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewDate(Parse(string(v)))\n\tcase string:\n\t\t*t = NewDate(Parse(v))\n\tcase time.Time:\n\t\t*t = NewDate(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t Date) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for Date struct.\n// 实现 MarshalJSON 接口\nfunc (t Date) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToDateString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for Date struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *Date) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tc := ParseByLayout(value, DateLayout)\n\tif c.Error == nil {\n\t\t*t = NewDate(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *DateMilli) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewDateMilli(Parse(string(v)))\n\tcase string:\n\t\t*t = NewDateMilli(Parse(v))\n\tcase time.Time:\n\t\t*t = NewDateMilli(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t DateMilli) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for DateMilli struct.\n// 实现 MarshalJSON 接口\nfunc (t DateMilli) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToDateMilliString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for DateMilli struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *DateMilli) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tc := ParseByLayout(value, DateMilliLayout)\n\tif c.Error == nil {\n\t\t*t = NewDateMilli(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *DateMicro) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewDateMicro(Parse(string(v)))\n\tcase string:\n\t\t*t = NewDateMicro(Parse(v))\n\tcase time.Time:\n\t\t*t = NewDateMicro(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t DateMicro) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for DateMicro struct.\n// 实现 MarshalJSON 接口\nfunc (t DateMicro) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToDateMicroString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for DateMicro struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *DateMicro) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tc := ParseByLayout(value, DateMicroLayout)\n\tif c.Error == nil {\n\t\t*t = NewDateMicro(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *DateNano) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewDateNano(Parse(string(v)))\n\tcase string:\n\t\t*t = NewDateNano(Parse(v))\n\tcase time.Time:\n\t\t*t = NewDateNano(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t DateNano) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for DateNano struct.\n// 实现 MarshalJSON 接口\nfunc (t DateNano) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToDateNanoString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for DateNano struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *DateNano) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tc := ParseByLayout(value, DateNanoLayout)\n\tif c.Error == nil {\n\t\t*t = NewDateNano(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *Time) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewTime(Parse(string(v)))\n\tcase string:\n\t\t*t = NewTime(Parse(v))\n\tcase time.Time:\n\t\t*t = NewTime(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t Time) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for Time struct.\n// 实现 MarshalJSON 接口\nfunc (t Time) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToTimeString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for Time struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *Time) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tyear, month, day := Now().Date()\n\tc := ParseByLayout(fmt.Sprintf(\"%04d-%02d-%02d %s\", year, month, day, value), DateTimeLayout)\n\tfmt.Println(\"c\", c)\n\tif c.Error == nil {\n\t\t*t = NewTime(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *TimeMilli) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewTimeMilli(Parse(string(v)))\n\tcase string:\n\t\t*t = NewTimeMilli(Parse(v))\n\tcase time.Time:\n\t\t*t = NewTimeMilli(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t TimeMilli) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for TimeMilli struct.\n// 实现 MarshalJSON 接口\nfunc (t TimeMilli) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToTimeMilliString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for TimeMilli struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *TimeMilli) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tyear, month, day := Now().Date()\n\tc := ParseByLayout(fmt.Sprintf(\"%04d-%02d-%02d %s\", year, month, day, value), DateTimeMilliLayout)\n\tif c.Error == nil {\n\t\t*t = NewTimeMilli(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *TimeMicro) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewTimeMicro(Parse(string(v)))\n\tcase string:\n\t\t*t = NewTimeMicro(Parse(v))\n\tcase time.Time:\n\t\t*t = NewTimeMicro(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t TimeMicro) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for TimeMicro struct.\n// 实现 MarshalJSON 接口\nfunc (t TimeMicro) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToTimeMicroString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for TimeMicro struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *TimeMicro) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tyear, month, day := Now().Date()\n\tc := ParseByLayout(fmt.Sprintf(\"%04d-%02d-%02d %s\", year, month, day, value), DateTimeMicroLayout)\n\tif c.Error == nil {\n\t\t*t = NewTimeMicro(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *TimeNano) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewTimeNano(Parse(string(v)))\n\tcase string:\n\t\t*t = NewTimeNano(Parse(v))\n\tcase time.Time:\n\t\t*t = NewTimeNano(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t TimeNano) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for TimeNano struct.\n// 实现 MarshalJSON 接口\nfunc (t TimeNano) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`\"%s\"`, t.ToTimeNanoString())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for TimeNano struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *TimeNano) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tyear, month, day := Now().Date()\n\tc := ParseByLayout(fmt.Sprintf(\"%04d-%02d-%02d %s\", year, month, day, value), DateTimeNanoLayout)\n\tif c.Error == nil {\n\t\t*t = NewTimeNano(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *Timestamp) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewTimestamp(Parse(string(v)))\n\tcase string:\n\t\t*t = NewTimestamp(Parse(v))\n\tcase time.Time:\n\t\t*t = NewTimestamp(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t Timestamp) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for Timestamp struct.\n// 实现 MarshalJSON 接口\nfunc (t Timestamp) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`%d`, t.Timestamp())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for Timestamp struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *Timestamp) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tts, _ := strconv.ParseInt(value, 10, 64)\n\tc := CreateFromTimestamp(ts)\n\tif c.Error == nil {\n\t\t*t = NewTimestamp(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *TimestampMilli) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewTimestampMilli(Parse(string(v)))\n\tcase string:\n\t\t*t = NewTimestampMilli(Parse(v))\n\tcase time.Time:\n\t\t*t = NewTimestampMilli(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t TimestampMilli) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for TimestampMilli struct.\n// 实现 MarshalJSON 接口\nfunc (t TimestampMilli) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`%d`, t.TimestampMilli())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for TimestampMilli struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *TimestampMilli) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tts, _ := strconv.ParseInt(value, 10, 64)\n\tc := CreateFromTimestampMilli(ts)\n\tif c.Error == nil {\n\t\t*t = NewTimestampMilli(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *TimestampMicro) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewTimestampMicro(Parse(string(v)))\n\tcase string:\n\t\t*t = NewTimestampMicro(Parse(v))\n\tcase time.Time:\n\t\t*t = NewTimestampMicro(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t TimestampMicro) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface MarshalJSON for TimestampMicro struct.\n// 实现 MarshalJSON 接口\nfunc (t TimestampMicro) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`%d`, t.TimestampMicro())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for TimestampMicro struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *TimestampMicro) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tts, _ := strconv.ParseInt(value, 10, 64)\n\tc := CreateFromTimestampMicro(ts)\n\tif c.Error == nil {\n\t\t*t = NewTimestampMicro(c)\n\t}\n\treturn c.Error\n}\n\n// Scan an interface used by Scan in package database/sql for Scanning value from database to local golang variable.\nfunc (t *TimestampNano) Scan(src interface{}) error {\n\tswitch v := src.(type) {\n\tcase []byte:\n\t\t*t = NewTimestampNano(Parse(string(v)))\n\tcase string:\n\t\t*t = NewTimestampNano(Parse(v))\n\tcase time.Time:\n\t\t*t = NewTimestampNano(CreateFromStdTime(v))\n\t}\n\tif t.Error == nil {\n\t\treturn nil\n\t}\n\treturn failedScanError(src)\n}\n\n// Value the interface providing the Value method for package database/sql/driver.\nfunc (t TimestampNano) Value() (driver.Value, error) {\n\tif t.IsZero() {\n\t\treturn nil, nil\n\t}\n\treturn t.StdTime(), nil\n}\n\n// MarshalJSON implements the interface json.Marshal for TimestampNano struct.\n// 实现 MarshalJSON 接口\nfunc (t TimestampNano) MarshalJSON() ([]byte, error) {\n\treturn []byte(fmt.Sprintf(`%d`, t.TimestampNano())), nil\n}\n\n// UnmarshalJSON implements the interface json.Unmarshal for TimestampNano struct.\n// 实现 UnmarshalJSON 接口\nfunc (t *TimestampNano) UnmarshalJSON(b []byte) error {\n\tvalue := string(bytes.Trim(b, `\"`))\n\tif value == \"\" || value == \"null\" {\n\t\treturn nil\n\t}\n\tts, _ := strconv.ParseInt(value, 10, 64)\n\tc := CreateFromTimestampNano(ts)\n\tif c.Error == nil {\n\t\t*t = NewTimestampNano(c)\n\t}\n\treturn c.Error\n}\n\n// Int64 outputs timestamp with second.\n// 输出秒级时间戳\nfunc (t Timestamp) Int64() int64 {\n\treturn t.Timestamp()\n}\n\n// Int64 outputs timestamp with millisecond.\n// 输出豪秒级时间戳\nfunc (t TimestampMilli) Int64() int64 {\n\treturn t.TimestampMilli()\n}\n\n// Int64 outputs timestamp with microsecond.\n// 输出微秒级时间戳\nfunc (t TimestampMicro) Int64() int64 {\n\treturn t.TimestampMicro()\n}\n\n// Int64 outputs timestamp with nanosecond.\n// 输出纳秒级时间戳\nfunc (t TimestampNano) Int64() int64 {\n\treturn t.TimestampNano()\n}\n\n// String implements the interface Stringer for DateTime struct.\n// 实现 Stringer 接口\nfunc (t DateTime) String() string {\n\treturn t.ToDateTimeString()\n}\n\n// String implements the interface Stringer for DateTimeMilli struct.\n// 实现 Stringer 接口\nfunc (t DateTimeMilli) String() string {\n\treturn t.ToDateTimeMilliString()\n}\n\n// String implements the interface Stringer for DateTimeMicro struct.\n// 实现 Stringer 接口\nfunc (t DateTimeMicro) String() string {\n\treturn t.ToDateTimeMicroString()\n}\n\n// String implements the interface Stringer for DateTimeNano struct.\n// 实现 Stringer 接口\nfunc (t DateTimeNano) String() string {\n\treturn t.ToDateTimeNanoString()\n}\n\n// String implements the interface Stringer for Date struct.\n// 实现 Stringer 接口\nfunc (t Date) String() string {\n\treturn t.ToDateString()\n}\n\n// String implements the interface Stringer for DateMilli struct.\n// 实现 Stringer 接口\nfunc (t DateMilli) String() string {\n\treturn t.ToDateMilliString()\n}\n\n// String implements the interface Stringer for DateMicro struct.\n// 实现 Stringer 接口\nfunc (t DateMicro) String() string {\n\treturn t.ToDateMicroString()\n}\n\n// String implements the interface Stringer for DateNano struct.\n// 实现 Stringer 接口\nfunc (t DateNano) String() string {\n\treturn t.ToDateNanoString()\n}\n\n// String implements the interface Stringer for Time struct.\n// 实现 Stringer 接口\nfunc (t Time) String() string {\n\treturn t.ToTimeString()\n}\n\n// String implements the interface Stringer for TimeMilli struct.\n// 实现 Stringer 接口\nfunc (t TimeMilli) String() string {\n\treturn t.ToTimeMilliString()\n}\n\n// String implements the interface Stringer for TimeMicro struct.\n// 实现 Stringer 接口\nfunc (t TimeMicro) String() string {\n\treturn t.ToTimeMicroString()\n}\n\n// String implements the interface Stringer for TimeNano struct.\n// 实现 Stringer 接口\nfunc (t TimeNano) String() string {\n\treturn t.ToTimeNanoString()\n}\n\n// String implements the interface Stringer for Timestamp struct.\n// 实现 Stringer 接口\nfunc (t Timestamp) String() string {\n\treturn strconv.FormatInt(t.Timestamp(), 10)\n}\n\n// String implements the interface Stringer for TimestampMilli struct.\n// 实现 Stringer 接口\nfunc (t TimestampMilli) String() string {\n\treturn strconv.FormatInt(t.TimestampMilli(), 10)\n}\n\n// String implements the interface Stringer for TimestampMicro struct.\n// 实现 Stringer 接口\nfunc (t TimestampMicro) String() string {\n\treturn strconv.FormatInt(t.TimestampMicro(), 10)\n}\n\n// String implements the interface Stringer for TimestampNano struct.\n// 实现 Stringer 接口\nfunc (t TimestampNano) String() string {\n\treturn strconv.FormatInt(t.TimestampNano(), 10)\n}\n"
        },
        {
          "name": "database_bench_test.go",
          "type": "blob",
          "size": 7.7353515625,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_Scan(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkCarbon_Value(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkDateTime_Scan(b *testing.B) {\n\tnow := NewDateTime(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkDateTime_Value(b *testing.B) {\n\tnow := NewDateTime(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkDateTimeMilli_Scan(b *testing.B) {\n\tnow := NewDateTimeMilli(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkDateTimeMilli_Value(b *testing.B) {\n\tnow := NewDateTimeMilli(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewDateTimeMicro_Scan(b *testing.B) {\n\tnow := NewDateTimeMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkDateTimeMicro_Value(b *testing.B) {\n\tnow := NewDateTimeMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewDateTimeNano_Scan(b *testing.B) {\n\tnow := NewDateTimeNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkDateTimeNano_Value(b *testing.B) {\n\tnow := NewDateTimeNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewDate_Scan(b *testing.B) {\n\tnow := NewDate(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkDate_Value(b *testing.B) {\n\tnow := NewDate(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewDateMilli_Scan(b *testing.B) {\n\tnow := NewDateMilli(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkDateMilli_Value(b *testing.B) {\n\tnow := NewDateMilli(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewDateMicro_Scan(b *testing.B) {\n\tnow := NewDateMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkNewDateMicro_Value(b *testing.B) {\n\tnow := NewDateMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewDateNano_Scan(b *testing.B) {\n\tnow := NewDateNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkNewDateNano_Value(b *testing.B) {\n\tnow := NewDateNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewTime_Scan(b *testing.B) {\n\tnow := NewTime(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkNewTime_Value(b *testing.B) {\n\tnow := NewTime(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewTimeMilli_Scan(b *testing.B) {\n\tnow := NewTimeMilli(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkNewTimeMilli_Value(b *testing.B) {\n\tnow := NewTimeMilli(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewTimeMicro_Scan(b *testing.B) {\n\tnow := NewTimeMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkNewTimeMicro_Value(b *testing.B) {\n\tnow := NewTimeMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewTimeNano_Scan(b *testing.B) {\n\tnow := NewTimeNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkNewTimeNano_Value(b *testing.B) {\n\tnow := NewTimeNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewTimestamp_Scan(b *testing.B) {\n\tnow := NewTimestamp(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkNewTimestamp_Value(b *testing.B) {\n\tnow := NewTimestamp(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewTimestampMilli_Scan(b *testing.B) {\n\tnow := NewTimestampMilli(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkNewTimestampMilli_Value(b *testing.B) {\n\tnow := NewTimestampMilli(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkNewTimestampNano_Scan(b *testing.B) {\n\tnow := NewTimestampNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = now.Scan(nil)\n\t}\n}\n\nfunc BenchmarkNewTimestampNano_Value(b *testing.B) {\n\tnow := NewTimestampNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Value()\n\t}\n}\n\nfunc BenchmarkCarbon_MarshalJSON(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkCarbon_UnmarshalJSON(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkDateTime_MarshalJSON(b *testing.B) {\n\tnow := NewDateTime(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkDateTime_UnmarshalJSON(b *testing.B) {\n\tnow := NewDateTime(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkDateTimeMilli_MarshalJSON(b *testing.B) {\n\tnow := NewDateTimeMilli(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkDateTimeMilli_UnmarshalJSON(b *testing.B) {\n\tnow := NewDateTimeMilli(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkDateTimeMicro_MarshalJSON(b *testing.B) {\n\tnow := NewDateTimeMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkDateTimeMicro_UnmarshalJSON(b *testing.B) {\n\tnow := NewDateTimeMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkDateTimeNano_MarshalJSON(b *testing.B) {\n\tnow := NewDateTimeNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkDateTimeNano_UnmarshalJSON(b *testing.B) {\n\tnow := NewDateTimeNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkDate_MarshalJSON(b *testing.B) {\n\tnow := NewDate(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkDate_UnmarshalJSON(b *testing.B) {\n\tnow := NewDate(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkDateMicro_MarshalJSON(b *testing.B) {\n\tnow := NewDateMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkDateMicro_UnmarshalJSON(b *testing.B) {\n\tnow := NewDateMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkDateNano_MarshalJSON(b *testing.B) {\n\tnow := NewDateNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkDateNano_UnmarshalJSON(b *testing.B) {\n\tnow := NewDateNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkTime_MarshalJSON(b *testing.B) {\n\tnow := NewTime(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkTime_UnmarshalJSON(b *testing.B) {\n\tnow := NewTime(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkTimeMicro_MarshalJSON(b *testing.B) {\n\tnow := NewTimeMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkTimeMicro_UnmarshalJSON(b *testing.B) {\n\tnow := NewTimeMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkTimeNano_MarshalJSON(b *testing.B) {\n\tnow := NewTimeNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkTimeNano_UnmarshalJSON(b *testing.B) {\n\tnow := NewTimeNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkTimestamp_MarshalJSON(b *testing.B) {\n\tnow := NewTimestamp(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkTimestamp_UnmarshalJSON(b *testing.B) {\n\tnow := NewTimestamp(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkTimestampMicro_MarshalJSON(b *testing.B) {\n\tnow := NewTimestampMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkTimestampMicro_UnmarshalJSON(b *testing.B) {\n\tnow := NewTimestampMicro(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n\nfunc BenchmarkTimestampNano_MarshalJSON(b *testing.B) {\n\tnow := NewTimestampNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MarshalJSON()\n\t}\n}\n\nfunc BenchmarkTimestampNano_UnmarshalJSON(b *testing.B) {\n\tnow := NewTimestampNano(Now())\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.UnmarshalJSON(nil)\n\t}\n}\n"
        },
        {
          "name": "database_unit_test.go",
          "type": "blob",
          "size": 19.314453125,
          "content": "package carbon\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestCarbon_Scan(t *testing.T) {\n\tc := NewCarbon()\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestCarbon_Value(t *testing.T) {\n\tc := Now()\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestDateTime_Scan(t *testing.T) {\n\tc := NewDateTime(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestDateTime_Value(t *testing.T) {\n\tc := NewDateTime(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestDateTimeMilli_Scan(t *testing.T) {\n\tc := NewDateTimeMilli(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestDateTimeMilli_Value(t *testing.T) {\n\tc := NewDateTimeMilli(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestDateTimeMicro_Scan(t *testing.T) {\n\tc := NewDateTimeMicro(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestDateTimeMicro_Value(t *testing.T) {\n\tc := NewDateTimeMicro(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestDateTimeNano_Scan(t *testing.T) {\n\tc := NewDateTimeNano(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestDateTimeNano_Value(t *testing.T) {\n\tc := NewDateTimeNano(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestDate_Scan(t *testing.T) {\n\tc := NewDate(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestDate_Value(t *testing.T) {\n\tc := NewDate(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestDateMilli_Scan(t *testing.T) {\n\tc := NewDateMilli(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestDateMilli_Value(t *testing.T) {\n\tc := NewDateMilli(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestDateMicro_Scan(t *testing.T) {\n\tc := NewDateMicro(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestDateMicro_Value(t *testing.T) {\n\tc := NewDateMicro(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestDateNano_Scan(t *testing.T) {\n\tc := NewDateNano(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestDateNano_Value(t *testing.T) {\n\tc := NewDateNano(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestTime_Scan(t *testing.T) {\n\tc := NewTime(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestTime_Value(t *testing.T) {\n\tc := NewTime(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestTimeMilli_Scan(t *testing.T) {\n\tc := NewTimeMilli(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestTimeMilli_Value(t *testing.T) {\n\tc := NewTimeMilli(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestTimeMicro_Scan(t *testing.T) {\n\tc := NewTimeMicro(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestTimeMicro_Value(t *testing.T) {\n\tc := NewTimeMicro(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestTimeNano_Scan(t *testing.T) {\n\tc := NewTimeNano(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestTimeNano_Value(t *testing.T) {\n\tc := NewTimeNano(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestTimestamp_Scan(t *testing.T) {\n\tc := NewTimestamp(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestTimestamp_Value(t *testing.T) {\n\tc := NewTimestamp(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestTimestampMilli_Scan(t *testing.T) {\n\tc := NewTimestampMilli(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestTimestampMilli_Value(t *testing.T) {\n\tc := NewTimestampMilli(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestTimestampMicro_Scan(t *testing.T) {\n\tc := NewTimestampMicro(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestTimestampMicro_Value(t *testing.T) {\n\tc := NewTimestampMicro(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestTimestampNano_Scan(t *testing.T) {\n\tc := NewTimestampNano(Now())\n\n\te1 := c.Scan(Now().ToDateString())\n\trequire.NoError(t, e1)\n\n\te2 := c.Scan([]byte(Now().ToDateString()))\n\trequire.NoError(t, e2)\n\n\te3 := c.Scan(time.Now())\n\trequire.NoError(t, e3)\n}\n\nfunc TestTimestampNano_Value(t *testing.T) {\n\tc := NewTimestampNano(Now())\n\tv, err := c.Value()\n\trequire.NoError(t, err)\n\tassert.Equal(t, v, c.time)\n}\n\nfunc TestError_Scan(t *testing.T) {\n\tstr := \"xxxx\"\n\n\tc1 := NewCarbon()\n\te1 := c1.Scan(str)\n\tassert.Equal(t, e1, failedScanError(str))\n\n\tc2 := NewDateTime(Now())\n\te2 := c2.Scan(str)\n\tassert.Equal(t, e2, failedScanError(str))\n\n\tc3 := NewDateTimeMilli(Now())\n\te3 := c3.Scan(str)\n\tassert.Equal(t, e3, failedScanError(str))\n\n\tc4 := NewDateTimeMicro(Now())\n\te4 := c4.Scan(str)\n\tassert.Equal(t, e4, failedScanError(str))\n\n\tc5 := NewDateTimeNano(Now())\n\te5 := c5.Scan(str)\n\tassert.Equal(t, e5, failedScanError(str))\n\n\tc6 := NewDate(Now())\n\te6 := c6.Scan(str)\n\tassert.Equal(t, e6, failedScanError(str))\n\n\tc7 := NewDateMilli(Now())\n\te7 := c7.Scan(str)\n\tassert.Equal(t, e7, failedScanError(str))\n\n\tc8 := NewDateMicro(Now())\n\te8 := c8.Scan(str)\n\tassert.Equal(t, e8, failedScanError(str))\n\n\tc9 := NewDateNano(Now())\n\te9 := c9.Scan(str)\n\tassert.Equal(t, e9, failedScanError(str))\n\n\tc10 := NewTime(Now())\n\te10 := c10.Scan(str)\n\tassert.Equal(t, e10, failedScanError(str))\n\n\tc11 := NewTimeMilli(Now())\n\te11 := c11.Scan(str)\n\tassert.Equal(t, e11, failedScanError(str))\n\n\tc12 := NewTimeMicro(Now())\n\te12 := c12.Scan(str)\n\tassert.Equal(t, e12, failedScanError(str))\n\n\tc13 := NewTimeNano(Now())\n\te13 := c13.Scan(str)\n\tassert.Equal(t, e13, failedScanError(str))\n\n\tc14 := NewTimestamp(Now())\n\te14 := c14.Scan(str)\n\tassert.Equal(t, e14, failedScanError(str))\n\n\tc15 := NewTimestampMilli(Now())\n\te15 := c15.Scan(str)\n\tassert.Equal(t, e15, failedScanError(str))\n\n\tc16 := NewTimestampMicro(Now())\n\te16 := c16.Scan(str)\n\tassert.Equal(t, e16, failedScanError(str))\n\n\tc17 := NewTimestampNano(Now())\n\te17 := c17.Scan(str)\n\tassert.Equal(t, e17, failedScanError(str))\n}\n\nfunc TestError_Value(t *testing.T) {\n\tc1 := Parse(\"\")\n\tv1, e1 := c1.Value()\n\trequire.NoError(t, e1)\n\tassert.Nil(t, v1)\n\n\tc2 := NewDateTime(c1)\n\tv2, e2 := c2.Value()\n\trequire.NoError(t, e2)\n\tassert.Nil(t, v2)\n\n\tc3 := NewDateTimeMilli(c1)\n\tv3, e3 := c3.Value()\n\trequire.NoError(t, e3)\n\tassert.Nil(t, v3)\n\n\tc4 := NewDateTimeMicro(c1)\n\tv4, e4 := c4.Value()\n\trequire.NoError(t, e4)\n\tassert.Nil(t, v4)\n\n\tc5 := NewDateTimeNano(c1)\n\tv5, e5 := c5.Value()\n\trequire.NoError(t, e5)\n\tassert.Nil(t, v5)\n\n\tc6 := NewDate(c1)\n\tv6, e6 := c6.Value()\n\trequire.NoError(t, e6)\n\tassert.Nil(t, v6)\n\n\tc7 := NewDateMilli(c1)\n\tv7, e7 := c7.Value()\n\trequire.NoError(t, e7)\n\tassert.Nil(t, v7)\n\n\tc8 := NewDateMicro(c1)\n\tv8, e8 := c8.Value()\n\trequire.NoError(t, e8)\n\tassert.Nil(t, v8)\n\n\tc9 := NewDateNano(c1)\n\tv9, e9 := c9.Value()\n\trequire.NoError(t, e9)\n\tassert.Nil(t, v9)\n\n\tc10 := NewTime(c1)\n\tv10, e10 := c10.Value()\n\trequire.NoError(t, e10)\n\tassert.Nil(t, v10)\n\n\tc11 := NewTimeMilli(c1)\n\tv11, e11 := c11.Value()\n\trequire.NoError(t, e11)\n\tassert.Nil(t, v11)\n\n\tc12 := NewTimeMicro(c1)\n\tv12, e12 := c12.Value()\n\trequire.NoError(t, e12)\n\tassert.Nil(t, v12)\n\n\tc13 := NewTimeNano(c1)\n\tv13, e13 := c13.Value()\n\trequire.NoError(t, e13)\n\tassert.Nil(t, v13)\n\n\tc14 := NewTimestamp(c1)\n\tv14, e14 := c14.Value()\n\trequire.NoError(t, e14)\n\tassert.Nil(t, v14)\n\n\tc15 := NewTimestampMilli(c1)\n\tv15, e15 := c15.Value()\n\trequire.NoError(t, e15)\n\tassert.Nil(t, v15)\n\n\tc16 := NewTimestampMicro(c1)\n\tv16, e16 := c16.Value()\n\trequire.NoError(t, e16)\n\tassert.Nil(t, v16)\n\n\tc17 := NewTimestampNano(c1)\n\tv17, e17 := c17.Value()\n\trequire.NoError(t, e17)\n\tassert.Nil(t, v17)\n}\n\ntype Person struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n\n\tBirthday1 Carbon `json:\"birthday1\"`\n\n\tBirthday2 DateTime      `json:\"birthday2\"`\n\tBirthday3 DateTimeMilli `json:\"birthday3\"`\n\tBirthday4 DateTimeMicro `json:\"birthday4\"`\n\tBirthday5 DateTimeNano  `json:\"birthday5\"`\n\n\tBirthday6 Date      `json:\"birthday6\"`\n\tBirthday7 DateMilli `json:\"birthday7\"`\n\tBirthday8 DateMicro `json:\"birthday8\"`\n\tBirthday9 DateNano  `json:\"birthday9\"`\n\n\tBirthday10 Time      `json:\"birthday10\"`\n\tBirthday11 TimeMilli `json:\"birthday11\"`\n\tBirthday12 TimeMicro `json:\"birthday12\"`\n\tBirthday13 TimeNano  `json:\"birthday13\"`\n\n\tBirthday14 Timestamp      `json:\"birthday14\"`\n\tBirthday15 TimestampMilli `json:\"birthday15\"`\n\tBirthday16 TimestampMicro `json:\"birthday16\"`\n\tBirthday17 TimestampNano  `json:\"birthday17\"`\n}\n\nfunc TestCarbon_MarshalJSON(t *testing.T) {\n\tvar c = Parse(\"2020-08-05 13:14:15.999999999\", PRC)\n\tvar person = Person{\n\t\tName: \"gouguoyin\",\n\t\tAge:  18,\n\n\t\tBirthday1: c,\n\t\tBirthday2: NewDateTime(c),\n\t\tBirthday3: NewDateTimeMilli(c),\n\t\tBirthday4: NewDateTimeMicro(c),\n\t\tBirthday5: NewDateTimeNano(c),\n\n\t\tBirthday6: NewDate(c),\n\t\tBirthday7: NewDateMilli(c),\n\t\tBirthday8: NewDateMicro(c),\n\t\tBirthday9: NewDateNano(c),\n\n\t\tBirthday10: NewTime(c),\n\t\tBirthday11: NewTimeMilli(c),\n\t\tBirthday12: NewTimeMicro(c),\n\t\tBirthday13: NewTimeNano(c),\n\n\t\tBirthday14: NewTimestamp(c),\n\t\tBirthday15: NewTimestampMilli(c),\n\t\tBirthday16: NewTimestampMicro(c),\n\t\tBirthday17: NewTimestampNano(c),\n\t}\n\n\tdata, marshalErr := json.Marshal(&person)\n\trequire.NoError(t, marshalErr)\n\tfmt.Printf(\"json encode:\\n%s\\n\", data)\n\n\ttests := []struct {\n\t\tname   string\n\t\twant   string\n\t\tactual string\n\t}{\n\t\t{\n\t\t\tname:   \"birthday1\",\n\t\t\tactual: person.Birthday1.String(),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"birthday2\",\n\t\t\tactual: person.Birthday2.String(),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday3\",\n\t\t\tactual: person.Birthday3.String(),\n\t\t\twant:   \"2020-08-05 13:14:15.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday4\",\n\t\t\tactual: person.Birthday4.String(),\n\t\t\twant:   \"2020-08-05 13:14:15.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday5\",\n\t\t\tactual: person.Birthday5.String(),\n\t\t\twant:   \"2020-08-05 13:14:15.999999999\",\n\t\t},\n\n\t\t{\n\t\t\tname:   \"Birthday6\",\n\t\t\tactual: person.Birthday6.String(),\n\t\t\twant:   \"2020-08-05\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday7\",\n\t\t\tactual: person.Birthday7.String(),\n\t\t\twant:   \"2020-08-05.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday8\",\n\t\t\tactual: person.Birthday8.String(),\n\t\t\twant:   \"2020-08-05.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday9\",\n\t\t\tactual: person.Birthday9.String(),\n\t\t\twant:   \"2020-08-05.999999999\",\n\t\t},\n\n\t\t{\n\t\t\tname:   \"Birthday10\",\n\t\t\tactual: person.Birthday10.String(),\n\t\t\twant:   \"13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday11\",\n\t\t\tactual: person.Birthday11.String(),\n\t\t\twant:   \"13:14:15.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday12\",\n\t\t\tactual: person.Birthday12.String(),\n\t\t\twant:   \"13:14:15.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday13\",\n\t\t\tactual: person.Birthday13.String(),\n\t\t\twant:   \"13:14:15.999999999\",\n\t\t},\n\n\t\t{\n\t\t\tname:   \"Birthday14\",\n\t\t\tactual: person.Birthday14.String(),\n\t\t\twant:   \"1596604455\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday15\",\n\t\t\tactual: person.Birthday15.String(),\n\t\t\twant:   \"1596604455999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday16\",\n\t\t\tactual: person.Birthday16.String(),\n\t\t\twant:   \"1596604455999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday17\",\n\t\t\tactual: person.Birthday17.String(),\n\t\t\twant:   \"1596604455999999999\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"json.Marshal()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_UnmarshalJSON(t *testing.T) {\n\tjsonStr := `{\n\t\t\"name\":\"gouguoyin\",\n\t\t\"age\":18,\n        \"birthday1\":\"2020-08-05 13:14:15\",\n\t\t\"Birthday2\":\"2020-08-05 13:14:15\",\n\t\t\"Birthday3\":\"2020-08-05 13:14:15.999\",\n\t\t\"Birthday4\":\"2020-08-05 13:14:15.999999\",\n\t\t\"Birthday5\":\"2020-08-05 13:14:15.999999999\",\n\t\t\"Birthday6\":\"2020-08-05\",\n\t\t\"Birthday7\":\"2020-08-05.999\",\n\t\t\"Birthday8\":\"2020-08-05.999999\",\n\t\t\"Birthday9\":\"2020-08-05.999999999\",\n\t\t\"Birthday10\":\"13:14:15\",\n\t\t\"Birthday11\":\"13:14:15.999\",\n\t\t\"Birthday12\":\"13:14:15.999999\",\n\t\t\"Birthday13\":\"13:14:15.999999999\",\n\t\t\"Birthday14\":1596604455,\n\t\t\"Birthday15\":1596604455999,\n\t\t\"Birthday16\":1596604455999999,\n\t\t\"Birthday17\":1596604455999999999\n\t}`\n\n\tvar person Person\n\tunmarshalErr := json.Unmarshal([]byte(jsonStr), &person)\n\trequire.NoError(t, unmarshalErr)\n\tfmt.Printf(\"json decode:\\n%+v\\n\", person)\n\n\ttests := []struct {\n\t\tname   string\n\t\twant   string\n\t\tactual string\n\t}{\n\t\t{\n\t\t\tname:   \"birthday1\",\n\t\t\tactual: person.Birthday1.String(),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday2\",\n\t\t\tactual: person.Birthday2.String(),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday3\",\n\t\t\tactual: person.Birthday3.String(),\n\t\t\twant:   \"2020-08-05 13:14:15.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday4\",\n\t\t\tactual: person.Birthday4.String(),\n\t\t\twant:   \"2020-08-05 13:14:15.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday5\",\n\t\t\tactual: person.Birthday5.String(),\n\t\t\twant:   \"2020-08-05 13:14:15.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday6\",\n\t\t\tactual: person.Birthday6.String(),\n\t\t\twant:   \"2020-08-05\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday7\",\n\t\t\tactual: person.Birthday7.String(),\n\t\t\twant:   \"2020-08-05.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday8\",\n\t\t\tactual: person.Birthday8.String(),\n\t\t\twant:   \"2020-08-05.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday9\",\n\t\t\tactual: person.Birthday9.String(),\n\t\t\twant:   \"2020-08-05.999999999\",\n\t\t},\n\n\t\t{\n\t\t\tname:   \"Birthday10\",\n\t\t\tactual: person.Birthday10.String(),\n\t\t\twant:   \"13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday11\",\n\t\t\tactual: person.Birthday11.String(),\n\t\t\twant:   \"13:14:15.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday12\",\n\t\t\tactual: person.Birthday12.String(),\n\t\t\twant:   \"13:14:15.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday13\",\n\t\t\tactual: person.Birthday13.String(),\n\t\t\twant:   \"13:14:15.999999999\",\n\t\t},\n\n\t\t{\n\t\t\tname:   \"Birthday14\",\n\t\t\tactual: person.Birthday14.String(),\n\t\t\twant:   \"1596604455\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday15\",\n\t\t\tactual: person.Birthday15.String(),\n\t\t\twant:   \"1596604455999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday16\",\n\t\t\tactual: person.Birthday16.String(),\n\t\t\twant:   \"1596604455999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday17\",\n\t\t\tactual: person.Birthday17.String(),\n\t\t\twant:   \"1596604455999999999\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"json.Unmarshal()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_TimestampToInt64(t *testing.T) {\n\tjsonStr := `{\n\t\t\"Birthday14\":1596604455,\n\t\t\"Birthday15\":1596604455999,\n\t\t\"Birthday16\":1596604455999999,\n\t\t\"Birthday17\":1596604455999999999\n\t}`\n\tvar person Person\n\tunmarshalErr := json.Unmarshal([]byte(jsonStr), &person)\n\trequire.NoError(t, unmarshalErr)\n\tfmt.Printf(\"json decode:\\n%+v\\n\", person)\n\n\ttests := []struct {\n\t\tname   string\n\t\twant   int64\n\t\tactual int64\n\t}{\n\t\t{\n\t\t\tname:   \"Birthday14\",\n\t\t\tactual: person.Birthday14.Int64(),\n\t\t\twant:   1596604455,\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday15\",\n\t\t\tactual: person.Birthday15.Int64(),\n\t\t\twant:   1596604455999,\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday16\",\n\t\t\tactual: person.Birthday16.Int64(),\n\t\t\twant:   1596604455999999,\n\t\t},\n\t\t{\n\t\t\tname:   \"Birthday17\",\n\t\t\tactual: person.Birthday17.Int64(),\n\t\t\twant:   1596604455999999999,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"json.Unmarshal()\")\n\t\t})\n\t}\n}\n\n// https://github.com/dromara/carbon/issues/225\nfunc TestCarbon_Issue225(t *testing.T) {\n\temptyStr := `{\n\t\t\"birthday1\":\"\",\n\t\t\"birthday2\":\"\",\n\t\t\"birthday3\":\"\",\n\t\t\"birthday4\":\"\",\n\t\t\"birthday5\":\"\",\n\t\t\"birthday6\":\"\",\n\t\t\"birthday7\":\"\",\n\t\t\"birthday8\":\"\",\n\t\t\"birthday9\":\"\",\n\t\t\"birthday10\":\"\",\n\t\t\"birthday11\":\"\",\n\t\t\"birthday12\":\"\",\n\t\t\"birthday13\":\"\",\n\t\t\"birthday14\":\"\",\n\t\t\"birthday15\":\"\",\n\t\t\"birthday16\":\"\",\n\t\t\"birthday17\":\"\"\n\t}`\n\tnullStr := `{\n\t\t\"birthday1\":null,\n\t\t\"birthday2\":null,\n\t\t\"birthday3\":null,\n\t\t\"birthday4\":null,\n\t\t\"birthday5\":null,\n\t\t\"birthday6\":null,\n\t\t\"birthday7\":null,\n\t\t\"birthday8\":null,\n\t\t\"birthday9\":null,\n\t\t\"birthday10\":null,\n\t\t\"birthday11\":null,\n\t\t\"birthday12\":null,\n\t\t\"birthday13\":null,\n\t\t\"birthday14\":null,\n\t\t\"birthday15\":null,\n\t\t\"birthday16\":null,\n\t\t\"birthday17\":null\n\t}`\n\n\tvar person Person\n\temptyErr := json.Unmarshal([]byte(emptyStr), &person)\n\trequire.NoError(t, emptyErr)\n\n\tnullErr := json.Unmarshal([]byte(nullStr), &person)\n\trequire.NoError(t, nullErr)\n}\n\n// https://github.com/dromara/carbon/issues/240\nfunc TestCarbon_Issue240(t *testing.T) {\n\tjsonStr := `{\n\t\t\"birthday1\":\"\",\n\t\t\"birthday2\":null\n\t}`\n\n\tvar person Person\n\temptyErr := json.Unmarshal([]byte(jsonStr), &person)\n\trequire.NoError(t, emptyErr)\n\tassert.Equal(t, \"0001-01-01 00:00:00 +0000 UTC\", person.Birthday1.StdTime().String())\n\tassert.Equal(t, \"0001-01-01 00:00:00 +0000 UTC\", person.Birthday2.StdTime().String())\n\tassert.True(t, person.Birthday1.IsZero())\n\tassert.True(t, person.Birthday2.IsZero())\n\tassert.False(t, person.Birthday1.IsValid())\n\tassert.False(t, person.Birthday2.IsValid())\n}\n\n// https://github.com/dromara/carbon/issues/243\nfunc TestCarbon_Issue243(t *testing.T) {\n\tprepareTest(t)\n\n\tSetDefault(Default{\n\t\tLayout:       DateTimeLayout,\n\t\tTimezone:     PRC,\n\t\tLocale:       \"en\",\n\t\tWeekStartsAt: Sunday,\n\t})\n\n\ttype Project struct {\n\t\tStartDate DateTime `gorm:\"column:start_date\" json:\"startDate\"`\n\t\tEndDate   DateTime `gorm:\"column:end_date\" json:\"endDate\"`\n\t}\n\n\tproject := new(Project)\n\tjsonStr := `{\"startDate\":\"2024-10-01 00:00:00\",\"endDate\":\"2024-10-31 23:59:59\"}`\n\terr := json.Unmarshal([]byte(jsonStr), &project)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tassert.Equal(t, \"PRC\", project.StartDate.Location())\n\tassert.Equal(t, \"PRC\", project.EndDate.Location())\n}\n"
        },
        {
          "name": "default.go",
          "type": "blob",
          "size": 0.7919921875,
          "content": "package carbon\n\nvar (\n\t// default layout\n\t// 默认布局模板\n\tdefaultLayout = DateTimeLayout\n\n\t// default timezone\n\t// 默认时区\n\tdefaultTimezone = Local\n\n\t// default week start date\n\t// 默认一周开始日期\n\tdefaultWeekStartsAt = Sunday\n\n\t// default language locale\n\t// 默认语言区域\n\tdefaultLocale = \"en\"\n)\n\n// Default defines a Default struct.\n// 定义 Default 结构体\ntype Default struct {\n\tLayout       string\n\tTimezone     string\n\tWeekStartsAt string\n\tLocale       string\n}\n\n// SetDefault sets default.\n// 设置全局默认值\nfunc SetDefault(d Default) {\n\tif d.Layout != \"\" {\n\t\tdefaultLayout = d.Layout\n\t}\n\tif d.Timezone != \"\" {\n\t\tdefaultTimezone = d.Timezone\n\t}\n\tif d.WeekStartsAt != \"\" {\n\t\tdefaultWeekStartsAt = d.WeekStartsAt\n\t}\n\tif d.Locale != \"\" {\n\t\tdefaultLocale = d.Locale\n\t}\n}\n"
        },
        {
          "name": "default_bench_test.go",
          "type": "blob",
          "size": 0.2607421875,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_SetDefault(b *testing.B) {\n\tprepareTest(b)\n\n\td := Default{\n\t\tLayout:       DateTimeLayout,\n\t\tTimezone:     Local,\n\t\tLocale:       \"en\",\n\t\tWeekStartsAt: Sunday,\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tSetDefault(d)\n\t}\n}\n"
        },
        {
          "name": "default_unit_test.go",
          "type": "blob",
          "size": 0.4267578125,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_SetDefault(t *testing.T) {\n\tprepareTest(t)\n\n\tSetDefault(Default{\n\t\tLayout:       DateTimeLayout,\n\t\tTimezone:     PRC,\n\t\tLocale:       \"en\",\n\t\tWeekStartsAt: Sunday,\n\t})\n\tassert.Equal(t, DateTimeLayout, defaultLayout)\n\tassert.Equal(t, PRC, defaultTimezone)\n\tassert.Equal(t, \"en\", defaultLocale)\n\tassert.Equal(t, \"Sunday\", defaultWeekStartsAt)\n}\n"
        },
        {
          "name": "difference.go",
          "type": "blob",
          "size": 7.6533203125,
          "content": "package carbon\n\nimport (\n\t\"math\"\n\t\"strings\"\n\t\"time\"\n)\n\nconst (\n\tminDuration time.Duration = -1 << 63\n\tmaxDuration time.Duration = 1<<63 - 1\n)\n\n// DiffInYears gets the difference in years.\n// 相差多少年\nfunc (c Carbon) DiffInYears(carbon ...Carbon) int64 {\n\tstart, end := c, c.Now()\n\tif c.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\tdy, dm, dd := end.Year()-start.Year(), end.Month()-start.Month(), end.Day()-start.Day()\n\tif dm < 0 || (dm == 0 && dd < 0) {\n\t\tdy--\n\t}\n\tif dy < 0 && (dd != 0 || dm != 0) {\n\t\tdy++\n\t}\n\treturn int64(dy)\n}\n\n// DiffAbsInYears gets the difference in years with absolute value.\n// 相差多少年(绝对值)\nfunc (c Carbon) DiffAbsInYears(carbon ...Carbon) int64 {\n\treturn getAbsValue(c.DiffInYears(carbon...))\n}\n\n// DiffInMonths gets the difference in months.\n// 相差多少月\nfunc (c Carbon) DiffInMonths(carbon ...Carbon) int64 {\n\tstart, end := c, c.Now()\n\tif start.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\tif start.Month() == end.Month() && start.Year() == end.Year() {\n\t\treturn 0\n\t}\n\tdd := start.DiffInDays(end)\n\tsign := 1\n\tif dd <= 0 {\n\t\tstart, end = end, start\n\t\tsign = -1\n\t}\n\tmonths := getDiffInMonths(start, end)\n\treturn months * int64(sign)\n}\n\n// DiffAbsInMonths gets the difference in months with absolute value.\n// 相差多少月(绝对值)\nfunc (c Carbon) DiffAbsInMonths(carbon ...Carbon) int64 {\n\treturn getAbsValue(c.DiffInMonths(carbon...))\n}\n\n// DiffInWeeks gets the difference in weeks.\n// 相差多少周\nfunc (c Carbon) DiffInWeeks(carbon ...Carbon) int64 {\n\tstart, end := c, c.Now()\n\tif c.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\treturn int64(math.Floor(float64((end.Timestamp() - start.Timestamp()) / (7 * 24 * 3600))))\n}\n\n// DiffAbsInWeeks gets the difference in weeks with absolute value.\n// 相差多少周(绝对值)\nfunc (c Carbon) DiffAbsInWeeks(carbon ...Carbon) int64 {\n\treturn getAbsValue(c.DiffInWeeks(carbon...))\n}\n\n// DiffInDays gets the difference in days.\n// 相差多少天\nfunc (c Carbon) DiffInDays(carbon ...Carbon) int64 {\n\tstart, end := c, c.Now()\n\tif c.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\treturn int64(math.Floor(float64((end.Timestamp() - start.Timestamp()) / (24 * 3600))))\n}\n\n// DiffAbsInDays gets the difference in days with absolute value.\n// 相差多少天(绝对值)\nfunc (c Carbon) DiffAbsInDays(carbon ...Carbon) int64 {\n\treturn getAbsValue(c.DiffInDays(carbon...))\n}\n\n// DiffInHours gets the difference in hours.\n// 相差多少小时\nfunc (c Carbon) DiffInHours(carbon ...Carbon) int64 {\n\tend := c.Now()\n\tif c.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\treturn c.DiffInSeconds(end) / SecondsPerHour\n}\n\n// DiffAbsInHours gets the difference in hours with absolute value.\n// 相差多少小时(绝对值)\nfunc (c Carbon) DiffAbsInHours(carbon ...Carbon) int64 {\n\treturn getAbsValue(c.DiffInHours(carbon...))\n}\n\n// DiffInMinutes gets the difference in minutes.\n// 相差多少分钟\nfunc (c Carbon) DiffInMinutes(carbon ...Carbon) int64 {\n\tend := c.Now()\n\tif c.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\treturn c.DiffInSeconds(end) / SecondsPerMinute\n}\n\n// DiffAbsInMinutes gets the difference in minutes with absolute value.\n// 相差多少分钟(绝对值)\nfunc (c Carbon) DiffAbsInMinutes(carbon ...Carbon) int64 {\n\treturn getAbsValue(c.DiffInMinutes(carbon...))\n}\n\n// DiffInSeconds gets the difference in seconds.\n// 相差多少秒\nfunc (c Carbon) DiffInSeconds(carbon ...Carbon) int64 {\n\tend := c.Now()\n\tif c.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\treturn end.Timestamp() - c.Timestamp()\n}\n\n// DiffAbsInSeconds gets the difference in seconds with absolute value.\n// 相差多少秒(绝对值)\nfunc (c Carbon) DiffAbsInSeconds(carbon ...Carbon) int64 {\n\treturn getAbsValue(c.DiffInSeconds(carbon...))\n}\n\n// DiffInString gets the difference in string, i18n is supported.\n// 相差字符串，支持i18n\nfunc (c Carbon) DiffInString(carbon ...Carbon) string {\n\tend := c.Now()\n\tif c.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\tif c.Error != nil || end.Error != nil {\n\t\treturn \"\"\n\t}\n\tunit, value := c.diff(end)\n\treturn c.lang.translate(unit, value)\n}\n\n// DiffAbsInString gets the difference in string with absolute value, i18n is supported.\n// 相差字符串，支持i18n(绝对值)\nfunc (c Carbon) DiffAbsInString(carbon ...Carbon) string {\n\tend := c.Now()\n\tif c.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\tif c.Error != nil || end.Error != nil {\n\t\treturn \"\"\n\t}\n\tunit, value := c.diff(end)\n\treturn c.lang.translate(unit, getAbsValue(value))\n}\n\n// DiffInDuration gets the difference in duration.\n// 相差时长\nfunc (c Carbon) DiffInDuration(carbon ...Carbon) time.Duration {\n\tend := c.Now()\n\tif c.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\treturn end.StdTime().Sub(c.StdTime())\n}\n\n// DiffAbsInDuration gets the difference in duration with absolute value.\n// 相差时长(绝对值)\nfunc (c Carbon) DiffAbsInDuration(carbon ...Carbon) time.Duration {\n\td := c.DiffInDuration(carbon...)\n\tif d >= 0 {\n\t\treturn d\n\t}\n\treturn -d\n}\n\n// DiffForHumans gets the difference in a human-readable format, i18n is supported.\n// 获取对人类友好的可读格式时间差，支持i18n\nfunc (c Carbon) DiffForHumans(carbon ...Carbon) string {\n\tend := c.Now()\n\tif c.IsSetTestNow() {\n\t\tend = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif len(carbon) > 0 {\n\t\tend = carbon[0]\n\t}\n\tif c.Error != nil || end.Error != nil {\n\t\treturn \"\"\n\t}\n\tunit, value := c.diff(end)\n\ttranslation := c.lang.translate(unit, getAbsValue(value))\n\tif unit == \"now\" {\n\t\treturn translation\n\t}\n\tif c.Lt(end) && len(carbon) == 0 {\n\t\treturn strings.Replace(c.lang.resources[\"ago\"], \"%s\", translation, 1)\n\t}\n\tif c.Lt(end) && len(carbon) > 0 {\n\t\treturn strings.Replace(c.lang.resources[\"before\"], \"%s\", translation, 1)\n\t}\n\tif c.Gt(end) && len(carbon) == 0 {\n\t\treturn strings.Replace(c.lang.resources[\"from_now\"], \"%s\", translation, 1)\n\t}\n\treturn strings.Replace(c.lang.resources[\"after\"], \"%s\", translation, 1)\n}\n\n// gets the difference for unit and value.\n// 获取相差单位和差值\nfunc (c Carbon) diff(end Carbon) (unit string, value int64) {\n\tswitch true {\n\tcase c.DiffAbsInYears(end) > 0:\n\t\tunit = \"year\"\n\t\tvalue = c.DiffInYears(end)\n\tcase c.DiffAbsInMonths(end) > 0:\n\t\tunit = \"month\"\n\t\tvalue = c.DiffInMonths(end)\n\tcase c.DiffAbsInWeeks(end) > 0:\n\t\tunit = \"week\"\n\t\tvalue = c.DiffInWeeks(end)\n\tcase c.DiffAbsInDays(end) > 0:\n\t\tunit = \"day\"\n\t\tvalue = c.DiffInDays(end)\n\tcase c.DiffAbsInHours(end) > 0:\n\t\tunit = \"hour\"\n\t\tvalue = c.DiffInHours(end)\n\tcase c.DiffAbsInMinutes(end) > 0:\n\t\tunit = \"minute\"\n\t\tvalue = c.DiffInMinutes(end)\n\tcase c.DiffAbsInSeconds(end) > 0:\n\t\tunit = \"second\"\n\t\tvalue = c.DiffInSeconds(end)\n\tcase c.DiffAbsInSeconds(end) == 0:\n\t\tunit = \"now\"\n\t\tvalue = 0\n\t}\n\treturn\n}\n\nfunc getDiffInMonths(start, end Carbon) int64 {\n\ty, m, d, h, i, s, ns := start.DateTimeNano()\n\tendYear, endMonth, _ := end.Date()\n\n\tyearDiff := endYear - y\n\tmonthDiff := endMonth - m\n\ttotalMonths := yearDiff*12 + monthDiff\n\n\tif time.Date(y, time.Month(m+totalMonths), d, h, i, s, ns, start.StdTime().Location()).After(end.StdTime()) {\n\t\treturn int64(totalMonths - 1)\n\t}\n\treturn int64(totalMonths)\n}\n"
        },
        {
          "name": "difference_bench_test.go",
          "type": "blob",
          "size": 2.4951171875,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_DiffInYears(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffInYears(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffAbsInYears(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffAbsInYears(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffInMonths(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffInMonths(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffAbsInMonths(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffAbsInMonths(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffInWeeks(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffInWeeks(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffAbsInWeeks(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffAbsInWeeks(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffInDays(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffInDays(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffAbsInDays(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffAbsInDays(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffInHours(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffInHours(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffAbsInHours(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffAbsInHours(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffInMinutes(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffInMinutes(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffAbsInMinutes(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffAbsInMinutes(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffInSeconds(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffInSeconds(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffAbsInSeconds(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffAbsInSeconds(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffInString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffInString(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffAbsInString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffAbsInString(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffInDuration(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffInDuration(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffAbsInDuration(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffAbsInDuration(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_DiffForHumans(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DiffForHumans(Yesterday())\n\t}\n}\n"
        },
        {
          "name": "difference_unit_test.go",
          "type": "blob",
          "size": 20.7294921875,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_DiffInYears(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-12-31 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2021-01-01 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2021-08-28 13:14:59\"),\n\t\t\twant:    1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2018-08-28 13:14:59\"),\n\t\t\twant:    -1,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffInYears(tt.carbon2), \"DiffInYears()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffAbsInYears(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-12-31 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2021-01-01 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2021-08-28 13:14:59\"),\n\t\t\twant:    1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2018-08-28 13:14:59\"),\n\t\t\twant:    1,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffAbsInYears(tt.carbon2), \"DiffAbsInYears()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffInMonths(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-07-28 13:14:00\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-09-06 13:14:59\"),\n\t\t\twant:    1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2018-08-28 13:14:59\"),\n\t\t\twant:    -23,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffInMonths(tt.carbon2), \"DiffInMonths()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffAbsInMonths(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-07-28 13:14:00\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-09-06 13:14:59\"),\n\t\t\twant:    1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2018-08-28 13:14:59\"),\n\t\t\twant:    23,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffAbsInMonths(tt.carbon2), \"DiffAbsInMonths()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffInWeeks(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-07-28 13:14:00\"),\n\t\t\twant:    -1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-12 13:14:15\"),\n\t\t\twant:    1,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffInWeeks(tt.carbon2), \"DiffInWeeks()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffAbsInWeeks(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-07-28 13:14:00\"),\n\t\t\twant:    1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-12 13:14:15\"),\n\t\t\twant:    1,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffAbsInWeeks(tt.carbon2), \"DiffAbsInWeeks()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffInDays(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-04 13:14:59\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-06 13:14:15\"),\n\t\t\twant:    1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-04 13:00:00\"),\n\t\t\twant:    -1,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffInDays(tt.carbon2), \"DiffInDays()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffAbsInDays(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-04 13:14:59\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-06 13:14:15\"),\n\t\t\twant:    1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-04 13:00:00\"),\n\t\t\twant:    1,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffAbsInDays(tt.carbon2), \"DiffAbsInDays()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffInHours(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 12:14:00\"),\n\t\t\twant:    -1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 14:14:15\"),\n\t\t\twant:    1,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffInHours(tt.carbon2), \"DiffInHours()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffAbsInHours(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 12:14:00\"),\n\t\t\twant:    1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 14:14:15\"),\n\t\t\twant:    1,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffAbsInHours(tt.carbon2), \"DiffAbsInHours()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffInMinutes(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:13:00\"),\n\t\t\twant:    -1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:15:15\"),\n\t\t\twant:    1,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffInMinutes(tt.carbon2), \"DiffInMinutes()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffAbsInMinutes(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:13:00\"),\n\t\t\twant:    1,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:15:15\"),\n\t\t\twant:    1,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffAbsInMinutes(tt.carbon2), \"DiffAbsInMinutes()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffInSeconds(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:20\"),\n\t\t\twant:    5,\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:20\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    -5,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffInSeconds(tt.carbon2), \"DiffInSeconds()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffAbsInSeconds(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    int64\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    0,\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:20\"),\n\t\t\twant:    5,\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:20\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    5,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffAbsInSeconds(tt.carbon2), \"DiffAbsInSeconds()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffInString(t *testing.T) {\n\tnow := Now()\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    string\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"xxx\"),\n\t\t\tcarbon2: Parse(\"xxx\"),\n\t\t\twant:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    \"just now\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: now,\n\t\t\tcarbon2: now,\n\t\t\twant:    \"just now\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: now.AddYearsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"-1 year\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case6\",\n\t\t\tcarbon1: now.SubYearsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 year\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case7\",\n\t\t\tcarbon1: now.AddMonthsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"-1 month\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case8\",\n\t\t\tcarbon1: now.SubMonthsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 month\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case9\",\n\t\t\tcarbon1: now.AddDays(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"-1 day\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case10\",\n\t\t\tcarbon1: now.SubDays(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 day\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case11\",\n\t\t\tcarbon1: now.AddHours(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"-1 hour\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case12\",\n\t\t\tcarbon1: now.SubHours(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 hour\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case13\",\n\t\t\tcarbon1: now.AddHours(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"-1 hour\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case14\",\n\t\t\tcarbon1: now.SubMinutes(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 minute\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case15\",\n\t\t\tcarbon1: now.AddMinutes(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"-1 minute\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case16\",\n\t\t\tcarbon1: now.SubMinutes(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 minute\",\n\t\t},\n\n\t\t{\n\t\t\tname:    \"case17\",\n\t\t\tcarbon1: now.AddSeconds(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"-1 second\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case18\",\n\t\t\tcarbon1: now.SubSeconds(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 second\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffInString(tt.carbon2), \"DiffInString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffAbsInString(t *testing.T) {\n\tnow := Now()\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    string\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"xxx\"),\n\t\t\tcarbon2: Parse(\"xxx\"),\n\t\t\twant:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tcarbon2: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:    \"just now\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: now,\n\t\t\tcarbon2: now,\n\t\t\twant:    \"just now\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: now.AddYearsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 year\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case6\",\n\t\t\tcarbon1: now.SubYearsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 year\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case7\",\n\t\t\tcarbon1: now.AddMonthsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 month\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case8\",\n\t\t\tcarbon1: now.SubMonthsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 month\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case9\",\n\t\t\tcarbon1: now.AddDays(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 day\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case10\",\n\t\t\tcarbon1: now.SubDays(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 day\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case11\",\n\t\t\tcarbon1: now.AddHours(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 hour\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case12\",\n\t\t\tcarbon1: now.SubHours(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 hour\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case13\",\n\t\t\tcarbon1: now.AddHours(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 hour\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case14\",\n\t\t\tcarbon1: now.SubMinutes(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 minute\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case15\",\n\t\t\tcarbon1: now.AddMinutes(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 minute\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case16\",\n\t\t\tcarbon1: now.SubMinutes(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 minute\",\n\t\t},\n\n\t\t{\n\t\t\tname:    \"case17\",\n\t\t\tcarbon1: now.AddSeconds(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 second\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case18\",\n\t\t\tcarbon1: now.SubSeconds(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 second\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffAbsInString(tt.carbon2), \"DiffAbsInString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffInDuration(t *testing.T) {\n\tnow := Parse(\"2020-08-05 13:14:15\")\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    string\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    \"0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"xxx\"),\n\t\t\tcarbon2: Parse(\"xxx\"),\n\t\t\twant:    \"0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: now,\n\t\t\tcarbon2: now,\n\t\t\twant:    \"0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: now.AddYearsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"-8760h0m0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: now.SubYearsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"8784h0m0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case6\",\n\t\t\tcarbon1: now.AddMonthsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"-744h0m0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case7\",\n\t\t\tcarbon1: now.SubMonthsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"744h0m0s\",\n\t\t},\n\n\t\t{\n\t\t\tname:    \"case8\",\n\t\t\tcarbon1: now.AddDays(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"-24h0m0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case9\",\n\t\t\tcarbon1: now.SubDays(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"24h0m0s\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffInDuration(tt.carbon2).String(), \"DiffInDuration()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffAbsInDuration(t *testing.T) {\n\tnow := Parse(\"2020-08-05 13:14:15\")\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    string\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    \"0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"xxx\"),\n\t\t\tcarbon2: Parse(\"xxx\"),\n\t\t\twant:    \"0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: now,\n\t\t\tcarbon2: now,\n\t\t\twant:    \"0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: now.AddYearsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"8760h0m0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: now.SubYearsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"8784h0m0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case6\",\n\t\t\tcarbon1: now.AddMonthsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"744h0m0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case7\",\n\t\t\tcarbon1: now.SubMonthsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"744h0m0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case8\",\n\t\t\tcarbon1: now.AddDays(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"24h0m0s\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case9\",\n\t\t\tcarbon1: now.SubDays(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"24h0m0s\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffAbsInDuration(tt.carbon2).String(), \"DiffAbsInDuration()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DiffForHumans(t *testing.T) {\n\tnow := Now()\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\twant    string\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\twant:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"xxx\"),\n\t\t\tcarbon2: Parse(\"xxx\"),\n\t\t\twant:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: now,\n\t\t\tcarbon2: now,\n\t\t\twant:    \"just now\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: now.AddYearsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 year after\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: now.SubYearsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 year before\",\n\t\t},\n\n\t\t{\n\t\t\tname:    \"case6\",\n\t\t\tcarbon1: now.AddMonthsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 month after\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case7\",\n\t\t\tcarbon1: now.SubMonthsNoOverflow(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 month before\",\n\t\t},\n\n\t\t{\n\t\t\tname:    \"case8\",\n\t\t\tcarbon1: now.AddDays(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 day after\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case9\",\n\t\t\tcarbon1: now.SubDays(1),\n\t\t\tcarbon2: now,\n\t\t\twant:    \"1 day before\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.DiffForHumans(tt.carbon2), \"DiffForHumans()\")\n\t\t})\n\t}\n\n}\n\n// https://github.com/dromara/carbon/issues/255\nfunc TestCarbon_Issue255(t *testing.T) {\n\ttests := []struct {\n\t\tname  string\n\t\tstart Carbon\n\t\tend   Carbon\n\t\twant  int64\n\t}{\n\t\t{\n\t\t\tname:  \"case1\",\n\t\t\tstart: Parse(\"2024-10-11\"),\n\t\t\tend:   Parse(\"2024-11-10\"),\n\t\t\twant:  0,\n\t\t},\n\t\t{\n\t\t\tname:  \"case2\",\n\t\t\tstart: Parse(\"2024-11-10\"),\n\t\t\tend:   Parse(\"2024-10-11\"),\n\t\t\twant:  0,\n\t\t},\n\n\t\t{\n\t\t\tname:  \"case3\",\n\t\t\tstart: Parse(\"2024-10-11\"),\n\t\t\tend:   Parse(\"2024-11-11\"),\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"case4\",\n\t\t\tstart: Parse(\"2024-11-11\"),\n\t\t\tend:   Parse(\"2024-10-11\"),\n\t\t\twant:  -1,\n\t\t},\n\t\t{\n\t\t\tname:  \"case5\",\n\t\t\tstart: Parse(\"2024-10-11 23:59:00\"),\n\t\t\tend:   Parse(\"2024-11-11 00:00:00\"),\n\t\t\twant:  0,\n\t\t},\n\t\t{\n\t\t\tname:  \"case6\",\n\t\t\tstart: Parse(\"2024-11-11 00:00:00\"),\n\t\t\tend:   Parse(\"2024-10-11 23:59:00\"),\n\t\t\twant:  0,\n\t\t},\n\t\t{\n\t\t\tname:  \"case7\",\n\t\t\tstart: Parse(\"2024-10-11 00:00:00\"),\n\t\t\tend:   Parse(\"2024-11-11 23:59:59\"),\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"case8\",\n\t\t\tstart: Parse(\"2024-11-11 23:59:59\"),\n\t\t\tend:   Parse(\"2024-10-11 00:00:00\"),\n\t\t\twant:  -1,\n\t\t},\n\t\t{\n\t\t\tname:  \"case9\",\n\t\t\tstart: Parse(\"2020-08-05 13:14:15\"),\n\t\t\tend:   Parse(\"2018-08-28 13:14:59\"),\n\t\t\twant:  -23,\n\t\t},\n\t\t{\n\t\t\tname:  \"case10\",\n\t\t\tstart: Parse(\"2018-08-28 13:14:59\"),\n\t\t\tend:   Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:  23,\n\t\t},\n\t\t{\n\t\t\tname:  \"case11\",\n\t\t\tstart: Parse(\"1024-12-25 13:14:20\"),\n\t\t\tend:   Parse(\"2024-12-25 13:14:20\"),\n\t\t\twant:  12000,\n\t\t},\n\t\t{\n\t\t\tname:  \"case12\",\n\t\t\tstart: Parse(\"1024-12-25 13:14:20\"),\n\t\t\tend:   Parse(\"2024-12-25 13:14:19\"),\n\t\t\twant:  11999,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.start.DiffInMonths(tt.end), \"DiffInMonths()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "errors.go",
          "type": "blob",
          "size": 1.396484375,
          "content": "package carbon\n\nimport (\n\t\"fmt\"\n)\n\n// returns an invalid timezone error.\n// 无效的时区错误\nvar invalidTimezoneError = func(timezone string) error {\n\treturn fmt.Errorf(\"invalid timezone %q, please see the file %q for all valid timezones\", timezone, \"$GOROOT/lib/time/zoneinfo.zip\")\n}\n\n// returns an invalid location error.\n// 无效的地区错误\nvar invalidLocationError = func() error {\n\treturn fmt.Errorf(\"invalid location, please make sure the location is valid\")\n}\n\n// returns an invalid duration error.\n// 无效的时长错误\nvar invalidDurationError = func(duration string) error {\n\treturn fmt.Errorf(\"invalid duration %q, please make sure the duration is valid\", duration)\n}\n\n// returns an invalid value error.\n// 无效的时间字符串错误\nvar invalidValueError = func(value string) error {\n\treturn fmt.Errorf(\"cannot parse string %q as carbon, please make sure the value is valid\", value)\n}\n\n// returns an invalid layout error.\n// 无效的布局模板错误\nvar invalidLayoutError = func(value, layout string) error {\n\treturn fmt.Errorf(\"cannot parse string %q as carbon by layout %q, please make sure the value and layout match\", value, layout)\n}\n\n// returns an invalid format error.\n// 无效的格式模板错误\nvar invalidFormatError = func(value, format string) error {\n\treturn fmt.Errorf(\"cannot parse string %q as carbon by format %q, please make sure the value and format match\", value, format)\n}\n"
        },
        {
          "name": "extremum.go",
          "type": "blob",
          "size": 1.591796875,
          "content": "package carbon\n\n// MaxValue returns a Carbon instance for the greatest supported date.\n// 返回 Carbon 的最大值\nfunc MaxValue() Carbon {\n\treturn NewCarbon().create(9999, 12, 31, 23, 59, 59, 999999999, UTC)\n}\n\n// MinValue returns a Carbon instance for the lowest supported date.\n// 返回 Carbon 的最小值\nfunc MinValue() Carbon {\n\treturn NewCarbon().create(-9998, 1, 1, 0, 0, 0, 0, UTC)\n}\n\n// Closest returns the closest Carbon instance from the given Carbon instance.\n// 返回离给定 carbon 实例最近的 Carbon 实例\nfunc (c Carbon) Closest(c1 Carbon, c2 Carbon) Carbon {\n\tif c1.Error != nil {\n\t\treturn c2\n\t}\n\tif c2.Error != nil {\n\t\treturn c1\n\t}\n\tif c.DiffAbsInSeconds(c1) < c.DiffAbsInSeconds(c2) {\n\t\treturn c1\n\t}\n\treturn c2\n}\n\n// Farthest returns the farthest Carbon instance from the given Carbon instance.\n// 返回离给定 carbon 实例最远的 Carbon 实例\nfunc (c Carbon) Farthest(c1 Carbon, c2 Carbon) Carbon {\n\tif c1.IsZero() || c1.IsInvalid() {\n\t\treturn c2\n\t}\n\tif c2.IsZero() || c2.IsInvalid() {\n\t\treturn c1\n\t}\n\tif c.DiffAbsInSeconds(c1) > c.DiffAbsInSeconds(c2) {\n\t\treturn c1\n\t}\n\treturn c2\n}\n\n// Max returns the maximum Carbon instance from the given Carbon instance (second-precision).\n// 返回最大的 Carbon 实例\nfunc Max(c1 Carbon, c2 ...Carbon) (c Carbon) {\n\tc = c1\n\tfor i := range c2 {\n\t\tif c2[i].Gte(c) {\n\t\t\tc = c2[i]\n\t\t}\n\t}\n\treturn\n}\n\n// Min returns the minimum Carbon instance from the given Carbon instance (second-precision).\n// 返回最小的 Carbon 实例\nfunc Min(c1 Carbon, c2 ...Carbon) (c Carbon) {\n\tc = c1\n\tfor i := range c2 {\n\t\tif c2[i].Lte(c) {\n\t\t\tc = c2[i]\n\t\t}\n\t}\n\treturn\n}\n"
        },
        {
          "name": "extremum_bench_test.go",
          "type": "blob",
          "size": 1.19140625,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_Closest(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Closest(Yesterday(), Yesterday().AddDay())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Closest(Yesterday().AddDay(), Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Closest(Parse(\"xxx\"), Parse(\"2022-08-05\"))\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Closest(Parse(\"2020-08-05\"), Parse(\"xxx\"))\n\t}\n}\n\nfunc BenchmarkCarbon_Farthest(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Farthest(now.AddYear(), Yesterday())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Farthest(Yesterday(), now.AddYear())\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Farthest(Parse(\"xxx\"), Parse(\"2022-08-05\"))\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Farthest(Parse(\"2020-08-05\"), Parse(\"xxx\"))\n\t}\n}\n\nfunc BenchmarkCarbon_Max(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tMax(now.SubDay(), now.AddDay())\n\t}\n}\n\nfunc BenchmarkCarbon_Min(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tMin(now.SubDay(), now.AddDay())\n\t}\n}\n\nfunc BenchmarkCarbon_MaxValue(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tMaxValue()\n\t}\n}\n\nfunc BenchmarkCarbon_MinValue(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tMinValue()\n\t}\n}\n"
        },
        {
          "name": "extremum_unit_test.go",
          "type": "blob",
          "size": 2.8837890625,
          "content": "package carbon\n\nimport (\n\t\"github.com/stretchr/testify/assert\"\n\t\"testing\"\n)\n\nfunc TestCarbon_Closest(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\tcarbon3 Carbon\n\t\twant    string\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"2023-03-28\"),\n\t\t\tcarbon3: Parse(\"2023-04-16\"),\n\t\t\twant:    \"2023-03-28\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\tcarbon3: Parse(\"2023-04-16\"),\n\t\t\twant:    \"2023-04-16\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"2023-03-28\"),\n\t\t\tcarbon3: Parse(\"\"),\n\t\t\twant:    \"2023-03-28\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\tcarbon3: Parse(\"\"),\n\t\t\twant:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"2023-03-28\"),\n\t\t\tcarbon3: Parse(\"2023-03-28\"),\n\t\t\twant:    \"2023-03-28\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case6\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"2023-03-28\"),\n\t\t\tcarbon3: Parse(\"2023-04-16\"),\n\t\t\twant:    \"2023-03-28\",\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.Closest(tt.carbon2, tt.carbon3).ToDateString(), \"Closest()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Farthest(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcarbon1 Carbon\n\t\tcarbon2 Carbon\n\t\tcarbon3 Carbon\n\t\twant    string\n\t}{\n\t\t{\n\t\t\tname:    \"case1\",\n\t\t\tcarbon1: Parse(\"\"),\n\t\t\tcarbon2: Parse(\"2023-03-28\"),\n\t\t\tcarbon3: Parse(\"2023-04-16\"),\n\t\t\twant:    \"2023-04-16\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case2\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\tcarbon3: Parse(\"2023-04-16\"),\n\t\t\twant:    \"2023-04-16\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case3\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"2023-03-28\"),\n\t\t\tcarbon3: Parse(\"\"),\n\t\t\twant:    \"2023-03-28\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case4\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"\"),\n\t\t\tcarbon3: Parse(\"\"),\n\t\t\twant:    \"\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case5\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"2023-03-28\"),\n\t\t\tcarbon3: Parse(\"2023-03-28\"),\n\t\t\twant:    \"2023-03-28\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case6\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"2023-03-28\"),\n\t\t\tcarbon3: Parse(\"2023-03-28\"),\n\t\t\twant:    \"2023-03-28\",\n\t\t},\n\t\t{\n\t\t\tname:    \"case7\",\n\t\t\tcarbon1: Parse(\"2023-04-01\"),\n\t\t\tcarbon2: Parse(\"2023-04-05\"),\n\t\t\tcarbon3: Parse(\"2023-04-02\"),\n\t\t\twant:    \"2023-04-05\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon1.Farthest(tt.carbon2, tt.carbon3).ToDateString(), \"Farthest()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Max(t *testing.T) {\n\tnow := Now()\n\tmax := Max(now.SubDay(), now, now.AddDay())\n\tassert.Equal(t, now.AddDay().Timestamp(), max.Timestamp())\n}\n\nfunc TestCarbon_Min(t *testing.T) {\n\tnow := Now()\n\tmin := Min(now, now.SubDay(), now.AddDay())\n\tassert.Equal(t, now.SubDay().Timestamp(), min.Timestamp())\n}\n"
        },
        {
          "name": "getter.go",
          "type": "blob",
          "size": 9.7861328125,
          "content": "package carbon\n\nimport (\n\t\"time\"\n)\n\n// StdTime gets standard time.Time.\n// 获取标准 time.Time\nfunc (c Carbon) StdTime() time.Time {\n\tif c.time.IsZero() {\n\t\treturn c.time\n\t}\n\treturn c.time.In(c.loc)\n}\n\n// DaysInYear gets total days in year like 365.\n// 获取本年的总天数\nfunc (c Carbon) DaysInYear() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\tif c.IsLeapYear() {\n\t\treturn DaysPerLeapYear\n\t}\n\treturn DaysPerNormalYear\n}\n\n// DaysInMonth gets total days in month like 30.\n// 获取本月的总天数\nfunc (c Carbon) DaysInMonth() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.EndOfMonth().StdTime().Day()\n}\n\n// MonthOfYear gets month of year like 12.\n// 获取本年的第几月\nfunc (c Carbon) MonthOfYear() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn int(c.StdTime().Month())\n}\n\n// DayOfYear gets day of year like 365.\n// 获取本年的第几天\nfunc (c Carbon) DayOfYear() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().YearDay()\n}\n\n// DayOfMonth gets day of month like 30.\n// 获取本月的第几天\nfunc (c Carbon) DayOfMonth() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().Day()\n}\n\n// DayOfWeek gets day of week like 6.\n// 获取本周的第几天\nfunc (c Carbon) DayOfWeek() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\tday := int(c.StdTime().Weekday())\n\tif day == 0 {\n\t\treturn DaysPerWeek\n\t}\n\treturn day\n}\n\n// WeekOfYear gets week of year like 1, see https://en.wikipedia.org/wiki/ISO_8601#Week_dates.\n// 获取本年的第几周\nfunc (c Carbon) WeekOfYear() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\t_, week := c.StdTime().ISOWeek()\n\treturn week\n}\n\n// WeekOfMonth gets week of month like 1.\n// 获取本月的第几周\nfunc (c Carbon) WeekOfMonth() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\tdays := c.Day() + c.StartOfMonth().DayOfWeek() - 1\n\tif days%DaysPerWeek == 0 {\n\t\treturn days / DaysPerWeek\n\t}\n\treturn days/DaysPerWeek + 1\n}\n\n// DateTime gets current year, month, day, hour, minute, and second like 2020, 8, 5, 13, 14, 15.\n// 获取当前年、月、日、时、分、秒\nfunc (c Carbon) DateTime() (year, month, day, hour, minute, second int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\tyear, month, day = c.Date()\n\thour, minute, second = c.Time()\n\treturn year, month, day, hour, minute, second\n}\n\n// DateTimeMilli gets current year, month, day, hour, minute, second and millisecond like 2020, 8, 5, 13, 14, 15, 999.\n// 获取当前年、月、日、时、分、秒、毫秒\nfunc (c Carbon) DateTimeMilli() (year, month, day, hour, minute, second, millisecond int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\tyear, month, day, hour, minute, second = c.DateTime()\n\treturn year, month, day, hour, minute, second, c.Millisecond()\n}\n\n// DateTimeMicro gets current year, month, day, hour, minute, second and microsecond like 2020, 8, 5, 13, 14, 15, 999999.\n// 获取当前年、月、日、时、分、秒、微秒\nfunc (c Carbon) DateTimeMicro() (year, month, day, hour, minute, second, microsecond int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\tyear, month, day, hour, minute, second = c.DateTime()\n\treturn year, month, day, hour, minute, second, c.Microsecond()\n}\n\n// DateTimeNano gets current year, month, day, hour, minute, second and nanosecond like 2020, 8, 5, 13, 14, 15, 999999999.\n// 获取当前年、月、日、时、分、秒、纳秒\nfunc (c Carbon) DateTimeNano() (year, month, day, hour, minute, second, nanosecond int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\tyear, month, day, hour, minute, second = c.DateTime()\n\treturn year, month, day, hour, minute, second, c.Nanosecond()\n}\n\n// Date gets current year, month, and day like 2020, 8, 5.\n// 获取当前年、月、日\nfunc (c Carbon) Date() (year, month, day int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\tvar tm time.Month\n\tyear, tm, day = c.StdTime().Date()\n\treturn year, int(tm), day\n}\n\n// DateMilli gets current year, month, day and millisecond like 2020, 8, 5, 999.\n// 获取当前年、月、日、毫秒\nfunc (c Carbon) DateMilli() (year, month, day, millisecond int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\tyear, month, day = c.Date()\n\treturn year, month, day, c.Millisecond()\n}\n\n// DateMicro gets current year, month, day and microsecond like 2020, 8, 5, 999999.\n// 获取当前年、月、日、微秒\nfunc (c Carbon) DateMicro() (year, month, day, microsecond int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\tyear, month, day = c.Date()\n\treturn year, month, day, c.Microsecond()\n}\n\n// DateNano gets current year, month, day and nanosecond like 2020, 8, 5, 999999999.\n// 获取当前年、月、日、纳秒\nfunc (c Carbon) DateNano() (year, month, day, nanosecond int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\tyear, month, day = c.Date()\n\treturn year, month, day, c.Nanosecond()\n}\n\n// Time gets current hour, minute, and second like 13, 14, 15.\n// 获取当前时、分、秒\nfunc (c Carbon) Time() (hour, minute, second int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\treturn c.StdTime().Clock()\n}\n\n// TimeMilli gets current hour, minute, second and millisecond like 13, 14, 15, 999.\n// 获取当前时、分、秒、毫秒\nfunc (c Carbon) TimeMilli() (hour, minute, second, millisecond int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\thour, minute, second = c.Time()\n\treturn hour, minute, second, c.Millisecond()\n}\n\n// TimeMicro gets current hour, minute, second and microsecond like 13, 14, 15, 999999.\n// 获取当前时、分、秒、微秒\nfunc (c Carbon) TimeMicro() (hour, minute, second, microsecond int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\thour, minute, second = c.Time()\n\treturn hour, minute, second, c.Microsecond()\n}\n\n// TimeNano gets current hour, minute, second and nanosecond like 13, 14, 15, 999999999.\n// 获取当前时、分、秒、纳秒\nfunc (c Carbon) TimeNano() (hour, minute, second, nanosecond int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\thour, minute, second = c.Time()\n\treturn hour, minute, second, c.Nanosecond()\n}\n\n// Century gets current century like 21.\n// 获取当前世纪\nfunc (c Carbon) Century() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.Year()/YearsPerCentury + 1\n}\n\n// Decade gets current decade like 20.\n// 获取当前年代\nfunc (c Carbon) Decade() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.Year() % YearsPerCentury / YearsPerDecade * YearsPerDecade\n}\n\n// Year gets current year like 2020.\n// 获取当前年\nfunc (c Carbon) Year() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().Year()\n}\n\n// Quarter gets current quarter like 3.\n// 获取当前季度\nfunc (c Carbon) Quarter() (quarter int) {\n\tif c.Error != nil {\n\t\treturn\n\t}\n\tmonth := c.Month()\n\tswitch {\n\tcase month >= 10:\n\t\tquarter = 4\n\tcase month >= 7:\n\t\tquarter = 3\n\tcase month >= 4:\n\t\tquarter = 2\n\tcase month >= 1:\n\t\tquarter = 1\n\t}\n\treturn\n}\n\n// Month gets current month like 8.\n// 获取当前月\nfunc (c Carbon) Month() int {\n\treturn c.MonthOfYear()\n}\n\n// Week gets current week like 6, start from 0.\n// 获取当前周(从0开始)\nfunc (c Carbon) Week() int {\n\tif c.Error != nil {\n\t\treturn -1\n\t}\n\treturn (c.DayOfWeek() + DaysPerWeek - int(c.weekStartsAt)) % DaysPerWeek\n}\n\n// Day gets current day like 5.\n// 获取当前日\nfunc (c Carbon) Day() int {\n\treturn c.DayOfMonth()\n}\n\n// Hour gets current hour like 13.\n// 获取当前小时\nfunc (c Carbon) Hour() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().Hour()\n}\n\n// Minute gets current minute like 14.\n// 获取当前分钟数\nfunc (c Carbon) Minute() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().Minute()\n}\n\n// Second gets current second like 15.\n// 获取当前秒数\nfunc (c Carbon) Second() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().Second()\n}\n\n// Millisecond gets current millisecond like 999.\n// 获取当前毫秒数\nfunc (c Carbon) Millisecond() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().Nanosecond() / 1e6\n}\n\n// Microsecond gets current microsecond like 999999.\n// 获取当前微秒数\nfunc (c Carbon) Microsecond() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().Nanosecond() / 1e3\n}\n\n// Nanosecond gets current nanosecond like 999999999.\n// 获取当前纳秒数\nfunc (c Carbon) Nanosecond() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().Nanosecond()\n}\n\n// Timestamp gets timestamp with second like 1596604455.\n// 输出秒级时间戳\nfunc (c Carbon) Timestamp() int64 {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().Unix()\n}\n\n// TimestampMilli gets timestamp with millisecond like 1596604455000.\n// 获取毫秒级时间戳\nfunc (c Carbon) TimestampMilli() int64 {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\tt := c.StdTime()\n\treturn t.Unix()*1e3 + int64(t.Nanosecond())/1e6\n}\n\n// TimestampMicro gets timestamp with microsecond like 1596604455000000.\n// 获取微秒级时间戳\nfunc (c Carbon) TimestampMicro() int64 {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\tt := c.StdTime()\n\treturn t.Unix()*1e6 + int64(t.Nanosecond())/1e3\n}\n\n// TimestampNano gets timestamp with nanosecond like 1596604455000000000.\n// 获取纳秒级时间戳\nfunc (c Carbon) TimestampNano() int64 {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\treturn c.StdTime().UnixNano()\n}\n\n// Location gets location name like \"PRC\".\n// 获取位置\nfunc (c Carbon) Location() string {\n\tif c.Error != nil {\n\t\treturn \"\"\n\t}\n\treturn c.loc.String()\n}\n\n// Timezone gets timezone name like \"CST\".\n// 获取时区\nfunc (c Carbon) Timezone() string {\n\tif c.Error != nil {\n\t\treturn \"\"\n\t}\n\tname, _ := c.StdTime().Zone()\n\treturn name\n}\n\n// Offset gets offset seconds from the UTC timezone like 28800.\n// 获取距离UTC时区的偏移量，单位秒\nfunc (c Carbon) Offset() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\t_, offset := c.StdTime().Zone()\n\treturn offset\n}\n\n// Locale gets locale name like \"zh-CN\".\n// 获取语言区域\nfunc (c Carbon) Locale() string {\n\tif c.Error != nil {\n\t\treturn \"\"\n\t}\n\treturn c.lang.locale\n}\n\n// Age gets age like 18.\n// 获取年龄\nfunc (c Carbon) Age() int {\n\tif c.Error != nil {\n\t\treturn 0\n\t}\n\tnow := c.Now()\n\tif c.IsSetTestNow() {\n\t\tnow = CreateFromTimestampNano(c.testNow, c.Location())\n\t}\n\tif c.TimestampNano() > now.TimestampNano() {\n\t\treturn 0\n\t}\n\treturn int(c.DiffInYears(now))\n}\n"
        },
        {
          "name": "getter_bench_test.go",
          "type": "blob",
          "size": 7.466796875,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_StdTime(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StdTime()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.StdTime()\n\t}\n}\n\nfunc BenchmarkCarbon_DaysInYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DaysInYear()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DaysInYear()\n\t}\n}\n\nfunc BenchmarkCarbon_DaysInMonth(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DaysInMonth()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DaysInMonth()\n\t}\n}\n\nfunc BenchmarkCarbon_MonthOfYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.MonthOfYear()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.MonthOfYear()\n\t}\n}\n\nfunc BenchmarkCarbon_DayOfYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DayOfYear()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DayOfYear()\n\t}\n}\n\nfunc BenchmarkCarbon_DayOfMonth(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DayOfMonth()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DayOfMonth()\n\t}\n}\n\nfunc BenchmarkCarbon_DayOfWeek(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DayOfWeek()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DayOfWeek()\n\t}\n}\n\nfunc BenchmarkCarbon_WeekOfYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.WeekOfYear()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.WeekOfYear()\n\t}\n}\n\nfunc BenchmarkCarbon_WeekOfMonth(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.WeekOfMonth()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.WeekOfMonth()\n\t}\n}\n\nfunc BenchmarkCarbon_DateTime(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DateTime()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DateTime()\n\t}\n}\n\nfunc BenchmarkCarbon_DateTimeMilli(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DateTimeMilli()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DateTimeMilli()\n\t}\n}\n\nfunc BenchmarkCarbon_DateTimeMicro(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DateTimeMilli()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DateTimeMilli()\n\t}\n}\n\nfunc BenchmarkCarbon_DateTimeNano(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DateTimeNano()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DateTimeNano()\n\t}\n}\n\nfunc BenchmarkCarbon_Date(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Date()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Date()\n\t}\n}\n\nfunc BenchmarkCarbon_DateMilli(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DateMilli()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DateMilli()\n\t}\n}\n\nfunc BenchmarkCarbon_DateMicro(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DateMicro()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DateMicro()\n\t}\n}\n\nfunc BenchmarkCarbon_DateNano(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.DateNano()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.DateNano()\n\t}\n}\n\nfunc BenchmarkCarbon_Time(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Time()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Time()\n\t}\n}\n\nfunc BenchmarkCarbon_TimeMilli(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.TimeMilli()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.TimeMilli()\n\t}\n}\n\nfunc BenchmarkCarbon_TimeMicro(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.TimeMicro()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.TimeMicro()\n\t}\n}\n\nfunc BenchmarkCarbon_TimeNano(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.TimeNano()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.TimeNano()\n\t}\n}\n\nfunc BenchmarkCarbon_Century(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Century()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Century()\n\t}\n}\n\nfunc BenchmarkCarbon_Decade(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Decade()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Decade()\n\t}\n}\n\nfunc BenchmarkCarbon_Year(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Year()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Year()\n\t}\n}\n\nfunc BenchmarkCarbon_Quarter(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Quarter()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Quarter()\n\t}\n}\n\nfunc BenchmarkCarbon_Month(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Month()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Month()\n\t}\n}\n\nfunc BenchmarkCarbon_Week(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Week()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Week()\n\t}\n}\n\nfunc BenchmarkCarbon_Day(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Day()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Day()\n\t}\n}\n\nfunc BenchmarkCarbon_Hour(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Hour()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Hour()\n\t}\n}\n\nfunc BenchmarkCarbon_Minute(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Minute()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Minute()\n\t}\n}\n\nfunc BenchmarkCarbon_Second(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Second()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Second()\n\t}\n}\n\nfunc BenchmarkCarbon_Millisecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Millisecond()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Millisecond()\n\t}\n}\n\nfunc BenchmarkCarbon_Microsecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Microsecond()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Microsecond()\n\t}\n}\n\nfunc BenchmarkCarbon_Nanosecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Nanosecond()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Nanosecond()\n\t}\n}\n\nfunc BenchmarkCarbon_Timestamp(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Timestamp()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Timestamp()\n\t}\n}\n\nfunc BenchmarkCarbon_TimestampMilli(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.TimestampMilli()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.TimestampMilli()\n\t}\n}\n\nfunc BenchmarkCarbon_TimestampMicro(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.TimestampMicro()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.TimestampMicro()\n\t}\n}\n\nfunc BenchmarkCarbon_TimestampNano(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.TimestampNano()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.TimestampNano()\n\t}\n}\n\nfunc BenchmarkCarbon_Location(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Location()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Location()\n\t}\n}\n\nfunc BenchmarkCarbon_Timezone(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Timezone()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Timezone()\n\t}\n}\n\nfunc BenchmarkCarbon_Offset(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Offset()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Offset()\n\t}\n}\n\nfunc BenchmarkCarbon_Locale(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Locale()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Locale()\n\t}\n}\n\nfunc BenchmarkCarbon_Age(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Age()\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.Age()\n\t}\n}\n"
        },
        {
          "name": "getter_unit_test.go",
          "type": "blob",
          "size": 32.3037109375,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_StdTime(t *testing.T) {\n\texpected := time.Now().Format(DateTimeLayout)\n\tactual := Now().StdTime().Format(DateTimeLayout)\n\tassert.Equal(t, expected, actual)\n}\n\nfunc TestCarbon_DaysInYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   366,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2021-08-05\"),\n\t\t\twant:   365,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.DaysInYear(), \"DaysInYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DaysInMonth(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-05\"),\n\t\t\twant:   31,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-02-05\"),\n\t\t\twant:   29,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-03-05\"),\n\t\t\twant:   31,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-04-05\"),\n\t\t\twant:   30,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.DaysInMonth(), \"DaysInMonth()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_MonthOfYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-05\"),\n\t\t\twant:   1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-02-05\"),\n\t\t\twant:   2,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-03-05\"),\n\t\t\twant:   3,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-04-05\"),\n\t\t\twant:   4,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.MonthOfYear(), \"MonthOfYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DayOfYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-05\"),\n\t\t\twant:   5,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-02-05\"),\n\t\t\twant:   36,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-03-05\"),\n\t\t\twant:   65,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-04-05\"),\n\t\t\twant:   96,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.DayOfYear(), \"DayOfYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DayOfMonth(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-05\"),\n\t\t\twant:   5,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-01-31\"),\n\t\t\twant:   31,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.DayOfMonth(), \"DayOfMonth()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DayOfWeek(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-03\"),\n\t\t\twant:   1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-04\"),\n\t\t\twant:   2,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   3,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.DayOfWeek(), \"DayOfWeek()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_WeekOfYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2021-01-01\"),\n\t\t\twant:   53,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2021-02-01\"),\n\t\t\twant:   5,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2021-03-01\"),\n\t\t\twant:   9,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2021-04-01\"),\n\t\t\twant:   13,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.WeekOfYear(), \"WeekOfYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_WeekOfMonth(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2021-07-01\"),\n\t\t\twant:   1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2021-07-02\"),\n\t\t\twant:   1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2021-07-03\"),\n\t\t\twant:   1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2021-07-04\"),\n\t\t\twant:   1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2021-07-05\"),\n\t\t\twant:   2,\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2021-07-06\"),\n\t\t\twant:   2,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.WeekOfMonth(), \"WeekOfMonth()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DateTime(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\tyear, month, day, hour, minute, second int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second int }{year: 0, month: 0, day: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second int }{year: 0, month: 0, day: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second int }{year: 2020, month: 1, day: 1},\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second int }{year: 2020, month: 1, day: 1, hour: 13, minute: 14, second: 15},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tyear, month, day, hour, minute, second := tt.carbon.DateTime()\n\t\t\tassert.Equalf(t, tt.want.year, year, \"DateTime()\")\n\t\t\tassert.Equalf(t, tt.want.month, month, \"DateTime()\")\n\t\t\tassert.Equalf(t, tt.want.day, day, \"DateTime()\")\n\t\t\tassert.Equalf(t, tt.want.hour, hour, \"DateTime()\")\n\t\t\tassert.Equalf(t, tt.want.minute, minute, \"DateTime()\")\n\t\t\tassert.Equalf(t, tt.want.second, second, \"DateTime()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DateTimeMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\tyear, month, day, hour, minute, second, millisecond int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, millisecond int }{year: 0, month: 0, day: 0, millisecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, millisecond int }{year: 0, month: 0, day: 0, millisecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, millisecond int }{year: 0, month: 0, day: 0, millisecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, millisecond int }{year: 2020, month: 1, day: 1, millisecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, millisecond int }{year: 2020, month: 1, day: 1, hour: 13, minute: 14, second: 15, millisecond: 999},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tyear, month, day, hour, minute, second, millisecond := tt.carbon.DateTimeMilli()\n\t\t\tassert.Equalf(t, tt.want.year, year, \"DateTimeMilli()\")\n\t\t\tassert.Equalf(t, tt.want.month, month, \"DateTimeMilli()\")\n\t\t\tassert.Equalf(t, tt.want.day, day, \"DateTimeMilli()\")\n\t\t\tassert.Equalf(t, tt.want.hour, hour, \"DateTimeMilli()\")\n\t\t\tassert.Equalf(t, tt.want.minute, minute, \"DateTimeMilli()\")\n\t\t\tassert.Equalf(t, tt.want.second, second, \"DateTimeMilli()\")\n\t\t\tassert.Equalf(t, tt.want.millisecond, millisecond, \"DateTimeMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DateTimeMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\tyear, month, day, hour, minute, second, microsecond int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, microsecond int }{year: 0, month: 0, day: 0, microsecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, microsecond int }{year: 0, month: 0, day: 0, microsecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, microsecond int }{year: 2020, month: 1, day: 1, microsecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, microsecond int }{year: 2020, month: 1, day: 1, hour: 13, minute: 14, second: 15, microsecond: 999999},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tyear, month, day, hour, minute, second, microsecond := tt.carbon.DateTimeMicro()\n\t\t\tassert.Equalf(t, tt.want.year, year, \"DateTimeMicro()\")\n\t\t\tassert.Equalf(t, tt.want.month, month, \"DateTimeMicro()\")\n\t\t\tassert.Equalf(t, tt.want.day, day, \"DateTimeMicro()\")\n\t\t\tassert.Equalf(t, tt.want.hour, hour, \"DateTimeMicro()\")\n\t\t\tassert.Equalf(t, tt.want.minute, minute, \"DateTimeMicro()\")\n\t\t\tassert.Equalf(t, tt.want.second, second, \"DateTimeMicro()\")\n\t\t\tassert.Equalf(t, tt.want.microsecond, microsecond, \"DateTimeMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DateTimeNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\tyear, month, day, hour, minute, second, nanosecond int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, nanosecond int }{year: 0, month: 0, day: 0, nanosecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, nanosecond int }{year: 0, month: 0, day: 0, nanosecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, nanosecond int }{year: 2020, month: 1, day: 1, nanosecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ year, month, day, hour, minute, second, nanosecond int }{year: 2020, month: 1, day: 1, hour: 13, minute: 14, second: 15, nanosecond: 999999999},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tyear, month, day, hour, minute, second, nanosecond := tt.carbon.DateTimeNano()\n\t\t\tassert.Equalf(t, tt.want.year, year, \"DateTimeNano()\")\n\t\t\tassert.Equalf(t, tt.want.month, month, \"DateTimeNano()\")\n\t\t\tassert.Equalf(t, tt.want.day, day, \"DateTimeNano()\")\n\t\t\tassert.Equalf(t, tt.want.hour, hour, \"DateTimeNano()\")\n\t\t\tassert.Equalf(t, tt.want.minute, minute, \"DateTimeNano()\")\n\t\t\tassert.Equalf(t, tt.want.second, second, \"DateTimeNano()\")\n\t\t\tassert.Equalf(t, tt.want.nanosecond, nanosecond, \"DateTimeNano()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Date(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\tyear, month, day int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ year, month, day int }{year: 0, month: 0, day: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ year, month, day int }{year: 2020, month: 1, day: 1},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ year, month, day int }{year: 2020, month: 1, day: 1},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tyear, month, day := tt.carbon.Date()\n\t\t\tassert.Equalf(t, tt.want.year, year, \"Date()\")\n\t\t\tassert.Equalf(t, tt.want.month, month, \"Date()\")\n\t\t\tassert.Equalf(t, tt.want.day, day, \"Date()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DateMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\tyear, month, day, millisecond int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ year, month, day, millisecond int }{year: 0, month: 0, day: 0, millisecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ year, month, day, millisecond int }{year: 2020, month: 1, day: 1, millisecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ year, month, day, millisecond int }{year: 2020, month: 1, day: 1, millisecond: 999},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tyear, month, day, millisecond := tt.carbon.DateMilli()\n\t\t\tassert.Equalf(t, tt.want.year, year, \"DateMilli()\")\n\t\t\tassert.Equalf(t, tt.want.month, month, \"DateMilli()\")\n\t\t\tassert.Equalf(t, tt.want.day, day, \"DateMilli()\")\n\t\t\tassert.Equalf(t, tt.want.millisecond, millisecond, \"DateMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DateMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\tyear, month, day, microsecond int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ year, month, day, microsecond int }{year: 0, month: 0, day: 0, microsecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ year, month, day, microsecond int }{year: 2020, month: 1, day: 1, microsecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ year, month, day, microsecond int }{year: 2020, month: 1, day: 1, microsecond: 999999},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tyear, month, day, microsecond := tt.carbon.DateMicro()\n\t\t\tassert.Equalf(t, tt.want.year, year, \"DateMicro()\")\n\t\t\tassert.Equalf(t, tt.want.month, month, \"DateMicro()\")\n\t\t\tassert.Equalf(t, tt.want.day, day, \"DateMicro()\")\n\t\t\tassert.Equalf(t, tt.want.microsecond, microsecond, \"DateMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_DateNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\tyear, month, day, nanosecond int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ year, month, day, nanosecond int }{year: 0, month: 0, day: 0, nanosecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ year, month, day, nanosecond int }{year: 2020, month: 1, day: 1, nanosecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ year, month, day, nanosecond int }{year: 2020, month: 1, day: 1, nanosecond: 999999999},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tyear, month, day, nanosecond := tt.carbon.DateNano()\n\t\t\tassert.Equalf(t, tt.want.year, year, \"DateNano()\")\n\t\t\tassert.Equalf(t, tt.want.month, month, \"DateNano()\")\n\t\t\tassert.Equalf(t, tt.want.day, day, \"DateNano()\")\n\t\t\tassert.Equalf(t, tt.want.nanosecond, nanosecond, \"DateNano()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Time(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\thour, minute, second int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ hour, minute, second int }{hour: 0, minute: 0, second: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ hour, minute, second int }{hour: 0, minute: 0, second: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ hour, minute, second int }{hour: 13, minute: 14, second: 15},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\thour, minute, second := tt.carbon.Time()\n\t\t\tassert.Equalf(t, tt.want.hour, hour, \"Time()\")\n\t\t\tassert.Equalf(t, tt.want.minute, minute, \"Time()\")\n\t\t\tassert.Equalf(t, tt.want.second, second, \"Time()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_TimeMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\thour, minute, second, millisecond int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ hour, minute, second, millisecond int }{hour: 0, minute: 0, second: 0, millisecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ hour, minute, second, millisecond int }{hour: 0, minute: 0, second: 0, millisecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ hour, minute, second, millisecond int }{hour: 13, minute: 14, second: 15, millisecond: 999},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\thour, minute, second, millisecond := tt.carbon.TimeMilli()\n\t\t\tassert.Equalf(t, tt.want.hour, hour, \"TimeMilli()\")\n\t\t\tassert.Equalf(t, tt.want.minute, minute, \"TimeMilli()\")\n\t\t\tassert.Equalf(t, tt.want.second, second, \"TimeMilli()\")\n\t\t\tassert.Equalf(t, tt.want.millisecond, millisecond, \"TimeMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_TimeMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\thour, minute, second, microsecond int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ hour, minute, second, microsecond int }{hour: 0, minute: 0, second: 0, microsecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ hour, minute, second, microsecond int }{hour: 0, minute: 0, second: 0, microsecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ hour, minute, second, microsecond int }{hour: 13, minute: 14, second: 15, microsecond: 999999},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\thour, minute, second, microsecond := tt.carbon.TimeMicro()\n\t\t\tassert.Equalf(t, tt.want.hour, hour, \"TimeMicro()\")\n\t\t\tassert.Equalf(t, tt.want.minute, minute, \"TimeMicro()\")\n\t\t\tassert.Equalf(t, tt.want.second, second, \"TimeMicro()\")\n\t\t\tassert.Equalf(t, tt.want.microsecond, microsecond, \"TimeMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_TimeNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   struct {\n\t\t\thour, minute, second, nanosecond int\n\t\t}\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   struct{ hour, minute, second, nanosecond int }{hour: 0, minute: 0, second: 0, nanosecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   struct{ hour, minute, second, nanosecond int }{hour: 0, minute: 0, second: 0, nanosecond: 0},\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15.999999999\"),\n\t\t\twant:   struct{ hour, minute, second, nanosecond int }{hour: 13, minute: 14, second: 15, nanosecond: 999999999},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\thour, minute, second, nanosecond := tt.carbon.TimeNano()\n\t\t\tassert.Equalf(t, tt.want.hour, hour, \"TimeNano()\")\n\t\t\tassert.Equalf(t, tt.want.minute, minute, \"TimeNano()\")\n\t\t\tassert.Equalf(t, tt.want.second, second, \"TimeNano()\")\n\t\t\tassert.Equalf(t, tt.want.nanosecond, nanosecond, \"TimeNano()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Century(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"1990-08-05\"),\n\t\t\twant:   20,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2021-08-05\"),\n\t\t\twant:   21,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Century(), \"Century()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Decade(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2010-08-05\"),\n\t\t\twant:   10,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2011-08-05\"),\n\t\t\twant:   10,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   20,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2021-08-05\"),\n\t\t\twant:   20,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Decade(), \"Decade()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Year(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   2020,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2021-08-05\"),\n\t\t\twant:   2021,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Year(), \"Year()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Quarter(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-05\"),\n\t\t\twant:   1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-04-05\"),\n\t\t\twant:   2,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   3,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-11-05\"),\n\t\t\twant:   4,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Quarter(), \"Quarter()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Month(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   8,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   8,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Month(), \"Month()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Week(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   -1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   -1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-03\"),\n\t\t\twant:   1,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-04\"),\n\t\t\twant:   2,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   3,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-08-09\"),\n\t\t\twant:   0,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Week(), \"Week()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Day(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   5,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   5,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Day(), \"Day()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Hour(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   13,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Hour(), \"Hour()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Minute(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   14,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Minute(), \"Minute()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Second(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   15,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Second(), \"Second()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Millisecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.999\"),\n\t\t\twant:   999,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.999999\"),\n\t\t\twant:   999,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.999999999\"),\n\t\t\twant:   999,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Millisecond(), \"Millisecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Microsecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.999\"),\n\t\t\twant:   999000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.999999\"),\n\t\t\twant:   999999,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.999999999\"),\n\t\t\twant:   999999,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Microsecond(), \"Microsecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Nanosecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.999\"),\n\t\t\twant:   999000000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.999999\"),\n\t\t\twant:   999999000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.999999999\"),\n\t\t\twant:   999999999,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Nanosecond(), \"Nanosecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Timestamp(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int64\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\"),\n\t\t\twant:   1577855655,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-31 13:14:15\"),\n\t\t\twant:   1580447655,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-01 13:14:15\"),\n\t\t\twant:   1580534055,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-28 13:14:15\"),\n\t\t\twant:   1582866855,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Timestamp(), \"Timestamp()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_TimestampMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int64\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\"),\n\t\t\twant:   1577855655000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-31 13:14:15\"),\n\t\t\twant:   1580447655000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-01 13:14:15\"),\n\t\t\twant:   1580534055000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-28 13:14:15\"),\n\t\t\twant:   1582866855000,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.TimestampMilli(), \"TimestampMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_TimestampMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int64\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\"),\n\t\t\twant:   1577855655000000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-31 13:14:15\"),\n\t\t\twant:   1580447655000000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-01 13:14:15\"),\n\t\t\twant:   1580534055000000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-28 13:14:15\"),\n\t\t\twant:   1582866855000000,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.TimestampMicro(), \"TimestampMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_TimestampNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int64\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\"),\n\t\t\twant:   1577855655000000000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-31 13:14:15\"),\n\t\t\twant:   1580447655000000000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-01 13:14:15\"),\n\t\t\twant:   1580534055000000000,\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-28 13:14:15\"),\n\t\t\twant:   1582866855000000000,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.TimestampNano(), \"TimestampNano()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Timezone(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Now(PRC),\n\t\t\twant:   \"CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Now(Tokyo),\n\t\t\twant:   \"JST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Timezone(), \"Timezone()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Location(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Now(PRC),\n\t\t\twant:   PRC,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Now(Tokyo),\n\t\t\twant:   Tokyo,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Location(), \"Location()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Offset(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Now(PRC),\n\t\t\twant:   28800,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Now(Tokyo),\n\t\t\twant:   32400,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Offset(), \"Offset()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Locale(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Now().SetLocale(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Now().SetLocale(\"en\"),\n\t\t\twant:   \"en\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Now().SetLocale(\"zh-CN\"),\n\t\t\twant:   \"zh-CN\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Locale(), \"Locale()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Age(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   int\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\"),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Now().AddYears(18),\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Now().SubYears(18),\n\t\t\twant:   18,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Age(), \"Age()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.2314453125,
          "content": "module github.com/dromara/carbon/v2\n\ngo 1.17\n\nrequire github.com/stretchr/testify v1.10.0\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 1.6572265625,
          "content": "github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "helper.go",
          "type": "blob",
          "size": 5.625,
          "content": "package carbon\n\nimport (\n\t\"bytes\"\n\t\"time\"\n)\n\n// week days\n// 工作日\nvar weekdays = map[string]time.Weekday{\n\tMonday:    time.Monday,\n\tTuesday:   time.Tuesday,\n\tWednesday: time.Wednesday,\n\tThursday:  time.Thursday,\n\tFriday:    time.Friday,\n\tSaturday:  time.Saturday,\n\tSunday:    time.Sunday,\n}\n\n// common formatting symbols\n// 常规格式化符号\nvar formats = map[byte]string{\n\t'd': \"02\",      // Day:    Day of the month, 2 digits with leading zeros. Eg: 01 to 31.\n\t'D': \"Mon\",     // Day:    A textual representation of a day, three letters. Eg: Mon through Sun.\n\t'j': \"2\",       // Day:    Day of the month without leading zeros. Eg: 1 to 31.\n\t'l': \"Monday\",  // Day:    A full textual representation of the day of the week. Eg: Sunday through Saturday.\n\t'F': \"January\", // Month:  A full textual representation of a month, such as January or March. Eg: January through December.\n\t'm': \"01\",      // Month:  Numeric representation of a month, with leading zeros. Eg: 01 through 12.\n\t'M': \"Jan\",     // Month:  A short textual representation of a month, three letters. Eg: Jan through Dec.\n\t'n': \"1\",       // Month:  Numeric representation of a month, without leading zeros. Eg: 1 through 12.\n\t'Y': \"2006\",    // Year:   A full numeric representation of a year, 4 digits. Eg: 1999 or 2003.\n\t'y': \"06\",      // Year:   A two digit representation of a year. Eg: 99 or 03.\n\t'a': \"pm\",      // Time:   Lowercase morning or afternoon sign. Eg: am or pm.\n\t'A': \"PM\",      // Time:   Uppercase morning or afternoon sign. Eg: AM or PM.\n\t'g': \"3\",       // Time:   12-hour format of an hour without leading zeros. Eg: 1 through 12.\n\t'h': \"03\",      // Time:   12-hour format of an hour with leading zeros. Eg: 01 through 12.\n\t'H': \"15\",      // Time:   24-hour format of an hour with leading zeros. Eg: 00 through 23.\n\t'i': \"04\",      // Time:   Minutes with leading zeros. Eg: 00 to 59.\n\t's': \"05\",      // Time:   Seconds with leading zeros. Eg: 00 through 59.\n\t'O': \"-0700\",   // Zone:   Difference to Greenwich time (GMT) in hours. Eg: +0200.\n\t'P': \"-07:00\",  // Zone:   Difference to Greenwich time (GMT) with colon between hours and minutes. Eg: +02:00.\n\t'T': \"MST\",     // Zone:   Timezone abbreviation. Eg: UTC, EST, MDT ...\n\n\t'U': \"timestamp\",      // Timestamp with second. Eg: 1699677240.\n\t'V': \"timestampMilli\", // TimestampMilli with second. Eg: 1596604455666.\n\t'X': \"timestampMicro\", // TimestampMicro with second. Eg: 1596604455666666.\n\t'Z': \"timestampNano\",  // TimestampNano with second. Eg: 1596604455666666666.\n}\n\n// common layout symbols\n// 常规布局模板符号\nvar layouts = []string{\n\tDayDateTimeLayout,\n\tDateTimeLayout, DateTimeNanoLayout, ShortDateTimeLayout, ShortDateTimeNanoLayout,\n\tDateLayout, DateNanoLayout, ShortDateLayout, ShortDateNanoLayout,\n\tISO8601Layout, ISO8601NanoLayout,\n\tRFC822Layout, RFC822ZLayout, RFC850Layout, RFC1123Layout, RFC1123ZLayout, RFC3339Layout, RFC3339NanoLayout, RFC1036Layout, RFC7231Layout,\n\tKitchenLayout,\n\tCookieLayout,\n\tANSICLayout,\n\tUnixDateLayout,\n\tRubyDateLayout,\n\t\"2006\",\n\t\"2006-1\", \"2006-1-2\", \"2006-1-2 15\", \"2006-1-2 15:4\", \"2006-1-2 15:4:5\", \"2006-1-2 15:4:5.999999999\",\n\t\"2006.1\", \"2006.1.2\", \"2006.1.2 15\", \"2006.1.2 15:4\", \"2006.1.2 15:4:5\", \"2006.1.2 15:4:5.999999999\",\n\t\"2006/1\", \"2006/1/2\", \"2006/1/2 15\", \"2006/1/2 15:4\", \"2006/1/2 15:4:5\", \"2006/1/2 15:4:5.999999999\",\n\t\"2006-01-02 15:04:05 -0700 MST\",\n\t\"2006-01-02 15:04:05PM MST\", \"2006-01-02 15:04:05.999999999PM MST\", \"2006-1-2 15:4:5PM MST\", \"2006-1-2 15:4:5.999999999PM MST\",\n\t\"2006-01-02 15:04:05 PM MST\", \"2006-01-02 15:04:05.999999999 PM MST\", \"2006-1-2 15:4:5 PM MST\", \"2006-1-2 15:4:5.999999999 PM MST\",\n\t\"1/2/2006\", \"1/2/2006 15\", \"1/2/2006 15:4\", \"1/2/2006 15:4:5\", \"1/2/2006 15:4:5.999999999\",\n\t\"2006-1-2 15:4:5 -0700 MST\", \"2006-1-2 15:4:5.999999999 -0700 MST\", \"2006-1-2 15:04:05 -0700 MST\", \"2006-1-2 15:04:05.999999999 -0700 MST\",\n\t\"2006-01-02T15:04:05\", \"2006-01-02T15:04:05.999999999\", \"2006-1-2T3:4:5\", \"2006-1-2T3:4:5.999999999\",\n\t\"2006-01-02T15:04:05Z07\", \"2006-01-02T15:04:05.999999999Z07\", \"2006-1-2T15:4:5Z07\", \"2006-1-2T15:4:5.999999999Z07\",\n\t\"2006-01-02T15:04:05Z07:00\", \"2006-01-02T15:04:05.999999999Z07:00\", \"2006-1-2T15:4:5Z07:00\", \"2006-1-2T15:4:5.999999999Z07:00\",\n\t\"2006-01-02T15:04:05-07:00\", \"2006-01-02T15:04:05.999999999-07:00\", \"2006-1-2T15:4:5-07:00\", \"2006-1-2T15:4:5.999999999-07:00\",\n\t\"2006-01-02T15:04:05-0700\", \"2006-01-02T15:04:05.999999999-0700\", \"2006-1-2T3:4:5-0700\", \"2006-1-2T3:4:5.999999999-0700\",\n\t\"20060102150405-07:00\", \"20060102150405.999999999-07:00\",\n\t\"20060102150405Z07\", \"20060102150405.999999999Z07\",\n\t\"20060102150405Z07:00\", \"20060102150405.999999999Z07:00\",\n}\n\n// converts format to layout.\n// format 转 layout\nfunc format2layout(format string) string {\n\tbuffer := bytes.NewBuffer(nil)\n\tfor i := 0; i < len(format); i++ {\n\t\tif layout, ok := formats[format[i]]; ok {\n\t\t\tbuffer.WriteString(layout)\n\t\t} else {\n\t\t\tswitch format[i] {\n\t\t\tcase '\\\\': // raw output, no parse\n\t\t\t\tbuffer.WriteByte(format[i+1])\n\t\t\t\ti++\n\t\t\t\tcontinue\n\t\t\tdefault:\n\t\t\t\tbuffer.WriteByte(format[i])\n\t\t\t}\n\t\t}\n\t}\n\treturn buffer.String()\n}\n\n// gets a Location instance by a timezone string.\n// 通过时区获取 Location 实例\nfunc getLocationByTimezone(timezone string) (*time.Location, error) {\n\tloc, err := time.LoadLocation(timezone)\n\tif err != nil {\n\t\terr = invalidTimezoneError(timezone)\n\t}\n\treturn loc, err\n}\n\n// parses as a Duration instance by a duration string.\n// 通过时长解析\nfunc parseByDuration(duration string) (time.Duration, error) {\n\ttd, err := time.ParseDuration(duration)\n\tif err != nil {\n\t\terr = invalidDurationError(duration)\n\t}\n\treturn td, err\n}\n\n// gets absolute value.\n// 获取绝对值\nfunc getAbsValue(value int64) int64 {\n\treturn (value ^ value>>31) - value>>31\n}\n"
        },
        {
          "name": "lang",
          "type": "tree",
          "content": null
        },
        {
          "name": "language.go",
          "type": "blob",
          "size": 2.396484375,
          "content": "package carbon\n\nimport (\n\t\"embed\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n)\n\n//go:embed lang\nvar fs embed.FS\n\nvar (\n\t// invalid locale error\n\t// 无效的区域错误\n\tinvalidLocaleError = func(locale string) error {\n\t\treturn fmt.Errorf(\"invalid locale file %q, please make sure the json file exists and is valid\", locale)\n\t}\n)\n\n// Language defines a Language struct.\n// 定义 Language 结构体\ntype Language struct {\n\tdir       string\n\tlocale    string\n\tresources map[string]string\n\tError     error\n\trw        *sync.RWMutex\n}\n\n// NewLanguage returns a new Language instance.\n// 初始化 Language 结构体\nfunc NewLanguage() *Language {\n\treturn &Language{\n\t\tdir:       \"lang/\",\n\t\tlocale:    defaultLocale,\n\t\tresources: make(map[string]string),\n\t\trw:        new(sync.RWMutex),\n\t}\n}\n\n// SetLanguage sets language.\n// 设置语言对象\nfunc SetLanguage(lang *Language) Carbon {\n\tc := NewCarbon()\n\tlang.SetLocale(lang.locale)\n\tc.lang, c.Error = lang, lang.Error\n\treturn c\n}\n\n// SetLocale sets language locale.\n// 设置区域\nfunc (lang *Language) SetLocale(locale string) *Language {\n\tlang.rw.Lock()\n\tdefer lang.rw.Unlock()\n\n\tif len(lang.resources) != 0 {\n\t\treturn lang\n\t}\n\tlang.locale = locale\n\tfileName := lang.dir + locale + \".json\"\n\tbytes, err := fs.ReadFile(fileName)\n\tif err != nil {\n\t\tlang.Error = invalidLocaleError(fileName)\n\t\treturn lang\n\t}\n\t_ = json.Unmarshal(bytes, &lang.resources)\n\treturn lang\n}\n\n// SetResources sets language resources.\n// 设置资源\nfunc (lang *Language) SetResources(resources map[string]string) *Language {\n\tlang.rw.Lock()\n\tdefer lang.rw.Unlock()\n\n\tif len(lang.resources) == 0 {\n\t\tlang.resources = resources\n\t\treturn lang\n\t}\n\tfor k, v := range resources {\n\t\tif _, ok := lang.resources[k]; ok {\n\t\t\tlang.resources[k] = v\n\t\t}\n\t}\n\treturn lang\n}\n\n// returns a translated string.\n// 翻译转换\nfunc (lang *Language) translate(unit string, value int64) string {\n\tif len(lang.resources) == 0 {\n\t\tlang.SetLocale(defaultLocale)\n\t}\n\tslice := strings.Split(lang.resources[unit], \"|\")\n\tnumber := getAbsValue(value)\n\tif len(slice) == 1 {\n\t\treturn strings.Replace(slice[0], \"%d\", strconv.FormatInt(value, 10), 1)\n\t}\n\tif int64(len(slice)) <= number {\n\t\treturn strings.Replace(slice[len(slice)-1], \"%d\", strconv.FormatInt(value, 10), 1)\n\t}\n\tif !strings.Contains(slice[number-1], \"%d\") && value < 0 {\n\t\treturn \"-\" + slice[number-1]\n\t}\n\treturn strings.Replace(slice[number-1], \"%d\", strconv.FormatInt(value, 10), 1)\n}\n"
        },
        {
          "name": "language_bench_test.go",
          "type": "blob",
          "size": 0.8671875,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_SetLanguage(b *testing.B) {\n\tlang := NewLanguage()\n\tfor n := 0; n < b.N; n++ {\n\t\tSetLanguage(lang)\n\t}\n}\n\nfunc BenchmarkCarbon_NewLanguage(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tNewLanguage()\n\t}\n}\n\nfunc BenchmarkLanguage_SetLocale(b *testing.B) {\n\tl := NewLanguage()\n\tfor n := 0; n < b.N; n++ {\n\t\tl.SetLocale(\"zh-CN\")\n\t}\n}\n\nfunc BenchmarkLanguage_SetResources(b *testing.B) {\n\tl := NewLanguage()\n\tresources := map[string]string{\n\t\t\"seasons\":  \"spring|summer|autumn|winter\",\n\t\t\"year\":     \"1 yr|%d yrs\",\n\t\t\"month\":    \"1 mo|%d mos\",\n\t\t\"week\":     \"%dw\",\n\t\t\"day\":      \"%dd\",\n\t\t\"hour\":     \"%dh\",\n\t\t\"minute\":   \"%dm\",\n\t\t\"second\":   \"%ds\",\n\t\t\"now\":      \"just now\",\n\t\t\"ago\":      \"%s ago\",\n\t\t\"from_now\": \"in %s\",\n\t\t\"before\":   \"%s before\",\n\t\t\"after\":    \"%s after\",\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tl.SetResources(resources)\n\t}\n}\n"
        },
        {
          "name": "language_unit_test.go",
          "type": "blob",
          "size": 4.4970703125,
          "content": "package carbon\n\nimport (\n\t\"strconv\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestLanguage_SetLocale(t *testing.T) {\n\tassert := assert.New(t)\n\n\ttests := []struct {\n\t\tinput    string\n\t\tlocale   string\n\t\texpected string\n\t}{\n\t\t0: {\"now\", \"en\", \"1 day after\"},\n\t\t1: {\"tomorrow\", \"zh-CN\", \"1 天后\"},\n\t}\n\n\tfor index, test := range tests {\n\t\tlang := NewLanguage()\n\t\tlang.SetLocale(test.locale)\n\t\tassert.Equal(test.expected, SetLanguage(lang).Parse(test.input).AddDays(1).DiffForHumans(Parse(test.input)), \"Current test index is \"+strconv.Itoa(index))\n\t}\n}\n\nfunc TestLanguage_SetResources1(t *testing.T) {\n\tassert := assert.New(t)\n\n\tlang := NewLanguage()\n\tresources := map[string]string{\n\t\t\"seasons\":  \"spring|summer|autumn|winter\",\n\t\t\"year\":     \"1 yr|%d yrs\",\n\t\t\"month\":    \"1 mo|%d mos\",\n\t\t\"week\":     \"%dw\",\n\t\t\"day\":      \"%dd\",\n\t\t\"hour\":     \"%dh\",\n\t\t\"minute\":   \"%dm\",\n\t\t\"second\":   \"%ds\",\n\t\t\"now\":      \"just now\",\n\t\t\"ago\":      \"%s ago\",\n\t\t\"from_now\": \"in %s\",\n\t\t\"before\":   \"%s before\",\n\t\t\"after\":    \"%s after\",\n\t}\n\tlang.SetLocale(\"en\").SetResources(resources)\n\n\ttests := []struct {\n\t\tinput1   string\n\t\tinput2   string\n\t\texpected string\n\t}{\n\t\t0: {\"2020-08-05 13:14:15\", \"2020-08-05 13:14:15\", \"just now\"},\n\t\t1: {\"2020-08-05 13:14:15\", \"2021-08-05 13:14:15\", \"1 yr before\"},\n\t\t2: {\"2020-08-05 13:14:15\", \"2019-08-05 13:14:15\", \"1 yr after\"},\n\t\t3: {\"2020-08-05 13:14:15\", \"2030-08-05 13:14:15\", \"10 yrs before\"},\n\t\t4: {\"2020-08-05 13:14:15\", \"2010-08-05 13:14:15\", \"10 yrs after\"},\n\n\t\t5: {\"2020-08-05 13:14:15\", \"2020-09-05 13:14:15\", \"1 mo before\"},\n\t\t6: {\"2020-08-05 13:14:15\", \"2020-07-05 13:14:15\", \"1 mo after\"},\n\t\t7: {\"2020-08-05 13:14:15\", \"2021-06-05 13:14:15\", \"10 mos before\"},\n\t\t8: {\"2020-08-05 13:14:15\", \"2019-10-05 13:14:15\", \"10 mos after\"},\n\n\t\t9:  {\"2020-08-05 13:14:15\", \"2020-08-06 13:14:15\", \"1d before\"},\n\t\t10: {\"2020-08-05 13:14:15\", \"2020-08-04 13:14:15\", \"1d after\"},\n\t\t11: {\"2020-08-05 13:14:15\", \"2020-08-15 13:14:15\", \"1w before\"},\n\t\t12: {\"2020-08-05 13:14:15\", \"2020-07-26 13:14:15\", \"1w after\"},\n\n\t\t13: {\"2020-08-05 13:14:15\", \"2020-08-05 14:14:15\", \"1h before\"},\n\t\t14: {\"2020-08-05 13:14:15\", \"2020-08-05 12:14:15\", \"1h after\"},\n\t\t15: {\"2020-08-05 13:14:15\", \"2020-08-05 23:14:15\", \"10h before\"},\n\t\t16: {\"2020-08-05 13:14:15\", \"2020-08-05 03:14:15\", \"10h after\"},\n\n\t\t17: {\"2020-08-05 13:14:15\", \"2020-08-05 13:15:15\", \"1m before\"},\n\t\t18: {\"2020-08-05 13:14:15\", \"2020-08-05 13:13:15\", \"1m after\"},\n\t\t19: {\"2020-08-05 13:14:15\", \"2020-08-05 13:24:15\", \"10m before\"},\n\t\t20: {\"2020-08-05 13:14:15\", \"2020-08-05 13:04:15\", \"10m after\"},\n\n\t\t21: {\"2020-08-05 13:14:15\", \"2020-08-05 13:14:16\", \"1s before\"},\n\t\t22: {\"2020-08-05 13:14:15\", \"2020-08-05 13:14:14\", \"1s after\"},\n\t\t23: {\"2020-08-05 13:14:15\", \"2020-08-05 13:14:25\", \"10s before\"},\n\t\t24: {\"2020-08-05 13:14:15\", \"2020-08-05 13:14:05\", \"10s after\"},\n\t}\n\n\tc := SetLanguage(lang)\n\tfor index, test := range tests {\n\t\tc1 := c.Parse(test.input1)\n\t\tc2 := c.Parse(test.input2)\n\t\tassert.NoError(c1.Error)\n\t\tassert.NoError(c2.Error)\n\t\tassert.Equal(test.expected, c1.DiffForHumans(c2), \"Current test index is \"+strconv.Itoa(index))\n\t}\n}\n\nfunc TestLanguage_SetResources2(t *testing.T) {\n\tassert := assert.New(t)\n\n\tlang := NewLanguage()\n\n\tresources := map[string]string{\n\t\t\"xxx\": \"xxx\",\n\t}\n\tlang.SetResources(resources)\n\n\ttests := []struct {\n\t\tinput    string\n\t\texpected string\n\t}{\n\t\t0: {\"\", \"\"},\n\t\t1: {\"0\", \"\"},\n\t\t2: {\"0000-00-00\", \"\"},\n\t\t3: {\"00:00:00\", \"\"},\n\n\t\t4: {\"0000-00-00 00:00:00\", \"\"},\n\t\t5: {\"2021-08-05 13:14:15\", \"\"},\n\t}\n\n\tc := SetLanguage(lang)\n\n\tfor index, test := range tests {\n\t\tassert.Equal(test.expected, c.Parse(test.input).DiffForHumans(), \"Current test index is \"+strconv.Itoa(index))\n\t}\n\n\tfor index, test := range tests {\n\t\tassert.Equal(test.expected, c.Parse(test.input).Constellation(), \"Current test index is \"+strconv.Itoa(index))\n\t}\n\n\tfor index, test := range tests {\n\t\tassert.Equal(test.expected, c.Parse(test.input).Season(), \"Current test index is \"+strconv.Itoa(index))\n\t}\n\n\tfor index, test := range tests {\n\t\tassert.Equal(test.expected, c.Parse(test.input).ToWeekString(), \"Current test index is \"+strconv.Itoa(index))\n\t}\n\n\tfor index, test := range tests {\n\t\tassert.Equal(test.expected, c.Parse(test.input).ToShortWeekString(), \"Current test index is \"+strconv.Itoa(index))\n\t}\n\n\tfor index, test := range tests {\n\t\tassert.Equal(test.expected, c.Parse(test.input).ToMonthString(), \"Current test index is \"+strconv.Itoa(index))\n\t}\n\n\tfor index, test := range tests {\n\t\tassert.Equal(test.expected, c.Parse(test.input).ToShortMonthString(), \"Current test index is \"+strconv.Itoa(index))\n\t}\n}\n"
        },
        {
          "name": "outputer.go",
          "type": "blob",
          "size": 25.9599609375,
          "content": "package carbon\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// String implements the interface Stringer for Carbon struct.\n// 实现 Stringer 接口\nfunc (c Carbon) String() string {\n\treturn c.Layout(c.layout, c.Location())\n}\n\n// GoString implements fmt.GoStringer and formats c to be printed in Go source code.\n// 实现 fmt.GoStringer 接口，并格式化 c 以在 Go 源代码中打印\nfunc (c Carbon) GoString() string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\treturn c.StdTime().GoString()\n}\n\n// ToString outputs a string in \"2006-01-02 15:04:05.999999999 -0700 MST\" layout.\n// 输出 \"2006-01-02 15:04:05.999999999 -0700 MST\" 格式字符串\nfunc (c Carbon) ToString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().String()\n}\n\n// ToMonthString outputs a string in month layout like \"January\", i18n is supported.\n// 输出完整月份字符串，支持i18n\nfunc (c Carbon) ToMonthString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif len(c.lang.resources) == 0 {\n\t\tc.lang.SetLocale(defaultLocale)\n\t}\n\tc.lang.rw.RLock()\n\tdefer c.lang.rw.RUnlock()\n\tif resources, ok := c.lang.resources[\"months\"]; ok {\n\t\tslice := strings.Split(resources, \"|\")\n\t\tif len(slice) == MonthsPerYear {\n\t\t\treturn slice[c.Month()-1]\n\t\t}\n\t}\n\treturn \"\"\n}\n\n// ToShortMonthString outputs a string in short month layout like \"Jan\", i18n is supported.\n// 输出缩写月份字符串，支持i18n\nfunc (c Carbon) ToShortMonthString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif len(c.lang.resources) == 0 {\n\t\tc.lang.SetLocale(defaultLocale)\n\t}\n\tc.lang.rw.RLock()\n\tdefer c.lang.rw.RUnlock()\n\tif resources, ok := c.lang.resources[\"short_months\"]; ok {\n\t\tslice := strings.Split(resources, \"|\")\n\t\tif len(slice) == MonthsPerYear {\n\t\t\treturn slice[c.Month()-1]\n\t\t}\n\t}\n\treturn \"\"\n}\n\n// ToWeekString outputs a string in week layout like \"Sunday\", i18n is supported.\n// 输出完整星期字符串，支持i18n\nfunc (c Carbon) ToWeekString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif len(c.lang.resources) == 0 {\n\t\tc.lang.SetLocale(defaultLocale)\n\t}\n\tc.lang.rw.RLock()\n\tdefer c.lang.rw.RUnlock()\n\tif resources, ok := c.lang.resources[\"weeks\"]; ok {\n\t\tslice := strings.Split(resources, \"|\")\n\t\tif len(slice) == DaysPerWeek {\n\t\t\treturn slice[c.DayOfWeek()%DaysPerWeek]\n\t\t}\n\t}\n\treturn \"\"\n}\n\n// ToShortWeekString outputs a string in short week layout like \"Sun\", i18n is supported.\n// 输出缩写星期字符串，支持i18n\nfunc (c Carbon) ToShortWeekString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif len(c.lang.resources) == 0 {\n\t\tc.lang.SetLocale(defaultLocale)\n\t}\n\tc.lang.rw.RLock()\n\tdefer c.lang.rw.RUnlock()\n\tif resources, ok := c.lang.resources[\"short_weeks\"]; ok {\n\t\tslice := strings.Split(resources, \"|\")\n\t\tif len(slice) == DaysPerWeek {\n\t\t\treturn slice[c.DayOfWeek()%DaysPerWeek]\n\t\t}\n\t}\n\treturn \"\"\n}\n\n// ToDayDateTimeString outputs a string in \"Mon, Jan 2, 2006 3:04 PM\" layout.\n// 输出 \"Mon, Jan 2, 2006 3:04 PM\" 格式字符串\nfunc (c Carbon) ToDayDateTimeString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(DayDateTimeLayout)\n}\n\n// ToDateTimeString outputs a string in \"2006-01-02 15:04:05\" layout.\n// 输出 \"2006-01-02 15:04:05\" 格式字符串\nfunc (c Carbon) ToDateTimeString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(DateTimeLayout)\n}\n\n// ToDateTimeMilliString outputs a string in \"2006-01-02 15:04:05.999\" layout.\n// 输出 \"2006-01-02 15:04:05.999\" 格式字符串\nfunc (c Carbon) ToDateTimeMilliString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(DateTimeMilliLayout)\n}\n\n// ToDateTimeMicroString outputs a string in \"2006-01-02 15:04:05.999999\" layout.\n// 输出 \"2006-01-02 15:04:05.999999\" 格式字符串\nfunc (c Carbon) ToDateTimeMicroString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(DateTimeMicroLayout)\n}\n\n// ToDateTimeNanoString outputs a string in \"2006-01-02 15:04:05.999999999\" layout.\n// 输出 \"2006-01-02 15:04:05.999999999\" 格式字符串\nfunc (c Carbon) ToDateTimeNanoString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(DateTimeNanoLayout)\n}\n\n// ToShortDateTimeString outputs a string in \"20060102150405\" layout.\n// 输出 \"20060102150405\" 格式字符串\nfunc (c Carbon) ToShortDateTimeString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortDateTimeLayout)\n}\n\n// ToShortDateTimeMilliString outputs a string in \"20060102150405.999\" layout.\n// 输出 \"20060102150405.999\" 格式字符串\nfunc (c Carbon) ToShortDateTimeMilliString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortDateTimeMilliLayout)\n}\n\n// ToShortDateTimeMicroString outputs a string in \"20060102150405.999999\" layout.\n// 输出 \"20060102150405.999999\" 格式字符串\nfunc (c Carbon) ToShortDateTimeMicroString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortDateTimeMicroLayout)\n}\n\n// ToShortDateTimeNanoString outputs a string in \"20060102150405.999999999\" layout.\n// 输出 \"20060102150405.999999999\" 格式字符串\nfunc (c Carbon) ToShortDateTimeNanoString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortDateTimeNanoLayout)\n}\n\n// ToDateString outputs a string in \"2006-01-02\" layout.\n// 输出 \"2006-01-02\" 格式字符串\nfunc (c Carbon) ToDateString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(DateLayout)\n}\n\n// ToDateMilliString outputs a string in \"2006-01-02.999\" layout.\n// 输出 \"2006-01-02.999\" 格式字符串\nfunc (c Carbon) ToDateMilliString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(DateMilliLayout)\n}\n\n// ToDateMicroString outputs a string in \"2006-01-02.999999\" layout.\n// 输出 \"2006-01-02.999999\" 格式字符串\nfunc (c Carbon) ToDateMicroString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(DateMicroLayout)\n}\n\n// ToDateNanoString outputs a string in \"2006-01-02.999999999\" layout.\n// 输出 \"2006-01-02.999999999\" 格式字符串\nfunc (c Carbon) ToDateNanoString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(DateNanoLayout)\n}\n\n// ToShortDateString outputs a string in \"20060102\" layout.\n// 输出 \"20060102\" 格式字符串\nfunc (c Carbon) ToShortDateString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortDateLayout)\n}\n\n// ToShortDateMilliString outputs a string in \"20060102.999\" layout.\n// 输出 \"20060102.999\" 格式字符串\nfunc (c Carbon) ToShortDateMilliString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortDateMilliLayout)\n}\n\n// ToShortDateMicroString outputs a string in \"20060102.999999\" layout.\n// 输出 \"20060102.999999\" 格式字符串\nfunc (c Carbon) ToShortDateMicroString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortDateMicroLayout)\n}\n\n// ToShortDateNanoString outputs a string in \"20060102.999999999\" layout.\n// 输出 \"20060102.999999999\" 格式字符串\nfunc (c Carbon) ToShortDateNanoString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortDateNanoLayout)\n}\n\n// ToTimeString outputs a string in \"15:04:05\" layout.\n// 输出 \"15:04:05\" 格式字符串\nfunc (c Carbon) ToTimeString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(TimeLayout)\n}\n\n// ToTimeMilliString outputs a string in \"15:04:05.999\" layout.\n// 输出 \"15:04:05.999\" 格式字符串\nfunc (c Carbon) ToTimeMilliString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(TimeMilliLayout)\n}\n\n// ToTimeMicroString outputs a string in \"15:04:05.999999\" layout.\n// 输出 \"15:04:05.999999\" 格式字符串\nfunc (c Carbon) ToTimeMicroString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(TimeMicroLayout)\n}\n\n// ToTimeNanoString outputs a string in \"15:04:05.999999999\" layout.\n// 输出 \"15:04:05.999999999\" 格式字符串\nfunc (c Carbon) ToTimeNanoString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(TimeNanoLayout)\n}\n\n// ToShortTimeString outputs a string in \"150405\" layout.\n// 输出 \"150405\" 格式字符串\nfunc (c Carbon) ToShortTimeString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortTimeLayout)\n}\n\n// ToShortTimeMilliString outputs a string in \"150405.999\" layout.\n// 输出 \"150405.999\" 格式字符串\nfunc (c Carbon) ToShortTimeMilliString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortTimeMilliLayout)\n}\n\n// ToShortTimeMicroString outputs a string in \"150405.999999\" layout.\n// 输出 \"150405.999999\" 格式字符串\nfunc (c Carbon) ToShortTimeMicroString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortTimeMicroLayout)\n}\n\n// ToShortTimeNanoString outputs a string in \"150405.999999999\" layout.\n// 输出 \"150405.999999999\" 格式字符串\nfunc (c Carbon) ToShortTimeNanoString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ShortTimeNanoLayout)\n}\n\n// ToAtomString outputs a string in \"2006-01-02T15:04:05Z07:00\" layout.\n// 输出 \"2006-01-02T15:04:05Z07:00\" 格式字符串\nfunc (c Carbon) ToAtomString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(AtomLayout)\n}\n\n// ToAnsicString outputs a string in \"Mon Jan _2 15:04:05 2006\" layout.\n// 输出 \"Mon Jan _2 15:04:05 2006\" 格式字符串\nfunc (c Carbon) ToAnsicString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ANSICLayout)\n}\n\n// ToCookieString outputs a string in \"Monday, 02-Jan-2006 15:04:05 MST\" layout.\n// 输出 \"Monday, 02-Jan-2006 15:04:05 MST\" 格式字符串\nfunc (c Carbon) ToCookieString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(CookieLayout)\n}\n\n// ToRssString outputs a string in \"Mon, 02 Jan 2006 15:04:05 -0700\" format.\n// 输出 \"Mon, 02 Jan 2006 15:04:05 -0700\" 格式字符串\nfunc (c Carbon) ToRssString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RssLayout)\n}\n\n// ToW3cString outputs a string in \"2006-01-02T15:04:05Z07:00\" layout.\n// 输出 \"2006-01-02T15:04:05Z07:00\" 格式字符串\nfunc (c Carbon) ToW3cString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(W3cLayout)\n}\n\n// ToUnixDateString outputs a string in \"Mon Jan _2 15:04:05 MST 2006\" layout.\n// 输出 \"Mon Jan _2 15:04:05 MST 2006\" 格式字符串\nfunc (c Carbon) ToUnixDateString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(UnixDateLayout)\n}\n\n// ToRubyDateString outputs a string in \"Mon Jan 02 15:04:05 -0700 2006\" layout.\n// 输出 \"Mon Jan 02 15:04:05 -0700 2006\" 格式字符串\nfunc (c Carbon) ToRubyDateString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RubyDateLayout)\n}\n\n// ToKitchenString outputs a string in \"3:04PM\" layout.\n// 输出 \"3:04PM\" 格式字符串\nfunc (c Carbon) ToKitchenString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(KitchenLayout)\n}\n\n// ToIso8601String outputs a string in \"2006-01-02T15:04:05-07:00\" layout.\n// 输出 \"2006-01-02T15:04:05-07:00\" 格式字符串\nfunc (c Carbon) ToIso8601String(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ISO8601Layout)\n}\n\n// ToIso8601MilliString outputs a string in \"2006-01-02T15:04:05.999-07:00\" layout.\n// 输出 \"2006-01-02T15:04:05.999-07:00\" 格式字符串\nfunc (c Carbon) ToIso8601MilliString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ISO8601MilliLayout)\n}\n\n// ToIso8601MicroString outputs a string in \"2006-01-02T15:04:05.999999-07:00\" layout.\n// 输出 \"2006-01-02T15:04:05.999999-07:00\" 格式字符串\nfunc (c Carbon) ToIso8601MicroString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ISO8601MicroLayout)\n}\n\n// ToIso8601NanoString outputs a string in \"2006-01-02T15:04:05.999999999-07:00\" layout.\n// 输出 \"2006-01-02T15:04:05.999999999-07:00\" 格式字符串\nfunc (c Carbon) ToIso8601NanoString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ISO8601NanoLayout)\n}\n\n// ToIso8601ZuluString outputs a string in \"2006-01-02T15:04:05Z\" layout.\n// 输出 \"2006-01-02T15:04:05Z\" 格式字符串\nfunc (c Carbon) ToIso8601ZuluString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ISO8601ZuluLayout)\n}\n\n// ToIso8601ZuluMilliString outputs a string in \"2006-01-02T15:04:05.999Z\" layout.\n// 输出 \"2006-01-02T15:04:05.999Z\" 格式字符串\nfunc (c Carbon) ToIso8601ZuluMilliString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ISO8601ZuluMilliLayout)\n}\n\n// ToIso8601ZuluMicroString outputs a string in \"2006-01-02T15:04:05.999999Z\" layout.\n// 输出 \"2006-01-02T15:04:05.999999Z\" 格式字符串\nfunc (c Carbon) ToIso8601ZuluMicroString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ISO8601ZuluMicroLayout)\n}\n\n// ToIso8601ZuluNanoString outputs a string in \"2006-01-02T15:04:05.999999999Z\" layout.\n// 输出 \"2006-01-02T15:04:05.999999999Z\" 格式字符串\nfunc (c Carbon) ToIso8601ZuluNanoString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(ISO8601ZuluNanoLayout)\n}\n\n// ToRfc822String outputs a string in \"02 Jan 06 15:04 MST\" layout.\n// 输出 \"02 Jan 06 15:04 MST\" 格式字符串\nfunc (c Carbon) ToRfc822String(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC822Layout)\n}\n\n// ToRfc822zString outputs a string in \"02 Jan 06 15:04 -0700\" layout.\n// 输出 \"02 Jan 06 15:04 -0700\" 格式字符串\nfunc (c Carbon) ToRfc822zString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC822ZLayout)\n}\n\n// ToRfc850String outputs a string in \"Monday, 02-Jan-06 15:04:05 MST\" layout.\n// 输出 \"Monday, 02-Jan-06 15:04:05 MST\" 格式字符串\nfunc (c Carbon) ToRfc850String(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC850Layout)\n}\n\n// ToRfc1036String outputs a string in \"Mon, 02 Jan 06 15:04:05 -0700\" layout.\n// 输出 \"Mon, 02 Jan 06 15:04:05 -0700\" 格式字符串\nfunc (c Carbon) ToRfc1036String(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC1036Layout)\n}\n\n// ToRfc1123String outputs a string in \"Mon, 02 Jan 2006 15:04:05 MST\" layout.\n// 输出 \"Mon, 02 Jan 2006 15:04:05 MST\" 格式字符串\nfunc (c Carbon) ToRfc1123String(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC1123Layout)\n}\n\n// ToRfc1123zString outputs a string in \"Mon, 02 Jan 2006 15:04:05 -0700\" layout.\n// 输出 \"Mon, 02 Jan 2006 15:04:05 -0700\" 格式字符串\nfunc (c Carbon) ToRfc1123zString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC1123ZLayout)\n}\n\n// ToRfc2822String outputs a string in \"Mon, 02 Jan 2006 15:04:05 -0700\" layout.\n// 输出 \"Mon, 02 Jan 2006 15:04:05 -0700\" 格式字符串\nfunc (c Carbon) ToRfc2822String(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC2822Layout)\n}\n\n// ToRfc3339String outputs a string in \"2006-01-02T15:04:05Z07:00\" layout.\n// 输出 \"2006-01-02T15:04:05Z07:00\" 格式字符串\nfunc (c Carbon) ToRfc3339String(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC3339Layout)\n}\n\n// ToRfc3339MilliString outputs a string in \"2006-01-02T15:04:05.999Z07:00\" layout.\n// 输出 \"2006-01-02T15:04:05.999Z07:00\" 格式字符串\nfunc (c Carbon) ToRfc3339MilliString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC3339MilliLayout)\n}\n\n// ToRfc3339MicroString outputs a string in \"2006-01-02T15:04:05.999999Z07:00\" layout.\n// 输出 \"2006-01-02T15:04:05.999999Z07:00\" 格式字符串\nfunc (c Carbon) ToRfc3339MicroString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC3339MicroLayout)\n}\n\n// ToRfc3339NanoString outputs a string in \"2006-01-02T15:04:05.999999999Z07:00\" layout.\n// 输出 \"2006-01-02T15:04:05.999999999Z07:00\" 格式字符串\nfunc (c Carbon) ToRfc3339NanoString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC3339NanoLayout)\n}\n\n// ToRfc7231String outputs a string in \"Mon, 02 Jan 2006 15:04:05 GMT\" layout.\n// 输出 \"Mon, 02 Jan 2006 15:04:05 GMT\" 格式字符串\nfunc (c Carbon) ToRfc7231String(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(RFC7231Layout)\n}\n\n// ToFormattedDateString outputs a string in \"Jan 2, 2006\" layout.\n// 输出 \"Jan 2, 2006\" 格式字符串\nfunc (c Carbon) ToFormattedDateString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(FormattedDateLayout)\n}\n\n// ToFormattedDayDateString outputs a string in \"Mon, Jan 2, 2006\" layout.\n// 输出 \"Jan 2, 2006\" 格式字符串\nfunc (c Carbon) ToFormattedDayDateString(timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(FormattedDayDateLayout)\n}\n\n// Layout outputs a string by layout.\n// 输出指定布局模板的时间字符串\nfunc (c Carbon) Layout(layout string, timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\treturn c.StdTime().Format(layout)\n}\n\n// Format outputs a string by format.\n// 输出指定格式模板的时间字符串\nfunc (c Carbon) Format(format string, timezone ...string) string {\n\tif c.IsInvalid() {\n\t\treturn \"\"\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tbuffer := bytes.NewBuffer(nil)\n\tfor i := 0; i < len(format); i++ {\n\t\tif layout, ok := formats[format[i]]; ok {\n\t\t\t// support for i18n specific symbols\n\t\t\tswitch format[i] {\n\t\t\tcase 'l': // week, such as Monday\n\t\t\t\tbuffer.WriteString(c.ToWeekString())\n\t\t\tcase 'D': // short week, such as Mon\n\t\t\t\tbuffer.WriteString(c.ToShortWeekString())\n\t\t\tcase 'F': // month, such as January\n\t\t\t\tbuffer.WriteString(c.ToMonthString())\n\t\t\tcase 'M': // short month, such as Jan\n\t\t\t\tbuffer.WriteString(c.ToShortMonthString())\n\t\t\tcase 'U': // timestamp with second, such as 1596604455\n\t\t\t\tbuffer.WriteString(strconv.FormatInt(c.Timestamp(), 10))\n\t\t\tcase 'V': // timestamp with millisecond, such as 1596604455000\n\t\t\t\tbuffer.WriteString(strconv.FormatInt(c.TimestampMilli(), 10))\n\t\t\tcase 'X': // timestamp with microsecond, such as 1596604455000000\n\t\t\t\tbuffer.WriteString(strconv.FormatInt(c.TimestampMicro(), 10))\n\t\t\tcase 'Z': // timestamp with nanoseconds, such as 1596604455000000000\n\t\t\t\tbuffer.WriteString(strconv.FormatInt(c.TimestampNano(), 10))\n\t\t\tdefault: // common symbols\n\t\t\t\tbuffer.WriteString(c.StdTime().Format(layout))\n\t\t\t}\n\t\t} else {\n\t\t\tswitch format[i] {\n\t\t\tcase '\\\\': // raw output, no parse\n\t\t\t\tbuffer.WriteByte(format[i+1])\n\t\t\t\ti++\n\t\t\t\tcontinue\n\t\t\tcase 'W': // week number of the year in ISO-8601 format, ranging from 01-52\n\t\t\t\tweek := fmt.Sprintf(\"%02d\", c.WeekOfYear())\n\t\t\t\tbuffer.WriteString(week)\n\t\t\tcase 'N': // day of the week as a number in ISO-8601 format, ranging from 01-7\n\t\t\t\tweek := fmt.Sprintf(\"%02d\", c.DayOfWeek())\n\t\t\t\tbuffer.WriteString(week)\n\t\t\tcase 'S': // abbreviated suffix for the day of the month, such as st, nd, rd, th\n\t\t\t\tsuffix := \"th\"\n\t\t\t\tswitch c.Day() {\n\t\t\t\tcase 1, 21, 31:\n\t\t\t\t\tsuffix = \"st\"\n\t\t\t\tcase 2, 22:\n\t\t\t\t\tsuffix = \"nd\"\n\t\t\t\tcase 3, 23:\n\t\t\t\t\tsuffix = \"rd\"\n\t\t\t\t}\n\t\t\t\tbuffer.WriteString(suffix)\n\t\t\tcase 'L': // whether it is a leap year, if it is a leap year, it is 1, otherwise it is 0\n\t\t\t\tif c.IsLeapYear() {\n\t\t\t\t\tbuffer.WriteString(\"1\")\n\t\t\t\t} else {\n\t\t\t\t\tbuffer.WriteString(\"0\")\n\t\t\t\t}\n\t\t\tcase 'G': // 24-hour format, no padding, ranging from 0-23\n\t\t\t\tbuffer.WriteString(strconv.Itoa(c.Hour()))\n\t\t\tcase 'v': // current millisecond, such as 999\n\t\t\t\ts := c.Layout(\".999\")\n\t\t\t\tbuffer.WriteString(strings.Trim(s, \".\"))\n\t\t\tcase 'u': // current microsecond, such as 999999\n\t\t\t\ts := c.Layout(\".999999\")\n\t\t\t\tbuffer.WriteString(strings.Trim(s, \".\"))\n\t\t\tcase 'x': // current nanosecond, such as 999999999\n\t\t\t\ts := c.Layout(\".999999999\")\n\t\t\t\tbuffer.WriteString(strings.Trim(s, \".\"))\n\t\t\tcase 'w': // day of the week represented by the number, ranging from 0-6\n\t\t\t\tbuffer.WriteString(strconv.Itoa(c.DayOfWeek() - 1))\n\t\t\tcase 't': // number of days in the month, ranging from 28-31\n\t\t\t\tbuffer.WriteString(strconv.Itoa(c.DaysInMonth()))\n\t\t\tcase 'z': // day of the year, ranging from 0-365\n\t\t\t\tbuffer.WriteString(strconv.Itoa(c.DayOfYear() - 1))\n\t\t\tcase 'e': // current location, such as UTC，GMT，Atlantic/Azores\n\t\t\t\tbuffer.WriteString(c.Location())\n\t\t\tcase 'Q': // current quarter, ranging from 1-4\n\t\t\t\tbuffer.WriteString(strconv.Itoa(c.Quarter()))\n\t\t\tcase 'C': // current century, ranging from 0-99\n\t\t\t\tbuffer.WriteString(strconv.Itoa(c.Century()))\n\t\t\tdefault:\n\t\t\t\tbuffer.WriteByte(format[i])\n\t\t\t}\n\t\t}\n\t}\n\treturn buffer.String()\n}\n"
        },
        {
          "name": "outputer_bench_test.go",
          "type": "blob",
          "size": 8.12890625,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_String(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.String()\n\t}\n}\n\nfunc BenchmarkCarbon_ToString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToMonthString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToMonthString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortMonthString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortMonthString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToWeekString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToWeekString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortWeekString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToWeekString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToDayDateTimeString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToDayDateTimeString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToDateTimeString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToDateTimeString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToDateTimeMilliString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToDateTimeMilliString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToDateTimeMicroString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToDateTimeMicroString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToDateTimeNanoString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToDateTimeNanoString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortDateTimeString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortDateTimeString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortDateTimeMilliString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortDateTimeString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortDateTimeMicroString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortDateTimeMicroString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortDateTimeNanoString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortDateTimeNanoString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToDateString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToDateString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToDateMilliString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToDateMilliString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToDateMicroString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToDateMicroString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToDateNanoString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToDateNanoString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortDateString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortDateString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortDateMilliString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortDateMilliString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToToShortDateMicroString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortDateMicroString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortDateNanoString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortDateNanoString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToTimeString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToTimeString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToTimeMilliString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToTimeMilliString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToTimeMicroString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToTimeMicroString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToTimeNanoString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToTimeNanoString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortTimeString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortTimeString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortTimeMilliString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortTimeMilliString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortTimeMicroString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortTimeMilliString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToShortTimeNanoString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToShortTimeNanoString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToAtomString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToAtomString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToAnsicString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToAnsicString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToCookieString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToCookieString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRssString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRssString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToW3cString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToW3cString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToUnixDateString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToUnixDateString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRubyDateString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRubyDateString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToKitchenString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToKitchenString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToIso8601String(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToIso8601String()\n\t}\n}\n\nfunc BenchmarkCarbon_ToIso8601MilliString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToIso8601MilliString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToIso8601MicroString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToIso8601MicroString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToIso8601NanoString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToIso8601NanoString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToIso8601ZuluString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToIso8601ZuluString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToIso8601ZuluMilliString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToIso8601ZuluMilliString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToIso8601ZuluMicroString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToIso8601ZuluMicroString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToIso8601ZuluNanoString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToIso8601ZuluNanoString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc822String(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc822String()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc822zString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc822zString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc850String(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc850String()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc1036String(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc1036String()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc1123String(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc1123String()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc1123zString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc1123zString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc2822String(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc2822String()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc3339String(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc2822String()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc3339MilliString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc3339MilliString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc3339MicroString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc3339MicroString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc3339NanoString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc3339NanoString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToRfc7231String(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToRfc7231String()\n\t}\n}\n\nfunc BenchmarkCarbon_ToFormattedDateString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToFormattedDateString()\n\t}\n}\n\nfunc BenchmarkCarbon_ToFormattedDayDateString(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.ToFormattedDayDateString()\n\t}\n}\n\nfunc BenchmarkCarbon_Layout(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Layout(\"2006-01-02\", \"2020-08-05\")\n\t}\n}\n\nfunc BenchmarkCarbon_Format(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Format(\"2006-01-02\", \"Y-m-d\")\n\t}\n}\n\nfunc BenchmarkCarbon_GoTime(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.GoString()\n\t}\n}\n"
        },
        {
          "name": "outputer_unit_test.go",
          "type": "blob",
          "size": 57.5234375,
          "content": "package carbon\n\nimport (\n\t\"github.com/stretchr/testify/assert\"\n\t\"testing\"\n)\n\nfunc TestCarbon_String(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").String(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15\", UTC).String(),\n\t\t\twant:   \"0000-01-01 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15\", UTC).String(),\n\t\t\twant:   \"0001-01-01 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\", UTC).String(),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"String()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_GoString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\twant   string\n\t\tactual string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").GoString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15\", UTC).GoString(),\n\t\t\twant:   \"time.Date(0, time.January, 1, 13, 14, 15, 0, time.UTC)\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15\", UTC).GoString(),\n\t\t\twant:   \"time.Date(1, time.January, 1, 13, 14, 15, 0, time.UTC)\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\", UTC).GoString(),\n\t\t\twant:   \"time.Date(2020, time.August, 5, 13, 14, 15, 0, time.UTC)\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"GoString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15\", UTC).ToString(),\n\t\t\twant:   \"0000-01-01 13:14:15 +0000 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15\", UTC).ToString(),\n\t\t\twant:   \"0001-01-01 13:14:15 +0000 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\", UTC).ToString(PRC),\n\t\t\twant:   \"2020-08-05 21:14:15 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToMonthString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToMonthString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-01-05\", UTC).ToMonthString(),\n\t\t\twant:   \"January\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-02-05\", UTC).ToMonthString(),\n\t\t\twant:   \"February\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-03-05\", UTC).ToMonthString(),\n\t\t\twant:   \"March\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-04-05\", UTC).ToMonthString(),\n\t\t\twant:   \"April\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tactual: Parse(\"2020-05-05\", UTC).ToMonthString(),\n\t\t\twant:   \"May\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tactual: Parse(\"2020-06-05\").ToMonthString(),\n\t\t\twant:   \"June\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tactual: Parse(\"2020-07-05\", UTC).ToMonthString(),\n\t\t\twant:   \"July\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToMonthString(),\n\t\t\twant:   \"August\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case10\",\n\t\t\tactual: Parse(\"2020-09-05\", UTC).ToMonthString(),\n\t\t\twant:   \"September\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case11\",\n\t\t\tactual: Parse(\"2020-10-05\", UTC).ToMonthString(),\n\t\t\twant:   \"October\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case12\",\n\t\t\tactual: Parse(\"2020-11-05\", UTC).ToMonthString(),\n\t\t\twant:   \"November\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case13\",\n\t\t\tactual: Parse(\"2020-12-05\", UTC).ToMonthString(PRC),\n\t\t\twant:   \"December\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToMonthString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortMonthString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortMonthString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-01-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"Jan\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-02-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"Feb\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-03-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"Mar\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-04-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"Apr\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tactual: Parse(\"2020-05-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"May\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tactual: Parse(\"2020-06-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"Jun\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tactual: Parse(\"2020-07-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"Jul\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"Aug\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case10\",\n\t\t\tactual: Parse(\"2020-09-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"Sep\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case11\",\n\t\t\tactual: Parse(\"2020-10-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"Oct\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case12\",\n\t\t\tactual: Parse(\"2020-11-05\", UTC).ToShortMonthString(),\n\t\t\twant:   \"Nov\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case13\",\n\t\t\tactual: Parse(\"2020-12-05\", UTC).ToShortMonthString(PRC),\n\t\t\twant:   \"Dec\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortMonthString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToWeekString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToWeekString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-01\", UTC).ToWeekString(),\n\t\t\twant:   \"Saturday\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-02\", UTC).ToWeekString(),\n\t\t\twant:   \"Sunday\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-03\", UTC).ToWeekString(),\n\t\t\twant:   \"Monday\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-04\", UTC).ToWeekString(),\n\t\t\twant:   \"Tuesday\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToWeekString(),\n\t\t\twant:   \"Wednesday\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tactual: Parse(\"2020-08-06\", UTC).ToWeekString(),\n\t\t\twant:   \"Thursday\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tactual: Parse(\"2020-08-07\", UTC).ToWeekString(PRC),\n\t\t\twant:   \"Friday\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToWeekString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortWeekString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortWeekString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-01\", UTC).ToShortWeekString(),\n\t\t\twant:   \"Sat\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-02\", UTC).ToShortWeekString(),\n\t\t\twant:   \"Sun\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-03\", UTC).ToShortWeekString(),\n\t\t\twant:   \"Mon\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-04\", UTC).ToShortWeekString(),\n\t\t\twant:   \"Tue\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortWeekString(),\n\t\t\twant:   \"Wed\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tactual: Parse(\"2020-08-06\", UTC).ToShortWeekString(),\n\t\t\twant:   \"Thu\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tactual: Parse(\"2020-08-07\", UTC).ToShortWeekString(PRC),\n\t\t\twant:   \"Fri\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortWeekString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToDayDateTimeString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToDayDateTimeString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\", UTC).ToDayDateTimeString(),\n\t\t\twant:   \"Wed, Aug 5, 2020 1:14 PM\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToDayDateTimeString(PRC),\n\t\t\twant:   \"Wed, Aug 5, 2020 8:00 AM\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToDayDateTimeString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToDateTimeString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToDateTimeString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\", UTC).ToDateTimeString(),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToDateTimeString(PRC),\n\t\t\twant:   \"2020-08-05 08:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToDateTimeString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToDateTimeMilliString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToDateTimeMilliString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToDateTimeMilliString(),\n\t\t\twant:   \"2020-08-05 05:14:15.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToDateTimeMilliString(PRC),\n\t\t\twant:   \"2020-08-05 08:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToDateTimeMilliString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToDateTimeMicroString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToDateTimeMicroString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToDateTimeMicroString(),\n\t\t\twant:   \"2020-08-05 05:14:15.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToDateTimeMicroString(PRC),\n\t\t\twant:   \"2020-08-05 08:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToDateTimeMicroString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToDateTimeNanoString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToDateTimeNanoString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToDateTimeNanoString(),\n\t\t\twant:   \"2020-08-05 05:14:15.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToDateTimeNanoString(PRC),\n\t\t\twant:   \"2020-08-05 08:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToDateTimeNanoString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortDateTimeString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortDateTimeString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"xxx\").ToShortDateTimeString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToShortDateTimeString(),\n\t\t\twant:   \"20200805051415\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortDateTimeString(PRC),\n\t\t\twant:   \"20200805080000\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortDateTimeString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortDateTimeMilliString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortDateTimeMilliString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToShortDateTimeMilliString(),\n\t\t\twant:   \"20200805051415.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortDateTimeMilliString(PRC),\n\t\t\twant:   \"20200805080000\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortDateTimeMilliString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortDateTimeMicroString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortDateTimeMicroString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToShortDateTimeMicroString(),\n\t\t\twant:   \"20200805051415.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortDateTimeMicroString(PRC),\n\t\t\twant:   \"20200805080000\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortDateTimeMicroString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortDateTimeNanoString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortDateTimeNanoString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToShortDateTimeNanoString(),\n\t\t\twant:   \"20200805051415.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortDateTimeNanoString(PRC),\n\t\t\twant:   \"20200805080000\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortDateTimeNanoString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToDateString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToDateString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToDateString(),\n\t\t\twant:   \"2020-08-05\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToDateString(PRC),\n\t\t\twant:   \"2020-08-05\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToDateString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToDateMilliString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToDateMilliString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToDateMilliString(),\n\t\t\twant:   \"2020-08-05.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToDateMilliString(PRC),\n\t\t\twant:   \"2020-08-05\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToDateMilliString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToDateMicroString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToDateMicroString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToDateMicroString(),\n\t\t\twant:   \"2020-08-05.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToDateMicroString(PRC),\n\t\t\twant:   \"2020-08-05\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToDateMicroString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToDateNanoString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToDateNanoString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToDateNanoString(),\n\t\t\twant:   \"2020-08-05.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToDateNanoString(PRC),\n\t\t\twant:   \"2020-08-05\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToDateNanoString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortDateString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortDateString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToShortDateString(),\n\t\t\twant:   \"20200805\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortDateString(PRC),\n\t\t\twant:   \"20200805\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortDateString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortDateMilliString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortDateMilliString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToShortDateMilliString(),\n\t\t\twant:   \"20200805.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortDateMilliString(PRC),\n\t\t\twant:   \"20200805\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortDateMilliString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortDateNanoString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortDateNanoString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToShortDateNanoString(),\n\t\t\twant:   \"20200805.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortDateNanoString(PRC),\n\t\t\twant:   \"20200805\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortDateNanoString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortDateMicroString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortDateMicroString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15\", UTC).ToShortDateMicroString(),\n\t\t\twant:   \"00000101\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15\", UTC).ToShortDateMicroString(),\n\t\t\twant:   \"00010101\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05T13:14:15.999999999+08:00\", UTC).ToShortDateMicroString(),\n\t\t\twant:   \"20200805.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortDateMicroString(PRC),\n\t\t\twant:   \"20200805\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortDateMicroString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToTimeString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToTimeString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15\", UTC).ToTimeString(),\n\t\t\twant:   \"13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15\").ToTimeString(),\n\t\t\twant:   \"13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\", UTC).ToTimeString(),\n\t\t\twant:   \"13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToTimeString(PRC),\n\t\t\twant:   \"08:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToTimeString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToTimeMilliString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToTimeMilliString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToTimeMilliString(),\n\t\t\twant:   \"13:14:15.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToTimeMilliString(),\n\t\t\twant:   \"13:14:15.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToTimeMilliString(),\n\t\t\twant:   \"13:14:15.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToTimeMilliString(PRC),\n\t\t\twant:   \"08:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToTimeMilliString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToTimeMicroString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToTimeMicroString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToTimeMicroString(),\n\t\t\twant:   \"13:14:15.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToTimeMicroString(),\n\t\t\twant:   \"13:14:15.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToTimeMicroString(),\n\t\t\twant:   \"13:14:15.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToTimeMicroString(PRC),\n\t\t\twant:   \"08:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToTimeMicroString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToTimeNanoString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToTimeNanoString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToTimeNanoString(),\n\t\t\twant:   \"13:14:15.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToTimeNanoString(),\n\t\t\twant:   \"13:14:15.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToTimeNanoString(),\n\t\t\twant:   \"13:14:15.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToTimeNanoString(PRC),\n\t\t\twant:   \"08:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToTimeNanoString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortTimeString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortTimeString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToShortTimeString(),\n\t\t\twant:   \"131415\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToShortTimeString(),\n\t\t\twant:   \"131415\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToShortTimeString(),\n\t\t\twant:   \"131415\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortTimeString(PRC),\n\t\t\twant:   \"080000\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortTimeString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortTimeMilliString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortTimeMilliString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToShortTimeMilliString(),\n\t\t\twant:   \"131415.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToShortTimeMilliString(),\n\t\t\twant:   \"131415.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToShortTimeMilliString(),\n\t\t\twant:   \"131415.999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortTimeMilliString(PRC),\n\t\t\twant:   \"080000\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortTimeMilliString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortTimeMicroString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortTimeMicroString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToShortTimeMicroString(),\n\t\t\twant:   \"131415.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToShortTimeMicroString(),\n\t\t\twant:   \"131415.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToShortTimeMicroString(),\n\t\t\twant:   \"131415.999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortTimeMicroString(PRC),\n\t\t\twant:   \"080000\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortTimeMicroString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToShortTimeNanoString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToShortTimeNanoString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToShortTimeNanoString(),\n\t\t\twant:   \"131415.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\").ToShortTimeNanoString(),\n\t\t\twant:   \"131415.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToShortTimeNanoString(),\n\t\t\twant:   \"131415.999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToShortTimeNanoString(PRC),\n\t\t\twant:   \"080000\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortTimeNanoString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToAtomString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToAtomString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToAtomString(),\n\t\t\twant:   \"0000-01-01T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToAtomString(),\n\t\t\twant:   \"0001-01-01T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToAtomString(),\n\t\t\twant:   \"2020-08-05T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToAtomString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00+08:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToAtomString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToAnsicString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToAnsicString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToAnsicString(),\n\t\t\twant:   \"Sat Jan  1 13:14:15 0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToAnsicString(),\n\t\t\twant:   \"Mon Jan  1 13:14:15 0001\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToAnsicString(),\n\t\t\twant:   \"Wed Aug  5 13:14:15 2020\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToAnsicString(PRC),\n\t\t\twant:   \"Wed Aug  5 08:00:00 2020\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToAnsicString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToCookieString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToCookieString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToCookieString(),\n\t\t\twant:   \"Saturday, 01-Jan-0000 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToCookieString(),\n\t\t\twant:   \"Monday, 01-Jan-0001 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToCookieString(),\n\t\t\twant:   \"Wednesday, 05-Aug-2020 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToCookieString(PRC),\n\t\t\twant:   \"Wednesday, 05-Aug-2020 08:00:00 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToCookieString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRssString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRssString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRssString(),\n\t\t\twant:   \"Sat, 01 Jan 0000 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRssString(),\n\t\t\twant:   \"Mon, 01 Jan 0001 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRssString(),\n\t\t\twant:   \"Wed, 05 Aug 2020 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRssString(PRC),\n\t\t\twant:   \"Wed, 05 Aug 2020 08:00:00 +0800\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRssString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToW3cString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToW3cString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToW3cString(),\n\t\t\twant:   \"0000-01-01T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToW3cString(),\n\t\t\twant:   \"0001-01-01T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToW3cString(),\n\t\t\twant:   \"2020-08-05T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToW3cString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00+08:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToW3cString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToUnixDateString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToUnixDateString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToUnixDateString(),\n\t\t\twant:   \"Sat Jan  1 13:14:15 UTC 0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToUnixDateString(),\n\t\t\twant:   \"Mon Jan  1 13:14:15 UTC 0001\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToUnixDateString(),\n\t\t\twant:   \"Wed Aug  5 13:14:15 UTC 2020\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToUnixDateString(PRC),\n\t\t\twant:   \"Wed Aug  5 08:00:00 CST 2020\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToUnixDateString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRubyDateString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRubyDateString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRubyDateString(),\n\t\t\twant:   \"Sat Jan 01 13:14:15 +0000 0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRubyDateString(),\n\t\t\twant:   \"Mon Jan 01 13:14:15 +0000 0001\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRubyDateString(),\n\t\t\twant:   \"Wed Aug 05 13:14:15 +0000 2020\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRubyDateString(PRC),\n\t\t\twant:   \"Wed Aug 05 08:00:00 +0800 2020\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRubyDateString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToKitchenString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToKitchenString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToKitchenString(),\n\t\t\twant:   \"1:14PM\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToKitchenString(),\n\t\t\twant:   \"1:14PM\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToKitchenString(),\n\t\t\twant:   \"1:14PM\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToKitchenString(PRC),\n\t\t\twant:   \"8:00AM\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToKitchenString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToIso8601String(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToIso8601String(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToIso8601String(),\n\t\t\twant:   \"0000-01-01T13:14:15+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToIso8601String(),\n\t\t\twant:   \"0001-01-01T13:14:15+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToIso8601String(),\n\t\t\twant:   \"2020-08-05T13:14:15+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToIso8601String(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00+08:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToIso8601String()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToIso8601MilliString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToIso8601MilliString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToIso8601MilliString(),\n\t\t\twant:   \"0000-01-01T13:14:15.999+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\").ToIso8601MilliString(),\n\t\t\twant:   \"0001-01-01T13:14:15.999+08:05\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToIso8601MilliString(),\n\t\t\twant:   \"2020-08-05T13:14:15.999+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToIso8601MilliString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00+08:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToIso8601MilliString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToIso8601MicroString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToIso8601MicroString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToIso8601MicroString(),\n\t\t\twant:   \"0000-01-01T13:14:15.999999+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToIso8601MicroString(),\n\t\t\twant:   \"0001-01-01T13:14:15.999999+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToIso8601MicroString(),\n\t\t\twant:   \"2020-08-05T13:14:15.999999+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToIso8601MicroString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00+08:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToIso8601MicroString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToIso8601NanoString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToIso8601NanoString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToIso8601NanoString(),\n\t\t\twant:   \"0000-01-01T13:14:15.999999999+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToIso8601NanoString(),\n\t\t\twant:   \"0001-01-01T13:14:15.999999999+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToIso8601NanoString(),\n\t\t\twant:   \"2020-08-05T13:14:15.999999999+00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToIso8601NanoString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00+08:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToIso8601NanoString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToIso8601ZuluString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToIso8601ZuluString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToIso8601ZuluString(),\n\t\t\twant:   \"0000-01-01T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToIso8601ZuluString(),\n\t\t\twant:   \"0001-01-01T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToIso8601ZuluString(),\n\t\t\twant:   \"2020-08-05T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToIso8601ZuluString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00Z\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToIso8601ZuluString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToIso8601ZuluMilliString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToIso8601ZuluMilliString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\").ToIso8601ZuluMilliString(),\n\t\t\twant:   \"0000-01-01T13:14:15.999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToIso8601ZuluMilliString(),\n\t\t\twant:   \"0001-01-01T13:14:15.999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToIso8601ZuluMilliString(),\n\t\t\twant:   \"2020-08-05T13:14:15.999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToIso8601ZuluMilliString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00Z\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToIso8601ZuluMilliString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToIso8601ZuluMicroString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToIso8601ZuluMicroString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToIso8601ZuluMicroString(),\n\t\t\twant:   \"0000-01-01T13:14:15.999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToIso8601ZuluMicroString(),\n\t\t\twant:   \"0001-01-01T13:14:15.999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToIso8601ZuluMicroString(),\n\t\t\twant:   \"2020-08-05T13:14:15.999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToIso8601ZuluMicroString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00Z\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToIso8601ZuluMicroString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToIso8601ZuluNanoString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToIso8601ZuluNanoString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToIso8601ZuluNanoString(),\n\t\t\twant:   \"0000-01-01T13:14:15.999999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToIso8601ZuluNanoString(),\n\t\t\twant:   \"0001-01-01T13:14:15.999999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToIso8601ZuluNanoString(),\n\t\t\twant:   \"2020-08-05T13:14:15.999999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToIso8601ZuluNanoString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00Z\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToIso8601ZuluNanoString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc822String(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc822String(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc822String(),\n\t\t\twant:   \"01 Jan 00 13:14 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc822String(),\n\t\t\twant:   \"01 Jan 01 13:14 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc822String(),\n\t\t\twant:   \"05 Aug 20 13:14 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc822String(PRC),\n\t\t\twant:   \"05 Aug 20 08:00 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc822String()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc822zString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc822zString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc822zString(),\n\t\t\twant:   \"01 Jan 00 13:14 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc822zString(),\n\t\t\twant:   \"01 Jan 01 13:14 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc822zString(),\n\t\t\twant:   \"05 Aug 20 13:14 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc822zString(PRC),\n\t\t\twant:   \"05 Aug 20 08:00 +0800\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc822zString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc850String(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc850String(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc850String(),\n\t\t\twant:   \"Saturday, 01-Jan-00 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc850String(),\n\t\t\twant:   \"Monday, 01-Jan-01 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc850String(),\n\t\t\twant:   \"Wednesday, 05-Aug-20 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc850String(PRC),\n\t\t\twant:   \"Wednesday, 05-Aug-20 08:00:00 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc850String()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc1036String(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc1036String(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc1036String(),\n\t\t\twant:   \"Sat, 01 Jan 00 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc1036String(),\n\t\t\twant:   \"Mon, 01 Jan 01 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc1036String(),\n\t\t\twant:   \"Wed, 05 Aug 20 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc1036String(PRC),\n\t\t\twant:   \"Wed, 05 Aug 20 08:00:00 +0800\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc1036String()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc1123String(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc1123String(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc1123String(),\n\t\t\twant:   \"Sat, 01 Jan 0000 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\").ToRfc1123String(),\n\t\t\twant:   \"Mon, 01 Jan 0001 13:14:15 LMT\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc1123String(),\n\t\t\twant:   \"Wed, 05 Aug 2020 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc1123String(PRC),\n\t\t\twant:   \"Wed, 05 Aug 2020 08:00:00 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc1123String()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc1123zString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc1123zString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc1123zString(),\n\t\t\twant:   \"Sat, 01 Jan 0000 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc1123zString(),\n\t\t\twant:   \"Mon, 01 Jan 0001 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc1123zString(),\n\t\t\twant:   \"Wed, 05 Aug 2020 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\").ToRfc1123zString(PRC),\n\t\t\twant:   \"Wed, 05 Aug 2020 00:00:00 +0800\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc1123String()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc2822String(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc2822String(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc2822String(),\n\t\t\twant:   \"Sat, 01 Jan 0000 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc2822String(),\n\t\t\twant:   \"Mon, 01 Jan 0001 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc2822String(),\n\t\t\twant:   \"Wed, 05 Aug 2020 13:14:15 +0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc2822String(PRC),\n\t\t\twant:   \"Wed, 05 Aug 2020 08:00:00 +0800\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc2822String()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc3339String(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc3339String(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc3339String(),\n\t\t\twant:   \"0000-01-01T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc3339String(),\n\t\t\twant:   \"0001-01-01T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc3339String(),\n\t\t\twant:   \"2020-08-05T13:14:15Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc3339String(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00+08:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc3339String()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc3339MilliString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc3339MilliString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc3339MilliString(),\n\t\t\twant:   \"0000-01-01T13:14:15.999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc3339MilliString(),\n\t\t\twant:   \"0001-01-01T13:14:15.999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc3339MilliString(),\n\t\t\twant:   \"2020-08-05T13:14:15.999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc3339MilliString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00+08:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc3339MilliString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc3339MicroString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc3339MicroString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc3339MicroString(),\n\t\t\twant:   \"0000-01-01T13:14:15.999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc3339MicroString(),\n\t\t\twant:   \"0001-01-01T13:14:15.999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc3339MicroString(),\n\t\t\twant:   \"2020-08-05T13:14:15.999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc3339MicroString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00+08:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc3339MicroString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc3339NanoString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc3339NanoString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc3339NanoString(),\n\t\t\twant:   \"0000-01-01T13:14:15.999999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc3339NanoString(),\n\t\t\twant:   \"0001-01-01T13:14:15.999999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc3339NanoString(),\n\t\t\twant:   \"2020-08-05T13:14:15.999999999Z\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc3339NanoString(PRC),\n\t\t\twant:   \"2020-08-05T08:00:00+08:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc3339NanoString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToRfc7231String(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToRfc7231String(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToRfc7231String(),\n\t\t\twant:   \"Sat, 01 Jan 0000 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\", UTC).ToRfc7231String(),\n\t\t\twant:   \"Mon, 01 Jan 0001 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\", UTC).ToRfc7231String(),\n\t\t\twant:   \"Wed, 05 Aug 2020 13:14:15 UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\", UTC).ToRfc7231String(PRC),\n\t\t\twant:   \"Wed, 05 Aug 2020 08:00:00 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToRfc7231String()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToFormattedDateString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToFormattedDateString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\").ToFormattedDateString(),\n\t\t\twant:   \"Jan 1, 0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\").ToFormattedDateString(),\n\t\t\twant:   \"Jan 1, 0001\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\").ToFormattedDateString(),\n\t\t\twant:   \"Aug 5, 2020\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\").ToFormattedDateString(PRC),\n\t\t\twant:   \"Aug 5, 2020\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToFormattedDateString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ToFormattedDayDateString(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").ToFormattedDayDateString(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"0000-01-01 13:14:15.999999999\", UTC).ToFormattedDayDateString(),\n\t\t\twant:   \"Sat, Jan 1, 0000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"0001-01-01 13:14:15.999999999\").ToFormattedDayDateString(),\n\t\t\twant:   \"Mon, Jan 1, 0001\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\").ToFormattedDayDateString(),\n\t\t\twant:   \"Wed, Aug 5, 2020\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05\").ToFormattedDayDateString(PRC),\n\t\t\twant:   \"Wed, Aug 5, 2020\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToFormattedDayDateString()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Layout(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").Layout(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Layout(\"2006年01月02日\"),\n\t\t\twant:   \"2020年08月05日\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Layout(\"Mon, 02 Jan 2006 15:04:05 GMT\"),\n\t\t\twant:   \"Wed, 05 Aug 2020 13:14:15 GMT\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Layout(DateTimeLayout, PRC),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"Layout()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Format(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Parse(\"\").Format(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Parse(\"2020-08-05 01:14:15\").Format(\"D\"),\n\t\t\twant:   \"Wed\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Parse(\"2020-08-05 01:14:15\").Format(\"l\"),\n\t\t\twant:   \"Wednesday\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Parse(\"2020-08-05 01:14:15\").Format(\"F\"),\n\t\t\twant:   \"August\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Parse(\"2020-08-05 01:14:15\").Format(\"M\"),\n\t\t\twant:   \"Aug\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"Y年m月d日\"),\n\t\t\twant:   \"2020年08月05日\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"j\"),\n\t\t\twant:   \"5\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"W\"),\n\t\t\twant:   \"32\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"F\"),\n\t\t\twant:   \"August\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case10\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"F\"),\n\t\t\twant:   \"August\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case11\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"N\"),\n\t\t\twant:   \"03\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case12\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"L\"),\n\t\t\twant:   \"1\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case13\",\n\t\t\tactual: Parse(\"2021-08-05 01:14:15\").Format(\"L\"),\n\t\t\twant:   \"0\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case14\",\n\t\t\tactual: Parse(\"2020-08-05 01:14:15\").Format(\"G\"),\n\t\t\twant:   \"1\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case15\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"U\"),\n\t\t\twant:   \"1596604455\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case16\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"V\"),\n\t\t\twant:   \"1596604455000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case17\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"X\"),\n\t\t\twant:   \"1596604455000000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case18\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"Z\"),\n\t\t\twant:   \"1596604455000000000\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case19\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999\").Format(\"v\"),\n\t\t\twant:   \"999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case20\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999\").Format(\"u\"),\n\t\t\twant:   \"999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case21\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15.999999999\").Format(\"x\"),\n\t\t\twant:   \"999999999\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case22\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"w\"),\n\t\t\twant:   \"2\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case23\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"t\"),\n\t\t\twant:   \"31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case24\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"z\"),\n\t\t\twant:   \"217\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case25\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\", PRC).Format(\"e\"),\n\t\t\twant:   \"PRC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case26\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"Q\"),\n\t\t\twant:   \"3\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case27\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"C\"),\n\t\t\twant:   \"21\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case28\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"jS\"),\n\t\t\twant:   \"5th\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case29\",\n\t\t\tactual: Parse(\"2020-08-22 13:14:15\").Format(\"jS\"),\n\t\t\twant:   \"22nd\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case30\",\n\t\t\tactual: Parse(\"2020-08-23 13:14:15\").Format(\"jS\"),\n\t\t\twant:   \"23rd\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case31\",\n\t\t\tactual: Parse(\"2020-08-31 13:14:15\").Format(\"jS\"),\n\t\t\twant:   \"31st\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case32\",\n\t\t\tactual: Parse(\"2020-08-31 13:14:15\").Format(\"I\\\\t \\\\i\\\\s Y-m-d H:i:s\"),\n\t\t\twant:   \"It is 2020-08-31 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case33\",\n\t\t\tactual: Parse(\"2020-08-05 13:14:15\").Format(\"上次上报时间:Y-m-d H:i:s，请每日按时打卡\"),\n\t\t\twant:   \"上次上报时间:2020-08-05 13:14:15，请每日按时打卡\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case34\",\n\t\t\tactual: Parse(\"2020-08-05 01:14:15\").Format(DateTimeFormat, PRC),\n\t\t\twant:   \"2020-08-05 01:14:15\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"Format()\")\n\t\t})\n\t}\n}\n\n// https://github.com/dromara/carbon/issues/200\nfunc TestCarbon_Issue200(t *testing.T) {\n\ttests1 := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tactual: Now().StartOfWeek().ToWeekString(),\n\t\t\twant:   \"Sunday\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tactual: Now().SetWeekStartsAt(Monday).StartOfWeek().ToWeekString(),\n\t\t\twant:   \"Monday\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tactual: Now().SetWeekStartsAt(Wednesday).StartOfWeek().ToWeekString(PRC),\n\t\t\twant:   \"Wednesday\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests1 {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToWeekString()\")\n\t\t})\n\t}\n\n\ttests2 := []struct {\n\t\tname   string\n\t\tactual string\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tactual: Now().StartOfWeek().ToShortWeekString(),\n\t\t\twant:   \"Sun\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tactual: Now().SetWeekStartsAt(Monday).StartOfWeek().ToShortWeekString(),\n\t\t\twant:   \"Mon\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tactual: Now().SetWeekStartsAt(Wednesday).StartOfWeek().ToShortWeekString(PRC),\n\t\t\twant:   \"Wed\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests2 {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.actual, \"ToShortWeekString()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "parser.go",
          "type": "blob",
          "size": 2.9306640625,
          "content": "package carbon\n\nimport (\n\t\"strconv\"\n\t\"time\"\n)\n\n// Parse parses a standard time string as a Carbon instance.\n// 将标准格式时间字符串解析成 Carbon 实例\nfunc (c Carbon) Parse(value string, timezone ...string) Carbon {\n\tif len(value) == 0 {\n\t\tc.Error = invalidValueError(value)\n\t\treturn c\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tswitch value {\n\tcase \"now\":\n\t\treturn c.Now(timezone...)\n\tcase \"yesterday\":\n\t\treturn c.Yesterday(timezone...)\n\tcase \"tomorrow\":\n\t\treturn c.Tomorrow(timezone...)\n\t}\n\tfor _, layout := range layouts {\n\t\tt, err := time.ParseInLocation(layout, value, c.loc)\n\t\tif err == nil {\n\t\t\tc.time = t\n\t\t\treturn c\n\t\t}\n\t}\n\tc.Error = invalidValueError(value)\n\treturn c\n}\n\n// Parse parses a standard time string as a Carbon instance.\n// 将标准时间字符串解析成 Carbon 实例\nfunc Parse(value string, timezone ...string) Carbon {\n\treturn NewCarbon().Parse(value, timezone...)\n}\n\n// ParseByFormat parses a time string as a Carbon instance by format.\n// 通过格式模板将时间字符串解析成 Carbon 实例\nfunc (c Carbon) ParseByFormat(value, format string, timezone ...string) Carbon {\n\tcarbon := c.ParseByLayout(value, format2layout(format), timezone...)\n\tif carbon.Error != nil {\n\t\tcarbon.Error = invalidFormatError(value, format)\n\t}\n\treturn carbon\n}\n\n// ParseByFormat parses a time string as a Carbon instance by format.\n// 通过格式模板将时间字符串解析成 Carbon 实例\nfunc ParseByFormat(value, format string, timezone ...string) Carbon {\n\treturn NewCarbon().ParseByFormat(value, format, timezone...)\n}\n\n// ParseByLayout parses a time string as a Carbon instance by layout.\n// 通过布局模板将时间字符串解析成 Carbon 实例\nfunc (c Carbon) ParseByLayout(value, layout string, timezone ...string) Carbon {\n\tif len(value) == 0 {\n\t\tc.Error = invalidValueError(value)\n\t\treturn c\n\t}\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tif len(layout) == 0 {\n\t\tlayout = defaultLayout\n\t}\n\tif layout == \"timestamp\" {\n\t\ttimestamp, _ := strconv.ParseInt(value, 10, 64)\n\t\treturn c.CreateFromTimestamp(timestamp)\n\t}\n\tif layout == \"timestampMilli\" {\n\t\ttimestamp, _ := strconv.ParseInt(value, 10, 64)\n\t\treturn c.CreateFromTimestampMilli(timestamp)\n\t}\n\tif layout == \"timestampMicro\" {\n\t\ttimestamp, _ := strconv.ParseInt(value, 10, 64)\n\t\treturn c.CreateFromTimestampMicro(timestamp)\n\t}\n\tif layout == \"timestampNano\" {\n\t\ttimestamp, _ := strconv.ParseInt(value, 10, 64)\n\t\treturn c.CreateFromTimestampNano(timestamp)\n\t}\n\ttt, err := time.ParseInLocation(layout, value, c.loc)\n\tif err != nil {\n\t\tc.Error = invalidLayoutError(value, layout)\n\t\treturn c\n\t}\n\tc.time = tt\n\treturn c\n}\n\n// ParseByLayout parses a time string as a Carbon instance by layout.\n// 通过布局模板将时间字符串解析成 Carbon 实例\nfunc ParseByLayout(value, layout string, timezone ...string) Carbon {\n\treturn NewCarbon().ParseByLayout(value, layout, timezone...)\n}\n"
        },
        {
          "name": "parser_bench_test.go",
          "type": "blob",
          "size": 0.3759765625,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_Parse(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tParse(\"2020-08-05\")\n\t}\n}\n\nfunc BenchmarkCarbon_ParseByFormat(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tParseByFormat(\"2020-08-05\", \"Y-m-d\")\n\t}\n}\n\nfunc BenchmarkCarbon_ParseByLayout(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tParseByLayout(\"2020-08-05\", \"2006-01-02\")\n\t}\n}\n"
        },
        {
          "name": "parser_unit_test.go",
          "type": "blob",
          "size": 5.6357421875,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_Parse(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"now\"),\n\t\t\twant:   Now().ToDateTimeString(PRC),\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"yesterday\"),\n\t\t\twant:   Yesterday().ToDateTimeString(PRC),\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"tomorrow\"),\n\t\t\twant:   Tomorrow().ToDateTimeString(PRC),\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-8-5\"),\n\t\t\twant:   \"2020-08-05 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-8-05\"),\n\t\t\twant:   \"2020-08-05 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   \"2020-08-05 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2020-8-5 1:2:3\"),\n\t\t\twant:   \"2020-08-05 01:02:03\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tcarbon: Parse(\"2020-08-05 1:2:03\"),\n\t\t\twant:   \"2020-08-05 01:02:03\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case10\",\n\t\t\tcarbon: Parse(\"2020-08-05 1:02:03\"),\n\t\t\twant:   \"2020-08-05 01:02:03\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case11\",\n\t\t\tcarbon: Parse(\"2020-08-05 01:02:03\"),\n\t\t\twant:   \"2020-08-05 01:02:03\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(PRC), \"ParseByFormat()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ParseByFormat(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: ParseByFormat(\"\", \"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: ParseByFormat(\"2020|08|05 13:14:15\", \"Y|m|d H:i:s\"),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: ParseByFormat(\"It is 2020-08-05 13:14:15\", \"\\\\I\\\\t \\\\i\\\\s Y-m-d H:i:s\"),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: ParseByFormat(\"今天是 2020年08月05日13时14分15秒\", \"今天是 Y年m月d日H时i分s秒\"),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(PRC), \"ParseByFormat()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_ParseByLayout(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: ParseByLayout(\"\", \"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: ParseByLayout(\"2020|08|05 13:14:15\", \"2006|01|02 15:04:05\"),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: ParseByLayout(\"2020|08|05 13:14:15\", \"2006|01|02 15:04:05\"),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: ParseByLayout(\"今天是 2020年08月05日13时14分15秒\", \"今天是 2006年01月02日15时04分05秒\"),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(PRC), \"ParseByLayout()\")\n\t\t})\n\t}\n}\n\nfunc TestError_ParseByLayout(t *testing.T) {\n\tassert.Error(t, ParseByLayout(\"2020-08-05\", \"2006-03-04\", \"xxx\").Error, \"It should catch an exception in ParseByLayout\")\n\tassert.Error(t, ParseByLayout(\"xxx\", \"2006-03-04\", PRC).Error, \"It should catch an exception in ParseByLayout\")\n}\n\nfunc TestError_ParseByFormat(t *testing.T) {\n\tassert.Error(t, ParseByFormat(\"2020-08-05\", \"Y-m-d\", \"xxx\").Error, \"It should catch an exception in ParseByFormat()\")\n\tassert.Error(t, ParseByFormat(\"xxx\", \"Y-m-d\", PRC).Error, \"It should catch an exception in ParseByFormat\")\n}\n\n// https://github.com/dromara/carbon/issues/202\nfunc TestCarbon_Issue202(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"2023-01-08T09:02:48\"),\n\t\t\twant:   \"2023-01-08 09:02:48 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2023-1-8T09:02:48\"),\n\t\t\twant:   \"2023-01-08 09:02:48 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2023-01-08T9:2:48\"),\n\t\t\twant:   \"2023-01-08 09:02:48 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2023-01-8T9:2:48\"),\n\t\t\twant:   \"2023-01-08 09:02:48 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"Parse()\")\n\t\t})\n\t}\n}\n\n// https://github.com/dromara/carbon/issues/206\nfunc TestCarbon_Issue206(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: ParseByFormat(\"1699677240\", \"U\"),\n\t\t\twant:   \"2023-11-11 12:34:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: ParseByFormat(\"1699677240666\", \"V\"),\n\t\t\twant:   \"2023-11-11 12:34:00.666 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: ParseByFormat(\"1699677240666666\", \"X\"),\n\t\t\twant:   \"2023-11-11 12:34:00.666666 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: ParseByFormat(\"1699677240666666666\", \"Z\"),\n\t\t\twant:   \"2023-11-11 12:34:00.666666666 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"Parse()\")\n\t\t})\n\t}\n}\n\n// https://github.com/dromara/carbon/issues/232\nfunc TestCarbon_Issue232(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"0000-01-01 00:00:00\"),\n\t\t\twant:   \"0000-01-01 00:00:00\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"0001-00-00 00:00:00\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"0001-01-01 00:00:00\"),\n\t\t\twant:   \"0001-01-01 00:00:00\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(PRC), \"Parse()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "season.go",
          "type": "blob",
          "size": 2.611328125,
          "content": "package carbon\n\nimport (\n\t\"strings\"\n)\n\nvar seasons = []struct {\n\tmonth, index int\n}{\n\t{3, 0},  // spring\n\t{4, 0},  // spring\n\t{5, 0},  // spring\n\t{6, 1},  // summer\n\t{7, 1},  // summer\n\t{8, 1},  // summer\n\t{9, 2},  // autumn\n\t{10, 2}, // autumn\n\t{11, 2}, // autumn\n\t{12, 3}, // winter\n\t{1, 3},  // winter\n\t{2, 3},  // winter\n}\n\n// Season gets season name according to the meteorological division method like \"Spring\", i18n is supported.\n// 获取当前季节(以气象划分)，支持i18n\nfunc (c Carbon) Season() string {\n\tif c.Error != nil {\n\t\treturn \"\"\n\t}\n\tif len(c.lang.resources) == 0 {\n\t\tc.lang.SetLocale(defaultLocale)\n\t}\n\tindex := -1\n\tmonth := c.Month()\n\tfor i := 0; i < len(seasons); i++ {\n\t\tseason := seasons[i]\n\t\tif month == season.month {\n\t\t\tindex = season.index\n\t\t}\n\t}\n\tc.lang.rw.RLock()\n\tdefer c.lang.rw.RUnlock()\n\tif resources, ok := c.lang.resources[\"seasons\"]; ok {\n\t\tslice := strings.Split(resources, \"|\")\n\t\tif len(slice) == QuartersPerYear {\n\t\t\treturn slice[index]\n\t\t}\n\t}\n\treturn \"\"\n}\n\n// StartOfSeason returns a Carbon instance for start of the season.\n// 本季节开始时间\nfunc (c Carbon) StartOfSeason() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, _ := c.Date()\n\tif month == 1 || month == 2 {\n\t\treturn c.create(year-1, 12, 1, 0, 0, 0, 0)\n\t}\n\treturn c.create(year, month/3*3, 1, 0, 0, 0, 0)\n}\n\n// EndOfSeason returns a Carbon instance for end of the season.\n// 本季节结束时间\nfunc (c Carbon) EndOfSeason() Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, _ := c.Date()\n\tif month == 1 || month == 2 {\n\t\treturn c.create(year, 3, 0, 23, 59, 59, 999999999)\n\t}\n\tif month == 12 {\n\t\treturn c.create(year+1, 3, 0, 23, 59, 59, 999999999)\n\t}\n\treturn c.create(year, month/3*3+3, 0, 23, 59, 59, 999999999)\n}\n\n// IsSpring reports whether is spring.\n// 是否是春季\nfunc (c Carbon) IsSpring() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\tmonth := c.Month()\n\tif month == 3 || month == 4 || month == 5 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsSummer reports whether is summer.\n// 是否是夏季\nfunc (c Carbon) IsSummer() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\tmonth := c.Month()\n\tif month == 6 || month == 7 || month == 8 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsAutumn reports whether is autumn.\n// 是否是秋季\nfunc (c Carbon) IsAutumn() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\tmonth := c.Month()\n\tif month == 9 || month == 10 || month == 11 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// IsWinter reports whether is winter.\n// 是否是冬季\nfunc (c Carbon) IsWinter() bool {\n\tif c.Error != nil {\n\t\treturn false\n\t}\n\tmonth := c.Month()\n\tif month == 12 || month == 1 || month == 2 {\n\t\treturn true\n\t}\n\treturn false\n}\n"
        },
        {
          "name": "season_bench_test.go",
          "type": "blob",
          "size": 0.802734375,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_Season(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.Season()\n\t}\n}\n\nfunc BenchmarkCarbon_StartOfSeason(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.StartOfSeason()\n\t}\n}\n\nfunc BenchmarkCarbon_EndOfSeason(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.EndOfSeason()\n\t}\n}\n\nfunc BenchmarkCarbon_IsSpring(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSpring()\n\t}\n}\n\nfunc BenchmarkCarbon_IsSummer(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsSummer()\n\t}\n}\n\nfunc BenchmarkCarbon_IsAutumn(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsAutumn()\n\t}\n}\n\nfunc BenchmarkCarbon_IsWinter(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.IsWinter()\n\t}\n}\n"
        },
        {
          "name": "season_unit_test.go",
          "type": "blob",
          "size": 5.890625,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_Season(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"2020-01-05\"),\n\t\t\twant:   \"Winter\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-02-05\"),\n\t\t\twant:   \"Winter\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-03-05\"),\n\t\t\twant:   \"Spring\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-04-05\"),\n\t\t\twant:   \"Spring\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-05-05\"),\n\t\t\twant:   \"Spring\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-06-05\"),\n\t\t\twant:   \"Summer\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-07-05\"),\n\t\t\twant:   \"Summer\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2020-08-05\"),\n\t\t\twant:   \"Summer\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tcarbon: Parse(\"2020-09-05\"),\n\t\t\twant:   \"Autumn\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case10\",\n\t\t\tcarbon: Parse(\"2020-10-05\"),\n\t\t\twant:   \"Autumn\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case11\",\n\t\t\tcarbon: Parse(\"2020-11-05\"),\n\t\t\twant:   \"Autumn\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case12\",\n\t\t\tcarbon: Parse(\"2020-12-05\"),\n\t\t\twant:   \"Winter\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Season(), \"Season()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_StartOfSeason(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-15\"),\n\t\t\twant:   \"2019-12-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-02-15\"),\n\t\t\twant:   \"2019-12-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-03-15\"),\n\t\t\twant:   \"2020-03-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-04-15\"),\n\t\t\twant:   \"2020-03-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-05-15\"),\n\t\t\twant:   \"2020-03-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-06-15\"),\n\t\t\twant:   \"2020-06-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2020-07-15\"),\n\t\t\twant:   \"2020-06-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tcarbon: Parse(\"2020-08-15\"),\n\t\t\twant:   \"2020-06-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case10\",\n\t\t\tcarbon: Parse(\"2020-09-15\"),\n\t\t\twant:   \"2020-09-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case11\",\n\t\t\tcarbon: Parse(\"2020-10-15\"),\n\t\t\twant:   \"2020-09-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case12\",\n\t\t\tcarbon: Parse(\"2020-11-15\"),\n\t\t\twant:   \"2020-09-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case13\",\n\t\t\tcarbon: Parse(\"2020-12-15\"),\n\t\t\twant:   \"2020-12-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfSeason().ToDateString(), \"StartOfSeason()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_EndOfSeason(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-15\"),\n\t\t\twant:   \"2020-02-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-02-15\"),\n\t\t\twant:   \"2020-02-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-03-15\"),\n\t\t\twant:   \"2020-05-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-04-15\"),\n\t\t\twant:   \"2020-05-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-05-15\"),\n\t\t\twant:   \"2020-05-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-06-15\"),\n\t\t\twant:   \"2020-08-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2020-07-15\"),\n\t\t\twant:   \"2020-08-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tcarbon: Parse(\"2020-08-15\"),\n\t\t\twant:   \"2020-08-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case10\",\n\t\t\tcarbon: Parse(\"2020-09-15\"),\n\t\t\twant:   \"2020-11-30\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case11\",\n\t\t\tcarbon: Parse(\"2020-10-15\"),\n\t\t\twant:   \"2020-11-30\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case12\",\n\t\t\tcarbon: Parse(\"2020-11-15\"),\n\t\t\twant:   \"2020-11-30\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case13\",\n\t\t\tcarbon: Parse(\"2020-12-15\"),\n\t\t\twant:   \"2021-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.EndOfSeason().ToDateString(), \"EndOfSeason()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSpring(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-03-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsSpring(), \"IsSpring()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsSummer(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-06-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsSummer(), \"IsSummer()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsAutumn(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-09-01\"),\n\t\t\twant:   true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsAutumn(), \"IsAutumn()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_IsWinter(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\"),\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\"),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-05-01\"),\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.IsWinter(), \"IsWinter()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "setter.go",
          "type": "blob",
          "size": 7.7529296875,
          "content": "package carbon\n\nimport (\n\t\"time\"\n)\n\n// SetWeekStartsAt sets start day of the week.\n// 设置一周的开始日期\nfunc (c Carbon) SetWeekStartsAt(day string) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tif weekday, ok := weekdays[day]; ok {\n\t\tc.weekStartsAt = weekday\n\t}\n\treturn c\n}\n\n// SetWeekStartsAt sets start day of the week.\n// 设置一周的开始日期\nfunc SetWeekStartsAt(day string) Carbon {\n\treturn NewCarbon().SetWeekStartsAt(day)\n}\n\n// SetTimezone sets timezone.\n// 设置时区\nfunc (c Carbon) SetTimezone(name string) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tc.loc, c.Error = getLocationByTimezone(name)\n\treturn c\n}\n\n// SetTimezone sets timezone.\n// 设置时区\nfunc SetTimezone(name string) Carbon {\n\treturn NewCarbon().SetTimezone(name)\n}\n\n// SetLocation sets location.\n// 设置地区\nfunc (c Carbon) SetLocation(loc *time.Location) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tif loc == nil {\n\t\tc.Error = invalidLocationError()\n\t}\n\tc.loc = loc\n\treturn c\n}\n\n// SetLocation sets location.\n// 设置地区\nfunc SetLocation(loc *time.Location) Carbon {\n\treturn NewCarbon().SetLocation(loc)\n}\n\n// SetLocale sets locale.\n// 设置语言区域\nfunc (c Carbon) SetLocale(locale string) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tc.lang.SetLocale(locale)\n\tc.Error = c.lang.Error\n\treturn c\n}\n\n// SetLocale sets locale.\n// 设置语言区域\nfunc SetLocale(locale string) Carbon {\n\tc := NewCarbon()\n\tc.lang.SetLocale(locale)\n\tc.Error = c.lang.Error\n\treturn c\n}\n\n// SetDateTime sets year, month, day, hour, minute and second.\n// 设置年、月、日、时、分、秒\nfunc (c Carbon) SetDateTime(year, month, day, hour, minute, second int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.create(year, month, day, hour, minute, second, c.Nanosecond())\n}\n\n// SetDateTimeMilli sets year, month, day, hour, minute, second and millisecond.\n// 设置年、月、日、时、分、秒、毫秒\nfunc (c Carbon) SetDateTimeMilli(year, month, day, hour, minute, second, millisecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.create(year, month, day, hour, minute, second, millisecond*1e6)\n}\n\n// SetDateTimeMicro sets year, month, day, hour, minute, second and microsecond.\n// 设置年、月、日、时、分、秒、微秒\nfunc (c Carbon) SetDateTimeMicro(year, month, day, hour, minute, second, microsecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.create(year, month, day, hour, minute, second, microsecond*1e3)\n}\n\n// SetDateTimeNano sets year, month, day, hour, minute, second and nanosecond.\n// 设置年、月、日、时、分、秒、纳秒\nfunc (c Carbon) SetDateTimeNano(year, month, day, hour, minute, second, nanosecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.create(year, month, day, hour, minute, second, nanosecond)\n}\n\n// SetDate sets year, month and day.\n// 设置年、月、日\nfunc (c Carbon) SetDate(year, month, day int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\thour, minute, second := c.Time()\n\treturn c.create(year, month, day, hour, minute, second, c.Nanosecond())\n}\n\n// SetDateMilli sets year, month, day and millisecond.\n// 设置年、月、日、毫秒\nfunc (c Carbon) SetDateMilli(year, month, day, millisecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\thour, minute, second := c.Time()\n\treturn c.create(year, month, day, hour, minute, second, millisecond*1e6)\n}\n\n// SetDateMicro sets year, month, day and microsecond.\n// 设置年、月、日、微秒\nfunc (c Carbon) SetDateMicro(year, month, day, microsecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\thour, minute, second := c.Time()\n\treturn c.create(year, month, day, hour, minute, second, microsecond*1e3)\n}\n\n// SetDateNano sets year, month, day and nanosecond.\n// 设置年、月、日、纳秒\nfunc (c Carbon) SetDateNano(year, month, day, nanosecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\thour, minute, second := c.Time()\n\treturn c.create(year, month, day, hour, minute, second, nanosecond)\n}\n\n// SetTime sets hour, minute and second.\n// 设置时、分、秒\nfunc (c Carbon) SetTime(hour, minute, second int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day := c.Date()\n\treturn c.create(year, month, day, hour, minute, second, c.Nanosecond())\n}\n\n// SetTimeMilli sets hour, minute, second and millisecond.\n// 设置时、分、秒、毫秒\nfunc (c Carbon) SetTimeMilli(hour, minute, second, millisecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day := c.Date()\n\treturn c.create(year, month, day, hour, minute, second, millisecond*1e6)\n}\n\n// SetTimeMicro sets hour, minute, second and microsecond.\n// 设置时、分、秒、微秒\nfunc (c Carbon) SetTimeMicro(hour, minute, second, microsecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day := c.Date()\n\treturn c.create(year, month, day, hour, minute, second, microsecond*1e3)\n}\n\n// SetTimeNano sets hour, minute, second and nanosecond.\n// 设置、时、分、秒、纳秒\nfunc (c Carbon) SetTimeNano(hour, minute, second, nanosecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day := c.Date()\n\treturn c.create(year, month, day, hour, minute, second, nanosecond)\n}\n\n// SetYear sets year.\n// 设置年份\nfunc (c Carbon) SetYear(year int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\t_, month, day, hour, minute, second := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, c.Nanosecond())\n}\n\n// SetYearNoOverflow sets year without overflowing month.\n// 设置年份(月份不溢出)\nfunc (c Carbon) SetYearNoOverflow(year int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.AddYearsNoOverflow(year - c.Year())\n}\n\n// SetMonth sets month.\n// 设置月份\nfunc (c Carbon) SetMonth(month int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, _, day, hour, minute, second := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, c.Nanosecond())\n}\n\n// SetMonthNoOverflow sets month without overflowing month.\n// 设置月份(月份不溢出)\nfunc (c Carbon) SetMonthNoOverflow(month int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\treturn c.AddMonthsNoOverflow(month - c.Month())\n}\n\n// SetDay sets day.\n// 设置日期\nfunc (c Carbon) SetDay(day int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, _, hour, minute, second := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, c.Nanosecond())\n}\n\n// SetHour sets hour.\n// 设置小时\nfunc (c Carbon) SetHour(hour int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day, _, minute, second := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, c.Nanosecond())\n}\n\n// SetMinute sets minute.\n// 设置分钟\nfunc (c Carbon) SetMinute(minute int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day, hour, _, second := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, c.Nanosecond())\n}\n\n// SetSecond sets second.\n// 设置秒数\nfunc (c Carbon) SetSecond(second int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day, hour, minute, _ := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, c.Nanosecond())\n}\n\n// SetMillisecond sets millisecond.\n// 设置毫秒\nfunc (c Carbon) SetMillisecond(millisecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day, hour, minute, second := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, millisecond*1e6)\n}\n\n// SetMicrosecond sets microsecond.\n// 设置微秒\nfunc (c Carbon) SetMicrosecond(microsecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day, hour, minute, second := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, microsecond*1e3)\n}\n\n// SetNanosecond sets nanosecond.\n// 设置纳秒\nfunc (c Carbon) SetNanosecond(nanosecond int) Carbon {\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tyear, month, day, hour, minute, second := c.DateTime()\n\treturn c.create(year, month, day, hour, minute, second, nanosecond)\n}\n"
        },
        {
          "name": "setter_bench_test.go",
          "type": "blob",
          "size": 3.6640625,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc BenchmarkCarbon_SetWeekStartsAt(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tSetWeekStartsAt(Sunday)\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetWeekStartsAt(Sunday)\n\t}\n}\n\nfunc BenchmarkCarbon_SetTimezone(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tSetTimezone(PRC)\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetTimezone(PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_SetLocation(b *testing.B) {\n\tloc, _ := time.LoadLocation(PRC)\n\tfor n := 0; n < b.N; n++ {\n\t\tSetLocation(loc)\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetLocation(loc)\n\t}\n}\n\nfunc BenchmarkCarbon_SetLocale(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tSetLocale(\"en\")\n\t}\n\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetLocale(\"en\")\n\t}\n}\n\nfunc BenchmarkCarbon_SetDateTime(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetDateTime(2020, 8, 5, 0, 0, 0)\n\t}\n}\n\nfunc BenchmarkCarbon_SetDateTimeMilli(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetDateTimeMilli(2020, 8, 5, 0, 0, 0, 0)\n\t}\n}\n\nfunc BenchmarkCarbon_SetDateTimeMicro(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetDateTimeMicro(2020, 8, 5, 0, 0, 0, 0)\n\t}\n}\n\nfunc BenchmarkCarbon_SetDateTimeNano(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetDateTimeNano(2020, 8, 5, 0, 0, 0, 0)\n\t}\n}\n\nfunc BenchmarkCarbon_SetDate(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetDate(2020, 8, 5)\n\t}\n}\n\nfunc BenchmarkCarbon_SetDateMilli(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetDateMilli(2020, 8, 5, 0)\n\t}\n}\n\nfunc BenchmarkCarbon_SetDateMicro(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetDateMicro(2020, 8, 5, 0)\n\t}\n}\n\nfunc BenchmarkCarbon_SetDateNano(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetDateNano(2020, 8, 5, 0)\n\t}\n}\n\nfunc BenchmarkCarbon_SetTime(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetTime(13, 14, 15)\n\t}\n}\n\nfunc BenchmarkCarbon_SetTimeMilli(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetTimeMilli(13, 14, 15, 0)\n\t}\n}\n\nfunc BenchmarkCarbon_SetTimeMicro(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetTimeMicro(13, 14, 15, 0)\n\t}\n}\n\nfunc BenchmarkCarbon_SetTimeNano(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetTimeNano(13, 14, 15, 0)\n\t}\n}\n\nfunc BenchmarkCarbon_SetYear(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetYear(2020)\n\t}\n}\n\nfunc BenchmarkCarbon_SetYearNoOverflow(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetYearNoOverflow(2020)\n\t}\n}\n\nfunc BenchmarkCarbon_SetMonth(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetMonth(8)\n\t}\n}\n\nfunc BenchmarkCarbon_SetMonthNoOverflow(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetMonthNoOverflow(8)\n\t}\n}\n\nfunc BenchmarkCarbon_SetDay(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetDay(20)\n\t}\n}\n\nfunc BenchmarkCarbon_SetHour(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetHour(20)\n\t}\n}\n\nfunc BenchmarkCarbon_SetMinute(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetMinute(20)\n\t}\n}\n\nfunc BenchmarkCarbon_SetSecond(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetSecond(20)\n\t}\n}\n\nfunc BenchmarkCarbon_SetMillisecond(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetMillisecond(20)\n\t}\n}\n\nfunc BenchmarkCarbon_SetMicrosecond(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetMicrosecond(20)\n\t}\n}\n\nfunc BenchmarkCarbon_SetNanosecond(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetNanosecond(20)\n\t}\n}\n"
        },
        {
          "name": "setter_unit_test.go",
          "type": "blob",
          "size": 21.5703125,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_SetWeekStartsAt(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetWeekStartsAt(Sunday),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetWeekStartsAt(Sunday),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2021-06-13\").SetWeekStartsAt(Sunday),\n\t\t\twant:   \"2021-06-13\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2021-06-13\").SetWeekStartsAt(Monday),\n\t\t\twant:   \"2021-06-07\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2021-06-13\").SetWeekStartsAt(Tuesday),\n\t\t\twant:   \"2021-06-08\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2021-06-13\").SetWeekStartsAt(Wednesday),\n\t\t\twant:   \"2021-06-09\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2021-06-13\").SetWeekStartsAt(Thursday),\n\t\t\twant:   \"2021-06-10\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2021-06-13\").SetWeekStartsAt(Friday),\n\t\t\twant:   \"2021-06-11\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case9\",\n\t\t\tcarbon: Parse(\"2021-06-13\").SetWeekStartsAt(Saturday),\n\t\t\twant:   \"2021-06-12\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case10\",\n\t\t\tcarbon: SetWeekStartsAt(Saturday).Parse(\"2021-06-13\"),\n\t\t\twant:   \"2021-06-12\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.StartOfWeek().ToDateString(), \"SetWeekStartsAt()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetTimezone(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetTimezone(PRC),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetTimezone(PRC),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: SetTimezone(PRC).Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   \"2020-08-05 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: SetTimezone(Tokyo).Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   \"2020-08-05 12:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: SetTimezone(London).Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   \"2020-08-05 20:14:15\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(PRC), \"SetTimezone()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetLocation(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetLocation(time.UTC),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetLocation(time.UTC),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\").SetLocation(nil),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\").SetLocation(time.UTC),\n\t\t\twant:   \"UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\").SetLocation(time.UTC),\n\t\t\twant:   \"UTC\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: SetLocation(time.UTC).Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   \"UTC\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.Location(), \"SetLocation()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetLocale(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetLocale(\"en\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetLocale(\"en\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\").SetLocale(\"en\"),\n\t\t\twant:   \"August\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\").SetLocale(\"zh-CN\"),\n\t\t\twant:   \"八月\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15\").SetLocale(\"jp\"),\n\t\t\twant:   \"8月\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: SetLocale(\"en\").Parse(\"2020-08-05 13:14:15\"),\n\t\t\twant:   \"August\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToMonthString(), \"SetLocale()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetDateTime(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetDateTime(2019, 02, 02, 13, 14, 15),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetDateTime(2019, 02, 02, 13, 14, 15),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateTime(2019, 02, 02, 13, 14, 15),\n\t\t\twant:   \"2019-02-02 13:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateTime(2019, 02, 31, 13, 14, 15),\n\t\t\twant:   \"2019-03-03 13:14:15\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(PRC), \"SetDateTime()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetDateTimeMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetDateTimeMilli(2019, 02, 02, 13, 14, 15, 999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetDateTimeMilli(2019, 02, 02, 13, 14, 15, 999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateTimeMilli(2019, 02, 02, 13, 14, 15, 999),\n\t\t\twant:   \"2019-02-02 13:14:15.999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateTimeMilli(2019, 02, 31, 13, 14, 15, 999),\n\t\t\twant:   \"2019-03-03 13:14:15.999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetDateTimeMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetDateTimeMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetDateTimeMicro(2019, 02, 02, 13, 14, 15, 999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetDateTimeMicro(2019, 02, 02, 13, 14, 15, 999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateTimeMicro(2019, 02, 02, 13, 14, 15, 999999),\n\t\t\twant:   \"2019-02-02 13:14:15.999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateTimeMicro(2019, 02, 31, 13, 14, 15, 999999),\n\t\t\twant:   \"2019-03-03 13:14:15.999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetDateTimeMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetDateTimeNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetDateTimeNano(2019, 02, 02, 13, 14, 15, 999999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetDateTimeNano(2019, 02, 02, 13, 14, 15, 999999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateTimeNano(2019, 02, 02, 13, 14, 15, 999999999),\n\t\t\twant:   \"2019-02-02 13:14:15.999999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateTimeNano(2019, 02, 31, 13, 14, 15, 999999999),\n\t\t\twant:   \"2019-03-03 13:14:15.999999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetDateTimeNano()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetDate(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetDate(2019, 02, 02),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetDate(2019, 02, 02),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDate(2019, 02, 02),\n\t\t\twant:   \"2019-02-02 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDate(2019, 02, 31),\n\t\t\twant:   \"2019-03-03 00:00:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetDate()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetDateMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetDateMilli(2019, 02, 02, 999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetDateMilli(2019, 02, 02, 999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateMilli(2019, 02, 02, 999),\n\t\t\twant:   \"2019-02-02 00:00:00.999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateMilli(2019, 02, 31, 999),\n\t\t\twant:   \"2019-03-03 00:00:00.999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetDateMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetDateMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetDateMicro(2019, 02, 02, 999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetDateMicro(2019, 02, 02, 999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateMicro(2019, 02, 02, 999999),\n\t\t\twant:   \"2019-02-02 00:00:00.999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateMicro(2019, 02, 31, 999999),\n\t\t\twant:   \"2019-03-03 00:00:00.999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetDateMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetDateNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetDateNano(2019, 02, 02, 999999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetDateNano(2019, 02, 02, 999999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateNano(2019, 02, 02, 999999999),\n\t\t\twant:   \"2019-02-02 00:00:00.999999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDateNano(2019, 02, 31, 999999999),\n\t\t\twant:   \"2019-03-03 00:00:00.999999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetDateNano()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetTime(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetTime(13, 14, 15),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetTime(13, 14, 15),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetTime(13, 14, 15),\n\t\t\twant:   \"2020-01-01 13:14:15 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetTime(13, 14, 90),\n\t\t\twant:   \"2020-01-01 13:15:30 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetTime()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetTimeMilli(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetTimeMilli(13, 14, 15, 999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetTimeMilli(13, 14, 15, 999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetTimeMilli(13, 14, 15, 999),\n\t\t\twant:   \"2020-01-01 13:14:15.999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetTimeMilli(13, 14, 90, 999),\n\t\t\twant:   \"2020-01-01 13:15:30.999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetTimeMilli()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetTimeMicro(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetTimeMicro(13, 14, 15, 999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetTimeMicro(13, 14, 15, 999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetTimeMicro(13, 14, 15, 999999),\n\t\t\twant:   \"2020-01-01 13:14:15.999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetTimeMicro(13, 14, 90, 999999),\n\t\t\twant:   \"2020-01-01 13:15:30.999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetTimeMicro()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetTimeNano(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetTimeNano(13, 14, 15, 999999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetTimeNano(13, 14, 15, 999999999),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetTimeNano(13, 14, 15, 999999999),\n\t\t\twant:   \"2020-01-01 13:14:15.999999999 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetTimeNano(13, 14, 90, 999999999),\n\t\t\twant:   \"2020-01-01 13:15:30.999999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetTimeNano()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetYear(2019),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetYear(2019),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetYear(2019),\n\t\t\twant:   \"2019-01-01 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SetYear(2019),\n\t\t\twant:   \"2019-01-31 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SetYear(2019),\n\t\t\twant:   \"2019-03-01 00:00:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetYearNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetYearNoOverflow(2019),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetYearNoOverflow(2019),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetYearNoOverflow(2019),\n\t\t\twant:   \"2019-01-01 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SetYearNoOverflow(2019),\n\t\t\twant:   \"2019-01-31 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SetYearNoOverflow(2019),\n\t\t\twant:   \"2019-02-28 00:00:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetYearNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetMonth(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetMonth(2),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetMonth(2),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetMonth(2),\n\t\t\twant:   \"2020-02-01 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-30\").SetMonth(2),\n\t\t\twant:   \"2020-03-01 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SetMonth(2),\n\t\t\twant:   \"2020-03-02 00:00:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetMonth()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetMonthNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetMonthNoOverflow(2),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetMonthNoOverflow(2),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetMonthNoOverflow(2),\n\t\t\twant:   \"2020-02-01 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-30\").SetMonthNoOverflow(2),\n\t\t\twant:   \"2020-02-29 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SetMonthNoOverflow(2),\n\t\t\twant:   \"2020-02-29 00:00:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetMonthNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetDay(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetDay(31),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetDay(31),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetDay(31),\n\t\t\twant:   \"2020-01-31 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SetDay(31),\n\t\t\twant:   \"2020-03-02 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SetDay(31),\n\t\t\twant:   \"2020-03-02 00:00:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetDay()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetHour(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetHour(10),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetHour(10),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetHour(10),\n\t\t\twant:   \"2020-01-01 10:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SetHour(24),\n\t\t\twant:   \"2020-02-02 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SetHour(31),\n\t\t\twant:   \"2020-02-29 07:00:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetHour()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetMinute(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetMinute(10),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetMinute(10),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetMinute(10),\n\t\t\twant:   \"2020-01-01 00:10:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SetMinute(24),\n\t\t\twant:   \"2020-02-01 00:24:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SetMinute(60),\n\t\t\twant:   \"2020-02-28 01:00:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetMinute()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetSecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetSecond(10),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetSecond(10),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetSecond(10),\n\t\t\twant:   \"2020-01-01 00:00:10 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SetSecond(24),\n\t\t\twant:   \"2020-02-01 00:00:24 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SetSecond(60),\n\t\t\twant:   \"2020-02-28 00:01:00 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetSecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetMillisecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetMillisecond(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetMillisecond(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetMillisecond(0),\n\t\t\twant:   \"2020-01-01 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SetMillisecond(100),\n\t\t\twant:   \"2020-02-01 00:00:00.1 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SetMillisecond(999),\n\t\t\twant:   \"2020-02-28 00:00:00.999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetMillisecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetMicrosecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetMicrosecond(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetMicrosecond(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetMicrosecond(0),\n\t\t\twant:   \"2020-01-01 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SetMicrosecond(100000),\n\t\t\twant:   \"2020-02-01 00:00:00.1 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SetMicrosecond(999999),\n\t\t\twant:   \"2020-02-28 00:00:00.999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetMicrosecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SetNanosecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SetNanosecond(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"xxx\").SetNanosecond(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SetNanosecond(0),\n\t\t\twant:   \"2020-01-01 00:00:00 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SetNanosecond(100000),\n\t\t\twant:   \"2020-02-01 00:00:00.0001 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SetNanosecond(999999),\n\t\t\twant:   \"2020-02-28 00:00:00.000999999 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(PRC), \"SetNanosecond()\")\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "test.go",
          "type": "blob",
          "size": 1.37109375,
          "content": "package carbon\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\n// SetTestNow sets a test Carbon instance (real or mock) to be returned when a \"now\" instance is created.\n// 设置当前测试时间\nfunc (c *Carbon) SetTestNow(carbon Carbon) {\n\tc.testNow, c.loc = carbon.TimestampNano(), carbon.loc\n}\n\n// UnSetTestNow clears a test Carbon instance (real or mock) to be returned when a \"now\" instance is created.\n// 清除当前测试时间\nfunc (c *Carbon) UnSetTestNow() {\n\tc.testNow = 0\n}\n\n// IsSetTestNow report whether there is testing time now.\n// 是否设置过当前测试时间\nfunc (c Carbon) IsSetTestNow() bool {\n\treturn c.testNow > 0\n}\n\n// TestMain sets up the testing environment for all tests\n// https://pkg.go.dev/testing#hdr-Main\nfunc TestMain(m *testing.M) {\n\t// The whole tests were written for PRC timezone (China).\n\t// The codebase of test is too large to be changed.\n\t// Without this hack the tests will fail if you use a different timezone than PRC\n\t// This will affect the way Go compute the timezone when using time.Local\n\t_ = os.Setenv(\"TZ\", \"PRC\")\n\n\tm.Run()\n}\n\nfunc prepareTest(tb testing.TB) {\n\ttb.Helper()\n\n\t// Store the current default\n\tsavedDefault := Default{\n\t\tLayout:       defaultLayout,\n\t\tTimezone:     defaultTimezone,\n\t\tLocale:       defaultLocale,\n\t\tWeekStartsAt: defaultWeekStartsAt,\n\t}\n\ttb.Cleanup(func() {\n\t\t// restore the default when test is done\n\t\tSetDefault(savedDefault)\n\t})\n}\n"
        },
        {
          "name": "test_bench_test.go",
          "type": "blob",
          "size": 0.3935546875,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_SetTestNow(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.SetTestNow(Yesterday())\n\t}\n}\n\nfunc BenchmarkCarbon_UnSetTestNow(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.UnSetTestNow()\n\t}\n}\n\nfunc BenchmarkCarbon_IsSetTestNow(b *testing.B) {\n\tc := NewCarbon()\n\tfor n := 0; n < b.N; n++ {\n\t\tc.IsSetTestNow()\n\t}\n}\n"
        },
        {
          "name": "test_unit_test.go",
          "type": "blob",
          "size": 2.802734375,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_SetTestNow(t *testing.T) {\n\tcarbon := NewCarbon()\n\tcarbon.SetTestNow(Parse(\"2020-08-05\"))\n\n\tassert.Equal(t, \"2020-08-04\", carbon.Yesterday().ToDateString(), \"It should be equal to 2020-08-04\")\n\tassert.Equal(t, \"2020-08-05\", carbon.Now().ToDateString(), \"It should be equal to 2020-08-05\")\n\tassert.Equal(t, \"2020-08-06\", carbon.Tomorrow().ToDateString(), \"It should be equal to 2020-08-06\")\n\tassert.Equal(t, 31, carbon.Parse(\"1989-08-05\").Age(), \"It should be equal to 31\")\n\tassert.Equal(t, int64(1), carbon.Parse(\"2020-07-05\").DiffInMonths(), \"It should be equal to 1\")\n\tassert.Equal(t, int64(1), carbon.Parse(\"2020-07-05\").DiffAbsInMonths(), \"It should be equal to 1\")\n\tassert.Equal(t, int64(4), carbon.Parse(\"2020-07-05\").DiffInWeeks(), \"It should be equal to 4\")\n\tassert.Equal(t, int64(4), carbon.Parse(\"2020-07-05\").DiffAbsInWeeks(), \"It should be equal to 4\")\n\tassert.Equal(t, int64(31), carbon.Parse(\"2020-07-05\").DiffInDays(), \"It should be equal to 31\")\n\tassert.Equal(t, int64(31), carbon.Parse(\"2020-07-05\").DiffAbsInDays(), \"It should be equal to 31\")\n\tassert.Equal(t, int64(-13), carbon.Parse(\"2020-08-05 13:14:15\").DiffInHours(), \"It should be equal to -13\")\n\tassert.Equal(t, int64(13), carbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInHours(), \"It should be equal to 13\")\n\tassert.Equal(t, int64(-794), carbon.Parse(\"2020-08-05 13:14:15\").DiffInMinutes(), \"It should be equal to -794\")\n\tassert.Equal(t, int64(794), carbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInMinutes(), \"It should be equal to 794\")\n\tassert.Equal(t, int64(-47655), carbon.Parse(\"2020-08-05 13:14:15\").DiffInSeconds(), \"It should be equal to -47655\")\n\tassert.Equal(t, int64(47655), carbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInSeconds(), \"It should be equal to 47655\")\n\tassert.Equal(t, \"-13 hours\", carbon.Parse(\"2020-08-05 13:14:15\").DiffInString(), \"It should be -13 hours\")\n\tassert.Equal(t, \"13 hours\", carbon.Parse(\"2020-08-05 13:14:15\").DiffAbsInString(), \"It should be 13 hours\")\n\tassert.Equal(t, \"-13h0m0s\", carbon.Parse(\"2020-08-05 13:00:00\").DiffInDuration().String(), \"It should be -13h0m0s\")\n\tassert.Equal(t, \"13h0m0s\", carbon.Parse(\"2020-08-05 13:00:00\").DiffAbsInDuration().String(), \"It should be 13h0m0s\")\n\tassert.Equal(t, \"13 hours from now\", carbon.Parse(\"2020-08-05 13:14:15\").DiffForHumans(), \"It should be 13 hours from now\")\n}\n\nfunc TestCarbon_UnSetTestNow(t *testing.T) {\n\tcarbon := NewCarbon()\n\tcarbon.SetTestNow(Parse(\"2020-08-05\"))\n\tcarbon.UnSetTestNow()\n\n\tassert.Equal(t, Now().ToDateString(), carbon.Now().ToDateString())\n}\n\nfunc TestCarbon_IsSetTestNow(t *testing.T) {\n\tcarbon := NewCarbon()\n\tassert.False(t, Now().IsSetTestNow(), \"It should be equal to false\")\n\n\tcarbon.SetTestNow(Parse(\"2020-08-05\"))\n\tassert.True(t, carbon.IsSetTestNow(), \"It should be equal to true\")\n}\n"
        },
        {
          "name": "traveler.go",
          "type": "blob",
          "size": 13.708984375,
          "content": "package carbon\n\nimport (\n\t\"time\"\n)\n\n// Now returns a Carbon instance for now.\n// 当前\nfunc (c Carbon) Now(timezone ...string) Carbon {\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tif c.IsSetTestNow() {\n\t\tnow := CreateFromTimestampNano(c.testNow, c.Location())\n\t\tnow.testNow = c.testNow\n\t\treturn now\n\t}\n\tc.time = time.Now().In(c.loc)\n\treturn c\n}\n\n// Now returns a Carbon instance for now.\n// 当前\nfunc Now(timezone ...string) Carbon {\n\treturn NewCarbon().Now(timezone...)\n}\n\n// Tomorrow returns a Carbon instance for tomorrow.\n// 明天\nfunc (c Carbon) Tomorrow(timezone ...string) Carbon {\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tif !c.IsZero() {\n\t\treturn c.AddDay()\n\t}\n\treturn c.Now().AddDay()\n}\n\n// Tomorrow returns a Carbon instance for tomorrow.\n// 明天\nfunc Tomorrow(timezone ...string) Carbon {\n\treturn NewCarbon().Tomorrow(timezone...)\n}\n\n// Yesterday returns a Carbon instance for yesterday.\n// 昨天\nfunc (c Carbon) Yesterday(timezone ...string) Carbon {\n\tif len(timezone) > 0 {\n\t\tc.loc, c.Error = getLocationByTimezone(timezone[0])\n\t}\n\tif c.Error != nil {\n\t\treturn c\n\t}\n\tif !c.IsZero() {\n\t\treturn c.SubDay()\n\t}\n\treturn c.Now().SubDay()\n}\n\n// Yesterday returns a Carbon instance for yesterday.\n// 昨天\nfunc Yesterday(timezone ...string) Carbon {\n\treturn NewCarbon().Yesterday(timezone...)\n}\n\n// AddDuration adds one duration.\n// 按照时长增加时间,支持整数/浮点数和符号ns(纳秒)、us(微妙)、ms(毫秒)、s(秒)、m(分钟)、h(小时)的组合\nfunc (c Carbon) AddDuration(duration string) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\ttd, err := parseByDuration(duration)\n\tc.time, c.Error = c.StdTime().Add(td), err\n\treturn c\n}\n\n// SubDuration subtracts one duration.\n// 按照时长减少时间,支持整数/浮点数和符号ns(纳秒)、us(微妙)、ms(毫秒)、s(秒)、m(分钟)、h(小时)的组合\nfunc (c Carbon) SubDuration(duration string) Carbon {\n\treturn c.AddDuration(\"-\" + duration)\n}\n\n// AddCenturies adds some centuries.\n// N个世纪后\nfunc (c Carbon) AddCenturies(centuries int) Carbon {\n\treturn c.AddYears(centuries * YearsPerCentury)\n}\n\n// AddCenturiesNoOverflow adds some centuries without overflowing month.\n// N个世纪后(月份不溢出)\nfunc (c Carbon) AddCenturiesNoOverflow(centuries int) Carbon {\n\treturn c.AddYearsNoOverflow(centuries * YearsPerCentury)\n}\n\n// AddCentury adds one century.\n// 1个世纪后\nfunc (c Carbon) AddCentury() Carbon {\n\treturn c.AddCenturies(1)\n}\n\n// AddCenturyNoOverflow adds one century without overflowing month.\n// 1个世纪后(月份不溢出)\nfunc (c Carbon) AddCenturyNoOverflow() Carbon {\n\treturn c.AddCenturiesNoOverflow(1)\n}\n\n// SubCenturies subtracts some centuries.\n// N个世纪前\nfunc (c Carbon) SubCenturies(centuries int) Carbon {\n\treturn c.SubYears(centuries * YearsPerCentury)\n}\n\n// SubCenturiesNoOverflow subtracts some centuries without overflowing month.\n// N个世纪前(月份不溢出)\nfunc (c Carbon) SubCenturiesNoOverflow(centuries int) Carbon {\n\treturn c.SubYearsNoOverflow(centuries * YearsPerCentury)\n}\n\n// SubCentury subtracts one century.\n// 1个世纪前\nfunc (c Carbon) SubCentury() Carbon {\n\treturn c.SubCenturies(1)\n}\n\n// SubCenturyNoOverflow subtracts one century without overflowing month.\n// 1个世纪前(月份不溢出)\nfunc (c Carbon) SubCenturyNoOverflow() Carbon {\n\treturn c.SubCenturiesNoOverflow(1)\n}\n\n// AddDecades adds some decades.\n// N个年代后\nfunc (c Carbon) AddDecades(decades int) Carbon {\n\treturn c.AddYears(decades * YearsPerDecade)\n}\n\n// AddDecadesNoOverflow adds some decades without overflowing month.\n// N个年代后(月份不溢出)\nfunc (c Carbon) AddDecadesNoOverflow(decades int) Carbon {\n\treturn c.AddYearsNoOverflow(decades * YearsPerDecade)\n}\n\n// AddDecade adds one decade.\n// 1个年代后\nfunc (c Carbon) AddDecade() Carbon {\n\treturn c.AddDecades(1)\n}\n\n// AddDecadeNoOverflow adds one decade without overflowing month.\n// 1个年代后(月份不溢出)\nfunc (c Carbon) AddDecadeNoOverflow() Carbon {\n\treturn c.AddDecadesNoOverflow(1)\n}\n\n// SubDecades subtracts some decades.\n// N个年代后\nfunc (c Carbon) SubDecades(decades int) Carbon {\n\treturn c.SubYears(decades * YearsPerDecade)\n}\n\n// SubDecadesNoOverflow subtracts some decades without overflowing month.\n// N个年代后(月份不溢出)\nfunc (c Carbon) SubDecadesNoOverflow(decades int) Carbon {\n\treturn c.SubYearsNoOverflow(decades * YearsPerDecade)\n}\n\n// SubDecade subtracts one decade.\n// 1个年代后\nfunc (c Carbon) SubDecade() Carbon {\n\treturn c.SubDecades(1)\n}\n\n// SubDecadeNoOverflow subtracts one decade without overflowing month.\n// 1个年代后(月份不溢出)\nfunc (c Carbon) SubDecadeNoOverflow() Carbon {\n\treturn c.SubDecadesNoOverflow(1)\n}\n\n// AddYears adds some years.\n// N年后\nfunc (c Carbon) AddYears(years int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\tc.time = c.StdTime().AddDate(years, 0, 0)\n\treturn c\n}\n\n// AddYearsNoOverflow adds some years without overflowing month.\n// N年后(月份不溢出)\nfunc (c Carbon) AddYearsNoOverflow(years int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\tnanosecond := c.Nanosecond()\n\tyear, month, day, hour, minute, second := c.DateTime()\n\t// 获取N年后本月的最后一天\n\tlastYear, lastMonth, lastDay := c.create(year+years, month+1, 0, hour, minute, second, nanosecond).Date()\n\tif day > lastDay {\n\t\tday = lastDay\n\t}\n\treturn c.create(lastYear, lastMonth, day, hour, minute, second, nanosecond)\n}\n\n// AddYear adds one year.\n// 1年后\nfunc (c Carbon) AddYear() Carbon {\n\treturn c.AddYears(1)\n}\n\n// AddYearNoOverflow adds one year without overflowing month.\n// 1年后(月份不溢出)\nfunc (c Carbon) AddYearNoOverflow() Carbon {\n\treturn c.AddYearsNoOverflow(1)\n}\n\n// SubYears subtracts some years.\n// N年前\nfunc (c Carbon) SubYears(years int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\treturn c.AddYears(-years)\n}\n\n// SubYearsNoOverflow subtracts some years without overflowing month.\n// N年前(月份不溢出)\nfunc (c Carbon) SubYearsNoOverflow(years int) Carbon {\n\treturn c.AddYearsNoOverflow(-years)\n}\n\n// SubYear subtracts one year.\n// 1年前\nfunc (c Carbon) SubYear() Carbon {\n\treturn c.SubYears(1)\n}\n\n// SubYearNoOverflow subtracts one year without overflowing month.\n// 1年前(月份不溢出)\nfunc (c Carbon) SubYearNoOverflow() Carbon {\n\treturn c.SubYearsNoOverflow(1)\n}\n\n// AddQuarters adds some quarters\n// N个季度后\nfunc (c Carbon) AddQuarters(quarters int) Carbon {\n\treturn c.AddMonths(quarters * MonthsPerQuarter)\n}\n\n// AddQuartersNoOverflow adds quarters without overflowing month.\n// N个季度后(月份不溢出)\nfunc (c Carbon) AddQuartersNoOverflow(quarters int) Carbon {\n\treturn c.AddMonthsNoOverflow(quarters * MonthsPerQuarter)\n}\n\n// AddQuarter adds one quarter\n// 1个季度后\nfunc (c Carbon) AddQuarter() Carbon {\n\treturn c.AddQuarters(1)\n}\n\n// AddQuarterNoOverflow adds one quarter without overflowing month.\n// 1个季度后(月份不溢出)\nfunc (c Carbon) AddQuarterNoOverflow() Carbon {\n\treturn c.AddQuartersNoOverflow(1)\n}\n\n// SubQuarters subtracts some quarters.\n// N个季度前\nfunc (c Carbon) SubQuarters(quarters int) Carbon {\n\treturn c.AddQuarters(-quarters)\n}\n\n// SubQuartersNoOverflow subtracts some quarters without overflowing month.\n// N个季度前(月份不溢出)\nfunc (c Carbon) SubQuartersNoOverflow(quarters int) Carbon {\n\treturn c.AddMonthsNoOverflow(-quarters * MonthsPerQuarter)\n}\n\n// SubQuarter subtracts one quarter.\n// 1个季度前\nfunc (c Carbon) SubQuarter() Carbon {\n\treturn c.SubQuarters(1)\n}\n\n// SubQuarterNoOverflow subtracts one quarter without overflowing month.\n// 1个季度前(月份不溢出)\nfunc (c Carbon) SubQuarterNoOverflow() Carbon {\n\treturn c.SubQuartersNoOverflow(1)\n}\n\n// AddMonths adds some months.\n// N个月后\nfunc (c Carbon) AddMonths(months int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\tc.time = c.StdTime().AddDate(0, months, 0)\n\treturn c\n}\n\n// AddMonthsNoOverflow adds some months without overflowing month.\n// N个月后(月份不溢出)\nfunc (c Carbon) AddMonthsNoOverflow(months int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\tnanosecond := c.Nanosecond()\n\tyear, month, day, hour, minute, second := c.DateTime()\n\t// 获取N月后的最后一天\n\tlastYear, lastMonth, lastDay := c.create(year, month+months+1, 0, hour, minute, second, nanosecond).Date()\n\tif day > lastDay {\n\t\tday = lastDay\n\t}\n\treturn c.create(lastYear, lastMonth, day, hour, minute, second, nanosecond)\n}\n\n// AddMonth adds one month.\n// 1个月后\nfunc (c Carbon) AddMonth() Carbon {\n\treturn c.AddMonths(1)\n}\n\n// AddMonthNoOverflow adds one month without overflowing month.\n// 1个月后(月份不溢出)\nfunc (c Carbon) AddMonthNoOverflow() Carbon {\n\treturn c.AddMonthsNoOverflow(1)\n}\n\n// SubMonths subtracts some months.\n// N个月前\nfunc (c Carbon) SubMonths(months int) Carbon {\n\treturn c.AddMonths(-months)\n}\n\n// SubMonthsNoOverflow subtracts some months without overflowing month.\n// N个月前(月份不溢出)\nfunc (c Carbon) SubMonthsNoOverflow(months int) Carbon {\n\treturn c.AddMonthsNoOverflow(-months)\n}\n\n// SubMonth subtracts one month.\n// 1个月前\nfunc (c Carbon) SubMonth() Carbon {\n\treturn c.SubMonths(1)\n}\n\n// SubMonthNoOverflow subtracts one month without overflowing month.\n// 1个月前(月份不溢出)\nfunc (c Carbon) SubMonthNoOverflow() Carbon {\n\treturn c.SubMonthsNoOverflow(1)\n}\n\n// AddWeeks adds some weeks.\n// N周后\nfunc (c Carbon) AddWeeks(weeks int) Carbon {\n\treturn c.AddDays(weeks * DaysPerWeek)\n}\n\n// AddWeek adds one week.\n// 1周后\nfunc (c Carbon) AddWeek() Carbon {\n\treturn c.AddWeeks(1)\n}\n\n// SubWeeks subtracts some weeks.\n// N周前\nfunc (c Carbon) SubWeeks(weeks int) Carbon {\n\treturn c.SubDays(weeks * DaysPerWeek)\n}\n\n// SubWeek subtracts one week.\n// 1周前\nfunc (c Carbon) SubWeek() Carbon {\n\treturn c.SubWeeks(1)\n}\n\n// AddDays adds some days.\n// N天后\nfunc (c Carbon) AddDays(days int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\tc.time = c.StdTime().AddDate(0, 0, days)\n\treturn c\n}\n\n// AddDay adds one day.\n// 1天后\nfunc (c Carbon) AddDay() Carbon {\n\treturn c.AddDays(1)\n}\n\n// SubDays subtracts some days.\n// N天前\nfunc (c Carbon) SubDays(days int) Carbon {\n\treturn c.AddDays(-days)\n}\n\n// SubDay subtracts one day.\n// 1天前\nfunc (c Carbon) SubDay() Carbon {\n\treturn c.SubDays(1)\n}\n\n// AddHours adds some hours.\n// N小时后\nfunc (c Carbon) AddHours(hours int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\ttd := time.Duration(hours) * time.Hour\n\tc.time = c.StdTime().Add(td)\n\treturn c\n}\n\n// AddHour adds one hour.\n// 1小时后\nfunc (c Carbon) AddHour() Carbon {\n\treturn c.AddHours(1)\n}\n\n// SubHours subtracts some hours.\n// N小时前\nfunc (c Carbon) SubHours(hours int) Carbon {\n\treturn c.AddHours(-hours)\n}\n\n// SubHour subtracts one hour.\n// 1小时前\nfunc (c Carbon) SubHour() Carbon {\n\treturn c.SubHours(1)\n}\n\n// AddMinutes adds some minutes.\n// N分钟后\nfunc (c Carbon) AddMinutes(minutes int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\ttd := time.Duration(minutes) * time.Minute\n\tc.time = c.StdTime().Add(td)\n\treturn c\n}\n\n// AddMinute adds one minute.\n// 1分钟后\nfunc (c Carbon) AddMinute() Carbon {\n\treturn c.AddMinutes(1)\n}\n\n// SubMinutes subtracts some minutes.\n// N分钟前\nfunc (c Carbon) SubMinutes(minutes int) Carbon {\n\treturn c.AddMinutes(-minutes)\n}\n\n// SubMinute subtracts one minute.\n// 1分钟前\nfunc (c Carbon) SubMinute() Carbon {\n\treturn c.SubMinutes(1)\n}\n\n// AddSeconds adds some seconds.\n// N秒钟后\nfunc (c Carbon) AddSeconds(seconds int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\ttd := time.Duration(seconds) * time.Second\n\tc.time = c.StdTime().Add(td)\n\treturn c\n}\n\n// AddSecond adds one second.\n// 1秒钟后\nfunc (c Carbon) AddSecond() Carbon {\n\treturn c.AddSeconds(1)\n}\n\n// SubSeconds subtracts some seconds.\n// N秒钟前\nfunc (c Carbon) SubSeconds(seconds int) Carbon {\n\treturn c.AddSeconds(-seconds)\n}\n\n// SubSecond subtracts one second.\n// 1秒钟前\nfunc (c Carbon) SubSecond() Carbon {\n\treturn c.SubSeconds(1)\n}\n\n// AddMilliseconds adds some milliseconds.\n// N毫秒后\nfunc (c Carbon) AddMilliseconds(milliseconds int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\ttd := time.Duration(milliseconds) * time.Millisecond\n\tc.time = c.StdTime().Add(td)\n\treturn c\n}\n\n// AddMillisecond adds one millisecond.\n// 1毫秒后\nfunc (c Carbon) AddMillisecond() Carbon {\n\treturn c.AddMilliseconds(1)\n}\n\n// SubMilliseconds subtracts some milliseconds.\n// N毫秒前\nfunc (c Carbon) SubMilliseconds(milliseconds int) Carbon {\n\treturn c.AddMilliseconds(-milliseconds)\n}\n\n// SubMillisecond subtracts one millisecond.\n// 1毫秒前\nfunc (c Carbon) SubMillisecond() Carbon {\n\treturn c.SubMilliseconds(1)\n}\n\n// AddMicroseconds adds some microseconds.\n// N微秒后\nfunc (c Carbon) AddMicroseconds(microseconds int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\ttd := time.Duration(microseconds) * time.Microsecond\n\tc.time = c.StdTime().Add(td)\n\treturn c\n}\n\n// AddMicrosecond adds one microsecond.\n// 1微秒后\nfunc (c Carbon) AddMicrosecond() Carbon {\n\treturn c.AddMicroseconds(1)\n}\n\n// SubMicroseconds subtracts some microseconds.\n// N微秒前\nfunc (c Carbon) SubMicroseconds(microseconds int) Carbon {\n\treturn c.AddMicroseconds(-microseconds)\n}\n\n// SubMicrosecond subtracts one microsecond.\n// 1微秒前\nfunc (c Carbon) SubMicrosecond() Carbon {\n\treturn c.SubMicroseconds(1)\n}\n\n// AddNanoseconds adds some nanoseconds.\n// N纳秒后\nfunc (c Carbon) AddNanoseconds(nanoseconds int) Carbon {\n\tif c.IsInvalid() {\n\t\treturn c\n\t}\n\ttd := time.Duration(nanoseconds) * time.Nanosecond\n\tc.time = c.StdTime().Add(td)\n\treturn c\n}\n\n// AddNanosecond adds one nanosecond.\n// 1纳秒后\nfunc (c Carbon) AddNanosecond() Carbon {\n\treturn c.AddNanoseconds(1)\n}\n\n// SubNanoseconds subtracts some nanoseconds.\n// N纳秒前\nfunc (c Carbon) SubNanoseconds(nanoseconds int) Carbon {\n\treturn c.AddNanoseconds(-nanoseconds)\n}\n\n// SubNanosecond subtracts one nanosecond.\n// 1纳秒前\nfunc (c Carbon) SubNanosecond() Carbon {\n\treturn c.SubNanoseconds(1)\n}\n"
        },
        {
          "name": "traveler_bench_test.go",
          "type": "blob",
          "size": 13.5556640625,
          "content": "package carbon\n\nimport \"testing\"\n\nfunc BenchmarkCarbon_Now(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tNow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNow(PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_Yesterday(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tYesterday()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tYesterday(PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_Tomorrow(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tTomorrow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tTomorrow(PRC)\n\t}\n}\n\nfunc BenchmarkCarbon_AddDuration(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddDuration(\"1s\")\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddDuration(\"1s\")\n\t}\n}\n\nfunc BenchmarkCarbon_SubDuration(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubDuration(\"1s\")\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubDuration(\"1s\")\n\t}\n}\n\nfunc BenchmarkCarbon_AddCenturies(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddCenturies(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddCenturies(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddCenturiesNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddCenturiesNoOverflow(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddCenturiesNoOverflow(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddCentury(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddCentury()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddCentury()\n\t}\n}\n\nfunc BenchmarkCarbon_AddCenturyNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddCenturyNoOverflow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddCenturyNoOverflow()\n\t}\n}\n\nfunc BenchmarkCarbon_SubCenturies(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubCenturies(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubCenturies(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubCenturiesNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubCenturiesNoOverflow(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubCenturiesNoOverflow(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubCentury(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubCentury()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubCentury()\n\t}\n}\n\nfunc BenchmarkCarbon_SubCenturyNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubCenturyNoOverflow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubCenturyNoOverflow()\n\t}\n}\n\nfunc BenchmarkCarbon_AddDecades(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddDecades(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddDecades(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddDecadesNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddDecadesNoOverflow(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddDecadesNoOverflow(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddDecade(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddDecade()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddDecade()\n\t}\n}\n\nfunc BenchmarkCarbon_AddDecadeNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddDecadeNoOverflow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddDecadeNoOverflow()\n\t}\n}\n\nfunc BenchmarkCarbon_SubDecades(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubDecades(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubDecades(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubDecadesNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubDecadesNoOverflow(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubDecadesNoOverflow(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubDecade(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubDecade()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubDecade()\n\t}\n}\n\nfunc BenchmarkCarbon_SubDecadeNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubDecadeNoOverflow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubDecadeNoOverflow()\n\t}\n}\n\nfunc BenchmarkCarbon_AddYears(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddYears(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddYears(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddYearsNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddYearsNoOverflow(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddYearsNoOverflow(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddYear()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddYear()\n\t}\n}\n\nfunc BenchmarkCarbon_AddYearNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddYearNoOverflow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddYearNoOverflow()\n\t}\n}\n\nfunc BenchmarkCarbon_SubYears(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubYears(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubYears(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubYearsNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubYearsNoOverflow(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubYearsNoOverflow(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubYear(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubYear()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubYear()\n\t}\n}\n\nfunc BenchmarkCarbon_SubYearNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubYearNoOverflow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubYearNoOverflow()\n\t}\n}\n\nfunc BenchmarkCarbon_AddQuarters(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddQuarters(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddQuarters(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddQuartersNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddQuartersNoOverflow(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddQuartersNoOverflow(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddQuarter(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddQuarter()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddQuarter()\n\t}\n}\n\nfunc BenchmarkCarbon_AddQuarterNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddQuarter()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddQuarter()\n\t}\n}\n\nfunc BenchmarkCarbon_SubQuarters(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubQuarters(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubQuarters(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubQuartersNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubQuartersNoOverflow(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubQuartersNoOverflow(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubQuarter(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubQuarter()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubQuarter()\n\t}\n}\n\nfunc BenchmarkCarbon_SubQuarterNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubQuarterNoOverflow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubQuarterNoOverflow()\n\t}\n}\n\nfunc BenchmarkCarbon_AddMonths(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddMonths(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddMonths(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddMonthsNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddMonthsNoOverflow(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddMonthsNoOverflow(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddMonth(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddMonth()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddMonth()\n\t}\n}\n\nfunc BenchmarkCarbon_AddMonthNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddMonthNoOverflow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddMonthNoOverflow()\n\t}\n}\n\nfunc BenchmarkCarbon_SubMonths(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubMonths(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubMonths(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubMonthsNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubMonthsNoOverflow(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubMonthsNoOverflow(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubMonth(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubMonth()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubMonth()\n\t}\n}\n\nfunc BenchmarkCarbon_SubMonthNoOverflow(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubMonthNoOverflow()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubMonthNoOverflow()\n\t}\n}\n\nfunc BenchmarkCarbon_AddWeeks(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddWeeks(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddWeeks(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddWeek(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddWeek()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddWeek()\n\t}\n}\n\nfunc BenchmarkCarbon_SubWeeks(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubWeeks(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubWeeks(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubWeek(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubWeek()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubWeek()\n\t}\n}\n\nfunc BenchmarkCarbon_AddDays(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddDays(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddDays(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddDay(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddDay()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddDay()\n\t}\n}\n\nfunc BenchmarkCarbon_SubDays(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubDays(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubDays(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubDay(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubDay()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubDay()\n\t}\n}\n\nfunc BenchmarkCarbon_AddHours(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddHours(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddHours(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddHour(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddHour()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddHour()\n\t}\n}\n\nfunc BenchmarkCarbon_SubHours(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubHours(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubHours(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubHour(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubHour()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubHour()\n\t}\n}\n\nfunc BenchmarkCarbon_AddMinutes(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddMinutes(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddMinutes(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddMinute(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddMinute()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddMinute()\n\t}\n}\n\nfunc BenchmarkCarbon_SubMinutes(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubMinutes(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubMinutes(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubMinute(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubMinute()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubMinute()\n\t}\n}\n\nfunc BenchmarkCarbon_AddSeconds(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddSeconds(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddSeconds(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddSecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddSecond()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddSecond()\n\t}\n}\n\nfunc BenchmarkCarbon_SubSeconds(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubSeconds(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubSeconds(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubSecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubSecond()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubSecond()\n\t}\n}\n\nfunc BenchmarkCarbon_AddMilliseconds(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddMilliseconds(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddMilliseconds(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddMillisecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddMillisecond()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddMillisecond()\n\t}\n}\n\nfunc BenchmarkCarbon_SubMilliseconds(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubMilliseconds(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubMilliseconds(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubMillisecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubMillisecond()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubMillisecond()\n\t}\n}\n\nfunc BenchmarkCarbon_AddMicroseconds(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddMicroseconds(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddMicroseconds(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddMicrosecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddMicrosecond()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddMicrosecond()\n\t}\n}\n\nfunc BenchmarkCarbon_SubMicroseconds(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubMicroseconds(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubMicroseconds(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubMicrosecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubMicrosecond()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubMicrosecond()\n\t}\n}\n\nfunc BenchmarkCarbon_AddNanoseconds(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddNanoseconds(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddNanoseconds(1)\n\t}\n}\n\nfunc BenchmarkCarbon_AddNanosecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.AddNanosecond()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().AddNanosecond()\n\t}\n}\n\nfunc BenchmarkCarbon_SubNanoseconds(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubNanoseconds(1)\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubNanoseconds(1)\n\t}\n}\n\nfunc BenchmarkCarbon_SubNanosecond(b *testing.B) {\n\tnow := Now()\n\tfor n := 0; n < b.N; n++ {\n\t\tnow.SubNanosecond()\n\t}\n\tfor n := 0; n < b.N; n++ {\n\t\tNewCarbon().SubNanosecond()\n\t}\n}\n"
        },
        {
          "name": "traveler_unit_test.go",
          "type": "blob",
          "size": 57.2001953125,
          "content": "package carbon\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCarbon_Now(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Now(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Now(),\n\t\t\twant:   time.Now().Format(DateLayout),\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Now(Local),\n\t\t\twant:   time.Now().Format(DateLayout),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"Now()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Yesterday(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Yesterday(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Yesterday(),\n\t\t\twant:   time.Now().AddDate(0, 0, -1).Format(DateLayout),\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Yesterday(Local),\n\t\t\twant:   time.Now().AddDate(0, 0, -1).Format(DateLayout),\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\").Yesterday(),\n\t\t\twant:   \"2020-08-04\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"Yesterday()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_Tomorrow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Tomorrow(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Tomorrow(),\n\t\t\twant:   time.Now().AddDate(0, 0, 1).Format(DateLayout),\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Tomorrow(Local),\n\t\t\twant:   time.Now().AddDate(0, 0, 1).Format(DateLayout),\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-08-05\").Tomorrow(),\n\t\t\twant:   \"2020-08-06\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"Tomorrow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddDuration(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddDuration(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"now\").AddDuration(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\").AddDuration(\"10h\"),\n\t\t\twant:   \"2020-01-01 23:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\").AddDuration(\"10.5h\"),\n\t\t\twant:   \"2020-01-01 23:44:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\").AddDuration(\"10m\"),\n\t\t\twant:   \"2020-01-01 13:24:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\").AddDuration(\"10.5m\"),\n\t\t\twant:   \"2020-01-01 13:24:45\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(), \"AddDuration()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubDuration(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubDuration(\"\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"now\").SubDuration(\"xxx\"),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\").SubDuration(\"10h\"),\n\t\t\twant:   \"2020-01-01 03:14:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\").SubDuration(\"10.5h\"),\n\t\t\twant:   \"2020-01-01 02:44:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\").SubDuration(\"10m\"),\n\t\t\twant:   \"2020-01-01 13:04:15\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-01-01 13:14:15\").SubDuration(\"10.5m\"),\n\t\t\twant:   \"2020-01-01 13:03:45\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateTimeString(), \"SubDuration()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddCenturies(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddCenturies(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddCenturies(3),\n\t\t\twant:   \"2320-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddCenturies(3),\n\t\t\twant:   \"2320-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddCenturies(3),\n\t\t\twant:   \"2320-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddCenturies(3),\n\t\t\twant:   \"2320-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddCenturies(3),\n\t\t\twant:   \"2320-02-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddCenturies()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddCenturiesNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddCenturiesNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddCenturiesNoOverflow(3),\n\t\t\twant:   \"2320-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddCenturiesNoOverflow(3),\n\t\t\twant:   \"2320-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddCenturiesNoOverflow(3),\n\t\t\twant:   \"2320-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddCenturiesNoOverflow(3),\n\t\t\twant:   \"2320-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddCenturiesNoOverflow(3),\n\t\t\twant:   \"2320-02-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddCenturiesNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubCenturies(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubCenturies(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubCenturies(3),\n\t\t\twant:   \"1720-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubCenturies(3),\n\t\t\twant:   \"1720-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubCenturies(3),\n\t\t\twant:   \"1720-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubCenturies(3),\n\t\t\twant:   \"1720-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubCenturies(3),\n\t\t\twant:   \"1720-02-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubCenturies()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubCenturiesNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubCenturiesNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubCenturiesNoOverflow(3),\n\t\t\twant:   \"1720-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubCenturiesNoOverflow(3),\n\t\t\twant:   \"1720-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubCenturiesNoOverflow(3),\n\t\t\twant:   \"1720-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubCenturiesNoOverflow(3),\n\t\t\twant:   \"1720-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubCenturiesNoOverflow(3),\n\t\t\twant:   \"1720-02-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubCenturiesNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddCentury(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddCentury(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddCentury(),\n\t\t\twant:   \"2120-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddCentury(),\n\t\t\twant:   \"2120-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddCentury(),\n\t\t\twant:   \"2120-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddCentury(),\n\t\t\twant:   \"2120-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddCentury(),\n\t\t\twant:   \"2120-02-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddCentury()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddCenturyNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddCenturyNoOverflow(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddCenturyNoOverflow(),\n\t\t\twant:   \"2120-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddCenturyNoOverflow(),\n\t\t\twant:   \"2120-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddCenturyNoOverflow(),\n\t\t\twant:   \"2120-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddCenturyNoOverflow(),\n\t\t\twant:   \"2120-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddCenturyNoOverflow(),\n\t\t\twant:   \"2120-02-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddCenturyNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubCentury(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubCentury(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubCentury(),\n\t\t\twant:   \"1920-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubCentury(),\n\t\t\twant:   \"1920-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubCentury(),\n\t\t\twant:   \"1920-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubCentury(),\n\t\t\twant:   \"1920-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubCentury(),\n\t\t\twant:   \"1920-02-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubCentury()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubCenturyNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubCenturyNoOverflow(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubCenturyNoOverflow(),\n\t\t\twant:   \"1920-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubCenturyNoOverflow(),\n\t\t\twant:   \"1920-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubCenturyNoOverflow(),\n\t\t\twant:   \"1920-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubCenturyNoOverflow(),\n\t\t\twant:   \"1920-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubCenturyNoOverflow(),\n\t\t\twant:   \"1920-02-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubCenturyNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddDecades(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddDecades(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddDecades(3),\n\t\t\twant:   \"2050-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddDecades(3),\n\t\t\twant:   \"2050-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddDecades(3),\n\t\t\twant:   \"2050-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddDecades(3),\n\t\t\twant:   \"2050-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddDecades(3),\n\t\t\twant:   \"2050-03-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddDecades()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddDecadesNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddDecadesNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddDecadesNoOverflow(3),\n\t\t\twant:   \"2050-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddDecadesNoOverflow(3),\n\t\t\twant:   \"2050-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddDecadesNoOverflow(3),\n\t\t\twant:   \"2050-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddDecadesNoOverflow(3),\n\t\t\twant:   \"2050-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddDecadesNoOverflow(3),\n\t\t\twant:   \"2050-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddDecadesNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddDecade(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddDecade(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddDecade(),\n\t\t\twant:   \"2030-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddDecade(),\n\t\t\twant:   \"2030-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddDecade(),\n\t\t\twant:   \"2030-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddDecade(),\n\t\t\twant:   \"2030-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddDecade(),\n\t\t\twant:   \"2030-03-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddDecade()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddDecadeNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddDecadeNoOverflow(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddDecadeNoOverflow(),\n\t\t\twant:   \"2030-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddDecadeNoOverflow(),\n\t\t\twant:   \"2030-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddDecadeNoOverflow(),\n\t\t\twant:   \"2030-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddDecadeNoOverflow(),\n\t\t\twant:   \"2030-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddDecadeNoOverflow(),\n\t\t\twant:   \"2030-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddDecadeNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubDecades(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubDecades(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubDecades(3),\n\t\t\twant:   \"1990-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubDecades(3),\n\t\t\twant:   \"1990-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubDecades(3),\n\t\t\twant:   \"1990-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubDecades(3),\n\t\t\twant:   \"1990-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubDecades(3),\n\t\t\twant:   \"1990-03-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubDecades()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubDecadesNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubDecadesNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubDecadesNoOverflow(3),\n\t\t\twant:   \"1990-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubDecadesNoOverflow(3),\n\t\t\twant:   \"1990-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubDecadesNoOverflow(3),\n\t\t\twant:   \"1990-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubDecadesNoOverflow(3),\n\t\t\twant:   \"1990-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubDecadesNoOverflow(3),\n\t\t\twant:   \"1990-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubDecadesNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubDecade(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubDecade(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubDecade(),\n\t\t\twant:   \"2010-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubDecade(),\n\t\t\twant:   \"2010-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubDecade(),\n\t\t\twant:   \"2010-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubDecade(),\n\t\t\twant:   \"2010-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubDecade(),\n\t\t\twant:   \"2010-03-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubDecade()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubDecadeNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubDecadeNoOverflow(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubDecadeNoOverflow(),\n\t\t\twant:   \"2010-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubDecadeNoOverflow(),\n\t\t\twant:   \"2010-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubDecadeNoOverflow(),\n\t\t\twant:   \"2010-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubDecadeNoOverflow(),\n\t\t\twant:   \"2010-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubDecadeNoOverflow(),\n\t\t\twant:   \"2010-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubDecadeNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddYears(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddYears(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddYears(3),\n\t\t\twant:   \"2023-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddYears(3),\n\t\t\twant:   \"2023-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddYears(3),\n\t\t\twant:   \"2023-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddYears(3),\n\t\t\twant:   \"2023-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddYears(3),\n\t\t\twant:   \"2023-03-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddYears()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddYearsNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddYearsNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddYearsNoOverflow(3),\n\t\t\twant:   \"2023-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddYearsNoOverflow(3),\n\t\t\twant:   \"2023-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddYearsNoOverflow(3),\n\t\t\twant:   \"2023-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddYearsNoOverflow(3),\n\t\t\twant:   \"2023-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddYearsNoOverflow(3),\n\t\t\twant:   \"2023-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddYearsNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubYears(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubYears(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubYears(3),\n\t\t\twant:   \"2017-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubYears(3),\n\t\t\twant:   \"2017-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubYears(3),\n\t\t\twant:   \"2017-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubYears(3),\n\t\t\twant:   \"2017-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubYears(3),\n\t\t\twant:   \"2017-03-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubYears()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubYearsNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubYearsNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubYearsNoOverflow(3),\n\t\t\twant:   \"2017-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubYearsNoOverflow(3),\n\t\t\twant:   \"2017-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubYearsNoOverflow(3),\n\t\t\twant:   \"2017-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubYearsNoOverflow(3),\n\t\t\twant:   \"2017-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubYearsNoOverflow(3),\n\t\t\twant:   \"2017-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubYearsNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddYear(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddYear(),\n\t\t\twant:   \"2021-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddYear(),\n\t\t\twant:   \"2021-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddYear(),\n\t\t\twant:   \"2021-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddYear(),\n\t\t\twant:   \"2021-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddYear(),\n\t\t\twant:   \"2021-03-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddYearNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddYearNoOverflow(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddYearNoOverflow(),\n\t\t\twant:   \"2021-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddYearNoOverflow(),\n\t\t\twant:   \"2021-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddYearNoOverflow(),\n\t\t\twant:   \"2021-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddYearNoOverflow(),\n\t\t\twant:   \"2021-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddYearNoOverflow(),\n\t\t\twant:   \"2021-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddYearNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubYear(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubYear(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubYear(),\n\t\t\twant:   \"2019-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubYear(),\n\t\t\twant:   \"2019-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubYear(),\n\t\t\twant:   \"2019-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubYear(),\n\t\t\twant:   \"2019-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubYear(),\n\t\t\twant:   \"2019-03-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubYear()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubYearNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubYearNoOverflow(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubYearNoOverflow(),\n\t\t\twant:   \"2019-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubYearNoOverflow(),\n\t\t\twant:   \"2019-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubYearNoOverflow(),\n\t\t\twant:   \"2019-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubYearNoOverflow(),\n\t\t\twant:   \"2019-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubYearNoOverflow(),\n\t\t\twant:   \"2019-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubYearNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddQuarters(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddQuarters(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2019-08-01\").AddQuarters(2),\n\t\t\twant:   \"2020-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2019-08-31\").AddQuarters(2),\n\t\t\twant:   \"2020-03-02\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddQuarters(2),\n\t\t\twant:   \"2020-07-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddQuarters(2),\n\t\t\twant:   \"2020-08-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddQuarters(2),\n\t\t\twant:   \"2020-08-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-08-05\").AddQuarters(2),\n\t\t\twant:   \"2021-02-05\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2020-08-31\").AddQuarters(2),\n\t\t\twant:   \"2021-03-03\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddQuarters()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddQuartersNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddQuartersNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2019-08-01\").AddQuartersNoOverflow(2),\n\t\t\twant:   \"2020-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2019-08-31\").AddQuartersNoOverflow(2),\n\t\t\twant:   \"2020-02-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddQuartersNoOverflow(2),\n\t\t\twant:   \"2020-07-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddQuartersNoOverflow(2),\n\t\t\twant:   \"2020-08-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddQuartersNoOverflow(2),\n\t\t\twant:   \"2020-08-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-08-05\").AddQuartersNoOverflow(2),\n\t\t\twant:   \"2021-02-05\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2020-08-31\").AddQuartersNoOverflow(2),\n\t\t\twant:   \"2021-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddQuartersNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubQuarters(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubQuarters(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2019-08-01\").SubQuarters(2),\n\t\t\twant:   \"2019-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2019-08-31\").SubQuarters(2),\n\t\t\twant:   \"2019-03-03\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubQuarters(2),\n\t\t\twant:   \"2019-07-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubQuarters(2),\n\t\t\twant:   \"2019-08-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubQuarters(2),\n\t\t\twant:   \"2019-08-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-08-05\").SubQuarters(2),\n\t\t\twant:   \"2020-02-05\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2020-08-31\").SubQuarters(2),\n\t\t\twant:   \"2020-03-02\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubQuarters()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubQuartersNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubQuartersNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2019-08-01\").SubQuartersNoOverflow(2),\n\t\t\twant:   \"2019-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2019-08-31\").SubQuartersNoOverflow(2),\n\t\t\twant:   \"2019-02-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubQuartersNoOverflow(2),\n\t\t\twant:   \"2019-07-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubQuartersNoOverflow(2),\n\t\t\twant:   \"2019-08-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubQuartersNoOverflow(2),\n\t\t\twant:   \"2019-08-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-08-05\").SubQuartersNoOverflow(2),\n\t\t\twant:   \"2020-02-05\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case8\",\n\t\t\tcarbon: Parse(\"2020-08-31\").SubQuartersNoOverflow(2),\n\t\t\twant:   \"2020-02-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubQuartersNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddQuarter(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddQuarter(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2019-11-01\").AddQuarter(),\n\t\t\twant:   \"2020-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2019-11-30\").AddQuarter(),\n\t\t\twant:   \"2020-03-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddQuarter(),\n\t\t\twant:   \"2020-05-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddQuarter(),\n\t\t\twant:   \"2020-05-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-11-01\").AddQuarter(),\n\t\t\twant:   \"2021-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-11-30\").AddQuarter(),\n\t\t\twant:   \"2021-03-02\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddQuarter()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddQuarterNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddQuarterNoOverflow(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2019-11-01\").AddQuarterNoOverflow(),\n\t\t\twant:   \"2020-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2019-11-30\").AddQuarterNoOverflow(),\n\t\t\twant:   \"2020-02-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddQuarterNoOverflow(),\n\t\t\twant:   \"2020-05-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddQuarterNoOverflow(),\n\t\t\twant:   \"2020-05-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-11-01\").AddQuarterNoOverflow(),\n\t\t\twant:   \"2021-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case7\",\n\t\t\tcarbon: Parse(\"2020-11-30\").AddQuarterNoOverflow(),\n\t\t\twant:   \"2021-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddQuarterNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubQuarter(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubQuarter(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubQuarter(),\n\t\t\twant:   \"2019-10-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubQuarter(),\n\t\t\twant:   \"2019-10-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubQuarter(),\n\t\t\twant:   \"2019-11-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubQuarter(),\n\t\t\twant:   \"2019-11-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubQuarter(),\n\t\t\twant:   \"2019-11-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubQuarter()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubQuarterNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubQuarterNoOverflow(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubQuarterNoOverflow(),\n\t\t\twant:   \"2019-10-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubQuarterNoOverflow(),\n\t\t\twant:   \"2019-10-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubQuarterNoOverflow(),\n\t\t\twant:   \"2019-11-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubQuarterNoOverflow(),\n\t\t\twant:   \"2019-11-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubQuarterNoOverflow(),\n\t\t\twant:   \"2019-11-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubQuarterNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddMonths(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddMonthsNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddMonths(3),\n\t\t\twant:   \"2020-04-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddMonths(3),\n\t\t\twant:   \"2020-05-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddMonths(3),\n\t\t\twant:   \"2020-05-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddMonths(3),\n\t\t\twant:   \"2020-05-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddMonths(3),\n\t\t\twant:   \"2020-05-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddMonths()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddMonthsNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddMonthsNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddMonthsNoOverflow(3),\n\t\t\twant:   \"2020-04-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddMonthsNoOverflow(3),\n\t\t\twant:   \"2020-04-30\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddMonthsNoOverflow(3),\n\t\t\twant:   \"2020-05-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddMonthsNoOverflow(3),\n\t\t\twant:   \"2020-05-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddMonthsNoOverflow(3),\n\t\t\twant:   \"2020-05-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddMonthsNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubMonths(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubMonths(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubMonths(1),\n\t\t\twant:   \"2019-12-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubMonths(2),\n\t\t\twant:   \"2019-11-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubMonths()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubMonthsNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubMonthsNoOverflow(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubMonthsNoOverflow(1),\n\t\t\twant:   \"2019-12-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubMonthsNoOverflow(2),\n\t\t\twant:   \"2019-11-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubMonthsNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddMonth(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddMonth(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddMonth(),\n\t\t\twant:   \"2020-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddMonth(),\n\t\t\twant:   \"2020-03-02\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddMonth(),\n\t\t\twant:   \"2020-03-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddMonth(),\n\t\t\twant:   \"2020-03-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddMonth(),\n\t\t\twant:   \"2020-03-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddMonth()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddMonthNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddMonthNoOverflow(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddMonthNoOverflow(),\n\t\t\twant:   \"2020-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddMonthNoOverflow(),\n\t\t\twant:   \"2020-02-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddMonthNoOverflow(),\n\t\t\twant:   \"2020-03-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddMonthNoOverflow(),\n\t\t\twant:   \"2020-03-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddMonthNoOverflow(),\n\t\t\twant:   \"2020-03-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddMonthNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubMonth(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubMonth(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubMonth(),\n\t\t\twant:   \"2019-12-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubMonth(),\n\t\t\twant:   \"2019-12-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubMonth(),\n\t\t\twant:   \"2020-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubMonth(),\n\t\t\twant:   \"2020-01-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubMonth(),\n\t\t\twant:   \"2020-01-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubMonth()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubMonthNoOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubMonthNoOverflow(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubMonthNoOverflow(),\n\t\t\twant:   \"2019-12-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubMonthNoOverflow(),\n\t\t\twant:   \"2019-12-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubMonthNoOverflow(),\n\t\t\twant:   \"2020-01-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubMonthNoOverflow(),\n\t\t\twant:   \"2020-01-28\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubMonthNoOverflow(),\n\t\t\twant:   \"2020-01-29\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubMonthNoOverflow()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddWeeks(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddWeeks(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddWeeks(1),\n\t\t\twant:   \"2020-01-08\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddWeeks(2),\n\t\t\twant:   \"2020-01-15\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddWeeks()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubWeeks(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubWeeks(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubWeeks(1),\n\t\t\twant:   \"2019-12-25\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubWeeks(2),\n\t\t\twant:   \"2019-12-18\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubWeeks()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddWeek(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddWeek(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddWeek(),\n\t\t\twant:   \"2020-01-08\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddWeek(),\n\t\t\twant:   \"2020-02-07\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddWeek(),\n\t\t\twant:   \"2020-02-08\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddWeek(),\n\t\t\twant:   \"2020-03-06\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddWeek(),\n\t\t\twant:   \"2020-03-07\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddWeek()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubWeek(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubWeek(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubWeek(),\n\t\t\twant:   \"2019-12-25\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubWeek(),\n\t\t\twant:   \"2020-01-24\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubWeek(),\n\t\t\twant:   \"2020-01-25\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubWeek(),\n\t\t\twant:   \"2020-02-21\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubWeek(),\n\t\t\twant:   \"2020-02-22\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubWeek()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddDays(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddDays(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddDays(1),\n\t\t\twant:   \"2020-01-02\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddDays(2),\n\t\t\twant:   \"2020-01-03\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddDays()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubDays(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddHours(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubDays(1),\n\t\t\twant:   \"2019-12-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubDays(2),\n\t\t\twant:   \"2019-12-30\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubDays()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddDay(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddDay(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").AddDay(),\n\t\t\twant:   \"2020-01-02\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").AddDay(),\n\t\t\twant:   \"2020-02-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").AddDay(),\n\t\t\twant:   \"2020-02-02\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").AddDay(),\n\t\t\twant:   \"2020-02-29\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").AddDay(),\n\t\t\twant:   \"2020-03-01\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"AddDay()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubDay(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubDay(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-01-01\").SubDay(),\n\t\t\twant:   \"2019-12-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-01-31\").SubDay(),\n\t\t\twant:   \"2020-01-30\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case4\",\n\t\t\tcarbon: Parse(\"2020-02-01\").SubDay(),\n\t\t\twant:   \"2020-01-31\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case5\",\n\t\t\tcarbon: Parse(\"2020-02-28\").SubDay(),\n\t\t\twant:   \"2020-02-27\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case6\",\n\t\t\tcarbon: Parse(\"2020-02-29\").SubDay(),\n\t\t\twant:   \"2020-02-28\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToDateString(), \"SubDay()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddHours(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddHours(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddHours(1),\n\t\t\twant:   \"2020-08-05 14:14:15.222222222 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddHours(2),\n\t\t\twant:   \"2020-08-05 15:14:15.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddHours()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubHours(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubHours(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubHours(1),\n\t\t\twant:   \"2020-08-05 12:14:15.222222222 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubHours(2),\n\t\t\twant:   \"2020-08-05 11:14:15.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubHours()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddHour(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddHour(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddHour(),\n\t\t\twant:   \"2020-08-05 14:14:15.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddHour()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubHour(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubHour(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubHour(),\n\t\t\twant:   \"2020-08-05 12:14:15.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubHour()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddMinutes(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddMinutes(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddMinutes(1),\n\t\t\twant:   \"2020-08-05 13:15:15.222222222 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddMinutes(2),\n\t\t\twant:   \"2020-08-05 13:16:15.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddMinutes()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubMinutes(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubMinutes(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubMinutes(1),\n\t\t\twant:   \"2020-08-05 13:13:15.222222222 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubMinutes(2),\n\t\t\twant:   \"2020-08-05 13:12:15.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubMinutes()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddMinute(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddMinute(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddMinute(),\n\t\t\twant:   \"2020-08-05 13:15:15.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddMinute()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubMinute(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubMinute(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubMinute(),\n\t\t\twant:   \"2020-08-05 13:13:15.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubMinute()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddSeconds(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddSeconds(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddSeconds(1),\n\t\t\twant:   \"2020-08-05 13:14:16.222222222 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddSeconds(2),\n\t\t\twant:   \"2020-08-05 13:14:17.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddSeconds()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubSeconds(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubSeconds(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubSeconds(1),\n\t\t\twant:   \"2020-08-05 13:14:14.222222222 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubSeconds(2),\n\t\t\twant:   \"2020-08-05 13:14:13.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubSeconds()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddSecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddSecond(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddSecond(),\n\t\t\twant:   \"2020-08-05 13:14:16.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddSecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubSecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubSecond(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubSecond(),\n\t\t\twant:   \"2020-08-05 13:14:14.222222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubSecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddMilliseconds(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddMilliseconds(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddMilliseconds(1),\n\t\t\twant:   \"2020-08-05 13:14:15.223222222 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddMilliseconds(2),\n\t\t\twant:   \"2020-08-05 13:14:15.224222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddMilliseconds()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubMilliseconds(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubMilliseconds(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubMilliseconds(1),\n\t\t\twant:   \"2020-08-05 13:14:15.221222222 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubMilliseconds(2),\n\t\t\twant:   \"2020-08-05 13:14:15.220222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubMilliseconds()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddMillisecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddMillisecond(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddMillisecond(),\n\t\t\twant:   \"2020-08-05 13:14:15.223222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddMillisecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubMillisecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubMillisecond(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubMillisecond(),\n\t\t\twant:   \"2020-08-05 13:14:15.221222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubMillisecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddMicroseconds(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddMicroseconds(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddMicroseconds(1),\n\t\t\twant:   \"2020-08-05 13:14:15.222223222 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddMicroseconds(2),\n\t\t\twant:   \"2020-08-05 13:14:15.222224222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubMicroseconds()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubMicroseconds(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubMicroseconds(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubMicroseconds(1),\n\t\t\twant:   \"2020-08-05 13:14:15.222221222 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubMicroseconds(2),\n\t\t\twant:   \"2020-08-05 13:14:15.222220222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubMicroseconds()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddMicrosecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddMicrosecond(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddMicrosecond(),\n\t\t\twant:   \"2020-08-05 13:14:15.222223222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddMicrosecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubMicrosecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubMicrosecond(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubMicrosecond(),\n\t\t\twant:   \"2020-08-05 13:14:15.222221222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubMicrosecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddNanoseconds(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddNanoseconds(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddNanoseconds(1),\n\t\t\twant:   \"2020-08-05 13:14:15.222222223 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddNanoseconds(2),\n\t\t\twant:   \"2020-08-05 13:14:15.222222224 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddNanoseconds()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubNanoseconds(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubNanoseconds(0),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubNanoseconds(1),\n\t\t\twant:   \"2020-08-05 13:14:15.222222221 +0800 CST\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case3\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubNanoseconds(2),\n\t\t\twant:   \"2020-08-05 13:14:15.22222222 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubNanoseconds()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_AddNanosecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").AddNanosecond(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").AddNanosecond(),\n\t\t\twant:   \"2020-08-05 13:14:15.222222223 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"AddNanosecond()\")\n\t\t})\n\t}\n}\n\nfunc TestCarbon_SubNanosecond(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tcarbon Carbon\n\t\twant   string\n\t}{\n\t\t{\n\t\t\tname:   \"case1\",\n\t\t\tcarbon: Parse(\"\").SubNanosecond(),\n\t\t\twant:   \"\",\n\t\t},\n\t\t{\n\t\t\tname:   \"case2\",\n\t\t\tcarbon: Parse(\"2020-08-05 13:14:15.222222222\").SubNanosecond(),\n\t\t\twant:   \"2020-08-05 13:14:15.222222221 +0800 CST\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equalf(t, tt.want, tt.carbon.ToString(), \"SubNanosecond()\")\n\t\t})\n\t}\n}\n"
        }
      ]
    }
  ]
}