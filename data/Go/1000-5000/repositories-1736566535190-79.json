{
  "metadata": {
    "timestamp": 1736566535190,
    "page": 79,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dunglas/mercure",
      "stars": 4644,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.169921875,
          "content": "*.db\n*.pyc\n__pycache__\ndist\n/caddy/caddy\n/caddy/mercure/mercure\n/caddy/mercure/__debug_bin\n/cmd/mercure/mercure\n/certs\n/spec/mercure.html\n/spec/mercure.txt\n/spec/mercure.xml\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.701171875,
          "content": "---\nrun:\n  tests: true\n\nlinters:\n  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint\n  enable-all: true\n  disable:\n    - errcheck\n    - lll\n    - wsl\n    - testpackage\n    - exhaustruct\n    - paralleltest\n    - cyclop\n    - forcetypeassert\n    - tagliatelle\n    - varnamelen\n    - nonamedreturns\n    - testableexamples\n    - musttag\n    - depguard\n    - mnd\n\n    # Go 1.22+\n    - intrange\n\n    # weird issues\n    - nolintlint\n    - canonicalheader\n\n    # deprecated\n    - exportloopref\n\nissues:\n  exclude-rules:\n    - path: _test\\.go\n      linters:\n        - gochecknoglobals\n        - funlen\n        - godox\n        - noctx\n        - wrapcheck\n        - goconst\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 4.3232421875,
          "content": "version: 2\nbefore:\n  hooks:\n    - go mod tidy\nchecksum:\n  name_template: \"checksums.txt\"\nsnapshot:\n  version_template: \"{{ incpatch .Version }}-next\"\nchangelog:\n  use: github-native\nrelease:\n  prerelease: auto\n  draft: true\nenv:\n  - CGO_ENABLED=0\nbuilds:\n  - id: caddy\n    dir: caddy/mercure\n    ldflags:\n      - -X 'github.com/caddyserver/caddy/v2.CustomVersion=Mercure.rocks {{ .Version }} Caddy'\n    tags:\n      - nobadger\n      - nomysql\n      - nopgx\n    goos:\n      - linux\n      - darwin\n      - windows\n    goarch:\n      - \"386\"\n      - amd64\n      - arm\n      - arm64\n    goarm:\n      - \"5\"\n      - \"6\"\n      - \"7\"\n  # Legacy build\n  - id: legacy\n    dir: cmd/mercure\n    ldflags:\n      - -s -w -X github.com/dunglas/mercure/common.version={{ .Version }} -X github.com/dunglas/mercure/common.commit={{ .ShortCommit }} -X github.com/dunglas/mercure/common.buildDate={{ .Date }}\n    goos:\n      - linux\n      - darwin\n      - windows\n    goarch:\n      - \"386\"\n      - amd64\n      - arm\n      - arm64\nupx:\n  - enabled: true\n    goos: [linux]\n    compress: best\narchives:\n  - builds:\n      - caddy\n    name_template: >-\n      {{ .ProjectName }}_\n      {{- title .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n    files:\n      - COPYRIGHT\n      - LICENSE\n      - README.md\n      - Caddyfile\n      - dev.Caddyfile\n    format_overrides:\n      - goos: windows\n        format: zip\n  - id: legacy\n    builds:\n      - legacy\n    name_template: >-\n      {{ .ProjectName }}-legacy_\n      {{- title .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n    files:\n      - COPYRIGHT\n      - LICENSE\n      - README.md\n    format_overrides:\n      - goos: windows\n        format: zip\ndockers:\n  - ids:\n      - caddy\n    goos: linux\n    goarch: amd64\n    image_templates:\n      - \"dunglas/mercure:{{ .Tag }}-amd64\"\n      - \"dunglas/mercure:v{{ .Major }}-amd64\"\n      - \"dunglas/mercure:v{{ .Major }}.{{ .Minor }}-amd64\"\n      - \"dunglas/mercure:latest-amd64\"\n    use: buildx\n    build_flag_templates:\n      - \"--platform=linux/amd64\"\n    extra_files:\n      - Caddyfile\n      - dev.Caddyfile\n  - ids:\n      - caddy\n    goos: linux\n    goarch: arm64\n    image_templates:\n      - \"dunglas/mercure:{{ .Tag }}-arm64v8\"\n      - \"dunglas/mercure:v{{ .Major }}-arm64v8\"\n      - \"dunglas/mercure:v{{ .Major }}.{{ .Minor }}-arm64v8\"\n      - \"dunglas/mercure:latest-arm64v8\"\n    use: buildx\n    build_flag_templates:\n      - \"--platform=linux/arm64/v8\"\n    extra_files:\n      - Caddyfile\n      - dev.Caddyfile\n  - ids:\n      - legacy\n    dockerfile: Dockerfile.legacy\n    image_templates:\n      - \"dunglas/mercure:legacy-{{ .Tag }}\"\n      - \"dunglas/mercure:legacy-v{{ .Major }}\"\n      - \"dunglas/mercure:legacy-v{{ .Major }}.{{ .Minor }}\"\n      - \"dunglas/mercure:legacy-latest\"\ndocker_manifests:\n  - name_template: dunglas/mercure:{{ .Tag }}\n    image_templates:\n      - dunglas/mercure:{{ .Tag }}-amd64\n      - dunglas/mercure:{{ .Tag }}-arm64v8\n  - name_template: dunglas/mercure:v{{ .Major }}\n    image_templates:\n      - dunglas/mercure:v{{ .Major }}-amd64\n      - dunglas/mercure:v{{ .Major }}-arm64v8\n  - name_template: dunglas/mercure:v{{ .Major }}.{{ .Minor }}\n    image_templates:\n      - dunglas/mercure:v{{ .Major }}.{{ .Minor }}-amd64\n      - dunglas/mercure:v{{ .Major }}.{{ .Minor }}-arm64v8\n  - name_template: dunglas/mercure:latest\n    image_templates:\n      - dunglas/mercure:latest-amd64\n      - dunglas/mercure:latest-arm64v8\nnfpms:\n  - id: linux_packages\n    package_name: mercure\n    file_name_template: \"{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}.{{ .Format }}\"\n    builds:\n      - caddy\n    formats:\n      - apk\n      - deb\n      - rpm\n    maintainer: \"Kévin Dunglas <kevin@dunglas.dev>\"\n    description: \"An open, easy, fast, reliable and battery-efficient solution for real-time communications.\"\n    license: \"AGPL-3.0-or-later\"\n    vendor: \"Dunglas Services SAS\"\n    homepage: \"https://mercure.rocks\"\n    bindir: /usr/bin \nsigns:\n  - artifacts: checksum\n    args:\n      [\n        \"--batch\",\n        \"-u\",\n        \"{{ .Env.GPG_FINGERPRINT }}\",\n        \"--output\",\n        \"${signature}\",\n        \"--detach-sign\",\n        \"${artifact}\",\n      ]\n"
        },
        {
          "name": ".markdownlintignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "spec/**\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.16015625,
          "content": "# The spec is in the IETF flavor of Markdown\nspec/mercure.md\n\n# Ignore Kubernetes templates\n**/charts/**/*.yaml\n**/chart/**/*.yaml\ncharts/mercure/README.md\n\n*cache\n"
        },
        {
          "name": ".textlintignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": "spec/mercure.txt\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.037109375,
          "content": "# Contributing\n\n## License and Copyright Attribution\n\nWhen you open a Pull Request to the project, you agree to license your code under the [GNU AFFERO GENERAL PUBLIC LICENSE](LICENSE)\nand to transfer the copyright on the submitted code to [Kévin Dunglas](https://dunglas.fr).\n\nBe sure to have the right to do that (if you are a professional, ask your company)!\n\nIf you include code from another project, please mention it in the Pull Request description and credit the original author.\n\n## Commit Messages\n\nThe commit message must follow the [Conventional Commits specification](https://www.conventionalcommits.org/).\nThe following types are allowed:\n\n- `fix`: bugfix\n- `feat`: new feature\n- `docs`: change in the documentation\n- `spec`: spec change\n- `test`: test-related change\n- `perf`: performance optimization\n- `ci`: CI-related change\n\nExamples:\n\n    fix: Fix something\n\n    feat: Introduce X\n\n    feat!: Introduce Y, BC break\n\n    docs: Add docs for X\n\n    spec: Z disambiguation\n\n## Hub\n\nClone the project and make your changes:\n\n    git clone https://github.com/dunglas/mercure\n    cd mercure\n\nTo run the test suite:\n\n    go test -v -timeout 30s github.com/dunglas/mercure\n\nTo test the Caddy module:\n\n    cd caddy/mercure\n    MERCURE_PUBLISHER_JWT_KEY='!ChangeThisMercureHubJWTSecretKey!' MERCURE_SUBSCRIBER_JWT_KEY='!ChangeThisMercureHubJWTSecretKey!' go run -tags nobadger,nomysql,nopgx main.go run --config ../../dev.Caddyfile\n\nGo to `https://localhost` and enjoy!\n\nTo test the legacy server:\n\n    cd cmd/mercure\n    go run -tags=nobadger,nomysql,nopgx main.go\n\nGo to `http://localhost:3000` and enjoy!\n\nWhen you send a PR, make sure that:\n\n- You add valid test cases.\n- Tests are green.\n- You make a PR on the related documentation.\n- You make the PR on the same branch you based your changes on. If you see commits\n  that you did not make in your PR, you're doing it wrong.\n\n### Configuring Visual Studio Code\n\nA configuration for Visual Studio Code is provided in the `.vscode/` directory of the repository.\nIt is automatically loaded by Visual Studio Code.\n\n### Finding Deadlocks\n\nTo debug potential deadlocks:\n\n1. Install `go-deadlock`: `./tests/use-go-deadlock.sh`\n2. Run the tests in race mode: `go test -race ./... -v`\n3. To stress-test the app, run the load test (see `docs/load-testing.md`)\n4. Be sure to remove `go-deadlock` before committing\n\n## Spec\n\nThe spec is written in Markdown, compatible with [Mmark](https://mmark.miek.nl/).\nIt is then converted in [the \"xml2rfc\" Version 3 Vocabulary](https://tools.ietf.org/html/rfc7991).\n\nTo contribute to the protocol itself:\n\n- Make your changes\n- [Download Mmark](https://github.com/mmarkdown/mmark/releases)\n- [Download `xml2rfc` using pip](https://pypi.org/project/xml2rfc/): `pip install xml2rfc`\n- Generate the XML file: `mmark spec/mercure.md > spec/mercure.xml`\n- Validate the generated XML file and generate the text file: `xml2rfc --text --v3 spec/mercure.xml`\n- Remove non-ASCII characters from the generated `mercure.txt` file (example: K**é**vin)\n- If appropriate, be sure to update the reference implementation accordingly\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 2.09375,
          "content": "Copyright (C) 2018-present Kévin Dunglas\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License, version 3,\nas published by the Free Software Foundation.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAs a special exception, the copyright holders give permission to link the\ncode of portions of this program with the OpenSSL library under certain\nconditions as described in each individual source file and distribute\nlinked combinations including the program with the OpenSSL library. You\nmust comply with the GNU Affero General Public License in all respects\nfor all of the code used other than as permitted herein. If you modify\nfile(s) with this exception, you may extend this exception to your\nversion of the file(s), but you are not obligated to do so. If you do not\nwish to do so, delete this exception statement from your version. If you\ndelete this exception statement from all source files in the program,\nthen also delete it in the license file.\n\nThe copyright holders provide the following statement as a clarification\nof the conditions of this License.  This statement is not a further\nrestriction.  It will be deemed a legal notice allowed under Section 7b,\nand must accordingly be preserved in any redistribution of the Program.\nThis clarification applies to the Mercure licensed hereunder by\nKévin Dunglas.  The Corresponding Source of the Program includes any\nsoftware that interacts with the Program and contains functionality to\nprovision or manage the Program for the purpose of enabling third-party\nusers to interact with the Program remotely through a computer network,\nand any such software that is added to or combined with the Program\nconstitutes modification that produces a work based on the Program.\n"
        },
        {
          "name": "Caddyfile",
          "type": "blob",
          "size": 1.1318359375,
          "content": "# Learn how to configure the Mercure.rocks Hub on https://mercure.rocks/docs/hub/config\n{\n\t{$GLOBAL_OPTIONS}\n}\n\n{$CADDY_EXTRA_CONFIG}\n\n{$SERVER_NAME:localhost} {\n\tlog {\n\t\tformat filter {\n\t\t\tfields {\n\t\t\t\trequest>uri query {\n\t\t\t\t\treplace authorization REDACTED\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tencode zstd gzip\n\n\tmercure {\n\t\t# Publisher JWT key\n\t\tpublisher_jwt {env.MERCURE_PUBLISHER_JWT_KEY} {env.MERCURE_PUBLISHER_JWT_ALG}\n\t\t# Subscriber JWT key\n\t\tsubscriber_jwt {env.MERCURE_SUBSCRIBER_JWT_KEY} {env.MERCURE_SUBSCRIBER_JWT_ALG}\n\t\t# Extra directives\n\t\t{$MERCURE_EXTRA_DIRECTIVES}\n\t}\n\n\t{$CADDY_SERVER_EXTRA_DIRECTIVES}\n\n\tlog_skip /robots.txt\n\tlog_skip /healthz\n\tlog_skip /favicon.ico\n\n\theader / Content-Type \"text/html; charset=utf-8\"\n\trespond / `<!DOCTYPE html>\n\t<html lang=en>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"robots\" content=\"noindex\">\n\t<title>Welcome to Mercure</title>\n\t<h1>Welcome to Mercure</h1>\n\t<p>The URL of your hub is <code>/.well-known/mercure</code>.\n\tRead the documentation on <a href=\"https://mercure.rocks\">Mercure.rocks, real-time apps made easy</a>.`\n\trespond /robots.txt `User-agent: *\n\tDisallow: /`\n\trespond /healthz 200\n\trespond \"Not Found\" 404\n}\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.505859375,
          "content": "# syntax=docker/dockerfile:1\nFROM caddy:2-alpine\n\nLABEL org.opencontainers.image.title=Mercure.rocks\nLABEL org.opencontainers.image.description=\"Real-time made easy\"\nLABEL org.opencontainers.image.url=https://mercure.rocks\nLABEL org.opencontainers.image.source=https://github.com/dunglas/mercure\nLABEL org.opencontainers.image.licenses=AGPL-3.0-or-later\nLABEL org.opencontainers.image.vendor=\"Kévin Dunglas\"\n\nCOPY mercure /usr/bin/caddy\nCOPY Caddyfile /etc/caddy/Caddyfile\nCOPY dev.Caddyfile /etc/caddy/dev.Caddyfile\n"
        },
        {
          "name": "Dockerfile.legacy",
          "type": "blob",
          "size": 0.0986328125,
          "content": "# hadolint ignore=DL3006\nFROM gcr.io/distroless/static\nCOPY mercure /\nCMD [\"/mercure\"]\nEXPOSE 80 443\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.4697265625,
          "content": "<h1 align=\"center\"><a href=\"https://mercure.rocks\"><img src=\"public/mercure.svg\" alt=\"Mercure: Real-time Made Easy\" title=\"Live Updates Made Easy\"></a></h1>\n\n_Protocol and Reference Implementation_\n\nMercure is a protocol for pushing data updates to web browsers and other HTTP clients in a convenient, fast, reliable, and battery-efficient way.\nIt is especially useful to publish async and real-time updates of resources served through web APIs, to reactive web and mobile apps.\n\n[![Awesome](https://awesome.re/badge.svg)](docs/ecosystem/awesome.md)\n[![Artifact HUB](https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/mercure)](https://artifacthub.io/packages/search?repo=mercure)\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/dunglas/mercure)](https://pkg.go.dev/github.com/dunglas/mercure)\n[![CI](https://github.com/dunglas/mercure/actions/workflows/ci.yml/badge.svg)](https://github.com/dunglas/mercure/actions/workflows/ci.yml)\n[![Coverage Status](https://coveralls.io/repos/github/dunglas/mercure/badge.svg?branch=master)](https://coveralls.io/github/dunglas/mercure?branch=master)\n[![Go Report Card](https://goreportcard.com/badge/github.com/dunglas/mercure)](https://goreportcard.com/report/github.com/dunglas/mercure)\n\n![Subscriptions Schema](spec/subscriptions.png)\n\n- [Getting started](https://mercure.rocks/docs/getting-started)\n- [Full documentation](https://mercure.rocks/docs)\n- [Demo](https://demo.mercure.rocks/)\n\n[The protocol](https://mercure.rocks/spec) is maintained in this repository and is also available as [an Internet-Draft](https://datatracker.ietf.org/doc/draft-dunglas-mercure/).\n\nA reference, production-grade, implementation of [**a Mercure hub**](https://mercure.rocks/docs/hub/install) (the server) is also available in this repository.\nIt's free software (AGPL) written in Go. It is provided along with a library that can be used in any Go application to implement the Mercure protocol directly (without a hub) and [an official Docker image](https://hub.docker.com/r/dunglas/mercure).\n\nIn addition, a managed and high-scalability version of the Mercure.rocks hub is [available on Mercure.rocks](https://mercure.rocks/pricing).\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## License and Copyright\n\nSee [license information](https://mercure.rocks/docs/hub/license).\n\n## Credits\n\nCreated by [Kévin Dunglas](https://dunglas.fr). Graphic design by [Laury Sorriaux](https://github.com/ginifizz).\nSponsored by [Les-Tilleuls.coop](https://les-tilleuls.coop).\n"
        },
        {
          "name": "authorization.go",
          "type": "blob",
          "size": 4.85546875,
          "content": "package mercure\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"go.uber.org/zap\"\n)\n\n// claims contains Mercure's JWT claims.\ntype claims struct {\n\tMercure mercureClaim `json:\"mercure\"`\n\t// Optional fallback\n\tMercureNamespaced *mercureClaim `json:\"https://mercure.rocks/\"`\n\tjwt.RegisteredClaims\n}\n\ntype mercureClaim struct {\n\tPublish   []string    `json:\"publish\"`\n\tSubscribe []string    `json:\"subscribe\"`\n\tPayload   interface{} `json:\"payload\"`\n}\n\ntype role int\n\nconst (\n\tdefaultCookieName      = \"mercureAuthorization\"\n\tbearerPrefix           = \"Bearer \"\n\troleSubscriber    role = iota\n\trolePublisher\n)\n\nvar (\n\t// ErrInvalidAuthorizationHeader is returned when the Authorization header is invalid.\n\tErrInvalidAuthorizationHeader = errors.New(`invalid \"Authorization\" HTTP header`)\n\t// ErrInvalidAuthorizationQuery is returned when the authorization query parameter is invalid.\n\tErrInvalidAuthorizationQuery = errors.New(`invalid \"authorization\" Query parameter`)\n\t// ErrNoOrigin is returned when the cookie authorization mechanism is used and no Origin nor Referer headers are presents.\n\tErrNoOrigin = errors.New(`an \"Origin\" or a \"Referer\" HTTP header must be present to use the cookie-based authorization mechanism`)\n\t// ErrOriginNotAllowed is returned when the Origin is not allowed to post updates.\n\tErrOriginNotAllowed = errors.New(\"origin not allowed to post updates\")\n\t// ErrInvalidJWT is returned when the JWT is invalid.\n\tErrInvalidJWT = errors.New(\"invalid JWT\")\n\t// ErrPublicKey is returned when there is an error with the public key.\n\tErrPublicKey = errors.New(\"public key error\")\n)\n\n// Authorize validates the JWT that may be provided through an \"Authorization\" HTTP header or an authorization cookie.\n// It returns the claims contained in the token if it exists and is valid, nil if no token is provided (anonymous mode), and an error if the token is not valid.\nfunc authorize(r *http.Request, jwtKeyfunc jwt.Keyfunc, publishOrigins []string, cookieName string) (*claims, error) {\n\tauthorizationHeaders, headerExists := r.Header[\"Authorization\"]\n\tif headerExists {\n\t\tif len(authorizationHeaders) != 1 || len(authorizationHeaders[0]) < 48 || authorizationHeaders[0][:7] != bearerPrefix {\n\t\t\treturn nil, ErrInvalidAuthorizationHeader\n\t\t}\n\n\t\treturn validateJWT(authorizationHeaders[0][7:], jwtKeyfunc)\n\t}\n\n\tif authorizationQuery, queryExists := r.URL.Query()[\"authorization\"]; queryExists {\n\t\tif len(authorizationQuery) != 1 || len(authorizationQuery[0]) < 41 {\n\t\t\treturn nil, ErrInvalidAuthorizationQuery\n\t\t}\n\n\t\treturn validateJWT(authorizationQuery[0], jwtKeyfunc)\n\t}\n\n\tcookie, err := r.Cookie(cookieName)\n\tif err != nil {\n\t\t// Anonymous\n\t\treturn nil, nil //nolint:nilerr,nilnil\n\t}\n\n\t// CSRF attacks cannot occur when using safe methods\n\tif r.Method != http.MethodPost {\n\t\treturn validateJWT(cookie.Value, jwtKeyfunc)\n\t}\n\n\torigin := r.Header.Get(\"Origin\")\n\tif origin == \"\" {\n\t\t// Try to extract the origin from the Referer, or return an error\n\t\treferer := r.Header.Get(\"Referer\")\n\t\tif referer == \"\" {\n\t\t\treturn nil, ErrNoOrigin\n\t\t}\n\n\t\tu, err := url.Parse(referer)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"unable to parse referer: %w\", err)\n\t\t}\n\n\t\torigin = fmt.Sprintf(\"%s://%s\", u.Scheme, u.Host)\n\t}\n\n\tfor _, allowedOrigin := range publishOrigins {\n\t\tif allowedOrigin == \"*\" || origin == allowedOrigin {\n\t\t\treturn validateJWT(cookie.Value, jwtKeyfunc)\n\t\t}\n\t}\n\n\treturn nil, fmt.Errorf(\"%q: %w\", origin, ErrOriginNotAllowed)\n}\n\n// validateJWT validates that the provided JWT token is a valid Mercure token.\nfunc validateJWT(encodedToken string, jwtKeyfunc jwt.Keyfunc) (*claims, error) {\n\ttoken, err := jwt.ParseWithClaims(encodedToken, &claims{}, jwtKeyfunc)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to parse JWT: %w\", err)\n\t}\n\n\tif claims, ok := token.Claims.(*claims); ok && token.Valid {\n\t\tif claims.MercureNamespaced != nil {\n\t\t\tclaims.Mercure = *claims.MercureNamespaced\n\t\t}\n\n\t\treturn claims, nil\n\t}\n\n\treturn nil, ErrInvalidJWT\n}\n\nfunc canReceive(s *TopicSelectorStore, topics, topicSelectors []string) bool {\n\tfor _, topic := range topics {\n\t\tfor _, topicSelector := range topicSelectors {\n\t\t\tif s.match(topic, topicSelector) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false\n}\n\nfunc canDispatch(s *TopicSelectorStore, topics, topicSelectors []string) bool {\n\tfor _, topic := range topics {\n\t\tvar matched bool\n\t\tfor _, topicSelector := range topicSelectors {\n\t\t\tif topicSelector == \"*\" {\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tif s.match(topic, topicSelector) {\n\t\t\t\tmatched = true\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif !matched {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc (h *Hub) httpAuthorizationError(w http.ResponseWriter, r *http.Request, err error) {\n\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\tif c := h.logger.Check(zap.DebugLevel, \"Topic selectors not matched, not provided or authorization error\"); c != nil {\n\t\tc.Write(zap.String(\"remote_addr\", r.RemoteAddr), zap.Error(err))\n\t}\n}\n"
        },
        {
          "name": "authorization_test.go",
          "type": "blob",
          "size": 29.5302734375,
          "content": "package mercure\n\nimport (\n\t\"net/http\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nconst publicKeyRsa = `-----BEGIN PUBLIC KEY-----\nMIGeMA0GCSqGSIb3DQEBAQUAA4GMADCBiAKBgHVwuJsFmzsFnOkGj+OgAp4lTNqR\nCF0RZSmjY+ECWOJ3sSEzQ8qtkJe61uSjr/PKmqvBxxex0YtUL7waSS4jvq3ws8Bm\nWIxK2GqoAVjLjK8HzThSPQpgv2AjiEXD6iAERHeySLGjYAUgfMrVJ01J5fNSL+O+\nbCd7nPuNAyYHCOOHAgMBAAE=\n-----END PUBLIC KEY-----\n`\n\n//nolint:gosec\nconst privateKeyRsa = `-----BEGIN RSA PRIVATE KEY-----\nMIICWwIBAAKBgHVwuJsFmzsFnOkGj+OgAp4lTNqRCF0RZSmjY+ECWOJ3sSEzQ8qt\nkJe61uSjr/PKmqvBxxex0YtUL7waSS4jvq3ws8BmWIxK2GqoAVjLjK8HzThSPQpg\nv2AjiEXD6iAERHeySLGjYAUgfMrVJ01J5fNSL+O+bCd7nPuNAyYHCOOHAgMBAAEC\ngYAiOKOCgMK4Ey2i9YeOQ70fiiz375UpUX1SAcuD8KQn8crKqt6RO7xLimU+ILiP\n6LTjYcb7D5TI7dIvFNXIPSA9tpGbuPqzwa0aBkIoIxJkJ7vs6gHijq3kAQl3mik2\nddzL7OtdlbXG8fRnvgKsRLw2gVlv4+8C3OKmKADJR1bSQQJBAM/xS49IxjUIXMLO\n77tsGd+VxpKo1jrUG5Ao9feFfSxWiFnnlDG9DOriDvguPf0WUkU08j7fC3A3AKVd\ndQkkqWECQQCQlPSA96lJIUD9xCx7S46L7+e+A2EWnhyMb3u4D1EY5rZdA3/Zzc3P\n68Jb8RtRryGuDvezLRcqmVJWq5X97i3nAkADeJ2wSKC2ZetWfSnXURileNSVwifB\nV6UWJPjmJt5ODSu9hHYe1m8OxLNHRU5XmTXKXfXlQsfoGaLzH7pCatBBAkBraBzT\niiiaiTeszYV1+sVks85m3D/N+5udwFwaelZ2tz4Wjzj1ZuxUYAI9JzpyTjYpBjmB\nRCgHn2sJs+Jzh/NVAkEAnRQKOSQRcm/o4PWNsvrqRwoqUzDcnVcEY67pKPwcnnlR\nKi0jUpg2xzzwyA+nEI6Bf6CDaHKnCqxL7x0yk2XqeA==\n-----END RSA PRIVATE KEY-----\n`\n\nconst certificateRsa = `-----BEGIN CERTIFICATE-----\nMIIChDCCAe0CCQDlJhrdK2G+pDANBgkqhkiG9w0BAQsFADCBhTELMAkGA1UEBhMC\nVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28x\nEjAQBgNVBAoMCUFjbWUsIEluYzEUMBIGA1UEAwwLZXhhbXBsZS5jb20xHzAdBgkq\nhkiG9w0BCQEWEGFjbWVAZXhhbXBsZS5jb20wIBcNMjAxMjIxMTYxNjM2WhgPMzAy\nMDA0MjMxNjE2MzZaMIGFMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5p\nYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzESMBAGA1UECgwJQWNtZSwgSW5jMRQw\nEgYDVQQDDAtleGFtcGxlLmNvbTEfMB0GCSqGSIb3DQEJARYQYWNtZUBleGFtcGxl\nLmNvbTCBnjANBgkqhkiG9w0BAQEFAAOBjAAwgYgCgYB1cLibBZs7BZzpBo/joAKe\nJUzakQhdEWUpo2PhAljid7EhM0PKrZCXutbko6/zypqrwccXsdGLVC+8GkkuI76t\n8LPAZliMSthqqAFYy4yvB804Uj0KYL9gI4hFw+ogBER3skixo2AFIHzK1SdNSeXz\nUi/jvmwne5z7jQMmBwjjhwIDAQABMA0GCSqGSIb3DQEBCwUAA4GBABosw/cIJkKr\nKKBRFBiYuZEeilRHVP2UiUzC8dAASLyw7r63Fg8J7NEN5bYFNdNw1uvvteMryjYu\nt+4Iti/mSObpG8FbNb/pOkSJjuJvAxnAIL8iM/DbF28a0SfWiluu5Nk/PciJXLU4\nUtb8p35tfj97usdiEB0AN8ray4wZbVWj\n-----END CERTIFICATE-----\n`\n\nconst publicKeyEcdsa = `-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEOnSJ6Iht/FleVEz4s3ZFGcWQCM/I\nrX2Ld/0veRv8vTAm3NU/fErGzL/raNhOxt+BcXqZ6IpQQ4aWOFZh3hDd+Q==\n-----END PUBLIC KEY-----\n`\n\n//nolint:gosec\nconst privateKeyEcdsa = `-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIDZCo0gXrI9bKtspq8mLSrQ7BrGRm4WQylp4V2tx4MewoAoGCCqGSM49\nAwEHoUQDQgAEOnSJ6Iht/FleVEz4s3ZFGcWQCM/IrX2Ld/0veRv8vTAm3NU/fErG\nzL/raNhOxt+BcXqZ6IpQQ4aWOFZh3hDd+Q==\n-----END EC PRIVATE KEY-----\n`\n\nconst certificateEcdsa = `-----BEGIN CERTIFICATE-----\nMIICYjCCAgmgAwIBAgIUXRW9kusU+9K8dehUwIMiRYfJjC8wCgYIKoZIzj0EAwIw\ngYUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1T\nYW4gRnJhbmNpc2NvMRIwEAYDVQQKDAlBY21lLCBJbmMxFDASBgNVBAMMC2V4YW1w\nbGUuY29tMR8wHQYJKoZIhvcNAQkBFhBhY21lQGV4YW1wbGUuY29tMCAXDTI0MDkx\nNDA3MjEzM1oYDzMwMjAwODIzMDcyMTMzWjCBhTELMAkGA1UEBhMCVVMxEzARBgNV\nBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xEjAQBgNVBAoM\nCUFjbWUsIEluYzEUMBIGA1UEAwwLZXhhbXBsZS5jb20xHzAdBgkqhkiG9w0BCQEW\nEGFjbWVAZXhhbXBsZS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQ6dIno\niG38WV5UTPizdkUZxZAIz8itfYt3/S95G/y9MCbc1T98SsbMv+to2E7G34Fxepno\nilBDhpY4VmHeEN35o1MwUTAdBgNVHQ4EFgQUfE5wC1hbiE60iRLKmevGqbeMSyww\nHwYDVR0jBBgwFoAUfE5wC1hbiE60iRLKmevGqbeMSywwDwYDVR0TAQH/BAUwAwEB\n/zAKBggqhkjOPQQDAgNHADBEAiB84zB7sZrNN8KzDO1JgeS8h2mtUeceAqnCnBwZ\nkrdhhAIgQg4ytVMOy0m51tnOJ+B9nq9keVwNlsJOf7rwGVpRlFQ=\n-----END CERTIFICATE-----\n`\n\nconst publicKeyEd25519 = `-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAKdgAvlExrnPk8TYc9cNuk4fmruFOd88FYgg9M6SQKm4=\n-----END PUBLIC KEY-----\n`\n\n//nolint:gosec\nconst privateKeyEd25519 = `-----BEGIN PRIVATE KEY-----\nMC4CAQAwBQYDK2VwBCIEIEYj1RXJNLVFPWeuXZfpZJBW/s/Z+gTIsP0SGRCOEHKo\n-----END PRIVATE KEY-----\n`\n\nconst certificateEd25519 = `-----BEGIN CERTIFICATE-----\nMIICIzCCAdWgAwIBAgIUJ1OPv+s3BuDm6amXrQimaDEq9AowBQYDK2VwMIGFMQsw\nCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZy\nYW5jaXNjbzESMBAGA1UECgwJQWNtZSwgSW5jMRQwEgYDVQQDDAtleGFtcGxlLmNv\nbTEfMB0GCSqGSIb3DQEJARYQYWNtZUBleGFtcGxlLmNvbTAgFw0yNDA5MTQwNjE2\nMjdaGA8zMDIwMDgyMzA2MTYyN1owgYUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApD\nYWxpZm9ybmlhMRYwFAYDVQQHDA1TYW4gRnJhbmNpc2NvMRIwEAYDVQQKDAlBY21l\nLCBJbmMxFDASBgNVBAMMC2V4YW1wbGUuY29tMR8wHQYJKoZIhvcNAQkBFhBhY21l\nQGV4YW1wbGUuY29tMCowBQYDK2VwAyEAKdgAvlExrnPk8TYc9cNuk4fmruFOd88F\nYgg9M6SQKm6jUzBRMB0GA1UdDgQWBBS75Y11AoWgeHyumy6sNTJCozENuDAfBgNV\nHSMEGDAWgBS75Y11AoWgeHyumy6sNTJCozENuDAPBgNVHRMBAf8EBTADAQH/MAUG\nAytlcANBANLnIRgPfKYAzigLMsUOgEoZ80tMFimhsZpgsJ2pmmzjXoX5+Zaah+kj\nx3wF0MFr23e1kD/sOFatjV6h5sBZNQo=\n-----END CERTIFICATE-----\n`\n\ntype AuthorizationTestData struct {\n\talgorithm       string\n\tprivateKey      string\n\tpublicKey       string\n\tcertificate     string\n\tvalidEmpty      string\n\tvalid           string\n\tvalidForCert    string\n\tvalidNamespaced string\n}\n\nvar AuthTestData = []AuthorizationTestData{\n\t{\n\t\talgorithm:       \"HS256\",\n\t\tprivateKey:      \"!ChangeMe!\",\n\t\tpublicKey:       \"!ChangeMe!\",\n\t\tcertificate:     \"\",\n\t\tvalidEmpty:      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30._esyynAyo2Z6PyGe0mM_SuQ3c-C7sMQJ1YxVLvlj80A\",\n\t\tvalid:           \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXJjdXJlIjp7InB1Ymxpc2giOlsiZm9vIiwiYmFyIl0sInN1YnNjcmliZSI6WyJmb28iLCJiYXoiXX19.e7USPnr2YHHqLYSu9-jEVsynuTXGtAQUDAZuzoR8lxQ\",\n\t\tvalidForCert:    \"\",\n\t\tvalidNamespaced: \"\",\n\t},\n\t{\n\t\talgorithm:       \"RS256\",\n\t\tprivateKey:      privateKeyRsa,\n\t\tpublicKey:       publicKeyRsa,\n\t\tcertificate:     certificateRsa,\n\t\tvalidEmpty:      \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.e30.YbkSeO9GIBYedph1uSQz0Y6zp1NwDEB8O7ek3cc3Vw4Fjh6DwrJAwmXoNSqT6FhHDv14QG70qPIuyzsR0Q9nHFo7hGEqE8E85F8z3Pj5eBjHKBMJFno7jww514Vyp35c490ZHD6_d3F9PmxWrPkKezc1mcwlCegwiMJIS2CeR7k\",\n\t\tvalid:           \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXJjdXJlIjp7InB1Ymxpc2giOlsiZm9vIiwiYmFyIl0sInN1YnNjcmliZSI6WyJmb28iLCJiYXoiXX19.B-ZBdmCbtDaP27wB_DvF9xIetQm88M2Q1d-LP2DZoEHrz6lYDuHkgXzSDnFdbLCZ653e0r_VOaKxe2Pc6R4F0ok2vksC6P5gHhqIUcQuTSlzNFyTrg4tyy4mMkcm1h85te9gkV4LR6TABfZpFPqqIS4t7fpCMxvtAkyf_RR5Fq4\",\n\t\tvalidForCert:    \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkxIbzlPMmNNUzBqbzRsQWwtRk11ayJ9.eyJodHRwczovL21lcmN1cmUucm9ja3MvIjp7InB1Ymxpc2giOlsiZm9vIiwiYmFyIl0sInN1YnNjcmliZSI6WyJmb28iLCJiYXoiXX0sImlzcyI6Imh0dHBzOi8vbWVyY3VyZS10ZXN0LmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1ZmRjM2U4OGUzYjA0YjAwNzZhNTQxM2MiLCJhdWQiOlsiaHR0cHM6Ly9tZXJjdXJlLnJvY2tzL2FwaSIsImh0dHBzOi8vbWVyY3VyZS10ZXN0LmV1LmF1dGgwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE2MDgyNzAxMTQsImF6cCI6IjMwMWh6bUJBMnZ5ZzdnSlZiSEVMUlRDell0dUJrVU52Iiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCJ9.QAZKFSYpDJ39Cln-khjyjVzKJkiSCO4o9qIzw395fuP09rPfoLYcbdEoWg_pHN6GqO6oDNr9I2RR7p0FGhZAamXVtZzSd2V8Fv-BM0TfUBeJbb0sCMaSA2Nv3izs2dk_0zoQjGFH_LSNExGkJjwKLBj059GT6o_abtr2iz_77A8\",\n\t\tvalidNamespaced: \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwczovL21lcmN1cmUucm9ja3MvIjp7InB1Ymxpc2giOlsiZm9vIiwiYmFyIl0sInN1YnNjcmliZSI6WyJmb28iLCJiYXoiXX19.SmTVZkxlNbzHlaF4MfA3Fp5d1W2COmHlYPgc6SodAJOQtHh1Uxz0jkhA611w0OSwCaA8C5gqUd-GgekgHVPCBkIzV0qPmmhhJpTtotkeCX3N7oBOJOi58xXouNCNt0vnUH6xACqiZJq_FhNG9ZqP5saa4xNd1E-F1E9Vo1mFji4\",\n\t},\n\t{\n\t\talgorithm:       \"ES256\",\n\t\tprivateKey:      privateKeyEcdsa,\n\t\tpublicKey:       publicKeyEcdsa,\n\t\tcertificate:     certificateEcdsa,\n\t\tvalidEmpty:      \"eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.e30.hINnU7MroT7vlOH_DHCesipKULonewy_jnc7pNBrqCD-C9I-FjFOK8dBwbb1zG9nppYvvMDt5filtIwvcVDZUw\",\n\t\tvalid:           \"eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXJjdXJlIjp7InB1Ymxpc2giOlsiZm9vIiwiYmFyIl0sInN1YnNjcmliZSI6WyJmb28iLCJiYXoiXX19.5iVzGj4lm-MxaqKGOcBUdu3nAajsH1H0nq2mTyOdc9dvEyRqkKWShK-cK6KC5rkKv7vWNt8gRjR4-aV5ckvRzA\",\n\t\tvalidForCert:    \"eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwczovL21lcmN1cmUucm9ja3MvIjp7InB1Ymxpc2giOlsiZm9vIiwiYmFyIl0sInN1YnNjcmliZSI6WyJmb28iLCJiYXoiXX0sImlzcyI6Imh0dHBzOi8vbWVyY3VyZS10ZXN0LmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1ZmRjM2U4OGUzYjA0YjAwNzZhNTQxM2MiLCJhdWQiOlsiaHR0cHM6Ly9tZXJjdXJlLnJvY2tzL2FwaSIsImh0dHBzOi8vbWVyY3VyZS10ZXN0LmV1LmF1dGgwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE2MDgyNzAxMTQsImF6cCI6IjMwMWh6bUJBMnZ5ZzdnSlZiSEVMUlRDell0dUJrVU52Iiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCJ9.iyOpr6Dxgs5yBKuUKJFvbTTaFRo65r55eEHQfWgGt0H0iRzCx5D3kheDe29Da1aRClRfunrpoxhpr8EqeO7Pxg\",\n\t\tvalidNamespaced: \"eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwczovL21lcmN1cmUucm9ja3MvIjp7InB1Ymxpc2giOlsiZm9vIiwiYmFyIl0sInN1YnNjcmliZSI6WyJmb28iLCJiYXoiXX19.MczmR4h4eS_cetXZ-cP8NwONOpYzDec-Wijl0u78n9GCnqYFmYbWczln250fFuYYqbnHAbtX_br84YxBdoQv3Q\",\n\t},\n\t{\n\t\talgorithm:   \"EdDSA\",\n\t\tprivateKey:  privateKeyEd25519,\n\t\tpublicKey:   publicKeyEd25519,\n\t\tcertificate: certificateEd25519,\n\t\tvalidEmpty:  \"eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.e30.p6y-JMVdkSrjtj1qChGi8Z5PQnAu8GiTJsq8_Txp7Yg_RATrJi6IgDlNaobyaxaHy_ypwS4G4RTmQ9mlPwFNDQ\",\n\t\tvalid:       \"eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJtZXJjdXJlIjp7InB1Ymxpc2giOlsiZm9vIiwiYmFyIl0sInN1YnNjcmliZSI6WyJmb28iLCJiYXoiXX19.A2EbfgruNGekfK-VTPDX_MsrYlJdvZcAF4K5i9aKy4US2Syo4tmn9yT7aYBBdRZNBkRDqhF1sF1u26pvMLlNAw\",\n\t\t// jwt.ParseEdPublicKeyFromPEM() doesn't support certificates yet\n\t\t// validForCert: \"eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJodHRwczovL21lcmN1cmUucm9ja3MvIjp7InB1Ymxpc2giOlsiZm9vIiwiYmFyIl0sInN1YnNjcmliZSI6WyJmb28iLCJiYXoiXX0sImlzcyI6Imh0dHBzOi8vbWVyY3VyZS10ZXN0LmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1ZmRjM2U4OGUzYjA0YjAwNzZhNTQxM2MiLCJhdWQiOlsiaHR0cHM6Ly9tZXJjdXJlLnJvY2tzL2FwaSIsImh0dHBzOi8vbWVyY3VyZS10ZXN0LmV1LmF1dGgwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE2MDgyNzAxMTQsImF6cCI6IjMwMWh6bUJBMnZ5ZzdnSlZiSEVMUlRDell0dUJrVU52Iiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCJ9.FBWmpbdYpuU58d3p-e_RPu-Szzj_ZPbZtwvHbUD6nQJOe83RTrsBbVpVnI54ISG6D4N5c2mLeksC_I7OAw1KCA\",\n\t\tvalidForCert:    \"\",\n\t\tvalidNamespaced: \"eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJodHRwczovL21lcmN1cmUucm9ja3MvIjp7InB1Ymxpc2giOlsiZm9vIiwiYmFyIl0sInN1YnNjcmliZSI6WyJmb28iLCJiYXoiXX19.yBpIkxTSACRxEpFSiDOVhpSNRbhvhJy2ds90MycP9mK7oxiyRVyvZkRHRwbH26haa7PhR-HRzw828mGids2xDA\",\n\t},\n}\n\nfunc TestAuthorizeMultipleAuthorizationHeader(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.Header.Add(\"Authorization\", testdata.validEmpty)\n\t\tr.Header.Add(\"Authorization\", testdata.validEmpty)\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte{}, testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.EqualError(t, err, `invalid \"Authorization\" HTTP header`, testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationHeaderTooShort(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.Header.Add(\"Authorization\", \"Bearer x\")\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte{}, testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.EqualError(t, err, `invalid \"Authorization\" HTTP header`, testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationHeaderNoBearer(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.Header.Add(\"Authorization\", \"Greater \"+testdata.validEmpty)\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte{}, testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.EqualError(t, err, `invalid \"Authorization\" HTTP header`, testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationHeaderInvalidAlg(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.Header.Add(\"Authorization\", bearerPrefix+createDummyNoneSignedJWT())\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte{}, testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.Error(t, err, testdata.algorithm)\n\t\trequire.Regexp(t, \"^unable to parse JWT: token is unverifiable: \", err.Error(), testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationHeaderInvalidKey(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.Header.Add(\"Authorization\", bearerPrefix+testdata.validEmpty)\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte{}, testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.Error(t, err, testdata.algorithm)\n\t\trequire.Regexp(t, \"^unable to parse JWT: \", err.Error(), testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationHeaderInvalidSignature(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.Header.Add(\"Authorization\", bearerPrefix+testdata.validEmpty[:len(testdata.validEmpty)-8]+\"12345678\")\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.Error(t, err, testdata.algorithm)\n\t\trequire.Regexp(t, \"^unable to parse JWT: token signature is invalid: \", err.Error(), testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationHeaderNoContent(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.Header.Add(\"Authorization\", bearerPrefix+testdata.validEmpty)\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.NoError(t, err, testdata.algorithm)\n\t\trequire.Nil(t, claims.Mercure.Publish, testdata.algorithm)\n\t\trequire.Nil(t, claims.Mercure.Subscribe, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationHeader(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.Header.Add(\"Authorization\", bearerPrefix+testdata.valid)\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.NoError(t, err, testdata.algorithm)\n\t\tassert.Equal(t, []string{\"foo\", \"bar\"}, claims.Mercure.Publish)\n\t\tassert.Equal(t, []string{\"foo\", \"baz\"}, claims.Mercure.Subscribe)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationHeaderWithCert(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tif testdata.validForCert != \"\" {\n\t\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\t\tr.Header.Add(\"Authorization\", bearerPrefix+testdata.validForCert)\n\n\t\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.certificate), testdata.algorithm)\n\n\t\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\t\trequire.NoError(t, err, testdata.algorithm)\n\t\t\tassert.Equal(t, []string{\"foo\", \"bar\"}, claims.Mercure.Publish)\n\t\t\tassert.Equal(t, []string{\"foo\", \"baz\"}, claims.Mercure.Subscribe)\n\t\t}\n\t}\n}\n\nfunc TestAuthorizeAuthorizationHeaderNamespaced(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tif testdata.validNamespaced != \"\" {\n\t\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\t\tr.Header.Add(\"Authorization\", bearerPrefix+testdata.validNamespaced)\n\n\t\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\t\trequire.NoError(t, err, testdata.algorithm)\n\t\t\tassert.Equal(t, []string{\"foo\", \"bar\"}, claims.Mercure.Publish)\n\t\t\tassert.Equal(t, []string{\"foo\", \"baz\"}, claims.Mercure.Subscribe)\n\t\t}\n\t}\n}\n\nfunc TestAuthorizeAuthorizationHeaderWrongAlgorithm(t *testing.T) {\n\tfor idx, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.Header.Add(\"Authorization\", bearerPrefix+testdata.valid)\n\n\t\tnextIdx := (idx + 1) % len(AuthTestData)\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(AuthTestData[nextIdx].publicKey), AuthTestData[nextIdx].algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.Error(t, err, testdata.algorithm)\n\t\trequire.Regexp(t, \"^unable to parse JWT: token is unverifiable: error while executing keyfunc: (.*): unexpected signing method$\", err.Error())\n\t\tassert.Nil(t, claims)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationQueryTooShort(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tquery := r.URL.Query()\n\t\tquery.Set(\"authorization\", \"x\")\n\t\tr.URL.RawQuery = query.Encode()\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte{}, testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.EqualError(t, err, `invalid \"authorization\" Query parameter`, testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationQueryInvalidAlg(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tquery := r.URL.Query()\n\t\tquery.Set(\"authorization\", createDummyNoneSignedJWT())\n\t\tr.URL.RawQuery = query.Encode()\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte{}, testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.Error(t, err, testdata.algorithm)\n\t\trequire.Regexp(t, \"^unable to parse JWT: token is unverifiable: \", err.Error(), testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationQueryInvalidKey(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tquery := r.URL.Query()\n\t\tquery.Set(\"authorization\", testdata.validEmpty)\n\t\tr.URL.RawQuery = query.Encode()\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte{}, testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.Error(t, err, testdata.algorithm)\n\t\trequire.Regexp(t, \"^unable to parse JWT: \", err.Error(), testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationQueryInvalidSignature(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tquery := r.URL.Query()\n\t\tquery.Set(\"authorization\", testdata.validEmpty[:len(testdata.validEmpty)-8]+\"12345678\")\n\t\tr.URL.RawQuery = query.Encode()\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.Error(t, err, testdata.algorithm)\n\t\trequire.Regexp(t, \"^unable to parse JWT: token signature is invalid: \", err.Error(), testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationQueryNoContent(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tquery := r.URL.Query()\n\t\tquery.Set(\"authorization\", testdata.validEmpty)\n\t\tr.URL.RawQuery = query.Encode()\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.NoError(t, err, testdata.algorithm)\n\t\trequire.Nil(t, claims.Mercure.Publish, testdata.algorithm)\n\t\trequire.Nil(t, claims.Mercure.Subscribe, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationQuery(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tquery := r.URL.Query()\n\t\tquery.Set(\"authorization\", testdata.valid)\n\t\tr.URL.RawQuery = query.Encode()\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.NoError(t, err, testdata.algorithm)\n\t\tassert.Equal(t, []string{\"foo\", \"bar\"}, claims.Mercure.Publish)\n\t\tassert.Equal(t, []string{\"foo\", \"baz\"}, claims.Mercure.Subscribe)\n\t}\n}\n\nfunc TestAuthorizeAuthorizationQueryNamespaced(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tif testdata.validNamespaced != \"\" {\n\t\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\t\tquery := r.URL.Query()\n\t\t\tquery.Set(\"authorization\", testdata.validNamespaced)\n\t\t\tr.URL.RawQuery = query.Encode()\n\n\t\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\t\trequire.NoError(t, err, testdata.algorithm)\n\t\t\tassert.Equal(t, []string{\"foo\", \"bar\"}, claims.Mercure.Publish)\n\t\t\tassert.Equal(t, []string{\"foo\", \"baz\"}, claims.Mercure.Subscribe)\n\t\t}\n\t}\n}\n\nfunc TestAuthorizeAuthorizationQueryRsaWithCert(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tif testdata.validForCert != \"\" {\n\t\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\t\tquery := r.URL.Query()\n\t\t\tquery.Set(\"authorization\", testdata.validForCert)\n\t\t\tr.URL.RawQuery = query.Encode()\n\n\t\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.certificate), testdata.algorithm)\n\n\t\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\t\trequire.NoError(t, err, testdata.algorithm)\n\t\t\tassert.Equal(t, []string{\"foo\", \"bar\"}, claims.Mercure.Publish)\n\t\t\tassert.Equal(t, []string{\"foo\", \"baz\"}, claims.Mercure.Subscribe)\n\t\t}\n\t}\n}\n\nfunc TestAuthorizeAuthorizationQueryWrongAlgorithm(t *testing.T) {\n\tfor idx, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tquery := r.URL.Query()\n\t\tquery.Set(\"authorization\", testdata.valid)\n\t\tr.URL.RawQuery = query.Encode()\n\n\t\tnextIdx := (idx + 1) % len(AuthTestData)\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(AuthTestData[nextIdx].publicKey), AuthTestData[nextIdx].algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.Error(t, err, testdata.algorithm)\n\t\trequire.Regexp(t, \"^unable to parse JWT: token is unverifiable: error while executing keyfunc: (.*): unexpected signing method$\", err.Error(), testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeCookieInvalidAlg(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: createDummyNoneSignedJWT()})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.EqualError(t, err, \"unable to parse JWT: token is unverifiable: error while executing keyfunc: *jwt.signingMethodNone: unexpected signing method\", testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeCookieInvalidKey(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: testdata.validEmpty})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte{}, testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.Error(t, err, testdata.algorithm)\n\t\trequire.Regexp(t, \"^unable to parse JWT: \", err.Error(), testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeCookieInvalidSignature(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: testdata.validEmpty[:len(testdata.validEmpty)-8] + \"12345678\"})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.Error(t, err, testdata.algorithm)\n\t\trequire.Regexp(t, \"^unable to parse JWT: token signature is invalid: \", err.Error(), testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeCookieNoContent(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: testdata.validEmpty})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.NoError(t, err, testdata.algorithm)\n\t\trequire.Nil(t, claims.Mercure.Publish, testdata.algorithm)\n\t\trequire.Nil(t, claims.Mercure.Subscribe, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeCookie(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodGet, defaultHubURL, nil)\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: testdata.valid})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.NoError(t, err, testdata.algorithm)\n\t\tassert.Equal(t, []string{\"foo\", \"bar\"}, claims.Mercure.Publish)\n\t\tassert.Equal(t, []string{\"foo\", \"baz\"}, claims.Mercure.Subscribe)\n\t}\n}\n\nfunc TestAuthorizeCookieNoOriginNoReferer(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodPost, defaultHubURL, nil)\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: testdata.valid})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{}, defaultCookieName)\n\t\trequire.EqualError(t, err, `an \"Origin\" or a \"Referer\" HTTP header must be present to use the cookie-based authorization mechanism`, testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeCookieOriginNotAllowed(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodPost, defaultHubURL, nil)\n\t\tr.Header.Add(\"Origin\", \"http://example.com\")\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: testdata.valid})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{\"http://example.net\"}, defaultCookieName)\n\t\trequire.EqualError(t, err, `\"http://example.com\": origin not allowed to post updates`, testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeCookieRefererNotAllowed(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodPost, defaultHubURL, nil)\n\t\tr.Header.Add(\"Referer\", \"http://example.com/foo/bar\")\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: testdata.valid})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{\"http://example.net\"}, defaultCookieName)\n\t\trequire.EqualError(t, err, `\"http://example.com\": origin not allowed to post updates`, testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeCookieInvalidReferer(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodPost, defaultHubURL, nil)\n\t\tr.Header.Add(\"Referer\", \"http://192.168.0.%31/\")\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: testdata.valid})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{\"http://example.net\"}, defaultCookieName)\n\t\trequire.EqualError(t, err, `unable to parse referer: parse \"http://192.168.0.%31/\": invalid URL escape \"%31\"`, testdata.algorithm)\n\t\trequire.Nil(t, claims, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeCookieOriginHasPriority(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodPost, defaultHubURL, nil)\n\t\tr.Header.Add(\"Origin\", \"http://example.net\")\n\t\tr.Header.Add(\"Referer\", \"http://example.com\")\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: testdata.valid})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\tclaims, err := authorize(r, keyfunc, []string{\"http://example.net\"}, defaultCookieName)\n\t\trequire.NoError(t, err, testdata.algorithm)\n\t\tassert.Equal(t, []string{\"foo\", \"bar\"}, claims.Mercure.Publish)\n\t\tassert.Equal(t, []string{\"foo\", \"baz\"}, claims.Mercure.Subscribe)\n\t}\n}\n\nfunc TestAuthorizeAllOriginsAllowed(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodPost, defaultHubURL, nil)\n\t\tr.Header.Add(\"Origin\", \"http://example.com\")\n\t\tr.AddCookie(&http.Cookie{Name: defaultCookieName, Value: testdata.valid})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\t_, err := authorize(r, keyfunc, []string{\"*\"}, defaultCookieName)\n\t\trequire.NoError(t, err, testdata.algorithm)\n\t}\n}\n\nfunc TestAuthorizeCustomCookieName(t *testing.T) {\n\tfor _, testdata := range AuthTestData {\n\t\tr, _ := http.NewRequest(http.MethodPost, defaultHubURL, nil)\n\t\tr.Header.Add(\"Origin\", \"http://example.com\")\n\t\tr.AddCookie(&http.Cookie{Name: \"foo\", Value: testdata.valid})\n\n\t\tkeyfunc, _ := createJWTKeyfunc([]byte(testdata.publicKey), testdata.algorithm)\n\n\t\t_, err := authorize(r, keyfunc, []string{\"*\"}, \"foo\")\n\t\trequire.NoError(t, err, testdata.algorithm)\n\t}\n}\n\nfunc TestCanReceive(t *testing.T) {\n\ttss := &TopicSelectorStore{}\n\tassert.True(t, canReceive(tss, []string{\"foo\", \"bar\"}, []string{\"foo\", \"bar\"}))\n\tassert.True(t, canReceive(tss, []string{\"foo\", \"bar\"}, []string{\"bar\"}))\n\tassert.True(t, canReceive(tss, []string{\"foo\", \"bar\"}, []string{\"*\"}))\n\tassert.False(t, canReceive(tss, []string{\"foo\", \"bar\"}, []string{}))\n\tassert.False(t, canReceive(tss, []string{\"foo\", \"bar\"}, []string{\"baz\"}))\n\tassert.False(t, canReceive(tss, []string{\"foo\", \"bar\"}, []string{\"baz\", \"bat\"}))\n}\n\nfunc TestCanDispatch(t *testing.T) {\n\ttss := &TopicSelectorStore{}\n\tassert.True(t, canDispatch(tss, []string{\"foo\", \"bar\"}, []string{\"foo\", \"bar\"}))\n\tassert.True(t, canDispatch(tss, []string{\"foo\", \"bar\"}, []string{\"*\"}))\n\tassert.False(t, canDispatch(tss, []string{\"foo\", \"bar\"}, []string{}))\n\tassert.False(t, canDispatch(tss, []string{\"foo\", \"bar\"}, []string{\"foo\"}))\n\tassert.False(t, canDispatch(tss, []string{\"foo\", \"bar\"}, []string{\"baz\"}))\n\tassert.False(t, canDispatch(tss, []string{\"foo\", \"bar\"}, []string{\"baz\", \"bat\"}))\n}\n"
        },
        {
          "name": "bolt.go",
          "type": "blob",
          "size": 8.2763671875,
          "content": "package mercure\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n\n\tbolt \"go.etcd.io/bbolt\"\n\t\"go.uber.org/zap\"\n)\n\nconst BoltDefaultCleanupFrequency = 0.3\n\nfunc init() { //nolint:gochecknoinits\n\tRegisterTransportFactory(\"bolt\", DeprecatedNewBoltTransport)\n}\n\nconst defaultBoltBucketName = \"updates\"\n\n// BoltTransport implements the TransportInterface using the Bolt database.\ntype BoltTransport struct {\n\tsync.RWMutex\n\tsubscribers      *SubscriberList\n\tlogger           Logger\n\tdb               *bolt.DB\n\tbucketName       string\n\tsize             uint64\n\tcleanupFrequency float64\n\tclosed           chan struct{}\n\tclosedOnce       sync.Once\n\tlastSeq          uint64\n\tlastEventID      string\n}\n\n// DeprecatedNewBoltTransport creates a new BoltTransport.\n//\n// Deprecated: use NewBoltTransport() instead.\nfunc DeprecatedNewBoltTransport(u *url.URL, l Logger) (Transport, error) { //nolint:ireturn\n\tvar err error\n\tq := u.Query()\n\tbucketName := defaultBoltBucketName\n\tif q.Get(\"bucket_name\") != \"\" {\n\t\tbucketName = q.Get(\"bucket_name\")\n\t}\n\n\tsize := uint64(0)\n\tif sizeParameter := q.Get(\"size\"); sizeParameter != \"\" {\n\t\tsize, err = strconv.ParseUint(sizeParameter, 10, 64)\n\t\tif err != nil {\n\t\t\treturn nil, &TransportError{u.Redacted(), fmt.Sprintf(`invalid \"size\" parameter %q`, sizeParameter), err}\n\t\t}\n\t}\n\n\tcleanupFrequency := BoltDefaultCleanupFrequency\n\tcleanupFrequencyParameter := q.Get(\"cleanup_frequency\")\n\tif cleanupFrequencyParameter != \"\" {\n\t\tcleanupFrequency, err = strconv.ParseFloat(cleanupFrequencyParameter, 64)\n\t\tif err != nil {\n\t\t\treturn nil, &TransportError{u.Redacted(), fmt.Sprintf(`invalid \"cleanup_frequency\" parameter %q`, cleanupFrequencyParameter), err}\n\t\t}\n\t}\n\n\tpath := u.Path // absolute path (bolt:///path.db)\n\tif path == \"\" {\n\t\tpath = u.Host // relative path (bolt://path.db)\n\t}\n\tif path == \"\" {\n\t\treturn nil, &TransportError{u.Redacted(), \"missing path\", err}\n\t}\n\n\treturn NewBoltTransport(l, path, bucketName, size, cleanupFrequency)\n}\n\n// NewBoltTransport creates a new BoltTransport.\nfunc NewBoltTransport(\n\tlogger Logger,\n\tpath string,\n\tbucketName string,\n\tsize uint64,\n\tcleanupFrequency float64,\n) (*BoltTransport, error) {\n\tif path == \"\" {\n\t\tpath = \"bolt.db\"\n\t}\n\n\tif bucketName == \"\" {\n\t\tbucketName = defaultBoltBucketName\n\t}\n\n\tdb, err := bolt.Open(path, 0o600, &bolt.Options{Timeout: 1 * time.Second})\n\tif err != nil {\n\t\treturn nil, &TransportError{err: err}\n\t}\n\n\tlastEventID, err := getDBLastEventID(db, bucketName)\n\tif err != nil {\n\t\treturn nil, &TransportError{err: err}\n\t}\n\n\treturn &BoltTransport{\n\t\tlogger:           logger,\n\t\tdb:               db,\n\t\tbucketName:       bucketName,\n\t\tsize:             size,\n\t\tcleanupFrequency: cleanupFrequency,\n\n\t\tsubscribers: NewSubscriberList(1e5),\n\t\tclosed:      make(chan struct{}),\n\t\tlastEventID: lastEventID,\n\t}, nil\n}\n\nfunc getDBLastEventID(db *bolt.DB, bucketName string) (string, error) {\n\tlastEventID := EarliestLastEventID\n\terr := db.View(func(tx *bolt.Tx) error {\n\t\tb := tx.Bucket([]byte(bucketName))\n\t\tif b == nil {\n\t\t\treturn nil // No data\n\t\t}\n\n\t\tif k, _ := b.Cursor().Last(); k != nil {\n\t\t\tlastEventID = string(k[8:])\n\t\t}\n\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to get lastEventID from BoltDB: %w\", err)\n\t}\n\n\treturn lastEventID, nil\n}\n\n// Dispatch dispatches an update to all subscribers and persists it in Bolt DB.\nfunc (t *BoltTransport) Dispatch(update *Update) error {\n\tselect {\n\tcase <-t.closed:\n\t\treturn ErrClosedTransport\n\tdefault:\n\t}\n\n\tAssignUUID(update)\n\tupdateJSON, err := json.Marshal(*update)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error when marshaling update: %w\", err)\n\t}\n\n\t// We cannot use RLock() because Bolt allows only one read-write transaction at a time\n\tt.Lock()\n\tdefer t.Unlock()\n\n\tif err := t.persist(update.ID, updateJSON); err != nil {\n\t\treturn err\n\t}\n\n\tfor _, s := range t.subscribers.MatchAny(update) {\n\t\ts.Dispatch(update, false)\n\t}\n\n\treturn nil\n}\n\n// persist stores update in the database.\nfunc (t *BoltTransport) persist(updateID string, updateJSON []byte) error {\n\tif err := t.db.Update(func(tx *bolt.Tx) error {\n\t\tbucket, err := tx.CreateBucketIfNotExists([]byte(t.bucketName))\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error when creating Bolt DB bucket: %w\", err)\n\t\t}\n\n\t\tseq, err := bucket.NextSequence()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error when generating Bolt DB sequence: %w\", err)\n\t\t}\n\t\tprefix := make([]byte, 8)\n\t\tbinary.BigEndian.PutUint64(prefix, seq)\n\n\t\t// The sequence value is prepended to the update id to create an ordered list\n\t\tkey := bytes.Join([][]byte{prefix, []byte(updateID)}, []byte{})\n\n\t\t// The DB is append-only\n\t\tbucket.FillPercent = 1\n\n\t\tt.lastSeq = seq\n\t\tt.lastEventID = updateID\n\t\tif err := bucket.Put(key, updateJSON); err != nil {\n\t\t\treturn fmt.Errorf(\"unable to put value in Bolt DB: %w\", err)\n\t\t}\n\n\t\treturn t.cleanup(bucket, seq)\n\t}); err != nil {\n\t\treturn fmt.Errorf(\"bolt error: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// AddSubscriber adds a new subscriber to the transport.\nfunc (t *BoltTransport) AddSubscriber(s *LocalSubscriber) error {\n\tselect {\n\tcase <-t.closed:\n\t\treturn ErrClosedTransport\n\tdefault:\n\t}\n\n\tt.Lock()\n\tt.subscribers.Add(s)\n\ttoSeq := t.lastSeq //nolint:ifshort\n\tt.Unlock()\n\n\tif s.RequestLastEventID != \"\" {\n\t\tif err := t.dispatchHistory(s, toSeq); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\ts.Ready()\n\n\treturn nil\n}\n\n// RemoveSubscriber removes a new subscriber from the transport.\nfunc (t *BoltTransport) RemoveSubscriber(s *LocalSubscriber) error {\n\tselect {\n\tcase <-t.closed:\n\t\treturn ErrClosedTransport\n\tdefault:\n\t}\n\n\tt.Lock()\n\tdefer t.Unlock()\n\tt.subscribers.Remove(s)\n\n\treturn nil\n}\n\n// GetSubscribers get the list of active subscribers.\nfunc (t *BoltTransport) GetSubscribers() (string, []*Subscriber, error) {\n\tt.RLock()\n\tdefer t.RUnlock()\n\n\treturn t.lastEventID, getSubscribers(t.subscribers), nil\n}\n\n//nolint:gocognit\nfunc (t *BoltTransport) dispatchHistory(s *LocalSubscriber, toSeq uint64) error {\n\terr := t.db.View(func(tx *bolt.Tx) error {\n\t\tb := tx.Bucket([]byte(t.bucketName))\n\t\tif b == nil {\n\t\t\ts.HistoryDispatched(EarliestLastEventID)\n\n\t\t\treturn nil // No data\n\t\t}\n\n\t\tc := b.Cursor()\n\t\tresponseLastEventID := EarliestLastEventID\n\t\tafterFromID := s.RequestLastEventID == EarliestLastEventID\n\t\tfor k, v := c.First(); k != nil; k, v = c.Next() {\n\t\t\tif !afterFromID {\n\t\t\t\tresponseLastEventID = string(k[8:])\n\t\t\t\tif responseLastEventID == s.RequestLastEventID {\n\t\t\t\t\tafterFromID = true\n\t\t\t\t}\n\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tvar update *Update\n\t\t\tif err := json.Unmarshal(v, &update); err != nil {\n\t\t\t\ts.HistoryDispatched(responseLastEventID)\n\t\t\t\tif c := t.logger.Check(zap.ErrorLevel, \"Unable to unmarshal update coming from the Bolt DB\"); c != nil {\n\t\t\t\t\tc.Write(zap.Error(err))\n\t\t\t\t}\n\n\t\t\t\treturn fmt.Errorf(\"unable to unmarshal update: %w\", err)\n\t\t\t}\n\n\t\t\tif (s.Match(update) && !s.Dispatch(update, true)) || (toSeq > 0 && binary.BigEndian.Uint64(k[:8]) >= toSeq) {\n\t\t\t\ts.HistoryDispatched(responseLastEventID)\n\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\ts.HistoryDispatched(responseLastEventID)\n\t\tif !afterFromID {\n\t\t\tif c := t.logger.Check(zap.InfoLevel, \"Can't find requested LastEventID\"); c != nil {\n\t\t\t\tc.Write(zap.String(\"LastEventID\", s.RequestLastEventID))\n\t\t\t}\n\t\t}\n\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to retrieve history from BoltDB: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// Close closes the Transport.\nfunc (t *BoltTransport) Close() (err error) {\n\tt.closedOnce.Do(func() {\n\t\tclose(t.closed)\n\n\t\tt.Lock()\n\t\tdefer t.Unlock()\n\n\t\tt.subscribers.Walk(0, func(s *LocalSubscriber) bool {\n\t\t\ts.Disconnect()\n\n\t\t\treturn true\n\t\t})\n\t\terr = t.db.Close()\n\t})\n\n\tif err == nil {\n\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"unable to close Bolt DB: %w\", err)\n}\n\n// cleanup removes entries in the history above the size limit, triggered probabilistically.\nfunc (t *BoltTransport) cleanup(bucket *bolt.Bucket, lastID uint64) error {\n\tif t.size == 0 ||\n\t\tt.cleanupFrequency == 0 ||\n\t\tt.size >= lastID ||\n\t\t(t.cleanupFrequency != 1 && rand.Float64() < t.cleanupFrequency) { //nolint:gosec\n\t\treturn nil\n\t}\n\n\tremoveUntil := lastID - t.size\n\tc := bucket.Cursor()\n\tfor k, _ := c.First(); k != nil; k, _ = c.Next() {\n\t\tif binary.BigEndian.Uint64(k[:8]) > removeUntil {\n\t\t\tbreak\n\t\t}\n\n\t\tif err := bucket.Delete(k); err != nil {\n\t\t\treturn fmt.Errorf(\"unable to delete value in Bolt DB: %w\", err)\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// Interface guards.\nvar (\n\t_ Transport            = (*BoltTransport)(nil)\n\t_ TransportSubscribers = (*BoltTransport)(nil)\n)\n"
        },
        {
          "name": "bolt_test.go",
          "type": "blob",
          "size": 10.125,
          "content": "package mercure\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"net/url\"\n\t\"os\"\n\t\"strconv\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\tbolt \"go.etcd.io/bbolt\"\n\t\"go.uber.org/zap\"\n)\n\nfunc createBoltTransport(dsn string) *BoltTransport {\n\tu, _ := url.Parse(dsn)\n\ttransport, _ := DeprecatedNewBoltTransport(u, zap.NewNop())\n\n\treturn transport.(*BoltTransport)\n}\n\nfunc TestBoltTransportHistory(t *testing.T) {\n\ttransport := createBoltTransport(\"bolt://test.db\")\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\ttopics := []string{\"https://example.com/foo\"}\n\tfor i := 1; i <= 10; i++ {\n\t\ttransport.Dispatch(&Update{\n\t\t\tEvent:  Event{ID: strconv.Itoa(i)},\n\t\t\tTopics: topics,\n\t\t})\n\t}\n\n\ts := NewLocalSubscriber(\"8\", transport.logger, &TopicSelectorStore{})\n\ts.SetTopics(topics, nil)\n\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\tvar count int\n\tfor {\n\t\tu := <-s.Receive()\n\t\t// the reading loop must read the #9 and #10 messages\n\t\tassert.Equal(t, strconv.Itoa(9+count), u.ID)\n\t\tcount++\n\t\tif count == 2 {\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc TestBoltTransportLogsBogusLastEventID(t *testing.T) {\n\tsink, logger := newTestLogger(t)\n\tdefer sink.Reset()\n\n\tu, _ := url.Parse(\"bolt://test.db\")\n\ttransport, _ := DeprecatedNewBoltTransport(u, logger)\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\t// make sure the db is not empty\n\ttopics := []string{\"https://example.com/foo\"}\n\ttransport.Dispatch(&Update{\n\t\tEvent:  Event{ID: \"1\"},\n\t\tTopics: topics,\n\t})\n\n\ts := NewLocalSubscriber(\"711131\", logger, &TopicSelectorStore{})\n\ts.SetTopics(topics, nil)\n\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\tlog := sink.String()\n\tassert.Contains(t, log, `\"LastEventID\":\"711131\"`)\n}\n\nfunc TestBoltTopicSelectorHistory(t *testing.T) {\n\ttransport := createBoltTransport(\"bolt://test.db\")\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\ttransport.Dispatch(&Update{Topics: []string{\"http://example.com/subscribed\"}, Event: Event{ID: \"1\"}})\n\ttransport.Dispatch(&Update{Topics: []string{\"http://example.com/not-subscribed\"}, Event: Event{ID: \"2\"}})\n\ttransport.Dispatch(&Update{Topics: []string{\"http://example.com/subscribed-public-only\"}, Private: true, Event: Event{ID: \"3\"}})\n\ttransport.Dispatch(&Update{Topics: []string{\"http://example.com/subscribed-public-only\"}, Event: Event{ID: \"4\"}})\n\n\ts := NewLocalSubscriber(EarliestLastEventID, transport.logger, &TopicSelectorStore{})\n\ts.SetTopics([]string{\"http://example.com/subscribed\", \"http://example.com/subscribed-public-only\"}, []string{\"http://example.com/subscribed\"})\n\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\tassert.Equal(t, \"1\", (<-s.Receive()).ID)\n\tassert.Equal(t, \"4\", (<-s.Receive()).ID)\n}\n\nfunc TestBoltTransportRetrieveAllHistory(t *testing.T) {\n\ttransport := createBoltTransport(\"bolt://test.db\")\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\ttopics := []string{\"https://example.com/foo\"}\n\tfor i := 1; i <= 10; i++ {\n\t\ttransport.Dispatch(&Update{\n\t\t\tEvent:  Event{ID: strconv.Itoa(i)},\n\t\t\tTopics: topics,\n\t\t})\n\t}\n\n\ts := NewLocalSubscriber(EarliestLastEventID, transport.logger, &TopicSelectorStore{})\n\ts.SetTopics(topics, nil)\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\tvar count int\n\tfor {\n\t\tu := <-s.Receive()\n\t\t// the reading loop must read all messages\n\t\tcount++\n\t\tassert.Equal(t, strconv.Itoa(count), u.ID)\n\t\tif count == 10 {\n\t\t\tbreak\n\t\t}\n\t}\n\tassert.Equal(t, 10, count)\n}\n\nfunc TestBoltTransportHistoryAndLive(t *testing.T) {\n\ttransport := createBoltTransport(\"bolt://test.db\")\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\ttopics := []string{\"https://example.com/foo\"}\n\tfor i := 1; i <= 10; i++ {\n\t\ttransport.Dispatch(&Update{\n\t\t\tTopics: topics,\n\t\t\tEvent:  Event{ID: strconv.Itoa(i)},\n\t\t})\n\t}\n\n\ts := NewLocalSubscriber(\"8\", transport.logger, &TopicSelectorStore{})\n\ts.SetTopics(topics, nil)\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar count int\n\t\tfor {\n\t\t\tu := <-s.Receive()\n\n\t\t\t// the reading loop must read the #9, #10 and #11 messages\n\t\t\tassert.Equal(t, strconv.Itoa(9+count), u.ID)\n\t\t\tcount++\n\t\t\tif count == 3 {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\ttransport.Dispatch(&Update{\n\t\tEvent:  Event{ID: \"11\"},\n\t\tTopics: topics,\n\t})\n\n\twg.Wait()\n}\n\nfunc TestBoltTransportPurgeHistory(t *testing.T) {\n\ttransport := createBoltTransport(\"bolt://test.db?size=5&cleanup_frequency=1\")\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\tfor i := 0; i < 12; i++ {\n\t\ttransport.Dispatch(&Update{\n\t\t\tEvent:  Event{ID: strconv.Itoa(i)},\n\t\t\tTopics: []string{\"https://example.com/foo\"},\n\t\t})\n\t}\n\n\ttransport.db.View(func(tx *bolt.Tx) error {\n\t\tb := tx.Bucket([]byte(\"updates\"))\n\n\t\tassert.Equal(t, 5, b.Stats().KeyN)\n\n\t\treturn nil\n\t})\n}\n\nfunc TestNewBoltTransport(t *testing.T) {\n\tu, _ := url.Parse(\"bolt://test.db?bucket_name=demo\")\n\ttransport, err := DeprecatedNewBoltTransport(u, zap.NewNop())\n\trequire.NoError(t, err)\n\trequire.NotNil(t, transport)\n\ttransport.Close()\n\n\tu, _ = url.Parse(\"bolt://\")\n\t_, err = DeprecatedNewBoltTransport(u, zap.NewNop())\n\trequire.EqualError(t, err, `\"bolt:\": invalid transport: missing path`)\n\n\tu, _ = url.Parse(\"bolt:///test.db\")\n\t_, err = DeprecatedNewBoltTransport(u, zap.NewNop())\n\n\t// The exact error message depends on the OS\n\tassert.Contains(t, err.Error(), \"open /test.db:\")\n\n\tu, _ = url.Parse(\"bolt://test.db?cleanup_frequency=invalid\")\n\t_, err = DeprecatedNewBoltTransport(u, zap.NewNop())\n\trequire.EqualError(t, err, `\"bolt://test.db?cleanup_frequency=invalid\": invalid \"cleanup_frequency\" parameter \"invalid\": invalid transport: strconv.ParseFloat: parsing \"invalid\": invalid syntax`)\n\n\tu, _ = url.Parse(\"bolt://test.db?size=invalid\")\n\t_, err = DeprecatedNewBoltTransport(u, zap.NewNop())\n\trequire.EqualError(t, err, `\"bolt://test.db?size=invalid\": invalid \"size\" parameter \"invalid\": invalid transport: strconv.ParseUint: parsing \"invalid\": invalid syntax`)\n}\n\nfunc TestBoltTransportDoNotDispatchUntilListen(t *testing.T) {\n\ttransport := createBoltTransport(\"bolt://test.db\")\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\tassert.Implements(t, (*Transport)(nil), transport)\n\n\ts := NewLocalSubscriber(\"\", transport.logger, &TopicSelectorStore{})\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tfor range s.Receive() {\n\t\t\tt.Fail()\n\t\t}\n\n\t\twg.Done()\n\t}()\n\n\ts.Disconnect()\n\n\twg.Wait()\n}\n\nfunc TestBoltTransportDispatch(t *testing.T) {\n\ttransport := createBoltTransport(\"bolt://test.db\")\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\tassert.Implements(t, (*Transport)(nil), transport)\n\n\ts := NewLocalSubscriber(\"\", transport.logger, &TopicSelectorStore{})\n\ts.SetTopics([]string{\"https://example.com/foo\", \"https://example.com/private\"}, []string{\"https://example.com/private\"})\n\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\tnotSubscribed := &Update{Topics: []string{\"not-subscribed\"}}\n\trequire.NoError(t, transport.Dispatch(notSubscribed))\n\n\tsubscribedNotAuthorized := &Update{Topics: []string{\"https://example.com/foo\"}, Private: true}\n\trequire.NoError(t, transport.Dispatch(subscribedNotAuthorized))\n\n\tpublic := &Update{Topics: s.SubscribedTopics}\n\trequire.NoError(t, transport.Dispatch(public))\n\n\tassert.Equal(t, public, <-s.Receive())\n\n\tprivate := &Update{Topics: s.AllowedPrivateTopics, Private: true}\n\trequire.NoError(t, transport.Dispatch(private))\n\n\tassert.Equal(t, private, <-s.Receive())\n}\n\nfunc TestBoltTransportClosed(t *testing.T) {\n\ttransport := createBoltTransport(\"bolt://test.db\")\n\trequire.NotNil(t, transport)\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\tassert.Implements(t, (*Transport)(nil), transport)\n\n\ts := NewLocalSubscriber(\"\", transport.logger, &TopicSelectorStore{})\n\ts.SetTopics([]string{\"https://example.com/foo\"}, nil)\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\trequire.NoError(t, transport.Close())\n\trequire.Error(t, transport.AddSubscriber(s))\n\n\tassert.Equal(t, transport.Dispatch(&Update{Topics: s.SubscribedTopics}), ErrClosedTransport)\n\n\t_, ok := <-s.out\n\tassert.False(t, ok)\n}\n\nfunc TestBoltCleanDisconnectedSubscribers(t *testing.T) {\n\ttransport := createBoltTransport(\"bolt://test.db\")\n\trequire.NotNil(t, transport)\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\ts1 := NewLocalSubscriber(\"\", transport.logger, &TopicSelectorStore{})\n\ts1.SetTopics([]string{\"foo\"}, []string{})\n\trequire.NoError(t, transport.AddSubscriber(s1))\n\n\ts2 := NewLocalSubscriber(\"\", transport.logger, &TopicSelectorStore{})\n\ts2.SetTopics([]string{\"foo\"}, []string{})\n\trequire.NoError(t, transport.AddSubscriber(s2))\n\n\tassert.Equal(t, 2, transport.subscribers.Len())\n\n\ts1.Disconnect()\n\ttransport.RemoveSubscriber(s1)\n\tassert.Equal(t, 1, transport.subscribers.Len())\n\n\ts2.Disconnect()\n\ttransport.RemoveSubscriber(s2)\n\tassert.Zero(t, transport.subscribers.Len())\n}\n\nfunc TestBoltGetSubscribers(t *testing.T) {\n\ttransport := createBoltTransport(\"bolt://test.db\")\n\trequire.NotNil(t, transport)\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\ts1 := NewLocalSubscriber(\"\", transport.logger, &TopicSelectorStore{})\n\trequire.NoError(t, transport.AddSubscriber(s1))\n\n\ts2 := NewLocalSubscriber(\"\", transport.logger, &TopicSelectorStore{})\n\trequire.NoError(t, transport.AddSubscriber(s2))\n\n\tlastEventID, subscribers, err := transport.GetSubscribers()\n\trequire.NoError(t, err)\n\n\tassert.Equal(t, EarliestLastEventID, lastEventID)\n\tassert.Len(t, subscribers, 2)\n\tassert.Contains(t, subscribers, &s1.Subscriber)\n\tassert.Contains(t, subscribers, &s2.Subscriber)\n}\n\nfunc TestBoltLastEventID(t *testing.T) {\n\tdb, err := bolt.Open(\"test.db\", 0o600, nil)\n\tdefer os.Remove(\"test.db\")\n\trequire.NoError(t, err)\n\n\tdb.Update(func(tx *bolt.Tx) error {\n\t\tbucket, err := tx.CreateBucketIfNotExists([]byte(defaultBoltBucketName))\n\t\trequire.NoError(t, err)\n\n\t\tseq, err := bucket.NextSequence()\n\t\trequire.NoError(t, err)\n\n\t\tprefix := make([]byte, 8)\n\t\tbinary.BigEndian.PutUint64(prefix, seq)\n\n\t\t// The sequence value is prepended to the update id to create an ordered list\n\t\tkey := bytes.Join([][]byte{prefix, []byte(\"foo\")}, []byte{})\n\n\t\t// The DB is append-only\n\t\tbucket.FillPercent = 1\n\n\t\treturn bucket.Put(key, []byte(\"invalid\"))\n\t})\n\trequire.NoError(t, db.Close())\n\n\ttransport := createBoltTransport(\"bolt://test.db\")\n\trequire.NotNil(t, transport)\n\tdefer transport.Close()\n\n\tlastEventID, _, _ := transport.GetSubscribers()\n\tassert.Equal(t, \"foo\", lastEventID)\n}\n"
        },
        {
          "name": "caddy",
          "type": "tree",
          "content": null
        },
        {
          "name": "charts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.go",
          "type": "blob",
          "size": 8.572265625,
          "content": "package mercure\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/spf13/pflag\"\n\t\"github.com/spf13/viper\"\n\t\"go.uber.org/zap\"\n)\n\n// ErrInvalidConfig is returned when the configuration is invalid.\n//\n// Deprecated: use the Caddy server module or the standalone library instead.\nvar ErrInvalidConfig = errors.New(\"invalid config\")\n\n// SetConfigDefaults sets defaults on a Viper instance.\n//\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc SetConfigDefaults(v *viper.Viper) {\n\tv.SetDefault(\"debug\", false)\n\tv.SetDefault(\"transport_url\", \"bolt://updates.db\")\n\tv.SetDefault(\"jwt_algorithm\", \"HS256\")\n\tv.SetDefault(\"allow_anonymous\", false)\n\tv.SetDefault(\"acme_http01_addr\", \":http\")\n\tv.SetDefault(\"heartbeat_interval\", 40*time.Second) // Must be < 45s for compatibility with Yaffle/EventSource\n\tv.SetDefault(\"read_timeout\", 5*time.Second)\n\tv.SetDefault(\"read_header_timeout\", 3*time.Second)\n\tv.SetDefault(\"write_timeout\", 600*time.Second)\n\tv.SetDefault(\"dispatch_timeout\", 5*time.Second)\n\tv.SetDefault(\"compress\", false)\n\tv.SetDefault(\"use_forwarded_headers\", false)\n\tv.SetDefault(\"demo\", false)\n\tv.SetDefault(\"subscriptions\", false)\n\n\tv.SetDefault(\"metrics_enabled\", false)\n\tv.SetDefault(\"metrics_addr\", \"127.0.0.1:9764\")\n}\n\n// ValidateConfig validates a Viper instance.\n//\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc ValidateConfig(v *viper.Viper) error {\n\tif v.GetString(\"publisher_jwt_key\") == \"\" && v.GetString(\"jwt_key\") == \"\" {\n\t\treturn fmt.Errorf(`%w: one of \"jwt_key\" or \"publisher_jwt_key\" configuration parameter must be defined`, ErrInvalidConfig)\n\t}\n\tif v.GetString(\"cert_file\") != \"\" && v.GetString(\"key_file\") == \"\" {\n\t\treturn fmt.Errorf(`%w: if the \"cert_file\" configuration parameter is defined, \"key_file\" must be defined too`, ErrInvalidConfig)\n\t}\n\tif v.GetString(\"key_file\") != \"\" && v.GetString(\"cert_file\") == \"\" {\n\t\treturn fmt.Errorf(`%w: if the \"key_file\" configuration parameter is defined, \"cert_file\" must be defined too`, ErrInvalidConfig)\n\t}\n\tif !v.GetBool(\"metrics_enabled\") {\n\t\treturn nil\n\t}\n\n\tif v.GetString(\"metrics_addr\") == \"\" {\n\t\treturn fmt.Errorf(`%w: \"metrics_addr\" must be defined when metrics is enabled`, ErrInvalidConfig)\n\t}\n\tif v.GetString(\"metrics_addr\") == v.GetString(\"addr\") {\n\t\treturn fmt.Errorf(`%w: \"metrics_addr\" must not be the same as \"addr\"`, ErrInvalidConfig)\n\t}\n\n\treturn nil\n}\n\n// SetFlags creates flags and bind them to Viper.\n//\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc SetFlags(fs *pflag.FlagSet, v *viper.Viper) {\n\tfs.BoolP(\"debug\", \"d\", false, \"enable the debug mode\")\n\tfs.StringP(\"transport-url\", \"t\", \"\", \"transport and history system to use\")\n\tfs.StringP(\"jwt-key\", \"k\", \"\", \"JWT key\")\n\tfs.StringP(\"jwt-algorithm\", \"O\", \"\", \"JWT algorithm\")\n\tfs.StringP(\"publisher-jwt-key\", \"K\", \"\", \"publisher JWT key\")\n\tfs.StringP(\"publisher-jwt-algorithm\", \"A\", \"\", \"publisher JWT algorithm\")\n\tfs.StringP(\"subscriber-jwt-key\", \"L\", \"\", \"subscriber JWT key\")\n\tfs.StringP(\"subscriber-jwt-algorithm\", \"B\", \"\", \"subscriber JWT algorithm\")\n\tfs.BoolP(\"allow-anonymous\", \"X\", false, \"allow subscribers with no valid JWT to connect\")\n\tfs.StringSliceP(\"cors-allowed-origins\", \"c\", []string{}, \"list of allowed CORS origins\")\n\tfs.StringSliceP(\"publish-allowed-origins\", \"p\", []string{}, \"list of origins allowed to publish\")\n\tfs.StringP(\"addr\", \"a\", \"\", \"the address to listen on\")\n\tfs.StringSliceP(\"acme-hosts\", \"o\", []string{}, \"list of hosts for which Let's Encrypt certificates must be issued\")\n\tfs.StringP(\"acme-cert-dir\", \"E\", \"\", \"the directory where to store Let's Encrypt certificates\")\n\tfs.StringP(\"cert-file\", \"C\", \"\", \"a cert file (to use a custom certificate)\")\n\tfs.StringP(\"key-file\", \"J\", \"\", \"a key file (to use a custom certificate)\")\n\tfs.DurationP(\"heartbeat-interval\", \"i\", 15*time.Second, \"interval between heartbeats (0s to disable)\")\n\tfs.DurationP(\"read-timeout\", \"R\", 5*time.Second, \"maximum duration for reading the entire request, including the body, 5s by default, 0s to disable\")\n\tfs.DurationP(\"write-timeout\", \"W\", 60*time.Second, \"maximum duration of a connection, 60s by default, 0s to disable\")\n\tfs.DurationP(\"dispatch-timeout\", \"T\", 5*time.Second, \"maximum duration of the dispatch of a single update, 5s by default, 0s to disable\")\n\tfs.BoolP(\"compress\", \"Z\", false, \"enable or disable HTTP compression support\")\n\tfs.BoolP(\"use-forwarded-headers\", \"f\", false, \"enable headers forwarding\")\n\tfs.BoolP(\"demo\", \"D\", false, \"enable the demo mode\")\n\tfs.BoolP(\"subscriptions\", \"s\", false, \"dispatch updates when subscriptions are created or terminated\")\n\tfs.Int64(\"tcsz\", DefaultTopicSelectorStoreLRUMaxEntriesPerShard, \"size of each shard in topic selector store cache\")\n\n\tfs.Bool(\"metrics-enabled\", false, \"enable metrics\")\n\tfs.String(\"metrics-addr\", \"127.0.0.1:9764\", \"metrics HTTP server address\")\n\n\tfs.VisitAll(func(f *pflag.Flag) {\n\t\tv.BindPFlag(strings.ReplaceAll(f.Name, \"-\", \"_\"), fs.Lookup(f.Name))\n\t})\n}\n\n// InitConfig reads in config file and ENV variables if set.\n//\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc InitConfig(v *viper.Viper) {\n\tSetConfigDefaults(v)\n\n\tv.SetConfigName(\"mercure\")\n\tv.AutomaticEnv()\n\n\tv.AddConfigPath(\".\")\n\tconfigDir := os.Getenv(\"XDG_CONFIG_HOME\")\n\tif configDir == \"\" {\n\t\tconfigDir = \"$HOME/.config\"\n\t}\n\tv.AddConfigPath(configDir + \"/mercure/\")\n\tv.AddConfigPath(\"/etc/mercure/\")\n\n\tv.ReadInConfig()\n}\n\n// NewHubFromViper creates a new Hub from the Viper config.\n//\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc NewHubFromViper(v *viper.Viper) (*Hub, error) { //nolint:funlen,gocognit\n\tif err := ValidateConfig(v); err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\toptions := []Option{}\n\tvar (\n\t\tlogger Logger\n\t\terr    error\n\t\tk      string\n\t)\n\tif v.GetBool(\"debug\") {\n\t\toptions = append(options, WithDebug())\n\t\tlogger, err = zap.NewDevelopment()\n\t} else {\n\t\tlogger, err = zap.NewProduction()\n\t}\n\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to create logger: %w\", err)\n\t}\n\n\tvar tss *TopicSelectorStore\n\ttcsz := v.GetInt64(\"tcsz\")\n\tif tcsz == 0 {\n\t\ttcsz = DefaultTopicSelectorStoreLRUMaxEntriesPerShard\n\t}\n\ttss, err = NewTopicSelectorStoreLRU(tcsz, DefaultTopicSelectorStoreLRUShardCount)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif t := v.GetString(\"transport_url\"); t != \"\" {\n\t\tu, err := url.Parse(t)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"invalid transport url: %w\", err)\n\t\t}\n\n\t\tt, err := NewTransport(u, logger)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\toptions = append(options, WithTransport(t))\n\t}\n\n\tif v.GetBool(\"metrics_enabled\") {\n\t\toptions = append(options, WithMetrics(NewPrometheusMetrics(nil)))\n\t}\n\n\toptions = append(options, WithLogger(logger), WithTopicSelectorStore(tss))\n\tif v.GetBool(\"allow_anonymous\") {\n\t\toptions = append(options, WithAnonymous())\n\t}\n\tif v.GetBool(\"demo\") {\n\t\toptions = append(options, WithDemo())\n\t}\n\tif d := v.GetDuration(\"write_timeout\"); d != 600*time.Second {\n\t\toptions = append(options, WithWriteTimeout(d))\n\t}\n\tif d := v.GetDuration(\"dispatch_timeout\"); d != 0 {\n\t\toptions = append(options, WithDispatchTimeout(d))\n\t}\n\tif v.GetBool(\"subscriptions\") {\n\t\toptions = append(options, WithSubscriptions())\n\t}\n\tif d := v.GetDuration(\"heartbeat_interval\"); d != 0 {\n\t\toptions = append(options, WithHeartbeat(d))\n\t}\n\tif k = v.GetString(\"publisher_jwt_key\"); k == \"\" {\n\t\tk = v.GetString(\"jwt_key\")\n\t}\n\tif k != \"\" {\n\t\talg := v.GetString(\"publisher_jwt_algorithm\")\n\t\tif alg == \"\" {\n\t\t\tif alg = v.GetString(\"jwt_algorithm\"); alg == \"\" {\n\t\t\t\talg = \"HS256\"\n\t\t\t}\n\t\t}\n\n\t\toptions = append(options, WithPublisherJWT([]byte(k), alg))\n\t}\n\tif k = v.GetString(\"subscriber_jwt_key\"); k == \"\" {\n\t\tk = v.GetString(\"jwt_key\")\n\t}\n\tif k != \"\" {\n\t\talg := v.GetString(\"subscriber_jwt_algorithm\")\n\t\tif alg == \"\" {\n\t\t\tif alg = v.GetString(\"jwt_algorithm\"); alg == \"\" {\n\t\t\t\talg = \"HS256\"\n\t\t\t}\n\t\t}\n\n\t\toptions = append(options, WithSubscriberJWT([]byte(k), alg))\n\t}\n\tif h := v.GetStringSlice(\"acme_hosts\"); len(h) > 0 {\n\t\toptions = append(options, WithAllowedHosts(h))\n\t}\n\tif o := v.GetStringSlice(\"publish_allowed_origins\"); len(o) > 0 {\n\t\toptions = append(options, WithPublishOrigins(o))\n\t}\n\tif o := v.GetStringSlice(\"cors_allowed_origins\"); len(o) > 0 {\n\t\toptions = append(options, WithCORSOrigins(o))\n\t}\n\n\th, err := NewHub(options...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\th.config = v\n\n\treturn h, err\n}\n\n// Start is a helper method to start the Mercure Hub.\n//\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc Start() {\n\th, err := NewHubFromViper(viper.GetViper())\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\tdefer func() {\n\t\tif err := h.transport.Close(); err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t}()\n\n\th.Serve()\n}\n"
        },
        {
          "name": "config_test.go",
          "type": "blob",
          "size": 1.7958984375,
          "content": "package mercure\n\nimport (\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/spf13/pflag\"\n\t\"github.com/spf13/viper\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestMissingConfig(t *testing.T) {\n\terr := ValidateConfig(viper.New())\n\trequire.EqualError(t, err, `invalid config: one of \"jwt_key\" or \"publisher_jwt_key\" configuration parameter must be defined`)\n}\n\nfunc TestMissingKeyFile(t *testing.T) {\n\tv := viper.New()\n\tv.Set(\"jwt_key\", \"abc\")\n\tv.Set(\"cert_file\", \"foo\")\n\n\terr := ValidateConfig(v)\n\trequire.EqualError(t, err, `invalid config: if the \"cert_file\" configuration parameter is defined, \"key_file\" must be defined too`)\n}\n\nfunc TestMissingCertFile(t *testing.T) {\n\tv := viper.New()\n\tv.Set(\"jwt_key\", \"abc\")\n\tv.Set(\"key_file\", \"foo\")\n\n\terr := ValidateConfig(v)\n\trequire.EqualError(t, err, `invalid config: if the \"key_file\" configuration parameter is defined, \"cert_file\" must be defined too`)\n}\n\nfunc TestSetFlags(t *testing.T) {\n\tv := viper.New()\n\tfs := pflag.NewFlagSet(\"test\", pflag.PanicOnError)\n\tSetFlags(fs, v)\n\n\tassert.Subset(t, v.AllKeys(), []string{\"cert_file\", \"compress\", \"demo\", \"jwt_algorithm\", \"transport_url\", \"acme_hosts\", \"acme_cert_dir\", \"subscriber_jwt_key\", \"jwt_key\", \"allow_anonymous\", \"debug\", \"read_timeout\", \"publisher_jwt_algorithm\", \"write_timeout\", \"key_file\", \"use_forwarded_headers\", \"subscriber_jwt_algorithm\", \"addr\", \"publisher_jwt_key\", \"heartbeat_interval\", \"cors_allowed_origins\", \"publish_allowed_origins\", \"subscriptions\", \"dispatch_timeout\"})\n}\n\nfunc TestInitConfig(t *testing.T) {\n\tt.Setenv(\"JWT_KEY\", \"foo\")\n\tdefer os.Unsetenv(\"JWT_KEY\")\n\n\tv := viper.New()\n\tInitConfig(v)\n\n\tassert.Equal(t, \"foo\", v.GetString(\"jwt_key\"))\n}\n\nfunc TestMetricsAreDisabledByDefault(t *testing.T) {\n\tv := viper.New()\n\tSetConfigDefaults(v)\n\n\tassert.False(t, v.GetBool(\"metrics_enabled\"))\n}\n"
        },
        {
          "name": "conformance-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo.go",
          "type": "blob",
          "size": 1.6162109375,
          "content": "package mercure\n\nimport (\n\t\"embed\"\n\t\"io\"\n\t\"mime\"\n\t\"net/http\"\n\t\"path/filepath\"\n\t\"time\"\n)\n\nconst linkSuffix = `>; rel=\"mercure\"`\n\n// uiContent is our static web server content.\n//\n//go:embed public\nvar uiContent embed.FS\n\n// Demo exposes INSECURE Demo endpoints to test discovery and authorization mechanisms.\n// Add a query parameter named \"body\" to define the content to return in the response's body.\n// Add a query parameter named \"jwt\" set a \"mercureAuthorization\" cookie containing this token.\n// The Content-Type header will automatically be set according to the URL's extension.\nfunc (h *Hub) Demo(w http.ResponseWriter, r *http.Request) {\n\t// JSON-LD is the preferred format\n\t_ = mime.AddExtensionType(\".jsonld\", \"application/ld+json\")\n\n\turl := r.URL.String()\n\tmimeType := mime.TypeByExtension(filepath.Ext(r.URL.Path))\n\n\tquery := r.URL.Query()\n\tbody := query.Get(\"body\")\n\tjwt := query.Get(\"jwt\")\n\n\thubLink := \"<\" + defaultHubURL + linkSuffix\n\tif h.cookieName != defaultCookieName {\n\t\thubLink = hubLink + \"; cookie-name=\\\"\" + h.cookieName + \"\\\"\"\n\t}\n\n\theader := w.Header()\n\t// Several Link headers are set on purpose to allow testing advanced discovery mechanism\n\theader.Add(\"Link\", hubLink)\n\theader.Add(\"Link\", \"<\"+url+\">; rel=\\\"self\\\"\")\n\tif mimeType != \"\" {\n\t\theader.Set(\"Content-Type\", mimeType)\n\t}\n\n\tcookie := &http.Cookie{\n\t\tName:     h.cookieName,\n\t\tPath:     defaultHubURL,\n\t\tValue:    jwt,\n\t\tHttpOnly: r.TLS != nil,\n\t\tSameSite: http.SameSiteStrictMode,\n\t}\n\tif jwt == \"\" {\n\t\t// Remove cookie if not provided, to be sure a previous one doesn't exist\n\t\tcookie.Expires = time.Unix(0, 0)\n\t}\n\thttp.SetCookie(w, cookie)\n\n\tio.WriteString(w, body)\n}\n"
        },
        {
          "name": "demo_test.go",
          "type": "blob",
          "size": 1.533203125,
          "content": "package mercure\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestEmptyBodyAndJWT(t *testing.T) {\n\treq := httptest.NewRequest(http.MethodGet, \"http://example.com/demo/foo.jsonld\", nil)\n\tw := httptest.NewRecorder()\n\n\th, _ := NewHub()\n\th.Demo(w, req)\n\n\tresp := w.Result()\n\tassert.Equal(t, \"application/ld+json\", resp.Header.Get(\"Content-Type\"))\n\tassert.Equal(t, []string{\"<\" + defaultHubURL + linkSuffix, \"<http://example.com/demo/foo.jsonld>; rel=\\\"self\\\"\"}, resp.Header[\"Link\"])\n\n\tcookie := resp.Cookies()[0]\n\tassert.Equal(t, \"mercureAuthorization\", cookie.Name)\n\tassert.Empty(t, cookie.Value)\n\tassert.True(t, cookie.Expires.Before(time.Now()))\n\n\tdefer resp.Body.Close()\n\tbody, _ := io.ReadAll(resp.Body)\n\tassert.Equal(t, \"\", string(body))\n}\n\nfunc TestBodyAndJWT(t *testing.T) {\n\treq := httptest.NewRequest(http.MethodGet, \"http://example.com/demo/foo/bar.xml?body=<hello/>&jwt=token\", nil)\n\tw := httptest.NewRecorder()\n\n\th, _ := NewHub()\n\th.Demo(w, req)\n\n\tresp := w.Result()\n\tassert.Contains(t, resp.Header.Get(\"Content-Type\"), \"xml\") // Before Go 1.17, the charset wasn't set\n\tassert.Equal(t, []string{\"<\" + defaultHubURL + linkSuffix, \"<http://example.com/demo/foo/bar.xml?body=<hello/>&jwt=token>; rel=\\\"self\\\"\"}, resp.Header[\"Link\"])\n\n\tcookie := resp.Cookies()[0]\n\tassert.Equal(t, \"mercureAuthorization\", cookie.Name)\n\tassert.Equal(t, \"token\", cookie.Value)\n\tassert.Empty(t, cookie.Expires)\n\n\tdefer resp.Body.Close()\n\tbody, _ := io.ReadAll(resp.Body)\n\tassert.Equal(t, \"<hello/>\", string(body))\n}\n"
        },
        {
          "name": "dev.Caddyfile",
          "type": "blob",
          "size": 0.8525390625,
          "content": "# Learn how to configure the Mercure.rocks Hub on https://mercure.rocks/docs/hub/config\n{\n\t{$GLOBAL_OPTIONS}\n}\n\n{$CADDY_EXTRA_CONFIG}\n\n{$SERVER_NAME:localhost} {\n\tlog {\n\t\tformat filter {\n\t\t\tfields {\n\t\t\t\trequest>uri query {\n\t\t\t\t\treplace authorization REDACTED\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tencode zstd gzip\n\n\tmercure {\n\t\t# Publisher JWT key\n\t\tpublisher_jwt {env.MERCURE_PUBLISHER_JWT_KEY} {env.MERCURE_PUBLISHER_JWT_ALG}\n\t\t# Subscriber JWT key\n\t\tsubscriber_jwt {env.MERCURE_SUBSCRIBER_JWT_KEY} {env.MERCURE_SUBSCRIBER_JWT_ALG}\n\t\t# Permissive configuration for the development environment\n\t\tcors_origins *\n\t\tpublish_origins *\n\t\tdemo\n\t\tanonymous\n\t\tsubscriptions\n\t\t# Extra directives\n\t\t{$MERCURE_EXTRA_DIRECTIVES}\n\t}\n\n\t{$CADDY_SERVER_EXTRA_DIRECTIVES}\n\n\tredir / /.well-known/mercure/ui/\n\n\trespond /healthz 200\n\trespond /robots.txt `User-agent: *\n\tDisallow: /`\n\trespond \"Not Found\" 404\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "event.go",
          "type": "blob",
          "size": 0.9208984375,
          "content": "package mercure\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// Event is the actual Server Sent Event that will be dispatched.\ntype Event struct {\n\t// The updates' data, encoded in the sever-sent event format: every line starts with the string \"data: \"\n\t// https://www.w3.org/TR/eventsource/#dispatchMessage\n\tData string\n\n\t// The globally unique identifier corresponding to update\n\tID string\n\n\t// The event type, will be attached to the \"event\" field\n\tType string\n\n\t// The reconnection time\n\tRetry uint64\n}\n\n// String serializes the event in a \"text/event-stream\" representation.\nfunc (e *Event) String() string {\n\tvar b strings.Builder\n\n\tif e.Type != \"\" {\n\t\t_, _ = fmt.Fprintf(&b, \"event: %s\\n\", e.Type)\n\t}\n\tif e.Retry != 0 {\n\t\t_, _ = fmt.Fprintf(&b, \"retry: %d\\n\", e.Retry)\n\t}\n\n\tr := strings.NewReplacer(\"\\r\\n\", \"\\ndata: \", \"\\r\", \"\\ndata: \", \"\\n\", \"\\ndata: \")\n\t_, _ = fmt.Fprintf(&b, \"id: %s\\ndata: %s\\n\\n\", e.ID, r.Replace(e.Data))\n\n\treturn b.String()\n}\n"
        },
        {
          "name": "event_test.go",
          "type": "blob",
          "size": 0.5966796875,
          "content": "package mercure\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestEncodeFull(t *testing.T) {\n\te := &Event{\"several\\nlines\\rwith\\r\\neol\", \"custom-id\", \"type\", 5}\n\n\tassert.Equal(t, \"event: type\\nretry: 5\\nid: custom-id\\ndata: several\\ndata: lines\\ndata: with\\ndata: eol\\n\\n\", e.String())\n}\n\nfunc TestEncodeNoType(t *testing.T) {\n\te := &Event{\"data\", \"custom-id\", \"\", 5}\n\n\tassert.Equal(t, \"retry: 5\\nid: custom-id\\ndata: data\\n\\n\", e.String())\n}\n\nfunc TestEncodeNoRetry(t *testing.T) {\n\te := &Event{\"data\", \"custom-id\", \"\", 0}\n\n\tassert.Equal(t, \"id: custom-id\\ndata: data\\n\\n\", e.String())\n}\n"
        },
        {
          "name": "example_test.go",
          "type": "blob",
          "size": 0.3974609375,
          "content": "package mercure_test\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/dunglas/mercure\"\n)\n\n//nolint:gosec\nfunc Example() {\n\th, err := mercure.NewHub(\n\t\tmercure.WithPublisherJWT([]byte(\"!ChangeMe!\"), \"HS256\"),\n\t\tmercure.WithSubscriberJWT([]byte(\"!ChangeMe!\"), \"HS256\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer h.Stop()\n\n\thttp.Handle(\"/.well-known/mercure\", h)\n\tlog.Panic(http.ListenAndServe(\":8080\", nil))\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fixtures",
          "type": "tree",
          "content": null
        },
        {
          "name": "gatling",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.4052734375,
          "content": "module github.com/dunglas/mercure\n\ngo 1.22.0\n\ntoolchain go1.23.2\n\nretract (\n\tv0.14.7 // CI problem\n\tv0.14.6 // Overwriten tag\n)\n\nrequire (\n\tgithub.com/gofrs/uuid v4.4.0+incompatible\n\tgithub.com/golang-jwt/jwt/v5 v5.2.1\n\tgithub.com/gorilla/handlers v1.5.2\n\tgithub.com/gorilla/mux v1.8.1\n\tgithub.com/hashicorp/golang-lru v1.0.2\n\tgithub.com/kevburnsjr/skipfilter v0.0.1\n\tgithub.com/prometheus/client_golang v1.20.5\n\tgithub.com/prometheus/client_model v0.6.1\n\tgithub.com/spf13/cobra v1.8.1\n\tgithub.com/spf13/pflag v1.0.5\n\tgithub.com/spf13/viper v1.19.0\n\tgithub.com/stretchr/testify v1.10.0\n\tgithub.com/unrolled/secure v1.17.0\n\tgithub.com/yosida95/uritemplate/v3 v3.0.2\n\tgo.etcd.io/bbolt v1.3.11\n\tgo.uber.org/zap v1.27.0\n\tgolang.org/x/crypto v0.32.0\n)\n\nrequire (\n\tgithub.com/MauriceGit/skiplist v0.0.0-20211105230623-77f5c8d3e145 // indirect\n\tgithub.com/RoaringBitmap/roaring v1.9.4 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/bits-and-blooms/bitset v1.20.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/fsnotify/fsnotify v1.8.0 // indirect\n\tgithub.com/hashicorp/hcl v1.0.0 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/klauspost/compress v1.17.11 // indirect\n\tgithub.com/magiconair/properties v1.8.9 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/mschoch/smat v0.2.0 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.2.3 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/prometheus/common v0.61.0 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/sagikazarmark/locafero v0.6.0 // indirect\n\tgithub.com/sagikazarmark/slog-shim v0.1.0 // indirect\n\tgithub.com/sourcegraph/conc v0.3.0 // indirect\n\tgithub.com/spf13/afero v1.11.0 // indirect\n\tgithub.com/spf13/cast v1.7.1 // indirect\n\tgithub.com/subosito/gotenv v1.6.0 // indirect\n\tgo.uber.org/multierr v1.11.0 // indirect\n\tgolang.org/x/exp v0.0.0-20250106191152-7588d65b2ba8 // indirect\n\tgolang.org/x/net v0.34.0 // indirect\n\tgolang.org/x/sys v0.29.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgoogle.golang.org/protobuf v1.36.2 // indirect\n\tgopkg.in/ini.v1 v1.67.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 11.6611328125,
          "content": "github.com/MauriceGit/skiplist v0.0.0-20191117202105-643e379adb62/go.mod h1:877WBceefKn14QwVVn4xRFUsHsZb9clICgdeTj4XsUg=\ngithub.com/MauriceGit/skiplist v0.0.0-20211105230623-77f5c8d3e145 h1:1yw6O62BReQ+uA1oyk9XaQTvLhcoHWmoQAgXmDFXpIY=\ngithub.com/MauriceGit/skiplist v0.0.0-20211105230623-77f5c8d3e145/go.mod h1:877WBceefKn14QwVVn4xRFUsHsZb9clICgdeTj4XsUg=\ngithub.com/RoaringBitmap/roaring v0.9.4/go.mod h1:icnadbWcNyfEHlYdr+tDlOTih1Bf/h+rzPpv4sbomAA=\ngithub.com/RoaringBitmap/roaring v1.9.4 h1:yhEIoH4YezLYT04s1nHehNO64EKFTop/wBhxv2QzDdQ=\ngithub.com/RoaringBitmap/roaring v1.9.4/go.mod h1:6AXUsoIEzDTFFQCe1RbGA6uFONMhvejWj5rqITANK90=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bits-and-blooms/bitset v1.2.0/go.mod h1:gIdJ4wp64HaoK2YrL1Q5/N7Y16edYb8uY+O0FJTyyDA=\ngithub.com/bits-and-blooms/bitset v1.12.0/go.mod h1:7hO7Gc7Pp1vODcmWvKMRA9BNmbv6a/7QIWpPxHddWR8=\ngithub.com/bits-and-blooms/bitset v1.20.0 h1:2F+rfL86jE2d/bmw7OhqUg2Sj/1rURkBn3MdfoPyRVU=\ngithub.com/bits-and-blooms/bitset v1.20.0/go.mod h1:7hO7Gc7Pp1vODcmWvKMRA9BNmbv6a/7QIWpPxHddWR8=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\ngithub.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=\ngithub.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=\ngithub.com/gofrs/uuid v4.4.0+incompatible h1:3qXRTX8/NbyulANqlc0lchS1gqAVxRgsuW1YrTJupqA=\ngithub.com/gofrs/uuid v4.4.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=\ngithub.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/gorilla/handlers v1.5.2 h1:cLTUSsNkgcwhgRqvCNmdbRWG0A3N4F+M2nWKdScwyEE=\ngithub.com/gorilla/handlers v1.5.2/go.mod h1:dX+xVpaxdSw+q0Qek8SSsl3dfMk3jNddUkMzo0GtH0w=\ngithub.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=\ngithub.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=\ngithub.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hashicorp/golang-lru v1.0.2 h1:dV3g9Z/unq5DpblPpw+Oqcv4dU/1omnb4Ok8iPY6p1c=\ngithub.com/hashicorp/golang-lru v1.0.2/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/kevburnsjr/skipfilter v0.0.1 h1:EWl1lWUJfIehrKYIEkps0Cl67lCfS2pUM9iZFNajp7g=\ngithub.com/kevburnsjr/skipfilter v0.0.1/go.mod h1:jfaRyFOYVUtIa6IIC+0mB1qiZqhHw+DKvFowCBuijSk=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/magiconair/properties v1.8.9 h1:nWcCbLq1N2v/cpNsy5WvQ37Fb+YElfq20WJ/a8RkpQM=\ngithub.com/magiconair/properties v1.8.9/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mschoch/smat v0.2.0 h1:8imxQsjDm8yFEAVBe7azKmKSgzSkZXDuKkSq9374khM=\ngithub.com/mschoch/smat v0.2.0/go.mod h1:kc9mz7DoBKqDyiRL7VZN8KvXQMWeTaVnttLRXOlotKw=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=\ngithub.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=\ngithub.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.61.0 h1:3gv/GThfX0cV2lpO7gkTUwZru38mxevy90Bj8YFSRQQ=\ngithub.com/prometheus/common v0.61.0/go.mod h1:zr29OCN/2BsJRaFwG8QOBr41D6kkchKbpeNH7pAjb/s=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=\ngithub.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3N51bwOk=\ngithub.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=\ngithub.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=\ngithub.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=\ngithub.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=\ngithub.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=\ngithub.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=\ngithub.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=\ngithub.com/spf13/cast v1.7.1 h1:cuNEagBQEHWN1FnbGEjCXL2szYEXqfJPbP2HNUaca9Y=\ngithub.com/spf13/cast v1.7.1/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v1.19.0 h1:RWq5SEjt8o25SROyN3z2OrDB9l7RPd3lwTWU8EcEdcI=\ngithub.com/spf13/viper v1.19.0/go.mod h1:GQUN9bilAbhU/jgc1bKs99f/suXKeUMct8Adx5+Ntkg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=\ngithub.com/subosito/gotenv v1.6.0/go.mod h1:Dk4QP5c2W3ibzajGcXpNraDfq2IrhjMIvMSWPKKo0FU=\ngithub.com/unrolled/secure v1.17.0 h1:Io7ifFgo99Bnh0J7+Q+qcMzWM6kaDPCA5FroFZEdbWU=\ngithub.com/unrolled/secure v1.17.0/go.mod h1:BmF5hyM6tXczk3MpQkFf1hpKSRqCyhqcbiQtiAF7+40=\ngithub.com/yosida95/uritemplate/v3 v3.0.2 h1:Ed3Oyj9yrmi9087+NczuL5BwkIc4wvTb5zIM+UJPGz4=\ngithub.com/yosida95/uritemplate/v3 v3.0.2/go.mod h1:ILOh0sOhIJR3+L/8afwt/kE++YT040gmv5BQTMR2HP4=\ngo.etcd.io/bbolt v1.3.11 h1:yGEzV1wPz2yVCLsD8ZAiGHhHVlczyC9d1rP43/VCRJ0=\ngo.etcd.io/bbolt v1.3.11/go.mod h1:dksAq7YMXoljX0xu6VF5DMZGbhYYoLUalEiSySYAS4I=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngo.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=\ngo.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=\ngo.uber.org/zap v1.27.0 h1:aJMhYGrd5QSmlpLMr2MftRKl7t8J8PTZPA732ud/XR8=\ngo.uber.org/zap v1.27.0/go.mod h1:GB2qFLM7cTU87MWRP2mPIjqfIDnGu+VIO4V/SdhGo2E=\ngolang.org/x/crypto v0.32.0 h1:euUpcYgM8WcP71gNpTqQCn6rC2t6ULUPiOzfWaXVVfc=\ngolang.org/x/crypto v0.32.0/go.mod h1:ZnnJkOaASj8g0AjIduWNlq2NRxL0PlBrbKVyZ6V/Ugc=\ngolang.org/x/exp v0.0.0-20250106191152-7588d65b2ba8 h1:yqrTHse8TCMW1M1ZCP+VAR/l0kKxwaAIqN/il7x4voA=\ngolang.org/x/exp v0.0.0-20250106191152-7588d65b2ba8/go.mod h1:tujkw807nyEEAamNbDrEGzRav+ilXA7PCRAd6xsmwiU=\ngolang.org/x/net v0.34.0 h1:Mb7Mrk043xzHgnRM88suvJFwzVrRfHEHJEl5/71CKw0=\ngolang.org/x/net v0.34.0/go.mod h1:di0qlW3YNM5oh6GqDGQr92MyTozJPmybPK4Ev/Gm31k=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngoogle.golang.org/protobuf v1.36.2 h1:R8FeyR1/eLmkutZOM5CWghmo5itiG9z0ktFlTVLuTmU=\ngoogle.golang.org/protobuf v1.36.2/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "handler.go",
          "type": "blob",
          "size": 9.2353515625,
          "content": "package mercure\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/fs\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\n\t\"github.com/gorilla/handlers\"\n\t\"github.com/gorilla/mux\"\n\t\"github.com/unrolled/secure\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nconst (\n\tdefaultHubURL  = \"/.well-known/mercure\"\n\tdefaultUIURL   = defaultHubURL + \"/ui/\"\n\tdefaultDemoURL = defaultUIURL + \"demo/\"\n)\n\nfunc (h *Hub) initHandler() {\n\trouter := mux.NewRouter()\n\trouter.UseEncodedPath()\n\trouter.SkipClean(true)\n\n\tcsp := \"default-src 'self'\"\n\tif h.demo {\n\t\trouter.PathPrefix(defaultDemoURL).HandlerFunc(h.Demo).Methods(http.MethodGet, http.MethodHead)\n\t}\n\tif h.ui {\n\t\tpublic, err := fs.Sub(uiContent, \"public\")\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\trouter.PathPrefix(defaultUIURL).Handler(http.StripPrefix(defaultUIURL, http.FileServer(http.FS(public))))\n\n\t\tcsp += \" mercure.rocks cdn.jsdelivr.net\"\n\t}\n\n\th.registerSubscriptionHandlers(router)\n\n\trouter.HandleFunc(defaultHubURL, h.SubscribeHandler).Methods(http.MethodGet, http.MethodHead)\n\trouter.HandleFunc(defaultHubURL, h.PublishHandler).Methods(http.MethodPost)\n\n\tsecureMiddleware := secure.New(secure.Options{\n\t\tIsDevelopment:         h.debug,\n\t\tAllowedHosts:          h.allowedHosts,\n\t\tFrameDeny:             true,\n\t\tContentTypeNosniff:    true,\n\t\tBrowserXssFilter:      true,\n\t\tContentSecurityPolicy: csp,\n\t})\n\n\tif len(h.corsOrigins) == 0 {\n\t\th.handler = secureMiddleware.Handler(router)\n\n\t\treturn\n\t}\n\n\th.handler = secureMiddleware.Handler(\n\t\thandlers.CORS(\n\t\t\thandlers.AllowCredentials(),\n\t\t\thandlers.AllowedOrigins(h.corsOrigins),\n\t\t\thandlers.AllowedHeaders([]string{\"authorization\", \"cache-control\", \"last-event-id\"}),\n\t\t)(router),\n\t)\n}\n\nfunc (h *Hub) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\th.handler.ServeHTTP(w, r)\n}\n\n// Serve starts the HTTP server.\n//\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc (h *Hub) Serve() { //nolint:funlen\n\taddr := h.config.GetString(\"addr\")\n\n\th.server = &http.Server{\n\t\tAddr:              addr,\n\t\tHandler:           h.baseHandler(),\n\t\tReadTimeout:       h.config.GetDuration(\"read_timeout\"),\n\t\tReadHeaderTimeout: h.config.GetDuration(\"read_header_timeout\"),\n\t\tWriteTimeout:      h.config.GetDuration(\"write_timeout\"),\n\t}\n\n\tif _, ok := h.metrics.(*PrometheusMetrics); ok {\n\t\taddr := h.config.GetString(\"metrics_addr\")\n\n\t\th.metricsServer = &http.Server{\n\t\t\tAddr:              addr,\n\t\t\tHandler:           h.metricsHandler(),\n\t\t\tReadTimeout:       h.config.GetDuration(\"read_timeout\"),\n\t\t\tReadHeaderTimeout: h.config.GetDuration(\"read_header_timeout\"),\n\t\t\tWriteTimeout:      h.config.GetDuration(\"write_timeout\"),\n\t\t}\n\n\t\tif c := h.logger.Check(zap.InfoLevel, \"Mercure metrics started\"); c != nil {\n\t\t\tc.Write(zap.String(\"addr\", addr))\n\t\t}\n\t\tgo h.metricsServer.ListenAndServe()\n\t}\n\n\tacme := len(h.allowedHosts) > 0\n\n\tcertFile := h.config.GetString(\"cert_file\")\n\tkeyFile := h.config.GetString(\"key_file\")\n\n\tdone := h.listenShutdown()\n\tvar err error\n\n\tif !acme && certFile == \"\" && keyFile == \"\" { //nolint:nestif\n\t\tif c := h.logger.Check(zap.InfoLevel, \"Mercure started\"); c != nil {\n\t\t\tc.Write(zap.String(\"protocol\", \"http\"), zap.String(\"addr\", addr))\n\t\t}\n\n\t\terr = h.server.ListenAndServe()\n\t} else {\n\t\t// TLS\n\t\tif acme {\n\t\t\tcertManager := &autocert.Manager{\n\t\t\t\tPrompt:     autocert.AcceptTOS,\n\t\t\t\tHostPolicy: autocert.HostWhitelist(h.allowedHosts...),\n\t\t\t}\n\n\t\t\tacmeCertDir := h.config.GetString(\"acme_cert_dir\")\n\t\t\tif acmeCertDir != \"\" {\n\t\t\t\tcertManager.Cache = autocert.DirCache(acmeCertDir)\n\t\t\t}\n\t\t\th.server.TLSConfig = certManager.TLSConfig()\n\n\t\t\t// Mandatory for Let's Encrypt http-01 challenge\n\t\t\tgo http.ListenAndServe(h.config.GetString(\"acme_http01_addr\"), certManager.HTTPHandler(nil)) //nolint:gosec\n\t\t}\n\n\t\tif c := h.logger.Check(zap.InfoLevel, \"Mercure started\"); c != nil {\n\t\t\tc.Write(zap.String(\"protocol\", \"https\"), zap.String(\"addr\", addr))\n\t\t}\n\n\t\terr = h.server.ListenAndServeTLS(certFile, keyFile)\n\t}\n\n\tif !errors.Is(err, http.ErrServerClosed) {\n\t\tif c := h.logger.Check(zap.ErrorLevel, \"Unexpected error\"); c != nil {\n\t\t\tc.Write(zap.Error(err))\n\t\t}\n\t}\n\n\t<-done\n}\n\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc (h *Hub) listenShutdown() <-chan struct{} {\n\tidleConnsClosed := make(chan struct{})\n\n\th.server.RegisterOnShutdown(func() {\n\t\tselect {\n\t\tcase <-idleConnsClosed:\n\t\tdefault:\n\t\t\tclose(idleConnsClosed)\n\t\t}\n\t})\n\n\tgo func() {\n\t\tsigint := make(chan os.Signal, 1)\n\t\tsignal.Notify(sigint, os.Interrupt)\n\t\t<-sigint\n\n\t\tif err := h.server.Shutdown(context.Background()); err != nil {\n\t\t\tif c := h.logger.Check(zap.ErrorLevel, \"Unexpected error during server shutdown\"); c != nil {\n\t\t\t\tc.Write(zap.Error(err))\n\t\t\t}\n\t\t}\n\t\tif h.metricsServer != nil {\n\t\t\tif err := h.metricsServer.Shutdown(context.Background()); err != nil {\n\t\t\t\tif c := h.logger.Check(zap.ErrorLevel, \"Unexpected error during metrics server shutdown\"); c != nil {\n\t\t\t\t\tc.Write(zap.Error(err))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif c := h.logger.Check(zap.InfoLevel, \"My Baby Shot Me Down\"); c != nil {\n\t\t\tc.Write()\n\t\t}\n\n\t\tselect {\n\t\tcase <-idleConnsClosed:\n\t\tdefault:\n\t\t\tclose(idleConnsClosed)\n\t\t}\n\t}()\n\n\treturn idleConnsClosed\n}\n\n// chainHandlers configures and chains handlers.\nfunc (h *Hub) chainHandlers() http.Handler { //nolint:funlen\n\tr := mux.NewRouter()\n\th.registerSubscriptionHandlers(r)\n\n\tr.HandleFunc(defaultHubURL, h.SubscribeHandler).Methods(http.MethodGet, http.MethodHead)\n\tr.HandleFunc(defaultHubURL, h.PublishHandler).Methods(http.MethodPost)\n\n\tcsp := \"default-src 'self'\"\n\tif h.demo {\n\t\tr.PathPrefix(\"/demo\").HandlerFunc(h.Demo).Methods(http.MethodGet, http.MethodHead)\n\t}\n\n\tif h.ui {\n\t\tpublic, err := fs.Sub(uiContent, \"public\")\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tr.PathPrefix(\"/\").Handler(http.FileServer(http.FS(public)))\n\t\tcsp += \" mercure.rocks cdn.jsdelivr.net\"\n\t} else {\n\t\tr.HandleFunc(\"/\", welcomeHandler).Methods(http.MethodGet, http.MethodHead)\n\t}\n\n\tsecureMiddleware := secure.New(secure.Options{\n\t\tIsDevelopment:         h.debug,\n\t\tAllowedHosts:          h.allowedHosts,\n\t\tFrameDeny:             true,\n\t\tContentTypeNosniff:    true,\n\t\tBrowserXssFilter:      true,\n\t\tContentSecurityPolicy: csp,\n\t})\n\n\tvar corsHandler http.Handler\n\tif len(h.corsOrigins) > 0 {\n\t\tallowedOrigins := handlers.AllowedOrigins(h.corsOrigins)\n\t\tallowedHeaders := handlers.AllowedHeaders([]string{\"authorization\", \"cache-control\", \"last-event-id\"})\n\n\t\tcorsHandler = handlers.CORS(handlers.AllowCredentials(), allowedOrigins, allowedHeaders)(r)\n\t} else {\n\t\tcorsHandler = r\n\t}\n\n\tvar compressHandler http.Handler\n\tif h.config.GetBool(\"compress\") {\n\t\tcompressHandler = handlers.CompressHandler(corsHandler)\n\t} else {\n\t\tcompressHandler = corsHandler\n\t}\n\n\tvar useForwardedHeadersHandlers http.Handler\n\tif h.config.GetBool(\"use_forwarded_headers\") {\n\t\tuseForwardedHeadersHandlers = handlers.ProxyHeaders(compressHandler)\n\t} else {\n\t\tuseForwardedHeadersHandlers = compressHandler\n\t}\n\n\tsecureHandler := secureMiddleware.Handler(useForwardedHeadersHandlers)\n\n\tvar loggingHandler http.Handler\n\tif h.logger != nil && h.logger.Level().Enabled(zap.FatalLevel) {\n\t\tloggingHandler = handlers.CombinedLoggingHandler(os.Stderr, secureHandler)\n\t} else {\n\t\tloggingHandler = secureHandler\n\t}\n\trecoveryHandler := handlers.RecoveryHandler(\n\t\thandlers.RecoveryLogger(zapRecoveryHandlerLogger{h.logger}),\n\t\thandlers.PrintRecoveryStack(h.debug),\n\t)(loggingHandler)\n\n\treturn recoveryHandler\n}\n\nfunc (h *Hub) registerSubscriptionHandlers(r *mux.Router) {\n\tif !h.subscriptions {\n\t\treturn\n\t}\n\tif _, ok := h.transport.(TransportSubscribers); !ok {\n\t\tif c := h.logger.Check(zap.ErrorLevel, \"The current transport doesn't support subscriptions. Subscription API disabled.\"); c != nil {\n\t\t\tc.Write()\n\t\t}\n\n\t\treturn\n\t}\n\n\tr.UseEncodedPath()\n\tr.SkipClean(true)\n\n\tr.HandleFunc(subscriptionURL, h.SubscriptionHandler).Methods(http.MethodGet)\n\tr.HandleFunc(subscriptionsForTopicURL, h.SubscriptionsHandler).Methods(http.MethodGet)\n\tr.HandleFunc(subscriptionsURL, h.SubscriptionsHandler).Methods(http.MethodGet)\n}\n\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc (h *Hub) baseHandler() http.Handler {\n\tmainRouter := mux.NewRouter()\n\tmainRouter.UseEncodedPath()\n\tmainRouter.SkipClean(true)\n\n\t// Register /healthz (if enabled, in a way that doesn't pollute the HTTP logs).\n\tregisterHealthz(mainRouter)\n\n\thandler := h.chainHandlers()\n\tmainRouter.PathPrefix(\"/\").Handler(handler)\n\n\treturn mainRouter\n}\n\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc (h *Hub) metricsHandler() http.Handler {\n\trouter := mux.NewRouter()\n\n\tregisterHealthz(router)\n\th.metrics.(*PrometheusMetrics).Register(router.PathPrefix(\"/\").Subrouter())\n\n\treturn router\n}\n\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc registerHealthz(router *mux.Router) {\n\trouter.HandleFunc(\"/healthz\", func(w http.ResponseWriter, _ *http.Request) {\n\t\tfmt.Fprint(w, \"ok\")\n\t}).Methods(http.MethodGet, http.MethodHead)\n}\n\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc welcomeHandler(w http.ResponseWriter, _ *http.Request) {\n\tfmt.Fprint(w, `<!DOCTYPE html>\n<title>Mercure Hub</title>\n<h1>Welcome to <a href=\"https://mercure.rocks\">Mercure</a>!</h1>`)\n}\n\n// Deprecated: use the Caddy server module or the standalone library instead.\ntype zapRecoveryHandlerLogger struct {\n\tlogger Logger\n}\n\nfunc (z zapRecoveryHandlerLogger) Println(args ...interface{}) {\n\tz.logger.Error(fmt.Sprint(args...))\n}\n"
        },
        {
          "name": "hub.go",
          "type": "blob",
          "size": 8.0712890625,
          "content": "// Package mercure helps implement the Mercure protocol (https://mercure.rocks) in Go projects.\n// It provides an implementation of a Mercure hub as an HTTP handler.\npackage mercure\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"github.com/spf13/viper\"\n\t\"go.uber.org/zap\"\n)\n\nconst (\n\tDefaultWriteTimeout    = 600 * time.Second\n\tDefaultDispatchTimeout = 5 * time.Second\n\tDefaultHeartbeat       = 40 * time.Second\n)\n\n// ErrUnsupportedProtocolVersion is returned when the version passed is unsupported.\nvar ErrUnsupportedProtocolVersion = errors.New(\"compatibility mode only supports protocol version 7\")\n\n// Option instances allow to configure the library.\ntype Option func(h *opt) error\n\n// WithAnonymous allows subscribers with no valid JWT.\nfunc WithAnonymous() Option {\n\treturn func(o *opt) error {\n\t\to.anonymous = true\n\n\t\treturn nil\n\t}\n}\n\n// WithDebug enables the debug mode.\nfunc WithDebug() Option {\n\treturn func(o *opt) error {\n\t\to.debug = true\n\n\t\treturn nil\n\t}\n}\n\nfunc WithUI() Option {\n\treturn func(o *opt) error {\n\t\to.ui = true\n\n\t\treturn nil\n\t}\n}\n\n// WithDemo enables the demo.\nfunc WithDemo() Option {\n\treturn func(o *opt) error {\n\t\to.demo = true\n\t\to.ui = true\n\n\t\treturn nil\n\t}\n}\n\n// WithMetrics enables collection of Prometheus metrics.\nfunc WithMetrics(m Metrics) Option {\n\treturn func(o *opt) error {\n\t\to.metrics = m\n\n\t\treturn nil\n\t}\n}\n\n// WithSubscriptions allows to dispatch updates when subscriptions are created or terminated.\nfunc WithSubscriptions() Option {\n\treturn func(o *opt) error {\n\t\to.subscriptions = true\n\n\t\treturn nil\n\t}\n}\n\n// WithLogger sets the logger to use.\nfunc WithLogger(logger Logger) Option {\n\treturn func(o *opt) error {\n\t\to.logger = logger\n\n\t\treturn nil\n\t}\n}\n\n// WithWriteTimeout sets maximum duration before closing the connection, defaults to 600s, set to 0 to disable.\nfunc WithWriteTimeout(timeout time.Duration) Option {\n\treturn func(o *opt) error {\n\t\to.writeTimeout = timeout\n\n\t\treturn nil\n\t}\n}\n\n// WithDispatchTimeout sets maximum dispatch duration of an update.\nfunc WithDispatchTimeout(timeout time.Duration) Option {\n\treturn func(o *opt) error {\n\t\to.dispatchTimeout = timeout\n\n\t\treturn nil\n\t}\n}\n\n// WithHeartbeat sets the frequency of the heartbeat, disabled by default.\nfunc WithHeartbeat(interval time.Duration) Option {\n\treturn func(o *opt) error {\n\t\to.heartbeat = interval\n\n\t\treturn nil\n\t}\n}\n\n// WithPublisherJWTKeyFunc sets the function to use to parse and verify the publisher JWT.\nfunc WithPublisherJWTKeyFunc(keyfunc jwt.Keyfunc) Option {\n\treturn func(o *opt) error {\n\t\to.publisherJWTKeyFunc = keyfunc\n\n\t\treturn nil\n\t}\n}\n\n// WithSubscriberJWTKeyFunc sets the function to use to parse and verify the subscriber JWT.\nfunc WithSubscriberJWTKeyFunc(keyfunc jwt.Keyfunc) Option {\n\treturn func(o *opt) error {\n\t\to.subscriberJWTKeyFunc = keyfunc\n\n\t\treturn nil\n\t}\n}\n\n// WithPublisherJWT sets the JWT key and the signing algorithm to use for publishers.\nfunc WithPublisherJWT(key []byte, alg string) Option {\n\treturn func(o *opt) error {\n\t\tkeyfunc, err := createJWTKeyfunc(key, alg)\n\t\to.publisherJWTKeyFunc = keyfunc\n\n\t\treturn err\n\t}\n}\n\n// WithSubscriberJWT sets the JWT key and the signing algorithm to use for subscribers.\nfunc WithSubscriberJWT(key []byte, alg string) Option {\n\treturn func(o *opt) error {\n\t\tkeyfunc, err := createJWTKeyfunc(key, alg)\n\t\to.subscriberJWTKeyFunc = keyfunc\n\n\t\treturn err\n\t}\n}\n\n// WithAllowedHosts sets the allowed hosts.\nfunc WithAllowedHosts(hosts []string) Option {\n\treturn func(o *opt) error {\n\t\to.allowedHosts = hosts\n\n\t\treturn nil\n\t}\n}\n\nfunc validateOrigins(origins []string) error {\n\tfor _, origin := range origins {\n\t\tswitch origin {\n\t\tcase \"*\", \"null\":\n\t\t\tcontinue\n\t\t}\n\n\t\tu, err := url.Parse(origin)\n\t\tif err != nil ||\n\t\t\t!u.IsAbs() ||\n\t\t\tu.Opaque != \"\" ||\n\t\t\tu.User != nil ||\n\t\t\tu.Path != \"\" ||\n\t\t\tu.RawQuery != \"\" ||\n\t\t\tu.Fragment != \"\" {\n\t\t\treturn fmt.Errorf(`invalid origin, must be a URL having only a scheme, a host and optionally a port, \"*\" or \"null\": %w`, err)\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// WithPublishOrigins sets the origins allowed to publish updates.\nfunc WithPublishOrigins(origins []string) Option {\n\treturn func(o *opt) error {\n\t\tif err := validateOrigins(origins); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\to.publishOrigins = origins\n\n\t\treturn nil\n\t}\n}\n\n// WithCORSOrigins sets the allowed CORS origins.\nfunc WithCORSOrigins(origins []string) Option {\n\treturn func(o *opt) error {\n\t\tif err := validateOrigins(origins); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\to.corsOrigins = origins\n\n\t\treturn nil\n\t}\n}\n\n// WithTransport sets the transport to use.\nfunc WithTransport(t Transport) Option {\n\treturn func(o *opt) error {\n\t\to.transport = t\n\n\t\treturn nil\n\t}\n}\n\n// WithTopicSelectorStore sets the TopicSelectorStore instance to use.\nfunc WithTopicSelectorStore(tss *TopicSelectorStore) Option {\n\treturn func(o *opt) error {\n\t\to.topicSelectorStore = tss\n\n\t\treturn nil\n\t}\n}\n\n// WithCookieName sets the name of the authorization cookie (defaults to \"mercureAuthorization\").\nfunc WithCookieName(cookieName string) Option {\n\treturn func(o *opt) error {\n\t\to.cookieName = cookieName\n\n\t\treturn nil\n\t}\n}\n\n// WithProtocolVersionCompatibility sets the version of the Mercure protocol to be backward compatible with (only version 7 is supported).\nfunc WithProtocolVersionCompatibility(protocolVersionCompatibility int) Option {\n\treturn func(o *opt) error {\n\t\tswitch protocolVersionCompatibility {\n\t\tcase 7:\n\t\t\to.protocolVersionCompatibility = protocolVersionCompatibility\n\n\t\t\treturn nil\n\t\tdefault:\n\t\t\treturn ErrUnsupportedProtocolVersion\n\t\t}\n\t}\n}\n\n// opt contains the available options.\n//\n// If you change this, also update the Caddy module and the documentation.\ntype opt struct {\n\ttransport                    Transport\n\ttopicSelectorStore           *TopicSelectorStore\n\tanonymous                    bool\n\tdebug                        bool\n\tsubscriptions                bool\n\tui                           bool\n\tdemo                         bool\n\tlogger                       Logger\n\twriteTimeout                 time.Duration\n\tdispatchTimeout              time.Duration\n\theartbeat                    time.Duration\n\tpublisherJWTKeyFunc          jwt.Keyfunc\n\tsubscriberJWTKeyFunc         jwt.Keyfunc\n\tmetrics                      Metrics\n\tallowedHosts                 []string\n\tpublishOrigins               []string\n\tcorsOrigins                  []string\n\tcookieName                   string\n\tprotocolVersionCompatibility int\n}\n\nfunc (o *opt) isBackwardCompatiblyEnabledWith(version int) bool {\n\treturn o.protocolVersionCompatibility != 0 && version >= o.protocolVersionCompatibility\n}\n\n// Hub stores channels with clients currently subscribed and allows to dispatch updates.\ntype Hub struct {\n\t*opt\n\thandler http.Handler\n\n\t// Deprecated: use the Caddy server module or the standalone library instead.\n\tconfig        *viper.Viper\n\tserver        *http.Server\n\tmetricsServer *http.Server\n}\n\n// NewHub creates a new Hub instance.\nfunc NewHub(options ...Option) (*Hub, error) {\n\topt := &opt{\n\t\twriteTimeout:    DefaultWriteTimeout,\n\t\tdispatchTimeout: DefaultDispatchTimeout,\n\t\theartbeat:       DefaultHeartbeat,\n\t}\n\n\tfor _, o := range options {\n\t\tif err := o(opt); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif opt.logger == nil {\n\t\tvar (\n\t\t\tl   Logger\n\t\t\terr error\n\t\t)\n\t\tif opt.debug {\n\t\t\tl, err = zap.NewDevelopment()\n\t\t} else {\n\t\t\tl, err = zap.NewProduction()\n\t\t}\n\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error when creating logger: %w\", err)\n\t\t}\n\n\t\topt.logger = l\n\t}\n\n\tif opt.topicSelectorStore == nil {\n\t\ttss, err := NewTopicSelectorStoreLRU(DefaultTopicSelectorStoreLRUMaxEntriesPerShard, DefaultTopicSelectorStoreLRUShardCount)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\topt.topicSelectorStore = tss\n\t}\n\n\tif opt.transport == nil {\n\t\topt.transport = NewLocalTransport()\n\t}\n\n\tif ttss, ok := opt.transport.(TransportTopicSelectorStore); ok {\n\t\tttss.SetTopicSelectorStore(opt.topicSelectorStore)\n\t}\n\n\tif opt.metrics == nil {\n\t\topt.metrics = NopMetrics{}\n\t}\n\n\tif opt.cookieName == \"\" {\n\t\topt.cookieName = defaultCookieName\n\t}\n\n\th := &Hub{opt: opt}\n\th.initHandler()\n\n\treturn h, nil\n}\n\n// Stop stops the hub.\nfunc (h *Hub) Stop() error {\n\tif err := h.transport.Close(); err != nil {\n\t\treturn fmt.Errorf(\"transport error: %w\", err)\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "hub_test.go",
          "type": "blob",
          "size": 6.919921875,
          "content": "package mercure\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"os\"\n\t\"os/exec\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"github.com/spf13/viper\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.uber.org/zap\"\n)\n\nconst (\n\ttestAddr        = \"127.0.0.1:4242\"\n\ttestMetricsAddr = \"127.0.0.1:4243\"\n)\n\nfunc TestNewHub(t *testing.T) {\n\th := createDummy()\n\n\tassert.IsType(t, &viper.Viper{}, h.config)\n\n\tassert.False(t, h.opt.anonymous)\n\tassert.Equal(t, defaultCookieName, h.opt.cookieName)\n\tassert.Equal(t, 40*time.Second, h.opt.heartbeat)\n\tassert.Equal(t, 5*time.Second, h.opt.dispatchTimeout)\n\tassert.Equal(t, 600*time.Second, h.opt.writeTimeout)\n}\n\nfunc TestNewHubWithConfig(t *testing.T) {\n\th, err := NewHub(\n\t\tWithPublisherJWT([]byte(\"foo\"), jwt.SigningMethodHS256.Name),\n\t\tWithSubscriberJWT([]byte(\"bar\"), jwt.SigningMethodHS256.Name),\n\t)\n\trequire.NotNil(t, h)\n\trequire.NoError(t, err)\n}\n\nfunc TestNewHubValidationError(t *testing.T) {\n\tassert.Panics(t, func() {\n\t\tNewHubFromViper(viper.New())\n\t})\n}\n\nfunc TestNewHubTransportValidationError(t *testing.T) {\n\tv := viper.New()\n\tv.Set(\"publisher_jwt_key\", \"foo\")\n\tv.Set(\"jwt_key\", \"bar\")\n\tv.Set(\"transport_url\", \"foo://\")\n\n\tassert.Panics(t, func() {\n\t\tNewHubFromViper(viper.New())\n\t})\n}\n\nfunc TestStartCrash(t *testing.T) {\n\tif os.Getenv(\"BE_START_CRASH\") == \"1\" {\n\t\tStart()\n\n\t\treturn\n\t}\n\tcmd := exec.Command(os.Args[0], \"-test.run=TestStartCrash\") //nolint:gosec\n\tcmd.Env = append(os.Environ(), \"BE_START_CRASH=1\")\n\terr := cmd.Run()\n\n\tvar e *exec.ExitError\n\trequire.ErrorAs(t, err, &e)\n\tassert.False(t, e.Success())\n}\n\nfunc TestStop(t *testing.T) {\n\tconst numberOfSubscribers = 2\n\n\thub := createAnonymousDummy()\n\n\tgo func() {\n\t\ts := hub.transport.(*LocalTransport)\n\t\tvar ready bool\n\n\t\tfor !ready {\n\t\t\ts.RLock()\n\t\t\tready = s.subscribers.Len() == numberOfSubscribers\n\t\t\ts.RUnlock()\n\t\t}\n\n\t\thub.transport.Dispatch(&Update{\n\t\t\tTopics: []string{\"http://example.com/foo\"},\n\t\t\tEvent:  Event{Data: \"Hello World\"},\n\t\t})\n\n\t\thub.Stop()\n\t}()\n\n\tvar wg sync.WaitGroup\n\twg.Add(numberOfSubscribers)\n\tfor i := 0; i < numberOfSubscribers; i++ {\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foo\", nil)\n\n\t\t\tw := newSubscribeRecorder()\n\t\t\thub.SubscribeHandler(w, req)\n\n\t\t\tr := w.Result()\n\t\t\tr.Body.Close()\n\t\t\tassert.Equal(t, 200, r.StatusCode)\n\t\t}()\n\t}\n\n\twg.Wait()\n}\n\nfunc TestWithProtocolVersionCompatibility(t *testing.T) {\n\top := &opt{}\n\n\tassert.False(t, op.isBackwardCompatiblyEnabledWith(7))\n\n\to := WithProtocolVersionCompatibility(7)\n\trequire.NoError(t, o(op))\n\tassert.Equal(t, 7, op.protocolVersionCompatibility)\n\tassert.True(t, op.isBackwardCompatiblyEnabledWith(7))\n\tassert.True(t, op.isBackwardCompatiblyEnabledWith(8))\n\tassert.False(t, op.isBackwardCompatiblyEnabledWith(6))\n}\n\nfunc TestWithProtocolVersionCompatibilityVersions(t *testing.T) {\n\top := &opt{}\n\n\ttestCases := []struct {\n\t\tversion int\n\t\tok      bool\n\t}{\n\t\t{5, false},\n\t\t{6, false},\n\t\t{7, true},\n\t\t{8, false},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"version %d\", tc.version), func(t *testing.T) {\n\t\t\to := WithProtocolVersionCompatibility(tc.version)\n\n\t\t\tif tc.ok {\n\t\t\t\trequire.NoError(t, o(op))\n\t\t\t} else {\n\t\t\t\trequire.Error(t, o(op))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestWithPublisherJWTKeyFunc(t *testing.T) {\n\top := &opt{}\n\n\to := WithPublisherJWTKeyFunc(func(_ *jwt.Token) (interface{}, error) { return []byte{}, nil })\n\trequire.NoError(t, o(op))\n\trequire.NotNil(t, op.publisherJWTKeyFunc)\n}\n\nfunc TestWithSubscriberJWTKeyFunc(t *testing.T) {\n\top := &opt{}\n\n\to := WithSubscriberJWTKeyFunc(func(_ *jwt.Token) (interface{}, error) { return []byte{}, nil })\n\trequire.NoError(t, o(op))\n\trequire.NotNil(t, op.subscriberJWTKeyFunc)\n}\n\nfunc TestWithDebug(t *testing.T) {\n\top := &opt{}\n\n\to := WithDebug()\n\trequire.NoError(t, o(op))\n\trequire.True(t, op.debug)\n}\n\nfunc TestWithUI(t *testing.T) {\n\top := &opt{}\n\n\to := WithUI()\n\trequire.NoError(t, o(op))\n\trequire.True(t, op.ui)\n}\n\nfunc TestOriginsValidator(t *testing.T) {\n\top := &opt{}\n\n\tvalidOrigins := [][]string{\n\t\t{\"*\"},\n\t\t{\"null\"},\n\t\t{\"https://example.com\"},\n\t\t{\"http://example.com:8000\"},\n\t\t{\"https://example.com\", \"http://example.org\"},\n\t\t{\"https://example.com\", \"*\"},\n\t\t{\"null\", \"https://example.com:3000\"},\n\t\t{\"capacitor://\"},\n\t\t{\"capacitor://www.example.com\"},\n\t\t{\"ionic://\"},\n\t\t{\"foobar://\"},\n\t}\n\n\tinvalidOrigins := [][]string{\n\t\t{\"f\"},\n\t\t{\"foo\"},\n\t\t{\"https://example.com\", \"bar\"},\n\t\t{\"https://example.com/\"},\n\t\t{\"https://user@example.com\"},\n\t\t{\"https://example.com:abc\"},\n\t\t{\"https://example.com\", \"http://example.org/hello\"},\n\t\t{\"https://example.com?query\", \"*\"},\n\t\t{\"null\", \"https://example.com:3000#fragment\"},\n\t}\n\n\tfor _, origins := range validOrigins {\n\t\to := WithPublishOrigins(origins)\n\t\trequire.NoError(t, o(op), \"error while not expected for %#v\", origins)\n\n\t\to = WithCORSOrigins(origins)\n\t\trequire.NoError(t, o(op), \"error while not expected for %#v\", origins)\n\t}\n\n\tfor _, origins := range invalidOrigins {\n\t\to := WithPublishOrigins(origins)\n\t\trequire.Error(t, o(op), \"no error while expected for %#v\", origins)\n\n\t\to = WithCORSOrigins(origins)\n\t\trequire.Error(t, o(op), \"no error while expected for %#v\", origins)\n\t}\n}\n\nfunc createDummy(options ...Option) *Hub {\n\ttss, _ := NewTopicSelectorStoreLRU(0, 0)\n\toptions = append(\n\t\t[]Option{\n\t\t\tWithPublisherJWT([]byte(\"publisher\"), jwt.SigningMethodHS256.Name),\n\t\t\tWithSubscriberJWT([]byte(\"subscriber\"), jwt.SigningMethodHS256.Name),\n\t\t\tWithLogger(zap.NewNop()),\n\t\t\tWithTopicSelectorStore(tss),\n\t\t},\n\t\toptions...,\n\t)\n\n\th, _ := NewHub(options...)\n\th.config = viper.New()\n\th.config.Set(\"addr\", testAddr)\n\th.config.Set(\"metrics_addr\", testMetricsAddr)\n\n\treturn h\n}\n\nfunc createAnonymousDummy(options ...Option) *Hub {\n\toptions = append(\n\t\t[]Option{WithAnonymous()},\n\t\toptions...,\n\t)\n\n\treturn createDummy(options...)\n}\n\nfunc createDummyAuthorizedJWT(r role, topics []string) string {\n\treturn createDummyAuthorizedJWTWithPayload(r, topics, struct {\n\t\tFoo string `json:\"foo\"`\n\t}{Foo: \"bar\"})\n}\n\nfunc createDummyAuthorizedJWTWithPayload(r role, topics []string, payload interface{}) string {\n\ttoken := jwt.New(jwt.SigningMethodHS256)\n\n\tvar key []byte\n\tswitch r {\n\tcase rolePublisher:\n\t\ttoken.Claims = &claims{Mercure: mercureClaim{Publish: topics}, RegisteredClaims: jwt.RegisteredClaims{}}\n\t\tkey = []byte(\"publisher\")\n\n\tcase roleSubscriber:\n\t\ttoken.Claims = &claims{\n\t\t\tMercure: mercureClaim{\n\t\t\t\tSubscribe: topics,\n\t\t\t\tPayload:   payload,\n\t\t\t},\n\t\t\tRegisteredClaims: jwt.RegisteredClaims{},\n\t\t}\n\n\t\tkey = []byte(\"subscriber\")\n\t}\n\n\ttokenString, _ := token.SignedString(key)\n\n\treturn tokenString\n}\n\nfunc createDummyUnauthorizedJWT() string {\n\ttoken := jwt.New(jwt.SigningMethodHS256)\n\ttokenString, _ := token.SignedString([]byte(\"unauthorized\"))\n\n\treturn tokenString\n}\n\nfunc createDummyNoneSignedJWT() string {\n\ttoken := jwt.New(jwt.SigningMethodNone)\n\t// The generated token must have more than 41 chars\n\ttoken.Claims = jwt.RegisteredClaims{Subject: \"me\"}\n\ttokenString, _ := token.SignedString(jwt.UnsafeAllowNoneSignatureType)\n\n\treturn tokenString\n}\n"
        },
        {
          "name": "jwtkeyfunc.go",
          "type": "blob",
          "size": 1.234375,
          "content": "package mercure\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\n\t\"github.com/golang-jwt/jwt/v5\"\n)\n\n// ErrUnexpectedSigningMethod is returned when the signing JWT method is not supported.\nvar ErrUnexpectedSigningMethod = errors.New(\"unexpected signing method\")\n\nfunc createJWTKeyfunc(key []byte, alg string) (jwt.Keyfunc, error) {\n\tsigningMethod := jwt.GetSigningMethod(alg)\n\n\tvar k interface{}\n\tswitch signingMethod.(type) {\n\tcase *jwt.SigningMethodHMAC:\n\t\tk = key\n\tcase *jwt.SigningMethodRSA:\n\t\tpub, err := jwt.ParseRSAPublicKeyFromPEM(key)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"unable to parse RSA public key: %w\", err)\n\t\t}\n\n\t\tk = pub\n\tcase *jwt.SigningMethodECDSA:\n\t\tpub, err := jwt.ParseECPublicKeyFromPEM(key)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"unable to parse EC public key: %w\", err)\n\t\t}\n\n\t\tk = pub\n\tcase *jwt.SigningMethodEd25519:\n\t\tpub, err := jwt.ParseEdPublicKeyFromPEM(key)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"unable to parse Ed public key: %w\", err)\n\t\t}\n\n\t\tk = pub\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"%T: %w\", signingMethod, ErrUnexpectedSigningMethod)\n\t}\n\n\treturn func(t *jwt.Token) (interface{}, error) {\n\t\tif t.Method != signingMethod {\n\t\t\treturn nil, fmt.Errorf(\"%T: %w\", t.Method, ErrUnexpectedSigningMethod)\n\t\t}\n\n\t\treturn k, nil\n\t}, nil\n}\n"
        },
        {
          "name": "jwtkeyfunc_test.go",
          "type": "blob",
          "size": 0.7294921875,
          "content": "package mercure\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestCreateJWTKeyfunc(t *testing.T) {\n\tf, err := createJWTKeyfunc([]byte{}, \"invalid\")\n\trequire.Error(t, err)\n\trequire.Nil(t, f)\n}\n\nfunc TestAuthorizeAuthorizationHeaderEmptyKeyRsa(t *testing.T) {\n\tkeyfunc, err := createJWTKeyfunc([]byte{}, \"RS256\")\n\trequire.EqualError(t, err, \"unable to parse RSA public key: invalid key: Key must be a PEM encoded PKCS1 or PKCS8 key\")\n\trequire.Nil(t, keyfunc)\n}\n\nfunc TestAuthorizeAuthorizationHeaderInvalidKeyRsa(t *testing.T) {\n\tkeyfunc, err := createJWTKeyfunc([]byte(privateKeyRsa), \"RS256\")\n\trequire.EqualError(t, err, \"unable to parse RSA public key: asn1: structure error: integer too large\")\n\trequire.Nil(t, keyfunc)\n}\n"
        },
        {
          "name": "local.go",
          "type": "blob",
          "size": 2.3466796875,
          "content": "package mercure\n\nimport (\n\t\"net/url\"\n\t\"sync\"\n)\n\nfunc init() { //nolint:gochecknoinits\n\tRegisterTransportFactory(\"local\", DeprecatedNewLocalTransport)\n}\n\n// LocalTransport implements the TransportInterface without database and simply broadcast the live Updates.\ntype LocalTransport struct {\n\tsync.RWMutex\n\tsubscribers *SubscriberList\n\tlastEventID string\n\tclosed      chan struct{}\n\tclosedOnce  sync.Once\n}\n\n// DeprecatedNewLocalTransport creates a new LocalTransport.\n//\n// Deprecated: use NewLocalTransport() instead.\nfunc DeprecatedNewLocalTransport(_ *url.URL, _ Logger) (Transport, error) { //nolint:ireturn\n\treturn NewLocalTransport(), nil\n}\n\n// NewLocalTransport creates a new LocalTransport.\nfunc NewLocalTransport() *LocalTransport {\n\treturn &LocalTransport{\n\t\tsubscribers: NewSubscriberList(1e5),\n\t\tclosed:      make(chan struct{}),\n\t\tlastEventID: EarliestLastEventID,\n\t}\n}\n\n// Dispatch dispatches an update to all subscribers.\nfunc (t *LocalTransport) Dispatch(update *Update) error {\n\tselect {\n\tcase <-t.closed:\n\t\treturn ErrClosedTransport\n\tdefault:\n\t}\n\n\tAssignUUID(update)\n\tfor _, s := range t.subscribers.MatchAny(update) {\n\t\ts.Dispatch(update, false)\n\t}\n\tt.Lock()\n\tt.lastEventID = update.ID\n\tt.Unlock()\n\n\treturn nil\n}\n\n// AddSubscriber adds a new subscriber to the transport.\nfunc (t *LocalTransport) AddSubscriber(s *LocalSubscriber) error {\n\tselect {\n\tcase <-t.closed:\n\t\treturn ErrClosedTransport\n\tdefault:\n\t}\n\n\tt.Lock()\n\tdefer t.Unlock()\n\n\tt.subscribers.Add(s)\n\tif s.RequestLastEventID != \"\" {\n\t\ts.HistoryDispatched(EarliestLastEventID)\n\t}\n\ts.Ready()\n\n\treturn nil\n}\n\n// RemoveSubscriber removes a subscriber from the transport.\nfunc (t *LocalTransport) RemoveSubscriber(s *LocalSubscriber) error {\n\tselect {\n\tcase <-t.closed:\n\t\treturn ErrClosedTransport\n\tdefault:\n\t}\n\n\tt.Lock()\n\tdefer t.Unlock()\n\tt.subscribers.Remove(s)\n\n\treturn nil\n}\n\n// GetSubscribers gets the list of active subscribers.\nfunc (t *LocalTransport) GetSubscribers() (string, []*Subscriber, error) {\n\tt.RLock()\n\tdefer t.RUnlock()\n\n\treturn t.lastEventID, getSubscribers(t.subscribers), nil\n}\n\n// Close closes the Transport.\nfunc (t *LocalTransport) Close() (err error) {\n\tt.closedOnce.Do(func() {\n\t\tt.Lock()\n\t\tdefer t.Unlock()\n\t\tclose(t.closed)\n\t\tt.subscribers.Walk(0, func(s *LocalSubscriber) bool {\n\t\t\ts.Disconnect()\n\n\t\t\treturn true\n\t\t})\n\t})\n\n\treturn nil\n}\n\n// Interface guard.\nvar _ Transport = (*LocalTransport)(nil)\n"
        },
        {
          "name": "local_bench_test.go",
          "type": "blob",
          "size": 2.3564453125,
          "content": "package mercure\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net/url\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"go.uber.org/zap\"\n)\n\nfunc BenchmarkLocalTransport(b *testing.B) {\n\tsubscribeBenchmarkHelper(b, subBenchLocalTransport)\n}\n\nfunc subBenchLocalTransport(b *testing.B, topics, concurrency, matchPct int, testName string) {\n\tb.Helper()\n\n\ttr, err := DeprecatedNewLocalTransport(&url.URL{Scheme: \"local\"}, zap.NewNop())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer tr.Close()\n\ttop := make([]string, topics)\n\ttsMatch := make([]string, topics)\n\ttsNoMatch := make([]string, topics)\n\tfor i := 0; i < topics; i++ {\n\t\ttsNoMatch[i] = fmt.Sprintf(\"/%d/{%d}\", rand.Int(), rand.Int()) //nolint:gosec\n\t\tif topics/2 == i {\n\t\t\tn1 := rand.Int() //nolint:gosec\n\t\t\tn2 := rand.Int() //nolint:gosec\n\t\t\ttop[i] = fmt.Sprintf(\"/%d/%d\", n1, n2)\n\t\t\ttsMatch[i] = fmt.Sprintf(\"/%d/{%d}\", n1, n2)\n\t\t} else {\n\t\t\ttop[i] = fmt.Sprintf(\"/%d/%d\", rand.Int(), rand.Int()) //nolint:gosec\n\t\t\ttsMatch[i] = tsNoMatch[i]\n\t\t}\n\t}\n\tout := make(chan *Update, 50000)\n\ttss := &TopicSelectorStore{}\n\tfor i := 0; i < concurrency; i++ {\n\t\ts := NewLocalSubscriber(\"\", zap.NewNop(), tss)\n\t\tif i%100 < matchPct {\n\t\t\ts.SetTopics(tsMatch, nil)\n\t\t} else {\n\t\t\ts.SetTopics(tsNoMatch, nil)\n\t\t}\n\t\ts.out = out\n\t\ttr.AddSubscriber(s)\n\t}\n\tctx, done := context.WithCancel(context.Background())\n\tdefer done()\n\tfor i := 0; i < 1; i++ {\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-out:\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\tb.SetParallelism(concurrency)\n\tb.Run(testName, func(b *testing.B) {\n\t\tvar wg sync.WaitGroup\n\t\twg.Add(concurrency)\n\t\tb.RunParallel(func(pb *testing.PB) {\n\t\t\tfor i := 0; pb.Next(); i++ {\n\t\t\t\ttr.Dispatch(&Update{Topics: top})\n\t\t\t}\n\t\t})\n\t\twg.Done()\n\t})\n}\n\n/* --- test.sh ---\nThese are example commands that can be used to run subsets of this test for analysis.\nOmission of any environment variable causes the test to enumate a few meaningful options.\n\n#!/usr/bin/sh\n\nset -e\n\nmkdir -p _dist\n\n# --- Generating a cpu call graph ---\n\nSUB_TEST_CONCURRENCY=20000 \\\nSUB_TEST_TOPICS=20 \\\nSUB_TEST_MATCHPCT=50 \\\nSUB_TEST_CACHE=lru \\\nSUB_TEST_SHARDS=256 \\\ngo test -bench=. -run=BenchmarkLocalTransport -cpuprofile _dist/profile.20kc.20top.50pct.noskip.lru.256sh.out -benchmem\n\ngo build -o _dist/bin\n\ngo tool pprof --pdf _dist/bin _dist/profile.20kc.20top.50pct.noskip.lru.256sh.out \\\n                            > _dist/profile.20kc.20top.50pct.noskip.lru.256sh.pdf\n\n*/\n"
        },
        {
          "name": "local_test.go",
          "type": "blob",
          "size": 3.6982421875,
          "content": "package mercure\n\nimport (\n\t\"net/url\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.uber.org/zap\"\n)\n\nfunc TestLocalTransportDoNotDispatchUntilListen(t *testing.T) {\n\tlogger := zap.NewNop()\n\ttransport, _ := DeprecatedNewLocalTransport(&url.URL{Scheme: \"local\"}, logger)\n\tdefer transport.Close()\n\tassert.Implements(t, (*Transport)(nil), transport)\n\n\tu := &Update{Topics: []string{\"http://example.com/books/1\"}}\n\terr := transport.Dispatch(u)\n\trequire.NoError(t, err)\n\n\ts := NewLocalSubscriber(\"\", logger, &TopicSelectorStore{})\n\ts.SetTopics(u.Topics, nil)\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor range s.Receive() {\n\t\t\tt.Fail()\n\t\t}\n\t}()\n\n\ts.Disconnect()\n\twg.Wait()\n}\n\nfunc TestLocalTransportDispatch(t *testing.T) {\n\tlogger := zap.NewNop()\n\ttransport, _ := DeprecatedNewLocalTransport(&url.URL{Scheme: \"local\"}, logger)\n\tdefer transport.Close()\n\tassert.Implements(t, (*Transport)(nil), transport)\n\n\ts := NewLocalSubscriber(\"\", logger, &TopicSelectorStore{})\n\ts.SetTopics([]string{\"http://example.com/foo\"}, nil)\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\tu := &Update{Topics: s.SubscribedTopics}\n\trequire.NoError(t, transport.Dispatch(u))\n\tassert.Equal(t, u, <-s.Receive())\n}\n\nfunc TestLocalTransportClosed(t *testing.T) {\n\tlogger := zap.NewNop()\n\ttransport, _ := DeprecatedNewLocalTransport(&url.URL{Scheme: \"local\"}, logger)\n\tdefer transport.Close()\n\tassert.Implements(t, (*Transport)(nil), transport)\n\n\ttss := &TopicSelectorStore{}\n\n\ts := NewLocalSubscriber(\"\", logger, tss)\n\trequire.NoError(t, transport.AddSubscriber(s))\n\trequire.NoError(t, transport.Close())\n\tassert.Equal(t, transport.AddSubscriber(NewLocalSubscriber(\"\", logger, tss)), ErrClosedTransport)\n\tassert.Equal(t, transport.Dispatch(&Update{}), ErrClosedTransport)\n\n\t_, ok := <-s.out\n\tassert.False(t, ok)\n}\n\nfunc TestLiveCleanDisconnectedSubscribers(t *testing.T) {\n\tlogger := zap.NewNop()\n\ttr, _ := DeprecatedNewLocalTransport(&url.URL{Scheme: \"local\"}, logger)\n\ttransport := tr.(*LocalTransport)\n\tdefer transport.Close()\n\n\ttss := &TopicSelectorStore{}\n\n\ts1 := NewLocalSubscriber(\"\", logger, tss)\n\trequire.NoError(t, transport.AddSubscriber(s1))\n\n\ts2 := NewLocalSubscriber(\"\", logger, tss)\n\trequire.NoError(t, transport.AddSubscriber(s2))\n\n\tassert.Equal(t, 2, transport.subscribers.Len())\n\n\ts1.Disconnect()\n\ttransport.RemoveSubscriber(s1)\n\tassert.Equal(t, 1, transport.subscribers.Len())\n\n\ts2.Disconnect()\n\ttransport.RemoveSubscriber(s2)\n\tassert.Equal(t, 0, transport.subscribers.Len())\n}\n\nfunc TestLiveReading(t *testing.T) {\n\tlogger := zap.NewNop()\n\ttransport, _ := DeprecatedNewLocalTransport(&url.URL{Scheme: \"local\"}, logger)\n\tdefer transport.Close()\n\tassert.Implements(t, (*Transport)(nil), transport)\n\n\ts := NewLocalSubscriber(\"\", logger, &TopicSelectorStore{})\n\ts.SetTopics([]string{\"https://example.com\"}, nil)\n\trequire.NoError(t, transport.AddSubscriber(s))\n\n\tu := &Update{Topics: s.SubscribedTopics}\n\trequire.NoError(t, transport.Dispatch(u))\n\n\treceivedUpdate := <-s.Receive()\n\tassert.Equal(t, u, receivedUpdate)\n}\n\nfunc TestLocalTransportGetSubscribers(t *testing.T) {\n\ttransport := NewLocalTransport()\n\tdefer transport.Close()\n\trequire.NotNil(t, transport)\n\n\tlogger := zap.NewNop()\n\ttss := &TopicSelectorStore{}\n\n\ts1 := NewLocalSubscriber(\"\", logger, tss)\n\trequire.NoError(t, transport.AddSubscriber(s1))\n\n\ts2 := NewLocalSubscriber(\"\", logger, tss)\n\trequire.NoError(t, transport.AddSubscriber(s2))\n\n\tlastEventID, subscribers, err := transport.GetSubscribers()\n\trequire.NoError(t, err)\n\tassert.Equal(t, EarliestLastEventID, lastEventID)\n\tassert.Len(t, subscribers, 2)\n\tassert.Contains(t, subscribers, &s1.Subscriber)\n\tassert.Contains(t, subscribers, &s2.Subscriber)\n}\n"
        },
        {
          "name": "localsubscriber.go",
          "type": "blob",
          "size": 3.00390625,
          "content": "package mercure\n\nimport (\n\t\"net/url\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\t\"github.com/gofrs/uuid\"\n\t\"go.uber.org/zap\"\n)\n\n// LocalSubscriber represents a client subscribed to a list of topics on the current hub.\ntype LocalSubscriber struct {\n\tSubscriber\n\n\tdisconnected        int32\n\tout                 chan *Update\n\toutMutex            sync.RWMutex\n\tresponseLastEventID chan string\n\tready               int32\n\tliveQueue           []*Update\n\tliveMutex           sync.RWMutex\n}\n\nconst outBufferLength = 1000\n\n// NewLocalSubscriber creates a new subscriber.\nfunc NewLocalSubscriber(lastEventID string, logger Logger, topicSelectorStore *TopicSelectorStore) *LocalSubscriber {\n\tid := \"urn:uuid:\" + uuid.Must(uuid.NewV4()).String()\n\ts := &LocalSubscriber{\n\t\tSubscriber:          *NewSubscriber(logger, topicSelectorStore),\n\t\tresponseLastEventID: make(chan string, 1),\n\t\tout:                 make(chan *Update, outBufferLength),\n\t}\n\n\ts.ID = id\n\ts.EscapedID = url.QueryEscape(id)\n\ts.RequestLastEventID = lastEventID\n\n\treturn s\n}\n\n// Dispatch an update to the subscriber.\n// Security checks must (topics matching) be done before calling Dispatch,\n// for instance by calling Match.\nfunc (s *LocalSubscriber) Dispatch(u *Update, fromHistory bool) bool {\n\tif atomic.LoadInt32(&s.disconnected) > 0 {\n\t\treturn false\n\t}\n\n\tif !fromHistory && atomic.LoadInt32(&s.ready) < 1 {\n\t\ts.liveMutex.Lock()\n\t\tif s.ready < 1 {\n\t\t\ts.liveQueue = append(s.liveQueue, u)\n\t\t\ts.liveMutex.Unlock()\n\n\t\t\treturn true\n\t\t}\n\t\ts.liveMutex.Unlock()\n\t}\n\n\ts.outMutex.Lock()\n\tif atomic.LoadInt32(&s.disconnected) > 0 {\n\t\ts.outMutex.Unlock()\n\n\t\treturn false\n\t}\n\n\tselect {\n\tcase s.out <- u:\n\t\ts.outMutex.Unlock()\n\tdefault:\n\t\ts.handleFullChan()\n\n\t\treturn false\n\t}\n\n\treturn true\n}\n\n// Ready flips the ready flag to true and flushes queued live updates returning number of events flushed.\nfunc (s *LocalSubscriber) Ready() (n int) {\n\ts.liveMutex.Lock()\n\ts.outMutex.Lock()\n\n\tfor _, u := range s.liveQueue {\n\t\tselect {\n\t\tcase s.out <- u:\n\t\t\tn++\n\t\tdefault:\n\t\t\ts.handleFullChan()\n\t\t\ts.liveMutex.Unlock()\n\n\t\t\treturn n\n\t\t}\n\t}\n\tatomic.StoreInt32(&s.ready, 1)\n\n\ts.outMutex.Unlock()\n\ts.liveMutex.Unlock()\n\n\treturn n\n}\n\n// Receive returns a chan when incoming updates are dispatched.\nfunc (s *LocalSubscriber) Receive() <-chan *Update {\n\treturn s.out\n}\n\n// HistoryDispatched must be called when all messages coming from the history have been dispatched.\nfunc (s *LocalSubscriber) HistoryDispatched(responseLastEventID string) {\n\ts.responseLastEventID <- responseLastEventID\n}\n\n// Disconnect disconnects the subscriber.\nfunc (s *LocalSubscriber) Disconnect() {\n\tif atomic.LoadInt32(&s.disconnected) > 0 {\n\t\treturn\n\t}\n\n\ts.outMutex.Lock()\n\tdefer s.outMutex.Unlock()\n\n\tatomic.StoreInt32(&s.disconnected, 1)\n\tclose(s.out)\n}\n\n// handleFullChan disconnects the subscriber when the out channel is full.\nfunc (s *LocalSubscriber) handleFullChan() {\n\tatomic.StoreInt32(&s.disconnected, 1)\n\ts.outMutex.Unlock()\n\n\tif c := s.logger.Check(zap.ErrorLevel, \"subscriber unable to receive updates fast enough\"); c != nil {\n\t\tc.Write(zap.Object(\"subscriber\", s))\n\t}\n}\n"
        },
        {
          "name": "log.go",
          "type": "blob",
          "size": 0.9921875,
          "content": "package mercure\n\nimport \"go.uber.org/zap/zapcore\"\n\n// stringArray has been copied from https://github.com/uber-go/zap/blob/master/array.go#L250-L257\n// Copyright (c) 2016 Uber Technologies, Inc.\ntype stringArray []string\n\nfunc (ss stringArray) MarshalLogArray(arr zapcore.ArrayEncoder) error {\n\tfor i := range ss {\n\t\tarr.AppendString(ss[i])\n\t}\n\n\treturn nil\n}\n\n// LogField is an alias of zapcore.Field, it could be replaced by a custom contract when Go will support generics.\ntype LogField = zapcore.Field\n\n// Level is an alias of zapcore.Level, it could be replaced by a custom contract when Go will support generics.\ntype Level = zapcore.Level\n\n// CheckedEntry is an alias of zapcore.CheckedEntry, it could be replaced by a custom contract when Go will support generics.\ntype CheckedEntry = zapcore.CheckedEntry\n\n// Logger defines the Mercure logger.\ntype Logger interface {\n\tInfo(msg string, fields ...LogField)\n\tError(msg string, fields ...LogField)\n\tCheck(level Level, msg string) *CheckedEntry\n\tLevel() Level\n}\n"
        },
        {
          "name": "log_test.go",
          "type": "blob",
          "size": 0.853515625,
          "content": "package mercure\n\nimport (\n\t\"bytes\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"go.uber.org/zap\"\n)\n\n// MemorySink implements zap.Sink by writing all messages to a buffer.\ntype MemorySink struct {\n\t*bytes.Buffer\n}\n\n// Implement Close and Sync as no-ops to satisfy the interface. The Write\n// method is provided by the embedded buffer.\n\nfunc (s *MemorySink) Close() error { return nil }\nfunc (s *MemorySink) Sync() error  { return nil }\n\nvar sink *MemorySink\n\nfunc newTestLogger(t *testing.T) (*MemorySink, *zap.Logger) {\n\tt.Helper()\n\n\tif sink == nil {\n\t\tsink = &MemorySink{new(bytes.Buffer)}\n\t\tif err := zap.RegisterSink(\"memory\", func(*url.URL) (zap.Sink, error) {\n\t\t\treturn sink, nil\n\t\t}); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t}\n\n\tconf := zap.NewProductionConfig()\n\tconf.OutputPaths = []string{\"memory://\"}\n\n\tlogger, err := conf.Build()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\treturn sink, logger\n}\n"
        },
        {
          "name": "metrics.go",
          "type": "blob",
          "size": 2.96875,
          "content": "package mercure\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/dunglas/mercure/common\"\n\t\"github.com/gorilla/mux\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nconst metricsPath = \"/metrics\"\n\ntype Metrics interface {\n\t// SubscriberConnected collects metrics about subscriber connections.\n\tSubscriberConnected(s *LocalSubscriber)\n\t// SubscriberDisconnected collects metrics about subscriber disconnections.\n\tSubscriberDisconnected(s *LocalSubscriber)\n\t// UpdatePublished collects metrics about update publications.\n\tUpdatePublished(u *Update)\n}\n\ntype NopMetrics struct{}\n\nfunc (NopMetrics) SubscriberConnected(_ *LocalSubscriber)    {}\nfunc (NopMetrics) SubscriberDisconnected(_ *LocalSubscriber) {}\nfunc (NopMetrics) UpdatePublished(_ *Update)                 {}\n\n// PrometheusMetrics store Hub collected metrics.\ntype PrometheusMetrics struct {\n\tregistry         prometheus.Registerer\n\tsubscribersTotal prometheus.Counter\n\tsubscribers      prometheus.Gauge\n\tupdatesTotal     prometheus.Counter\n}\n\n// NewPrometheusMetrics creates a Prometheus metrics collector.\n// This method must be called only one time, or it will panic.\nfunc NewPrometheusMetrics(registry prometheus.Registerer) *PrometheusMetrics {\n\tif registry == nil {\n\t\tregistry = prometheus.NewRegistry()\n\t}\n\tm := &PrometheusMetrics{\n\t\tregistry: registry,\n\t\tsubscribersTotal: prometheus.NewCounter(\n\t\t\tprometheus.CounterOpts{\n\t\t\t\tName: \"mercure_subscribers_total\",\n\t\t\t\tHelp: \"Total number of handled subscribers\",\n\t\t\t},\n\t\t),\n\t\tsubscribers: prometheus.NewGauge(\n\t\t\tprometheus.GaugeOpts{\n\t\t\t\tName: \"mercure_subscribers_connected\",\n\t\t\t\tHelp: \"The current number of running subscribers\",\n\t\t\t},\n\t\t),\n\t\tupdatesTotal: prometheus.NewCounter(\n\t\t\tprometheus.CounterOpts{\n\t\t\t\tName: \"mercure_updates_total\",\n\t\t\t\tHelp: \"Total number of handled updates\",\n\t\t\t},\n\t\t),\n\t}\n\n\tm.registry.MustRegister(m.subscribers)\n\tm.registry.MustRegister(m.subscribersTotal)\n\tm.registry.MustRegister(m.updatesTotal)\n\n\treturn m\n}\n\n// Register configures the Prometheus registry with all collected metrics.\n//\n// Deprecated: use the Caddy server module or the standalone library instead.\nfunc (m *PrometheusMetrics) Register(r *mux.Router) {\n\t// Metrics about current version\n\tm.registry.MustRegister(common.AppVersion.NewMetricsCollector())\n\n\t// Go-specific metrics about the process (GC stats, goroutines, etc.).\n\tm.registry.MustRegister(prometheus.NewGoCollector())\n\t// Go-unrelated process metrics (memory usage, file descriptors, etc.).\n\tm.registry.MustRegister(prometheus.NewProcessCollector(prometheus.ProcessCollectorOpts{}))\n\n\tr.Handle(metricsPath, promhttp.HandlerFor(m.registry.(*prometheus.Registry), promhttp.HandlerOpts{})).Methods(http.MethodGet)\n}\n\nfunc (m *PrometheusMetrics) SubscriberConnected(_ *LocalSubscriber) {\n\tm.subscribersTotal.Inc()\n\tm.subscribers.Inc()\n}\n\nfunc (m *PrometheusMetrics) SubscriberDisconnected(_ *LocalSubscriber) {\n\tm.subscribers.Dec()\n}\n\nfunc (m *PrometheusMetrics) UpdatePublished(_ *Update) {\n\tm.updatesTotal.Inc()\n}\n"
        },
        {
          "name": "metrics_test.go",
          "type": "blob",
          "size": 2.220703125,
          "content": "package mercure\n\nimport (\n\t\"testing\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\tdto \"github.com/prometheus/client_model/go\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.uber.org/zap\"\n)\n\nfunc TestNumberOfRunningSubscribers(t *testing.T) {\n\tm := NewPrometheusMetrics(nil)\n\n\tlogger := zap.NewNop()\n\ttss := &TopicSelectorStore{}\n\n\ts1 := NewLocalSubscriber(\"\", logger, tss)\n\ts1.SetTopics([]string{\"topic1\", \"topic2\"}, nil)\n\tm.SubscriberConnected(s1)\n\tassertGaugeValue(t, 1.0, m.subscribers)\n\n\ts2 := NewLocalSubscriber(\"\", logger, tss)\n\ts2.SetTopics([]string{\"topic2\"}, nil)\n\tm.SubscriberConnected(s2)\n\tassertGaugeValue(t, 2.0, m.subscribers)\n\n\tm.SubscriberDisconnected(s1)\n\tassertGaugeValue(t, 1.0, m.subscribers)\n\n\tm.SubscriberDisconnected(s2)\n\tassertGaugeValue(t, 0.0, m.subscribers)\n}\n\nfunc TestTotalNumberOfHandledSubscribers(t *testing.T) {\n\tm := NewPrometheusMetrics(nil)\n\n\tlogger := zap.NewNop()\n\ttss := &TopicSelectorStore{}\n\n\ts1 := NewLocalSubscriber(\"\", logger, tss)\n\ts1.SetTopics([]string{\"topic1\", \"topic2\"}, nil)\n\tm.SubscriberConnected(s1)\n\tassertCounterValue(t, 1.0, m.subscribersTotal)\n\n\ts2 := NewLocalSubscriber(\"\", logger, tss)\n\ts2.SetTopics([]string{\"topic2\"}, nil)\n\tm.SubscriberConnected(s2)\n\tassertCounterValue(t, 2.0, m.subscribersTotal)\n\n\tm.SubscriberDisconnected(s1)\n\tm.SubscriberDisconnected(s2)\n\n\tassertCounterValue(t, 2.0, m.subscribersTotal)\n}\n\nfunc TestTotalOfHandledUpdates(t *testing.T) {\n\tm := NewPrometheusMetrics(nil)\n\n\tm.UpdatePublished(&Update{\n\t\tTopics: []string{\"topic1\", \"topic2\"},\n\t})\n\tm.UpdatePublished(&Update{\n\t\tTopics: []string{\"topic2\", \"topic3\"},\n\t})\n\tm.UpdatePublished(&Update{\n\t\tTopics: []string{\"topic2\"},\n\t})\n\tm.UpdatePublished(&Update{\n\t\tTopics: []string{\"topic3\"},\n\t})\n\n\tassertCounterValue(t, 4.0, m.updatesTotal)\n}\n\nfunc assertGaugeValue(t *testing.T, v float64, g prometheus.Gauge) {\n\tt.Helper()\n\n\tvar metricOut dto.Metric\n\tif err := g.Write(&metricOut); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tassert.Equal(t, v, metricOut.GetGauge().GetValue()) //nolint:testifylint\n}\n\nfunc assertCounterValue(t *testing.T, v float64, c prometheus.Counter) {\n\tt.Helper()\n\n\tvar metricOut dto.Metric\n\tif err := c.Write(&metricOut); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tassert.Equal(t, v, metricOut.GetCounter().GetValue()) // nolint:testifylint\n}\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish.go",
          "type": "blob",
          "size": 2.5244140625,
          "content": "package mercure\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"go.uber.org/zap\"\n)\n\n// PublishHandler allows publisher to broadcast updates to all subscribers.\n//\n//nolint:funlen\nfunc (h *Hub) PublishHandler(w http.ResponseWriter, r *http.Request) {\n\tvar claims *claims\n\tvar err error\n\tif h.publisherJWTKeyFunc != nil {\n\t\tclaims, err = authorize(r, h.publisherJWTKeyFunc, h.publishOrigins, h.cookieName)\n\t\tif err != nil || claims == nil || claims.Mercure.Publish == nil {\n\t\t\th.httpAuthorizationError(w, r, err)\n\n\t\t\treturn\n\t\t}\n\t}\n\n\tif r.ParseForm() != nil {\n\t\thttp.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)\n\n\t\treturn\n\t}\n\n\ttopics := r.PostForm[\"topic\"]\n\tif len(topics) == 0 {\n\t\thttp.Error(w, \"Missing \\\"topic\\\" parameter\", http.StatusBadRequest)\n\n\t\treturn\n\t}\n\n\tvar retry uint64\n\tif retryString := r.PostForm.Get(\"retry\"); retryString != \"\" {\n\t\tif retry, err = strconv.ParseUint(retryString, 10, 64); err != nil {\n\t\t\thttp.Error(w, `Invalid \"retry\" parameter`, http.StatusBadRequest)\n\n\t\t\treturn\n\t\t}\n\t}\n\n\tprivate := len(r.PostForm[\"private\"]) != 0\n\tif !canDispatch(h.topicSelectorStore, topics, claims.Mercure.Publish) {\n\t\tif private {\n\t\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\n\t\t\treturn\n\t\t}\n\n\t\tif h.isBackwardCompatiblyEnabledWith(7) {\n\t\t\th.logger.Info(\"Deprecated: posting public updates to topics not listed in the 'mercure.publish' JWT claim is deprecated since the version 7 of the protocol, use '[\\\"*\\\"]' as value to allow publishing on all topics.\")\n\t\t} else {\n\t\t\th.logger.Info(\"Unsupported: posting public updates to topics not listed in the 'mercure.publish' JWT claim is not supported anymore, use '[\\\"*\\\"]' as value to allow publishing on all topics or enable backward compatibility with the version 7 of the protocol.\")\n\t\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\n\t\t\treturn\n\t\t}\n\t}\n\n\tu := &Update{\n\t\tTopics:  topics,\n\t\tPrivate: private,\n\t\tDebug:   h.debug,\n\t\tEvent:   Event{r.PostForm.Get(\"data\"), r.PostForm.Get(\"id\"), r.PostForm.Get(\"type\"), retry},\n\t}\n\n\t// Broadcast the update\n\tif err := h.transport.Dispatch(u); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif _, err := io.WriteString(w, u.ID); err != nil {\n\t\tif c := h.logger.Check(zap.WarnLevel, \"Failed to write publish response\"); c != nil {\n\t\t\tc.Write(zap.Object(\"update\", u), zap.Error(err), zap.String(\"remote_addr\", r.RemoteAddr))\n\t\t}\n\t}\n\n\tif c := h.logger.Check(zap.DebugLevel, \"Update published\"); c != nil {\n\t\tc.Write(zap.Object(\"update\", u), zap.String(\"remote_addr\", r.RemoteAddr))\n\t}\n\th.metrics.UpdatePublished(u)\n}\n"
        },
        {
          "name": "publish_test.go",
          "type": "blob",
          "size": 9.8505859375,
          "content": "package mercure\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"github.com/gofrs/uuid\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.uber.org/zap\"\n)\n\nfunc TestPublishNoAuthorizationHeader(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, nil)\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n\tassert.Equal(t, http.StatusText(http.StatusUnauthorized)+\"\\n\", w.Body.String())\n}\n\nfunc TestPublishUnauthorizedJWT(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, nil)\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyUnauthorizedJWT())\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n\tassert.Equal(t, http.StatusText(http.StatusUnauthorized)+\"\\n\", w.Body.String())\n}\n\nfunc TestPublishInvalidAlgJWT(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, nil)\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyNoneSignedJWT())\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n\tassert.Equal(t, http.StatusText(http.StatusUnauthorized)+\"\\n\", w.Body.String())\n}\n\nfunc TestPublishBadContentType(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, nil)\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"*\"}))\n\treq.Header.Add(\"Content-Type\", \"text/plain; boundary=\")\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n}\n\nfunc TestPublishNoTopic(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, nil)\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"*\"}))\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n\tassert.Equal(t, \"Missing \\\"topic\\\" parameter\\n\", w.Body.String())\n}\n\nfunc TestPublishInvalidRetry(t *testing.T) {\n\thub := createDummy()\n\n\tform := url.Values{}\n\tform.Add(\"topic\", \"http://example.com/books/1\")\n\tform.Add(\"data\", \"foo\")\n\tform.Add(\"retry\", \"invalid\")\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, strings.NewReader(form.Encode()))\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"*\"}))\n\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n\tassert.Equal(t, \"Invalid \\\"retry\\\" parameter\\n\", w.Body.String())\n}\n\nfunc TestPublishNotAuthorizedTopicSelector(t *testing.T) {\n\thub := createDummy()\n\n\tform := url.Values{}\n\tform.Add(\"topic\", \"http://example.com/books/1\")\n\tform.Add(\"data\", \"foo\")\n\tform.Add(\"private\", \"on\")\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, strings.NewReader(form.Encode()))\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"foo\"}))\n\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n}\n\nfunc TestPublishEmptyTopicSelector(t *testing.T) {\n\thub := createDummy()\n\n\tform := url.Values{}\n\tform.Add(\"topic\", \"http://example.com/books/1\")\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, strings.NewReader(form.Encode()))\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{}))\n\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n}\n\nfunc TestPublishLegacyAuthorization(t *testing.T) {\n\thub := createDummy(WithProtocolVersionCompatibility(7))\n\n\tform := url.Values{}\n\tform.Add(\"topic\", \"http://example.com/books/1\")\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, strings.NewReader(form.Encode()))\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{}))\n\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n}\n\nfunc TestPublishOK(t *testing.T) {\n\thub := createDummy()\n\n\ttopics := []string{\"http://example.com/books/1\"}\n\ts := NewLocalSubscriber(\"\", zap.NewNop(), &TopicSelectorStore{})\n\ts.SetTopics(topics, topics)\n\ts.Claims = &claims{Mercure: mercureClaim{Subscribe: topics}}\n\n\trequire.NoError(t, hub.transport.AddSubscriber(s))\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func(w *sync.WaitGroup) {\n\t\tdefer w.Done()\n\t\tu, ok := <-s.Receive()\n\t\tassert.True(t, ok)\n\t\tassert.NotNil(t, u)\n\t\tassert.Equal(t, \"id\", u.ID)\n\t\tassert.Equal(t, s.SubscribedTopics, u.Topics)\n\t\tassert.Equal(t, \"Hello!\", u.Data)\n\t\tassert.True(t, u.Private)\n\t}(&wg)\n\n\tform := url.Values{}\n\tform.Add(\"id\", \"id\")\n\tform.Add(\"topic\", \"http://example.com/books/1\")\n\tform.Add(\"data\", \"Hello!\")\n\tform.Add(\"private\", \"on\")\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, strings.NewReader(form.Encode()))\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, s.SubscribedTopics))\n\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\tbody, _ := io.ReadAll(resp.Body)\n\n\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n\tassert.Equal(t, \"id\", string(body))\n\n\twg.Wait()\n}\n\nfunc TestPublishNoData(t *testing.T) {\n\thub := createDummy()\n\n\tform := url.Values{}\n\tform.Add(\"topic\", \"http://example.com/books/1\")\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, strings.NewReader(form.Encode()))\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"*\"}))\n\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n}\n\nfunc TestPublishGenerateUUID(t *testing.T) {\n\th := createDummy()\n\n\ts := NewLocalSubscriber(\"\", zap.NewNop(), &TopicSelectorStore{})\n\ts.SetTopics([]string{\"http://example.com/books/1\"}, s.SubscribedTopics)\n\n\trequire.NoError(t, h.transport.AddSubscriber(s))\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tu := <-s.Receive()\n\t\tassert.NotNil(t, u)\n\n\t\t_, err := uuid.FromString(strings.TrimPrefix(u.ID, \"urn:uuid:\"))\n\t\tassert.NoError(t, err)\n\t}()\n\n\tform := url.Values{}\n\tform.Add(\"topic\", \"http://example.com/books/1\")\n\tform.Add(\"data\", \"Hello!\")\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, strings.NewReader(form.Encode()))\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"*\"}))\n\n\tw := httptest.NewRecorder()\n\th.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n\n\tbodyBytes, _ := io.ReadAll(resp.Body)\n\tbody := string(bodyBytes)\n\n\t_, err := uuid.FromString(strings.TrimPrefix(body, \"urn:uuid:\"))\n\trequire.NoError(t, err)\n\n\twg.Wait()\n}\n\nfunc TestPublishWithErrorInTransport(t *testing.T) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\n\thub := createDummy()\n\thub.transport.Close()\n\n\tform := url.Values{}\n\tform.Add(\"id\", \"id\")\n\tform.Add(\"topic\", \"http://example.com/books/1\")\n\tform.Add(\"data\", \"Hello!\")\n\tform.Add(\"private\", \"on\")\n\n\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, strings.NewReader(form.Encode()))\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"foo\", \"http://example.com/books/1\"}))\n\n\tw := httptest.NewRecorder()\n\thub.PublishHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\tbody, _ := io.ReadAll(resp.Body)\n\n\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n\tassert.Equal(t, \"id\", string(body))\n}\n\nfunc FuzzPublish(f *testing.F) {\n\thub := createDummy()\n\tauthorizationHeader := bearerPrefix + createDummyAuthorizedJWT(rolePublisher, []string{\"*\"})\n\n\ttestCases := [][]interface{}{\n\t\t{\"https://localhost/foo/bar\", \"baz\", \"\", \"\", \"\", \"\", \"\"},\n\t\t{\"https://localhost/foo/baz\", \"bat\", \"id\", \"data\", \"on\", \"22\", \"mytype\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tf.Add(tc...) //nolint:govet\n\t}\n\n\tf.Fuzz(func(t *testing.T, topic1, topic2, id, data, private, retry, typ string) {\n\t\tform := url.Values{}\n\t\tform.Add(\"topic\", topic1)\n\t\tform.Add(\"topic\", topic2)\n\t\tform.Add(\"id\", id)\n\t\tform.Add(\"data\", data)\n\t\tform.Add(\"private\", private)\n\t\tform.Add(\"retry\", retry)\n\t\tform.Add(\"type\", typ)\n\n\t\treq := httptest.NewRequest(http.MethodPost, defaultHubURL, strings.NewReader(form.Encode()))\n\t\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\t\treq.Header.Add(\"Authorization\", authorizationHeader)\n\n\t\tw := httptest.NewRecorder()\n\t\thub.PublishHandler(w, req)\n\n\t\tresp := w.Result()\n\t\tdefer resp.Body.Close()\n\t\tbody, _ := io.ReadAll(resp.Body)\n\n\t\tif resp.StatusCode == http.StatusBadRequest {\n\t\t\treturn\n\t\t}\n\n\t\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n\t\tif id == \"\" {\n\t\t\tassert.NotEqual(t, \"\", string(body))\n\n\t\t\treturn\n\t\t}\n\n\t\tassert.Equal(t, id, string(body))\n\t})\n}\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 1.23828125,
          "content": "#!/usr/bin/env bash\n\n# Creates the tags for the library and the Caddy module.\n\nset -o nounset\nset -o errexit\ntrap 'echo \"Aborting due to errexit on line $LINENO. Exit code: $?\" >&2' ERR\nset -o errtrace\nset -o pipefail\nset -o xtrace\n\nif ! type \"git\" >/dev/null; then\n\techo \"The \\\"git\\\" command must be installed.\"\n\texit 1\nfi\n\nif ! type \"helm-docs\" >/dev/null; then\n\techo \"The \\\"helm-docs\\\" command (https://github.com/norwoodj/helm-docs) must be installed.\"\n\texit 1\nfi\n\nif [[ $# -ne 1 ]]; then\n\techo \"Usage: ./release.sh version\" >&2\n\texit 1\nfi\n\n# Adapted from https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nif [[ ! $1 =~ ^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\\+([0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*))?$ ]]; then\n\techo \"Invalid version number: $1\" >&2\n\texit 1\nfi\n\ngit checkout main\ngit pull\n\ncd caddy/\ngo get \"github.com/dunglas/mercure@v$1\"\ncd -\n\nsed -i '' -e \"s/^version: .*$/version: $1/\" -e \"s/^appVersion: .*$/appVersion: \\\"v$1\\\"/\" charts/mercure/Chart.yaml\nhelm-docs\n\ngit commit -S -a -m \"chore: prepare release $1\"\n\ngit tag -s -m \"Version $1\" \"v$1\"\ngit tag -s -m \"Version $1\" \"caddy/v$1\"\ngit push --follow-tags\n"
        },
        {
          "name": "server_test.go",
          "type": "blob",
          "size": 13.8359375,
          "content": "package mercure\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zapcore\"\n\t\"go.uber.org/zap/zaptest/observer\"\n)\n\nconst (\n\ttestURLscheme = \"http://\"\n\ttestURL       = testURLscheme + testAddr + defaultHubURL\n\n\ttestSecureURLScheme = \"https://\"\n\ttestSecureURL       = testSecureURLScheme + testAddr + defaultHubURL\n)\n\nfunc TestForwardedHeaders(t *testing.T) {\n\tcore, logs := observer.New(zapcore.DebugLevel)\n\th := createDummy(WithLogger(zap.New(core)))\n\th.config.Set(\"use_forwarded_headers\", true)\n\n\tgo h.Serve()\n\n\tclient := http.Client{Timeout: 100 * time.Millisecond}\n\n\t// loop until the web server is ready\n\tvar resp *http.Response\n\tfor resp == nil {\n\t\tresp, _ = client.Get(testURL) //nolint:bodyclose\n\t}\n\tdefer resp.Body.Close()\n\n\tbody := url.Values{\"topic\": {\"http://example.com/test-forwarded\"}, \"data\": {\"hello\"}}\n\treq, _ := http.NewRequest(http.MethodPost, testURL, strings.NewReader(body.Encode()))\n\treq.Header.Add(\"X-Forwarded-For\", \"192.0.2.1\")\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"*\"}))\n\n\tresp2, err := client.Do(req)\n\trequire.NoError(t, err)\n\tdefer resp2.Body.Close()\n\n\tassert.Equal(t, 1, logs.FilterField(zap.String(\"remote_addr\", \"192.0.2.1\")).Len())\n\n\th.server.Shutdown(context.Background())\n}\n\nfunc TestSecurityOptions(t *testing.T) {\n\th := createAnonymousDummy(WithSubscriptions(), WithDemo(), WithCORSOrigins([]string{\"*\"}))\n\th.config.Set(\"cert_file\", \"fixtures/tls/server.crt\")\n\th.config.Set(\"key_file\", \"fixtures/tls/server.key\")\n\th.config.Set(\"compress\", true)\n\n\tgo h.Serve()\n\n\t// This is a self-signed certificate\n\ttransport := &http.Transport{\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true}, //nolint:gosec\n\t}\n\tclient := http.Client{Transport: transport, Timeout: 100 * time.Millisecond}\n\n\t// loop until the web server is ready\n\tvar resp *http.Response\n\tfor resp == nil {\n\t\tresp, _ = client.Get(testSecureURL) //nolint:bodyclose\n\t}\n\n\tassert.Equal(t, \"default-src 'self' mercure.rocks cdn.jsdelivr.net\", resp.Header.Get(\"Content-Security-Policy\"))\n\tassert.Equal(t, \"nosniff\", resp.Header.Get(\"X-Content-Type-Options\"))\n\tassert.Equal(t, \"DENY\", resp.Header.Get(\"X-Frame-Options\"))\n\tassert.Equal(t, \"1; mode=block\", resp.Header.Get(\"X-Xss-Protection\"))\n\tresp.Body.Close()\n\n\t// Preflight request\n\treq, _ := http.NewRequest(http.MethodOptions, testSecureURL, nil)\n\treq.Header.Add(\"Origin\", \"https://example.com\")\n\treq.Header.Add(\"Access-Control-Request-Headers\", \"authorization,cache-control,last-event-id\")\n\treq.Header.Add(\"Access-Control-Request-Method\", http.MethodGet)\n\tresp2, _ := client.Do(req)\n\trequire.NotNil(t, resp2)\n\n\tassert.Equal(t, \"true\", resp2.Header.Get(\"Access-Control-Allow-Credentials\"))\n\tassert.Equal(t, \"Authorization,Cache-Control,Last-Event-Id\", resp2.Header.Get(\"Access-Control-Allow-Headers\"))\n\tassert.Equal(t, \"*\", resp2.Header.Get(\"Access-Control-Allow-Origin\"))\n\tresp2.Body.Close()\n\n\t// Subscriptions\n\treq, _ = http.NewRequest(http.MethodGet, testSecureURL+subscriptionsPath, nil)\n\tresp3, _ := client.Do(req)\n\trequire.NotNil(t, resp3)\n\tassert.Equal(t, http.StatusUnauthorized, resp3.StatusCode)\n\tresp3.Body.Close()\n\n\th.server.Shutdown(context.Background())\n}\n\nfunc TestSecurityOptionsWithCorsOrigin(t *testing.T) {\n\th := createDummy(WithSubscriptions(), WithCORSOrigins([]string{\"https://subscriber.com\"}))\n\th.config.Set(\"cert_file\", \"fixtures/tls/server.crt\")\n\th.config.Set(\"key_file\", \"fixtures/tls/server.key\")\n\th.config.Set(\"compress\", true)\n\n\tgo h.Serve()\n\n\t// This is a self-signed certificate\n\ttransport := &http.Transport{\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true}, //nolint:gosec\n\t}\n\tclient := http.Client{Transport: transport, Timeout: 100 * time.Millisecond}\n\n\t// loop until the web server is ready\n\tvar resp *http.Response\n\tfor resp == nil {\n\t\tresp, _ = client.Get(testSecureURL) //nolint:bodyclose\n\t}\n\n\tassert.Equal(t, \"default-src 'self'\", resp.Header.Get(\"Content-Security-Policy\"))\n\tassert.Equal(t, \"nosniff\", resp.Header.Get(\"X-Content-Type-Options\"))\n\tassert.Equal(t, \"DENY\", resp.Header.Get(\"X-Frame-Options\"))\n\tassert.Equal(t, \"1; mode=block\", resp.Header.Get(\"X-Xss-Protection\"))\n\tresp.Body.Close()\n\n\treq, _ := http.NewRequest(http.MethodOptions, testSecureURL, nil)\n\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(roleSubscriber, []string{}))\n\treq.Header.Add(\"Content-Type\", \"text/plain; boundary=\")\n\treq.Header.Add(\"Origin\", \"https://subscriber.com\")\n\treq.Header.Add(\"Host\", \"subscriber.com\")\n\treq.Header.Add(\"Cache-Control\", \"no-cache\")\n\treq.Header.Add(\"Pragma\", \"no-cache\")\n\treq.Header.Add(\"Access-Control-Request-Headers\", \"authorization,cache-control,last-event-id\")\n\treq.Header.Add(\"Access-Control-Request-Method\", http.MethodGet)\n\tresp2, _ := client.Do(req)\n\trequire.NotNil(t, resp2)\n\n\tassert.Equal(t, \"true\", resp2.Header.Get(\"Access-Control-Allow-Credentials\"))\n\tassert.Equal(t, \"Authorization,Cache-Control,Last-Event-Id\", resp2.Header.Get(\"Access-Control-Allow-Headers\"))\n\tassert.Equal(t, \"https://subscriber.com\", resp2.Header.Get(\"Access-Control-Allow-Origin\"))\n\tresp2.Body.Close()\n\n\th.server.Shutdown(context.Background())\n}\n\nfunc TestServe(t *testing.T) {\n\th := createAnonymousDummy()\n\n\tgo h.Serve()\n\n\t// loop until the web server is ready\n\tvar resp *http.Response\n\tclient := http.Client{Timeout: 100 * time.Millisecond}\n\tfor resp == nil {\n\t\tresp, _ = client.Get(testURLscheme + testAddr + \"/\") //nolint:bodyclose\n\t}\n\tdefer resp.Body.Close()\n\n\thpBody, _ := io.ReadAll(resp.Body)\n\tassert.Contains(t, string(hpBody), \"Mercure Hub\")\n\n\trespHealthz, err := client.Get(testURLscheme + testAddr + \"/healthz\")\n\trequire.NoError(t, err)\n\tdefer respHealthz.Body.Close()\n\thealthzBody, _ := io.ReadAll(respHealthz.Body)\n\tassert.Contains(t, string(healthzBody), \"ok\")\n\n\tvar wgConnected, wgTested sync.WaitGroup\n\twgConnected.Add(2)\n\twgTested.Add(2)\n\n\tgo func() {\n\t\tdefer wgTested.Done()\n\t\tresp, err := client.Get(testURL + \"?topic=http%3A%2F%2Fexample.com%2Ffoo%2F1\")\n\t\tassert.NoError(t, err)\n\t\twgConnected.Done()\n\n\t\tdefer resp.Body.Close()\n\t\tbody, _ := io.ReadAll(resp.Body)\n\n\t\tassert.Equal(t, []byte(\":\\nid: first\\ndata: hello\\n\\n\"), body)\n\t}()\n\n\tgo func() {\n\t\tdefer wgTested.Done()\n\t\tresp, err := client.Get(testURL + \"?topic=http%3A%2F%2Fexample.com%2Falt%2F1\")\n\t\tassert.NoError(t, err)\n\t\twgConnected.Done()\n\n\t\tdefer resp.Body.Close()\n\t\tbody, _ := io.ReadAll(resp.Body)\n\n\t\tassert.Equal(t, []byte(\":\\nid: first\\ndata: hello\\n\\n\"), body)\n\t}()\n\n\twgConnected.Wait()\n\n\tbody := url.Values{\"topic\": {\"http://example.com/foo/1\", \"http://example.com/alt/1\"}, \"data\": {\"hello\"}, \"id\": {\"first\"}}\n\treq, _ := http.NewRequest(http.MethodPost, testURL, strings.NewReader(body.Encode()))\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"*\"}))\n\n\tresp2, err := client.Do(req)\n\trequire.NoError(t, err)\n\tdefer resp2.Body.Close()\n\n\th.server.Shutdown(context.Background())\n\twgTested.Wait()\n}\n\nfunc TestClientClosesThenReconnects(t *testing.T) {\n\tl := zap.NewNop()\n\tu, err := url.Parse(\"bolt://test.db\")\n\trequire.NoError(t, err)\n\n\tbt, err := NewTransport(u, l)\n\trequire.NoError(t, err)\n\tdefer os.Remove(\"test.db\")\n\n\th := createAnonymousDummy(WithLogger(l), WithTransport(bt))\n\tgo h.Serve()\n\n\t// loop until the web server is ready\n\tvar resp *http.Response\n\tclient := http.Client{Timeout: 10 * time.Second}\n\tfor resp == nil {\n\t\tresp, _ = client.Get(testURLscheme + testAddr) //nolint:bodyclose\n\t}\n\trequire.NoError(t, resp.Body.Close())\n\n\tvar wg, subscribingWG sync.WaitGroup\n\n\tsubscribe := func(expectedBodyData string) {\n\t\tcx, cancel := context.WithCancel(context.Background())\n\t\treq, _ := http.NewRequest(http.MethodGet, testURL+\"?topic=http%3A%2F%2Fexample.com%2Ffoo%2F1\", nil)\n\t\treq = req.WithContext(cx)\n\t\tresp, err := http.DefaultClient.Do(req)\n\t\trequire.NoError(t, err)\n\n\t\tsubscribingWG.Done()\n\n\t\tvar receivedBody strings.Builder\n\t\tbuf := make([]byte, 1024)\n\t\tfor {\n\t\t\t_, err := resp.Body.Read(buf)\n\t\t\tif errors.Is(err, io.EOF) {\n\t\t\t\tpanic(\"EOF\")\n\t\t\t}\n\n\t\t\treceivedBody.Write(buf)\n\t\t\tif strings.Contains(receivedBody.String(), \"data: \"+expectedBodyData+\"\\n\") {\n\t\t\t\tcancel()\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\trequire.NoError(t, resp.Body.Close())\n\t\twg.Done()\n\t}\n\n\tpublish := func(data string) {\n\t\tsubscribingWG.Wait()\n\n\t\tbody := url.Values{\"topic\": {\"http://example.com/foo/1\"}, \"data\": {data}, \"id\": {data}}\n\t\treq, err := http.NewRequest(http.MethodPost, testURL, strings.NewReader(body.Encode()))\n\t\trequire.NoError(t, err)\n\t\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\t\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"*\"}))\n\n\t\tresp, err := client.Do(req)\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, http.StatusOK, resp.StatusCode)\n\t\trequire.NoError(t, resp.Body.Close())\n\n\t\twg.Done()\n\t}\n\n\tnbSubscribers := 10\n\tsubscribingWG.Add(nbSubscribers)\n\twg.Add(nbSubscribers + 1)\n\tfor i := 0; i < nbSubscribers; i++ {\n\t\tgo subscribe(\"first\")\n\t}\n\n\tpublish(\"first\")\n\twg.Wait()\n\n\tnbPublishers := 5\n\twg.Add(nbPublishers)\n\tfor i := 0; i < nbPublishers; i++ {\n\t\tgo publish(\"lost\")\n\t}\n\twg.Wait()\n\n\tnbSubscribers = 20\n\tnbPublishers = 10\n\tsubscribingWG.Add(nbSubscribers)\n\twg.Add(nbSubscribers + nbPublishers)\n\tfor i := 0; i < nbSubscribers; i++ {\n\t\tgo subscribe(\"second\")\n\t}\n\tfor i := 0; i < nbPublishers; i++ {\n\t\tgo publish(\"second\")\n\t}\n\twg.Wait()\n\th.server.Shutdown(context.Background())\n}\n\nfunc TestServeAcme(t *testing.T) {\n\th := createAnonymousDummy(WithAllowedHosts([]string{\"example.com\"}))\n\th.config.Set(\"acme_http01_addr\", \":8080\")\n\th.config.Set(\"acme_http01_addr\", \":8080\")\n\th.config.Set(\"acme_cert_dir\", t.TempDir())\n\n\tgo h.Serve()\n\tclient := &http.Client{\n\t\tCheckRedirect: func(_ *http.Request, _ []*http.Request) error {\n\t\t\treturn http.ErrUseLastResponse\n\t\t},\n\t}\n\n\tvar resp *http.Response\n\tfor resp == nil {\n\t\tresp, _ = client.Get(\"http://127.0.0.1:8080\") //nolint:bodyclose\n\t}\n\n\trequire.NotNil(t, resp)\n\tassert.Equal(t, 302, resp.StatusCode)\n\tresp.Body.Close()\n\n\tresp, err := client.Get(\"http://0.0.0.0:8080/.well-known/acme-challenge/does-not-exists\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, resp)\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, 403, resp.StatusCode)\n\th.server.Shutdown(context.Background())\n}\n\nfunc TestMetricsAccess(t *testing.T) {\n\tserver := newTestServer(t)\n\tdefer server.shutdown()\n\n\tresp, err := server.client.Get(testURLscheme + testMetricsAddr + metricsPath)\n\trequire.NoError(t, err)\n\tdefer resp.Body.Close()\n\n\tresp, err = server.client.Get(testURLscheme + testMetricsAddr + \"/healthz\")\n\trequire.NoError(t, err)\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, 200, resp.StatusCode)\n}\n\nfunc TestMetricsCollect(t *testing.T) {\n\tserver := newTestServer(t)\n\tdefer server.shutdown()\n\n\tserver.newSubscriber(\"http://example.com/foo/1\", true)\n\tserver.newSubscriber(\"http://example.com/alt/1\", true)\n\tserver.newSubscriber(\"http://example.com/alt/1\", true)\n\tserver.newSubscriber(\"http://example.com/alt/1\", false)\n\tserver.waitSubscribers()\n\n\tbody := url.Values{\"topic\": {\"http://example.com/foo/1\", \"http://example.com/alt/1\"}, \"data\": {\"hello\"}, \"id\": {\"first\"}}\n\tserver.publish(body)\n\n\tbody = url.Values{\"topic\": {\"http://example.com/foo/1\"}, \"data\": {\"second hello\"}, \"id\": {\"second\"}}\n\tserver.publish(body)\n\n\tserver.assertMetric(\"mercure_subscribers_connected 3\")\n\tserver.assertMetric(\"mercure_subscribers_total 4\")\n\tserver.assertMetric(\"mercure_updates_total 2\")\n}\n\nfunc TestMetricsVersionIsAccessible(t *testing.T) {\n\tserver := newTestServer(t)\n\tdefer server.shutdown()\n\n\tresp, err := server.client.Get(testURLscheme + testMetricsAddr + metricsPath)\n\trequire.NoError(t, err)\n\tdefer resp.Body.Close()\n\n\tb, err := io.ReadAll(resp.Body)\n\trequire.NoError(t, err)\n\n\tpattern := \"mercure_version_info{architecture=\\\".+\\\",built_at=\\\".*\\\",commit=\\\".*\\\",go_version=\\\".+\\\",os=\\\".+\\\",version=\\\"dev\\\"} 1\"\n\tassert.Regexp(t, pattern, string(b))\n\tserver.assertMetric(\"mercure_version_info\")\n}\n\ntype testServer struct {\n\th           *Hub\n\tclient      http.Client\n\tt           *testing.T\n\twgShutdown  *sync.WaitGroup\n\twgConnected sync.WaitGroup\n\twgTested    sync.WaitGroup\n}\n\nfunc newTestServer(t *testing.T) testServer {\n\tt.Helper()\n\n\tm := NewPrometheusMetrics(nil)\n\th := createAnonymousDummy(WithMetrics(m))\n\n\tgo h.Serve()\n\n\t// loop until the web server is ready\n\tvar resp *http.Response\n\tclient := http.Client{Timeout: 100 * time.Millisecond}\n\tfor resp == nil {\n\t\tresp, _ = client.Get(testURLscheme + testAddr + \"/\") //nolint:bodyclose\n\t}\n\tdefer resp.Body.Close()\n\n\tvar wgShutdown sync.WaitGroup\n\twgShutdown.Add(1)\n\n\treturn testServer{\n\t\th,\n\t\tclient,\n\t\tt,\n\t\t&wgShutdown,\n\t\tsync.WaitGroup{},\n\t\tsync.WaitGroup{},\n\t}\n}\n\nfunc (s *testServer) shutdown() {\n\ts.h.server.Shutdown(context.Background())\n\ts.h.metricsServer.Shutdown(context.Background())\n\ts.wgShutdown.Done()\n\ts.wgTested.Wait()\n}\n\nfunc (s *testServer) newSubscriber(topic string, keepAlive bool) {\n\ts.wgConnected.Add(1)\n\ts.wgTested.Add(1)\n\n\tgo func() {\n\t\tdefer s.wgTested.Done()\n\t\tresp, err := s.client.Get(testURL + \"?topic=\" + url.QueryEscape(topic))\n\t\trequire.NoError(s.t, err)\n\t\tdefer resp.Body.Close()\n\t\ts.wgConnected.Done()\n\n\t\tif keepAlive {\n\t\t\ts.wgShutdown.Wait()\n\t\t}\n\t}()\n}\n\nfunc (s *testServer) publish(body url.Values) {\n\treq, _ := http.NewRequest(http.MethodPost, testURL, strings.NewReader(body.Encode()))\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(rolePublisher, []string{\"*\"}))\n\n\tresp, err := s.client.Do(req)\n\trequire.NoError(s.t, err)\n\tdefer resp.Body.Close()\n}\n\nfunc (s *testServer) waitSubscribers() {\n\ts.wgConnected.Wait()\n}\n\nfunc (s *testServer) assertMetric(metric string) {\n\tresp, err := s.client.Get(testURLscheme + testMetricsAddr + metricsPath)\n\trequire.NoError(s.t, err)\n\tdefer resp.Body.Close()\n\n\tb, err := io.ReadAll(resp.Body)\n\trequire.NoError(s.t, err)\n\n\tassert.Contains(s.t, string(b), metric)\n}\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "subscribe.go",
          "type": "blob",
          "size": 9.4833984375,
          "content": "package mercure\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"go.uber.org/zap\"\n)\n\ntype responseController struct {\n\thttp.ResponseController\n\trw http.ResponseWriter\n\t// disconnectionTime is the JWT expiration date minus hub.dispatchTimeout, or time.Now() plus hub.writeTimeout minus hub.dispatchTimeout\n\tdisconnectionTime time.Time\n\t// writeDeadline is the JWT expiration date or time.Now() + hub.writeTimeout\n\twriteDeadline time.Time\n\thub           *Hub\n\tsubscriber    *LocalSubscriber\n}\n\nfunc (rc *responseController) setDispatchWriteDeadline() bool {\n\tif rc.hub.dispatchTimeout == 0 {\n\t\treturn true\n\t}\n\n\tdeadline := time.Now().Add(rc.hub.dispatchTimeout)\n\tif deadline.After(rc.writeDeadline) {\n\t\treturn true\n\t}\n\n\tif err := rc.SetWriteDeadline(deadline); err != nil {\n\t\tif c := rc.hub.logger.Check(zap.ErrorLevel, \"Unable to set dispatch write deadline\"); c != nil {\n\t\t\tc.Write(zap.Object(\"subscriber\", rc.subscriber), zap.Error(err))\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunc (rc *responseController) setDefaultWriteDeadline() bool {\n\tif err := rc.SetWriteDeadline(rc.writeDeadline); err != nil {\n\t\tif errors.Is(err, http.ErrNotSupported) {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tif c := rc.hub.logger.Check(zap.InfoLevel, \"Error while setting default write deadline\"); c != nil {\n\t\t\tc.Write(zap.Object(\"subscriber\", rc.subscriber), zap.Error(err))\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunc (rc *responseController) flush() bool {\n\tif err := rc.Flush(); err != nil {\n\t\tif errors.Is(err, http.ErrNotSupported) {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tif c := rc.hub.logger.Check(zap.InfoLevel, \"Unable to flush\"); c != nil {\n\t\t\tc.Write(zap.Object(\"subscriber\", rc.subscriber), zap.Error(err))\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunc (h *Hub) newResponseController(w http.ResponseWriter, s *LocalSubscriber) *responseController {\n\twd := h.getWriteDeadline(s)\n\n\treturn &responseController{*http.NewResponseController(w), w, wd.Add(-h.dispatchTimeout), wd, h, s} // nolint:bodyclose\n}\n\nfunc (h *Hub) getWriteDeadline(s *LocalSubscriber) (deadline time.Time) {\n\tif h.writeTimeout != 0 {\n\t\tdeadline = time.Now().Add(h.writeTimeout)\n\t}\n\n\tif s.Claims != nil && s.Claims.ExpiresAt != nil && (deadline == time.Time{} || s.Claims.ExpiresAt.Time.Before(deadline)) {\n\t\tdeadline = s.Claims.ExpiresAt.Time\n\t}\n\n\treturn\n}\n\n// SubscribeHandler creates a keep alive connection and sends the events to the subscribers.\n//\n//nolint:funlen,gocognit\nfunc (h *Hub) SubscribeHandler(w http.ResponseWriter, r *http.Request) {\n\ts, rc := h.registerSubscriber(w, r)\n\tif s == nil {\n\t\treturn\n\t}\n\tdefer h.shutdown(s)\n\n\trc.setDefaultWriteDeadline()\n\n\tvar (\n\t\theartbeatTimer      *time.Timer\n\t\theartbeatTimerC     <-chan time.Time\n\t\tdisconnectionTimerC <-chan time.Time\n\t)\n\n\tif h.heartbeat != 0 {\n\t\theartbeatTimer = time.NewTimer(h.heartbeat)\n\t\tdefer heartbeatTimer.Stop()\n\t\theartbeatTimerC = heartbeatTimer.C\n\t}\n\tif h.writeTimeout != 0 {\n\t\tdisconnectionTimer := time.NewTimer(time.Until(rc.disconnectionTime))\n\t\tdefer disconnectionTimer.Stop()\n\t\tdisconnectionTimerC = disconnectionTimer.C\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase <-r.Context().Done():\n\t\t\tif c := h.logger.Check(zap.DebugLevel, \"Connection closed by the client\"); c != nil {\n\t\t\t\tc.Write(zap.Object(\"subscriber\", s))\n\t\t\t}\n\n\t\t\treturn\n\t\tcase <-heartbeatTimerC:\n\t\t\t// Send an SSE comment as a heartbeat, to prevent issues with some proxies and old browsers\n\t\t\tif !h.write(rc, \":\\n\") {\n\t\t\t\treturn\n\t\t\t}\n\t\t\theartbeatTimer.Reset(h.heartbeat)\n\t\tcase <-disconnectionTimerC:\n\t\t\t// Cleanly close the HTTP connection before the write deadline to prevent client-side errors\n\t\t\treturn\n\t\tcase update, ok := <-s.Receive():\n\t\t\tif !ok || !h.write(rc, newSerializedUpdate(update).event) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif heartbeatTimer != nil {\n\t\t\t\tif !heartbeatTimer.Stop() {\n\t\t\t\t\t<-heartbeatTimer.C\n\t\t\t\t}\n\t\t\t\theartbeatTimer.Reset(h.heartbeat)\n\t\t\t}\n\t\t\tif c := h.logger.Check(zap.DebugLevel, \"Update sent\"); c != nil {\n\t\t\t\tc.Write(zap.Object(\"subscriber\", s), zap.Object(\"update\", update))\n\t\t\t}\n\t\t}\n\t}\n}\n\n// registerSubscriber initializes the connection.\nfunc (h *Hub) registerSubscriber(w http.ResponseWriter, r *http.Request) (*LocalSubscriber, *responseController) {\n\ts := NewLocalSubscriber(retrieveLastEventID(r, h.opt, h.logger), h.logger, h.topicSelectorStore)\n\ts.RemoteAddr = r.RemoteAddr\n\tvar privateTopics []string\n\tvar claims *claims\n\n\tif h.subscriberJWTKeyFunc != nil {\n\t\tvar err error\n\t\tclaims, err = authorize(r, h.subscriberJWTKeyFunc, nil, h.cookieName)\n\t\tif claims != nil {\n\t\t\ts.Claims = claims\n\t\t\tprivateTopics = claims.Mercure.Subscribe\n\t\t}\n\t\tif err != nil || (claims == nil && !h.anonymous) {\n\t\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\t\t\tif c := h.logger.Check(zap.DebugLevel, \"Subscriber unauthorized\"); c != nil {\n\t\t\t\tc.Write(zap.Object(\"subscriber\", s), zap.Error(err))\n\t\t\t}\n\n\t\t\treturn nil, nil\n\t\t}\n\t}\n\n\ttopics := r.URL.Query()[\"topic\"]\n\tif len(topics) == 0 {\n\t\thttp.Error(w, `Missing \"topic\" parameter.`, http.StatusBadRequest)\n\n\t\treturn nil, nil\n\t}\n\ts.SetTopics(topics, privateTopics)\n\n\th.dispatchSubscriptionUpdate(s, true)\n\tif err := h.transport.AddSubscriber(s); err != nil {\n\t\thttp.Error(w, http.StatusText(http.StatusServiceUnavailable), http.StatusServiceUnavailable)\n\t\th.dispatchSubscriptionUpdate(s, false)\n\t\tif c := h.logger.Check(zap.ErrorLevel, \"Unable to add subscriber\"); c != nil {\n\t\t\tc.Write(zap.Object(\"subscriber\", s), zap.Error(err))\n\t\t}\n\n\t\treturn nil, nil\n\t}\n\n\th.sendHeaders(w, s)\n\trc := h.newResponseController(w, s)\n\trc.flush()\n\n\tif c := h.logger.Check(zap.InfoLevel, \"New subscriber\"); c != nil {\n\t\tfields := []LogField{zap.Object(\"subscriber\", s)}\n\t\tif claims != nil && h.logger.Level() == zap.DebugLevel {\n\t\t\tfields = append(fields, zap.Reflect(\"payload\", claims.Mercure.Payload))\n\t\t}\n\n\t\tc.Write(fields...)\n\t}\n\th.metrics.SubscriberConnected(s)\n\n\treturn s, rc\n}\n\n// sendHeaders sends correct HTTP headers to create a keep-alive connection.\nfunc (h *Hub) sendHeaders(w http.ResponseWriter, s *LocalSubscriber) {\n\t// Keep alive, useful only for HTTP 1 clients https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Keep-Alive\n\tw.Header().Set(\"Connection\", \"keep-alive\")\n\n\t// Server-sent events https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Sending_events_from_the_server\n\tw.Header().Set(\"Content-Type\", \"text/event-stream\")\n\n\t// Disable cache, even for old browsers and proxies\n\tw.Header().Set(\"Cache-Control\", \"private, no-cache, no-store, must-revalidate, max-age=0\")\n\tw.Header().Set(\"Pragma\", \"no-cache\")\n\tw.Header().Set(\"Expire\", \"0\")\n\n\t// NGINX support https://www.nginx.com/resources/wiki/start/topics/examples/x-accel/#x-accel-buffering\n\tw.Header().Set(\"X-Accel-Buffering\", \"no\")\n\n\tif s.RequestLastEventID != \"\" {\n\t\tw.Header().Set(\"Last-Event-ID\", <-s.responseLastEventID)\n\t}\n\n\t// Write a comment in the body\n\t// Go currently doesn't provide a better way to flush the headers\n\tif _, err := w.Write([]byte{':', '\\n'}); err != nil {\n\t\tif c := h.logger.Check(zap.WarnLevel, \"Failed to write comment\"); c != nil {\n\t\t\tc.Write(zap.Object(\"subscriber\", s), zap.Error(err))\n\t\t}\n\t}\n}\n\n// retrieveLastEventID extracts the Last-Event-ID from the corresponding HTTP header with a fallback on the query parameter.\nfunc retrieveLastEventID(r *http.Request, opt *opt, logger Logger) string {\n\tif id := r.Header.Get(\"Last-Event-ID\"); id != \"\" {\n\t\treturn id\n\t}\n\n\tquery := r.URL.Query()\n\tif id := query.Get(\"lastEventID\"); id != \"\" {\n\t\treturn id\n\t}\n\n\tif legacyEventIDValues, present := query[\"Last-Event-ID\"]; present {\n\t\tif opt.isBackwardCompatiblyEnabledWith(7) {\n\t\t\tlogger.Info(\"Deprecated: the 'Last-Event-ID' query parameter is deprecated since the version 8 of the protocol, use 'lastEventID' instead.\")\n\n\t\t\tif len(legacyEventIDValues) != 0 {\n\t\t\t\treturn legacyEventIDValues[0]\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.Info(\"Unsupported: the 'Last-Event-ID' query parameter is not supported anymore, use 'lastEventID' instead or enable backward compatibility with version 7 of the protocol.\")\n\t\t}\n\t}\n\n\treturn \"\"\n}\n\n// Write sends the given string to the client.\n// It returns false if the subscriber has been disconnected (e.g. timeout).\nfunc (h *Hub) write(rc *responseController, data string) bool {\n\tif !rc.setDispatchWriteDeadline() {\n\t\treturn false\n\t}\n\n\tif _, err := rc.rw.Write([]byte(data)); err != nil {\n\t\tif c := h.logger.Check(zap.DebugLevel, \"Error writing to client\"); c != nil {\n\t\t\tc.Write(zap.Object(\"subscriber\", rc.subscriber), zap.Error(err))\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn rc.flush() && rc.setDefaultWriteDeadline()\n}\n\nfunc (h *Hub) shutdown(s *LocalSubscriber) {\n\t// Notify that the client is closing the connection\n\ts.Disconnect()\n\tif err := h.transport.RemoveSubscriber(s); err != nil {\n\t\tif c := h.logger.Check(zap.WarnLevel, \"Failed to remove subscriber on shutdown\"); c != nil {\n\t\t\tc.Write(zap.Object(\"subscriber\", s), zap.Error(err))\n\t\t}\n\t}\n\n\th.dispatchSubscriptionUpdate(s, false)\n\tif c := h.logger.Check(zap.InfoLevel, \"Subscriber disconnected\"); c != nil {\n\t\tc.Write(zap.Object(\"subscriber\", s))\n\t}\n\th.metrics.SubscriberDisconnected(s)\n}\n\nfunc (h *Hub) dispatchSubscriptionUpdate(s *LocalSubscriber, active bool) {\n\tif !h.subscriptions {\n\t\treturn\n\t}\n\n\tfor _, subscription := range s.getSubscriptions(\"\", jsonldContext, active) {\n\t\tj, err := json.MarshalIndent(subscription, \"\", \"  \")\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tu := &Update{\n\t\t\tTopics:  []string{subscription.ID},\n\t\t\tPrivate: true,\n\t\t\tDebug:   h.debug,\n\t\t\tEvent:   Event{Data: string(j)},\n\t\t}\n\t\tif err := h.transport.Dispatch(u); err != nil {\n\t\t\tif c := h.logger.Check(zap.WarnLevel, \"Failed to dispatch update\"); c != nil {\n\t\t\t\tc.Write(zap.Object(\"subscriber\", s), zap.Object(\"update\", u), zap.Error(err))\n\t\t\t}\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "subscribe_test.go",
          "type": "blob",
          "size": 24.4814453125,
          "content": "package mercure\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"os\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zapcore\"\n\t\"go.uber.org/zap/zaptest/observer\"\n)\n\ntype responseWriterMock struct{}\n\nfunc (m *responseWriterMock) Header() http.Header {\n\treturn http.Header{}\n}\n\nfunc (m *responseWriterMock) Write([]byte) (int, error) {\n\treturn 0, nil\n}\n\nfunc (m *responseWriterMock) WriteHeader(_ int) {\n}\n\ntype responseTester struct {\n\theader             http.Header\n\tbody               string\n\texpectedStatusCode int\n\texpectedBody       string\n\tcancel             context.CancelFunc\n\tt                  *testing.T\n}\n\nfunc (rt *responseTester) Header() http.Header {\n\tif rt.header == nil {\n\t\treturn http.Header{}\n\t}\n\n\treturn rt.header\n}\n\nfunc (rt *responseTester) Write(buf []byte) (int, error) {\n\trt.body += string(buf)\n\n\tif rt.body == rt.expectedBody {\n\t\trt.cancel()\n\t} else if !strings.HasPrefix(rt.expectedBody, rt.body) {\n\t\tdefer rt.cancel()\n\n\t\tmess := fmt.Sprintf(`Received body \"%s\" doesn't match expected body \"%s\"`, rt.body, rt.expectedBody)\n\t\tif rt.t == nil {\n\t\t\tpanic(mess)\n\t\t}\n\t\trt.t.Error(mess)\n\t}\n\n\treturn len(buf), nil\n}\n\nfunc (rt *responseTester) WriteHeader(statusCode int) {\n\tif rt.t != nil {\n\t\tassert.Equal(rt.t, rt.expectedStatusCode, statusCode)\n\t}\n}\n\nfunc (rt *responseTester) Flush() {\n}\n\nfunc (rt *responseTester) SetWriteDeadline(_ time.Time) error {\n\treturn nil\n}\n\ntype subscribeRecorder struct {\n\t*httptest.ResponseRecorder\n\twriteDeadline time.Time\n}\n\nfunc newSubscribeRecorder() *subscribeRecorder {\n\treturn &subscribeRecorder{ResponseRecorder: httptest.NewRecorder()}\n}\n\nfunc (r *subscribeRecorder) SetWriteDeadline(deadline time.Time) error {\n\tif deadline.After(r.writeDeadline) {\n\t\tr.writeDeadline = deadline\n\t}\n\n\treturn nil\n}\n\nfunc (r *subscribeRecorder) Write(buf []byte) (int, error) {\n\tif time.Now().After(r.writeDeadline) {\n\t\treturn 0, os.ErrDeadlineExceeded\n\t}\n\n\treturn r.ResponseRecorder.Write(buf)\n}\n\nfunc (r *subscribeRecorder) WriteString(str string) (int, error) {\n\tif time.Now().After(r.writeDeadline) {\n\t\treturn 0, os.ErrDeadlineExceeded\n\t}\n\n\treturn r.ResponseRecorder.WriteString(str)\n}\n\nfunc (r *subscribeRecorder) FlushError() error {\n\tif time.Now().After(r.writeDeadline) {\n\t\treturn os.ErrDeadlineExceeded\n\t}\n\n\tr.ResponseRecorder.Flush()\n\n\treturn nil\n}\n\nfunc TestSubscribeNotAFlusher(t *testing.T) {\n\thub := createAnonymousDummy()\n\n\tgo func() {\n\t\ts := hub.transport.(*LocalTransport)\n\t\tvar ready bool\n\n\t\tfor !ready {\n\t\t\ts.RLock()\n\t\t\tready = s.subscribers.Len() != 0\n\t\t\ts.RUnlock()\n\t\t}\n\n\t\thub.transport.Dispatch(&Update{\n\t\t\tTopics: []string{\"http://example.com/foo\"},\n\t\t\tEvent:  Event{Data: \"Hello World\"},\n\t\t})\n\t}()\n\n\tassert.Panics(t, func() {\n\t\thub.SubscribeHandler(\n\t\t\t&responseWriterMock{},\n\t\t\thttptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foo\", nil),\n\t\t)\n\t})\n}\n\nfunc TestSubscribeNoCookie(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL, nil)\n\tw := httptest.NewRecorder()\n\n\thub.SubscribeHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n\tassert.Equal(t, http.StatusText(http.StatusUnauthorized)+\"\\n\", w.Body.String())\n}\n\nfunc TestSubscribeInvalidJWT(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL, nil)\n\tw := httptest.NewRecorder()\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: \"invalid\"})\n\n\thub.SubscribeHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n\tassert.Equal(t, http.StatusText(http.StatusUnauthorized)+\"\\n\", w.Body.String())\n}\n\nfunc TestSubscribeUnauthorizedJWT(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL, nil)\n\tw := httptest.NewRecorder()\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyUnauthorizedJWT()})\n\treq.Header = http.Header{\"Cookie\": []string{w.Header().Get(\"Set-Cookie\")}}\n\n\thub.SubscribeHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n\tassert.Equal(t, http.StatusText(http.StatusUnauthorized)+\"\\n\", w.Body.String())\n}\n\nfunc TestSubscribeInvalidAlgJWT(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL, nil)\n\tw := httptest.NewRecorder()\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyNoneSignedJWT()})\n\n\thub.SubscribeHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n\tassert.Equal(t, http.StatusText(http.StatusUnauthorized)+\"\\n\", w.Body.String())\n}\n\nfunc TestSubscribeNoTopic(t *testing.T) {\n\thub := createAnonymousDummy()\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL, nil)\n\tw := httptest.NewRecorder()\n\thub.SubscribeHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n\tassert.Equal(t, \"Missing \\\"topic\\\" parameter.\\n\", w.Body.String())\n}\n\nvar errFailedToAddSubscriber = errors.New(\"failed to add a subscriber\")\n\ntype addSubscriberErrorTransport struct{}\n\nfunc (*addSubscriberErrorTransport) Dispatch(*Update) error {\n\treturn nil\n}\n\nfunc (*addSubscriberErrorTransport) AddSubscriber(*LocalSubscriber) error {\n\treturn errFailedToAddSubscriber\n}\n\nfunc (*addSubscriberErrorTransport) RemoveSubscriber(*LocalSubscriber) error {\n\treturn nil\n}\n\nfunc (*addSubscriberErrorTransport) GetSubscribers() (string, []*LocalSubscriber, error) {\n\treturn \"\", []*LocalSubscriber{}, nil\n}\n\nfunc (*addSubscriberErrorTransport) Close() error {\n\treturn nil\n}\n\nfunc TestSubscribeAddSubscriberError(t *testing.T) {\n\thub := createAnonymousDummy(WithTransport(&addSubscriberErrorTransport{}))\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=foo\", nil)\n\tw := httptest.NewRecorder()\n\n\thub.SubscribeHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, http.StatusServiceUnavailable, resp.StatusCode)\n\tassert.Equal(t, http.StatusText(http.StatusServiceUnavailable)+\"\\n\", w.Body.String())\n}\n\nfunc testSubscribe(h interface{ Helper() }, numberOfSubscribers int) {\n\th.Helper()\n\n\thub := createAnonymousDummy()\n\n\tgo func() {\n\t\ts := hub.transport.(*LocalTransport)\n\t\tvar ready bool\n\n\t\tfor !ready {\n\t\t\ts.RLock()\n\t\t\tready = s.subscribers.Len() == numberOfSubscribers\n\t\t\ts.RUnlock()\n\t\t}\n\n\t\thub.transport.Dispatch(&Update{\n\t\t\tTopics: []string{\"http://example.com/not-subscribed\"},\n\t\t\tEvent:  Event{Data: \"Hello World\", ID: \"a\"},\n\t\t})\n\t\thub.transport.Dispatch(&Update{\n\t\t\tTopics: []string{\"http://example.com/books/1\"},\n\t\t\tEvent:  Event{Data: \"Hello World\", ID: \"b\"},\n\t\t})\n\t\thub.transport.Dispatch(&Update{\n\t\t\tTopics: []string{\"http://example.com/reviews/22\"},\n\t\t\tEvent:  Event{Data: \"Great\", ID: \"c\"},\n\t\t})\n\t\thub.transport.Dispatch(&Update{\n\t\t\tTopics: []string{\"http://example.com/hub?topic=faulty{iri\"},\n\t\t\tEvent:  Event{Data: \"Faulty IRI\", ID: \"d\"},\n\t\t})\n\t\thub.transport.Dispatch(&Update{\n\t\t\tTopics: []string{\"string\"},\n\t\t\tEvent:  Event{Data: \"string\", ID: \"e\"},\n\t\t})\n\t}()\n\n\tt, _ := h.(*testing.T)\n\tvar wg sync.WaitGroup\n\twg.Add(numberOfSubscribers)\n\tfor i := 0; i < numberOfSubscribers; i++ {\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tctx, cancel := context.WithCancel(context.Background())\n\t\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/books/1&topic=string&topic=http://example.com/reviews/{id}&topic=http://example.com/hub?topic=faulty{iri\", nil).WithContext(ctx)\n\n\t\t\tw := &responseTester{\n\t\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\t\texpectedBody:       \":\\nid: b\\ndata: Hello World\\n\\nid: c\\ndata: Great\\n\\nid: d\\ndata: Faulty IRI\\n\\nid: e\\ndata: string\\n\\n\",\n\t\t\t\tt:                  t,\n\t\t\t\tcancel:             cancel,\n\t\t\t}\n\t\t\thub.SubscribeHandler(w, req)\n\t\t}()\n\t}\n\n\twg.Wait()\n}\n\nfunc TestSubscribe(t *testing.T) {\n\ttestSubscribe(t, 3)\n}\n\nfunc testSubscribeLogs(t *testing.T, hub *Hub, payload interface{}) {\n\tt.Helper()\n\n\tctx, cancel := context.WithCancel(context.Background())\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/reviews/{id}\", nil).WithContext(ctx)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWTWithPayload(roleSubscriber, []string{\"http://example.com/reviews/22\"}, payload)})\n\n\tw := &responseTester{\n\t\texpectedStatusCode: http.StatusOK,\n\t\texpectedBody:       \":\\n\",\n\t\tt:                  t,\n\t\tcancel:             cancel,\n\t}\n\n\thub.SubscribeHandler(w, req)\n}\n\nfunc TestSubscribeWithLogLevelDebug(t *testing.T) {\n\tcore, logs := observer.New(zapcore.DebugLevel)\n\tpayload := map[string]interface{}{\n\t\t\"bar\": \"baz\",\n\t\t\"foo\": \"bar\",\n\t}\n\n\ttestSubscribeLogs(t, createDummy(\n\t\tWithLogger(zap.New(core)),\n\t), payload)\n\n\tassert.Equal(t, 1, logs.FilterMessage(\"New subscriber\").FilterField(\n\t\tzap.Reflect(\"payload\", payload)).Len(),\n\t)\n}\n\nfunc TestSubscribeLogLevelInfo(t *testing.T) {\n\tcore, logs := observer.New(zapcore.InfoLevel)\n\tpayload := map[string]interface{}{\n\t\t\"bar\": \"baz\",\n\t\t\"foo\": \"bar\",\n\t}\n\ttestSubscribeLogs(t, createDummy(\n\t\tWithLogger(zap.New(core)),\n\t), payload)\n\n\tassert.Equal(t, 0, logs.FilterMessage(\"New subscriber\").FilterFieldKey(\"payload\").Len())\n}\n\nfunc TestSubscribeLogAnonymousSubscriber(t *testing.T) {\n\tcore, logs := observer.New(zapcore.DebugLevel)\n\n\th := createAnonymousDummy(WithLogger(zap.New(core)))\n\n\tctx, cancel := context.WithCancel(context.Background())\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/\", nil).WithContext(ctx)\n\n\tw := &responseTester{\n\t\texpectedStatusCode: http.StatusOK,\n\t\texpectedBody:       \":\\n\",\n\t\tt:                  t,\n\t\tcancel:             cancel,\n\t}\n\n\th.SubscribeHandler(w, req)\n\n\tassert.Equal(t, 0, logs.FilterMessage(\"New subscriber\").FilterFieldKey(\"payload\").Len())\n}\n\nfunc TestUnsubscribe(t *testing.T) {\n\thub := createAnonymousDummy()\n\n\ts, _ := hub.transport.(*LocalTransport)\n\tassert.Equal(t, 0, s.subscribers.Len())\n\tctx, cancel := context.WithCancel(context.Background())\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/books/1\", nil).WithContext(ctx)\n\t\thub.SubscribeHandler(newSubscribeRecorder(), req)\n\t\tassert.Equal(t, 0, s.subscribers.Len())\n\t\ts.subscribers.Walk(0, func(s *LocalSubscriber) bool {\n\t\t\t_, ok := <-s.out\n\t\t\tassert.False(t, ok)\n\n\t\t\treturn true\n\t\t})\n\t}()\n\n\tfor {\n\t\ts.RLock()\n\t\tnotEmpty := s.subscribers.Len() != 0\n\t\ts.RUnlock()\n\t\tif notEmpty {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tcancel()\n\twg.Wait()\n}\n\nfunc TestSubscribePrivate(t *testing.T) {\n\thub := createDummy()\n\ts, _ := hub.transport.(*LocalTransport)\n\n\tgo func() {\n\t\tfor {\n\t\t\ts.RLock()\n\t\t\tempty := s.subscribers.Len() == 0\n\t\t\ts.RUnlock()\n\n\t\t\tif empty {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\thub.transport.Dispatch(&Update{\n\t\t\t\tTopics:  []string{\"http://example.com/reviews/21\"},\n\t\t\t\tEvent:   Event{Data: \"Foo\", ID: \"a\"},\n\t\t\t\tPrivate: true,\n\t\t\t})\n\t\t\thub.transport.Dispatch(&Update{\n\t\t\t\tTopics:  []string{\"http://example.com/reviews/22\"},\n\t\t\t\tEvent:   Event{Data: \"Hello World\", ID: \"b\", Type: \"test\"},\n\t\t\t\tPrivate: true,\n\t\t\t})\n\t\t\thub.transport.Dispatch(&Update{\n\t\t\t\tTopics:  []string{\"http://example.com/reviews/23\"},\n\t\t\t\tEvent:   Event{Data: \"Great\", ID: \"c\", Retry: 1},\n\t\t\t\tPrivate: true,\n\t\t\t})\n\n\t\t\treturn\n\t\t}\n\t}()\n\n\tctx, cancel := context.WithCancel(context.Background())\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/reviews/{id}\", nil).WithContext(ctx)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"http://example.com/reviews/22\", \"http://example.com/reviews/23\"})})\n\n\tw := &responseTester{\n\t\texpectedStatusCode: http.StatusOK,\n\t\texpectedBody:       \":\\nevent: test\\nid: b\\ndata: Hello World\\n\\nretry: 1\\nid: c\\ndata: Great\\n\\n\",\n\t\tt:                  t,\n\t\tcancel:             cancel,\n\t}\n\n\thub.SubscribeHandler(w, req)\n}\n\nfunc TestSubscriptionEvents(t *testing.T) {\n\thub := createDummy(WithSubscriptions())\n\n\tvar wg sync.WaitGroup\n\tctx1, cancel1 := context.WithCancel(context.Background())\n\tctx2, cancel2 := context.WithCancel(context.Background())\n\twg.Add(3)\n\tgo func() {\n\t\t// Authorized to receive connection events\n\t\tdefer wg.Done()\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=/.well-known/mercure/subscriptions/{topic}/{subscriber}\", nil).WithContext(ctx1)\n\t\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"/.well-known/mercure/subscriptions/{topic}/{subscriber}\"})})\n\t\tw := newSubscribeRecorder()\n\t\thub.SubscribeHandler(w, req)\n\n\t\tresp := w.Result()\n\t\tdefer resp.Body.Close()\n\t\tbody, _ := io.ReadAll(resp.Body)\n\n\t\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n\t\tbodyContent := string(body)\n\t\tassert.Contains(t, bodyContent, `data:   \"@context\": \"https://mercure.rocks/\",`)\n\t\tassert.Regexp(t, `(?m)^data:   \"id\": \"/\\.well-known/mercure/subscriptions/https%3A%2F%2Fexample\\.com/.*,$`, bodyContent)\n\t\tassert.Contains(t, bodyContent, `data:   \"type\": \"Subscription\",`)\n\t\tassert.Contains(t, bodyContent, `data:   \"subscriber\": \"urn:uuid:`)\n\t\tassert.Contains(t, bodyContent, `data:   \"topic\": \"https://example.com\",`)\n\t\tassert.Contains(t, bodyContent, `data:   \"active\": true,`)\n\t\tassert.Contains(t, bodyContent, `data:   \"active\": false,`)\n\t\tassert.Contains(t, bodyContent, `data:   \"payload\": {`)\n\t\tassert.Contains(t, bodyContent, `data:     \"foo\": \"bar\"`)\n\t}()\n\n\tgo func() {\n\t\t// Not authorized to receive connection events\n\t\tdefer wg.Done()\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=/.well-known/mercure/subscriptions/{topicSelector}/{subscriber}\", nil).WithContext(ctx2)\n\t\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{})})\n\t\tw := newSubscribeRecorder()\n\t\thub.SubscribeHandler(w, req)\n\n\t\tresp := w.Result()\n\t\tdefer resp.Body.Close()\n\t\tbody, _ := io.ReadAll(resp.Body)\n\n\t\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n\t\tassert.Equal(t, \"\", string(body))\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\n\t\tfor {\n\t\t\t_, s, _ := hub.transport.(TransportSubscribers).GetSubscribers()\n\t\t\tif len(s) == 2 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tctx, cancelRequest2 := context.WithCancel(context.Background())\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=https://example.com\", nil).WithContext(ctx)\n\t\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{})})\n\n\t\tw := &responseTester{\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedBody:       \":\\n\",\n\t\t\tt:                  t,\n\t\t\tcancel:             cancelRequest2,\n\t\t}\n\t\thub.SubscribeHandler(w, req)\n\t\ttime.Sleep(1 * time.Second) // TODO: find a better way to wait for the disconnection update to be dispatched\n\t\tcancel2()\n\t\tcancel1()\n\t}()\n\n\twg.Wait()\n}\n\nfunc TestSubscribeAll(t *testing.T) {\n\thub := createDummy()\n\ts, _ := hub.transport.(*LocalTransport)\n\n\tgo func() {\n\t\tfor {\n\t\t\ts.RLock()\n\t\t\tempty := s.subscribers.Len() == 0\n\t\t\ts.RUnlock()\n\n\t\t\tif empty {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\thub.transport.Dispatch(&Update{\n\t\t\t\tTopics:  []string{\"http://example.com/reviews/21\"},\n\t\t\t\tEvent:   Event{Data: \"Foo\", ID: \"a\"},\n\t\t\t\tPrivate: true,\n\t\t\t})\n\t\t\thub.transport.Dispatch(&Update{\n\t\t\t\tTopics:  []string{\"http://example.com/reviews/22\"},\n\t\t\t\tEvent:   Event{Data: \"Hello World\", ID: \"b\", Type: \"test\"},\n\t\t\t\tPrivate: true,\n\t\t\t})\n\n\t\t\treturn\n\t\t}\n\t}()\n\n\tctx, cancel := context.WithCancel(context.Background())\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/reviews/{id}\", nil).WithContext(ctx)\n\treq.Header.Add(\"Authorization\", bearerPrefix+createDummyAuthorizedJWT(roleSubscriber, []string{\"random\", \"*\"}))\n\n\tw := &responseTester{\n\t\texpectedStatusCode: http.StatusOK,\n\t\texpectedBody:       \":\\nid: a\\ndata: Foo\\n\\nevent: test\\nid: b\\ndata: Hello World\\n\\n\",\n\t\tt:                  t,\n\t\tcancel:             cancel,\n\t}\n\n\thub.SubscribeHandler(w, req)\n}\n\nfunc TestSendMissedEvents(t *testing.T) {\n\tbt := createBoltTransport(\"bolt://test.db\")\n\thub := createAnonymousDummy(WithLogger(bt.logger), WithTransport(bt), WithProtocolVersionCompatibility(7))\n\ttransport := hub.transport.(*BoltTransport)\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\ttransport.Dispatch(&Update{\n\t\tTopics: []string{\"http://example.com/foos/a\"},\n\t\tEvent: Event{\n\t\t\tID:   \"a\",\n\t\t\tData: \"d1\",\n\t\t},\n\t})\n\ttransport.Dispatch(&Update{\n\t\tTopics: []string{\"http://example.com/foos/b\"},\n\t\tEvent: Event{\n\t\t\tID:   \"b\",\n\t\t\tData: \"d2\",\n\t\t},\n\t})\n\n\tvar wg sync.WaitGroup\n\twg.Add(3)\n\n\t// Using deprecated 'Last-Event-ID' query parameter\n\tgo func() {\n\t\tdefer wg.Done()\n\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foos/{id}&Last-Event-ID=a\", nil).WithContext(ctx)\n\n\t\tw := &responseTester{\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedBody:       \":\\nid: b\\ndata: d2\\n\\n\",\n\t\t\tt:                  t,\n\t\t\tcancel:             cancel,\n\t\t}\n\n\t\thub.SubscribeHandler(w, req)\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foos/{id}&lastEventID=a\", nil).WithContext(ctx)\n\n\t\tw := &responseTester{\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedBody:       \":\\nid: b\\ndata: d2\\n\\n\",\n\t\t\tt:                  t,\n\t\t\tcancel:             cancel,\n\t\t}\n\n\t\thub.SubscribeHandler(w, req)\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foos/{id}\", nil).WithContext(ctx)\n\t\treq.Header.Add(\"Last-Event-ID\", \"a\")\n\n\t\tw := &responseTester{\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedBody:       \":\\nid: b\\ndata: d2\\n\\n\",\n\t\t\tt:                  t,\n\t\t\tcancel:             cancel,\n\t\t}\n\n\t\thub.SubscribeHandler(w, req)\n\t}()\n\n\twg.Wait()\n}\n\nfunc TestSendAllEvents(t *testing.T) {\n\tbt := createBoltTransport(\"bolt://test.db\")\n\thub := createAnonymousDummy(WithLogger(bt.logger), WithTransport(bt))\n\ttransport := hub.transport.(*BoltTransport)\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\ttransport.Dispatch(&Update{\n\t\tTopics: []string{\"http://example.com/foos/a\"},\n\t\tEvent: Event{\n\t\t\tID:   \"a\",\n\t\t\tData: \"d1\",\n\t\t},\n\t})\n\ttransport.Dispatch(&Update{\n\t\tTopics: []string{\"http://example.com/foos/b\"},\n\t\tEvent: Event{\n\t\t\tID:   \"b\",\n\t\t\tData: \"d2\",\n\t\t},\n\t})\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foos/{id}&lastEventID=\"+EarliestLastEventID, nil).WithContext(ctx)\n\n\t\tw := &responseTester{\n\t\t\theader:             http.Header{},\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedBody:       \":\\nid: a\\ndata: d1\\n\\nid: b\\ndata: d2\\n\\n\",\n\t\t\tt:                  t,\n\t\t\tcancel:             cancel,\n\t\t}\n\n\t\thub.SubscribeHandler(w, req)\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foos/{id}\", nil).WithContext(ctx)\n\t\treq.Header.Add(\"Last-Event-ID\", EarliestLastEventID)\n\n\t\tw := &responseTester{\n\t\t\theader:             http.Header{},\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedBody:       \":\\nid: a\\ndata: d1\\n\\nid: b\\ndata: d2\\n\\n\",\n\t\t\tt:                  t,\n\t\t\tcancel:             cancel,\n\t\t}\n\n\t\thub.SubscribeHandler(w, req)\n\t}()\n\n\twg.Wait()\n}\n\nfunc TestUnknownLastEventID(t *testing.T) {\n\tbt := createBoltTransport(\"bolt://test.db\")\n\thub := createAnonymousDummy(WithLogger(bt.logger), WithTransport(bt))\n\ttransport := hub.transport.(*BoltTransport)\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\ttransport.Dispatch(&Update{\n\t\tTopics: []string{\"http://example.com/foos/a\"},\n\t\tEvent: Event{\n\t\t\tID:   \"a\",\n\t\t\tData: \"d1\",\n\t\t},\n\t})\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foos/{id}&lastEventID=unknown\", nil).WithContext(ctx)\n\n\t\tw := &responseTester{\n\t\t\theader:             http.Header{},\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedBody:       \":\\nid: b\\ndata: d2\\n\\n\",\n\t\t\tt:                  t,\n\t\t\tcancel:             cancel,\n\t\t}\n\n\t\thub.SubscribeHandler(w, req)\n\t\tassert.Equal(t, \"a\", w.Header().Get(\"Last-Event-ID\"))\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foos/{id}\", nil).WithContext(ctx)\n\t\treq.Header.Add(\"Last-Event-ID\", \"unknown\")\n\n\t\tw := &responseTester{\n\t\t\theader:             http.Header{},\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedBody:       \":\\nid: b\\ndata: d2\\n\\n\",\n\t\t\tt:                  t,\n\t\t\tcancel:             cancel,\n\t\t}\n\n\t\thub.SubscribeHandler(w, req)\n\t\tassert.Equal(t, \"a\", w.Header().Get(\"Last-Event-ID\"))\n\t}()\n\n\tfor {\n\t\ttransport.RLock()\n\t\tdone := transport.subscribers.Len() == 2\n\t\ttransport.RUnlock()\n\n\t\tif done {\n\t\t\tbreak\n\t\t}\n\t}\n\n\ttransport.Dispatch(&Update{\n\t\tTopics: []string{\"http://example.com/foos/b\"},\n\t\tEvent: Event{\n\t\t\tID:   \"b\",\n\t\t\tData: \"d2\",\n\t\t},\n\t})\n\n\twg.Wait()\n}\n\nfunc TestUnknownLastEventIDEmptyHistory(t *testing.T) {\n\tbt := createBoltTransport(\"bolt://test.db\")\n\thub := createAnonymousDummy(WithLogger(bt.logger), WithTransport(bt))\n\ttransport := hub.transport.(*BoltTransport)\n\tdefer transport.Close()\n\tdefer os.Remove(\"test.db\")\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foos/{id}&lastEventID=unknown\", nil).WithContext(ctx)\n\n\t\tw := &responseTester{\n\t\t\theader:             http.Header{},\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedBody:       \":\\nid: b\\ndata: d2\\n\\n\",\n\t\t\tt:                  t,\n\t\t\tcancel:             cancel,\n\t\t}\n\n\t\thub.SubscribeHandler(w, req)\n\t\tassert.Equal(t, EarliestLastEventID, w.Header().Get(\"Last-Event-ID\"))\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/foos/{id}\", nil).WithContext(ctx)\n\t\treq.Header.Add(\"Last-Event-ID\", \"unknown\")\n\n\t\tw := &responseTester{\n\t\t\theader:             http.Header{},\n\t\t\texpectedStatusCode: http.StatusOK,\n\t\t\texpectedBody:       \":\\nid: b\\ndata: d2\\n\\n\",\n\t\t\tt:                  t,\n\t\t\tcancel:             cancel,\n\t\t}\n\n\t\thub.SubscribeHandler(w, req)\n\t\tassert.Equal(t, EarliestLastEventID, w.Header().Get(\"Last-Event-ID\"))\n\t}()\n\n\tfor {\n\t\ttransport.RLock()\n\t\tdone := transport.subscribers.Len() == 2\n\t\ttransport.RUnlock()\n\n\t\tif done {\n\t\t\tbreak\n\t\t}\n\t}\n\n\ttransport.Dispatch(&Update{\n\t\tTopics: []string{\"http://example.com/foos/b\"},\n\t\tEvent: Event{\n\t\t\tID:   \"b\",\n\t\t\tData: \"d2\",\n\t\t},\n\t})\n\n\twg.Wait()\n}\n\nfunc TestSubscribeHeartbeat(t *testing.T) {\n\thub := createAnonymousDummy(WithHeartbeat(5 * time.Millisecond))\n\ts, _ := hub.transport.(*LocalTransport)\n\n\tgo func() {\n\t\tfor {\n\t\t\ts.RLock()\n\t\t\tempty := s.subscribers.Len() == 0\n\t\t\ts.RUnlock()\n\n\t\t\tif empty {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\thub.transport.Dispatch(&Update{\n\t\t\t\tTopics: []string{\"http://example.com/books/1\"},\n\t\t\t\tEvent:  Event{Data: \"Hello World\", ID: \"b\"},\n\t\t\t})\n\n\t\t\treturn\n\t\t}\n\t}()\n\n\tctx, cancel := context.WithCancel(context.Background())\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=http://example.com/books/1&topic=http://example.com/reviews/{id}\", nil).WithContext(ctx)\n\n\tw := &responseTester{\n\t\texpectedStatusCode: http.StatusOK,\n\t\texpectedBody:       \":\\nid: b\\ndata: Hello World\\n\\n:\\n\",\n\t\tt:                  t,\n\t\tcancel:             cancel,\n\t}\n\n\thub.SubscribeHandler(w, req)\n}\n\nfunc TestSubscribeExpires(t *testing.T) {\n\thub := createAnonymousDummy(WithWriteTimeout(0), WithDispatchTimeout(0), WithHeartbeat(500*time.Millisecond))\n\ttoken := jwt.New(jwt.SigningMethodHS256)\n\n\ttoken.Claims = &claims{\n\t\tMercure: mercureClaim{\n\t\t\tSubscribe: []string{\"*\"},\n\t\t},\n\t\tRegisteredClaims: jwt.RegisteredClaims{ExpiresAt: jwt.NewNumericDate(time.Now().Add(1 * time.Second))},\n\t}\n\n\tsignedString, err := token.SignedString([]byte(\"subscriber\"))\n\trequire.NoError(t, err)\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+\"?topic=foo\", nil)\n\treq.Header.Add(\"Authorization\", bearerPrefix+signedString)\n\n\tw := newSubscribeRecorder()\n\thub.SubscribeHandler(w, req)\n\n\tresp := w.Result()\n\tdefer resp.Body.Close()\n\n\tassert.Equal(t, 200, resp.StatusCode)\n\tassert.True(t, time.Now().After(token.Claims.(*claims).ExpiresAt.Time))\n}\n\nfunc BenchmarkSubscribe(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\ttestSubscribe(b, 1000)\n\t}\n}\n"
        },
        {
          "name": "subscriber.go",
          "type": "blob",
          "size": 3.375,
          "content": "package mercure\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"regexp\"\n\n\t\"go.uber.org/zap/zapcore\"\n)\n\n// Subscriber represents a client subscribed to a list of topics on a remote or on the current hub.\ntype Subscriber struct {\n\tID                     string\n\tEscapedID              string\n\tClaims                 *claims\n\tEscapedTopics          []string\n\tRequestLastEventID     string\n\tRemoteAddr             string\n\tSubscribedTopics       []string\n\tSubscribedTopicRegexps []*regexp.Regexp\n\tAllowedPrivateTopics   []string\n\tAllowedPrivateRegexps  []*regexp.Regexp\n\n\tlogger             Logger\n\ttopicSelectorStore *TopicSelectorStore\n}\n\nfunc NewSubscriber(logger Logger, topicSelectorStore *TopicSelectorStore) *Subscriber {\n\treturn &Subscriber{\n\t\tlogger:             logger,\n\t\ttopicSelectorStore: topicSelectorStore,\n\t}\n}\n\n// SetTopics compiles topic selector regexps.\nfunc (s *Subscriber) SetTopics(subscribedTopics, allowedPrivateTopics []string) {\n\ts.SubscribedTopics = subscribedTopics\n\ts.AllowedPrivateTopics = allowedPrivateTopics\n\ts.EscapedTopics = escapeTopics(subscribedTopics)\n}\n\nfunc escapeTopics(topics []string) []string {\n\tescapedTopics := make([]string, 0, len(topics))\n\tfor _, topic := range topics {\n\t\tescapedTopics = append(escapedTopics, url.QueryEscape(topic))\n\t}\n\n\treturn escapedTopics\n}\n\n// MatchTopics checks if the current subscriber can access to the given topic.\n//\n//nolint:gocognit\nfunc (s *Subscriber) MatchTopics(topics []string, private bool) bool {\n\tvar subscribed bool\n\tcanAccess := !private\n\n\tfor _, topic := range topics {\n\t\tif !subscribed {\n\t\t\tfor _, ts := range s.SubscribedTopics {\n\t\t\t\tif s.topicSelectorStore.match(topic, ts) {\n\t\t\t\t\tsubscribed = true\n\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !canAccess {\n\t\t\tfor _, ts := range s.AllowedPrivateTopics {\n\t\t\t\tif s.topicSelectorStore.match(topic, ts) {\n\t\t\t\t\tcanAccess = true\n\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn subscribed && canAccess\n}\n\n// Match checks if the current subscriber can receive the given update.\nfunc (s *Subscriber) Match(u *Update) bool {\n\treturn s.MatchTopics(u.Topics, u.Private)\n}\n\n// getSubscriptions return the list of subscriptions associated to this subscriber.\nfunc (s *Subscriber) getSubscriptions(topic, context string, active bool) []subscription {\n\tvar subscriptions []subscription //nolint:prealloc\n\tfor k, t := range s.SubscribedTopics {\n\t\tif topic != \"\" && (!s.MatchTopics([]string{topic}, false) || t != topic) {\n\t\t\tcontinue\n\t\t}\n\n\t\tsubscription := subscription{\n\t\t\tContext:    context,\n\t\t\tID:         \"/.well-known/mercure/subscriptions/\" + s.EscapedTopics[k] + \"/\" + s.EscapedID,\n\t\t\tType:       \"Subscription\",\n\t\t\tSubscriber: s.ID,\n\t\t\tTopic:      t,\n\t\t\tActive:     active,\n\t\t}\n\t\tif s.Claims != nil && s.Claims.Mercure.Payload != nil {\n\t\t\tsubscription.Payload = s.Claims.Mercure.Payload\n\t\t}\n\n\t\tsubscriptions = append(subscriptions, subscription)\n\t}\n\n\treturn subscriptions\n}\n\nfunc (s *Subscriber) MarshalLogObject(enc zapcore.ObjectEncoder) error {\n\tenc.AddString(\"id\", s.ID)\n\tenc.AddString(\"last_event_id\", s.RequestLastEventID)\n\tif s.RemoteAddr != \"\" {\n\t\tenc.AddString(\"remote_addr\", s.RemoteAddr)\n\t}\n\tif s.AllowedPrivateTopics != nil {\n\t\tif err := enc.AddArray(\"topic_selectors\", stringArray(s.AllowedPrivateTopics)); err != nil {\n\t\t\treturn fmt.Errorf(\"log error: %w\", err)\n\t\t}\n\t}\n\tif s.SubscribedTopics != nil {\n\t\tif err := enc.AddArray(\"topics\", stringArray(s.SubscribedTopics)); err != nil {\n\t\t\treturn fmt.Errorf(\"log error: %w\", err)\n\t\t}\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "subscriber_bench_test.go",
          "type": "blob",
          "size": 3.8212890625,
          "content": "package mercure\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"go.uber.org/zap\"\n)\n\nfunc subscribeBenchmarkHelper(b *testing.B, subBench func(b *testing.B, topics, concurrency, matchPct int, testName string)) {\n\tb.Helper()\n\n\tvar str []string\n\n\t// How many topics and topicselectors do each subscriber and update contain (same value for both)\n\ttopicOpts := []int{1, 5, 10}\n\tif opt := os.Getenv(\"SUB_TEST_TOPICS\"); len(opt) > 0 {\n\t\ttopicOpts = []int{strInt(opt)}\n\t} else {\n\t\tstr = append(str, \"topics %d\")\n\t}\n\n\t// How many concurrent subscribers\n\tconcurrencyOpts := []int{100, 1000, 5000, 20000}\n\tif opt := os.Getenv(\"SUB_TEST_CONCURRENCY\"); len(opt) > 0 {\n\t\tconcurrencyOpts = []int{strInt(opt)}\n\t} else {\n\t\tstr = append(str, \"concurrency %d\")\n\t}\n\n\t// What percentage of messages are delivered to a subscriber (ie 10 = 10% CanDispatch true)\n\tmatchPctOpts := []int{1, 10, 100}\n\tif opt := os.Getenv(\"SUB_TEST_MATCHPCT\"); len(opt) > 0 {\n\t\tmatchPctOpts = []int{strInt(opt)}\n\t} else {\n\t\tstr = append(str, \"matchpct %d\")\n\t}\n\n\tvar arg []interface{}\n\tfor _, topics := range topicOpts {\n\t\targ := arg\n\t\tif len(topicOpts) > 1 {\n\t\t\targ = append(arg, topics)\n\t\t}\n\t\tfor _, concurrency := range concurrencyOpts {\n\t\t\targ := arg\n\t\t\tif len(concurrencyOpts) > 1 {\n\t\t\t\targ = append(arg, concurrency)\n\t\t\t}\n\t\t\tfor _, matchPct := range matchPctOpts {\n\t\t\t\targ := arg\n\t\t\t\tif len(matchPctOpts) > 1 {\n\t\t\t\t\targ = append(arg, matchPct)\n\t\t\t\t}\n\t\t\t\tsubBench(b,\n\t\t\t\t\ttopics,\n\t\t\t\t\tconcurrency,\n\t\t\t\t\tmatchPct,\n\t\t\t\t\tfmt.Sprintf(strings.Join(str, \" \"), arg...),\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc BenchmarkSubscriber(b *testing.B) {\n\tsubscribeBenchmarkHelper(b, subBenchSubscriber)\n}\n\nfunc strInt(s string) int {\n\tn, err := strconv.Atoi(s)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn n\n}\n\nfunc subBenchSubscriber(b *testing.B, topics, concurrency, matchPct int, testName string) {\n\tb.Helper()\n\n\ts := NewLocalSubscriber(\"0e249241-6432-4ce1-b9b9-5d170163c253\", zap.NewNop(), &TopicSelectorStore{})\n\tts := make([]string, topics)\n\ttsMatch := make([]string, topics)\n\ttsNoMatch := make([]string, topics)\n\tfor i := 0; i < topics; i++ {\n\t\tts[i] = fmt.Sprintf(\"/%d/{%d}\", rand.Int(), rand.Int())      //nolint:gosec\n\t\ttsNoMatch[i] = fmt.Sprintf(\"/%d/%d\", rand.Int(), rand.Int()) //nolint:gosec\n\t\tif topics/2 == i {\n\t\t\t// Insert matching topic half-way through matching topic list to simulate match\n\t\t\ttsMatch[i] = strings.ReplaceAll(strings.ReplaceAll(ts[i], \"{\", \"\"), \"}\", \"\")\n\t\t} else {\n\t\t\ttsMatch[i] = tsNoMatch[i]\n\t\t}\n\t}\n\ts.SetTopics(ts, nil)\n\tdefer s.Disconnect()\n\tctx, done := context.WithCancel(context.Background())\n\tdefer done()\n\tfor i := 0; i < 1; i++ {\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-s.out:\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\tb.SetParallelism(concurrency)\n\tb.Run(testName, func(b *testing.B) {\n\t\tvar wg sync.WaitGroup\n\t\twg.Add(concurrency)\n\t\tb.RunParallel(func(pb *testing.PB) {\n\t\t\tfor i := 0; pb.Next(); i++ {\n\t\t\t\tif i%100 < matchPct {\n\t\t\t\t\ts.Dispatch(&Update{Topics: tsMatch}, i%2 == 0 /* half history, half live */)\n\t\t\t\t} else {\n\t\t\t\t\ts.Dispatch(&Update{Topics: tsNoMatch}, i%2 == 0 /* half history, half live */)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\twg.Done()\n\t})\n}\n\n/* --- test.sh ---\nThese are example commands that can be used to run subsets of this test for analysis.\nOmission of any environment variable causes the test to enumerate a few meaningful options.\n\n#!/usr/bin/sh\n\nset -e\n\nmkdir -p _dist\n\n# --- Generating a cpu call graph ---\n\nSUB_TEST_CONCURRENCY=20000 \\\nSUB_TEST_TOPICS=20 \\\nSUB_TEST_MATCHPCT=50 \\\nSUB_TEST_SKIPSELECT=false \\\nSUB_TEST_CACHE=lru \\\nSUB_TEST_SHARDS=256 \\\ngo test -bench=. -run=BenchmarkSubscriber -cpuprofile _dist/profile.20kc.20top.50pct.noskip.lru.256sh.out -benchmem\n\ngo build -o _dist/bin\n\ngo tool pprof --pdf _dist/bin _dist/profile.20kc.20top.50pct.noskip.lru.256sh.out \\\n                            > _dist/profile.20kc.20top.50pct.noskip.lru.256sh.pdf\n\n*/\n"
        },
        {
          "name": "subscriber_test.go",
          "type": "blob",
          "size": 3.044921875,
          "content": "package mercure\n\nimport (\n\t\"strconv\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.uber.org/zap\"\n)\n\nfunc TestDispatch(t *testing.T) {\n\ts := NewLocalSubscriber(\"1\", zap.NewNop(), &TopicSelectorStore{})\n\ts.SubscribedTopics = []string{\"http://example.com\"}\n\ts.SubscribedTopics = []string{\"http://example.com\"}\n\tdefer s.Disconnect()\n\n\t// Dispatch must be non-blocking\n\t// Messages coming from the history can be sent after live messages, but must be received first\n\ts.Dispatch(&Update{Topics: s.SubscribedTopics, Event: Event{ID: \"3\"}}, false)\n\ts.Dispatch(&Update{Topics: s.SubscribedTopics, Event: Event{ID: \"1\"}}, true)\n\ts.Dispatch(&Update{Topics: s.SubscribedTopics, Event: Event{ID: \"4\"}}, false)\n\ts.Dispatch(&Update{Topics: s.SubscribedTopics, Event: Event{ID: \"2\"}}, true)\n\ts.HistoryDispatched(\"\")\n\n\ts.Ready()\n\n\tfor i := 1; i <= 4; i++ {\n\t\tif u, ok := <-s.Receive(); ok && u != nil {\n\t\t\tassert.Equal(t, strconv.Itoa(i), u.ID)\n\t\t}\n\t}\n}\n\nfunc TestDisconnect(t *testing.T) {\n\ts := NewLocalSubscriber(\"\", zap.NewNop(), &TopicSelectorStore{})\n\ts.Disconnect()\n\t// can be called two times without crashing\n\ts.Disconnect()\n\n\tassert.False(t, s.Dispatch(&Update{}, false))\n}\n\nfunc TestLogSubscriber(t *testing.T) {\n\tsink, logger := newTestLogger(t)\n\tdefer sink.Reset()\n\n\ts := NewLocalSubscriber(\"123\", logger, &TopicSelectorStore{})\n\ts.RemoteAddr = \"127.0.0.1\"\n\ts.SetTopics([]string{\"https://example.com/bar\"}, []string{\"https://example.com/foo\"})\n\n\tf := zap.Object(\"subscriber\", s)\n\tlogger.Info(\"test\", f)\n\n\tlog := sink.String()\n\tassert.Contains(t, log, `\"last_event_id\":\"123\"`)\n\tassert.Contains(t, log, `\"remote_addr\":\"127.0.0.1\"`)\n\tassert.Contains(t, log, `\"topic_selectors\":[\"https://example.com/foo\"]`)\n\tassert.Contains(t, log, `\"topics\":[\"https://example.com/bar\"]`)\n}\n\nfunc TestMatchTopic(t *testing.T) {\n\ts := NewLocalSubscriber(\"\", zap.NewNop(), &TopicSelectorStore{})\n\ts.SetTopics([]string{\"https://example.com/no-match\", \"https://example.com/books/{id}\"}, []string{\"https://example.com/users/foo/{?topic}\"})\n\n\tassert.False(t, s.Match(&Update{Topics: []string{\"https://example.com/not-subscribed\"}}))\n\tassert.False(t, s.Match(&Update{Topics: []string{\"https://example.com/not-subscribed\"}, Private: true}))\n\tassert.False(t, s.Match(&Update{Topics: []string{\"https://example.com/no-match\"}, Private: true}))\n\tassert.False(t, s.Match(&Update{Topics: []string{\"https://example.com/books/1\"}, Private: true}))\n\tassert.False(t, s.Match(&Update{Topics: []string{\"https://example.com/books/1\", \"https://example.com/users/bar/?topic=https%3A%2F%2Fexample.com%2Fbooks%2F1\"}, Private: true}))\n\n\tassert.True(t, s.Match(&Update{Topics: []string{\"https://example.com/books/1\"}}))\n\tassert.True(t, s.Match(&Update{Topics: []string{\"https://example.com/books/1\", \"https://example.com/users/foo/?topic=https%3A%2F%2Fexample.com%2Fbooks%2F1\"}, Private: true}))\n}\n\nfunc TestSubscriberDoesNotBlockWhenChanIsFull(t *testing.T) {\n\ts := NewLocalSubscriber(\"\", zap.NewNop(), &TopicSelectorStore{})\n\ts.Ready()\n\n\tfor i := 0; i <= outBufferLength; i++ {\n\t\ts.Dispatch(&Update{}, false)\n\t}\n\n\tassert.Equal(t, int32(1), s.disconnected)\n}\n"
        },
        {
          "name": "subscriberlist.go",
          "type": "blob",
          "size": 2.1806640625,
          "content": "package mercure\n\nimport (\n\t\"sort\"\n\t\"strings\"\n\n\t\"github.com/kevburnsjr/skipfilter\"\n)\n\ntype SubscriberList struct {\n\tskipfilter *skipfilter.SkipFilter\n}\n\n// We choose a delimiter and an escape character which are unlikely to be used.\nconst (\n\tescape = '\\x00'\n\tdelim  = '\\x01'\n)\n\n//nolint:gochecknoglobals\nvar replacer = strings.NewReplacer(\n\tstring(escape), string([]rune{escape, escape}),\n\tstring(delim), string([]rune{escape, delim}),\n)\n\nfunc NewSubscriberList(size int) *SubscriberList {\n\treturn &SubscriberList{\n\t\tskipfilter: skipfilter.New(func(s interface{}, filter interface{}) bool {\n\t\t\treturn s.(*LocalSubscriber).MatchTopics(decode(filter.(string)))\n\t\t}, size),\n\t}\n}\n\nfunc encode(topics []string, private bool) string {\n\tsort.Strings(topics)\n\n\tparts := make([]string, len(topics)+1)\n\tif private {\n\t\tparts[0] = \"1\"\n\t} else {\n\t\tparts[0] = \"0\"\n\t}\n\n\tfor i, t := range topics {\n\t\tparts[i+1] = replacer.Replace(t)\n\t}\n\n\treturn strings.Join(parts, string(delim))\n}\n\nfunc decode(f string) (topics []string, private bool) {\n\tvar (\n\t\tprivateExtracted, inEscape bool\n\t\tbuilder                    strings.Builder\n\t)\n\n\tfor _, char := range f {\n\t\tif inEscape {\n\t\t\tbuilder.WriteRune(char)\n\t\t\tinEscape = false\n\n\t\t\tcontinue\n\t\t}\n\n\t\tswitch char {\n\t\tcase escape:\n\t\t\tinEscape = true\n\n\t\tcase delim:\n\t\t\tif !privateExtracted {\n\t\t\t\tprivate = builder.String() == \"1\"\n\t\t\t\tbuilder.Reset()\n\n\t\t\t\tprivateExtracted = true\n\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\ttopics = append(topics, builder.String())\n\t\t\tbuilder.Reset()\n\n\t\tdefault:\n\t\t\tbuilder.WriteRune(char)\n\t\t}\n\t}\n\n\ttopics = append(topics, builder.String())\n\n\treturn topics, private\n}\n\nfunc (sl *SubscriberList) MatchAny(u *Update) (res []*LocalSubscriber) {\n\tfor _, m := range sl.skipfilter.MatchAny(encode(u.Topics, u.Private)) {\n\t\tres = append(res, m.(*LocalSubscriber))\n\t}\n\n\treturn\n}\n\nfunc (sl *SubscriberList) Walk(start uint64, callback func(s *LocalSubscriber) bool) uint64 {\n\treturn sl.skipfilter.Walk(start, func(val interface{}) bool {\n\t\treturn callback(val.(*LocalSubscriber))\n\t})\n}\n\nfunc (sl *SubscriberList) Add(s *LocalSubscriber) {\n\tsl.skipfilter.Add(s)\n}\n\nfunc (sl *SubscriberList) Remove(s *LocalSubscriber) {\n\tsl.skipfilter.Remove(s)\n}\n\nfunc (sl *SubscriberList) Len() int {\n\treturn sl.skipfilter.Len()\n}\n"
        },
        {
          "name": "subscriberlist_test.go",
          "type": "blob",
          "size": 1.1767578125,
          "content": "package mercure\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.uber.org/zap\"\n)\n\nfunc TestEncode(t *testing.T) {\n\te := encode([]string{\"Foo\\x00\\x01Bar\\x00Baz\\x01\", \"\\x01bar\"}, true)\n\tassert.Equal(t, \"1\\x01\\x00\\x01bar\\x01Foo\\x00\\x00\\x00\\x01Bar\\x00\\x00Baz\\x00\\x01\", e)\n}\n\nfunc TestDecode(t *testing.T) {\n\ttopics, private := decode(\"1\\x01\\x00\\x01bar\\x01Foo\\x00\\x00\\x00\\x01Bar\\x00\\x00Baz\\x00\\x01\")\n\n\tassert.Equal(t, []string{\"\\x01bar\", \"Foo\\x00\\x01Bar\\x00Baz\\x01\"}, topics)\n\tassert.True(t, private)\n}\n\nfunc BenchmarkSubscriberList(b *testing.B) {\n\tlogger := zap.NewNop()\n\ttss := &TopicSelectorStore{}\n\n\tl := NewSubscriberList(100)\n\tfor i := 0; i < 100; i++ {\n\t\ts := NewLocalSubscriber(\"\", logger, tss)\n\t\tt := fmt.Sprintf(\"https://example.com/%d\", i%10)\n\t\ts.SetTopics([]string{\"https://example.org/foo\", t}, []string{\"https://example.net/bar\", t})\n\n\t\tl.Add(s)\n\t}\n\n\tb.ResetTimer()\n\n\tfor i := 0; i < b.N; i++ {\n\t\tassert.NotEmpty(b, l.MatchAny(&Update{Topics: []string{\"https://example.org/foo\"}}))\n\t\tassert.Empty(b, l.MatchAny(&Update{Topics: []string{\"https://example.org/baz\"}}))\n\t\tassert.NotEmpty(b, l.MatchAny(&Update{Topics: []string{\"https://example.com/8\"}, Private: false}))\n\t}\n}\n"
        },
        {
          "name": "subscription.go",
          "type": "blob",
          "size": 4.1416015625,
          "content": "package mercure\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gorilla/mux\"\n\t\"go.uber.org/zap\"\n)\n\nconst jsonldContext = \"https://mercure.rocks/\"\n\ntype subscription struct {\n\tContext     string      `json:\"@context,omitempty\"`\n\tID          string      `json:\"id\"`\n\tType        string      `json:\"type\"`\n\tSubscriber  string      `json:\"subscriber\"`\n\tTopic       string      `json:\"topic\"`\n\tActive      bool        `json:\"active\"`\n\tLastEventID string      `json:\"lastEventID,omitempty\"`\n\tPayload     interface{} `json:\"payload,omitempty\"`\n}\n\ntype subscriptionCollection struct {\n\tContext       string         `json:\"@context\"`\n\tID            string         `json:\"id\"`\n\tType          string         `json:\"type\"`\n\tLastEventID   string         `json:\"lastEventID\"`\n\tSubscriptions []subscription `json:\"subscriptions\"`\n}\n\nconst (\n\tsubscriptionsPath        = \"/subscriptions\"\n\tsubscriptionURL          = defaultHubURL + subscriptionsPath + \"/{topic}/{subscriber}\"\n\tsubscriptionsForTopicURL = defaultHubURL + subscriptionsPath + \"/{topic}\"\n\tsubscriptionsURL         = defaultHubURL + subscriptionsPath\n)\n\nfunc (h *Hub) SubscriptionsHandler(w http.ResponseWriter, r *http.Request) {\n\tcurrentURL := r.URL.RequestURI()\n\tlastEventID, subscribers, ok := h.initSubscription(currentURL, w, r)\n\tif !ok {\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusOK)\n\n\tsubscriptionCollection := subscriptionCollection{\n\t\tContext:       jsonldContext,\n\t\tID:            currentURL,\n\t\tType:          \"Subscriptions\",\n\t\tLastEventID:   lastEventID,\n\t\tSubscriptions: make([]subscription, 0),\n\t}\n\n\tvars := mux.Vars(r)\n\tt, _ := url.QueryUnescape(vars[\"topic\"])\n\tfor _, subscriber := range subscribers {\n\t\tsubscriptionCollection.Subscriptions = append(subscriptionCollection.Subscriptions, subscriber.getSubscriptions(t, \"\", true)...)\n\t}\n\n\tj, err := json.MarshalIndent(subscriptionCollection, \"\", \"  \")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif _, err := w.Write(j); err != nil {\n\t\tif c := h.logger.Check(zap.WarnLevel, \"Failed to write subscriptions response\"); c != nil {\n\t\t\tc.Write(zap.Error(err))\n\t\t}\n\t}\n}\n\nfunc (h *Hub) SubscriptionHandler(w http.ResponseWriter, r *http.Request) {\n\tcurrentURL := r.URL.RequestURI()\n\tlastEventID, subscribers, ok := h.initSubscription(currentURL, w, r)\n\tif !ok {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\ts, _ := url.QueryUnescape(vars[\"subscriber\"])\n\tt, _ := url.QueryUnescape(vars[\"topic\"])\n\n\tfor _, subscriber := range subscribers {\n\t\tif subscriber.ID != s {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, subscription := range subscriber.getSubscriptions(t, jsonldContext, true) {\n\t\t\tif subscription.Topic != t {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tsubscription.LastEventID = lastEventID\n\t\t\tj, err := json.MarshalIndent(subscription, \"\", \"  \")\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\n\t\t\tif _, err := w.Write(j); err != nil {\n\t\t\t\tif c := h.logger.Check(zap.WarnLevel, \"Failed to write subscription response\"); c != nil {\n\t\t\t\t\tc.Write(zap.Error(err), zap.Object(\"subscriber\", subscriber), zap.String(\"remote_addr\", r.RemoteAddr))\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn\n\t\t}\n\t}\n\n\tw.WriteHeader(http.StatusNotFound)\n}\n\nfunc (h *Hub) initSubscription(currentURL string, w http.ResponseWriter, r *http.Request) (lastEventID string, subscribers []*Subscriber, ok bool) {\n\tif h.subscriberJWTKeyFunc != nil {\n\t\tclaims, err := authorize(r, h.subscriberJWTKeyFunc, nil, h.cookieName)\n\t\tif err != nil || claims == nil || claims.Mercure.Subscribe == nil || !canReceive(h.topicSelectorStore, []string{currentURL}, claims.Mercure.Subscribe) {\n\t\t\th.httpAuthorizationError(w, r, err)\n\n\t\t\treturn \"\", nil, false\n\t\t}\n\t}\n\n\ttransport, ok := h.transport.(TransportSubscribers)\n\tif !ok {\n\t\tpanic(\"The transport isn't an instance of hub.TransportSubscribers\")\n\t}\n\n\tvar err error\n\tlastEventID, subscribers, err = transport.GetSubscribers()\n\tif err != nil {\n\t\tif c := h.logger.Check(zap.ErrorLevel, \"Error retrieving subscribers\"); c != nil {\n\t\t\tc.Write(zap.Error(err))\n\t\t}\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\n\t\treturn lastEventID, subscribers, ok\n\t}\n\tif r.Header.Get(\"If-None-Match\") == lastEventID {\n\t\tw.WriteHeader(http.StatusNotModified)\n\n\t\treturn \"\", nil, false\n\t}\n\n\tw.Header().Add(\"Content-Type\", \"application/ld+json\")\n\tw.Header().Add(\"ETag\", lastEventID)\n\n\treturn lastEventID, subscribers, true\n}\n"
        },
        {
          "name": "subscription_test.go",
          "type": "blob",
          "size": 7.9873046875,
          "content": "package mercure\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/gorilla/mux\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.uber.org/zap\"\n)\n\nfunc TestSubscriptionsHandlerAccessDenied(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodGet, subscriptionsURL, nil)\n\tw := httptest.NewRecorder()\n\thub.SubscriptionsHandler(w, req)\n\tres := w.Result()\n\tassert.Equal(t, http.StatusUnauthorized, res.StatusCode)\n\tres.Body.Close()\n\n\treq = httptest.NewRequest(http.MethodGet, subscriptionsURL, nil)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"/.well-known/mercure/subscriptions/foo{/subscriber}\"})})\n\tw = httptest.NewRecorder()\n\thub.SubscriptionsHandler(w, req)\n\tres = w.Result()\n\tassert.Equal(t, http.StatusUnauthorized, res.StatusCode)\n\tres.Body.Close()\n\n\treq = httptest.NewRequest(http.MethodGet, defaultHubURL+subscriptionsPath+\"/bar\", nil)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"/.well-known/mercure/subscriptions/foo{/subscriber}\"})})\n\tw = httptest.NewRecorder()\n\thub.SubscriptionsHandler(w, req)\n\tres = w.Result()\n\tassert.Equal(t, http.StatusUnauthorized, res.StatusCode)\n\tres.Body.Close()\n}\n\nfunc TestSubscriptionHandlerAccessDenied(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+subscriptionsPath+\"/bar/baz\", nil)\n\tw := httptest.NewRecorder()\n\thub.SubscriptionHandler(w, req)\n\tres := w.Result()\n\tassert.Equal(t, http.StatusUnauthorized, res.StatusCode)\n\tres.Body.Close()\n\n\treq = httptest.NewRequest(http.MethodGet, defaultHubURL+subscriptionsPath+\"/bar/baz\", nil)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"/.well-known/mercure/subscriptions/foo{/subscriber}\"})})\n\tw = httptest.NewRecorder()\n\thub.SubscriptionHandler(w, req)\n\tres = w.Result()\n\tassert.Equal(t, http.StatusUnauthorized, res.StatusCode)\n\tres.Body.Close()\n}\n\nfunc TestSubscriptionHandlersETag(t *testing.T) {\n\thub := createDummy()\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+subscriptionsPath, nil)\n\treq.Header.Add(\"If-None-Match\", EarliestLastEventID)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"/.well-known/mercure/subscriptions\"})})\n\tw := httptest.NewRecorder()\n\thub.SubscriptionsHandler(w, req)\n\tres := w.Result()\n\tassert.Equal(t, http.StatusNotModified, res.StatusCode)\n\tres.Body.Close()\n\n\treq = httptest.NewRequest(http.MethodGet, defaultHubURL+subscriptionsPath+\"/foo/bar\", nil)\n\treq.Header.Add(\"If-None-Match\", EarliestLastEventID)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"/.well-known/mercure/subscriptions/foo/bar\"})})\n\tw = httptest.NewRecorder()\n\thub.SubscriptionHandler(w, req)\n\tres = w.Result()\n\tassert.Equal(t, http.StatusNotModified, res.StatusCode)\n\tres.Body.Close()\n}\n\nfunc TestSubscriptionsHandler(t *testing.T) {\n\tlogger := zap.NewNop()\n\n\thub := createDummy(WithLogger(logger))\n\ttss := &TopicSelectorStore{}\n\n\ts1 := NewLocalSubscriber(\"\", logger, tss)\n\ts1.SetTopics([]string{\"http://example.com/foo\"}, nil)\n\trequire.NoError(t, hub.transport.AddSubscriber(s1))\n\n\ts2 := NewLocalSubscriber(\"\", logger, tss)\n\ts2.SetTopics([]string{\"http://example.com/bar\"}, nil)\n\trequire.NoError(t, hub.transport.AddSubscriber(s2))\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+subscriptionsPath, nil)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"/.well-known/mercure/subscriptions\"})})\n\tw := httptest.NewRecorder()\n\thub.SubscriptionsHandler(w, req)\n\tres := w.Result()\n\tassert.Equal(t, http.StatusOK, res.StatusCode)\n\tres.Body.Close()\n\n\tvar subscriptions subscriptionCollection\n\tjson.Unmarshal(w.Body.Bytes(), &subscriptions)\n\n\tassert.Equal(t, \"https://mercure.rocks/\", subscriptions.Context)\n\tassert.Equal(t, subscriptionsURL, subscriptions.ID)\n\tassert.Equal(t, \"Subscriptions\", subscriptions.Type)\n\n\tlastEventID, subscribers, _ := hub.transport.(TransportSubscribers).GetSubscribers()\n\n\tassert.Equal(t, lastEventID, subscriptions.LastEventID)\n\trequire.NotEmpty(t, subscribers)\n\tfor _, s := range subscribers {\n\t\tcurrentSubs := s.getSubscriptions(\"\", \"\", true)\n\t\trequire.NotEmpty(t, currentSubs)\n\t\tfor _, sub := range currentSubs {\n\t\t\tassert.Contains(t, subscriptions.Subscriptions, sub)\n\t\t}\n\t}\n}\n\nfunc TestSubscriptionsHandlerForTopic(t *testing.T) {\n\tlogger := zap.NewNop()\n\thub := createDummy(WithLogger(logger))\n\ttss := &TopicSelectorStore{}\n\n\ts1 := NewLocalSubscriber(\"\", logger, tss)\n\ts1.SetTopics([]string{\"http://example.com/foo\"}, nil)\n\trequire.NoError(t, hub.transport.AddSubscriber(s1))\n\n\ts2 := NewLocalSubscriber(\"\", logger, tss)\n\ts2.SetTopics([]string{\"http://example.com/bar\"}, nil)\n\trequire.NoError(t, hub.transport.AddSubscriber(s2))\n\n\tescapedBarTopic := url.QueryEscape(\"http://example.com/bar\")\n\n\trouter := mux.NewRouter()\n\trouter.UseEncodedPath()\n\trouter.SkipClean(true)\n\trouter.HandleFunc(subscriptionsForTopicURL, hub.SubscriptionsHandler)\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+subscriptionsPath+\"/\"+s2.EscapedTopics[0], nil)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"/.well-known/mercure/subscriptions/\" + s2.EscapedTopics[0]})})\n\tw := httptest.NewRecorder()\n\thub.SubscriptionsHandler(w, req)\n\tres := w.Result()\n\tassert.Equal(t, http.StatusOK, res.StatusCode)\n\tres.Body.Close()\n\n\tvar subscriptions subscriptionCollection\n\tjson.Unmarshal(w.Body.Bytes(), &subscriptions)\n\n\tassert.Equal(t, \"https://mercure.rocks/\", subscriptions.Context)\n\tassert.Equal(t, defaultHubURL+subscriptionsPath+\"/\"+escapedBarTopic, subscriptions.ID)\n\tassert.Equal(t, \"Subscriptions\", subscriptions.Type)\n\n\tlastEventID, subscribers, _ := hub.transport.(TransportSubscribers).GetSubscribers()\n\n\tassert.Equal(t, lastEventID, subscriptions.LastEventID)\n\trequire.NotEmpty(t, subscribers)\n\tfor _, s := range subscribers {\n\t\tfor _, sub := range s.getSubscriptions(\"http://example.com/bar\", \"\", true) {\n\t\t\trequire.NotContains(t, \"foo\", sub.Topic)\n\t\t\tassert.Contains(t, subscriptions.Subscriptions, sub)\n\t\t}\n\t}\n}\n\nfunc TestSubscriptionHandler(t *testing.T) {\n\tlogger := zap.NewNop()\n\thub := createDummy(WithLogger(logger))\n\ttss := &TopicSelectorStore{}\n\n\totherS := NewLocalSubscriber(\"\", logger, tss)\n\totherS.SetTopics([]string{\"http://example.com/other\"}, nil)\n\trequire.NoError(t, hub.transport.AddSubscriber(otherS))\n\n\ts := NewLocalSubscriber(\"\", logger, tss)\n\ts.SetTopics([]string{\"http://example.com/other\", \"http://example.com/{foo}\"}, nil)\n\trequire.NoError(t, hub.transport.AddSubscriber(s))\n\n\trouter := mux.NewRouter()\n\trouter.UseEncodedPath()\n\trouter.SkipClean(true)\n\trouter.HandleFunc(subscriptionURL, hub.SubscriptionHandler)\n\n\treq := httptest.NewRequest(http.MethodGet, defaultHubURL+subscriptionsPath+\"/\"+s.EscapedTopics[1]+\"/\"+s.EscapedID, nil)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"/.well-known/mercure/subscriptions{/topic}{/subscriber}\"})})\n\tw := httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\tres := w.Result()\n\tassert.Equal(t, http.StatusOK, res.StatusCode)\n\tres.Body.Close()\n\n\tvar subscription subscription\n\tjson.Unmarshal(w.Body.Bytes(), &subscription)\n\texpectedSub := s.getSubscriptions(s.SubscribedTopics[1], \"https://mercure.rocks/\", true)[0]\n\texpectedSub.LastEventID, _, _ = hub.transport.(TransportSubscribers).GetSubscribers()\n\tassert.Equal(t, expectedSub, subscription)\n\n\treq = httptest.NewRequest(http.MethodGet, defaultHubURL+subscriptionsPath+\"/notexist/\"+s.EscapedID, nil)\n\treq.AddCookie(&http.Cookie{Name: \"mercureAuthorization\", Value: createDummyAuthorizedJWT(roleSubscriber, []string{\"/.well-known/mercure/subscriptions{/topic}{/subscriber}\"})})\n\tw = httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\tres = w.Result()\n\tassert.Equal(t, http.StatusNotFound, res.StatusCode)\n\tres.Body.Close()\n}\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "topicselector.go",
          "type": "blob",
          "size": 1.69140625,
          "content": "package mercure\n\nimport (\n\t\"regexp\"\n\t\"strings\"\n\n\t\"github.com/yosida95/uritemplate/v3\"\n)\n\ntype TopicSelectorStoreCache interface {\n\tGet(key string) (interface{}, bool)\n\tSet(key string, value interface{}, n int64) bool\n}\n\n// TopicSelectorStore caches compiled templates to improve memory and CPU usage.\ntype TopicSelectorStore struct {\n\tcache      TopicSelectorStoreCache\n\tskipSelect bool\n}\n\nfunc (tss *TopicSelectorStore) match(topic, topicSelector string) bool {\n\t// Always do an exact matching comparison first\n\t// Also check if the topic selector is the reserved keyword *\n\tif topicSelector == \"*\" || topic == topicSelector {\n\t\treturn true\n\t}\n\n\tvar k string\n\tif tss.cache != nil {\n\t\tk = \"m_\" + topicSelector + \"_\" + topic\n\t\tvalue, found := tss.cache.Get(k)\n\t\tif found {\n\t\t\treturn value.(bool)\n\t\t}\n\t}\n\n\tr := tss.getRegexp(topicSelector)\n\tif r == nil {\n\t\treturn false\n\t}\n\n\t// Use template.Regexp() instead of template.Match() for performance\n\t// See https://github.com/yosida95/uritemplate/pull/7\n\tmatch := r.MatchString(topic)\n\tif tss.cache != nil {\n\t\ttss.cache.Set(k, match, 4)\n\t}\n\n\treturn match\n}\n\n// getRegexp retrieves regexp for this template selector.\nfunc (tss *TopicSelectorStore) getRegexp(topicSelector string) *regexp.Regexp {\n\t// If it's definitely not a URI template, skip to save some resources\n\tif !strings.Contains(topicSelector, \"{\") {\n\t\treturn nil\n\t}\n\n\tvar k string\n\tif tss.cache != nil {\n\t\tk = \"t_\" + topicSelector\n\t\tvalue, found := tss.cache.Get(k)\n\t\tif found {\n\t\t\treturn value.(*regexp.Regexp)\n\t\t}\n\t}\n\n\t// If an error occurs, it's a raw string\n\tif tpl, err := uritemplate.New(topicSelector); err == nil {\n\t\tr := tpl.Regexp()\n\t\tif tss.cache != nil {\n\t\t\ttss.cache.Set(k, r, 19)\n\t\t}\n\n\t\treturn r\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "topicselectorlru.go",
          "type": "blob",
          "size": 1.197265625,
          "content": "package mercure\n\nimport (\n\t\"hash/fnv\"\n\n\tlru \"github.com/hashicorp/golang-lru\"\n)\n\n// Gather stats to find the best default values.\nconst (\n\tDefaultTopicSelectorStoreLRUMaxEntriesPerShard = int64(1e4)\n\tDefaultTopicSelectorStoreLRUShardCount         = int64(256) // 2.5 million entries.\n)\n\n// NewTopicSelectorStoreLRU creates a TopicSelectorStore with an LRU cache.\nfunc NewTopicSelectorStoreLRU(maxEntriesPerShard, shardCount int64) (*TopicSelectorStore, error) {\n\tif maxEntriesPerShard == 0 {\n\t\treturn &TopicSelectorStore{}, nil\n\t}\n\tif shardCount == 0 {\n\t\tshardCount = DefaultTopicSelectorStoreLRUShardCount\n\t}\n\n\tlruMap := make(shardedLRUCache, shardCount)\n\tfor i := 0; i < int(shardCount); i++ {\n\t\tlruMap[i], _ = lru.New(int(maxEntriesPerShard))\n\t}\n\n\treturn &TopicSelectorStore{cache: &lruMap, skipSelect: true}, nil\n}\n\ntype shardedLRUCache map[int]*lru.Cache\n\nfunc (c *shardedLRUCache) Get(k string) (interface{}, bool) {\n\treturn c.getShard(k).Get(k)\n}\n\nfunc (c *shardedLRUCache) Set(k string, v interface{}, _ int64) bool {\n\tc.getShard(k).Add(k, v)\n\n\treturn true\n}\n\nfunc (c *shardedLRUCache) getShard(k interface{}) *lru.Cache {\n\th := fnv.New32a()\n\t_, _ = h.Write([]byte(k.(string)))\n\n\treturn (*c)[int(h.Sum32())%len(*c)]\n}\n"
        },
        {
          "name": "topicselectorlru_test.go",
          "type": "blob",
          "size": 1.345703125,
          "content": "package mercure\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestMatchLRU(t *testing.T) {\n\ttss, err := NewTopicSelectorStoreLRU(DefaultTopicSelectorStoreLRUMaxEntriesPerShard, DefaultTopicSelectorStoreLRUMaxEntriesPerShard)\n\trequire.NoError(t, err)\n\n\tassert.False(t, tss.match(\"foo\", \"bar\"))\n\n\tassert.True(t, tss.match(\"https://example.com/foo/bar\", \"https://example.com/{foo}/bar\"))\n\n\t_, found := tss.cache.Get(\"t_https://example.com/{foo}/bar\")\n\tassert.True(t, found)\n\n\t_, found = tss.cache.Get(\"m_https://example.com/{foo}/bar_https://example.com/foo/bar\")\n\tassert.True(t, found)\n\n\tassert.True(t, tss.match(\"https://example.com/foo/bar\", \"https://example.com/{foo}/bar\"))\n\tassert.False(t, tss.match(\"https://example.com/foo/bar/baz\", \"https://example.com/{foo}/bar\"))\n\n\t_, found = tss.cache.Get(\"t_https://example.com/{foo}/bar\")\n\tassert.True(t, found)\n\n\t_, found = tss.cache.Get(\"m_https://example.com/{foo}/bar_https://example.com/foo/bar\")\n\tassert.True(t, found)\n\n\tassert.True(t, tss.match(\"https://example.com/kevin/dunglas\", \"https://example.com/{fistname}/{lastname}\"))\n\tassert.True(t, tss.match(\"https://example.com/foo/bar\", \"*\"))\n\tassert.True(t, tss.match(\"https://example.com/foo/bar\", \"https://example.com/foo/bar\"))\n\tassert.True(t, tss.match(\"foo\", \"foo\"))\n\tassert.False(t, tss.match(\"foo\", \"bar\"))\n}\n"
        },
        {
          "name": "transport.go",
          "type": "blob",
          "size": 3.0029296875,
          "content": "package mercure\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net/url\"\n\t\"sync\"\n)\n\n// EarliestLastEventID is the reserved value representing the earliest available event id.\nconst EarliestLastEventID = \"earliest\"\n\n// TransportFactory is the factory to initialize a new transport.\ntype TransportFactory = func(u *url.URL, l Logger) (Transport, error)\n\nvar (\n\t// Deprecated: directly instantiate the transport or use transports Caddy modules.\n\ttransportFactories   = make(map[string]TransportFactory) //nolint:gochecknoglobals\n\ttransportFactoriesMu sync.RWMutex                        //nolint:gochecknoglobals\n)\n\n// Deprecated: directly instantiate the transport or use transports Caddy modules.\nfunc RegisterTransportFactory(scheme string, factory TransportFactory) {\n\ttransportFactoriesMu.Lock()\n\ttransportFactories[scheme] = factory\n\ttransportFactoriesMu.Unlock()\n}\n\n// Deprecated: directly instantiate the transport or use transports Caddy modules.\nfunc NewTransport(u *url.URL, l Logger) (Transport, error) { //nolint:ireturn\n\ttransportFactoriesMu.RLock()\n\tf, ok := transportFactories[u.Scheme]\n\ttransportFactoriesMu.RUnlock()\n\n\tif !ok {\n\t\treturn nil, &TransportError{dsn: u.Redacted(), msg: \"no such transport available\"}\n\t}\n\n\treturn f(u, l)\n}\n\n// Transport provides methods to dispatch and persist updates.\ntype Transport interface {\n\t// Dispatch dispatches an update to all subscribers.\n\tDispatch(update *Update) error\n\n\t// AddSubscriber adds a new subscriber to the transport.\n\tAddSubscriber(s *LocalSubscriber) error\n\n\t// RemoveSubscriber removes a subscriber from the transport.\n\tRemoveSubscriber(s *LocalSubscriber) error\n\n\t// Close closes the Transport.\n\tClose() error\n}\n\n// TransportSubscribers provides a method to retrieve the list of active subscribers.\ntype TransportSubscribers interface {\n\t// GetSubscribers gets the last event ID and the list of active subscribers at this time.\n\tGetSubscribers() (string, []*Subscriber, error)\n}\n\n// TransportTopicSelectorStore provides a method to pass the TopicSelectorStore to the transport.\ntype TransportTopicSelectorStore interface {\n\tSetTopicSelectorStore(store *TopicSelectorStore)\n}\n\n// ErrClosedTransport is returned by the Transport's Dispatch and AddSubscriber methods after a call to Close.\nvar ErrClosedTransport = errors.New(\"hub: read/write on closed Transport\")\n\n// TransportError is returned when the Transport's DSN is invalid.\ntype TransportError struct {\n\tdsn string\n\tmsg string\n\terr error\n}\n\nfunc (e *TransportError) Error() string {\n\tif e.msg == \"\" {\n\t\tif e.err == nil {\n\t\t\treturn fmt.Sprintf(\"%q: invalid transport\", e.dsn)\n\t\t}\n\n\t\treturn fmt.Sprintf(\"%q: invalid transport: %s\", e.dsn, e.err)\n\t}\n\n\tif e.err == nil {\n\t\treturn fmt.Sprintf(\"%q: invalid transport: %s\", e.dsn, e.msg)\n\t}\n\n\treturn fmt.Sprintf(\"%q: %s: invalid transport: %s\", e.dsn, e.msg, e.err)\n}\n\nfunc (e *TransportError) Unwrap() error {\n\treturn e.err\n}\n\nfunc getSubscribers(sl *SubscriberList) (subscribers []*Subscriber) {\n\tsl.Walk(0, func(s *LocalSubscriber) bool {\n\t\tsubscribers = append(subscribers, &s.Subscriber)\n\n\t\treturn true\n\t})\n\n\treturn\n}\n"
        },
        {
          "name": "update.go",
          "type": "blob",
          "size": 1.2451171875,
          "content": "package mercure\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gofrs/uuid\"\n\t\"go.uber.org/zap/zapcore\"\n)\n\n// Update represents an update to send to subscribers.\ntype Update struct {\n\t// The topics' Internationalized Resource Identifier (RFC3987) (will most likely be URLs).\n\t// The first one is the canonical IRI, while next ones are alternate IRIs.\n\tTopics []string\n\n\t// Private updates can only be dispatched to subscribers authorized to receive them.\n\tPrivate bool\n\n\t// To print debug information\n\tDebug bool\n\n\t// The Server-Sent Event to send.\n\tEvent\n}\n\nfunc (u *Update) MarshalLogObject(enc zapcore.ObjectEncoder) error {\n\tenc.AddString(\"id\", u.ID)\n\tenc.AddString(\"type\", u.Type)\n\tenc.AddUint64(\"retry\", u.Retry)\n\tif err := enc.AddArray(\"topics\", stringArray(u.Topics)); err != nil {\n\t\treturn fmt.Errorf(\"log error: %w\", err)\n\t}\n\tenc.AddBool(\"private\", u.Private)\n\n\tif u.Debug {\n\t\tenc.AddString(\"data\", u.Data)\n\t}\n\n\treturn nil\n}\n\ntype serializedUpdate struct {\n\t*Update\n\tevent string\n}\n\n// AssignUUID generates a new UUID an assign it to the given update if no ID is already set.\nfunc AssignUUID(u *Update) {\n\tif u.ID == \"\" {\n\t\tu.ID = \"urn:uuid:\" + uuid.Must(uuid.NewV4()).String()\n\t}\n}\n\nfunc newSerializedUpdate(u *Update) *serializedUpdate {\n\treturn &serializedUpdate{u, u.String()}\n}\n"
        },
        {
          "name": "update_test.go",
          "type": "blob",
          "size": 1.1435546875,
          "content": "package mercure\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/gofrs/uuid\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.uber.org/zap\"\n)\n\nfunc TestAssignUUID(t *testing.T) {\n\tu := &Update{\n\t\tTopics:  []string{\"foo\"},\n\t\tPrivate: true,\n\t\tEvent:   Event{Retry: 3},\n\t}\n\tAssignUUID(u)\n\n\tassert.Equal(t, []string{\"foo\"}, u.Topics)\n\tassert.True(t, u.Private)\n\tassert.Equal(t, uint64(3), u.Retry)\n\tassert.True(t, strings.HasPrefix(u.ID, \"urn:uuid:\"))\n\n\t_, err := uuid.FromString(strings.TrimPrefix(u.ID, \"urn:uuid:\"))\n\trequire.NoError(t, err)\n}\n\nfunc TestLogUpdate(t *testing.T) {\n\tsink, logger := newTestLogger(t)\n\tdefer sink.Reset()\n\n\tu := &Update{\n\t\tTopics:  []string{\"https://example.com/foo\"},\n\t\tPrivate: true,\n\t\tDebug:   true,\n\t\tEvent:   Event{ID: \"a\", Retry: 3, Data: \"bar\", Type: \"baz\"},\n\t}\n\n\tf := zap.Object(\"update\", u)\n\tlogger.Info(\"test\", f)\n\n\tlog := sink.String()\n\tassert.Contains(t, log, `\"id\":\"a\"`)\n\tassert.Contains(t, log, `\"type\":\"baz\"`)\n\tassert.Contains(t, log, `\"retry\":3`)\n\tassert.Contains(t, log, `\"topics\":[\"https://example.com/foo\"]`)\n\tassert.Contains(t, log, `\"private\":true`)\n\tassert.Contains(t, log, `\"data\":\"bar\"`)\n}\n"
        }
      ]
    }
  ]
}