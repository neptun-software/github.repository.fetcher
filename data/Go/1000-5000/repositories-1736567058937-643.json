{
  "metadata": {
    "timestamp": 1736567058937,
    "page": 643,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "justjanne/powerline-go",
      "stars": 2762,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.150390625,
          "content": "# See http://editorconfig.org\n\n# In Go files we indent with tabs but still \n# set indent_size to control the GitHub web viewer.  \n[*.go]\nindent_size = 4\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.306640625,
          "content": "# Binaries for programs and plugins\n*.exe\n*.dll\n*.so\n*.dylib\npowerline-go\n/dist/\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Project-local glide cache, RE: https://github.com/Masterminds/glide/issues/736\n.glide/\n\n/.idea/\n\n.vscode/\n"
        },
        {
          "name": ".goreleaser.yaml",
          "type": "blob",
          "size": 0.6064453125,
          "content": "project_name: powerline-go\n\nbefore:\n  hooks:\n    - go mod download\n\nbuilds:\n  - binary: powerline-go\n    env:\n      - CGO_ENABLED=0\n    goarch:\n      - amd64\n      - arm\n      - arm64\n      - \"386\"\n    goos:\n      - darwin\n      - linux\n      - windows\n      - freebsd\n      - netbsd\n      - openbsd\n    ignore:\n      - goos: darwin\n        goarch: \"386\"\n      - goos: openbsd\n        goarch: arm\n    flags:\n      - -trimpath\n    ldflags:\n      - -s\n      - -w\n\narchives:\n  - name_template: \"{{ .ProjectName }}-{{ .Os }}-{{ .Arch }}\"\n    format: binary\n\nchecksum:\n  name_template: checksums.txt\n\nchangelog:\n  use: github\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 31.44140625,
          "content": "### GNU GENERAL PUBLIC LICENSE\n\nVersion 3, 29 June 2007\n\nCopyright (C) 2007 Free Software Foundation, Inc.\n<http://fsf.org/>\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n### Preamble\n\nThe GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works. By contrast,\nthe GNU General Public License is intended to guarantee your freedom\nto share and change all versions of a program--to make sure it remains\nfree software for all its users. We, the Free Software Foundation, use\nthe GNU General Public License for most of our software; it applies\nalso to any other work released this way by its authors. You can apply\nit to your programs, too.\n\nWhen we speak of free software, we are referring to freedom, not\nprice. Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\nTo protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights. Therefore, you\nhave certain responsibilities if you distribute copies of the\nsoftware, or if you modify it: responsibilities to respect the freedom\nof others.\n\nFor example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received. You must make sure that they, too, receive\nor can get the source code. And you must show them these terms so they\nknow their rights.\n\nDevelopers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\nFor the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software. For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\nSome devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the\nmanufacturer can do so. This is fundamentally incompatible with the\naim of protecting users' freedom to change the software. The\nsystematic pattern of such abuse occurs in the area of products for\nindividuals to use, which is precisely where it is most unacceptable.\nTherefore, we have designed this version of the GPL to prohibit the\npractice for those products. If such problems arise substantially in\nother domains, we stand ready to extend this provision to those\ndomains in future versions of the GPL, as needed to protect the\nfreedom of users.\n\nFinally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish\nto avoid the special danger that patents applied to a free program\ncould make it effectively proprietary. To prevent this, the GPL\nassures that patents cannot be used to render the program non-free.\n\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n\n### TERMS AND CONDITIONS\n\n#### 0. Definitions.\n\n\"This License\" refers to version 3 of the GNU General Public License.\n\n\"Copyright\" also means copyright-like laws that apply to other kinds\nof works, such as semiconductor masks.\n\n\"The Program\" refers to any copyrightable work licensed under this\nLicense. Each licensee is addressed as \"you\". \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\nTo \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of\nan exact copy. The resulting work is called a \"modified version\" of\nthe earlier work or a work \"based on\" the earlier work.\n\nA \"covered work\" means either the unmodified Program or a work based\non the Program.\n\nTo \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy. Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\nTo \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies. Mere interaction with a user\nthrough a computer network, with no transfer of a copy, is not\nconveying.\n\nAn interactive user interface displays \"Appropriate Legal Notices\" to\nthe extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License. If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n#### 1. Source Code.\n\nThe \"source code\" for a work means the preferred form of the work for\nmaking modifications to it. \"Object code\" means any non-source form of\na work.\n\nA \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\nThe \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form. A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\nThe \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities. However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work. For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\nThe Corresponding Source need not include anything that users can\nregenerate automatically from other parts of the Corresponding Source.\n\nThe Corresponding Source for a work in source code form is that same\nwork.\n\n#### 2. Basic Permissions.\n\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met. This License explicitly affirms your unlimited\npermission to run the unmodified Program. The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work. This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\nYou may make, run and propagate covered works that you do not convey,\nwithout conditions so long as your license otherwise remains in force.\nYou may convey covered works to others for the sole purpose of having\nthem make modifications exclusively for you, or provide you with\nfacilities for running those works, provided that you comply with the\nterms of this License in conveying all material for which you do not\ncontrol copyright. Those thus making or running the covered works for\nyou must do so exclusively on your behalf, under your direction and\ncontrol, on terms that prohibit them from making any copies of your\ncopyrighted material outside their relationship with you.\n\nConveying under any other circumstances is permitted solely under the\nconditions stated below. Sublicensing is not allowed; section 10 makes\nit unnecessary.\n\n#### 3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such\ncircumvention is effected by exercising rights under this License with\nrespect to the covered work, and you disclaim any intention to limit\noperation or modification of the work as a means of enforcing, against\nthe work's users, your or third parties' legal rights to forbid\ncircumvention of technological measures.\n\n#### 4. Conveying Verbatim Copies.\n\nYou may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n#### 5. Conveying Modified Source Versions.\n\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these\nconditions:\n\n-   a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n-   b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under\n    section 7. This requirement modifies the requirement in section 4\n    to \"keep intact all notices\".\n-   c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy. This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged. This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n-   d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit. Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n#### 6. Conveying Non-Source Forms.\n\nYou may convey a covered work in object code form under the terms of\nsections 4 and 5, provided that you also convey the machine-readable\nCorresponding Source under the terms of this License, in one of these\nways:\n\n-   a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n-   b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the Corresponding\n    Source from a network server at no charge.\n-   c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source. This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n-   d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge. You need not require recipients to copy the\n    Corresponding Source along with the object code. If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source. Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n-   e) Convey the object code using peer-to-peer transmission,\n    provided you inform other peers where the object code and\n    Corresponding Source of the work are being offered to the general\n    public at no charge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\nA \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal,\nfamily, or household purposes, or (2) anything designed or sold for\nincorporation into a dwelling. In determining whether a product is a\nconsumer product, doubtful cases shall be resolved in favor of\ncoverage. For a particular product received by a particular user,\n\"normally used\" refers to a typical or common use of that class of\nproduct, regardless of the status of the particular user or of the way\nin which the particular user actually uses, or expects or is expected\nto use, the product. A product is a consumer product regardless of\nwhether the product has substantial commercial, industrial or\nnon-consumer uses, unless such uses represent the only significant\nmode of use of the product.\n\n\"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to\ninstall and execute modified versions of a covered work in that User\nProduct from a modified version of its Corresponding Source. The\ninformation must suffice to ensure that the continued functioning of\nthe modified object code is in no case prevented or interfered with\nsolely because modification has been made.\n\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information. But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or\nupdates for a work that has been modified or installed by the\nrecipient, or for the User Product in which it has been modified or\ninstalled. Access to a network may be denied when the modification\nitself materially and adversely affects the operation of the network\nor violates the rules and protocols for communication across the\nnetwork.\n\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n#### 7. Additional Terms.\n\n\"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law. If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit. (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.) You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders\nof that material) supplement the terms of this License with terms:\n\n-   a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n-   b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n-   c) Prohibiting misrepresentation of the origin of that material,\n    or requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n-   d) Limiting the use for publicity purposes of names of licensors\n    or authors of the material; or\n-   e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n-   f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions\n    of it) with contractual assumptions of liability to the recipient,\n    for any liability that these contractual assumptions directly\n    impose on those licensors and authors.\n\nAll other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10. If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term. If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions; the\nabove requirements apply either way.\n\n#### 8. Termination.\n\nYou may not propagate or modify a covered work except as expressly\nprovided under this License. Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\nHowever, if you cease all violation of this License, then your license\nfrom a particular copyright holder is reinstated (a) provisionally,\nunless and until the copyright holder explicitly and finally\nterminates your license, and (b) permanently, if the copyright holder\nfails to notify you of the violation by some reasonable means prior to\n60 days after the cessation.\n\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License. If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n#### 9. Acceptance Not Required for Having Copies.\n\nYou are not required to accept this License in order to receive or run\na copy of the Program. Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance. However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work. These actions infringe copyright if you do\nnot accept this License. Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n#### 10. Automatic Licensing of Downstream Recipients.\n\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License. You are not responsible\nfor enforcing compliance by third parties with this License.\n\nAn \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations. If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License. For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n#### 11. Patents.\n\nA \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based. The\nwork thus licensed is called the contributor's \"contributor version\".\n\nA contributor's \"essential patent claims\" are all patent claims owned\nor controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version. For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\nIn the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement). To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients. \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\nA patent license is \"discriminatory\" if it does not include within the\nscope of its coverage, prohibits the exercise of, or is conditioned on\nthe non-exercise of one or more of the rights that are specifically\ngranted under this License. You may not convey a covered work if you\nare a party to an arrangement with a third party that is in the\nbusiness of distributing software, under which you make payment to the\nthird party based on the extent of your activity of conveying the\nwork, and under which the third party grants, to any of the parties\nwho would receive the covered work from you, a discriminatory patent\nlicense (a) in connection with copies of the covered work conveyed by\nyou (or copies made from those copies), or (b) primarily for and in\nconnection with specific products or compilations that contain the\ncovered work, unless you entered into that arrangement, or that patent\nlicense was granted, prior to 28 March 2007.\n\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n#### 12. No Surrender of Others' Freedom.\n\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License. If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under\nthis License and any other pertinent obligations, then as a\nconsequence you may not convey it at all. For example, if you agree to\nterms that obligate you to collect a royalty for further conveying\nfrom those to whom you convey the Program, the only way you could\nsatisfy both those terms and this License would be to refrain entirely\nfrom conveying the Program.\n\n#### 13. Use with the GNU Affero General Public License.\n\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work. The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n#### 14. Revised Versions of this License.\n\nThe Free Software Foundation may publish revised and/or new versions\nof the GNU General Public License from time to time. Such new versions\nwill be similar in spirit to the present version, but may differ in\ndetail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Program\nspecifies that a certain numbered version of the GNU General Public\nLicense \"or any later version\" applies to it, you have the option of\nfollowing the terms and conditions either of that numbered version or\nof any later version published by the Free Software Foundation. If the\nProgram does not specify a version number of the GNU General Public\nLicense, you may choose any version ever published by the Free\nSoftware Foundation.\n\nIf the Program specifies that a proxy can decide which future versions\nof the GNU General Public License can be used, that proxy's public\nstatement of acceptance of a version permanently authorizes you to\nchoose that version for the Program.\n\nLater license versions may give you additional or different\npermissions. However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n#### 15. Disclaimer of Warranty.\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT\nWARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND\nPERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE\nDEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR\nCORRECTION.\n\n#### 16. Limitation of Liability.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR\nCONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES\nARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT\nNOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR\nLOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM\nTO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER\nPARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n#### 17. Interpretation of Sections 15 and 16.\n\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.158203125,
          "content": "# A Powerline style prompt for your shell\n\nA [Powerline](https://github.com/Lokaltog/vim-powerline) like prompt for Bash,\nZSH and Fish. Based on [Powerline-Shell](https://github.com/banga/powerline-shell) by @banga.\nPorted to golang by @justjanne.\n\n![Solarized+Powerline](https://raw.github.com/justjanne/powerline-go/main/preview.png)\n\n- Shows some important details about the git/hg branch (see below)\n- Changes color if the last command exited with a failure code\n- If you're too deep into a directory tree, shortens the displayed path with an ellipsis\n- Shows the current Python [virtualenv](http://www.virtualenv.org/) environment\n- Shows the current Ruby version using [rbenv](https://github.com/rbenv/rbenv) or [rvm](https://rvm.io/)\n- Shows if you are in a [nix](https://nixos.org/) shell\n- It's easy to customize and extend. See below for details.\n\n**Table of Contents**\n\n- [Version Control](#version-control)\n- [Installation](#installation)\n  - [Precompiled Binaries](#precompiled-binaries)\n  - [Other Platforms](#other-platforms)\n  - [Bash](#bash)\n  - [ZSH](#zsh)\n  - [Fish](#fish)\n  - [Nix](#nix)\n  - [PowerShell](#powershell)\n- [Customization](#customization)\n- [License](#license)\n\n## Version Control\n\nAll of the version control systems supported by powerline shell give you a\nquick look into the state of your repo:\n\n- The current branch is displayed and changes background color when the\n  branch is dirty.\n- When the local branch differs from the remote, the difference in number\n  of commits is shown along with `⇡` or `⇣` indicating whether a git push\n  or pull is pending\n\nIn addition, git has a few extra symbols:\n\n- `✎` -- a file has been modified, but not staged for commit\n- `✔` -- a file is staged for commit\n- `✼` -- a file has conflicts\n- `+` -- untracked files are present\n- `⚑` -- stash is present\n\nEach of these will have a number next to it if more than one file matches.\n\n## Installation\n\nRequires Go 1.15+\n\n`powerline-go` uses ANSI color codes, these should nowadays work everywhere,\nbut you may have to set your $TERM to `xterm-256color` for it to work.\n\nIf you want to use the \"patched\" mode (which is the default, and provides\nimproved UI), you'll need to install a powerline font, either as fallback,\nor by patching the font you use for your terminal: see\n[powerline-fonts](https://github.com/Lokaltog/powerline-fonts).\nAlternatively you can use \"compatible\" or \"flat\" mode.\n\n### Precompiled Binaries\n\nI provide precompiled binaries for x64 Linux and macOS in the\n[releases tab](https://github.com/justjanne/powerline-go/releases)\n\n### Other Platforms\n\n- Install (and update) the package with\n\n```bash\ngo install github.com/justjanne/powerline-go@latest\n```\n\n- By default it will be in `$GOPATH/bin`, if you want to change that, you can set\n  your `$GOPATH` and/or `$GOBIN`, but will need to change the path in the\n  following scripts, too.\n\n### Bash\n\nAdd the following to your `.bashrc`:\n\n```bash\nfunction _update_ps1() {\n    PS1=\"$($GOPATH/bin/powerline-go -error $? -jobs $(jobs -p | wc -l))\"\n\n    # Uncomment the following line to automatically clear errors after showing\n    # them once. This not only clears the error for powerline-go, but also for\n    # everything else you run in that shell. Don't enable this if you're not\n    # sure this is what you want.\n\n    #set \"?\"\n}\n\nif [ \"$TERM\" != \"linux\" ] && [ -f \"$GOPATH/bin/powerline-go\" ]; then\n    PROMPT_COMMAND=\"_update_ps1; $PROMPT_COMMAND\"\nfi\n```\n\nCurrently, right prompt support is not available when using bash.\n\n### ZSH\n\nAdd the following to your `.zshrc`:\n\n```bash\nfunction powerline_precmd() {\n    PS1=\"$($GOPATH/bin/powerline-go -error $? -jobs ${${(%):%j}:-0})\"\n\n    # Uncomment the following line to automatically clear errors after showing\n    # them once. This not only clears the error for powerline-go, but also for\n    # everything else you run in that shell. Don't enable this if you're not\n    # sure this is what you want.\n\n    #set \"?\"\n}\n\nfunction install_powerline_precmd() {\n  for s in \"${precmd_functions[@]}\"; do\n    if [ \"$s\" = \"powerline_precmd\" ]; then\n      return\n    fi\n  done\n  precmd_functions+=(powerline_precmd)\n}\n\nif [ \"$TERM\" != \"linux\" ] && [ -f \"$GOPATH/bin/powerline-go\" ]; then\n    install_powerline_precmd\nfi\n```\n\n### Fish\n\nRedefine `fish_prompt` in `~/.config/fish/config.fish`:\n\n```bash\nfunction fish_prompt\n    eval $GOPATH/bin/powerline-go -error $status -jobs (count (jobs -p))\nend\n```\n### Nix\n\nWhen using `nix-shell --pure`, `powerline-go` will not be accessible, and\nyour prompt will disappear.\n\nTo work around this you can add this snippet to your `.bashrc`,\nwhich should re-enable the prompt in most cases:\n\n```bash\n# Workaround for nix-shell --pure\nif [ \"$IN_NIX_SHELL\" == \"pure\" ]; then\n    if [ -x \"$HOME/.nix-profile/bin/powerline-go\" ]; then\n        alias powerline-go=\"$HOME/.nix-profile/bin/powerline-go\"\n    elif [ -x \"/run/current-system/sw/bin/powerline-go\" ]; then\n        alias powerline-go=\"/run/current-system/sw/bin/powerline-go\"\n    fi\nfi\n```\n\n### Powershell\n\nRedefine `prompt` function on your profile:\n\n```powershell\n# Load powerline-go prompt\nfunction global:prompt {\n    $pwd = $ExecutionContext.SessionState.Path.CurrentLocation\n    $startInfo = New-Object System.Diagnostics.ProcessStartInfo\n    $startInfo.FileName = \"powerline-go\"\n    $startInfo.Arguments = \"-shell bare\"\n    $startInfo.Environment[\"TERM\"] = \"xterm-256color\"\n    $startInfo.CreateNoWindow = $true\n    $startInfo.StandardOutputEncoding = [System.Text.Encoding]::UTF8\n    $startInfo.RedirectStandardOutput = $true\n    $startInfo.UseShellExecute = $false\n    $startInfo.WorkingDirectory = $pwd\n    $process = New-Object System.Diagnostics.Process\n    $process.StartInfo = $startInfo\n    $process.Start() | Out-Null\n    $standardOut = $process.StandardOutput.ReadToEnd()\n    $process.WaitForExit()\n    $standardOut\n}\n```\n\nUse `ProcessStartInfo` is needed to allow fill the enviromnet variables required by powerline-go.\n\n## Customization\n\nThere are a few optional arguments which can be seen by running\n`powerline-go -help`. These can be used by changing the command you have set\nin your shell’s init file.\n\n```\nUsage of powerline-go:\n  -alternate-ssh-icon\n         Show the older, original icon for SSH connections\n  -colorize-hostname\n         Colorize the hostname based on a hash of itself, or use the PLGO_HOSTNAMEFG and PLGO_HOSTNAMEBG env vars (both need to be set).\n  -condensed\n         Remove spacing between segments\n  -cwd-max-depth int\n         Maximum number of directories to show in path\n         (default 5)\n  -cwd-max-dir-size int\n         Maximum number of letters displayed for each directory in the path\n         (default -1)\n  -cwd-mode string\n         How to display the current directory\n         (valid choices: fancy, semifancy, plain, dironly)\n         (default \"fancy\")\n  -duration string\n         The elapsed clock-time of the previous command\n  -duration-min string\n         The minimal time a command has to take before the duration segment is shown (default \"0\")\n  -east-asian-width\n         Use East Asian Ambiguous Widths\n  -error int\n         Exit code of previously executed command\n  -eval\n         Output prompt in 'eval' format.\n  -git-assume-unchanged-size int\n         Disable checking for changed/edited files in git repositories where the index is larger than this size (in KB), improves performance (default 2048)\n  -git-disable-stats string\n         Comma-separated list to disable individual git statuses\n         (valid choices: ahead, behind, staged, notStaged, untracked, conflicted, stashed)\n  -git-mode string\n         How to display git status\n         (valid choices: fancy, compact, simple)\n         (default \"fancy\")\n  -hostname-only-if-ssh\n         Show hostname only for SSH connections\n  -ignore-repos string\n         A list of git repos to ignore. Separate with ','.\n         Repos are identified by their root directory.\n  -ignore-warnings\n         Ignores all warnings regarding unset or broken variables\n  -jobs int\n         Number of jobs currently running\n  -max-width int\n         Maximum width of the shell that the prompt may use, in percent. Setting this to 0 disables the shrinking subsystem.\n  -mode string\n         The characters used to make separators between segments.\n         (valid choices: patched, compatible, flat)\n         (default \"patched\")\n  -modules string\n         The list of modules to load, separated by ','\n         (valid choices: aws, bzr, cwd, direnv, docker, docker-context, dotenv, duration, exit, fossil, gcp, git, gitlite, goenv, hg, host, jobs, kube, load, newline, nix-shell, node, perlbrew, perms, plenv, rbenv, root, rvm, shell-var, shenv, ssh, svn, termtitle, terraform-workspace, time, user, venv, vgo, vi-mode, wsl)\n         Unrecognized modules will be invoked as 'powerline-go-MODULE' executable plugins and should output a (possibly empty) list of JSON objects that unmarshal to powerline-go's Segment structs.\n         (default \"venv,user,host,ssh,cwd,perms,git,hg,jobs,exit,root\")\n  -modules-right string\n         The list of modules to load anchored to the right, for shells that support it, separated by ','\n         (valid choices: aws, bzr, cwd, direnv, docker, docker-context, dotenv, duration, exit, fossil, gcp, git, gitlite, goenv, hg, host, jobs, kube, load, newline, nix-shell, node, perlbrew, perms, plenv, rbenv, root, rvm, shell-var, shenv, ssh, svn, termtitle, terraform-workspace, time, user, venv, vgo, wsl)\n         Unrecognized modules will be invoked as 'powerline-go-MODULE' executable plugins and should output a (possibly empty) list of JSON objects that unmarshal to powerline-go's Segment structs.\n  -newline\n         Show the prompt on a new line\n  -numeric-exit-codes\n         Shows numeric exit codes for errors.\n  -path-aliases string\n         One or more aliases from a path to a short name. Separate with ','.\n         An alias maps a path like foo/bar/baz to a short name like FBB.\n         Specify these as key/value pairs like foo/bar/baz=FBB.\n         Use '~' for your home dir. You may need to escape this character to avoid shell substitution.\n  -priority string\n         Segments sorted by priority, if not enough space exists, the least priorized segments are removed first. Separate with ','\n         (valid choices: aws, bzr, cwd, direnv, docker, docker-context, dotenv, duration, exit, fossil, gcp, git, gitlite, goenv, hg, host, jobs, kube, load, newline, nix-shell, node, perlbrew, perms, plenv, rbenv, root, rvm, shell-var, shenv, ssh, svn, termtitle, terraform-workspace, time, user, venv, vgo, vi-mode, wsl)\n         (default \"root,cwd,user,host,ssh,perms,git-branch,git-status,hg,jobs,exit,cwd-path\")\n  -shell string\n         Set this to your shell type\n         (valid choices: autodetect, bare, bash, zsh)\n         (default \"autodetect\")\n  -shell-var string\n         A shell variable to add to the segments.\n  -shell-var-no-warn-empty\n         Disables warning for empty shell variable.\n  -shorten-eks-names\n         Shortens names for EKS Kube clusters.\n  -shorten-gke-names\n         Shortens names for GKE Kube clusters.\n  -static-prompt-indicator\n         Always show the prompt indicator with the default color, never with the error color\n  -theme string\n         Set this to the theme you want to use\n         (valid choices: default, low-contrast, gruvbox, solarized-dark16, solarized-light16)\n         (default \"default\")\n  -trim-ad-domain\n         Trim the Domainname from the AD username.\n  -truncate-segment-width int\n         Maximum width of a segment, segments longer than this will be shortened if space is limited. Setting this to 0 disables it.\n         (default 16)\n  -venv-name-size-limit int\n         Show indicator instead of virtualenv name if name is longer than this limit (defaults to 0, which is unlimited)\n  -vi-mode string\n         The current vi-mode (eg. KEYMAP for zsh) for vi-module module\n```\n\n### Eval\n\nIf using `eval` and `-modules-right` is desired, the shell setup must be modified slightly, as shown below:\n\n##### Bash\n\nAdd the following to your `.bashrc`:\n\n```bash\nfunction _update_ps1() {\n    eval \"$($GOPATH/bin/powerline-go -error $? -shell bash -eval -modules-right git)\"\n}\n\nif [ \"$TERM\" != \"linux\" ] && [ -f \"$GOPATH/bin/powerline-go\" ]; then\n    PROMPT_COMMAND=\"_update_ps1; $PROMPT_COMMAND\"\nfi\n```\n\n##### ZSH\n\nAdd the following to your `.zshrc`:\n\n```bash\nfunction powerline_precmd() {\n    eval \"$($GOPATH/bin/powerline-go -error $? -shell zsh -eval -modules-right git)\"\n}\n\nfunction install_powerline_precmd() {\n  for s in \"${precmd_functions[@]}\"; do\n    if [ \"$s\" = \"powerline_precmd\" ]; then\n      return\n    fi\n  done\n  precmd_functions+=(powerline_precmd)\n}\n\nif [ \"$TERM\" != \"linux\" ]; then\n    install_powerline_precmd\nfi\n```\n\n##### Fish\n\nEval mode (and `modules-right` support) for Fish is not currently available.\n\n### Path Aliases\n\nThe point of the path aliases feature is to allow you to replace long paths\nwith a shorter string that you can understand more quickly. This is useful if\nyou're often in deep path hierarchies that end up consuming most of your\nterminal width, even when some portions are replaced by an ellipsis.\n\nFor example, you might want to replace the string `$GOPATH/src/github.com` with\n`@GOPATH-GH`. When you're in a directory like\n`$GOPATH/src/github.com/justjanne/powerline-go`, you'll instead see `@GOPATH-GH >\njustjanne > powerline-go` in the shell prompt.\n\nAliases are defined as comma-separated key value pairs, like this:\n\n```bash\npowerline-go ... -path-aliases \\$GOPATH/src/github.com=@GOPATH-GH,\\~/work/projects/foo=@FOO,\\~/work/projects/bar=@BAR\n```\n\nNote that you should use `~` instead of `/home/username` when specifying the\npath. Also make sure to escape the `~` character. Otherwise your shell will\nperform interpolation on it before `powerline-go` can see it!\n\n### Duration\n\nThe duration segment requires some assistance from the shell.  The shell must have a hook that gets executed immediately before the command.\n\n#### Bash\n\nBash 4.4 includes an easy way to get a start-time, using `$PS0`.  However, not all operating systems come with a sufficiently recent version of Bash installed.  This example only has seconds precision.  Add or modify your `.bashrc` file to include the following:\n\n```bash\nINTERACTIVE_BASHPID_TIMER=\"/tmp/${USER}.START.$$\"\n\nPS0='$(echo $SECONDS > \"$INTERACTIVE_BASHPID_TIMER\")'\n\nfunction _update_ps1() {\n  local __ERRCODE=$?\n\n  local __DURATION=0\n  if [ -e $INTERACTIVE_BASHPID_TIMER ]; then\n    local __END=$SECONDS\n    local __START=$(cat \"$INTERACTIVE_BASHPID_TIMER\")\n    __DURATION=\"$(($__END - ${__START:-__END}))\"\n    rm -f \"$INTERACTIVE_BASHPID_TIMER\"\n  fi\n\n  PS1=\"$($GOPATH/bin/powerline-go -modules duration -duration $__DURATION -error $__ERRCODE -shell bash)\"\n}\n\nif [ \"$TERM\" != \"linux\" ] && [ -f \"$GOPATH/bin/powerline-go\" ]; then\n  PROMPT_COMMAND=\"_update_ps1; $PROMPT_COMMAND\"\nfi\n```\n\n#### Zsh\n\nUsing `$EPOCHREALTIME` requires loading the 'datetime' module in your `.zshrc` file, for example:\n\n```bash\nzmodload zsh/datetime\n\nfunction preexec() {\n  __TIMER=$EPOCHREALTIME\n}\n\nfunction powerline_precmd() {\n  local __ERRCODE=$?\n  local __DURATION=0\n\n  if [ -n $__TIMER ]; then\n    local __ERT=$EPOCHREALTIME\n    __DURATION=\"$(($__ERT - ${__TIMER:-__ERT}))\"\n  fi\n\n  PS1=\"$(powerline-go -modules duration -duration $__DURATION -error $__ERRCODE -shell zsh)\"\n  unset __TIMER\n}\n```\n\nIf the 'datetime' module is unavailable or unwanted, you may replace `$EPOCHREALTIME` with `$SECONDS`, at the loss of precision.\n\n#### Fish\n\nThe fish prompt, in `~/.config/fish/config.fish`, will require a minimum of changes, as Fish automatically provides `$CMD_DURATION`, although with only milliseconds accuracy.\n\n```bash\nfunction fish_prompt\n    set duration (math -s6 \"$CMD_DURATION / 1000\")\n    $GOPATH/bin/powerline-go -modules duration -duration $duration -error $status -shell bare\nend\n```\n\n## License\n\n> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n> \n> This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n> \n> You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "args.go",
          "type": "blob",
          "size": 9.333984375,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"strings\"\n)\n\ntype arguments struct {\n\tCwdMode                *string\n\tCwdMaxDepth            *int\n\tCwdMaxDirSize          *int\n\tColorizeHostname       *bool\n\tHostnameOnlyIfSSH      *bool\n\tSshAlternateIcon       *bool\n\tEastAsianWidth         *bool\n\tPromptOnNewLine        *bool\n\tStaticPromptIndicator  *bool\n\tVenvNameSizeLimit      *int\n\tGitAssumeUnchangedSize *int64\n\tGitDisableStats        *string\n\tGitMode                *string\n\tJobs                   *int\n\tMode                   *string\n\tTheme                  *string\n\tShell                  *string\n\tModules                *string\n\tModulesRight           *string\n\tPriority               *string\n\tMaxWidthPercentage     *int\n\tTruncateSegmentWidth   *int\n\tPrevError              *int\n\tNumericExitCodes       *bool\n\tIgnoreRepos            *string\n\tShortenGKENames        *bool\n\tShortenEKSNames        *bool\n\tShortenOpenshiftNames  *bool\n\tShellVar               *string\n\tShellVarNoWarnEmpty    *bool\n\tTrimADDomain           *bool\n\tPathAliases            *string\n\tDuration               *string\n\tDurationMin            *string\n\tDurationLowPrecision   *bool\n\tEval                   *bool\n\tCondensed              *bool\n\tIgnoreWarnings         *bool\n\tTime                   *string\n\tViMode                 *string\n}\n\nvar args = arguments{\n\tCwdMode: flag.String(\n\t\t\"cwd-mode\",\n\t\tdefaults.CwdMode,\n\t\tcommentsWithDefaults(\"How to display the current directory\",\n\t\t\t\"(valid choices: fancy, semifancy, plain, dironly)\")),\n\tCwdMaxDepth: flag.Int(\n\t\t\"cwd-max-depth\",\n\t\tdefaults.CwdMaxDepth,\n\t\tcommentsWithDefaults(\"Maximum number of directories to show in path\")),\n\tCwdMaxDirSize: flag.Int(\n\t\t\"cwd-max-dir-size\",\n\t\tdefaults.CwdMaxDirSize,\n\t\tcommentsWithDefaults(\"Maximum number of letters displayed for each directory in the path\")),\n\tColorizeHostname: flag.Bool(\n\t\t\"colorize-hostname\",\n\t\tdefaults.ColorizeHostname,\n\t\tcomments(\"Colorize the hostname based on a hash of itself, or use the PLGO_HOSTNAMEFG and PLGO_HOSTNAMEBG env vars (both need to be set).\")),\n\tHostnameOnlyIfSSH: flag.Bool(\n\t\t\"hostname-only-if-ssh\",\n\t\tdefaults.HostnameOnlyIfSSH,\n\t\tcomments(\"Show hostname only for SSH connections\")),\n\tSshAlternateIcon: flag.Bool(\n\t\t\"alternate-ssh-icon\",\n\t\tdefaults.SshAlternateIcon,\n\t\tcomments(\"Show the older, original icon for SSH connections\")),\n\tEastAsianWidth: flag.Bool(\n\t\t\"east-asian-width\",\n\t\tdefaults.EastAsianWidth,\n\t\tcomments(\"Use East Asian Ambiguous Widths\")),\n\tPromptOnNewLine: flag.Bool(\n\t\t\"newline\",\n\t\tdefaults.PromptOnNewLine,\n\t\tcomments(\"Show the prompt on a new line\")),\n\tStaticPromptIndicator: flag.Bool(\n\t\t\"static-prompt-indicator\",\n\t\tdefaults.StaticPromptIndicator,\n\t\tcomments(\"Always show the prompt indicator with the default color, never with the error color\")),\n\tVenvNameSizeLimit: flag.Int(\n\t\t\"venv-name-size-limit\",\n\t\tdefaults.VenvNameSizeLimit,\n\t\tcomments(\"Show indicator instead of virtualenv name if name is longer than this limit (defaults to 0, which is unlimited)\")),\n\tJobs: flag.Int(\n\t\t\"jobs\",\n\t\tdefaults.Jobs,\n\t\tcomments(\"Number of jobs currently running\")),\n\tGitAssumeUnchangedSize: flag.Int64(\n\t\t\"git-assume-unchanged-size\",\n\t\tdefaults.GitAssumeUnchangedSize,\n\t\tcomments(\"Disable checking for changed/edited files in git repositories where the index is larger than this size (in KB), improves performance\")),\n\tGitDisableStats: flag.String(\n\t\t\"git-disable-stats\",\n\t\tstrings.Join(defaults.GitDisableStats, \",\"),\n\t\tcommentsWithDefaults(\"Comma-separated list to disable individual git statuses\",\n\t\t\t\"(valid choices: ahead, behind, staged, notStaged, untracked, conflicted, stashed)\")),\n\tGitMode: flag.String(\n\t\t\"git-mode\",\n\t\tdefaults.GitMode,\n\t\tcommentsWithDefaults(\"How to display git status\",\n\t\t\t\"(valid choices: fancy, compact, simple)\")),\n\tMode: flag.String(\n\t\t\"mode\",\n\t\tdefaults.Mode,\n\t\tcommentsWithDefaults(\"The characters used to make separators between segments.\",\n\t\t\t\"(valid choices: patched, compatible, flat)\")),\n\tTheme: flag.String(\n\t\t\"theme\",\n\t\tdefaults.Theme,\n\t\tcommentsWithDefaults(\"Set this to the theme you want to use\",\n\t\t\t\"(valid choices: default, low-contrast, gruvbox, solarized-dark16, solarized-light16)\")),\n\tShell: flag.String(\n\t\t\"shell\",\n\t\tdefaults.Shell,\n\t\tcommentsWithDefaults(\"Set this to your shell type\",\n\t\t\t\"(valid choices: autodetect, bare, bash, zsh)\")),\n\tModules: flag.String(\n\t\t\"modules\",\n\t\tstrings.Join(defaults.Modules, \",\"),\n\t\tcommentsWithDefaults(\"The list of modules to load, separated by ','\",\n\t\t\t\"(valid choices: aws, bzr, cwd, direnv, docker, docker-context, dotenv, duration, exit, fossil, gcp, git, gitlite, goenv, hg, host, jobs, kube, load, newline, nix-shell, node, perlbrew, perms, plenv, rbenv, root, rvm, shell-var, shenv, ssh, svn, termtitle, terraform-workspace, time, user, venv, vgo, vi-mode, wsl)\",\n\t\t\t\"Unrecognized modules will be invoked as 'powerline-go-MODULE' executable plugins and should output a (possibly empty) list of JSON objects that unmarshal to powerline-go's Segment structs.\")),\n\tModulesRight: flag.String(\n\t\t\"modules-right\",\n\t\tstrings.Join(defaults.ModulesRight, \",\"),\n\t\tcomments(\"The list of modules to load anchored to the right, for shells that support it, separated by ','\",\n\t\t\t\"(valid choices: aws, bzr, cwd, direnv, docker, docker-context, dotenv, duration, exit, fossil, gcp, git, gitlite, goenv, hg, host, jobs, kube, load, newline, nix-shell, node, perlbrew, perms, plenv, rbenv, root, rvm, shell-var, shenv, ssh, svn, termtitle, terraform-workspace, time, user, venv, vgo, wsl)\",\n\t\t\t\"Unrecognized modules will be invoked as 'powerline-go-MODULE' executable plugins and should output a (possibly empty) list of JSON objects that unmarshal to powerline-go's Segment structs.\")),\n\tPriority: flag.String(\n\t\t\"priority\",\n\t\tstrings.Join(defaults.Priority, \",\"),\n\t\tcommentsWithDefaults(\"Segments sorted by priority, if not enough space exists, the least priorized segments are removed first. Separate with ','\",\n\t\t\t\"(valid choices: aws, bzr, cwd, direnv, docker, docker-context, dotenv, duration, exit, fossil, gcp, git, gitlite, goenv, hg, host, jobs, kube, load, newline, nix-shell, node, perlbrew, perms, plenv, rbenv, root, rvm, shell-var, shenv, ssh, svn, termtitle, terraform-workspace, time, user, venv, vgo, vi-mode, wsl)\")),\n\tMaxWidthPercentage: flag.Int(\n\t\t\"max-width\",\n\t\tdefaults.MaxWidthPercentage,\n\t\tcomments(\"Maximum width of the shell that the prompt may use, in percent. Setting this to 0 disables the shrinking subsystem.\")),\n\tTruncateSegmentWidth: flag.Int(\n\t\t\"truncate-segment-width\",\n\t\tdefaults.TruncateSegmentWidth,\n\t\tcommentsWithDefaults(\"Maximum width of a segment, segments longer than this will be shortened if space is limited. Setting this to 0 disables it.\")),\n\tPrevError: flag.Int(\n\t\t\"error\",\n\t\tdefaults.PrevError,\n\t\tcomments(\"Exit code of previously executed command\")),\n\tNumericExitCodes: flag.Bool(\n\t\t\"numeric-exit-codes\",\n\t\tdefaults.NumericExitCodes,\n\t\tcomments(\"Shows numeric exit codes for errors.\")),\n\tIgnoreRepos: flag.String(\n\t\t\"ignore-repos\",\n\t\tstrings.Join(defaults.IgnoreRepos, \",\"),\n\t\tcomments(\"A list of git repos to ignore. Separate with ','.\",\n\t\t\t\"Repos are identified by their root directory.\")),\n\tShortenGKENames: flag.Bool(\n\t\t\"shorten-gke-names\",\n\t\tdefaults.ShortenGKENames,\n\t\tcomments(\"Shortens names for GKE Kube clusters.\")),\n\tShortenEKSNames: flag.Bool(\n\t\t\"shorten-eks-names\",\n\t\tdefaults.ShortenEKSNames,\n\t\tcomments(\"Shortens names for EKS Kube clusters.\")),\n\tShortenOpenshiftNames: flag.Bool(\n\t\t\"shorten-openshift-names\",\n\t\tdefaults.ShortenOpenshiftNames,\n\t\tcomments(\"Shortens names for Openshift Kube clusters.\")),\n\tShellVar: flag.String(\n\t\t\"shell-var\",\n\t\tdefaults.ShellVar,\n\t\tcomments(\"A shell variable to add to the segments.\")),\n\tShellVarNoWarnEmpty: flag.Bool(\n\t\t\"shell-var-no-warn-empty\",\n\t\tdefaults.ShellVarNoWarnEmpty,\n\t\tcomments(\"Disables warning for empty shell variable.\")),\n\tTrimADDomain: flag.Bool(\n\t\t\"trim-ad-domain\",\n\t\tdefaults.TrimADDomain,\n\t\tcomments(\"Trim the Domainname from the AD username.\")),\n\tPathAliases: flag.String(\n\t\t\"path-aliases\",\n\t\t\"\",\n\t\tcomments(\"One or more aliases from a path to a short name. Separate with ','.\",\n\t\t\t\"An alias maps a path like foo/bar/baz to a short name like FBB.\",\n\t\t\t\"Specify these as key/value pairs like foo/bar/baz=FBB.\",\n\t\t\t\"Use '~' for your home dir. You may need to escape this character to avoid shell substitution.\")),\n\tDuration: flag.String(\n\t\t\"duration\",\n\t\tdefaults.Duration,\n\t\tcomments(\"The elapsed clock-time of the previous command\")),\n\tTime: flag.String(\n\t\t\"time\",\n\t\tdefaults.Time,\n\t\tcomments(\"The layout string how a reference time should be represented.\",\n\t\t\t\"The reference time is predefined and not user choosen.\",\n\t\t\t\"Consult the golang documentation for details: https://pkg.go.dev/time#example-Time.Format\")),\n\tDurationMin: flag.String(\n\t\t\"duration-min\",\n\t\tdefaults.DurationMin,\n\t\tcomments(\"The minimal time a command has to take before the duration segment is shown\")),\n\tDurationLowPrecision: flag.Bool(\n\t\t\"duration-low-precision\",\n\t\tdefaults.DurationLowPrecision,\n\t\tcomments(\"Use low precision timing for duration with milliseconds as maximum resolution\")),\n\tEval: flag.Bool(\n\t\t\"eval\",\n\t\tdefaults.Eval,\n\t\tcomments(\"Output prompt in 'eval' format.\")),\n\tCondensed: flag.Bool(\n\t\t\"condensed\",\n\t\tdefaults.Condensed,\n\t\tcomments(\"Remove spacing between segments\")),\n\tIgnoreWarnings: flag.Bool(\n\t\t\"ignore-warnings\",\n\t\tdefaults.IgnoreWarnings,\n\t\tcomments(\"Ignores all warnings regarding unset or broken variables\")),\n\tViMode: flag.String(\n\t\t\"vi-mode\",\n\t\tdefaults.ViMode,\n\t\tcomments(\"The current vi-mode (eg. KEYMAP for zsh) for vi-module module\")),\n}\n"
        },
        {
          "name": "config.go",
          "type": "blob",
          "size": 3.6201171875,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\ntype SymbolMap map[string]SymbolTemplate\ntype ShellMap map[string]ShellInfo\ntype ThemeMap map[string]Theme\ntype AliasMap map[string]string\n\ntype Config struct {\n\tCwdMode                string    `json:\"cwd-mode\"`\n\tCwdMaxDepth            int       `json:\"cwd-max-depth\"`\n\tCwdMaxDirSize          int       `json:\"cwd-max-dir-size\"`\n\tColorizeHostname       bool      `json:\"colorize-hostname\"`\n\tHostnameOnlyIfSSH      bool      `json:\"hostname-only-if-ssh\"`\n\tSshAlternateIcon       bool      `json:\"alternate-ssh-icon\"`\n\tEastAsianWidth         bool      `json:\"east-asian-width\"`\n\tPromptOnNewLine        bool      `json:\"newline\"`\n\tStaticPromptIndicator  bool      `json:\"static-prompt-indicator\"`\n\tVenvNameSizeLimit      int       `json:\"venv-name-size-limit\"`\n\tJobs                   int       `json:\"-\"`\n\tGitAssumeUnchangedSize int64     `json:\"git-assume-unchanged-size\"`\n\tGitDisableStats        []string  `json:\"git-disable-stats\"`\n\tGitMode                string    `json:\"git-mode\"`\n\tMode                   string    `json:\"mode\"`\n\tTheme                  string    `json:\"theme\"`\n\tShell                  string    `json:\"shell\"`\n\tModules                []string  `json:\"modules\"`\n\tModulesRight           []string  `json:\"modules-right\"`\n\tPriority               []string  `json:\"priority\"`\n\tMaxWidthPercentage     int       `json:\"max-width-percentage\"`\n\tTruncateSegmentWidth   int       `json:\"truncate-segment-width\"`\n\tPrevError              int       `json:\"-\"`\n\tNumericExitCodes       bool      `json:\"numeric-exit-codes\"`\n\tIgnoreRepos            []string  `json:\"ignore-repos\"`\n\tShortenGKENames        bool      `json:\"shorten-gke-names\"`\n\tShortenEKSNames        bool      `json:\"shorten-eks-names\"`\n\tShortenOpenshiftNames  bool      `json:\"shorten-openshift-names\"`\n\tShellVar               string    `json:\"shell-var\"`\n\tShellVarNoWarnEmpty    bool      `json:\"shell-var-no-warn-empty\"`\n\tTrimADDomain           bool      `json:\"trim-ad-domain\"`\n\tPathAliases            AliasMap  `json:\"path-aliases\"`\n\tDuration               string    `json:\"-\"`\n\tDurationMin            string    `json:\"duration-min\"`\n\tDurationLowPrecision   bool      `json:\"duration-low-precision\"`\n\tEval                   bool      `json:\"eval\"`\n\tCondensed              bool      `json:\"condensed\"`\n\tIgnoreWarnings         bool      `json:\"ignore-warnings\"`\n\tModes                  SymbolMap `json:\"modes\"`\n\tShells                 ShellMap  `json:\"shells\"`\n\tThemes                 ThemeMap  `json:\"themes\"`\n\tTime                   string    `json:\"-\"`\n\tViMode                 string    `json:\"vi-mode\"`\n}\n\nfunc (mode *SymbolTemplate) UnmarshalJSON(data []byte) error {\n\ttype Alias SymbolTemplate\n\ttmp := defaults.Modes[defaults.Mode]\n\terr := json.Unmarshal(data, (*Alias)(&tmp))\n\tif err == nil {\n\t\t*mode = tmp\n\t}\n\treturn err\n}\n\nfunc (theme *Theme) UnmarshalJSON(data []byte) error {\n\ttype Alias Theme\n\ttmp := defaults.Themes[defaults.Theme]\n\terr := json.Unmarshal(data, (*Alias)(&tmp))\n\tif err == nil {\n\t\t*theme = tmp\n\t}\n\treturn err\n}\n\nfunc configPath() string {\n\thome, _ := os.UserHomeDir()\n\treturn filepath.Join(home, \".config\", \"powerline-go\", \"config.json\")\n}\n\nfunc (cfg *Config) Load() error {\n\tpath := configPath()\n\tfile, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\treturn nil // fail silently\n\t}\n\treturn json.Unmarshal(file, cfg)\n}\n\nfunc (cfg *Config) Save() error {\n\tpath := configPath()\n\ttmp := cfg\n\ttmp.Themes = map[string]Theme{}\n\ttmp.Modes = map[string]SymbolTemplate{}\n\ttmp.Shells = map[string]ShellInfo{}\n\tdata, err := json.MarshalIndent(tmp, \"\", \"    \")\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn ioutil.WriteFile(path, data, 0644)\n}\n"
        },
        {
          "name": "defaults.go",
          "type": "blob",
          "size": 30.271484375,
          "content": "//nolint:deadcode,varcheck\npackage main\n\nvar defaults = Config{\n\tCwdMode:                \"fancy\",\n\tCwdMaxDepth:            5,\n\tCwdMaxDirSize:          -1,\n\tColorizeHostname:       false,\n\tHostnameOnlyIfSSH:      false,\n\tSshAlternateIcon:       false,\n\tEastAsianWidth:         false,\n\tPromptOnNewLine:        false,\n\tStaticPromptIndicator:  false,\n\tVenvNameSizeLimit:      0,\n\tJobs:                   0,\n\tGitAssumeUnchangedSize: 2048,\n\tGitDisableStats:        []string{},\n\tGitMode:                \"fancy\",\n\tMode:                   \"patched\",\n\tTheme:                  \"default\",\n\tShell:                  \"autodetect\",\n\tModules: []string{\n\t\t\"venv\",\n\t\t\"user\",\n\t\t\"host\",\n\t\t\"ssh\",\n\t\t\"cwd\",\n\t\t\"perms\",\n\t\t\"git\",\n\t\t\"hg\",\n\t\t\"jobs\",\n\t\t\"exit\",\n\t\t\"root\",\n\t},\n\tModulesRight: []string{},\n\tPriority: []string{\n\t\t\"root\",\n\t\t\"cwd\",\n\t\t\"user\",\n\t\t\"host\",\n\t\t\"ssh\",\n\t\t\"perms\",\n\t\t\"git-branch\",\n\t\t\"git-status\",\n\t\t\"hg\",\n\t\t\"jobs\",\n\t\t\"exit\",\n\t\t\"cwd-path\",\n\t},\n\tMaxWidthPercentage:   0,\n\tTruncateSegmentWidth: 16,\n\tPrevError:            0,\n\tNumericExitCodes:     false,\n\tIgnoreRepos:          []string{},\n\tShortenGKENames:      false,\n\tShortenEKSNames:      false,\n\tShellVar:             \"\",\n\tShellVarNoWarnEmpty:  false,\n\tTrimADDomain:         false,\n\tPathAliases:          AliasMap{},\n\tDuration:             \"\",\n\tDurationMin:          \"0\",\n\tDurationLowPrecision: false,\n\tEval:                 false,\n\tCondensed:            false,\n\tIgnoreWarnings:       false,\n\tModes: SymbolMap{\n\t\t\"compatible\": {\n\t\t\tLock:                 \"RO\",\n\t\t\tNetwork:              \"SSH\",\n\t\t\tNetworkAlternate:     \"SSH\",\n\t\t\tSeparator:            \"\\u25B6\",\n\t\t\tSeparatorThin:        \"\\u276F\",\n\t\t\tSeparatorReverse:     \"\\u25C0\",\n\t\t\tSeparatorReverseThin: \"\\u276E\",\n\n\t\t\tRepoDetached:   \"\\u2693\",\n\t\t\tRepoAhead:      \"\\u2B06\",\n\t\t\tRepoBehind:     \"\\u2B07\",\n\t\t\tRepoStaged:     \"\\u2714\",\n\t\t\tRepoNotStaged:  \"\\u270E\",\n\t\t\tRepoUntracked:  \"+\",\n\t\t\tRepoConflicted: \"\\u273C\",\n\t\t\tRepoStashed:    \"\\u2691\",\n\n\t\t\tVenvIndicator: \"\\uE235\",\n\t\t\tNodeIndicator: \"\\u2B22\",\n\t\t\tRvmIndicator:  \"\\uE92B\",\n\t\t},\n\t\t\"patched\": {\n\t\t\tLock:                 \"\\uE0A2\",\n\t\t\tNetwork:              \"\\u260E \",\n\t\t\tNetworkAlternate:     \"\\uE0A2\",\n\t\t\tSeparator:            \"\\uE0B0\",\n\t\t\tSeparatorThin:        \"\\uE0B1\",\n\t\t\tSeparatorReverse:     \"\\uE0B2\",\n\t\t\tSeparatorReverseThin: \"\\uE0B3\",\n\n\t\t\tRepoBranch:     \"\\uE0A0\",\n\t\t\tRepoDetached:   \"\\u2693\",\n\t\t\tRepoAhead:      \"\\u2B06\",\n\t\t\tRepoBehind:     \"\\u2B07\",\n\t\t\tRepoStaged:     \"\\u2714\",\n\t\t\tRepoNotStaged:  \"\\u270E\",\n\t\t\tRepoUntracked:  \"+\",\n\t\t\tRepoConflicted: \"\\u273C\",\n\t\t\tRepoStashed:    \"\\u2691\",\n\n\t\t\tVenvIndicator: \"\\uE235\",\n\t\t\tNodeIndicator: \"\\u2B22\",\n\t\t\tRvmIndicator:  \"\\uE92B\",\n\t\t},\n\t\t\"flat\": {\n\t\t\tRepoDetached:   \"\\u2693\",\n\t\t\tRepoAhead:      \"\\u2B06\",\n\t\t\tRepoBehind:     \"\\u2B07\",\n\t\t\tRepoStaged:     \"\\u2714\",\n\t\t\tRepoNotStaged:  \"\\u270E\",\n\t\t\tRepoUntracked:  \"+\",\n\t\t\tRepoConflicted: \"\\u273C\",\n\t\t\tRepoStashed:    \"\\u2691\",\n\n\t\t\tVenvIndicator: \"\\uE235\",\n\t\t\tNodeIndicator: \"\\u2B22\",\n\t\t\tRvmIndicator:  \"\\uE92B\",\n\t\t},\n\t},\n\tShells: ShellMap{\n\t\t\"bash\": {\n\t\t\tColorTemplate:    \"\\\\[\\\\e%s\\\\]\",\n\t\t\tRootIndicator:    \"\\\\$\",\n\t\t\tEscapedBackslash: `\\\\\\\\`,\n\t\t\tEscapedBacktick:  \"\\\\`\",\n\t\t\tEscapedDollar:    `\\$`,\n\t\t\tEvalPromptPrefix: `PS1=\"`,\n\t\t\tEvalPromptSuffix: `\"`,\n\t\t},\n\t\t\"zsh\": {\n\t\t\tColorTemplate:         \"%%{\\u001b%s%%}\",\n\t\t\tRootIndicator:         \"%#\",\n\t\t\tEscapedBackslash:      `\\\\`,\n\t\t\tEscapedBacktick:       \"\\\\`\",\n\t\t\tEscapedDollar:         `\\$`,\n\t\t\tEvalPromptPrefix:      `PROMPT=\"`,\n\t\t\tEvalPromptSuffix:      `\"`,\n\t\t\tEvalPromptRightPrefix: `RPROMPT=\"`,\n\t\t\tEvalPromptRightSuffix: `\"`,\n\t\t},\n\t\t\"bare\": {\n\t\t\tColorTemplate: \"\u001b%s\",\n\t\t\tRootIndicator:    \"$\",\n\t\t\tEscapedBackslash: `\\`,\n\t\t\tEscapedBacktick:  \"`\",\n\t\t\tEscapedDollar:    `$`,\n\t\t},\n\t},\n\tThemes: ThemeMap{\n\t\t\"default\": {\n\t\t\tReset: 0xFF,\n\n\t\t\tDefaultFg: 250,\n\t\t\tDefaultBg: 240,\n\n\t\t\tUsernameFg:     250,\n\t\t\tUsernameBg:     240,\n\t\t\tUsernameRootBg: 124,\n\n\t\t\tHostnameFg: 250,\n\t\t\tHostnameBg: 238,\n\n\t\t\tHomeSpecialDisplay: true,\n\t\t\tHomeFg:             15,  // white\n\t\t\tHomeBg:             31,  // blueish\n\t\t\tAliasFg:            15,  // white\n\t\t\tAliasBg:            31,  // blueish\n\t\t\tPathFg:             250, // light grey\n\t\t\tPathBg:             237, // dark grey\n\t\t\tCwdFg:              254, // nearly-white grey\n\t\t\tSeparatorFg:        244,\n\n\t\t\tReadonlyFg: 254,\n\t\t\tReadonlyBg: 124,\n\n\t\t\tSSHFg: 254,\n\t\t\tSSHBg: 166, // medium orange\n\n\t\t\tDockerMachineFg: 177, // light purple\n\t\t\tDockerMachineBg: 55,  // purple\n\n\t\t\tKubeClusterFg:   117,\n\t\t\tKubeClusterBg:   26,\n\t\t\tKubeNamespaceFg: 170,\n\t\t\tKubeNamespaceBg: 17,\n\n\t\t\tWSLMachineFg: 250, // light grey\n\t\t\tWSLMachineBg: 238, // dark grey\n\n\t\t\tDotEnvFg: 15, // white\n\t\t\tDotEnvBg: 55, // purple\n\n\t\t\tAWSFg: 15,  // white\n\t\t\tAWSBg: 172, // AWS orange\n\n\t\t\tRepoCleanFg: 0,   // black\n\t\t\tRepoCleanBg: 148, // a light green color\n\t\t\tRepoDirtyFg: 15,  // white\n\t\t\tRepoDirtyBg: 161, // pink/red\n\n\t\t\tJobsFg: 39,\n\t\t\tJobsBg: 238,\n\n\t\t\tCmdPassedFg: 15,\n\t\t\tCmdPassedBg: 236,\n\t\t\tCmdFailedFg: 15,\n\t\t\tCmdFailedBg: 161,\n\n\t\t\tSvnChangesFg: 22, // dark green\n\t\t\tSvnChangesBg: 148,\n\n\t\t\tGCPFg: 117,\n\t\t\tGCPBg: 26,\n\n\t\t\tGitAheadFg:      250,\n\t\t\tGitAheadBg:      240,\n\t\t\tGitBehindFg:     250,\n\t\t\tGitBehindBg:     240,\n\t\t\tGitStagedFg:     15,\n\t\t\tGitStagedBg:     22,\n\t\t\tGitNotStagedFg:  15,\n\t\t\tGitNotStagedBg:  130,\n\t\t\tGitUntrackedFg:  15,\n\t\t\tGitUntrackedBg:  52,\n\t\t\tGitConflictedFg: 15,\n\t\t\tGitConflictedBg: 9,\n\t\t\tGitStashedFg:    15,\n\t\t\tGitStashedBg:    20,\n\n\t\t\tGoenvBg: 38,  // approx. Gopher Blue\n\t\t\tGoenvFg: 220, // approx. Secondary Yellow\n\n\t\t\tVirtualEnvFg: 00,\n\t\t\tVirtualEnvBg: 35, // a mid-tone green\n\n\t\t\tVirtualGoFg: 220, // approx. Secondary Yellow\n\t\t\tVirtualGoBg: 38,  // approx. Gopher Blue\n\n\t\t\tPerlbrewFg: 00,\n\t\t\tPerlbrewBg: 20, // a mid-tone blue\n\n\t\t\tPlEnvFg: 00,\n\t\t\tPlEnvBg: 32,\n\n\t\t\tTFWsFg: 15, // white\n\t\t\tTFWsBg: 26, // blue\n\n\t\t\tTimeFg: 15,\n\t\t\tTimeBg: 236,\n\n\t\t\tShellVarFg: 52,\n\t\t\tShellVarBg: 11,\n\n\t\t\tShEnvFg: 15,\n\t\t\tShEnvBg: 130,\n\n\t\t\tNodeFg:        15,\n\t\t\tNodeBg:        40,\n\t\t\tNodeVersionFg: 40,\n\t\t\tNodeVersionBg: 15,\n\n\t\t\tRvmFg: 255,\n\t\t\tRvmBg: 160,\n\n\t\t\tLoadFg:           15,\n\t\t\tLoadBg:           22,\n\t\t\tLoadHighBg:       161,\n\t\t\tLoadAvgValue:     5,\n\t\t\tLoadThresholdBad: 1.0,\n\n\t\t\tNixShellFg: 15,\n\t\t\tNixShellBg: 69, // a light blue\n\n\t\t\tDurationFg: 250,\n\t\t\tDurationBg: 237,\n\n\t\t\tHostnameColorizedFgMap: map[uint8]uint8{\n\t\t\t\t0:   250,\n\t\t\t\t1:   250,\n\t\t\t\t2:   120,\n\t\t\t\t3:   228,\n\t\t\t\t4:   250,\n\t\t\t\t5:   250,\n\t\t\t\t6:   123,\n\t\t\t\t7:   238,\n\t\t\t\t8:   0,\n\t\t\t\t9:   0,\n\t\t\t\t10:  0,\n\t\t\t\t11:  0,\n\t\t\t\t12:  250,\n\t\t\t\t13:  0,\n\t\t\t\t14:  0,\n\t\t\t\t15:  242,\n\t\t\t\t16:  250,\n\t\t\t\t17:  250,\n\t\t\t\t18:  250,\n\t\t\t\t19:  189,\n\t\t\t\t20:  254,\n\t\t\t\t21:  250,\n\t\t\t\t22:  83,\n\t\t\t\t23:  87,\n\t\t\t\t24:  117,\n\t\t\t\t25:  188,\n\t\t\t\t26:  254,\n\t\t\t\t27:  0,\n\t\t\t\t28:  120,\n\t\t\t\t29:  122,\n\t\t\t\t30:  123,\n\t\t\t\t31:  159,\n\t\t\t\t32:  255,\n\t\t\t\t33:  0,\n\t\t\t\t34:  157,\n\t\t\t\t35:  158,\n\t\t\t\t36:  159,\n\t\t\t\t37:  159,\n\t\t\t\t38:  195,\n\t\t\t\t39:  0,\n\t\t\t\t40:  194,\n\t\t\t\t41:  194,\n\t\t\t\t42:  195,\n\t\t\t\t43:  195,\n\t\t\t\t44:  195,\n\t\t\t\t45:  0,\n\t\t\t\t46:  0,\n\t\t\t\t47:  0,\n\t\t\t\t48:  0,\n\t\t\t\t49:  0,\n\t\t\t\t50:  0,\n\t\t\t\t51:  0,\n\t\t\t\t52:  250,\n\t\t\t\t53:  250,\n\t\t\t\t54:  250,\n\t\t\t\t55:  189,\n\t\t\t\t56:  254,\n\t\t\t\t57:  250,\n\t\t\t\t58:  227,\n\t\t\t\t59:  253,\n\t\t\t\t60:  255,\n\t\t\t\t61:  0,\n\t\t\t\t62:  233,\n\t\t\t\t63:  17,\n\t\t\t\t64:  192,\n\t\t\t\t65:  255,\n\t\t\t\t66:  195,\n\t\t\t\t67:  232,\n\t\t\t\t68:  233,\n\t\t\t\t69:  17,\n\t\t\t\t70:  193,\n\t\t\t\t71:  232,\n\t\t\t\t72:  232,\n\t\t\t\t73:  232,\n\t\t\t\t74:  234,\n\t\t\t\t75:  236,\n\t\t\t\t76:  194,\n\t\t\t\t77:  235,\n\t\t\t\t78:  235,\n\t\t\t\t79:  235,\n\t\t\t\t80:  235,\n\t\t\t\t81:  237,\n\t\t\t\t82:  0,\n\t\t\t\t83:  237,\n\t\t\t\t84:  237,\n\t\t\t\t85:  237,\n\t\t\t\t86:  237,\n\t\t\t\t87:  237,\n\t\t\t\t88:  250,\n\t\t\t\t89:  250,\n\t\t\t\t90:  250,\n\t\t\t\t91:  189,\n\t\t\t\t92:  254,\n\t\t\t\t93:  0,\n\t\t\t\t94:  222,\n\t\t\t\t95:  255,\n\t\t\t\t96:  255,\n\t\t\t\t97:  232,\n\t\t\t\t98:  233,\n\t\t\t\t99:  17,\n\t\t\t\t100: 228,\n\t\t\t\t101: 15,\n\t\t\t\t102: 232,\n\t\t\t\t103: 233,\n\t\t\t\t104: 17,\n\t\t\t\t105: 18,\n\t\t\t\t106: 229,\n\t\t\t\t107: 232,\n\t\t\t\t108: 234,\n\t\t\t\t109: 234,\n\t\t\t\t110: 236,\n\t\t\t\t111: 54,\n\t\t\t\t112: 230,\n\t\t\t\t113: 235,\n\t\t\t\t114: 22,\n\t\t\t\t115: 237,\n\t\t\t\t116: 238,\n\t\t\t\t117: 238,\n\t\t\t\t118: 0,\n\t\t\t\t119: 237,\n\t\t\t\t120: 22,\n\t\t\t\t121: 23,\n\t\t\t\t122: 23,\n\t\t\t\t123: 23,\n\t\t\t\t124: 252,\n\t\t\t\t125: 252,\n\t\t\t\t126: 189,\n\t\t\t\t127: 189,\n\t\t\t\t128: 254,\n\t\t\t\t129: 0,\n\t\t\t\t130: 223,\n\t\t\t\t131: 232,\n\t\t\t\t132: 232,\n\t\t\t\t133: 232,\n\t\t\t\t134: 233,\n\t\t\t\t135: 17,\n\t\t\t\t136: 229,\n\t\t\t\t137: 232,\n\t\t\t\t138: 233,\n\t\t\t\t139: 234,\n\t\t\t\t140: 53,\n\t\t\t\t141: 18,\n\t\t\t\t142: 229,\n\t\t\t\t143: 232,\n\t\t\t\t144: 234,\n\t\t\t\t145: 236,\n\t\t\t\t146: 17,\n\t\t\t\t147: 19,\n\t\t\t\t148: 230,\n\t\t\t\t149: 235,\n\t\t\t\t150: 238,\n\t\t\t\t151: 22,\n\t\t\t\t152: 23,\n\t\t\t\t153: 24,\n\t\t\t\t154: 0,\n\t\t\t\t155: 237,\n\t\t\t\t156: 22,\n\t\t\t\t157: 2,\n\t\t\t\t158: 29,\n\t\t\t\t159: 6,\n\t\t\t\t160: 254,\n\t\t\t\t161: 254,\n\t\t\t\t162: 254,\n\t\t\t\t163: 254,\n\t\t\t\t164: 254,\n\t\t\t\t165: 0,\n\t\t\t\t166: 255,\n\t\t\t\t167: 233,\n\t\t\t\t168: 233,\n\t\t\t\t169: 234,\n\t\t\t\t170: 234,\n\t\t\t\t171: 235,\n\t\t\t\t172: 230,\n\t\t\t\t173: 234,\n\t\t\t\t174: 52,\n\t\t\t\t175: 235,\n\t\t\t\t176: 53,\n\t\t\t\t177: 53,\n\t\t\t\t178: 230,\n\t\t\t\t179: 235,\n\t\t\t\t180: 236,\n\t\t\t\t181: 52,\n\t\t\t\t182: 53,\n\t\t\t\t183: 55,\n\t\t\t\t184: 230,\n\t\t\t\t185: 235,\n\t\t\t\t186: 238,\n\t\t\t\t187: 58,\n\t\t\t\t188: 240,\n\t\t\t\t189: 20,\n\t\t\t\t190: 0,\n\t\t\t\t191: 238,\n\t\t\t\t192: 58,\n\t\t\t\t193: 64,\n\t\t\t\t194: 35,\n\t\t\t\t195: 66,\n\t\t\t\t196: 0,\n\t\t\t\t197: 0,\n\t\t\t\t198: 0,\n\t\t\t\t199: 0,\n\t\t\t\t200: 0,\n\t\t\t\t201: 0,\n\t\t\t\t202: 0,\n\t\t\t\t203: 235,\n\t\t\t\t204: 235,\n\t\t\t\t205: 235,\n\t\t\t\t206: 235,\n\t\t\t\t207: 53,\n\t\t\t\t208: 0,\n\t\t\t\t209: 236,\n\t\t\t\t210: 52,\n\t\t\t\t211: 237,\n\t\t\t\t212: 53,\n\t\t\t\t213: 53,\n\t\t\t\t214: 0,\n\t\t\t\t215: 236,\n\t\t\t\t216: 238,\n\t\t\t\t217: 1,\n\t\t\t\t218: 89,\n\t\t\t\t219: 5,\n\t\t\t\t220: 0,\n\t\t\t\t221: 237,\n\t\t\t\t222: 58,\n\t\t\t\t223: 95,\n\t\t\t\t224: 131,\n\t\t\t\t225: 126,\n\t\t\t\t226: 0,\n\t\t\t\t227: 238,\n\t\t\t\t228: 58,\n\t\t\t\t229: 3,\n\t\t\t\t230: 143,\n\t\t\t\t231: 242,\n\t\t\t\t232: 250,\n\t\t\t\t233: 250,\n\t\t\t\t234: 250,\n\t\t\t\t235: 250,\n\t\t\t\t236: 250,\n\t\t\t\t237: 250,\n\t\t\t\t238: 251,\n\t\t\t\t239: 252,\n\t\t\t\t240: 188,\n\t\t\t\t241: 254,\n\t\t\t\t242: 254,\n\t\t\t\t243: 255,\n\t\t\t\t244: 0,\n\t\t\t\t245: 232,\n\t\t\t\t246: 233,\n\t\t\t\t247: 234,\n\t\t\t\t248: 235,\n\t\t\t\t249: 236,\n\t\t\t\t250: 237,\n\t\t\t\t251: 238,\n\t\t\t\t252: 239,\n\t\t\t\t253: 240,\n\t\t\t\t254: 242,\n\t\t\t\t255: 243,\n\t\t\t},\n\n\t\t\tViModeCommandFg: 0,\n\t\t\tViModeCommandBg: 250,\n\t\t\tViModeInsertFg:  22,\n\t\t\tViModeInsertBg:  70,\n\t\t},\n\t\t\"low-contrast\": {\n\t\t\tReset: 0xFF,\n\n\t\t\tDefaultFg: 234,\n\t\t\tDefaultBg: 250,\n\n\t\t\tUsernameFg:     234,\n\t\t\tUsernameBg:     250,\n\t\t\tUsernameRootBg: 198,\n\n\t\t\tHostnameFg: 234,\n\t\t\tHostnameBg: 252,\n\n\t\t\tHomeSpecialDisplay: true,\n\t\t\tHomeFg:             30, // blueish-green\n\t\t\tHomeBg:             15, // white\n\t\t\tAliasFg:            30, // blueish-green\n\t\t\tAliasBg:            15, // white\n\t\t\tPathFg:             234,\n\t\t\tPathBg:             254,\n\t\t\tCwdFg:              236,\n\t\t\tSeparatorFg:        244,\n\n\t\t\tReadonlyFg: 124,\n\t\t\tReadonlyBg: 253,\n\n\t\t\tSSHFg: 166, // medium orange\n\t\t\tSSHBg: 254,\n\n\t\t\tDockerMachineFg: 55,  // purple\n\t\t\tDockerMachineBg: 177, // light purple\n\n\t\t\tKubeClusterFg:   117,\n\t\t\tKubeClusterBg:   26,\n\t\t\tKubeNamespaceFg: 170,\n\t\t\tKubeNamespaceBg: 17,\n\n\t\t\tDotEnvFg: 15, // white\n\t\t\tDotEnvBg: 55, // purple\n\n\t\t\tRepoCleanFg: 232, // black\n\t\t\tRepoCleanBg: 230, // light yellow\n\t\t\tRepoDirtyFg: 232, // black\n\t\t\tRepoDirtyBg: 223, // orange/peach\n\n\t\t\tJobsFg: 238,\n\t\t\tJobsBg: 39,\n\n\t\t\tCmdPassedFg: 18,\n\t\t\tCmdPassedBg: 7,\n\t\t\tCmdFailedFg: 254,\n\t\t\tCmdFailedBg: 124,\n\n\t\t\tSvnChangesFg: 148,\n\t\t\tSvnChangesBg: 22, // dark green\n\n\t\t\tGitAheadFg:      240,\n\t\t\tGitAheadBg:      250,\n\t\t\tGitBehindFg:     240,\n\t\t\tGitBehindBg:     251,\n\t\t\tGitStagedFg:     22,\n\t\t\tGitStagedBg:     15,\n\t\t\tGitNotStagedFg:  130,\n\t\t\tGitNotStagedBg:  15,\n\t\t\tGitUntrackedFg:  52,\n\t\t\tGitUntrackedBg:  15,\n\t\t\tGitConflictedFg: 9,\n\t\t\tGitConflictedBg: 15,\n\t\t\tGitStashedFg:    15,\n\t\t\tGitStashedBg:    20,\n\n\t\t\tGoenvBg: 38,  // approx. Gopher Blue\n\t\t\tGoenvFg: 220, // approx. Secondary Yellow\n\n\t\t\tVirtualEnvFg: 35, // a mid-tone green\n\t\t\tVirtualEnvBg: 254,\n\n\t\t\tVirtualGoFg: 220, // approx. Secondary Yellow\n\t\t\tVirtualGoBg: 38,  // approx. Gopher Blue\n\n\t\t\tPerlbrewFg: 20, // a mid-tone blue\n\t\t\tPerlbrewBg: 15,\n\n\t\t\tPlEnvFg: 20, // a mid-tone blue\n\t\t\tPlEnvBg: 15,\n\n\t\t\tTimeFg: 236,\n\t\t\tTimeBg: 15,\n\n\t\t\tShEnvFg: 130,\n\t\t\tShEnvBg: 15,\n\n\t\t\tLoadFg:           15,\n\t\t\tLoadBg:           22,\n\t\t\tLoadHighBg:       161,\n\t\t\tLoadAvgValue:     5,\n\t\t\tLoadThresholdBad: 1.0,\n\n\t\t\tRvmFg: 255,\n\t\t\tRvmBg: 160,\n\n\t\t\tNixShellFg: 69, // a light blue\n\t\t\tNixShellBg: 254,\n\n\t\t\tHostnameColorizedFgMap: map[uint8]uint8{\n\t\t\t\t0:   250,\n\t\t\t\t1:   250,\n\t\t\t\t2:   120,\n\t\t\t\t3:   228,\n\t\t\t\t4:   250,\n\t\t\t\t5:   250,\n\t\t\t\t6:   123,\n\t\t\t\t7:   238,\n\t\t\t\t8:   0,\n\t\t\t\t9:   0,\n\t\t\t\t10:  0,\n\t\t\t\t11:  0,\n\t\t\t\t12:  250,\n\t\t\t\t13:  0,\n\t\t\t\t14:  0,\n\t\t\t\t15:  242,\n\t\t\t\t16:  250,\n\t\t\t\t17:  250,\n\t\t\t\t18:  250,\n\t\t\t\t19:  189,\n\t\t\t\t20:  254,\n\t\t\t\t21:  250,\n\t\t\t\t22:  83,\n\t\t\t\t23:  87,\n\t\t\t\t24:  117,\n\t\t\t\t25:  188,\n\t\t\t\t26:  254,\n\t\t\t\t27:  0,\n\t\t\t\t28:  120,\n\t\t\t\t29:  122,\n\t\t\t\t30:  123,\n\t\t\t\t31:  159,\n\t\t\t\t32:  255,\n\t\t\t\t33:  0,\n\t\t\t\t34:  157,\n\t\t\t\t35:  158,\n\t\t\t\t36:  159,\n\t\t\t\t37:  159,\n\t\t\t\t38:  195,\n\t\t\t\t39:  0,\n\t\t\t\t40:  194,\n\t\t\t\t41:  194,\n\t\t\t\t42:  195,\n\t\t\t\t43:  195,\n\t\t\t\t44:  195,\n\t\t\t\t45:  0,\n\t\t\t\t46:  0,\n\t\t\t\t47:  0,\n\t\t\t\t48:  0,\n\t\t\t\t49:  0,\n\t\t\t\t50:  0,\n\t\t\t\t51:  0,\n\t\t\t\t52:  250,\n\t\t\t\t53:  250,\n\t\t\t\t54:  250,\n\t\t\t\t55:  189,\n\t\t\t\t56:  254,\n\t\t\t\t57:  250,\n\t\t\t\t58:  227,\n\t\t\t\t59:  253,\n\t\t\t\t60:  255,\n\t\t\t\t61:  0,\n\t\t\t\t62:  233,\n\t\t\t\t63:  17,\n\t\t\t\t64:  192,\n\t\t\t\t65:  255,\n\t\t\t\t66:  195,\n\t\t\t\t67:  232,\n\t\t\t\t68:  233,\n\t\t\t\t69:  17,\n\t\t\t\t70:  193,\n\t\t\t\t71:  232,\n\t\t\t\t72:  232,\n\t\t\t\t73:  232,\n\t\t\t\t74:  234,\n\t\t\t\t75:  236,\n\t\t\t\t76:  194,\n\t\t\t\t77:  235,\n\t\t\t\t78:  235,\n\t\t\t\t79:  235,\n\t\t\t\t80:  235,\n\t\t\t\t81:  237,\n\t\t\t\t82:  0,\n\t\t\t\t83:  237,\n\t\t\t\t84:  237,\n\t\t\t\t85:  237,\n\t\t\t\t86:  237,\n\t\t\t\t87:  237,\n\t\t\t\t88:  250,\n\t\t\t\t89:  250,\n\t\t\t\t90:  250,\n\t\t\t\t91:  189,\n\t\t\t\t92:  254,\n\t\t\t\t93:  0,\n\t\t\t\t94:  222,\n\t\t\t\t95:  255,\n\t\t\t\t96:  255,\n\t\t\t\t97:  232,\n\t\t\t\t98:  233,\n\t\t\t\t99:  17,\n\t\t\t\t100: 228,\n\t\t\t\t101: 15,\n\t\t\t\t102: 232,\n\t\t\t\t103: 233,\n\t\t\t\t104: 17,\n\t\t\t\t105: 18,\n\t\t\t\t106: 229,\n\t\t\t\t107: 232,\n\t\t\t\t108: 234,\n\t\t\t\t109: 234,\n\t\t\t\t110: 236,\n\t\t\t\t111: 54,\n\t\t\t\t112: 230,\n\t\t\t\t113: 235,\n\t\t\t\t114: 22,\n\t\t\t\t115: 237,\n\t\t\t\t116: 238,\n\t\t\t\t117: 238,\n\t\t\t\t118: 0,\n\t\t\t\t119: 237,\n\t\t\t\t120: 22,\n\t\t\t\t121: 23,\n\t\t\t\t122: 23,\n\t\t\t\t123: 23,\n\t\t\t\t124: 252,\n\t\t\t\t125: 252,\n\t\t\t\t126: 189,\n\t\t\t\t127: 189,\n\t\t\t\t128: 254,\n\t\t\t\t129: 0,\n\t\t\t\t130: 223,\n\t\t\t\t131: 232,\n\t\t\t\t132: 232,\n\t\t\t\t133: 232,\n\t\t\t\t134: 233,\n\t\t\t\t135: 17,\n\t\t\t\t136: 229,\n\t\t\t\t137: 232,\n\t\t\t\t138: 233,\n\t\t\t\t139: 234,\n\t\t\t\t140: 53,\n\t\t\t\t141: 18,\n\t\t\t\t142: 229,\n\t\t\t\t143: 232,\n\t\t\t\t144: 234,\n\t\t\t\t145: 236,\n\t\t\t\t146: 17,\n\t\t\t\t147: 19,\n\t\t\t\t148: 230,\n\t\t\t\t149: 235,\n\t\t\t\t150: 238,\n\t\t\t\t151: 22,\n\t\t\t\t152: 23,\n\t\t\t\t153: 24,\n\t\t\t\t154: 0,\n\t\t\t\t155: 237,\n\t\t\t\t156: 22,\n\t\t\t\t157: 2,\n\t\t\t\t158: 29,\n\t\t\t\t159: 6,\n\t\t\t\t160: 254,\n\t\t\t\t161: 254,\n\t\t\t\t162: 254,\n\t\t\t\t163: 254,\n\t\t\t\t164: 254,\n\t\t\t\t165: 0,\n\t\t\t\t166: 255,\n\t\t\t\t167: 233,\n\t\t\t\t168: 233,\n\t\t\t\t169: 234,\n\t\t\t\t170: 234,\n\t\t\t\t171: 235,\n\t\t\t\t172: 230,\n\t\t\t\t173: 234,\n\t\t\t\t174: 52,\n\t\t\t\t175: 235,\n\t\t\t\t176: 53,\n\t\t\t\t177: 53,\n\t\t\t\t178: 230,\n\t\t\t\t179: 235,\n\t\t\t\t180: 236,\n\t\t\t\t181: 52,\n\t\t\t\t182: 53,\n\t\t\t\t183: 55,\n\t\t\t\t184: 230,\n\t\t\t\t185: 235,\n\t\t\t\t186: 238,\n\t\t\t\t187: 58,\n\t\t\t\t188: 240,\n\t\t\t\t189: 20,\n\t\t\t\t190: 0,\n\t\t\t\t191: 238,\n\t\t\t\t192: 58,\n\t\t\t\t193: 64,\n\t\t\t\t194: 35,\n\t\t\t\t195: 66,\n\t\t\t\t196: 0,\n\t\t\t\t197: 0,\n\t\t\t\t198: 0,\n\t\t\t\t199: 0,\n\t\t\t\t200: 0,\n\t\t\t\t201: 0,\n\t\t\t\t202: 0,\n\t\t\t\t203: 235,\n\t\t\t\t204: 235,\n\t\t\t\t205: 235,\n\t\t\t\t206: 235,\n\t\t\t\t207: 53,\n\t\t\t\t208: 0,\n\t\t\t\t209: 236,\n\t\t\t\t210: 52,\n\t\t\t\t211: 237,\n\t\t\t\t212: 53,\n\t\t\t\t213: 53,\n\t\t\t\t214: 0,\n\t\t\t\t215: 236,\n\t\t\t\t216: 238,\n\t\t\t\t217: 1,\n\t\t\t\t218: 89,\n\t\t\t\t219: 5,\n\t\t\t\t220: 0,\n\t\t\t\t221: 237,\n\t\t\t\t222: 58,\n\t\t\t\t223: 95,\n\t\t\t\t224: 131,\n\t\t\t\t225: 126,\n\t\t\t\t226: 0,\n\t\t\t\t227: 238,\n\t\t\t\t228: 58,\n\t\t\t\t229: 3,\n\t\t\t\t230: 143,\n\t\t\t\t231: 242,\n\t\t\t\t232: 250,\n\t\t\t\t233: 250,\n\t\t\t\t234: 250,\n\t\t\t\t235: 250,\n\t\t\t\t236: 250,\n\t\t\t\t237: 250,\n\t\t\t\t238: 251,\n\t\t\t\t239: 252,\n\t\t\t\t240: 188,\n\t\t\t\t241: 254,\n\t\t\t\t242: 254,\n\t\t\t\t243: 255,\n\t\t\t\t244: 0,\n\t\t\t\t245: 232,\n\t\t\t\t246: 233,\n\t\t\t\t247: 234,\n\t\t\t\t248: 235,\n\t\t\t\t249: 236,\n\t\t\t\t250: 237,\n\t\t\t\t251: 238,\n\t\t\t\t252: 239,\n\t\t\t\t253: 240,\n\t\t\t\t254: 242,\n\t\t\t\t255: 243,\n\t\t\t},\n\n\t\t\tViModeCommandFg: 0,\n\t\t\tViModeCommandBg: 250,\n\t\t\tViModeInsertFg:  22,\n\t\t\tViModeInsertBg:  70,\n\t\t},\n\t\t\"solarized-dark16\": {\n\t\t\tReset:              8,\n\t\t\tDefaultFg:          15,\n\t\t\tDefaultBg:          4,\n\t\t\tUsernameFg:         15,\n\t\t\tUsernameBg:         4,\n\t\t\tUsernameRootBg:     1,\n\t\t\tHostnameFg:         15,\n\t\t\tHostnameBg:         0,\n\t\t\tHomeSpecialDisplay: false,\n\t\t\tHomeFg:             15,\n\t\t\tHomeBg:             4,\n\t\t\tPathFg:             15,\n\t\t\tPathBg:             10,\n\t\t\tCwdFg:              15,\n\t\t\tSeparatorFg:        15,\n\t\t\tReadonlyFg:         8,\n\t\t\tReadonlyBg:         1,\n\t\t\tSSHFg:              8,\n\t\t\tSSHBg:              9,\n\t\t\tDockerMachineFg:    13,\n\t\t\tDockerMachineBg:    55,\n\t\t\tDotEnvFg:           15,\n\t\t\tDotEnvBg:           55,\n\t\t\tRepoCleanFg:        15,\n\t\t\tRepoCleanBg:        3,\n\t\t\tRepoDirtyFg:        15,\n\t\t\tRepoDirtyBg:        5,\n\t\t\tJobsFg:             4,\n\t\t\tJobsBg:             0,\n\t\t\tCmdPassedFg:        15,\n\t\t\tCmdPassedBg:        0,\n\t\t\tCmdFailedFg:        15,\n\t\t\tCmdFailedBg:        5,\n\t\t\tSvnChangesFg:       2,\n\t\t\tSvnChangesBg:       3,\n\t\t\tGitAheadFg:         14,\n\t\t\tGitAheadBg:         10,\n\t\t\tGitBehindFg:        14,\n\t\t\tGitBehindBg:        10,\n\t\t\tGitStagedFg:        15,\n\t\t\tGitStagedBg:        2,\n\t\t\tGitNotStagedFg:     15,\n\t\t\tGitNotStagedBg:     9,\n\t\t\tGitUntrackedFg:     15,\n\t\t\tGitUntrackedBg:     1,\n\t\t\tGitConflictedFg:    15,\n\t\t\tGitConflictedBg:    1,\n\t\t\tGitStashedFg:       15,\n\t\t\tGitStashedBg:       4,\n\t\t\tGoenvBg:            38,  // approx. Gopher Blue\n\t\t\tGoenvFg:            220, // approx. Secondary Yellow\n\t\t\tVirtualEnvFg:       8,\n\t\t\tVirtualEnvBg:       6,\n\t\t\tPerlbrewFg:         8,\n\t\t\tPerlbrewBg:         4,\n\t\t\tPlEnvFg:            8,\n\t\t\tPlEnvBg:            4,\n\t\t\tTimeFg:             15,\n\t\t\tTimeBg:             0,\n\t\t\tShellVarFg:         1,\n\t\t\tShellVarBg:         11,\n\t\t\tShEnvFg:            15,\n\t\t\tShEnvBg:            9,\n\t\t\tNodeFg:             15,\n\t\t\tNodeBg:             40,\n\t\t\tNodeVersionFg:      40,\n\t\t\tNodeVersionBg:      15,\n\t\t\tLoadFg:             15,\n\t\t\tLoadBg:             2,\n\t\t\tLoadHighBg:         5,\n\t\t\tLoadAvgValue:       5,\n\t\t\tLoadThresholdBad:   1.0,\n\t\t\tRvmFg:              8,\n\t\t\tRvmBg:              6,\n\t\t\tNixShellFg:         0,\n\t\t\tNixShellBg:         4,\n\t\t\tHostnameColorizedFgMap: map[uint8]uint8{\n\t\t\t\t0:   14,\n\t\t\t\t1:   14,\n\t\t\t\t2:   120,\n\t\t\t\t3:   228,\n\t\t\t\t4:   14,\n\t\t\t\t5:   14,\n\t\t\t\t6:   123,\n\t\t\t\t7:   0,\n\t\t\t\t8:   8,\n\t\t\t\t9:   8,\n\t\t\t\t10:  8,\n\t\t\t\t11:  8,\n\t\t\t\t12:  14,\n\t\t\t\t13:  8,\n\t\t\t\t14:  8,\n\t\t\t\t15:  242,\n\t\t\t\t16:  14,\n\t\t\t\t17:  14,\n\t\t\t\t18:  14,\n\t\t\t\t19:  189,\n\t\t\t\t20:  8,\n\t\t\t\t21:  14,\n\t\t\t\t22:  83,\n\t\t\t\t23:  87,\n\t\t\t\t24:  117,\n\t\t\t\t25:  188,\n\t\t\t\t26:  8,\n\t\t\t\t27:  8,\n\t\t\t\t28:  120,\n\t\t\t\t29:  122,\n\t\t\t\t30:  123,\n\t\t\t\t31:  159,\n\t\t\t\t32:  8,\n\t\t\t\t33:  8,\n\t\t\t\t34:  157,\n\t\t\t\t35:  158,\n\t\t\t\t36:  159,\n\t\t\t\t37:  159,\n\t\t\t\t38:  195,\n\t\t\t\t39:  8,\n\t\t\t\t40:  194,\n\t\t\t\t41:  194,\n\t\t\t\t42:  195,\n\t\t\t\t43:  195,\n\t\t\t\t44:  195,\n\t\t\t\t45:  8,\n\t\t\t\t46:  8,\n\t\t\t\t47:  8,\n\t\t\t\t48:  8,\n\t\t\t\t49:  8,\n\t\t\t\t50:  8,\n\t\t\t\t51:  8,\n\t\t\t\t52:  14,\n\t\t\t\t53:  14,\n\t\t\t\t54:  14,\n\t\t\t\t55:  189,\n\t\t\t\t56:  8,\n\t\t\t\t57:  14,\n\t\t\t\t58:  227,\n\t\t\t\t59:  253,\n\t\t\t\t60:  8,\n\t\t\t\t61:  8,\n\t\t\t\t62:  233,\n\t\t\t\t63:  17,\n\t\t\t\t64:  192,\n\t\t\t\t65:  8,\n\t\t\t\t66:  195,\n\t\t\t\t67:  232,\n\t\t\t\t68:  233,\n\t\t\t\t69:  17,\n\t\t\t\t70:  193,\n\t\t\t\t71:  232,\n\t\t\t\t72:  232,\n\t\t\t\t73:  232,\n\t\t\t\t74:  8,\n\t\t\t\t75:  0,\n\t\t\t\t76:  194,\n\t\t\t\t77:  0,\n\t\t\t\t78:  0,\n\t\t\t\t79:  0,\n\t\t\t\t80:  0,\n\t\t\t\t81:  0,\n\t\t\t\t82:  8,\n\t\t\t\t83:  0,\n\t\t\t\t84:  0,\n\t\t\t\t85:  0,\n\t\t\t\t86:  0,\n\t\t\t\t87:  0,\n\t\t\t\t88:  14,\n\t\t\t\t89:  14,\n\t\t\t\t90:  14,\n\t\t\t\t91:  189,\n\t\t\t\t92:  8,\n\t\t\t\t93:  8,\n\t\t\t\t94:  222,\n\t\t\t\t95:  8,\n\t\t\t\t96:  8,\n\t\t\t\t97:  232,\n\t\t\t\t98:  233,\n\t\t\t\t99:  17,\n\t\t\t\t100: 228,\n\t\t\t\t101: 15,\n\t\t\t\t102: 232,\n\t\t\t\t103: 233,\n\t\t\t\t104: 17,\n\t\t\t\t105: 18,\n\t\t\t\t106: 229,\n\t\t\t\t107: 232,\n\t\t\t\t108: 8,\n\t\t\t\t109: 8,\n\t\t\t\t110: 0,\n\t\t\t\t111: 54,\n\t\t\t\t112: 15,\n\t\t\t\t113: 0,\n\t\t\t\t114: 2,\n\t\t\t\t115: 0,\n\t\t\t\t116: 0,\n\t\t\t\t117: 0,\n\t\t\t\t118: 8,\n\t\t\t\t119: 0,\n\t\t\t\t120: 2,\n\t\t\t\t121: 23,\n\t\t\t\t122: 23,\n\t\t\t\t123: 23,\n\t\t\t\t124: 252,\n\t\t\t\t125: 252,\n\t\t\t\t126: 189,\n\t\t\t\t127: 189,\n\t\t\t\t128: 8,\n\t\t\t\t129: 8,\n\t\t\t\t130: 223,\n\t\t\t\t131: 232,\n\t\t\t\t132: 232,\n\t\t\t\t133: 232,\n\t\t\t\t134: 233,\n\t\t\t\t135: 17,\n\t\t\t\t136: 229,\n\t\t\t\t137: 232,\n\t\t\t\t138: 233,\n\t\t\t\t139: 8,\n\t\t\t\t140: 53,\n\t\t\t\t141: 18,\n\t\t\t\t142: 229,\n\t\t\t\t143: 232,\n\t\t\t\t144: 8,\n\t\t\t\t145: 0,\n\t\t\t\t146: 17,\n\t\t\t\t147: 19,\n\t\t\t\t148: 15,\n\t\t\t\t149: 0,\n\t\t\t\t150: 0,\n\t\t\t\t151: 2,\n\t\t\t\t152: 23,\n\t\t\t\t153: 24,\n\t\t\t\t154: 8,\n\t\t\t\t155: 0,\n\t\t\t\t156: 2,\n\t\t\t\t157: 2,\n\t\t\t\t158: 29,\n\t\t\t\t159: 6,\n\t\t\t\t160: 8,\n\t\t\t\t161: 8,\n\t\t\t\t162: 8,\n\t\t\t\t163: 8,\n\t\t\t\t164: 8,\n\t\t\t\t165: 8,\n\t\t\t\t166: 8,\n\t\t\t\t167: 233,\n\t\t\t\t168: 233,\n\t\t\t\t169: 8,\n\t\t\t\t170: 8,\n\t\t\t\t171: 0,\n\t\t\t\t172: 15,\n\t\t\t\t173: 8,\n\t\t\t\t174: 1,\n\t\t\t\t175: 0,\n\t\t\t\t176: 53,\n\t\t\t\t177: 53,\n\t\t\t\t178: 15,\n\t\t\t\t179: 0,\n\t\t\t\t180: 0,\n\t\t\t\t181: 1,\n\t\t\t\t182: 53,\n\t\t\t\t183: 55,\n\t\t\t\t184: 15,\n\t\t\t\t185: 0,\n\t\t\t\t186: 0,\n\t\t\t\t187: 58,\n\t\t\t\t188: 10,\n\t\t\t\t189: 4,\n\t\t\t\t190: 8,\n\t\t\t\t191: 0,\n\t\t\t\t192: 58,\n\t\t\t\t193: 2,\n\t\t\t\t194: 35,\n\t\t\t\t195: 66,\n\t\t\t\t196: 8,\n\t\t\t\t197: 8,\n\t\t\t\t198: 8,\n\t\t\t\t199: 8,\n\t\t\t\t200: 8,\n\t\t\t\t201: 8,\n\t\t\t\t202: 8,\n\t\t\t\t203: 0,\n\t\t\t\t204: 0,\n\t\t\t\t205: 0,\n\t\t\t\t206: 0,\n\t\t\t\t207: 53,\n\t\t\t\t208: 8,\n\t\t\t\t209: 0,\n\t\t\t\t210: 1,\n\t\t\t\t211: 0,\n\t\t\t\t212: 53,\n\t\t\t\t213: 53,\n\t\t\t\t214: 8,\n\t\t\t\t215: 0,\n\t\t\t\t216: 0,\n\t\t\t\t217: 1,\n\t\t\t\t218: 89,\n\t\t\t\t219: 5,\n\t\t\t\t220: 8,\n\t\t\t\t221: 0,\n\t\t\t\t222: 58,\n\t\t\t\t223: 95,\n\t\t\t\t224: 131,\n\t\t\t\t225: 126,\n\t\t\t\t226: 8,\n\t\t\t\t227: 0,\n\t\t\t\t228: 58,\n\t\t\t\t229: 3,\n\t\t\t\t230: 143,\n\t\t\t\t231: 242,\n\t\t\t\t232: 14,\n\t\t\t\t233: 14,\n\t\t\t\t234: 14,\n\t\t\t\t235: 14,\n\t\t\t\t236: 14,\n\t\t\t\t237: 14,\n\t\t\t\t238: 251,\n\t\t\t\t239: 252,\n\t\t\t\t240: 188,\n\t\t\t\t241: 8,\n\t\t\t\t242: 8,\n\t\t\t\t243: 8,\n\t\t\t\t244: 8,\n\t\t\t\t245: 232,\n\t\t\t\t246: 233,\n\t\t\t\t247: 8,\n\t\t\t\t248: 0,\n\t\t\t\t249: 0,\n\t\t\t\t250: 0,\n\t\t\t\t251: 0,\n\t\t\t\t252: 239,\n\t\t\t\t253: 10,\n\t\t\t\t254: 242,\n\t\t\t\t255: 243,\n\t\t\t},\n\n\t\t\tViModeCommandFg: 0,\n\t\t\tViModeCommandBg: 250,\n\t\t\tViModeInsertFg:  22,\n\t\t\tViModeInsertBg:  70,\n\t\t},\n\t\t\"solarized-light16\": {\n\t\t\tReset:              0,\n\t\t\tDefaultFg:          15,\n\t\t\tDefaultBg:          4,\n\t\t\tUsernameFg:         15,\n\t\t\tUsernameBg:         4,\n\t\t\tUsernameRootBg:     1,\n\t\t\tHostnameFg:         15,\n\t\t\tHostnameBg:         7,\n\t\t\tHomeSpecialDisplay: false,\n\t\t\tHomeFg:             15,\n\t\t\tHomeBg:             4,\n\t\t\tPathFg:             15,\n\t\t\tPathBg:             10,\n\t\t\tCwdFg:              15,\n\t\t\tSeparatorFg:        15,\n\t\t\tReadonlyFg:         8,\n\t\t\tReadonlyBg:         1,\n\t\t\tSSHFg:              8,\n\t\t\tSSHBg:              9,\n\t\t\tDockerMachineFg:    13,\n\t\t\tDockerMachineBg:    55,\n\t\t\tDotEnvFg:           15,\n\t\t\tDotEnvBg:           55,\n\t\t\tRepoCleanFg:        15,\n\t\t\tRepoCleanBg:        3,\n\t\t\tRepoDirtyFg:        15,\n\t\t\tRepoDirtyBg:        5,\n\t\t\tJobsFg:             4,\n\t\t\tJobsBg:             0,\n\t\t\tCmdPassedFg:        10,\n\t\t\tCmdPassedBg:        7,\n\t\t\tCmdFailedFg:        15,\n\t\t\tCmdFailedBg:        5,\n\t\t\tSvnChangesFg:       2,\n\t\t\tSvnChangesBg:       3,\n\t\t\tGitAheadFg:         14,\n\t\t\tGitAheadBg:         10,\n\t\t\tGitBehindFg:        14,\n\t\t\tGitBehindBg:        10,\n\t\t\tGitStagedFg:        15,\n\t\t\tGitStagedBg:        2,\n\t\t\tGitNotStagedFg:     15,\n\t\t\tGitNotStagedBg:     9,\n\t\t\tGitUntrackedFg:     15,\n\t\t\tGitUntrackedBg:     1,\n\t\t\tGitConflictedFg:    15,\n\t\t\tGitConflictedBg:    1,\n\t\t\tGitStashedFg:       15,\n\t\t\tGitStashedBg:       4,\n\t\t\tGoenvBg:            38,  // approx. Gopher Blue\n\t\t\tGoenvFg:            220, // approx. Secondary Yellow\n\t\t\tVirtualEnvFg:       8,\n\t\t\tVirtualEnvBg:       6,\n\t\t\tPerlbrewFg:         8,\n\t\t\tPerlbrewBg:         4,\n\t\t\tPlEnvFg:            8,\n\t\t\tPlEnvBg:            4,\n\t\t\tTimeFg:             15,\n\t\t\tTimeBg:             0,\n\t\t\tShellVarFg:         1,\n\t\t\tShellVarBg:         11,\n\t\t\tShEnvFg:            15,\n\t\t\tShEnvBg:            9,\n\t\t\tNodeFg:             15,\n\t\t\tNodeBg:             40,\n\t\t\tNodeVersionFg:      40,\n\t\t\tNodeVersionBg:      15,\n\t\t\tLoadFg:             15,\n\t\t\tLoadBg:             2,\n\t\t\tLoadHighBg:         5,\n\t\t\tLoadAvgValue:       5,\n\t\t\tLoadThresholdBad:   1.0,\n\t\t\tRvmFg:              8,\n\t\t\tRvmBg:              6,\n\t\t\tNixShellFg:         0,\n\t\t\tNixShellBg:         7,\n\t\t\tHostnameColorizedFgMap: map[uint8]uint8{\n\t\t\t\t0:   14,\n\t\t\t\t1:   14,\n\t\t\t\t2:   120,\n\t\t\t\t3:   228,\n\t\t\t\t4:   14,\n\t\t\t\t5:   14,\n\t\t\t\t6:   123,\n\t\t\t\t7:   0,\n\t\t\t\t8:   8,\n\t\t\t\t9:   8,\n\t\t\t\t10:  8,\n\t\t\t\t11:  8,\n\t\t\t\t12:  14,\n\t\t\t\t13:  8,\n\t\t\t\t14:  8,\n\t\t\t\t15:  242,\n\t\t\t\t16:  14,\n\t\t\t\t17:  14,\n\t\t\t\t18:  14,\n\t\t\t\t19:  189,\n\t\t\t\t20:  8,\n\t\t\t\t21:  14,\n\t\t\t\t22:  83,\n\t\t\t\t23:  87,\n\t\t\t\t24:  117,\n\t\t\t\t25:  188,\n\t\t\t\t26:  8,\n\t\t\t\t27:  8,\n\t\t\t\t28:  120,\n\t\t\t\t29:  122,\n\t\t\t\t30:  123,\n\t\t\t\t31:  159,\n\t\t\t\t32:  8,\n\t\t\t\t33:  8,\n\t\t\t\t34:  157,\n\t\t\t\t35:  158,\n\t\t\t\t36:  159,\n\t\t\t\t37:  159,\n\t\t\t\t38:  195,\n\t\t\t\t39:  8,\n\t\t\t\t40:  194,\n\t\t\t\t41:  194,\n\t\t\t\t42:  195,\n\t\t\t\t43:  195,\n\t\t\t\t44:  195,\n\t\t\t\t45:  8,\n\t\t\t\t46:  8,\n\t\t\t\t47:  8,\n\t\t\t\t48:  8,\n\t\t\t\t49:  8,\n\t\t\t\t50:  8,\n\t\t\t\t51:  8,\n\t\t\t\t52:  14,\n\t\t\t\t53:  14,\n\t\t\t\t54:  14,\n\t\t\t\t55:  189,\n\t\t\t\t56:  8,\n\t\t\t\t57:  14,\n\t\t\t\t58:  227,\n\t\t\t\t59:  253,\n\t\t\t\t60:  8,\n\t\t\t\t61:  8,\n\t\t\t\t62:  233,\n\t\t\t\t63:  17,\n\t\t\t\t64:  192,\n\t\t\t\t65:  8,\n\t\t\t\t66:  195,\n\t\t\t\t67:  232,\n\t\t\t\t68:  233,\n\t\t\t\t69:  17,\n\t\t\t\t70:  193,\n\t\t\t\t71:  232,\n\t\t\t\t72:  232,\n\t\t\t\t73:  232,\n\t\t\t\t74:  8,\n\t\t\t\t75:  0,\n\t\t\t\t76:  194,\n\t\t\t\t77:  0,\n\t\t\t\t78:  0,\n\t\t\t\t79:  0,\n\t\t\t\t80:  0,\n\t\t\t\t81:  0,\n\t\t\t\t82:  8,\n\t\t\t\t83:  0,\n\t\t\t\t84:  0,\n\t\t\t\t85:  0,\n\t\t\t\t86:  0,\n\t\t\t\t87:  0,\n\t\t\t\t88:  14,\n\t\t\t\t89:  14,\n\t\t\t\t90:  14,\n\t\t\t\t91:  189,\n\t\t\t\t92:  8,\n\t\t\t\t93:  8,\n\t\t\t\t94:  222,\n\t\t\t\t95:  8,\n\t\t\t\t96:  8,\n\t\t\t\t97:  232,\n\t\t\t\t98:  233,\n\t\t\t\t99:  17,\n\t\t\t\t100: 228,\n\t\t\t\t101: 15,\n\t\t\t\t102: 232,\n\t\t\t\t103: 233,\n\t\t\t\t104: 17,\n\t\t\t\t105: 18,\n\t\t\t\t106: 229,\n\t\t\t\t107: 232,\n\t\t\t\t108: 8,\n\t\t\t\t109: 8,\n\t\t\t\t110: 0,\n\t\t\t\t111: 54,\n\t\t\t\t112: 15,\n\t\t\t\t113: 0,\n\t\t\t\t114: 2,\n\t\t\t\t115: 0,\n\t\t\t\t116: 0,\n\t\t\t\t117: 0,\n\t\t\t\t118: 8,\n\t\t\t\t119: 0,\n\t\t\t\t120: 2,\n\t\t\t\t121: 23,\n\t\t\t\t122: 23,\n\t\t\t\t123: 23,\n\t\t\t\t124: 252,\n\t\t\t\t125: 252,\n\t\t\t\t126: 189,\n\t\t\t\t127: 189,\n\t\t\t\t128: 8,\n\t\t\t\t129: 8,\n\t\t\t\t130: 223,\n\t\t\t\t131: 232,\n\t\t\t\t132: 232,\n\t\t\t\t133: 232,\n\t\t\t\t134: 233,\n\t\t\t\t135: 17,\n\t\t\t\t136: 229,\n\t\t\t\t137: 232,\n\t\t\t\t138: 233,\n\t\t\t\t139: 8,\n\t\t\t\t140: 53,\n\t\t\t\t141: 18,\n\t\t\t\t142: 229,\n\t\t\t\t143: 232,\n\t\t\t\t144: 8,\n\t\t\t\t145: 0,\n\t\t\t\t146: 17,\n\t\t\t\t147: 19,\n\t\t\t\t148: 15,\n\t\t\t\t149: 0,\n\t\t\t\t150: 0,\n\t\t\t\t151: 2,\n\t\t\t\t152: 23,\n\t\t\t\t153: 24,\n\t\t\t\t154: 8,\n\t\t\t\t155: 0,\n\t\t\t\t156: 2,\n\t\t\t\t157: 2,\n\t\t\t\t158: 29,\n\t\t\t\t159: 6,\n\t\t\t\t160: 8,\n\t\t\t\t161: 8,\n\t\t\t\t162: 8,\n\t\t\t\t163: 8,\n\t\t\t\t164: 8,\n\t\t\t\t165: 8,\n\t\t\t\t166: 8,\n\t\t\t\t167: 233,\n\t\t\t\t168: 233,\n\t\t\t\t169: 8,\n\t\t\t\t170: 8,\n\t\t\t\t171: 0,\n\t\t\t\t172: 15,\n\t\t\t\t173: 8,\n\t\t\t\t174: 1,\n\t\t\t\t175: 0,\n\t\t\t\t176: 53,\n\t\t\t\t177: 53,\n\t\t\t\t178: 15,\n\t\t\t\t179: 0,\n\t\t\t\t180: 0,\n\t\t\t\t181: 1,\n\t\t\t\t182: 53,\n\t\t\t\t183: 55,\n\t\t\t\t184: 15,\n\t\t\t\t185: 0,\n\t\t\t\t186: 0,\n\t\t\t\t187: 58,\n\t\t\t\t188: 10,\n\t\t\t\t189: 4,\n\t\t\t\t190: 8,\n\t\t\t\t191: 0,\n\t\t\t\t192: 58,\n\t\t\t\t193: 2,\n\t\t\t\t194: 35,\n\t\t\t\t195: 66,\n\t\t\t\t196: 8,\n\t\t\t\t197: 8,\n\t\t\t\t198: 8,\n\t\t\t\t199: 8,\n\t\t\t\t200: 8,\n\t\t\t\t201: 8,\n\t\t\t\t202: 8,\n\t\t\t\t203: 0,\n\t\t\t\t204: 0,\n\t\t\t\t205: 0,\n\t\t\t\t206: 0,\n\t\t\t\t207: 53,\n\t\t\t\t208: 8,\n\t\t\t\t209: 0,\n\t\t\t\t210: 1,\n\t\t\t\t211: 0,\n\t\t\t\t212: 53,\n\t\t\t\t213: 53,\n\t\t\t\t214: 8,\n\t\t\t\t215: 0,\n\t\t\t\t216: 0,\n\t\t\t\t217: 1,\n\t\t\t\t218: 89,\n\t\t\t\t219: 5,\n\t\t\t\t220: 8,\n\t\t\t\t221: 0,\n\t\t\t\t222: 58,\n\t\t\t\t223: 95,\n\t\t\t\t224: 131,\n\t\t\t\t225: 126,\n\t\t\t\t226: 8,\n\t\t\t\t227: 0,\n\t\t\t\t228: 58,\n\t\t\t\t229: 3,\n\t\t\t\t230: 143,\n\t\t\t\t231: 242,\n\t\t\t\t232: 14,\n\t\t\t\t233: 14,\n\t\t\t\t234: 14,\n\t\t\t\t235: 14,\n\t\t\t\t236: 14,\n\t\t\t\t237: 14,\n\t\t\t\t238: 251,\n\t\t\t\t239: 252,\n\t\t\t\t240: 188,\n\t\t\t\t241: 8,\n\t\t\t\t242: 8,\n\t\t\t\t243: 8,\n\t\t\t\t244: 8,\n\t\t\t\t245: 232,\n\t\t\t\t246: 233,\n\t\t\t\t247: 8,\n\t\t\t\t248: 0,\n\t\t\t\t249: 0,\n\t\t\t\t250: 0,\n\t\t\t\t251: 0,\n\t\t\t\t252: 239,\n\t\t\t\t253: 10,\n\t\t\t\t254: 242,\n\t\t\t\t255: 243,\n\t\t\t},\n\n\t\t\tViModeCommandFg: 0,\n\t\t\tViModeCommandBg: 250,\n\t\t\tViModeInsertFg:  22,\n\t\t\tViModeInsertBg:  70,\n\t\t},\n\t\t\"gruvbox\": {\n\t\t\t/* based on https://github.com/b-ryan/powerline-shell/blob/master/powerline_shell/themes/gruvbox.py */\n\t\t\tReset:              0,\n\t\t\tDefaultFg:          gruvbox_light0,\n\t\t\tDefaultBg:          gruvbox_dark0,\n\t\t\tUsernameFg:         gruvbox_bright_purple,\n\t\t\tUsernameBg:         gruvbox_dark2,\n\t\t\tUsernameRootBg:     gruvbox_faded_red,\n\t\t\tHostnameFg:         gruvbox_bright_purple,\n\t\t\tHostnameBg:         gruvbox_dark1,\n\t\t\tHomeSpecialDisplay: true,\n\t\t\tHomeFg:             gruvbox_light2,\n\t\t\tHomeBg:             gruvbox_neutral_blue,\n\t\t\tPathFg:             gruvbox_light3,\n\t\t\tPathBg:             gruvbox_dark3,\n\t\t\tCwdFg:              gruvbox_light2,\n\t\t\tSeparatorFg:        gruvbox_dark_gray,\n\t\t\tReadonlyFg:         gruvbox_light0,\n\t\t\tReadonlyBg:         gruvbox_bright_red,\n\t\t\tSSHFg:              gruvbox_light0,\n\t\t\tSSHBg:              gruvbox_faded_purple,\n\t\t\tDockerMachineFg:    gruvbox_light0,       // match ssh-fg\n\t\t\tDockerMachineBg:    gruvbox_faded_purple, // match ssh-bg\n\t\t\tDotEnvFg:           gruvbox_light0,       // match ssh-fg\n\t\t\tDotEnvBg:           gruvbox_faded_purple, // match ssh-bg\n\t\t\tRepoCleanFg:        gruvbox_dark1,\n\t\t\tRepoCleanBg:        gruvbox_faded_green,\n\t\t\tRepoDirtyFg:        gruvbox_light0,\n\t\t\tRepoDirtyBg:        gruvbox_faded_orange,\n\t\t\tJobsFg:             gruvbox_neutral_aqua,\n\t\t\tJobsBg:             gruvbox_dark1,\n\t\t\tCmdPassedFg:        gruvbox_light4,\n\t\t\tCmdPassedBg:        gruvbox_dark1,\n\t\t\tCmdFailedFg:        gruvbox_light0,\n\t\t\tCmdFailedBg:        gruvbox_neutral_red,\n\t\t\tSvnChangesFg:       gruvbox_light0,\n\t\t\tSvnChangesBg:       gruvbox_faded_orange,\n\t\t\tGitAheadFg:         gruvbox_light3,\n\t\t\tGitAheadBg:         gruvbox_dark2,\n\t\t\tGitBehindFg:        gruvbox_light3,\n\t\t\tGitBehindBg:        gruvbox_dark2,\n\t\t\tGitStagedFg:        gruvbox_light0,\n\t\t\tGitStagedBg:        gruvbox_neutral_green,\n\t\t\tGitNotStagedFg:     gruvbox_light0,\n\t\t\tGitNotStagedBg:     gruvbox_neutral_orange,\n\t\t\tGitUntrackedFg:     gruvbox_light0,\n\t\t\tGitUntrackedBg:     gruvbox_faded_red,\n\t\t\tGitConflictedFg:    gruvbox_light0,\n\t\t\tGitConflictedBg:    gruvbox_neutral_red,\n\t\t\tGitStashedFg:       gruvbox_dark0,\n\t\t\tGitStashedBg:       gruvbox_neutral_yellow,\n\t\t\tGoenvBg:            gruvbox_faded_blue,\n\t\t\tGoenvFg:            gruvbox_light1,\n\t\t\tVirtualEnvFg:       gruvbox_light0,\n\t\t\tVirtualEnvBg:       gruvbox_faded_green,\n\t\t\tPerlbrewFg:         gruvbox_light0,      // match virtualenv\n\t\t\tPerlbrewBg:         gruvbox_faded_green, // match virtualenv\n\t\t\tPlEnvFg:            gruvbox_light0,      // match virtualenv\n\t\t\tPlEnvBg:            gruvbox_faded_green, // match virtualenv\n\t\t\tTimeFg:             gruvbox_light2,\n\t\t\tTimeBg:             gruvbox_dark4,\n\t\t\tShellVarFg:         gruvbox_light0,       // match ssh-fg\n\t\t\tShellVarBg:         gruvbox_faded_purple, // match ssh-bg\n\t\t\tNodeFg:             gruvbox_light0,       // match virtualenv\n\t\t\tNodeBg:             gruvbox_faded_green,  // match virtualenv\n\t\t\tNodeVersionFg:      gruvbox_faded_green,  // match virtualenv\n\t\t\tNodeVersionBg:      gruvbox_light0,       // match virtualenv\n\t\t\tRvmFg:              gruvbox_light0,\n\t\t\tRvmBg:              gruvbox_neutral_red,\n\t\t\tLoadFg:             gruvbox_light0,\n\t\t\tLoadBg:             gruvbox_faded_purple,\n\t\t\tLoadHighBg:         gruvbox_neutral_red,\n\t\t\tLoadAvgValue:       gruvbox_light0,\n\t\t\tLoadThresholdBad:   1.0,\n\t\t\tNixShellFg:         gruvbox_light0,\n\t\t\tNixShellBg:         gruvbox_faded_purple,\n\n\t\t\tViModeCommandFg: 0,\n\t\t\tViModeCommandBg: 250,\n\t\t\tViModeInsertFg:  22,\n\t\t\tViModeInsertBg:  70,\n\t\t},\n\t},\n\tTime:   \"15:04:05\",\n\tViMode: \"\",\n}\n\nconst (\n\tgruvbox_dark0 = 235\n\tgruvbox_dark1 = 237\n\tgruvbox_dark2 = 239\n\tgruvbox_dark3 = 241\n\tgruvbox_dark4 = 243\n\n\tgruvbox_light0 = 229\n\tgruvbox_light1 = 223\n\tgruvbox_light2 = 250\n\tgruvbox_light3 = 248\n\tgruvbox_light4 = 246\n\n\tgruvbox_dark_gray  = 245\n\tgruvbox_light_gray = 244\n\n\tgruvbox_neutral_red    = 124\n\tgruvbox_neutral_green  = 106\n\tgruvbox_neutral_yellow = 172\n\tgruvbox_neutral_blue   = 66\n\tgruvbox_neutral_purple = 132\n\tgruvbox_neutral_aqua   = 72\n\tgruvbox_neutral_orange = 166\n\n\tgruvbox_bright_red    = 167\n\tgruvbox_bright_green  = 142\n\tgruvbox_bright_yellow = 214\n\tgruvbox_bright_blue   = 109\n\tgruvbox_bright_purple = 175\n\tgruvbox_bright_aqua   = 108\n\tgruvbox_bright_orange = 208\n\n\tgruvbox_faded_red    = 88\n\tgruvbox_faded_green  = 100\n\tgruvbox_faded_yellow = 136\n\tgruvbox_faded_blue   = 24\n\tgruvbox_faded_purple = 96\n\tgruvbox_faded_aqua   = 66\n\tgruvbox_faded_orange = 130\n)\n"
        },
        {
          "name": "environment.go",
          "type": "blob",
          "size": 0.142578125,
          "content": "package main\n\nimport \"runtime\"\n\nfunc homeEnvName() string {\n\tenv := \"HOME\"\n\tif runtime.GOOS == \"windows\" {\n\t\tenv = \"USERPROFILE\"\n\t}\n\treturn env\n}\n"
        },
        {
          "name": "exitcode",
          "type": "tree",
          "content": null
        },
        {
          "name": "generatePreview.sh",
          "type": "blob",
          "size": 0.9853515625,
          "content": "#!/bin/sh\n\nFLAGS=\"-modules cwd,git,root -path-aliases=/tmp/home=~\"\n\nmkdir -p /tmp/home/code/dotfiles;\ncd /tmp/home/code/dotfiles/;\ngit init;\ntouch file1;\ngit add .;\ngit commit -m \"commit\";\necho \"hI\" > file2;\n\nmkdir -p /tmp/home/deep/down/into/the/abyss/of/directories/where/no/one/ever/comes/;\ncd /tmp/home/deep/down/into/the/abyss/of/directories/where/no/one/ever/comes/;\ngit init;\ntouch file1;\ngit add .;\ngit commit -m \"commit\";\necho \"test\">file1;\ngit stash;\n\nexport HOME=/tmp/home/\n\nclear;\n\ncd /tmp/home/code/dotfiles/;\npowerline-go -shell bare $FLAGS;\necho git branch;\ngit branch --color=always | cat;\n\npowerline-go -shell bare $FLAGS;\necho badcmd;\necho \"bash: badcmd: command not found\";\n\npowerline-go -shell bare $FLAGS -error 1;\necho \"cd ~/deep/down/into/the/abyss/of/directories/where/no/one/ever/comes/\";\ncd /tmp/home/deep/down/into/the/abyss/of/directories/where/no/one/ever/comes/;\n\npowerline-go -shell bare $FLAGS;\n\necho;echo;echo;echo;echo;echo;echo;echo;echo;echo;echo;echo;echo;echo;echo;echo;\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.3154296875,
          "content": "module github.com/justjanne/powerline-go\n\ngo 1.15\n\nrequire (\n\tgithub.com/mattn/go-runewidth v0.0.9\n\tgithub.com/shirou/gopsutil/v3 v3.22.3\n\tgolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f\n\tgolang.org/x/term v0.0.0-20210927222741-03fcf44c2211\n\tgolang.org/x/text v0.3.8\n\tgopkg.in/ini.v1 v1.66.4\n\tgopkg.in/yaml.v2 v2.4.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 6.19921875,
          "content": "github.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-ole/go-ole v1.2.6 h1:/Fpf6oFPoeFik9ty7siob0G6Ke8QvQEuVcuChpwXzpY=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.7 h1:81/ik6ipDQS2aGcBfIN5dHDB36BwrStyeAQquSYCV4o=\ngithub.com/google/go-cmp v0.5.7/go.mod h1:n+brtR0CgQNWTVd5ZUFpTBC8YFBDLK/h/bpaJ8/DtOE=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0 h1:6E+4a0GO5zZEnZ81pIr0yLvtUWk2if982qA3F3QD6H4=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0/go.mod h1:zJYVVT2jmtg6P3p1VtQj7WsuWi/y4VnjVBn7F8KPB3I=\ngithub.com/mattn/go-runewidth v0.0.9 h1:Lm995f3rfxdpd6TSmuVCHVb/QhupuXlYr8sCI/QdE+0=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c h1:ncq/mPwQF4JjgDlrVEn3C11VoGHZN7m8qihwgMEtzYw=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/shirou/gopsutil/v3 v3.22.3 h1:UebRzEomgMpv61e3hgD1tGooqX5trFbdU/ehphbHd00=\ngithub.com/shirou/gopsutil/v3 v3.22.3/go.mod h1:D01hZJ4pVHPpCTZ3m3T2+wDF2YAGfd+H4ifUguaQzHM=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.7.1 h1:5TQK59W5E3v0r2duFAb7P95B6hEeOyEnHRa8MjYSMTY=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/tklauser/go-sysconf v0.3.10 h1:IJ1AZGZRWbY8T5Vfk04D9WOA5WSejdflXxP03OUqALw=\ngithub.com/tklauser/go-sysconf v0.3.10/go.mod h1:C8XykCvCb+Gn0oNCWPIlcb0RuglQTYaQ2hGm7jmxEFk=\ngithub.com/tklauser/numcpus v0.4.0 h1:E53Dm1HjH1/R2/aoCtXtPgzmElmn51aOkhCFSuZq//o=\ngithub.com/tklauser/numcpus v0.4.0/go.mod h1:1+UI3pD8NW14VMwdgJNJ1ESk2UnwhAnz5hMwiKKqXCQ=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/yusufpapurcu/wmi v1.2.2 h1:KBNDSne4vP5mbSWnJbO+51IMOXJB67QiYCSBrubbPRg=\ngithub.com/yusufpapurcu/wmi v1.2.2/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220128215802-99c3d69c2c27/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f h1:v4INt8xihDGvnrfjMDVXGxw9wrfxYyCjk0KbXjhR55s=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211 h1:JGgROgKl9N8DuW20oFS5gxc+lE67/N3FcwmBPMe7ArY=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.3.8 h1:nAL+RVCQ9uMn3vJZbV+MRnydTJFPf8qqY42YiA6MrqY=\ngolang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/ini.v1 v1.66.4 h1:SsAcf+mM7mRZo2nJNGt8mZCjG8ZRaNGMURJw7BsIST4=\ngopkg.in/ini.v1 v1.66.4/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 6.75,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\ntype alignment int\n\nconst (\n\talignLeft alignment = iota\n\talignRight\n)\n\nconst (\n\t// MinUnsignedInteger minimum unsigned integer\n\tMinUnsignedInteger uint = 0\n\t// MaxUnsignedInteger maximum unsigned integer\n\tMaxUnsignedInteger = ^MinUnsignedInteger\n\t// MaxInteger maximum integer\n\tMaxInteger = int(MaxUnsignedInteger >> 1)\n\t/* MinInteger minimum integer\n\tMinInteger = ^MaxInteger\n\t*/\n)\n\nfunc warn(msg string) {\n\tif *args.IgnoreWarnings {\n\t\treturn\n\t}\n\n\tprint(\"[powerline-go]\", msg)\n}\n\nfunc pathExists(path string) bool {\n\tif _, err := os.Stat(path); os.IsNotExist(err) {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc getValidCwd() string {\n\tcwd, err := os.Getwd()\n\tif err != nil {\n\t\tvar exists bool\n\t\tcwd, exists = os.LookupEnv(\"PWD\")\n\t\tif !exists {\n\t\t\twarn(\"Your current directory is invalid.\")\n\t\t\tprint(\"> \")\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\n\tparts := strings.Split(cwd, string(os.PathSeparator))\n\tup := cwd\n\n\tfor len(parts) > 0 && !pathExists(up) {\n\t\tparts = parts[:len(parts)-1]\n\t\tup = strings.Join(parts, string(os.PathSeparator))\n\t}\n\tif cwd != up {\n\t\twarn(\"Your current directory is invalid. Lowest valid directory: \" + up)\n\t}\n\treturn cwd\n}\n\nvar modules = map[string]func(*powerline) []pwl.Segment{\n\t\"aws\":                 segmentAWS,\n\t\"bzr\":                 segmentBzr,\n\t\"cwd\":                 segmentCwd,\n\t\"direnv\":              segmentDirenv,\n\t\"docker\":              segmentDocker,\n\t\"docker-context\":      segmentDockerContext,\n\t\"dotenv\":              segmentDotEnv,\n\t\"duration\":            segmentDuration,\n\t\"exit\":                segmentExitCode,\n\t\"fossil\":              segmentFossil,\n\t\"gcp\":                 segmentGCP,\n\t\"git\":                 segmentGit,\n\t\"gitlite\":             segmentGitLite,\n\t\"goenv\":               segmentGoenv,\n\t\"hg\":                  segmentHg,\n\t\"svn\":                 segmentSubversion,\n\t\"host\":                segmentHost,\n\t\"jobs\":                segmentJobs,\n\t\"kube\":                segmentKube,\n\t\"load\":                segmentLoad,\n\t\"newline\":             segmentNewline,\n\t\"perlbrew\":            segmentPerlbrew,\n\t\"plenv\":               segmentPlEnv,\n\t\"perms\":               segmentPerms,\n\t\"rbenv\":               segmentRbenv,\n\t\"root\":                segmentRoot,\n\t\"rvm\":                 segmentRvm,\n\t\"shell-var\":           segmentShellVar,\n\t\"shenv\":               segmentShEnv,\n\t\"ssh\":                 segmentSSH,\n\t\"termtitle\":           segmentTermTitle,\n\t\"terraform-workspace\": segmentTerraformWorkspace,\n\t\"time\":                segmentTime,\n\t\"node\":                segmentNode,\n\t\"user\":                segmentUser,\n\t\"venv\":                segmentVirtualEnv,\n\t\"vgo\":                 segmentVirtualGo,\n\t\"vi-mode\":             segmentViMode,\n\t\"wsl\":                 segmentWSL,\n\t\"nix-shell\":           segmentNixShell,\n}\n\nfunc comments(lines ...string) string {\n\treturn \" \" + strings.Join(lines, \"\\n\"+\" \")\n}\n\nfunc commentsWithDefaults(lines ...string) string {\n\treturn comments(lines...) + \"\\n\"\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tcfg := defaults\n\terr := cfg.Load()\n\tif err != nil {\n\t\tprintln(\"Error loading config\")\n\t\tprintln(err.Error())\n\t}\n\n\tflag.Visit(func(f *flag.Flag) {\n\t\tswitch f.Name {\n\t\tcase \"cwd-mode\":\n\t\t\tcfg.CwdMode = *args.CwdMode\n\t\tcase \"cwd-max-depth\":\n\t\t\tcfg.CwdMaxDepth = *args.CwdMaxDepth\n\t\tcase \"cwd-max-dir-size\":\n\t\t\tcfg.CwdMaxDirSize = *args.CwdMaxDirSize\n\t\tcase \"colorize-hostname\":\n\t\t\tcfg.ColorizeHostname = *args.ColorizeHostname\n\t\tcase \"hostname-only-if-ssh\":\n\t\t\tcfg.HostnameOnlyIfSSH = *args.HostnameOnlyIfSSH\n\t\tcase \"alternate-ssh-icon\":\n\t\t\tcfg.SshAlternateIcon = *args.SshAlternateIcon\n\t\tcase \"east-asian-width\":\n\t\t\tcfg.EastAsianWidth = *args.EastAsianWidth\n\t\tcase \"newline\":\n\t\t\tcfg.PromptOnNewLine = *args.PromptOnNewLine\n\t\tcase \"static-prompt-indicator\":\n\t\t\tcfg.StaticPromptIndicator = *args.StaticPromptIndicator\n\t\tcase \"venv-name-size-limit\":\n\t\t\tcfg.VenvNameSizeLimit = *args.VenvNameSizeLimit\n\t\tcase \"jobs\":\n\t\t\tcfg.Jobs = *args.Jobs\n\t\tcase \"git-assume-unchanged-size\":\n\t\t\tcfg.GitAssumeUnchangedSize = *args.GitAssumeUnchangedSize\n\t\tcase \"git-disable-stats\":\n\t\t\tcfg.GitDisableStats = strings.Split(*args.GitDisableStats, \",\")\n\t\tcase \"git-mode\":\n\t\t\tcfg.GitMode = *args.GitMode\n\t\tcase \"mode\":\n\t\t\tcfg.Mode = *args.Mode\n\t\tcase \"theme\":\n\t\t\tcfg.Theme = *args.Theme\n\t\tcase \"shell\":\n\t\t\tcfg.Shell = *args.Shell\n\t\tcase \"modules\":\n\t\t\tcfg.Modules = strings.Split(*args.Modules, \",\")\n\t\tcase \"modules-right\":\n\t\t\tcfg.ModulesRight = strings.Split(*args.ModulesRight, \",\")\n\t\tcase \"priority\":\n\t\t\tcfg.Priority = strings.Split(*args.Priority, \",\")\n\t\tcase \"max-width\":\n\t\t\tcfg.MaxWidthPercentage = *args.MaxWidthPercentage\n\t\tcase \"truncate-segment-width\":\n\t\t\tcfg.TruncateSegmentWidth = *args.TruncateSegmentWidth\n\t\tcase \"error\":\n\t\t\tcfg.PrevError = *args.PrevError\n\t\tcase \"numeric-exit-codes\":\n\t\t\tcfg.NumericExitCodes = *args.NumericExitCodes\n\t\tcase \"ignore-repos\":\n\t\t\tcfg.IgnoreRepos = strings.Split(*args.IgnoreRepos, \",\")\n\t\tcase \"shorten-gke-names\":\n\t\t\tcfg.ShortenGKENames = *args.ShortenGKENames\n\t\tcase \"shorten-eks-names\":\n\t\t\tcfg.ShortenEKSNames = *args.ShortenEKSNames\n\t\tcase \"shorten-openshift-names\":\n\t\t\tcfg.ShortenOpenshiftNames = *args.ShortenOpenshiftNames\n\t\tcase \"shell-var\":\n\t\t\tcfg.ShellVar = *args.ShellVar\n\t\tcase \"shell-var-no-warn-empty\":\n\t\t\tcfg.ShellVarNoWarnEmpty = *args.ShellVarNoWarnEmpty\n\t\tcase \"trim-ad-domain\":\n\t\t\tcfg.TrimADDomain = *args.TrimADDomain\n\t\tcase \"path-aliases\":\n\t\t\tfor _, pair := range strings.Split(*args.PathAliases, \",\") {\n\t\t\t\tkv := strings.SplitN(pair, \"=\", 2)\n\t\t\t\tcfg.PathAliases[kv[0]] = kv[1]\n\t\t\t}\n\t\tcase \"duration\":\n\t\t\tcfg.Duration = *args.Duration\n\t\tcase \"duration-min\":\n\t\t\tcfg.DurationMin = *args.DurationMin\n\t\tcase \"duration-low-precision\":\n\t\t\tcfg.DurationLowPrecision = *args.DurationLowPrecision\n\t\tcase \"eval\":\n\t\t\tcfg.Eval = *args.Eval\n\t\tcase \"condensed\":\n\t\t\tcfg.Condensed = *args.Condensed\n\t\tcase \"ignore-warnings\":\n\t\t\tcfg.IgnoreWarnings = *args.IgnoreWarnings\n\t\tcase \"time\":\n\t\t\tcfg.Time = *args.Time\n\t\tcase \"vi-mode\":\n\t\t\tcfg.ViMode = *args.ViMode\n\t\t}\n\t})\n\n\tif strings.HasSuffix(cfg.Theme, \".json\") {\n\t\tfile, err := ioutil.ReadFile(cfg.Theme)\n\t\tif err == nil {\n\t\t\ttheme := cfg.Themes[defaults.Theme]\n\t\t\terr = json.Unmarshal(file, &theme)\n\t\t\tif err == nil {\n\t\t\t\tcfg.Themes[cfg.Theme] = theme\n\t\t\t} else {\n\t\t\t\tprintln(\"Error reading theme\")\n\t\t\t\tprintln(err.Error())\n\t\t\t}\n\t\t}\n\t}\n\n\tif strings.HasSuffix(cfg.Mode, \".json\") {\n\t\tfile, err := ioutil.ReadFile(cfg.Mode)\n\t\tif err == nil {\n\t\t\tsymbols := cfg.Modes[defaults.Mode]\n\t\t\terr = json.Unmarshal(file, &symbols)\n\t\t\tif err == nil {\n\t\t\t\tcfg.Modes[cfg.Mode] = symbols\n\t\t\t} else {\n\t\t\t\tprintln(\"Error reading mode\")\n\t\t\t\tprintln(err.Error())\n\t\t\t}\n\t\t}\n\t}\n\n\tp := newPowerline(cfg, getValidCwd(), alignLeft)\n\tif p.supportsRightModules() && p.hasRightModules() && !cfg.Eval {\n\t\tpanic(\"Flag '-modules-right' requires '-eval' mode.\")\n\t}\n\n\tfmt.Print(p.draw())\n}\n"
        },
        {
          "name": "powerline.go",
          "type": "blob",
          "size": 11.5986328125,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/user\"\n\t\"path\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"github.com/mattn/go-runewidth\"\n\t\"github.com/shirou/gopsutil/v3/process\"\n\t\"golang.org/x/term\"\n\t\"golang.org/x/text/width\"\n)\n\n// ShellInfo holds the shell information\ntype ShellInfo struct {\n\tRootIndicator         string\n\tColorTemplate         string\n\tEscapedDollar         string\n\tEscapedBacktick       string\n\tEscapedBackslash      string\n\tEvalPromptPrefix      string\n\tEvalPromptSuffix      string\n\tEvalPromptRightPrefix string\n\tEvalPromptRightSuffix string\n}\n\ntype powerline struct {\n\tcfg            Config\n\tcwd            string\n\tuserInfo       user.User\n\tuserIsAdmin    bool\n\thostname       string\n\tusername       string\n\ttheme          Theme\n\tshell          ShellInfo\n\treset          string\n\tsymbols        SymbolTemplate\n\tpriorities     map[string]int\n\tignoreRepos    map[string]bool\n\tSegments       [][]pwl.Segment\n\tcurSegment     int\n\talign          alignment\n\trightPowerline *powerline\n}\n\ntype prioritizedSegments struct {\n\ti    int\n\tsegs []pwl.Segment\n}\n\nfunc newPowerline(cfg Config, cwd string, align alignment) *powerline {\n\tp := new(powerline)\n\tp.cfg = cfg\n\tp.cwd = cwd\n\tuserInfo, err := user.Current()\n\tif userInfo != nil && err == nil {\n\t\tp.userInfo = *userInfo\n\t}\n\tp.hostname, _ = os.Hostname()\n\n\thostnamePrefix := fmt.Sprintf(\"%s%c\", p.hostname, os.PathSeparator)\n\tif strings.HasPrefix(p.userInfo.Username, hostnamePrefix) {\n\t\tp.username = p.userInfo.Username[len(hostnamePrefix):]\n\t} else {\n\t\tp.username = p.userInfo.Username\n\t}\n\tif cfg.TrimADDomain {\n\t\tusernameWithAd := strings.SplitN(p.username, `\\`, 2)\n\t\tif len(usernameWithAd) > 1 {\n\t\t\t// remove the Domain name from username\n\t\t\tp.username = usernameWithAd[1]\n\t\t}\n\t}\n\tp.userIsAdmin = userIsAdmin()\n\n\tp.theme = cfg.Themes[cfg.Theme]\n\tif cfg.Shell == \"autodetect\" {\n\t\tvar shellExe string\n\t\tproc, err := process.NewProcess(int32(os.Getppid()))\n\t\tif err == nil {\n\t\t\tshellExe, _ = proc.Exe()\n\t\t}\n\t\tif shellExe == \"\" {\n\t\t\tshellExe = os.Getenv(\"SHELL\")\n\t\t}\n\t\tcfg.Shell = detectShell(shellExe)\n\t}\n\tp.shell = cfg.Shells[cfg.Shell]\n\tp.reset = fmt.Sprintf(p.shell.ColorTemplate, \"[0m\")\n\tp.symbols = cfg.Modes[cfg.Mode]\n\tp.priorities = make(map[string]int)\n\tfor idx, priority := range cfg.Priority {\n\t\tp.priorities[priority] = len(cfg.Priority) - idx\n\t}\n\tp.align = align\n\tp.ignoreRepos = make(map[string]bool)\n\tfor _, r := range cfg.IgnoreRepos {\n\t\tif r == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tp.ignoreRepos[r] = true\n\t}\n\tp.Segments = make([][]pwl.Segment, 1)\n\tvar mods []string\n\tif p.align == alignLeft {\n\t\tmods = cfg.Modules\n\t\tif len(cfg.ModulesRight) > 0 {\n\t\t\tif p.supportsRightModules() {\n\t\t\t\tp.rightPowerline = newPowerline(cfg, cwd, alignRight)\n\t\t\t} else {\n\t\t\t\tmods = append(mods, cfg.ModulesRight...)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tmods = cfg.ModulesRight\n\t}\n\tinitSegments(p, mods)\n\n\treturn p\n}\n\nfunc detectShell(shellExe string) string {\n\tvar shell string\n\tshellExe = path.Base(shellExe)\n\tif strings.Contains(shellExe, \"bash\") {\n\t\tshell = \"bash\"\n\t} else if strings.Contains(shellExe, \"zsh\") {\n\t\tshell = \"zsh\"\n\t} else {\n\t\tshell = \"bare\"\n\t}\n\treturn shell\n}\n\nfunc initSegments(p *powerline, mods []string) {\n\torderedSegments := map[int][]pwl.Segment{}\n\tc := make(chan prioritizedSegments, len(mods))\n\twg := sync.WaitGroup{}\n\tfor i, module := range mods {\n\t\twg.Add(1)\n\t\tgo func(w *sync.WaitGroup, i int, module string, c chan prioritizedSegments) {\n\t\t\telem, ok := modules[module]\n\t\t\tif ok {\n\t\t\t\tc <- prioritizedSegments{\n\t\t\t\t\ti:    i,\n\t\t\t\t\tsegs: elem(p),\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ts, ok := segmentPlugin(p, module)\n\t\t\t\tif ok {\n\t\t\t\t\tc <- prioritizedSegments{\n\t\t\t\t\t\ti:    i,\n\t\t\t\t\t\tsegs: s,\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprintln(\"Module not found: \" + module)\n\t\t\t\t}\n\t\t\t}\n\t\t\twg.Done()\n\t\t}(&wg, i, module, c)\n\t}\n\twg.Wait()\n\tclose(c)\n\tfor s := range c {\n\t\torderedSegments[s.i] = s.segs\n\t}\n\tfor i := 0; i < len(mods); i++ {\n\t\tfor _, seg := range orderedSegments[i] {\n\t\t\tp.appendSegment(seg.Name, seg)\n\t\t}\n\t}\n}\n\nfunc (p *powerline) color(prefix string, code uint8) string {\n\tif code == p.theme.Reset {\n\t\treturn p.reset\n\t}\n\treturn fmt.Sprintf(p.shell.ColorTemplate, fmt.Sprintf(\"[%s;5;%dm\", prefix, code))\n}\n\nfunc (p *powerline) fgColor(code uint8) string {\n\tif p.theme.BoldForeground {\n\t\treturn p.color(\"1;38\", code)\n\t} else {\n\t\treturn p.color(\"38\", code)\n\t}\n}\n\nfunc (p *powerline) bgColor(code uint8) string {\n\treturn p.color(\"48\", code)\n}\n\nfunc (p *powerline) appendSegment(origin string, segment pwl.Segment) {\n\tif segment.Foreground == segment.Background && segment.Background == 0 {\n\t\tsegment.Background = p.theme.DefaultBg\n\t\tsegment.Foreground = p.theme.DefaultFg\n\t}\n\tif segment.Separator == \"\" {\n\t\tif p.isRightPrompt() {\n\t\t\tsegment.Separator = p.symbols.SeparatorReverse\n\t\t} else {\n\t\t\tsegment.Separator = p.symbols.Separator\n\t\t}\n\t}\n\tif segment.SeparatorForeground == 0 {\n\t\tsegment.SeparatorForeground = segment.Background\n\t}\n\tsegment.Priority += p.priorities[origin]\n\tsegment.Width = segment.ComputeWidth(p.cfg.Condensed)\n\tif segment.NewLine {\n\t\tp.newRow()\n\t} else {\n\t\tp.Segments[p.curSegment] = append(p.Segments[p.curSegment], segment)\n\t}\n}\n\nfunc (p *powerline) newRow() {\n\tif len(p.Segments[p.curSegment]) > 0 {\n\t\tp.Segments = append(p.Segments, make([]pwl.Segment, 0))\n\t\tp.curSegment = p.curSegment + 1\n\t}\n}\n\nfunc termWidth() int {\n\ttermWidth, _, err := term.GetSize(int(os.Stdin.Fd()))\n\tif err != nil {\n\t\tshellMaxLengthStr, found := os.LookupEnv(\"COLUMNS\")\n\t\tif !found {\n\t\t\treturn 0\n\t\t}\n\n\t\tshellMaxLength64, err := strconv.ParseInt(shellMaxLengthStr, 0, 64)\n\t\tif err != nil {\n\t\t\treturn 0\n\t\t}\n\n\t\ttermWidth = int(shellMaxLength64)\n\t}\n\n\treturn termWidth\n}\n\nfunc (p *powerline) truncateRow(rowNum int) {\n\n\tshellMaxLength := termWidth() * p.cfg.MaxWidthPercentage / 100\n\trow := p.Segments[rowNum]\n\trowLength := 0\n\n\tif shellMaxLength > 0 {\n\t\tfor _, segment := range row {\n\t\t\trowLength += segment.Width\n\t\t}\n\n\t\tif rowLength > shellMaxLength && p.cfg.TruncateSegmentWidth > 0 {\n\t\t\tminPriorityNotTruncated := MaxInteger\n\t\t\tminPriorityNotTruncatedSegmentID := -1\n\t\t\tfor idx, segment := range row {\n\t\t\t\tif segment.Width > p.cfg.TruncateSegmentWidth && segment.Priority < minPriorityNotTruncated {\n\t\t\t\t\tminPriorityNotTruncated = segment.Priority\n\t\t\t\t\tminPriorityNotTruncatedSegmentID = idx\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor minPriorityNotTruncatedSegmentID != -1 && rowLength > shellMaxLength {\n\t\t\t\tsegment := row[minPriorityNotTruncatedSegmentID]\n\n\t\t\t\trowLength -= segment.Width\n\n\t\t\t\tsegment.Content = runewidth.Truncate(segment.Content, p.cfg.TruncateSegmentWidth-runewidth.StringWidth(segment.Separator)-3, \"…\")\n\t\t\t\tsegment.Width = segment.ComputeWidth(p.cfg.Condensed)\n\n\t\t\t\trow = append(append(row[:minPriorityNotTruncatedSegmentID], segment), row[minPriorityNotTruncatedSegmentID+1:]...)\n\t\t\t\trowLength += segment.Width\n\n\t\t\t\tminPriorityNotTruncated = MaxInteger\n\t\t\t\tminPriorityNotTruncatedSegmentID = -1\n\t\t\t\tfor idx, segment := range row {\n\t\t\t\t\tif segment.Width > p.cfg.TruncateSegmentWidth && segment.Priority < minPriorityNotTruncated {\n\t\t\t\t\t\tminPriorityNotTruncated = segment.Priority\n\t\t\t\t\t\tminPriorityNotTruncatedSegmentID = idx\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor rowLength > shellMaxLength {\n\t\t\tminPriority := MaxInteger\n\t\t\tminPrioritySegmentID := -1\n\t\t\tfor idx, segment := range row {\n\t\t\t\tif segment.Priority < minPriority {\n\t\t\t\t\tminPriority = segment.Priority\n\t\t\t\t\tminPrioritySegmentID = idx\n\t\t\t\t}\n\t\t\t}\n\t\t\tif minPrioritySegmentID != -1 {\n\t\t\t\tsegment := row[minPrioritySegmentID]\n\t\t\t\trow = append(row[:minPrioritySegmentID], row[minPrioritySegmentID+1:]...)\n\t\t\t\trowLength -= segment.Width\n\t\t\t}\n\t\t}\n\t}\n\tp.Segments[rowNum] = row\n}\n\nfunc (p *powerline) numEastAsianRunes(segmentContent *string) int {\n\tif !p.cfg.EastAsianWidth {\n\t\treturn 0\n\t}\n\tnumEastAsianRunes := 0\n\tfor _, r := range *segmentContent {\n\t\tswitch width.LookupRune(r).Kind() {\n\t\tcase width.EastAsianAmbiguous:\n\t\t\tnumEastAsianRunes++\n\t\tcase width.Neutral:\n\t\tcase width.EastAsianWide:\n\t\tcase width.EastAsianNarrow:\n\t\tcase width.EastAsianFullwidth:\n\t\tcase width.EastAsianHalfwidth:\n\t\t}\n\t}\n\treturn numEastAsianRunes\n}\n\nfunc (p *powerline) drawRow(rowNum int, buffer *bytes.Buffer) {\n\trow := p.Segments[rowNum]\n\tnumEastAsianRunes := 0\n\n\t// Prepend padding\n\tif p.isRightPrompt() {\n\t\tbuffer.WriteRune(' ')\n\t}\n\tfor idx, segment := range row {\n\t\tif segment.HideSeparators {\n\t\t\tbuffer.WriteString(segment.Content)\n\t\t\tcontinue\n\t\t}\n\t\tvar separatorBackground string\n\t\tif p.isRightPrompt() {\n\t\t\tif idx == 0 {\n\t\t\t\tseparatorBackground = p.reset\n\t\t\t} else {\n\t\t\t\tprevSegment := row[idx-1]\n\t\t\t\tseparatorBackground = p.bgColor(prevSegment.Background)\n\t\t\t}\n\t\t\tbuffer.WriteString(separatorBackground)\n\t\t\tbuffer.WriteString(p.fgColor(segment.SeparatorForeground))\n\t\t\tbuffer.WriteString(segment.Separator)\n\t\t} else {\n\t\t\tif idx >= len(row)-1 {\n\t\t\t\tif !p.hasRightModules() || p.supportsRightModules() {\n\t\t\t\t\tseparatorBackground = p.reset\n\t\t\t\t} else if p.hasRightModules() && rowNum >= len(p.Segments)-1 {\n\t\t\t\t\tnextSegment := p.rightPowerline.Segments[0][0]\n\t\t\t\t\tseparatorBackground = p.bgColor(nextSegment.Background)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnextSegment := row[idx+1]\n\t\t\t\tseparatorBackground = p.bgColor(nextSegment.Background)\n\t\t\t}\n\t\t}\n\t\tbuffer.WriteString(p.fgColor(segment.Foreground))\n\t\tbuffer.WriteString(p.bgColor(segment.Background))\n\t\tif !p.cfg.Condensed {\n\t\t\tbuffer.WriteRune(' ')\n\t\t}\n\t\tbuffer.WriteString(segment.Content)\n\t\tnumEastAsianRunes += p.numEastAsianRunes(&segment.Content)\n\t\tif !p.cfg.Condensed {\n\t\t\tbuffer.WriteRune(' ')\n\t\t}\n\t\tif !p.isRightPrompt() {\n\t\t\tbuffer.WriteString(separatorBackground)\n\t\t\tbuffer.WriteString(p.fgColor(segment.SeparatorForeground))\n\t\t\tbuffer.WriteString(segment.Separator)\n\t\t}\n\t\tbuffer.WriteString(p.reset)\n\t}\n\n\t// Append padding before cursor for left-aligned prompts\n\tif !p.isRightPrompt() || !p.hasRightModules() {\n\t\tbuffer.WriteRune(' ')\n\t}\n\n\t// Don't append padding for right-aligned modules\n\tif !p.isRightPrompt() {\n\t\tfor i := 0; i < numEastAsianRunes; i++ {\n\t\t\tbuffer.WriteRune(' ')\n\t\t}\n\t}\n}\n\nfunc (p *powerline) draw() string {\n\n\tvar buffer bytes.Buffer\n\n\tif p.cfg.Eval {\n\t\tif p.align == alignLeft {\n\t\t\tbuffer.WriteString(p.shell.EvalPromptPrefix)\n\t\t} else if p.supportsRightModules() {\n\t\t\tbuffer.WriteString(p.shell.EvalPromptRightPrefix)\n\t\t}\n\t}\n\n\tfor rowNum := range p.Segments {\n\t\tp.truncateRow(rowNum)\n\t\tp.drawRow(rowNum, &buffer)\n\t\tif rowNum < len(p.Segments)-1 {\n\t\t\tbuffer.WriteRune('\\n')\n\t\t}\n\t}\n\n\tif p.cfg.PromptOnNewLine {\n\t\tbuffer.WriteRune('\\n')\n\n\t\tvar foreground, background uint8\n\t\tif p.cfg.PrevError == 0 || p.cfg.StaticPromptIndicator {\n\t\t\tforeground = p.theme.CmdPassedFg\n\t\t\tbackground = p.theme.CmdPassedBg\n\t\t} else {\n\t\t\tforeground = p.theme.CmdFailedFg\n\t\t\tbackground = p.theme.CmdFailedBg\n\t\t}\n\n\t\tbuffer.WriteString(p.fgColor(foreground))\n\t\tbuffer.WriteString(p.bgColor(background))\n\t\tbuffer.WriteString(p.shell.RootIndicator)\n\t\tbuffer.WriteString(p.reset)\n\t\tbuffer.WriteString(p.fgColor(background))\n\t\tbuffer.WriteString(p.symbols.Separator)\n\t\tbuffer.WriteString(p.reset)\n\t\tbuffer.WriteRune(' ')\n\t}\n\n\tif p.cfg.Eval {\n\t\tswitch p.align {\n\t\tcase alignLeft:\n\t\t\tbuffer.WriteString(p.shell.EvalPromptSuffix)\n\t\t\tif p.supportsRightModules() {\n\t\t\t\tbuffer.WriteRune('\\n')\n\t\t\t\tif !p.hasRightModules() {\n\t\t\t\t\tbuffer.WriteString(p.shell.EvalPromptRightPrefix + p.shell.EvalPromptRightSuffix)\n\t\t\t\t}\n\t\t\t}\n\t\tcase alignRight:\n\t\t\tif p.supportsRightModules() {\n\t\t\t\tbuffer.Truncate(buffer.Len() - 1)\n\t\t\t\tbuffer.WriteString(p.shell.EvalPromptRightSuffix)\n\t\t\t}\n\t\t}\n\t\tif p.hasRightModules() {\n\t\t\tbuffer.WriteString(p.rightPowerline.draw())\n\t\t}\n\t}\n\n\treturn buffer.String()\n}\n\nfunc (p *powerline) hasRightModules() bool {\n\treturn p.rightPowerline != nil && len(p.rightPowerline.Segments[0]) > 0\n}\n\nfunc (p *powerline) supportsRightModules() bool {\n\treturn p.shell.EvalPromptRightPrefix != \"\" || p.shell.EvalPromptRightSuffix != \"\"\n}\n\nfunc (p *powerline) isRightPrompt() bool {\n\treturn p.align == alignRight && p.supportsRightModules()\n}\n"
        },
        {
          "name": "powerline",
          "type": "tree",
          "content": null
        },
        {
          "name": "powerline_test.go",
          "type": "blob",
          "size": 0.5478515625,
          "content": "package main\n\nimport \"testing\"\n\nfunc Test_detectShell(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant string\n\t}{\n\t\t{\n\t\t\tname: \"\",\n\t\t\twant: \"bare\",\n\t\t},\n\t\t{\n\t\t\tname: \"/bin/sh\",\n\t\t\twant: \"bare\",\n\t\t}, {\n\t\t\tname: \"/bin/bash\",\n\t\t\twant: \"bash\",\n\t\t}, {\n\t\t\tname: \"/usr/local/bin/bash5\",\n\t\t\twant: \"bash\",\n\t\t}, {\n\t\t\tname: \"/usr/bin/zsh\",\n\t\t\twant: \"zsh\",\n\t\t}}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := detectShell(tt.name); got != tt.want {\n\t\t\t\tt.Errorf(\"detectShell(%q) = %q, want %q\", tt.name, got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "preview.png",
          "type": "blob",
          "size": 91.9453125,
          "content": null
        },
        {
          "name": "segment-aws.go",
          "type": "blob",
          "size": 0.505859375,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentAWS(p *powerline) []pwl.Segment {\n\tprofile := os.Getenv(\"AWS_PROFILE\")\n\tregion := os.Getenv(\"AWS_DEFAULT_REGION\")\n\tif profile == \"\" {\n\t\tprofile = os.Getenv(\"AWS_VAULT\")\n\t\tif profile == \"\" {\n\t\t\treturn []pwl.Segment{}\t\n\t\t}\n\t}\n\tvar r string\n\tif region != \"\" {\n\t\tr = \" (\" + region + \")\"\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"aws\",\n\t\tContent:    profile + r,\n\t\tForeground: p.theme.AWSFg,\n\t\tBackground: p.theme.AWSBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-bzr.go",
          "type": "blob",
          "size": 1.5517578125,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"os/exec\"\n\t\"strings\"\n)\n\nfunc getBzrStatus() (bool, bool, bool) {\n\thasModifiedFiles := false\n\thasUntrackedFiles := false\n\thasMissingFiles := false\n\n\tout, err := exec.Command(\"bzr\", \"status\").Output()\n\tif err == nil {\n\t\toutput := strings.Split(string(out), \"\\n\")\n\t\tfor _, line := range output {\n\t\t\tif line != \"\" {\n\t\t\t\tif line == \"unknown:\" {\n\t\t\t\t\thasUntrackedFiles = true\n\t\t\t\t} else if line == \"missing:\" {\n\t\t\t\t\thasMissingFiles = true\n\t\t\t\t} else {\n\t\t\t\t\thasModifiedFiles = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn hasModifiedFiles, hasUntrackedFiles, hasMissingFiles\n}\n\nfunc segmentBzr(p *powerline) []pwl.Segment {\n\tout, _ := exec.Command(\"bzr\", \"nick\").Output()\n\toutput := strings.SplitN(string(out), \"\\n\", 2)\n\tif len(output) > 0 && output[0] != \"\" {\n\t\tbranch := output[0]\n\t\thasModifiedFiles, hasUntrackedFiles, hasMissingFiles := getBzrStatus()\n\n\t\tvar foreground, background uint8\n\t\tvar content string\n\t\tif hasModifiedFiles || hasUntrackedFiles || hasMissingFiles {\n\t\t\tforeground = p.theme.RepoDirtyFg\n\t\t\tbackground = p.theme.RepoDirtyBg\n\n\t\t\textra := \"\"\n\n\t\t\tif hasUntrackedFiles {\n\t\t\t\textra += \"+\"\n\t\t\t}\n\n\t\t\tif hasMissingFiles {\n\t\t\t\textra += \"!\"\n\t\t\t}\n\n\t\t\tif hasUntrackedFiles {\n\t\t\t\textra += \"?\"\n\t\t\t}\n\n\t\t\tcontent = fmt.Sprintf(\"%s %s\", branch, extra)\n\t\t} else {\n\t\t\tforeground = p.theme.RepoCleanFg\n\t\t\tbackground = p.theme.RepoCleanBg\n\n\t\t\tcontent = branch\n\t\t}\n\n\t\treturn []pwl.Segment{{\n\t\t\tName:       \"bzr\",\n\t\t\tContent:    content,\n\t\t\tForeground: foreground,\n\t\t\tBackground: background,\n\t\t}}\n\t}\n\treturn []pwl.Segment{}\n}\n"
        },
        {
          "name": "segment-cwd.go",
          "type": "blob",
          "size": 6.6650390625,
          "content": "package main\n\nimport (\n\t\"os\"\n\t\"sort\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nconst ellipsis = \"\\u2026\"\n\ntype pathSegment struct {\n\tpath     string\n\thome     bool\n\troot     bool\n\tellipsis bool\n\talias    bool\n}\n\ntype byRevLength []string\n\nfunc (s byRevLength) Len() int {\n\treturn len(s)\n}\nfunc (s byRevLength) Swap(i, j int) {\n\ts[i], s[j] = s[j], s[i]\n}\nfunc (s byRevLength) Less(i, j int) bool {\n\treturn len(s[i]) > len(s[j])\n}\n\nfunc maybeAliasPathSegments(p *powerline, pathSegments []pathSegment) []pathSegment {\n\tpathSeparator := string(os.PathSeparator)\n\n\tif p.cfg.PathAliases == nil || len(p.cfg.PathAliases) == 0 {\n\t\treturn pathSegments\n\t}\n\n\tkeys := make([]string, len(p.cfg.PathAliases))\n\tfor k := range p.cfg.PathAliases {\n\t\tkeys = append(keys, k)\n\t}\n\tsort.Sort(byRevLength(keys))\n\nAliases:\n\tfor _, k := range keys {\n\t\t// This turns a string like \"foo/bar/baz\" into an array of strings.\n\t\tpath := strings.Split(strings.Trim(k, pathSeparator), pathSeparator)\n\n\t\t// If the path has 3 elements, we know we should look at pathSegments\n\t\t// in 3-element chunks.\n\t\tsize := len(path)\n\t\t// If there aren't that many segments in our path we can skip to the\n\t\t// next alias.\n\t\tif size > len(pathSegments) {\n\t\t\tcontinue Aliases\n\t\t}\n\n\t\talias := p.cfg.PathAliases[k]\n\n\tSegments:\n\t\t// We want to see if that array of strings exists in pathSegments.\n\t\tfor i := range pathSegments {\n\t\t\t// This is the upper index that we would look at. So if i is 0,\n\t\t\t// then we'd look at pathSegments[0,1,2], then [1,2,3], etc.. If i\n\t\t\t// is 2, we'd look at pathSegments[2,3,4] and so on.\n\t\t\tmax := (i + size) - 1\n\n\t\t\t// But if the upper index is out of bounds we can short-circuit\n\t\t\t// and move on to the next alias.\n\t\t\tif max > (len(pathSegments)-i)-1 {\n\t\t\t\tcontinue Aliases\n\t\t\t}\n\n\t\t\t// Then we loop over the indices in path and compare the\n\t\t\t// elements. If any element doesn't match we can move on to the\n\t\t\t// next index in pathSegments.\n\t\t\tfor j := range path {\n\t\t\t\tif path[j] != pathSegments[i+j].path {\n\t\t\t\t\tcontinue Segments\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// They all matched! That means we can replace this slice with our\n\t\t\t// alias and skip to the next alias.\n\t\t\tpathSegments = append(\n\t\t\t\tpathSegments[:i],\n\t\t\t\tappend(\n\t\t\t\t\t[]pathSegment{{\n\t\t\t\t\t\tpath:  alias,\n\t\t\t\t\t\talias: true,\n\t\t\t\t\t}},\n\t\t\t\t\tpathSegments[max+1:]...,\n\t\t\t\t)...,\n\t\t\t)\n\t\t\tcontinue Aliases\n\t\t}\n\t}\n\n\treturn pathSegments\n}\n\nfunc cwdToPathSegments(p *powerline, cwd string) []pathSegment {\n\tpathSeparator := string(os.PathSeparator)\n\tpathSegments := make([]pathSegment, 0)\n\n\tif cwd == p.userInfo.HomeDir {\n\t\tpathSegments = append(pathSegments, pathSegment{\n\t\t\tpath: \"~\",\n\t\t\thome: true,\n\t\t})\n\t\tcwd = \"\"\n\t} else if strings.HasPrefix(cwd, p.userInfo.HomeDir+pathSeparator) {\n\t\tpathSegments = append(pathSegments, pathSegment{\n\t\t\tpath: \"~\",\n\t\t\thome: true,\n\t\t})\n\t\tcwd = cwd[len(p.userInfo.HomeDir):]\n\t} else if cwd == pathSeparator {\n\t\tpathSegments = append(pathSegments, pathSegment{\n\t\t\tpath: pathSeparator,\n\t\t\troot: true,\n\t\t})\n\t}\n\n\tcwd = strings.Trim(cwd, pathSeparator)\n\tnames := strings.Split(cwd, pathSeparator)\n\tif names[0] == \"\" {\n\t\tnames = names[1:]\n\t}\n\n\tfor _, name := range names {\n\t\tpathSegments = append(pathSegments, pathSegment{\n\t\t\tpath: name,\n\t\t})\n\t}\n\n\treturn maybeAliasPathSegments(p, pathSegments)\n}\n\nfunc maybeShortenName(p *powerline, pathSegment string) string {\n\tif p.cfg.CwdMaxDirSize > 0 && len(pathSegment) > p.cfg.CwdMaxDirSize {\n\t\treturn pathSegment[:p.cfg.CwdMaxDirSize]\n\t}\n\treturn pathSegment\n}\n\nfunc escapeVariables(p *powerline, pathSegment string) string {\n\tpathSegment = strings.Replace(pathSegment, `\\`, p.shell.EscapedBackslash, -1)\n\tpathSegment = strings.Replace(pathSegment, \"`\", p.shell.EscapedBacktick, -1)\n\tpathSegment = strings.Replace(pathSegment, `$`, p.shell.EscapedDollar, -1)\n\treturn pathSegment\n}\n\nfunc getColor(p *powerline, pathSegment pathSegment, isLastDir bool) (uint8, uint8, bool) {\n\tif pathSegment.home && p.theme.HomeSpecialDisplay {\n\t\treturn p.theme.HomeFg, p.theme.HomeBg, true\n\t} else if pathSegment.alias {\n\t\treturn p.theme.AliasFg, p.theme.AliasBg, true\n\t} else if isLastDir {\n\t\treturn p.theme.CwdFg, p.theme.PathBg, false\n\t}\n\treturn p.theme.PathFg, p.theme.PathBg, false\n}\n\nfunc segmentCwd(p *powerline) (segments []pwl.Segment) {\n\tcwd := p.cwd\n\n\tswitch p.cfg.CwdMode {\n\tcase \"plain\":\n\t\tif strings.HasPrefix(cwd, p.userInfo.HomeDir) {\n\t\t\tcwd = \"~\" + cwd[len(p.userInfo.HomeDir):]\n\t\t}\n\n\t\tsegments = append(segments, pwl.Segment{\n\t\t\tName:       \"cwd\",\n\t\t\tContent:    escapeVariables(p, cwd),\n\t\t\tForeground: p.theme.CwdFg,\n\t\t\tBackground: p.theme.PathBg,\n\t\t})\n\tdefault:\n\t\tpathSegments := cwdToPathSegments(p, cwd)\n\n\t\tif p.cfg.CwdMode == \"dironly\" {\n\t\t\tpathSegments = pathSegments[len(pathSegments)-1:]\n\t\t} else {\n\t\t\tmaxDepth := p.cfg.CwdMaxDepth\n\t\t\tif maxDepth <= 0 {\n\t\t\t\twarn(\"Ignoring -cwd-max-depth argument since it's smaller than or equal to 0\")\n\t\t\t} else if len(pathSegments) > maxDepth {\n\t\t\t\tvar nBefore int\n\t\t\t\tif maxDepth > 2 {\n\t\t\t\t\tnBefore = 2\n\t\t\t\t} else {\n\t\t\t\t\tnBefore = maxDepth - 1\n\t\t\t\t}\n\t\t\t\tfirstPart := pathSegments[:nBefore]\n\t\t\t\tsecondPart := pathSegments[len(pathSegments)+nBefore-maxDepth:]\n\n\t\t\t\tpathSegments = make([]pathSegment, 0)\n\t\t\t\tpathSegments = append(pathSegments, firstPart...)\n\t\t\t\tpathSegments = append(pathSegments, pathSegment{\n\t\t\t\t\tpath:     ellipsis,\n\t\t\t\t\tellipsis: true,\n\t\t\t\t})\n\t\t\t\tpathSegments = append(pathSegments, secondPart...)\n\t\t\t}\n\n\t\t\tif p.cfg.CwdMode == \"semifancy\" && len(pathSegments) > 1 {\n\t\t\t\tvar path string\n\t\t\t\tfor idx, pathSegment := range pathSegments {\n\t\t\t\t\tif pathSegment.home || pathSegment.alias {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tpath += pathSegment.path\n\t\t\t\t\tif idx != len(pathSegments)-1 {\n\t\t\t\t\t\tpath += string(os.PathSeparator)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfirst := pathSegments[0]\n\t\t\t\tpathSegments = make([]pathSegment, 0)\n\t\t\t\tif first.home || first.alias {\n\t\t\t\t\tpathSegments = append(pathSegments, first)\n\t\t\t\t}\n\t\t\t\tpathSegments = append(pathSegments, pathSegment{\n\t\t\t\t\tpath: path,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tfor idx, pathSegment := range pathSegments {\n\t\t\tisLastDir := idx == len(pathSegments)-1\n\t\t\tforeground, background, special := getColor(p, pathSegment, isLastDir)\n\n\t\t\tsegment := pwl.Segment{\n\t\t\t\tContent:    escapeVariables(p, maybeShortenName(p, pathSegment.path)),\n\t\t\t\tForeground: foreground,\n\t\t\t\tBackground: background,\n\t\t\t}\n\n\t\t\tif !special {\n\t\t\t\tif p.align == alignRight && p.supportsRightModules() && idx != 0 {\n\t\t\t\t\tsegment.Separator = p.symbols.SeparatorReverseThin\n\t\t\t\t\tsegment.SeparatorForeground = p.theme.SeparatorFg\n\t\t\t\t} else if (p.align == alignLeft || !p.supportsRightModules()) && !isLastDir {\n\t\t\t\t\tsegment.Separator = p.symbols.SeparatorThin\n\t\t\t\t\tsegment.SeparatorForeground = p.theme.SeparatorFg\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsegment.Name = \"cwd-path\"\n\t\t\tif isLastDir {\n\t\t\t\tsegment.Name = \"cwd\"\n\t\t\t}\n\n\t\t\tsegments = append(segments, segment)\n\t\t}\n\t}\n\treturn segments\n}\n"
        },
        {
          "name": "segment-direnv.go",
          "type": "blob",
          "size": 0.5,
          "content": "package main\n\nimport (\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentDirenv(p *powerline) []pwl.Segment {\n\tcontent := os.Getenv(\"DIRENV_DIR\")\n\tif content == \"\" {\n\t\treturn []pwl.Segment{}\n\t}\n\tif strings.TrimPrefix(content, \"-\") == p.userInfo.HomeDir {\n\t\tcontent = \"~\"\n\t} else {\n\t\tcontent = filepath.Base(content)\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"direnv\",\n\t\tContent:    content,\n\t\tForeground: p.theme.DotEnvFg,\n\t\tBackground: p.theme.DotEnvBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-docker.go",
          "type": "blob",
          "size": 0.6259765625,
          "content": "package main\n\nimport (\n\t\"net/url\"\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentDocker(p *powerline) []pwl.Segment {\n\tvar docker string\n\tdockerMachineName, _ := os.LookupEnv(\"DOCKER_MACHINE_NAME\")\n\tdockerHost, _ := os.LookupEnv(\"DOCKER_HOST\")\n\n\tif dockerMachineName != \"\" {\n\t\tdocker = dockerMachineName\n\t} else if dockerHost != \" \" {\n\t\tu, err := url.Parse(dockerHost)\n\t\tif err == nil {\n\t\t\tdocker = u.Host\n\t\t}\n\t}\n\n\tif docker == \"\" {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"docker\",\n\t\tContent:    docker,\n\t\tForeground: p.theme.DockerMachineFg,\n\t\tBackground: p.theme.DockerMachineBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-docker_context.go",
          "type": "blob",
          "size": 1.142578125,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\ntype DockerContextConfig struct {\n\tCurrentContext string `json:\"currentContext\"`\n}\n\nfunc segmentDockerContext(p *powerline) []pwl.Segment {\n\tcontext := \"default\"\n\thome, _ := os.LookupEnv(\"HOME\")\n\tcontextFolder := filepath.Join(home, \".docker\", \"contexts\")\n\tconfigFile := filepath.Join(home, \".docker\", \"config.json\")\n\tcontextEnvVar := os.Getenv(\"DOCKER_CONTEXT\")\n\n\tif contextEnvVar != \"\" {\n\t\tcontext = contextEnvVar\n\t} else {\n\t\tstat, err := os.Stat(contextFolder)\n\t\tif err == nil && stat.IsDir() {\n\t\t\tdockerConfigFile, err := ioutil.ReadFile(configFile)\n\t\t\tif err == nil {\n\t\t\t\tvar dockerConfig DockerContextConfig\n\t\t\t\terr = json.Unmarshal(dockerConfigFile, &dockerConfig)\n\t\t\t\tif err == nil && dockerConfig.CurrentContext != \"\" {\n\t\t\t\t\tcontext = dockerConfig.CurrentContext\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Don’t show the default context\n\tif context == \"default\" {\n\t\treturn []pwl.Segment{}\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"docker-context\",\n\t\tContent:    \"🐳\" + context,\n\t\tForeground: p.theme.PlEnvFg,\n\t\tBackground: p.theme.PlEnvBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-dotenv.go",
          "type": "blob",
          "size": 0.486328125,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentDotEnv(p *powerline) []pwl.Segment {\n\tfiles := []string{\".env\", \".envrc\"}\n\tdotEnv := false\n\tfor _, file := range files {\n\t\tstat, err := os.Stat(file)\n\t\tif err == nil && !stat.IsDir() {\n\t\t\tdotEnv = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif !dotEnv {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"dotenv\",\n\t\tContent:    \"\\u2235\",\n\t\tForeground: p.theme.DotEnvFg,\n\t\tBackground: p.theme.DotEnvBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-duration.go",
          "type": "blob",
          "size": 2.5556640625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nconst (\n\tmicro  rune = '\\u00B5'\n\tmilli  rune = 'm'\n\tsecond rune = 's'\n\tminute rune = 'm'\n\thour   rune = 'h'\n)\n\nconst (\n\tnanoseconds  int64 = 1\n\tmicroseconds int64 = nanoseconds * 1000\n\tmilliseconds int64 = microseconds * 1000\n\tseconds      int64 = milliseconds * 1000\n\tminutes      int64 = seconds * 60\n\thours        int64 = minutes * 60\n)\n\nfunc segmentDuration(p *powerline) []pwl.Segment {\n\tif p.cfg.Duration == \"\" {\n\t\treturn []pwl.Segment{{\n\t\t\tName:       \"duration\",\n\t\t\tContent:    \"No duration\",\n\t\t\tForeground: p.theme.DurationFg,\n\t\t\tBackground: p.theme.DurationBg,\n\t\t}}\n\t}\n\n\tdurationValue := strings.Trim(p.cfg.Duration, \"'\\\"\")\n\tdurationMinValue := strings.Trim(p.cfg.DurationMin, \"'\\\"\")\n\n\thasPrecision := strings.Contains(durationValue, \".\")\n\n\tdurationFloat, err := strconv.ParseFloat(durationValue, 64)\n\tdurationMinFloat, _ := strconv.ParseFloat(durationMinValue, 64)\n\tif err != nil {\n\t\treturn []pwl.Segment{{\n\t\t\tName:       \"duration\",\n\t\t\tContent:    fmt.Sprintf(\"Failed to convert '%s' to a number\", p.cfg.Duration),\n\t\t\tForeground: p.theme.DurationFg,\n\t\t\tBackground: p.theme.DurationBg,\n\t\t}}\n\t}\n\n\tif durationFloat < durationMinFloat {\n\t\treturn []pwl.Segment{}\n\t}\n\n\tduration := time.Duration(durationFloat * float64(time.Second.Nanoseconds()))\n\n\tif duration <= 0 {\n\t\treturn []pwl.Segment{}\n\t}\n\n\tvar content string\n\tns := duration.Nanoseconds()\n\tif ns > hours {\n\t\thrs := ns / hours\n\t\tns -= hrs * hours\n\t\tmins := ns / minutes\n\t\tcontent = fmt.Sprintf(\"%d%c %d%c\", hrs, hour, mins, minute)\n\t} else if ns > minutes {\n\t\tmins := ns / minutes\n\t\tns -= mins * minutes\n\t\tsecs := ns / seconds\n\t\tcontent = fmt.Sprintf(\"%d%c %d%c\", mins, minute, secs, second)\n\t} else if !hasPrecision {\n\t\tsecs := ns / seconds\n\t\tcontent = fmt.Sprintf(\"%d%c\", secs, second)\n\t} else if ns > seconds {\n\t\tsecs := ns / seconds\n\t\tns -= secs * seconds\n\t\tmillis := ns / milliseconds\n\t\tcontent = fmt.Sprintf(\"%d%c %d%c%c\", secs, second, millis, milli, second)\n\t} else if ns > milliseconds || p.cfg.DurationLowPrecision {\n\t\tmillis := ns / milliseconds\n\t\tns -= millis * milliseconds\n\t\tmicros := ns / microseconds\n\t\tif p.cfg.DurationLowPrecision {\n\t\t\tcontent = fmt.Sprintf(\"%d%c%c\", millis, milli, second)\n\t\t} else {\n\t\t\tcontent = fmt.Sprintf(\"%d%c%c %d%c%c\", millis, milli, second, micros, micro, second)\n\t\t}\n\t} else {\n\t\tcontent = fmt.Sprintf(\"%d%c%c\", ns/microseconds, micro, second)\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"duration\",\n\t\tContent:    content,\n\t\tForeground: p.theme.DurationFg,\n\t\tBackground: p.theme.DurationBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-exitcode.go",
          "type": "blob",
          "size": 1.2177734375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\n\t\"github.com/justjanne/powerline-go/exitcode\"\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nvar exitCodes = map[int]string{\n\t// 1: generic\n\t1: \"ERROR\",\n\t// 2, 126, 127: common shell conventions, e.g. bash, zsh\n\t2:   \"USAGE\",\n\t126: \"NOEXEC\",\n\t127: \"NOTFOUND\",\n\t// 64-78: BSD, sysexits.h\n\t64: \"USAGE\",\n\t65: \"DATAERR\",\n\t66: \"NOINPUT\",\n\t67: \"NOUSER\",\n\t68: \"NOHOST\",\n\t69: \"UNAVAILABLE\",\n\t70: \"SOFTWARE\",\n\t71: \"OSERR\",\n\t72: \"OSFILE\",\n\t73: \"CANTCREAT\",\n\t74: \"IOERR\",\n\t75: \"TEMPFAIL\",\n\t76: \"PROTOCOL\",\n\t77: \"NOPERM\",\n\t78: \"CONFIG\",\n}\n\nfunc getMeaningFromExitCode(exitCode int) string {\n\tif exitCode < 128 {\n\t\tname, ok := exitCodes[exitCode]\n\t\tif ok {\n\t\t\treturn name\n\t\t}\n\t} else {\n\t\tname, ok := exitcode.Signals[exitCode-128]\n\t\tif ok {\n\t\t\treturn name\n\t\t}\n\t}\n\n\treturn fmt.Sprintf(\"%d\", exitCode)\n}\n\nfunc segmentExitCode(p *powerline) []pwl.Segment {\n\tvar meaning string\n\tif p.cfg.PrevError == 0 {\n\t\treturn []pwl.Segment{}\n\t}\n\tif p.cfg.NumericExitCodes {\n\t\tmeaning = strconv.Itoa(p.cfg.PrevError)\n\t} else {\n\t\tmeaning = getMeaningFromExitCode(p.cfg.PrevError)\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"exit\",\n\t\tContent:    meaning,\n\t\tForeground: p.theme.CmdFailedFg,\n\t\tBackground: p.theme.CmdFailedBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-fossil.go",
          "type": "blob",
          "size": 1.6240234375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"os/exec\"\n\t\"strings\"\n)\n\nfunc getFossilStatus() (bool, bool, bool) {\n\thasModifiedFiles := false\n\thasUntrackedFiles := false\n\thasMissingFiles := false\n\n\tout, err := exec.Command(\"fossil\", \"changes\", \"--differ\").Output()\n\tif err == nil {\n\t\toutput := strings.Split(string(out), \"\\n\")\n\t\tfor _, line := range output {\n\t\t\tif line != \"\" {\n\t\t\t\tif strings.HasPrefix(line, \"EXTRA\") {\n\t\t\t\t\thasUntrackedFiles = true\n\t\t\t\t} else if strings.HasPrefix(line, \"MISSING\") {\n\t\t\t\t\thasMissingFiles = true\n\t\t\t\t} else {\n\t\t\t\t\thasModifiedFiles = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn hasModifiedFiles, hasUntrackedFiles, hasMissingFiles\n}\n\nfunc segmentFossil(p *powerline) []pwl.Segment {\n\tout, _ := exec.Command(\"fossil\", \"branch\", \"current\").Output()\n\toutput := strings.SplitN(string(out), \"\\n\", 2)\n\tif len(output) > 0 && output[0] != \"\" {\n\t\tbranch := output[0]\n\t\thasModifiedFiles, hasUntrackedFiles, hasMissingFiles := getFossilStatus()\n\n\t\tvar foreground, background uint8\n\t\tvar content string\n\t\tif hasModifiedFiles || hasUntrackedFiles || hasMissingFiles {\n\t\t\tforeground = p.theme.RepoDirtyFg\n\t\t\tbackground = p.theme.RepoDirtyBg\n\n\t\t\textra := \"\"\n\n\t\t\tif hasUntrackedFiles {\n\t\t\t\textra += \"+\"\n\t\t\t}\n\n\t\t\tif hasMissingFiles {\n\t\t\t\textra += \"!\"\n\t\t\t}\n\n\t\t\tif hasUntrackedFiles {\n\t\t\t\textra += \"?\"\n\t\t\t}\n\n\t\t\tcontent = fmt.Sprintf(\"%s %s\", branch, extra)\n\t\t} else {\n\t\t\tforeground = p.theme.RepoCleanFg\n\t\t\tbackground = p.theme.RepoCleanBg\n\n\t\t\tcontent = branch\n\t\t}\n\n\t\treturn []pwl.Segment{{\n\t\t\tName:       \"fossil\",\n\t\t\tContent:    content,\n\t\t\tForeground: foreground,\n\t\t\tBackground: background,\n\t\t}}\n\t}\n\treturn []pwl.Segment{}\n}\n"
        },
        {
          "name": "segment-gcp.go",
          "type": "blob",
          "size": 2.712890625,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"runtime\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nconst gcloudCoreSectionHeader = \"\\n[core]\\n\"\n\nfunc getCloudConfigDir() (string, error) {\n\tp, err := os.UserHomeDir()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif runtime.GOOS != \"windows\" {\n\t\tp += \"/.config\"\n\t}\n\tp += \"/gcloud\"\n\treturn p, nil\n}\n\nfunc getActiveGCloudConfig(configDir string) (string, error) {\n\tactiveConfigPath := configDir + \"/active_config\"\n\n\tstat, err := os.Stat(activeConfigPath)\n\tif (err == nil && os.IsNotExist(err)) || (err == nil && stat.IsDir()) {\n\t\treturn \"default\", nil\n\t} else if err != nil {\n\t\treturn \"\", err\n\t}\n\n\tcontents, err := ioutil.ReadFile(activeConfigPath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tconfig := strings.TrimSpace(string(contents))\n\tif config == \"\" {\n\t\tconfig = \"default\"\n\t}\n\n\treturn config, nil\n}\n\nfunc getGCPProjectFromGCloud() (string, error) {\n\tout, err := exec.Command(\"gcloud\", \"config\", \"list\", \"project\", \"--format\", \"value(core.project)\").Output()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn strings.TrimSuffix(string(out), \"\\n\"), nil\n}\n\nfunc getGCPProjectFromFile() (string, error) {\n\tconfigDir, err := getCloudConfigDir()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tactiveConfig, err := getActiveGCloudConfig(configDir)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tconfigPath := configDir + \"/configurations/config_\" + activeConfig\n\tstat, err := os.Stat(configPath)\n\tif err != nil {\n\t\treturn \"\", err\n\t} else if stat.IsDir() {\n\t\treturn \"\", fmt.Errorf(\"%s is a directory\", configPath)\n\t}\n\n\tb, err := ioutil.ReadFile(configPath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tb = append([]byte(\"\\n\"), b...)\n\n\tcoreStart := bytes.Index(b, []byte(gcloudCoreSectionHeader))\n\tif coreStart == -1 {\n\t\treturn \"\", fmt.Errorf(\"could not find [core] section in %s\", configPath)\n\t}\n\tb = b[coreStart+len(gcloudCoreSectionHeader):]\n\n\tcoreEnd := bytes.Index(b, []byte(\"\\n[\"))\n\tif coreEnd != -1 {\n\t\tb = b[:coreEnd]\n\t}\n\n\tlines := bytes.Split(b[coreStart+len(gcloudCoreSectionHeader):coreEnd], []byte(\"\\n\"))\n\tfor _, line := range lines {\n\t\tparts := bytes.Split(line, []byte(\"=\"))\n\t\tif len(parts) == 2 {\n\t\t\tif strings.TrimSpace(string(parts[0])) == \"project\" {\n\t\t\t\treturn strings.TrimSpace(string(parts[1])), nil\n\t\t\t}\n\t\t}\n\t}\n\n\treturn \"\", nil\n}\n\nfunc getGCPProject() (string, error) {\n\tif project, err := getGCPProjectFromFile(); err == nil {\n\t\treturn project, nil\n\t} else {\n\t\treturn getGCPProjectFromGCloud()\n\t}\n}\n\nfunc segmentGCP(p *powerline) []pwl.Segment {\n\tproject, err := getGCPProject()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif project == \"\" {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"gcp\",\n\t\tContent:    project,\n\t\tForeground: p.theme.GCPFg,\n\t\tBackground: p.theme.GCPBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-git.go",
          "type": "blob",
          "size": 7.3466796875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\ntype repoStats struct {\n\tahead      int\n\tbehind     int\n\tuntracked  int\n\tnotStaged  int\n\tstaged     int\n\tconflicted int\n\tstashed    int\n}\n\nfunc (r repoStats) dirty() bool {\n\treturn r.untracked+r.notStaged+r.staged+r.conflicted > 0\n}\n\nfunc (r repoStats) any() bool {\n\treturn r.ahead+r.behind+r.untracked+r.notStaged+r.staged+r.conflicted+r.stashed > 0\n}\n\nfunc addRepoStatsSegment(nChanges int, symbol string, foreground uint8, background uint8) []pwl.Segment {\n\tif nChanges > 0 {\n\t\treturn []pwl.Segment{{\n\t\t\tName:       \"git-status\",\n\t\t\tContent:    fmt.Sprintf(\"%d%s\", nChanges, symbol),\n\t\t\tForeground: foreground,\n\t\t\tBackground: background,\n\t\t}}\n\t}\n\treturn []pwl.Segment{}\n}\n\nfunc (r repoStats) GitSegments(p *powerline) (segments []pwl.Segment) {\n\tsegments = append(segments, addRepoStatsSegment(r.ahead, p.symbols.RepoAhead, p.theme.GitAheadFg, p.theme.GitAheadBg)...)\n\tsegments = append(segments, addRepoStatsSegment(r.behind, p.symbols.RepoBehind, p.theme.GitBehindFg, p.theme.GitBehindBg)...)\n\tsegments = append(segments, addRepoStatsSegment(r.staged, p.symbols.RepoStaged, p.theme.GitStagedFg, p.theme.GitStagedBg)...)\n\tsegments = append(segments, addRepoStatsSegment(r.notStaged, p.symbols.RepoNotStaged, p.theme.GitNotStagedFg, p.theme.GitNotStagedBg)...)\n\tsegments = append(segments, addRepoStatsSegment(r.untracked, p.symbols.RepoUntracked, p.theme.GitUntrackedFg, p.theme.GitUntrackedBg)...)\n\tsegments = append(segments, addRepoStatsSegment(r.conflicted, p.symbols.RepoConflicted, p.theme.GitConflictedFg, p.theme.GitConflictedBg)...)\n\tsegments = append(segments, addRepoStatsSegment(r.stashed, p.symbols.RepoStashed, p.theme.GitStashedFg, p.theme.GitStashedBg)...)\n\treturn\n}\n\nfunc addRepoStatsSymbol(nChanges int, symbol string, GitMode string) string {\n\tif nChanges > 0 {\n\t\tif GitMode == \"simple\" {\n\t\t\treturn symbol\n\t\t} else if GitMode == \"compact\" {\n\t\t\treturn fmt.Sprintf(\" %d%s\", nChanges, symbol )\n\t\t} else {\n\t\t\treturn symbol\n\t\t}\n\t}\n\treturn \"\"\n}\n\nfunc (r repoStats) GitSymbols(p *powerline) string {\n\tvar info string\n\tinfo += addRepoStatsSymbol(r.ahead, p.symbols.RepoAhead, p.cfg.GitMode)\n\tinfo += addRepoStatsSymbol(r.behind, p.symbols.RepoBehind, p.cfg.GitMode)\n\tinfo += addRepoStatsSymbol(r.staged, p.symbols.RepoStaged, p.cfg.GitMode)\n\tinfo += addRepoStatsSymbol(r.notStaged, p.symbols.RepoNotStaged, p.cfg.GitMode)\n\tinfo += addRepoStatsSymbol(r.untracked, p.symbols.RepoUntracked, p.cfg.GitMode)\n\tinfo += addRepoStatsSymbol(r.conflicted, p.symbols.RepoConflicted, p.cfg.GitMode)\n\tinfo += addRepoStatsSymbol(r.stashed, p.symbols.RepoStashed, p.cfg.GitMode)\n\treturn info\n}\n\nvar branchRegex = regexp.MustCompile(`^## (?P<local>\\S+?)(\\.{3}(?P<remote>\\S+?)( \\[(ahead (?P<ahead>\\d+)(, )?)?(behind (?P<behind>\\d+))?])?)?$`)\n\nfunc groupDict(pattern *regexp.Regexp, haystack string) map[string]string {\n\tmatch := pattern.FindStringSubmatch(haystack)\n\tresult := make(map[string]string)\n\tif len(match) > 0 {\n\t\tfor i, name := range pattern.SubexpNames() {\n\t\t\tif i != 0 {\n\t\t\t\tresult[name] = match[i]\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\nvar gitProcessEnv = func() []string {\n\thomeEnv := homeEnvName()\n\thome, _ := os.LookupEnv(homeEnv)\n\tpath, _ := os.LookupEnv(\"PATH\")\n\tenv := map[string]string{\n\t\t\"LANG\":  \"C\",\n\t\thomeEnv: home,\n\t\t\"PATH\":  path,\n\t}\n\tresult := make([]string, 0)\n\tfor key, value := range env {\n\t\tresult = append(result, fmt.Sprintf(\"%s=%s\", key, value))\n\t}\n\treturn result\n}()\n\nfunc runGitCommand(cmd string, args ...string) (string, error) {\n\tcommand := exec.Command(cmd, args...)\n\tcommand.Env = gitProcessEnv\n\tout, err := command.Output()\n\treturn string(out), err\n}\n\nfunc parseGitBranchInfo(status []string) map[string]string {\n\treturn groupDict(branchRegex, status[0])\n}\n\nfunc getGitDetachedBranch(p *powerline) string {\n\tout, err := runGitCommand(\"git\", \"--no-optional-locks\", \"rev-parse\", \"--short\", \"HEAD\")\n\tif err != nil {\n\t\tout, err := runGitCommand(\"git\", \"--no-optional-locks\", \"symbolic-ref\", \"--short\", \"HEAD\")\n\t\tif err != nil {\n\t\t\treturn \"Error\"\n\t\t}\n\t\treturn strings.SplitN(out, \"\\n\", 2)[0]\n\t}\n\tdetachedRef := strings.SplitN(out, \"\\n\", 2)\n\treturn fmt.Sprintf(\"%s %s\", p.symbols.RepoDetached, detachedRef[0])\n}\n\nfunc parseGitStats(status []string) repoStats {\n\tstats := repoStats{}\n\tif len(status) > 1 {\n\t\tfor _, line := range status[1:] {\n\t\t\tif len(line) > 2 {\n\t\t\t\tcode := line[:2]\n\t\t\t\tswitch code {\n\t\t\t\tcase \"??\":\n\t\t\t\t\tstats.untracked++\n\t\t\t\tcase \"DD\", \"AU\", \"UD\", \"UA\", \"DU\", \"AA\", \"UU\":\n\t\t\t\t\tstats.conflicted++\n\t\t\t\tdefault:\n\t\t\t\t\tif code[0] != ' ' {\n\t\t\t\t\t\tstats.staged++\n\t\t\t\t\t}\n\n\t\t\t\t\tif code[1] != ' ' {\n\t\t\t\t\t\tstats.notStaged++\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stats\n}\n\nfunc repoRoot(path string) (string, error) {\n\tout, err := runGitCommand(\"git\", \"--no-optional-locks\", \"rev-parse\", \"--show-toplevel\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn strings.TrimSpace(out), nil\n}\n\nfunc indexSize(root string) (int64, error) {\n\tfileInfo, err := os.Stat(path.Join(root, \".git\", \"index\"))\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn fileInfo.Size(), nil\n}\n\nfunc segmentGit(p *powerline) []pwl.Segment {\n\trepoRoot, err := repoRoot(p.cwd)\n\tif err != nil {\n\t\treturn []pwl.Segment{}\n\t}\n\n\tif len(p.ignoreRepos) > 0 && p.ignoreRepos[repoRoot] {\n\t\treturn []pwl.Segment{}\n\t}\n\n\targs := []string{\n\t\t\"--no-optional-locks\", \"status\", \"--porcelain\", \"-b\", \"--ignore-submodules\",\n\t}\n\n\tif p.cfg.GitAssumeUnchangedSize > 0 {\n\t\tindexSize, _ := indexSize(p.cwd)\n\t\tif indexSize > (p.cfg.GitAssumeUnchangedSize * 1024) {\n\t\t\targs = append(args, \"-uno\")\n\t\t}\n\t}\n\n\tout, err := runGitCommand(\"git\", args...)\n\tif err != nil {\n\t\treturn []pwl.Segment{}\n\t}\n\n\tstatus := strings.Split(out, \"\\n\")\n\tstats := parseGitStats(status)\n\tbranchInfo := parseGitBranchInfo(status)\n\tvar branch string\n\n\tif branchInfo[\"local\"] != \"\" {\n\t\tahead, _ := strconv.ParseInt(branchInfo[\"ahead\"], 10, 32)\n\t\tstats.ahead = int(ahead)\n\n\t\tbehind, _ := strconv.ParseInt(branchInfo[\"behind\"], 10, 32)\n\t\tstats.behind = int(behind)\n\n\t\tbranch = branchInfo[\"local\"]\n\t} else {\n\t\tbranch = getGitDetachedBranch(p)\n\t}\n\n\tif len(p.symbols.RepoBranch) > 0 {\n\t\tbranch = fmt.Sprintf(\"%s %s\", p.symbols.RepoBranch, branch)\n\t}\n\n\tvar foreground, background uint8\n\tif stats.dirty() {\n\t\tforeground = p.theme.RepoDirtyFg\n\t\tbackground = p.theme.RepoDirtyBg\n\t} else {\n\t\tforeground = p.theme.RepoCleanFg\n\t\tbackground = p.theme.RepoCleanBg\n\t}\n\n\tsegments := []pwl.Segment{{\n\t\tName:       \"git-branch\",\n\t\tContent:    branch,\n\t\tForeground: foreground,\n\t\tBackground: background,\n\t}}\n\n\tstashEnabled := true\n\tfor _, stat := range p.cfg.GitDisableStats {\n\t\t// \"ahead, behind, staged, notStaged, untracked, conflicted, stashed\"\n\t\tswitch stat {\n\t\tcase \"ahead\":\n\t\t\tstats.ahead = 0\n\t\tcase \"behind\":\n\t\t\tstats.behind = 0\n\t\tcase \"staged\":\n\t\t\tstats.staged = 0\n\t\tcase \"notStaged\":\n\t\t\tstats.notStaged = 0\n\t\tcase \"untracked\":\n\t\t\tstats.untracked = 0\n\t\tcase \"conflicted\":\n\t\t\tstats.conflicted = 0\n\t\tcase \"stashed\":\n\t\t\tstats.stashed = 0\n\t\t\tstashEnabled = false\n\t\t}\n\t}\n\n\tif stashEnabled {\n\t\tout, err = runGitCommand(\"git\", \"--no-optional-locks\", \"rev-list\", \"-g\", \"refs/stash\")\n\t\tif err == nil {\n\t\t\tstats.stashed = strings.Count(out, \"\\n\")\n\t\t}\n\t}\n\n\tif p.cfg.GitMode == \"simple\" {\n\t\tif stats.any() {\n\t\t\tsegments[0].Content += \" \" + stats.GitSymbols(p)\n\t\t}\n\t} else if p.cfg.GitMode == \"compact\" {\n\t\tif stats.any() {\n\t\t\tsegments[0].Content += stats.GitSymbols(p)\n\t\t}\n\t} else { // fancy\n\t\tsegments = append(segments, stats.GitSegments(p)...)\n\t}\n\n\treturn segments\n}\n"
        },
        {
          "name": "segment-gitlite.go",
          "type": "blob",
          "size": 0.947265625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentGitLite(p *powerline) []pwl.Segment {\n\tif len(p.ignoreRepos) > 0 {\n\t\tout, err := runGitCommand(\"git\", \"--no-optional-locks\", \"rev-parse\", \"--show-toplevel\")\n\t\tif err != nil {\n\t\t\treturn []pwl.Segment{}\n\t\t}\n\t\tout = strings.TrimSpace(out)\n\t\tif p.ignoreRepos[out] {\n\t\t\treturn []pwl.Segment{}\n\t\t}\n\t}\n\n\tout, err := runGitCommand(\"git\", \"--no-optional-locks\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\")\n\tif err != nil {\n\t\treturn []pwl.Segment{}\n\t}\n\n\tstatus := strings.TrimSpace(out)\n\tvar branch string\n\n\tif status == \"HEAD\" {\n\t\tbranch = getGitDetachedBranch(p)\n\t} else {\n\t\tbranch = status\n\t}\n\n\tif p.cfg.GitMode != \"compact\" && len(p.symbols.RepoBranch) > 0 {\n\t\tbranch = fmt.Sprintf(\"%s %s\", p.symbols.RepoBranch, branch)\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"git-branch\",\n\t\tContent:    branch,\n\t\tForeground: p.theme.RepoCleanFg,\n\t\tBackground: p.theme.RepoCleanBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-goenv.go",
          "type": "blob",
          "size": 2.4619140625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nconst goenvVersionFileSuffix = \"/.go-version\"\nconst goenvVersionEnvVar = \"GOENV_VERSION\"\nconst goenvGlobalVersionFileSuffix = \"/.goenv/version\"\n\nfunc runGoenvCommand(cmd string, args ...string) (string, error) {\n\tcommand := exec.Command(cmd, args...)\n\tout, err := command.Output()\n\treturn string(out), err\n}\n\n// check GOENV_VERSION variable\nfunc checkEnvForGoenvVersion() (string, error) {\n\tgoenvVersion := os.Getenv(goenvVersionEnvVar)\n\tif len(goenvVersion) > 0 {\n\t\treturn goenvVersion, nil\n\t} else {\n\t\treturn \"\", fmt.Errorf(\"Not found in %s\", goenvVersionEnvVar)\n\t}\n}\n\n// check existence of .go-version in tree until root path\nfunc checkForGoVersionFileInTree() (string, error) {\n\tvar (\n\t\tworkingDirectory string\n\t\terr              error\n\t)\n\n\tworkingDirectory, err = os.Getwd()\n\tif err == nil {\n\t\tfor workingDirectory != \"/\" {\n\t\t\tgoVersion, goVersionErr := ioutil.ReadFile(workingDirectory + goenvVersionFileSuffix)\n\t\t\tif goVersionErr == nil {\n\t\t\t\treturn strings.TrimSpace(string(goVersion)), nil\n\t\t\t}\n\n\t\t\tworkingDirectory = filepath.Dir(workingDirectory)\n\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"No %s file found in tree\", goenvVersionFileSuffix)\n}\n\n// check for global version\nfunc checkForGoenvGlobalVersion() (string, error) {\n\thomeDir, _ := os.UserHomeDir()\n\tglobalGoVersion, err := ioutil.ReadFile(homeDir + goenvGlobalVersionFileSuffix)\n\tif err == nil {\n\t\treturn strings.TrimSpace(string(globalGoVersion)), nil\n\t} else {\n\t\treturn \"\", fmt.Errorf(\"No global go version file found in %s\", homeDir+goenvGlobalVersionFileSuffix)\n\t}\n}\n\n// retrieve goenv version output\nfunc checkForGoenvOutput() (string, error) {\n\t// spawn goenv and print out version\n\tout, err := runGoenvCommand(\"goenv\", \"version\")\n\tif err == nil {\n\t\titems := strings.Split(out, \" \")\n\t\tif len(items) > 1 {\n\t\t\treturn items[0], nil\n\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"Not found in goenv object\")\n}\n\nfunc segmentGoenv(p *powerline) []pwl.Segment {\n\tglobal, _ := checkForGoenvGlobalVersion()\n\n\tsegment, err := checkEnvForGoenvVersion()\n\tif err != nil || segment == global {\n\t\tsegment, err = checkForGoVersionFileInTree()\n\t}\n\tif err != nil || segment == global {\n\t\tsegment, err = checkForGoenvOutput()\n\t}\n\tif err != nil || segment == global {\n\t\treturn []pwl.Segment{}\n\t} else {\n\t\treturn []pwl.Segment{{\n\t\t\tName:       \"goenv\",\n\t\t\tContent:    segment,\n\t\t\tForeground: p.theme.GoenvFg,\n\t\t\tBackground: p.theme.GoenvBg,\n\t\t}}\n\t}\n}\n"
        },
        {
          "name": "segment-hg.go",
          "type": "blob",
          "size": 1.4716796875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os/exec\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc getHgStatus() (bool, bool, bool) {\n\thasModifiedFiles := false\n\thasUntrackedFiles := false\n\thasMissingFiles := false\n\n\tout, err := exec.Command(\"hg\", \"status\").Output()\n\tif err == nil {\n\t\toutput := strings.Split(string(out), \"\\n\")\n\t\tfor _, line := range output {\n\t\t\tif line != \"\" {\n\t\t\t\tif line[0] == '?' {\n\t\t\t\t\thasUntrackedFiles = true\n\t\t\t\t} else if line[0] == '!' {\n\t\t\t\t\thasMissingFiles = true\n\t\t\t\t} else {\n\t\t\t\t\thasModifiedFiles = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn hasModifiedFiles, hasUntrackedFiles, hasMissingFiles\n}\n\nfunc segmentHg(p *powerline) []pwl.Segment {\n\tout, _ := exec.Command(\"hg\", \"branch\").Output()\n\toutput := strings.SplitN(string(out), \"\\n\", 2)\n\tif !(len(output) > 0 && output[0] != \"\") {\n\t\treturn []pwl.Segment{}\n\t}\n\tbranch := output[0]\n\thasModifiedFiles, hasUntrackedFiles, hasMissingFiles := getHgStatus()\n\n\tvar foreground, background uint8\n\tvar content string\n\tif hasModifiedFiles || hasUntrackedFiles || hasMissingFiles {\n\t\tforeground = p.theme.RepoDirtyFg\n\t\tbackground = p.theme.RepoDirtyBg\n\n\t\textra := \"\"\n\n\t\tif hasUntrackedFiles {\n\t\t\textra += \"+\"\n\t\t}\n\n\t\tif hasMissingFiles {\n\t\t\textra += \"!\"\n\t\t}\n\n\t\tcontent = fmt.Sprintf(\"%s %s\", branch, extra)\n\t} else {\n\t\tforeground = p.theme.RepoCleanFg\n\t\tbackground = p.theme.RepoCleanBg\n\n\t\tcontent = branch\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"hg\",\n\t\tContent:    content,\n\t\tForeground: foreground,\n\t\tBackground: background,\n\t}}\n}\n"
        },
        {
          "name": "segment-hostname.go",
          "type": "blob",
          "size": 1.478515625,
          "content": "package main\n\nimport (\n\t\"crypto/md5\"\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc getHostName(fullyQualifiedDomainName string) string {\n\treturn strings.SplitN(fullyQualifiedDomainName, \".\", 2)[0]\n}\n\nfunc getMd5(text string) []byte {\n\thasher := md5.New()\n\thasher.Write([]byte(text))\n\treturn hasher.Sum(nil)\n}\n\nfunc segmentHost(p *powerline) []pwl.Segment {\n\tvar hostPrompt string\n\tvar foreground, background uint8\n\n\tif p.cfg.HostnameOnlyIfSSH {\n\t\tif os.Getenv(\"SSH_CLIENT\") == \"\" {\n\t\t\t// It's not an ssh connection do nothing\n\t\t\treturn []pwl.Segment{}\n\t\t}\n\t}\n\n\tif p.cfg.ColorizeHostname {\n\t\thostName := getHostName(p.hostname)\n\t\thostPrompt = hostName\n\n\t\tforegroundEnv, foregroundEnvErr := strconv.ParseUint(os.Getenv(\"PLGO_HOSTNAMEFG\"), 0, 8)\n\t\tbackgroundEnv, backgroundEnvErr := strconv.ParseUint(os.Getenv(\"PLGO_HOSTNAMEBG\"), 0, 8)\n\t\tif foregroundEnvErr == nil && backgroundEnvErr == nil {\n\t\t\tforeground = uint8(foregroundEnv)\n\t\t\tbackground = uint8(backgroundEnv)\n\t\t} else {\n\t\t\thash := getMd5(hostName)\n\t\t\tbackground = hash[0] % 128\n\t\t\tforeground = p.theme.HostnameColorizedFgMap[background]\n\t\t}\n\t} else {\n\t\tif p.cfg.Shell == \"bash\" {\n\t\t\thostPrompt = \"\\\\h\"\n\t\t} else if p.cfg.Shell == \"zsh\" {\n\t\t\thostPrompt = \"%m\"\n\t\t} else {\n\t\t\thostPrompt = getHostName(p.hostname)\n\t\t}\n\n\t\tforeground = p.theme.HostnameFg\n\t\tbackground = p.theme.HostnameBg\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"host\",\n\t\tContent:    hostPrompt,\n\t\tForeground: foreground,\n\t\tBackground: background,\n\t}}\n}\n"
        },
        {
          "name": "segment-jobs.go",
          "type": "blob",
          "size": 0.330078125,
          "content": "package main\n\nimport (\n\t\"strconv\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentJobs(p *powerline) []pwl.Segment {\n\tif p.cfg.Jobs <= 0 {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"jobs\",\n\t\tContent:    strconv.Itoa(p.cfg.Jobs),\n\t\tForeground: p.theme.JobsFg,\n\t\tBackground: p.theme.JobsBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-kube.go",
          "type": "blob",
          "size": 3.490234375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n\n\t\"gopkg.in/yaml.v2\"\n)\n\n// KubeContext holds the kubernetes context\ntype KubeContext struct {\n\tContext struct {\n\t\tCluster   string\n\t\tNamespace string\n\t\tUser      string\n\t}\n\tName string\n}\n\n// KubeConfig is the kubernetes configuration\ntype KubeConfig struct {\n\tContexts       []KubeContext `yaml:\"contexts\"`\n\tCurrentContext string        `yaml:\"current-context\"`\n}\n\nfunc homePath() string {\n\treturn os.Getenv(homeEnvName())\n}\n\nfunc readKubeConfig(config *KubeConfig, path string) (err error) {\n\tabsolutePath, err := filepath.Abs(path)\n\tif err != nil {\n\t\treturn\n\t}\n\tfileContent, err := ioutil.ReadFile(absolutePath)\n\tif err != nil {\n\t\treturn\n\t}\n\terr = yaml.Unmarshal(fileContent, config)\n\tif err != nil {\n\t\treturn\n\t}\n\n\treturn\n}\n\nfunc segmentKube(p *powerline) []pwl.Segment {\n\tpaths := append(strings.Split(os.Getenv(\"KUBECONFIG\"), \":\"), path.Join(homePath(), \".kube\", \"config\"))\n\tconfig := &KubeConfig{}\n\tfor _, configPath := range paths {\n\t\ttemp := &KubeConfig{}\n\t\tif readKubeConfig(temp, configPath) == nil {\n\t\t\tconfig.Contexts = append(config.Contexts, temp.Contexts...)\n\t\t\tif config.CurrentContext == \"\" {\n\t\t\t\tconfig.CurrentContext = temp.CurrentContext\n\t\t\t}\n\t\t}\n\t}\n\n\tcluster := \"\"\n\tnamespace := \"\"\n\tfor _, context := range config.Contexts {\n\t\tif context.Name == config.CurrentContext {\n\t\t\tcluster = context.Name\n\t\t\tnamespace = context.Context.Namespace\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// When you use gke your clusters may look something like gke_projectname_availability-zone_cluster-01\n\t// instead I want it to read as `cluster-01`\n\t// So we remove the first 3 segments of this string, if the flag is set, and there are enough segments\n\tif strings.HasPrefix(cluster, \"gke\") && p.cfg.ShortenGKENames {\n\t\tsegments := strings.Split(cluster, \"_\")\n\t\tif len(segments) > 3 {\n\t\t\tcluster = strings.Join(segments[3:], \"_\")\n\t\t}\n\t}\n\n\t// When you use openshift your clusters may look something like namespace/portal-url:port/user,\n\t// instead I want it to read as `portal-url`.\n\t// So we ensure there are three segments split by / and then choose the middle part,\n\t// we also remove the port number from the result.\n\tif p.cfg.ShortenOpenshiftNames {\n\t\tsegments := strings.Split(cluster, \"/\")\n\t\tif len(segments) == 3 {\n\t\t\tcluster = segments[1]\n\t\t\tidx := strings.IndexByte(cluster, ':')\n\t\t\tif idx != -1 {\n\t\t\t\tcluster = cluster[0:idx]\n\t\t\t}\n\t\t}\n\t}\n\n\t// With AWS EKS, cluster names are ARNs; it makes more sense to shorten them\n\t// so \"eks-infra\" instead of \"arn:aws:eks:us-east-1:XXXXXXXXXXXX:cluster/eks-infra\n\tconst arnRegexString string = \"^arn:aws:eks:[[:alnum:]-]+:[[:digit:]]+:cluster/(.*)$\"\n\tarnRe := regexp.MustCompile(arnRegexString)\n\n\tif arnMatches := arnRe.FindStringSubmatch(cluster); arnMatches != nil && p.cfg.ShortenEKSNames {\n\t\tcluster = arnMatches[1]\n\t}\n\tsegments := []pwl.Segment{}\n\t// Only draw the icon once\n\tkubeIconHasBeenDrawnYet := false\n\tif cluster != \"\" {\n\t\tkubeIconHasBeenDrawnYet = true\n\t\tsegments = append(segments, pwl.Segment{\n\t\t\tName:       \"kube-cluster\",\n\t\t\tContent:    fmt.Sprintf(\"⎈ %s\", cluster),\n\t\t\tForeground: p.theme.KubeClusterFg,\n\t\t\tBackground: p.theme.KubeClusterBg,\n\t\t})\n\t}\n\n\tif namespace != \"\" {\n\t\tcontent := namespace\n\t\tif !kubeIconHasBeenDrawnYet {\n\t\t\tcontent = fmt.Sprintf(\"⎈ %s\", content)\n\t\t}\n\t\tsegments = append(segments, pwl.Segment{\n\t\t\tName:       \"kube-namespace\",\n\t\t\tContent:    content,\n\t\t\tForeground: p.theme.KubeNamespaceFg,\n\t\t\tBackground: p.theme.KubeNamespaceBg,\n\t\t})\n\t}\n\treturn segments\n}\n"
        },
        {
          "name": "segment-load.go",
          "type": "blob",
          "size": 0.6083984375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"runtime\"\n\n\t\"github.com/shirou/gopsutil/v3/load\"\n)\n\nfunc segmentLoad(p *powerline) []pwl.Segment {\n\tc := runtime.NumCPU()\n\ta, err := load.Avg()\n\tif err != nil {\n\t\treturn []pwl.Segment{}\n\t}\n\tbg := p.theme.LoadBg\n\n\tload := a.Load5\n\tswitch p.theme.LoadAvgValue {\n\tcase 1:\n\t\tload = a.Load1\n\tcase 15:\n\t\tload = a.Load15\n\t}\n\n\tif load > float64(c)*p.theme.LoadThresholdBad {\n\t\tbg = p.theme.LoadHighBg\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"load\",\n\t\tContent:    fmt.Sprintf(\"%.2f\", a.Load5),\n\t\tForeground: p.theme.LoadFg,\n\t\tBackground: bg,\n\t}}\n}\n"
        },
        {
          "name": "segment-newline.go",
          "type": "blob",
          "size": 0.1591796875,
          "content": "package main\n\nimport pwl \"github.com/justjanne/powerline-go/powerline\"\n\nfunc segmentNewline(p *powerline) []pwl.Segment {\n\treturn []pwl.Segment{{NewLine: true}}\n}\n"
        },
        {
          "name": "segment-nix-shell.go",
          "type": "blob",
          "size": 0.3876953125,
          "content": "package main\n\nimport (\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"os\"\n)\n\nfunc segmentNixShell(p *powerline) []pwl.Segment {\n\tvar nixShell string\n\tnixShell, _ = os.LookupEnv(\"IN_NIX_SHELL\")\n\tif nixShell == \"\" {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"nix-shell\",\n\t\tContent:    \"\\uf313\",\n\t\tForeground: p.theme.NixShellFg,\n\t\tBackground: p.theme.NixShellBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-node.go",
          "type": "blob",
          "size": 1.33984375,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nconst pkgfile = \"./package.json\"\n\ntype packageJSON struct {\n\tVersion string `json:\"version\"`\n}\n\nfunc getNodeVersion() string {\n\tout, err := exec.Command(\"node\", \"--version\").Output()\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\treturn strings.TrimSuffix(string(out), \"\\n\")\n}\n\nfunc getPackageVersion() string {\n\tstat, err := os.Stat(pkgfile)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\tif stat.IsDir() {\n\t\treturn \"\"\n\t}\n\tpkg := packageJSON{\"\"}\n\traw, err := ioutil.ReadFile(pkgfile)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\terr = json.Unmarshal(raw, &pkg)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\n\treturn strings.TrimSpace(pkg.Version)\n}\n\nfunc segmentNode(p *powerline) []pwl.Segment {\n\tnodeVersion := getNodeVersion()\n\tpackageVersion := getPackageVersion()\n\n\tsegments := []pwl.Segment{}\n\n\tif nodeVersion != \"\" {\n\t\tsegments = append(segments, pwl.Segment{\n\t\t\tName:       \"node\",\n\t\t\tContent:    p.symbols.NodeIndicator + \" \" + nodeVersion,\n\t\t\tForeground: p.theme.NodeVersionFg,\n\t\t\tBackground: p.theme.NodeVersionBg,\n\t\t})\n\t}\n\n\tif packageVersion != \"\" {\n\t\tsegments = append(segments, pwl.Segment{\n\t\t\tName:       \"node-segment\",\n\t\t\tContent:    packageVersion + \" \" + p.symbols.NodeIndicator,\n\t\t\tForeground: p.theme.NodeFg,\n\t\t\tBackground: p.theme.NodeBg,\n\t\t})\n\t}\n\n\treturn segments\n}\n"
        },
        {
          "name": "segment-perlbrew.go",
          "type": "blob",
          "size": 0.392578125,
          "content": "package main\n\nimport (\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"os\"\n\t\"path\"\n)\n\nfunc segmentPerlbrew(p *powerline) []pwl.Segment {\n\tenv, _ := os.LookupEnv(\"PERLBREW_PERL\")\n\tif env == \"\" {\n\t\treturn []pwl.Segment{}\n\t}\n\n\tenvName := path.Base(env)\n\treturn []pwl.Segment{{\n\t\tName:       \"perlbrew\",\n\t\tContent:    envName,\n\t\tForeground: p.theme.PerlbrewFg,\n\t\tBackground: p.theme.PerlbrewBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-plenv.go",
          "type": "blob",
          "size": 0.3427734375,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentPlEnv(p *powerline) []pwl.Segment {\n\tenv, _ := os.LookupEnv(\"PLENV_VERSION\")\n\tif env == \"\" {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"plenv\",\n\t\tContent:    env,\n\t\tForeground: p.theme.PlEnvFg,\n\t\tBackground: p.theme.PlEnvBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-plugin.go",
          "type": "blob",
          "size": 0.484375,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"os/exec\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentPlugin(p *powerline, plugin string) ([]pwl.Segment, bool) {\n\toutput, err := exec.Command(\"powerline-go-\" + plugin).Output()\n\tif err != nil {\n\t\treturn nil, false\n\t}\n\tsegments := []pwl.Segment{}\n\terr = json.Unmarshal(output, &segments)\n\tif err != nil {\n\t\t// The plugin was found but no valid data was returned. Ignore it\n\t\treturn []pwl.Segment{}, true\n\t}\n\treturn segments, true\n}\n"
        },
        {
          "name": "segment-rbenv.go",
          "type": "blob",
          "size": 2.3720703125,
          "content": "package main\n\nimport (\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nconst rubyVersionFileSuffix = \"/.ruby-version\"\nconst globalVersionFileSuffix = \"/.rbenv/version\"\n\nfunc runRbenvCommand(cmd string, args ...string) (string, error) {\n\tcommand := exec.Command(cmd, args...)\n\tout, err := command.Output()\n\treturn string(out), err\n}\n\n// check RBENV_VERSION variable\nfunc checkEnvForRbenvVersion() (string, error) {\n\trbenvVersion := os.Getenv(\"RBENV_VERSION\")\n\tif len(rbenvVersion) <= 0 {\n\t\treturn \"\", errors.New(\"Not found in RBENV_VERSION\")\n\t}\n\treturn rbenvVersion, nil\n}\n\n// check existence of .ruby_version in tree until root path\nfunc checkForRubyVersionFileInTree() (string, error) {\n\tvar (\n\t\tworkingDirectory string\n\t\terr              error\n\t)\n\n\tworkingDirectory, err = os.Getwd()\n\tif err == nil {\n\t\tfor workingDirectory != \"/\" {\n\t\t\trubyVersion, rubyVersionErr := ioutil.ReadFile(workingDirectory + rubyVersionFileSuffix)\n\t\t\tif rubyVersionErr == nil {\n\t\t\t\treturn strings.TrimSpace(string(rubyVersion)), nil\n\t\t\t}\n\n\t\t\tworkingDirectory = filepath.Dir(workingDirectory)\n\t\t}\n\t}\n\n\treturn \"\", errors.New(\"No .ruby_version file found in tree\")\n}\n\n// check for global version\nfunc checkForGlobalVersion() (string, error) {\n\thomeDir, _ := os.UserHomeDir()\n\tglobalRubyVersion, err := ioutil.ReadFile(homeDir + globalVersionFileSuffix)\n\tif err != nil {\n\t\treturn \"\", errors.New(\"No global version file found in tree\")\n\t}\n\treturn strings.TrimSpace(string(globalRubyVersion)), nil\n}\n\n// retrieve rbenv version output\nfunc checkForRbenvOutput() (string, error) {\n\t// spawn rbenv and print out version\n\tout, err := runRbenvCommand(\"rbenv\", \"version\")\n\tif err != nil {\n\t\treturn \"\", errors.New(\"Not found in rbenv output\")\n\t}\n\titems := strings.Split(out, \" \")\n\tif len(items) <= 0 {\n\t\treturn \"\", errors.New(\"Not found in rbenv output\")\n\t}\n\n\treturn items[0], nil\n}\n\nfunc segmentRbenv(p *powerline) []pwl.Segment {\n\tvar (\n\t\tsegment string\n\t\terr     error\n\t)\n\n\tsegment, err = checkEnvForRbenvVersion()\n\tif err != nil {\n\t\tsegment, err = checkForRubyVersionFileInTree()\n\t}\n\tif err != nil {\n\t\tsegment, err = checkForGlobalVersion()\n\t}\n\tif err != nil {\n\t\tsegment, err = checkForRbenvOutput()\n\t}\n\tif err != nil {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"rbenv\",\n\t\tContent:    segment,\n\t\tForeground: p.theme.TimeFg,\n\t\tBackground: p.theme.TimeBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-readonly.go",
          "type": "blob",
          "size": 0.39453125,
          "content": "// +build !windows\n\npackage main\n\nimport (\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"golang.org/x/sys/unix\"\n)\n\nfunc segmentPerms(p *powerline) []pwl.Segment {\n\tcwd := p.cwd\n\tif unix.Access(cwd, unix.W_OK) == nil {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"perms\",\n\t\tContent:    p.symbols.Lock,\n\t\tForeground: p.theme.ReadonlyFg,\n\t\tBackground: p.theme.ReadonlyBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-readonly_windows.go",
          "type": "blob",
          "size": 0.498046875,
          "content": "// +build windows\n\npackage main\n\nimport (\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentPerms(p *powerline) []pwl.Segment {\n\tcwd := p.cwd\n\tconst W_USR = 0002\n\t// Check user's permissions on directory in a portable but probably slower way\n\tfileInfo, _ := os.Stat(cwd)\n\tif fileInfo.Mode()&W_USR == W_USR {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"perms\",\n\t\tContent:    p.symbols.Lock,\n\t\tForeground: p.theme.ReadonlyFg,\n\t\tBackground: p.theme.ReadonlyBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-root.go",
          "type": "blob",
          "size": 0.494140625,
          "content": "package main\n\nimport pwl \"github.com/justjanne/powerline-go/powerline\"\n\nfunc segmentRoot(p *powerline) []pwl.Segment {\n\tvar foreground, background uint8\n\tif p.cfg.PrevError == 0 || p.cfg.StaticPromptIndicator {\n\t\tforeground = p.theme.CmdPassedFg\n\t\tbackground = p.theme.CmdPassedBg\n\t} else {\n\t\tforeground = p.theme.CmdFailedFg\n\t\tbackground = p.theme.CmdFailedBg\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"root\",\n\t\tContent:    p.shell.RootIndicator,\n\t\tForeground: foreground,\n\t\tBackground: background,\n\t}}\n}\n"
        },
        {
          "name": "segment-rvm.go",
          "type": "blob",
          "size": 2.0615234375,
          "content": "package main\n\nimport (\n\t\"errors\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc runRvmCommand(cmd string, args ...string) (string, error) {\n\tcommand := exec.Command(cmd, args...)\n\tout, err := command.Output()\n\treturn string(out), err\n}\n\n// check RUBY_VERSION variable\nfunc checkEnvForRubyVersion() (string, error) {\n\trubyVersion := os.Getenv(\"RUBY_VERSION\")\n\tif len(rubyVersion) <= 0 {\n\t\treturn \"\", errors.New(\"Not found in RUBY_VERSION\")\n\t}\n\treturn rubyVersion, nil\n}\n\n// check GEM_HOME variable for gemset information\nfunc checkEnvForRubyGemset() (string, error) {\n\tgemHomeSegments := strings.Split(os.Getenv(\"GEM_HOME\"), \"@\")\n\n\tif len(gemHomeSegments) <= 1 {\n\t\treturn \"\", errors.New(\"Gemset not found in GEM_HOME\")\n\t}\n\n\treturn gemHomeSegments[1], nil\n}\n\n// retrieve ruby version from RVM\nfunc checkForRvmOutput() (string, error) {\n\t// ask RVM what the current ruby version is\n\tout, err := runRvmCommand(\"rvm\", \"current\")\n\tif err != nil {\n\t\treturn \"\", errors.New(\"Not found in RVM output\")\n\t}\n\titems := strings.Split(out, \" \")\n\tif len(items) <= 0 {\n\t\treturn \"\", errors.New(\"Not found in RVM output\")\n\t}\n\n\treturn items[0], nil\n}\n\nfunc segmentRvm(p *powerline) []pwl.Segment {\n\tvar (\n\t\tsegment string\n\t\terr     error\n\t)\n\n\tsegment, err = checkEnvForRubyVersion()\n\tif err != nil {\n\t\tsegment, err = checkForRubyVersionFileInTree()\n\t}\n\tif err != nil {\n\t\tsegment, err = checkForRvmOutput()\n\t}\n\tif err != nil {\n\t\treturn []pwl.Segment{}\n\t}\n\n\t// Remove explicit \"ruby-\" prefix from segment because it's superfluous\n\tsegment_components := strings.Split(segment, \"-\")\n\tif len(segment_components) > 1 {\n\t\tsegment = segment_components[1]\n\t}\n\n\t// If gemset is missing from segment, get that info from the environment\n\tsegment_components = strings.Split(segment, \"@\")\n\tif len(segment_components) < 2 {\n\t\tgemset, err := checkEnvForRubyGemset()\n\t\tif err == nil && gemset != \"\" {\n\t\t\tsegment = segment + \"@\" + gemset\n\t\t}\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"rvm\",\n\t\tContent:    p.symbols.RvmIndicator + \" \" + segment,\n\t\tForeground: p.theme.RvmFg,\n\t\tBackground: p.theme.RvmBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-shellvar.go",
          "type": "blob",
          "size": 0.642578125,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentShellVar(p *powerline) []pwl.Segment {\n\tshellVarName := p.cfg.ShellVar\n\tvarContent, varExists := os.LookupEnv(shellVarName)\n\n\tif !varExists {\n\t\tif shellVarName != \"\" {\n\t\t\twarn(\"Shell variable \" + shellVarName + \" does not exist.\")\n\t\t}\n\t\treturn []pwl.Segment{}\n\t}\n\n\tif varContent == \"\" {\n\t\tif !p.cfg.ShellVarNoWarnEmpty {\n\t\t\twarn(\"Shell variable \" + shellVarName + \" is empty.\")\n\t\t}\n\t\treturn []pwl.Segment{}\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"shell-var\",\n\t\tContent:    varContent,\n\t\tForeground: p.theme.ShellVarFg,\n\t\tBackground: p.theme.ShellVarBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-shenv.go",
          "type": "blob",
          "size": 0.3427734375,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentShEnv(p *powerline) []pwl.Segment {\n\tenv, _ := os.LookupEnv(\"SHENV_VERSION\")\n\tif env == \"\" {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"shenv\",\n\t\tContent:    env,\n\t\tForeground: p.theme.ShEnvFg,\n\t\tBackground: p.theme.ShEnvBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-ssh.go",
          "type": "blob",
          "size": 0.4921875,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentSSH(p *powerline) []pwl.Segment {\n\tsshClient, _ := os.LookupEnv(\"SSH_CLIENT\")\n\tif sshClient == \"\" {\n\t\treturn []pwl.Segment{}\n\t}\n\tvar networkIcon string\n\tif p.cfg.SshAlternateIcon {\n\t\tnetworkIcon = p.symbols.NetworkAlternate\n\t} else {\n\t\tnetworkIcon = p.symbols.Network\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"ssh\",\n\t\tContent:    networkIcon,\n\t\tForeground: p.theme.SSHFg,\n\t\tBackground: p.theme.SSHBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-subversion.go",
          "type": "blob",
          "size": 3.943359375,
          "content": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"os/exec\"\n\t\"strings\"\n)\n\nvar otherModified int\n\nfunc addSvnRepoStatsSegment(p *powerline, nChanges int, symbol string, foreground uint8, background uint8) (segments []pwl.Segment) {\n\tif nChanges > 0 {\n\t\tsegments = append(segments, pwl.Segment{\n\t\t\tName:       \"svn-status\",\n\t\t\tContent:    fmt.Sprintf(\"%d%s\", nChanges, symbol),\n\t\t\tForeground: foreground,\n\t\t\tBackground: background,\n\t\t})\n\t}\n\treturn segments\n}\n\nfunc (r repoStats) SvnSegments(p *powerline) (segments []pwl.Segment) {\n\tsegments = append(segments, addSvnRepoStatsSegment(p, r.ahead, p.symbols.RepoAhead, p.theme.GitAheadFg, p.theme.GitAheadBg)...)\n\tsegments = append(segments, addSvnRepoStatsSegment(p, r.behind, p.symbols.RepoBehind, p.theme.GitBehindFg, p.theme.GitBehindBg)...)\n\tsegments = append(segments, addSvnRepoStatsSegment(p, r.staged, p.symbols.RepoStaged, p.theme.GitStagedFg, p.theme.GitStagedBg)...)\n\tsegments = append(segments, addSvnRepoStatsSegment(p, r.notStaged, p.symbols.RepoNotStaged, p.theme.GitNotStagedFg, p.theme.GitNotStagedBg)...)\n\tsegments = append(segments, addSvnRepoStatsSegment(p, r.untracked, p.symbols.RepoUntracked, p.theme.GitUntrackedFg, p.theme.GitUntrackedBg)...)\n\tsegments = append(segments, addSvnRepoStatsSegment(p, r.conflicted, p.symbols.RepoConflicted, p.theme.GitConflictedFg, p.theme.GitConflictedBg)...)\n\tsegments = append(segments, addSvnRepoStatsSegment(p, r.stashed, p.symbols.RepoStashed, p.theme.GitStashedFg, p.theme.GitStashedBg)...)\n\treturn segments\n}\n\nfunc runSvnCommand(cmd string, args ...string) (string, error) {\n\tcommand := exec.Command(cmd, args...)\n\tout, err := command.Output()\n\treturn string(out), err\n}\n\nfunc parseSvnURL() (map[string]string, error) {\n\tinfo, err := runSvnCommand(\"svn\", \"info\")\n\tif err != nil {\n\t\treturn nil, errors.New(\"not a working copy\")\n\t}\n\n\tsvnInfo := make(map[string]string, 0)\n\tinfos := strings.Split(info, \"\\n\")\n\tif len(infos) > 1 {\n\t\tfor _, line := range infos[:] {\n\t\t\titems := strings.Split(line, \": \")\n\t\t\tif len(items) >= 2 {\n\t\t\t\tsvnInfo[items[0]] = items[1]\n\t\t\t}\n\t\t}\n\t}\n\n\treturn svnInfo, nil\n}\n\nfunc ensureUnmodified(code string, stats repoStats) {\n\tif code != \" \" {\n\t\totherModified++\n\t}\n}\n\nfunc parseSvnStatus() repoStats {\n\tstats := repoStats{}\n\tinfo, err := runSvnCommand(\"svn\", \"status\", \"-u\")\n\tif err != nil {\n\t\treturn stats\n\t}\n\tinfos := strings.Split(info, \"\\n\")\n\tif len(infos) > 1 {\n\t\tfor _, line := range infos[:] {\n\t\t\tif len(line) >= 9 {\n\t\t\t\tcode := line[0:1]\n\t\t\t\tswitch code {\n\t\t\t\tcase \"?\":\n\t\t\t\t\tstats.untracked++\n\t\t\t\tcase \"C\":\n\t\t\t\t\tstats.conflicted++\n\t\t\t\tcase \"A\", \"D\", \"M\":\n\t\t\t\t\tstats.notStaged++\n\t\t\t\tdefault:\n\t\t\t\t\tensureUnmodified(code, stats)\n\t\t\t\t}\n\t\t\t\tcode = line[1:2]\n\t\t\t\tswitch code {\n\t\t\t\tcase \"C\":\n\t\t\t\t\tstats.conflicted++\n\t\t\t\tcase \"M\":\n\t\t\t\t\tstats.notStaged++\n\t\t\t\tdefault:\n\t\t\t\t\tensureUnmodified(code, stats)\n\t\t\t\t}\n\t\t\t\tensureUnmodified(line[2:3], stats)\n\t\t\t\tensureUnmodified(line[3:4], stats)\n\t\t\t\tensureUnmodified(line[4:5], stats)\n\t\t\t\tensureUnmodified(line[5:6], stats)\n\t\t\t\tensureUnmodified(line[6:7], stats)\n\t\t\t\tensureUnmodified(line[7:8], stats)\n\t\t\t\tcode = line[8:9]\n\t\t\t\tswitch code {\n\t\t\t\tcase \"*\":\n\t\t\t\t\tstats.behind++\n\t\t\t\tdefault:\n\t\t\t\t\tensureUnmodified(code, stats)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn stats\n}\n\nfunc segmentSubversion(p *powerline) []pwl.Segment {\n\n\tsvnInfo, err := parseSvnURL()\n\tif err != nil {\n\t\treturn []pwl.Segment{}\n\t}\n\n\tif len(p.ignoreRepos) > 0 {\n\t\tif p.ignoreRepos[svnInfo[\"URL\"]] || p.ignoreRepos[svnInfo[\"Relative URL\"]] {\n\t\t\treturn []pwl.Segment{}\n\t\t}\n\t}\n\n\tsvnStats := parseSvnStatus()\n\n\tvar foreground, background uint8\n\tif svnStats.dirty() || otherModified > 0 {\n\t\tforeground = p.theme.RepoDirtyFg\n\t\tbackground = p.theme.RepoDirtyBg\n\t} else {\n\t\tforeground = p.theme.RepoCleanFg\n\t\tbackground = p.theme.RepoCleanBg\n\t}\n\n\tsegments := []pwl.Segment{{\n\t\tName:       \"svn-branch\",\n\t\tContent:    svnInfo[\"Relative URL\"],\n\t\tForeground: foreground,\n\t\tBackground: background,\n\t}}\n\n\tsegments = append(segments, svnStats.SvnSegments(p)...)\n\treturn segments\n}\n"
        },
        {
          "name": "segment-termtitle.go",
          "type": "blob",
          "size": 0.873046875,
          "content": "package main\n\n// Port of set_term_title segment from powerine-shell:\n// https://github.com/b-ryan/powerline-shell/blob/master/powerline_shell/segments/set_term_title.py\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentTermTitle(p *powerline) []pwl.Segment {\n\tvar title string\n\n\tterm := os.Getenv(\"TERM\")\n\tif !(strings.Contains(term, \"xterm\") || strings.Contains(term, \"rxvt\")) {\n\t\treturn []pwl.Segment{}\n\t}\n\n\tif p.cfg.Shell == \"bash\" {\n\t\ttitle = \"\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\]\"\n\t} else if p.cfg.Shell == \"zsh\" {\n\t\ttitle = \"%{\\033]0;%n@%m: %~\\007%}\"\n\t} else {\n\t\tcwd := p.cwd\n\t\ttitle = fmt.Sprintf(\"\\033]0;%s@%s: %s\\007\", p.username, p.hostname, cwd)\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:           \"termtitle\",\n\t\tContent:        title,\n\t\tPriority:       MaxInteger, // do not truncate\n\t\tHideSeparators: true,       // do not draw separators\n\t}}\n}\n"
        },
        {
          "name": "segment-terraform_workspace.go",
          "type": "blob",
          "size": 0.5576171875,
          "content": "package main\n\nimport (\n\t\"io/ioutil\"\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nconst wsFile = \"./.terraform/environment\"\n\nfunc segmentTerraformWorkspace(p *powerline) []pwl.Segment {\n\tstat, err := os.Stat(wsFile)\n\tif err != nil {\n\t\treturn []pwl.Segment{}\n\t}\n\tif stat.IsDir() {\n\t\treturn []pwl.Segment{}\n\t}\n\tworkspace, err := ioutil.ReadFile(wsFile)\n\tif err != nil {\n\t\treturn []pwl.Segment{}\n\t}\n\treturn []pwl.Segment{{\n\t\tName:       \"terraform-workspace\",\n\t\tContent:    string(workspace),\n\t\tForeground: p.theme.TFWsFg,\n\t\tBackground: p.theme.TFWsBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-time.go",
          "type": "blob",
          "size": 0.3115234375,
          "content": "package main\n\nimport (\n\t\"strings\"\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n\t\"time\"\n)\n\nfunc segmentTime(p *powerline) []pwl.Segment {\n\treturn []pwl.Segment{{\n\t\tName:       \"time\",\n\t\tContent:    time.Now().Format(strings.TrimSpace(p.cfg.Time)),\n\t\tForeground: p.theme.TimeFg,\n\t\tBackground: p.theme.TimeBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-username.go",
          "type": "blob",
          "size": 0.5302734375,
          "content": "package main\n\nimport (\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentUser(p *powerline) []pwl.Segment {\n\tvar userPrompt string\n\tswitch p.cfg.Shell {\n\tcase \"bash\":\n\t\tuserPrompt = \"\\\\u\"\n\tcase \"zsh\":\n\t\tuserPrompt = \"%n\"\n\tdefault:\n\t\tuserPrompt = p.username\n\t}\n\n\tvar background uint8\n\tif p.userIsAdmin {\n\t\tbackground = p.theme.UsernameRootBg\n\t} else {\n\t\tbackground = p.theme.UsernameBg\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"user\",\n\t\tContent:    userPrompt,\n\t\tForeground: p.theme.UsernameFg,\n\t\tBackground: background,\n\t}}\n}\n"
        },
        {
          "name": "segment-vgo.go",
          "type": "blob",
          "size": 0.349609375,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentVirtualGo(p *powerline) []pwl.Segment {\n\tenv, _ := os.LookupEnv(\"VIRTUALGO\")\n\tif env == \"\" {\n\t\treturn []pwl.Segment{}\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"vgo\",\n\t\tContent:    env,\n\t\tForeground: p.theme.VirtualGoFg,\n\t\tBackground: p.theme.VirtualGoBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-vimode.go",
          "type": "blob",
          "size": 0.59765625,
          "content": "package main\n\nimport (\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentViMode(p *powerline) []pwl.Segment {\n\tmode := p.cfg.ViMode\n\tif mode == \"\" {\n\t\twarn(\"'--vi-mode' is not set.\")\n\t\treturn []pwl.Segment{}\n\t}\n\n\tswitch mode {\n\tcase \"vicmd\":\n\t\treturn []pwl.Segment{{\n\t\t\tName:       \"vi-mode\",\n\t\t\tContent:    \"C\",\n\t\t\tForeground: p.theme.ViModeCommandFg,\n\t\t\tBackground: p.theme.ViModeCommandBg,\n\t\t}}\n\tdefault: // usually \"viins\" or \"main\"\n\t\treturn []pwl.Segment{{\n\t\t\tName:       \"vi-mode\",\n\t\t\tContent:    \"I\",\n\t\t\tForeground: p.theme.ViModeInsertFg,\n\t\t\tBackground: p.theme.ViModeInsertBg,\n\t\t}}\n\t}\n}\n"
        },
        {
          "name": "segment-virtualenv.go",
          "type": "blob",
          "size": 1.42578125,
          "content": "package main\n\nimport (\n\t\"os\"\n\t\"path\"\n\t\"strings\"\n\n\t\"gopkg.in/ini.v1\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentVirtualEnv(p *powerline) []pwl.Segment {\n\tenv := os.Getenv(\"VIRTUAL_ENV_PROMPT\")\n\tif strings.HasPrefix(env, \"(\") && strings.HasSuffix(env, \") \") {\n\t\tenv = strings.TrimPrefix(env, \"(\")\n\t\tenv = strings.TrimSuffix(env, \") \")\n\t}\n\tif env == \"\" {\n\t\tvenv, _ := os.LookupEnv(\"VIRTUAL_ENV\")\n\t\tif venv != \"\" {\n\t\t\tcfg, err := ini.Load(path.Join(venv, \"pyvenv.cfg\"))\n\t\t\tif err == nil {\n\t\t\t\t// python >= 3.6 the venv module will not insert a prompt\n\t\t\t\t// key unless the `--prompt` flag is passed to the module\n\t\t\t\t// or if calling with the prompt arg EnvBuilder\n\t\t\t\t// otherwise env evaluates to an empty string, per return\n\t\t\t\t// of ini.File.Section.Key\n\t\t\t\tif pyEnv := cfg.Section(\"\").Key(\"prompt\").String(); pyEnv != \"\" {\n\t\t\t\t\tenv = pyEnv\n\t\t\t\t}\n\t\t\t}\n\t\t\tif env == \"\" {\n\t\t\t\tenv = venv\n\t\t\t}\n\t\t}\n\t}\n\tif env == \"\" {\n\t\tenv, _ = os.LookupEnv(\"CONDA_ENV_PATH\")\n\t}\n\tif env == \"\" {\n\t\tenv, _ = os.LookupEnv(\"CONDA_DEFAULT_ENV\")\n\t}\n\tif env == \"\" {\n\t\tenv, _ = os.LookupEnv(\"PYENV_VERSION\")\n\t}\n\tif env == \"\" {\n\t\treturn []pwl.Segment{}\n\t}\n\tenvName := path.Base(env)\n\tif p.cfg.VenvNameSizeLimit > 0 && len(envName) > p.cfg.VenvNameSizeLimit {\n\t\tenvName = p.symbols.VenvIndicator\n\t}\n\n\treturn []pwl.Segment{{\n\t\tName:       \"venv\",\n\t\tContent:    escapeVariables(p, envName),\n\t\tForeground: p.theme.VirtualEnvFg,\n\t\tBackground: p.theme.VirtualEnvBg,\n\t}}\n}\n"
        },
        {
          "name": "segment-wsl.go",
          "type": "blob",
          "size": 0.576171875,
          "content": "package main\n\nimport (\n\t\"net/url\"\n\t\"os\"\n\n\tpwl \"github.com/justjanne/powerline-go/powerline\"\n)\n\nfunc segmentWSL(p *powerline) []pwl.Segment {\n\tvar WSL string\n\tWSLMachineName, _ := os.LookupEnv(\"WSL_DISTRO_NAME\")\n\tWSLHost, _ := os.LookupEnv(\"NAME\")\n\n\tif WSLMachineName != \"\" {\n\t\tWSL = WSLMachineName\n\t} else if WSLHost != \" \" {\n\t\tu, err := url.Parse(WSLHost)\n\t\tif err == nil {\n\t\t\tWSL = u.Host\n\t\t}\n\t}\n\n\tif WSL != \"\" {\n\t\treturn []pwl.Segment{{\n\t\t\tName:       \"WSL\",\n\t\t\tContent:    WSL,\n\t\t\tForeground: p.theme.WSLMachineFg,\n\t\t\tBackground: p.theme.WSLMachineBg,\n\t\t}}\n\t}\n\treturn []pwl.Segment{}\n}\n"
        },
        {
          "name": "themes.go",
          "type": "blob",
          "size": 2.724609375,
          "content": "package main\n\n// Symbols of the theme\ntype SymbolTemplate struct {\n\tLock                 string\n\tNetwork              string\n\tNetworkAlternate     string\n\tSeparator            string\n\tSeparatorThin        string\n\tSeparatorReverse     string\n\tSeparatorReverseThin string\n\n\tRepoDetached   string\n\tRepoBranch     string\n\tRepoAhead      string\n\tRepoBehind     string\n\tRepoStaged     string\n\tRepoNotStaged  string\n\tRepoUntracked  string\n\tRepoConflicted string\n\tRepoStashed    string\n\n\tVenvIndicator string\n\tNodeIndicator string\n\tRvmIndicator  string\n}\n\n// Theme definitions\ntype Theme struct {\n\tBoldForeground bool\n\n\tReset uint8\n\n\tDefaultFg uint8\n\tDefaultBg uint8\n\n\tUsernameFg     uint8\n\tUsernameBg     uint8\n\tUsernameRootBg uint8\n\n\tHostnameFg uint8\n\tHostnameBg uint8\n\n\t// The foreground-background mapping is precomputed and stored in a map for improved performance\n\t// The old script used to brute-force this at runtime\n\tHostnameColorizedFgMap map[uint8]uint8\n\n\tHomeSpecialDisplay bool\n\tHomeFg             uint8\n\tHomeBg             uint8\n\tAliasFg            uint8\n\tAliasBg            uint8\n\tPathFg             uint8\n\tPathBg             uint8\n\tCwdFg              uint8\n\tSeparatorFg        uint8\n\n\tReadonlyFg uint8\n\tReadonlyBg uint8\n\n\tSSHFg uint8\n\tSSHBg uint8\n\n\tDockerMachineFg uint8\n\tDockerMachineBg uint8\n\n\tKubeClusterFg   uint8\n\tKubeClusterBg   uint8\n\tKubeNamespaceFg uint8\n\tKubeNamespaceBg uint8\n\n\tWSLMachineFg uint8\n\tWSLMachineBg uint8\n\n\tDotEnvFg uint8\n\tDotEnvBg uint8\n\n\tAWSFg uint8\n\tAWSBg uint8\n\n\tRepoCleanFg uint8\n\tRepoCleanBg uint8\n\tRepoDirtyFg uint8\n\tRepoDirtyBg uint8\n\n\tJobsFg uint8\n\tJobsBg uint8\n\n\tCmdPassedFg uint8\n\tCmdPassedBg uint8\n\tCmdFailedFg uint8\n\tCmdFailedBg uint8\n\n\tSvnChangesFg uint8\n\tSvnChangesBg uint8\n\n\tGCPFg uint8\n\tGCPBg uint8\n\n\tGitAheadFg      uint8\n\tGitAheadBg      uint8\n\tGitBehindFg     uint8\n\tGitBehindBg     uint8\n\tGitStagedFg     uint8\n\tGitStagedBg     uint8\n\tGitNotStagedFg  uint8\n\tGitNotStagedBg  uint8\n\tGitUntrackedFg  uint8\n\tGitUntrackedBg  uint8\n\tGitConflictedFg uint8\n\tGitConflictedBg uint8\n\tGitStashedFg    uint8\n\tGitStashedBg    uint8\n\n\tGoenvFg uint8\n\tGoenvBg uint8\n\n\tVirtualEnvFg uint8\n\tVirtualEnvBg uint8\n\n\tVirtualGoFg uint8\n\tVirtualGoBg uint8\n\n\tPerlbrewFg uint8\n\tPerlbrewBg uint8\n\n\tPlEnvFg uint8\n\tPlEnvBg uint8\n\n\tTFWsFg uint8\n\tTFWsBg uint8\n\n\tTimeFg uint8\n\tTimeBg uint8\n\n\tShellVarFg uint8\n\tShellVarBg uint8\n\n\tShEnvFg uint8\n\tShEnvBg uint8\n\n\tNodeFg        uint8\n\tNodeBg        uint8\n\tNodeVersionFg uint8\n\tNodeVersionBg uint8\n\n\tRvmFg        uint8\n\tRvmBg        uint8\n\n\tLoadFg           uint8\n\tLoadBg           uint8\n\tLoadHighBg       uint8\n\tLoadAvgValue     byte\n\tLoadThresholdBad float64\n\n\tNixShellFg uint8\n\tNixShellBg uint8\n\n\tDurationFg uint8\n\tDurationBg uint8\n\n\tViModeCommandFg uint8\n\tViModeCommandBg uint8\n\tViModeInsertFg uint8\n\tViModeInsertBg uint8\n}\n"
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        },
        {
          "name": "user-is-admin.go",
          "type": "blob",
          "size": 0.1025390625,
          "content": "// +build !windows\n\npackage main\n\nimport (\n\t\"os\"\n)\n\nfunc userIsAdmin() bool {\n\treturn os.Getuid() == 0\n}\n"
        },
        {
          "name": "user-is-admin_windows.go",
          "type": "blob",
          "size": 0.4697265625,
          "content": "// +build windows\n\npackage main\n\nimport (\n\t\"golang.org/x/sys/windows\"\n)\n\nfunc userIsAdmin() bool {\n\tvar sid *windows.SID\n\n\terr := windows.AllocateAndInitializeSid(\n\t\t&windows.SECURITY_NT_AUTHORITY,\n\t\t2,\n\t\twindows.SECURITY_BUILTIN_DOMAIN_RID,\n\t\twindows.DOMAIN_ALIAS_RID_ADMINS,\n\t\t0, 0, 0, 0, 0, 0,\n\t\t&sid,\n\t)\n\tif err != nil {\n\t\treturn false\n\t}\n\tdefer windows.FreeSid(sid)\n\n\tt := windows.Token(0)\n\n\tmember, err := t.IsMember(sid)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\treturn member\n}\n"
        }
      ]
    }
  ]
}