{
  "metadata": {
    "timestamp": 1736566987323,
    "page": 568,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dosco/graphjin",
      "stars": 2943,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1259765625,
          "content": "demo\ntmp\n_.yaml\n_.yml\n_.svg\n_.json\n_.md\n._\nweb/build\ndocker-compose.\\*\ndocs\nwebsite\nexamples\nbenchmark\nnode_modules\nwasm\nrelease\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.525390625,
          "content": "### Go ###\n# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, built with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Profiling output\n*.asm\n*.pdf\n\n### Go Patch ###\n/vendor\n/Godeps\n/tmp\n/tmp/runner-build\n/demo/tmp\n\n.idea\n*.iml\n.vscode\n.DS_Store\n.swp\n.release\nmain\ngraphjin\n*-fuzz.zip\ncrashers\nsuppressions\nrelease\n.gofuzz\n*-fuzz.zip\n*.test\n.firebase\n/dist\n.idea\nnode_modules\nbin\n./package-lock.json\nslim.report.json\nexamples/nodejs/config/**/*.gql\n\n\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 2.552734375,
          "content": "# Make sure to check the documentation at http://goreleaser.com\n\n# Snapcraft credentials\n# snapcraft export-login --snaps=graphjin --channels=stable --acls=package_access,package_push,package_update,package_release credential\n\n# GPG Key\n# gpg --armor --export-secret-key <email> | pbcopy\nversion: 2\n\nbefore:\n  hooks:\n    - go mod download\n    - make gen\nbuilds:\n  - main: ./cmd\n    ldflags:\n      - -s -w\n      - -X main.version={{ .Version }}\n      - -X main.commit={{ .Commit }}\n      - -X main.date={{ .Date }}\n      - -X github.com/dosco/graphjin/serv/v3.version={{ .Version }}\n    env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - windows\n      - darwin\n    goarch:\n      - 386\n      - amd64\n      - arm\n      - arm64\n\nsigns:\n  - artifacts: checksum\n    args:\n      [\n        \"--batch\",\n        \"-u\",\n        \"{{ .Env.GPG_FINGERPRINT }}\",\n        \"--output\",\n        \"${signature}\",\n        \"--detach-sign\",\n        \"${artifact}\",\n      ]\n\narchives:\n\nchecksum:\n  name_template: \"checksums.txt\"\n\nsnapshot:\n  name_template: \"{{ .Tag }}-snapshot\"\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - \"^docs:\"\n      - \"^test:\"\n      - Merge pull request\n      - Merge branch\n      - go mod tidy\n\nnfpms:\n  - homepage: https://graphjin.com\n    description: \"Build APIs in 5 minutes. An automagical GraphQL to SQL compiler.\"\n    license: Apache-2.0\n    maintainer: Vikram Rangnekar (https://twitter.com/dosco)\n    formats:\n      - deb\n      - rpm\n\nbrews:\n  - repository:\n      owner: dosco\n      name: homebrew-graphjin\n    directory: Formula\n    homepage: https://graphjin.com\n    description: \"Build APIs in 5 minutes. An automagical GraphQL to SQL compiler.\"\n    license: Apache-2.0\n    skip_upload: auto\n\nscoops:\n  - repository:\n      owner: dosco\n      name: graphjin-scoop\n    commit_msg_template: \"Scoop update for {{ .ProjectName }} version {{ .Tag }}\"\n    homepage: https://graphjin.com\n    description: \"Build APIs in 5 minutes. An automagical GraphQL to SQL compiler.\"\n    license: Apache-2.0\n# snapcrafts:\n#   - name_template: \"{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}\"\n#     summary: \"Build APIs in 5 minutes. An automagical GraphQL to SQL compiler\"\n#     description: |\n#       GraphJin gives you a high performance GraphQL API without you having to write any code. GraphQL is automagically compiled into an efficient SQL query. Use it either as a library or a standalone service.\n#     apps:\n#       graphjin:\n#         plugs: [\"home\", \"network\", \"network-bind\"]\n#     grade: stable\n#     confinement: strict\n#     publish: true\n#     license: Apache-2.0\n#     base: core18\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": ".idea\nnode_modules\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1591796875,
          "content": "# Code of Conduct\n\nBe excellent to each other. Treat others the way you'd like to be treated. We are all here to learn, build great software and make new friends.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.2236328125,
          "content": "# Contributing to GraphJin\n\nGraphJin is a very approchable code-base and a project that is easy for almost\nanyone with basic GO knowledge to start contributing to. It is also a young project\nso a lot of high value work is there for the taking.\n\nEven the GraphQL to SQL compiler that is at the heart of GraphJin is essentially a text book compiler with clean and easy to read code. The data structures used by the lexer, parser and sql generator are easy to understand and modify.\n\nFinally we do have a lot of test for critical parts of the codebase which makes it easy for you to modify with confidence. I'm always available for questions or any sort of guidance so feel fee to reach out over twitter or discord.\n\n- [Getting Started](#getting-started)\n- [Setting Up the Development Environment](#setup-development-environment)\n  - [Prerequisites](#prerequisites)\n  - [Get the GraphJin source](#get-source-code)\n  - [Start the development envoirnment ](#start-the-development-envoirnment)\n  - [Testing](#testing-and-linting)\n- [Contributing](#contributing)\n  - [Guidelines](#guidelines)\n  - [Code style](#code-style)\n\n## Getting Started\n\n- Read the [Getting Started Guide](https://graphjin.com/guide.html#get-started)\n\n## Setup Development Environment\n\n### Prerequisites\n\n- Install [Git](https://git-scm.com/) (may be already installed on your system, or available through your OS package manager)\n- Install [Go 1.13 or above](https://golang.org/doc/install)\n- Install [Docker](https://docs.docker.com/v17.09/engine/installation/)\n\n### Get source code\n\nThe entire build flow uses `Makefile` there is a whole list of sub-commands you\ncan use to build, test, install, lint, etc.\n\n```bash\ngit clone https://github.com/dosco/graphjin\ncd ./graphjin\nmake help\n```\n\n### Start the development envoirnment\n\nEnsure you have a Postgres database running and the config file has the correct connection details to it.\n\n```bash\ngo run main.go db setup\ngo run main.go serve\n```\n\n### Learn how the code works\n\n[GraphJin codebase explained](https://graphjin.com/internals.html)\n\n### Testing and Linting\n\n```\nmake lint\nmake test\n```\n\n## Contributing\n\n### Guidelines\n\n- **Pull requests are welcome**, as long as you're willing to put in the effort to meet the guidelines.\n- Aim for clear, well written, maintainable code.\n- Simple and minimal approach to features, like Go.\n- Refactoring existing code now for better performance, better readability or better testability wins over adding a new feature.\n- Don't add a function to a module that you don't use right now, or doesn't clearly enable a planned functionality.\n- Don't ship a half done feature, which would require significant alterations to work fully.\n- Avoid [Technical debt](https://en.wikipedia.org/wiki/Technical_debt) like cancer.\n- Leave the code cleaner than when you began.\n\n### Code style\n\n- We're following [Go Code Review](https://github.com/golang/go/wiki/CodeReviewComments).\n- Use `go fmt` to format your code before committing.\n- If you see _any code_ which clearly violates the style guide, please fix it and send a pull request. No need to ask for permission.\n- Avoid unnecessary vertical spaces. Use your judgment or follow the code review comments.\n- Wrap your code and comments to 100 characters, unless doing so makes the code less legible.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.6484375,
          "content": "# stage: 1\nFROM node:lts-slim as react-build\nWORKDIR /web\nCOPY /serv/web/ ./\nRUN yarn\nRUN yarn build\n\n# stage: 2\nFROM golang:1.23 as go-build\nRUN go install github.com/rafaelsq/wtc@latest\n\nWORKDIR /app\nCOPY . /app\n\nRUN mkdir -p /app/serv/web/build\nCOPY --from=react-build /web/build/ ./serv/web/build\n\nRUN go mod download\nRUN make build\n\n# stage: 3\nFROM alpine:latest\nWORKDIR /\n\nRUN apk add --no-cache tzdata\nRUN apk add --no-cache libc6-compat\nRUN mkdir -p /config\n\nCOPY --from=go-build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=go-build /app/graphjin .\n\nRUN chmod +x /graphjin\n\n#USER nobody\n\nENV GO_ENV production\n\nENTRYPOINT [\"./graphjin\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.93359375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.4521484375,
          "content": "BUILD         ?= $(shell git rev-parse --short HEAD)\nBUILD_DATE    ?= $(shell git log -1 --format=%ci)\nBUILD_BRANCH  ?= $(shell git rev-parse --abbrev-ref HEAD)\nBUILD_VERSION ?= $(shell git describe --always --tags)\n\nGOPATH  ?= $(shell go env GOPATH)\nGOROOT ?= $(shell go env GOROOT)\n\nPACKAGES ?= ./core ./plugin/otel ./serv ./auth ./cmd ./conf\n\nifndef GOPATH\noverride GOPATH = $(HOME)/go\nendif\n\n# Build-time Go variables\nBUILD_FLAGS ?= -ldflags '-s -w -X \"main.version=${BUILD_VERSION}\" -X \"main.commit=${BUILD}\" -X \"main.date=${BUILD_DATE}\" -X \"github.com/dosco/graphjin/serv/v3.version=${BUILD_VERSION}\"'\n\n.PHONY: all download-tools build wasm-build gen clean tidy test test-norace run run-github-actions lint changlog release version help $(PLATFORMS)\n\ntidy:\n\t@find . -name \"go.mod\" -execdir go mod tidy \\;\n\ntest:\n\t@go test -v -race $(PACKAGES) \n\t@cd tests; go test -v -timeout 30m -race .\n\t@cd tests; go test -v -timeout 30m -race -db=mysql -tags=mysql .\n\nBIN_DIR := $(GOPATH)/bin\nWEB_BUILD_DIR := ./serv/web/build/manifest.json\n\n# @echo Installing tools from tools.go\n# @cat tools.go | grep _ | awk -F'\"' '{print $$2}' | xargs -tI % go install %\ndownload-tools:\n\t@go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n\t@go install golang.org/x/perf/cmd/benchstat@latest\n\t@go install golang.org/x/tools/cmd/stringer@latest\n\n$(WEB_BUILD_DIR):\n\t@echo \"First install Yarn and create a build of the web UI then re-run make install\"\n\t@echo \"Run this command: yarn --cwd serv/web/ build\"\n\t@exit 1\n\nlint: download-tools\n\t@golangci-lint run ./tests $(PACKAGES) \n\nBINARY := graphjin\nWASM := ./wasm/graphjin.wasm\nLDFLAGS := -s -w\nPLATFORMS := linux/amd64 windows/amd64 darwin/amd64\n\ntemp = $(subst /, ,$@)\nos = $(word 1, $(temp))\narch = $(word 2, $(temp))\n\n$(PLATFORMS): lint test \n\t@mkdir -p release\n\t@CGO_ENABLED=0 GOOS=$(os) GOARCH=$(arch) go build $(BUILD_FLAGS) -o release/$(BINARY)-$(BUILD_VERSION)-$(os) main.go\n\nrelease: linux/amd64 windows/amd64 darwin/amd64\n\nall: lint test $(BINARY)\n\nbuild: $(BINARY) $(WASM)\n\nwasm-build: $(WASM)\n\ngen: download-tools\n\t@go generate ./...\n\n$(BINARY):\n\t@CGO_ENABLED=0 GOTOOLCHAIN=auto go build $(BUILD_FLAGS) -o $(BINARY) cmd/*.go\n$(WASM):\n\t@cp $(GOROOT)/misc/wasm/wasm_exec.js ./wasm/js/\n\t@GOOS=js GOARCH=wasm GOTOOLCHAIN=auto go build -o ./wasm/graphjin.wasm ./wasm/*.go\n\nclean:\n\t@rm -f $(BINARY)\n\t@rm -f $(WASM)\n\nrun: clean\n\t@GOTOOLCHAIN=auto go run $(BUILD_FLAGS) cmd/*.go $(ARGS)\n\nrun-github-actions:\n\t@act push --job linter\n\ninstall: clean build\n\t@echo \"Commit Hash: `git rev-parse HEAD`\"\n\t@echo \"Old Hash: `shasum $(GOPATH)/bin/$(BINARY) 2>/dev/null | cut -c -32`\"\n\t@mv $(BINARY) $(GOPATH)/bin/$(BINARY)\n\t@echo \"New Hash:\" `shasum $(GOPATH)/bin/$(BINARY) 2>/dev/null | cut -c -32`\n\nuninstall: clean\n\t@go clean -i -x\n\nversion:\n\t@echo GraphJin ${BUILD_VERSION}\n\t@echo Build: ${BUILD}\n\t@echo Build date: ${BUILD_DATE}\n\t@echo Branch: ${BUILD_BRANCH}\n\t@echo Go version: $(shell go version)\n\nhelp:\n\t@echo\n\t@echo Build commands:\n\t@echo \" make build         \t\t- Build graphjin binary\"\n\t@echo \" make install       \t\t- Install graphjin binary\"\n\t@echo \" make uninstall     \t\t- Uninstall graphjin binary\"\n\t@echo \" make [platform]    \t\t- Build for platform [linux|darwin|windows]\"\n\t@echo \" make release       \t\t- Build all platforms\"\n\t@echo \" make run           \t\t- Run graphjin (eg. make run ARGS=\\\"help\\\")\"\n\t@echo \" make test          \t\t- Run all tests\"\n\t@echo \" make run-github-actions\t- Run Github Actions locally (brew install act)\"\n\t@echo \" make help          \t\t- This help\"\n\t@echo\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.54296875,
          "content": "Copyright 2022 Vikram Rangnekar\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.2392578125,
          "content": "# GraphJin, A New Kind of ORM\n\n[![Apache 2.0](https://img.shields.io/github/license/dosco/graphjin.svg?style=for-the-badge)](https://github.com/dosco/graphjin/blob/master/LICENSE)\n[![NPM Package](https://img.shields.io/npm/v/graphjin?style=for-the-badge)](https://www.npmjs.com/package/graphjin)\n[![Docker Pulls](https://img.shields.io/docker/pulls/dosco/graphjin?style=for-the-badge)](https://hub.docker.com/r/dosco/graphjin/builds)\n[![Discord Chat](https://img.shields.io/discord/628796009539043348.svg?style=for-the-badge&logo=discord)](https://discord.gg/6pSWCTZ)\n[![GoDoc](https://img.shields.io/badge/godoc-reference-5272B4.svg?style=for-the-badge&logo=go)](https://pkg.go.dev/github.com/dosco/graphjin/core/v3)\n[![GoReport](https://goreportcard.com/badge/github.com/gojp/goreportcard?style=for-the-badge)](https://goreportcard.com/report/github.com/dosco/graphjin/core/v3)\n\n## Build APIs in 5 minutes not weeks\n\nJust use a simple GraphQL query to define your API and GraphJin automagically converts it into SQL and fetches the data you need. Build your backend APIs **100X** faster. Works with **NodeJS** and **GO**. Supports several databases, **Postgres**, **MySQL**, **Yugabyte**, **AWS Aurora/RDS** and **Google Cloud SQL**\n\nThe following GraphQL query fetches a list of products, their owners, and other category information, including a cursor for retrieving more products.\nGraphJin will do auto-discovery of your database schema and relationships and generate the most efficient single SQL query to fetch all this data including a cursor to fetch the next 20 item. You don't have to do a single thing besides write the GraphQL query.\n\n```graphql\nquery getProducts {\n  products(\n    # returns only 20 items\n    limit: 20\n\n    # orders the response items by highest price\n    order_by: { price: desc }\n\n    # only items with a price >= 20 and < 50 are returned\n    where: { price: { and: { greater_or_equals: 20, lt: 50 } } }\n  ) {\n    id\n    name\n    price\n\n    # also fetch the owner of the product\n    owner {\n      full_name\n      picture: avatar\n      email\n\n      # and the categories the owner has products under\n      category_counts(limit: 3) {\n        count\n        category {\n          name\n        }\n      }\n    }\n\n    # and the categories of the product itself\n    category(limit: 3) {\n      id\n      name\n    }\n  }\n  # also return a cursor that we can use to fetch the next\n  # batch of products\n  products_cursor\n}\n```\n\n**Note**: The corresponding SQL for creating the table (POSTGRES)\n  \n  ```sql\n  CREATE TABLE products (\n    id SERIAL NOT NULL,\n    name TEXT NOT NULL,\n    price INTEGER NOT NULL,\n    owner_id INTEGER NOT NULL,\n    category_id INTEGER NOT NULL,\n    PRIMARY KEY(id)\n  );\n  ```\n\n## Secure out of the box\n\nIn production all queries are always read from locally saved copies not from what the client sends hence clients cannot modify the query. This makes\nGraphJin very secure as its similar to building APIs by hand. The idea that GraphQL means that clients can change the query as they wish **does not** apply to GraphJin\n\n## Great Documentation\n\nDetailed docs on GraphQL syntax, usecases, JS and GO code examples and it's actively updated.\n\n## [![Docs](https://img.shields.io/badge/Docs-graphjin.com-red?style=for-the-badge)](https://graphjin.com)\n\n## [![Example Code](https://img.shields.io/badge/godoc-reference-5272B4.svg?style=for-the-badge&logo=go&label=Example+Code)](https://pkg.go.dev/github.com/dosco/graphjin/tests/v3)\n\n## Use with NodeJS\n\nGraphJin allows you to use GraphQL and the full power of GraphJin to access to create instant APIs without writing and maintaining lines and lines of database code. GraphJin NodeJS currently only supports Postgres compatible databases working on adding MySQL support as well. Example app in [/examples/nodejs](https://github.com/dosco/graphjin/tree/master/examples/nodejs)\n\n```console\nnpm install graphjin\n```\n\n```javascript\nimport graphjin from \"graphjin\";\nimport express from \"express\";\nimport http from \"http\";\nimport pg from \"pg\";\n\nconst { Client } = pg;\nconst db = new Client({\n  host: \"localhost\",\n  port: 5432,\n  user: \"postgres\",\n  password: \"postgres\",\n  database: \"appdb-development\",\n});\n\nawait db.connect();\n\n// config can either be a file (eg. `dev.yml`) or an object\n// const config = { production: true, default_limit: 50 };\n\nvar gj = await graphjin(\"./config\", \"dev.yml\", db);\nvar app = express();\nvar server = http.createServer(app);\n\n// subscriptions allow you to have a callback function triggerd\n// automatically when data in your database changes\nconst res1 = await gj.subscribe(\n  \"subscription getUpdatedUser { users(id: $userID) { id email } }\",\n  null,\n  { userID: 2 }\n);\n\nres1.data(function (res) {\n  console.log(\">\", res.data());\n});\n\n// queries allow you to use graphql to query and update your database\napp.get(\"/\", async function (req, resp) {\n  const res2 = await gj.query(\n    \"query getUser { users(id: $id) { id email } }\",\n    { id: 1 },\n    { userID: 1 }\n  );\n\n  resp.send(res2.data());\n});\n\nserver.listen(3000);\nconsole.log(\"Express server started on port %s\", server.address().port);\n```\n\n## Use with GO\n\nYou can use GraphJin as a library within your own code. The [serv](https://pkg.go.dev/github.com/dosco/graphjin/serv/v3) package exposes the entirely GraphJin standlone service as a library while the [core](https://pkg.go.dev/github.com/dosco/graphjin/core/v3) package exposes just the GraphJin compiler. The [Go docs](https://pkg.go.dev/github.com/dosco/graphjin/tests/v3#pkg-examples) are filled with examples on how to use GraphJin within your own apps as a sort of alternative to using ORM packages. GraphJin allows you to use GraphQL and the full power of GraphJin to access your data instead of a limiting ORM.\n\n### Use GraphJin Core\n\n```console\ngo get github.com/dosco/graphjin/core/v3\n```\n\n```golang\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/dosco/graphjin/core\"\n\t\"github.com/go-chi/chi/v5\"\n\t_ \"github.com/jackc/pgx/v5/stdlib\"\n)\n\nfunc main() {\n\tdb, err := sql.Open(\"pgx\", \"postgres://postgres:@localhost:5432/exampledb?sslmode=disable\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tgj, err := core.NewGraphJin(nil, db)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tquery := `\n    query getPosts {\n        posts {\n            id\n            title\n        }\n        posts_cursor\n    }`\n\n\trouter := chi.NewRouter()\n\trouter.Get(\"/\", func(w http.ResponseWriter, request *http.Request) {\n\t\tcontext := context.WithValue(request.Context(), core.UserIDKey, 1)\n\t\tres, err := gj.GraphQL(context, query, nil, nil)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t\treturn\n\t\t}\n\t\tw.Write(res.Data)\n\t})\n\n\tlog.Println(\"Go server started on port 3000\")\n  http.ListenAndServe(\":3000\", router)\n\n}\n\n```\n\n### Use GraphJin Service\n\n```golang\nimport (\n  \"github.com/dosco/graphjin/serv/v2\"\n)\n\ngj, err := serv.NewGraphJinService(conf, opt...)\nif err != nil {\n return err\n}\n\nif err := gj.Start(); err != nil {\n return err\n}\n\n// if err := gj.Attach(chiRouter); err != nil {\n//  return err\n// }\n```\n\n## Standalone Service\n\n### Quick install\n\n```\n# Mac (Homebrew)\nbrew install dosco/graphjin/graphjin\n\n# Ubuntu (Snap)\nsudo snap install --classic graphjin\n```\n\nDebian and Redhat ([releases](https://github.com/dosco/graphjin/releases))\nDownload the .deb or .rpm from the releases page and install with dpkg -i and rpm -i respectively.\n\n### Quickly create and deploy new apps\n\n```bash\ngraphjin new <app_name>\n```\n\n### Instantly deploy new versions\n\n```bash\n# Deploy a new config\ngraphjin deploy --host=https://your-server.com --secret=\"your-secret-key\"\n\n# Rollback the last deployment\ngraphjin deploy rollback --host=https://your-server.com --secret=\"your-secret-key\"\n```\n\n### Secrets Management\n\n```bash\n# Secure save secrets like database passwords and JWT secret keys\ngraphjin secrets\n```\n\n### Database Management\n\n```bash\n# Create, Migrate and Seed your database\ngraphjin db\n```\n\n## Built in Web-UI to help craft GraphQL queries\n\n![graphjin-screenshot-final](https://user-images.githubusercontent.com/832235/108806955-1c363180-7571-11eb-8bfa-488ece2e51ae.png)\n\n## Support the Project\n\nGraphJin is an open source project made possible by the support of awesome backers. It has collectively saved teams 1000's of hours dev. time and allowing them to focus on their product and be 100x more productive. If your team uses it please consider becoming a sponsor.\n\n<div float=\"left\">\n<a href=\"https://42papers.com\">\n<img src=\"https://user-images.githubusercontent.com/832235/135753560-39e34be6-5734-440a-98e7-f7e160c2efb5.png\" width=\"75\" target=\"_blank\">\n</a>\n<a href=\"https://www.exo.com.ar/\">\n<img src=\"https://user-images.githubusercontent.com/832235/112428182-259def80-8d11-11eb-88b8-ccef9206b535.png\" width=\"100\" target=\"_blank\">\n</a>\n</div>\n\n## About GraphJin\n\nAfter working on several products through my career I found that we spend way too much time on building API backends. Most APIs also need constant updating, and this costs time and money.\n\nIt's always the same thing, figure out what the UI needs then build an endpoint for it. Most API code involves struggling with an ORM to query a database and mangle the data into a shape that the UI expects to see.\n\nI didn't want to write this code anymore, I wanted the computer to do it. Enter GraphQL, to me it sounded great, but it still required me to write all the same database query code.\n\nHaving worked with compilers before I saw this as a compiler problem. Why not build a compiler that converts GraphQL to highly efficient SQL.\n\nThis compiler is what sits at the heart of GraphJin, with layers of useful functionality around it like authentication, remote joins, rails integration, database migrations, and everything else needed for you to build production-ready apps with it.\n\n## Better APIs Faster!\n\nLets take for example a simple blog app. You'll probably need the following APIs user management, posts, comments, votes. Each of these areas need apis for listing, creating, updating, deleting. Off the top of my head thats like 12 APIs if not more. This is just for managing things for rendering the blog posts, home page, profile page you probably need many more view apis that fetch a whole bunch of things at the same time. This is a lot and we're still talking something simple like a basic blogging app. All these APIs have to be coded up by someone and then the code maintained, updated, made secure, fast, etc. We are talking weeks to months of work if not more. Also remember your mobile and web developers have to wait around till this is all done.\n\nWith GraphJin your web and mobile developers can start building instantly. All they have to do is just build the GraphQL queries they need and GraphJin fetches the data. Nothing to maintain no backend API code, its secure, lighting fast and has tons of useful features like subscriptions, rate limiting, etc built-in. With GraphJin your building APIs in minutes not days.\n\n## Highlevel\n\n- Works with Postgres, MySQL8, YugabyteDB\n- Also works with Amazon Aurora/RDS and Google Cloud SQL\n- Supports REST, GraphQL and Websocket APIs\n\n## More Features\n\n- Complex nested queries and mutations\n- Realtime updates with subscriptions\n- Add custom business logic in Javascript\n- Build infinite scroll, feeds, nested comments, etc\n- Add data validations on insert or update\n- Auto learns database tables and relationships\n- Role and Attribute-based access control\n- Cursor-based efficient pagination\n- Full-text search and aggregations\n- Automatic persisted queries\n- JWT tokens supported (Auth0, JWKS, Firebase, etc)\n- Join database queries with remote REST APIs\n- Also works with existing Ruby-On-Rails apps\n- Rails authentication supported (Redis, Memcache, Cookie)\n- A simple config file\n- High performance Go codebase\n- Tiny docker image and low memory requirements\n- Fuzz tested for security\n- Database migrations tool\n- Database seeding tool\n- OpenCensus Support: Zipkin, Prometheus, X-Ray, Stackdriver\n- API Rate Limiting\n- Highly scalable and fast\n- Instant Hot-deploy and rollbacks\n- Add Custom resolvers\n\n## Documentation\n\n[Quick Start](https://graphjin.com/posts/start)\n\n[Documentation](https://graphjin.com)\n\n[GraphJin GO Examples](https://pkg.go.dev/github.com/dosco/graphjin/core#pkg-examples)\n\n## Reach out\n\nWe're happy to help you leverage GraphJin reach out if you have questions\n\n[twitter/dosco](https://twitter.com/dosco)\n\n[discord/graphjin](https://discord.gg/6pSWCTZ) (Chat)\n\n## License\n\n[Apache Public License 2.0](https://opensource.org/licenses/Apache-2.0)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3603515625,
          "content": "# Security Policy\n\n## Supported Versions\n\nUse this section to tell people about which versions of your project are\ncurrently being supported with security updates.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| latest   | :white_check_mark: |\n\n## Reporting a Vulnerability\n\nTo report vulnerabilities please email or DM (https://twitter.com/dosco)\n"
        },
        {
          "name": "auth",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-push.sh",
          "type": "blob",
          "size": 0.37109375,
          "content": "#!/bin/bash\nset -e\nversion=`git tag --sort=committerdate | tail -1`\ninspect=`docker images -q dosco/graphjin:$version 2> /dev/null`\n\n# if [[ \"$inspect\" == \"\" ]]; then\n#   docker build --rm -t dosco/graphjin:$version -t dosco/graphjin:latest .\n# fi\n\n# docker login  \nenv KO_DOCKER_REPO=dosco/graphjin ko build --bare --tags=$version,latest --platform=linux/amd64,linux/arm64 ./cmd\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.work",
          "type": "blob",
          "size": 0.107421875,
          "content": "go 1.23.1\n\ntoolchain go1.23.1\n\nuse (\n\t./auth\n\t./cmd\n\t./conf\n\t./core\n\t./plugin/otel\n\t./serv\n\t./tests\n\t./wasm\n)\n"
        },
        {
          "name": "go.work.sum",
          "type": "blob",
          "size": 16.0126953125,
          "content": "cloud.google.com/go v0.112.2 h1:ZaGT6LiG7dBzi6zNOvVZwacaXlmf3lRqnC4DQzqyRQw=\ncloud.google.com/go v0.112.2/go.mod h1:iEqjp//KquGIJV/m+Pk3xecgKNhV+ry+vVTsy4TbDms=\ncloud.google.com/go/compute v1.24.0 h1:phWcR2eWzRJaL/kOiJwfFsPs4BaKq1j6vnpZrc1YlVg=\ncloud.google.com/go/compute v1.24.0/go.mod h1:kw1/T+h/+tK2LJK0wiPPx1intgdAM3j/g3hFDlscY40=\ncloud.google.com/go/firestore v1.15.0/go.mod h1:GWOxFXcv8GZUtYpWHw/w6IuYNux/BtmeVTMmjrm4yhk=\ncloud.google.com/go/iam v1.1.5/go.mod h1:rB6P/Ic3mykPbFio+vo7403drjlgvoWfYpJhMXEbzv8=\ncloud.google.com/go/longrunning v0.5.5/go.mod h1:WV2LAxD8/rg5Z1cNW6FJ/ZpX4E4VnDnoTk0yawPBB7s=\ncloud.google.com/go/storage v1.35.1/go.mod h1:M6M/3V/D3KpzMTJyPOR/HU6n2Si5QdaXYEsng2xgOs8=\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore v1.6.0/go.mod h1:bjGvMhVMb+EEm3VRNQawDMUyMMjo+S5ewNjflkep/0Q=\ngithub.com/Azure/azure-sdk-for-go/sdk/internal v1.3.0/go.mod h1:okt5dMMTOFjX/aovMlrjvvXoPMBVSPzk9185BT0+eZM=\ngithub.com/Azure/azure-sdk-for-go/sdk/storage/azblob v1.1.0/go.mod h1:7QJP7dr2wznCMeqIrhMgWGf7XpAQnVrJqDm9nvV3Cu4=\ngithub.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=\ngithub.com/Masterminds/sprig/v3 v3.2.1/go.mod h1:UoaO7Yp8KlPnJIYWTFkMaqPUYKTfGFPhxNuwnnxkKlk=\ngithub.com/armon/go-metrics v0.4.1/go.mod h1:E6amYzXo6aW1tqzoZGT755KkbgrJsSdpwZ+3JqfkOG4=\ngithub.com/armon/go-radix v1.0.0/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=\ngithub.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=\ngithub.com/census-instrumentation/opencensus-proto v0.4.1/go.mod h1:4T9NM4+4Vw91VeyqjLS6ao50K5bOcLKN6Q42XnYaRYw=\ngithub.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/checkpoint-restore/go-criu/v5 v5.3.0/go.mod h1:E/eQpaFtUKGOOSEBZgmKAcn+zUUwWxqcaKZlF54wK8E=\ngithub.com/chzyer/readline v1.5.1/go.mod h1:Eh+b79XXUwfKfcPLepksvw2tcLE/Ct21YObkaSkeBlk=\ngithub.com/cilium/ebpf v0.7.0/go.mod h1:/oI2+1shJiTGAMgl6/RgJr36Eo1jzrRcAWbcXO2usCA=\ngithub.com/cncf/xds/go v0.0.0-20231128003011-0fa0005c9caa/go.mod h1:x/1Gn8zydmfq8dk6e9PdstVsDgu9RuyIIJqAaF//0IM=\ngithub.com/containerd/console v1.0.3/go.mod h1:7LqA/THxQ86k76b8c/EMSiaJ3h1eZkMkXar0TQ1gf3U=\ngithub.com/coreos/go-semver v0.3.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/cyphar/filepath-securejoin v0.2.4/go.mod h1:aPGpWjXOXUn2NCNjFvBE6aRxGGx79pTxQpKOJNYHHl4=\ngithub.com/deepmap/oapi-codegen v1.10.1/go.mod h1:TvVmDQlUkFli9gFij/gtW1o+tFBr4qCHyv2zG+R0YZY=\ngithub.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/dop251/goja_nodejs v0.0.0-20211022123610-8dd9abb0616d/go.mod h1:DngW8aVqWbuLRMHItjPUyqdj+HWPvnQe8V8y1nDpIbM=\ngithub.com/dosco/graphjin/auth/v3 v3.0.37/go.mod h1:vRnXV0qsYXoj89qGHA+0An/V291EaVvvgtpZYBlNj0o=\ngithub.com/dosco/graphjin/conf/v3 v3.0.37/go.mod h1:CAb/HWjTMyD0gkFlHxOIgJG4M0sgnWAQ63PxUw1JC3c=\ngithub.com/dosco/graphjin/core/v3 v3.0.35/go.mod h1:jnqpOc5MuXa1jqaok8Drlh0BAPw12IwOECspmouoABc=\ngithub.com/dosco/graphjin/core/v3 v3.0.37/go.mod h1:jnqpOc5MuXa1jqaok8Drlh0BAPw12IwOECspmouoABc=\ngithub.com/dosco/graphjin/plugin/otel/v3 v3.0.37/go.mod h1:3xBf6RtKUehNJ+pvHJ0i2zeuSKBicD+s3Rf9ZSpnYj8=\ngithub.com/dosco/graphjin/serv/v3 v3.0.37/go.mod h1:1axutJTvgu7s6OATErZCQFOWrv25dU5wDZqTa5H6cFo=\ngithub.com/elastic/elastic-transport-go/v8 v8.2.0/go.mod h1:87Tcz8IVNe6rVSLdBux1o/PEItLtyabHU3naC7IoqKI=\ngithub.com/elastic/go-elasticsearch/v7 v7.17.10/go.mod h1:OJ4wdbtDNk5g503kvlHLyErCgQwwzmDtaFC4XyOxXA4=\ngithub.com/elastic/go-elasticsearch/v8 v8.9.0/go.mod h1:NGmpvohKiRHXI0Sw4fuUGn6hYOmAXlyCphKpzVBiqDE=\ngithub.com/emicklei/go-restful/v3 v3.9.0/go.mod h1:6n3XBCmQQb25CM2LCACGz8ukIrRry+4bhvbpWn3mrbc=\ngithub.com/envoyproxy/go-control-plane v0.12.0/go.mod h1:ZBTaoJ23lqITozF0M6G4/IragXCQKCnYbmlmtHvwRG0=\ngithub.com/envoyproxy/protoc-gen-validate v1.0.4/go.mod h1:qys6tmnRsYrQqIhm2bvKZH4Blx/1gTIZ2UKVY1M+Yew=\ngithub.com/frankban/quicktest v1.11.3/go.mod h1:wRf/ReqHper53s+kmmSZizM8NamnL3IM0I9ntUbOk+k=\ngithub.com/go-jose/go-jose/v3 v3.0.0/go.mod h1:RNkWWRld676jZEYoV3+XK8L2ZnNSvIsxFMht0mSX+u8=\ngithub.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-openapi/jsonpointer v0.19.6/go.mod h1:osyAmYz/mB/C3I+WsTTSgw1ONzaLJoLCyoi6/zppojs=\ngithub.com/go-openapi/jsonreference v0.20.2/go.mod h1:Bl1zwGIM8/wsvqjsOQLJ/SH+En5Ap4rVB5KVcIDZG2k=\ngithub.com/go-openapi/swag v0.22.3/go.mod h1:UzaqsxGiab7freDnrUUra0MwWfN/q7tE4j+VcZ0yl14=\ngithub.com/go-redis/redis v6.15.9+incompatible/go.mod h1:NAIEuMOZ/fxfXJIrKDQDz8wamY7mA7PouImQ2Jvg6kA=\ngithub.com/go-redis/redis/v7 v7.4.1/go.mod h1:JDNMw23GTyLNC4GZu9njt15ctBQVn7xjRfnwdHj/Dcg=\ngithub.com/gocql/gocql v1.5.2/go.mod h1:3gM2c4D3AnkISwBxGnMMsS8Oy4y2lhbPRsH4xnJrHG8=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/godbus/dbus/v5 v5.0.6/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/golang/glog v1.2.0/go.mod h1:6AhwSGph0fcJtXVM/PEHPqZlFeoLxhs7/t5UDAwmO+w=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/snappy v0.0.4/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/google/gnostic-models v0.6.8/go.mod h1:5n7qKqH0f5wFt+aWF8CW6pZLLNOfYuF5OpfBSENuI8U=\ngithub.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-pkcs11 v0.2.1-0.20230907215043-c6f79328ddf9/go.mod h1:6eQoGcuNJpa7jnd5pMGdkSaQpNDYvPlXWMcjXXThLlY=\ngithub.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/googleapis/go-type-adapters v1.0.0/go.mod h1:zHW75FOG2aur7gAO2B+MLby+cLsWGBF62rFAi7WjWO4=\ngithub.com/googleapis/google-cloud-go-testing v0.0.0-20210719221736-1c9a4c676720/go.mod h1:dvDLG8qkwmyD9a/MJJN3XJcT3xFxOKAvTZGvuZmac9g=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/gotestyourself/gotestyourself v2.2.0+incompatible/go.mod h1:zZKM6oeNM8k+FRljX1mnzVYeS8wiGgQyvST1/GafPbY=\ngithub.com/hailocab/go-hostpool v0.0.0-20160125115350-e80d13ce29ed/go.mod h1:tMWxXQ9wFIaZeTI9F+hmhFiGpFmhOHzyShyFUhRm0H4=\ngithub.com/hashicorp/consul/api v1.28.2/go.mod h1:KyzqzgMEya+IZPcD65YFoOVAgPpbfERu4I/tzG6/ueE=\ngithub.com/hashicorp/go-immutable-radix v1.3.1/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-plugin v1.4.3/go.mod h1:5fGEH17QVwTTcR0zV7yhDPLLmFX9YSZ38b18Udy6vYQ=\ngithub.com/hashicorp/go-secure-stdlib/mlock v0.1.2/go.mod h1:zq93CJChV6L9QTfGKtfBxKqD7BqqXx5O04A/ns2p5+I=\ngithub.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-version v1.4.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/serf v0.10.1/go.mod h1:yL2t6BqATOLGc5HF7qbFkTfXoPIY0WZdWHfEvMqbG+4=\ngithub.com/hashicorp/vault/sdk v0.4.1/go.mod h1:aZ3fNuL5VNydQk8GcLJ2TV8YCRVvyaakYkhZRoVuhj0=\ngithub.com/hashicorp/yamux v0.0.0-20211028200310-0bc27b27de87/go.mod h1:CtWFDAQgb7dxtzFs4tWbplKIe2jSi3+5vKbgIO0SLnQ=\ngithub.com/huandu/xstrings v1.3.2/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=\ngithub.com/ianlancetaylor/demangle v0.0.0-20240312041847-bd984b5ce465/go.mod h1:gx7rwoVhcfuVKG5uya9Hs3Sxj7EIvldVofAWIUtGouw=\ngithub.com/imdario/mergo v0.3.12/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=\ngithub.com/influxdata/influxdb-client-go/v2 v2.12.3/go.mod h1:IrrLUbCjjfkmRuaCiGQg4m2GbkaeJDcuWoxiWdQEbA0=\ngithub.com/influxdata/line-protocol v0.0.0-20210922203350-b1ad95c89adf/go.mod h1:xaLFMmpvUxqXtVkUJfg9QmT88cDaCJ3ZKgdZ78oO8Qo=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/kr/fs v0.1.0/go.mod h1:FFnZGqtBN9Gxj7eW1uZ42v5BccTP0vu6NEaFoC2HwRg=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/mitchellh/cli v1.1.5/go.mod h1:v8+iFts2sPIKUV1ltktPXMCC8fumSKFItNcD2cLtRR4=\ngithub.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=\ngithub.com/mitchellh/go-testing-interface v1.14.1/go.mod h1:gfgS7OtZj6MA4U1UrDRp04twqAjfvlZyCfX3sDjEym8=\ngithub.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/moby/sys/mountinfo v0.5.0/go.mod h1:3bMD3Rg+zkqx8MRYPi7Pyb0Ie97QEBmdxbhnCLlSvSU=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/montanaflynn/stats v0.0.0-20171201202039-1bf9dbcd8cbe/go.mod h1:wL8QJuTMNUDYhXwkmfOly8iTdp5TEcJFWZD2D7SIkUc=\ngithub.com/mrunalp/fileutils v0.5.1/go.mod h1:M1WthSahJixYnrXQl/DFQuteStB1weuxD2QJNHXfbSQ=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/natefinch/atomic v1.0.1/go.mod h1:N/D/ELrljoqDyT3rZrsUmtsuzvHkeB/wWjHV22AZRbM=\ngithub.com/nats-io/nats.go v1.34.0/go.mod h1:Ubdu4Nh9exXdSz0RVWRFBbRfrbSxOYd26oF0wkWclB8=\ngithub.com/nats-io/nkeys v0.4.7/go.mod h1:kqXRgRDPlGy7nGaEDMuYzmiJCIAAWDK0IMBtDmGD0nc=\ngithub.com/nats-io/nuid v1.0.1/go.mod h1:19wcPz3Ph3q0Jbyiqsd0kePYG7A95tJPxeL+1OSON2c=\ngithub.com/oklog/run v1.1.0/go.mod h1:sVPdnTZT1zYwAJeCMu2Th4T21pA3FPOQRfWjQlk7DVU=\ngithub.com/onsi/ginkgo v1.16.4/go.mod h1:dX+/inL/fNMqNlz0e9LfyB9TswhZpCVdJM/Z6Vvnwo0=\ngithub.com/opencontainers/runtime-spec v1.0.3-0.20210326190908-1c3f411f0417/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=\ngithub.com/opencontainers/selinux v1.10.0/go.mod h1:2i0OySw99QjzBBQByd1Gr9gSjvuho1lHsJxIJ3gGbJI=\ngithub.com/pierrec/lz4 v2.6.1+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=\ngithub.com/pierrec/lz4/v4 v4.1.15/go.mod h1:gZWDp/Ze/IJXGXf23ltt2EXimqmTUXEy0GFuRQyBid4=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pkg/sftp v1.13.6/go.mod h1:tz1ryNURKu77RL+GuCzmoJYxQczL3wLNNpPWagdg4Qk=\ngithub.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=\ngithub.com/rabbitmq/amqp091-go v1.8.1/go.mod h1:+jPrT9iY2eLjRaMSRHUhc3z14E/l85kv/f+6luSD3pc=\ngithub.com/russross/blackfriday v1.6.0/go.mod h1:ti0ldHuxg49ri4ksnFxlkCfN+hvslNlmVHqNRXXJNAY=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/ryanuber/columnize v2.1.2+incompatible/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=\ngithub.com/sagikazarmark/crypt v0.19.0/go.mod h1:c6vimRziqqERhtSe0MhIvzE1w54FrCHtrXb5NH/ja78=\ngithub.com/seccomp/libseccomp-golang v0.9.2-0.20220502022130-f33da4d89646/go.mod h1:JA8cRccbGaA1s33RQf7Y1+q9gHmZX1yB/z9WDN1C6fg=\ngithub.com/segmentio/kafka-go v0.4.42/go.mod h1:d0g15xPMqoUookug0OU75DhGZxXwCFxSLeJ4uphwJzg=\ngithub.com/shopspring/decimal v1.2.0/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635/go.mod h1:hkRG7XYTFWNJGYcbNJQlaLq0fg1yr4J4t/NcTQtrfww=\ngithub.com/urfave/cli v1.22.1/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/vishvananda/netlink v1.1.0/go.mod h1:cTgwzPIzzgDAYoQrMm0EdrjRUBkTqKYppBueQtXaqoE=\ngithub.com/vishvananda/netns v0.0.0-20191106174202-0a2b9b5464df/go.mod h1:JP3t17pCcGlemwknint6hfoeCVQrEMVwxRLRjXpq+BU=\ngithub.com/xdg-go/pbkdf2 v1.0.0/go.mod h1:jrpuAogTd400dnrH08LKmI/xc1MbPOebTwRqcT5RDeI=\ngithub.com/xdg-go/scram v1.1.2/go.mod h1:RT/sEzTbU5y00aCK8UOx6R7YryM0iF1N2MOmC3kKLN4=\ngithub.com/xdg-go/stringprep v1.0.4/go.mod h1:mPGuuIYwz7CmR2bT9j4GbQqutWS1zV24gijq1dTyGkM=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=\ngithub.com/xeipuuv/gojsonschema v1.2.0/go.mod h1:anYRn/JVcOK2ZgGU+IjEV4nwlhoK5sQluxsYJ78Id3Y=\ngithub.com/youmark/pkcs8 v0.0.0-20181117223130-1be2e3e5546d/go.mod h1:rHwXgn7JulP+udvsHwJoVG1YGAP6VLg4y9I5dyZdqmA=\ngo.etcd.io/etcd/api/v3 v3.5.12/go.mod h1:Ot+o0SWSyT6uHhA56al1oCED0JImsRiU9Dc26+C2a+4=\ngo.etcd.io/etcd/client/pkg/v3 v3.5.12/go.mod h1:seTzl2d9APP8R5Y2hFL3NVlD6qC/dOT+3kvrqPyTas4=\ngo.etcd.io/etcd/client/v2 v2.305.12/go.mod h1:aQ/yhsxMu+Oht1FOupSr60oBvcS9cKXHrzBpDsPTf9E=\ngo.etcd.io/etcd/client/v3 v3.5.12/go.mod h1:tSbBCakoWmmddL+BKVAJHa9km+O/E+bumDe9mSbPiqw=\ngo.mongodb.org/mongo-driver v1.12.1/go.mod h1:/rGBTebI3XYboVmgz+Wv3Bcbl3aD0QF9zl6kDDw18rQ=\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.49.0/go.mod h1:Mjt1i1INqiaoZOMGR1RIUJN+i3ChKoFRqzrRQhlkbs0=\ngo.opentelemetry.io/otel v1.26.0/go.mod h1:UmLkJHUAidDval2EICqBMbnAd0/m2vmpf/dAM+fvFs4=\ngo.opentelemetry.io/otel/metric v1.26.0/go.mod h1:SY+rHOI4cEawI9a7N1A4nIg/nTQXe1ccCNWYOJUrpX4=\ngo.opentelemetry.io/otel/trace v1.26.0/go.mod h1:4iDxvGDQuUkHve82hJJ8UqrwswHYsZuWCBllGV2U2y0=\ngo.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngolang.org/x/sys v0.0.0-20190606203320-7fc4e5ec1444/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191115151921-52ab43148777/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210906170528-6f6e22806c34/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211025201205-69cdffdb9359/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.10.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/tools v0.11.0/go.mod h1:anzJrxPjNtfgiYQYirP2CPGzGLxrH2u2QBhn6Bf3qY8=\ngolang.org/x/xerrors v0.0.0-20220907171357-04be3eba64a2/go.mod h1:K8+ghG5WaK9qNqU5K3HdILfMLy1f3aNYFI/wnl100a8=\ngoogle.golang.org/appengine v1.6.8/go.mod h1:1jJ3jBArFh5pcgW8gCtRJnepW8FzD1V44FJffLiz/Ds=\ngoogle.golang.org/genproto v0.0.0-20240227224415-6ceb2ff114de/go.mod h1:VUhTRKeHn9wwcdrk73nvdC9gF178Tzhmt/qyaFcPLSo=\ngoogle.golang.org/genproto/googleapis/bytestream v0.0.0-20240429193739-8cf5692501f6/go.mod h1:ULqtoQMxDLNRfW+pJbKA68wtIy1OiYjdIsJs3PMpzh8=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=\ngopkg.in/square/go-jose.v2 v2.6.0/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=\nk8s.io/api v0.28.1/go.mod h1:uBYwID+66wiL28Kn2tBjBYQdEU0Xk0z5qF8bIBqk/Dg=\nk8s.io/apimachinery v0.28.1/go.mod h1:X0xh/chESs2hP9koe+SdIAcXWcQ+RM5hy0ZynB+yEvw=\nk8s.io/client-go v0.28.1/go.mod h1:pEZA3FqOsVkCc07pFVzK076R+P/eXqsgx5zuuRWukNE=\nk8s.io/klog/v2 v2.100.1/go.mod h1:y1WjHnz7Dj687irZUWR/WLkLc5N1YHtjLdmgWjndZn0=\nk8s.io/kube-openapi v0.0.0-20230717233707-2695361300d9/go.mod h1:wZK2AVp1uHCp4VamDVgBP2COHZjqD1T68Rf0CM3YjSM=\nk8s.io/utils v0.0.0-20230406110748-d93618cff8a2/go.mod h1:OLgZIPagt7ERELqWJFomSt595RzquPNLL48iOWgYOg0=\nsigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd/go.mod h1:B8JuhiUyNFVKdsE8h686QcCxMaH6HrOAZj4vswFpcB0=\nsigs.k8s.io/structured-merge-diff/v4 v4.2.3/go.mod h1:qjx8mGObPmV2aSZepjQjbmb2ihdVs8cGKBraizNC69E=\nsigs.k8s.io/yaml v1.3.0/go.mod h1:GeOyir5tyXNByN85N/dRIT9es5UQNerPYEKK56eTBm8=\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.7353515625,
          "content": "{\n  \"name\": \"graphjin\",\n  \"version\": \"3.0.26\",\n  \"description\": \"GraphJin - Build APIs in 5 minutes with GraphQL\",\n  \"type\": \"module\",\n  \"main\": \"./wasm/js/graphjin.js\",\n  \"files\": [\n    \"./wasm/config\",\n    \"./wasm/runtime\",\n    \"./wasm/graphjin.wasm\",\n    \"./wasm/js/*.js\"\n  ],\n  \"scripts\": {\n    \"postinstall\": \"node ./wasm/js/install.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/dosco/graphjin.git\"\n  },\n  \"keywords\": [\n    \"postgres\",\n    \"mysql\",\n    \"graphql\",\n    \"sql\"\n  ],\n  \"author\": \"Vikram <https://twitter.com/dosco>\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/dosco/graphjin/issues\"\n  },\n  \"homepage\": \"https://graphjin.com\",\n  \"dependencies\": {\n    \"fs-extra\": \"^11.1.0\"\n  }\n}\n"
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.go",
          "type": "blob",
          "size": 2.4287109375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tif len(os.Args) != 2 {\n\t\tfmt.Println(\"Usage: go run script.go <version>\")\n\t\tos.Exit(1)\n\t}\n\n\tnewVersion := os.Args[1]\n\tversionRegex := regexp.MustCompile(`(github.com\\/dosco\\/graphjin\\/[^\\s]+) v[0-9]+\\.[0-9]+\\.[0-9]+`)\n\treplaceFormat := \"$1 v\" + newVersion\n\n\terr := filepath.Walk(\".\", func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif !info.IsDir() && filepath.Base(path) == \"go.mod\" {\n\t\t\tfmt.Println(\"Processing:\", path)\n\t\t\tupdateFile(path, versionRegex, replaceFormat)\n\t\t}\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\tfmt.Println(\"Error walking through files:\", err)\n\t\treturn\n\t}\n\n\tif err = gitCommands(newVersion); err != nil {\n\t\tfmt.Println(\"Error executing git commands:\", err)\n\t}\n}\n\nfunc updateFile(filePath string, versionRegex *regexp.Regexp, replaceFormat string) {\n\tinput, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tfmt.Println(\"Failed to read file:\", err)\n\t\treturn\n\t}\n\n\tcontent := string(input)\n\tupdatedContent := versionRegex.ReplaceAllString(content, replaceFormat)\n\n\tif updatedContent != content {\n\t\terr = os.WriteFile(filePath, []byte(updatedContent), 0644)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Failed to write updated content to file:\", err)\n\t\t}\n\t}\n}\n\nfunc gitCommands(version string) error {\n\tsteps := []struct {\n\t\tcommand string\n\t\targs    []string\n\t}{\n\t\t{\"make\", []string{\"tidy\"}},\n\t\t{\"git\", []string{\"add\", \".\"}},\n\t\t{\"git\", []string{\"commit\", \"-m\", fmt.Sprintf(\"Release v%s\", version)}},\n\t\t{\"git\", []string{\"push\", \"origin\", \"master\"}},\n\n\t\t{\"git\", []string{\"tag\", fmt.Sprintf(\"auth/v%s\", version)}},\n\t\t{\"git\", []string{\"tag\", fmt.Sprintf(\"cmd/v%s\", version)}},\n\t\t{\"git\", []string{\"tag\", fmt.Sprintf(\"conf/v%s\", version)}},\n\t\t{\"git\", []string{\"tag\", fmt.Sprintf(\"core/v%s\", version)}},\n\t\t{\"git\", []string{\"tag\", fmt.Sprintf(\"plugin/otel/v%s\", version)}},\n\t\t{\"git\", []string{\"tag\", fmt.Sprintf(\"serv/v%s\", version)}},\n\t\t{\"git\", []string{\"tag\", fmt.Sprintf(\"tests/v%s\", version)}},\n\t\t{\"git\", []string{\"tag\", fmt.Sprintf(\"wasm/v%s\", version)}},\n\t\t{\"git\", []string{\"push\", \"--tags\"}},\n\t\t{\"git\", []string{\"tag\", fmt.Sprintf(\"v%s\", version)}},\n\t\t{\"git\", []string{\"push\", \"--tags\"}},\n\t}\n\n\tfor _, step := range steps {\n\t\tcmd := exec.Command(step.command, step.args...)\n\t\tcmd.Stderr = os.Stderr\n\t\tcmd.Stdout = os.Stdout\n\t\tif err := cmd.Run(); err != nil {\n\t\t\treturn fmt.Errorf(\"%s %v failed: %w\", step.command, step.args, err)\n\t\t}\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 0.900390625,
          "content": "#!/bin/sh\n\n# Ensure a version argument is provided and it is in the correct format\nif [ -z \"$1\" ] || ! echo \"$1\" | grep -qE '^[0-9]+\\.[0-9]+\\.[0-9]+$'; then\n    echo \"Usage: $0 <version> (e.g., 0.1.0)\"\n    exit 1\nfi\n\nnew_version=$1\n\n# Find all go.mod files and update the version for specified packages\nfind . -name 'go.mod' -exec sh -c '\n    for file do\n        echo \"Processing $file\"\n        # Use sed to update the version of packages starting with github.com/dosco/graphjin\n        # Note: -i \"\" for BSD/macOS sed compatibility, use -i for GNU/Linux\n        sed -i\"\" -e \"/github.com\\/dosco\\/graphjin\\//s/v[0-9]*\\.[0-9]*\\.[0-9]*/v$new_version/\" \"$file\"\n    done\n' sh {} +\n\n# git add .\n# git commit -m \"Release v$new_version\"\n\n# git tag auth/v$1\n# git tag cmd/v$1\n# git tag conf/v$1\n# git tag core/v$1\n# git tag plugin/otel/v$1\n# git tag serv/v$1\n# git tag tests/v$1\n# git tag wasm/v$1\n\n# git tag v$1\n# git push --tags\n"
        },
        {
          "name": "serv",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "wasm",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}