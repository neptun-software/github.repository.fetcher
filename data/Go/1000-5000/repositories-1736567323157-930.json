{
  "metadata": {
    "timestamp": 1736567323157,
    "page": 930,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cloudflare/ebpf_exporter",
      "stars": 2234,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.2958984375,
          "content": "# Minimal format loosely matching the kernel style.\nStandard: Cpp03\nIndentWidth: 4\nTabWidth: 4\nUseTab: Never\nColumnLimit: 120\nSortIncludes: false\nSpaceAfterCStyleCast: true\nAllowShortFunctionsOnASingleLine: None\nCpp11BracedListStyle: false\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterFunction: true\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "/ebpf_exporter\n/libbpf\n/examples/*.bpf.o\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.083984375,
          "content": "include/arm64/vmlinux.h linguist-generated\ninclude/x86/vmlinux.h   linguist-generated\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "/ebpf_exporter\n/libbpf\n\n.DS_Store\n"
        },
        {
          "name": ".golangci.yaml",
          "type": "blob",
          "size": 0.869140625,
          "content": "linters:\n  enable-all: true\n  disable:\n    - cyclop\n    - depguard\n    - dupword\n    - err113\n    - execinquery # deprecated\n    - exhaustruct\n    - exportloopref # deprecated\n    - funlen\n    - gci\n    - gochecknoglobals\n    - gochecknoinits\n    - gocritic\n    - godot\n    - gofumpt\n    - gomnd # deprecated\n    - gosec\n    - ireturn\n    - lll\n    - mnd\n    - nakedret\n    - nilerr # https://github.com/gostaticanalysis/nilerr/issues/8\n    - nlreturn\n    - noctx\n    - nonamedreturns\n    - paralleltest\n    - tagliatelle\n    - testpackage\n    - thelper\n    - varnamelen\n    - wastedassign # https://github.com/sanposhiho/wastedassign/issues/39\n    - wrapcheck\n    - wsl\nissues:\n  exclude-use-default: false\n  exclude:\n    - Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*print(f|ln)?|os\\.(Un)?Setenv). is not checked\n    - should have a package comment\n"
        },
        {
          "name": ".markdown-link-check.json",
          "type": "blob",
          "size": 0.29296875,
          "content": "{\n    \"httpHeaders\": [\n        {\n            \"urls\": [\n                \"https://\"\n            ],\n            \"headers\": {\n                \"user-agent\": \"pls let me in\"\n            }\n        }\n    ],\n    \"ignorePatterns\": [\n        {\n            \"pattern\": \"http://localhost:16686/\"\n        }\n    ]\n}\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.6298828125,
          "content": "# libbpf\nFROM debian:bookworm as libbpf_builder\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends git ca-certificates gcc make pkg-config libelf-dev\n\nCOPY ./ /build/ebpf_exporter\n\nRUN make -j $(nproc) -C /build/ebpf_exporter libbpf.a && \\\n    tar -C /build/ebpf_exporter/libbpf/dest -czf /build/libbpf.tar.gz .\n\n# ebpf_exporter binary\nFROM golang:1.23-bookworm as ebpf_exporter_builder\n\nRUN apt-get update && \\\n    apt-get install -y libelf-dev pci.ids\n\nCOPY --from=libbpf_builder /build/ebpf_exporter/libbpf /build/ebpf_exporter/libbpf\n\nCOPY ./ /build/ebpf_exporter\n\nRUN make -j $(nproc) -C /build/ebpf_exporter build && \\\n    /build/ebpf_exporter/ebpf_exporter --version\n\n\n# examples\nFROM debian:bookworm as examples_builder\n\nRUN apt-get update && \\\n    apt-get install -y clang-16 make\n\nCOPY --from=libbpf_builder /build/ebpf_exporter/libbpf /build/ebpf_exporter/libbpf\n\nCOPY ./ /build/ebpf_exporter\n\nRUN make -j $(nproc) -C /build/ebpf_exporter/examples CC=clang-16\n\n\n# ebpf_exporter release image\nFROM gcr.io/distroless/static-debian11 as ebpf_exporter\n\nCOPY --from=ebpf_exporter_builder /build/ebpf_exporter/ebpf_exporter /ebpf_exporter\nCOPY --from=ebpf_exporter_builder /usr/share/misc/pci.ids /usr/share/misc/pci.ids\n\nENTRYPOINT [\"/ebpf_exporter\"]\n\n\n# ebpf_exporter release image with examples bundled\nFROM gcr.io/distroless/static-debian11 as ebpf_exporter_with_examples\n\nCOPY --from=ebpf_exporter_builder /build/ebpf_exporter/ebpf_exporter /ebpf_exporter\nCOPY --from=ebpf_exporter_builder /usr/share/misc/pci.ids /usr/share/misc/pci.ids\nCOPY --from=examples_builder /build/ebpf_exporter/examples /examples\n\nENTRYPOINT [\"/ebpf_exporter\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0966796875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2016 CloudFlare\nCopyright (c) 2014-2015 Aaron Westendorf\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.4365234375,
          "content": ".DEFAULT_GOAL := build\n\nBUILD_VAR_PREFIX := github.com/prometheus/common/version\nBUILD_USER := $(shell id -u -n)@$(shell hostname)\nBUILD_DATE := $(shell date --iso-8601=seconds)\n\nifeq (yes,$(shell which git > /dev/null && test -e .git && echo yes))\nBUILD_VERSION := $(shell git describe --tags)\nBUILD_BRANCH := $(shell git rev-parse --abbrev-ref HEAD)\nBUILD_REVISION := $(shell git rev-parse --short HEAD)\nelse\nBUILD_VERSION := unknown\nBUILD_BRANCH := unknown\nBUILD_REVISION := unknown\nendif\n\nGO_LDFLAGS_VARS := -X $(BUILD_VAR_PREFIX).Version=$(BUILD_VERSION) \\\n\t-X $(BUILD_VAR_PREFIX).Branch=$(BUILD_BRANCH) \\\n\t-X $(BUILD_VAR_PREFIX).Revision=$(BUILD_REVISION) \\\n\t-X $(BUILD_VAR_PREFIX).BuildUser=$(BUILD_USER) \\\n\t-X $(BUILD_VAR_PREFIX).BuildDate=$(BUILD_DATE)\n\nCLANG_FORMAT_FILES = ${wildcard examples/*.c examples/*.h benchmark/probes/*.c benchmark/probes/*.h}\n\n# * cachestat-pre-kernel-5.16 fails to attach in newer kernels (see code)\n# * llcstat requires real hardware to attach perf events, which is not present in ci\nCONFIGS_TO_IGNORE_IN_CHECK := cachestat-pre-kernel-5.16 llcstat\n# * cgroup-rstat-flushing depend on kernel v6.10, which is not yet on CI system\nCONFIGS_TO_IGNORE_IN_CHECK += cgroup-rstat-flushing\nCONFIGS_TO_CHECK := $(filter-out $(CONFIGS_TO_IGNORE_IN_CHECK), ${patsubst examples/%.yaml, %, ${wildcard examples/*.yaml}})\n\nCGO_LDFLAGS_DYNAMIC = -l bpf\nCGO_LDFLAGS = $(CGO_LDFLAGS_DYNAMIC)\n\ninclude Makefile.libbpf\n\nGO_TEST_ARGS = -v\n# On aarch64 it's unavailable: FATAL: ThreadSanitizer: unsupported VMA range\nifneq ($(shell uname -m),aarch64)\nGO_TEST_ARGS += -race\nendif\n\n.PHONY: lint\nlint:\n\tgo mod verify\n\tCGO_LDFLAGS=\"$(CGO_LDFLAGS)\" CGO_CFLAGS=\"$(CGO_CFLAGS)\" golangci-lint run ./...\n\n.PHONY: markdown-link-check\nmarkdown-link-check:\n\tdocker run --rm -v $(shell pwd):/tmp/check:ro -w /tmp/check --entrypoint /bin/sh ghcr.io/tcort/markdown-link-check:stable -c 'markdown-link-check --config .markdown-link-check.json $$(find . -name \\*.md | grep -v ^\\./libbpf)'\n\n.PHONY: jsonschema\njsonschema:\n\t./scripts/jsonschema.sh\n\n.PHONY: clang-format-check\nclang-format-check:\n\t./scripts/clang-format-check.sh $(CLANG_FORMAT_FILES)\n\n.PHONY: test\ntest: $(LIBBPF_DEPS)\n\tCGO_LDFLAGS=\"$(CGO_LDFLAGS)\" CGO_CFLAGS=\"$(CGO_CFLAGS)\" go test $(GO_TEST_ARGS) ./...\n\n.PHONY: test-privileged\ntest-privileged:\n\tsudo go test $(GO_TEST_ARGS) ./cgroup\n\n.PHONY: config-check\nconfig-check:\n\tsudo ./ebpf_exporter --capabilities.keep=none --config.check --config.strict --config.dir=examples --config.names=$(shell echo $(CONFIGS_TO_CHECK) | tr ' ' ',')\n\n.PHONY: build\nbuild: build-static\n\n.PHONY: build-static\nbuild-static: $(LIBBPF_DEPS)\n\t$(eval CGO_LDFLAGS=$(subst $(CGO_LDFLAGS_DYNAMIC),$(shell PKG_CONFIG_PATH=$(LIBBPF_PKG_CONFIG_PATH) pkg-config --static --libs libbpf),$(CGO_LDFLAGS)))\n\t$(MAKE) build-binary GO_BUILD_ARGS=\"-tags netgo,osusergo\" GO_LDFLAGS='-extldflags \"-static\"' CGO_LDFLAGS=\"$(CGO_LDFLAGS)\"\n\n.PHONY: build-dynamic\nbuild-dynamic:\n\t$(MAKE) build-binary\n\n.PHONY: build-binary\nbuild-binary: $(LIBBPF_DEPS)\n\tCGO_LDFLAGS=\"$(CGO_LDFLAGS)\" CGO_CFLAGS=\"$(CGO_CFLAGS)\" go build $(GO_BUILD_ARGS) -o ebpf_exporter -v -ldflags=\"$(GO_LDFLAGS) $(GO_LDFLAGS_VARS)\" ./cmd/ebpf_exporter\n\n.PHONY: examples\nexamples:\n\t$(MAKE) -C examples\n\n.PHONY: tracing-demos\ntracing-demos:\n\t$(MAKE) -C tracing/demos\n\n.PHONY: syscalls\nsyscalls:\n\tgo run ./scripts/mksyscalls --strace.version v6.8\n\n.PHONY: clean\nclean:\n\trm -rf ebpf_exporter libbpf\n\t$(MAKE) -C tracing/demos clean\n\t$(MAKE) -C examples clean\n\t$(MAKE) -C benchmark clean\n"
        },
        {
          "name": "Makefile.libbpf",
          "type": "blob",
          "size": 0.9306640625,
          "content": "LIBBPF_TOP := $(realpath $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))\n\nLIBBPF_VERSION := 1.4.2\nLIBBPF_BRANCH := v$(LIBBPF_VERSION)\nLIBBPF_DESTDIR := $(LIBBPF_TOP)/libbpf/dest\nLIBBPF_PATH := $(LIBBPF_DESTDIR)/usr/lib/libbpf.so.$(LIBBPF_VERSION)\n\nifneq ($(BUILD_LIBBPF),0)\nLIBBPF_DEPS := $(LIBBPF_PATH)\nLIBBPF_PKG_CONFIG_PATH=$(LIBBPF_DESTDIR)/usr/lib/pkgconfig\nLIBBPF_CFLAGS := -I$(LIBBPF_DESTDIR)/usr/include\nLIBBPF_LDFLAGS := -L$(LIBBPF_DESTDIR)/usr/lib\nCGO_LDFLAGS := $(CGO_LDFLAGS) $(LIBBPF_LDFLAGS)\nCGO_CFLAGS := $(LIBBPF_CFLAGS)\n\nexport LD_LIBRARY_PATH=$(LIBBPF_DESTDIR)/usr/lib\nendif\n\n.PHONY: clean-libbpf\nclean-libbpf:\n\trm -rf $(LIBBPF_TOP)/libbpf\n\n.PHONY: libbpf.a\nlibbpf.a: $(LIBBPF_PATH)\n\n$(LIBBPF_PATH):\n\t$(MAKE) clean-libbpf\n\tgit clone --branch v$(LIBBPF_VERSION) --depth 1 https://github.com/libbpf/libbpf.git $(LIBBPF_TOP)/libbpf\n\t$(MAKE) -C $(LIBBPF_TOP)/libbpf/src LIBSUBDIR=lib DESTDIR=$(LIBBPF_DESTDIR) install install_uapi_headers\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.1640625,
          "content": "# ebpf_exporter\n\nPrometheus exporter for custom eBPF metrics and OpenTelemetry traces.\n\n* Metrics:\n\n![metrics](./examples/biolatency.png)\n\n* [Traces](./tracing):\n\n![tracing](./examples/exec-trace.png)\n\nMotivation of this exporter is to allow you to write eBPF code and export\nmetrics that are not otherwise accessible from the Linux kernel.\n\n[ebpf.io](https://ebpf.io/what-is-ebpf/) describes eBPF:\n\n> eBPF is a revolutionary technology with origins in the Linux kernel that can\n> run sandboxed programs in a privileged context such as the operating system\n> kernel. It is used to safely and efficiently extend the capabilities of the\n> kernel without requiring to change kernel source code or load kernel modules.\n\nAn easy way of thinking about this exporter is bcc tools as prometheus metrics:\n\n* https://iovisor.github.io/bcc\n\nWe use libbpf rather than legacy bcc driven code, so it's more like libbpf-tools:\n\n* https://github.com/iovisor/bcc/tree/master/libbpf-tools\n\nProducing [OpenTelemetry](https://opentelemetry.io/) compatible traces is also\nsupported, see [Tracing docs](./tracing/) for more information on that.\n\n## Reading material\n\n* https://www.brendangregg.com/ebpf.html\n* https://nakryiko.com/posts/bpf-core-reference-guide/\n* https://nakryiko.com/posts/bpf-portability-and-co-re/\n* https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/\n* https://libbpf.readthedocs.io/en/latest/program_types.html\n\n## Building and running\n\n### Actual building\n\nTo build a binary, clone the repo and run:\n\n```\nmake build\n```\n\nThe default `build` target makes a static binary, but you could also\nuse the `build-dynamic` target if you'd like a dynamically linked binary.\nIn either case `libbpf` is built from source, but you could override this\nbehavior with `BUILD_LIBBPF=0`, if you want to use your system `libbpf`.\n\nIf you're having trouble building on the host, you can try building in Docker:\n\n```\ndocker build --tag ebpf_exporter --target ebpf_exporter .\ndocker cp $(docker create ebpf_exporter):/ebpf_exporter ./\n```\n\nTo build examples (see [building examples section](#building-examples)):\n\n```\nmake -C examples clean build\n```\n\nTo run with [`biolatency`](examples/biolatency.yaml) config:\n\n```\nsudo ./ebpf_exporter --config.dir=examples --config.names=biolatency\n```\n\nIf you pass `--debug`, you can see raw maps at `/maps` endpoint\nand see debug output from `libbpf` itself.\n\n### Docker image\n\nA docker image can be built from this repo. A prebuilt image with examples\nincluded is also available for download from GitHub Container Registry:\n\n* https://github.com/cloudflare/ebpf_exporter/pkgs/container/ebpf_exporter\n\nTo build the image with just the exporter binary, run the following:\n\n```\ndocker build --tag ebpf_exporter --target ebpf_exporter .\n```\n\nTo run it with the examples, you need to build them first (see above).\nThen you can run by running a privileged container and bind-mounting:\n\n* `$(pwd)/examples:/examples:ro` to allow access to examples on the host\n* `/sys/fs/cgroup:/sys/fs/cgroup:ro` to allow resolving cgroups\n\nYou might have to bind-mount additional directories depending on your needs.\nYou might also not need to bind-mount anything for simple kprobe examples.\n\nThe actual command to run the docker container (from the repo directory):\n\n```\ndocker run --rm -it --privileged -p 9435:9435 \\\n  -v $(pwd)/examples:/examples \\\n  -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  ebpf_exporter --config.dir=examples --config.names=timers\n```\n\nFor production use you would either bind-mount your own config and compiled\nbpf programs corresponding to it, or build your own image based on ours\nwith your own config baked in.\n\nFor development use when you don't want or have any dev tools on the host,\nyou can build the docker image with examples bundled:\n\n```\ndocker build --tag ebpf_exporter --target ebpf_exporter_with_examples .\n```\n\nSome examples then can run without any bind mounts:\n\n```\ndocker run --rm -it --privileged -p 9435:9435 \\\n  ebpf_exporter --config.dir=examples --config.names=timers\n```\n\nOr with the publicly available prebuilt image:\n\n```\ndocker run --rm -it --privileged -p 9435:9435 \\\n  ghcr.io/cloudflare/ebpf_exporter --config.dir=examples --config.names=timers\n```\n\n## Kubernetes Helm chart\n\nA third party helm chart is available here:\n\n* https://github.com/kubeservice-stack/kubservice-charts/tree/master/charts/kubeservice-ebpf-exporter\n\nPlease note that the helm chart is not provided or supported by Cloudflare,\nso do your own due diligence and use it at your own risk.\n\n## Benchmarking overhead\n\nSee [benchmark](benchmark) directory to get an idea of how low ebpf overhead is.\n\n## Required capabilities\n\nWhile you can run `ebpf_exporter` as `root`, it is not strictly necessary.\nOnly the following two capabilities are necessary for normal operation:\n\n* `CAP_BPF`: required for privileged bpf operations and for reading memory\n* `CAP_PERFMON`: required to attach bpf programs to kprobes and tracepoints\n\nIf you are using `systemd`, you can use the following configuration to run\nas on otherwise unprivileged dynamic user with the needed capabilities:\n\n```ini\nDynamicUser=true\nAmbientCapabilities=CAP_BPF CAP_PERFMON\nCapabilityBoundingSet=CAP_BPF CAP_PERFMON\n```\n\nPrior to Linux v5.8 there was no dedicated `CAP_BPF` and `CAP_PERFMON`,\nbut you can use `CAP_SYS_ADMIN` instead of your kernel is older.\n\nIf you pass `--capabilities.keep=none` flag to `ebpf_expoter`, then it drops\nall capabilities after attaching the probes, leaving it fully unprivileged.\n\nThe following additional capabilities might be needed:\n\n* `CAP_SYSLOG`: if you use `ksym` decoder to have access to `/proc/kallsyms`.\n  Note that you must keep this capability: `--capabilities.keep=cap_syslog`.\n  See: https://elixir.bootlin.com/linux/v6.4/source/kernel/kallsyms.c#L982\n* `CAP_IPC_LOCK`: if you use `perf_event_array` for reading from the kernel.\n  Note that you must keep it: `--capabilities.keep=cap_perfmon,cap_ipc_lock`.\n* `CAP_SYS_ADMIN`: if you want BTF information from modules.\n  See: https://github.com/libbpf/libbpf/blob/v1.2.0/src/libbpf.c#L8654-L8666\n  and https://elixir.bootlin.com/linux/v6.5-rc1/source/kernel/bpf/syscall.c#L3789\n* `CAP_NET_ADMIN`: if you use net admin related programs like xdp.\n  See: https://elixir.bootlin.com/linux/v6.4/source/kernel/bpf/syscall.c#L3787\n* `CAP_SYS_RESOURCE`: if you run an older kernel without memcg accounting for\n  bpf memory. Upstream Linux kernel added support for this in v5.11.\n  See: https://github.com/libbpf/libbpf/blob/v1.2.0/src/bpf.c#L98-L106\n* `CAP_DAC_READ_SEARCH`: if you want to use `fanotify` to monitor cgroup changes,\n  which is the preferred way, but only available since Linux v6.6.\n  See: https://github.com/torvalds/linux/commit/0ce7c12e88cf\n\n## External BTF Support\n\nExecution of eBPF programs requires kernel data types normally available\nin `/sys/kernel/btf/vmlinux`, which is created during kernel build process.\nHowever, on some older kernel configurations, this file might not be available.\nIf that's the case, an external BTF file can be supplied with `--btf.path`.\nAn archive of BTFs for all some older distros and kernel versions can be\nfound [here](https://github.com/aquasecurity/btfhub-archive).\n\n## Supported scenarios\n\nCurrently the only supported way of getting data out of the kernel is via maps.\n\nSee [examples](#examples) section for real world examples.\n\nIf you have examples you want to share, please feel free to open a PR.\n\n## Configuration\n\nSkip to [format](#configuration-file-format) to see the full specification.\n\n### Examples\n\nYou can find additional examples in [examples](examples) directory.\n\nUnless otherwise specified, all examples are expected to work on Linux 5.15,\nwhich is the latest LTS release at the time of writing. Thanks to CO-RE,\nexamples are also supposed to work on any modern kernel with BTF enabled.\n\nYou can find the list of supported distros in `libbpf` README:\n\n* https://github.com/libbpf/libbpf#bpf-co-re-compile-once--run-everywhere\n\n#### Building examples\n\nTo build examples, run:\n\n```\nmake -C examples clean build\n```\n\nThis will use `clang` to build examples with `vmlinux.h` we provide\nin this repo (see [include](include/README.md) for more on `vmlinux.h`).\n\nExamples need to be compiled before they can be used.\n\nNote that compiled examples can be used as is on any BTF enabled kernel\nwith no runtime dependencies. Most modern Linux distributions have it enabled.\n\n#### Timers via tracepoints (counters)\n\nThis config attaches to kernel tracepoints for timers subsystem\nand counts timers that fire with breakdown by timer name.\n\nResulting metrics:\n\n```\n# HELP ebpf_exporter_timer_starts_total Timers fired in the kernel\n# TYPE ebpf_exporter_timer_starts_total counter\nebpf_exporter_timer_starts_total{function=\"blk_stat_timer_fn\"} 10\nebpf_exporter_timer_starts_total{function=\"commit_timeout\t[jbd2]\"} 1\nebpf_exporter_timer_starts_total{function=\"delayed_work_timer_fn\"} 25\nebpf_exporter_timer_starts_total{function=\"dev_watchdog\"} 1\nebpf_exporter_timer_starts_total{function=\"mix_interrupt_randomness\"} 3\nebpf_exporter_timer_starts_total{function=\"neigh_timer_handler\"} 1\nebpf_exporter_timer_starts_total{function=\"process_timeout\"} 49\nebpf_exporter_timer_starts_total{function=\"reqsk_timer_handler\"} 2\nebpf_exporter_timer_starts_total{function=\"tcp_delack_timer\"} 5\nebpf_exporter_timer_starts_total{function=\"tcp_keepalive_timer\"} 6\nebpf_exporter_timer_starts_total{function=\"tcp_orphan_update\"} 16\nebpf_exporter_timer_starts_total{function=\"tcp_write_timer\"} 12\nebpf_exporter_timer_starts_total{function=\"tw_timer_handler\"} 1\nebpf_exporter_timer_starts_total{function=\"writeout_period\"} 5\n```\n\nThere's config file for it:\n\n```yaml\nmetrics:\n  counters:\n    - name: timer_starts_total\n      help: Timers fired in the kernel\n      labels:\n        - name: function\n          size: 8\n          decoders:\n            - name: ksym\n```\n\nAnd corresponding C code that compiles into an ELF file with eBPF bytecode:\n\n```C\n#include <vmlinux.h>\n#include <bpf/bpf_tracing.h>\n#include \"maps.bpf.h\"\n\nstruct {\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __uint(max_entries, 1024);\n    __type(key, u64);\n    __type(value, u64);\n} timer_starts_total SEC(\".maps\");\n\nSEC(\"tp_btf/timer_start\")\nint BPF_PROG(timer_start, struct timer_list *timer)\n{\n    u64 function = (u64) timer->function;\n    increment_map(&timer_starts_total, &function, 1);\n    return 0;\n}\n\nchar LICENSE[] SEC(\"license\") = \"GPL\";\n```\n\n#### Block IO histograms (histograms)\n\nThis config attaches to block io subsystem and reports disk latency\nas a prometheus histogram, allowing you to compute percentiles.\n\nThe following tools are working with similar concepts:\n\n* https://github.com/iovisor/bcc/blob/master/tools/biosnoop_example.txt\n* https://github.com/iovisor/bcc/blob/master/tools/biolatency_example.txt\n* https://github.com/iovisor/bcc/blob/master/tools/bitesize_example.txt\n\nThis program was the initial reason for the exporter and was heavily\ninfluenced by the experimental exporter from Daniel Swarbrick:\n\n* https://github.com/dswarbrick/ebpf_exporter\n\nResulting metrics:\n\n```\n# HELP ebpf_exporter_bio_latency_seconds Block IO latency histogram\n# TYPE ebpf_exporter_bio_latency_seconds histogram\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"1e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"2e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"4e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"8e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"1.6e-05\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"3.2e-05\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"6.4e-05\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.000128\"} 22\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.000256\"} 36\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.000512\"} 40\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.001024\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.002048\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.004096\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.008192\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.016384\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.032768\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.065536\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.131072\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.262144\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"0.524288\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"1.048576\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"2.097152\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"4.194304\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"8.388608\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"16.777216\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"33.554432\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"67.108864\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"134.217728\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme0n1\",operation=\"write\",le=\"+Inf\"} 48\nebpf_exporter_bio_latency_seconds_sum{device=\"nvme0n1\",operation=\"write\"} 0.021772\nebpf_exporter_bio_latency_seconds_count{device=\"nvme0n1\",operation=\"write\"} 48\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"1e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"2e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"4e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"8e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"1.6e-05\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"3.2e-05\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"6.4e-05\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.000128\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.000256\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.000512\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.001024\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.002048\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.004096\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.008192\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.016384\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.032768\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.065536\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.131072\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.262144\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"0.524288\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"1.048576\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"2.097152\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"4.194304\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"8.388608\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"16.777216\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"33.554432\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"67.108864\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"134.217728\"} 1\nebpf_exporter_bio_latency_seconds_bucket{device=\"nvme1n1\",operation=\"write\",le=\"+Inf\"} 1\nebpf_exporter_bio_latency_seconds_sum{device=\"nvme1n1\",operation=\"write\"} 0.0018239999999999999\nebpf_exporter_bio_latency_seconds_count{device=\"nvme1n1\",operation=\"write\"} 1\n```\n\nYou can nicely plot this with Grafana:\n\n![Histogram](./examples/biolatency.png)\n\n## Configuration concepts\n\nThe following concepts exists within `ebpf_exporter`.\n\n### Configs\n\nConfigs describe how to extract metrics from kernel. Each config has\na corresponding eBPF code that runs in kernel to produce these metrics.\n\nMultiple configs can be loaded at the same time.\n\n### Metrics\n\nMetrics define what values we get from eBPF program running in the kernel.\n\n#### Counters\n\nCounters from maps are direct transformations: you pull data out of kernel,\ntransform map keys into sets of labels and export them as prometheus counters.\n\n#### Histograms\n\nHistograms from maps are a bit more complex than counters. Maps in the kernel\ncannot be nested, so we need to pack keys in the kernel and unpack in user space.\n\nWe get from this:\n\n```\nsda, read, 1ms -> 10 ops\nsda, read, 2ms -> 25 ops\nsda, read, 4ms -> 51 ops\n```\n\nTo this:\n\n```\nsda, read -> [1ms -> 10 ops, 2ms -> 25 ops, 4ms -> 51 ops]\n```\n\nPrometheus histograms expect to have all buckets when we report a metric,\nbut the kernel creates keys as events occur, which means we need to backfill\nthe missing data.\n\nThat's why for histogram configuration we have the following keys:\n\n* `bucket_type`: can be either `exp2`, `exp2zero`, `linear`, or `fixed`\n* `bucket_min`: minimum bucket key (`exp2`, `exp2zero` and `linear` only)\n* `bucket_max`: maximum bucket key (`exp2`, `exp2zero` and `linear` only)\n* `bucket_keys`: maximum bucket key (`fixed` only)\n* `bucket_multiplier`: multiplier for bucket keys (default is `1`)\n\n##### `exp2` histograms\n\nFor `exp2` histograms we expect kernel to provide a map with linear keys that\nare log2 of actual values. We then go from `bucket_min` to `bucket_max` in\nuser space and remap keys by exponentiating them:\n\n```\ncount = 0\nfor i = bucket_min; i < bucket_max; i++ {\n  count += map.get(i, 0)\n  result[exp2(i) * bucket_multiplier] = count\n}\n```\n\nHere `map` is the map from the kernel and `result` is what goes to prometheus.\n\nWe take cumulative `count`, because this is what prometheus expects.\n\n##### `exp2zero` histograms\n\nThese are the same as `exp2` histograms, except:\n\n* The first key is for the value `0`\n* All other keys are `1` larger than they should be\n\nThis is useful if your actual observed value can be zero, as regular `exp2`\nhistograms cannot express this due the the fact that `log2(0)` is invalid,\nand in fact BPF treats `log2(0)` as `0`, and `exp2(0)` is 1, not 0.\n\nSee [`tcp-syn-backlog-exp2zero.bpf.c`](examples/tcp-syn-backlog-exp2zero.bpf.c)\nfor an example of a config that makes use of this.\n\n##### `linear` histograms\n\nFor `linear` histograms we expect kernel to provide a map with linear keys\nthat are results of integer division of original value by `bucket_multiplier`.\nTo reconstruct the histogram in user space we do the following:\n\n```\ncount = 0\nfor i = bucket_min; i < bucket_max; i++ {\n  count += map.get(i, 0)\n  result[i * bucket_multiplier] = count\n}\n```\n\n##### `fixed` histograms\n\nFor `fixed` histograms we expect kernel to provide a map with fixed keys\ndefined by the user.\n\n```\ncount = 0\nfor i = 0; i < len(bucket_keys); i++ {\n  count  += map.get(bucket_keys[i], 0)\n  result[bucket_keys[i] * multiplier] = count\n}\n```\n\n##### `sum` keys\n\nFor `exp2` and `linear` histograms, if `bucket_max + 1` contains a non-zero\nvalue, it will be used as the `sum` key in histogram, providing additional\ninformation and allowing richer metrics.\n\nFor `fixed` histograms, if `buckets_keys[len(bucket_keys) - 1 ] + 1` contains\na non-zero value, it will be used as the `sum` key.\n\n##### Advice on values outside of `[bucket_min, bucket_max]`\n\nFor both `exp2` and `linear` histograms it is important that kernel does\nnot count events into buckets outside of `[bucket_min, bucket_max]` range.\nIf you encounter a value above your range, truncate it to be in it. You're\nlosing `+Inf` bucket, but usually it's not that big of a deal.\n\nEach kernel map key must count values under that key's value to match\nthe behavior of prometheus. For example, `exp2` histogram key `3` should\ncount values for `(exp2(2), exp2(3)]` interval: `(4, 8]`. To put it simply:\nuse `log2l` or integer division and you'll be good.\n\n### Labels\n\nLabels transform kernel map keys into prometheus labels.\n\nMaps coming from the kernel are binary encoded. Values are always `u64`, but\nkeys can be either primitive types like `u64` or complex `struct`s.\n\nEach label can be transformed with decoders (see below) according to metric\nconfiguration. Generally the number of labels matches the number of elements\nin the kernel map key.\n\nFor map keys that are represented as `struct`s alignment rules apply:\n\n* `u64` must be aligned at 8 byte boundary\n* `u32` must be aligned at 4 byte boundary\n* `u16` must be aligned at 2 byte boundary\n\nThis means that the following struct:\n\n```c\nstruct disk_latency_key_t {\n    u32 dev;\n    u8 op;\n    u64 slot;\n};\n```\n\nIs represented as:\n\n* 4 byte `dev` integer\n* 1 byte `op` integer\n* 3 byte padding to align `slot`\n* 8 byte `slot` integer\n\nWhen decoding, either specify the padding explicitly with the key `padding` or\ninclude it in the label size:\n\n* 4 for `dev`\n* 4 for `op` (1 byte value + 3 byte padding)\n* 8 byte `slot`\n\n### Decoders\n\nDecoders take a byte slice input of requested length and transform it into\na byte slice representing a string. That byte slice can either be consumed\nby another decoder (for example `string` -> `regexp`) or or used as the final\nlabel value exporter to Prometheus.\n\nBelow are decoders we have built in.\n\n#### `cgroup`\n\nWith cgroup decoder you can turn the u64 from `bpf_get_current_cgroup_id`\ninto a human readable string representing cgroup path, like:\n\n* `/sys/fs/cgroup/system.slice/ssh.service`\n\n#### ifname\n\nIfname decoder takes a network interface index and converts it into its\nname like `eth0`.\n\n#### `dname`\n\nDname decoder read DNS qname from string in wire format, then decode\nit into '.' notation format. Could be used after `string` decoder.\nE.g.: `\\x07example\\03com\\x00` will become `example.com`. This decoder\ncould be used after `string` decode, like the following example:\n\n```yaml\n- name: qname\n  decoders:\n    - name: string\n    - name: dname\n```\n\n#### `errno`\n\nErrno decoder converts `errno` number into a string representation like\n`EPIPE`. It is normally paired with a `unit` decoder as the first step.\n\n### `hex`\n\nHex decoder turns bytes into their hex representation.\n\n#### `inet_ip`\n\nNetwork IP decoded can turn byte encoded IPv4 and IPv6 addresses\nthat kernel operates on into human readable form like `1.1.1.1`.\n\n#### `ksym`\n\nKSym decoder takes kernel address and converts that to the function name.\n\nIn your eBPF program you can use `PT_REGS_IP_CORE(ctx)` to get the address\nof the function you attached to as a `u64` variable. Note that for kprobes\nyou need to wrap it with `KPROBE_REGS_IP_FIX()` from `regs-ip.bpf.h`.\n\n#### `majorminor`\n\nWith major-minor decoder you can turn kernel's combined u32 view\nof major and minor device numbers into a device name in `/dev`.\n\n### `pci_vendor`\n\nWith `pci_vendor` decoder you can transform PCI vendor IDs like 0x8086\ninto human readable vendor names like `Intel Corporation`.\n\n### `pci_device`\n\nWith `pci_vendor` decoder you can transform PCI vendor IDs like 0x80861000\ninto human readable names like `82542 Gigabit Ethernet Controller (Fiber)`.\n\nNote that the you need to concatenate vendor and device id together for this.\n\n### `pci_class`\n\nWith `pci_class` decoder you can transform PCI class ID (the lowest byte) into\nthe class name like `Network controller`.\n\n### `pci_subclass`\n\nWith `pci_subclass` decoder you can transform PCI subclass (two lowest bytes)\ninto the subclass name like `Ethernet controller`.\n\n#### `regexp`\n\nRegexp decoder takes list of strings from `regexp` configuration key\nof the decoder and ties to use each as a pattern in `golang.org/pkg/regexp`:\n\n* https://golang.org/pkg/regexp\n\nIf decoder input matches any of the patterns, it is permitted.\nOtherwise, the whole metric label set is dropped.\n\nAn example to report metrics only for `systemd-journal` and `syslog-ng`:\n\n```yaml\n- name: command\n  decoders:\n    - name: string\n    - name: regexp\n      regexps:\n        - ^(kswapd).*$ # if sub-matches are present, the first one is used for the value\n        - ^systemd-journal$\n        - ^syslog-ng$\n```\n\n#### `static_map`\n\nStatic map decoder takes input and maps it to another value via `static_map`\nconfiguration key of the decoder. Values are expected as strings.\n\nAn example to match `1` to `read` and `2` to `write`:\n\n```yaml\n- name: operation\n  decoders:\n    - name:static_map\n      static_map:\n        1: read\n        2: write\n```\nUnknown keys will be replaced by `\"unknown:key_name\"` unless `allow_unknown: true`\nis specified in the decoder. For example, the above will decode `3` to `unknown:3`\nand the below example will decode `3` to `3`:\n\n```yaml\n- name: operation\n  decoders:\n    - name:static_map\n      allow_unknown: true\n      static_map:\n        1: read\n        2: write\n```\n\n\n#### `string`\n\nString decoder transforms possibly null terminated strings coming\nfrom the kernel into string usable for prometheus metrics.\n\n### `syscall`\n\nSyscall decoder transforms syscall numbers into syscall names.\n\nThe tables can be regenerated by `make syscalls`. See `scripts/mksyscalls`.\n\n#### `uint`\n\nUInt decoder transforms hex encoded `uint` values from the kernel\ninto regular base10 numbers. For example: `0xe -> 14`.\n\n## Per CPU map support\n\nPer CPU map reading is fully supported. If the last decoder for a percpu\nmap is called `cpu` (use 2 byte `uint` decoder), then `cpu` label is\nadded automatically. If it's not present, then the percpu counters are\naggregated into one global counter.\n\nThere is [percpu-softirq](examples/percpu-softirq.bpf.c) in examples.\nSee #226 for examples of different modes of operation for it.\n\n### Configuration file format\n\nConfiguration file is defined like this:\n\n```\n# Metrics attached to the program\n[ metrics: metrics ]\n# Kernel symbol addresses to define as kaddr_{symbol} from /proc/kallsyms (consider CONFIG_KALLSYMS_ALL)\nkaddrs:\n  [ - symbol_to_resolve ]\n```\n\n#### `metrics`\n\nSee [Metrics](#metrics) section for more details.\n\n```\ncounters:\n  [ - counter ]\nhistograms:\n  [ - histogram ]\n```\n\n#### `counter`\n\nSee [Counters](#counters) section for more details.\n\n```\nname: <prometheus counter name>\nhelp: <prometheus metric help>\nperf_event_array: <whether map is a BPF_MAP_TYPE_PERF_EVENT_ARRAY map: bool>\nflush_interval: <how often should we flush metrics from the perf_event_array: time.Duration>\nlabels:\n  [ - label ]\n```\n\nAn example of `perf_map` can be found [here](examples/oomkill.yaml).\n\n#### `histogram`\n\nSee [Histograms](#histograms) section for more details.\n\n```\nname: <prometheus histogram name>\nhelp: <prometheus metric help>\nbucket_type: <map bucket type: exp2 or linear>\nbucket_multiplier: <map bucket multiplier: float64>\nbucket_min: <min bucket value: int>\nbucket_max: <max bucket value: int>\nlabels:\n  [ - label ]\n```\n\n#### `label`\n\nSee [Labels](#labels) section for more details.\n\n```\nname: <prometheus label name>\nsize: <field size>\npadding: <padding size>\ndecoders:\n  [ - decoder ]\n```\n\n#### `decoder`\n\nSee [Decoders](#decoders) section for more details.\n\n```\nname: <decoder name>\n# ... decoder specific configuration\n```\n\n## Built-in metrics\n\n### `ebpf_exporter_enabled_configs`\n\nThis gauge reports a timeseries for every loaded config:\n\n```\n# HELP ebpf_exporter_enabled_configs The set of enabled configs\n# TYPE ebpf_exporter_enabled_configs gauge\nebpf_exporter_enabled_configs{name=\"cachestat\"} 1\n```\n\n### `ebpf_exporter_ebpf_program_info`\n\nThis gauge reports information available for every ebpf program:\n\n```\n# HELP ebpf_exporter_ebpf_programs Info about ebpf programs\n# TYPE ebpf_exporter_ebpf_programs gauge\nebpf_exporter_ebpf_program_info{config=\"cachestat\",id=\"545\",program=\"add_to_page_cache_lru\",tag=\"6c007da3187b5b32\"} 1\nebpf_exporter_ebpf_program_info{config=\"cachestat\",id=\"546\",program=\"mark_page_accessed\",tag=\"6c007da3187b5b32\"} 1\nebpf_exporter_ebpf_program_info{config=\"cachestat\",id=\"547\",program=\"folio_account_dirtied\",tag=\"6c007da3187b5b32\"} 1\nebpf_exporter_ebpf_program_info{config=\"cachestat\",id=\"548\",program=\"mark_buffer_dirty\",tag=\"6c007da3187b5b32\"} 1\n```\n\nHere `tag` can be used for tracing and performance analysis with two conditions:\n\n* `net.core.bpf_jit_kallsyms=1` sysctl is set\n* `--kallsyms=/proc/kallsyms` is passed to `perf record`\n\nNewer kernels allow `--kallsyms` to `perf top` as well,\nin the future it may not be required at all:\n\n* https://www.spinics.net/lists/linux-perf-users/msg07216.html\n\n### `ebpf_exporter_ebpf_program_attached`\n\nThis gauge reports whether individual programs were successfully attached.\n\n```\n# HELP ebpf_exporter_ebpf_program_attached Whether a program is attached\n# TYPE ebpf_exporter_ebpf_program_attached gauge\nebpf_exporter_ebpf_program_attached{id=\"247\"} 1\nebpf_exporter_ebpf_program_attached{id=\"248\"} 1\nebpf_exporter_ebpf_program_attached{id=\"249\"} 0\nebpf_exporter_ebpf_program_attached{id=\"250\"} 1\n```\n\nIt needs to be joined by `id` label with `ebpf_exporter_ebpf_program_info`\nto get more information about the program.\n\n### `ebpf_exporter_ebpf_program_run_time_seconds`\n\nThis counter reports how much time individual programs spent running.\n\n```\n# HELP ebpf_exporter_ebpf_program_run_time_seconds How long has the program been executing\n# TYPE ebpf_exporter_ebpf_program_run_time_seconds counter\nebpf_exporter_ebpf_program_run_time_seconds{id=\"247\"} 0\nebpf_exporter_ebpf_program_run_time_seconds{id=\"248\"} 0.001252621\nebpf_exporter_ebpf_program_run_time_seconds{id=\"249\"} 0\nebpf_exporter_ebpf_program_run_time_seconds{id=\"250\"} 3.6668e-05\n```\n\nIt requires `kernel.bpf_stats_enabled` sysctl to be enabled.\n\nIt needs to be joined by `id` label with `ebpf_exporter_ebpf_program_info`\nto get more information about the program.\n\n### `ebpf_exporter_ebpf_program_run_count_total`\n\nThis counter reports how many times individual programs ran.\n\n```\n# HELP ebpf_exporter_ebpf_program_run_count_total How many times has the program been executed\n# TYPE ebpf_exporter_ebpf_program_run_count_total counter\nebpf_exporter_ebpf_program_run_count_total{id=\"247\"} 0\nebpf_exporter_ebpf_program_run_count_total{id=\"248\"} 11336\nebpf_exporter_ebpf_program_run_count_total{id=\"249\"} 0\nebpf_exporter_ebpf_program_run_count_total{id=\"250\"} 69\n```\n\nIt requires `kernel.bpf_stats_enabled` sysctl to be enabled.\n\nIt needs to be joined by `id` label with `ebpf_exporter_ebpf_program_info`\nto get more information about the program.\n\n### `ebpf_exporter_decoder_errors_total`\n\nThis counter reports the number of times labels failed to be decoded by config.\n\n```\n# HELP ebpf_exporter_decoder_errors_total How many times has decoders encountered errors\n# TYPE ebpf_exporter_decoder_errors_total counter\nebpf_exporter_decoder_errors_total{config=\"kstack\"} 0\nebpf_exporter_decoder_errors_total{config=\"sock-trace\"} 4\n```\n\n## License\n\nMIT\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cgroup",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "decoder",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "exporter",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 3.05859375,
          "content": "module github.com/cloudflare/ebpf_exporter/v2\n\ngo 1.22\n\nrequire (\n\tgithub.com/alecthomas/kingpin/v2 v2.4.0\n\tgithub.com/aquasecurity/libbpfgo v0.7.0-libbpf-1.4\n\tgithub.com/coreos/go-systemd v0.0.0-20191104093116-d3cd4ed1dbcf\n\tgithub.com/elastic/go-perf v0.0.0-20191212140718-9c656876f595\n\tgithub.com/iovisor/gobpf v0.2.0\n\tgithub.com/jaypipes/pcidb v1.0.1\n\tgithub.com/mdlayher/sdnotify v1.0.0\n\tgithub.com/prometheus/client_golang v1.20.5\n\tgithub.com/prometheus/common v0.61.0\n\tgo.opentelemetry.io/contrib/exporters/autoexport v0.56.0\n\tgo.opentelemetry.io/otel v1.31.0\n\tgo.opentelemetry.io/otel/sdk v1.31.0\n\tgo.opentelemetry.io/otel/trace v1.31.0\n\tgolang.org/x/sys v0.28.0\n\tgopkg.in/yaml.v2 v2.4.0\n\tkernel.org/pub/linux/libs/security/libcap/cap v1.2.73\n)\n\nrequire (\n\tgithub.com/alecthomas/units v0.0.0-20231202071711-9a357b53e9c9 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.3.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2 v2.22.0 // indirect\n\tgithub.com/klauspost/compress v1.17.11 // indirect\n\tgithub.com/mitchellh/go-homedir v1.1.0 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/prometheus/client_model v0.6.1 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/xhit/go-str2duration/v2 v2.1.0 // indirect\n\tgo.opentelemetry.io/contrib/bridges/prometheus v0.56.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc v0.7.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlplog/otlploghttp v0.7.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.31.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp v1.31.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.31.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.31.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.31.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/prometheus v0.53.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/stdout/stdoutlog v0.7.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.31.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.31.0 // indirect\n\tgo.opentelemetry.io/otel/log v0.7.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.31.0 // indirect\n\tgo.opentelemetry.io/otel/sdk/log v0.7.0 // indirect\n\tgo.opentelemetry.io/otel/sdk/metric v1.31.0 // indirect\n\tgo.opentelemetry.io/proto/otlp v1.3.1 // indirect\n\tgolang.org/x/net v0.33.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20241015192408-796eee8c2d53 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241015192408-796eee8c2d53 // indirect\n\tgoogle.golang.org/grpc v1.69.2 // indirect\n\tgoogle.golang.org/protobuf v1.36.0 // indirect\n\tkernel.org/pub/linux/libs/security/libcap/psx v1.2.73 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 12.9228515625,
          "content": "github.com/alecthomas/kingpin/v2 v2.4.0 h1:f48lwail6p8zpO1bC4TxtqACaGqHYA22qkHjHpqDjYY=\ngithub.com/alecthomas/kingpin/v2 v2.4.0/go.mod h1:0gyi0zQnjuFk8xrkNKamJoyUo382HRL7ATRpFZCw6tE=\ngithub.com/alecthomas/units v0.0.0-20231202071711-9a357b53e9c9 h1:ez/4by2iGztzR4L0zgAOR8lTQK9VlyBVVd7G4omaOQs=\ngithub.com/alecthomas/units v0.0.0-20231202071711-9a357b53e9c9/go.mod h1:OMCwj8VM1Kc9e19TLln2VL61YJF0x1XFtfdL4JdbSyE=\ngithub.com/aquasecurity/libbpfgo v0.7.0-libbpf-1.4 h1:rQ94U12Xlz2tncE8Rxnw3vpp/9hgUIEu3/Lv0/XQM0Q=\ngithub.com/aquasecurity/libbpfgo v0.7.0-libbpf-1.4/go.mod h1:iI7QCIZ3kXG0MR+FHsDZck6cYs1y1HyZP3sMObBg0sk=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=\ngithub.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/coreos/go-systemd v0.0.0-20191104093116-d3cd4ed1dbcf h1:iW4rZ826su+pqaw19uhpSCzhj44qo35pNgKFGqzDKkU=\ngithub.com/coreos/go-systemd v0.0.0-20191104093116-d3cd4ed1dbcf/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/elastic/go-perf v0.0.0-20191212140718-9c656876f595 h1:q8n4QjcLa4q39Q3fqHRknTBXBtegjriHFrB42YKgXGI=\ngithub.com/elastic/go-perf v0.0.0-20191212140718-9c656876f595/go.mod h1:s09U1b4P1ZxnKx2OsqY7KlHdCesqZWIhyq0Gs/QC/Us=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.22.0 h1:asbCHRVmodnJTuQ3qamDwqVOIjwqUPTYmYuemVOx+Ys=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.22.0/go.mod h1:ggCgvZ2r7uOoQjOyu2Y1NhHmEPPzzuhWgcza5M1Ji1I=\ngithub.com/iovisor/gobpf v0.2.0 h1:34xkQxft+35GagXBk3n23eqhm0v7q0ejeVirb8sqEOQ=\ngithub.com/iovisor/gobpf v0.2.0/go.mod h1:WSY9Jj5RhdgC3ci1QaacvbFdQ8cbrEjrpiZbLHLt2s4=\ngithub.com/jaypipes/pcidb v1.0.1 h1:WB2zh27T3nwg8AE8ei81sNRb9yWBii3JGNJtT7K9Oic=\ngithub.com/jaypipes/pcidb v1.0.1/go.mod h1:6xYUz/yYEyOkIkUt2t2J2folIuZ4Yg6uByCGFXMCeE4=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/mdlayher/sdnotify v1.0.0 h1:Ma9XeLVN/l0qpyx1tNeMSeTjCPH6NtuD6/N9XdTlQ3c=\ngithub.com/mdlayher/sdnotify v1.0.0/go.mod h1:HQUmpM4XgYkhDLtd+Uad8ZFK1T9D5+pNxnXQjCeJlGE=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=\ngithub.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.61.0 h1:3gv/GThfX0cV2lpO7gkTUwZru38mxevy90Bj8YFSRQQ=\ngithub.com/prometheus/common v0.61.0/go.mod h1:zr29OCN/2BsJRaFwG8QOBr41D6kkchKbpeNH7pAjb/s=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/rogpeppe/go-internal v1.13.1 h1:KvO1DLK/DRN07sQ1LQKScxyZJuNnedQ5/wKSR38lUII=\ngithub.com/rogpeppe/go-internal v1.13.1/go.mod h1:uMEvuHeurkdAXX61udpOXGD/AzZDWNMNyH2VO9fmH0o=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/xhit/go-str2duration/v2 v2.1.0 h1:lxklc02Drh6ynqX+DdPyp5pCKLUQpRT8bp8Ydu2Bstc=\ngithub.com/xhit/go-str2duration/v2 v2.1.0/go.mod h1:ohY8p+0f07DiV6Em5LKB0s2YpLtXVyJfNt1+BlmyAsU=\ngo.opentelemetry.io/contrib/bridges/prometheus v0.56.0 h1:ax2MzrA26l3LTS2NRnagkbeKDrW4SM8VcAubasnpYqs=\ngo.opentelemetry.io/contrib/bridges/prometheus v0.56.0/go.mod h1:+aiuB6jaKqSb5xaY7sOpGZEMIgjL0sxXfIW1PQmp5d0=\ngo.opentelemetry.io/contrib/exporters/autoexport v0.56.0 h1:2k73WaZ+jHYcK3lLAC3CJ8viT/LqkIcDDUWpbbYbZK0=\ngo.opentelemetry.io/contrib/exporters/autoexport v0.56.0/go.mod h1:RAHAFqVEQ+iKEAPgm6z+Gnsi0Fd5MDuqnD5T3Ms6Kg4=\ngo.opentelemetry.io/otel v1.31.0 h1:NsJcKPIW0D0H3NgzPDHmo0WW6SptzPdqg/L1zsIm2hY=\ngo.opentelemetry.io/otel v1.31.0/go.mod h1:O0C14Yl9FgkjqcCZAsE053C13OaddMYr/hz6clDkEJE=\ngo.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc v0.7.0 h1:iNba3cIZTDPB2+IAbVY/3TUN+pCCLrNYo2GaGtsKBak=\ngo.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc v0.7.0/go.mod h1:l5BDPiZ9FbeejzWTAX6BowMzQOM/GeaUQ6lr3sOcSkc=\ngo.opentelemetry.io/otel/exporters/otlp/otlplog/otlploghttp v0.7.0 h1:mMOmtYie9Fx6TSVzw4W+NTpvoaS1JWWga37oI1a/4qQ=\ngo.opentelemetry.io/otel/exporters/otlp/otlplog/otlploghttp v0.7.0/go.mod h1:yy7nDsMMBUkD+jeekJ36ur5f3jJIrmCwUrY67VFhNpA=\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.31.0 h1:FZ6ei8GFW7kyPYdxJaV2rgI6M+4tvZzhYsQ2wgyVC08=\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.31.0/go.mod h1:MdEu/mC6j3D+tTEfvI15b5Ci2Fn7NneJ71YMoiS3tpI=\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp v1.31.0 h1:ZsXq73BERAiNuuFXYqP4MR5hBrjXfMGSO+Cx7qoOZiM=\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp v1.31.0/go.mod h1:hg1zaDMpyZJuUzjFxFsRYBoccE86tM9Uf4IqNMUxvrY=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.31.0 h1:K0XaT3DwHAcV4nKLzcQvwAgSyisUghWoY20I7huthMk=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.31.0/go.mod h1:B5Ki776z/MBnVha1Nzwp5arlzBbE3+1jk+pGmaP5HME=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.31.0 h1:FFeLy03iVTXP6ffeN2iXrxfGsZGCjVx0/4KlizjyBwU=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.31.0/go.mod h1:TMu73/k1CP8nBUpDLc71Wj/Kf7ZS9FK5b53VapRsP9o=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.31.0 h1:lUsI2TYsQw2r1IASwoROaCnjdj2cvC2+Jbxvk6nHnWU=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.31.0/go.mod h1:2HpZxxQurfGxJlJDblybejHB6RX6pmExPNe517hREw4=\ngo.opentelemetry.io/otel/exporters/prometheus v0.53.0 h1:QXobPHrwiGLM4ufrY3EOmDPJpo2P90UuFau4CDPJA/I=\ngo.opentelemetry.io/otel/exporters/prometheus v0.53.0/go.mod h1:WOAXGr3D00CfzmFxtTV1eR0GpoHuPEu+HJT8UWW2SIU=\ngo.opentelemetry.io/otel/exporters/stdout/stdoutlog v0.7.0 h1:TwmL3O3fRR80m8EshBrd8YydEZMcUCsZXzOUlnFohwM=\ngo.opentelemetry.io/otel/exporters/stdout/stdoutlog v0.7.0/go.mod h1:tH98dDv5KPmPThswbXA0fr0Lwfs+OhK8HgaCo7PjRrk=\ngo.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.31.0 h1:HZgBIps9wH0RDrwjrmNa3DVbNRW60HEhdzqZFyAp3fI=\ngo.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.31.0/go.mod h1:RDRhvt6TDG0eIXmonAx5bd9IcwpqCkziwkOClzWKwAQ=\ngo.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.31.0 h1:UGZ1QwZWY67Z6BmckTU+9Rxn04m2bD3gD6Mk0OIOCPk=\ngo.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.31.0/go.mod h1:fcwWuDuaObkkChiDlhEpSq9+X1C0omv+s5mBtToAQ64=\ngo.opentelemetry.io/otel/log v0.7.0 h1:d1abJc0b1QQZADKvfe9JqqrfmPYQCz2tUSO+0XZmuV4=\ngo.opentelemetry.io/otel/log v0.7.0/go.mod h1:2jf2z7uVfnzDNknKTO9G+ahcOAyWcp1fJmk/wJjULRo=\ngo.opentelemetry.io/otel/metric v1.31.0 h1:FSErL0ATQAmYHUIzSezZibnyVlft1ybhy4ozRPcF2fE=\ngo.opentelemetry.io/otel/metric v1.31.0/go.mod h1:C3dEloVbLuYoX41KpmAhOqNriGbA+qqH6PQ5E5mUfnY=\ngo.opentelemetry.io/otel/sdk v1.31.0 h1:xLY3abVHYZ5HSfOg3l2E5LUj2Cwva5Y7yGxnSW9H5Gk=\ngo.opentelemetry.io/otel/sdk v1.31.0/go.mod h1:TfRbMdhvxIIr/B2N2LQW2S5v9m3gOQ/08KsbbO5BPT0=\ngo.opentelemetry.io/otel/sdk/log v0.7.0 h1:dXkeI2S0MLc5g0/AwxTZv6EUEjctiH8aG14Am56NTmQ=\ngo.opentelemetry.io/otel/sdk/log v0.7.0/go.mod h1:oIRXpW+WD6M8BuGj5rtS0aRu/86cbDV/dAfNaZBIjYM=\ngo.opentelemetry.io/otel/sdk/metric v1.31.0 h1:i9hxxLJF/9kkvfHppyLL55aW7iIJz4JjxTeYusH7zMc=\ngo.opentelemetry.io/otel/sdk/metric v1.31.0/go.mod h1:CRInTMVvNhUKgSAMbKyTMxqOBC0zgyxzW55lZzX43Y8=\ngo.opentelemetry.io/otel/trace v1.31.0 h1:ffjsj1aRouKewfr85U2aGagJ46+MvodynlQ1HYdmJys=\ngo.opentelemetry.io/otel/trace v1.31.0/go.mod h1:TXZkRk7SM2ZQLtR6eoAWQFIHPvzQ06FJAsO1tJg480A=\ngo.opentelemetry.io/proto/otlp v1.3.1 h1:TrMUixzpM0yuc/znrFTP9MMRh8trP93mkCiDVeXrui0=\ngo.opentelemetry.io/proto/otlp v1.3.1/go.mod h1:0X1WI4de4ZsLrrJNLAQbFeLCm3T7yBkR0XqQ7niQU+8=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241015192408-796eee8c2d53 h1:fVoAXEKA4+yufmbdVYv+SE73+cPZbbbe8paLsHfkK+U=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241015192408-796eee8c2d53/go.mod h1:riSXTwQ4+nqmPGtobMFyW5FqVAmIs0St6VPp4Ug7CE4=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241015192408-796eee8c2d53 h1:X58yt85/IXCx0Y3ZwN6sEIKZzQtDEYaBWrDvErdXrRE=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241015192408-796eee8c2d53/go.mod h1:GX3210XPVPUjJbTUbvwI8f2IpZDMZuPJWDzDuebbviI=\ngoogle.golang.org/grpc v1.69.2 h1:U3S9QEtbXC0bYNvRtcoklF3xGtLViumSYxWykJS+7AU=\ngoogle.golang.org/grpc v1.69.2/go.mod h1:vyjdE6jLBI76dgpDojsFGNaHlxdjXN9ghpnd2o7JGZ4=\ngoogle.golang.org/protobuf v1.36.0 h1:mjIs9gYtt56AzC4ZaffQuh88TZurBGhIJMBZGSxNerQ=\ngoogle.golang.org/protobuf v1.36.0/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nkernel.org/pub/linux/libs/security/libcap/cap v1.2.73 h1:Th2b8jljYqkyZKS3aD3N9VpYsQpHuXLgea+SZUIfODA=\nkernel.org/pub/linux/libs/security/libcap/cap v1.2.73/go.mod h1:hbeKwKcboEsxARYmcy/AdPVN11wmT/Wnpgv4k4ftyqY=\nkernel.org/pub/linux/libs/security/libcap/psx v1.2.73 h1:SEAEUiPVylTD4vqqi+vtGkSnXeP2FcRO3FoZB1MklMw=\nkernel.org/pub/linux/libs/security/libcap/psx v1.2.73/go.mod h1:+l6Ee2F59XiJ2I6WR5ObpC1utCQJZ/VLsEbQCD8RG24=\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "kallsyms",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tracing",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}