{
  "metadata": {
    "timestamp": 1736566953163,
    "page": 533,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "moncho/dry",
      "stars": 3041,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.53125,
          "content": "###Go###\n\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n\n\n###OSX###\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must ends with two \\r.\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# Profiling files\n*.pprof\n\n\nbinaries\ncross\ndry\nbla\nGodeps/_workspace/\n.vscode\n.idea\n.wercker\n.realize\n"
        },
        {
          "name": ".godir",
          "type": "blob",
          "size": 0.021484375,
          "content": "github.com/moncho/dry\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.09375,
          "content": "language: go\nsudo: false\ngo:\n  - 1.20\nenv:\n  - GO111MODULE=on\nscript:\n  - go test\n  - go build \n"
        },
        {
          "name": "APPVERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "0.11.2"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 0.1884765625,
          "content": "### Build instructions\n\nIf you just run what you compile, use the source.\n\nClone the repo:\n```\n$ git clone https://github.com/moncho/dry.git\n$ cd dry\n```\n\nBuild **dry**:\n```\n$ make install\n```\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1181640625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "DEBUG.md",
          "type": "blob",
          "size": 0.3583984375,
          "content": "### How to debug\n\nDebugging can be done using [godebug](https://github.com/mailgun/godebug).\n\nInstall it, then insert a breakpoint anywhere you want:\n```\n_ = \"breakpoint\"\n```\nAnd run the debugger:\n```\ngodebug run -instrument github.com/moncho/dry,github.com/moncho/dry/app,github.com/moncho/dry/docker,github.com/moncho/dry/ui,github.com/moncho/dry/appui main.go\n```\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4052734375,
          "content": "# build stage\nFROM alpine:latest AS build-phase\n\nLABEL VERSION 0.11.2\n\nRUN set -x && \\\n    apk update && \\\n    apk upgrade && \\\n    apk add curl file && \\\n    curl https://moncho.github.io/dry/dryup.sh | sh && \\\n    apk del curl file && \\\n    rm -rf /var/cache/apk/* && \\\n    chmod 755 /usr/local/bin/dry\n\n# final stage\nFROM alpine\nWORKDIR /app\nCOPY --from=build-phase /usr/local/bin/dry /app\n\nCMD sleep 1;/app/dry\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 Moncho\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.9375,
          "content": "# Set an output prefix, which is the local directory if not specified\nPREFIX?=$(shell pwd)\n\nGOFILES_NOVENDOR := $(shell find . -name vendor -prune -o -type f -name '*.go' -not -name '*.pb.go' -print)\n# Populate version variables\n# Add to compile time flags\nPKG := github.com/moncho/dry\nVERSION := $(shell cat APPVERSION)\nGITCOMMIT := $(shell git rev-parse --short HEAD)\nGITUNTRACKEDCHANGES := $(shell git status --porcelain --untracked-files=no)\nOS := $(shell uname)\nifneq ($(GITUNTRACKEDCHANGES),)\n\tGITCOMMIT := $(GITCOMMIT)-dirty\nendif\nCTIMEVAR=-X $(PKG)/version.GITCOMMIT=$(GITCOMMIT) -X $(PKG)/version.VERSION=$(VERSION)\nGO_LDFLAGS=-ldflags \"-w $(CTIMEVAR)\"\nGO_LDFLAGS_STATIC=-ldflags \"-w $(CTIMEVAR) -extldflags -static\"\nGOOSES = darwin freebsd linux windows\nGOARCHS = amd64 386 arm arm64 \nUNSUPPORTED = darwin_arm darwin_386 windows_arm windows_arm64 windows_386 freebsd_arm64 \nprint-%: ; @echo $*=$($*)\n\nrun: ## Runs dry\n\tgo run ./main.go\n\nbuild: ## Builds dry\n\tgo build .\n\ninstall: ## Installs dry\n\tgo install $(PKG)\n\nlint: ## Runs linters\n\t@echo \">> CODE QUALITY\"\n\n\t@echo -n \"     REVIVE    \"\n\t@which revive > /dev/null; if [ $$? -ne 0 ]; then \\\n\t\t$(GO) get -u github.com/mgechev/revive; \\\n\tfi\n\t@revive -formatter friendly -exclude vendor/... ./...\n\t@printf '%s\\n' '$(OK)'\n\n\t@echo -n \"     FMT       \"\n\t@$(foreach gofile, $(GOFILES_NOVENDOR),\\\n\t\t\tout=$$(gofmt -s -l -d -e $(gofile) | tee /dev/stderr); if [ -n \"$$out\" ]; then exit 1; fi;)\n\t@printf '%s\\n' '$(OK)'\n\n\t@echo -n \"     SPELL     \"\n\t@which misspell > /dev/null; if [ $$? -ne 0 ]; then \\\n\t\t$(GO) get -u github.com/client9/misspell/cmd/misspell; \\\n\tfi\n\t@$(foreach gofile, $(GOFILES_NOVENDOR),\\\n\t\t\tmisspell --error $(gofile) || exit 1;)\n\t@printf '%s\\n' '$(OK)'\n\nfmt: ## Runs fmt\n\t@gofmt -s -l -w $(GOFILES_NOVENDOR)\n\ntest: ## Run tests\n\tgo test -v -cover $(shell go list ./... | grep -v /vendor/ | grep -v mock)\n\nbenchmark: ## Run benchmarks\n\tgo test -bench $(shell go list ./... | grep -v /vendor/ | grep -v mock) \n\ndefine buildpretty\n$(if $(and $(filter-out $(UNSUPPORTED),$(1)_$(2))), \\\n\tmkdir -p ${PREFIX}/cross/$(1)/$(2);\n\tGOOS=$(1) GOARCH=$(2) CGO_ENABLED=0 go build -o ${PREFIX}/cross/$(1)/$(2)/dry -a ${GO_LDFLAGS} .;\n)\nendef\n\ncross: *.go VERSION ## Cross compiles dry\n\t$(foreach GOARCH,$(GOARCHS),$(foreach GOOS,$(GOOSES),$(call buildpretty,$(GOOS),$(GOARCH))))\n\ndefine buildrelease\n$(if $(and $(filter-out $(UNSUPPORTED),$(1)_$(2))), \\\n\tmkdir -p ${PREFIX}/cross/$(1)/$(2);\n\tGOOS=$(1) GOARCH=$(2) CGO_ENABLED=0 go build -o ${PREFIX}/cross/dry-$(1)-$(2) -a ${GO_LDFLAGS} .;\n)\nendef\n\nrelease: *.go VERSION ## Prepares a dry release\n\t$(foreach GOARCH,$(GOARCHS),$(foreach GOOS,$(GOOSES),$(call buildrelease,$(GOOS),$(GOARCH))))\n\nclean:\n\trm -rf ${PREFIX}/cross\n\n.PHONY: help vendor\n\n# Magic as explained here: http://marmelab.com/blog/2016/02/29/auto-documented-makefile.html\n\nhelp: ## Shows help\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.5546875,
          "content": "# dry\n\n[![MIT License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/moncho/dryblob/master/LICENSE)\n![Build Status](https://github.com/moncho/dry/actions/workflows/go.yml/badge.svg)\n![Docker Build](https://github.com/moncho/dry/actions/workflows/docker.yml/badge.svg)\n[![Go Report Card](https://goreportcard.com/badge/github.com/moncho/dry)](https://goreportcard.com/report/github.com/moncho/dry)\n[![GoDoc](https://godoc.org/github.com/moncho/dry?status.svg)](https://godoc.org/github.com/moncho/dry)\n[![Github All Releases](https://img.shields.io/github/downloads/moncho/dry/total.svg)]()\n[![Release](https://img.shields.io/github/release/moncho/dry.svg?style=flat-square)](https://github.com/moncho/dry/releases/latest)\n[![dry](https://snapcraft.io/dry/badge.svg)](https://snapcraft.io/dry)\n\n**Dry** is a terminal application to manage **Docker** and **Docker Swarm**.\n\nIt shows information about Containers, Images and Networks, and, if running a **Swarm** cluster, it shows information about Nodes, Service, Stacks and the rest of **Swarm** constructs. It can be used with both local or remote **Docker** daemons.\n\nBesides showing information, it can be used to manage Docker. Most of the commands that the official **Docker CLI** provides, are available in **dry** with the same behaviour. A list of available commands and their keybindings can be found in **dry**'s help screen or in this README.\n\nLastly, it can also be used as a monitoring tool for **Docker** containers.\n\n**Dry** is installed as a single binary and does not require external libraries.\n\nThe demo below shows a **dry** session.\n\n[![asciicast](https://asciinema.org/a/35825.png)](https://asciinema.org/a/35825?autoplay=1&speed=1.5)\n\n## **dry** keybinds\n\n### Global\n\nKeybinding           | Description\n---------------------|---------------------------------------\n<kbd>%</kbd>         | filter list\n<kbd>F1</kbd>        | sort list\n<kbd>F5</kbd>        | refresh list\n<kbd>F7</kbd>        | toggle showing Docker daemon information\n<kbd>F8</kbd>        | show docker disk usage\n<kbd>F9</kbd>        | show last 10 docker events\n<kbd>F10</kbd>       | show docker info\n<kbd>1</kbd>         | show container list\n<kbd>2</kbd>         | show image list\n<kbd>3</kbd>         | show network list\n<kbd>4</kbd>         | show volumes list\n<kbd>5</kbd>         | show node list (on Swarm mode)\n<kbd>6</kbd>         | show service list (on Swarm mode)\n<kbd>7</kbd>         | show stacks list (on Swarm mode)\n<kbd>ArrowUp</kbd>   | move the cursor one line up\n<kbd>ArrowDown</kbd> | move the cursor one line down\n<kbd>g</kbd>         | move the cursor to the top\n<kbd>G</kbd>         | move the cursor to the bottom\n<kbd>q</kbd>         | quit dry\n\n\n#### Container commands\n\nKeybinding           | Description\n---------------------|---------------------------------------\n<kbd>Enter</kbd>     | show container command menu\n<kbd>F2</kbd>        | toggle on/off showing stopped containers\n<kbd>i</kbd>         | inspect\n<kbd>l</kbd>         | container logs\n<kbd>e</kbd>         | remove\n<kbd>s</kbd>         | stats\n<kbd>Ctrl+e</kbd>    | remove all stopped containers\n<kbd>Ctrl+k</kbd>    | kill\n<kbd>Ctrl+l</kbd>    | container logs with Docker timestamps\n<kbd>Ctrl+r</kbd>    | start/restart\n<kbd>Ctrl+t</kbd>    | stop\n\n\n#### Image commands\n\nKeybinding           | Description\n---------------------|---------------------------------------\n<kbd>i</kbd>         | history\n<kbd>r</kbd>         | run command in new container\n<kbd>Ctrl+d</kbd>    | remove dangling images\n<kbd>Ctrl+e</kbd>    | remove image\n<kbd>Ctrl+f</kbd>    | remove image (force)\n<kbd>Ctrl+u</kbd>    | remove unused images\n<kbd>Enter</kbd>     | inspect\n\n#### Network commands\n\nKeybinding           | Description\n---------------------|---------------------------------------\n<kbd>Ctrl+e</kbd>    | remove network\n<kbd>Enter</kbd>     | inspect\n\n#### Volume commands\n\nKeybinding           | Description\n---------------------|---------------------------------------\n<kbd>Ctrl+a</kbd>    | remove all volumes\n<kbd>Ctrl+e</kbd>    | remove volume\n<kbd>Ctrl+f</kbd>    | remove volume (force)\n<kbd>Ctrl+u</kbd>    | remove unused volumes\n<kbd>Enter</kbd>     | inspect\n\n#### Service commands\n\nKeybinding           | Description\n---------------------|---------------------------------------\n<kbd>i</kbd>         | inspect service\n<kbd>l</kbd>         | service logs\n<kbd>Ctrl+l</kbd>    | service logs with Docker timestamps\n<kbd>Ctrl+r</kbd>    | remove service\n<kbd>Ctrl+s</kbd>    | scale service\n<kbd>Ctrl+u</kbd>    | update service\n<kbd>Enter</kbd>     | show service tasks\n\n#### Moving around buffers\n\nKeybinding           | Description\n---------------------|---------------------------------------\n<kbd>ArrowUp</kbd>   | move the cursor one line up\n<kbd>ArrowDown</kbd> | move the cursor one line down\n<kbd>g</kbd>         | move the cursor to the beginning of the buffer\n<kbd>G</kbd>         | move the cursor to the end of the buffer\n<kbd>n</kbd>         | after search, move forwards to the next search hit\n<kbd>N</kbd>         | after search, move backwards to the previous search hit\n<kbd>s</kbd>         | search\n<kbd>pg up</kbd>     | move the cursor \"screen size\" lines up\n<kbd>pg down</kbd>   | move the cursor \"screen size\" lines down\n\n## Installation\n\nThe easiest way to install the latest binaries for Linux and Mac is to run this in a shell:\n\n```sh\ncurl -sSf https://moncho.github.io/dry/dryup.sh | sudo sh\nsudo chmod 755 /usr/local/bin/dry\n```\n\n### Binaries\n\nIf you dont like to **curl | sh**, binaries are provided.\n\n* **darwin** [386](https://github.com/moncho/dry/releases/download/v0.11.2/dry-darwin-386) / [amd64](https://github.com/moncho/dry/releases/download/v0.11.2/dry-darwin-amd64) / [arm64](https://github.com/moncho/dry/releases/download/v0.11.2/dry-darwin-arm64)\n* **freebsd** [386](https://github.com/moncho/dry/releases/download/v0.11.2/dry-freebsd-386) / [amd64](https://github.com/moncho/dry/releases/download/v0.11.2/dry-freebsd-amd64)\n* **linux** [386](https://github.com/moncho/dry/releases/download/v0.11.2/dry-linux-386) / [amd64](https://github.com/moncho/dry/releases/download/v0.11.2/dry-linux-amd64)\n* **windows** [386](https://github.com/moncho/dry/releases/download/v0.11.2/dry-windows-386) / [amd64](https://github.com/moncho/dry/releases/download/v0.11.2/dry-windows-amd64)\n\n#### Mac OS X / Homebrew\n\nIf you're on OS X and want to use homebrew:\n\n```\nbrew tap moncho/dry\nbrew install dry\n```\n\n#### Docker\n\n```docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -e DOCKER_HOST=$DOCKER_HOST moncho/dry```\n\n#### Arch Linux\n\n```yaourt -S dry-bin```\n\n### Usage\n\nOpen a console, type ```dry```. It will try to connect to:\n\n* A Docker host given as a parameter (**-H**).\n* if none given, a Docker host defined in the **$DOCKER_HOST** environment variable.\n* if not defined, to **unix:///var/run/docker.sock**.\n\nIf no connection with a Docker host succeeds, **dry** will exit.\n\n```dry -p``` launches dry with [pprof](https://golang.org/pkg/net/http/pprof/) package active.\n\n### Contributing\n\nAll contributions are welcome.\n\n* Fork the project.\n* Make changes on a topic branch.\n* Pull request.\n\n## Copyright and license\n\nCode released under the MIT license. See\n[LICENSE](https://github.com/moncho/dry/blob/master/LICENSE) for the full license text.\n\n## Credits\n\nBuilt on top of:\n\n* [tcell](https://github.com/gdamore/tcell)\n* [termui](https://github.com/gizak/termui)\n* [Docker](https://github.com/docker/docker)\n* [Docker CLI](github.com/docker/cli/cli)\n\n## Alternatives\nSee [Awesome Docker list](https://github.com/veggiemonk/awesome-docker/blob/master/README.md#terminal) for similar tools to work with Docker.\n"
        },
        {
          "name": "RELEASE_NOTES.md",
          "type": "blob",
          "size": 1.8857421875,
          "content": "## v0.6-alpha.1\n\nThis version of **dry** is the first one built using Go 1.7, which has resulted in a smaller binary size and maybe in some performance improvements (no measure has been done on this).\n\nThe capability to use [termui](https://github.com/gizak/termui) widgets has been added. So far this has been used to add the container menu and to improve the stats screen.\n\n#### Improvements\n\n* Pressing [Enter] on a container now shows a menu with the all the commands that can be executed on a container. Exisiting keybinds still work, but this change should make it easier to explore what can be done with **dry** on a container. #18\n* Improve stats screen to show detailed container information and stats in a nicer way.\n* Remove dangling images with [Ctrl+D]. #19\n* Container inspect now binded to [I], was on [Enter].\n\n#### Notices\n\n**dry** has been built using Go 1.7 (1.7rc5, the latest beta version available at the time of this writing).\n\nAs stated in the 1.7 [release notes](https://tip.golang.org/doc/go1.7#compiler), changes in the compiler toolchain and standard libraries should result in smaller binaries.\n\nThe following table shows a comparison of **dry** binary sizes (in bytes) using 1.6.3 and 1.7rc5.\n```\nos-cpu                1.6.3     1.7       Binary size decrease\ndry-darwin-amd64      9666128   7321376   -24,26%\ndry-freebsd-amd64     9670081   7350169   -23,99%\ndry-linux-amd64       9666625   7333489   -24,14%\ndry-windows-amd64     9664000   7298048   -24,48%\ndry-darwin-386        7629836   6464384   -15,27%\ndry-freebsd-386       7603305   6457457   -15,07%\ndry-linux-386         7652591   6473134   -15,41%\ndry-windows-386       7690752   6481920   -15,72%\ndry-freebsd-arm       7621922   6647331   -12,79%\ndry-linux-arm         7613761   6617809   -13,08%\n```\n\nSo, changing to the **Go 1.7** has resulted in, on average, a 24% decrease in binary sizes for x86-64 architectures. Good job, Go team!\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "appui",
          "type": "tree",
          "content": null
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dryup.sh",
          "type": "blob",
          "size": 8.3544921875,
          "content": "#!/bin/sh\n\nset -u # Undefined variables are errors\n\nmain() {\n    assert_cmds\n    set_globals\n    handle_command_line_args \"$@\"\n}\n\nset_globals() {\n    #Environment sanity checks\n    assert_nz \"$HOME\" \"\\$HOME is undefined\"\n    assert_nz \"$0\" \"\\$0 is undefined\"\n\n    #script version\n    version=0.0.1\n\n    #location of the distribution server\n    dist_server=\"https://github.com/moncho/dry/releases/download\"\n    version_file_url=\"https://raw.githubusercontent.com/moncho/dry/master/APPVERSION\"\n\n    #Install prefix\n    default_prefix=\"${DRY_PREFIX-/usr/local/bin}\"\n\n    #Downloads go here\n    dl_dir=\"/tmp\"\n\n    flag_verbose=false\n\n    if [ -n \"${VERBOSE-}\" ]; then\n\t     flag_verbose=true\n    fi\n}\n\nhandle_command_line_args() {\n  local _prefix=\"$default_prefix\"\n  local _help=false\n\n  for arg in \"$@\"; do\n  \tcase \"$arg\" in\n  \t    --help )\n  \t\t_help=true\n  \t\t;;\n\n  \t    --verbose)\n  \t\t# verbose is a global flag\n  \t\tflag_verbose=true\n  \t\t;;\n\n  \t    --version)\n  \t\techo \"dry.sh $version\"\n  \t\texit 0\n  \t\t;;\n\n  \tesac\n\n  \tif is_value_arg \"$arg\" \"prefix\"; then\n      _prefix=\"$(get_value_arg \"$arg\")\"\n    fi\n  done\n  if [ \"$_help\" = true ]; then\n    print_help\n    exit 0\n  fi\n\n  download_install_dry \"$_prefix\"\n\n}\n\nis_value_arg() {\n    local _arg=\"$1\"\n    local _name=\"$2\"\n\n    echo \"$arg\" | grep -q -- \"--$_name=\"\n    return $?\n}\n\nget_value_arg() {\n    local _arg=\"$1\"\n\n    echo \"$_arg\" | cut -f2 -d=\n}\n\n\n# Returns 0 on success, 1 on error\ndownload_install_dry() {\n    local _prefix=\"$1\"\n    local _errors=0\n\n    # Dry version\n    get_latest_dry_version\n    dry_version=\"$RETVAL\"\n    #dry_version=\"v0.3-beta.1\"\n    assert_nz \"$dry_version\" \"dry_version from repository\"\n\n    determine_binary || return 1\n\n    local _dry_binary=\"$RETVAL\"\n    local _dry_binary_file=\"\"\n\n    determine_remote_dry \"$_dry_binary\" || return 1\n\n    local _remote_dry_binary=\"$RETVAL\"\n    assert_nz \"$_remote_dry_binary\" \"remote dry binary\"\n    verbose_say \"remote dry binary location: $_remote_dry_binary\"\n\n    # Download and install dry\n    say \"downloading dry binary\"\n\n    download_and_check \"$_remote_dry_binary\" false\n\n    if [ $? != 0 ]; then\n      say \"failed to download binary\"\n      _errors=1\n    else\n      local _dry_binary_file=\"$RETVAL\"\n      assert_nz \"$_dry_binary_file\" \"dry_binary_file\"\n      install_dry \"$_dry_binary_file\" \"$_prefix\"\n      if [ $? != 0 ]; then\n        say_err \"failed to install dry\"\n        _errors=1\n      fi\n    fi\n\n    if [ \"$_errors\" -ne 0 ]; then\n      say_err \"there were errors during the installation\"\n      if [ -f \"$_dry_binary_file\" ]; then\n        run rm \"$_dry_binary_file\"\n      fi\n      return 1\n    fi\n    say \"dry binary was copied to $_prefix, now you should 'sudo chmod 755 $_prefix/dry'\"\n}\n\ninstall_dry() {\n    local _dry_file=\"$1\"\n    local _prefix=\"$2\"\n\n    say \"Moving dry binary to its destination\"\n\n    verbose_say \"moving $_dry_file to $_prefix/dry\"\n    run mv \"$_dry_file\" \"$_prefix/dry\"\n    if [ $? != 0 ]; then\n      say \"Failed to move binary to $_prefix/dry\"\n      return 1\n    fi\n    verbose_say \"moved dry to its destination\"\n    return 0\n}\n\ndetermine_remote_dry() {\n  local _binary=$1\n  verbose_say \"figuring out remote binary \"\n\n  local _remote_dry=\"$dist_server/$dry_version/$_binary\"\n  verbose_say \"binary is $_remote_dry\"\n\n  RETVAL=\"$_remote_dry\"\n}\n\ndetermine_binary() {\n\n    verbose_say \"figuring out dry binary \"\n    get_architecture || return 1\n    local _arch=\"$RETVAL\"\n    assert_nz \"$_arch\" \"arch\"\n\n    local _bin=\"dry-$_arch\"\n    verbose_say \"binary is $_bin\"\n\n    RETVAL=\"$_bin\"\n}\n\nget_architecture() {\n\n    verbose_say \"detecting architecture\"\n\n    local _ostype=\"$(uname -s)\"\n    local _cputype=\"$(uname -m)\"\n    local _isarm\n\n    verbose_say \"uname -s reports: $_ostype\"\n    verbose_say \"uname -m reports: $_cputype\"\n\n    if [ \"$_ostype\" = Darwin -a \"$_cputype\" = i386 ]; then\n\t# Darwin `uname -s` lies\n\tif sysctl hw.optional.x86_64 | grep -q ': 1'; then\n\t    local _cputype=x86_64\n\tfi\n    fi\n\n    case \"$_ostype\" in\n\n\tLinux)\n\t    local _ostype=linux\n\t    ;;\n\n\tFreeBSD)\n\t    local _ostype=freebsd\n\t    ;;\n\n\tDarwin)\n\t    local _ostype=darwin\n\t    ;;\n\n\tMINGW* | MSYS*)\n      local _ostype=windows\n      ;;\n\n\t*)\n\t    err \"unrecognized OS type: $_ostype\"\n\t    ;;\n\n    esac\n\n    case \"$_cputype\" in\n\n\ti386 | i486 | i686 | i786 | x86)\n            local _cputype=386\n            ;;\n\n\tx86_64 | x86-64 | x64 | amd64)\n            local _cputype=amd64\n            ;;\n    aarch64 | arm64)\n            local _cputype=arm64\n            ;;\n    arm*)\n            local _cputype=arm\n            ;;\n\t*)\n               err \"unknown CPU type: $CFG_CPUTYPE\"\n\n    esac\n\n    # Detect 64-bit linux with 32-bit userland\n    if [ $_ostype = unknown-linux-gnu -a $_cputype = x86_64 ]; then\n\t# $SHELL does not exist in standard 'sh', so probably only exists\n\t# if configure is running in an interactive bash shell. /usr/bin/env\n\t# exists *everywhere*.\n\tlocal _bin_to_probe=\"${SHELL-bogus_shell}\"\n\tif [ ! -e \"$_bin_to_probe\" -a -e \"/usr/bin/env\" ]; then\n\t    _bin_to_probe=\"/usr/bin/env\"\n\tfi\n\tif [ -e \"$_bin_to_probe\" ]; then\n\t    file -L \"$_bin_to_probe\" | grep -q \"x86[_-]64\"\n\t    if [ $? != 0 ]; then\n\t\tlocal _cputype=386\n\t    fi\n\tfi\n    fi\n\n    local _arch=\"$_ostype-$_cputype\"\n    verbose_say \"architecture is $_arch\"\n\n    RETVAL=\"$_arch\"\n}\n\nget_latest_dry_version() {\n  verbose_say \"getting latest dry version from $version_file_url\"\n  RETVAL=\"v$(curl $version_file_url)\"\n}\n\n# Downloads a remote file, returns 0 on success.\n# Returns the path to the downloaded file in RETVAL.\ndownload_and_check() {\n    local _remote_name=\"$1\"\n    local _quiet=\"$2\"\n\n    download_file \"$_remote_name\" \"$dl_dir\" \"$_quiet\"\n\n    if [ $? != 0 ]; then\n        return 1\n    fi\n\n    #TODO Check download\n    local _download_file=\"$RETVAL\"\n\n    assert_nz \"$_download_file\" \"downloaded file\"\n    verbose_say \"downloaded dry binary location: $_download_file\"\n\n    RETVAL=\"$_download_file\"\n}\n\n\ndownload_file() {\n    local _remote_name=\"$1\"\n    local _local_dirname=\"$2\"\n    local _quiet=\"$3\"\n\n    local _remote_basename=\"$(basename \"$_remote_name\")\"\n    assert_nz \"$_remote_basename\" \"remote basename\"\n\n    local _local_name=\"$_local_dirname/$_remote_basename\"\n\n    verbose_say \"downloading '$_remote_name' to '$_local_name'\"\n    # Invoke curl in a way that will resume if necessary\n    if [ \"$_quiet\" = false ]; then\n\t     (run cd \"$_local_dirname\" && run curl -# -L -C - -f -O \"$_remote_name\")\n    else\n\t     (run cd \"$_local_dirname\" && run curl -s -L -C - -f -O \"$_remote_name\")\n    fi\n    if [ $? != 0 ]; then\n\t     say_err \"couldn't download '$_remote_name'\"\n\t      return 1\n    fi\n    RETVAL=\"$_local_name\"\n}\n\n# Help\nprint_help() {\necho '\nUsage: dryup.sh [--verbose]\n\nOptions:\n\n     --prefix=<path>                   Install to a specific location (default /usr/local/bin)\n'\n}\n\n# Standard utilities\n\nsay() {\n    echo \"dryup: $1\"\n}\n\nsay_err() {\n    say \"$1\" >&2\n}\n\nverbose_say() {\n    if [ \"$flag_verbose\" = true ]; then\n\t     say \"$1\"\n    fi\n}\n\nerr() {\n    say \"$1\" >&2\n    exit 1\n}\n\nneed_cmd() {\n    if ! command -v \"$1\" > /dev/null 2>&1\n    then err \"need '$1' (command not found)\"\n    fi\n}\n\nneed_ok() {\n    if [ $? != 0 ]; then err \"$1\"; fi\n}\n\nassert_nz() {\n    if [ -z \"$1\" ]; then err \"assert_nz $2\"; fi\n}\n\n# Run a command that should never fail. If the command fails execution\n# will immediately terminate with an error showing the failing\n# command.\nensure() {\n    \"$@\"\n    need_ok \"command failed: $*\"\n}\n\n# This is just for indicating that commands' results are being\n# intentionally ignored. Usually, because it's being executed\n# as part of error handling.\nignore() {\n    run \"$@\"\n}\n\n# Runs a command and prints it to stderr if it fails.\nrun() {\n    \"$@\"\n    local _retval=$?\n    if [ $_retval != 0 ]; then\n\tsay_err \"command failed: $*\"\n    fi\n    return $_retval\n}\n\n# Prints the absolute path of a directory to stdout\nabs_path() {\n    local _path=\"$1\"\n    # Unset CDPATH because it causes havok: it makes the destination unpredictable\n    # and triggers 'cd' to print the path to stdout. Route `cd`'s output to /dev/null\n    # for good measure.\n    (unset CDPATH && cd \"$_path\" > /dev/null && pwd)\n}\n\nassert_cmds() {\n    need_cmd dirname\n    need_cmd basename\n    need_cmd mkdir\n    need_cmd cat\n    need_cmd curl\n    need_cmd mktemp\n    need_cmd rm\n    need_cmd egrep\n    need_cmd grep\n    need_cmd file\n    need_cmd uname\n    need_cmd tar\n    need_cmd sed\n    need_cmd sh\n    need_cmd mv\n    need_cmd cut\n    need_cmd sort\n    need_cmd date\n    need_cmd head\n    need_cmd printf\n    need_cmd touch\n    need_cmd id\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.3076171875,
          "content": "module github.com/moncho/dry\n\ngo 1.22\n\nrequire (\n\tgithub.com/Microsoft/go-winio v0.6.1 // indirect\n\tgithub.com/docker/cli v25.0.3+incompatible\n\tgithub.com/docker/docker v25.0.3+incompatible\n\tgithub.com/docker/go-connections v0.5.0\n\tgithub.com/docker/go-units v0.5.0\n\tgithub.com/gdamore/tcell v1.4.0\n\tgithub.com/gizak/termui v0.0.0-20190118200331-b3075f731367\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/jessevdk/go-flags v1.5.0\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/kevinburke/ssh_config v1.2.0\n\tgithub.com/mattn/go-runewidth v0.0.15\n\tgithub.com/mitchellh/go-homedir v1.1.0\n\tgithub.com/mitchellh/go-wordwrap v1.0.1\n\tgithub.com/moby/term v0.0.0-20210619224110-3f7ff695adc6 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/olekukonko/tablewriter v0.0.5\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.1.0\n\tgithub.com/sirupsen/logrus v1.9.3\n\tgo.uber.org/goleak v1.1.12\n\tgolang.org/x/crypto v0.21.0\n\tgolang.org/x/net v0.21.0\n)\n\nrequire (\n\tgithub.com/gdamore/encoding v1.0.0 // indirect\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\tgithub.com/nsf/termbox-go v1.1.1 // indirect\n\tgolang.org/x/sys v0.18.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n)\n\nrequire github.com/distribution/reference v0.5.0\n\nrequire (\n\tgithub.com/containerd/log v0.1.0 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/go-logr/logr v1.4.1 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/morikuni/aec v1.0.0 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.49.0 // indirect\n\tgo.opentelemetry.io/otel v1.24.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.24.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.24.0 // indirect\n\tgo.opentelemetry.io/otel/sdk v1.24.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.24.0 // indirect\n\tgolang.org/x/lint v0.0.0-20200302205851-738671d3881b // indirect\n\tgolang.org/x/mod v0.15.0 // indirect\n\tgolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac // indirect\n\tgolang.org/x/tools v0.18.0 // indirect\n\tgotest.tools/v3 v3.5.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 18.9111328125,
          "content": "github.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 h1:UQHMgLO+TxOElx5B5HZ4hJQsoJ/PvUvKRhJHDQXO8P8=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=\ngithub.com/Microsoft/go-winio v0.6.1 h1:9/kr64B9VUZrLm5YYwbGtUJnMgqWVOdUAXu6Migciow=\ngithub.com/Microsoft/go-winio v0.6.1/go.mod h1:LRdKpFKfdobln8UmuiYcKPot9D2v6svN5+sAH+4kjUM=\ngithub.com/cenkalti/backoff/v4 v4.2.1 h1:y4OZtCnogmCPw98Zjyt5a6+QwPLGkiQsYW5oUqylYbM=\ngithub.com/cenkalti/backoff/v4 v4.2.1/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=\ngithub.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=\ngithub.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=\ngithub.com/creack/pty v1.1.11/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/distribution/reference v0.5.0 h1:/FUIFXtfc/x2gpa5/VGfiGLuOIdYa1t65IKK2OFGvA0=\ngithub.com/distribution/reference v0.5.0/go.mod h1:BbU0aIcezP1/5jX/8MP0YiH4SdvB5Y4f/wlDRiLyi3E=\ngithub.com/docker/cli v25.0.3+incompatible h1:KLeNs7zws74oFuVhgZQ5ONGZiXUUdgsdy6/EsX/6284=\ngithub.com/docker/cli v25.0.3+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=\ngithub.com/docker/docker v25.0.3+incompatible h1:D5fy/lYmY7bvZa0XTZ5/UJPljor41F+vdyJG5luQLfQ=\ngithub.com/docker/docker v25.0.3+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=\ngithub.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=\ngithub.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=\ngithub.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/gdamore/encoding v1.0.0 h1:+7OoQ1Bc6eTm5niUzBa0Ctsh6JbMW6Ra+YNuAtDBdko=\ngithub.com/gdamore/encoding v1.0.0/go.mod h1:alR0ol34c49FCSBLjhosxzcPHQbf2trDkoo5dl+VrEg=\ngithub.com/gdamore/tcell v1.4.0 h1:vUnHwJRvcPQa3tzi+0QI4U9JINXYJlOz9yiaiPQ2wMU=\ngithub.com/gdamore/tcell v1.4.0/go.mod h1:vxEiSDZdW3L+Uhjii9c3375IlDmR05bzxY404ZVSMo0=\ngithub.com/gizak/termui v0.0.0-20190118200331-b3075f731367 h1:BJlxn0eZvZqsGutlqCkye5eiipfovf0tKczgZNlabOY=\ngithub.com/gizak/termui v0.0.0-20190118200331-b3075f731367/go.mod h1:W48Llfv3G9PIK3TQjqynxzC9mP4HUcAn/6vlDWekq9k=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=\ngithub.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.19.0 h1:Wqo399gCIufwto+VfwCSvsnfGpF/w5E9CNxSwbpD6No=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.19.0/go.mod h1:qmOFXW2epJhM0qSnUUYpldc7gVz2KMQwJ/QYCDIa7XU=\ngithub.com/jessevdk/go-flags v1.5.0 h1:1jKYvbxEjfUl0fmqTCOfonvskHHXMjBySTLW4y9LFvc=\ngithub.com/jessevdk/go-flags v1.5.0/go.mod h1:Fw0T6WPc1dYxT4mKEZRfG5kJhaTDP9pj1c2EWnYs/m4=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/kevinburke/ssh_config v1.2.0 h1:x584FjTGwHzMwvHx18PXxbBVzfnxogHaAReU4gf13a4=\ngithub.com/kevinburke/ssh_config v1.2.0/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/lucasb-eyer/go-colorful v1.0.3/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/mattn/go-runewidth v0.0.2/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mattn/go-runewidth v0.0.7/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.15 h1:UNAjwbU9l54TA3KzvqLGxwWjHmMgBUVhBiTjelZgg3U=\ngithub.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-wordwrap v0.0.0-20150314170334-ad45545899c7/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\ngithub.com/mitchellh/go-wordwrap v1.0.1 h1:TLuKupo69TCn6TQSyGxwI1EblZZEsQ0vMlAFQflz0v0=\ngithub.com/mitchellh/go-wordwrap v1.0.1/go.mod h1:R62XHJLzvMFRBbcrT7m7WgmE1eOyTSsCt+hzestvNj0=\ngithub.com/moby/term v0.0.0-20210619224110-3f7ff695adc6 h1:dcztxKSvZ4Id8iPpHERQBbIJfabdt4wUm5qy3wOL2Zc=\ngithub.com/moby/term v0.0.0-20210619224110-3f7ff695adc6/go.mod h1:E2VnQOmVuvZB6UYnnDB0qG5Nq/1tD9acaOpo6xmt0Kw=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/morikuni/aec v1.0.0 h1:nP9CBfwrvYnBRgY6qfDQkygYDmYwOilePFkwzv4dU8A=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/nsf/termbox-go v0.0.0-20180613055208-5c94acc5e6eb/go.mod h1:IuKpRQcYE1Tfu+oAQqaLisqDeXgjyyltCfsaoYN18NQ=\ngithub.com/nsf/termbox-go v1.1.1 h1:nksUPLCb73Q++DwbYUBEglYBRPZyoXJdrj5L+TkjyZY=\ngithub.com/nsf/termbox-go v1.1.1/go.mod h1:T0cTdVuOwf7pHQNtfhnEbzHbcNyCEcVU4YPpouCbVxo=\ngithub.com/olekukonko/tablewriter v0.0.5 h1:P2Ga83D34wi1o9J6Wh1mRuqd4mF/x/lgBS7N7AbDhec=\ngithub.com/olekukonko/tablewriter v0.0.5/go.mod h1:hPp6KlRPjbx+hW8ykQs1w3UBbZlj6HuIJcUGPhkA7kY=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=\ngithub.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.49.0 h1:jq9TW8u3so/bN+JPT166wjOI6/vQPF6Xe7nMNIltagk=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.49.0/go.mod h1:p8pYQP+m5XfbZm9fxtSKAbM6oIllS7s2AfxrChvc7iw=\ngo.opentelemetry.io/otel v1.24.0 h1:0LAOdjNmQeSTzGBzduGe/rU4tZhMwL5rWgtp9Ku5Jfo=\ngo.opentelemetry.io/otel v1.24.0/go.mod h1:W7b9Ozg4nkF5tWI5zsXkaKKDjdVjpD4oAt9Qi/MArHo=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.24.0 h1:t6wl9SPayj+c7lEIFgm4ooDBZVb01IhLB4InpomhRw8=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.24.0/go.mod h1:iSDOcsnSA5INXzZtwaBPrKp/lWu/V14Dd+llD0oI2EA=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.24.0 h1:Xw8U6u2f8DK2XAkGRFV7BBLENgnTGX9i4rQRxJf+/vs=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.24.0/go.mod h1:6KW1Fm6R/s6Z3PGXwSJN2K4eT6wQB3vXX6CVnYX9NmM=\ngo.opentelemetry.io/otel/metric v1.24.0 h1:6EhoGWWK28x1fbpA4tYTOWBkPefTDQnb8WSGXlc88kI=\ngo.opentelemetry.io/otel/metric v1.24.0/go.mod h1:VYhLe1rFfxuTXLgj4CBiyz+9WYBA8pNGJgDcSFRKBco=\ngo.opentelemetry.io/otel/sdk v1.24.0 h1:YMPPDNymmQN3ZgczicBY3B6sf9n62Dlj9pWD3ucgoDw=\ngo.opentelemetry.io/otel/sdk v1.24.0/go.mod h1:KVrIYw6tEubO9E96HQpcmpTKDVn9gdv35HoYiQWGDFg=\ngo.opentelemetry.io/otel/trace v1.24.0 h1:CsKnnL4dUAr/0llH9FKuc698G04IrpWV0MQA/Y1YELI=\ngo.opentelemetry.io/otel/trace v1.24.0/go.mod h1:HPc3Xr/cOApsBI154IU0OI0HJexz+aw5uPdbs3UCjNU=\ngo.opentelemetry.io/proto/otlp v1.1.0 h1:2Di21piLrCqJ3U3eXGCTPHE9R8Nh+0uglSnOyxikMeI=\ngo.opentelemetry.io/proto/otlp v1.1.0/go.mod h1:GpBHCBWiqvVLDqmHZsoMM3C5ySeKTC7ej/RNTae6MdY=\ngo.uber.org/goleak v1.1.12 h1:gZAh5/EyT/HQwlpkCy6wTpqfH9H8Lz8zbm3dZh+OyzA=\ngo.uber.org/goleak v1.1.12/go.mod h1:cwTWslyiVhfpKIDGSZEM2HlOvcqm+tG4zioyIeLoqMQ=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.21.0 h1:X31++rzVUdKhX5sWmSOFZxx8UW/ldWx55cbf08iNAMA=\ngolang.org/x/crypto v0.21.0/go.mod h1:0BP7YvVV9gBbVKyeTG0Gyn+gZm94bibOW5BjDEYAOMs=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b h1:Wh+f8QHJXR411sJR8/vRBTZ7YapZaRvUcLFFJhusH0k=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.15.0 h1:SernR4v+D55NyBH2QiEQrlBAnj1ECL6AGrA5+dPaMY8=\ngolang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20180801234040-f4c29de78a2a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.21.0 h1:AQyQV4dYCvJ7vGmJyKki9+PBdyvhkSd8EIx/qb0AYv4=\ngolang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.6.0 h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=\ngolang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190626150813-e07cf5db2756/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210320140829-1e4c9ba3b0c4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.18.0 h1:FcHjZXDMxI8mM3nwhX9HlKop4C0YQvCVCdwYl2wOtE8=\ngolang.org/x/term v0.18.0/go.mod h1:ILwASektA3OnRv7amZ1xhE/KTR+u50pbXfZ03+6Nx58=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac h1:7zkz7BUtwNFFqcowJ+RIgu2MaV/MapERkDIy+mwPyjs=\ngolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.18.0 h1:k8NLag8AGHnn+PHbl7g43CtqZAwG60vZkLqgyZgIHgQ=\ngolang.org/x/tools v0.18.0/go.mod h1:GL7B4CwcLLeo59yx/9UWWuNOW1n3VZ4f5axWfML7Lcg=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240102182953-50ed04b92917 h1:rcS6EyEaoCO52hQDupoSfrxI3R6C2Tq741is7X8OvnM=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240102182953-50ed04b92917/go.mod h1:CmlNWB9lSezaYELKS5Ym1r44VrrbPUa7JTvw+6MbpJ0=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240102182953-50ed04b92917 h1:6G8oQ016D88m1xAKljMlBOOGWDZkes4kMhgGFlf8WcQ=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240102182953-50ed04b92917/go.mod h1:xtjpI3tXFPP051KaWnhvxkiubL/6dJ18vLVf7q2pTOU=\ngoogle.golang.org/grpc v1.61.1 h1:kLAiWrZs7YeDM6MumDe7m3y4aM6wacLzM1Y/wiLP9XY=\ngoogle.golang.org/grpc v1.61.1/go.mod h1:VUbo7IFqmF1QtCAstipjG0GIoq49KvMe9+h1jFLBNJs=\ngoogle.golang.org/protobuf v1.32.0 h1:pPC6BG5ex8PDFnkbrGU3EixyhKcQ2aDuBS36lqK/C7I=\ngoogle.golang.org/protobuf v1.32.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=\ngotest.tools/v3 v3.5.0 h1:Ljk6PdHdOhAb5aDMWXjDLMMhph+BpztA4v1QdqEW2eY=\ngotest.tools/v3 v3.5.0/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 5.287109375,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"runtime/debug\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"net/http\"\n\t_ \"net/http/pprof\"\n\n\t\"github.com/jessevdk/go-flags\"\n\t\"github.com/moncho/dry/app\"\n\t\"github.com/moncho/dry/appui\"\n\t\"github.com/moncho/dry/docker\"\n\t\"github.com/moncho/dry/ui\"\n\t\"github.com/moncho/dry/version\"\n\tlog \"github.com/sirupsen/logrus\"\n)\n\nconst (\n\tbanner = `     _\n    | |\n  __| |  ____  _   _\n / _  | / ___)| | | |\n( (_| || |    | |_| |\n \\____||_|     \\__  |\n               (____/\n\n`\n\tcheese     = \"<white>made with \\U0001F499  (and go) by</> <blue>moncho</>\"\n\tconnecting = \"\\U0001f433  Trying to connect to the Docker Host \\U0001f433\"\n)\n\nvar loadMessage = []string{docker.Whale0,\n\tdocker.Whale1,\n\tdocker.Whale2,\n\tdocker.Whale3,\n\tdocker.Whale4,\n\tdocker.Whale5,\n\tdocker.Whale6,\n\tdocker.Whale7,\n\tdocker.Whale}\n\n// options dry's flags\ntype options struct {\n\tDescription bool   `short:\"d\" long:\"description\" description:\"Shows the description\"`\n\tMonitorMode string `short:\"m\" long:\"monitor\" description:\"Starts in monitor mode, given value (if any) is the refresh rate\" optional:\"yes\" optional-value:\"500\"`\n\t// enable profiling\n\tProfile bool `short:\"p\" long:\"profile\" description:\"Enable profiling\"`\n\tVersion bool `short:\"v\" long:\"version\" description:\"Dry version\"`\n\t//Docker-related properties\n\tDockerHost       string `short:\"H\" long:\"docker_host\" description:\"Docker Host\"`\n\tDockerCertPath   string `short:\"c\" long:\"docker_certpath\" description:\"Docker cert path\"`\n\tDockerTLSVerifiy string `short:\"t\" long:\"docker_tls\" description:\"Docker TLS verify\"`\n\t//Whale\n\tWhale uint `short:\"w\" long:\"whale\" description:\"Show whale for w seconds\"`\n}\n\nfunc config(opts options) (app.Config, error) {\n\tvar cfg app.Config\n\tif opts.DockerHost == \"\" {\n\t\tif os.Getenv(\"DOCKER_HOST\") == \"\" {\n\t\t\tlog.Printf(\n\t\t\t\t\"No DOCKER_HOST env variable found and no Host parameter was given, connecting to %s\",\n\t\t\t\tdocker.DefaultDockerHost)\n\t\t\tcfg.DockerHost = docker.DefaultDockerHost\n\t\t} else {\n\t\t\tcfg.DockerHost = os.Getenv(\"DOCKER_HOST\")\n\t\t\tcfg.DockerTLSVerify = docker.GetBool(os.Getenv(\"DOCKER_TLS_VERIFY\"))\n\t\t\tcfg.DockerCertPath = os.Getenv(\"DOCKER_CERT_PATH\")\n\t\t}\n\t} else {\n\t\tcfg.DockerHost = opts.DockerHost\n\t\tcfg.DockerTLSVerify = docker.GetBool(opts.DockerTLSVerifiy)\n\t\tcfg.DockerCertPath = opts.DockerCertPath\n\t}\n\n\tif opts.MonitorMode != \"\" {\n\t\tcfg.MonitorMode = true\n\t\trefreshRate, err := strconv.Atoi(opts.MonitorMode)\n\t\tif err != nil {\n\t\t\treturn cfg, fmt.Errorf(\"invalid refresh rate %s: %w\", opts.MonitorMode, err)\n\t\t}\n\t\tcfg.MonitorRefreshRate = refreshRate\n\t}\n\treturn cfg, nil\n}\n\nfunc showLoadingScreen(ctx context.Context, screen *ui.Screen, cfg app.Config) {\n\tscreen.Clear()\n\tmidscreen := screen.Dimensions().Width / 2\n\theight := screen.Dimensions().Height\n\tscreen.RenderAtColumn(midscreen-len(connecting)/2, 1, ui.White(connecting))\n\tscreen.RenderLine(2, height-2, fmt.Sprintf(\"<blue>Dry Version:</> %s\", ui.White(version.VERSION)))\n\tif cfg.DockerHost != \"\" {\n\t\tscreen.RenderLine(2, height-1, fmt.Sprintf(\"<blue>Docker Host:</> %s\", ui.White(cfg.DockerHost)))\n\t} else {\n\t\tscreen.RenderLine(2, height-1, ui.White(\"No Docker host\"))\n\t}\n\n\t//20 is a safe aproximation for the length of interpreted characters from the message\n\tscreen.RenderLine(ui.ActiveScreen.Dimensions().Width-len(cheese)+20, height-1, cheese)\n\tscreen.Flush()\n\tgo func() {\n\t\trotorPos := 0\n\t\tforward := true\n\t\tticker := time.NewTicker(250 * time.Millisecond)\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\tloadingMessage := loadMessage[rotorPos]\n\t\t\t\tscreen.RenderAtColumn(midscreen-19, height/2-6, ui.Cyan(loadingMessage))\n\t\t\t\tscreen.Flush()\n\t\t\t\tif rotorPos == len(loadMessage)-1 {\n\t\t\t\t\tforward = false\n\t\t\t\t} else if rotorPos == 0 {\n\t\t\t\t\tforward = true\n\t\t\t\t}\n\t\t\t\tif forward {\n\t\t\t\t\trotorPos++\n\t\t\t\t} else {\n\t\t\t\t\trotorPos--\n\t\t\t\t}\n\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n}\nfunc main() {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Printf(\n\t\t\t\t\"Dry panicked: %v\", r)\n\t\t\tlog.Error(string(debug.Stack()))\n\t\t\tos.Exit(1)\n\t\t}\n\t}()\n\t// parse flags\n\tvar opts options\n\tparser := flags.NewParser(&opts, flags.Default)\n\t_, err := parser.Parse()\n\tif err != nil {\n\t\tflagError := err.(*flags.Error)\n\t\tif flagError.Type == flags.ErrHelp {\n\t\t\treturn\n\t\t}\n\t\tif flagError.Type == flags.ErrUnknownFlag {\n\t\t\tlog.Print(\"Use --help to view all available options.\")\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"Could not parse flags: %s\", err)\n\t\treturn\n\t}\n\tif opts.Description {\n\t\tfmt.Print(app.ShortHelp)\n\t\treturn\n\t}\n\tif opts.Version {\n\t\tfmt.Printf(\"dry version %s, build %s\", version.VERSION, version.GITCOMMIT)\n\t\treturn\n\t}\n\t// Start profiling (if required)\n\tif opts.Profile {\n\t\tgo func() {\n\t\t\tlog.Fatal(http.ListenAndServe(\"localhost:6060\", nil))\n\t\t}()\n\t}\n\tscreen, err := ui.NewScreen(appui.DryTheme)\n\tif err != nil {\n\t\tlog.Printf(\"Dry could not start: %s\", err)\n\t\treturn\n\t}\n\tcfg, err := config(opts)\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t\treturn\n\t}\n\n\tstart := time.Now()\n\tctx, cancel := context.WithCancel(context.Background())\n\tshowLoadingScreen(ctx, screen, cfg)\n\n\tdry, err := app.NewDry(screen, cfg)\n\n\t//if asked to, show whale to bablat a bit longer\n\tif opts.Whale > 0 {\n\t\tshowWale, _ := time.ParseDuration(fmt.Sprintf(\"%ds\", opts.Whale))\n\t\ttime.Sleep(showWale - time.Since(start))\n\t}\n\t//dry has loaded, stopping the loading screen\n\tcancel()\n\tif err != nil {\n\t\tscreen.Close()\n\t\tlog.Printf(\"Dry could not start: %s\", err)\n\t\treturn\n\t}\n\tapp.RenderLoop(dry)\n\tscreen.Close()\n}\n"
        },
        {
          "name": "mocks",
          "type": "tree",
          "content": null
        },
        {
          "name": "revive.toml",
          "type": "blob",
          "size": 0.599609375,
          "content": "ignoreGeneratedHeader = false\nseverity = \"warning\"\nconfidence = 0.8\nerrorCode = 0\nwarningCode = 0\n\n[rule.blank-imports]\n[rule.context-as-argument]\n[rule.context-keys-type]\n[rule.dot-imports]\n[rule.error-return]\n[rule.error-strings]\n[rule.error-naming]\n[rule.exported]\n[rule.if-return]\n[rule.increment-decrement]\n[rule.var-naming]\n[rule.var-declaration]\n[rule.package-comments]\n[rule.range]\n[rule.receiver-naming]\n[rule.time-naming]\n[rule.unexported-return]\n[rule.indent-error-flow]\n[rule.errorf]\n[rule.empty-block]\n[rule.superfluous-else]\n[rule.unused-parameter]\n[rule.unreachable-code]\n[rule.redefines-builtin-id]"
        },
        {
          "name": "search",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "terminal",
          "type": "tree",
          "content": null
        },
        {
          "name": "tls",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}