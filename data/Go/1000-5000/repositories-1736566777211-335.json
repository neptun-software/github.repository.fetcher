{
  "metadata": {
    "timestamp": 1736566777211,
    "page": 335,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hoanhan101/algo",
      "stars": 3568,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2109375,
          "content": "# Mac caches\n.DS_Store\n\n# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1943359375,
          "content": "language: go\n\nbefore_script:\n  - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.23.1\n\nscript:\n  - make lint\n  - make test\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2019 Hoanh An\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.826171875,
          "content": "#\n# algo cmd helpers\n#\n\n.PHONY: count\ncount:  ## Count the number of questions\n\tgo run count.go\n\n.PHONY: clean\nclean:  ## Clean test cache\n\tgo clean -testcache\n\trm -f coverage.out\n\n.PHONY: cover\ncover: test  ## Run unit tests and open the coverage report\n\tgo tool cover -html=coverage.out\n\n.PHONY: lint\nlint:  ## Lint source files\n\tgolangci-lint run\n\n.PHONY: test\ntest:  ## Run unit tests\n\tgo test -short -race -coverprofile=coverage.out -covermode=atomic ./...\n\n.PHONY: test-verbose\ntest-verbose:  ## Run tests verbosely\n\tgo test -v ./...\n\n.PHONY: ready\nready: clean lint test count  ## Clean up, lint source files, run tests and be ready for a push\n\n.PHONY: help\nhelp:  ## Print usage information\n\t@awk 'BEGIN {FS = \":.*?## \"} /^[a-zA-Z_-]+:.*?## / {printf \"\\033[36m%-16s\\033[0m %s\\n\", $$1, $$2}' $(MAKEFILE_LIST) | sort\n\n.DEFAULT_GOAL := help\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.57421875,
          "content": "# 116+ Coding Interview Problems with Detailed Solutions\n\n[![Build Status](https://travis-ci.com/hoanhan101/algo.svg?branch=master)](https://travis-ci.com/hoanhan101/algo)\n[![Go Report Card](https://goreportcard.com/badge/github.com/hoanhan101/algo)\n](https://goreportcard.com/report/github.com/hoanhan101/algo)\n![](https://img.shields.io/github/stars/hoanhan101/algo)\n![](https://img.shields.io/github/forks/hoanhan101/algo)\n[![hackernews](https://img.shields.io/badge/hackernews-300%2B-orange)](https://news.ycombinator.com/item?id=21975463)\n[![r/golang](https://img.shields.io/badge/r/golang-200%2B-orange)](https://www.reddit.com/r/golang/comments/el4vut/101_coding_interview_problems_with_detailed/)\n\n> [The Ultimate Go Study Guide eBook version →](https://gum.co/bpUYF)\n\n> [Join my mailing list to get the latest updates here →](https://mailchi.mp/579f9d6927dd/hoanhanco)\n\n## Motivation\n\nI am building a database of most frequently appeared coding interview problems\nthat I think are the most valuable and productive to spend time on. For each\none, I am including my thoughts of process on how to approach and solve it,\nadding well-documented solutions with test cases, time and space complexity\nanalysis. My goal is to help you get good algorithms and data structures so\nthat you can prepare better for your next coding interviews.\n\nThese resources that I am looking at are:\n- [Interview Cake](https://www.interviewcake.com/)\n- [LeetCode](https://leetcode.com/)\n- Cracking the Coding Interviews\n- [Grokking the Coding Interview: Patterns for Coding Questions](https://www.educative.io/courses/grokking-the-coding-interview)\n- Elements of Programming Interviews\n\nIf you’re interested in getting updates for this, feel free to join my [mailing \nlist here →](https://mailchi.mp/579f9d6927dd/hoanhanco)\n\n## Table of Contents \n\n- **[Interview Cake](https://www.interviewcake.com/)**\n  - Array and string manipulation\n    - [Merge meeting times](interviewcake/merge_meetings_test.go)\n    - [Reverse string in place](interviewcake/reverse_string_test.go)\n    - [Reverse words](interviewcake/reverse_word_test.go)\n    - [Merge sorted arrays](interviewcake/merge_sorted_arrays_test.go)\n  - Hashing and hash tables\n    - [In-flight entertainment](interviewcake/inflight_test.go)\n    - [Permutation palindrome](interviewcake/permutation_palindrome_test.go)\n    - [Word cloud data](interviewcake/word_cloud_test.go)\n    - [Top scores](interviewcake/top_scores_test.go)\n  - Greedy algorithms\n    - [Apple stocks](interviewcake/apple_stocks_test.go)\n    - [Highest product of three](interviewcake/highest_product_of_three_test.go)\n    - [Product of all other numbers](interviewcake/product_of_others_test.go)\n    - [In-place shuffle](interviewcake/inplace_shuffle_test.go)\n  - Sorting, searching, and logarithms\n    - [Find rotation point](interviewcake/find_rotation_point_test.go)\n  - Trees and graphs\n    - [Balanced binary tree](interviewcake/balanced_binary_tree_test.go)\n    - [Binary search tree checker](interviewcake/binary_search_tree_test.go)\n    - [2nd largest item in a binary search tree](interviewcake/2nd_largest_item_bst_test.go)\n    - [Graph coloring](interviewcake/graph_coloring_test.go)\n  - Dynamic programming and recursion\n    - [Recursive string permutations](interviewcake/recursive_string_permutation_test.go)\n    - [Compute nth Fibonacci number](interviewcake/fibonacci_number_test.go)\n    - [Making change](interviewcake/making_change_test.go)\n  - Queues and stacks\n    - [Largest stack](interviewcake/largest_stack_test.go)\n    - [A queue with two stacks](interviewcake/queue_two_stacks_test.go)\n    - [Parenthesis matching](interviewcake/parenthesis_matching_test.go)\n    - [Bracket validator](interviewcake/bracket_validator_test.go)\n  - Linked lists\n    - [Delete node](interviewcake/delete_node_test.go)\n    - [Linked list has a cycle](interviewcake/linked_list_cycle_test.go)\n    - [Reverse a linked list](interviewcake/reverse_linked_list_test.go)\n    - [Kth to last node](interviewcake/kth_to_last_test.go)\n  - Bit manipulation\n    - [The stolen breakfast drone](interviewcake/stolen_breakfast_drone_test.go)\n- **[LeetCode](https://leetcode.com/)**\n  - Array/String\n    - [Two sum I](leetcode/two_sum_i_test.go)\n    - [Two sum II](leetcode/two_sum_ii_test.go)\n    - [Valid palindrome](leetcode/valid_palindrome_test.go)\n    - [Implement strstr()](leetcode/strstr_test.go)\n    - [Reverse words in string](leetcode/reverse_words_string_test.go)\n    - [Longest substring without repeating characters](leetcode/longest_substring_test.go)\n    - [Missing ranges](leetcode/missing_ranges_test.go)\n    - [One edit distance](leetcode/one_edit_distance_test.go)\n  - Math\n    - [Reverse integer](leetcode/reverse_integer_test.go)\n    - [Plus one](leetcode/plus_one_test.go)\n    - [Palindrome number](leetcode/palindrome_number_test.go)\n  - Linked list\n    - [Merge sorted linked list](leetcode/merge_sorted_linked_list_test.go)\n    - [Add two numbers](leetcode/add_two_numbers_test.go)\n    - [Swap nodes in pairs](leetcode/swap_nodes_in_pairs_test.go)\n  - Binary tree\n    - [Validate binary search tree](leetcode/valid_bst_test.go)\n    - [Maximum depth of binary tree](leetcode/max_depth_binary_tree_test.go)\n    - [Minimum depth of binary tree](leetcode/min_depth_binary_tree_test.go)\n    - [Balanced binary tree](leetcode/balanced_binary_tree_test.go)\n    - [Binary tree maximum path sum](leetcode/binary_tree_max_path_sum_test.go)\n  - Bit manipulation\n    - [Single number I](interviewcake/stolen_breakfast_drone_test.go)\n    - [Single number II](leetcode/single_number_ii_test.go)\n  - Misc\n    - [Spiral matrix](leetcode/spiral_matrix_test.go)\n  - Stack\n    - [Min stack](leetcode/min_stack_test.go)\n    - [Valid parenthesis](leetcode/valid_parentheses_test.go)\n  - Dynamic programming\n    - [Climbing stairs](leetcode/climbing_stairs_test.go)\n- **Cracking the Coding Interviews**\n  - Bit manipulation\n    - [Bit operation](ctci/bit_operation_test.go)\n    - [Bit insertion](ctci/bit_insertion_test.go)\n- **[Grokking the Coding Interview: Patterns for Coding Questions](https://www.educative.io/courses/grokking-the-coding-interview)**\n  - Sliding Window\n    - [Average of any contiguous subarray of size k](gtci/avg_subarray_test.go)\n    - [Maximum sum of any contiguous subarray of size k](gtci/max_subarray_test.go)\n    - [Smallest subarray with a given sum](gtci/smallest_subarray_test.go)\n    - [Longest substring with k distinct characters](gtci/longest_substring_k_distinct_test.go)\n    - [Fruits into baskets](gtci/fruits_baskets_test.go)\n    - [Longest substring without repeating characters](gtci/no_repeat_substring_test.go)\n    - [Longest substring after k replacements](gtci/longest_substring_k_replacement_test.go)\n    - [Longest substring after ones replacements](gtci/longest_substring_ones_replacement_test.go)\n    - [Permutation in string](gtci/permutation_string_test.go)\n    - [String anagrams](gtci/string_anagrams_test.go)\n  - Two pointers\n    - [Pair with target sum](gtci/pair_target_sum_test.go)\n    - [Remove duplicates](gtci/remove_duplicates_test.go)\n    - [Squaring a sorted array](gtci/square_sorted_array_test.go)\n    - [Dutch national flag problem](gtci/dutch_flag_test.go)\n  - Fast and slow pointers\n    - [Linked list cycle](gtci/linked_list_cycle_test.go)\n    - [Start of a linked list cycle](gtci/cycle_start_test.go)\n    - [Happy number](gtci/happy_number_test.go)\n    - [Middle of a linked list](gtci/middle_list_test.go)\n    - [Palindrome linked list](gtci/palindrome_list_test.go)\n    - [Reorder a linked list](gtci/reorder_list_test.go)\n  - Merge intervals\n    - [Merge intervals](gtci/merge_intervals_test.go)\n    - [Insert interval](gtci/insert_interval_test.go)\n    - [Intervals intersection](gtci/intervals_intersection_test.go)\n    - [Conflicting appointment](gtci/conflict_appointment_test.go)\n  - Cyclic sort\n    - [Cyclic sort](gtci/cyclic_sort_test.go)\n    - [Missing number](gtci/missing_number_test.go)\n    - [Missing numbers](gtci/missing_numbers_test.go)\n    - [Find duplicate](gtci/duplicate_test.go)\n    - [Find duplicates](gtci/duplicates_test.go)\n    - [Find corrupt pair](gtci/corrupt_pair_test.go)\n  - In-place reversal of a linked list\n    - [Reverse a linked list](gtci/reverse_list_test.go)\n  - Tree breath first search\n    - [Binary tree level order traversal](gtci/level_order_traversal_test.go)\n    - [Reverse level order traversal](gtci/reverse_level_order_traversal_test.go)\n    - [Zigzag traversal](gtci/zigzag_traversal_test.go)\n    - [Level averages](gtci/level_avg_test.go)\n    - [Minimum depth](gtci/min_depth_test.go)\n    - [Maximum depth](gtci/max_depth_test.go)\n    - [Level order successor](gtci/level_order_successor_test.go)\n  - Tree depth first search\n    - [Binary tree path sum](gtci/path_sum_test.go)\n    - [Sum of path numbers](gtci/sum_path_test.go)\n  - Two Heaps\n    - [Find the median of a number stream](gtci/median_number_stream_test.go)\n  - Subsets\n    - [Subsets](gtci/subsets_test.go)\n    - [Subsets with duplicates](gtci/subsets_duplicates_test.go)\n    - [Permutations](gtci/spermutations_test.go)\n- **[Grokking Dynamic Programming Patterns](https://www.educative.io/courses/grokking-dynamic-programming-patterns-for-coding-interviews)**\n  - Knapsack\n    - [0/1 Knapsack](gtci/knapsack_test.go)\n    - [Equal subset sum partition](gtci/equal_subset_partition_test.go)\n  - Fibonacci numbers\n    - [Fibonacci numbers](gtci/fibonacci_numbers_test.go)\n    - [Staircase](gtci/staircase_test.go)\n    - [Number factors](gtci/number_factors_test.go)\n- **[Practical Algorithms and Data Structures](https://bradfieldcs.com/algos/)**\n- **Elements of Programming Interviews**\n- **Lab (to experiment with different ideas)**\n  - Data structures\n    - Tree\n      - [Balanced binary tree](lab/balanced_binary_tree_test.go)\n      - [Binary tree traversals](lab/binary_tree_traverse_test.go)\n    - Priority Queue: *TODO*\n    - Bloom filter: *TODO*\n    - [LRU cache](lab/lru_test.go)\n  - Sorting\n    - [Bubble sort](lab/bubble_sort_test.go)\n    - [Selection sort](lab/selection_sort_test.go)\n    - [Insertion sort](lab/insertion_sort_test.go)\n    - [Merge Sort](lab/merge_sort_test.go)\n    - [Quicksort](lab/quicksort_test.go)\n    - [Heapsort](lab/heapsort_test.go)\n    - [Counting Sort](lab/counting_sort_test.go)\n    - Radix Sort: *TODO*\n\n## Developing\n\nCount the number of questions:\n```\nmake count\n```\n\nClean up, lint source files, run tests and be ready for a push:\n```\nmake ready\n```\n\nTest only:\n```\nmake test\n```\n\nTest and report:\n```\nmake cover\n```\n\nTest verbose:\n```\nmake test-verbose\n```\n\nLint:\n```\nmake lint\n```\n\nClean up:\n```\nmake clean\n```\n\nFor more information:\n```\nmake help\n```\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/hoanhan101/algo.svg)](https://starchart.cc/hoanhan101/algo)\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "count.go",
          "type": "blob",
          "size": 0.9619140625,
          "content": "/*\n\tcount.go counts the number of files in given directories.\n\tSince one file contains one problem, the program's output can also\n\ttell how many questions that we have completed so far.\n*/\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"text/tabwriter\"\n)\n\nfunc main() {\n\t// format in tab-separated columns with a tab stop of 8.\n\tw := new(tabwriter.Writer)\n\tw.Init(os.Stdout, 0, 8, 0, '\\t', 0)\n\n\ttotal := 0\n\tdirectories := []string{\"ctci\", \"gtci\", \"interviewcake\", \"leetcode\", \"lab\"}\n\n\tfor _, dir := range directories {\n\t\tn := countFiles(dir)\n\t\tfmt.Fprintf(w, \"%v\\t%v\\n\", dir, n)\n\n\t\ttotal += n\n\t}\n\n\tfmt.Fprintf(w, \"-------------\\t--\\n\")\n\tfmt.Fprintf(w, \"total\\t%v\\n\", total)\n\tw.Flush()\n}\n\nfunc countFiles(dir string) int {\n\tcounter := 0\n\n\terr := filepath.Walk(dir,\n\t\tfunc(path string, info os.FileInfo, err error) error {\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif dir != path {\n\t\t\t\tcounter++\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\treturn counter\n}\n"
        },
        {
          "name": "ctci",
          "type": "tree",
          "content": null
        },
        {
          "name": "fixme",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0419921875,
          "content": "module github.com/hoanhan101/algo\n\ngo 1.13\n"
        },
        {
          "name": "gtci",
          "type": "tree",
          "content": null
        },
        {
          "name": "interviewcake",
          "type": "tree",
          "content": null
        },
        {
          "name": "lab",
          "type": "tree",
          "content": null
        },
        {
          "name": "leetcode",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}