{
  "metadata": {
    "timestamp": 1736566913640,
    "page": 486,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "iann0036/iamlive",
      "stars": 3148,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.279296875,
          "content": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, built with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Dependency directories (remove the comment below to include it)\n# vendor/\n\n# Custom\niamlive"
        },
        {
          "name": ".gon-amd64.json",
          "type": "blob",
          "size": 0.4853515625,
          "content": "{\n    \"source\": [\"./dist/macos-amd64_darwin_amd64_v1/iamlive\"],\n    \"bundle_id\": \"com.iann0036.iamlive\",\n    \"apple_id\": {\n        \"username\" : \"apple@ian.mn\",\n        \"provider\": \"R7ZQG222E8\"\n    },\n    \"sign\": {\n        \"application_identity\" : \"Developer ID Application: Ian McKay (R7ZQG222E8)\"\n    },\n    \"dmg\" :{\n        \"output_path\":  \"./dist/iamlive-darwin-amd64.dmg\",\n        \"volume_name\":  \"iamlive\"\n    },\n    \"zip\" :{\n        \"output_path\":  \"./dist/iamlive-darwin-amd64.zip\"\n    }\n}\n"
        },
        {
          "name": ".gon-arm64.json",
          "type": "blob",
          "size": 0.4873046875,
          "content": "{\n    \"source\": [\"./dist/macos-arm64_darwin_arm64_v8.0/iamlive\"],\n    \"bundle_id\": \"com.iann0036.iamlive\",\n    \"apple_id\": {\n        \"username\" : \"apple@ian.mn\",\n        \"provider\": \"R7ZQG222E8\"\n    },\n    \"sign\": {\n        \"application_identity\" : \"Developer ID Application: Ian McKay (R7ZQG222E8)\"\n    },\n    \"dmg\" :{\n        \"output_path\":  \"./dist/iamlive-darwin-arm64.dmg\",\n        \"volume_name\":  \"iamlive\"\n    },\n    \"zip\" :{\n        \"output_path\":  \"./dist/iamlive-darwin-arm64.zip\"\n    }\n}\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.515625,
          "content": "builds:\n- binary: iamlive\n  env:\n  - CGO_ENABLED=0\n  id: windows\n  goos:\n  - windows\n  goarch:\n  - \"386\"\n  - amd64\n- binary: iamlive\n  env:\n  - CGO_ENABLED=0\n  id: linux\n  goos:\n  - linux\n  goarch:\n  - \"386\"\n  - amd64\n  - arm64\n- binary: iamlive\n  env:\n  - CGO_ENABLED=0\n  id: macos-amd64\n  goos:\n  - darwin\n  goarch:\n  - amd64\n  hooks:\n    post:\n    - gon .gon-amd64.json\n    - mv dist/iamlive-darwin-amd64.dmg dist/iamlive-v{{ .Version }}-darwin-amd64.dmg\n    - mv dist/iamlive-darwin-amd64.zip dist/iamlive-v{{ .Version }}-darwin-amd64.zip\n    - ls dist/\n- binary: iamlive\n  env:\n  - CGO_ENABLED=0\n  id: macos-arm64\n  goos:\n  - darwin\n  goarch:\n  - arm64\n  hooks:\n    post:\n    - gon .gon-arm64.json\n    - mv dist/iamlive-darwin-arm64.dmg dist/iamlive-v{{ .Version }}-darwin-arm64.dmg\n    - mv dist/iamlive-darwin-arm64.zip dist/iamlive-v{{ .Version }}-darwin-arm64.zip\n    - ls dist/\narchives:\n- id: linux-archive\n  builds:\n  - linux\n  format: tar.gz\n  name_template: \"{{ .ProjectName }}-v{{ .Version }}-{{ .Os }}-{{ .Arch }}\"\n  files:\n  - none*\n- id: windows-archive\n  builds:\n  - windows\n  format: zip\n  name_template: \"{{ .ProjectName }}-v{{ .Version }}-{{ .Os }}-{{ .Arch }}\"\n  files:\n  - none*\n- id: darwin-archive\n  builds:\n  - macos-amd64\n  - macos-arm64\n  format: tar.gz\n  name_template: \"{{ .ProjectName }}-v{{ .Version }}-{{ .Os }}-{{ .Arch }}\"\n  files:\n  - none*\nrelease:\n  ids:\n  - linux-archive\n  - windows-archive\n  extra_files:\n  - glob: ./dist/*.dmg\n  - glob: ./dist/*-darwin-amd64.zip\n  - glob: ./dist/*-darwin-arm64.zip\nchecksum:\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2021 Ian Mckay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 4.1298828125,
          "content": "Third Party Software\n\nThis application uses the following packages:\n\n---\n\n1. https://github.com/duo-labs/parliament\n\n\nCopyright 2019 Duo Security\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n---\n\n2. https://github.com/iann0036/sdk-iam-map\n\n\nMIT License\n\nCopyright (c) 2021 Ian Mckay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n---\n\n3. https://github.com/elazarl/goproxy\n\n\nCopyright (c) 2012 Elazar Leibovich. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Elazar Leibovich. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n---"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.490234375,
          "content": "# iamlive\n\n> Generate an IAM policy from AWS, Azure, or Google Cloud (GCP) calls using client-side monitoring (CSM) or embedded proxy\n\n![](https://raw.githubusercontent.com/iann0036/iamlive/assets/iamlive.gif)\n\n> [!IMPORTANT]  \n> The Azure and Google Cloud providers are in preview and may produce incorrect outputs at this time\n\n## Installation\n\n### Pre-built binaries\n\nPre-built binaries for Windows, macOS and Linux are available for download in the project [releases](https://github.com/iann0036/iamlive/releases).\n\nOnce downloaded, place the extracted binary in your $PATH (or execute in-place). For macOS users, you may need to allow the application to run via System Preferences.\n\n### Build with Go\n\nTo build and install this application, clone this repository and execute the following from it's base:\n\n```\ngo install\n```\n\nYou must have Go 1.16 or later installed for the build to work.\n\n### Homebrew\n\nYou may also install this application using a Homebrew tap with the following command:\n\n```\nbrew install iann0036/iamlive/iamlive\n```\n\n### Other Methods\n\n* [Lambda Extension](https://github.com/iann0036/iamlive-lambda-extension) _(AWS only)_\n* [Docker](https://meirg.co.il/2021/04/23/determining-aws-iam-policies-according-to-terraform-and-aws-cli/)\n* [GitHub Action (with Terraform)](https://github.com/scott-doyland-burrows/gha-composite-terraform-iamlive)\n* [LocalStack](https://github.com/rulio/iamlive-localstack/)\n\n## Usage\n\nTo start the listener, simply run `iamlive` in a separate window to your CLI / SDK application. You can use Ctrl+C to exit when you are done.\n\n### CLI Arguments\n\nYou can optionally also include the following arguments to the `iamlive` command:\n\n**--provider:** the cloud service provider to intercept calls for (`aws`,`azure`,`gcp`) (_default: aws_)\n\n**--set-ini:** when set, the `.aws/config` file will be updated to use the CSM monitoring or CA bundle and removed when exiting (_default: false_) (_AWS only_)\n\n**--profile:** use the specified profile when combined with `--set-ini` (_default: default_) (_AWS only_)\n\n**--fails-only:** when set, only failed AWS calls will be added to the policy, csm mode only (_default: false_) (_AWS only_)\n\n**--output-file:** specify a file that will be written to on SIGHUP or exit (_default: unset_)\n\n**--refresh-rate:** instead of flushing to console every API call, do it this number of seconds (_default: 0_)\n\n**--sort-alphabetical:** sort actions alphabetically (_default: false for AWS, otherwise true_)\n\n**--host:** host to listen on for CSM (_default: 127.0.0.1_)\n\n**--background:** when set, the process will return the current PID and run in the background without output (_default: false_)\n\n**--force-wildcard-resource:** when set, the Resource will always be a wildcard (_default: false_) (_AWS only_)\n\n**--mode:** the listening mode (`csm`,`proxy`) (_default: csm for aws, otherwise proxy_)\n\n**--bind-addr:** the bind address for proxy mode (_default: 127.0.0.1:10080_)\n\n**--ca-bundle:** the CA certificate bundle (PEM) to use for proxy mode (_default: ~/.iamlive/ca.pem_)\n\n**--ca-key:** the CA certificate key to use for proxy mode (_default: ~/.iamlive/ca.key_)\n\n**--account-id:** the AWS account ID to use in policy outputs within proxy mode (_default: 123456789012 unless detected_) (_AWS only_)\n\n**--debug:** dumps associated HTTP requests when set in proxy mode (_default: false_)\n\n_Basic Example (CSM Mode)_\n\n```\niamlive --set-ini\n```\n\n_Basic Example (Proxy Mode)_\n\n```\niamlive --set-ini --mode proxy\n```\n\n_Basic Example (Azure)_\n\n```\niamlive --provider azure\n```\n\n_Basic Example (Google Cloud)_\n\n```\niamlive --provider gcp\n```\n\n_Comprehensive Example (CSM Mode)_\n\n```\niamlive --set-ini --profile myprofile --fails-only --output-file policy.json --refresh-rate 1 --sort-alphabetical --host 127.0.0.1 --background\n```\n\n_Comprehensive Example (Proxy Mode)_\n\n```\niamlive --set-ini --mode proxy --profile myprofile --output-file policy.json --refresh-rate 1 --sort-alphabetical --bind-addr 127.0.0.1:10080 --ca-bundle ~/.iamlive/ca.pem --ca-key ~/.iamlive/ca.key --account-id 123456789012 --background --force-wildcard-resource\n```\n\nThe arguments may also be specified in an INI file located at `~/.iamlive/config`.\n\n### CSM Mode\n\nClient-side monitoring mode is the default behaviour for AWS and will use [metrics](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/metrics.html) delivered locally via UDP to capture policy statements with the `Action` key only (`Resource` is only available in proxy mode).\n\nCSM mode is only available for the AWS provider.\n\n#### CLI\n\nTo enable CSM in the AWS CLI, you should either use the `--set-ini` option or add the following to the relevant profile in `.aws/config`:\n\n```\ncsm_enabled = true\n```\n\nAlternatively, you can run the following in the window executing your CLI commands:\n\n```\nexport AWS_CSM_ENABLED=true\n```\n\n#### SDKs\n\nTo enable CSM in the various AWS SDKs, you can run the following in the window executing your application prior to it starting:\n\n```\nexport AWS_CSM_ENABLED=true\nexport AWS_CSM_PORT=31000\nexport AWS_CSM_HOST=127.0.0.1\n```\n\n### Proxy Mode\n\nProxy mode will serve a local HTTP(S) server (by default at `http://127.0.0.1:10080`) that will inspect requests sent to the AWS endpoints before forwarding on to generate IAM policy statements. The CA key/certificate pair will be automatically generated and stored within `~/.iamlive/` by default.\n\n#### AWS CLI\n\nTo set the appropriate CA bundle in the AWS CLI, you should either use the `--set-ini` option or add the following to the relevant profile in `.aws/config`:\n\n```\nca_bundle = ~/.iamlive/ca.pem\n```\n\nAlternatively, you can run the following in the window executing your CLI commands:\n\n```\nexport AWS_CA_BUNDLE=~/.iamlive/ca.pem\n```\n\nYou must also set the proxy settings for your session by running the following in the window executing your CLI commands:\n\n```\nexport HTTP_PROXY=http://127.0.0.1:10080\nexport HTTPS_PROXY=http://127.0.0.1:10080\n```\n\n#### AWS SDKs\n\nTo enable proxy mode in the various AWS SDKs, you can run the following in the window executing your application prior to it starting:\n\nFor AWS SDKs:\n\n```\nexport HTTP_PROXY=http://127.0.0.1:10080\nexport HTTPS_PROXY=http://127.0.0.1:10080\nexport AWS_CA_BUNDLE=~/.iamlive/ca.pem\n```\n\nCheck the [official docs](https://docs.aws.amazon.com/credref/latest/refdocs/setting-global-ca_bundle.html) for further details on setting the CA bundle.\n\n#### Azure CLI and SDKs\n\nTo enable proxy mode in the Azure CLI or SDK, you can run the following in the window executing your application prior to it starting:\n\n```\nexport HTTP_PROXY=http://127.0.0.1:10080\nexport HTTPS_PROXY=http://127.0.0.1:10080\nexport REQUESTS_CA_BUNDLE=~/.iamlive/ca.pem\n```\n\n#### Google Cloud CLI and SDKs\n\nTo enable proxy mode in the Google Cloud CLI or SDKs, you can run the following in the window executing your application prior to it starting:\n\n```\ngcloud config set proxy/type http\ngcloud config set proxy/address 127.0.0.1\ngcloud config set proxy/port 10080\ngcloud config set core/custom_ca_certs_file ~/.iamlive/ca.pem\n```\n\n## FAQs\n\n_I get a message \"package embed is not in GOROOT\" when attempting to build myself_\n\nThis project requires Go 1.16 or above to be built correctly (due to embedding feature).\n\n## Acknowledgements\n\nThis project makes use of [Parliament](https://github.com/duo-labs/parliament) and was assisted by Scott Piper's [CSM explainer](https://summitroute.com/blog/2020/05/25/client_side_monitoring/). Thanks also to Noam Dahan's [research](https://ermetic.com/whats-new/blog/auditing-passrole-a-problematic-privilege-escalation-permission/) into missing `iam:PassRole` dependant actions.\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.5751953125,
          "content": "module github.com/iann0036/iamlive\n\ngo 1.16\n\nrequire (\n\tgithub.com/buger/goterm v1.0.0\n\tgithub.com/clbanning/mxj/v2 v2.5.5\n\tgithub.com/iann0036/goproxy v0.0.0-20210510114007-b2700d29a571\n\tgithub.com/kenshaw/baseconv v0.1.1\n\tgithub.com/mitchellh/go-homedir v1.1.0\n\tgithub.com/oliveagle/jsonpath v0.0.0-20180606110733-2e52cf6e6852 // indirect\n\tgithub.com/smartystreets/goconvey v1.6.4 // indirect\n\tgithub.com/tidwall/gjson v1.16.0 // indirect\n\tgithub.com/tidwall/pretty v1.2.1 // indirect\n\tgithub.com/ucarion/urlpath v0.0.0-20200424170820-7ccc79b76bbb // indirect\n\tgopkg.in/ini.v1 v1.62.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.556640625,
          "content": "github.com/buger/goterm v1.0.0 h1:ZB6uUlY8+sjJyFGzz2WpRqX2XYPeXVgtZAOJMwOsTWM=\ngithub.com/buger/goterm v1.0.0/go.mod h1:16STi3LquiscTIHA8SXUNKEa/Cnu4ZHBH8NsCaWgso0=\ngithub.com/clbanning/mxj/v2 v2.5.5 h1:oT81vUeEiQQ/DcHbzSytRngP6Ky9O+L+0Bw0zSJag9E=\ngithub.com/clbanning/mxj/v2 v2.5.5/go.mod h1:hNiWqW14h+kc+MdF9C6/YoRfjEJoR3ou6tn/Qo+ve2s=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/iann0036/goproxy v0.0.0-20210510114007-b2700d29a571 h1:K4C1opSq+EjlLkYUNUKpg/1w0MduaGFDl/iozfZfT4s=\ngithub.com/iann0036/goproxy v0.0.0-20210510114007-b2700d29a571/go.mod h1:amSgpNkX5MQL0glEHvPGg0UKbKOhBVem3kNHGhlINS4=\ngithub.com/iann0036/goproxy/ext v0.0.0-20210327125723-db8542d80343 h1:oaTtJCbhCLSueJFpPwaxWZDKBBBkTv6+y5lprHPGFWs=\ngithub.com/iann0036/goproxy/ext v0.0.0-20210327125723-db8542d80343/go.mod h1:3SmG3m42N72tivanmYJdY5joEWn5/bEzgawDLBA7T6g=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/kenshaw/baseconv v0.1.1 h1:oAu/C7ipUT2PqT9DT0mZDGDg4URIglizZMjPv9oCu0E=\ngithub.com/kenshaw/baseconv v0.1.1/go.mod h1:yy9zGmnnR6vgOxOQb702nVdAG30JhyYZpj/5/m0siRI=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/oliveagle/jsonpath v0.0.0-20180606110733-2e52cf6e6852 h1:Yl0tPBa8QPjGmesFh1D0rDy+q1Twx6FyU7VWHi8wZbI=\ngithub.com/oliveagle/jsonpath v0.0.0-20180606110733-2e52cf6e6852/go.mod h1:eqOVx5Vwu4gd2mmMZvVZsgIqNSaW3xxRThUJ0k/TPk4=\ngithub.com/rogpeppe/go-charset v0.0.0-20180617210344-2471d30d28b4/go.mod h1:qgYeAmZ5ZIpBWTGllZSQnw97Dj+woV0toclVaRGI8pc=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/tidwall/gjson v1.16.0 h1:SyXa+dsSPpUlcwEDuKuEBJEz5vzTvOea+9rjyYodQFg=\ngithub.com/tidwall/gjson v1.16.0/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/pretty v1.2.1 h1:qjsOFOWWQl+N3RsoF5/ssm1pHmJJwhjlSbZ51I6wMl4=\ngithub.com/tidwall/pretty v1.2.1/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/ucarion/urlpath v0.0.0-20200424170820-7ccc79b76bbb h1:Ywfo8sUltxogBpFuMOFRrrSifO788kAFxmvVw31PtQQ=\ngithub.com/ucarion/urlpath v0.0.0-20200424170820-7ccc79b76bbb/go.mod h1:ikPs9bRWicNw3S7XpJ8sK/smGwU9WcSVU3dy9qahYBM=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20210331175145-43e1dd70ce54 h1:rF3Ohx8DRyl8h2zw9qojyLHLhrJpEMgyPOImREEryf0=\ngolang.org/x/sys v0.0.0-20210331175145-43e1dd70ce54/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngopkg.in/ini.v1 v1.62.0 h1:duBzk771uxoUuOlyRLkHsygud9+5lrlGjdFBb4mSKDU=\ngopkg.in/ini.v1 v1.62.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\n"
        },
        {
          "name": "iamlivecore",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.11328125,
          "content": "package main\n\nimport (\n\t_ \"embed\"\n\n\t\"github.com/iann0036/iamlive/iamlivecore\"\n)\n\nfunc main() {\n\tiamlivecore.Run()\n}\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}