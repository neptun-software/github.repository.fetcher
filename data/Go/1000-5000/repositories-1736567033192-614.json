{
  "metadata": {
    "timestamp": 1736567033192,
    "page": 614,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "getzep/zep",
      "stars": 2827,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.55859375,
          "content": "# If you prefer the allow list template instead of the deny list, see community template:\n# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore\n#\n# Binaries for programs and plugins\nout/\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Secrets\n.env\n.env.local\n\n# Test data\ntest_data\n\n# Test binary, built with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Dependency directories (remove the comment below to include it)\n# vendor/\n\n# Go workspace file\n.idea\n.vscode\n\n# VSCode local history\n.history\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.0986328125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nfounders@getzep.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.2978515625,
          "content": "# Contributing to Zep\n\nThank you for your interest in contributing to Zep! We appreciate your efforts and look forward to collaborating with you.\n\n### Getting Started\n\n1. **Fork and Clone**: Start by forking the [Zep repo](https://github.com/getzep/zep). Then, clone your fork locally:\n\n```\ngit clone https://github.com/<your-github-username>/zep.git\n```\n\n2. **Set Upstream**: Keep your fork synced with the upstream repo by adding it as a remote:\n\n```\ngit remote add upstream https://github.com/getzep/zep.git\n```\n\n3. **Create a Feature Branch**: Always create a new branch for your work. This helps in keeping your changes organized and easier for maintainers to review.\n\n```\ngit checkout -b feature/your-feature-name\n```\n\n### Setting \"Development\" Mode\n\"Development\" mode forces Zep's log level to \"debug\" and disables caching of the web UI. This is useful when developing Zep locally.\n\nTo enable \"development\" mode, set the `ZEP_DEVELOPMENT` environment variable to `true`:\n\n```\nexport ZEP_DEVELOPMENT=true\n```\n\nor modify your `.env` file accordingly.\n\n\n### Running the Database and NLP Server Stack\n\nA development stack can be started by running:\n\n ```bash\n make dev\n ```\n\nThis starts the DB and NLP services using docker compose and exposes the DB on port 5432 and the NLP service on port 5557. \nThe database volume is also not persistent, so it will be wiped out when the stack is stopped.\n\n### Automatically Rebuilding Zep using Go Watch\n\n**Note:** You will need to have [Go Watch](https://github.com/mitranim/gow) installed.\n\nIf you want to automatically rebuild Zep when you make changes to the code, run:\n\n```\nmake watch\n```\n\nThe above sets \"Development\" mode and binds Zep to localhost only.\n\n\n### Rebuilding Tailwind CSS\n\nIf you make changes to the CSS used by HTML template files, you will need to rebuild the Tailwind CSS file. \n\nRun:\n```\nmake web\n```\n\n### Building Zep\n\nFollow these steps to build Zep locally:\n\n1. Navigate to the project root:\n\n```\ncd zep\n```\n\n2. Build the project:\n\n```\nmake build\n```\n\nThis will produce the binary in `./out/bin`.\n\n### Running Tests\n\nIt's essential to ensure that your code passes all tests. Run the tests using:\n\n```\nmake test\n```\n\nIf you want to check the coverage, run:\n\n```\nmake coverage\n```\n\n### Code Linting\n\nEnsure your code adheres to our linting standards:\n\n```\nmake lint\n```\n\n### Generating Swagger Docs\n\nIf you make changes to the API or its documentation, regenerate the Swagger docs:\n\n```\nmake swagger\n```\n\n### Submitting Changes\n\n1. **Commit Your Changes**: Use meaningful commit messages that describe the changes made.\n\n```\ngit add .\ngit commit -m \"Your detailed commit message\"\n```\n\n2. **Push to Your Fork**:\n\n```\ngit push origin feature/your-feature-name\n```\n\n3. **Open a Pull Request**: Navigate to the [Zep GitHub repo](https://github.com/getzep/zep) and click on \"New pull request\". Choose your fork and the branch you've been working on. Submit the PR with a descriptive message.\n\n### Feedback\n\nMaintainers will review your PR and provide feedback. If any changes are needed, make them in your feature branch and push to your fork. The PR will update automatically.\n\n### Final Notes\n\n- Always be respectful and kind.\n- If you're unsure about something, ask. We're here to help.\n- Once again, thank you for contributing to Zep!\n\n---\n\nIf you encounter any issues or have suggestions, please open an issue!"
        },
        {
          "name": "Dockerfile.ce",
          "type": "blob",
          "size": 0.443359375,
          "content": "FROM golang:1.22.5-bookworm AS BUILD\n\nRUN mkdir /app\nWORKDIR /app\nCOPY . .\nWORKDIR /app/src\nRUN go mod download\nWORKDIR /app\nRUN make -f Makefile.ce build\n\nFROM debian:bookworm-slim AS RUNTIME\nRUN apt-get update && apt-get install -y ca-certificates && rm -rf /var/lib/apt/lists/*\nWORKDIR /app\nCOPY --from=BUILD /app/out/bin/zep /app/\n# Ship with default config that can be overridden by ENV vars\nCOPY zep.yaml /app/\n\nEXPOSE 8000\nENTRYPOINT [\"/app/zep\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile.ce",
          "type": "blob",
          "size": 3.0224609375,
          "content": "GOCMD=go\n\nVERSION?=0.0.0\nSERVICE_PORT?=\nDOCKER_REGISTRY?=\nBINARY_NAME?=zep\nEXPORT_RESULT?=false # for CI please set EXPORT_RESULT to true\nBINARY_DEST=./out/bin\nBINARY=$(BINARY_DEST)/zep\nGOTEST_CMD=$(GOCMD) test\nGOVET_CMD=$(GOCMD) vet\nGORUN_CMD=$(GOCMD) run\nGOBUILD_CMD=$(GOCMD) build\n\nWD=$(shell pwd)\n\nSRC_DIR=$(WD)/src\nAPP_DIR=$(SRC_DIR)\n\nRUN_ARGS=-r\n\nPACKAGE := github.com/getzep/zep/lib/config\nVERSION := $(shell git describe --tags --always --abbrev=0 --match='v[0-9]*.[0-9]*.[0-9]*' 2> /dev/null | sed 's/^.//')\nCOMMIT_HASH := $(shell git rev-parse --short HEAD)\nBUILD_TIMESTAMP := $(shell date '+%Y-%m-%dT%H:%M:%S%z')\n\nLDFLAGS = -X '${PACKAGE}.Version=${VERSION}' \\\n          -X '${PACKAGE}.CommitHash=${COMMIT_HASH}' \\\n          -X '${PACKAGE}.BuildTime=${BUILD_TIMESTAMP}'\n\nGREEN  := $(shell tput -Txterm setaf 2)\nYELLOW := $(shell tput -Txterm setaf 3)\nWHITE  := $(shell tput -Txterm setaf 7)\nCYAN   := $(shell tput -Txterm setaf 6)\nRESET  := $(shell tput -Txterm sgr0)\n\n.PHONY: all test build dev-dump restore-db-from-dump help\n\nall: test build\n\nrun:\n\t$(GORUN_CMD) -ldflags=\"${LDFLAGS}\" $(APP_DIR)/... $(RUN_ARGS)\n\nbuild:\n\tmkdir -p $(BINARY_DEST)\n\t$(GOBUILD_CMD) -ldflags=\"${LDFLAGS}\" -o $(BINARY) $(APP_DIR)\n\nbuild-run: build\n\t$(BINARY) $(RUN_ARGS)\n\n## Go Watch to run server and restart on changes\n## https://github.com/mitranim/gow\nwatch:\n\tgow run $(APP_DIR)/... $(RUN_ARGS)\n\ntest: ## Run project tests\n\t$(GOTEST_CMD) -shuffle on -race $(SRC_DIR)/... -p 1\n\nclean: ## Remove build related file\n\trm -f $(BINARY)\n\trm -f ./junit-report.xml checkstyle-report.xml ./coverage.xml ./profile.cov yamllint-checkstyle.xml\n\ncoverage: ## Run the tests of the project and export the coverage\n\t$(GOTEST) -cover -covermode=count -coverprofile=profile.cov $(SRC_DIR)/...\n\t$(GOCMD) tool cover -func profile.cov\nifeq ($(EXPORT_RESULT), true)\n\tGO111MODULE=off go get -u github.com/AlekSi/gocov-xml\n\tGO111MODULE=off go get -u github.com/axw/gocov/gocov\n\tgocov convert profile.cov | gocov-xml > coverage.xml\nendif\n\n## Lint:\nlint:\n\tcd src && golangci-lint run --sort-results -c golangci.yaml\n\n## Run the dev stack docker compose setup. This exposes DB and NLP services\n## for local development. This does not start the Zep service.\ndev:\n\tdocker compose up -d\n\n## Docker:\ndocker-build: ## Use the dockerfile to build the container\n\tDOCKER_BUILDKIT=1 docker build --rm --tag $(BINARY_NAME) .\n\ndocker-release: ## Release the container with tag latest and version\n\tdocker tag $(BINARY_NAME) $(DOCKER_REGISTRY)$(BINARY_NAME):latest\n\tdocker tag $(BINARY_NAME) $(DOCKER_REGISTRY)$(BINARY_NAME):$(VERSION)\n\t# Push the docker images\n\tdocker push $(DOCKER_REGISTRY)$(BINARY_NAME):latest\n\tdocker push $(DOCKER_REGISTRY)$(BINARY_NAME):$(VERSION)\n\n\n## Help:\nhelp: ## Show this help.\n\t@echo ''\n\t@echo 'Usage:'\n\t@echo '  ${YELLOW}make${RESET} ${GREEN}<target>${RESET}'\n\t@echo ''\n\t@echo 'Targets:'\n\t@awk 'BEGIN {FS = \":.*?## \"} { \\\n\t\tif (/^[a-zA-Z_-]+:.*?##.*$$/) {printf \"    ${YELLOW}%-20s${GREEN}%s${RESET}\\n\", $$1, $$2} \\\n\t\telse if (/^## .*$$/) {printf \"  ${CYAN}%s${RESET}\\n\", substr($$1,4)} \\\n\t\t}' $(MAKEFILE_LIST)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.7333984375,
          "content": "<p align=\"center\">\n  <a href=\"https://www.getzep.com/\">\n    <img src=\"https://github.com/user-attachments/assets/119c5682-9654-4257-8922-56b7cb8ffd73\" width=\"150\" alt=\"Zep Logo\">\n  </a>\n</p>\n\n<h1 align=\"center\">\nZep: The Memory Foundation For Your AI Stack\n</h1>\n<h2 align=\"center\">Build AI agents that continually learn. Power personalized experiences.</h2>\n<br />\n<p align=\"center\">\n  <a href=\"https://discord.gg/W8Kw6bsgXQ\"><img\n    src=\"https://dcbadge.vercel.app/api/server/W8Kw6bsgXQ?style=flat\"\n    alt=\"Chat on Discord\"\n  /></a>\n  <a href=\"https://twitter.com/intent/follow?screen_name=zep_ai\" target=\"_new\"><img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/zep_ai\"></a>\n  <a href=\"https://pypi.org/project/zep-python\"><img alt=\"PyPI - Downloads\" src=\"https://img.shields.io/pypi/dw/zep-python?label=pypi%20downloads\"></a>\n  <a href=\"https://www.npmjs.com/package/@getzep/zep-js\"><img alt=\"@getzep/zep-js\" src=\"https://img.shields.io/npm/dw/%40getzep/zep-js?label=npm%20downloads\"></a>\n  <img src=\"https://github.com/getzep/zep/actions/workflows/build-test.yml/badge.svg\" alt=\"build/test\" />\n  <img\n  src=\"https://github.com/getzep/zep/actions/workflows/golangci-lint.yml/badge.svg\"\n  alt=\"GoLangCI Lint\"\n  />\n</p>\n\n<p align=\"center\">\n<a href=\"https://help.getzep.com/ce/quickstart\">Quick Start</a> | \n<a href=\"https://help.getzep.com/memory\">Documentation</a> | \n<a href=\"https://help.getzep.com\">Zep Cloud Docs</a>\n</p>\n\n## What is Zep? 💬\n\nZep enhances your AI agent's knowledge through continuous learning from user interactions, enabling personalized experiences and improved accuracy.\n\n### How Zep works\n\n1. Add chat messages or data artifacts to Zep during each user interaction or agent event.\n2. Zep intelligently integrates new information into the user's Knowledge Graph, updating existing context as needed.\n3. Retrieve relevant facts from Zep for subsequent interactions or events.\n\nZep's temporal Knowledge Graph maintains contextual information about facts, enabling reasoning about state changes and providing data provenance insights. Each fact includes `valid_at` and `invalid_at` dates, allowing agents to track changes in user preferences, traits, or environment.\n\n### Zep is fast\n\nRetrieving facts is simple and very fast. Unlike other memory solutions, Zep does not use agents to ensure facts are relevant. It precomputes facts, entity summaries, and other artifacts asynchronously. Retrieval speed primarily depends on the embedding service's performance.\n\n### Zep supports many types of data\n\nYou can add a variety of data artifacts to Zep:\n- Adding chat history messages.\n- Ingestion of JSON and unstructured text. (Coming soon)\n\n\nZep supports chat session, user, and group-level graphs. Group graphs allow for capturing organizational knowledge.\n\n## Getting Started\n\n### Install Server\n\nPlease see the [Zep Quick Start Guide](https://help.getzep.com/ce/quickstart) for important configuration information.\n\n```bash\n./zep pull\n./zep up\n```\n> [!NOTE]\n> Make sure to set the `secret` value in the `zep.yaml` configuration file.\n>\n> Additionally, make sure that you expose an `OPENAI_API_KEY` environment variable either in a local .env file or by running\n> ```bash\n> export OPENAI_API_KEY=your_openai_api_key\n> ```\n\n### Install SDK\n```bash\npip install zep-python\n```\n\n**or**\n\n```bash\nnpm i @getzep/zep-js\n```\n\n## Simple APIs with SDKs for Python, TypeScript, and Go\n\nPersisting chat history memory is simple and fast.\n\n```python\nresult = await client.memory.add(session_id, messages=messages)\n```\n\nZep's high-level memory API offers an opinionated retrieval API, which uses BM25, semantic, and graph search to retrieve facts relevant to the current conversation. Results are reranked by distance from the user node, further improving relevance.\n\n```python\nmemory = client.memory.get(session_id=\"session_id\")\n```\n\nLower-level APIs for search and CRUD are also available.\n\n## Why does Zep use a temporal Knowledge Graph?\n\n> A Knowledge Graph is a network of interconnected facts, such as “Kendra loves Adidas shoes.” Each fact is a “triplet” represented by two entities, or nodes (”Kendra”, “Adidas shoes”), and their relationship, or edge (”loves”).\n\nKnowledge Graphs allow us to model an agent's complex world and offer a superior retrieval approach than semantic search alone, which is commonly used in RAG. Most approaches to building Knowledge Graphs don't reason well with state changes. Facts inevitably change over time as users provide new information or business data changes.\n\n<p align=\"center\">\n<img src=\"https://github.com/user-attachments/assets/52ecafc9-5a83-44cc-a020-04bc50904d0b\" alt=\"Graphiti Overview\" width=\"650\">\n</p>\n\nMost graph-building tools don't reason well with state changes. Zep incorporates a temporal Knowledge Graph library, [Graphiti](https://github.com/getzep/graphiti), which we developed to address this challenge. What makes Graphiti unique is its ability to autonomously build a Knowledge Graph while handling changing relationships and maintaining historical context.\n\nGraphiti also offers Zep the ability to ingest chat history, JSON business data, and unstructured text.\n\n## Is Zep tied to a framework such as LangChain?\n\nZep is framework agnostic. It can be used with LangChain, LangGraph, Chainlit, Microsoft Autogen, and more.\n\n## What is Zep Community Edition? ⭐️\n\nZep Community Edition is an open-source Zep distribution. It shares APIs with Zep Cloud and has [comprehensive documentation](https://help.getzep.com) available.\n\n## What is Zep Cloud? ⚡️\n\n[Zep Cloud](https://www.getzep.com/) is a managed service with Zep Community Edition at its core. In addition to Zep Community Edition's memory layer, Zep Cloud offers:\n\n- **Low Latency, Scalability, High Availability:** Our cloud is designed to scale to the needs of customers with millions of DAUs and is SOC II Type 2 certified. Zep utilizes self-hosted LLMs and embedding models, offering customers very low-latency memory retrieval and graph-building.\n- **Dialog Classification:** Instantly and accurately classify chat dialog. Understand user intent and emotion, segment users, and more. Route chains based on semantic context, and trigger events.\n- **Structured Data Extraction:** Quickly extract business data from chat conversations using a schema you define. Understand what your assistant should ask for next to complete the task.\n\n## Why use Zep for long-term memory?\n\n### Why not just include the entire chat history in the prompt?\n\nWith increased LLM context lengths, including the entire chat history, RAG results, and other instructions in a prompt may be tempting. Unfortunately, this has resulted in poor temporal reasoning, poor recall, hallucinations, and slow and expensive inference.\n\n### Why not use Redis, Postgres, or ... to persist chat histories?\n\nAs discussed above, providing just the chat history to an LLM can often result in poor temporal reasoning.\n\n### Zep is purpose-built for Agent and Assistant applications\n\nUsers, Sessions, and Chat Messages are first-class abstractions in Zep. This allows simple and flexible management of chat memory, including the execution of Right To Be Forgetten requests and other privacy compliance-related tasks with single-API call.\n\n## Zep Language Support and Ecosystem\n\n### Does Zep have Python, TypeScript, and Go support?\n\nYes - Zep offers Python & TypeScript/JS SDKs for easy integration with your Assistant app. We also have examples of using Zep with popular frameworks - see below.\n\n### Can I use Zep with LangChain, LlamaIndex, Vercel AI, n8n, FlowWise, ...?\n\nYes - the Zep team and community contributors have built integrations with Zep, making it simple to, for example, drop Zep's memory components into a LangChain app. Please see the [Zep Documentation](https://help.getzep.com/) and your favorite framework's documentation.\n\n## Zep Community Edition LLM Service Dependencies\n\nZep Community Edition relies on an external LLM API service to function. Any OpenAI-compatible LLM API is supported. Providers such as Anthropic can be used via a proxy such as LiteLLM. You will also need to configure LiteLLM with an embedding service.\n\n## Does Zep collect telemetry?\nIn order to better understand how Zep is used, we can collect telemetry data. This is optional and can be disabled by modifying the `zep.yaml` config file as below.\n\nWe do not collect any PII or any of your data, other than the `org_name` you may optionally set in the `telemetry` config. We only collect anonymized data about how Zep is used. \n\n```yaml\ntelemetry:\n  disabled: false\n```\n\n## Examples\n\n### Python SDK\n```python\nimport uuid\nfrom zep_python.client import AsyncZep\nfrom zep_python.types import Message\n\nclient = AsyncZep(\n    api_key=API_KEY,\n    base_url=BASE_URL,\n)\n\nuser_id = uuid.uuid4().hex # A new user identifier\nnew_user = await client.user.add(\n    user_id=user_id,\n    email=\"user@example.com\",\n    first_name=\"Jane\",\n    last_name=\"Smith\",\n    metadata={\"foo\": \"bar\"},\n)\n\n# create a chat session\nsession_id = uuid.uuid4().hex # A new session identifier\nsession = await client.memory.add_session(\n    session_id=session_id,\n    user_id=user_id,\n    metadata={\"foo\" : \"bar\"}\n)\n\n# Add a memory to the session\nawait client.memory.add_memory(\n    session_id=session_id,\n    messages=[\n        Message(\n            role_type = \"user\", # One of (\"system\", \"assistant\", \"user\", \"function\", \"tool\")\n            role = \"Researcher\", # Optional, a use case specific string representing the role of the user\n            content = \"Who was Octavia Butler?\", # The message content\n        )\n    ],\n)\n\n# Get session memory\nmemory = await client.memory.get(session_id=session_id)\nmessages = memory.messages # List of messages in the session (quantity determined by optional lastn parameter in memory.get)\nrelevant_facts = memory.relevant_facts # List of facts relevant to the recent messages in the session\n\n# Search user facts across all sessions\nsearch_response = await client.memory.search_sessions(\n    user_id=user_id,\n    search_scope=\"facts\",\n    text=\"What science fiction books did I recently read?\",\n)\nfacts = [r.fact for r in search_response.results]\n```\n\n### TypeScript SDK\n```typescript\nimport { v4 as uuidv4 } from 'uuid';\nimport { ZepClient } from '@getzep/zep-js';\nimport type { CreateUserRequest, CreateSessionRequest, SessionSearchQuery } from '@getzep/zep-js/api';\n\nconst client = new ZepClient({\n    apiKey: API_KEY,\n    baseUrl: BASE_URL,\n});\n\n// A new user identifier\nconst userId = uuidv4();\nconst userRequest: CreateUserRequest = {\n    userId: userId,\n    email: \"user@example.com\",\n    firstName: \"Jane\",\n    lastName: \"Smith\",\n    metadata: { foo: \"bar\" },\n};\nconst newUser = await client.user.add(userRequest);\n\n// Create a chat session\nconst sessionId = uuidv4();\nconst sessionRequest: CreateSessionRequest = {\n    sessionId: sessionId,\n    userId: userId,\n    metadata: { foo: \"bar\" },\n};\n\n// A new session identifier\nconst session = await client.memory.addSession(sessionRequest);\n\n// Add a memory to the session\nawait client.memory.add(sessionId, {\n    messages: [\n        {\n            role: \"Researcher\",\n            roleType: \"user\",\n            content: \"Who was Octavia Butler?\",\n        },\n    ],\n});\n\n// Get session memory\nconst memory = await client.memory.get(sessionId);\nconst messages = memory.messages; // List of messages in the session (quantity determined by optional lastN parameter in memory.get)\nconst relevantFacts = memory.relevantFacts; // List of facts relevant to the recent messages in the session\n\n// Search user facts across all sessions\nconst searchQuery: SessionSearchQuery = {\n    userId: userId,\n    searchScope: \"facts\",\n    text: \"What science fiction books did I recently read?\",\n};\nconst searchResponse = await client.memory.searchSessions(searchQuery);\nconst facts = searchResponse.results?.map(result => result.fact);\n```\n\n## How does Zep Community Edition differ from Zep Open Source v0.x?\n\nZep Open Source is an older version of Zep that did not use a Knowledge Graph to persist and recall memory.\n\nSome additional changes:\n\n- The Zep OSS web UI has been deprecated in favor of significantly expanded SDK support.\n- Zep CE no longer offers Document Collections. We suggest using one of many hosted or local vector databases.\n- Zep CE supports many LLM services and local servers that offer OpenAI-compatible APIs. Other services may be used with an LLM proxy.\n- Zep CE no longer ships with a local embedding service and named entity extractor.\n\n### Is there a migration path from Zep Open Source to Zep Community Edition?\n\nSignificant changes have been made to Zep, and unfortunately, we have not been able to devise a migration path from Zep OSS to Zep CE.\n\nZep OSS will remain available in our container repo, but we will not see future enhancements or bug fixes. The code is available in the `legacy` branch in this repo.\n\n## Contributing\n\nWe welcome contributions. For more, see the [`CONTRIBUTING`](CONTRIBUTING.md) file in this repo.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3916015625,
          "content": "# Security Policy\n\n## Supported Versions\n\nUse this section to tell people about which versions of your project are\ncurrently being supported with security updates.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.x.x   | :white_check_mark: |\n\n## Reporting a Vulnerability\n\nPlease use GitHub's Private Vulnerability Reporting mechanism found in the Security section of this repo.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.ce.yaml",
          "type": "blob",
          "size": 1.998046875,
          "content": "name: zep-ce\n\nservices:\n  zep:\n    image: zepai/zep:latest\n    #    build:\n    #      context: .\n    #      dockerfile: Dockerfile.ce\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./zep.yaml:/app/zep.yaml\n    environment:\n      - ZEP_CONFIG_FILE=zep.yaml\n    networks:\n      - zep-network\n    depends_on:\n      graphiti:\n        condition: service_healthy\n      db:\n        condition: service_healthy\n  db:\n    image: ankane/pgvector:v0.5.1\n    container_name: zep-ce-postgres\n    restart: on-failure\n    shm_size: \"128mb\" # Increase this if vacuuming fails with a \"no space left on device\" error\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    networks:\n      - zep-network\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-q\", \"-d\", \"postgres\", \"-U\", \"postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n    volumes:\n      - zep-db:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n  graphiti:\n    image: zepai/graphiti:0.3\n    ports:\n      - \"8003:8003\"\n    env_file:\n      - .env\n    networks:\n      - zep-network\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"python\",\n          \"-c\",\n          \"import urllib.request; urllib.request.urlopen('http://localhost:8003/healthcheck')\",\n        ]\n      interval: 10s\n      timeout: 5s\n      retries: 3\n    depends_on:\n      neo4j:\n        condition: service_healthy\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - MODEL_NAME=gpt-4o-mini\n      - NEO4J_URI=bolt://neo4j:7687\n      - NEO4J_USER=neo4j\n      - NEO4J_PASSWORD=zepzepzep\n      - PORT=8003\n  neo4j:\n    image: neo4j:5.22.0\n    networks:\n      - zep-network\n    healthcheck:\n      test: wget http://localhost:7687 || exit 1\n      interval: 1s\n      timeout: 10s\n      retries: 20\n      start_period: 3s\n    ports:\n      - \"7474:7474\" # HTTP\n      - \"7687:7687\" # Bolt\n    volumes:\n      - neo4j_data:/data\n    environment:\n      - NEO4J_AUTH=neo4j/zepzepzep\nvolumes:\n  neo4j_data:\n  zep-db:\nnetworks:\n  zep-network:\n    driver: bridge"
        },
        {
          "name": "go.work",
          "type": "blob",
          "size": 0.0205078125,
          "content": "go 1.21.5\n\nuse ./src\n"
        },
        {
          "name": "go.work.sum",
          "type": "blob",
          "size": 2.0380859375,
          "content": "github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bits-and-blooms/bitset v1.13.0/go.mod h1:7hO7Gc7Pp1vODcmWvKMRA9BNmbv6a/7QIWpPxHddWR8=\ngithub.com/cenkalti/backoff/v3 v3.2.2/go.mod h1:cIeZDE3IrqwwJl6VUwCN6trj1oXrTS4rc0ij+ULvLYs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/prometheus/client_golang v1.20.2/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.55.0/go.mod h1:2SECS4xJG1kd8XF9IcM1gMX6510RAEL65zxzNImwdc8=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/rs/zerolog v1.31.0/go.mod h1:/7mN4D5sKwJLZQ2b/znpjC3/GQWY/xaDXUM0kKWRHss=\ngithub.com/sony/gobreaker v1.0.0/go.mod h1:ZKptC7FHNvhBz7dN2LGjPVBz2sZJmc0/PkyDJOjmxWY=\ngithub.com/uptrace/opentelemetry-go-extra/otelsql v0.2.3 h1:LNi0Qa7869/loPjz2kmMvp/jwZZnMZ9scMJKhDJ1DIo=\ngithub.com/uptrace/opentelemetry-go-extra/otelsql v0.2.3/go.mod h1:jyigonKik3C5V895QNiAGpKYKEvFuqjw9qAEZks1mUg=\ngo.opentelemetry.io/otel/sdk v1.28.0/go.mod h1:oYj7ClPUA7Iw3m+r7GeEjz0qckQRJK2B8zjcZEfu7Pg=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/term v0.23.0/go.mod h1:DgV24QBUrK6jhZXl+20l6UWznPlwAHm1Q1mGHtydmSk=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "zep",
          "type": "blob",
          "size": 0.7958984375,
          "content": "#!/bin/bash\n\n# List of supported docker compose commands\nDOCKER_COMPOSE_COMMANDS=(\"up\" \"pull\" \"down\" \"logs\" \"ps\" \"restart\" \"stop\" \"start\")\n\n_make() {\n    make -f Makefile.ce \"${@:1}\"\n}\n\nCMD=\"${1}\"\n\n# Function to check if a value is in an array\ncontains_element() {\n    local e match=\"$1\"\n    shift\n    for e; do [[ \"$e\" == \"$match\" ]] && return 0; done\n    return 1\n}\n\n# Check if the command is in the list of supported docker compose commands\nif contains_element \"$CMD\" \"${DOCKER_COMPOSE_COMMANDS[@]}\"; then\n    docker compose -f docker-compose.ce.yaml \"$CMD\" \"${@:2}\"\nelif [ \"$CMD\" = \"make\" ]; then\n    _make \"${@:2}\"\nelse\n    echo \"${CMD} is not a valid command\"\n    echo \"Usage: \"\n    echo \"     ./zep [$(printf \"%s | \" \"${DOCKER_COMPOSE_COMMANDS[@]}\" | sed 's/ | $//')]\"\n    echo \"     ./zep make <target>\"\nfi\n"
        },
        {
          "name": "zep.yaml",
          "type": "blob",
          "size": 1.66796875,
          "content": "log:\n  # debug, info, warn, error, panic, dpanic, or fatal. Default = info\n  level: info\n  # How should logs be formatted? Setting to \"console\" will print human readable logs\n  # whie \"json\" will print structured JSON logs. Default is \"json\".\n  format: json\nhttp:\n  # Host to bind to. Default is 0.0.0.0\n  host: 0.0.0.0\n  # Port to bind to. Default is 8000\n  port: 8000\n  max_request_size: 5242880\npostgres:\n  user: postgres\n  password: postgres\n  host: db\n  port: 5432\n  database: postgres\n  schema_name: public\n  read_timeout: 30\n  write_timeout: 30\n  max_open_connections: 10\n# Carbon is a package used for dealing with time - github.com/golang-module/carbon\n# It is primarily used for generating humand readable relative time strings like \"2 hours ago\".\n# See the list of supported languages here https://github.com/golang-module/carbon?tab=readme-ov-file#i18n\ncarbon:\n  locale: en\ngraphiti:\n   # Base url to the graphiti service\n  service_url: http://graphiti:8003\n# In order to authenicate API requests to the Zep service, a secret must be provided.\n# This secret should be kept secret between the Zep service and the client. It can be any string value.\n# When making requests to the Zep service, include the secret in the Authorization header.\napi_secret:\n# In order to better understand how Zep is used, we can collect telemetry data.\n# This is optional and can be disabled by setting disabled to true.\n# We do not collect any PII or any of your data. We only collect anonymized data\n# about how Zep is used.\ntelemetry:\n  disabled: false\n  # Please provide an identifying name for your organization so can get a better understanding\n  # about who is using Zep. This is optional.\n  organization_name:\n"
        }
      ]
    }
  ]
}