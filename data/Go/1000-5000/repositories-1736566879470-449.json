{
  "metadata": {
    "timestamp": 1736566879470,
    "page": 449,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "notaryproject/notary",
      "stars": 3241,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.26171875,
          "content": "/.vscode\n/cmd/notary-server/notary-server\n/cmd/notary-server/local.config.*\n/cmd/notary-signer/notary-signer\n/cmd/notary-signer/local.config.*\n/cmd/escrow/escrow\n/cmd/escrow/local.config.*\ncover\nbin\ncross\n.cover\n*.swp\n.idea\n*.iml\n*.test\ncoverage*.txt\ngosec_output.csv\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 18.11328125,
          "content": "# Changelog\n\n## [v0.7.0](https://github.com/docker/notary/releases/tag/v0.7.0) 12/01/2021\n+ Switch to Go modules [#1523](https://github.com/theupdateframework/notary/pull/1523)\n+ Use golang/x/crypto for ed25519 [#1344](https://github.com/theupdateframework/notary/pull/1344)\n+ Update Go version\n+ Update dependency versions\n+ Fixes from using Gosec for source analysis\n\n## [v0.6.1](https://github.com/docker/notary/releases/tag/v0.6.0) 04/10/2018\n+ Fixed bug where CLI requested admin privileges for all metadata operations, including listing targets on a repo [#1315](https://github.com/theupdateframework/notary/pull/1315)\n+ Prevented notary signer from being dumpable or being ptraced in Linux, except in debug mode [#1327](https://github.com/theupdateframework/notary/pull/1327)\n+ Bumped JWT dependency to fix potential Invalid Curve Attack on NIST curves within ECDH key management [#1334](https://github.com/theupdateframework/notary/pull/1334)\n+ If the home directory cannot be found, log a warning instead of erroring out [#1318](https://github.com/theupdateframework/notary/pull/1318)\n+ Bumped go version and various dependencies [#1323](https://github.com/theupdateframework/notary/pull/1323) [#1332](https://github.com/theupdateframework/notary/pull/1332) [#1335](https://github.com/theupdateframework/notary/pull/1335) [#1336](https://github.com/theupdateframework/notary/pull/1336)\n+ Various internal and documentation fixes [#1312](https://github.com/theupdateframework/notary/pull/1312) [#1313](https://github.com/theupdateframework/notary/pull/1313) [#1319](https://github.com/theupdateframework/notary/pull/1319) [#1320](https://github.com/theupdateframework/notary/pull/1320) [#1324](https://github.com/theupdateframework/notary/pull/1324) [#1326](https://github.com/theupdateframework/notary/pull/1326) [#1328](https://github.com/theupdateframework/notary/pull/1328) [#1329](https://github.com/theupdateframework/notary/pull/1329) [#1333](https://github.com/theupdateframework/notary/pull/1333)\n\n## [v0.6.0](https://github.com/docker/notary/releases/tag/v0.6.0) 02/28/2018\n+ **The project has been moved from https://github.com/docker/notary to https://github.com/theupdateframework/notary, as it has been accepted into the CNCF.  Downstream users should update their go imports.**\n+ Removed support for RSA-key exchange ciphers supported by the server and signer and require TLS >= 1.2 for the server and signer. [#1307](https://github.com/theupdateframework/notary/pull/1307)\n+ `libykcs11` can be found in several additional locations on Fedora.  [#1286](https://github.com/theupdateframework/notary/pull/1286/)\n+ If a certificate is used as a delegation public key, notary no longer warns if the certificate has expired, since notary should be relying on the role expiry instead. [#1263](https://github.com/theupdateframework/notary/pull/1263)\n+ An error is now returned when importing keys if there were invalid PEM blocks. [#1260](https://github.com/theupdateframework/notary/pull/1260)\n+ Notary server authentication credentials can now be provided as an environment variable `NOTARY_AUTH`, which should contain a base64-encoded \"username:password\" value.  [#1246](https://github.com/theupdateframework/notary/pull/1246)\n+ Changefeeds are now supported for RethinkDB as well as SQL servers.  [#1214](https://github.com/theupdateframework/notary/pull/1214)\n+ Notary CLI will now time out after 30 seconds if a username and password are not provided when authenticating to anotary server, fixing an issue where scripts for the notary CLI may hang forever. [#1200](https://github.com/theupdateframework/notary/pull/1200)\n+ Fixed potential race condition in the signer keystore.  [#1198](https://github.com/theupdateframework/notary/pull/1198)\n+ Notary now no longer provides the option to generate RSA keys for a repository, but externally generated RSA keys can still be imported as keys for a repository.  [#1191](https://github.com/theupdateframework/notary/pull/1191)\n+ Fixed bug where the notary client would `ioutil.ReadAll` responses from the server without limiting the size.  [#1186](https://github.com/theupdateframework/notary/pull/1186)\n+ Default notary CLI log level is now `warn`, and if the `-v` option is passed, it is at `info`.  [#1179](https://github.com/theupdateframework/notary/pull/1179)\n+ Example Postgres config now includes an example of mutual TLS authentication between the server/signer and Postgres.  [#1160](https://github.com/theupdateframework/notary/pull/1160) [#1163](https://github.com/theupdateframework/notary/pull/1163/)\n+ Fixed an error where piping the server authentication credentials via STDIN when scripting the notary CLI did not work.  [#1155](https://github.com/theupdateframework/notary/pull/1155)\n+ If the server and signer configurations forget to specify `parseTime=true` when using MySQL, notary server and signer will automatically add the option.  [#1150](https://github.com/theupdateframework/notary/pull/1150)\n+ Custom metadata can now be provided and read on a target when using the notary client as a library (not yet exposed on the CLI).  [#1146](https://github.com/theupdateframework/notary/pull/1146)\n+ `notary init` now accepts a `--root-cert` and `--root-key` flag for use with privately generated certificates and keys.  [#1144](https://github.com/theupdateframework/notary/pull/1144)\n+ `notary key generate` now accepts a `--role` flag as well as a `--output` flag.  This means it can generate new targets or delegation keys, and it can also output keys to a file instead of storing it in the default notary key store.  [#1134](https://github.com/theupdateframework/notary/pull/1134)\n+ Newly generated keys are now stored encrypted and encoded in PKCS#8 format. **This is not forwards-compatible against notary<0.6.0 and docker<17.12.x. Also please note that docker>=17.12.x is not forwards compatible with notary<0.6.0.**. [#1130](https://github.com/theupdateframework/notary/pull/1130) [#1201](https://github.com/theupdateframework/notary/pull/1201)\n+ Added support for wildcarded certificate IDs in the trustpinning configuration [#1126](https://github.com/theupdateframework/notary/pull/1126)\n+ Added support using the client against notary servers which are hosted as subpath under another server (e.g. https://domain.com/notary instead of https://notary.com) [#1108](https://github.com/theupdateframework/notary/pull/1108)\n+ If no changes were made to the targets file, you are no longer required to sign the target [#1104](https://github.com/theupdateframework/notary/pull/1104)\n+ escrow placeholder [#1096](https://github.com/theupdateframework/notary/pull/1096)\n+ Added support for wildcard suffixes for root certificates CNs for root keys, so that a single root certificate would be valid for multiple repositories [#1088](https://github.com/theupdateframework/notary/pull/1088)\n+ Root key rotations now do not require all previous root keys sign new root metadata.  [#942](https://github.com/theupdateframework/notary/pull/942).\n    + New keys are trusted if the root metadata file specifying the new key was signed by the previous root key/threshold\n    + Root metadata can now be requested by version from the server, allowing clients with older root metadata to validate each new version one by one up to the current metadata\n+ `notary key rotate` now accepts a flag specifying which key to rotate to [#942](https://github.com/theupdateframework/notary/pull/942)\n+ Refactoring of the client to make it easier to use as a library and to inject dependencies:\n    + References to GUN have now been changed to \"imagename\". [#1081](https://github.com/theupdateframework/notary/pull/1081)\n    + `NewNotaryRepository` can now be provided with a remote store and changelist, as opposed to always constructing its own. [#1094](https://github.com/theupdateframework/notary/pull/1094)\n    + If needed, the notary repository will be initialized first when publishing. [#1105](https://github.com/theupdateframework/notary/pull/1105)\n    + `NewNotaryReository` now requires a non-nil cache store.  [#1185](https://github.com/theupdateframework/notary/pull/1185)\n    + The \"No valid trust data\" error is now typed.  [#1212](https://github.com/theupdateframework/notary/pull/1212)\n    + `TUFClient` was previously mistakenly exported, and is now unexported.  [#1215](https://github.com/theupdateframework/notary/pull/1215)\n    + The notary client now has a `Repository` interface type to standardize `client.NotaryRepository`.  [#1220](https://github.com/theupdateframework/notary/pull/1220)\n    + The constructor functions `NewFileCachedNotaryRepository` and `NewNotaryRepository` have been renamed, respectively, to `NewFileCachedRepository` and `NewRepository` to reduce redundancy. [#1226](https://github.com/theupdateframework/notary/pull/1226)\n    + `NewRepository` returns an interface as opposed to the concrete type `NotaryRepository` it previously did.  `NotaryRepository` is also now an unexported concrete type. [#1226](https://github.com/theupdateframework/notary/pull/1226)\n    + Key import/export logic has been moved from the `utils` package to the `trustmanager` package.  [#1250](https://github.com/theupdateframework/notary/pull/1250)\n\n\n## [v0.5.0](https://github.com/docker/notary/releases/tag/v0.5.0) 11/14/2016\n+ Non-certificate public keys in PEM format can now be added to delegation roles [#965](https://github.com/docker/notary/pull/965)\n+ PostgreSQL support as a storage backend for Server and Signer [#920](https://github.com/docker/notary/pull/920)\n+ Notary server's health check now fails if it cannot connect to the signer, since no new repositories can be created and existing repositories cannot be updated if the server cannot reach the signer [#952](https://github.com/docker/notary/pull/952)\n+ Server runs its connectivity healthcheck to the server once every 10 seconds instead of once every minute. [#902](https://github.com/docker/notary/pull/902)\n+ The keys on disk are now stored in the `~/.notary/private` directory, rather than in a key hierarchy that separates them by GUN and by role.  Notary will automatically migrate old-style directory layouts to the new style.  **This is not forwards-compatible against notary<0.4.2 and docker<=1.12** [#872](https://github.com/docker/notary/pull/872)\n+ A new changefeed API has been added to Notary Server. It is only supported when using one of the relational database backends: MySQL, PostgreSQL, or SQLite.[#1019](https://github.com/docker/notary/pull/1019)\n\n## [v0.4.3](https://github.com/docker/notary/releases/tag/v0.4.3) 1/3/2017\n+ Fix build tags for static notary client binaries in linux [#1039](https://github.com/docker/notary/pull/1039)\n+ Fix key import for exported delegation keys [#1067](https://github.com/docker/notary/pull/1067)\n\n## [v0.4.2](https://github.com/docker/notary/releases/tag/v0.4.2) 9/30/2016\n+ Bump the cross compiler to golang 1.7.1, since [1.6.3 builds binaries that could have non-deterministic bugs in OS X Sierra](https://groups.google.com/forum/#!msg/golang-dev/Jho5sBHZgAg/cq6d97S1AwAJ) [#984](https://github.com/docker/notary/pull/984)\n\n## [v0.4.1](https://github.com/docker/notary/releases/tag/v0.4.1) 9/27/2016\n+ Preliminary Windows support for notary client [#970](https://github.com/docker/notary/pull/970)\n+ Output message to CLI when repo changes have been successfully published [#974](https://github.com/docker/notary/pull/974)\n+ Improved error messages for client authentication errors and for the witness command [#972](https://github.com/docker/notary/pull/972)\n+ Support for finding keys that are anywhere in the notary directory's \"private\" directory, not just under \"private/root_keys\" or \"private/tuf_keys\" [#981](https://github.com/docker/notary/pull/981)\n+ Previously, on any error updating, the client would fall back on the cache.  Now we only do so if there is a network error or if the server is unavailable or missing the TUF data. Invalid TUF data will cause the update to fail - for example if there was an invalid root rotation. [#884](https://github.com/docker/notary/pull/884) [#982](https://github.com/docker/notary/pull/982)\n\n## [v0.4.0](https://github.com/docker/notary/releases/tag/v0.4.0) 9/21/2016\n+ Server-managed key rotations [#889](https://github.com/docker/notary/pull/889)\n+ Remove `timestamp_keys` table, which stored redundant information [#889](https://github.com/docker/notary/pull/889)\n+ Introduce `notary delete` command to delete local and/or remote repo data [#895](https://github.com/docker/notary/pull/895)\n+ Introduce `notary witness` command to stage signatures for specified roles [#875](https://github.com/docker/notary/pull/875)\n+ Add `-p` flag to offline commands to attempt auto-publish [#886](https://github.com/docker/notary/pull/886) [#912](https://github.com/docker/notary/pull/912) [#923](https://github.com/docker/notary/pull/923)\n+ Introduce `notary reset` command to manage staged changes [#959](https://github.com/docker/notary/pull/959) [#856](https://github.com/docker/notary/pull/856)\n+ Add `--rootkey` flag to `notary init` to provide a private root key for a repo [#801](https://github.com/docker/notary/pull/801)\n+ Introduce `notary delegation purge` command to remove a specified key from all delegations [#855](https://github.com/docker/notary/pull/855)\n+ Removed HTTP endpoint from notary-signer [#870](https://github.com/docker/notary/pull/870)\n+ Refactored and unified key storage [#825](https://github.com/docker/notary/pull/825)\n+ Batched key import and export now operate on PEM files (potentially with multiple blocks) instead of ZIP [#825](https://github.com/docker/notary/pull/825) [#882](https://github.com/docker/notary/pull/882)\n+ Add full database integration test-suite [#824](https://github.com/docker/notary/pull/824) [#854](https://github.com/docker/notary/pull/854) [#863](https://github.com/docker/notary/pull/863)\n+ Improve notary-server, trust pinning, and yubikey logging [#798](https://github.com/docker/notary/pull/798) [#858](https://github.com/docker/notary/pull/858) [#891](https://github.com/docker/notary/pull/891)\n+ Warn if certificates for root or delegations are near expiry [#802](https://github.com/docker/notary/pull/802)\n+ Warn if role metadata is near expiry [#786](https://github.com/docker/notary/pull/786)\n+ Reformat CLI table output to use the `text/tabwriter` package [#809](https://github.com/docker/notary/pull/809)\n+ Fix passphrase retrieval attempt counting and terminal detection [#906](https://github.com/docker/notary/pull/906)\n+ Fix listing nested delegations [#864](https://github.com/docker/notary/pull/864)\n+ Bump go version to 1.6.3, fix go1.7 compatibility [#851](https://github.com/docker/notary/pull/851) [#793](https://github.com/docker/notary/pull/793)\n+ Convert docker-compose files to v2 format [#755](https://github.com/docker/notary/pull/755)\n+ Validate root rotations against trust pinning [#800](https://github.com/docker/notary/pull/800)\n+ Update fixture certificates for two-year expiry window [#951](https://github.com/docker/notary/pull/951)\n\n## [v0.3.0](https://github.com/docker/notary/releases/tag/v0.3.0) 5/11/2016\n+ Root rotations\n+ RethinkDB support as a storage backend for Server and Signer\n+ A new TUF repo builder that merges server and client validation\n+ Trust Pinning: configure known good key IDs and CAs to replace TOFU.\n+ Add --input, --output, and --quiet flags to notary verify command\n+ Remove local certificate store. It was redundant as all certs were also stored in the cached root.json\n+ Cleanup of dead code in client side key storage logic\n+ Update project to Go 1.6.1\n+ Reorganize vendoring to meet Go 1.6+ standard. Still using Godeps to manage vendored packages\n+ Add targets by hash, no longer necessary to have the original target data available\n+ Active Key ID verification during signature verification\n+ Switch all testing from assert to require, reduces noise in test runs\n+ Use alpine based images for smaller downloads and faster setup times\n+ Clean up out of data signatures when re-signing content\n+ Set cache control headers on HTTP responses from Notary Server\n+ Add sha512 support for targets\n+ Add environment variable for delegation key passphrase\n+ Reduce permissions requested by client from token server\n+ Update formatting for delegation list output\n+ Move SQLite dependency to tests only so it doesn't get built into official images\n+ Fixed asking for password to list private repositories\n+ Enable using notary client with username/password in a scripted fashion\n+ Fix static compilation of client\n+ Enforce TUF version to be >= 1, previously 0 was acceptable although unused\n+ json.RawMessage should always be used as *json.RawMessage due to concepts of addressability in Go and effects on encoding\n\n## [v0.2](https://github.com/docker/notary/releases/tag/v0.2.0) 2/24/2016\n+ Add support for delegation roles in `notary` server and client\n+ Add `notary CLI` commands for managing delegation roles: `notary delegation`\n    + `add`, `list` and `remove` subcommands\n+ Enhance `notary CLI` commands for adding targets to delegation roles\n    + `notary add --roles` and `notary remove --roles` to manipulate targets for delegations\n+ Support for rotating the snapshot key to one managed by the `notary` server\n+ Add consistent download functionality to download metadata and content by checksum\n+ Update `docker-compose` configuration to use official mariadb image\n    + deprecate `notarymysql`\n    + default to using a volume for `data` directory\n    + use separate databases for `notary-server` and `notary-signer` with separate users\n+ Add `notary CLI` command for changing private key passphrases: `notary key passwd`\n+ Enhance `notary CLI` commands for importing and exporting keys\n+ Change default `notary CLI` log level to fatal, introduce new verbose (error-level) and debug-level settings\n+ Store roles as PEM headers in private keys, incompatible with previous notary v0.1 key format\n    + No longer store keys as `<KEY_ID>_role.key`, instead store as `<KEY_ID>.key`; new private keys from new notary clients will crash old notary clients\n+ Support logging as JSON format on server and signer\n+ Support mutual TLS between notary client and notary server\n\n## [v0.1](https://github.com/docker/notary/releases/tag/v0.1) 11/15/2015\n+ Initial non-alpha `notary` version\n+ Implement TUF (the update framework) with support for root, targets, snapshot, and timestamp roles\n+ Add PKCS11 interface to store and sign with keys in HSMs (i.e. Yubikey)\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.2080078125,
          "content": "# Owners (in alphabetical order)\n# Note: This is only for the notaryproject/notary repo and includes the Org level maintainers\n* @hukeping @jonnystoten @niazfk @priteshbandi @shizhMSFT @toddysm @vaninrao10 @yizha1"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.296875,
          "content": "## CNCF Community Code of Conduct v1.0\n\n### Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of fostering\nan open and welcoming community, we pledge to respect all people who contribute\nthrough reporting issues, posting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for\neveryone, regardless of level of experience, gender, gender identity and expression,\nsexual orientation, disability, personal appearance, body size, race, ethnicity, age,\nreligion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical or electronic addresses,\n without explicit permission\n* Other unethical or unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are not\naligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers\ncommit themselves to fairly and consistently applying these principles to every aspect\nof managing this project. Project maintainers who do not follow or enforce the Code of\nConduct may be permanently removed from the project team.\n\nThis code of conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting a CNCF project maintainer, Sarah Novotny <sarahnovotny@google.com>, and/or Dan Kohn <dan@linuxfoundation.org>.\n\nThis Code of Conduct is adapted from the Contributor Covenant\n(https://contributor-covenant.org), version 1.2.0, available at\nhttps://contributor-covenant.org/version/1/2/0/\n\n### CNCF Events Code of Conduct\n\nCNCF events are governed by the Linux Foundation [Code of Conduct](https://events.linuxfoundation.org/events/cloudnativecon/attend/code-of-conduct) available on the event page. This is designed to be compatible with the above policy and also includes more details on responding to incidents.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.75,
          "content": "# Contributing to notary\n\n## Before reporting an issue...\n\n### If your problem is with...\n\n - automated builds\n - your account on the [Docker Hub](https://hub.docker.com/)\n - any other [Docker Hub](https://hub.docker.com/) issue\n\nThen please do not report your issue here - you should instead report it to [https://support.docker.com](https://support.docker.com)\n\n### If you...\n\n - need help setting up notary\n - can't figure out something\n - are not sure what's going on or what your problem is\n\nThen please do not open an issue here yet - you should first try one of the following support forums:\n\n - irc: #docker-trust on freenode\n\n## Reporting an issue properly\n\nBy following these simple rules you will get better and faster feedback on your issue.\n\n - search the bugtracker for an already reported issue\n\n### If you found an issue that describes your problem:\n\n - please read other user comments first, and confirm this is the same issue: a given error condition might be indicative of different problems - you may also find a workaround in the comments\n - please refrain from adding \"same thing here\" or \"+1\" comments\n - you don't need to comment on an issue to get notified of updates: just hit the \"subscribe\" button\n - comment if you have some new, technical and relevant information to add to the case\n\n### If you have not found an existing issue that describes your problem:\n\n 1. create a new issue, with a succinct title that describes your issue:\n   - bad title: \"It doesn't work with my docker\"\n   - good title: \"Publish fail: 400 error with E_INVALID_DIGEST\"\n 2. copy the output of:\n   - `notary version` or `docker version`\n 3. Run `notary` or `docker` with the `-D` option for debug output, and please include a copy of the command and the output.\n 4. If relevant, copy your `notaryserver` and `notarysigner` logs that show the error (this is likely the output from running `docker-compose up`)\n\n## Contributing a patch for a known bug, or a small correction\n\nYou should follow the basic GitHub workflow:\n\n 1. fork\n 2. commit a change\n 3. make sure the tests pass\n 4. PR\n\nAdditionally, you must [sign your commits](https://github.com/docker/docker/blob/master/CONTRIBUTING.md#sign-your-work). It's very simple:\n\n - configure your name with git: `git config user.name \"Real Name\" && git config user.email mail@example.com`\n - sign your commits using `-s`: `git commit -s -m \"My commit\"`\n\nSome simple rules to ensure quick merge:\n\n - clearly point to the issue(s) you want to fix in your PR comment (e.g., `closes #12345`)\n - prefer multiple (smaller) PRs addressing individual issues over a big one trying to address multiple issues at once\n - if you need to amend your PR following comments, please squash instead of adding more commits\n - if fixing a bug or adding a feature, please add or update the relevant `CHANGELOG.md` entry with your pull request number\n   and a description of the change\n\n## Contributing new features\n\nYou are heavily encouraged to first discuss what you want to do. You can do so on the irc channel, or by opening an issue that clearly describes the use case you want to fulfill, or the problem you are trying to solve.\n\nIf this is a major new feature, you should then submit a proposal that describes your technical solution and reasoning.\nIf you did discuss it first, this will likely be greenlighted very fast. It's advisable to address all feedback on this proposal before starting actual work\n\nThen you should submit your implementation, clearly linking to the issue (and possible proposal).\n\nYour PR will be reviewed by the community, then ultimately by the project maintainers, before being merged.\n\nIt's mandatory to:\n\n - interact respectfully with other community members and maintainers - more generally, you are expected to abide by the [Docker community rules](https://github.com/docker/docker/blob/master/CONTRIBUTING.md#docker-community-guidelines)\n - address maintainers' comments and modify your submission accordingly\n - write tests for any new code\n\nComplying to these simple rules will greatly accelerate the review process, and will ensure you have a pleasant experience in contributing code to the Registry.\n\n## Review and Development notes\n\n- All merges require LGTMs from any 2 maintainers.\n- We use the git flow model (as best we can) using the `releases` branch as the stable branch, and the `master` branch as the development branch.  When we get near a potential release, a release branch (`release/<semver>`) will be created from `master`.  Any PRs that should go into the release should be made against that branch.  Hotfixes for a minor release will be added to the branch `hotfix/<semver>`.\n\n## Vendoring new dependency versions\n\nWe use [VNDR](https://github.com/LK4D4/vndr); please update `vendor.conf` with the new dependency or the new version, and run\n`vndr <top level package name>`."
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.2373046875,
          "content": "David Williamson <david.williamson@docker.com> (github: davidwilliamson)\nAaron Lehmann <aaron.lehmann@docker.com> (github: aaronlehmann)\nLewis Marshall <lewis@flynn.io> (github: lmars)\nJonathan Rudenberg <jonathan@flynn.io> (github: titanous)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7099609375,
          "content": "FROM golang:1.17.13\n\nRUN apt-get update && apt-get install -y \\\n\tcurl \\\n\tclang \\\n\tlibsqlite3-dev \\\n\tpatch \\\n\ttar \\\n\txz-utils \\\n\tpython \\\n\tpython3-pip \\\n\tpython-setuptools \\\n\t--no-install-recommends \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN useradd -ms /bin/bash notary \\\n    && pip install codecov\n\nENV GO111MODULE=on\n\nRUN go get golang.org/x/lint/golint \\\n    github.com/client9/misspell/cmd/misspell \\\n    github.com/gordonklaus/ineffassign \\\n    github.com/securego/gosec/cmd/gosec/... \\\n    github.com/fzipp/gocyclo/cmd/gocyclo\n\nENV GOFLAGS=-mod=vendor \\\n    NOTARYDIR=/go/src/github.com/theupdateframework/notary\n\nCOPY . ${NOTARYDIR}\nRUN chmod -R a+rw /go && chmod 0600 ${NOTARYDIR}/fixtures/database/*\n\nWORKDIR ${NOTARYDIR}\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 8.6103515625,
          "content": "# Notary Governance\n\nThe following document outlines Notary project governance.\n\n## The Notary Project\n\nThe Notary project consists of several repositories known as subprojects that enable community cohorts to experiment and implement solutions across the scope of the project.\n\n## Maintainers Structure\n\nThere are two types of maintainers in the Notary project organized hierarchically. Notary org maintainers oversee the overall project and its health. Subproject maintainers focus on a single codebase or a group of related codebases. \n\nChanges in maintainership have to be announced via an [issue](https://github.com/notaryproject/notaryproject/issues/new).\n\n### Maintainer Responsibility\nNotary maintainers adhere to the requirements and responsibilities set forth in the respective [Notary Org Maintainers](#notary-org-maintainers) and [Subproject Maintainers](#subproject-maintainers). They further pledge the following:\n* To act in the best interest of the project and subprojects at all times.\n* To ensure that project and subproject development and direction is a function of community needs.\n* To never take any action while hesitant that it is the right action to take.\n* To fulfill the responsibilities outlined in this document and its dependents.\n\n### Notary Org Maintainers\n\nThe [Notary Org maintainers](MAINTAINERS) are responsible for:\n\n* Maintaining the mission, vision, values, and scope of the project\n* Refining the governance and charter as needed\n* Making project level decisions\n* Resolving escalated project decisions when the subproject maintainers responsible are blocked\n* Managing the Notary brand\n* Controlling access to Notary assets such as source repositories, hosting, project calendars\n* Deciding what subprojects are part of the Notary project\n* Deciding on the creation of new subprojects\n* Overseeing the resolution and disclosure of security issues\n* Managing financial decisions related to the project\n\nChanges to org maintainers use the following:\n\n* Any subproject maintainer is eligible for a position as an org maintainer\n* No one company or organization can employ a simple majority of the org maintainers\n* An org maintainer may step down by submitting an [issue](https://github.com/notaryproject/notaryproject/issues/new) stating their intent and they will be moved to emeritus.\n* Org maintainers MUST remain active on the project. If they are unresponsive for > 3 months they will lose org maintainership unless a [super-majority](https://en.wikipedia.org/wiki/Supermajority#Two-thirds_vote) of the other org maintainers agrees to extend the period to be greater than 3 months\n* Any eligible person may stand as an org maintainer by opening a [PR](https://github.com/notaryproject/notaryproject/pulls).\n* When a PR is opened the project maintainers may vote\n  * The voting period will be open for a minimum of three business days and will remain open until a super-majority of project maintainers has voted\n  * Only current org maintainers are eligible to vote via casting a single vote each via a -1/+1 comment on the nomination issue or approving in GitHub.\n  * Once a [super-majority](https://en.wikipedia.org/wiki/Supermajority#Two-thirds_vote) has been reached the maintainer elect must complete [onboarding](#onboarding-a-new-maintainer) prior to becoming an official Notary maintainer.\n  * Once the maintainer onboarding has been completed a pull request is made on the repo adding the new maintainer to the [MAINTAINERS](MAINTAINERS) file.\n* When an org maintainer steps down, they become an emeritus maintainer\n\n### Subproject Maintainers\n\nSubproject maintainers are responsible for activities surrounding the development and release of content (eg. code, specifications, documentation) or the tasks needed to execute their subproject (e.g., community management) within the designated repository, or repositories associated with the subproject (e.g., community management). Technical decisions for code resides with the subproject maintainers unless there is a decision related to cross maintainer groups that cannot be resolved by those groups. Those cases can be escalated to the org maintainers.\n\nSubprojects may be responsible for one or many repositories.\n\nSubproject maintainers do not need to be software developers. No explicit role is placed upon them and they can be anyone appropriate for the work being produced. For example, if a repository is for documentation it would be appropriate for maintainers to be technical writers.\n\nChanges to maintainers use the following:\n\n* A subproject maintainer may step down by submitting an [issue](https://github.com/notaryproject/notaryproject/issues/new) stating their intent and they will be moved to emeritus.\n* Maintainers MUST remain active. If they are unresponsive for > 6 months they will be automatically removed unless a [super-majority](https://en.wikipedia.org/wiki/Supermajority#Two-thirds_vote) of the other subproject maintainers agrees to extend the period to be greater than 6 months\n* Potential new maintainers should be ongoing active participants in the project\n* New maintainers can be added to a subproject by a [super-majority](https://en.wikipedia.org/wiki/Supermajority#Two-thirds_vote) vote of the existing subproject maintainers\n* When a subproject has no maintainers the Notary org maintainers become responsible for it and may archive the subproject or find new maintainers\n\n### Onboarding a New Maintainer\nNew Notary maintainers participate in an onboarding period during which they fulfill all code review and issue management responsibilities that are required for their role. The length of this onboarding period is variable, and is considered complete once both the existing maintainers and the candidate maintainer are comfortable with the candidate's competency in the responsibilities of maintainership. This process MUST be completed prior to the candidate being named an official Notary maintainer.\n\nThe onboarding period is intended to ensure that the to-be-appointed maintainer is able/willing to take on the time requirements, familiar with core logic and concepts, understands the overall system architecture and interactions that comprise it, and is able to work well with both the existing maintainers and the community.\n\n## Decision Making at the Notary org level\n\nWhen maintainers need to make decisions there are two ways decisions are made, unless described elsewhere.\n\nThe default decision making process is [lazy-consensus](http://communitymgt.wikia.com/wiki/Lazy_consensus). This means that any decision is considered supported by the team making it as long as no one objects. Silence on any consensus decision is implicit agreement and equivalent to explicit agreement. Explicit agreement may be stated at will. In the case of security critical decisions more explicit consensus may be needed.\n\nWhen a consensus cannot be found a maintainer can call for a [majority](https://en.wikipedia.org/wiki/Majority) vote on a decision.\n\nMany of the day-to-day project maintenance can be done by a lazy consensus model. But the following items must be called to vote:\n\n* Removing a maintainer for any reason other than inactivity (super majority)\n* Changing the governance rules (this document) (super majority)\n* Licensing and intellectual property changes (including new logos, wordmarks) (simple majority)\n* Adding, archiving, or removing subprojects (simple majority)\n* Utilizing Notary/CNCF money for anything CNCF deems \"not cheap and easy\" (simple majority)\n\nNew subprojects should be created (or added) with a well defined mission and goals, and significant changes should be voted on by both the subproject maintainers and the org maintainers.\n\nOther decisions may, but do not need to be, called out and put up for decision via creating an [issue](https://github.com/notaryproject/notaryproject/issues/new) at any time and by anyone. By default, any decisions called to a vote will be for a _simple majority_ vote.\n\nMeetings should be publically documented (Slack, CNCF calendar etc), and recorded and notes kept. Meetings should have a chair, this is a rotating role not restricted to maintainers.\n\n## Code of Conduct\n\nThis Notary project has adopted the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md).\n\n## Attributions\n\n* This governance model was created using both the [SPIFFE](https://github.com/spiffe/spire/blob/main/MAINTAINERS.md) and [Helm](https://github.com/helm/community/blob/main/governance/governance.md) governance documents.\n\n## DCO and Licenses\n\nThe following licenses and contributor agreements will be used for Notary projects:\n\n* [Apache 2.0](https://opensource.org/licenses/Apache-2.0) for code\n* [Developer Certificate of Origin](https://developercertificate.org/) for new contributions\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 0.1259765625,
          "content": "// Only run on Linux atm\nwrappedNode(label: 'ubuntu && ec2 && docker-edge') {\n  deleteDir()\n  stage \"checkout\"\n  checkout scm\n\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.076171875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2015 Docker, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 1.6064453125,
          "content": "# Notary maintainers file\n#\n# This file describes who runs the theupdateframework/notary project and how.\n# This is a living document - if you see something out of date or missing, speak up!\n#\n# It is structured to be consumable by both humans and programs.\n# To extract its contents programmatically, use any TOML-compliant parser.\n#\n[Org]\n\t[Org.\"Org maintainers\"]\n\t\tpeople = [\n\t\t\t\"niazfk\",\n\t\t\t\"priteshbandi\",\n\t\t\t\"shiweizhang\",\n\t\t\t\"toddymladenov\",\n\t\t\t\"vaninrao\",\n\t\t\t\"yizha\"\n\t\t]\n\n\t[Org.\"Notary maintainers\"]\n\t\tpeople = [\n\t\t\t\"hukeping\",\n\t\t\t\"justincormack\",\n\t\t\t\"jonnystoten\"\n\t\t]\n[people]\n\n# A reference list of all people associated with the project.\n# All other sections should refer to people by their canonical key\n# in the people section.\n\n\t# ADD YOURSELF HERE IN ALPHABETICAL ORDER\n\n\t[people.hukeping]\n\tName = \"Hu Keping\"\n\tEmail = \"hukeping@huawei.com\"\n\tGitHub = \"hukeping\"\n\n\t[people.mnm678]\n\tName = \"Marina Moore\"\n\tEmail = \"mm9693@nyu.edu\"\n\tGitHub = \"mnm678\"\n\n\t[people.niazfk]\n\tName = \"Niaz Khan\"\n\tEmail = \"niazfk@amazon.com\"\n\tGitHub = \"niazfk\"\n\n\t[people.jonnystoten]\n\tName = \"Jonny Stoten\"\n\tEmail = \"jonny.stoten@docker.com\"\n\tGitHub = \"jonnystoten\"\n\n\t[people.priteshbandi]\n\tName = \"Pritesh Bandi\"\n\tEmail = \"priteshbandi@gmail.com\"\n\tGitHub = \"priteshbandi\"\n\n\t[people.shiweizhang]\n\tName = \"Shiwei Zhang\"\n\tEmail = \"shizh@microsoft.com\"\n\tGitHub = \"shizhMSFT\"\n\n\t[people.toddymladenov]\n\tName = \"Toddy Mladenov\"\n\tEmail = \"toddysm@gmail.com\"\n\tGitHub = \"toddysm\"\n\n\t[people.vaninrao]\n\tName = \"Vani Rao\"\n\tEmail = \"vaninrao@amazon.com\"\n\tGitHub = \"vaninrao10\"\n\n\t[people.vaninrao]\n\tName = \"Vani Rao\"\n\tEmail = \"vaninrao@amazon.com\"\n\tGitHub = \"vaninrao10\"\n"
        },
        {
          "name": "MAINTAINERS.ALUMNI",
          "type": "blob",
          "size": 1.46484375,
          "content": "# Notary maintainers alumni file\n#\n# This file describes past maintainers who have stepped down from the role.\n# This is a living document - if you see something out of date or missing, speak up!\n#\n# It is structured to be consumable by both humans and programs.\n# To extract its contents programmatically, use any TOML-compliant parser.\n#\n[Org]\n\t[Org.\"Notary Alumni\"]\n\t\tpeople = [\n\t\t\t\"cyli\",\n\t\t\t\"diogomonica\",\n\t\t\t\"dmcgowan\",\n\t\t\t\"endophage\",\n\t\t\t\"ecordell\",\n\t\t\t\"justincormack\"\n\t\t\t\"nathanmccauley\",\n\t\t\t\"riyazdf\",\n\t\t\t\"stevelasker\"\n\t\t]\n\n[people]\n\n\t# ADD YOURSELF HERE IN ALPHABETICAL ORDER\n\n\t[people.cyli]\n\tName = \"Ying Li\"\n\tEmail = \"ying.li@docker.com\"\n\tGitHub = \"cyli\"\n\n\t[people.diogomonica]\n\tName = \"Diogo Monica\"\n\tEmail = \"diogo@docker.com\"\n\tGitHub = \"diogomonica\"\n\n\t[people.dmcgowan]\n\tName = \"Derek McGowan\"\n\tEmail = \"derek@docker.com\"\n\tGitHub = \"dmcgowan\"\n\n\t[people.endophage]\n\tName = \"David Lawrence\"\n\tEmail = \"david.lawrence@docker.com\"\n\tGitHub = \"endophage\"\n\n\t[people.ecordell]\n\tName = \"Evan Cordell\"\n\tEmail = \"evan.cordell@coreos.com\"\n\tGitHub = \"ecordell\"\n\n\t[people.justincormack]\n\tName = \"Justin Cormack\"\n\tEmail = \"justin.cormack@docker.com\"\n\tGitHub = \"justincormack\"\n\n\t[people.nathanmccauley]\n\tName = \"Nathan McCauley\"\n\tEmail = \"nathan.mccauley@docker.com\"\n\tGitHub = \"nathanmccauley\"\n\n\t[people.riyazdf]\n\tName = \"Riyaz Faizullabhoy\"\n\tEmail = \"riyazdf@berkeley.edu\"\n\tGitHub = \"riyazdf\"\n\n\t[people.stevelasker]\n\tName = \"Steve Lasker\"\n\tEmail = \"Steve.Lasker@microsoft.com\"\n\tGitHub = \"stevelasker\"\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 7.240234375,
          "content": "# Set an output prefix, which is the local directory if not specified\nPREFIX?=$(shell pwd)\n\nGOFLAGS := -mod=vendor\n\n# Populate version variables\n# Add to compile time flags\nNOTARY_PKG := github.com/theupdateframework/notary\nNOTARY_VERSION := $(shell cat NOTARY_VERSION)\nGITCOMMIT := $(shell git rev-parse --short HEAD)\nGITUNTRACKEDCHANGES := $(shell git status --porcelain --untracked-files=no)\nifneq ($(GITUNTRACKEDCHANGES),)\nGITCOMMIT := $(GITCOMMIT)-dirty\nendif\nCTIMEVAR=-X $(NOTARY_PKG)/version.GitCommit=$(GITCOMMIT) -X $(NOTARY_PKG)/version.NotaryVersion=$(NOTARY_VERSION)\nGO_LDFLAGS=-ldflags \"-w $(CTIMEVAR)\"\nGO_LDFLAGS_STATIC=-ldflags \"-w $(CTIMEVAR) -extldflags -static\"\nGOOSES = darwin linux windows\nNOTARY_BUILDTAGS ?= pkcs11\nNOTARYDIR := /go/src/github.com/theupdateframework/notary\n\n# check to be sure pkcs11 lib is always imported with a build tag\nGO_LIST_PKCS11 := $(shell go list -tags \"${NOTARY_BUILDTAGS}\" -e -f '{{join .Deps \"\\n\"}}' ./... | grep -v /vendor/ | xargs go list -e -f '{{if not .Standard}}{{.ImportPath}}{{end}}' | grep -q pkcs11)\nifeq ($(GO_LIST_PKCS11),)\n$(info pkcs11 import was not found anywhere without a build tag, yay)\nelse\n$(error You are importing pkcs11 somewhere and not using a build tag)\nendif\n\n_empty :=\n_space := $(empty) $(empty)\n\n# go cover test variables\nCOVERPROFILE?=coverage.txt\nCOVERMODE=atomic\nPKGS ?= $(shell go list -tags \"${NOTARY_BUILDTAGS}\" ./... | grep -v /vendor/ | tr '\\n' ' ')\n\n.PHONY: clean all lint build test binaries cross cover docker-images notary-dockerfile\n.DELETE_ON_ERROR: cover\n.DEFAULT: default\n\nall: clean lint build test binaries\n\n# This only needs to be generated by hand when cutting full releases.\nversion/version.go:\n\t./version/version.sh > $@\n\n${PREFIX}/bin/notary-server: NOTARY_VERSION $(shell find . -type f -name '*.go')\n\t@echo \"+ $@\"\n\t@go build -tags ${NOTARY_BUILDTAGS} -o $@ ${GO_LDFLAGS} ./cmd/notary-server\n\n${PREFIX}/bin/notary: NOTARY_VERSION $(shell find . -type f -name '*.go')\n\t@echo \"+ $@\"\n\t@go build -tags ${NOTARY_BUILDTAGS} -o $@ ${GO_LDFLAGS} ./cmd/notary\n\n${PREFIX}/bin/notary-signer: NOTARY_VERSION $(shell find . -type f -name '*.go')\n\t@echo \"+ $@\"\n\t@go build -tags ${NOTARY_BUILDTAGS} -o $@ ${GO_LDFLAGS} ./cmd/notary-signer\n\n${PREFIX}/bin/escrow: NOTARY_VERSION $(shell find . -type f -name '*.go')\n\t@echo \"+ $@\"\n\t@go build -tags ${NOTARY_BUILDTAGS} -o $@ ${GO_LDFLAGS} ./cmd/escrow\n\nifeq ($(shell uname -s),Darwin)\n${PREFIX}/bin/static/notary-server:\n\t@echo \"notary-server: static builds not supported on OS X\"\n\n${PREFIX}/bin/static/notary-signer:\n\t@echo \"notary-signer: static builds not supported on OS X\"\n\n${PREFIX}/bin/static/notary:\n\t@echo \"notary: static builds not supported on OS X\"\nelse\n${PREFIX}/bin/static/notary-server: NOTARY_VERSION $(shell find . -type f -name '*.go')\n\t@echo \"+ $@\"\n\t@(export CGO_ENABLED=0; go build -tags \"${NOTARY_BUILDTAGS} netgo\" -o $@ ${GO_LDFLAGS_STATIC} ./cmd/notary-server)\n\n${PREFIX}/bin/static/notary-signer: NOTARY_VERSION $(shell find . -type f -name '*.go')\n\t@echo \"+ $@\"\n\t@(export CGO_ENABLED=0; go build -tags \"${NOTARY_BUILDTAGS} netgo\" -o $@ ${GO_LDFLAGS_STATIC} ./cmd/notary-signer)\n\n${PREFIX}/bin/static/notary:\n\t@echo \"+ $@\"\n\t@go build -tags \"${NOTARY_BUILDTAGS} netgo\" -o $@ ${GO_LDFLAGS_STATIC} ./cmd/notary\nendif\n\nifeq (, $(shell which staticcheck))\nSTATICCHECK_BIN := $(GOBIN)/staticcheck\n$(STATICCHECK_BIN):\n\t@echo \"+ $@\"\n\tGOFLAGS=\"-mod=mod\" go install honnef.co/go/tools/cmd/staticcheck@latest\nendif\n\n# spin up a docker instance and run staticcheck inside it\n.PHONY: staticcheck-docker\nstaticcheck-docker: $(STATICCHECK_BIN)\n\t@$(dockerbuild)\nifeq ($(RUN_LOCAL),1)\n\tstaticcheck -checks=all,-ST1000 ./...\nendif\n\n.PHONY: staticcheck\nstaticcheck: $(STATICCHECK_BIN)\n\tstaticcheck -checks=all,-ST1000 ./...\n\nifneq ($(RUN_LOCAL),1)\ndockerbuild = @DOCKER_BUILDKIT=1 docker build \\\n\t\t\t-f build.Dockerfile \\\n\t\t\t--build-arg target=$@ \\\n\t\t\t--target=builder \\\n\t\t\t.\ndockertestbuild = @DOCKER_BUILDKIT=1 docker build \\\n\t\t\t-f build.Dockerfile \\\n\t\t\t--build-arg target=$@ \\\n\t\t\t--target=test-builder \\\n\t\t\t.\nendif\n\n# run lint locally\nlint: staticcheck\n\n# run lint target in docker\nlint-docker: staticcheck-docker\n\nbuild:\n\t@echo \"+ $@\"\n\t@go build -tags \"${NOTARY_BUILDTAGS}\" -v ${GO_LDFLAGS} $(PKGS)\n\n# When running `go test ./...`, it runs all the suites in parallel, which causes\n# problems when running with a yubikey\ntest: TESTOPTS =\ntest:\n\t@echo Note: when testing with a yubikey plugged in, make sure to include 'TESTOPTS=\"-p 1\"'\n\t@echo \"+ $@ $(TESTOPTS)\"\n\t@echo\n\tgo test -tags \"${NOTARY_BUILDTAGS}\" $(TESTOPTS) $(PKGS)\n\n# run test target in docker\ntest-docker: TESTOPTS =\ntest-docker:\n\t@$(dockertestbuild)\nifeq ($(RUN_LOCAL),1)\n\t@echo Note: when testing with a yubikey plugged in, make sure to include 'TESTOPTS=\"-p 1\"'\n\t@echo \"+ $@ $(TESTOPTS)\"\n\t@echo\n\tgo test -tags \"${NOTARY_BUILDTAGS}\" $(TESTOPTS) $(PKGS)\nendif\n\nintegration: TESTDB = mysql\nintegration: clean\n\tbuildscripts/integrationtest.sh $(TESTDB)\n\ntestdb: TESTDB = mysql\ntestdb:\n\tbuildscripts/dbtests.sh $(TESTDB)\n\nprotos:\n\t@protoc --go_out=. --go-grpc_out=. proto/*.proto\n\n# This allows coverage for a package to come from tests in different package.\n# Requires that the following:\n# go get github.com/wadey/gocovmerge; go install github.com/wadey/gocovmerge\n#\n# be run first\ngen-cover:\ngen-cover:\n\t@python -u buildscripts/covertest.py --tags \"$(NOTARY_BUILDTAGS)\" --pkgs=\"$(PKGS)\" --testopts=\"${TESTOPTS}\"\n\n# Generates the cover binaries and runs them all in serial, so this can be used\n# run all tests with a yubikey without any problems\ncover: gen-cover covmerge\n\t@go tool cover -html=\"$(COVERPROFILE)\"\n\n# Generates the cover binaries and runs them all in serial, so this can be used\n# run all tests with a yubikey without any problems\nci: override TESTOPTS = -race\n# Codecov knows how to merge multiple coverage files, so covmerge is not needed\nci: gen-cover\n\nyubikey-tests: override PKGS = github.com/theupdateframework/notary/cmd/notary github.com/theupdateframework/notary/trustmanager/yubikey\nyubikey-tests: ci\n\ncovmerge:\n\t@gocovmerge $(shell find . -name coverage*.txt | tr \"\\n\" \" \") > $(COVERPROFILE)\n\t@go tool cover -func=\"$(COVERPROFILE)\"\n\nclean-protos:\n\t@rm proto/*.pb.go\n\nclient: ${PREFIX}/bin/notary\n\t@echo \"+ $@\"\n\nbinaries: ${PREFIX}/bin/notary-server ${PREFIX}/bin/notary ${PREFIX}/bin/notary-signer\n\t@echo \"+ $@\"\n\nescrow: ${PREFIX}/bin/escrow\n\t@echo \"+ $@\"\n\nstatic: ${PREFIX}/bin/static/notary-server ${PREFIX}/bin/static/notary-signer ${PREFIX}/bin/static/notary\n\t@echo \"+ $@\"\n\nnotary-dockerfile:\n\t@docker build --rm --force-rm -t notary .\n\nserver-dockerfile:\n\t@docker build --rm --force-rm -f server.Dockerfile -t notary-server .\n\nsigner-dockerfile:\n\t@docker build --rm --force-rm -f signer.Dockerfile -t notary-signer .\n\ndocker-images: notary-dockerfile server-dockerfile signer-dockerfile\n\nshell: notary-dockerfile\n\tdocker run --rm -it -v $(CURDIR)/cross:$(NOTARYDIR)/cross -v $(CURDIR)/bin:$(NOTARYDIR)/bin notary bash\n\ncross:\n\t@rm -rf $(CURDIR)/cross\n\t@docker build --rm --force-rm -t notary -f cross.Dockerfile .\n\tdocker run --rm -v $(CURDIR)/cross:$(NOTARYDIR)/cross -e CTIMEVAR=\"${CTIMEVAR}\" -e NOTARY_BUILDTAGS=$(NOTARY_BUILDTAGS) notary buildscripts/cross.sh $(GOOSES)\n\nclean:\n\t@echo \"+ $@\"\n\t@rm -rf .cover cross\n\tfind . -name coverage.txt -delete\n\t@rm -rf \"${PREFIX}/bin/notary-server\" \"${PREFIX}/bin/notary\" \"${PREFIX}/bin/notary-signer\"\n\t@rm -rf \"${PREFIX}/bin/static\"\n"
        },
        {
          "name": "NOTARY_VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "0.7.0\n"
        },
        {
          "name": "PROJECTS",
          "type": "blob",
          "size": 1.189453125,
          "content": "# These are the current projects under the overall Notary project umbrella\n\n## Notary\n\nNotary is the original project. It is an implementation of TUF that runs next to a container\nregistry and adds the ability to sign and verify content in the registry. By default it makes\nsome different security choices, such as using TOFU by default. As it runs next to a registry\nit is not a standard part of the registry protocol and requires independent storage and for\nclients to have different code to handle signed content.\n\n## Notation\n\nNotation is a project to add signatures as standard items in the registry ecosystem, and to\nbuild a set of simple tooling for signing and verifying these signatures. This should be\nviewed as similar in security to checking git commit signatures, although the signatures are\ngeneric and can be used for additional purposes.\n\n## TUF\n\nTUF is a project to implement the full TUF specification in a registry native way. This may\nrequire upstream TUF spec changes or extensions, as there are some differences between the\nregistry model and common usage to other TUF use cases. This project will use existing\nregistry extensions where available but may need its own document types in addition.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.5439453125,
          "content": "[![GoDoc](https://godoc.org/github.com/theupdateframework/notary?status.svg)](https://godoc.org/github.com/theupdateframework/notary)\n[![Circle CI](https://circleci.com/gh/theupdateframework/notary/tree/master.svg?style=shield)](https://circleci.com/gh/theupdateframework/notary/tree/master) [![CodeCov](https://codecov.io/github/theupdateframework/notary/coverage.svg?branch=master)](https://codecov.io/github/theupdateframework/notary) [![GoReportCard](https://goreportcard.com/badge/theupdateframework/notary)](https://goreportcard.com/report/github.com/theupdateframework/notary)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Ftheupdateframework%2Fnotary.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Ftheupdateframework%2Fnotary?ref=badge_shield)\n\n# Notice\n\nThis repository provides an implementation of \n*[The Update Framework specification](https://github.com/theupdateframework/specification)* \nand all references to `notary` in this repository refer to the implementation of the client \nand server aligning with the [TUF](https://github.com/theupdateframework/specification) specification.\nThe most prominent use of this implementation is in Docker Content Trust (DCT).\nThe first release [v0.1](https://github.com/notaryproject/notary/releases/tag/v0.1) was released in November, 2015.\n\n# Overview\n\nThis repository comprises of a [server](cmd/notary-server) and a [client](cmd/notary) for running and interacting\nwith trusted collections. See the [service architecture](docs/service_architecture.md) documentation\nfor more information.\n\nThe aim is to make the internet more secure by making it easy for people to\npublish and verify content. We often rely on TLS to secure our communications\nwith a web server, which is inherently flawed, as any compromise of the server\nenables malicious content to be substituted for the legitimate content.\n\nPublishers can sign their content offline using keys kept highly\nsecure. Once the publisher is ready to make the content available, they can\npush their signed trusted collection to the `notary` server.\n\nConsumers, having acquired the publisher's public key through a secure channel,\ncan then communicate with any `notary` server or (insecure) mirror, relying\nonly on the publisher's key to determine the validity and integrity of the\nreceived content.\n\n## Goals\n\nThe `notary` client and server is based on [The Update Framework](https://www.theupdateframework.com/), a secure general design for the problem of software distribution and updates. By using TUF, the `notary` client and server achieves a number of key advantages:\n\n* **Survivable Key Compromise**: Content publishers must manage keys in order to sign their content. Signing keys may be compromised or lost so systems must be designed in order to be flexible and recoverable in the case of key compromise. TUF's notion of key roles is utilized to separate responsibilities across a hierarchy of keys such that loss of any particular key (except the root role) by itself is not fatal to the security of the system.\n* **Freshness Guarantees**: Replay attacks are a common problem in designing secure systems, where previously valid payloads are replayed to trick another system. The same problem exists in the software update systems, where old signed can be presented as the most recent. Notary makes use of timestamping on publishing so that consumers can know that they are receiving the most up to date content. This is particularly important when dealing with software update where old vulnerable versions could be used to attack users.\n* **Configurable Trust Thresholds**: Oftentimes there are a large number of publishers that are allowed to publish a particular piece of content. For example, open source projects where there are a number of core maintainers. Trust thresholds can be used so that content consumers require a configurable number of signatures on a piece of content in order to trust it. Using thresholds increases security so that loss of individual signing keys doesn't allow publishing of malicious content.\n* **Signing Delegation**: To allow for flexible publishing of trusted collections, a content publisher can delegate part of their collection to another signer. This delegation is represented as signed metadata so that a consumer of the content can verify both the content and the delegation.\n* **Use of Existing Distribution**: Notary's trust guarantees are not tied at all to particular distribution channels from which content is delivered. Therefore, trust can be added to any existing content delivery mechanism.\n* **Untrusted Mirrors and Transport**: All of the notary metadata can be mirrored and distributed via arbitrary channels.\n\n## Security\n\nAny security vulnerabilities can be reported to security@docker.com.\n\nSee [service architecture docs](docs/service_architecture.md#threat-model) for more information about our threat model, which details the varying survivability and severities for key compromise as well as mitigations.\n\n### Security Audits\n\nBelow are the two public security audits:\n\n* [August 7, 2018 by Cure53](docs/resources/cure53_tuf_notary_audit_2018_08_07.pdf) covering TUF and the `notary` client and server.\n* [July 31, 2015 by NCC](docs/resources/ncc_docker_notary_audit_2015_07_31.pdf) covering `notary` client and server.\n\n# Getting started with the notary CLI\n\nGet the `notary` client CLI binary from [the official releases page](https://github.com/theupdateframework/notary/releases) or you can [build one yourself](#building-notary).\nThe version of the `notary` server and signer should be greater than or equal to notary CLI's version to ensure feature compatibility (ex: CLI version 0.2, server/signer version >= 0.2), and all official releases are associated with GitHub tags.\n\nTo use the notary CLI with Docker hub images, have a look at notary's\n[getting started docs](docs/getting_started.md).\n\nFor more advanced usage, see the\n[advanced usage docs](docs/advanced_usage.md).\n\nTo use the CLI against a local `notary` server rather than against Docker Hub:\n\n1. Ensure that you have [docker and docker-compose](https://docs.docker.com/compose/install/) installed.\n1. `git clone https://github.com/theupdateframework/notary.git` and from the cloned repository path,\n    start up a local `notary` server and signer and copy the config file and testing certs to your\n    local notary config directory:\n\n    ```sh\n    $ docker-compose build\n    $ docker-compose up -d\n    $ mkdir -p ~/.notary && cp cmd/notary/config.json cmd/notary/root-ca.crt ~/.notary\n    ```\n\n1. Add `127.0.0.1 notary-server` to your `/etc/hosts`, or if using docker-machine,\n    add `$(docker-machine ip) notary-server`).\n\nYou can run through the examples in the\n[getting started docs](docs/getting_started.md) and\n[advanced usage docs](docs/advanced_usage.md), but\nwithout the `-s` (server URL) argument to the `notary` command since the server\nURL is specified already in the configuration, file you copied.\n\nYou can also leave off the `-d ~/.docker/trust` argument if you do not care\nto use `notary` with Docker images.\n\n## Upgrading dependencies\n\nTo prevent mistakes in vendoring the go modules a buildscript has been added to properly vendor the modules using the correct version of Go to mitigate differences in CI and development environment.\n\nFollowing procedure should be executed to upgrade a dependency. Preferably keep dependency upgrades in a separate commit from your code changes.\n\n```bash\ngo get -u github.com/spf13/viper\nbuildscripts/circle-validate-vendor.sh\ngit add .\ngit commit -m \"Upgraded github.com/spf13/viper\"\n```\n\nThe `buildscripts/circle-validate-vendor.sh` runs `go mod tidy` and `go mod vendor` using the given version of Go to prevent differences if you are for example running on a different version of Go.\n\n## Building notary\n\nNote that the [latest stable release](https://github.com/theupdateframework/notary/releases) is at the head of the\n[releases branch](https://github.com/theupdateframework/notary/tree/releases).  The master branch is the development\nbranch and contains features for the next release.\n\nPrerequisites:\n\n* Go >= 1.12\n\nSet [```GOPATH```](https://golang.org/doc/code.html#GOPATH). Then, run:\n\n```bash\n$ export GO111MODULE=on\n$ go get github.com/theupdateframework/notary\n# build with pkcs11 support by default to support yubikey\n$ go install -tags pkcs11 github.com/theupdateframework/notary/cmd/notary\n$ notary\n```\n\nTo build the server and signer, run `docker-compose build`.\n\n## License\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Ftheupdateframework%2Fnotary.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Ftheupdateframework%2Fnotary?ref=badge_large)\n"
        },
        {
          "name": "build.Dockerfile",
          "type": "blob",
          "size": 0.9140625,
          "content": "FROM golang:1.17.13-alpine3.16 as builder-base\nRUN apk add make bash git openssh build-base curl\n\n#\n# STAGE - Build stage, calls make with given target argument (defaults to all make target)\n#\nFROM builder-base as builder\nARG target=all\nENV RUN_LOCAL=1\nRUN mkdir -p /go/src\nADD . /go/src/\nWORKDIR /go/src\nRUN make $target\n\n#\n# STAGE - Test Build stage, calls make with given target argument (defaults to all make target). Valid for testing purposes only as tests require a specific (non-root) user access for directories read/write access.\n#\nFROM builder-base as test-builder\nARG target=all\nENV GROUP=test-group\nENV USER=test-user\nENV UID=12345\nENV GID=23456\nENV RUN_LOCAL=1\nRUN addgroup -S $GROUP\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"$(pwd)\" \\\n    --ingroup \"$GROUP\" \\\n    --no-create-home \\\n    --uid \"$UID\" \\\n    \"$USER\"\nUSER $USER\nRUN mkdir -p /go/src\nADD . /go/src/\nWORKDIR /go/src\nRUN make $target\n"
        },
        {
          "name": "buildscripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.666015625,
          "content": "codecov:\n  notify:\n    # 2 builds on circleci, 1 jenkins build\n    after_n_builds: 3\ncoverage:\n  range: \"50...100\"\n  status:\n    # project will give us the diff in the total code coverage between a commit\n    # and its parent\n    project:\n      default:\n        target: auto\n        threshold: \"0.05%\"\n    # patch would give us the code coverage of the diff only\n    patch: false\n    # changes tells us if there are unexpected code coverage changes in other files\n    # which were not changed by the diff\n    changes: false\n  ignore:  # ignore testutils for coverage\n    - \"tuf/testutils/*\"\n    - \"vendor/*\"\n    - \"proto/*.pb.go\"\n    - \"trustmanager/remoteks/*.pb.go\"\ncomment: off\n\n"
        },
        {
          "name": "const.go",
          "type": "blob",
          "size": 3.3818359375,
          "content": "package notary\n\nimport (\n\t\"time\"\n)\n\n// application wide constants\nconst (\n\t// MaxDownloadSize is the maximum size we'll download for metadata if no limit is given\n\tMaxDownloadSize int64 = 100 << 20\n\t// MaxTimestampSize is the maximum size of timestamp metadata - 1MiB.\n\tMaxTimestampSize int64 = 1 << 20\n\t// MinRSABitSize is the minimum bit size for RSA keys allowed in notary\n\tMinRSABitSize = 2048\n\t// MinThreshold requires a minimum of one threshold for roles; currently we do not support a higher threshold\n\tMinThreshold = 1\n\t// SHA256HexSize is how big a SHA256 hex is in number of characters\n\tSHA256HexSize = 64\n\t// SHA512HexSize is how big a SHA512 hex is in number of characters\n\tSHA512HexSize = 128\n\t// SHA256 is the name of SHA256 hash algorithm\n\tSHA256 = \"sha256\"\n\t// SHA512 is the name of SHA512 hash algorithm\n\tSHA512 = \"sha512\"\n\t// TrustedCertsDir is the directory, under the notary repo base directory, where trusted certs are stored\n\tTrustedCertsDir = \"trusted_certificates\"\n\t// PrivDir is the directory, under the notary repo base directory, where private keys are stored\n\tPrivDir = \"private\"\n\t// RootKeysSubdir is the subdirectory under PrivDir where root private keys are stored\n\t// DEPRECATED: The only reason we need this constant is compatibility with older versions\n\tRootKeysSubdir = \"root_keys\"\n\t// NonRootKeysSubdir is the subdirectory under PrivDir where non-root private keys are stored\n\t// DEPRECATED: The only reason we need this constant is compatibility with older versions\n\tNonRootKeysSubdir = \"tuf_keys\"\n\t// KeyExtension is the file extension to use for private key files\n\tKeyExtension = \"key\"\n\n\t// Day is a duration of one day\n\tDay  = 24 * time.Hour\n\tYear = 365 * Day\n\n\t// NotaryRootExpiry is the duration representing the expiry time of the Root role\n\tNotaryRootExpiry      = 10 * Year\n\tNotaryTargetsExpiry   = 3 * Year\n\tNotarySnapshotExpiry  = 3 * Year\n\tNotaryTimestampExpiry = 14 * Day\n\n\tConsistentMetadataCacheMaxAge = 30 * Day\n\tCurrentMetadataCacheMaxAge    = 5 * time.Minute\n\t// CacheMaxAgeLimit is the generally recommended maximum age for Cache-Control headers\n\t// (one year, in seconds, since one year is forever in terms of internet\n\t// content)\n\tCacheMaxAgeLimit = 1 * Year\n\n\tMySQLBackend     = \"mysql\"\n\tMemoryBackend    = \"memory\"\n\tPostgresBackend  = \"postgres\"\n\tSQLiteBackend    = \"sqlite3\"\n\tRethinkDBBackend = \"rethinkdb\"\n\tFileBackend      = \"file\"\n\n\tDefaultImportRole = \"delegation\"\n\n\t// HealthCheckKeyManagement and HealthCheckSigner are the grpc service name\n\t// for \"KeyManagement\" and \"Signer\" respectively which used for health check.\n\t// The \"Overall\" indicates the querying for overall status of the server.\n\tHealthCheckKeyManagement = \"grpc.health.v1.Health.KeyManagement\"\n\tHealthCheckSigner        = \"grpc.health.v1.Health.Signer\"\n\tHealthCheckOverall       = \"grpc.health.v1.Health.Overall\"\n\n\t// PrivExecPerms indicates the file permissions for directory\n\t// and PrivNoExecPerms for file.\n\tPrivExecPerms   = 0700\n\tPrivNoExecPerms = 0600\n\n\t// DefaultPageSize is the default number of records to return from the changefeed\n\tDefaultPageSize = 100\n)\n\n// enum to use for setting and retrieving values from contexts\nconst (\n\tCtxKeyMetaStore CtxKey = iota\n\tCtxKeyKeyAlgo\n\tCtxKeyCryptoSvc\n\tCtxKeyRepo\n)\n\n// NotarySupportedBackends contains the backends we would like to support at present\nvar NotarySupportedBackends = []string{\n\tMemoryBackend,\n\tMySQLBackend,\n\tSQLiteBackend,\n\tRethinkDBBackend,\n\tPostgresBackend,\n}\n"
        },
        {
          "name": "const_nowindows.go",
          "type": "blob",
          "size": 0.318359375,
          "content": "// +build !windows\n\npackage notary\n\nimport (\n\t\"os\"\n\t\"syscall\"\n)\n\n// NotarySupportedSignals contains the signals we would like to capture:\n// - SIGUSR1, indicates a increment of the log level.\n// - SIGUSR2, indicates a decrement of the log level.\nvar NotarySupportedSignals = []os.Signal{\n\tsyscall.SIGUSR1,\n\tsyscall.SIGUSR2,\n}\n"
        },
        {
          "name": "const_windows.go",
          "type": "blob",
          "size": 0.189453125,
          "content": "// +build windows\n\npackage notary\n\nimport \"os\"\n\n// NotarySupportedSignals does not contain any signals, because SIGUSR1/2 are not supported on windows\nvar NotarySupportedSignals = []os.Signal{}\n"
        },
        {
          "name": "cross.Dockerfile",
          "type": "blob",
          "size": 1.029296875,
          "content": "FROM dockercore/golang-cross:1.13.15\n\nRUN apt-get update && apt-get install -y \\\n\tcurl \\\n\tclang \\\n\tfile \\\n\tlibsqlite3-dev \\\n\tpatch \\\n\ttar \\\n\txz-utils \\\n\tpython \\\n\tpython-pip \\\n\t--no-install-recommends \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN useradd -ms /bin/bash notary \\\n    && pip install codecov\n\nENV GO111MODULE=on\n\n# Locked go cyclo on this commit as newer commits depend on Golang 1.16 io/fs\nRUN go get golang.org/x/lint/golint \\\n    github.com/client9/misspell/cmd/misspell \\\n    github.com/gordonklaus/ineffassign \\\n    github.com/securego/gosec/cmd/gosec/... \\\n    github.com/fzipp/gocyclo@ffe36aa317dcbb421a536de071660261136174dd\n\nENV GOFLAGS=-mod=vendor \\\n    NOTARYDIR=/go/src/github.com/theupdateframework/notary\n\nCOPY . ${NOTARYDIR}\nRUN chmod -R a+rw /go\n\nWORKDIR ${NOTARYDIR}\n\n# Note this cannot use alpine because of the MacOSX Cross SDK: the cctools there uses sys/cdefs.h and that cannot be used in alpine: http://wiki.musl-libc.org/wiki/FAQ#Q:_I.27m_trying_to_compile_something_against_musl_and_I_get_error_messages_about_sys.2Fcdefs.h\n"
        },
        {
          "name": "cryptoservice",
          "type": "tree",
          "content": null
        },
        {
          "name": "development.mysql.yml",
          "type": "blob",
          "size": 1.2783203125,
          "content": "version: \"2\"\nservices:\n  server:\n    build:\n      context: .\n      dockerfile: server.Dockerfile\n    networks:\n      mdb:\n      sig:\n      srv:\n        aliases:\n          - notary-server\n    entrypoint: /usr/bin/env sh\n    command: -c \"./migrations/migrate.sh && notary-server -config=fixtures/server-config.json\"\n    depends_on:\n      - mysql\n      - signer\n  signer:\n    build:\n      context: .\n      dockerfile: signer.Dockerfile\n    networks:\n      mdb:\n      sig:\n        aliases:\n          - notarysigner\n    entrypoint: /usr/bin/env sh\n    command: -c \"./migrations/migrate.sh && notary-signer -config=fixtures/signer-config.json\"\n    depends_on:\n      - mysql\n  mysql:\n    networks:\n      mdb:\n        aliases:\n          - mysql\n    volumes:\n      - ./notarysql/mysql-initdb.d:/docker-entrypoint-initdb.d\n    image: mariadb:10.4\n    environment:\n      - TERM=dumb\n      - MYSQL_ALLOW_EMPTY_PASSWORD=\"true\"\n    command: mysqld --innodb_file_per_table\n  client:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    env_file: buildscripts/env.list\n    command: buildscripts/testclient.py\n    volumes:\n      - ./test_output:/test_output\n    networks:\n      - mdb\n      - srv\n    depends_on:\n      - server\nnetworks:\n  mdb:\n    external: false\n  sig:\n    external: false\n  srv:\n    external: false\n"
        },
        {
          "name": "development.postgresql.yml",
          "type": "blob",
          "size": 2.0224609375,
          "content": "version: \"2\"\nservices:\n  server:\n    build:\n      context: .\n      dockerfile: server.Dockerfile\n    networks:\n      mdb:\n      sig:\n      srv:\n        aliases:\n          - notary-server\n    entrypoint: /usr/bin/env sh\n    command: -c \"./migrations/migrate.sh && notary-server -config=fixtures/server-config.postgres.json\"\n    environment:\n      MIGRATIONS_PATH: migrations/server/postgresql\n      DB_URL: postgres://server@postgresql:5432/notaryserver?sslmode=verify-ca&sslrootcert=/go/src/github.com/theupdateframework/notary/fixtures/database/ca.pem&sslcert=/go/src/github.com/theupdateframework/notary/fixtures/database/notary-server.pem&sslkey=/go/src/github.com/theupdateframework/notary/fixtures/database/notary-server-key.pem\n    depends_on:\n      - postgresql\n      - signer\n  signer:\n    build:\n      context: .\n      dockerfile: signer.Dockerfile\n    networks:\n      mdb:\n      sig:\n        aliases:\n          - notarysigner\n    entrypoint: /usr/bin/env sh\n    command: -c \"./migrations/migrate.sh && notary-signer -config=fixtures/signer-config.postgres.json\"\n    environment:\n      MIGRATIONS_PATH: migrations/signer/postgresql\n      DB_URL: postgres://signer@postgresql:5432/notarysigner?sslmode=verify-ca&sslrootcert=/go/src/github.com/theupdateframework/notary/fixtures/database/ca.pem&sslcert=/go/src/github.com/theupdateframework/notary/fixtures/database/notary-signer.pem&sslkey=/go/src/github.com/theupdateframework/notary/fixtures/database/notary-signer-key.pem\n    depends_on:\n      - postgresql\n  postgresql:\n    image: postgres:9.5.4\n    networks:\n      mdb:\n        aliases:\n          - postgresql\n    volumes:\n      - ./notarysql/postgresql-initdb.d:/docker-entrypoint-initdb.d\n    command: -l\n  client:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    env_file: buildscripts/env.list\n    command: buildscripts/testclient.py\n    volumes:\n      - ./test_output:/test_output\n    networks:\n      - mdb\n      - srv\n    depends_on:\n      - server\nnetworks:\n  mdb:\n    external: false\n  sig:\n    external: false\n  srv:\n    external: false\n"
        },
        {
          "name": "development.rethink.yml",
          "type": "blob",
          "size": 3.5537109375,
          "content": "version: \"2\"\nservices:\n    server:\n      build:\n        context: .\n        dockerfile: server.Dockerfile\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n      networks:\n        - rdb\n      links:\n        - rdb-proxy:rdb-proxy.rdb\n        - signer\n      ports:\n        - \"8080\"\n        - \"4443:4443\"\n      entrypoint: /usr/bin/env sh\n      command: -c \"sh migrations/rethink_migrate.sh && notary-server -config=fixtures/server-config.rethink.json\"\n      depends_on:\n        - rdb-proxy\n    signer:\n      build:\n        context: .\n        dockerfile: signer.Dockerfile\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n      networks:\n        rdb:\n            aliases:\n                - notarysigner\n      links:\n        - rdb-proxy:rdb-proxy.rdb\n      entrypoint: /usr/bin/env sh\n      command: -c \"sh migrations/rethink_migrate.sh && notary-signer -config=fixtures/signer-config.rethink.json\"\n      depends_on:\n        - rdb-proxy\n    rdb-01:\n      image: jlhawn/rethinkdb:2.3.4\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n        - rdb-01-data:/var/data\n      networks:\n        rdb:\n          aliases:\n            - rdb\n            - rdb.rdb\n            - rdb-01.rdb\n      command: \"--bind all --no-http-admin --server-name rdb_01 --canonical-address rdb-01.rdb --directory /var/data/rethinkdb --join rdb.rdb --driver-tls-ca /tls/ca.pem --driver-tls-key /tls/key.pem --driver-tls-cert /tls/cert.pem --cluster-tls-key /tls/key.pem --cluster-tls-cert /tls/cert.pem --cluster-tls-ca /tls/ca.pem\"\n    rdb-02:\n      image: jlhawn/rethinkdb:2.3.4\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n        - rdb-02-data:/var/data\n      networks:\n        rdb:\n          aliases:\n            - rdb\n            - rdb.rdb\n            - rdb-02.rdb\n      command: \"--bind all --no-http-admin --server-name rdb_02 --canonical-address rdb-02.rdb --directory /var/data/rethinkdb --join rdb.rdb --driver-tls-ca /tls/ca.pem --driver-tls-key /tls/key.pem --driver-tls-cert /tls/cert.pem --cluster-tls-key /tls/key.pem --cluster-tls-cert /tls/cert.pem --cluster-tls-ca /tls/ca.pem\"\n    rdb-03:\n      image: jlhawn/rethinkdb:2.3.4\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n        - rdb-03-data:/var/data\n      networks:\n        rdb:\n          aliases:\n            - rdb\n            - rdb.rdb\n            - rdb-03.rdb\n      command: \"--bind all --no-http-admin --server-name rdb_03 --canonical-address rdb-03.rdb --directory /var/data/rethinkdb --join rdb.rdb --driver-tls-ca /tls/ca.pem --driver-tls-key /tls/key.pem --driver-tls-cert /tls/cert.pem --cluster-tls-key /tls/key.pem --cluster-tls-cert /tls/cert.pem --cluster-tls-ca /tls/ca.pem\"\n    rdb-proxy:\n      image: jlhawn/rethinkdb:2.3.4\n      ports:\n        - \"8080:8080\"\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n      networks:\n        rdb:\n          aliases:\n            - rdb-proxy\n            - rdb-proxy.rdp\n      command: \"proxy --bind all --join rdb.rdb --driver-tls-ca /tls/ca.pem --driver-tls-key /tls/key.pem --driver-tls-cert /tls/cert.pem --cluster-tls-key /tls/key.pem --cluster-tls-cert /tls/cert.pem --cluster-tls-ca /tls/ca.pem\"\n      depends_on:\n        - rdb-01\n        - rdb-02\n        - rdb-03\n    client:\n      build:\n        context: .\n        dockerfile: Dockerfile\n      volumes:\n        - ./test_output:/test_output\n      networks:\n        - rdb\n      env_file: buildscripts/env.list\n      links:\n        - server:notary-server\n      command: buildscripts/testclient.py\nvolumes:\n    rdb-01-data:\n        external: false\n    rdb-02-data:\n        external: false\n    rdb-03-data:\n        external: false\nnetworks:\n    rdb:\n        external: false\n"
        },
        {
          "name": "docker-compose.postgresql.yml",
          "type": "blob",
          "size": 1.80859375,
          "content": "version: \"2\"\nservices:\n  server:\n    build:\n      context: .\n      dockerfile: server.Dockerfile\n    networks:\n      - mdb\n      - sig\n    ports:\n      - \"8080\"\n      - \"4443:4443\"\n    entrypoint: /usr/bin/env sh\n    command: -c \"./migrations/migrate.sh && notary-server -config=fixtures/server-config.postgres.json\"\n    environment:\n      MIGRATIONS_PATH: migrations/server/postgresql\n      DB_URL: postgres://server@postgresql:5432/notaryserver?sslmode=verify-ca&sslrootcert=/go/src/github.com/theupdateframework/notary/fixtures/database/ca.pem&sslcert=/go/src/github.com/theupdateframework/notary/fixtures/database/notary-server.pem&sslkey=/go/src/github.com/theupdateframework/notary/fixtures/database/notary-server-key.pem\n    depends_on:\n      - postgresql\n      - signer\n  signer:\n    build:\n      context: .\n      dockerfile: signer.Dockerfile\n    networks:\n      mdb:\n      sig:\n        aliases:\n          - notarysigner\n    entrypoint: /usr/bin/env sh\n    command: -c \"./migrations/migrate.sh && notary-signer -config=fixtures/signer-config.postgres.json\"\n    environment:\n      MIGRATIONS_PATH: migrations/signer/postgresql\n      DB_URL: postgres://signer@postgresql:5432/notarysigner?sslmode=verify-ca&sslrootcert=/go/src/github.com/theupdateframework/notary/fixtures/database/ca.pem&sslcert=/go/src/github.com/theupdateframework/notary/fixtures/database/notary-signer.pem&sslkey=/go/src/github.com/theupdateframework/notary/fixtures/database/notary-signer-key.pem\n    depends_on:\n      - postgresql\n  postgresql:\n    image: postgres:9.5.4\n    networks:\n      - mdb\n    volumes:\n      - ./notarysql/postgresql-initdb.d:/docker-entrypoint-initdb.d\n      - notary_data:/var/lib/postgresql\n    ports:\n      - 5432:5432\n    command: -l\nvolumes:\n  notary_data:\n    external: false\nnetworks:\n  mdb:\n    external: false\n  sig:\n    external: false\n"
        },
        {
          "name": "docker-compose.rethink.yml",
          "type": "blob",
          "size": 3.212890625,
          "content": "version: \"2\"\nservices:\n    server:\n      build:\n        context: .\n        dockerfile: server.Dockerfile\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n      networks:\n        - rdb\n      links:\n        - rdb-proxy:rdb-proxy.rdb\n        - signer\n      ports:\n        - \"4443:4443\"\n      entrypoint: /usr/bin/env sh\n      command: -c \"sh migrations/rethink_migrate.sh && notary-server -config=fixtures/server-config.rethink.json\"\n      depends_on:\n        - rdb-proxy\n    signer:\n      build:\n        context: .\n        dockerfile: signer.Dockerfile\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n      networks:\n        rdb:\n            aliases:\n                - notarysigner\n      links:\n        - rdb-proxy:rdb-proxy.rdb\n      entrypoint: /usr/bin/env sh\n      command: -c \"sh migrations/rethink_migrate.sh && notary-signer -config=fixtures/signer-config.rethink.json\"\n      depends_on:\n        - rdb-proxy\n    rdb-01:\n      image: jlhawn/rethinkdb:2.3.4\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n        - rdb-01-data:/var/data\n      networks:\n        rdb:\n          aliases:\n            - rdb-01.rdb\n      command: \"--bind all --no-http-admin --server-name rdb_01 --canonical-address rdb-01.rdb --directory /var/data/rethinkdb --driver-tls-ca /tls/ca.pem --driver-tls-key /tls/key.pem --driver-tls-cert /tls/cert.pem --cluster-tls-key /tls/key.pem --cluster-tls-cert /tls/cert.pem --cluster-tls-ca /tls/ca.pem\"\n    rdb-02:\n      image: jlhawn/rethinkdb:2.3.4\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n        - rdb-02-data:/var/data\n      networks:\n        rdb:\n          aliases:\n            - rdb-02.rdb\n      command: \"--bind all --no-http-admin --server-name rdb_02 --canonical-address rdb-02.rdb --directory /var/data/rethinkdb --join rdb-01 --driver-tls-ca /tls/ca.pem --driver-tls-key /tls/key.pem --driver-tls-cert /tls/cert.pem --cluster-tls-key /tls/key.pem --cluster-tls-cert /tls/cert.pem --cluster-tls-ca /tls/ca.pem\"\n      depends_on:\n        - rdb-01\n    rdb-03:\n      image: jlhawn/rethinkdb:2.3.4\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n        - rdb-03-data:/var/data\n      networks:\n        rdb:\n          aliases:\n            - rdb-03.rdb\n      command: \"--bind all --no-http-admin --server-name rdb_03 --canonical-address rdb-03.rdb --directory /var/data/rethinkdb --join rdb-02 --driver-tls-ca /tls/ca.pem --driver-tls-key /tls/key.pem --driver-tls-cert /tls/cert.pem --cluster-tls-key /tls/key.pem --cluster-tls-cert /tls/cert.pem --cluster-tls-ca /tls/ca.pem\"\n      depends_on:\n        - rdb-01\n        - rdb-02\n    rdb-proxy:\n      image: jlhawn/rethinkdb:2.3.4\n      ports:\n        - \"8080:8080\"\n      volumes:\n        - ./fixtures/rethinkdb:/tls\n      networks:\n        rdb:\n          aliases:\n            - rdb-proxy\n            - rdb-proxy.rdp\n      command: \"proxy --bind all --join rdb-03 --driver-tls-ca /tls/ca.pem --driver-tls-key /tls/key.pem --driver-tls-cert /tls/cert.pem --cluster-tls-key /tls/key.pem --cluster-tls-cert /tls/cert.pem --cluster-tls-ca /tls/ca.pem\"\n      depends_on:\n        - rdb-01\n        - rdb-02\n        - rdb-03\nvolumes:\n    rdb-01-data:\n        external: false\n    rdb-02-data:\n        external: false\n    rdb-03-data:\n        external: false\nnetworks:\n    rdb:\n        external: false\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.0361328125,
          "content": "version: \"2\"\nservices:\n  server:\n    build:\n      context: .\n      dockerfile: server.Dockerfile\n    networks:\n      - mdb\n      - sig\n    ports:\n      - \"8080\"\n      - \"4443:4443\"\n    entrypoint: /usr/bin/env sh\n    command: -c \"./migrations/migrate.sh && notary-server -config=fixtures/server-config.json\"\n    depends_on:\n      - mysql\n      - signer\n  signer:\n    build:\n      context: .\n      dockerfile: signer.Dockerfile\n    networks:\n      mdb:\n      sig:\n        aliases:\n          - notarysigner\n    entrypoint: /usr/bin/env sh\n    command: -c \"./migrations/migrate.sh && notary-signer -config=fixtures/signer-config.json\"\n    depends_on:\n      - mysql\n  mysql:\n    networks:\n      - mdb\n    volumes:\n      - ./notarysql/mysql-initdb.d:/docker-entrypoint-initdb.d\n      - notary_data:/var/lib/mysql\n    image: mariadb:10.4\n    environment:\n      - TERM=dumb\n      - MYSQL_ALLOW_EMPTY_PASSWORD=\"true\"\n    command: mysqld --innodb_file_per_table\nvolumes:\n  notary_data:\n    external: false\nnetworks:\n  mdb:\n    external: false\n  sig:\n    external: false\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "escrow.Dockerfile",
          "type": "blob",
          "size": 0.3310546875,
          "content": "FROM golang:1.17.13-alpine\n\nENV NOTARYPKG github.com/theupdateframework/notary\nENV GO111MODULE=on\n\n# Copy the local repo to the expected go path\nCOPY . /go/src/${NOTARYPKG}\n\nWORKDIR /go/src/${NOTARYPKG}\n\nEXPOSE 4450\n\n# Install escrow\nRUN go install ${NOTARYPKG}/cmd/escrow\n\nENTRYPOINT [ \"escrow\" ]\nCMD [ \"-config=cmd/escrow/config.toml\" ]\n"
        },
        {
          "name": "fips.go",
          "type": "blob",
          "size": 0.3564453125,
          "content": "package notary\n\nimport (\n\t\"crypto\"\n\t// Need to import md5 so can test availability.\n\t_ \"crypto/md5\" // #nosec\n)\n\n// FIPSEnabled returns true if running in FIPS mode.\n// If compiled in FIPS mode the md5 hash function is never available\n// even when imported. This seems to be the best test we have for it.\nfunc FIPSEnabled() bool {\n\treturn !crypto.MD5.Available()\n}\n"
        },
        {
          "name": "fixtures",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 3.3994140625,
          "content": "module github.com/theupdateframework/notary\n\ngo 1.17\n\nrequire (\n\tgithub.com/Shopify/logrus-bugsnag v0.0.0-20170309145241-6dbc35f2c30d\n\tgithub.com/bugsnag/bugsnag-go v1.0.5\n\tgithub.com/cloudflare/cfssl v0.0.0-20180223231731-4e2dcbde5004 // 1.3.1\n\tgithub.com/docker/distribution v2.7.1+incompatible\n\tgithub.com/docker/go v1.5.1-1.0.20160303222718-d30aec9fd63c\n\tgithub.com/docker/go-connections v0.4.0\n\tgithub.com/dvsekhvalnov/jose2go v0.0.0-20200901110807-248326c1351b\n\tgithub.com/go-sql-driver/mysql v1.5.0\n\tgithub.com/golang/protobuf v1.5.2\n\tgithub.com/gorilla/mux v1.7.0\n\tgithub.com/jinzhu/gorm v1.9.16\n\tgithub.com/lib/pq v1.9.0\n\tgithub.com/mattn/go-sqlite3 v1.14.0\n\tgithub.com/miekg/pkcs11 v1.0.3\n\tgithub.com/prometheus/client_golang v0.9.0-pre1.0.20180209125602-c332b6f63c06\n\tgithub.com/sirupsen/logrus v1.8.1\n\tgithub.com/spf13/cobra v1.6.0\n\tgithub.com/spf13/viper v0.0.0-20150530192845-be5ff3e4840c\n\tgithub.com/stretchr/testify v1.7.0\n\tgolang.org/x/crypto v0.0.0-20201117144127-c1f2f97bffc9\n\tgolang.org/x/net v0.0.0-20201021035429-f5854403a974\n\tgolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a\n\tgolang.org/x/term v0.0.0-20201117132131-f5c789dd3221\n\tgoogle.golang.org/grpc v1.47.0\n\tgoogle.golang.org/protobuf v1.27.1\n\tgopkg.in/rethinkdb/rethinkdb-go.v6 v6.2.1\n)\n\nrequire (\n\tgithub.com/BurntSushi/toml v0.3.1 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/bitly/go-simplejson v0.5.0 // indirect\n\tgithub.com/bugsnag/osext v0.0.0-20130617224835-0dd3f918b21b // indirect\n\tgithub.com/bugsnag/panicwrap v0.0.0-20151223152923-e2c28503fcd0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/denisenkom/go-mssqldb v0.0.0-20191128021309-1d7a30a10f73 // indirect\n\tgithub.com/docker/go-metrics v0.0.0-20180209012529-399ea8c73916 // indirect\n\tgithub.com/docker/libtrust v0.0.0-20160708172513-aabc10ec26b7 // indirect\n\tgithub.com/gogo/protobuf v1.0.0 // indirect\n\tgithub.com/google/certificate-transparency-go v1.0.10-0.20180222191210-5ab67e519c93 // indirect\n\tgithub.com/hailocab/go-hostpool v0.0.0-20160125115350-e80d13ce29ed // indirect\n\tgithub.com/inconshreveable/mousetrap v1.0.1 // indirect\n\tgithub.com/jinzhu/inflection v1.0.0 // indirect\n\tgithub.com/jinzhu/now v1.1.4 // indirect\n\tgithub.com/juju/loggo v0.0.0-20190526231331-6e530bcce5d8 // indirect\n\tgithub.com/kr/pretty v0.1.0 // indirect\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/magiconair/properties v1.5.3 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect\n\tgithub.com/mitchellh/mapstructure v1.0.0 // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.0.1 // indirect\n\tgithub.com/opentracing/opentracing-go v1.1.0 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4 // indirect\n\tgithub.com/prometheus/common v0.0.0-20180110214958-89604d197083 // indirect\n\tgithub.com/prometheus/procfs v0.0.0-20180125133057-cb4147076ac7 // indirect\n\tgithub.com/spf13/cast v0.0.0-20150508191742-4d07383ffe94 // indirect\n\tgithub.com/spf13/jwalterweatherman v0.0.0-20141219030609-3d60171a6431 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgolang.org/x/text v0.3.3 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013 // indirect\n\tgopkg.in/cenkalti/backoff.v2 v2.2.1 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 27.7890625,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ngithub.com/BurntSushi/toml v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/PuerkitoBio/goquery v1.5.1/go.mod h1:GsLWisAFVj4WgDibEWF4pvYnkVQBpKBKeU+7zCJoLcc=\ngithub.com/Shopify/logrus-bugsnag v0.0.0-20170309145241-6dbc35f2c30d h1:hi6J4K6DKrR4/ljxn6SF6nURyu785wKMuQcjt7H3VCQ=\ngithub.com/Shopify/logrus-bugsnag v0.0.0-20170309145241-6dbc35f2c30d/go.mod h1:HI8ITrYtUY+O+ZhtlqUnD8+KwNPOyugEhfP9fdUIaEQ=\ngithub.com/andybalholm/cascadia v1.1.0/go.mod h1:GsXiBklL0woXo1j/WYWtSYYC4ouU9PqHO0sqidkEA4Y=\ngithub.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bitly/go-hostpool v0.1.0 h1:XKmsF6k5el6xHG3WPJ8U0Ku/ye7njX7W81Ng7O2ioR0=\ngithub.com/bitly/go-hostpool v0.1.0/go.mod h1:4gOCgp6+NZnVqlKyZ/iBZFTAJKembaVENUpMkpg42fw=\ngithub.com/bitly/go-simplejson v0.5.0 h1:6IH+V8/tVMab511d5bn4M7EwGXZf9Hj6i2xSwkNEM+Y=\ngithub.com/bitly/go-simplejson v0.5.0/go.mod h1:cXHtHw4XUPsvGaxgjIAn8PhEWG9NfngEKAMDJEczWVA=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869 h1:DDGfHa7BWjL4YnC6+E63dPcxHo2sUxDIu8g3QgEJdRY=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869/go.mod h1:Ekp36dRnpXw/yCqJaO+ZrUyxD+3VXMFFr56k5XYrpB4=\ngithub.com/bugsnag/bugsnag-go v1.0.5 h1:NIoY2u+am1/GRgUZa+ata8UUrRBuCK4pLq0/lcvMF7M=\ngithub.com/bugsnag/bugsnag-go v1.0.5/go.mod h1:2oa8nejYd4cQ/b0hMIopN0lCRxU0bueqREvZLWFrtK8=\ngithub.com/bugsnag/osext v0.0.0-20130617224835-0dd3f918b21b h1:otBG+dV+YK+Soembjv71DPz3uX/V/6MMlSyD9JBQ6kQ=\ngithub.com/bugsnag/osext v0.0.0-20130617224835-0dd3f918b21b/go.mod h1:obH5gd0BsqsP2LwDJ9aOkm/6J86V6lyAXCoQWGw3K50=\ngithub.com/bugsnag/panicwrap v0.0.0-20151223152923-e2c28503fcd0 h1:nvj0OLI3YqYXer/kZD8Ri1aaunCxIEsOst1BVJswV0o=\ngithub.com/bugsnag/panicwrap v0.0.0-20151223152923-e2c28503fcd0/go.mod h1:D/8v3kj0zr8ZAKg1AQ6crr+5VwKN5eIywRkfhyM/+dE=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cloudflare/cfssl v0.0.0-20180223231731-4e2dcbde5004 h1:lkAMpLVBDaj17e85keuznYcH5rqI438v41pKcBl4ZxQ=\ngithub.com/cloudflare/cfssl v0.0.0-20180223231731-4e2dcbde5004/go.mod h1:yMWuSON2oQp+43nFtAV/uvKQIFpSPerB57DCt9t8sSA=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\ngithub.com/cncf/udpa/go v0.0.0-20210930031921-04548b0d99d4/go.mod h1:6pvJx4me5XPnfI9Z40ddWsdw2W/uZgQLFXToKeRcDiI=\ngithub.com/cncf/xds/go v0.0.0-20210922020428-25de7278fc84/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cncf/xds/go v0.0.0-20211001041855-01bcc9b48dfe/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cncf/xds/go v0.0.0-20211011173535-cb28da3451f1/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/denisenkom/go-mssqldb v0.0.0-20191124224453-732737034ffd/go.mod h1:xbL0rPBG9cCiLr28tMa8zpbdarY27NDyej4t/EjAShU=\ngithub.com/denisenkom/go-mssqldb v0.0.0-20191128021309-1d7a30a10f73 h1:OGNva6WhsKst5OZf7eZOklDztV3hwtTHovdrLHV+MsA=\ngithub.com/denisenkom/go-mssqldb v0.0.0-20191128021309-1d7a30a10f73/go.mod h1:xbL0rPBG9cCiLr28tMa8zpbdarY27NDyej4t/EjAShU=\ngithub.com/docker/distribution v2.7.1+incompatible h1:a5mlkVzth6W5A4fOsS3D2EO5BUmsJpcB+cRlLU7cSug=\ngithub.com/docker/distribution v2.7.1+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=\ngithub.com/docker/go v1.5.1-1.0.20160303222718-d30aec9fd63c h1:lzqkGL9b3znc+ZUgi7FlLnqjQhcXxkNM/quxIjBVMD0=\ngithub.com/docker/go v1.5.1-1.0.20160303222718-d30aec9fd63c/go.mod h1:CADgU4DSXK5QUlFslkQu2yW2TKzFZcXq/leZfM0UH5Q=\ngithub.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=\ngithub.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-metrics v0.0.0-20180209012529-399ea8c73916 h1:yWHOI+vFjEsAakUTSrtqc/SAHrhSkmn48pqjidZX3QA=\ngithub.com/docker/go-metrics v0.0.0-20180209012529-399ea8c73916/go.mod h1:/u0gXw0Gay3ceNrsHubL3BtdOL2fHf93USgMTe0W5dI=\ngithub.com/docker/libtrust v0.0.0-20160708172513-aabc10ec26b7 h1:UhxFibDNY/bfvqU5CAUmr9zpesgbU6SWc8/B4mflAE4=\ngithub.com/docker/libtrust v0.0.0-20160708172513-aabc10ec26b7/go.mod h1:cyGadeNEkKy96OOhEzfZl+yxihPEzKnqJwvfuSUqbZE=\ngithub.com/dvsekhvalnov/jose2go v0.0.0-20200901110807-248326c1351b h1:HBah4D48ypg3J7Np4N+HY/ZR76fx3HEUGxDU6Uk39oQ=\ngithub.com/dvsekhvalnov/jose2go v0.0.0-20200901110807-248326c1351b/go.mod h1:7BvyPhdbLxMXIYTFPLsyJRFMsKmOZnQmzh6Gb+uquuM=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20201210154907-fd9021fe5dad/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\ngithub.com/envoyproxy/go-control-plane v0.10.2-0.20220325020618-49ff273808a1/go.mod h1:KJwIaB5Mv44NWtYuAOFCVOjcI94vtpEz2JU/D2v6IjE=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/erikstmartin/go-testdb v0.0.0-20160219214506-8d10e4a1bae5 h1:Yzb9+7DPaBjB8zlTR87/ElzFsnQfuHnVUVqpZZIcV5Y=\ngithub.com/erikstmartin/go-testdb v0.0.0-20160219214506-8d10e4a1bae5/go.mod h1:a2zkGnVExMxdzMo3M0Hi/3sEU+cWnZpSni0O6/Yb/P0=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/go-sql-driver/mysql v1.5.0 h1:ozyZYNQW3x3HtqT1jira07DN2PArx2v7/mN66gGcHOs=\ngithub.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/gogo/protobuf v1.0.0 h1:2jyBKDKU/8v3v2xVR2PtiWQviFUyiaGk2rpfyFT8rTM=\ngithub.com/gogo/protobuf v1.0.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe h1:lXe2qZdvpiX5WZkZR4hgp4KJVfY3nMkvmwbVkpv1rVY=\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.4/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/certificate-transparency-go v1.0.10-0.20180222191210-5ab67e519c93 h1:jc2UWq7CbdszqeH6qu1ougXMIUBfSy8Pbh/anURYbGI=\ngithub.com/google/certificate-transparency-go v1.0.10-0.20180222191210-5ab67e519c93/go.mod h1:QeJfpSbVSfYc7RgB3gJFj9cbuQMMchQxrWXz8Ruopmg=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6 h1:BKbKCqvP6I+rmFHt06ZmyQtvB8xAkWdhFyr0ZUNZcxQ=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/mux v1.7.0 h1:tOSd0UKHQd6urX6ApfOn4XdBMY6Sh1MfxV3kmaazO+U=\ngithub.com/gorilla/mux v1.7.0/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=\ngithub.com/hailocab/go-hostpool v0.0.0-20160125115350-e80d13ce29ed h1:5upAirOpQc1Q53c0bnx2ufif5kANL7bfZWcc6VJWJd8=\ngithub.com/hailocab/go-hostpool v0.0.0-20160125115350-e80d13ce29ed/go.mod h1:tMWxXQ9wFIaZeTI9F+hmhFiGpFmhOHzyShyFUhRm0H4=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/inconshreveable/mousetrap v1.0.1 h1:U3uMjPSQEBMNp1lFxmllqCPM6P5u/Xq7Pgzkat/bFNc=\ngithub.com/inconshreveable/mousetrap v1.0.1/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/jinzhu/gorm v1.9.16 h1:+IyIjPEABKRpsu/F8OvDPy9fyQlgsg2luMV2ZIH5i5o=\ngithub.com/jinzhu/gorm v1.9.16/go.mod h1:G3LB3wezTOWM2ITLzPxEXgSkOXAntiLHS7UdBefADcs=\ngithub.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=\ngithub.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=\ngithub.com/jinzhu/now v1.0.1/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=\ngithub.com/jinzhu/now v1.1.4 h1:tHnRBy1i5F2Dh8BAFxqFzxKqqvezXrL2OW1TnX+Mlas=\ngithub.com/jinzhu/now v1.1.4/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=\ngithub.com/juju/loggo v0.0.0-20190526231331-6e530bcce5d8 h1:UUHMLvzt/31azWTN/ifGWef4WUqvXk0iRqdhdy/2uzI=\ngithub.com/juju/loggo v0.0.0-20190526231331-6e530bcce5d8/go.mod h1:vgyd7OREkbtVEN/8IXZe5Ooef3LQePvuBm9UWj6ZL8U=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lib/pq v1.1.1/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.9.0 h1:L8nSXQQzAYByakOFMTwpjRoHsMJklur4Gi59b6VivR8=\ngithub.com/lib/pq v1.9.0/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/magiconair/properties v1.5.3 h1:C8fxWnhYyME3n0klPOhVM7PtYUB3eV1W3DeFmN3j53Y=\ngithub.com/magiconair/properties v1.5.3/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/mattn/go-sqlite3 v1.14.0 h1:mLyGNKR8+Vv9CAU7PphKa2hkEqxxhn8i32J6FPj1/QA=\ngithub.com/mattn/go-sqlite3 v1.14.0/go.mod h1:JIl7NbARA7phWnGvh0LKTyg7S9BA+6gx71ShQilpsus=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1 h1:4hp9jkHxhMHkqkrB3Ix0jegS5sx/RkqARlsWZ6pIwiU=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/miekg/pkcs11 v1.0.3 h1:iMwmD7I5225wv84WxIG/bmxz9AXjWvTWIbM/TYHvWtw=\ngithub.com/miekg/pkcs11 v1.0.3/go.mod h1:XsNlhZGX73bx86s2hdc/FuaLm2CPZJemRLMA+WTFxgs=\ngithub.com/mitchellh/mapstructure v1.0.0 h1:vVpGvMXJPqSDh2VYHF7gsfQj8Ncx+Xw5Y1KHeTRY+7I=\ngithub.com/mitchellh/mapstructure v1.0.0/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e h1:fD57ERR4JtEqsWbfPhv4DMiApHyliiK5xCTNVSPiaAs=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.12.0/go.mod h1:oUhWkIvk5aDxtKvDDuw8gItl8pKl42LzjC9KZE0HfGg=\ngithub.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=\ngithub.com/onsi/gomega v1.9.0/go.mod h1:Ho0h+IUsWyvy1OpqCwxlQ/21gkhVunqlU8fDGcoTdcA=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.0.1 h1:JMemWkRwHx4Zj+fVxWoMCFm/8sYGGrUVojFA6h/TRcI=\ngithub.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=\ngithub.com/opentracing/opentracing-go v1.1.0 h1:pWlfV3Bxv7k65HYwkikxat0+s3pV4bsqf19k25Ur8rU=\ngithub.com/opentracing/opentracing-go v1.1.0/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v0.9.0-pre1.0.20180209125602-c332b6f63c06 h1:HfhRu7DulhCtYuCwmHYHdZ0pR/qYrCde5uhuemqD8rI=\ngithub.com/prometheus/client_golang v0.9.0-pre1.0.20180209125602-c332b6f63c06/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4 h1:gQz4mCbXsO+nc9n1hCxHcGA3Zx3Eo+UHZoInFGUIXNM=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/common v0.0.0-20180110214958-89604d197083 h1:BVsJT8+ZbyuL3hypz/HmEiM8h2P6hBQGig4el9/MdjA=\ngithub.com/prometheus/common v0.0.0-20180110214958-89604d197083/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/procfs v0.0.0-20180125133057-cb4147076ac7 h1:hhvfGDVThBnd4kYisSFmYuHYeUhglxcwag7FhVPH9zM=\ngithub.com/prometheus/procfs v0.0.0-20180125133057-cb4147076ac7/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sirupsen/logrus v1.0.6/go.mod h1:pMByvHTf9Beacp5x1UXfOR9xyW/9antXMhjMPG0dEzc=\ngithub.com/sirupsen/logrus v1.8.1 h1:dJKuHgqk1NNQlqoA6BTlM1Wf9DOH3NBjQyu0h9+AZZE=\ngithub.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/spf13/cast v0.0.0-20150508191742-4d07383ffe94 h1:JmfC365KywYwHB946TTiQWEb8kqPY+pybPLoGE9GgVk=\ngithub.com/spf13/cast v0.0.0-20150508191742-4d07383ffe94/go.mod h1:r2rcYCSwa1IExKTDiTfzaxqT2FNHs8hODu4LnUfgKEg=\ngithub.com/spf13/cobra v1.6.0 h1:42a0n6jwCot1pUmomAp4T7DeMD+20LFv4Q54pxLf2LI=\ngithub.com/spf13/cobra v1.6.0/go.mod h1:IOw/AERYS7UzyrGinqmz6HLUo219MORXGxhbaJUqzrY=\ngithub.com/spf13/jwalterweatherman v0.0.0-20141219030609-3d60171a6431 h1:XTHrT015sxHyJ5FnQ0AeemSspZWaDq7DoTRW0EVsDCE=\ngithub.com/spf13/jwalterweatherman v0.0.0-20141219030609-3d60171a6431/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v0.0.0-20150530192845-be5ff3e4840c h1:2EejZtjFjKJGk71ANb+wtFK5EjUzUkEM3R0xnp559xg=\ngithub.com/spf13/viper v0.0.0-20150530192845-be5ff3e4840c/go.mod h1:A8kyI5cUJhb8N+3pkfONlcEcZbueH6nhAm0Fq7SrnBM=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.2.0 h1:Hbg2NidpLE8veEBkEZTL3CvlkUIVzuU9jDplZO54c48=\ngithub.com/stretchr/objx v0.2.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngo.opentelemetry.io/proto/otlp v0.7.0/go.mod h1:PqfVotwruBrMGOCsRd/89rSnXhoiJIqeYNgFYFoEGnI=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190325154230-a5d413f7728c/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191205180655-e7c4368fe9dd/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200302210943-78000ba7a073/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201117144127-c1f2f97bffc9 h1:phUcVbl53swtrUN8kQEXFhUxPlIlWyBfKmidCu7P95o=\ngolang.org/x/crypto v0.0.0-20201117144127-c1f2f97bffc9/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/net v0.0.0-20180218175443-cbe0f9307d01/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974 h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a h1:dGzPydgVsqGcTRVwiLJ1jVbufYwmzD3LfVPLKsKg+0k=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201117132131-f5c789dd3221 h1:/ZHdbVpdR/jk3g30/d4yUL0JU9kksj8+F/bnQUVLGDM=\ngolang.org/x/term v0.0.0-20201117132131-f5c789dd3221/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3 h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013 h1:+kGHl1aib/qcwaRi1CbqBZ1rk19r85MNUf8HaBghugY=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=\ngoogle.golang.org/grpc v1.36.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.47.0 h1:9n77onPX5F3qfFCqjy9dhn8PbNQsIKeVU04J9G7umt8=\ngoogle.golang.org/grpc v1.47.0/go.mod h1:vN9eftEi1UMyUsIF80+uQXhHjbXYbm0uXoFCACuMGWk=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.27.1 h1:SnqbnDw1V7RiZcXPx5MEeqPv2s79L9i7BJUlG/+RurQ=\ngoogle.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngopkg.in/airbrake/gobrake.v2 v2.0.9/go.mod h1:/h5ZAUhDkGaJfjzjKLSjv6zCL6O0LLBxU4K+aSYdM/U=\ngopkg.in/cenkalti/backoff.v2 v2.2.1 h1:eJ9UAg01/HIHG987TwxvnzK2MgxXq97YY6rYDpY9aII=\ngopkg.in/cenkalti/backoff.v2 v2.2.1/go.mod h1:S0QdOvT2AlerfSBkp0O+dk+bbIMaNbEmVk876gPCthU=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f h1:BLraFXnmrev5lT+xlilqcH8XK9/i0At2xKjWk4p6zsU=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/gemnasium/logrus-airbrake-hook.v2 v2.1.2/go.mod h1:Xk6kEKp8OKb+X14hQBKWaSkCsqBpgog8nAV2xsGOxlo=\ngopkg.in/rethinkdb/rethinkdb-go.v6 v6.2.1 h1:d4KQkxAaAiRY2h5Zqis161Pv91A37uZyJOx73duwUwM=\ngopkg.in/rethinkdb/rethinkdb-go.v6 v6.2.1/go.mod h1:WbjuEoo1oadwzQ4apSDU+JTvmllEHtsNHS6y7vFc7iw=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\n"
        },
        {
          "name": "hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "migrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "notary.go",
          "type": "blob",
          "size": 0.6025390625,
          "content": "package notary\n\n// PassRetriever is a callback function that should retrieve a passphrase\n// for a given named key. If it should be treated as new passphrase (e.g. with\n// confirmation), createNew will be true. Attempts is passed in so that implementers\n// decide how many chances to give to a human, for example.\ntype PassRetriever func(keyName, alias string, createNew bool, attempts int) (passphrase string, giveup bool, err error)\n\n// CtxKey is a wrapper type for use in context.WithValue() to satisfy golint\n// https://github.com/golang/go/issues/17293\n// https://github.com/golang/lint/pull/245\ntype CtxKey int\n"
        },
        {
          "name": "notarysql",
          "type": "tree",
          "content": null
        },
        {
          "name": "passphrase",
          "type": "tree",
          "content": null
        },
        {
          "name": "proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "server.Dockerfile",
          "type": "blob",
          "size": 0.8583984375,
          "content": "FROM golang:1.17.13-alpine\n\nRUN apk add --update git gcc libc-dev\n\nENV GO111MODULE=on\n\nARG MIGRATE_VER=v4.6.2\nRUN go get -tags 'mysql postgres file' github.com/golang-migrate/migrate/v4/cli@${MIGRATE_VER} && mv /go/bin/cli /go/bin/migrate\n\nENV GOFLAGS=-mod=vendor\nENV NOTARYPKG github.com/theupdateframework/notary\n\n# Copy the local repo to the expected go path\nCOPY . /go/src/${NOTARYPKG}\n\nWORKDIR /go/src/${NOTARYPKG}\n\nRUN chmod 0600 ./fixtures/database/*\n\nENV SERVICE_NAME=notary_server\nEXPOSE 4443\n\n# Install notary-server\nRUN go install \\\n    -tags pkcs11 \\\n    -ldflags \"-w -X ${NOTARYPKG}/version.GitCommit=`git rev-parse --short HEAD` -X ${NOTARYPKG}/version.NotaryVersion=`cat NOTARY_VERSION`\" \\\n    ${NOTARYPKG}/cmd/notary-server && apk del git gcc libc-dev && rm -rf /var/cache/apk/*\n\nENTRYPOINT [ \"notary-server\" ]\nCMD [ \"-config=fixtures/server-config-local.json\" ]\n"
        },
        {
          "name": "server.minimal.Dockerfile",
          "type": "blob",
          "size": 1.5263671875,
          "content": "FROM golang:1.17.13-alpine AS build-env\n\nRUN apk add --update git gcc libc-dev\n\nENV GO111MODULE=on\n\nARG MIGRATE_VER=v4.6.2\nRUN go get -tags 'mysql postgres file' github.com/golang-migrate/migrate/v4/cli@${MIGRATE_VER} && mv /go/bin/cli /go/bin/migrate\n\nENV GOFLAGS=-mod=vendor\nENV NOTARYPKG github.com/theupdateframework/notary\n\n# Copy the local repo to the expected go path\nCOPY . /go/src/${NOTARYPKG}\nWORKDIR /go/src/${NOTARYPKG}\n\n# Build notary-server\nRUN go install \\\n    -tags pkcs11 \\\n    -ldflags \"-w -X ${NOTARYPKG}/version.GitCommit=`git rev-parse --short HEAD` -X ${NOTARYPKG}/version.NotaryVersion=`cat NOTARY_VERSION`\" \\\n    ${NOTARYPKG}/cmd/notary-server\n\n\nFROM busybox:latest\n\n# the ln is for compatibility with the docker-compose.yml, making these\n# images a straight swap for the those built in the compose file.\nRUN mkdir -p /usr/bin /var/lib && ln -s /bin/env /usr/bin/env\n\nCOPY --from=build-env /go/bin/notary-server /usr/bin/notary-server\nCOPY --from=build-env /go/bin/migrate /usr/bin/migrate\nCOPY --from=build-env /lib/ld-musl-x86_64.so.1 /lib/ld-musl-x86_64.so.1\nCOPY --from=build-env /go/src/github.com/theupdateframework/notary/migrations/ /var/lib/notary/migrations\nCOPY --from=build-env /go/src/github.com/theupdateframework/notary/fixtures /var/lib/notary/fixtures\nRUN chmod 0600 /var/lib/notary/fixtures/database/*\n\nWORKDIR /var/lib/notary\n# SERVICE_NAME needed for migration script\nENV SERVICE_NAME=notary_server\nEXPOSE 4443\nENTRYPOINT [ \"/usr/bin/notary-server\" ]\nCMD [ \"-config=/var/lib/notary/fixtures/server-config-local.json\" ]\n"
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "signer.Dockerfile",
          "type": "blob",
          "size": 0.935546875,
          "content": "FROM golang:1.17.13-alpine\n\nRUN apk add --update git gcc libc-dev\n\nENV GO111MODULE=on\n\nARG MIGRATE_VER=v4.6.2\nRUN go get -tags 'mysql postgres file' github.com/golang-migrate/migrate/v4/cli@${MIGRATE_VER} && mv /go/bin/cli /go/bin/migrate\n\nENV GOFLAGS=-mod=vendor\nENV NOTARYPKG github.com/theupdateframework/notary\n\n# Copy the local repo to the expected go path\nCOPY . /go/src/${NOTARYPKG}\n\nWORKDIR /go/src/${NOTARYPKG}\n\nRUN chmod 0600 ./fixtures/database/*\n\nENV SERVICE_NAME=notary_signer\nENV NOTARY_SIGNER_DEFAULT_ALIAS=\"timestamp_1\"\nENV NOTARY_SIGNER_TIMESTAMP_1=\"testpassword\"\n\n# Install notary-signer\nRUN go install \\\n    -tags pkcs11 \\\n    -ldflags \"-w -X ${NOTARYPKG}/version.GitCommit=`git rev-parse --short HEAD` -X ${NOTARYPKG}/version.NotaryVersion=`cat NOTARY_VERSION`\" \\\n    ${NOTARYPKG}/cmd/notary-signer && apk del git gcc libc-dev && rm -rf /var/cache/apk/*\n\nENTRYPOINT [ \"notary-signer\" ]\nCMD [ \"-config=fixtures/signer-config-local.json\" ]\n"
        },
        {
          "name": "signer.minimal.Dockerfile",
          "type": "blob",
          "size": 1.6044921875,
          "content": "FROM golang:1.17.13-alpine AS build-env\n\nRUN apk add --update git gcc libc-dev\n\nENV GO111MODULE=on\n\nARG MIGRATE_VER=v4.6.2\nRUN go get -tags 'mysql postgres file' github.com/golang-migrate/migrate/v4/cli@${MIGRATE_VER} && mv /go/bin/cli /go/bin/migrate\n\nENV GOFLAGS=-mod=vendor\nENV NOTARYPKG github.com/theupdateframework/notary\n\n# Copy the local repo to the expected go path\nCOPY . /go/src/${NOTARYPKG}\nWORKDIR /go/src/${NOTARYPKG}\n\n# Build notary-signer\nRUN go install \\\n    -tags pkcs11 \\\n    -ldflags \"-w -X ${NOTARYPKG}/version.GitCommit=`git rev-parse --short HEAD` -X ${NOTARYPKG}/version.NotaryVersion=`cat NOTARY_VERSION`\" \\\n    ${NOTARYPKG}/cmd/notary-signer\n\n\nFROM busybox:latest\n\n# the ln is for compatibility with the docker-compose.yml, making these\n# images a straight swap for the those built in the compose file.\nRUN mkdir -p /usr/bin /var/lib && ln -s /bin/env /usr/bin/env\n\nCOPY --from=build-env /go/bin/notary-signer /usr/bin/notary-signer\nCOPY --from=build-env /go/bin/migrate /usr/bin/migrate\nCOPY --from=build-env /lib/ld-musl-x86_64.so.1 /lib/ld-musl-x86_64.so.1\nCOPY --from=build-env /go/src/github.com/theupdateframework/notary/migrations/ /var/lib/notary/migrations\nCOPY --from=build-env /go/src/github.com/theupdateframework/notary/fixtures /var/lib/notary/fixtures\nRUN chmod 0600 /var/lib/notary/fixtures/database/*\n\nWORKDIR /var/lib/notary\n# SERVICE_NAME needed for migration script\nENV SERVICE_NAME=notary_signer\nENV NOTARY_SIGNER_DEFAULT_ALIAS=\"timestamp_1\"\nENV NOTARY_SIGNER_TIMESTAMP_1=\"testpassword\"\n\nENTRYPOINT [ \"/usr/bin/notary-signer\" ]\nCMD [ \"-config=/var/lib/notary/fixtures/signer-config-local.json\" ]\n"
        },
        {
          "name": "signer",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "trustmanager",
          "type": "tree",
          "content": null
        },
        {
          "name": "trustpinning",
          "type": "tree",
          "content": null
        },
        {
          "name": "tuf",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}