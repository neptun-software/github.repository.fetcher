{
  "metadata": {
    "timestamp": 1736566906786,
    "page": 477,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "owenthereal/ccat",
      "stars": 3172,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "ccat\nrelease\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.087890625,
          "content": "sudo: false\nlanguage: go\ngo:\n  - 1.8.x\n  - 1.9.x\n  - 1.10.x\n  - 1.11.x\nscript: ./bin/test\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0341796875,
          "content": "Copyright (c) 2015 Jingwen Owen Ou\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.921875,
          "content": "# ccat\n[![OpenCollective](https://opencollective.com/ccat/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/ccat/sponsors/badge.svg)](#sponsors)\n\n`ccat` is the colorizing `cat`. It works similar to `cat` but displays content with syntax highlighting.\n\n## Supported Languages\n\n* JavaScript\n* Java\n* Ruby\n* Python\n* Go\n* C\n* JSON\n\n## Installation\n\n### OSX\n\n```\n$ brew install ccat\n```\n\n### Arch Linux\n\n```\n$ pacaur -S ccat\n$ pacaur -S ccat-git\n```\nThe ccat package will reflect the current release snapshot, while the ccat-git will be based on the current source available in the master branch of the git repo. You can use any AUR helper in place of pacaur [AUR Helpers](https://wiki.archlinux.org/index.php/AUR_helpers)\n\n### Standalone\n\n`ccat` can be easily installed as an executable.\nDownload the latest [compiled binaries](https://github.com/owenthereal/ccat/releases) and put it in your executable path.\n\n### From source\n\nPrerequisites:\n- [Git](http://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n- [Go](https://golang.org/doc/install) 1.4+\n\n```\n$ go get -u github.com/owenthereal/ccat\n```\n\n## Completion (ZSH Only)\n\n### Installation\nMove the `_ccat` file in `./completions/zsh` to your site-functions directory usually in `/usr/local/share/zsh/site-functions` or in `/usr/share/zsh/site-functions`. If completions don't work on the next ZSH startup, you can delete the file `.zcompdump` (which caches autocomplete commands) and it is usually in the home directory.\n### Uninstallation\nGo back to the directory you copied `_ccat` to and delete the file, then simply delete `.zcompdump` in order to stop errors when trying to use `ccat` autocomplete afterwards.\n\n## Usage\n\n```\n$ ccat FILE1 FILE2 ...\n$ ccat FILE1 FILE2 ... --html # output in HTML\n$ ccat --bg=dark FILE1 FILE 2 ... # dark background\n$ ccat -G String=\"_darkblue_\" -G Plaintext=\"darkred\" FILE # set color codes\n$ ccat --palette # show palette\n$ ccat # read from standard input\n$ curl https://raw.githubusercontent.com/owenthereal/ccat/master/main.go | ccat\n```\n\nIt's recommended to alias `ccat` to `cat`:\n\n```\nalias cat=ccat\n```\n\nThe overhead of `ccat` comparing to `cat` is mimimum:\n\n```\n$ wc -l main.go\n123 main.go\n$ time cat main.go > /dev/null\ncat main.go > /dev/null  0.00s user 0.00s system 61% cpu 0.005 total\n$ time ccat main.go > /dev/null\nccat main.go > /dev/null  0.00s user 0.00s system 78% cpu 0.007 total\n```\n\nYou can always invoke `cat` after aliasing `ccat` by typing `\\cat`.\n\n## Demo\n\n[![demo](https://asciinema.org/a/21858.png)](https://asciinema.org/a/21858)\n\n## Roadmap\n\n- [ ] nicer default color scheme\n- [ ] ?\n\n## Alternatives\n\n`ccat` is designed to be distributed in one binary, run at native speed\nand follow the POSIX standards. There're alternatives out there.\nUse them at your own risk :):\n\n* [pygments](http://pygments.org/)\n* [source-highlight](https://www.gnu.org/software/src-highlite/)\n\n## License\n\n[MIT](https://github.com/owenthereal/ccat/blob/master/LICENSE)\n\n## Credits\n\nThanks to [Sourcegraph](https://github.com/sourcegraph) who built [this](https://github.com/sourcegraph/syntaxhighlight) awesome syntax-highlighting package.\n\n## Support\n\n### Backers\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/ccat#backer)]\n\n<a href=\"https://opencollective.com/ccat/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/backer/29/avatar.svg\"></a>\n\n\n### Sponsors\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/ccat#sponsor)]\n\n<a href=\"https://opencollective.com/ccat/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccat/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccat/sponsor/29/avatar.svg\"></a>\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "ccat.go",
          "type": "blob",
          "size": 1.388671875,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"syscall\"\n\n\t\"fmt\"\n\n\t\"github.com/mattn/go-isatty\"\n)\n\ntype CCatPrinter interface {\n\tPrint(r io.Reader, w io.Writer) error\n}\n\ntype AutoColorPrinter struct {\n\tColorPalettes ColorPalettes\n}\n\nfunc (a AutoColorPrinter) Print(r io.Reader, w io.Writer) error {\n\tif isatty.IsTerminal(uintptr(syscall.Stdout)) {\n\t\treturn ColorPrinter{a.ColorPalettes}.Print(r, w)\n\t} else {\n\t\treturn PlainTextPrinter{}.Print(r, w)\n\t}\n}\n\ntype ColorPrinter struct {\n\tColorPalettes ColorPalettes\n}\n\nfunc (c ColorPrinter) Print(r io.Reader, w io.Writer) error {\n\treturn CPrint(r, w, c.ColorPalettes)\n}\n\ntype PlainTextPrinter struct {\n}\n\nfunc (p PlainTextPrinter) Print(r io.Reader, w io.Writer) error {\n\t_, err := io.Copy(w, r)\n\treturn err\n}\n\ntype HtmlPrinter struct {\n\tColorPalettes ColorPalettes\n}\n\nfunc (c HtmlPrinter) Print(r io.Reader, w io.Writer) error {\n\treturn HtmlPrint(r, w, c.ColorPalettes)\n}\n\nfunc CCat(fname string, p CCatPrinter, w io.Writer) error {\n\tvar r io.Reader\n\n\tif fname == readFromStdin {\n\t\tb, err := ioutil.ReadAll(os.Stdin)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tr = bytes.NewReader(b)\n\t} else {\n\t\tfile, err := os.Open(fname)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tdefer file.Close()\n\n\t\tfi, err := file.Stat()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif fi.Mode().IsDir() {\n\t\t\treturn fmt.Errorf(\"%s is a directory\", file.Name())\n\t\t}\n\n\t\tr = file\n\t}\n\n\treturn p.Print(r, w)\n}\n"
        },
        {
          "name": "color.go",
          "type": "blob",
          "size": 2.2041015625,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"sort\"\n\t\"strings\"\n)\n\nconst esc = \"\\033[\"\n\ntype ColorCodes map[string]string\n\nfunc (c ColorCodes) String() string {\n\tvar cc []string\n\tfor k, _ := range c {\n\t\tif k == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tcc = append(cc, k)\n\t}\n\tsort.Strings(cc)\n\n\tvar s []string\n\tfor _, ss := range cc {\n\t\ts = append(s, Colorize(ss, ss))\n\t}\n\n\treturn strings.Join(s, \", \")\n}\n\nvar colorCodes = ColorCodes{\n\t\"\":          \"\",\n\t\"reset\":     esc + \"39;49;00m\",\n\t\"bold\":      esc + \"01m\",\n\t\"faint\":     esc + \"02m\",\n\t\"standout\":  esc + \"03m\",\n\t\"underline\": esc + \"04m\",\n\t\"blink\":     esc + \"05m\",\n\t\"overline\":  esc + \"06m\",\n}\n\nfunc init() {\n\tdarkColors := []string{\n\t\t\"black\",\n\t\t\"darkred\",\n\t\t\"darkgreen\",\n\t\t\"brown\",\n\t\t\"darkblue\",\n\t\t\"purple\",\n\t\t\"teal\",\n\t\t\"lightgray\",\n\t}\n\n\tlightColors := []string{\n\t\t\"darkgray\",\n\t\t\"red\",\n\t\t\"green\",\n\t\t\"yellow\",\n\t\t\"blue\",\n\t\t\"fuchsia\",\n\t\t\"turquoise\",\n\t\t\"white\",\n\t}\n\n\tfor i, x := 0, 30; i < len(darkColors); i, x = i+1, x+1 {\n\t\tcolorCodes[darkColors[i]] = esc + fmt.Sprintf(\"%dm\", x)\n\t\tcolorCodes[lightColors[i]] = esc + fmt.Sprintf(\"%d;01m\", x)\n\t}\n\n\tcolorCodes[\"darkteal\"] = colorCodes[\"turquoise\"]\n\tcolorCodes[\"darkyellow\"] = colorCodes[\"brown\"]\n\tcolorCodes[\"fuscia\"] = colorCodes[\"fuchsia\"]\n\tcolorCodes[\"white\"] = colorCodes[\"bold\"]\n}\n\n/*\n\tFormat ``text`` with a color and/or some attributes::\n\n\t\tcolor       normal color\n\t\t*color*     bold color\n\t\t_color_     underlined color\n\t\t+color+     blinking color\n*/\nfunc Colorize(attr, text string) string {\n\tif attr == \"\" {\n\t\treturn text\n\t}\n\n\tresult := new(bytes.Buffer)\n\n\tif strings.HasPrefix(attr, \"+\") && strings.HasSuffix(attr, \"+\") {\n\t\tresult.WriteString(colorCodes[\"blink\"])\n\t\tattr = strings.TrimPrefix(attr, \"+\")\n\t\tattr = strings.TrimSuffix(attr, \"+\")\n\t}\n\n\tif strings.HasPrefix(attr, \"*\") && strings.HasSuffix(attr, \"*\") {\n\t\tresult.WriteString(colorCodes[\"bold\"])\n\t\tattr = strings.TrimPrefix(attr, \"*\")\n\t\tattr = strings.TrimSuffix(attr, \"*\")\n\t}\n\n\tif strings.HasPrefix(attr, \"_\") && strings.HasSuffix(attr, \"_\") {\n\t\tresult.WriteString(colorCodes[\"underline\"])\n\t\tattr = strings.TrimPrefix(attr, \"_\")\n\t\tattr = strings.TrimSuffix(attr, \"_\")\n\t}\n\n\tresult.WriteString(colorCodes[attr])\n\tresult.WriteString(text)\n\tresult.WriteString(colorCodes[\"reset\"])\n\n\treturn result.String()\n}\n"
        },
        {
          "name": "color_test.go",
          "type": "blob",
          "size": 1.58984375,
          "content": "package main\n\nimport \"testing\"\n\nfunc Test_ColorPalette_Set(t *testing.T) {\n\tpalettes := ColorPalettes{\n\t\tstringKind: \"blue\",\n\t}\n\n\tok := palettes.Set(\"foo\", \"bar\")\n\tif ok {\n\t\tt.Errorf(\"setting color code foo should not be ok\")\n\t}\n\n\tok = palettes.Set(\"String\", \"baz\")\n\tif !ok {\n\t\tt.Errorf(\"setting color code String should be ok\")\n\t}\n\n\tif palettes[stringKind] != \"baz\" {\n\t\tt.Errorf(\"color code of String should be baz\")\n\t}\n}\n\nfunc TestColorize(t *testing.T) {\n\tcases := []struct {\n\t\tColor, Output string\n\t}{\n\t\t{\n\t\t\tColor:  \"\",\n\t\t\tOutput: \"hello\",\n\t\t},\n\n\t\t{\n\t\t\tColor:  \"blue\",\n\t\t\tOutput: \"\\033[34;01mhello\\033[39;49;00m\",\n\t\t},\n\t\t{\n\t\t\tColor:  \"_blue_\",\n\t\t\tOutput: \"\\033[04m\\033[34;01mhello\\033[39;49;00m\",\n\t\t},\n\t\t{\n\t\t\tColor:  \"bold\",\n\t\t\tOutput: \"\\033[01mhello\\033[39;49;00m\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tactual := Colorize(tc.Color, \"hello\")\n\t\tif actual != tc.Output {\n\t\t\tt.Errorf(\n\t\t\t\t\"Color: %#v\\n\\nOutput: %#v\\n\\nExpected: %#v\",\n\t\t\t\ttc.Color,\n\t\t\t\tactual,\n\t\t\t\ttc.Output)\n\t\t}\n\t}\n}\n\nfunc TestColorizeMultiByte(t *testing.T) {\n\tcases := []struct {\n\t\tColor, Output string\n\t}{\n\t\t// Japanese\n\t\t{\n\t\t\tColor:  \"\",\n\t\t\tOutput: \"こんにちは\",\n\t\t},\n\n\t\t{\n\t\t\tColor:  \"blue\",\n\t\t\tOutput: \"\\033[34;01mこんにちは\\033[39;49;00m\",\n\t\t},\n\t\t{\n\t\t\tColor:  \"_blue_\",\n\t\t\tOutput: \"\\033[04m\\033[34;01mこんにちは\\033[39;49;00m\",\n\t\t},\n\t\t{\n\t\t\tColor:  \"bold\",\n\t\t\tOutput: \"\\033[01mこんにちは\\033[39;49;00m\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tactual := Colorize(tc.Color, \"こんにちは\")\n\t\tif actual != tc.Output {\n\t\t\tt.Errorf(\n\t\t\t\t\"Color: %#v\\n\\nOutput: %#v\\n\\nExpected: %#v\",\n\t\t\t\ttc.Color,\n\t\t\t\tactual,\n\t\t\t\ttc.Output)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "completion",
          "type": "tree",
          "content": null
        },
        {
          "name": "flag.go",
          "type": "blob",
          "size": 0.478515625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\ntype mapValue map[string]string\n\nfunc (m mapValue) Set(val string) error {\n\tv := strings.SplitN(val, \"=\", 2)\n\tif len(v) != 2 {\n\t\treturn fmt.Errorf(\"Flag should be in the format of <name>=<value>\")\n\t}\n\n\tm[v[0]] = v[1]\n\n\treturn nil\n}\n\nfunc (m mapValue) String() string {\n\ts := make([]string, 0)\n\tfor k, v := range m {\n\t\ts = append(s, fmt.Sprintf(\"%s=%s\", k, v))\n\t}\n\n\treturn strings.Join(s, \",\")\n}\n\nfunc (m mapValue) Type() string {\n\treturn \"map\"\n}\n"
        },
        {
          "name": "html.go",
          "type": "blob",
          "size": 2.0888671875,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"sort\"\n\t\"strings\"\n)\n\ntype HtmlCodes map[string]string\n\nfunc (c HtmlCodes) String() string {\n\tvar cc []string\n\tfor k, _ := range c {\n\t\tif k == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tcc = append(cc, k)\n\t}\n\tsort.Strings(cc)\n\n\tvar s []string\n\tfor _, ss := range cc {\n\t\ts = append(s, Htmlize(ss, ss))\n\t}\n\n\treturn strings.Join(s, \", \")\n}\n\nvar htmlCodes = HtmlCodes{\n\t\"\":          \"\",\n\t\"reset\":     `</span>`,\n\t\"bold\":      `<span class=\"bold\">`,\n\t\"faint\":     `<span class=\"faint\">`,\n\t\"standout\":  `<span class=\"standout\">`,\n\t\"underline\": `<span class=\"underline\">`,\n\t\"blink\":     `<span class=\"blink\">`,\n\t\"overline\":  `<span class=\"overline\">`,\n}\n\nfunc init() {\n\tdarkHtmls := []string{\n\t\t\"black\",\n\t\t\"darkred\",\n\t\t\"darkgreen\",\n\t\t\"brown\",\n\t\t\"darkblue\",\n\t\t\"purple\",\n\t\t\"teal\",\n\t\t\"lightgray\",\n\t}\n\n\tlightHtmls := []string{\n\t\t\"darkgray\",\n\t\t\"red\",\n\t\t\"green\",\n\t\t\"yellow\",\n\t\t\"blue\",\n\t\t\"fuchsia\",\n\t\t\"turquoise\",\n\t\t\"white\",\n\t}\n\n\tfor i, x := 0, 30; i < len(darkHtmls); i, x = i+1, x+1 {\n\t\thtmlCodes[darkHtmls[i]] = fmt.Sprintf(`<span class=\"%s\">`, darkHtmls[i])\n\t\thtmlCodes[lightHtmls[i]] = fmt.Sprintf(`<span class=\"%s\">`, lightHtmls[i])\n\t}\n\n\thtmlCodes[\"darkteal\"] = htmlCodes[\"turquoise\"]\n\thtmlCodes[\"darkyellow\"] = htmlCodes[\"brown\"]\n\thtmlCodes[\"fuscia\"] = htmlCodes[\"fuchsia\"]\n\thtmlCodes[\"white\"] = htmlCodes[\"bold\"]\n}\n\nfunc Htmlize(attr, text string) string {\n\tif attr == \"\" {\n\t\treturn text\n\t}\n\n\tresult := new(bytes.Buffer)\n\n\tif strings.HasPrefix(attr, \"+\") && strings.HasSuffix(attr, \"+\") {\n\t\tresult.WriteString(htmlCodes[\"blink\"])\n\t\tattr = strings.TrimPrefix(attr, \"+\")\n\t\tattr = strings.TrimSuffix(attr, \"+\")\n\t}\n\n\tif strings.HasPrefix(attr, \"*\") && strings.HasSuffix(attr, \"*\") {\n\t\tresult.WriteString(htmlCodes[\"bold\"])\n\t\tattr = strings.TrimPrefix(attr, \"*\")\n\t\tattr = strings.TrimSuffix(attr, \"*\")\n\t}\n\n\tif strings.HasPrefix(attr, \"_\") && strings.HasSuffix(attr, \"_\") {\n\t\tresult.WriteString(htmlCodes[\"underline\"])\n\t\tattr = strings.TrimPrefix(attr, \"_\")\n\t\tattr = strings.TrimSuffix(attr, \"_\")\n\t}\n\n\tresult.WriteString(htmlCodes[attr])\n\tresult.WriteString(text)\n\tresult.WriteString(htmlCodes[\"reset\"])\n\n\treturn result.String()\n}\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 3.1005859375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/mattn/go-colorable\"\n\t\"github.com/spf13/cobra\"\n)\n\nconst (\n\treadFromStdin = \"-\"\n)\n\ntype ccatCmd struct {\n\tBG          string\n\tColor       string\n\tColorCodes  mapValue\n\tHTML        bool\n\tShowPalette bool\n\tShowVersion bool\n}\n\nfunc (c *ccatCmd) Run(cmd *cobra.Command, args []string) {\n\tstdout := colorable.NewColorableStdout()\n\n\tif c.ShowVersion {\n\t\tdisplayVersion(stdout)\n\t\treturn\n\t}\n\n\tvar colorPalettes ColorPalettes\n\tif c.BG == \"dark\" {\n\t\tcolorPalettes = DarkColorPalettes\n\t} else {\n\t\tcolorPalettes = LightColorPalettes\n\t}\n\n\t// override color codes\n\tfor k, v := range c.ColorCodes {\n\t\tok := colorPalettes.Set(k, v)\n\t\tif !ok {\n\t\t\tlog.Fatal(fmt.Errorf(\"unknown color code: %s\", k))\n\t\t}\n\t}\n\n\tif c.ShowPalette {\n\t\tfmt.Fprintf(stdout, `Applied color codes:\n\n%s\n\nColor code is in the format of:\n\n  color       normal color\n  *color*     bold color\n  _color_     underlined color\n  +color+     blinking color\n\nValue of color can be %s\n`, colorPalettes, colorCodes)\n\t\treturn\n\t}\n\n\tvar printer CCatPrinter\n\tif c.HTML {\n\t\tprinter = HtmlPrinter{colorPalettes}\n\t} else if c.Color == \"always\" {\n\t\tprinter = ColorPrinter{colorPalettes}\n\t} else if c.Color == \"never\" {\n\t\tprinter = PlainTextPrinter{}\n\t} else {\n\t\tprinter = AutoColorPrinter{colorPalettes}\n\t}\n\n\t// if there's no args, read from stdin\n\tif len(args) == 0 {\n\t\targs = []string{readFromStdin}\n\t}\n\n\tfor _, arg := range args {\n\t\terr := CCat(arg, printer, stdout)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tlog.SetFlags(0)\n\tccatCmd := &ccatCmd{\n\t\tColorCodes: make(mapValue),\n\t}\n\trootCmd := &cobra.Command{\n\t\tUse:  \"ccat [OPTION]... [FILE]...\",\n\t\tLong: \"Colorize FILE(s), or standard input, to standard output.\",\n\t\tExample: `$ ccat FILE1 FILE2 ...\n  $ ccat --bg=dark FILE1 FILE2 ... # dark background\n  $ ccat --html # output html\n  $ ccat -G String=\"_darkblue_\" -G Plaintext=\"darkred\" FILE # set color codes\n  $ ccat --palette # show palette\n  $ ccat # read from standard input\n  $ curl https://raw.githubusercontent.com/jingweno/ccat/master/main.go | ccat`,\n\t\tRun: ccatCmd.Run,\n\t}\n\n\tusageTempl := `{{ $cmd := . }}\nUsage:\n  {{.UseLine}}\n\nFlags:\n{{.LocalFlags.FlagUsages}}\nUsing color is auto both by default and with --color=auto. With --color=auto,\nccat emits color codes only when standard output is connected to a terminal.\nColor codes can be changed with -G KEY=VALUE. List of color codes can\nbe found with --palette.\n\nExamples:\n  {{ .Example }}\n`\n\trootCmd.SetUsageTemplate(usageTempl)\n\n\trootCmd.PersistentFlags().StringVarP(&ccatCmd.BG, \"bg\", \"\", \"light\", `set to \"light\" or \"dark\" depending on the terminal's background`)\n\trootCmd.PersistentFlags().StringVarP(&ccatCmd.Color, \"color\", \"C\", \"auto\", `colorize the output; value can be \"never\", \"always\" or \"auto\"`)\n\trootCmd.PersistentFlags().VarP(&ccatCmd.ColorCodes, \"color-code\", \"G\", `set color codes`)\n\trootCmd.PersistentFlags().BoolVarP(&ccatCmd.HTML, \"html\", \"\", false, `output html`)\n\trootCmd.PersistentFlags().BoolVarP(&ccatCmd.ShowPalette, \"palette\", \"\", false, `show color palettes`)\n\trootCmd.PersistentFlags().BoolVarP(&ccatCmd.ShowVersion, \"version\", \"v\", false, `show version`)\n\n\trootCmd.Execute()\n}\n"
        },
        {
          "name": "printer.go",
          "type": "blob",
          "size": 4.1162109375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"sort\"\n\t\"strings\"\n\n\t\"github.com/sourcegraph/syntaxhighlight\"\n)\n\nvar (\n\tstringKind        = kind{\"String\", syntaxhighlight.String}\n\tkeywordKind       = kind{\"Keyword\", syntaxhighlight.Keyword}\n\tcommentKind       = kind{\"Comment\", syntaxhighlight.Comment}\n\ttypeKind          = kind{\"Type\", syntaxhighlight.Type}\n\tliteralKind       = kind{\"Literal\", syntaxhighlight.Literal}\n\tpunctuationKind   = kind{\"Punctuation\", syntaxhighlight.Punctuation}\n\tplaintextKind     = kind{\"Plaintext\", syntaxhighlight.Plaintext}\n\ttagKind           = kind{\"Tag\", syntaxhighlight.Tag}\n\thtmlTagKind       = kind{\"HTMLTag\", syntaxhighlight.HTMLTag}\n\thtmlAttrNameKind  = kind{\"HTMLAttrName\", syntaxhighlight.HTMLAttrName}\n\thtmlAttrValueKind = kind{\"HTMLAttrValue\", syntaxhighlight.HTMLAttrValue}\n\tdecimalKind       = kind{\"Decimal\", syntaxhighlight.Decimal}\n\n\tkinds = []kind{\n\t\tstringKind,\n\t\tkeywordKind,\n\t\tcommentKind,\n\t\ttypeKind,\n\t\tliteralKind,\n\t\tpunctuationKind,\n\t\tplaintextKind,\n\t\ttagKind,\n\t\thtmlTagKind,\n\t\thtmlAttrNameKind,\n\t\thtmlAttrValueKind,\n\t\tdecimalKind,\n\t}\n\n\tLightColorPalettes = ColorPalettes{\n\t\tstringKind:        \"brown\",\n\t\tkeywordKind:       \"darkblue\",\n\t\tcommentKind:       \"lightgrey\",\n\t\ttypeKind:          \"teal\",\n\t\tliteralKind:       \"teal\",\n\t\tpunctuationKind:   \"darkred\",\n\t\tplaintextKind:     \"darkblue\",\n\t\ttagKind:           \"blue\",\n\t\thtmlTagKind:       \"lightgreen\",\n\t\thtmlAttrNameKind:  \"blue\",\n\t\thtmlAttrValueKind: \"green\",\n\t\tdecimalKind:       \"darkblue\",\n\t}\n\n\tDarkColorPalettes = ColorPalettes{\n\t\tstringKind:        \"brown\",\n\t\tkeywordKind:       \"blue\",\n\t\tcommentKind:       \"darkgrey\",\n\t\ttypeKind:          \"turquoise\",\n\t\tliteralKind:       \"turquoise\",\n\t\tpunctuationKind:   \"red\",\n\t\tplaintextKind:     \"blue\",\n\t\ttagKind:           \"blue\",\n\t\thtmlTagKind:       \"lightgreen\",\n\t\thtmlAttrNameKind:  \"blue\",\n\t\thtmlAttrValueKind: \"green\",\n\t\tdecimalKind:       \"blue\",\n\t}\n\n\t// cache kind name and syntax highlight kind\n\t// for faster lookup\n\tkindsByName map[string]kind\n\tkindsByKind map[syntaxhighlight.Kind]kind\n)\n\nfunc init() {\n\tkindsByName = make(map[string]kind)\n\tfor _, k := range kinds {\n\t\tkindsByName[k.Name] = k\n\t}\n\n\tkindsByKind = make(map[syntaxhighlight.Kind]kind)\n\tfor _, k := range kinds {\n\t\tkindsByKind[k.Kind] = k\n\t}\n}\n\ntype kind struct {\n\tName string\n\tKind syntaxhighlight.Kind\n}\n\ntype ColorPalettes map[kind]string\n\nfunc (c ColorPalettes) Set(k, v string) bool {\n\tkind, ok := kindsByName[k]\n\tif ok {\n\t\tc[kind] = v\n\t}\n\n\treturn ok\n}\n\nfunc (c ColorPalettes) Get(k syntaxhighlight.Kind) string {\n\t// ignore whitespace kind\n\tif k == syntaxhighlight.Whitespace {\n\t\treturn \"\"\n\t}\n\n\tkind, ok := kindsByKind[k]\n\tif !ok {\n\t\tpanic(fmt.Sprintf(\"Unknown syntax highlight kind %d\\n\", k))\n\t}\n\n\treturn c[kind]\n}\n\nfunc (c ColorPalettes) String() string {\n\tvar s []string\n\tfor _, k := range kinds {\n\t\tcolor := c[k]\n\t\ts = append(s, fmt.Sprintf(\"%13s\\t%s\", k.Name, Colorize(color, color)))\n\t}\n\n\treturn strings.Join(s, \"\\n\")\n}\n\nfunc CPrint(r io.Reader, w io.Writer, palettes ColorPalettes) error {\n\treturn syntaxhighlight.Print(syntaxhighlight.NewScannerReader(r), w, Printer{palettes})\n}\n\ntype Printer struct {\n\tColorPalettes ColorPalettes\n}\n\nfunc (p Printer) Print(w io.Writer, kind syntaxhighlight.Kind, tokText string) error {\n\tc := p.ColorPalettes.Get(kind)\n\tif len(c) > 0 {\n\t\ttokText = Colorize(c, tokText)\n\t}\n\n\t_, err := io.WriteString(w, tokText)\n\n\treturn err\n}\n\nfunc HtmlPrint(r io.Reader, w io.Writer, palettes ColorPalettes) error {\n\tkeys := []string{}\n\tfor k := range htmlCodes {\n\t\tkeys = append(keys, k)\n\t}\n\tsort.Strings(keys)\n\tw.Write([]byte(\"<style>\\n\"))\n\tfor _, s := range keys {\n\t\tif s == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tw.Write([]byte(fmt.Sprintf(\".%s { color: %s; }\\n\", s, s)))\n\t}\n\tw.Write([]byte(\"</style>\\n\"))\n\tw.Write([]byte(\"<pre>\\n\"))\n\terr := syntaxhighlight.Print(syntaxhighlight.NewScannerReader(r), w, HtmlCodePrinter{palettes})\n\tw.Write([]byte(\"\\n</pre>\\n\"))\n\treturn err\n}\n\ntype HtmlCodePrinter struct {\n\tColorPalettes ColorPalettes\n}\n\nfunc (p HtmlCodePrinter) Print(w io.Writer, kind syntaxhighlight.Kind, tokText string) error {\n\tc := p.ColorPalettes.Get(kind)\n\tif len(c) > 0 {\n\t\ttokText = Htmlize(c, tokText)\n\t}\n\n\t_, err := io.WriteString(w, tokText)\n\n\treturn err\n}\n"
        },
        {
          "name": "printer_test.go",
          "type": "blob",
          "size": 1.4130859375,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n)\n\nfunc TestCPrint(t *testing.T) {\n\tr := bytes.NewBufferString(\"hello\")\n\tvar w bytes.Buffer\n\n\terr := CPrint(r, &w, LightColorPalettes)\n\tif err != nil {\n\t\tt.Errorf(\"error should be nil, but it's %s\", err)\n\t}\n\n\ts := w.String()\n\tif s != \"\\033[34mhello\\033[39;49;00m\" {\n\t\tt.Errorf(\"output is wrong: %s\", s)\n\t}\n}\n\nfunc TestHtmlPrint(t *testing.T) {\n\tr := bytes.NewBufferString(\"hello\")\n\tvar w bytes.Buffer\n\n\terr := HtmlPrint(r, &w, LightColorPalettes)\n\tif err != nil {\n\t\tt.Errorf(\"error should be nil, but it's %s\", err)\n\t}\n\n\texpect := `<style>\n.black { color: black; }\n.blink { color: blink; }\n.blue { color: blue; }\n.bold { color: bold; }\n.brown { color: brown; }\n.darkblue { color: darkblue; }\n.darkgray { color: darkgray; }\n.darkgreen { color: darkgreen; }\n.darkred { color: darkred; }\n.darkteal { color: darkteal; }\n.darkyellow { color: darkyellow; }\n.faint { color: faint; }\n.fuchsia { color: fuchsia; }\n.fuscia { color: fuscia; }\n.green { color: green; }\n.lightgray { color: lightgray; }\n.overline { color: overline; }\n.purple { color: purple; }\n.red { color: red; }\n.reset { color: reset; }\n.standout { color: standout; }\n.teal { color: teal; }\n.turquoise { color: turquoise; }\n.underline { color: underline; }\n.white { color: white; }\n.yellow { color: yellow; }\n</style>\n<pre>\n<span class=\"darkblue\">hello</span>\n</pre>\n`\n\n\ts := w.String()\n\tif s != expect {\n\t\tt.Errorf(\"output is wrong: %s\", s)\n\t}\n}\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.go",
          "type": "blob",
          "size": 0.13671875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n)\n\nconst Version = \"1.1.0\"\n\nfunc displayVersion(w io.Writer) {\n\tfmt.Fprintf(w, \"ccat v%s\\n\", Version)\n}\n"
        }
      ]
    }
  ]
}