{
  "metadata": {
    "timestamp": 1736566962146,
    "page": 545,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "d4l3k/go-pry",
      "stars": 3003,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.046875,
          "content": "*.go.go\n*.zip\nfuzz/\n*.coverprofile\ngo-pry-test*\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Tristan Rice\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.1572265625,
          "content": "# go-pry\n\ngo-pry - an interactive REPL for Go that allows you to drop into your code at any point.\n\n![Tests](https://github.com/d4l3k/go-pry/actions/workflows/unittest.yml/badge.svg)\n[![GoDoc](https://godoc.org/github.com/d4l3k/go-pry/pry?status.svg)](https://godoc.org/github.com/d4l3k/go-pry/pry)\n\n![go-pry](https://i.imgur.com/yr1BEsK.png)\n\nExample\n\n![go-pry Animated Example](https://i.imgur.com/H8hFzPV.gif)\n![go-pry Example](https://i.imgur.com/0rmwVY7.png)\n\n\n\n## Usage\n\nInstall go-pry\n```bash\ngo get github.com/d4l3k/go-pry\ngo install -i github.com/d4l3k/go-pry\n\n```\n\nAdd the pry statement to the code\n```go\npackage main\n\nimport \"github.com/d4l3k/go-pry/pry\"\n\nfunc main() {\n  a := 1\n  pry.Pry()\n}\n```\n\nRun the code as you would normally with the `go` command. go-pry is just a wrapper.\n```bash\n# Run\ngo-pry run readme.go\n```\n\nIf you want completions to work properly, also install `gocode` if it\nis not installed in your system\n\n```bash\ngo get -u github.com/nsf/gocode\n```\n\n\n## How does it work?\ngo-pry is built using a combination of meta programming as well as a massive amount of reflection. When you invoke the go-pry command it looks at the Go files in the mentioned directories (or the current in cases such as `go-pry build`) and processes them. Since Go is a compiled language there's no way to dynamically get in scope variables, and even if there was, unused imports would be automatically removed for optimization purposes. Thus, go-pry has to find every instance of `pry.Pry()` and inject a large blob of code that contains references to all in scope variables and functions as well as those of the imported packages. When doing this it makes a copy of your file to `.<filename>.gopry` and modifies the `<filename>.go` then passes the command arguments to the standard `go` command. Once the command exits, it restores the files.\n\nIf the program unexpectedly fails there is a custom command `go-pry restore [files]` that will move the files back. An alternative is to just remove the `pry.Apply(...)` line.\n\n## Inspiration\n\ngo-pry is greatly inspired by [Pry REPL](http://pryrepl.org) for Ruby.\n\n## License\n\ngo-pry is licensed under the MIT license.\n\nMade by [Tristan Rice](https://fn.lc).\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.4189453125,
          "content": "module github.com/d4l3k/go-pry\n\ngo 1.16\n\nrequire (\n\tgithub.com/cenkalti/backoff v2.2.1+incompatible\n\tgithub.com/davecgh/go-spew v1.1.1\n\tgithub.com/gorilla/handlers v1.5.1\n\tgithub.com/gorilla/mux v1.8.0\n\tgithub.com/mattn/go-colorable v0.1.8\n\tgithub.com/mattn/go-tty v0.0.3\n\tgithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d\n\tgithub.com/mitchellh/go-homedir v1.1.0\n\tgithub.com/pkg/errors v0.9.1\n\tgolang.org/x/tools v0.1.5\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.6337890625,
          "content": "github.com/cenkalti/backoff v2.2.1+incompatible h1:tNowT99t7UNflLxfYYSlKYsBpXdEet03Pg2g16Swow4=\ngithub.com/cenkalti/backoff v2.2.1+incompatible/go.mod h1:90ReRw6GdpyfrHakVjL/QHaoyV4aDUVVkXQJJJ3NXXM=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/felixge/httpsnoop v1.0.1 h1:lvB5Jl89CsZtGIWuTcDM1E/vkVs49/Ml7JJe07l8SPQ=\ngithub.com/felixge/httpsnoop v1.0.1/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/gorilla/handlers v1.5.1 h1:9lRY6j8DEeeBT10CvO9hGW0gmky0BprnvDI5vfhUHH4=\ngithub.com/gorilla/handlers v1.5.1/go.mod h1:t8XrUpc4KVXb7HGyJ4/cEnwQiaxrX/hz1Zv/4g96P1Q=\ngithub.com/gorilla/mux v1.8.0 h1:i40aqfkR1h2SlN9hojwV5ZA91wcXFOvkdNIeFDP5koI=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-colorable v0.1.8 h1:c1ghPdyEDarC70ftn0y+A/Ee++9zz8ljHG1b13eJ0s8=\ngithub.com/mattn/go-colorable v0.1.8/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.10/go.mod h1:qgIWMr58cqv1PHHyhnkY9lrL7etaEgOFcMEpPG5Rm84=\ngithub.com/mattn/go-isatty v0.0.12 h1:wuysRhFDzyxgEmMf5xjvJ2M9dZoWAXNNr5LSBS7uHXY=\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-runewidth v0.0.6/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-tty v0.0.3 h1:5OfyWorkyO7xP52Mq7tB36ajHDG5OHrmBGIS/DtakQI=\ngithub.com/mattn/go-tty v0.0.3/go.mod h1:ihxohKRERHTVzN+aSVRwACLCeqIoZAWpoICkkvrWyR0=\ngithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d h1:5PJl274Y63IEHC+7izoQE9x6ikvDFZS2mDVS3drnohI=\ngithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d/go.mod h1:01TrycV0kFyexm33Z7vhZRXopbI8J3TDReVlkTgMUxE=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/mod v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191008105621-543471e840be/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae h1:/WDfKMnPU+m5M4xB+6x4kaepxRw6jWvR5iDRdvjHgy8=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007 h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.5 h1:ouewzE6p+/VEB31YYnTbEJdi8pFqKp4P4n85vwo3DHA=\ngolang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 3.3759765625,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/d4l3k/go-pry/generate\"\n\t\"github.com/pkg/errors\"\n)\n\nfunc main() {\n\tlog.SetFlags(log.Flags() | log.Lshortfile)\n\n\t// Catch Ctrl-C\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, os.Interrupt)\n\tgo func() {\n\t\tfor _ = range c {\n\t\t}\n\t}()\n\n\tif err := run(); err != nil {\n\t\tlog.Fatalf(\"%+v\", err)\n\t}\n}\n\nfunc run() error {\n\tctx := context.Background()\n\n\t// FLAGS\n\timports := flag.String(\"i\", \"fmt,math\", \"packages to import, comma seperated\")\n\trevert := flag.Bool(\"r\", true, \"whether to revert changes on exit\")\n\texecute := flag.String(\"e\", \"\", \"statements to execute\")\n\tgeneratePath := flag.String(\"generate\", \"\", \"the path to generate a go-pry injected file - EXPERIMENTAL\")\n\tdebug := flag.Bool(\"d\", false, \"display debug statements\")\n\n\tflag.CommandLine.Usage = func() {\n\t\tif err := generate.NewGenerator(*debug).ExecuteGoCmd(ctx, []string{}, nil); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Println(\"----\")\n\t\tfmt.Println(\"go-pry is an interactive REPL and wrapper around the go command.\")\n\t\tfmt.Println(\"You can execute go commands as normal and go-pry will take care of generating the pry code.\")\n\t\tfmt.Println(\"Running go-pry with no arguments will drop you into an interactive REPL.\")\n\t\tflag.PrintDefaults()\n\t\tfmt.Println(\"  revert: cleans up go-pry generated files if not automatically done\")\n\t}\n\tflag.Parse()\n\n\tg := generate.NewGenerator(*debug)\n\n\tcmdArgs := flag.Args()\n\tif len(cmdArgs) == 0 {\n\t\timports := strings.Split(*imports, \",\")\n\t\tif len(*generatePath) > 0 {\n\t\t\treturn g.GenerateFile(imports, *execute, *generatePath)\n\t\t}\n\t\treturn g.GenerateAndExecuteFile(ctx, imports, *execute)\n\t}\n\n\tgoDirs := []string{}\n\tfor _, arg := range cmdArgs {\n\t\tif strings.HasSuffix(arg, \".go\") {\n\t\t\tgoDirs = append(goDirs, filepath.Dir(arg))\n\t\t}\n\t}\n\tif len(goDirs) == 0 {\n\t\tdir, err := os.Getwd()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tgoDirs = []string{dir}\n\t}\n\n\tprocessedFiles := []string{}\n\tmodifiedFiles := []string{}\n\n\tif cmdArgs[0] == \"revert\" {\n\t\tfmt.Println(\"REVERTING PRY\")\n\t\tfor _, dir := range goDirs {\n\t\t\tfilepath.Walk(dir, func(path string, info os.FileInfo, err error) error {\n\t\t\t\tif strings.HasSuffix(path, \".gopry\") {\n\t\t\t\t\tprocessed := false\n\t\t\t\t\tfor _, file := range processedFiles {\n\t\t\t\t\t\tif file == path {\n\t\t\t\t\t\t\tprocessed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif !processed {\n\t\t\t\t\t\tbase := filepath.Base(path)\n\t\t\t\t\t\tnewPath := filepath.Dir(path) + \"/\" + base[1:len(base)-3]\n\t\t\t\t\t\tmodifiedFiles = append(modifiedFiles, newPath)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t\treturn g.RevertPry(modifiedFiles)\n\t}\n\n\ttestsRequired := cmdArgs[0] == \"test\"\n\tfor _, dir := range goDirs {\n\t\tif err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {\n\t\t\tif !testsRequired && strings.HasSuffix(path, \"_test.go\") || !strings.HasSuffix(path, \".go\") || strings.Contains(path, \"vendor/\") {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tfor _, file := range processedFiles {\n\t\t\t\tif file == path {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t}\n\t\t\tfile, err := g.InjectPry(path)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"inject\")\n\t\t\t}\n\t\t\tif file != \"\" {\n\t\t\t\tmodifiedFiles = append(modifiedFiles, path)\n\t\t\t}\n\t\t\treturn nil\n\t\t}); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif cmdArgs[0] == \"apply\" {\n\t\treturn nil\n\t}\n\n\tif err := g.ExecuteGoCmd(ctx, cmdArgs, nil); err != nil {\n\t\treturn err\n\t}\n\n\tif *revert {\n\t\tif err := g.RevertPry(modifiedFiles); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "main_test.go",
          "type": "blob",
          "size": 0.076171875,
          "content": "package main\n\nimport (\n\t\"testing\"\n)\n\nfunc TestBackupRestore(t *testing.T) {\n}\n"
        },
        {
          "name": "playground",
          "type": "tree",
          "content": null
        },
        {
          "name": "pry-build-corpus",
          "type": "tree",
          "content": null
        },
        {
          "name": "pry",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}