{
  "metadata": {
    "timestamp": 1736567119898,
    "page": 715,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mmcdole/gofeed",
      "stars": 2620,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3408203125,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n#vim stuff\n*.swp\n*.swo\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n.DS_STORE\n\ncmd/ftest/ftest\n\n# Goland specific files\n.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.302734375,
          "content": "language: go\n\nenv:\n  global:\n    - GO111MODULE=\"on\"\n\ngo:\n  - 1.11.x\n  - 1.12.x\n  - 1.13.x\n  - tip\n\nmatrix:\n  allow_failures:\n    - go: tip\n  fast_finish: true\n\nbefore_install:\n  - go get github.com/mattn/goveralls\n\nscript:\n  - go install ./...\n  - go test -v ./...\n  - $GOPATH/bin/goveralls -service=travis-ci\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 mmcdole\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4755859375,
          "content": "# gofeed\n\n[![Build Status](https://travis-ci.org/mmcdole/gofeed.svg?branch=master)](https://travis-ci.org/mmcdole/gofeed) [![Coverage Status](https://coveralls.io/repos/github/mmcdole/gofeed/badge.svg?branch=master)](https://coveralls.io/github/mmcdole/gofeed?branch=master) [![Go Report Card](https://goreportcard.com/badge/github.com/mmcdole/gofeed)](https://goreportcard.com/report/github.com/mmcdole/gofeed) [![](https://godoc.org/github.com/mmcdole/gofeed?status.svg)](http://godoc.org/github.com/mmcdole/gofeed) [![License](http://img.shields.io/:license-mit-blue.svg)](http://doge.mit-license.org)\n\n# Gofeed: A Robust Feed Parser for Golang\n\n<img src=\"https://github.com/mmcdole/gofeed/assets/3767096/ab4e7b0e-1472-4249-880c-c6784000ed31\" width=\"150\" height=\"150\"> \n<br /><br />\n\n`gofeed` is a powerful and flexible library designed for parsing **RSS**, **Atom**, and **JSON** feeds across various formats and versions. It effectively manages non-standard elements and known extensions, and demonstrates resilience against common feed issues.\n\n## Table of Contents\n- [Features](#features)\n- [Overview](#overview)\n- [Basic Usage](#basic-usage)\n- [Advanced Usage](#advanced-usage)\n- [Dependencies](#dependencies)\n- [License](#license)\n- [Credits](#credits)\n\n## Features\n\n### Comprehensive Feed Support\n- RSS (0.90 to 2.0)\n- Atom (0.3, 1.0)\n- JSON (1.0, 1.1)\n\n### Handling Invalid Feeds\n`gofeed` takes a best-effort approach to deal with broken or invalid XML feeds, capable of handling issues like:\n- Unescaped markup\n- Undeclared namespace prefixes\n- Missing or illegal tags\n- Incorrect date formats\n- ...and more.\n\n### Extension Support\n\n`gofeed` treats elements outside the feed's default namespace as extensions, storing them in tree-like structures under Feed.Extensions and Item.Extensions. This feature allows you to access custom extension elements easily.\n\nBuilt-In Support for Popular Extensions\nFor added convenience, gofeed includes native support for parsing certain well-known extensions into dedicated structs. Currently, it supports:\n\n- Dublin Core: Accessible via `Feed.DublinCoreExt` and `Item.DublinCoreExt`\n- Apple iTunes: Accessible via `Feed.ITunesExt` and `Item.ITunesExt`\n  \n## Overview\n\nIn `gofeed`, you have two primary choices for feed parsing: a universal parser for handling multiple feed types seamlessly, and specialized parsers for more granular control over individual feed types.\n\n\n### Universal Feed Parser \n\nThe universal `gofeed.Parser` is designed to make it easy to work with various types of feeds—RSS, Atom, JSON—by converting them into a unified `gofeed.Feed` model. This is especially useful when you're dealing with multiple feed formats and you want to treat them the same way.\n\nThe universal parser uses built-in translators like `DefaultRSSTranslator`, `DefaultAtomTranslator`, and `DefaultJSONTranslator` to convert between the specific feed types and the universal feed. Not happy with the defaults? Implement your own `gofeed.Translator` to tailor the translation process to your needs.\n\n### Specialized Feed Parsers: RSS, Atom, JSON\n\nAlternatively, if your focus is on a single feed type, then using a specialized parser offers advantages in terms of performance and granularity. For example, if you're interested solely in RSS feeds, you can use `rss.Parser` directly. These feed-specific parsers map fields to their corresponding models, ensuring names and structures that match the feed type exactly.\n\n## Basic Usage\n\n### Universal Feed Parser\n\nHere's how to parse feeds using `gofeed.Parser`:\n\n#### From a URL\n```go\nfp := gofeed.NewParser()\nfeed, _ := fp.ParseURL(\"http://feeds.twit.tv/twit.xml\")\nfmt.Println(feed.Title)\n```\n\n#### From a String\n\n```go\nfeedData := `<rss version=\"2.0\">\n<channel>\n<title>Sample Feed</title>\n</channel>\n</rss>`\nfp := gofeed.NewParser()\nfeed, _ := fp.ParseString(feedData)\nfmt.Println(feed.Title)\n```\n\n#### From an io.Reader\n\n```go\nfile, _ := os.Open(\"/path/to/a/file.xml\")\ndefer file.Close()\nfp := gofeed.NewParser()\nfeed, _ := fp.Parse(file)\nfmt.Println(feed.Title)\n```\n\n#### From a URL with a 60s Timeout\n\n```go\nctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)\ndefer cancel()\nfp := gofeed.NewParser()\nfeed, _ := fp.ParseURLWithContext(\"http://feeds.twit.tv/twit.xml\", ctx)\nfmt.Println(feed.Title)\n```\n\n#### From a URL with a Custom User-Agent\n\n```go\nfp := gofeed.NewParser()\nfp.UserAgent = \"MyCustomAgent 1.0\"\nfeed, _ := fp.ParseURL(\"http://feeds.twit.tv/twit.xml\")\nfmt.Println(feed.Title)\n```\n\n### Feed Specific Parsers\n\nIf you have a usage scenario that requires a specialized parser:\n\n#### RSS Feed\n\n```go\nfeedData := `<rss version=\"2.0\">\n<channel>\n<webMaster>example@site.com (Example Name)</webMaster>\n</channel>\n</rss>`\nfp := rss.Parser{}\nrssFeed, _ := fp.Parse(strings.NewReader(feedData))\nfmt.Println(rssFeed.WebMaster)\n```\n\n#### Atom Feed\n\n```go\nfeedData := `<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<subtitle>Example Atom</subtitle>\n</feed>`\nfp := atom.Parser{}\natomFeed, _ := fp.Parse(strings.NewReader(feedData))\nfmt.Println(atomFeed.Subtitle)\n```\n\n#### JSON Feed\n\n```go\nfeedData := `{\"version\":\"1.0\", \"home_page_url\": \"https://daringfireball.net\"}`\nfp := json.Parser{}\njsonFeed, _ := fp.Parse(strings.NewReader(feedData))\nfmt.Println(jsonFeed.HomePageURL)\n```\n\n## Advanced Usage\n\n#### With Basic Authentication\n\n```go\nfp := gofeed.NewParser()\nfp.AuthConfig = &gofeed.Auth{\n  Username: \"foo\",\n  Password: \"bar\",\n}\n```\n\n#### Using Custom Translators for Advanced Parsing\n\nIf you need more control over how fields are parsed and prioritized, you can specify your own custom translator. Below is an example that shows how to create a custom translator to give the `/rss/channel/itunes:author` field higher precedence than the `/rss/channel/managingEditor` field in RSS feeds.\n\n##### Step 1: Define Your Custom Translator\n\nFirst, we'll create a new type that embeds the default RSS translator provided by the library. We'll override its Translate method to implement our custom logic.\n\n```go\ntype MyCustomTranslator struct {\n  defaultTranslator *gofeed.DefaultRSSTranslator\n}\n\nfunc NewMyCustomTranslator() *MyCustomTranslator {\n  t := &MyCustomTranslator{}\n  t.defaultTranslator = &gofeed.DefaultRSSTranslator{}\n  return t\n}\n\nfunc (ct *MyCustomTranslator) Translate(feed interface{}) (*gofeed.Feed, error) {\n  rss, found := feed.(*rss.Feed)\n  if !found {\n    return nil, fmt.Errorf(\"Feed did not match expected type of *rss.Feed\")\n  }\n\n  f, err := ct.defaultTranslator.Translate(rss)\n  if err != nil {\n    return nil, err\n  }\n\n  // Custom logic to prioritize iTunes Author over Managing Editor\n  if rss.ITunesExt != nil && rss.ITunesExt.Author != \"\" {\n    f.Author = rss.ITunesExt.Author\n  } else {\n    f.Author = rss.ManagingEditor\n  }\n  \n  return f, nil\n}\n```\n\n##### Step 2: Use Your Custom Translator\n\nOnce your custom translator is defined, you can tell gofeed.Parser to use it instead of the default one.\n\n```go\nfeedData := `<rss version=\"2.0\">\n<channel>\n<managingEditor>Ender Wiggin</managingEditor>\n<itunes:author>Valentine Wiggin</itunes:author>\n</channel>\n</rss>`\n\nfp := gofeed.NewParser()\nfp.RSSTranslator = NewMyCustomTranslator()\nfeed, _ := fp.ParseString(feedData)\nfmt.Println(feed.Author) // Valentine Wiggin\n```\n\n## Dependencies\n\n* [goxpp](https://github.com/mmcdole/goxpp) - XML Pull Parser\n* [goquery](https://github.com/PuerkitoBio/goquery) - Go jQuery-like interface\n* [testify](https://github.com/stretchr/testify) - Unit test enhancements\n* [jsoniter](https://github.com/json-iterator/go) - Faster JSON Parsing\n\n## License\n\nThis project is licensed under the [MIT License](https://raw.githubusercontent.com/mmcdole/gofeed/master/LICENSE)\n\n## Credits\n\n* [cristoper](https://github.com/cristoper) for his work on implementing xml:base relative URI handling.\n* [Mark Pilgrim](https://en.wikipedia.org/wiki/Mark_Pilgrim) and [Kurt McKee](http://kurtmckee.org) for their work on the excellent [Universal Feed Parser](https://github.com/kurtmckee/feedparser) Python library. This library was the inspiration for the `gofeed` library.\n* [Dan MacTough](http://blog.mact.me) for his work on [node-feedparser](https://github.com/danmactough/node-feedparser). It provided inspiration for the set of fields that should be covered in the hybrid `gofeed.Feed` model.\n* [Matt Jibson](https://mattjibson.com/) for his date parsing function in the [goread](https://github.com/mjibson/goread) project.\n* [Jim Teeuwen](https://github.com/jteeuwen) for his method of representing arbitrary feed extensions in the [go-pkg-rss](https://github.com/jteeuwen/go-pkg-rss) library.\n* [Sudhanshu Raheja](https://revolt.ist) for supporting JSON Feed parser\n"
        },
        {
          "name": "atom",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "coverage.out",
          "type": "blob",
          "size": 22.4716796875,
          "content": "mode: count\ngithub.com/mmcdole/gofeed/translator.go:31.75,33.12 2 50\ngithub.com/mmcdole/gofeed/translator.go:37.2,59.20 23 49\ngithub.com/mmcdole/gofeed/translator.go:33.12,35.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:62.82,80.2 17 14\ngithub.com/mmcdole/gofeed/translator.go:82.81,83.21 1 49\ngithub.com/mmcdole/gofeed/translator.go:88.2,88.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:83.21,85.3 1 14\ngithub.com/mmcdole/gofeed/translator.go:85.8,85.71 1 35\ngithub.com/mmcdole/gofeed/translator.go:85.71,87.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:91.86,93.2 1 49\ngithub.com/mmcdole/gofeed/translator.go:95.79,96.20 1 49\ngithub.com/mmcdole/gofeed/translator.go:101.2,101.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:96.20,98.3 1 2\ngithub.com/mmcdole/gofeed/translator.go:98.8,98.65 1 47\ngithub.com/mmcdole/gofeed/translator.go:98.65,100.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:104.83,106.36 2 49\ngithub.com/mmcdole/gofeed/translator.go:115.2,115.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:106.36,107.34 1 1\ngithub.com/mmcdole/gofeed/translator.go:107.34,108.28 1 1\ngithub.com/mmcdole/gofeed/translator.go:108.28,109.33 1 1\ngithub.com/mmcdole/gofeed/translator.go:109.33,111.6 1 1\ngithub.com/mmcdole/gofeed/translator.go:118.85,119.29 1 49\ngithub.com/mmcdole/gofeed/translator.go:124.2,124.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:119.29,121.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:121.8,121.70 1 48\ngithub.com/mmcdole/gofeed/translator.go:121.70,123.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:127.95,128.36 1 49\ngithub.com/mmcdole/gofeed/translator.go:137.2,137.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:128.36,130.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:130.8,130.70 1 48\ngithub.com/mmcdole/gofeed/translator.go:130.70,133.17 3 0\ngithub.com/mmcdole/gofeed/translator.go:133.17,135.4 1 0\ngithub.com/mmcdole/gofeed/translator.go:140.89,142.2 1 49\ngithub.com/mmcdole/gofeed/translator.go:144.99,146.2 1 49\ngithub.com/mmcdole/gofeed/translator.go:148.84,149.30 1 98\ngithub.com/mmcdole/gofeed/translator.go:177.2,177.8 1 98\ngithub.com/mmcdole/gofeed/translator.go:149.30,154.3 4 8\ngithub.com/mmcdole/gofeed/translator.go:154.8,154.32 1 90\ngithub.com/mmcdole/gofeed/translator.go:154.32,159.3 4 8\ngithub.com/mmcdole/gofeed/translator.go:159.8,159.72 1 82\ngithub.com/mmcdole/gofeed/translator.go:159.72,165.3 5 0\ngithub.com/mmcdole/gofeed/translator.go:165.8,165.73 1 82\ngithub.com/mmcdole/gofeed/translator.go:165.73,171.3 5 0\ngithub.com/mmcdole/gofeed/translator.go:171.8,171.63 1 82\ngithub.com/mmcdole/gofeed/translator.go:171.63,176.3 4 0\ngithub.com/mmcdole/gofeed/translator.go:180.88,181.57 1 49\ngithub.com/mmcdole/gofeed/translator.go:184.2,184.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:181.57,183.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:187.87,188.24 1 49\ngithub.com/mmcdole/gofeed/translator.go:193.2,193.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:188.24,190.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:190.8,190.74 1 48\ngithub.com/mmcdole/gofeed/translator.go:190.74,192.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:196.81,197.22 1 49\ngithub.com/mmcdole/gofeed/translator.go:205.2,205.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:197.22,201.3 3 2\ngithub.com/mmcdole/gofeed/translator.go:201.8,201.62 1 47\ngithub.com/mmcdole/gofeed/translator.go:201.62,204.3 2 0\ngithub.com/mmcdole/gofeed/translator.go:208.86,209.25 1 49\ngithub.com/mmcdole/gofeed/translator.go:214.2,214.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:209.25,211.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:211.8,211.72 1 48\ngithub.com/mmcdole/gofeed/translator.go:211.72,213.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:217.89,219.2 1 49\ngithub.com/mmcdole/gofeed/translator.go:221.93,223.27 2 49\ngithub.com/mmcdole/gofeed/translator.go:229.2,229.58 1 49\ngithub.com/mmcdole/gofeed/translator.go:236.2,236.61 1 49\ngithub.com/mmcdole/gofeed/translator.go:245.2,245.66 1 49\ngithub.com/mmcdole/gofeed/translator.go:251.2,251.19 1 49\ngithub.com/mmcdole/gofeed/translator.go:255.2,255.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:223.27,224.36 1 1\ngithub.com/mmcdole/gofeed/translator.go:224.36,226.4 1 2\ngithub.com/mmcdole/gofeed/translator.go:229.58,231.30 2 0\ngithub.com/mmcdole/gofeed/translator.go:231.30,233.4 1 0\ngithub.com/mmcdole/gofeed/translator.go:236.61,237.46 1 0\ngithub.com/mmcdole/gofeed/translator.go:237.46,239.28 2 0\ngithub.com/mmcdole/gofeed/translator.go:239.28,241.5 1 0\ngithub.com/mmcdole/gofeed/translator.go:245.66,246.47 1 0\ngithub.com/mmcdole/gofeed/translator.go:246.47,248.4 1 0\ngithub.com/mmcdole/gofeed/translator.go:251.19,253.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:258.82,260.30 2 49\ngithub.com/mmcdole/gofeed/translator.go:263.2,263.8 1 49\ngithub.com/mmcdole/gofeed/translator.go:260.30,262.3 1 14\ngithub.com/mmcdole/gofeed/translator.go:266.85,267.25 1 14\ngithub.com/mmcdole/gofeed/translator.go:272.2,272.8 1 14\ngithub.com/mmcdole/gofeed/translator.go:267.25,269.3 1 2\ngithub.com/mmcdole/gofeed/translator.go:269.8,269.79 1 12\ngithub.com/mmcdole/gofeed/translator.go:269.79,271.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:275.90,276.31 1 14\ngithub.com/mmcdole/gofeed/translator.go:281.2,281.8 1 14\ngithub.com/mmcdole/gofeed/translator.go:276.31,278.3 1 2\ngithub.com/mmcdole/gofeed/translator.go:278.8,278.85 1 12\ngithub.com/mmcdole/gofeed/translator.go:278.85,280.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:284.89,286.2 1 14\ngithub.com/mmcdole/gofeed/translator.go:288.83,290.2 1 14\ngithub.com/mmcdole/gofeed/translator.go:292.89,293.71 1 0\ngithub.com/mmcdole/gofeed/translator.go:296.2,296.16 1 0\ngithub.com/mmcdole/gofeed/translator.go:293.71,295.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:299.99,300.71 1 0\ngithub.com/mmcdole/gofeed/translator.go:307.2,307.8 1 0\ngithub.com/mmcdole/gofeed/translator.go:300.71,303.17 3 0\ngithub.com/mmcdole/gofeed/translator.go:303.17,305.4 1 0\ngithub.com/mmcdole/gofeed/translator.go:310.91,311.27 1 14\ngithub.com/mmcdole/gofeed/translator.go:316.2,316.8 1 13\ngithub.com/mmcdole/gofeed/translator.go:311.27,313.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:313.8,313.78 1 13\ngithub.com/mmcdole/gofeed/translator.go:313.78,315.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:319.101,320.34 1 14\ngithub.com/mmcdole/gofeed/translator.go:329.2,329.8 1 13\ngithub.com/mmcdole/gofeed/translator.go:320.34,322.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:322.8,322.78 1 13\ngithub.com/mmcdole/gofeed/translator.go:322.78,325.17 3 0\ngithub.com/mmcdole/gofeed/translator.go:325.17,327.4 1 0\ngithub.com/mmcdole/gofeed/translator.go:332.88,333.26 1 28\ngithub.com/mmcdole/gofeed/translator.go:356.2,356.8 1 28\ngithub.com/mmcdole/gofeed/translator.go:333.26,338.3 4 8\ngithub.com/mmcdole/gofeed/translator.go:338.8,338.80 1 20\ngithub.com/mmcdole/gofeed/translator.go:338.80,344.3 5 0\ngithub.com/mmcdole/gofeed/translator.go:344.8,344.81 1 20\ngithub.com/mmcdole/gofeed/translator.go:344.81,350.3 5 0\ngithub.com/mmcdole/gofeed/translator.go:350.8,350.71 1 20\ngithub.com/mmcdole/gofeed/translator.go:350.71,355.3 4 0\ngithub.com/mmcdole/gofeed/translator.go:359.92,361.61 1 14\ngithub.com/mmcdole/gofeed/translator.go:364.2,364.8 1 14\ngithub.com/mmcdole/gofeed/translator.go:361.61,363.3 1 4\ngithub.com/mmcdole/gofeed/translator.go:367.83,368.25 1 14\ngithub.com/mmcdole/gofeed/translator.go:371.2,371.8 1 14\ngithub.com/mmcdole/gofeed/translator.go:368.25,370.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:374.85,375.63 1 14\ngithub.com/mmcdole/gofeed/translator.go:379.2,379.8 1 14\ngithub.com/mmcdole/gofeed/translator.go:375.63,378.3 2 0\ngithub.com/mmcdole/gofeed/translator.go:382.97,384.31 2 14\ngithub.com/mmcdole/gofeed/translator.go:390.2,390.66 1 14\ngithub.com/mmcdole/gofeed/translator.go:397.2,397.74 1 14\ngithub.com/mmcdole/gofeed/translator.go:403.2,403.19 1 14\ngithub.com/mmcdole/gofeed/translator.go:407.2,407.8 1 14\ngithub.com/mmcdole/gofeed/translator.go:384.31,385.40 1 1\ngithub.com/mmcdole/gofeed/translator.go:385.40,387.4 1 2\ngithub.com/mmcdole/gofeed/translator.go:390.66,392.30 2 0\ngithub.com/mmcdole/gofeed/translator.go:392.30,394.4 1 0\ngithub.com/mmcdole/gofeed/translator.go:397.74,398.51 1 0\ngithub.com/mmcdole/gofeed/translator.go:398.51,400.4 1 0\ngithub.com/mmcdole/gofeed/translator.go:403.19,405.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:410.101,411.30 1 14\ngithub.com/mmcdole/gofeed/translator.go:418.2,418.8 1 14\ngithub.com/mmcdole/gofeed/translator.go:411.30,417.3 5 1\ngithub.com/mmcdole/gofeed/translator.go:421.131,424.23 2 49\ngithub.com/mmcdole/gofeed/translator.go:428.2,428.27 1 1\ngithub.com/mmcdole/gofeed/translator.go:433.2,433.8 1 1\ngithub.com/mmcdole/gofeed/translator.go:424.23,426.3 1 48\ngithub.com/mmcdole/gofeed/translator.go:428.27,429.39 1 3\ngithub.com/mmcdole/gofeed/translator.go:429.39,431.4 1 1\ngithub.com/mmcdole/gofeed/translator.go:436.76,437.20 1 0\ngithub.com/mmcdole/gofeed/translator.go:441.2,441.23 1 0\ngithub.com/mmcdole/gofeed/translator.go:445.2,445.19 1 0\ngithub.com/mmcdole/gofeed/translator.go:437.20,439.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:441.23,443.3 1 0\ngithub.com/mmcdole/gofeed/translator.go:458.76,460.12 2 44\ngithub.com/mmcdole/gofeed/translator.go:464.2,482.20 19 43\ngithub.com/mmcdole/gofeed/translator.go:460.12,462.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:485.83,503.2 17 18\ngithub.com/mmcdole/gofeed/translator.go:505.84,507.2 1 43\ngithub.com/mmcdole/gofeed/translator.go:509.89,511.2 1 43\ngithub.com/mmcdole/gofeed/translator.go:513.82,515.14 2 43\ngithub.com/mmcdole/gofeed/translator.go:518.2,518.8 1 43\ngithub.com/mmcdole/gofeed/translator.go:515.14,517.3 1 2\ngithub.com/mmcdole/gofeed/translator.go:521.86,523.21 2 43\ngithub.com/mmcdole/gofeed/translator.go:526.2,526.8 1 43\ngithub.com/mmcdole/gofeed/translator.go:523.21,525.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:529.88,531.2 1 43\ngithub.com/mmcdole/gofeed/translator.go:533.98,535.2 1 43\ngithub.com/mmcdole/gofeed/translator.go:537.87,539.14 2 43\ngithub.com/mmcdole/gofeed/translator.go:545.2,545.8 1 43\ngithub.com/mmcdole/gofeed/translator.go:539.14,544.3 4 4\ngithub.com/mmcdole/gofeed/translator.go:548.91,550.25 1 43\ngithub.com/mmcdole/gofeed/translator.go:561.2,561.8 1 43\ngithub.com/mmcdole/gofeed/translator.go:550.25,553.34 2 4\ngithub.com/mmcdole/gofeed/translator.go:553.34,558.4 1 4\ngithub.com/mmcdole/gofeed/translator.go:564.90,566.2 1 43\ngithub.com/mmcdole/gofeed/translator.go:568.84,569.21 1 43\ngithub.com/mmcdole/gofeed/translator.go:574.2,574.8 1 43\ngithub.com/mmcdole/gofeed/translator.go:569.21,573.3 3 1\ngithub.com/mmcdole/gofeed/translator.go:577.89,579.2 1 43\ngithub.com/mmcdole/gofeed/translator.go:581.92,582.27 1 43\ngithub.com/mmcdole/gofeed/translator.go:594.2,594.8 1 43\ngithub.com/mmcdole/gofeed/translator.go:582.27,583.33 1 2\ngithub.com/mmcdole/gofeed/translator.go:586.3,586.35 1 2\ngithub.com/mmcdole/gofeed/translator.go:589.3,589.31 1 2\ngithub.com/mmcdole/gofeed/translator.go:592.3,592.43 1 2\ngithub.com/mmcdole/gofeed/translator.go:583.33,585.4 1 2\ngithub.com/mmcdole/gofeed/translator.go:586.35,588.4 1 2\ngithub.com/mmcdole/gofeed/translator.go:589.31,591.4 1 2\ngithub.com/mmcdole/gofeed/translator.go:597.96,598.28 1 43\ngithub.com/mmcdole/gofeed/translator.go:604.2,604.8 1 43\ngithub.com/mmcdole/gofeed/translator.go:598.28,600.37 2 0\ngithub.com/mmcdole/gofeed/translator.go:600.37,602.4 1 0\ngithub.com/mmcdole/gofeed/translator.go:607.85,609.37 2 43\ngithub.com/mmcdole/gofeed/translator.go:612.2,612.8 1 43\ngithub.com/mmcdole/gofeed/translator.go:609.37,611.3 1 18\ngithub.com/mmcdole/gofeed/translator.go:615.86,617.2 1 18\ngithub.com/mmcdole/gofeed/translator.go:619.91,621.2 1 18\ngithub.com/mmcdole/gofeed/translator.go:623.90,624.26 1 18\ngithub.com/mmcdole/gofeed/translator.go:627.2,627.8 1 18\ngithub.com/mmcdole/gofeed/translator.go:624.26,626.3 1 2\ngithub.com/mmcdole/gofeed/translator.go:630.84,632.14 2 18\ngithub.com/mmcdole/gofeed/translator.go:635.2,635.8 1 18\ngithub.com/mmcdole/gofeed/translator.go:632.14,634.3 1 2\ngithub.com/mmcdole/gofeed/translator.go:638.90,640.2 1 18\ngithub.com/mmcdole/gofeed/translator.go:642.100,644.2 1 18\ngithub.com/mmcdole/gofeed/translator.go:646.94,648.21 2 18\ngithub.com/mmcdole/gofeed/translator.go:651.2,651.8 1 18\ngithub.com/mmcdole/gofeed/translator.go:648.21,650.3 1 17\ngithub.com/mmcdole/gofeed/translator.go:654.104,656.22 2 18\ngithub.com/mmcdole/gofeed/translator.go:659.2,659.8 1 18\ngithub.com/mmcdole/gofeed/translator.go:656.22,658.3 1 17\ngithub.com/mmcdole/gofeed/translator.go:662.89,664.14 2 18\ngithub.com/mmcdole/gofeed/translator.go:669.2,669.8 1 18\ngithub.com/mmcdole/gofeed/translator.go:664.14,668.3 3 4\ngithub.com/mmcdole/gofeed/translator.go:672.93,673.26 1 18\ngithub.com/mmcdole/gofeed/translator.go:682.2,682.8 1 18\ngithub.com/mmcdole/gofeed/translator.go:673.26,675.35 2 4\ngithub.com/mmcdole/gofeed/translator.go:675.35,680.4 1 4\ngithub.com/mmcdole/gofeed/translator.go:685.84,687.2 1 18\ngithub.com/mmcdole/gofeed/translator.go:689.86,691.2 1 18\ngithub.com/mmcdole/gofeed/translator.go:693.98,694.29 1 18\ngithub.com/mmcdole/gofeed/translator.go:700.2,700.8 1 18\ngithub.com/mmcdole/gofeed/translator.go:694.29,696.38 2 1\ngithub.com/mmcdole/gofeed/translator.go:696.38,698.4 1 1\ngithub.com/mmcdole/gofeed/translator.go:703.102,704.24 1 18\ngithub.com/mmcdole/gofeed/translator.go:720.2,720.8 1 18\ngithub.com/mmcdole/gofeed/translator.go:704.24,706.33 2 3\ngithub.com/mmcdole/gofeed/translator.go:716.3,716.27 1 3\ngithub.com/mmcdole/gofeed/translator.go:706.33,707.28 1 3\ngithub.com/mmcdole/gofeed/translator.go:707.28,713.5 5 1\ngithub.com/mmcdole/gofeed/translator.go:716.27,718.4 1 2\ngithub.com/mmcdole/gofeed/translator.go:723.99,724.18 1 104\ngithub.com/mmcdole/gofeed/translator.go:728.2,728.29 1 9\ngithub.com/mmcdole/gofeed/translator.go:733.2,733.12 1 4\ngithub.com/mmcdole/gofeed/translator.go:724.18,726.3 1 95\ngithub.com/mmcdole/gofeed/translator.go:728.29,729.27 1 9\ngithub.com/mmcdole/gofeed/translator.go:729.27,731.4 1 5\ngithub.com/mmcdole/gofeed/translator.go:736.91,737.41 1 61\ngithub.com/mmcdole/gofeed/translator.go:741.2,742.8 2 8\ngithub.com/mmcdole/gofeed/translator.go:737.41,739.3 1 53\ngithub.com/mmcdole/gofeed/translator.go:755.76,757.12 2 10\ngithub.com/mmcdole/gofeed/translator.go:761.2,783.20 17 9\ngithub.com/mmcdole/gofeed/translator.go:757.12,759.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:786.85,805.2 16 9\ngithub.com/mmcdole/gofeed/translator.go:807.84,808.22 1 9\ngithub.com/mmcdole/gofeed/translator.go:811.2,811.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:808.22,810.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:814.89,816.2 1 9\ngithub.com/mmcdole/gofeed/translator.go:818.82,819.28 1 9\ngithub.com/mmcdole/gofeed/translator.go:822.2,822.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:819.28,821.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:825.86,826.24 1 9\ngithub.com/mmcdole/gofeed/translator.go:829.2,829.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:826.24,828.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:832.88,833.25 1 9\ngithub.com/mmcdole/gofeed/translator.go:836.2,836.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:833.25,835.3 1 9\ngithub.com/mmcdole/gofeed/translator.go:839.98,840.25 1 9\ngithub.com/mmcdole/gofeed/translator.go:846.2,846.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:840.25,842.17 2 9\ngithub.com/mmcdole/gofeed/translator.go:842.17,844.4 1 8\ngithub.com/mmcdole/gofeed/translator.go:849.92,850.25 1 9\ngithub.com/mmcdole/gofeed/translator.go:853.2,853.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:850.25,852.3 1 9\ngithub.com/mmcdole/gofeed/translator.go:856.102,857.25 1 9\ngithub.com/mmcdole/gofeed/translator.go:863.2,863.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:857.25,859.17 2 9\ngithub.com/mmcdole/gofeed/translator.go:859.17,861.4 1 8\ngithub.com/mmcdole/gofeed/translator.go:866.87,867.24 1 15\ngithub.com/mmcdole/gofeed/translator.go:875.2,875.8 1 15\ngithub.com/mmcdole/gofeed/translator.go:867.24,872.3 4 10\ngithub.com/mmcdole/gofeed/translator.go:878.91,880.25 1 9\ngithub.com/mmcdole/gofeed/translator.go:895.2,895.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:880.25,882.34 2 3\ngithub.com/mmcdole/gofeed/translator.go:882.34,889.4 5 3\ngithub.com/mmcdole/gofeed/translator.go:890.8,890.65 1 6\ngithub.com/mmcdole/gofeed/translator.go:890.65,892.3 1 5\ngithub.com/mmcdole/gofeed/translator.go:898.90,901.2 2 9\ngithub.com/mmcdole/gofeed/translator.go:903.84,906.21 1 9\ngithub.com/mmcdole/gofeed/translator.go:910.2,910.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:906.21,909.3 2 8\ngithub.com/mmcdole/gofeed/translator.go:913.85,915.31 2 9\ngithub.com/mmcdole/gofeed/translator.go:918.2,918.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:915.31,917.3 1 9\ngithub.com/mmcdole/gofeed/translator.go:921.88,922.26 1 9\ngithub.com/mmcdole/gofeed/translator.go:925.2,925.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:922.26,924.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:928.93,929.28 1 9\ngithub.com/mmcdole/gofeed/translator.go:932.2,932.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:929.28,931.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:935.92,936.32 1 9\ngithub.com/mmcdole/gofeed/translator.go:941.2,941.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:936.32,938.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:938.8,938.39 1 1\ngithub.com/mmcdole/gofeed/translator.go:938.39,940.3 1 1\ngithub.com/mmcdole/gofeed/translator.go:944.86,946.2 1 9\ngithub.com/mmcdole/gofeed/translator.go:948.92,949.33 1 9\ngithub.com/mmcdole/gofeed/translator.go:952.2,952.16 1 9\ngithub.com/mmcdole/gofeed/translator.go:949.33,951.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:955.102,956.33 1 9\ngithub.com/mmcdole/gofeed/translator.go:962.2,962.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:956.33,958.17 2 8\ngithub.com/mmcdole/gofeed/translator.go:958.17,960.4 1 8\ngithub.com/mmcdole/gofeed/translator.go:965.94,966.34 1 9\ngithub.com/mmcdole/gofeed/translator.go:969.2,969.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:966.34,968.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:972.104,973.34 1 9\ngithub.com/mmcdole/gofeed/translator.go:979.2,979.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:973.34,975.17 2 8\ngithub.com/mmcdole/gofeed/translator.go:975.17,977.4 1 8\ngithub.com/mmcdole/gofeed/translator.go:982.91,983.28 1 17\ngithub.com/mmcdole/gofeed/translator.go:991.2,991.8 1 17\ngithub.com/mmcdole/gofeed/translator.go:983.28,988.3 4 14\ngithub.com/mmcdole/gofeed/translator.go:994.95,996.29 1 9\ngithub.com/mmcdole/gofeed/translator.go:1011.2,1011.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:996.29,998.38 2 1\ngithub.com/mmcdole/gofeed/translator.go:998.38,1005.4 5 1\ngithub.com/mmcdole/gofeed/translator.go:1006.8,1006.69 1 8\ngithub.com/mmcdole/gofeed/translator.go:1006.69,1008.3 1 7\ngithub.com/mmcdole/gofeed/translator.go:1014.86,1015.23 1 9\ngithub.com/mmcdole/gofeed/translator.go:1018.2,1018.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:1015.23,1017.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:1021.88,1022.26 1 9\ngithub.com/mmcdole/gofeed/translator.go:1029.2,1029.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:1022.26,1025.3 2 8\ngithub.com/mmcdole/gofeed/translator.go:1025.8,1025.39 1 1\ngithub.com/mmcdole/gofeed/translator.go:1025.39,1028.3 2 1\ngithub.com/mmcdole/gofeed/translator.go:1032.100,1033.28 1 9\ngithub.com/mmcdole/gofeed/translator.go:1036.2,1036.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:1033.28,1035.3 1 8\ngithub.com/mmcdole/gofeed/translator.go:1039.104,1040.33 1 9\ngithub.com/mmcdole/gofeed/translator.go:1051.2,1051.8 1 9\ngithub.com/mmcdole/gofeed/translator.go:1040.33,1041.52 1 8\ngithub.com/mmcdole/gofeed/translator.go:1041.52,1049.4 5 8\ngithub.com/mmcdole/gofeed/detector.go:32.46,37.12 4 41\ngithub.com/mmcdole/gofeed/detector.go:53.2,53.22 1 38\ngithub.com/mmcdole/gofeed/detector.go:80.2,80.24 1 3\ngithub.com/mmcdole/gofeed/detector.go:37.12,39.17 2 85\ngithub.com/mmcdole/gofeed/detector.go:43.3,43.13 1 82\ngithub.com/mmcdole/gofeed/detector.go:39.17,41.4 1 3\ngithub.com/mmcdole/gofeed/detector.go:44.30,44.30 0 32\ngithub.com/mmcdole/gofeed/detector.go:45.43,45.43 0 12\ngithub.com/mmcdole/gofeed/detector.go:46.11,49.14 3 38\ngithub.com/mmcdole/gofeed/detector.go:53.22,59.17 4 28\ngithub.com/mmcdole/gofeed/detector.go:63.3,64.15 2 28\ngithub.com/mmcdole/gofeed/detector.go:59.17,61.4 1 0\ngithub.com/mmcdole/gofeed/detector.go:65.14,66.22 1 4\ngithub.com/mmcdole/gofeed/detector.go:67.14,68.22 1 12\ngithub.com/mmcdole/gofeed/detector.go:69.15,70.23 1 8\ngithub.com/mmcdole/gofeed/detector.go:71.11,72.26 1 4\ngithub.com/mmcdole/gofeed/detector.go:74.8,74.29 1 10\ngithub.com/mmcdole/gofeed/detector.go:74.29,76.37 1 10\ngithub.com/mmcdole/gofeed/detector.go:76.37,78.4 1 7\ngithub.com/mmcdole/gofeed/feed.go:40.31,43.2 2 0\ngithub.com/mmcdole/gofeed/feed.go:91.25,93.2 1 1\ngithub.com/mmcdole/gofeed/feed.go:97.35,101.2 1 3\ngithub.com/mmcdole/gofeed/feed.go:104.30,106.2 1 2\ngithub.com/mmcdole/gofeed/parser.go:27.37,29.2 1 0\ngithub.com/mmcdole/gofeed/parser.go:55.26,63.2 2 35\ngithub.com/mmcdole/gofeed/parser.go:68.55,82.18 5 32\ngithub.com/mmcdole/gofeed/parser.go:91.2,91.36 1 8\ngithub.com/mmcdole/gofeed/parser.go:83.20,84.28 1 6\ngithub.com/mmcdole/gofeed/parser.go:85.19,86.27 1 12\ngithub.com/mmcdole/gofeed/parser.go:87.20,88.28 1 6\ngithub.com/mmcdole/gofeed/parser.go:96.67,98.2 1 11\ngithub.com/mmcdole/gofeed/parser.go:106.99,110.16 3 13\ngithub.com/mmcdole/gofeed/parser.go:113.2,116.87 3 13\ngithub.com/mmcdole/gofeed/parser.go:120.2,122.16 2 13\ngithub.com/mmcdole/gofeed/parser.go:126.2,126.17 1 11\ngithub.com/mmcdole/gofeed/parser.go:135.2,135.53 1 11\ngithub.com/mmcdole/gofeed/parser.go:142.2,142.27 1 10\ngithub.com/mmcdole/gofeed/parser.go:110.16,112.3 1 0\ngithub.com/mmcdole/gofeed/parser.go:116.87,118.3 1 1\ngithub.com/mmcdole/gofeed/parser.go:122.16,124.3 1 2\ngithub.com/mmcdole/gofeed/parser.go:126.17,127.16 1 11\ngithub.com/mmcdole/gofeed/parser.go:127.16,129.17 2 11\ngithub.com/mmcdole/gofeed/parser.go:129.17,131.5 1 0\ngithub.com/mmcdole/gofeed/parser.go:135.53,140.3 1 1\ngithub.com/mmcdole/gofeed/parser.go:147.58,149.2 1 10\ngithub.com/mmcdole/gofeed/parser.go:151.63,153.16 2 6\ngithub.com/mmcdole/gofeed/parser.go:156.2,156.36 1 6\ngithub.com/mmcdole/gofeed/parser.go:153.16,155.3 1 0\ngithub.com/mmcdole/gofeed/parser.go:159.62,161.16 2 12\ngithub.com/mmcdole/gofeed/parser.go:165.2,165.35 1 12\ngithub.com/mmcdole/gofeed/parser.go:161.16,163.3 1 0\ngithub.com/mmcdole/gofeed/parser.go:168.63,170.16 2 6\ngithub.com/mmcdole/gofeed/parser.go:173.2,173.36 1 6\ngithub.com/mmcdole/gofeed/parser.go:170.16,172.3 1 0\ngithub.com/mmcdole/gofeed/parser.go:176.41,177.29 1 6\ngithub.com/mmcdole/gofeed/parser.go:180.2,181.25 2 6\ngithub.com/mmcdole/gofeed/parser.go:177.29,179.3 1 0\ngithub.com/mmcdole/gofeed/parser.go:184.40,185.28 1 12\ngithub.com/mmcdole/gofeed/parser.go:188.2,189.24 2 12\ngithub.com/mmcdole/gofeed/parser.go:185.28,187.3 1 0\ngithub.com/mmcdole/gofeed/parser.go:192.41,193.29 1 6\ngithub.com/mmcdole/gofeed/parser.go:196.2,197.25 2 6\ngithub.com/mmcdole/gofeed/parser.go:193.29,195.3 1 0\ngithub.com/mmcdole/gofeed/parser.go:200.44,201.21 1 13\ngithub.com/mmcdole/gofeed/parser.go:204.2,205.17 2 0\ngithub.com/mmcdole/gofeed/parser.go:201.21,203.3 1 13\n"
        },
        {
          "name": "detector.go",
          "type": "blob",
          "size": 1.685546875,
          "content": "package gofeed\n\nimport (\n\t\"bytes\"\n\t\"io\"\n\t\"strings\"\n\n\tjsoniter \"github.com/json-iterator/go\"\n\t\"github.com/mmcdole/gofeed/internal/shared\"\n\txpp \"github.com/mmcdole/goxpp\"\n)\n\n// FeedType represents one of the possible feed\n// types that we can detect.\ntype FeedType int\n\nconst (\n\t// FeedTypeUnknown represents a feed that could not have its\n\t// type determiend.\n\tFeedTypeUnknown FeedType = iota\n\t// FeedTypeAtom repesents an Atom feed\n\tFeedTypeAtom\n\t// FeedTypeRSS represents an RSS feed\n\tFeedTypeRSS\n\t// FeedTypeJSON represents a JSON feed\n\tFeedTypeJSON\n)\n\n// DetectFeedType attempts to determine the type of feed\n// by looking for specific xml elements unique to the\n// various feed types.\nfunc DetectFeedType(feed io.Reader) FeedType {\n\tbuffer := new(bytes.Buffer)\n\tbuffer.ReadFrom(feed)\n\n\tvar firstChar byte\n\tloop: for {\n\t\tch, err := buffer.ReadByte()\n\t\tif err != nil {\n\t\t\treturn FeedTypeUnknown\n\t\t}\n\t\t// ignore leading whitespace & byte order marks\n\t\tswitch ch {\n\t\tcase ' ', '\\r', '\\n', '\\t':\n\t\tcase 0xFE, 0xFF, 0x00, 0xEF, 0xBB, 0xBF:  // utf 8-16-32 bom\n\t\tdefault:\n\t\t\tfirstChar = ch\n\t\t\tbuffer.UnreadByte()\n\t\t\tbreak loop\n\t\t}\n\t}\n\n\tif firstChar == '<' {\n\t\t// Check if it's an XML based feed\n\t\tp := xpp.NewXMLPullParser(bytes.NewReader(buffer.Bytes()), false, shared.NewReaderLabel)\n\n\t\t_, err := shared.FindRoot(p)\n\t\tif err != nil {\n\t\t\treturn FeedTypeUnknown\n\t\t}\n\n\t\tname := strings.ToLower(p.Name)\n\t\tswitch name {\n\t\tcase \"rdf\":\n\t\t\treturn FeedTypeRSS\n\t\tcase \"rss\":\n\t\t\treturn FeedTypeRSS\n\t\tcase \"feed\":\n\t\t\treturn FeedTypeAtom\n\t\tdefault:\n\t\t\treturn FeedTypeUnknown\n\t\t}\n\t} else if firstChar == '{' {\n\t\t// Check if document is valid JSON\n\t\tif jsoniter.Valid(buffer.Bytes()) {\n\t\t\treturn FeedTypeJSON\n\t\t}\n\t}\n\treturn FeedTypeUnknown\n}\n"
        },
        {
          "name": "detector_test.go",
          "type": "blob",
          "size": 1.3876953125,
          "content": "package gofeed_test\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/mmcdole/gofeed\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestDetectFeedType(t *testing.T) {\n\tvar feedTypeTests = []struct {\n\t\tfile     string\n\t\texpected gofeed.FeedType\n\t}{\n\t\t{\"atom03_feed.xml\", gofeed.FeedTypeAtom},\n\t\t{\"atom10_feed.xml\", gofeed.FeedTypeAtom},\n\t\t{\"rss_feed.xml\", gofeed.FeedTypeRSS},\n\t\t{\"rss_feed_bom.xml\", gofeed.FeedTypeRSS},\n\t\t{\"rss_feed_leading_spaces.xml\", gofeed.FeedTypeRSS},\n\t\t{\"rdf_feed.xml\", gofeed.FeedTypeRSS},\n\t\t{\"unknown_feed.xml\", gofeed.FeedTypeUnknown},\n\t\t{\"empty_feed.xml\", gofeed.FeedTypeUnknown},\n\t\t{\"json10_feed.json\", gofeed.FeedTypeJSON},\n\t}\n\n\tfor _, test := range feedTypeTests {\n\t\tfmt.Printf(\"Testing %s... \", test.file)\n\n\t\t// Get feed content\n\t\tpath := fmt.Sprintf(\"testdata/parser/universal/%s\", test.file)\n\t\tf, _ := os.ReadFile(path)\n\n\t\t// Get actual value\n\t\tactual := gofeed.DetectFeedType(bytes.NewReader(f))\n\n\t\tif assert.Equal(t, actual, test.expected, \"Feed file %s did not match expected type %d\", test.file, test.expected) {\n\t\t\tfmt.Printf(\"OK\\n\")\n\t\t} else {\n\t\t\tfmt.Printf(\"Failed\\n\")\n\t\t}\n\t}\n}\n\n// Examples\n\nfunc ExampleDetectFeedType() {\n\tfeedData := `<rss version=\"2.0\">\n<channel>\n<title>Sample Feed</title>\n</channel>\n</rss>`\n\tfeedType := gofeed.DetectFeedType(strings.NewReader(feedData))\n\tif feedType == gofeed.FeedTypeRSS {\n\t\tfmt.Println(\"Wow! This is an RSS feed!\")\n\t}\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "feed.go",
          "type": "blob",
          "size": 4.4267578125,
          "content": "package gofeed\n\nimport (\n\t\"encoding/json\"\n\t\"time\"\n\n\text \"github.com/mmcdole/gofeed/extensions\"\n)\n\n// Feed is the universal Feed type that atom.Feed\n// and rss.Feed gets translated to. It represents\n// a web feed.\n// Sorting with sort.Sort will order the Items by\n// oldest to newest publish time.\ntype Feed struct {\n\tTitle           string                   `json:\"title,omitempty\"`\n\tDescription     string                   `json:\"description,omitempty\"`\n\tLink            string                   `json:\"link,omitempty\"`\n\tFeedLink        string                   `json:\"feedLink,omitempty\"`\n\tLinks           []string                 `json:\"links,omitempty\"`\n\tUpdated         string                   `json:\"updated,omitempty\"`\n\tUpdatedParsed   *time.Time               `json:\"updatedParsed,omitempty\"`\n\tPublished       string                   `json:\"published,omitempty\"`\n\tPublishedParsed *time.Time               `json:\"publishedParsed,omitempty\"`\n\tAuthor          *Person                  `json:\"author,omitempty\"` // Deprecated: Use feed.Authors instead\n\tAuthors         []*Person                `json:\"authors,omitempty\"`\n\tLanguage        string                   `json:\"language,omitempty\"`\n\tImage           *Image                   `json:\"image,omitempty\"`\n\tCopyright       string                   `json:\"copyright,omitempty\"`\n\tGenerator       string                   `json:\"generator,omitempty\"`\n\tCategories      []string                 `json:\"categories,omitempty\"`\n\tDublinCoreExt   *ext.DublinCoreExtension `json:\"dcExt,omitempty\"`\n\tITunesExt       *ext.ITunesFeedExtension `json:\"itunesExt,omitempty\"`\n\tExtensions      ext.Extensions           `json:\"extensions,omitempty\"`\n\tCustom          map[string]string        `json:\"custom,omitempty\"`\n\tItems           []*Item                  `json:\"items\"`\n\tFeedType        string                   `json:\"feedType\"`\n\tFeedVersion     string                   `json:\"feedVersion\"`\n}\n\nfunc (f Feed) String() string {\n\tjson, _ := json.MarshalIndent(f, \"\", \"    \")\n\treturn string(json)\n}\n\n// Item is the universal Item type that atom.Entry\n// and rss.Item gets translated to.  It represents\n// a single entry in a given feed.\ntype Item struct {\n\tTitle           string                   `json:\"title,omitempty\"`\n\tDescription     string                   `json:\"description,omitempty\"`\n\tContent         string                   `json:\"content,omitempty\"`\n\tLink            string                   `json:\"link,omitempty\"`\n\tLinks           []string                 `json:\"links,omitempty\"`\n\tUpdated         string                   `json:\"updated,omitempty\"`\n\tUpdatedParsed   *time.Time               `json:\"updatedParsed,omitempty\"`\n\tPublished       string                   `json:\"published,omitempty\"`\n\tPublishedParsed *time.Time               `json:\"publishedParsed,omitempty\"`\n\tAuthor          *Person                  `json:\"author,omitempty\"` // Deprecated: Use item.Authors instead\n\tAuthors         []*Person                `json:\"authors,omitempty\"`\n\tGUID            string                   `json:\"guid,omitempty\"`\n\tImage           *Image                   `json:\"image,omitempty\"`\n\tCategories      []string                 `json:\"categories,omitempty\"`\n\tEnclosures      []*Enclosure             `json:\"enclosures,omitempty\"`\n\tDublinCoreExt   *ext.DublinCoreExtension `json:\"dcExt,omitempty\"`\n\tITunesExt       *ext.ITunesItemExtension `json:\"itunesExt,omitempty\"`\n\tExtensions      ext.Extensions           `json:\"extensions,omitempty\"`\n\tCustom          map[string]string        `json:\"custom,omitempty\"`\n}\n\n// Person is an individual specified in a feed\n// (e.g. an author)\ntype Person struct {\n\tName  string `json:\"name,omitempty\"`\n\tEmail string `json:\"email,omitempty\"`\n}\n\n// Image is an image that is the artwork for a given\n// feed or item.\ntype Image struct {\n\tURL   string `json:\"url,omitempty\"`\n\tTitle string `json:\"title,omitempty\"`\n}\n\n// Enclosure is a file associated with a given Item.\ntype Enclosure struct {\n\tURL    string `json:\"url,omitempty\"`\n\tLength string `json:\"length,omitempty\"`\n\tType   string `json:\"type,omitempty\"`\n}\n\n// Len returns the length of Items.\nfunc (f Feed) Len() int {\n\treturn len(f.Items)\n}\n\n// Less compares PublishedParsed of Items[i], Items[k]\n// and returns true if Items[i] is less than Items[k].\nfunc (f Feed) Less(i, k int) bool {\n\treturn f.Items[i].PublishedParsed.Before(\n\t\t*f.Items[k].PublishedParsed,\n\t)\n}\n\n// Swap swaps Items[i] and Items[k].\nfunc (f Feed) Swap(i, k int) {\n\tf.Items[i], f.Items[k] = f.Items[k], f.Items[i]\n}\n"
        },
        {
          "name": "feed_test.go",
          "type": "blob",
          "size": 0.83984375,
          "content": "package gofeed_test\n\nimport (\n\t\"sort\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/mmcdole/gofeed\"\n)\n\nfunc TestFeedSort(t *testing.T) {\n\toldestItem := &gofeed.Item{\n\t\tPublishedParsed: &[]time.Time{time.Unix(0, 0)}[0],\n\t}\n\tinbetweenItem := &gofeed.Item{\n\t\tPublishedParsed: &[]time.Time{time.Unix(1, 0)}[0],\n\t}\n\tnewestItem := &gofeed.Item{\n\t\tPublishedParsed: &[]time.Time{time.Unix(2, 0)}[0],\n\t}\n\n\tfeed := gofeed.Feed{\n\t\tItems: []*gofeed.Item{\n\t\t\tnewestItem,\n\t\t\toldestItem,\n\t\t\tinbetweenItem,\n\t\t},\n\t}\n\texpected := gofeed.Feed{\n\t\tItems: []*gofeed.Item{\n\t\t\toldestItem,\n\t\t\tinbetweenItem,\n\t\t\tnewestItem,\n\t\t},\n\t}\n\n\tsort.Sort(feed)\n\n\tfor i, item := range feed.Items {\n\t\tif !item.PublishedParsed.Equal(\n\t\t\t*expected.Items[i].PublishedParsed,\n\t\t) {\n\t\t\tt.Errorf(\n\t\t\t\t\"Item PublishedParsed = %s; want %s\",\n\t\t\t\titem.PublishedParsed,\n\t\t\t\texpected.Items[i].PublishedParsed,\n\t\t\t)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.8193359375,
          "content": "module github.com/mmcdole/gofeed\n\ngo 1.19\n\nrequire (\n\tgithub.com/PuerkitoBio/goquery v1.8.0\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/mmcdole/goxpp v1.1.1-0.20240225020742-a0c311522b23\n\tgithub.com/stretchr/testify v1.8.1\n\tgithub.com/urfave/cli v1.22.3\n\tgolang.org/x/net v0.4.0\n\tgolang.org/x/text v0.5.0\n)\n\nrequire (\n\tgithub.com/andybalholm/cascadia v1.3.1 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.0.1 // indirect\n\tgithub.com/shurcooL/sanitized_anchor_name v1.0.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 4.7587890625,
          "content": "github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/PuerkitoBio/goquery v1.8.0 h1:PJTF7AmFCFKk1N6V6jmKfrNH9tV5pNE6lZMkG0gta/U=\ngithub.com/PuerkitoBio/goquery v1.8.0/go.mod h1:ypIiRMtY7COPGk+I/YbZLbxsxn9g5ejnI2HSMtkjZvI=\ngithub.com/andybalholm/cascadia v1.3.1 h1:nhxRkql1kdYCc8Snf7D5/D3spOX+dBgjA6u8x004T2c=\ngithub.com/andybalholm/cascadia v1.3.1/go.mod h1:R4bJ1UQfqADjvDa4P6HZHLh/3OxWWEqc0Sk8XGwHqvA=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d h1:U+s90UTSYgptZMwQh2aRr3LuazLJIa+Pg3Kc1ylSYVY=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/mmcdole/goxpp v1.1.1-0.20240225020742-a0c311522b23 h1:Zr92CAlFhy2gL+V1F+EyIuzbQNbSgP4xhTODZtrXUtk=\ngithub.com/mmcdole/goxpp v1.1.1-0.20240225020742-a0c311522b23/go.mod h1:v+25+lT2ViuQ7mVxcncQ8ch1URund48oH+jhjiwEgS8=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/russross/blackfriday/v2 v2.0.1 h1:lPqVAte+HuHNfhJ/0LC98ESWRz8afy9tM/0RK8m9o+Q=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0 h1:PdmoCO6wvbs+7yrJyMORt4/BmY5IYyJwS/kOiWx8mHo=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/urfave/cli v1.22.3 h1:FpNT6zq26xNpHZy08emi755QwzLPs6Pukqjlc7RfOMU=\ngithub.com/urfave/cli v1.22.3/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngolang.org/x/net v0.0.0-20210916014120-12bc252f5db8/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.4.0 h1:Q5QPcMlvfxFTAPV0+07Xz/MpK9NTXu2VDUuy0FeMfaU=\ngolang.org/x/net v0.4.0/go.mod h1:MBQ8lrhLObU/6UmLb4fmbmk5OcyYmqtbGd/9yIeKjEE=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.5.0 h1:OLmvp0KP+FVG99Ct/qFiL/Fhk4zp4QQnZ7b2U+5piUM=\ngolang.org/x/text v0.5.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "json",
          "type": "tree",
          "content": null
        },
        {
          "name": "parser.go",
          "type": "blob",
          "size": 4.830078125,
          "content": "package gofeed\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/mmcdole/gofeed/atom\"\n\t\"github.com/mmcdole/gofeed/json\"\n\t\"github.com/mmcdole/gofeed/rss\"\n)\n\n// ErrFeedTypeNotDetected is returned when the detection system can not figure\n// out the Feed format\nvar ErrFeedTypeNotDetected = errors.New(\"Failed to detect feed type\")\n\n// HTTPError represents an HTTP error returned by a server.\ntype HTTPError struct {\n\tStatusCode int\n\tStatus     string\n}\n\nfunc (err HTTPError) Error() string {\n\treturn fmt.Sprintf(\"http error: %s\", err.Status)\n}\n\n// Parser is a universal feed parser that detects\n// a given feed type, parsers it, and translates it\n// to the universal feed type.\ntype Parser struct {\n\tAtomTranslator Translator\n\tRSSTranslator  Translator\n\tJSONTranslator Translator\n\tUserAgent      string\n\tAuthConfig     *Auth\n\tClient         *http.Client\n\trp             *rss.Parser\n\tap             *atom.Parser\n\tjp             *json.Parser\n}\n\n// Auth is a structure allowing to\n// use the BasicAuth during the HTTP request\n// It must be instantiated with your new Parser\ntype Auth struct {\n\tUsername string\n\tPassword string\n}\n\n// NewParser creates a universal feed parser.\nfunc NewParser() *Parser {\n\tfp := Parser{\n\t\trp:        &rss.Parser{},\n\t\tap:        &atom.Parser{},\n\t\tjp:        &json.Parser{},\n\t\tUserAgent: \"Gofeed/1.0\",\n\t}\n\treturn &fp\n}\n\n// Parse parses a RSS or Atom or JSON feed into\n// the universal gofeed.Feed.  It takes an\n// io.Reader which should return the xml/json content.\nfunc (f *Parser) Parse(feed io.Reader) (*Feed, error) {\n\t// Wrap the feed io.Reader in a io.TeeReader\n\t// so we can capture all the bytes read by the\n\t// DetectFeedType function and construct a new\n\t// reader with those bytes intact for when we\n\t// attempt to parse the feeds.\n\tvar buf bytes.Buffer\n\ttee := io.TeeReader(feed, &buf)\n\tfeedType := DetectFeedType(tee)\n\n\t// Glue the read bytes from the detect function\n\t// back into a new reader\n\tr := io.MultiReader(&buf, feed)\n\n\tswitch feedType {\n\tcase FeedTypeAtom:\n\t\treturn f.parseAtomFeed(r)\n\tcase FeedTypeRSS:\n\t\treturn f.parseRSSFeed(r)\n\tcase FeedTypeJSON:\n\t\treturn f.parseJSONFeed(r)\n\t}\n\n\treturn nil, ErrFeedTypeNotDetected\n}\n\n// ParseURL fetches the contents of a given url and\n// attempts to parse the response into the universal feed type.\nfunc (f *Parser) ParseURL(feedURL string) (feed *Feed, err error) {\n\treturn f.ParseURLWithContext(feedURL, context.Background())\n}\n\n// ParseURLWithContext fetches contents of a given url and\n// attempts to parse the response into the universal feed type.\n// You can instantiate the Auth structure with your Username and Password\n// to use the BasicAuth during the HTTP call.\n// It will be automatically added to the header of the request\n// Request could be canceled or timeout via given context\nfunc (f *Parser) ParseURLWithContext(feedURL string, ctx context.Context) (feed *Feed, err error) {\n\tclient := f.httpClient()\n\n\treq, err := http.NewRequestWithContext(ctx, \"GET\", feedURL, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", f.UserAgent)\n\n\tif f.AuthConfig != nil && f.AuthConfig.Username != \"\" && f.AuthConfig.Password != \"\" {\n\t\treq.SetBasicAuth(f.AuthConfig.Username, f.AuthConfig.Password)\n\t}\n\n\tresp, err := client.Do(req)\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp != nil {\n\t\tdefer func() {\n\t\t\tce := resp.Body.Close()\n\t\t\tif ce != nil {\n\t\t\t\terr = ce\n\t\t\t}\n\t\t}()\n\t}\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, HTTPError{\n\t\t\tStatusCode: resp.StatusCode,\n\t\t\tStatus:     resp.Status,\n\t\t}\n\t}\n\n\treturn f.Parse(resp.Body)\n}\n\n// ParseString parses a feed XML string and into the\n// universal feed type.\nfunc (f *Parser) ParseString(feed string) (*Feed, error) {\n\treturn f.Parse(strings.NewReader(feed))\n}\n\nfunc (f *Parser) parseAtomFeed(feed io.Reader) (*Feed, error) {\n\taf, err := f.ap.Parse(feed)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn f.atomTrans().Translate(af)\n}\n\nfunc (f *Parser) parseRSSFeed(feed io.Reader) (*Feed, error) {\n\trf, err := f.rp.Parse(feed)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn f.rssTrans().Translate(rf)\n}\n\nfunc (f *Parser) parseJSONFeed(feed io.Reader) (*Feed, error) {\n\tjf, err := f.jp.Parse(feed)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn f.jsonTrans().Translate(jf)\n}\n\nfunc (f *Parser) atomTrans() Translator {\n\tif f.AtomTranslator != nil {\n\t\treturn f.AtomTranslator\n\t}\n\tf.AtomTranslator = &DefaultAtomTranslator{}\n\treturn f.AtomTranslator\n}\n\nfunc (f *Parser) rssTrans() Translator {\n\tif f.RSSTranslator != nil {\n\t\treturn f.RSSTranslator\n\t}\n\tf.RSSTranslator = &DefaultRSSTranslator{}\n\treturn f.RSSTranslator\n}\n\nfunc (f *Parser) jsonTrans() Translator {\n\tif f.JSONTranslator != nil {\n\t\treturn f.JSONTranslator\n\t}\n\tf.JSONTranslator = &DefaultJSONTranslator{}\n\treturn f.JSONTranslator\n}\n\nfunc (f *Parser) httpClient() *http.Client {\n\tif f.Client != nil {\n\t\treturn f.Client\n\t}\n\tf.Client = &http.Client{}\n\treturn f.Client\n}\n"
        },
        {
          "name": "parser_test.go",
          "type": "blob",
          "size": 7.044921875,
          "content": "package gofeed_test\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/mmcdole/gofeed\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestParser_Parse(t *testing.T) {\n\tvar feedTests = []struct {\n\t\tfile      string\n\t\tfeedType  string\n\t\tfeedTitle string\n\t\thasError  bool\n\t}{\n\t\t{\"atom03_feed.xml\", \"atom\", \"Feed Title\", false},\n\t\t{\"atom10_feed.xml\", \"atom\", \"Feed Title\", false},\n\t\t{\"rss_feed.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"rss_feed_bom.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"rss_feed_leading_spaces.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"rdf_feed.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"sample.json\", \"json\", \"title\", false},\n\t\t{\"json10_feed.json\", \"json\", \"title\", false},\n\t\t{\"json11_feed.json\", \"json\", \"title\", false},\n\t\t{\"unknown_feed.xml\", \"\", \"\", true},\n\t\t{\"empty_feed.xml\", \"\", \"\", true},\n\t\t{\"invalid.json\", \"\", \"\", true},\n\t}\n\n\tfor _, test := range feedTests {\n\t\tfmt.Printf(\"Testing %s... \", test.file)\n\n\t\t// Get feed content\n\t\tpath := fmt.Sprintf(\"testdata/parser/universal/%s\", test.file)\n\t\tf, _ := os.ReadFile(path)\n\n\t\t// Get actual value\n\t\tfp := gofeed.NewParser()\n\t\tfeed, err := fp.Parse(bytes.NewReader(f))\n\n\t\tif test.hasError {\n\t\t\tassert.NotNil(t, err)\n\t\t\tassert.Nil(t, feed)\n\t\t} else {\n\t\t\tassert.NotNil(t, feed)\n\t\t\tassert.Nil(t, err)\n\t\t\tassert.Equal(t, feed.FeedType, test.feedType)\n\t\t\tassert.Equal(t, feed.Title, test.feedTitle)\n\t\t}\n\t}\n}\n\nfunc TestParser_ParseString(t *testing.T) {\n\tvar feedTests = []struct {\n\t\tfile      string\n\t\tfeedType  string\n\t\tfeedTitle string\n\t\thasError  bool\n\t}{\n\t\t{\"atom03_feed.xml\", \"atom\", \"Feed Title\", false},\n\t\t{\"atom10_feed.xml\", \"atom\", \"Feed Title\", false},\n\t\t{\"rss_feed.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"rss_feed_bom.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"rss_feed_leading_spaces.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"rdf_feed.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"sample.json\", \"json\", \"title\", false},\n\t\t{\"unknown_feed.xml\", \"\", \"\", true},\n\t\t{\"empty_feed.xml\", \"\", \"\", true},\n\t\t{\"invalid.json\", \"\", \"\", true},\n\t}\n\n\tfor _, test := range feedTests {\n\t\tfmt.Printf(\"Testing %s... \", test.file)\n\n\t\t// Get feed content\n\t\tpath := fmt.Sprintf(\"testdata/parser/universal/%s\", test.file)\n\t\tf, _ := os.ReadFile(path)\n\n\t\t// Get actual value\n\t\tfp := gofeed.NewParser()\n\t\tfeed, err := fp.ParseString(string(f))\n\n\t\tif test.hasError {\n\t\t\tassert.NotNil(t, err)\n\t\t\tassert.Nil(t, feed)\n\t\t} else {\n\t\t\tassert.NotNil(t, feed)\n\t\t\tassert.Nil(t, err)\n\t\t\tassert.Equal(t, feed.FeedType, test.feedType)\n\t\t\tassert.Equal(t, feed.Title, test.feedTitle)\n\t\t}\n\t}\n}\n\nfunc TestParser_ParseURL_Success(t *testing.T) {\n\tvar feedTests = []struct {\n\t\tfile      string\n\t\tfeedType  string\n\t\tfeedTitle string\n\t\thasError  bool\n\t}{\n\t\t{\"atom03_feed.xml\", \"atom\", \"Feed Title\", false},\n\t\t{\"atom10_feed.xml\", \"atom\", \"Feed Title\", false},\n\t\t{\"rss_feed.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"rss_feed_bom.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"rss_feed_leading_spaces.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"rdf_feed.xml\", \"rss\", \"Feed Title\", false},\n\t\t{\"json10_feed.json\", \"json\", \"title\", false},\n\t\t{\"json11_feed.json\", \"json\", \"title\", false},\n\t\t{\"unknown_feed.xml\", \"\", \"\", true},\n\t\t{\"invalid.json\", \"\", \"\", true},\n\t}\n\n\tfor _, test := range feedTests {\n\t\tfmt.Printf(\"Testing %s... \", test.file)\n\n\t\t// Get feed content\n\t\tpath := fmt.Sprintf(\"testdata/parser/universal/%s\", test.file)\n\t\tf, _ := os.ReadFile(path)\n\n\t\t// Get actual value\n\t\tserver, client := mockServerResponse(200, string(f), 0)\n\t\tfp := gofeed.NewParser()\n\t\tfp.Client = client\n\t\tfeed, err := fp.ParseURL(server.URL)\n\n\t\tif test.hasError {\n\t\t\tassert.NotNil(t, err)\n\t\t\tassert.Nil(t, feed)\n\t\t} else {\n\t\t\tassert.NotNil(t, feed)\n\t\t\tassert.Nil(t, err)\n\t\t\tassert.Equal(t, feed.FeedType, test.feedType)\n\t\t\tassert.Equal(t, feed.Title, test.feedTitle)\n\t\t}\n\t}\n}\n\nfunc TestParser_ParseURLWithContext(t *testing.T) {\n\tserver, client := mockServerResponse(404, \"\", 1*time.Minute)\n\tctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n\tdefer cancel()\n\tfp := gofeed.NewParser()\n\tfp.Client = client\n\t_, err := fp.ParseURLWithContext(server.URL, ctx)\n\tassert.True(t, strings.Contains(err.Error(), ctx.Err().Error()))\n}\n\nfunc TestParser_ParseURL_Failure(t *testing.T) {\n\tserver, client := mockServerResponse(404, \"\", 0)\n\tfp := gofeed.NewParser()\n\tfp.Client = client\n\tfeed, err := fp.ParseURL(server.URL)\n\n\tassert.NotNil(t, err)\n\tassert.IsType(t, gofeed.HTTPError{}, err)\n\tassert.Nil(t, feed)\n}\n\nfunc TestParser_ParseURLWithContextAndBasicAuth(t *testing.T) {\n\tserver, client := mockServerResponse(404, \"\", 1*time.Minute)\n\tctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n\tdefer cancel()\n\tfp := gofeed.NewParser()\n\tfp.AuthConfig = &gofeed.Auth{\n\t\tUsername: \"foo\",\n\t\tPassword: \"bar\",\n\t}\n\tfp.Client = client\n\t_, err := fp.ParseURLWithContext(server.URL, ctx)\n\tassert.True(t, strings.Contains(err.Error(), ctx.Err().Error()))\n}\n\n// to detect race conditions, run with go test -race\nfunc TestParser_Concurrent(t *testing.T) {\n\n\tvar feedTests = []string{\"atom03_feed.xml\", \"atom10_feed.xml\", \"rss_feed.xml\", \"rss_feed_bom.xml\",\n\t\t\"rss_feed_leading_spaces.xml\", \"rdf_feed.xml\", \"json10_feed.json\",\n\t\t\"json11_feed.json\"}\n\n\tfp := gofeed.NewParser()\n\tfp.AtomTranslator = &gofeed.DefaultAtomTranslator{}\n\tfp.RSSTranslator = &gofeed.DefaultRSSTranslator{}\n\tfp.JSONTranslator = &gofeed.DefaultJSONTranslator{}\n\twg := sync.WaitGroup{}\n\tfor _, test := range feedTests {\n\t\tfmt.Printf(\"\\nTesting concurrently %s... \", test)\n\n\t\t// Get feed content\n\t\tpath := fmt.Sprintf(\"testdata/parser/universal/%s\", test)\n\t\tf, _ := os.ReadFile(path)\n\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tfp.ParseString(string(f))\n\t\t}()\n\t}\n\twg.Wait()\n}\n\n// Test Helpers\n\nfunc mockServerResponse(code int, body string, delay time.Duration) (*httptest.Server, *http.Client) {\n\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\ttime.Sleep(delay)\n\t\tw.WriteHeader(code)\n\t\tw.Header().Set(\"Content-Type\", \"application/xml\")\n\t\tio.WriteString(w, body)\n\t}))\n\n\ttransport := &http.Transport{\n\t\tProxy: func(req *http.Request) (*url.URL, error) {\n\t\t\treturn url.Parse(server.URL)\n\t\t},\n\t}\n\n\tclient := &http.Client{Transport: transport}\n\treturn server, client\n}\n\n// Examples\n\nfunc ExampleParser_Parse() {\n\tfeedData := `<rss version=\"2.0\">\n<channel>\n<title>Sample Feed</title>\n</channel>\n</rss>`\n\tfp := gofeed.NewParser()\n\tfeed, err := fp.Parse(strings.NewReader(feedData))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(feed.Title)\n}\n\nfunc ExampleParser_ParseURL() {\n\tfp := gofeed.NewParser()\n\tfeed, err := fp.ParseURL(\"http://feeds.twit.tv/twit.xml\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(feed.Title)\n}\n\nfunc ExampleParser_ParseString() {\n\tfeedData := `<rss version=\"2.0\">\n<channel>\n<title>Sample Feed</title>\n</channel>\n</rss>`\n\tfp := gofeed.NewParser()\n\tfeed, err := fp.ParseString(feedData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(feed.Title)\n}\n\nfunc ExampleParserWithBasicAuth_ParseURL() {\n\tfp := gofeed.NewParser()\n\tfp.AuthConfig = &gofeed.Auth{\n\t\tUsername: \"foo\",\n\t\tPassword: \"bar\",\n\t}\n\tfeed, err := fp.ParseURL(\"http://feeds.twit.tv/twit.xml\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(feed.Title)\n}\n"
        },
        {
          "name": "rss",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "translator.go",
          "type": "blob",
          "size": 32.927734375,
          "content": "package gofeed\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/mmcdole/gofeed/atom\"\n\text \"github.com/mmcdole/gofeed/extensions\"\n\t\"github.com/mmcdole/gofeed/internal/shared\"\n\t\"github.com/mmcdole/gofeed/json\"\n\t\"github.com/mmcdole/gofeed/rss\"\n\t\"golang.org/x/net/html\"\n)\n\n// Translator converts a particular feed (atom.Feed or rss.Feed of json.Feed)\n// into the generic Feed struct\ntype Translator interface {\n\tTranslate(feed interface{}) (*Feed, error)\n}\n\n// DefaultRSSTranslator converts an rss.Feed struct\n// into the generic Feed struct.\n//\n// This default implementation defines a set of\n// mapping rules between rss.Feed -> Feed\n// for each of the fields in Feed.\ntype DefaultRSSTranslator struct{}\n\n// Translate converts an RSS feed into the universal\n// feed type.\nfunc (t *DefaultRSSTranslator) Translate(feed interface{}) (*Feed, error) {\n\trss, found := feed.(*rss.Feed)\n\tif !found {\n\t\treturn nil, fmt.Errorf(\"Feed did not match expected type of *rss.Feed\")\n\t}\n\n\tresult := &Feed{}\n\tresult.Title = t.translateFeedTitle(rss)\n\tresult.Description = t.translateFeedDescription(rss)\n\tresult.Link = t.translateFeedLink(rss)\n\tresult.Links = t.translateFeedLinks(rss)\n\tresult.FeedLink = t.translateFeedFeedLink(rss)\n\tresult.Updated = t.translateFeedUpdated(rss)\n\tresult.UpdatedParsed = t.translateFeedUpdatedParsed(rss)\n\tresult.Published = t.translateFeedPublished(rss)\n\tresult.PublishedParsed = t.translateFeedPublishedParsed(rss)\n\tresult.Author = t.translateFeedAuthor(rss)\n\tresult.Authors = t.translateFeedAuthors(rss)\n\tresult.Language = t.translateFeedLanguage(rss)\n\tresult.Image = t.translateFeedImage(rss)\n\tresult.Copyright = t.translateFeedCopyright(rss)\n\tresult.Generator = t.translateFeedGenerator(rss)\n\tresult.Categories = t.translateFeedCategories(rss)\n\tresult.Items = t.translateFeedItems(rss)\n\tresult.ITunesExt = rss.ITunesExt\n\tresult.DublinCoreExt = rss.DublinCoreExt\n\tresult.Extensions = rss.Extensions\n\tresult.FeedVersion = rss.Version\n\tresult.FeedType = \"rss\"\n\treturn result, nil\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedItem(rssItem *rss.Item) (item *Item) {\n\titem = &Item{}\n\titem.Title = t.translateItemTitle(rssItem)\n\titem.Description = t.translateItemDescription(rssItem)\n\titem.Content = t.translateItemContent(rssItem)\n\titem.Link = t.translateItemLink(rssItem)\n\titem.Links = t.translateItemLinks(rssItem)\n\titem.Published = t.translateItemPublished(rssItem)\n\titem.PublishedParsed = t.translateItemPublishedParsed(rssItem)\n\titem.Author = t.translateItemAuthor(rssItem)\n\titem.Authors = t.translateItemAuthors(rssItem)\n\titem.GUID = t.translateItemGUID(rssItem)\n\titem.Image = t.translateItemImage(rssItem)\n\titem.Categories = t.translateItemCategories(rssItem)\n\titem.Enclosures = t.translateItemEnclosures(rssItem)\n\titem.DublinCoreExt = rssItem.DublinCoreExt\n\titem.ITunesExt = rssItem.ITunesExt\n\titem.Extensions = rssItem.Extensions\n\titem.Custom = rssItem.Custom\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedTitle(rss *rss.Feed) (title string) {\n\tif rss.Title != \"\" {\n\t\ttitle = rss.Title\n\t} else if rss.DublinCoreExt != nil && rss.DublinCoreExt.Title != nil {\n\t\ttitle = t.firstEntry(rss.DublinCoreExt.Title)\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedDescription(rss *rss.Feed) (desc string) {\n\tif rss.Description != \"\" {\n\t\tdesc = rss.Description\n\t} else if rss.ITunesExt != nil && rss.ITunesExt.Summary != \"\" {\n\t\tdesc = rss.ITunesExt.Summary\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedLink(rss *rss.Feed) (link string) {\n\tif rss.Link != \"\" {\n\t\tlink = rss.Link\n\t} else if rss.ITunesExt != nil && rss.ITunesExt.Subtitle != \"\" {\n\t\tlink = rss.ITunesExt.Subtitle\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedFeedLink(rss *rss.Feed) (link string) {\n\tatomExtensions := t.extensionsForKeys([]string{\"atom\", \"atom10\", \"atom03\"}, rss.Extensions)\n\tfor _, ex := range atomExtensions {\n\t\tif links, ok := ex[\"link\"]; ok {\n\t\t\tfor _, l := range links {\n\t\t\t\tif l.Attrs[\"rel\"] == \"self\" {\n\t\t\t\t\tlink = l.Attrs[\"href\"]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedLinks(rss *rss.Feed) (links []string) {\n\tif len(rss.Links) > 0 {\n\t\tlinks = append(links, rss.Links...)\n\t}\n\tatomExtensions := t.extensionsForKeys([]string{\"atom\", \"atom10\", \"atom03\"}, rss.Extensions)\n\tfor _, ex := range atomExtensions {\n\t\tif lks, ok := ex[\"link\"]; ok {\n\t\t\tfor _, l := range lks {\n\t\t\t\tif l.Attrs[\"rel\"] == \"\" || l.Attrs[\"rel\"] == \"alternate\" || l.Attrs[\"rel\"] == \"self\" {\n\t\t\t\t\tlinks = append(links, l.Attrs[\"href\"])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedUpdated(rss *rss.Feed) (updated string) {\n\tif rss.LastBuildDate != \"\" {\n\t\tupdated = rss.LastBuildDate\n\t} else if rss.DublinCoreExt != nil && rss.DublinCoreExt.Date != nil {\n\t\tupdated = t.firstEntry(rss.DublinCoreExt.Date)\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedUpdatedParsed(rss *rss.Feed) (updated *time.Time) {\n\tif rss.LastBuildDateParsed != nil {\n\t\tupdated = rss.LastBuildDateParsed\n\t} else if rss.DublinCoreExt != nil && rss.DublinCoreExt.Date != nil {\n\t\tdateText := t.firstEntry(rss.DublinCoreExt.Date)\n\t\tdate, err := shared.ParseDate(dateText)\n\t\tif err == nil {\n\t\t\tupdated = &date\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedPublished(rss *rss.Feed) (published string) {\n\treturn rss.PubDate\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedPublishedParsed(rss *rss.Feed) (published *time.Time) {\n\treturn rss.PubDateParsed\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedAuthor(rss *rss.Feed) (author *Person) {\n\tif rss.ManagingEditor != \"\" {\n\t\tname, address := shared.ParseNameAddress(rss.ManagingEditor)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t} else if rss.WebMaster != \"\" {\n\t\tname, address := shared.ParseNameAddress(rss.WebMaster)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t} else if rss.DublinCoreExt != nil && rss.DublinCoreExt.Author != nil {\n\t\tdcAuthor := t.firstEntry(rss.DublinCoreExt.Author)\n\t\tname, address := shared.ParseNameAddress(dcAuthor)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t} else if rss.DublinCoreExt != nil && rss.DublinCoreExt.Creator != nil {\n\t\tdcCreator := t.firstEntry(rss.DublinCoreExt.Creator)\n\t\tname, address := shared.ParseNameAddress(dcCreator)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t} else if rss.ITunesExt != nil && rss.ITunesExt.Author != \"\" {\n\t\tname, address := shared.ParseNameAddress(rss.ITunesExt.Author)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedAuthors(rss *rss.Feed) (authors []*Person) {\n\tif author := t.translateFeedAuthor(rss); author != nil {\n\t\tauthors = []*Person{author}\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedLanguage(rss *rss.Feed) (language string) {\n\tif rss.Language != \"\" {\n\t\tlanguage = rss.Language\n\t} else if rss.DublinCoreExt != nil && rss.DublinCoreExt.Language != nil {\n\t\tlanguage = t.firstEntry(rss.DublinCoreExt.Language)\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedImage(rss *rss.Feed) *Image {\n\tif rss.Image != nil {\n\t\treturn &Image{\n\t\t\tTitle: rss.Image.Title,\n\t\t\tURL:   rss.Image.URL,\n\t\t}\n\t}\n\tif rss.ITunesExt != nil && rss.ITunesExt.Image != \"\" {\n\t\treturn &Image{URL: rss.ITunesExt.Image}\n\t}\n\tif media, ok := rss.Extensions[\"media\"]; ok {\n\t\tif content, ok := media[\"content\"]; ok {\n\t\t\tfor _, c := range content {\n\t\t\t\tif strings.HasPrefix(c.Attrs[\"type\"], \"image/\") || c.Attrs[\"medium\"] == \"image\" {\n\t\t\t\t\treturn &Image{URL: c.Attrs[\"url\"]}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn firstImageFromHtmlDocument(rss.Description)\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedCopyright(rss *rss.Feed) (rights string) {\n\tif rss.Copyright != \"\" {\n\t\trights = rss.Copyright\n\t} else if rss.DublinCoreExt != nil && rss.DublinCoreExt.Rights != nil {\n\t\trights = t.firstEntry(rss.DublinCoreExt.Rights)\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedGenerator(rss *rss.Feed) (generator string) {\n\treturn rss.Generator\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedCategories(rss *rss.Feed) (categories []string) {\n\tcats := []string{}\n\tif rss.Categories != nil {\n\t\tfor _, c := range rss.Categories {\n\t\t\tcats = append(cats, c.Value)\n\t\t}\n\t}\n\n\tif rss.ITunesExt != nil && rss.ITunesExt.Keywords != \"\" {\n\t\tkeywords := strings.Split(rss.ITunesExt.Keywords, \",\")\n\t\tcats = append(cats, keywords...)\n\t}\n\n\tif rss.ITunesExt != nil && rss.ITunesExt.Categories != nil {\n\t\tfor _, c := range rss.ITunesExt.Categories {\n\t\t\tcats = append(cats, c.Text)\n\t\t\tif c.Subcategory != nil {\n\t\t\t\tcats = append(cats, c.Subcategory.Text)\n\t\t\t}\n\t\t}\n\t}\n\n\tif rss.DublinCoreExt != nil && rss.DublinCoreExt.Subject != nil {\n\t\tcats = append(cats, rss.DublinCoreExt.Subject...)\n\t}\n\n\tif len(cats) > 0 {\n\t\tcategories = cats\n\t}\n\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateFeedItems(rss *rss.Feed) (items []*Item) {\n\titems = []*Item{}\n\tfor _, i := range rss.Items {\n\t\titems = append(items, t.translateFeedItem(i))\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateItemTitle(rssItem *rss.Item) (title string) {\n\tif rssItem.Title != \"\" {\n\t\ttitle = rssItem.Title\n\t} else if rssItem.DublinCoreExt != nil && rssItem.DublinCoreExt.Title != nil {\n\t\ttitle = t.firstEntry(rssItem.DublinCoreExt.Title)\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateItemDescription(rssItem *rss.Item) (desc string) {\n\tif rssItem.Description != \"\" {\n\t\tdesc = rssItem.Description\n\t} else if rssItem.DublinCoreExt != nil && rssItem.DublinCoreExt.Description != nil {\n\t\tdesc = t.firstEntry(rssItem.DublinCoreExt.Description)\n\t} else if rssItem.ITunesExt != nil && rssItem.ITunesExt.Summary != \"\" {\n\t\tdesc = rssItem.ITunesExt.Summary\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateItemContent(rssItem *rss.Item) (content string) {\n\treturn rssItem.Content\n}\n\nfunc (t *DefaultRSSTranslator) translateItemLink(rssItem *rss.Item) (link string) {\n\treturn rssItem.Link\n}\n\nfunc (t *DefaultRSSTranslator) translateItemLinks(rssItem *rss.Item) (links []string) {\n\tif len(rssItem.Links) > 0 {\n\t\tlinks = append(links, rssItem.Links...)\n\t}\n\treturn links\n}\n\nfunc (t *DefaultRSSTranslator) translateItemUpdated(rssItem *rss.Item) (updated string) {\n\tif rssItem.DublinCoreExt != nil && rssItem.DublinCoreExt.Date != nil {\n\t\tupdated = t.firstEntry(rssItem.DublinCoreExt.Date)\n\t}\n\treturn updated\n}\n\nfunc (t *DefaultRSSTranslator) translateItemUpdatedParsed(rssItem *rss.Item) (updated *time.Time) {\n\tif rssItem.DublinCoreExt != nil && rssItem.DublinCoreExt.Date != nil {\n\t\tupdatedText := t.firstEntry(rssItem.DublinCoreExt.Date)\n\t\tupdatedDate, err := shared.ParseDate(updatedText)\n\t\tif err == nil {\n\t\t\tupdated = &updatedDate\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateItemPublished(rssItem *rss.Item) (pubDate string) {\n\tif rssItem.PubDate != \"\" {\n\t\treturn rssItem.PubDate\n\t} else if rssItem.DublinCoreExt != nil && rssItem.DublinCoreExt.Date != nil {\n\t\treturn t.firstEntry(rssItem.DublinCoreExt.Date)\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateItemPublishedParsed(rssItem *rss.Item) (pubDate *time.Time) {\n\tif rssItem.PubDateParsed != nil {\n\t\treturn rssItem.PubDateParsed\n\t} else if rssItem.DublinCoreExt != nil && rssItem.DublinCoreExt.Date != nil {\n\t\tpubDateText := t.firstEntry(rssItem.DublinCoreExt.Date)\n\t\tpubDateParsed, err := shared.ParseDate(pubDateText)\n\t\tif err == nil {\n\t\t\tpubDate = &pubDateParsed\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateItemAuthor(rssItem *rss.Item) (author *Person) {\n\tif rssItem.Author != \"\" {\n\t\tname, address := shared.ParseNameAddress(rssItem.Author)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t} else if rssItem.DublinCoreExt != nil && rssItem.DublinCoreExt.Author != nil {\n\t\tdcAuthor := t.firstEntry(rssItem.DublinCoreExt.Author)\n\t\tname, address := shared.ParseNameAddress(dcAuthor)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t} else if rssItem.DublinCoreExt != nil && rssItem.DublinCoreExt.Creator != nil {\n\t\tdcCreator := t.firstEntry(rssItem.DublinCoreExt.Creator)\n\t\tname, address := shared.ParseNameAddress(dcCreator)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t} else if rssItem.ITunesExt != nil && rssItem.ITunesExt.Author != \"\" {\n\t\tname, address := shared.ParseNameAddress(rssItem.ITunesExt.Author)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateItemAuthors(rssItem *rss.Item) (authors []*Person) {\n\tif author := t.translateItemAuthor(rssItem); author != nil {\n\t\tauthors = []*Person{author}\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateItemGUID(rssItem *rss.Item) (guid string) {\n\tif rssItem.GUID != nil {\n\t\tguid = rssItem.GUID.Value\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateItemImage(rssItem *rss.Item) *Image {\n\tif rssItem.ITunesExt != nil && rssItem.ITunesExt.Image != \"\" {\n\t\treturn &Image{URL: rssItem.ITunesExt.Image}\n\t}\n\tif media, ok := rssItem.Extensions[\"media\"]; ok {\n\t\tif content, ok := media[\"content\"]; ok {\n\t\t\tfor _, c := range content {\n\t\t\t\tif strings.Contains(c.Attrs[\"type\"], \"image\") || strings.Contains(c.Attrs[\"medium\"], \"image\") {\n\t\t\t\t\treturn &Image{URL: c.Attrs[\"url\"]}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor _, enc := range rssItem.Enclosures {\n\t\tif strings.HasPrefix(enc.Type, \"image/\") {\n\t\t\treturn &Image{URL: enc.URL}\n\t\t}\n\t}\n\tif img := firstImageFromHtmlDocument(rssItem.Content); img != nil {\n\t\treturn img\n\t}\n\tif img := firstImageFromHtmlDocument(rssItem.Description); img != nil {\n\t\treturn img\n\t}\n\treturn nil\n}\n\nfunc firstImageFromHtmlDocument(document string) *Image {\n\tif doc, err := html.Parse(bytes.NewBufferString(document)); err == nil {\n\t\tdoc := goquery.NewDocumentFromNode(doc)\n\t\tfor _, node := range doc.FindMatcher(goquery.Single(\"img[src]\")).Nodes {\n\t\t\tfor _, attr := range node.Attr {\n\t\t\t\tif attr.Key == \"src\" {\n\t\t\t\t\treturn &Image{\n\t\t\t\t\t\tURL: attr.Val,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (t *DefaultRSSTranslator) translateItemCategories(rssItem *rss.Item) (categories []string) {\n\tcats := []string{}\n\tif rssItem.Categories != nil {\n\t\tfor _, c := range rssItem.Categories {\n\t\t\tcats = append(cats, c.Value)\n\t\t}\n\t}\n\n\tif rssItem.ITunesExt != nil && rssItem.ITunesExt.Keywords != \"\" {\n\t\tkeywords := strings.Split(rssItem.ITunesExt.Keywords, \",\")\n\t\tcats = append(cats, keywords...)\n\t}\n\n\tif rssItem.DublinCoreExt != nil && rssItem.DublinCoreExt.Subject != nil {\n\t\tcats = append(cats, rssItem.DublinCoreExt.Subject...)\n\t}\n\n\tif len(cats) > 0 {\n\t\tcategories = cats\n\t}\n\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) translateItemEnclosures(rssItem *rss.Item) (enclosures []*Enclosure) {\n\tif rssItem.Enclosures != nil && len(rssItem.Enclosures) > 0 {\n\t\t// Accumulate the enclosures\n\t\tfor _, enc := range rssItem.Enclosures {\n\t\t\te := &Enclosure{}\n\t\t\te.URL = enc.URL\n\t\t\te.Type = enc.Type\n\t\t\te.Length = enc.Length\n\t\t\tenclosures = append(enclosures, e)\n\t\t}\n\t}\n\n\tif len(enclosures) == 0 {\n\t\tenclosures = nil\n\t}\n\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) extensionsForKeys(keys []string, extensions ext.Extensions) (matches []map[string][]ext.Extension) {\n\tmatches = []map[string][]ext.Extension{}\n\n\tif extensions == nil {\n\t\treturn\n\t}\n\n\tfor _, key := range keys {\n\t\tif match, ok := extensions[key]; ok {\n\t\t\tmatches = append(matches, match)\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultRSSTranslator) firstEntry(entries []string) (value string) {\n\tif entries == nil {\n\t\treturn\n\t}\n\n\tif len(entries) == 0 {\n\t\treturn\n\t}\n\n\treturn entries[0]\n}\n\n// DefaultAtomTranslator converts an atom.Feed struct\n// into the generic Feed struct.\n//\n// This default implementation defines a set of\n// mapping rules between atom.Feed -> Feed\n// for each of the fields in Feed.\ntype DefaultAtomTranslator struct{}\n\n// Translate converts an Atom feed into the universal\n// feed type.\nfunc (t *DefaultAtomTranslator) Translate(feed interface{}) (*Feed, error) {\n\tatom, found := feed.(*atom.Feed)\n\tif !found {\n\t\treturn nil, fmt.Errorf(\"Feed did not match expected type of *atom.Feed\")\n\t}\n\n\tresult := &Feed{}\n\tresult.Title = t.translateFeedTitle(atom)\n\tresult.Description = t.translateFeedDescription(atom)\n\tresult.Link = t.translateFeedLink(atom)\n\tresult.FeedLink = t.translateFeedFeedLink(atom)\n\tresult.Links = t.translateFeedLinks(atom)\n\tresult.Updated = t.translateFeedUpdated(atom)\n\tresult.UpdatedParsed = t.translateFeedUpdatedParsed(atom)\n\tresult.Author = t.translateFeedAuthor(atom)\n\tresult.Authors = t.translateFeedAuthors(atom)\n\tresult.Language = t.translateFeedLanguage(atom)\n\tresult.Image = t.translateFeedImage(atom)\n\tresult.Copyright = t.translateFeedCopyright(atom)\n\tresult.Categories = t.translateFeedCategories(atom)\n\tresult.Generator = t.translateFeedGenerator(atom)\n\tresult.Items = t.translateFeedItems(atom)\n\tresult.Extensions = atom.Extensions\n\tresult.FeedVersion = atom.Version\n\tresult.FeedType = \"atom\"\n\treturn result, nil\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedItem(entry *atom.Entry) (item *Item) {\n\titem = &Item{}\n\titem.Title = t.translateItemTitle(entry)\n\titem.Description = t.translateItemDescription(entry)\n\titem.Content = t.translateItemContent(entry)\n\titem.Link = t.translateItemLink(entry)\n\titem.Links = t.translateItemLinks(entry)\n\titem.Updated = t.translateItemUpdated(entry)\n\titem.UpdatedParsed = t.translateItemUpdatedParsed(entry)\n\titem.Published = t.translateItemPublished(entry)\n\titem.PublishedParsed = t.translateItemPublishedParsed(entry)\n\titem.Author = t.translateItemAuthor(entry)\n\titem.Authors = t.translateItemAuthors(entry)\n\titem.GUID = t.translateItemGUID(entry)\n\titem.Image = t.translateItemImage(entry)\n\titem.Categories = t.translateItemCategories(entry)\n\titem.Enclosures = t.translateItemEnclosures(entry)\n\titem.Extensions = entry.Extensions\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedTitle(atom *atom.Feed) (title string) {\n\treturn atom.Title\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedDescription(atom *atom.Feed) (desc string) {\n\treturn atom.Subtitle\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedLink(atom *atom.Feed) (link string) {\n\tl := t.firstLinkWithType(\"alternate\", atom.Links)\n\tif l != nil {\n\t\tlink = l.Href\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedFeedLink(atom *atom.Feed) (link string) {\n\tfeedLink := t.firstLinkWithType(\"self\", atom.Links)\n\tif feedLink != nil {\n\t\tlink = feedLink.Href\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedLinks(atom *atom.Feed) (links []string) {\n\tfor _, l := range atom.Links {\n\t\tif l.Rel == \"\" || l.Rel == \"alternate\" || l.Rel == \"self\" {\n\t\t\tlinks = append(links, l.Href)\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedUpdated(atom *atom.Feed) (updated string) {\n\treturn atom.Updated\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedUpdatedParsed(atom *atom.Feed) (updated *time.Time) {\n\treturn atom.UpdatedParsed\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedAuthor(atom *atom.Feed) (author *Person) {\n\ta := t.firstPerson(atom.Authors)\n\tif a != nil {\n\t\tfeedAuthor := Person{}\n\t\tfeedAuthor.Name = a.Name\n\t\tfeedAuthor.Email = a.Email\n\t\tauthor = &feedAuthor\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedAuthors(atom *atom.Feed) (authors []*Person) {\n\tif atom.Authors != nil {\n\t\tauthors = []*Person{}\n\n\t\tfor _, a := range atom.Authors {\n\t\t\tauthors = append(authors, &Person{\n\t\t\t\tName:  a.Name,\n\t\t\t\tEmail: a.Email,\n\t\t\t})\n\t\t}\n\t}\n\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedLanguage(atom *atom.Feed) (language string) {\n\treturn atom.Language\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedImage(atom *atom.Feed) (image *Image) {\n\tif atom.Logo != \"\" {\n\t\tfeedImage := Image{}\n\t\tfeedImage.URL = atom.Logo\n\t\timage = &feedImage\n\t} else if atom.Icon != \"\" {\n\t\tfeedImage := Image{}\n\t\tfeedImage.URL = atom.Icon\n\t\timage = &feedImage\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedCopyright(atom *atom.Feed) (rights string) {\n\treturn atom.Rights\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedGenerator(atom *atom.Feed) (generator string) {\n\tif atom.Generator != nil {\n\t\tif atom.Generator.Value != \"\" {\n\t\t\tgenerator += atom.Generator.Value\n\t\t}\n\t\tif atom.Generator.Version != \"\" {\n\t\t\tgenerator += \" v\" + atom.Generator.Version\n\t\t}\n\t\tif atom.Generator.URI != \"\" {\n\t\t\tgenerator += \" \" + atom.Generator.URI\n\t\t}\n\t\tgenerator = strings.TrimSpace(generator)\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedCategories(atom *atom.Feed) (categories []string) {\n\tif atom.Categories != nil {\n\t\tcategories = []string{}\n\t\tfor _, c := range atom.Categories {\n\t\t\tif c.Label != \"\" {\n\t\t\t\tcategories = append(categories, c.Label)\n\t\t\t} else {\n\t\t\t\tcategories = append(categories, c.Term)\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateFeedItems(atom *atom.Feed) (items []*Item) {\n\titems = []*Item{}\n\tfor _, entry := range atom.Entries {\n\t\titems = append(items, t.translateFeedItem(entry))\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateItemTitle(entry *atom.Entry) (title string) {\n\treturn entry.Title\n}\n\nfunc (t *DefaultAtomTranslator) translateItemDescription(entry *atom.Entry) (desc string) {\n\treturn entry.Summary\n}\n\nfunc (t *DefaultAtomTranslator) translateItemContent(entry *atom.Entry) (content string) {\n\tif entry.Content != nil {\n\t\tcontent = entry.Content.Value\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateItemLink(entry *atom.Entry) (link string) {\n\tl := t.firstLinkWithType(\"alternate\", entry.Links)\n\tif l != nil {\n\t\tlink = l.Href\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateItemLinks(entry *atom.Entry) (links []string) {\n\tfor _, l := range entry.Links {\n\t\tif l.Rel == \"\" || l.Rel == \"alternate\" || l.Rel == \"self\" {\n\t\t\tlinks = append(links, l.Href)\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateItemUpdated(entry *atom.Entry) (updated string) {\n\treturn entry.Updated\n}\n\nfunc (t *DefaultAtomTranslator) translateItemUpdatedParsed(entry *atom.Entry) (updated *time.Time) {\n\treturn entry.UpdatedParsed\n}\n\nfunc (t *DefaultAtomTranslator) translateItemPublished(entry *atom.Entry) (published string) {\n\tpublished = entry.Published\n\tif published == \"\" {\n\t\tpublished = entry.Updated\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateItemPublishedParsed(entry *atom.Entry) (published *time.Time) {\n\tpublished = entry.PublishedParsed\n\tif published == nil {\n\t\tpublished = entry.UpdatedParsed\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateItemAuthor(entry *atom.Entry) (author *Person) {\n\ta := t.firstPerson(entry.Authors)\n\tif a != nil {\n\t\tauthor = &Person{}\n\t\tauthor.Name = a.Name\n\t\tauthor.Email = a.Email\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateItemAuthors(entry *atom.Entry) (authors []*Person) {\n\tif entry.Authors != nil {\n\t\tauthors = []*Person{}\n\t\tfor _, a := range entry.Authors {\n\t\t\tauthors = append(authors, &Person{\n\t\t\t\tName:  a.Name,\n\t\t\t\tEmail: a.Email,\n\t\t\t})\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateItemGUID(entry *atom.Entry) (guid string) {\n\treturn entry.ID\n}\n\nfunc (t *DefaultAtomTranslator) translateItemImage(entry *atom.Entry) (image *Image) {\n\treturn nil\n}\n\nfunc (t *DefaultAtomTranslator) translateItemCategories(entry *atom.Entry) (categories []string) {\n\tif entry.Categories != nil {\n\t\tcategories = []string{}\n\t\tfor _, c := range entry.Categories {\n\t\t\tif c.Label != \"\" {\n\t\t\t\tcategories = append(categories, c.Label)\n\t\t\t} else {\n\t\t\t\tcategories = append(categories, c.Term)\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) translateItemEnclosures(entry *atom.Entry) (enclosures []*Enclosure) {\n\tif entry.Links != nil {\n\t\tenclosures = []*Enclosure{}\n\t\tfor _, e := range entry.Links {\n\t\t\tif e.Rel == \"enclosure\" {\n\t\t\t\tenclosure := &Enclosure{}\n\t\t\t\tenclosure.URL = e.Href\n\t\t\t\tenclosure.Length = e.Length\n\t\t\t\tenclosure.Type = e.Type\n\t\t\t\tenclosures = append(enclosures, enclosure)\n\t\t\t}\n\t\t}\n\n\t\tif len(enclosures) == 0 {\n\t\t\tenclosures = nil\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultAtomTranslator) firstLinkWithType(linkType string, links []*atom.Link) *atom.Link {\n\tif links == nil {\n\t\treturn nil\n\t}\n\n\tfor _, link := range links {\n\t\tif link.Rel == linkType {\n\t\t\treturn link\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (t *DefaultAtomTranslator) firstPerson(persons []*atom.Person) (person *atom.Person) {\n\tif persons == nil || len(persons) == 0 {\n\t\treturn\n\t}\n\n\tperson = persons[0]\n\treturn\n}\n\n// DefaultJSONTranslator converts an json.Feed struct\n// into the generic Feed struct.\n//\n// This default implementation defines a set of\n// mapping rules between json.Feed -> Feed\n// for each of the fields in Feed.\ntype DefaultJSONTranslator struct{}\n\n// Translate converts an JSON feed into the universal\n// feed type.\nfunc (t *DefaultJSONTranslator) Translate(feed interface{}) (*Feed, error) {\n\tjson, found := feed.(*json.Feed)\n\tif !found {\n\t\treturn nil, fmt.Errorf(\"Feed did not match expected type of *json.Feed\")\n\t}\n\n\tresult := &Feed{}\n\tresult.FeedVersion = json.Version\n\tresult.Title = t.translateFeedTitle(json)\n\tresult.Link = t.translateFeedLink(json)\n\tresult.FeedLink = t.translateFeedFeedLink(json)\n\tresult.Links = t.translateFeedLinks(json)\n\tresult.Description = t.translateFeedDescription(json)\n\tresult.Image = t.translateFeedImage(json)\n\tresult.Author = t.translateFeedAuthor(json)\n\tresult.Authors = t.translateFeedAuthors(json)\n\tresult.Language = t.translateFeedLanguage(json)\n\tresult.Items = t.translateFeedItems(json)\n\tresult.Updated = t.translateFeedUpdated(json)\n\tresult.UpdatedParsed = t.translateFeedUpdatedParsed(json)\n\tresult.Published = t.translateFeedPublished(json)\n\tresult.PublishedParsed = t.translateFeedPublishedParsed(json)\n\tresult.FeedType = \"json\"\n\t// TODO UserComment is missing in global Feed\n\t// TODO NextURL is missing in global Feed\n\t// TODO Favicon is missing in global Feed\n\t// TODO Exipred is missing in global Feed\n\t// TODO Hubs is not supported in json.Feed\n\t// TODO Extensions is not supported in json.Feed\n\treturn result, nil\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedItem(jsonItem *json.Item) (item *Item) {\n\titem = &Item{}\n\titem.GUID = t.translateItemGUID(jsonItem)\n\titem.Link = t.translateItemLink(jsonItem)\n\titem.Links = t.translateItemLinks(jsonItem)\n\titem.Title = t.translateItemTitle(jsonItem)\n\titem.Content = t.translateItemContent(jsonItem)\n\titem.Description = t.translateItemDescription(jsonItem)\n\titem.Image = t.translateItemImage(jsonItem)\n\titem.Published = t.translateItemPublished(jsonItem)\n\titem.PublishedParsed = t.translateItemPublishedParsed(jsonItem)\n\titem.Updated = t.translateItemUpdated(jsonItem)\n\titem.UpdatedParsed = t.translateItemUpdatedParsed(jsonItem)\n\titem.Author = t.translateItemAuthor(jsonItem)\n\titem.Authors = t.translateItemAuthors(jsonItem)\n\titem.Categories = t.translateItemCategories(jsonItem)\n\titem.Enclosures = t.translateItemEnclosures(jsonItem)\n\t// TODO ExternalURL is missing in global Feed\n\t// TODO BannerImage is missing in global Feed\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedTitle(json *json.Feed) (title string) {\n\tif json.Title != \"\" {\n\t\ttitle = json.Title\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedDescription(json *json.Feed) (desc string) {\n\treturn json.Description\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedLink(json *json.Feed) (link string) {\n\tif json.HomePageURL != \"\" {\n\t\tlink = json.HomePageURL\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedFeedLink(json *json.Feed) (link string) {\n\tif json.FeedURL != \"\" {\n\t\tlink = json.FeedURL\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedLinks(json *json.Feed) (links []string) {\n\tif json.HomePageURL != \"\" {\n\t\tlinks = append(links, json.HomePageURL)\n\t}\n\tif json.FeedURL != \"\" {\n\t\tlinks = append(links, json.FeedURL)\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedUpdated(json *json.Feed) (updated string) {\n\tif len(json.Items) > 0 {\n\t\tupdated = json.Items[0].DateModified\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedUpdatedParsed(json *json.Feed) (updated *time.Time) {\n\tif len(json.Items) > 0 {\n\t\tupdateTime, err := shared.ParseDate(json.Items[0].DateModified)\n\t\tif err == nil {\n\t\t\tupdated = &updateTime\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedPublished(json *json.Feed) (published string) {\n\tif len(json.Items) > 0 {\n\t\tpublished = json.Items[0].DatePublished\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedPublishedParsed(json *json.Feed) (published *time.Time) {\n\tif len(json.Items) > 0 {\n\t\tpublishTime, err := shared.ParseDate(json.Items[0].DatePublished)\n\t\tif err == nil {\n\t\t\tpublished = &publishTime\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedAuthor(json *json.Feed) (author *Person) {\n\tif json.Author != nil {\n\t\tname, address := shared.ParseNameAddress(json.Author.Name)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t}\n\t// Author.URL is missing in global feed\n\t// Author.Avatar is missing in global feed\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedAuthors(json *json.Feed) (authors []*Person) {\n\tif json.Authors != nil {\n\t\tauthors = []*Person{}\n\t\tfor _, a := range json.Authors {\n\t\t\tname, address := shared.ParseNameAddress(a.Name)\n\t\t\tauthor := &Person{}\n\t\t\tauthor.Name = name\n\t\t\tauthor.Email = address\n\n\t\t\tauthors = append(authors, author)\n\t\t}\n\t} else if author := t.translateFeedAuthor(json); author != nil {\n\t\tauthors = []*Person{author}\n\t}\n\t// Author.URL is missing in global feed\n\t// Author.Avatar is missing in global feed\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedLanguage(json *json.Feed) (language string) {\n\tlanguage = json.Language\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedImage(json *json.Feed) (image *Image) {\n\t// Using the Icon rather than the image\n\t// icon (optional, string) is the URL of an image for the feed suitable to be used in a timeline. It should be square and relatively large — such as 512 x 512\n\tif json.Icon != \"\" {\n\t\timage = &Image{}\n\t\timage.URL = json.Icon\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateFeedItems(json *json.Feed) (items []*Item) {\n\titems = []*Item{}\n\tfor _, i := range json.Items {\n\t\titems = append(items, t.translateFeedItem(i))\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemTitle(jsonItem *json.Item) (title string) {\n\tif jsonItem.Title != \"\" {\n\t\ttitle = jsonItem.Title\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemDescription(jsonItem *json.Item) (desc string) {\n\tif jsonItem.Summary != \"\" {\n\t\tdesc = jsonItem.Summary\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemContent(jsonItem *json.Item) (content string) {\n\tif jsonItem.ContentHTML != \"\" {\n\t\tcontent = jsonItem.ContentHTML\n\t} else if jsonItem.ContentText != \"\" {\n\t\tcontent = jsonItem.ContentText\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemLink(jsonItem *json.Item) (link string) {\n\treturn jsonItem.URL\n}\n\nfunc (t *DefaultJSONTranslator) translateItemLinks(jsonItem *json.Item) (links []string) {\n\tif jsonItem.URL != \"\" {\n\t\tlinks = append(links, jsonItem.URL)\n\t}\n\tif jsonItem.ExternalURL != \"\" {\n\t\tlinks = append(links, jsonItem.ExternalURL)\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemUpdated(jsonItem *json.Item) (updated string) {\n\tif jsonItem.DateModified != \"\" {\n\t\tupdated = jsonItem.DateModified\n\t}\n\treturn updated\n}\n\nfunc (t *DefaultJSONTranslator) translateItemUpdatedParsed(jsonItem *json.Item) (updated *time.Time) {\n\tif jsonItem.DateModified != \"\" {\n\t\tupdatedTime, err := shared.ParseDate(jsonItem.DateModified)\n\t\tif err == nil {\n\t\t\tupdated = &updatedTime\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemPublished(jsonItem *json.Item) (pubDate string) {\n\tif jsonItem.DatePublished != \"\" {\n\t\tpubDate = jsonItem.DatePublished\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemPublishedParsed(jsonItem *json.Item) (pubDate *time.Time) {\n\tif jsonItem.DatePublished != \"\" {\n\t\tpublishTime, err := shared.ParseDate(jsonItem.DatePublished)\n\t\tif err == nil {\n\t\t\tpubDate = &publishTime\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemAuthor(jsonItem *json.Item) (author *Person) {\n\tif jsonItem.Author != nil {\n\t\tname, address := shared.ParseNameAddress(jsonItem.Author.Name)\n\t\tauthor = &Person{}\n\t\tauthor.Name = name\n\t\tauthor.Email = address\n\t}\n\t// Author.URL is missing in global feed\n\t// Author.Avatar is missing in global feed\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemAuthors(jsonItem *json.Item) (authors []*Person) {\n\tif jsonItem.Authors != nil {\n\t\tauthors = []*Person{}\n\t\tfor _, a := range jsonItem.Authors {\n\t\t\tname, address := shared.ParseNameAddress(a.Name)\n\t\t\tauthor := &Person{}\n\t\t\tauthor.Name = name\n\t\t\tauthor.Email = address\n\n\t\t\tauthors = append(authors, author)\n\t\t}\n\t} else if author := t.translateItemAuthor(jsonItem); author != nil {\n\t\tauthors = []*Person{author}\n\t}\n\t// Author.URL is missing in global feed\n\t// Author.Avatar is missing in global feed\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemGUID(jsonItem *json.Item) (guid string) {\n\tif jsonItem.ID != \"\" {\n\t\tguid = jsonItem.ID\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemImage(jsonItem *json.Item) (image *Image) {\n\tif jsonItem.Image != \"\" {\n\t\timage = &Image{}\n\t\timage.URL = jsonItem.Image\n\t} else if jsonItem.BannerImage != \"\" {\n\t\timage = &Image{}\n\t\timage.URL = jsonItem.BannerImage\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemCategories(jsonItem *json.Item) (categories []string) {\n\tif len(jsonItem.Tags) > 0 {\n\t\tcategories = jsonItem.Tags\n\t}\n\treturn\n}\n\nfunc (t *DefaultJSONTranslator) translateItemEnclosures(jsonItem *json.Item) (enclosures []*Enclosure) {\n\tif jsonItem.Attachments != nil {\n\t\tfor _, attachment := range *jsonItem.Attachments {\n\t\t\te := &Enclosure{}\n\t\t\te.URL = attachment.URL\n\t\t\te.Type = attachment.MimeType\n\t\t\te.Length = fmt.Sprintf(\"%d\", attachment.DurationInSeconds)\n\t\t\t// Title is not defined in global enclosure\n\t\t\t// SizeInBytes is not defined in global enclosure\n\t\t\tenclosures = append(enclosures, e)\n\t\t}\n\t}\n\treturn\n}\n"
        },
        {
          "name": "translator_test.go",
          "type": "blob",
          "size": 7.326171875,
          "content": "package gofeed_test\n\nimport (\n\tjsonEncoding \"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/mmcdole/gofeed\"\n\t\"github.com/mmcdole/gofeed/atom\"\n\t\"github.com/mmcdole/gofeed/json\"\n\t\"github.com/mmcdole/gofeed/rss\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestDefaultRSSTranslator_Translate(t *testing.T) {\n\tfiles, _ := filepath.Glob(\"testdata/translator/rss/*.xml\")\n\tfor _, f := range files {\n\t\tbase := filepath.Base(f)\n\t\tname := strings.TrimSuffix(base, filepath.Ext(base))\n\n\t\tfmt.Printf(\"Testing %s... \", name)\n\n\t\t// Get actual source feed\n\t\tff := fmt.Sprintf(\"testdata/translator/rss/%s.xml\", name)\n\t\tf, _ := os.Open(ff)\n\t\tdefer f.Close()\n\n\t\t// Parse actual feed\n\t\ttranslator := &gofeed.DefaultRSSTranslator{}\n\t\tfp := &rss.Parser{}\n\t\trssFeed, _ := fp.Parse(f)\n\t\tactual, _ := translator.Translate(rssFeed)\n\n\t\t// Get json encoded expected feed result\n\t\tef := fmt.Sprintf(\"testdata/translator/rss/%s.json\", name)\n\t\te, _ := os.ReadFile(ef)\n\n\t\t// Unmarshal expected feed\n\t\texpected := &gofeed.Feed{}\n\t\tjsonEncoding.Unmarshal(e, &expected)\n\n\t\tif assert.Equal(t, expected, actual, \"Feed file %s.xml did not match expected output %s.json\", name, name) {\n\t\t\tfmt.Printf(\"OK\\n\")\n\t\t} else {\n\t\t\tfmt.Printf(\"Failed\\n\")\n\t\t}\n\t}\n}\n\nfunc TestDefaultRSSTranslator_Translate_WrongType(t *testing.T) {\n\ttranslator := &gofeed.DefaultRSSTranslator{}\n\taf, err := translator.Translate(\"wrong type\")\n\tassert.Nil(t, af)\n\tassert.NotNil(t, err)\n}\n\nfunc TestDefaultAtomTranslator_Translate(t *testing.T) {\n\tfiles, _ := filepath.Glob(\"testdata/translator/atom/*.xml\")\n\tfor _, f := range files {\n\t\tbase := filepath.Base(f)\n\t\tname := strings.TrimSuffix(base, filepath.Ext(base))\n\n\t\tfmt.Printf(\"Testing %s... \", name)\n\n\t\t// Get actual source feed\n\t\tff := fmt.Sprintf(\"testdata/translator/atom/%s.xml\", name)\n\t\tf, _ := os.Open(ff)\n\t\tdefer f.Close()\n\n\t\t// Parse actual feed\n\t\ttranslator := &gofeed.DefaultAtomTranslator{}\n\t\tfp := &atom.Parser{}\n\t\tatomFeed, _ := fp.Parse(f)\n\t\tactual, _ := translator.Translate(atomFeed)\n\n\t\t// Get json encoded expected feed result\n\t\tef := fmt.Sprintf(\"testdata/translator/atom/%s.json\", name)\n\t\te, _ := os.ReadFile(ef)\n\n\t\t// Unmarshal expected feed\n\t\texpected := &gofeed.Feed{}\n\t\tjsonEncoding.Unmarshal(e, &expected)\n\n\t\tif assert.Equal(t, expected, actual, \"Feed file %s.xml did not match expected output %s.json\", name, name) {\n\t\t\tfmt.Printf(\"OK\\n\")\n\t\t} else {\n\t\t\tfmt.Printf(\"Failed\\n\")\n\t\t}\n\t}\n}\n\nfunc TestDefaultAtomTranslator_Translate_WrongType(t *testing.T) {\n\ttranslator := &gofeed.DefaultAtomTranslator{}\n\taf, err := translator.Translate(\"wrong type\")\n\tassert.Nil(t, af)\n\tassert.NotNil(t, err)\n}\n\nfunc TestDefaultJSONTranslator_Translate(t *testing.T) {\n\tfiles, _ := filepath.Glob(\"testdata/translator/json/*.json\")\n\tfor _, f := range files {\n\t\tbase := filepath.Base(f)\n\t\tname := strings.TrimSuffix(base, filepath.Ext(base))\n\n\t\tif strings.HasSuffix(name, \"expected\") {\n\t\t\tcontinue\n\t\t}\n\n\t\tfmt.Printf(\"Testing %s... \", name)\n\n\t\t// Get actual source feed\n\t\tff := fmt.Sprintf(\"testdata/translator/json/%s.json\", name)\n\t\tf, _ := os.Open(ff)\n\t\tdefer f.Close()\n\n\t\t// Parse actual feed\n\t\ttranslator := &gofeed.DefaultJSONTranslator{}\n\t\tfp := json.Parser{}\n\t\tjsonFeed, _ := fp.Parse(f)\n\t\tactual, _ := translator.Translate(jsonFeed)\n\n\t\t// Get json encoded expected feed result\n\t\tef := fmt.Sprintf(\"testdata/translator/json/%s_expected.json\", name)\n\t\te, _ := os.ReadFile(ef)\n\n\t\t// Unmarshal expected feed\n\t\texpected := &gofeed.Feed{}\n\t\tjsonEncoding.Unmarshal(e, &expected)\n\n\t\tif assert.Equal(t, expected, actual, \"Feed file %s.json did not match expected output %s_expected.json\", name, name) {\n\t\t\tfmt.Printf(\"OK\\n\")\n\t\t} else {\n\t\t\tfmt.Printf(\"Failed\\n\")\n\t\t}\n\t}\n}\n\n/*\n\nfunc TestDefaultJSONTranslator_Translate(t *testing.T) {\n\tname := \"sample\"\n\tfmt.Printf(\"Testing %s... \", name)\n\n\t// Get actual source feed\n\tff := fmt.Sprintf(\"testdata/translator/json/%s.json\", name)\n\tfmt.Println(ff)\n\tf, _ := ioutil.ReadFile(ff)\n\n\t// Parse actual feed\n\ttranslator := &gofeed.DefaultJSONTranslator{}\n\tfp := json.Parser{}\n\tfeed, _ := fp.Parse(bytes.NewReader(f))\n\tactual, _ := translator.Translate(feed)\n\n\tassert.Equal(t, \"title\", actual.Title)\n\tassert.Equal(t, \"description\", actual.Description)\n\tassert.Equal(t, \"https://sample-json-feed.com\", actual.Link)\n\tassert.Equal(t, \"https://sample-json-feed.com/feed.json\", actual.FeedLink)\n\tassert.Equal(t, \"2019-10-12T07:20:50.52Z\", actual.Updated)\n\tassert.Equal(t, \"2019-10-12T07:20:50Z\", actual.UpdatedParsed.Format(time.RFC3339))\n\tassert.Equal(t, \"2019-10-12T07:20:50.52Z\", actual.Published)\n\tassert.Equal(t, \"2019-10-12T07:20:50Z\", actual.PublishedParsed.Format(time.RFC3339))\n\tassert.Equal(t, \"author_name\", actual.Author.Name)\n\tassert.Equal(t, \"\", actual.Author.Email)\n\tassert.Equal(t, \"\", actual.Language)\n\tassert.Equal(t, \"https://sample-json-feed.com/icon.png\", actual.Image.URL)\n\tassert.Equal(t, \"\", actual.Image.Title)\n\tassert.Equal(t, \"\", actual.Copyright)\n\tassert.Equal(t, \"\", actual.Generator)\n\tassert.Equal(t, 0, len(actual.Categories))\n\tassert.Equal(t, (*ext.DublinCoreExtension)(nil), actual.DublinCoreExt)\n\tassert.Equal(t, (*ext.ITunesFeedExtension)(nil), actual.ITunesExt)\n\tassert.Equal(t, ext.Extensions(nil), actual.Extensions)\n\tassert.Equal(t, map[string]string(nil), actual.Custom)\n\tassert.Equal(t, \"json\", actual.FeedType)\n\tassert.Equal(t, \"1.0\", actual.FeedVersion)\n\tassert.Equal(t, \"title\", actual.Items[0].Title)\n\tassert.Equal(t, \"summary\", actual.Items[0].Description)\n\tassert.Equal(t, \"<p>content_html</p>\", actual.Items[0].Content)\n\tassert.Equal(t, \"https://sample-json-feed.com/id\", actual.Items[0].Link)\n\tassert.Equal(t, \"2019-10-12T07:20:50.52Z\", actual.Items[0].Updated)\n\tassert.Equal(t, \"2019-10-12T07:20:50Z\", actual.Items[0].UpdatedParsed.Format(time.RFC3339))\n\tassert.Equal(t, \"2019-10-12T07:20:50.52Z\", actual.Items[0].Published)\n\tassert.Equal(t, \"2019-10-12T07:20:50Z\", actual.Items[0].PublishedParsed.Format(time.RFC3339))\n\tassert.Equal(t, \"author_name\", actual.Items[0].Author.Name)\n\tassert.Equal(t, \"\", actual.Items[0].Author.Email)\n\tassert.Equal(t, \"id\", actual.Items[0].GUID)\n\tassert.Equal(t, \"https://sample-json-feed.com/image.png\", actual.Items[0].Image.URL)\n\tassert.Equal(t, \"\", actual.Items[0].Image.Title)\n\tassert.Equal(t, \"tag1\", actual.Items[0].Categories[0])\n\tassert.Equal(t, \"tag2\", actual.Items[0].Categories[1])\n\tassert.Equal(t, \"https://sample-json-feed.com/attachment\", (actual.Items[0].Enclosures)[0].URL)\n\tassert.Equal(t, \"100\", (actual.Items[0].Enclosures)[0].Length)\n\tassert.Equal(t, \"audio/mpeg\", (actual.Items[0].Enclosures)[0].Type)\n\tassert.Equal(t, (*ext.DublinCoreExtension)(nil), actual.Items[0].DublinCoreExt)\n\tassert.Equal(t, (*ext.ITunesItemExtension)(nil), actual.Items[0].ITunesExt)\n\tassert.Equal(t, ext.Extensions(nil), actual.Items[0].Extensions)\n\tassert.Equal(t, map[string]string(nil), actual.Items[0].Custom)\n\n\tname = \"sample2\"\n\tfmt.Printf(\"Testing %s... \", name)\n\n\t// Get actual source feed\n\tff = fmt.Sprintf(\"testdata/translator/json/%s.json\", name)\n\tfmt.Println(ff)\n\tf, _ = ioutil.ReadFile(ff)\n\n\t// Parse actual feed\n\tfeed, _ = fp.Parse(bytes.NewReader(f))\n\tactual, _ = translator.Translate(feed)\n\n\tassert.Equal(t, \"content_text\", actual.Items[0].Content)\n\tassert.Equal(t, \"https://sample-json-feed.com/banner_image.png\", actual.Items[0].Image.URL)\n\n}\n*/\n\nfunc TestDefaultJSONTranslator_Translate_WrongType(t *testing.T) {\n\ttranslator := &gofeed.DefaultJSONTranslator{}\n\taf, err := translator.Translate(\"wrong type\")\n\tassert.Nil(t, af)\n\tassert.NotNil(t, err)\n}\n"
        }
      ]
    }
  ]
}