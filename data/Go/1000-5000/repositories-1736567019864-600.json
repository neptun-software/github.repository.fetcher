{
  "metadata": {
    "timestamp": 1736567019864,
    "page": 600,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ph4ntonn/Stowaway",
      "stars": 2867,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.02734375,
          "content": "release/\n.vscode/\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2021 ph4ntom\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.517578125,
          "content": "BUILD_ENV = CGO_ENABLED=0\nOPTIONS = -trimpath -ldflags \"-w -s\"\n\n.PHONY: all admin agent linux_agent windows_agent macos_agent mips_agent arm_agent windows_admin linux_admin macos_admin windows_nogui_agent clean\n\nall: admin agent\n\nadmin:\n\t${BUILD_ENV} GOOS=linux GOARCH=386 go build ${OPTIONS} -o release/linux_x86_admin admin/admin.go\n\t${BUILD_ENV} GOOS=linux GOARCH=amd64 go build ${OPTIONS} -o release/linux_x64_admin admin/admin.go\n\t${BUILD_ENV} GOOS=linux GOARCH=arm64 go build ${OPTIONS} -o release/linux_arm64_admin admin/admin.go\n\t${BUILD_ENV} GOOS=windows GOARCH=amd64 go build ${OPTIONS} -o release/windows_x64_admin.exe admin/admin_win.go\n\t${BUILD_ENV} GOOS=windows GOARCH=386 go build ${OPTIONS} -o release/windows_x86_admin.exe admin/admin_win.go\n\t${BUILD_ENV} GOOS=darwin GOARCH=amd64 go build ${OPTIONS} -o release/macos_x64_admin admin/admin.go\n\t${BUILD_ENV} GOOS=darwin GOARCH=arm64 go build ${OPTIONS} -o release/macos_arm64_admin admin/admin.go\n\nagent:\n\t${BUILD_ENV} GOOS=linux GOARCH=386 go build ${OPTIONS} -o release/linux_x86_agent agent/agent.go\n\t${BUILD_ENV} GOOS=linux GOARCH=amd64 go build ${OPTIONS} -o release/linux_x64_agent agent/agent.go\n\t${BUILD_ENV} GOOS=linux GOARCH=arm64 go build ${OPTIONS} -o release/linux_arm64_agent agent/agent.go\n\t${BUILD_ENV} GOOS=windows GOARCH=amd64 go build ${OPTIONS} -o release/windows_x64_agent.exe agent/agent.go\n\t${BUILD_ENV} GOOS=windows GOARCH=386 go build ${OPTIONS} -o release/windows_x86_agent.exe agent/agent.go\n\t${BUILD_ENV} GOOS=darwin GOARCH=amd64 go build ${OPTIONS} -o release/macos_x64_agent agent/agent.go\n\t${BUILD_ENV} GOOS=darwin GOARCH=arm64 go build ${OPTIONS} -o release/macos_arm64_agent agent/agent.go\n\t${BUILD_ENV} GOOS=linux GOARCH=arm GOARM=5 go build ${OPTIONS} -o release/arm_eabi5_agent agent/agent.go\n\t${BUILD_ENV} GOOS=linux GOARCH=mipsle go build ${OPTIONS} -o release/mipsel_agent agent/agent.go\n\nlinux_agent:\n\t${BUILD_ENV} GOOS=linux GOARCH=386 go build ${OPTIONS} -o release/linux_x86_agent agent/agent.go\n\t${BUILD_ENV} GOOS=linux GOARCH=amd64 go build ${OPTIONS} -o release/linux_x64_agent agent/agent.go\n\t${BUILD_ENV} GOOS=linux GOARCH=arm64 go build ${OPTIONS} -o release/linux_arm64_agent agent/agent.go\n\nwindows_agent:\n\t${BUILD_ENV} GOOS=windows GOARCH=amd64 go build ${OPTIONS} -o release/windows_x64_agent.exe agent/agent.go\n\t${BUILD_ENV} GOOS=windows GOARCH=386 go build ${OPTIONS} -o release/windows_x86_agent.exe agent/agent.go\n\nmacos_agent:\n\t${BUILD_ENV} GOOS=darwin GOARCH=amd64 go build ${OPTIONS} -o release/macos_x64_agent agent/agent.go\n\t${BUILD_ENV} GOOS=darwin GOARCH=arm64 go build ${OPTIONS} -o release/macos_arm64_agent agent/agent.go\n\nmips_agent:\n\t${BUILD_ENV} GOOS=linux GOARCH=mipsle go build ${OPTIONS} -o release/mipsel_agent agent/agent.go\n\narm_agent:\n\t${BUILD_ENV} GOOS=linux GOARCH=arm GOARM=5 go build ${OPTIONS} -o release/arm_eabi5_agent agent/agent.go\n\nwindows_admin:\n\t${BUILD_ENV} GOOS=windows GOARCH=amd64 go build ${OPTIONS} -o release/windows_x64_admin.exe admin/admin_win.go\n\t${BUILD_ENV} GOOS=windows GOARCH=386 go build ${OPTIONS} -o release/windows_x86_admin.exe admin/admin_win.go\n\nlinux_admin:\n\t${BUILD_ENV} GOOS=linux GOARCH=386 go build ${OPTIONS} -o release/linux_x86_admin admin/admin.go\n\t${BUILD_ENV} GOOS=linux GOARCH=amd64 go build ${OPTIONS} -o release/linux_x64_admin admin/admin.go\n\t${BUILD_ENV} GOOS=linux GOARCH=arm64 go build ${OPTIONS} -o release/linux_arm64_admin admin/admin.go\n\nmacos_admin:\n\t${BUILD_ENV} GOOS=darwin GOARCH=amd64 go build ${OPTIONS} -o release/macos_x64_admin admin/admin.go\n\t${BUILD_ENV} GOOS=darwin GOARCH=arm64 go build ${OPTIONS} -o release/macos_arm64_admin admin/admin.go\n\n# Here is a special situation\n# You can see Stowaway get the params passed by the user through console by default\n# But if you define the params in the program(instead of passing them by the console),you can just run Stowaway agent by double-click\n# Sounds great? Right?\n# But it is slightly weird on Windows since double-clicking Stowaway agent or entering \"shell\" command in Stowaway admin will spawn a cmd window\n# That makes Stowaway pretty hard to hide itself\n# To solve this,here is my solution\n# First, check the detail in \"agent/shell.go\", follow my instruction and change some codes\n# Then, run `make windows_nogui_agent` and get your bonus!\n\nwindows_nogui_agent:\n\t${BUILD_ENV} GOOS=windows GOARCH=amd64 go build -trimpath -ldflags=\"-w -s -H=windowsgui\" -o release/windows_x64_agent.exe agent/agent.go \n\t${BUILD_ENV} GOOS=windows GOARCH=386 go build -trimpath -ldflags=\"-w -s -H=windowsgui\" -o release/windows_x86_agent.exe agent/agent.go \n\nclean:\n\t@rm release/*"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.3740234375,
          "content": "![stowaway.png](https://github.com/ph4ntonn/Stowaway/blob/master/img/logo.png)\n\n# Stowaway\n\n[![GitHub issues](https://img.shields.io/github/issues/ph4ntonn/Stowaway)](https://github.com/ph4ntonn/Stowaway/issues)\n[![GitHub forks](https://img.shields.io/github/forks/ph4ntonn/Stowaway)](https://github.com/ph4ntonn/Stowaway/network)\n[![GitHub stars](https://img.shields.io/github/stars/ph4ntonn/Stowaway)](https://github.com/ph4ntonn/Stowaway/stargazers)\n[![GitHub license](https://img.shields.io/github/license/ph4ntonn/Stowaway)](https://github.com/ph4ntonn/Stowaway/blob/master/LICENSE)\n\n[English](README_EN.md)\n\nStowaway是一个利用go语言编写、专为渗透测试工作者制作的多级代理工具\n\n用户可使用此程序将外部流量通过多个节点代理至内网，突破内网访问限制，构造树状节点网络，并轻松实现管理功能\n\n谢谢各位的star，同时欢迎大家使用后提出问题&&Bug :kissing_heart: \n\n**同时也请各位务必在使用前详细阅读使用方法及文末的注意事项**\n\n> 此工具仅限于安全研究和教学，测试本工具时，请确保您已获得足够的授权并符合当地的法律法规。用户承担因使用此工具而导致的所有法律和相关责任！ 作者不承担任何法律和相关责任！\n\n## 特性\n\n- 管理端更加友好的交互,支持命令补全/历史\n- 一目了然的节点树管理\n- 丰富的节点信息展示\n- 节点间正向/反向连接\n- 节点间支持重连\n- 节点间可通过socks5/http代理进行连接\n- 节点间可通过ssh隧道连接\n- 节点间流量可选择TCP/HTTP/WS\n- 多级socks5流量代理转发,支持UDP/TCP,IPV4/IPV6\n- 节点支持ssh访问远程主机\n- 远程shell\n- 上传及下载文件\n- 端口本地/远程映射\n- 节点可端口复用\n- 自由开关各类服务\n- 节点间相互认证\n- 节点间流量以TLS/AES-256-GCM进行加密\n- 相较于v1.0，文件体积减小25%\n- 支持各类平台(Linux/Mac/Windows/MIPS/ARM)\n\n## 编译及演示\n\n- 使用`make`直接编译多平台完整程序，或参看Makefile编译特定程序\n- 不想编译的盆油可以直接用[release](https://github.com/ph4ntonn/Stowaway/releases)下编译完成的程序\n- 演示视频：[Youtube](https://www.youtube.com/watch?v=Lh5Q0RPWKMU&list=PLkbGxnHFIhA_g5XZtKzN4u-JXRq41L2g-)\n\n## 使用方法\n\n### 角色\n\nStowaway一共包含两种角色，分别是：\n- `admin`    渗透测试者使用的主控端\n- `agent`    渗透测试者部署的被控端\n\n### 名词定义\n\n- 节点: 指admin || agent\n- 主动模式: 指当前操作的节点主动连接另一个节点\n- 被动模式: 指当前操作的节点监听某个端口，等待另一个节点连接\n- 上游: 指当前操作的节点与其父节点之间的流量\n- 下游：指当前操作的节点与其**所有**子节点之间的流量\n\n### 快速启动\n\n以下命令可以快速启动最简单的stowaway实例\n\n- admin: `./stowaway_admin -l 9999`\n- agent: `./stowaway_agent -c <stowaway_admin's IP>:9999`\n\n### 参数解析\n\n- admin\n\n```\n参数:\n-l 被动模式下的监听地址[ip]:<port>\n-s 节点通信加密密钥,所有节点(admin&&agent)必须一致\n-c 主动模式下的目标节点地址\n--socks5-proxy socks5代理服务器地址\n--socks5-proxyu socks5代理服务器用户名(可选)\n--socks5-proxyp socks5代理服务器密码(可选)\n--http-proxy http代理服务器地址\n--down 下游协议类型,默认为裸TCP流量,可选HTTP/WS\n--tls-enable 为节点通信启用TLS，在启用TLS后，AES加密将被禁用\n--domain 指定TLS SNI/WebSocket域名，若为空，默认为目标节点地址\n--heartbeat 开启心跳包\n```\n\n- agent\n\n```\n参数:\n-l 被动模式下的监听地址[ip]:<port>\n-s 节点通信加密密钥\n-c 主动模式下的目标节点地址\n--socks5-proxy socks5代理服务器地址\n--socks5-proxyu socks5代理服务器用户名(可选)\n--socks5-proxyp socks5代理服务器密码(可选)\n--http-proxy http代理服务器地址\n--reconnect 重连时间间隔\n--rehost 端口复用时复用的IP地址\n--report 端口复用时复用的端口号\n--up 上游协议类型,默认为裸TCP流量,可选HTTP/WS\n--down 下游协议类型,默认为裸TCP流量,可选HTTP/WS\n--cs 运行平台的shell编码类型，默认为utf-8，可选gbk\n--tls-enable 为节点通信启用TLS，在启用TLS后，AES加密将被禁用\n--domain 指定TLS SNI/WebSocket域名，若为空，默认为目标节点地址\n```\n\n### 参数用法\n\n#### -l\n\n此参数admin&&agent用法一致，仅用在被动模式下 \n\n若不指定IP地址，则默认监听在`0.0.0.0`上\n\n- admin:  `./stowaway_admin -l 9999` or `./stowaway_admin -l 127.0.0.1:9999`\n\n- agent:  `./stowaway_agent -l 9999`  or `./stowaway_agent -l 127.0.0.1:9999`\n\n#### -s\n\n此参数admin&&agent用法一致，可用在主动&&被动模式下\n\n可选，若为空，则代表通信不被加密，反之则通信基于用户所给出的密钥加密\n\n- admin:  `./stowaway_admin -l 9999 -s 123`\n\n- agent:  `./stowaway_agent -l 9999 -s 123`\n\n#### -c\n\n此参数admin&&agent用法一致，仅用在主动模式下\n\n代表了希望连接到的节点的地址\n\n- admin:  `./stowaway_admin -c 127.0.0.1:9999`\n\n- agent:  `./stowaway_agent -c 127.0.0.1:9999`\n\n#### --socks5-proxy/--socks5-proxyu/--socks5-proxyp/--http-proxy\n\n这四个参数admin&&agent用法一致，仅用在主动模式下\n\n`--socks5-proxy`代表socks5代理服务器地址，`--socks5-proxyu`以及`--socks5-proxyp`可选\n\n`--http-proxy`代表http代理服务器地址,与socks5使用方式相同\n\n无用户名密码：\n\n- admin:  `./stowaway_admin -c 127.0.0.1:9999 --socks5-proxy xxx.xxx.xxx.xxx`\n\n- agent:  `./stowaway_agent -c 127.0.0.1:9999 --socks5-proxy xxx.xxx.xxx.xxx`\n\n有用户名密码:\n\n- admin:  `./stowaway_admin -c 127.0.0.1:9999 --socks5-proxy xxx.xxx.xxx.xxx --socks5-proxyu xxx --socks5-proxyp xxx`\n\n- agent:  `./stowaway_agent -c 127.0.0.1:9999 --socks5-proxy xxx.xxx.xxx.xxx --socks5-proxyu xxx --socks5-proxyp xxx`\n\n#### --up/--down\n\n这两个参数admin&&agent用法一致，可用在主动&&被动模式下\n\n但注意admin上没有`--up`参数\n\n这两个参数可选，若为空，则代表上/下游流量为裸TCP流量\n\n若希望上/下游流量为HTTP/WS流量，设置此两参数为`http`或`ws`即可\n\n- admin:  `./stowaway_admin -c 127.0.0.1:9999 --down ws`\n\n- agent:  `./stowaway_agent -c 127.0.0.1:9999 --up ws` or `./stowaway_agent -c 127.0.0.1:9999 --up ws --down ws`\n\n另外需要注意两点：\n\n第一，当你设置了某一节点上/下游为TCP/HTTP/WS流量后，与其连接的父/子节点的下/上游流量必须设置为一致，如下\n\n- admin:  `./stowaway_admin -c 127.0.0.1:9999 --down ws`\n\n- agent:  `./stowaway_agent -l 9999 --up ws`\n\n上面这种情况，agent必须设置`--up`为ws，否则会导致网络出错\n\nagent间也一样\n\n假设agent-1正在`127.0.0.1:10000`端口上等待子节点的连接，并且设置了`--down ws`\n\n那么agent-2也必须设置`--up`为ws，否则会导致网络出错\n\n- agent-2:  `./stowaway_agent -c 127.0.0.1:10000 --up ws`\n\n第二，由于http是半双工的协议，并不是很适合stowaway全双工的通信性质，所以这里http协议仅实现了http消息格式，并不是完整功能的http工作流，所以你仍然可以使用这个协议，但是stowaway之间的流量在选择以http消息格式传输时无法通过nginx转发，这部分代码及功能保留一方面为了某些特殊情况下http协议的使用，另一方面也提供一个自定义流量的模版，方便用户自定义协议时拿来参考\n\n如需通过nginx等反代，请使用ws协议，并搭配上TLS进行通讯\n\n#### --reconnect\n\n此参数仅用在agent，且仅用在主动模式下\n\n参数可选，若不设置，则代表节点在网络连接断开后不会主动重连，若设置，则代表节点会每隔x(你设置的秒数)秒尝试重连至父节点\n\n- admin:  `./stowaway_admin -l 9999`\n\n- agent:  `./stowaway_agent -c 127.0.0.1:9999 --reconnect 10`\n\n上面这种情况下，代表如果agent与admin之间的连接断开，agent会每隔十秒尝试重连回admin\n\nagent之间也与上面情况一致\n\n并且`--reconnect`参数可以与`--socks5-proxy`/`--socks5-proxyu`/`--socks5-proxyp`/`--http-proxy`一起使用，agent将会参照启动时的设置，通过代理尝试重连\n\n#### --rehost/--report\n\n这两个参数比较特别，仅用在agent端，详细请参见下方的端口复用机制\n\n#### --cs\n\n此参数仅用在agent，可用在主动&&被动模式下\n\n主要旨在解决'shell'功能乱码问题，当用户将agent运行于控制台编码为gbk的平台上(例如一般情况下的Windows)并且同时admin运行于控制台编码为utf-8的平台上时，请务必将此参数设置为'gbk'\n\n- Windows: `./stowaway_agent -c 127.0.0.1:9999 -s 123 --cs gbk`\n\n#### --tls-enable\n\n这两个参数admin&&agent用法一致，可用在主动&&被动模式下\n\n通过设置此选项，可以将节点间流量以TLS加密\n\n示例如下\n- admin: `./stowaway_admin -l 10000 --tls-enable -s 123`\n- agent: `./stowaway_agent -c localhost:10000 --tls-enable -s 123`\n\n注意，当此参数启用时，aes加密将被默认禁用，-s参数将仅用于节点间相互验证&端口复用功能\n\n另外，当此参数启用时，**请保证网络中每一个节点(包括admin)都启用此参数**\n\n#### --domain\n\n这两个参数admin&&agent用法一致，仅可用在主动模式下\n\n通过设置此选项，可以设置当前此节点TLS协商时的SNI选项或者WebSocket的目标Host\n\n示例如下\n- admin: `./stowaway_admin -l 10000 --tls-enable -s 123`\n- agent: `./stowaway_agent -c xxx.xxx.xxx.xxx:10000 --tls-enable -s 123 --domain xxx.com`\n\n#### --heartbeat\n\n这个参数仅用在admin端，可用在主动&被动模式下\n\n通过设置此选项，可以使admin持续向第一个节点发送心跳包，从而在中间有反向代理的情况下维持长链接\n\n假设admin和agent中有类似nginx的反向代理设备将8080端口代理至8000端口,示例如下 \n- admin: `./stowaway_admin -l 8000 --tls-enable -s 123 --down ws --heartbeat`\n- agent: `./stowaway_agent -c xxx.xxx.xxx.xxx:8080 --tls-enable -s 123 --domain xxx.com --up ws`\n\n## 端口复用机制\n\n当前Stowaway提供基于SO_REUSEPORT和SO_REUSEADDR特性的端口复用功能及基于IPTABLES的端口复用功能\n\n- 在linux下可以大部分的功能端口\n\n- 在windows下不可复用iis，rdp端口，可以复用mysql，apache服务的端口\n\n### 复用方式\n\n- SO_REUSEPORT和SO_REUSEADDR模式\n\n  假设agent端采用端口复用机制复用80端口\n\n  此时agent端必须设置`--rehost`&&`--report`&&`-s`参数\n\n  - `--rehost`: 代表希望复用的IP地址，不可为0.0.0.0，普遍应当是网卡的外部地址\n\n  - `--report`: 代表希望复用的端口\n\n  - `-s`: 代表通信密钥\n\n  **主要支持windows、mac环境下的复用，linux亦可，但限制较多**\n  \n  - admin端：`./stowaway_admin -c 192.168.0.105:80 -s 123`\n  - agent端：`./stowaway_agent  --report 80 --rehost 192.168.0.105 -s 123`\n\n\n- IPTABLES模式\n\n  假设agent端采用端口复用机制复用22端口\n\n  此时agent端必须设置`-l`&&`--report`&&`-s`参数\n\n  - `-l`: 代表无法被正常访问的端口，也就是你真正想让agent监听并接受连接的端口\n\n  - `--report`: 代表希望复用的端口\n\n  - `-s`: 代表通信密钥\n\n  **仅支持linux环境下的复用，agent会自动修改IPTABLES，需要root权限**\n\n  - agent端： `./stowaway_agent --report 22 -l 10000 -s 123`\n\n    在agent启动后，请使用`script`目录下的`reuse.py`\n\n    先设置SECRET的值(SECRET的值就是在启动各个节点时所设置的通信密钥),\n\n    之后执行：`python reuse.py --start --rhost xxx.xxx.xxx.xxx --rport xxx`\n\n    - `--rhost`: 代表agent的地址\n\n    - `--rport`: 代表被复用的端口,在本例中应当为22\n\n  - 此时admin端就可以连接：`./stowaway_admin -c 192.168.0.105:22 -s 123`\n  \n\n### 注意\n\n- 以上情况只是列举了admin以及agent之间的连接，agent与agent之间的连接亦同，并无差异\n\n- 如果agent被ctrl-c或者kill命令杀死，程序将会自动清理iptables规则，但如果被kill -9 杀死，则无法自动清除\n\n  故而为了防止agent异常退出后，iptables规则没有被清理导致被复用的服务无法访问\n\n  所以当需要关闭时，需运行：`python reuse.py --stop --rhost xxx.xxx.xxx.xxx --rport xxx`\n\n  即可关闭转发规则，使得原服务能够被正常访问\n\n- 如果使用IPTABLES模式下的端口复用模式，将会强制监听在0.0.0.0，无法由`-l`参数来指定ip\n\n## 如何组成多级网络？\n\n从上面的例子可以看到，只有admin和一个agent出场\n\n而多级网络才是核心\n\n在stowaway中，组成多级网络需要借助admin中的`listen`、`connect`、 `sshtunnel`命令来实现\n\n举一个简单的例子\n\n- admin: `./stowaway_admin -l 9999 -s 123`\n\n此时agent-1已经连上admin\n\n- agent-1:  `./stowaway_agent -c 127.0.0.1:9999 -s 123`\n\n 此时用户还想连接agent-2，如下\n\n- agent-2:  `./stowaway_agent -l 10000 -s 123`\n\n那么，此时用户可以通过admin,输入`use 0` -> `connect agent-2的IP:10000`来将其加入网络，并成为agent-1的一个子节点\n\n假如此时用户还希望连入一个节点agent-3，但是通过agent-1无法访问agent-3\n\n那么，此时用户可以通过admin,输入`use 0` -> `listen` -> 选择`1.Normal Passive` -> 输入`10001` 从而使得agent-1监听在10001端口上，并等待子节点的连接\n\n等admin操作完成后，agent-3启动如下\n\n- agent-3: `./stowaway_agent -c 127.0.0.1:10001 -s 123`\n\n就可以将agent-3作为agent-1的另一个子节点加入网络了\n\n关于`listen`以及`sshtunnel`的详细介绍，可以参看下方的命令解析\n\n## 如何重连？\n\nStowaway当前支持多种方式的重连，简单概括如下\n\n首先，当父节点掉线后，只有一种节点会主动退出，那就是启动时为主动模式且没有设置重连的节点\n\n如果设置了重连，那么节点将会在指定的时间间隔中尝试重连\n\n另外，所有被动模式启动的节点都不会主动退出，而是会基于启动时的参数重新监听在指定端口上，此时用户仍然可以通过`connect`、`sshtunnel`来将这些节点连回网络\n\n### 注意\n\n1. **如因网络波动或中间节点掉线，导致某一个分支断开，在主动重连时请务必连接缺失链的头节点**,举个例子，admin后接着node1，node1后分为两支，一支是node1->node 2 -> node 3 -> node 4, 一支是node1->node 5 ->node 6，那么如果node2掉线，node3及node4将不会掉线，而是继续保持存活。此时用户若想将node3及node4重新加入网络，那么用户有两种选择，一种是假如node1可以直接访问node3，那么用户可随时在node1将node3用connect或者sshtunnel命令重新加入网络（切记，就算node1同时也可以访问node4，也请不要直接连接node4，请连接整个缺失链(node3->node4)的头节点node3），这样就可以将node3及node4重新加入网络；另一种选择是当node1无法直接访问node3时（即必须经过node2），那么请先将node2重启并加入网络，之后再在node2上使用connect或者sshtunnel命令连接node3，从而将node3及node4加入网络\n\n2. **当有节点掉线时，那么此时与此节点及其子节点有关的所有socks，backward，forward服务都会被强制停止**\n\n## 命令解析\n\n在admin控制台中，用户可以用tab来补全命令，方向键上下左右来查找历史/移动光标\n\nadmin控制台分为两个层级，第一层为主panel，包含的命令如下\n\n- `help`: 展示主panel的帮助信息\n\n```\n(admin) >> help\n  help                                     \t\tShow help information\n  detail                                  \t\tDisplay connected nodes' detail\n  topo                                     \t\tDisplay nodes' topology\n  use        <id>                          \t\tSelect the target node you want to use\n  exit                                     \t\tExit Stowaway\n```\n\n- `detail`: 展示在线节点的详细信息\n\n```\n(admin) >> detail\nNode[0] -> IP: 127.0.0.1:10000  Hostname: ph4ntoms-MBP.lan  User: ph4ntom\nMemo:\n```\n\n- `topo`: 展示在线节点的父子关系\n\n```\n(admin) >> topo\nNode[0]'s children ->\nNode[1]\n\nNode[1]'s children ->\n```\n\n- `use`: 使用某个agent\n\n```\n(admin) >> use 0\n(node 0) >>\n```\n\n- `exit`: 退出stowaway\n\n```\n(admin) >> exit\n[*] Do you really want to exit stowaway?(y/n): y\n[*] BYE!\n```\n\n当用户使用`use`命令选择了一个agent后，进入第二层node panel，其包含的命令如下\n\n- `help`: 展示node panel的帮助信息\n\n```\n(node 0) >> help\n  help                                            Show help information\n  status                                          Show node status,including socks/forward/backward\n  listen                                          Start port listening on current node\n  addmemo    <string>                             Add memo for current node\n  delmemo                                         Delete memo of current node\n  ssh        <ip:port>                            Start SSH through current node\n  shell                                           Start an interactive shell on current node\n  socks      <lport> [username] [pass]            Start a socks5 server\n  stopsocks                                       Shut down socks services\n  connect    <ip:port>                            Connect to a new node\n  sshtunnel  <ip:sshport> <agent port>            Use sshtunnel to add the node into our topology\n  upload     <local filename> <remote filename>   Upload file to current node\n  download   <remote filename> <local filename>   Download file from current node\n  forward    <lport> <ip:port>                    Forward local port to specific remote ip:port\n  stopforward                                     Shut down forward services\n  backward    <rport> <lport>                     Backward remote port(agent) to local port(admin)\n  stopbackward                                    Shut down backward services\n  shutdwon                                        Terminate current node\n  back                                            Back to parent panel\n  exit                                            Exit Stowaway \n```\n- `status`: 展示当前节点的socks/forward/backward状态\n\n```\n(node 0) >> status\nSocks status:\n      ListenAddr: 0.0.0.0:10000    Username:    Password:\n-------------------------------------------------------------------------------------------\nForward status:\n      [1] Listening Addr: [::]:20000 , Remote Addr: 192.168.1.1:22 , Active Connnections: 0\n      [2] Listening Addr: [::]:30000 , Remote Addr: 192.168.1.1:22 , Active Connnections: 0\n-------------------------------------------------------------------------------------------\nBackward status:\n      [1] Remote Port: 40000 , Local Port: 50000 , Active Connnections: 0\n```\n\n- `listen`: 命令agent监听某个端口并等待子节点的连入\n\n```\n(node 0) >> listen\n[*] MENTION! If you choose IPTables Reuse or SOReuse,you MUST CONFIRM that the node was initially started in the corresponding way!\n[*] When you choose IPTables Reuse or SOReuse, the node will use the initial config(when node started) to reuse port!\n[*] Please choose the mode(1.Normal passive / 2.IPTables Reuse / 3.SOReuse): 1\n[*] Please input the [ip:]<port> : 10001\n[*] Waiting for response......\n[*] Node is listening on 10001\n```\n\n注意，`listen`是比较特殊的一个命令，可以看到，`listen`命令有三种模式\n\n1. `Normal passive`: 此选项意味着agent将会以普通的方式监听在目标端口，并等待子节点连入\n2. `IPTables Reuse`：此选项意味着agent将会以IPTables Reuse的方式复用端口，并等待子节点连入\n3. `SOReuse`：此选项意味着agent将会以SOReuse的方式复用端口，并等待子节点连入\n\n第一个模式是最普遍使用的，若父节点以这种方式监听，那么子节点仅需要`-c 父节点ip:port`就可以加入网络\n\n第二个和第三个模式是比较特殊的，若用户选择第二或第三个模式，那么用户必须保证当前操作的节点本身就是以端口复用的方式启动的，否则将无法使用这两个模式\n\n第二和第三个模式将不需要用户输入任何信息，节点将会自动使用其自身启动时的参数来复用端口，并准备接受子节点的连接\n\n另外，`listen`一次只能接受一个子节点的连入，若需要多个子节点连入，请执行相应次数的`listen`命令\n\n- `addmemo`: 为当前节点添加备忘\n\n```\n(node 0) >> addmemo test\n[*] Memo added!\n(node 0) >> exit\n(admin) >> detail\nNode[0] -> IP: 127.0.0.1:10000  Hostname: ph4ntoms-MBP.lan  User: ph4ntom\nMemo:  test\n```\n\n- `delmemo`: 删除当前节点的备忘\n\n```\n(node 0) >> delmemo\n[*] Memo deleted!\n(node 0) >> exit\n(admin) >> detail\nNode[0] -> IP: 127.0.0.1:10000  Hostname: ph4ntoms-MBP.lan  User: ph4ntom\nMemo:\n```\n\n- `ssh`: 命令节点以ssh方式连接目标机器\n\n```\n(node 0) >> ssh 127.0.0.1:22\n[*] Please choose the auth method(1.username&&password / 2.certificate): 1\n[*] Please enter the username: ph4ntom\n[*] Please enter the password: *****\n[*] Waiting for response.....\n[*] Connect to target host via ssh successfully!\n # ph4ntom @ ph4ntoms-MBP in ~ 👑 [17:03:56]\n$ whoami\nph4ntom\n # ph4ntom @ ph4ntoms-MBP in ~ 👑 [17:04:16]\n$\n```\n\n在此模式下，tab键将被禁止\n\n- `shell`: 获取当前节点的shell\n\n```\n(node 0) >> shell\n[*] Waiting for response.....\n[*] Shell is started successfully!\n\nbash: no job control in this shell\n\nThe default interactive shell is now zsh.\nTo update your account to use zsh, please run `chsh -s /bin/zsh`.\nFor more details, please visit https://support.apple.com/kb/HT208050.\nbash-3.2$ whoami\nph4ntom\nbash-3.2$\n```\n\n在此模式下，tab键将被禁止\n\n- `socks`：在当前节点上启动socks5服务\n\n```\n(node 0) >> socks 7777\n[*] Trying to listen on 0.0.0.0:7777......\n[*] Waiting for response......\n[*] Socks start successfully!\n(node 0) >>\n```\n\n注意一点，此处的7777端口不是在agent上开启的，而是在admin上开启\n\n若需要设置用户名密码，可将上方命令改为`socks 7777 <your username> <your password>`\n\n若需要指定监听的接口，可将上方命令改为`socks xxx.xxx.xxx.xxx:7777`\n\n- `stopsocks`: 停止在当前节点上的socks5服务\n\n```\n(node 0) >> stopsocks\nSocks Info ---> ListenAddr: 0.0.0.0:7777    Username: <null>    Password: <null>\n[*] Do you really want to shutdown socks?(yes/no): yes\n[*] Closing......\n[*] Socks service has been closed successfully!\n(node 0) >>\n```\n\n- `connect`: 命令当前节点连接至另一个子节点\n\n```\nagent-1: ./stowaway_agent -l 10002\n```\n\n```\n(node 0) >> connect 127.0.0.1:10002\n[*] Waiting for response......\n[*] New node online! Node id is 1\n\n(node 0) >>\n```\n\n- `sshtunnel`: 命令当前节点以ssh隧道的方式连接至另一个子节点\n\n```\nagent-2: ./stowaway_agent -l 10003\n```\n\n```\n(node 0) >> sshtunnel 127.0.0.1:22 10003\n[*] Please choose the auth method(1.username&&password / 2.certificate): 1\n[*] Please enter the username: ph4ntom\n[*] Please enter the password: ******\n[*] Waiting for response.....\n[*] New node online! Node id is 2\n\n(node 0) >>\n```\n\n在严格受限的网络环境下，可以利用ssh隧道的方式来将stowaway的流量伪装为ssh流量，从而避开防火墙的限制\n\n- `upload`: 向当前节点上传文件\n\n```\n(node 0) >> upload test.7z test.xxx\n[*] File transmitting, please wait...\n136.07 KiB / 136.07 KiB [-----------------------------------------------------------------------------------] 100.00% ? p/s 0s\n```\n\n- `download`: 下载当前节点上的文件\n\n```\n(node 0) >> download test.xxx test.xxxx\n[*] File transmitting, please wait...\n136.07 KiB / 136.07 KiB [-----------------------------------------------------------------------------------] 100.00% ? p/s 0s\n```\n\n- `forward`: 映射admin上的端口至远程端口\n\n```\n(node 0) >> forward 9000 127.0.0.1:22\n[*] Trying to listen on 0.0.0.0:9000......\n[*] Waiting for response......\n[*] Forward start successfully!\n(node 0) >>\n```\n\n```\n$ ssh 127.0.0.1 -p 9000\nPassword:\n # ph4ntom @ ph4ntoms-MBP in ~ 👑 [17:19:51]\n$\n```\n\n- `stopforward`: 关闭当前节点的远程映射\n\n```\n(node 0) >> stopforward\n[0] All\n[1] Listening Addr : [::]:9000 , Remote Addr : 127.0.0.1:22 , Active Connnections : 1\n[*] Do you really want to shutdown forward?(yes/no): yes\n[*] Please choose one to close: 1\n[*] Closing......\n[*] Forward service has been closed successfully!\n```\n\n- `backward`: 反向映射当前agent上的端口至admin的本地端口\n\n```\n(node 0) >> backward 9001 22\n[*] Trying to ask node to listen on 0.0.0.0:9001......\n[*] Waiting for response......\n[*] Backward start successfully!\n(node 0) >>\n```\n\n```\n$ ssh 127.0.0.1 -p 9001\nPassword:\n # ph4ntom @ ph4ntoms-MBP in ~ 🌈 [17:22:14]\n$\n```\n\n- `stopbackward`: 关闭当前节点的反向映射\n\n```\n(node 0) >> stopbackward\n[0] All\n[1] Remote Port : 9001 , Local Port : 22 , Active Connnections : 1\n[*] Do you really want to shutdown backward?(yes/no): yes\n[*] Please choose one to close: 1\n[*] Closing......\n[*] Backward service has been closed successfully!\n```\n\n- `shutdown`: 命令当前节点下线\n\n```\n(node 1) >> shutdown\n(node 1) >>\n[*] Node 1 is offline!\n```\n\n- `back`: 退回到主panel\n\n```\n(node 1) >> back\n(admin) >>\n```\n\n- `exit`: 退出stowaway\n\n```\n(node 1) >> exit\n[*] Do you really want to exit stowaway?(y/n): y\n[*] BYE!\n```\n\n## TODO\n\n- [x] 修复bug\n- [x] 支持TLS\n- [ ] 支持多startnode的形式\n\n## 注意事项\n\n- 此程序仅是闲暇时开发学习，结构及代码结构不够严谨，功能可能存在bug，请多多谅解\n- admin不在线时，新节点将不允许加入\n- admin仅支持一个直接连接的agent节点，agent节点则无此限制\n- 如果用户使用windows下的admin端，请先下载[ansicon](https://github.com/adoxa/ansicon/releases)，或者在[这里]()下载，之后进入对应系统位数的文件夹，执行`ansicon.exe -i`即可，不然admin端会出现乱码的问题\n- 本程序仅支持标准的基于[RFC1928](https://www.ietf.org/rfc/rfc1928.txt)所阐述的`UDP ASSOCIATE`，请在使用socks5 udp代理时注意您所使用的程序(例如扫描器等)，包构造方式必须遵守标准的[RFC1928](https://www.ietf.org/rfc/rfc1928.txt)，并且需要自行处理丢包状况。\n\n## 404星链计划\n<img src=\"https://github.com/knownsec/404StarLink/raw/master/Images/logo.png\" width=\"30%\">\n\nStowaway 现已加入 [404星链计划](https://github.com/knownsec/404StarLink)\n\n## 致谢\n\n感谢以下师傅和项目在Stowaway开发过程中的帮助\n- [lz520520](https://github.com/lz520520)\n- [SignorMercurio](https://github.com/SignorMercurio)\n- [MM0x00](https://github.com/MM0x00)\n- [r0ck3rt](https://github.com/r0ck3rt)\n- [Termite](https://github.com/rootkiter/Termite)\n- [Venom](https://github.com/Dliv3/Venom)\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 30.4345703125,
          "content": "![stowaway.png](https://github.com/ph4ntonn/Stowaway/blob/master/img/logo.png)\n\n# Stowaway\n\n[![GitHub issues](https://img.shields.io/github/issues/ph4ntonn/Stowaway)](https://github.com/ph4ntonn/Stowaway/issues)\n[![GitHub forks](https://img.shields.io/github/forks/ph4ntonn/Stowaway)](https://github.com/ph4ntonn/Stowaway/network)\n[![GitHub stars](https://img.shields.io/github/stars/ph4ntonn/Stowaway)](https://github.com/ph4ntonn/Stowaway/stargazers)\n[![GitHub license](https://img.shields.io/github/license/ph4ntonn/Stowaway)](https://github.com/ph4ntonn/Stowaway/blob/master/LICENSE)\n\nStowaway is a Multi-hop proxy tool for security researchers and pentesters\n\nUsers can use this program to proxy external traffic through multiple nodes to the core internal network, breaking through internal network access restrictions, constructing a tree-like node network, and easily realizing management functions.\n\nThank you everyone for the stars, and also welcome everyone to raise questions && bugs after use :kissing_heart: \n\n**And please be sure to read the usage method and the notes at the end before using**\n\n> This tool is limited to security research and teaching, and the user bears all legal and related responsibilities caused by the use of this tool! The author does not assume any legal and related responsibilities!\n\n## Features\n\n- More user-friendly interaction, support command auto-completion/search history\n- Obvious node topology\n- Clear information display of nodes\n- Active/Passive connection between nodes\n- Support reconnection between nodes\n- Nodes can be connected through socks5/http proxy\n- Nodes can be connected through ssh tunnel\n- TCP/HTTP/WS can be selected for inter-node traffic\n- Multi-hop socks5 traffic proxy forwarding, support UDP/TCP, IPV4/IPV6\n- Nodes can access arbitrary host via ssh\n- Remote shell\n- Upload/download files\n- Port local/remote mapping\n- Port Reuse\n- Open/Close all the services arbitrarily\n- Authenicate each other between nodes\n- Traffic encryption with TLS/AES-256-GCM\n- Compared with v1.0, the file size is reduced by 25%\n- Multiple platforms support(Linux/Mac/Windows/MIPS/ARM)\n\n## Build and Demo\n\n- Use `make` to directly compile programs for multiple platforms, or refer to the Makefile for compiling specific programs.\n- If you prefer not to compile, you can directly use the programs available here [release](https://github.com/ph4ntonn/Stowaway/releases) \n- Demo video: [Youtube](https://www.youtube.com/watch?v=Lh5Q0RPWKMU&list=PLkbGxnHFIhA_g5XZtKzN4u-JXRq41L2g-)\n\n## Usage\n\n### Character\n\nStowaway has two kinds of characters: \n- `admin`  The master used by the penetration tester\n- `agent`  The slave deployed by the penetration tester\n\n### Noun definition\n\n- Node: This refers to admin || agent\n- Active mode: This refers to the situation where the node being currently operated actively establishes a connection to another node\n- Passive mode: This refers to the situation where the node currently being operated is listening on a specific port, waiting for another node to connect.\n- Upstream: This refers to the traffic between the node currently being operated and its parent node\n- Downstream: This refers to the traffic between the node currently being operated and **all ** its child nodes\n\n### Quick start\n\nThe following command can quickly start the simplest stowaway instance\n\n- admin: `./stowaway_admin -l 9999`\n- agent: `./stowaway_agent -c <stowaway_admin's IP>:9999`\n\n### Parameter analysis\n\n- admin\n\n```\nParameter:\n-l Listening address in passive mode [ip]:<port>\n-s Node communication encryption key, all nodes (admin&&agent) must be consistent\n-c Target node address under active mode\n--socks5-proxy SOCKS5 proxy server address\n--socks5-proxyu SOCKS5 proxy server username\n--socks5-proxyp SOCKS5 proxy server password\n--http-proxy HTTP proxy server address\n--down Downstream protocol type, default is raw TCP traffic, optional HTTP/WS\n--tls-enable Enable TLS for node communication, after enabling TLS, AES encryption will be disabled\n--domain Specify the TLS SNI/WebSocket domain name. If it is empty, it defaults to the target node address\n--heartbeat Enable heartbeat \n```\n\n- agent\n\n```\nParameter:\n-l Listening address in passive mode [ip]:<port>\n-s Node communication encryption key\n-c Target node address under active mode\n--socks5-proxy SOCKS5 proxy server address\n--socks5-proxyu SOCKS5 proxy server username (optional)\n--socks5-proxyp SOCKS5 proxy server password (optional)\n--http-proxy HTTP proxy server address\n--reconnect Reconnect time interval\n--rehost The IP address to be reused\n--report The Port number to be reused\n--up Upstream protocol type, default is raw TCP traffic, optional HTTP/WS\n--down Downstream protocol type, default is raw TCP traffic, optional HTTP/WS\n--cs Platform's console encoding type,default is utf-8，optional gbk\n--tls-enable Enable TLS for node communication, after enabling TLS, AES encryption will be disabled\n--domain Specify the TLS SNI/Websocket domain name. If it is empty, it defaults to the target node address.\n```\n\n### Parameter usage\n\n#### -l\n\nThis parameter can be used on admin&&agent, under passive mode \n\nIf you do not specify an IP address, it will default to listening on `0.0.0.0`\n\n- admin:  `./stowaway_admin -l 9999` or `./stowaway_admin -l 127.0.0.1:9999`\n\n- agent:  `./stowaway_agent -l 9999`  or `./stowaway_agent -l 127.0.0.1:9999`\n\n#### -s\n\nThis parameter can be used on admin&&agent, under both active && passive mode\n\nThis parameter is optional. If it is left blank, it means that the communication will not be encrypted. Conversely, if a key is provided by the user, the communication will be encrypted based on that key.\n\n- admin:  `./stowaway_admin -l 9999 -s 123`\n\n- agent:  `./stowaway_agent -l 9999 -s 123`\n\n#### -c\n\nThis parameter can be used on admin&&agent, under active mode \n\nIt represents the address of the node you wish to connect to\n\n- admin:  `./stowaway_admin -c 127.0.0.1:9999`\n\n- agent:  `./stowaway_agent -c 127.0.0.1:9999` \n\n#### --socks5-proxy/--socks5-proxyu/--socks5-proxyp/--http-proxy\n\nThese four parameters can be used on admin&&agent , under active mode\n\n`--socks5-proxy` represents the address of the socks5 proxy server, `--socks5-proxyu` and `--socks5-proxyp` are optional\n\n`--http-proxy` represents the address of the http-proxy server, the usage is as same as socks5\n\nNo username and password：\n\n- admin:  `./stowaway_admin -c 127.0.0.1:9999 --socks5-proxy xxx.xxx.xxx.xxx`\n\n- agent:  `./stowaway_agent -c 127.0.0.1:9999 --socks5-proxy xxx.xxx.xxx.xxx`\n\nRequire username and password:\n\n- admin:  `./stowaway_admin -c 127.0.0.1:9999 --socks5-proxy xxx.xxx.xxx.xxx --socks5-proxyu xxx --socks5-proxyp xxx`\n\n- agent:  `./stowaway_agent -c 127.0.0.1:9999 --socks5-proxy xxx.xxx.xxx.xxx --socks5-proxyu xxx --socks5-proxyp xxx`\n\n#### --up/--down\n\nThese two parameter can be used on admin&&agent, under active && passive mode\n\nHowever, note that there is no `--up` parameter on the admin\n\nThese two parameters are optional. If left empty, it signifies that the upstream/downstream traffic will be in the form of raw TCP traffic\n\nIf you wish for the upstream/downstream traffic to be HTTP/WS traffic, simply set these two parameters to `http` or `ws`\n\n- admin:  `./stowaway_admin -c 127.0.0.1:9999 --down ws` \n\n- agent:  `./stowaway_agent -c 127.0.0.1:9999 --up ws`  or `./stowaway_agent -c 127.0.0.1:9999 --up ws --down ws`\n\nThere are two other points to note:\n\nFirst, once you set the upstream/downstream traffic of a particular node to TCP/HTTP/WS, the downstream/upstream traffic of its connected parent/child node must be set consistently\n\nLike this:\n\n- admin:  `./stowaway_admin -c 127.0.0.1:9999 --down ws`\n\n- agent:  `./stowaway_agent -l 9999 --up ws`\n\nIn the above case, the agent must set `--up` to ws, otherwise it will cause network errors\n\nThe rules between admin<-->agent is as same as agent<-->agent\n\nAssuming agent-1 is waiting for the connection of child nodes on the port `127.0.0.1:10000` and has set `--down ws`\n\nThen, agent-2 must also set `--up` to `ws`, otherwise, it would lead to network errors\n\n- agent-2:  `./stowaway_agent -c 127.0.0.1:10000 --up ws`\n\nSecond, since HTTP is a half-duplex protocol, it is not very suitable for the full-duplex communication nature of Stowaway. Therefore, the HTTP protocol here only implements the HTTP message format, not a fully functional HTTP workflow. So you can still use this protocol, but the traffic between Stowaway cannot be forwarded by nginx when choosing to transmit in the HTTP message format. This part of the code and function is retained on the one hand for the use of the HTTP protocol in some special cases, and on the other hand to provide a template for custom traffic, which is convenient for users to use as a reference when customizing other protocols.\n\nIf you need to use reverse proxy services such as nginx, please use the Websocket (ws) protocol for communication(it would be better if it can be used with tls).\n\n#### --reconnect\n\nThis parameter can be used on agent, under active mode\n\nThis parameter is optional. If not set, it means that the node will not automatically attempt to reconnect after a network disconnection. If set, it indicates that the node will try to reconnect to the parent node every x seconds (the number of seconds you set)\n\n- admin:  `./stowaway_admin -l 9999`\n\n- agent:  `./stowaway_agent -c 127.0.0.1:9999 --reconnect 10`\n\nIn the scenario described above, it means that if the connection between the agent and the admin is interrupted, the agent will attempt to reconnect to the admin every ten seconds\n\nThe rules between admin<-->agent is as same as agent<-->agent\n\nAdditionally, the `--reconnect` parameter can be used in conjunction with `--socks5-proxy`, `--socks5-proxyu`, `--socks5-proxyp`, or `--http-proxy`. In such cases, the agent will attempt to reconnect through the proxy according to the settings specified at startup\n\n#### --rehost/--report\n\nThese two parameters are quite unique and are used exclusively on the agent side. For more details, please refer to the information below on the port reuse mechanism\n\n#### --cs\n\nThis parameter can be used on agent, under active && passive mode\n\nThis is primarily aimed at resolving the issue of garbled text with the 'shell' function. When the agent is operated on a platform where the console encoding is set to GBK (such as is commonly the case with Windows) and concurrently, the admin is run on a platform with UTF-8 console encoding, it is crucial to set this parameter to `gbk`\n\n- Windows: `./stowaway_agent -c 127.0.0.1:9999 -s 123 --cs gbk`\n\n#### --tls-enable\n\nThese two parameter can be used on admin&&agent, under active && passive mode\n\nBy setting this option, traffic between nodes can be encrypted with TLS\n\n- admin: `./stowaway_admin -l 10000 --tls-enable -s 123`\n- agent: `./stowaway_agent -c localhost:10000 --tls-enable -s 123`\n\nPlease note that when this parameter is enabled, AES encryption will be disabled by default. The `-s` parameter will then be used solely for mutual verification between nodes & port reuse functionality\n\nAdditionally, when this parameter is enabled, **ensure that every node in the network (including the admin) has this parameter enabled**\n\n#### --domain\n\nThese two parameter can be used on admin&&agent, under active mode\n\nBy setting this option, you can specify the SNI option for TLS negotiation or WebSocket target host for the current node\n\n- admin: `./stowaway_admin -l 10000 --tls-enable -s 123`\n- agent: `./stowaway_agent -c xxx.xxx.xxx.xxx:10000 --tls-enable -s 123 --domain xxx.com`\n\n#### --heartbeat\n\nThis parameter can be used on admin, under active && passive mode\n\nBy setting this option, it allows the admin to continuously send heartbeat packets to the first node, thus maintaining a persistent connection even in the presence of a reverse proxy in between.\n\nAssuming there are reverse proxy devices similar to NGINX between the admin and agent, proxying port 8080 to port 8000, an example is as follows:\n- admin: `./stowaway_admin -l 8000 --tls-enable -s 123 --down ws --heartbeat`\n- agent: `./stowaway_agent -c xxx.xxx.xxx.xxx:8080 --tls-enable -s 123 --domain xxx.com --up ws`\n\n## Port reuse\n\nStowaway currently supports port reuse functionality based on the SO_REUSEPORT and SO_REUSEADDR features, as well as port reuse functionality based on IPTABLES\n\n- In Linux environment, stowaway can reuse most ports\n- In Windows environment, it cannot reuse service port like IIS/RDP, but can reuse Mysql/Apache and so on\n\n### How To?\n\n- SO_REUSEPORT/SO_REUSEADDR\n\n  Assuming that the agent uses the port reuse mechanism to reuse port 80\n\n  In order to do this, the agent must set the `--rehost`&&`--report`&&`-s` parameter at startup\n\n  - `--rehost` This represents the desired IP address for reuse, which cannot be `0.0.0.0` and generally should be the external address of the network card\n\n  - `--report` This represents the desired port for reuse\n\n  - `-s` This represents communication key\n\n  **This mode mainly supports windows and mac, linux is also possible, but there are more restrictions**\n\n  - admin：`./stowaway_admin -c 192.168.0.105:80 -s 123`\n  - agent： `./stowaway_agent  --report 80 --rehost 192.168.0.105 -s 123`\n\n- IPTABLES\n\n  Assuming that the agent uses the port reuse mechanism to reuse port 22\n\n  In order to do this, the agent must set the `-l`&&`--report`&&`-s` parameter at startup\n\n  - `-l` This represents the port that cannot be accessed normally, meaning the port you actually want the agent to listen on and accept connections\n\n  - `--report` This represents the desired port for reuse\n\n  - `-s` This represents communication key\n\n  **This method only support linux, agent will manipulate IPTABLES automatically,root permission is required**\n\n  - agent： `./stowaway_agent --report 22 -l 10000 -s 123`\n\n    After the agent has started, please use the `reuse.py` script located in the `script` directory first\n\n    Set the value of SECRET (the value of SECRET is the communication key, aka -s option)\n\n    Then execute：`python reuse.py --start --rhost xxx.xxx.xxx.xxx --rport 22`\n\n    - `--rhost` This represents the address of the agent\n\n    - `--rport` This represents the port being reused, which in this example should be 22.\n\n  - At this time, the admin can connect this agent：`./stowaway_admin -c xxx.xxx.xxx.xxx:22 -s 123`\n\n### Notice\n\n- The scenarios mentioned above only enumerate the connection between the admin and the agent. The connection between agents also follows the same principles and has no differences.\n\n- If the agent is terminated using `ctrl-c` or the `kill` command, the program will automatically clean up the iptables rules. However, if it is terminated using `kill -9`, it cannot be automatically cleaned up. Therefore, to prevent the iptables rules from not being cleaned up when the agent exits abnormally, resulting in the inability to access the reused service. So, when you need to shut down \"port reusing\", you should run: `python reuse.py --stop --rhost xxx.xxx.xxx.xxx --rport xxx`. This will disable the forwarding rules, allowing the original service to be accessed normally.\n\n- If using the IPTABLES mode for port reuse, it will forcefully listen on `0.0.0.0`, and cannot be specified using the `-l` parameter.\n\n## How to build a multi-level network?\n\nFrom the example above, it can be observed that only the admin and one agent are involved\n\nHowever, constructing a multi-level network is the core functionality of Stowaway\n\nIn Stowaway, building a multi-level network requires the use of commands such as `listen`, `connect`, and `sshtunnel` within the admin interface\n\nHere is an example\n\n- admin: `./stowaway_admin -l 9999 -s 123` \n\nAt this point, agent-1 has already connected to the admin\n\n- agent-1:  `./stowaway_agent -c 127.0.0.1:9999 -s 123`\n\nAnd, the user also wishes to connect to agent-2, as follows:\n\n- agent-2:  `./stowaway_agent -l 10000 -s 123`\n\nThen, the user can enter `use 0` -> `connect agent-2's IP:10000` via admin to add agent-2 to the network and become a child node of agent-1\n\nAfter that,If the user wishes to connect to another node, agent-3, but cannot access it through agent-1\n\nThen, in order to solve this problem, the user can enter `use 0` -> `listen` via admin -> select `1.Normal Passive` -> enter `10001` to have agent-1 listen on port 10001 and await connections from agent-3\n\nAfter the admin operation is completed, agent-3 can be started as follows\n\n- agent-3: `./stowaway_agent -c 127.0.0.1:10001 -s 123`\n\nAt this point, agent-3 has become another child node of agent-1 and joined the network.\n\nFor a detailed explanation of the `listen` and `sshtunnel` commands, please refer to the command analysis below.\n\n## How to reconnect?\n\nStowaway currently supports various methods of reconnection, summarized briefly as follows:\n\nFirstly, when the parent node goes offline, only one type of node will actively disconnect, namely the nodes that were started in active mode and have not set up reconnection.\n\nIf reconnection is set up, the node will attempt to reconnect at specified time intervals.\n\nAdditionally, all nodes started in passive mode will not actively disconnect. Instead, they will re-listen on the specified port based on the parameters set at startup. Users can still use `connect` and `sshtunnel` to reconnect these nodes to the network.\n\n## Some points you should know\n\n1. **If a branch disconnects due to network fluctuations or a middle node going offline, when attempting to reconnect, it is essential to connect to the head node of the missing branch.** For example, after the admin, there is node1. Node1 branches into two: one branch is node1 -> node 2 -> node 3 -> node 4, and the other branch is node1 -> node 5 -> node 6. If node2 goes offline, node3 and node4 will remain active. If the user wishes to reconnect node3 and node4 to the network, there are two options available. Firstly, if node1 can directly access node3, the user can reconnect node3 to the network at any time by using the `connect` or `sshtunnel` commands on node1. It's important to note that even if node1 can also access node4 directly, please do not connect to node4 directly. Instead, connect to the head node of the missing chain (node3->node4), which is node3. This way, both node3 and node4 can be reconnected to the network. Alternatively, if node1 cannot directly access node3 (i.e., it must go through node2), please restart node2 and join it to the network first. Then, on node2, use the `connect` or `sshtunnel` commands to connect to node3, thus reconnecting both node3 and node4 to the network.\n2. **When a node is offline, all `socks`, `backward`, and `forward` services related to this node and its child nodes will be forcibly stopped**\n\n## Command analysis\n\nIn the admin console, users can utilize the tab key for command completion and the arrow keys (up, down, left, right) to navigate through command history or move the cursor\n\nThe admin console is divided into two levels. The first level is the main panel, which includes the following commands:\n\n- `help`: Display help information for the main panel\n\n```\n(admin) >> help\n  help                                     \t\tShow help information\n  detail                                  \t\tDisplay connected nodes' detail\n  topo                                     \t\tDisplay nodes' topology\n  use        <id>                          \t\tSelect the target node you want to use\n  exit                                     \t\tExit Stowaway\n```\n\n- `detail`: Display detailed information about online nodes\n\n```\n(admin) >> detail\nNode[0] -> IP: 127.0.0.1:10000  Hostname: ph4ntoms-MBP.lan  User: ph4ntom\nMemo:\n```\n\n- `topo`: Display the parent-child relationships of online nodes\n\n```\n(admin) >> topo\nNode[0]'s children ->\nNode[1]\n\nNode[1]'s children ->\n```\n\n- `use`: Select an node\n\n```\n(admin) >> use 0\n(node 0) >>\n```\n\n- `exit`: Exit stowaway\n\n```\n(admin) >> exit\n[*] Do you really want to exit stowaway?(y/n): y\n[*] BYE!\n```\n\nWhen user selects an node via `use` command, admin will enter the second level: node panel, it includes the following commands:\n\n- `help`: Display the help information for the node panel\n\n```\n(node 0) >> help\n  help                                            Show help information\n  status                                          Show node status,including socks/forward/backward\n  listen                                          Start port listening on current node\n  addmemo    <string>                             Add memo for current node\n  delmemo                                         Delete memo of current node\n  ssh        <ip:port>                            Start SSH through current node\n  shell                                           Start an interactive shell on current node\n  socks      <lport> [username] [pass]            Start a socks5 server\n  stopsocks                                       Shut down socks services\n  connect    <ip:port>                            Connect to a new node\n  sshtunnel  <ip:sshport> <agent port>            Use sshtunnel to add the node into our topology\n  upload     <local filename> <remote filename>   Upload file to current node\n  download   <remote filename> <local filename>   Download file from current node\n  forward    <lport> <ip:port>                    Forward local port to specific remote ip:port\n  stopforward                                     Shut down forward services\n  backward    <rport> <lport>                     Backward remote port(agent) to local port(admin)\n  stopbackward                                    Shut down backward services\n  shutdwon                                        Terminate current node\n  back                                            Back to parent panel\n  exit                                            Exit Stowaway \n```\n\n- `status`: Display the socks/forward/backward status of the current node\n\n```\n(node 0) >> status\nSocks status:\n      ListenAddr: 0.0.0.0:10000    Username:    Password:\n-------------------------------------------------------------------------------------------\nForward status:\n      [1] Listening Addr: [::]:20000 , Remote Addr: 192.168.1.1:22 , Active Connnections: 0\n      [2] Listening Addr: [::]:30000 , Remote Addr: 192.168.1.1:22 , Active Connnections: 0\n-------------------------------------------------------------------------------------------\nBackward status:\n      [1] Remote Port: 40000 , Local Port: 50000 , Active Connnections: 0\n```\n\n- `listen`: Instruct the node to listen on a specific port and wait for connection from child node\n\n```\n(node 0) >> listen\n[*] MENTION! If you choose IPTables Reuse or SOReuse,you MUST CONFIRM that the node was initially started in the corresponding way!\n[*] When you choose IPTables Reuse or SOReuse, the node will use the initial config(when node started) to reuse port!\n[*] Please choose the mode(1.Normal passive / 2.IPTables Reuse / 3.SOReuse): 1\n[*] Please input the [ip:]<port> : 10001\n[*] Waiting for response......\n[*] Node is listening on 10001\n```\n\nNote that `listen` is a special command. As you can see, the `listen` command has three modes\n\n1. `Normal passive`: This option implies that the agent will listen on the target port in a normal way and wait for child nodes to connect.\n2. `IPTables Reuse`：This option implies that the agent will reuse the port using IPTables and wait for child nodes to connect.\n3. `SOReuse`：This option implies that the agent will reuse the port using SOReuse and wait for child nodes to connect.\n\nThe first mode is the most commonly used. If the parent node is listening in this way, child nodes only need to use `-c parent_node_ip:port` to join the network.\n\nThe second and third modes are rather unique. If the user selects the second or third mode, they must ensure that the node they are currently operating on has been started using port reuse. Otherwise, these two modes cannot be used.\n\nIn the second and third modes, users won't need to input any information. The node will automatically reuse the port using the parameters set at its own startup and prepare to accept connections from child nodes.\n\nFurthermore, the `listen` command can only accept one child node connection at a time. If multiple child nodes need to connect, please execute the `listen` command the corresponding number of times.\n\n- `addmemo`: Add a memo for the current node\n\n```\n(node 0) >> addmemo test\n[*] Memo added!\n(node 0) >> exit\n(admin) >> detail\nNode[0] -> IP: 127.0.0.1:10000  Hostname: ph4ntoms-MBP.lan  User: ph4ntom\nMemo:  test\n```\n\n- `delmemo`: Delete the memo of the current node\n\n```\n(node 0) >> delmemo\n[*] Memo deleted!\n(node 0) >> exit\n(admin) >> detail\nNode[0] -> IP: 127.0.0.1:10000  Hostname: ph4ntoms-MBP.lan  User: ph4ntom\nMemo:\n```\n\n- `ssh`: Instruct the node to connect to the target host via SSH.\n\n```\n(node 0) >> ssh 127.0.0.1:22\n[*] Please choose the auth method(1.username&&password / 2.certificate): 1\n[*] Please enter the username: ph4ntom\n[*] Please enter the password: *****\n[*] Waiting for response.....\n[*] Connect to target host via ssh successfully!\n # ph4ntom @ ph4ntoms-MBP in ~ 👑 [17:03:56]\n$ whoami\nph4ntom\n # ph4ntom @ ph4ntoms-MBP in ~ 👑 [17:04:16]\n$\n```\n\nUnder this mode, the tab key will be disabled\n\n- `shell`: Get the shell of the current node\n\n```\n(node 0) >> shell\n[*] Waiting for response.....\n[*] Shell is started successfully!\n\nbash: no job control in this shell\n\nThe default interactive shell is now zsh.\nTo update your account to use zsh, please run `chsh -s /bin/zsh`.\nFor more details, please visit https://support.apple.com/kb/HT208050.\nbash-3.2$ whoami\nph4ntom\nbash-3.2$\n```\n\nUnder this mode, the tab key will be disabled\n\n- `socks`：Start the socks5 service on the current node\n\n```\n(node 0) >> socks 7777\n[*] Trying to listen on 0.0.0.0:7777......\n[*] Waiting for response......\n[*] Socks start successfully!\n(node 0) >>\n```\n\nPlease note that the port 7777 is not opened on the agent, but rather on the admin\n\nIf you need to set a username and password, you can modify the above command to `socks 7777 <your username> <your password>`\n\nIf you need to specify the interface to listen on, you can modify the above command to `socks xxx.xxx.xxx.xxx:7777`\n\n- `stopsocks`: Stop the SOCKS5 service on the current node\n\n```\n(node 0) >> stopsocks\nSocks Info ---> ListenAddr: 0.0.0.0:7777    Username: <null>    Password: <null>\n[*] Do you really want to shutdown socks?(yes/no): yes\n[*] Closing......\n[*] Socks service has been closed successfully!\n(node 0) >>\n```\n\n- `connect`: Instruct the current node to connect to another child node\n\n```\nagent-1: ./stowaway_agent -l 10002\n```\n\n```\n(node 0) >> connect 127.0.0.1:10002\n[*] Waiting for response......\n[*] New node online! Node id is 1\n\n(node 0) >>\n```\n\n- `sshtunnel`: Instruct the current node to connect to another child node via ssh tunnel\n\n```\nagent-2: ./stowaway_agent -l 10003\n```\n\n```\n(node 0) >> sshtunnel 127.0.0.1:22 10003\n[*] Please choose the auth method(1.username&&password / 2.certificate): 1\n[*] Please enter the username: ph4ntom\n[*] Please enter the password: ******\n[*] Waiting for response.....\n[*] New node online! Node id is 2\n\n(node 0) >>\n```\n\nIn highly restricted network environments, Stowaway can utilize SSH tunneling to disguise its traffic as SSH traffic, thereby circumventing firewall restrictions\n\n- `upload`: Upload file to the current node\n\n```\n(node 0) >> upload test.7z test.xxx\n[*] File transmitting, please wait...\n136.07 KiB / 136.07 KiB [-----------------------------------------------------------------------------------] 100.00% ? p/s 0s\n```\n\n- `download`: Download file from the current node\n\n```\n(node 0) >> download test.xxx test.xxxx\n[*] File transmitting, please wait...\n136.07 KiB / 136.07 KiB [-----------------------------------------------------------------------------------] 100.00% ? p/s 0s\n```\n\n- `forward`: Map port on the admin to remote port\n\n```\n(node 0) >> forward 9000 127.0.0.1:22\n[*] Trying to listen on 0.0.0.0:9000......\n[*] Waiting for response......\n[*] Forward start successfully!\n(node 0) >>\n```\n\n```\n$ ssh 127.0.0.1 -p 9000\nPassword:\n # ph4ntom @ ph4ntoms-MBP in ~ 👑 [17:19:51]\n$\n```\n\n- `stopforward`: Close the remote mapping on the admin\n\n```\n(node 0) >> stopforward\n[0] All\n[1] Listening Addr : [::]:9000 , Remote Addr : 127.0.0.1:22 , Active Connnections : 1\n[*] Do you really want to shutdown forward?(yes/no): yes\n[*] Please choose one to close: 1\n[*] Closing......\n[*] Forward service has been closed successfully!\n```\n\n- `backward`: Reverse map the port on the current agent to the local port on the admin\n\n```\n(node 0) >> backward 9001 22\n[*] Trying to ask node to listen on 0.0.0.0:9001......\n[*] Waiting for response......\n[*] Backward start successfully!\n(node 0) >>\n```\n\n```\n$ ssh 127.0.0.1 -p 9001\nPassword:\n # ph4ntom @ ph4ntoms-MBP in ~ 🌈 [17:22:14]\n$\n```\n\n- `stopbackward`: Close the reverse mapping on the current node\n\n```\n(node 0) >> stopbackward\n[0] All\n[1] Remote Port : 9001 , Local Port : 22 , Active Connnections : 1\n[*] Do you really want to shutdown backward?(yes/no): yes\n[*] Please choose one to close: 1\n[*] Closing......\n[*] Backward service has been closed successfully!\n```\n\n- `shutdown`: Shutdown the current node \n\n```\n(node 1) >> shutdown\n(node 1) >>\n[*] Node 1 is offline!\n```\n\n- `back`: Return to main panel\n\n```\n(node 1) >> back\n(admin) >>\n```\n\n- `exit`: Exit Stowaway \n\n```\n(node 1) >> exit\n[*] Do you really want to exit stowaway?(y/n): y\n[*] BYE!\n```\n\n## TODO\n\n- [x] Fix the bug that may exists\n- [x] Support TLS\n- [ ] Support multi startnode\n\n### Attention\n\n- This porject is coding just for fun , the logic structure and code structure are not strict enough, please don't be so serious about it\n- Admin node MUST be online if you want to add a new node into the network\n- The admin only supports one directly connected agent node, but the agent node has no such restriction\n- If users use the admin on windows, please download [ansicon](https://github.com/adoxa/ansicon/releases) first, or download from [here](), and then enter the folder corresponding to the number of system bits. Execute `ansicon.exe -i`, otherwise garbled characters will appear on the admin\n- This program only supports standard `UDP ASSOCIATE` described in [RFC1928](https://www.ietf.org/rfc/rfc1928.txt). Please check the programs(such as scanners, etc.) you are using, make sure if the packet construction method comply with the standard [RFC1928](https://www.ietf.org/rfc/rfc1928.txt). Besides, the packet loss situation also needs to be handled by yourself.\n\n## 404Starlink\n\n<img src=\"https://github.com/knownsec/404StarLink/raw/master/Images/logo.png\" width=\"30%\">\n\nStowaway has joined [404Starlink](https://github.com/knownsec/404StarLink)\n\n## Acknowledgement\n\nThanks to the following developers and projects for their help during the development of Stowaway\n- [lz520520](https://github.com/lz520520)\n- [SignorMercurio](https://github.com/SignorMercurio)\n- [MM0x00](https://github.com/MM0x00)\n- [r0ck3rt](https://github.com/r0ck3rt)\n- [Termite](https://github.com/rootkiter/Termite)\n- [Venom](https://github.com/Dliv3/Venom)"
        },
        {
          "name": "admin",
          "type": "tree",
          "content": null
        },
        {
          "name": "agent",
          "type": "tree",
          "content": null
        },
        {
          "name": "ansicon",
          "type": "tree",
          "content": null
        },
        {
          "name": "crypto",
          "type": "tree",
          "content": null
        },
        {
          "name": "global",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.7578125,
          "content": "module Stowaway\n\ngo 1.13\n\nrequire (\n\tgithub.com/cheggaaa/pb v2.0.7+incompatible\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/eiannone/keyboard v0.0.0-20200508000154-caf4b762e807\n\tgithub.com/fatih/color v1.10.0\n\tgithub.com/gofrs/uuid v4.0.0+incompatible\n\tgithub.com/libp2p/go-reuseport v0.0.2\n\tgithub.com/nsf/termbox-go v1.1.0\n\tgolang.org/x/crypto v0.0.0-20201012173705-84dcc777aaee\n\tgolang.org/x/sys v0.0.0-20210104204734-6f8348627aad // indirect\n\tgolang.org/x/text v0.3.0\n\tgopkg.in/VividCortex/ewma.v1 v1.1.1 // indirect\n\tgopkg.in/cheggaaa/pb.v2 v2.0.7 // indirect\n\tgopkg.in/fatih/color.v1 v1.7.0 // indirect\n\tgopkg.in/mattn/go-colorable.v0 v0.1.0 // indirect\n\tgopkg.in/mattn/go-isatty.v0 v0.0.4 // indirect\n\tgopkg.in/mattn/go-runewidth.v0 v0.0.4 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.103515625,
          "content": "github.com/cheggaaa/pb v2.0.7+incompatible h1:gLKifR1UkZ/kLkda5gC0K6c8g+jU2sINPtBeOiNlMhU=\ngithub.com/cheggaaa/pb v2.0.7+incompatible/go.mod h1:pQciLPpbU0oxA0h+VJYYLxO+XeDQb5pZijXscXHm81s=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/eiannone/keyboard v0.0.0-20200508000154-caf4b762e807 h1:jdjd5e68T4R/j4PWxfZqcKY8KtT9oo8IPNVuV4bSXDQ=\ngithub.com/eiannone/keyboard v0.0.0-20200508000154-caf4b762e807/go.mod h1:Xoiu5VdKMvbRgHuY7+z64lhu/7lvax/22nzASF6GrO8=\ngithub.com/fatih/color v1.10.0 h1:s36xzo75JdqLaaWoiEHk767eHiwo0598uUxyfiPkDsg=\ngithub.com/fatih/color v1.10.0/go.mod h1:ELkj/draVOlAH/xkhN6mQ50Qd0MPOk5AAr3maGEBuJM=\ngithub.com/gofrs/uuid v4.0.0+incompatible h1:1SD/1F5pU8p29ybwgQSwpQk+mwdRrXCYuPhW6m+TnJw=\ngithub.com/gofrs/uuid v4.0.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/libp2p/go-reuseport v0.0.2 h1:XSG94b1FJfGA01BUrT82imejHQyTxO4jEWqheyCXYvU=\ngithub.com/libp2p/go-reuseport v0.0.2/go.mod h1:SPD+5RwGC7rcnzngoYC86GjPzjSywuQyMVAheVBD9nQ=\ngithub.com/mattn/go-colorable v0.1.8 h1:c1ghPdyEDarC70ftn0y+A/Ee++9zz8ljHG1b13eJ0s8=\ngithub.com/mattn/go-colorable v0.1.8/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-isatty v0.0.12 h1:wuysRhFDzyxgEmMf5xjvJ2M9dZoWAXNNr5LSBS7uHXY=\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-runewidth v0.0.9 h1:Lm995f3rfxdpd6TSmuVCHVb/QhupuXlYr8sCI/QdE+0=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/nsf/termbox-go v1.1.0 h1:R+GIXVMaDxDQ2VHem5vO5h0mI8ZxLECTUNw1ZzXODzI=\ngithub.com/nsf/termbox-go v1.1.0/go.mod h1:T0cTdVuOwf7pHQNtfhnEbzHbcNyCEcVU4YPpouCbVxo=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.5.1 h1:nOGnQDM7FYENwehXlg/kFVnos3rEvtKTjRvOWSzb6H4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20201012173705-84dcc777aaee h1:4yd7jl+vXjalO5ztz6Vc1VADv+S/80LGJmyl1ROJ2AI=\ngolang.org/x/crypto v0.0.0-20201012173705-84dcc777aaee/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190228124157-a34e9553db1e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210104204734-6f8348627aad h1:MCsdmFSdEd4UEa5TKS5JztCRHK/WtvNei1edOj5RSRo=\ngolang.org/x/sys v0.0.0-20210104204734-6f8348627aad/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngopkg.in/VividCortex/ewma.v1 v1.1.1 h1:tWHEKkKq802K/JT9RiqGCBU5fW3raAPnJGTE9ostZvg=\ngopkg.in/VividCortex/ewma.v1 v1.1.1/go.mod h1:TekXuFipeiHWiAlO1+wSS23vTcyFau5u3rxXUSXj710=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/cheggaaa/pb.v2 v2.0.7 h1:beaAg8eacCdMQS9Y7obFEtkY7gQl0uZ6Zayb3ry41VY=\ngopkg.in/cheggaaa/pb.v2 v2.0.7/go.mod h1:0CiZ1p8pvtxBlQpLXkHuUTpdJ1shm3OqCF1QugkjHL4=\ngopkg.in/fatih/color.v1 v1.7.0 h1:bYGjb+HezBM6j/QmgBfgm1adxHpzzrss6bj4r9ROppk=\ngopkg.in/fatih/color.v1 v1.7.0/go.mod h1:P7yosIhqIl/sX8J8UypY5M+dDpD2KmyfP5IRs5v/fo0=\ngopkg.in/mattn/go-colorable.v0 v0.1.0 h1:WYuADWvfvYC07fm8ygYB3LMcsc5CunpxfMGKawHkAos=\ngopkg.in/mattn/go-colorable.v0 v0.1.0/go.mod h1:BVJlBXzARQxdi3nZo6f6bnl5yR20/tOL6p+V0KejgSY=\ngopkg.in/mattn/go-isatty.v0 v0.0.4 h1:NtS1rQGQr4IaFWBGz4Cz4BhB///gyys4gDVtKA7hIsc=\ngopkg.in/mattn/go-isatty.v0 v0.0.4/go.mod h1:wt691ab7g0X4ilKZNmMII3egK0bTxl37fEn/Fwbd8gc=\ngopkg.in/mattn/go-runewidth.v0 v0.0.4 h1:r0P71TnzQDlNIcizCqvPSSANoFa3WVGtcNJf3TWurcY=\ngopkg.in/mattn/go-runewidth.v0 v0.0.4/go.mod h1:BmXejnxvhwdaATwiJbB1vZ2dtXkQKZGu9yLFCZb4msQ=\ngopkg.in/yaml.v2 v2.2.2 h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "protocol",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}