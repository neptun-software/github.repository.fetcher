{
  "metadata": {
    "timestamp": 1736566776767,
    "page": 334,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nalgeon/redka",
      "stars": 3570,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "build/\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5390625,
          "content": "FROM alpine:edge AS build\nRUN apk add --no-cache --update gcc g++ go make\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . .\nRUN make build build-cli\n\nFROM alpine:latest\nRUN apk add --no-cache --repository=https://dl-cdn.alpinelinux.org/alpine/edge/main valkey-cli\nRUN mkdir /data\nVOLUME /data\nWORKDIR /data\nCOPY --from=build /app/build/redka /usr/local/bin/redka\nCOPY --from=build /app/build/redka-cli /usr/local/bin/redka-cli\nHEALTHCHECK CMD valkey-cli PING || exit 1\nEXPOSE 6379\nCMD [\"redka\", \"-h\", \"0.0.0.0\", \"-p\", \"6379\", \"redka.db\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4921875,
          "content": "Copyright (c) 2024, Anton Zhiyanov <https://antonz.org>\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n    * Neither the name of Redka nor the names of its contributors\n      may be used to endorse or promote products derived from this software\n      without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8203125,
          "content": ".PHONY: setup lint vet test build run\n\nhas_git := $(shell command -v git 2>/dev/null)\n\nifdef has_git\nbuild_rev := $(shell git rev-parse --short HEAD)\ngit_tag := $(shell git describe --tags --exact-match 2>/dev/null)\nelse\nbuild_rev := unknown\nendif\n\nifdef git_tag\nbuild_ver := $(git_tag)\nelse\nbuild_ver := main\nendif\n\nbuild_date := $(shell date -u '+%Y-%m-%dT%H:%M:%S')\n\nsetup:\n\t@go mod download\n\nlint:\n\t@golangci-lint run --print-issued-lines=false --out-format=colored-line-number ./...\n\nvet:\n\t@go vet ./...\n\ntest:\n\t@go test ./... -v\n\n\nbuild:\n\t@CGO_ENABLED=1 go build -ldflags \"-s -w -X main.version=$(build_ver) -X main.commit=$(build_rev) -X main.date=$(build_date)\" -trimpath -o build/redka -v cmd/redka/main.go\n\nbuild-cli:\n\t@CGO_ENABLED=1 go build -ldflags \"-s -w\" -trimpath -o build/redka-cli -v cmd/cli/main.go\n\nrun:\n\t@./build/redka\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.13671875,
          "content": "<img alt=\"Redka\" src=\"logo.svg\" height=\"80\" align=\"center\">\n\nRedka aims to reimplement the core parts of Redis with SQLite, while remaining compatible with Redis API.\n\nNotable features:\n\n-   Data does not have to fit in RAM.\n-   ACID transactions.\n-   SQL views for better introspection and reporting.\n-   Both in-process (Go API) and standalone (RESP) servers.\n-   Redis-compatible commands and wire protocol.\n\nRedka is [functionally ready](docs/roadmap.md) for 1.0. Feel free to try it in non-critical production scenarios and provide feedback in the issues.\n\n## Commands\n\nRedka supports five core Redis data types:\n\n-   [Strings](docs/commands/strings.md) are the most basic Redis type, representing a sequence of bytes.\n-   [Lists](docs/commands/lists.md) are sequences of strings sorted by insertion order.\n-   [Sets](docs/commands/sets.md) are unordered collections of unique strings.\n-   [Hashes](docs/commands/hashes.md) are field-value (hash)maps.\n-   [Sorted sets](docs/commands/sorted-sets.md) (zsets) are collections of unique strings ordered by each string's associated score.\n\nRedka also provides commands for [key management](docs/commands/keys.md), [server/connection management](docs/commands/server.md), and [transactions](docs/commands/transactions.md).\n\n## Installation and usage\n\nRedka comes in two flavors:\n\n-   Standalone Redis-compatible server: [installation](docs/install-standalone.md), [usage](docs/usage-standalone.md).\n-   Go module for in-process use: [installation](docs/install-module.md), [usage](docs/usage-module.md).\n\n## Performance\n\nAccording to the [benchmarks](docs/performance.md), Redka is several times slower than Redis. Still, it can do up to 100K op/sec on a Macbook Air, which is pretty good if you ask me (and probably 10x more than most applications will ever need).\n\nRedka stores data in a [SQLite database](docs/persistence.md) with a simple schema and provides views for better introspection.\n\n## Contributing\n\nContributions are welcome. For anything other than bugfixes, please first open an issue to discuss what you want to change.\n\nBe sure to add or update tests as appropriate.\n\n## Acknowledgements\n\nRedka would not be possible without these great projects and their creators:\n\n-   [Redis](https://redis.io/) ([Salvatore Sanfilippo](https://github.com/antirez)). It's such an amazing idea to go beyond the get-set paradigm and provide a convenient API for more complex data structures.\n-   [SQLite](https://sqlite.org/) ([D. Richard Hipp](https://www.sqlite.org/crew.html)). The in-process database powering the world.\n-   [Redcon](https://github.com/tidwall/redcon) ([Josh Baker](https://github.com/tidwall)). A very clean and convenient implementation of a RESP server.\n\nLogo font by [Ek Type](https://ektype.in/).\n\n## Support\n\nRedka is mostly a [one-man](https://antonz.org/) project, not backed by a VC fund or anything.\n\nIf you find Redka useful, please star it on GitHub and spread the word among your peers. It really helps to move the project forward.\n\nIf you use Redka for commercial purposes, consider [purchasing support](https://antonz.gumroad.com/l/redka-plus).\n\nâ˜… [Subscribe](https://antonz.org/subscribe/) to stay on top of new features.\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.2236328125,
          "content": "module github.com/nalgeon/redka\n\ngo 1.22\n\nrequire (\n\tgithub.com/mattn/go-sqlite3 v1.14.22\n\tgithub.com/tidwall/redcon v1.6.2\n)\n\nrequire (\n\tgithub.com/tidwall/btree v1.7.0 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.7490234375,
          "content": "github.com/mattn/go-sqlite3 v1.14.22 h1:2gZY6PC6kBnID23Tichd1K+Z0oS6nE/XwU+Vz/5o4kU=\ngithub.com/mattn/go-sqlite3 v1.14.22/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=\ngithub.com/tidwall/btree v1.1.0/go.mod h1:TzIRzen6yHbibdSfK6t8QimqbUnoxUSrZfeW7Uob0q4=\ngithub.com/tidwall/btree v1.7.0 h1:L1fkJH/AuEh5zBnnBbmTwQ5Lt+bRJ5A8EWecslvo9iI=\ngithub.com/tidwall/btree v1.7.0/go.mod h1:twD9XRA5jj9VUQGELzDO4HPQTNJsoWWfYEL+EUQ2cKY=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/redcon v1.6.2 h1:5qfvrrybgtO85jnhSravmkZyC0D+7WstbfCs3MmPhow=\ngithub.com/tidwall/redcon v1.6.2/go.mod h1:p5Wbsgeyi2VSTBWOcA5vRXrOb9arFTcU2+ZzFjqV75Y=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 9.013671875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Generated by Pixelmator Pro 2.4.3 -->\n<svg width=\"710\" height=\"165\" viewBox=\"0 0 710 165\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <path id=\"Redka\" fill=\"#004d81\" fill-rule=\"evenodd\" stroke=\"none\" d=\"M 661.112 116.375999 C 663.92804 116.375999 666.711975 116.087997 669.463989 115.512001 C 672.216003 114.935997 674.296021 114.200005 675.703979 113.304001 L 675.703979 95.639999 L 659.960022 96.984001 C 655.863953 97.368004 652.567993 98.29599 650.072021 99.767998 C 647.575989 101.240005 646.328003 103.447983 646.328003 106.391998 C 646.328003 109.46402 647.47998 111.895996 649.783997 113.688004 C 652.088013 115.480011 655.863953 116.375999 661.112 116.375999 Z M 659.960022 39.767998 C 666.616028 39.767998 672.664001 40.439995 678.104004 41.783997 C 683.544006 43.128006 688.18396 45.207985 692.023987 48.024002 C 695.864014 50.840012 698.839966 54.423981 700.952026 58.776001 C 703.064026 63.128021 704.119995 68.247971 704.119995 74.136002 L 704.119995 117.528 C 704.119995 120.856018 703.255981 123.511993 701.528015 125.496002 C 699.799988 127.480011 697.720032 129.175995 695.288025 130.584 C 691.320007 133.016006 686.456055 134.871994 680.695984 136.152008 C 674.935974 137.432007 668.40802 138.072006 661.112 138.072006 C 647.927917 138.072006 637.432068 135.544022 629.624023 130.488007 C 621.815979 125.431976 617.911987 117.720047 617.911987 107.352005 C 617.911987 98.519958 620.53595 91.800026 625.783997 87.192001 C 631.032043 82.583977 639.095947 79.704002 649.976013 78.552002 L 675.512024 75.863998 L 675.512024 73.751999 C 675.512024 69.655983 673.848022 66.64801 670.52002 64.727997 C 667.191956 62.807991 662.392029 61.848 656.119995 61.848 C 651.255981 61.848 646.488037 62.423996 641.815979 63.575996 C 637.143982 64.728004 632.952026 66.071991 629.23999 67.608002 C 627.703979 66.583992 626.392029 65.016014 625.304016 62.903999 C 624.216003 60.791992 623.671997 58.520012 623.671997 56.087997 C 623.671997 50.455971 626.615967 46.424011 632.504028 43.991997 C 636.216003 42.583992 640.53595 41.528 645.463989 40.823997 C 650.392029 40.119995 655.223999 39.767998 659.960022 39.767998 Z\"/>\n    <path id=\"Shape\" fill=\"#004d81\" fill-rule=\"evenodd\" stroke=\"none\" d=\"M 573.367981 87.575996 L 606.583984 119.832001 C 605.94397 125.208023 604.312012 129.335983 601.687988 132.216003 C 599.063965 135.096008 595.320007 136.535995 590.455994 136.535995 C 586.743958 136.535995 583.480042 135.640015 580.664001 133.847992 C 577.847961 132.056 574.712036 129.112015 571.255981 125.015999 L 548.40802 97.944 L 548.40802 134.807999 C 547.127991 135.192001 545.335999 135.544006 543.031982 135.863998 C 540.727966 136.184006 538.16803 136.343994 535.35199 136.343994 C 529.59198 136.343994 525.432007 135.416016 522.872009 133.559998 C 520.312012 131.703995 519.031982 128.088028 519.031982 122.712006 L 519.031982 10.007996 C 520.440002 9.623993 522.295959 9.240005 524.599976 8.856003 C 526.903992 8.472 529.463989 8.279999 532.280029 8.279999 C 538.040039 8.279999 542.167969 9.23999 544.664001 11.160004 C 547.160034 13.080017 548.40802 16.727966 548.40802 22.104004 L 548.40802 76.440002 L 583.159973 41.112 C 589.176025 41.112 593.975952 42.455986 597.559998 45.143997 C 601.144043 47.832016 602.935974 51.159981 602.935974 55.127998 C 602.935974 58.584015 601.752014 61.623985 599.383972 64.248001 C 597.015991 66.872017 593.335999 70.359978 588.343994 74.711998 Z\"/>\n    <path id=\"path1\" fill=\"#ee3344\" fill-rule=\"evenodd\" stroke=\"none\" d=\"M 451.640015 39.767998 C 454.584015 39.767998 457.367981 39.991997 459.992004 40.440002 C 462.616028 40.888 465.015991 41.495995 467.191986 42.264 L 467.191986 10.007996 C 468.600006 9.623993 470.455994 9.240005 472.76001 8.856003 C 475.064026 8.472 477.623993 8.279999 480.440002 8.279999 C 486.200043 8.279999 490.327972 9.23999 492.824005 11.160004 C 495.320007 13.080017 496.567993 16.727966 496.567993 22.104004 L 496.567993 115.608002 C 496.567993 118.680016 495.928009 121.271988 494.64801 123.384003 C 493.367981 125.49601 491.320007 127.44799 488.503998 129.240005 C 484.919983 131.416016 480.312042 133.399994 474.679993 135.192001 C 469.047974 136.984009 462.584045 137.880005 455.287994 137.880005 C 439.159912 137.880005 426.456055 133.81604 417.175995 125.688004 C 407.895966 117.559959 403.256012 105.36808 403.256012 89.112 C 403.256012 80.663956 404.503998 73.368034 407 67.223999 C 409.496002 61.079971 412.919983 55.960022 417.272003 51.863998 C 421.624023 47.767982 426.743958 44.728012 432.631989 42.744003 C 438.52002 40.759987 444.855957 39.767998 451.640015 39.767998 Z M 467.384003 65.688004 C 465.720001 64.919998 463.895996 64.248001 461.911987 63.671997 C 459.927979 63.096001 457.848022 62.807999 455.671997 62.807999 C 448.759979 62.807999 443.256012 64.919975 439.160004 69.143997 C 435.063965 73.368019 433.015991 80.087952 433.015991 89.304001 C 433.015991 98.136047 434.967987 104.567978 438.872009 108.599998 C 442.776031 112.632019 448.18396 114.647995 455.096008 114.647995 C 457.784027 114.647995 460.18399 114.360001 462.29599 113.783997 C 464.40802 113.207993 466.104004 112.536003 467.384003 111.768005 Z\"/>\n    <path id=\"path2\" fill=\"#004d81\" fill-rule=\"evenodd\" stroke=\"none\" d=\"M 328.18399 101.015999 C 329.976013 106.392029 333.111969 110.199989 337.59201 112.440002 C 342.072021 114.680008 347.255981 115.800003 353.144012 115.800003 C 358.52002 115.800003 363.575989 115.064011 368.312012 113.591995 C 373.048035 112.119995 376.888 110.488007 379.832001 108.695999 C 381.752014 109.976006 383.35199 111.639984 384.631989 113.688004 C 385.912018 115.736008 386.552002 117.975983 386.552002 120.408005 C 386.552002 123.35202 385.656006 125.911987 383.864014 128.087997 C 382.071991 130.264008 379.608002 132.087997 376.471985 133.559998 C 373.335999 135.032013 369.624023 136.119995 365.335999 136.824005 C 361.047974 137.528 356.344025 137.880005 351.223999 137.880005 C 343.671967 137.880005 336.696045 136.824005 330.29599 134.712006 C 323.895966 132.599991 318.392029 129.46402 313.783997 125.304001 C 309.175964 121.143982 305.560028 115.928032 302.936005 109.655998 C 300.311981 103.383972 299 96.02404 299 87.575996 C 299 79.383957 300.311981 72.280029 302.936005 66.264 C 305.560028 60.247971 309.079987 55.25602 313.496002 51.288002 C 317.912018 47.319977 322.967957 44.408012 328.664001 42.552002 C 334.360016 40.695992 340.215973 39.767998 346.231995 39.767998 C 352.76004 39.767998 358.743988 40.759987 364.18399 42.744003 C 369.624023 44.728012 374.29599 47.511986 378.200012 51.096001 C 382.104034 54.680016 385.143982 58.967972 387.320007 63.959999 C 389.496002 68.952026 390.584015 74.391968 390.584015 80.279999 C 390.584015 84.376022 389.496002 87.44799 387.320007 89.496002 C 385.143982 91.544014 382.072021 92.888 378.104004 93.528 Z M 346.424011 61.463997 C 340.919983 61.463997 336.344025 63.159981 332.696014 66.552002 C 329.047974 69.944016 326.903992 74.839966 326.264008 81.239998 L 362.936005 75.288002 C 362.679993 71.959984 361.208008 68.824013 358.519989 65.879997 C 355.832001 62.935982 351.800018 61.463997 346.424011 61.463997 Z\"/>\n    <path id=\"path3\" fill=\"#004d81\" fill-rule=\"evenodd\" stroke=\"none\" d=\"M 285.368011 56.087997 C 285.368011 63.512039 283.416016 70.167969 279.511993 76.056 C 275.607971 81.944031 270.328033 86.615982 263.671997 90.071999 C 268.920013 96.984032 273.94397 103.479965 278.743988 109.559998 C 283.544037 115.64003 287.095978 120.53598 289.399994 124.248001 C 288.247986 128.344025 286.104004 131.447998 282.967987 133.559998 C 279.83197 135.672012 276.40802 136.727997 272.696014 136.727997 C 267.83197 136.727997 264.120026 135.672012 261.559998 133.559998 C 259 131.447998 256.568024 128.536011 254.264008 124.824005 L 235.832001 96.216003 L 222.584 96.216003 L 222.584 134.807999 C 221.175995 135.192001 219.192017 135.544006 216.632004 135.863998 C 214.071991 136.184006 211.384018 136.343994 208.567993 136.343994 C 202.551971 136.343994 198.360016 135.320007 195.992004 133.272003 C 193.623993 131.223999 192.440002 127.512024 192.440002 122.136002 L 192.440002 29.016006 C 192.440002 26.455994 193.112 24.472 194.455994 23.063995 C 195.800003 21.655991 197.751984 20.568008 200.311996 19.800003 C 204.40802 18.263992 209.335968 17.17601 215.095993 16.535995 C 220.856033 15.895996 226.871964 15.576004 233.143997 15.576004 C 250.552094 15.576004 263.607971 19.191971 272.312012 26.423996 C 281.016052 33.656036 285.368011 43.543938 285.368011 56.087997 Z M 234.104004 72.984001 C 240.248032 72.984001 245.239975 71.608017 249.080002 68.856003 C 252.920013 66.103989 254.839996 61.912025 254.839996 56.279999 C 254.839996 45.271942 247.480072 39.767998 232.759995 39.767998 C 230.71199 39.767998 228.856003 39.863998 227.192001 40.056 C 225.527985 40.248001 223.864014 40.472 222.199997 40.727997 L 222.199997 72.984001 Z\"/>\n    <path id=\"path4\" fill=\"#ee3344\" stroke=\"none\" d=\"M 141.857376 131.262268 C 106.08596 167.033676 4.462656 162.968735 4.462656 162.968735 C 4.462656 162.968735 0.39772 61.345428 36.169121 25.57402 C 65.803299 -4.06015 113.485352 -4.423965 142.670349 24.761047 C 171.855331 53.946037 171.491531 101.62809 141.857376 131.262268 Z\"/>\n</svg>\n"
        },
        {
          "name": "redka.go",
          "type": "blob",
          "size": 10.9541015625,
          "content": "// Package Redka implements Redis-like database backed by SQLite.\n// It provides an API to interact with data structures like keys,\n// strings and hashes.\n//\n// Typically, you open a database with [Open] and use the returned\n// [DB] instance methods like [DB.Key] or [DB.Str] to access the\n// data structures. You should only use one instance of DB throughout\n// your program and close it with [DB.Close] when the program exits.\npackage redka\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"io\"\n\t\"log/slog\"\n\t\"time\"\n\n\t\"github.com/nalgeon/redka/internal/core\"\n\t\"github.com/nalgeon/redka/internal/rhash\"\n\t\"github.com/nalgeon/redka/internal/rkey\"\n\t\"github.com/nalgeon/redka/internal/rlist\"\n\t\"github.com/nalgeon/redka/internal/rset\"\n\t\"github.com/nalgeon/redka/internal/rstring\"\n\t\"github.com/nalgeon/redka/internal/rzset\"\n\t\"github.com/nalgeon/redka/internal/sqlx\"\n)\n\n// A TypeID identifies the type of the key and thus\n// the data structure of the value with that key.\ntype TypeID = core.TypeID\n\nconst (\n\tTypeAny    = core.TypeAny\n\tTypeString = core.TypeString\n\tTypeList   = core.TypeList\n\tTypeSet    = core.TypeSet\n\tTypeHash   = core.TypeHash\n\tTypeZSet   = core.TypeZSet\n)\n\n// Common errors returned by data structure methods.\nvar (\n\tErrKeyType   = core.ErrKeyType   // key type mismatch\n\tErrNotFound  = core.ErrNotFound  // key or element not found\n\tErrValueType = core.ErrValueType // invalid value type\n)\n\n// Key represents a key data structure.\n// Each key uniquely identifies a data structure stored in the\n// database (e.g. a string, a list, or a hash). There can be only one\n// data structure with a given key, regardless of type. For example,\n// you can't have a string and a hash map with the same key.\ntype Key = core.Key\n\n// Value represents a value stored in a database (a byte slice).\n// It can be converted to other scalar types.\ntype Value = core.Value\n\n// Options is the configuration for the database.\ntype Options struct {\n\t// SQL driver name.\n\t// If empty, uses \"sqlite3\".\n\tDriverName string\n\t// SQL pragmas to set on the database connection.\n\t// If nil, uses the default pragmas:\n\t//  - journal_mode=wal\n\t//  - synchronous=normal\n\t//  - temp_store=memory\n\t//  - mmap_size=268435456\n\t//  - foreign_keys=on\n\tPragma map[string]string\n\t// Logger for the database. If nil, uses a silent logger.\n\tLogger *slog.Logger\n\n\t// If true, opens the database in read-only mode.\n\treadonly bool\n}\n\nvar defaultOptions = Options{\n\tDriverName: \"sqlite3\",\n\tPragma:     sqlx.DefaultPragma,\n\tLogger:     slog.New(slog.NewTextHandler(io.Discard, nil)),\n}\n\n// DB is a Redis-like database backed by SQLite.\n// Provides access to data structures like keys, strings, and hashes.\n//\n// DB is safe for concurrent use by multiple goroutines as long as you use\n// a single instance of DB throughout your program.\ntype DB struct {\n\t*sqlx.DB[*Tx]\n\thashDB   *rhash.DB\n\tkeyDB    *rkey.DB\n\tlistDB   *rlist.DB\n\tsetDB    *rset.DB\n\tstringDB *rstring.DB\n\tzsetDB   *rzset.DB\n\tbg       *time.Ticker\n\tlog      *slog.Logger\n}\n\n// Open opens a new or existing database at the given path.\n// Creates the database schema if necessary.\n//\n// The returned [DB] is safe for concurrent use by multiple goroutines\n// as long as you use a single instance throughout your program.\n// Typically, you only close the DB when the program exits.\n//\n// The opts parameter is optional. If nil, uses default options.\nfunc Open(path string, opts *Options) (*DB, error) {\n\t// Apply the default options if necessary.\n\topts = applyOptions(defaultOptions, opts)\n\n\t// Open the read-write database handle.\n\tdataSource := sqlx.DataSource(path, true, opts.Pragma)\n\trw, err := sql.Open(opts.DriverName, dataSource)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Open the read-only database handle.\n\tdataSource = sqlx.DataSource(path, false, opts.Pragma)\n\tro, err := sql.Open(opts.DriverName, dataSource)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Create the database-backed repository.\n\tsdb, err := sqlx.Open(rw, ro, newTx, opts.Pragma)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn new(sdb, opts)\n}\n\n// OpenRead opens an existing database at the given path in read-only mode.\nfunc OpenRead(path string, opts *Options) (*DB, error) {\n\t// Apply the default options if necessary.\n\topts = applyOptions(defaultOptions, opts)\n\topts.readonly = true\n\n\t// Open the read-only database handle.\n\tdataSource := sqlx.DataSource(path, false, opts.Pragma)\n\tdb, err := sql.Open(opts.DriverName, dataSource)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Create the database-backed repository.\n\tsdb := sqlx.New(db, db, newTx)\n\treturn new(sdb, opts)\n}\n\n// OpenDB connects to an existing SQL database.\n// Creates the database schema if necessary.\n// The opts parameter is optional. If nil, uses default options.\nfunc OpenDB(rw *sql.DB, ro *sql.DB, opts *Options) (*DB, error) {\n\topts = applyOptions(defaultOptions, opts)\n\tsdb, err := sqlx.Open(rw, ro, newTx, opts.Pragma)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn new(sdb, opts)\n}\n\n// OpenReadDB connects to an existing SQL database in read-only mode.\nfunc OpenReadDB(db *sql.DB, opts *Options) (*DB, error) {\n\topts = applyOptions(defaultOptions, opts)\n\topts.readonly = true\n\tsdb := sqlx.New(db, db, newTx)\n\treturn new(sdb, opts)\n}\n\n// new creates a new database.\nfunc new(sdb *sqlx.DB[*Tx], opts *Options) (*DB, error) {\n\trdb := &DB{\n\t\tDB:       sdb,\n\t\thashDB:   rhash.New(sdb.RW, sdb.RO),\n\t\tkeyDB:    rkey.New(sdb.RW, sdb.RO),\n\t\tlistDB:   rlist.New(sdb.RW, sdb.RO),\n\t\tsetDB:    rset.New(sdb.RW, sdb.RO),\n\t\tstringDB: rstring.New(sdb.RW, sdb.RO),\n\t\tzsetDB:   rzset.New(sdb.RW, sdb.RO),\n\t\tlog:      opts.Logger,\n\t}\n\tif !opts.readonly {\n\t\trdb.bg = rdb.startBgManager()\n\t}\n\treturn rdb, nil\n}\n\n// Hash returns the hash repository.\n// A hash (hashmap) is a field-value map associated with a key.\n// Use the hash repository to work with individual hashmaps\n// and their fields.\nfunc (db *DB) Hash() *rhash.DB {\n\treturn db.hashDB\n}\n\n// Key returns the key repository.\n// A key is a unique identifier for a data structure\n// (string, list, hash, etc.). Use the key repository\n// to manage all keys regardless of their type.\nfunc (db *DB) Key() *rkey.DB {\n\treturn db.keyDB\n}\n\n// List returns the list repository.\n// A list is a sequence of strings ordered by insertion order.\n// Use the list repository to work with lists and their elements.\nfunc (db *DB) List() *rlist.DB {\n\treturn db.listDB\n}\n\n// Set returns the set repository.\n// A set is an unordered collection of unique strings.\n// Use the set repository to work with individual sets\n// and their elements, and to perform set operations.\nfunc (db *DB) Set() *rset.DB {\n\treturn db.setDB\n}\n\n// Str returns the string repository.\n// A string is a slice of bytes associated with a key.\n// Use the string repository to work with individual strings.\nfunc (db *DB) Str() *rstring.DB {\n\treturn db.stringDB\n}\n\n// ZSet returns the sorted set repository.\n// A sorted set (zset) is a like a set, but each element has a score,\n// and elements are ordered by score from low to high.\n// Use the sorted set repository to work with individual sets\n// and their elements, and to perform set operations.\nfunc (db *DB) ZSet() *rzset.DB {\n\treturn db.zsetDB\n}\n\n// Update executes a function within a writable transaction.\n// See the [tx] example for details.\n//\n// [tx]: https://github.com/nalgeon/redka/blob/main/example/tx/main.go\nfunc (db *DB) Update(f func(tx *Tx) error) error {\n\treturn db.DB.Update(f)\n}\n\n// UpdateContext executes a function within a writable transaction.\n// See the [tx] example for details.\n//\n// [tx]: https://github.com/nalgeon/redka/blob/main/example/tx/main.go\nfunc (db *DB) UpdateContext(ctx context.Context, f func(tx *Tx) error) error {\n\treturn db.DB.UpdateContext(ctx, f)\n}\n\n// View executes a function within a read-only transaction.\n// See the [tx] example for details.\n//\n// [tx]: https://github.com/nalgeon/redka/blob/main/example/tx/main.go\nfunc (db *DB) View(f func(tx *Tx) error) error {\n\treturn db.DB.View(f)\n}\n\n// ViewContext executes a function within a read-only transaction.\n// See the [tx] example for details.\n//\n// [tx]: https://github.com/nalgeon/redka/blob/main/example/tx/main.go\nfunc (db *DB) ViewContext(ctx context.Context, f func(tx *Tx) error) error {\n\treturn db.DB.ViewContext(ctx, f)\n}\n\n// Close closes the database.\n// It's safe for concurrent use by multiple goroutines.\nfunc (db *DB) Close() error {\n\tif db.bg != nil {\n\t\tdb.bg.Stop()\n\t}\n\tvar allErr error\n\tif err := db.RW.Close(); err != nil {\n\t\tallErr = err\n\t}\n\tif err := db.RO.Close(); allErr == nil {\n\t\tallErr = err\n\t}\n\treturn allErr\n}\n\n// startBgManager starts the goroutine than runs\n// in the background and deletes expired keys.\n// Triggers every 60 seconds, deletes up all expired keys.\nfunc (db *DB) startBgManager() *time.Ticker {\n\t// TODO: needs further investigation. Deleting all keys may be expensive\n\t// and lead to timeouts for concurrent write operations.\n\t// Adaptive limits based on the number of changed keys may be a solution.\n\t// (see https://redis.io/docs/management/config-file/ > SNAPSHOTTING)\n\t// And it doesn't help that SQLite's drivers do not support DELETE LIMIT,\n\t// so we have to use DELETE IN (SELECT ...), which is more expensive.\n\tconst interval = 60 * time.Second\n\tconst nKeys = 0\n\n\tticker := time.NewTicker(interval)\n\tgo func() {\n\t\tfor range ticker.C {\n\t\t\tcount, err := db.keyDB.DeleteExpired(nKeys)\n\t\t\tif err != nil {\n\t\t\t\tdb.log.Error(\"bg: delete expired keys\", \"error\", err)\n\t\t\t} else {\n\t\t\t\tdb.log.Info(\"bg: delete expired keys\", \"count\", count)\n\t\t\t}\n\t\t}\n\t}()\n\treturn ticker\n}\n\n// Tx is a Redis-like database transaction.\n// Same as [DB], Tx provides access to data structures like keys,\n// strings, and hashes. The difference is that you call Tx methods\n// within a transaction managed by [DB.Update] or [DB.View].\n//\n// See the [tx] example for details.\n//\n// [tx]: https://github.com/nalgeon/redka/blob/main/example/tx/main.go\ntype Tx struct {\n\ttx     sqlx.Tx\n\thashTx *rhash.Tx\n\tkeyTx  *rkey.Tx\n\tlistTx *rlist.Tx\n\tsetTx  *rset.Tx\n\tstrTx  *rstring.Tx\n\tzsetTx *rzset.Tx\n}\n\n// newTx creates a new database transaction.\nfunc newTx(tx sqlx.Tx) *Tx {\n\treturn &Tx{tx: tx,\n\t\thashTx: rhash.NewTx(tx),\n\t\tkeyTx:  rkey.NewTx(tx),\n\t\tlistTx: rlist.NewTx(tx),\n\t\tsetTx:  rset.NewTx(tx),\n\t\tstrTx:  rstring.NewTx(tx),\n\t\tzsetTx: rzset.NewTx(tx),\n\t}\n}\n\n// Hash returns the hash transaction.\nfunc (tx *Tx) Hash() *rhash.Tx {\n\treturn tx.hashTx\n}\n\n// Keys returns the key transaction.\nfunc (tx *Tx) Key() *rkey.Tx {\n\treturn tx.keyTx\n}\n\n// List returns the list transaction.\nfunc (tx *Tx) List() *rlist.Tx {\n\treturn tx.listTx\n}\n\n// Set returns the set transaction.\nfunc (tx *Tx) Set() *rset.Tx {\n\treturn tx.setTx\n}\n\n// Str returns the string transaction.\nfunc (tx *Tx) Str() *rstring.Tx {\n\treturn tx.strTx\n}\n\n// ZSet returns the sorted set transaction.\nfunc (tx *Tx) ZSet() *rzset.Tx {\n\treturn tx.zsetTx\n}\n\n// applyOptions applies custom options to the\n// default options and returns the result.\nfunc applyOptions(opts Options, custom *Options) *Options {\n\tif custom == nil {\n\t\treturn &opts\n\t}\n\tif custom.DriverName != \"\" {\n\t\topts.DriverName = custom.DriverName\n\t}\n\tif custom.Pragma != nil {\n\t\topts.Pragma = custom.Pragma\n\t}\n\tif custom.Logger != nil {\n\t\topts.Logger = custom.Logger\n\t}\n\treturn &opts\n}\n"
        },
        {
          "name": "redka_test.go",
          "type": "blob",
          "size": 6.8515625,
          "content": "package redka_test\n\nimport (\n\t\"database/sql\"\n\t\"errors\"\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/nalgeon/redka\"\n\t\"github.com/nalgeon/redka/internal/testx\"\n)\n\nfunc ExampleOpen() {\n\tdb, err := redka.Open(\"file:/data.db?vfs=memdb\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\t// ...\n}\n\nfunc ExampleOpenRead() {\n\t// open a writable database\n\tdb, err := redka.Open(\"data.db\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t_ = db.Str().Set(\"name\", \"alice\")\n\tdb.Close()\n\n\t// open a read-only database\n\tdb, err = redka.OpenRead(\"data.db\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// read operations work fine\n\tname, _ := db.Str().Get(\"name\")\n\tfmt.Println(name)\n\t// write operations will fail\n\terr = db.Str().Set(\"name\", \"bob\")\n\tfmt.Println(err)\n\t// attempt to write a readonly database\n\tdb.Close()\n\n\t// Output:\n\t// alice\n\t// attempt to write a readonly database\n}\n\nfunc ExampleDB_Close() {\n\tdb, err := redka.Open(\"file:/data.db?vfs=memdb\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\t// ...\n}\n\nfunc ExampleDB_Hash() {\n\t// Error handling is omitted for brevity.\n\t// In real code, always check for errors.\n\n\tdb, _ := redka.Open(\"file:/data.db?vfs=memdb\", nil)\n\tdefer db.Close()\n\n\tok, err := db.Hash().Set(\"user:1\", \"name\", \"alice\")\n\tfmt.Printf(\"ok=%v, err=%v\\n\", ok, err)\n\tok, err = db.Hash().Set(\"user:1\", \"age\", 25)\n\tfmt.Printf(\"ok=%v, err=%v\\n\", ok, err)\n\n\tname, err := db.Hash().Get(\"user:1\", \"name\")\n\tfmt.Printf(\"name=%v, err=%v\\n\", name, err)\n\tage, err := db.Hash().Get(\"user:1\", \"age\")\n\tfmt.Printf(\"age=%v, err=%v\\n\", age, err)\n\n\t// Output:\n\t// ok=true, err=<nil>\n\t// ok=true, err=<nil>\n\t// name=alice, err=<nil>\n\t// age=25, err=<nil>\n}\n\nfunc ExampleDB_Key() {\n\t// Error handling is omitted for brevity.\n\t// In real code, always check for errors.\n\n\tdb, _ := redka.Open(\"file:/data.db?vfs=memdb\", nil)\n\tdefer db.Close()\n\n\t_ = db.Str().SetExpires(\"name\", \"alice\", 60*time.Second)\n\t_ = db.Str().Set(\"city\", \"paris\")\n\n\tkey, _ := db.Key().Get(\"name\")\n\tfmt.Printf(\"key=%v, type=%v, version=%v, exists=%v\\n\",\n\t\tkey.Key, key.TypeName(), key.Version, key.Exists())\n\n\tkey, _ = db.Key().Get(\"nonexistent\")\n\tfmt.Printf(\"key=%v, type=%v, version=%v, exists=%v\\n\",\n\t\tkey.Key, key.TypeName(), key.Version, key.Exists())\n\n\tscan, _ := db.Key().Scan(0, \"*\", redka.TypeString, 100)\n\tfmt.Print(\"keys:\")\n\tfor _, key := range scan.Keys {\n\t\tfmt.Print(\" \", key.Key)\n\t}\n\tfmt.Println()\n\n\t// Output:\n\t// key=name, type=string, version=1, exists=true\n\t// key=, type=unknown, version=0, exists=false\n\t// keys: name city\n}\n\nfunc ExampleDB_Str() {\n\t// Error handling is omitted for brevity.\n\t// In real code, always check for errors.\n\n\tdb, _ := redka.Open(\"file:/data.db?vfs=memdb\", nil)\n\tdefer db.Close()\n\n\t_ = db.Str().Set(\"name\", \"alice\")\n\n\tname, _ := db.Str().Get(\"name\")\n\tfmt.Printf(\"name=%v\\n\", name)\n\n\tname, _ = db.Str().Get(\"nonexistent\")\n\tfmt.Printf(\"name=%v\\n\", name)\n\n\t// Output:\n\t// name=alice\n\t// name=\n}\n\nfunc ExampleDB_ZSet() {\n\t// Error handling is omitted for brevity.\n\t// In real code, always check for errors.\n\n\tdb, _ := redka.Open(\"file:/data.db?vfs=memdb\", nil)\n\tdefer db.Close()\n\n\tok, err := db.ZSet().Add(\"race\", \"alice\", 11)\n\tfmt.Printf(\"ok=%v, err=%v\\n\", ok, err)\n\tok, err = db.ZSet().Add(\"race\", \"bob\", 22)\n\tfmt.Printf(\"ok=%v, err=%v\\n\", ok, err)\n\n\trank, score, err := db.ZSet().GetRank(\"race\", \"alice\")\n\tfmt.Printf(\"alice: rank=%v, score=%v, err=%v\\n\", rank, score, err)\n\n\trank, score, err = db.ZSet().GetRank(\"race\", \"bob\")\n\tfmt.Printf(\"bob: rank=%v, score=%v, err=%v\\n\", rank, score, err)\n\n\t// Output:\n\t// ok=true, err=<nil>\n\t// ok=true, err=<nil>\n\t// alice: rank=0, score=11, err=<nil>\n\t// bob: rank=1, score=22, err=<nil>\n}\n\nfunc ExampleDB_Update() {\n\tdb, err := redka.Open(\"file:/data.db?vfs=memdb\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\n\tupdCount := 0\n\terr = db.Update(func(tx *redka.Tx) error {\n\t\terr := tx.Str().Set(\"name\", \"alice\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tupdCount++\n\n\t\terr = tx.Str().Set(\"age\", 25)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tupdCount++\n\n\t\treturn nil\n\t})\n\tfmt.Printf(\"updated: count=%v, err=%v\\n\", updCount, err)\n\n\t// Output:\n\t// updated: count=2, err=<nil>\n}\n\nfunc ExampleDB_View() {\n\t// Error handling is omitted for brevity.\n\t// In real code, always check for errors.\n\n\tdb, _ := redka.Open(\"file:/data.db?vfs=memdb\", nil)\n\tdefer db.Close()\n\n\t_ = db.Str().SetMany(map[string]any{\n\t\t\"name\": \"alice\",\n\t\t\"age\":  25,\n\t})\n\n\ttype person struct {\n\t\tname string\n\t\tage  int\n\t}\n\n\tvar p person\n\terr := db.View(func(tx *redka.Tx) error {\n\t\tname, err := tx.Str().Get(\"name\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tp.name = name.String()\n\n\t\tage, err := tx.Str().Get(\"age\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Only use MustInt() if you are sure that\n\t\t// the key exists and is an integer.\n\t\tp.age = age.MustInt()\n\t\treturn nil\n\t})\n\tfmt.Printf(\"person=%+v, err=%v\\n\", p, err)\n\n\t// Output:\n\t// person={name:alice age:25}, err=<nil>\n}\n\nfunc TestOpenDB(t *testing.T) {\n\tsdb, err := sql.Open(\"sqlite3\", \"file:/data.db?vfs=memdb\")\n\ttestx.AssertNoErr(t, err)\n\n\tdb, err := redka.OpenDB(sdb, sdb, nil)\n\ttestx.AssertNoErr(t, err)\n\tdefer db.Close()\n\n\tn, err := db.Key().Len()\n\ttestx.AssertNoErr(t, err)\n\ttestx.AssertEqual(t, n, 0)\n}\n\nfunc TestDBView(t *testing.T) {\n\tdb := getDB(t)\n\tdefer db.Close()\n\n\t_ = db.Str().Set(\"name\", \"alice\")\n\t_ = db.Str().Set(\"age\", 25)\n\n\terr := db.View(func(tx *redka.Tx) error {\n\t\tcount, err := tx.Key().Count(\"name\", \"age\")\n\t\ttestx.AssertNoErr(t, err)\n\t\ttestx.AssertEqual(t, count, 2)\n\n\t\tname, err := tx.Str().Get(\"name\")\n\t\ttestx.AssertNoErr(t, err)\n\t\ttestx.AssertEqual(t, name.String(), \"alice\")\n\n\t\tage, err := tx.Str().Get(\"age\")\n\t\ttestx.AssertNoErr(t, err)\n\t\ttestx.AssertEqual(t, age.MustInt(), 25)\n\t\treturn nil\n\t})\n\ttestx.AssertNoErr(t, err)\n}\n\nfunc TestDBUpdate(t *testing.T) {\n\tdb := getDB(t)\n\tdefer db.Close()\n\n\terr := db.Update(func(tx *redka.Tx) error {\n\t\terr := tx.Str().Set(\"name\", \"alice\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\terr = tx.Str().Set(\"age\", 25)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n\ttestx.AssertNoErr(t, err)\n\n\terr = db.View(func(tx *redka.Tx) error {\n\t\tcount, _ := tx.Key().Count(\"name\", \"age\")\n\t\ttestx.AssertEqual(t, count, 2)\n\n\t\tname, _ := tx.Str().Get(\"name\")\n\t\ttestx.AssertEqual(t, name.String(), \"alice\")\n\n\t\tage, _ := tx.Str().Get(\"age\")\n\t\ttestx.AssertEqual(t, age.MustInt(), 25)\n\t\treturn nil\n\t})\n\ttestx.AssertNoErr(t, err)\n}\n\nfunc TestDBUpdateRollback(t *testing.T) {\n\tdb := getDB(t)\n\tdefer db.Close()\n\n\t_ = db.Str().Set(\"name\", \"alice\")\n\t_ = db.Str().Set(\"age\", 25)\n\n\tvar errRollback = errors.New(\"rollback\")\n\n\terr := db.Update(func(tx *redka.Tx) error {\n\t\t_ = tx.Str().Set(\"name\", \"bob\")\n\t\t_ = tx.Str().Set(\"age\", 50)\n\t\treturn errRollback\n\t})\n\ttestx.AssertEqual(t, err, errRollback)\n\n\tname, _ := db.Str().Get(\"name\")\n\ttestx.AssertEqual(t, name.String(), \"alice\")\n\tage, _ := db.Str().Get(\"age\")\n\ttestx.AssertEqual(t, age.MustInt(), 25)\n}\n\nfunc getDB(tb testing.TB) *redka.DB {\n\ttb.Helper()\n\tdb, err := redka.Open(\"file:/data.db?vfs=memdb\", nil)\n\tif err != nil {\n\t\ttb.Fatal(err)\n\t}\n\treturn db\n}\n"
        }
      ]
    }
  ]
}