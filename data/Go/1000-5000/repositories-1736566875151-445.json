{
  "metadata": {
    "timestamp": 1736566875151,
    "page": 445,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "uber-go/nilaway",
      "stars": 3248,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".codecov.yaml",
          "type": "blob",
          "size": 0.8984375,
          "content": "coverage:\n  range: 80..100\n  round: down\n  precision: 2\n\n  status:\n    project:                   # measuring the overall project coverage\n      default:                 # context, you can create multiple ones with custom titles\n        enabled: yes           # must be yes|true to enable this status\n        target: auto           # specify the target coverage for each commit status\n                               #   option: \"auto\" (compare against parent commit or pull request base)\n                               #   option: \"X%\" a static target percentage to hit\n        threshold: 1%          # allow the coverage drop by 1% before marking as failure (to allow some flakiness)\n        if_not_found: success  # if parent is not found report status as success, error, or failure\n        if_ci_failed: error    # if ci fails report status as success, error, or failure\n    patch:\n      default:\n        enabled: no\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.46484375,
          "content": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, built with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Dependency directories (remove the comment below to include it)\n# vendor/\n\n# Go workspace file\ngo.work\n\n# IntelliJ files\n.idea/\n\n# Coverage files\ncover.out\ncover.html\n\n# Local binary folder\nbin/\n\n# Local build folder for storing build artifacts\nbuild/\n\n# Mac OS files\n**/.DS_Store\n"
        },
        {
          "name": ".golangci.version",
          "type": "blob",
          "size": 0.005859375,
          "content": "1.60.3"
        },
        {
          "name": ".golangci.yaml",
          "type": "blob",
          "size": 1.076171875,
          "content": "run:\n  timeout: 10m\n\nissues:\n  # Print all issues reported by all linters.\n  max-issues-per-linter: 0\n  max-same-issues: 0\n\n  # Don't ignore some of the issues that golangci-lint considers okay.\n  exclude-use-default: false\n\nlinters:\n  enable:\n    - gofmt\n    - goimports\n    - nolintlint\n    - paralleltest\n    - revive\n    - staticcheck\n    - goheader\n\nlinters-settings:\n  goheader:\n    values:\n      regexp:\n        any-year: \\d{4}\n    template: |-\n      Copyright (c) {{ ANY-YEAR }} Uber Technologies, Inc.\n    \n      Licensed under the Apache License, Version 2.0 (the \"License\");\n      you may not use this file except in compliance with the License.\n      You may obtain a copy of the License at\n    \n          http://www.apache.org/licenses/LICENSE-2.0\n    \n      Unless required by applicable law or agreed to in writing, software\n      distributed under the License is distributed on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      See the License for the specific language governing permissions and\n      limitations under the License.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5712890625,
          "content": "Contributing to NilAway\n=======================\n\nUber welcomes contributions of all kinds and sizes. This includes everything from simple bug reports to large features.\n\nWorkflow\n--------\n\nWe love GitHub issues!\n\nFor small feature requests, an issue first proposing it for discussion or demo implementation in a PR suffice.\n\nFor big features, please open an issue so that we can agree on the direction, and hopefully avoid investing a lot of time on a feature that might need reworking.\n\nSmall pull requests for things like typos, bug fixes, etc. are always welcome.\n\nDOs and DON'Ts\n--------------\n\n* DO format your code using `go fmt`.\n* DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken.\n* DO keep the discussions focused. When a new or related topic comes up it's often better to create new issue than to side track the discussion.\n\n* DON'T submit PRs that alter licensing related files or headers. If you believe there's a problem with them, file an issue, and we'll be happy to discuss it.\n\nGuiding Principles\n------------------\n\n* We allow anyone to participate in our projects. Tasks can be carried out by anyone that demonstrates the capability to complete them.\n* Always be respectful of one another. Assume the best in others and act with empathy at all times.\n* Collaborate closely with individuals maintaining the project or experienced users. Getting ideas out in the open and seeing a proposal before it's a pull request helps reduce redundancy and ensures we're all connected to the decision-making process."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.3203125,
          "content": "# Set up GOBIN so that our binaries are installed to ./bin instead of $GOPATH/bin.\nPROJECT_ROOT = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))\nexport GOBIN = $(PROJECT_ROOT)/bin\n\nGOLANGCI_LINT_VERSION := $(shell $(GOBIN)/golangci-lint version --format short 2>/dev/null)\nREQUIRED_GOLANGCI_LINT_VERSION := $(shell cat .golangci.version)\n\n# Directories containing independent Go modules.\nMODULE_DIRS = . ./tools\n\n.PHONY: all\nall: build lint test integration-test\n\n.PHONY: clean\nclean:\n\t@rm -rf $(GOBIN)\n\n.PHONY: build\nbuild:\n\tgo install go.uber.org/nilaway/cmd/nilaway\n\n.PHONY: test\ntest:\n\t@$(foreach mod,$(MODULE_DIRS),(cd $(mod) && go test -race ./...) &&) true\n\n.PHONY: cover\ncover:\n\t@$(foreach mod,$(MODULE_DIRS), ( \\\n\t\tcd $(mod) && \\\n\t\tgo test -race -coverprofile=cover.out -coverpkg=./... ./... \\\n\t\t&& go tool cover -html=cover.out -o cover.html) &&) true\n\n.PHONY: golden-test\ngolden-test:\n\t@cd tools && go install go.uber.org/nilaway/tools/cmd/golden-test\n\t@$(GOBIN)/golden-test $(ARGS)\n\n.PHONY: integration-test\nintegration-test:\n\t@cd tools && go install go.uber.org/nilaway/tools/cmd/integration-test\n\t@$(GOBIN)/integration-test\n\n.PHONY: lint\nlint: golangci-lint nilaway-lint tidy-lint\n\n# Install golangci-lint with the required version in GOBIN if it is not already installed.\n.PHONY: install-golangci-lint\ninstall-golangci-lint:\n    ifneq ($(GOLANGCI_LINT_VERSION),$(REQUIRED_GOLANGCI_LINT_VERSION))\n\t\t@echo \"[lint] installing golangci-lint v$(REQUIRED_GOLANGCI_LINT_VERSION) since current version is \\\"$(GOLANGCI_LINT_VERSION)\\\"\"\n\t\t@curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(GOBIN) v$(REQUIRED_GOLANGCI_LINT_VERSION)\n    endif\n\n.PHONY: golangci-lint\ngolangci-lint: install-golangci-lint\n\t@echo \"[lint] $(shell $(GOBIN)/golangci-lint version)\"\n\t@$(foreach mod,$(MODULE_DIRS), \\\n\t\t(cd $(mod) && \\\n\t\techo \"[lint] golangci-lint: $(mod)\" && \\\n\t\t$(GOBIN)/golangci-lint run --path-prefix $(mod)) &&) true\n\n.PHONY: tidy-lint\ntidy-lint:\n\t@$(foreach mod,$(MODULE_DIRS), \\\n\t\t(cd $(mod) && \\\n\t\techo \"[lint] mod tidy: $(mod)\" && \\\n\t\tgo mod tidy && \\\n\t\tgit diff --exit-code -- go.mod go.sum) &&) true\n\n.PHONY: nilaway-lint\nnilaway-lint: build\n\t@$(foreach mod,$(MODULE_DIRS), \\\n\t\t(cd $(mod) && \\\n\t\techo \"[lint] nilaway linting itself: $(mod)\" && \\\n\t\t$(GOBIN)/nilaway -include-pkgs=\"go.uber.org/nilaway\" ./...) &&) true\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.0380859375,
          "content": "Copyright 2023 Uber Technologies, Inc.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.2197265625,
          "content": "# NilAway\n\n[![GoDoc][doc-img]][doc] [![Build Status][ci-img]][ci] [![Coverage Status][cov-img]][cov]\n\n> [!WARNING]  \n> NilAway is currently under active development: false positives and breaking changes can happen. \n> We highly appreciate any feedback and contributions!\n\nNilAway is a static analysis tool that seeks to help developers avoid nil panics in production by catching them at \ncompile time rather than runtime. NilAway is similar to the standard\n[nilness analyzer](https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/nilness), however, it employs much more \nsophisticated and powerful static analysis techniques to track nil flows within a package as well _across_ packages, and\nreport errors providing users with the nilness flows for easier debugging.\n\nNilAway enjoys three key properties that make it stand out:\n\n* It is **fully-automated**: NilAway is equipped with an inference engine, making it require _no_ any additional \ninformation from the developers (e.g., annotations) besides standard Go code.\n\n* It is **fast**: we have designed NilAway to be fast and scalable, making it suitable for large codebases. In our\nmeasurements, we have observed less than 5% build-time overhead when NilAway is enabled. We are also constantly applying\noptimizations to further reduce its footprint.\n\n* It is **practical**: it does not prevent _all_ possible nil panics in your code, but it catches most of the potential\nnil panics we have observed in production, allowing NilAway to maintain a good balance between usefulness and build-time \noverhead.\n\n:star2: For more detailed technical discussion, please check our [Wiki][wiki], [Engineering Blog][blog], and paper (WIP).\n\n## Running NilAway\n\nNilAway is implemented using the standard [go/analysis][go-analysis], making it easy to integrate with existing analyzer\ndrivers (i.e., [golangci-lint][golangci-lint], [nogo][nogo], or [running as a standalone checker][singlechecker]).\n\n> [!IMPORTANT]  \n> By default, NilAway analyzes _all_ Go code, including the standard libraries and dependencies. This helps NilAway \n> better understand the code form dependencies and reduce its false negatives. However, this would also incur a \n> significant performance cost (only once for drivers with modular support) and increase the number of non-actionable \n> errors in dependencies, for large Go projects with a lot of dependencies.\n> \n> We highly recommend using the [include-pkgs][include-pkgs-flag] flag to narrow down the analysis to your project's \n> code exclusively. This directs NilAway to skip analyzing dependencies (e.g., third-party libraries), allowing you to \n> focus solely on potential nil panics reported by NilAway in your first-party code!\n\n### Standalone Checker\n\n> [!IMPORTANT]  \n> Due to the sophistication of the analyses that NilAway does, NilAway caches its findings about a \n> particular package via the [Fact Mechanism][fact-mechanism] from the [go/analysis][go-analysis] \n> framework. Therefore, it is _highly_ recommended to leverage a driver that supports modular \n> analysis (i.e., bazel/nogo or golangci-lint, but _not_ the standalone checker since it stores all \n> facts in memory) for better performance on large projects. The standalone checker is provided\n> more for evaluation purposes since it is easy to get started.\n\nInstall the binary from source by running: \n```shell\ngo install go.uber.org/nilaway/cmd/nilaway@latest\n```\n\nThen, run the linter by:\n```shell\nnilaway -include-pkgs=\"<YOUR_PKG_PREFIX>,<YOUR_PKG_PREFIX_2>\" ./...\n```\n\n> [!TIP]  \n> Disable the `pretty-print` flag when output as JSON:\n> ```shell\n> nilaway -json -pretty-print=false -include-pkgs=\"<YOUR_PKG_PREFIX>,<YOUR_PKG_PREFIX_2>\" ./...\n> ```\n\n\n### golangci-lint (>= v1.57.0)\n\nNilAway, in its current form, can report false positives. This unfortunately hinders its immediate \nmerging in [golangci-lint][golangci-lint] and be offered as a linter (see [PR#4045][pr-4045]). \nTherefore, you need to build NilAway as a plugin to golangci-lint to be executed as a private \nlinter. There are two plugin systems in golangci-lint, and it is much easier to use the \n[Module Plugin System][golangci-lint-module-plugin] (introduced since v1.57.0), and it is the only \nsupported approach to run NilAway in golangci-lint.\n\n(1) Create a `.custom-gcl.yml` file at the root of the repository if you have not done so, add the\nfollowing content:\n\n```yaml\n# This has to be >= v1.57.0 for module plugin system support.\nversion: v1.57.0\nplugins:\n  - module: \"go.uber.org/nilaway\"\n    import: \"go.uber.org/nilaway/cmd/gclplugin\"\n    version: latest # Or a fixed version for reproducible builds.\n```\n\n(2) Add NilAway to the linter configuration file `.golangci.yaml`:\n\n```yaml\nlinters-settings:\n  custom:\n    nilaway:\n      type: \"module\"\n      description: Static analysis tool to detect potential nil panics in Go code.\n      settings:\n        # Settings must be a \"map from string to string\" to mimic command line flags: the keys are\n        # flag names and the values are the values to the particular flags.\n        include-pkgs: \"<YOUR_PACKAGE_PREFIXES>\"\n# NilAway can be referred to as `nilaway` just like any other golangci-lint analyzers in other \n# parts of the configuration file.\n```\n\n(3) Build a custom golangci-lint binary with NilAway included:\n\n```shell\n# Note that your `golangci-lint` to bootstrap the custom binary must also be version >= v1.57.0.\n$ golangci-lint custom\n```\n\nBy default, the custom binary will be built at `.` with the name `custom-gcl`, which can be further\ncustomized in `.custom-gcl.yml` file (see [Module Plugin System][golangci-lint-module-plugin] for\ninstructions).\n\n> [!TIP]  \n> Cache the custom binary to avoid having to build it again to save resources, you can use the\n> hash of the `.custom-gcl.yml` file as the cache key if you are using a fixed version of NilAway.\n> If you are using `latest` as NilAway version, you can append the date of build to the cache key \n> to force cache expiration after certain time period.\n\n(4) Run the custom binary instead of `golangci-lint`:\n\n```shell\n# Arguments are the same as `golangci-lint`.\n$ ./custom-gcl run ./...\n```\n\n### Bazel/nogo\n\nRunning with bazel/nogo requires slightly more efforts. First follow the instructions from [rules_go][rules-go], \n[gazelle][gazelle], and [nogo][nogo] to set up your Go project such that it can be built with bazel/nogo with no or \ndefault set of linters configured. Then,\n\n(1) Add `import _ \"go.uber.org/nilaway\"` to your `tools.go` file (or other file that you use for configuring tool \ndependencies, see [How can I track tool dependencies for a module?][track-tool-dependencies] from Go Modules \ndocumentation) to avoid `go mod tidy` from removing NilAway as a tool dependency.\n\n(2) Run the following commands to add NilAway as a tool dependency to your project:\n```bash\n# Get NilAway as a dependency, as well as getting its transitive dependencies in go.mod file.\n$ go get go.uber.org/nilaway@latest\n# This should not remove NilAway as a dependency in your go.mod file.\n$ go mod tidy\n# Run gazelle to sync dependencies from go.mod to WORKSPACE file.\n$ bazel run //:gazelle -- update-repos -from_file=go.mod\n```\n\n(3) Add NilAway to nogo configurations (usually in top-level `BUILD.bazel` file):\n\n```diff\nnogo(\n    name = \"my_nogo\",\n    visibility = [\"//visibility:public\"],  # must have public visibility\n    deps = [\n+++     \"@org_uber_go_nilaway//:go_default_library\",\n    ],\n    config = \"config.json\",\n)\n```\n\n(4) Run bazel build to see NilAway working (any nogo error will stop the bazel build, you can use the `--keep_going` \nflag to request bazel to build as much as possible):\n\n```bash\n$ bazel build --keep_going //...\n```\n\n(5) See [nogo documentation][nogo-configure-analyzers] on how to pass a configuration JSON to the nogo driver, and see \nour [wiki page][nogo-configure-nilaway] on how to pass configurations to NilAway.\n\n## Code Examples\n\nLet's look at a few examples to see how NilAway can help prevent nil panics.\n\n```go\n// Example 1:\nvar p *P\nif someCondition {\n      p = &P{}\n}\nprint(p.f) // nilness reports NO error here, but NilAway does.\n```\n\nIn this example, the local variable `p` is only initialized when `someCondition` is true. At the field access `p.f`, a\npanic may occur if `someCondition` is false. NilAway is able to catch this potential nil flow and reports the following\nerror showing this nilness flow:\n\n```\ngo.uber.org/example.go:12:9: error: Potential nil panic detected. Observed nil flow from source to dereference point:\n    - go.uber.org/example.go:12:9: unassigned variable `p` accessed field `f`\n```\n\nIf we guard this dereference with a nilness check (`if p != nil`), the error goes away.\n\nNilAway is also able to catch nil flows across functions. For example, consider the following code snippet:\n\n```go\n// Example 2:\nfunc foo() *int {\n      return nil\n}\nfunc bar() {\n     print(*foo()) // nilness reports NO error here, but NilAway does.\n}\n```\n\nIn this example, the function `foo` returns a nil pointer, which is directly dereferenced in `bar`, resulting in a panic\nwhenever `bar` is called. NilAway is able to catch this potential nil flow and reports the following error, describing\nthe nilness flow across function boundaries: \n\n```\ngo.uber.org/example.go:23:13: error: Potential nil panic detected. Observed nil flow from source to dereference point:\n    - go.uber.org/example.go:20:14: literal `nil` returned from `foo()` in position 0\n    - go.uber.org/example.go:23:13: result 0 of `foo()` dereferenced\n```\n\nNote that in the above example, `foo` does not necessarily have to reside in the same package as `bar`. NilAway is able\nto track nil flows across packages as well. Moreover, NilAway handles Go-specific language constructs such as receivers,\ninterfaces, type assertions, type switches, and more.\n\n## Configurations\n\nWe expose a set of flags via the standard flag passing mechanism in [go/analysis](https://pkg.go.dev/golang.org/x/tools/go/analysis).\nPlease check [wiki/Configuration](https://github.com/uber-go/nilaway/wiki/Configuration) to see the available flags and\nhow to pass them using different linter drivers.\n\n## Support \n\nWe follow the same [version support policy](https://go.dev/doc/devel/release#policy) as the [Go](https://golang.org/) \nproject: we support and test the last two major versions of Go.\n\nPlease feel free to [open a GitHub issue](https://github.com/uber-go/nilaway/issues) if you have any questions, bug \nreports, and feature requests.\n\n## Contributions\n\nWe'd love for you to contribute to NilAway! Please note that once you create a pull request, you will be asked to sign \nour [Uber Contributor License Agreement](https://cla-assistant.io/uber-go/nilaway).\n\n## License\n\nThis project is copyright 2023 Uber Technologies, Inc., and licensed under Apache 2.0.\n\n[go-analysis]: https://pkg.go.dev/golang.org/x/tools/go/analysis\n[golangci-lint]: https://github.com/golangci/golangci-lint\n[golangci-lint-module-plugin]: https://golangci-lint.run/plugins/module-plugins/\n[singlechecker]: https://pkg.go.dev/golang.org/x/tools/go/analysis/singlechecker\n[nogo]: https://github.com/bazelbuild/rules_go/blob/master/go/nogo.rst\n[doc-img]: https://pkg.go.dev/badge/go.uber.org/nilaway.svg\n[doc]: https://pkg.go.dev/go.uber.org/nilaway\n[ci-img]: https://github.com/uber-go/nilaway/actions/workflows/ci.yml/badge.svg\n[ci]: https://github.com/uber-go/nilaway/actions/workflows/ci.yml\n[cov-img]: https://codecov.io/gh/uber-go/nilaway/branch/main/graph/badge.svg\n[cov]: https://codecov.io/gh/uber-go/nilaway\n[wiki]: https://github.com/uber-go/nilaway/wiki\n[blog]: https://www.uber.com/blog/nilaway-practical-nil-panic-detection-for-go/\n[fact-mechanism]: https://pkg.go.dev/golang.org/x/tools/go/analysis#hdr-Modular_analysis_with_Facts\n[include-pkgs-flag]: https://github.com/uber-go/nilaway/wiki/Configuration#include-pkgs\n[pr-4045]: https://github.com/golangci/golangci-lint/issues/4045\n[nilaway-as-a-plugin]: https://golangci-lint.run/contributing/new-linters/#how-to-add-a-private-linter-to-golangci-lint\n[rules-go]: https://github.com/bazelbuild/rules_go\n[gazelle]: https://github.com/bazelbuild/bazel-gazelle\n[track-tool-dependencies]: https://go.dev/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module\n[nogo-configure-analyzers]: https://github.com/bazelbuild/rules_go/blob/master/go/nogo.rst#id14\n[nogo-configure-nilaway]: https://github.com/uber-go/nilaway/wiki/Configuration#nogo\n[nogo-instructions]: https://github.com/uber-go/nilaway?tab=readme-ov-file#bazelnogo\n"
        },
        {
          "name": "accumulation",
          "type": "tree",
          "content": null
        },
        {
          "name": "annotation",
          "type": "tree",
          "content": null
        },
        {
          "name": "assertion",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "diagnostic",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.556640625,
          "content": "module go.uber.org/nilaway\n\ngo 1.22\n\nrequire (\n\tgithub.com/golangci/plugin-module-register v0.1.1\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/klauspost/compress v1.17.9\n\tgithub.com/stretchr/testify v1.9.0\n\tgo.uber.org/goleak v1.3.0\n\tgolang.org/x/tools v0.24.0\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/stretchr/objx v0.5.2 // indirect\n\tgolang.org/x/mod v0.20.0 // indirect\n\tgolang.org/x/sync v0.8.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 2.6572265625,
          "content": "github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/golangci/plugin-module-register v0.1.1 h1:TCmesur25LnyJkpsVrupv1Cdzo+2f7zX0H6Jkw1Ol6c=\ngithub.com/golangci/plugin-module-register v0.1.1/go.mod h1:TTpqoB6KkwOJMV8u7+NyXMrkwwESJLOkfl9TxR1DGFc=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2qeMA=\ngithub.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.5.2 h1:xuMeJ0Sdp5ZMRXx/aWO6RZxdr3beISkG5/G/aIRr3pY=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngolang.org/x/mod v0.20.0 h1:utOm6MM3R3dnawAiJgn0y+xvuYRsm1RKM/4giyfDgV0=\ngolang.org/x/mod v0.20.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/tools v0.24.0 h1:J1shsA93PJUEVaUSaay7UXAyE8aimq3GW0pjlolpa24=\ngolang.org/x/tools v0.24.0/go.mod h1:YhNqVBIfWHdzvTLs0d8LCuMhkKUgSUKldakyV7W/WDQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "hook",
          "type": "tree",
          "content": null
        },
        {
          "name": "inference",
          "type": "tree",
          "content": null
        },
        {
          "name": "nilaway.go",
          "type": "blob",
          "size": 1.7392578125,
          "content": "//  Copyright (c) 2023 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Package nilaway implements the top-level analyzer that simply retrieves the diagnostics from\n// the accumulation analyzer and reports them.\npackage nilaway\n\nimport (\n\t\"go.uber.org/nilaway/accumulation\"\n\t\"go.uber.org/nilaway/config\"\n\t\"go.uber.org/nilaway/util\"\n\t\"golang.org/x/tools/go/analysis\"\n)\n\nconst _doc = \"Run NilAway on this package to report any possible flows of nil values to erroneous\" +\n\t\" sites that our system can detect\"\n\n// Analyzer is the top-level instance of Analyzer - it coordinates the entire dataflow to report\n// nil flow errors in this package. It is needed here for nogo to recognize the package.\nvar Analyzer = &analysis.Analyzer{\n\tName:      \"nilaway\",\n\tDoc:       _doc,\n\tRun:       run,\n\tFactTypes: []analysis.Fact{},\n\tRequires:  []*analysis.Analyzer{config.Analyzer, accumulation.Analyzer},\n}\n\nfunc run(pass *analysis.Pass) (interface{}, error) {\n\tconf := pass.ResultOf[config.Analyzer].(*config.Config)\n\tdeferredErrors := pass.ResultOf[accumulation.Analyzer].([]analysis.Diagnostic)\n\tfor _, e := range deferredErrors {\n\t\tif conf.PrettyPrint {\n\t\t\te.Message = util.PrettyPrintErrorMessage(e.Message)\n\t\t}\n\t\tpass.Report(e)\n\t}\n\n\treturn nil, nil\n}\n"
        },
        {
          "name": "nilaway_go123_plus_test.go",
          "type": "blob",
          "size": 1.4560546875,
          "content": "//  Copyright (c) 2023 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//go:build go1.23\n\n// This file is meant for testing features in Go 1.23 and beyond.\n// TODO: Migrate these test cases in the mainstream test files once NilAway starts to support Go 1.23 is a base version.\n\npackage nilaway\n\nimport (\n\t\"testing\"\n\n\t\"golang.org/x/tools/go/analysis/analysistest\"\n)\n\nfunc TestNilAway_Go123(t *testing.T) {\n\tt.Parallel()\n\n\ttestdata := analysistest.TestData()\n\n\t// For descriptions of the purpose of each of the following tests, consult their source files\n\t// located in testdata/src/<package>.\n\n\ttests := []struct {\n\t\tname     string\n\t\tpatterns []string\n\t}{\n\t\t{name: \"LoopRangeGo123\", patterns: []string{\"go.uber.org/looprangego123\"}},\n\t}\n\n\tfor _, tt := range tests {\n\t\ttt := tt\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\tt.Logf(\"Running test for packages %s\", tt.patterns)\n\n\t\t\tanalysistest.Run(t, testdata, Analyzer, tt.patterns...)\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "nilaway_test.go",
          "type": "blob",
          "size": 7.634765625,
          "content": "//  Copyright (c) 2023 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Go 1.22 [1] introduces a proper `types.Alias` type for type aliases. The current default is\n// disabling such a feature. However, Go official doc suggests that it will be enabled in future Go\n// releases. Therefore, here we explicitly set this to `1` to enable the feature to test NilAway's\n// ability to handle it.\n// [1]: https://tip.golang.org/doc/go1.22\n//go:debug gotypesalias=1\n\npackage nilaway\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n\t\"go.uber.org/goleak\"\n\t\"go.uber.org/nilaway/config\"\n\t\"golang.org/x/tools/go/analysis/analysistest\"\n)\n\nfunc TestNilAway(t *testing.T) {\n\tt.Parallel()\n\n\ttestdata := analysistest.TestData()\n\n\t// For descriptions of the purpose of each of the following tests, consult their source files\n\t// located in testdata/src/<package>.\n\n\ttests := []struct {\n\t\tname     string\n\t\tpatterns []string\n\t}{\n\t\t{name: \"Inference\", patterns: []string{\"go.uber.org/inference\"}},\n\t\t{name: \"Contracts\", patterns: []string{\"go.uber.org/contracts\", \"go.uber.org/contracts/namedtypes\", \"go.uber.org/contracts/inference\"}},\n\t\t{name: \"TrustedFunc\", patterns: []string{\"go.uber.org/trustedfunc\"}},\n\t\t{name: \"ErrorReturn\", patterns: []string{\"go.uber.org/errorreturn\", \"go.uber.org/errorreturn/inference\"}},\n\t\t{name: \"Maps\", patterns: []string{\"go.uber.org/maps\"}},\n\t\t{name: \"Slices\", patterns: []string{\"go.uber.org/slices\", \"go.uber.org/slices/inference\"}},\n\t\t{name: \"Arrays\", patterns: []string{\"go.uber.org/arrays\"}},\n\t\t{name: \"Channels\", patterns: []string{\"go.uber.org/channels\"}},\n\t\t{name: \"GoQuirks\", patterns: []string{\"go.uber.org/goquirks\"}},\n\t\t{name: \"GlobalVars\", patterns: []string{\"go.uber.org/globalvars\"}},\n\t\t{name: \"DeepNil\", patterns: []string{\"go.uber.org/deepnil\", \"go.uber.org/deepnil/inference\"}},\n\t\t{name: \"NilableTypes\", patterns: []string{\"go.uber.org/nilabletypes\"}},\n\t\t{name: \"HelloWorld\", patterns: []string{\"go.uber.org/helloworld\"}},\n\t\t{name: \"MultiFilePackage\", patterns: []string{\"go.uber.org/multifilepackage\", \"go.uber.org/multifilepackage/firstpackage\", \"go.uber.org/multifilepackage/secondpackage\"}},\n\t\t{name: \"MultipleAssignment\", patterns: []string{\"go.uber.org/multipleassignment\"}},\n\t\t{name: \"AnnotationParse\", patterns: []string{\"go.uber.org/annotationparse\"}},\n\t\t{name: \"NilCheck\", patterns: []string{\"go.uber.org/nilcheck\"}},\n\t\t{name: \"SimpleFlow\", patterns: []string{\"go.uber.org/simpleflow\"}},\n\t\t{name: \"LoopFlow\", patterns: []string{\"go.uber.org/loopflow\"}},\n\t\t{name: \"MethodImplementation\", patterns: []string{\"go.uber.org/methodimplementation\", \"go.uber.org/methodimplementation/mergedDependencies\", \"go.uber.org/methodimplementation/chainedDependencies\", \"go.uber.org/methodimplementation/multipackage\", \"go.uber.org/methodimplementation/embedding\"}},\n\t\t{name: \"NamedReturn\", patterns: []string{\"go.uber.org/namedreturn\"}},\n\t\t{name: \"IgnoreGenerated\", patterns: []string{\"go.uber.org/ignoregenerated\"}},\n\t\t{name: \"IgnorePackage\", patterns: []string{\"ignoredpkg1\", \"ignoredpkg2\"}},\n\t\t{name: \"Receivers\", patterns: []string{\"go.uber.org/receivers\", \"go.uber.org/receivers/inference\"}},\n\t\t{name: \"Generics\", patterns: []string{\"go.uber.org/generics\"}},\n\t\t{name: \"FunctionContracts\", patterns: []string{\"go.uber.org/functioncontracts\", \"go.uber.org/functioncontracts/inference\"}},\n\t\t{name: \"Constants\", patterns: []string{\"go.uber.org/consts\"}},\n\t\t{name: \"ErrorMessage\", patterns: []string{\"go.uber.org/errormessage\", \"go.uber.org/errormessage/inference\"}},\n\t\t{name: \"LoopRange\", patterns: []string{\"go.uber.org/looprange\"}},\n\t\t{name: \"AbnormalFlow\", patterns: []string{\"go.uber.org/abnormalflow\"}},\n\t}\n\n\tfor _, tt := range tests {\n\t\ttt := tt\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\tt.Logf(\"Running test for packages %s\", tt.patterns)\n\n\t\t\tanalysistest.Run(t, testdata, Analyzer, tt.patterns...)\n\t\t})\n\t}\n}\n\nfunc TestStructInit(t *testing.T) { //nolint:paralleltest\n\t// We specifically do not set this test to be parallel since we need to enable the\n\t// experimental support for struct initialization to test this feature.\n\terr := config.Analyzer.Flags.Set(config.ExperimentalStructInitEnableFlag, \"true\")\n\trequire.NoError(t, err)\n\tdefer func() {\n\t\terr := config.Analyzer.Flags.Set(config.ExperimentalStructInitEnableFlag, \"false\")\n\t\trequire.NoError(t, err)\n\t}()\n\n\ttestdata := analysistest.TestData()\n\tanalysistest.Run(t, testdata, Analyzer, \"go.uber.org/structinit/funcreturnfields\", \"go.uber.org/structinit/local\", \"go.uber.org/structinit/global\", \"go.uber.org/structinit/paramfield\", \"go.uber.org/structinit/paramsideeffect\", \"go.uber.org/structinit/defaultfield\")\n}\n\nfunc TestAnonymousFunction(t *testing.T) { //nolint:paralleltest\n\t// We specifically do not set this test to be parallel since we need to enable the\n\t// experimental support for anonymous function to test this feature.\n\terr := config.Analyzer.Flags.Set(config.ExperimentalAnonymousFunctionFlag, \"true\")\n\trequire.NoError(t, err)\n\tdefer func() {\n\t\terr := config.Analyzer.Flags.Set(config.ExperimentalAnonymousFunctionFlag, \"false\")\n\t\trequire.NoError(t, err)\n\t}()\n\n\ttestdata := analysistest.TestData()\n\tanalysistest.Run(t, testdata, Analyzer, \"go.uber.org/anonymousfunction\")\n}\n\nfunc TestPrettyPrint(t *testing.T) { //nolint:paralleltest\n\t// We specifically do not set this test to be parallel such that this test is run separately\n\t// from the parallel tests. This makes it possible to set the pretty-print flag to true for\n\t// testing and false for the other tests.\n\terr := config.Analyzer.Flags.Set(config.PrettyPrintFlag, \"true\")\n\trequire.NoError(t, err)\n\tdefer func() {\n\t\terr := config.Analyzer.Flags.Set(config.PrettyPrintFlag, \"false\")\n\t\trequire.NoError(t, err)\n\t}()\n\n\ttestdata := analysistest.TestData()\n\tanalysistest.Run(t, testdata, Analyzer, \"prettyprint\")\n}\n\nfunc TestGroupErrorMessages(t *testing.T) { //nolint:paralleltest\n\t// We specifically do not set this test to be parallel such that this test is run separately\n\t// from the parallel tests. This makes it possible to test the group error messages flag independently\n\t// without affecting the other tests.\n\ttestdata := analysistest.TestData()\n\n\tdefaultValue := config.Analyzer.Flags.Lookup(config.GroupErrorMessagesFlag).Value.String()\n\n\terr := config.Analyzer.Flags.Set(config.GroupErrorMessagesFlag, \"true\")\n\trequire.NoError(t, err)\n\tanalysistest.Run(t, testdata, Analyzer, \"grouping/enabled\")\n\n\terr = config.Analyzer.Flags.Set(config.GroupErrorMessagesFlag, \"false\")\n\trequire.NoError(t, err)\n\tanalysistest.Run(t, testdata, Analyzer, \"grouping/disabled\")\n\n\t// Reset the flag to its default value.\n\tdefer func() {\n\t\terr := config.Analyzer.Flags.Set(config.GroupErrorMessagesFlag, defaultValue)\n\t\trequire.NoError(t, err)\n\t}()\n}\n\nfunc TestMain(m *testing.M) {\n\tflags := map[string]string{\n\t\t// Pretty print should be turned off for easier error message matching in test files.\n\t\tconfig.PrettyPrintFlag:           \"false\",\n\t\tconfig.ExcludeFileDocStringsFlag: \"@generated,Code generated by\",\n\t\tconfig.ExcludePkgsFlag:           \"ignoredpkg1,ignoredpkg2\",\n\t}\n\tfor f, v := range flags {\n\t\tif err := config.Analyzer.Flags.Set(f, v); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to set config flag %s with %s: %s\", f, v, err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\n\tgoleak.VerifyTestMain(m)\n}\n"
        },
        {
          "name": "nilawaytest",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}