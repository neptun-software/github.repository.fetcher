{
  "metadata": {
    "timestamp": 1736566851053,
    "page": 421,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "odigos-io/odigos",
      "stars": 3302,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1875,
          "content": "frontend/webapp/node_modules\n.git/\nDockerfile\nodiglet/Dockerfile\nodiglet/base.Dockerfile\nodiglet/debug.Dockerfile\ntests # not needed in context for odigos components builds\ngo.work\ngo.work.sum"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.15234375,
          "content": ".idea\ndist/\nnode_modules\n.DS_Store\ngo.work.sum\ngo.work\ncli/odigos\n.venv\n**/__pycache__/\n**/*.pyc\nserving-certs/\n\n**.tfstate\n**.tfstate.backup\n**.terraform**"
        },
        {
          "name": ".goreleaser.yaml",
          "type": "blob",
          "size": 1.5244140625,
          "content": "# This is an example .goreleaser.yml file with some sensible defaults.\n# Make sure to check the documentation at https://goreleaser.com\nproject_name: odigos\nbefore:\n  hooks:\n    - sh -c 'cd frontend/webapp && yarn install && yarn build'\nbuilds:\n  - env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - windows\n      - darwin\n    goarch:\n      - amd64\n      - arm64\n    dir: ./cli\n    id: odigos\n    ldflags:\n      - -X github.com/odigos-io/odigos/cli/cmd.OdigosVersion={{ .Tag }}\n      - -X github.com/odigos-io/odigos/cli/cmd.OdigosCommit={{ .ShortCommit }}\n      - -X github.com/odigos-io/odigos/cli/cmd.OdigosDate={{ .Date }}\n    tags:\n     - embed_manifests\narchives:\n  - id: odigos\n    name_template: \"cli_{{ .Version }}_{{ .Os }}_{{ .Arch }}\"\n    builds:\n      - odigos\n    files:\n      - none*\nchecksum:\n  name_template: \"checksums.txt\"\nsnapshot:\n  name_template: \"{{ incpatch .Version }}-next\"\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - \"^docs:\"\n      - \"^test:\"\nbrews:\n  - repository:\n      owner: keyval-dev\n      name: homebrew-odigos-cli\n      token: \"{{ .Env.HOMEBREW_GITHUB_API_TOKEN }}\"\n    commit_msg_template: \"release: {{ .Tag }}\"\n    ids:\n      - odigos\n    commit_author:\n      name: odigos-ci\n      email: info@keyval.dev\n    homepage: https://odigos.io\n    description: Odigos CLI Utility\n    caveats: \"Thanks for installing Odigos CLI! Please run `odigos install` to install Odigos in your Kubernetes cluster.\"\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json\n# vim: set ts=2 sw=2 tw=0 fo=cnqoj\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.0830078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\n## Examples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.4892578125,
          "content": "# Contributing Guide\n\n* [Welcome](#welcome)\n* [Ways to Contribute](#ways-to-contribute)\n* [Find an Issue](#find-an-issue)\n* [Issue Guidelines](#issue-guidelines)\n* [Pull Request Guidelines](#pull-request-guidelines)\n* [Communication](#communication)\n* [Code Review Process](#code-review-process)\n* [Testing Requirements](#testing-requirements)\n* [Code of Conduct](#code-of-conduct)\n* [License](#license)\n* [Local Development](#local-development)\n  - [Run Odigos CLI from Code](#run-odigos-cli-from-code)\n  - [How to Develop Odigos Locally](#how-to-develop-odigos-locally)\n  - [How to Build and Run Odigos Frontend Locally](#how-to-build-and-run-odigos-frontend-locally)\n* [Odiglet](#odiglet)\n  - [Builder Base Image](#builder-base-image)\n  - [Remote Debugging](#remote-debugging)\n* [Instrumentor](#instrumentor)\n  - [Debugging](#debugging)\n\nWelcome! We are glad that you want to contribute to our project! 💖\n\nAs you get started, you are in the best position to give us feedback on areas of\nour project that we need help with, including:\n\n- Problems found during setting up a new developer environment\n- Gaps in our Quickstart Guide or documentation\n- Bugs in our automation scripts\n\nIf anything doesn't make sense, or doesn't work when you run it, please open a\nbug report and let us know!\n\n### Ways to Contribute\n\nThere are many ways to contribute to the Odigos project:\n\n- **New Features:** Suggest or implement new features that can improve the project. Provide as much context and detail as possible to help us evaluate your idea.\n- **Builds and CI/CD:** Help enhance the build pipelines or improve CI/CD workflows to ensure smoother development processes.\n- **Bug Fixes:** Identify and fix bugs. Make sure to document the issue and verify your fixes with appropriate tests.\n- **Documentation:** Improve existing documentation, fix typos, or write new guides and tutorials to help contributors and users.\n- **Issue Triage:** Assist with categorizing, labeling, and prioritizing issues to streamline the workflow.\n- **Answering Questions:** Participate in discussions on Slack or mailing lists to help community members.\n- **Web Design:** Contribute to the design and UX of project-related websites or dashboards.\n- **Communications, Social Media, and Blog Posts:** Help create content for social media, blogs, or other channels to promote the project and engage with the community.\n- **Release Management:** Assist in preparing, testing, and documenting releases to ensure smooth rollouts.\n\nEvery contribution, big or small, is greatly appreciated and helps make Odigos better for everyone!\n\n## Find an Issue\n\nWe have good first issues for new contributors and help wanted issues suitable\nfor any contributor. [good first issue](https://github.com/odigos-io/odigos/labels/good%20first%20issue) has extra information to\nhelp you make your first contribution. [help wanted](https://github.com/odigos-io/odigos/labels/help%20wanted) are issues\nsuitable for someone who isn't a core maintainer and is good to move onto after\nyour first pull request.\n\nSometimes there won’t be any issues with these labels. That’s ok! There is\nlikely still something for you to work on.\n\nOnce you see an issue that you'd like to work on, please post a comment saying\nthat you want to work on it. Something like \"I want to work on this\" is fine.\n\n## Issue Guidelines\n\nWhen reporting an issue:\n\n1. Use a clear and descriptive title.\n2. Include detailed steps to reproduce the issue.\n3. Share relevant logs, configurations, or screenshots.\n4. Label the issue appropriately (e.g., bug, feature request, enhancement).\n\n## Pull Request Guidelines\n\nWhen submitt\n\n1. Include a clear description of the change and its purpose.\n2. Link to any related issues or documentation.\n3. Add tests to cover new functionality or fix existing ones.\n4. Ensure your branch is up to date with the main branch.\n\n## Communication\n\nIf you have questions or need help:\n\n- Join our [Slack Community](https://join.slack.com/t/odigos/shared_invite/zt-1d7egaz29-Rwv2T8kyzc3mWP8qKobz~A#link-to-slack).\n- Post questions or ideas in our [GitHub Discussions](https://github.com/odigos-io/odigos/discussions#link-to-discussions).\n- Email the core maintainers at support@odigos.io.\n\n## Code Review Process\n\nAll contributions will go through the following review process:\n\n1. A maintainer will review your pull request within 3-5 business days.\n2. Feedback will be provided for improvements, if necessary.\n3. Once approved, your pull request will be merged into the main branch.\n4. Larger changes may require discussion in a GitHub issue or pull request thread.\n5. We are available on [Slack](https://join.slack.com/t/odigos/shared_invite/zt-1d7egaz29-Rwv2T8kyzc3mWP8qKobz~A) to discuss any issues regarding the PR process or general contributions.\n\n## Testing Requirements\n\nTests will run automatically in CI (Continuous Integration) and must pass for the pull request to be merged.\n\n## Code of Conduct\n\nWe expect all contributors to follow our [Code of Conduct](CODE_OF_CONDUCT.md).\nThis ensures a welcoming, inclusive, and respectful community for everyone.\n\n## License\n\nBy contributing, you agree that your contributions will be licensed under the project's [Apache License](LICENSE).\n\n## Local Development\n\nThis section describes how to setup your local development environment\nand test your code changes.\n\nFirst, follow the [Quickstart Guide](https://docs.odigos.io/quickstart/introduction) in odigos docs to create a local k8s development cluster with a demo application and a functioning odigos installation.\n\nMake sure you are able to:\n\n- [X] run Odigos CLI in your terminal.\n- [X] open the demo application UI in your browser to interact with it.\n- [X] install odigos in your development cluster with `odigos install`.\n- [X] open Odigos UI in your browser to interact with it.\n- [X] see telemetry data that odigos generates, for example traces in jaeger.\n\nAfter you have a working odigos setup, you can start making changes to the code and test them locally.\n\n### Run Odigos Cli from code\n\nThe code for the odigos cli tool is found in the `cli` directory [here](https://github.com/odigos-io/odigos/tree/main/cli).\nTest your cli code changes by running the following:\n\n```bash\ngo run -tags=embed_manifests ./cli\n```\n\nTo run `odigos install` cli command from a local source, use the make command from repo root:\n\n```bash\nmake cli-install\n# Installing Odigos version v0.1.81 in namespace odigos-system ...\n```\n\nIf you test changes to the `install` command, you will need to `odigos uninstall` first before you can run install again.\n\n### How to Develop Odigos Locally\n\nThe main steps involved when debugging Odigos locally are:\n\n1. Use a Kind kubernetes cluster.\n2. Choose one of the following options for deploy:\n\n- Deploy all pods in the odigos-system namespace:\n\n```bash\nmake deploy\n```\n\n- Deploy a specific service by running one of the following commands:\n\n```bash\nmake deploy-odiglet \nmake deploy-autoscaler \nmake deploy-collector \nmake deploy-scheduler\nmake deploy-instrumentor\nmake deploy-ui\n```\n\n- Deploy odiglet and build instrumentation agents from source code:\n\nFirst - make sure you clone the [nodejs agent](https://github.com/odigos-io/opentelemetry-node) repos in the same directory as the odigos repo. e.g. `../opentelemetry-node` should exist alongside the odigos repo in your local filesystem.\n\nTo deploy odiglet with agents from this source directory:\n\n```bash\nmake deploy-odiglet-with-agents\n```\n\nSee the [Odigos docs](https://docs.odigos.io/intro) for the full steps on debugging Odigos locally.\n\n### How to Build and run Odigos Frontend Locally\n\nBuild the frontend\n\n```bash\ncd frontend/webapp \nyarn install\nyarn build\nyarn dev\ncd ../.. # back to root of the project for next steps\n```\n\nThen run the web server\n\n```bash\ncd frontend\ngo build -o odigos-backend && ./odigos-backend --port 8085 --debug --address 0.0.0.0\n```\n\n## Odiglet\n\n### builder base image\n\nOdiglet Dockerfile uses a base image for the builder, which saves up lots of time during builds. The Dockerfile for the base image can be found in `./odiglet/base.Dockerfile` and is consumed like so: `FROM keyval/odiglet-base:v1.0 as builder`\nIf you need to add additional packages to the build, update this file. Then publish the new base image to dockerhub with the github action named `Publish Odiglet Base Builder` in the `Actions` tab.\nYou will need to specify the new image tag as a version in the format `v1.0`.\nAfter the image is published, update the dependency in `./odiglet/Dockerfile` to use the new image tag.\n\n### Remote debugging\n\nFirst, you will have to find which version of Odigos you are running. You can do this by running `odigos version` in your terminal.\nThen, run the following command to build Odiglet in debug mode and restart the Odiglet pod:\n\n```bash\nmake debug-odiglet\n```\n\nThen, you can attach a debugger to the Odiglet pod. For example, if you are using Goland, you can follow the instructions [here](https://www.jetbrains.com/help/go/attach-to-running-go-processes-with-debugger.html#step-3-create-the-remote-run-debug-configuration-on-the-client-computer) to attach to a remote process.\nFor Visual Studio Code, you can use the `.vscode/launch.json` file in this repo to attach to the Odiglet pod.\n\n## Instrumentor\n\n### Debugging\n\nIf the Mutating Webhook is enabled, follow these steps:\n\n1. Copy the TLS certificate and key:\n   Create a local directory and extract the certificate and key by running the following command:\n\n```\nmkdir -p serving-certs && kubectl get secret webhook-cert -n odigos-system -o jsonpath='{.data.tls\\.crt}' | base64 -d > serving-certs/tls.crt && kubectl get secret webhook-cert -n odigos-system -o jsonpath='{.data.tls\\.key}' | base64 -d > serving-certs/tls.key\n```\n\n2. Apply this service to the cluster, it will replace the existing `odigos-instrumentor` service:\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: odigos-instrumentor\n  namespace: odigos-system\nspec:\n  type: ExternalName\n  externalName: host.docker.internal\n  ports:\n    - name: webhook-server\n      port: 9443\n      protocol: TCP\n```\n\nOnce this is done, you can use the .vscode/launch.json configuration and run instrumentor local for debugging.\n\n## Odigos Collector Distribution\n\n### Debugging and Trouble Shooting\n\nIt is sometimes necessary to look at the data flowing through the collector pipeline while debugging or troubleshooting. This can be done by adding a debug destination to the collector configuration.\n\nThis collector will write 2 telemetry items per second to the cluster collector logs.\n\n```sh\nmake dev-debug-destination\n```\n\nIt you want to have the pipeline but don't want to send data anywhere, use the nop destination:\n\n```sh\nmake dev-nop-destination\n```\n"
        },
        {
          "name": "DEVELOPMENT.md",
          "type": "blob",
          "size": 3.958984375,
          "content": "# Development Guide\n\nThis guide provides advanced instructions for contributors and maintainers, covering topics such as debugging specific components, analyzing performance profiles, and working with internal tools. It complements the `CONTRIBUTING.md` by offering insights into advanced development workflows and optimization techniques.\n\n---\n\n## CPU and Memory Profiling for the Collectors\n\n### Step 1: Port Forward the Gateway or Data Collection Pod\nForward the relevant pod to your local machine to enable profiling access:\n\n```bash\nkubectl port-forward pod/<pod-name> -n odigos-system 1777:1777\n```\n\n### Step 2: Collect Profiling Data\n\n- **CPU Profile**  \n   Captures data about the time your application spends executing functions. Use this profile to identify performance bottlenecks, optimize CPU-intensive operations, and analyze which parts of the code consume the most CPU resources.\n\n   ```bash\n   curl -o cpu_profile.prof http://localhost:1777/debug/pprof/profile?seconds=30\n   ```\n\n- **Heap Memory Profile**  \n   Captures a snapshot of memory currently in use by your application after the latest garbage collection. Use this profile to identify memory leaks, track high memory usage, and analyze memory consumption by specific parts of the code.\n\n   ```bash\n   curl -o heap.out http://localhost:1777/debug/pprof/heap\n   ```\n\n- **Historical Memory Allocation**  \n   Provides insights into all memory allocations made by the program since it started running, including memory that has already been freed by the garbage collector (GC). This is useful for understanding memory allocation patterns and optimizing allocation behavior.\n\n   ```bash\n   curl -o allocs.out http://localhost:1777/debug/pprof/allocs\n   ```\n\n### Step 3: Analyze the Profiles\nAfter collecting the profiling data, use the `go tool pprof` command to analyze the profiles visually in your web browser. Replace `<output file>` with the appropriate file (`cpu_profile.prof`, `heap.out`, or `allocs.out`):\n\n```bash\ngo tool pprof -http=:8080 <output file>\n```\n\nThis opens an interactive interface in your browser where you can:\n- **Visualize Hotspots**: View flame graphs or directed graphs for easy identification of bottlenecks.\n- **Drill Down**: Explore specific functions or memory allocations for detailed insights.\n\n---\n\n## Debugging CLI Commands\n\n### Debugging the `cli pro` Command\n\nTo debug the `cli pro` command in Visual Studio Code, use the following configuration in your `.vscode/launch.json` file:\n\n```jsonc\n{\n  \"name\": \"cli pro\",\n  \"type\": \"go\",\n  \"request\": \"launch\",\n  \"mode\": \"debug\",\n  \"program\": \"${workspaceFolder}/cli\",\n  \"cwd\": \"${workspaceFolder}/cli\",\n  \"args\": [\"pro\", \"--onprem-token\", \"${input:onprem_token}\"],\n  \"buildFlags\": \"-tags=embed_manifests\"\n}\n```\n\n#### How to Use\n1. Open the **Run and Debug** view in Visual Studio Code:\n   - Press `Ctrl+Shift+D` (Windows/Linux) or `Cmd+Shift+D` (macOS).\n2. Select the `cli pro` configuration from the dropdown menu.\n3. Click the green **Play** button to start debugging.\n4. When prompted, enter your `onprem-token` value.\n5. The debugger will start the `cli pro` command with the provided token and attach to the process for debugging.\n\n---\n\n### Debugging the `cli install` Command\n\nTo debug the `cli install` command in Visual Studio Code, use the following configuration in your `launch.json` file:\n\n```jsonc\n{\n  \"name\": \"cli install\",\n  \"type\": \"go\",\n  \"request\": \"launch\",\n  \"mode\": \"debug\",\n  \"program\": \"${workspaceFolder}/cli\",\n  \"cwd\": \"${workspaceFolder}/cli\",\n  \"args\": [\"install\", \"--version\", \"ODIGOS_VERSION\"],\n  \"buildFlags\": \"-tags=embed_manifests\"\n}\n```\n\n#### How to Use\n1. Open the **Run and Debug** view in Visual Studio Code:\n   - Press `Ctrl+Shift+D` (Windows/Linux) or `Cmd+Shift+D` (macOS).\n2. Select the `cli install` configuration from the dropdown menu.\n3. Replace `\"ODIGOS_VERSION\"` in the `args` section with the desired version number.\n4. Click the green **Play** button to start debugging.\n5. The debugger will start the `cli install` command with the specified version.\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.166015625,
          "content": "FROM --platform=$BUILDPLATFORM golang:1.23 AS builder\nARG SERVICE_NAME\n\n# Copyy local modules required by the build\nWORKDIR /workspace\nCOPY api/ api/\nCOPY common/ common/\nCOPY k8sutils/ k8sutils/\n\nWORKDIR /workspace/$SERVICE_NAME\nRUN mkdir -p /workspace/build\n# Pre-copy/cache go.mod for pre-downloading dependencies and only redownloading\nCOPY $SERVICE_NAME/go.mod $SERVICE_NAME/go.sum ./\nRUN --mount=type=cache,target=/go/pkg \\\n    go mod download && go mod verify\n# Copy rest of source code\nCOPY $SERVICE_NAME/ .\n# Build for target architecture\nARG TARGETARCH\nRUN go mod tidy\nRUN --mount=type=cache,target=/root/.cache/go-build \\\n    --mount=type=cache,target=/go/pkg \\\n    CGO_ENABLED=0 GOARCH=$TARGETARCH \\\n    go build -a -o /workspace/build/$SERVICE_NAME .\n\n# Use distroless as minimal base image to package the manager binary\n# Refer to https://github.com/GoogleContainerTools/distroless for more details\nFROM gcr.io/distroless/static:nonroot\nARG SERVICE_NAME\nWORKDIR /\nCOPY --from=builder /workspace/build/$SERVICE_NAME ./app\nUSER 65532:65532\n# TODO: calling the binary by SERVICE_NAME should be better for us in debugging\n# but it does not work in distroless image\nENTRYPOINT [\"/app\"]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023 Odigos\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MIGRATION.md",
          "type": "blob",
          "size": 1.4521484375,
          "content": "# Migration\n\nOdigos is composed of few parts:\n1. The Odigos cli.\n1. Odigos UI which is started by the cli.\n1. The Odigos deployment in a k8s cluster.\n\n## Check your Versions\n\nUse Odigos cli to test for your versions of odigos:\n```bash\n➜  ~ odigos version\nOdigos Cli Version: version.Info{Version:'v1.0.0', GitCommit:'6977d54', BuildDate:'2023-10-31T12:44:18Z'}\nOdigos Version (in cluster): version.Info{Version:'v1.0.0'}\n```\n\nThis cli output (at the time of writing) shows that the cli version is `v1.0.0` and the version of Odigos in the cluster is also `v1.0.0`. \n\n## Upgrade Odigos CLI\n\n### Brew (MacOS only)\n\n```sh\nbrew install keyval-dev/homebrew-odigos-cli/odigos\n```\n\nWill install the latest version of the Odigos cli from brew.\n\n### GitHub Releases\n\nGo to the [Releases Page](https://github.com/odigos-io/odigos/releases), download the latest version for your arch and os, and install it by coping the executable to a directory in your `PATH`. You can execute `odigos version` in your shell to verify that odigos is installed correctly.\n\n## Upgrade Odigos in the Cluster\n\n** New from Odigos v1.0.0 **\n\n```sh\n$ odigos upgrade\n```\n\nThis command will upgrade the Odigos deployment in the cluster to the version of the CLI.\n\n## Development\n\n### Odigos Manifests\n\nAny change that is made in code to a manifest of odigos k8s object is automatically applied to the cluster when `odigos upgrade` is run. Any k8s object which was removed from the code will be removed from the cluster.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 9.2216796875,
          "content": "TAG ?= $(shell odigos version --cluster)\nODIGOS_CLI_VERSION ?= $(shell odigos version --cli)\nORG ?= keyval\n\n.PHONY: build-odiglet\nbuild-odiglet:\n\tdocker build -t $(ORG)/odigos-odiglet:$(TAG) . -f odiglet/Dockerfile --build-arg ODIGOS_VERSION=$(TAG)\n\n.PHONY: verify-nodejs-agent\nverify-nodejs-agent:\n\t@if [ ! -f ../opentelemetry-node/package.json ]; then \\\n\t\techo \"Error: To build odiglet agents from source, first clone the agents code locally\"; \\\n\t\texit 1; \\\n\tfi\n\n.PHONY: build-odiglet-with-agents\nbuild-odiglet-with-agents:\n\tdocker build -t $(ORG)/odigos-odiglet:$(TAG) . -f odiglet/Dockerfile --build-arg ODIGOS_VERSION=$(TAG) --build-context nodejs-agent-src=../opentelemetry-node\n\n.PHONY: build-autoscaler\nbuild-autoscaler:\n\tdocker build -t $(ORG)/odigos-autoscaler:$(TAG) . --build-arg SERVICE_NAME=autoscaler\n\n.PHONY: build-instrumentor\nbuild-instrumentor:\n\tdocker build -t $(ORG)/odigos-instrumentor:$(TAG) . --build-arg SERVICE_NAME=instrumentor\n\n.PHONY: build-scheduler\nbuild-scheduler:\n\tdocker build -t $(ORG)/odigos-scheduler:$(TAG) . --build-arg SERVICE_NAME=scheduler\n\n.PHONY: build-collector\nbuild-collector:\n\tdocker build -t $(ORG)/odigos-collector:$(TAG) collector -f collector/Dockerfile\n\n.PHONY: build-ui\nbuild-ui:\n\tdocker build -t $(ORG)/odigos-ui:$(TAG) . -f frontend/Dockerfile\n\n.PHONY: build-images\nbuild-images:\n\t# prefer to build timeconsuimg images first to make better use of parallelism\n\tmake -j 3 build-ui build-collector build-odiglet build-autoscaler build-scheduler build-instrumentor TAG=$(TAG)\n\n.PHONY: push-odiglet\npush-odiglet:\n\tdocker buildx build --platform linux/amd64,linux/arm64/v8 --push -t $(ORG)/odigos-odiglet:$(TAG) . -f odiglet/Dockerfile\n\n.PHONY: push-autoscaler\npush-autoscaler:\n\tdocker buildx build --platform linux/amd64,linux/arm64/v8 --push -t $(ORG)/odigos-autoscaler:$(TAG) . --build-arg SERVICE_NAME=autoscaler\n\n.PHONY: push-instrumentor\npush-instrumentor:\n\tdocker buildx build --platform linux/amd64,linux/arm64/v8 --push -t $(ORG)/odigos-instrumentor:$(TAG) . --build-arg SERVICE_NAME=instrumentor\n\n.PHONY: push-scheduler\npush-scheduler:\n\tdocker buildx build --platform linux/amd64,linux/arm64/v8 --push -t $(ORG)/odigos-scheduler:$(TAG) . --build-arg SERVICE_NAME=scheduler\n\n.PHONY: push-collector\npush-collector:\n\tdocker buildx build --platform linux/amd64,linux/arm64/v8 --push -t $(ORG)/odigos-collector:$(TAG) collector -f collector/Dockerfile\n\n.PHONY: push-ui\npush-ui:\n\tdocker buildx build --platform linux/amd64,linux/arm64/v8 --push -t $(ORG)/odigos-ui:$(TAG) . -f frontend/Dockerfile\n\n.PHONY: push-images\npush-images:\n\tmake push-autoscaler TAG=$(TAG)\n\tmake push-scheduler TAG=$(TAG)\n\tmake push-odiglet TAG=$(TAG)\n\tmake push-instrumentor TAG=$(TAG)\n\tmake push-collector TAG=$(TAG)\n\tmake push-ui TAG=$(TAG)\n\n.PHONY: load-to-kind-odiglet\nload-to-kind-odiglet:\n\tkind load docker-image $(ORG)/odigos-odiglet:$(TAG)\n\n.PHONY: load-to-kind-autoscaler\nload-to-kind-autoscaler:\n\tkind load docker-image $(ORG)/odigos-autoscaler:$(TAG)\n\n.PHONY: load-to-kind-collector\nload-to-kind-collector:\n\tkind load docker-image $(ORG)/odigos-collector:$(TAG)\n\n.PHONY: load-to-kind-instrumentor\nload-to-kind-instrumentor:\n\tkind load docker-image $(ORG)/odigos-instrumentor:$(TAG)\n\n.PHONY: load-to-kind-ui\nload-to-kind-ui:\n\tkind load docker-image $(ORG)/odigos-ui:$(TAG)\n\n.PHONY: load-to-kind-scheduler\nload-to-kind-scheduler:\n\tkind load docker-image $(ORG)/odigos-scheduler:$(TAG)\n\n.PHONY: load-to-kind\nload-to-kind:\n\tmake -j 6 load-to-kind-instrumentor load-to-kind-autoscaler load-to-kind-scheduler load-to-kind-odiglet load-to-kind-collector load-to-kind-ui TAG=$(TAG)\n\n\n.PHONY: restart-ui\nrestart-ui:\n\t-kubectl rollout restart deployment odigos-ui -n odigos-system\n\n.PHONY: restart-odiglet\nrestart-odiglet:\n\t-kubectl rollout restart daemonset odiglet -n odigos-system\n\n.PHONY: restart-autoscaler\nrestart-autoscaler:\n\t-kubectl rollout restart deployment odigos-autoscaler -n odigos-system\n\n.PHONY: restart-instrumentor\nrestart-instrumentor:\n\t-kubectl rollout restart deployment odigos-instrumentor -n odigos-system\n\n.PHONY: restart-scheduler\nrestart-scheduler:\n\t-kubectl rollout restart deployment odigos-scheduler -n odigos-system\n\n.PHONY: restart-collector\nrestart-collector:\n\t-kubectl rollout restart deployment odigos-gateway -n odigos-system\n\t# DaemonSets don't directly support the rollout restart command in the same way Deployments do. However, you can achieve the same result by updating an environment variable or any other field in the DaemonSet's pod template, triggering a rolling update of the pods managed by the DaemonSet\n\t-kubectl -n odigos-system patch daemonset odigos-data-collection -p \"{\\\"spec\\\":{\\\"template\\\":{\\\"metadata\\\":{\\\"annotations\\\":{\\\"kubectl.kubernetes.io/restartedAt\\\":\\\"$(date +%Y-%m-%dT%H:%M:%S%z)\\\"}}}}}\"\n\n\n.PHONY: deploy-odiglet\ndeploy-odiglet:\n\tmake build-odiglet TAG=$(TAG) && make load-to-kind-odiglet TAG=$(TAG) && make restart-odiglet\n\n# Use this target to deploy odiglet with local clones of the agents.\n# To work, the agents must be cloned in the same directory as the odigos (e.g. in '../opentelemetry-node')\n# There you can make code changes to the agents and deploy them with the odiglet.\n.PHONY: deploy-odiglet-with-agents\ndeploy-odiglet-with-agents: verify-nodejs-agent build-odiglet-with-agents load-to-kind-odiglet restart-odiglet\n\n.PHONY: deploy-autoscaler\ndeploy-autoscaler:\n\tmake build-autoscaler TAG=$(TAG) && make load-to-kind-autoscaler TAG=$(TAG) && make restart-autoscaler\n\n.PHONY: deploy-collector\ndeploy-collector:\n\tmake build-collector TAG=$(TAG) && make load-to-kind-collector TAG=$(TAG) && make restart-collector\n\n.PHONY: deploy-instrumentor\ndeploy-instrumentor:\n\tmake build-instrumentor TAG=$(TAG) && make load-to-kind-instrumentor TAG=$(TAG) && make restart-instrumentor\n\n.PHONY: deploy-ui\ndeploy-ui:\n\tmake build-ui TAG=$(TAG) && make load-to-kind-ui TAG=$(TAG) && make restart-ui\n\n.PHONY: deploy-scheduler\ndeploy-scheduler:\n\tmake build-scheduler TAG=$(TAG) && make load-to-kind-scheduler TAG=$(TAG) && make restart-scheduler\n\n\n.PHONY: debug-odiglet\ndebug-odiglet:\n\tdocker build -t $(ORG)/odigos-odiglet:$(TAG) . -f odiglet/debug.Dockerfile\n\tkind load docker-image $(ORG)/odigos-odiglet:$(TAG)\n\tkubectl delete pod -n odigos-system -l app.kubernetes.io/name=odiglet\n\tkubectl wait --for=condition=ready pod -n odigos-system -l app.kubernetes.io/name=odiglet --timeout=180s\n\tkubectl port-forward -n odigos-system daemonset/odiglet 2345:2345\n\n.PHONY: deploy\ndeploy:\n\tmake deploy-odiglet && make deploy-autoscaler && make deploy-collector && make deploy-instrumentor && make deploy-scheduler && make deploy-ui\n\n,PHONY: e2e-test\ne2e-test:\n\t./e2e-test.sh\n\nALL_GO_MOD_DIRS := $(shell find . -type f -name 'go.mod' -exec dirname {} \\; | sort)\n\n.PHONY: go-mod-tidy\ngo-mod-tidy: $(ALL_GO_MOD_DIRS:%=go-mod-tidy/%)\ngo-mod-tidy/%: DIR=$*\ngo-mod-tidy/%:\n\t@cd $(DIR) && go mod tidy -compat=1.21\n\n.PHONY: check-clean-work-tree\ncheck-clean-work-tree:\n\tif [ -n \"$$(git status --porcelain)\" ]; then \\\n\t\tgit status; \\\n\t\tgit --no-pager diff; \\\n\t\techo 'Working tree is not clean, did you forget to run \"make go-mod-tidy\"?'; \\\n\t\texit 1; \\\n\tfi\n\n# installs odigos from the local source, with local changes to api and cli directorie reflected in the odigos deployment\n.PHONY: cli-install\ncli-install:\n\t@echo \"Installing odigos from source. version: $(ODIGOS_CLI_VERSION)\"\n\tcd ./cli ; go run -tags=embed_manifests . install --version $(ODIGOS_CLI_VERSION) --nowait\n\n.PHONY: cli-uninstall\ncli-uninstall:\n\t@echo \"Uninstalling odigos from source. version: $(ODIGOS_CLI_VERSION)\"\n\tcd ./cli ; go run -tags=embed_manifests . uninstall\n\n.PHONY: cli-upgrade\ncli-upgrade:\n\t@echo \"Upgrading odigos from source. version: $(ODIGOS_CLI_VERSION)\"\n\tcd ./cli ; go run -tags=embed_manifests . upgrade --version $(ODIGOS_CLI_VERSION) --yes\n\n.PHONY: cli-build\ncli-build:\n\t@echo \"Building the cli executable for tests\"\n\tcd cli && go build -tags=embed_manifests -o odigos .\n\n.PHONY: cli-diagnose\ncli-diagnose:\n\t@echo \"Diagnosing cluster data for debugging\"\n\tcd ./cli ; go run -tags=embed_manifests . diagnose\n\n.PHONY: helm-install\nhelm-install:\n\t@echo \"Installing odigos using helm\"\n\thelm upgrade --install odigos  ./helm/odigos --create-namespace --namespace odigos-system --set image.tag=$(ODIGOS_CLI_VERSION)\n\tkubectl label namespace odigos-system odigos.io/system-object=\"true\"\n\n.PHONY: api-all\napi-all:\n\tmake -C api all\n\n.PHONY: crd-apply\ncrd-apply: api-all cli-upgrade\n\t@echo \"Applying changes to CRDs in api directory\"\n\n.PHONY: dev-tests-kind-cluster\ndev-tests-kind-cluster:\n\t@echo \"Creating a kind cluster for development\"\n\tkind delete cluster\n\tkind create cluster\n\n.PHONY: dev-tests-setup\ndev-tests-setup: TAG := e2e-test\ndev-tests-setup: dev-tests-kind-cluster cli-build build-images load-to-kind\n\n# Use this target to avoid rebuilding the images if all that changed is the e2e test code\n.PHONY: dev-tests-setup-no-build\ndev-tests-setup-no-build: TAG := e2e-test\ndev-tests-setup-no-build: dev-tests-kind-cluster load-to-kind\n\n# Use this for debug to add a destination which only prints samples of telemetry items to the cluster gateway collector logs\n.PHONY: dev-debug-destination\ndev-debug-destination:\n\tkubectl apply -f ./tests/debug-exporter.yaml\n\n.PHONY: dev-add-nop-destination\ndev-nop-destination:\n\tkubectl apply -f ./tests/nop-exporter.yaml\n\n.PHONY: dev-add-backpressue-destination\ndev-backpressue-destination:\n\tkubectl apply -f ./tests/backpressure-exporter.yaml"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.59375,
          "content": "<p align=\"center\">\n    <a href=\"https://github.com/odigos-io/odigos/actions/workflows/release.yml\" target=\"_blank\">\n        <img src=\"https://github.com/odigos-io/odigos/actions/workflows/release.yml/badge.svg\" alt=\"Release Odigos CLI\" style=\"margin-right: 10px; border: 1px solid #007acc; border-radius: 4px; padding: 5px;\">\n    </a>\n    <a href=\"https://goreportcard.com/report/github.com/odigos-io/odigos/cli\" target=\"_blank\">\n        <img src=\"https://goreportcard.com/badge/github.com/odigos-io/odigos/cli\" alt=\"Go Report Card\" style=\"margin-right: 10px; border: 1px solid #4CAF50; border-radius: 4px; padding: 5px;\">\n    </a>\n    <a href=\"https://godoc.org/github.com/odigos-io/odigos/cli\" target=\"_blank\">\n        <img src=\"https://godoc.org/github.com/odigos-io/odigos/cli?status.svg\" alt=\"GoDoc\" style=\"border: 1px solid #f39c12; border-radius: 4px; padding: 5px;\">\n    </a>\n</p>\n\n<p align=\"center\">\n<img src=\"assets/logo.png\" width=\"350\" /></br>\n<h2>Generate distributed traces for any application in Kubernetes without code changes.</h2>\nIf you find Odigos helpful, please ⭐ this repository to show your support!\n</p>\n\n<h2 align=\"center\">\n    <a href=\"https://www.youtube.com/watch?v=nynyV7FC4VI\">Demo Video</a> • <a href=\"https://docs.odigos.io\">Documentation</a> • <a href=\"https://join.slack.com/t/odigos/shared_invite/zt-1d7egaz29-Rwv2T8kyzc3mWP8qKobz~A\">Join Slack Community</a>\n</h2>\n\n## What is Odigos?\n\nOdigos is an open-source distributed tracing solution that simplifyes and improves observability for Kubernetes environments. It provides instant tracing capabilities without requiring any code changes to your applications.\n\n## Key Features\n\n- **Code-Free Instrumentation** : Set up distributed tracing in minutes, eliminating manual code modifications.\n- **Multi-Language Support** : Works with Java, Python, .NET, Node.js, and Go applications.\n- **eBPF-Powered** : Utilizes eBPF technology for high-performance instrumentation of Go applications. eBPF-based instrumentation for Java, Python, and Node.js is available in the enterprise edition.\n- **OpenTelemetry Compatible** : Generates traces in OpenTelemetry format for broad tool compatibility.\n- **Vendor Agnostic** : Integrates with various monitoring solutions, avoiding vendor lock-in.\n- **Automatic Scaling** : Manages and scales OpenTelemetry collectors based on data volume.\n- **Opinionated Defaults** : Supplies common defaults and best practices out-of-the-box, requiring no deep knowledge of OpenTelemetry.\n\n## Why Choose Odigos\n\n1. **Simplicity** : Implement distributed tracing with minimal effort and complexity.\n2. **Performance** : Separates data recording and processing to minimize runtime impact.\n3. **Community-Backed** : With 3,000+ GitHub stars and a growing contributor base.\n4. **Expertise** : Created by multiple maintainers of OpenTelemetry, ensuring deep integration and alignment with industry standards.\n\nOdigos empowers platform engineers, DevOps professionals, and SREs to enhance their observability strategies quickly and effectively. It is an ideal solution for modern cloud-native environments, combining simplicity, performance, and industry expertise.\n\n## Features\n\n### ✨ Language Agnostic Auto-instrumentation\n\nOdigos supports any application written in Java, Python, .NET, Node.js, and **Go**.\nHistorically, compiled languages like Go have been difficult to instrument without code changes. Odigos solves this problem by uniquely leveraging [eBPF](https://ebpf.io).\n\n![Works on any application](docs/images/ui_choose_apps.png)\n\n### 🤝 Keep your existing observability tools\n\nOdigos currently supports all the popular managed and open-source destinations.\nBy producing data in the [OpenTelemetry](https://opentelemetry.io) format, Odigos can be used with any observability tool that supports OTLP.\n\nFor a complete list of supported destinations, see [here](#supported-destinations).\n\n![Works with any observability tool](docs/images/ui_choose_dest.png)\n\n### 🎛️ Collectors Management\n\nOdigos automatically scales OpenTelemetry collectors based on observability data volume.\nManage and configure collectors via a convenient web UI.\n\n![Collectors Management](docs/images/ui_overview.png)\n\n## Installation\n\nInstalling Odigos takes less than 5 minutes and requires no code changes.\nDownload our [CLI](https://docs.odigos.io/installation) and run the following command:\n\n```bash\nodigos install\n```\n\nFor more details, see our [quickstart guide](https://docs.odigos.io/intro).\n\n## Supported Destinations\n\n**For step-by-step instructions detailed for every destination, see these [docs](https://docs.odigos.io/backends).**\n\n### Managed Destinations\n\n| Destination             | Traces | Metrics | Logs |\n| ----------------------- | :----: | :-----: | :--: |\n| AppDynamics             |   ✅   |   ✅    |  ✅  |\n| Axiom                   |   ✅   |         |  ✅  |\n| AWS S3                  |   ✅   |         |  ✅  |\n| Azure Blob Storage      |   ✅   |         |  ✅  |\n| Better Stack            |        |   ✅    |  ✅  |\n| Causely                 |   ✅   |         |      |\n| Chronosphere            |   ✅   |   ✅    |      |\n| Coralogix               |   ✅   |   ✅    |  ✅  |\n| Dash0                   |   ✅   |   ✅    |  ✅  |\n| Datadog                 |   ✅   |   ✅    |  ✅  |\n| Dynatrace               |   ✅   |   ✅    |  ✅  |\n| Gigapipe                |   ✅   |         |      |\n| Google Cloud Monitoring |   ✅   |   ✅    |      |\n| Google Cloud Storage    |   ✅   |         |  ✅  |\n| Grafana Cloud           |   ✅   |   ✅    |  ✅  |\n| Groundcover inCloud     |   ✅   |   ✅    |  ✅  |\n| Honeycomb               |   ✅   |   ✅    |  ✅  |\n| HyperDX                 |   ✅   |   ✅    |  ✅  |\n| KloudMate               |   ✅   |   ✅    |  ✅  |\n| Last9                   |   ✅   |   ✅    |      |\n| Lightstep               |   ✅   |         |      |\n| Logz.io                 |   ✅   |   ✅    |  ✅  |\n| Lumigo                  |   ✅   |   ✅    |  ✅  |\n| New Relic               |   ✅   |   ✅    |  ✅  |\n| OpsVerse                |   ✅   |   ✅    |  ✅  |\n| Sentry                  |   ✅   |         |      |\n| Splunk                  |   ✅   |         |      |\n| Sumo Logic              |   ✅   |   ✅    |  ✅  |\n\n## Self-Hosted (Open Source) Destinations\n\n| Destination   | Traces | Metrics | Logs |\n| ------------- | :----: | :-----: | :--: |\n| ClickHouse    |   ✅   |   ✅    |  ✅  |\n| Elasticsearch |   ✅   |         |  ✅  |\n| Jaeger        |   ✅   |         |      |\n| Loki          |        |         |  ✅  |\n| OTLP          |   ✅   |   ✅    |  ✅  |\n| OTLP HTTP     |   ✅   |   ✅    |  ✅  |\n| Prometheus    |        |   ✅    |      |\n| Quickwit      |   ✅   |         |      |\n| qryn          |   ✅   |   ✅    |  ✅  |\n| SigNoz        |   ✅   |   ✅    |  ✅  |\n| Tempo         |   ✅   |         |      |\n\nCan't find the destination you need? Help us by following our quick [add new destination](https://docs.odigos.io/adding-new-dest) guide and submitting a PR.\n\n## Contributing\n\nPlease refer to the [CONTRIBUTING.md](CONTRIBUTING.md) file for information about how to get involved. We welcome issues, questions, and pull requests. Feel free to join our active [Slack Community](https://join.slack.com/t/odigos/shared_invite/zt-1d7egaz29-Rwv2T8kyzc3mWP8qKobz~A).\n\n## All Thanks To Our Contributors\n\n<a href=\"https://github.com/odigos-io/odigos/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=keyval-dev/odigos\" />\n</a>\n\n## License\n\nThis project is licensed under the terms of the Apache 2.0 open-source license. Please refer to [LICENSE](LICENSE) for the full terms.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.1064453125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nTo report a vulnerability please contact support@keyval.dev\n"
        },
        {
          "name": "agents",
          "type": "tree",
          "content": null
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "autoscaler",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "collector",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "destinations",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e-test.sh",
          "type": "blob",
          "size": 2.4697265625,
          "content": "#!/bin/bash\n\nkind create cluster || { echo \"Error: Failed to create Kind cluster\"; exit 1; }\n\n# Build CLI\ngo build -tags=embed_manifests -o odigos-e2e-test cli/main.go\n\n# Build and Load Odigos Images\nTAG=e2e-test make build-images load-to-kind\n\n# Install Odigos\n./odigos-e2e-test install --version e2e-test\n\n# Install Collector - Add Dependencies\nhelm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\n\nif [ ! -d \"opentelemetry-helm-charts\" ]; then \\\n    git clone https://github.com/open-telemetry/opentelemetry-helm-charts.git; \\\nfi\n\n# Install Collector\nhelm install test -f .github/workflows/e2e/collector-helm-values.yaml opentelemetry-helm-charts/charts/opentelemetry-collector --namespace traces --create-namespace\n\n# Wait for Collector to be ready\necho \"Waiting for Collector to be ready...\"\nkubectl wait --for=condition=Ready --timeout=60s -n traces pod/test-opentelemetry-collector-0\n\n# Install KV Shop\nkubectl create ns kvshop\nkubectl apply -f .github/workflows/e2e/kv-shop.yaml -n kvshop\n\n# Wait for KV Shop to be ready\necho \"Waiting for KV Shop to be ready...\"\nkubectl wait --for=condition=Ready --timeout=100s -n kvshop pods --all\n\n# Select kvshop namespace for instrumentation\nkubectl label namespace kvshop odigos-instrumentation=enabled\n\n# Connect to Jaeger destination\nkubectl create -f .github/workflows/e2e/jaeger-dest.yaml\n\n# Wait for Odigos to bring up collectors\nwhile [[ $(kubectl get daemonset odigos-data-collection -n odigos-system -o jsonpath='{.status.numberReady}') != 1 ]];\ndo\n  echo \"Waiting for odigos-data-collection daemonset to be created\" && sleep 3;\ndone\nwhile [[ $(kubectl get deployment odigos-gateway -n odigos-system -o jsonpath='{.status.readyReplicas}') != 1 ]];\ndo\n  echo \"Waiting for odigos-data-collection deployment to be created\" && sleep 3;\ndone\nwhile [[ $(kubectl get pods -n kvshop | grep Running | wc -l) -ne 5 ]];\ndo\n  echo \"Waiting for kvshop pods to be running\" && sleep 3;\ndone\nsleep 10\nkubectl get pods -A\nkubectl get svc -A\n\n# Start bot job\nkubectl create -f .github/workflows/e2e/buybot-job.yaml -n kvshop\n\n# Wait for bot job to complete\necho \"Waiting for bot job to complete...\"\nkubectl wait --for=condition=Complete --timeout=60s job/buybot-job -n kvshop\n\n# Copy trace output\necho \"Sleeping for 10 seconds to allow traces to be collected\"\nsleep 10\nkubectl cp -c filecp traces/test-opentelemetry-collector-0:tmp/trace.json ./.github/workflows/e2e/bats/traces-orig.json\n\n# Verify output trace\nbats .github/workflows/e2e/bats/verify.bats\n"
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "helm",
          "type": "tree",
          "content": null
        },
        {
          "name": "instrumentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "instrumentor",
          "type": "tree",
          "content": null
        },
        {
          "name": "k8sutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "odiglet",
          "type": "tree",
          "content": null
        },
        {
          "name": "opampserver",
          "type": "tree",
          "content": null
        },
        {
          "name": "procdiscovery",
          "type": "tree",
          "content": null
        },
        {
          "name": "scheduler",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests-infrastructure",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}