{
  "metadata": {
    "timestamp": 1736566870906,
    "page": 441,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spaceandtimelabs/SxT-Go-SDK",
      "stars": 3252,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env.sample",
          "type": "blob",
          "size": 0.4287109375,
          "content": "BASEURL_GENERAL=\"https://<base_url>/v1\" # Space and Time General API Endpoint\nBASEURL_DISCOVERY=\"https://<base_url>/v2\"  # Space and Time Discovery API Endpoint\nUSERID=\"\" # UserID required for authentication and authorization\nJOINCODE=\"\" # Space and Time Join Code which can be got from the SxT release team\nSCHEME=\"ed25519\"  # The key scheme or algorithm required for key generation\n\n# TEST\nTEST_USER=\nTEST_USER_PRIVKEY=\nTEST_USER_PUBKEY="
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.287109375,
          "content": "*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n.env\n.DS_Store\n\n# Test binary, built with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Dependency directories (remove the comment below to include it)\n# vendor/\n\n# Go workspace file\ngo.work\nsession.txt\n*.txt"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2023 Space and Time\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.8310546875,
          "content": "# go-sxt-sdk\n\nGolang SDK for Space and Time Gateway (go version >= 1.18)\n\n## Installation instructions\n\n```sh\ngo get github.com/spaceandtimelabs/SxT-Go-SDK\n```\n\n## Running locally\n\n_Note: Before running the code, rename `.env.sample` to `.env` and ensure that your credentials are setup in the `.env` file properly. You will need to obtain a `joinCode` and `endpoint` before you can begin_\n\n```sh\ngo mod tidy\n```\n\n## Features\n\n-   **Sessions**\n\n    The sdk can implement persistent storage in\n\n1. _File based sessions_\n2. _AWS Secrets Manager_.\n\nIt implements API V2 of Aws SDK (https://github.com/aws/aws-sdk-go-v2). Also access keys, access secrets are retrieved from sharedConfig and sharedCredentials. Read more here https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html\n\n-   **Encryption**\n\n    Support for Ed25519 public key encryption for Biscuit Authorization and Securing data in the platform.\n\n-   **SQL support**\n\n    -   Support for DDL: `creating own schema (namespace), tables`; `altering and deleting tables`\n    -   DML: Write all `CRUD` operations\n    -   DQL: Any `select` operations\n    -   SQL Views\n\n-   **Platform Discovery**\n    For fetching meta data from the platform\n    -   Namespaces\n    -   Tables\n    -   Table columns\n    -   Table index\n    -   Table primary key\n    -   Table relations\n    -   Primary key references\n    -   Foreign key references\n    -   List views\n\n## Examples\n\n-   **Running all examples at once**\n\n`main.go` contains a complete running example. To run the file\n\n```go\ngo run main.go\n```\n\nTo pass an existing user, use\n\n```go\ngo run main.go -userid=<USERID> -pubkey=<BASE64 STD ENCODED PUBLIC KEY WITHOUT PADDING> -privkey=<BASE64 STD ENCODED PRIVATE KEY WITHOUT PADDING>\n\n// e.g\n// pubkey=SiQrMfU+TfRrqqeo/ZDoOwSrHd9zrG1BCU4oDz+4C4Q\n// privkey=ys3hQPyfojJOzNymc0eWOKUiogQFGv3G+eeEDUBB8jpKJCsx9T5N9Guqp6j9kOg7BKsd33OsbUEJTigPP7gLhA\n```\n\nThis will bypass the `userid` and `joincode` mentioned in **.env** file.\n\nFor details on running the `main.go` file, use\n\n```go\ngo run main.go -h\n```\n\n-   **Authentication**\n\nIt is very important to save your **private key** used in authentication and biscuit generation. Else you will not have access to the user and tables created using the key.\n\nThe generated `AccessToken` is valid for 25 minutes and the `refreshToken` for 30 minutes.\n\n```go\n// New Authentication.\n// Generates new accessToken, refreshToken, privateKey, and publicKey\nfunc Authenticate()(accessToken, refreshToken string, privateKey ed25519.PrivateKey, publicKey ed25519.PublicKey){\n\n    // Read userId, joinCode from .env file\n\tuserId, _ := helpers.ReadUserId()\n\tjoinCode, _ := helpers.ReadJoinCode()\n\n\tvar pubkey ed25519.PublicKey\n\tvar privkey ed25519.PrivateKey\n\n\tvar authCodeStruct authentication.AuthCodeStruct\n\tvar tokenStruct authentication.TokenStruct\n\n\tsessionStruct, sessionStatus := storage.FileReadSession(userId)\n\n\tif !sessionStatus {\n\t\t// Generate Private and Public keys\n\t\tpubkey, privkey = helpers.CreateKey()\n\t} else {\n\t\tpubkey = sessionStruct.PublicKey\n\t\tprivkey = sessionStruct.PrivateKey\n\t}\n\n\n\t// Get auth code\n\tauthCode := authentication.GenerateAuthCode(userId, joinCode)\n\tjson.Unmarshal([]byte(authCode), &authCodeStruct)\n\n\t// Get Keys\n\tencodedSignature,  base64PublicKey := authentication.GenerateKeys(authCodeStruct.AuthCode, pubkey, privkey)\n\n\t// Get Token\n\ttokenJson := authentication.GenerateToken(userId, authCodeStruct.AuthCode, encodedSignature, base64PublicKey)\n\tjson.Unmarshal([]byte(tokenJson), &tokenStruct)\n\n\t// Store session data to a local file\n\n\twriteStatus := storage.FileWriteSession(userId, tokenStruct.AccessToken, tokenStruct.RefreshToken, privkey, pubkey)\n\tif !writeStatus{\n\t\tlog.Fatal(\"Invalid login. Change login credentials\")\n\t}\n\n\treturn tokenStruct.AccessToken, tokenStruct.RefreshToken, privkey, publicKey\n}\n\n```\n\n-   **Generating Biscuits**\n\nYou can create multiple biscuit tokens for a table allowing you provide different access levels for users. For the list of all the capabilities, [visit https://docs.spaceandtime.io/docs/biscuit-authorization](https://docs.spaceandtime.io/docs/biscuit-authorization)\n\nSample biscuit generation with permissions for `select query`, `insert query`, `update query`, `delete query`, `create table`\n\n```go\nvar sxtBiscuitCapabilities []authorization.SxTBiscuitStruct\n\n// Add biscuit capabilities\nsxtBiscuitCapabilities = append(sxtBiscuitCapabilities, authorization.SxTBiscuitStruct{Operation: \"dql_select\", Resource: \"eth.testtable103\"})\nsxtBiscuitCapabilities = append(sxtBiscuitCapabilities, authorization.SxTBiscuitStruct{Operation: \"dml_insert\", Resource: \"eth.testtable103\"})\nsxtBiscuitCapabilities = append(sxtBiscuitCapabilities, authorization.SxTBiscuitStruct{Operation: \"dml_update\", Resource: \"eth.testtable103\"})\nsxtBiscuitCapabilities = append(sxtBiscuitCapabilities, authorization.SxTBiscuitStruct{Operation: \"dml_delete\", Resource: \"eth.testtable103\"})\nsxtBiscuitCapabilities = append(sxtBiscuitCapabilities, authorization.SxTBiscuitStruct{Operation: \"ddl_create\", Resource: \"eth.testtable103\"})\n\n// Generate the biscuit token\nbiscuit, _ := authorization.CreateBiscuitToken(sxtBiscuitCapabilities, &privateKey)\n\n```\n\n-   **DDL, DML & DQL**\n\n    **Note**:\n\nTo generate a new **schema**, `ddl_create` permission is needed\n\n```go\n// Create a new schema\nsqlcore.CreateSchema(\"CREATE SCHEMA ETH\")\n\n// Only for create queries\n// For ALTER and DROP, use sqlcore.DDL()\nsqlcore.CreateTable(\"ETH.TESTTABLE103\", \"CREATE TABLE ETH.TESTTABLE103 (id INT PRIMARY KEY, test VARCHAR)\", \"permissioned\", biscuit, publicKey)\n\n// Only for ALTER and DROP queries\n// For Create table queries, use sqlcore.CreateTable()\nsqlcore.DDL(\"ETH.TESTTABLE103\", \"ALTER TABLE ETH.TESTTABLE103 ADD TEST2 VARCHAR\", biscuit)\n\n// DML\n// use the sqlcore.DML to write insert, update, delete, and merge queries\nsqlcore.DML(\"ETH.TESTTABLE103\", \"insert into ETH.TESTTABLE103 values(5, 'x5')\", biscuit);\n\n// DQL\n// Select operations\n// If rowCount is 0, then fetches all data without limit\nsqlcore.DQL(\"ETH.TESTTABLE103\", \"select * from ETH.TESTTABLE103\", biscuit, 0);\n```\n\n-   **DISCOVERY**\n\nDiscovery calls need a user to be logged in\n\n```go\n\n// List Namespaces\ndiscovery.ListNamespaces()\n\n// List Tables in a given namespace\n// Possible scope values -  ALL = all resources, PUBLIC = non-permissioned tables, PRIVATE = tables created by the requesting user\ndiscovery.ListTables(\"ETH\", \"ALL\")\n\n// List Columns for a given table in namespace\ndiscovery.ListColumns(\"ETH\", \"TESTTABLE103\")\n\n// List table index for a given table in namespace\ndiscovery.ListTableIndex(\"ETH\", \"TESTTABLE103\")\n\n\n// List table primary key for a given table in namespace\ndiscovery.ListTablePrimaryKey(\"ETH\", \"TESTTABLE103\")\n\n// List table relations for a namespace and scope\n// Possible scope values -  ALL = all resources, PUBLIC = non-permissioned tables, PRIVATE = tables created by the requesting user\ndiscovery.ListTableRelations(\"ETH\", \"PRIVATE\")\n\n// List table primary key references for a table and a namespace\ndiscovery.ListPrimaryKeyReferences(\"ETH\", \"TESTTABLE103\", \"TEST\")\n\n// List foreign key references for a table, column and a namespace\ndiscovery.ListForeignKeyReferences(\"ETH\", \"TESTTABLE103\", \"TEST\")\n```\n\n-   **Storage**\n\nFor AWS and File storage, the following methods are available\n\n```go\n\n// File\nstorage.FileWriteSession(userId, tokenStruct.AccessToken, tokenStruct.RefreshToken, privkey, pubkey)\n\nstorage.FileReadSession(userId)\n\nstorage.FileUpdateSession(userId, accessToken, refreshToken, privateKey, publicKey)\n\n// AWS\nstorage.AwsWriteSession(userId, tokenStruct.AccessToken, tokenStruct.RefreshToken, privkey, pubkey)\n\nstorage.AwsReadSession(userId)\n\nstorage.AwsUpdateSession(userId, accessToken, refreshToken, privateKey, publicKey)\n```\n\n## Configuring a project with SxT SDK\n\n1. Import library\n\n```go\ngo get github.com/spaceandtimelabs/SxT-Go-SDK\n```\n\n2. (Optional) Create a tmp folder in the project root to save user session information (default option). The other options include AWS secrets manager which is not discussed here\n\n```sh\nmkdir tmp\n```\n\n3. Copy all the `.env.sample` parameters to your environment file\n\n```sh\nBASEURL_GENERAL=\"https://<base_url>/v1\" # Space and Time General API Endpoint\nBASEURL_DISCOVERY=\"https://<base_url>/v2\"  # Space and Time Discovery API Endpoint\nUSERID=\"\" # UserID required for authentication and authorization\nJOINCODE=\"\" # Space and Time Join Code which can be got from the SxT release team\nSCHEME=\"ed25519\"  # The key scheme or algorithm required for key generation\n```\n\n4. Integration code\n\n```go\nfunc main() {\n\n\t// Load env file\n\tgodotenv.Load(\".env\")\n\n\tvar biscuits, resources []string\n\n\t// env variables\n\tinputUserID := os.Getenv(\"USERID\")\n\tpubKey := os.Getenv(\"PUB_KEY\")\n\tprivKey := os.Getenv(\"PRIV_KEY\")\n\n\t// Private key to byte array\n\tpvtKeyBytes, err := base64.StdEncoding.DecodeString(privKey)\n\tif err != nil {\n\t\tlog.Println(\"Private key decoding to []bytes error\", err)\n\t}\n\n\t// public key\n\t// Some languages generate a 32-byte private key while some generate 64-byte ones. For the later cases, 64-byte pvt key = 32-byte actual private key + 32-byte public key\n\tpubKeyBytes, err := base64.StdEncoding.DecodeString(pubKey)\n\tif err != nil {\n\t\tlog.Println(\"Public key decoding to []bytes error\", err)\n\t}\n\tif len(pvtKeyBytes) < 64 {\n\t\tpubKeyBytes = append(pubKeyBytes, pubKeyBytes...)\n\t\tprivKey = base64.StdEncoding.EncodeToString(pvtKeyBytes)\n\t}\n\n\t// Authenticate and get accessToken\n\taccessToken, _, _, _, err := utils.Authenticate(inputUserID, pubKey, privKey)\n\tif err != nil {\n\t\tlog.Println(\"Authentication error: \", err)\n\t}\n\n\t// Important: Save access token to env\n\tos.Setenv(\"accessToken\", accessToken)\n\n\t// Preparing to call DML\n\tbiscuits = append(biscuits, \"actual_biscuit_string\")\n\tresources = append(resources, \"schema_name.table_name\")\n\n\tsqlQuery :=  \"INSERT INTO schema_name.tablename VALUES(....)\"\n\n\terrString, status := sqlcore.DML(sqlQuery, \"\", biscuits, resources)\n\tif !status{\n\t\tlog.Println(\"Error inserting record to Space and Time: \", errString)\n\t}\n\n}\n```\n"
        },
        {
          "name": "authentication",
          "type": "tree",
          "content": null
        },
        {
          "name": "authorization",
          "type": "tree",
          "content": null
        },
        {
          "name": "autorize.datalog",
          "type": "blob",
          "size": 0.39453125,
          "content": "// Sample Datalog file for biscuits\n\ncapability(\"ddl_create\",    \"eth.testtable\");\ncapability(\"ddl_alter\",     \"eth.testtable\");\ncapability(\"ddl_drop\",      \"eth.testtable\");\ncapability(\"dml_insert\",    \"eth.testtable\");\ncapability(\"dml_update\",    \"eth.testtable\");\ncapability(\"dml_delete\",    \"eth.testtable\");\ncapability(\"dml_merge\",     \"eth.testtable\");\ncapability(\"dql_select\",    \"eth.testtable\");"
        },
        {
          "name": "discovery",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.0458984375,
          "content": "module github.com/spaceandtimelabs/SxT-Go-SDK\n\ngo 1.18\n\nrequire (\n\tgithub.com/aws/aws-sdk-go-v2 v1.17.6\n\tgithub.com/aws/aws-sdk-go-v2/config v1.18.17\n\tgithub.com/aws/aws-sdk-go-v2/service/secretsmanager v1.19.0\n\tgithub.com/biscuit-auth/biscuit-go/v2 v2.1.0\n\tgithub.com/joho/godotenv v1.5.1\n)\n\nrequire (\n\tgithub.com/alecthomas/participle/v2 v2.0.0-alpha7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/credentials v1.13.17 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.0 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/configsources v1.1.30 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.24 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/ini v1.3.31 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.24 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/sso v1.12.5 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.5 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/sts v1.18.6 // indirect\n\tgithub.com/aws/smithy-go v1.13.5 // indirect\n\tgoogle.golang.org/protobuf v1.33.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 4.9248046875,
          "content": "github.com/alecthomas/participle/v2 v2.0.0-alpha7 h1:cK4vjj0VSgb3lN1nuKA5F7dw+1s1pWBe5bx7nNCnN+c=\ngithub.com/alecthomas/participle/v2 v2.0.0-alpha7/go.mod h1:NumScqsC42o9x+dGj8/YqsIfhrIQjFEOFovxotbBirA=\ngithub.com/alecthomas/repr v0.0.0-20181024024818-d37bc2a10ba1 h1:GDQdwm/gAcJcLAKQQZGOJ4knlw+7rfEQQcmwTbt4p5E=\ngithub.com/alecthomas/repr v0.0.0-20181024024818-d37bc2a10ba1/go.mod h1:xTS7Pm1pD1mvyM075QCDSRqH6qRLXylzS24ZTpRiSzQ=\ngithub.com/aws/aws-sdk-go-v2 v1.17.6 h1:Y773UK7OBqhzi5VDXMi1zVGsoj+CVHs2eaC2bDsLwi0=\ngithub.com/aws/aws-sdk-go-v2 v1.17.6/go.mod h1:uzbQtefpm44goOPmdKyAlXSNcwlRgF3ePWVW6EtJvvw=\ngithub.com/aws/aws-sdk-go-v2/config v1.18.17 h1:jwTkhULSrbr/SQA8tfdYqZxpG8YsRycmIXxJcbrqY5E=\ngithub.com/aws/aws-sdk-go-v2/config v1.18.17/go.mod h1:Lj3E7XcxJnxMa+AYo89YiL68s1cFJRGduChynYU67VA=\ngithub.com/aws/aws-sdk-go-v2/credentials v1.13.17 h1:IubQO/RNeIVKF5Jy77w/LfUvmmCxTnk2TP1UZZIMiF4=\ngithub.com/aws/aws-sdk-go-v2/credentials v1.13.17/go.mod h1:K9xeFo1g/YPMguMUD69YpwB4Nyi6W/5wn706xIInJFg=\ngithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.0 h1:/2Cb3SK3xVOQA7Xfr5nCWCo5H3UiNINtsVvVdk8sQqA=\ngithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.0/go.mod h1:neYVaeKr5eT7BzwULuG2YbLhzWZ22lpjKdCybR7AXrQ=\ngithub.com/aws/aws-sdk-go-v2/internal/configsources v1.1.30 h1:y+8n9AGDjikyXoMBTRaHHHSaFEB8267ykmvyPodJfys=\ngithub.com/aws/aws-sdk-go-v2/internal/configsources v1.1.30/go.mod h1:LUBAO3zNXQjoONBKn/kR1y0Q4cj/D02Ts0uHYjcCQLM=\ngithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.24 h1:r+Kv+SEJquhAZXaJ7G4u44cIwXV3f8K+N482NNAzJZA=\ngithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.24/go.mod h1:gAuCezX/gob6BSMbItsSlMb6WZGV7K2+fWOvk8xBSto=\ngithub.com/aws/aws-sdk-go-v2/internal/ini v1.3.31 h1:hf+Vhp5WtTdcSdE+yEcUz8L73sAzN0R+0jQv+Z51/mI=\ngithub.com/aws/aws-sdk-go-v2/internal/ini v1.3.31/go.mod h1:5zUjguZfG5qjhG9/wqmuyHRyUftl2B5Cp6NNxNC6kRA=\ngithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.24 h1:c5qGfdbCHav6viBwiyDns3OXqhqAbGjfIB4uVu2ayhk=\ngithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.24/go.mod h1:HMA4FZG6fyib+NDo5bpIxX1EhYjrAOveZJY2YR0xrNE=\ngithub.com/aws/aws-sdk-go-v2/service/secretsmanager v1.19.0 h1:B4LvuBxrxh2WXakqwJL22EPAWgqGGK9/E4YQV/IIkYo=\ngithub.com/aws/aws-sdk-go-v2/service/secretsmanager v1.19.0/go.mod h1:XF4Gbmcn6V9xIIm6lhwtyX1NXConNJ8x6yizt2Ejx/0=\ngithub.com/aws/aws-sdk-go-v2/service/sso v1.12.5 h1:bdKIX6SVF3nc3xJFw6Nf0igzS6Ff/louGq8Z6VP/3Hs=\ngithub.com/aws/aws-sdk-go-v2/service/sso v1.12.5/go.mod h1:vuWiaDB30M/QTC+lI3Wj6S/zb7tpUK2MSYgy3Guh2L0=\ngithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.5 h1:xLPZMyuZ4GuqRCIec/zWuIhRFPXh2UOJdLXBSi64ZWQ=\ngithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.5/go.mod h1:QjxpHmCwAg0ESGtPQnLIVp7SedTOBMYy+Slr3IfMKeI=\ngithub.com/aws/aws-sdk-go-v2/service/sts v1.18.6 h1:rIFn5J3yDoeuKCE9sESXqM5POTAhOP1du3bv/qTL+tE=\ngithub.com/aws/aws-sdk-go-v2/service/sts v1.18.6/go.mod h1:48WJ9l3dwP0GSHWGc5sFGGlCkuA82Mc2xnw+T6Q8aDw=\ngithub.com/aws/smithy-go v1.13.5 h1:hgz0X/DX0dGqTYpGALqXJoRKRj5oQ7150i5FdTePzO8=\ngithub.com/aws/smithy-go v1.13.5/go.mod h1:Tg+OJXh4MB2R/uN61Ko2f6hTZwB/ZYGOtib8J3gBHzA=\ngithub.com/biscuit-auth/biscuit-go/v2 v2.1.0 h1:ItsXqoHj3DpCtKF94aIgj913r4T+ijn8nd15ONyaGEA=\ngithub.com/biscuit-auth/biscuit-go/v2 v2.1.0/go.mod h1:YaR8ypOxcsDIxtjg307a23xFzC5mdhw3vBonb+OtZYU=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/google/go-cmp v0.5.8 h1:e6P7q2lk1O+qJJb4BtCQXlK8vWEO8V1ZeuEdJNOqZyg=\ngithub.com/google/go-cmp v0.5.8/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\ngithub.com/joho/godotenv v1.5.1 h1:7eLL/+HRGLY0ldzfGMeQkb7vMd0as4CfYvUVzLqw0N0=\ngithub.com/joho/godotenv v1.5.1/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.8.2 h1:+h33VjcLVPDHtOdpUCuF+7gSuG3yGIftsP1YvFihtJ8=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\n"
        },
        {
          "name": "helpers",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 3.587890625,
          "content": "package main\n\nimport (\n\t\"crypto/ed25519\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/spaceandtimelabs/SxT-Go-SDK/authentication\"\n\t\"github.com/spaceandtimelabs/SxT-Go-SDK/helpers\"\n\t\"github.com/spaceandtimelabs/SxT-Go-SDK/storage\"\n\t\"github.com/spaceandtimelabs/SxT-Go-SDK/utils\"\n)\n\n// Check the command line arguments\nfunc isFlagPassed(name string) int {\n\tcount := 0\n\tflag.Visit(func(f *flag.Flag) {\n\t\tif f.Name == name {\n\t\t\tcount = 1\n\t\t}\n\t})\n\treturn count\n}\n\n\n\n// Main function\nfunc main() {\n\n\tfmt.Println(\"\")\n\tfmt.Println(\"For exisiting users\")\n\tfmt.Println(\"Usage: go run main.go -userid=<USERID> -pubkey=<BASE64 STD ENCODED PUBLIC KEY> -privkey=<BASE64 STD ENCODED PRIVATE KEY>\")\n\tfmt.Println(\"\")\n\n\tvar privateKey ed25519.PrivateKey\n\tvar publicKey ed25519.PublicKey\n\tvar accessToken string\n\n\n\tinputUserid := flag.String(\"userid\", \"\", \"(Optional) SxT userid. But if provided, the remaining values are required\")\n\tinputPubKey := flag.String(\"pubkey\", \"\", \"(Optional) Standard base64 encoded public key. But if provided, the remaining values are required\")\n\tinputPrivKey := flag.String(\"privkey\", \"\", \"(Optional) Standard base64 encoded private key. But if provided, the remaining values are required\")\n\tflag.Parse()\n\n\n\t/*************************************\n\t// Authentication Block\n\t*************************************/\n\n\t/* AUTH BLOCK STARTS */\n\ttotalFlags := isFlagPassed(\"userid\") + isFlagPassed(\"pubkey\") + isFlagPassed(\"privkey\")\n\n\tif totalFlags < 3 && totalFlags > 0 {\n\t\tfmt.Println(\"=== Missing input values. Stopping program ===\")\n\t\treturn\n\t}\n\n\tif isFlagPassed(\"userid\")+isFlagPassed(\"pubkey\")+isFlagPassed(\"privkey\") == 3 {\n\n\t\tif len(*inputUserid) > 0 || len(*inputPubKey) > 0 || len(*inputPrivKey) > 0 {\n\t\t\taccessToken, _, privateKey, publicKey, _ = utils.Authenticate(*inputUserid, *inputPubKey, *inputPrivKey)\n\t\t\tfmt.Println(\"=== Existing Login from user input ===\", accessToken)\n\n\t\t} else {\n\t\t\tfmt.Println(\"=== Empty input values. Stopping program ===\")\n\t\t\treturn\n\t\t}\n\t} else {\n\t\tuserId, _ := helpers.ReadUserId()\n\t\tsessionData, status := storage.FileReadSession(userId)\n\n\t\tif !status {\n\n\t\t\temptyString := \"\"\n\t\t\taccessToken, _, privateKey, publicKey, _ = utils.Authenticate(emptyString, emptyString, emptyString)\n\t\t\tfmt.Println(\"=== New Login. Creating new session ===\")\n\n\t\t} else {\n\n\t\t\tvalidateTokenStatus := authentication.ValidateToken(sessionData.AccessToken)\n\n\t\t\tif !validateTokenStatus {\n\n\t\t\t\trefreshTokenStruct, refreshTokenStatus := authentication.RefreshToken(sessionData.RefreshToken)\n\n\t\t\t\tif refreshTokenStatus {\n\t\t\t\t\tfmt.Println(\"=== Invalid session on session.txt file. Using refresh token ===\")\n\n\t\t\t\t\tprivateKey = sessionData.PrivateKey\n\t\t\t\t\tpublicKey = sessionData.PublicKey\n\t\t\t\t\taccessToken = refreshTokenStruct.AccessToken\n\n\t\t\t\t\twriteStatus := storage.FileWriteSession(userId, refreshTokenStruct.AccessToken, refreshTokenStruct.RefreshToken, sessionData.PrivateKey, sessionData.PublicKey)\n\t\t\t\t\tif !writeStatus {\n\t\t\t\t\t\tlog.Fatal(\"Invalid login. Change login credentials\")\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Println(\"=== Invalid session on session.txt file. Issuing new token ===\")\n\t\t\t\t\temptyString := \"\"\n\t\t\t\t\taccessToken, _, privateKey, publicKey, _ = utils.Authenticate(emptyString, emptyString, emptyString)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"=== Login using session.txt file ===\")\n\t\t\t\tprivateKey = sessionData.PrivateKey\n\t\t\t\tpublicKey = sessionData.PublicKey\n\t\t\t\taccessToken = sessionData.AccessToken\n\t\t\t}\n\t\t}\n\t}\n\n\t// Important : Set the accessToken in Environment variable to access in later\n\tos.Setenv(\"accessToken\", accessToken)\n\n\t/* AUTH BLOCK ENDS */\n\n\n\t// Call SQL functions\n\tutils.SQLAPIs(privateKey, publicKey)\n\tutils.DiscoveryAPIs()\n\t\n}\n"
        },
        {
          "name": "main_test.go",
          "type": "blob",
          "size": 1.189453125,
          "content": "package main\n\nimport (\n\t\"crypto/ed25519\"\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/spaceandtimelabs/SxT-Go-SDK/utils\"\n)\n\nvar userId, privKeyB64, pubKeyB64 string\nvar privKey ed25519.PrivateKey\nvar pubKey ed25519.PublicKey\n\n// Test Authentication\nfunc TestAuthentication(t *testing.T){\n\tuserId, ok := os.LookupEnv(\"TEST_TRIAL_USERID\")\n\tif !ok {\n\t\tt.Error(\"TEST_TRIAL_USERID not set in env\")\n\t}\n\n\tprivKeyB64, ok = os.LookupEnv(\"TEST_TRIAL_PRIVKEY\")\n\tif !ok {\n\t\tt.Error(\"TEST_TRIAL_PRIVKEY not set in env\")\n\t}\n\n\tpubKeyB64, ok = os.LookupEnv(\"TEST_TRIAL_PUBKEY\")\n\tif !ok {\n\t\tt.Error(\"TEST_TRIAL_PUBKEY not set in env\")\n\t}\n\n\t_, _, privKeyBytes, pubKeyBytes, err := utils.Authenticate(userId, pubKeyB64, privKeyB64)\n\n\tif err != nil {\n\t\tt.Errorf(\"Autentication error %q\", err)\n\t}\n\n\tpubKey = pubKeyBytes\n\tprivKey = privKeyBytes\n\n}\n\n// Test SQL APIs\nfunc TestSQLAPIs(t *testing.T){\n\terr := utils.SQLAPIs(privKey, pubKey)\n\t// Intentionally skip errors as we dont want to modify any records\n\t// This will always throw error\n\tif err == nil {\n\t\tt.Errorf(\"SQL API error %q\", err)\n\t}\n}\n\n\n\n// Test Discovery APIs\nfunc TestDiscoveryAPIs(t *testing.T){\n\terr := utils.DiscoveryAPIs()\n\tif err != nil {\n\t\tt.Errorf(\"Discovery APIs error %q\", err)\n\t}\n}"
        },
        {
          "name": "sqlcore",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "tmp",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}